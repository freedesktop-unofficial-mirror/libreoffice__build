AC_INIT(ooo-build, 2.99.25)
AC_PREREQ(2.51)
AC_CONFIG_SRCDIR(bin/build-ooo)
AC_PREFIX_DEFAULT(/usr)

DEFAULT_TAG=ooo300-m2
# For the upstream packages it is like:
# DEFAULT_TAG=OOH680_m12

# The option tar-ustar is necessary because of some patches have too long
# names so that they cannot be archived using the old V7 format
# This option has been supported since automake 1.8b
AM_INIT_AUTOMAKE([1.8b tar-ustar])

OOO_BUILDVERSION=AC_PACKAGE_VERSION
AC_SUBST(OOO_BUILDVERSION)

PROPAGATED_ARGS=$ac_configure_args
AC_SUBST(PROPAGATED_ARGS)

AC_ARG_WITH(tag,
[
  --with-tag              define the tag to use, defaults to the latest
			  release
			  
			  Example:  --with-tag=dev300-mXYZ],
,)

AC_ARG_WITH(split,
[
  --with-split            adapt to the new package split for the source
  			  code, rather than the older version.],
,with_split=yes)

AC_ARG_WITH(piece,
[
  --with-piece            build only a piece of openoffice.
			  bootstrapping goodness.
			  			  
			  Examples:  --with-piece=bootstrap],
,)

AC_ARG_WITH(srcdir,
[
  --with-srcdir           define the directory where to download the source
			  tarball and other extra sources.],
,)

AC_ARG_WITH(win32,
[
  --with-win32            define the build to be on win32; this sets a number
			  of defaults suitable for that platform.],
,)

AC_ARG_WITH(distro,
[
  --with-distro           build with a specific distributions patch-set. There
			  is no default value, so you always have to select one.
			  			  
			  Examples:  --with-distro=Ark
			             --with-distro=Debian
				     --with-distro=SUSE
			  
			  Hint: Run once without this option to get full list
			  of available distributions ;-)],
,)

AC_ARG_WITH(lang,
[
  --with-lang             define the localizations to build. The English one
			  is built by default.

			  Examples:  --with-lang="en-US de fr it"
				     --with-lang=ALL],
,)

AC_ARG_WITH(poor-help-localizations,
[
  --with-poor-help-localizations
			define the localizations with so incomplete help
			that the English(US) one should be used instead.

			Example:  --with-poor-help-localizations="af ar ca"],
,)

AC_ARG_WITH(additional-sections,
[
  --with-additional-sections
			define list of additional sections that should be
			enabled in the apply file; It allows to easily
			enable experimental sets of patches that are not
			applied by default.

			Example:
			    --with-additional-sections="EMFPlus PostgreSQL"
],,)

AC_ARG_ENABLE(dbgutil,
[  --enable-dbgutil:       Include additional debugging utilities, such as
                          assertions, object counting, etc. Larger build.
                          (this generates a non-product build)
],,)

AC_ARG_ENABLE(binfilter,
[  --enable-binfilter:     Enable legacy binary file formats filters
                          this makes source download size larger
],,)

AC_ARG_ENABLE(odk,
[  --disable-odk           OO.o includes an ODK, office development kit
                          which some packagers may with to build without
],,)

AC_ARG_WITH(mingwin,
[  --with-mingwin          For Windows users, use the mingwin32 compiler within
                          cygwin environment, this implies --with-use-shell=tcsh

                          Usage: --with-mingwin=yes

                           For !Windows use, use the mingw32 C++ compiler to (re-)
                           build unowinreg.dll

                          Usage: --with-mingwin=i586-mingw32msvc-g++
],,)

AC_ARG_ENABLE(mediawiki,
[  --disable-mediawiki    disables the build of the MediaWiki Editor extension
],,)

AC_ARG_ENABLE(scsolver,
[  --disable-scsolver     disables the Calc Solver extension.
],,)

AC_ARG_ENABLE(mono,
[  --enable-mono           Enables the compilation of the Mono bindings
],,)

AC_ARG_ENABLE(graphite,
[  --enable-graphite       Enables hyper-complex text rendering with
			  graphite enabled fonts.
],,)

AC_ARG_ENABLE(access,
[  --disable-access        Disable the Access import pieces.
],,)

AC_ARG_WITH(system-mdbtools,
[
  --with-system-mdbtools     Use system libmdb* for the Access base backend
],,)

AC_ARG_WITH(system-libwpd,
[
  --with-system-libwpd     Use system libwpd* library
],,)

AC_ARG_WITH(system-libwps,
[
  --with-system-libwps     Use system libwps* library
],,)

AC_ARG_WITH(system-libwpg,
[
  --with-system-libwpg     Use system libwpg* library
],,)

AC_ARG_ENABLE(cairo,
[
  --enable-cairo          Enables cairo canvas backend.],
,)

AC_ARG_WITH(ooo-builddir,
[
  --with-ooo-builddir     define the directory where openoffice.org will be
			  compiled, e.g. the root of an ooo cvs checkout.],
,)

AC_ARG_WITH(installed-ooo-dirname,
[
  --with-installed-ooo-dirname
			  specify the directory name of the core OOo network
			  install dir, for example "openoffice" or "ooo-1.1",
			  yielding a core install directory of
			  /usr/lib/openoffice or /usr/lib/ooo-1.1.

			  Example:  --with-installed-ooo-dirname=ooo-1.1],
,)

AC_ARG_WITH(binsuffix,
[
  --with-binsuffix
			  specify the suffix to be used on the end of script
			  names, to allow parallel installation of two versions.
			  
			  Default:  --with-binsuffix=2.0],
,)

AC_ARG_WITH(docdir,
[
  --with-docdir           define the directory name where the extra
			  documentation will be installed.

			  Example:  --with-docdir=/usr/share/doc/packages/OpenOffice.org],
,)

AC_ARG_WITH(num-cpus,
[
  --with-num-cpus         Number of build processes/cpus to use (number of
			  projects that will build at the same time).
			  Multi-process/multi-cpu builds can save a lot of time
			  on multi-cpu machines.],
,)

AC_ARG_WITH(gcc-speedup,
[
  --with-gcc-speedup      Tool to use to speedup the compilation. Currently
			  ccache (caching results of previous compilation) and
			  icecream (distributed compiling tool) are supported.
			  Both can be used at the same time.

			  Example: --with-gcc-speedup=ccache,icecream],
,)

AC_ARG_WITH(icecream-bindir,
[
  --with-icecream-bindir  Location of icecream's gcc and g++.
			  Defaults to /opt/icecream/bin.],
,)

AC_ARG_WITH(max-jobs,
[
  --with-max-jobs
			  Maximum number of jobs that make will issue at
			  the same time. Defaults to 1.],
,)

AC_ARG_ENABLE(gtk,
[
  --disable-gtk           Disables gtk+ native widgets.],
,)

AC_ARG_ENABLE(kde,
[
  --disable-kde           Disables KDE native widgets.],
,)

AC_ARG_ENABLE(strip,
[
  --disable-strip
			  Disables the stripping of installed binaries, so 
			  debugging symbols are not removed.],
,)

AC_ARG_ENABLE(split-app-modules,
[
  --enable-split-app-modules
			  Split file lists for app modules: base, calc, ...],
,)

AC_ARG_ENABLE(split-opt-features,
[
  --enable-split-opt-features
			  Split file lists for some optional features:
			  pyuno, testtool ...],
,)

AC_ARG_ENABLE(post-install-scripts,
[
  --disable-post-install-scripts
			  Disables post install scripts within make install.
			  It is usefull when creating a package from the
			  installed files. The scripts are then run by
			  the package after it is installed.],
,)

AC_ARG_WITH(arch,
[
  --with-arch             Define the architecture that we will target.

                          Usage: --with-arch=(x86|ppc|sparc)],
,)

AC_ARG_WITH(mono-gac,
[
  --with-mono-gac-root    Define the root of the mono GAC. It is especially
                          needed if you are using $DESTDIR and want to
			  preinstall the mono DLLs into the GAC.
		      
			  Example: --with-mono-gac=/usr/lib],
,)


AC_ARG_WITH(openclipart,
[
  --with-openclipart      Build and install OOo galleries from the Open Clip
			  Art Library. The parameter is either a version of
			  the library or an absolute path to the prebuilt and
			  preinstalled .png files.
		      
			  Example: --with-openclipart=0.13
				   --with-openclipart=/usr/share/openclipart],
,)

AC_ARG_WITH(dejavu-fonts,
[
  --with-dejavu-fonts     Download and install updated DejaVu Fonts. The parameter is
                          a version number.
		      
			  Example: --with-dejavu-fonts=2.24

			  DejaVu Fonts already part of OpenOffice.org so you should
			  add this parameter if you want newer version.],
,)

AC_ARG_WITH(liberation-fonts,
[
  --with-liberation-fonts
		          Download and install updated Liberation Fonts. The parameter is
                          a version number.
		      
			  Example: --with-liberation-fonts=1.1],
,)


AC_ARG_WITH(gnu-cp,
[
  --with-gnu-cp           The parameter is an absolute path to GNU cp.
		      
			  Example: --with-gnu-cp=/usr/local/bin/gcp],
,)

AC_ARG_WITH(gnu-patch,
[
  --with-gnu-patch        The parameter is an absolute path to GNU patch.
		      
			  Example: --with-gnu-cp=/usr/local/bin/gpatch],
,)

AC_ARG_WITH(gnu-tar,
[
  --with-gnu-tar          The parameter is an absolute path to GNU tar.
		      
			  Example: --with-gnu-cp=/usr/local/bin/gtar],
,)

AC_ARG_WITH(drink,
[
  --with-drink            The parameter is a favourite drink that unpack should advise you to take.
		      
			  Example: --with-drink=coffee],
,)

AC_ARG_WITH(git,
[
  --with-git              Use GIT to manage your patches],
,)

dnl
dnl Items here only to make --help work nicely:
dnl 
AC_ARG_ENABLE(java,
[
  --with-java             build ooo with a Jdk & Java support],
,)
dnl
dnl Mirror
dnl
AC_ARG_WITH(mirror,
[
  --with-mirror           Specify a mirror of the go-ooo.org packages
			  directory.
			
			  Example: --with-mirror=http://foo.bar.baz/mirror

			  If you want to setup your own mirror, just add
			  something like the following to your cron:

			  rsync -azq --delete --partial go-oo.org::packages \\
				/some/directory/where/you/want/],
,)

AM_MAINTAINER_MODE

dnl
dnl Setup the misc. tweaks we need.
dnl
BASEDIR=`pwd`
TOOLSDIR=$BASEDIR

# it will be modified by the --with-additional-sections but it might 
# modified also by other options
OOO_ADDITIONAL_SECTIONS=

AC_PATH_PROG(PERL, perl)
if test -z "PERL"; then
   AC_MSG_ERROR([perl not found; required for ooo-build])
fi
AC_SUBST(PERL)
INTLTOOL_PERL=$PERL
AC_SUBST(INTLTOOL_PERL)

AC_PATH_PROG(PKG_CONFIG, pkg-config)
if test ! -x "$PKG_CONFIG" ; then
   AC_MSG_ERROR([
*** You need the latest pkg-config.
*** Get the latest version of pkg-config from
*** <http://www.freedesktop.org/software/pkgconfig/>.])
fi
AC_SUBST(PKG_CONFIG)

PKG_CHECK_MODULES( FOO_COMMON, 
		   [ libxml-2.0 fontconfig >= 1.0.1 ],
		   have_common=true, have_common=false )

# NB. according to:
#   http://sources.redhat.com/ml/bug-automake/2002/msg02066.html
# it's a really bad idea to do conditional tests for things.
#
if test "z`uname -s`" != "zSunOS" -a "z$with_win32" = "z" -a "z`uname -o`" = "zCygwin" ; then
    AC_MSG_WARN([On Cygwin, automatically using --with-win32, --enable-binfilter, --with-dejavu-fonts and --disable-build-mozilla])
    with_win32="yes"
    enable_binfilter="yes"
    with_dejavu_fonts=yes
    PROPAGATED_ARGS="$PROPAGATED_ARGS --enable-binfilter=yes --disable-build-mozilla"
fi
if test "z$with_win32" = "z"; then
    if test ! $have_common; then
	AC_MSG_ERROR([Library requirements were not met])
    fi
    BUILD_WIN32=
else
    if test "z$with_distro" = "z"; then
	with_distro="Win32"
    fi

    BUILD_WIN32=yes
fi

AC_SUBST(BUILD_WIN32)

AM_CONDITIONAL(BUILD_WIN32, [test "$BUILD_WIN32" = yes])

if test "z$with_tag" = "z"; then
   with_tag=$DEFAULT_TAG
fi

if test "z`uname -s`" = "zSunOS" -a -f /usr/xpg4/bin/grep ; then
   GREP=/usr/xpg4/bin/grep
else
   GREP=grep
fi

if echo "$with_tag" | $GREP -E ['^(src680-m2[4-9][0-9]|dev300|beb300|BEB300|ooo300|OOO300)'] >/dev/null 2>/dev/null ; then
   APPLY_DIR="$TOOLSDIR/patches/dev300"
else
   APPLY_DIR="$TOOLSDIR/patches/$with_tag"
fi

# search more dirs for the apply file
# the default dir is defined by the selected tag
# the alternatives are derived by removing a part (suffix) of the tag
while test "$APPLY_DIR" != "$TOOLSDIR/patches/" ; do
   test -f $APPLY_DIR/apply && break
   APPLY_DIR=${APPLY_DIR%?}
done
test "$APPLY_DIR" = "$TOOLSDIR/patches/" && APPLY_DIR="$TOOLSDIR/patches"
if test -f $APPLY_DIR/apply; then
   AC_MSG_RESULT([found $with_tag, using $APPLY_DIR/apply])
else
   AC_MSG_ERROR([Can't locate patch set for: $with_tag])
fi
CVSTAG=$with_tag
AC_SUBST(CVSTAG)
AC_SUBST(APPLY_DIR)

AC_MSG_CHECKING( for master workspace name )
MWS=`echo ${CVSTAG%[[-_]]*} | tr [[:lower:]] [[:upper:]]`
AC_MSG_RESULT([$MWS])
AC_SUBST(MWS)

AC_MSG_CHECKING([for split sources])
SPLIT=$with_split
test -z "$SPLIT" && echo $CVSTAG | grep -q "dev300" && test `echo $CVSTAG | sed 's|dev300-m||'` -gt 21 && SPLIT=yes
test -z "$SPLIT" && echo $CVSTAG | grep -q "ooo300" && SPLIT=yes
AC_MSG_RESULT([${SPLIT:-no}])
AC_SUBST(SPLIT)

PIECE=$with_piece
AC_SUBST(PIECE)

# FIXME: We currently do not support starting build with already unpackaged
# sources, so the following warning is always printed
warn_use_download="	./download
"
AC_MSG_CHECKING( for directory where to download sources )
if test "z$with_srcdir" = "z"; then
    SRCDIR=$BASEDIR/src
elif (echo "${with_srcdir}" | $GREP -v -q "^/"); then
    AC_MSG_ERROR([--with-srcdir= must be an absolute path]);
else
    SRCDIR=$with_srcdir
fi
AC_MSG_RESULT([$SRCDIR])

BUILDDIR=$BASEDIR/build
if test "z$with_ooo_builddir" = "z"; then
   OOBUILDDIR=$BUILDDIR/$CVSTAG
else
   OOBUILDDIR=$with_ooo_builddir
fi

if test "z`uname -s`" != "zSunOS" -a "z$with_win32" != "z" -a "z`uname -o`" = "zCygwin" ; then
    AC_MSG_CHECKING([that we use /cygdrive paths])
    case "$OOBUILDDIR" in
	/cygdrive/*) 
	    ;;
	*)  AC_MSG_ERROR([You must use /cygdrive/... style paths, not Cygwin mounts])
	    ;;
    esac
    AC_MSG_RESULT([yes])
fi

rm -f $BASEDIR/stamp/patch.apply

AC_SUBST(SRCDIR)
AC_SUBST(BUILDDIR)
AC_SUBST(TOOLSDIR)
AC_SUBST(OOBUILDDIR)

if test "z$with_win32" != "z"; then
    AC_PATH_PROG(CABEXTRACT, cabextract)
    if test "!" -x "$CABEXTRACT" ; then
      AC_MSG_ERROR([
*** The cabextract utility must be installed.])
    fi
fi

AC_MSG_CHECKING([for distribution name])
case "$with_distro" in
    ""|"yes"|"no") distros_list=`ls distro-configs/*.conf.in | sort | sed -e "s|distro-configs/\(.*\).conf.in|\t\1|g"`
	AC_MSG_ERROR([A distribution must be selected by the option --with-distro. You can choose one from:
$distros_list])
	;;
    NLD) DISTRO="SUSE"
	;;
    NLD*) distro_version="${with_distro#NLD}"
	distro_version="${distro_version#-}"  # remove optional '-'
	DISTRO="SUSE-$distro_version.1"
	;;
    *) DISTRO="$with_distro"
	;;
esac
AC_MSG_RESULT([$DISTRO])
AC_SUBST(DISTRO)

AC_MSG_CHECKING([for vendor name based on the distribution name])
VENDORNAME=OpenOffice
case $DISTRO in
        Ark*) VENDORNAME="Ark" ;;
        Debian*|Ubuntu*) VENDORNAME="Debian" ;;
        Dropline*) VENDORNAME="DroplineGNOME" ;;
        Frugalware*) VENDORNAME="Frugalware" ;;
        Gentoo*) VENDORNAME="Gentoo" ;;
        Mandriva*) VENDORNAME="Mandriva" ;;
        Pardus*) VENDORNAME="Pardus" ;;
        rPath*|rpl*) VENDORNAME="rPath" ;;
        SUSE*|Novell*|NLD*|GoOo*) VENDORNAME="Novell" ;;
        PLD*) VENDORNAME="PLD" ;;
        *) AC_MSG_WARN([Cannot guess vendor from distro - please add it to configure.in]) ;;
esac
AC_MSG_RESULT([$VENDORNAME])
AC_SUBST(VENDORNAME)

if test "z$with_java" = "zno"; then
   AC_PATH_PROG(XSLTPROC, xsltproc, no)
   if test "$XSLTPROC" = "no"; then
      AC_MSG_ERROR([xsltproc is required to build without java])
   fi
fi

AC_CHECK_HEADER(security/pam_appl.h, have_pam=true, have_pam=false)
AC_CHECK_HEADER(png.h, have_png=true, have_png=false)
AC_CHECK_HEADER(zlib.h, have_zlib=true, have_zlib=false)

if test "z$with_win32" = "z"; then
    if test "z$enable_pam" != "zno" && ! $have_pam; then
	AC_MSG_ERROR(install pam-devel)
    fi
    if ! $have_png; then
	AC_MSG_ERROR(install png-devel)
    fi

    if ! $have_zlib; then
	AC_MSG_ERROR(install zlib-devel)
    fi

fi

AC_CHECK_PROG(ACONF, autoconf, yes)
if ! test "z$ACONF" = "zyes"; then
    AC_MSG_ERROR( autoconf must be installed )
fi

AC_CHECK_PROG(FLEX, flex, yes)
if ! test "z$FLEX" = "zyes"; then
   AC_MSG_ERROR( flex must be installed )
fi

AC_CHECK_PROG(BISON, bison, yes)
if ! test "z$BISON" = "zyes"; then
   AC_MSG_ERROR( bison must be installed )
fi

BUILD_NCPUS=1
if test "z$with_num_cpus" != "z"; then
   BUILD_NCPUS=$with_num_cpus
fi
AC_SUBST(BUILD_NCPUS)

AC_CHECK_PROG(CCACHE, ccache, yes)

ENABLE_CCACHE=""
ENABLE_ICECREAM=""
for enable_speedup in `echo "$with_gcc_speedup" | sed 's/,/ /g'`
do
    if test "$enable_speedup" = "ccache"; then
        if test "$CCACHE" != "yes"; then
            AC_MSG_ERROR([ccache not found, but set in --with-gcc-speedup])
        else
            ENABLE_CCACHE="yes"
            if test "z$with_ooo_builddir" = "z"; then
                OOBUILDDIR=$BUILDDIR/current
            fi
            if test -d "$OOBUILDDIR" ; then
                if test -f "$OOBUILDDIR/.tag" ; then
                    save_tag=`cat "$OOBUILDDIR/.tag"`
                    if test "$save_tag" != "$CVSTAG" ; then
                        while test -d "$BUILDDIR/$save_tag" ; do
                            save_tag="$save_tag."
                        done
                        mv "$OOBUILDDIR" "$BUILDDIR/$save_tag"
                    fi
                else
                    AC_MSG_ERROR([Building with ccache, but unable to backup the previous version.
Please move $OOBUILDDIR away...])
                fi
            fi
        fi
    elif test "$enable_speedup" = "icecream"; then
        ENABLE_ICECREAM="yes"
    fi
done
AC_SUBST(ENABLE_CCACHE)
AC_SUBST(ENABLE_ICECREAM)

ICECREAM_BINDIR="/opt/icecream/bin"
if test "z$with_icecream_bindir" != "z"; then
    ICECREAM_BINDIR="$with_icecream_bindir"
fi
if test "z$ENABLE_ICECREAM" = "zyes"; then
    if test ! -x "$ICECREAM_BINDIR/gcc" -o ! -x "$ICECREAM_BINDIR/g++" ; then
        AC_MSG_ERROR([icecream's gcc and g++ not found, please set --with-icecream-bindir])
    fi
fi
AC_SUBST(ICECREAM_BINDIR)

MAX_JOBS="1"
if test "z$ENABLE_ICECREAM" = "zyes"; then
    # for icecream, default to the maximum
    MAX_JOBS="10"
fi
if test "z$with_max_jobs" != "z"; then
    if test "$with_max_jobs" -gt "10"; then
        AC_MSG_WARN([dmake is limited to 10 jobs, using --with-max-jobs=10 (instead of $with_num_jobs).])
        with_max_jobs="10"
    fi
    MAX_JOBS="$with_max_jobs"
fi
AC_SUBST(MAX_JOBS)

if test "z$with_distro" = "zKDE"; then
   if test "z$enable_kde" = "z" ; then
        enable_kde=true
   fi
fi

OOOP_FONTS_PACK=
OOOP_GALLERY_PACK=
OOOP_SAMPLES_PACK=
OOOP_TEMPLATES_PACK=
if test "z$with_distro" = "zOxygenOfficeLinux" -o \
        "z$with_distro" = "zOxygenOfficeWindows" ; then
    OOOP_FONTS_PACK="OOOP-fonts-pack-2.4.0.4.zip"
    OOOP_GALLERY_PACK="OOOP-gallery-pack-2.4.0.4.zip"
    OOOP_SAMPLES_PACK="OOOP-samples-pack-2.4.0.4.zip"
    OOOP_TEMPLATES_PACK="OOOP-templates-pack-2.5.0.0.zip"
fi
AC_SUBST(OOOP_FONTS_PACK)
AC_SUBST(OOOP_GALLERY_PACK)
AC_SUBST(OOOP_SAMPLES_PACK)
AC_SUBST(OOOP_TEMPLATES_PACK)

AC_MSG_CHECKING([for widget sets])
OOO_WIDGET_FLAGS=
if test "$enable_kde" != "no"; then
   if test "z$with_win32" = "z"; then
      OOO_WIDGET_FLAGS="--enable-kde "
      widget_sets="kde"
   fi
fi
if test "$enable_gtk" != "no"; then
   if test "z$with_win32" = "z"; then
      OOO_WIDGET_FLAGS="--enable-gtk $OOO_WIDGET_FLAGS"
      widget_sets="gtk $widget_sets"

      PKG_CHECK_MODULES( FOO_GTK, [ gtk+-2.0 ],
         have_gtk=true, have_gtk=false )
      if ! $have_gtk; then
         AC_MSG_ERROR([Gtk+ library requirements were not met])
      fi
   fi
else
   OOO_WIDGET_FLAGS="--disable-gtk $OOO_WIDGET_FLAGS"
fi
OOO_CUSTOM_IMAGES=
OOO_EXTRA_ARTWORK=extras-2.tar.bz2
AC_SUBST(OOO_CUSTOM_IMAGES)
AC_SUBST(OOO_EXTRA_ARTWORK)

AC_MSG_RESULT($OOO_WIDGET_FLAGS)
AC_SUBST(OOO_WIDGET_FLAGS)

if test "z$BUILD_WIN32" = "zyes" -a "z$enable_cairo" = "z" ; then
    AC_MSG_WARN([On Cygwin, automatically using --disable-cairo])
    enable_cairo="no"
fi
if test "$enable_cairo" != "no"; then
   if test "$with_system_cairo" = "yes"; then
	SYSTEM_CAIRO=TRUE
   fi
   CAIRO_ENABLED=TRUE
   # Use the latest version
   CAIRO_VER=1.4.10
   CAIRO_CONFIGURE_FLAG="--enable-cairo=yes"
   cairo_enabled=yes
else
   CAIRO_ENABLED=
   CAIRO_VER=
   CAIRO_CONFIGURE_FLAG="--enable-cairo=no"
   cairo_enabled=no
fi
AC_SUBST(CAIRO_ENABLED)
AC_SUBST(SYSTEM_CAIRO)
AC_SUBST(CAIRO_VER)
AC_SUBST(CAIRO_CONFIGURE_FLAG)

PREBUILT_WRITINGAIDS_TIMESTAMP=20080320
AC_SUBST(PREBUILT_WRITINGAIDS_TIMESTAMP)

BUILD_MOZILLA_SOURCE='mozilla-source-1.7.5.tar.gz'
AC_SUBST(BUILD_MOZILLA_SOURCE)

AGFA_MONOTYPE_FONTS_SOURCE='agfa-monotype-fonts.tar.gz'
AC_SUBST(AGFA_MONOTYPE_FONTS_SOURCE)

SPLIT_APP_MODULES="NO"
if test "z$enable_split_app_modules" = "zyes"; then
   SPLIT_APP_MODULES="YES"
fi
AC_SUBST(SPLIT_APP_MODULES)

SPLIT_OPT_FEATURES="NO"
if test "z$enable_split_opt_features" = "zyes"; then
   SPLIT_OPT_FEATURES="YES"
fi
AC_SUBST(SPLIT_OPT_FEATURES)

RUN_POST_INSTALL_SCRIPTS="yes"
if test "z$enable_post_install_scripts" = "zno"; then
   RUN_POST_INSTALL_SCRIPTS="no"
fi
AC_SUBST(RUN_POST_INSTALL_SCRIPTS)

OOO_STRIP="yes"
if test "z$enable_strip" = "zno"; then
   OOO_STRIP="no"
fi
AC_SUBST(OOO_STRIP)

ARCHITECTURE="unxlngi4"
if test "z$with_arch" != "z"; then
    if test "z$with_arch" = "zppc"; then
        ARCHITECTURE="unxlngppc"
    fi
    if test "z$with_arch" = "zsparc"; then
        ARCHITECTURE="unxlngs"
    fi
fi
AC_SUBST(ARCHITECTURE)

AC_MSG_CHECKING([for broken aliases])
if `alias gcc > /dev/null 2>&1`; then
   AC_MSG_ERROR( you can't alias your gcc - that's broken );
fi
AC_MSG_RESULT(ok)

MONO_GAC_ROOT=
if test "z$with_mono_gac_root" != "z" -a "z$with_mono_gac_root" != "zno" ; then
    MONO_GAC_ROOT=$with_mono_gac_root
fi
AC_SUBST(MONO_GAC_ROOT)

AC_MSG_CHECKING([for Open Clip Art Library])
OPENCLIPART_VER=
OPENCLIPART_DIR=
if test "z$with_openclipart" != "z" -a "z$with_openclipart" != "zno" ; then
    if test "z$with_openclipart" = "zyes" ; then
	# the gallery from the source tarball by default
	OPENCLIPART_VER=0.12
    elif (echo "$with_openclipart" | $GREP "^[[0-9\.]]*$") ; then
	# it's a version number
	OPENCLIPART_VER=$with_openclipart
    elif test "z${with_openclipart%%/*}" = "z" ; then
	# it's an absolute path
	if test -d $with_openclipart ; then
	    OPENCLIPART_DIR=$with_openclipart
	else
	    AC_MSG_ERROR([The directory \"$with_openclipart\" does not exist.])
	fi
    else
	AC_MSG_ERROR([--with-openclipart requires either a version number or an absolute path])
    fi
fi
if test "z$OPENCLIPART_VER" != "z" && ! which inkscape >/dev/null 2>&1 ; then
    AC_MSG_ERROR([inkscape is necessary to process Open Clip Art library from sources])
fi    
AC_MSG_RESULT([${OPENCLIPART_VER:-${OPENCLIPART_DIR:-no}}])
AC_SUBST(OPENCLIPART_VER)
AC_SUBST(OPENCLIPART_DIR)

AC_MSG_CHECKING([for DejaVu Fonts])
DEJAVU_FONTS_VER=
DEJAVU_FONTS_PACK_NAME=
if test "z$with_dejavu_fonts" != "z" -a "z$with_dejavu_fonts" != "zno" ; then
    if test "z$with_dejavu_fonts" = "zyes" ; then
	# the fonts from the source zip by default
	DEJAVU_FONTS_VER=2.24
	DEJAVU_FONTS_PACK_NAME=dejavu-fonts-ttf-$DEJAVU_FONTS_VER
    elif (echo "$with_dejavu_fonts" | $GREP "^[[0-9\.]]*$") ; then
	# it's a version number
	DEJAVU_FONTS_VER=$with_dejavu_fonts
	DEJAVU_FONTS_PACK_NAME=dejavu-fonts-ttf-$with_dejavu_fonts
    else
	AC_MSG_ERROR([--with-dejavu-fonts requires either yes, no, or a version number])
    fi
    # also apply some extra patches
    if test -z "$OOO_ADDITIONAL_SECTIONS" ; then
	OOO_ADDITIONAL_SECTIONS="DejaVuFonts"
    else
	OOO_ADDITIONAL_SECTIONS="$OOO_ADDITIONAL_SECTIONS,DejaVuFonts"
    fi
fi
AC_MSG_RESULT([${DEJAVU_FONTS_VER:-no}])
AC_SUBST(DEJAVU_FONTS_VER)
AC_SUBST(DEJAVU_FONTS_PACK_NAME)


AC_MSG_CHECKING([for Liberation Fonts])
LIBERATION_FONTS_VER=
if test "z$with_liberation_fonts" != "z" -a "z$with_liberation_fonts" != "zno" ; then
    if test "z$with_liberation_fonts" = "zyes" ; then
	# the fonts from the source zip by default
	LIBERATION_FONTS_VER=1.1
    elif (echo "$with_liberation_fonts" | $GREP "^[[0-9\.]]*$") ; then
	# it's a version number
	LIBERATION_FONTS_VER=$with_liberation_fonts
    else
	AC_MSG_ERROR([--with-liberation-fonts requires either yes, no, or a version number])
    fi
fi
AC_MSG_RESULT([${LIBERATION_FONTS_VER:-no}])
AC_SUBST(LIBERATION_FONTS_VER)


AC_MSG_CHECKING([for GNU cp])
GNUCP=cp
if test "z$with_gnu_cp" != "z"; then
    if test "z${with_gnu_cp%%/*}" = "z" ; then
	# it's an absolute path
	if test -f $with_gnu_cp ; then
	    GNUCP=$with_gnu_cp
	else
	    AC_MSG_ERROR([The file \"$with_gnu_cp\" does not exist.])
	fi
    else
	AC_MSG_ERROR([--with-gnu-cp requires an absolute path])
    fi
fi
AC_MSG_RESULT([$GNUCP])
AC_SUBST(GNUCP)

AC_MSG_CHECKING([for GNU patch])
GNUPATCH=patch
if test "z$with_gnu_patch" != "z"; then
    if test "z${with_gnu_patch%%/*}" = "z" ; then
	# it's an absolute path
	if test -f $with_gnu_patch ; then
	    GNUPATCH=$with_gnu_patch
	else
	    AC_MSG_ERROR([The file \"$with_gnu_patch\" does not exist.])
	fi
    else
	AC_MSG_ERROR([--with-gnu-patch requires an absolute path])
    fi
fi
AC_MSG_RESULT([$GNUPATCH])
AC_SUBST(GNUPATCH)

AC_MSG_CHECKING([for GNU tar])
GNUTAR=tar
if test "z$with_gnu_tar" != "z"; then
    if test "z${with_gnu_tar%%/*}" = "z" ; then
        # it's an absolute path
        if test -f $with_gnu_tar ; then
	        GNUTAR=$with_gnu_tar
        else
	        AC_MSG_ERROR([The file \"$with_gnu_tar\" does not exist.])
        fi
    else
        AC_MSG_ERROR([--with-gnu-tar requires an absolute path])
    fi
elif test -f /usr/sfw/bin/gtar; then
	GNUTAR="/usr/sfw/bin/gtar"
fi
AC_MSG_RESULT([$GNUTAR])
AC_SUBST(GNUTAR)

AC_MSG_CHECKING([for wget])
WGET=wget
if test -f "`which wget`"; then
    WGET="`which wget`"
    AC_MSG_RESULT([$WGET])
elif test -f /usr/sfw/bin/wget; then
    WGET="/usr/sfw/bin/wget"
    AC_MSG_RESULT([$WGET])
else
    AC_MSG_RESULT([$WGET])
    AC_MSG_WARN([*** Configure could not reliably find wget on your system ! ***])
    AC_MSG_WARN([*** Downloading of source packages might fail ! ***])
fi
AC_SUBST(WGET)

AC_MSG_CHECKING([for favourite drink])
DRINK=tea
if test "z$with_drink" != "z"; then
    DRINK=$with_drink
fi
AC_MSG_RESULT([$DRINK])
AC_SUBST(DRINK)

AC_MSG_CHECKING([for ooo-version])
OOO_MAJOR=3.0
OOO_VERSION=3.0
AC_MSG_RESULT([$OOO_VERSION])
AC_SUBST(OOO_VERSION)

AC_MSG_CHECKING([for binsuffix])

if test "z$with_binsuffix" = "zno"; then
    OOO_BINSUFFIX=
elif test "z$with_binsuffix" != "z"; then
    OOO_BINSUFFIX=$with_binsuffix
else
    OOO_BINSUFFIX=$OOO_MAJOR
fi
AC_MSG_RESULT([$OOO_BINSUFFIX])
AC_SUBST(OOO_BINSUFFIX)

datestamp=`date '+%Y%m%d.%H%M'`;
SNAPSHOT_TAG="$datestamp.$TAG";
AC_SUBST(SNAPSHOT_TAG)

if test "z$with_installed_ooo_dirname" != "z"; then
   OOOINSTALLDIRNAME=$with_installed_ooo_dirname
else
   OOOINSTALLDIRNAME=ooo-$OOO_MAJOR
fi
AC_SUBST(OOOINSTALLDIRNAME)

if test "z$with_docdir" != "z"; then
    docdir="$with_docdir"
else
    docdir="$datadir/doc/packages/OpenOffice.org"
fi
AC_SUBST(docdir)

# WARNING: The --with-lang= configure option changed, see
#  http://blog.janik.cz/archives/permalinks/2004-11-02T20_04_29.html
#  e.g.
#  --with-lang="ALL"      # see solenv/inc/postset.mk
#  --with-lang="en-US cs"
#  --with-lang="ALL xy"
AC_MSG_CHECKING([for requested localizations])
if test "z$with_lang" = "z" -o "z$with_lang" = "zyes" ; then
    with_lang="en-US"
elif test "z$with_lang" = "zno" ; then
    AC_MSG_WARN([One localization must be built, at least! Defaulting to English.])
    with_lang="en-US"
fi
OOO_LANGS="$with_lang"
AC_MSG_RESULT([$OOO_LANGS])
AC_SUBST(OOO_LANGS)

AC_MSG_CHECKING([for insufficient help localizations])
if test "$with_poor_help_localizations" = "yes" -o \
        "$with_poor_help_localizations" = "no" ; then
    # no default list defined for now, so it is empty for both "yes" and "no"
    OOO_POOR_HELP_LOCALIZATIONS=
else
    OOO_POOR_HELP_LOCALIZATIONS="$with_poor_help_localizations"
fi
AC_MSG_RESULT([$OOO_POOR_HELP_LOCALIZATIONS])
AC_SUBST(OOO_POOR_HELP_LOCALIZATIONS)


AC_MSG_CHECKING([whether to enable Mono bindings])
if test -n "$enable_mono" ; then
    if test "$enable_mono" != "no" ; then
	ENABLE_MONO=TRUE
	mono_enabled=yes
    else
	ENABLE_MONO=FALSE
	mono_enabled=no
    fi
else
    # mono is not explicitly requested. Though, ooo-build will install
    # the extra sources to support the build with mono
    mono_enabled=supported
    ENABLE_MONO=SUPPORTED
fi
AC_MSG_RESULT([$mono_enabled])
AC_SUBST(ENABLE_MONO)

AC_MSG_CHECKING([whether to enable the mediawiki extension])
if test "$enable_mediawiki" != "no" ; then
    ENABLE_MEDIAWIKI=YES
    AC_MSG_RESULT([yes])
else
    ENABLE_MEDIAWIKI=NO
    AC_MSG_RESULT([no])
fi
AC_SUBST(ENABLE_MEDIAWIKI)

AC_MSG_CHECKING([whether to enable the Calc Solver extension])
if test "$enable_scsolver" != "no" ; then
    ENABLE_SCSOLVER=YES
    AC_MSG_RESULT([yes])
else
    ENABLE_SCSOLVER=NO
    AC_MSG_RESULT([no])
fi
AC_SUBST(ENABLE_SCSOLVER)

# FIXME: ugly hack to apply a Linux and Win32 specific variants of a patch for swext sources
if test "$ENABLE_MEDIAWIKI" = "YES" ; then
    if test "$BUILD_WIN32" = "yes" ; then
	ext_section=Win32OnlySwextFixes
    else
	ext_section=Linux32OnlySwextFixes
    fi
    if test -z "$OOO_ADDITIONAL_SECTIONS" ; then
	OOO_ADDITIONAL_SECTIONS="$ext_section"
    else
	OOO_ADDITIONAL_SECTIONS="$OOO_ADDITIONAL_SECTIONS,$ext_section"
    fi
fi

# FIXME: ugly hack to apply a Novell specific patch for swext sources
if test "$VENDORNAME" = "Novell" -a "$ENABLE_MEDIAWIKI" = "YES" ; then
    if test -z "$OOO_ADDITIONAL_SECTIONS" ; then
	OOO_ADDITIONAL_SECTIONS="NovellOnlySwextFixes"
    else
	OOO_ADDITIONAL_SECTIONS="$OOO_ADDITIONAL_SECTIONS,NovellOnlySwextFixes"
    fi
fi

AC_MSG_CHECKING([whether to build the binfilter])
if test "$enable_binfilter" = "yes"; then
    ENABLE_BINFILTER=TRUE
    AC_MSG_RESULT([yes])
else
    ENABLE_BINFILTER=FALSE
    AC_MSG_RESULT([no])
fi
AC_SUBST(ENABLE_BINFILTER)

AC_MSG_CHECKING([whether to build the odk stuff])
if test "$enable_odk" != "no"; then
    ENABLE_ODK=TRUE
    AC_MSG_RESULT([yes])
else
    ENABLE_ODK=FALSE
    AC_MSG_RESULT([no])
fi
AC_SUBST(ENABLE_ODK)

AC_MSG_CHECKING([whether to use prebuilt unowinreg.dll])
if test "$ENABLE_ODK" = "TRUE" -a \
        "$with_win32" != "yes" -a \
        "$with_java" != "no" -a \
        [ -z "$with_mingwin" -o "$with_mingwin" = "no" ] ; then
    USE_PREBUILD_UNOWINREG_DLL=YES
    AC_MSG_RESULT([yes])
else
    USE_PREBUILD_UNOWINREG_DLL=NO
    AC_MSG_RESULT([no])
fi
AC_SUBST(USE_PREBUILD_UNOWINREG_DLL)

AC_MSG_CHECKING([whether to enable graphite support])
# if test -n "$enable_graphite" -o "$enable_graphite" != "no"; then
if test -n "$enable_graphite" -a "$enable_graphite" != "no"; then
   ENABLE_GRAPHITE=TRUE
   graphite_enabled=yes
   GRAPHITE_SRC=silgraphite-1.0.0rc2.tar.gz
else
   ENABLE_GRAPHITE=FALSE
   graphite_enabled=no
fi
AC_MSG_RESULT([$graphite_enabled])
AC_SUBST(ENABLE_GRAPHITE)
AC_SUBST(GRAPHITE_SRC)

AC_MSG_CHECKING([whether to enable Access import])
if test "$enable_access" = "no"; then
    access_enabled=no
    ENABLE_ACCESS=
else
    if test "$with_system_mdbtools" = "yes"; then
        SYSTEM_MDBTOOLS=YES
    else
        MDBTOOLS_SRC=mdbtools-0.6pre1.tar.gz
    fi
    access_enabled=yes
    ENABLE_ACCESS=TRUE
fi
AC_MSG_RESULT([$access_enabled])
AC_SUBST(ENABLE_ACCESS)
AC_SUBST(MDBTOOLS_SRC)
AC_SUBST(SYSTEM_MDBTOOLS)

if test -n "$with_system_libwpd" && test "$with_system_libwpd" = "yes"; then
    SYSTEM_LIBWPD=YES
else
    SYSTEM_LIBWPD=NO
fi
AC_SUBST(SYSTEM_LIBWPD)

if test -n "$with_system_libwps" && test "$with_system_libwps" = "yes"; then
    SYSTEM_LIBWPS=YES
else
    SYSTEM_LIBWPS=NO
fi
AC_SUBST(SYSTEM_LIBWPS)

if test "$with_system_libwpg" = "yes"; then
    SYSTEM_LIBWPG=YES
else
    SYSTEM_LIBWPG=NO
fi
AC_SUBST(SYSTEM_LIBWPG)

AC_MSG_CHECKING([whether to enable debugging code])
if test "$enable_dbgutil" = "yes" ; then
    build_product=debug
else
    build_product=product
fi
AC_MSG_RESULT([$build_product])

AC_MSG_CHECKING([whether to use GIT])
if test -z "$with_git" -o "$with_git" = "no"; then
    unset OOO_GIT
    AC_MSG_RESULT([no])
else
    OOO_GIT=git
    if test "z$with_git" != "zyes"; then
        OOO_GIT=$with_git
    fi
    AC_MSG_RESULT([$OOO_GIT])
fi
AC_SUBST(OOO_GIT)

UPSTREAM_NAME=
UPSTREAM_SOURCE=
UPSTREAM_URI=
if test "$with_tag" = "OOG680_m5" ; then # more milestones to come...
   UPSTREAM_VERSION=2.3.0
elif test "$with_tag" = "OOG680_m9" ; then
   UPSTREAM_VERSION=2.3.1
elif test "$with_tag" = "OOH680_m12" ; then
   UPSTREAM_VERSION=2.4.0
elif test "$with_tag" = "BEB300_m2" ; then
   UPSTREAM_VERSION=3.0.0beta2rc1
elif test "$with_tag" = "BEB300_m3" ; then
   UPSTREAM_VERSION=3.0.0beta2
fi
if test -n "$UPSTREAM_VERSION"; then
   UPSTREAM_NAME="OOo_${UPSTREAM_VERSION}_src"

   if test "z$with_mirror" != "z" ; then
      UPSTREAM_SOURCE="MIRROR"
      UPSTREAM_URI=
   else
      UPSTREAM_SOURCE="YES"
      UPSTREAM_URI="http://openoffice.bouncer.osuosl.org/?product=OpenOffice.org&os=src_bzip&version=${UPSTREAM_VERSION}"
   fi
fi
AC_SUBST(UPSTREAM_NAME)
AC_SUBST(UPSTREAM_SOURCE)
AC_SUBST(UPSTREAM_URI)

MIRROR="http://download.go-oo.org/"
if test "z$with_mirror" != "z" ; then
   MIRROR="$with_mirror"
fi
AC_SUBST(MIRROR)

# IMPORTANT: keep this on the end of configure because other configure options might 
# add some own OOO_ADDITIONAL_SECTIONS
AC_MSG_CHECKING([for additional sections])
if test -n "$with_additional_sections" -a \
	"$with_additional_sections" != "no" -a \
	"$with_additional_sections" != "yes" ; then
    # change the delimiter from the space to the comma
    for section in $with_additional_sections ; do
	if test -z "$OOO_ADDITIONAL_SECTIONS" ; then
	    OOO_ADDITIONAL_SECTIONS="$section"
	else
	    OOO_ADDITIONAL_SECTIONS="$OOO_ADDITIONAL_SECTIONS,$section"
	fi
    done
fi
AC_MSG_RESULT([$OOO_ADDITIONAL_SECTIONS])
AC_SUBST(OOO_ADDITIONAL_SECTIONS)


AC_CONFIG_FILES([download], [chmod +x download])
AC_CONFIG_FILES([scratch/place], [chmod +x scratch/place])
AC_CONFIG_FILES([intltool-extract intltool-merge intltool-update], [chmod +x intltool*])
AC_OUTPUT([ 
Makefile
bin/setup
bin/Makefile
bin/piece/Makefile
desktop/Makefile
desktop/16x16/Makefile
desktop/22x22/Makefile
desktop/24x24/Makefile
desktop/32x32/Makefile
desktop/48x48/Makefile
desktop/scalable/Makefile
desktop/mimetypes/Makefile
desktop/mimetypes/16x16/Makefile
desktop/mimetypes/22x22/Makefile
desktop/mimetypes/24x24/Makefile
desktop/mimetypes/32x32/Makefile
desktop/mimetypes/48x48/Makefile
distro-configs/Makefile
distro-configs/Ark.conf
distro-configs/Common.conf
distro-configs/CommonLinux.conf
distro-configs/CommonWin32.conf
distro-configs/GoOoWin32.conf
distro-configs/DroplineGNOME.conf
distro-configs/DroplineGNOME64.conf
distro-configs/Debian.conf
distro-configs/DebianEtch.conf
distro-configs/DebianSarge.conf
distro-configs/OxygenOfficeLinux.conf
distro-configs/OxygenOfficeWindows.conf
distro-configs/Ubuntu.conf
distro-configs/UbuntuL10n.conf
distro-configs/Ubuntu64.conf
distro-configs/UbuntuDapper.conf
distro-configs/UbuntuDapper64.conf
distro-configs/UbuntuFeisty.conf
distro-configs/UbuntuFeisty64.conf
distro-configs/UbuntuGutsy.conf
distro-configs/UbuntuGutsy64.conf
distro-configs/UbuntuHardy.conf
distro-configs/UbuntuHardy64.conf
distro-configs/UbuntuIntrepid.conf
distro-configs/UbuntuIntrepid64.conf
distro-configs/SUSE.conf
distro-configs/SUSE-reduced.conf
distro-configs/SUSE-9.1.conf
distro-configs/SUSE-9.2.conf
distro-configs/SUSE-9.3.conf
distro-configs/SUSE-10.0.conf
distro-configs/SUSE-10.1.conf
distro-configs/SUSE-10.2.conf
distro-configs/SUSE-10.3.conf
distro-configs/SUSE-11.0.conf
distro-configs/Mandriva.conf
distro-configs/Mandriva64.conf
distro-configs/NovellWin32.conf
distro-configs/NovellWin32ISO.conf
distro-configs/Gentoo.conf
distro-configs/Frugalware.conf
distro-configs/openmamba.conf
distro-configs/translate-org-za-linux.conf
distro-configs/translate-org-za-win32.conf
distro-configs/rpl2.conf
distro-configs/rpl2-64.conf
distro-configs/Pardus2007.conf
distro-configs/Pardus2008.conf
distro-configs/PlainLinux.conf
distro-configs/Win32.conf
distro-configs/Solaris.conf
distro-configs/GoOoLinux.conf
etc/Makefile
patches/apply.pl
patches/Makefile
patches/cairo/Makefile
patches/dev300/Makefile
patches/evo2/Makefile
patches/emf+/Makefile
patches/gstreamer/Makefile
patches/hotfixes/Makefile
patches/vba/Makefile
patches/mono/Makefile
patches/ooxml/Makefile
patches/postgresql/Makefile
patches/scsolver/Makefile
patches/unittesting/Makefile
patches/64bit/Makefile
po/Makefile
doc/Makefile
src/Makefile
src/icons/Makefile
src/icons/tango/Makefile
src/layout/Makefile
src/sdf/Makefile
stamp/Makefile
templates/Makefile
man/Makefile
www/Makefile
www/images/Makefile
www/tinder-scripts/Makefile
scratch/Makefile
scratch/lpsolve/Makefile
scratch/lpsolve/prj/Makefile
])

if test "$ENABLE_CCACHE" = "yes"; then
    ccache_message="yes"
else
    ccache_message="no"
fi
if test "$ENABLE_ICECREAM" = "yes"; then
    icecream_message="yes, in '$ICECREAM_BINDIR'."
else
    icecream_message="no"
fi
if test "$MAX_JOBS" -gt 1; then
    max_job_message="'$MAX_JOBS'"
else
    max_job_message="'1'"
fi

echo "
Building openoffice
	tag:                $CVSTAG
	apply rules:        $APPLY_DIR/apply
	build dir:          $OOBUILDDIR
	tools dir:          $TOOLSDIR
	src package dir:    $SRCDIR
	distro:             $DISTRO
	add sections:       ${OOO_ADDITIONAL_SECTIONS:-no}
	widget sets:        ${widget_sets:-disabled}
	openclipart:        ${OPENCLIPART_VER:-${OPENCLIPART_DIR:-no}}
	mono bindings:	    $mono_enabled
	mdbtools/access:    $access_enabled
	java:               ${with_java:-yes}
	ooo-install-dir:    $OOOINSTALLDIRNAME
	ccache:             $ccache_message
	icecream:           $icecream_message
        max jobs:           $max_job_message
	cairo:		    $cairo_enabled
	build type:	    $build_product build
	download mirror:    $MIRROR

To build run:
$warn_use_download	make
	bin/ooinstall <path-to-install>

	This is trunk - the unstable branch for post-2.4 development.
	If you want to build the stable OOo, use:
		ooo-build-2-2    branch for 2.2
		ooo-build-2-3    branch for 2.3
		ooo-build-2-4    branch for 2.4
"

if test "$ENABLE_ICECREAM" != "yes"; then
    echo "You are not using icecream
	Consider reading http://www.gnome.org/~michael/blog/icecream.html
	and configuring with --with-gcc-speedup=icecream
"
fi
