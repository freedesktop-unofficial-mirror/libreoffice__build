AC_INIT(bin/build-ooo)
AC_PREREQ(2.51)
AC_PREFIX_DEFAULT(/usr)

DEFAULT_TAG=src680-m123

OOO_BUILDMAJOR_VERSION=1
OOO_BUILDMINOR_VERSION=9
OOO_BUILDMICRO_VERSION=123
dnl this includes pre-pended period.
OOO_BUILDSTRIKE_VERSION=
OOO_BUILDVERSION="$OOO_BUILDMAJOR_VERSION.$OOO_BUILDMINOR_VERSION.$OOO_BUILDMICRO_VERSION$OOO_BUILDSTRIKE_VERSION"

AM_INIT_AUTOMAKE(ooo-build, $OOO_BUILDVERSION)
AC_SUBST(OOO_BUILDVERSION)

dnl for strike versioning
OOO_BUILD_EXTENSION="(build $OOO_BUILDMICRO_VERSION$OOO_BUILDSTRIKE_VERSION)"
AC_SUBST(OOO_BUILD_EXTENSION)

PROPAGATED_ARGS=$ac_configure_args
AC_SUBST(PROPAGATED_ARGS)

AC_ARG_WITH(tag,
[
  --with-tag              define the tag to use, defaults to the latest
			  release
			  
			  Example:  --with-tag=src680-m110],
,)

AC_ARG_WITH(srcdir,
[
  --with-srcdir           define the directory containing the rest of the
			  source code we need to build.],
,)

AC_ARG_WITH(win32,
[
  --with-win32            define the build to be on win32; this sets a number
			  of defaults suitable for that platform.],
,)

AC_ARG_WITH(internal-gcc,
[
  --with-internal-gcc     build our own gcc (gcc-3.4.1 with enum and
			  visibility patches).],
,)

AC_ARG_WITH(distro,
[
  --with-distro           build with a specific distributions patch-set

			  Values are:  NLD (the default), Debian, Ark, ...],
,)

AC_ARG_WITH(lang,
[
  --with-lang             define the localizations to build. The English one
			  is built by default.

			  Examples:  --with-lang="en-US de fr it"
				     --with-lang=ALL],
,)

AC_ARG_ENABLE(mono,
[  --enable-mono          Enables the compilation of the Mono bindings
],,)

AC_ARG_ENABLE(access,
[  --disable-access       Disable the Access import pieces.
],,)

AC_ARG_ENABLE(cairo,
[
  --enable-cairo          Enables cairo canvas backend.],
,)

AC_ARG_ENABLE(hunspell,
[
  --enable-hunspell          Enables Hunspell UNO component.],
,)

AC_ARG_WITH(system-hunspell,
[
  --with-system-hunspell     Use system libhunspell to build the Hunspell
                             UNO component],
,)

AC_ARG_WITH(ooo-builddir,
[
  --with-ooo-builddir     define the directory where openoffice.org will be
			  compiled, e.g. the root of an ooo cvs checkout.],
,)

AC_ARG_WITH(installed-ooo-dirname,
[
  --with-installed-ooo-dirname
			  specify the directory name of the core OOo network
			  install dir, for example "openoffice" or "ooo-1.1",
			  yielding a core install directory of
			  /usr/lib/openoffice or /usr/lib/ooo-1.1.

			  Example:  --with-installed-ooo-dirname=ooo-1.1],
,)

AC_ARG_WITH(binsuffix,
[
  --with-binsuffix
			  specify the suffix to be used on the end of script
			  names, to allow parallel installation of two versions.
			  
			  Default:  --with-binsuffix=1.9],
,)

AC_ARG_WITH(docdir,
[
  --with-docdir           define the directory name where the extra
			  documentation will be installed.

			  Example:  --with-docdir=/usr/share/doc/packages/OpenOffice.org],
,)

AC_ARG_WITH(vendor,
[
  --with-vendor           specify an overall Vendor name to simplify
			  configuration and packaging when a vendor does the
			  same thing for multiple Distributions],
,)

AC_ARG_WITH(num-cpus,
[
  --with-num-cpus         Number of build processes/cpus to use (number of
			  projects that will build at the same time).
			  Multi-process/multi-cpu builds can save a lot of time
			  on multi-cpu machines.],
,)

AC_ARG_WITH(gcc-speedup,
[
  --with-gcc-speedup      Tool to use to speedup the compilation. Currently
			  ccache (caching results of previous compilation) and
			  icecream (distributed compiling tool) are supported.
			  Both can be used at the same time.

			  Example: --with-gcc-speedup=ccache,icecream],
,)

AC_ARG_WITH(icecream-max-jobs,
[
  --with-icecream-max-jobs
			  Maximum number of jobs that make will issue at
			  the same time. Defaults to 10.],
,)

AC_ARG_WITH(icecream-bindir,
[
  --with-icecream-bindir  Location of icecream's gcc and g++.
			  Defaults to /opt/icecream/bin.],
,)

AC_ARG_ENABLE(gtk,
[
  --disable-gtk           Disables gtk+ native widgets and Gnome icons.],
,)

AC_ARG_ENABLE(kde,
[
  --disable-kde           Disables KDE native widgets and KDE icons.],
,)

AC_ARG_ENABLE(gcc33,
[
  --enable-gcc33          Force use of gcc33/g++33 (ie, compat-gcc) on systems
			  that use gcc 3.4 as the default compiler.],
,)

AC_ARG_ENABLE(post-install-scripts,
[
  --disable-post-install-scripts
			  Disables post install scripts within make install.
			  It is usefull when creating a package from the
			  installed files. The scripts are then run by
			  the package after it is installed.],
,)

AC_ARG_WITH(arch,
[
  --with-arch             Define the architecture that we will target.

                          Usage: --with-arch=(x86|ppc|sparc)],
,)

AC_ARG_WITH(openclipart,
[
  --with-openclipart  Build and install OOo galleries from the Open Clip Art
                      Library. The parameter is either a version of the library
		      or an absolute path to the prebuilt and preinstalled .png
		      files.
		      
		      Example:	--with-openclipart=0.13
		    		--with-openclipart=/usr/share/openclipart],
,)

dnl
dnl Items here only to make --help work nicely:
dnl 
AC_ARG_ENABLE(java,
[
  --enable-java           build ooo with a Jdk & Java support],
,)


AM_MAINTAINER_MODE

dnl
dnl Setup the misc. tweaks we need.
dnl
BASEDIR=`pwd`
TOOLSDIR=$BASEDIR

AC_PATH_PROG(PERL, perl)
if test -z "PERL"; then
   AC_MSG_ERROR([perl not found; required for ooo-build])
fi
AC_SUBST(PERL)
INTLTOOL_PERL=$PERL
AC_SUBST(INTLTOOL_PERL)

AC_PATH_PROG(PKG_CONFIG, pkg-config)
if test ! -x "$PKG_CONFIG" ; then
   AC_MSG_ERROR([
*** You need the latest pkg-config.
*** Get the latest version of pkg-config from
*** <http://www.freedesktop.org/software/pkgconfig/>.])
fi
AC_SUBST(PKG_CONFIG)

PKG_CHECK_MODULES( FOO_COMMON, 
		   [ libxml-2.0 fontconfig >= 1.0.1 ],
		   have_common=true, have_common=false )
PKG_CHECK_MODULES( FOO_OPTIONAL,
		   [ gtk+-2.0 libstartup-notification-1.0 ],
		   have_optional=true, have_optional=false )

# NB. according to:
#   http://sources.redhat.com/ml/bug-automake/2002/msg02066.html
# it's a really bad idea to do conditional tests for things.
#
if test "z$with_win32" = "z"; then
    if test ! $have_common; then
	AC_MSG_ERROR([Library requirements were not met])
    fi
    BUILD_WIN32=
else
    if test "z$with_distro" = "z"; then
	with_distro="Win32"
    fi

    BUILD_WIN32=yes
fi

AC_SUBST(BUILD_WIN32)

if test "z$with_tag" = "z"; then
   with_tag=$DEFAULT_TAG
fi

# search more dirs for the apply file
# the default dir is defined by the selected tag
# the alternatives are derived by removing a part (suffix) of the tag
APPLY_DIR="$TOOLSDIR/patches/$with_tag"
while test "$APPLY_DIR" != "$TOOLSDIR/patches/" ; do
   test -f $APPLY_DIR/apply && break
   APPLY_DIR=${APPLY_DIR%?}
done
test "$APPLY_DIR" = "$TOOLSDIR/patches/" && APPLY_DIR="$TOOLSDIR/patches"
if test -f $APPLY_DIR/apply; then
   AC_MSG_RESULT([found $with_tag,
    using $APPLY_DIR/apply])
else
   AC_MSG_ERROR([Can't locate patch set for: $with_tag])
fi
CVSTAG=$with_tag
AC_SUBST(CVSTAG)
AC_SUBST(APPLY_DIR)

warn_use_download=
AC_MSG_CHECKING( for tag's source )
if test "z$with_src" = "z"; then
   ext_srcdir="$srcdir/src"
   warn_use_download="	./download
"
   AC_MSG_RESULT( not found )
elif (echo "${with_src}" | grep -v -q "^/"); then
   AC_MSG_ERROR( --with-src= must be an absolute path );
else
   ext_srcdir=$with_src
   if test -d "$with_src/$CVSTAG"; then
      AC_MSG_RESULT( found '$with_src/$CVSTAG' )
   else
      AC_MSG_WARN([
     Missing pristine unpacked source in $with_src/$CVSTAG
     ]);
   fi
fi

WITH_SRC=$with_src
AC_SUBST(WITH_SRC)

if test "z$WITH_SRC" != "z"; then
    BASEDIR=$WITH_SRC
    SRCDIR='"<No manual unpacking required>"'
    BUILDDIR=$BASEDIR
else
    BUILDDIR=$BASEDIR/build
    SRCDIR=$BASEDIR/src
fi

if test "z$with_ooo_builddir" = "z"; then
   OOBUILDDIR=$BUILDDIR/$CVSTAG
else
   OOBUILDDIR=$with_ooo_builddir
fi

rm -f $BASEDIR/stamp/patch.apply

AC_SUBST(SRCDIR)
AC_SUBST(BUILDDIR)
AC_SUBST(TOOLSDIR)
AC_SUBST(OOBUILDDIR)

if test "z$with_win32" != "z"; then
    AC_PATH_PROG(CABEXTRACT, cabextract)
    if test "!" -x "$CABEXTRACT" ; then
      AC_MSG_ERROR([
*** The cabextract utility must be installed.])
    fi
fi

if test "z$with_distro" = "z"; then
   with_distro="NLD";
fi
DISTRO=$with_distro
AC_SUBST(DISTRO)

VENDORNAME=OpenOffice
if test "z$with_vendor" != "z"; then
   VENDORNAME="$with_vendor"
fi
AC_SUBST(VENDORNAME)

dnl
dnl Debian specific hard-coded defaults.
dnl

dnl
dnl Ark Linux specific hard-coded defaults.
dnl
if test "z$with_distro" = "zArk"; then
    if test "z$with_vendor" = "z"; then
        with_vendor="Ark Linux"
    fi
fi

if test "z$enable_java" == "zno"; then
   AC_PATH_PROG(XSLTPROC, xsltproc, no)
   if test "$XSLTPROC" = "no"; then
      AC_MSG_ERROR([xsltproc is required to build without java])
   fi
fi

AC_CHECK_HEADER(security/pam_appl.h, have_pam=true, have_pam=false)
AC_CHECK_HEADER(png.h, have_png=true, have_png=false)
AC_CHECK_HEADER(zlib.h, have_zlib=true, have_zlib=false)

if test "z$with_win32" = "z"; then
    if ! $have_pam; then
	AC_MSG_ERROR(install pam-devel)
    fi
    if ! $have_png; then
	AC_MSG_ERROR(install png-devel)
    fi

    if ! $have_zlib; then
	AC_MSG_ERROR(install zlib-devel)
    fi

fi

AC_CHECK_PROG(ACONF, autoconf, yes)
if ! test "z$ACONF" = "zyes"; then
    AC_MSG_ERROR( autoconf must be installed )
fi

AC_CHECK_PROG(FLEX, flex, yes)
if ! test "z$FLEX" = "zyes"; then
   AC_MSG_ERROR( flex must be installed )
fi

AC_CHECK_PROG(BISON, bison, yes)
if ! test "z$BISON" = "zyes"; then
   AC_MSG_ERROR( bison must be installed )
fi

if test "z$with_internal_gcc" = "zyes" ; then
   SYSTEM_GCC=
   gcc_to_use="internal (will be built)"
else
   SYSTEM_GCC=true
   gcc_to_use="from system"
fi
AC_SUBST(SYSTEM_GCC)

BUILD_NCPUS=1
if test "z$with_num_cpus" != "z"; then
   BUILD_NCPUS=$with_num_cpus
fi
AC_SUBST(BUILD_NCPUS)

AC_CHECK_PROG(CCACHE, ccache, yes)

ENABLE_CCACHE=""
ENABLE_ICECREAM=""
for enable_speedup in `echo "$with_gcc_speedup" | sed 's/,/ /g'`
do
    if test "$enable_speedup" = "ccache"; then
        if test "$CCACHE" != "yes"; then
            AC_MSG_ERROR([ccache not found, but set in --with-gcc-speedup])
        else
            ENABLE_CCACHE="yes"
        fi
    elif test "$enable_speedup" = "icecream"; then
        ENABLE_ICECREAM="yes"
    fi
done
AC_SUBST(ENABLE_CCACHE)
AC_SUBST(ENABLE_ICECREAM)

ICECREAM_JOBS="10"
if test "z$with_icecream_max_jobs" != "z"; then
    if test "$with_icecream_max_jobs" -gt "10"; then
        AC_MSG_WARN([dmake is limited to 10 jobs, using --with-icecream-max-jobs=10 (instead of $with_num_jobs).])
        with_icecream_max_jobs="10"
    fi
    ICECREAM_JOBS="$with_icecream_max_jobs"
fi
AC_SUBST(ICECREAM_JOBS)

ICECREAM_BINDIR="/opt/icecream/bin"
if test "z$with_icecream_bindir" != "z"; then
    ICECREAM_BINDIR="$with_icecream_bindir"
fi
if test "z$ENABLE_ICECREAM" = "zyes"; then
    if test ! -x "$ICECREAM_BINDIR/gcc" -o ! -x "$ICECREAM_BINDIR/g++" ; then
        AC_MSG_ERROR([icecream's gcc and g++ not found, please set --with-icecream-bindir])
    fi
fi
AC_SUBST(ICECREAM_BINDIR)

if test "z$with_distro" = "zKDE"; then
   if test "z$enable_kde" = "z" ; then
        enable_kde=true
   fi
fi

AC_MSG_CHECKING([for widget sets])
OOO_WIDGET_FLAGS=
WITH_ICONS="hicontrast"
if test "$enable_kde" != "no"; then
   OOO_WIDGET_FLAGS="--enable-kde "
   widget_sets="kde"
   WITH_ICONS="crystal $WITH_ICONS"
fi
if test "$enable_gtk" != "no"; then
   OOO_WIDGET_FLAGS="--enable-gtk $OOO_WIDGET_FLAGS"
   widget_sets="gtk $widget_sets"
   WITH_ICONS="industrial $WITH_ICONS"

   if test "z$with_win32" = "z"; then
      PKG_CHECK_MODULES( FOO_GTK, [ gtk+-2.0 ],
         have_gtk=true, have_gtk=false )
      if ! $have_gtk; then
         AC_MSG_ERROR([Gtk+ library requirements were not met])
      fi
   fi
else
   OOO_WIDGET_FLAGS="--disable-gtk $OOO_WIDGET_FLAGS"
fi
OOO_CUSTOM_IMAGES=
OOO_EXTRA_ARTWORK=extras-2.tar.bz2
OOO_CRYSTAL_IMAGES=ooo_crystal_images-6.tar.bz2
AC_SUBST(OOO_CUSTOM_IMAGES)
AC_SUBST(OOO_EXTRA_ARTWORK)
AC_SUBST(OOO_CRYSTAL_IMAGES)

AC_MSG_RESULT($OOO_WIDGET_FLAGS)
AC_SUBST(OOO_WIDGET_FLAGS)
AC_SUBST(WITH_ICONS)

if test "$enable_cairo" != "no"; then
   if test "$with_system_cairo" = "yes"; then
	SYSTEM_CAIRO=TRUE
   fi
   CAIRO_ENABLED=TRUE
   LIBPIXMAN_VER=0.1.5
   GLITZ_VER=0.4.3
   CAIRO_VER=0.6.0
   CAIRO_CONFIGURE_FLAG="--enable-cairo=yes"
   cairo_enabled=yes
else
   CAIRO_ENABLED=
   LIBPIXMAN_VER=
   GLITZ_VER=
   CAIRO_VER=
   CAIRO_CONFIGURE_FLAG="--enable-cairo=no"
   cairo_enabled=no
fi
AC_SUBST(CAIRO_ENABLED)
AC_SUBST(SYSTEM_CAIRO)
AC_SUBST(LIBPIXMAN_VER)
AC_SUBST(GLITZ_VER)
AC_SUBST(CAIRO_VER)
AC_SUBST(CAIRO_CONFIGURE_FLAG)

AC_MSG_CHECKING([whether Hunspell UNO is enabled])
if test "$enable_hunspell" == "yes" ; then
   HUNSPELL_UNO_SRC=hunspell_UNO_1.1.tar.gz
   hunspell_uno_enabled="yes"
else
   HUNSPELL_UNO_SRC=
   hunspell_uno_enabled="no"
fi
AC_MSG_RESULT([$hunspell_uno_enabled])
AC_SUBST(HUNSPELL_UNO_SRC)

AC_MSG_CHECKING([for libhunspell])
if test "z$HUNSPELL_UNO_SRC" != "z" ; then
    if test "z$with_system_hunspell" != "zyes" ; then
	HUNSPELL_LIB_SRC=hunspell-1.0.8.tar.gz
	hunspell_lib_result="yes"
    else
	HUNSPELL_LIB_SRC=
	hunspell_lib_result="from system"
    fi
else
	HUNSPELL_LIB_SRC=
	hunspell_lib_result="no needed"
fi
AC_MSG_RESULT([$hunspell_lib_result])
AC_SUBST(HUNSPELL_LIB_SRC)

FORCE_GCC33=""
if test "z$enable_gcc33" != "z"; then
   FORCE_GCC33="YES"
fi
AC_SUBST(FORCE_GCC33)

RUN_POST_INSTALL_SCRIPTS="yes"
if test "z$enable_post_install_scripts" = "zno"; then
   RUN_POST_INSTALL_SCRIPTS="no"
fi
AC_SUBST(RUN_POST_INSTALL_SCRIPTS)

ARCHITECTURE="unxlngi4"
if test "z$with_arch" != "z"; then
    if test "z$with_arch" = "zppc"; then
        ARCHITECTURE="unxlngppc"
    fi
    if test "z$with_arch" = "zsparc"; then
        ARCHITECTURE="unxlngs"
    fi
fi
AC_SUBST(ARCHITECTURE)

AC_MSG_CHECKING([for broken aliases])
if `alias gcc > /dev/null 2>&1`; then
   AC_MSG_ERROR( you can't alias your gcc - that's broken );
fi
AC_MSG_RESULT(ok)

AC_MSG_CHECKING([for Open Clip Art Library])
OPENCLIPART_VER=
OPENCLIPART_DIR=
if test "z$with_openclipart" != "z" -a "z$with_openclipart" != "zno" ; then
    if test "z$with_openclipart" = "zyes" ; then
	# the gallery from the source tarball by default
	OPENCLIPART_VER=0.12
    elif (echo "$with_openclipart" | grep "^[[0-9\.]]*$") ; then
	# it's a version number
	OPENCLIPART_VER=$with_openclipart
    elif test "z${with_openclipart%%/*}" = "z" ; then
	# it's an absolute path
	if test -d $with_openclipart ; then
	    OPENCLIPART_DIR=$with_openclipart
	else
	    AC_MSG_ERROR([The directory \"$with_openclipart\" does not exist.])
	fi
    else
	AC_MSG_ERROR([--with-openclipart requires either a version number or an absolute path])
    fi
fi
if test "z$OPENCLIPART_VER" != "z" && ! which inkscape >/dev/null 2>&1 ; then
    AC_MSG_ERROR([inkscape is necessary to process Open Clip Art library from sources])
fi    
AC_MSG_RESULT([${OPENCLIPART_VER:-${OPENCLIPART_DIR:-no}}])
AC_SUBST(OPENCLIPART_VER)
AC_SUBST(OPENCLIPART_DIR)

AC_MSG_CHECKING([for ooo-version])
OOO_MAJOR=1.9
OOO_VERSION=1.9.0
AC_MSG_RESULT([$OOO_VERSION])
AC_SUBST(OOO_VERSION)

AC_MSG_CHECKING([for binsuffix])

if test "z$with_binsuffix" = "zno"; then
    OOO_BINSUFFIX=
elif test "z$with_binsuffix" != "z"; then
    OOO_BINSUFFIX=$with_binsuffix
else
    OOO_BINSUFFIX=1.9
fi
AC_MSG_RESULT([$OOO_BINSUFFIX])
AC_SUBST(OOO_BINSUFFIX)

datestamp=`date '+%Y%m%d.%H%M'`;
SNAPSHOT_TAG="$datestamp.$TAG";
AC_SUBST(SNAPSHOT_TAG)

if test "z$with_installed_ooo_dirname" != "z"; then
   OOOINSTALLDIRNAME=$with_installed_ooo_dirname
else
   OOOINSTALLDIRNAME=ooo-$OOO_MAJOR
fi
AC_SUBST(OOOINSTALLDIRNAME)

if test "z$with_docdir" != "z"; then
    docdir="$with_docdir"
else
    docdir="$datadir/doc/packages/OpenOffice.org"
fi
AC_SUBST(docdir)

# WARNING: The --with-lang= configure option changed, see
#  http://blog.janik.cz/archives/permalinks/2004-11-02T20_04_29.html
#  e.g.
#  --with-lang="ALL"      # see solenv/inc/postset.mk
#  --with-lang="en-US cs"
#  --with-lang="ALL xy"
AC_MSG_CHECKING([for requested localizations])
if test "z$with_lang" = "z" -o "z$with_lang" = "zyes" ; then
    with_lang="en-US"
elif test "z$with_lang" = "zno" ; then
    AC_MSG_WARN([One localization must be built, at least! Defaulting to English.])
    with_lang="en-US"
fi
OOO_LANGS="$with_lang"
AC_MSG_RESULT([$OOO_LANGS])
AC_SUBST(OOO_LANGS)

AC_MSG_CHECKING([whether to enable Mono bindings])
if test -n "$enable_mono"; then
    mono_enabled=yes
    ENABLE_MONO=TRUE
else
    mono_enabled=no
    ENABLE_MONO=
fi
AC_MSG_RESULT([$mono_enabled])
AC_SUBST(ENABLE_MONO)

AC_MSG_CHECKING([whether to enable Access import])
if test "$enable_access" = "no"; then
    access_enabled=no
    ENABLE_ACCESS=
else
    access_enabled=yes
    ENABLE_ACCESS=TRUE
    MDBTOOLS_SRC=mdbtools-0.6pre1.tar.gz
fi
AC_MSG_RESULT([$access_enabled])
AC_SUBST(ENABLE_ACCESS)
AC_SUBST(MDBTOOLS_SRC)

AC_CONFIG_FILES([download], [chmod +x download])
AC_CONFIG_FILES([intltool-extract intltool-merge intltool-update], [chmod +x intltool*])
AC_OUTPUT([ 
Makefile
ooo1.1.spec
bin/setup
bin/Makefile
desktop/Makefile
distro-configs/Makefile
distro-configs/Ark.conf
distro-configs/Common.conf
distro-configs/Debian.conf
distro-configs/Debian64.conf
distro-configs/Ubuntu.conf
distro-configs/Ubuntu64.conf
distro-configs/NLD.conf
distro-configs/NLD64.conf
distro-configs/SUSE.conf
distro-configs/Mandriva.conf
distro-configs/Mandriva64.conf
fonts/Makefile
patches/Makefile
patches/cairo/Makefile
patches/evo2/Makefile
patches/vba/Makefile
patches/mono/Makefile
patches/src680/Makefile
patches/64bit/Makefile
po/Makefile
doc/Makefile
src/Makefile
stamp/Makefile
man/Makefile
www/Makefile
www/images/Makefile
www/tinder-scripts/Makefile
])

if test "$ENABLE_CCACHE" = "yes"; then
    ccache_message="yes"
else
    ccache_message="no"
fi
if test "$ENABLE_ICECREAM" = "yes"; then
    icecream_message="yes, in '$ICECREAM_BINDIR'. Max number of jobs is '$ICECREAM_JOBS'"
else
    icecream_message="no"
fi

echo "
Building openoffice
	tag:                $CVSTAG
	apply rules:        $APPLY_DIR/apply
	src:                $ext_srcdir
	build dir:          $OOBUILDDIR
	tools dir:          $TOOLSDIR
	src package dir:    $SRCDIR
	distro:             $with_distro
	widget sets:        ${widget_sets:-disabled}
	icons:              ${WITH_ICONS:-default}
	gcc to use:         $gcc_to_use
	hunspell-uno:	    $hunspell_uno_enabled
	hunspell-lib:	    $hunspell_lib_result
	openclipart:        ${OPENCLIPART_VER:-${OPENCLIPART_DIR:-no}}
	mono bindings:	    $mono_enabled
	mdbtools/access:    $access_enabled
	java:               $ENABLE_JAVA
	ooo-install-dir:    $OOOINSTALLDIRNAME
	force gcc33:        ${FORCE_GCC33:-no}
	ccache:             $ccache_message
	icecream:           $icecream_message
	cairo:		    $cairo_enabled

To build run:
$warn_use_download	make
	bin/ooinstall <path-to-install>

	This code is not yet fully stable.

"
