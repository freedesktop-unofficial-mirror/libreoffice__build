#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by git-commit with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, make this file executable.

# Uncomment the below to add a Signed-off-by line to the message.
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Commit aborted: Duplicate Signed-off-by lines.
	exit 1
}

# Abort the commit if the message is the same as the one prepared by
# the prepare-commit-msg hook

if [ -f "$1.prepare" ] ; then
    diff "$1" "$1.prepare" > /dev/null 2>/dev/null && {
        echo >&2 Commit aborted: No change in the commit message.
        exit 1
    }
fi

# Check that the first line exists, and is not an asterisk

if [ -z "`head -n 1 $1 | grep -v '^[ \t]*\*'`" ] ; then
    echo >&2 Commit aborted: Please provide the general description on the first line.
    exit 1
fi

# Check that the message is not a ChangeLog-like one

if [ -n "`head -n 1 $1 | grep '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}.*<.*@.*>'`" ] ; then
    echo >&2 Commit aborted: The commit message looks ChangeLog, please use the git form.
    exit 1
fi

exit 0
