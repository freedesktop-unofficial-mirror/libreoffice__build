#!/usr/bin/perl

use strict;
use File::Temp qw/ tempfile tempdir /;

my $default_branch='trunk';

# get ooo-build version from the given configure.in
sub get_version_configure_in($)
{
    my ($configure) = @_;
    my $version;

    open (CONFIGURE, $configure) || die "can't open $configure for reading: $!\n";

    while (my $line = <CONFIGURE>) {
        chomp $line;
    
	if ($line =~ /AC_INIT\s*\(\s*ooo-build\s*,\s*([\w\.]*)\)/) {
	    $version="$1";
	}
    }
    close (CONFIGURE);
    return $version;
}

# increment the version for a test build:
#	+ add 'a' if the version ended with a number
#       + bump the letter otherwise
sub inc_test_version($)
{
    my ($version) = @_;
    my $lastchar = chop $version;
    my $new_version;
    print "lastchar = |$lastchar|\n";
    if ($lastchar =~ /\d/) {
	return "$version" . "$lastchar" . "a";
    } elsif ($lastchar =~ /\w/) {
	# select next letter alhabeticaly: a->b, b->c, ...
	$lastchar =~ tr/0a-zA-Z/a-zA-Z0/;
	return "$version" . "$lastchar";
    } else {
	die "Can't generate test version from \"$version$lastchar\n";
    }
}

# copy the local version of ooo-build into a tmp directory
# omit the .svn subdirectories
sub copy_to_tempdir($)
{
    my ($ooo_build_dir) = @_;
    
    my $temp_dir = tempdir( '/tmp/ooo-build-XXXXXX' );
    my $blacklist = "$temp_dir/ooo-build.copy.blacklist";
    
    print "Copying \"$ooo_build_dir\" -> \"$temp_dir\"...";
    # FIXME: crazy hacks to copy ooo-build without .svn subdirectories and to show a progress
    system "find $ooo_build_dir -wholename \"*/.svn\" >$blacklist";
    system "tar -cf - --transform=s%$ooo_build_dir%% -X $blacklist $ooo_build_dir | tar -xf - -C $temp_dir --checkpoint=25 2>&1 | awk '{ ORS=\"\" ; printf \".\"; fflush() }'";
    print "\n";
    unlink $blacklist;
}


sub usage()
{
    print "This tool helps with ooo-build releasing\n\n" .
    
          "Usage:\n".
	  "\tooo-build-release [--help] [--diff] [stat-type-sw] [--entry=<entry>]\n" .
	  "\t[--entry-id=<id>] [--sort=[column[,column]...] [--revert] res...\n\n" .
	
	  "Options:\n" .
	  "\t--help: prints this help\n\n" .

	  "\t--final:\n" .
	  "\t--daily:\n" .
	  "\t--ptf: release ptf-specific tarball for given bugzilla number\n" .
	  "\t--get-last:\n" .
	  "\t--branch=<name>\n" .
	  "\t--version\n" .
	  "\t--set-version=<ver>\n" .
	  "\t--inc-version=<ver>\n" .
	  "\t--upload=<milestone>\n";
}


my $ptf;
my $daily;
my $branch;
my $bugid;
my $config_version;
my $test_version_inc;
for my $arg (@ARGV) {
    if ($arg eq '--help' || $arg eq '-h') {
	usage;
    } elsif ($arg eq '--daily') {
	$daily=1
    } elsif ($a =~ m/--ptf=(.*)/) {
	$bugid=$1;
	$ptf=1;
    } else {
	print "Too many arguments $arg\n";
	syntax (1);
    }
}

#$config_version = get_version_configure_in("ooo-build/configure.in");
#$test_version_inc = inc_test_version($config_version);
#    print "config_version = $config_version\n";
#    print "test_version_inc = $test_version_inc\n";
#copy_to_tempdir("tmp/ooo-build");
