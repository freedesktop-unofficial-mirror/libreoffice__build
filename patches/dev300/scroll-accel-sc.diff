diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/inc/select.hxx sc/source/ui/inc/select.hxx
--- sc.clean/source/ui/inc/select.hxx	2008-04-01 12:26:31.000000000 -0400
+++ sc/source/ui/inc/select.hxx	2008-04-03 18:13:14.000000000 -0400
@@ -73,6 +73,9 @@ private:
 
 	ScSplitPos		GetWhich();
 
+    ULONG           CalcUpdateInterval( const Size& rWinSize, const Point& rEffPos, 
+                                        bool bLeftScroll, bool bTopScroll, bool bRightScroll, bool bBottomScroll );
+
 public:
 					ScViewFunctionSet( ScViewData* pNewViewData );
 
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/view/select.cxx sc/source/ui/view/select.cxx
--- sc.clean/source/ui/view/select.cxx	2008-04-01 12:26:33.000000000 -0400
+++ sc/source/ui/view/select.cxx	2008-04-03 18:13:03.000000000 -0400
@@ -42,6 +42,7 @@
 
 #include <tools/urlobj.hxx>
 #include <vcl/sound.hxx>
+#include <vcl/svapp.hxx>
 #include <sfx2/docfile.hxx>
 
 #include "select.hxx"
@@ -85,6 +86,72 @@ ScSplitPos ScViewFunctionSet::GetWhich()
 		return pViewData->GetActivePart();
 }
 
+ULONG ScViewFunctionSet::CalcUpdateInterval( const Size& rWinSize, const Point& rEffPos, 
+                                             bool bLeftScroll, bool bTopScroll, bool bRightScroll, bool bBottomScroll )
+{
+    ULONG nUpdateInterval = SELENG_AUTOREPEAT_INTERVAL_MAX;
+    Window* pWin = pEngine->GetWindow();
+    Rectangle aScrRect = pWin->GetDesktopRectPixel();
+    Point aRootPos = pWin->OutputToAbsoluteScreenPixel(Point(0,0));
+    if (bRightScroll)
+    {
+        double nWinRight = rWinSize.getWidth() + aRootPos.getX();
+        double nMarginRight = aScrRect.GetWidth() - nWinRight;
+        double nHOffset = rEffPos.X() - rWinSize.Width();
+        double nHAccelRate = nHOffset / nMarginRight;
+
+        if (nHAccelRate > 1.0)
+            nHAccelRate = 1.0;
+
+        nUpdateInterval = static_cast<ULONG>(SELENG_AUTOREPEAT_INTERVAL_MAX*(1.0 - nHAccelRate));
+    }
+
+    if (bLeftScroll)
+    {
+        double nMarginLeft = aRootPos.getX();
+        double nHOffset = -rEffPos.X();
+        double nHAccelRate = nHOffset / nMarginLeft;
+
+        if (nHAccelRate > 1.0)
+            nHAccelRate = 1.0;
+
+        ULONG nTmp = static_cast<ULONG>(SELENG_AUTOREPEAT_INTERVAL_MAX*(1.0 - nHAccelRate));
+        if (nUpdateInterval > nTmp)
+            nUpdateInterval = nTmp;
+    }
+
+    if (bBottomScroll)
+    {
+        double nWinBottom = rWinSize.getHeight() + aRootPos.getY();
+        double nMarginBottom = aScrRect.GetHeight() - nWinBottom;
+        double nVOffset = rEffPos.Y() - rWinSize.Height();
+        double nVAccelRate = nVOffset / nMarginBottom;
+
+        if (nVAccelRate > 1.0)
+            nVAccelRate = 1.0;
+
+        ULONG nTmp = static_cast<ULONG>(SELENG_AUTOREPEAT_INTERVAL_MAX*(1.0 - nVAccelRate));
+        if (nUpdateInterval > nTmp)
+            nUpdateInterval = nTmp;
+    }
+
+    if (bTopScroll)
+    {
+        double nMarginTop = aRootPos.getY();
+        double nVOffset = -rEffPos.Y();
+        double nVAccelRate = nVOffset / nMarginTop;
+
+        if (nVAccelRate > 1.0)
+            nVAccelRate = 1.0;
+
+        ULONG nTmp = static_cast<ULONG>(SELENG_AUTOREPEAT_INTERVAL_MAX*(1.0 - nVAccelRate));
+        if (nUpdateInterval > nTmp)
+            nUpdateInterval = nTmp;
+    }
+
+    return nUpdateInterval;
+}
+
 void ScViewFunctionSet::SetSelectionEngine( ScViewSelectionEngine* pSelEngine )
 {
 	pEngine = pSelEngine;
@@ -263,10 +330,11 @@ BOOL __EXPORT ScViewFunctionSet::SetCurs
 	//	Scrolling
 
 	Size aWinSize = pEngine->GetWindow()->GetOutputSizePixel();
-	BOOL bRightScroll  = ( aEffPos.X() >= aWinSize.Width() );
-	BOOL bBottomScroll = ( aEffPos.Y() >= aWinSize.Height() );
-	BOOL bNegScroll    = ( aEffPos.X() < 0 || aEffPos.Y() < 0 );
-	BOOL bScroll = bRightScroll || bBottomScroll || bNegScroll;
+	bool bRightScroll  = ( aEffPos.X() >= aWinSize.Width() );
+	bool bLeftScroll  = ( aEffPos.X() < 0 );
+	bool bBottomScroll = ( aEffPos.Y() >= aWinSize.Height() );
+	bool bTopScroll = ( aEffPos.Y() < 0 );
+	bool bScroll = bRightScroll || bBottomScroll || bLeftScroll || bTopScroll;
 
 	SCsCOL	nPosX;
 	SCsROW	nPosY;
@@ -319,6 +387,19 @@ BOOL __EXPORT ScViewFunctionSet::SetCurs
 			}
 	}
 
+    if (bScroll)
+    {
+        // Adjust update interval based on how far the mouse pointer is from the edge.
+        ULONG nUpdateInterval = CalcUpdateInterval(
+            aWinSize, aEffPos, bLeftScroll, bTopScroll, bRightScroll, bBottomScroll);
+        pEngine->SetUpdateInterval(nUpdateInterval);
+    }
+    else
+    {
+        // Don't forget to reset the interval when not scrolling!
+        pEngine->SetUpdateInterval(SELENG_AUTOREPEAT_INTERVAL);
+    }
+
 	pViewData->ResetOldCursor();
 	return SetCursorAtCell( nPosX, nPosY, bScroll );
 }
