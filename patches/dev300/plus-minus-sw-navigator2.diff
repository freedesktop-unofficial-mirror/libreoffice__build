---
 sw/source/ui/inc/conttree.hxx  |    5 +++
 sw/source/ui/utlui/content.cxx |   74 +++++++++++++++++++++++++++++++++++++--
 2 files changed, 75 insertions(+), 4 deletions(-)

diff --git sw/source/ui/inc/conttree.hxx sw/source/ui/inc/conttree.hxx
index 2e0d8e4..1b56866 100644
--- sw/source/ui/inc/conttree.hxx
+++ sw/source/ui/inc/conttree.hxx
@@ -30,6 +30,9 @@
 #include <svtools/svtreebx.hxx>
 #include "swcont.hxx"
 
+#include<map>
+//using namespace std;
+
 class SwWrtShell;
 class SwContentType;
 class SwNavigationPI;
@@ -74,6 +77,8 @@ class SwContentTree : public SvTreeListBox
     SwWrtShell* 		pActiveShell;   // die aktive oder eine konst. offene View
     SwNavigationConfig*	pConfig;
 
+    std::map< void*, sal_Bool > mOutLineNodeMap;
+
     sal_Int32           nActiveBlock;
     USHORT				nHiddenBlock;
     USHORT 				nRootType;
diff --git sw/source/ui/utlui/content.cxx sw/source/ui/utlui/content.cxx
index b15ee57..a59244a 100644
--- sw/source/ui/utlui/content.cxx
+++ sw/source/ui/utlui/content.cxx
@@ -968,7 +968,6 @@ SwContentTree::~SwContentTree()
 /***************************************************************************
     Drag&Drop methods
 ***************************************************************************/
-
 void SwContentTree::StartDrag( sal_Int8 nAction, const Point& rPosPixel )
 {
     if( !bIsRoot || nRootType != CONTENT_TYPE_OUTLINE )
@@ -1018,8 +1017,45 @@ sal_Int8 SwContentTree::AcceptDrop( const AcceptDropEvent& rEvt )
 /***************************************************************************
     Beschreibung:	Drop wird im Navigator ausgefuehrt
 ***************************************************************************/
+void* lcl_GetOutlineKey( SwContentTree* pTree, SwOutlineContent* pContent)
+{
+    void* key = 0;
+    if( pTree && pContent )
+    {
+        SwWrtShell* pShell = pTree->GetWrtShell();
+        sal_Int32 nPos = pContent->GetYPos();
+        if( nPos )
+        {
+            key = (void*)pShell->getIDocumentOutlineNodesAccess()->getOutlineNode( nPos );
+        }
+    }
+    return key;
+}
+
 sal_Int8 SwContentTree::ExecuteDrop( const ExecuteDropEvent& rEvt )
 {
+    SvLBoxEntry* pEntry = pTargetEntry;
+    if( pEntry && ( nRootType == CONTENT_TYPE_OUTLINE ) && lcl_IsContent( pEntry ) )
+    {
+        SwOutlineContent* pOutlineContent = ( SwOutlineContent* )( pEntry->GetUserData() );
+        if( pOutlineContent )
+        {
+            void* key = lcl_GetOutlineKey(this, pOutlineContent);
+            if( !mOutLineNodeMap[key] )
+            {
+                while( pEntry->HasChilds() )
+                {
+                    SvLBoxEntry* pChildEntry = FirstChild( pEntry );
+                    while( pChildEntry )
+                    {
+                        pEntry = pChildEntry;
+                        pChildEntry = NextSibling( pChildEntry );
+                    }
+                }
+                pTargetEntry = pEntry;
+            }
+        }
+    }
     if( bIsRoot )
         return SvTreeListBox::ExecuteDrop( rEvt );
     return bIsInDrag ? DND_ACTION_NONE : GetParentWindow()->ExecuteDrop(rEvt);
@@ -1308,7 +1344,8 @@ void  SwContentTree::RequestingChilds( SvLBoxEntry* pParent )
 
 sal_Bool  SwContentTree::Expand( SvLBoxEntry* pParent )
 {
-    if(!bIsRoot || ((SwContentType*)pParent->GetUserData())->GetType() == CONTENT_TYPE_OUTLINE)
+    if(!bIsRoot || (((SwContentType*)pParent->GetUserData())->GetType() == CONTENT_TYPE_OUTLINE) ||
+            (nRootType == CONTENT_TYPE_OUTLINE))
     {
         if(lcl_IsContentType(pParent))
         {
@@ -1323,18 +1360,39 @@ sal_Bool  SwContentTree::Expand( SvLBoxEntry* pParent )
                 nHiddenBlock |= nOr;
             if((pCntType->GetType() == CONTENT_TYPE_OUTLINE))
             {
+                std::map< void*, sal_Bool > mCurrOutLineNodeMap;
+
+                SwWrtShell* pShell = GetWrtShell();
                 sal_Bool bBool = SvTreeListBox::Expand(pParent);
                 SvLBoxEntry* pChild = Next(pParent);
                 while(pChild && lcl_IsContent(pChild) && pParent->HasChilds())
                 {
                     if(pChild->HasChilds())
-                        SvTreeListBox::Expand(pChild);
+                    {
+                        sal_Int32 nPos = ((SwContent*)pChild->GetUserData())->GetYPos();
+                        void* key = (void*)pShell->getIDocumentOutlineNodesAccess()->getOutlineNode( nPos );
+                        mCurrOutLineNodeMap.insert(std::map<void*, sal_Bool>::value_type( key, sal_False ) );
+                        std::map<void*,sal_Bool>::iterator iter = mOutLineNodeMap.find( key );
+                        if( iter != mOutLineNodeMap.end() && mOutLineNodeMap[key])
+                        {
+                            mCurrOutLineNodeMap[key] = sal_True;
+                            SvTreeListBox::Expand(pChild);
+                        }
+                    }
                     pChild = Next(pChild);
                 }
+                mOutLineNodeMap = mCurrOutLineNodeMap;
                 return bBool;
             }
 
         }
+        else if( lcl_IsContent(pParent) )
+        {
+            SwWrtShell* pShell = GetWrtShell();
+            sal_Int32 nPos = ((SwContent*)pParent->GetUserData())->GetYPos();
+            void* key = (void*)pShell->getIDocumentOutlineNodesAccess()->getOutlineNode( nPos );
+            mOutLineNodeMap[key] = sal_True;
+        }
     }
     return SvTreeListBox::Expand(pParent);
 }
@@ -1346,7 +1404,8 @@ sal_Bool  SwContentTree::Expand( SvLBoxEntry* pParent )
 sal_Bool  SwContentTree::Collapse( SvLBoxEntry* pParent )
 {
     sal_Bool bRet;
-    if(!bIsRoot || ((SwContentType*)pParent->GetUserData())->GetType() == CONTENT_TYPE_OUTLINE)
+    if(!bIsRoot || (((SwContentType*)pParent->GetUserData())->GetType() == CONTENT_TYPE_OUTLINE) ||
+            (nRootType == CONTENT_TYPE_OUTLINE))
     {
         if(lcl_IsContentType(pParent))
         {
@@ -1363,6 +1422,13 @@ sal_Bool  SwContentTree::Collapse( SvLBoxEntry* pParent )
             else
                 nHiddenBlock &= nAnd;
         }
+        else if( lcl_IsContent(pParent) )
+        {
+            SwWrtShell* pShell = GetWrtShell();
+            sal_Int32 nPos = ((SwContent*)pParent->GetUserData())->GetYPos();
+            void* key = (void*)pShell->getIDocumentOutlineNodesAccess()->getOutlineNode( nPos );
+            mOutLineNodeMap[key] = sal_False;
+        }
             bRet = SvTreeListBox::Collapse(pParent);
     }
     else
-- 
1.7.0.1

