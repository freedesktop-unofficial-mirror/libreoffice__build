diff --git tools/inc/tools/stream.hxx tools/inc/tools/stream.hxx
index a8f0874..b8334db 100644
--- tools/inc/tools/stream.hxx
+++ tools/inc/tools/stream.hxx
@@ -535,6 +535,13 @@ public:
                     If sal_True, an embedded quote character inside a quoted
                     field may also be escaped with a preceding backslash.
                     Normally, quotes are escaped by doubling them.
+                    
+                    @param bAllowQuotedMultiLine
+                    If true, a quoted sequence may have line breaks, which
+                    means multiple lines may be read if the opening and
+                    closing quotes are on different lines.  If false, then
+                    only a single line is read even when the closing quote of
+                    a quoted seqence is not reached.
 
                     @return
                     sal_True if no stream error.
@@ -557,7 +564,7 @@ public:
                   */
     sal_Bool        ReadCsvLine( String& rStr, sal_Bool bEmbeddedLineBreak,
                         const String& rFieldSeparators, sal_Unicode cFieldQuote,
-                        sal_Bool bAllowBackslashEscape = sal_False);
+                        sal_Bool bAllowBackslashEscape = sal_False, bool bAllowQuotedMultiLine = false);
 
     void			SetBufferSize( sal_uInt16 nBufSize );
     sal_uInt16	GetBufferSize() const { return nBufSize; }
diff --git tools/source/stream/stream.cxx tools/source/stream/stream.cxx
index ae4dfff..bb9421f 100644
--- tools/source/stream/stream.cxx
+++ tools/source/stream/stream.cxx
@@ -1089,7 +1089,7 @@ inline const sal_Unicode* lcl_UnicodeStrChr( const sal_Unicode* pStr,
 
 sal_Bool SvStream::ReadCsvLine( String& rStr, sal_Bool bEmbeddedLineBreak,
         const String& rFieldSeparators, sal_Unicode cFieldQuote,
-        sal_Bool bAllowBackslashEscape)
+        sal_Bool bAllowBackslashEscape, bool bAllowQuotedMultiLine)
 {
     ReadUniOrByteStringLine( rStr);
 
@@ -1126,6 +1126,11 @@ sal_Bool SvStream::ReadCsvLine( String& rStr, sal_Bool bEmbeddedLineBreak,
                 ++p;
             }
 
+            if (!bAllowQuotedMultiLine)
+                // Don't read more than a single line even if a quoted
+                // sequence has not reached its closing quote.
+                break;
+
             if (nQuotes % 2 == 0)
                 break;
             else
