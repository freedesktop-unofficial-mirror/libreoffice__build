diff --git sw/source/filter/docx/docx-wrtww8.cxx sw/source/filter/docx/docx-wrtww8.cxx
index 5dce10d..92a9e0d 100644
--- sw/source/filter/docx/docx-wrtww8.cxx
+++ sw/source/filter/docx/docx-wrtww8.cxx
@@ -3190,96 +3190,9 @@ void WW8SHDLong::Write( WW8Export& rExport )
 
 void WW8Export::WriteFormData( SwFieldBookmark &rFieldmark )
 {
-    ASSERT(bWrtWW8, "No 95 export yet");
-    if ( !bWrtWW8 )
-        return;
-
-    int type = rFieldmark.GetFieldType();
-    const String ffname = rFieldmark.GetFFName();
-
-    ULONG nDataStt = pDataStrm->Tell();
-    pChpPlc->AppendFkpEntry( Strm().Tell() );
-
-    WriteChar( 0x01 );
-    static BYTE aArr1[] = {
-        0x03, 0x6a, 0,0,0,0,    // sprmCPicLocation
-
-        0x06, 0x08, 0x01,       // sprmCFData
-        0x55, 0x08, 0x01,       // sprmCFSpec
-        0x02, 0x08, 0x01        // sprmCFFldVanish
-    };
-    BYTE* pDataAdr = aArr1 + 2;
-    Set_UInt32( pDataAdr, nDataStt );
-
-    pChpPlc->AppendFkpEntry(Strm().Tell(),
-            sizeof( aArr1 ), aArr1 );
-
-    sal_uInt8 aFldHeader[] = 
-    {
-        0xFF, 0xFF, 0xFF, 0xFF, // Unicode Marker...
-        0, 0, 0, 0//, 0, 0, 0, 0
-    };
-
-    aFldHeader[4] |= (type & 0x03);
-    int ffres = rFieldmark.GetFFRes();
-    aFldHeader[4] |= ((ffres<<2) & 0x7C);
-
-    const String ffdeftext;
-    const String ffformat;
-    const String ffhelptext;
-    const String ffstattext;
-    const String ffentrymcr;
-    const String ffexitmcr;
-
-    const sal_uInt8 aFldData[] =
-    {
-        0,0,0,0,        // len of struct
-        0x44,0,         // the start of "next" data             
-        0,0,0,0,0,0,0,0,0,0,                // PIC-Structure!  /10
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |              /16
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |              /16
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |              /16
-        0,0,0,0,                            // /               /4
-    };
-    int slen = sizeof( aFldData )
-        +sizeof( aFldHeader )
-        +2*ffname.Len() + 4
-        +2*ffdeftext.Len() + 4
-        +2*ffformat.Len() + 4
-        +2*ffhelptext.Len() + 4
-        +2*ffstattext.Len() + 4
-        +2*ffentrymcr.Len() + 4
-        +2*ffexitmcr.Len() + 4;
-#ifdef OSL_BIGENDIAN
-    slen = SWAPLONG(slen);
-#endif // OSL_BIGENDIAN
-    *((sal_uInt32 *)aFldData) = slen;
-    int len = sizeof( aFldData );
-    assert( len == 0x44 );
-    pDataStrm->Write( aFldData, len );
-
-    len = sizeof( aFldHeader );
-    assert( len == 8 );
-    pDataStrm->Write( aFldHeader, len );
-
-    SwWW8Writer::WriteString_xstz( *pDataStrm, ffname, true ); // Form field name
-
-    if (type==0)
-        SwWW8Writer::WriteString_xstz( *pDataStrm, ffdeftext, true );
-    else
-        pDataStrm->WriteNumber((sal_uInt16)0);
-
-    SwWW8Writer::WriteString_xstz( *pDataStrm, ffformat, true );
-    SwWW8Writer::WriteString_xstz( *pDataStrm, ffhelptext, true );
-    SwWW8Writer::WriteString_xstz( *pDataStrm, ffstattext, true );
-    SwWW8Writer::WriteString_xstz( *pDataStrm, ffentrymcr, true );
-    SwWW8Writer::WriteString_xstz( *pDataStrm, ffexitmcr, true );
-    if ( type==2 )
-    {
-        // 0xFF, 0xFF
-        // sal_uInt32 number of strings
-        // (sal_uInt16 len; sal_uInt16 unicode char[len])*num of strings
-    }
+  printf("FIXME!!!!!!!!\n");
+  //@TODO fixme!!
+    return;
 }
 
 /* vi:set tabstop=4 shiftwidth=4 expandtab: */
diff --git sw/source/filter/docx/docx-ww8par.cxx sw/source/filter/docx/docx-ww8par.cxx
index 2ae6e58..b56ed71 100644
--- sw/source/filter/docx/docx-ww8par.cxx
+++ sw/source/filter/docx/docx-ww8par.cxx
@@ -2590,21 +2590,7 @@ bool SwWW8ImplReader::ReadChar(long nPosCp, long nCpOfs)
         case 0x15:
             if( !bSpec )        // Juristenparagraph
                 cInsert = '\xa7';
-			else { //0x15 is special --> so it's our field end mark...; hmmm what about field marks not handled by us??, maybe a problem with nested fields; probably an area of bugs... [well release quick and release often....]
-				if (!maNewFieldCtxStack.empty() && pPaM!=NULL && pPaM->GetPoint()!=NULL) {
-					WW8NewFieldCtx *pFieldCtx=maNewFieldCtxStack.back();
-					maNewFieldCtxStack.pop_back();
-					SwPosition aEndPos = *pPaM->GetPoint();
-					SwPaM aFldPam( pFieldCtx->GetPtNode(), pFieldCtx->GetPtCntnt(), aEndPos.nNode, aEndPos.nContent.GetIndex());
-					SwFieldBookmark *pFieldmark=(SwFieldBookmark*)rDoc.makeBookmark(aFldPam, KeyCode(), pFieldCtx->GetBookmarkName(), String(), IDocumentBookmarkAccess::FORM_FIELDMARK_TEXT);
-					ASSERT(pFieldmark!=NULL, "hmmm; why was the bookmark not created?");
-					if (pFieldmark!=NULL) {
-						pFieldmark->SetFieldType(0); // 0==Text
-						// set field data here...
-						pFieldCtx->SetCurrentFieldParamsTo(*pFieldmark);
-					}
-					delete pFieldCtx;
-				}
+			else { 
 			}
             break;
         case 0x9:
diff --git sw/source/filter/docx/docx-ww8par3.cxx sw/source/filter/docx/docx-ww8par3.cxx
index eebd76c..acc52b9 100644
--- sw/source/filter/docx/docx-ww8par3.cxx
+++ sw/source/filter/docx/docx-ww8par3.cxx
@@ -103,49 +103,6 @@ using namespace com::sun::star;
 using namespace sw::util;
 using namespace sw::types;
 
-WW8NewFieldCtx::WW8NewFieldCtx(SwPosition &aStartPos, ::rtl::OUString _sBookmarkName, ::rtl::OUString _sBookmarkType)
-: maPtNode(aStartPos.nNode), mnPtCntnt(aStartPos.nContent.GetIndex()), 
-  sBookmarkName(_sBookmarkName),
-  sBookmarkType(_sBookmarkType), mpPaM(NULL)
-{
-}
-
-
-WW8NewFieldCtx::~WW8NewFieldCtx()
-{
-	if (mpPaM) delete mpPaM;
-}
-
-::rtl::OUString WW8NewFieldCtx::GetBookmarkName()
-{
-	return sBookmarkName;
-}
-
-::rtl::OUString WW8NewFieldCtx::GetBookmarkType()
-{
-	return sBookmarkType;
-}
-
-void WW8NewFieldCtx::AddParam(::rtl::OUString name, ::rtl::OUString value)
-{
-	maParams.push_back( Param_t(name, value) );
-}
-
-void WW8NewFieldCtx::SetCurrentFieldParamsTo(SwFieldBookmark &rFieldBookmark)
-{
-	for(Params_t::iterator i=maParams.begin();i!=maParams.end();i++) {
-		::rtl::OUString aName=i->first;
-		::rtl::OUString aValue=i->second;
-		if (aName.compareToAscii("Description")==0) {
-			rFieldBookmark.SetFFHelpText(aValue);
-		} else if (aName.compareToAscii("Name")==0) {
-			rFieldBookmark.SetFFName(aValue);
-		} else if (aName.compareToAscii("Result")==0) {
-			rFieldBookmark.SetFFRes( aValue.toInt32() );
-		}
-	}
-}
-
 //-----------------------------------------
 //            UNO-Controls
 //-----------------------------------------
@@ -159,157 +116,30 @@ eF_ResT SwWW8ImplReader::Read_F_OCX( WW8FieldDesc*, String& )
     return FLD_TEXT;
 }
 
+
 eF_ResT SwWW8ImplReader::Read_F_FormTextBox( WW8FieldDesc* pF, String& rStr )
 {
-    WW8FormulaEditBox aFormula(*this);
-
-    if (0x01 == rStr.GetChar(writer_cast<xub_StrLen>(pF->nLCode-1))) {
-        ImportFormulaControl(aFormula,pF->nSCode+pF->nLCode-1, WW8_CT_EDIT);
-    }
-
-    /* #80205#
-    Here we have a small complication. This formula control contains
-    the default text that is displayed if you edit the form field in
-    the "default text" area. But MSOffice does not display that
-    information, instead it display the result of the field,
-    MSOffice just uses the default text of the control as its
-    initial value for the displayed default text. So we will swap in
-    the field result into the formula here in place of the default
-    text.
-    */
-
-    const SvtFilterOptions* pOpt = SvtFilterOptions::Get();
-    sal_Bool bUseEnhFields=(pOpt && pOpt->IsUseEnhancedFields());
-
-    if (!bUseEnhFields) {
-	aFormula.sDefault = GetFieldResult(pF);
-
-#if 0 // why not? (flr)
-    //substituting Unicode spacing 0x2002 with double space for layout
-	aFormula.sDefault.SearchAndReplaceAll(
-	    String(static_cast< sal_Unicode >(0x2002)),
-	    CREATE_CONST_ASC("  "));
-#endif
-
-	SwInputField aFld((SwInputFieldType*)rDoc.GetSysFldType( RES_INPUTFLD ),
-			  aFormula.sDefault , aFormula.sTitle , INP_TXT, 0 );
-	aFld.SetHelp(aFormula.sHelp);
-	aFld.SetToolTip(aFormula.sToolTip);
-
-	rDoc.Insert(*pPaM, SwFmtFld(aFld), 0); 
-	return FLD_OK;
-    } else {
-	WW8PLCFx_Book* pB = pPlcxMan->GetBook();
-	String aBookmarkName;
-	if (pB!=NULL) {
-		WW8_CP currentCP=pF->nSCode;
-		WW8_CP currentLen=pF->nLen;
-
-		USHORT bkmFindIdx;
-		String aBookmarkFind=pB->GetBookmark(currentCP-1, currentCP+currentLen-1, bkmFindIdx);
-
-		if (aBookmarkFind.Len()>0) { 
-			pB->SetStatus(bkmFindIdx, BOOK_FIELD); // mark bookmark as consumed, such that tl'll not get inserted as a "normal" bookmark again
-			if (aBookmarkFind.Len()>0) {
-				aBookmarkName=aBookmarkFind;
-			}
-		}
-	}
-
-	if (pB!=NULL && aBookmarkName.Len()==0) {
-		aBookmarkName=pB->GetUniqueBookmarkName(aFormula.sTitle);
-	}
-
-
-	if (aBookmarkName.Len()>0) {
-		WW8NewFieldCtx *pFieldCtx=new WW8NewFieldCtx(*pPaM->GetPoint(), aBookmarkName, ::rtl::OUString::createFromAscii("ecma.office-open-xml.field.FORMTEXT"));
-		maNewFieldCtxStack.push_back(pFieldCtx);
-		pFieldCtx->AddParam(::rtl::OUString::createFromAscii("Description"), aFormula.sToolTip);
-		pFieldCtx->AddParam(::rtl::OUString::createFromAscii("Name"), aFormula.sTitle);
-	}
-	return FLD_TEXT;
-    }
+  //@TODO fixme!
+  printf("FIXME!!!!!!!!\n");
+  return FLD_TEXT;
 }
 
 eF_ResT SwWW8ImplReader::Read_F_FormCheckBox( WW8FieldDesc* pF, String& rStr )
 {
-    WW8FormulaCheckBox aFormula(*this);
-
-    if (!pFormImpl)
-        pFormImpl = new SwMSConvertControls(mpDocShell, pPaM);
-
-    if (0x01 == rStr.GetChar(writer_cast<xub_StrLen>(pF->nLCode-1)))
-        ImportFormulaControl(aFormula,pF->nSCode+pF->nLCode-1, WW8_CT_CHECKBOX);
-    const SvtFilterOptions* pOpt = SvtFilterOptions::Get();
-    sal_Bool bUseEnhFields=(pOpt && pOpt->IsUseEnhancedFields());
-
-    if (!bUseEnhFields) {
-	pFormImpl->InsertFormula(aFormula); 
-	return FLD_OK;
-    } else {
-	String aBookmarkName;
-	WW8PLCFx_Book* pB = pPlcxMan->GetBook();
-	if (pB!=NULL) {
-		WW8_CP currentCP=pF->nSCode;
-		WW8_CP currentLen=pF->nLen;
-
-		USHORT bkmFindIdx;
-		String aBookmarkFind=pB->GetBookmark(currentCP-1, currentCP+currentLen-1, bkmFindIdx);
-
-		if (aBookmarkFind.Len()>0) { 
-			pB->SetStatus(bkmFindIdx, BOOK_FIELD); // mark as consumed by field
-			if (aBookmarkFind.Len()>0) {
-				aBookmarkName=aBookmarkFind;
-			}
-		}
-	}
-
-	if (pB!=NULL && aBookmarkName.Len()==0) {
-		aBookmarkName=pB->GetUniqueBookmarkName(aFormula.sTitle);
-	}
-
-	if (aBookmarkName.Len()>0) {
-		SwFieldBookmark *pFieldmark=(SwFieldBookmark*)rDoc.makeBookmark(*pPaM, KeyCode(), aBookmarkName, String(), IDocumentBookmarkAccess::FORM_FIELDMARK_NO_TEXT);
-		ASSERT(pFieldmark!=NULL, "hmmm; why was the bookmark not created?");
-		if (pFieldmark!=NULL) {
-			pFieldmark->SetFieldType(1); // 0==Checkbox
-			pFieldmark->SetFFName(aFormula.sTitle);
-			pFieldmark->SetFFHelpText(aFormula.sToolTip);
-			pFieldmark->SetChecked(aFormula.nChecked!=0);
-			// set field data here...
-		}
-	}
-	return FLD_OK;
-    }
+  //@TODO fixme!
+  printf("FIXME!!!!!!!!\n");
+  return FLD_TEXT;
 }
 
 eF_ResT SwWW8ImplReader::Read_F_FormListBox( WW8FieldDesc* pF, String& rStr)
 {
-    WW8FormulaListBox aFormula(*this);
+  //@TODO fixme!
+  printf("FIXME!!!!!!!!\n");
 
-    if (0x01 == rStr.GetChar(writer_cast<xub_StrLen>(pF->nLCode-1)))
-        ImportFormulaControl(aFormula,pF->nSCode+pF->nLCode-1, WW8_CT_DROPDOWN);
-
-    SwDropDownField aFld(
-        (SwDropDownFieldType*)rDoc.GetSysFldType(RES_DROPDOWN));
-
-    aFld.SetName(aFormula.sTitle);
-    aFld.SetHelp(aFormula.sHelp);
-    aFld.SetToolTip(aFormula.sToolTip);
-
-    if (!aFormula.maListEntries.empty())
-    {
-        aFld.SetItems(aFormula.maListEntries);
-        int nIndex = aFormula.fDropdownIndex  < aFormula.maListEntries.size()
-            ? aFormula.fDropdownIndex : 0;
-        aFld.SetSelectedItem(aFormula.maListEntries[nIndex]);
-    }
-
-    rDoc.Insert(*pPaM, SwFmtFld(aFld), 0);
-
-    return FLD_OK;
+  return FLD_TEXT;
 }
 
+
 void SwWW8ImplReader::DeleteFormImpl()
 {
     delete pFormImpl, pFormImpl = 0;

