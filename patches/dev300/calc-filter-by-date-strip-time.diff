diff --git sc/inc/column.hxx sc/inc/column.hxx
index dc6dd3e..1d49fc3 100644
--- sc/inc/column.hxx
+++ sc/inc/column.hxx
@@ -375,7 +375,7 @@ public:
                 /// Including current, may return -1
 	SCsROW		GetNextUnprotected( SCROW nRow, BOOL bUp ) const;
 
-	void		GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollection& rStrings);
+    void		GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollection& rStrings, bool& rHasDates);
 	BOOL		GetDataEntries(SCROW nRow, TypedScStrCollection& rStrings, BOOL bLimit);
 
 //UNUSED2008-05  SCROW		NoteCount( SCROW nMaxRow = MAXROW ) const;
diff --git sc/inc/dbcolect.hxx sc/inc/dbcolect.hxx
index cee5679..684a028 100644
--- sc/inc/dbcolect.hxx
+++ sc/inc/dbcolect.hxx
@@ -87,6 +87,7 @@ private:
 	SCCOLROW		nQueryField[MAXQUERY];
 	ScQueryOp		eQueryOp[MAXQUERY];
 	BOOL			bQueryByString[MAXQUERY];
+    bool            bQueryByDate[MAXQUERY];
 	String*			pQueryStr[MAXQUERY];
 	double			nQueryVal[MAXQUERY];
 	ScQueryConnect  eQueryConnect[MAXQUERY];
diff --git sc/inc/document.hxx sc/inc/document.hxx
index f92fa00..6a6d8da 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -1372,9 +1372,9 @@ public:
 	void 			GetUpperCellString(SCCOL nCol, SCROW nRow, SCTAB nTab, String& rStr);
 
 	BOOL			GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab,
-								TypedScStrCollection& rStrings, bool bFilter = false );
+                                bool bFilter, TypedScStrCollection& rStrings, bool& rHasDates);
 	SC_DLLPUBLIC BOOL			GetFilterEntriesArea( SCCOL nCol, SCROW nStartRow, SCROW nEndRow,
-								SCTAB nTab, TypedScStrCollection& rStrings );
+                                SCTAB nTab, TypedScStrCollection& rStrings, bool& rHasDates );
 	BOOL			GetDataEntries( SCCOL nCol, SCROW nRow, SCTAB nTab,
 								TypedScStrCollection& rStrings, BOOL bLimit = FALSE );
 	BOOL			GetFormulaEntries( TypedScStrCollection& rStrings );
diff --git sc/inc/global.hxx sc/inc/global.hxx
index 0f20776..106fb6b 100644
--- sc/inc/global.hxx
+++ sc/inc/global.hxx
@@ -791,6 +791,7 @@ struct ScQueryEntry
 {
 	BOOL			bDoQuery;
 	BOOL			bQueryByString;
+    bool            bQueryByDate;
 	SCCOLROW		nField;
 	ScQueryOp		eOp;
 	ScQueryConnect  eConnect;
diff --git sc/inc/table.hxx sc/inc/table.hxx
index 7f07b4b..f195182 100644
--- sc/inc/table.hxx
+++ sc/inc/table.hxx
@@ -635,8 +635,8 @@ public:
 	SCSIZE		Query(ScQueryParam& rQueryParam, BOOL bKeepSub);
 	BOOL		CreateQueryParam(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2, ScQueryParam& rQueryParam);
 
-	void		GetFilterEntries(SCCOL nCol, SCROW nRow1, SCROW nRow2, TypedScStrCollection& rStrings);
-    void        GetFilteredFilterEntries( SCCOL nCol, SCROW nRow1, SCROW nRow2, const ScQueryParam& rParam, TypedScStrCollection& rStrings );
+    void        GetFilterEntries(SCCOL nCol, SCROW nRow1, SCROW nRow2, TypedScStrCollection& rStrings, bool& rHasDates);
+    void        GetFilteredFilterEntries( SCCOL nCol, SCROW nRow1, SCROW nRow2, const ScQueryParam& rParam, TypedScStrCollection& rStrings, bool& rHasDates );
 	BOOL		GetDataEntries(SCCOL nCol, SCROW nRow, TypedScStrCollection& rStrings, BOOL bLimit);
 
 	BOOL		HasColHeader( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow );
diff --git sc/source/core/data/column3.cxx sc/source/core/data/column3.cxx
index 5d0b576..f401acb 100644
--- sc/source/core/data/column3.cxx
+++ sc/source/core/data/column3.cxx
@@ -1429,8 +1429,9 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
 }
 
 
-void ScColumn::GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollection& rStrings)
+void ScColumn::GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollection& rStrings, bool& rHasDates)
 {
+    bool bHasDates = false;
 	SvNumberFormatter* pFormatter = pDocument->GetFormatTable();
 	String aString;
     SCROW nRow = 0;
@@ -1466,6 +1467,18 @@ void ScColumn::GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollec
 					nValue = 0.0;
 			}
 
+            if (pFormatter)
+            {
+                short nType = pFormatter->GetType(nFormat);
+                if ((nType & NUMBERFORMAT_DATE) && !(nType & NUMBERFORMAT_TIME))
+                {    
+                    // special case for date values.  Disregard the time
+                    // element if the number format is of date type.
+                    nValue = ::rtl::math::approxFloor(nValue);
+                    bHasDates = true;
+                }
+            }
+
 			pData = new TypedStrData( aString, nValue, SC_STRTYPE_VALUE );
 		}
 #if 0 // DR
@@ -1484,6 +1497,8 @@ void ScColumn::GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollec
 
 		++nIndex;
 	}
+
+    rHasDates = bHasDates;
 }
 
 //
diff --git sc/source/core/data/documen3.cxx sc/source/core/data/documen3.cxx
index 902ec78..e5186e6 100644
--- sc/source/core/data/documen3.cxx
+++ sc/source/core/data/documen3.cxx
@@ -1255,7 +1255,8 @@ BOOL ScDocument::HasRowHeader( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol,
 //	GetFilterEntries - Eintraege fuer AutoFilter-Listbox
 //
 
-BOOL ScDocument::GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab, TypedScStrCollection& rStrings, bool bFilter )
+BOOL ScDocument::GetFilterEntries(
+    SCCOL nCol, SCROW nRow, SCTAB nTab, bool bFilter, TypedScStrCollection& rStrings, bool& rHasDates)
 {
 	if ( ValidTab(nTab) && pTab[nTab] && pDBCollection )
 	{
@@ -1292,11 +1293,11 @@ BOOL ScDocument::GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab, TypedScSt
 
             if ( bFilter )
             {
-                pTab[nTab]->GetFilteredFilterEntries( nCol, nStartRow, nEndRow, aParam, rStrings );
+                pTab[nTab]->GetFilteredFilterEntries( nCol, nStartRow, nEndRow, aParam, rStrings, rHasDates );
             }
             else
             {
-			    pTab[nTab]->GetFilterEntries( nCol, nStartRow, nEndRow, rStrings );
+                pTab[nTab]->GetFilterEntries( nCol, nStartRow, nEndRow, rStrings, rHasDates );
             }
 
 			return TRUE;
@@ -1311,11 +1312,11 @@ BOOL ScDocument::GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab, TypedScSt
 //
 
 BOOL ScDocument::GetFilterEntriesArea( SCCOL nCol, SCROW nStartRow, SCROW nEndRow,
-										SCTAB nTab, TypedScStrCollection& rStrings )
+                                        SCTAB nTab, TypedScStrCollection& rStrings, bool& rHasDates )
 {
 	if ( ValidTab(nTab) && pTab[nTab] )
 	{
-		pTab[nTab]->GetFilterEntries( nCol, nStartRow, nEndRow, rStrings );
+        pTab[nTab]->GetFilterEntries( nCol, nStartRow, nEndRow, rStrings, rHasDates );
 		return TRUE;
 	}
 
diff --git sc/source/core/data/global2.cxx sc/source/core/data/global2.cxx
index 6984b84..e5aaea9 100644
--- sc/source/core/data/global2.cxx
+++ sc/source/core/data/global2.cxx
@@ -145,30 +145,32 @@ BOOL ScImportParam::operator==( const ScImportParam& rOther ) const
 //------------------------------------------------------------------------
 // struct ScQueryParam:
 
-ScQueryEntry::ScQueryEntry()
+ScQueryEntry::ScQueryEntry() :
+    bDoQuery(FALSE),
+    bQueryByString(FALSE),
+    bQueryByDate(false),
+    eOp(SC_EQUAL),
+    eConnect(SC_AND),
+    nField(0),
+    nVal(0.0),
+    pStr(new String),
+    pSearchParam(NULL),
+    pSearchText(NULL)
+{
+}
+
+ScQueryEntry::ScQueryEntry(const ScQueryEntry& r) :
+    bDoQuery(r.bDoQuery),
+    bQueryByString(r.bQueryByString),
+    bQueryByDate(r.bQueryByDate),
+    eOp(r.eOp),
+    eConnect(r.eConnect),
+    nField(r.nField),
+    nVal(r.nVal),
+    pStr(new String(*r.pStr)),
+    pSearchParam(NULL),
+    pSearchText(NULL)
 {
-	bDoQuery		= FALSE;
-	bQueryByString	= FALSE;
-	eOp				= SC_EQUAL;
-	eConnect		= SC_AND;
-	nField			= 0;
-	nVal			= 0.0;
-	pStr			= new String;
-	pSearchParam	= NULL;
-	pSearchText		= NULL;
-}
-
-ScQueryEntry::ScQueryEntry(const ScQueryEntry& r)
-{
-	bDoQuery		= r.bDoQuery;
-	bQueryByString	= r.bQueryByString;
-	eOp				= r.eOp;
-	eConnect		= r.eConnect;
-	nField			= r.nField;
-	nVal			= r.nVal;
-	pStr			= new String(*r.pStr);
-	pSearchParam	= NULL;
-	pSearchText		= NULL;
 }
 
 ScQueryEntry::~ScQueryEntry()
@@ -185,6 +187,7 @@ ScQueryEntry& ScQueryEntry::operator=( const ScQueryEntry& r )
 {
 	bDoQuery		= r.bDoQuery;
 	bQueryByString	= r.bQueryByString;
+    bQueryByDate    = r.bQueryByDate;
 	eOp				= r.eOp;
 	eConnect		= r.eConnect;
 	nField			= r.nField;
@@ -205,6 +208,7 @@ void ScQueryEntry::Clear()
 {
 	bDoQuery		= FALSE;
 	bQueryByString	= FALSE;
+    bQueryByDate    = false;
 	eOp				= SC_EQUAL;
 	eConnect		= SC_AND;
 	nField			= 0;
@@ -223,6 +227,7 @@ BOOL ScQueryEntry::operator==( const ScQueryEntry& r ) const
 {
 	return bDoQuery			== r.bDoQuery
 		&& bQueryByString	== r.bQueryByString
+        && bQueryByDate     == r.bQueryByDate
 		&& eOp				== r.eOp
 		&& eConnect			== r.eConnect
 		&& nField			== r.nField
diff --git sc/source/core/data/table3.cxx sc/source/core/data/table3.cxx
index 8d9d549..3172efb 100644
--- sc/source/core/data/table3.cxx
+++ sc/source/core/data/table3.cxx
@@ -60,6 +60,7 @@
 #include "progress.hxx"
 #include "cellform.hxx"
 #include "postit.hxx"
+#include "svtools/zformat.hxx"
 
 #include <vector>
 
@@ -991,6 +992,20 @@ BOOL ScTable::ValidQuery(SCROW nRow, const ScQueryParam& rParam,
             }
             else
                 nCellVal = GetValue( static_cast<SCCOL>(rEntry.nField), nRow );
+
+            if (rEntry.bQueryByDate)
+            {
+                sal_uInt32 nNumFmt = GetNumberFormat(static_cast<SCCOL>(rEntry.nField), nRow);
+                const SvNumberformat* pEntry = pDocument->GetFormatTable()->GetEntry(nNumFmt);
+                if (pEntry)
+                {
+                    short nNumFmtType = pEntry->GetType();
+                    if ((nNumFmtType & NUMBERFORMAT_DATE) && !(nNumFmtType & NUMBERFORMAT_TIME))
+                        // The format is of date type.  Strip off the time element.
+                        nCellVal = ::rtl::math::approxFloor(nCellVal);
+                }
+            }
+
 			switch (rEntry.eOp)
 			{
 				case SC_EQUAL :
@@ -1778,12 +1793,13 @@ BOOL ScTable::HasRowHeader( SCCOL nStartCol, SCROW nStartRow, SCCOL /* nEndCol *
 	return TRUE;
 }
 
-void ScTable::GetFilterEntries(SCCOL nCol, SCROW nRow1, SCROW nRow2, TypedScStrCollection& rStrings)
+void ScTable::GetFilterEntries(SCCOL nCol, SCROW nRow1, SCROW nRow2, TypedScStrCollection& rStrings, bool& rHasDates)
 {
-	aCol[nCol].GetFilterEntries( nRow1, nRow2, rStrings );
+    aCol[nCol].GetFilterEntries( nRow1, nRow2, rStrings, rHasDates );
 }
 
-void ScTable::GetFilteredFilterEntries( SCCOL nCol, SCROW nRow1, SCROW nRow2, const ScQueryParam& rParam, TypedScStrCollection& rStrings )
+void ScTable::GetFilteredFilterEntries(
+    SCCOL nCol, SCROW nRow1, SCROW nRow2, const ScQueryParam& rParam, TypedScStrCollection& rStrings, bool& rHasDates )
 {
     // remove the entry for this column from the query parameter
     ScQueryParam aParam( rParam );
@@ -1801,15 +1817,18 @@ void ScTable::GetFilteredFilterEntries( SCCOL nCol, SCROW nRow1, SCROW nRow2, co
 
     BOOL* pSpecial = new BOOL[nEntryCount];
     lcl_PrepareQuery( pDocument, this, aParam, pSpecial );
-
+    bool bHasDates = false;
     for ( SCROW j = nRow1; j <= nRow2; ++j )
     {
         if ( ValidQuery( j, aParam, pSpecial ) )
         {
-            aCol[nCol].GetFilterEntries( j, j, rStrings );
+            bool bThisHasDates = false;
+            aCol[nCol].GetFilterEntries( j, j, rStrings, bThisHasDates );
+            bHasDates |= bThisHasDates;
         }
     }
 
+    rHasDates = bHasDates;
     delete[] pSpecial;
 }
 
diff --git sc/source/core/tool/dbcolect.cxx sc/source/core/tool/dbcolect.cxx
index 6d6959a..b6acf14 100644
--- sc/source/core/tool/dbcolect.cxx
+++ sc/source/core/tool/dbcolect.cxx
@@ -157,6 +157,7 @@ ScDBData::ScDBData( const ScDBData& rData ) :
 		nQueryField[i]		= rData.nQueryField[i];
 		eQueryOp[i]			= rData.eQueryOp[i];
 		bQueryByString[i]	= rData.bQueryByString[i];
+        bQueryByDate[i]     = rData.bQueryByDate[i];
 		pQueryStr[i]		= new String( *(rData.pQueryStr[i]) );
 		nQueryVal[i]		= rData.nQueryVal[i];
 		eQueryConnect[i]	= rData.eQueryConnect[i];
@@ -246,6 +247,7 @@ ScDBData& ScDBData::operator= (const ScDBData& rData)
 		nQueryField[i]		= rData.nQueryField[i];
 		eQueryOp[i]			= rData.eQueryOp[i];
 		bQueryByString[i]	= rData.bQueryByString[i];
+        bQueryByDate[i]     = rData.bQueryByDate[i];
 		*pQueryStr[i]		= *rData.pQueryStr[i];
 		nQueryVal[i]		= rData.nQueryVal[i];
 		eQueryConnect[i]	= rData.eQueryConnect[i];
@@ -514,6 +516,7 @@ void ScDBData::GetQueryParam( ScQueryParam& rQueryParam ) const
 		rEntry.nField = nQueryField[i];
 		rEntry.eOp = eQueryOp[i];
 		rEntry.bQueryByString = bQueryByString[i];
+        rEntry.bQueryByDate = bQueryByDate[i];
 		*rEntry.pStr = *pQueryStr[i];
 		rEntry.nVal = nQueryVal[i];
 		rEntry.eConnect = eQueryConnect[i];
@@ -545,6 +548,7 @@ void ScDBData::SetQueryParam(const ScQueryParam& rQueryParam)
 		nQueryField[i] = rEntry.nField;
 		eQueryOp[i] = rEntry.eOp;
 		bQueryByString[i] = rEntry.bQueryByString;
+        bQueryByDate[i] = rEntry.bQueryByDate;
 		*pQueryStr[i] = *rEntry.pStr;
 		nQueryVal[i] = rEntry.nVal;
 		eQueryConnect[i] = rEntry.eConnect;
diff --git sc/source/ui/dbgui/filtdlg.cxx sc/source/ui/dbgui/filtdlg.cxx
index 33a7c47..c05b1be 100644
--- sc/source/ui/dbgui/filtdlg.cxx
+++ sc/source/ui/dbgui/filtdlg.cxx
@@ -454,21 +454,23 @@ void ScFilterDlg::UpdateValueList( USHORT nList )
 				SCTAB nTab		 = nSrcTab;
 				SCROW nFirstRow = theQueryData.nRow1;
 				SCROW nLastRow	 = theQueryData.nRow2;
+                mbHasDates[nList-1] = false;
 
 				//	erstmal ohne die erste Zeile
 
 				pEntryLists[nColumn] = new TypedScStrCollection( 128, 128 );
 				pEntryLists[nColumn]->SetCaseSensitive( aBtnCase.IsChecked() );
 				pDoc->GetFilterEntriesArea( nColumn, nFirstRow+1, nLastRow,
-											nTab, *pEntryLists[nColumn] );
+                                            nTab, *pEntryLists[nColumn], mbHasDates[nList-1] );
 
 				//	Eintrag fuer die erste Zeile
 				//!	Eintrag (pHdrEntry) ohne Collection erzeugen?
 
 				nHeaderPos[nColumn] = USHRT_MAX;
 				TypedScStrCollection aHdrColl( 1, 1 );
+                bool bDummy = false;
 				pDoc->GetFilterEntriesArea( nColumn, nFirstRow, nFirstRow,
-											nTab, aHdrColl );
+                                            nTab, aHdrColl, bDummy );
 				TypedStrData* pHdrEntry = aHdrColl[0];
 				if ( pHdrEntry )
 				{
@@ -1065,6 +1067,7 @@ IMPL_LINK( ScFilterDlg, ValModifyHdl, ComboBox*, pEd )
 		   
 			ScQueryOp eOp  = (ScQueryOp)pLbCond->GetSelectEntryPos();
 		   rEntry.eOp	  = eOp;
+           rEntry.bQueryByDate = mbHasDates[nQE];
 
 		}
 	}		
diff --git sc/source/ui/dbgui/pfiltdlg.cxx sc/source/ui/dbgui/pfiltdlg.cxx
index 13aba33..c78a5e8 100644
--- sc/source/ui/dbgui/pfiltdlg.cxx
+++ sc/source/ui/dbgui/pfiltdlg.cxx
@@ -352,11 +352,12 @@ void ScPivotFilterDlg::UpdateValueList( USHORT nList )
 				SCROW	nFirstRow	= theQueryData.nRow1;
 				SCROW	nLastRow	= theQueryData.nRow2;
 				nFirstRow++;
+                bool bHasDates = false;
 
 				pEntryLists[nColumn] = new TypedScStrCollection( 128, 128 );
 				pEntryLists[nColumn]->SetCaseSensitive( aBtnCase.IsChecked() );
 				pDoc->GetFilterEntriesArea( nColumn, nFirstRow, nLastRow,
-											nTab, *pEntryLists[nColumn] );
+                                            nTab, *pEntryLists[nColumn], bHasDates );
 			}
 
 			TypedScStrCollection* pColl = pEntryLists[nColumn];
diff --git sc/source/ui/inc/filtdlg.hxx sc/source/ui/inc/filtdlg.hxx
index 77ec11e..aecae0f 100644
--- sc/source/ui/inc/filtdlg.hxx
+++ sc/source/ui/inc/filtdlg.hxx
@@ -167,6 +167,7 @@ private:
 	ListBox*			aFieldLbArr[4];
 	ListBox*			aCondLbArr[4];
 	ListBox*			aConnLbArr[4];
+    bool                mbHasDates[MAXQUERY];
 	BOOL                bRefreshExceptQuery[MAXQUERY];
 	USHORT				nFieldCount;
 	BOOL				bRefInputMode;
diff --git sc/source/ui/inc/gridwin.hxx sc/source/ui/inc/gridwin.hxx
index 96e304f..1e05116 100644
--- sc/source/ui/inc/gridwin.hxx
+++ sc/source/ui/inc/gridwin.hxx
@@ -218,7 +218,7 @@ private:
 
 	BOOL 			IsAutoFilterActive( SCCOL nCol, SCROW nRow, SCTAB nTab );
 	void			ExecFilter( ULONG nSel, SCCOL nCol, SCROW nRow,
-								const String& aValue );
+                                const String& aValue, bool bCheckForDates );
 	void			FilterSelect( ULONG nSel );
 
 	void			ExecDataSelect( SCCOL nCol, SCROW nRow, const String& rStr );
diff --git sc/source/ui/view/gridwin.cxx sc/source/ui/view/gridwin.cxx
index ca560e4..20ff069 100644
--- sc/source/ui/view/gridwin.cxx
+++ sc/source/ui/view/gridwin.cxx
@@ -168,6 +168,7 @@ private:
 	BOOL			bInit;
 	BOOL			bCancelled;
     BOOL            bInSelect;
+    bool            mbListHasDates;
 	ULONG			nSel;
 	ScFilterBoxMode	eMode;
 
@@ -191,6 +192,8 @@ public:
     BOOL            IsInInit() const        { return bInit; }
 	void			SetCancelled()			{ bCancelled = TRUE; }
     BOOL            IsInSelect() const      { return bInSelect; }
+    void            SetListHasDates(bool b) { mbListHasDates = b; }
+    bool            HasDates() const        { return mbListHasDates; }
 };
 
 //-------------------------------------------------------------------
@@ -206,6 +209,7 @@ ScFilterListBox::ScFilterListBox( Window* pParent, ScGridWindow* pGrid,
 	bInit( TRUE ),
 	bCancelled( FALSE ),
     bInSelect( FALSE ),
+    mbListHasDates(false),
 	nSel( 0 ),
 	eMode( eNewMode )
 {
@@ -910,7 +914,9 @@ void ScGridWindow::DoAutoFilterMenue( SCCOL nCol, SCROW nRow, BOOL bDataSelect )
         pFilterBox->SetSeparatorPos( nDefCount - 1 );
 
 		//	get list entries
-        pDoc->GetFilterEntries( nCol, nRow, nTab, aStrings, true );
+        bool bHasDates = false;
+        pDoc->GetFilterEntries( nCol, nRow, nTab, true, aStrings, bHasDates);
+        pFilterBox->SetListHasDates(bHasDates);
 
 		//	check widths of numerical entries (string entries are not included)
 		//	so all numbers are completely visible
@@ -1120,7 +1126,7 @@ void ScGridWindow::FilterSelect( ULONG nSel )
 			ExecDataSelect( nCol, nRow, aString );
 			break;
 		case SC_FILTERBOX_FILTER:
-			ExecFilter( nSel, nCol, nRow, aString );
+            ExecFilter( nSel, nCol, nRow, aString, pFilterBox->HasDates() );
 			break;
 		case SC_FILTERBOX_SCENARIO:
 			pViewData->GetView()->UseScenario( aString );
@@ -1153,7 +1159,7 @@ void ScGridWindow::ExecDataSelect( SCCOL nCol, SCROW nRow, const String& rStr )
 
 void ScGridWindow::ExecFilter( ULONG nSel,
 							   SCCOL nCol, SCROW nRow,
-							   const String& aValue )
+                               const String& aValue, bool bCheckForDates )
 {
 	SCTAB nTab = pViewData->GetTabNo();
 	ScDocument* pDoc = pViewData->GetDocument();
@@ -1225,6 +1231,7 @@ void ScGridWindow::ExecFilter( ULONG nSel,
 					rNewEntry.bDoQuery		 = TRUE;
 					rNewEntry.bQueryByString = TRUE;
 					rNewEntry.nField		 = nCol;
+                    rNewEntry.bQueryByDate   = bCheckForDates;
 					if ( nSel == SC_AUTOFILTER_TOP10 )
 					{
 						rNewEntry.eOp	= SC_TOPVAL;
