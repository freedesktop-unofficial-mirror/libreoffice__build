diff --git sc/inc/column.hxx sc/inc/column.hxx
index ff0c25f..c39ae25 100644
--- sc/inc/column.hxx
+++ sc/inc/column.hxx
@@ -379,7 +379,7 @@ public:
                 /// Including current, may return -1
     SCsROW		GetNextUnprotected( SCROW nRow, BOOL bUp ) const;
 
-    void		GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollection& rStrings);
+    void		GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollection& rStrings, bool& rHasDates);
     BOOL		GetDataEntries(SCROW nRow, TypedScStrCollection& rStrings, BOOL bLimit);
 
 //UNUSED2008-05  SCROW		NoteCount( SCROW nMaxRow = MAXROW ) const;
diff --git sc/inc/dbcolect.hxx sc/inc/dbcolect.hxx
index dd18ba2..73b4c3e 100644
--- sc/inc/dbcolect.hxx
+++ sc/inc/dbcolect.hxx
@@ -90,6 +90,7 @@ private:
     SCCOLROW		nQueryField[MAXQUERY];
     ScQueryOp		eQueryOp[MAXQUERY];
     BOOL			bQueryByString[MAXQUERY];
+    bool            bQueryByDate[MAXQUERY];
     String*			pQueryStr[MAXQUERY];
     double			nQueryVal[MAXQUERY];
     ScQueryConnect  eQueryConnect[MAXQUERY];
diff --git sc/inc/document.hxx sc/inc/document.hxx
index bf96edb..ed4c76c 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -1365,9 +1365,9 @@ public:
     void 			GetUpperCellString(SCCOL nCol, SCROW nRow, SCTAB nTab, String& rStr);
 
     BOOL			GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab,
-                                TypedScStrCollection& rStrings, bool bFilter = false );
+                                bool bFilter, TypedScStrCollection& rStrings, bool& rHasDates);
     SC_DLLPUBLIC BOOL			GetFilterEntriesArea( SCCOL nCol, SCROW nStartRow, SCROW nEndRow,
-                                SCTAB nTab, TypedScStrCollection& rStrings );
+                                SCTAB nTab, TypedScStrCollection& rStrings, bool& rHasDates );
     BOOL			GetDataEntries( SCCOL nCol, SCROW nRow, SCTAB nTab,
                                 TypedScStrCollection& rStrings, BOOL bLimit = FALSE );
     BOOL			GetFormulaEntries( TypedScStrCollection& rStrings );
diff --git sc/inc/global.hxx sc/inc/global.hxx
index 173175c..4892a3e 100644
--- sc/inc/global.hxx
+++ sc/inc/global.hxx
@@ -797,6 +797,7 @@ struct ScQueryEntry
 {
     BOOL			bDoQuery;
     BOOL			bQueryByString;
+    bool            bQueryByDate;
     SCCOLROW		nField;
     ScQueryOp		eOp;
     ScQueryConnect  eConnect;
diff --git sc/inc/table.hxx sc/inc/table.hxx
index 42e94e8..74fa999 100644
--- sc/inc/table.hxx
+++ sc/inc/table.hxx
@@ -598,8 +598,8 @@ public:
     SCSIZE		Query(ScQueryParam& rQueryParam, BOOL bKeepSub);
     BOOL		CreateQueryParam(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2, ScQueryParam& rQueryParam);
 
-    void		GetFilterEntries(SCCOL nCol, SCROW nRow1, SCROW nRow2, TypedScStrCollection& rStrings);
-    void        GetFilteredFilterEntries( SCCOL nCol, SCROW nRow1, SCROW nRow2, const ScQueryParam& rParam, TypedScStrCollection& rStrings );
+    void        GetFilterEntries(SCCOL nCol, SCROW nRow1, SCROW nRow2, TypedScStrCollection& rStrings, bool& rHasDates);
+    void        GetFilteredFilterEntries( SCCOL nCol, SCROW nRow1, SCROW nRow2, const ScQueryParam& rParam, TypedScStrCollection& rStrings, bool& rHasDates );
     BOOL		GetDataEntries(SCCOL nCol, SCROW nRow, TypedScStrCollection& rStrings, BOOL bLimit);
 
     BOOL		HasColHeader( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow );
diff --git sc/source/core/data/column3.cxx sc/source/core/data/column3.cxx
index 1a55c3d..38533c6 100644
--- sc/source/core/data/column3.cxx
+++ sc/source/core/data/column3.cxx
@@ -1381,8 +1381,9 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
 }
 
 
-void ScColumn::GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollection& rStrings)
+void ScColumn::GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollection& rStrings, bool& rHasDates)
 {
+    bool bHasDates = false;
     SvNumberFormatter* pFormatter = pDocument->GetFormatTable();
     String aString;
     SCROW nRow = 0;
@@ -1418,6 +1419,18 @@ void ScColumn::GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollec
                     nValue = 0.0;
             }
 
+            if (pFormatter)
+            {
+                short nType = pFormatter->GetType(nFormat);
+                if ((nType & NUMBERFORMAT_DATE) && !(nType & NUMBERFORMAT_TIME))
+                {    
+                    // special case for date values.  Disregard the time
+                    // element if the number format is of date type.
+                    nValue = ::rtl::math::approxFloor(nValue);
+                    bHasDates = true;
+                }
+            }
+
             pData = new TypedStrData( aString, nValue, SC_STRTYPE_VALUE );
         }
 #if 0 // DR
@@ -1436,6 +1449,8 @@ void ScColumn::GetFilterEntries(SCROW nStartRow, SCROW nEndRow, TypedScStrCollec
 
         ++nIndex;
     }
+
+    rHasDates = bHasDates;
 }
 
 //
diff --git sc/source/core/data/documen3.cxx sc/source/core/data/documen3.cxx
index f633dbc..79022cf 100644
--- sc/source/core/data/documen3.cxx
+++ sc/source/core/data/documen3.cxx
@@ -1294,7 +1294,8 @@ BOOL ScDocument::HasRowHeader( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol,
 //	GetFilterEntries - Eintraege fuer AutoFilter-Listbox
 //
 
-BOOL ScDocument::GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab, TypedScStrCollection& rStrings, bool bFilter )
+BOOL ScDocument::GetFilterEntries(
+    SCCOL nCol, SCROW nRow, SCTAB nTab, bool bFilter, TypedScStrCollection& rStrings, bool& rHasDates)
 {
     if ( ValidTab(nTab) && pTab[nTab] && pDBCollection )
     {
@@ -1331,11 +1332,11 @@ BOOL ScDocument::GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab, TypedScSt
 
             if ( bFilter )
             {
-                pTab[nTab]->GetFilteredFilterEntries( nCol, nStartRow, nEndRow, aParam, rStrings );
+                pTab[nTab]->GetFilteredFilterEntries( nCol, nStartRow, nEndRow, aParam, rStrings, rHasDates );
             }
             else
             {
-                pTab[nTab]->GetFilterEntries( nCol, nStartRow, nEndRow, rStrings );
+                pTab[nTab]->GetFilterEntries( nCol, nStartRow, nEndRow, rStrings, rHasDates );
             }
 
             return TRUE;
@@ -1350,11 +1351,11 @@ BOOL ScDocument::GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab, TypedScSt
 //
 
 BOOL ScDocument::GetFilterEntriesArea( SCCOL nCol, SCROW nStartRow, SCROW nEndRow,
-                                        SCTAB nTab, TypedScStrCollection& rStrings )
+                                        SCTAB nTab, TypedScStrCollection& rStrings, bool& rHasDates )
 {
     if ( ValidTab(nTab) && pTab[nTab] )
     {
-        pTab[nTab]->GetFilterEntries( nCol, nStartRow, nEndRow, rStrings );
+        pTab[nTab]->GetFilterEntries( nCol, nStartRow, nEndRow, rStrings, rHasDates );
         return TRUE;
     }
 
diff --git sc/source/core/data/global2.cxx sc/source/core/data/global2.cxx
index 70beb27..3b0d0f6 100644
--- sc/source/core/data/global2.cxx
+++ sc/source/core/data/global2.cxx
@@ -144,30 +144,32 @@ BOOL ScImportParam::operator==( const ScImportParam& rOther ) const
 //------------------------------------------------------------------------
 // struct ScQueryParam:
 
-ScQueryEntry::ScQueryEntry()
+ScQueryEntry::ScQueryEntry() :
+    bDoQuery(FALSE),
+    bQueryByString(FALSE),
+    bQueryByDate(false),
+    eOp(SC_EQUAL),
+    eConnect(SC_AND),
+    nField(0),
+    nVal(0.0),
+    pStr(new String),
+    pSearchParam(NULL),
+    pSearchText(NULL)
+{
+}
+
+ScQueryEntry::ScQueryEntry(const ScQueryEntry& r) :
+    bDoQuery(r.bDoQuery),
+    bQueryByString(r.bQueryByString),
+    bQueryByDate(r.bQueryByDate),
+    eOp(r.eOp),
+    eConnect(r.eConnect),
+    nField(r.nField),
+    nVal(r.nVal),
+    pStr(new String(*r.pStr)),
+    pSearchParam(NULL),
+    pSearchText(NULL)
 {
-    bDoQuery		= FALSE;
-    bQueryByString	= FALSE;
-    eOp				= SC_EQUAL;
-    eConnect		= SC_AND;
-    nField			= 0;
-    nVal			= 0.0;
-    pStr			= new String;
-    pSearchParam	= NULL;
-    pSearchText		= NULL;
-}
-
-ScQueryEntry::ScQueryEntry(const ScQueryEntry& r)
-{
-    bDoQuery		= r.bDoQuery;
-    bQueryByString	= r.bQueryByString;
-    eOp				= r.eOp;
-    eConnect		= r.eConnect;
-    nField			= r.nField;
-    nVal			= r.nVal;
-    pStr			= new String(*r.pStr);
-    pSearchParam	= NULL;
-    pSearchText		= NULL;
 }
 
 ScQueryEntry::~ScQueryEntry()
@@ -184,6 +186,7 @@ ScQueryEntry& ScQueryEntry::operator=( const ScQueryEntry& r )
 {
     bDoQuery		= r.bDoQuery;
     bQueryByString	= r.bQueryByString;
+    bQueryByDate    = r.bQueryByDate;
     eOp				= r.eOp;
     eConnect		= r.eConnect;
     nField			= r.nField;
@@ -204,6 +207,7 @@ void ScQueryEntry::Clear()
 {
     bDoQuery		= FALSE;
     bQueryByString	= FALSE;
+    bQueryByDate    = false;
     eOp				= SC_EQUAL;
     eConnect		= SC_AND;
     nField			= 0;
@@ -222,6 +226,7 @@ BOOL ScQueryEntry::operator==( const ScQueryEntry& r ) const
 {
     return bDoQuery			== r.bDoQuery
         && bQueryByString	== r.bQueryByString
+        && bQueryByDate     == r.bQueryByDate
         && eOp				== r.eOp
         && eConnect			== r.eConnect
         && nField			== r.nField
diff --git sc/source/core/data/table3.cxx sc/source/core/data/table3.cxx
index a44c7fd..fc5a6da 100644
--- sc/source/core/data/table3.cxx
+++ sc/source/core/data/table3.cxx
@@ -61,6 +61,7 @@
 #include "progress.hxx"
 #include "cellform.hxx"
 #include "postit.hxx"
+#include "svtools/zformat.hxx"
 
 #include <vector>
 
@@ -1166,6 +1167,20 @@ BOOL ScTable::ValidQuery(SCROW nRow, const ScQueryParam& rParam,
             }
             else
                 nCellVal = GetValue( static_cast<SCCOL>(rEntry.nField), nRow );
+
+            if (rEntry.bQueryByDate)
+            {
+                sal_uInt32 nNumFmt = GetNumberFormat(static_cast<SCCOL>(rEntry.nField), nRow);
+                const SvNumberformat* pEntry = pDocument->GetFormatTable()->GetEntry(nNumFmt);
+                if (pEntry)
+                {
+                    short nNumFmtType = pEntry->GetType();
+                    if ((nNumFmtType & NUMBERFORMAT_DATE) && !(nNumFmtType & NUMBERFORMAT_TIME))
+                        // The format is of date type.  Strip off the time element.
+                        nCellVal = ::rtl::math::approxFloor(nCellVal);
+                }
+            }
+
             switch (rEntry.eOp)
             {
                 case SC_EQUAL :
@@ -1888,12 +1903,13 @@ BOOL ScTable::HasRowHeader( SCCOL nStartCol, SCROW nStartRow, SCCOL /* nEndCol *
     return TRUE;
 }
 
-void ScTable::GetFilterEntries(SCCOL nCol, SCROW nRow1, SCROW nRow2, TypedScStrCollection& rStrings)
+void ScTable::GetFilterEntries(SCCOL nCol, SCROW nRow1, SCROW nRow2, TypedScStrCollection& rStrings, bool& rHasDates)
 {
-    aCol[nCol].GetFilterEntries( nRow1, nRow2, rStrings );
+    aCol[nCol].GetFilterEntries( nRow1, nRow2, rStrings, rHasDates );
 }
 
-void ScTable::GetFilteredFilterEntries( SCCOL nCol, SCROW nRow1, SCROW nRow2, const ScQueryParam& rParam, TypedScStrCollection& rStrings )
+void ScTable::GetFilteredFilterEntries(
+    SCCOL nCol, SCROW nRow1, SCROW nRow2, const ScQueryParam& rParam, TypedScStrCollection& rStrings, bool& rHasDates )
 {
     // remove the entry for this column from the query parameter
     ScQueryParam aParam( rParam );
@@ -1911,15 +1927,18 @@ void ScTable::GetFilteredFilterEntries( SCCOL nCol, SCROW nRow1, SCROW nRow2, co
 
     BOOL* pSpecial = new BOOL[nEntryCount];
     lcl_PrepareQuery( pDocument, this, aParam, pSpecial );
-
+    bool bHasDates = false;
     for ( SCROW j = nRow1; j <= nRow2; ++j )
     {
         if ( ValidQuery( j, aParam, pSpecial ) )
         {
-            aCol[nCol].GetFilterEntries( j, j, rStrings );
+            bool bThisHasDates = false;
+            aCol[nCol].GetFilterEntries( j, j, rStrings, bThisHasDates );
+            bHasDates |= bThisHasDates;
         }
     }
 
+    rHasDates = bHasDates;
     delete[] pSpecial;
 }
 
diff --git sc/source/core/tool/dbcolect.cxx sc/source/core/tool/dbcolect.cxx
index ee42a4e..1304c49 100644
--- sc/source/core/tool/dbcolect.cxx
+++ sc/source/core/tool/dbcolect.cxx
@@ -158,6 +158,7 @@ ScDBData::ScDBData( const ScDBData& rData ) :
         nQueryField[i]		= rData.nQueryField[i];
         eQueryOp[i]			= rData.eQueryOp[i];
         bQueryByString[i]	= rData.bQueryByString[i];
+        bQueryByDate[i]     = rData.bQueryByDate[i];
         pQueryStr[i]		= new String( *(rData.pQueryStr[i]) );
         nQueryVal[i]		= rData.nQueryVal[i];
         eQueryConnect[i]	= rData.eQueryConnect[i];
@@ -248,6 +249,7 @@ ScDBData& ScDBData::operator= (const ScDBData& rData)
         nQueryField[i]		= rData.nQueryField[i];
         eQueryOp[i]			= rData.eQueryOp[i];
         bQueryByString[i]	= rData.bQueryByString[i];
+        bQueryByDate[i]     = rData.bQueryByDate[i];
         *pQueryStr[i]		= *rData.pQueryStr[i];
         nQueryVal[i]		= rData.nQueryVal[i];
         eQueryConnect[i]	= rData.eQueryConnect[i];
@@ -518,6 +520,7 @@ void ScDBData::GetQueryParam( ScQueryParam& rQueryParam ) const
         rEntry.nField = nQueryField[i];
         rEntry.eOp = eQueryOp[i];
         rEntry.bQueryByString = bQueryByString[i];
+        rEntry.bQueryByDate = bQueryByDate[i];
         *rEntry.pStr = *pQueryStr[i];
         rEntry.nVal = nQueryVal[i];
         rEntry.eConnect = eQueryConnect[i];
@@ -549,6 +552,7 @@ void ScDBData::SetQueryParam(const ScQueryParam& rQueryParam)
         nQueryField[i] = rEntry.nField;
         eQueryOp[i] = rEntry.eOp;
         bQueryByString[i] = rEntry.bQueryByString;
+        bQueryByDate[i] = rEntry.bQueryByDate;
         *pQueryStr[i] = *rEntry.pStr;
         nQueryVal[i] = rEntry.nVal;
         eQueryConnect[i] = rEntry.eConnect;
diff --git sc/source/ui/dbgui/filtdlg.cxx sc/source/ui/dbgui/filtdlg.cxx
index b028879..846cbad 100644
--- sc/source/ui/dbgui/filtdlg.cxx
+++ sc/source/ui/dbgui/filtdlg.cxx
@@ -391,21 +391,23 @@ void ScFilterDlg::UpdateValueList( USHORT nList )
                 SCTAB nTab		 = nSrcTab;
                 SCROW nFirstRow = theQueryData.nRow1;
 				SCROW nLastRow	 = theQueryData.nRow2;
+                mbHasDates[nList-1] = false;
 
                 //	erstmal ohne die erste Zeile
 
                 pEntryLists[nColumn] = new TypedScStrCollection( 128, 128 );
                 pEntryLists[nColumn]->SetCaseSensitive( aBtnCase.IsChecked() );
                 pDoc->GetFilterEntriesArea( nColumn, nFirstRow+1, nLastRow,
-                                            nTab, *pEntryLists[nColumn] );
+                                            nTab, *pEntryLists[nColumn], mbHasDates[nList-1] );
 
                 //	Eintrag fuer die erste Zeile
                 //!	Eintrag (pHdrEntry) ohne Collection erzeugen?
 
                 nHeaderPos[nColumn] = USHRT_MAX;
                 TypedScStrCollection aHdrColl( 1, 1 );
+                bool bDummy = false;
                 pDoc->GetFilterEntriesArea( nColumn, nFirstRow, nFirstRow,
-                                            nTab, aHdrColl );
+                                            nTab, aHdrColl, bDummy );
                 TypedStrData* pHdrEntry = aHdrColl[0];
                 if ( pHdrEntry )
                 {
@@ -547,6 +549,7 @@ ScQueryItem* ScFilterDlg::GetOutputItem()
         if ( bDoThis )
         {
             ScQueryEntry& rEntry = theParam.GetEntry(i);
+            rEntry.bQueryByDate = mbHasDates[i];
 
             String aStrVal( aValueEdArr[i]->GetText() );
 
diff --git sc/source/ui/dbgui/pfiltdlg.cxx sc/source/ui/dbgui/pfiltdlg.cxx
index 35bfc35..42c2c26 100644
--- sc/source/ui/dbgui/pfiltdlg.cxx
+++ sc/source/ui/dbgui/pfiltdlg.cxx
@@ -352,11 +352,12 @@ void ScPivotFilterDlg::UpdateValueList( USHORT nList )
                 SCROW	nFirstRow	= theQueryData.nRow1;
                 SCROW	nLastRow	= theQueryData.nRow2;
                 nFirstRow++;
+                bool bHasDates = false;
 
                 pEntryLists[nColumn] = new TypedScStrCollection( 128, 128 );
                 pEntryLists[nColumn]->SetCaseSensitive( aBtnCase.IsChecked() );
                 pDoc->GetFilterEntriesArea( nColumn, nFirstRow, nLastRow,
-                                            nTab, *pEntryLists[nColumn] );
+                                            nTab, *pEntryLists[nColumn], bHasDates );
             }
 
             TypedScStrCollection* pColl = pEntryLists[nColumn];
diff --git sc/source/ui/inc/filtdlg.hxx sc/source/ui/inc/filtdlg.hxx
index 62f68e8..c901ef3 100644
--- sc/source/ui/inc/filtdlg.hxx
+++ sc/source/ui/inc/filtdlg.hxx
@@ -158,6 +158,7 @@ private:
     ComboBox*			aValueEdArr[3];
     ListBox*			aFieldLbArr[3];
     ListBox*			aCondLbArr[3];
+    bool                mbHasDates[3];
     USHORT				nFieldCount;
     BOOL				bRefInputMode;
 
diff --git sc/source/ui/inc/gridwin.hxx sc/source/ui/inc/gridwin.hxx
index 4664398..f9d9eaa 100644
--- sc/source/ui/inc/gridwin.hxx
+++ sc/source/ui/inc/gridwin.hxx
@@ -254,7 +254,7 @@ private:
 
     BOOL 			IsAutoFilterActive( SCCOL nCol, SCROW nRow, SCTAB nTab );
     void			ExecFilter( ULONG nSel, SCCOL nCol, SCROW nRow,
-                                const String& aValue );
+                                const String& aValue, bool bCheckForDates );
     void			FilterSelect( ULONG nSel );
 
     void			ExecDataSelect( SCCOL nCol, SCROW nRow, const String& rStr );
diff --git sc/source/ui/view/gridwin.cxx sc/source/ui/view/gridwin.cxx
index b28ce3f..439f98d 100644
--- sc/source/ui/view/gridwin.cxx
+++ sc/source/ui/view/gridwin.cxx
@@ -171,6 +171,7 @@ private:
     BOOL			bInit;
     BOOL			bCancelled;
     BOOL            bInSelect;
+    bool            mbListHasDates;
     ULONG			nSel;
     ScFilterBoxMode	eMode;
 
@@ -194,6 +195,8 @@ public:
     BOOL            IsInInit() const        { return bInit; }
     void			SetCancelled()			{ bCancelled = TRUE; }
     BOOL            IsInSelect() const      { return bInSelect; }
+    void            SetListHasDates(bool b) { mbListHasDates = b; }
+    bool            HasDates() const        { return mbListHasDates; }
 };
 
 //-------------------------------------------------------------------
@@ -209,6 +212,7 @@ ScFilterListBox::ScFilterListBox( Window* pParent, ScGridWindow* pGrid,
     bInit( TRUE ),
     bCancelled( FALSE ),
     bInSelect( FALSE ),
+    mbListHasDates(false),
     nSel( 0 ),
     eMode( eNewMode )
 {
@@ -888,7 +892,9 @@ void ScGridWindow::DoAutoFilterMenue( SCCOL nCol, SCROW nRow, BOOL bDataSelect )
         pFilterBox->SetSeparatorPos( nDefCount - 1 );
 
         //	get list entries
-        pDoc->GetFilterEntries( nCol, nRow, nTab, aStrings, true );
+        bool bHasDates = false;
+        pDoc->GetFilterEntries( nCol, nRow, nTab, true, aStrings, bHasDates);
+        pFilterBox->SetListHasDates(bHasDates);
 
         //	check widths of numerical entries (string entries are not included)
         //	so all numbers are completely visible
@@ -1052,7 +1058,7 @@ void ScGridWindow::FilterSelect( ULONG nSel )
             ExecDataSelect( nCol, nRow, aString );
             break;
         case SC_FILTERBOX_FILTER:
-            ExecFilter( nSel, nCol, nRow, aString );
+            ExecFilter( nSel, nCol, nRow, aString, pFilterBox->HasDates() );
             break;
         case SC_FILTERBOX_SCENARIO:
             pViewData->GetView()->UseScenario( aString );
@@ -1085,7 +1091,7 @@ void ScGridWindow::ExecDataSelect( SCCOL nCol, SCROW nRow, const String& rStr )
 
 void ScGridWindow::ExecFilter( ULONG nSel,
                                SCCOL nCol, SCROW nRow,
-                               const String& aValue )
+                               const String& aValue, bool bCheckForDates )
 {
     SCTAB nTab = pViewData->GetTabNo();
     ScDocument* pDoc = pViewData->GetDocument();
@@ -1150,6 +1156,7 @@ void ScGridWindow::ExecFilter( ULONG nSel,
                     rNewEntry.bDoQuery		 = TRUE;
                     rNewEntry.bQueryByString = TRUE;
                     rNewEntry.nField		 = nCol;
+                    rNewEntry.bQueryByDate   = bCheckForDates;
                     if ( nSel == SC_AUTOFILTER_TOP10 )
                     {
                         rNewEntry.eOp	= SC_TOPVAL;
