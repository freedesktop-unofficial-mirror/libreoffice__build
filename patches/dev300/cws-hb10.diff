Index: sw/source/filter/ww8/WW8FFData.cxx
===================================================================
RCS file: sw/source/filter/ww8/WW8FFData.cxx
diff -N sw/source/filter/ww8/WW8FFData.cxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sw/source/filter/ww8/WW8FFData.cxx	23 Jul 2008 12:59:14 -0000	1.1.2.3
@@ -0,0 +1,175 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "WW8FFData.hxx"
+#include <tools/stream.hxx>
+#include <doc.hxx>
+#include "writerwordglue.hxx"
+#include "wrtww8.hxx"
+
+namespace sw 
+{
+
+using sw::types::msword_cast;
+
+WW8FFData::WW8FFData()
+    : 
+    mnType(0),
+    mnResult(0),
+    mbOwnHelp(false),
+    mbOwnStat(false),
+    mbProtected(false),
+    mbSize(false),
+    mnTextType(0),
+    mbRecalc(false),
+    mbListBox(false),
+    mnMaxLen(0),
+    mnCheckboxHeight(0),
+    mnDefault(0)
+{
+}
+
+WW8FFData::~WW8FFData()
+{
+}
+
+void WW8FFData::setHelp(const ::rtl::OUString & rHelp)
+{
+    msHelp = rHelp;
+    mbOwnHelp = true;
+}
+    
+void WW8FFData::setStatus(const ::rtl::OUString & rStatus)
+{
+    msStatus = rStatus;
+    mbOwnStat = true;
+}
+
+void WW8FFData::addListboxEntry(const ::rtl::OUString & rEntry)
+{
+    mbListBox = true;
+    msListEntries.push_back(rEntry);
+}
+
+void WW8FFData::WriteOUString(SvStream * pDataStrm, const ::rtl::OUString & rStr,
+    bool bAddZero)
+{
+    sal_uInt16 nStrLen = msword_cast<sal_uInt16>(rStr.getLength());
+    *pDataStrm << nStrLen;
+    SwWW8Writer::WriteString16(*pDataStrm, rStr, bAddZero);    
+}
+
+void WW8FFData::Write(SvStream * pDataStrm)
+{
+    ULONG nDataStt = pDataStrm->Tell();
+    
+    static const sal_uInt8 aHeader[] =
+    {
+        0,0,0,0,        // len of struct
+        0x44,0,         // the start of "next" data
+        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // PIC
+        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+        0,0,0,0,0,0,0,0,0,0,0,0,0,0
+    };
+
+    pDataStrm->Write( aHeader, sizeof(aHeader) );
+
+    sal_uInt8 aData[10] = {
+        0xff, 0xff, 0xff, 0xff,
+        0x0, 0x0, 0x0, 0x0, 0x0, 0x0
+    };
+    
+    aData[4] = mnType | (mnResult << 2);
+    
+    if (mbOwnHelp)
+        aData[4] |= (1 << 7);
+        
+    aData[5] = (mnTextType << 3);
+
+    if (mbOwnStat)
+        aData[5] |= 1;
+        
+    if (mbProtected)
+        aData[5] |= (1 << 1);
+            
+    if (mbSize)
+        aData[5] |= (1 << 2);
+    
+    if (mbRecalc)
+        aData[5] |= (1 << 6);
+    
+    if (mbListBox)
+        aData[5] |= (1 << 7);
+            
+    aData[6] = ::sal::static_int_cast<sal_uInt8>(mnMaxLen & 0xffff);
+    aData[7] = ::sal::static_int_cast<sal_uInt8>(mnMaxLen >> 8);
+    aData[8] = ::sal::static_int_cast<sal_uInt8>(mnCheckboxHeight & 0xffff);
+    aData[9] = ::sal::static_int_cast<sal_uInt8>(mnCheckboxHeight >> 8);
+    
+    pDataStrm->Write(aData, sizeof(aData));
+    
+    WriteOUString(pDataStrm, msName, true);
+    
+    if (mnType == 0)
+        WriteOUString(pDataStrm, msDefault, true);
+    else
+        *pDataStrm << mnDefault;
+    
+    WriteOUString(pDataStrm, msFormat, true);
+    WriteOUString(pDataStrm, msHelp, true);
+    WriteOUString(pDataStrm, msStatus, true);
+    WriteOUString(pDataStrm, msMacroEnter, true);
+    WriteOUString(pDataStrm, msMacroExit, true);
+    
+    if (mnType == 2)
+    {
+        sal_uInt8 aData1[2] = { 0xff, 0xff };
+        pDataStrm->Write(aData1, sizeof(aData1));
+        
+        sal_uInt32 nListboxEntries = msListEntries.size();
+        *pDataStrm << nListboxEntries;
+        
+        ::std::vector< ::rtl::OUString >::const_iterator aIt = msListEntries.begin();
+        
+        while (aIt != msListEntries.end())
+        {
+            const ::rtl::OUString & rEntry = *aIt;
+            WriteOUString(pDataStrm, rEntry, false);
+            
+            aIt++;
+        }
+    }
+    
+    SwWW8Writer::WriteLong( *pDataStrm, nDataStt,
+                           pDataStrm->Tell() - nDataStt );
+}
+    
+}
+
Index: sw/source/filter/ww8/WW8FFData.hxx
===================================================================
RCS file: sw/source/filter/ww8/WW8FFData.hxx
diff -N sw/source/filter/ww8/WW8FFData.hxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sw/source/filter/ww8/WW8FFData.hxx	23 Jul 2008 08:49:28 -0000	1.1.2.2
@@ -0,0 +1,119 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#include <vector>
+#include <rtl/ustring.hxx>
+
+class SvStream;
+
+namespace sw
+{
+
+class WW8FFData
+{
+private:
+    // offset 0x4
+    sal_uInt8 mnType; // :2 0x3
+    sal_uInt8 mnResult; // :5 0x7c
+    bool mbOwnHelp; // :1 0x80
+    
+    // offset 5
+    bool mbOwnStat; // :1 0x01
+    bool mbProtected; // :1 0x02
+    bool mbSize; // :1 0x04
+    sal_uInt8 mnTextType; // :3 0x38
+    bool mbRecalc; // :1 0x4
+    bool mbListBox; // :1 0x80
+    
+    // offset 6
+    sal_uInt16 mnMaxLen; // :15 0x7fff maximum length of text field, 0 <=> no limit
+    
+    // offset 8
+    sal_uInt16 mnCheckboxHeight;
+    
+    // offset 10 and beyond
+    ::rtl::OUString msName;
+    ::rtl::OUString msDefault; // only for type == 0
+    sal_uInt16 mnDefault; // only for type != 0
+    ::rtl::OUString msFormat;
+    ::rtl::OUString msHelp;
+    ::rtl::OUString msStatus;
+    ::rtl::OUString msMacroEnter;
+    ::rtl::OUString msMacroExit;
+    
+    ::std::vector< ::rtl::OUString > msListEntries;
+    
+protected:
+    void WriteOUString(SvStream * pStream, const ::rtl::OUString & rStr, bool bAddZero);
+    
+public:
+    WW8FFData();
+    ~WW8FFData();
+    
+    void setType(sal_uInt8 nType) { mnType = nType; }
+    sal_uInt8 getType() const { return mnType; }
+    void setResult(sal_uInt8 nResult) { mnResult = nResult; }
+    sal_uInt8 getResult() const { return mnResult; }
+    void setProptexted(bool bProtected) { mbProtected = bProtected; }
+    bool getProtected() const { return mbProtected; }
+    void setSize(bool bSize) { mbSize = bSize; }
+    bool getSize() const { return mbSize; }
+    void setTextType(sal_uInt8 nTextType) { mnTextType = nTextType; }
+    sal_uInt8 getTextType() const { return mnTextType; }
+    void setRecalc(bool bRecalc) { mbRecalc = bRecalc; }
+    bool getRecalc() const { return mbRecalc; }
+    void setListBox(bool bListBox) { mbListBox = bListBox; }
+    bool getListBox() const { return mbListBox; }
+    void setMaxLen(sal_uInt16 nMaxLen) { mnMaxLen = nMaxLen; }
+    sal_uInt16 getMaxLen() const { return mnMaxLen; }
+    void setCheckboxHeight(sal_uInt16 nCheckboxHeight) { mnCheckboxHeight = nCheckboxHeight; }
+    sal_uInt16 getCheckboxHeight() const { return mnCheckboxHeight; }
+    void setName(const ::rtl::OUString & rName) { msName = rName; }
+    const ::rtl::OUString & getName() const { return msName; }
+    void setDefaultString(const ::rtl::OUString & rDefault) { msDefault = rDefault; }
+    const ::rtl::OUString & getDefaultString() const { return msDefault; }
+    void setDefaultResult(sal_uInt16 nDefault) { mnDefault = nDefault; }
+    sal_uInt16 getDefaultResult() const { return mnDefault; }
+    void setFormat(const ::rtl::OUString & rFormat) { msFormat = rFormat; }
+    const ::rtl::OUString & getFormat() const { return msFormat; }
+    void setHelp(const ::rtl::OUString & rHelp);
+    const ::rtl::OUString getHelp() const { return msHelp; }
+    void setStatus(const ::rtl::OUString & rStatus);
+    const ::rtl::OUString & getStatus() const { return msStatus; }
+    void setMacroEnter(const ::rtl::OUString & rMacroEnter) { msMacroEnter = rMacroEnter; }
+    const ::rtl::OUString & getMacroEnter() const { return msMacroEnter; }
+    void setMacroExit(const ::rtl::OUString & rMacroExit) { msMacroExit = rMacroExit; }
+    const ::rtl::OUString & getMacroExit() const { return msMacroExit; }
+    
+    void addListboxEntry(const ::rtl::OUString & rEntry);
+    
+    void Write(SvStream * pDataStrm);
+};
+}
Index: sw/source/filter/ww8/makefile.mk
===================================================================
RCS file: /cvs/sw/sw/source/filter/ww8/makefile.mk,v
retrieving revision 1.22
retrieving revision 1.22.104.1
diff -u -p -u -p -b -w -B -r1.22 -r1.22.104.1
--- sw/source/filter/ww8/makefile.mk	10 Apr 2008 17:15:44 -0000	1.22
+++ sw/source/filter/ww8/makefile.mk	23 Jul 2008 08:13:03 -0000	1.22.104.1
@@ -66,7 +66,8 @@ EXCEPTIONSFILES = \
 		$(SLO)$/ww8par6.obj \
 		$(SLO)$/writerhelper.obj \
 		$(SLO)$/writerwordglue.obj \
-        $(SLO)$/ww8scan.obj
+        $(SLO)$/ww8scan.obj \
+        $(SLO)$/WW8FFData.obj
 
 
 SLOFILES =	\
@@ -91,7 +92,8 @@ SLOFILES =	\
 		$(SLO)$/styles.obj \
 		$(SLO)$/ww8scan.obj \
 		$(SLO)$/writerhelper.obj \
-		$(SLO)$/writerwordglue.obj
+		$(SLO)$/writerwordglue.obj \
+        $(SLO)$/WW8FFData.obj
 
 
 # --- Tagets -------------------------------------------------------
Index: sw/source/filter/ww8/wrtw8esh.cxx
===================================================================
RCS file: /cvs/sw/sw/source/filter/ww8/wrtw8esh.cxx,v
retrieving revision 1.104
retrieving revision 1.103.102.4
diff -u -p -u -p -b -w -B -r1.104 -r1.103.102.4
--- sw/source/filter/ww8/wrtw8esh.cxx	19 Aug 2008 10:47:57 -0000	1.104
+++ sw/source/filter/ww8/wrtw8esh.cxx	29 Aug 2008 14:25:45 -0000	1.103.102.4
@@ -109,6 +109,7 @@
 // --> OD 2007-07-24 #148096#
 #include <ndtxt.hxx>
 // <--
+#include "WW8FFData.hxx"
 
 using namespace com::sun::star;
 using namespace sw::util;
@@ -222,146 +223,24 @@ void SwWW8Writer::DoComboBox(const rtl::
     OutField(0, ww::eFORMDROPDOWN, FieldString(ww::eFORMDROPDOWN),
         WRITEFIELD_CLOSE);
 
-    static const sal_uInt8 aComboData1[] =
-    {
-        0,0,0,0,        // len of struct
-        0x44,0,         // the start of "next" data
-        0,0,0,0,0,0,0,0,0,0,                // PIC-Structure!
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0,                            // /
-    };
-    pDataStrm->Write( aComboData1, sizeof(aComboData1) );
-
-    static const sal_uInt8 aComboData2[] =
-    {
-        0xFF, 0xFF, 0xFF, 0xFF
-    };
-    pDataStrm->Write( aComboData2, sizeof(aComboData2) );
-
-    sal_uInt8 nHeaderByte = 0xe2;
-    sal_uInt32 nNoStrings = rListItems.getLength();
-    if (nNoStrings)
-    {
-        bool bSelectedDone = false;
-        sal_uInt32 i;
-
-        for ( i = 0; i < nNoStrings; ++i)
-        {
-            if (rSelected == rListItems[i])
-            {
-                bSelectedDone = true;
-                i++;
-                break;
-            }
-        }
-        if (bSelectedDone && i <= 0x3F) //only 6 bit available for selected item
-        {
-            nHeaderByte |= (i << 2);
-        }
-    }
-
-    *pDataStrm << nHeaderByte;
+    ::sw::WW8FFData * pFFData = new ::sw::WW8FFData();
 
-    sal_uInt8 aComboData9[] =
-    {
-        0x80, 0x00, 0x00, 0x00, 0x00
-    };
-
-    if (rToolTip.getLength() > 0)
-        aComboData9[0] |= 1;
+    pFFData->setType(2); 
+    pFFData->setName(rName);
+    pFFData->setHelp(rHelp);
+    pFFData->setStatus(rToolTip);
 
-    pDataStrm->Write( aComboData9, sizeof(aComboData9) );
+    sal_uInt32 nListItems = rListItems.getLength();
 
-    sal_uInt16 nLen = msword_cast<sal_uInt16>(rName.getLength());
-    *pDataStrm << nLen;
-    WriteString16(*pDataStrm, rName, true);
-
-    static const sal_uInt8 aComboData3[] =
+    for (sal_uInt32 i = 0; i < nListItems; i++)
     {
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-    };
-    pDataStrm->Write( aComboData3, sizeof(aComboData3) );
-
-    nLen = msword_cast<sal_uInt16>(rHelp.getLength());
-    *pDataStrm << nLen;
-    WriteString16(*pDataStrm, rHelp, true);
-
-    nLen = msword_cast<sal_uInt16>(rToolTip.getLength());
-    if (nLen > 0)
-    {
-        *pDataStrm << nLen;
-        WriteString16(*pDataStrm, rToolTip, true);
-    }
-
-    static const sal_uInt8 aComboData4[] =
-    {
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0xff, 0xff
-    };
-
-    pDataStrm->Write( aComboData4, sizeof(aComboData4) );
-    *pDataStrm << nNoStrings;
-    if (!nNoStrings)
-        *pDataStrm << sal_uInt16(0);
-    else
-    {
-        for (sal_uInt32 i = 0; i < nNoStrings; ++i)
-        {
-            const rtl::OUString &rItem = rListItems[i];
-            sal_uInt16 nStrLen = msword_cast<sal_uInt16>(rItem.getLength());
-            *pDataStrm << nStrLen;
-            WriteString16(*pDataStrm, rItem, false);
-        }
-    }
-
-    SwWW8Writer::WriteLong( *pDataStrm, nDataStt,
-        pDataStrm->Tell() - nDataStt );
-}
-
-static bool lcl_HasPropertyNonEmpty
-(uno::Reference<beans::XPropertySet> xPropSet,
- const rtl::OUString & sPropName)
-{
-    bool bResult = false;
-
-    uno::Reference<beans::XPropertySetInfo> xPropSetInfo =
-        xPropSet->getPropertySetInfo();
-
-    if (xPropSetInfo->hasPropertyByName(sPropName))
-    {
-        uno::Any aTmp(xPropSet->getPropertyValue(sPropName));
-        const rtl::OUString * pStr = (const rtl::OUString *)aTmp.getValue();
-
-        if (pStr && pStr->getLength() > 0)
-            bResult = true;
+        if (i < 0x20 && rSelected == rListItems[i])
+            pFFData->setResult(::sal::static_int_cast<sal_uInt8>(i));
+        pFFData->addListboxEntry(rListItems[i]);
     }
 
-    return bResult;
-}
-
-static void lcl_WW8WriteProperty(uno::Reference<beans::XPropertySet> xPropSet,
-                                 SvStream * pDataStrm,
-                                 const rtl::OUString & sPropName)
-{
-    uno::Reference<beans::XPropertySetInfo> xPropSetInfo =
-        xPropSet->getPropertySetInfo();
-
-    const rtl::OUString * pStr = NULL;
-    uno::Any aTmp;
+    pFFData->Write(pDataStrm);    
 
-    if (xPropSetInfo->hasPropertyByName(sPropName))
-    {
-        aTmp = xPropSet->getPropertyValue(sPropName);
-        pStr = (const rtl::OUString *)aTmp.getValue();
-    }
-    sal_uInt16 nLen = pStr ? msword_cast<sal_uInt16>(pStr->getLength()) : 0;
-    *pDataStrm << nLen;
-    if (pStr)
-        SwWW8Writer::WriteString16(*pDataStrm, String(*pStr), true);
-    else
-        SwWW8Writer::WriteString16(*pDataStrm, aEmptyStr, true);
 }
 
 void SwWW8Writer::DoCheckBox(uno::Reference<beans::XPropertySet> xPropSet)
@@ -389,23 +268,10 @@ void SwWW8Writer::DoCheckBox(uno::Refere
     pChpPlc->AppendFkpEntry(Strm().Tell(),
                 sizeof( aArr1 ), aArr1 );
 
-    static const sal_uInt8 aComboData1[] =
-    {
-        0,0,0,0,        // len of struct
-        0x44,0,         // the start of "next" data
-        0,0,0,0,0,0,0,0,0,0,                // PIC-Structure!
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0,                            // /
-    };
-    pDataStrm->Write( aComboData1, sizeof(aComboData1) );
+    ::sw::WW8FFData * pFFData = new ::sw::WW8FFData();
 
-    static const sal_uInt8 aComboData2[] =
-    {
-        0xFF, 0xFF, 0xFF, 0xFF
-    };
-    pDataStrm->Write( aComboData2, sizeof(aComboData2) );
+    pFFData->setType(1);
+    pFFData->setCheckboxHeight(0x14);
 
     sal_Int16 nTemp = 0;
     xPropSet->getPropertyValue(C2U("DefaultState")) >>= nTemp;
@@ -413,57 +279,44 @@ void SwWW8Writer::DoCheckBox(uno::Refere
 
     xPropSet->getPropertyValue(C2U("State")) >>= nTemp;
     sal_uInt32 nIsChecked(nTemp);
-    sal_uInt8 nHeaderByte = 0xe5;
+
     if (nIsDefaultChecked != nIsChecked)
     {
         switch (nIsChecked)
         {
             case false:
-                nHeaderByte = 0x1;
+                pFFData->setResult(0);
                 break;
             case true:
-                nHeaderByte = 0x5;
+                pFFData->setResult(1);
                 break;
             default:
                 ASSERT(!this, "how did that happen");
         }
     }
-    *pDataStrm << nHeaderByte;
 
-    sal_uInt8 aComboData5[] =
+    ::rtl::OUString aStr;
+    static ::rtl::OUString sName(C2U("Name"));
+    if (xPropSetInfo->hasPropertyByName(sName))
     {
-        0x04, 0x00, 0x00, 0x14, 0x00
-    };
-
-    const rtl::OUString sHelpText(C2U("HelpText"));
-    if (lcl_HasPropertyNonEmpty(xPropSet, sHelpText))
-        aComboData5[0] |= 0x1;
-
-    pDataStrm->Write( aComboData5, sizeof(aComboData5) );
-
-    lcl_WW8WriteProperty(xPropSet, pDataStrm, C2U("Name"));
-
-    *pDataStrm << nIsDefaultChecked;
+        xPropSet->getPropertyValue(sName) >>= aStr;
+        pFFData->setName(aStr);
+    }
 
-    static const sal_uInt8 aComboData3[] =
+    static ::rtl::OUString sHelpText(C2U("HelpText"));
+    if (xPropSetInfo->hasPropertyByName(sHelpText))
     {
-        0x00, 0x00
-    };
-
-    pDataStrm->Write( aComboData3, sizeof(aComboData3) );
-
-    lcl_WW8WriteProperty(xPropSet, pDataStrm, C2U("HelpF1Text"));
-    lcl_WW8WriteProperty(xPropSet, pDataStrm, sHelpText);
-
-    static const sal_uInt8 aComboData4[] =
+        xPropSet->getPropertyValue(sHelpText) >>= aStr;
+        pFFData->setHelp(aStr);
+    }
+    static ::rtl::OUString sHelpF1Text(C2U("HelpF1Text"));
+    if (xPropSetInfo->hasPropertyByName(sHelpF1Text))
     {
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-    };
-
-    pDataStrm->Write( aComboData4, sizeof(aComboData4) );
+        xPropSet->getPropertyValue(sHelpF1Text) >>= aStr;
+        pFFData->setStatus(aStr);
+    }
 
-    SwWW8Writer::WriteLong( *pDataStrm, nDataStt,
-        pDataStrm->Tell() - nDataStt );
+    pFFData->Write(pDataStrm);
 
     OutField(0, ww::eFORMCHECKBOX, aEmptyStr, WRITEFIELD_CLOSE);
 }
@@ -490,64 +343,13 @@ void SwWW8Writer::DoFormText(const SwInp
     pChpPlc->AppendFkpEntry(Strm().Tell(),
                 sizeof( aArr1 ), aArr1 );
 
-    static const sal_uInt8 aComboData1[] =
-    {
-        0,0,0,0,        // len of struct
-        0x44,0,         // the start of "next" data
-        0,0,0,0,0,0,0,0,0,0,                // PIC-Structure!
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //  |
-        0,0,0,0                            // /
-    };
-    pDataStrm->Write( aComboData1, sizeof(aComboData1) );
-
-    sal_uInt8 aComboData2[] =
-    {
-        0xFF, 0xFF, 0xFF, 0xFF, 0, 0, 0, 0, 0, 0
-    };
-
-    if (pFld->GetToolTip().Len() > 0)
-        aComboData2[5] |= 0x1;
-
-    pDataStrm->Write( aComboData2, sizeof(aComboData2) );
-
-    rtl::OUString aStr = pFld->GetPar2();
-    sal_uInt16 nLen = msword_cast<sal_uInt16>(aStr.getLength());
-    *pDataStrm << nLen;
-    WriteString16(*pDataStrm, aStr, true);
-
-    aStr = rtl::OUString();//aEmptyStr; //pFld->GetPar1();
-    nLen = msword_cast<sal_uInt16>(aStr.getLength());
-    *pDataStrm << nLen;
-    WriteString16(*pDataStrm, aStr, true);
-
-    aStr = pFld->GetHelp();
-    nLen = msword_cast<sal_uInt16>(aStr.getLength());
-    *pDataStrm << nLen;
-    WriteString16(*pDataStrm, aStr, true);
-
-    nLen = 0;
-    *pDataStrm << nLen;
-    WriteString16(*pDataStrm, aEmptyStr, true);
-
-    aStr = pFld->GetToolTip();
-    if (aStr.getLength() > 0)
-    {
-        nLen = msword_cast<sal_uInt16>(aStr.getLength());
-        *pDataStrm << nLen;
-        WriteString16(*pDataStrm, aStr, true);
-    }
-
-    static sal_uInt8 aComboData3[] =
-    {
-        0, 0, 0, 0, 0, 0, 0, 0
-    };
-
-    pDataStrm->Write( aComboData3, sizeof(aComboData3) );
+    ::sw::WW8FFData * pFFData = new ::sw::WW8FFData();
 
-    SwWW8Writer::WriteLong( *pDataStrm, nDataStt,
-        pDataStrm->Tell() - nDataStt );
+    pFFData->setType(0);
+    pFFData->setName(pFld->GetPar2());
+    pFFData->setHelp(pFld->GetHelp());
+    pFFData->setStatus(pFld->GetToolTip());
+    pFFData->Write(pDataStrm);
 
     OutField(0, ww::eFORMTEXT, aEmptyStr, WRITEFIELD_CMD_END);
 
Index: sw/source/filter/ww8/wrtww8.cxx
===================================================================
RCS file: /cvs/sw/sw/source/filter/ww8/wrtww8.cxx,v
retrieving revision 1.91
retrieving revision 1.90.102.2
diff -u -p -u -p -b -w -B -r1.91 -r1.90.102.2
--- sw/source/filter/ww8/wrtww8.cxx	9 Jun 2008 15:20:07 -0000	1.91
+++ sw/source/filter/ww8/wrtww8.cxx	17 Jul 2008 13:37:21 -0000	1.90.102.2
@@ -276,6 +276,8 @@ static void WriteDop( SwWW8Writer& rWrt 
 
     rDop.fDontUseHTMLAutoSpacing = (rWrt.pDoc->get(IDocumentSettingAccess::PARA_SPACE_MAX) != 0);
 
+    rDop.fExpShRtn = !rWrt.pDoc->get(IDocumentSettingAccess::DO_NOT_JUSTIFY_LINES_WITH_MANUAL_BREAK); // #i56856#
+
     rDop.Write( *rWrt.pTableStrm, *rWrt.pFib );
 }
 
Index: sw/source/filter/ww8/ww8par.cxx
===================================================================
RCS file: /cvs/sw/sw/source/filter/ww8/ww8par.cxx,v
retrieving revision 1.197
retrieving revision 1.190.100.3
diff -u -p -u -p -b -w -B -r1.197 -r1.190.100.3
--- sw/source/filter/ww8/ww8par.cxx	19 Aug 2008 10:35:27 -0000	1.197
+++ sw/source/filter/ww8/ww8par.cxx	29 Aug 2008 14:25:50 -0000	1.190.100.3
@@ -1445,7 +1445,7 @@ void SwWW8ImplReader::ImportDop()
     // <--
 
     // --> FME 2005-06-08 #i49277#
-    rDoc.set(IDocumentSettingAccess::DO_NOT_JUSTIFY_LINES_WITH_MANUAL_BREAK, false);
+    rDoc.set(IDocumentSettingAccess::DO_NOT_JUSTIFY_LINES_WITH_MANUAL_BREAK, !pWDop->fExpShRtn); // #i56856#
     // --> FME 2005-08-11 #i53199#
     rDoc.set(IDocumentSettingAccess::DO_NOT_RESET_PARA_ATTRS_FOR_NUM_FONT, false);
 
Index: sw/source/filter/ww8/ww8scan.cxx
===================================================================
RCS file: /cvs/sw/sw/source/filter/ww8/ww8scan.cxx,v
retrieving revision 1.140
retrieving revision 1.139.2.3
diff -u -p -u -p -b -w -B -r1.140 -r1.139.2.3
--- sw/source/filter/ww8/ww8scan.cxx	19 Aug 2008 10:49:50 -0000	1.140
+++ sw/source/filter/ww8/ww8scan.cxx	29 Aug 2008 14:25:42 -0000	1.139.2.3
@@ -51,6 +51,7 @@
 #endif                      // dump
 #include <tools/debug.hxx>
 #include <i18npool/lang.h>
+#include <vcl/svapp.hxx>    // Application  #i90932#
 
 #include <stdio.h>
 
@@ -5458,7 +5459,9 @@ WW8Fib::WW8Fib(SvStream& rSt, BYTE nWant
         fWhichTblStm= ( aBits2 & 0x02 ) >> 1;
         // dummy    = ( aBits2 & 0x0e ) >> 1;
         fExtChar    = ( aBits2 & 0x10 ) >> 4;
-        // dummy    = ( aBits2 & 0xe0 ) >> 5;
+        // dummy    = ( aBits2 & 0x20 ) >> 5;
+        fFarEast    = ( aBits2 & 0x40 ) >> 6; // #i90932#
+        // dummy    = ( aBits2 & 0x80 ) >> 7;
 
         /*
             ggfs. Ziel-Varaiblen, aus xxx_Ver67 fuellen
@@ -5524,6 +5527,9 @@ WW8Fib::WW8Fib(SvStream& rSt, BYTE nWant
             if( 0 != rSt.GetError() )
                 nFibError = ERR_SWG_READ_ERROR;
 
+            rSt.Seek( 0x5bc );          // Actual nFib introduced in Word 2003
+            rSt >> nFib_actual;
+
             rSt.Seek( nOldPos );
         }
     }
@@ -5571,7 +5577,30 @@ WW8Fib::WW8Fib(BYTE nVer)
         nProduct = 0xc02d;
     }
 
-    lid = lidFE = 0x409;
+    // --> #i90932# 
+    lid = 0x409; // LANGUAGE_ENGLISH_US
+
+    LanguageType nLang = Application::GetSettings().GetLanguage();
+    switch( nLang )
+    {
+        case LANGUAGE_CHINESE:
+        case LANGUAGE_CHINESE_SIMPLIFIED:
+        case LANGUAGE_CHINESE_HONGKONG:
+        case LANGUAGE_CHINESE_SINGAPORE:
+        case LANGUAGE_CHINESE_MACAU:
+        case LANGUAGE_CHINESE_TRADITIONAL:
+        case LANGUAGE_KOREAN:
+        case LANGUAGE_KOREAN_JOHAB:
+        case LANGUAGE_JAPANESE:
+            lidFE = nLang;
+            fFarEast = true;
+            break;
+        default:
+            lidFE = lid;
+            fFarEast = false;
+            break;
+    };
+    // <-- #i90932# 
 }
 
 bool WW8Fib::Write(SvStream& rStrm)
@@ -5601,6 +5630,7 @@ bool WW8Fib::Write(SvStream& rStrm)
     if( fEncrypted )    nBits16 |= 0x0100;
     if( fWhichTblStm )  nBits16 |= 0x0200;
     if( fExtChar )      nBits16 |= 0x1000;
+    if( fFarEast )      nBits16 |= 0x4000;  // #i90932#
     Set_UInt16( pData, nBits16 );
 
     Set_UInt16( pData, nFibBack );
@@ -6438,7 +6468,7 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
         UINT16 a16Bit;
         BYTE   a8Bit;
 
-        a16Bit = Get_UShort( pData );
+        a16Bit = Get_UShort( pData );        // 0 0x00
         fFacingPages        = 0 != ( a16Bit  &  0x0001 )     ;
         fWidowControl       = 0 != ( a16Bit  &  0x0002 )     ;
         fPMHMainDoc         = 0 != ( a16Bit  &  0x0004 )     ;
@@ -6446,14 +6476,14 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
         fpc                 =      ( a16Bit  &  0x0060 ) >> 5;
         grpfIhdt            =      ( a16Bit  &  0xff00 ) >> 8;
 
-        a16Bit = Get_UShort( pData );
+        a16Bit = Get_UShort( pData );        // 2 0x02
         rncFtn              =   a16Bit  &  0x0003        ;
         nFtn                = ( a16Bit  & ~0x0003 ) >> 2 ;
 
-        a8Bit = Get_Byte( pData );
+        a8Bit = Get_Byte( pData );           // 4 0x04
         fOutlineDirtySave      = 0 != ( a8Bit  &  0x01   );
 
-        a8Bit = Get_Byte( pData );
+        a8Bit = Get_Byte( pData );           // 5 0x05
         fOnlyMacPics           = 0 != ( a8Bit  &  0x01   );
         fOnlyWinPics           = 0 != ( a8Bit  &  0x02   );
         fLabelDoc              = 0 != ( a8Bit  &  0x04   );
@@ -6463,7 +6493,7 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
         fLinkStyles            = 0 != ( a8Bit  &  0x40   );
         fRevMarking            = 0 != ( a8Bit  &  0x80   );
 
-        a8Bit = Get_Byte( pData );
+        a8Bit = Get_Byte( pData );           // 6 0x06
         fBackup                = 0 != ( a8Bit  &  0x01   );
         fExactCWords           = 0 != ( a8Bit  &  0x02   );
         fPagHidden             = 0 != ( a8Bit  &  0x04   );
@@ -6473,7 +6503,7 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
         fReadOnlyRecommended   = 0 != ( a8Bit  &  0x40   );
         fDfltTrueType          = 0 != ( a8Bit  &  0x80   );
 
-        a8Bit = Get_Byte( pData );
+        a8Bit = Get_Byte( pData );           // 7 0x07
         fPagSuppressTopSpacing = 0 != ( a8Bit  &  0x01   );
         fProtEnabled           = 0 != ( a8Bit  &  0x02   );
         fDispFormFldSel        = 0 != ( a8Bit  &  0x04   );
@@ -6484,7 +6514,7 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
         fEmbedFonts            = 0 != ( a8Bit  &  0x80   );
 
 
-        a8Bit = Get_Byte( pData );
+        a8Bit = Get_Byte( pData );           // 8 0x08
         copts_fNoTabForInd           = 0 != ( a8Bit  &  0x01   );
         copts_fNoSpaceRaiseLower     = 0 != ( a8Bit  &  0x02   );
         copts_fSupressSpbfAfterPgBrk = 0 != ( a8Bit  &  0x04   );
@@ -6494,32 +6524,33 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
         copts_fConvMailMergeEsc      = 0 != ( a8Bit  &  0x40   );
         copts_fSupressTopSpacing     = 0 != ( a8Bit  &  0x80   );
 
-        a8Bit = Get_Byte( pData );
+        a8Bit = Get_Byte( pData );           // 9 0x09
         copts_fOrigWordTableRules    = 0 != ( a8Bit  &  0x01   );
         copts_fTransparentMetafiles  = 0 != ( a8Bit  &  0x02   );
         copts_fShowBreaksInFrames    = 0 != ( a8Bit  &  0x04   );
         copts_fSwapBordersFacingPgs  = 0 != ( a8Bit  &  0x08   );
+        copts_fExpShRtn              = 0 != ( a8Bit  &  0x20   );  // #i56856#
 
-        dxaTab = Get_Short( pData );
-        wSpare = Get_UShort( pData );
-        dxaHotZ = Get_UShort( pData );
-        cConsecHypLim = Get_UShort( pData );
-        wSpare2 = Get_UShort( pData );
-        dttmCreated = Get_Long( pData );
-        dttmRevised = Get_Long( pData );
-        dttmLastPrint = Get_Long( pData );
-        nRevision = Get_Short( pData );
-        tmEdited = Get_Long( pData );
-        cWords = Get_Long( pData );
-        cCh = Get_Long( pData );
-        cPg = Get_Short( pData );
-        cParas = Get_Long( pData );
+        dxaTab = Get_Short( pData );         // 10 0x0a
+        wSpare = Get_UShort( pData );        // 12 0x0c
+        dxaHotZ = Get_UShort( pData );       // 14 0x0e
+        cConsecHypLim = Get_UShort( pData ); // 16 0x10
+        wSpare2 = Get_UShort( pData );       // 18 0x12
+        dttmCreated = Get_Long( pData );     // 20 0x14
+        dttmRevised = Get_Long( pData );     // 24 0x18
+        dttmLastPrint = Get_Long( pData );   // 28 0x1c
+        nRevision = Get_Short( pData );      // 32 0x20
+        tmEdited = Get_Long( pData );        // 34 0x22
+        cWords = Get_Long( pData );          // 38 0x26
+        cCh = Get_Long( pData );             // 42 0x2a
+        cPg = Get_Short( pData );            // 46 0x2e
+        cParas = Get_Long( pData );          // 48 0x30
 
-        a16Bit = Get_UShort( pData );
+        a16Bit = Get_UShort( pData );        // 52 0x34
         rncEdn =   a16Bit &  0x0003       ;
         nEdn   = ( a16Bit & ~0x0003 ) >> 2;
 
-        a16Bit = Get_UShort( pData );
+        a16Bit = Get_UShort( pData );        // 54 0x36
         epc            =   a16Bit &  0x0003       ;
         nfcFtnRef      = ( a16Bit &  0x003c ) >> 2;
         nfcEdnRef      = ( a16Bit &  0x03c0 ) >> 6;
@@ -6528,15 +6559,15 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
         fShadeFormData = 0 != ( a16Bit &  0x1000 );
         fWCFtnEdn      = 0 != ( a16Bit &  0x8000 );
 
-        cLines = Get_Long( pData );
-        cWordsFtnEnd = Get_Long( pData );
-        cChFtnEdn = Get_Long( pData );
-        cPgFtnEdn = Get_Short( pData );
-        cParasFtnEdn = Get_Long( pData );
-        cLinesFtnEdn = Get_Long( pData );
-        lKeyProtDoc = Get_Long( pData );
+        cLines = Get_Long( pData );          // 56 0x38
+        cWordsFtnEnd = Get_Long( pData );    // 60 0x3c
+        cChFtnEdn = Get_Long( pData );       // 64 0x40
+        cPgFtnEdn = Get_Short( pData );      // 68 0x44
+        cParasFtnEdn = Get_Long( pData );    // 70 0x46
+        cLinesFtnEdn = Get_Long( pData );    // 74 0x4a
+        lKeyProtDoc = Get_Long( pData );     // 78 0x4e
 
-        a16Bit = Get_UShort( pData );
+        a16Bit = Get_UShort( pData );        // 82 0x52
         wvkSaved    =   a16Bit & 0x0007        ;
         wScaleSaved = ( a16Bit & 0x0ff8 ) >> 3 ;
         zkSaved     = ( a16Bit & 0x3000 ) >> 12;
@@ -6545,29 +6576,29 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
         /*
             bei nFib >= 103 gehts weiter:
         */
-        if (nFib >= 103)
+        if (nFib >= 103) // Word 6/32bit, 95, 97, 2000, 2002, 2003, 2007
         {
-            a32Bit = Get_ULong( pData );
+            a32Bit = Get_ULong( pData );     // 84 0x54
             SetCompatabilityOptions(a32Bit);
         }
 
         //#i22436#, for all WW7- documents
-        if (nFib <= 104)
+        if (nFib <= 104) // Word 95
             fUsePrinterMetrics = 1;
 
         /*
             bei nFib > 105 gehts weiter:
         */
-        if (nFib > 105)
+        if (nFib > 105) // Word 97, 2000, 2002, 2003, 2007
         {
-            adt = Get_Short( pData );
+            adt = Get_Short( pData );            // 88 0x58
 
-            doptypography.ReadFromMem(pData);
+            doptypography.ReadFromMem(pData);    // 90 0x5a
 
-            memcpy( &dogrid, pData, sizeof( WW8_DOGRID ));
+            memcpy( &dogrid, pData, sizeof( WW8_DOGRID )); // 400 0x190
             pData += sizeof( WW8_DOGRID );
 
-            a16Bit = Get_UShort( pData );
+            a16Bit = Get_UShort( pData );        // 410 0x19a
             // die untersten 9 Bit sind uninteressant
             fHtmlDoc                = ( a16Bit &  0x0200 ) >>  9 ;
             fSnapBorder             = ( a16Bit &  0x0800 ) >> 11 ;
@@ -6576,35 +6607,35 @@ WW8Dop::WW8Dop(SvStream& rSt, INT16 nFib
             fForcePageSizePag       = ( a16Bit &  0x4000 ) >> 14 ;
             fMinFontSizePag         = ( a16Bit &  0x8000 ) >> 15 ;
 
-            a16Bit = Get_UShort( pData );
+            a16Bit = Get_UShort( pData );        // 412 0x19c
             fHaveVersions   = 0 != ( a16Bit  &  0x0001 );
             fAutoVersion    = 0 != ( a16Bit  &  0x0002 );
 
-            pData += 12;
+            pData += 12;                         // 414 0x19e
 
-            cChWS = Get_Long( pData );
-            cChWSFtnEdn = Get_Long( pData );
-            grfDocEvents = Get_Long( pData );
+            cChWS = Get_Long( pData );           // 426 0x1aa
+            cChWSFtnEdn = Get_Long( pData );     // 430 0x1ae
+            grfDocEvents = Get_Long( pData );    // 434 0x1b2
 
-            pData += 4+30+8;
+            pData += 4+30+8;  // 438 0x1b6; 442 0x1ba; 472 0x1d8; 476 0x1dc
 
-            cDBC = Get_Long( pData );
-            cDBCFtnEdn = Get_Long( pData );
+            cDBC = Get_Long( pData );            // 480 0x1e0
+            cDBCFtnEdn = Get_Long( pData );      // 484 0x1e4
 
-            pData += 1 * sizeof( INT32);
+            pData += 1 * sizeof( INT32);         // 488 0x1e8
 
-            nfcFtnRef = Get_Short( pData );
-            nfcEdnRef = Get_Short( pData );
-            hpsZoonFontPag = Get_Short( pData );
-            dywDispPag = Get_Short( pData );
+            nfcFtnRef = Get_Short( pData );      // 492 0x1ec
+            nfcEdnRef = Get_Short( pData );      // 494 0x1ee
+            hpsZoonFontPag = Get_Short( pData ); // 496 0x1f0
+            dywDispPag = Get_Short( pData );     // 498 0x1f2
 
             if (nRead >= 516)
             {
                 //500 -> 508, Appear to be repeated here in 2000+
-                pData += 8;
-                a32Bit = Get_Long( pData );
+                pData += 8;                      // 500 0x1f4
+                a32Bit = Get_Long( pData );      // 508 0x1fc
                 SetCompatabilityOptions(a32Bit);
-                a32Bit = Get_Long( pData );
+                a32Bit = Get_Long( pData );      // 512 0x200
 
 				// i#78591#
                 // fDontUseHTMLAutoSpacing = (a32Bit & 0x4) >> 2;
@@ -6706,7 +6737,7 @@ void WW8Dop::SetCompatabilityOptions(UIN
     fShowBreaksInFrames         = ( a32Bit &  0x00000400 ) >> 10 ;
     fSwapBordersFacingPgs       = ( a32Bit &  0x00000800 ) >> 11 ;
     fCompatabilityOptions_Unknown1_13       = ( a32Bit &  0x00001000 ) >> 12 ;
-    fCompatabilityOptions_Unknown1_14       = ( a32Bit &  0x00002000 ) >> 13 ;
+    fExpShRtn                   = ( a32Bit &  0x00002000 ) >> 13 ; // #i56856#
     fCompatabilityOptions_Unknown1_15       = ( a32Bit &  0x00004000 ) >> 14 ;
     fCompatabilityOptions_Unknown1_16       = ( a32Bit &  0x00008000 ) >> 15 ;
     fSuppressTopSpacingMac5     = ( a32Bit &  0x00010000 ) >> 16 ;
@@ -6744,7 +6775,7 @@ UINT32 WW8Dop::GetCompatabilityOptions()
     if (fShowBreaksInFrames)            a32Bit |= 0x00000400;
     if (fSwapBordersFacingPgs)          a32Bit |= 0x00000800;
     if (fCompatabilityOptions_Unknown1_13)          a32Bit |= 0x00001000;
-    if (fCompatabilityOptions_Unknown1_14)          a32Bit |= 0x00002000;
+    if (fExpShRtn)                      a32Bit |= 0x00002000; // #i56856#
     if (fCompatabilityOptions_Unknown1_15)          a32Bit |= 0x00004000;
     if (fCompatabilityOptions_Unknown1_16)          a32Bit |= 0x00008000;
     if (fSuppressTopSpacingMac5)        a32Bit |= 0x00010000;
@@ -6860,7 +6891,7 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
     UINT16 a16Bit;
     BYTE   a8Bit;
 
-    a16Bit = 0;
+    a16Bit = 0;                         // 0 0x00
     if (fFacingPages)
         a16Bit |= 0x0001;
     if (fWidowControl)
@@ -6872,16 +6903,16 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
     a16Bit |= ( 0xff00 & (grpfIhdt << 8));
     Set_UInt16( pData, a16Bit );
 
-    a16Bit = 0;
+    a16Bit = 0;                         // 2 0x02
     a16Bit |= ( 0x0003 & rncFtn );
     a16Bit |= ( ~0x0003 & (nFtn << 2));
     Set_UInt16( pData, a16Bit );
 
-    a8Bit = 0;
+    a8Bit = 0;                          // 4 0x04
     if( fOutlineDirtySave ) a8Bit |= 0x01;
     Set_UInt8( pData, a8Bit );
 
-    a8Bit = 0;
+    a8Bit = 0;                          // 5 0x05
     if( fOnlyMacPics )  a8Bit |= 0x01;
     if( fOnlyWinPics )  a8Bit |= 0x02;
     if( fLabelDoc )     a8Bit |= 0x04;
@@ -6892,7 +6923,7 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
     if( fRevMarking )   a8Bit |= 0x80;
     Set_UInt8( pData, a8Bit );
 
-    a8Bit = 0;
+    a8Bit = 0;                          // 6 0x06
     if( fBackup )               a8Bit |= 0x01;
     if( fExactCWords )          a8Bit |= 0x02;
     if( fPagHidden )            a8Bit |= 0x04;
@@ -6903,7 +6934,7 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
     if( fDfltTrueType )         a8Bit |= 0x80;
     Set_UInt8( pData, a8Bit );
 
-    a8Bit = 0;
+    a8Bit = 0;                          // 7 0x07
     if( fPagSuppressTopSpacing )    a8Bit |= 0x01;
     if( fProtEnabled )              a8Bit |= 0x02;
     if( fDispFormFldSel )           a8Bit |= 0x04;
@@ -6915,7 +6946,7 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
     Set_UInt8( pData, a8Bit );
 
 
-    a8Bit = 0;
+    a8Bit = 0;                          // 8 0x08
     if( copts_fNoTabForInd )            a8Bit |= 0x01;
     if( copts_fNoSpaceRaiseLower )      a8Bit |= 0x02;
     if( copts_fSupressSpbfAfterPgBrk )  a8Bit |= 0x04;
@@ -6926,34 +6957,35 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
     if( copts_fSupressTopSpacing )      a8Bit |= 0x80;
     Set_UInt8( pData, a8Bit );
 
-    a8Bit = 0;
+    a8Bit = 0;                          // 9 0x09
     if( copts_fOrigWordTableRules )     a8Bit |= 0x01;
     if( copts_fTransparentMetafiles )   a8Bit |= 0x02;
     if( copts_fShowBreaksInFrames )     a8Bit |= 0x04;
     if( copts_fSwapBordersFacingPgs )   a8Bit |= 0x08;
+    if( copts_fExpShRtn )               a8Bit |= 0x20;  // #i56856#
     Set_UInt8( pData, a8Bit );
 
-    Set_UInt16( pData, dxaTab );
-    Set_UInt16( pData, wSpare );
-    Set_UInt16( pData, dxaHotZ );
-    Set_UInt16( pData, cConsecHypLim );
-    Set_UInt16( pData, wSpare2 );
-    Set_UInt32( pData, dttmCreated );
-    Set_UInt32( pData, dttmRevised );
-    Set_UInt32( pData, dttmLastPrint );
-    Set_UInt16( pData, nRevision );
-    Set_UInt32( pData, tmEdited );
-    Set_UInt32( pData, cWords );
-    Set_UInt32( pData, cCh );
-    Set_UInt16( pData, cPg );
-    Set_UInt32( pData, cParas );
+    Set_UInt16( pData, dxaTab );        // 10 0x0a
+    Set_UInt16( pData, wSpare );        // 12 0x0c
+    Set_UInt16( pData, dxaHotZ );       // 14 0x0e
+    Set_UInt16( pData, cConsecHypLim ); // 16 0x10
+    Set_UInt16( pData, wSpare2 );       // 18 0x12
+    Set_UInt32( pData, dttmCreated );   // 20 0x14
+    Set_UInt32( pData, dttmRevised );   // 24 0x18
+    Set_UInt32( pData, dttmLastPrint ); // 28 0x1c
+    Set_UInt16( pData, nRevision );     // 32 0x20
+    Set_UInt32( pData, tmEdited );      // 34 0x22
+    Set_UInt32( pData, cWords );        // 38 0x26
+    Set_UInt32( pData, cCh );           // 42 0x2a
+    Set_UInt16( pData, cPg );           // 46 0x2e
+    Set_UInt32( pData, cParas );        // 48 0x30
 
-    a16Bit = 0;
+    a16Bit = 0;                         // 52 0x34
     a16Bit |= ( 0x0003 & rncEdn );
     a16Bit |= (~0x0003 & ( nEdn << 2));
     Set_UInt16( pData, a16Bit );
 
-    a16Bit = 0;
+    a16Bit = 0;                         // 54 0x36
     a16Bit |= (0x0003 & epc );
     a16Bit |= (0x003c & (nfcFtnRef << 2));
     a16Bit |= (0x03c0 & (nfcEdnRef << 6));
@@ -6963,15 +6995,15 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
     if( fWCFtnEdn )         a16Bit |= 0x8000;
     Set_UInt16( pData, a16Bit );
 
-    Set_UInt32( pData, cLines );
-    Set_UInt32( pData, cWordsFtnEnd );
-    Set_UInt32( pData, cChFtnEdn );
-    Set_UInt16( pData, cPgFtnEdn );
-    Set_UInt32( pData, cParasFtnEdn );
-    Set_UInt32( pData, cLinesFtnEdn );
-    Set_UInt32( pData, lKeyProtDoc );
+    Set_UInt32( pData, cLines );        // 56 0x38
+    Set_UInt32( pData, cWordsFtnEnd );  // 60 0x3c
+    Set_UInt32( pData, cChFtnEdn );     // 64 0x40
+    Set_UInt16( pData, cPgFtnEdn );     // 68 0x44
+    Set_UInt32( pData, cParasFtnEdn );  // 70 0x46
+    Set_UInt32( pData, cLinesFtnEdn );  // 74 0x4a
+    Set_UInt32( pData, lKeyProtDoc );   // 78 0x4e
 
-    a16Bit = 0;
+    a16Bit = 0;                         // 82 0x52
     if (wvkSaved)
         a16Bit |= 0x0007;
     a16Bit |= (0x0ff8 & (wScaleSaved << 3));
@@ -6980,16 +7012,16 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
 
     if( 8 == rFib.nVersion )
     {
-        Set_UInt32(pData, GetCompatabilityOptions());
+        Set_UInt32(pData, GetCompatabilityOptions());  // 84 0x54
 
-        Set_UInt16( pData, adt );
+        Set_UInt16( pData, adt );                      // 88 0x58
 
-        doptypography.WriteToMem(pData);
+        doptypography.WriteToMem(pData);               // 400 0x190
 
         memcpy( pData, &dogrid, sizeof( WW8_DOGRID ));
         pData += sizeof( WW8_DOGRID );
 
-        a16Bit = 0x12;      // lvl auf 9 setzen
+        a16Bit = 0x12;      // lvl auf 9 setzen        // 410 0x19a
         if( fHtmlDoc )          a16Bit |= 0x0200;
         if( fSnapBorder )       a16Bit |= 0x0800;
         if( fIncludeHeader )    a16Bit |= 0x1000;
@@ -6998,28 +7030,28 @@ bool WW8Dop::Write(SvStream& rStrm, WW8F
         if( fMinFontSizePag )   a16Bit |= 0x8000;
         Set_UInt16( pData, a16Bit );
 
-        a16Bit = 0;
+        a16Bit = 0;                                    // 412 0x19c
         if( fHaveVersions ) a16Bit |= 0x0001;
         if( fAutoVersion )  a16Bit |= 0x0002;
         Set_UInt16( pData, a16Bit );
 
-        pData += 12;
+        pData += 12;                                   // 414 0x19e
 
-        Set_UInt32( pData, cChWS );
-        Set_UInt32( pData, cChWSFtnEdn );
-        Set_UInt32( pData, grfDocEvents );
+        Set_UInt32( pData, cChWS );                    // 426 0x1aa
+        Set_UInt32( pData, cChWSFtnEdn );              // 430 0x1ae
+        Set_UInt32( pData, grfDocEvents );             // 434 0x1b2
 
-        pData += 4+30+8;
+        pData += 4+30+8;  // 438 0x1b6; 442 0x1ba; 472 0x1d8; 476 0x1dc
 
-        Set_UInt32( pData, cDBC );
-        Set_UInt32( pData, cDBCFtnEdn );
+        Set_UInt32( pData, cDBC );                     // 480 0x1e0
+        Set_UInt32( pData, cDBCFtnEdn );               // 484 0x1e4
 
-        pData += 1 * sizeof( INT32);
+        pData += 1 * sizeof( INT32);                   // 488 0x1e8
 
-        Set_UInt16( pData, nfcFtnRef );
-        Set_UInt16( pData, nfcEdnRef );
-        Set_UInt16( pData, hpsZoonFontPag );
-        Set_UInt16( pData, dywDispPag );
+        Set_UInt16( pData, nfcFtnRef );                // 492 0x1ec
+        Set_UInt16( pData, nfcEdnRef );                // 494 0x1ee
+        Set_UInt16( pData, hpsZoonFontPag );           // 496 0x1f0
+        Set_UInt16( pData, dywDispPag );               // 498 0x1f2
 
         //500 -> 508, Appear to be repeated here in 2000+
         pData += 8;
Index: sw/source/filter/ww8/ww8scan.hxx
===================================================================
RCS file: /cvs/sw/sw/source/filter/ww8/ww8scan.hxx,v
retrieving revision 1.83
retrieving revision 1.82.104.3
diff -u -p -u -p -b -w -B -r1.83 -r1.82.104.3
--- sw/source/filter/ww8/ww8scan.hxx	19 Aug 2008 10:50:04 -0000	1.83
+++ sw/source/filter/ww8/ww8scan.hxx	29 Aug 2008 14:25:54 -0000	1.82.104.3
@@ -1003,6 +1003,19 @@ public:
          des Winword-FIB)
     */
     UINT16 wIdent;      // 0x0 int magic number
+    /*
+        File Information Block (FIB) values:
+        WinWord 1.0 = 33
+        WinWord 2.0 = 45
+        WinWord 6.0c for 16bit = 101
+        Word 6/32 bit = 104
+        Word 95 = 104
+        Word 97 = 193
+        Word 2000 = 217
+        Word 2002 = 257
+        Word 2003 = 268
+        Word 2007 = 274
+    */
     UINT16 nFib;        // 0x2 FIB version written
     UINT16 nProduct;    // 0x4 product version written by
     INT16 lid;          // 0x6 language stamp---localized version;
@@ -1023,6 +1036,7 @@ public:
                                                     // to decide which table stream is valid.
 
     UINT16 fExtChar :1; // 1000 =1, when using extended character set in file
+    UINT16 fFarEast :1; // 4000 =1, probably, when far-East language vaiants of Word is used to create a file #i90932#
 
 
     UINT16 nFibBack;    // 0xc
@@ -1407,6 +1421,11 @@ public:
     INT32 cpnBteChp;
     INT32 cpnBtePap;
     /*
+        The actual nFib, moved here because some readers assumed 
+        they couldn't read any format with nFib > some constant
+    */
+    UINT16 nFib_actual; // 0x05bc #i56856#
+    /*
         nun wird lediglich noch ein Ctor benoetigt
     */
     WW8Fib( SvStream& rStrm, BYTE nWantedVersion,UINT32 nOffset=0 );
@@ -1536,6 +1555,7 @@ public:
     UINT16 copts_fTransparentMetafiles : 1; //    when 1, don�t blank area between metafile pictures
     UINT16 copts_fShowBreaksInFrames : 1;   //    when 1, show hard page or column breaks in frames
     UINT16 copts_fSwapBordersFacingPgs : 1; //    when 1, swap left and right pages on odd facing pages
+    UINT16 copts_fExpShRtn : 1;             //    when 1, expand character spaces on the line ending SHIFT+RETURN  // #i56856#
 
     INT16  dxaTab;              // 720 twips    default tab width
     UINT16 wSpare;              //
@@ -1596,7 +1616,7 @@ public:
     UINT32 fShowBreaksInFrames              :1; // see above
     UINT32 fSwapBordersFacingPgs            :1; // see above
 	UINT32 fCompatabilityOptions_Unknown1_13	:1; // #i78591#
-	UINT32 fCompatabilityOptions_Unknown1_14	:1; // #i78591#
+	UINT32 fExpShRtn				:1; // #i78591# and #i56856#
 	UINT32 fCompatabilityOptions_Unknown1_15	:1; // #i78591#
 	UINT32 fCompatabilityOptions_Unknown1_16	:1; // #i78591#
     UINT32 fSuppressTopSpacingMac5      :1; // Suppress extra line spacing at top
