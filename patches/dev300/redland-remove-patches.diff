From d24c434386753863001693fa922ed12d4c915223 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:58:48 +0200
Subject: [PATCH 300/768] redland-remove-patches.diff

---
 configure.in                            |   12 +-
 redland/README                          |    6 +-
 redland/redland/makefile.mk             |    5 +-
 unoxml/source/rdf/librdf_repository.cxx |  201 ++++++++++++++++++++++---------
 4 files changed, 155 insertions(+), 69 deletions(-)

diff --git configure.in configure.in
index f5f48c7..0d5fabc 100644
--- configure.in
+++ configure.in
@@ -555,6 +555,9 @@ AC_ARG_WITH(system-lpsolve,
 ],,)
 AC_ARG_WITH(system-cppunit,
 [  --with-system-cppunit         Use cppunit already on system
+],,)
+AC_ARG_WITH(system-redland,
+[  --with-system-redland   Use redland library already on system
 ],,)
 AC_ARG_WITH(system-mozilla,
 [  --with-system-mozilla   Use mozilla already on system. Note that some
@@ -5147,16 +5149,12 @@ dnl ===================================================================
 dnl Check for system redland
 dnl ===================================================================
 AC_MSG_CHECKING([which redland library to use])
-dnl if test -n "$with_system_redland" -o -n "$with_system_libs" && \
-dnl	test "$with_system_redland" != "no"; then
-dnl mst: NOTE: right now we need patches against redland
-dnl            so we only enable system redland if explicitly requested
-dnl            if next version includes patches, insert version check here
-if test -n "$with_system_redland" && \
+if test -n "$with_system_redland" -o -n "$with_system_libs" && \
 	test "$with_system_redland" != "no"; then
 	AC_MSG_RESULT([external])
 	SYSTEM_REDLAND=YES
-	PKG_CHECK_MODULES(REDLAND, redland)
+   dnl versions before 1.0.8 write RDF/XML that is useless for ODF (@xml:base)
+   PKG_CHECK_MODULES(REDLAND, redland >= 1.0.8)
 else
 	AC_MSG_RESULT([internal])
 	BUILD_TYPE="$BUILD_TYPE REDLAND"
diff --git redland/README redland/README
index d01ae08..87299eb 100644
--- redland/README
+++ redland/README
@@ -22,7 +22,8 @@ Libraries: libraptor, librasqal, librdf
 Patches:
 There are several patches, most of which contain only hacks to get it to
 build with OOo build system.
-There are also 3 patches that fix bugs in redland and are of general interest:
+There used to be also 3 patches here that fix bugs in redland and ought to be
+of general interest:
 - redland-1.0.8.patch.free_null:
   redland destructor functions don't check if argument is NULL
 - redland-1.0.8.patch.storage_hashes_context_serialize_get_statement:
@@ -31,4 +32,7 @@ There are also 3 patches that fix bugs in redland and are of general interest:
 - redland-1.0.8.patch.storage_hashes_list_duplicates:
   hashes, list storage: if contexts are enabled, then it is possible to add
                         duplicate statements
+Attempts to upstream these patches failed for reasons upstream kept to
+themselves.  Now these patches are replaced with workarounds in unoxml.
+Note to future maintainers: work around redland bugs in client code.
 
diff --git redland/redland/makefile.mk redland/redland/makefile.mk
index 9d516aa..558135b 100644
--- redland/redland/makefile.mk
+++ redland/redland/makefile.mk
@@ -58,10 +58,7 @@ OOO_PATCH_FILES= \
     $(TARFILE_NAME).patch.ooo_build \
     $(TARFILE_NAME).patch.win32
 
-PATCH_FILES=$(OOO_PATCH_FILES) \
-    $(TARFILE_NAME).patch.free_null \
-    $(TARFILE_NAME).patch.storage_hashes_context_serialize_get_statement \
-    $(TARFILE_NAME).patch.storage_hashes_list_duplicates
+PATCH_FILES=$(OOO_PATCH_FILES)
 
 .IF "$(OS)"=="OS2"
 BUILD_ACTION=dmake
diff --git unoxml/source/rdf/librdf_repository.cxx unoxml/source/rdf/librdf_repository.cxx
index 9c60f43..340322d 100644
--- unoxml/source/rdf/librdf_repository.cxx
+++ unoxml/source/rdf/librdf_repository.cxx
@@ -125,6 +125,56 @@ bool isInternalContext(librdf_node *i_pNode) throw ()
 
 ////////////////////////////////////////////////////////////////////////////
 
+// n.b.: librdf destructor functions dereference null pointers!
+//       so they need to be wrapped to be usable with boost::shared_ptr.
+static void safe_librdf_free_world(librdf_world *const world)
+{
+    if (world) { librdf_free_world(world); }
+}
+static void safe_librdf_free_model(librdf_model *const model)
+{
+    if (model) { librdf_free_model(model); }
+}
+static void safe_librdf_free_node(librdf_node* node)
+{
+    if (node) { librdf_free_node(node); }
+}
+static void safe_librdf_free_parser(librdf_parser *const parser)
+{
+    if (parser) { librdf_free_parser(parser); }
+}
+static void safe_librdf_free_query(librdf_query *const query)
+{
+    if (query) { librdf_free_query(query); }
+}
+static void
+safe_librdf_free_query_results(librdf_query_results *const query_results)
+{
+    if (query_results) { librdf_free_query_results(query_results); }
+}
+static void safe_librdf_free_serializer(librdf_serializer *const serializer)
+{
+    if (serializer) { librdf_free_serializer(serializer); }
+}
+static void safe_librdf_free_statement(librdf_statement *const statement)
+{
+    if (statement) { librdf_free_statement(statement); }
+}
+static void safe_librdf_free_storage(librdf_storage *const storage)
+{
+    if (storage) { librdf_free_storage(storage); }
+}
+static void safe_librdf_free_stream(librdf_stream *const stream)
+{
+    if (stream) { librdf_free_stream(stream); }
+}
+static void safe_librdf_free_uri(librdf_uri *const uri)
+{
+    if (uri) { librdf_free_uri(uri); }
+}
+
+////////////////////////////////////////////////////////////////////////////
+
 #if 0
 class librdf_Statement:
     public ::cppu::WeakImplHelper1<
@@ -422,11 +472,13 @@ public:
     librdf_GraphResult(librdf_Repository *i_pRepository,
             ::osl::Mutex & i_rMutex,
             boost::shared_ptr<librdf_stream> const& i_pStream,
+            boost::shared_ptr<librdf_node> const& i_pContext,
             boost::shared_ptr<librdf_query>  const& i_pQuery =
                 boost::shared_ptr<librdf_query>() )
         : m_xRep(i_pRepository)
         , m_rMutex(i_rMutex)
         , m_pQuery(i_pQuery)
+        , m_pContext(i_pContext)
         , m_pStream(i_pStream)
     { };
 
@@ -449,8 +501,11 @@ private:
     // the query (in case this is a result of a graph query)
     // not that the redland documentation spells this out explicity, but
     // queries must be freed only after all the results are completely read
-    boost::shared_ptr<librdf_query>  m_pQuery;
-    boost::shared_ptr<librdf_stream> m_pStream;
+    boost::shared_ptr<librdf_query>  const m_pQuery;
+    boost::shared_ptr<librdf_node>   const m_pContext;
+    boost::shared_ptr<librdf_stream> const m_pStream;
+
+    librdf_node* getContext() const;
 };
 
 
@@ -462,6 +517,17 @@ librdf_GraphResult::hasMoreElements() throw (uno::RuntimeException)
     return m_pStream.get() && !librdf_stream_end(m_pStream.get());
 }
 
+librdf_node* librdf_GraphResult::getContext() const
+{
+    if (!m_pStream.get() || librdf_stream_end(m_pStream.get()))
+        return NULL;
+    librdf_node *pCtxt( static_cast<librdf_node *>
+        (librdf_stream_get_context(m_pStream.get())) );
+    if (pCtxt)
+        return pCtxt;
+    return m_pContext.get();
+}
+
 ::com::sun::star::uno::Any SAL_CALL
 librdf_GraphResult::nextElement()
 throw (uno::RuntimeException, container::NoSuchElementException,
@@ -469,8 +535,8 @@ throw (uno::RuntimeException, container::NoSuchElementException,
 {
     ::osl::MutexGuard g(m_rMutex);
     if (!m_pStream.get() || !librdf_stream_end(m_pStream.get())) {
-        librdf_node *pCtxt( static_cast<librdf_node *>
-            (librdf_stream_get_context(m_pStream.get())) );
+        librdf_node * pCtxt = getContext();
+
         librdf_statement *pStmt( librdf_stream_get_object(m_pStream.get()) );
         if (!pStmt) {
             rdf::QueryException e(::rtl::OUString::createFromAscii(
@@ -565,7 +631,7 @@ public:
 
     void operator() (librdf_node** io_pArray) const throw ()
     {
-        std::for_each(io_pArray, io_pArray + m_Count, librdf_free_node);
+        std::for_each(io_pArray, io_pArray + m_Count, safe_librdf_free_node);
         delete[] io_pArray;
     }
 };
@@ -778,9 +844,9 @@ osl::Mutex librdf_Repository::m_aMutex;
 librdf_Repository::librdf_Repository(
         uno::Reference< uno::XComponentContext > const & i_xContext)
     : /*BaseMutex(),*/ m_xContext(i_xContext)
-//    m_pWorld  (static_cast<librdf_world  *>(0), librdf_free_world  ),
-    , m_pStorage(static_cast<librdf_storage*>(0), librdf_free_storage)
-    , m_pModel  (static_cast<librdf_model  *>(0), librdf_free_model  )
+//    m_pWorld  (static_cast<librdf_world  *>(0), safe_librdf_free_world  ),
+    , m_pStorage(static_cast<librdf_storage*>(0), safe_librdf_free_storage)
+    , m_pModel  (static_cast<librdf_model  *>(0), safe_librdf_free_model  )
     , m_NamedGraphs()
     , m_TypeConverter(i_xContext, *this)
 {
@@ -788,7 +854,7 @@ librdf_Repository::librdf_Repository(
 
     ::osl::MutexGuard g(m_aMutex);
     if (!m_NumInstances++) {
-        m_pWorld.reset(m_TypeConverter.createWorld(), librdf_free_world);
+        m_pWorld.reset(m_TypeConverter.createWorld(), safe_librdf_free_world);
     }
 }
 
@@ -841,7 +907,7 @@ throw (uno::RuntimeException)
     ::osl::MutexGuard g(m_aMutex);
     const boost::shared_ptr<librdf_node> pNode(
         librdf_new_node_from_blank_identifier(m_pWorld.get(), NULL),
-        librdf_free_node);
+        safe_librdf_free_node);
     if (!pNode) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::createBlankNode: "
@@ -930,7 +996,7 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
     const boost::shared_ptr<librdf_node> pContext(
         librdf_new_node_from_uri_string(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> (context.getStr())),
-        librdf_free_node);
+        safe_librdf_free_node);
     if (!pContext) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::importGraph: "
@@ -942,7 +1008,7 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
     const boost::shared_ptr<librdf_uri> pBaseURI(
         librdf_new_uri(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> (baseURI.getStr())),
-        librdf_free_uri);
+        safe_librdf_free_uri);
     if (!pBaseURI) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::importGraph: "
@@ -951,7 +1017,7 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
 
     const boost::shared_ptr<librdf_parser> pParser(
         librdf_new_parser(m_pWorld.get(), "rdfxml", NULL, NULL),
-        librdf_free_parser);
+        safe_librdf_free_parser);
     if (!pParser) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::importGraph: "
@@ -968,7 +1034,7 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
         librdf_parser_parse_counted_string_as_stream(pParser.get(),
             reinterpret_cast<const unsigned char*>(buf.getConstArray()),
             buf.getLength(), pBaseURI.get()),
-        librdf_free_stream);
+        safe_librdf_free_stream);
     if (!pStream) {
         throw rdf::ParseException(::rtl::OUString::createFromAscii(
             "librdf_Repository::importGraph: "
@@ -1037,7 +1103,7 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
     const boost::shared_ptr<librdf_node> pContext(
         librdf_new_node_from_uri_string(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> (context.getStr())),
-        librdf_free_node);
+        safe_librdf_free_node);
     if (!pContext) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::exportGraph: "
@@ -1048,7 +1114,7 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
     const boost::shared_ptr<librdf_uri> pBaseURI(
         librdf_new_uri(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> (baseURI.getStr())),
-        librdf_free_uri);
+        safe_librdf_free_uri);
     if (!pBaseURI) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::exportGraph: "
@@ -1057,7 +1123,7 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
 
     const boost::shared_ptr<librdf_stream> pStream(
         librdf_model_context_as_stream(m_pModel.get(), pContext.get()),
-        librdf_free_stream);
+        safe_librdf_free_stream);
     if (!pStream) {
         throw rdf::RepositoryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::exportGraph: "
@@ -1067,7 +1133,7 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
     const char *format("rdfxml-abbrev");
     const boost::shared_ptr<librdf_serializer> pSerializer(
         librdf_new_serializer(m_pWorld.get(), format, NULL, NULL),
-        librdf_free_serializer);
+        safe_librdf_free_serializer);
     if (!pSerializer) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::exportGraph: "
@@ -1077,19 +1143,19 @@ throw (uno::RuntimeException, lang::IllegalArgumentException,
     const boost::shared_ptr<librdf_uri> pRelativeURI(
         librdf_new_uri(m_pWorld.get(), reinterpret_cast<const unsigned char*>
                 ("http://feature.librdf.org/raptor-relativeURIs")),
-        librdf_free_uri);
+        safe_librdf_free_uri);
     const boost::shared_ptr<librdf_uri> pWriteBaseURI(
         librdf_new_uri(m_pWorld.get(), reinterpret_cast<const unsigned char*>
             ("http://feature.librdf.org/raptor-writeBaseURI")),
-        librdf_free_uri);
+        safe_librdf_free_uri);
     const boost::shared_ptr<librdf_node> p0(
         librdf_new_node_from_literal(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> ("0"), NULL, 0),
-        librdf_free_node);
+        safe_librdf_free_node);
     const boost::shared_ptr<librdf_node> p1(
         librdf_new_node_from_literal(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> ("1"), NULL, 0),
-        librdf_free_node);
+        safe_librdf_free_node);
     if (!pWriteBaseURI || !pRelativeURI || !p0 || !p1) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::exportGraph: "
@@ -1225,26 +1291,28 @@ throw (uno::RuntimeException, rdf::RepositoryException)
         isMetadatableWithoutMetadata(i_xObject))
     {
         return new librdf_GraphResult(this, m_aMutex,
-            ::boost::shared_ptr<librdf_stream>());
+            ::boost::shared_ptr<librdf_stream>(),
+            ::boost::shared_ptr<librdf_node>());
     }
 
     ::osl::MutexGuard g(m_aMutex);
     const boost::shared_ptr<librdf_statement> pStatement(
         m_TypeConverter.mkStatement(m_pWorld.get(),
             i_xSubject, i_xPredicate, i_xObject),
-        librdf_free_statement);
+        safe_librdf_free_statement);
     OSL_ENSURE(pStatement, "mkStatement failed");
 
     const boost::shared_ptr<librdf_stream> pStream(
         librdf_model_find_statements(m_pModel.get(), pStatement.get()),
-        librdf_free_stream);
+        safe_librdf_free_stream);
     if (!pStream) {
         throw rdf::RepositoryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::getStatements: "
             "librdf_model_find_statements failed"), *this);
     }
 
-    return new librdf_GraphResult(this, m_aMutex, pStream);
+    return new librdf_GraphResult(this, m_aMutex, pStream,
+        ::boost::shared_ptr<librdf_node>());
 }
 
 
@@ -1258,7 +1326,7 @@ throw (uno::RuntimeException, rdf::QueryException, rdf::RepositoryException)
     const boost::shared_ptr<librdf_query> pQuery(
         librdf_new_query(m_pWorld.get(), s_sparql, NULL,
             reinterpret_cast<const unsigned char*> (query.getStr()), NULL),
-        librdf_free_query);
+        safe_librdf_free_query);
     if (!pQuery) {
         throw rdf::QueryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::querySelect: "
@@ -1266,7 +1334,7 @@ throw (uno::RuntimeException, rdf::QueryException, rdf::RepositoryException)
     }
     const boost::shared_ptr<librdf_query_results> pResults(
         librdf_model_query_execute(m_pModel.get(), pQuery.get()),
-        librdf_free_query_results);
+        safe_librdf_free_query_results);
     if (!pResults || !librdf_query_results_is_bindings(pResults.get())) {
         throw rdf::QueryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::querySelect: "
@@ -1308,7 +1376,7 @@ throw (uno::RuntimeException, rdf::QueryException, rdf::RepositoryException)
     const boost::shared_ptr<librdf_query> pQuery(
         librdf_new_query(m_pWorld.get(), s_sparql, NULL,
             reinterpret_cast<const unsigned char*> (query.getStr()), NULL),
-        librdf_free_query);
+        safe_librdf_free_query);
     if (!pQuery) {
         throw rdf::QueryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::queryConstruct: "
@@ -1316,7 +1384,7 @@ throw (uno::RuntimeException, rdf::QueryException, rdf::RepositoryException)
     }
     const boost::shared_ptr<librdf_query_results> pResults(
         librdf_model_query_execute(m_pModel.get(), pQuery.get()),
-        librdf_free_query_results);
+        safe_librdf_free_query_results);
     if (!pResults || !librdf_query_results_is_graph(pResults.get())) {
         throw rdf::QueryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::queryConstruct: "
@@ -1324,14 +1392,15 @@ throw (uno::RuntimeException, rdf::QueryException, rdf::RepositoryException)
     }
     const boost::shared_ptr<librdf_stream> pStream(
         librdf_query_results_as_stream(pResults.get()),
-        librdf_free_stream);
+        safe_librdf_free_stream);
     if (!pStream) {
         throw rdf::QueryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::queryConstruct: "
             "librdf_query_results_as_stream failed"), *this);
     }
 
-    return new librdf_GraphResult(this, m_aMutex, pStream, pQuery);
+    return new librdf_GraphResult(this, m_aMutex, pStream,
+                                  ::boost::shared_ptr<librdf_node>(), pQuery);
 }
 
 ::sal_Bool SAL_CALL
@@ -1345,7 +1414,7 @@ throw (uno::RuntimeException, rdf::QueryException, rdf::RepositoryException)
     const boost::shared_ptr<librdf_query> pQuery(
         librdf_new_query(m_pWorld.get(), s_sparql, NULL,
             reinterpret_cast<const unsigned char*> (query.getStr()), NULL),
-        librdf_free_query);
+        safe_librdf_free_query);
     if (!pQuery) {
         throw rdf::QueryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::queryAsk: "
@@ -1353,7 +1422,7 @@ throw (uno::RuntimeException, rdf::QueryException, rdf::RepositoryException)
     }
     const boost::shared_ptr<librdf_query_results> pResults(
         librdf_model_query_execute(m_pModel.get(), pQuery.get()),
-        librdf_free_query_results);
+        safe_librdf_free_query_results);
     if (!pResults || !librdf_query_results_is_boolean(pResults.get())) {
         throw rdf::QueryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::queryAsk: "
@@ -1608,19 +1677,20 @@ throw (uno::RuntimeException, rdf::RepositoryException)
         isMetadatableWithoutMetadata(i_xObject))
     {
         return new librdf_GraphResult(this, m_aMutex,
-            ::boost::shared_ptr<librdf_stream>());
+            ::boost::shared_ptr<librdf_stream>(),
+            ::boost::shared_ptr<librdf_node>());
     }
 
     ::osl::MutexGuard g(m_aMutex);
     const boost::shared_ptr<librdf_statement> pStatement(
         m_TypeConverter.mkStatement(m_pWorld.get(),
             i_xSubject, i_xPredicate, i_xObject),
-        librdf_free_statement);
+        safe_librdf_free_statement);
     OSL_ENSURE(pStatement, "mkStatement failed");
 
     const boost::shared_ptr<librdf_stream> pStream(
         librdf_model_find_statements(m_pModel.get(), pStatement.get()),
-        librdf_free_stream);
+        safe_librdf_free_stream);
     if (!pStream) {
         throw rdf::RepositoryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::getStatementsRDFa: "
@@ -1634,7 +1704,8 @@ throw (uno::RuntimeException, rdf::RepositoryException)
             "librdf_stream_add_map failed"), *this);
     }
 
-    return new librdf_GraphResult(this, m_aMutex, pStream);
+    return new librdf_GraphResult(this, m_aMutex, pStream,
+                                  ::boost::shared_ptr<librdf_node>());
 }
 
 // ::com::sun::star::lang::XInitialization:
@@ -1646,11 +1717,11 @@ throw (uno::RuntimeException, uno::Exception)
 
     ::osl::MutexGuard g(m_aMutex);
 
-//    m_pWorld.reset(m_TypeConverter.createWorld(), librdf_free_world);
+//    m_pWorld.reset(m_TypeConverter.createWorld(), safe_librdf_free_world);
     m_pStorage.reset(m_TypeConverter.createStorage(m_pWorld.get()),
-        librdf_free_storage);
+        safe_librdf_free_storage);
     m_pModel.reset(m_TypeConverter.createModel(
-        m_pWorld.get(), m_pStorage.get()), librdf_free_model);
+        m_pWorld.get(), m_pStorage.get()), safe_librdf_free_model);
 }
 
 const NamedGraphMap_t::iterator SAL_CALL librdf_Repository::clearGraph(
@@ -1677,7 +1748,7 @@ const NamedGraphMap_t::iterator SAL_CALL librdf_Repository::clearGraph(
     const boost::shared_ptr<librdf_node> pContext(
         librdf_new_node_from_uri_string(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> (context.getStr())),
-        librdf_free_node);
+        safe_librdf_free_node);
     if (!pContext) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::clearGraph: "
@@ -1728,7 +1799,7 @@ void SAL_CALL librdf_Repository::addStatementGraph(
     const boost::shared_ptr<librdf_node> pContext(
         librdf_new_node_from_uri_string(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> (context.getStr())),
-        librdf_free_node);
+        safe_librdf_free_node);
     if (!pContext) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::addStatement: "
@@ -1737,8 +1808,21 @@ void SAL_CALL librdf_Repository::addStatementGraph(
     const boost::shared_ptr<librdf_statement> pStatement(
         m_TypeConverter.mkStatement(m_pWorld.get(),
             i_xSubject, i_xPredicate, i_xObject),
-        librdf_free_statement);
+        safe_librdf_free_statement);
     OSL_ENSURE(pStatement, "mkStatement failed");
+
+    // Test for duplicate statement
+    // librdf_model_add_statement disallows duplicates while
+    // librdf_model_context_add_statement allows duplicates
+    {
+        const boost::shared_ptr<librdf_stream> pStream(
+            librdf_model_find_statements_in_context(m_pModel.get(),
+                pStatement.get(), pContext.get()),
+            safe_librdf_free_stream);
+        if (pStream && !librdf_stream_end(pStream.get()))
+            return;
+    }
+
     if (librdf_model_context_add_statement(m_pModel.get(),
             pContext.get(), pStatement.get())) {
         throw rdf::RepositoryException(::rtl::OUString::createFromAscii(
@@ -1776,7 +1860,7 @@ void SAL_CALL librdf_Repository::removeStatementsGraph(
     const boost::shared_ptr<librdf_node> pContext(
         librdf_new_node_from_uri_string(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> (context.getStr())),
-        librdf_free_node);
+        safe_librdf_free_node);
     if (!pContext) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::removeStatements: "
@@ -1785,13 +1869,13 @@ void SAL_CALL librdf_Repository::removeStatementsGraph(
     const boost::shared_ptr<librdf_statement> pStatement(
         m_TypeConverter.mkStatement(m_pWorld.get(),
             i_xSubject, i_xPredicate, i_xObject),
-        librdf_free_statement);
+        safe_librdf_free_statement);
     OSL_ENSURE(pStatement, "mkStatement failed");
 
     const boost::shared_ptr<librdf_stream> pStream(
         librdf_model_find_statements_in_context(m_pModel.get(),
             pStatement.get(), pContext.get()),
-        librdf_free_stream);
+        safe_librdf_free_stream);
     if (!pStream) {
         throw rdf::RepositoryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::removeStatements: "
@@ -1835,7 +1919,8 @@ librdf_Repository::getStatementsGraph(
         isMetadatableWithoutMetadata(i_xObject))
     {
         return new librdf_GraphResult(this, m_aMutex,
-            ::boost::shared_ptr<librdf_stream>());
+            ::boost::shared_ptr<librdf_stream>(),
+            ::boost::shared_ptr<librdf_node>());
     }
 
     ::osl::MutexGuard g(m_aMutex);
@@ -1852,7 +1937,7 @@ librdf_Repository::getStatementsGraph(
     const boost::shared_ptr<librdf_node> pContext(
         librdf_new_node_from_uri_string(m_pWorld.get(),
             reinterpret_cast<const unsigned char*> (context.getStr())),
-        librdf_free_node);
+        safe_librdf_free_node);
     if (!pContext) {
         throw uno::RuntimeException(::rtl::OUString::createFromAscii(
             "librdf_Repository::getStatements: "
@@ -1861,20 +1946,22 @@ librdf_Repository::getStatementsGraph(
     const boost::shared_ptr<librdf_statement> pStatement(
         m_TypeConverter.mkStatement(m_pWorld.get(),
             i_xSubject, i_xPredicate, i_xObject),
-        librdf_free_statement);
+        safe_librdf_free_statement);
     OSL_ENSURE(pStatement, "mkStatement failed");
 
     const boost::shared_ptr<librdf_stream> pStream(
         librdf_model_find_statements_in_context(m_pModel.get(),
             pStatement.get(), pContext.get()),
-        librdf_free_stream);
+        safe_librdf_free_stream);
     if (!pStream) {
         throw rdf::RepositoryException(::rtl::OUString::createFromAscii(
             "librdf_Repository::getStatements: "
             "librdf_model_find_statements_in_context failed"), *this);
     }
 
-    return new librdf_GraphResult(this, m_aMutex, pStream);
+    // librdf_model_find_statements_in_context is buggy and does not put
+    // the context into result statements; pass it to librdf_GraphResult here
+    return new librdf_GraphResult(this, m_aMutex, pStream, pContext);
 }
 
 librdf_world *librdf_TypeConverter::createWorld() const
@@ -1926,8 +2013,8 @@ librdf_model *librdf_TypeConverter::createModel(
         prtNode(contexts);
         std::cout << std::endl;
         // librdf_model_set_feature(repository, LIBRDF_FEATURE_CONTEXTS, ...);
-        librdf_free_node(contexts);
-        librdf_free_uri(ctxt);
+        safe_librdf_free_node(contexts);
+        safe_librdf_free_uri(ctxt);
     }
 #endif
     return pRepository;
@@ -2012,7 +2099,7 @@ librdf_node* librdf_TypeConverter::mkNode( librdf_world* i_pWorld,
                 NULL, 0);
         } else {
             const boost::shared_ptr<librdf_uri> pDatatype(
-                mkURI(i_pWorld, xType), librdf_free_uri);
+                mkURI(i_pWorld, xType), safe_librdf_free_uri);
             ret = librdf_new_node_from_typed_literal(i_pWorld,
                 reinterpret_cast<const unsigned char*> (val.getStr()),
                 NULL, pDatatype.get());
@@ -2051,11 +2138,11 @@ librdf_statement* librdf_TypeConverter::mkStatement( librdf_world* i_pWorld,
         try {
             pObject = mkNode(i_pWorld, i_xObject);
         } catch (...) {
-            librdf_free_node(pPredicate);
+            safe_librdf_free_node(pPredicate);
             throw;
         }
     } catch (...) {
-        librdf_free_node(pSubject);
+        safe_librdf_free_node(pSubject);
         throw;
     }
     // NB: this takes ownership of the nodes! (which is really ugly)
-- 
1.7.0.1

