From 80cc089128057b109b86e26ab12ae43e28acb02c Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:00:36 +0200
Subject: [PATCH 357/768] docx-vml-import.diff

---
 oox/inc/oox/helper/helper.hxx                      |    4 +-
 oox/inc/oox/vml/vmlshape.hxx                       |    2 +
 oox/inc/oox/vml/vmlshapecontainer.hxx              |    2 +
 oox/inc/oox/vml/vmlshapecontext.hxx                |   17 ++++
 oox/source/shape/ShapeContextHandler.cxx           |    4 +
 oox/source/vml/vmldrawingfragment.cxx              |    2 +-
 oox/source/vml/vmlshape.cxx                        |   81 ++++++++++++++++++-
 oox/source/vml/vmlshapecontext.cxx                 |   23 ++++++
 writerfilter/inc/ooxml/OOXMLDocument.hxx           |    3 +
 writerfilter/source/dmapper/OLEHandler.cxx         |    2 +-
 writerfilter/source/ooxml/OOXMLDocumentImpl.cxx    |   10 +++
 writerfilter/source/ooxml/OOXMLDocumentImpl.hxx    |    3 +
 .../source/ooxml/OOXMLFastContextHandler.cxx       |   20 +++--
 13 files changed, 157 insertions(+), 16 deletions(-)

diff --git oox/inc/oox/helper/helper.hxx oox/inc/oox/helper/helper.hxx
index 49f0602..1baceb1 100644
--- oox/inc/oox/helper/helper.hxx
+++ oox/inc/oox/helper/helper.hxx
@@ -72,8 +72,8 @@ namespace oox {
 // ============================================================================
 
 const sal_Int32 API_RGB_TRANSPARENT         = -1;       /// Transparent color for API calls.
-const sal_Int32 API_RGB_BLACK               = 0x00000;  /// Black color for API calls.
-const sal_Int32 API_RGB_WHITE               = 0xFFFFF;  /// White color for API calls.
+const sal_Int32 API_RGB_BLACK               = 0x000000;  /// Black color for API calls.
+const sal_Int32 API_RGB_WHITE               = 0xFFFFFF;  /// White color for API calls.
 
 const sal_Int16 API_LINE_NONE               = 0;
 const sal_Int16 API_LINE_HAIR               = 2;
diff --git oox/inc/oox/vml/vmlshape.hxx oox/inc/oox/vml/vmlshape.hxx
index 2a2fb52..85d70e9 100644
--- oox/inc/oox/vml/vmlshape.hxx
+++ oox/inc/oox/vml/vmlshape.hxx
@@ -209,6 +209,8 @@ class SimpleShape : public ShapeBase
 public:
     explicit            SimpleShape( const Drawing& rDrawing, const ::rtl::OUString& rService );
 
+    void setService( rtl::OUString aService ) { maService = aService; }
+
 protected:
     /** Creates the corresponding XShape and inserts it into the passed container. */
     virtual ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XShape >
diff --git oox/inc/oox/vml/vmlshapecontainer.hxx oox/inc/oox/vml/vmlshapecontainer.hxx
index f9baebd..862e58a 100644
--- oox/inc/oox/vml/vmlshapecontainer.hxx
+++ oox/inc/oox/vml/vmlshapecontainer.hxx
@@ -95,6 +95,8 @@ public:
                             const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XShapes >& rxShapes,
                             const ShapeParentAnchor* pParentAnchor = 0 ) const;
 
+    inline void                clearShapes( ) { maShapes.clear( ); }
+
 private:
     typedef RefVector< ShapeType >                  ShapeTypeVector;
     typedef RefVector< ShapeBase >                  ShapeVector;
diff --git oox/inc/oox/vml/vmlshapecontext.hxx oox/inc/oox/vml/vmlshapecontext.hxx
index 2792dd3..876d6b4 100644
--- oox/inc/oox/vml/vmlshapecontext.hxx
+++ oox/inc/oox/vml/vmlshapecontext.hxx
@@ -40,6 +40,7 @@ struct ShapeClientData;
 struct ShapeModel;
 class ShapeBase;
 class GroupShape;
+class RectangleShape;
 
 class ShapeContainer;
 
@@ -115,6 +116,9 @@ private:
     /** Processes the 'points' attribute. */
     void                setPoints( const ::rtl::OUString& rPoints );
 
+protected:
+    ShapeBase&          mrShape;
+
 private:
     ShapeModel&         mrShapeModel;
 };
@@ -138,6 +142,19 @@ private:
 
 // ============================================================================
 
+class RectangleShapeContext : public ShapeContext
+{
+public:
+    explicit            RectangleShapeContext(
+                            ::oox::core::ContextHandler2Helper& rParent,
+                            const AttributeList& rAttribs,
+                            RectangleShape& rShape );
+
+    virtual ::oox::core::ContextHandlerRef
+                        onCreateContext( sal_Int32 nElement, const AttributeList& rAttribs );
+};
+// ============================================================================
+
 } // namespace vml
 } // namespace oox
 
diff --git oox/source/shape/ShapeContextHandler.cxx oox/source/shape/ShapeContextHandler.cxx
index e610935..bdd7833 100644
--- oox/source/shape/ShapeContextHandler.cxx
+++ oox/source/shape/ShapeContextHandler.cxx
@@ -236,12 +236,16 @@ ShapeContextHandler::getShape() throw (uno::RuntimeException)
         {
             mpDrawing->finalizeFragmentImport();
             if( const ::oox::vml::ShapeBase* pShape = mpDrawing->getShapes().getFirstShape() )
+            {
+                mpDrawing->getShapes( ).clearShapes( );
                 xResult = pShape->convertAndInsert( xShapes );
+            }
         }
         else if (mpShape.get() != NULL)
         {
             mpShape->addShape(*mxFilterBase, mpThemePtr.get(), xShapes);
             xResult.set(mpShape->getXShape());
+            mxGraphicShapeContext.clear( );
         }
     }
 
diff --git oox/source/vml/vmldrawingfragment.cxx oox/source/vml/vmldrawingfragment.cxx
index cc9e9da..cb40407 100644
--- oox/source/vml/vmldrawingfragment.cxx
+++ oox/source/vml/vmldrawingfragment.cxx
@@ -59,7 +59,7 @@ ContextHandlerRef DrawingFragment::onCreateContext( sal_Int32 nElement, const At
     {
         // DOCX filter handles plain shape elements with this fragment handler
         case VMLDRAWING_WORD:
-            if( isRootElement() )
+            if ( getNamespace( nElement ) == NMSP_VML )
                 return ShapeContextBase::createShapeContext( *this, nElement, rAttribs, mrDrawing.getShapes() );
         break;
 
diff --git oox/source/vml/vmlshape.cxx oox/source/vml/vmlshape.cxx
index 313875f..a51d9a8 100644
--- oox/source/vml/vmlshape.cxx
+++ oox/source/vml/vmlshape.cxx
@@ -29,12 +29,20 @@
 #include <rtl/math.hxx>
 #include <com/sun/star/lang/XMultiServiceFactory.hpp>
 #include <com/sun/star/beans/PropertyValues.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/awt/XControlModel.hpp>
 #include <com/sun/star/drawing/PointSequenceSequence.hpp>
 #include <com/sun/star/drawing/XControlShape.hpp>
 #include <com/sun/star/drawing/XEnhancedCustomShapeDefaulter.hpp>
 #include <com/sun/star/drawing/XShapes.hpp>
 #include <com/sun/star/graphic/XGraphic.hpp>
+#include <com/sun/star/text/HoriOrientation.hpp>
+#include <com/sun/star/text/RelOrientation.hpp>
+#include <com/sun/star/text/SizeType.hpp>
+#include <com/sun/star/text/VertOrientation.hpp>
+#include <com/sun/star/text/XTextContent.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/text/XTextFrame.hpp>
 #include "properties.hxx"
 #include "oox/helper/propertymap.hxx"
 #include "oox/helper/propertyset.hxx"
@@ -46,6 +54,8 @@
 #include "oox/vml/vmlshapecontainer.hxx"
 
 using ::rtl::OUString;
+using ::com::sun::star::beans::XPropertySet;
+using ::com::sun::star::uno::Any;
 using ::com::sun::star::uno::Exception;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::UNO_QUERY;
@@ -64,6 +74,8 @@ using ::com::sun::star::drawing::XShape;
 using ::com::sun::star::drawing::XShapes;
 using ::oox::core::XmlFilterBase;
 
+using namespace ::com::sun::star::text;
+
 namespace oox {
 namespace vml {
 
@@ -123,13 +135,62 @@ void lclInsertXShape( const Reference< XShapes >& rxShapes, const Reference< XSh
     }
 }
 
+void lclInsertTextFrame( const XmlFilterBase& rFilter, const Reference< XShape >& rxShape )
+{
+    OSL_ENSURE( rxShape.is(), "lclInsertTextFrame - missing XShape" );
+    if ( rxShape.is( ) )
+    {
+        try
+        {
+            Reference< XTextDocument > xDoc( rFilter.getModel( ), UNO_QUERY_THROW );
+            Reference< XTextContent > xCtnt( rxShape, UNO_QUERY_THROW );
+            xCtnt->attach( xDoc->getText( )->getStart( ) );
+        }
+        catch( Exception& )
+        {
+        }
+    }
+}
+
 void lclSetXShapeRect( const Reference< XShape >& rxShape, const Rectangle& rShapeRect )
 {
     OSL_ENSURE( rxShape.is(), "lclSetXShapeRect - missing XShape" );
     if( rxShape.is() )
     {
-        rxShape->setPosition( Point( rShapeRect.X, rShapeRect.Y ) );
-        rxShape->setSize( Size( rShapeRect.Width, rShapeRect.Height ) );
+        Reference< XTextFrame > xTextFrame( rxShape, UNO_QUERY );
+        if ( !xTextFrame.is( ) )
+        {
+            rxShape->setPosition( Point( rShapeRect.X, rShapeRect.Y ) );
+            rxShape->setSize( Size( rShapeRect.Width, rShapeRect.Height ) );
+        }
+        else
+        {
+            Reference< XPropertySet > xProps( xTextFrame, UNO_QUERY_THROW );
+            try
+            {
+                // The size
+                xProps->setPropertyValue( OUString::createFromAscii( "SizeType" ), Any( SizeType::FIX ) );
+                xProps->setPropertyValue( OUString::createFromAscii( "FrameIsAutomaticHeight" ), Any( sal_False ) );
+                xProps->setPropertyValue( OUString::createFromAscii( "Height" ), Any( rShapeRect.Height ) );
+                xProps->setPropertyValue( OUString::createFromAscii( "Width" ), Any( rShapeRect.Width ) );
+
+                // The position
+                xProps->setPropertyValue( OUString::createFromAscii( "HoriOrientPosition" ), Any( rShapeRect.X ) );
+                xProps->setPropertyValue( OUString::createFromAscii( "HoriOrientRelation" ),
+                        Any( RelOrientation::FRAME ) );
+                xProps->setPropertyValue( OUString::createFromAscii( "HoriOrient" ),
+                        Any( HoriOrientation::NONE ) );
+
+                xProps->setPropertyValue( OUString::createFromAscii( "VertOrientPosition" ), Any( rShapeRect.Y ) );
+                xProps->setPropertyValue( OUString::createFromAscii( "VertOrientRelation" ),
+                        Any( RelOrientation::FRAME ) );
+                xProps->setPropertyValue( OUString::createFromAscii( "VertOrient" ),
+                        Any( VertOrientation::NONE ) );
+            }
+            catch ( Exception& )
+            {
+            }
+        }
     }
 }
 
@@ -137,8 +198,12 @@ Reference< XShape > lclCreateAndInsertXShape( const XmlFilterBase& rFilter,
         const Reference< XShapes >& rxShapes, const OUString& rService, const Rectangle& rShapeRect )
 {
     Reference< XShape > xShape = lclCreateXShape( rFilter, rService );
-    lclInsertXShape( rxShapes, xShape );
+    if ( rService.equalsAscii( "com.sun.star.text.TextFrame" ) )
+        lclInsertTextFrame( rFilter, xShape );
+    else
+        lclInsertXShape( rxShapes, xShape );
     lclSetXShapeRect( xShape, rShapeRect );
+
     return xShape;
 }
 
@@ -196,11 +261,17 @@ Rectangle ShapeType::getRectangle( const ShapeParentAnchor* pParentAnchor ) cons
 Rectangle ShapeType::getAbsRectangle() const
 {
     const XmlFilterBase& rFilter = mrDrawing.getFilter();
+
+    sal_Int32 nWidth = ConversionHelper::decodeMeasureToHmm( rFilter, maTypeModel.maWidth, 0, true, true );
+    if ( nWidth == 0 )  nWidth = 1;
+
+    sal_Int32 nHeight = ConversionHelper::decodeMeasureToHmm( rFilter, maTypeModel.maHeight, 0, true, true );
+    if ( nHeight == 0 )  nHeight = 1;
+
     return Rectangle(
         ConversionHelper::decodeMeasureToHmm( rFilter, maTypeModel.maLeft, 0, true, true ) + ConversionHelper::decodeMeasureToHmm( rFilter, maTypeModel.maMarginLeft, 0, true, true ),
         ConversionHelper::decodeMeasureToHmm( rFilter, maTypeModel.maTop, 0, false, true ) + ConversionHelper::decodeMeasureToHmm( rFilter, maTypeModel.maMarginTop, 0, false, true ),
-        ConversionHelper::decodeMeasureToHmm( rFilter, maTypeModel.maWidth, 0, true, true ),
-        ConversionHelper::decodeMeasureToHmm( rFilter, maTypeModel.maHeight, 0, false, true ) );
+        nWidth, nHeight );
 }
 
 Rectangle ShapeType::getRelRectangle() const
diff --git oox/source/vml/vmlshapecontext.cxx oox/source/vml/vmlshapecontext.cxx
index cf529fb..710a9f9 100644
--- oox/source/vml/vmlshapecontext.cxx
+++ oox/source/vml/vmlshapecontext.cxx
@@ -155,6 +155,7 @@ ShapeContextBase::ShapeContextBase( ContextHandler2Helper& rParent ) :
         case VML_TOKEN( shape ):
             return new ShapeContext( rParent, rAttribs, rShapes.createShape< ComplexShape >() );
         case VML_TOKEN( rect ):
+            return new RectangleShapeContext( rParent, rAttribs, rShapes.createShape< RectangleShape >() );
         case VML_TOKEN( roundrect ):
             return new ShapeContext( rParent, rAttribs, rShapes.createShape< RectangleShape >() );
         case VML_TOKEN( oval ):
@@ -270,6 +271,7 @@ void ShapeTypeContext::setStyle( const OUString& rStyle )
 
 ShapeContext::ShapeContext( ContextHandler2Helper& rParent, const AttributeList& rAttribs, ShapeBase& rShape ) :
     ShapeTypeContext( rParent, rAttribs, rShape ),
+    mrShape( rShape ),
     mrShapeModel( rShape.getShapeModel() )
 {
     // collect shape specific attributes
@@ -280,6 +282,11 @@ ShapeContext::ShapeContext( ContextHandler2Helper& rParent, const AttributeList&
 
 ContextHandlerRef ShapeContext::onCreateContext( sal_Int32 nElement, const AttributeList& rAttribs )
 {
+    // Custom shape in Writer with a textbox are transformed into a frame
+    if ( nElement == ( NMSP_VML + XML_textbox ) )
+        dynamic_cast<SimpleShape&>( mrShape ).setService(
+            OUString::createFromAscii( "com.sun.star.text.TextFrame" ) );
+
     // Excel specific shape client data
     if( isRootElement() && (nElement == VMLX_TOKEN( ClientData )) )
         return new ShapeClientDataContext( *this, rAttribs, mrShapeModel.createClientData() );
@@ -317,6 +324,22 @@ ContextHandlerRef GroupShapeContext::onCreateContext( sal_Int32 nElement, const
 
 // ============================================================================
 
+RectangleShapeContext::RectangleShapeContext( ContextHandler2Helper& rParent, const AttributeList& rAttribs, RectangleShape& rShape ) :
+    ShapeContext( rParent, rAttribs, rShape )
+{
+}
+
+ContextHandlerRef RectangleShapeContext::onCreateContext( sal_Int32 nElement, const AttributeList& rAttribs )
+{
+    if ( nElement == ( NMSP_VML + XML_textbox ) )
+        dynamic_cast< SimpleShape &>( mrShape ).setService(
+            OUString::createFromAscii( "com.sun.star.text.TextFrame" ) );
+
+    // The parent class's context is fine
+    return ShapeContext::onCreateContext( nElement, rAttribs );
+}
+// ============================================================================
+
 } // namespace vml
 } // namespace oox
 
diff --git writerfilter/inc/ooxml/OOXMLDocument.hxx writerfilter/inc/ooxml/OOXMLDocument.hxx
index cf9c2b2..1bfa014 100644
--- writerfilter/inc/ooxml/OOXMLDocument.hxx
+++ writerfilter/inc/ooxml/OOXMLDocument.hxx
@@ -41,6 +41,7 @@
 #endif
 #include <com/sun/star/xml/sax/XFastParser.hpp>
 #include <com/sun/star/xml/sax/XFastTokenHandler.hpp>
+#include <com/sun/star/xml/sax/XFastShapeContextHandler.hpp>
 #include <com/sun/star/frame/XModel.hpp>
 #include <com/sun/star/drawing/XDrawPage.hpp>
 
@@ -250,6 +251,8 @@ public:
     virtual void setXNoteType(const Id & nId) = 0;
     virtual const Id & getXNoteType() const = 0;
     virtual const ::rtl::OUString & getTarget() const = 0;
+    virtual uno::Reference<xml::sax::XFastShapeContextHandler> getShapeContext( ) = 0;
+    virtual void setShapeContext( uno::Reference<xml::sax::XFastShapeContextHandler> xContext ) = 0;
 };
 
 
diff --git writerfilter/source/dmapper/OLEHandler.cxx writerfilter/source/dmapper/OLEHandler.cxx
index ed4305d..e9a393d 100644
--- writerfilter/source/dmapper/OLEHandler.cxx
+++ writerfilter/source/dmapper/OLEHandler.cxx
@@ -54,7 +54,7 @@ using namespace ::com::sun::star;
 OLEHandler::OLEHandler() :
     m_nDxaOrig(0),
     m_nDyaOrig(0),
-    m_nWrapMode(0)
+    m_nWrapMode(1)
 {
 }
 /*-- 23.04.2008 10:46:14---------------------------------------------------
diff --git writerfilter/source/ooxml/OOXMLDocumentImpl.cxx writerfilter/source/ooxml/OOXMLDocumentImpl.cxx
index 07ffa89..8b1adfe 100644
--- writerfilter/source/ooxml/OOXMLDocumentImpl.cxx
+++ writerfilter/source/ooxml/OOXMLDocumentImpl.cxx
@@ -394,6 +394,16 @@ uno::Reference<io::XInputStream> OOXMLDocumentImpl::getStorageStream()
     return mpStream->getStorageStream();
 }
 
+void OOXMLDocumentImpl::setShapeContext( uno::Reference<xml::sax::XFastShapeContextHandler> xContext )
+{
+    mxShapeContext = xContext;
+}
+
+uno::Reference<xml::sax::XFastShapeContextHandler> OOXMLDocumentImpl::getShapeContext( )
+{
+    return mxShapeContext;
+}
+
 OOXMLDocument *
 OOXMLDocumentFactory::createDocument
 (OOXMLStream::Pointer_t pStream)
diff --git writerfilter/source/ooxml/OOXMLDocumentImpl.hxx writerfilter/source/ooxml/OOXMLDocumentImpl.hxx
index 7aa2d43..e661dcf 100644
--- writerfilter/source/ooxml/OOXMLDocumentImpl.hxx
+++ writerfilter/source/ooxml/OOXMLDocumentImpl.hxx
@@ -49,6 +49,7 @@ class OOXMLDocumentImpl : public OOXMLDocument
 
     uno::Reference<frame::XModel> mxModel;
     uno::Reference<drawing::XDrawPage> mxDrawPage;
+    uno::Reference<xml::sax::XFastShapeContextHandler> mxShapeContext;
 
     bool mbIsSubstream;
 
@@ -107,6 +108,8 @@ public:
     virtual void setXNoteType(const Id & rId);
     virtual const Id & getXNoteType() const;
     virtual const ::rtl::OUString & getTarget() const;
+    virtual uno::Reference<xml::sax::XFastShapeContextHandler> getShapeContext( );
+    virtual void setShapeContext( uno::Reference<xml::sax::XFastShapeContextHandler> xContext );
 };
 }}
 #endif // OOXML_DOCUMENT_IMPL_HXX
diff --git writerfilter/source/ooxml/OOXMLFastContextHandler.cxx writerfilter/source/ooxml/OOXMLFastContextHandler.cxx
index f33214b..946c29e 100644
--- writerfilter/source/ooxml/OOXMLFastContextHandler.cxx
+++ writerfilter/source/ooxml/OOXMLFastContextHandler.cxx
@@ -2059,13 +2059,19 @@ OOXMLFastContextHandlerShape::OOXMLFastContextHandlerShape
         uno::Reference<XMultiComponentFactory> rServiceManager
             (xContext->getServiceManager());
 
-        mrShapeContext.set
-            (rServiceManager->
-              createInstanceWithContext
-              (::rtl::OUString
-               (RTL_CONSTASCII_USTRINGPARAM
-                ("com.sun.star.xml.sax.FastShapeContextHandler")), xContext),
-              uno::UNO_QUERY);
+        mrShapeContext.set( getDocument( )->getShapeContext( ) );
+        if ( !mrShapeContext.is( ) )
+        {
+            // Define the shape context for the whole document
+            mrShapeContext.set
+                (rServiceManager->
+                  createInstanceWithContext
+                  (::rtl::OUString
+                   (RTL_CONSTASCII_USTRINGPARAM
+                    ("com.sun.star.xml.sax.FastShapeContextHandler")), xContext),
+                  uno::UNO_QUERY);
+            getDocument()->setShapeContext( mrShapeContext );
+        }
 
         if (mrShapeContext.is())
         {
-- 
1.7.0.1

