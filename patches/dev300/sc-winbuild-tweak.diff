diff -upr sc/inc/tabprotection.hxx sc/inc/tabprotection.hxx
--- sc/inc/tabprotection.hxx	2009-02-14 07:57:33.496000000 +0000
+++ sc/inc/tabprotection.hxx	2009-02-13 10:20:54.453125000 +0000
@@ -41,7 +41,6 @@
 #define ENABLE_SHEET_PROTECTION 1
 
 class ScDocument;
-class ScTableProtectionImpl;
 
 enum ScPasswordHash
 {
@@ -49,6 +48,37 @@ enum ScPasswordHash
     PASSHASH_XL
 };
 
+class ScTableProtectionImpl
+{
+public:
+    static ::com::sun::star::uno::Sequence<sal_Int8> hashPassword(const String& aPassText, ScPasswordHash eHash = PASSHASH_OOO);
+
+    explicit ScTableProtectionImpl(SCSIZE nOptSize);
+    explicit ScTableProtectionImpl(const ScTableProtectionImpl& r);
+
+    bool isProtected() const;
+    bool isProtectedWithPass() const;
+    void setProtected(bool bProtected);
+
+    bool isPasswordEmpty() const;
+    bool hasPasswordHash(ScPasswordHash eHash) const;
+    void setPassword(const String& aPassText);
+    ::com::sun::star::uno::Sequence<sal_Int8> getPasswordHash(ScPasswordHash eHash) const;
+    void setPasswordHash(const ::com::sun::star::uno::Sequence<sal_Int8>& aPassword, ScPasswordHash eHash = PASSHASH_OOO);
+    bool verifyPassword(const String& aPassText) const;
+    
+    bool isOptionEnabled(SCSIZE nOptId) const;
+    void setOption(SCSIZE nOptId, bool bEnabled);
+
+private:
+    String maPassText;
+    ::com::sun::star::uno::Sequence<sal_Int8>   maPassHash;
+    ::std::vector<bool> maOptions;
+    bool mbEmptyPass;
+    bool mbProtected;
+    ScPasswordHash meHash;
+};
+
 class ScPassHashHelper
 {
 public:
@@ -102,17 +132,17 @@ public:
 
     virtual bool isProtected() const;
     virtual bool isProtectedWithPass() const;
-    SC_DLLPUBLIC virtual void setProtected(bool bProtected);
+    virtual void setProtected(bool bProtected);
             
     virtual bool isPasswordEmpty() const;
     virtual bool hasPasswordHash(ScPasswordHash eHash) const;
-    SC_DLLPUBLIC virtual void setPassword(const String& aPassText);
+    virtual void setPassword(const String& aPassText);
     virtual ::com::sun::star::uno::Sequence<sal_Int8> getPasswordHash(ScPasswordHash eHash) const;
     virtual void setPasswordHash(const ::com::sun::star::uno::Sequence<sal_Int8>& aPassword, 
                                  ScPasswordHash eHash = PASSHASH_OOO);
     virtual bool verifyPassword(const String& aPassText) const;
     
-    SC_DLLPUBLIC bool isOptionEnabled(Option eOption) const;
+    bool isOptionEnabled(Option eOption) const;
     void setOption(Option eOption, bool bEnabled);
 
 private:
@@ -159,18 +189,18 @@ public:
 
     virtual bool isProtected() const;
     virtual bool isProtectedWithPass() const;
-    SC_DLLPUBLIC virtual void setProtected(bool bProtected);
+    virtual void setProtected(bool bProtected);
             
     virtual bool isPasswordEmpty() const;
     virtual bool hasPasswordHash(ScPasswordHash eHash) const;
-    SC_DLLPUBLIC virtual void setPassword(const String& aPassText);
+    virtual void setPassword(const String& aPassText);
     virtual ::com::sun::star::uno::Sequence<sal_Int8> getPasswordHash(ScPasswordHash eHash) const;
     virtual void setPasswordHash(const ::com::sun::star::uno::Sequence<sal_Int8>& aPassword, 
                                  ScPasswordHash eHash = PASSHASH_OOO);
     virtual bool verifyPassword(const String& aPassText) const;
     
-    SC_DLLPUBLIC bool isOptionEnabled(Option eOption) const;
-    SC_DLLPUBLIC void setOption(Option eOption, bool bEnabled);
+    bool isOptionEnabled(Option eOption) const;
+    void setOption(Option eOption, bool bEnabled);
 
 private:
     ::std::auto_ptr<ScTableProtectionImpl> mpImpl;
 
diff -upr sc/source/core/data/tabprotection.cxx sc/source/core/data/tabprotection.cxx
--- sc/source/core/data/tabprotection.cxx	2009-02-14 07:57:25.167875000 +0000
+++ sc/source/core/data/tabprotection.cxx	2009-02-13 10:20:52.046875000 +0000
@@ -112,37 +112,6 @@ static Sequence<sal_Int8> lcl_getXLHash(
     return aHash;
 }
 
-class ScTableProtectionImpl
-{
-public:
-    static ::com::sun::star::uno::Sequence<sal_Int8> hashPassword(const String& aPassText, ScPasswordHash eHash = PASSHASH_OOO);
-
-    explicit ScTableProtectionImpl(SCSIZE nOptSize);
-    explicit ScTableProtectionImpl(const ScTableProtectionImpl& r);
-
-    bool isProtected() const;
-    bool isProtectedWithPass() const;
-    void setProtected(bool bProtected);
-
-    bool isPasswordEmpty() const;
-    bool hasPasswordHash(ScPasswordHash eHash) const;
-    void setPassword(const String& aPassText);
-    ::com::sun::star::uno::Sequence<sal_Int8> getPasswordHash(ScPasswordHash eHash) const;
-    void setPasswordHash(const ::com::sun::star::uno::Sequence<sal_Int8>& aPassword, ScPasswordHash eHash = PASSHASH_OOO);
-    bool verifyPassword(const String& aPassText) const;
-    
-    bool isOptionEnabled(SCSIZE nOptId) const;
-    void setOption(SCSIZE nOptId, bool bEnabled);
-
-private:
-    String maPassText;
-    ::com::sun::star::uno::Sequence<sal_Int8>   maPassHash;
-    ::std::vector<bool> maOptions;
-    bool mbEmptyPass;
-    bool mbProtected;
-    ScPasswordHash meHash;
-};
-
 Sequence<sal_Int8> ScTableProtectionImpl::hashPassword(const String& aPassText, ScPasswordHash eHash)
 {
     Sequence<sal_Int8> aHash;
