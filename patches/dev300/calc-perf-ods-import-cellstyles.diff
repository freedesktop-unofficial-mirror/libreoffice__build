From b8f64cb1bfe8ab1dfd8ce23a1c614ef70fed3cb2 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:07:47 +0200
Subject: [PATCH 685/768] calc-perf-ods-import-cellstyles.diff

---
 sc/inc/simplerangelist.hxx                     |   82 ++++++++
 sc/source/core/tool/makefile.mk                |    2 +
 sc/source/core/tool/simplerangelist.cxx        |  243 ++++++++++++++++++++++++
 sc/source/filter/xml/XMLStylesImportHelper.cxx |  218 +++++++++++++---------
 sc/source/filter/xml/XMLStylesImportHelper.hxx |   28 ++-
 5 files changed, 473 insertions(+), 100 deletions(-)
 create mode 100644 sc/inc/simplerangelist.hxx
 create mode 100644 sc/source/core/tool/simplerangelist.cxx

diff --git sc/inc/simplerangelist.hxx sc/inc/simplerangelist.hxx
new file mode 100644
index 0000000..4a0c257
--- /dev/null
+++ sc/inc/simplerangelist.hxx
@@ -0,0 +1,82 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: rangelst.hxx,v $
+ * $Revision: 1.9.32.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef __SC_SIMPLERANGELIST_HXX__
+#define __SC_SIMPLERANGELIST_HXX__
+
+#include <boost/shared_ptr.hpp>
+
+#include "address.hxx"
+
+#include <map>
+#include <list>
+
+class ScAddress;
+class ScRange;
+class ScRangeList;
+
+/**
+ * This container is optimized for use in the ods import filter, to store
+ * ranges for cell styles.  We may change the name of this class once we
+ * have a better name for what it does.  Using this is way more efficient
+ * than ScRangeList.
+ */
+class ScSimpleRangeList
+{
+public:
+    struct Range
+    {
+        SCCOL mnCol1;
+        SCROW mnRow1;
+        SCCOL mnCol2;
+        SCROW mnRow2;
+        explicit Range(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2);
+
+        bool contains(const Range& r) const;
+    };
+    typedef ::boost::shared_ptr< ::std::list<Range> > RangeListRef;
+    typedef ::std::map<SCTAB, RangeListRef> TabType;
+
+    ScSimpleRangeList();
+
+    void addRange(const ScRange& rRange);
+    void insertCol(SCCOL nCol, SCTAB nTab);
+    void insertRow(SCROW nRow, SCTAB nTab);
+    void getRangeList(::std::list<ScRange>& rList) const;
+    void clear();
+
+private:
+    RangeListRef findTab(SCTAB nTab);
+
+private:
+    TabType maTabs;
+};
+
+#endif
diff --git sc/source/core/tool/makefile.mk sc/source/core/tool/makefile.mk
index ae19ded..410cf8b 100644
--- sc/source/core/tool/makefile.mk
+++ sc/source/core/tool/makefile.mk
@@ -105,6 +105,7 @@ SLOFILES =  \
         $(SLO)$/refupdat.obj \
         $(SLO)$/scmatrix.obj \
         $(SLO)$/sctictac.obj \
+        $(SLO)$/simplerangelist.obj \
         $(SLO)$/stringutil.obj \
         $(SLO)$/subtotal.obj \
         $(SLO)$/token.obj \
@@ -134,6 +135,7 @@ EXCEPTIONSFILES= \
         $(SLO)$/prnsave.obj \
         $(SLO)$/queryparam.obj \
         $(SLO)$/reftokenhelper.obj \
+        $(SLO)$/simplerangelist.obj \
         $(SLO)$/stringutil.obj \
         $(SLO)$/token.obj
 
diff --git sc/source/core/tool/simplerangelist.cxx sc/source/core/tool/simplerangelist.cxx
new file mode 100644
index 0000000..ca86775
--- /dev/null
+++ sc/source/core/tool/simplerangelist.cxx
@@ -0,0 +1,243 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: rangelst.hxx,v $
+ * $Revision: 1.9.32.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_sc.hxx"
+
+
+//------------------------------------------------------------------------
+
+#include "simplerangelist.hxx"
+#include "rangelst.hxx"
+
+using ::std::list;
+using ::std::pair;
+using ::std::max;
+
+// ============================================================================
+
+ScSimpleRangeList::Range::Range(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2) :
+    mnCol1(nCol1), mnRow1(nRow1), mnCol2(nCol2), mnRow2(nRow2) {}
+
+bool ScSimpleRangeList::Range::contains(const Range& r) const
+{
+    return mnCol1 <= r.mnCol1 && mnRow1 <= r.mnRow1 && r.mnCol2 <= mnCol2 && r.mnRow2 <= mnRow2;
+}
+
+// ----------------------------------------------------------------------------
+
+ScSimpleRangeList::ScSimpleRangeList()
+{
+}
+
+namespace {
+
+bool maybeJoin(ScSimpleRangeList::Range& rOld, SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2)
+{
+    if (rOld.mnRow1 == nRow1 && rOld.mnRow2 == nRow2)
+    {
+        // Check their column spans to see if they overlap.
+        if (rOld.mnCol1 == nCol1)
+        {
+            // Their share the start column position.
+            rOld.mnCol2 = max(rOld.mnCol2, nCol2);
+            return true;
+        }
+        else if (rOld.mnCol1 < nCol1)
+        {
+            // Old range sits on the left.
+            if (nCol1 - rOld.mnCol2 <= 1)
+            {
+                rOld.mnCol2 = max(rOld.mnCol2, nCol2);
+                return true;
+            }
+        }
+        else if (nCol1 < rOld.mnCol1)
+        {
+            // New range sits on the left.
+            if (nCol1 - rOld.mnCol2 <= 1)
+            {
+                rOld.mnCol1 = nCol1;
+                rOld.mnCol2 = max(rOld.mnCol2, nCol2);
+                return true;
+            }
+        }
+    }
+
+    if (rOld.mnCol1 == nCol1 && rOld.mnCol2 == nCol2)
+    {
+        if (rOld.mnRow1 == nRow1)
+        {
+            // Their share the start row position.
+            rOld.mnRow2 = max(rOld.mnRow2, nRow2);
+            return true;
+        }
+        else if (rOld.mnRow1 < nRow1)
+        {
+            // Old range sits above.
+            if (nRow1 - rOld.mnRow2 <= 1)
+            {
+                rOld.mnRow2 = max(rOld.mnRow2, nRow2);
+                return true;
+            }
+        }
+        else if (nRow1 < rOld.mnRow1)
+        {
+            // New range sits above.
+            if (nRow1 - rOld.mnRow2 <= 1)
+            {
+                rOld.mnRow1 = nRow1;
+                rOld.mnRow2 = max(rOld.mnRow2, nRow2);
+                return true;
+            }
+        }
+    }
+
+    return false;
+}
+
+}
+
+void ScSimpleRangeList::addRange(const ScRange& rRange)
+{
+    SCCOL nCol1 = rRange.aStart.Col();
+    SCROW nRow1 = rRange.aStart.Row();
+    SCTAB nTab1 = rRange.aStart.Tab();
+    SCCOL nCol2 = rRange.aEnd.Col();
+    SCROW nRow2 = rRange.aEnd.Row();
+    SCTAB nTab2 = rRange.aEnd.Tab();
+
+    for (SCTAB nTab = nTab1; nTab <= nTab2; ++nTab)
+    {
+        RangeListRef pRef = findTab(nTab);
+        if (!pRef)
+            // This should never happen!
+            return;
+
+        if (pRef->empty() || !maybeJoin(pRef->back(), nCol1, nRow1, nCol2, nRow2))
+            // Not joinable.  Append it to the list.
+            pRef->push_back(Range(nCol1, nRow1, nCol2, nRow2));
+    }
+}
+
+void ScSimpleRangeList::insertCol(SCCOL nCol, SCTAB nTab)
+{
+    RangeListRef pRef = findTab(nTab);
+    if (!pRef)
+        // This should never happen!
+        return;
+
+    list<Range>::iterator itr = pRef->begin(), itrEnd = pRef->end();
+    for (; itr != itrEnd; ++itr)
+    {
+        Range& r = *itr;
+        if (r.mnCol2 < nCol)
+            // insertion point to the right of the range.
+            continue;
+
+        if (nCol <= r.mnCol1)
+        {
+            // insertion point to the left of the range.
+            ++r.mnCol1;
+            ++r.mnCol2;
+        }
+        else if (nCol <= r.mnCol2)
+        {
+            // insertion point cuts through the range.
+            ++r.mnCol2;
+        }
+    }
+}
+
+void ScSimpleRangeList::insertRow(SCROW nRow, SCTAB nTab)
+{
+    RangeListRef pRef = findTab(nTab);
+    if (!pRef)
+        // This should never happen!
+        return;
+
+    list<Range>::iterator itr = pRef->begin(), itrEnd = pRef->end();
+    for (; itr != itrEnd; ++itr)
+    {
+        Range& r = *itr;
+        if (r.mnRow2 < nRow)
+            // insertion point is below the range.
+            continue;
+
+        if (nRow <= r.mnRow1)
+        {
+            // insertion point is above the range.
+            ++r.mnRow1;
+            ++r.mnRow2;
+        }
+        else if (nRow <= r.mnRow2)
+        {
+            // insertion point cuts through the range.
+            ++r.mnRow2;
+        }
+    }
+}
+
+void ScSimpleRangeList::getRangeList(list<ScRange>& rList) const
+{
+    list<ScRange> aList;
+    for (TabType::const_iterator itrTab = maTabs.begin(), itrTabEnd = maTabs.end(); itrTab != itrTabEnd; ++itrTab)
+    {
+        SCTAB nTab = itrTab->first;
+        const RangeListRef& pRanges = itrTab->second;
+        list<Range>::const_iterator itr = pRanges->begin(), itrEnd = pRanges->end();
+        for (; itr != itrEnd; ++itr)
+        {
+            const Range& r = *itr;
+            aList.push_back(ScRange(r.mnCol1, r.mnRow1, nTab, r.mnCol2, r.mnRow2, nTab));
+        }
+    }
+    rList.swap(aList);
+}
+
+void ScSimpleRangeList::clear()
+{
+    maTabs.clear();
+}
+
+ScSimpleRangeList::RangeListRef ScSimpleRangeList::findTab(SCTAB nTab)
+{
+    TabType::iterator itr = maTabs.find(nTab);
+    if (itr == maTabs.end())
+    {
+        RangeListRef p(new list<Range>);
+        pair<TabType::iterator, bool> r = maTabs.insert(TabType::value_type(nTab, p));
+        if (!r.second)
+            return RangeListRef();
+        itr = r.first;
+    }
+
+    return itr->second;
+}
diff --git sc/source/filter/xml/XMLStylesImportHelper.cxx sc/source/filter/xml/XMLStylesImportHelper.cxx
index 976d204..c54997b 100644
--- sc/source/filter/xml/XMLStylesImportHelper.cxx
+++ sc/source/filter/xml/XMLStylesImportHelper.cxx
@@ -37,6 +37,7 @@
 #include <com/sun/star/util/NumberFormat.hpp>
 
 using namespace com::sun::star;
+using ::std::list;
 
 void ScMyStyleNumberFormats::AddStyleNumberFormat(const rtl::OUString& rStyleName, const sal_Int32 nNumberFormat)
 {
@@ -53,37 +54,14 @@ sal_Int32 ScMyStyleNumberFormats::GetStyleNumberFormat(const rtl::OUString& rSty
         return aItr->nNumberFormat;
 }
 
-ScMyStyleRanges::ScMyStyleRanges()
-    :
-    pTextList(NULL),
-    pNumberList(NULL),
-    pTimeList(NULL),
-    pDateTimeList(NULL),
-    pPercentList(NULL),
-    pLogicalList(NULL),
-    pUndefinedList(NULL),
+ScMyStyleRanges::ScMyStyleRanges() :
     pCurrencyList(NULL)
 {
 }
 
 ScMyStyleRanges::~ScMyStyleRanges()
 {
-    if (pTextList)
-        delete pTextList;
-    if (pNumberList)
-        delete pNumberList;
-    if (pTimeList)
-        delete pTimeList;
-    if (pDateTimeList)
-        delete pDateTimeList;
-    if (pPercentList)
-        delete pPercentList;
-    if (pLogicalList)
-        delete pLogicalList;
-    if (pUndefinedList)
-        delete pUndefinedList;
-    if (pCurrencyList)
-        delete pCurrencyList;
+    delete pCurrencyList;
 }
 
 void ScMyStyleRanges::AddRange(const ScRange& rRange, ScRangeList* pList,
@@ -135,58 +113,58 @@ void ScMyStyleRanges::AddCurrencyRange(const ScRange& rRange, ScRangeListRef xLi
 }
 
 void ScMyStyleRanges::AddRange(const ScRange& rRange,
-    const rtl::OUString* pStyleName, const sal_Int16 nType,
-    ScXMLImport& rImport, const sal_uInt32 nMaxRanges)
+    const rtl::OUString* /*pStyleName*/, const sal_Int16 nType,
+    ScXMLImport& /*rImport*/, const sal_uInt32 /*nMaxRanges*/)
 {
     switch (nType)
     {
         case util::NumberFormat::NUMBER:
         {
-            if (!pNumberList)
-                pNumberList = new ScRangeList();
-            AddRange(rRange, pNumberList, pStyleName, nType, rImport, nMaxRanges);
+            if (!mpNumberList)
+                mpNumberList.reset(new ScSimpleRangeList);
+            mpNumberList->addRange(rRange);
         }
         break;
         case util::NumberFormat::TEXT:
         {
-            if (!pTextList)
-                pTextList = new ScRangeList();
-            AddRange(rRange, pTextList, pStyleName, nType, rImport, nMaxRanges);
+            if (!mpTextList)
+                mpTextList.reset(new ScSimpleRangeList);
+            mpTextList->addRange(rRange);
         }
         break;
         case util::NumberFormat::TIME:
         {
-            if (!pTimeList)
-                pTimeList = new ScRangeList();
-            AddRange(rRange, pTimeList, pStyleName, nType, rImport, nMaxRanges);
+            if (!mpTimeList)
+                mpTimeList.reset(new ScSimpleRangeList);
+            mpTimeList->addRange(rRange);
         }
         break;
         case util::NumberFormat::DATETIME:
         {
-            if (!pDateTimeList)
-                pDateTimeList = new ScRangeList();
-            AddRange(rRange, pDateTimeList, pStyleName, nType, rImport, nMaxRanges);
+            if (!mpDateTimeList)
+                mpDateTimeList.reset(new ScSimpleRangeList);
+            mpDateTimeList->addRange(rRange);
         }
         break;
         case util::NumberFormat::PERCENT:
         {
-            if (!pPercentList)
-                pPercentList = new ScRangeList();
-            AddRange(rRange, pPercentList, pStyleName, nType, rImport, nMaxRanges);
+            if (!mpPercentList)
+                mpPercentList.reset(new ScSimpleRangeList);
+            mpPercentList->addRange(rRange);
         }
         break;
         case util::NumberFormat::LOGICAL:
         {
-            if (!pLogicalList)
-                pLogicalList = new ScRangeList();
-            AddRange(rRange, pLogicalList, pStyleName, nType, rImport, nMaxRanges);
+            if (!mpLogicalList)
+                mpLogicalList.reset(new ScSimpleRangeList);
+            mpLogicalList->addRange(rRange);
         }
         break;
         case util::NumberFormat::UNDEFINED:
         {
-            if (!pUndefinedList)
-                pUndefinedList = new ScRangeList();
-            AddRange(rRange, pUndefinedList, pStyleName, nType, rImport, nMaxRanges);
+            if (!mpUndefinedList)
+                mpUndefinedList.reset(new ScSimpleRangeList);
+            mpUndefinedList->addRange(rRange);
         }
         break;
         default:
@@ -213,53 +191,78 @@ void ScMyStyleRanges::AddCurrencyRange(const ScRange& rRange,
         if (aPair.second)
         {
             aItr = aPair.first;
-            AddCurrencyRange(rRange, aItr->xRanges, pStyleName, pCurrency, rImport, nMaxRanges);
+            aItr->mpRanges->addRange(rRange);
         }
     }
     else
-        aItr->xRanges->Join(rRange);
+        aItr->mpRanges->addRange(rRange);
 }
 
-void ScMyStyleRanges::InsertColRow(const ScRange& rRange, const SCsCOL nDx, const SCsROW nDy,
-        const SCsTAB nDz, ScDocument* pDoc)
+void ScMyStyleRanges::InsertRow(const sal_Int32 nRow, const sal_Int32 nTab, ScDocument* pDoc)
 {
-    UpdateRefMode aRefMode(URM_INSDEL);
-    if (pNumberList)
-        pNumberList->UpdateReference(aRefMode, pDoc, rRange, nDx, nDy, nDz);
-    if (pTextList)
-        pTextList->UpdateReference(aRefMode, pDoc, rRange, nDx, nDy, nDz);
-    if (pTimeList)
-        pTimeList->UpdateReference(aRefMode, pDoc, rRange, nDx, nDy, nDz);
-    if (pDateTimeList)
-        pDateTimeList->UpdateReference(aRefMode, pDoc, rRange, nDx, nDy, nDz);
-    if (pPercentList)
-        pPercentList->UpdateReference(aRefMode, pDoc, rRange, nDx, nDy, nDz);
-    if (pLogicalList)
-        pLogicalList->UpdateReference(aRefMode, pDoc, rRange, nDx, nDy, nDz);
-    if (pUndefinedList)
-        pUndefinedList->UpdateReference(aRefMode, pDoc, rRange, nDx, nDy, nDz);
+    if (mpTextList)
+        mpTextList->insertRow(static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab));
+    if (mpNumberList)
+        mpNumberList->insertRow(static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab));
+    if (mpTimeList)
+        mpTimeList->insertRow(static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab));
+    if (mpDateTimeList)
+        mpDateTimeList->insertRow(static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab));
+    if (mpPercentList)
+        mpPercentList->insertRow(static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab));
+    if (mpLogicalList)
+        mpLogicalList->insertRow(static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab));
+    if (mpUndefinedList)
+        mpUndefinedList->insertRow(static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab));
+
     if (pCurrencyList)
     {
         ScMyCurrencyStylesSet::iterator aItr(pCurrencyList->begin());
         ScMyCurrencyStylesSet::iterator aEndItr(pCurrencyList->end());
         while (aItr != aEndItr)
         {
-            aItr->xRanges->UpdateReference(aRefMode, pDoc, rRange, nDx, nDy, nDz);
+            aItr->mpRanges->insertRow(static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab));
             ++aItr;
         }
     }
 }
 
-void ScMyStyleRanges::InsertRow(const sal_Int32 nRow, const sal_Int32 nTab, ScDocument* pDoc)
+void ScMyStyleRanges::InsertCol(const sal_Int32 nCol, const sal_Int32 nTab, ScDocument* pDoc)
 {
-    InsertColRow(ScRange(0, static_cast<SCROW>(nRow), static_cast<SCTAB>(nTab),
-        MAXCOL, MAXROW, static_cast<SCTAB>(nTab)), 0, 1, 0, pDoc);
+    if (mpTextList)
+        mpTextList->insertCol(static_cast<SCCOL>(nCol), static_cast<SCTAB>(nTab));
+    if (mpNumberList)
+        mpNumberList->insertCol(static_cast<SCCOL>(nCol), static_cast<SCTAB>(nTab));
+    if (mpTimeList)
+        mpTimeList->insertCol(static_cast<SCCOL>(nCol), static_cast<SCTAB>(nTab));
+    if (mpDateTimeList)
+        mpDateTimeList->insertCol(static_cast<SCCOL>(nCol), static_cast<SCTAB>(nTab));
+    if (mpPercentList)
+        mpPercentList->insertCol(static_cast<SCCOL>(nCol), static_cast<SCTAB>(nTab));
+    if (mpLogicalList)
+        mpLogicalList->insertCol(static_cast<SCCOL>(nCol), static_cast<SCTAB>(nTab));
+    if (mpUndefinedList)
+        mpUndefinedList->insertCol(static_cast<SCCOL>(nCol), static_cast<SCTAB>(nTab));
+
+    if (pCurrencyList)
+    {
+        ScMyCurrencyStylesSet::iterator aItr(pCurrencyList->begin());
+        ScMyCurrencyStylesSet::iterator aEndItr(pCurrencyList->end());
+        while (aItr != aEndItr)
+        {
+            aItr->mpRanges->insertCol(static_cast<SCCOL>(nCol), static_cast<SCTAB>(nTab));
+            ++aItr;
+        }
+    }
 }
 
-void ScMyStyleRanges::InsertCol(const sal_Int32 nCol, const sal_Int32 nTab, ScDocument* pDoc)
+void ScMyStyleRanges::SetStylesToRanges(const list<ScRange>& rRanges,
+    const rtl::OUString* pStyleName, const sal_Int16 nCellType,
+    const rtl::OUString* pCurrency, ScXMLImport& rImport)
 {
-    InsertColRow(ScRange(static_cast<SCCOL>(nCol), 0, static_cast<SCTAB>(nTab),
-        MAXCOL, MAXROW, static_cast<SCTAB>(nTab)), 1, 0, 0, pDoc);
+    list<ScRange>::const_iterator itr = rRanges.begin(), itrEnd = rRanges.end();
+    for (; itr != itrEnd; ++itr)
+        rImport.SetStyleToRange(*itr, pStyleName, nCellType, pCurrency);
 }
 
 void ScMyStyleRanges::SetStylesToRanges(ScRangeList* pList,
@@ -282,27 +285,64 @@ void ScMyStyleRanges::SetStylesToRanges(ScRangeListRef xList,
 
 void ScMyStyleRanges::SetStylesToRanges(const rtl::OUString* pStyleName, ScXMLImport& rImport)
 {
-    if (pNumberList)
-        SetStylesToRanges(pNumberList, pStyleName, util::NumberFormat::NUMBER, NULL, rImport);
-    if (pTextList)
-        SetStylesToRanges(pTextList, pStyleName, util::NumberFormat::TEXT, NULL, rImport);
-    if (pTimeList)
-        SetStylesToRanges(pTimeList, pStyleName, util::NumberFormat::TIME, NULL, rImport);
-    if (pDateTimeList)
-        SetStylesToRanges(pDateTimeList, pStyleName, util::NumberFormat::DATETIME, NULL, rImport);
-    if (pPercentList)
-        SetStylesToRanges(pPercentList, pStyleName, util::NumberFormat::PERCENT, NULL, rImport);
-    if (pLogicalList)
-        SetStylesToRanges(pLogicalList, pStyleName, util::NumberFormat::LOGICAL, NULL, rImport);
-    if (pUndefinedList)
-        SetStylesToRanges(pUndefinedList, pStyleName, util::NumberFormat::UNDEFINED, NULL, rImport);
+    if (mpNumberList)
+    {
+        list<ScRange> aList;
+        mpNumberList->getRangeList(aList);
+        SetStylesToRanges(aList, pStyleName, util::NumberFormat::NUMBER, NULL, rImport);
+        mpNumberList->clear();
+    }
+    if (mpTextList)
+    {
+        list<ScRange> aList;
+        mpTextList->getRangeList(aList);
+        SetStylesToRanges(aList, pStyleName, util::NumberFormat::TEXT, NULL, rImport);
+        mpTextList->clear();
+    }
+    if (mpTimeList)
+    {
+        list<ScRange> aList;
+        mpTimeList->getRangeList(aList);
+        SetStylesToRanges(aList, pStyleName, util::NumberFormat::TIME, NULL, rImport);
+        mpTimeList->clear();
+    }
+    if (mpDateTimeList)
+    {
+        list<ScRange> aList;
+        mpDateTimeList->getRangeList(aList);
+        SetStylesToRanges(aList, pStyleName, util::NumberFormat::DATETIME, NULL, rImport);
+        mpDateTimeList->clear();
+    }
+    if (mpPercentList)
+    {
+        list<ScRange> aList;
+        mpPercentList->getRangeList(aList);
+        SetStylesToRanges(aList, pStyleName, util::NumberFormat::PERCENT, NULL, rImport);
+        mpPercentList->clear();
+    }
+    if (mpLogicalList)
+    {
+        list<ScRange> aList;
+        mpLogicalList->getRangeList(aList);
+        SetStylesToRanges(aList, pStyleName, util::NumberFormat::LOGICAL, NULL, rImport);
+        mpLogicalList->clear();
+    }
+    if (mpUndefinedList)
+    {
+        list<ScRange> aList;
+        mpUndefinedList->getRangeList(aList);
+        SetStylesToRanges(aList, pStyleName, util::NumberFormat::UNDEFINED, NULL, rImport);
+        mpUndefinedList->clear();
+    }
     if (pCurrencyList)
     {
         ScMyCurrencyStylesSet::iterator aItr(pCurrencyList->begin());
         ScMyCurrencyStylesSet::iterator aEndItr(pCurrencyList->end());
         while (aItr != aEndItr)
         {
-            SetStylesToRanges(aItr->xRanges, pStyleName, util::NumberFormat::CURRENCY, &aItr->sCurrency, rImport);
+            list<ScRange> aList;
+            aItr->mpRanges->getRangeList(aList);
+            SetStylesToRanges(aList, pStyleName, util::NumberFormat::CURRENCY, &aItr->sCurrency, rImport);
             ++aItr;
         }
     }
diff --git sc/source/filter/xml/XMLStylesImportHelper.hxx sc/source/filter/xml/XMLStylesImportHelper.hxx
index a0c2026..6e321f6 100644
--- sc/source/filter/xml/XMLStylesImportHelper.hxx
+++ sc/source/filter/xml/XMLStylesImportHelper.hxx
@@ -29,12 +29,15 @@
 #define SC_XMLSTYLESIMPORTHELPER_HXX
 
 #include "rangelst.hxx"
+#include "simplerangelist.hxx"
 #include <rtl/ustring.hxx>
 #include <com/sun/star/table/CellRangeAddress.hpp>
 #include <com/sun/star/table/CellAddress.hpp>
 
 #include <set>
 #include <vector>
+#include <list>
+#include <boost/shared_ptr.hpp>
 
 class ScXMLImport;
 
@@ -72,9 +75,11 @@ public:
 struct ScMyCurrencyStyle
 {
     rtl::OUString		sCurrency;
-    ScRangeListRef		xRanges;
+    ::boost::shared_ptr<ScSimpleRangeList> mpRanges;
 
-    ScMyCurrencyStyle() : xRanges(new ScRangeList()) {}
+    ScMyCurrencyStyle() :
+        mpRanges(new ScSimpleRangeList)
+    {}
     ~ScMyCurrencyStyle() {}
 };
 
@@ -90,13 +95,13 @@ typedef std::set<ScMyCurrencyStyle, LessCurrencyStyle>	ScMyCurrencyStylesSet;
 
 class ScMyStyleRanges : public SvRefBase
 {
-    ScRangeList*			pTextList;
-    ScRangeList*			pNumberList;
-    ScRangeList*			pTimeList;
-    ScRangeList*			pDateTimeList;
-    ScRangeList*			pPercentList;
-    ScRangeList*			pLogicalList;
-    ScRangeList*			pUndefinedList;
+    ::boost::shared_ptr<ScSimpleRangeList> mpTextList;
+    ::boost::shared_ptr<ScSimpleRangeList> mpNumberList;
+    ::boost::shared_ptr<ScSimpleRangeList> mpTimeList;
+    ::boost::shared_ptr<ScSimpleRangeList> mpDateTimeList;
+    ::boost::shared_ptr<ScSimpleRangeList> mpPercentList;
+    ::boost::shared_ptr<ScSimpleRangeList> mpLogicalList;
+    ::boost::shared_ptr<ScSimpleRangeList> mpUndefinedList;
     ScMyCurrencyStylesSet*	pCurrencyList;
 
     void AddRange(const ScRange& rRange, ScRangeList* pList,
@@ -105,8 +110,9 @@ class ScMyStyleRanges : public SvRefBase
     void AddCurrencyRange(const ScRange& rRange, ScRangeListRef xList,
         const rtl::OUString* pStyleName, const rtl::OUString* pCurrency,
         ScXMLImport& rImport, const sal_uInt32 nMaxRanges);
-    void InsertColRow(const ScRange& rRange, const SCsCOL nDx, const SCsROW nDy,
-        const SCsTAB nDz, ScDocument* pDoc);
+    void SetStylesToRanges(const ::std::list<ScRange>& rList,
+        const rtl::OUString* pStyleName, const sal_Int16 nCellType,
+        const rtl::OUString* pCurrency, ScXMLImport& rImport);
     void SetStylesToRanges(ScRangeList* pList,
         const rtl::OUString* pStyleName, const sal_Int16 nCellType,
         const rtl::OUString* pCurrency, ScXMLImport& rImport);
-- 
1.7.0.1

