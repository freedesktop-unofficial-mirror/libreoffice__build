diff --git svtools/inc/tabbar.hxx svtools/inc/tabbar.hxx
index 99cb2df..07e4771 100644
--- svtools/inc/tabbar.hxx
+++ svtools/inc/tabbar.hxx
@@ -430,6 +430,11 @@ public:
                                 USHORT nPos = TAB_APPEND );
     void            RemovePage( USHORT nPageId );
     void            MovePage( USHORT nPageId, USHORT nNewPos );
+
+    Color           GetTabBgColor( USHORT nPageId ) const;
+    void            SetTabBgColor( USHORT nPageId, const Color& aTabBgColor );
+    BOOL            IsDefaultTabBgColor( USHORT nPageId );
+
     void            Clear();
 
     void            EnablePage( USHORT nPageId, BOOL bEnable = TRUE );
diff --git svtools/source/control/tabbar.cxx svtools/source/control/tabbar.cxx
index f3fb16f..9156f97 100644
--- svtools/source/control/tabbar.cxx
+++ svtools/source/control/tabbar.cxx
@@ -65,6 +65,10 @@ struct ImplTabBarItem
     BOOL            mbShort;
     BOOL            mbSelect;
     BOOL            mbEnable;
+    Color           maTabBgColor;
+    bool            IsDefaultTabBgColor() const { return maTabBgColor == Color(COL_AUTO) ? TRUE : FALSE; };
+    Color           maTabTextColor;
+    bool            IsDefaultTabTextColor() const { return maTabTextColor == Color(COL_AUTO) ? TRUE : FALSE; };
 
                     ImplTabBarItem( USHORT nItemId, const XubString& rText,
                                     TabBarPageBits nPageBits ) :
@@ -77,6 +81,8 @@ struct ImplTabBarItem
                         mbShort  = FALSE;
                         mbSelect = FALSE;
                         mbEnable = TRUE;
+                        maTabBgColor = Color( COL_AUTO );
+                        maTabTextColor = Color( COL_AUTO );
                     }
 };
 
@@ -1049,7 +1055,8 @@ void TabBar::Paint( const Rectangle& )
     // Font selektieren
     Font aFont = GetFont();
     Font aLightFont = aFont;
-    aLightFont.SetWeight( WEIGHT_LIGHT );
+    //aLightFont.SetWeight( WEIGHT_LIGHT ); //TODO Make font weight light on custom color only?
+    aLightFont.SetWeight( WEIGHT_NORMAL );
 
     // #i36013# exclude push buttons from painting area
     Rectangle aClipRect( Point( mnOffX, 0 ), Point( mnLastOffX, GetOutputHeightPixel() - 1 ) );
@@ -1123,15 +1130,23 @@ void TabBar::Paint( const Rectangle& )
                     SetFont( aLightFont );
 
                 // Je nach Status die richtige FillInBrush setzen
+                // Set the correct FillInBrush depending upon status
                 if ( pItem->mbSelect || (pItem->mnId == mnCurPageId) )
                 {
+                    // Currently selected Tab
                     SetFillColor( aSelectColor );
                     SetTextColor( aSelectTextColor );
                 }
                 else
                 {
-                    SetFillColor( aFaceColor );
-                    SetTextColor( aFaceTextColor );
+                    if ( !pItem->IsDefaultTabBgColor() )
+                    {
+                        SetFillColor( pItem->maTabBgColor );
+                        SetTextColor( pItem->maTabTextColor );
+                    } else {
+                        SetFillColor( aFaceColor );
+                        SetTextColor( aFaceTextColor );
+                    }
                 }
 
                 // Muss Font Kursiv geschaltet werden
@@ -1163,21 +1178,38 @@ void TabBar::Paint( const Rectangle& )
                 long    nTextHeight = GetTextHeight();
                 Point   aTxtPos( aRect.Left()+(aRectSize.Width()-nTextWidth)/2,
                                  (aRectSize.Height()-nTextHeight)/2 );
-                if ( !pItem->mbEnable )
-                    DrawCtrlText( aTxtPos, aText, 0, STRING_LEN, (TEXT_DRAW_DISABLE | TEXT_DRAW_MNEMONIC) );
-                else
-                    DrawText( aTxtPos, aText );
-
+                if ( pItem->IsDefaultTabBgColor() || (!pItem->mbSelect) )
+                {
+                     if ( !pItem->mbEnable )
+                         DrawCtrlText( aTxtPos, aText, 0, STRING_LEN, (TEXT_DRAW_DISABLE | TEXT_DRAW_MNEMONIC) );
+                    else
+                         DrawText( aTxtPos, aText );
+                }
                 // Jetzt im Inhalt den 3D-Effekt ausgeben
                 aPos0.X()++;
                 aPos1.X()++;
                 aPos2.X()--;
                 aPos3.X()--;
-                SetLineColor( rStyleSettings.GetLightColor() );
+
+                // If this is the current tab, draw the left inner shadow the default color, 
+                // otherwise make it the same as the custom background color
+                if ( pItem->mbSelect || (pItem->mnId == mnCurPageId) ) {
+                    SetLineColor( rStyleSettings.GetLightColor() );
+                } else {
+                    if ( !pItem->IsDefaultTabBgColor() )
+                    {
+                        SetLineColor( pItem->maTabBgColor );
+                    } else {
+                        SetLineColor( rStyleSettings.GetLightColor() );
+                    }
+                }
+                // Draw the left side of the tab
                 DrawLine( aPos0, aPos1 );
 
                 if ( !pItem->mbSelect && (pItem->mnId != mnCurPageId) )
                 {
+                    // Draw the top inner shadow
+                    // ToDo: Change from this static color to tab custom bg color
                     DrawLine( Point( aPos0.X(), aPos0.Y()+1 ),
                                 Point( aPos3.X(), aPos3.Y()+1 ) );
                 }
@@ -1187,8 +1219,27 @@ void TabBar::Paint( const Rectangle& )
                 aPos1.X()--;
                 aPos1.Y()--;
                 aPos2.Y()--;
+                if ( !pItem->IsDefaultTabBgColor() && ( pItem->mbSelect || (pItem->mnId == mnCurPageId) ) )
+                {
+                    SetLineColor( pItem->maTabBgColor );
+                    DrawLine( Point(aPos1.X()-1, aPos1.Y()-1), Point(aPos2.X(), aPos2.Y()-1) );
+                }
                 DrawLine( aPos1, aPos2 );
 
+                // draw a small 2px sliver of the original background color at the bottom of the selected tab
+                     
+                if ( !pItem->IsDefaultTabBgColor() )
+                {
+                    if ( pItem->mbSelect || (pItem->mnId == mnCurPageId) ) {
+                        SetLineColor( pItem->maTabBgColor );
+                        DrawLine( Point(aPos1.X()-1, aPos1.Y()-1), Point(aPos2.X(), aPos2.Y()-1) );
+                        if ( !pItem->mbEnable )
+                            DrawCtrlText( aTxtPos, aText, 0, STRING_LEN, (TEXT_DRAW_DISABLE | TEXT_DRAW_MNEMONIC) );
+                        else
+                            DrawText( aTxtPos, aText );
+                    }
+                }
+
                 // Da etwas uebermalt werden konnte, muessen wir die Polygon-
                 // umrandung nocheinmal ausgeben
                 SetLineColor( rStyleSettings.GetDarkShadowColor() );
@@ -1565,6 +1616,42 @@ void TabBar::InsertPage( USHORT nPageId, const XubString& rText,
 
 // -----------------------------------------------------------------------
 
+Color TabBar::GetTabBgColor( USHORT nPageId ) const
+{
+    USHORT nPos = GetPagePos( nPageId );
+
+    if ( nPos != TAB_PAGE_NOTFOUND )
+        return mpItemList->GetObject( nPos )->maTabBgColor;
+    else
+        return Color( COL_AUTO );
+}
+
+void TabBar::SetTabBgColor( USHORT nPageId, const Color& aTabBgColor )
+{
+    USHORT nPos = GetPagePos( nPageId );
+    ImplTabBarItem* pItem;
+    if ( nPos != TAB_PAGE_NOTFOUND )
+    {
+        pItem = mpItemList->GetObject( nPos );
+        // TODO: Need to take the text color specification out of this code!
+        if ( aTabBgColor != Color( COL_AUTO )  )
+        {
+            pItem->maTabBgColor = aTabBgColor;
+            if ( aTabBgColor.GetLuminance() <= 128 ) //Do not use aTabBgColor.IsDark(), because that threshold is way too low...
+                pItem->maTabTextColor = Color( COL_WHITE );
+            else
+                pItem->maTabTextColor = Color( COL_BLACK );
+        }
+        else
+        {
+            pItem->maTabBgColor = Color( COL_AUTO );
+            pItem->maTabTextColor = Color( COL_AUTO );
+        }
+    }
+}
+
+// -----------------------------------------------------------------------
+
 void TabBar::RemovePage( USHORT nPageId )
 {
     USHORT nPos = GetPagePos( nPageId );
@@ -2486,9 +2573,12 @@ USHORT TabBar::ShowDropPos( const Point& rPos )
             nX--;
         else
             nX++;
+        if ( !pItem->IsDefaultTabBgColor() && !pItem->mbSelect)
+            SetLineColor( pItem->maTabTextColor );
         DrawLine( Point( nX, nY ), Point( nX, nY ) );
         DrawLine( Point( nX+1, nY-1 ), Point( nX+1, nY+1 ) );
         DrawLine( Point( nX+2, nY-2 ), Point( nX+2, nY+2 ) );
+        SetLineColor( aBlackColor );
     }
     if ( (mnDropPos > 0) && (mnDropPos < nItemCount+1) )
     {
@@ -2496,6 +2586,8 @@ USHORT TabBar::ShowDropPos( const Point& rPos )
         nX = pItem->maRect.Right()-TABBAR_OFFSET_X;
         if ( mnDropPos == nCurPos )
             nX++;
+        if ( !pItem->IsDefaultTabBgColor() && !pItem->mbSelect)
+            SetLineColor( pItem->maTabTextColor );
         DrawLine( Point( nX, nY ), Point( nX, nY ) );
         DrawLine( Point( nX-1, nY-1 ), Point( nX-1, nY+1 ) );
         DrawLine( Point( nX-2, nY-2 ), Point( nX-2, nY+2 ) );
