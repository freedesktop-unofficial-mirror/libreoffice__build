--- forms/qa/integration/forms/MasterDetailForms.java.old	2010-08-25 22:34:06.000000000 +0200
+++ forms/qa/integration/forms/MasterDetailForms.java	2010-09-08 18:20:28.000000000 +0200
@@ -139,7 +139,7 @@ public class MasterDetailForms extends c
 
         m_detailResult = new ResultSet( m_detailForm );
 
-        XNameContainer masterContainer = UnoRuntime.queryInterface( XNameContainer.class, m_masterForm );
+        XNameContainer masterContainer = (XNameContainer) UnoRuntime.queryInterface( XNameContainer.class, m_masterForm );
         masterContainer.insertByName( "slave", m_detailForm );
     }
 
@@ -158,8 +158,8 @@ public class MasterDetailForms extends c
             m_detailForm.setPropertyValue( "MasterFields", new String[] { "ID1", "ID2" } );
             m_detailForm.setPropertyValue( "DetailFields", new String[] { "FK_ID1", "FK_ID2" } );
 
-            XLoadable loadMaster = UnoRuntime.queryInterface( XLoadable.class, m_masterForm );
-            XLoadable loadDetail = UnoRuntime.queryInterface( XLoadable.class, m_detailForm );
+            XLoadable loadMaster = (XLoadable) UnoRuntime.queryInterface( XLoadable.class, m_masterForm );
+            XLoadable loadDetail = (XLoadable) UnoRuntime.queryInterface( XLoadable.class, m_detailForm );
             loadDetail.addLoadListener( this );
 
             // wait until the detail form is loaded
@@ -223,14 +223,14 @@ public class MasterDetailForms extends c
             database = new CRMDatabase( m_orb, true );
 
             // create a form document therein
-            XFormDocumentsSupplier formDocSupp = UnoRuntime.queryInterface( XFormDocumentsSupplier.class, database.getDatabase().getModel() );
-            XMultiServiceFactory formFactory = UnoRuntime.queryInterface( XMultiServiceFactory.class, formDocSupp.getFormDocuments() );
+            XFormDocumentsSupplier formDocSupp = (XFormDocumentsSupplier) UnoRuntime.queryInterface( XFormDocumentsSupplier.class, database.getDatabase().getModel() );
+            XMultiServiceFactory formFactory = (XMultiServiceFactory) UnoRuntime.queryInterface( XMultiServiceFactory.class, formDocSupp.getFormDocuments() );
             NamedValue[] loadArgs = new NamedValue[] {
                 new NamedValue( "ActiveConnection", database.getConnection().getXConnection() ),
                 new NamedValue( "MediaType", "application/vnd.oasis.opendocument.text" )
             };
 
-            subComponentCommands = UnoRuntime.queryInterface(
+            subComponentCommands = (XCommandProcessor) UnoRuntime.queryInterface(
                 XCommandProcessor.class,
                 formFactory.createInstanceWithArguments( "com.sun.star.sdb.DocumentDefinition", loadArgs ) );
             Command command = new Command();
@@ -238,7 +238,7 @@ public class MasterDetailForms extends c
             command.Argument = new Short( OpenMode.DOCUMENT );
 
             DocumentHelper subDocument = new DocumentHelper( m_orb,
-                UnoRuntime.queryInterface( XComponent.class,
+                (XComponent) UnoRuntime.queryInterface( XComponent.class,
                     subComponentCommands.execute( command, subComponentCommands.createCommandIdentifier(), null )
                 )
             );
@@ -252,7 +252,7 @@ public class MasterDetailForms extends c
             m_masterForm.setPropertyValue( "CommandType", new Integer( CommandType.TABLE ) );
 
             // create a detail form
-            m_detailForm = UnoRuntime.queryInterface( XPropertySet.class, subDocument.createSubForm( m_masterForm, "products" ) );
+            m_detailForm = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, subDocument.createSubForm( m_masterForm, "products" ) );
             m_detailForm.setPropertyValue( "Command", "SELECT \"ID\", \"Name\", \"CategoryID\" FROM \"products\"" );
             m_detailForm.setPropertyValue( "CommandType", new Integer( CommandType.COMMAND ) );
             m_detailForm.setPropertyValue( "MasterFields", new String[] { "ID" } );
@@ -261,7 +261,7 @@ public class MasterDetailForms extends c
             // create a grid control in the detail form, with some columns
             XPropertySet gridControlModel = formLayer.createControlAndShape( "GridControl", 20, 40, 130, 50, m_detailForm );
             gridControlModel.setPropertyValue( "Name", "product list" );
-            XIndexContainer gridColumns = UnoRuntime.queryInterface( XIndexContainer.class, gridControlModel );
+            XIndexContainer gridColumns = (XIndexContainer) UnoRuntime.queryInterface( XIndexContainer.class, gridControlModel );
                                       impl_createGridColumn( gridColumns, "TextField", "ID" );
             XPropertySet nameColumn = impl_createGridColumn( gridColumns, "TextField", "Name" );
             nameColumn.setPropertyValue( "Width", new Integer( 600 ) ); // 6 cm
@@ -271,7 +271,7 @@ public class MasterDetailForms extends c
             m_masterResult = new ResultSet( m_masterForm );
             m_detailResult = new ResultSet( m_detailForm );
 
-            XLoadable loadDetail = UnoRuntime.queryInterface( XLoadable.class, m_detailForm );
+            XLoadable loadDetail = (XLoadable) UnoRuntime.queryInterface( XLoadable.class, m_detailForm );
             loadDetail.addLoadListener( this );
 
             subDocument.getCurrentView().toggleFormDesignMode();
@@ -306,8 +306,8 @@ public class MasterDetailForms extends c
         {
             if ( subComponentCommands != null )
             {
-                XComponentSupplier componentSupplier = UnoRuntime.queryInterface( XComponentSupplier.class, subComponentCommands );
-                XModifiable modifySubComponent = UnoRuntime.queryInterface( XModifiable.class, componentSupplier.getComponent() );
+                XComponentSupplier componentSupplier = (XComponentSupplier) UnoRuntime.queryInterface( XComponentSupplier.class, subComponentCommands );
+                XModifiable modifySubComponent = (XModifiable) UnoRuntime.queryInterface( XModifiable.class, componentSupplier.getComponent() );
                 modifySubComponent.setModified( false );
                 Command command = new Command();
                 command.Name = "close";
@@ -339,7 +339,7 @@ public class MasterDetailForms extends c
     /* ------------------------------------------------------------------ */
     private XPropertySet impl_createGridColumn( final XIndexContainer _gridModel, final String _columnType, final String _boundField ) throws Exception
     {
-        final XGridColumnFactory columnFactory = UnoRuntime.queryInterface( XGridColumnFactory.class, _gridModel );
+        final XGridColumnFactory columnFactory = (XGridColumnFactory) UnoRuntime.queryInterface( XGridColumnFactory.class, _gridModel );
         XPropertySet column = columnFactory.createColumn( _columnType );
         column.setPropertyValue( "DataField", _boundField );
         column.setPropertyValue( "Name", _boundField );
@@ -388,8 +388,8 @@ public class MasterDetailForms extends c
      */
     private void verifyColumnValueIdentity( final String masterColName, final String detailColName ) throws SQLException
     {
-        XColumnLocate locateMasterCols = UnoRuntime.queryInterface( XColumnLocate.class, m_masterForm );
-        XColumnLocate locateDetailCols = UnoRuntime.queryInterface( XColumnLocate.class, m_detailForm );
+        XColumnLocate locateMasterCols = (XColumnLocate) UnoRuntime.queryInterface( XColumnLocate.class, m_masterForm );
+        XColumnLocate locateDetailCols = (XColumnLocate) UnoRuntime.queryInterface( XColumnLocate.class, m_detailForm );
 
         int masterValue = m_masterResult.getInt( locateMasterCols.findColumn( masterColName ) );
         int detailValue = m_detailResult.getInt( locateDetailCols.findColumn( detailColName ) );
--- forms/qa/integration/forms/FormPropertyBags.java.old	2010-08-25 22:34:06.000000000 +0200
+++ forms/qa/integration/forms/FormPropertyBags.java	2010-09-08 18:16:59.000000000 +0200
@@ -85,7 +85,7 @@ public class FormPropertyBags extends co
     {
         if ( m_document != null )
         {
-            XCloseable closeDoc = UnoRuntime.queryInterface( XCloseable.class, m_document.getDocument() );
+            XCloseable closeDoc = (XCloseable) UnoRuntime.queryInterface( XCloseable.class, m_document.getDocument() );
             closeDoc.close( true );
         }
     }
@@ -102,7 +102,7 @@ public class FormPropertyBags extends co
         XPropertySet textFieldModel = m_formLayer.createControlAndShape( "DatabaseTextField", 10, 10, 25, 6 );
 
         // check whether adding new properties is successful
-        XPropertyContainer propContainer = UnoRuntime.queryInterface(
+        XPropertyContainer propContainer = (XPropertyContainer) UnoRuntime.queryInterface(
             XPropertyContainer.class, textFieldModel );
         assure("XPropertyContainer not supported!", propContainer != null );
 
@@ -160,7 +160,7 @@ public class FormPropertyBags extends co
     private void impl_checkPropertyPersistence() throws com.sun.star.uno.Exception
     {
         // store the document
-        XStorable store = UnoRuntime.queryInterface( XStorable.class, m_document.getDocument() );
+        XStorable store = (XStorable) UnoRuntime.queryInterface( XStorable.class, m_document.getDocument() );
         String documentURL = util.utils.getOfficeTemp( m_orb ) + "document.odt";
         PropertyValue[] storeArguments = new PropertyValue[] { new PropertyValue() };
         storeArguments[0].Name = "FilterName";
--- forms/qa/integration/forms/DocumentHelper.java.old	2010-08-25 22:34:06.000000000 +0200
+++ forms/qa/integration/forms/DocumentHelper.java	2010-09-08 18:07:38.000000000 +0200
@@ -127,7 +127,7 @@ public class DocumentHelper
     public static DocumentHelper blankDocument( XMultiServiceFactory orb, DocumentType eType ) throws com.sun.star.uno.Exception
     {
         final PropertyValue[] args = new PropertyValue[] {
-            new PropertyValue( "MacroExecutionMode", -1, MacroExecMode.ALWAYS_EXECUTE, PropertyState.DIRECT_VALUE )
+            new PropertyValue( "MacroExecutionMode", -1, new Short(MacroExecMode.ALWAYS_EXECUTE), PropertyState.DIRECT_VALUE )
         };
         return implLoadDocument( orb, getDocumentFactoryURL( eType ), args );
     }
--- forms/qa/integration/forms/ListBox.java.old	2010-08-25 22:34:06.000000000 +0200
+++ forms/qa/integration/forms/ListBox.java	2010-09-08 18:27:17.000000000 +0200
@@ -75,9 +75,9 @@ public class ListBox extends TestCase
             // create the form document
             prepareDocument();
 
-            final XIndexAccess formsCollection = UnoRuntime.queryInterface( XIndexAccess.class,
+            final XIndexAccess formsCollection = (XIndexAccess) UnoRuntime.queryInterface( XIndexAccess.class,
                 m_document.getFormComponentTreeRoot() );
-            final XNameAccess form = UnoRuntime.queryInterface( XNameAccess.class, formsCollection.getByIndex(0) );
+            final XNameAccess form = (XNameAccess) UnoRuntime.queryInterface( XNameAccess.class, formsCollection.getByIndex(0) );
 
             final DocumentViewHelper view = m_document.getCurrentView();
             final XFormController formController = view.getFormController( form );
@@ -97,7 +97,7 @@ public class ListBox extends TestCase
                 {
                     final String columnFKName = fieldTypes[i] + "_fk";
                     Object listBoxModel = form.getByName( columnFKName );
-                    XListBox listBoxControl = UnoRuntime.queryInterface(  XListBox.class,
+                    XListBox listBoxControl = (XListBox) UnoRuntime.queryInterface(  XListBox.class,
                         view.getControl( listBoxModel ) );
                     if ( !listBoxControl.getSelectedItem().equals( displayValues[row] ) )
                     {
@@ -149,7 +149,7 @@ public class ListBox extends TestCase
     /* ------------------------------------------------------------------ */
     private String[] impl_getTypedValue( final String _asType, final int _rowNum ) throws SQLException
     {
-        Map< String, String[] > valueMap = new HashMap< String, String[] >();
+        Map valueMap = new HashMap();
         valueMap.put( "bigint",     new String[] { "1111111111", "222222222" } );
         valueMap.put( "boolean",    new String[] { "false", "true" } );
         valueMap.put( "date",       new String[] { "2001-01-01", "2002-02-02" } );
@@ -162,7 +162,7 @@ public class ListBox extends TestCase
         valueMap.put( "tinyint",    new String[] { "1", "2" } );
         valueMap.put( "varchar",    new String[] { "first", "second" } );
 
-        return valueMap.get( _asType );
+        return (String[]) valueMap.get( _asType );
     }
 
     /* ------------------------------------------------------------------ */
@@ -184,10 +184,10 @@ public class ListBox extends TestCase
             final String[] keyTypes = fieldDefinitions[0];
             final String[] keyCreationArgs = fieldDefinitions[1];
 
-            Vector< HsqlColumnDescriptor > foreignKeyColumns = new Vector< HsqlColumnDescriptor >();
+            Vector foreignKeyColumns = new Vector();
             foreignKeyColumns.add( new HsqlColumnDescriptor( "ID", "integer", HsqlColumnDescriptor.PRIMARY ) );
 
-            Vector< String[] > foreignKeyValues = new Vector< String[] >();
+            Vector foreignKeyValues = new Vector();
 
             StringBuffer foreignKeyInsertSQL = new StringBuffer();
             foreignKeyInsertSQL.append( "INSERT INTO \"" + m_foreignKeyTableName + "\" VALUES (?" );
@@ -213,7 +213,7 @@ public class ListBox extends TestCase
                 sql.append( tableName );
                 sql.append( "\" VALUES (?, ?)");
                 XPreparedStatement statement = connection.prepareStatement( sql.toString() );
-                XParameters statementParameters = UnoRuntime.queryInterface( XParameters.class, statement );
+                XParameters statementParameters = (XParameters) UnoRuntime.queryInterface( XParameters.class, statement );
 
                 final String[] keyValues = impl_getTypedValue( keyTypes[i], 0 );
 
@@ -234,17 +234,17 @@ public class ListBox extends TestCase
             }
 
             // create the table taking all those foreign keys
-            m_database.createTable( new HsqlTableDescriptor( m_foreignKeyTableName, foreignKeyColumns.toArray( new HsqlColumnDescriptor[0] ) ) );
+            m_database.createTable( new HsqlTableDescriptor( m_foreignKeyTableName, (HsqlColumnDescriptor[]) foreignKeyColumns.toArray( new HsqlColumnDescriptor[0] ) ) );
             // fill in some data
             foreignKeyInsertSQL.append( ")" );
             XPreparedStatement statement = connection.prepareStatement( foreignKeyInsertSQL.toString() );
-            XParameters statementParameters = UnoRuntime.queryInterface( XParameters.class, statement );
+            XParameters statementParameters = (XParameters) UnoRuntime.queryInterface( XParameters.class, statement );
             for ( int row=0; row<2; ++row )
             {
                 statementParameters.setInt( 1, row );
                 for ( int i=0; i<keyTypes.length; ++i )
                 {
-                    statementParameters.setString( i+2, foreignKeyValues.get(i)[row] );
+                    statementParameters.setString( i+2, ((String[])foreignKeyValues.get(i))[row] );
                 }
                 statement.execute();
             }
@@ -266,7 +266,7 @@ public class ListBox extends TestCase
         // bind the form to the foreign_keys table
         XPropertySet form = dbfTools.queryPropertySet( dbfTools.getParent( controlModel, XChild.class ) );
         form.setPropertyValue( "Command", m_foreignKeyTableName );
-        form.setPropertyValue( "CommandType", CommandType.TABLE );
+        form.setPropertyValue( "CommandType", new Integer (CommandType.TABLE) );
         form.setPropertyValue( "DataSourceName", m_database.getDocumentURL() );
 
         // create list boxes for the different foreign keys
--- forms/qa/integration/forms/FormLayer.java.old	2010-08-25 22:34:06.000000000 +0200
+++ forms/qa/integration/forms/FormLayer.java	2010-09-08 18:10:41.000000000 +0200
@@ -96,9 +96,9 @@ public class FormLayer
         int nYPos, int nWidth, int nHeight, Object _parentForm ) throws java.lang.Exception
     {
         // let the document create a shape
-        XMultiServiceFactory xDocAsFactory = UnoRuntime.queryInterface(
+        XMultiServiceFactory xDocAsFactory = (XMultiServiceFactory) UnoRuntime.queryInterface(
             XMultiServiceFactory.class, m_document.getDocument() );
-        XControlShape xShape = UnoRuntime.queryInterface( XControlShape.class,
+        XControlShape xShape = (XControlShape) UnoRuntime.queryInterface( XControlShape.class,
             xDocAsFactory.createInstance( "com.sun.star.drawing.ControlShape" ) );
 
         // position and size of the shape
@@ -112,7 +112,7 @@ public class FormLayer
 
         // create the form component (the model of a form control)
         String sQualifiedComponentName = "com.sun.star.form.component." + sFormComponentService;
-        XControlModel xModel = UnoRuntime.queryInterface( XControlModel.class,
+        XControlModel xModel = (XControlModel) UnoRuntime.queryInterface( XControlModel.class,
             m_document.getOrb().createInstance( sQualifiedComponentName ) );
 
         // insert the model into the form component hierarchy, if the caller gave us a location
@@ -122,7 +122,7 @@ public class FormLayer
             if ( _parentForm instanceof XIndexContainer )
                 parentForm = (XIndexContainer)_parentForm;
             else
-                parentForm = UnoRuntime.queryInterface( XIndexContainer.class, _parentForm );
+                parentForm = (XIndexContainer) UnoRuntime.queryInterface( XIndexContainer.class, _parentForm );
             parentForm.insertByIndex( parentForm.getCount(), xModel );
         }
 
@@ -132,7 +132,7 @@ public class FormLayer
         // add the shape to the shapes collection of the document
         XDrawPage pageWhereToInsert = ( m_page != null ) ? m_page : m_document.getMainDrawPage();
 
-        XShapes xDocShapes = UnoRuntime.queryInterface( XShapes.class, pageWhereToInsert );
+        XShapes xDocShapes = (XShapes) UnoRuntime.queryInterface( XShapes.class, pageWhereToInsert );
         xDocShapes.add( xShape );
 
         // and outta here with the XPropertySet interface of the model
@@ -281,7 +281,7 @@ public class FormLayer
     */
     public XPropertySet getRadioModelByRefValue( XPropertySet form, String name, String refValue ) throws com.sun.star.uno.Exception, java.lang.Exception
     {
-        XIndexAccess indexAccess = UnoRuntime.queryInterface( XIndexAccess.class, form );
+        XIndexAccess indexAccess = (XIndexAccess) UnoRuntime.queryInterface( XIndexAccess.class, form );
 
         for ( int i=0; i<indexAccess.getCount(); ++i )
         {
@@ -305,7 +305,7 @@ public class FormLayer
     */
     public XPropertySet getRadioModelByTag( XPropertySet form, String name, String tag ) throws com.sun.star.uno.Exception, java.lang.Exception
     {
-        XIndexAccess indexAccess = UnoRuntime.queryInterface( XIndexAccess.class, form );
+        XIndexAccess indexAccess = (XIndexAccess) UnoRuntime.queryInterface( XIndexAccess.class, form );
 
         for ( int i=0; i<indexAccess.getCount(); ++i )
         {
@@ -366,10 +366,10 @@ public class FormLayer
         // doing a user input, as the latter will trigger a lot of notifications, which the forms runtime environment
         // (namely the FormController) relies on to notice that the control changed.
         // Instead, we use the Accessibility interfaces of the control to simulate text input
-        XAccessible formattedAccessible = UnoRuntime.queryInterface( XAccessible.class,
+        XAccessible formattedAccessible = (XAccessible) UnoRuntime.queryInterface( XAccessible.class,
             m_document.getCurrentView().getControl( controlModel )
         );
-        XAccessibleEditableText textAccess = UnoRuntime.queryInterface( XAccessibleEditableText.class,
+        XAccessibleEditableText textAccess = (XAccessibleEditableText) UnoRuntime.queryInterface( XAccessibleEditableText.class,
             formattedAccessible.getAccessibleContext() );
         textAccess.setText( text );
     }
--- forms/qa/integration/forms/dbfTools.java.old	2010-08-25 22:34:06.000000000 +0200
+++ forms/qa/integration/forms/dbfTools.java	2010-09-08 18:17:41.000000000 +0200
@@ -24,7 +24,7 @@ class dbfTools
     */
     static public XPropertySet queryPropertySet( Object aComp )
     {
-        return UnoRuntime.queryInterface( XPropertySet.class, aComp );
+        return (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, aComp );
     }
 
     /* ------------------------------------------------------------------ */
@@ -32,7 +32,7 @@ class dbfTools
     */
     static public XIndexContainer queryIndexContainer( Object aComp )
     {
-        return UnoRuntime.queryInterface( XIndexContainer.class, aComp );
+        return (XIndexContainer) UnoRuntime.queryInterface( XIndexContainer.class, aComp );
     }
 
     /* ------------------------------------------------------------------ */
@@ -40,16 +40,15 @@ class dbfTools
     */
     static public XComponent queryComponent( Object aComp )
     {
-        return UnoRuntime.queryInterface( XComponent.class, aComp );
+        return (XComponent) UnoRuntime.queryInterface( XComponent.class, aComp );
     }
 
     /* ------------------------------------------------------------------ */
     /** retrieves the parent of the given object
     */
-    @SuppressWarnings("unchecked")
     static Object getParent( Object aComponent, Class aInterfaceClass )
     {
-        XChild xAsChild = UnoRuntime.queryInterface( XChild.class, aComponent );
+        XChild xAsChild = (XChild) UnoRuntime.queryInterface( XChild.class, aComponent );
         return UnoRuntime.queryInterface( aInterfaceClass, xAsChild.getParent() );
     }
 };
