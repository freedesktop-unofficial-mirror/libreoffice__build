From b4df589af5db5b00a308b9e12acbaa19092844a9 Mon Sep 17 00:00:00 2001
From: Jan Nieuwenhuizen <janneke@gnu.org>
Date: Tue, 5 May 2009 12:43:01 +0200
Subject: [PATCH] Layout with accessibility: dispose only once.  Fixes n#500267.

   * Modified     toolkit/source/awt/vclxwindow.cxx
   * Modified     toolkit/source/layout/vcl/wfield.cxx
   * Modified     toolkit/source/layout/vcl/wrapper.cxx
---
 toolkit/source/awt/vclxwindow.cxx     |    4 ----
 toolkit/source/layout/vcl/wfield.cxx  |    4 ++++
 toolkit/source/layout/vcl/wrapper.cxx |   13 ++++++-------
 3 files changed, 10 insertions(+), 11 deletions(-)

diff --git toolkit/source/awt/vclxwindow.cxx toolkit/source/awt/vclxwindow.cxx
index 35a08a3..90c1337 100644
--- toolkit/source/awt/vclxwindow.cxx
+++ toolkit/source/awt/vclxwindow.cxx
@@ -402,10 +402,6 @@ void VCLXWindowImpl::disposing()
 	aEvent.Source = mrAntiImpl;
 
 	maEventListeners.disposeAndClear( aEvent );
-#if 0 // ENABLE_LAYOUT
-        /* FIXME: see layout::~ComboBox () */
-        if (!dynamic_cast<VCLXComboBox*> (this))
-#endif /* 0 ENABLE_LAYOUT */
 	maFocusListeners.disposeAndClear( aEvent );
 	maWindowListeners.disposeAndClear( aEvent );
 	maKeyListeners.disposeAndClear( aEvent );
diff --git toolkit/source/layout/vcl/wfield.cxx toolkit/source/layout/vcl/wfield.cxx
index a792d47..d9d21a6 100644
--- toolkit/source/layout/vcl/wfield.cxx
+++ toolkit/source/layout/vcl/wfield.cxx
@@ -420,6 +420,8 @@ public:
 ComboBox::~ComboBox ()
 {
     OSL_TRACE ("%s: deleting ComboBox for window: %p", __FUNCTION__, GetWindow ());
+    SetClickHdl (Link ());
+    SetSelectHdl (Link ());
 }
 
 ComboBoxImpl::~ComboBoxImpl ()
@@ -630,6 +632,8 @@ public:
 
 ListBox::~ListBox ()
 {
+    SetClickHdl (Link ());
+    SetSelectHdl (Link ());
 }
 
 sal_uInt16 ListBox::InsertEntry(const OUString& rStr, sal_uInt16 nPos)
diff --git toolkit/source/layout/vcl/wrapper.cxx toolkit/source/layout/vcl/wrapper.cxx
index 31a1fcb..f9c0a4c 100644
--- toolkit/source/layout/vcl/wrapper.cxx
+++ toolkit/source/layout/vcl/wrapper.cxx
@@ -178,7 +178,10 @@ WindowImpl::WindowImpl (Context *context, const PeerHandle &peer, Window *window
 WindowImpl::~WindowImpl ()
 {
     if (mpWindow)
+    {
+        mpWindow->GetWindow ()->SetAccessible (0);
         mpWindow->mpImpl = 0;
+    }
     if (mvclWindow)
     {
         VCLXWindow *v = mvclWindow->GetWindowPeer ();
@@ -674,10 +677,6 @@ ControlImpl::ControlImpl (Context *context, const PeerHandle &peer, Window *wind
 
 ControlImpl::~ControlImpl ()
 {
-    if ((!!mGetFocusHdl || !!mLoseFocusHdl) && mxWindow.is ())
-        /* Disposing will be done @ VCLXWindow::dispose () maFocusListeners.disposeAndClear()
-           don't do it twice */
-        mxWindow.clear ();
 }
 
 void ControlImpl::SetGetFocusHdl (Link const& link)
@@ -701,7 +700,7 @@ void ControlImpl::SetLoseFocusHdl (Link const& link)
 
 Link& ControlImpl::GetLoseFocusHdl ()
 {
-    return mGetFocusHdl;
+    return mLoseFocusHdl;
 }
 
 void ControlImpl::UpdateListening (Link const& link)
@@ -713,10 +712,10 @@ void ControlImpl::UpdateListening (Link const& link)
         mxWindow->addFocusListener (this);
 }
 
-void SAL_CALL ControlImpl::disposing (lang::EventObject const&)
+void SAL_CALL ControlImpl::disposing (lang::EventObject const& e)
     throw (uno::RuntimeException)
 {
-///    mxWindow.clear ();
+    WindowImpl::disposing (e);
 }
 
 void SAL_CALL ControlImpl::focusGained (awt::FocusEvent const&)
-- 
1.6.0.4

