--- xmloff/source/forms/strings.hxx.orig	2008-06-04 15:22:46.000000000 +0800
+++ xmloff/source/forms/strings.hxx	2008-06-04 15:23:11.000000000 +0800
@@ -114,6 +114,7 @@ namespace xmloff
 	XMLFORM_CONSTASCII_STRING( PROPERTY_TABSTOP,			"Tabstop" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_STATE,				"State" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_ENABLED,			"Enabled" );
+	XMLFORM_CONSTASCII_STRING( PROPERTY_ENABLEVISIBLE,		"EnableVisible" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_MAXTEXTLENGTH,		"MaxTextLen" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_LINECOUNT,			"LineCount" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_TABINDEX,			"TabIndex" );
--- xmloff/source/forms/formattributes.hxx.orig	2008-06-04 15:22:46.000000000 +0800
+++ xmloff/source/forms/formattributes.hxx	2008-06-04 15:23:11.000000000 +0800
@@ -69,6 +69,7 @@ namespace xmloff
 	#define CCA_VALUE					0x00200000
     #define CCA_ORIENTATION             0x00400000
     #define CCA_VISUAL_EFFECT           0x00800000
+    #define CCA_ENABLEVISIBLE                 0x01000000
 
 	// flags for database control atttributes
 	#define DA_BOUND_COLUMN				0x00000001
--- xmloff/source/forms/formattributes.cxx.orig	2008-06-04 15:22:46.000000000 +0800
+++ xmloff/source/forms/formattributes.cxx	2008-06-04 15:23:11.000000000 +0800
@@ -60,6 +60,7 @@ namespace xmloff
 			case CCA_CURRENT_SELECTED: 	return "current-selected";
 			case CCA_CURRENT_VALUE: 	return "current-value";
 			case CCA_DISABLED: 			return "disabled";
+			case CCA_ENABLEVISIBLE: 	return "enablevisible";
 			case CCA_DROPDOWN: 			return "dropdown";
 			case CCA_FOR: 				return "for";
 			case CCA_IMAGE_DATA: 		return "image-data";
--- xmloff/source/forms/elementexport.cxx.orig	2008-06-04 15:22:46.000000000 +0800
+++ xmloff/source/forms/elementexport.cxx	2008-06-04 15:23:11.000000000 +0800
@@ -523,15 +523,15 @@ namespace xmloff
 		{
 			static sal_Int32 nBooleanPropertyAttributeIds[] =
 			{	// attribute flags
-				CCA_CURRENT_SELECTED, CCA_DISABLED, CCA_DROPDOWN, CCA_PRINTABLE, CCA_READONLY, CCA_SELECTED, CCA_TAB_STOP
+				CCA_CURRENT_SELECTED, CCA_DISABLED, CCA_DROPDOWN, CCA_PRINTABLE, CCA_READONLY, CCA_SELECTED, CCA_TAB_STOP, CCA_ENABLEVISIBLE
 			};
 			static const ::rtl::OUString* pBooleanPropertyNames[] =
 			{	// property names
-				&PROPERTY_STATE, &PROPERTY_ENABLED, &PROPERTY_DROPDOWN, &PROPERTY_PRINTABLE, &PROPERTY_READONLY, &PROPERTY_DEFAULT_STATE, &PROPERTY_TABSTOP
+				&PROPERTY_STATE, &PROPERTY_ENABLED, &PROPERTY_DROPDOWN, &PROPERTY_PRINTABLE, &PROPERTY_READONLY, &PROPERTY_DEFAULT_STATE, &PROPERTY_TABSTOP, &PROPERTY_ENABLEVISIBLE
 			};
 			static sal_Bool nBooleanPropertyAttrFlags[] =
 			{	// attribute defaults
-				BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_FALSE | BOOLATTR_INVERSE_SEMANTICS, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_TRUE, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_VOID
+				BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_FALSE | BOOLATTR_INVERSE_SEMANTICS, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_TRUE, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_VOID, BOOLATTR_DEFAULT_FALSE
 			};
 		#if OSL_DEBUG_LEVEL > 0
 			sal_Int32 nIdCount = sizeof(nBooleanPropertyAttributeIds) / sizeof(nBooleanPropertyAttributeIds[0]);
--- toolkit/inc/toolkit/helper/property.hxx.orig	2008-05-20 22:32:24.000000000 +0800
+++ toolkit/inc/toolkit/helper/property.hxx	2008-06-04 15:24:06.000000000 +0800
@@ -188,6 +188,7 @@ namespace rtl {
 #define BASEPROPERTY_URL                            134  // ::rtl::OUString
 #define BASEPROPERTY_UNIT                           135  // ::awt::FieldUnit
 #define BASEPROPERTY_CUSTOMUNITTEXT                 136  // ::rtl::OUString
+#define BASEPROPERTY_VISIBLE                        137  // sal_Bool
 
 // Keine gebundenen Properties, werden immer aus der Property BASEPROPERTY_FONTDESCRIPTOR entnommen.
 #define BASEPROPERTY_FONTDESCRIPTORPART_START			1000
--- toolkit/source/helper/property.cxx.orig	2008-04-11 17:36:59.000000000 +0800
+++ toolkit/source/helper/property.cxx	2008-06-04 15:23:11.000000000 +0800
@@ -269,7 +269,8 @@ ImplPropertyInfo* ImplGetPropertyInfos( 
 			DECL_PROP_3		( "RowHeight",				TREE_ROWHEIGHT,			sal_Int32,			BOUND, MAYBEDEFAULT, MAYBEVOID ),
 			DECL_PROP_2		( "InvokesStopNodeEditing",	TREE_INVOKESSTOPNODEEDITING, sal_Bool,		BOUND, MAYBEDEFAULT ),
             DECL_PROP_2     ( "DialogSourceURL",        DIALOGSOURCEURL,        ::rtl::OUString,    BOUND, MAYBEDEFAULT ),
-            DECL_PROP_2     ( "URL",                    URL,                    ::rtl::OUString,    BOUND, MAYBEDEFAULT )
+            DECL_PROP_2     ( "URL",                    URL,                    ::rtl::OUString,    BOUND, MAYBEDEFAULT ),
+            DECL_PROP_2     ( "EnableVisible",          ENABLEVISIBLE,          sal_Bool,    BOUND, MAYBEDEFAULT )
             };
 			pPropertyInfos = aImplPropertyInfos;
 			nElements = sizeof( aImplPropertyInfos ) / sizeof( ImplPropertyInfo );
--- toolkit/source/awt/vclxwindow.cxx.orig	2008-05-14 17:47:01.000000000 +0800
+++ toolkit/source/awt/vclxwindow.cxx	2008-06-04 15:23:11.000000000 +0800
@@ -207,6 +207,8 @@ private:
     ::vos::IMutex&                      mrMutex;
     ::toolkit::AccessibilityClient      maAccFactory;
     bool                                mbDisposed;
+    sal_Bool                            mbEnableVisible;
+    sal_Bool                            mbDirectVisible;
     ::osl::Mutex                        maListenerContainerMutex;
     ::cppu::OInterfaceContainerHelper   maWindow2Listeners;
 
@@ -228,6 +230,15 @@ public:
     */
     VCLXWindowImpl( VCLXWindow& _rAntiImpl, ::vos::IMutex& _rMutex );
 
+    /** synchronously mbEnableVisible
+    */
+    void    setEnableVisible( sal_Bool bEnableVisible ) { mbEnableVisible = bEnableVisible; }
+    sal_Bool    isEnableVisible() { return mbEnableVisible; }
+    /** synchronously mbDirectVisible;
+    */
+    void    setDirectVisible( sal_Bool bDirectVisible ) { mbDirectVisible = bDirectVisible; }
+    sal_Bool    isDirectVisible() { return mbDirectVisible; }
+
     /** asynchronously notifies a mouse event to the VCLXWindow's XMouseListeners
     */
     void    notifyMouseEvent( const awt::MouseEvent& _rMouseEvent, MouseEventType _nType );
@@ -298,6 +309,8 @@ VCLXWindowImpl::VCLXWindowImpl( VCLXWind
     ,mrAntiImpl( _rAntiImpl )
     ,mrMutex( _rMutex )
     ,mbDisposed( false )
+    ,mbEnableVisible(sal_True)
+    ,mbDirectVisible(sal_True)
     ,maListenerContainerMutex( )
     ,maWindow2Listeners( maListenerContainerMutex )
 #ifdef THREADED_NOTIFICATION
@@ -600,7 +613,12 @@ void VCLXWindow::SetWindow( Window* pWin
     SetOutputDevice( pWindow );
 
     if ( GetWindow() )
+    {
         GetWindow()->AddEventListener( LINK( this, VCLXWindow, WindowEventListener ) );
+        sal_Bool bDirectVisible = pWindow ? pWindow->IsVisible() : sal_False;
+        mpImpl->setDirectVisible( bDirectVisible );
+    }
+    
 }
 
 void VCLXWindow::suspendVclEventListening( )
@@ -1223,7 +1241,13 @@ void VCLXWindow::setVisible( sal_Bool bV
 			}
 		}
 */
-		pWindow->Show( bVisible );
+        if( mpImpl->isEnableVisible() )
+        {
+            mpImpl->setDirectVisible( bVisible );
+		    pWindow->Show( bVisible );
+        }
+        else
+            pWindow->Show( sal_False );
 	}
 }
 
@@ -1537,6 +1561,7 @@ void VCLXWindow::ImplGetPropertyIds( std
                          BASEPROPERTY_HELPURL,
                          BASEPROPERTY_TEXT,
                          BASEPROPERTY_PRINTABLE,
+                         BASEPROPERTY_ENABLEVISIBLE, // for visibility
                          BASEPROPERTY_TABSTOP,
                          0);
 
@@ -1610,6 +1635,23 @@ void VCLXWindow::setProperty( const ::rt
 					setEnable( b );
 			}
 			break;
+            case BASEPROPERTY_ENABLEVISIBLE:
+            {
+                sal_Bool b = sal_Bool();
+                if ( Value >>= b )
+                {
+                    if( b != mpImpl->isEnableVisible() )
+                    {
+                        mpImpl->setEnableVisible( b );
+                        // if mbEnableVisible change from false to true.
+                        // it will ignore the mbDirectVisible, setVisilbe
+                        // and set mbDirectVisible as true.
+                        if( mpImpl->isDirectVisible() || b )
+                            setVisible( b );
+                    }
+                }
+            }
+            break;
 			case BASEPROPERTY_TEXT:
 			case BASEPROPERTY_LABEL:
 			case BASEPROPERTY_TITLE:
@@ -2068,6 +2110,10 @@ void VCLXWindow::setProperty( const ::rt
 				aProp <<= (sal_Bool) GetWindow()->IsEnabled();
 			    break;
 
+			case BASEPROPERTY_ENABLEVISIBLE:
+				aProp <<= (sal_Bool) GetWindow()->IsVisible();
+			    break;
+
 			case BASEPROPERTY_TEXT:
 			case BASEPROPERTY_LABEL:
 			case BASEPROPERTY_TITLE:
@@ -2374,8 +2420,8 @@ void VCLXWindow::draw( sal_Int32 nX, sal
 	Window* pWindow = GetWindow();
     if ( !pWindow )
         return;
-
-	if ( pWindow )
+    
+	if ( pWindow && mpImpl->isEnableVisible() )
 	{
 		TabPage* pTabPage = dynamic_cast< TabPage* >( pWindow );
         if ( pTabPage )
--- toolkit/source/controls/unocontrolmodel.cxx.orig	2008-04-11 17:32:33.000000000 +0800
+++ toolkit/source/controls/unocontrolmodel.cxx	2008-06-04 15:23:11.000000000 +0800
@@ -338,6 +338,7 @@ void UnoControlModel::ImplPropertyChange
             case BASEPROPERTY_SCALEIMAGE:
             case BASEPROPERTY_ENABLED:
             case BASEPROPERTY_PRINTABLE:
+            case BASEPROPERTY_ENABLEVISIBLE:
             case BASEPROPERTY_DECORATION:           aDefault <<= (sal_Bool) sal_True; break;
 
             case BASEPROPERTY_HELPTEXT:
--- toolkit/source/controls/unocontrol.cxx.orig	2008-06-04 15:22:46.000000000 +0800
+++ toolkit/source/controls/unocontrol.cxx	2008-06-04 15:23:11.000000000 +0800
@@ -1286,6 +1286,18 @@ void UnoControl::createPeer( const Refer
 		}
 		//issue79712 ends
 		
+		// Visible
+		aPropName = GetPropertyName( BASEPROPERTY_ENABLEVISIBLE );
+		if ( xInfo->hasPropertyByName( aPropName ) )
+		{
+			aVal = xPSet->getPropertyValue( aPropName );
+			sal_Bool b = sal_Bool();
+			if ( ( aVal >>=b ) && !b )
+            {
+                maComponentInfos.bVisible = b;
+            }
+		}
+
 		// Align
 		aPropName = GetPropertyName( BASEPROPERTY_ALIGN );
 		if ( xInfo->hasPropertyByName( aPropName ) )
--- sc/source/filter/inc/xiescher.hxx.orig	2008-06-04 15:22:46.000000000 +0800
+++ sc/source/filter/inc/xiescher.hxx	2008-06-04 15:23:11.000000000 +0800
@@ -94,6 +94,8 @@ public:
     void                SetObjData( sal_uInt16 nObjType, sal_uInt16 nObjId, sal_uInt16 nObjFlags );
     /** Sets shape data from Escher stream. */
     void                SetShapeData( sal_uInt32 nShapeId, sal_uInt32 nShapeFlags, sal_uInt32 nShapeBlipId );
+    /** Sets shape data from Escher stream. */
+    inline void         SetVisible( const bool nObjVisible ) { mnObjVisible = nObjVisible; }
     /** Sets whether this is an area object (then its width and height must be greater than 0). */
     inline void         SetAreaObj( bool bAreaObj ) { mbAreaObj = bAreaObj; }
     /** Sets the object anchor explicitly. */
@@ -126,6 +128,8 @@ public:
     inline bool         IsInsertSdr() const { return mbInsSdr; }
     /** Returns true, if Escher object is printable. */
     inline bool         IsPrintable() const { return ::get_flag( mnObjFlags, EXC_OBJ_CMO_PRINTABLE ); }
+    /** Returns true, if Escher objest is not hidden. */
+    inline bool         IsVisible() const { return mnObjVisible; }
 
     /** Returns true, if the passed size is valid for this object. */
     bool                IsValidSize( const Rectangle& rAnchorRect ) const;
@@ -162,6 +166,7 @@ private:
     bool                mbValid;        /// true = Object is valid, do processing and insertion.
     bool                mbAreaObj;      /// true = Width and height must be greater than 0.
     bool                mbInsSdr;       /// true = Insert the SdrObject into draw page.
+    bool                mnObjVisible;   /// falgs for visibility
 };
 
 // ----------------------------------------------------------------------------
--- sc/source/filter/excel/xiescher.cxx.orig	2008-04-11 04:16:07.000000000 +0800
+++ sc/source/filter/excel/xiescher.cxx	2008-06-04 15:23:11.000000000 +0800
@@ -296,7 +296,8 @@ XclImpDrawObjBase::XclImpDrawObjBase( co
     mnShapeBlipId( 0 ),
     mbValid( true ),
     mbAreaObj( false ),
-    mbInsSdr( true )
+    mbInsSdr( true ),
+    mnObjVisible( 0 )
 {
 }
 
@@ -790,6 +791,7 @@ void XclImpTbxControlObj::DoProcessSdrOb
 
     // control printable?
     aPropSet.SetBoolProperty( CREATE_OUSTRING( "Printable" ), IsPrintable() );
+    aPropSet.SetBoolProperty( CREATE_OUSTRING( "EnableVisible" ), IsVisible() );
 
     // #118053# #i51348# set internal name of the control (use name from SdrObject, if extant)
     OUString aCtrlName = rSdrObj.GetName();
@@ -1552,6 +1554,7 @@ SdrObject* XclImpDffManager::ProcessObj(
 
     // set shape information from Escher stream
     xDrawObj->SetShapeData( rObjData.nShapeId, rObjData.nSpFlags, GetPropertyValue( DFF_Prop_pib ) );
+    xDrawObj->SetVisible( !GetPropertyBool( DFF_Prop_fHidden ) );
 
     /*  Connect textbox data (string, alignment, text orientation) to object.
         #98132# don't ask for a text-ID, Escher export doesn't set one. */
