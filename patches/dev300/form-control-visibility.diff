diff --git toolkit/inc/toolkit/helper/property.hxx toolkit/inc/toolkit/helper/property.hxx
index 30a7a89..238b412 100644
--- toolkit/inc/toolkit/helper/property.hxx
+++ toolkit/inc/toolkit/helper/property.hxx
@@ -191,6 +191,7 @@ namespace rtl {
 #define BASEPROPERTY_IMAGE_SCALE_MODE               137
 #define BASEPROPERTY_WRITING_MODE                   138
 #define BASEPROPERTY_CONTEXT_WRITING_MODE           139
+#define BASEPROPERTY_ENABLEVISIBLE                  140  // sal_Bool
 
 // Keine gebundenen Properties, werden immer aus der Property BASEPROPERTY_FONTDESCRIPTOR entnommen.
 #define BASEPROPERTY_FONTDESCRIPTORPART_START			1000
diff --git toolkit/source/awt/vclxwindow.cxx toolkit/source/awt/vclxwindow.cxx
index 3a6a2e2..90c1337 100644
--- toolkit/source/awt/vclxwindow.cxx
+++ toolkit/source/awt/vclxwindow.cxx
@@ -226,6 +226,8 @@ private:
     ::toolkit::AccessibilityClient      maAccFactory;
     bool                                mbDisposed;
     bool                                mbDrawingOntoParent;    // no bit mask, is passed around  by reference
+    sal_Bool                            mbEnableVisible;
+    sal_Bool                            mbDirectVisible;
 
     ::osl::Mutex                        maListenerContainerMutex;
     ::cppu::OInterfaceContainerHelper   maWindow2Listeners;
@@ -273,6 +275,15 @@ public:
     */
     VCLXWindowImpl( VCLXWindow& _rAntiImpl, ::vos::IMutex& _rMutex, bool _bWithDefaultProps );
 
+    /** synchronously mbEnableVisible
+    */
+    void    setEnableVisible( sal_Bool bEnableVisible ) { mbEnableVisible = bEnableVisible; }
+    sal_Bool    isEnableVisible() { return mbEnableVisible; }
+    /** synchronously mbDirectVisible;
+    */
+    void    setDirectVisible( sal_Bool bDirectVisible ) { mbDirectVisible = bDirectVisible; }
+    sal_Bool    isDirectVisible() { return mbDirectVisible; }
+
     /** asynchronously notifies a mouse event to the VCLXWindow's XMouseListeners
     */
     void    notifyMouseEvent( const awt::MouseEvent& _rMouseEvent, MouseEventType _nType );
@@ -347,6 +358,8 @@ VCLXWindowImpl::VCLXWindowImpl( VCLXWindow& _rAntiImpl, ::vos::IMutex& _rMutex,
     ,mrMutex( _rMutex )
     ,mbDisposed( false )
     ,mbDrawingOntoParent( false )
+    ,mbEnableVisible(sal_True)
+    ,mbDirectVisible(sal_True)
     ,maListenerContainerMutex( )
     ,maWindow2Listeners( maListenerContainerMutex )
     ,maDockableWindowListeners( maListenerContainerMutex )
@@ -623,7 +636,12 @@ void VCLXWindow::SetWindow( Window* pWindow )
     SetOutputDevice( pWindow );
 
     if ( GetWindow() )
+    {
         GetWindow()->AddEventListener( LINK( this, VCLXWindow, WindowEventListener ) );
+        sal_Bool bDirectVisible = pWindow ? pWindow->IsVisible() : sal_False;
+        mpImpl->setDirectVisible( bDirectVisible );
+    }
+    
 }
 
 void VCLXWindow::suspendVclEventListening( )
@@ -1224,7 +1242,13 @@ void VCLXWindow::setVisible( sal_Bool bVisible ) throw(::com::sun::star::uno::Ru
 			}
 		}
 */
-		pWindow->Show( bVisible );
+        if( mpImpl->isEnableVisible() )
+        {
+            mpImpl->setDirectVisible( bVisible );
+		    pWindow->Show( bVisible );
+        }
+        else
+            pWindow->Show( sal_False );
 	}
 }
 
@@ -1527,6 +1551,7 @@ void VCLXWindow::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds, bool bWithDe
                          BASEPROPERTY_HELPURL,
                          BASEPROPERTY_TEXT,
                          BASEPROPERTY_PRINTABLE,
+                         BASEPROPERTY_ENABLEVISIBLE, // for visibility
                          BASEPROPERTY_TABSTOP,
                          0);
 
@@ -1670,6 +1695,23 @@ void VCLXWindow::setProperty( const ::rtl::OUString& PropertyName, const ::com::
 				setEnable( b );
 		}
 		break;
+        case BASEPROPERTY_ENABLEVISIBLE:
+        {
+            sal_Bool b = sal_Bool();
+            if ( Value >>= b )
+            {
+                if( b != mpImpl->isEnableVisible() )
+                {
+                    mpImpl->setEnableVisible( b );
+                    // if mbEnableVisible change from false to true.
+                    // it will ignore the mbDirectVisible, setVisilbe
+                    // and set mbDirectVisible as true.
+                    if( mpImpl->isDirectVisible() || b )
+                        setVisible( b );
+                }
+            }
+        }
+        break;
 		case BASEPROPERTY_TEXT:
 		case BASEPROPERTY_LABEL:
 		case BASEPROPERTY_TITLE:
@@ -2135,6 +2177,10 @@ void VCLXWindow::setProperty( const ::rtl::OUString& PropertyName, const ::com::
 				aProp <<= (sal_Bool) GetWindow()->IsEnabled();
 			    break;
 
+			case BASEPROPERTY_ENABLEVISIBLE:
+				aProp <<= (sal_Bool) GetWindow()->IsVisible();
+			    break;
+
 			case BASEPROPERTY_TEXT:
 			case BASEPROPERTY_LABEL:
 			case BASEPROPERTY_TITLE:
@@ -2408,8 +2454,8 @@ void VCLXWindow::draw( sal_Int32 nX, sal_Int32 nY ) throw(::com::sun::star::uno:
 	Window* pWindow = GetWindow();
     if ( !pWindow )
         return;
-
-	if ( pWindow )
+    
+	if ( pWindow && mpImpl->isEnableVisible() )
 	{
 		TabPage* pTabPage = dynamic_cast< TabPage* >( pWindow );
         if ( pTabPage )
diff --git toolkit/source/controls/unocontrol.cxx toolkit/source/controls/unocontrol.cxx
index cfd9adf..74c2031 100644
--- toolkit/source/controls/unocontrol.cxx
+++ toolkit/source/controls/unocontrol.cxx
@@ -1292,6 +1292,18 @@ void UnoControl::createPeer( const Reference< XToolkit >& rxToolkit, const Refer
 		}
 		//issue79712 ends
 		
+		// Visible
+		aPropName = GetPropertyName( BASEPROPERTY_ENABLEVISIBLE );
+		if ( xInfo->hasPropertyByName( aPropName ) )
+		{
+			aVal = xPSet->getPropertyValue( aPropName );
+			sal_Bool b = sal_Bool();
+			if ( ( aVal >>=b ) && !b )
+            {
+                maComponentInfos.bVisible = b;
+            }
+		}
+
 		// Align
 		aPropName = GetPropertyName( BASEPROPERTY_ALIGN );
 		if ( xInfo->hasPropertyByName( aPropName ) )
diff --git toolkit/source/controls/unocontrolmodel.cxx toolkit/source/controls/unocontrolmodel.cxx
index 4ec35b3..33e7b7b 100644
--- toolkit/source/controls/unocontrolmodel.cxx
+++ toolkit/source/controls/unocontrolmodel.cxx
@@ -345,6 +345,7 @@ void UnoControlModel::ImplPropertyChanged( sal_uInt16 )
             case BASEPROPERTY_SCALEIMAGE:
             case BASEPROPERTY_ENABLED:
             case BASEPROPERTY_PRINTABLE:
+            case BASEPROPERTY_ENABLEVISIBLE:
             case BASEPROPERTY_DECORATION:           aDefault <<= (sal_Bool) sal_True; break;
 
             case BASEPROPERTY_HELPTEXT:
diff --git toolkit/source/helper/property.cxx toolkit/source/helper/property.cxx
index 18956cf..0a26448 100644
--- toolkit/source/helper/property.cxx
+++ toolkit/source/helper/property.cxx
@@ -272,7 +272,8 @@ ImplPropertyInfo* ImplGetPropertyInfos( sal_uInt16& rElementCount )
             DECL_PROP_2     ( "DialogSourceURL",        DIALOGSOURCEURL,        ::rtl::OUString,    BOUND, MAYBEDEFAULT ),
             DECL_PROP_2     ( "URL",                    URL,                    ::rtl::OUString,    BOUND, MAYBEDEFAULT ),
             DECL_PROP_2     ( "WritingMode",            WRITING_MODE,           sal_Int16,          BOUND, MAYBEDEFAULT ),
-            DECL_PROP_3     ( "ContextWritingMode",     CONTEXT_WRITING_MODE,   sal_Int16,          BOUND, MAYBEDEFAULT, TRANSIENT )
+            DECL_PROP_3     ( "ContextWritingMode",     CONTEXT_WRITING_MODE,   sal_Int16,          BOUND, MAYBEDEFAULT, TRANSIENT ),
+            DECL_PROP_2     ( "EnableVisible",          ENABLEVISIBLE,          sal_Bool,           BOUND, MAYBEDEFAULT )
             };
 			pPropertyInfos = aImplPropertyInfos;
 			nElements = sizeof( aImplPropertyInfos ) / sizeof( ImplPropertyInfo );
diff --git xmloff/source/forms/elementexport.cxx xmloff/source/forms/elementexport.cxx
index a2dce99..357b434 100644
--- xmloff/source/forms/elementexport.cxx
+++ xmloff/source/forms/elementexport.cxx
@@ -529,15 +529,15 @@ namespace xmloff
 		{
 			static sal_Int32 nBooleanPropertyAttributeIds[] =
 			{	// attribute flags
-				CCA_CURRENT_SELECTED, CCA_DISABLED, CCA_DROPDOWN, CCA_PRINTABLE, CCA_READONLY, CCA_SELECTED, CCA_TAB_STOP
+				CCA_CURRENT_SELECTED, CCA_DISABLED, CCA_DROPDOWN, CCA_PRINTABLE, CCA_READONLY, CCA_SELECTED, CCA_TAB_STOP, CCA_ENABLEVISIBLE
 			};
 			static const ::rtl::OUString* pBooleanPropertyNames[] =
 			{	// property names
-				&PROPERTY_STATE, &PROPERTY_ENABLED, &PROPERTY_DROPDOWN, &PROPERTY_PRINTABLE, &PROPERTY_READONLY, &PROPERTY_DEFAULT_STATE, &PROPERTY_TABSTOP
+				&PROPERTY_STATE, &PROPERTY_ENABLED, &PROPERTY_DROPDOWN, &PROPERTY_PRINTABLE, &PROPERTY_READONLY, &PROPERTY_DEFAULT_STATE, &PROPERTY_TABSTOP, &PROPERTY_ENABLEVISIBLE
 			};
 			static sal_Bool nBooleanPropertyAttrFlags[] =
 			{	// attribute defaults
-				BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_FALSE | BOOLATTR_INVERSE_SEMANTICS, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_TRUE, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_VOID
+				BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_FALSE | BOOLATTR_INVERSE_SEMANTICS, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_TRUE, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_FALSE, BOOLATTR_DEFAULT_VOID, BOOLATTR_DEFAULT_FALSE
 			};
 		#if OSL_DEBUG_LEVEL > 0
 			sal_Int32 nIdCount = sizeof(nBooleanPropertyAttributeIds) / sizeof(nBooleanPropertyAttributeIds[0]);
diff --git xmloff/source/forms/formattributes.cxx xmloff/source/forms/formattributes.cxx
index 7f312f5..4314711 100644
--- xmloff/source/forms/formattributes.cxx
+++ xmloff/source/forms/formattributes.cxx
@@ -60,6 +60,7 @@ namespace xmloff
 			case CCA_CURRENT_SELECTED: 	return "current-selected";
 			case CCA_CURRENT_VALUE: 	return "current-value";
 			case CCA_DISABLED: 			return "disabled";
+			case CCA_ENABLEVISIBLE: 	return "enablevisible";
 			case CCA_DROPDOWN: 			return "dropdown";
 			case CCA_FOR: 				return "for";
 			case CCA_IMAGE_DATA: 		return "image-data";
diff --git xmloff/source/forms/formattributes.hxx xmloff/source/forms/formattributes.hxx
index 40f1e6a..50bad1b 100644
--- xmloff/source/forms/formattributes.hxx
+++ xmloff/source/forms/formattributes.hxx
@@ -69,6 +69,7 @@ namespace xmloff
 	#define CCA_VALUE					0x00200000
     #define CCA_ORIENTATION             0x00400000
     #define CCA_VISUAL_EFFECT           0x00800000
+    #define CCA_ENABLEVISIBLE                 0x01000000
 
 	// flags for database control atttributes
 	#define DA_BOUND_COLUMN				0x00000001
diff --git xmloff/source/forms/strings.hxx xmloff/source/forms/strings.hxx
index eac6600..5b992ef 100644
--- xmloff/source/forms/strings.hxx
+++ xmloff/source/forms/strings.hxx
@@ -114,6 +114,7 @@ namespace xmloff
 	XMLFORM_CONSTASCII_STRING( PROPERTY_TABSTOP,			"Tabstop" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_STATE,				"State" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_ENABLED,			"Enabled" );
+	XMLFORM_CONSTASCII_STRING( PROPERTY_ENABLEVISIBLE,		"EnableVisible" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_MAXTEXTLENGTH,		"MaxTextLen" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_LINECOUNT,			"LineCount" );
 	XMLFORM_CONSTASCII_STRING( PROPERTY_TABINDEX,			"TabIndex" );
