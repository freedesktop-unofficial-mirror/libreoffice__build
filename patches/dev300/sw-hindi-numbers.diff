--- sw/source/filter/ww8/ww8par.cxx.old	2008-04-07 12:11:28.000000000 +0200
+++ sw/source/filter/ww8/ww8par.cxx	2008-04-07 14:07:39.000000000 +0200
@@ -2483,14 +2483,6 @@ sal_Unicode Custom8BitToUnicode(rtl_Text
         return cChar;
 }
 
-sal_Unicode SwWW8ImplReader::TranslateToHindiNumbers(sal_Unicode nChar)
-{
-    if (nChar >= 0x0030 && nChar <= 0x0039)
-        return nChar + 0x0630;
-
-    return nChar;
-}
-
 // Returnwert: true for no Sonderzeichen
 bool SwWW8ImplReader::ReadPlainChars(WW8_CP& rPos, long nEnd, long nCpOfs)
 {
@@ -2573,11 +2565,6 @@ bool SwWW8ImplReader::ReadPlainChars(WW8
         }
         else
             *pWork = Custom8BitToUnicode(hConverter, nBCode);
-
-        if (nIdctHint == 2)
-        {
-            *pWork = TranslateToHindiNumbers(*pWork);
-        }
     }
 
     if (nL2)
@@ -3279,8 +3266,7 @@ SwWW8ImplReader::SwWW8ImplReader(BYTE nV
 	pAuthorInfos(0),
 	sBaseURL(rBaseURL),
     mbNewDoc(bNewDoc),
-	nDropCap(0),
-    nIdctHint(0)
+	nDropCap(0)
 {
     pStrm->SetNumberFormatInt( NUMBERFORMAT_INT_LITTLEENDIAN );
     nWantedVersion = nVersionPara;
--- sw/source/filter/ww8/ww8par.hxx.old	2008-04-07 12:11:28.000000000 +0200
+++ sw/source/filter/ww8/ww8par.hxx	2008-04-07 14:07:39.000000000 +0200
@@ -1118,8 +1118,6 @@ private:
     bool bDropCap;
     int nDropCap;
 
-    int nIdctHint;
-
 //---------------------------------------------
 
     const SprmReadInfo& GetSprmReadInfo(USHORT nId) const;
@@ -1156,7 +1154,6 @@ private:
     bool ReadChar(long nPosCp, long nCpOfs);
     bool ReadPlainChars(WW8_CP& rPos, long nEnd, long nCpOfs);
     bool ReadChars(WW8_CP& rPos, WW8_CP nNextAttr, long nTextEnd, long nCpOfs);
-    sal_Unicode TranslateToHindiNumbers(sal_Unicode);
 
     void SetDocumentGrid(SwFrmFmt &rFmt, const wwSection &rSection);
 
@@ -1478,7 +1475,6 @@ public:     // eigentlich private, geht 
     void Read_DontAddEqual(USHORT , const BYTE *pData, short nLen);
     void Read_LineSpace(        USHORT, const BYTE*, short nLen );
     void Read_Justify(USHORT, const BYTE*, short nLen);
-    void Read_IdctHint(USHORT, const BYTE*, short nLen);
     bool IsRightToLeft();
     void Read_RTLJustify(USHORT, const BYTE*, short nLen);
     void Read_Hyphenation(      USHORT, const BYTE* pData, short nLen );
--- sw/source/filter/ww8/ww8par6.cxx.old	2008-04-07 12:11:25.000000000 +0200
+++ sw/source/filter/ww8/ww8par6.cxx	2008-04-07 14:07:39.000000000 +0200
@@ -4245,14 +4245,6 @@ void SwWW8ImplReader::Read_UL( USHORT nI
     NewAttr( aUL );
 }
 
-void SwWW8ImplReader::Read_IdctHint( USHORT, const BYTE* pData, short nLen )
-{
-    if (nLen < 0)
-        nIdctHint = 0;
-    else    
-        nIdctHint = *pData;
-}
-
 void SwWW8ImplReader::Read_Justify( USHORT, const BYTE* pData, short nLen )
 {
     if( nLen < 0 )
@@ -5870,7 +5862,7 @@ const wwSprmDispatcher *GetWW8SprmDispat
                                                      //word;
         {0x486E, &SwWW8ImplReader::Read_Language},   //"sprmCRgLid1" chp.rglid[1];
                                                      //LID: for Far East text;word;
-        {0x286F, &SwWW8ImplReader::Read_IdctHint},   //"sprmCIdctHint" chp.idctHint;
+        {0x286F, 0},                                 //"sprmCIdctHint" chp.idctHint;
                                                      //IDCT: byte;
         {0x2E00, 0},                                 //"sprmPicBrcl" pic.brcl;brcl
                                                      //(see PIC structure
