diff --git sc/inc/chart2uno.hxx sc/inc/chart2uno.hxx
index b685676..9126e8e 100644
--- sc/inc/chart2uno.hxx
+++ sc/inc/chart2uno.hxx
@@ -381,6 +381,9 @@ public:
 // 									com::sun::star::uno::XInterface> xObj );
 
 private:
+    void markRangeDirty(const ScRange& rRange) const;
+
+private:
     // Implementation --------------------------------------------------------
 
     ScRangeListRef GetRangeList() { return m_xRanges; }
diff --git sc/source/ui/unoobj/chart2uno.cxx sc/source/ui/unoobj/chart2uno.cxx
index 4f16c3f..e2be940 100644
--- sc/source/ui/unoobj/chart2uno.cxx
+++ sc/source/ui/unoobj/chart2uno.cxx
@@ -1824,7 +1824,11 @@ void SAL_CALL ScChart2DataSequence::addModifyListener( const uno::Reference< uti
         {
             ULONG nCount = m_xRanges->Count();
             for (ULONG i=0; i<nCount; i++)
-                m_pDocument->StartListeningArea( *m_xRanges->GetObject(i), m_pValueListener );
+            {
+                ScRange aRange = *m_xRanges->GetObject(i);    
+                m_pDocument->StartListeningArea( aRange, m_pValueListener );
+                markRangeDirty(aRange);
+            }
         }
 
 		acquire();	// don't lose this object (one ref for all listeners)
@@ -1972,6 +1976,37 @@ void SAL_CALL ScChart2DataSequence::removeVetoableChangeListener(
     OSL_ENSURE( false, "Not yet implemented" );
 }
 
+void ScChart2DataSequence::markRangeDirty(const ScRange& rRange) const
+{
+    if (!m_pDocument)
+        return;
+
+    const ScAddress &s = rRange.aStart, &e = rRange.aEnd;
+    SCTAB nTab1 = s.Tab(), nTab2 = e.Tab();
+    SCCOL nCol1 = s.Col(), nCol2 = e.Col();
+    SCROW nRow1 = s.Row(), nRow2 = e.Row();
+    for (SCTAB nTab = nTab1; nTab <= nTab2; ++nTab)
+    {
+        for (SCCOL nCol = nCol1; nCol <= nCol2; ++nCol)
+        {
+            for (SCROW nRow = nRow1; nRow <= nRow2; ++nRow)
+            {
+                ScAddress aAddr(nCol, nRow, nTab);
+                ScBaseCell* pBaseCell = m_pDocument->GetCell(aAddr);
+                if (!pBaseCell || pBaseCell->GetCellType() != CELLTYPE_FORMULA)
+                    continue;
+
+                ScFormulaCell* pFCell = static_cast<ScFormulaCell*>(pBaseCell);
+                ScTokenArray* pArray = pFCell->GetCode();
+                if (!pArray)
+                    continue;
+
+                pFCell->SetDirty();
+            }
+        }
+    }
+}
+
 // XUnoTunnel
 
 // sal_Int64 SAL_CALL ScChart2DataSequence::getSomething(
