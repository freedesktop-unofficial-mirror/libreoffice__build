diff -u -r ../configmgr.pristine/source/backend/binaryreader.cxx ../configmgr/source/backend/binaryreader.cxx
--- configmgr/source/backend/binaryreader.cxx
+++ configmgr/source/backend/binaryreader.cxx
@@ -532,10 +532,10 @@
 
 		// --------------------------------------------------------------------------
 
-        inline uno::Reference<io::XDataInputStream> BinaryReader::getDataInputStream()
+        inline BinaryReader_Impl * BinaryReader::getDataInputStream()
 		{
             OSL_ENSURE(m_xDataInputStream.is(),"Binary Cache: Reader was not opened - no input stream");
-            return m_xDataInputStream;
+            return static_cast<BinaryReader_Impl *>(m_xDataInputStream.get());
 		}
 
 		// --------------------------------------------------------------------------


diff -u -r ../configmgr.pristine/source/backend/binaryreader.hxx ../configmgr/source/backend/binaryreader.hxx
--- configmgr/source/backend/binaryreader.hxx
+++ configmgr/source/backend/binaryreader.hxx
@@ -48,6 +48,7 @@
 		namespace uno  = css::uno;
 		namespace lang = css::lang;
 		// -----------------------------------------------------------------------------
+        class BinaryReader_Impl;
 		class BinaryReader 
 		{
 			rtl::OUString m_sFileURL;
@@ -75,7 +76,7 @@
 			void read(uno::Sequence< rtl::OUString > &_aValue)  SAL_THROW( (io::IOException, uno::RuntimeException) );
 
 		private:
-			inline uno::Reference<io::XDataInputStream> getDataInputStream();
+			inline BinaryReader_Impl * getDataInputStream();
 		};
 		// --------------------------------------------------------------------------
 


diff -u -r ../configmgr.pristine/source/tree/cmtree.cxx ../configmgr/source/tree/cmtree.cxx
--- configmgr/source/tree/cmtree.cxx
+++ configmgr/source/tree/cmtree.cxx
@@ -65,13 +65,11 @@
 
 // ------------------------ ChildListSet implementations ------------------------
     ChildListSet::ChildListSet(ChildListSet const& aSet, treeop::DeepChildCopy)
-        : m_aChildList(0)
+        : m_aChildList(aSet.m_aChildList.size())
 	{
-        for (size_t i = 0; i < aSet.m_aChildList.size(); i++)
-        {
-			m_aChildList.insert(m_aChildList.end(),
-                                aSet.m_aChildList[i]->clone().release());
-        }
+        int len = aSet.m_aChildList.size();
+        for (int i = 0; i < len; i++)
+            m_aChildList[i] = aSet.m_aChildList[i]->clone().release();
 	}
 	ChildListSet::~ChildListSet()
 	{
