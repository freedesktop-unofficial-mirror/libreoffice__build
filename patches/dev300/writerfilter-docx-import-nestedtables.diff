diff -ur writerfilter.orig/inc/resourcemodel/TableData.hxx writerfilter/inc/resourcemodel/TableData.hxx
--- writerfilter.orig/inc/resourcemodel/TableData.hxx	2009-04-02 12:57:45.000000000 +0200
+++ writerfilter/inc/resourcemodel/TableData.hxx	2009-04-15 12:27:08.000000000 +0200
@@ -276,6 +276,11 @@
     typedef ::std::vector<RowPointer_t> Rows;
 
     /**
+       the table properties
+     */
+    PropertiesPointer mpTableProps;
+
+    /**
        the data of the rows of the table
     */
     Rows mRows;
@@ -349,6 +354,22 @@
         mpRow->insertCellProperties(i, pProps);
     }
 
+    void insertTableProperties( PropertiesPointer pProps )
+    {
+        if ( mpTableProps.get( ) )
+            mpTableProps->insert( pProps );
+        else
+            mpTableProps = pProps;
+    }
+
+    /**
+      Return the table properties.
+     */
+    PropertiesPointer getTableProperties( ) 
+    {
+        return mpTableProps;
+    }
+
     /**
        Return number of rows in the table.
      */
diff -ur writerfilter.orig/inc/resourcemodel/TableManager.hxx writerfilter/inc/resourcemodel/TableManager.hxx
--- writerfilter.orig/inc/resourcemodel/TableManager.hxx	2009-04-02 12:57:45.000000000 +0200
+++ writerfilter/inc/resourcemodel/TableManager.hxx	2009-04-16 15:03:06.000000000 +0200
@@ -103,6 +103,11 @@
         @param rT    end handle of cell
     */
     virtual void endCell(const T & rT) = 0;
+
+    virtual T* getTable( )
+    {
+        return NULL;
+    };
 };
 
 template <typename T, typename PropertiesPointer>
@@ -151,16 +156,16 @@
     /**
        properties of the current cell
     */
-    PropertiesPointer mpCellProps;
+    vector< PropertiesPointer > mpCellProps;
 
     /**
         properties of the current row
     */
-    PropertiesPointer mpRowProps;
+    vector< PropertiesPointer > mpRowProps;
 
-    /**
-       properties of the current table
-    */
+    /** 
+        properties of the current table: don't use them directly.
+     */
     PropertiesPointer mpTableProps;
 
     /**
@@ -168,6 +173,7 @@
     */
     T mCurHandle;
 
+    T* mpInnerTable;
     /**
        stack of table data
 
@@ -231,7 +237,6 @@
      */
     virtual void clearData();
 
-
 public:
     TableManager();
     virtual ~TableManager(){}
@@ -351,7 +356,7 @@
 template <typename T, typename PropertiesPointer>
 TableManager<T, PropertiesPointer>::TableManager()
 : mbRowEnd(false), mbInCell(false), mbCellEnd(false), mnTableDepthNew(0),
-  mnTableDepth(0)
+  mnTableDepth(0), mpInnerTable( NULL )
 {
 }
 
@@ -398,19 +403,30 @@
 template <typename T, typename PropertiesPointer>
 void TableManager<T, PropertiesPointer>::startLevel()
 {
+#if DEBUG
+    std::clog << "TableManager::startLevel()" << std::endl;
+#endif
     typename TableData<T, PropertiesPointer>::Pointer_t pTableData
         (new TableData<T, PropertiesPointer>(mTableDataStack.size()));
 
     mTableDataStack.push(pTableData);
+
+    PropertiesPointer pEmptyProps;
+    cellProps( pEmptyProps );
 }
 
 template <typename T, typename PropertiesPointer>
 void TableManager<T, PropertiesPointer>::endLevel()
 {
+#if DEBUG
+    std::clog << "TableManager::endLevel()" << std::endl;
+#endif
     if (mpTableDataHandler.get() != NULL)
         resolveCurrentTable();
-
     mTableDataStack.pop();
+
+    if ( mpCellProps.size( ) > 0 )
+        mpCellProps.pop_back( );
 }
 
 template <typename T, typename PropertiesPointer>
@@ -426,12 +442,6 @@
 void TableManager<T, PropertiesPointer>::endParagraphGroup()
 {
     sal_Int32 nTableDepthDifference = mnTableDepthNew - mnTableDepth;
-    while (nTableDepthDifference > 0)
-    {
-        startLevel();
-
-        --nTableDepthDifference;
-    }
     while (nTableDepthDifference < 0)
     {
         endLevel();
@@ -447,14 +457,23 @@
     if (mbRowEnd)
     {
         endOfRowAction();
-        pTableData->endRow(mpRowProps);
-        mpRowProps.reset();
+        pTableData->endRow( mpRowProps.back( ) );
+        mpRowProps.back( ).reset();
     }
-
-    else if (mbInCell)
+    else if ( mbInCell )
     {
         if (! pTableData->isCellOpen())
-            pTableData->addCell(mCurHandle, mpCellProps);
+        {
+            if ( mpInnerTable )
+            {
+                pTableData->addCell( *mpInnerTable, mpCellProps.back( ) );
+                mpInnerTable = NULL;
+            }
+            else
+            {
+                pTableData->addCell( mCurHandle, mpCellProps.back( ) );
+            }
+        }
 
         if (mbCellEnd)
         {
@@ -462,7 +481,8 @@
             pTableData->endCell(mCurHandle);
         }
     }
-    mpCellProps.reset();
+    if ( mpCellProps.size( ) > 0 )
+        mpCellProps.back().reset( );
 }
 
 template <typename T, typename PropertiesPointer>
@@ -538,10 +558,15 @@
 template <typename T, typename PropertiesPointer>
 void TableManager<T, PropertiesPointer>::cellProps(PropertiesPointer pProps)
 {
-    if(mpCellProps.get())
-        mpCellProps->insert( pProps );
+    if ( mpCellProps.size( ) == mTableDataStack.size( ) )
+    {
+        if ( mpCellProps.back( ).get( ) )
+            mpCellProps.back()->insert( pProps );
+        else
+            mpCellProps.back( ) = pProps;
+    }
     else
-        mpCellProps = pProps;
+        mpCellProps.push_back( pProps );
 }
 
 template <typename T, typename PropertiesPointer>
@@ -554,19 +579,24 @@
 template <typename T, typename PropertiesPointer>
 void TableManager<T, PropertiesPointer>::insertRowProps(PropertiesPointer pProps)
 {
-    if( mpRowProps.get() )
-        mpRowProps->insert( pProps );
+    if ( mpRowProps.size( ) == ( mTableDataStack.size( ) - 1 ) )
+    {
+        if( mpRowProps.back( ).get( ) )
+            mpRowProps.back( )->insert( pProps );
+        else
+            mpRowProps.back( ) = pProps;
+    }
     else
-        mpRowProps = pProps;
+        mpRowProps.push_back( pProps );
 }
 
 template <typename T, typename PropertiesPointer>
 void TableManager<T, PropertiesPointer>::insertTableProps(PropertiesPointer pProps)
 {
-    if( mpTableProps.get() )
-        mpTableProps->insert( pProps );
-    else
-        mpTableProps = pProps;
+    typename TableData<T, PropertiesPointer>::Pointer_t
+        pTableData = mTableDataStack.top();
+
+    pTableData->insertTableProperties( pProps );
 }
 
 template <typename T, typename PropertiesPointer>
@@ -579,7 +609,7 @@
 
         unsigned int nRows = pTableData->getRowCount();
 
-        mpTableDataHandler->startTable(nRows, pTableData->getDepth(), mpTableProps);
+        mpTableDataHandler->startTable(nRows, pTableData->getDepth(), pTableData->getTableProperties( ) );
 
         for (unsigned int nRow = 0; nRow < nRows; ++nRow)
         {
@@ -602,8 +632,12 @@
         }
 
         mpTableDataHandler->endTable();
+
+        // The inner table has to be stored only if there is something in the stack
+        // The 0 depth is the dummy table for the whole stream
+        if ( pTableData->getDepth( ) > 1 )
+            mpInnerTable = mpTableDataHandler->getTable( );
     }
-    mpTableProps.reset();
     clearData();
 }
 
Seulement dans writerfilter.orig/prj: tests.lst
diff -ur writerfilter.orig/source/dmapper/DomainMapper.cxx writerfilter/source/dmapper/DomainMapper.cxx
--- writerfilter.orig/source/dmapper/DomainMapper.cxx	2009-04-17 10:38:47.000000000 +0200
+++ writerfilter/source/dmapper/DomainMapper.cxx	2009-04-16 09:44:59.000000000 +0200
@@ -3920,8 +3920,16 @@
     break;
     case NS_ooxml::LN_EG_RPrBase_rStyle:
         /* WRITERFILTERSTATUS: done: 100, planned: 0.5, spent: 0 */
-        if (m_pImpl->GetTopContext())
-            m_pImpl->GetTopContext()->Insert( PROP_CHAR_STYLE_NAME, true, uno::makeAny( m_pImpl->GetStyleSheetTable()->ConvertStyleName( sStringValue, true )));
+        {
+            rtl::OUString sConvertedName( m_pImpl->GetStyleSheetTable()->ConvertStyleName( sStringValue, true ) );
+            // First check if the style exists in the document.
+            StyleSheetEntryPtr pEntry = m_pImpl->GetStyleSheetTable( )->FindStyleSheetByStyleName( sConvertedName );
+            bool bExists = pEntry.get( ) && ( pEntry->nStyleTypeCode == STYLE_TYPE_CHAR );
+
+            // Add the property if the style exists
+            if ( bExists && m_pImpl->GetTopContext() )
+                m_pImpl->GetTopContext()->Insert( PROP_CHAR_STYLE_NAME, true, uno::makeAny( sConvertedName ) );
+        }
     break;
     case NS_ooxml::LN_CT_TblPrBase_tblCellMar: //cell margins
         /* WRITERFILTERSTATUS: done: 100, planned: 0.5, spent: 0 */
Seulement dans writerfilter.orig/source/dmapper: DomainMapper.cxx.orig
Seulement dans writerfilter.orig/source/dmapper: DomainMapper_Impl.cxx.orig
diff -ur writerfilter.orig/source/dmapper/DomainMapperTableHandler.cxx writerfilter/source/dmapper/DomainMapperTableHandler.cxx
--- writerfilter.orig/source/dmapper/DomainMapperTableHandler.cxx	2009-04-17 10:38:46.000000000 +0200
+++ writerfilter/source/dmapper/DomainMapperTableHandler.cxx	2009-04-15 12:27:08.000000000 +0200
@@ -263,6 +263,7 @@
         }
         m_aTableProperties->Invalidate();
         sNames += ::rtl::OUString(' ');
+        clog << "Props: " << rtl::OUStringToOString( sNames, RTL_TEXTENCODING_UTF8 ).getStr( ) << endl;
     }
 }
 #endif
@@ -432,10 +433,17 @@
                                 m_aTableProperties->find( PropertyDefinition( PROP_HEADER_ROW_COUNT, false ) );
         if( aRepeatIter == m_aTableProperties->end() )
             m_aTableProperties->Insert( PROP_HEADER_ROW_COUNT, false, uno::makeAny( (sal_Int32)0 ));
+
+        // Remove the PROP_HEADER_ROW_COUNT from the table default to avoid
+        // propagating it to the cells
+        PropertyMap::iterator aDefaultRepeatIt =
+                                pTableDefaults->find( PropertyDefinition( PROP_HEADER_ROW_COUNT, false ) );
+        if ( aDefaultRepeatIt != pTableDefaults->end( ) )
+            pTableDefaults->erase( aDefaultRepeatIt );
         
         aTableProperties = m_aTableProperties->GetPropertyValues();
     }
-    
+   
     //  expands to uno::Sequence< Sequence< beans::PropertyValues > > 
     CellPropertyValuesSeq_t     aCellProperties( m_aCellProperties.size() );
     
@@ -512,7 +520,9 @@
                 pAllCellProps->insert( *aCellIterator );
                 aCellIterator->get( )->swap( *pAllCellProps.get( ) );
 
+#if DEBUG
                 clog << "Cell #" << nCell << ", Row #" << nRow << endl;
+#endif
 
                 lcl_computeCellBorders( pTableBorders, *aCellIterator, nCell, nRow, bIsEndCol, bIsEndRow );
 
@@ -631,12 +641,15 @@
         (void) nCellPropertiesProperties;
         ++nCellPropertiesProperties;
     }    
-#endif           
             clog << "Converting table" << endl;
-            m_xText->convertToTable(*m_pTableSeq, 
+#endif           
+                
+            uno::Reference<text::XTextTable> xTable = m_xText->convertToTable(*m_pTableSeq, 
                                     aCellProperties,
                                     aRowProperties,
                                     aTableProperties);
+
+            m_xTableRange = xTable->getAnchor( );
         }
         catch (lang::IllegalArgumentException e)
         {
diff -ur writerfilter.orig/source/dmapper/DomainMapperTableHandler.hxx writerfilter/source/dmapper/DomainMapperTableHandler.hxx
--- writerfilter.orig/source/dmapper/DomainMapperTableHandler.hxx	2009-04-02 12:57:42.000000000 +0200
+++ writerfilter/source/dmapper/DomainMapperTableHandler.hxx	2009-04-15 12:27:08.000000000 +0200
@@ -66,6 +66,8 @@
     RowSequencePointer_t    m_pRowSeq;
     TableSequencePointer_t  m_pTableSeq;
 
+    Handle_t               m_xTableRange;
+
     // properties
     PropertyMapVector2      m_aCellProperties;
     PropertyMapVector1      m_aRowProperties;
@@ -87,6 +89,11 @@
     virtual void endRow();
     virtual void startCell(const Handle_t & start, TablePropertyMapPtr pProps);
     virtual void endCell(const Handle_t & end);
+
+    virtual Handle_t* getTable( ) 
+    {
+        return &m_xTableRange;
+    };
 };
 
 }}
diff -ur writerfilter.orig/source/dmapper/DomainMapperTableManager.cxx writerfilter/source/dmapper/DomainMapperTableManager.cxx
--- writerfilter.orig/source/dmapper/DomainMapperTableManager.cxx	2009-04-17 10:38:46.000000000 +0200
+++ writerfilter/source/dmapper/DomainMapperTableManager.cxx	2009-04-16 16:27:07.000000000 +0200
@@ -226,10 +226,8 @@
             break;
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case NS_ooxml::LN_CT_TblGridBase_gridCol:
-            
-            if(!m_nRow)
-            {    
-                m_aTableGrid.push_back( ConversionHelper::convertTwipToMM100( nIntValue ) );
+            {   
+                getCurrentGrid()->push_back( ConversionHelper::convertTwipToMM100( nIntValue ) );
             }    
             break;
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
@@ -244,14 +242,18 @@
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case NS_ooxml::LN_CT_TcPrBase_gridSpan: //number of grid positions spanned by this cell
             {    
+#if DEBUG
+                clog << "GridSpan: " << nIntValue << endl;
+#endif
                 //the cell width is determined by its position in the table grid 
                 //it takes 'gridSpan' grid elements
-                if( m_aGridSpans.size() < m_nCell)
+                IntVectorPtr pCurrentSpans = getCurrentSpans( );
+                if( pCurrentSpans->size() < m_nCell)
                 {
                     //fill missing elements with '1'
-                    m_aGridSpans.insert( m_aGridSpans.end(), m_nCell - m_aGridSpans.size(), 1 );
-                }    
-                m_aGridSpans.push_back( nIntValue );
+                    pCurrentSpans->insert( pCurrentSpans->end(), m_nCell - pCurrentSpans->size(), 1 );
+                }   
+                pCurrentSpans->push_back( nIntValue );
             }
             break;
             /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
@@ -277,12 +279,47 @@
                     cellProps( pProps );
                 }
                 break;
+            case NS_ooxml::LN_tblStart:
+                {
+                    startLevel( );
+                }
+                break;
             default:
                 bRet = false;
         }
     }
     return bRet;
 }
+
+boost::shared_ptr< vector<sal_Int32> > DomainMapperTableManager::getCurrentGrid( )
+{
+    return m_aTableGrid.back( );
+}
+
+boost::shared_ptr< vector< sal_Int32 > > DomainMapperTableManager::getCurrentSpans( )
+{
+    return m_aGridSpans.back( );
+}
+
+void DomainMapperTableManager::startLevel( )
+{
+    DomainMapperTableManager_Base_t::startLevel( );
+
+    IntVectorPtr pNewGrid( new vector<sal_Int32> );
+    IntVectorPtr pNewSpans( new vector<sal_Int32> );
+    m_aTableGrid.push_back( pNewGrid );
+    m_aGridSpans.push_back( pNewSpans );
+    m_nTableWidth = 0;
+}
+
+void DomainMapperTableManager::endLevel( )
+{
+    m_aTableGrid.pop_back( );
+    m_aGridSpans.pop_back( );
+    
+    DomainMapperTableManager_Base_t::endLevel( );
+}
+
 /*-- 02.05.2007 14:36:26---------------------------------------------------
 
   -----------------------------------------------------------------------*/
@@ -295,10 +332,11 @@
   -----------------------------------------------------------------------*/
 void DomainMapperTableManager::endOfRowAction()
 {
-    if(!m_nRow && !m_nTableWidth && m_aTableGrid.size())
+    IntVectorPtr pTableGrid = getCurrentGrid( );
+    if(!m_nTableWidth && pTableGrid->size())
     {
-        ::std::vector<sal_Int32>::const_iterator aCellIter = m_aTableGrid.begin();
-        while( aCellIter != m_aTableGrid.end() )
+        ::std::vector<sal_Int32>::const_iterator aCellIter = pTableGrid->begin();
+        while( aCellIter != pTableGrid->end() )
              m_nTableWidth += *aCellIter++;
         if( m_nTableWidth > 0)
         {
@@ -308,18 +346,20 @@
             insertTableProps(pPropMap);
         }
     }
-    if( m_aGridSpans.size() < m_nCell)
+
+    IntVectorPtr pCurrentSpans = getCurrentSpans( );
+    if( pCurrentSpans->size() < m_nCell)
     {
         //fill missing elements with '1'
-        m_aGridSpans.insert( m_aGridSpans.end(), m_nCell - m_aGridSpans.size(), 1 );
+        pCurrentSpans->insert( pCurrentSpans->end( ), m_nCell - pCurrentSpans->size(), 1 );
     }    
     //calculate number of used grids - it has to match the size of m_aTableGrid
     size_t nGrids = 0;
-    ::std::vector<sal_Int32>::const_iterator aGridSpanIter = m_aGridSpans.begin();
-    for( ; aGridSpanIter != m_aGridSpans.end(); ++aGridSpanIter)
+    ::std::vector<sal_Int32>::const_iterator aGridSpanIter = pCurrentSpans->begin();
+    for( ; aGridSpanIter != pCurrentSpans->end(); ++aGridSpanIter)
         nGrids += *aGridSpanIter;
 
-    if( m_aTableGrid.size() == nGrids )
+    if( pTableGrid->size() == nGrids )
     {
         //determine table width 
         double nFullWidth = m_nTableWidth;
@@ -329,13 +369,15 @@
         text::TableColumnSeparator* pSeparators = aSeparators.getArray();
         sal_Int16 nLastRelPos = 0;
         sal_uInt32 nBorderGridIndex = 0;
+
+        ::std::vector< sal_Int32 >::const_iterator aSpansIter = pCurrentSpans->begin( );
         for( sal_uInt32 nBorder = 0; nBorder < m_nCell - 1; ++nBorder )
         {
-            sal_Int32 nGridCount = m_aGridSpans[nBorder];
+            sal_Int32 nGridCount = *aSpansIter;
             double fGridWidth = 0.;
             do
             {
-                fGridWidth += m_aTableGrid[nBorderGridIndex++];
+                fGridWidth += (*pTableGrid.get())[nBorderGridIndex++];
             }while( --nGridCount );
             
             sal_Int16 nRelPos = 
@@ -344,6 +386,7 @@
             pSeparators[nBorder].Position =  nRelPos + nLastRelPos;
             pSeparators[nBorder].IsVisible = sal_True;
             nLastRelPos = nLastRelPos + nRelPos;
+            aSpansIter++;
         }
         TablePropertyMapPtr pPropMap( new TablePropertyMap );
         pPropMap->Insert( PROP_TABLE_COLUMN_SEPARATORS, false, uno::makeAny( aSeparators ) );
@@ -353,7 +396,7 @@
     ++m_nRow;
     m_nCell = 0;
     m_nCellBorderIndex = 0;
-    m_aGridSpans.clear();
+    pCurrentSpans->clear();
 }
 /*-- 18.06.2007 10:34:37---------------------------------------------------
 
@@ -361,8 +404,6 @@
 void DomainMapperTableManager::clearData()
 {
     m_nRow = m_nCell = m_nCellBorderIndex = m_nHeaderRepeat = m_nTableWidth = 0;
-    m_aTableGrid.clear();
-    m_aGridSpans.clear();
     m_sTableStyleName = ::rtl::OUString();
     m_pTableStyleTextProperies.reset();
 }
diff -ur writerfilter.orig/source/dmapper/DomainMapperTableManager.hxx writerfilter/source/dmapper/DomainMapperTableManager.hxx
--- writerfilter.orig/source/dmapper/DomainMapperTableManager.hxx	2009-04-17 10:38:46.000000000 +0200
+++ writerfilter/source/dmapper/DomainMapperTableManager.hxx	2009-04-16 15:41:20.000000000 +0200
@@ -40,8 +40,11 @@
 
 namespace writerfilter {
 namespace dmapper {
+
 class DomainMapperTableManager : public DomainMapperTableManager_Base_t
 {
+    typedef boost::shared_ptr< std::vector<sal_Int32> > IntVectorPtr;
+
     sal_uInt32      m_nRow;
     sal_uInt32      m_nCell;
     sal_uInt32      m_nCellBorderIndex; //borders are provided for all cells and need counting
@@ -51,8 +54,8 @@
     ::rtl::OUString m_sTableStyleName;    
     PropertyMapPtr  m_pTableStyleTextProperies;
 
-    ::std::vector<sal_Int32>  m_aTableGrid;
-    ::std::vector<sal_Int32>  m_aGridSpans;
+    ::std::vector< IntVectorPtr >  m_aTableGrid;
+    ::std::vector< IntVectorPtr >  m_aGridSpans;
     
     TablePropertiesHandler   *m_pTablePropsHandler;
     PropertyMapPtr            m_pStyleProps;
@@ -70,9 +73,15 @@
 
     virtual bool sprm(Sprm & rSprm);
 
+    virtual void startLevel( );
+    virtual void endLevel( );
+
     virtual void endOfCellAction();
     virtual void endOfRowAction();
 
+    IntVectorPtr getCurrentGrid( );
+    IntVectorPtr getCurrentSpans( );
+
     const ::rtl::OUString& getTableStyleName() const { return m_sTableStyleName; }
     /// copy the text properties of the table style and its parent into pContext
     void    CopyTextProperties(PropertyMapPtr pContext, StyleSheetTablePtr pStyleSheetTable);
diff -ur writerfilter.orig/source/dmapper/StyleSheetTable.cxx writerfilter/source/dmapper/StyleSheetTable.cxx
--- writerfilter.orig/source/dmapper/StyleSheetTable.cxx	2009-04-17 10:38:46.000000000 +0200
+++ writerfilter/source/dmapper/StyleSheetTable.cxx	2009-04-16 12:21:05.000000000 +0200
@@ -1247,11 +1247,14 @@
 
                     if(bAddFollowStyle || aPropValues.getLength())
                     {
-                        const beans::PropertyValue* pPropValues = aPropValues.getConstArray();
                         PropValVector aSortedPropVals;
                         for( sal_Int32 nProp = 0; nProp < aPropValues.getLength(); ++nProp)
                         {
-                            aSortedPropVals.Insert( pPropValues[nProp] );
+                            // Don't add the style name properties
+                            bool bIsParaStyleName = aPropValues[nProp].Name.equalsAscii( "ParaStyleName" );
+                            bool bIsCharStyleName = aPropValues[nProp].Name.equalsAscii( "CharStyleName" );
+                            if ( !bInsert &&  !bIsParaStyleName && !bIsCharStyleName )
+                                aSortedPropVals.Insert( aPropValues[nProp] );
                         }
                         if(bAddFollowStyle)
                         {
diff -ur writerfilter.orig/source/ooxml/model.xml writerfilter/source/ooxml/model.xml
--- writerfilter.orig/source/ooxml/model.xml	2009-04-17 10:38:47.000000000 +0200
+++ writerfilter/source/ooxml/model.xml	2009-04-15 12:27:08.000000000 +0200
@@ -18,6 +18,7 @@
   <token tokenid="ooxml:inputstream"/>
   <token tokenid="ooxml:trackchange"/>
   <token tokenid="ooxml:object"/>
+  <token tokenid="ooxml:tblStart"/>
   <namespace name="dml-stylesheet" url="http://schemas.openxmlformats.org/drawingml/2006/main" file="dml-stylesheet.rng">
     <start name="theme"/>
     <start name="themeOverride"/>
diff -ur writerfilter.orig/source/ooxml/OOXMLFastContextHandler.cxx writerfilter/source/ooxml/OOXMLFastContextHandler.cxx
--- writerfilter.orig/source/ooxml/OOXMLFastContextHandler.cxx	2009-04-02 12:57:43.000000000 +0200
+++ writerfilter/source/ooxml/OOXMLFastContextHandler.cxx	2009-04-15 12:27:08.000000000 +0200
@@ -1869,6 +1869,16 @@
     throw (uno::RuntimeException, xml::sax::SAXException)
 {
     mnTableDepth++;
+        
+    boost::shared_ptr<OOXMLPropertySet> pProps( new OOXMLPropertySetImpl );
+    {
+        OOXMLValue::Pointer_t pVal
+            (new OOXMLIntegerValue(mnTableDepth));
+        OOXMLProperty::Pointer_t pProp
+            (new OOXMLPropertyImpl(NS_ooxml::LN_tblStart, pVal, OOXMLPropertyImpl::SPRM));
+        pProps->add(pProp);
+    }
+    mpParserState->setCharacterProperties(pProps);
 
     startAction(Element);
 }
