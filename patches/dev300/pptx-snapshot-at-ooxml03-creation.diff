# For the purpose of the 3.1 release, instead of sharing the binary and ooxml
# export, we introduce a separate sd/source/filter/pptx that creates libxlsx -
# a filter for the PPTX files.  After the release, the changes will be
# reverted so that the binary and ooxml are shared again.
# The changes include:
#   sd/source/filter/eppt/* -> sd/source/filter/pptx/pptx-*
#   scp2 bits were commented out
#   sd/util/makefile.mk commented out
#   sd/source/filter/pptx/makefile.mk commented out
diff --git filter/source/config/fragments/filters/impress_MS_PowerPoint_2007_XML.xcu filter/source/config/fragments/filters/impress_MS_PowerPoint_2007_XML.xcu
index 0fcdc21..3f125ec 100644
--- filter/source/config/fragments/filters/impress_MS_PowerPoint_2007_XML.xcu
+++ filter/source/config/fragments/filters/impress_MS_PowerPoint_2007_XML.xcu
@@ -1,5 +1,5 @@
 <node oor:name="Impress MS PowerPoint 2007 XML" oor:op="replace">
-	<prop oor:name="Flags"><value>IMPORT ALIEN 3RDPARTYFILTER PREFERRED</value></prop>
+	<prop oor:name="Flags"><value>IMPORT EXPORT ALIEN 3RDPARTYFILTER PREFERRED</value></prop>
 	<prop oor:name="UIComponent"/>
 	<prop oor:name="FilterService"><value>com.sun.star.comp.Impress.oox.PowerPointImport</value></prop>
 	<prop oor:name="UserData"/>
diff --git filter/source/config/fragments/filters/impress_MS_PowerPoint_2007_XML_Template.xcu filter/source/config/fragments/filters/impress_MS_PowerPoint_2007_XML_Template.xcu
index f080848..d74fd60 100644
--- filter/source/config/fragments/filters/impress_MS_PowerPoint_2007_XML_Template.xcu
+++ filter/source/config/fragments/filters/impress_MS_PowerPoint_2007_XML_Template.xcu
@@ -1,5 +1,5 @@
 <node oor:name="Impress MS PowerPoint 2007 XML Template" oor:op="replace">
-	<prop oor:name="Flags"><value>IMPORT ALIEN 3RDPARTYFILTER TEMPLATE TEMPLATEPATH PREFERRED</value></prop>
+	<prop oor:name="Flags"><value>IMPORT EXPORT ALIEN 3RDPARTYFILTER TEMPLATE TEMPLATEPATH PREFERRED</value></prop>
 	<prop oor:name="UIComponent"/>
 	<prop oor:name="FilterService"><value>com.sun.star.comp.Impress.oox.PowerPointImport</value></prop>
 	<prop oor:name="UserData"/>
--- filter/source/config/fragments/types/MS_PowerPoint_2007_XML.xcu
+++ filter/source/config/fragments/types/MS_PowerPoint_2007_XML.xcu
@@ -1,7 +1,7 @@
 <node oor:name="MS PowerPoint 2007 XML" oor:op="replace" >
 	<prop oor:name="DetectService"><value>com.sun.star.comp.oox.FormatDetector</value></prop>
 	<prop oor:name="URLPattern"/>
-	<prop oor:name="Extensions"><value>pptm pptx</value></prop>
+	<prop oor:name="Extensions"><value>pptx pptm</value></prop>
 	<prop oor:name="MediaType"/>
 	<prop oor:name="Preferred"><value>true</value></prop>
 	<prop oor:name="PreferredFilter"><value>Impress MS PowerPoint 2007 XML</value></prop>
diff --git oox/inc/oox/ppt/pptimport.hxx oox/inc/oox/ppt/pptimport.hxx
index 6d4fd19..4fe5c43 100644
--- oox/inc/oox/ppt/pptimport.hxx
+++ oox/inc/oox/ppt/pptimport.hxx
@@ -70,6 +70,9 @@ public:
 	std::vector< SlidePersistPtr >&							getMasterPages(){ return maMasterPages; };
 	std::vector< SlidePersistPtr >&							getNotesPages(){ return maNotesPages; };
 
+    virtual sal_Bool SAL_CALL filter( const ::com::sun::star::uno::Sequence<   ::com::sun::star::beans::PropertyValue >& rDescriptor )
+        throw( ::com::sun::star::uno::RuntimeException );
+
 private:
     virtual ::rtl::OUString implGetImplementationName() const;
 
diff --git oox/source/ppt/pptimport.cxx oox/source/ppt/pptimport.cxx
index 421987d..d360d8b 100644
--- oox/source/ppt/pptimport.cxx
+++ oox/source/ppt/pptimport.cxx
@@ -39,6 +39,9 @@ using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::xml::sax;
 using namespace oox::core;
 
+using ::com::sun::star::beans::PropertyValue;
+using ::com::sun::star::lang::XComponent;
+
 namespace oox { namespace ppt {
 
 OUString SAL_CALL PowerPointImport_getImplementationName() throw()
@@ -93,6 +96,29 @@ const ::oox::drawingml::Theme* PowerPointImport::getCurrentTheme() const
     return mpActualSlidePersist ? mpActualSlidePersist->getTheme().get() : 0;
 }
 
+sal_Bool SAL_CALL PowerPointImport::filter( const Sequence< PropertyValue >& rDescriptor ) throw( RuntimeException )
+{
+    if( XmlFilterBase::filter( rDescriptor ) )
+        return true;
+
+    if( isExportFilter() ) {
+        Reference< XExporter > xExporter( getGlobalFactory()->createInstance( CREATE_OUSTRING( "com.sun.star.comp.Impress.oox.PowerPointExport" ) ), UNO_QUERY );
+
+        if( xExporter.is() ) {
+            Reference< XComponent > xDocument( getModel(), UNO_QUERY );
+            Reference< XFilter > xFilter( xExporter, UNO_QUERY );
+
+            if( xFilter.is() ) {
+                xExporter->setSourceDocument( xDocument );
+                if( xFilter->filter( rDescriptor ) )
+                    return true;
+            }
+        }
+    }
+
+    return false;
+}
+
 ::oox::vml::Drawing* PowerPointImport::getVmlDrawing()
 {
     return mpActualSlidePersist ? mpActualSlidePersist->getDrawing() : 0;
# commented out for the libpptx --- scp2/source/ooo/file_ooo.scp
# commented out for the libpptx +++ scp2/source/ooo/file_ooo.scp
# commented out for the libpptx @@ -359,7 +359,7 @@ End
# commented out for the libpptx  
# commented out for the libpptx  STD_FILTER_FILE( gid_File_Filter_Eme, eme)
# commented out for the libpptx  
# commented out for the libpptx -STD_FILTER_FILE_PATCH( gid_File_Filter_Sdfilt, sdfilt)
# commented out for the libpptx +STD_UNO_LIB_FILE_PATCH( gid_File_Filter_Sdfilt, sdfilt)
# commented out for the libpptx  
# commented out for the libpptx  STD_FILTER_FILE( gid_File_Filter_Icg, icg)
# commented out for the libpptx  
--- sd/prj/build.lst
+++ sd/prj/build.lst
@@ -1,4 +1,4 @@
-sd	sd	:    l10n animations svx stoc uui canvas NULL
+sd	sd	:    l10n animations svx stoc uui canvas slideshow oox NULL
 sd	sd										usr1	-	all	sd_mkout NULL
 sd	sd\inc									nmake		-	all	sd_inc NULL
 sd	sd\prj									get		-	all	sd_prj NULL
diff --git sd/source/filter/eppt/NOTES sd/source/filter/eppt/NOTES
new file mode 100644
index 0000000..1e2f168
--- /dev/null
+++ sd/source/filter/pptx/pptx-NOTES
@@ -0,0 +1,2 @@
+* ParaAdjust of empty text paragraph in shapes is by default set to left, but
+should be set to center. Same problem exist for ppt as well as pptx export
diff --git sd/source/filter/eppt/eppt.cxx sd/source/filter/eppt/eppt.cxx
index 29f6829..9a6c761 100644
--- sd/source/filter/pptx/pptx-eppt.cxx
+++ sd/source/filter/pptx/pptx-eppt.cxx
@@ -59,62 +59,13 @@
 #include <svx/msdffimp.hxx>
 #include <svx/flditem.hxx>
 #include <sfx2/docinf.hxx>
+#include <oox/export/utils.hxx>
 
-#define PPT_TRANSITION_TYPE_NONE            0
-#define PPT_TRANSITION_TYPE_RANDOM          1
-#define PPT_TRANSITION_TYPE_BLINDS          2
-#define PPT_TRANSITION_TYPE_CHECKER         3
-#define PPT_TRANSITION_TYPE_COVER           4
-#define PPT_TRANSITION_TYPE_DISSOLVE        5
-#define PPT_TRANSITION_TYPE_FADE            6
-#define PPT_TRANSITION_TYPE_PULL            7
-#define PPT_TRANSITION_TYPE_RANDOM_BARS     8
-#define PPT_TRANSITION_TYPE_STRIPS          9
-#define PPT_TRANSITION_TYPE_WIPE           10
-#define PPT_TRANSITION_TYPE_ZOOM           11
-#define PPT_TRANSITION_TYPE_SPLIT          13
-
-// effects, new in xp
-#define PPT_TRANSITION_TYPE_DIAMOND			17
-#define PPT_TRANSITION_TYPE_PLUS			18
-#define PPT_TRANSITION_TYPE_WEDGE			19
-#define PPT_TRANSITION_TYPE_PUSH			20
-#define PPT_TRANSITION_TYPE_COMB			21
-#define PPT_TRANSITION_TYPE_NEWSFLASH		22
-#define PPT_TRANSITION_TYPE_SMOOTHFADE		23
-#define PPT_TRANSITION_TYPE_WHEEL			26
-#define PPT_TRANSITION_TYPE_CIRCLE			27
-
-using namespace com::sun::star;
-
-static PHLayout pPHLayout[] =
-{
-	{ EPP_LAYOUT_TITLESLIDE,			{ 0x0d, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x10, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x14, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, TRUE, TRUE, TRUE },
-	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x0e, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x14, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_BLANCSLIDE,			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, FALSE, FALSE, FALSE },
-	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x0e, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x16, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x14, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x14, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x15, 0x0d, 0x0e, TRUE, FALSE, FALSE },
-	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x16, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x16, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x0e, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, FALSE, FALSE },
-	{ EPP_LAYOUT_RIGHTCOLUMN2ROWS,		{ 0x0d, 0x0e, 0x13, 0x13, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x13, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_2ROWSANDTITLE,			{ 0x0d, 0x13, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_LEFTCOLUMN2ROWS,		{ 0x0d, 0x13, 0x13, 0x0e, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_TOPROW2COLUMN,			{ 0x0d, 0x13, 0x13, 0x0e, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_2ROWSANDTITLE,			{ 0x0d, 0x0e, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_4OBJECTS,				{ 0x0d, 0x13, 0x13, 0x13, 0x13, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, FALSE, FALSE },
-	{ EPP_LAYOUT_ONLYTITLE,				{ 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, TRUE, FALSE, FALSE },
-	{ EPP_LAYOUT_BLANCSLIDE,			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, FALSE, FALSE, FALSE },
-	{ EPP_LAYOUT_TITLERIGHT2BODIESLEFT, { 0x11, 0x12, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x14, 0x11, 0x12, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_TITLERIGHTBODYLEFT,	{ 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x11, 0x12, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x12, TRUE, TRUE, FALSE },
-	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x16, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x16, 0x0d, 0x12, TRUE, TRUE, FALSE }
-};
+using namespace ::com::sun::star;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::presentation;
+
+using ::com::sun::star::beans::XPropertySet;
 
 //============================ PPTWriter ==================================
 
@@ -122,16 +73,12 @@ PPTWriter::PPTWriter( SvStorageRef& rSvStorage,
             ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel > & rXModel,
             ::com::sun::star::uno::Reference< ::com::sun::star::task::XStatusIndicator > & rXStatInd,
             SvMemoryStream* pVBA, sal_uInt32 nCnvrtFlags ) :
+    PPTWriterBase           ( rXModel, rXStatInd ),
+    mnCnvrtFlags            ( nCnvrtFlags ),
     mbStatus                ( sal_False ),
 	mbUseNewAnimations		( sal_True ),
     mnLatestStatValue       ( 0 ),
-    maFraction              ( 1, 576 ),
-    maMapModeSrc            ( MAP_100TH_MM ),
-    maMapModeDest           ( MAP_INCH, Point(), maFraction, maFraction ),
-    meLatestPageType        ( NORMAL ),
-    mXModel                 ( rXModel ),
-	mXStatusIndicator       ( rXStatInd ),
-	mbStatusIndicator       ( FALSE ),
+    mrStg                   ( rSvStorage ),
 	mpCurUserStrm           ( NULL ),
 	mpStrm                  ( NULL ),
     mpPicStrm               ( NULL ),
@@ -143,38 +90,10 @@ PPTWriter::PPTWriter( SvStorageRef& rSvStorage,
     mnPagesWritten          ( 0 ),
 	mnTxId                  ( 0x7a2f64 )
 {
-    sal_uInt32 i;
-    if ( !ImplInitSOIface() )
-        return;
-
-    FontCollectionEntry aDefaultFontDesc( String( RTL_CONSTASCII_USTRINGPARAM( "Times New Roman" ) ),
-                                            ::com::sun::star::awt::FontFamily::ROMAN,
-                                                ::com::sun::star::awt::FontPitch::VARIABLE,
-                                                    RTL_TEXTENCODING_MS_1252 );
-    maFontCollection.GetId( aDefaultFontDesc ); // default is always times new roman
-
-    if ( !ImplGetPageByIndex( 0, NOTICE ) )
-        return;
-    INT32 nWidth = 21000;
-    if ( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM(  "Width" ) ) ) )
-        mAny >>= nWidth;
-    INT32 nHeight = 29700;
-    if ( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Height" ) ) ) )
-        mAny >>= nHeight;
-
-    maNotesPageSize = ImplMapSize( ::com::sun::star::awt::Size( nWidth, nHeight ) );
+}
 
-    if ( !ImplGetPageByIndex( 0, MASTER ) )
-        return;
-    nWidth = 28000;
-    if ( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Width" ) ) ) )
-        mAny >>= nWidth;
-    nHeight = 21000;
-    if ( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Height" ) ) ) )
-        mAny >>= nHeight;
-    maDestPageSize = ImplMapSize( ::com::sun::star::awt::Size( nWidth, nHeight ) );
-
-    mrStg = rSvStorage;
+void PPTWriter::exportPPTPre()
+{
     if ( !mrStg.Is() )
         return;
 
@@ -203,32 +122,10 @@ PPTWriter::PPTWriter( SvStorageRef& rSvStorage,
         mpPicStrm = mrStg->OpenSotStream( String( RTL_CONSTASCII_USTRINGPARAM( "Pictures" ) ) );
 
     mpPptEscherEx = new PptEscherEx( *mpStrm, mnDrawings );
+};
 
-    if ( !ImplGetStyleSheets() )
-        return;
-
-    if ( !ImplCreateDocument() )
-        return;
-
-    for ( i = 0; i < mnMasterPages; i++ )
-    {
-        if ( !ImplCreateMaster( i ) )
-            return;
-    }
-	if ( !ImplCreateMainNotes() )
-		return;
-    maTextRuleList.First();                         // rewind list, so we can get the current or next entry without
-                                                    // searching, all entrys are sorted#
-    for ( i = 0; i < mnPages; i++ )
-    {
-        if ( !ImplCreateSlide( i ) )
-            return;
-    }
-    for ( i = 0; i < mnPages; i++ )
-    {
-        if ( !ImplCreateNotes( i ) )
-            return;
-    }
+void PPTWriter::exportPPTPost()
+{
     if ( !ImplCloseDocument() )
         return;
 
@@ -243,19 +140,328 @@ PPTWriter::PPTWriter( SvStorageRef& rSvStorage,
         }
     }
 
-    ImplWriteOLE( nCnvrtFlags );
+    ImplWriteOLE();
 
-    ImplWriteVBA( pVBA );
+    ImplWriteVBA();
 
     if ( !ImplWriteAtomEnding() )
         return;
 
-    if ( !ImplCreateDocumentSummaryInformation( nCnvrtFlags ) )
+    if ( !ImplCreateDocumentSummaryInformation() )
         return;
 
     mbStatus = TRUE;
-};
+}
+
+// ---------------------------------------------------------------------------------------------
+
+void PPTWriter::ImplWriteSlide( sal_uInt32 nPageNum, sal_uInt32 nMasterNum, sal_uInt16 nMode,
+                                sal_Bool bHasBackground, Reference< XPropertySet > aXBackgroundPropSet )
+{
+    Any aAny;
+
+    const PHLayout& rLayout = GetLayout( mXPagePropSet );
+    mpPptEscherEx->PtReplaceOrInsert( EPP_Persist_Slide | nPageNum, mpStrm->Tell() );
+    mpPptEscherEx->OpenContainer( EPP_Slide );
+    mpPptEscherEx->AddAtom( 24, EPP_SlideAtom, 2 );
+    *mpStrm << rLayout.nLayout;
+    mpStrm->Write( rLayout.nPlaceHolder, 8 );        // placeholderIDs ( 8Stueck )
+    *mpStrm << (sal_uInt32)(nMasterNum | 0x80000000) // master ID ( ist gleich 0x80000000 bei einer masterpage   )
+            << (sal_uInt32)nPageNum + 0x100          // notes ID ( ist gleich null wenn keine notizen vorhanden )
+            << nMode
+            << (sal_uInt16)0;                        // padword
+
+    mnDiaMode = 0;
+    sal_Bool bVisible = sal_True;
+    FadeEffect eFe = FadeEffect_NONE;
+
+    if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Visible" ) ) ) )
+        aAny >>= bVisible;
+    if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Change" ) ) ) )
+    {
+        switch ( *(INT32*)aAny.getValue() )
+        {
+            case 1 :        // automatisch
+                mnDiaMode++;
+            case 2 :        // halbautomatisch
+                mnDiaMode++;
+            default :
+            case 0 :        // manuell
+            break;
+        }
+    }
+    if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Effect" ) ) ) )
+        aAny >>= eFe;
+
+    sal_uInt32  nSoundRef = 0;
+    sal_Bool    bIsSound = sal_False;
+	sal_Bool	bStopSound = sal_False;
+	sal_Bool	bLoopSound = sal_False;
+
+	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Sound" ) ) ) )
+	{
+		rtl::OUString aSoundURL;
+		if ( aAny >>= aSoundURL )
+		{
+	        nSoundRef = maSoundCollection.GetId( aSoundURL );
+			bIsSound = sal_True;
+		}
+		else
+			aAny >>= bStopSound;
+	}
+	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "LoopSound" ) ) ) )
+		aAny >>= bLoopSound;
+
+
+    sal_Bool bNeedsSSSlideInfoAtom = ( bVisible == FALSE )
+	|| ( mnDiaMode == 2 )
+	|| ( bIsSound )
+	|| ( bStopSound )
+	|| ( eFe != FadeEffect_NONE );
+
+    if ( bNeedsSSSlideInfoAtom )
+    {
+        sal_uInt8   nDirection = 0;
+        sal_uInt8   nTransitionType = 0;
+        sal_uInt16  nBuildFlags = 1;        // advange by mouseclick
+        INT32       nSlideTime = 0;         // muss noch !!!
+        sal_uInt8   nSpeed = 1;
 
+        if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Speed" ) ) ) )
+        {
+            AnimationSpeed aAs;
+            aAny >>= aAs;
+            nSpeed = (sal_uInt8)aAs;
+        }
+
+	sal_Int16 nTT = 0, nTST = 0;
+	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "TransitionType" ) ) )
+	     && ( aAny >>= nTT ) )
+	    if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "TransitionSubtype" ) ) )
+		 && ( aAny >>= nTST ) )
+		nTransitionType = GetTransition( nTT, nTST, eFe, nDirection );
+		
+	if( !nTransitionType )
+	    nTransitionType = GetTransition( eFe, nDirection );
+
+        if ( mnDiaMode == 2 )                                   // automatic ?
+            nBuildFlags |= 0x400;
+        if ( bVisible == FALSE )
+            nBuildFlags |= 4;
+        if ( bIsSound )
+            nBuildFlags |= 16;
+		if ( bLoopSound )
+			nBuildFlags |= 64;
+		if ( bStopSound )
+			nBuildFlags |= 256;
+
+        if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Duration" ) ) ) )// duration of this slide
+            nSlideTime = *(INT32*)aAny.getValue() << 10;        // in ticks
+
+
+        mpPptEscherEx->AddAtom( 16, EPP_SSSlideInfoAtom );
+        *mpStrm << nSlideTime       // standtime in ticks
+                << nSoundRef
+                << nDirection
+                << nTransitionType
+                << nBuildFlags
+                << nSpeed
+                << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0;
+    }
+
+	ImplCreateHeaderFooters( mXPagePropSet );
+
+    EscherSolverContainer aSolverContainer;
+    mpPptEscherEx->OpenContainer( EPP_PPDrawing );
+    mpPptEscherEx->OpenContainer( ESCHER_DgContainer );
+    mpPptEscherEx->EnterGroup(0,0);
+    ImplWritePage( rLayout, aSolverContainer, NORMAL, FALSE, nPageNum );    // Die Shapes der Seite werden im PPT Dok. erzeugt
+    mpPptEscherEx->LeaveGroup();
+
+    if ( bHasBackground )
+        ImplWriteBackground( aXBackgroundPropSet );
+    else
+    {
+        mpPptEscherEx->OpenContainer( ESCHER_SpContainer );
+        mpPptEscherEx->AddShape( ESCHER_ShpInst_Rectangle, 0xc00 );             // Flags: Connector | Background | HasSpt
+        EscherPropertyContainer aPropOpt;
+		aPropOpt.AddOpt( ESCHER_Prop_fillRectRight, PPTtoEMU( maDestPageSize.Width ) );
+        aPropOpt.AddOpt( ESCHER_Prop_fillRectBottom, PPTtoEMU( maDestPageSize.Width ) );
+        aPropOpt.AddOpt( ESCHER_Prop_fNoFillHitTest, 0x120012 );
+        aPropOpt.AddOpt( ESCHER_Prop_fNoLineDrawDash, 0x80000 );
+        aPropOpt.AddOpt( ESCHER_Prop_bWMode, ESCHER_wDontShow );
+        aPropOpt.AddOpt( ESCHER_Prop_fBackground, 0x10001 );                // if true, this is the background shape
+        aPropOpt.Commit( *mpStrm );
+        mpPptEscherEx->CloseContainer();    // ESCHER_SpContainer
+    }
+
+    aSolverContainer.WriteSolver( *mpStrm );
+
+    mpPptEscherEx->CloseContainer();    // ESCHER_DgContainer
+    mpPptEscherEx->CloseContainer();    // EPP_Drawing
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 1 );
+    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x99cc00 << (sal_uInt32)0xcc3333 << (sal_uInt32)0xffcccc << (sal_uInt32)0xb2b2b2;
+	
+	if ( mbUseNewAnimations )
+	{
+		SvMemoryStream amsofbtAnimGroup;
+		ppt::AnimationExporter aExporter( aSolverContainer, maSoundCollection );
+		aExporter.doexport( mXDrawPage, amsofbtAnimGroup );
+		sal_uInt32 nmsofbtAnimGroupSize = amsofbtAnimGroup.Tell();
+		if ( nmsofbtAnimGroupSize )
+		{
+			EscherExContainer aProgTags		( *mpStrm, EPP_ProgTags );
+			EscherExContainer aProgBinaryTag( *mpStrm, EPP_ProgBinaryTag );
+			{
+				EscherExAtom aCString( *mpStrm, EPP_CString );
+				*mpStrm << (sal_uInt32)0x5f005f
+						<< (sal_uInt32)0x50005f
+						<< (sal_uInt32)0x540050
+						<< (sal_uInt16)0x31
+						<< (sal_uInt16)0x30;
+			}
+			{
+				EscherExAtom aBinaryTagData( *mpStrm, EPP_BinaryTagData );
+				{
+					{
+						EscherExAtom aMagic2( *mpStrm, 0x2eeb );
+						*mpStrm << (sal_uInt32)0x01c45df9
+								<< (sal_uInt32)0xe1471b30;
+					}
+					{
+						EscherExAtom aMagic( *mpStrm, 0x2b00 );
+						*mpStrm << (sal_uInt32)0;
+					}
+				}
+				mpStrm->Write( amsofbtAnimGroup.GetData(), amsofbtAnimGroup.Tell() );
+				{
+					EscherExContainer aMagic2( *mpStrm, 0x2b02 );
+				}
+			}
+		}
+    }
+	mpPptEscherEx->CloseContainer();    // EPP_Slide
+}
+
+// ---------------------------------------------------------------------------------------------
+
+void PPTWriter::ImplWriteSlideMaster( sal_uInt32 nPageNum, Reference< XPropertySet > aXBackgroundPropSet )
+{
+    sal_uInt32 nFillColor = 0xffffff;
+    sal_uInt32 nFillBackColor = 0x000000;
+
+    ::com::sun::star::drawing::FillStyle aFS = ::com::sun::star::drawing::FillStyle_NONE;
+    if ( ImplGetPropertyValue( aXBackgroundPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "FillStyle" ) ) ) )
+        mAny >>= aFS;
+    switch ( aFS )
+    {
+        case ::com::sun::star::drawing::FillStyle_GRADIENT :
+        {
+            if ( ImplGetPropertyValue( aXBackgroundPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "FillGradient" ) ) ) )
+            {
+                nFillColor = EscherPropertyContainer::GetGradientColor( (::com::sun::star::awt::Gradient*)mAny.getValue(), 0 );
+                nFillBackColor = EscherPropertyContainer::GetGradientColor( (::com::sun::star::awt::Gradient*)mAny.getValue(), 1 );
+            }
+        }
+        break;
+
+        case ::com::sun::star::drawing::FillStyle_SOLID :
+        {
+            if ( ImplGetPropertyValue( aXBackgroundPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "FillColor" ) ) ) )
+            {
+                nFillColor = mpPptEscherEx->GetColor( *((sal_uInt32*)mAny.getValue()) );
+                nFillBackColor = nFillColor ^ 0xffffff;
+            }
+        }
+		break;
+
+		default:
+			break;
+    }
+
+    mpPptEscherEx->PtReplaceOrInsert( EPP_Persist_MainMaster | nPageNum, mpStrm->Tell() );
+    mpPptEscherEx->OpenContainer( EPP_MainMaster );
+    mpPptEscherEx->AddAtom( 24, EPP_SlideAtom, 2 );
+    *mpStrm << (INT32)EPP_LAYOUT_TITLEANDBODYSLIDE  // slide layout -> title and body slide
+            << (sal_uInt8)1 << (sal_uInt8)2 << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0     // placeholderID
+            << (sal_uInt32)0		// master ID ( ist gleich null bei einer masterpage )
+            << (sal_uInt32)0        // notes ID ( ist gleich null wenn keine notizen vorhanden )
+            << (sal_uInt16)0        // Bit 1: Follow master objects, Bit 2: Follow master scheme, Bit 3: Follow master background
+            << (sal_uInt16)0;       // padword
+
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
+    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x99cc00 << (sal_uInt32)0xcc3333 << (sal_uInt32)0xffcccc << (sal_uInt32)0xb2b2b2;
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
+    *mpStrm << (sal_uInt32)0xff0000 << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x00ffff << (sal_uInt32)0x0099ff << (sal_uInt32)0xffff00 << (sal_uInt32)0x0000ff << (sal_uInt32)0x969696;
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
+    *mpStrm << (sal_uInt32)0xccffff << (sal_uInt32)0x000000 << (sal_uInt32)0x336666 << (sal_uInt32)0x008080 << (sal_uInt32)0x339933 << (sal_uInt32)0x000080 << (sal_uInt32)0xcc3300 << (sal_uInt32)0x66ccff;
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
+    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x333333 << (sal_uInt32)0x000000 << (sal_uInt32)0xdddddd << (sal_uInt32)0x808080 << (sal_uInt32)0x4d4d4d << (sal_uInt32)0xeaeaea;
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
+    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x66ccff << (sal_uInt32)0xff0000 << (sal_uInt32)0xcc00cc << (sal_uInt32)0xc0c0c0;
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
+    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0xc0c0c0 << (sal_uInt32)0xff6600 << (sal_uInt32)0x0000ff << (sal_uInt32)0x009900;
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
+    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0xff9933 << (sal_uInt32)0xccff99 << (sal_uInt32)0xcc00cc << (sal_uInt32)0xb2b2b2;
+
+    for ( int nInstance = EPP_TEXTTYPE_Title; nInstance <= EPP_TEXTTYPE_QuarterBody; nInstance++ )
+    {
+        if ( nInstance == EPP_TEXTTYPE_notUsed )
+            continue;
+
+        // the auto color is dependent to the page background,so we have to set a page that is in the right context
+        if ( nInstance == EPP_TEXTTYPE_Notes )
+            GetPageByIndex( 0, NOTICE );
+        else
+            GetPageByIndex( 0, MASTER );
+
+        mpPptEscherEx->BeginAtom();
+
+        sal_Bool bFirst = TRUE;
+        sal_Bool bSimpleText = FALSE;
+
+        *mpStrm << (sal_uInt16)5;                           // paragraph count
+
+        for ( sal_uInt16 nLev = 0; nLev < 5; nLev++ )
+        {
+            if ( nInstance >= EPP_TEXTTYPE_CenterBody )
+            {
+                bFirst = FALSE;
+                bSimpleText = TRUE;
+                *mpStrm << nLev;
+            }
+            mpStyleSheet->mpParaSheet[ nInstance ]->Write( *mpStrm, mpPptEscherEx, nLev, bFirst, bSimpleText, mXPagePropSet );
+            mpStyleSheet->mpCharSheet[ nInstance ]->Write( *mpStrm, mpPptEscherEx, nLev, bFirst, bSimpleText, mXPagePropSet );
+            bFirst = FALSE;
+        }
+        mpPptEscherEx->EndAtom( EPP_TxMasterStyleAtom, 0, nInstance );
+    }
+    GetPageByIndex( nPageNum, MASTER );
+
+    EscherSolverContainer aSolverContainer;
+
+    mpPptEscherEx->OpenContainer( EPP_PPDrawing );
+    mpPptEscherEx->OpenContainer( ESCHER_DgContainer );
+
+	mpPptEscherEx->EnterGroup(0,0);
+    ImplWritePage( GetLayout(0), aSolverContainer, MASTER, TRUE );    // Die Shapes der Seite werden im PPT Dok. erzeugt
+    mpPptEscherEx->LeaveGroup();
+
+    ImplWriteBackground( aXBackgroundPropSet );
+
+    aSolverContainer.WriteSolver( *mpStrm );
+
+    mpPptEscherEx->CloseContainer();    // ESCHER_DgContainer
+    mpPptEscherEx->CloseContainer();    // EPP_Drawing
+    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 1 );
+    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x99cc00 << (sal_uInt32)0xcc3333 << (sal_uInt32)0xffcccc << (sal_uInt32)0xb2b2b2;
+
+	if ( aBuExMasterStream.Tell() )
+    {
+        ImplProgTagContainer( mpStrm, &aBuExMasterStream );
+    }
+    mpPptEscherEx->CloseContainer();    // EPP_MainMaster
+}
 
 // ---------------------------------------------------------------------------------------------
 
@@ -277,16 +483,6 @@ PPTWriter::~PPTWriter()
         delete (EPPTHyperlink*)pPtr;
     for ( pPtr = maExOleObj.First(); pPtr; pPtr = maExOleObj.Next() )
         delete (PPTExOleObjEntry*)pPtr;
-
-    if ( mbStatusIndicator )
-        mXStatusIndicator->end();
-}
-
-// ---------------------------------------------------------------------------------------------
-
-static inline sal_uInt32 PPTtoEMU( INT32 nPPT )
-{
-    return (sal_uInt32)( (double)nPPT * 1587.5 );
 }
 
 // ---------------------------------------------------------------------------------------------
@@ -323,7 +519,7 @@ sal_Bool PPTWriter::ImplCreateCurrentUserStream()
 
 // ---------------------------------------------------------------------------------------------
 
-sal_Bool PPTWriter::ImplCreateDocumentSummaryInformation( sal_uInt32 nCnvrtFlags )
+sal_Bool PPTWriter::ImplCreateDocumentSummaryInformation()
 {
     uno::Reference<document::XDocumentPropertiesSupplier> xDPS(
         mXModel, uno::UNO_QUERY_THROW);
@@ -353,10 +549,10 @@ sal_Bool PPTWriter::ImplCreateDocumentSummaryInformation( sal_uInt32 nCnvrtFlags
             aHyperSeq[j] = pBlob[j];
         }
 
-		if ( nCnvrtFlags & 0x8000 )
+		if ( mnCnvrtFlags & 0x8000 )
 		{
 			uno::Sequence<sal_uInt8> aThumbSeq;
-			if ( ImplGetPageByIndex( 0, NORMAL ) &&
+			if ( GetPageByIndex( 0, NORMAL ) &&
 				 ImplGetPropertyValue( mXPagePropSet,
 					String( RTL_CONSTASCII_USTRINGPARAM( "PreviewBitmap" ) ) ) )
 			{
@@ -543,13 +739,13 @@ sal_Bool PPTWriter::ImplCreateDocument()
 	mpPptEscherEx->OpenContainer( EPP_HeadersFooters, 3 );	//Master footer	(default)
 	mpPptEscherEx->AddAtom( 4, EPP_HeadersFootersAtom );
 	*mpStrm << (sal_uInt32)0x25000d;
-    if ( ImplGetPageByIndex( 0, MASTER ) )
+    if ( GetPageByIndex( 0, MASTER ) )
 		ImplCreateHeaderFooterStrings( *mpStrm, mXPagePropSet );
 	mpPptEscherEx->CloseContainer();
 	mpPptEscherEx->OpenContainer( EPP_HeadersFooters, 4 );	//NotesMaster footer (default)
 	mpPptEscherEx->AddAtom( 4, EPP_HeadersFootersAtom );
 	*mpStrm << (sal_uInt32)0x3d000d;
-    if ( ImplGetPageByIndex( 0, NOTICE ) )
+    if ( GetPageByIndex( 0, NOTICE ) )
 		ImplCreateHeaderFooterStrings( *mpStrm, mXPagePropSet );
 	mpPptEscherEx->CloseContainer();
 
@@ -575,11 +771,11 @@ sal_Bool PPTWriter::ImplCreateDocument()
                 << (INT32)i + 0x100                             // slideId - Unique slide identifier, used for OLE link monikers for example
                 << (sal_uInt32)0;                               // reserved, usualy 0
 
-        if ( !ImplGetPageByIndex( i, NORMAL ) )                 // sehr aufregend: noch einmal ueber alle seiten
+        if ( !GetPageByIndex( i, NORMAL ) )                 // sehr aufregend: noch einmal ueber alle seiten
             return FALSE;
-		ImplSetCurrentStyleSheet( ImplGetMasterIndex( NORMAL ) );
+		SetCurrentStyleSheet( GetMasterIndex( NORMAL ) );
 
-        const PHLayout& rLayout = ImplGetLayout( mXPagePropSet );
+        const PHLayout& rLayout = GetLayout( mXPagePropSet );
 
         ::com::sun::star::uno::Reference< ::com::sun::star::container::XNamed >
             aXName( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
@@ -600,7 +796,7 @@ sal_Bool PPTWriter::ImplCreateDocument()
         {
             for ( sal_uInt32 nIndex = 0; nIndex < nShapes; nIndex++ )
             {
-                if ( !ImplGetShapeByIndex( nIndex ) )
+                if ( !GetShapeByIndex( nIndex ) )
                     continue;
 
                 if ( mbPresObj && ( ( mType == "presentation.Outliner" ) || ( mType == "presentation.Subtitle" ) ) )
@@ -626,7 +822,7 @@ sal_Bool PPTWriter::ImplCreateDocument()
                         {
                             if ( ( nIndex + 1 ) < nShapes )
                             {
-                                if ( ImplGetShapeByIndex( nIndex + 1 ) && mType == "presentation.Outliner" )
+                                if ( GetShapeByIndex( nIndex + 1 ) && mType == "presentation.Outliner" )
                                 {
                                     bSecOutl = TRUE;
                                     TextRuleEntry* pTempRule = new TextRuleEntry( i );
@@ -681,24 +877,13 @@ sal_Bool PPTWriter::ImplCreateDocument()
     mpPptEscherEx->OpenContainer( EPP_SlideListWithText, 2 );   // Animation info fuer die notes
     for( i = 0; i < mnPages; i++ )
     {
-        if ( !ImplGetPageByIndex( i, NOTICE ) )
+        if ( !GetPageByIndex( i, NOTICE ) )
             return FALSE;
 
-        nShapes = mXShapes->getCount();
-
-        bOtherThanPlaceHolders = FALSE;
-        if ( nShapes )
-        {
-            for ( sal_uInt32 nIndex = 0; ( nIndex < nShapes ) && ( bOtherThanPlaceHolders == FALSE ); nIndex++ )
-            {
-                 if ( ImplGetShapeByIndex( nIndex ) && ( mType != "drawing.Page" ) )
-                    bOtherThanPlaceHolders = TRUE;
-            }
-        }
         mpPptEscherEx->AddAtom( 20, EPP_SlidePersistAtom );
         mpPptEscherEx->InsertPersistOffset( EPP_MAINNOTES_PERSIST_KEY | i, mpStrm->Tell() );
         *mpStrm << (sal_uInt32)0
-                << (sal_uInt32)( ( bOtherThanPlaceHolders ) ? 4 : 0 )
+                << (sal_uInt32)( ( ContainsOtherShapeThanPlaceholders( FALSE ) ) ? 4 : 0 )
                 << (INT32)0
                 << (INT32)i + 0x100
                 << (sal_uInt32)0;
@@ -816,7 +1001,7 @@ sal_Bool PPTWriter::ImplCreateDocument()
                         *mpStrm << (sal_uInt16)( pCustomShow[ i ] );
                     }
                 }
-                for ( i = nCustomShowNameLen; i < 32; i++, *mpStrm << (sal_uInt16)0 ) ;
+                for ( i = nCustomShowNameLen; i < 32; i++, *mpStrm << (sal_uInt16)0 ) {}
 
                 *mpStrm << nFlags;
                 ::com::sun::star::uno::Reference< ::com::sun::star::presentation::XCustomPresentationSupplier >
@@ -845,7 +1030,7 @@ sal_Bool PPTWriter::ImplCreateDocument()
                                         nNamedShowLen = 31;
                                     mpPptEscherEx->AddAtom( nNamedShowLen << 1, EPP_CString );
                                     const sal_Unicode* pCustomShowName = pUString[ i ].getStr();
-                                    for ( sal_uInt32 k = 0; k < nNamedShowLen; *mpStrm << (sal_uInt16)( pCustomShowName[ k++ ] ) ) ;
+                                    for ( sal_uInt32 k = 0; k < nNamedShowLen; *mpStrm << (sal_uInt16)( pCustomShowName[ k++ ] ) ) {}
                                     mAny = aXCont->getByName( pUString[ i ] );
                                     if ( mAny.getValue() )
                                     {
@@ -988,184 +1173,10 @@ sal_Bool PPTWriter::ImplCreateHyperBlob( SvMemoryStream& rStrm )
     return TRUE;
 }
 
-PHLayout& PPTWriter::ImplGetLayout(  const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rXPropSet ) const
-{
-    ::com::sun::star::uno::Any aAny;
-    sal_Int16 nLayout = 20;
-    if ( GetPropertyValue( aAny, rXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Layout" ) ) ), sal_True )
-        aAny >>= nLayout;
-
-    if ( ( nLayout >= 21 ) && ( nLayout <= 26 ) )   // NOTES _> HANDOUT6
-        nLayout = 20;
-    if ( ( nLayout >= 27 ) && ( nLayout <= 30 ) )   // VERTICAL LAYOUT
-        nLayout -= 6;
-    else if ( nLayout > 30 )
-        nLayout = 20;
-    return pPHLayout[ nLayout ];
-}
-
-
-// ---------------------------------------------------------------------------------------------
-
-sal_Bool PPTWriter::ImplCreateMaster( sal_uInt32 nPageNum )
-{
-    if ( !ImplGetPageByIndex( nPageNum, MASTER ) )
-        return FALSE;
-	ImplSetCurrentStyleSheet( nPageNum );
-
-    if ( !ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ) ) )                // Backgroundshape laden
-        return FALSE;
-    ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXBackgroundPropSet;
-    if ( !( mAny >>= aXBackgroundPropSet ) )
-        return FALSE;
-
-    sal_uInt32 nFillColor = 0xffffff;
-    sal_uInt32 nFillBackColor = 0x000000;
-
-    ::com::sun::star::drawing::FillStyle aFS = ::com::sun::star::drawing::FillStyle_NONE;
-    if ( ImplGetPropertyValue( aXBackgroundPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "FillStyle" ) ) ) )
-        mAny >>= aFS;
-    switch ( aFS )
-    {
-        case ::com::sun::star::drawing::FillStyle_GRADIENT :
-        {
-            if ( ImplGetPropertyValue( aXBackgroundPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "FillGradient" ) ) ) )
-            {
-                nFillColor = EscherPropertyContainer::GetGradientColor( (::com::sun::star::awt::Gradient*)mAny.getValue(), 0 );
-                nFillBackColor = EscherPropertyContainer::GetGradientColor( (::com::sun::star::awt::Gradient*)mAny.getValue(), 1 );
-            }
-        }
-        break;
-
-        case ::com::sun::star::drawing::FillStyle_SOLID :
-        {
-            if ( ImplGetPropertyValue( aXBackgroundPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "FillColor" ) ) ) )
-            {
-                nFillColor = mpPptEscherEx->GetColor( *((sal_uInt32*)mAny.getValue()) );
-                nFillBackColor = nFillColor ^ 0xffffff;
-            }
-        }
-		break;
-
-		default:
-			break;
-    }
-
-    mpPptEscherEx->PtReplaceOrInsert( EPP_Persist_MainMaster | nPageNum, mpStrm->Tell() );
-    mpPptEscherEx->OpenContainer( EPP_MainMaster );
-    mpPptEscherEx->AddAtom( 24, EPP_SlideAtom, 2 );
-    *mpStrm << (INT32)EPP_LAYOUT_TITLEANDBODYSLIDE  // slide layout -> title and body slide
-            << (sal_uInt8)1 << (sal_uInt8)2 << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0     // placeholderID
-            << (sal_uInt32)0		// master ID ( ist gleich null bei einer masterpage )
-            << (sal_uInt32)0        // notes ID ( ist gleich null wenn keine notizen vorhanden )
-            << (sal_uInt16)0        // Bit 1: Follow master objects, Bit 2: Follow master scheme, Bit 3: Follow master background
-            << (sal_uInt16)0;       // padword
-
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
-    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x99cc00 << (sal_uInt32)0xcc3333 << (sal_uInt32)0xffcccc << (sal_uInt32)0xb2b2b2;
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
-    *mpStrm << (sal_uInt32)0xff0000 << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x00ffff << (sal_uInt32)0x0099ff << (sal_uInt32)0xffff00 << (sal_uInt32)0x0000ff << (sal_uInt32)0x969696;
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
-    *mpStrm << (sal_uInt32)0xccffff << (sal_uInt32)0x000000 << (sal_uInt32)0x336666 << (sal_uInt32)0x008080 << (sal_uInt32)0x339933 << (sal_uInt32)0x000080 << (sal_uInt32)0xcc3300 << (sal_uInt32)0x66ccff;
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
-    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x333333 << (sal_uInt32)0x000000 << (sal_uInt32)0xdddddd << (sal_uInt32)0x808080 << (sal_uInt32)0x4d4d4d << (sal_uInt32)0xeaeaea;
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
-    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x66ccff << (sal_uInt32)0xff0000 << (sal_uInt32)0xcc00cc << (sal_uInt32)0xc0c0c0;
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
-    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0xc0c0c0 << (sal_uInt32)0xff6600 << (sal_uInt32)0x0000ff << (sal_uInt32)0x009900;
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 6 );
-    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0xff9933 << (sal_uInt32)0xccff99 << (sal_uInt32)0xcc00cc << (sal_uInt32)0xb2b2b2;
-
-    for ( int nInstance = EPP_TEXTTYPE_Title; nInstance <= EPP_TEXTTYPE_QuarterBody; nInstance++ )
-    {
-        if ( nInstance == EPP_TEXTTYPE_notUsed )
-            continue;
-
-        // the auto color is dependent to the page background,so we have to set a page that is in the right context
-        if ( nInstance == EPP_TEXTTYPE_Notes )
-            ImplGetPageByIndex( 0, NOTICE );
-        else
-            ImplGetPageByIndex( 0, MASTER );
-
-        mpPptEscherEx->BeginAtom();
-
-        sal_Bool bFirst = TRUE;
-        sal_Bool bSimpleText = FALSE;
-
-        *mpStrm << (sal_uInt16)5;                           // paragraph count
-
-        for ( sal_uInt16 nLev = 0; nLev < 5; nLev++ )
-        {
-            if ( nInstance >= EPP_TEXTTYPE_CenterBody )
-            {
-                bFirst = FALSE;
-                bSimpleText = TRUE;
-                *mpStrm << nLev;
-            }
-            mpStyleSheet->mpParaSheet[ nInstance ]->Write( *mpStrm, mpPptEscherEx, nLev, bFirst, bSimpleText, mXPagePropSet );
-            mpStyleSheet->mpCharSheet[ nInstance ]->Write( *mpStrm, mpPptEscherEx, nLev, bFirst, bSimpleText, mXPagePropSet );
-            bFirst = FALSE;
-        }
-        mpPptEscherEx->EndAtom( EPP_TxMasterStyleAtom, 0, nInstance );
-    }
-    ImplGetPageByIndex( nPageNum, MASTER );
-
-    EscherSolverContainer aSolverContainer;
-
-    mpPptEscherEx->OpenContainer( EPP_PPDrawing );
-    mpPptEscherEx->OpenContainer( ESCHER_DgContainer );
-
-	mpPptEscherEx->EnterGroup(0,0);
-    ImplWritePage( pPHLayout[ 0 ], aSolverContainer, MASTER, TRUE );    // Die Shapes der Seite werden im PPT Dok. erzeugt
-    mpPptEscherEx->LeaveGroup();
-
-    ImplWriteBackground( aXBackgroundPropSet );
-
-    aSolverContainer.WriteSolver( *mpStrm );
-
-    mpPptEscherEx->CloseContainer();    // ESCHER_DgContainer
-    mpPptEscherEx->CloseContainer();    // EPP_Drawing
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 1 );
-    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x99cc00 << (sal_uInt32)0xcc3333 << (sal_uInt32)0xffcccc << (sal_uInt32)0xb2b2b2;
-
-	if ( aBuExMasterStream.Tell() )
-    {
-        ImplProgTagContainer( mpStrm, &aBuExMasterStream );
-    }
-    mpPptEscherEx->CloseContainer();    // EPP_MainMaster
-    return TRUE;
-};
-
 // ---------------------------------------------------------------------------------------------
 
 sal_Bool PPTWriter::ImplCreateMainNotes()
 {
-    if ( !ImplGetPageByIndex( 0, NOTICE ) )
-        return FALSE;
-	ImplSetCurrentStyleSheet( 0 );
-
-    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XMasterPageTarget >
-        aXMasterPageTarget( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-
-    if ( !aXMasterPageTarget.is() )
-        return FALSE;
-
-    mXDrawPage = aXMasterPageTarget->getMasterPage();
-    if ( !mXDrawPage.is() )
-        return FALSE;
-
-    mXPropSet = ::com::sun::star::uno::Reference<
-        ::com::sun::star::beans::XPropertySet >
-            ( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-    if ( !mXPropSet.is() )
-        return FALSE;
-
-    mXShapes = ::com::sun::star::uno::Reference<
-        ::com::sun::star::drawing::XShapes >
-            ( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-    if ( !mXShapes.is() )
-        return FALSE;
-
     EscherSolverContainer aSolverContainer;
 
     mpPptEscherEx->PtReplaceOrInsert( EPP_Persist_MainNotes, mpStrm->Tell() );
@@ -1177,7 +1188,7 @@ sal_Bool PPTWriter::ImplCreateMainNotes()
     mpPptEscherEx->OpenContainer( ESCHER_DgContainer );
     mpPptEscherEx->EnterGroup(0,0);
 
-    ImplWritePage( pPHLayout[ 20 ], aSolverContainer, NOTICE, TRUE );
+    ImplWritePage( GetLayout( 20 ), aSolverContainer, NOTICE, TRUE );
 
     mpPptEscherEx->LeaveGroup();
     mpPptEscherEx->OpenContainer( ESCHER_SpContainer );
@@ -1204,420 +1215,8 @@ sal_Bool PPTWriter::ImplCreateMainNotes()
     return TRUE;
 }
 
-// ---------------------------------------------------------------------------------------------
-
-sal_Bool PPTWriter::ImplCreateSlide( sal_uInt32 nPageNum )
-{
-    ::com::sun::star::uno::Any aAny;
-
-    if ( !ImplGetPageByIndex( nPageNum, NORMAL ) )
-        return FALSE;
-    sal_uInt32 nMasterID = ImplGetMasterIndex( NORMAL );
-	ImplSetCurrentStyleSheet( nMasterID );
-	nMasterID |= 0x80000000;
-
-    ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXBackgroundPropSet;
-    sal_Bool bHasBackground = GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ) );
-    if ( bHasBackground )
-        bHasBackground = ( aAny >>= aXBackgroundPropSet );
-
-	sal_uInt16 nMode = 7;   // Bit 1: Follow master objects, Bit 2: Follow master scheme, Bit 3: Follow master background
-	if ( bHasBackground )
-		nMode &=~4;
-
-/* sj: Don't know what's IsBackgroundVisible for, have to ask cl
-	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsBackgroundVisible" ) ) ) )
-	{
-		sal_Bool bBackgroundVisible;
-        if ( aAny >>= bBackgroundVisible )
-		{
-			if ( bBackgroundVisible )
-				nMode &= ~4;
-		}
-	}
-*/
-	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsBackgroundObjectsVisible" ) ) ) )
-	{
-		sal_Bool bBackgroundObjectsVisible = sal_False;
-        if ( aAny >>= bBackgroundObjectsVisible )
-		{
-			if ( !bBackgroundObjectsVisible )
-				nMode &= ~1;
-		}
-	}
-
-    const PHLayout& rLayout = ImplGetLayout( mXPagePropSet );
-    mpPptEscherEx->PtReplaceOrInsert( EPP_Persist_Slide | nPageNum, mpStrm->Tell() );
-    mpPptEscherEx->OpenContainer( EPP_Slide );
-    mpPptEscherEx->AddAtom( 24, EPP_SlideAtom, 2 );
-    *mpStrm << rLayout.nLayout;
-    mpStrm->Write( rLayout.nPlaceHolder, 8 );       // placeholderIDs ( 8Stueck )
-    *mpStrm << (sal_uInt32)nMasterID                // master ID ( ist gleich 0x80000000 bei einer masterpage   )
-            << (sal_uInt32)nPageNum + 0x100         // notes ID ( ist gleich null wenn keine notizen vorhanden )
-            << nMode
-            << (sal_uInt16)0;                       // padword
-
-    mnDiaMode = 0;
-    sal_Bool bVisible = sal_True;
-    ::com::sun::star::presentation::FadeEffect eFe = ::com::sun::star::presentation::FadeEffect_NONE;
-
-    if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Visible" ) ) ) )
-        aAny >>= bVisible;
-    if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Change" ) ) ) )
-    {
-        switch ( *(INT32*)aAny.getValue() )
-        {
-            case 1 :        // automatisch
-                mnDiaMode++;
-            case 2 :        // halbautomatisch
-                mnDiaMode++;
-            default :
-            case 0 :        // manuell
-            break;
-        }
-    }
-    if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Effect" ) ) ) )
-        aAny >>= eFe;
-
-    sal_uInt32  nSoundRef = 0;
-    sal_Bool    bIsSound = sal_False;
-	sal_Bool	bStopSound = sal_False;
-	sal_Bool	bLoopSound = sal_False;
-
-	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Sound" ) ) ) )
-	{
-		rtl::OUString aSoundURL;
-		if ( aAny >>= aSoundURL )
-		{
-	        nSoundRef = maSoundCollection.GetId( aSoundURL );
-			bIsSound = sal_True;
-		}
-		else
-			aAny >>= bStopSound;
-	}
-	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "LoopSound" ) ) ) )
-		aAny >>= bLoopSound;
-
-
-    sal_Bool bNeedsSSSlideInfoAtom = ( bVisible == FALSE )
-                                    || ( mnDiaMode == 2 )
-                                    || ( bIsSound )
-									|| ( bStopSound )
-                                    || ( eFe != ::com::sun::star::presentation::FadeEffect_NONE );
-    if ( bNeedsSSSlideInfoAtom )
-    {
-        sal_uInt8   nDirection = 0;
-        sal_uInt8   nTransitionType = 0;
-        sal_uInt16  nBuildFlags = 1;        // advange by mouseclick
-        INT32       nSlideTime = 0;         // muss noch !!!
-        sal_uInt8   nSpeed = 1;
-
-        if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Speed" ) ) ) )
-        {
-            ::com::sun::star::presentation::AnimationSpeed aAs;
-            aAny >>= aAs;
-            nSpeed = (sal_uInt8)aAs;
-        }
-		sal_Int16 nTT = 0, nTST = 0;
-		if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "TransitionType" ) ) )
-			&& ( aAny >>= nTT ) )
-		{
-			if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "TransitionSubtype" ) ) )
-				&& ( aAny >>= nTST ) )
-			{
-				switch( nTT )
-				{
-					case animations::TransitionType::FADE :
-					{
-						if ( nTST == animations::TransitionSubType::CROSSFADE )
-							nTransitionType = PPT_TRANSITION_TYPE_SMOOTHFADE;
-						else if ( nTST == animations::TransitionSubType::FADEOVERCOLOR )
-							nTransitionType = PPT_TRANSITION_TYPE_FADE;
-					}
-					break;
-					case PPT_TRANSITION_TYPE_COMB :
-					{
-						nTransitionType = PPT_TRANSITION_TYPE_COMB;
-						if ( nTST == animations::TransitionSubType::COMBVERTICAL )
-							nDirection++;
-					}
-					break;
-					case animations::TransitionType::PUSHWIPE :
-					{
-						nTransitionType = PPT_TRANSITION_TYPE_PUSH;
-						switch( nTST )
-						{
-							case animations::TransitionSubType::FROMRIGHT: nDirection = 0; break;
-							case animations::TransitionSubType::FROMBOTTOM: nDirection = 1; break;
-							case animations::TransitionSubType::FROMLEFT: nDirection = 2; break;
-							case animations::TransitionSubType::FROMTOP: nDirection = 3; break;
-						}
-					}
-					break;
-					case animations::TransitionType::PINWHEELWIPE : 
-					{
-						nTransitionType = PPT_TRANSITION_TYPE_WHEEL;
-						switch( nTST )
-						{
-							case animations::TransitionSubType::ONEBLADE: nDirection = 1; break;
-							case animations::TransitionSubType::TWOBLADEVERTICAL : nDirection = 2; break;
-							case animations::TransitionSubType::THREEBLADE : nDirection = 3; break;
-							case animations::TransitionSubType::FOURBLADE: nDirection = 4; break;
-							case animations::TransitionSubType::EIGHTBLADE: nDirection = 8; break;
-						}
-					}
-					break;
-					case animations::TransitionType::FANWIPE :
-					{
-						nTransitionType = PPT_TRANSITION_TYPE_WEDGE;
-					}
-					break;
-					case animations::TransitionType::ELLIPSEWIPE :
-					{
-						nTransitionType = PPT_TRANSITION_TYPE_CIRCLE;
-					}
-					break;
-					case animations::TransitionType::FOURBOXWIPE :
-					{
-						nTransitionType = PPT_TRANSITION_TYPE_PLUS;
-					}
-					break;
-					case animations::TransitionType::IRISWIPE :
-					{
-						nTransitionType = PPT_TRANSITION_TYPE_DIAMOND;
-					}
-					break;
-				}
-			}
-		}
-		if ( !nTransitionType )
-		{
-			switch ( eFe )
-			{
-				default :
-				case ::com::sun::star::presentation::FadeEffect_RANDOM :
-					nTransitionType = PPT_TRANSITION_TYPE_RANDOM;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_HORIZONTAL_STRIPES :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_VERTICAL_STRIPES :
-					nTransitionType = PPT_TRANSITION_TYPE_BLINDS;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_VERTICAL_CHECKERBOARD :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_HORIZONTAL_CHECKERBOARD :
-					nTransitionType = PPT_TRANSITION_TYPE_CHECKER;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_MOVE_FROM_UPPERLEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_MOVE_FROM_UPPERRIGHT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_MOVE_FROM_LOWERLEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_MOVE_FROM_LOWERRIGHT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_MOVE_FROM_TOP :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_MOVE_FROM_LEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_MOVE_FROM_BOTTOM :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_MOVE_FROM_RIGHT :
-					nTransitionType = PPT_TRANSITION_TYPE_COVER;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_DISSOLVE :
-					nTransitionType = PPT_TRANSITION_TYPE_DISSOLVE;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_VERTICAL_LINES :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_HORIZONTAL_LINES :
-					nTransitionType = PPT_TRANSITION_TYPE_RANDOM_BARS;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_CLOSE_HORIZONTAL :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_OPEN_HORIZONTAL :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_CLOSE_VERTICAL :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_OPEN_VERTICAL :
-					nTransitionType = PPT_TRANSITION_TYPE_SPLIT;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_UPPERLEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_UPPERRIGHT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_LOWERLEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_LOWERRIGHT :
-					nDirection += 4;
-					nTransitionType = PPT_TRANSITION_TYPE_STRIPS;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_UNCOVER_TO_LOWERRIGHT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_UNCOVER_TO_LOWERLEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_UNCOVER_TO_UPPERRIGHT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_UNCOVER_TO_UPPERLEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_UNCOVER_TO_BOTTOM :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_UNCOVER_TO_RIGHT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_UNCOVER_TO_TOP :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_UNCOVER_TO_LEFT :
-					nTransitionType = PPT_TRANSITION_TYPE_PULL;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_TOP :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_LEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_BOTTOM :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_RIGHT :
-					nTransitionType = PPT_TRANSITION_TYPE_WIPE;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_ROLL_FROM_TOP :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_ROLL_FROM_LEFT :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_ROLL_FROM_BOTTOM :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_ROLL_FROM_RIGHT :
-					nTransitionType = PPT_TRANSITION_TYPE_WIPE;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_FADE_TO_CENTER :
-					nDirection++;
-				case ::com::sun::star::presentation::FadeEffect_FADE_FROM_CENTER :
-					nTransitionType = PPT_TRANSITION_TYPE_ZOOM;
-				break;
-
-				case ::com::sun::star::presentation::FadeEffect_NONE :
-					nDirection = 2;
-				break;
-			}
-		}
-        if ( mnDiaMode == 2 )                                   // automatic ?
-            nBuildFlags |= 0x400;
-        if ( bVisible == FALSE )
-            nBuildFlags |= 4;
-        if ( bIsSound )
-            nBuildFlags |= 16;
-		if ( bLoopSound )
-			nBuildFlags |= 64;
-		if ( bStopSound )
-			nBuildFlags |= 256;
-
-        if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Duration" ) ) ) )// duration of this slide
-            nSlideTime = *(INT32*)aAny.getValue() << 10;        // in ticks
-
-
-        mpPptEscherEx->AddAtom( 16, EPP_SSSlideInfoAtom );
-        *mpStrm << nSlideTime       // standtime in ticks
-                << nSoundRef
-                << nDirection
-                << nTransitionType
-                << nBuildFlags
-                << nSpeed
-                << (sal_uInt8)0 << (sal_uInt8)0 << (sal_uInt8)0;
-    }
-
-	ImplCreateHeaderFooters( mXPagePropSet );
-
-    EscherSolverContainer aSolverContainer;
-    mpPptEscherEx->OpenContainer( EPP_PPDrawing );
-    mpPptEscherEx->OpenContainer( ESCHER_DgContainer );
-    mpPptEscherEx->EnterGroup(0,0);
-    ImplWritePage( rLayout, aSolverContainer, NORMAL, FALSE, nPageNum );    // Die Shapes der Seite werden im PPT Dok. erzeugt
-    mpPptEscherEx->LeaveGroup();
-
-    if ( bHasBackground )
-        ImplWriteBackground( aXBackgroundPropSet );
-    else
-    {
-        mpPptEscherEx->OpenContainer( ESCHER_SpContainer );
-        mpPptEscherEx->AddShape( ESCHER_ShpInst_Rectangle, 0xc00 );             // Flags: Connector | Background | HasSpt
-        EscherPropertyContainer aPropOpt;
-		aPropOpt.AddOpt( ESCHER_Prop_fillRectRight, PPTtoEMU( maDestPageSize.Width ) );
-        aPropOpt.AddOpt( ESCHER_Prop_fillRectBottom, PPTtoEMU( maDestPageSize.Width ) );
-        aPropOpt.AddOpt( ESCHER_Prop_fNoFillHitTest, 0x120012 );
-        aPropOpt.AddOpt( ESCHER_Prop_fNoLineDrawDash, 0x80000 );
-        aPropOpt.AddOpt( ESCHER_Prop_bWMode, ESCHER_wDontShow );
-        aPropOpt.AddOpt( ESCHER_Prop_fBackground, 0x10001 );                // if true, this is the background shape
-        aPropOpt.Commit( *mpStrm );
-        mpPptEscherEx->CloseContainer();    // ESCHER_SpContainer
-    }
-
-    aSolverContainer.WriteSolver( *mpStrm );
-
-    mpPptEscherEx->CloseContainer();    // ESCHER_DgContainer
-    mpPptEscherEx->CloseContainer();    // EPP_Drawing
-    mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 1 );
-    *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x99cc00 << (sal_uInt32)0xcc3333 << (sal_uInt32)0xffcccc << (sal_uInt32)0xb2b2b2;
-	
-	if ( mbUseNewAnimations )
-	{
-		SvMemoryStream amsofbtAnimGroup;
-		ppt::AnimationExporter aExporter( aSolverContainer, maSoundCollection );
-		aExporter.doexport( mXDrawPage, amsofbtAnimGroup );
-		sal_uInt32 nmsofbtAnimGroupSize = amsofbtAnimGroup.Tell();
-		if ( nmsofbtAnimGroupSize )
-		{
-			EscherExContainer aProgTags		( *mpStrm, EPP_ProgTags );
-			EscherExContainer aProgBinaryTag( *mpStrm, EPP_ProgBinaryTag );
-			{
-				EscherExAtom aCString( *mpStrm, EPP_CString );
-				*mpStrm << (sal_uInt32)0x5f005f
-						<< (sal_uInt32)0x50005f
-						<< (sal_uInt32)0x540050
-						<< (sal_uInt16)0x31
-						<< (sal_uInt16)0x30;
-			}
-			{
-				EscherExAtom aBinaryTagData( *mpStrm, EPP_BinaryTagData );
-				{
-					{
-						EscherExAtom aMagic2( *mpStrm, 0x2eeb );
-						*mpStrm << (sal_uInt32)0x01c45df9
-								<< (sal_uInt32)0xe1471b30;
-					}
-					{
-						EscherExAtom aMagic( *mpStrm, 0x2b00 );
-						*mpStrm << (sal_uInt32)0;
-					}
-				}
-				mpStrm->Write( amsofbtAnimGroup.GetData(), amsofbtAnimGroup.Tell() );
-				{
-					EscherExContainer aMagic2( *mpStrm, 0x2b02 );
-				}
-			}
-		}
-    }
-	mpPptEscherEx->CloseContainer();    // EPP_Slide
-    return TRUE;
-};
-
-// ---------------------------------------------------------------------------------------------
-
-sal_Bool PPTWriter::ImplCreateNotes( sal_uInt32 nPageNum )
+void PPTWriter::ImplWriteNotes( sal_uInt32 nPageNum )
 {
-    if ( !ImplGetPageByIndex( nPageNum, NOTICE ) )
-        return FALSE;
-	ImplSetCurrentStyleSheet( ImplGetMasterIndex( NORMAL ) );
-
-
     mpPptEscherEx->PtReplaceOrInsert( EPP_Persist_Notes | nPageNum, mpStrm->Tell() );
     mpPptEscherEx->OpenContainer( EPP_Notes );
     mpPptEscherEx->AddAtom( 8, EPP_NotesAtom, 1 );
@@ -1633,7 +1232,7 @@ sal_Bool PPTWriter::ImplCreateNotes( sal_uInt32 nPageNum )
     mpPptEscherEx->OpenContainer( ESCHER_DgContainer );
     mpPptEscherEx->EnterGroup(0,0);
 
-    ImplWritePage( pPHLayout[ 20 ], aSolverContainer, NOTICE, FALSE );  // Die Shapes der Seite werden im PPT Dok. erzeugt
+    ImplWritePage( GetLayout( 20 ), aSolverContainer, NOTICE, FALSE );  // Die Shapes der Seite werden im PPT Dok. erzeugt
 
     mpPptEscherEx->LeaveGroup();
     mpPptEscherEx->OpenContainer( ESCHER_SpContainer );
@@ -1657,8 +1256,7 @@ sal_Bool PPTWriter::ImplCreateNotes( sal_uInt32 nPageNum )
     mpPptEscherEx->AddAtom( 32, EPP_ColorSchemeAtom, 0, 1 );
     *mpStrm << (sal_uInt32)0xffffff << (sal_uInt32)0x000000 << (sal_uInt32)0x808080 << (sal_uInt32)0x000000 << (sal_uInt32)0x99cc00 << (sal_uInt32)0xcc3333 << (sal_uInt32)0xffcccc << (sal_uInt32)0xb2b2b2;
     mpPptEscherEx->CloseContainer();    // EPP_Notes
-    return TRUE;
-};
+}
 
 void PPTWriter::ImplWriteBackground( ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet )
 {
@@ -1734,18 +1332,18 @@ void PPTWriter::ImplWriteCString( SvStream& rSt, const String& rString, sal_uInt
     }
 }
 
-void PPTWriter::ImplWriteVBA( SvMemoryStream* pVBA )
+void PPTWriter::ImplWriteVBA()
 {
-    if ( pVBA )
+    if ( mpVBA )
     {
-        pVBA->Seek( STREAM_SEEK_TO_END );
-        sal_uInt32 nLen = pVBA->Tell();
+        mpVBA->Seek( STREAM_SEEK_TO_END );
+        sal_uInt32 nLen = mpVBA->Tell();
         if ( nLen > 8 )
         {
             nLen -= 8;
             mnVBAOleOfs = mpStrm->Tell();
             mpPptEscherEx->BeginAtom();
-            mpStrm->Write( (sal_Int8*)pVBA->GetData() + 8, nLen );
+            mpStrm->Write( (sal_Int8*)mpVBA->GetData() + 8, nLen );
             mpPptEscherEx->EndAtom( EPP_ExOleObjStg, 0, 1 );
         }
     }
@@ -1753,11 +1351,11 @@ void PPTWriter::ImplWriteVBA( SvMemoryStream* pVBA )
 
 // ---------------------------------------------------------------------------------------------
 
-void PPTWriter::ImplWriteOLE( sal_uInt32 nCnvrtFlags )
+void PPTWriter::ImplWriteOLE()
 {
     PPTExOleObjEntry* pPtr;
 
-    SvxMSExportOLEObjects aOleExport( nCnvrtFlags );
+    SvxMSExportOLEObjects aOleExport( mnCnvrtFlags );
 
     for ( pPtr = (PPTExOleObjEntry*)maExOleObj.First(); pPtr;
         pPtr = (PPTExOleObjEntry*)maExOleObj.Next() )
@@ -1954,482 +1552,6 @@ sal_Bool PPTWriter::ImplWriteAtomEnding()
 
 // ---------------------------------------------------------------------------------------------
 
-PPTExCharSheet::PPTExCharSheet( int nInstance )
-{
-    sal_uInt16 nFontHeight = 24;
-
-    for ( int nDepth = 0; nDepth < 5; nDepth++ )
-    {
-        PPTExCharLevel& rLev = maCharLevel[ nDepth ];
-        switch ( nInstance )
-        {
-            case EPP_TEXTTYPE_Title :
-            case EPP_TEXTTYPE_CenterTitle :
-                nFontHeight = 44;
-            break;
-            case EPP_TEXTTYPE_Body :
-            case EPP_TEXTTYPE_CenterBody :
-            case EPP_TEXTTYPE_HalfBody :
-            case EPP_TEXTTYPE_QuarterBody :
-            {
-                switch ( nDepth )
-                {
-                    case 0 : nFontHeight = 32; break;
-                    case 1 : nFontHeight = 28; break;
-                    case 2 : nFontHeight = 24; break;
-                    default :nFontHeight = 20; break;
-                }
-            }
-            break;
-            case EPP_TEXTTYPE_Notes :
-                nFontHeight = 12;
-            break;
-            case EPP_TEXTTYPE_notUsed :
-            case EPP_TEXTTYPE_Other :
-                nFontHeight = 24;
-            break;
-        }
-        rLev.mnFlags = 0;
-        rLev.mnFont = 0;
-        rLev.mnAsianOrComplexFont = 0xffff;
-        rLev.mnFontHeight = nFontHeight;
-        rLev.mnFontColor = 0;
-        rLev.mnEscapement = 0;
-    }
-}
-
-
-void PPTExCharSheet::SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
-                                    FontCollection& rFontCollection, int nLevel )
-{
-    PortionObj  aPortionObj( rXPropSet, rFontCollection );
-
-    PPTExCharLevel& rLev = maCharLevel[ nLevel ];
-
-    if ( aPortionObj.meCharColor == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        rLev.mnFontColor = aPortionObj.mnCharColor;
-    if ( aPortionObj.meCharEscapement == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        rLev.mnEscapement = aPortionObj.mnCharEscapement;
-    if ( aPortionObj.meCharHeight == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        rLev.mnFontHeight = aPortionObj.mnCharHeight;
-    if ( aPortionObj.meFontName == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        rLev.mnFont = aPortionObj.mnFont;
-    if ( aPortionObj.meAsianOrComplexFont == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        rLev.mnAsianOrComplexFont = aPortionObj.mnAsianOrComplexFont;
-    rLev.mnFlags = aPortionObj.mnCharAttr;
-}
-
-void PPTExCharSheet::Write( SvStream& rSt, PptEscherEx*, sal_uInt16 nLev, sal_Bool, sal_Bool bSimpleText,
-    const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rPagePropSet )
-{
-    const PPTExCharLevel& rLev = maCharLevel[ nLev ];
-
-    sal_uInt32 nCharFlags = 0xefffff;
-    if ( bSimpleText )
-        nCharFlags = 0x7ffff;
-
-    rSt << nCharFlags
-        << rLev.mnFlags
-        << rLev.mnFont;
-
-    sal_uInt32 nFontColor = rLev.mnFontColor;
-    if ( nFontColor == COL_AUTO )
-    {
-        sal_Bool bIsDark = sal_False;
-        ::com::sun::star::uno::Any aAny;
-        if ( PropValue::GetPropertyValue( aAny, rPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsBackgroundDark" ) ), sal_True ) )
-            aAny >>= bIsDark;
-        nFontColor = bIsDark ? 0xffffff : 0x000000;
-    }
-    nFontColor &= 0xffffff;
-    nFontColor |= 0xfe000000;
-    if ( bSimpleText )
-    {
-        rSt << rLev.mnFontHeight
-            << nFontColor;
-    }
-    else
-    {
-        rSt << rLev.mnAsianOrComplexFont
-            << (sal_uInt16)0xffff       // unbekannt
-            << (sal_uInt16)0xffff       // unbekannt
-            << rLev.mnFontHeight
-            << nFontColor
-            << rLev.mnEscapement;
-    }
-}
-
-PPTExParaSheet::PPTExParaSheet( int nInstance, sal_uInt16 nDefaultTab, PPTExBulletProvider& rProv ) :
-    rBuProv     ( rProv ),
-    mnInstance  ( nInstance )
-{
-    sal_Bool bHasBullet = FALSE;
-
-    sal_uInt16 nUpperDist = 0;
-    sal_uInt16 nBulletChar = 0x2022;
-    sal_uInt16 nBulletOfs = 0;
-    sal_uInt16 nTextOfs = 0;
-
-    for ( int nDepth = 0; nDepth < 5; nDepth++ )
-    {
-        PPTExParaLevel& rLev = maParaLevel[ nDepth ];
-        switch ( nInstance )
-        {
-            case EPP_TEXTTYPE_Title :
-            case EPP_TEXTTYPE_CenterTitle :
-            break;
-            case EPP_TEXTTYPE_Body :
-            case EPP_TEXTTYPE_CenterBody :
-            case EPP_TEXTTYPE_HalfBody :
-            case EPP_TEXTTYPE_QuarterBody :
-            {
-                bHasBullet = TRUE;
-                nUpperDist = 0x14;
-            }
-            break;
-            case EPP_TEXTTYPE_Notes :
-                nUpperDist = 0x1e;
-            break;
-
-//          default :
-//          case EPP_TEXTTYPE_notUsed :
-//          case EPP_TEXTTYPE_Other :
-//          break;
-        }
-        switch ( nDepth )
-        {
-            case 0 :
-            {
-                nBulletChar = 0x2022;
-                nBulletOfs = 0;
-                nTextOfs = ( bHasBullet ) ? 0xd8 : 0;
-            }
-            break;
-            case 1 :
-            {
-                nBulletChar = 0x2013;
-                nBulletOfs = 0x120;
-                nTextOfs = 0x1d4;
-            }
-            break;
-            case 2 :
-            {
-                nBulletChar = 0x2022;
-                nBulletOfs = 0x240;
-                nTextOfs = 0x2d0;
-            }
-            break;
-            case 3 :
-            {
-                nBulletChar = 0x2013;
-                nBulletOfs = 0x360;
-                nTextOfs = 0x3f0;
-            }
-            break;
-            case 4 :
-            {
-                nBulletChar = 0xbb;
-                nBulletOfs = 0x480;
-                nTextOfs = 0x510;
-            }
-            break;
-        }
-        rLev.mbIsBullet = bHasBullet;
-        rLev.mnBulletChar = nBulletChar;
-        rLev.mnBulletFont = 0;
-        rLev.mnBulletHeight = 100;
-        rLev.mnBulletColor = 0;
-        rLev.mnAdjust = 0;
-        rLev.mnLineFeed = 100;
-        rLev.mnLowerDist = 0;
-        rLev.mnUpperDist = nUpperDist;
-        rLev.mnTextOfs = nTextOfs;
-        rLev.mnBulletOfs = nBulletOfs;
-        rLev.mnDefaultTab = nDefaultTab;
-        rLev.mnAsianSettings = 2;
-		rLev.mnBiDi = 0;
-
-        rLev.mbExtendedBulletsUsed = FALSE;
-        rLev.mnBulletId = 0xffff;
-        rLev.mnBulletStart = 0;
-        rLev.mnMappedNumType = 0;
-        rLev.mnNumberingType = 0;
-    }
-}
-
-void PPTExParaSheet::SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
-                                        FontCollection& rFontCollection, int nLevel, const PPTExCharLevel& rCharLevel )
-{
-    ParagraphObj aParagraphObj( rXPropSet, rBuProv );
-    aParagraphObj.CalculateGraphicBulletSize( rCharLevel.mnFontHeight );
-    PPTExParaLevel& rLev = maParaLevel[ nLevel ];
-
-    if ( aParagraphObj.meTextAdjust == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        rLev.mnAdjust = aParagraphObj.mnTextAdjust;
-    if ( aParagraphObj.meLineSpacing == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-    {
-        sal_Int16 nLineSpacing = aParagraphObj.mnLineSpacing;
-        if ( nLineSpacing > 0 ) // if nLinespacing is < 0 the linespacing is an absolute spacing
-        {
-			sal_Bool bFixedLineSpacing = sal_False;
-			uno::Any aAny = rXPropSet->getPropertyValue( ::rtl::OUString( 
-															 RTL_CONSTASCII_USTRINGPARAM( 
-																 "FontIndependentLineSpacing" ) ) );
-			if( !(aAny >>= bFixedLineSpacing) || !bFixedLineSpacing ) 
-			{
-				const FontCollectionEntry* pDesc = rFontCollection.GetById( rCharLevel.mnFont );
-				if ( pDesc )
-					nLineSpacing = (sal_Int16)( (double)nLineSpacing * pDesc->Scaling + 0.5 );
-			}
-        }
-        else
-        {
-            if ( rCharLevel.mnFontHeight > (sal_uInt16)( ((double)-nLineSpacing) * 0.001 * 72.0 / 2.54 ) ) // 1/100mm to point
-            {
-                const FontCollectionEntry* pDesc = rFontCollection.GetById( rCharLevel.mnFont );
-                if ( pDesc )
-                     nLineSpacing = (sal_Int16)( (double)100.0 * pDesc->Scaling + 0.5 );
-                else
-                    nLineSpacing = 100;
-            }
-            else
-                nLineSpacing = (sal_Int16)( (double)nLineSpacing / 4.40972 );
-        }
-        rLev.mnLineFeed = nLineSpacing;
-    }
-    if ( aParagraphObj.meLineSpacingBottom == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        rLev.mnLowerDist = aParagraphObj.mnLineSpacingBottom;
-    if ( aParagraphObj.meLineSpacingTop == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        rLev.mnUpperDist = aParagraphObj.mnLineSpacingTop;
-    if ( aParagraphObj.meForbiddenRules == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-    {
-        rLev.mnAsianSettings &=~1;
-        if ( aParagraphObj.mbForbiddenRules )
-            rLev.mnAsianSettings |= 1;
-    }
-    if ( aParagraphObj.meParagraphPunctation == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-    {
-        rLev.mnAsianSettings &=~4;
-        if ( aParagraphObj.mbParagraphPunctation )
-            rLev.mnAsianSettings |= 4;
-    }
-
-	if ( aParagraphObj.meBiDi == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-		rLev.mnBiDi = aParagraphObj.mnBiDi;
-
-	rLev.mbIsBullet = aParagraphObj.mbIsBullet; //( ( aParagraphObj.nBulletFlags & 1 ) != 0 );
-
-    if ( !nLevel )
-    {
-        if ( ( aParagraphObj.meBullet ==  ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-                    && aParagraphObj.bExtendedParameters )
-        {
-            for ( sal_Int16 i = 0; i < 5; i++ )
-            {
-                PPTExParaLevel& rLevel = maParaLevel[ i ];
-                if ( i )
-                    aParagraphObj.ImplGetNumberingLevel( rBuProv, i, FALSE );
-//              rLevel.mbIsBullet = ( ( aParagraphObj.nBulletFlags & 1 ) != 0 );
-                rLevel.mnTextOfs = aParagraphObj.nTextOfs;
-                rLevel.mnBulletOfs = (sal_uInt16)aParagraphObj.nBulletOfs;
-                rLevel.mnBulletChar = aParagraphObj.cBulletId;
-                FontCollectionEntry aFontDescEntry( aParagraphObj.aFontDesc.Name, aParagraphObj.aFontDesc.Family,
-                                                        aParagraphObj.aFontDesc.Pitch, aParagraphObj.aFontDesc.CharSet );
-                rLevel.mnBulletFont = (sal_uInt16)rFontCollection.GetId( aFontDescEntry );
-                rLevel.mnBulletHeight = aParagraphObj.nBulletRealSize;
-                rLevel.mnBulletColor = aParagraphObj.nBulletColor;
-
-                rLevel.mbExtendedBulletsUsed = aParagraphObj.bExtendedBulletsUsed;
-                rLevel.mnBulletId = aParagraphObj.nBulletId;
-                rLevel.mnNumberingType = aParagraphObj.nNumberingType;
-                rLevel.mnBulletStart = aParagraphObj.nStartWith;
-                rLevel.mnMappedNumType = aParagraphObj.nMappedNumType;
-			}
-        }
-    }
-}
-
-void PPTExParaSheet::Write( SvStream& rSt, PptEscherEx*, sal_uInt16 nLev, sal_Bool, sal_Bool bSimpleText,
-    const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rPagePropSet )
-{
-    const PPTExParaLevel& rLev = maParaLevel[ nLev ];
-
-    if ( maParaLevel[ 0 ].mbExtendedBulletsUsed || maParaLevel[ 1 ].mbExtendedBulletsUsed ||
-            maParaLevel[ 2 ].mbExtendedBulletsUsed || maParaLevel[ 3 ].mbExtendedBulletsUsed ||
-                maParaLevel[ 4 ].mbExtendedBulletsUsed )
-    {
-        SvStream& rOut = rBuProv.aBuExMasterStream;
-        if ( !nLev )
-        {
-            rOut << (sal_uInt32)( ( EPP_PST_ExtendedParagraphMasterAtom << 16 ) | ( mnInstance << 4 ) )
-                 << (sal_uInt32)( 5 * 16 + 2 )
-                 << (sal_uInt16)5;              // depth
-        }
-        sal_uInt16 nBulletId = rLev.mnBulletId;
-        if ( rLev.mnNumberingType != SVX_NUM_BITMAP )
-            nBulletId = 0xffff;
-        rOut << (sal_uInt32)0x03800000
-             << (sal_uInt16)nBulletId
-             << (sal_uInt32)rLev.mnMappedNumType
-             << (sal_uInt16)rLev.mnBulletStart
-             << (sal_uInt32)0;
-    }
-
-    sal_uInt32 nParaFlags = 0x3ffdff;
-    sal_uInt16 nBulletFlags = ( rLev.mbIsBullet ) ? 0xf : 0xe;
-
-    if ( nLev )
-		nParaFlags &= 0x207fff;
-	if ( bSimpleText )
-		nParaFlags &= 0x7fff;
-    sal_uInt32 nBulletColor = rLev.mnBulletColor;
-    if ( nBulletColor == COL_AUTO )
-    {
-        sal_Bool bIsDark = sal_False;
-        ::com::sun::star::uno::Any aAny;
-        if ( PropValue::GetPropertyValue( aAny, rPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsBackgroundDark" ) ), sal_True ) )
-            aAny >>= bIsDark;
-        nBulletColor = bIsDark ? 0xffffff : 0x000000;
-    }
-    nBulletColor &= 0xffffff;
-    nBulletColor |= 0xfe000000;
-    rSt << nParaFlags
-        << nBulletFlags
-        << rLev.mnBulletChar
-        << rLev.mnBulletFont
-        << rLev.mnBulletHeight
-        << nBulletColor
-        << rLev.mnAdjust
-        << rLev.mnLineFeed
-        << rLev.mnUpperDist
-        << rLev.mnLowerDist
-        << rLev.mnTextOfs
-        << rLev.mnBulletOfs;
-
-    if ( bSimpleText || nLev )
-	{
-		if ( nParaFlags & 0x200000 )
-			rSt << rLev.mnBiDi;
-	}
-	else
-	{
-		rSt << rLev.mnDefaultTab
-			<< (sal_uInt16)0
-			<< (sal_uInt16)0
-			<< rLev.mnAsianSettings
-			<< rLev.mnBiDi;
-	}
-}
-
-
-PPTExStyleSheet::PPTExStyleSheet( sal_uInt16 nDefaultTab, PPTExBulletProvider& rBuProv )
-{
-    for ( int nInstance = EPP_TEXTTYPE_Title; nInstance <= EPP_TEXTTYPE_QuarterBody; nInstance++ )
-    {
-        mpParaSheet[ nInstance ] = ( nInstance == EPP_TEXTTYPE_notUsed ) ? NULL : new PPTExParaSheet( nInstance, nDefaultTab, rBuProv );
-        mpCharSheet[ nInstance ] = ( nInstance == EPP_TEXTTYPE_notUsed ) ? NULL : new PPTExCharSheet( nInstance );
-    }
-}
-
-PPTExStyleSheet::~PPTExStyleSheet()
-{
-    for ( int nInstance = EPP_TEXTTYPE_Title; nInstance <= EPP_TEXTTYPE_QuarterBody; nInstance++ )
-    {
-        if ( nInstance == EPP_TEXTTYPE_notUsed )
-            continue;
-
-        delete mpParaSheet[ nInstance ];
-        delete mpCharSheet[ nInstance ];
-    }
-}
-
-void PPTExStyleSheet::SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
-                                        FontCollection& rFontCollection, int nInstance, int nLevel )
-{
-    if ( nInstance == EPP_TEXTTYPE_notUsed )
-        return;
-    mpCharSheet[ nInstance ]->SetStyleSheet( rXPropSet, rFontCollection, nLevel );
-    mpParaSheet[ nInstance ]->SetStyleSheet( rXPropSet, rFontCollection, nLevel, mpCharSheet[ nInstance ]->maCharLevel[ nLevel ] );
-}
-
-sal_Bool PPTExStyleSheet::IsHardAttribute( sal_uInt32 nInstance, sal_uInt32 nLevel, PPTExTextAttr eAttr, sal_uInt32 nValue )
-{
-    const PPTExParaLevel& rPara = mpParaSheet[ nInstance ]->maParaLevel[ nLevel ];
-    const PPTExCharLevel& rChar = mpCharSheet[ nInstance ]->maCharLevel[ nLevel ];
-
-    sal_uInt32 nFlag = 0;
-
-    switch ( eAttr )
-    {
-        case ParaAttr_BulletOn : return ( rPara.mbIsBullet ) ? ( nValue ) ? FALSE : TRUE : ( nValue ) ? TRUE : FALSE;
-        case ParaAttr_BuHardFont :
-        case ParaAttr_BulletFont : return ( rPara.mnBulletFont != nValue );
-        case ParaAttr_BuHardColor :
-        case ParaAttr_BulletColor : return ( rPara.mnBulletColor != nValue );
-        case ParaAttr_BuHardHeight :
-        case ParaAttr_BulletHeight : return ( rPara.mnBulletHeight != nValue );
-        case ParaAttr_BulletChar : return ( rPara.mnBulletChar != nValue );
-        case ParaAttr_Adjust : return ( rPara.mnAdjust != nValue );
-        case ParaAttr_LineFeed : return ( rPara.mnLineFeed != nValue );
-        case ParaAttr_UpperDist : return ( rPara.mnUpperDist != nValue );
-        case ParaAttr_LowerDist : return ( rPara.mnLowerDist != nValue );
-        case ParaAttr_TextOfs : return ( rPara.mnTextOfs != nValue );
-        case ParaAttr_BulletOfs : return ( rPara.mnBulletOfs != nValue );
-        case ParaAttr_DefaultTab : return ( rPara.mnDefaultTab != nValue );
-		case ParaAttr_BiDi : return ( rPara.mnBiDi != nValue );
-        case CharAttr_Bold : nFlag = 1; break;
-        case CharAttr_Italic : nFlag = 2; break;
-        case CharAttr_Underline : nFlag = 4; break;
-        case CharAttr_Shadow : nFlag = 16; break;
-        case CharAttr_Strikeout : nFlag = 256; break;
-        case CharAttr_Embossed : nFlag = 512; break;
-        case CharAttr_Font : return ( rChar.mnFont != nValue );
-        case CharAttr_AsianOrComplexFont : return ( rChar.mnAsianOrComplexFont != nValue );
-        case CharAttr_Symbol : return TRUE;
-        case CharAttr_FontHeight : return ( rChar.mnFontHeight != nValue );
-        case CharAttr_FontColor : return ( rChar.mnFontColor != nValue );
-        case CharAttr_Escapement : return ( rChar.mnEscapement != nValue );
-		default:
-			break;
-    };
-    if ( nFlag )
-    {
-        if ( rChar.mnFlags & nFlag )
-            return ( ( nValue & nFlag ) == 0 );
-        else
-            return ( ( nValue & nFlag ) != 0 );
-    }
-    return TRUE;
-}
-
-sal_uInt32 PPTExStyleSheet::SizeOfTxCFStyleAtom() const
-{
-    return 24;
-}
-
-// the TxCFStyleAtom stores the text properties that are used
-// when creating new objects in PowerPoint.
-
-void PPTExStyleSheet::WriteTxCFStyleAtom( SvStream& rSt )
-{
-    const PPTExCharLevel& rCharStyle = mpCharSheet[ EPP_TEXTTYPE_Other ]->maCharLevel[ 0 ];
-    
-    sal_uInt16 nFlags = 0x60        // ??
-                      | 0x02        // fontsize;
-                      | 0x04;       // fontcolor
-
-    sal_uInt32 nCharFlags = rCharStyle.mnFlags;
-    nCharFlags &= CharAttr_Italic | CharAttr_Bold | CharAttr_Underline | CharAttr_Shadow;
-
-    rSt << (sal_uInt32)( EPP_TxCFStyleAtom << 16 )  // recordheader
-        << SizeOfTxCFStyleAtom() - 8
-        << (sal_uInt16)( 0x80 | nCharFlags )
-        << (sal_uInt16)nFlags
-        << (sal_uInt16)nCharFlags
-        << (sal_Int32)-1                            // ?
-        << rCharStyle.mnFontHeight
-        << rCharStyle.mnFontColor;
-}
 
 
 // ---------------------------------------------------------------------------------------------
@@ -2449,6 +1571,7 @@ extern "C" SAL_DLLPUBLIC_EXPORT BOOL __LOADONCALLAPI ExportPPT( SvStorageRef& rS
     pPPTWriter = new PPTWriter( rSvStorage, rXModel, rXStatInd, pVBA, nCnvrtFlags );
     if ( pPPTWriter )
     {
+        pPPTWriter->exportPPT();
         bStatus = ( pPPTWriter->IsValid() == TRUE );
         delete pPPTWriter;
     }
diff --git sd/source/filter/eppt/eppt.hxx sd/source/filter/eppt/eppt.hxx
index 9d0ab80..70ce541 100644
--- sd/source/filter/pptx/eppt.hxx
+++ sd/source/filter/pptx/eppt.hxx
@@ -36,13 +36,11 @@
 #endif
 #include <tools/solar.h>
 #include <sot/storage.hxx>
-#include <tools/gen.hxx>
 #include <vcl/graph.hxx>
 #include <vcl/fontcvt.hxx>
-#include <tools/string.hxx>
 #include "pptexanimations.hxx"
 #include <pptexsoundcollection.hxx>
-
+#include "text.hxx"
 // ------------------------------------------------------------------------
 
 #include <vcl/mapmod.hxx>
@@ -66,11 +64,7 @@
 #include <com/sun/star/drawing/Hatch.hpp>
 #include <com/sun/star/drawing/LineDash.hpp>
 #include <com/sun/star/drawing/PolyPolygonBezierCoords.hpp>
-#include <com/sun/star/presentation/XPresentationSupplier.hpp>
 #include <com/sun/star/presentation/XCustomPresentationSupplier.hpp>
-#include <com/sun/star/drawing/XMasterPageTarget.hpp>
-#include <com/sun/star/drawing/XDrawPagesSupplier.hpp>
-#include <com/sun/star/drawing/XMasterPagesSupplier.hpp>
 #include <com/sun/star/awt/XGraphics.hpp>
 #include <com/sun/star/task/XStatusIndicatorSupplier.hpp>
 #include <com/sun/star/presentation/AnimationEffect.hpp>
@@ -81,12 +75,10 @@
 #include <com/sun/star/text/XTextFieldsSupplier.hpp>
 #include <com/sun/star/text/XTextField.hpp>
 #include <com/sun/star/container/XNamed.hpp>
-#include <com/sun/star/awt/FontDescriptor.hpp>
 #include <com/sun/star/container/XIndexContainer.hpp>
 #include <com/sun/star/awt/XControlModel.hpp>
 #include <com/sun/star/style/TabStop.hpp>
 #include <svx/msocximex.hxx>
-#include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/beans/XPropertyState.hpp>
 #include <com/sun/star/beans/XPropertySetInfo.hpp>
 #include <com/sun/star/awt/FontFamily.hpp>
@@ -95,7 +87,7 @@
 #include <com/sun/star/text/WritingMode.hpp>
 #include <com/sun/star/lang/Locale.hpp>
 
-enum PageType { NORMAL = 0, MASTER = 1, NOTICE = 2, UNDEFINED = 3 };
+#include <epptbase.hxx>
 
 #define EPP_MAINMASTER_PERSIST_KEY		0x80010000
 #define EPP_MAINNOTESMASTER_PERSIST_KEY	0x80020000
@@ -116,283 +108,11 @@ enum PageType { NORMAL = 0, MASTER = 1, NOTICE = 2, UNDEFINED = 3 };
 #define EPP_TEXTSTYLE_BODY				0x00000100
 #define EPP_TEXTSTYLE_TEXT				0x00001000
 
-// PLACEMENT_ID
-#define EPP_LAYOUT_TITLESLIDE             0 /* The slide is a title slide                                                             */
-#define EPP_LAYOUT_TITLEANDBODYSLIDE      1 /* Title and body slide                                                                   */
-#define EPP_LAYOUT_TITLEMASTERSLIDE       2 /* Title master slide                                                                     */
-#define	EPP_LAYOUT_MASTERSLIDE            3 /* Master slide layout                                                                    */
-#define EPP_LAYOUT_MASTERNOTES            4 /* Master notes layout                                                                    */
-#define EPP_LAYOUT_NOTESTITLEBODY         5 /* Notes title/body layout                                                                */
-#define EPP_LAYOUT_HANDOUTLAYOUT          6 /* Handout layout, therefore it doesn't have placeholders except header, footer, and date */
-#define EPP_LAYOUT_ONLYTITLE              7 /* Only title placeholder                                                                 */
-#define EPP_LAYOUT_2COLUMNSANDTITLE       8 /* Body of the slide has 2 columns and a title                                            */
-#define EPP_LAYOUT_2ROWSANDTITLE          9 /* Slide's body has 2 rows and a title                                                    */
-#define EPP_LAYOUT_RIGHTCOLUMN2ROWS      10 /* Body contains 2 columns, right column has 2 rows                                       */
-#define EPP_LAYOUT_LEFTCOLUMN2ROWS       11 /* Body contains 2 columns, left column has 2 rows                                        */
-#define EPP_LAYOUT_BOTTOMROW2COLUMNS     12 /* Body contains 2 rows, bottom row has 2 columns                                         */
-#define EPP_LAYOUT_TOPROW2COLUMN         13 /* Body contains 2 rows, top row has 2 columns                                            */
-#define EPP_LAYOUT_4OBJECTS              14 /* 4 objects                                                                              */
-#define EPP_LAYOUT_BIGOBJECT             15 /* Big object                                                                             */
-#define EPP_LAYOUT_BLANCSLIDE            16 /* Blank slide                                                                            */
-#define EPP_LAYOUT_TITLERIGHTBODYLEFT    17 /* Vertical title on the right, body on the left                                          */
-#define EPP_LAYOUT_TITLERIGHT2BODIESLEFT 18 /* Vertical title on the right, body on the left split into 2 rows                        */
-
 class Polygon;
-class PptEscherEx;
 class XStatusIndicatorRef;
 
-struct PHLayout
-{
-	sal_Int32	nLayout;
-	sal_uInt8	nPlaceHolder[ 8 ];
-
-	sal_uInt8	nUsedObjectPlaceHolder;
-	sal_uInt8	nTypeOfTitle;
-	sal_uInt8	nTypeOfOutliner;
-
-	BOOL	bTitlePossible;
-	BOOL	bOutlinerPossible;
-	BOOL	bSecOutlinerPossible;
-};
-
-struct SOParagraph
-{
-	sal_Bool				bExtendedParameters;
-	sal_uInt32				nParaFlags;
-	sal_Int16				nBulletFlags;
-	String					sPrefix;
-	String					sSuffix;
-	String					sGraphicUrl;			// String auf eine Graphic
-	Size					aBuGraSize;
-	sal_uInt32				nNumberingType;			// in wirlichkeit ist dies ein SvxEnum
-	sal_uInt32				nHorzAdjust;
-	sal_uInt32				nBulletColor;
-	sal_Int32				nBulletOfs;
-	sal_Int16				nStartWith;				// Start der nummerierung
-	sal_Int16				nTextOfs;
-	sal_Int16				nBulletRealSize;		// GroessenVerhaeltnis in Proz
-	sal_Int16				nDepth;					// aktuelle tiefe
-	sal_Unicode				cBulletId;				// wenn Numbering Type == CharSpecial
-	::com::sun::star::awt::FontDescriptor		aFontDesc;
-
-	sal_Bool				bExtendedBulletsUsed;
-	sal_uInt16				nBulletId;
-	sal_uInt32				nMappedNumType;
-	sal_Bool				bNumberingIsNumber;
-
-	SOParagraph()
-	{
-		nDepth = 0;
-		bExtendedParameters = FALSE;
-		nParaFlags = 0;
-		nBulletFlags = 0;
-		nBulletOfs = 0;
-		nTextOfs = 0;
-		bExtendedBulletsUsed = FALSE;
-		nBulletId = 0xffff;
-		bNumberingIsNumber = sal_True;
-	};
-};
-
 // ------------------------------------------------------------------------
 
-class EscherGraphicProvider;
-class PPTExBulletProvider
-{
-	friend struct PPTExParaSheet;
-
-	protected :
-
-		SvMemoryStream			aBuExPictureStream;
-		SvMemoryStream			aBuExOutlineStream;
-		SvMemoryStream			aBuExMasterStream;
-
-		EscherGraphicProvider*	pGraphicProv;
-
-	public :
-
-		sal_uInt16				GetId( const ByteString& rUniqueId, Size& rGraphicSize );
-
-								PPTExBulletProvider();
-								~PPTExBulletProvider();
-};
-
-struct FontCollectionEntry
-{
-		String					Name;
-        double                  Scaling;
-		sal_Int16				Family;
-		sal_Int16				Pitch;
-		sal_Int16				CharSet;
-    
-        String                  Original;
-        sal_Bool                bIsConverted;
-
-		FontCollectionEntry( const String& rName, sal_Int16 nFamily, sal_Int16 nPitch, sal_Int16 nCharSet ) :
-                            Scaling ( 1.0 ),
-							Family	( nFamily ),
-							Pitch	( nPitch ),
-							CharSet	( nCharSet ),
-                            Original( rName )
-                            {
-                                ImplInit( rName );
-                            };
-
-		FontCollectionEntry( const String& rName ) :
-							Scaling ( 1.0 ),
-                            Original( rName )
-                            {
-                                ImplInit( rName );
-                            };
-        ~FontCollectionEntry();
-
-    private :
-        
-        FontCollectionEntry() {};
-
-        void ImplInit( const String& rName );
-};
-
-class VirtualDevice;
-class FontCollection : private List
-{
-        VirtualDevice* pVDev;
-	public :
-					FontCollection();
-					~FontCollection();
-
-		short		GetScriptDirection( const String& rText ) const;
-		sal_uInt32	GetId( FontCollectionEntry& rFontDescriptor );
-		sal_uInt32	GetCount() const { return List::Count(); };
-		const FontCollectionEntry*						GetById( sal_uInt32 nId );
-		FontCollectionEntry&	GetLast() { return *(FontCollectionEntry*)List::Last(); };
-};
-
-// ------------------------------------------------------------------------
-
-#define PPTEX_STYLESHEETENTRYS	9
-
-enum PPTExTextAttr
-{
-	ParaAttr_BulletOn,
-	ParaAttr_BuHardFont,
-	ParaAttr_BuHardColor,
-	ParaAttr_BuHardHeight,
-	ParaAttr_BulletChar,
-	ParaAttr_BulletFont,
-	ParaAttr_BulletHeight,
-	ParaAttr_BulletColor,
-	ParaAttr_Adjust,
-	ParaAttr_LineFeed,
-	ParaAttr_UpperDist,
-	ParaAttr_LowerDist,
-	ParaAttr_TextOfs,
-	ParaAttr_BulletOfs,
-	ParaAttr_DefaultTab,
-    ParaAttr_AsianLB_1,
-    ParaAttr_AsianLB_2,
-    ParaAttr_AsianLB_3,
-	ParaAttr_BiDi,
-	CharAttr_Bold,
-	CharAttr_Italic,
-	CharAttr_Underline,
-	CharAttr_Shadow,
-	CharAttr_Strikeout,
-	CharAttr_Embossed,
-	CharAttr_Font,
-	CharAttr_AsianOrComplexFont,
-	CharAttr_Symbol,
-	CharAttr_FontHeight,
-	CharAttr_FontColor,
-	CharAttr_Escapement
-};
-
-struct PPTExCharLevel
-{
-	sal_uInt16		mnFlags;
-	sal_uInt16		mnFont;
-	sal_uInt16		mnAsianOrComplexFont;
-	sal_uInt16		mnFontHeight;
-	sal_uInt16		mnEscapement;
-	sal_uInt32		mnFontColor;
-};
-
-struct PPTExCharSheet
-{
-				PPTExCharLevel	maCharLevel[ 5 ];
-
-				PPTExCharSheet( int nInstance );
-
-				void	SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > &,
-										FontCollection& rFontCollection, int nLevel );
-				void	Write( SvStream& rSt, PptEscherEx* pEx, sal_uInt16 nLev, sal_Bool bFirst, sal_Bool bSimpleText, 
-                            const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rPagePropSet );
-
-};
-
-struct PPTExParaLevel
-{
-	sal_Bool	    mbIsBullet;
-	sal_uInt16		mnBulletChar;
-	sal_uInt16		mnBulletFont;
-	sal_uInt16		mnBulletHeight;
-	sal_uInt32		mnBulletColor;
-
-	sal_uInt16		mnAdjust;
-	sal_uInt16		mnLineFeed;
-	sal_uInt16		mnUpperDist;
-	sal_uInt16		mnLowerDist;
-	sal_uInt16		mnTextOfs;
-	sal_uInt16		mnBulletOfs;
-	sal_uInt16		mnDefaultTab;
-
-	sal_Bool		mbExtendedBulletsUsed;
-	sal_uInt16		mnBulletId;
-	sal_uInt16		mnBulletStart;
-	sal_uInt32		mnMappedNumType;
-	sal_uInt32		mnNumberingType;
-    sal_uInt16      mnAsianSettings;
-	sal_uInt16		mnBiDi;
-};
-
-struct PPTExParaSheet
-{
-				PPTExBulletProvider& rBuProv;
-
-				sal_uInt32	mnInstance;
-
-				PPTExParaLevel	maParaLevel[ 5 ];
-				PPTExParaSheet( int nInstance, sal_uInt16 nDefaultTab, PPTExBulletProvider& rProv );
-
-				void	SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > &,
-										FontCollection& rFontCollection, int nLevel, const PPTExCharLevel& rCharLevel );
-				void	Write( SvStream& rSt, PptEscherEx* pEx, sal_uInt16 nLev, sal_Bool bFirst, sal_Bool bSimpleText,
-                    const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rPagePropSet );
-};
-
-class PPTExStyleSheet
-{
-
-	public :
-
-        	    PPTExCharSheet*		mpCharSheet[ PPTEX_STYLESHEETENTRYS ];
-	            PPTExParaSheet*		mpParaSheet[ PPTEX_STYLESHEETENTRYS ];
-
-				PPTExStyleSheet( sal_uInt16 nDefaultTab, PPTExBulletProvider& rBuProv );
-				~PPTExStyleSheet();
-
-				PPTExParaSheet& GetParaSheet( int nInstance ) { return *mpParaSheet[ nInstance ]; };
-				PPTExCharSheet& GetCharSheet( int nInstance ) { return *mpCharSheet[ nInstance ]; };
-
-				void			SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > &,
-												FontCollection& rFontCollection, int nInstance, int nLevel );
-				sal_Bool		IsHardAttribute( sal_uInt32 nInstance, sal_uInt32 nLevel, PPTExTextAttr eAttr, sal_uInt32 nValue );
-
-				sal_uInt32		SizeOfTxCFStyleAtom() const;
-				void			WriteTxCFStyleAtom( SvStream& rSt );
-};
-
-
 struct EPPTHyperlink
 {
 	String		aURL;
@@ -437,296 +157,34 @@ struct TextRuleEntry
 	~TextRuleEntry() { delete pOut; };
 };
 
-// ------------------------------------------------------------------------
-
-struct GroupEntry
+class TextObjBinary : public TextObj
 {
-		sal_uInt32					mnCurrentPos;
-		sal_uInt32					mnCount;
-		::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess >			mXIndexAccess;
-								GroupEntry( ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess > & rIndex )
-								{
-									mXIndexAccess = rIndex;
-									mnCount =mXIndexAccess->getCount();
-									mnCurrentPos = 0;
-								};
-								GroupEntry( sal_uInt32 nCount )
-								{
-									mnCount = nCount;
-									mnCurrentPos = 0;
-								};
-								~GroupEntry(){};
-};
-
-// ------------------------------------------------------------------------
+public:
+    TextObjBinary( ::com::sun::star::uno::Reference< ::com::sun::star::text::XSimpleText > &
+                   rXText, int nInstance, FontCollection& rFontCollection, PPTExBulletProvider& rBuProv ) : TextObj( rXText, nInstance, rFontCollection, rBuProv ) {}
 
-class GroupTable
-{
-	protected:
-
-		sal_uInt32				mnIndex;
-		sal_uInt32				mnCurrentGroupEntry;
-		sal_uInt32				mnMaxGroupEntry;
-		sal_uInt32				mnGroupsClosed;
-		GroupEntry**			mpGroupEntry;
-
-		void					ImplResizeGroupTable( sal_uInt32 nEntrys );
-
-	public:
-
-		sal_uInt32				GetCurrentGroupIndex() const { return mnIndex; };
-		sal_Int32				GetCurrentGroupLevel() const { return mnCurrentGroupEntry - 1; };	
-		::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess > &
-								GetCurrentGroupAccess() const { return mpGroupEntry[  mnCurrentGroupEntry - 1 ]->mXIndexAccess; };
-		sal_uInt32				GetGroupsClosed();
-		void					SkipCurrentGroup();
-		void					ResetGroupTable( sal_uInt32 nCount );
-		void					ClearGroupTable();
-		sal_Bool                EnterGroup( ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess > & rIndex );
-		sal_Bool				GetNextGroupEntry();
-								GroupTable();
-								~GroupTable();
-};
-
-class PropValue
-{
-	protected :
-
-		::com::sun::star::uno::Any								mAny;
-
-		::com::sun::star::uno::Reference
-			< ::com::sun::star::beans::XPropertySet	>			mXPropSet;
-
-		sal_Bool	ImplGetPropertyValue( const String& rString );
-		sal_Bool	ImplGetPropertyValue( const ::com::sun::star::uno::Reference
-						< ::com::sun::star::beans::XPropertySet > &, const String& );
-
-	public :
-
-		static sal_Bool GetPropertyValue(
-				::com::sun::star::uno::Any& rAny,
-					const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > &,
-						const String& rPropertyName,
-							sal_Bool bTestPropertyAvailability = sal_False );
-
-		static ::com::sun::star::beans::PropertyState GetPropertyState(
-					const ::com::sun::star::uno::Reference < ::com::sun::star::beans::XPropertySet > &,
-						const String& rPropertyName );
-};
-
-class PropStateValue : public PropValue
-{
-	protected :
-
-		::com::sun::star::beans::PropertyState					ePropState;
-		::com::sun::star::uno::Reference
-			< ::com::sun::star::beans::XPropertyState >			mXPropState;
-
-		sal_Bool	ImplGetPropertyValue( const String& rString, sal_Bool bGetPropertyState = TRUE );
-
-};
-
-// ------------------------------------------------------------------------
-
-struct FieldEntry;
-class PortionObj : public PropStateValue
-{
-
-	friend class ParagraphObj;
-
-	protected :
-
-		void			ImplClear();
-		void			ImplConstruct( PortionObj& rPortionObj );
-		sal_uInt32		ImplGetTextField( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > & rXTextRangeRef,
-							const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSetRef, String& rURL );
-		sal_uInt32		ImplCalculateTextPositions( sal_uInt32 nCurrentTextPosition );
-		void			ImplGetPortionValues( FontCollection& rFontCollection, sal_Bool bGetPropStateValue = FALSE );
-
-	public :
-
-		::com::sun::star::beans::PropertyState	meCharColor;
-		::com::sun::star::beans::PropertyState	meCharHeight;
-		::com::sun::star::beans::PropertyState	meFontName;
-		::com::sun::star::beans::PropertyState	meAsianOrComplexFont;
-		::com::sun::star::beans::PropertyState	meCharEscapement;
-		::com::sun::star::lang::Locale			meCharLocale;
-		sal_uInt16		mnCharAttrHard;
-
-		sal_uInt32		mnCharColor;
-		sal_uInt16		mnCharAttr;
-		sal_uInt16		mnCharHeight;
-		sal_uInt16		mnFont;
-		sal_uInt16		mnAsianOrComplexFont;
-		sal_Int16		mnCharEscapement;
-
-		sal_uInt32		mnTextSize;
-		sal_Bool		mbLastPortion;
-
-		sal_uInt16*		mpText;
-		FieldEntry*		mpFieldEntry;
-
-						PortionObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > & rXTextRangeRef,
-										sal_Bool bLast, FontCollection& rFontCollection );
-						PortionObj( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSetRef,
-										FontCollection& rFontCollection );
-						PortionObj( PortionObj& rPortionObj );
-						~PortionObj();
-
-		void			Write( SvStream* pStrm, sal_Bool bLast );
-		sal_uInt32		Count() const { return mnTextSize; };
-
-		PortionObj&		operator=( PortionObj& rPortionObj );
-};
-
-struct ParaFlags
-{
-	sal_Bool	bFirstParagraph : 1;
-	sal_Bool	bLastParagraph	: 1;
-
-					ParaFlags() { bFirstParagraph = TRUE; bLastParagraph = FALSE; };
-};
-
-class ParagraphObj : public List, public PropStateValue, public SOParagraph
-{
-	friend class TextObj;
-	friend struct PPTExParaSheet;
-
-		MapMode			maMapModeSrc;
-		MapMode			maMapModeDest;
-
-	protected :
-
-		void			ImplConstruct( ParagraphObj& rParagraphObj );
-		void			ImplClear();
-		sal_uInt32		ImplCalculateTextPositions( sal_uInt32 nCurrentTextPosition );
-		::com::sun::star::awt::Size			ImplMapSize( const ::com::sun::star::awt::Size& rSize );
-		void			ImplGetParagraphValues( PPTExBulletProvider& rBuProv, sal_Bool bGetPropStateValue = FALSE );
-		void			ImplGetNumberingLevel( PPTExBulletProvider& rBuProv, sal_Int16 nDepth, sal_Bool bIsBullet, sal_Bool bGetPropStateValue = FALSE );
-
-	public :
-
-		::com::sun::star::uno::Sequence< ::com::sun::star::style::TabStop > maTabStop;
-
-		sal_uInt32			mnTextSize;
-
-		sal_Bool			mbIsBullet;
-		sal_Bool			mbFirstParagraph;
-		sal_Bool			mbLastParagraph;
-
-		::com::sun::star::beans::PropertyState	meBullet;
-		::com::sun::star::beans::PropertyState	meTextAdjust;
-		::com::sun::star::beans::PropertyState	meLineSpacing;
-		::com::sun::star::beans::PropertyState	meLineSpacingTop;
-		::com::sun::star::beans::PropertyState	meLineSpacingBottom;
-		::com::sun::star::beans::PropertyState	meForbiddenRules;
-		::com::sun::star::beans::PropertyState	meParagraphPunctation;
-		::com::sun::star::beans::PropertyState	meBiDi;
-
-		sal_uInt16								mnTextAdjust;
-		sal_Int16								mnLineSpacing;
-        sal_Bool								mbFixedLineSpacing;
-		sal_Int16								mnLineSpacingTop;
-		sal_Int16								mnLineSpacingBottom;
-        sal_Bool								mbForbiddenRules;
-        sal_Bool								mbParagraphPunctation;
-		sal_uInt16								mnBiDi;
-
-						ParagraphObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextContent > & rXTextContentRef,
-							ParaFlags, FontCollection& rFontCollection,
-								PPTExBulletProvider& rBuProv );
-						ParagraphObj( ParagraphObj& rParargraphObj );
-						ParagraphObj( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSetRef,
-										PPTExBulletProvider& rBuProv );
-
-		void			CalculateGraphicBulletSize( sal_uInt16 nFontHeight );
-						~ParagraphObj();
-
-		void			Write( SvStream* pStrm );
-		sal_uInt32			Count() const { return mnTextSize; };
-
-		ParagraphObj&	operator=( ParagraphObj& rParagraphObj );
-};
-
-struct ImplTextObj
-{
-	sal_uInt32		mnRefCount;
-	sal_uInt32		mnTextSize;
-	int				mnInstance;
-	List*			mpList;
-	sal_Bool		mbHasExtendedBullets;
-	sal_Bool		mbFixedCellHeightUsed;
-
-					ImplTextObj( int nInstance );
-					~ImplTextObj();
-};
-
-class TextObj
-{
-		ImplTextObj*	mpImplTextObj;
-		void			ImplCalculateTextPositions();
-
-	public :
-						TextObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XSimpleText > &
-									rXText, int nInstance, FontCollection& rFontCollection, PPTExBulletProvider& rBuProv );
-						TextObj( TextObj& rTextObj );
-						~TextObj();
-
-		void			Write( SvStream* pStrm );
-
-		ParagraphObj*	First(){ return (ParagraphObj*)mpImplTextObj->mpList->First(); };
-		ParagraphObj*	Next(){ return(ParagraphObj*)mpImplTextObj->mpList->Next(); };
-		sal_uInt32		Count() const { return mpImplTextObj->mnTextSize; };
-		int				GetInstance() const { return mpImplTextObj->mnInstance; };
-		sal_Bool		HasExtendedBullets(){ return mpImplTextObj->mbHasExtendedBullets; };
-		void			WriteTextSpecInfo( SvStream* pStrm );
-
-		TextObj&		operator=( TextObj& rTextObj );
+    void			Write( SvStream* pStrm );
+    void			WriteTextSpecInfo( SvStream* pStrm );
 };
 
 // ------------------------------------------------------------------------
 struct CellBorder;
-class PPTWriter : public GroupTable, public PropValue, public PPTExBulletProvider
+class PPTWriter : public PPTWriterBase, public PPTExBulletProvider
 {
+        sal_uInt32                      mnCnvrtFlags;
 		sal_Bool						mbStatus;
 		sal_Bool						mbUseNewAnimations;
 		sal_uInt32						mnStatMaxValue;
 		sal_uInt32						mnLatestStatValue;
-		std::vector< PPTExStyleSheet* >	maStyleSheetList;
-		PPTExStyleSheet*				mpStyleSheet;
 
 		EscherGraphicProvider*			mpGraphicProvider;
-		Fraction						maFraction;
-		MapMode							maMapModeSrc;
-		MapMode							maMapModeDest;
-		::com::sun::star::awt::Size		maDestPageSize;
-		::com::sun::star::awt::Size		maNotesPageSize;
-		PageType						meLatestPageType;
 		List							maSlideNameList;
 
-		::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >					mXModel;
-		::com::sun::star::uno::Reference< ::com::sun::star::task::XStatusIndicator >		mXStatusIndicator;
-		::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPagesSupplier >	mXDrawPagesSupplier;
-		::com::sun::star::uno::Reference< ::com::sun::star::drawing::XMasterPagesSupplier >	mXMasterPagesSupplier;
-		::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPages	>			mXDrawPages;
-		::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >			mXDrawPage;
-		::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >			mXPagePropSet;
-	    ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >			mXBackgroundPropSet;
-		::com::sun::star::uno::Reference< ::com::sun::star::drawing::XShapes >  			mXShapes;
-		::com::sun::star::uno::Reference< ::com::sun::star::drawing::XShape	>				mXShape;
 		::com::sun::star::uno::Reference< ::com::sun::star::text::XSimpleText >				mXText;				// TextRef des globalen Text
 		::com::sun::star::uno::Reference< ::com::sun::star::text::XTextCursor >				mXCursor;
 		::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange >				mXCursorText;		// TextRef des Teilstuecks des Cursors
 		::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet	>			mXCursorPropSet;	// die Properties des Teilstueckes
 		::com::sun::star::uno::Reference< ::com::sun::star::text::XTextField >				mXTextField;
-		::com::sun::star::awt::Size			maSize;
-		::com::sun::star::awt::Point		maPosition;
-		Rectangle			maRect;
-		ByteString			mType;
-		sal_Bool			mbPresObj;
-		sal_Bool			mbEmptyPresObj;
-		sal_Bool			mbStatusIndicator;
-		sal_Int32			mnAngle;
 		sal_uInt32			mnTextStyle;
 
 		sal_Bool			mbFontIndependentLineSpacing;
@@ -744,8 +202,6 @@ class PPTWriter : public GroupTable, public PropValue, public PPTExBulletProvide
 		sal_uInt32			mnExEmbed;
 		SvMemoryStream*		mpExEmbed;
 
-		sal_uInt32			mnPages;			// anzahl einzelner Slides ( ohne masterpages & notes & handout )
-		sal_uInt32			mnMasterPages;		//
 		sal_uInt32			mnDrawings;			// anzahl Slides +  masterpages + notes +  handout
 		sal_uInt32			mnPagesWritten;
 		sal_uInt32			mnUniqueSlideIdentifier;
@@ -757,13 +213,10 @@ class PPTWriter : public GroupTable, public PropValue, public PPTExBulletProvide
 		sal_uInt32			mnShapeMasterTitle;
 		sal_uInt32			mnShapeMasterBody;
 
-		List				maTextRuleList;		// TextRuleEntry's
 		List				maHyperlink;
 
-		FontCollection			maFontCollection;
 		ppt::ExSoundCollection	maSoundCollection;
 	
-		PHLayout&			ImplGetLayout( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rXPropSet ) const;
 		void				ImplWriteExtParaHeader( SvMemoryStream& rSt, sal_uInt32 nRef, sal_uInt32 nInstance, sal_uInt32 nSlideId ); 
 		
 
@@ -778,29 +231,22 @@ class PPTWriter : public GroupTable, public PropValue, public PPTExBulletProvide
 
 	protected:
 
-		sal_Bool			ImplCreateDocumentSummaryInformation( sal_uInt32 nCnvrtFlags );
+		sal_Bool			ImplCreateDocumentSummaryInformation();
 		sal_Bool			ImplCreateCurrentUserStream();
 		void				ImplCreateHeaderFooterStrings( SvStream& rOut,
 								::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rXPagePropSet );
 		void				ImplCreateHeaderFooters( ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rXPagePropSet );
-		sal_Bool			ImplCreateDocument();
+		virtual sal_Bool	ImplCreateDocument();
 		sal_Bool			ImplCreateHyperBlob( SvMemoryStream& rStream );
 		sal_uInt32			ImplInsertBookmarkURL( const String& rBookmark, const sal_uInt32 nType,
 			const String& rStringVer0, const String& rStringVer1, const String& rStringVer2, const String& rStringVer3 );
-		sal_Bool			ImplCreateMaster( sal_uInt32 nPageNum );
-		sal_Bool			ImplCreateMainNotes();
-		sal_Bool			ImplCreateSlide( sal_uInt32 nPageNum );
+		virtual sal_Bool	ImplCreateMainNotes();
 		sal_Bool			ImplCreateNotes( sal_uInt32 nPageNum );
 		void				ImplWriteBackground( ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXBackgroundPropSet );
-		void				ImplWriteVBA( SvMemoryStream* pVBA );
-		void				ImplWriteOLE( sal_uInt32 nCnvrtFlags );
+		void				ImplWriteVBA();
+		void				ImplWriteOLE();
 		sal_Bool			ImplWriteAtomEnding();
 
-		sal_Bool			ImplInitSOIface();
-		sal_Bool			ImplSetCurrentStyleSheet( sal_uInt32 nPageNum );
-		sal_Bool			ImplGetPageByIndex( sal_uInt32 nIndex, PageType );
-		sal_Bool			ImplGetShapeByIndex( sal_uInt32 nIndex, sal_Bool bGroup = FALSE );
-		sal_uInt32			ImplGetMasterIndex( PageType ePageType );
 		void				ImplFlipBoundingBox( EscherPropertyContainer& rPropOpt );
 		sal_Bool			ImplGetText();
 		sal_Bool			ImplCreatePresentationPlaceholder( const sal_Bool bMaster, const PageType PageType,
@@ -814,7 +260,6 @@ class PPTWriter : public GroupTable, public PropValue, public PPTExBulletProvide
 								::com::sun::star::presentation::AnimationEffect eTextEffect,
 								sal_uInt16 nOrder );
 		void				ImplWriteClickAction( SvStream& rSt, ::com::sun::star::presentation::ClickAction eAction, sal_Bool bMediaClickAction );
-		sal_Bool			ImplGetStyleSheets();
 		void				ImplWriteParagraphs( SvStream& rOutStrm, TextObj& rTextObj );
 		void				ImplWritePortions( SvStream& rOutStrm, TextObj& rTextObj );
 		void				ImplWriteTextStyleAtom( SvStream& rOut, int nTextInstance, sal_uInt32 nAtomInstance,
@@ -831,13 +276,15 @@ class PPTWriter : public GroupTable, public PropValue, public PPTExBulletProvide
 		void				ImplCreateCellBorder( const CellBorder* pCellBorder, sal_Int32 nX1, sal_Int32 nY1, sal_Int32 nX2, sal_Int32 nY2 );
 		void				ImplCreateTable( com::sun::star::uno::Reference< com::sun::star::drawing::XShape >& rXShape, EscherSolverContainer& aSolverContainer,
 								EscherPropertyContainer& aPropOpt );
-		::com::sun::star::awt::Point		ImplMapPoint( const ::com::sun::star::awt::Point& );
-		::com::sun::star::awt::Size			ImplMapSize( const ::com::sun::star::awt::Size& );
-		Rectangle							ImplMapRectangle( const ::com::sun::star::awt::Rectangle& );
 
 		sal_Bool							ImplCloseDocument();		// die font-, hyper-, Soundliste wird geschrieben ..
 		void								ImplWriteCString( SvStream&, const String&, sal_uInt32 nInstance = 0 );
 
+        virtual void        ImplWriteSlide( sal_uInt32 nPageNum, sal_uInt32 nMasterID, sal_uInt16 nMode,
+                                            sal_Bool bHasBackground, ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXBackgroundPropSet );
+        virtual void        ImplWriteNotes( sal_uInt32 nPageNum );
+        virtual void        ImplWriteSlideMaster( sal_uInt32 nPageNum, ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXBackgroundPropSet );
+
 	public:
 								PPTWriter( SvStorageRef& rSvStorage,
 											::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel > & rModel,
@@ -847,6 +294,9 @@ class PPTWriter : public GroupTable, public PropValue, public PPTExBulletProvide
 								~PPTWriter();
 
 		sal_Bool				IsValid() const { return mbStatus; };
+
+        virtual void exportPPTPre();
+        virtual void exportPPTPost();
 };
 
 
diff --git sd/source/filter/eppt/epptbase.cxx sd/source/filter/eppt/epptbase.cxx
new file mode 100644
index 0000000..43ec8c0
--- /dev/null
+++ sd/source/filter/pptx/pptx-epptbase.cxx
@@ -0,0 +1,947 @@
+#include <com/sun/star/animations/TransitionType.hpp>
+#include <com/sun/star/animations/TransitionSubType.hpp>
+#include <com/sun/star/awt/FontDescriptor.hpp>
+#include <com/sun/star/awt/FontFamily.hpp>
+#include <com/sun/star/awt/FontPitch.hpp>
+#include <com/sun/star/container/XNamed.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <com/sun/star/presentation/XPresentationPage.hpp>
+#include <com/sun/star/text/XSimpleText.hpp>
+#include <com/sun/star/style/XStyle.hpp>
+#include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
+
+#include <cppuhelper/extract.hxx>
+#include <vcl/outdev.hxx>
+
+#include "epptbase.hxx"
+#include "epptdef.hxx"
+
+#ifdef DEBUG
+#define DBG(x) x
+#include <stdio.h>
+#else
+#define DBG(x)
+#endif
+
+using namespace ::com::sun::star;
+using namespace ::com::sun::star::animations;
+using namespace ::com::sun::star::awt::FontFamily;
+using namespace ::com::sun::star::awt::FontPitch;
+using namespace ::com::sun::star::presentation;
+
+using ::com::sun::star::awt::FontDescriptor;
+using ::com::sun::star::beans::XPropertySet;
+using ::com::sun::star::container::XNameAccess;
+using ::com::sun::star::container::XNamed;
+using ::com::sun::star::drawing::XDrawPagesSupplier;
+using ::com::sun::star::drawing::XMasterPagesSupplier;
+using ::com::sun::star::drawing::XShapes;
+using ::com::sun::star::drawing::XMasterPageTarget;
+using ::com::sun::star::drawing::XDrawPage;
+using ::com::sun::star::frame::XModel;
+using ::com::sun::star::style::XStyleFamiliesSupplier;
+using ::com::sun::star::style::XStyle;
+using ::com::sun::star::task::XStatusIndicator;
+using ::com::sun::star::text::XSimpleText;
+using ::com::sun::star::uno::Any;
+using ::com::sun::star::uno::Exception;
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::uno::UNO_QUERY;
+
+static PHLayout pPHLayout[EPP_LAYOUT_SIZE] =
+{
+	{ EPP_LAYOUT_TITLESLIDE,			{ 0x0d, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x10, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x14, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, TRUE, TRUE, TRUE },
+	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x0e, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x14, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_BLANCSLIDE,			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, FALSE, FALSE, FALSE },
+	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x0e, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x16, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x14, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x14, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x15, 0x0d, 0x0e, TRUE, FALSE, FALSE },
+	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x16, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x16, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x0e, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, FALSE, FALSE },
+	{ EPP_LAYOUT_RIGHTCOLUMN2ROWS,		{ 0x0d, 0x0e, 0x13, 0x13, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x13, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_2ROWSANDTITLE,			{ 0x0d, 0x13, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_LEFTCOLUMN2ROWS,		{ 0x0d, 0x13, 0x13, 0x0e, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_TOPROW2COLUMN,			{ 0x0d, 0x13, 0x13, 0x0e, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_2ROWSANDTITLE,			{ 0x0d, 0x0e, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_4OBJECTS,				{ 0x0d, 0x13, 0x13, 0x13, 0x13, 0x00, 0x00, 0x00 }, 0x13, 0x0d, 0x0e, TRUE, FALSE, FALSE },
+	{ EPP_LAYOUT_ONLYTITLE,				{ 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, TRUE, FALSE, FALSE },
+	{ EPP_LAYOUT_BLANCSLIDE,			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x0e, FALSE, FALSE, FALSE },
+	{ EPP_LAYOUT_TITLERIGHT2BODIESLEFT, { 0x11, 0x12, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x14, 0x11, 0x12, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_TITLERIGHTBODYLEFT,	{ 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x11, 0x12, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_TITLEANDBODYSLIDE,		{ 0x0d, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x00, 0x0d, 0x12, TRUE, TRUE, FALSE },
+	{ EPP_LAYOUT_2COLUMNSANDTITLE,		{ 0x0d, 0x16, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x16, 0x0d, 0x12, TRUE, TRUE, FALSE }
+};
+
+#define PPT_WRITER_BASE_INIT_VALUES \
+    maFraction              ( 1, 576 ), \
+    maMapModeSrc            ( MAP_100TH_MM ), \
+    maMapModeDest           ( MAP_INCH, Point(), maFraction, maFraction ), \
+    meLatestPageType        ( NORMAL )
+
+
+PPTWriterBase::PPTWriterBase() :
+    PPT_WRITER_BASE_INIT_VALUES
+{
+    DBG(printf ("PPTWriterBase::PPTWriterBase()\n"));
+}
+
+PPTWriterBase::PPTWriterBase( const Reference< XModel > & rXModel,
+                              const Reference< XStatusIndicator > & rXStatInd ) :
+    mXModel                 ( rXModel ),
+	mXStatusIndicator       ( rXStatInd ),
+	mbStatusIndicator       ( false ),
+    PPT_WRITER_BASE_INIT_VALUES
+{
+}
+
+// ---------------------------------------------------------------------------------------------
+
+PPTWriterBase::~PPTWriterBase()
+{
+    if ( mbStatusIndicator )
+        mXStatusIndicator->end();
+}
+
+// ---------------------------------------------------------------------------------------------
+
+void PPTWriterBase::exportPPT()
+{
+    if ( !InitSOIface() )
+        return;
+
+    FontCollectionEntry aDefaultFontDesc( String( RTL_CONSTASCII_USTRINGPARAM( "Times New Roman" ) ),
+                                          ROMAN,
+                                          awt::FontPitch::VARIABLE,
+                                                    RTL_TEXTENCODING_MS_1252 );
+    maFontCollection.GetId( aDefaultFontDesc ); // default is always times new roman
+
+    if ( !GetPageByIndex( 0, NOTICE ) )
+        return;
+
+    INT32 nWidth = 21000;
+    if ( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM(  "Width" ) ) ) )
+        mAny >>= nWidth;
+    INT32 nHeight = 29700;
+    if ( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Height" ) ) ) )
+        mAny >>= nHeight;
+
+    maNotesPageSize = MapSize( awt::Size( nWidth, nHeight ) );
+
+    if ( !GetPageByIndex( 0, MASTER ) )
+        return;
+
+    nWidth = 28000;
+    if ( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Width" ) ) ) )
+        mAny >>= nWidth;
+    nHeight = 21000;
+    if ( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Height" ) ) ) )
+        mAny >>= nHeight;
+    maDestPageSize = MapSize( awt::Size( nWidth, nHeight ) );
+
+    DBG(printf( "call exportDocumentPre()\n"));
+    exportPPTPre();
+
+    if ( !GetStyleSheets() )
+        return;
+
+    if ( !ImplCreateDocument() )
+         return;
+
+    sal_uInt32 i;
+
+    for ( i = 0; i < mnPages; i++ )
+    {
+	if ( GetPageByIndex( i, NORMAL ) ) {
+	    sal_uInt32 nMasterNum = GetMasterIndex( NORMAL );
+	    ImplWriteLayout( GetLayoutOffset( mXPagePropSet ), nMasterNum );
+	}
+    }
+
+    for ( i = 0; i < mnMasterPages; i++ )
+    {
+        if ( !CreateSlideMaster( i ) )
+            return;
+    }
+ 	if ( !CreateMainNotes() )
+ 		return;
+    maTextRuleList.First();                         // rewind list, so we can get the current or next entry without
+                                                    // searching, all entrys are sorted#
+    for ( i = 0; i < mnPages; i++ )
+    {
+        DBG(printf( "call ImplCreateSlide( %d )\n", i));
+        if ( !CreateSlide( i ) )
+            return;
+    }
+
+    for ( i = 0; i < mnPages; i++ )
+    {
+        if ( !CreateNotes( i ) )
+            return;
+    }
+
+    DBG(printf( "call exportDocumentPost()\n"));
+    exportPPTPost();
+}
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::InitSOIface()
+{
+    while( TRUE )
+    {
+        mXDrawPagesSupplier = Reference< XDrawPagesSupplier >( mXModel, UNO_QUERY );
+        if ( !mXDrawPagesSupplier.is() )
+            break;
+
+        mXMasterPagesSupplier = Reference< XMasterPagesSupplier >( mXModel, UNO_QUERY );
+        if ( !mXMasterPagesSupplier.is() )
+            break;
+        mXDrawPages = mXMasterPagesSupplier->getMasterPages();
+        if ( !mXDrawPages.is() )
+            break;
+        mnMasterPages = mXDrawPages->getCount();
+        mXDrawPages = mXDrawPagesSupplier->getDrawPages();
+        if( !mXDrawPages.is() )
+            break;
+        mnPages =  mXDrawPages->getCount();
+        if ( !GetPageByIndex( 0, NORMAL ) )
+            break;
+
+        return TRUE;
+    }
+    return FALSE;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::GetPageByIndex( sal_uInt32 nIndex, PageType ePageType )
+{
+    while( TRUE )
+    {
+        if ( ePageType != meLatestPageType )
+        {
+            switch( ePageType )
+            {
+                case NORMAL :
+                case NOTICE :
+                {
+                    mXDrawPages = mXDrawPagesSupplier->getDrawPages();
+                    if( !mXDrawPages.is() )
+                        return FALSE;
+                }
+                break;
+
+                case MASTER :
+                {
+                    mXDrawPages = mXMasterPagesSupplier->getMasterPages();
+                    if( !mXDrawPages.is() )
+                        return FALSE;
+                }
+                break;
+				default:
+					break;
+            }
+            meLatestPageType = ePageType;
+        }
+        Any aAny( mXDrawPages->getByIndex( nIndex ) );
+        aAny >>= mXDrawPage;
+        if ( !mXDrawPage.is() )
+            break;
+        if ( ePageType == NOTICE )
+        {
+            Reference< XPresentationPage > aXPresentationPage( mXDrawPage, UNO_QUERY );
+            if ( !aXPresentationPage.is() )
+                break;
+            mXDrawPage = aXPresentationPage->getNotesPage();
+            if ( !mXDrawPage.is() )
+                break;
+        }
+        mXPagePropSet = Reference< XPropertySet >( mXDrawPage, UNO_QUERY );
+        if ( !mXPagePropSet.is() )
+            break;
+
+        mXShapes = Reference< XShapes >( mXDrawPage, UNO_QUERY );
+        if ( !mXShapes.is() )
+            break;
+
+		/* try to get the "real" background PropertySet. If the normal page is not supporting this property, it is
+		   taken the property from the master */
+		sal_Bool bHasBackground = GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ), sal_True );
+		if ( bHasBackground )
+			bHasBackground = ( aAny >>= mXBackgroundPropSet );
+		if ( !bHasBackground )
+		{
+		    Reference< XMasterPageTarget > aXMasterPageTarget( mXDrawPage, UNO_QUERY );
+		    if ( aXMasterPageTarget.is() )
+			{
+				Reference< XDrawPage > aXMasterDrawPage;
+				aXMasterDrawPage = aXMasterPageTarget->getMasterPage();
+				if ( aXMasterDrawPage.is() )
+				{
+					Reference< XPropertySet > aXMasterPagePropSet;
+					aXMasterPagePropSet = Reference< XPropertySet >
+						( aXMasterDrawPage, UNO_QUERY );
+					if ( aXMasterPagePropSet.is() )
+					{
+						sal_Bool bBackground = GetPropertyValue( aAny, aXMasterPagePropSet,
+								String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ) );
+						if ( bBackground )
+						{
+							aAny >>= mXBackgroundPropSet;
+						}
+					}
+				}
+			}
+		}
+        return TRUE;
+    }
+    return FALSE;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::CreateSlide( sal_uInt32 nPageNum )
+{
+    Any aAny;
+
+    if ( !GetPageByIndex( nPageNum, NORMAL ) )
+        return FALSE;
+
+    sal_uInt32 nMasterNum = GetMasterIndex( NORMAL );
+ 	SetCurrentStyleSheet( nMasterNum );
+
+    Reference< XPropertySet > aXBackgroundPropSet;
+    sal_Bool bHasBackground = GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ) );
+    if ( bHasBackground )
+        bHasBackground = ( aAny >>= aXBackgroundPropSet );
+
+	sal_uInt16 nMode = 7;   // Bit 1: Follow master objects, Bit 2: Follow master scheme, Bit 3: Follow master background
+	if ( bHasBackground )
+		nMode &=~4;
+
+/* sj: Don't know what's IsBackgroundVisible for, have to ask cl
+	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsBackgroundVisible" ) ) ) )
+	{
+		sal_Bool bBackgroundVisible;
+        if ( aAny >>= bBackgroundVisible )
+		{
+			if ( bBackgroundVisible )
+				nMode &= ~4;
+		}
+	}
+*/
+	if ( GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsBackgroundObjectsVisible" ) ) ) )
+	{
+		sal_Bool bBackgroundObjectsVisible = sal_False;
+        if ( aAny >>= bBackgroundObjectsVisible )
+		{
+			if ( !bBackgroundObjectsVisible )
+				nMode &= ~1;
+		}
+	}
+
+    ImplWriteSlide( nPageNum, nMasterNum, nMode, bHasBackground, aXBackgroundPropSet );
+
+    return TRUE;
+};
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::CreateNotes( sal_uInt32 nPageNum )
+{
+    if ( !GetPageByIndex( nPageNum, NOTICE ) )
+        return FALSE;
+    SetCurrentStyleSheet( GetMasterIndex( NORMAL ) );
+
+    ImplWriteNotes( nPageNum );
+
+    return TRUE;
+};
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::CreateSlideMaster( sal_uInt32 nPageNum )
+{
+    if ( !GetPageByIndex( nPageNum, MASTER ) )
+        return FALSE;
+    SetCurrentStyleSheet( nPageNum );
+
+    if ( !ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ) ) )                // Backgroundshape laden
+        return FALSE;
+    ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXBackgroundPropSet;
+    if ( !( mAny >>= aXBackgroundPropSet ) )
+        return FALSE;
+
+    ImplWriteSlideMaster( nPageNum, aXBackgroundPropSet );
+
+    return TRUE;
+};
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Int32 PPTWriterBase::GetLayoutOffset( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rXPropSet ) const
+{
+    ::com::sun::star::uno::Any aAny;
+    sal_Int32 nLayout = 20;
+    if ( GetPropertyValue( aAny, rXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Layout" ) ) ), sal_True )
+        aAny >>= nLayout;
+
+    if ( ( nLayout >= 21 ) && ( nLayout <= 26 ) )   // NOTES _> HANDOUT6
+        nLayout = 20;
+    if ( ( nLayout >= 27 ) && ( nLayout <= 30 ) )   // VERTICAL LAYOUT
+        nLayout -= 6;
+    else if ( nLayout > 30 )
+        nLayout = 20;
+
+    return nLayout;
+}
+
+PHLayout& PPTWriterBase::GetLayout(  const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rXPropSet ) const
+{
+    return pPHLayout[ GetLayoutOffset( rXPropSet ) ];
+}
+
+// ---------------------------------------------------------------------------------------------
+
+PHLayout& PPTWriterBase::GetLayout( sal_Int32 nOffset ) const
+{
+    if( nOffset >= 0 && nOffset < EPP_LAYOUT_SIZE )
+        return pPHLayout[ nOffset ];
+
+    DBG(printf("asked %d for layout outside of 0,%d array scope\n", nOffset, EPP_LAYOUT_SIZE ));
+
+    return pPHLayout[ 0 ];
+}
+
+// ---------------------------------------------------------------------------------------------
+
+sal_uInt32 PPTWriterBase::GetMasterIndex( PageType ePageType )
+{
+    sal_uInt32 nRetValue = 0;
+    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XMasterPageTarget >
+        aXMasterPageTarget( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
+
+    if ( aXMasterPageTarget.is() )
+    {
+        ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >
+            aXDrawPage = aXMasterPageTarget->getMasterPage();
+        if ( aXDrawPage.is() )
+        {
+            ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
+                aXPropertySet( aXDrawPage, ::com::sun::star::uno::UNO_QUERY );
+
+            if ( aXPropertySet.is() )
+            {
+                if ( ImplGetPropertyValue( aXPropertySet, String( RTL_CONSTASCII_USTRINGPARAM( "Number" ) ) ) )
+                    nRetValue |= *(sal_Int16*)mAny.getValue();
+                if ( nRetValue & 0xffff )           // ueberlauf vermeiden
+                    nRetValue--;
+            }
+        }
+    }
+    if ( ePageType == NOTICE )
+        nRetValue += mnMasterPages;
+    return nRetValue;
+}
+
+//  -----------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::SetCurrentStyleSheet( sal_uInt32 nPageNum )
+{
+	sal_Bool bRet = sal_False;
+	if ( nPageNum >= maStyleSheetList.size() )
+		nPageNum = 0;
+	else
+		bRet = sal_True;
+	mpStyleSheet = maStyleSheetList[ nPageNum ];
+	return bRet;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::GetStyleSheets()
+{
+    int             nInstance, nLevel;
+    sal_Bool        bRetValue = sal_False;
+	sal_uInt32		nPageNum;
+
+	for ( nPageNum = 0; nPageNum < mnMasterPages; nPageNum++ )
+	{
+		Reference< XNamed >
+			aXNamed;
+
+		Reference< XNameAccess >
+			aXNameAccess;
+
+		Reference< XStyleFamiliesSupplier >
+			aXStyleFamiliesSupplier( mXModel, UNO_QUERY );
+
+		Reference< XPropertySet >
+			aXPropSet( mXModel, UNO_QUERY );
+
+		sal_uInt16 nDefaultTab = ( aXPropSet.is() && ImplGetPropertyValue( aXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "TabStop" ) ) ) )
+			? (sal_uInt16)( *(sal_Int32*)mAny.getValue() / 4.40972 )
+			: 1250;
+
+		maStyleSheetList.push_back( new PPTExStyleSheet( nDefaultTab, (PPTExBulletProvider&)*this ) );
+		SetCurrentStyleSheet( nPageNum );
+		if ( GetPageByIndex( nPageNum, MASTER ) )
+			aXNamed = Reference< XNamed >
+						( mXDrawPage, UNO_QUERY );
+
+		if ( aXStyleFamiliesSupplier.is() )
+			aXNameAccess = aXStyleFamiliesSupplier->getStyleFamilies();
+
+		bRetValue = aXNamed.is() && aXNameAccess.is() && aXStyleFamiliesSupplier.is();
+		if  ( bRetValue )
+		{
+			for ( nInstance = EPP_TEXTTYPE_Title; nInstance <= EPP_TEXTTYPE_CenterTitle; nInstance++ )
+			{
+				String aStyle;
+				String aFamily;
+				switch ( nInstance )
+				{
+					case EPP_TEXTTYPE_CenterTitle :
+					case EPP_TEXTTYPE_Title :
+					{
+						aStyle = String( RTL_CONSTASCII_USTRINGPARAM( "title" ) );
+						aFamily = aXNamed->getName();
+					}
+					break;
+					case EPP_TEXTTYPE_Body :
+					{
+						aStyle = String( RTL_CONSTASCII_USTRINGPARAM( "outline1" ) );      // SD_LT_SEPARATOR
+						aFamily = aXNamed->getName();
+					}
+					break;
+					case EPP_TEXTTYPE_Other :
+					{
+						aStyle = String( RTL_CONSTASCII_USTRINGPARAM( "standard" ) );
+						aFamily = String( RTL_CONSTASCII_USTRINGPARAM( "graphics" ) );
+					}
+					break;
+					case EPP_TEXTTYPE_CenterBody :
+					{
+						aStyle = String( RTL_CONSTASCII_USTRINGPARAM( "subtitle" ) );
+						aFamily = aXNamed->getName();
+					}
+					break;
+				}
+				if ( aStyle.Len() && aFamily.Len() )
+				{
+					try
+					{
+						Reference< XNameAccess >xNameAccess;
+						if ( aXNameAccess->hasByName( aFamily ) )
+						{
+							Any aAny( aXNameAccess->getByName( aFamily ) );
+							if( aAny.getValue() && ::cppu::extractInterface( xNameAccess, aAny ) )
+							{
+								Reference< XNameAccess > aXFamily;
+								if ( aAny >>= aXFamily )
+								{
+									if ( aXFamily->hasByName( aStyle ) )
+									{
+										Reference< XStyle > xStyle;
+										aAny = aXFamily->getByName( aStyle );
+										if( aAny.getValue() && ::cppu::extractInterface( xStyle, aAny ) )
+										{
+											Reference< XStyle > aXStyle;
+											aAny >>= aXStyle;
+											Reference< XPropertySet >
+												xPropSet( aXStyle, UNO_QUERY );
+											if( xPropSet.is() )
+												mpStyleSheet->SetStyleSheet( xPropSet, maFontCollection, nInstance, 0 );
+											for ( nLevel = 1; nLevel < 5; nLevel++ )
+											{
+												if ( nInstance == EPP_TEXTTYPE_Body )
+												{
+													sal_Unicode cTemp = aStyle.GetChar( aStyle.Len() - 1 );
+													aStyle.SetChar( aStyle.Len() - 1, ++cTemp );
+													if ( aXFamily->hasByName( aStyle ) )
+													{
+														aXFamily->getByName( aStyle ) >>= xStyle;
+														if( xStyle.is() )
+														{
+															Reference< XPropertySet >
+																xPropertySet( xStyle, UNO_QUERY );
+															if ( xPropertySet.is() )
+																mpStyleSheet->SetStyleSheet( xPropertySet, maFontCollection, nInstance, nLevel );
+														}
+													}
+												}
+												else
+													mpStyleSheet->SetStyleSheet( xPropSet, maFontCollection, nInstance, nLevel );
+											}
+										}
+									}
+								}
+							}
+						}
+					}
+					catch( Exception& )
+					{
+					//
+					}
+				}
+			}
+			for ( ; nInstance <= EPP_TEXTTYPE_QuarterBody; nInstance++ )
+			{
+
+			}
+		}
+	}
+    return bRetValue;
+}
+
+//  -----------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::CreateMainNotes()
+{
+    if ( !GetPageByIndex( 0, NOTICE ) )
+        return FALSE;
+	SetCurrentStyleSheet( 0 );
+
+    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XMasterPageTarget >
+        aXMasterPageTarget( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
+
+    if ( !aXMasterPageTarget.is() )
+        return FALSE;
+
+    mXDrawPage = aXMasterPageTarget->getMasterPage();
+    if ( !mXDrawPage.is() )
+        return FALSE;
+
+    mXPropSet = ::com::sun::star::uno::Reference<
+        ::com::sun::star::beans::XPropertySet >
+            ( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
+    if ( !mXPropSet.is() )
+        return FALSE;
+
+    mXShapes = ::com::sun::star::uno::Reference<
+        ::com::sun::star::drawing::XShapes >
+            ( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
+    if ( !mXShapes.is() )
+        return FALSE;
+
+    return ImplCreateMainNotes();
+}
+
+//  -----------------------------------------------------------------------
+
+awt::Size PPTWriterBase::MapSize( const awt::Size& rSize )
+{
+    Size aRetSize( OutputDevice::LogicToLogic( Size( rSize.Width, rSize.Height ), maMapModeSrc, maMapModeDest ) );
+
+    if ( !aRetSize.Width() )
+        aRetSize.Width()++;
+    if ( !aRetSize.Height() )
+        aRetSize.Height()++;
+    return awt::Size( aRetSize.Width(), aRetSize.Height() );
+}
+
+//  -----------------------------------------------------------------------
+
+awt::Point PPTWriterBase::MapPoint( const awt::Point& rPoint )
+{
+    Point aRet( OutputDevice::LogicToLogic( Point( rPoint.X, rPoint.Y ), maMapModeSrc, maMapModeDest ) );
+    return awt::Point( aRet.X(), aRet.Y() );
+}
+
+//  -----------------------------------------------------------------------
+
+Rectangle PPTWriterBase::MapRectangle( const awt::Rectangle& rRect )
+{
+    ::com::sun::star::awt::Point    aPoint( rRect.X, rRect.Y );
+    ::com::sun::star::awt::Size     aSize( rRect.Width, rRect.Height );
+    ::com::sun::star::awt::Point    aP( MapPoint( aPoint ) );
+    ::com::sun::star::awt::Size     aS( MapSize( aSize ) );
+    return Rectangle( Point( aP.X, aP.Y ), Size( aS.Width, aS.Height ) );
+}
+
+
+//  -----------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::GetShapeByIndex( sal_uInt32 nIndex, sal_Bool bGroup )
+{
+    while(TRUE)
+    {
+        if (  ( bGroup == FALSE ) || ( GetCurrentGroupLevel() == 0 ) )
+        {
+            Any aAny( mXShapes->getByIndex( nIndex ) );
+            aAny >>= mXShape;
+        }
+        else
+        {
+            Any aAny( GetCurrentGroupAccess()->getByIndex( GetCurrentGroupIndex() ) );
+            aAny >>= mXShape;
+        }
+        if ( !mXShape.is() )
+            break;
+
+        Any aAny( mXShape->queryInterface( ::getCppuType( (const Reference< XPropertySet >*) 0 ) ));
+        aAny >>= mXPropSet;
+
+        if ( !mXPropSet.is() )
+            break;
+        maPosition = MapPoint( mXShape->getPosition() );
+        maSize = MapSize( mXShape->getSize() );
+        maRect = Rectangle( Point( maPosition.X, maPosition.Y ), Size( maSize.Width, maSize.Height ) );
+        mType = ByteString( String( mXShape->getShapeType() ), RTL_TEXTENCODING_UTF8 );
+        mType.Erase( 0, 13 );                                   // "com.sun.star." entfernen
+        sal_uInt16 nPos = mType.Search( (const char*)"Shape" );
+        mType.Erase( nPos, 5 );
+
+        mbPresObj = mbEmptyPresObj = FALSE;
+        if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "IsPresentationObject" ) ) ) )
+            mAny >>= mbPresObj;
+
+        if ( mbPresObj && ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "IsEmptyPresentationObject" ) ) ) )
+            mAny >>= mbEmptyPresObj;
+
+        mnAngle = ( PropValue::GetPropertyValue( aAny,
+            mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "RotateAngle" ) ), sal_True ) )
+                ? *((sal_Int32*)aAny.getValue() )
+                : 0;
+
+        return TRUE;
+    }
+    return FALSE;
+}
+
+//  -----------------------------------------------------------------------
+
+sal_Int8 PPTWriterBase::GetTransition( sal_Int16 nTransitionType, sal_Int16 nTransitionSubtype, FadeEffect eEffect, sal_uInt8& nDirection )
+{
+    sal_Int8 nPPTTransitionType = 0;
+    nDirection = 0;
+
+    switch( nTransitionType )
+    {
+	case TransitionType::FADE :
+	{
+	    if ( nTransitionSubtype == TransitionSubType::CROSSFADE )
+		nPPTTransitionType = PPT_TRANSITION_TYPE_SMOOTHFADE;
+	    else if ( nTransitionSubtype == TransitionSubType::FADEOVERCOLOR )
+		nPPTTransitionType = PPT_TRANSITION_TYPE_FADE;
+	}
+	break;
+	case PPT_TRANSITION_TYPE_COMB :
+	{
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_COMB;
+	    if ( nTransitionSubtype == TransitionSubType::COMBVERTICAL )
+		nDirection++;
+	}
+	break;
+	case TransitionType::PUSHWIPE :
+	{
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_PUSH;
+	    switch( nTransitionSubtype )
+	    {
+		case TransitionSubType::FROMRIGHT: nDirection = 0; break;
+		case TransitionSubType::FROMBOTTOM: nDirection = 1; break;
+		case TransitionSubType::FROMLEFT: nDirection = 2; break;
+		case TransitionSubType::FROMTOP: nDirection = 3; break;
+	    }
+	}
+	break;
+	case TransitionType::PINWHEELWIPE : 
+	{
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_WHEEL;
+	    switch( nTransitionSubtype )
+	    {
+		case TransitionSubType::ONEBLADE: nDirection = 1; break;
+		case TransitionSubType::TWOBLADEVERTICAL : nDirection = 2; break;
+		case TransitionSubType::THREEBLADE : nDirection = 3; break;
+		case TransitionSubType::FOURBLADE: nDirection = 4; break;
+		case TransitionSubType::EIGHTBLADE: nDirection = 8; break;
+	    }
+	}
+	break;
+	case TransitionType::FANWIPE :
+	{
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_WEDGE;
+	}
+	break;
+	case TransitionType::ELLIPSEWIPE :
+	{
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_CIRCLE;
+	}
+	break;
+	case TransitionType::FOURBOXWIPE :
+	{
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_PLUS;
+	}
+	break;
+	case TransitionType::IRISWIPE :
+	{
+	    switch( nTransitionSubtype ) {
+		case TransitionSubType::RECTANGLE:
+		    nPPTTransitionType = PPT_TRANSITION_TYPE_ZOOM;
+		    nDirection = (eEffect == FadeEffect_FADE_FROM_CENTER) ? 0 : 1;
+		    break;
+		default:
+		    nPPTTransitionType = PPT_TRANSITION_TYPE_DIAMOND;
+		    break;
+	    }
+	}
+	break;
+    }
+
+    return nPPTTransitionType;
+}
+
+sal_Int8 PPTWriterBase::GetTransition( FadeEffect eEffect, sal_uInt8& nDirection )
+{
+    sal_Int8 nPPTTransitionType = 0;
+
+    switch ( eEffect )
+    {
+	default :
+	case FadeEffect_RANDOM :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_RANDOM;
+	    break;
+
+	case FadeEffect_HORIZONTAL_STRIPES :
+	    nDirection++;
+	case FadeEffect_VERTICAL_STRIPES :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_BLINDS;
+	    break;
+
+	case FadeEffect_VERTICAL_CHECKERBOARD :
+	    nDirection++;
+	case FadeEffect_HORIZONTAL_CHECKERBOARD :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_CHECKER;
+	    break;
+
+	case FadeEffect_MOVE_FROM_UPPERLEFT :
+	    nDirection++;
+	case FadeEffect_MOVE_FROM_UPPERRIGHT :
+	    nDirection++;
+	case FadeEffect_MOVE_FROM_LOWERLEFT :
+	    nDirection++;
+	case FadeEffect_MOVE_FROM_LOWERRIGHT :
+	    nDirection++;
+	case FadeEffect_MOVE_FROM_TOP :
+	    nDirection++;
+	case FadeEffect_MOVE_FROM_LEFT :
+	    nDirection++;
+	case FadeEffect_MOVE_FROM_BOTTOM :
+	    nDirection++;
+	case FadeEffect_MOVE_FROM_RIGHT :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_COVER;
+	    break;
+
+	case FadeEffect_DISSOLVE :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_DISSOLVE;
+	    break;
+
+	case FadeEffect_VERTICAL_LINES :
+	    nDirection++;
+	case FadeEffect_HORIZONTAL_LINES :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_RANDOM_BARS;
+	    break;
+
+	case FadeEffect_CLOSE_HORIZONTAL :
+	    nDirection++;
+	case FadeEffect_OPEN_HORIZONTAL :
+	    nDirection++;
+	case FadeEffect_CLOSE_VERTICAL :
+	    nDirection++;
+	case FadeEffect_OPEN_VERTICAL :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_SPLIT;
+	    break;
+
+	case FadeEffect_FADE_FROM_UPPERLEFT :
+	    nDirection++;
+	case FadeEffect_FADE_FROM_UPPERRIGHT :
+	    nDirection++;
+	case FadeEffect_FADE_FROM_LOWERLEFT :
+	    nDirection++;
+	case FadeEffect_FADE_FROM_LOWERRIGHT :
+	    nDirection += 4;
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_STRIPS;
+	    break;
+
+	case FadeEffect_UNCOVER_TO_LOWERRIGHT :
+	    nDirection++;
+	case FadeEffect_UNCOVER_TO_LOWERLEFT :
+	    nDirection++;
+	case FadeEffect_UNCOVER_TO_UPPERRIGHT :
+	    nDirection++;
+	case FadeEffect_UNCOVER_TO_UPPERLEFT :
+	    nDirection++;
+	case FadeEffect_UNCOVER_TO_BOTTOM :
+	    nDirection++;
+	case FadeEffect_UNCOVER_TO_RIGHT :
+	    nDirection++;
+	case FadeEffect_UNCOVER_TO_TOP :
+	    nDirection++;
+	case FadeEffect_UNCOVER_TO_LEFT :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_PULL;
+	    break;
+
+	case FadeEffect_FADE_FROM_TOP :
+	    nDirection++;
+	case FadeEffect_FADE_FROM_LEFT :
+	    nDirection++;
+	case FadeEffect_FADE_FROM_BOTTOM :
+	    nDirection++;
+	case FadeEffect_FADE_FROM_RIGHT :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_WIPE;
+	    break;
+
+	case FadeEffect_ROLL_FROM_TOP :
+	    nDirection++;
+	case FadeEffect_ROLL_FROM_LEFT :
+	    nDirection++;
+	case FadeEffect_ROLL_FROM_BOTTOM :
+	    nDirection++;
+	case FadeEffect_ROLL_FROM_RIGHT :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_WIPE;
+	    break;
+
+	case FadeEffect_FADE_TO_CENTER :
+	    nDirection++;
+	case FadeEffect_FADE_FROM_CENTER :
+	    nPPTTransitionType = PPT_TRANSITION_TYPE_ZOOM;
+	    break;
+
+	case FadeEffect_NONE :
+	    nDirection = 2;
+	    break;
+    }
+
+    return nPPTTransitionType;
+}
+
+//  -----------------------------------------------------------------------
+
+sal_Bool PPTWriterBase::ContainsOtherShapeThanPlaceholders( sal_Bool bForOOMLX )
+{
+    sal_uInt32 nShapes = mXShapes->getCount();
+    sal_Bool bOtherThanPlaceHolders = FALSE;
+
+    if ( nShapes )
+	for ( sal_uInt32 nIndex = 0; ( nIndex < nShapes ) && ( bOtherThanPlaceHolders == FALSE ); nIndex++ ) {
+	    if ( GetShapeByIndex( nIndex ) && mType != "drawing.Page" ) {
+		if( bForOOMLX &&
+		    ( mType == "presentation.Page" ||
+		      mType == "presentation.Notes" ) ) {
+		    Reference< XSimpleText > rXText( mXShape, UNO_QUERY );
+
+		    if( rXText.is() && rXText->getString().getLength() != 0 )
+			bOtherThanPlaceHolders = TRUE;
+		} else
+		    bOtherThanPlaceHolders = TRUE;
+	    }
+	    DBG(printf("mType == %s\n", mType.GetBuffer()));
+	}
+
+    return bOtherThanPlaceHolders;
+}
diff --git sd/source/filter/eppt/epptbase.hxx sd/source/filter/eppt/epptbase.hxx
new file mode 100644
index 0000000..ba5eca6
--- /dev/null
+++ sd/source/filter/pptx/epptbase.hxx
@@ -0,0 +1,411 @@
+#ifndef EPP_EPPTBASE_HXX
+#define EPP_EPPTBASE_HXX
+
+#include "grouptable.hxx"
+#include <vector>
+#include <vcl/mapmod.hxx>
+#include <tools/list.hxx>
+#include <tools/string.hxx>
+#include <tools/stream.hxx>
+#include <tools/gen.hxx>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/drawing/XDrawPagesSupplier.hpp>
+#include <com/sun/star/drawing/XMasterPagesSupplier.hpp>
+#include <com/sun/star/drawing/XMasterPageTarget.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/presentation/XPresentationSupplier.hpp>
+#include <com/sun/star/presentation/FadeEffect.hpp>
+#include <com/sun/star/task/XStatusIndicatorSupplier.hpp>
+
+// PLACEMENT_ID
+#define EPP_LAYOUT_TITLESLIDE             0 /* The slide is a title slide                                                             */
+#define EPP_LAYOUT_TITLEANDBODYSLIDE      1 /* Title and body slide                                                                   */
+#define EPP_LAYOUT_TITLEMASTERSLIDE       2 /* Title master slide                                                                     */
+#define	EPP_LAYOUT_MASTERSLIDE            3 /* Master slide layout                                                                    */
+#define EPP_LAYOUT_MASTERNOTES            4 /* Master notes layout                                                                    */
+#define EPP_LAYOUT_NOTESTITLEBODY         5 /* Notes title/body layout                                                                */
+#define EPP_LAYOUT_HANDOUTLAYOUT          6 /* Handout layout, therefore it doesn't have placeholders except header, footer, and date */
+#define EPP_LAYOUT_ONLYTITLE              7 /* Only title placeholder                                                                 */
+#define EPP_LAYOUT_2COLUMNSANDTITLE       8 /* Body of the slide has 2 columns and a title                                            */
+#define EPP_LAYOUT_2ROWSANDTITLE          9 /* Slide's body has 2 rows and a title                                                    */
+#define EPP_LAYOUT_RIGHTCOLUMN2ROWS      10 /* Body contains 2 columns, right column has 2 rows                                       */
+#define EPP_LAYOUT_LEFTCOLUMN2ROWS       11 /* Body contains 2 columns, left column has 2 rows                                        */
+#define EPP_LAYOUT_BOTTOMROW2COLUMNS     12 /* Body contains 2 rows, bottom row has 2 columns                                         */
+#define EPP_LAYOUT_TOPROW2COLUMN         13 /* Body contains 2 rows, top row has 2 columns                                            */
+#define EPP_LAYOUT_4OBJECTS              14 /* 4 objects                                                                              */
+#define EPP_LAYOUT_BIGOBJECT             15 /* Big object                                                                             */
+#define EPP_LAYOUT_BLANCSLIDE            16 /* Blank slide                                                                            */
+#define EPP_LAYOUT_TITLERIGHTBODYLEFT    17 /* Vertical title on the right, body on the left                                          */
+#define EPP_LAYOUT_TITLERIGHT2BODIESLEFT 18 /* Vertical title on the right, body on the left split into 2 rows                        */
+
+#define EPP_LAYOUT_SIZE 25
+
+class PptEscherEx;
+
+struct PHLayout
+{
+	sal_Int32	nLayout;
+	sal_uInt8	nPlaceHolder[ 8 ];
+
+	sal_uInt8	nUsedObjectPlaceHolder;
+	sal_uInt8	nTypeOfTitle;
+	sal_uInt8	nTypeOfOutliner;
+
+	BOOL	bTitlePossible;
+	BOOL	bOutlinerPossible;
+	BOOL	bSecOutlinerPossible;
+};
+
+enum PageType { NORMAL = 0, MASTER = 1, NOTICE = 2, UNDEFINED = 3 };
+
+class PropValue
+{
+	protected :
+
+		::com::sun::star::uno::Any								mAny;
+
+		::com::sun::star::uno::Reference
+			< ::com::sun::star::beans::XPropertySet	>			mXPropSet;
+
+		sal_Bool	ImplGetPropertyValue( const String& rString );
+		sal_Bool	ImplGetPropertyValue( const ::com::sun::star::uno::Reference
+						< ::com::sun::star::beans::XPropertySet > &, const String& );
+
+	public :
+
+        PropValue() {}
+
+        PropValue( ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > rXPropSet )
+            : mXPropSet( rXPropSet )
+        {}
+
+        ::com::sun::star::uno::Any GetAny() { return mAny; }
+
+		static sal_Bool GetPropertyValue(
+				::com::sun::star::uno::Any& rAny,
+					const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > &,
+						const String& rPropertyName,
+							sal_Bool bTestPropertyAvailability = sal_False );
+
+		static ::com::sun::star::beans::PropertyState GetPropertyState(
+					const ::com::sun::star::uno::Reference < ::com::sun::star::beans::XPropertySet > &,
+						const String& rPropertyName );
+};
+
+class EscherGraphicProvider;
+class PPTExBulletProvider
+{
+	friend struct PPTExParaSheet;
+
+	protected :
+
+		SvMemoryStream			aBuExPictureStream;
+		SvMemoryStream			aBuExOutlineStream;
+		SvMemoryStream			aBuExMasterStream;
+
+		EscherGraphicProvider*	pGraphicProv;
+
+	public :
+
+		sal_uInt16				GetId( const ByteString& rUniqueId, Size& rGraphicSize );
+
+								PPTExBulletProvider();
+								~PPTExBulletProvider();
+};
+
+struct FontCollectionEntry
+{
+		String					Name;
+        double                  Scaling;
+		sal_Int16				Family;
+		sal_Int16				Pitch;
+		sal_Int16				CharSet;
+    
+        String                  Original;
+        sal_Bool                bIsConverted;
+
+		FontCollectionEntry( const String& rName, sal_Int16 nFamily, sal_Int16 nPitch, sal_Int16 nCharSet ) :
+                            Scaling ( 1.0 ),
+							Family	( nFamily ),
+							Pitch	( nPitch ),
+							CharSet	( nCharSet ),
+                            Original( rName )
+                            {
+                                ImplInit( rName );
+                            };
+
+		FontCollectionEntry( const String& rName ) :
+							Scaling ( 1.0 ),
+                            Original( rName )
+                            {
+                                ImplInit( rName );
+                            };
+        ~FontCollectionEntry();
+
+    private :
+        
+        FontCollectionEntry() {};
+
+        void ImplInit( const String& rName );
+};
+
+class VirtualDevice;
+class FontCollection : private List
+{
+        VirtualDevice* pVDev;
+	public :
+					FontCollection();
+					~FontCollection();
+
+		short		GetScriptDirection( const String& rText ) const;
+		sal_uInt32	GetId( FontCollectionEntry& rFontDescriptor );
+    sal_uInt32	GetCount() const { return List::Count(); };
+		const FontCollectionEntry*						GetById( sal_uInt32 nId );
+		FontCollectionEntry&	GetLast() { return *(FontCollectionEntry*)List::Last(); };
+};
+
+// ------------------------------------------------------------------------
+
+#define PPTEX_STYLESHEETENTRYS	9
+
+enum PPTExTextAttr
+{
+	ParaAttr_BulletOn,
+	ParaAttr_BuHardFont,
+	ParaAttr_BuHardColor,
+	ParaAttr_BuHardHeight,
+	ParaAttr_BulletChar,
+	ParaAttr_BulletFont,
+	ParaAttr_BulletHeight,
+	ParaAttr_BulletColor,
+	ParaAttr_Adjust,
+	ParaAttr_LineFeed,
+	ParaAttr_UpperDist,
+	ParaAttr_LowerDist,
+	ParaAttr_TextOfs,
+	ParaAttr_BulletOfs,
+	ParaAttr_DefaultTab,
+    ParaAttr_AsianLB_1,
+    ParaAttr_AsianLB_2,
+    ParaAttr_AsianLB_3,
+	ParaAttr_BiDi,
+	CharAttr_Bold,
+	CharAttr_Italic,
+	CharAttr_Underline,
+	CharAttr_Shadow,
+	CharAttr_Strikeout,
+	CharAttr_Embossed,
+	CharAttr_Font,
+	CharAttr_AsianOrComplexFont,
+	CharAttr_Symbol,
+	CharAttr_FontHeight,
+	CharAttr_FontColor,
+	CharAttr_Escapement
+};
+
+struct PPTExCharLevel
+{
+	sal_uInt16		mnFlags;
+	sal_uInt16		mnFont;
+	sal_uInt16		mnAsianOrComplexFont;
+	sal_uInt16		mnFontHeight;
+	sal_uInt16		mnEscapement;
+	sal_uInt32		mnFontColor;
+};
+
+struct PPTExCharSheet
+{
+				PPTExCharLevel	maCharLevel[ 5 ];
+
+				PPTExCharSheet( int nInstance );
+
+				void	SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > &,
+										FontCollection& rFontCollection, int nLevel );
+				void	Write( SvStream& rSt, PptEscherEx* pEx, sal_uInt16 nLev, sal_Bool bFirst, sal_Bool bSimpleText, 
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rPagePropSet );
+
+};
+
+struct PPTExParaLevel
+{
+	sal_Bool	    mbIsBullet;
+	sal_uInt16		mnBulletChar;
+	sal_uInt16		mnBulletFont;
+	sal_uInt16		mnBulletHeight;
+	sal_uInt32		mnBulletColor;
+
+	sal_uInt16		mnAdjust;
+	sal_Int16		mnOOAdjust;
+	sal_uInt16		mnLineFeed;
+	sal_uInt16		mnUpperDist;
+	sal_uInt16		mnLowerDist;
+	sal_uInt16		mnTextOfs;
+	sal_uInt16		mnBulletOfs;
+	sal_uInt16		mnDefaultTab;
+
+	sal_Bool		mbExtendedBulletsUsed;
+	sal_uInt16		mnBulletId;
+	sal_uInt16		mnBulletStart;
+	sal_uInt32		mnMappedNumType;
+	sal_uInt32		mnNumberingType;
+    sal_uInt16      mnAsianSettings;
+	sal_uInt16		mnBiDi;
+};
+
+struct PPTExParaSheet
+{
+				PPTExBulletProvider& rBuProv;
+
+				sal_uInt32	mnInstance;
+
+				PPTExParaLevel	maParaLevel[ 5 ];
+				PPTExParaSheet( int nInstance, sal_uInt16 nDefaultTab, PPTExBulletProvider& rProv );
+
+				void	SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > &,
+										FontCollection& rFontCollection, int nLevel, const PPTExCharLevel& rCharLevel );
+				void	Write( SvStream& rSt, PptEscherEx* pEx, sal_uInt16 nLev, sal_Bool bFirst, sal_Bool bSimpleText,
+                    const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rPagePropSet );
+};
+
+class PPTExStyleSheet
+{
+
+	public :
+
+        	    PPTExCharSheet*		mpCharSheet[ PPTEX_STYLESHEETENTRYS ];
+	            PPTExParaSheet*		mpParaSheet[ PPTEX_STYLESHEETENTRYS ];
+
+				PPTExStyleSheet( sal_uInt16 nDefaultTab, PPTExBulletProvider& rBuProv );
+				~PPTExStyleSheet();
+
+				PPTExParaSheet& GetParaSheet( int nInstance ) { return *mpParaSheet[ nInstance ]; };
+				PPTExCharSheet& GetCharSheet( int nInstance ) { return *mpCharSheet[ nInstance ]; };
+
+				void			SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > &,
+												FontCollection& rFontCollection, int nInstance, int nLevel );
+				sal_Bool		IsHardAttribute( sal_uInt32 nInstance, sal_uInt32 nLevel, PPTExTextAttr eAttr, sal_uInt32 nValue );
+
+				sal_uInt32		SizeOfTxCFStyleAtom() const;
+				void			WriteTxCFStyleAtom( SvStream& rSt );
+};
+
+// ------------------------------------------------------------------------
+
+class PPTWriterBase : public PropValue, public GroupTable
+{
+protected:
+    ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >					mXModel;
+    ::com::sun::star::uno::Reference< ::com::sun::star::task::XStatusIndicator >		mXStatusIndicator;
+
+    sal_Bool			mbStatusIndicator;
+
+    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPagesSupplier >	mXDrawPagesSupplier;
+    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XMasterPagesSupplier >	mXMasterPagesSupplier;
+    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPages	>			mXDrawPages;
+    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >			mXDrawPage;
+    ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >			mXPagePropSet;
+    ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >			mXBackgroundPropSet;
+    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XShapes >  			mXShapes;
+    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XShape	>				mXShape;
+    ::com::sun::star::awt::Size			maSize;
+    ::com::sun::star::awt::Point		maPosition;
+    Rectangle			maRect;
+    ByteString			mType;
+    sal_Bool			mbPresObj;
+    sal_Bool			mbEmptyPresObj;
+    sal_Int32			mnAngle;
+
+    sal_uInt32			mnPages;			// number of Slides ( w/o master pages & notes & handout )
+    sal_uInt32			mnMasterPages;
+
+    Fraction						maFraction;
+    MapMode							maMapModeSrc;
+    MapMode							maMapModeDest;
+    ::com::sun::star::awt::Size		maDestPageSize;
+    ::com::sun::star::awt::Size		maNotesPageSize;
+
+    PageType			            meLatestPageType;
+    std::vector< PPTExStyleSheet* >	maStyleSheetList;
+    PPTExStyleSheet*				mpStyleSheet;
+
+    FontCollection		maFontCollection;
+
+    List				maTextRuleList;		// TextRuleEntry's
+
+    virtual void ImplWriteSlide( sal_uInt32 /* nPageNum */, sal_uInt32 /* nMasterNum */, sal_uInt16 /* nMode */,
+                                 sal_Bool /* bHasBackground */, ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > /* aXBackgroundPropSet */ ) {}
+    virtual void ImplWriteNotes( sal_uInt32 nPageNum ) = 0;
+    virtual void ImplWriteSlideMaster( sal_uInt32 /* nPageNum */, ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > /* aXBackgroundPropSet */ ) {}
+    virtual void ImplWriteLayout( sal_Int32 /* nOffset */, sal_uInt32 /* nMasterNum */ ) {}
+
+    virtual void exportPPTPre() {}
+    virtual void exportPPTPost() {}
+
+    virtual sal_Bool ImplCreateDocument()=0;
+    virtual sal_Bool ImplCreateMainNotes()=0;
+
+    sal_Bool GetStyleSheets();
+    sal_Bool GetShapeByIndex( sal_uInt32 nIndex, sal_Bool bGroup = FALSE );
+
+    sal_Bool CreateMainNotes();
+
+    ::com::sun::star::awt::Size	  MapSize( const ::com::sun::star::awt::Size& );
+    ::com::sun::star::awt::Point  MapPoint( const ::com::sun::star::awt::Point& );
+    Rectangle                     MapRectangle( const ::com::sun::star::awt::Rectangle& );
+
+    sal_Bool ContainsOtherShapeThanPlaceholders( sal_Bool bForOOMLX );
+
+public:
+    PPTWriterBase();
+    PPTWriterBase( const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel > & rModel,
+                   const ::com::sun::star::uno::Reference< ::com::sun::star::task::XStatusIndicator > & rStatInd );
+
+    ~PPTWriterBase();
+
+    void exportPPT();
+
+    sal_Bool InitSOIface();
+    sal_Bool GetPageByIndex( sal_uInt32 nIndex, PageType );
+    sal_uInt32 GetMasterIndex( PageType ePageType );
+    sal_Bool SetCurrentStyleSheet( sal_uInt32 nPageNum );
+
+    sal_Bool GetPresObj() { return mbPresObj; }
+
+    PHLayout& GetLayout( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rXPropSet ) const;
+    PHLayout& GetLayout( sal_Int32 nOffset ) const;
+    sal_Int32 GetLayoutOffset( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rXPropSet ) const;
+
+    sal_Bool CreateSlide( sal_uInt32 nPageNum );
+    sal_Bool CreateSlideMaster( sal_uInt32 nPageNum );
+    sal_Bool CreateNotes( sal_uInt32 nPageNum );
+
+    static sal_Int8 GetTransition( sal_Int16 nTransitionType, sal_Int16 nTransitionSubtype, ::com::sun::star::presentation::FadeEffect eEffect, sal_uInt8& nDirection );
+    static sal_Int8 GetTransition( ::com::sun::star::presentation::FadeEffect eEffect, sal_uInt8& nDirection );
+};
+
+#define PPT_TRANSITION_TYPE_NONE            0
+#define PPT_TRANSITION_TYPE_RANDOM          1
+#define PPT_TRANSITION_TYPE_BLINDS          2
+#define PPT_TRANSITION_TYPE_CHECKER         3
+#define PPT_TRANSITION_TYPE_COVER           4
+#define PPT_TRANSITION_TYPE_DISSOLVE        5
+#define PPT_TRANSITION_TYPE_FADE            6
+#define PPT_TRANSITION_TYPE_PULL            7
+#define PPT_TRANSITION_TYPE_RANDOM_BARS     8
+#define PPT_TRANSITION_TYPE_STRIPS          9
+#define PPT_TRANSITION_TYPE_WIPE           10
+#define PPT_TRANSITION_TYPE_ZOOM           11
+#define PPT_TRANSITION_TYPE_SPLIT          13
+
+// effects, new in xp
+#define PPT_TRANSITION_TYPE_DIAMOND		17
+#define PPT_TRANSITION_TYPE_PLUS		18
+#define PPT_TRANSITION_TYPE_WEDGE		19
+#define PPT_TRANSITION_TYPE_PUSH		20
+#define PPT_TRANSITION_TYPE_COMB		21
+#define PPT_TRANSITION_TYPE_NEWSFLASH		22
+#define PPT_TRANSITION_TYPE_SMOOTHFADE		23
+#define PPT_TRANSITION_TYPE_WHEEL		26
+#define PPT_TRANSITION_TYPE_CIRCLE		27
+
+#endif
diff --git sd/source/filter/eppt/epptooxml.cxx sd/source/filter/eppt/epptooxml.cxx
new file mode 100644
index 0000000..f8e0790
--- /dev/null
+++ sd/source/filter/pptx/pptx-epptooxml.cxx
@@ -0,0 +1,1449 @@
+#include <hash_map>
+#include <stdio.h>
+#include <oox/drawingml/chart/chartconverter.hxx>
+#include <oox/core/tokens.hxx>
+#include <epptooxml.hxx>
+#include <epptdef.hxx>
+#include <oox/export/shapes.hxx>
+
+#include <cppuhelper/factory.hxx>
+#include <sax/fshelper.hxx>
+#include <rtl/ustrbuf.hxx>
+#include <svx/escherex.hxx>
+#include <tools/poly.hxx>
+
+#include <com/sun/star/drawing/FillStyle.hpp>
+#include <com/sun/star/drawing/RectanglePoint.hpp>
+#include <com/sun/star/beans/Property.hpp>
+#include <com/sun/star/beans/XPropertySetInfo.hpp>
+#include <com/sun/star/text/XSimpleText.hpp>
+#include <com/sun/star/presentation/AnimationSpeed.hpp>
+
+#include <oox/export/utils.hxx>
+
+// presentation namespaces
+#define PNMSS         FSNS( XML_xmlns, XML_a ), "http://schemas.openxmlformats.org/drawingml/2006/main", \
+                      FSNS( XML_xmlns, XML_p ), "http://schemas.openxmlformats.org/presentationml/2006/main", \
+                      FSNS( XML_xmlns, XML_r ), "http://schemas.openxmlformats.org/officeDocument/2006/relationships"
+
+using ::rtl::OString;
+using ::rtl::OUString;
+using ::rtl::OUStringBuffer;
+using namespace ::com::sun::star;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::drawing;
+using namespace ::com::sun::star::presentation;
+using ::com::sun::star::beans::XPropertySet;
+using ::com::sun::star::beans::XPropertySetInfo;
+using ::com::sun::star::lang::XMultiServiceFactory;
+using ::com::sun::star::container::XIndexAccess;
+using ::com::sun::star::frame::XModel;
+using ::com::sun::star::io::XOutputStream;
+using ::com::sun::star::task::XStatusIndicator;
+using ::com::sun::star::text::XSimpleText;
+using ::sax_fastparser::FastSerializerHelper;
+using ::sax_fastparser::FSHelperPtr;
+
+void dump_pset(Reference< XPropertySet > rXPropSet);
+
+#define IDS(x) (OString(#x " ") + OString::valueOf( mnShapeIdMax++ )).getStr()
+
+namespace oox {
+    using namespace drawingml;
+    namespace core {
+
+class PowerPointShapeExport : public ShapeExport
+{
+    PowerPointExport&   mrExport;
+    PageType            mePageType;
+    sal_Bool            mbMaster;
+public:
+                        PowerPointShapeExport( FSHelperPtr pFS, PowerPointExport* pFB );
+    void                SetMaster( sal_Bool bMaster );
+    void                SetPageType( PageType ePageType );
+    ShapeExport&        WriteNonVisualProperties( Reference< XShape > xShape );
+    ShapeExport&        WriteTextShape( Reference< XShape > xShape );
+    ShapeExport&        WriteUnknownShape( Reference< XShape > xShape );
+};
+
+PowerPointShapeExport::PowerPointShapeExport( FSHelperPtr pFS, PowerPointExport* pFB )
+    : ShapeExport( XML_p, pFS, pFB )
+    , mrExport( *pFB )
+{
+}
+
+void PowerPointShapeExport::SetMaster( sal_Bool bMaster )
+{
+    mbMaster = bMaster;
+}
+
+void PowerPointShapeExport::SetPageType( PageType ePageType )
+{
+    mePageType = ePageType;
+}
+
+ShapeExport& PowerPointShapeExport::WriteNonVisualProperties( Reference< XShape > )
+{
+    GetFS()->singleElementNS( XML_p, XML_nvPr, FSEND );
+
+    return *this;
+}
+
+ShapeExport& PowerPointShapeExport::WriteTextShape( Reference< XShape > xShape )
+{
+    OUString sShapeType = xShape->getShapeType();
+
+    DBG(printf( "shape(text): %s\n", USS(sShapeType) ));
+
+    if( sShapeType.equalsAscii( "com.sun.star.drawing.TextShape" ) )
+    {
+	ShapeExport::WriteTextShape( xShape );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.presentation.DateTimeShape" ) )
+    {
+        if( !mrExport.WritePlaceholder( GetFS(), *this, DateAndTime, mbMaster ) )
+            ShapeExport::WriteTextShape( xShape );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.presentation.FooterShape" ) )
+    {
+        if( !mrExport.WritePlaceholder( GetFS(), *this, Footer, mbMaster ) )
+            ShapeExport::WriteTextShape( xShape );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.presentation.HeaderShape" ) )
+    {
+        if( !mrExport.WritePlaceholder( GetFS(), *this, Header, mbMaster ) )
+            ShapeExport::WriteTextShape( xShape );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.presentation.NotesShape" ) )
+    {
+        if( mePageType == NOTICE && mrExport.GetPresObj() )
+            mrExport.WritePlaceholderShape( GetFS(), *this, Notes );
+        else
+            ShapeExport::WriteTextShape( xShape );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.presentation.OutlinerShape" ) )
+    {
+        if( !mrExport.WritePlaceholder( GetFS(), *this, Outliner, mbMaster ) )
+            ShapeExport::WriteTextShape( xShape );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.presentation.SlideNumberShape" ) )
+    {
+        if( !mrExport.WritePlaceholder( GetFS(), *this, SlideNumber, mbMaster ) )
+            ShapeExport::WriteTextShape( xShape );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.presentation.TitleTextShape" ) )
+    {
+        if( !mrExport.WritePlaceholder( GetFS(), *this, Title, mbMaster ) )
+            ShapeExport::WriteTextShape( xShape );
+    }
+
+    return *this;
+}
+
+ShapeExport& PowerPointShapeExport::WriteUnknownShape( Reference< XShape > xShape )
+{
+    OUString sShapeType = xShape->getShapeType();
+
+    DBG(printf( "shape(unknown): %s\n", USS(sShapeType) ));
+
+    if( sShapeType.equalsAscii( "com.sun.star.drawing.Group" ) )
+    {
+        Reference< XIndexAccess > rXIndexAccess( xShape, UNO_QUERY );
+
+        mrExport.EnterGroup( rXIndexAccess );
+        DBG(printf( "enter group\n" ));
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.drawing.Group" ) )
+    {
+        mrExport.WritePageShape( GetFS(), *this, mePageType );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.drawing.PageShape" ) )
+    {
+        mrExport.WritePageShape( GetFS(), *this, mePageType );
+    }
+    else if( sShapeType.equalsAscii( "com.sun.star.presentation.SubtitleShape" ) )
+    {
+        if( !mrExport.WritePlaceholder( GetFS(), *this, Subtitle, mbMaster ) )
+            ShapeExport::WriteTextShape( xShape );
+    }
+
+    return *this;
+}
+
+PowerPointExport::PowerPointExport( const Reference< XMultiServiceFactory > & rSMgr  )
+    : XmlFilterBase( rSMgr ),
+      PPTWriterBase(),
+      mxChartConv( new ::oox::drawingml::chart::ChartConverter ),
+      mnLayoutFileIdMax( 1 ),
+      mnSlideIdMax( 1 << 8 ),
+      mnSlideMasterIdMax( 1 << 31 ),
+      mnShapeIdMax( 1 ),
+      mnPictureIdMax( 1 )
+{
+    memset( mLayoutInfo, 0, sizeof(mLayoutInfo) );
+}
+
+PowerPointExport::~PowerPointExport()
+{
+}
+
+bool PowerPointExport::importDocument() throw()
+{
+    return false;
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+bool PowerPointExport::exportDocument() throw()
+{
+    DrawingML::ResetCounters();
+
+    addRelation( US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" ), S( "ppt/presentation.xml" ) );
+
+    mPresentationFS = openOutputStreamWithSerializer( US( "ppt/presentation.xml" ),
+                                                      US( "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml" ) );
+
+    addRelation( mPresentationFS->getOutputStream(),
+                 US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme" ),
+                 US( "theme/theme1.xml" ) );
+
+    mPresentationFS->startElementNS( XML_p, XML_presentation, PNMSS, FSEND );
+
+    mXModel.set( getModel(), UNO_QUERY );
+    mXStatusIndicator.set( getStatusIndicator(), UNO_QUERY );
+
+    exportPPT();
+
+    mPresentationFS->singleElementNS( XML_p, XML_sldSz,
+                                      XML_cx, IS( PPTtoEMU( maDestPageSize.Width ) ),
+                                      XML_cy, IS( PPTtoEMU( maDestPageSize.Height ) ),
+                                      FSEND );
+    // for some reason if added before slides list it will not load the slides (alas with error reports) in mso
+    mPresentationFS->singleElementNS( XML_p, XML_notesSz,
+                                      XML_cx, IS( PPTtoEMU( maNotesPageSize.Width ) ),
+                                      XML_cy, IS( PPTtoEMU( maNotesPageSize.Height ) ),
+                                      FSEND );
+
+    mPresentationFS->endElementNS( XML_p, XML_presentation );
+    mPresentationFS.reset();
+
+    commit();
+
+	return true;
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+void PowerPointExport::ImplWriteBackground( FSHelperPtr pFS, Reference< XPropertySet > rXPropSet )
+{
+    FillStyle aFillStyle( FillStyle_NONE );
+    if ( ImplGetPropertyValue( rXPropSet, S( "FillStyle" ) ) )
+        mAny >>= aFillStyle;
+
+    if( aFillStyle == FillStyle_BITMAP ) {
+        //DBG(printf ("FillStyle_BITMAP properties\n"));
+        //DBG(dump_pset(rXPropSet));
+    }
+
+    if( aFillStyle == FillStyle_NONE ||
+        aFillStyle == FillStyle_GRADIENT ||
+        aFillStyle == FillStyle_HATCH ) 
+        return;
+
+    pFS->startElementNS( XML_p, XML_bg, FSEND );
+    pFS->startElementNS( XML_p, XML_bgPr, FSEND );
+
+    PowerPointShapeExport( pFS, this ).WriteFill( rXPropSet );
+
+    pFS->endElementNS( XML_p, XML_bgPr );
+    pFS->endElementNS( XML_p, XML_bg );
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+#define MINIMAL_SPTREE "<p:spTree>\
+      <p:nvGrpSpPr>\
+        <p:cNvPr id=\"1\" name=\"\"/>\
+        <p:cNvGrpSpPr/>\
+        <p:nvPr/>\
+      </p:nvGrpSpPr>\
+      <p:grpSpPr>\
+        <a:xfrm>\
+          <a:off x=\"0\" y=\"0\"/>\
+          <a:ext cx=\"0\" cy=\"0\"/>\
+          <a:chOff x=\"0\" y=\"0\"/>\
+          <a:chExt cx=\"0\" cy=\"0\"/>\
+        </a:xfrm>\
+      </p:grpSpPr>\
+    </p:spTree>"
+
+#define MAIN_GROUP \
+     "<p:nvGrpSpPr>\
+        <p:cNvPr id=\"1\" name=\"\"/>\
+        <p:cNvGrpSpPr/>\
+        <p:nvPr/>\
+      </p:nvGrpSpPr>\
+      <p:grpSpPr>\
+        <a:xfrm>\
+          <a:off x=\"0\" y=\"0\"/>\
+          <a:ext cx=\"0\" cy=\"0\"/>\
+          <a:chOff x=\"0\" y=\"0\"/>\
+          <a:chExt cx=\"0\" cy=\"0\"/>\
+        </a:xfrm>\
+      </p:grpSpPr>"
+
+
+#define GETA(propName) \
+    ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( #propName ) ) )
+
+#define GET(variable, propName) \
+    if ( GETA(propName) ) \
+        mAny >>= variable;
+
+const char* PowerPointExport::GetSideDirection( sal_uInt8 nDirection )
+{
+    const char* pDirection = NULL;
+
+    switch( nDirection ) {
+	case 0:
+	    pDirection = "r";
+	    break;
+	case 1:
+	    pDirection = "d";
+	    break;
+	case 2:
+	    pDirection = "l";
+	    break;
+	case 3:
+	    pDirection = "u";
+	    break;
+    }
+
+    return pDirection;
+}
+
+const char* PowerPointExport::GetCornerDirection( sal_uInt8 nDirection )
+{
+    const char* pDirection = NULL;
+
+    switch( nDirection ) {
+	case 4:
+	    pDirection = "rd";
+	    break;
+	case 5:
+	    pDirection = "ld";
+	    break;
+	case 6:
+	    pDirection = "ru";
+	    break;
+	case 7:
+	    pDirection = "lu";
+	    break;
+    }
+
+    return pDirection;
+}
+
+const char* PowerPointExport::Get8Direction( sal_uInt8 nDirection )
+{
+    const char* pDirection = GetSideDirection( nDirection );
+
+    if( !pDirection )
+	pDirection = GetCornerDirection( nDirection );
+
+    return pDirection;
+}
+
+void PowerPointExport::ImplWriteSlide( sal_uInt32 nPageNum, sal_uInt32 nMasterNum, sal_uInt16 /* nMode */,
+                                       sal_Bool bHasBackground, Reference< XPropertySet > aXBackgroundPropSet )
+{
+    DBG(printf("write slide: %d\n----------------\n", nPageNum));
+
+    // slides list
+    if( nPageNum == 0 )
+        mPresentationFS->startElementNS( XML_p, XML_sldIdLst, FSEND );
+
+    // add explicit relation of presentation to this slide
+    OUString sRelId = addRelation( mPresentationFS->getOutputStream(),
+                                   US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/slide" ),
+                                   OUStringBuffer()
+                                   .appendAscii( "slides/slide" )
+                                   .append( (sal_Int32) nPageNum + 1 )
+                                   .appendAscii( ".xml" )
+                                   .makeStringAndClear() );
+
+    mPresentationFS->singleElementNS( XML_p, XML_sldId,
+                                      XML_id, I32S( GetNewSlideId() ),
+                                      FSNS( XML_r, XML_id ), USS( sRelId ),
+                                      FSEND );
+    
+    if( nPageNum == mnPages - 1 )
+        mPresentationFS->endElementNS( XML_p, XML_sldIdLst );
+
+    FSHelperPtr pFS = openOutputStreamWithSerializer( OUStringBuffer()
+                                                      .appendAscii( "ppt/slides/slide" )
+                                                      .append( (sal_Int32) nPageNum + 1 )
+                                                      .appendAscii( ".xml" )
+                                                      .makeStringAndClear(),
+                                                      US( "application/vnd.openxmlformats-officedocument.presentationml.slide+xml" ) );
+
+    if( mpSlidesFSArray.size() < mnPages )
+	mpSlidesFSArray.resize( mnPages );
+    mpSlidesFSArray[ nPageNum ] = pFS;
+
+    pFS->startElementNS( XML_p, XML_sld, PNMSS, FSEND );
+
+    pFS->startElementNS( XML_p, XML_cSld, FSEND );
+
+    // background
+    if( bHasBackground ) {
+        ImplWriteBackground( pFS, aXBackgroundPropSet );
+    }
+
+    WriteShapeTree( pFS, NORMAL, FALSE );
+
+    pFS->endElementNS( XML_p, XML_cSld );
+
+    FadeEffect eFadeEffect = FadeEffect_NONE;
+    GET( eFadeEffect, Effect );
+
+    OSL_TRACE("fade effect %d", eFadeEffect);
+
+    sal_Int16 nTransitionType = 0, nTransitionSubtype = 0;
+    sal_Int8 nPPTTransitionType = 0;
+    sal_uInt8 nDirection = 0;
+
+    if( GETA( TransitionType ) && ( mAny >>= nTransitionType ) &&
+	GETA( TransitionSubtype ) && ( mAny >>= nTransitionSubtype ) )
+	nPPTTransitionType = GetTransition( nTransitionType, nTransitionSubtype, eFadeEffect, nDirection );
+		
+    if( !nPPTTransitionType && eFadeEffect != FadeEffect_NONE )
+	nPPTTransitionType = GetTransition( eFadeEffect, nDirection );
+
+    if( nPPTTransitionType ) {
+	AnimationSpeed animationSpeed = AnimationSpeed_MEDIUM;
+	const char* speed = NULL;
+	sal_Int32 advanceTiming = -1;
+	sal_Int32 changeType = 0;
+
+	if( GETA( Speed ) ) {
+	    mAny >>= animationSpeed;
+
+	    switch( animationSpeed ) {
+		default:
+		case AnimationSpeed_MEDIUM:
+		    speed = "med";
+		    break;
+		case AnimationSpeed_SLOW:
+		    speed = "slow";
+		    break;
+		case AnimationSpeed_FAST:
+		    break;
+	    }
+	}
+
+	if( GETA( Change ) )
+	    mAny >>= changeType;
+
+	// 1 means automatic, 2 half automatic - not sure what it means - at least I don't see it in UI
+	if( changeType == 1 && GETA( Duration ) )
+	    mAny >>= advanceTiming;
+
+	pFS->startElementNS( XML_p, XML_transition,
+			     XML_spd, speed,
+			     XML_advTm, advanceTiming != -1 ? I32S( advanceTiming*1000 ) : NULL,
+			     FSEND );
+
+	sal_Int32 nTransition = 0;
+	const char* pDirection = NULL;
+	const char* pOrientation = NULL;
+	const char* pThruBlk = NULL;
+	const char* pSpokes = NULL;
+	char pSpokesTmp[2] = "0";
+
+	switch( nPPTTransitionType ) {
+	    case PPT_TRANSITION_TYPE_BLINDS:
+		nTransition = XML_blinds;
+		pDirection = ( nDirection == 0) ? "vert" : "horz";
+		break;
+	    case PPT_TRANSITION_TYPE_CHECKER:
+		nTransition = XML_checker;
+		pDirection = ( nDirection == 1) ? "vert" : "horz";
+		break;
+	    case PPT_TRANSITION_TYPE_CIRCLE:
+		nTransition = XML_circle;
+		break;
+	    case PPT_TRANSITION_TYPE_COMB:
+		nTransition = XML_comb;
+		pDirection = ( nDirection == 1) ? "vert" : "horz";
+		break;
+	    case PPT_TRANSITION_TYPE_COVER:
+		nTransition = XML_cover;
+		pDirection = Get8Direction( nDirection );
+		break;
+// we don't have cut transition AFAIK
+// 	    case PPT_TRANSITION_TYPE_CUT:
+// 		nTransition = XML_cut;
+// 		break;
+	    case PPT_TRANSITION_TYPE_DIAMOND:
+		nTransition = XML_diamond;
+		break;
+	    case PPT_TRANSITION_TYPE_DISSOLVE:
+		nTransition = XML_dissolve;
+		break;
+	    case PPT_TRANSITION_TYPE_FADE:
+		nTransition = XML_fade;
+		pThruBlk = "true";
+		break;
+	    case PPT_TRANSITION_TYPE_SMOOTHFADE:
+		nTransition = XML_fade;
+		break;
+	    case PPT_TRANSITION_TYPE_NEWSFLASH:
+		nTransition = XML_newsflash;
+		break;
+	    case PPT_TRANSITION_TYPE_PLUS:
+		nTransition = XML_plus;
+		break;
+	    case PPT_TRANSITION_TYPE_PULL:
+		nTransition = XML_pull;
+		pDirection = Get8Direction( nDirection );
+		break;
+	    case PPT_TRANSITION_TYPE_PUSH:
+		nTransition = XML_push;
+		pDirection = GetSideDirection( nDirection );
+		break;
+	    case PPT_TRANSITION_TYPE_RANDOM:
+		nTransition = XML_random;
+		break;
+	    case PPT_TRANSITION_TYPE_RANDOM_BARS:
+		nTransition = XML_randomBar;
+		pDirection = ( nDirection == 1) ? "vert" : "horz";
+		break;
+	    case PPT_TRANSITION_TYPE_SPLIT:
+		nTransition = XML_split;
+		pDirection = ( nDirection & 1) ? "in" : "out";
+		pOrientation = ( nDirection < 2) ? "horz" : "vert";
+		break;
+	    case PPT_TRANSITION_TYPE_STRIPS:
+		nTransition = XML_strips;
+		pDirection = GetCornerDirection( nDirection );
+		break;
+	    case PPT_TRANSITION_TYPE_WEDGE:
+		nTransition = XML_wedge;
+		break;
+	    case PPT_TRANSITION_TYPE_WHEEL:
+		nTransition = XML_wheel;
+		if( nDirection != 4 && nDirection <= 9 ) {
+		    pSpokesTmp[0] = '0' + nDirection;
+		    pSpokes = pSpokesTmp;
+		}
+		break;
+	    case PPT_TRANSITION_TYPE_WIPE:
+		nTransition = XML_wipe;
+		pDirection = GetSideDirection( nDirection );
+		break;
+	    case PPT_TRANSITION_TYPE_ZOOM:
+		nTransition = XML_zoom;
+		pDirection = ( nDirection == 1) ? "in" : "out";
+		break;
+	    case PPT_TRANSITION_TYPE_NONE:
+	    default:
+		nTransition = 0;
+	}
+
+	if( nTransition )
+	    pFS->singleElementNS( XML_p, nTransition,
+				  XML_dir, pDirection,
+				  XML_orient, pOrientation,
+				  XML_spokes, pSpokes,
+				  XML_thruBlk, pThruBlk,
+				  FSEND );
+
+	pFS->endElementNS( XML_p, XML_transition );
+    }
+
+    pFS->endElementNS( XML_p, XML_sld );
+
+    // add implicit relation to slide layout
+    addRelation( pFS->getOutputStream(),
+                 US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideLayout" ),
+                 OUStringBuffer()
+                 .appendAscii( "../slideLayouts/slideLayout" )
+                 .append( GetLayoutFileId( GetLayoutOffset( mXPagePropSet ), nMasterNum ) )
+                 .appendAscii( ".xml" )
+                 .makeStringAndClear() );
+
+    DBG(printf("----------------\n"));
+}
+
+void PowerPointExport::ImplWriteNotes( sal_uInt32 nPageNum )
+{
+    if( !mbCreateNotes || !ContainsOtherShapeThanPlaceholders( TRUE ) )
+	return;
+
+    DBG(printf("write Notes %d\n----------------\n", nPageNum));
+
+    FSHelperPtr pFS = openOutputStreamWithSerializer( OUStringBuffer()
+                                                      .appendAscii( "ppt/notesSlides/notesSlide" )
+                                                      .append( (sal_Int32) nPageNum + 1 )
+                                                      .appendAscii( ".xml" )
+                                                      .makeStringAndClear(),
+                                                      US( "application/vnd.openxmlformats-officedocument.presentationml.notesSlide+xml" ) );
+
+    pFS->startElementNS( XML_p, XML_notes, PNMSS, FSEND );
+
+    pFS->startElementNS( XML_p, XML_cSld, FSEND );
+
+    // background
+//     if( bHasBackground ) {
+//         ImplWriteBackground( pFS, aXBackgroundPropSet );
+//     }
+
+    WriteShapeTree( pFS, NOTICE, FALSE );
+
+    pFS->endElementNS( XML_p, XML_cSld );
+
+    pFS->endElementNS( XML_p, XML_notes );
+
+    // add implicit relation to slide
+    addRelation( pFS->getOutputStream(),
+                 US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/slide" ),
+                 OUStringBuffer()
+                 .appendAscii( "../slides/slide" )
+                 .append( (sal_Int32) nPageNum + 1 )
+                 .appendAscii( ".xml" )
+                 .makeStringAndClear() );
+
+    // add slide implicit relation to notes
+    if( mpSlidesFSArray.size() >= nPageNum )
+	addRelation( mpSlidesFSArray[ nPageNum ]->getOutputStream(),
+		     US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/notesSlide" ),
+		     OUStringBuffer()
+		     .appendAscii( "../notesSlides/notesSlide" )
+		     .append( (sal_Int32) nPageNum + 1 )
+		     .appendAscii( ".xml" )
+		     .makeStringAndClear() );
+
+    // add implicit relation to notes master
+    addRelation( pFS->getOutputStream(),
+                 US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/notesMaster" ),
+		 US( "../notesMasters/notesMaster1.xml" ) );
+
+    DBG(printf("----------------\n"));
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+void PowerPointExport::AddLayoutIdAndRelation( FSHelperPtr pFS, sal_Int32 nLayoutFileId )
+{
+    // add implicit relation of slide master to slide layout
+    OUString sRelId = addRelation( pFS->getOutputStream(),
+				   US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideLayout" ),
+				   OUStringBuffer()
+				   .appendAscii( "../slideLayouts/slideLayout" )
+				   .append( nLayoutFileId )
+				   .appendAscii( ".xml" )
+				   .makeStringAndClear() );
+
+    pFS->singleElementNS( XML_p, XML_sldLayoutId,
+			  XML_id, I64S( GetNewSlideMasterId() ),
+			  FSNS( XML_r, XML_id ), USS( sRelId ),
+			  FSEND );
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+sal_Int32 PowerPointExport::nStyleLevelToken[5] =
+{
+    XML_lvl1pPr,
+    XML_lvl2pPr,
+    XML_lvl3pPr,
+    XML_lvl4pPr,
+    XML_lvl5pPr
+};
+
+void PowerPointExport::WriteTextStyleLevel( FSHelperPtr pFS, int nInstance, int nLevel )
+{
+    OSL_ASSERT( nLevel >= 0 && nLevel < 5 );
+    OSL_ASSERT( nInstance >= 0 && nInstance < 9 );
+
+    PPTExCharLevel rCharLevel = mpStyleSheet->GetCharSheet( nInstance ).maCharLevel[ nLevel ];
+    PPTExParaLevel rParaLevel = mpStyleSheet->GetParaSheet( nInstance ).maParaLevel[ nLevel ];
+
+    pFS->startElementNS( XML_a, PowerPointExport::nStyleLevelToken[ nLevel ],
+			 XML_algn, DrawingML::GetAlignment( rParaLevel.mnOOAdjust ),
+			 FSEND );
+
+    pFS->endElementNS( XML_a, PowerPointExport::nStyleLevelToken[ nLevel ] );
+}
+
+void PowerPointExport::WriteTextStyle( FSHelperPtr pFS, int nInstance, sal_Int32 xmlToken )
+{
+    pFS->startElementNS( XML_p, xmlToken, FSEND );
+
+    for( int nLevel = 0; nLevel < 5; nLevel ++ )
+	WriteTextStyleLevel( pFS, nInstance, nLevel );
+
+    pFS->endElementNS( XML_p, xmlToken );
+}
+
+void PowerPointExport::WriteTextStyles( FSHelperPtr pFS )
+{
+    pFS->startElementNS( XML_p, XML_txBody, FSEND );
+
+    WriteTextStyle( pFS, EPP_TEXTTYPE_Title, XML_titleStyle );
+    WriteTextStyle( pFS, EPP_TEXTTYPE_Body, XML_bodyStyle );
+    WriteTextStyle( pFS, EPP_TEXTTYPE_Other, XML_otherStyle );
+
+    pFS->endElementNS( XML_p, XML_txBody );
+}
+
+void PowerPointExport::ImplWriteSlideMaster( sal_uInt32 nPageNum, Reference< XPropertySet > aXBackgroundPropSet )
+{
+    DBG(printf("write slide master: %d\n----------------\n", nPageNum));
+
+    // slides list
+    if( nPageNum == 0 )
+        mPresentationFS->startElementNS( XML_p, XML_sldMasterIdLst, FSEND );
+
+    OUString sRelId = addRelation( mPresentationFS->getOutputStream(),
+                                   US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideMaster" ),
+                                   OUStringBuffer()
+                                   .appendAscii( "slideMasters/slideMaster" )
+                                   .append( (sal_Int32) nPageNum + 1 )
+                                   .appendAscii( ".xml" )
+                                   .makeStringAndClear() );
+
+    mPresentationFS->singleElementNS( XML_p, XML_sldMasterId,
+                                      XML_id, OString::valueOf( (sal_Int64) GetNewSlideMasterId() ).getStr(),
+                                      FSNS( XML_r, XML_id ), USS( sRelId ),
+                                      FSEND );
+    
+    if( nPageNum == mnMasterPages - 1 )
+        mPresentationFS->endElementNS( XML_p, XML_sldMasterIdLst );
+
+    FSHelperPtr pFS =
+	openOutputStreamWithSerializer( OUStringBuffer()
+					.appendAscii( "ppt/slideMasters/slideMaster" )
+					.append( (sal_Int32) nPageNum + 1 )
+					.appendAscii( ".xml" )
+					.makeStringAndClear(),
+					US( "application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml" ) );
+    if( mpMasterFSArray.size() < mnMasterPages )
+	mpMasterFSArray.resize( mnMasterPages );
+    mpMasterFSArray[ nPageNum ] = pFS;
+
+    // write theme per master
+    WriteTheme( nPageNum );
+
+    // add implicit relation to the presentation theme
+    addRelation( pFS->getOutputStream(),
+                 US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme" ),
+		 OUStringBuffer()
+		 .appendAscii( "../theme/theme" )
+		 .append( (sal_Int32) nPageNum + 1 )
+		 .appendAscii( ".xml" )
+		 .makeStringAndClear() );
+
+    pFS->startElementNS( XML_p, XML_sldMaster, PNMSS, FSEND );
+
+    pFS->startElementNS( XML_p, XML_cSld, FSEND );
+
+    ImplWriteBackground( pFS, aXBackgroundPropSet );
+    WriteShapeTree( pFS, MASTER, TRUE );
+
+    pFS->endElementNS( XML_p, XML_cSld );
+
+    // color map - now it uses colors from hardcoded theme, once we eventually generate theme, this might need update
+    pFS->singleElementNS( XML_p, XML_clrMap,
+                          XML_bg1, "lt1",
+                          XML_bg2, "lt2",
+                          XML_tx1, "dk1",
+                          XML_tx2, "dk2",
+                          XML_accent1, "accent1",
+                          XML_accent2, "accent2",
+                          XML_accent3, "accent3",
+                          XML_accent4, "accent4",
+                          XML_accent5, "accent5",
+                          XML_accent6, "accent6",
+                          XML_hlink, "hlink",
+                          XML_folHlink, "folHlink",
+                          FSEND );
+
+    // use master's id type as they have same range, mso does that as well
+    pFS->startElementNS( XML_p, XML_sldLayoutIdLst, FSEND );
+
+    int nCount = 0;
+    for( int i = 0; i < EPP_LAYOUT_SIZE; i++) {
+
+	sal_Int32 nLayoutFileId = GetLayoutFileId( i, nPageNum );
+	if( nLayoutFileId > 0 ) {
+	    AddLayoutIdAndRelation( pFS, nLayoutFileId );
+	    nCount++;
+	}
+    }
+
+    if( nCount == 0 ) {
+	// add at least empty layout, so that we don't have master page
+	// without layout, such master cannot be used in ppt
+	ImplWriteLayout( 0, nPageNum );
+	AddLayoutIdAndRelation( pFS, GetLayoutFileId( 0, nPageNum ) );
+    }
+
+    pFS->endElementNS( XML_p, XML_sldLayoutIdLst );
+
+    // WriteTextStyles( pFS );
+
+    pFS->endElementNS( XML_p, XML_sldMaster );
+
+    DBG(printf("----------------\n"));
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+sal_Int32 PowerPointExport::GetLayoutFileId( sal_Int32 nOffset, sal_uInt32 nMasterNum )
+{
+    if( mLayoutInfo[ nOffset ].mnFileIdArray.size() <= nMasterNum ) 
+	return 0;
+
+    return mLayoutInfo[ nOffset ].mnFileIdArray[ nMasterNum ];
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+void PowerPointExport::ImplWriteLayout( sal_Int32 nOffset, sal_uInt32 nMasterNum )
+{
+    if( mLayoutInfo[ nOffset ].mnFileIdArray.size() < mnMasterPages ) {
+	mLayoutInfo[ nOffset ].mnFileIdArray.resize( mnMasterPages );
+    }
+
+    if( mLayoutInfo[ nOffset ].mnFileIdArray[ nMasterNum ] != 0 )
+	return;
+
+    FSHelperPtr pFS
+        = openOutputStreamWithSerializer( OUStringBuffer()
+                                          .appendAscii( "ppt/slideLayouts/slideLayout" )
+                                          .append( (sal_Int32) mnLayoutFileIdMax )
+                                          .appendAscii( ".xml" )
+                                          .makeStringAndClear(),
+                                          US( "application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml" ) );
+
+//     LayoutInfo& rLayoutInfo = GetLayoutInfo( mXPagePropSet );
+
+    // add implicit relation of slide layout to slide master
+    addRelation( pFS->getOutputStream(),
+                 US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideMaster" ),
+                 OUStringBuffer()
+                 .appendAscii( "../slideMasters/slideMaster" )
+                 .append( (sal_Int32) nMasterNum + 1 )
+                 .appendAscii( ".xml" )
+                 .makeStringAndClear() );
+
+    pFS->startElementNS( XML_p, XML_sldLayout,
+                         PNMSS,
+                         XML_type, "title",
+                         XML_preserve, "1",
+                         FSEND );
+
+    pFS->startElementNS( XML_p, XML_cSld,
+                         XML_name, "Title Slide",
+                         FSEND );
+    pFS->write( MINIMAL_SPTREE ); // TODO: write actual shape tree
+    pFS->endElementNS( XML_p, XML_cSld );
+
+    pFS->endElementNS( XML_p, XML_sldLayout );
+
+    mLayoutInfo[ nOffset ].mnFileIdArray[ nMasterNum ] = mnLayoutFileIdMax;
+
+    mnLayoutFileIdMax ++;
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+void PowerPointExport::WriteShapeTree( FSHelperPtr pFS, PageType ePageType, sal_Bool bMaster )
+{
+    PowerPointShapeExport aDML( pFS, this );
+    aDML.SetMaster( bMaster );
+    aDML.SetPageType( ePageType );
+    sal_uInt32 nShapes;
+
+    pFS->startElementNS( XML_p, XML_spTree, FSEND );
+    pFS->write( MAIN_GROUP );
+
+    ResetGroupTable( nShapes = mXShapes->getCount() );
+
+    while( GetNextGroupEntry() ) {
+
+        sal_uInt32 nGroups = GetGroupsClosed();
+        for ( sal_uInt32 i = 0; i < nGroups; i++ ) {
+            DBG(printf( "leave group\n" ));
+        }
+
+        if ( GetShapeByIndex( GetCurrentGroupIndex(), TRUE ) ) {
+            DBG(printf( "mType: \"%s\"\n", mType.GetBuffer() ));
+            aDML.WriteShape( mXShape );
+        }
+    }
+
+    pFS->endElementNS( XML_p, XML_spTree );
+}
+
+#define BEGIN_SHAPE pFS->startElementNS( XML_p, XML_sp, FSEND )
+#define END_SHAPE pFS->endElementNS( XML_p, XML_sp )
+
+void PowerPointExport::WritePageShape( FSHelperPtr pFS, ShapeExport& rDML, PageType ePageType )
+{
+    if( ePageType == NOTICE && mbPresObj )
+	WritePlaceholderShape( pFS, rDML, SlideImage );
+    else
+	rDML.WriteTextShape( mXShape );
+}
+
+sal_Bool PowerPointExport::WritePlaceholder( FSHelperPtr pFS, ShapeExport& rDML, PlaceholderType ePlaceholder, sal_Bool bMaster )
+{
+    if( bMaster && ShapeExport::NonEmptyText( mXShape ) ) {
+	WritePlaceholderShape( pFS, rDML, ePlaceholder );
+
+	return TRUE;
+    }
+
+    return FALSE;
+}
+
+void PowerPointExport::WritePlaceholderShape( FSHelperPtr pFS, ShapeExport& rDML, PlaceholderType ePlaceholder )
+{
+    BEGIN_SHAPE;
+
+    // non visual shape properties
+    pFS->startElementNS( XML_p, XML_nvSpPr, FSEND );
+    rDML.WriteNonVisualDrawingProperties( mXShape, IDS( PlaceHolder ) );
+    pFS->startElementNS( XML_p, XML_cNvSpPr, FSEND );
+    pFS->singleElementNS( XML_a, XML_spLocks, XML_noGrp, "1", FSEND );
+    pFS->endElementNS( XML_p, XML_cNvSpPr );
+    pFS->startElementNS( XML_p, XML_nvPr, FSEND );
+
+    const char* pType = NULL;
+    switch( ePlaceholder ) {
+	case SlideImage:
+	    pType = "sldImg";
+	    break;
+	case Notes:
+	    pType = "body";
+	    break;
+	case Header:
+	    pType = "hdr";
+	    break;
+	case Footer:
+	    pType = "ftr";
+	    break;
+	case SlideNumber:
+	    pType = "sldNum";
+	    break;
+	case DateAndTime:
+	    pType = "dt";
+	    break;
+	case Outliner:
+	    pType = "body";
+	    break;
+	case Title:
+	    pType = "title";
+	    break;
+	case Subtitle:
+	    pType = "subTitle";
+	    break;
+	default:
+	    DBG(printf("warning: unhandled placeholder type: %d\n", ePlaceholder));
+    }
+    pFS->singleElementNS( XML_p, XML_ph, XML_type, pType, FSEND );
+    pFS->endElementNS( XML_p, XML_nvPr );
+    pFS->endElementNS( XML_p, XML_nvSpPr );
+
+    // visual shape properties
+    pFS->startElementNS( XML_p, XML_spPr, FSEND );
+    rDML.WriteShapeTransformation( mXShape );
+    rDML.WritePresetShape( "rect" );
+    rDML.WriteBlipFill( mXPropSet, S( "GraphicURL" ) );
+    pFS->endElementNS( XML_p, XML_spPr );
+
+    rDML.WriteTextBox( mXShape );
+
+    END_SHAPE;
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+#define MINIMAL_THEME "  <a:themeElements>\
+    <a:clrScheme name=\"Office\">\
+      <a:dk1>\
+        <a:sysClr val=\"windowText\" lastClr=\"000000\"/>\
+      </a:dk1>\
+      <a:lt1>\
+        <a:sysClr val=\"window\" lastClr=\"FFFFFF\"/>\
+      </a:lt1>\
+      <a:dk2>\
+        <a:srgbClr val=\"1F497D\"/>\
+      </a:dk2>\
+      <a:lt2>\
+        <a:srgbClr val=\"EEECE1\"/>\
+      </a:lt2>\
+      <a:accent1>\
+        <a:srgbClr val=\"4F81BD\"/>\
+      </a:accent1>\
+      <a:accent2>\
+        <a:srgbClr val=\"C0504D\"/>\
+      </a:accent2>\
+      <a:accent3>\
+        <a:srgbClr val=\"9BBB59\"/>\
+      </a:accent3>\
+      <a:accent4>\
+        <a:srgbClr val=\"8064A2\"/>\
+      </a:accent4>\
+      <a:accent5>\
+        <a:srgbClr val=\"4BACC6\"/>\
+      </a:accent5>\
+      <a:accent6>\
+        <a:srgbClr val=\"F79646\"/>\
+      </a:accent6>\
+      <a:hlink>\
+        <a:srgbClr val=\"0000FF\"/>\
+      </a:hlink>\
+      <a:folHlink>\
+        <a:srgbClr val=\"800080\"/>\
+      </a:folHlink>\
+    </a:clrScheme>\
+    <a:fontScheme name=\"Office\">\
+      <a:majorFont>\
+        <a:latin typeface=\"Arial\"/>\
+        <a:ea typeface=\"DejaVu Sans\"/>\
+        <a:cs typeface=\"DejaVu Sans\"/>\
+      </a:majorFont>\
+      <a:minorFont>\
+        <a:latin typeface=\"Arial\"/>\
+        <a:ea typeface=\"DejaVu Sans\"/>\
+        <a:cs typeface=\"DejaVu Sans\"/>\
+      </a:minorFont>\
+    </a:fontScheme>\
+    <a:fmtScheme name=\"Office\">\
+      <a:fillStyleLst>\
+        <a:solidFill>\
+          <a:schemeClr val=\"phClr\"/>\
+        </a:solidFill>\
+        <a:gradFill rotWithShape=\"1\">\
+          <a:gsLst>\
+            <a:gs pos=\"0\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:tint val=\"50000\"/>\
+                <a:satMod val=\"300000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+            <a:gs pos=\"35000\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:tint val=\"37000\"/>\
+                <a:satMod val=\"300000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+            <a:gs pos=\"100000\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:tint val=\"15000\"/>\
+                <a:satMod val=\"350000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+          </a:gsLst>\
+          <a:lin ang=\"16200000\" scaled=\"1\"/>\
+        </a:gradFill>\
+        <a:gradFill rotWithShape=\"1\">\
+          <a:gsLst>\
+            <a:gs pos=\"0\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:shade val=\"51000\"/>\
+                <a:satMod val=\"130000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+            <a:gs pos=\"80000\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:shade val=\"93000\"/>\
+                <a:satMod val=\"130000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+            <a:gs pos=\"100000\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:shade val=\"94000\"/>\
+                <a:satMod val=\"135000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+          </a:gsLst>\
+          <a:lin ang=\"16200000\" scaled=\"0\"/>\
+        </a:gradFill>\
+      </a:fillStyleLst>\
+      <a:lnStyleLst>\
+        <a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\">\
+          <a:solidFill>\
+            <a:schemeClr val=\"phClr\">\
+              <a:shade val=\"95000\"/>\
+              <a:satMod val=\"105000\"/>\
+            </a:schemeClr>\
+          </a:solidFill>\
+          <a:prstDash val=\"solid\"/>\
+        </a:ln>\
+        <a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\">\
+          <a:solidFill>\
+            <a:schemeClr val=\"phClr\"/>\
+          </a:solidFill>\
+          <a:prstDash val=\"solid\"/>\
+        </a:ln>\
+        <a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\">\
+          <a:solidFill>\
+            <a:schemeClr val=\"phClr\"/>\
+          </a:solidFill>\
+          <a:prstDash val=\"solid\"/>\
+        </a:ln>\
+      </a:lnStyleLst>\
+      <a:effectStyleLst>\
+        <a:effectStyle>\
+          <a:effectLst>\
+            <a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\">\
+              <a:srgbClr val=\"000000\">\
+                <a:alpha val=\"38000\"/>\
+              </a:srgbClr>\
+            </a:outerShdw>\
+          </a:effectLst>\
+        </a:effectStyle>\
+        <a:effectStyle>\
+          <a:effectLst>\
+            <a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\">\
+              <a:srgbClr val=\"000000\">\
+                <a:alpha val=\"35000\"/>\
+              </a:srgbClr>\
+            </a:outerShdw>\
+          </a:effectLst>\
+        </a:effectStyle>\
+        <a:effectStyle>\
+          <a:effectLst>\
+            <a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\">\
+              <a:srgbClr val=\"000000\">\
+                <a:alpha val=\"35000\"/>\
+              </a:srgbClr>\
+            </a:outerShdw>\
+          </a:effectLst>\
+          <a:scene3d>\
+            <a:camera prst=\"orthographicFront\">\
+              <a:rot lat=\"0\" lon=\"0\" rev=\"0\"/>\
+            </a:camera>\
+            <a:lightRig rig=\"threePt\" dir=\"t\">\
+              <a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/>\
+            </a:lightRig>\
+          </a:scene3d>\
+          <a:sp3d>\
+            <a:bevelT w=\"63500\" h=\"25400\"/>\
+          </a:sp3d>\
+        </a:effectStyle>\
+      </a:effectStyleLst>\
+      <a:bgFillStyleLst>\
+        <a:solidFill>\
+          <a:schemeClr val=\"phClr\"/>\
+        </a:solidFill>\
+        <a:gradFill rotWithShape=\"1\">\
+          <a:gsLst>\
+            <a:gs pos=\"0\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:tint val=\"40000\"/>\
+                <a:satMod val=\"350000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+            <a:gs pos=\"40000\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:tint val=\"45000\"/>\
+                <a:shade val=\"99000\"/>\
+                <a:satMod val=\"350000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+            <a:gs pos=\"100000\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:shade val=\"20000\"/>\
+                <a:satMod val=\"255000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+          </a:gsLst>\
+          <a:path path=\"circle\">\
+            <a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/>\
+          </a:path>\
+        </a:gradFill>\
+        <a:gradFill rotWithShape=\"1\">\
+          <a:gsLst>\
+            <a:gs pos=\"0\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:tint val=\"80000\"/>\
+                <a:satMod val=\"300000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+            <a:gs pos=\"100000\">\
+              <a:schemeClr val=\"phClr\">\
+                <a:shade val=\"30000\"/>\
+                <a:satMod val=\"200000\"/>\
+              </a:schemeClr>\
+            </a:gs>\
+          </a:gsLst>\
+          <a:path path=\"circle\">\
+            <a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/>\
+          </a:path>\
+        </a:gradFill>\
+      </a:bgFillStyleLst>\
+    </a:fmtScheme>\
+  </a:themeElements>"
+
+void PowerPointExport::WriteTheme( sal_Int32 nThemeNum )
+{
+    FSHelperPtr pFS = openOutputStreamWithSerializer( OUStringBuffer()
+						      .appendAscii( "ppt/theme/theme" )
+						      .append( (sal_Int32) nThemeNum + 1 )
+						      .appendAscii( ".xml" )
+						      .makeStringAndClear(),
+                                                      US( "application/vnd.openxmlformats-officedocument.theme+xml" ) );
+
+    pFS->startElementNS( XML_a, XML_theme,
+                         FSNS( XML_xmlns, XML_a), "http://schemas.openxmlformats.org/drawingml/2006/main",
+                         XML_name, "Office Theme",
+                         FSEND );
+
+    pFS->write( MINIMAL_THEME );
+    pFS->endElementNS( XML_a, XML_theme );
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+sal_Bool PowerPointExport::ImplCreateDocument()
+{
+    mbCreateNotes = FALSE;
+
+    for( sal_uInt32 i = 0; i < mnPages; i++ )
+    {
+        if ( !GetPageByIndex( i, NOTICE ) )
+            return FALSE;
+
+	if( ContainsOtherShapeThanPlaceholders( TRUE ) ) {
+	    mbCreateNotes = TRUE;
+	    break;
+	}
+    }
+
+    return TRUE;
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+sal_Bool PowerPointExport::WriteNotesMaster()
+{
+    DBG(printf("write Notes master\n----------------\n"));
+
+    mPresentationFS->startElementNS( XML_p, XML_notesMasterIdLst, FSEND );
+
+    OUString sRelId = addRelation( mPresentationFS->getOutputStream(),
+                                   US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/notesMaster" ),
+                                   US( "notesMasters/notesMaster1.xml" ) );
+
+    mPresentationFS->singleElementNS( XML_p, XML_notesMasterId,
+                                      FSNS( XML_r, XML_id ), USS( sRelId ),
+                                      FSEND );
+    
+    mPresentationFS->endElementNS( XML_p, XML_notesMasterIdLst );
+
+    FSHelperPtr pFS =
+	openOutputStreamWithSerializer( US( "ppt/notesMasters/notesMaster1.xml" ),
+					US( "application/vnd.openxmlformats-officedocument.presentationml.notesMaster+xml" ) );
+    // write theme per master
+    WriteTheme( mnMasterPages );
+
+    // add implicit relation to the presentation theme
+    addRelation( pFS->getOutputStream(),
+                 US( "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme" ),
+		 OUStringBuffer()
+		 .appendAscii( "../theme/theme" )
+		 .append( (sal_Int32) mnMasterPages + 1 )
+		 .appendAscii( ".xml" )
+		 .makeStringAndClear() );
+
+    pFS->startElementNS( XML_p, XML_notesMaster, PNMSS, FSEND );
+
+    pFS->startElementNS( XML_p, XML_cSld, FSEND );
+
+    Reference< XPropertySet > aXBackgroundPropSet;
+    if( ImplGetPropertyValue( mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ) ) &&
+	( mAny >>= aXBackgroundPropSet ) )
+	ImplWriteBackground( pFS, aXBackgroundPropSet );
+
+    WriteShapeTree( pFS, NOTICE, TRUE );
+
+    pFS->endElementNS( XML_p, XML_cSld );
+
+    // color map - now it uses colors from hardcoded theme, once we eventually generate theme, this might need update
+    pFS->singleElementNS( XML_p, XML_clrMap,
+                          XML_bg1, "lt1",
+                          XML_bg2, "lt2",
+                          XML_tx1, "dk1",
+                          XML_tx2, "dk2",
+                          XML_accent1, "accent1",
+                          XML_accent2, "accent2",
+                          XML_accent3, "accent3",
+                          XML_accent4, "accent4",
+                          XML_accent5, "accent5",
+                          XML_accent6, "accent6",
+                          XML_hlink, "hlink",
+                          XML_folHlink, "folHlink",
+                          FSEND );
+
+    pFS->endElementNS( XML_p, XML_notesMaster );
+
+    DBG(printf("----------------\n"));
+
+    return TRUE;
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+sal_Bool PowerPointExport::ImplCreateMainNotes()
+{
+    if( mbCreateNotes )
+	return WriteNotesMaster();
+
+    return TRUE;
+}
+
+//------------------------------------------------------------------------------------------------------------------------------------------------------------------
+
+drawingml::chart::ChartConverter& PowerPointExport::getChartConverter()
+{
+    return *mxChartConv;
+}
+
+#define IMPL_NAME "com.sun.star.comp.Impress.oox.PowerPointExport"
+
+OUString SAL_CALL PowerPointExport_getImplementationName() throw()
+{
+    return CREATE_OUSTRING( IMPL_NAME );
+}
+
+uno::Sequence< OUString > SAL_CALL PowerPointExport_getSupportedServiceNames() throw()
+{
+    const OUString aServiceName = CREATE_OUSTRING( "com.sun.star.comp.ooxpptx" );
+    const Sequence< OUString > aSeq( &aServiceName, 1 );
+    return aSeq;
+}
+
+uno::Reference< uno::XInterface > SAL_CALL PowerPointExport_createInstance(const uno::Reference< lang::XMultiServiceFactory > & rSMgr ) throw( uno::Exception )
+{
+    return (cppu::OWeakObject*)new PowerPointExport( rSMgr );
+}
+
+OUString PowerPointExport::implGetImplementationName() const
+{
+    return PowerPointExport_getImplementationName();
+}
+}
+}
+
+// UNO component
+// ------------------------------------------
+// - component_getImplementationEnvironment -
+// ------------------------------------------
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+SAL_DLLPUBLIC_EXPORT void SAL_CALL component_getImplementationEnvironment( const sal_Char ** ppEnvTypeName, uno_Environment ** /* ppEnv */ )
+{
+	*ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;
+}
+
+// -----------------------
+// - component_writeInfo -
+// -----------------------
+
+SAL_DLLPUBLIC_EXPORT sal_Bool SAL_CALL component_writeInfo( void* /* pServiceManager */, void* pRegistryKey )
+{
+	sal_Bool bRet = sal_False;
+
+	if( pRegistryKey )
+	{
+		try
+		{
+			uno::Reference< registry::XRegistryKey > xNewKey1(
+				static_cast< registry::XRegistryKey* >( pRegistryKey )->createKey(                                
+                ::rtl::OUString::createFromAscii( IMPL_NAME "/UNO/SERVICES/" ) ) );
+            xNewKey1->createKey( oox::core::PowerPointExport_getSupportedServiceNames().getConstArray()[0] );
+
+			bRet = sal_True;
+		}
+		catch( registry::InvalidRegistryException& )
+		{
+			OSL_ENSURE( sal_False, "### InvalidRegistryException!" );
+		}
+	}
+
+	return bRet;
+}
+
+// ------------------------
+// - component_getFactory -
+// ------------------------
+
+SAL_DLLPUBLIC_EXPORT void* SAL_CALL component_getFactory( const sal_Char* pImplName, void* pServiceManager, void* /* pRegistryKey */ )
+{
+	uno::Reference< lang::XSingleServiceFactory > xFactory;
+	void*									pRet = 0;
+
+	if( rtl_str_compare( pImplName, IMPL_NAME ) == 0 )
+	{
+		const ::rtl::OUString aServiceName( ::rtl::OUString::createFromAscii( IMPL_NAME ) );
+
+		xFactory = uno::Reference< lang::XSingleServiceFactory >( ::cppu::createSingleFactory(
+						reinterpret_cast< lang::XMultiServiceFactory* >( pServiceManager ),
+						oox::core::PowerPointExport_getImplementationName(),
+						oox::core::PowerPointExport_createInstance,
+                        oox::core::PowerPointExport_getSupportedServiceNames() ) );
+	}
+
+	if( xFactory.is() )
+	{
+		xFactory->acquire();
+		pRet = xFactory.get();
+	}
+
+	return pRet;
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+DBG(
+void dump_pset(Reference< XPropertySet > rXPropSet)
+{
+    Reference< XPropertySetInfo > info = rXPropSet->getPropertySetInfo ();
+    Sequence< beans::Property > props = info->getProperties ();
+
+    for (int i=0; i < props.getLength (); i++) {
+        OString name = OUStringToOString( props [i].Name, RTL_TEXTENCODING_UTF8);
+        printf ("%30s = ", name.getStr() );
+
+        Any value = rXPropSet->getPropertyValue( props [i].Name );
+
+        OUString strValue;
+        sal_Int32 intValue;
+        bool boolValue;
+        RectanglePoint pointValue;
+
+        if( value >>= strValue )
+            printf ("\"%s\"\n", USS( strValue ) );
+        else if( value >>= intValue )
+            printf ("%d            (hex: %x)\n", intValue, intValue);
+        else if( value >>= boolValue )
+            printf ("%d            (bool)\n", boolValue);
+        else if( value >>= pointValue )
+            printf ("%d            (RectanglePoint)\n", pointValue);
+        else
+            printf ("???           <unhandled type>\n");
+    }
+}
+);
diff --git sd/source/filter/eppt/epptooxml.hxx sd/source/filter/eppt/epptooxml.hxx
new file mode 100644
index 0000000..2a49d1f
--- /dev/null
+++ sd/source/filter/pptx/epptooxml.hxx
@@ -0,0 +1,120 @@
+#ifndef EPPT_POWERPOINT_EXPORT_HXX
+#define EPPT_POWERPOINT_EXPORT_HXX
+
+#include <oox/core/xmlfilterbase.hxx>
+#include <oox/helper/zipstorage.hxx>
+
+#include "epptbase.hxx"
+
+namespace oox {
+    namespace drawingml {
+        class ShapeExport;
+    }
+namespace core {
+
+class PowerPointShapeExport;
+
+struct LayoutInfo
+{
+    std::vector< sal_Int32 > mnFileIdArray;
+};
+
+enum PlaceholderType
+{
+    None,
+    SlideImage,
+    Notes,
+    Header,
+    Footer,
+    SlideNumber,
+    DateAndTime,
+    Outliner,
+    Title,
+    Subtitle
+};
+
+class PowerPointExport : public XmlFilterBase, public PPTWriterBase
+{
+    friend class PowerPointShapeExport;
+public:
+
+    PowerPointExport( const com::sun::star::uno::Reference< com::sun::star::lang::XMultiServiceFactory > & rSMgr  );
+    ~PowerPointExport();
+
+    // from FilterBase
+    virtual bool importDocument() throw();
+    virtual bool exportDocument() throw();
+
+    // only needed for import, leave them empty, refactor later XmlFilterBase to export and import base?
+    virtual sal_Int32 getSchemeClr( sal_Int32 /* nColorSchemeToken */ ) const { return 0; }
+    virtual const oox::vml::DrawingPtr getDrawings() { return oox::vml::DrawingPtr(); }
+    virtual const oox::drawingml::Theme* getCurrentTheme() const { return NULL; }
+    virtual const oox::drawingml::table::TableStyleListPtr getTableStyles() { return oox::drawingml::table::TableStyleListPtr(); }
+    virtual oox::drawingml::chart::ChartConverter& getChartConverter();
+
+    static const char* GetSideDirection( sal_uInt8 nDirection );
+    static const char* GetCornerDirection( sal_uInt8 nDirection );
+    static const char* Get8Direction( sal_uInt8 nDirection );
+
+protected:
+
+    virtual void ImplWriteSlide( sal_uInt32 nPageNum, sal_uInt32 nMasterNum, sal_uInt16 nMode,
+                                 sal_Bool bHasBackground, ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXBackgroundPropSet );
+    virtual void ImplWriteNotes( sal_uInt32 nPageNum );
+    virtual void ImplWriteSlideMaster( sal_uInt32 nPageNum, ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXBackgroundPropSet );
+    virtual void ImplWriteLayout( sal_Int32 nOffset, sal_uInt32 nMasterNum );
+    void WriteTheme( sal_Int32 nThemeNum );
+
+    virtual sal_Bool ImplCreateDocument();
+    virtual sal_Bool ImplCreateMainNotes();
+
+    sal_Bool WriteNotesMaster();
+
+    void WriteTextStyles( ::sax_fastparser::FSHelperPtr pFS );
+    void WriteTextStyle( ::sax_fastparser::FSHelperPtr pFS, int nInstance, sal_Int32 xmlToken );
+    void WriteTextStyleLevel( ::sax_fastparser::FSHelperPtr pFS, int nInstance, int nLevel );
+    void ImplWriteBackground( ::sax_fastparser::FSHelperPtr pFS, ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXBackgroundPropSet );
+
+    sal_Int32 GetLayoutFileId( sal_Int32 nOffset, sal_uInt32 nMasterNum );
+
+    // shapes
+    void WriteShapeTree( ::sax_fastparser::FSHelperPtr pFS, PageType ePageType, sal_Bool bMaster );
+
+    void WritePlaceholderShape( ::sax_fastparser::FSHelperPtr pFS, drawingml::ShapeExport& rDML, PlaceholderType ePlaceholder );
+    void WritePageShape( ::sax_fastparser::FSHelperPtr pFS, drawingml::ShapeExport& rDML, PageType ePageType );
+
+    // helper parts
+    sal_Bool WritePlaceholder( ::sax_fastparser::FSHelperPtr pFS, drawingml::ShapeExport& rDML, PlaceholderType ePlaceholder, sal_Bool bMaster );
+
+    sal_uInt32 GetNewSlideId() { return mnSlideIdMax ++; }
+    sal_uInt32 GetNewSlideMasterId() { return mnSlideMasterIdMax ++; }
+
+private:
+    void AddLayoutIdAndRelation( ::sax_fastparser::FSHelperPtr pFS, sal_Int32 nLayoutFileId );
+
+    virtual ::rtl::OUString implGetImplementationName() const;
+
+    ::boost::shared_ptr< ::oox::drawingml::chart::ChartConverter > mxChartConv;
+
+    ::sax_fastparser::FSHelperPtr mPresentationFS;
+
+    LayoutInfo mLayoutInfo[EPP_LAYOUT_SIZE];
+    std::vector< ::sax_fastparser::FSHelperPtr > mpSlidesFSArray;
+    std::vector< ::sax_fastparser::FSHelperPtr > mpMasterFSArray;
+    sal_Int32 mnLayoutFileIdMax;
+
+    sal_uInt32 mnSlideIdMax;
+    sal_uInt32 mnSlideMasterIdMax;
+
+    sal_Int32 mnShapeIdMax;
+    sal_Int32 mnPictureIdMax;
+
+    sal_Bool mbCreateNotes;
+
+    static sal_Int32 nStyleLevelToken[5];
+};
+
+}
+}
+
+#endif
diff --git sd/source/filter/eppt/epptso.cxx sd/source/filter/eppt/epptso.cxx
index 84d6e3b..c846a85 100644
--- sd/source/filter/pptx/pptx-epptso.cxx
+++ sd/source/filter/pptx/pptx-epptso.cxx
@@ -32,6 +32,7 @@
 #include "precompiled_sd.hxx"
 #include <osl/endian.h>
 #include <eppt.hxx>
+#include "text.hxx"
 #include "epptdef.hxx"
 #ifndef _PptEscherEx_HXX
 #include "escherex.hxx"
@@ -46,7 +47,6 @@
 #include <vcl/virdev.hxx>
 #include <vcl/gradient.hxx>
 #include <sfx2/app.hxx>
-#include <svtools/languageoptions.hxx>
 //#ifndef _SVX_XIT_HXX
 //#include <svx/xit.hxx>
 //#endif
@@ -55,7 +55,6 @@
 #include <svx/svdoashp.hxx>
 #include <com/sun/star/style/VerticalAlignment.hpp>
 #include <com/sun/star/container/XIndexReplace.hpp>
-#include <com/sun/star/presentation/XPresentationPage.hpp>
 #include <com/sun/star/awt/XFont.hpp>
 #ifndef _COM_SUN_STAR_AWT_XFONTWEIGHT_HPP_
 #include <com/sun/star/awt/FontWeight.hpp>
@@ -63,9 +62,6 @@
 #ifndef _COM_SUN_STAR_AWT_XFONTUNDERLINE_HPP_
 #include <com/sun/star/awt/FontUnderline.hpp>
 #endif
-#include <com/sun/star/style/ParagraphAdjust.hpp>
-#include <com/sun/star/style/LineSpacing.hpp>
-#include <com/sun/star/style/LineSpacingMode.hpp>
 #ifndef _COM_SUN_STAR_STYLE_XSTYLEFAMILIESSUPPLIER_PP_
 #include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
 #endif
@@ -154,9 +150,6 @@ using namespace ::com::sun::star;
 
 // ---------------------------------------------------------------------------------------------
 
-com::sun::star::uno::Reference< com::sun::star::i18n::XBreakIterator > xPPTBreakIter;
-com::sun::star::uno::Reference< com::sun::star::i18n::XScriptTypeDetector > xScriptTypeDetector;
-
 PPTExBulletProvider::PPTExBulletProvider()
 {
     pGraphicProv = new EscherGraphicProvider( _E_GRAPH_PROV_USE_INSTANCES  | _E_GRAPH_PROV_DO_NOT_ROTATE_METAFILES );
@@ -215,219 +208,6 @@ sal_uInt16 PPTExBulletProvider::GetId( const ByteString& rUniqueId, Size& rGraph
 
 // ---------------------------------------------------------------------------------------------
 
-GroupTable::GroupTable() :
-    mnCurrentGroupEntry ( 0 ),
-    mnMaxGroupEntry     ( 0 ),
-    mnGroupsClosed      ( 0 ),
-    mpGroupEntry        ( NULL )
-{
-    ImplResizeGroupTable( 32 );
-}
-
-// ---------------------------------------------------------------------------------------------
-
-GroupTable::~GroupTable()
-{
-    for ( sal_uInt32 i = 0; i < mnCurrentGroupEntry; delete mpGroupEntry[ i++ ] ) ;
-    delete[] mpGroupEntry;
-}
-
-// ---------------------------------------------------------------------------------------------
-
-void GroupTable::ImplResizeGroupTable( sal_uInt32 nEntrys )
-{
-    if ( nEntrys > mnMaxGroupEntry )
-    {
-        mnMaxGroupEntry         = nEntrys;
-        GroupEntry** pTemp = new GroupEntry*[ nEntrys ];
-        for ( sal_uInt32 i = 0; i < mnCurrentGroupEntry; i++ )
-            pTemp[ i ] = mpGroupEntry[ i ];
-        if ( mpGroupEntry )
-            delete[] mpGroupEntry;
-        mpGroupEntry = pTemp;
-    }
-}
-
-// ---------------------------------------------------------------------------------------------
-
-sal_Bool GroupTable::EnterGroup( ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess >& rXIndexAccessRef )
-{
-    sal_Bool bRet = sal_False;
-    if ( rXIndexAccessRef.is() )
-    {
-        GroupEntry* pNewGroup = new GroupEntry( rXIndexAccessRef );
-        if ( pNewGroup->mnCount )
-        {
-            if ( mnMaxGroupEntry == mnCurrentGroupEntry )
-                ImplResizeGroupTable( mnMaxGroupEntry + 8 );
-            mpGroupEntry[ mnCurrentGroupEntry++ ] = pNewGroup;
-            bRet = sal_True;
-        }
-        else
-            delete pNewGroup;
-    }
-    return bRet;
-}
-
-// ---------------------------------------------------------------------------------------------
-
-sal_uInt32 GroupTable::GetGroupsClosed()
-{
-    sal_uInt32 nRet = mnGroupsClosed;
-    mnGroupsClosed = 0;
-    return nRet;
-}
-
-// ---------------------------------------------------------------------------------------------
-
-void GroupTable::ClearGroupTable()
-{
-    for ( sal_uInt32 i = 0; i < mnCurrentGroupEntry; i++, delete mpGroupEntry[ i ] ) ;
-    mnCurrentGroupEntry = 0;
-}
-
-// ---------------------------------------------------------------------------------------------
-
-void GroupTable::ResetGroupTable( sal_uInt32 nCount )
-{
-    ClearGroupTable();
-    mpGroupEntry[ mnCurrentGroupEntry++ ] = new GroupEntry( nCount );
-}
-
-// ---------------------------------------------------------------------------------------------
-
-sal_Bool GroupTable::GetNextGroupEntry()
-{
-    while ( mnCurrentGroupEntry )
-    {
-        mnIndex = mpGroupEntry[ mnCurrentGroupEntry - 1 ]->mnCurrentPos++;
-
-        if ( mpGroupEntry[ mnCurrentGroupEntry - 1 ]->mnCount > mnIndex )
-            return TRUE;
-
-        delete ( mpGroupEntry[ --mnCurrentGroupEntry ] );
-
-        if ( mnCurrentGroupEntry )
-            mnGroupsClosed++;
-    }
-    return FALSE;
-}
-
-// ---------------------------------------------------------------------------------------------
-
-void GroupTable::SkipCurrentGroup()
-{
-    if ( mnCurrentGroupEntry )
-        delete ( mpGroupEntry[ --mnCurrentGroupEntry ] );
-}
-
-// ---------------------------------------------------------------------------------------------
-
-FontCollectionEntry::~FontCollectionEntry()
-{
-}
-
-// ---------------------------------------------------------------------------------------------
-
-void FontCollectionEntry::ImplInit( const String& rName )
-{
-    String aSubstName( GetSubsFontName( rName, SUBSFONT_ONLYONE | SUBSFONT_MS ) );
-    if ( aSubstName.Len() )
-    {
-        Name = aSubstName;
-        bIsConverted = sal_True;
-    }
-    else
-    {
-        Name = rName;
-        bIsConverted = sal_False;
-    }
-}
-
-FontCollection::~FontCollection()
-{
-    for( void* pStr = List::First(); pStr; pStr = List::Next() )
-        delete (FontCollectionEntry*)pStr;
-    delete pVDev;
-	xPPTBreakIter = NULL;
-	xScriptTypeDetector = NULL;
-}
-
-FontCollection::FontCollection() :
-    pVDev ( NULL )
-{
-	com::sun::star::uno::Reference< com::sun::star::lang::XMultiServiceFactory >
-		xMSF = ::comphelper::getProcessServiceFactory();
-	com::sun::star::uno::Reference< com::sun::star::uno::XInterface >
-		xInterface = xMSF->createInstance( rtl::OUString::createFromAscii( "com.sun.star.i18n.BreakIterator" ) );
-	if ( xInterface.is() )
-		xPPTBreakIter = com::sun::star::uno::Reference< com::sun::star::i18n::XBreakIterator >
-			( xInterface, com::sun::star::uno::UNO_QUERY );
-
-	xInterface = xMSF->createInstance( rtl::OUString::createFromAscii( "com.sun.star.i18n.ScriptTypeDetector" ) );
-	if ( xInterface.is() )
-		xScriptTypeDetector = com::sun::star::uno::Reference< com::sun::star::i18n::XScriptTypeDetector >
-			( xInterface, com::sun::star::uno::UNO_QUERY );
-}
-
-short FontCollection::GetScriptDirection( const String& rString ) const
-{
-	short nRet = com::sun::star::i18n::ScriptDirection::NEUTRAL;
-	if ( xScriptTypeDetector.is() )
-	{
-		const rtl::OUString sT( rString );
-		nRet = xScriptTypeDetector->getScriptDirection( sT, 0, com::sun::star::i18n::ScriptDirection::NEUTRAL );
-	}
-	return nRet;
-}
-
-sal_uInt32 FontCollection::GetId( FontCollectionEntry& rEntry )
-{
-    if( rEntry.Name.Len() )
-    {
-        const sal_uInt32 nFonts = GetCount();
-
-        for( sal_uInt32 i = 0; i < nFonts; i++ )
-        {
-            const FontCollectionEntry* pEntry = GetById( i );
-            if( pEntry->Name == rEntry.Name )
-                return i;
-        }
-		Font aFont;
-		aFont.SetCharSet( rEntry.CharSet );
-		aFont.SetName( rEntry.Original );
-//		aFont.SetFamily( rEntry.Family );
-//		aFont.SetPitch( rEntry.Pitch );
-        aFont.SetHeight( 100 );
-
-        if ( !pVDev )
-            pVDev = new VirtualDevice;
-
-        pVDev->SetFont( aFont );
-		FontMetric aMetric( pVDev->GetFontMetric() );
-
-        sal_uInt16 nTxtHeight = (sal_uInt16)aMetric.GetAscent() + (sal_uInt16)aMetric.GetDescent();
-
-        if ( nTxtHeight )
-        {
-		    double fScaling = (double)nTxtHeight / 120.0;
-            if ( ( fScaling > 0.50 ) && ( fScaling < 1.5 ) )
-                rEntry.Scaling = fScaling;
-        }
-
-        List::Insert( new FontCollectionEntry( rEntry ), LIST_APPEND );
-        return nFonts;
-    }
-    return 0;
-}
-
-const FontCollectionEntry* FontCollection::GetById( sal_uInt32 nId )
-{
-    return (FontCollectionEntry*)List::GetObject( nId );
-}
-
-// ---------------------------------------------------------------------------------------------
-
 sal_uInt32 PPTWriter::ImplVBAInfoContainer( SvStream* pStrm )
 {
     sal_uInt32 nSize = 28;
@@ -977,360 +757,6 @@ sal_Bool PropStateValue::ImplGetPropertyValue( const String& rString, sal_Bool b
 
 // ---------------------------------------------------------------------------------------------
 
-sal_Bool PPTWriter::ImplInitSOIface()
-{
-    while( TRUE )
-    {
-        mXDrawPagesSupplier = ::com::sun::star::uno::Reference<
-            ::com::sun::star::drawing::XDrawPagesSupplier >
-                ( mXModel, ::com::sun::star::uno::UNO_QUERY );
-        if ( !mXDrawPagesSupplier.is() )
-            break;
-
-        mXMasterPagesSupplier = ::com::sun::star::uno::Reference<
-            ::com::sun::star::drawing::XMasterPagesSupplier >
-                ( mXModel, ::com::sun::star::uno::UNO_QUERY );
-        if ( !mXMasterPagesSupplier.is() )
-            break;
-        mXDrawPages = mXMasterPagesSupplier->getMasterPages();
-        if ( !mXDrawPages.is() )
-            break;
-        mnMasterPages = mXDrawPages->getCount();
-        mXDrawPages = mXDrawPagesSupplier->getDrawPages();
-        if( !mXDrawPages.is() )
-            break;
-        mnPages =  mXDrawPages->getCount();
-        if ( !ImplGetPageByIndex( 0, NORMAL ) )
-            break;
-
-        return TRUE;
-    }
-    return FALSE;
-}
-
-// ---------------------------------------------------------------------------------------------
-
-sal_Bool PPTWriter::ImplSetCurrentStyleSheet( sal_uInt32 nPageNum )
-{
-	sal_Bool bRet = sal_False;
-	if ( nPageNum >= maStyleSheetList.size() )
-		nPageNum = 0;
-	else
-		bRet = sal_True;
-	mpStyleSheet = maStyleSheetList[ nPageNum ];
-	return bRet;
-}
-
-// ---------------------------------------------------------------------------------------------
-
-sal_Bool PPTWriter::ImplGetPageByIndex( sal_uInt32 nIndex, PageType ePageType )
-{
-    while( TRUE )
-    {
-        if ( ePageType != meLatestPageType )
-        {
-            switch( ePageType )
-            {
-                case NORMAL :
-                case NOTICE :
-                {
-                    mXDrawPages = mXDrawPagesSupplier->getDrawPages();
-                    if( !mXDrawPages.is() )
-                        return FALSE;
-                }
-                break;
-
-                case MASTER :
-                {
-                    mXDrawPages = mXMasterPagesSupplier->getMasterPages();
-                    if( !mXDrawPages.is() )
-                        return FALSE;
-                }
-                break;
-				default:
-					break;
-            }
-            meLatestPageType = ePageType;
-        }
-        ::com::sun::star::uno::Any aAny( mXDrawPages->getByIndex( nIndex ) );
-        aAny >>= mXDrawPage;
-        if ( !mXDrawPage.is() )
-            break;
-        if ( ePageType == NOTICE )
-        {
-            ::com::sun::star::uno::Reference< ::com::sun::star::presentation::XPresentationPage >
-                aXPresentationPage( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-            if ( !aXPresentationPage.is() )
-                break;
-            mXDrawPage = aXPresentationPage->getNotesPage();
-            if ( !mXDrawPage.is() )
-                break;
-        }
-        mXPagePropSet = ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
-            ( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-        if ( !mXPagePropSet.is() )
-            break;
-
-        mXShapes = ::com::sun::star::uno::Reference<
-            ::com::sun::star::drawing::XShapes >
-                ( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-        if ( !mXShapes.is() )
-            break;
-
-		/* try to get the "real" background PropertySet. If the normal page is not supporting this property, it is
-		   taken the property from the master */
-		sal_Bool bHasBackground = GetPropertyValue( aAny, mXPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ), sal_True );
-		if ( bHasBackground )
-			bHasBackground = ( aAny >>= mXBackgroundPropSet );
-		if ( !bHasBackground )
-		{
-		    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XMasterPageTarget >
-				aXMasterPageTarget( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-		    if ( aXMasterPageTarget.is() )
-			{
-				::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage > aXMasterDrawPage;
-				aXMasterDrawPage = aXMasterPageTarget->getMasterPage();
-				if ( aXMasterDrawPage.is() )
-				{
-					::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > aXMasterPagePropSet;
-					aXMasterPagePropSet = ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
-						( aXMasterDrawPage, ::com::sun::star::uno::UNO_QUERY );
-					if ( aXMasterPagePropSet.is() )
-					{
-						sal_Bool bBackground = GetPropertyValue( aAny, aXMasterPagePropSet,
-								String( RTL_CONSTASCII_USTRINGPARAM( "Background" ) ) );
-						if ( bBackground )
-						{
-							aAny >>= mXBackgroundPropSet;
-						}
-					}
-				}
-			}
-		}
-        return TRUE;
-    }
-    return FALSE;
-}
-
-// ---------------------------------------------------------------------------------------------
-
-sal_Bool PPTWriter::ImplGetShapeByIndex( sal_uInt32 nIndex, sal_Bool bGroup )
-{
-    while(TRUE)
-    {
-        if (  ( bGroup == FALSE ) || ( GetCurrentGroupLevel() == 0 ) )
-        {
-            ::com::sun::star::uno::Any aAny( mXShapes->getByIndex( nIndex ) );
-            aAny >>= mXShape;
-        }
-        else
-        {
-            ::com::sun::star::uno::Any aAny( GetCurrentGroupAccess()->getByIndex( GetCurrentGroupIndex() ) );
-            aAny >>= mXShape;
-        }
-        if ( !mXShape.is() )
-            break;
-
-        ::com::sun::star::uno::Any aAny( mXShape->queryInterface( ::getCppuType( (const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >*) 0 ) ));
-        aAny >>= mXPropSet;
-
-        if ( !mXPropSet.is() )
-            break;
-        maPosition = ImplMapPoint( mXShape->getPosition() );
-        maSize = ImplMapSize( mXShape->getSize() );
-        maRect = Rectangle( Point( maPosition.X, maPosition.Y ), Size( maSize.Width, maSize.Height ) );
-        mType = ByteString( String( mXShape->getShapeType() ), RTL_TEXTENCODING_UTF8 );
-        mType.Erase( 0, 13 );                                   // "com.sun.star." entfernen
-        sal_uInt16 nPos = mType.Search( (const char*)"Shape" );
-        mType.Erase( nPos, 5 );
-
-        mbPresObj = mbEmptyPresObj = FALSE;
-        if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "IsPresentationObject" ) ) ) )
-            mAny >>= mbPresObj;
-
-        if ( mbPresObj && ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "IsEmptyPresentationObject" ) ) ) )
-            mAny >>= mbEmptyPresObj;
-
-        mnAngle = ( PropValue::GetPropertyValue( aAny,
-            mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "RotateAngle" ) ), sal_True ) )
-                ? *((sal_Int32*)aAny.getValue() )
-                : 0;
-
-        return TRUE;
-    }
-    return FALSE;
-}
-
-//  -----------------------------------------------------------------------
-
-sal_uInt32 PPTWriter::ImplGetMasterIndex( PageType ePageType )
-{
-    sal_uInt32 nRetValue = 0;
-    ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XMasterPageTarget >
-        aXMasterPageTarget( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-
-    if ( aXMasterPageTarget.is() )
-    {
-        ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >
-            aXDrawPage = aXMasterPageTarget->getMasterPage();
-        if ( aXDrawPage.is() )
-        {
-            ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
-                aXPropertySet( aXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-
-            if ( aXPropertySet.is() )
-            {
-                if ( ImplGetPropertyValue( aXPropertySet, String( RTL_CONSTASCII_USTRINGPARAM( "Number" ) ) ) )
-                    nRetValue |= *(sal_Int16*)mAny.getValue();
-                if ( nRetValue & 0xffff )           // ueberlauf vermeiden
-                    nRetValue--;
-            }
-        }
-    }
-    if ( ePageType == NOTICE )
-        nRetValue += mnMasterPages;
-    return nRetValue;
-}
-
-//  -----------------------------------------------------------------------
-
-sal_Bool PPTWriter::ImplGetStyleSheets()
-{
-    int             nInstance, nLevel;
-    sal_Bool        bRetValue = sal_False;
-	sal_uInt32		nPageNum;
-
-	for ( nPageNum = 0; nPageNum < mnMasterPages; nPageNum++ )
-	{
-		::com::sun::star::uno::Reference< ::com::sun::star::container::XNamed >
-			aXNamed;
-
-		::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess >
-			aXNameAccess;
-
-		::com::sun::star::uno::Reference< ::com::sun::star::style::XStyleFamiliesSupplier >
-			aXStyleFamiliesSupplier( mXModel, ::com::sun::star::uno::UNO_QUERY );
-
-		::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
-			aXPropSet( mXModel, ::com::sun::star::uno::UNO_QUERY );
-
-		sal_uInt16 nDefaultTab = ( aXPropSet.is() && ImplGetPropertyValue( aXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "TabStop" ) ) ) )
-			? (sal_uInt16)( *(sal_Int32*)mAny.getValue() / 4.40972 )
-			: 1250;
-
-		maStyleSheetList.push_back( new PPTExStyleSheet( nDefaultTab, (PPTExBulletProvider&)*this ) );
-		ImplSetCurrentStyleSheet( nPageNum );
-		if ( ImplGetPageByIndex( nPageNum, MASTER ) )
-			aXNamed = ::com::sun::star::uno::Reference< ::com::sun::star::container::XNamed >
-						( mXDrawPage, ::com::sun::star::uno::UNO_QUERY );
-
-		if ( aXStyleFamiliesSupplier.is() )
-			aXNameAccess = aXStyleFamiliesSupplier->getStyleFamilies();
-
-		bRetValue = aXNamed.is() && aXNameAccess.is() && aXStyleFamiliesSupplier.is();
-		if  ( bRetValue )
-		{
-			for ( nInstance = EPP_TEXTTYPE_Title; nInstance <= EPP_TEXTTYPE_CenterTitle; nInstance++ )
-			{
-				String aStyle;
-				String aFamily;
-				switch ( nInstance )
-				{
-					case EPP_TEXTTYPE_CenterTitle :
-					case EPP_TEXTTYPE_Title :
-					{
-						aStyle = String( RTL_CONSTASCII_USTRINGPARAM( "title" ) );
-						aFamily = aXNamed->getName();
-					}
-					break;
-					case EPP_TEXTTYPE_Body :
-					{
-						aStyle = String( RTL_CONSTASCII_USTRINGPARAM( "outline1" ) );      // SD_LT_SEPARATOR
-						aFamily = aXNamed->getName();
-					}
-					break;
-					case EPP_TEXTTYPE_Other :
-					{
-						aStyle = String( RTL_CONSTASCII_USTRINGPARAM( "standard" ) );
-						aFamily = String( RTL_CONSTASCII_USTRINGPARAM( "graphics" ) );
-					}
-					break;
-					case EPP_TEXTTYPE_CenterBody :
-					{
-						aStyle = String( RTL_CONSTASCII_USTRINGPARAM( "subtitle" ) );
-						aFamily = aXNamed->getName();
-					}
-					break;
-				}
-				if ( aStyle.Len() && aFamily.Len() )
-				{
-					try
-					{
-						::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess >xNameAccess;
-						if ( aXNameAccess->hasByName( aFamily ) )
-						{
-							::com::sun::star::uno::Any aAny( aXNameAccess->getByName( aFamily ) );
-							if( aAny.getValue() && ::cppu::extractInterface( xNameAccess, aAny ) )
-							{
-								::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess > aXFamily;
-								if ( aAny >>= aXFamily )
-								{
-									if ( aXFamily->hasByName( aStyle ) )
-									{
-										::com::sun::star::uno::Reference< ::com::sun::star::style::XStyle > xStyle;
-										aAny = aXFamily->getByName( aStyle );
-										if( aAny.getValue() && ::cppu::extractInterface( xStyle, aAny ) )
-										{
-											::com::sun::star::uno::Reference< ::com::sun::star::style::XStyle > aXStyle;
-											aAny >>= aXStyle;
-											::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
-												xPropSet( aXStyle, ::com::sun::star::uno::UNO_QUERY );
-											if( xPropSet.is() )
-												mpStyleSheet->SetStyleSheet( xPropSet, maFontCollection, nInstance, 0 );
-											for ( nLevel = 1; nLevel < 5; nLevel++ )
-											{
-												if ( nInstance == EPP_TEXTTYPE_Body )
-												{
-													sal_Unicode cTemp = aStyle.GetChar( aStyle.Len() - 1 );
-													aStyle.SetChar( aStyle.Len() - 1, ++cTemp );
-													if ( aXFamily->hasByName( aStyle ) )
-													{
-														aXFamily->getByName( aStyle ) >>= xStyle;
-														if( xStyle.is() )
-														{
-															::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
-																xPropertySet( xStyle, ::com::sun::star::uno::UNO_QUERY );
-															if ( xPropertySet.is() )
-																mpStyleSheet->SetStyleSheet( xPropertySet, maFontCollection, nInstance, nLevel );
-														}
-													}
-												}
-												else
-													mpStyleSheet->SetStyleSheet( xPropSet, maFontCollection, nInstance, nLevel );
-											}
-										}
-									}
-								}
-							}
-						}
-					}
-					catch( ::com::sun::star::uno::Exception& )
-					{
-					//
-					}
-				}
-			}
-			for ( ; nInstance <= EPP_TEXTTYPE_QuarterBody; nInstance++ )
-			{
-
-			}
-		}
-	}
-    return bRetValue;
-}
-
-//  -----------------------------------------------------------------------
-
 void PPTWriter::ImplWriteParagraphs( SvStream& rOut, TextObj& rTextObj )
 {
     sal_Bool            bFirstParagraph = TRUE;
@@ -1707,1385 +1133,6 @@ void PPTWriter::ImplFlipBoundingBox( EscherPropertyContainer& rPropOpt )
 
 //  -----------------------------------------------------------------------
 
-struct FieldEntry
-{
-    sal_uInt32  nFieldType;
-    sal_uInt32  nFieldStartPos;
-    sal_uInt32  nFieldEndPos;
-	String		aRepresentation;
-    String      aFieldUrl;
-
-    FieldEntry( sal_uInt32 nType, sal_uInt32 nStart, sal_uInt32 nEnd )
-    {
-        nFieldType = nType;
-        nFieldStartPos = nStart;
-        nFieldEndPos = nEnd;
-    }
-};
-
-//  -----------------------------------------------------------------------
-
-PortionObj::PortionObj( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
-                FontCollection& rFontCollection ) :
-    mnCharAttrHard      ( 0 ),
-    mnCharAttr          ( 0 ),
-	mnFont              ( 0 ),
-	mnAsianOrComplexFont( 0xffff ),
-    mnTextSize          ( 0 ),
-	mbLastPortion       ( TRUE ),
-    mpText              ( NULL ),
-    mpFieldEntry        ( NULL )
-{
-    mXPropSet = rXPropSet;
-
-    ImplGetPortionValues( rFontCollection, FALSE );
-}
-
-PortionObj::PortionObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > & rXTextRange,
-                            sal_Bool bLast, FontCollection& rFontCollection ) :
-    mnCharAttrHard          ( 0 ),
-    mnCharAttr              ( 0 ),
-    mnFont                  ( 0 ),
-    mnAsianOrComplexFont    ( 0xffff ),
-	mbLastPortion           ( bLast ),
-    mpText                  ( NULL ),
-    mpFieldEntry            ( NULL )
-{
-    String aString( rXTextRange->getString() );
-    String aURL;
-	BOOL bRTL_endingParen = FALSE;
-
-    mnTextSize = aString.Len();
-    if ( bLast )
-        mnTextSize++;
-
-    if ( mnTextSize )
-    {
-        mpFieldEntry = NULL;
-        sal_uInt32 nFieldType = 0;
-
-        mXPropSet = ::com::sun::star::uno::Reference<
-            ::com::sun::star::beans::XPropertySet >
-                ( rXTextRange, ::com::sun::star::uno::UNO_QUERY );
-        mXPropState = ::com::sun::star::uno::Reference<
-            ::com::sun::star::beans::XPropertyState >
-                ( rXTextRange, ::com::sun::star::uno::UNO_QUERY );
-
-        sal_Bool bPropSetsValid = ( mXPropSet.is() && mXPropState.is() );
-        if ( bPropSetsValid )
-            nFieldType = ImplGetTextField( rXTextRange, mXPropSet, aURL );
-        if ( nFieldType )
-        {
-            mpFieldEntry = new FieldEntry( nFieldType, 0, mnTextSize );
-            if ( ( nFieldType >> 28 == 4 ) )
-			{
-				mpFieldEntry->aRepresentation = aString;
-                mpFieldEntry->aFieldUrl = aURL;
-			}
-        }
-        sal_Bool bSymbol = FALSE;
-
-        if ( bPropSetsValid && ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontCharSet" ) ), FALSE ) )
-        {
-            sal_Int16 nCharset;
-            mAny >>= nCharset;
-            if ( nCharset == ::com::sun::star::awt::CharSet::SYMBOL )
-                bSymbol = TRUE;
-        }
-        if ( mpFieldEntry && ( nFieldType & 0x800000 ) )    // placeholder ?
-        {
-            mnTextSize = 1;
-            if ( bLast )
-                mnTextSize++;
-            mpText = new sal_uInt16[ mnTextSize ];
-            mpText[ 0 ] = 0x2a;
-        }
-        else
-        {
-            const sal_Unicode* pText = aString.GetBuffer();
-			// For i39516 - a closing parenthesis that ends an RTL string is displayed backwards by PPT
-			// Solution: add a Unicode Right-to-Left Mark, following the method described in i18024
-			if ( bLast && pText[ aString.Len() - 1 ] == sal_Unicode(')') && rFontCollection.GetScriptDirection( aString ) == com::sun::star::i18n::ScriptDirection::RIGHT_TO_LEFT )
-			{
-				mnTextSize++;
-				bRTL_endingParen = TRUE;
-			}
-            mpText = new sal_uInt16[ mnTextSize ];
-            sal_uInt16 nChar;
-            for ( int i = 0; i < aString.Len(); i++ )
-            {
-                nChar = (sal_uInt16)pText[ i ];
-                if ( nChar == 0xa )
-                    nChar++;
-                else if ( !bSymbol )
-                {
-                    switch ( nChar )
-                    {
-                        // Currency
-                        case 128:   nChar = 0x20AC; break;
-                        // Punctuation and other
-                        case 130:   nChar = 0x201A; break;// SINGLE LOW-9 QUOTATION MARK
-                        case 131:   nChar = 0x0192; break;// LATIN SMALL LETTER F WITH HOOK
-                        case 132:   nChar = 0x201E; break;// DOUBLE LOW-9 QUOTATION MARK
-                                                              // LOW DOUBLE PRIME QUOTATION MARK
-                        case 133:   nChar = 0x2026; break;// HORIZONTAL ELLIPSES
-                        case 134:   nChar = 0x2020; break;// DAGGER
-                        case 135:   nChar = 0x2021; break;// DOUBLE DAGGER
-                        case 136:   nChar = 0x02C6; break;// MODIFIER LETTER CIRCUMFLEX ACCENT
-                        case 137:   nChar = 0x2030; break;// PER MILLE SIGN
-                        case 138:   nChar = 0x0160; break;// LATIN CAPITAL LETTER S WITH CARON
-                        case 139:   nChar = 0x2039; break;// SINGLE LEFT-POINTING ANGLE QUOTATION MARK
-                        case 140:   nChar = 0x0152; break;// LATIN CAPITAL LIGATURE OE
-                        case 142:   nChar = 0x017D; break;// LATIN CAPITAL LETTER Z WITH CARON
-                        case 145:   nChar = 0x2018; break;// LEFT SINGLE QUOTATION MARK
-                                                              // MODIFIER LETTER TURNED COMMA
-                        case 146:   nChar = 0x2019; break;// RIGHT SINGLE QUOTATION MARK
-                                                              // MODIFIER LETTER APOSTROPHE
-                        case 147:   nChar = 0x201C; break;// LEFT DOUBLE QUOTATION MARK
-                                                              // REVERSED DOUBLE PRIME QUOTATION MARK
-                        case 148:   nChar = 0x201D; break;// RIGHT DOUBLE QUOTATION MARK
-                                                              // REVERSED DOUBLE PRIME QUOTATION MARK
-                        case 149:   nChar = 0x2022; break;// BULLET
-                        case 150:   nChar = 0x2013; break;// EN DASH
-                        case 151:   nChar = 0x2014; break;// EM DASH
-                        case 152:   nChar = 0x02DC; break;// SMALL TILDE
-                        case 153:   nChar = 0x2122; break;// TRADE MARK SIGN
-                        case 154:   nChar = 0x0161; break;// LATIN SMALL LETTER S WITH CARON
-                        case 155:   nChar = 0x203A; break;// SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
-                        case 156:   nChar = 0x0153; break;// LATIN SMALL LIGATURE OE
-                        case 158:   nChar = 0x017E; break;// LATIN SMALL LETTER Z WITH CARON
-                        case 159:   nChar = 0x0178; break;// LATIN CAPITAL LETTER Y WITH DIAERESIS
-//                      case 222:   nChar = 0x00B6; break;// PILCROW SIGN / PARAGRAPH SIGN
-                    }
-                }
-                mpText[ i ] = nChar;
-            }
-        }
-		if ( bRTL_endingParen )
-            mpText[ mnTextSize - 2 ] = 0x200F; // Unicode Right-to-Left mark
-
-        if ( bLast )
-            mpText[ mnTextSize - 1 ] = 0xd;
-
-        if ( bPropSetsValid )
-            ImplGetPortionValues( rFontCollection, TRUE );
-    }
-}
-
-PortionObj::PortionObj( PortionObj& rPortionObj )
-: PropStateValue( rPortionObj )
-{
-    ImplConstruct( rPortionObj );
-}
-
-PortionObj::~PortionObj()
-{
-    ImplClear();
-}
-
-void PortionObj::Write( SvStream* pStrm, sal_Bool bLast )
-{
-    sal_uInt32 nCount = mnTextSize;
-    if ( bLast && mbLastPortion )
-        nCount--;
-    for ( sal_uInt32 i = 0; i < nCount; i++ )
-        *pStrm << (sal_uInt16)mpText[ i ];
-}
-
-void PortionObj::ImplGetPortionValues( FontCollection& rFontCollection, sal_Bool bGetPropStateValue )
-{
-
-    sal_Bool bOk = ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontName" ) ), bGetPropStateValue );
-    meFontName = ePropState;
-    if ( bOk )
-    {
-        FontCollectionEntry aFontDesc( *(::rtl::OUString*)mAny.getValue() );
-        sal_uInt32  nCount = rFontCollection.GetCount();
-        mnFont = (sal_uInt16)rFontCollection.GetId( aFontDesc );
-        if ( mnFont == nCount )
-        {
-            FontCollectionEntry& rFontDesc = rFontCollection.GetLast();
-            if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontCharSet" ) ), sal_False ) )
-                mAny >>= rFontDesc.CharSet;
-            if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontFamily" ) ), sal_False ) )
-                mAny >>= rFontDesc.Family;
-            if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontPitch" ) ), sal_False ) )
-                mAny >>= rFontDesc.Pitch;
-        }
-    }
-
-	sal_Int16 nScriptType = SvtLanguageOptions::GetScriptTypeOfLanguage( Application::GetSettings().GetLanguage() );
-	if ( mpText && mnTextSize && xPPTBreakIter.is() )
-	{
-		rtl::OUString sT( mpText, mnTextSize );
-		nScriptType = xPPTBreakIter->getScriptType( sT, 0 );
-	}
-	if ( nScriptType != com::sun::star::i18n::ScriptType::COMPLEX )
-	{
-		bOk = ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontNameAsian" ) ), bGetPropStateValue );
-		meAsianOrComplexFont = ePropState;
-		if ( bOk )
-		{
-			FontCollectionEntry aFontDesc( *(::rtl::OUString*)mAny.getValue() );
-			sal_uInt32  nCount = rFontCollection.GetCount();
-			mnAsianOrComplexFont = (sal_uInt16)rFontCollection.GetId( aFontDesc );
-			if ( mnAsianOrComplexFont == nCount )
-			{
-				FontCollectionEntry& rFontDesc = rFontCollection.GetLast();
-				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontCharSetAsian" ) ), sal_False ) )
-					mAny >>= rFontDesc.CharSet;
-				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontFamilyAsian" ) ), sal_False ) )
-					mAny >>= rFontDesc.Family;
-				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontPitchAsian" ) ), sal_False ) )
-					mAny >>= rFontDesc.Pitch;
-			}
-		}
-	}
-	else
-	{
-		bOk = ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontNameComplex" ) ), bGetPropStateValue );
-		meAsianOrComplexFont = ePropState;
-		if ( bOk )
-		{
-			FontCollectionEntry aFontDesc( *(::rtl::OUString*)mAny.getValue() );
-			sal_uInt32  nCount = rFontCollection.GetCount();
-			mnAsianOrComplexFont = (sal_uInt16)rFontCollection.GetId( aFontDesc );
-			if ( mnAsianOrComplexFont == nCount )
-			{
-				FontCollectionEntry& rFontDesc = rFontCollection.GetLast();
-				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontCharSetComplex" ) ), sal_False ) )
-					mAny >>= rFontDesc.CharSet;
-				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontFamilyComplex" ) ), sal_False ) )
-					mAny >>= rFontDesc.Family;
-				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontPitchComplex" ) ), sal_False ) )
-					mAny >>= rFontDesc.Pitch;
-			}
-		}
-	}
-
-	if ( nScriptType != com::sun::star::i18n::ScriptType::COMPLEX )
-	{
-	    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharWeight" ) ), bGetPropStateValue ) )
-	    {
-		float fFloat;
-		mAny >>= fFloat;
-		if ( fFloat >= ::com::sun::star::awt::FontWeight::SEMIBOLD )
-		    mnCharAttr |= 1;
-	    }
-	}
-	else
-	{
-	    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharWeightComplex" ) ), bGetPropStateValue ) )
-	    {
-		float fFloat;
-		mAny >>= fFloat;
-		if ( fFloat >= ::com::sun::star::awt::FontWeight::SEMIBOLD )
-		    mnCharAttr |= 1;
-	    }
-	}
-
-    if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        mnCharAttrHard |= 1;
-
-	if ( nScriptType != com::sun::star::i18n::ScriptType::COMPLEX )
-	{
-		if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharPosture" ) ), bGetPropStateValue ) )
-		{
-			::com::sun::star::awt::FontSlant aFS;
-			mAny >>= aFS;
-			switch ( aFS )
-			{
-			    case ::com::sun::star::awt::FontSlant_OBLIQUE :
-			    case ::com::sun::star::awt::FontSlant_ITALIC :
-					mnCharAttr |= 2;
-					break;
-				default:
-					break;
-			}
-		}
-	}
-	else
-	{
-		if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharPostureComplex" ) ), bGetPropStateValue ) )
-		{
-			::com::sun::star::awt::FontSlant aFS;
-			mAny >>= aFS;
-			switch ( aFS )
-			{
-			    case ::com::sun::star::awt::FontSlant_OBLIQUE :
-			    case ::com::sun::star::awt::FontSlant_ITALIC :
-					mnCharAttr |= 2;
-					break;
-				default:
-					break;
-			}
-		}
-	}
-
-	if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        mnCharAttrHard |= 2;
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharUnderline" ) ), bGetPropStateValue ) )
-    {
-        sal_Int16 nVal;
-        mAny >>= nVal;
-        switch ( nVal )
-        {
-            case ::com::sun::star::awt::FontUnderline::SINGLE :
-            case ::com::sun::star::awt::FontUnderline::DOUBLE :
-            case ::com::sun::star::awt::FontUnderline::DOTTED :
-                mnCharAttr |= 4;
-        }
-    }
-    if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        mnCharAttrHard |= 4;
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharShadowed" ) ), bGetPropStateValue ) )
-    {
-        sal_Bool bBool;
-        mAny >>= bBool;
-        if ( bBool )
-            mnCharAttr |= 0x10;
-    }
-    if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        mnCharAttrHard |= 16;
-
-	if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharLocale" ) ), bGetPropStateValue ) )
-	{
-		com::sun::star::lang::Locale eLocale;
-		if ( mAny >>= eLocale )
-			meCharLocale = eLocale;
-	}
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharRelief" ) ), bGetPropStateValue ) )
-    {
-        sal_Int16 nVal;
-        mAny >>= nVal;
-        if ( nVal != ::com::sun::star::text::FontRelief::NONE )
-            mnCharAttr |= 512;
-    }
-    if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
-        mnCharAttrHard |= 512;
-
-    mnCharHeight = 24;
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharHeight" ) ), bGetPropStateValue ) )
-    {
-        float fVal;
-        mAny >>= fVal;
-        mnCharHeight = (sal_uInt16)( fVal + 0.5 );
-    }
-    meCharHeight = ePropState;
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharColor" ) ), bGetPropStateValue ) )
-    {
-        sal_uInt32 nSOColor = *( (sal_uInt32*)mAny.getValue() );
-        mnCharColor = nSOColor & 0xff00ff00;                            // green and hibyte
-        mnCharColor |= (sal_uInt8)( nSOColor ) << 16;                   // red and blue is switched
-        mnCharColor |= (sal_uInt8)( nSOColor >> 16 );
-    }
-    meCharColor = ePropState;
-
-    mnCharEscapement = 0;
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharEscapement" ) ), bGetPropStateValue ) )
-    {
-        mAny >>= mnCharEscapement;
-        if ( mnCharEscapement > 100 )
-            mnCharEscapement = 33;
-        else if ( mnCharEscapement < -100 )
-            mnCharEscapement = -33;
-    }
-    meCharEscapement = ePropState;
-}
-
-void PortionObj::ImplClear()
-{
-    delete (FieldEntry*)mpFieldEntry;
-    delete[] mpText;
-}
-
-void PortionObj::ImplConstruct( PortionObj& rPortionObj )
-{
-    mbLastPortion = rPortionObj.mbLastPortion;
-    mnTextSize = rPortionObj.mnTextSize;
-    mnCharColor = rPortionObj.mnCharColor;
-    mnCharEscapement = rPortionObj.mnCharEscapement;
-    mnCharAttr = rPortionObj.mnCharAttr;
-    mnCharHeight = rPortionObj.mnCharHeight;
-    mnFont = rPortionObj.mnFont;
-    mnAsianOrComplexFont = rPortionObj.mnAsianOrComplexFont;
-
-    if ( rPortionObj.mpText )
-    {
-        mpText = new sal_uInt16[ mnTextSize ];
-        memcpy( mpText, rPortionObj.mpText, mnTextSize << 1 );
-    }
-    else
-        mpText = NULL;
-
-    if ( rPortionObj.mpFieldEntry )
-        mpFieldEntry = new FieldEntry( *( rPortionObj.mpFieldEntry ) );
-    else
-        mpFieldEntry = NULL;
-}
-
-sal_uInt32 PortionObj::ImplCalculateTextPositions( sal_uInt32 nCurrentTextPosition )
-{
-    if ( mpFieldEntry && ( !mpFieldEntry->nFieldStartPos ) )
-    {
-        mpFieldEntry->nFieldStartPos += nCurrentTextPosition;
-        mpFieldEntry->nFieldEndPos += nCurrentTextPosition;
-    }
-    return mnTextSize;
-}
-
-//  -----------------------------------------------------------------------
-// Rueckgabe:                           0 = kein TextField
-//  bit28->31   text field type :
-//                                      1 = Date
-//                                      2 = Time
-//                                      3 = SlideNumber
-//                                      4 = Url
-//										5 = DateTime
-//										6 = header
-//										7 = footer
-//  bit24->27   text field sub type	(optional)
-//     23->     PPT Textfield needs a placeholder
-
-sal_uInt32 PortionObj::ImplGetTextField( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > & ,
-	const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet, String& rURL )
-{
-    sal_uInt32 nRetValue = 0;
-    sal_Int32 nFormat;
-	::com::sun::star::uno::Any aAny;
-	if ( GetPropertyValue( aAny, rXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "TextPortionType" ) ), sal_True ) )
-	{
-		String  aTextFieldType( *(::rtl::OUString*)aAny.getValue() );
-		if ( aTextFieldType == String( RTL_CONSTASCII_USTRINGPARAM( "TextField" ) ) )
-		{
-			if ( GetPropertyValue( aAny, rXPropSet, aTextFieldType, sal_True ) )
-			{
-				::com::sun::star::uno::Reference< ::com::sun::star::text::XTextField > aXTextField;
-				if ( aAny >>= aXTextField )
-				{
-					if ( aXTextField.is() )
-					{
-						::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
-							xFieldPropSet( aXTextField, ::com::sun::star::uno::UNO_QUERY );
-						if ( xFieldPropSet.is() )
-						{
-							String aFieldKind( aXTextField->getPresentation( TRUE ) );
-							if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Date" ) ) )
-							{
-								if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsFix" ) ) ), sal_True )
-								{
-									sal_Bool bBool;
-									aAny >>= bBool;
-									if ( !bBool )  // Fixed DateFields gibt es in PPT nicht
-									{
-										if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Format" ) ) ), sal_True )
-										{
-											nFormat = *(sal_Int32*)aAny.getValue();
-											switch ( nFormat )
-											{
-												default:
-												case 5 :
-												case 4 :
-												case 2 : nFormat = 0; break;
-												case 8 :
-												case 9 :
-												case 3 : nFormat = 1; break;
-												case 7 :
-												case 6 : nFormat = 2; break;
-											}
-											nRetValue |= ( ( ( 1 << 4 ) | nFormat ) << 24 ) | 0x800000;
-										}
-									}
-								}
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "URL" ) ) )
-							{
-								if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "URL" ) ) ), sal_True )
-									rURL = String( *(::rtl::OUString*)aAny.getValue() );
-								nRetValue = 4 << 28;
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Page" ) ) )
-							{
-								nRetValue = 3 << 28 | 0x800000;
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Pages" ) ) )
-							{
-
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Time" ) ) )
-							{
-								if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsFix" ) ) ), sal_True )
-								{
-									sal_Bool bBool;
-									aAny >>= bBool;
-									if ( !bBool )
-									{
-										if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsFix" ) ) ), sal_True )
-										{
-											nFormat = *(sal_Int32*)aAny.getValue();
-											nRetValue |= ( ( ( 2 << 4 ) | nFormat ) << 24 ) | 0x800000;
-										}
-									}
-								}
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "File" ) ) )
-							{
-
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Table" ) ) )
-							{
-
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "ExtTime" ) ) )
-							{
-								if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsFix" ) ) ), sal_True )
-								{
-									sal_Bool bBool;
-									aAny >>= bBool;
-									if ( !bBool )
-									{
-										if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Format" ) ) ), sal_True )
-										{
-											nFormat = *(sal_Int32*)aAny.getValue();
-											switch ( nFormat )
-											{
-												default:
-												case 6 :
-												case 7 :
-												case 8 :
-												case 2 : nFormat = 12; break;
-												case 3 : nFormat = 9; break;
-												case 5 :
-												case 4 : nFormat = 10; break;
-
-											}
-											nRetValue |= ( ( ( 2 << 4 ) | nFormat ) << 24 ) | 0x800000;
-										}
-									}
-								}
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "ExtFile" ) ) )
-							{
-
-							}
-							else if ( aFieldKind ==  String( RTL_CONSTASCII_USTRINGPARAM( "Author" ) ) )
-							{
-
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "DateTime" ) ) )
-							{
-								nRetValue = 5 << 28 | 0x800000;
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Header" ) ) )
-							{
-								nRetValue = 6 << 28 | 0x800000;
-							}
-							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Footer" ) ) )
-							{
-								nRetValue = 7 << 28 | 0x800000;
-							}
-						}
-					}
-				}
-			}
-		}
-	}
-    return nRetValue;
-}
-
-PortionObj& PortionObj::operator=( PortionObj& rPortionObj )
-{
-    if ( this != &rPortionObj )
-    {
-        ImplClear();
-        ImplConstruct( rPortionObj );
-    }
-    return *this;
-}
-
-//  -----------------------------------------------------------------------
-
-ParagraphObj::ParagraphObj( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
-                PPTExBulletProvider& rProv ) :
-    maMapModeSrc        ( MAP_100TH_MM ),
-    maMapModeDest       ( MAP_INCH, Point(), Fraction( 1, 576 ), Fraction( 1, 576 ) )
-{
-    mXPropSet = rXPropSet;
-
-    bExtendedParameters = FALSE;
-
-    nDepth = 0;
-    nBulletFlags = 0;
-    nParaFlags = 0;
-
-    ImplGetParagraphValues( rProv, FALSE );
-}
-
-    ParagraphObj::ParagraphObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextContent > & rXTextContent,
-                    ParaFlags aParaFlags, FontCollection& rFontCollection, PPTExBulletProvider& rProv ) :
-    maMapModeSrc        ( MAP_100TH_MM ),
-    maMapModeDest       ( MAP_INCH, Point(), Fraction( 1, 576 ), Fraction( 1, 576 ) ),
-    mbFirstParagraph    ( aParaFlags.bFirstParagraph ),
-    mbLastParagraph     ( aParaFlags.bLastParagraph )
-{
-    bExtendedParameters = FALSE;
-
-    nDepth = 0;
-    nBulletFlags = 0;
-    nParaFlags = 0;
-
-    mXPropSet = ::com::sun::star::uno::Reference<
-        ::com::sun::star::beans::XPropertySet >
-            ( rXTextContent, ::com::sun::star::uno::UNO_QUERY );
-
-    mXPropState = ::com::sun::star::uno::Reference<
-        ::com::sun::star::beans::XPropertyState >
-            ( rXTextContent, ::com::sun::star::uno::UNO_QUERY );
-
-    if ( mXPropSet.is() && mXPropState.is() )
-    {
-        ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumerationAccess >
-            aXTextPortionEA( rXTextContent, ::com::sun::star::uno::UNO_QUERY );
-        if ( aXTextPortionEA.is() )
-        {
-            ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumeration >
-                aXTextPortionE( aXTextPortionEA->createEnumeration() );
-            if ( aXTextPortionE.is() )
-            {
-                while ( aXTextPortionE->hasMoreElements() )
-                {
-                    ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > aXCursorText;
-                    ::com::sun::star::uno::Any aAny( aXTextPortionE->nextElement() );
-                    if ( aAny >>= aXCursorText )
-                    {
-                        PortionObj* pPortionObj = new PortionObj( aXCursorText, !aXTextPortionE->hasMoreElements(), rFontCollection );
-                        if ( pPortionObj->Count() )
-                            Insert( pPortionObj, LIST_APPEND );
-                        else
-                            delete pPortionObj;
-                    }
-                }
-            }
-        }
-        ImplGetParagraphValues( rProv, TRUE );//
-    }
-}
-
-ParagraphObj::ParagraphObj( ParagraphObj& rObj )
-: List()
-, PropStateValue()
-, SOParagraph()
-{
-    ImplConstruct( rObj );
-}
-
-ParagraphObj::~ParagraphObj()
-{
-    ImplClear();
-}
-
-void ParagraphObj::Write( SvStream* pStrm )
-{
-    for ( void* pPtr = First(); pPtr; pPtr = Next() )
-        ((PortionObj*)pPtr)->Write( pStrm, mbLastParagraph );
-}
-
-void ParagraphObj::ImplClear()
-{
-    for ( void* pPtr = First(); pPtr; pPtr = Next() )
-        delete (PortionObj*)pPtr;
-}
-
-void ParagraphObj::CalculateGraphicBulletSize( sal_uInt16 nFontHeight )
-{
-    if ( ( (SvxExtNumType)nNumberingType == SVX_NUM_BITMAP ) && ( nBulletId != 0xffff ) )
-    {
-        // calculate the bulletrealsize for this grafik
-        if ( aBuGraSize.Width() && aBuGraSize.Height() )
-        {
-            double fCharHeight = nFontHeight;
-            double fLen = aBuGraSize.Height();
-            fCharHeight = fCharHeight * 0.2540;
-            double fQuo = fLen / fCharHeight;
-            nBulletRealSize = (sal_Int16)( fQuo + 0.5 );
-            if ( (sal_uInt16)nBulletRealSize > 400 )
-                nBulletRealSize = 400;
-        }
-    }
-}
-
-// from sw/source/filter/ww8/wrtw8num.cxx for default bullets to export to MS intact
-static void lcl_SubstituteBullet(String& rNumStr, rtl_TextEncoding& rChrSet, String& rFontName)
-{
-	StarSymbolToMSMultiFont *pConvert = 0;
-	FontFamily eFamily = FAMILY_DECORATIVE;
-
-	if (!pConvert)
-	{
-		pConvert = CreateStarSymbolToMSMultiFont();
-	}    
-	sal_Unicode cChar = rNumStr.GetChar(0);
-	String sFont = pConvert->ConvertChar(cChar);
-	if (sFont.Len())
-	{
-		rNumStr = static_cast< sal_Unicode >(cChar | 0xF000);
-		rFontName = sFont;
-		rChrSet = RTL_TEXTENCODING_SYMBOL;
-	}
-	else if ( (rNumStr.GetChar(0) < 0xE000 || rNumStr.GetChar(0) > 0xF8FF) )
-	{
-		/*
-		Ok we can't fit into a known windows unicode font, but
-		we are not in the private area, so we are a
-		standardized symbol, so turn off the symbol bit and
-		let words own font substitution kick in
-		*/
-		rChrSet = RTL_TEXTENCODING_UNICODE;
-		eFamily = FAMILY_SWISS;
-		rFontName = ::GetFontToken(rFontName, 0);
-	}
-	else
-	{
-		/*
-		Well we don't have an available substition, and we're
-		in our private area, so give up and show a standard
-		bullet symbol
-		*/
-		rFontName.AssignAscii(RTL_CONSTASCII_STRINGPARAM("Wingdings"));
-		rNumStr = static_cast< sal_Unicode >(0x6C);
-     }      
-     delete pConvert;
-}
-
-void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider& rBuProv, sal_Int16 nNumberingDepth, sal_Bool bIsBullet, sal_Bool bGetPropStateValue )
-{
-	::com::sun::star::uno::Any aAny;
-	if ( GetPropertyValue( aAny, mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "ParaLeftMargin" ) ) ) )
-	{
-		sal_Int32 nVal;
-        if ( aAny >>= nVal )
-			nTextOfs = static_cast< sal_Int16 >( nVal / ( 2540.0 / 576 ) + 0.5 ) ;
-	}
-    if ( GetPropertyValue( aAny, mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "ParaFirstLineIndent" ) ) ) )
-	{
-        if ( aAny >>= nBulletOfs )
-			nBulletOfs = static_cast< sal_Int32 >( nBulletOfs / ( 2540.0 / 576 ) + 0.5 );
-	}
-	if ( GetPropertyValue( aAny, mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "NumberingIsNumber" ) ) ) )
-		aAny >>= bNumberingIsNumber;
-
-	::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexReplace > aXIndexReplace;
-
-    if ( bIsBullet && ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "NumberingRules" ) ), bGetPropStateValue ) )
-    {
-        if ( ( mAny >>= aXIndexReplace ) && nNumberingDepth < aXIndexReplace->getCount() )
-        {
-            mAny <<= aXIndexReplace->getByIndex( nNumberingDepth );
-            ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue>
-                aPropertySequence( *( ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue>*)mAny.getValue() );
-
-            const ::com::sun::star::beans::PropertyValue* pPropValue = aPropertySequence.getArray();
-
-            sal_Int32 nPropertyCount = aPropertySequence.getLength();
-            if ( nPropertyCount )
-            {
-                bExtendedParameters = TRUE;
-                nBulletRealSize = 100;
-                nMappedNumType = 0;
-
-                String aGraphicURL;
-                for ( sal_Int32 i = 0; i < nPropertyCount; i++ )
-                {
-                    const void* pValue = pPropValue[ i ].Value.getValue();
-                    if ( pValue )
-                    {
-                        ::rtl::OUString aPropName( pPropValue[ i ].Name );
-                        if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "NumberingType" ) ) )
-                            nNumberingType = *( (sal_Int16*)pValue );
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "Adjust" ) ) )
-                            nHorzAdjust = *( (sal_Int16*)pValue );
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "BulletChar" ) ) )
-                        {
-                            String aString( *( (String*)pValue ) );
-                            if ( aString.Len() )
-                                cBulletId = aString.GetChar( 0 );
-                        }
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "BulletFont" ) ) )
-                        {
-                            aFontDesc = *( (::com::sun::star::awt::FontDescriptor*)pValue );
-
-                            // Our numbullet dialog has set the wrong textencoding for our "StarSymbol" font,
-                            // instead of a Unicode encoding the encoding RTL_TEXTENCODING_SYMBOL was used.
-                            // Because there might exist a lot of damaged documemts I added this two lines
-                            // which fixes the bullet problem for the export.
-                            if ( aFontDesc.Name.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "StarSymbol" ) ) )
-                                aFontDesc.CharSet = RTL_TEXTENCODING_MS_1252;
-
-                        }
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "GraphicURL" ) ) )
-                            aGraphicURL = ( *(::rtl::OUString*)pValue );
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "GraphicSize" ) ) )
-                        {
-                            if ( pPropValue[ i ].Value.getValueType() == ::getCppuType( (::com::sun::star::awt::Size*)0) ) 
-                            {
-                                // don't cast awt::Size to Size as on 64-bits they are not the same.
-                                ::com::sun::star::awt::Size aSize;
-                                pPropValue[ i ].Value >>= aSize;
-                                aBuGraSize.nA = aSize.Width;
-                                aBuGraSize.nB = aSize.Height;
-                            }
-                        }
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "StartWith" ) ) )
-                            nStartWith = *( (sal_Int16*)pValue );
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "LeftMargin" ) ) )
-                            nTextOfs = nTextOfs + static_cast< sal_Int16 >( *( (sal_Int32*)pValue ) / ( 2540.0 / 576 ) );
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "FirstLineOffset" ) ) )
-                            nBulletOfs += (sal_Int16)( *( (sal_Int32*)pValue ) / ( 2540.0 / 576 ) );
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "BulletColor" ) ) )
-                        {
-                            sal_uInt32 nSOColor = *( (sal_uInt32*)pValue );
-                            nBulletColor = nSOColor & 0xff00ff00;                       // green and hibyte
-                            nBulletColor |= (sal_uInt8)( nSOColor ) << 16;              // red
-                            nBulletColor |= (sal_uInt8)( nSOColor >> 16 ) | 0xfe000000; // blue
-                        }
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "BulletRelSize" ) ) )
-                        {
-                            nBulletRealSize = *( (sal_Int16*)pValue );
-                            nParaFlags |= 0x40;
-                            nBulletFlags |= 8;
-                        }
-                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "Prefix" ) ) )
-                            sPrefix = ( *(::rtl::OUString*)pValue );
-                        else if  ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "Suffix" ) ) )
-                            sSuffix = ( *(::rtl::OUString*)pValue );
-#ifdef DBG_UTIL
-                        else if ( ! (
-                                ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "SymbolTextDistance" ) ) )
-                            ||  ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "Graphic" ) ) ) ) )
-                        {
-                            DBG_ERROR( "Unbekanntes Property" );
-                        }
-#endif
-                    }
-                }
-
-                if ( aGraphicURL.Len() )
-                {
-					if ( aBuGraSize.Width() && aBuGraSize.Height() )
-					{
-						xub_StrLen nIndex = aGraphicURL.Search( (sal_Unicode)':', 0 );
-						if ( nIndex != STRING_NOTFOUND )
-						{
-							nIndex++;
-							if ( aGraphicURL.Len() > nIndex  )
-							{
-								ByteString aUniqueId( aGraphicURL, nIndex, aGraphicURL.Len() - nIndex, RTL_TEXTENCODING_UTF8 );
-								if ( aUniqueId.Len() )
-								{
-									nBulletId = rBuProv.GetId( aUniqueId, aBuGraSize );
-									if ( nBulletId != 0xffff )
-										bExtendedBulletsUsed = TRUE;
-								}
-							}
-						}
-					}
-					else
-					{
-						nNumberingType = SVX_NUM_NUMBER_NONE;
-					}
-                }
-
-                PortionObj* pPortion = (PortionObj*)First();
-                CalculateGraphicBulletSize( ( pPortion ) ? pPortion->mnCharHeight : 24 );
-
-                switch( (SvxExtNumType)nNumberingType )
-                {
-                    case SVX_NUM_NUMBER_NONE : nParaFlags |= 0xf; break;
-
-                    case SVX_NUM_CHAR_SPECIAL :                           // Bullet
-                    {
-						if ( aFontDesc.Name.equalsIgnoreAsciiCaseAscii("starsymbol") ||
-							aFontDesc.Name.equalsIgnoreAsciiCaseAscii("opensymbol") ) 
-						{
-							String sFontName = aFontDesc.Name;
-							String sNumStr = cBulletId;
-							rtl_TextEncoding eChrSet = aFontDesc.CharSet;
-                            lcl_SubstituteBullet(sNumStr,eChrSet,sFontName);
-							aFontDesc.Name = sFontName;
-							cBulletId = sNumStr.GetChar( 0 );
-							aFontDesc.CharSet = eChrSet;
-						 }
-
-                        if ( aFontDesc.Name.getLength() )
-                        {
-/*
-                            if ( aFontDesc.CharSet != ::com::sun::star::awt::CharSet::SYMBOL )
-                            {
-                                switch ( cBulletId )
-                                {
-                                    // Currency
-                                    case 128:   cBulletId = 0x20AC; break;
-                                    // Punctuation and other
-                                    case 130:   cBulletId = 0x201A; break;// SINGLE LOW-9 QUOTATION MARK
-                                    case 131:   cBulletId = 0x0192; break;// LATIN SMALL LETTER F WITH HOOK
-                                    case 132:   cBulletId = 0x201E; break;// DOUBLE LOW-9 QUOTATION MARK
-                                                                          // LOW DOUBLE PRIME QUOTATION MARK
-                                    case 133:   cBulletId = 0x2026; break;// HORIZONTAL ELLIPSES
-                                    case 134:   cBulletId = 0x2020; break;// DAGGER
-                                    case 135:   cBulletId = 0x2021; break;// DOUBLE DAGGER
-                                    case 136:   cBulletId = 0x02C6; break;// MODIFIER LETTER CIRCUMFLEX ACCENT
-                                    case 137:   cBulletId = 0x2030; break;// PER MILLE SIGN
-                                    case 138:   cBulletId = 0x0160; break;// LATIN CAPITAL LETTER S WITH CARON
-                                    case 139:   cBulletId = 0x2039; break;// SINGLE LEFT-POINTING ANGLE QUOTATION MARK
-                                    case 140:   cBulletId = 0x0152; break;// LATIN CAPITAL LIGATURE OE
-                                    case 142:   cBulletId = 0x017D; break;// LATIN CAPITAL LETTER Z WITH CARON
-                                    case 145:   cBulletId = 0x2018; break;// LEFT SINGLE QUOTATION MARK
-                                                                          // MODIFIER LETTER TURNED COMMA
-                                    case 146:   cBulletId = 0x2019; break;// RIGHT SINGLE QUOTATION MARK
-                                                                          // MODIFIER LETTER APOSTROPHE
-                                    case 147:   cBulletId = 0x201C; break;// LEFT DOUBLE QUOTATION MARK
-                                                                          // REVERSED DOUBLE PRIME QUOTATION MARK
-                                    case 148:   cBulletId = 0x201D; break;// RIGHT DOUBLE QUOTATION MARK
-                                                                          // REVERSED DOUBLE PRIME QUOTATION MARK
-                                    case 149:   cBulletId = 0x2022; break;// BULLET
-                                    case 150:   cBulletId = 0x2013; break;// EN DASH
-                                    case 151:   cBulletId = 0x2014; break;// EM DASH
-                                    case 152:   cBulletId = 0x02DC; break;// SMALL TILDE
-                                    case 153:   cBulletId = 0x2122; break;// TRADE MARK SIGN
-                                    case 154:   cBulletId = 0x0161; break;// LATIN SMALL LETTER S WITH CARON
-                                    case 155:   cBulletId = 0x203A; break;// SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
-                                    case 156:   cBulletId = 0x0153; break;// LATIN SMALL LIGATURE OE
-                                    case 158:   cBulletId = 0x017E; break;// LATIN SMALL LETTER Z WITH CARON
-                                    case 159:   cBulletId = 0x0178; break;// LATIN CAPITAL LETTER Y WITH DIAERESIS
-//                                  case 222:   cBulletId = 0x00B6; break;// PILCROW SIGN / PARAGRAPH SIGN
-                                }
-                            }
-*/
-                            nParaFlags |= 0x90; // wir geben den Font und den Charset vor
-                        }
-                    }
-                    case SVX_NUM_CHARS_UPPER_LETTER :       // zaehlt von a-z, aa - az, ba - bz, ...
-                    case SVX_NUM_CHARS_LOWER_LETTER :
-                    case SVX_NUM_ROMAN_UPPER :
-                    case SVX_NUM_ROMAN_LOWER :
-                    case SVX_NUM_ARABIC :
-                    case SVX_NUM_PAGEDESC :                 // Numerierung aus der Seitenvorlage
-                    case SVX_NUM_BITMAP :
-                    case SVX_NUM_CHARS_UPPER_LETTER_N :     // zaehlt von  a-z, aa-zz, aaa-zzz
-                    case SVX_NUM_CHARS_LOWER_LETTER_N :
-                    {
-                        if ( nNumberingType != SVX_NUM_CHAR_SPECIAL )
-                        {
-                            bExtendedBulletsUsed = TRUE;
-                            if ( nNumberingDepth & 1 )
-                                cBulletId = 0x2013;         // defaulting bullet characters for ppt97
-                            else if ( nNumberingDepth == 4 )
-                                cBulletId = 0xbb;
-                            else
-                                cBulletId = 0x2022;
-
-                            switch( (SvxExtNumType)nNumberingType )
-                            {
-                                case SVX_NUM_CHARS_UPPER_LETTER :
-                                case SVX_NUM_CHARS_UPPER_LETTER_N :
-                                {
-                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
-                                    {
-                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
-                                            nMappedNumType = 0xa0001;   // (A)
-                                        else
-                                            nMappedNumType = 0xb0001;   // A)
-                                    }
-                                    else
-                                        nMappedNumType = 0x10001;       // A.
-                                }
-                                break;
-                                case SVX_NUM_CHARS_LOWER_LETTER :
-                                case SVX_NUM_CHARS_LOWER_LETTER_N :
-                                {
-                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
-                                    {
-                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
-                                            nMappedNumType = 0x80001;   // (a)
-                                        else
-                                            nMappedNumType = 0x90001;   // a)
-                                    }
-                                    else
-                                        nMappedNumType = 0x00001;       // a.
-                                }
-                                break;
-                                case SVX_NUM_ROMAN_UPPER :
-                                {
-                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
-                                    {
-                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
-                                            nMappedNumType = 0xe0001;   // (I)
-                                        else
-                                            nMappedNumType = 0xf0001;   // I)
-                                    }
-                                    else
-                                        nMappedNumType = 0x70001;       // I.
-                                }
-                                break;
-                                case SVX_NUM_ROMAN_LOWER :
-                                {
-                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
-                                    {
-                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
-                                            nMappedNumType = 0x40001;   // (i)
-                                        else
-                                            nMappedNumType = 0x50001;   // i)
-                                    }
-                                    else
-                                        nMappedNumType = 0x60001;       // i.
-                                }
-                                break;
-                                case SVX_NUM_ARABIC :
-                                {
-                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
-                                    {
-                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
-                                            nMappedNumType = 0xc0001;   // (1)
-                                        else
-                                            nMappedNumType = 0x20001;   // 1)
-                                    }
-                                    else
-                                    {
-                                        if ( ! ( sSuffix.Len() + sPrefix.Len() ) )
-                                            nMappedNumType = 0xd0001;   // 1
-                                        else
-                                            nMappedNumType = 0x30001;   // 1.
-                                    }
-                                }
-                                break;
-								default:
-									break;
-                            }
-                        }
-                        nParaFlags |= 0x2f;
-                        nBulletFlags |= 6;
-                        if ( mbIsBullet && bNumberingIsNumber )
-                            nBulletFlags |= 1;
-                    }
-                }
-            }
-        }
-    }
-    nBulletOfs = nTextOfs + nBulletOfs;
-    if ( nBulletOfs < 0 )
-        nBulletOfs = 0;
-}
-
-void ParagraphObj::ImplGetParagraphValues( PPTExBulletProvider& rBuProv, sal_Bool bGetPropStateValue )
-{
-    static String sNumberingLevel   ( RTL_CONSTASCII_USTRINGPARAM( "NumberingLevel" ) );
-
-	::com::sun::star::uno::Any aAny;
-	if ( GetPropertyValue( aAny, mXPropSet, sNumberingLevel, sal_True ) )
-    {
-        if ( bGetPropStateValue )
-            meBullet = GetPropertyState( mXPropSet, sNumberingLevel );
-        nDepth = *( (sal_Int16*)aAny.getValue() );
-
-		if ( nDepth < 0 )
-		{
-			mbIsBullet = sal_False;
-			nDepth = 0;
-		}
-		else
-		{
-			if ( nDepth > 4 )
-				nDepth = 4;
-			mbIsBullet = sal_True;
-		}
-    }
-    else
-	{
-        nDepth = 0;
-		mbIsBullet = sal_False;
-	}
-    ImplGetNumberingLevel( rBuProv, nDepth, mbIsBullet, bGetPropStateValue );
-
-	if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaTabStops" ) ), bGetPropStateValue ) )
-        maTabStop = *( ::com::sun::star::uno::Sequence< ::com::sun::star::style::TabStop>*)mAny.getValue();
-    sal_Int16 eTextAdjust( ::com::sun::star::style::ParagraphAdjust_LEFT );
-    if ( GetPropertyValue( aAny, mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "ParaAdjust" ) ), bGetPropStateValue ) )
-        aAny >>= eTextAdjust;
-    switch ( (::com::sun::star::style::ParagraphAdjust)eTextAdjust )
-    {
-        case ::com::sun::star::style::ParagraphAdjust_CENTER :
-            mnTextAdjust = 1;
-        break;
-        case ::com::sun::star::style::ParagraphAdjust_RIGHT :
-            mnTextAdjust = 2;
-        break;
-        case ::com::sun::star::style::ParagraphAdjust_BLOCK :
-            mnTextAdjust = 3;
-        break;
-        default :
-        case ::com::sun::star::style::ParagraphAdjust_LEFT :
-            mnTextAdjust = 0;
-        break;
-    }
-    meTextAdjust = ePropState;
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaLineSpacing" ) ), bGetPropStateValue ) )
-    {
-        ::com::sun::star::style::LineSpacing aLineSpacing
-            = *( (::com::sun::star::style::LineSpacing*)mAny.getValue() );
-        switch ( aLineSpacing.Mode )
-        {
-            case ::com::sun::star::style::LineSpacingMode::FIX :
-                mnLineSpacing = (sal_Int16)(-( aLineSpacing.Height ) );
-                mbFixedLineSpacing = TRUE;
-                break;
-            case ::com::sun::star::style::LineSpacingMode::MINIMUM :
-            case ::com::sun::star::style::LineSpacingMode::LEADING :
-                mnLineSpacing = (sal_Int16)(-( aLineSpacing.Height ) );
-                mbFixedLineSpacing = FALSE;
-           break;
-
-            case ::com::sun::star::style::LineSpacingMode::PROP :
-            default:
-                mnLineSpacing = (sal_Int16)( aLineSpacing.Height );
-            break;
-        }
-    }
-    meLineSpacing = ePropState;
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaBottomMargin" ) ), bGetPropStateValue ) )
-    {
-        double fSpacing = *( (sal_uInt32*)mAny.getValue() ) + ( 2540.0 / 576.0 ) - 1;
-        mnLineSpacingBottom = (sal_Int16)(-( fSpacing * 576.0 / 2540.0 ) );
-    }
-    meLineSpacingBottom = ePropState;
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaTopMargin" ) ), bGetPropStateValue ) )
-    {
-        double fSpacing = *( (sal_uInt32*)mAny.getValue() ) + ( 2540.0 / 576.0 ) - 1;
-        mnLineSpacingTop = (sal_Int16)(-( fSpacing * 576.0 / 2540.0 ) );
-    }
-    meLineSpacingTop = ePropState;
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaIsForbiddenRules" ) ), bGetPropStateValue ) )
-        mAny >>= mbForbiddenRules;
-    meForbiddenRules = ePropState;
-
-    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaIsHangingPunctuation" ) ), bGetPropStateValue ) )
-        mAny >>= mbParagraphPunctation;
-    meParagraphPunctation = ePropState;
-
-	mnBiDi = 0;
-	if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "WritingMode" ) ), bGetPropStateValue ) )
-	{
-		sal_Int16 nWritingMode;
-		mAny >>= nWritingMode;
-
-		SvxFrameDirection eWritingMode( (SvxFrameDirection)nWritingMode );
-		if ( ( eWritingMode == FRMDIR_HORI_RIGHT_TOP )
-			|| ( eWritingMode == FRMDIR_VERT_TOP_RIGHT ) )
-		{
-			mnBiDi = 1;
-		}
-	}
-	meBiDi = ePropState;
-}
-
-void ParagraphObj::ImplConstruct( ParagraphObj& rParagraphObj )
-{
-    mnTextSize = rParagraphObj.mnTextSize;
-    mnTextAdjust = rParagraphObj.mnTextAdjust;
-    mnLineSpacing = rParagraphObj.mnLineSpacing;
-    mnLineSpacingTop = rParagraphObj.mnLineSpacingTop;
-    mnLineSpacingBottom = rParagraphObj.mnLineSpacingBottom;
-    mbFirstParagraph = rParagraphObj.mbFirstParagraph;
-    mbLastParagraph = rParagraphObj.mbLastParagraph;
-    mbParagraphPunctation = rParagraphObj.mbParagraphPunctation;
-    mbForbiddenRules = rParagraphObj.mbForbiddenRules;
-    mnBiDi = rParagraphObj.mnBiDi;
-
-    for ( void* pPtr = rParagraphObj.First(); pPtr; pPtr = rParagraphObj.Next() )
-        Insert( new PortionObj( *(PortionObj*)pPtr ), LIST_APPEND );
-
-    maTabStop = rParagraphObj.maTabStop;
-    bExtendedParameters = rParagraphObj.bExtendedParameters;
-    nParaFlags = rParagraphObj.nParaFlags;
-    nBulletFlags = rParagraphObj.nBulletFlags;
-    sPrefix = rParagraphObj.sPrefix;
-    sSuffix = rParagraphObj.sSuffix;
-    sGraphicUrl = rParagraphObj.sGraphicUrl;            // String auf eine Graphic
-    aBuGraSize = rParagraphObj.aBuGraSize;
-    nNumberingType = rParagraphObj.nNumberingType;      // in wirlichkeit ist dies ein SvxEnum
-    nHorzAdjust = rParagraphObj.nHorzAdjust;
-    nBulletColor = rParagraphObj.nBulletColor;
-    nBulletOfs = rParagraphObj.nBulletOfs;
-    nStartWith = rParagraphObj.nStartWith;              // Start der nummerierung
-    nTextOfs = rParagraphObj.nTextOfs;
-    nBulletRealSize = rParagraphObj.nBulletRealSize;    // GroessenVerhaeltnis in Proz
-    nDepth = rParagraphObj.nDepth;                      // aktuelle tiefe
-    cBulletId = rParagraphObj.cBulletId;                // wenn Numbering Type == CharSpecial
-    aFontDesc = rParagraphObj.aFontDesc;
-
-    bExtendedBulletsUsed = rParagraphObj.bExtendedBulletsUsed;
-    nBulletId = rParagraphObj.nBulletId;
-}
-
-::com::sun::star::awt::Size ParagraphObj::ImplMapSize( const ::com::sun::star::awt::Size& rSize )
-{
-    Size aSize( OutputDevice::LogicToLogic( Size( rSize.Width, rSize.Height ), maMapModeSrc, maMapModeDest ) );
-    if ( !aSize.Width() )
-        aSize.Width()++;
-    if ( !aSize.Height() )
-        aSize.Height()++;
-    return ::com::sun::star::awt::Size( aSize.Width(), aSize.Height() );
-}
-
-sal_uInt32 ParagraphObj::ImplCalculateTextPositions( sal_uInt32 nCurrentTextPosition )
-{
-    mnTextSize = 0;
-    for ( void* pPtr = First(); pPtr; pPtr = Next() )
-        mnTextSize += ((PortionObj*)pPtr)->ImplCalculateTextPositions( nCurrentTextPosition + mnTextSize );
-    return mnTextSize;
-}
-
-ParagraphObj& ParagraphObj::operator=( ParagraphObj& rParagraphObj )
-{
-    if ( this != &rParagraphObj )
-    {
-        ImplClear();
-        ImplConstruct( rParagraphObj );
-    }
-    return *this;
-}
-
-//  -----------------------------------------------------------------------
-
-ImplTextObj::ImplTextObj( int nInstance )
-{
-    mnRefCount = 1;
-    mnTextSize = 0;
-    mnInstance = nInstance;
-    mpList = new List;
-    mbHasExtendedBullets = FALSE;
-	mbFixedCellHeightUsed = FALSE;
-}
-
-ImplTextObj::~ImplTextObj()
-{
-    for ( ParagraphObj* pPtr = (ParagraphObj*)mpList->First(); pPtr; pPtr = (ParagraphObj*)mpList->Next() )
-        delete pPtr;
-    delete mpList;
-}
-
-TextObj::TextObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XSimpleText > & rXTextRef,
-            int nInstance, FontCollection& rFontCollection, PPTExBulletProvider& rProv )
-{
-    mpImplTextObj = new ImplTextObj( nInstance );
-
-    ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumerationAccess >
-        aXTextParagraphEA( rXTextRef, ::com::sun::star::uno::UNO_QUERY );
-
-    if ( aXTextParagraphEA.is()  )
-    {
-        ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumeration >
-            aXTextParagraphE( aXTextParagraphEA->createEnumeration() );
-        if ( aXTextParagraphE.is() )
-        {
-            ParaFlags aParaFlags;
-            while ( aXTextParagraphE->hasMoreElements() )
-            {
-                ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextContent > aXParagraph;
-                ::com::sun::star::uno::Any aAny( aXTextParagraphE->nextElement() );
-                if ( aAny >>= aXParagraph )
-                {
-                    if ( !aXTextParagraphE->hasMoreElements() )
-                        aParaFlags.bLastParagraph = TRUE;
-                    ParagraphObj* pPara = new ParagraphObj( aXParagraph, aParaFlags, rFontCollection, rProv );
-                    mpImplTextObj->mbHasExtendedBullets |= pPara->bExtendedBulletsUsed;
-                    mpImplTextObj->mpList->Insert( pPara, LIST_APPEND );
-                    aParaFlags.bFirstParagraph = FALSE;
-                }
-            }
-        }
-    }
-    ImplCalculateTextPositions();
-}
-
-TextObj::TextObj( TextObj& rTextObj )
-{
-    mpImplTextObj = rTextObj.mpImplTextObj;
-    mpImplTextObj->mnRefCount++;
-}
-
-TextObj::~TextObj()
-{
-    if ( ! ( --mpImplTextObj->mnRefCount ) )
-        delete mpImplTextObj;
-}
-
-void TextObj::Write( SvStream* pStrm )
-{
-    sal_uInt32 nSize, nPos = pStrm->Tell();
-    *pStrm << (sal_uInt32)( EPP_TextCharsAtom << 16 ) << (sal_uInt32)0;
-    for ( void* pPtr = First(); pPtr; pPtr = Next() )
-        ((ParagraphObj*)pPtr)->Write( pStrm );
-    nSize = pStrm->Tell() - nPos;
-    pStrm->SeekRel( - ( (sal_Int32)nSize - 4 ) );
-    *pStrm << (sal_uInt32)( nSize - 8 );
-    pStrm->SeekRel( nSize - 8 );
-}
-
-void TextObj::ImplCalculateTextPositions()
-{
-    mpImplTextObj->mnTextSize = 0;
-    for ( void* pPtr = First(); pPtr; pPtr = Next() )
-        mpImplTextObj->mnTextSize += ((ParagraphObj*)pPtr)->ImplCalculateTextPositions( mpImplTextObj->mnTextSize );
-}
-
-TextObj& TextObj::operator=( TextObj& rTextObj )
-{
-    if ( this != &rTextObj )
-    {
-        if ( ! ( --mpImplTextObj->mnRefCount ) )
-            delete mpImplTextObj;
-        mpImplTextObj = rTextObj.mpImplTextObj;
-        mpImplTextObj->mnRefCount++;
-    }
-    return *this;
-}
-
-void TextObj::WriteTextSpecInfo( SvStream* pStrm )
-{
-	sal_uInt32 nCharactersLeft( Count() );
-	if ( nCharactersLeft >= 1 )
-	{
-		EscherExAtom aAnimationInfoAtom( *pStrm, EPP_TextSpecInfoAtom, 0, 0 );
-		for ( ParagraphObj* pPtr = static_cast < ParagraphObj * >( First() ); nCharactersLeft && pPtr; pPtr = static_cast< ParagraphObj* >( Next() ) )
-		{
-			for ( PortionObj* pPortion = static_cast< PortionObj* >( pPtr->First() ); nCharactersLeft && pPortion; pPortion = static_cast< PortionObj* >( pPtr->Next() ) )
-			{
-				sal_Int32 nPortionSize = pPortion->mnTextSize >= nCharactersLeft ? nCharactersLeft : pPortion->mnTextSize;
-				sal_Int32 nFlags = 7;
-				nCharactersLeft -= nPortionSize;
-				*pStrm  << static_cast< sal_uInt32 >( nPortionSize )
-						<< nFlags
-						<< static_cast< sal_Int16 >( 1 )	// spellinfo -> needs rechecking
-						<< static_cast< sal_Int16 >( MsLangId::convertLocaleToLanguageWithFallback( pPortion->meCharLocale ) )
-						<< static_cast< sal_Int16 >( 0 );	// alt language
-			}
-		}
-		if ( nCharactersLeft )
-			*pStrm << nCharactersLeft << static_cast< sal_Int32 >( 1 ) << static_cast< sal_Int16 >( 1 );
-
-	}
-}
-
-//  -----------------------------------------------------------------------
-
 void PPTWriter::ImplAdjustFirstLineLineSpacing( TextObj& rTextObj, EscherPropertyContainer& rPropOpt )
 {
 	if ( !mbFontIndependentLineSpacing )
@@ -3160,7 +1207,7 @@ void PPTWriter::ImplWriteTextStyleAtom( SvStream& rOut, int nTextInstance, sal_u
     if ( !mbEmptyPresObj )
     {
         ParagraphObj* pPara;
-        TextObj aTextObj( mXText, nTextInstance, maFontCollection, (PPTExBulletProvider&)*this );
+        TextObjBinary aTextObj( mXText, nTextInstance, maFontCollection, (PPTExBulletProvider&)*this );
 
         // leaving out EPP_TextCharsAtom w/o text - still write out
         // attribute info though
@@ -3317,7 +1364,7 @@ void PPTWriter::ImplWriteTextStyleAtom( SvStream& rOut, int nTextInstance, sal_u
             }
             nParaFlags >>= 16;
 
-            sal_uInt32  nDefaultTabSize = ImplMapSize( ::com::sun::star::awt::Size( 2011, 1 ) ).Width;
+            sal_uInt32  nDefaultTabSize = MapSize( ::com::sun::star::awt::Size( 2011, 1 ) ).Width;
             sal_uInt32  nDefaultTabs = abs( maRect.GetWidth() ) / nDefaultTabSize;
             if ( nTabs )
                 nDefaultTabs -= (sal_Int32)( ( ( pTabStop[ nTabs - 1 ].Position / 4.40972 ) + nTextOfs ) / nDefaultTabSize );
@@ -4117,7 +2164,7 @@ void PPTWriter::ImplWriteClickAction( SvStream& rSt, ::com::sun::star::presentat
 
     rSt << (sal_uInt32)( ( EPP_InteractiveInfo << 16 ) | 0x1f ) << (sal_uInt32)24   // Mouse Over Action
         << (sal_uInt32)( EPP_InteractiveInfo << 16 ) << (sal_uInt32)16;
-    for ( int i = 0; i < 4; i++, rSt << (sal_uInt32)0 ) ;
+    for ( int i = 0; i < 4; i++, rSt << (sal_uInt32)0 ) {}
 }
 
 //  -----------------------------------------------------------------------
@@ -4269,9 +2316,9 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
             }
         }
         nGroups = GetGroupsClosed();
-        for ( sal_uInt32 i = 0; i < nGroups; i++, mpPptEscherEx->LeaveGroup() ) ;
+        for ( sal_uInt32 i = 0; i < nGroups; i++, mpPptEscherEx->LeaveGroup() ) {}
 
-        if ( ImplGetShapeByIndex( GetCurrentGroupIndex(), TRUE ) )
+        if ( GetShapeByIndex( GetCurrentGroupIndex(), TRUE ) )
         {
             sal_Bool bIsSound;
 			sal_Bool bMediaClickAction = sal_False;
@@ -4341,8 +2388,8 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                     if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "BoundRect" ) ) ) )
                     {
                         ::com::sun::star::awt::Rectangle aRect( *(::com::sun::star::awt::Rectangle*)mAny.getValue() );
-                        maPosition = ImplMapPoint( ::com::sun::star::awt::Point( aRect.X, aRect.Y ) );
-                        maSize = ImplMapSize( ::com::sun::star::awt::Size( aRect.Width, aRect.Height ) );
+                        maPosition = MapPoint( ::com::sun::star::awt::Point( aRect.X, aRect.Y ) );
+                        maSize = MapSize( ::com::sun::star::awt::Size( aRect.Width, aRect.Height ) );
                         maRect = Rectangle( Point( maPosition.X, maPosition.Y ), Size( maSize.Width, maSize.Height ) );
                     }
 					mType = "drawing.dontknow";
@@ -4369,8 +2416,8 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
 						if ( pObj )
 						{
 							Rectangle aBound = pObj->GetCurrentBoundRect();
-							maPosition = ImplMapPoint( ::com::sun::star::awt::Point( aBound.Left(), aBound.Top() ) );
-					        maSize = ImplMapSize( ::com::sun::star::awt::Size ( aBound.GetWidth(), aBound.GetHeight() ) );
+							maPosition = MapPoint( ::com::sun::star::awt::Point( aBound.Left(), aBound.Top() ) );
+					        maSize = MapSize( ::com::sun::star::awt::Size ( aBound.GetWidth(), aBound.GetHeight() ) );
 							maRect = Rectangle( Point( maPosition.X, maPosition.Y ), Size( maSize.Width, maSize.Height ) );
 							mnAngle = 0;
 						}
@@ -4395,7 +2442,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                 if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CornerRadius" ) ) ) )
                 {
                     mAny >>= nRadius;
-                    nRadius = ImplMapSize( ::com::sun::star::awt::Size( nRadius, 0 ) ).Width;
+                    nRadius = MapSize( ::com::sun::star::awt::Size( nRadius, 0 ) ).Width;
                 }
                 if ( nRadius )
                 {
@@ -4514,7 +2561,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                         }
                         break;
                     }
-                    maRect = ImplMapRectangle( aNewRect );
+                    maRect = MapRectangle( aNewRect );
                     maPosition = ::com::sun::star::awt::Point( maRect.Left(), maRect.Top() );
                     maSize = ::com::sun::star::awt::Size( maRect.GetWidth(), maRect.GetHeight() );
 					if ( bNeedText && ImplGetText() )
@@ -4658,7 +2705,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                 if ( aPropOpt.CreateConnectorProperties( mXShape, aSolverContainer, aNewRect, nSpType, nSpFlags ) == sal_False )
                     continue;
 
-                maRect = ImplMapRectangle( aNewRect );
+                maRect = MapRectangle( aNewRect );
                 maPosition = ::com::sun::star::awt::Point( maRect.Left(), maRect.Top() );
                 maSize = ::com::sun::star::awt::Size( maRect.GetWidth(), maRect.GetHeight() );
 
@@ -4673,7 +2720,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
             {
                 ::com::sun::star::awt::Rectangle aNewRect;
                 aPropOpt.CreatePolygonProperties( mXPropSet, ESCHER_CREATEPOLYGON_LINE, sal_False, aNewRect, NULL );
-                maRect = ImplMapRectangle( aNewRect );
+                maRect = MapRectangle( aNewRect );
                 maPosition = ::com::sun::star::awt::Point( maRect.Left(), maRect.Top() );
                 maSize = ::com::sun::star::awt::Size( maRect.GetWidth(), maRect.GetHeight() );
                 if ( ImplGetText() )
@@ -4708,7 +2755,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                 ImplCreateShape( ESCHER_ShpInst_NotPrimitive, 0xa00, aSolverContainer );            // Flags: Connector | HasSpt
                 ::com::sun::star::awt::Rectangle aNewRect;
                 aPropOpt.CreatePolygonProperties( mXPropSet, ESCHER_CREATEPOLYGON_POLYPOLYGON, sal_False, aNewRect, NULL );
-                maRect = ImplMapRectangle( aNewRect );
+                maRect = MapRectangle( aNewRect );
                 maPosition = ::com::sun::star::awt::Point( maRect.Left(), maRect.Top() );
                 maSize = ::com::sun::star::awt::Size( maRect.GetWidth(), maRect.GetHeight() );
                 aPropOpt.CreateFillProperties( mXPropSet, sal_True );
@@ -4727,7 +2774,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                 ImplCreateShape( ESCHER_ShpInst_NotPrimitive, 0xa00, aSolverContainer );            // Flags: Connector | HasSpt
                 ::com::sun::star::awt::Rectangle aNewRect;
                 aPropOpt.CreatePolygonProperties( mXPropSet, ESCHER_CREATEPOLYGON_POLYLINE, sal_False, aNewRect, NULL );
-                maRect = ImplMapRectangle( aNewRect );
+                maRect = MapRectangle( aNewRect );
                 maPosition = ::com::sun::star::awt::Point( maRect.Left(), maRect.Top() );
                 maSize = ::com::sun::star::awt::Size( maRect.GetWidth(), maRect.GetHeight() );
                 aPropOpt.CreateLineProperties( mXPropSet, sal_False );
@@ -4746,7 +2793,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                 ImplCreateShape( ESCHER_ShpInst_NotPrimitive, 0xa00, aSolverContainer );            // Flags: Connector | HasSpt
                 ::com::sun::star::awt::Rectangle aNewRect;
                 aPropOpt.CreatePolygonProperties( mXPropSet, ESCHER_CREATEPOLYGON_POLYLINE, sal_True, aNewRect, NULL );
-                maRect = ImplMapRectangle( aNewRect );
+                maRect = MapRectangle( aNewRect );
                 maPosition = ::com::sun::star::awt::Point( maRect.Left(), maRect.Top() );
                 maSize = ::com::sun::star::awt::Size( maRect.GetWidth(), maRect.GetHeight() );
                 aPropOpt.CreateLineProperties( mXPropSet, sal_False );
@@ -4765,7 +2812,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                 ImplCreateShape( ESCHER_ShpInst_NotPrimitive, 0xa00, aSolverContainer );            // Flags: Connector | HasSpt
                 ::com::sun::star::awt::Rectangle aNewRect;
                 aPropOpt.CreatePolygonProperties( mXPropSet, ESCHER_CREATEPOLYGON_POLYPOLYGON, sal_True, aNewRect, NULL );
-                maRect = ImplMapRectangle( aNewRect );
+                maRect = MapRectangle( aNewRect );
                 maPosition = ::com::sun::star::awt::Point( maRect.Left(), maRect.Top() );
                 maSize = ::com::sun::star::awt::Size( maRect.GetWidth(), maRect.GetHeight() );
                 aPropOpt.CreateFillProperties( mXPropSet, sal_True );
@@ -4847,7 +2894,7 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                         bIsTitlePossible = FALSE;
 
 						ImplGetText();
-						TextObj aTextObj( mXText, EPP_TEXTTYPE_Title, maFontCollection, (PPTExBulletProvider&)*this );
+						TextObjBinary aTextObj( mXText, EPP_TEXTTYPE_Title, maFontCollection, (PPTExBulletProvider&)*this );
                         if ( ePageType == MASTER )
 						{
 							if ( mnTextSize )
@@ -4938,12 +2985,12 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
                 if ( mbPresObj )
                 {
                     nOutlinerCount++;
-                    if ( rLayout.bOutlinerPossible && ( nOutlinerCount == 1 ) ||
+                    if ( ( rLayout.bOutlinerPossible && ( nOutlinerCount == 1 ) ) ||
                         ( ( rLayout.bSecOutlinerPossible && ( nOutlinerCount == 2 ) )
                             && ( nPrevTextStyle == EPP_TEXTSTYLE_BODY ) ) )
                     {
 						ImplGetText();
-						TextObj aTextObj( mXText, EPP_TEXTTYPE_Body, maFontCollection, (PPTExBulletProvider&)*this );
+						TextObjBinary aTextObj( mXText, EPP_TEXTTYPE_Body, maFontCollection, (PPTExBulletProvider&)*this );
                         if ( ePageType == MASTER )
                         {
                             nPrevTextStyle = EPP_TEXTSTYLE_TITLE;
@@ -5503,44 +3550,12 @@ void PPTWriter::ImplWritePage( const PHLayout& rLayout, EscherSolverContainer& a
     }
     ClearGroupTable();                              // gruppierungen wegschreiben, sofern noch irgendwelche offen sind, was eigendlich nicht sein sollte
     nGroups = GetGroupsClosed();
-    for ( sal_uInt32 i = 0; i < nGroups; i++, mpPptEscherEx->LeaveGroup() ) ;
+    for ( sal_uInt32 i = 0; i < nGroups; i++, mpPptEscherEx->LeaveGroup() ) {}
     mnPagesWritten++;
 }
 
 //  -----------------------------------------------------------------------
 
-::com::sun::star::awt::Point PPTWriter::ImplMapPoint( const ::com::sun::star::awt::Point& rPoint )
-{
-    Point aRet( OutputDevice::LogicToLogic( Point( rPoint.X, rPoint.Y ), maMapModeSrc, maMapModeDest ) );
-    return ::com::sun::star::awt::Point( aRet.X(), aRet.Y() );
-}
-
-//  -----------------------------------------------------------------------
-
-::com::sun::star::awt::Size PPTWriter::ImplMapSize( const ::com::sun::star::awt::Size& rSize )
-{
-    Size aRetSize( OutputDevice::LogicToLogic( Size( rSize.Width, rSize.Height ), maMapModeSrc, maMapModeDest ) );
-
-    if ( !aRetSize.Width() )
-        aRetSize.Width()++;
-    if ( !aRetSize.Height() )
-        aRetSize.Height()++;
-    return ::com::sun::star::awt::Size( aRetSize.Width(), aRetSize.Height() );
-}
-
-//  -----------------------------------------------------------------------
-
-Rectangle PPTWriter::ImplMapRectangle( const ::com::sun::star::awt::Rectangle& rRect )
-{
-    ::com::sun::star::awt::Point    aPoint( rRect.X, rRect.Y );
-    ::com::sun::star::awt::Size     aSize( rRect.Width, rRect.Height );
-    ::com::sun::star::awt::Point    aP( ImplMapPoint( aPoint ) );
-    ::com::sun::star::awt::Size     aS( ImplMapSize( aSize ) );
-    return Rectangle( Point( aP.X, aP.Y ), Size( aS.Width, aS.Height ) );
-}
-
-//  -----------------------------------------------------------------------
-
 struct CellBorder
 {
 	sal_Int32						mnPos;		// specifies the distance to the top/left position of the table
@@ -5615,14 +3630,14 @@ void PPTWriter::ImplCreateTable( uno::Reference< drawing::XShape >& rXShape, Esc
 			std::vector< std::pair< sal_Int32, sal_Int32 > > aColumns;
 			std::vector< std::pair< sal_Int32, sal_Int32 > > aRows;
 
-			awt::Point aPosition( ImplMapPoint( rXShape->getPosition() ) );
+			awt::Point aPosition( MapPoint( rXShape->getPosition() ) );
 			sal_uInt32 nPosition = aPosition.X;
 			for ( sal_Int32 x = 0; x < nColumnCount; x++ )
 			{
 				uno::Reference< beans::XPropertySet > xPropSet( xColumns->getByIndex( x ), uno::UNO_QUERY_THROW );
 				awt::Size aS( 0, 0 );
 				xPropSet->getPropertyValue( sWidth ) >>= aS.Width;
-				awt::Size aM( ImplMapSize( aS ) );
+				awt::Size aM( MapSize( aS ) );
 				aColumns.push_back( std::pair< sal_Int32, sal_Int32 >( nPosition, aM.Width ) );
 				nPosition += aM.Width;
 			}
@@ -5633,7 +3648,7 @@ void PPTWriter::ImplCreateTable( uno::Reference< drawing::XShape >& rXShape, Esc
 				uno::Reference< beans::XPropertySet > xPropSet( xRows->getByIndex( y ), uno::UNO_QUERY_THROW );
 				awt::Size aS( 0, 0 );
 				xPropSet->getPropertyValue( sHeight ) >>= aS.Height;
-				awt::Size aM( ImplMapSize( aS ) );
+				awt::Size aM( MapSize( aS ) );
 				aRows.push_back( std::pair< sal_Int32, sal_Int32 >( nPosition, aM.Height ) );
 				nPosition += aM.Height;
 			}
@@ -5752,17 +3767,17 @@ void PPTWriter::ImplCreateTable( uno::Reference< drawing::XShape >& rXShape, Esc
 				static const rtl::OUString	sDiagonalBLTR( RTL_CONSTASCII_USTRINGPARAM ( "DiagonalBLTR" ) );
 
 				// creating horz lines
-				sal_Int32 nYPos = ImplMapPoint( rXShape->getPosition() ).Y;
+				sal_Int32 nYPos = MapPoint( rXShape->getPosition() ).Y;
 				for( sal_Int32 nLine = 0; nLine < ( xRows->getCount() + 1 ); nLine++ )
 				{
-					sal_Int32 nXPos = ImplMapPoint( rXShape->getPosition() ).X;
+					sal_Int32 nXPos = MapPoint( rXShape->getPosition() ).X;
 					std::vector< CellBorder > vCellBorders;
 					for( sal_Int32 nColumn = 0; nColumn < xColumns->getCount(); nColumn++ )
 					{
 						uno::Reference< beans::XPropertySet > xPropSet( xColumns->getByIndex( nColumn ), uno::UNO_QUERY_THROW );
 						awt::Size aS( 0, 0 );
 						xPropSet->getPropertyValue( sWidth ) >>= aS.Width;
-						awt::Size aM( ImplMapSize( aS ) );
+						awt::Size aM( MapSize( aS ) );
 
 						CellBorder aCellBorder;
 						aCellBorder.mnPos = nXPos;
@@ -5798,23 +3813,23 @@ void PPTWriter::ImplCreateTable( uno::Reference< drawing::XShape >& rXShape, Esc
 						uno::Reference< beans::XPropertySet > xPropSet( xRows->getByIndex( nLine ), uno::UNO_QUERY_THROW );
 						awt::Size aS( 0, 0 );
 						xPropSet->getPropertyValue( sHeight ) >>= aS.Height;
-						awt::Size aM( ImplMapSize( aS ) );
+						awt::Size aM( MapSize( aS ) );
 						nYPos += aM.Height;
 					}
 				}
 
 				// creating vertical lines
-				sal_Int32 nXPos = ImplMapPoint( rXShape->getPosition() ).X;
+				sal_Int32 nXPos = MapPoint( rXShape->getPosition() ).X;
 				for( sal_Int32 nLine = 0; nLine < ( xColumns->getCount() + 1 ); nLine++ )
 				{
-					nYPos = ImplMapPoint( rXShape->getPosition() ).Y;
+					nYPos = MapPoint( rXShape->getPosition() ).Y;
 					std::vector< CellBorder > vCellBorders;
 					for( sal_Int32 nRow = 0; nRow < xRows->getCount(); nRow++ )
 					{
 						uno::Reference< beans::XPropertySet > xPropSet( xRows->getByIndex( nRow ), uno::UNO_QUERY_THROW );
 						awt::Size aS( 0, 0 );
 						xPropSet->getPropertyValue( sHeight ) >>= aS.Height;
-						awt::Size aM( ImplMapSize( aS ) );
+						awt::Size aM( MapSize( aS ) );
 
 						CellBorder aCellBorder;
 						aCellBorder.mnPos = nYPos;
@@ -5850,7 +3865,7 @@ void PPTWriter::ImplCreateTable( uno::Reference< drawing::XShape >& rXShape, Esc
 						uno::Reference< beans::XPropertySet > xPropSet( xColumns->getByIndex( nLine ), uno::UNO_QUERY_THROW );
 						awt::Size aS( 0, 0 );
 						xPropSet->getPropertyValue( sWidth ) >>= aS.Width;
-						awt::Size aM( ImplMapSize( aS ) );
+						awt::Size aM( MapSize( aS ) );
 						nXPos += aM.Width;
 					}
 				}
@@ -5862,3 +3877,43 @@ void PPTWriter::ImplCreateTable( uno::Reference< drawing::XShape >& rXShape, Esc
 	}
 	mpPptEscherEx->CloseContainer();
 }
+
+//----------------------------------------------------------------------------------------------------------
+
+void TextObjBinary::Write( SvStream* pStrm )
+{
+    sal_uInt32 nSize, nPos = pStrm->Tell();
+    *pStrm << (sal_uInt32)( EPP_TextCharsAtom << 16 ) << (sal_uInt32)0;
+    for ( void* pPtr = First(); pPtr; pPtr = Next() )
+        ((ParagraphObj*)pPtr)->Write( pStrm );
+    nSize = pStrm->Tell() - nPos;
+    pStrm->SeekRel( - ( (sal_Int32)nSize - 4 ) );
+    *pStrm << (sal_uInt32)( nSize - 8 );
+    pStrm->SeekRel( nSize - 8 );
+}
+
+void TextObjBinary::WriteTextSpecInfo( SvStream* pStrm )
+{
+	sal_uInt32 nCharactersLeft( Count() );
+	if ( nCharactersLeft >= 1 )
+	{
+		EscherExAtom aAnimationInfoAtom( *pStrm, EPP_TextSpecInfoAtom, 0, 0 );
+		for ( ParagraphObj* pPtr = static_cast < ParagraphObj * >( First() ); nCharactersLeft && pPtr; pPtr = static_cast< ParagraphObj* >( Next() ) )
+		{
+			for ( PortionObj* pPortion = static_cast< PortionObj* >( pPtr->First() ); nCharactersLeft && pPortion; pPortion = static_cast< PortionObj* >( pPtr->Next() ) )
+			{
+				sal_Int32 nPortionSize = pPortion->mnTextSize >= nCharactersLeft ? nCharactersLeft : pPortion->mnTextSize;
+				sal_Int32 nFlags = 7;
+				nCharactersLeft -= nPortionSize;
+				*pStrm  << static_cast< sal_uInt32 >( nPortionSize )
+						<< nFlags
+						<< static_cast< sal_Int16 >( 1 )	// spellinfo -> needs rechecking
+						<< static_cast< sal_Int16 >( MsLangId::convertLocaleToLanguageWithFallback( pPortion->meCharLocale ) )
+						<< static_cast< sal_Int16 >( 0 );	// alt language
+			}
+		}
+		if ( nCharactersLeft )
+			*pStrm << nCharactersLeft << static_cast< sal_Int32 >( 1 ) << static_cast< sal_Int16 >( 1 );
+
+	}
+}
diff --git sd/source/filter/eppt/exports.map sd/source/filter/eppt/exports.map
deleted file mode 100644
index e69de29..0000000
diff --git sd/source/filter/eppt/grouptable.cxx sd/source/filter/eppt/grouptable.cxx
new file mode 100644
index 0000000..1ed031c
--- /dev/null
+++ sd/source/filter/pptx/pptx-grouptable.cxx
@@ -0,0 +1,114 @@
+#include "grouptable.hxx"
+
+#include <tools/gen.hxx>
+
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::container::XIndexAccess;
+
+// ---------------------------------------------------------------------------------------------
+
+GroupTable::GroupTable() :
+    mnCurrentGroupEntry ( 0 ),
+    mnMaxGroupEntry     ( 0 ),
+    mnGroupsClosed      ( 0 ),
+    mpGroupEntry        ( NULL )
+{
+    ImplResizeGroupTable( 32 );
+}
+
+// ---------------------------------------------------------------------------------------------
+
+GroupTable::~GroupTable()
+{
+    for ( sal_uInt32 i = 0; i < mnCurrentGroupEntry; delete mpGroupEntry[ i++ ] ) {}
+    delete[] mpGroupEntry;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+void GroupTable::ImplResizeGroupTable( sal_uInt32 nEntrys )
+{
+    if ( nEntrys > mnMaxGroupEntry )
+    {
+        mnMaxGroupEntry         = nEntrys;
+        GroupEntry** pTemp = new GroupEntry*[ nEntrys ];
+        for ( sal_uInt32 i = 0; i < mnCurrentGroupEntry; i++ )
+            pTemp[ i ] = mpGroupEntry[ i ];
+        if ( mpGroupEntry )
+            delete[] mpGroupEntry;
+        mpGroupEntry = pTemp;
+    }
+}
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Bool GroupTable::EnterGroup( Reference< XIndexAccess >& rXIndexAccessRef )
+{
+    sal_Bool bRet = sal_False;
+    if ( rXIndexAccessRef.is() )
+    {
+        GroupEntry* pNewGroup = new GroupEntry( rXIndexAccessRef );
+        if ( pNewGroup->mnCount )
+        {
+            if ( mnMaxGroupEntry == mnCurrentGroupEntry )
+                ImplResizeGroupTable( mnMaxGroupEntry + 8 );
+            mpGroupEntry[ mnCurrentGroupEntry++ ] = pNewGroup;
+            bRet = sal_True;
+        }
+        else
+            delete pNewGroup;
+    }
+    return bRet;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+sal_uInt32 GroupTable::GetGroupsClosed()
+{
+    sal_uInt32 nRet = mnGroupsClosed;
+    mnGroupsClosed = 0;
+    return nRet;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+void GroupTable::ClearGroupTable()
+{
+    for ( sal_uInt32 i = 0; i < mnCurrentGroupEntry; i++, delete mpGroupEntry[ i ] ) {}
+    mnCurrentGroupEntry = 0;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+void GroupTable::ResetGroupTable( sal_uInt32 nCount )
+{
+    ClearGroupTable();
+    mpGroupEntry[ mnCurrentGroupEntry++ ] = new GroupEntry( nCount );
+}
+
+// ---------------------------------------------------------------------------------------------
+
+sal_Bool GroupTable::GetNextGroupEntry()
+{
+    while ( mnCurrentGroupEntry )
+    {
+        mnIndex = mpGroupEntry[ mnCurrentGroupEntry - 1 ]->mnCurrentPos++;
+
+        if ( mpGroupEntry[ mnCurrentGroupEntry - 1 ]->mnCount > mnIndex )
+            return TRUE;
+
+        delete ( mpGroupEntry[ --mnCurrentGroupEntry ] );
+
+        if ( mnCurrentGroupEntry )
+            mnGroupsClosed++;
+    }
+    return FALSE;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+void GroupTable::SkipCurrentGroup()
+{
+    if ( mnCurrentGroupEntry )
+        delete ( mpGroupEntry[ --mnCurrentGroupEntry ] );
+}
diff --git sd/source/filter/eppt/grouptable.hxx sd/source/filter/eppt/grouptable.hxx
new file mode 100644
index 0000000..c79ffa8
--- /dev/null
+++ sd/source/filter/pptx/grouptable.hxx
@@ -0,0 +1,58 @@
+#ifndef EPPT_GROUP_TABLE
+#define EPPT_GROUP_TABLE
+
+#include <com/sun/star/container/XIndexAccess.hpp>
+
+struct GroupEntry
+{
+    sal_uInt32					mnCurrentPos;
+    sal_uInt32					mnCount;
+    ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess >			mXIndexAccess;
+
+    GroupEntry( ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess > & rIndex )
+    {
+        mXIndexAccess = rIndex;
+        mnCount =mXIndexAccess->getCount();
+        mnCurrentPos = 0;
+    };
+
+    GroupEntry( sal_uInt32 nCount )
+    {
+        mnCount = nCount;
+        mnCurrentPos = 0;
+    };
+
+    ~GroupEntry(){};
+};
+
+
+class GroupTable
+{
+	protected:
+
+		sal_uInt32				mnIndex;
+		sal_uInt32				mnCurrentGroupEntry;
+		sal_uInt32				mnMaxGroupEntry;
+		sal_uInt32				mnGroupsClosed;
+		GroupEntry**			mpGroupEntry;
+
+		void					ImplResizeGroupTable( sal_uInt32 nEntrys );
+
+	public:
+
+		sal_uInt32				GetCurrentGroupIndex() const { return mnIndex; };
+		sal_Int32				GetCurrentGroupLevel() const { return mnCurrentGroupEntry - 1; };	
+		::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess > &
+								GetCurrentGroupAccess() const { return mpGroupEntry[  mnCurrentGroupEntry - 1 ]->mXIndexAccess; };
+		sal_uInt32				GetGroupsClosed();
+		void					SkipCurrentGroup();
+		void					ResetGroupTable( sal_uInt32 nCount );
+		void					ClearGroupTable();
+		sal_Bool                EnterGroup( ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess > & rIndex );
+		sal_Bool				GetNextGroupEntry();
+								GroupTable();
+								~GroupTable();
+};
+
+
+#endif
# commented out for the libpptx diff --git sd/source/filter/eppt/makefile.mk sd/source/filter/eppt/makefile.mk
# commented out for the libpptx index 808984a..20ad859 100644
# commented out for the libpptx --- sd/source/filter/pptx/makefile.mk
# commented out for the libpptx +++ sd/source/filter/pptx/makefile.mk
# commented out for the libpptx @@ -46,10 +46,15 @@ NOOPTFILES= $(SLO)$/epptso.obj
# commented out for the libpptx  .ENDIF
# commented out for the libpptx  
# commented out for the libpptx  SLOFILES =	$(SLO)$/eppt.obj				\
# commented out for the libpptx -			$(SLO)$/epptso.obj				\
# commented out for the libpptx +			$(SLO)$/epptbase.obj			\
# commented out for the libpptx +			$(SLO)$/epptooxml.obj			\
# commented out for the libpptx +			$(SLO)$/epptso.obj			\
# commented out for the libpptx  			$(SLO)$/escherex.obj			\
# commented out for the libpptx +			$(SLO)$/grouptable.obj			\
# commented out for the libpptx  			$(SLO)$/pptexanimations.obj		\
# commented out for the libpptx -			$(SLO)$/pptexsoundcollection.obj
# commented out for the libpptx +			$(SLO)$/pptexsoundcollection.obj 	\
# commented out for the libpptx +			$(SLO)$/text.obj			\
# commented out for the libpptx +			$(SLO)$/stylesheet.obj
# commented out for the libpptx  
# commented out for the libpptx  # --- Targets --------------------------------------------------------------
# commented out for the libpptx  
diff --git sd/source/filter/eppt/stylesheet.cxx sd/source/filter/eppt/stylesheet.cxx
new file mode 100644
index 0000000..8e4ef54
--- /dev/null
+++ sd/source/filter/pptx/pptx-stylesheet.cxx
@@ -0,0 +1,485 @@
+#include <epptbase.hxx>
+#include <epptdef.hxx>
+#include <text.hxx>
+#include <tools/color.hxx>
+#include <svx/svxenum.hxx>
+
+using namespace ::com::sun::star;
+
+PPTExCharSheet::PPTExCharSheet( int nInstance )
+{
+    sal_uInt16 nFontHeight = 24;
+
+    for ( int nDepth = 0; nDepth < 5; nDepth++ )
+    {
+        PPTExCharLevel& rLev = maCharLevel[ nDepth ];
+        switch ( nInstance )
+        {
+            case EPP_TEXTTYPE_Title :
+            case EPP_TEXTTYPE_CenterTitle :
+                nFontHeight = 44;
+            break;
+            case EPP_TEXTTYPE_Body :
+            case EPP_TEXTTYPE_CenterBody :
+            case EPP_TEXTTYPE_HalfBody :
+            case EPP_TEXTTYPE_QuarterBody :
+            {
+                switch ( nDepth )
+                {
+                    case 0 : nFontHeight = 32; break;
+                    case 1 : nFontHeight = 28; break;
+                    case 2 : nFontHeight = 24; break;
+                    default :nFontHeight = 20; break;
+                }
+            }
+            break;
+            case EPP_TEXTTYPE_Notes :
+                nFontHeight = 12;
+            break;
+            case EPP_TEXTTYPE_notUsed :
+            case EPP_TEXTTYPE_Other :
+                nFontHeight = 24;
+            break;
+        }
+        rLev.mnFlags = 0;
+        rLev.mnFont = 0;
+        rLev.mnAsianOrComplexFont = 0xffff;
+        rLev.mnFontHeight = nFontHeight;
+        rLev.mnFontColor = 0;
+        rLev.mnEscapement = 0;
+    }
+}
+
+
+void PPTExCharSheet::SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
+                                    FontCollection& rFontCollection, int nLevel )
+{
+    PortionObj  aPortionObj( rXPropSet, rFontCollection );
+
+    PPTExCharLevel& rLev = maCharLevel[ nLevel ];
+
+    if ( aPortionObj.meCharColor == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        rLev.mnFontColor = aPortionObj.mnCharColor;
+    if ( aPortionObj.meCharEscapement == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        rLev.mnEscapement = aPortionObj.mnCharEscapement;
+    if ( aPortionObj.meCharHeight == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        rLev.mnFontHeight = aPortionObj.mnCharHeight;
+    if ( aPortionObj.meFontName == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        rLev.mnFont = aPortionObj.mnFont;
+    if ( aPortionObj.meAsianOrComplexFont == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        rLev.mnAsianOrComplexFont = aPortionObj.mnAsianOrComplexFont;
+    rLev.mnFlags = aPortionObj.mnCharAttr;
+}
+
+void PPTExCharSheet::Write( SvStream& rSt, PptEscherEx*, sal_uInt16 nLev, sal_Bool, sal_Bool bSimpleText,
+    const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rPagePropSet )
+{
+    const PPTExCharLevel& rLev = maCharLevel[ nLev ];
+
+    sal_uInt32 nCharFlags = 0xefffff;
+    if ( bSimpleText )
+        nCharFlags = 0x7ffff;
+
+    rSt << nCharFlags
+        << rLev.mnFlags
+        << rLev.mnFont;
+
+    sal_uInt32 nFontColor = rLev.mnFontColor;
+    if ( nFontColor == COL_AUTO )
+    {
+        sal_Bool bIsDark = sal_False;
+        ::com::sun::star::uno::Any aAny;
+        if ( PropValue::GetPropertyValue( aAny, rPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsBackgroundDark" ) ), sal_True ) )
+            aAny >>= bIsDark;
+        nFontColor = bIsDark ? 0xffffff : 0x000000;
+    }
+    nFontColor &= 0xffffff;
+    nFontColor |= 0xfe000000;
+    if ( bSimpleText )
+    {
+        rSt << rLev.mnFontHeight
+            << nFontColor;
+    }
+    else
+    {
+        rSt << rLev.mnAsianOrComplexFont
+            << (sal_uInt16)0xffff       // unbekannt
+            << (sal_uInt16)0xffff       // unbekannt
+            << rLev.mnFontHeight
+            << nFontColor
+            << rLev.mnEscapement;
+    }
+}
+
+PPTExParaSheet::PPTExParaSheet( int nInstance, sal_uInt16 nDefaultTab, PPTExBulletProvider& rProv ) :
+    rBuProv     ( rProv ),
+    mnInstance  ( nInstance )
+{
+    sal_Bool bHasBullet = FALSE;
+
+    sal_uInt16 nUpperDist = 0;
+    sal_uInt16 nBulletChar = 0x2022;
+    sal_uInt16 nBulletOfs = 0;
+    sal_uInt16 nTextOfs = 0;
+
+    for ( int nDepth = 0; nDepth < 5; nDepth++ )
+    {
+        PPTExParaLevel& rLev = maParaLevel[ nDepth ];
+        switch ( nInstance )
+        {
+            case EPP_TEXTTYPE_Title :
+            case EPP_TEXTTYPE_CenterTitle :
+            break;
+            case EPP_TEXTTYPE_Body :
+            case EPP_TEXTTYPE_CenterBody :
+            case EPP_TEXTTYPE_HalfBody :
+            case EPP_TEXTTYPE_QuarterBody :
+            {
+                bHasBullet = TRUE;
+                nUpperDist = 0x14;
+            }
+            break;
+            case EPP_TEXTTYPE_Notes :
+                nUpperDist = 0x1e;
+            break;
+
+//          default :
+//          case EPP_TEXTTYPE_notUsed :
+//          case EPP_TEXTTYPE_Other :
+//          break;
+        }
+        switch ( nDepth )
+        {
+            case 0 :
+            {
+                nBulletChar = 0x2022;
+                nBulletOfs = 0;
+                nTextOfs = ( bHasBullet ) ? 0xd8 : 0;
+            }
+            break;
+            case 1 :
+            {
+                nBulletChar = 0x2013;
+                nBulletOfs = 0x120;
+                nTextOfs = 0x1d4;
+            }
+            break;
+            case 2 :
+            {
+                nBulletChar = 0x2022;
+                nBulletOfs = 0x240;
+                nTextOfs = 0x2d0;
+            }
+            break;
+            case 3 :
+            {
+                nBulletChar = 0x2013;
+                nBulletOfs = 0x360;
+                nTextOfs = 0x3f0;
+            }
+            break;
+            case 4 :
+            {
+                nBulletChar = 0xbb;
+                nBulletOfs = 0x480;
+                nTextOfs = 0x510;
+            }
+            break;
+        }
+        rLev.mbIsBullet = bHasBullet;
+        rLev.mnBulletChar = nBulletChar;
+        rLev.mnBulletFont = 0;
+        rLev.mnBulletHeight = 100;
+        rLev.mnBulletColor = 0;
+        rLev.mnAdjust = 0;
+        rLev.mnLineFeed = 100;
+        rLev.mnLowerDist = 0;
+        rLev.mnUpperDist = nUpperDist;
+        rLev.mnTextOfs = nTextOfs;
+        rLev.mnBulletOfs = nBulletOfs;
+        rLev.mnDefaultTab = nDefaultTab;
+        rLev.mnAsianSettings = 2;
+		rLev.mnBiDi = 0;
+
+        rLev.mbExtendedBulletsUsed = FALSE;
+        rLev.mnBulletId = 0xffff;
+        rLev.mnBulletStart = 0;
+        rLev.mnMappedNumType = 0;
+        rLev.mnNumberingType = 0;
+    }
+}
+
+void PPTExParaSheet::SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
+                                        FontCollection& rFontCollection, int nLevel, const PPTExCharLevel& rCharLevel )
+{
+    ParagraphObj aParagraphObj( rXPropSet, rBuProv );
+    aParagraphObj.CalculateGraphicBulletSize( rCharLevel.mnFontHeight );
+    PPTExParaLevel& rLev = maParaLevel[ nLevel ];
+
+    if ( aParagraphObj.meTextAdjust == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        rLev.mnAdjust = aParagraphObj.mnTextAdjust;
+    rLev.mnOOAdjust = aParagraphObj.mnOOTextAdjust;
+    if ( aParagraphObj.meLineSpacing == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+    {
+        sal_Int16 nLineSpacing = aParagraphObj.mnLineSpacing;
+        if ( nLineSpacing > 0 ) // if nLinespacing is < 0 the linespacing is an absolute spacing
+        {
+			sal_Bool bFixedLineSpacing = sal_False;
+			uno::Any aAny = rXPropSet->getPropertyValue( ::rtl::OUString( 
+															 RTL_CONSTASCII_USTRINGPARAM( 
+																 "FontIndependentLineSpacing" ) ) );
+			if( !(aAny >>= bFixedLineSpacing) || !bFixedLineSpacing ) 
+			{
+				const FontCollectionEntry* pDesc = rFontCollection.GetById( rCharLevel.mnFont );
+				if ( pDesc )
+					nLineSpacing = (sal_Int16)( (double)nLineSpacing * pDesc->Scaling + 0.5 );
+			}
+        }
+        else
+        {
+            if ( rCharLevel.mnFontHeight > (sal_uInt16)( ((double)-nLineSpacing) * 0.001 * 72.0 / 2.54 ) ) // 1/100mm to point
+            {
+                const FontCollectionEntry* pDesc = rFontCollection.GetById( rCharLevel.mnFont );
+                if ( pDesc )
+                     nLineSpacing = (sal_Int16)( (double)100.0 * pDesc->Scaling + 0.5 );
+                else
+                    nLineSpacing = 100;
+            }
+            else
+                nLineSpacing = (sal_Int16)( (double)nLineSpacing / 4.40972 );
+        }
+        rLev.mnLineFeed = nLineSpacing;
+    }
+    if ( aParagraphObj.meLineSpacingBottom == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        rLev.mnLowerDist = aParagraphObj.mnLineSpacingBottom;
+    if ( aParagraphObj.meLineSpacingTop == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        rLev.mnUpperDist = aParagraphObj.mnLineSpacingTop;
+    if ( aParagraphObj.meForbiddenRules == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+    {
+        rLev.mnAsianSettings &=~1;
+        if ( aParagraphObj.mbForbiddenRules )
+            rLev.mnAsianSettings |= 1;
+    }
+    if ( aParagraphObj.meParagraphPunctation == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+    {
+        rLev.mnAsianSettings &=~4;
+        if ( aParagraphObj.mbParagraphPunctation )
+            rLev.mnAsianSettings |= 4;
+    }
+
+	if ( aParagraphObj.meBiDi == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+		rLev.mnBiDi = aParagraphObj.mnBiDi;
+
+	rLev.mbIsBullet = aParagraphObj.mbIsBullet; //( ( aParagraphObj.nBulletFlags & 1 ) != 0 );
+
+    if ( !nLevel )
+    {
+        if ( ( aParagraphObj.meBullet ==  ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+                    && aParagraphObj.bExtendedParameters )
+        {
+            for ( sal_Int16 i = 0; i < 5; i++ )
+            {
+                PPTExParaLevel& rLevel = maParaLevel[ i ];
+                if ( i )
+                    aParagraphObj.ImplGetNumberingLevel( rBuProv, i, FALSE );
+//              rLevel.mbIsBullet = ( ( aParagraphObj.nBulletFlags & 1 ) != 0 );
+                rLevel.mnTextOfs = aParagraphObj.nTextOfs;
+                rLevel.mnBulletOfs = (sal_uInt16)aParagraphObj.nBulletOfs;
+                rLevel.mnBulletChar = aParagraphObj.cBulletId;
+                FontCollectionEntry aFontDescEntry( aParagraphObj.aFontDesc.Name, aParagraphObj.aFontDesc.Family,
+                                                        aParagraphObj.aFontDesc.Pitch, aParagraphObj.aFontDesc.CharSet );
+                rLevel.mnBulletFont = (sal_uInt16)rFontCollection.GetId( aFontDescEntry );
+                rLevel.mnBulletHeight = aParagraphObj.nBulletRealSize;
+                rLevel.mnBulletColor = aParagraphObj.nBulletColor;
+
+                rLevel.mbExtendedBulletsUsed = aParagraphObj.bExtendedBulletsUsed;
+                rLevel.mnBulletId = aParagraphObj.nBulletId;
+                rLevel.mnNumberingType = aParagraphObj.nNumberingType;
+                rLevel.mnBulletStart = aParagraphObj.nStartWith;
+                rLevel.mnMappedNumType = aParagraphObj.nMappedNumType;
+			}
+        }
+    }
+}
+
+void PPTExParaSheet::Write( SvStream& rSt, PptEscherEx*, sal_uInt16 nLev, sal_Bool, sal_Bool bSimpleText,
+    const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rPagePropSet )
+{
+    const PPTExParaLevel& rLev = maParaLevel[ nLev ];
+
+    if ( maParaLevel[ 0 ].mbExtendedBulletsUsed || maParaLevel[ 1 ].mbExtendedBulletsUsed ||
+            maParaLevel[ 2 ].mbExtendedBulletsUsed || maParaLevel[ 3 ].mbExtendedBulletsUsed ||
+                maParaLevel[ 4 ].mbExtendedBulletsUsed )
+    {
+        SvStream& rOut = rBuProv.aBuExMasterStream;
+        if ( !nLev )
+        {
+            rOut << (sal_uInt32)( ( EPP_PST_ExtendedParagraphMasterAtom << 16 ) | ( mnInstance << 4 ) )
+                 << (sal_uInt32)( 5 * 16 + 2 )
+                 << (sal_uInt16)5;              // depth
+        }
+        sal_uInt16 nBulletId = rLev.mnBulletId;
+        if ( rLev.mnNumberingType != SVX_NUM_BITMAP )
+            nBulletId = 0xffff;
+        rOut << (sal_uInt32)0x03800000
+             << (sal_uInt16)nBulletId
+             << (sal_uInt32)rLev.mnMappedNumType
+             << (sal_uInt16)rLev.mnBulletStart
+             << (sal_uInt32)0;
+    }
+
+    sal_uInt32 nParaFlags = 0x3ffdff;
+    sal_uInt16 nBulletFlags = ( rLev.mbIsBullet ) ? 0xf : 0xe;
+
+    if ( nLev )
+		nParaFlags &= 0x207fff;
+	if ( bSimpleText )
+		nParaFlags &= 0x7fff;
+    sal_uInt32 nBulletColor = rLev.mnBulletColor;
+    if ( nBulletColor == COL_AUTO )
+    {
+        sal_Bool bIsDark = sal_False;
+        ::com::sun::star::uno::Any aAny;
+        if ( PropValue::GetPropertyValue( aAny, rPagePropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsBackgroundDark" ) ), sal_True ) )
+            aAny >>= bIsDark;
+        nBulletColor = bIsDark ? 0xffffff : 0x000000;
+    }
+    nBulletColor &= 0xffffff;
+    nBulletColor |= 0xfe000000;
+    rSt << nParaFlags
+        << nBulletFlags
+        << rLev.mnBulletChar
+        << rLev.mnBulletFont
+        << rLev.mnBulletHeight
+        << nBulletColor
+        << rLev.mnAdjust
+        << rLev.mnLineFeed
+        << rLev.mnUpperDist
+        << rLev.mnLowerDist
+        << rLev.mnTextOfs
+        << rLev.mnBulletOfs;
+
+    if ( bSimpleText || nLev )
+	{
+		if ( nParaFlags & 0x200000 )
+			rSt << rLev.mnBiDi;
+	}
+	else
+	{
+		rSt << rLev.mnDefaultTab
+			<< (sal_uInt16)0
+			<< (sal_uInt16)0
+			<< rLev.mnAsianSettings
+			<< rLev.mnBiDi;
+	}
+}
+
+
+PPTExStyleSheet::PPTExStyleSheet( sal_uInt16 nDefaultTab, PPTExBulletProvider& rBuProv )
+{
+    for ( int nInstance = EPP_TEXTTYPE_Title; nInstance <= EPP_TEXTTYPE_QuarterBody; nInstance++ )
+    {
+        mpParaSheet[ nInstance ] = ( nInstance == EPP_TEXTTYPE_notUsed ) ? NULL : new PPTExParaSheet( nInstance, nDefaultTab, rBuProv );
+        mpCharSheet[ nInstance ] = ( nInstance == EPP_TEXTTYPE_notUsed ) ? NULL : new PPTExCharSheet( nInstance );
+    }
+}
+
+PPTExStyleSheet::~PPTExStyleSheet()
+{
+    for ( int nInstance = EPP_TEXTTYPE_Title; nInstance <= EPP_TEXTTYPE_QuarterBody; nInstance++ )
+    {
+        if ( nInstance == EPP_TEXTTYPE_notUsed )
+            continue;
+
+        delete mpParaSheet[ nInstance ];
+        delete mpCharSheet[ nInstance ];
+    }
+}
+
+void PPTExStyleSheet::SetStyleSheet( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
+                                        FontCollection& rFontCollection, int nInstance, int nLevel )
+{
+    if ( nInstance == EPP_TEXTTYPE_notUsed )
+        return;
+    mpCharSheet[ nInstance ]->SetStyleSheet( rXPropSet, rFontCollection, nLevel );
+    mpParaSheet[ nInstance ]->SetStyleSheet( rXPropSet, rFontCollection, nLevel, mpCharSheet[ nInstance ]->maCharLevel[ nLevel ] );
+}
+
+sal_Bool PPTExStyleSheet::IsHardAttribute( sal_uInt32 nInstance, sal_uInt32 nLevel, PPTExTextAttr eAttr, sal_uInt32 nValue )
+{
+    const PPTExParaLevel& rPara = mpParaSheet[ nInstance ]->maParaLevel[ nLevel ];
+    const PPTExCharLevel& rChar = mpCharSheet[ nInstance ]->maCharLevel[ nLevel ];
+
+    sal_uInt32 nFlag = 0;
+
+    switch ( eAttr )
+    {
+        case ParaAttr_BulletOn : return ( rPara.mbIsBullet ) ? ( nValue ) ? FALSE : TRUE : ( nValue ) ? TRUE : FALSE;
+        case ParaAttr_BuHardFont :
+        case ParaAttr_BulletFont : return ( rPara.mnBulletFont != nValue );
+        case ParaAttr_BuHardColor :
+        case ParaAttr_BulletColor : return ( rPara.mnBulletColor != nValue );
+        case ParaAttr_BuHardHeight :
+        case ParaAttr_BulletHeight : return ( rPara.mnBulletHeight != nValue );
+        case ParaAttr_BulletChar : return ( rPara.mnBulletChar != nValue );
+        case ParaAttr_Adjust : return ( rPara.mnAdjust != nValue );
+        case ParaAttr_LineFeed : return ( rPara.mnLineFeed != nValue );
+        case ParaAttr_UpperDist : return ( rPara.mnUpperDist != nValue );
+        case ParaAttr_LowerDist : return ( rPara.mnLowerDist != nValue );
+        case ParaAttr_TextOfs : return ( rPara.mnTextOfs != nValue );
+        case ParaAttr_BulletOfs : return ( rPara.mnBulletOfs != nValue );
+        case ParaAttr_DefaultTab : return ( rPara.mnDefaultTab != nValue );
+		case ParaAttr_BiDi : return ( rPara.mnBiDi != nValue );
+        case CharAttr_Bold : nFlag = 1; break;
+        case CharAttr_Italic : nFlag = 2; break;
+        case CharAttr_Underline : nFlag = 4; break;
+        case CharAttr_Shadow : nFlag = 16; break;
+        case CharAttr_Strikeout : nFlag = 256; break;
+        case CharAttr_Embossed : nFlag = 512; break;
+        case CharAttr_Font : return ( rChar.mnFont != nValue );
+        case CharAttr_AsianOrComplexFont : return ( rChar.mnAsianOrComplexFont != nValue );
+        case CharAttr_Symbol : return TRUE;
+        case CharAttr_FontHeight : return ( rChar.mnFontHeight != nValue );
+        case CharAttr_FontColor : return ( rChar.mnFontColor != nValue );
+        case CharAttr_Escapement : return ( rChar.mnEscapement != nValue );
+		default:
+			break;
+    };
+    if ( nFlag )
+    {
+        if ( rChar.mnFlags & nFlag )
+            return ( ( nValue & nFlag ) == 0 );
+        else
+            return ( ( nValue & nFlag ) != 0 );
+    }
+    return TRUE;
+}
+
+sal_uInt32 PPTExStyleSheet::SizeOfTxCFStyleAtom() const
+{
+    return 24;
+}
+
+// the TxCFStyleAtom stores the text properties that are used
+// when creating new objects in PowerPoint.
+
+void PPTExStyleSheet::WriteTxCFStyleAtom( SvStream& rSt )
+{
+    const PPTExCharLevel& rCharStyle = mpCharSheet[ EPP_TEXTTYPE_Other ]->maCharLevel[ 0 ];
+    
+    sal_uInt16 nFlags = 0x60        // ??
+                      | 0x02        // fontsize;
+                      | 0x04;       // fontcolor
+
+    sal_uInt32 nCharFlags = rCharStyle.mnFlags;
+    nCharFlags &= CharAttr_Italic | CharAttr_Bold | CharAttr_Underline | CharAttr_Shadow;
+
+    rSt << (sal_uInt32)( EPP_TxCFStyleAtom << 16 )  // recordheader
+        << SizeOfTxCFStyleAtom() - 8
+        << (sal_uInt16)( 0x80 | nCharFlags )
+        << (sal_uInt16)nFlags
+        << (sal_uInt16)nCharFlags
+        << (sal_Int32)-1                            // ?
+        << rCharStyle.mnFontHeight
+        << rCharStyle.mnFontColor;
+}
diff --git sd/source/filter/eppt/text.cxx sd/source/filter/eppt/text.cxx
new file mode 100644
index 0000000..e5820ca
--- /dev/null
+++ sd/source/filter/pptx/pptx-text.cxx
@@ -0,0 +1,1411 @@
+#include "text.hxx"
+
+#include <com/sun/star/awt/CharSet.hpp>
+#include <com/sun/star/awt/FontWeight.hpp>
+#include <com/sun/star/awt/FontUnderline.hpp>
+#include <com/sun/star/beans/XPropertyState.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/container/XIndexReplace.hpp>
+#include <com/sun/star/i18n/XBreakIterator.hpp>
+#include <com/sun/star/i18n/ScriptDirection.hpp>
+#include <com/sun/star/i18n/ScriptType.hpp>
+#include <com/sun/star/i18n/XScriptTypeDetector.hpp>
+#include <com/sun/star/text/FontRelief.hpp>
+#include <com/sun/star/text/XTextField.hpp>
+#include <com/sun/star/text/XTextRange.hpp>
+#include <com/sun/star/style/LineSpacing.hpp>
+#include <com/sun/star/style/LineSpacingMode.hpp>
+#include <com/sun/star/style/ParagraphAdjust.hpp>
+#include <com/sun/star/style/TabStop.hpp>
+
+#include <svtools/languageoptions.hxx>
+#include <sfx2/app.hxx>
+#include <svx/svxenum.hxx>
+#include <svx/frmdir.hxx>
+#include <vcl/fontcvt.hxx>
+#include <vcl/metric.hxx>
+#include <vcl/outdev.hxx>
+#include <vcl/virdev.hxx>
+#include <comphelper/processfactory.hxx>
+#include <oox/export/drawingml.hxx> // for SubstituteBullet
+
+com::sun::star::uno::Reference< com::sun::star::i18n::XBreakIterator > xPPTBreakIter;
+com::sun::star::uno::Reference< com::sun::star::i18n::XScriptTypeDetector > xScriptTypeDetector;
+
+//  -----------------------------------------------------------------------
+
+PortionObj::PortionObj( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
+                FontCollection& rFontCollection ) :
+    mnCharAttrHard      ( 0 ),
+    mnCharAttr          ( 0 ),
+	mnFont              ( 0 ),
+	mnAsianOrComplexFont( 0xffff ),
+    mnTextSize          ( 0 ),
+	mbLastPortion       ( TRUE ),
+    mpText              ( NULL ),
+    mpFieldEntry        ( NULL )
+{
+    mXPropSet = rXPropSet;
+
+    ImplGetPortionValues( rFontCollection, FALSE );
+}
+
+PortionObj::PortionObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > & rXTextRange,
+                            sal_Bool bLast, FontCollection& rFontCollection ) :
+    mnCharAttrHard          ( 0 ),
+    mnCharAttr              ( 0 ),
+    mnFont                  ( 0 ),
+    mnAsianOrComplexFont    ( 0xffff ),
+	mbLastPortion           ( bLast ),
+    mpText                  ( NULL ),
+    mpFieldEntry            ( NULL )
+{
+    String aString( rXTextRange->getString() );
+    String aURL;
+	BOOL bRTL_endingParen = FALSE;
+
+    mnTextSize = aString.Len();
+    if ( bLast )
+        mnTextSize++;
+
+    if ( mnTextSize )
+    {
+        mpFieldEntry = NULL;
+        sal_uInt32 nFieldType = 0;
+
+        mXPropSet = ::com::sun::star::uno::Reference<
+            ::com::sun::star::beans::XPropertySet >
+                ( rXTextRange, ::com::sun::star::uno::UNO_QUERY );
+        mXPropState = ::com::sun::star::uno::Reference<
+            ::com::sun::star::beans::XPropertyState >
+                ( rXTextRange, ::com::sun::star::uno::UNO_QUERY );
+
+        sal_Bool bPropSetsValid = ( mXPropSet.is() && mXPropState.is() );
+        if ( bPropSetsValid )
+            nFieldType = ImplGetTextField( rXTextRange, mXPropSet, aURL );
+        if ( nFieldType )
+        {
+            mpFieldEntry = new FieldEntry( nFieldType, 0, mnTextSize );
+            if ( ( nFieldType >> 28 == 4 ) )
+			{
+				mpFieldEntry->aRepresentation = aString;
+                mpFieldEntry->aFieldUrl = aURL;
+			}
+        }
+        sal_Bool bSymbol = FALSE;
+
+        if ( bPropSetsValid && ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontCharSet" ) ), FALSE ) )
+        {
+            sal_Int16 nCharset = 0;
+            mAny >>= nCharset;
+            if ( nCharset == ::com::sun::star::awt::CharSet::SYMBOL )
+                bSymbol = TRUE;
+        }
+        if ( mpFieldEntry && ( nFieldType & 0x800000 ) )    // placeholder ?
+        {
+            mnTextSize = 1;
+            if ( bLast )
+                mnTextSize++;
+            mpText = new sal_uInt16[ mnTextSize ];
+            mpText[ 0 ] = 0x2a;
+        }
+        else
+        {
+            const sal_Unicode* pText = aString.GetBuffer();
+			// For i39516 - a closing parenthesis that ends an RTL string is displayed backwards by PPT
+			// Solution: add a Unicode Right-to-Left Mark, following the method described in i18024
+			if ( bLast && pText[ aString.Len() - 1 ] == sal_Unicode(')') && rFontCollection.GetScriptDirection( aString ) == com::sun::star::i18n::ScriptDirection::RIGHT_TO_LEFT )
+			{
+				mnTextSize++;
+				bRTL_endingParen = TRUE;
+			}
+            mpText = new sal_uInt16[ mnTextSize ];
+            sal_uInt16 nChar;
+            for ( int i = 0; i < aString.Len(); i++ )
+            {
+                nChar = (sal_uInt16)pText[ i ];
+                if ( nChar == 0xa )
+                    nChar++;
+                else if ( !bSymbol )
+                {
+                    switch ( nChar )
+                    {
+                        // Currency
+                        case 128:   nChar = 0x20AC; break;
+                        // Punctuation and other
+                        case 130:   nChar = 0x201A; break;// SINGLE LOW-9 QUOTATION MARK
+                        case 131:   nChar = 0x0192; break;// LATIN SMALL LETTER F WITH HOOK
+                        case 132:   nChar = 0x201E; break;// DOUBLE LOW-9 QUOTATION MARK
+                                                              // LOW DOUBLE PRIME QUOTATION MARK
+                        case 133:   nChar = 0x2026; break;// HORIZONTAL ELLIPSES
+                        case 134:   nChar = 0x2020; break;// DAGGER
+                        case 135:   nChar = 0x2021; break;// DOUBLE DAGGER
+                        case 136:   nChar = 0x02C6; break;// MODIFIER LETTER CIRCUMFLEX ACCENT
+                        case 137:   nChar = 0x2030; break;// PER MILLE SIGN
+                        case 138:   nChar = 0x0160; break;// LATIN CAPITAL LETTER S WITH CARON
+                        case 139:   nChar = 0x2039; break;// SINGLE LEFT-POINTING ANGLE QUOTATION MARK
+                        case 140:   nChar = 0x0152; break;// LATIN CAPITAL LIGATURE OE
+                        case 142:   nChar = 0x017D; break;// LATIN CAPITAL LETTER Z WITH CARON
+                        case 145:   nChar = 0x2018; break;// LEFT SINGLE QUOTATION MARK
+                                                              // MODIFIER LETTER TURNED COMMA
+                        case 146:   nChar = 0x2019; break;// RIGHT SINGLE QUOTATION MARK
+                                                              // MODIFIER LETTER APOSTROPHE
+                        case 147:   nChar = 0x201C; break;// LEFT DOUBLE QUOTATION MARK
+                                                              // REVERSED DOUBLE PRIME QUOTATION MARK
+                        case 148:   nChar = 0x201D; break;// RIGHT DOUBLE QUOTATION MARK
+                                                              // REVERSED DOUBLE PRIME QUOTATION MARK
+                        case 149:   nChar = 0x2022; break;// BULLET
+                        case 150:   nChar = 0x2013; break;// EN DASH
+                        case 151:   nChar = 0x2014; break;// EM DASH
+                        case 152:   nChar = 0x02DC; break;// SMALL TILDE
+                        case 153:   nChar = 0x2122; break;// TRADE MARK SIGN
+                        case 154:   nChar = 0x0161; break;// LATIN SMALL LETTER S WITH CARON
+                        case 155:   nChar = 0x203A; break;// SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
+                        case 156:   nChar = 0x0153; break;// LATIN SMALL LIGATURE OE
+                        case 158:   nChar = 0x017E; break;// LATIN SMALL LETTER Z WITH CARON
+                        case 159:   nChar = 0x0178; break;// LATIN CAPITAL LETTER Y WITH DIAERESIS
+//                      case 222:   nChar = 0x00B6; break;// PILCROW SIGN / PARAGRAPH SIGN
+                    }
+                }
+                mpText[ i ] = nChar;
+            }
+        }
+		if ( bRTL_endingParen )
+            mpText[ mnTextSize - 2 ] = 0x200F; // Unicode Right-to-Left mark
+
+        if ( bLast )
+            mpText[ mnTextSize - 1 ] = 0xd;
+
+        if ( bPropSetsValid )
+            ImplGetPortionValues( rFontCollection, TRUE );
+    }
+}
+
+PortionObj::PortionObj( PortionObj& rPortionObj )
+: PropStateValue( rPortionObj )
+{
+    ImplConstruct( rPortionObj );
+}
+
+PortionObj::~PortionObj()
+{
+    ImplClear();
+}
+
+void PortionObj::Write( SvStream* pStrm, sal_Bool bLast )
+{
+    sal_uInt32 nCount = mnTextSize;
+    if ( bLast && mbLastPortion )
+        nCount--;
+    for ( sal_uInt32 i = 0; i < nCount; i++ )
+        *pStrm << (sal_uInt16)mpText[ i ];
+}
+
+void PortionObj::ImplGetPortionValues( FontCollection& rFontCollection, sal_Bool bGetPropStateValue )
+{
+
+    sal_Bool bOk = ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontName" ) ), bGetPropStateValue );
+    meFontName = ePropState;
+    if ( bOk )
+    {
+        FontCollectionEntry aFontDesc( *(::rtl::OUString*)mAny.getValue() );
+        sal_uInt32  nCount = rFontCollection.GetCount();
+        mnFont = (sal_uInt16)rFontCollection.GetId( aFontDesc );
+        if ( mnFont == nCount )
+        {
+            FontCollectionEntry& rFontDesc = rFontCollection.GetLast();
+            if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontCharSet" ) ), sal_False ) )
+                mAny >>= rFontDesc.CharSet;
+            if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontFamily" ) ), sal_False ) )
+                mAny >>= rFontDesc.Family;
+            if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontPitch" ) ), sal_False ) )
+                mAny >>= rFontDesc.Pitch;
+        }
+    }
+
+	sal_Int16 nScriptType = SvtLanguageOptions::GetScriptTypeOfLanguage( Application::GetSettings().GetLanguage() );
+	if ( mpText && mnTextSize && xPPTBreakIter.is() )
+	{
+		rtl::OUString sT( mpText, mnTextSize );
+		nScriptType = xPPTBreakIter->getScriptType( sT, 0 );
+	}
+	if ( nScriptType != com::sun::star::i18n::ScriptType::COMPLEX )
+	{
+		bOk = ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontNameAsian" ) ), bGetPropStateValue );
+		meAsianOrComplexFont = ePropState;
+		if ( bOk )
+		{
+			FontCollectionEntry aFontDesc( *(::rtl::OUString*)mAny.getValue() );
+			sal_uInt32  nCount = rFontCollection.GetCount();
+			mnAsianOrComplexFont = (sal_uInt16)rFontCollection.GetId( aFontDesc );
+			if ( mnAsianOrComplexFont == nCount )
+			{
+				FontCollectionEntry& rFontDesc = rFontCollection.GetLast();
+				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontCharSetAsian" ) ), sal_False ) )
+					mAny >>= rFontDesc.CharSet;
+				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontFamilyAsian" ) ), sal_False ) )
+					mAny >>= rFontDesc.Family;
+				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontPitchAsian" ) ), sal_False ) )
+					mAny >>= rFontDesc.Pitch;
+			}
+		}
+	}
+	else
+	{
+		bOk = ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontNameComplex" ) ), bGetPropStateValue );
+		meAsianOrComplexFont = ePropState;
+		if ( bOk )
+		{
+			FontCollectionEntry aFontDesc( *(::rtl::OUString*)mAny.getValue() );
+			sal_uInt32  nCount = rFontCollection.GetCount();
+			mnAsianOrComplexFont = (sal_uInt16)rFontCollection.GetId( aFontDesc );
+			if ( mnAsianOrComplexFont == nCount )
+			{
+				FontCollectionEntry& rFontDesc = rFontCollection.GetLast();
+				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontCharSetComplex" ) ), sal_False ) )
+					mAny >>= rFontDesc.CharSet;
+				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontFamilyComplex" ) ), sal_False ) )
+					mAny >>= rFontDesc.Family;
+				if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharFontPitchComplex" ) ), sal_False ) )
+					mAny >>= rFontDesc.Pitch;
+			}
+		}
+	}
+
+	if ( nScriptType != com::sun::star::i18n::ScriptType::COMPLEX )
+	{
+	    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharWeight" ) ), bGetPropStateValue ) )
+	    {
+		float fFloat = 0;
+		mAny >>= fFloat;
+		if ( fFloat >= ::com::sun::star::awt::FontWeight::SEMIBOLD )
+		    mnCharAttr |= 1;
+	    }
+	}
+	else
+	{
+	    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharWeightComplex" ) ), bGetPropStateValue ) )
+	    {
+		float fFloat = 0;
+		mAny >>= fFloat;
+		if ( fFloat >= ::com::sun::star::awt::FontWeight::SEMIBOLD )
+		    mnCharAttr |= 1;
+	    }
+	}
+
+    if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        mnCharAttrHard |= 1;
+
+	if ( nScriptType != com::sun::star::i18n::ScriptType::COMPLEX )
+	{
+		if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharPosture" ) ), bGetPropStateValue ) )
+		{
+			::com::sun::star::awt::FontSlant aFS;
+			mAny >>= aFS;
+			switch ( aFS )
+			{
+			    case ::com::sun::star::awt::FontSlant_OBLIQUE :
+			    case ::com::sun::star::awt::FontSlant_ITALIC :
+					mnCharAttr |= 2;
+					break;
+				default:
+					break;
+			}
+		}
+	}
+	else
+	{
+		if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharPostureComplex" ) ), bGetPropStateValue ) )
+		{
+			::com::sun::star::awt::FontSlant aFS;
+			mAny >>= aFS;
+			switch ( aFS )
+			{
+			    case ::com::sun::star::awt::FontSlant_OBLIQUE :
+			    case ::com::sun::star::awt::FontSlant_ITALIC :
+					mnCharAttr |= 2;
+					break;
+				default:
+					break;
+			}
+		}
+	}
+
+	if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        mnCharAttrHard |= 2;
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharUnderline" ) ), bGetPropStateValue ) )
+    {
+        sal_Int16 nVal = 0;
+        mAny >>= nVal;
+        switch ( nVal )
+        {
+            case ::com::sun::star::awt::FontUnderline::SINGLE :
+            case ::com::sun::star::awt::FontUnderline::DOUBLE :
+            case ::com::sun::star::awt::FontUnderline::DOTTED :
+                mnCharAttr |= 4;
+        }
+    }
+    if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        mnCharAttrHard |= 4;
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharShadowed" ) ), bGetPropStateValue ) )
+    {
+        sal_Bool bBool = false;
+        mAny >>= bBool;
+        if ( bBool )
+            mnCharAttr |= 0x10;
+    }
+    if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        mnCharAttrHard |= 16;
+
+	if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharLocale" ) ), bGetPropStateValue ) )
+	{
+		com::sun::star::lang::Locale eLocale;
+		if ( mAny >>= eLocale )
+			meCharLocale = eLocale;
+	}
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharRelief" ) ), bGetPropStateValue ) )
+    {
+        sal_Int16 nVal = ::com::sun::star::text::FontRelief::NONE;
+        mAny >>= nVal;
+        if ( nVal != ::com::sun::star::text::FontRelief::NONE )
+            mnCharAttr |= 512;
+    }
+    if ( ePropState == ::com::sun::star::beans::PropertyState_DIRECT_VALUE )
+        mnCharAttrHard |= 512;
+
+    mnCharHeight = 24;
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharHeight" ) ), bGetPropStateValue ) )
+    {
+        float fVal = 0;
+        mAny >>= fVal;
+        mnCharHeight = (sal_uInt16)( fVal + 0.5 );
+    }
+    meCharHeight = ePropState;
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharColor" ) ), bGetPropStateValue ) )
+    {
+        sal_uInt32 nSOColor = *( (sal_uInt32*)mAny.getValue() );
+        mnCharColor = nSOColor & 0xff00ff00;                            // green and hibyte
+        mnCharColor |= (sal_uInt8)( nSOColor ) << 16;                   // red and blue is switched
+        mnCharColor |= (sal_uInt8)( nSOColor >> 16 );
+    }
+    meCharColor = ePropState;
+
+    mnCharEscapement = 0;
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "CharEscapement" ) ), bGetPropStateValue ) )
+    {
+        mAny >>= mnCharEscapement;
+        if ( mnCharEscapement > 100 )
+            mnCharEscapement = 33;
+        else if ( mnCharEscapement < -100 )
+            mnCharEscapement = -33;
+    }
+    meCharEscapement = ePropState;
+}
+
+void PortionObj::ImplClear()
+{
+    delete (FieldEntry*)mpFieldEntry;
+    delete[] mpText;
+}
+
+void PortionObj::ImplConstruct( PortionObj& rPortionObj )
+{
+    mbLastPortion = rPortionObj.mbLastPortion;
+    mnTextSize = rPortionObj.mnTextSize;
+    mnCharColor = rPortionObj.mnCharColor;
+    mnCharEscapement = rPortionObj.mnCharEscapement;
+    mnCharAttr = rPortionObj.mnCharAttr;
+    mnCharHeight = rPortionObj.mnCharHeight;
+    mnFont = rPortionObj.mnFont;
+    mnAsianOrComplexFont = rPortionObj.mnAsianOrComplexFont;
+
+    if ( rPortionObj.mpText )
+    {
+        mpText = new sal_uInt16[ mnTextSize ];
+        memcpy( mpText, rPortionObj.mpText, mnTextSize << 1 );
+    }
+    else
+        mpText = NULL;
+
+    if ( rPortionObj.mpFieldEntry )
+        mpFieldEntry = new FieldEntry( *( rPortionObj.mpFieldEntry ) );
+    else
+        mpFieldEntry = NULL;
+}
+
+sal_uInt32 PortionObj::ImplCalculateTextPositions( sal_uInt32 nCurrentTextPosition )
+{
+    if ( mpFieldEntry && ( !mpFieldEntry->nFieldStartPos ) )
+    {
+        mpFieldEntry->nFieldStartPos += nCurrentTextPosition;
+        mpFieldEntry->nFieldEndPos += nCurrentTextPosition;
+    }
+    return mnTextSize;
+}
+
+//  -----------------------------------------------------------------------
+// Rueckgabe:                           0 = kein TextField
+//  bit28->31   text field type :
+//                                      1 = Date
+//                                      2 = Time
+//                                      3 = SlideNumber
+//                                      4 = Url
+//										5 = DateTime
+//										6 = header
+//										7 = footer
+//  bit24->27   text field sub type	(optional)
+//     23->     PPT Textfield needs a placeholder
+
+sal_uInt32 PortionObj::ImplGetTextField( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > & ,
+	const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet, String& rURL )
+{
+    sal_uInt32 nRetValue = 0;
+    sal_Int32 nFormat;
+	::com::sun::star::uno::Any aAny;
+	if ( GetPropertyValue( aAny, rXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "TextPortionType" ) ), sal_True ) )
+	{
+		String  aTextFieldType( *(::rtl::OUString*)aAny.getValue() );
+		if ( aTextFieldType == String( RTL_CONSTASCII_USTRINGPARAM( "TextField" ) ) )
+		{
+			if ( GetPropertyValue( aAny, rXPropSet, aTextFieldType, sal_True ) )
+			{
+				::com::sun::star::uno::Reference< ::com::sun::star::text::XTextField > aXTextField;
+				if ( aAny >>= aXTextField )
+				{
+					if ( aXTextField.is() )
+					{
+						::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >
+							xFieldPropSet( aXTextField, ::com::sun::star::uno::UNO_QUERY );
+						if ( xFieldPropSet.is() )
+						{
+							String aFieldKind( aXTextField->getPresentation( TRUE ) );
+							if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Date" ) ) )
+							{
+								if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsFix" ) ) ), sal_True )
+								{
+									sal_Bool bBool = true;
+									aAny >>= bBool;
+									if ( !bBool )  // Fixed DateFields gibt es in PPT nicht
+									{
+										if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Format" ) ) ), sal_True )
+										{
+											nFormat = *(sal_Int32*)aAny.getValue();
+											switch ( nFormat )
+											{
+												default:
+												case 5 :
+												case 4 :
+												case 2 : nFormat = 0; break;
+												case 8 :
+												case 9 :
+												case 3 : nFormat = 1; break;
+												case 7 :
+												case 6 : nFormat = 2; break;
+											}
+											nRetValue |= ( ( ( 1 << 4 ) | nFormat ) << 24 ) | 0x800000;
+										}
+									}
+								}
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "URL" ) ) )
+							{
+								if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "URL" ) ) ), sal_True )
+									rURL = String( *(::rtl::OUString*)aAny.getValue() );
+								nRetValue = 4 << 28;
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Page" ) ) )
+							{
+								nRetValue = 3 << 28 | 0x800000;
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Pages" ) ) )
+							{
+
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Time" ) ) )
+							{
+								if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsFix" ) ) ), sal_True )
+								{
+									sal_Bool bBool = true;
+									aAny >>= bBool;
+									if ( !bBool )
+									{
+										if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsFix" ) ) ), sal_True )
+										{
+											nFormat = *(sal_Int32*)aAny.getValue();
+											nRetValue |= ( ( ( 2 << 4 ) | nFormat ) << 24 ) | 0x800000;
+										}
+									}
+								}
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "File" ) ) )
+							{
+
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Table" ) ) )
+							{
+
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "ExtTime" ) ) )
+							{
+								if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "IsFix" ) ) ), sal_True )
+								{
+									sal_Bool bBool = true;
+									aAny >>= bBool;
+									if ( !bBool )
+									{
+										if ( GetPropertyValue( aAny, xFieldPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "Format" ) ) ), sal_True )
+										{
+											nFormat = *(sal_Int32*)aAny.getValue();
+											switch ( nFormat )
+											{
+												default:
+												case 6 :
+												case 7 :
+												case 8 :
+												case 2 : nFormat = 12; break;
+												case 3 : nFormat = 9; break;
+												case 5 :
+												case 4 : nFormat = 10; break;
+
+											}
+											nRetValue |= ( ( ( 2 << 4 ) | nFormat ) << 24 ) | 0x800000;
+										}
+									}
+								}
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "ExtFile" ) ) )
+							{
+
+							}
+							else if ( aFieldKind ==  String( RTL_CONSTASCII_USTRINGPARAM( "Author" ) ) )
+							{
+
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "DateTime" ) ) )
+							{
+								nRetValue = 5 << 28 | 0x800000;
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Header" ) ) )
+							{
+								nRetValue = 6 << 28 | 0x800000;
+							}
+							else if ( aFieldKind == String( RTL_CONSTASCII_USTRINGPARAM( "Footer" ) ) )
+							{
+								nRetValue = 7 << 28 | 0x800000;
+							}
+						}
+					}
+				}
+			}
+		}
+	}
+    return nRetValue;
+}
+
+PortionObj& PortionObj::operator=( PortionObj& rPortionObj )
+{
+    if ( this != &rPortionObj )
+    {
+        ImplClear();
+        ImplConstruct( rPortionObj );
+    }
+    return *this;
+}
+
+//  -----------------------------------------------------------------------
+
+ParagraphObj::ParagraphObj( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSet,
+                PPTExBulletProvider& rProv ) :
+    maMapModeSrc        ( MAP_100TH_MM ),
+    maMapModeDest       ( MAP_INCH, Point(), Fraction( 1, 576 ), Fraction( 1, 576 ) )
+{
+    mXPropSet = rXPropSet;
+
+    bExtendedParameters = FALSE;
+
+    nDepth = 0;
+    nBulletFlags = 0;
+    nParaFlags = 0;
+
+    ImplGetParagraphValues( rProv, FALSE );
+}
+
+    ParagraphObj::ParagraphObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextContent > & rXTextContent,
+                    ParaFlags aParaFlags, FontCollection& rFontCollection, PPTExBulletProvider& rProv ) :
+    maMapModeSrc        ( MAP_100TH_MM ),
+    maMapModeDest       ( MAP_INCH, Point(), Fraction( 1, 576 ), Fraction( 1, 576 ) ),
+    mbFirstParagraph    ( aParaFlags.bFirstParagraph ),
+    mbLastParagraph     ( aParaFlags.bLastParagraph )
+{
+    bExtendedParameters = FALSE;
+
+    nDepth = 0;
+    nBulletFlags = 0;
+    nParaFlags = 0;
+
+    mXPropSet = ::com::sun::star::uno::Reference<
+        ::com::sun::star::beans::XPropertySet >
+            ( rXTextContent, ::com::sun::star::uno::UNO_QUERY );
+
+    mXPropState = ::com::sun::star::uno::Reference<
+        ::com::sun::star::beans::XPropertyState >
+            ( rXTextContent, ::com::sun::star::uno::UNO_QUERY );
+
+    if ( mXPropSet.is() && mXPropState.is() )
+    {
+        ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumerationAccess >
+            aXTextPortionEA( rXTextContent, ::com::sun::star::uno::UNO_QUERY );
+        if ( aXTextPortionEA.is() )
+        {
+            ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumeration >
+                aXTextPortionE( aXTextPortionEA->createEnumeration() );
+            if ( aXTextPortionE.is() )
+            {
+                while ( aXTextPortionE->hasMoreElements() )
+                {
+                    ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > aXCursorText;
+                    ::com::sun::star::uno::Any aAny( aXTextPortionE->nextElement() );
+                    if ( aAny >>= aXCursorText )
+                    {
+                        PortionObj* pPortionObj = new PortionObj( aXCursorText, !aXTextPortionE->hasMoreElements(), rFontCollection );
+                        if ( pPortionObj->Count() )
+                            Insert( pPortionObj, LIST_APPEND );
+                        else
+                            delete pPortionObj;
+                    }
+                }
+            }
+        }
+        ImplGetParagraphValues( rProv, TRUE );//
+    }
+}
+
+ParagraphObj::ParagraphObj( ParagraphObj& rObj )
+: List()
+, PropStateValue()
+, SOParagraph()
+{
+    ImplConstruct( rObj );
+}
+
+ParagraphObj::~ParagraphObj()
+{
+    ImplClear();
+}
+
+void ParagraphObj::Write( SvStream* pStrm )
+{
+    for ( void* pPtr = First(); pPtr; pPtr = Next() )
+        ((PortionObj*)pPtr)->Write( pStrm, mbLastParagraph );
+}
+
+void ParagraphObj::ImplClear()
+{
+    for ( void* pPtr = First(); pPtr; pPtr = Next() )
+        delete (PortionObj*)pPtr;
+}
+
+void ParagraphObj::CalculateGraphicBulletSize( sal_uInt16 nFontHeight )
+{
+    if ( ( (SvxExtNumType)nNumberingType == SVX_NUM_BITMAP ) && ( nBulletId != 0xffff ) )
+    {
+        // calculate the bulletrealsize for this grafik
+        if ( aBuGraSize.Width() && aBuGraSize.Height() )
+        {
+            double fCharHeight = nFontHeight;
+            double fLen = aBuGraSize.Height();
+            fCharHeight = fCharHeight * 0.2540;
+            double fQuo = fLen / fCharHeight;
+            nBulletRealSize = (sal_Int16)( fQuo + 0.5 );
+            if ( (sal_uInt16)nBulletRealSize > 400 )
+                nBulletRealSize = 400;
+        }
+    }
+}
+
+void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider& rBuProv, sal_Int16 nNumberingDepth, sal_Bool bIsBullet, sal_Bool bGetPropStateValue )
+{
+	::com::sun::star::uno::Any aAny;
+	if ( GetPropertyValue( aAny, mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "ParaLeftMargin" ) ) ) )
+	{
+		sal_Int32 nVal;
+        if ( aAny >>= nVal )
+			nTextOfs = static_cast< sal_Int16 >( nVal / ( 2540.0 / 576 ) + 0.5 ) ;
+	}
+    if ( GetPropertyValue( aAny, mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "ParaFirstLineIndent" ) ) ) )
+	{
+        if ( aAny >>= nBulletOfs )
+			nBulletOfs = static_cast< sal_Int32 >( nBulletOfs / ( 2540.0 / 576 ) + 0.5 );
+	}
+	if ( GetPropertyValue( aAny, mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "NumberingIsNumber" ) ) ) )
+		aAny >>= bNumberingIsNumber;
+
+	::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexReplace > aXIndexReplace;
+
+    if ( bIsBullet && ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "NumberingRules" ) ), bGetPropStateValue ) )
+    {
+        if ( ( mAny >>= aXIndexReplace ) && nNumberingDepth < aXIndexReplace->getCount() )
+        {
+            mAny <<= aXIndexReplace->getByIndex( nNumberingDepth );
+            ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue>
+                aPropertySequence( *( ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue>*)mAny.getValue() );
+
+            const ::com::sun::star::beans::PropertyValue* pPropValue = aPropertySequence.getArray();
+
+            sal_Int32 nPropertyCount = aPropertySequence.getLength();
+            if ( nPropertyCount )
+            {
+                bExtendedParameters = TRUE;
+                nBulletRealSize = 100;
+                nMappedNumType = 0;
+
+                String aGraphicURL;
+                for ( sal_Int32 i = 0; i < nPropertyCount; i++ )
+                {
+                    const void* pValue = pPropValue[ i ].Value.getValue();
+                    if ( pValue )
+                    {
+                        ::rtl::OUString aPropName( pPropValue[ i ].Name );
+                        if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "NumberingType" ) ) )
+                            nNumberingType = *( (sal_Int16*)pValue );
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "Adjust" ) ) )
+                            nHorzAdjust = *( (sal_Int16*)pValue );
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "BulletChar" ) ) )
+                        {
+                            String aString( *( (String*)pValue ) );
+                            if ( aString.Len() )
+                                cBulletId = aString.GetChar( 0 );
+                        }
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "BulletFont" ) ) )
+                        {
+                            aFontDesc = *( (::com::sun::star::awt::FontDescriptor*)pValue );
+
+                            // Our numbullet dialog has set the wrong textencoding for our "StarSymbol" font,
+                            // instead of a Unicode encoding the encoding RTL_TEXTENCODING_SYMBOL was used.
+                            // Because there might exist a lot of damaged documemts I added this two lines
+                            // which fixes the bullet problem for the export.
+                            if ( aFontDesc.Name.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "StarSymbol" ) ) )
+                                aFontDesc.CharSet = RTL_TEXTENCODING_MS_1252;
+
+                        }
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "GraphicURL" ) ) )
+                            aGraphicURL = ( *(::rtl::OUString*)pValue );
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "GraphicSize" ) ) )
+                        {
+                            if ( pPropValue[ i ].Value.getValueType() == ::getCppuType( (::com::sun::star::awt::Size*)0) ) 
+                            {
+                                // don't cast awt::Size to Size as on 64-bits they are not the same.
+                                ::com::sun::star::awt::Size aSize;
+                                pPropValue[ i ].Value >>= aSize;
+                                aBuGraSize.nA = aSize.Width;
+                                aBuGraSize.nB = aSize.Height;
+                            }
+                        }
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "StartWith" ) ) )
+                            nStartWith = *( (sal_Int16*)pValue );
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "LeftMargin" ) ) )
+                            nTextOfs = nTextOfs + static_cast< sal_Int16 >( *( (sal_Int32*)pValue ) / ( 2540.0 / 576 ) );
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "FirstLineOffset" ) ) )
+                            nBulletOfs += (sal_Int16)( *( (sal_Int32*)pValue ) / ( 2540.0 / 576 ) );
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "BulletColor" ) ) )
+                        {
+                            sal_uInt32 nSOColor = *( (sal_uInt32*)pValue );
+                            nBulletColor = nSOColor & 0xff00ff00;                       // green and hibyte
+                            nBulletColor |= (sal_uInt8)( nSOColor ) << 16;              // red
+                            nBulletColor |= (sal_uInt8)( nSOColor >> 16 ) | 0xfe000000; // blue
+                        }
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "BulletRelSize" ) ) )
+                        {
+                            nBulletRealSize = *( (sal_Int16*)pValue );
+                            nParaFlags |= 0x40;
+                            nBulletFlags |= 8;
+                        }
+                        else if ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "Prefix" ) ) )
+                            sPrefix = ( *(::rtl::OUString*)pValue );
+                        else if  ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "Suffix" ) ) )
+                            sSuffix = ( *(::rtl::OUString*)pValue );
+#ifdef DBG_UTIL
+                        else if ( ! (
+                                ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "SymbolTextDistance" ) ) )
+                            ||  ( aPropName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "Graphic" ) ) ) ) )
+                        {
+                            DBG_ERROR( "Unbekanntes Property" );
+                        }
+#endif
+                    }
+                }
+
+                if ( aGraphicURL.Len() )
+                {
+					if ( aBuGraSize.Width() && aBuGraSize.Height() )
+					{
+						xub_StrLen nIndex = aGraphicURL.Search( (sal_Unicode)':', 0 );
+						if ( nIndex != STRING_NOTFOUND )
+						{
+							nIndex++;
+							if ( aGraphicURL.Len() > nIndex  )
+							{
+								ByteString aUniqueId( aGraphicURL, nIndex, aGraphicURL.Len() - nIndex, RTL_TEXTENCODING_UTF8 );
+								if ( aUniqueId.Len() )
+								{
+									nBulletId = rBuProv.GetId( aUniqueId, aBuGraSize );
+									if ( nBulletId != 0xffff )
+										bExtendedBulletsUsed = TRUE;
+								}
+							}
+						}
+					}
+					else
+					{
+						nNumberingType = SVX_NUM_NUMBER_NONE;
+					}
+                }
+
+                PortionObj* pPortion = (PortionObj*)First();
+                CalculateGraphicBulletSize( ( pPortion ) ? pPortion->mnCharHeight : 24 );
+
+                switch( (SvxExtNumType)nNumberingType )
+                {
+                    case SVX_NUM_NUMBER_NONE : nParaFlags |= 0xf; break;
+
+                    case SVX_NUM_CHAR_SPECIAL :                           // Bullet
+                    {
+                        cBulletId = oox::drawingml::DrawingML::SubstituteBullet( cBulletId, aFontDesc );
+
+                        if ( aFontDesc.Name.getLength() )
+                        {
+/*
+                            if ( aFontDesc.CharSet != ::com::sun::star::awt::CharSet::SYMBOL )
+                            {
+                                switch ( cBulletId )
+                                {
+                                    // Currency
+                                    case 128:   cBulletId = 0x20AC; break;
+                                    // Punctuation and other
+                                    case 130:   cBulletId = 0x201A; break;// SINGLE LOW-9 QUOTATION MARK
+                                    case 131:   cBulletId = 0x0192; break;// LATIN SMALL LETTER F WITH HOOK
+                                    case 132:   cBulletId = 0x201E; break;// DOUBLE LOW-9 QUOTATION MARK
+                                                                          // LOW DOUBLE PRIME QUOTATION MARK
+                                    case 133:   cBulletId = 0x2026; break;// HORIZONTAL ELLIPSES
+                                    case 134:   cBulletId = 0x2020; break;// DAGGER
+                                    case 135:   cBulletId = 0x2021; break;// DOUBLE DAGGER
+                                    case 136:   cBulletId = 0x02C6; break;// MODIFIER LETTER CIRCUMFLEX ACCENT
+                                    case 137:   cBulletId = 0x2030; break;// PER MILLE SIGN
+                                    case 138:   cBulletId = 0x0160; break;// LATIN CAPITAL LETTER S WITH CARON
+                                    case 139:   cBulletId = 0x2039; break;// SINGLE LEFT-POINTING ANGLE QUOTATION MARK
+                                    case 140:   cBulletId = 0x0152; break;// LATIN CAPITAL LIGATURE OE
+                                    case 142:   cBulletId = 0x017D; break;// LATIN CAPITAL LETTER Z WITH CARON
+                                    case 145:   cBulletId = 0x2018; break;// LEFT SINGLE QUOTATION MARK
+                                                                          // MODIFIER LETTER TURNED COMMA
+                                    case 146:   cBulletId = 0x2019; break;// RIGHT SINGLE QUOTATION MARK
+                                                                          // MODIFIER LETTER APOSTROPHE
+                                    case 147:   cBulletId = 0x201C; break;// LEFT DOUBLE QUOTATION MARK
+                                                                          // REVERSED DOUBLE PRIME QUOTATION MARK
+                                    case 148:   cBulletId = 0x201D; break;// RIGHT DOUBLE QUOTATION MARK
+                                                                          // REVERSED DOUBLE PRIME QUOTATION MARK
+                                    case 149:   cBulletId = 0x2022; break;// BULLET
+                                    case 150:   cBulletId = 0x2013; break;// EN DASH
+                                    case 151:   cBulletId = 0x2014; break;// EM DASH
+                                    case 152:   cBulletId = 0x02DC; break;// SMALL TILDE
+                                    case 153:   cBulletId = 0x2122; break;// TRADE MARK SIGN
+                                    case 154:   cBulletId = 0x0161; break;// LATIN SMALL LETTER S WITH CARON
+                                    case 155:   cBulletId = 0x203A; break;// SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
+                                    case 156:   cBulletId = 0x0153; break;// LATIN SMALL LIGATURE OE
+                                    case 158:   cBulletId = 0x017E; break;// LATIN SMALL LETTER Z WITH CARON
+                                    case 159:   cBulletId = 0x0178; break;// LATIN CAPITAL LETTER Y WITH DIAERESIS
+//                                  case 222:   cBulletId = 0x00B6; break;// PILCROW SIGN / PARAGRAPH SIGN
+                                }
+                            }
+*/
+                            nParaFlags |= 0x90; // wir geben den Font und den Charset vor
+                        }
+                    }
+                    case SVX_NUM_CHARS_UPPER_LETTER :       // zaehlt von a-z, aa - az, ba - bz, ...
+                    case SVX_NUM_CHARS_LOWER_LETTER :
+                    case SVX_NUM_ROMAN_UPPER :
+                    case SVX_NUM_ROMAN_LOWER :
+                    case SVX_NUM_ARABIC :
+                    case SVX_NUM_PAGEDESC :                 // Numerierung aus der Seitenvorlage
+                    case SVX_NUM_BITMAP :
+                    case SVX_NUM_CHARS_UPPER_LETTER_N :     // zaehlt von  a-z, aa-zz, aaa-zzz
+                    case SVX_NUM_CHARS_LOWER_LETTER_N :
+                    {
+                        if ( nNumberingType != SVX_NUM_CHAR_SPECIAL )
+                        {
+                            bExtendedBulletsUsed = TRUE;
+                            if ( nNumberingDepth & 1 )
+                                cBulletId = 0x2013;         // defaulting bullet characters for ppt97
+                            else if ( nNumberingDepth == 4 )
+                                cBulletId = 0xbb;
+                            else
+                                cBulletId = 0x2022;
+
+                            switch( (SvxExtNumType)nNumberingType )
+                            {
+                                case SVX_NUM_CHARS_UPPER_LETTER :
+                                case SVX_NUM_CHARS_UPPER_LETTER_N :
+                                {
+                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
+                                    {
+                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
+                                            nMappedNumType = 0xa0001;   // (A)
+                                        else
+                                            nMappedNumType = 0xb0001;   // A)
+                                    }
+                                    else
+                                        nMappedNumType = 0x10001;       // A.
+                                }
+                                break;
+                                case SVX_NUM_CHARS_LOWER_LETTER :
+                                case SVX_NUM_CHARS_LOWER_LETTER_N :
+                                {
+                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
+                                    {
+                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
+                                            nMappedNumType = 0x80001;   // (a)
+                                        else
+                                            nMappedNumType = 0x90001;   // a)
+                                    }
+                                    else
+                                        nMappedNumType = 0x00001;       // a.
+                                }
+                                break;
+                                case SVX_NUM_ROMAN_UPPER :
+                                {
+                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
+                                    {
+                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
+                                            nMappedNumType = 0xe0001;   // (I)
+                                        else
+                                            nMappedNumType = 0xf0001;   // I)
+                                    }
+                                    else
+                                        nMappedNumType = 0x70001;       // I.
+                                }
+                                break;
+                                case SVX_NUM_ROMAN_LOWER :
+                                {
+                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
+                                    {
+                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
+                                            nMappedNumType = 0x40001;   // (i)
+                                        else
+                                            nMappedNumType = 0x50001;   // i)
+                                    }
+                                    else
+                                        nMappedNumType = 0x60001;       // i.
+                                }
+                                break;
+                                case SVX_NUM_ARABIC :
+                                {
+                                    if ( sSuffix == String( RTL_CONSTASCII_USTRINGPARAM( ")" ) ) )
+                                    {
+                                        if ( sPrefix == String( RTL_CONSTASCII_USTRINGPARAM( "(" ) ) )
+                                            nMappedNumType = 0xc0001;   // (1)
+                                        else
+                                            nMappedNumType = 0x20001;   // 1)
+                                    }
+                                    else
+                                    {
+                                        if ( ! ( sSuffix.Len() + sPrefix.Len() ) )
+                                            nMappedNumType = 0xd0001;   // 1
+                                        else
+                                            nMappedNumType = 0x30001;   // 1.
+                                    }
+                                }
+                                break;
+								default:
+									break;
+                            }
+                        }
+                        nParaFlags |= 0x2f;
+                        nBulletFlags |= 6;
+                        if ( mbIsBullet && bNumberingIsNumber )
+                            nBulletFlags |= 1;
+                    }
+                }
+            }
+	}
+    }
+    nBulletOfs = nTextOfs + nBulletOfs;
+    if ( nBulletOfs < 0 )
+        nBulletOfs = 0;
+}
+
+void ParagraphObj::ImplGetParagraphValues( PPTExBulletProvider& rBuProv, sal_Bool bGetPropStateValue )
+{
+    static String sNumberingLevel   ( RTL_CONSTASCII_USTRINGPARAM( "NumberingLevel" ) );
+
+	::com::sun::star::uno::Any aAny;
+	if ( GetPropertyValue( aAny, mXPropSet, sNumberingLevel, sal_True ) )
+    {
+        if ( bGetPropStateValue )
+            meBullet = GetPropertyState( mXPropSet, sNumberingLevel );
+        nDepth = *( (sal_Int16*)aAny.getValue() );
+
+		if ( nDepth < 0 )
+		{
+			mbIsBullet = sal_False;
+			nDepth = 0;
+		}
+		else
+		{
+			if ( nDepth > 4 )
+				nDepth = 4;
+			mbIsBullet = sal_True;
+		}
+    }
+    else
+	{
+        nDepth = 0;
+		mbIsBullet = sal_False;
+	}
+    ImplGetNumberingLevel( rBuProv, nDepth, mbIsBullet, bGetPropStateValue );
+
+	if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaTabStops" ) ), bGetPropStateValue ) )
+        maTabStop = *( ::com::sun::star::uno::Sequence< ::com::sun::star::style::TabStop>*)mAny.getValue();
+    mnOOTextAdjust = ::com::sun::star::style::ParagraphAdjust_LEFT;
+    if ( GetPropertyValue( aAny, mXPropSet, String( RTL_CONSTASCII_USTRINGPARAM( "ParaAdjust" ) ), bGetPropStateValue ) )
+        aAny >>= mnOOTextAdjust;
+    switch ( (::com::sun::star::style::ParagraphAdjust)mnOOTextAdjust )
+    {
+        case ::com::sun::star::style::ParagraphAdjust_CENTER :
+            mnTextAdjust = 1;
+        break;
+        case ::com::sun::star::style::ParagraphAdjust_RIGHT :
+            mnTextAdjust = 2;
+        break;
+        case ::com::sun::star::style::ParagraphAdjust_BLOCK :
+            mnTextAdjust = 3;
+        break;
+        default :
+        case ::com::sun::star::style::ParagraphAdjust_LEFT :
+            mnTextAdjust = 0;
+        break;
+    }
+    meTextAdjust = ePropState;
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaLineSpacing" ) ), bGetPropStateValue ) )
+    {
+        ::com::sun::star::style::LineSpacing aLineSpacing
+            = *( (::com::sun::star::style::LineSpacing*)mAny.getValue() );
+        switch ( aLineSpacing.Mode )
+        {
+            case ::com::sun::star::style::LineSpacingMode::FIX :
+                mnLineSpacing = (sal_Int16)(-( aLineSpacing.Height ) );
+                mbFixedLineSpacing = TRUE;
+                break;
+            case ::com::sun::star::style::LineSpacingMode::MINIMUM :
+            case ::com::sun::star::style::LineSpacingMode::LEADING :
+                mnLineSpacing = (sal_Int16)(-( aLineSpacing.Height ) );
+                mbFixedLineSpacing = FALSE;
+           break;
+
+            case ::com::sun::star::style::LineSpacingMode::PROP :
+            default:
+                mnLineSpacing = (sal_Int16)( aLineSpacing.Height );
+            break;
+        }
+    }
+    meLineSpacing = ePropState;
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaBottomMargin" ) ), bGetPropStateValue ) )
+    {
+        double fSpacing = *( (sal_uInt32*)mAny.getValue() ) + ( 2540.0 / 576.0 ) - 1;
+        mnLineSpacingBottom = (sal_Int16)(-( fSpacing * 576.0 / 2540.0 ) );
+    }
+    meLineSpacingBottom = ePropState;
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaTopMargin" ) ), bGetPropStateValue ) )
+    {
+        double fSpacing = *( (sal_uInt32*)mAny.getValue() ) + ( 2540.0 / 576.0 ) - 1;
+        mnLineSpacingTop = (sal_Int16)(-( fSpacing * 576.0 / 2540.0 ) );
+    }
+    meLineSpacingTop = ePropState;
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaIsForbiddenRules" ) ), bGetPropStateValue ) )
+        mAny >>= mbForbiddenRules;
+    meForbiddenRules = ePropState;
+
+    if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "ParaIsHangingPunctuation" ) ), bGetPropStateValue ) )
+        mAny >>= mbParagraphPunctation;
+    meParagraphPunctation = ePropState;
+
+	mnBiDi = 0;
+	if ( ImplGetPropertyValue( String( RTL_CONSTASCII_USTRINGPARAM( "WritingMode" ) ), bGetPropStateValue ) )
+	{
+		sal_Int16 nWritingMode = 0;
+		mAny >>= nWritingMode;
+
+		SvxFrameDirection eWritingMode( (SvxFrameDirection)nWritingMode );
+		if ( ( eWritingMode == FRMDIR_HORI_RIGHT_TOP )
+			|| ( eWritingMode == FRMDIR_VERT_TOP_RIGHT ) )
+		{
+			mnBiDi = 1;
+		}
+	}
+	meBiDi = ePropState;
+}
+
+void ParagraphObj::ImplConstruct( ParagraphObj& rParagraphObj )
+{
+    mnTextSize = rParagraphObj.mnTextSize;
+    mnTextAdjust = rParagraphObj.mnTextAdjust;
+    mnLineSpacing = rParagraphObj.mnLineSpacing;
+    mnLineSpacingTop = rParagraphObj.mnLineSpacingTop;
+    mnLineSpacingBottom = rParagraphObj.mnLineSpacingBottom;
+    mbFirstParagraph = rParagraphObj.mbFirstParagraph;
+    mbLastParagraph = rParagraphObj.mbLastParagraph;
+    mbParagraphPunctation = rParagraphObj.mbParagraphPunctation;
+    mbForbiddenRules = rParagraphObj.mbForbiddenRules;
+    mnBiDi = rParagraphObj.mnBiDi;
+
+    for ( void* pPtr = rParagraphObj.First(); pPtr; pPtr = rParagraphObj.Next() )
+        Insert( new PortionObj( *(PortionObj*)pPtr ), LIST_APPEND );
+
+    maTabStop = rParagraphObj.maTabStop;
+    bExtendedParameters = rParagraphObj.bExtendedParameters;
+    nParaFlags = rParagraphObj.nParaFlags;
+    nBulletFlags = rParagraphObj.nBulletFlags;
+    sPrefix = rParagraphObj.sPrefix;
+    sSuffix = rParagraphObj.sSuffix;
+    sGraphicUrl = rParagraphObj.sGraphicUrl;            // String auf eine Graphic
+    aBuGraSize = rParagraphObj.aBuGraSize;
+    nNumberingType = rParagraphObj.nNumberingType;      // in wirlichkeit ist dies ein SvxEnum
+    nHorzAdjust = rParagraphObj.nHorzAdjust;
+    nBulletColor = rParagraphObj.nBulletColor;
+    nBulletOfs = rParagraphObj.nBulletOfs;
+    nStartWith = rParagraphObj.nStartWith;              // Start der nummerierung
+    nTextOfs = rParagraphObj.nTextOfs;
+    nBulletRealSize = rParagraphObj.nBulletRealSize;    // GroessenVerhaeltnis in Proz
+    nDepth = rParagraphObj.nDepth;                      // aktuelle tiefe
+    cBulletId = rParagraphObj.cBulletId;                // wenn Numbering Type == CharSpecial
+    aFontDesc = rParagraphObj.aFontDesc;
+
+    bExtendedBulletsUsed = rParagraphObj.bExtendedBulletsUsed;
+    nBulletId = rParagraphObj.nBulletId;
+}
+
+::com::sun::star::awt::Size ParagraphObj::ImplMapSize( const ::com::sun::star::awt::Size& rSize )
+{
+    Size aSize( OutputDevice::LogicToLogic( Size( rSize.Width, rSize.Height ), maMapModeSrc, maMapModeDest ) );
+    if ( !aSize.Width() )
+        aSize.Width()++;
+    if ( !aSize.Height() )
+        aSize.Height()++;
+    return ::com::sun::star::awt::Size( aSize.Width(), aSize.Height() );
+}
+
+sal_uInt32 ParagraphObj::ImplCalculateTextPositions( sal_uInt32 nCurrentTextPosition )
+{
+    mnTextSize = 0;
+    for ( void* pPtr = First(); pPtr; pPtr = Next() )
+        mnTextSize += ((PortionObj*)pPtr)->ImplCalculateTextPositions( nCurrentTextPosition + mnTextSize );
+    return mnTextSize;
+}
+
+ParagraphObj& ParagraphObj::operator=( ParagraphObj& rParagraphObj )
+{
+    if ( this != &rParagraphObj )
+    {
+        ImplClear();
+        ImplConstruct( rParagraphObj );
+    }
+    return *this;
+}
+
+//  -----------------------------------------------------------------------
+
+ImplTextObj::ImplTextObj( int nInstance )
+{
+    mnRefCount = 1;
+    mnTextSize = 0;
+    mnInstance = nInstance;
+    mpList = new List;
+    mbHasExtendedBullets = FALSE;
+	mbFixedCellHeightUsed = FALSE;
+}
+
+ImplTextObj::~ImplTextObj()
+{
+    for ( ParagraphObj* pPtr = (ParagraphObj*)mpList->First(); pPtr; pPtr = (ParagraphObj*)mpList->Next() )
+        delete pPtr;
+    delete mpList;
+}
+
+TextObj::TextObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XSimpleText > & rXTextRef,
+            int nInstance, FontCollection& rFontCollection, PPTExBulletProvider& rProv )
+{
+    mpImplTextObj = new ImplTextObj( nInstance );
+
+    ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumerationAccess >
+        aXTextParagraphEA( rXTextRef, ::com::sun::star::uno::UNO_QUERY );
+
+    if ( aXTextParagraphEA.is()  )
+    {
+        ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumeration >
+            aXTextParagraphE( aXTextParagraphEA->createEnumeration() );
+        if ( aXTextParagraphE.is() )
+        {
+            ParaFlags aParaFlags;
+            while ( aXTextParagraphE->hasMoreElements() )
+            {
+                ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextContent > aXParagraph;
+                ::com::sun::star::uno::Any aAny( aXTextParagraphE->nextElement() );
+                if ( aAny >>= aXParagraph )
+                {
+                    if ( !aXTextParagraphE->hasMoreElements() )
+                        aParaFlags.bLastParagraph = TRUE;
+                    ParagraphObj* pPara = new ParagraphObj( aXParagraph, aParaFlags, rFontCollection, rProv );
+                    mpImplTextObj->mbHasExtendedBullets |= pPara->bExtendedBulletsUsed;
+                    mpImplTextObj->mpList->Insert( pPara, LIST_APPEND );
+                    aParaFlags.bFirstParagraph = FALSE;
+                }
+            }
+        }
+    }
+    ImplCalculateTextPositions();
+}
+
+TextObj::TextObj( TextObj& rTextObj )
+{
+    mpImplTextObj = rTextObj.mpImplTextObj;
+    mpImplTextObj->mnRefCount++;
+}
+
+TextObj::~TextObj()
+{
+    if ( ! ( --mpImplTextObj->mnRefCount ) )
+        delete mpImplTextObj;
+}
+
+void TextObj::ImplCalculateTextPositions()
+{
+    mpImplTextObj->mnTextSize = 0;
+    for ( void* pPtr = First(); pPtr; pPtr = Next() )
+        mpImplTextObj->mnTextSize += ((ParagraphObj*)pPtr)->ImplCalculateTextPositions( mpImplTextObj->mnTextSize );
+}
+
+TextObj& TextObj::operator=( TextObj& rTextObj )
+{
+    if ( this != &rTextObj )
+    {
+        if ( ! ( --mpImplTextObj->mnRefCount ) )
+            delete mpImplTextObj;
+        mpImplTextObj = rTextObj.mpImplTextObj;
+        mpImplTextObj->mnRefCount++;
+    }
+    return *this;
+}
+
+// ---------------------------------------------------------------------------------------------
+
+FontCollectionEntry::~FontCollectionEntry()
+{
+}
+
+// ---------------------------------------------------------------------------------------------
+
+void FontCollectionEntry::ImplInit( const String& rName )
+{
+    String aSubstName( GetSubsFontName( rName, SUBSFONT_ONLYONE | SUBSFONT_MS ) );
+    if ( aSubstName.Len() )
+    {
+        Name = aSubstName;
+        bIsConverted = sal_True;
+    }
+    else
+    {
+        Name = rName;
+        bIsConverted = sal_False;
+    }
+}
+
+FontCollection::~FontCollection()
+{
+    for( void* pStr = List::First(); pStr; pStr = List::Next() )
+        delete (FontCollectionEntry*)pStr;
+    delete pVDev;
+	xPPTBreakIter = NULL;
+	xScriptTypeDetector = NULL;
+}
+
+FontCollection::FontCollection() :
+    pVDev ( NULL )
+{
+	com::sun::star::uno::Reference< com::sun::star::lang::XMultiServiceFactory >
+		xMSF = ::comphelper::getProcessServiceFactory();
+	com::sun::star::uno::Reference< com::sun::star::uno::XInterface >
+		xInterface = xMSF->createInstance( rtl::OUString::createFromAscii( "com.sun.star.i18n.BreakIterator" ) );
+	if ( xInterface.is() )
+		xPPTBreakIter = com::sun::star::uno::Reference< com::sun::star::i18n::XBreakIterator >
+			( xInterface, com::sun::star::uno::UNO_QUERY );
+
+	xInterface = xMSF->createInstance( rtl::OUString::createFromAscii( "com.sun.star.i18n.ScriptTypeDetector" ) );
+	if ( xInterface.is() )
+		xScriptTypeDetector = com::sun::star::uno::Reference< com::sun::star::i18n::XScriptTypeDetector >
+			( xInterface, com::sun::star::uno::UNO_QUERY );
+}
+
+short FontCollection::GetScriptDirection( const String& rString ) const
+{
+	short nRet = com::sun::star::i18n::ScriptDirection::NEUTRAL;
+	if ( xScriptTypeDetector.is() )
+	{
+		const rtl::OUString sT( rString );
+		nRet = xScriptTypeDetector->getScriptDirection( sT, 0, com::sun::star::i18n::ScriptDirection::NEUTRAL );
+	}
+	return nRet;
+}
+
+sal_uInt32 FontCollection::GetId( FontCollectionEntry& rEntry )
+{
+    if( rEntry.Name.Len() )
+    {
+        const sal_uInt32 nFonts = GetCount();
+
+        for( sal_uInt32 i = 0; i < nFonts; i++ )
+        {
+            const FontCollectionEntry* pEntry = GetById( i );
+            if( pEntry->Name == rEntry.Name )
+                return i;
+        }
+		Font aFont;
+		aFont.SetCharSet( rEntry.CharSet );
+		aFont.SetName( rEntry.Original );
+//		aFont.SetFamily( rEntry.Family );
+//		aFont.SetPitch( rEntry.Pitch );
+        aFont.SetHeight( 100 );
+
+        if ( !pVDev )
+            pVDev = new VirtualDevice;
+
+        pVDev->SetFont( aFont );
+		FontMetric aMetric( pVDev->GetFontMetric() );
+
+        sal_uInt16 nTxtHeight = (sal_uInt16)aMetric.GetAscent() + (sal_uInt16)aMetric.GetDescent();
+
+        if ( nTxtHeight )
+        {
+		    double fScaling = (double)nTxtHeight / 120.0;
+            if ( ( fScaling > 0.50 ) && ( fScaling < 1.5 ) )
+                rEntry.Scaling = fScaling;
+        }
+
+        List::Insert( new FontCollectionEntry( rEntry ), LIST_APPEND );
+        return nFonts;
+    }
+    return 0;
+}
+
+const FontCollectionEntry* FontCollection::GetById( sal_uInt32 nId )
+{
+    return (FontCollectionEntry*)List::GetObject( nId );
+}
+
+// ---------------------------------------------------------------------------------------------
+
diff --git sd/source/filter/eppt/text.hxx sd/source/filter/eppt/text.hxx
new file mode 100644
index 0000000..472c258
--- /dev/null
+++ sd/source/filter/pptx/text.hxx
@@ -0,0 +1,246 @@
+#ifndef EPPT_TEXT_HXX
+#define EPPT_TEXT_HXX
+
+#include "epptbase.hxx"
+#include <rtl/textenc.h>
+#include <com/sun/star/awt/FontDescriptor.hpp>
+#include <com/sun/star/lang/Locale.hpp>
+
+namespace com { namespace sun { namespace star {
+namespace awt { class FontDescriptor; }
+namespace beans { class XPropertyState; }
+namespace text { class XTextRange; class XTextContent; class XSimpleText; }
+namespace style { class TabStop; }
+}}}
+
+struct SOParagraph
+{
+	sal_Bool				bExtendedParameters;
+	sal_uInt32				nParaFlags;
+	sal_Int16				nBulletFlags;
+	String					sPrefix;
+	String					sSuffix;
+	String					sGraphicUrl;			// String auf eine Graphic
+	Size					aBuGraSize;
+	sal_uInt32				nNumberingType;			// in wirlichkeit ist dies ein SvxEnum
+	sal_uInt32				nHorzAdjust;
+	sal_uInt32				nBulletColor;
+	sal_Int32				nBulletOfs;
+	sal_Int16				nStartWith;				// Start der nummerierung
+	sal_Int16				nTextOfs;
+	sal_Int16				nBulletRealSize;		// GroessenVerhaeltnis in Proz
+	sal_Int16				nDepth;					// aktuelle tiefe
+	sal_Unicode				cBulletId;				// wenn Numbering Type == CharSpecial
+	::com::sun::star::awt::FontDescriptor		aFontDesc;
+
+	sal_Bool				bExtendedBulletsUsed;
+	sal_uInt16				nBulletId;
+	sal_uInt32				nMappedNumType;
+	sal_Bool				bNumberingIsNumber;
+
+	SOParagraph()
+	{
+		nDepth = 0;
+		bExtendedParameters = FALSE;
+		nParaFlags = 0;
+		nBulletFlags = 0;
+		nBulletOfs = 0;
+		nTextOfs = 0;
+		bExtendedBulletsUsed = FALSE;
+		nBulletId = 0xffff;
+		bNumberingIsNumber = sal_True;
+	};
+};
+
+class PropStateValue : public PropValue
+{
+    public:
+
+        PropStateValue() {}
+    
+        PropStateValue( ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > rXPropSet,
+                        ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertyState > rXPropState )
+            : PropValue( rXPropSet ),
+              mXPropState( rXPropState )
+    {}
+
+	protected :
+
+		::com::sun::star::beans::PropertyState					ePropState;
+		::com::sun::star::uno::Reference
+			< ::com::sun::star::beans::XPropertyState >			mXPropState;
+
+		sal_Bool	ImplGetPropertyValue( const String& rString, sal_Bool bGetPropertyState = TRUE );
+
+};
+
+struct FieldEntry
+{
+    sal_uInt32  nFieldType;
+    sal_uInt32  nFieldStartPos;
+    sal_uInt32  nFieldEndPos;
+	String		aRepresentation;
+    String      aFieldUrl;
+
+    FieldEntry( sal_uInt32 nType, sal_uInt32 nStart, sal_uInt32 nEnd )
+    {
+        nFieldType = nType;
+        nFieldStartPos = nStart;
+        nFieldEndPos = nEnd;
+    }
+};
+
+class PortionObj : public PropStateValue
+{
+
+	friend class ParagraphObj;
+
+	protected :
+
+		void			ImplClear();
+		void			ImplConstruct( PortionObj& rPortionObj );
+		sal_uInt32		ImplGetTextField( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > & rXTextRangeRef,
+							const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSetRef, String& rURL );
+		sal_uInt32		ImplCalculateTextPositions( sal_uInt32 nCurrentTextPosition );
+		void			ImplGetPortionValues( FontCollection& rFontCollection, sal_Bool bGetPropStateValue = FALSE );
+
+	public :
+
+		::com::sun::star::beans::PropertyState	meCharColor;
+		::com::sun::star::beans::PropertyState	meCharHeight;
+		::com::sun::star::beans::PropertyState	meFontName;
+		::com::sun::star::beans::PropertyState	meAsianOrComplexFont;
+		::com::sun::star::beans::PropertyState	meCharEscapement;
+		::com::sun::star::lang::Locale			meCharLocale;
+		sal_uInt16		mnCharAttrHard;
+
+		sal_uInt32		mnCharColor;
+		sal_uInt16		mnCharAttr;
+		sal_uInt16		mnCharHeight;
+		sal_uInt16		mnFont;
+		sal_uInt16		mnAsianOrComplexFont;
+		sal_Int16		mnCharEscapement;
+
+		sal_uInt32		mnTextSize;
+		sal_Bool		mbLastPortion;
+
+		sal_uInt16*		mpText;
+		FieldEntry*		mpFieldEntry;
+
+						PortionObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > & rXTextRangeRef,
+										sal_Bool bLast, FontCollection& rFontCollection );
+						PortionObj( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSetRef,
+										FontCollection& rFontCollection );
+						PortionObj( PortionObj& rPortionObj );
+						~PortionObj();
+
+		void			Write( SvStream* pStrm, sal_Bool bLast );
+		sal_uInt32		Count() const { return mnTextSize; };
+
+		PortionObj&		operator=( PortionObj& rPortionObj );
+};
+
+struct ParaFlags
+{
+	sal_Bool	bFirstParagraph : 1;
+	sal_Bool	bLastParagraph	: 1;
+
+					ParaFlags() { bFirstParagraph = TRUE; bLastParagraph = FALSE; };
+};
+
+class ParagraphObj : public List, public PropStateValue, public SOParagraph
+{
+	friend class TextObj;
+	friend struct PPTExParaSheet;
+
+		MapMode			maMapModeSrc;
+		MapMode			maMapModeDest;
+
+	protected :
+
+		void			ImplConstruct( ParagraphObj& rParagraphObj );
+		void			ImplClear();
+		sal_uInt32		ImplCalculateTextPositions( sal_uInt32 nCurrentTextPosition );
+		::com::sun::star::awt::Size			ImplMapSize( const ::com::sun::star::awt::Size& rSize );
+		void			ImplGetParagraphValues( PPTExBulletProvider& rBuProv, sal_Bool bGetPropStateValue = FALSE );
+		void			ImplGetNumberingLevel( PPTExBulletProvider& rBuProv, sal_Int16 nDepth, sal_Bool bIsBullet, sal_Bool bGetPropStateValue = FALSE );
+
+	public :
+
+		::com::sun::star::uno::Sequence< ::com::sun::star::style::TabStop > maTabStop;
+
+		sal_uInt32			mnTextSize;
+
+		sal_Bool			mbIsBullet;
+		sal_Bool			mbFirstParagraph;
+		sal_Bool			mbLastParagraph;
+
+		::com::sun::star::beans::PropertyState	meBullet;
+		::com::sun::star::beans::PropertyState	meTextAdjust;
+		::com::sun::star::beans::PropertyState	meLineSpacing;
+		::com::sun::star::beans::PropertyState	meLineSpacingTop;
+		::com::sun::star::beans::PropertyState	meLineSpacingBottom;
+		::com::sun::star::beans::PropertyState	meForbiddenRules;
+		::com::sun::star::beans::PropertyState	meParagraphPunctation;
+		::com::sun::star::beans::PropertyState	meBiDi;
+
+		sal_uInt16								mnTextAdjust;
+		sal_Int16								mnOOTextAdjust;
+		sal_Int16								mnLineSpacing;
+		sal_Bool								mbFixedLineSpacing;
+		sal_Int16								mnLineSpacingTop;
+		sal_Int16								mnLineSpacingBottom;
+        sal_Bool								mbForbiddenRules;
+        sal_Bool								mbParagraphPunctation;
+		sal_uInt16								mnBiDi;
+
+						ParagraphObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextContent > & rXTextContentRef,
+							ParaFlags, FontCollection& rFontCollection,
+								PPTExBulletProvider& rBuProv );
+						ParagraphObj( ParagraphObj& rParargraphObj );
+						ParagraphObj( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & rXPropSetRef,
+										PPTExBulletProvider& rBuProv );
+
+		void			CalculateGraphicBulletSize( sal_uInt16 nFontHeight );
+						~ParagraphObj();
+
+		void			Write( SvStream* pStrm );
+		sal_uInt32			Count() const { return mnTextSize; };
+
+		ParagraphObj&	operator=( ParagraphObj& rParagraphObj );
+};
+
+struct ImplTextObj
+{
+	sal_uInt32		mnRefCount;
+	sal_uInt32		mnTextSize;
+	int				mnInstance;
+	List*			mpList;
+	sal_Bool		mbHasExtendedBullets;
+	sal_Bool		mbFixedCellHeightUsed;
+
+					ImplTextObj( int nInstance );
+					~ImplTextObj();
+};
+
+class TextObj
+{
+		ImplTextObj*	mpImplTextObj;
+		void			ImplCalculateTextPositions();
+
+	public :
+						TextObj( ::com::sun::star::uno::Reference< ::com::sun::star::text::XSimpleText > &
+									rXText, int nInstance, FontCollection& rFontCollection, PPTExBulletProvider& rBuProv );
+						TextObj( TextObj& rTextObj );
+						~TextObj();
+
+		ParagraphObj*	First(){ return (ParagraphObj*)mpImplTextObj->mpList->First(); };
+		ParagraphObj*	Next(){ return(ParagraphObj*)mpImplTextObj->mpList->Next(); };
+		sal_uInt32		Count() const { return mpImplTextObj->mnTextSize; };
+		int				GetInstance() const { return mpImplTextObj->mnInstance; };
+		sal_Bool		HasExtendedBullets(){ return mpImplTextObj->mbHasExtendedBullets; };
+
+		TextObj&		operator=( TextObj& rTextObj );
+};
+
+#endif
# commented out for the libpptx diff --git sd/util/makefile.mk sd/util/makefile.mk
# commented out for the libpptx index fb5e7af..e569219 100644
# commented out for the libpptx --- sd/util/makefile.mk
# commented out for the libpptx +++ sd/util/makefile.mk
# commented out for the libpptx @@ -268,7 +268,9 @@ SHL5STDLIBS = $(ISDLIB) \
# commented out for the libpptx                $(CPPULIB)          \
# commented out for the libpptx                $(SALLIB)           \
# commented out for the libpptx                $(COMPHELPERLIB)    \
# commented out for the libpptx -              $(I18NISOLANGLIB)
# commented out for the libpptx +              $(I18NISOLANGLIB)   \
# commented out for the libpptx +              $(OOXLIB)           \
# commented out for the libpptx +              $(SAXLIB)
# commented out for the libpptx  
# commented out for the libpptx  # --- Targets -------------------------------------------------------------
# commented out for the libpptx  
# commented out for the libpptx diff --git sd/util/sdfilt.map sd/util/sdfilt.map
# commented out for the libpptx index ac6b782..e939e57 100644
# commented out for the libpptx --- sd/util/sdfilt.map
# commented out for the libpptx +++ sd/util/sdfilt.map
# commented out for the libpptx @@ -2,6 +2,9 @@ PPTEXPORTER_1_0 {
# commented out for the libpptx          global:
# commented out for the libpptx                  ExportPPT;
# commented out for the libpptx                  ImportPPT;
# commented out for the libpptx +                component_getImplementationEnvironment;
# commented out for the libpptx +                component_writeInfo;
# commented out for the libpptx +                component_getFactory;
# commented out for the libpptx  
# commented out for the libpptx          local:
# commented out for the libpptx                  *;
