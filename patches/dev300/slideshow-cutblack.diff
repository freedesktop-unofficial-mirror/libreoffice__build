From 8dd23893ffaf92554399b63a5c753eabf28c08ad Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:04:58 +0200
Subject: [PATCH 647/878] slideshow-cutblack.diff

---
 sd/source/filter/ppt/pptin.cxx                     |    6 +-
 sd/xml/transitions.xml                             |    3 +
 .../engine/transitions/slidetransitionfactory.cxx  |  115 ++++++++++++++++++--
 .../engine/transitions/transitionfactorytab.cxx    |   14 +++
 4 files changed, 127 insertions(+), 11 deletions(-)

diff --git a/sd/source/filter/ppt/pptin.cxx b/sd/source/filter/ppt/pptin.cxx
index 4306c89..b93208f 100644
--- a/sd/source/filter/ppt/pptin.cxx
+++ b/sd/source/filter/ppt/pptin.cxx
@@ -1632,7 +1632,11 @@ void ImplSdPPTImport::ImportPageEffect( SdPage* pPage, const sal_Bool bNewAnimat
                                             if ( nDirection == 0 )
                                                 pPage->SetFadeEffect( ::com::sun::star::presentation::FadeEffect_NONE );				// Direkt
                                             else if ( nDirection == 1 )
-                                                pPage->SetFadeEffect( ::com::sun::star::presentation::FadeEffect_NONE );				// Direkt ueber Schwarz
+                                            {
+                                                pPage->setTransitionType( animations::TransitionType::BARWIPE );
+                                                pPage->setTransitionSubtype( animations::TransitionSubType::FADEOVERCOLOR );
+                                                pPage->setTransitionFadeColor( 0 );
+                                            }
                                         }
                                         else
                                             pPage->setTransitionType( 0 );
diff --git a/sd/xml/transitions.xml b/sd/xml/transitions.xml
index a9a32eb..92bdb52 100644
--- a/sd/xml/transitions.xml
+++ b/sd/xml/transitions.xml
@@ -111,6 +111,9 @@
  <anim:par pres:preset-id="fade-through-black">
   <anim:transitionFilter smil:type="fade" smil:subtype="fadeOverColor" smil:fadeColor="#000000"/>
  </anim:par>
+ <anim:par pres:preset-id="cut-through-black">
+  <anim:transitionFilter smil:type="barWipe" smil:subtype="fadeOverColor" smil:fadeColor="#000000"/>
+ </anim:par>
  <anim:par pres:preset-id="cover-down">
   <anim:transitionFilter smil:type="slideWipe" smil:subtype="fromTop"/>
  </anim:par>
diff --git a/slideshow/source/engine/transitions/slidetransitionfactory.cxx b/slideshow/source/engine/transitions/slidetransitionfactory.cxx
index bd2ab3c..20ad918 100644
--- a/slideshow/source/engine/transitions/slidetransitionfactory.cxx
+++ b/slideshow/source/engine/transitions/slidetransitionfactory.cxx
@@ -473,6 +473,89 @@ void FadingSlideChange::performOut(
     }
 }
 
+class CutSlideChange : public SlideChangeBase
+{
+public:
+    /** Create a new SlideChanger, for the given leaving and
+        entering slides, which applies a cut effect.
+    */
+    CutSlideChange(
+        boost::optional<SlideSharedPtr> const & leavingSlide,
+        const SlideSharedPtr&                   pEnteringSlide,
+        const RGBColor&                          rFadeColor,
+        const SoundPlayerSharedPtr&             pSoundPlayer,
+        const UnoViewContainer&                 rViewContainer,
+        ScreenUpdater&                          rScreenUpdater,
+        EventMultiplexer&                       rEventMultiplexer )
+        : SlideChangeBase( leavingSlide,
+                           pEnteringSlide,
+                           pSoundPlayer,
+                           rViewContainer,
+                           rScreenUpdater,
+                           rEventMultiplexer ),
+          maFadeColor( rFadeColor ),
+          mbFirstTurn( true )
+        {}
+
+    virtual void performIn(
+        const ::cppcanvas::CustomSpriteSharedPtr&   rSprite,
+        const ViewEntry&                            rViewEntry,
+        const ::cppcanvas::CanvasSharedPtr&         rDestinationCanvas,
+        double                                      t );
+
+    virtual void performOut(
+        const ::cppcanvas::CustomSpriteSharedPtr&  rSprite,
+        const ViewEntry&                           rViewEntry,
+        const ::cppcanvas::CanvasSharedPtr&        rDestinationCanvas,
+        double                                     t );
+
+private:
+    RGBColor maFadeColor;
+    bool    mbFirstTurn;
+};
+
+void CutSlideChange::performIn(
+    const ::cppcanvas::CustomSpriteSharedPtr&   rSprite,
+    const ViewEntry&                            /*rViewEntry*/,
+    const ::cppcanvas::CanvasSharedPtr&         /*rDestinationCanvas*/,
+    double                                      t )
+{
+    ENSURE_OR_THROW(
+        rSprite,
+        "CutSlideChange::performIn(): Invalid sprite" );
+
+    // After 2/3rd of the active time, display new slide
+    rSprite->setAlpha( t > 2/3.0 ? 1.0 : 0.0 );
+}
+
+void CutSlideChange::performOut(
+    const ::cppcanvas::CustomSpriteSharedPtr&  rSprite,
+    const ViewEntry&                           rViewEntry,
+    const ::cppcanvas::CanvasSharedPtr&        rDestinationCanvas,
+    double                                     t )
+{
+    ENSURE_OR_THROW(
+        rSprite,
+        "CutSlideChange::performOut(): Invalid sprite" );
+    ENSURE_OR_THROW(
+        rDestinationCanvas,
+        "FadingSlideChange::performOut(): Invalid dest canvas" );
+
+    if( mbFirstTurn )
+    {
+        mbFirstTurn = false;
+
+        // clear page to given fade color. 'Leaving' slide is
+        // painted atop of that
+        fillPage( rDestinationCanvas,
+                  getEnteringSlideSizePixel( rViewEntry.mpView ),
+                  maFadeColor );
+    }
+
+    // Until 1/3rd of the active time, display old slide.
+    rSprite->setAlpha( t > 1/3.0 ? 0.0 : 1.0 );
+}
+
 class MovingSlideChange : public SlideChangeBase
 {
     /// Direction vector for leaving slide,
@@ -1007,6 +1090,7 @@ NumberAnimationSharedPtr TransitionFactory::createSlideTransition(
                             pSoundPlayer );
                     }
 
+                    case animations::TransitionType::BARWIPE:
                     case animations::TransitionType::FADE:
                     {
                         // black page:
@@ -1038,16 +1122,27 @@ NumberAnimationSharedPtr TransitionFactory::createSlideTransition(
                                                   "SlideTransitionFactory::createSlideTransition(): Unknown FADE subtype" );
                         }
 
-                        return NumberAnimationSharedPtr( 
-                            new FadingSlideChange(
-                                leavingSlide,
-                                pEnteringSlide,
-                                comphelper::make_optional(
-                                    rTransitionFadeColor),
-                                pSoundPlayer,
-                                rViewContainer,
-                                rScreenUpdater,
-                                rEventMultiplexer ));
+                        if( nTransitionType == animations::TransitionType::FADE )
+                            return NumberAnimationSharedPtr(
+                                new FadingSlideChange(
+                                    leavingSlide,
+                                    pEnteringSlide,
+                                    comphelper::make_optional(
+                                        rTransitionFadeColor),
+                                    pSoundPlayer,
+                                    rViewContainer,
+                                    rScreenUpdater,
+                                    rEventMultiplexer ));
+                        else
+                            return NumberAnimationSharedPtr(
+                                new CutSlideChange(
+                                    leavingSlide,
+                                    pEnteringSlide,
+                                    rTransitionFadeColor,
+                                    pSoundPlayer,
+                                    rViewContainer,
+                                    rScreenUpdater,
+                                    rEventMultiplexer ));
                     }
                 }
             }
diff --git a/slideshow/source/engine/transitions/transitionfactorytab.cxx b/slideshow/source/engine/transitions/transitionfactorytab.cxx
index 5f4b4fb..57f1d05 100644
--- a/slideshow/source/engine/transitions/transitionfactorytab.cxx
+++ b/slideshow/source/engine/transitions/transitionfactorytab.cxx
@@ -2015,6 +2015,20 @@ static const TransitionInfo lcl_transitionInfo[] =
         true,                   // 'out' by parameter sweep inversion
         false                   // scale isotrophically to target size
     },
+    // this is the cut through black fade (does not fade, but does a
+    // hard cut)
+    {
+        animations::TransitionType::BARWIPE,
+        animations::TransitionSubType::FADEOVERCOLOR,
+        TransitionInfo::TRANSITION_SPECIAL,
+        // TODO(F2): Setup parameters
+        0.0,                    // no rotation
+        1.0,                    // no scaling
+        1.0,                    // no scaling
+        TransitionInfo::REVERSEMETHOD_IGNORE,
+        true,                   // 'out' by parameter sweep inversion
+        false                   // scale isotrophically to target size
+    },
     
     {
         // mapped to RandomWipe:
-- 
1.7.0.1

