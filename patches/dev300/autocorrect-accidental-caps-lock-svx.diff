From 4277d469ee2acf05ecab8bf69f372f05de6cecad Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:02:31 +0200
Subject: [PATCH 451/768] autocorrect-accidental-caps-lock-svx.diff

---
 cui/source/inc/autocdlg.hxx         |    2 +
 cui/source/tabpages/autocdlg.cxx    |   13 +++++++-
 cui/source/tabpages/autocdlg.hrc    |    1 +
 cui/source/tabpages/autocdlg.src    |    4 ++
 editeng/inc/editeng/editeng.hxx     |    3 +-
 editeng/inc/editeng/editview.hxx    |    4 +-
 editeng/inc/editeng/outliner.hxx    |    2 +-
 editeng/inc/editeng/svxacorr.hxx    |    8 ++++-
 editeng/source/editeng/editeng.cxx  |   11 +++---
 editeng/source/editeng/editview.cxx |    9 +++--
 editeng/source/editeng/impedit.cxx  |    4 +-
 editeng/source/editeng/impedit.hxx  |    6 ++-
 editeng/source/editeng/impedit2.cxx |    5 ++-
 editeng/source/misc/acorrcfg.cxx    |   13 ++++++-
 editeng/source/misc/svxacorr.cxx    |   61 +++++++++++++++++++++++++++++++++-
 editeng/source/outliner/outlvw.cxx  |    4 +-
 svx/source/svdraw/svdedxv.cxx       |    2 +-
 17 files changed, 124 insertions(+), 28 deletions(-)

diff --git cui/source/inc/autocdlg.hxx cui/source/inc/autocdlg.hxx
index 5b3b41e..848b2eb 100644
--- cui/source/inc/autocdlg.hxx
+++ cui/source/inc/autocdlg.hxx
@@ -116,6 +116,7 @@ private:
     String		sDash;
     String      sNonBrkSpace;
     String		sFirst;
+    String      sAccidentalCaps;
 
 public:
                         OfaAutocorrOptionsPage( Window* pParent, const SfxItemSet& rSet );
@@ -153,6 +154,7 @@ class OfaSwAutoFmtOptionsPage : public SfxTabPage
     String			sByInputBullet;
     String			sBoldUnder;
     String			sNoDblSpaces;
+    String          sCorrectCapsLock;
     String			sDetectURL;
     String          sDash;
     String          sNonBrkSpace;
diff --git cui/source/tabpages/autocdlg.cxx cui/source/tabpages/autocdlg.cxx
index d274cb0..afb63d2 100644
--- cui/source/tabpages/autocdlg.cxx
+++ cui/source/tabpages/autocdlg.cxx
@@ -224,7 +224,8 @@ OfaAutocorrOptionsPage::OfaAutocorrOptionsPage( Window* pParent,
     sBoldUnderline      (CUI_RES(ST_BOLD_UNDER        )),
     sURL                (CUI_RES(ST_DETECT_URL        )),
     sNoDblSpaces        (CUI_RES(STR_NO_DBL_SPACES    )),
-    sDash    			(CUI_RES(ST_DASH	         	))
+    sDash    			(CUI_RES(ST_DASH              )),
+    sAccidentalCaps     (CUI_RES(ST_CORRECT_ACCIDENTAL_CAPS_LOCK))
 {
     FreeResource();
 
@@ -268,6 +269,7 @@ BOOL OfaAutocorrOptionsPage::FillItemSet( SfxItemSet& )
     pAutoCorrect->SetAutoCorrFlag(SetINetAttr, 			aCheckLB.IsChecked(nPos++));
     pAutoCorrect->SetAutoCorrFlag(ChgToEnEmDash,		aCheckLB.IsChecked(nPos++));
     pAutoCorrect->SetAutoCorrFlag(IgnoreDoubleSpace,	aCheckLB.IsChecked(nPos++));
+    pAutoCorrect->SetAutoCorrFlag(CorrectCapsLock,      aCheckLB.IsChecked(nPos++));
 
     BOOL bReturn = nFlags != pAutoCorrect->GetFlags();
     if(bReturn )
@@ -307,6 +309,7 @@ void OfaAutocorrOptionsPage::Reset( const SfxItemSet& )
     aCheckLB.InsertEntry(sURL);
     aCheckLB.InsertEntry(sDash);
     aCheckLB.InsertEntry(sNoDblSpaces);
+    aCheckLB.InsertEntry(sAccidentalCaps);
 
     USHORT nPos = 0;
     aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & Autocorrect) );
@@ -316,6 +319,7 @@ void OfaAutocorrOptionsPage::Reset( const SfxItemSet& )
     aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & SetINetAttr) );
     aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & ChgToEnEmDash) );
     aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & IgnoreDoubleSpace) );
+    aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & CorrectCapsLock) );
 
     aCheckLB.SetUpdateMode(TRUE);
 }
@@ -446,6 +450,7 @@ enum OfaAutoFmtOptions
     DEL_SPACES_AT_STT_END,
     DEL_SPACES_BETWEEN_LINES,
     IGNORE_DBLSPACE,
+    CORRECT_CAPS_LOCK,
     APPLY_NUMBERING,
     INSERT_BORDER,
     CREATE_TABLE,
@@ -473,6 +478,7 @@ OfaSwAutoFmtOptionsPage::OfaSwAutoFmtOptionsPage( Window* pParent,
     sBullet				(CUI_RES(	ST_BULLET       )),
     sBoldUnder			(CUI_RES(	ST_BOLD_UNDER   )),
     sNoDblSpaces		(CUI_RES(	STR_NO_DBL_SPACES)),
+    sCorrectCapsLock    (CUI_RES(   ST_CORRECT_ACCIDENTAL_CAPS_LOCK)),
     sDetectURL			(CUI_RES(	ST_DETECT_URL   )),
     sDash				(CUI_RES(	ST_DASH         )),
     sRightMargin		(CUI_RES(	ST_RIGHT_MARGIN	)),
@@ -606,6 +612,9 @@ BOOL OfaSwAutoFmtOptionsPage::FillItemSet( SfxItemSet&  )
     pAutoCorrect->SetAutoCorrFlag(IgnoreDoubleSpace,
                         aCheckLB.IsChecked(IGNORE_DBLSPACE, CBCOL_SECOND));
 
+    pAutoCorrect->SetAutoCorrFlag(CorrectCapsLock,
+                        aCheckLB.IsChecked(CORRECT_CAPS_LOCK, CBCOL_SECOND));
+
     bCheck = aCheckLB.IsChecked(DETECT_URL, CBCOL_FIRST);
     bModified |= pOpt->bSetINetAttr != bCheck;
     pOpt->bSetINetAttr = bCheck;
@@ -719,6 +728,7 @@ void OfaSwAutoFmtOptionsPage::Reset( const SfxItemSet& )
     aCheckLB.GetModel()->Insert(CreateEntry(sDelSpaceBetweenLines, CBCOL_BOTH  ));
 
     aCheckLB.GetModel()->Insert(CreateEntry(sNoDblSpaces,		CBCOL_SECOND));
+    aCheckLB.GetModel()->Insert(CreateEntry(sCorrectCapsLock,   CBCOL_SECOND));
     aCheckLB.GetModel()->Insert(CreateEntry(sNum,				CBCOL_SECOND));
     aCheckLB.GetModel()->Insert(CreateEntry(sBorder,			CBCOL_SECOND));
     aCheckLB.GetModel()->Insert(CreateEntry(sTable,				CBCOL_SECOND));
@@ -737,6 +747,7 @@ void OfaSwAutoFmtOptionsPage::Reset( const SfxItemSet& )
     aCheckLB.CheckEntryPos( BOLD_UNDERLINE,		CBCOL_FIRST,	pOpt->bChgWeightUnderl );
     aCheckLB.CheckEntryPos( BOLD_UNDERLINE,		CBCOL_SECOND,	0 != (nFlags & ChgWeightUnderl) );
     aCheckLB.CheckEntryPos( IGNORE_DBLSPACE,	CBCOL_SECOND,	0 != (nFlags & IgnoreDoubleSpace) );
+    aCheckLB.CheckEntryPos( CORRECT_CAPS_LOCK,  CBCOL_SECOND,   0 != (nFlags & CorrectCapsLock) );
     aCheckLB.CheckEntryPos( DETECT_URL,			CBCOL_FIRST,	pOpt->bSetINetAttr );
     aCheckLB.CheckEntryPos( DETECT_URL,			CBCOL_SECOND,	0 != (nFlags & SetINetAttr) );
     aCheckLB.CheckEntryPos( REPLACE_DASHES,		CBCOL_FIRST,	pOpt->bChgToEnEmDash );
diff --git cui/source/tabpages/autocdlg.hrc cui/source/tabpages/autocdlg.hrc
index d95dcf5..e63684c 100644
--- cui/source/tabpages/autocdlg.hrc
+++ cui/source/tabpages/autocdlg.hrc
@@ -149,6 +149,7 @@
 #define ST_DASH                         208
 #define FT_LANG                         209
 #define LB_LANG                         210
+#define ST_CORRECT_ACCIDENTAL_CAPS_LOCK 211
 
 #define CB_SMARTTAGS                    220
 #define FT_SMARTTAGS                    221
diff --git cui/source/tabpages/autocdlg.src cui/source/tabpages/autocdlg.src
index eea4e59..2fbbd21 100644
--- cui/source/tabpages/autocdlg.src
+++ cui/source/tabpages/autocdlg.src
@@ -129,6 +129,10 @@ TabDialog RID_OFA_AUTOCORR_DLG
     String ST_DASH \
     { \
         Text [ en-US ] = "Replace dashes" ; \
+    }; \
+    String ST_CORRECT_ACCIDENTAL_CAPS_LOCK \
+    { \
+        Text [ en-US ] = "Correct accidental use of cAPS LOCK key" ; \
     };
 
 /**************************************************************************/
diff --git editeng/inc/editeng/editeng.hxx editeng/inc/editeng/editeng.hxx
index bd86834..b1af8c9 100644
--- editeng/inc/editeng/editeng.hxx
+++ editeng/inc/editeng/editeng.hxx
@@ -53,6 +53,7 @@ class Rectangle;
 class SvStream;
 class Link;
 class OutputDevice;
+class Window;
 class SvUShorts;
 class SfxPoolItem;
 class SvxNumBulletItem;
@@ -124,7 +125,7 @@ private:
     EDITENG_DLLPRIVATE EditEngine&		operator=( const EditEngine& );
 
 //#if 0 // _SOLAR__PRIVATE
-    EDITENG_DLLPRIVATE BOOL				PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pView );
+    EDITENG_DLLPRIVATE BOOL				PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pView, Window* pFrameWin = NULL );
 //#endif
 
 protected:
diff --git editeng/inc/editeng/editview.hxx editeng/inc/editeng/editview.hxx
index 88dad95..fd162ad 100644
--- editeng/inc/editeng/editview.hxx
+++ editeng/inc/editeng/editview.hxx
@@ -143,7 +143,7 @@ public:
 
     void			InsertText( const String& rNew, BOOL bSelect = FALSE );
 
-    BOOL			PostKeyEvent( const KeyEvent& rKeyEvent );
+    BOOL			PostKeyEvent( const KeyEvent& rKeyEvent, Window* pFrameWin = NULL );
 
     BOOL			MouseButtonUp( const MouseEvent& rMouseEvent );
     BOOL			MouseButtonDown( const MouseEvent& rMouseEvent );
@@ -206,7 +206,7 @@ public:
 
     BOOL			MatchGroup();
 
-    void			CompleteAutoCorrect();
+    void			CompleteAutoCorrect( Window* pFrameWin = NULL );
 
     EESpellState	StartSpeller( BOOL bMultipleDoc = FALSE );
     EESpellState	StartThesaurus();
diff --git editeng/inc/editeng/outliner.hxx editeng/inc/editeng/outliner.hxx
index 8efc422..f54c187 100644
--- editeng/inc/editeng/outliner.hxx
+++ editeng/inc/editeng/outliner.hxx
@@ -259,7 +259,7 @@ public:
     void        Scroll( long nHorzScroll, long nVertScroll );
 
     void        Paint( const Rectangle& rRect );
-    BOOL        PostKeyEvent( const KeyEvent& rKEvt );
+    BOOL        PostKeyEvent( const KeyEvent& rKEvt, Window* pFrameWin = NULL );
     BOOL        MouseButtonDown( const MouseEvent& );
     BOOL        MouseButtonUp( const MouseEvent& );
     BOOL        MouseMove( const MouseEvent& );
diff --git editeng/inc/editeng/svxacorr.hxx editeng/inc/editeng/svxacorr.hxx
index 72441fa..ab5b65a 100644
--- editeng/inc/editeng/svxacorr.hxx
+++ editeng/inc/editeng/svxacorr.hxx
@@ -47,6 +47,7 @@ class SvxAutoCorrLanguageTable_Impl;
 class SvxAutoCorrLastFileAskTable_Impl;
 class SotStorageRef;
 class SotStorage;
+class Window;
 
 // Flags fuer die AutoKorrekt-Flags
 const long CptlSttSntnc		= 0x00000001;	// Gross-Buchstaben am SatzAnfang
@@ -62,6 +63,7 @@ const long SaveWordCplSttLst= 0x00000200;	// GrB. am SatzAnf. auto. aufnehmen
 const long SaveWordWrdSttLst= 0x00000400;	// 2 GrB. am WortAnf. auto. aufnehmen
 const long IgnoreDoubleSpace= 0x00000800;	// 2 Spaces ignorieren
 const long ChgSglQuotes		= 0x00001000;	// einfache Quotes ersetzen
+const long CorrectCapsLock  = 0x00002000;   // Correct accidental use of cAPS LOCK key
 
 const long ChgWordLstLoad	= 0x20000000;	// Ersetzungsliste geladen
 const long CplSttLstLoad	= 0x40000000;	// Exceptionlist fuer CplStart geladen
@@ -248,7 +250,7 @@ public:
     // fuehre eine AutoKorrektur aus.
     // returnt was ausgefuehrt wurde; entsprechend den obigen Flags
     ULONG AutoCorrect( SvxAutoCorrDoc& rDoc, const String& rTxt,
-                        xub_StrLen nPos, sal_Unicode cInsChar, BOOL bInsert );
+                        xub_StrLen nPos, sal_Unicode cInsChar, BOOL bInsert, Window* pFrameWin = NULL );
 
     // return fuer die Autotext Expandierung das vorherige Wort, was dem
     // AutoCorrect - Algorythmus entspricht.
@@ -374,6 +376,10 @@ public:
                                 xub_StrLen nSttPos, xub_StrLen nEndPos,
                                 LanguageType eLang  = LANGUAGE_SYSTEM);
 
+    bool FnCorrectCapsLock( SvxAutoCorrDoc&, const String&,
+                            xub_StrLen nSttPos, xub_StrLen nEndPos,
+                            LanguageType eLang  = LANGUAGE_SYSTEM );
+
     static long			GetDefaultFlags();
 
 // returns TRUE for charcters where the function
diff --git editeng/source/editeng/editeng.cxx editeng/source/editeng/editeng.cxx
index ef1b0c1..0b3f5f5 100644
--- editeng/source/editeng/editeng.cxx
+++ editeng/source/editeng/editeng.cxx
@@ -812,7 +812,7 @@ ESelection EditEngine::CursorRight( const ESelection& rSelection, USHORT nCharac
     return pE->pImpEditEngine->CreateESel( aSel );
 }
 
-sal_Bool EditEngine::PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pEditView )
+sal_Bool EditEngine::PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pEditView, Window* pFrameWin )
 {
     DBG_CHKTHIS( EditEngine, 0 );
     DBG_CHKOBJ( pEditView, EditView, 0 );
@@ -1072,7 +1072,7 @@ sal_Bool EditEngine::PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pEditVie
                         if ( bSel )
                             pImpEditEngine->UndoActionStart( EDITUNDO_INSERT );
                         if ( pImpEditEngine->GetStatus().DoAutoCorrect() )
-                            aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode() );
+                            aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode(), pFrameWin );
                         aCurSel = pImpEditEngine->InsertTab( aCurSel );
                         if ( bSel )
                             pImpEditEngine->UndoActionEnd( EDITUNDO_INSERT );
@@ -1093,7 +1093,7 @@ sal_Bool EditEngine::PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pEditVie
                         pImpEditEngine->UndoActionStart( EDITUNDO_INSERT );
                         if ( rKeyEvent.GetKeyCode().IsShift() )
                         {
-                            aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode() );
+                            aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode(), pFrameWin );
                             aCurSel = pImpEditEngine->InsertLineBreak( aCurSel );
                         }
                         else
@@ -1101,7 +1101,7 @@ sal_Bool EditEngine::PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pEditVie
                             if ( !aAutoText.Len() )
                             {
                                 if ( pImpEditEngine->GetStatus().DoAutoCorrect() )
-                                    aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode() );
+                                    aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode(), pFrameWin );
                                 aCurSel = pImpEditEngine->InsertParaBreak( aCurSel );
                             }
                             else
@@ -1147,7 +1147,8 @@ sal_Bool EditEngine::PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pEditVie
                     if ( ( pImpEditEngine->GetStatus().DoAutoCorrect() ) &&
                         SvxAutoCorrect::IsAutoCorrectChar( nCharCode ) )
                     {
-                        aCurSel = pImpEditEngine->AutoCorrect( aCurSel, nCharCode, !pEditView->IsInsertMode() );
+                        aCurSel = pImpEditEngine->AutoCorrect(
+                            aCurSel, nCharCode, !pEditView->IsInsertMode(), pFrameWin );
                     }
                     else
                     {
diff --git editeng/source/editeng/editview.cxx editeng/source/editeng/editview.cxx
index d9f60c5..4e920fd 100644
--- editeng/source/editeng/editview.cxx
+++ editeng/source/editeng/editview.cxx
@@ -59,6 +59,7 @@
 #include <helpid.hrc>
 #include <i18npool/lang.h>
 #include <vcl/menu.hxx>
+#include <vcl/window.hxx>
 #include <editeng/acorrcfg.hxx>
 #include <editeng/unolingu.hxx>
 #include <editeng/fontitem.hxx>
@@ -414,11 +415,11 @@ void EditView::InsertText( const XubString& rStr, sal_Bool bSelect )
     pImpEE->FormatAndUpdate( this );
 }
 
-sal_Bool EditView::PostKeyEvent( const KeyEvent& rKeyEvent )
+sal_Bool EditView::PostKeyEvent( const KeyEvent& rKeyEvent, Window* pFrameWin )
 {
     DBG_CHKTHIS( EditView, 0 );
     DBG_CHKOBJ( pImpEditView->pEditEngine, EditEngine, 0 );
-    return pImpEditView->PostKeyEvent( rKeyEvent );
+    return pImpEditView->PostKeyEvent( rKeyEvent, pFrameWin );
 }
 
 sal_Bool EditView::MouseButtonUp( const MouseEvent& rMouseEvent )
@@ -915,7 +916,7 @@ sal_Bool EditView::MatchGroup()
     return sal_False;
 }
 
-void EditView::CompleteAutoCorrect()
+void EditView::CompleteAutoCorrect( Window* pFrameWin )
 {
     DBG_CHKTHIS( EditView, 0 );
     DBG_CHKOBJ( pImpEditView->pEditEngine, EditEngine, 0 );
@@ -925,7 +926,7 @@ void EditView::CompleteAutoCorrect()
         EditSelection aSel = pImpEditView->GetEditSelection();
         aSel = PIMPEE->EndOfWord( aSel.Max() );
         // MT 06/00: Why pass EditSelection to AutoCorrect, not EditPaM?!
-        aSel = PIMPEE->AutoCorrect( aSel, 0, !IsInsertMode() );
+        aSel = PIMPEE->AutoCorrect( aSel, 0, !IsInsertMode(), pFrameWin );
         pImpEditView->SetEditSelection( aSel );
         if ( PIMPEE->IsModified() )
             PIMPEE->FormatAndUpdate( this );
diff --git editeng/source/editeng/impedit.cxx editeng/source/editeng/impedit.cxx
index 77316af..ea87efc 100644
--- editeng/source/editeng/impedit.cxx
+++ editeng/source/editeng/impedit.cxx
@@ -993,7 +993,7 @@ Pair ImpEditView::Scroll( long ndX, long ndY, BYTE nRangeCheck )
     return Pair( nRealDiffX, nRealDiffY );
 }
 
-sal_Bool ImpEditView::PostKeyEvent( const KeyEvent& rKeyEvent )
+sal_Bool ImpEditView::PostKeyEvent( const KeyEvent& rKeyEvent, Window* pFrameWin )
 {
     BOOL bDone = FALSE;
 
@@ -1037,7 +1037,7 @@ sal_Bool ImpEditView::PostKeyEvent( const KeyEvent& rKeyEvent )
     }
 
     if( !bDone )
-        bDone = pEditEngine->PostKeyEvent( rKeyEvent, GetEditViewPtr() );
+        bDone = pEditEngine->PostKeyEvent( rKeyEvent, GetEditViewPtr(), pFrameWin );
 
     return bDone;
 }
diff --git editeng/source/editeng/impedit.hxx editeng/source/editeng/impedit.hxx
index 3d89cf9..2be88db 100644
--- editeng/source/editeng/impedit.hxx
+++ editeng/source/editeng/impedit.hxx
@@ -91,6 +91,8 @@ class TextRanger;
 class SvKeyValueIterator;
 class SvxForbiddenCharactersTable;
 class SvtCTLOptions;
+class Window;
+
 #include <editeng/SpellPortions.hxx>
 
 #include <editeng/eedata.hxx>
@@ -287,7 +289,7 @@ public:
 
     BOOL			IsVertical() const;
 
-    BOOL			PostKeyEvent( const KeyEvent& rKeyEvent );
+    BOOL			PostKeyEvent( const KeyEvent& rKeyEvent, Window* pFrameWin = NULL );
 
     BOOL			MouseButtonUp( const MouseEvent& rMouseEvent );
     BOOL			MouseButtonDown( const MouseEvent& rMouseEvent );
@@ -777,7 +779,7 @@ public:
     EditPaM			DeleteSelected( EditSelection aEditSelection);
     EditPaM         InsertText( const EditSelection& rCurEditSelection, sal_Unicode c, sal_Bool bOverwrite, sal_Bool bIsUserInput = sal_False );
     EditPaM			InsertText( EditSelection aCurEditSelection, const String& rStr );
-    EditPaM			AutoCorrect( const EditSelection& rCurEditSelection, sal_Unicode c, sal_Bool bOverwrite );
+    EditPaM			AutoCorrect( const EditSelection& rCurEditSelection, sal_Unicode c, bool bOverwrite, Window* pFrameWin = NULL );
     EditPaM			DeleteLeftOrRight( const EditSelection& rEditSelection, BYTE nMode, BYTE nDelMode = DELMODE_SIMPLE );
     EditPaM			InsertParaBreak( EditSelection aEditSelection );
     EditPaM			InsertLineBreak( EditSelection aEditSelection );
diff --git editeng/source/editeng/impedit2.cxx editeng/source/editeng/impedit2.cxx
index 27d95e0..b57c6fe 100644
--- editeng/source/editeng/impedit2.cxx
+++ editeng/source/editeng/impedit2.cxx
@@ -2576,7 +2576,8 @@ void ImpEditEngine::ImpRemoveParagraph( USHORT nPara )
     }
 }
 
-EditPaM ImpEditEngine::AutoCorrect( const EditSelection& rCurSel, xub_Unicode c, BOOL bOverwrite )
+EditPaM ImpEditEngine::AutoCorrect( const EditSelection& rCurSel, xub_Unicode c,
+                                    bool bOverwrite, Window* pFrameWin )
 {
     EditSelection aSel( rCurSel );
 #ifndef SVX_LIGHT
@@ -2626,7 +2627,7 @@ EditPaM ImpEditEngine::AutoCorrect( const EditSelection& rCurSel, xub_Unicode c,
         ContentNode* pNode = aSel.Max().GetNode();
         USHORT nIndex = aSel.Max().GetIndex();
         EdtAutoCorrDoc aAuto( this, pNode, nIndex, c );
-        pAutoCorrect->AutoCorrect( aAuto, *pNode, nIndex, c, !bOverwrite );
+        pAutoCorrect->AutoCorrect( aAuto, *pNode, nIndex, c, !bOverwrite, pFrameWin );
         aSel.Max().SetIndex( aAuto.GetCursor() );
 
         // #i78661 since the SvxAutoCorrect object used here is
diff --git editeng/source/misc/acorrcfg.cxx editeng/source/misc/acorrcfg.cxx
index 3bf26ec..7bf1a3b 100644
--- editeng/source/misc/acorrcfg.cxx
+++ editeng/source/misc/acorrcfg.cxx
@@ -118,9 +118,10 @@ Sequence<OUString> 	SvxBaseAutoCorrCfg::GetPropertyNames()
         "SingleQuoteAtEnd",						// 13
         "ReplaceDoubleQuote",					// 14
         "DoubleQuoteAtStart",					// 15
-        "DoubleQuoteAtEnd"						// 16
+        "DoubleQuoteAtEnd",						// 16
+        "CorrectAccidentalCapsLock"             // 17
     };
-    const int nCount = 17;
+    const int nCount = 18;
     Sequence<OUString> aNames(nCount);
     OUString* pNames = aNames.getArray();
     for(int i = 0; i < nCount; i++)
@@ -220,6 +221,10 @@ void SvxBaseAutoCorrCfg::Load(sal_Bool bInit)
                         rParent.pAutoCorrect->SetEndDoubleQuote(
                             sal::static_int_cast< sal_Unicode >( nTemp ) );
                     break;//"DoubleQuoteAtEnd"
+                    case 17:
+                        if(*(sal_Bool*)pValues[nProp].getValue())
+                            nFlags |= CorrectCapsLock;
+                    break;//"CorrectAccidentalCapsLock"
                 }
             }
         }
@@ -324,6 +329,10 @@ void SvxBaseAutoCorrCfg::Commit()
             case 16:
                 pValues[nProp] <<= (sal_Int32) rParent.pAutoCorrect->GetEndDoubleQuote();
             break;//"DoubleQuoteAtEnd"
+            case 17:
+                bVal = 0 != (nFlags & CorrectCapsLock);
+                pValues[nProp].setValue(&bVal, rType);
+            break;//"CorrectAccidentalCapsLock"
         }
     }
     PutProperties(aNames, aValues);
diff --git editeng/source/misc/svxacorr.cxx editeng/source/misc/svxacorr.cxx
index ebc025f..a2dfaca 100644
--- editeng/source/misc/svxacorr.cxx
+++ editeng/source/misc/svxacorr.cxx
@@ -60,6 +60,7 @@
 #include <editeng/escpitem.hxx>
 #include <editeng/svxacorr.hxx>
 #include <editeng/unolingu.hxx>
+#include "vcl/window.hxx"
 #include <helpid.hrc>
 #include <comphelper/processfactory.hxx>
 #include <com/sun/star/xml/sax/InputSource.hpp>
@@ -336,7 +337,8 @@ long SvxAutoCorrect::GetDefaultFlags()
                     | SetINetAttr
                     | ChgQuotes
                     | SaveWordCplSttLst
-                    | SaveWordWrdSttLst;
+                    | SaveWordWrdSttLst
+                    | CorrectCapsLock;
     LanguageType eLang = GetAppLang();
     switch( eLang )
     {
@@ -1073,6 +1075,49 @@ BOOL SvxAutoCorrect::FnCptlSttSntnc( SvxAutoCorrDoc& rDoc,
 
     return bRet;
 }
+
+bool SvxAutoCorrect::FnCorrectCapsLock( SvxAutoCorrDoc& rDoc, const String& rTxt,
+                                        xub_StrLen nSttPos, xub_StrLen nEndPos,
+                                        LanguageType eLang )
+{
+    if (nEndPos - nSttPos < 2)
+        // string must be at least 2-character long.
+        return false;
+
+    CharClass& rCC = GetCharClass( eLang );
+
+    // Check the first 2 letters.
+    if ( !IsLowerLetter(rCC.getCharacterType(rTxt, nSttPos)) )
+        return false;
+
+    if ( !IsUpperLetter(rCC.getCharacterType(rTxt, nSttPos+1)) )
+        return false;
+
+    String aConverted;
+    aConverted.Append( rCC.upper(rTxt.GetChar(nSttPos)) );
+    aConverted.Append( rCC.lower(rTxt.GetChar(nSttPos+1)) );
+
+    for (xub_StrLen i = nSttPos+2; i < nEndPos; ++i)
+    {
+        if ( IsLowerLetter(rCC.getCharacterType(rTxt, i)) )
+            // A lowercase letter disqualifies the whole text.
+            return false;
+
+        if ( IsUpperLetter(rCC.getCharacterType(rTxt, i)) )
+            // Another uppercase letter.  Convert it.
+            aConverted.Append( rCC.lower(rTxt.GetChar(i)) );
+        else
+            // This is not an alphabetic letter.  Leave it as-is.
+            aConverted.Append(rTxt.GetChar(i));
+    }
+
+    // Replace the word.
+    rDoc.Delete(nSttPos, nEndPos);
+    rDoc.Insert(nSttPos, aConverted);
+
+    return true;
+}
+
 //The method below is renamed from _GetQuote to GetQuote by BerryJia for Bug95846 Time:2002-8-13 15:50
 sal_Unicode SvxAutoCorrect::GetQuote( sal_Unicode cInsChar, BOOL bSttQuote,
                                         LanguageType eLang ) const
@@ -1186,7 +1231,7 @@ String SvxAutoCorrect::GetQuote( SvxAutoCorrDoc& rDoc, xub_StrLen nInsPos,
 
 ULONG SvxAutoCorrect::AutoCorrect( SvxAutoCorrDoc& rDoc, const String& rTxt,
                                     xub_StrLen nInsPos, sal_Unicode cChar,
-                                    BOOL bInsert )
+                                    BOOL bInsert, Window* pFrameWin )
 {
     ULONG nRet = 0;
     do{		                            // only for middle check loop !!
@@ -1334,7 +1379,19 @@ ULONG SvxAutoCorrect::AutoCorrect( SvxAutoCorrDoc& rDoc, const String& rTxt,
             ;
         else
         {
+            bool bLockKeyOn = pFrameWin && (pFrameWin->GetIndicatorState() & INDICATOR_CAPSLOCK);
+
             nRet = 0;
+            if ( bLockKeyOn && IsAutoCorrFlag( CorrectCapsLock ) &&
+                 FnCorrectCapsLock( rDoc, rTxt, nCapLttrPos, nInsPos, eLang ) )
+            {
+                // Correct accidental use of cAPS LOCK key (do this only when
+                // the caps or shift lock key is pressed).  Turn off the caps
+                // lock afterwords.
+                nRet |= CorrectCapsLock;
+                pFrameWin->SimulateKeyPress( KEY_CAPSLOCK );
+            }
+
             // Grossbuchstabe am Satz-Anfang ??
             if( IsAutoCorrFlag( CptlSttSntnc ) &&
                 FnCptlSttSntnc( rDoc, rTxt, TRUE, nCapLttrPos, nInsPos, eLang ) )
diff --git editeng/source/outliner/outlvw.cxx editeng/source/outliner/outlvw.cxx
index e7ee6c7..da35082 100644
--- editeng/source/outliner/outlvw.cxx
+++ editeng/source/outliner/outlvw.cxx
@@ -95,7 +95,7 @@ void OutlinerView::Paint( const Rectangle& rRect )
     pEditView->Paint( rRect );
 }
 
-BOOL OutlinerView::PostKeyEvent( const KeyEvent& rKEvt )
+BOOL OutlinerView::PostKeyEvent( const KeyEvent& rKEvt, Window* pFrameWin )
 {
     DBG_CHKTHIS( OutlinerView, 0 );
 
@@ -260,7 +260,7 @@ BOOL OutlinerView::PostKeyEvent( const KeyEvent& rKEvt )
         }
     }
 
-    return bKeyProcessed ? TRUE : pEditView->PostKeyEvent( rKEvt );
+    return bKeyProcessed ? TRUE : pEditView->PostKeyEvent( rKEvt, pFrameWin );
 }
 
 
diff --git svx/source/svdraw/svdedxv.cxx svx/source/svdraw/svdedxv.cxx
index 6fb8f14..054a9e8 100644
--- svx/source/svdraw/svdedxv.cxx
+++ svx/source/svdraw/svdedxv.cxx
@@ -1162,7 +1162,7 @@ BOOL SdrObjEditView::KeyInput(const KeyEvent& rKEvt, Window* pWin)
                 ShowItemBrowser();
         }
 #endif
-        if (pTextEditOutlinerView->PostKeyEvent(rKEvt))
+        if (pTextEditOutlinerView->PostKeyEvent(rKEvt, pWin))
         {
             if( pMod && !pMod->IsChanged() )
             {
-- 
1.7.0.1

