--- svx/inc/svx/editeng.hxx.old	2009-04-02 11:03:40.000000000 +0000
+++ svx/inc/svx/editeng.hxx	2009-04-06 16:42:14.000000000 +0000
@@ -56,6 +56,7 @@ class Rectangle;
 class SvStream;
 class Link;
 class OutputDevice;
+class Window;
 class SvUShorts;
 class SfxPoolItem;
 class SvxNumBulletItem;
@@ -127,7 +128,7 @@ private:
 	SVX_DLLPRIVATE EditEngine&		operator=( const EditEngine& );
 
 //#if 0 // _SOLAR__PRIVATE
-	SVX_DLLPRIVATE BOOL				PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pView );
+    SVX_DLLPRIVATE BOOL				PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pView, Window* pFrameWin = NULL );
 //#endif
 
 protected:
--- svx/inc/svx/editview.hxx.old	2009-04-02 11:03:40.000000000 +0000
+++ svx/inc/svx/editview.hxx	2009-04-06 16:42:14.000000000 +0000
@@ -145,7 +145,7 @@ public:
 
 	void			InsertText( const String& rNew, BOOL bSelect = FALSE );
 
-	BOOL			PostKeyEvent( const KeyEvent& rKeyEvent );
+    BOOL			PostKeyEvent( const KeyEvent& rKeyEvent, Window* pFrameWin = NULL );
 
 	BOOL			MouseButtonUp( const MouseEvent& rMouseEvent );
 	BOOL			MouseButtonDown( const MouseEvent& rMouseEvent );
@@ -208,7 +208,7 @@ public:
 
 	BOOL			MatchGroup();
 
-	void			CompleteAutoCorrect();
+    void			CompleteAutoCorrect( Window* pFrameWin = NULL );
 
 	EESpellState	StartSpeller( BOOL bMultipleDoc = FALSE );
 	EESpellState	StartThesaurus();
--- svx/inc/svx/outliner.hxx.old	2009-04-02 11:03:40.000000000 +0000
+++ svx/inc/svx/outliner.hxx	2009-04-06 16:42:14.000000000 +0000
@@ -265,7 +265,7 @@ public:
 	void        Scroll( long nHorzScroll, long nVertScroll );
 
 	void        Paint( const Rectangle& rRect );
-	BOOL        PostKeyEvent( const KeyEvent& rKEvt );
+    BOOL        PostKeyEvent( const KeyEvent& rKEvt, Window* pFrameWin = NULL );
 	BOOL        MouseButtonDown( const MouseEvent& );
 	BOOL        MouseButtonUp( const MouseEvent& );
 	BOOL        MouseMove( const MouseEvent& );
--- svx/inc/svx/svxacorr.hxx.old	2009-04-02 11:03:40.000000000 +0000
+++ svx/inc/svx/svxacorr.hxx	2009-04-06 16:42:14.000000000 +0000
@@ -50,6 +50,7 @@ class SvxAutoCorrLanguageTable_Impl;
 class SvxAutoCorrLastFileAskTable_Impl;
 class SotStorageRef;
 class SotStorage;
+class Window;
 
 // Flags fuer die AutoKorrekt-Flags
 const long CptlSttSntnc		= 0x00000001;	// Gross-Buchstaben am SatzAnfang
@@ -65,6 +66,7 @@ const long SaveWordCplSttLst= 0x00000200
 const long SaveWordWrdSttLst= 0x00000400;	// 2 GrB. am WortAnf. auto. aufnehmen
 const long IngnoreDoubleSpace= 0x00000800;	// 2 Spaces ignorieren
 const long ChgSglQuotes		= 0x00001000;	// einfache Quotes ersetzen
+const long CorrectCapsLock  = 0x00002000;   // Correct accidental use of cAPS LOCK key
 
 const long ChgWordLstLoad	= 0x20000000;	// Ersetzungsliste geladen
 const long CplSttLstLoad	= 0x40000000;	// Exceptionlist fuer CplStart geladen
@@ -252,7 +254,7 @@ public:
 	// fuehre eine AutoKorrektur aus.
 	// returnt was ausgefuehrt wurde; entsprechend den obigen Flags
 	ULONG AutoCorrect( SvxAutoCorrDoc& rDoc, const String& rTxt,
-						xub_StrLen nPos, sal_Unicode cInsChar, BOOL bInsert );
+                        xub_StrLen nPos, sal_Unicode cInsChar, BOOL bInsert, Window* pFrameWin = NULL );
 
 	// return fuer die Autotext Expandierung das vorherige Wort, was dem
 	// AutoCorrect - Algorythmus entspricht.
@@ -377,6 +379,10 @@ public:
 								xub_StrLen nSttPos, xub_StrLen nEndPos,
 								LanguageType eLang  = LANGUAGE_SYSTEM);
 
+    bool FnCorrectCapsLock( SvxAutoCorrDoc&, const String&, 
+                            xub_StrLen nSttPos, xub_StrLen nEndPos,
+                            LanguageType eLang  = LANGUAGE_SYSTEM );
+
 	static long			GetDefaultFlags();
 
 // returns TRUE for charcters where the function
--- svx/source/cui/autocdlg.cxx
+++ svx/source/cui/autocdlg.cxx
@@ -233,7 +233,8 @@ OfaAutocorrOptionsPage::OfaAutocorrOptio
     sNoDblSpaces        (SVX_RES(STR_NO_DBL_SPACES    )),
     sHalf               (SVX_RES(ST_FRACTION          )),
 	sDash    			(SVX_RES(ST_DASH	         	)),
-    sFirst              (SVX_RES(ST_ORDINAL           ))
+    sFirst              (SVX_RES(ST_ORDINAL           )),
+    sAccidentalCaps     (SVX_RES(ST_CORRECT_ACCIDENTAL_CAPS_LOCK))
 {
 	FreeResource();
 
@@ -279,6 +280,7 @@ BOOL OfaAutocorrOptionsPage::FillItemSet
 	pAutoCorrect->SetAutoCorrFlag(ChgFractionSymbol,	aCheckLB.IsChecked(nPos++));
 	pAutoCorrect->SetAutoCorrFlag(ChgToEnEmDash,		aCheckLB.IsChecked(nPos++));
 	pAutoCorrect->SetAutoCorrFlag(IngnoreDoubleSpace,	aCheckLB.IsChecked(nPos++));
+    pAutoCorrect->SetAutoCorrFlag(CorrectCapsLock,      aCheckLB.IsChecked(nPos++));
 
 	BOOL bReturn = nFlags != pAutoCorrect->GetFlags();
 	if(bReturn )
@@ -320,6 +322,7 @@ void OfaAutocorrOptionsPage::Reset( cons
 	aCheckLB.InsertEntry(sHalf);
 	aCheckLB.InsertEntry(sDash);
 	aCheckLB.InsertEntry(sNoDblSpaces);
+    aCheckLB.InsertEntry(sAccidentalCaps);
 
 	USHORT nPos = 0;
 	aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & Autocorrect) );
@@ -331,6 +334,7 @@ void OfaAutocorrOptionsPage::Reset( cons
 	aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & ChgFractionSymbol) );
 	aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & ChgToEnEmDash) );
 	aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & IngnoreDoubleSpace) );
+    aCheckLB.CheckEntryPos( nPos++, 0 != (nFlags & CorrectCapsLock) );
 
 	aCheckLB.SetUpdateMode(TRUE);
 }
@@ -463,6 +467,7 @@ enum OfaAutoFmtOptions
 	DEL_SPACES_AT_STT_END,
 	DEL_SPACES_BETWEEN_LINES,
 	IGNORE_DBLSPACE,
+    CORRECT_CAPS_LOCK,
 	APPLY_NUMBERING,
 	INSERT_BORDER,
 	CREATE_TABLE,
@@ -492,6 +497,7 @@ OfaSwAutoFmtOptionsPage::OfaSwAutoFmtOpt
 	sBullet				(SVX_RES(	ST_BULLET       )),
 	sBoldUnder			(SVX_RES(	ST_BOLD_UNDER   )),
 	sNoDblSpaces		(SVX_RES(	STR_NO_DBL_SPACES)),
+    sCorrectCapsLock    (SVX_RES(   ST_CORRECT_ACCIDENTAL_CAPS_LOCK)),
 	sFraction			(SVX_RES(	ST_FRACTION     )),
 	sDetectURL			(SVX_RES(	ST_DETECT_URL   )),
 	sDash				(SVX_RES(	ST_DASH         )),
@@ -632,6 +638,9 @@ BOOL OfaSwAutoFmtOptionsPage::FillItemSe
 	pAutoCorrect->SetAutoCorrFlag(IngnoreDoubleSpace,
 						aCheckLB.IsChecked(IGNORE_DBLSPACE, CBCOL_SECOND));
 
+    pAutoCorrect->SetAutoCorrFlag(CorrectCapsLock,
+                        aCheckLB.IsChecked(CORRECT_CAPS_LOCK, CBCOL_SECOND));
+
 	bCheck = aCheckLB.IsChecked(DETECT_URL, CBCOL_FIRST);
 	bModified |= pOpt->bSetINetAttr != bCheck;
 	pOpt->bSetINetAttr = bCheck;
@@ -763,6 +772,7 @@ void OfaSwAutoFmtOptionsPage::Reset( con
 	aCheckLB.GetModel()->Insert(CreateEntry(sDelSpaceBetweenLines, CBCOL_BOTH  ));
 
 	aCheckLB.GetModel()->Insert(CreateEntry(sNoDblSpaces,		CBCOL_SECOND));
+    aCheckLB.GetModel()->Insert(CreateEntry(sCorrectCapsLock,   CBCOL_SECOND));
 	aCheckLB.GetModel()->Insert(CreateEntry(sNum,				CBCOL_SECOND));
 	aCheckLB.GetModel()->Insert(CreateEntry(sBorder,			CBCOL_SECOND));
 	aCheckLB.GetModel()->Insert(CreateEntry(sTable,				CBCOL_SECOND));
@@ -782,6 +792,7 @@ void OfaSwAutoFmtOptionsPage::Reset( con
 	aCheckLB.CheckEntryPos( BOLD_UNDERLINE,		CBCOL_FIRST,	pOpt->bChgWeightUnderl );
 	aCheckLB.CheckEntryPos( BOLD_UNDERLINE,		CBCOL_SECOND,	0 != (nFlags & ChgWeightUnderl) );
 	aCheckLB.CheckEntryPos( IGNORE_DBLSPACE,	CBCOL_SECOND,	0 != (nFlags & IngnoreDoubleSpace) );
+    aCheckLB.CheckEntryPos( CORRECT_CAPS_LOCK,  CBCOL_SECOND,   0 != (nFlags & CorrectCapsLock) );
 	aCheckLB.CheckEntryPos( DETECT_URL,			CBCOL_FIRST,	pOpt->bSetINetAttr );
 	aCheckLB.CheckEntryPos( DETECT_URL,			CBCOL_SECOND,	0 != (nFlags & SetINetAttr) );
 	aCheckLB.CheckEntryPos( REPLACE_1ST,		CBCOL_FIRST,	pOpt->bChgOrdinalNumber );
--- svx/source/cui/autocdlg.hrc
+++ svx/source/cui/autocdlg.hrc
@@ -152,6 +152,7 @@
 #define ST_DASH                         208
 #define FT_LANG                         209
 #define LB_LANG                         210
+#define ST_CORRECT_ACCIDENTAL_CAPS_LOCK 211
 
 #define CB_SMARTTAGS                    220
 #define FT_SMARTTAGS                    221
--- svx/source/cui/autocdlg.hxx
+++ svx/source/cui/autocdlg.hxx
@@ -119,6 +119,7 @@ private:
 	String		sHalf;
 	String		sDash;
 	String		sFirst;
+    String      sAccidentalCaps;
 
 public:
 						OfaAutocorrOptionsPage( Window* pParent, const SfxItemSet& rSet );
@@ -157,6 +158,7 @@ class OfaSwAutoFmtOptionsPage : public S
 	String			sByInputBullet;
 	String			sBoldUnder;
 	String			sNoDblSpaces;
+    String          sCorrectCapsLock;
 	String			sFraction;
 	String			sDetectURL;
 	String          sDash;
--- svx/source/cui/autocdlg.src
+++ svx/source/cui/autocdlg.src
@@ -140,7 +140,11 @@ TabDialog RID_OFA_AUTOCORR_DLG
     String ST_DASH \
     { \
         Text [ en-US ] = "Replace dashes" ; \
-	};
+    }; \
+    String ST_CORRECT_ACCIDENTAL_CAPS_LOCK \
+    { \
+        Text [ en-US ] = "Correct accidental use of cAPS LOCK key" ; \
+    };
 
 /**************************************************************************/
 /*                                                                        */
--- svx/source/editeng/acorrcfg.cxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/acorrcfg.cxx	2009-04-06 16:42:14.000000000 +0000
@@ -127,9 +127,10 @@ Sequence<OUString> 	SvxBaseAutoCorrCfg::
 		"SingleQuoteAtEnd",						// 13
 		"ReplaceDoubleQuote",					// 14
 		"DoubleQuoteAtStart",					// 15
-		"DoubleQuoteAtEnd"						// 16
+        "DoubleQuoteAtEnd",						// 16
+        "CorrectAccidentalCapsLock"             // 17
 	};
-	const int nCount = 17;
+    const int nCount = 18;
 	Sequence<OUString> aNames(nCount);
 	OUString* pNames = aNames.getArray();
 	for(int i = 0; i < nCount; i++)
@@ -229,6 +230,10 @@ void SvxBaseAutoCorrCfg::Load(sal_Bool b
 						rParent.pAutoCorrect->SetEndDoubleQuote(
                             sal::static_int_cast< sal_Unicode >( nTemp ) );
 					break;//"DoubleQuoteAtEnd"
+                    case 17:
+                        if(*(sal_Bool*)pValues[nProp].getValue())
+                            nFlags |= CorrectCapsLock;
+                    break;//"CorrectAccidentalCapsLock"
 				}
 			}
 		}
@@ -333,6 +338,10 @@ void SvxBaseAutoCorrCfg::Commit()
 			case 16:
 				pValues[nProp] <<= (sal_Int32) rParent.pAutoCorrect->GetEndDoubleQuote();
 			break;//"DoubleQuoteAtEnd"
+            case 17:
+                bVal = 0 != (nFlags & CorrectCapsLock);
+                pValues[nProp].setValue(&bVal, rType);
+            break;//"CorrectAccidentalCapsLock"
 		}
 	}
 	PutProperties(aNames, aValues);
--- svx/source/editeng/editeng.cxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/editeng.cxx	2009-04-06 16:42:14.000000000 +0000
@@ -802,7 +802,7 @@ ESelection EditEngine::CursorRight( cons
 	return pE->pImpEditEngine->CreateESel( aSel );
 }
 
-sal_Bool EditEngine::PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pEditView )
+sal_Bool EditEngine::PostKeyEvent( const KeyEvent& rKeyEvent, EditView* pEditView, Window* pFrameWin )
 {
 	DBG_CHKTHIS( EditEngine, 0 );
 	DBG_CHKOBJ( pEditView, EditView, 0 );
@@ -1062,7 +1062,7 @@ sal_Bool EditEngine::PostKeyEvent( const
 						if ( bSel )
 							pImpEditEngine->UndoActionStart( EDITUNDO_INSERT );
 						if ( pImpEditEngine->GetStatus().DoAutoCorrect() )
-							aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode() );
+                            aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode(), pFrameWin );
 						aCurSel = pImpEditEngine->InsertTab( aCurSel );
 						if ( bSel )
 							pImpEditEngine->UndoActionEnd( EDITUNDO_INSERT );
@@ -1083,7 +1083,7 @@ sal_Bool EditEngine::PostKeyEvent( const
 						pImpEditEngine->UndoActionStart( EDITUNDO_INSERT );
 						if ( rKeyEvent.GetKeyCode().IsShift() )
                         {
-                            aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode() );
+                            aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode(), pFrameWin );
 							aCurSel = pImpEditEngine->InsertLineBreak( aCurSel );
                         }
 						else
@@ -1091,7 +1091,7 @@ sal_Bool EditEngine::PostKeyEvent( const
 							if ( !aAutoText.Len() )
 							{
 								if ( pImpEditEngine->GetStatus().DoAutoCorrect() )
-									aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode() );
+                                    aCurSel = pImpEditEngine->AutoCorrect( aCurSel, 0, !pEditView->IsInsertMode(), pFrameWin );
 								aCurSel = pImpEditEngine->InsertParaBreak( aCurSel );
 							}
 							else
@@ -1139,7 +1139,8 @@ sal_Bool EditEngine::PostKeyEvent( const
 						 	( nCharCode == '\"' ) || ( nCharCode == '\'' ) ||
 							( nCharCode == '_' )  ))
 					{
-						aCurSel = pImpEditEngine->AutoCorrect( aCurSel, nCharCode, !pEditView->IsInsertMode() );
+                        aCurSel = pImpEditEngine->AutoCorrect( 
+                            aCurSel, nCharCode, !pEditView->IsInsertMode(), pFrameWin );
 					}
 					else
 					{
--- svx/source/editeng/editview.cxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/editview.cxx	2009-04-06 16:42:14.000000000 +0000
@@ -60,6 +60,7 @@
 #include <helpid.hrc>
 #include <i18npool/lang.h>
 #include <vcl/menu.hxx>
+#include <vcl/window.hxx>
 #include <acorrcfg.hxx>
 #include <unolingu.hxx>
 #include <fontitem.hxx>
@@ -418,11 +419,11 @@ void EditView::InsertText( const XubStri
 	pImpEE->FormatAndUpdate( this );
 }
 
-sal_Bool EditView::PostKeyEvent( const KeyEvent& rKeyEvent )
+sal_Bool EditView::PostKeyEvent( const KeyEvent& rKeyEvent, Window* pFrameWin )
 {
 	DBG_CHKTHIS( EditView, 0 );
 	DBG_CHKOBJ( pImpEditView->pEditEngine, EditEngine, 0 );
-	return pImpEditView->PostKeyEvent( rKeyEvent );
+    return pImpEditView->PostKeyEvent( rKeyEvent, pFrameWin );
 }
 
 sal_Bool EditView::MouseButtonUp( const MouseEvent& rMouseEvent )
@@ -919,7 +920,7 @@ sal_Bool EditView::MatchGroup()
 	return sal_False;
 }
 
-void EditView::CompleteAutoCorrect()
+void EditView::CompleteAutoCorrect( Window* pFrameWin )
 {
 	DBG_CHKTHIS( EditView, 0 );
 	DBG_CHKOBJ( pImpEditView->pEditEngine, EditEngine, 0 );
@@ -929,7 +930,7 @@ void EditView::CompleteAutoCorrect()
 		EditSelection aSel = pImpEditView->GetEditSelection();
 		aSel = PIMPEE->EndOfWord( aSel.Max() );
 		// MT 06/00: Why pass EditSelection to AutoCorrect, not EditPaM?!
-		aSel = PIMPEE->AutoCorrect( aSel, 0, !IsInsertMode() );
+        aSel = PIMPEE->AutoCorrect( aSel, 0, !IsInsertMode(), pFrameWin );
 		pImpEditView->SetEditSelection( aSel );
 		if ( PIMPEE->IsModified() )
 			PIMPEE->FormatAndUpdate( this );
--- svx/source/editeng/impedit2.cxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/impedit2.cxx	2009-04-06 16:42:14.000000000 +0000
@@ -2540,7 +2540,8 @@ void ImpEditEngine::ImpRemoveParagraph(
 	}
 }
 
-EditPaM ImpEditEngine::AutoCorrect( const EditSelection& rCurSel, xub_Unicode c, BOOL bOverwrite )
+EditPaM ImpEditEngine::AutoCorrect( const EditSelection& rCurSel, xub_Unicode c, 
+                                    bool bOverwrite, Window* pFrameWin )
 {
 	EditSelection aSel( rCurSel );
 #ifndef SVX_LIGHT
@@ -2590,7 +2591,7 @@ EditPaM ImpEditEngine::AutoCorrect( cons
 		ContentNode* pNode = aSel.Max().GetNode();
 		USHORT nIndex = aSel.Max().GetIndex();
 		EdtAutoCorrDoc aAuto( this, pNode, nIndex, c );
-		pAutoCorrect->AutoCorrect( aAuto, *pNode, nIndex, c, !bOverwrite );
+        pAutoCorrect->AutoCorrect( aAuto, *pNode, nIndex, c, !bOverwrite, pFrameWin );
 		aSel.Max().SetIndex( aAuto.GetCursor() );
 
 		// #i78661 since the SvxAutoCorrect object used here is
--- svx/source/editeng/impedit.cxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/impedit.cxx	2009-04-06 16:42:14.000000000 +0000
@@ -1001,7 +1001,7 @@ Pair ImpEditView::Scroll( long ndX, long
 	return Pair( nRealDiffX, nRealDiffY );
 }
 
-sal_Bool ImpEditView::PostKeyEvent( const KeyEvent& rKeyEvent )
+sal_Bool ImpEditView::PostKeyEvent( const KeyEvent& rKeyEvent, Window* pFrameWin )
 {
     BOOL bDone = FALSE;
 
@@ -1045,7 +1045,7 @@ sal_Bool ImpEditView::PostKeyEvent( cons
     }
 
     if( !bDone )
-	    bDone = pEditEngine->PostKeyEvent( rKeyEvent, GetEditViewPtr() );
+        bDone = pEditEngine->PostKeyEvent( rKeyEvent, GetEditViewPtr(), pFrameWin );
 
     return bDone;
 }
--- svx/source/editeng/impedit.hxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/impedit.hxx	2009-04-06 16:42:14.000000000 +0000
@@ -101,6 +101,8 @@ class TextRanger;
 class SvKeyValueIterator;
 class SvxForbiddenCharactersTable;
 class SvtCTLOptions;
+class Window;
+
 #include <svx/SpellPortions.hxx>
 
 #include <svx/eedata.hxx>
@@ -297,7 +299,7 @@ public:
 
 	BOOL			IsVertical() const;
 
-	BOOL			PostKeyEvent( const KeyEvent& rKeyEvent );
+    BOOL			PostKeyEvent( const KeyEvent& rKeyEvent, Window* pFrameWin = NULL );
 
 	BOOL			MouseButtonUp( const MouseEvent& rMouseEvent );
 	BOOL			MouseButtonDown( const MouseEvent& rMouseEvent );
@@ -787,7 +789,7 @@ public:
 	EditPaM			DeleteSelected( EditSelection aEditSelection);
     EditPaM         InsertText( const EditSelection& rCurEditSelection, sal_Unicode c, sal_Bool bOverwrite, sal_Bool bIsUserInput = sal_False );
 	EditPaM			InsertText( EditSelection aCurEditSelection, const String& rStr );
-	EditPaM			AutoCorrect( const EditSelection& rCurEditSelection, sal_Unicode c, sal_Bool bOverwrite );
+    EditPaM			AutoCorrect( const EditSelection& rCurEditSelection, sal_Unicode c, bool bOverwrite, Window* pFrameWin = NULL );
 	EditPaM			DeleteLeftOrRight( const EditSelection& rEditSelection, BYTE nMode, BYTE nDelMode = DELMODE_SIMPLE );
 	EditPaM			InsertParaBreak( EditSelection aEditSelection );
 	EditPaM			InsertLineBreak( EditSelection aEditSelection );
--- svx/source/editeng/svxacorr.cxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/svxacorr.cxx	2009-04-06 16:42:14.000000000 +0000
@@ -81,6 +81,7 @@
 #include <svx/escpitem.hxx>
 #include <svx/svxacorr.hxx>
 #include "unolingu.hxx"
+#include "vcl/window.hxx"
 
 #ifndef _SVX_HELPID_HRC
 #include <helpid.hrc>
@@ -351,7 +352,8 @@ long SvxAutoCorrect::GetDefaultFlags()
 					| SetINetAttr
 					| ChgQuotes
 					| SaveWordCplSttLst
-					| SaveWordWrdSttLst;
+                    | SaveWordWrdSttLst
+                    | CorrectCapsLock;
 	LanguageType eLang = GetAppLang();
 	switch( eLang )
 	{
@@ -1052,6 +1054,49 @@ BOOL SvxAutoCorrect::FnCptlSttSntnc( Svx
 
 	return bRet;
 }
+
+bool SvxAutoCorrect::FnCorrectCapsLock( SvxAutoCorrDoc& rDoc, const String& rTxt,
+                                        xub_StrLen nSttPos, xub_StrLen nEndPos,
+                                        LanguageType eLang )
+{
+    if (nEndPos - nSttPos < 2)
+        // string must be at least 2-character long.
+        return false;
+
+    CharClass& rCC = GetCharClass( eLang );
+
+    // Check the first 2 letters.
+    if ( !IsLowerLetter(rCC.getCharacterType(rTxt, nSttPos)) )
+        return false;
+
+    if ( !IsUpperLetter(rCC.getCharacterType(rTxt, nSttPos+1)) )
+        return false;
+
+    String aConverted;
+    aConverted.Append( rCC.upper(rTxt.GetChar(nSttPos)) );
+    aConverted.Append( rCC.lower(rTxt.GetChar(nSttPos+1)) );
+
+    for (xub_StrLen i = nSttPos+2; i < nEndPos; ++i)
+    {
+        if ( IsLowerLetter(rCC.getCharacterType(rTxt, i)) )
+            // A lowercase letter disqualifies the whole text.
+            return false;
+
+        if ( IsUpperLetter(rCC.getCharacterType(rTxt, i)) )
+            // Another uppercase letter.  Convert it.
+            aConverted.Append( rCC.lower(rTxt.GetChar(i)) );
+        else
+            // This is not an alphabetic letter.  Leave it as-is.
+            aConverted.Append(rTxt.GetChar(i));
+    }
+
+    // Replace the word.
+    rDoc.Delete(nSttPos, nEndPos);
+    rDoc.Insert(nSttPos, aConverted);
+
+    return true;
+}
+
 //The method below is renamed from _GetQuote to GetQuote by BerryJia for Bug95846 Time:2002-8-13 15:50
 sal_Unicode SvxAutoCorrect::GetQuote( sal_Unicode cInsChar, BOOL bSttQuote,
 										LanguageType eLang ) const
@@ -1165,7 +1210,7 @@ String SvxAutoCorrect::GetQuote( SvxAuto
 
 ULONG SvxAutoCorrect::AutoCorrect( SvxAutoCorrDoc& rDoc, const String& rTxt,
 									xub_StrLen nInsPos, sal_Unicode cChar,
-									BOOL bInsert )
+                                    BOOL bInsert, Window* pFrameWin )
 {
 	ULONG nRet = 0;
 	do{		                            // only for middle check loop !!
@@ -1308,7 +1353,19 @@ ULONG SvxAutoCorrect::AutoCorrect( SvxAu
 			;
 		else
 		{
+            bool bLockKeyOn = pFrameWin && (pFrameWin->GetIndicatorState() & INDICATOR_CAPSLOCK);
+
 			nRet = 0;
+            if ( bLockKeyOn && IsAutoCorrFlag( CorrectCapsLock ) &&
+                 FnCorrectCapsLock( rDoc, rTxt, nCapLttrPos, nInsPos, eLang ) )
+            {
+                // Correct accidental use of cAPS LOCK key (do this only when 
+                // the caps or shift lock key is pressed).  Turn off the caps
+                // lock afterwords.
+                nRet |= CorrectCapsLock;
+                pFrameWin->SimulateKeyPress( KEY_CAPSLOCK );
+            }
+
 			// Grossbuchstabe am Satz-Anfang ??
 			if( IsAutoCorrFlag( CptlSttSntnc ) &&
 				FnCptlSttSntnc( rDoc, rTxt, TRUE, nCapLttrPos, nInsPos, eLang ) )
--- svx/source/outliner/outlvw.cxx.old	2009-04-02 11:02:55.000000000 +0000
+++ svx/source/outliner/outlvw.cxx	2009-04-06 16:42:14.000000000 +0000
@@ -92,7 +92,7 @@ void OutlinerView::Paint( const Rectangl
 	pEditView->Paint( rRect );
 }
 
-BOOL OutlinerView::PostKeyEvent( const KeyEvent& rKEvt )
+BOOL OutlinerView::PostKeyEvent( const KeyEvent& rKEvt, Window* pFrameWin )
 {
 	DBG_CHKTHIS( OutlinerView, 0 );
 
@@ -257,7 +257,7 @@ BOOL OutlinerView::PostKeyEvent( const K
 		}
 	}
 
-	return bKeyProcessed ? TRUE : pEditView->PostKeyEvent( rKEvt );
+    return bKeyProcessed ? TRUE : pEditView->PostKeyEvent( rKEvt, pFrameWin );
 }
 
 
--- svx/source/svdraw/svdedxv.cxx.old	2009-04-02 11:03:00.000000000 +0000
+++ svx/source/svdraw/svdedxv.cxx	2009-04-06 16:42:14.000000000 +0000
@@ -1178,7 +1178,7 @@ BOOL SdrObjEditView::KeyInput(const KeyE
 				ShowItemBrowser();
         }
 #endif
-		if (pTextEditOutlinerView->PostKeyEvent(rKEvt))
+        if (pTextEditOutlinerView->PostKeyEvent(rKEvt, pWin))
 		{
 			if( pMod && !pMod->IsChanged() )
 			{
