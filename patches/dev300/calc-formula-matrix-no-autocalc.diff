From 5e4280a8731bee71c4386a240582e187de6451f4 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:08:24 +0200
Subject: [PATCH 717/768] calc-formula-matrix-no-autocalc.diff

---
 sc/inc/cell.hxx               |    2 ++
 sc/source/core/data/cell.cxx  |   12 ++++++++++--
 sc/source/core/data/cell2.cxx |   23 ++++++++---------------
 3 files changed, 20 insertions(+), 17 deletions(-)

diff --git sc/inc/cell.hxx sc/inc/cell.hxx
index 93818ec..847e833 100644
--- sc/inc/cell.hxx
+++ sc/inc/cell.hxx
@@ -538,6 +538,8 @@ public:
 
     /** Determines whether or not the result string contains more than one paragraph */
     bool            IsMultilineResult();
+
+    void            MaybeInterpret();
 };
 
 //			Iterator fuer Referenzen in einer Formelzelle
diff --git sc/source/core/data/cell.cxx sc/source/core/data/cell.cxx
index e999050..9df008a 100644
--- sc/source/core/data/cell.cxx
+++ sc/source/core/data/cell.cxx
@@ -906,8 +906,7 @@ void ScFormulaCell::GetFormula( String& rFormula, const FormulaGrammar::Grammar
 
 void ScFormulaCell::GetResultDimensions( SCSIZE& rCols, SCSIZE& rRows )
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
 
     const ScMatrix* pMat = NULL;
     if (!pCode->GetCodeError() && aResult.GetType() == svMatrixCell &&
@@ -1985,6 +1984,15 @@ bool ScFormulaCell::IsMultilineResult()
     return false;
 }
 
+void ScFormulaCell::MaybeInterpret()
+{
+    if (!IsDirtyOrInTableOpDirty())
+        return;
+
+    if (pDocument->GetAutoCalc() || (cMatrixFlag != MM_NONE))
+        Interpret();
+}
+
 EditTextObject* ScFormulaCell::CreateURLObject()
 {
     String aCellText;
diff --git sc/source/core/data/cell2.cxx sc/source/core/data/cell2.cxx
index 8c4018b..7c5bd12 100644
--- sc/source/core/data/cell2.cxx
+++ sc/source/core/data/cell2.cxx
@@ -489,29 +489,25 @@ bool lcl_isReference(const FormulaToken& rToken)
 
 BOOL ScFormulaCell::IsEmpty()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     return aResult.GetCellResultType() == formula::svEmptyCell;
 }
 
 BOOL ScFormulaCell::IsEmptyDisplayedAsString()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     return aResult.IsEmptyDisplayedAsString();
 }
 
 BOOL ScFormulaCell::IsValue()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     return aResult.IsValue();
 }
 
 double ScFormulaCell::GetValue()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     if ((!pCode->GetCodeError() || pCode->GetCodeError() == errDoubleRef) &&
             !aResult.GetResultError())
         return aResult.GetDouble();
@@ -521,16 +517,13 @@ double ScFormulaCell::GetValue()
 double ScFormulaCell::GetValueAlways()
 {
     // for goal seek: return result value even if error code is set
-
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     return aResult.GetDouble();
 }
 
 void ScFormulaCell::GetString( String& rString )
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     if ((!pCode->GetCodeError() || pCode->GetCodeError() == errDoubleRef) &&
             !aResult.GetResultError())
         rString = aResult.GetString();
@@ -722,8 +715,8 @@ USHORT ScFormulaCell::GetMatrixEdge( ScAddress& rOrgPos )
 
 USHORT ScFormulaCell::GetErrCode()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
+
     /* FIXME: If ScTokenArray::SetCodeError() was really only for code errors
      * and not also abused for signaling other error conditions we could bail
      * out even before attempting to interpret broken code. */
-- 
1.7.0.1

