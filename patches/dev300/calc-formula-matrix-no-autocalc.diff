diff --git sc/inc/cell.hxx sc/inc/cell.hxx
index 41a4413..e27a4aa 100644
--- sc/inc/cell.hxx
+++ sc/inc/cell.hxx
@@ -541,6 +541,8 @@ public:
 
     /** Determines whether or not the result string contains more than one paragraph */
     bool            IsMultilineResult();
+
+    void            MaybeInterpret();
 };
 
 //			Iterator fuer Referenzen in einer Formelzelle
diff --git sc/source/core/data/cell.cxx sc/source/core/data/cell.cxx
index 0dffb44..a8bf508 100644
--- sc/source/core/data/cell.cxx
+++ sc/source/core/data/cell.cxx
@@ -913,8 +913,7 @@ void ScFormulaCell::GetFormula( String& rFormula, const FormulaGrammar::Grammar
 
 void ScFormulaCell::GetResultDimensions( SCSIZE& rCols, SCSIZE& rRows )
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
 
     const ScMatrix* pMat = NULL;
     if (!pCode->GetCodeError() && aResult.GetType() == svMatrixCell &&
@@ -2031,6 +2030,15 @@ bool ScFormulaCell::IsMultilineResult()
     return false;
 }
 
+void ScFormulaCell::MaybeInterpret()
+{
+    if (!IsDirtyOrInTableOpDirty())
+        return;
+
+    if (pDocument->GetAutoCalc() || (cMatrixFlag != MM_NONE))
+        Interpret();
+}
+
 EditTextObject* ScFormulaCell::CreateURLObject()
 {
     String aCellText;
diff --git sc/source/core/data/cell2.cxx sc/source/core/data/cell2.cxx
index 033ad58..3fed9d2 100644
--- sc/source/core/data/cell2.cxx
+++ sc/source/core/data/cell2.cxx
@@ -492,29 +492,25 @@ bool lcl_isReference(const FormulaToken& rToken)
 
 BOOL ScFormulaCell::IsEmpty()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     return aResult.GetCellResultType() == formula::svEmptyCell;
 }
 
 BOOL ScFormulaCell::IsEmptyDisplayedAsString()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     return aResult.IsEmptyDisplayedAsString();
 }
 
 BOOL ScFormulaCell::IsValue()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     return aResult.IsValue();
 }
 
 double ScFormulaCell::GetValue()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     if ((!pCode->GetCodeError() || pCode->GetCodeError() == errDoubleRef) &&
             !aResult.GetResultError())
         return aResult.GetDouble();
@@ -524,16 +520,13 @@ double ScFormulaCell::GetValue()
 double ScFormulaCell::GetValueAlways()
 {
     // for goal seek: return result value even if error code is set
-
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     return aResult.GetDouble();
 }
 
 void ScFormulaCell::GetString( String& rString )
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
     if ((!pCode->GetCodeError() || pCode->GetCodeError() == errDoubleRef) &&
             !aResult.GetResultError())
         rString = aResult.GetString();
@@ -725,8 +718,8 @@ USHORT ScFormulaCell::GetMatrixEdge( ScAddress& rOrgPos )
 
 USHORT ScFormulaCell::GetErrCode()
 {
-    if (IsDirtyOrInTableOpDirty() && pDocument->GetAutoCalc())
-        Interpret();
+    MaybeInterpret();
+
     /* FIXME: If ScTokenArray::SetCodeError() was really only for code errors
      * and not also abused for signaling other error conditions we could bail
      * out even before attempting to interpret broken code. */
