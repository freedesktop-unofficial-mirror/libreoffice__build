diff -upr sc/inc/tabprotection.hxx sc/inc/tabprotection.hxx
--- sc/inc/tabprotection.hxx	2009-02-14 07:57:33.496000000 +0000
+++ sc/inc/tabprotection.hxx	2009-02-13 10:20:54.453125000 +0000
@@ -41,7 +41,6 @@
 #define ENABLE_SHEET_PROTECTION 1
 
 class ScDocument;
-class ScTableProtectionImpl;
 
 enum ScPasswordHash
 {
@@ -49,6 +48,37 @@ enum ScPasswordHash
     PASSHASH_XL
 };
 
+class ScTableProtectionImpl
+{
+public:
+    static ::com::sun::star::uno::Sequence<sal_Int8> hashPassword(const String& aPassText, ScPasswordHash eHash = PASSHASH_OOO);
+
+    explicit ScTableProtectionImpl(SCSIZE nOptSize);
+    explicit ScTableProtectionImpl(const ScTableProtectionImpl& r);
+
+    bool isProtected() const;
+    bool isProtectedWithPass() const;
+    void setProtected(bool bProtected);
+
+    bool isPasswordEmpty() const;
+    bool hasPasswordHash(ScPasswordHash eHash) const;
+    void setPassword(const String& aPassText);
+    ::com::sun::star::uno::Sequence<sal_Int8> getPasswordHash(ScPasswordHash eHash) const;
+    void setPasswordHash(const ::com::sun::star::uno::Sequence<sal_Int8>& aPassword, ScPasswordHash eHash = PASSHASH_OOO);
+    bool verifyPassword(const String& aPassText) const;
+    
+    bool isOptionEnabled(SCSIZE nOptId) const;
+    void setOption(SCSIZE nOptId, bool bEnabled);
+
+private:
+    String maPassText;
+    ::com::sun::star::uno::Sequence<sal_Int8>   maPassHash;
+    ::std::vector<bool> maOptions;
+    bool mbEmptyPass;
+    bool mbProtected;
+    ScPasswordHash meHash;
+};
+
 class ScPassHashHelper
 {
 public:
@@ -102,17 +132,17 @@ public:
 
     virtual bool isProtected() const;
     virtual bool isProtectedWithPass() const;
-    SC_DLLPUBLIC virtual void setProtected(bool bProtected);
+    virtual void setProtected(bool bProtected);
             
     virtual bool isPasswordEmpty() const;
     virtual bool hasPasswordHash(ScPasswordHash eHash) const;
-    SC_DLLPUBLIC virtual void setPassword(const String& aPassText);
+    virtual void setPassword(const String& aPassText);
     virtual ::com::sun::star::uno::Sequence<sal_Int8> getPasswordHash(ScPasswordHash eHash) const;
     virtual void setPasswordHash(const ::com::sun::star::uno::Sequence<sal_Int8>& aPassword, 
                                  ScPasswordHash eHash = PASSHASH_OOO);
     virtual bool verifyPassword(const String& aPassText) const;
     
-    SC_DLLPUBLIC bool isOptionEnabled(Option eOption) const;
+    bool isOptionEnabled(Option eOption) const;
     void setOption(Option eOption, bool bEnabled);
 
 private:
@@ -159,18 +189,18 @@ public:
 
     virtual bool isProtected() const;
     virtual bool isProtectedWithPass() const;
-    SC_DLLPUBLIC virtual void setProtected(bool bProtected);
+    virtual void setProtected(bool bProtected);
             
     virtual bool isPasswordEmpty() const;
     virtual bool hasPasswordHash(ScPasswordHash eHash) const;
-    SC_DLLPUBLIC virtual void setPassword(const String& aPassText);
+    virtual void setPassword(const String& aPassText);
     virtual ::com::sun::star::uno::Sequence<sal_Int8> getPasswordHash(ScPasswordHash eHash) const;
     virtual void setPasswordHash(const ::com::sun::star::uno::Sequence<sal_Int8>& aPassword, 
                                  ScPasswordHash eHash = PASSHASH_OOO);
     virtual bool verifyPassword(const String& aPassText) const;
     
-    SC_DLLPUBLIC bool isOptionEnabled(Option eOption) const;
-    SC_DLLPUBLIC void setOption(Option eOption, bool bEnabled);
+    bool isOptionEnabled(Option eOption) const;
+    void setOption(Option eOption, bool bEnabled);
 
 private:
     ::std::auto_ptr<ScTableProtectionImpl> mpImpl;
 
diff -upr sc/source/core/data/tabprotection.cxx sc/source/core/data/tabprotection.cxx
--- sc/source/core/data/tabprotection.cxx	2009-02-14 07:57:25.167875000 +0000
+++ sc/source/core/data/tabprotection.cxx	2009-02-13 10:20:52.046875000 +0000
@@ -112,37 +112,6 @@ static Sequence<sal_Int8> lcl_getXLHash(
     return aHash;
 }
 
-class ScTableProtectionImpl
-{
-public:
-    static ::com::sun::star::uno::Sequence<sal_Int8> hashPassword(const String& aPassText, ScPasswordHash eHash = PASSHASH_OOO);
-
-    explicit ScTableProtectionImpl(SCSIZE nOptSize);
-    explicit ScTableProtectionImpl(const ScTableProtectionImpl& r);
-
-    bool isProtected() const;
-    bool isProtectedWithPass() const;
-    void setProtected(bool bProtected);
-
-    bool isPasswordEmpty() const;
-    bool hasPasswordHash(ScPasswordHash eHash) const;
-    void setPassword(const String& aPassText);
-    ::com::sun::star::uno::Sequence<sal_Int8> getPasswordHash(ScPasswordHash eHash) const;
-    void setPasswordHash(const ::com::sun::star::uno::Sequence<sal_Int8>& aPassword, ScPasswordHash eHash = PASSHASH_OOO);
-    bool verifyPassword(const String& aPassText) const;
-    
-    bool isOptionEnabled(SCSIZE nOptId) const;
-    void setOption(SCSIZE nOptId, bool bEnabled);
-
-private:
-    String maPassText;
-    ::com::sun::star::uno::Sequence<sal_Int8>   maPassHash;
-    ::std::vector<bool> maOptions;
-    bool mbEmptyPass;
-    bool mbProtected;
-    ScPasswordHash meHash;
-};
-
 Sequence<sal_Int8> ScTableProtectionImpl::hashPassword(const String& aPassText, ScPasswordHash eHash)
 {
     Sequence<sal_Int8> aHash;
diff -upr /cygdrive/g/ooo-build/build/dev300-m40/sc/inc/dpsave.hxx sc/inc/dpsave.hxx
--- /cygdrive/g/ooo-build/build/dev300-m40/sc/inc/dpsave.hxx	2009-02-14 07:58:14.496000000 +0000
+++ sc/inc/dpsave.hxx	2009-02-13 16:46:54.746280000 +0000
@@ -135,44 +135,44 @@ public:
 
     void                    SetName( const String& rNew );  // used if the source dim was renamed (groups)
 
-    SC_DLLPUBLIC void					SetOrientation(USHORT nNew);
+    void					SetOrientation(USHORT nNew);
 	void					SetSubTotals(BOOL bSet);		// to be removed!
-    SC_DLLPUBLIC void					SetSubTotals(long nCount, const USHORT* pFuncs);
+    void					SetSubTotals(long nCount, const USHORT* pFuncs);
     long                    GetSubTotalsCount() const { return nSubTotalCount; }
     USHORT                  GetSubTotalFunc(long nIndex) const { return pSubTotalFuncs[nIndex]; }
-    SC_DLLPUBLIC void					SetShowEmpty(BOOL bSet);
+    void					SetShowEmpty(BOOL bSet);
     BOOL                    GetShowEmpty() const { return BOOL(nShowEmptyMode); }
-    SC_DLLPUBLIC void					SetFunction(USHORT nNew);		// enum GeneralFunction
+    void					SetFunction(USHORT nNew);		// enum GeneralFunction
     USHORT                  GetFunction() const { return nFunction; }
 	void					SetUsedHierarchy(long nNew);
     long                    GetUsedHierarchy() const { return nUsedHierarchy; }
 
-    SC_DLLPUBLIC void                    SetLayoutName(const ::rtl::OUString& rName);
-    SC_DLLPUBLIC const ::rtl::OUString*  GetLayoutName() const;
-    SC_DLLPUBLIC void                    RemoveLayoutName();
-    SC_DLLPUBLIC void                    SetSubtotalName(const ::rtl::OUString& rName);
-    SC_DLLPUBLIC const ::rtl::OUString*  GetSubtotalName() const;
+    void                    SetLayoutName(const ::rtl::OUString& rName);
+    const ::rtl::OUString*  GetLayoutName() const;
+    void                    RemoveLayoutName();
+    void                    SetSubtotalName(const ::rtl::OUString& rName);
+    const ::rtl::OUString*  GetSubtotalName() const;
 
     bool                    IsMemberNameInUse(const ::rtl::OUString& rName) const;
 
 	const ::com::sun::star::sheet::DataPilotFieldReference* GetReferenceValue() const	{ return pReferenceValue; }
-    SC_DLLPUBLIC void					SetReferenceValue(const ::com::sun::star::sheet::DataPilotFieldReference* pNew);
+    void					SetReferenceValue(const ::com::sun::star::sheet::DataPilotFieldReference* pNew);
 
     const ::com::sun::star::sheet::DataPilotFieldSortInfo* GetSortInfo() const          { return pSortInfo; }
-    SC_DLLPUBLIC void                    SetSortInfo(const ::com::sun::star::sheet::DataPilotFieldSortInfo* pNew);
+    void                    SetSortInfo(const ::com::sun::star::sheet::DataPilotFieldSortInfo* pNew);
     const ::com::sun::star::sheet::DataPilotFieldAutoShowInfo* GetAutoShowInfo() const  { return pAutoShowInfo; }
-    SC_DLLPUBLIC void                    SetAutoShowInfo(const ::com::sun::star::sheet::DataPilotFieldAutoShowInfo* pNew);
+    void                    SetAutoShowInfo(const ::com::sun::star::sheet::DataPilotFieldAutoShowInfo* pNew);
     const ::com::sun::star::sheet::DataPilotFieldLayoutInfo* GetLayoutInfo() const      { return pLayoutInfo; }
-    SC_DLLPUBLIC void                    SetLayoutInfo(const ::com::sun::star::sheet::DataPilotFieldLayoutInfo* pNew);
+    void                    SetLayoutInfo(const ::com::sun::star::sheet::DataPilotFieldLayoutInfo* pNew);
 
-    SC_DLLPUBLIC void					SetCurrentPage( const String* pPage );		// NULL = no selection (all)
-    SC_DLLPUBLIC BOOL					HasCurrentPage() const;
-    SC_DLLPUBLIC const String&			GetCurrentPage() const;
+    void					SetCurrentPage( const String* pPage );		// NULL = no selection (all)
+    BOOL					HasCurrentPage() const;
+    const String&			GetCurrentPage() const;
 
 	USHORT					GetOrientation() const	{ return nOrientation; }
 
 	ScDPSaveMember* 		GetExistingMemberByName(const String& rName);
-    SC_DLLPUBLIC ScDPSaveMember*			GetMemberByName(const String& rName);
+    ScDPSaveMember*			GetMemberByName(const String& rName);
 
     void                    SetMemberPosition( const String& rName, sal_Int32 nNewPos );
 
--- /cygdrive/g/ooo-build/build/dev300-m40/sc/inc/olinetab.hxx	2009-02-14 07:55:20.558500000 +0000
+++ sc/inc/olinetab.hxx	2009-02-13 16:40:08.386905000 +0000
@@ -111,7 +111,7 @@ public:
 
     ScOutlineEntry*         GetEntry( USHORT nLevel, USHORT nIndex ) const;
     USHORT                  GetCount( USHORT nLevel ) const;
-    SC_DLLPUBLIC ScOutlineEntry*         GetEntryByPos( USHORT nLevel, SCCOLROW nPos ) const;
+    ScOutlineEntry*         GetEntryByPos( USHORT nLevel, SCCOLROW nPos ) const;
 
     BOOL                    GetEntryIndex( USHORT nLevel, SCCOLROW nPos, USHORT& rnIndex ) const;
     BOOL                    GetEntryIndexInRange(
