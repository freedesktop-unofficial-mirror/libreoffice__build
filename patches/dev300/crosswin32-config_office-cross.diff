--- configure.in.orig	2008-10-19 21:05:46.000000000 +0200
+++ configure.in	2008-10-19 21:27:16.000000000 +0200
@@ -794,6 +794,11 @@ AC_ARG_ENABLE(verbose,
 [  --enable-verbose        Increase build verbosity.
   --disable-verbose       Decrease build verbosity.
 ],,)
+AC_ARG_WITH(tools-dir,
+[  --with-tools-dir        When cross compiling, specify solar tools
+                          directory.
+],[TOOLS_DIR=$withval],[TOOLS_DIR='$(SOLARBINDIR)'])
+AC_SUBST(TOOLS_DIR)
 
 BUILD_TYPE="OOo"
 
@@ -1035,6 +1035,21 @@ AC_SUBST(OSVERSION)
 AC_SUBST(PTHREAD_CFLAGS)
 AC_SUBST(PTHREAD_LIBS)
 
+case "$target_os" in
+	linux-gnu*)
+		t_os=Linux
+		;;
+	mingw32*)
+		t_os=MinGW
+		;;
+ 	solaris*)
+		t_os=SunOS
+		;;
+ 	*)
+		t_os=$_os
+		;;
+esac
+
 dnl ===================================================================
 dnl Set the ENABLE_CRASHDUMP variable.
 dnl ===================================================================
@@ -1649,6 +1651,27 @@ if test "$_os" = "OSF1"; then
    fi
 fi
 
+AC_CHECK_TOOL([AR], [ar], [:])
+AC_CHECK_TOOL([AS], [as], [:])
+AC_CHECK_TOOL([DLLTOOL], [dlltool], [:])
+AC_CHECK_TOOL([LD], [ld], [:])
+AC_CHECK_TOOL([NM], [nm], [:])
+AC_CHECK_TOOL([RANLIB], [ranlib], [:])
+AC_CHECK_TOOL([WINDRES], [windres], [:])
+
+BUILD_OS=$_os
+TARGET_OS=$t_os
+CROSS_COMPILING=$cross_compiling
+CC_FOR_BUILD=${CC_FOR_BUILD-cc}
+CCLD_FOR_BUILD=${CCLD_FOR_BUILD-${CC_FOR_BUILD}}
+LDFLAGS_FOR_BUILD=${LDFLAGS_FOR_BUILD-}
+AC_SUBST(BUILD_OS)
+AC_SUBST(TARGET_OS)
+AC_SUBST(CROSS_COMPILING)
+AC_SUBST(CC_FOR_BUILD)
+AC_SUBST(CCLD_FOR_BUILD)
+AC_SUBST(LDFLAGS_FOR_BUILD)
+
 dnl ===================================================================
 dnl Check whether there's a Perl version available.
 dnl ===================================================================
@@ -3735,14 +3740,11 @@ if test -n "$with_system_python" -o -n "
    AC_MSG_RESULT([external])
    AM_PATH_PYTHON([2.2])
 
-   python_include=`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('INCLUDEPY');"`
-   python_version=`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('VERSION');"`
-   PYTHON_CFLAGS="-I$python_include"
+   PYTHON_CFLAGS=`python-config --cflags`
+   PYTHON_LIBS=`python-config --libs`
 
    if test "$_os" = "Darwin"; then
       PYTHON_LIBS="-framework Python"
-   else
-      PYTHON_LIBS="-lpython$python_version"
    fi
    
    dnl check if the headers really work:
@@ -3798,7 +3800,7 @@ int main(int argc, char **argv) {
        if(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == $v) return 0;
        else return 1;
 }
-       ], [DB_VERSION_MINOR=$v], [])
+       ], [DB_VERSION_MINOR=$v], [], [DB_VERSION_MINOR=$ac_cv_db_version_minor])
     done
     if test "$DB_VERSION_MINOR" -gt "1"; then
        AC_MSG_RESULT([OK])
@@ -4396,7 +4398,7 @@ int main(int argc, char **argv) {
       else
         return 0;
 }
-      ], [AC_MSG_RESULT(OK)], [AC_MSG_ERROR([not suitable, only >= 4.0 supported currently])])
+      ], [AC_MSG_RESULT(OK)], [AC_MSG_ERROR([not suitable, only >= 4.0 supported currently])], [AC_MSG_RESULT($ac_cv_icu_version)])
       AC_LANG_POP([C++])
 else
     AC_MSG_RESULT([internal])
@@ -4519,7 +4521,7 @@ int main(int argc, char **argv) {
 	if(FC_MAJOR > 2 || (FC_MAJOR == 2 && FC_MINOR >= 2)) return 0;
 	else return 1;
 }
-], [AC_MSG_RESULT([yes])], [AC_MSG_ERROR([no, fontconfig >= 2.2.0 needed])])
+], [AC_MSG_RESULT([yes])], [AC_MSG_ERROR([no, fontconfig >= 2.2.0 needed])], [AC_MSG_RESULT(possibly - should use pkg-config instead of home-brew checks)])
 fi
 
 dnl ===================================================================
@@ -4638,7 +4638,7 @@ AC_SUBST(SYSTEM_LPSOLVE)
 dnl ***************************************
 dnl testing libc version for Linux...
 dnl ***************************************
-if test "$_os" = "Linux"; then
+if test "$_os" = "Linux" -a "$cross_compiling" = "no"; then
    AC_MSG_CHECKING([whether libc is >= 2.1.1])
    exec 6>/dev/null # no output
    AC_CHECK_LIB(c, gnu_get_libc_version, HAVE_LIBC=yes; export HAVE_LIBC)
--- acinclude.m4.orig	2008-10-19 21:29:43.000000000 +0200
+++ acinclude.m4	2008-10-19 21:29:51.000000000 +0200
@@ -136,3 +136,24 @@ AC_DEFUN([PKG_CHECK_MODULES_MACHACK],
    PKG_CHECK_MODULES($1, $3, $4, $5, $6)
  fi
 ])
+
+## ------------------------------------- ##
+## Checking for the existence of files.  ##
+## ------------------------------------- ##
+
+# AC_CHECK_FILE_CROSS(FILE, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
+# -------------------------------------------------------------
+#
+# Check for the existence of FILE; remove assertion on not cross-compiliing
+AC_DEFUN([AC_CHECK_FILE_CROSS],
+[
+AS_VAR_PUSHDEF([ac_File], [ac_cv_file_$1])dnl
+AC_CACHE_CHECK([for $1], [ac_File],
+if test -r "$1"; then
+  AS_VAR_SET([ac_File], [yes])
+else
+  AS_VAR_SET([ac_File], [no])
+fi)
+AS_IF([test AS_VAR_GET([ac_File]) = yes], [$2], [$3])[]dnl
+AS_VAR_POPDEF([ac_File])dnl
+])# AC_CHECK_FILE_CROSS
--- bootstrap.1.orig	2008-10-19 23:24:01.000000000 +0200
+++ bootstrap.1	2008-10-19 23:22:49.000000000 +0200
@@ -1,7 +1,7 @@
 
 # executables are *.exe for WNT. This variable is necessary since Cygwin 1.5.x
 # Use spawn instead of fork when building dmake on cygwin. 
-if test "$GUI" = "WNT"; then
+if test "$GUI" = "WNT" -a "$CROSS_COMPILING" != "yes"; then
     EXEEXT=".exe"
     DMAKE_CONF="--enable-spawn"
 else
@@ -36,6 +36,14 @@ if test "$BUILD_DMAKE" != "NO"; then
             $GNUMAKE distclean || exit
         fi
 
+        # When cross compiling, use native compiler
+	if test -n "$CC_FOR_BUILD"; then
+            CC=$CC_FOR_BUILD
+            export CC
+            LDFLAGS=$LDFLAGS_FOR_BUILD
+            export LDFLAGS
+	fi
+
         ./configure $DMAKE_CONF || exit
 
         ## invoke the gnu make command set by configure.
@@ -62,7 +70,7 @@ if test "$BUILD_DMAKE" != "NO"; then
     echo "dmake copied to $SOLARENV/$OUTPATH/bin/dmake$EXEEXT"
 fi
 
-if test "$GUI" = "WNT" -a ! -x "$SOLARENV/$OUTPATH/bin/guw$EXEEXT"; then
+if test "$GUI" = "WNT" -a ! -x "$SOLARENV/$OUTPATH/bin/guw$EXEEXT" -a "$CROSS_COMPILING" != "yes"; then
   echo ""
   echo "Calling $GNUMAKE in guw"
   cd "$SRC_ROOT/config_office/guw" || exit
--- set_soenv.in.orig	2008-10-20 19:52:27.000000000 +0200
+++ set_soenv.in	2008-10-20 21:38:02.000000000 +0200
@@ -1194,8 +1210,11 @@ if ($platform =~ m/cygwin|os2/)
 # The general environment path.
 if ($platform =~ m/linux|netbsd|odf1|irix|freebsd|aix|solaris/)
 {  $PATH              = $cur_dir.
-                        $ps.'$SOLARVER'.$ds.'$INPATH'.$BIN.
-                        $ps.'$SOLARENV'.$ds.'$OUTPATH'.$BIN.
+                        $ps.'$SOLARVER'.$ds.'$INPATH'.$BIN;
+   if ("@CROSS_COMPILING@" == "yes") {
+        $PATH .=        $ps.'@TOOLS_DIR@';
+   }
+   $PATH .=             $ps.'$SOLARENV'.$ds.'$OUTPATH'.$BIN.
                         $ps.'$SOLARENV'.$BIN;
 
    if ($platform =~ m/solaris/) {
@@ -1847,6 +1847,20 @@ ToFile( "SOLAR_JAVA",        $SOLAR_JAVA
 ToFile( "BIG_SVX",           $BIG_SVX,           "e" );
 ToFile( "COM",               $COM,               "e" );
 ToFile( "COMPATH",           $COMPATH,           "e" );
+ToFile( "BUILD_OS",          "@BUILD_OS@",       "e" );
+ToFile( "TARGET_OS",         "@TARGET_OS@",      "e" );
+ToFile( "CROSS_COMPILING",   "@CROSS_COMPILING@", "e" );
+ToFile( "CC_FOR_BUILD",      "@CC_FOR_BUILD@",   "e" );
+ToFile( "CCLD_FOR_BUILD",    "@CCLD_FOR_BUILD@", "e" );
+ToFile( "LDFLAGS_FOR_BUILD", "@LDFLAGS_FOR_BUILD@", "e" );
+ToFile( "AR",                "@AR@",             "e" );
+ToFile( "AS",                "@AS@",             "e" );
+ToFile( "DLLTOOL",           "@DLLTOOL@",        "e" );
+ToFile( "LD",                "@LD@",             "e" );
+ToFile( "NM",                "@NM@",             "e" );
+ToFile( "RANLIB",            "@RANLIB@",         "e" );
+ToFile( "WINDRES",           "@WINDRES@",         "e" );
+ToFile( "TOOLS_DIR",         "@TOOLS_DIR@",      "e" );
 ToFile( "CPU",               $CPU,               "e" );
 ToFile( "CPUNAME",           $CPUNAME,           "e" );
 ToFile( "CVER",              $CVER,              "e" );
