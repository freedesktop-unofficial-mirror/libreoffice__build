diff --git sc/source/core/data/dptabres.cxx sc/source/core/data/dptabres.cxx
index e53ecb9..3e8fa12 100644
--- sc/source/core/data/dptabres.cxx
+++ sc/source/core/data/dptabres.cxx
@@ -1186,20 +1186,28 @@ void ScDPResultMember::ProcessData( const vector<ScDPItemData>& aChildMembers, c
 }
 
 /** 
- * Parse subtotal string and replace all occurrences of '?' with the 
- * caption string. 
+ * Parse subtotal string and replace all occurrences of '?' with the caption
+ * string.  Do ensure that escaped characters are not translated.
  */ 
 static String lcl_parseSubtotalName(const String& rSubStr, const String& rCaption)
 {
     String aNewStr;
     xub_StrLen n = rSubStr.Len();
+    bool bEscaped = false;
     for (xub_StrLen i = 0; i < n; ++i)
     {
         sal_Unicode c = rSubStr.GetChar(i);
-        if (c == sal_Unicode('?'))
+        if (!bEscaped && c == sal_Unicode('\\'))
+        {
+            bEscaped = true;
+            continue;
+        }
+
+        if (!bEscaped && c == sal_Unicode('?'))
             aNewStr.Append(rCaption);
         else
             aNewStr.Append(c);
+        bEscaped = false;
     }
     return aNewStr;
 }
diff --git sc/source/filter/excel/xepivot.cxx sc/source/filter/excel/xepivot.cxx
index 0d43d06..043db4d 100644
--- sc/source/filter/excel/xepivot.cxx
+++ sc/source/filter/excel/xepivot.cxx
@@ -1035,6 +1035,31 @@ sal_uInt16 XclExpPTField::GetItemIndex( const String& rName, sal_uInt16 nDefault
 
 // fill data --------------------------------------------------------------
 
+/** 
+ * Calc's subtotal names are escaped with backslashes ('\'), while Excel's 
+ * are not escaped at all. 
+ */
+static OUString lcl_convertCalcSubtotalName(const OUString& rName)
+{
+    OUStringBuffer aBuf;
+    const sal_Unicode* p = rName.getStr();
+    sal_Int32 n = rName.getLength();
+    bool bEscaped = false;
+    for (sal_Int32 i = 0; i < n; ++i)
+    {
+        const sal_Unicode c = p[i];
+        if (!bEscaped && c == sal_Unicode('\\'))
+        {
+            bEscaped = true;
+            continue;
+        }
+
+        aBuf.append(c);
+        bEscaped = false;
+    }
+    return aBuf.makeStringAndClear();
+}
+
 void XclExpPTField::SetPropertiesFromDim( const ScDPSaveDimension& rSaveDim )
 {
     // orientation
@@ -1052,7 +1077,10 @@ void XclExpPTField::SetPropertiesFromDim( const ScDPSaveDimension& rSaveDim )
 
     const rtl::OUString* pSubtotalName = rSaveDim.GetSubtotalName();
     if (pSubtotalName)
-        maFieldExtInfo.mpFieldTotalName.reset(new rtl::OUString(*pSubtotalName));
+    {
+        OUString aSubName = lcl_convertCalcSubtotalName(*pSubtotalName);
+        maFieldExtInfo.mpFieldTotalName.reset(new rtl::OUString(aSubName));
+    }
 
     // subtotals
     XclPTSubtotalVec aSubtotals;
diff --git sc/source/filter/excel/xipivot.cxx sc/source/filter/excel/xipivot.cxx
index fd85060..8f290c8 100644
--- sc/source/filter/excel/xipivot.cxx
+++ sc/source/filter/excel/xipivot.cxx
@@ -65,6 +65,7 @@
 #include <vector>
 
 using ::rtl::OUString;
+using ::rtl::OUStringBuffer;
 using ::com::sun::star::sheet::DataPilotFieldOrientation;
 using ::com::sun::star::sheet::DataPilotFieldOrientation_DATA;
 using ::com::sun::star::sheet::DataPilotFieldSortInfo;
@@ -1034,6 +1035,28 @@ void XclImpPTField::ConvertDataField( ScDPSaveData& rSaveData ) const
 
 // private --------------------------------------------------------------------
 
+/** 
+ * Convert Excel-encoded subtotal name to a Calc-encoded one.  
+ */
+static OUString lcl_convertExcelSubtotalName(const OUString& rName)
+{
+    OUStringBuffer aBuf;
+    const sal_Unicode* p = rName.getStr();
+    sal_Int32 n = rName.getLength();
+    for (sal_Int32 i = 0; i < n; ++i)
+    {
+        const sal_Unicode c = p[i];
+        if (c == sal_Unicode('\\'))
+        {
+            aBuf.append(c);
+            aBuf.append(c);
+        }
+        else
+            aBuf.append(c);
+    }
+    return aBuf.makeStringAndClear();
+}
+
 ScDPSaveDimension* XclImpPTField::ConvertRCPField( ScDPSaveData& rSaveData ) const
 {
     const String& rFieldName = GetFieldName();
@@ -1089,7 +1112,10 @@ ScDPSaveDimension* XclImpPTField::ConvertRCPField( ScDPSaveData& rSaveData ) con
 
     // custom subtotal name
     if (maFieldExtInfo.mpFieldTotalName.get())
-        rSaveDim.SetSubtotalName(*maFieldExtInfo.mpFieldTotalName);
+    {
+        OUString aSubName = lcl_convertExcelSubtotalName(*maFieldExtInfo.mpFieldTotalName);
+        rSaveDim.SetSubtotalName(aSubName);
+    }
 
     return &rSaveDim;
 }
diff --git sc/source/filter/xml/XMLExportDataPilot.cxx sc/source/filter/xml/XMLExportDataPilot.cxx
index 0227b44..a06ddb2 100644
--- sc/source/filter/xml/XMLExportDataPilot.cxx
+++ sc/source/filter/xml/XMLExportDataPilot.cxx
@@ -68,6 +68,7 @@
 
 using namespace com::sun::star;
 using namespace xmloff::token;
+using ::rtl::OUString;
 
 ScXMLExportDataPilot::ScXMLExportDataPilot(ScXMLExport& rTempExport)
 	: rExport(rTempExport),
@@ -456,7 +457,10 @@ void ScXMLExportDataPilot::WriteLayoutInfo(ScDPSaveDimension* pDim)
 
 void ScXMLExportDataPilot::WriteSubTotals(ScDPSaveDimension* pDim)
 {
+    using sheet::GeneralFunction;
+
 	sal_Int32 nSubTotalCount = pDim->GetSubTotalsCount();
+    const OUString* pLayoutName = pDim->GetSubtotalName();
 	if (nSubTotalCount > 0)
 	{
 		SvXMLElementExport aElemSTs(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_SUBTOTALS, sal_True, sal_True);
@@ -464,8 +468,11 @@ void ScXMLExportDataPilot::WriteSubTotals(ScDPSaveDimension* pDim)
 		for (sal_Int32 nSubTotal = 0; nSubTotal < nSubTotalCount; nSubTotal++)
 		{
 			rtl::OUString sFunction;
-			ScXMLConverter::GetStringFromFunction( sFunction, (sheet::GeneralFunction)pDim->GetSubTotalFunc(nSubTotal) );
+            GeneralFunction nFunc = static_cast<GeneralFunction>(pDim->GetSubTotalFunc(nSubTotal));
+			ScXMLConverter::GetStringFromFunction( sFunction, nFunc);
 			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FUNCTION, sFunction);
+            if (pLayoutName && nFunc == sheet::GeneralFunction_AUTO)
+                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_NAME, *pLayoutName);
 			SvXMLElementExport aElemST(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_SUBTOTAL, sal_True, sal_True);
 		}
 	}
@@ -481,6 +488,9 @@ void ScXMLExportDataPilot::WriteMembers(ScDPSaveDimension* pDim)
 		for (ScDPSaveDimension::MemberList::const_iterator i=rMembers.begin(); i != rMembers.end() ; i++)
 		{
 			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rtl::OUString((*i)->GetName()));
+            const OUString* pLayoutName = (*i)->GetLayoutName();
+            if (pLayoutName)
+                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_NAME, *pLayoutName);
 			rtl::OUStringBuffer sBuffer;
 			SvXMLUnitConverter::convertBool(sBuffer, (*i)->GetIsVisible());
 			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, sBuffer.makeStringAndClear());
@@ -678,6 +688,10 @@ void ScXMLExportDataPilot::WriteGroupDimElements(ScDPSaveDimension* pDim, const
 void ScXMLExportDataPilot::WriteDimension(ScDPSaveDimension* pDim, const ScDPDimensionSaveData* pDimData)
 {
 	rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SOURCE_FIELD_NAME, rtl::OUString(pDim->GetName()));
+    const OUString* pLayoutName = pDim->GetLayoutName();
+    if (pLayoutName)
+        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_NAME, *pLayoutName);
+
 	if (pDim->IsDataLayout())
 		rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_IS_DATA_LAYOUT_FIELD, XML_TRUE);
 	rtl::OUString sValueStr;
@@ -714,6 +728,15 @@ void ScXMLExportDataPilot::WriteDimensions(ScDPSaveData* pDPSave)
 	}
 }
 
+void ScXMLExportDataPilot::WriteGrandTotal(::xmloff::token::XMLTokenEnum eOrient, bool bVisible, const OUString* pGrandTotal)
+{
+    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, bVisible ? XML_TRUE : XML_FALSE);
+    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ORIENTATION, eOrient);
+    if (pGrandTotal)
+        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_NAME, *pGrandTotal);
+    SvXMLElementExport aElemGrandTotal(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_GRAND_TOTAL, sal_True, sal_True);
+}
+
 void ScXMLExportDataPilot::WriteDataPilots(const uno::Reference <sheet::XSpreadsheetDocument>& /* xSpreadDoc */)
 {
 	pDoc = rExport.GetDocument();
@@ -784,6 +807,20 @@ void ScXMLExportDataPilot::WriteDataPilots(const uno::Reference <sheet::XSpreads
                         if ((*pDPs)[i]->GetHeaderLayout ())
                             rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_HEADER_GRID_LAYOUT, XML_TRUE);
 						SvXMLElementExport aElemDP(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_TABLE, sal_True, sal_True);
+
+                        // grand total elements.
+
+                        const OUString* pGrandTotalName = pDPSave->GetGrandTotalName();
+                        if (bRowGrand && bColumnGrand)
+                        {
+                            WriteGrandTotal(XML_BOTH, true, pGrandTotalName);
+                        }
+                        else
+                        {
+                            WriteGrandTotal(XML_ROW, bRowGrand, pGrandTotalName);
+                            WriteGrandTotal(XML_COLUMN, bColumnGrand, pGrandTotalName);
+                        }
+
 						rExport.CheckAttrList();
 						if ((*pDPs)[i]->IsSheetData())
 						{
diff --git sc/source/filter/xml/XMLExportDataPilot.hxx sc/source/filter/xml/XMLExportDataPilot.hxx
index 2274d8c..881e29b 100644
--- sc/source/filter/xml/XMLExportDataPilot.hxx
+++ sc/source/filter/xml/XMLExportDataPilot.hxx
@@ -34,6 +34,7 @@
 #include <com/sun/star/sheet/XSpreadsheetDocument.hpp>
 #include <rtl/ustring.hxx>
 #include "global.hxx"
+#include "xmloff/xmltoken.hxx"
 
 class ScXMLExport;
 class ScDocument;
@@ -69,6 +70,8 @@ class ScXMLExportDataPilot
     void WriteDimension(ScDPSaveDimension* pDim, const ScDPDimensionSaveData* pDimData);
     void WriteDimensions(ScDPSaveData* pDPSave);
 
+    void WriteGrandTotal(::xmloff::token::XMLTokenEnum eOrient, bool bVisible, const ::rtl::OUString* pGrandTotal);
+
 public:
 	ScXMLExportDataPilot(ScXMLExport& rExport);
 	~ScXMLExportDataPilot();
diff --git sc/source/filter/xml/xmldpimp.cxx sc/source/filter/xml/xmldpimp.cxx
index de4c7ca..cc51364 100644
--- sc/source/filter/xml/xmldpimp.cxx
+++ sc/source/filter/xml/xmldpimp.cxx
@@ -66,6 +66,8 @@
 
 using namespace com::sun::star;
 using namespace xmloff::token;
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::xml::sax::XAttributeList;
 using ::rtl::OUString;
 
 //------------------------------------------------------------------
@@ -114,6 +116,9 @@ void ScXMLDataPilotTablesContext::EndElement()
 {
 }
 
+ScXMLDataPilotTableContext::GrandTotalItem::GrandTotalItem() :
+    mbVisible(false) {}
+
 ScXMLDataPilotTableContext::ScXMLDataPilotTableContext( ScXMLImport& rImport,
 									  USHORT nPrfx,
 									  const ::rtl::OUString& rLName,
@@ -165,6 +170,19 @@ ScXMLDataPilotTableContext::ScXMLDataPilotTableContext( ScXMLImport& rImport,
 			case XML_TOK_DATA_PILOT_TABLE_ATTR_GRAND_TOTAL :
 			{
 				sGrandTotal = sValue;
+                if (IsXMLToken(sValue, XML_BOTH))
+                {    
+                    maRowGrandTotal.mbVisible = true;
+                    maColGrandTotal.mbVisible = true;
+                }
+                else if (IsXMLToken(sValue, XML_ROW))
+                {    
+                    maRowGrandTotal.mbVisible = true;
+                }
+                else if (IsXMLToken(sValue, XML_COLUMN))
+                {    
+                    maColGrandTotal.mbVisible = true;
+                }
 			}
 			break;
 			case XML_TOK_DATA_PILOT_TABLE_ATTR_IGNORE_EMPTY_ROWS :
@@ -249,6 +267,11 @@ SvXMLImportContext *ScXMLDataPilotTableContext::CreateChildContext( USHORT nPref
 			nSourceType = SERVICE;
 		}
 		break;
+        case XML_TOK_DATA_PILOT_TABLE_ELEM_GRAND_TOTAL:
+        {
+            pContext = new ScXMLDataPilotGrandTotalContext(GetScImport(), nPrefix, rLName, xAttrList, this);
+        }
+        break;
 		case XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_CELL_RANGE :
 		{
 			pContext = new ScXMLSourceCellRangeContext(GetScImport(), nPrefix, rLName, xAttrList, this);
@@ -417,26 +440,15 @@ void ScXMLDataPilotTableContext::EndElement()
 			}
 			break;
 		}
-		if (IsXMLToken(sGrandTotal, XML_BOTH))
-		{
-			pDPSave->SetRowGrand(sal_True);
-			pDPSave->SetColumnGrand(sal_True);
-		}
-		else if (IsXMLToken(sGrandTotal, XML_ROW))
-		{
-			pDPSave->SetRowGrand(sal_True);
-			pDPSave->SetColumnGrand(sal_False);
-		}
-		else if (IsXMLToken(sGrandTotal, XML_COLUMN))
-		{
-			pDPSave->SetRowGrand(sal_False);
-			pDPSave->SetColumnGrand(sal_True);
-		}
-		else
-		{
-			pDPSave->SetRowGrand(sal_False);
-			pDPSave->SetColumnGrand(sal_False);
-		}
+
+        pDPSave->SetRowGrand(maRowGrandTotal.mbVisible);
+        pDPSave->SetColumnGrand(maColGrandTotal.mbVisible);
+        if (maRowGrandTotal.maDisplayName.getLength())
+            // TODO: Right now, we only support one grand total name for both 
+            // column and row totals.  Take the value from the row total for
+            // now.
+            pDPSave->SetGrandTotalName(maRowGrandTotal.maDisplayName);
+
 		pDPSave->SetIgnoreEmptyRows(bIgnoreEmptyRows);
 		pDPSave->SetRepeatIfEmpty(bIdentifyCategories);
         pDPSave->SetFilterButton(bShowFilter);
@@ -454,6 +466,30 @@ void ScXMLDataPilotTableContext::EndElement()
 	}
 }
 
+void ScXMLDataPilotTableContext::SetGrandTotal(
+    XMLTokenEnum eOrientation, bool bVisible, const OUString& rDisplayName)
+{
+    switch (eOrientation)
+    {
+        case XML_BOTH:
+            maRowGrandTotal.mbVisible     = bVisible;
+            maRowGrandTotal.maDisplayName = rDisplayName;
+            maColGrandTotal.mbVisible     = bVisible;
+            maColGrandTotal.maDisplayName = rDisplayName;
+        break;
+        case XML_ROW:
+            maRowGrandTotal.mbVisible     = bVisible;
+            maRowGrandTotal.maDisplayName = rDisplayName;
+        break;
+        case XML_COLUMN:
+            maColGrandTotal.mbVisible     = bVisible;
+            maColGrandTotal.maDisplayName = rDisplayName;
+        break;
+        default:
+            ;
+    }
+}
+
 ScXMLDPSourceSQLContext::ScXMLDPSourceSQLContext( ScXMLImport& rImport,
 									  USHORT nPrfx,
 									  const ::rtl::OUString& rLName,
@@ -698,6 +734,80 @@ void ScXMLSourceServiceContext::EndElement()
 {
 }
 
+ScXMLImport& ScXMLDataPilotGrandTotalContext::GetScImport()
+{
+    return static_cast<ScXMLImport&>(GetImport());
+}
+
+ScXMLDataPilotGrandTotalContext::ScXMLDataPilotGrandTotalContext(
+    ScXMLImport& rImport, USHORT nPrefix, const OUString& rLName, const Reference<XAttributeList>& xAttrList,
+    ScXMLDataPilotTableContext* pTableContext ) :
+    SvXMLImportContext( rImport, nPrefix, rLName ),
+    mpTableContext(pTableContext),
+    meOrientation(NONE),
+    mbVisible(false)
+{
+    sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
+    const SvXMLTokenMap& rAttrTokenMap = GetScImport().GetDataPilotGrandTotalAttrTokenMap();
+    for (sal_Int16 i = 0; i < nAttrCount; ++i)
+    {
+        const OUString& rAttrName  = xAttrList->getNameByIndex(i);
+        const OUString& rAttrValue = xAttrList->getValueByIndex(i);
+
+        OUString aLocalName;
+        USHORT nLocalPrefix = GetScImport().GetNamespaceMap().GetKeyByAttrName(rAttrName, &aLocalName);
+        switch (rAttrTokenMap.Get(nLocalPrefix, aLocalName))
+        {
+            case XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_DISPLAY:
+                mbVisible = IsXMLToken(rAttrValue, XML_TRUE);
+            break;
+            case XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_ORIENTATION:
+                if (IsXMLToken(rAttrValue, XML_BOTH))
+                    meOrientation = BOTH;
+                else if (IsXMLToken(rAttrValue, XML_ROW))
+                    meOrientation = ROW;
+                else if (IsXMLToken(rAttrValue, XML_COLUMN))
+                    meOrientation = COLUMN;
+            break;
+            case XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_DISPLAY_NAME:
+                maDisplayName = rAttrValue;
+            break;
+            default:
+                ;
+        }
+    }
+}
+
+ScXMLDataPilotGrandTotalContext::~ScXMLDataPilotGrandTotalContext()
+{
+}
+
+SvXMLImportContext* ScXMLDataPilotGrandTotalContext::CreateChildContext( 
+    USHORT nPrefix, const ::rtl::OUString& rLocalName, const Reference<XAttributeList>& xAttrList )
+{
+    return NULL;
+}
+
+void ScXMLDataPilotGrandTotalContext::EndElement()
+{
+    XMLTokenEnum eOrient = XML_NONE;
+    switch (meOrientation)
+    {
+        case BOTH:
+            eOrient = XML_BOTH;
+        break;
+        case ROW:
+            eOrient = XML_ROW;
+        break;
+        case COLUMN:
+            eOrient = XML_COLUMN;
+        break;
+        default:
+            ;
+    }
+    mpTableContext->SetGrandTotal(eOrient, mbVisible, maDisplayName);
+}
+
 ScXMLSourceCellRangeContext::ScXMLSourceCellRangeContext( ScXMLImport& rImport,
 									  USHORT nPrfx,
 									  const ::rtl::OUString& rLName,
@@ -783,6 +893,7 @@ ScXMLDataPilotFieldContext::ScXMLDataPilotFieldContext( ScXMLImport& rImport,
 {
 	sal_Bool bHasName(sal_False);
 	sal_Bool bDataLayout(sal_False);
+    OUString aDisplayName;
 	sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
 	const SvXMLTokenMap& rAttrTokenMap = GetScImport().GetDataPilotFieldAttrTokenMap();
 	for( sal_Int16 i=0; i < nAttrCount; ++i )
@@ -801,6 +912,11 @@ ScXMLDataPilotFieldContext::ScXMLDataPilotFieldContext( ScXMLImport& rImport,
 				bHasName = sal_True;
 			}
 			break;
+            case XML_TOK_DATA_PILOT_FIELD_ATTR_DISPLAY_NAME:
+            {
+                aDisplayName = sValue;
+            }
+            break;
 			case XML_TOK_DATA_PILOT_FIELD_ATTR_IS_DATA_LAYOUT_FIELD :
 			{
 				bDataLayout = IsXMLToken(sValue, XML_TRUE);
@@ -830,7 +946,11 @@ ScXMLDataPilotFieldContext::ScXMLDataPilotFieldContext( ScXMLImport& rImport,
 		}
 	}
 	if (bHasName)
+    {    
 		pDim = new ScDPSaveDimension(String(sName), bDataLayout);
+        if (aDisplayName.getLength())
+            pDim->SetLayoutName(aDisplayName);
+    }
 }
 
 ScXMLDataPilotFieldContext::~ScXMLDataPilotFieldContext()
@@ -864,6 +984,12 @@ SvXMLImportContext *ScXMLDataPilotFieldContext::CreateChildContext( USHORT nPref
 	return pContext;
 }
 
+void ScXMLDataPilotFieldContext::SetSubTotalName(const OUString& rName)
+{
+    if (pDim)
+        pDim->SetSubtotalName(rName);
+}
+
 void ScXMLDataPilotFieldContext::AddMember(ScDPSaveMember* pMember)
 {
     if (pDim)
@@ -1265,6 +1391,8 @@ SvXMLImportContext *ScXMLDataPilotSubTotalsContext::CreateChildContext( USHORT n
 void ScXMLDataPilotSubTotalsContext::EndElement()
 {
 	pDataPilotField->SetSubTotals(pFunctions, nFunctionCount);
+    if (maDisplayName.getLength())
+        pDataPilotField->SetSubTotalName(maDisplayName);
 }
 
 void ScXMLDataPilotSubTotalsContext::AddFunction(sal_Int16 nFunction)
@@ -1287,6 +1415,11 @@ void ScXMLDataPilotSubTotalsContext::AddFunction(sal_Int16 nFunction)
 	}
 }
 
+void ScXMLDataPilotSubTotalsContext::SetDisplayName(const OUString& rName)
+{
+    maDisplayName = rName;
+}
+
 ScXMLDataPilotSubTotalContext::ScXMLDataPilotSubTotalContext( ScXMLImport& rImport,
 									  USHORT nPrfx,
 									  const ::rtl::OUString& rLName,
@@ -1313,6 +1446,8 @@ ScXMLDataPilotSubTotalContext::ScXMLDataPilotSubTotalContext( ScXMLImport& rImpo
                 pDataPilotSubTotals->AddFunction( sal::static_int_cast<sal_Int16>(
                                 ScXMLConverter::GetFunctionFromString( sValue ) ) );
 			}
+            case XML_TOK_DATA_PILOT_SUBTOTAL_ATTR_DISPLAY_NAME:
+                pDataPilotSubTotals->SetDisplayName(sValue);
 			break;
 		}
 	}
@@ -1410,6 +1545,10 @@ ScXMLDataPilotMemberContext::ScXMLDataPilotMemberContext( ScXMLImport& rImport,
                 bHasName = sal_True;
 			}
 			break;
+            case XML_TOK_DATA_PILOT_MEMBER_ATTR_DISPLAY_NAME:
+            {
+                maDisplayName = sValue;
+            }
 			case XML_TOK_DATA_PILOT_MEMBER_ATTR_DISPLAY :
 			{
 				bDisplay = IsXMLToken(sValue, XML_TRUE);
@@ -1446,6 +1585,8 @@ void ScXMLDataPilotMemberContext::EndElement()
     if (bHasName)   // #i53407# don't check sName, empty name is allowed
 	{
 		ScDPSaveMember* pMember = new ScDPSaveMember(String(sName));
+        if (maDisplayName.getLength())
+            pMember->SetLayoutName(maDisplayName);
 		pMember->SetIsVisible(bDisplay);
 		pMember->SetShowDetails(bDisplayDetails);
 		pDataPilotField->AddMember(pMember);
diff --git sc/source/filter/xml/xmldpimp.hxx sc/source/filter/xml/xmldpimp.hxx
index ac52bc3..8f42bf1 100644
--- sc/source/filter/xml/xmldpimp.hxx
+++ sc/source/filter/xml/xmldpimp.hxx
@@ -83,10 +83,19 @@ class ScXMLDataPilotTableContext : public SvXMLImportContext
 {
     typedef ::std::hash_set< ::rtl::OUString, ::rtl::OUStringHash > StringSet;
     StringSet       maHiddenMemberFields;
+
+    struct GrandTotalItem
+    {
+        ::rtl::OUString maDisplayName;
+        bool            mbVisible;
+        GrandTotalItem();
+    };
 	ScDocument*		pDoc;
 	ScDPObject*		pDPObject;
 	ScDPSaveData*	pDPSave;
     ScDPDimensionSaveData* pDPDimSaveData;
+    GrandTotalItem  maRowGrandTotal;
+    GrandTotalItem  maColGrandTotal;
 	rtl::OUString	sDataPilotTableName;
 	rtl::OUString	sApplicationData;
 	rtl::OUString	sGrandTotal;
@@ -140,6 +149,7 @@ public:
 
 	virtual void EndElement();
 
+    void SetGrandTotal(::xmloff::token::XMLTokenEnum eOrientation, bool bVisible, const ::rtl::OUString& rDisplayName);
 	void SetDatabaseName(const rtl::OUString& sValue) { sDatabaseName = sValue; }
 	void SetSourceObject(const rtl::OUString& sValue) { sSourceObject = sValue; }
 	void SetNative(const sal_Bool bValue) { bIsNative = bValue; }
@@ -262,6 +272,34 @@ public:
 	virtual void EndElement();
 };
 
+class ScXMLDataPilotGrandTotalContext : public SvXMLImportContext
+{
+    enum Orientation { COLUMN, ROW, BOTH, NONE };
+
+    ScXMLImport& GetScImport();
+
+    ScXMLDataPilotTableContext* mpTableContext;
+    ::rtl::OUString             maDisplayName;
+    Orientation                 meOrientation;
+    bool                        mbVisible;
+    
+public:
+    ScXMLDataPilotGrandTotalContext( 
+        ScXMLImport& rImport, USHORT nPrefix, const ::rtl::OUString& rLName,
+        const ::com::sun::star::uno::Reference< 
+            ::com::sun::star::xml::sax::XAttributeList>& xAttrList,
+        ScXMLDataPilotTableContext* pTableContext );
+
+    virtual ~ScXMLDataPilotGrandTotalContext();
+
+    virtual SvXMLImportContext *CreateChildContext( USHORT nPrefix,
+                                     const ::rtl::OUString& rLocalName,
+                                     const ::com::sun::star::uno::Reference<
+                                        ::com::sun::star::xml::sax::XAttributeList>& xAttrList );
+
+    virtual void EndElement();
+};
+
 class ScXMLSourceCellRangeContext : public SvXMLImportContext
 {
 	ScXMLDataPilotTableContext*	pDataPilotTable;
@@ -339,6 +377,7 @@ public:
 
 	void SetShowEmpty(const sal_Bool bValue) { if (pDim) pDim->SetShowEmpty(bValue); }
 	void SetSubTotals(const sal_uInt16* pFunctions, const sal_Int16 nCount) { if(pDim) pDim->SetSubTotals(nCount, pFunctions); }
+    void SetSubTotalName(const ::rtl::OUString& rName);
 	void AddMember(ScDPSaveMember* pMember);
     void SetFieldReference(const com::sun::star::sheet::DataPilotFieldReference& aRef) { if (pDim) pDim->SetReferenceValue(&aRef); }
     void SetAutoShowInfo(const com::sun::star::sheet::DataPilotFieldAutoShowInfo& aInfo) { if (pDim) pDim->SetAutoShowInfo(&aInfo); }
@@ -463,6 +502,7 @@ class ScXMLDataPilotSubTotalsContext : public SvXMLImportContext
 
 	sal_Int16	nFunctionCount;
 	sal_uInt16*	pFunctions;
+    ::rtl::OUString maDisplayName;
 
 	const ScXMLImport& GetScImport() const { return (const ScXMLImport&)GetImport(); }
 	ScXMLImport& GetScImport() { return (ScXMLImport&)GetImport(); }
@@ -486,6 +526,7 @@ public:
 
 	virtual void EndElement();
 	void AddFunction(sal_Int16 nFunction);
+    void SetDisplayName(const ::rtl::OUString& rName);
 };
 
 class ScXMLDataPilotSubTotalContext : public SvXMLImportContext
@@ -543,6 +584,7 @@ class ScXMLDataPilotMemberContext : public SvXMLImportContext
 	ScXMLDataPilotFieldContext*	pDataPilotField;
 
 	rtl::OUString sName;
+    rtl::OUString maDisplayName;
 	sal_Bool	bDisplay;
 	sal_Bool	bDisplayDetails;
     sal_Bool    bHasName;
diff --git sc/source/filter/xml/xmlimprt.cxx sc/source/filter/xml/xmlimprt.cxx
index 728373e..952afcd 100644
--- sc/source/filter/xml/xmlimprt.cxx
+++ sc/source/filter/xml/xmlimprt.cxx
@@ -1413,6 +1413,7 @@ const SvXMLTokenMap& ScXMLImport::GetDataPilotTableElemTokenMap()
         {
             { XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_SQL,	XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_SQL		},
             { XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_TABLE,	XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_TABLE		},
+            { XML_NAMESPACE_TABLE, XML_DATA_PILOT_GRAND_TOTAL,  XML_TOK_DATA_PILOT_TABLE_ELEM_GRAND_TOTAL       },
             { XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_QUERY,	XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_QUERY		},
             { XML_NAMESPACE_TABLE, XML_SOURCE_SERVICE,			XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_SERVICE	},
             { XML_NAMESPACE_TABLE, XML_SOURCE_CELL_RANGE,		XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_CELL_RANGE	},
@@ -1446,6 +1447,24 @@ const SvXMLTokenMap& ScXMLImport::GetDataPilotTableSourceServiceAttrTokenMap()
     return *pDataPilotTableSourceServiceAttrTokenMap;
 }
 
+const SvXMLTokenMap& ScXMLImport::GetDataPilotGrandTotalAttrTokenMap()
+{
+    if (!pDataPilotGrandTotalAttrTokenMap)
+    {
+        static __FAR_DATA SvXMLTokenMapEntry aDataPilotGrandTotalAttrTokenMap[] =
+        {
+            { XML_NAMESPACE_TABLE, XML_DISPLAY,      XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_DISPLAY      },
+            { XML_NAMESPACE_TABLE, XML_ORIENTATION,  XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_ORIENTATION  },
+            { XML_NAMESPACE_TABLE, XML_DISPLAY_NAME, XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_DISPLAY_NAME },
+            XML_TOKEN_MAP_END
+        };
+
+        pDataPilotGrandTotalAttrTokenMap = new SvXMLTokenMap( aDataPilotGrandTotalAttrTokenMap );
+    }
+
+    return *pDataPilotGrandTotalAttrTokenMap;
+}
+
 const SvXMLTokenMap& ScXMLImport::GetDataPilotTableSourceCellRangeAttrTokenMap()
 {
     if( !pDataPilotTableSourceCellRangeAttrTokenMap )
@@ -1485,6 +1504,7 @@ const SvXMLTokenMap& ScXMLImport::GetDataPilotFieldAttrTokenMap()
         static __FAR_DATA SvXMLTokenMapEntry aDataPilotFieldAttrTokenMap[] =
         {
             { XML_NAMESPACE_TABLE, XML_SOURCE_FIELD_NAME,		XML_TOK_DATA_PILOT_FIELD_ATTR_SOURCE_FIELD_NAME		},
+            { XML_NAMESPACE_TABLE, XML_DISPLAY_NAME,            XML_TOK_DATA_PILOT_FIELD_ATTR_DISPLAY_NAME          },
             { XML_NAMESPACE_TABLE, XML_IS_DATA_LAYOUT_FIELD,	XML_TOK_DATA_PILOT_FIELD_ATTR_IS_DATA_LAYOUT_FIELD	},
             { XML_NAMESPACE_TABLE, XML_FUNCTION,				XML_TOK_DATA_PILOT_FIELD_ATTR_FUNCTION				},
             { XML_NAMESPACE_TABLE, XML_ORIENTATION,			    XML_TOK_DATA_PILOT_FIELD_ATTR_ORIENTATION			},
@@ -1576,6 +1596,7 @@ const SvXMLTokenMap& ScXMLImport::GetDataPilotSubTotalAttrTokenMap()
         static __FAR_DATA SvXMLTokenMapEntry aDataPilotSubTotalAttrTokenMap[] =
         {
             { XML_NAMESPACE_TABLE, XML_FUNCTION,				XML_TOK_DATA_PILOT_SUBTOTAL_ATTR_FUNCTION			},
+            { XML_NAMESPACE_TABLE, XML_DISPLAY_NAME,            XML_TOK_DATA_PILOT_SUBTOTAL_ATTR_DISPLAY_NAME       },
             XML_TOKEN_MAP_END
         };
 
@@ -1608,6 +1629,7 @@ const SvXMLTokenMap& ScXMLImport::GetDataPilotMemberAttrTokenMap()
         static __FAR_DATA SvXMLTokenMapEntry aDataPilotMemberAttrTokenMap[] =
         {
             { XML_NAMESPACE_TABLE, XML_NAME,					XML_TOK_DATA_PILOT_MEMBER_ATTR_NAME					},
+            { XML_NAMESPACE_TABLE, XML_DISPLAY_NAME,        XML_TOK_DATA_PILOT_MEMBER_ATTR_DISPLAY_NAME         },
             { XML_NAMESPACE_TABLE, XML_DISPLAY,				XML_TOK_DATA_PILOT_MEMBER_ATTR_DISPLAY				},
             { XML_NAMESPACE_TABLE, XML_SHOW_DETAILS,		XML_TOK_DATA_PILOT_MEMBER_ATTR_SHOW_DETAILS		},
             XML_TOKEN_MAP_END
@@ -1747,6 +1769,7 @@ ScXMLImport::ScXMLImport(
 	pDataPilotTableAttrTokenMap( 0 ),
 	pDataPilotTableElemTokenMap( 0 ),
 	pDataPilotTableSourceServiceAttrTokenMap( 0 ),
+    pDataPilotGrandTotalAttrTokenMap(NULL),
 	pDataPilotTableSourceCellRangeElemTokenMap( 0 ),
 	pDataPilotTableSourceCellRangeAttrTokenMap( 0 ),
 	pDataPilotFieldAttrTokenMap( 0 ),
diff --git sc/source/filter/xml/xmlimprt.hxx sc/source/filter/xml/xmlimprt.hxx
index 8ff4178..c441fd2 100644
--- sc/source/filter/xml/xmlimprt.hxx
+++ sc/source/filter/xml/xmlimprt.hxx
@@ -517,6 +517,7 @@ enum ScXMLDataPilotTableElemTokens
 {
 	XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_SQL,
 	XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_TABLE,
+    XML_TOK_DATA_PILOT_TABLE_ELEM_GRAND_TOTAL,
 	XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_QUERY,
 	XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_SERVICE,
 	XML_TOK_DATA_PILOT_TABLE_ELEM_SOURCE_CELL_RANGE,
@@ -532,6 +533,13 @@ enum ScXMLDataPilotTableSourceServiceAttrTokens
 	XML_TOK_SOURCE_SERVICE_ATTR_PASSWORD
 };
 
+enum ScXMLDataPilotGrandTotalAttrTokens
+{
+    XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_DISPLAY,
+    XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_ORIENTATION,
+    XML_TOK_DATA_PILOT_GRAND_TOTAL_ATTR_DISPLAY_NAME
+};
+
 enum ScXMLDataPilotTableSourceCellRangeElemTokens
 {
 	XML_TOK_SOURCE_CELL_RANGE_ELEM_FILTER
@@ -545,6 +553,7 @@ enum ScXMLDataPilotTableSourceCellRangeAttrTokens
 enum ScXMLDataPilotFieldAttrTokens
 {
 	XML_TOK_DATA_PILOT_FIELD_ATTR_SOURCE_FIELD_NAME,
+    XML_TOK_DATA_PILOT_FIELD_ATTR_DISPLAY_NAME,
 	XML_TOK_DATA_PILOT_FIELD_ATTR_IS_DATA_LAYOUT_FIELD,
 	XML_TOK_DATA_PILOT_FIELD_ATTR_FUNCTION,
 	XML_TOK_DATA_PILOT_FIELD_ATTR_ORIENTATION,
@@ -580,7 +589,8 @@ enum ScXMLDataPilotSubTotalsElemTokens
 
 enum ScXMLDataPilotSubTotalAttrTokens
 {
-	XML_TOK_DATA_PILOT_SUBTOTAL_ATTR_FUNCTION
+    XML_TOK_DATA_PILOT_SUBTOTAL_ATTR_FUNCTION,
+    XML_TOK_DATA_PILOT_SUBTOTAL_ATTR_DISPLAY_NAME
 };
 
 enum ScXMLDataPilotMembersElemTokens
@@ -591,6 +601,7 @@ enum ScXMLDataPilotMembersElemTokens
 enum ScXMLDataPilotMemberAttrTokens
 {
 	XML_TOK_DATA_PILOT_MEMBER_ATTR_NAME,
+    XML_TOK_DATA_PILOT_MEMBER_ATTR_DISPLAY_NAME,
 	XML_TOK_DATA_PILOT_MEMBER_ATTR_DISPLAY,
 	XML_TOK_DATA_PILOT_MEMBER_ATTR_SHOW_DETAILS
 };
@@ -751,6 +762,7 @@ class ScXMLImport: public SvXMLImport
 	SvXMLTokenMap 			*pDataPilotTableAttrTokenMap;
 	SvXMLTokenMap 			*pDataPilotTableElemTokenMap;
 	SvXMLTokenMap 			*pDataPilotTableSourceServiceAttrTokenMap;
+    SvXMLTokenMap           *pDataPilotGrandTotalAttrTokenMap;
 	SvXMLTokenMap 			*pDataPilotTableSourceCellRangeElemTokenMap;
 	SvXMLTokenMap 			*pDataPilotTableSourceCellRangeAttrTokenMap;
 	SvXMLTokenMap 			*pDataPilotFieldAttrTokenMap;
@@ -918,6 +930,7 @@ public:
 	const SvXMLTokenMap& GetDataPilotTableAttrTokenMap();
 	const SvXMLTokenMap& GetDataPilotTableElemTokenMap();
 	const SvXMLTokenMap& GetDataPilotTableSourceServiceAttrTokenMap();
+    const SvXMLTokenMap& GetDataPilotGrandTotalAttrTokenMap();
 	const SvXMLTokenMap& GetDataPilotTableSourceCellRangeElemTokenMap();
 	const SvXMLTokenMap& GetDataPilotTableSourceCellRangeAttrTokenMap();
 	const SvXMLTokenMap& GetDataPilotFieldAttrTokenMap();
diff --git sc/source/ui/view/dbfunc3.cxx sc/source/ui/view/dbfunc3.cxx
index f58d9b5..c879c67 100644
--- sc/source/ui/view/dbfunc3.cxx
+++ sc/source/ui/view/dbfunc3.cxx
@@ -1390,7 +1390,7 @@ void ScDBFunc::UngroupDataPilot()
     }
 }
 
-OUString lcl_replaceMemberNameInSubtotal(const OUString& rSubtotal, const OUString& rMemberName)
+static OUString lcl_replaceMemberNameInSubtotal(const OUString& rSubtotal, const OUString& rMemberName)
 {
     sal_Int32 n = rSubtotal.getLength();
     const sal_Unicode* p = rSubtotal.getStr();
@@ -1407,6 +1407,18 @@ OUString lcl_replaceMemberNameInSubtotal(const OUString& rSubtotal, const OUStri
                 aBuf.append(aWord);
             aBuf.append(c);
         }
+        else if (c == sal_Unicode('\\'))
+        {
+            // Escape a backslash character.
+            aWordBuf.append(c);
+            aWordBuf.append(c);
+        }
+        else if (c == sal_Unicode('?'))
+        {
+            // A literal '?' must be escaped with a backslash ('\');
+            aWordBuf.append(sal_Unicode('\\'));
+            aWordBuf.append(c);
+        }
         else
             aWordBuf.append(c);
     }
