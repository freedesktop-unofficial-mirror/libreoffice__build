--- autodoc/source/parser_i/idl/pe_type2.cxx.old	2009-06-10 21:35:32.000000000 +0200
+++ autodoc/source/parser_i/idl/pe_type2.cxx	2009-06-11 16:58:37.000000000 +0200
@@ -47,7 +47,7 @@
 /** Implementation Concept for Parsing a Type
 
 Example Type:
-    sequence < ::abc::TName< TplType > >  AnyName;
+    sequence < ::abc::TName< TplType, TplType > >  AnyName;
 
 Status Changes:
 
@@ -62,6 +62,8 @@ expect_type:
 
         expect_type:
             TplType         ->expect_quname_separator
+            ,       -> in_template_type (process in nested PE_Type instance)
+            TplType         ->expect_quname_separator
             >               -> e_none (finish, '>' not handled)
 
     >               -> expect_quname_separator
@@ -172,9 +174,29 @@ PE_Type::Process_Punctuation( const TokP
     }
 	else if (eState == in_template_type)
 	{
-	    csv_assert( i_rToken.Id() == TokPunctuation::Greater );
-		eState = expect_quname_separator;
-		SetResult(done, stay);
+            switch (i_rToken.Id())
+            {
+                case TokPunctuation::Comma:
+                        eState = in_template_type;
+                        // FIXME: We started tyo call MyTemplateType() more times; we might need to create array
+                        //        of nTemplateType, update the output routines, ...
+                        //        Hmm, the template types are not visible in the HTML output even when only one
+                        //        template type is used => there might be missing even more code
+                        // Example of the more types is in XFastSAXSerializable.idl:
+                        //        sequence< beans::Pair<string, long> > registerNamespaces
+                        SetResult( done, push_sure, &MyTemplateType() );
+                        break;
+
+                case TokPunctuation::Greater:
+                        eState = expect_quname_separator;
+                        SetResult(done, stay);
+                        break;
+
+                default:
+                       Cerr() << "Syntax error: in template type." << Endl();
+                       SetResult( not_done, pop_failure);
+                       break;
+            }
 	}
 }
 
