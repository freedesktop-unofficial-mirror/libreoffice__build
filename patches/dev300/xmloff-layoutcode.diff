diff -Nrup xmloff-m16/source/draw/sdxmlexp.cxx xmloff/source/draw/sdxmlexp.cxx
--- xmloff-m16/source/draw/sdxmlexp.cxx	2009-07-27 00:38:42.000000000 -0700
+++ xmloff/source/draw/sdxmlexp.cxx	2009-07-31 21:56:48.000000000 -0700
@@ -47,6 +47,11 @@
 #include <com/sun/star/drawing/XMasterPagesSupplier.hpp>
 #include <com/sun/star/presentation/XHandoutMasterSupplier.hpp>
 #include <com/sun/star/container/XIndexContainer.hpp>
+#include <com/sun/star/presentation/XLayoutList.hpp>
+#include <com/sun/star/presentation/UnoAutoLayout.hpp>
+#include <com/sun/star/presentation/UnoPresKind.hpp>
+#include <com/sun/star/awt/Rectangle.hpp>
+#include <com/sun/star/awt/Size.hpp>
 #include <com/sun/star/view/PaperOrientation.hpp>
 #include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
 #include <com/sun/star/style/XStyle.hpp>
@@ -208,11 +213,13 @@ DECLARE_LIST(ImpXMLEXPPageMasterList, Im
 
 //////////////////////////////////////////////////////////////////////////////
 
-#define	IMP_AUTOLAYOUT_INFO_MAX			(33L)
-
 class ImpXMLAutoLayoutInfo
 {
 	sal_uInt16					mnType;
+    UnoPresKind*                mpKinds;
+    Rectangle*                  mpRects;
+    bool*                       mpVertical;
+    sal_Int32                   mnElemCount;
 	ImpXMLEXPPageMasterInfo*	mpPageMasterInfo;
 	OUString					msLayoutName;
 	Rectangle					maTitleRect;
@@ -221,7 +228,7 @@ class ImpXMLAutoLayoutInfo
 	sal_Int32					mnGapY;
 
 public:
-	ImpXMLAutoLayoutInfo(sal_uInt16 nTyp, ImpXMLEXPPageMasterInfo* pInf);
+	ImpXMLAutoLayoutInfo(sal_uInt16 nTyp, ImpXMLEXPPageMasterInfo* pInf, Reference< XLayoutList > rLList);
 
 	BOOL operator==(const ImpXMLAutoLayoutInfo& rInfo) const;
 
@@ -234,18 +241,13 @@ public:
 
 	const Rectangle& GetTitleRectangle() const { return maTitleRect; }
 	const Rectangle& GetPresRectangle() const { return maPresRect; }
-
-	static BOOL IsCreateNecessary(sal_uInt16 nTyp);
+    Rectangle* GetRects() const { return mpRects; }
+    UnoPresKind* GetKinds() const { return mpKinds; }
+    bool* GetVerticalList() const { return mpVertical; }
+    sal_Int32 GetElemCount() const { return mnElemCount; }
 };
 
-BOOL ImpXMLAutoLayoutInfo::IsCreateNecessary(sal_uInt16 nTyp)
-{
-	if(nTyp == 5 /* AUTOLAYOUT_ORG */
-		|| nTyp == 20 /* AUTOLAYOUT_NONE */
-		|| nTyp >= IMP_AUTOLAYOUT_INFO_MAX)
-		return FALSE;
-	return TRUE;
-}
+
 
 BOOL ImpXMLAutoLayoutInfo::operator==(const ImpXMLAutoLayoutInfo& rInfo) const
 {
@@ -253,15 +255,28 @@ BOOL ImpXMLAutoLayoutInfo::operator==(co
 		&& mpPageMasterInfo == rInfo.mpPageMasterInfo));
 }
 
-ImpXMLAutoLayoutInfo::ImpXMLAutoLayoutInfo(sal_uInt16 nTyp, ImpXMLEXPPageMasterInfo* pInf)
+ImpXMLAutoLayoutInfo::ImpXMLAutoLayoutInfo(sal_uInt16 nTyp, ImpXMLEXPPageMasterInfo* pInf, Reference< XLayoutList > rLList)
 :	mnType(nTyp),
 	mpPageMasterInfo(pInf)
 {
+    Size titlesize;
+    Point titlepos;
+    Size layoutsize;
+    Point layoutpos;
+    UnoPageKind kind;
+    
 	// create full info (initialze with typical values)
 	Point aPagePos(0,0);
 	Size aPageSize(28000, 21000);
 	Size aPageInnerSize(28000, 21000);
-
+   
+    
+    if(!rLList.is()) 
+    {
+        DBG_ERROR("ImpXMLAutoLayoutInfo::const:  No uno layout list!");
+        return;
+    }
+    
 	if(mpPageMasterInfo)
 	{
 		aPagePos = Point(mpPageMasterInfo->GetBorderLeft(), mpPageMasterInfo->GetBorderTop());
@@ -269,86 +284,87 @@ ImpXMLAutoLayoutInfo::ImpXMLAutoLayoutIn
 		aPageInnerSize = aPageSize;
 		aPageInnerSize.Width() -= mpPageMasterInfo->GetBorderLeft() + mpPageMasterInfo->GetBorderRight();
 		aPageInnerSize.Height() -= mpPageMasterInfo->GetBorderTop() + mpPageMasterInfo->GetBorderBottom();
+        
 	}
-
-	// title rectangle aligning
-	Point aTitlePos(aPagePos);
-	Size aTitleSize(aPageInnerSize);
-
-	if(mnType == 21 /* AUTOLAYOUT_NOTES */)
-	{
-		aTitleSize.Height() = (long) (aTitleSize.Height() / 2.5);
-		Point aPos = aTitlePos;
-		aPos.Y() += long( aTitleSize.Height() * 0.083 );
-		Size aPartArea = aTitleSize;
-		Size aSize;
-
-		// tatsaechliche Seitengroesse in das Handout-Rechteck skalieren
-		double fH = (double) aPartArea.Width()  / aPageSize.Width();
-		double fV = (double) aPartArea.Height() / aPageSize.Height();
-
-		if ( fH > fV )
-			fH = fV;
-		aSize.Width()  = (long) (fH * aPageSize.Width());
-		aSize.Height() = (long) (fH * aPageSize.Height());
-
-		aPos.X() += (aPartArea.Width() - aSize.Width()) / 2;
-		aPos.Y() += (aPartArea.Height()- aSize.Height())/ 2;
-
-		aTitlePos = aPos;
-		aTitleSize = aSize;
-	}
-	else if(mnType == 27 || mnType == 28)
-	{
-		// AUTOLAYOUT_VERTICAL_TITLE_TEXT_CHART or
-		// AUTOLAYOUT_VERTICAL_TITLE_VERTICAL_OUTLINE
-		Point aClassicTPos(
-			aTitlePos.X() + long( aTitleSize.Width() * 0.0735 ),
-			aTitlePos.Y() + long( aTitleSize.Height() * 0.083 ));
-		Size aClassicTSize(
-			long( aTitleSize.Width() * 0.854 ),
-			long( aTitleSize.Height() * 0.167 ));
-		Point aLPos(aPagePos);
-		Size aLSize(aPageInnerSize);
-		Point aClassicLPos(
-			aLPos.X() + long( aLSize.Width() * 0.0735 ),
-			aLPos.Y() + long( aLSize.Height() * 0.472 ));
-		Size aClassicLSize(
-			long( aLSize.Width() * 0.854 ),
-			long( aLSize.Height() * 0.444 ));
-
-		aTitlePos.X() = (aClassicTPos.X() + aClassicTSize.Width()) - aClassicTSize.Height();
-		aTitlePos.Y() = aClassicTPos.Y();
-		aTitleSize.Width() = aClassicTSize.Height();
-		aTitleSize.Height() = (aClassicLPos.Y() + aClassicLSize.Height()) - aClassicTPos.Y();
-	}
-	else
-	{
-		aTitlePos.X() += long( aTitleSize.Width() * 0.0735 );
-		aTitlePos.Y() += long( aTitleSize.Height() * 0.083 );
-		aTitleSize.Width() = long( aTitleSize.Width() * 0.854 );
-		aTitleSize.Height() = long( aTitleSize.Height() * 0.167 );
-	}
-
-	maTitleRect.SetPos(aTitlePos);
-	maTitleRect.SetSize(aTitleSize);
-
-	// layout rectangle aligning
-	Point aLayoutPos(aPagePos);
-	Size aLayoutSize(aPageInnerSize);
-
-	if(mnType == 21 /* AUTOLAYOUT_NOTES */)
-	{
-		aLayoutPos.X() += long( aLayoutSize.Width() * 0.0735 );
-		aLayoutPos.Y() += long( aLayoutSize.Height() * 0.472 );
-		aLayoutSize.Width() = long( aLayoutSize.Width() * 0.854 );
-		aLayoutSize.Height() = long( aLayoutSize.Height() * 0.444 );
-	}
-	else if((mnType >= 22 && mnType <= 26) || (mnType == 31)) // AUTOLAYOUT_HANDOUT
-	{
-		// keep info for inner area in maPresRect, put info for gap size
-		// to maTitleRect position
-		mnGapX = (aPageSize.Width() - aPageInnerSize.Width()) / 2;
+    
+    Size aTitleSize(aPageSize);
+    Point aTitlePos(aPagePos);
+    
+     // taken from SdPage::getTitleRect and getLayoutRect
+    kind = rLList->getPageKind(nTyp);
+    if(kind == UnoPageKind_STANDARD)
+    {
+       titlesize.setWidth( long(aPageInnerSize.Width()*.9));
+       layoutsize.setWidth( long(aPageInnerSize.Width()*.9));
+       titlesize.setHeight(  long(aPageInnerSize.Height()*.167));
+       layoutsize.setHeight( long(aPageInnerSize.Height()*.66));
+       titlepos.X() = aPagePos.X() + long(aPageInnerSize.Width()*.05);
+       layoutpos.X() = aPagePos.X() + long(aPageInnerSize.Width()*.05);
+       titlepos.Y() = aPagePos.Y() + long(aPageInnerSize.Height()*.0399);
+       layoutpos.Y() = aPagePos.Y() + long(aPageInnerSize.Height()*.234);
+       
+    }
+    else if(kind == UnoPageKind_NOTES)
+    {
+       titlepos.X() = aPagePos.X();
+       titlepos.Y() = aPagePos.Y() + long(aPageInnerSize.Height()*.076);
+       titlesize.setWidth(aPageInnerSize.Width());
+       titlesize.setHeight( long(aPageInnerSize.Height()*.375));
+       layoutpos.X() = aPagePos.X() + long(aPageInnerSize.Width()*.1);
+       layoutpos.Y() = aPagePos.Y() + long(aPageInnerSize.Height()*.475);
+       layoutsize.setWidth( long(aPageInnerSize.Width()*.8));
+       layoutsize.setHeight( long(aPageInnerSize.Height()*.45));
+        
+    }
+    else // HANDOUT (or other)
+    {
+        // use pagesize and pos for title
+        titlepos = aPagePos;
+        layoutpos = aPagePos;
+        titlesize = aPageInnerSize;
+        layoutsize = aPageInnerSize;
+    }
+    
+    if(kind  != UnoPageKind_HANDOUT)
+    {
+       ::uno::Sequence< ::awt::Rectangle >  rectlist;
+       ::awt::Rectangle titlerect;
+       ::awt::Rectangle layoutrect;
+       ::awt::Rectangle arect;
+       ::awt::Size  pagesize;
+       
+       titlerect.X = titlepos.X();
+       titlerect.Y = titlepos.Y();
+       titlerect.Width = titlesize.Width();
+       titlerect.Height = titlesize.Height();
+       
+       layoutrect.X = layoutpos.X();
+       layoutrect.Y = layoutpos.Y();
+       layoutrect.Width = layoutsize.Width();
+       layoutrect.Height = layoutsize.Height();
+       
+       pagesize.Width = aPageInnerSize.Width();
+       pagesize.Height = aPageInnerSize.Height();
+       
+       rectlist = rLList->getAutoLayoutRectangles((sal_uInt32) nTyp, titlerect, layoutrect, pagesize, false);
+       
+       mnElemCount = rLList->getElementCount((sal_Int32) nTyp);
+       mpKinds = new UnoPresKind[mnElemCount];
+       mpVertical = new bool[mnElemCount];
+       mpRects = new Rectangle[mnElemCount];
+       
+       for(sal_Int32 i=0; i < mnElemCount; i++)
+       {
+           mpKinds[i] = rLList->getPresKind((sal_Int32) nTyp, i);
+           mpVertical[i] = rLList->isVertical((sal_Int32) nTyp, i);
+           arect = rectlist[i];
+           mpRects[i] = Rectangle( Point(arect.X, arect.Y), Size(arect.Width, arect.Height) );
+       }
+       
+    } 
+    else  // for HANDOUT, calculate gaps and use just the title rect
+    {
+        mnGapX = (aPageSize.Width() - aPageInnerSize.Width()) / 2;
 		mnGapY = (aPageSize.Height() - aPageInnerSize.Height()) / 2;
 
 		if(!mnGapX)
@@ -362,47 +378,12 @@ ImpXMLAutoLayoutInfo::ImpXMLAutoLayoutIn
 
 		if(mnGapY < aPageInnerSize.Height() / 10)
 			mnGapY = aPageInnerSize.Height() / 10;
-	}
-	else if(mnType == 27 || mnType == 28)
-	{
-		// AUTOLAYOUT_VERTICAL_TITLE_TEXT_CHART or
-		// AUTOLAYOUT_VERTICAL_TITLE_VERTICAL_OUTLINE
-		Point aClassicTPos(
-			aTitlePos.X() + long( aTitleSize.Width() * 0.0735 ),
-			aTitlePos.Y() + long( aTitleSize.Height() * 0.083 ));
-		Size aClassicTSize(
-			long( aTitleSize.Width() * 0.854 ),
-			long( aTitleSize.Height() * 0.167 ));
-		Point aClassicLPos(
-			aLayoutPos.X() + long( aLayoutSize.Width() * 0.0735 ),
-			aLayoutPos.Y() + long( aLayoutSize.Height() * 0.472 ));
-		Size aClassicLSize(
-			long( aLayoutSize.Width() * 0.854 ),
-			long( aLayoutSize.Height() * 0.444 ));
-
-		aLayoutPos.X() = aClassicLPos.X();
-		aLayoutPos.Y() = aClassicTPos.Y();
-		aLayoutSize.Width() = (aClassicLPos.X() + aClassicLSize.Width())
-			- (aClassicTSize.Height() + (aClassicLPos.Y() - (aClassicTPos.Y() + aClassicTSize.Height())));
-		aLayoutSize.Height() = (aClassicLPos.Y() + aClassicLSize.Height()) - aClassicTPos.Y();
-	}
-    else if( mnType == 32 )
-    {
-        // AUTOLAYOUT_ONLY_TEXT
-        aLayoutPos = aTitlePos;
-        aLayoutSize.Width() = aTitleSize.Width();
-        aLayoutSize.Height() = long( aLayoutSize.Height() * 0.825 );
+            
+        mpRects = new Rectangle(aPagePos, aPageInnerSize);
+        mpVertical = new bool(false);
+        mpKinds = new UnoPresKind(UnoPresKind_HANDOUT);
     }
-	else
-	{
-		aLayoutPos.X() += long( aLayoutSize.Width() * 0.0735 );
-		aLayoutPos.Y() += long( aLayoutSize.Height() * 0.278 );
-		aLayoutSize.Width() = long( aLayoutSize.Width() * 0.854 );
-		aLayoutSize.Height() = long( aLayoutSize.Height() * 0.630 );
-	}
-
-	maPresRect.SetPos(aLayoutPos);
-	maPresRect.SetSize(aLayoutSize);
+ 
 }
 
 DECLARE_LIST(ImpXMLAutoLayoutInfoList, ImpXMLAutoLayoutInfo*)
@@ -867,8 +848,6 @@ BOOL SdXMLExport::ImpPrepAutoLayoutInfo(
 		aAny = xPropSet->getPropertyValue(OUString(RTL_CONSTASCII_USTRINGPARAM("Layout")));
 		if(aAny >>= nType)
 		{
-			if(ImpXMLAutoLayoutInfo::IsCreateNecessary(nType))
-			{
 				ImpXMLEXPPageMasterInfo* pInfo = 0L;
 
 				// get master-page info
@@ -886,9 +865,21 @@ BOOL SdXMLExport::ImpPrepAutoLayoutInfo(
 						}
 					}
 				}
+                
+                Reference< XLayoutList > llist;
+                
+                Reference< beans::XPropertySetInfo > xPropsInfo( xPropSet->getPropertySetInfo() );
+                if( xPropsInfo.is() )
+		        {
+                    if(xPropsInfo->hasPropertyByName(OUString(RTL_CONSTASCII_USTRINGPARAM("AutoLayoutList") )))
+                    {                
+                       aAny = xPropSet->getPropertyValue(OUString(RTL_CONSTASCII_USTRINGPARAM("AutoLayoutList")));
+                       aAny >>= llist;
+                    }
+                }    
 
 				// create entry and look for existance
-				ImpXMLAutoLayoutInfo* pNew = new ImpXMLAutoLayoutInfo(nType, pInfo);
+				ImpXMLAutoLayoutInfo* pNew = new ImpXMLAutoLayoutInfo(nType, pInfo, llist);
 				BOOL bDidExist(FALSE);
 
 				for(sal_uInt32 nCnt = 0L; !bDidExist && nCnt < mpAutoLayoutInfoList->Count(); nCnt++)
@@ -914,7 +905,7 @@ BOOL SdXMLExport::ImpPrepAutoLayoutInfo(
 				rName = pNew->GetLayoutName();
 				bRetval = TRUE;
 			}
-		}
+
 	}
 
 	return bRetval;
@@ -924,6 +915,17 @@ BOOL SdXMLExport::ImpPrepAutoLayoutInfo(
 
 void SdXMLExport::ImpWriteAutoLayoutInfos()
 {
+    Rectangle* pRects;
+    UnoPresKind*  pKinds;
+    bool* pVertical;
+    sal_Int32 nType, nCount;
+    sal_Int32 nColCnt, nRowCnt;
+    sal_Int32 nGapX;
+    sal_Int32 nGapY;
+    Size aPartSize;
+    Point aPartPos, aTmpPos;
+
+    
 	if(mpAutoLayoutInfoList->Count())
 	{
 		for(sal_uInt32 nCnt = 0L; nCnt < mpAutoLayoutInfoList->Count(); nCnt++)
@@ -937,328 +939,100 @@ void SdXMLExport::ImpWriteAutoLayoutInfo
 				// write draw-style attributes
 				SvXMLElementExport aDSE(*this, XML_NAMESPACE_STYLE, XML_PRESENTATION_PAGE_LAYOUT, sal_True, sal_True);
 
-				// write presentation placeholders
-				switch(pInfo->GetLayoutType())
-				{
-					case 0 : // AUTOLAYOUT_TITLE
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderSubtitle, pInfo->GetPresRectangle());
-						break;
-					}
-					case 1 : // AUTOLAYOUT_ENUM
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, pInfo->GetPresRectangle());
-						break;
-					}
-					case 2 : // AUTOLAYOUT_CHART
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderChart, pInfo->GetPresRectangle());
-						break;
-					}
-					case 3 : // AUTOLAYOUT_2TEXT
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRight(aLeft);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aRight);
-						break;
-					}
-					case 4 : // AUTOLAYOUT_TEXTCHART
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRight(aLeft);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderChart, aRight);
-						break;
-					}
-					case 6 : // AUTOLAYOUT_TEXTCLIP
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRight(aLeft);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderGraphic, aRight);
-						break;
-					}
-					case 7 : // AUTOLAYOUT_CHARTTEXT
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRight(aLeft);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderChart, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aRight);
-						break;
-					}
-					case 8 : // AUTOLAYOUT_TAB
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTable, pInfo->GetPresRectangle());
-						break;
-					}
-					case 9 : // AUTOLAYOUT_CLIPTEXT
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRight(aLeft);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderGraphic, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aRight);
-						break;
-					}
-					case 10 : // AUTOLAYOUT_TEXTOBJ
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRight(aLeft);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aRight);
-						break;
-					}
-					case 11 : // AUTOLAYOUT_OBJ
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, pInfo->GetPresRectangle());
-						break;
-					}
-					case 12 : // AUTOLAYOUT_TEXT2OBJ
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRightTop(aLeft);
-						aRightTop.Left() = long(aRightTop.Left() + aRightTop.GetWidth() * 1.05);
-						aRightTop.setHeight(long(aRightTop.GetHeight() * 0.477));
-						Rectangle aRightBottom(aRightTop);
-						aRightBottom.Top() = long(aRightBottom.Top() + aRightBottom.GetHeight() * 1.095);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aRightTop);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aRightBottom);
-						break;
-					}
-					case 13 : // AUTOLAYOUT_OBJTEXT
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRight(aLeft);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aRight);
-						break;
-					}
-					case 14 : // AUTOLAYOUT_OBJOVERTEXT
-					{
-						Rectangle aTop(pInfo->GetPresRectangle());
-						aTop.setHeight(long(aTop.GetHeight() * 0.477));
-						Rectangle aBottom(aTop);
-						aBottom.Top() = long(aBottom.Top() + aBottom.GetHeight() * 1.095);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aTop);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aBottom);
-						break;
-					}
-					case 15 : // AUTOLAYOUT_2OBJTEXT
-					{
-						Rectangle aLeftTop(pInfo->GetPresRectangle());
-						aLeftTop.setWidth(long(aLeftTop.GetWidth() * 0.488));
-						Rectangle aRight(aLeftTop);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-						aLeftTop.setHeight(long(aLeftTop.GetHeight() * 0.477));
-						Rectangle aLeftBottom(aLeftTop);
-						aLeftBottom.Top() = long(aLeftBottom.Top() + aLeftBottom.GetHeight() * 1.095);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aLeftTop);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aLeftBottom);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aRight);
-						break;
-					}
-					case 16 : // AUTOLAYOUT_2OBJOVERTEXT
-					{
-						Rectangle aTopLeft(pInfo->GetPresRectangle());
-						aTopLeft.setHeight(long(aTopLeft.GetHeight() * 0.477));
-						Rectangle aBottom(aTopLeft);
-						aBottom.Top() = long(aBottom.Top() + aBottom.GetHeight() * 1.095);
-						aTopLeft.setWidth(long(aTopLeft.GetWidth() * 0.488));
-						Rectangle aTopRight(aTopLeft);
-						aTopRight.Left() = long(aTopRight.Left() + aTopRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aTopLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aTopRight);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aBottom);
-						break;
-					}
-					case 17 : // AUTOLAYOUT_TEXTOVEROBJ
-					{
-						Rectangle aTop(pInfo->GetPresRectangle());
-						aTop.setHeight(long(aTop.GetHeight() * 0.477));
-						Rectangle aBottom(aTop);
-						aBottom.Top() = long(aBottom.Top() + aBottom.GetHeight() * 1.095);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, aTop);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aBottom);
-						break;
-					}
-					case 18 : // AUTOLAYOUT_4OBJ
-					{
-						Rectangle aTopLeft(pInfo->GetPresRectangle());
-						aTopLeft.setHeight(long(aTopLeft.GetHeight() * 0.477));
-						aTopLeft.setWidth(long(aTopLeft.GetWidth() * 0.488));
-						Rectangle aBottomLeft(aTopLeft);
-						aBottomLeft.Top() = long(aBottomLeft.Top() + aBottomLeft.GetHeight() * 1.095);
-						Rectangle aTopRight(aTopLeft);
-						aTopRight.Left() = long(aTopRight.Left() + aTopRight.GetWidth() * 1.05);
-						Rectangle aBottomRight(aTopRight);
-						aBottomRight.Top() = long(aBottomRight.Top() + aBottomRight.GetHeight() * 1.095);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aTopLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aTopRight);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aBottomLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, aBottomRight);
-						break;
-					}
-					case 19 : // AUTOLAYOUT_ONLY_TITLE
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						break;
-					}
-					case 21 : // AUTOLAYOUT_NOTES
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderPage, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderNotes, pInfo->GetPresRectangle());
-						break;
-					}
-					case 22 : // AUTOLAYOUT_HANDOUT1
-					case 23 : // AUTOLAYOUT_HANDOUT2
-					case 24 : // AUTOLAYOUT_HANDOUT3
-					case 25 : // AUTOLAYOUT_HANDOUT4
-					case 26 : // AUTOLAYOUT_HANDOUT6
-					case 31 : // AUTOLAYOUT_HANDOUT9
-					{
-						sal_Int32 nColCnt, nRowCnt;
-						sal_Int32 nGapX = pInfo->GetGapX();
-						sal_Int32 nGapY = pInfo->GetGapY();
-
-						switch(pInfo->GetLayoutType())
-						{
-							case 22 : nColCnt = 1; nRowCnt = 1; break;
-							case 23 : nColCnt = 1; nRowCnt = 2; break;
-							case 24 : nColCnt = 1; nRowCnt = 3; break;
-							case 25 : nColCnt = 2; nRowCnt = 2; break;
-							case 26 : nColCnt = 3; nRowCnt = 2; break;
-							case 31 : nColCnt = 3; nRowCnt = 3; break;
-							default:  nColCnt = 0; nRowCnt = 0; break;  // FIXME - What is correct values?
-						}
-
-						Size aPartSize(pInfo->GetTitleRectangle().GetSize());
-						Point aPartPos(pInfo->GetTitleRectangle().TopLeft());
-
-						if(aPartSize.Width() > aPartSize.Height())
-						{
-							sal_Int32 nZwi(nColCnt);
-							nColCnt = nRowCnt;
-							nRowCnt = nZwi;
-						}
-
-						aPartSize.Width() = (aPartSize.Width() - ((nColCnt - 1) * nGapX)) / nColCnt;
-						aPartSize.Height() = (aPartSize.Height() - ((nRowCnt - 1) * nGapY)) / nRowCnt;
-
-						Point aTmpPos(aPartPos);
-
-						for(sal_Int32 a = 0L; a < nRowCnt; a++)
-						{
-							aTmpPos.X() = aPartPos.X();
-
-							for(sal_Int32 b = 0L; b < nColCnt; b++)
-							{
-								Rectangle aTmpRect(aTmpPos, aPartSize);
-
-								ImpWriteAutoLayoutPlaceholder(XmlPlaceholderHandout, aTmpRect);
-								aTmpPos.X() += aPartSize.Width() + nGapX;
-							}
-
-							aTmpPos.Y() += aPartSize.Height() + nGapY;
-						}
-						break;
-					}
-					case 27 : // AUTOLAYOUT_VERTICAL_TITLE_TEXT_CHART
-					{
-						Rectangle aTop(pInfo->GetPresRectangle());
-						aTop.setHeight(long(aTop.GetHeight() * 0.488));
-						Rectangle aBottom(aTop);
-						aBottom.Top() = long(aBottom.Top() + aBottom.GetHeight() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderVerticalTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderVerticalOutline, aTop);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderChart, aBottom);
-						break;
-					}
-					case 28 : // AUTOLAYOUT_VERTICAL_TITLE_VERTICAL_OUTLINE
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderVerticalTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderVerticalOutline, pInfo->GetPresRectangle());
-						break;
-					}
-					case 29 : // AUTOLAYOUT_TITLE_VERTICAL_OUTLINE
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderVerticalOutline, pInfo->GetPresRectangle());
-						break;
-					}
-					case 30 : // AUTOLAYOUT_TITLE_VERTICAL_OUTLINE_CLIPART
-					{
-						Rectangle aLeft(pInfo->GetPresRectangle());
-						aLeft.setWidth(long(aLeft.GetWidth() * 0.488));
-						Rectangle aRight(aLeft);
-						aRight.Left() = long(aRight.Left() + aRight.GetWidth() * 1.05);
-
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pInfo->GetTitleRectangle());
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderGraphic, aLeft);
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderVerticalOutline, aRight);
-						break;
-					}
-					case 32 : // AUTOLAYOUT_TITLE
-					{
-						ImpWriteAutoLayoutPlaceholder(XmlPlaceholderSubtitle, pInfo->GetPresRectangle());
-						break;
-					}
-					default:
-					{
-						DBG_ERROR("XMLEXP: unknown autolayout export");
-						break;
-					}
-				}
-			}
-		}
-	}
+                pRects = pInfo->GetRects();
+                pKinds = pInfo->GetKinds();
+                pVertical = pInfo->GetVerticalList();
+                nType = pInfo->GetLayoutType();
+                nCount = pInfo->GetElemCount();
+                nGapX = pInfo->GetGapX();
+                nGapY = pInfo->GetGapY();
+                
+                for(sal_Int32 i=0; i < nCount; i++)
+                {
+                    switch (pKinds[i]) 
+                    {
+                        case UnoPresKind_TITLE: if(pVertical[i])
+                                                  ImpWriteAutoLayoutPlaceholder(XmlPlaceholderVerticalTitle, pRects[i]);
+                                                else
+                                                  ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTitle, pRects[i]);
+                                                break;
+                        case UnoPresKind_TEXT:  ImpWriteAutoLayoutPlaceholder(XmlPlaceholderText, pRects[i]);
+                                                break;
+                        case UnoPresKind_OUTLINE: if(pVertical[i])
+                                                    ImpWriteAutoLayoutPlaceholder(XmlPlaceholderVerticalOutline, pRects[i]);
+                                                  else
+                                                    ImpWriteAutoLayoutPlaceholder(XmlPlaceholderOutline, pRects[i]);
+                                                  break;
+                        case UnoPresKind_CHART:  ImpWriteAutoLayoutPlaceholder(XmlPlaceholderChart, pRects[i]);
+                                                 break;
+                        case UnoPresKind_TABLE:  ImpWriteAutoLayoutPlaceholder(XmlPlaceholderTable, pRects[i]);
+                                                 break;
+                        case UnoPresKind_IMAGE:
+                        case UnoPresKind_GRAPHIC: ImpWriteAutoLayoutPlaceholder(XmlPlaceholderGraphic, pRects[i]);
+                                                  break;
+                        case UnoPresKind_OBJECT: ImpWriteAutoLayoutPlaceholder(XmlPlaceholderObject, pRects[i]);
+                                                 break;
+                        case UnoPresKind_NOTES:  ImpWriteAutoLayoutPlaceholder(XmlPlaceholderNotes, pRects[i]);
+                                                 break;
+                        case UnoPresKind_PAGE:   ImpWriteAutoLayoutPlaceholder(XmlPlaceholderPage, pRects[i]);
+                                                 break;
+                        case UnoPresKind_HANDOUT: 
+						   switch(nType)
+						   {
+							   case UnoAutoLayout_HANDOUT1 : nColCnt = 1; nRowCnt = 1; break;
+							   case UnoAutoLayout_HANDOUT2 : nColCnt = 1; nRowCnt = 2; break;
+							   case UnoAutoLayout_HANDOUT3 : nColCnt = 1; nRowCnt = 3; break;
+							   case UnoAutoLayout_HANDOUT4 : nColCnt = 2; nRowCnt = 2; break;
+							   case UnoAutoLayout_HANDOUT6 : nColCnt = 3; nRowCnt = 2; break;
+							   case UnoAutoLayout_HANDOUT9 : nColCnt = 3; nRowCnt = 3; break;
+							   default:  nColCnt = 0; nRowCnt = 0; break; 
+						   }
+
+						   aPartSize = pRects->GetSize();
+						   aPartPos = pRects->TopLeft();
+
+						   if(aPartSize.Width() > aPartSize.Height())
+						   {
+							  sal_Int32 nZwi(nColCnt);
+							  nColCnt = nRowCnt;
+							  nRowCnt = nZwi;
+						   }
+
+						   aPartSize.Width() = (aPartSize.Width() - ((nColCnt - 1) * nGapX)) / nColCnt;
+						   aPartSize.Height() = (aPartSize.Height() - ((nRowCnt - 1) * nGapY)) / nRowCnt;
+
+						   aTmpPos = aPartPos;
+
+						   for(sal_Int32 a = 0L; a < nRowCnt; a++)
+						   {
+							  aTmpPos.X() = aPartPos.X();
+
+							  for(sal_Int32 b = 0L; b < nColCnt; b++)
+							  {
+								  Rectangle aTmpRect(aTmpPos, aPartSize);
+
+								  ImpWriteAutoLayoutPlaceholder(XmlPlaceholderHandout, aTmpRect);
+								  aTmpPos.X() += aPartSize.Width() + nGapX;
+							  }
+
+							  aTmpPos.Y() += aPartSize.Height() + nGapY;
+						   }
+                        break;
+                    case UnoPresKind_NONE: 
+                    case UnoPresKind_ORGCHART:
+                    case UnoPresKind_BACKGROUND:
+                    case UnoPresKind_FOOTER:
+                    case UnoPresKind_HEADER:
+                    case UnoPresKind_DATETIME:
+                    case UnoPresKind_SLIDENUMBER:
+                    default:  break; /* do nothing */
+                    
+                } // switch (kinds[i]...
+    
+		     } // for each elem..
+	      } //if pInfo
+      } // for each layout...
+   }  // if (mpAutoLayoutInfo...
 }
 
 //////////////////////////////////////////////////////////////////////////////
