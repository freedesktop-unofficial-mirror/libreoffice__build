diff --git sc/inc/document.hxx sc/inc/document.hxx
index 1ac6e73..2b1c371 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -1330,6 +1330,7 @@ public:
 	Size			GetPageSize( SCTAB nTab ) const;
 	void			SetPageSize( SCTAB nTab, const Size& rSize );
 	void			SetRepeatArea( SCTAB nTab, SCCOL nStartCol, SCCOL nEndCol, SCROW nStartRow, SCROW nEndRow );
+    void            InvalidatePageBreaks(SCTAB nTab);
 	void			UpdatePageBreaks( SCTAB nTab, const ScRange* pUserArea = NULL );
 	void			RemoveManualBreaks( SCTAB nTab );
 	BOOL			HasManualBreaks( SCTAB nTab ) const;
diff --git sc/inc/table.hxx sc/inc/table.hxx
index a088fe5..1bd2d98 100644
--- sc/inc/table.hxx
+++ sc/inc/table.hxx
@@ -153,6 +153,7 @@ private:
 	Color			aScenarioColor;
 	USHORT			nScenarioFlags;
 	BOOL			bActiveScenario;
+    bool            mbPageBreaksValid;
 
 friend class ScDocument;					// fuer FillInfo
 friend class ScDocumentIterator;
@@ -339,7 +340,8 @@ public:
 
 	void		CopyUpdated( const ScTable* pPosTab, ScTable* pDestTab ) const;
 
-	void		InvalidateTableArea()						{ bTableAreaValid = FALSE; }
+    void        InvalidateTableArea();
+    void        InvalidatePageBreaks();
 
 	BOOL		GetCellArea( SCCOL& rEndCol, SCROW& rEndRow ) const;			// FALSE = leer
 	BOOL		GetTableArea( SCCOL& rEndCol, SCROW& rEndRow ) const;
diff --git sc/source/core/data/document.cxx sc/source/core/data/document.cxx
index 11af993..412272b 100644
--- sc/source/core/data/document.cxx
+++ sc/source/core/data/document.cxx
@@ -4557,6 +4557,11 @@ void ScDocument::SetRepeatArea( SCTAB nTab, SCCOL nStartCol, SCCOL nEndCol, SCRO
 		pTab[nTab]->SetRepeatArea( nStartCol, nEndCol, nStartRow, nEndRow );
 }
 
+void ScDocument::InvalidatePageBreaks(SCTAB nTab)
+{
+    if (ValidTab(nTab) && pTab[nTab])
+        pTab[nTab]->InvalidatePageBreaks();
+}
 
 void ScDocument::UpdatePageBreaks( SCTAB nTab, const ScRange* pUserArea )
 {
diff --git sc/source/core/data/table1.cxx sc/source/core/data/table1.cxx
index 0e0b9c1..9b2c376 100644
--- sc/source/core/data/table1.cxx
+++ sc/source/core/data/table1.cxx
@@ -157,7 +157,8 @@ ScTable::ScTable( ScDocument* pDoc, SCTAB nNewTab, const String& rNewName,
 	pScenarioRanges( NULL ),
 	aScenarioColor( COL_LIGHTGRAY ),
 	nScenarioFlags( 0 ),
-	bActiveScenario( FALSE )
+	bActiveScenario( FALSE ),
+    mbPageBreaksValid(false)
 {
 
 	if (bColInfo)
diff --git sc/source/core/data/table2.cxx sc/source/core/data/table2.cxx
index 768eb27..0bddc24 100644
--- sc/source/core/data/table2.cxx
+++ sc/source/core/data/table2.cxx
@@ -137,6 +137,8 @@ void ScTable::InsertRow( SCCOL nStartCol, SCCOL nEndCol, SCROW nStartRow, SCSIZE
 		aCol[j].InsertRow( nStartRow, nSize );
 	if( !--nRecalcLvl )
 		SetDrawPageSize();
+
+    InvalidatePageBreaks();
 }
 
 
@@ -164,6 +166,8 @@ void ScTable::DeleteRow( SCCOL nStartCol, SCCOL nEndCol, SCROW nStartRow, SCSIZE
     }
 	if( !--nRecalcLvl )
 		SetDrawPageSize();
+
+    InvalidatePageBreaks();
 }
 
 
@@ -230,6 +234,8 @@ void ScTable::InsertCol( SCCOL nStartCol, SCROW nStartRow, SCROW nEndRow, SCSIZE
 	}
 	if( !--nRecalcLvl )
 		SetDrawPageSize();
+
+    InvalidatePageBreaks();
 }
 
 
@@ -272,6 +278,8 @@ void ScTable::DeleteCol( SCCOL nStartCol, SCROW nStartRow, SCROW nEndRow, SCSIZE
 	}
 	if( !--nRecalcLvl )
 		SetDrawPageSize();
+
+    InvalidatePageBreaks();
 }
 
 
@@ -638,29 +646,39 @@ void ScTable::CopyToTable(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2,
 			if (nRow1==0 && nRow2==MAXROW && pColWidth && pDestTab->pColWidth)
 				for (SCCOL i=nCol1; i<=nCol2; i++)
 				{
-					BOOL bChange = pCharts &&
-						( pDestTab->pColFlags[i] & CR_HIDDEN ) != ( pColFlags[i] & CR_HIDDEN );
+                    bool bHiddenChange = ( pDestTab->pColFlags[i] & CR_HIDDEN ) != ( pColFlags[i] & CR_HIDDEN );
+                    bool bChange = bHiddenChange || (pDestTab->pColWidth[i] != pColWidth[i]);
 					pDestTab->pColWidth[i] = pColWidth[i];
 					pDestTab->pColFlags[i] = pColFlags[i];
 					//!	Aenderungen zusammenfassen?
-					if (bChange)
+					if (bHiddenChange && pCharts)
 						pCharts->SetRangeDirty(ScRange( i, 0, nTab, i, MAXROW, nTab ));
+
+                    if (bChange)
+                        pDestTab->InvalidatePageBreaks();
 				}
 
 			if (nCol1==0 && nCol2==MAXCOL && pRowHeight && pDestTab->pRowHeight)
             {
+                bool bChange = pDestTab->pRowHeight->SumValues(nRow1, nRow2) != pRowHeight->SumValues(nRow1, nRow2);
+
+                if (bChange)
+                    pDestTab->InvalidatePageBreaks();
+
                 pDestTab->pRowHeight->CopyFrom( *pRowHeight, nRow1, nRow2);
 				for (SCROW i=nRow1; i<=nRow2; i++)
 				{
                     // TODO: might need some performance improvement, block
                     // operations instead of single GetValue()/SetValue() calls.
                     BYTE nThisRowFlags = pRowFlags->GetValue(i);
-					BOOL bChange = pCharts &&
-                        ( pDestTab->pRowFlags->GetValue(i) & CR_HIDDEN ) != ( nThisRowFlags & CR_HIDDEN );
+					bool bHiddenChange = ( pDestTab->pRowFlags->GetValue(i) & CR_HIDDEN ) != ( nThisRowFlags & CR_HIDDEN );
                     pDestTab->pRowFlags->SetValue( i, nThisRowFlags );
 					//!	Aenderungen zusammenfassen?
-					if (bChange)
+					if (bHiddenChange && pCharts)
 						pCharts->SetRangeDirty(ScRange( 0, i, nTab, MAXCOL, i, nTab ));
+
+                    if (bHiddenChange)
+                        pDestTab->InvalidatePageBreaks();
 				}
             }
 
@@ -711,6 +729,16 @@ void ScTable::CopyUpdated( const ScTable* pPosTab, ScTable* pDestTab ) const
 		aCol[i].CopyUpdated( pPosTab->aCol[i], pDestTab->aCol[i] );
 }
 
+void ScTable::InvalidateTableArea()
+{
+    bTableAreaValid = FALSE;
+}
+
+void ScTable::InvalidatePageBreaks()
+{
+    mbPageBreaksValid = false;
+}
+
 void ScTable::CopyScenarioTo( ScTable* pDestTab ) const
 {
 	DBG_ASSERT( bScenario, "bScenario == FALSE" );
@@ -1929,6 +1957,8 @@ void ScTable::SetColWidth( SCCOL nCol, USHORT nNewWidth )
 			pColWidth[nCol] = nNewWidth;
 			if( !--nRecalcLvl )
 				SetDrawPageSize();
+
+            InvalidatePageBreaks();
 		}
 	}
 	else
@@ -1958,6 +1988,8 @@ void ScTable::SetRowHeight( SCROW nRow, USHORT nNewHeight )
 			pRowHeight->SetValue( nRow, nNewHeight);
 			if( !--nRecalcLvl )
 				SetDrawPageSize();
+
+            InvalidatePageBreaks();
 		}
 	}
 	else
@@ -2039,6 +2071,9 @@ BOOL ScTable::SetRowHeightRange( SCROW nStartRow, SCROW nEndRow, USHORT nNewHeig
 		}
 		if( !--nRecalcLvl )
 			SetDrawPageSize();
+
+        if (bChanged)
+            InvalidatePageBreaks();
 	}
 	else
 	{
@@ -2284,6 +2319,8 @@ void ScTable::ShowRow(SCROW nRow, BOOL bShow)
 			ScChartListenerCollection* pCharts = pDocument->GetChartListenerCollection();
 			if ( pCharts )
 				pCharts->SetRangeDirty(ScRange( 0, nRow, nTab, MAXCOL, nRow, nTab ));
+
+            InvalidatePageBreaks();
 		}
 	}
 	else
@@ -2334,6 +2371,8 @@ void ScTable::DBShowRow(SCROW nRow, BOOL bShow)
 
 			if (pOutlineTable)
 				UpdateOutlineRow( nRow, nRow, bShow );
+
+            InvalidatePageBreaks();
 		}
 	}
 	else
@@ -2437,6 +2476,8 @@ void ScTable::ShowRows(SCROW nRow1, SCROW nRow2, BOOL bShow)
 			ScChartListenerCollection* pCharts = pDocument->GetChartListenerCollection();
 			if ( pCharts )
 				pCharts->SetRangeDirty(ScRange( 0, nStartRow, nTab, MAXCOL, nEndRow, nTab ));
+
+            InvalidatePageBreaks();
 		}
 
 		nStartRow = nEndRow + 1;
diff --git sc/source/core/data/table5.cxx sc/source/core/data/table5.cxx
index 3bb433c..513464d 100644
--- sc/source/core/data/table5.cxx
+++ sc/source/core/data/table5.cxx
@@ -68,6 +68,9 @@ void ScTable::UpdatePageBreaks( const ScRange* pUserArea )
 	if ( !pUserArea && !bPageSizeValid )
 		return;
 
+    if (mbPageBreaksValid)
+        return;
+
 	SfxStyleSheetBase* pStyle = pDocument->GetStyleSheetPool()->
 									Find( aPageStyle, SFX_STYLE_FAMILY_PAGE );
 	if ( !pStyle )
@@ -248,10 +251,13 @@ void ScTable::UpdatePageBreaks( const ScRange* pUserArea )
 		if (nEndRow+2 <= MAXROW)
             pRowFlags->AndValue( nEndRow+2, MAXROW, sal::static_int_cast<BYTE>(~CR_PAGEBREAK) );
 	}
+    mbPageBreaksValid = true;
 }
 
 void ScTable::RemoveManualBreaks()
 {
+    InvalidatePageBreaks();
+
 	if (pColFlags)
 		for (SCCOL nCol = 0; nCol <= MAXCOL; nCol++)
 			pColFlags[nCol] &= ~CR_MANUALBREAK;
@@ -278,6 +284,9 @@ void ScTable::SetPageSize( const Size& rSize )
 {
 	if ( rSize.Width() != 0 && rSize.Height() != 0 )
 	{
+        if (aPageSizeTwips != rSize)
+            InvalidatePageBreaks();
+
 		bPageSizeValid = TRUE;
 		aPageSizeTwips = rSize;
 	}
diff --git sc/source/ui/docshell/dbdocfun.cxx sc/source/ui/docshell/dbdocfun.cxx
index 9e2a647..0e670d8 100644
--- sc/source/ui/docshell/dbdocfun.cxx
+++ sc/source/ui/docshell/dbdocfun.cxx
@@ -938,7 +938,10 @@ BOOL ScDBDocFunc::Query( SCTAB nTab, const ScQueryParam& rQueryParam,
 	}
 
 	if (!bCopy)
+    {
+        pDoc->InvalidatePageBreaks(nTab);    
 		pDoc->UpdatePageBreaks( nTab );
+    }
 
     // #i23299# because of Subtotal functions, the whole rows must be set dirty
 	ScRange aDirtyRange( 0 , aLocalParam.nRow1, nDestTab,
diff --git sc/source/ui/docshell/docfunc.cxx sc/source/ui/docshell/docfunc.cxx
index 0d98486..29b4b23 100644
--- sc/source/ui/docshell/docfunc.cxx
+++ sc/source/ui/docshell/docfunc.cxx
@@ -3047,6 +3047,8 @@ BOOL ScDocFunc::InsertPageBreak( BOOL bColumn, const ScAddress& rPos,
 		pDoc->SetColFlags( static_cast<SCCOL>(nPos), nTab, nFlags );
 	else
 		pDoc->SetRowFlags( static_cast<SCROW>(nPos), nTab, nFlags );
+
+    pDoc->InvalidatePageBreaks(nTab);
 	pDoc->UpdatePageBreaks( nTab );
 
 	if (bColumn)
@@ -3103,6 +3105,8 @@ BOOL ScDocFunc::RemovePageBreak( BOOL bColumn, const ScAddress& rPos,
 		pDoc->SetColFlags( static_cast<SCCOL>(nPos), nTab, nFlags );
 	else
 		pDoc->SetRowFlags( static_cast<SCROW>(nPos), nTab, nFlags );
+
+    pDoc->InvalidatePageBreaks(nTab);
 	pDoc->UpdatePageBreaks( nTab );
 
 	if (bColumn)
diff --git sc/source/ui/docshell/olinefun.cxx sc/source/ui/docshell/olinefun.cxx
index ed5fb52..37023e2 100644
--- sc/source/ui/docshell/olinefun.cxx
+++ sc/source/ui/docshell/olinefun.cxx
@@ -692,6 +692,7 @@ BOOL ScOutlineDocFunc::ShowOutline( SCTAB nTab, BOOL bColumns, USHORT nLevel, US
 
 	pArray->SetVisibleBelow( nLevel, nEntry, TRUE, TRUE );
 
+    pDoc->InvalidatePageBreaks(nTab);
 	pDoc->UpdatePageBreaks( nTab );
 
 	if (bPaint)
@@ -757,6 +758,7 @@ BOOL ScOutlineDocFunc::HideOutline( SCTAB nTab, BOOL bColumns, USHORT nLevel, US
 
 	pArray->SetVisibleBelow( nLevel, nEntry, FALSE );
 
+    pDoc->InvalidatePageBreaks(nTab);
 	pDoc->UpdatePageBreaks( nTab );
 
 	if (bPaint)
diff --git sc/source/ui/undo/undocell.cxx sc/source/ui/undo/undocell.cxx
index 52c8bc0..9237578 100644
--- sc/source/ui/undo/undocell.cxx
+++ sc/source/ui/undo/undocell.cxx
@@ -587,6 +587,8 @@ void ScUndoPageBreak::DoChange( BOOL bInsertP ) const
 			pViewShell->InsertPageBreak(bColumn, FALSE);
 		else
 			pViewShell->DeletePageBreak(bColumn, FALSE);
+
+        pDocShell->GetDocument()->InvalidatePageBreaks(nTab);
 	}
 }
 
diff --git sc/source/ui/undo/undodat.cxx sc/source/ui/undo/undodat.cxx
index 36bb424..7420660 100644
--- sc/source/ui/undo/undodat.cxx
+++ sc/source/ui/undo/undodat.cxx
@@ -1032,7 +1032,10 @@ void __EXPORT ScUndoQuery::Undo()
 		pDoc->SetDBCollection( new ScDBCollection( *pUndoDB ), TRUE );
 
 	if (!bCopy)
+    {
+        pDoc->InvalidatePageBreaks(nTab);    
 		pDoc->UpdatePageBreaks( nTab );
+    }
 
     ScRange aDirtyRange( 0 , aQueryParam.nRow1, nTab,
         MAXCOL, aQueryParam.nRow2, nTab );
diff --git sc/source/ui/view/printfun.cxx sc/source/ui/view/printfun.cxx
index 020821d..4a8f0cd 100644
--- sc/source/ui/view/printfun.cxx
+++ sc/source/ui/view/printfun.cxx
@@ -2874,30 +2874,84 @@ void ScPrintFunc::CalcZoom( USHORT nRangeNo )						// Zoom berechnen
 	if (aTableParam.bScalePageNum)
 	{
 		nZoom = 100;
-		BOOL bFound = FALSE;
 		USHORT nPagesToFit = aTableParam.nScalePageNum;
-		while (!bFound)
-		{
-			CalcPages();
-			if ( nPagesX * nPagesY <= nPagesToFit || nZoom <= ZOOM_MIN )
-				bFound = TRUE;
-			else
-				--nZoom;
-		}
+
+        sal_uInt16 nLastFitZoom = 0, nLastNonFitZoom = 0;
+        while (true)
+        {
+            if (nZoom <= ZOOM_MIN)
+                break;
+
+            CalcPages();
+            bool bFitsPage = (nPagesX * nPagesY <= nPagesToFit);
+
+            if (bFitsPage)
+            {
+                if (nZoom == 100)
+                    // If it fits at 100 %, it's good enough for me.
+                    break;
+                
+                nLastFitZoom = nZoom;
+                nZoom = (nLastNonFitZoom + nZoom) / 2;
+
+                if (nLastFitZoom == nZoom)
+                    // It converged.  Use this zoom level.
+                    break;
+            }
+            else
+            {
+                if (nZoom - nLastFitZoom <= 1)
+                {
+                    nZoom = nLastFitZoom;
+                    CalcPages();
+                    break;
+                }
+
+                nLastNonFitZoom = nZoom;
+                nZoom = (nLastFitZoom + nZoom) / 2;
+            }
+        }
 	}
     else if (aTableParam.bScaleTo)
     {
         nZoom = 100;
-        BOOL bFound = FALSE;
         USHORT nW = aTableParam.nScaleWidth;
         USHORT nH = aTableParam.nScaleHeight;
-        while (!bFound)
+
+        sal_uInt16 nLastFitZoom = 0, nLastNonFitZoom = 0;
+        while (true)
         {
+            if (nZoom <= ZOOM_MIN)
+                break;
+
             CalcPages();
-            if ( ((!nW || (nPagesX <= nW)) && (!nH || (nPagesY <= nH))) || (nZoom <= ZOOM_MIN) )
-                bFound = TRUE;
+            bool bFitsPage = ((!nW || (nPagesX <= nW)) && (!nH || (nPagesY <= nH)));
+
+            if (bFitsPage)
+            {
+                if (nZoom == 100)
+                    // If it fits at 100 %, it's good enough for me.
+                    break;
+                
+                nLastFitZoom = nZoom;
+                nZoom = (nLastNonFitZoom + nZoom) / 2;
+
+                if (nLastFitZoom == nZoom)
+                    // It converged.  Use this zoom level.
+                    break;
+            }
             else
-                --nZoom;
+            {
+                if (nZoom - nLastFitZoom <= 1)
+                {
+                    nZoom = nLastFitZoom;
+                    CalcPages();
+                    break;
+                }
+
+                nLastNonFitZoom = nZoom;
+                nZoom = (nLastFitZoom + nZoom) / 2;
+            }
         }
     }
 	else if (aTableParam.bScaleAll)
