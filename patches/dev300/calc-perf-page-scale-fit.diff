diff --git sc/inc/table.hxx sc/inc/table.hxx
index a088fe5..1bd2d98 100644
--- sc/inc/table.hxx
+++ sc/inc/table.hxx
@@ -153,6 +153,7 @@ private:
 	Color			aScenarioColor;
 	USHORT			nScenarioFlags;
 	BOOL			bActiveScenario;
+    bool            mbPageBreaksValid;
 
 friend class ScDocument;					// fuer FillInfo
 friend class ScDocumentIterator;
@@ -339,7 +340,8 @@ public:
 
 	void		CopyUpdated( const ScTable* pPosTab, ScTable* pDestTab ) const;
 
-	void		InvalidateTableArea()						{ bTableAreaValid = FALSE; }
+    void        InvalidateTableArea();
+    void        InvalidatePageBreaks();
 
 	BOOL		GetCellArea( SCCOL& rEndCol, SCROW& rEndRow ) const;			// FALSE = leer
 	BOOL		GetTableArea( SCCOL& rEndCol, SCROW& rEndRow ) const;
diff --git sc/source/core/data/table1.cxx sc/source/core/data/table1.cxx
index 0e0b9c1..9b2c376 100644
--- sc/source/core/data/table1.cxx
+++ sc/source/core/data/table1.cxx
@@ -157,7 +157,8 @@ ScTable::ScTable( ScDocument* pDoc, SCTAB nNewTab, const String& rNewName,
 	pScenarioRanges( NULL ),
 	aScenarioColor( COL_LIGHTGRAY ),
 	nScenarioFlags( 0 ),
-	bActiveScenario( FALSE )
+	bActiveScenario( FALSE ),
+    mbPageBreaksValid(false)
 {
 
 	if (bColInfo)
diff --git sc/source/core/data/table2.cxx sc/source/core/data/table2.cxx
index 768eb27..2804e60 100644
--- sc/source/core/data/table2.cxx
+++ sc/source/core/data/table2.cxx
@@ -137,6 +137,8 @@ void ScTable::InsertRow( SCCOL nStartCol, SCCOL nEndCol, SCROW nStartRow, SCSIZE
 		aCol[j].InsertRow( nStartRow, nSize );
 	if( !--nRecalcLvl )
 		SetDrawPageSize();
+
+    InvalidatePageBreaks();
 }
 
 
@@ -164,6 +166,8 @@ void ScTable::DeleteRow( SCCOL nStartCol, SCCOL nEndCol, SCROW nStartRow, SCSIZE
     }
 	if( !--nRecalcLvl )
 		SetDrawPageSize();
+
+    InvalidatePageBreaks();
 }
 
 
@@ -711,6 +715,16 @@ void ScTable::CopyUpdated( const ScTable* pPosTab, ScTable* pDestTab ) const
 		aCol[i].CopyUpdated( pPosTab->aCol[i], pDestTab->aCol[i] );
 }
 
+void ScTable::InvalidateTableArea()
+{
+    bTableAreaValid = FALSE;
+}
+
+void ScTable::InvalidatePageBreaks()
+{
+    mbPageBreaksValid = false;
+}
+
 void ScTable::CopyScenarioTo( ScTable* pDestTab ) const
 {
 	DBG_ASSERT( bScenario, "bScenario == FALSE" );
@@ -1929,6 +1943,8 @@ void ScTable::SetColWidth( SCCOL nCol, USHORT nNewWidth )
 			pColWidth[nCol] = nNewWidth;
 			if( !--nRecalcLvl )
 				SetDrawPageSize();
+
+            InvalidatePageBreaks();
 		}
 	}
 	else
@@ -1958,6 +1974,8 @@ void ScTable::SetRowHeight( SCROW nRow, USHORT nNewHeight )
 			pRowHeight->SetValue( nRow, nNewHeight);
 			if( !--nRecalcLvl )
 				SetDrawPageSize();
+
+            InvalidatePageBreaks();
 		}
 	}
 	else
@@ -2039,6 +2057,9 @@ BOOL ScTable::SetRowHeightRange( SCROW nStartRow, SCROW nEndRow, USHORT nNewHeig
 		}
 		if( !--nRecalcLvl )
 			SetDrawPageSize();
+
+        if (bChanged)
+            InvalidatePageBreaks();
 	}
 	else
 	{
@@ -2284,6 +2305,8 @@ void ScTable::ShowRow(SCROW nRow, BOOL bShow)
 			ScChartListenerCollection* pCharts = pDocument->GetChartListenerCollection();
 			if ( pCharts )
 				pCharts->SetRangeDirty(ScRange( 0, nRow, nTab, MAXCOL, nRow, nTab ));
+
+            InvalidatePageBreaks();
 		}
 	}
 	else
@@ -2334,6 +2357,8 @@ void ScTable::DBShowRow(SCROW nRow, BOOL bShow)
 
 			if (pOutlineTable)
 				UpdateOutlineRow( nRow, nRow, bShow );
+
+            InvalidatePageBreaks();
 		}
 	}
 	else
@@ -2437,6 +2462,8 @@ void ScTable::ShowRows(SCROW nRow1, SCROW nRow2, BOOL bShow)
 			ScChartListenerCollection* pCharts = pDocument->GetChartListenerCollection();
 			if ( pCharts )
 				pCharts->SetRangeDirty(ScRange( 0, nStartRow, nTab, MAXCOL, nEndRow, nTab ));
+
+            InvalidatePageBreaks();
 		}
 
 		nStartRow = nEndRow + 1;
diff --git sc/source/core/data/table5.cxx sc/source/core/data/table5.cxx
index 3bb433c..328a2fd 100644
--- sc/source/core/data/table5.cxx
+++ sc/source/core/data/table5.cxx
@@ -68,6 +68,9 @@ void ScTable::UpdatePageBreaks( const ScRange* pUserArea )
 	if ( !pUserArea && !bPageSizeValid )
 		return;
 
+    if (mbPageBreaksValid)
+        return;
+
 	SfxStyleSheetBase* pStyle = pDocument->GetStyleSheetPool()->
 									Find( aPageStyle, SFX_STYLE_FAMILY_PAGE );
 	if ( !pStyle )
@@ -248,6 +251,7 @@ void ScTable::UpdatePageBreaks( const ScRange* pUserArea )
 		if (nEndRow+2 <= MAXROW)
             pRowFlags->AndValue( nEndRow+2, MAXROW, sal::static_int_cast<BYTE>(~CR_PAGEBREAK) );
 	}
+    mbPageBreaksValid = true;
 }
 
 void ScTable::RemoveManualBreaks()
@@ -278,6 +282,9 @@ void ScTable::SetPageSize( const Size& rSize )
 {
 	if ( rSize.Width() != 0 && rSize.Height() != 0 )
 	{
+        if (aPageSizeTwips != rSize)
+            InvalidatePageBreaks();
+
 		bPageSizeValid = TRUE;
 		aPageSizeTwips = rSize;
 	}
diff --git sc/source/ui/view/printfun.cxx sc/source/ui/view/printfun.cxx
index 020821d..4a8f0cd 100644
--- sc/source/ui/view/printfun.cxx
+++ sc/source/ui/view/printfun.cxx
@@ -2874,30 +2874,84 @@ void ScPrintFunc::CalcZoom( USHORT nRangeNo )						// Zoom berechnen
 	if (aTableParam.bScalePageNum)
 	{
 		nZoom = 100;
-		BOOL bFound = FALSE;
 		USHORT nPagesToFit = aTableParam.nScalePageNum;
-		while (!bFound)
-		{
-			CalcPages();
-			if ( nPagesX * nPagesY <= nPagesToFit || nZoom <= ZOOM_MIN )
-				bFound = TRUE;
-			else
-				--nZoom;
-		}
+
+        sal_uInt16 nLastFitZoom = 0, nLastNonFitZoom = 0;
+        while (true)
+        {
+            if (nZoom <= ZOOM_MIN)
+                break;
+
+            CalcPages();
+            bool bFitsPage = (nPagesX * nPagesY <= nPagesToFit);
+
+            if (bFitsPage)
+            {
+                if (nZoom == 100)
+                    // If it fits at 100 %, it's good enough for me.
+                    break;
+                
+                nLastFitZoom = nZoom;
+                nZoom = (nLastNonFitZoom + nZoom) / 2;
+
+                if (nLastFitZoom == nZoom)
+                    // It converged.  Use this zoom level.
+                    break;
+            }
+            else
+            {
+                if (nZoom - nLastFitZoom <= 1)
+                {
+                    nZoom = nLastFitZoom;
+                    CalcPages();
+                    break;
+                }
+
+                nLastNonFitZoom = nZoom;
+                nZoom = (nLastFitZoom + nZoom) / 2;
+            }
+        }
 	}
     else if (aTableParam.bScaleTo)
     {
         nZoom = 100;
-        BOOL bFound = FALSE;
         USHORT nW = aTableParam.nScaleWidth;
         USHORT nH = aTableParam.nScaleHeight;
-        while (!bFound)
+
+        sal_uInt16 nLastFitZoom = 0, nLastNonFitZoom = 0;
+        while (true)
         {
+            if (nZoom <= ZOOM_MIN)
+                break;
+
             CalcPages();
-            if ( ((!nW || (nPagesX <= nW)) && (!nH || (nPagesY <= nH))) || (nZoom <= ZOOM_MIN) )
-                bFound = TRUE;
+            bool bFitsPage = ((!nW || (nPagesX <= nW)) && (!nH || (nPagesY <= nH)));
+
+            if (bFitsPage)
+            {
+                if (nZoom == 100)
+                    // If it fits at 100 %, it's good enough for me.
+                    break;
+                
+                nLastFitZoom = nZoom;
+                nZoom = (nLastNonFitZoom + nZoom) / 2;
+
+                if (nLastFitZoom == nZoom)
+                    // It converged.  Use this zoom level.
+                    break;
+            }
             else
-                --nZoom;
+            {
+                if (nZoom - nLastFitZoom <= 1)
+                {
+                    nZoom = nLastFitZoom;
+                    CalcPages();
+                    break;
+                }
+
+                nLastNonFitZoom = nZoom;
+                nZoom = (nLastFitZoom + nZoom) / 2;
+            }
         }
     }
 	else if (aTableParam.bScaleAll)
