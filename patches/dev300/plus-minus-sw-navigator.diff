--- sw/source/ui/utlui/content.cxx.old	2009-04-02 10:50:42.000000000 +0000
+++ sw/source/ui/utlui/content.cxx	2009-04-06 16:41:38.000000000 +0000
@@ -1230,19 +1230,64 @@ void  SwContentTree::RequestingChilds( S
 			SwContentType* pCntType = (SwContentType*)pParent->GetUserData();
 
 			sal_uInt16 nCount = pCntType->GetMemberCount();
-			for(sal_uInt16 i = 0; i < nCount; i++)
-			{
-				const SwContent* pCnt = pCntType->GetMember(i);
-				if(pCnt)
-				{
-					String sEntry = pCnt->GetName();
-					if(!sEntry.Len())
-						sEntry = sSpace;
-                    InsertEntry(sEntry, pParent,
-							sal_False, LIST_APPEND, (void*)pCnt);
-				}
-
-			}
+             /**************************************************************
+                 Add for outline plus/minus
+             ***************************************************************/
+             if(pCntType->GetType() == CONTENT_TYPE_OUTLINE)
+             {
+                 SvLBoxEntry* pChild = 0;
+                 for(sal_uInt16 i = 0; i < nCount; i++)
+                 {
+                     const SwContent* pCnt = pCntType->GetMember(i);
+                     if(pCnt)
+                     {
+                         sal_uInt16 nLevel = ((SwOutlineContent*)pCnt)->GetOutlineLevel();
+                         String sEntry = pCnt->GetName();
+                         if(!sEntry.Len())
+                             sEntry = sSpace;
+                         if(!pChild || (nLevel == 0))
+                             pChild = InsertEntry(sEntry, pParent,
+                                         sal_False, LIST_APPEND,(void*)pCnt);
+                         else
+                         {
+                             //back search parent.
+                             if(((SwOutlineContent*)pCntType->GetMember(i-1))->GetOutlineLevel() < nLevel)
+                                 pChild = InsertEntry(sEntry, pChild,
+                                         sal_False, LIST_APPEND, (void*)pCnt);
+                             else
+                             {
+                                 pChild = Prev(pChild);
+                                 while(pChild &&
+                                         lcl_IsContent(pChild) &&
+                                         !(((SwOutlineContent*)pChild->GetUserData())->GetOutlineLevel() < nLevel)
+                                      )
+                                 {
+                                     pChild = Prev(pChild);
+                                 }
+                                 if(pChild)
+                                     pChild = InsertEntry(sEntry, pChild,
+                                                 sal_False, LIST_APPEND, (void*)pCnt);
+                             }
+                        }
+                     }
+                 }
+             }
+             else
+             {
+ 			    for(sal_uInt16 i = 0; i < nCount; i++)
+ 			    {
+ 				    const SwContent* pCnt = pCntType->GetMember(i);
+ 				    if(pCnt)
+ 				    {
+ 					    String sEntry = pCnt->GetName();
+ 					    if(!sEntry.Len())
+  						sEntry = sSpace;
+ 					    InsertEntry(sEntry, pParent,
+ 							    sal_False, LIST_APPEND, (void*)pCnt);
+ 				    }
+  
+ 			    }
+            }
 		}
 	}
 }
@@ -1253,7 +1298,7 @@ void  SwContentTree::RequestingChilds( S
 
 sal_Bool  SwContentTree::Expand( SvLBoxEntry* pParent )
 {
-	if(!bIsRoot)
+    if(!bIsRoot || ((SwContentType*)pParent->GetUserData())->GetType() == CONTENT_TYPE_OUTLINE)
 	{
 		if(lcl_IsContentType(pParent))
 		{
@@ -1266,6 +1311,19 @@ sal_Bool  SwContentTree::Expand( SvLBoxE
 			}
 			else
 				nHiddenBlock |= nOr;
+            if((pCntType->GetType() == CONTENT_TYPE_OUTLINE))
+            {
+                sal_Bool bBool = SvTreeListBox::Expand(pParent);
+                SvLBoxEntry* pChild = Next(pParent);
+                while(pChild && lcl_IsContent(pChild) && pParent->HasChilds())
+                {
+                    if(pChild->HasChilds())
+                        SvTreeListBox::Expand(pChild);
+                    pChild = Next(pChild);
+                }
+                return bBool;
+            }
+
 		}
 	}
 	return SvTreeListBox::Expand(pParent);
@@ -1278,10 +1336,12 @@ sal_Bool  SwContentTree::Expand( SvLBoxE
 sal_Bool  SwContentTree::Collapse( SvLBoxEntry* pParent )
 {
 	sal_Bool bRet;
-	if(!bIsRoot)
+    if(!bIsRoot || ((SwContentType*)pParent->GetUserData())->GetType() == CONTENT_TYPE_OUTLINE)
 	{
 		if(lcl_IsContentType(pParent))
 		{
+            if(bIsRoot)
+                return bRet = sal_False;
 			SwContentType* pCntType = (SwContentType*)pParent->GetUserData();
 			sal_uInt16 nAnd = 1 << pCntType->GetType();
 			nAnd = ~nAnd;
@@ -1296,7 +1356,8 @@ sal_Bool  SwContentTree::Collapse( SvLBo
 			bRet = SvTreeListBox::Collapse(pParent);
 	}
 	else
-		bRet = sal_False;
+//		bRet = sal_False;
+        bRet = SvTreeListBox::Collapse(pParent);
 	return bRet;
 }
 
@@ -1313,9 +1374,9 @@ IMPL_LINK( SwContentTree, ContentDoubleC
 	DBG_ASSERT(pEntry, "kein aktueller Eintrag!");
 	if(pEntry)
 	{
-		if(lcl_IsContentType(pEntry))
+        if(lcl_IsContentType(pEntry) && !pEntry->HasChilds())
 			RequestingChilds(pEntry);
-		else if(bIsActive || bIsConstant)
+        else if(!lcl_IsContentType(pEntry) && (bIsActive || bIsConstant))
 		{
 			if(bIsConstant)
 			{
@@ -1359,9 +1420,14 @@ void SwContentTree::Display( sal_Bool bA
             nOldScrollPos = pVScroll->GetThumbPos();
 
         sEntryName = GetEntryText(pOldSelEntry);
+        SvLBoxEntry* pParantEntry = pOldSelEntry;
+        while( GetParent(pParantEntry))
+        {
+            pParantEntry = GetParent(pParantEntry);
+        }
 		if(GetParent(pOldSelEntry))
 		{
-			nEntryRelPos = (sal_uInt16)(GetModel()->GetAbsPos(pOldSelEntry) - GetModel()->GetAbsPos(GetParent(pOldSelEntry)));
+            nEntryRelPos = (sal_uInt16)(GetModel()->GetAbsPos(pOldSelEntry) - GetModel()->GetAbsPos(pParantEntry));
 		}
 	}
 	Clear();
@@ -1455,18 +1521,24 @@ void SwContentTree::Display( sal_Bool bA
 					(*ppRootContentT)->GetName(), rImage, rImage,
 						0, sal_False, LIST_APPEND, *ppRootContentT);
 
-			for(sal_uInt16 i = 0; i < (*ppRootContentT)->GetMemberCount(); i++ )
-			{
-				const SwContent* pCnt = (*ppRootContentT)->GetMember(i);
-				if(pCnt)
-				{
-					String sEntry = pCnt->GetName();
-					if(!sEntry.Len())
-						sEntry = sSpace;
-                    InsertEntry( sEntry, pParent,
-								sal_False, LIST_APPEND, (void*)pCnt);
-				}
-			}
+            if(nRootType != CONTENT_TYPE_OUTLINE)
+  			{
+                SvLBoxEntry* pEntry;
+ 			    for(sal_uInt16 i = 0; i < (*ppRootContentT)->GetMemberCount(); i++ )
+ 			    {
+ 				    const SwContent* pCnt = (*ppRootContentT)->GetMember(i);
+ 				    if(pCnt)
+ 				    {
+ 					    String sEntry = pCnt->GetName();
+ 					    if(!sEntry.Len())
+ 						    sEntry = sSpace;
+ 					    InsertEntry( sEntry, pParent,
+ 						    		sal_False, LIST_APPEND, (void*)pCnt);
+ 				    }
+ 			    }
+             }
+             else
+                 RequestingChilds(pParent);
 			Expand(pParent);
 			if( nRootType == CONTENT_TYPE_OUTLINE && bIsActive )
 			{
@@ -1841,9 +1913,9 @@ sal_Bool SwContentTree::HasContentChange
 					// or if the visibility of objects (frames, sections, tables) has changed
 					// i.e. in header/footer
 					pArrType->FillMemberList(&bLevelOrVisibiblityChanged);
-					if(bLevelOrVisibiblityChanged)
-						bInvalidate = sal_True;
 					sal_uInt16 nChildCount = (sal_uInt16)GetChildCount(pEntry);
+                    if((nType == CONTENT_TYPE_OUTLINE) && bLevelOrVisibiblityChanged)
+                        bRepaint = sal_True;
 					if(bLevelOrVisibiblityChanged)
 						bInvalidate = sal_True;
 
@@ -2748,6 +2820,10 @@ sal_Bool  SwContentTree::Select( SvLBoxE
 		return sal_False;
 	sal_Bool bEnable = sal_False;
 	SvLBoxEntry* pParentEntry = GetParent(pEntry);
+    while(pParentEntry && (!lcl_IsContentType(pParentEntry)))
+    {
+        pParentEntry = GetParent(pParentEntry);
+    }
 	if(!bIsLastReadOnly && (!IsVisible() ||
 		(bIsRoot && nRootType == CONTENT_TYPE_OUTLINE && pParentEntry ||
 			lcl_IsContent(pEntry) && ((SwContentType*)pParentEntry->GetUserData())->GetType() == CONTENT_TYPE_OUTLINE)))
