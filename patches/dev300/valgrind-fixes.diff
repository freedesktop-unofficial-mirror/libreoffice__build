Fix stlport-debug complaints, fix valgrind warnings

From: Thorsten Behrens <thb@openoffice.org>


---

 framework/source/layoutmanager/layoutmanager.cxx |   39 ++++++++++++----------
 sc/source/core/data/sortparam.cxx                |   14 +++++---
 sc/source/ui/view/viewdata.cxx                   |   17 ++++++++--
 4 files changed, 52 insertions(+), 25 deletions(-)


diff --git framework/source/layoutmanager/layoutmanager.cxx framework/source/layoutmanager/layoutmanager.cxx
index f4d4f2c..ca970df 100644
--- framework/source/layoutmanager/layoutmanager.cxx
+++ framework/source/layoutmanager/layoutmanager.cxx
@@ -249,24 +249,27 @@ bool LayoutManager::UIElement::operator< ( const LayoutManager::UIElement& aUIEl
 
 LayoutManager::UIElement& LayoutManager::UIElement::operator= ( const LayoutManager::UIElement& rUIElement )
 {
-    m_aType             = rUIElement.m_aType;
-    m_aName             = rUIElement.m_aName;
-    m_aUIName           = rUIElement.m_aUIName;
-    m_xUIElement        = rUIElement.m_xUIElement;
-    m_bFloating         = rUIElement.m_bFloating;
-    m_bVisible          = rUIElement.m_bVisible;
-    m_bUserActive       = rUIElement.m_bUserActive;
-    m_bCreateNewRowCol0 = rUIElement.m_bCreateNewRowCol0;
-    m_bDeactiveHide     = rUIElement.m_bDeactiveHide;
-    m_bMasterHide       = rUIElement.m_bMasterHide;
-    m_bContextSensitive = rUIElement.m_bContextSensitive;
-    m_bContextActive    = rUIElement.m_bContextActive;
-    m_bNoClose          = rUIElement.m_bNoClose;
-    m_bSoftClose        = rUIElement.m_bSoftClose;
-    m_bStateRead        = rUIElement.m_bStateRead;
-    m_nStyle            = rUIElement.m_nStyle;
-    m_aDockedData       = rUIElement.m_aDockedData;
-    m_aFloatingData     = rUIElement.m_aFloatingData;
+    if (&rUIElement != this)
+    {
+        m_aType             = rUIElement.m_aType;
+        m_aName             = rUIElement.m_aName;
+        m_aUIName           = rUIElement.m_aUIName;
+        m_xUIElement        = rUIElement.m_xUIElement;
+        m_bFloating         = rUIElement.m_bFloating;
+        m_bVisible          = rUIElement.m_bVisible;
+        m_bUserActive       = rUIElement.m_bUserActive;
+        m_bCreateNewRowCol0 = rUIElement.m_bCreateNewRowCol0;
+        m_bDeactiveHide     = rUIElement.m_bDeactiveHide;
+        m_bMasterHide       = rUIElement.m_bMasterHide;
+        m_bContextSensitive = rUIElement.m_bContextSensitive;
+        m_bContextActive    = rUIElement.m_bContextActive;
+        m_bNoClose          = rUIElement.m_bNoClose;
+        m_bSoftClose        = rUIElement.m_bSoftClose;
+        m_bStateRead        = rUIElement.m_bStateRead;
+        m_nStyle            = rUIElement.m_nStyle;
+        m_aDockedData       = rUIElement.m_aDockedData;
+        m_aFloatingData     = rUIElement.m_aFloatingData;
+    }
     return *this;
 }
 
diff --git sc/source/core/data/sortparam.cxx sc/source/core/data/sortparam.cxx
index 332772e..73dafa7 100644
--- sc/source/core/data/sortparam.cxx
+++ sc/source/core/data/sortparam.cxx
@@ -55,7 +55,8 @@ ScSortParam::ScSortParam( const ScSortParam& r ) :
         bUserDef(r.bUserDef),nUserIndex(r.nUserIndex),bIncludePattern(r.bIncludePattern),
         bInplace(r.bInplace),
         nDestTab(r.nDestTab),nDestCol(r.nDestCol),nDestRow(r.nDestRow),
-        aCollatorLocale( r.aCollatorLocale ), aCollatorAlgorithm( r.aCollatorAlgorithm )
+        aCollatorLocale( r.aCollatorLocale ), aCollatorAlgorithm( r.aCollatorAlgorithm ), 
+        nCompatHeader( r.nCompatHeader )
 {
     for (USHORT i=0; i<MAXSORT; i++)
     {
@@ -96,9 +97,9 @@ ScSortParam& ScSortParam::operator=( const ScSortParam& r )
     nCol2			= r.nCol2;
     nRow2			= r.nRow2;
     bHasHeader		= r.bHasHeader;
+    bByRow			= r.bByRow;
     bCaseSens		= r.bCaseSens;
     bNaturalSort	= r.bNaturalSort;
-    bByRow			= r.bByRow;
     bUserDef		= r.bUserDef;
     nUserIndex		= r.nUserIndex;
     bIncludePattern	= r.bIncludePattern;
@@ -108,6 +109,7 @@ ScSortParam& ScSortParam::operator=( const ScSortParam& r )
     nDestRow		= r.nDestRow;
     aCollatorLocale			= r.aCollatorLocale;
     aCollatorAlgorithm		= r.aCollatorAlgorithm;
+    nCompatHeader   = r.nCompatHeader;
 
     for (USHORT i=0; i<MAXSORT; i++)
     {
@@ -166,11 +168,12 @@ BOOL ScSortParam::operator==( const ScSortParam& rOther ) const
 
 ScSortParam::ScSortParam( const ScSubTotalParam& rSub, const ScSortParam& rOld ) :
         nCol1(rSub.nCol1),nRow1(rSub.nRow1),nCol2(rSub.nCol2),nRow2(rSub.nRow2),
-        bHasHeader(TRUE),bByRow(TRUE),bCaseSens(rSub.bCaseSens),
+        bHasHeader(TRUE),bByRow(TRUE),bCaseSens(rSub.bCaseSens),bNaturalSort(rOld.bNaturalSort),
         bUserDef(rSub.bUserDef),nUserIndex(rSub.nUserIndex),bIncludePattern(rSub.bIncludePattern),
         bInplace(TRUE),
         nDestTab(0),nDestCol(0),nDestRow(0),
-        aCollatorLocale( rOld.aCollatorLocale ), aCollatorAlgorithm( rOld.aCollatorAlgorithm )
+        aCollatorLocale( rOld.aCollatorLocale ), aCollatorAlgorithm( rOld.aCollatorAlgorithm ),
+        nCompatHeader( rOld.nCompatHeader )
 {
     USHORT nNewCount = 0;
     USHORT i;
@@ -223,10 +226,11 @@ ScSortParam::ScSortParam( const ScSubTotalParam& rSub, const ScSortParam& rOld )
 ScSortParam::ScSortParam( const ScQueryParam& rParam, SCCOL nCol ) :
         nCol1(nCol),nRow1(rParam.nRow1),nCol2(nCol),nRow2(rParam.nRow2),
         bHasHeader(rParam.bHasHeader),bByRow(TRUE),bCaseSens(rParam.bCaseSens),
+        bNaturalSort(FALSE),
 //! TODO: what about Locale and Algorithm?
         bUserDef(FALSE),nUserIndex(0),bIncludePattern(FALSE),
         bInplace(TRUE),
-        nDestTab(0),nDestCol(0),nDestRow(0)
+        nDestTab(0),nDestCol(0),nDestRow(0), nCompatHeader(2)
 {
     bDoSort[0] = TRUE;
     nField[0] = nCol;
diff --git sc/source/ui/view/viewdata.cxx sc/source/ui/view/viewdata.cxx
index d1a163b..6dfb1b1 100644
--- sc/source/ui/view/viewdata.cxx
+++ sc/source/ui/view/viewdata.cxx
@@ -667,10 +667,17 @@ void ScViewData::SetZoomType( SvxZoomType eNew, std::vector< SCTAB >& tabs )
 
     std::vector< SCTAB >::iterator it_end = tabs.end();
     std::vector< SCTAB >::iterator it = tabs.begin();
-    for ( SCTAB i = ( bAll ? 0 : *it ); ( bAll ? i <= MAXTAB :  it != it_end  ); ++i , ++it )
+
+    SCTAB i = ( bAll ? 0 : *it );
+    while (  bAll ? i <= MAXTAB :  it != it_end )
     {
         if ( pTabData[i] )
             pTabData[i]->eZoomType = eNew;
+
+        if (bAll)
+            ++i;
+        else
+            ++it, i = *it;
     } 
 
     if ( bAll )
@@ -715,7 +722,8 @@ void ScViewData::SetZoom( const Fraction& rNewX, const Fraction& rNewY, std::vec
     std::vector< SCTAB >::iterator it_end = tabs.end();
     std::vector< SCTAB >::iterator it = tabs.begin();
 
-    for ( SCTAB i = ( bAll ? 0 : *it ); ( bAll ? i <= MAXTAB :  it != it_end  ); ++i , ++it )
+    SCTAB i = ( bAll ? 0 : *it );
+    while (  bAll ? i <= MAXTAB :  it != it_end )
     {
         if ( pTabData[i] )
         {
@@ -730,6 +738,11 @@ void ScViewData::SetZoom( const Fraction& rNewX, const Fraction& rNewY, std::vec
                 pTabData[i]->aZoomY = aValidY;
             }
         }
+
+        if (bAll)
+            ++i;
+        else
+            ++it, i = *it;
     }
     RefreshZoom();
 }
