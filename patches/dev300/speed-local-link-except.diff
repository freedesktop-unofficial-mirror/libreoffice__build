diff --git codemaker/source/cppumaker/cppumaker.cxx codemaker/source/cppumaker/cppumaker.cxx
index d2be93f..31bf594 100644
--- codemaker/source/cppumaker/cppumaker.cxx
+++ codemaker/source/cppumaker/cppumaker.cxx
@@ -37,6 +37,7 @@
 
 #include "codemaker/typemanager.hxx"
 #include "codemaker/generatedtypeset.hxx"
+#include "codemaker/commoncpp.hxx"
 
 #include "cppuoptions.hxx"
 #include "cpputype.hxx"
@@ -241,6 +242,43 @@ SAL_IMPLEMENT_MAIN_WITH_ARGS(argc, argv)
 		exit(99);
 	}
 
+    if (!aExceptionTypeNames.empty() && options.isValid("-E"))
+    {
+        OString outFile = options.getOption("-E");
+        FILE *excepts = fopen (outFile, "w+");
+        if (!excepts)
+        {
+            fprintf(stderr, "%s ERROR: cannot open '%s'\n",
+                    options.getProgramName().getStr(), outFile.getStr());
+            exit(98);
+        }
+        fprintf (excepts, "// This file is autogenerated by cppumaker\n");
+        fprintf (excepts, "// include exception headers\n");
+
+        ::std::list<rtl::OString>::const_iterator iter;
+
+        for (iter = aExceptionTypeNames.begin();
+             iter != aExceptionTypeNames.end(); iter++)
+        {
+            rtl::OString aStr = *iter;
+            fprintf (excepts, "#include <%s.hpp>\n", aStr.getStr());
+        }
+    
+        fprintf (excepts, "// dummy method\n");
+        fprintf (excepts, "extern void force_emit ()\n");
+        fprintf (excepts, "{\n");
+        for (iter = aExceptionTypeNames.begin();
+             iter != aExceptionTypeNames.end(); iter++) {
+            fprintf (excepts, "    try {\n");
+            fprintf (excepts, "        force_emit ();\n");
+            fprintf (excepts, "    }\n");
+            OString aStr = codemaker::cpp::scopedCppName (*iter);
+            fprintf (excepts, "catch (const %s &r) {} \n", aStr.getStr());
+        }
+        fprintf (excepts, "}\n\n");
+        fclose (excepts);
+    }
+
 	return 0;
 }
 
diff --git codemaker/source/cppumaker/cppuoptions.cxx codemaker/source/cppumaker/cppuoptions.cxx
index cdce000..1f9119b 100644
--- codemaker/source/cppumaker/cppuoptions.cxx
+++ codemaker/source/cppumaker/cppuoptions.cxx
@@ -70,6 +70,9 @@ sal_Bool CppuOptions::initOptions(int ac, char* av[], sal_Bool bCmdFile)
 		{
 			switch (av[i][1])
 			{
+                case 'E':
+                    m_options["-E"] = OString(av[i] + 2);
+                    break;
 				case 'O':
 					if (av[i][2] == '\0')
 					{
@@ -342,6 +345,7 @@ OString	CppuOptions::prepareHelp()
 	help += "    -G         = generate only target files which does not exists.\n";
 	help += "    -Gc        = generate only target files which content will be changed.\n";
 	help += "    -X<file>   = extra types which will not be taken into account for generation.\n";
+    help += "    -E<file>   = generate exception type library for faster Linux linking.\n";
 	help += prepareVersion();
 	
 	return help;
diff --git codemaker/source/cppumaker/cpputype.cxx codemaker/source/cppumaker/cpputype.cxx
index 69fa71a..7a2359f 100644
--- codemaker/source/cppumaker/cpputype.cxx
+++ codemaker/source/cppumaker/cpputype.cxx
@@ -56,6 +56,8 @@
 using namespace rtl;
 using namespace codemaker::cpp;
 
+::std::list<rtl::OString> aExceptionTypeNames;
+
 namespace {
 
 rtl::OString translateSimpleUnoType(rtl::OString const & unoType, bool cppuUnoType=false) {
@@ -3077,6 +3079,13 @@ sal_Bool ExceptionType::dumpHFile(
 	return sal_True;
 }
 
+bool
+ExceptionType::dumpFiles(CppuOptions * options, rtl::OString const & outPath)
+{
+    aExceptionTypeNames.push_back(m_typeName);
+    return CppuType::dumpFiles(options, outPath);
+}
+
 sal_Bool ExceptionType::dumpDeclaration(FileStream& o)
 	throw( CannotDumpException )
 {
diff --git codemaker/source/cppumaker/cpputype.hxx codemaker/source/cppumaker/cpputype.hxx
index c8c5f34..2140f3e 100644
--- codemaker/source/cppumaker/cpputype.hxx
+++ codemaker/source/cppumaker/cpputype.hxx
@@ -56,6 +56,9 @@ enum CppuTypeDecl
 class CppuOptions;
 class FileStream;
 
+#include <list>
+extern ::std::list<rtl::OString> aExceptionTypeNames;
+
 class CppuType
 {
 public:
@@ -295,6 +298,7 @@ public:
 
 	virtual ~ExceptionType();
 
+    bool        dumpFiles(CppuOptions * options, rtl::OString const & outPath);
 	sal_Bool	dumpDeclaration(FileStream& o) throw( CannotDumpException );
 	sal_Bool	dumpHFile(FileStream& o, codemaker::cppumaker::Includes & includes) throw( CannotDumpException );
 	sal_Bool	dumpHxxFile(FileStream& o, codemaker::cppumaker::Includes & includes) throw( CannotDumpException );
--- cppu/prj/build.lst
+++ cppu/prj/build.lst
@@ -8,3 +8,4 @@ cu	cppu\source\cppu				nmake	-	all	cu_cppu cu_inc NULL
 cu	cppu\source\AffineBridge	    nmake	-	all	cu_AffineBridge cu_inc NULL
 cu	cppu\source\LogBridge	        nmake	-	all	cu_LogBridge cu_inc NULL
 cu	cppu\util						nmake	-	all	cu_util cu_thpool cu_typelib cu_cppu cu_uno cu_helper_purpenv cu_UnsafeBridge cu_AffineBridge cu_LogBridge NULL
+cu      cppu\source\except                      nmake   -       all cu_except cu_util NULL
diff --git cppu/prj/d.lst cppu/prj/d.lst
index f019d78..c40325b 100644
--- cppu/prj/d.lst
+++ cppu/prj/d.lst
@@ -56,6 +56,7 @@ mkdir: %_DEST%\inc%_EXT%\uno
 ..\%__SRC%\lib\icppu.lib %_DEST%\lib%_EXT%\icppu.lib
 ..\%__SRC%\bin\cppu* %_DEST%\bin%_EXT%\*
 ..\%__SRC%\lib\libuno_cppu.*.* %_DEST%\lib%_EXT%\*
+..\%__SRC%\lib\libexlink* %_DEST%\lib%_EXT%\*
 
 ..\%__SRC%\lib\ipurpenvhelper*        %_DEST%\lib%_EXT%\*
 ..\%__SRC%\bin\purpe*.dll     %_DEST%\bin%_EXT%\*
diff --git cppu/source/except/except.cxx cppu/source/except/except.cxx
new file mode 100644
index 0000000..4406885
--- /dev/null
+++ cppu/source/except/except.cxx
@@ -0,0 +1,15 @@
+#include <sal/config.h>
+#include <cppu/macros.hxx>
+#include <com/sun/star/uno/Any.hxx>
+#include <com/sun/star/uno/Reference.hxx>
+
+// We don't want to hide all this shared goodness:
+#undef CPPU_GCC_DLLPUBLIC_EXPORT
+#define CPPU_GCC_DLLPUBLIC_EXPORT 
+#undef CPPU_GCC_DLLPRIVATE
+#define CPPU_GCC_DLLPRIVATE 
+
+#define CPPU_INTERNAL_IMPL 1 
+
+#include <linking_catch.hxx>
+
diff --git cppu/source/except/makefile.mk cppu/source/except/makefile.mk
new file mode 100644
index 0000000..66e6328
--- /dev/null
+++ cppu/source/except/makefile.mk
@@ -0,0 +1,21 @@
+# --- Settings -----------------------------------------------------
+
+PRJ=..$/..
+
+PRJNAME=cppu
+TARGET=unotypes
+ENABLE_EXCEPTIONS=TRUE
+
+.INCLUDE :  settings.mk
+
+LIB1TARGET= $(SLB)$/$(TARGET).lib
+LIB1OBJFILES= $(SLO)$/except.obj
+
+SHL1TARGET=exlink$(DLLPOSTFIX)
+SHL1LIBS=$(LIB1TARGET)
+SHL1STDLIBS= $(SALLIB) $(SALHELPERLIB) $(REGLIB) $(CPPULIB)
+
+# --- Targets -------------------------------------------------------
+
+.INCLUDE :  target.mk
+
diff --git offuh/source/makefile.mk offuh/source/makefile.mk
index 8c490a8..a257099 100644
--- offuh/source/makefile.mk
+++ offuh/source/makefile.mk
@@ -41,7 +41,7 @@ TARGET=		offuh
 
 $(MISC)$/$(TARGET).don : $(UNOUCRRDB)
 	@@-$(RM) $@
-	$(CPPUMAKER) -Gc $(CPPUMAKERFLAGS) -B$(UNOUCRBASE) -O$(UNOUCROUT) $(UNOUCRRDB) && echo > $@
+    $(CPPUMAKER) -E$(UNOUCROUT)/linking_catch.hxx -Gc $(CPPUMAKERFLAGS) -B$(UNOUCRBASE) -O$(UNOUCROUT) $(UNOUCRRDB) && echo > $@
 
 # --- Targets ------------------------------------------------------
 
diff --git scp2/source/ooo/file_library_ooo.scp scp2/source/ooo/file_library_ooo.scp
index dbbe327..abc0c7c 100644
--- scp2/source/ooo/file_library_ooo.scp
+++ scp2/source/ooo/file_library_ooo.scp
@@ -200,6 +200,15 @@ STD_UNO_LIB_FILE( gid_File_Lib_Ctl , ctl)
 
 STD_LIB_FILE( gid_File_Lib_Cui, cui)
 
+#ifdef LINUX
+File gid_File_Lib_ExLib
+    TXT_FILE_BODY;
+    Styles = (PACKED,PATCH);
+    Dir = gid_Dir_Program;
+    Name = LIBNAME(exlink);
+End
+#endif
+
 #ifndef SYSTEM_CURL
 
 File gid_File_Lib_Curl
