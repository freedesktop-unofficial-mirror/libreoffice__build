From 41e4036d7ecb29a9cc7ecc000d4ffeb0feeee6f3 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:57:05 +0200
Subject: [PATCH 243/878] speed-local-link-except.diff

---
 codemaker/source/cppumaker/cppumaker.cxx   |   38 ++++++++++++++++++++++++++++
 codemaker/source/cppumaker/cppuoptions.cxx |    4 +++
 codemaker/source/cppumaker/cpputype.cxx    |    9 ++++++
 codemaker/source/cppumaker/cpputype.hxx    |    4 +++
 cppu/prj/build.lst                         |    1 +
 cppu/prj/d.lst                             |    1 +
 cppu/source/except/except.cxx              |   14 ++++++++++
 cppu/source/except/makefile.mk             |   20 ++++++++++++++
 offuh/source/makefile.mk                   |    2 +-
 scp2/source/ooo/file_library_ooo.scp       |    9 ++++++
 10 files changed, 101 insertions(+), 1 deletions(-)
 create mode 100644 cppu/source/except/except.cxx
 create mode 100644 cppu/source/except/makefile.mk

diff --git a/codemaker/source/cppumaker/cppumaker.cxx b/codemaker/source/cppumaker/cppumaker.cxx
index 4d99a4e..5c1f1f9 100644
--- a/codemaker/source/cppumaker/cppumaker.cxx
+++ b/codemaker/source/cppumaker/cppumaker.cxx
@@ -34,6 +34,7 @@
 
 #include "codemaker/typemanager.hxx"
 #include "codemaker/generatedtypeset.hxx"
+#include "codemaker/commoncpp.hxx"
 
 #include "cppuoptions.hxx"
 #include "cpputype.hxx"
@@ -238,6 +239,43 @@ SAL_IMPLEMENT_MAIN_WITH_ARGS(argc, argv)
         exit(99);
     }
 
+    if (!aExceptionTypeNames.empty() && options.isValid("-E"))
+    {
+        OString outFile = options.getOption("-E");
+        FILE *excepts = fopen (outFile, "w+");
+        if (!excepts)
+        {
+            fprintf(stderr, "%s ERROR: cannot open '%s'\n",
+                    options.getProgramName().getStr(), outFile.getStr());
+            exit(98);
+        }
+        fprintf (excepts, "// This file is autogenerated by cppumaker\n");
+        fprintf (excepts, "// include exception headers\n");
+
+        ::std::list<rtl::OString>::const_iterator iter;
+
+        for (iter = aExceptionTypeNames.begin();
+             iter != aExceptionTypeNames.end(); iter++)
+        {
+            rtl::OString aStr = *iter;
+            fprintf (excepts, "#include <%s.hpp>\n", aStr.getStr());
+        }
+
+        fprintf (excepts, "// dummy method\n");
+        fprintf (excepts, "extern void force_emit ()\n");
+        fprintf (excepts, "{\n");
+        for (iter = aExceptionTypeNames.begin();
+             iter != aExceptionTypeNames.end(); iter++) {
+            fprintf (excepts, "    try {\n");
+            fprintf (excepts, "        force_emit ();\n");
+            fprintf (excepts, "    }\n");
+            OString aStr = codemaker::cpp::scopedCppName (*iter);
+            fprintf (excepts, "catch (const %s &r) {} \n", aStr.getStr());
+        }
+        fprintf (excepts, "}\n\n");
+        fclose (excepts);
+    }
+
     return 0;
 }
 
diff --git a/codemaker/source/cppumaker/cppuoptions.cxx b/codemaker/source/cppumaker/cppuoptions.cxx
index 8e05700..6fd99a8 100644
--- a/codemaker/source/cppumaker/cppuoptions.cxx
+++ b/codemaker/source/cppumaker/cppuoptions.cxx
@@ -67,6 +67,9 @@ sal_Bool CppuOptions::initOptions(int ac, char* av[], sal_Bool bCmdFile)
         {
             switch (av[i][1])
             {
+                case 'E':
+                    m_options["-E"] = OString(av[i] + 2);
+                    break;
                 case 'O':
                     if (av[i][2] == '\0')
                     {
@@ -339,6 +342,7 @@ OString	CppuOptions::prepareHelp()
     help += "    -G         = generate only target files which does not exists.\n";
     help += "    -Gc        = generate only target files which content will be changed.\n";
     help += "    -X<file>   = extra types which will not be taken into account for generation.\n";
+    help += "    -E<file>   = generate exception type library for faster Linux linking.\n";
     help += prepareVersion();
     
     return help;
diff --git a/codemaker/source/cppumaker/cpputype.cxx b/codemaker/source/cppumaker/cpputype.cxx
index 5a59217..c961230 100644
--- a/codemaker/source/cppumaker/cpputype.cxx
+++ b/codemaker/source/cppumaker/cpputype.cxx
@@ -53,6 +53,8 @@
 using namespace rtl;
 using namespace codemaker::cpp;
 
+::std::list<rtl::OString> aExceptionTypeNames;
+
 namespace {
 
 rtl::OString translateSimpleUnoType(rtl::OString const & unoType, bool cppuUnoType=false) {
@@ -3121,6 +3123,13 @@ sal_Bool ExceptionType::dumpHFile(
     return sal_True;
 }
 
+bool
+ExceptionType::dumpFiles(CppuOptions * options, rtl::OString const & outPath)
+{
+    aExceptionTypeNames.push_back(m_typeName);
+    return CppuType::dumpFiles(options, outPath);
+}
+
 sal_Bool ExceptionType::dumpDeclaration(FileStream& o)
     throw( CannotDumpException )
 {
diff --git a/codemaker/source/cppumaker/cpputype.hxx b/codemaker/source/cppumaker/cpputype.hxx
index 7daab62..5aa14c4 100644
--- a/codemaker/source/cppumaker/cpputype.hxx
+++ b/codemaker/source/cppumaker/cpputype.hxx
@@ -53,6 +53,9 @@ enum CppuTypeDecl
 class CppuOptions;
 class FileStream;
 
+#include <list>
+extern ::std::list<rtl::OString> aExceptionTypeNames;
+
 class CppuType
 {
 public:
@@ -292,6 +295,7 @@ public:
 
     virtual ~ExceptionType();
 
+    bool        dumpFiles(CppuOptions * options, rtl::OString const & outPath);
     sal_Bool	dumpDeclaration(FileStream& o) throw( CannotDumpException );
     sal_Bool	dumpHFile(FileStream& o, codemaker::cppumaker::Includes & includes) throw( CannotDumpException );
     sal_Bool	dumpHxxFile(FileStream& o, codemaker::cppumaker::Includes & includes) throw( CannotDumpException );
diff --git a/cppu/prj/build.lst b/cppu/prj/build.lst
index a22ca9e..9381435 100644
--- a/cppu/prj/build.lst
+++ b/cppu/prj/build.lst
@@ -10,3 +10,4 @@ cu	cppu\source\UnsafeBridge	    nmake	-	all	cu_UnsafeBridge cu_inc NULL
 cu	cppu\source\AffineBridge	    nmake	-	all	cu_AffineBridge cu_inc NULL
 cu	cppu\source\LogBridge	        nmake	-	all	cu_LogBridge cu_inc NULL
 cu	cppu\util						nmake	-	all	cu_util cu_thpool cu_typelib cu_cppu cu_uno cu_helper_purpenv cu_UnsafeBridge cu_AffineBridge cu_LogBridge NULL
+cu      cppu\source\except                      nmake   -       all cu_except cu_util NULL
diff --git a/cppu/prj/d.lst b/cppu/prj/d.lst
index 411a51c..968dacf 100644
--- a/cppu/prj/d.lst
+++ b/cppu/prj/d.lst
@@ -56,6 +56,7 @@ mkdir: %_DEST%\inc%_EXT%\uno
 ..\%__SRC%\lib\icppu.lib %_DEST%\lib%_EXT%\icppu.lib
 ..\%__SRC%\bin\cppu* %_DEST%\bin%_EXT%\*
 ..\%__SRC%\lib\libuno_cppu.*.* %_DEST%\lib%_EXT%\*
+..\%__SRC%\lib\libexlink* %_DEST%\lib%_EXT%\*
 
 ..\%__SRC%\lib\ipurpenvhelper*        %_DEST%\lib%_EXT%\*
 ..\%__SRC%\bin\purpe*.dll     %_DEST%\bin%_EXT%\*
diff --git a/cppu/source/except/except.cxx b/cppu/source/except/except.cxx
new file mode 100644
index 0000000..40a0bc6
--- /dev/null
+++ b/cppu/source/except/except.cxx
@@ -0,0 +1,14 @@
+#include <sal/config.h>
+#include <cppu/macros.hxx>
+#include <com/sun/star/uno/Any.hxx>
+#include <com/sun/star/uno/Reference.hxx>
+
+// We don't want to hide all this shared goodness:
+#undef CPPU_GCC_DLLPUBLIC_EXPORT
+#define CPPU_GCC_DLLPUBLIC_EXPORT
+#undef CPPU_GCC_DLLPRIVATE
+#define CPPU_GCC_DLLPRIVATE
+
+#define CPPU_INTERNAL_IMPL 1
+
+#include <linking_catch.hxx>
diff --git a/cppu/source/except/makefile.mk b/cppu/source/except/makefile.mk
new file mode 100644
index 0000000..6ae737b
--- /dev/null
+++ b/cppu/source/except/makefile.mk
@@ -0,0 +1,20 @@
+# --- Settings -----------------------------------------------------
+
+PRJ=..$/..
+
+PRJNAME=cppu
+TARGET=unotypes
+ENABLE_EXCEPTIONS=TRUE
+
+.INCLUDE :  settings.mk
+
+LIB1TARGET= $(SLB)$/$(TARGET).lib
+LIB1OBJFILES= $(SLO)$/except.obj
+
+SHL1TARGET=exlink$(DLLPOSTFIX)
+SHL1LIBS=$(LIB1TARGET)
+SHL1STDLIBS= $(SALLIB) $(SALHELPERLIB) $(REGLIB) $(CPPULIB)
+
+# --- Targets -------------------------------------------------------
+
+.INCLUDE :  target.mk
diff --git a/offuh/source/makefile.mk b/offuh/source/makefile.mk
index 421034d..4b77541 100644
--- a/offuh/source/makefile.mk
+++ b/offuh/source/makefile.mk
@@ -37,7 +37,7 @@ TARGET=		offuh
 
 $(MISC)$/$(TARGET).don : $(UNOUCRRDB)
     @@-$(RM) $@
-    $(CPPUMAKER) -Gc $(CPPUMAKERFLAGS) -B$(UNOUCRBASE) -O$(UNOUCROUT) $(UNOUCRRDB) && echo > $@
+    $(CPPUMAKER) -E$(UNOUCROUT)/linking_catch.hxx -Gc $(CPPUMAKERFLAGS) -B$(UNOUCRBASE) -O$(UNOUCROUT) $(UNOUCRRDB) && echo > $@
 
 # --- Targets ------------------------------------------------------
 
diff --git a/scp2/source/ooo/file_library_ooo.scp b/scp2/source/ooo/file_library_ooo.scp
index a25fe53..01f1013 100644
--- a/scp2/source/ooo/file_library_ooo.scp
+++ b/scp2/source/ooo/file_library_ooo.scp
@@ -209,6 +209,15 @@ STD_UNO_LIB_FILE( gid_File_Lib_Ctl , ctl)
 
 STD_LIB_FILE( gid_File_Lib_Cui, cui)
 
+#ifdef LINUX
+File gid_File_Lib_ExLib
+    TXT_FILE_BODY;
+    Styles = (PACKED,PATCH);
+    Dir = gid_Dir_Program;
+    Name = LIBNAME(exlink);
+End
+#endif
+
 #ifndef SYSTEM_CURL
 
 File gid_File_Lib_Curl
-- 
1.7.0.1

