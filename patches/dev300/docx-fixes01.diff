diff --git sw/inc/unoobj.hxx sw/inc/unoobj.hxx
index e74aa50..56526ad 100644
--- sw/inc/unoobj.hxx
+++ sw/inc/unoobj.hxx
@@ -51,6 +51,7 @@
 #include <com/sun/star/text/XTextField.hpp>
 #include <com/sun/star/text/XTextRange.hpp>
 #include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/text/XTextCopy.hpp>
 #include <com/sun/star/text/XTextContent.hpp>
 #include <com/sun/star/util/XSortable.hpp>
 #include <com/sun/star/container/XEnumerationAccess.hpp>
@@ -201,7 +202,8 @@ class SwXText : public ::com::sun::star::lang::XTypeProvider,
                 public ::com::sun::star::text::XRelativeTextContentRemove,
                 public ::com::sun::star::beans::XPropertySet,
                 public ::com::sun::star::lang::XUnoTunnel,
-                public ::com::sun::star::text::XTextAppendAndConvert
+                public ::com::sun::star::text::XTextAppendAndConvert,
+                public ::com::sun::star::text::XTextCopy
 {
     SwDoc*                      pDoc;
     BOOL                        bObjectValid;
@@ -288,6 +290,8 @@ public:
        const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& TableProperties 
        ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
 
+    //XTextCopy 
+    virtual void SAL_CALL copyText( const ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextCopy >& xSource ) throw (::com::sun::star::uno::RuntimeException);
     
     //
     virtual ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextCursor >         createCursor()throw(::com::sun::star::uno::RuntimeException);
diff --git sw/source/core/unocore/unotext.cxx sw/source/core/unocore/unotext.cxx
index c2323a5..7c6b597 100644
--- sw/source/core/unocore/unotext.cxx
+++ sw/source/core/unocore/unotext.cxx
@@ -68,6 +68,7 @@
 
 #include <iostream>
 
+using namespace std;
 using namespace ::com::sun::star;
 using ::rtl::OUString;
 
@@ -133,6 +134,7 @@ uno::Any SAL_CALL SwXText::queryInterface( const uno::Type& rType ) throw(uno::R
     const uno::Type& rXTextConvert = ::getCppuType((uno::Reference< text::XTextConvert >*)0);
     const uno::Type& rXTextAppend = ::getCppuType((uno::Reference< text::XTextAppend >*)0);
     const uno::Type& rXTextAppendAndConvert = ::getCppuType((uno::Reference< text::XTextAppendAndConvert >*)0);
+    const uno::Type& rXTextCopy = ::getCppuType((uno::Reference< text::XTextCopy >*)0);
 
     uno::Any aRet;
     if(rType == rXTextType)
@@ -210,6 +212,11 @@ uno::Any SAL_CALL SwXText::queryInterface( const uno::Type& rType ) throw(uno::R
         uno::Reference< XTextContentAppend > xRet = this;
         aRet.setValue(&xRet, rXTextContentAppend );
     }
+    else if(rType == rXTextCopy )
+    {
+        uno::Reference< XTextCopy > xRet = this;
+        aRet.setValue(&xRet, rXTextCopy );
+    }
     return aRet;
 }
 /* -----------------------------15.03.00 17:42--------------------------------
@@ -255,8 +262,8 @@ void SwXText::insertString(const uno::Reference< text::XTextRange >& xTextRange,
                     sal::static_int_cast< sal_IntPtr >( xRangeTunnel->getSomething( OTextCursorHelper::getUnoTunnelId()) ));
         }
 
-        if(pRange && pRange->GetDoc()  == GetDoc() ||
-            pCursor && pCursor->GetDoc()  == GetDoc())
+        if( ( pRange && pRange->GetDoc()  == GetDoc() ) ||
+            ( pCursor && pCursor->GetDoc()  == GetDoc() ) )
         {
             const SwStartNode* pOwnStartNode = GetStartNode();
             if(pCursor)
@@ -1712,6 +1719,36 @@ bool lcl_SimilarPosition( sal_Int32 nPos1, sal_Int32 nPos2 )
     return abs( nPos1 - nPos2 ) < COL_POS_FUZZY;
 }
 
+void SwXText::copyText(
+    const uno::Reference< text::XTextCopy >& xSource )
+        throw ( uno::RuntimeException )
+{
+#if DEBUG
+    clog << "TODO - SwXText::copyText()" << endl;
+#endif
+    uno::Reference< lang::XUnoTunnel > xTTunnel( xSource, uno::UNO_QUERY_THROW );
+   SwXText* pText = 0;
+    pText = reinterpret_cast< SwXText* >(
+                   sal::static_int_cast< sal_IntPtr >( xTTunnel->getSomething( SwXText::getUnoTunnelId()) ));
+
+
+    uno::Reference< text::XText > xText( xSource, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextCursor > xCursor = xText->createTextCursor( );
+    xCursor->gotoEnd( sal_True );
+
+    uno::Reference< lang::XUnoTunnel > xTunnel( xCursor, uno::UNO_QUERY_THROW );
+
+    OTextCursorHelper* pCursor = 0;
+    pCursor = reinterpret_cast< OTextCursorHelper* >(
+                   sal::static_int_cast< sal_IntPtr >( xTunnel->getSomething( OTextCursorHelper::getUnoTunnelId()) ));
+    if ( pCursor )
+    {
+        SwNodeIndex rNdIndex( *GetStartNode( ), 1 );
+        SwPosition rPos( rNdIndex );
+        pDoc->CopyRange( *pCursor->GetPaM( ), rPos, false );
+    }
+}
+
 uno::Reference< text::XTextTable > SwXText::convertToTable(
     const uno::Sequence< uno::Sequence< uno::Sequence< uno::Reference< text::XTextRange > > > >& rTableRanges,
    const uno::Sequence< uno::Sequence< uno::Sequence< beans::PropertyValue > > >& rCellProperties,
@@ -2078,30 +2115,6 @@ uno::Reference< text::XTextTable > SwXText::convertToTable(
     {
         (void)rBounds;
     }
-
-
-        bool bIllegalException = false;
-        bool bRuntimeException = false;
-        ::rtl::OUString sMessage;
-        pDoc->StartUndo(UNDO_START, NULL);
-        pDoc->EndUndo(UNDO_START, NULL);
-        if( bIllegalException || bRuntimeException )
-        {
-            SwUndoIter aUndoIter( pFirstPaM.get(), UNDO_EMPTY );
-            pDoc->Undo(aUndoIter);
-            if(bIllegalException)
-            {
-                lang::IllegalArgumentException aEx;
-                aEx.Message = sMessage;
-                throw aEx;
-            }
-            else //if(bRuntimeException)
-            {
-                uno::RuntimeException aEx;
-                aEx.Message = sMessage;
-                throw aEx;
-            }
-        }
     return xRet;
 }
 
diff --git writerfilter/inc/dmapper/DomainMapper.hxx writerfilter/inc/dmapper/DomainMapper.hxx
index e0873f7..3f2ad51 100644
--- writerfilter/inc/dmapper/DomainMapper.hxx
+++ writerfilter/inc/dmapper/DomainMapper.hxx
@@ -66,6 +66,7 @@ using namespace std;
 
 class PropertyMap;
 class DomainMapper_Impl;
+class ListTable;
 
 // different context types require different sprm handling (e.g. names)
 enum SprmType
@@ -107,6 +108,7 @@ public:
     virtual void endSectionGroup();
     virtual void startParagraphGroup();
     virtual void endParagraphGroup();
+    virtual void markLastParagraphInSection();
     virtual void startCharacterGroup();
     virtual void endCharacterGroup();
     virtual void startShape( ::com::sun::star::uno::Reference< com::sun::star::drawing::XShape > xShape );
@@ -135,6 +137,7 @@ public:
     ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > GetCurrentTextRange();
 
     ::rtl::OUString getOrCreateCharStyle( PropertyValueVector_t& rCharProperties );
+    boost::shared_ptr< ListTable > GetListTable( );
 
 private:
     void handleUnderlineType(const sal_Int32 nIntValue, const ::boost::shared_ptr<PropertyMap> pContext);
diff --git writerfilter/inc/resourcemodel/WW8ResourceModel.hxx writerfilter/inc/resourcemodel/WW8ResourceModel.hxx
index 29d176f..7565121 100644
--- writerfilter/inc/resourcemodel/WW8ResourceModel.hxx
+++ writerfilter/inc/resourcemodel/WW8ResourceModel.hxx
@@ -210,6 +210,8 @@ public:
      */
     virtual void endParagraphGroup() = 0;
 
+    virtual void markLastParagraphInSection( ) { };
+
     /**
        Receives start mark for group with the same character properties.
      */
diff --git writerfilter/source/dmapper/DomainMapper.cxx writerfilter/source/dmapper/DomainMapper.cxx
index 173da5f..4115846 100644
--- writerfilter/source/dmapper/DomainMapper.cxx
+++ writerfilter/source/dmapper/DomainMapper.cxx
@@ -33,6 +33,7 @@
 #include <dmapper/DomainMapper.hxx>
 #include <DomainMapper_Impl.hxx>
 #include <ConversionHelper.hxx>
+#include <ListTable.hxx>
 #include <ThemeTable.hxx>
 #include <ModelEventListener.hxx>
 #include <MeasureHandler.hxx>
@@ -4145,7 +4146,10 @@ void DomainMapper::sprm( Sprm& rSprm, PropertyMapPtr rContext, SprmType eSprmTyp
             sMessage += ::rtl::OString::valueOf( sal_Int32( nSprmId ), 10 );
             sMessage += ::rtl::OString(" / 0x");
             sMessage += ::rtl::OString::valueOf( sal_Int32( nSprmId ), 16 );
-            OSL_ENSURE( false, sMessage.getStr()); //
+            sMessage += ::rtl::OString(" / ");
+            sMessage += ::rtl::OString( rSprm.getName( ).c_str( ) );
+            clog << sMessage.getStr( ) << endl;
+//            OSL_ENSURE( false, sMessage.getStr()); //
 #endif
         }
     }
@@ -4222,38 +4226,6 @@ void DomainMapper::startParagraphGroup()
 -----------------------------------------------------------------------*/
 void DomainMapper::endParagraphGroup()
 {
-    //handle unprocessed deferred breaks
-    PropertyMapPtr pParaProperties = m_pImpl->GetTopContextOfType(CONTEXT_PARAGRAPH);
-    if( pParaProperties->hasEmptyPropertyValues() )
-    {
-        PropertyMap::const_iterator aIter = pParaProperties->find(PropertyDefinition( PROP_BREAK_TYPE , false ) );
-        if( aIter != pParaProperties->end() )
-        {
-            style::BreakType eType;
-            aIter->second >>= eType;
-            bool bPage = false;
-            bool bColumn = false;
-            if( eType == style::BreakType_PAGE_BEFORE )
-                bPage = true;
-            else if( eType == style::BreakType_COLUMN_BEFORE )
-                 bColumn = true;
-
-            if( bPage || bColumn )
-            {
-                try
-                {
-                        uno::Reference< beans::XPropertySet > xRangeProperties( m_pImpl->GetTopTextAppend()->getEnd(), uno::UNO_QUERY_THROW );
-                        xRangeProperties->setPropertyValue(
-                            PropertyNameSupplier::GetPropertyNameSupplier().GetName(PROP_BREAK_TYPE),
-                                                    uno::makeAny( bPage ? style::BreakType_PAGE_BEFORE : style::BreakType_COLUMN_BEFORE));
-                }
-                catch( const uno::Exception& )
-                {
-                }
-            }
-        }
-    }
-
     m_pImpl->PopProperties(CONTEXT_PARAGRAPH);
     m_pImpl->getTableManager().endParagraphGroup();
     //frame conversion has to be executed after table conversion
@@ -4263,6 +4235,14 @@ void DomainMapper::endParagraphGroup()
 #endif
 }
 
+void DomainMapper::markLastParagraphInSection( )
+{
+#ifdef DEBUG_DOMAINMAPPER
+    dmapper_logger->element( "markLastParagraphInSection" );
+#endif
+    m_pImpl->SetIsLastParagraphInSection( true );
+}
+
 void DomainMapper::startShape( uno::Reference< drawing::XShape > xShape )
 {
     m_pImpl->PushShapeContext( xShape );
@@ -4576,6 +4556,7 @@ void DomainMapper::substream(Id rName, ::writerfilter::Reference<Stream>::Pointe
     dmapper_logger->startElement("substream");
 #endif
 
+    m_pImpl->appendTableManager( );
     m_pImpl->getTableManager().startLevel();
 
     //->debug
@@ -4645,6 +4626,7 @@ void DomainMapper::substream(Id rName, ::writerfilter::Reference<Stream>::Pointe
     }
 
     m_pImpl->getTableManager().endLevel();
+    m_pImpl->popTableManager( );
 
 #ifdef DEBUG_DOMAINMAPPER
     dmapper_logger->endElement("substream");
@@ -4880,5 +4862,10 @@ uno::Reference< text::XTextRange > DomainMapper::GetCurrentTextRange()
     return pStyleSheets->getOrCreateCharStyle( rCharProperties );
 }
 
+ListTablePtr DomainMapper::GetListTable( )
+{
+    return m_pImpl->GetListTable( );
+}
+
 } //namespace dmapper
 } //namespace writerfilter
diff --git writerfilter/source/dmapper/DomainMapper_Impl.cxx writerfilter/source/dmapper/DomainMapper_Impl.cxx
index dfa3c60..f460109 100644
--- writerfilter/source/dmapper/DomainMapper_Impl.cxx
+++ writerfilter/source/dmapper/DomainMapper_Impl.cxx
@@ -403,7 +403,7 @@ DomainMapper_Impl::DomainMapper_Impl(
         m_bIsPageBreakDeferred( false ),
         m_bIsInShape( false ),
         m_bShapeContextAdded( false ),
-        m_TableManager( eDocumentType == DOCUMENT_OOXML ),
+        m_pLastSectionContext( ),
         m_nCurrentTabStopIndex( 0 ),
         m_sCurrentParaStyleId(),
         m_bInStyleSheetImport( false ),
@@ -411,8 +411,11 @@ DomainMapper_Impl::DomainMapper_Impl(
         m_bLineNumberingSet( false ),
         m_bIsInFootnoteProperties( true ),
         m_bIsCustomFtnMark( false ),
-        m_bIsParaChange( false )
+        m_bIsParaChange( false ),
+        m_bParaChanged( false ),
+        m_bIsLastParaInSection( false )
 {
+    appendTableManager( );
     GetBodyText();
     uno::Reference< text::XTextAppend > xBodyTextAppend = uno::Reference< text::XTextAppend >( m_xBodyText, uno::UNO_QUERY );
     m_aTextAppendStack.push(xBodyTextAppend);
@@ -421,16 +424,18 @@ DomainMapper_Impl::DomainMapper_Impl(
     uno::Reference< text::XTextAppendAndConvert > xBodyTextAppendAndConvert( m_xBodyText, uno::UNO_QUERY );
     TableDataHandler_t::Pointer_t pTableHandler
         (new DomainMapperTableHandler(xBodyTextAppendAndConvert, *this));
-    m_TableManager.setHandler(pTableHandler);
+    getTableManager( ).setHandler(pTableHandler);
 
-    m_TableManager.startLevel();
+    getTableManager( ).startLevel();
 }
 /*-- 01.09.2006 10:22:28---------------------------------------------------
 
   -----------------------------------------------------------------------*/
 DomainMapper_Impl::~DomainMapper_Impl()
 {
-    m_TableManager.endLevel();
+    RemoveLastParagraph( );
+    getTableManager( ).endLevel();
+    popTableManager( );
 }
 /*-------------------------------------------------------------------------
 
@@ -484,6 +489,28 @@ void DomainMapper_Impl::SetDocumentSettingsProperty( const ::rtl::OUString& rPro
         }
     }
 }
+
+void DomainMapper_Impl::RemoveLastParagraph( )
+{
+    uno::Reference< text::XTextAppend >  xTextAppend = m_aTextAppendStack.top().xTextAppend;
+    try
+    {
+        uno::Reference< text::XTextCursor > xCursor = xTextAppend->createTextCursor();
+        xCursor->gotoEnd(false);
+        xCursor->goLeft( 1, true );
+        xCursor->setString(::rtl::OUString());
+    }
+    catch( const uno::Exception& rEx)
+    {
+        (void)rEx;
+    }
+}
+
+void DomainMapper_Impl::SetIsLastParagraphInSection( bool bIsLast )
+{
+    m_bIsLastParaInSection = bIsLast;
+}
+
 /*-------------------------------------------------------------------------
 
   -----------------------------------------------------------------------*/
@@ -534,6 +561,15 @@ void DomainMapper_Impl::PushListProperties(PropertyMapPtr pListProperties)
 void    DomainMapper_Impl::PopProperties(ContextType eId)
 {
     OSL_ENSURE(!m_aPropertyStacks[eId].empty(), "section stack already empty");
+
+    if ( eId == CONTEXT_SECTION )
+    {
+#if DEBUG
+        clog << "Saving the last section context" << endl;
+#endif
+        m_pLastSectionContext = m_aPropertyStacks[eId].top( );
+    }
+
     m_aPropertyStacks[eId].pop();
     m_aContextStack.pop();
     if(!m_aContextStack.empty() && !m_aPropertyStacks[m_aContextStack.top()].empty())
@@ -854,7 +890,7 @@ void DomainMapper_Impl::finishParagraph( PropertyMapPtr pPropertyMap )
     TextAppendContext& rAppendContext = m_aTextAppendStack.top();
     uno::Reference< text::XTextAppend >  xTextAppend = rAppendContext.xTextAppend;
     PropertyNameSupplier& rPropNameSupplier = PropertyNameSupplier::GetPropertyNameSupplier();
-    if(xTextAppend.is() && ! m_TableManager.isIgnore())
+    if(xTextAppend.is() && ! getTableManager( ).isIgnore())
     {
         try
         {
@@ -1058,7 +1094,7 @@ void DomainMapper_Impl::finishParagraph( PropertyMapPtr pPropertyMap )
                 }
                 uno::Reference< text::XTextRange > xTextRange =
                     xTextAppend->finishParagraph( aProperties );
-                m_TableManager.handle(xTextRange);
+                getTableManager( ).handle(xTextRange);
             
                 // Set the anchor of the objects to the created paragraph
                 while ( m_aAnchoredStack.size( ) > 0 && !m_bIsInShape )
@@ -1084,6 +1120,15 @@ void DomainMapper_Impl::finishParagraph( PropertyMapPtr pPropertyMap )
                 xCur->goLeft( 1 , true );
                 uno::Reference< text::XTextRange > xParaEnd( xCur, uno::UNO_QUERY );
                 CheckParaRedline( xParaEnd );
+
+                // Remove the last empty section paragraph if needed
+                if ( m_bIsLastParaInSection && !m_bParaChanged )
+                {
+                    RemoveLastParagraph( );
+                    m_bIsLastParaInSection = false;
+                }
+
+                m_bParaChanged = false;
             }
             if( !bKeepLastParagraphProperties )
                 rAppendContext.pLastParagraphProperties = pToBeSavedProperties;
@@ -1126,7 +1171,7 @@ util::DateTime lcl_DateStringToDateTime( const ::rtl::OUString& rDateTime )
 void DomainMapper_Impl::appendTextPortion( const ::rtl::OUString& rString, PropertyMapPtr pPropertyMap )
 {
     uno::Reference< text::XTextAppend >  xTextAppend = m_aTextAppendStack.top().xTextAppend;
-    if(xTextAppend.is() && ! m_TableManager.isIgnore())
+    if(xTextAppend.is() && ! getTableManager( ).isIgnore())
     {
         try
         {
@@ -1134,8 +1179,9 @@ void DomainMapper_Impl::appendTextPortion( const ::rtl::OUString& rString, Prope
                 xTextAppend->appendTextPortion
                 (rString, pPropertyMap->GetPropertyValues());
             CheckRedline( xTextRange );
+            m_bParaChanged = true;
 
-            //m_TableManager.handle(xTextRange);
+            //getTableManager( ).handle(xTextRange);
         }
         catch(const lang::IllegalArgumentException& rEx)
         {
@@ -1159,7 +1205,7 @@ void DomainMapper_Impl::appendTextContent(
 {
     uno::Reference< text::XTextAppendAndConvert >  xTextAppendAndConvert( m_aTextAppendStack.top().xTextAppend, uno::UNO_QUERY );
     OSL_ENSURE( xTextAppendAndConvert.is(), "trying to append a text content without XTextAppendAndConvert" );
-    if(xTextAppendAndConvert.is() && ! m_TableManager.isIgnore())
+    if(xTextAppendAndConvert.is() && ! getTableManager( ).isIgnore())
     {
         try
         {
@@ -1326,18 +1372,7 @@ void DomainMapper_Impl::PopPageHeaderFooter()
 {
     //header and footer always have an empty paragraph at the end
     //this has to be removed
-    uno::Reference< text::XTextAppend >  xTextAppend = m_aTextAppendStack.top().xTextAppend;
-    try
-    {
-        uno::Reference< text::XTextCursor > xCursor = xTextAppend->createTextCursor();
-        xCursor->gotoEnd(false);
-        xCursor->goLeft( 1, true );
-        xCursor->setString(::rtl::OUString());
-    }
-    catch( const uno::Exception& rEx)
-    {
-        (void)rEx;
-    }
+    RemoveLastParagraph( );
     m_aTextAppendStack.pop();
 }
 /*-- 24.05.2007 14:22:28---------------------------------------------------
diff --git writerfilter/source/dmapper/DomainMapper_Impl.hxx writerfilter/source/dmapper/DomainMapper_Impl.hxx
index b120a96..5f33e30 100644
--- writerfilter/source/dmapper/DomainMapper_Impl.hxx
+++ writerfilter/source/dmapper/DomainMapper_Impl.hxx
@@ -298,7 +298,8 @@ private:
     _PageMar                                                                        m_aPageMargins;
 
 
-    DomainMapperTableManager m_TableManager;
+    // TableManagers are stacked: one for each stream to avoid any confusion
+    std::stack< boost::shared_ptr< DomainMapperTableManager > > m_aTableManagers;
 
     //each context needs a stack of currently used attributes
     FIB                     m_aFIB;
@@ -313,6 +314,7 @@ private:
     SettingsTablePtr        m_pSettingsTable;
 
     PropertyMapPtr                  m_pTopContext;
+    PropertyMapPtr           m_pLastSectionContext;
 
     ::std::vector<DeletableTabStop> m_aCurrentTabStops;
     sal_uInt32                      m_nCurrentTabStopIndex;
@@ -334,6 +336,8 @@ private:
     RedlineParamsPtr                m_pParaRedline;
     bool                            m_bIsParaChange;
 
+    bool                            m_bParaChanged;
+    bool                            m_bIsLastParaInSection;
 
     //annotation import
     uno::Reference< beans::XPropertySet >                                      m_xAnnotationField;
@@ -356,6 +360,11 @@ public:
     DomainMapper_Impl();
     virtual ~DomainMapper_Impl();
 
+    SectionPropertyMap* GetLastSectionContext( )
+    {
+        return dynamic_cast< SectionPropertyMap* >( m_pLastSectionContext.get( ) );
+    }
+
     ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameContainer > GetPageStyles();
     ::com::sun::star::uno::Reference< ::com::sun::star::text::XText >               GetBodyText();
     ::com::sun::star::uno::Reference < ::com::sun::star::lang::XMultiServiceFactory > GetTextFactory() const
@@ -381,6 +390,9 @@ public:
     void StartParaChange( );
     void EndParaChange( );
 
+    void RemoveLastParagraph( );
+    void SetIsLastParagraphInSection( bool bIsLast );
+
     void deferBreak( BreakType deferredBreakType );
     bool isBreakDeferred( BreakType deferredBreakType );
     void clearDeferredBreaks();
@@ -495,7 +507,24 @@ public:
 
     void AddBookmark( const ::rtl::OUString& rBookmarkName, const ::rtl::OUString& rId );
 
-    DomainMapperTableManager& getTableManager() { return m_TableManager; }
+    DomainMapperTableManager& getTableManager()
+    {
+        boost::shared_ptr< DomainMapperTableManager > pMngr = m_aTableManagers.top();
+        return *pMngr.get( );
+    }
+
+    void appendTableManager( )
+    {
+        boost::shared_ptr< DomainMapperTableManager > pMngr(
+                new DomainMapperTableManager( m_eDocumentType == DOCUMENT_OOXML ) );
+        m_aTableManagers.push( pMngr );
+    }
+
+    void popTableManager( )
+    {
+        if ( m_aTableManagers.size( ) > 0 )
+            m_aTableManagers.pop( );
+    }
 
     void SetLineNumbering( sal_Int32 nLnnMod, sal_Int32 nLnc, sal_Int32 ndxaLnn );
     bool IsLineNumberingSet() const {return m_bLineNumberingSet;}
diff --git writerfilter/source/dmapper/PropertyIds.cxx writerfilter/source/dmapper/PropertyIds.cxx
index bc76be7..9e54c06 100644
--- writerfilter/source/dmapper/PropertyIds.cxx
+++ writerfilter/source/dmapper/PropertyIds.cxx
@@ -319,6 +319,7 @@ const rtl::OUString& PropertyNameSupplier::GetName( PropertyIds eId ) const
             case PROP_INDENT_AT :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("IndentAt")); break;
             case PROP_FIRST_LINE_INDENT :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("FirstLineIndent")); break;
             case PROP_NUMBERING_STYLE_NAME  :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("NumberingStyleName")); break;
+            case PROP_OUTLINE_LEVEL  :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("OutlineLevel")); break;
             case PROP_LISTTAB_STOP_POSITION :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("ListtabStopPosition")); break;
             case PROP_POSITION_AND_SPACE_MODE :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("PositionAndSpaceMode")); break;
 //            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
diff --git writerfilter/source/dmapper/PropertyIds.hxx writerfilter/source/dmapper/PropertyIds.hxx
index cdbcf75..b46e502 100644
--- writerfilter/source/dmapper/PropertyIds.hxx
+++ writerfilter/source/dmapper/PropertyIds.hxx
@@ -282,8 +282,9 @@ enum PropertyIds
 /*243*/ ,PROP_INDENT_AT
 /*244*/ ,PROP_FIRST_LINE_INDENT
 /*245*/ ,PROP_NUMBERING_STYLE_NAME
-/*246*/ ,PROP_LISTTAB_STOP_POSITION
-/*247*/ ,PROP_POSITION_AND_SPACE_MODE
+/*246*/ ,PROP_OUTLINE_LEVEL
+/*247*/ ,PROP_LISTTAB_STOP_POSITION
+/*248*/ ,PROP_POSITION_AND_SPACE_MODE
 };
 struct PropertyNameSupplier_Impl;
 class PropertyNameSupplier
diff --git writerfilter/source/dmapper/PropertyMap.cxx writerfilter/source/dmapper/PropertyMap.cxx
index 861ea92..c5ab256 100644
--- writerfilter/source/dmapper/PropertyMap.cxx
+++ writerfilter/source/dmapper/PropertyMap.cxx
@@ -36,12 +36,15 @@
 #include <com/sun/star/beans/PropertyValue.hpp>
 #include <com/sun/star/lang/XMultiServiceFactory.hpp>
 #include <com/sun/star/table/BorderLine.hpp>
+#include <com/sun/star/container/XEnumeration.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/style/BreakType.hpp>
 #include <com/sun/star/text/RelOrientation.hpp>
 #include <com/sun/star/text/WritingMode.hpp>
 #include <com/sun/star/text/XTextColumns.hpp>
 #include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/text/XTextCopy.hpp>
 
 using namespace ::com::sun::star;
 
@@ -381,14 +384,18 @@ void SectionPropertyMap::ApplyBorderToPageStyles(
     switch( nValue & 0x07)
     {
         case 0: /*all styles*/
-            xFirst = GetPageStyle( xPageStyles, xTextFactory, false );
-            xSecond = GetPageStyle( xPageStyles, xTextFactory, true );
+            if ( m_sFollowPageStyleName.getLength( ) > 0 )
+                xFirst = GetPageStyle( xPageStyles, xTextFactory, false );
+            if ( m_sFirstPageStyleName.getLength( ) > 0 )
+                xSecond = GetPageStyle( xPageStyles, xTextFactory, true );
         break;
         case 1: /*first page*/
-            xFirst = GetPageStyle( xPageStyles, xTextFactory, true );
+            if ( m_sFirstPageStyleName.getLength( ) > 0 )
+                xFirst = GetPageStyle( xPageStyles, xTextFactory, true );
         break;
         case 2: /*left and right*/
-            xFirst  = GetPageStyle( xPageStyles, xTextFactory, false );
+            if ( m_sFollowPageStyleName.getLength( ) > 0 )
+                xFirst  = GetPageStyle( xPageStyles, xTextFactory, false );
         break;
         case 3: //whole document?
             //todo: how to apply a border to the whole document - find all sections or access all page styles?
@@ -565,6 +572,92 @@ bool SectionPropertyMap::HasFooter(bool bFirstPage) const
   -----------------------------------------------------------------------*/
 #define MIN_HEAD_FOOT_HEIGHT 100 //minimum header/footer height
 
+void SectionPropertyMap::CopyLastHeaderFooter( bool bFirstPage, DomainMapper_Impl& rDM_Impl )
+{
+#if DEBUG
+    clog << "START>>> SectionPropertyMap::CopyLastHeaderFooter()" << endl;
+#endif
+    SectionPropertyMap* pLastContext = rDM_Impl.GetLastSectionContext( );
+    if ( pLastContext )
+    {
+        uno::Reference< beans::XPropertySet > xPrevStyle = pLastContext->GetPageStyle(
+                rDM_Impl.GetPageStyles(),
+                rDM_Impl.GetTextFactory(),
+                bFirstPage );
+        uno::Reference< beans::XPropertySet > xStyle = GetPageStyle(
+                rDM_Impl.GetPageStyles(),
+                rDM_Impl.GetTextFactory(),
+                bFirstPage );
+
+        PropertyNameSupplier& rPropNameSupplier = PropertyNameSupplier::GetPropertyNameSupplier();
+
+        try {
+            // Loop over the Header and Footer properties to copy them
+            static PropertyIds aProperties[] =
+            {
+                PROP_HEADER_TEXT,
+                PROP_FOOTER_TEXT,
+            };
+
+            bool bHasPrevHeader = false;
+            bool bHasHeader = false;
+
+            rtl::OUString sHeaderIsOn = rPropNameSupplier.GetName( PROP_HEADER_IS_ON );
+            xPrevStyle->getPropertyValue( sHeaderIsOn ) >>= bHasPrevHeader;
+            xStyle->getPropertyValue( sHeaderIsOn ) >>= bHasHeader;
+            bool bCopyHeader = bHasPrevHeader && !bHasHeader;
+
+            if ( bCopyHeader )
+                xStyle->setPropertyValue( sHeaderIsOn, uno::makeAny( sal_True ) );
+
+            bool bHasPrevFooter = false;
+            bool bHasFooter = false;
+
+            rtl::OUString sFooterIsOn = rPropNameSupplier.GetName( PROP_FOOTER_IS_ON );
+            xPrevStyle->getPropertyValue( sFooterIsOn ) >>= bHasPrevFooter;
+            xStyle->getPropertyValue( sFooterIsOn ) >>= bHasFooter;
+            bool bCopyFooter = bHasPrevFooter && !bHasFooter;
+
+            if ( bCopyFooter )
+                xStyle->setPropertyValue( sFooterIsOn, uno::makeAny( sal_True ) );
+
+            // Copying the text properties
+            for ( int i = 0, nNbProps = 2; i < nNbProps; i++ )
+            {
+                bool bIsHeader = ( i < nNbProps / 2 );
+                PropertyIds aPropId = aProperties[i];
+                rtl::OUString sName = rPropNameSupplier.GetName( aPropId );
+
+                if ( ( bIsHeader && bCopyHeader ) || ( !bIsHeader && bCopyFooter ) )
+                {
+#if DEBUG
+                    clog << "Copying ";
+                    clog << rtl::OUStringToOString( sName, RTL_TEXTENCODING_UTF8 ).getStr( ) << endl;
+#endif
+                    // TODO has to be copied
+                    uno::Reference< text::XTextCopy > xTxt(
+                            xStyle->getPropertyValue( sName ), uno::UNO_QUERY_THROW );
+
+                    uno::Reference< text::XTextCopy > xPrevTxt(
+                            xPrevStyle->getPropertyValue( sName ), uno::UNO_QUERY_THROW );
+
+                    xTxt->copyText( xPrevTxt );
+                }
+            }
+        }
+        catch ( const uno::Exception& e )
+        {
+#if DEBUG
+            clog << "An exception occured in SectionPropertyMap::CopyLastHeaderFooter( ) - ";
+            clog << rtl::OUStringToOString( e.Message, RTL_TEXTENCODING_UTF8 ).getStr( ) << endl;
+#endif
+        }
+    }
+#if DEBUG
+    clog << "END>>> SectionPropertyMap::CopyLastHeaderFooter()" << endl;
+#endif
+}
+
 void SectionPropertyMap::PrepareHeaderFooterProperties( bool bFirstPage )
 {
     sal_Int32 nTopMargin = m_nTopMargin;
@@ -703,6 +796,7 @@ void SectionPropertyMap::CloseSectionGroup( DomainMapper_Impl& rDM_Impl )
         /*** if headers/footers are available then the top/bottom margins of the
             header/footer are copied to the top/bottom margin of the page
           */
+        CopyLastHeaderFooter( false, rDM_Impl );
         PrepareHeaderFooterProperties( false );
 
         const ::rtl::OUString sTrayIndex = rPropNameSupplier.GetName( PROP_PRINTER_PAPER_TRAY_INDEX );
@@ -775,6 +869,7 @@ void SectionPropertyMap::CloseSectionGroup( DomainMapper_Impl& rDM_Impl )
         //todo: creating a "First Page" style depends on HasTitlePage und _fFacingPage_
         if( m_bTitlePage )
         {
+            CopyLastHeaderFooter( true, rDM_Impl );
             PrepareHeaderFooterProperties( true );
             uno::Reference< beans::XPropertySet > xFirstPageStyle = GetPageStyle(
                                 rDM_Impl.GetPageStyles(), rDM_Impl.GetTextFactory(), true );
@@ -797,28 +892,24 @@ void SectionPropertyMap::CloseSectionGroup( DomainMapper_Impl& rDM_Impl )
                 //now apply this break at the first paragraph of this section
                 uno::Reference< beans::XPropertySet > xRangeProperties;
                 if( m_bIsFirstSection )
-                    xRangeProperties = uno::Reference< beans::XPropertySet >( rDM_Impl.GetBodyText()->getStart(), uno::UNO_QUERY_THROW );
+                {
+                    uno::Reference< container::XEnumerationAccess > xEnumAccess( rDM_Impl.GetBodyText( ), uno::UNO_QUERY_THROW );
+                    uno::Reference< container::XEnumeration >  xEnum = xEnumAccess->createEnumeration( );
+                    xRangeProperties = uno::Reference< beans::XPropertySet >( xEnum->nextElement( ), uno::UNO_QUERY_THROW );
+                }
                 else
                     xRangeProperties = uno::Reference< beans::XPropertySet >( m_xStartingRange, uno::UNO_QUERY_THROW );
             /* break type
             0 - No break 1 - New Colunn 2 - New page 3 - Even page 4 - odd page */
-                if( m_nBreakType == 2 || m_nBreakType == 3)
-                {
-                    xRangeProperties->setPropertyValue(rPropNameSupplier.GetName( PROP_BREAK_TYPE),
-                        uno::makeAny( m_nBreakType == 2 ? style::BreakType_COLUMN_AFTER : style::BreakType_PAGE_AFTER  ) );
-                }
-                else
-                {
-                    xRangeProperties->setPropertyValue(rPropNameSupplier.GetName( PROP_PAGE_DESC_NAME ),
-                        uno::makeAny( m_bTitlePage ? m_sFirstPageStyleName : m_sFollowPageStyleName ));
+                xRangeProperties->setPropertyValue(rPropNameSupplier.GetName( PROP_PAGE_DESC_NAME ),
+                    uno::makeAny( m_bTitlePage ? m_sFirstPageStyleName : m_sFollowPageStyleName ));
     //  todo: page breaks with odd/even page numbering are not available - find out current page number to check how to change the number
     //  or add even/odd page break types
-                    if(m_bPageNoRestart || m_nPageNumber >= 0)
-                    {
-                        sal_Int16 nPageNumber = m_nPageNumber >= 0 ? static_cast< sal_Int16 >(m_nPageNumber) : 1;
-                        xRangeProperties->setPropertyValue(rPropNameSupplier.GetName( PROP_PAGE_NUMBER_OFFSET ),
-                            uno::makeAny( nPageNumber ));
-                    }
+                if(m_bPageNoRestart || m_nPageNumber >= 0)
+                {
+                    sal_Int16 nPageNumber = m_nPageNumber >= 0 ? static_cast< sal_Int16 >(m_nPageNumber) : 1;
+                    xRangeProperties->setPropertyValue(rPropNameSupplier.GetName( PROP_PAGE_NUMBER_OFFSET ),
+                        uno::makeAny( nPageNumber ));
                 }
             }
         }
diff --git writerfilter/source/dmapper/PropertyMap.hxx writerfilter/source/dmapper/PropertyMap.hxx
index 526f902..8f7277e 100644
--- writerfilter/source/dmapper/PropertyMap.hxx
+++ writerfilter/source/dmapper/PropertyMap.hxx
@@ -199,6 +199,7 @@ class SectionPropertyMap : public PropertyMap
     void _ApplyProperties( ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > xStyle );
     ::com::sun::star::uno::Reference< com::sun::star::text::XTextColumns > ApplyColumnProperties(
             ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > xFollowPageStyle );
+    void CopyLastHeaderFooter( bool bFirstPage, DomainMapper_Impl& rDM_Impl );
     void PrepareHeaderFooterProperties( bool bFirstPage );
     bool HasHeader( bool bFirstPage ) const;
     bool HasFooter( bool bFirstPage ) const;
@@ -275,6 +276,7 @@ public:
 
     void CloseSectionGroup( DomainMapper_Impl& rDM_Impl );
 };
+typedef boost::shared_ptr<SectionPropertyMap> SectionPropertyMapPtr;
 
 /*-- 28.12.2007 08:17:34---------------------------------------------------
 
diff --git writerfilter/source/dmapper/StyleSheetTable.cxx writerfilter/source/dmapper/StyleSheetTable.cxx
index 9bf05a8..2d200c4 100644
--- writerfilter/source/dmapper/StyleSheetTable.cxx
+++ writerfilter/source/dmapper/StyleSheetTable.cxx
@@ -29,6 +29,7 @@
  ************************************************************************/
 #include <StyleSheetTable.hxx>
 #include <dmapper/DomainMapper.hxx>
+#include <ListTable.hxx>
 #include <ConversionHelper.hxx>
 #include <TblStylePrHandler.hxx>
 #include <BorderHandler.hxx>
@@ -1215,12 +1216,43 @@ void StyleSheetTable::ApplyStyleSheets( FontTablePtr rFontTable )
                     {
                         // Set the outline levels
                         const StyleSheetPropertyMap* pStyleSheetProperties = dynamic_cast<const StyleSheetPropertyMap*>(pEntry ? pEntry->pProperties.get() : 0);
+                        if ( pStyleSheetProperties )
+                        {
+                            aPropValues.realloc( aPropValues.getLength( ) + 1 );
+
+                            beans::PropertyValue aLvlVal( rPropNameSupplier.GetName( PROP_OUTLINE_LEVEL ), 0,
+                                    uno::makeAny( sal_Int16( pStyleSheetProperties->GetOutlineLevel( ) + 1 ) ),
+                                    beans::PropertyState_DIRECT_VALUE );
+                            aPropValues[ aPropValues.getLength( ) - 1 ] = aLvlVal;
+
+                            if ( pStyleSheetProperties->GetOutlineLevel( ) == 0 )
+                            {
+                                aPropValues.realloc( aPropValues.getLength( ) + 1 );
+                                beans::PropertyValue aStyleVal( rPropNameSupplier.GetName( PROP_NUMBERING_STYLE_NAME ), 0,
+                                        uno::makeAny( rtl::OUString::createFromAscii( "" ) ),
+                                        beans::PropertyState_DIRECT_VALUE );
+                                aPropValues[ aPropValues.getLength( ) - 1 ] = aStyleVal;
+                            }
+                        }
+
                         if ( pStyleSheetProperties && pStyleSheetProperties->GetOutlineLevel( ) >= 0 )
                         {
+                            ListTablePtr pListTable = m_pImpl->m_rDMapper.GetListTable( );
+                            sal_Int32 nNumId = pStyleSheetProperties->GetListId( );
+                            uno::Reference< container::XIndexReplace> xStyleRules = pListTable->GetNumberingRules( nNumId );
                             sal_Int16 nLvl = pStyleSheetProperties->GetOutlineLevel( );
                             uno::Reference< text::XChapterNumberingSupplier > xOutlines ( m_pImpl->m_xTextDocument,
                                     uno::UNO_QUERY_THROW );
+
                             uno::Reference< container::XIndexReplace > xRules = xOutlines->getChapterNumberingRules( );
+                            if ( xStyleRules.is( ) )
+                            {
+                                for ( sal_Int32 i = 0, nCount = xStyleRules->getCount( ); i < nCount; i++ )
+                                {
+                                    xRules->replaceByIndex( i, xStyleRules->getByIndex( i ) );
+                                }
+                            }
+
                             uno::Any aLevel = xRules->getByIndex( nLvl );
                             uno::Sequence< beans::PropertyValue > aLevelProps;
                             aLevel >>= aLevelProps;
diff --git writerfilter/source/ooxml/OOXMLDocumentImpl.cxx writerfilter/source/ooxml/OOXMLDocumentImpl.cxx
index fef00e4..df80785 100644
--- writerfilter/source/ooxml/OOXMLDocumentImpl.cxx
+++ writerfilter/source/ooxml/OOXMLDocumentImpl.cxx
@@ -48,7 +48,7 @@ using namespace ::std;
 
 OOXMLDocumentImpl::OOXMLDocumentImpl
 (OOXMLStream::Pointer_t pStream)
-: mpStream(pStream), mXNoteType(0)
+: mpStream(pStream), mXNoteType(0), mbIsSubstream( false )
 {
 }
 
@@ -138,6 +138,7 @@ OOXMLDocumentImpl::getSubStream(const rtl::OUString & rId)
     writerfilter::Reference<Stream>::Pointer_t pRet( pTemp = new OOXMLDocumentImpl(pStream) );
     pTemp->setModel(mxModel);
     pTemp->setDrawPage(mxDrawPage);
+    pTemp->setIsSubstream( true );
     return pRet;
 }
 
@@ -317,6 +318,7 @@ void OOXMLDocumentImpl::resolve(Stream & rStream)
         pDocHandler->setStream(&rStream);
         pDocHandler->setDocument(this);
         pDocHandler->setXNoteId(msXNoteId);
+        pDocHandler->setIsSubstream( mbIsSubstream );
         uno::Reference < xml::sax::XFastDocumentHandler > xDocumentHandler
             (pDocHandler);
         uno::Reference < xml::sax::XFastTokenHandler > xTokenHandler
diff --git writerfilter/source/ooxml/OOXMLDocumentImpl.hxx writerfilter/source/ooxml/OOXMLDocumentImpl.hxx
index ca2c919..9649376 100644
--- writerfilter/source/ooxml/OOXMLDocumentImpl.hxx
+++ writerfilter/source/ooxml/OOXMLDocumentImpl.hxx
@@ -53,6 +53,8 @@ class OOXMLDocumentImpl : public OOXMLDocument
     uno::Reference<frame::XModel> mxModel;
     uno::Reference<drawing::XDrawPage> mxDrawPage;
 
+    bool mbIsSubstream;
+
 protected:
     virtual void resolveFastSubStream(Stream & rStream,
                                       OOXMLStream::StreamType_t nType);
@@ -69,6 +71,8 @@ protected:
                    const Id & rType,
                    const rtl::OUString & rNoteId);
 
+    void setIsSubstream( bool bSubstream ) { mbIsSubstream = bSubstream; };
+
 public:
     OOXMLDocumentImpl(OOXMLStream::Pointer_t pStream);
     virtual ~OOXMLDocumentImpl();
diff --git writerfilter/source/ooxml/OOXMLFastContextHandler.cxx writerfilter/source/ooxml/OOXMLFastContextHandler.cxx
index 1304fa4..b2080d5 100644
--- writerfilter/source/ooxml/OOXMLFastContextHandler.cxx
+++ writerfilter/source/ooxml/OOXMLFastContextHandler.cxx
@@ -755,6 +755,7 @@ void OOXMLFastContextHandler::setLastParagraphInSection()
 #endif
 
     mpParserState->setLastParagraphInSection(true);
+    mpStream->markLastParagraphInSection( );
 }
 
 void OOXMLFastContextHandler::newProperty
diff --git writerfilter/source/ooxml/OOXMLFastDocumentHandler.cxx writerfilter/source/ooxml/OOXMLFastDocumentHandler.cxx
index 2557387..016599a 100644
--- writerfilter/source/ooxml/OOXMLFastDocumentHandler.cxx
+++ writerfilter/source/ooxml/OOXMLFastDocumentHandler.cxx
@@ -225,4 +225,9 @@ void OOXMLFastDocumentHandler::setXNoteId(const ::rtl::OUString & rXNoteId)
     msXNoteId = rXNoteId;
 }
 
+void OOXMLFastDocumentHandler::setIsSubstream( bool bSubstream )
+{
+    getContextHandler( )->getParserState( )->setInSectionGroup( bSubstream );
+}
+
 }}
diff --git writerfilter/source/ooxml/OOXMLFastDocumentHandler.hxx writerfilter/source/ooxml/OOXMLFastDocumentHandler.hxx
index c7dfefe..b8ed9a5 100644
--- writerfilter/source/ooxml/OOXMLFastDocumentHandler.hxx
+++ writerfilter/source/ooxml/OOXMLFastDocumentHandler.hxx
@@ -100,6 +100,8 @@ public:
     
     OOXMLParserState::Pointer_t getParserState() const;
 
+    void setIsSubstream( bool bSubstream );
+
 private:
     OOXMLFastDocumentHandler(OOXMLFastDocumentHandler &); // not defined
     void operator =(OOXMLFastDocumentHandler &); // not defined
diff --git writerfilter/source/ooxml/model.xml writerfilter/source/ooxml/model.xml
index add4a80..7d07b6a 100644
--- writerfilter/source/ooxml/model.xml
+++ writerfilter/source/ooxml/model.xml
@@ -22048,18 +22048,13 @@
     <resource xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" name="CT_HdrFtrRef" resource="Properties">
       <attribute name="type" tokenid="ooxml:CT_HdrFtrRef_type"/>
       <attribute name="r:id" tokenid="ooxml:CT_HdrFtrRef_id"/>
-      <action name="end" action="endCharacterGroup"/>
-      <action name="end" action="endParagraphGroup"/>
       <action name="end" action="handleHdrFtr"/>
     </resource>
     <resource name="EG_HdrFtrReferences" resource="Properties">
       <element name="headerReference" tokenid="ooxml:EG_HdrFtrReferences_headerReference"/>
       <element name="footerReference" tokenid="ooxml:EG_HdrFtrReferences_footerReference"/>
     </resource>
-    <resource name="CT_HdrFtr" resource="Stream">
-      <action name="start" action="startSectionGroup"/>
-      <action name="end" action="endSectionGroup"/>
-    </resource>
+    <resource name="CT_HdrFtr" resource="Stream"/>
     <resource name="EG_SectPrContents" resource="Properties">
       <element name="bidi" tokenid="ooxml:EG_SectPrContents_bidi"/>
       <element name="cols" tokenid="ooxml:EG_SectPrContents_cols"/>
diff --git writerfilter/source/resourcemodel/TagLogger.cxx writerfilter/source/resourcemodel/TagLogger.cxx
index ff23dfc..97f3f28 100644
--- writerfilter/source/resourcemodel/TagLogger.cxx
+++ writerfilter/source/resourcemodel/TagLogger.cxx
@@ -273,7 +273,7 @@ namespace writerfilter
             
             fileName += "/writerfilter.";
             fileName += name;
-            fileName += ".tmp";
+            fileName += ".xml";
 
             ofstream dumpStream(fileName.c_str());
             aIt->second->output(dumpStream);
