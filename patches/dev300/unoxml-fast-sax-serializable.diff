diff --git offapi/com/sun/star/xml/sax/XFastSAXSerializable.idl offapi/com/sun/star/xml/sax/XFastSAXSerializable.idl
new file mode 100644
index 0000000..6d815ce
--- /dev/null
+++ offapi/com/sun/star/xml/sax/XFastSAXSerializable.idl
@@ -0,0 +1,102 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XSAXSerializable.idl,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef __com_sun_star_xml_sax_XFastSAXSerializable_idl__
+#define __com_sun_star_xml_sax_XFastSAXSerializable_idl__
+
+#ifndef __com_sun_star_xml_sax_XFastDocumentHandler_idl__ 
+#include <com/sun/star/xml/sax/XFastDocumentHandler.idl>
+#endif
+
+#ifndef __com_sun_star_xml_sax_XFastTokenHandler_idl__ 
+#include <com/sun/star/xml/sax/XFastTokenHandler.idl>
+#endif
+
+#ifndef __com_sun_star_beans_StringPair_idl__ 
+#include <com/sun/star/beans/StringPair.idl>
+#endif
+
+#ifndef __com_sun_star_beans_Pair_idl__ 
+#include <com/sun/star/beans/Pair.idl>
+#endif
+
+module com { module sun { module star { module xml { module sax {
+
+//=============================================================================
+/** serializes a DOM tree by generating FastSAX events.
+    
+    <p>
+    </p>
+
+    @since OOo 3.1
+
+*/
+interface XFastSAXSerializable
+{
+
+	//-------------------------------------------------------------------------
+    /** serializes an object (e.g. a DOM tree) that represents an XML document
+        by generating fast SAX events.
+
+        @param  handler
+            the SAX event handler that should receive the generated events
+        @param  tokenHandler
+            the fast SAX token handler that is used to translate names
+        @param  namespaces
+            a list of namespace declarations that will be added to the root
+            element node of the XML document
+            <p>
+            This is necessary mostly because the DOM implementation does
+            not permit attaching namespaces declarations directly to nodes,
+            which may lead to duplicate namespace declarations on export,
+            and thus larger documents.
+            Note that the first part of each tuple is the prefix,
+            e.g. "office", and the second is the numeric namespace identifier.
+            </p>
+        @param  registerNamespaces
+            a list of namespace url / namespace token pairs. you need
+            to register all namespace in order to have them recognized
+            during export. Namespace tokens must be greater than
+            FastToken::NAMESPACE.
+            </p>
+
+        @throws com::sun::star::xml::sax::SAXException
+                 if serializing the XML document fails
+     */
+    void fastSerialize([in] sax::XFastDocumentHandler handler,
+                       [in] sax::XFastTokenHandler tokenHandler,
+                       [in] sequence< beans::StringPair > namespaces,
+                       [in] sequence< beans::Pair<string, long> > registerNamespaces)
+        raises( com::sun::star::xml::sax::SAXException );
+};
+
+}; }; }; }; };
+
+#endif
diff --git offapi/com/sun/star/xml/sax/makefile.mk offapi/com/sun/star/xml/sax/makefile.mk
index 41d3d19..33425dd 100644
--- offapi/com/sun/star/xml/sax/makefile.mk
+++ offapi/com/sun/star/xml/sax/makefile.mk
@@ -58,6 +58,7 @@ IDLFILES=\
 	XFastParser.idl\
 	XFastDocumentHandler.idl\
 	XFastContextHandler.idl\
+	XFastSAXSerializable.idl\
 	XFastSerializer.idl\
 	XFastShapeContextHandler.idl\
 	XFastTokenHandler.idl\
diff --git unoxml/source/dom/attr.hxx unoxml/source/dom/attr.hxx
index efb61c7..bbe4dba 100644
--- unoxml/source/dom/attr.hxx
+++ unoxml/source/dom/attr.hxx
@@ -39,7 +39,7 @@
 #include "node.hxx"
 #include <libxml/tree.h>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/attributesmap.hxx unoxml/source/dom/attributesmap.hxx
index 1858e1a..970336f 100644
--- unoxml/source/dom/attributesmap.hxx
+++ unoxml/source/dom/attributesmap.hxx
@@ -42,7 +42,7 @@
 #include "element.hxx"
 #include "attr.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/cdatasection.cxx unoxml/source/dom/cdatasection.cxx
index 5eeaddc..e26f741 100644
--- unoxml/source/dom/cdatasection.cxx
+++ unoxml/source/dom/cdatasection.cxx
@@ -30,6 +30,8 @@
 
 #include "cdatasection.hxx"
 
+#include <com/sun/star/xml/sax/XExtendedDocumentHandler.hpp>
+
 namespace DOM
 {
     CCDATASection::CCDATASection(const xmlNodePtr aNodePtr)
diff --git unoxml/source/dom/cdatasection.hxx unoxml/source/dom/cdatasection.hxx
index d4d24c6..524a50d 100644
--- unoxml/source/dom/cdatasection.hxx
+++ unoxml/source/dom/cdatasection.hxx
@@ -37,7 +37,7 @@
 
 #include "text.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/characterdata.hxx unoxml/source/dom/characterdata.hxx
index c23c309..509b471 100644
--- unoxml/source/dom/characterdata.hxx
+++ unoxml/source/dom/characterdata.hxx
@@ -42,7 +42,7 @@
 #include <libxml/tree.h>
 #include "node.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/childlist.hxx unoxml/source/dom/childlist.hxx
index 6f85b35..8ac44a7 100644
--- unoxml/source/dom/childlist.hxx
+++ unoxml/source/dom/childlist.hxx
@@ -41,7 +41,7 @@
 #include "node.hxx"
 #include "libxml/tree.h"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/comment.cxx unoxml/source/dom/comment.cxx
index 8d3f9ab..7781ed5 100644
--- unoxml/source/dom/comment.cxx
+++ unoxml/source/dom/comment.cxx
@@ -30,6 +30,8 @@
 
 #include "comment.hxx"
 
+#include <com/sun/star/xml/sax/XExtendedDocumentHandler.hpp>
+
 namespace DOM
 {
     CComment::CComment(const xmlNodePtr aNodePtr)
diff --git unoxml/source/dom/comment.hxx unoxml/source/dom/comment.hxx
index 8651c1a..33dd667 100644
--- unoxml/source/dom/comment.hxx
+++ unoxml/source/dom/comment.hxx
@@ -36,7 +36,7 @@
 #include <com/sun/star/xml/dom/XComment.hpp>
 #include "characterdata.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/document.cxx unoxml/source/dom/document.cxx
index 2cc7141..e69352b 100644
--- unoxml/source/dom/document.cxx
+++ unoxml/source/dom/document.cxx
@@ -51,13 +51,11 @@
 
 #include <string.h>
 
+#include <com/sun/star/xml/sax/FastToken.hpp>
 #include <com/sun/star/xml/sax/XExtendedDocumentHandler.hpp>
 
-
 namespace DOM
 {
-
-
     void CDocument::addnode(xmlNodePtr aNode)
     {
         if (aNode != (xmlNodePtr)m_aDocPtr)
@@ -122,6 +120,17 @@ namespace DOM
         i_xHandler->endDocument();
     }
 
+    void SAL_CALL CDocument::fastSaxify( Context& rContext ) {
+        rContext.mxDocHandler->startDocument();
+        for (xmlNodePtr pChild = m_aNodePtr->children;
+                        pChild != 0; pChild = pChild->next) {
+            CNode * pNode = CNode::get(pChild);
+            OSL_ENSURE(pNode != 0, "CNode::get returned 0");
+            pNode->fastSaxify(rContext);
+        }
+        rContext.mxDocHandler->endDocument();
+    }
+
 	void SAL_CALL CDocument::addListener(const Reference< XStreamListener >& aListener )
 		throw (RuntimeException)
 	{
@@ -699,7 +708,47 @@ namespace DOM
             // eliminate duplicate namespace declarations
             _nscleanup(pRoot->children, pRoot);
         }
-        // serialize via SAX handler
         saxify(i_xHandler);
     }
+
+    // ::com::sun::star::xml::sax::XFastSAXSerializable
+    void SAL_CALL CDocument::fastSerialize( const Reference< XFastDocumentHandler >& i_xHandler, 
+                                            const Reference< XFastTokenHandler >& i_xTokenHandler, 
+                                            const Sequence< beans::StringPair >& i_rNamespaces,
+                                            const Sequence< beans::Pair< rtl::OUString, sal_Int32 > >& i_rRegisterNamespaces ) 
+        throw (SAXException, RuntimeException)
+    {
+        // add new namespaces to root node
+        xmlNodePtr pRoot = _getDocumentRootPtr(m_aDocPtr);
+        if (0 != pRoot) {
+            const beans::StringPair * pSeq = i_rNamespaces.getConstArray();
+            for (const beans::StringPair *pNsDef = pSeq;
+                 pNsDef < pSeq + i_rNamespaces.getLength(); ++pNsDef) {
+                OString prefix = OUStringToOString(pNsDef->First,
+                                    RTL_TEXTENCODING_UTF8);
+                OString href   = OUStringToOString(pNsDef->Second,
+                                    RTL_TEXTENCODING_UTF8);
+                // this will only add the ns if it does not exist already
+                xmlNewNs(pRoot, reinterpret_cast<const xmlChar*>(href.getStr()),
+                         reinterpret_cast<const xmlChar*>(prefix.getStr()));
+            }
+            // eliminate duplicate namespace declarations
+            _nscleanup(pRoot->children, pRoot);
+        }
+
+        Context aContext(i_xHandler,
+                         i_xTokenHandler);
+
+        // register namespace ids
+        const beans::Pair<OUString,sal_Int32>* pSeq = i_rRegisterNamespaces.getConstArray();
+        for (const beans::Pair<OUString,sal_Int32>* pNs = pSeq;
+             pNs < pSeq + i_rRegisterNamespaces.getLength(); ++pNs) 
+        {
+            OSL_ENSURE(pNs->Second >= FastToken::NAMESPACE,
+                       "CDocument::fastSerialize(): invalid NS token id");
+            aContext.maNamespaceMap[ pNs->First ] = pNs->Second;
+        }
+
+        fastSaxify(aContext);
+    }
 }
diff --git unoxml/source/dom/document.hxx unoxml/source/dom/document.hxx
index 13b09ee..e902269 100644
--- unoxml/source/dom/document.hxx
+++ unoxml/source/dom/document.hxx
@@ -34,7 +34,7 @@
 #include <list>
 #include <set>
 #include <sal/types.h>
-#include <cppuhelper/implbase5.hxx>
+#include <cppuhelper/implbase6.hxx>
 #include <com/sun/star/uno/Reference.h>
 #include <com/sun/star/uno/Exception.hpp>
 #include <com/sun/star/beans/StringPair.hpp>
@@ -45,7 +45,9 @@
 #include <com/sun/star/xml/dom/events/XDocumentEvent.hpp>
 #include <com/sun/star/xml/dom/events/XEvent.hpp>
 #include <com/sun/star/xml/sax/XSAXSerializable.hpp>
+#include <com/sun/star/xml/sax/XFastSAXSerializable.hpp>
 #include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#include <com/sun/star/xml/sax/XFastDocumentHandler.hpp>
 #include <com/sun/star/io/XActiveDataSource.hpp>
 #include <com/sun/star/io/XActiveDataControl.hpp>
 #include <com/sun/star/io/XOutputStream.hpp>
@@ -68,9 +70,9 @@ using namespace com::sun::star::xml::dom::events;
 namespace DOM
 {
 
-    class CDocument : public cppu::ImplInheritanceHelper5<
+    class CDocument : public cppu::ImplInheritanceHelper6<
 		CNode, XDocument, XDocumentEvent,
-        XActiveDataControl, XActiveDataSource, XSAXSerializable>
+        XActiveDataControl, XActiveDataSource, XSAXSerializable, XFastSAXSerializable>
     {
         friend class CNode;
 		typedef std::list< Reference< XNode >* > nodereflist_t;
@@ -97,6 +99,8 @@ namespace DOM
         virtual void SAL_CALL saxify(
             const Reference< XDocumentHandler >& i_xHandler);
 
+        virtual void SAL_CALL fastSaxify( Context& rContext );
+
         /**
         Creates an Attr of the given name.
         */
@@ -347,12 +351,18 @@ namespace DOM
             return CNode::setPrefix(prefix);
         }
 
-
-    // ::com::sun::star::xml::sax::XSAXSerializable
-    virtual void SAL_CALL serialize(
+        // ::com::sun::star::xml::sax::XSAXSerializable
+        virtual void SAL_CALL serialize(
             const Reference< XDocumentHandler >& i_xHandler,
             const Sequence< beans::StringPair >& i_rNamespaces)
-        throw (RuntimeException, SAXException);
+            throw (RuntimeException, SAXException);
+        
+        // ::com::sun::star::xml::sax::XFastSAXSerializable 
+        virtual void SAL_CALL fastSerialize( const Reference< XFastDocumentHandler >& handler, 
+                                             const Reference< XFastTokenHandler >& tokenHandler, 
+                                             const Sequence< beans::StringPair >& i_rNamespaces,
+                                             const Sequence< beans::Pair< rtl::OUString, sal_Int32 > >& namespaces ) 
+            throw (SAXException, RuntimeException);
     };
 }
 
diff --git unoxml/source/dom/documentfragment.hxx unoxml/source/dom/documentfragment.hxx
index 67778c2..4d037ca 100644
--- unoxml/source/dom/documentfragment.hxx
+++ unoxml/source/dom/documentfragment.hxx
@@ -37,7 +37,7 @@
 
 #include "node.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/documenttype.hxx unoxml/source/dom/documenttype.hxx
index e995713..15a2417 100644
--- unoxml/source/dom/documenttype.hxx
+++ unoxml/source/dom/documenttype.hxx
@@ -42,7 +42,7 @@
 
 #include <libxml/tree.h>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/domimplementation.hxx unoxml/source/dom/domimplementation.hxx
index a5f1b02..0dd4cfb 100644
--- unoxml/source/dom/domimplementation.hxx
+++ unoxml/source/dom/domimplementation.hxx
@@ -41,7 +41,7 @@
 #include <com/sun/star/xml/dom/XDOMImplementation.hpp>
 #include <com/sun/star/xml/dom/XDOMImplementation.hpp>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/element.cxx unoxml/source/dom/element.cxx
index fe099b4..17ac26d 100644
--- unoxml/source/dom/element.cxx
+++ unoxml/source/dom/element.cxx
@@ -36,6 +36,7 @@
 #include "../events/mutationevent.hxx"
 
 #include "comphelper/attributelist.hxx"
+#include <com/sun/star/xml/sax/FastToken.hdl>
 
 #include <string.h>
 
@@ -98,6 +99,105 @@ namespace DOM
         i_xHandler->endElement(name);
     }
 
+    void SAL_CALL CElement::fastSaxify( Context& i_rContext ) {
+        if (!i_rContext.mxDocHandler.is()) throw RuntimeException();
+        pushContext(i_rContext);
+        addNamespaces(i_rContext,m_aNodePtr);
+
+        // add attributes
+        i_rContext.mxAttribList->clear();
+        for (xmlAttrPtr pAttr = m_aNodePtr->properties;
+                        pAttr != 0; pAttr = pAttr->next) {
+            CNode * pNode = CNode::get(reinterpret_cast<xmlNodePtr>(pAttr));
+            OSL_ENSURE(pNode != 0, "CNode::get returned 0");
+
+            const xmlChar* xName = pAttr->name;
+            sal_Int32 nAttributeToken=FastToken::DONTKNOW;
+
+            if( pAttr->ns && strlen((char*)pAttr->ns->prefix) )
+                nAttributeToken = getTokenWithPrefix( i_rContext, 
+                                                      (sal_Char*)pAttr->ns->prefix, 
+                                                      (sal_Char*)xName );
+            else
+                nAttributeToken = getToken( i_rContext, (sal_Char*)xName );
+
+            if( nAttributeToken != FastToken::DONTKNOW )
+                i_rContext.mxAttribList->add( nAttributeToken, 
+                                              OUStringToOString(pNode->getNodeValue(),
+                                                                RTL_TEXTENCODING_UTF8));
+        }
+
+        const xmlChar* xPrefix = m_aNodePtr->ns ? m_aNodePtr->ns->prefix : (const xmlChar*)"";
+        const xmlChar* xName = m_aNodePtr->name;
+        sal_Int32 nElementToken=FastToken::DONTKNOW;
+        if( strlen((char*)xPrefix) )
+            nElementToken = getTokenWithPrefix( i_rContext, (sal_Char*)xPrefix, (sal_Char*)xName );
+        else
+            nElementToken = getToken( i_rContext, (sal_Char*)xName );
+
+        Reference<XFastContextHandler> xParentHandler(i_rContext.mxCurrentHandler);
+        try
+        {
+            Reference< XFastAttributeList > xAttr( i_rContext.mxAttribList.get() );
+            if( nElementToken == FastToken::DONTKNOW )
+            {
+                const OUString aNamespace;
+                const OUString aElementName( (sal_Char*)xPrefix, 
+                                             strlen((char*)xPrefix), 
+                                             RTL_TEXTENCODING_UTF8 );
+
+                if( xParentHandler.is() )
+                    i_rContext.mxCurrentHandler = xParentHandler->createUnknownChildContext( aNamespace, aElementName, xAttr );
+                else
+                    i_rContext.mxCurrentHandler = i_rContext.mxDocHandler->createUnknownChildContext( aNamespace, aElementName, xAttr );
+
+                if( i_rContext.mxCurrentHandler.is() )
+                    i_rContext.mxCurrentHandler->startUnknownElement( aNamespace, aElementName, xAttr );
+            }
+            else
+            {
+                if( xParentHandler.is() )
+                    i_rContext.mxCurrentHandler = xParentHandler->createFastChildContext( nElementToken, xAttr );
+                else
+                    i_rContext.mxCurrentHandler = i_rContext.mxDocHandler->createFastChildContext( nElementToken, xAttr );
+
+                if( i_rContext.mxCurrentHandler.is() )
+                    i_rContext.mxCurrentHandler->startFastElement( nElementToken, xAttr );
+            }
+        }
+        catch( Exception& )
+        {}
+
+        // recurse
+        for (xmlNodePtr pChild = m_aNodePtr->children;
+                        pChild != 0; pChild = pChild->next) {
+            CNode * pNode = CNode::get(pChild);
+            OSL_ENSURE(pNode != 0, "CNode::get returned 0");
+            pNode->fastSaxify(i_rContext);
+        }
+
+		if( i_rContext.mxCurrentHandler.is() ) try
+		{
+			if( nElementToken != FastToken::DONTKNOW )
+				i_rContext.mxCurrentHandler->endFastElement( nElementToken );
+			else
+            {
+                const OUString aNamespace;
+                const OUString aElementName( (sal_Char*)xPrefix, 
+                                             strlen((char*)xPrefix), 
+                                             RTL_TEXTENCODING_UTF8 );
+
+				i_rContext.mxCurrentHandler->endUnknownElement( aNamespace, aElementName );
+            }
+		}
+		catch( Exception& )
+		{}
+
+        // restore after children have been processed
+        i_rContext.mxCurrentHandler = xParentHandler;
+        popContext(i_rContext);
+    }
+
     /**
 		Retrieves an attribute value by name.
 		return empty string if attribute is not set
diff --git unoxml/source/dom/element.hxx unoxml/source/dom/element.hxx
index c6ba0ee..a4c0026 100644
--- unoxml/source/dom/element.hxx
+++ unoxml/source/dom/element.hxx
@@ -39,7 +39,7 @@
 #include <libxml/tree.h>
 #include "node.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
@@ -60,6 +60,8 @@ namespace DOM
         virtual void SAL_CALL saxify(
             const Reference< XDocumentHandler >& i_xHandler);
 
+        virtual void SAL_CALL fastSaxify( Context& i_rContext );
+
         /**
         Retrieves an attribute value by name.
         */
diff --git unoxml/source/dom/elementlist.hxx unoxml/source/dom/elementlist.hxx
index e78c8bb..4e6d8c7 100644
--- unoxml/source/dom/elementlist.hxx
+++ unoxml/source/dom/elementlist.hxx
@@ -45,7 +45,7 @@
 #include "document.hxx"
 #include "libxml/tree.h"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 using namespace com::sun::star::xml::dom::events;
diff --git unoxml/source/dom/entitiesmap.hxx unoxml/source/dom/entitiesmap.hxx
index f207d81..f3f7f3d 100644
--- unoxml/source/dom/entitiesmap.hxx
+++ unoxml/source/dom/entitiesmap.hxx
@@ -41,7 +41,7 @@
 #include "document.hxx"
 #include "documenttype.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::lang;
 using namespace com::sun::star::xml::dom;
diff --git unoxml/source/dom/entity.hxx unoxml/source/dom/entity.hxx
index fd269bc..f4b5855 100644
--- unoxml/source/dom/entity.hxx
+++ unoxml/source/dom/entity.hxx
@@ -39,7 +39,7 @@
 #include <libxml/tree.h>
 #include <libxml/entities.h>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/entityreference.hxx unoxml/source/dom/entityreference.hxx
index 5535374..02d9f7b 100644
--- unoxml/source/dom/entityreference.hxx
+++ unoxml/source/dom/entityreference.hxx
@@ -36,7 +36,7 @@
 #include "node.hxx"
 #include <libxml/tree.h>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/node.cxx unoxml/source/dom/node.cxx
index f7599f8..e25c4d7 100644
--- unoxml/source/dom/node.cxx
+++ unoxml/source/dom/node.cxx
@@ -45,11 +45,91 @@
 #include "childlist.hxx"
 #include "attr.hxx"
 
+#include <com/sun/star/xml/sax/FastToken.hpp>
+
 #include "../events/eventdispatcher.hxx"
 #include "../events/mutationevent.hxx"
 
+#include <boost/bind.hpp>
+#include <algorithm>
+
 namespace DOM
 {
+    void pushContext(Context& io_rContext)
+    {
+        io_rContext.maNamespaces.push_back(
+            io_rContext.maNamespaces.back());
+    }
+
+    void popContext(Context& io_rContext)
+    {
+        io_rContext.maNamespaces.pop_back();
+    }
+
+    void addNamespaces(Context& io_rContext, xmlNodePtr pNode)
+    {
+        // add node's namespaces to current context
+        for (xmlNsPtr pNs = pNode->nsDef; pNs != 0; pNs = pNs->next) {
+            const xmlChar *pPrefix = pNs->prefix;
+            OString prefix(reinterpret_cast<const sal_Char*>(pPrefix),
+                           strlen(reinterpret_cast<const char*>(pPrefix)));
+            const xmlChar *pHref = pNs->href;
+            OUString val(reinterpret_cast<const sal_Char*>(pHref),
+                strlen(reinterpret_cast<const char*>(pHref)),
+                RTL_TEXTENCODING_UTF8);
+
+            OSL_TRACE("Trying to add namespace %s (prefix %s)",
+                      (const char*)pHref, (const char*)pPrefix);
+
+            Context::NamespaceMapType::iterator aIter=
+                io_rContext.maNamespaceMap.find(val);
+            if( aIter != io_rContext.maNamespaceMap.end() )
+            {
+                Context::Namespace aNS;
+                aNS.maPrefix = prefix;
+                aNS.mnToken = aIter->second;
+                aNS.maNamespaceURL = val;
+
+                io_rContext.maNamespaces.back().push_back(aNS);
+
+                OSL_TRACE("Added with token 0x%x", aIter->second);
+            }
+        }
+    }
+
+    sal_Int32 getToken( const Context& rContext, const sal_Char* pToken )
+    {
+        const Sequence<sal_Int8> aSeq( (sal_Int8*)pToken, strlen( pToken ) );
+        return rContext.mxTokenHandler->getTokenFromUTF8( aSeq );
+    }
+
+    sal_Int32 getTokenWithPrefix( const Context& rContext, const sal_Char* pPrefix, const sal_Char* pName )
+    {
+        sal_Int32 nNamespaceToken = FastToken::DONTKNOW;
+        OString prefix(pPrefix,
+                       strlen(reinterpret_cast<const char*>(pPrefix)));
+
+        OSL_TRACE("getTokenWithPrefix(): prefix %s, name %s",
+                  (const char*)pPrefix, (const char*)pName);
+
+        Context::NamespaceVectorType::value_type::const_iterator aIter;
+        if( (aIter=std::find_if(rContext.maNamespaces.back().begin(),
+                                rContext.maNamespaces.back().end(), 
+                                boost::bind(std::equal_to<OString>(),
+                                            boost::bind(&Context::Namespace::getPrefix,
+                                                        _1),
+                                            boost::cref(prefix)))) != rContext.maNamespaces.back().end() )
+        {
+            nNamespaceToken = aIter->mnToken;
+            sal_Int32 nNameToken = getToken( rContext, pName );
+            if( nNameToken != FastToken::DONTKNOW )
+                nNamespaceToken |= nNameToken;
+        }
+
+        return nNamespaceToken;
+    }
+
+
     nodemap_t CNode::theNodeMap;
 
     void CNode::remove(const xmlNodePtr aNode)
@@ -167,14 +247,13 @@ namespace DOM
 
     xmlNodePtr CNode::getNodePtr(const Reference< XNode >& aNode)
     {
-      xmlNodePtr aNodePtr = 0;
       try {
-	Reference< XUnoTunnel > aTunnel(aNode, UNO_QUERY_THROW);
-	sal_Int64 rawPtr = aTunnel->getSomething(Sequence<sal_Int8>());
-	aNodePtr = reinterpret_cast<xmlNodePtr>(sal::static_int_cast<sal_IntPtr>(rawPtr));
-      } catch ( ... ) {
+          CNode* pNode=dynamic_cast<CNode*>(aNode.get());
+          if( pNode )
+              return pNode->m_aNodePtr;
       }
-      return aNodePtr;
+      catch(...) {}
+      return 0;
     }
 
     CNode::CNode()
@@ -280,6 +359,11 @@ namespace DOM
         // default: do nothing
     }
 
+    void SAL_CALL CNode::fastSaxify(Context& io_rContext) {
+        if (!io_rContext.mxDocHandler.is()) throw RuntimeException();
+        // default: do nothing
+    }
+
     /**    
     Adds the node newChild to the end of the list of children of this node.
     */
@@ -894,14 +978,6 @@ namespace DOM
 
     }
 
-    sal_Int64 SAL_CALL CNode::getSomething(const Sequence< sal_Int8 >& /*id*/) throw (RuntimeException)
-    {
-        // XXX check ID
-        return sal::static_int_cast<sal_Int64>(reinterpret_cast<sal_IntPtr>(m_aNodePtr));
-        // return (sal_Int64)m_aNodePtr;
-    }
-
-
         // --- XEventTarget
     void SAL_CALL CNode::addEventListener(const OUString& eventType, 
         const Reference< com::sun::star::xml::dom::events::XEventListener >& listener, 
diff --git unoxml/source/dom/node.hxx unoxml/source/dom/node.hxx
index 8752dad..8a22fbd 100644
--- unoxml/source/dom/node.hxx
+++ unoxml/source/dom/node.hxx
@@ -31,18 +31,19 @@
 #ifndef _NODE_HXX
 #define _NODE_HXX
 
-#include <map>
+#include <rtl/ref.hxx>
+#include <rtl/string.hxx>
+#include <rtl/ustring.hxx>
 #include <sal/types.h>
+#include <sax/fastattribs.hxx>
 #include <cppuhelper/implbase1.hxx>
 #include <cppuhelper/implbase2.hxx>
-#include <cppuhelper/implbase3.hxx>
 #include <com/sun/star/uno/Reference.h>
 #include <com/sun/star/uno/Exception.hpp>
 #include <com/sun/star/xml/dom/XNode.hpp>
 #include <com/sun/star/xml/dom/XNodeList.hpp>
 #include <com/sun/star/xml/dom/XNamedNodeMap.hpp>
 #include <com/sun/star/xml/dom/NodeType.hpp>
-#include <com/sun/star/lang/XUnoTunnel.hpp>
 #include <com/sun/star/uno/Sequence.h>
 #include <com/sun/star/xml/dom/events/XEventTarget.hpp>
 #include <com/sun/star/xml/dom/events/XDocumentEvent.hpp>
@@ -51,23 +52,72 @@
 #include <com/sun/star/xml/dom/events/XUIEvent.hpp>
 #include <com/sun/star/xml/dom/events/XMouseEvent.hpp>
 #include <com/sun/star/xml/dom/DOMException.hpp>
-#include <com/sun/star/xml/sax/XExtendedDocumentHandler.hpp>
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#include <com/sun/star/xml/sax/XFastDocumentHandler.hpp>
 #include <libxml/tree.h>
 
+#include <map>
+#include <hash_map>
+
 using ::rtl::OUString;
+using ::rtl::OString;
+using namespace sax_fastparser;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::sax;
 using namespace com::sun::star::xml::dom;
 using namespace com::sun::star::xml::dom::events;
-using com::sun::star::lang::XUnoTunnel;
 
 namespace DOM
 {
+    struct Context
+    {
+        Context( const Reference< XFastDocumentHandler >& i_xHandler,
+                 const Reference< XFastTokenHandler >& i_xTokenHandler ) :
+            maNamespaces( 1, std::vector<Namespace>() ),
+            maNamespaceMap(101),
+            mxAttribList(new FastAttributeList(i_xTokenHandler)),
+            mxCurrentHandler(i_xHandler, UNO_QUERY_THROW),
+            mxDocHandler(i_xHandler),
+            mxTokenHandler(i_xTokenHandler)
+        {}
+
+        struct Namespace
+        {
+            OString	    maPrefix;
+            sal_Int32	mnToken;
+            OUString	maNamespaceURL;
+
+            const OString& getPrefix() const { return maPrefix; }
+        };
+
+        typedef std::vector< std::vector<Namespace> > NamespaceVectorType;
+        typedef std::hash_map< OUString, 
+                               sal_Int32, 
+                               rtl::OUStringHash > NamespaceMapType;
+
+        /// outer vector: xml context; inner vector: current NS
+        NamespaceVectorType                 maNamespaces;
+        NamespaceMapType                    maNamespaceMap;
+        ::rtl::Reference<FastAttributeList> mxAttribList;
+        Reference<XFastContextHandler>      mxCurrentHandler;
+        Reference<XFastDocumentHandler>     mxDocHandler;
+        Reference<XFastTokenHandler>        mxTokenHandler;
+    };
+
+    void pushContext(Context& io_rContext);
+    void popContext(Context& io_rContext);
+
+    sal_Int32 getTokenWithPrefix( const Context& rContext, const sal_Char* xPrefix, const sal_Char* xName );
+    sal_Int32 getToken( const Context& rContext, const sal_Char* xName );
+
+    /// add namespaces on this node to context
+    void addNamespaces(Context& io_rContext, xmlNodePtr pNode);
+
     class CNode;
     typedef std::map< const xmlNodePtr, CNode* > nodemap_t;
 
 
-    class CNode : public cppu::WeakImplHelper3< XNode, XUnoTunnel, XEventTarget >
+    class CNode : public cppu::WeakImplHelper2< XNode, XEventTarget >
     {
         friend class CDocument;
         friend class CElement;
@@ -109,6 +159,9 @@ namespace DOM
         virtual void SAL_CALL saxify(
             const Reference< XDocumentHandler >& i_xHandler);
 
+        // recursively create SAX events
+        virtual void SAL_CALL fastSaxify( Context& io_rContext );
+
         // ---- DOM interfaces
 
         /**
@@ -275,9 +328,6 @@ namespace DOM
             throw (RuntimeException, DOMException);
 
 
-        // --- XUnoTunnel
-        virtual sal_Int64 SAL_CALL getSomething(const Sequence< sal_Int8 >& id) throw (RuntimeException);
-
         // --- XEventTarget
         virtual void SAL_CALL addEventListener(const OUString& eventType,
             const Reference< XEventListener >& listener,
diff --git unoxml/source/dom/notation.hxx unoxml/source/dom/notation.hxx
index 13cd6be..d25d501 100644
--- unoxml/source/dom/notation.hxx
+++ unoxml/source/dom/notation.hxx
@@ -37,7 +37,7 @@
 #include "node.hxx"
 #include <libxml/tree.h>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/notationsmap.hxx unoxml/source/dom/notationsmap.hxx
index 2adbbc0..170c3b2 100644
--- unoxml/source/dom/notationsmap.hxx
+++ unoxml/source/dom/notationsmap.hxx
@@ -41,7 +41,7 @@
 #include "document.hxx"
 #include "documenttype.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/processinginstruction.cxx unoxml/source/dom/processinginstruction.cxx
index f06d153..791b408 100644
--- unoxml/source/dom/processinginstruction.cxx
+++ unoxml/source/dom/processinginstruction.cxx
@@ -29,6 +29,7 @@
  ************************************************************************/
 
 #include "processinginstruction.hxx"
+#include <com/sun/star/xml/sax/XExtendedDocumentHandler.hpp>
 #include <string.h>
 
 namespace DOM
diff --git unoxml/source/dom/processinginstruction.hxx unoxml/source/dom/processinginstruction.hxx
index 1ae7657..780fe55 100644
--- unoxml/source/dom/processinginstruction.hxx
+++ unoxml/source/dom/processinginstruction.hxx
@@ -37,7 +37,7 @@
 #include "node.hxx"
 #include <libxml/tree.h>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 
diff --git unoxml/source/dom/saxbuilder.cxx unoxml/source/dom/saxbuilder.cxx
index 5f42666..e1169cc 100644
--- unoxml/source/dom/saxbuilder.cxx
+++ unoxml/source/dom/saxbuilder.cxx
@@ -35,7 +35,6 @@
 #include "saxbuilder.hxx"
 #include <com/sun/star/xml/dom/XDocumentBuilder.hpp>
 #include <libxml/tree.h>
-#include <com/sun/star/lang/XUnoTunnel.hpp>
 #include <com/sun/star/uno/Sequence.h>
 
 namespace DOM
diff --git unoxml/source/dom/saxbuilder.hxx unoxml/source/dom/saxbuilder.hxx
index a955035..afa8320 100644
--- unoxml/source/dom/saxbuilder.hxx
+++ unoxml/source/dom/saxbuilder.hxx
@@ -54,7 +54,7 @@
 
 #include "libxml/tree.h"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::xml::dom;
 using namespace com::sun::star::xml::sax;
diff --git unoxml/source/dom/text.cxx unoxml/source/dom/text.cxx
index 250b31e..6574a45 100644
--- unoxml/source/dom/text.cxx
+++ unoxml/source/dom/text.cxx
@@ -58,5 +58,18 @@ namespace DOM
     {
         return OUString::createFromAscii("#text");
     }
+    
+    void SAL_CALL CText::fastSaxify( Context& io_rContext )
+    {
+        if( io_rContext.mxCurrentHandler.is() ) 
+        {
+            try
+            {
+                io_rContext.mxCurrentHandler->characters( getData() );
+            }
+            catch( Exception& )
+            {}
+        }
+    }
 
 }
diff --git unoxml/source/dom/text.hxx unoxml/source/dom/text.hxx
index 27596f3..ff84a62 100644
--- unoxml/source/dom/text.hxx
+++ unoxml/source/dom/text.hxx
@@ -41,7 +41,7 @@
 #include <libxml/tree.h>
 #include "characterdata.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::lang;
 using namespace com::sun::star::xml::dom;
@@ -62,6 +62,8 @@ namespace DOM
         virtual void SAL_CALL saxify(
             const Reference< XDocumentHandler >& i_xHandler);
 
+        virtual void SAL_CALL fastSaxify( Context& io_rContext );
+
 	     // Breaks this node into two nodes at the specified offset, keeping 
 	     // both in the tree as siblings.
 	     virtual Reference< XText > SAL_CALL splitText(sal_Int32 offset)
diff --git unoxml/source/events/mouseevent.hxx unoxml/source/events/mouseevent.hxx
index a3d4f37..b4a9ade 100644
--- unoxml/source/events/mouseevent.hxx
+++ unoxml/source/events/mouseevent.hxx
@@ -15,7 +15,7 @@
 #include "event.hxx"
 #include "uievent.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 
 namespace DOM { namespace events {
 
diff --git unoxml/source/events/mutationevent.hxx unoxml/source/events/mutationevent.hxx
index d20c246..5ff545f 100644
--- unoxml/source/events/mutationevent.hxx
+++ unoxml/source/events/mutationevent.hxx
@@ -13,7 +13,7 @@
 #include <com/sun/star/xml/dom/events/XMutationEvent.hpp>
 #include "event.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 
 namespace DOM { namespace events {
 
diff --git unoxml/source/events/testlistener.hxx unoxml/source/events/testlistener.hxx
index 7a9d16c..2e12a1a 100644
--- unoxml/source/events/testlistener.hxx
+++ unoxml/source/events/testlistener.hxx
@@ -54,7 +54,7 @@
 
 #include "libxml/tree.h"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::lang;
 using namespace com::sun::star::xml::dom;
diff --git unoxml/source/events/uievent.hxx unoxml/source/events/uievent.hxx
index ba34a96..d9cd5cc 100644
--- unoxml/source/events/uievent.hxx
+++ unoxml/source/events/uievent.hxx
@@ -14,7 +14,7 @@
 #include <com/sun/star/xml/dom/views/XAbstractView.hpp>
 #include "event.hxx"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::xml::dom::views;
 
 namespace DOM { namespace events {
diff --git unoxml/source/service/makefile.mk unoxml/source/service/makefile.mk
index 4cc13a4..363f4b3 100644
--- unoxml/source/service/makefile.mk
+++ unoxml/source/service/makefile.mk
@@ -73,6 +73,7 @@ SHL1STDLIBS= \
 	$(COMPHELPERLIB)	\
 	$(CPPUHELPERLIB)	\
 	$(CPPULIB)	\
+	$(SAXLIB) \
 	$(SALLIB)\
 	$(EXPATASCII3RDLIB)
 
diff --git unoxml/source/xpath/nodelist.hxx unoxml/source/xpath/nodelist.hxx
index 6b94f99..336a611 100644
--- unoxml/source/xpath/nodelist.hxx
+++ unoxml/source/xpath/nodelist.hxx
@@ -43,7 +43,7 @@
 #include "libxml/xpath.h"
 #include <boost/shared_ptr.hpp>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::lang;
 using namespace com::sun::star::xml::dom;
diff --git unoxml/source/xpath/xpathapi.hxx unoxml/source/xpath/xpathapi.hxx
index 4291728..29e5461 100644
--- unoxml/source/xpath/xpathapi.hxx
+++ unoxml/source/xpath/xpathapi.hxx
@@ -52,11 +52,10 @@
 #include <com/sun/star/lang/XServiceInfo.hpp>
 #include <com/sun/star/lang/XSingleServiceFactory.hpp>
 #include <com/sun/star/lang/XMultiServiceFactory.hpp>
-#include <com/sun/star/lang/XUnoTunnel.hpp>
 
 #include "libxml/tree.h"
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::lang;
 using namespace com::sun::star::xml::dom;
diff --git unoxml/source/xpath/xpathobject.hxx unoxml/source/xpath/xpathobject.hxx
index 94cba5f..ac7e5fb 100644
--- unoxml/source/xpath/xpathobject.hxx
+++ unoxml/source/xpath/xpathobject.hxx
@@ -43,7 +43,7 @@
 #include <libxml/xpath.h>
 #include <boost/shared_ptr.hpp>
 
-using namespace rtl;
+using ::rtl::OUString;
 using namespace com::sun::star::uno;
 using namespace com::sun::star::lang;
 using namespace com::sun::star::xml::dom;
diff --git unoxml/test/domtest.cxx unoxml/test/domtest.cxx
new file mode 100644
index 0000000..9b9c302
--- /dev/null
+++ unoxml/test/domtest.cxx
@@ -0,0 +1,402 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: basictest.cxx,v $
+ * $Revision: 1.12 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+// autogenerated file with codegen.pl
+
+#include <cppunit/simpleheader.hxx>
+
+#include <rtl/ref.hxx>
+#include <osl/file.hxx>
+#include <osl/process.h>
+#include <comphelper/seqstream.hxx>
+#include <comphelper/sequence.hxx>
+#include <cppuhelper/compbase1.hxx>
+#include <cppuhelper/bootstrap.hxx>
+#include <cppuhelper/basemutex.hxx>
+
+#include <com/sun/star/xml/sax/FastToken.hpp>
+#include <com/sun/star/xml/sax/XSAXSerializable.hpp>
+#include <com/sun/star/xml/sax/XFastSAXSerializable.hpp>
+
+#include "../source/dom/documentbuilder.hxx"
+
+
+using namespace ::DOM;
+using namespace ::comphelper;
+using namespace ::com::sun::star;
+
+namespace
+{
+
+// valid xml
+static const char validTestFile[] = 
+"<?xml version=\"1.0\" encoding=\"UTF-8\"?> \
+ <office:document-content \
+   xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" \
+   xmlns:xlink=\"http://www.w3.org/1999/xlink\" \
+   office:version=\"1.0\"> \
+   <office:scripts/> \
+   <xlink:test/> \
+   <office:automatic-styles teststyle=\"test\"/> \
+   <moretest/> \
+    some text öäü \
+ </office:document-content> \
+";
+
+// generates a warning: unsupported xml version, unknown xml:space
+// value
+static const char warningTestFile[] =
+"<?xml version=\"47-11.0\" encoding=\"UTF-8\"?> \
+ <office:document-content \
+   xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" \
+   xml:space=\"blafasl\" \
+   office:version=\"1.0\"> \
+   <office:scripts/> \
+   <office:automatic-styles/> \
+ </office:document-content> \
+";
+
+// <?xml not at start of file
+static const char errorTestFile[] =
+" <?xml version=\"1.0\" encoding=\"UTF-8\"?> \
+ <office:document-content \
+   xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" \
+   office:version=\"1.0\"> \
+   <office:scripts/> \
+   <office:automatic-styles/> \
+ </office:document-content> \
+";
+
+// plain empty
+static const char fatalTestFile[] = "";
+
+struct ErrorHandler 
+    : public ::cppu::WeakImplHelper1< xml::sax::XErrorHandler >
+{
+    sal_uInt32 mnErrCount;
+    sal_uInt32 mnFatalCount;
+    sal_uInt32 mnWarnCount;
+
+    bool noErrors() const { return !mnErrCount && !mnFatalCount && !mnWarnCount; }
+
+    ErrorHandler() : mnErrCount(0), mnFatalCount(0), mnWarnCount(0)
+    {}
+
+    virtual void SAL_CALL error( const uno::Any& ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+        ++mnErrCount;
+    }
+
+    virtual void SAL_CALL fatalError( const uno::Any& ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+        ++mnFatalCount;
+    }
+
+    virtual void SAL_CALL warning( const uno::Any& ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+        ++mnWarnCount;
+    }
+};
+
+struct DocumentHandler 
+    : public ::cppu::WeakImplHelper1< xml::sax::XFastDocumentHandler >
+{
+    // XFastContextHandler
+    virtual void SAL_CALL startFastElement( ::sal_Int32 Element, const uno::Reference< xml::sax::XFastAttributeList >& Attribs ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+        OSL_TRACE("Seen element: %c with namespace 0x%x",
+                  Element & 0xFFFF, Element & 0xFFFF0000);
+    }
+
+    virtual void SAL_CALL startUnknownElement( const ::rtl::OUString& Namespace, const ::rtl::OUString& Name, const uno::Reference< xml::sax::XFastAttributeList >& Attribs ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+    }
+
+    virtual void SAL_CALL endFastElement( ::sal_Int32 Element ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+    }
+
+    virtual void SAL_CALL endUnknownElement( const ::rtl::OUString& Namespace, const ::rtl::OUString& Name ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+    }
+
+    virtual uno::Reference< xml::sax::XFastContextHandler > SAL_CALL createFastChildContext( ::sal_Int32 Element, const uno::Reference< xml::sax::XFastAttributeList >& Attribs ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+        return this;
+    }
+
+    virtual uno::Reference< xml::sax::XFastContextHandler > SAL_CALL createUnknownChildContext( const ::rtl::OUString& Namespace, const ::rtl::OUString& Name, const uno::Reference< xml::sax::XFastAttributeList >& Attribs ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+        return this;
+    }
+
+    virtual void SAL_CALL characters( const ::rtl::OUString& aChars ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+    }
+
+    // XFastDocumentHandler
+    virtual void SAL_CALL startDocument(  ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+    }
+
+    virtual void SAL_CALL endDocument(  ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+    }
+
+    virtual void SAL_CALL setDocumentLocator( const uno::Reference< xml::sax::XLocator >& xLocator ) throw (xml::sax::SAXException, uno::RuntimeException)
+    {
+    }
+};
+
+struct TokenHandler 
+    : public ::cppu::WeakImplHelper1< xml::sax::XFastTokenHandler >
+{
+    virtual ::sal_Int32 SAL_CALL getToken( const ::rtl::OUString& Identifier ) throw (uno::RuntimeException)
+    {
+        CPPUNIT_ASSERT_MESSAGE( "TokenHandler::getToken() unexpected call", 
+                                false );
+        return -1;
+    }
+
+    virtual ::rtl::OUString SAL_CALL getIdentifier( ::sal_Int32 Token ) throw (uno::RuntimeException)
+    {
+        CPPUNIT_ASSERT_MESSAGE( "TokenHandler::getIdentifier() unexpected call", 
+                                false );
+        return rtl::OUString();
+    }
+
+    virtual ::sal_Int32 SAL_CALL getTokenFromUTF8( const uno::Sequence< ::sal_Int8 >& Identifier ) throw (uno::RuntimeException)
+    {
+        OSL_TRACE("getTokenFromUTF8() %s", (const char*)Identifier.getConstArray());
+        return Identifier.getLength() ? Identifier[0] : 0;
+    }
+
+    virtual uno::Sequence< ::sal_Int8 > SAL_CALL getUTF8Identifier( ::sal_Int32 Token ) throw (uno::RuntimeException)
+    {
+        CPPUNIT_ASSERT_MESSAGE( "TokenHandler::getUTF8Identifier() unexpected call", 
+                                false );
+        return uno::Sequence<sal_Int8>();
+    }
+};
+
+struct BasicTest : public CppUnit::TestFixture
+{
+    rtl::Reference<CDocumentBuilder>    mxDomBuilder;
+    rtl::Reference<ErrorHandler>        mxErrHandler;
+    rtl::Reference<SequenceInputStream> mxValidInStream;
+    rtl::Reference<SequenceInputStream> mxWarningInStream;
+    rtl::Reference<SequenceInputStream> mxErrorInStream;
+    rtl::Reference<SequenceInputStream> mxFatalInStream;
+
+    void setUp()
+    {
+        // luckily, DOM builder doesn't use service fac, so we need
+        // not bootstrap uno here
+        mxErrHandler.set( new ErrorHandler() );
+        mxDomBuilder.set( new CDocumentBuilder(Reference< XMultiServiceFactory >() ));
+        mxValidInStream.set( new SequenceInputStream(ByteSequence((sal_Int8*)validTestFile,
+                                                                  sizeof(validTestFile)/sizeof(*validTestFile))) );
+        mxWarningInStream.set( new SequenceInputStream(ByteSequence((sal_Int8*)warningTestFile,
+                                                                    sizeof(warningTestFile)/sizeof(*warningTestFile))) );
+        mxErrorInStream.set( new SequenceInputStream(ByteSequence((sal_Int8*)errorTestFile,
+                                                                  sizeof(errorTestFile)/sizeof(*errorTestFile))) );
+        mxFatalInStream.set( new SequenceInputStream(ByteSequence((sal_Int8*)fatalTestFile,
+                                                                  sizeof(fatalTestFile)/sizeof(*fatalTestFile))) );
+        mxDomBuilder->setErrorHandler(mxErrHandler.get());
+    }
+
+    void validInputTest()
+    {        
+        CPPUNIT_ASSERT_MESSAGE( "Valid input file did not result in XDocument #1", 
+                                mxDomBuilder->parse(
+                                    uno::Reference<io::XInputStream>(
+                                        mxValidInStream.get())).is() );
+        CPPUNIT_ASSERT_MESSAGE( "Valid input file resulted in parse errors", 
+                                mxErrHandler->noErrors() );
+    }
+
+    void warningInputTest()
+    {
+        CPPUNIT_ASSERT_MESSAGE( "Valid input file did not result in XDocument #2", 
+                                mxDomBuilder->parse(
+                                    uno::Reference<io::XInputStream>(
+                                        mxWarningInStream.get())).is() );
+        CPPUNIT_ASSERT_MESSAGE( "No parse warnings in unclean input file", 
+                                mxErrHandler->mnWarnCount && !mxErrHandler->mnErrCount && !mxErrHandler->mnFatalCount );
+    }
+
+    void errorInputTest()
+    {        
+        CPPUNIT_ASSERT_MESSAGE( "Valid input file did not result in XDocument #3", 
+                                mxDomBuilder->parse(
+                                    uno::Reference<io::XInputStream>(
+                                        mxErrorInStream.get())).is() );
+        CPPUNIT_ASSERT_MESSAGE( "No parse errors in unclean input file", 
+                                !mxErrHandler->mnWarnCount && mxErrHandler->mnErrCount && !mxErrHandler->mnFatalCount );
+    }
+
+    void fatalInputTest()
+    {        
+        CPPUNIT_ASSERT_MESSAGE( "Broken input file resulted in XDocument", 
+                                !mxDomBuilder->parse(
+                                    uno::Reference<io::XInputStream>(
+                                        mxFatalInStream.get())).is() );
+        CPPUNIT_ASSERT_MESSAGE( "No fatal parse errors in unclean input file", 
+                                !mxErrHandler->mnWarnCount && !mxErrHandler->mnErrCount && mxErrHandler->mnFatalCount );
+    };
+
+    // Change the following lines only, if you add, remove or rename 
+    // member functions of the current class, 
+    // because these macros are need by auto register mechanism.
+    CPPUNIT_TEST_SUITE(BasicTest);
+    CPPUNIT_TEST(validInputTest);
+    CPPUNIT_TEST(warningInputTest);
+    CPPUNIT_TEST(errorInputTest);
+    CPPUNIT_TEST(fatalInputTest);
+    CPPUNIT_TEST_SUITE_END();
+};
+
+struct SerializerTest : public CppUnit::TestFixture
+{
+    SerializerTest() : mbUnoInitialized(false) {}
+
+    uno::Reference<uno::XComponentContext>                   mxCtx;
+    rtl::Reference<CDocumentBuilder>                         mxDomBuilder;
+    rtl::Reference<ErrorHandler>                             mxErrHandler;
+    rtl::Reference<SequenceInputStream>                      mxInStream;
+    rtl::Reference<DocumentHandler>                          mxHandler;
+    rtl::Reference<TokenHandler>                             mxTokHandler;
+    uno::Sequence< beans::Pair< rtl::OUString, sal_Int32 > > maRegisteredNamespaces;
+    bool                                                     mbUnoInitialized;
+
+    void setUp()
+    {
+        // need working typelib, bootstrap UNO now
+        if( !mbUnoInitialized )
+        {
+            const char* pArgs( getForwardString() );
+            CPPUNIT_ASSERT_MESSAGE("Test file parameter", pArgs);
+
+            const rtl::OUString sBaseDir=rtl::OUString::createFromAscii(pArgs);
+
+            // bootstrap UNO
+            try
+            {
+                ::rtl::OUString aIniUrl;
+                CPPUNIT_ASSERT_MESSAGE( 
+                    "Converting ini file to URL",
+                    osl_getFileURLFromSystemPath( 
+                        (sBaseDir+rtl::OUString::createFromAscii("unoxml_unittest_test.ini")).pData, 
+                        &aIniUrl.pData ) == osl_File_E_None );
+
+                mxCtx = ::cppu::defaultBootstrap_InitialComponentContext(aIniUrl);
+                CPPUNIT_ASSERT_MESSAGE("Getting component context", mxCtx.is());
+            }
+            catch( uno::Exception& )
+            {
+                CPPUNIT_ASSERT_MESSAGE("Bootstrapping UNO", false);
+            }
+
+            mbUnoInitialized = true;
+        }
+
+        mxErrHandler.set( new ErrorHandler() );
+        mxDomBuilder.set( new CDocumentBuilder(
+                              uno::Reference< lang::XMultiServiceFactory >(  
+                                  mxCtx->getServiceManager(), 
+                                  uno::UNO_QUERY )));
+        mxInStream.set( new SequenceInputStream(ByteSequence((sal_Int8*)validTestFile,
+                                                             sizeof(validTestFile)/sizeof(*validTestFile))) );
+        mxDomBuilder->setErrorHandler(mxErrHandler.get());
+
+        mxHandler.set( new DocumentHandler() );
+        mxTokHandler.set( new TokenHandler() );
+
+        maRegisteredNamespaces.realloc(2);
+        maRegisteredNamespaces[0] = beans::make_Pair(
+            rtl::OUString( 
+                RTL_CONSTASCII_USTRINGPARAM(
+                    "urn:oasis:names:tc:opendocument:xmlns:office:1.0") ),
+            xml::sax::FastToken::NAMESPACE);
+        maRegisteredNamespaces[1] = beans::make_Pair(
+            rtl::OUString( 
+                RTL_CONSTASCII_USTRINGPARAM(
+                    "http://www.w3.org/1999/xlink") ),
+            2*xml::sax::FastToken::NAMESPACE);
+    }
+
+    void serializerTest ()
+    {        
+        uno::Reference< xml::dom::XDocument > xDoc=
+            mxDomBuilder->parse(
+                uno::Reference<io::XInputStream>(
+                    mxInStream.get()));
+        CPPUNIT_ASSERT_MESSAGE( "Valid input file did not result in XDocument", 
+                                xDoc.is() );
+        CPPUNIT_ASSERT_MESSAGE( "Valid input file resulted in parse errors", 
+                                mxErrHandler->noErrors() );
+
+        uno::Reference< xml::sax::XSAXSerializable > xSaxSerializer(
+            xDoc, uno::UNO_QUERY);
+        CPPUNIT_ASSERT_MESSAGE( "XSAXSerializable not supported", 
+                                xSaxSerializer.is() );
+
+        uno::Reference< xml::sax::XFastSAXSerializable > xFastSaxSerializer(
+            xDoc, uno::UNO_QUERY);
+        CPPUNIT_ASSERT_MESSAGE( "XFastSAXSerializable not supported", 
+                                xSaxSerializer.is() );
+
+        xFastSaxSerializer->fastSerialize( mxHandler.get(), 
+                                           mxTokHandler.get(), 
+                                           uno::Sequence< beans::StringPair >(),
+                                           maRegisteredNamespaces );
+    }
+
+    // Change the following lines only, if you add, remove or rename 
+    // member functions of the current class, 
+    // because these macros are need by auto register mechanism.
+
+    CPPUNIT_TEST_SUITE(SerializerTest);
+    CPPUNIT_TEST(serializerTest);
+    CPPUNIT_TEST_SUITE_END();
+};
+
+// -----------------------------------------------------------------------------
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(BasicTest, "BasicTest");
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(SerializerTest, "SerializerTest");
+}
+
+
+// -----------------------------------------------------------------------------
+
+// this macro creates an empty function, which will called by the RegisterAllFunctions()
+// to let the user the possibility to also register some functions by hand.
+NOADDITIONAL;
+
diff --git unoxml/test/export.map unoxml/test/export.map
new file mode 100644
index 0000000..0bc81ba
--- /dev/null
+++ unoxml/test/export.map
@@ -0,0 +1,38 @@
+#*************************************************************************
+#
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+# 
+# Copyright 2008 by Sun Microsystems, Inc.
+#
+# OpenOffice.org - a multi-platform office productivity suite
+#
+# $RCSfile: export.map,v $
+#
+# $Revision: 1.2 $
+#
+# This file is part of OpenOffice.org.
+#
+# OpenOffice.org is free software: you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License version 3
+# only, as published by the Free Software Foundation.
+#
+# OpenOffice.org is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License version 3 for more details
+# (a copy is included in the LICENSE file that accompanied this code).
+#
+# You should have received a copy of the GNU Lesser General Public License
+# version 3 along with OpenOffice.org.  If not, see
+# <http://www.openoffice.org/license.html>
+# for a copy of the LGPLv3 License.
+#
+#*************************************************************************
+
+UDK_3.1 {
+    global:
+		registerAllTestFunction;
+
+    local:
+        *;
+};
diff --git unoxml/test/makefile.mk unoxml/test/makefile.mk
new file mode 100644
index 0000000..2c1c784
--- /dev/null
+++ unoxml/test/makefile.mk
@@ -0,0 +1,106 @@
+#*************************************************************************
+#
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+# 
+# Copyright 2008 by Sun Microsystems, Inc.
+#
+# OpenOffice.org - a multi-platform office productivity suite
+#
+# $RCSfile: makefile.mk,v $
+#
+# $Revision: 1.9 $
+#
+# This file is part of OpenOffice.org.
+#
+# OpenOffice.org is free software: you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License version 3
+# only, as published by the Free Software Foundation.
+#
+# OpenOffice.org is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License version 3 for more details
+# (a copy is included in the LICENSE file that accompanied this code).
+#
+# You should have received a copy of the GNU Lesser General Public License
+# version 3 along with OpenOffice.org.  If not, see
+# <http://www.openoffice.org/license.html>
+# for a copy of the LGPLv3 License.
+#
+#*************************************************************************
+
+PRJ=..
+
+PRJNAME=unoxml
+TARGET=tests
+TARGETTYPE=GUI
+
+ENABLE_EXCEPTIONS=TRUE
+
+# --- Settings -----------------------------------------------------
+
+.INCLUDE :  settings.mk
+
+# --- Common ----------------------------------------------------------
+
+# BEGIN ----------------------------------------------------------------
+# auto generated Target:tests by codegen.pl 
+SHL1OBJS=  \
+	$(SLO)$/domtest.obj
+
+# the following three libs are a bit of a hack: cannot link against
+# unoxml here, because not yet delivered (and does not export
+# ~anything). Need the functionality to test, so we're linking it in
+# statically. Need to keep this in sync with
+# source/services/makefile.mk
+SHL1LIBS= \
+    $(SLB)$/domimpl.lib \
+    $(SLB)$/xpathimpl.lib \
+    $(SLB)$/eventsimpl.lib
+
+SHL1TARGET= tests
+SHL1STDLIBS= \
+    $(UCBHELPERLIB) \
+    $(LIBXML2LIB) \
+	$(TOOLSLIB)	\
+	$(COMPHELPERLIB)	\
+	$(CPPUHELPERLIB)	\
+	$(CPPUNITLIB)	 \
+	$(CPPULIB)	\
+	$(SAXLIB) \
+	$(SALLIB)\
+	$(EXPATASCII3RDLIB)
+
+SHL1IMPLIB= i$(SHL1TARGET)
+
+DEF1NAME    =$(SHL1TARGET)
+SHL1VERSIONMAP = export.map 
+
+# END ------------------------------------------------------------------
+
+#------------------------------- All object files -------------------------------
+# do this here, so we get right dependencies
+SLOFILES=$(SHL1OBJS) 
+
+# --- Targets ------------------------------------------------------
+
+.INCLUDE : target.mk
+.INCLUDE : _cppunit.mk 
+
+# --- Fake uno bootstrap ------------------------
+
+$(BIN)$/unoxml_unittest_test.ini : makefile.mk
+	rm -f $@
+	@echo UNO_SERVICES= > $@
+	@echo UNO_TYPES=$(UNOUCRRDB:s/\/\\/) >> $@
+
+# --- Enable testshl2 execution in normal build ------------------------
+
+$(MISC)$/unoxml_unittest_succeeded : $(SHL1TARGETN) $(BIN)$/unoxml_unittest_test.ini
+		@echo ----------------------------------------------------------
+		@echo - start unit test on library $(SHL1TARGETN)
+		@echo ----------------------------------------------------------
+		testshl2 -forward $(BIN)$/ -sf $(mktmp ) $(SHL1TARGETN)
+		$(TOUCH) $@
+
+ALLTAR : $(MISC)$/unoxml_unittest_succeeded
