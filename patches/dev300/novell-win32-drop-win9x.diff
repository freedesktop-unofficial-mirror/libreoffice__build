--- scp2/source/ooo/ure.scp
+++ scp2/source/ooo/ure.scp
@@ -942,16 +942,6 @@
 #endif
 #endif
 
-#if defined WNT
-File gid_File_Dl_Unicows
-    TXT_FILE_BODY;
-    Dir = SCP2_URE_DL_DIR;
-    Name = SCP2_URE_DL_NORMAL("unicows");
-    Styles = (PACKED, VERSION_INDEPENDENT_COMP_ID);
-    // CompID = "F05005FA-5B2C-43B1-83EF-988EFFF1D7BD";
-End
-#endif
-
 #if defined WNT
 File gid_File_Dl_Uwinapi
     TXT_FILE_BODY;
--- external/prj/d.lst
+++ external/prj/d.lst
@@ -54,7 +54,6 @@
 
 ..\unowinreg\unowinreg.dll %_DEST%\bin%_EXT%\unowinreg.dll
 
-..\msi\instmsia.exe %_DEST%\bin%_EXT%\instmsia.exe
 ..\msi\instmsiw.exe %_DEST%\bin%_EXT%\instmsiw.exe
 
 ..\%__SRC%\bin\mingwm10.dll %_DEST%\bin%_EXT%\mingwm10.dll
--- desktop/win32/source/setup/setup.cpp
+++ desktop/win32/source/setup/setup.cpp
@@ -1334,9 +1334,7 @@
     const TCHAR sGUniqueName[] = TEXT( "Global\\_MSISETUP_{EA8130C1-8D3D-4338-9309-1A52D530D846}" );
     const TCHAR sUniqueName[]  = TEXT( "_MSISETUP_{EA8130C1-8D3D-4338-9309-1A52D530D846}" );
 
-    if ( IsWin9x() )
-        sMutexName = sUniqueName;
-    else if ( ( GetOSVersion() < 5 ) && ! IsTerminalServerInstalled() )
+    if ( ( GetOSVersion() < 5 ) && ! IsTerminalServerInstalled() )
         sMutexName = sUniqueName;
     else
         sMutexName = sGUniqueName;
@@ -1407,8 +1407,7 @@
         if ( !bInit )
         {
             bInit = true;
-            if ( ! IsWin9x() )
-                _ftprintf( m_pLogFile, TEXT("%c"), 0xfeff );
+            _ftprintf( m_pLogFile, TEXT("%c"), 0xfeff );
 
             _tsetlocale( LC_ALL, TEXT("") );
             _ftprintf( m_pLogFile, TEXT("\nCodepage=%s\nMultiByte Codepage=[%d]\n"),
@@ -1660,9 +1660,6 @@
 //--------------------------------------------------------------------------
 boolean SetupAppX::IsAdmin()
 {
-    if ( IsWin9x() )
-        return true;
-
     PSID aPsidAdmin;
     SID_IDENTIFIER_AUTHORITY aAuthority = SECURITY_NT_AUTHORITY;
     

--- desktop/win32/source/setup/setup_main.hxx
+++ desktop/win32/source/setup/setup_main.hxx
@@ -36,7 +36,6 @@
 {
     DWORD           m_nOSVersion;
     DWORD           m_nMinorVersion;
-    boolean         m_bIsWin9x      : 1;
     boolean         m_bNeedReboot   : 1;
     boolean         m_bAdministrative : 1;
 
@@ -58,7 +58,6 @@
     virtual void    DisplayError( UINT nErr ) const = 0;
 
     void            SetError( UINT nErr ) { m_uiRet = nErr; }
-    boolean         IsWin9x() const { return m_bIsWin9x; }
     DWORD           GetOSVersion() const { return m_nOSVersion; }
     DWORD           GetMinorVersion() const { return m_nMinorVersion; }
 
@@ -69,7 +69,6 @@
     boolean         NeedReboot() const { return m_bNeedReboot; }
 };
 
-SetupApp* Create_SetupAppA();
 SetupApp* Create_SetupAppW();
 
 #endif
--- desktop/win32/source/setup/setup_main.cxx
+++ desktop/win32/source/setup/setup_main.cxx
@@ -66,7 +66,6 @@
 
     m_nOSVersion    = sInfoOS.dwMajorVersion;
     m_nMinorVersion = sInfoOS.dwMinorVersion;
-    m_bIsWin9x      = ( VER_PLATFORM_WIN32_NT != sInfoOS.dwPlatformId );
     m_bNeedReboot   = false;
     m_bAdministrative = false;
 }
@@ -95,14 +95,9 @@
 
     GetVersionEx( &sInfoOS );
 
-    boolean bIsWin9x = ( VER_PLATFORM_WIN32_NT != sInfoOS.dwPlatformId );
- 
     SetupApp *pSetup;
 
-    if ( bIsWin9x )
-        pSetup = Create_SetupAppA();
-    else
-        pSetup = Create_SetupAppW();
+    pSetup = Create_SetupAppW();
 
     try
     {
--- desktop/win32/source/setup/makefile.mk
+++ desktop/win32/source/setup/makefile.mk
@@ -69,7 +69,6 @@
 .ENDIF			# "$(WITH_LANG)"!=""
 
 OBJFILES= 	$(OBJ)$/setup_main.obj \
-			$(OBJ)$/setup_a.obj \
 			$(OBJ)$/setup_w.obj
 
 # --- Targets ------------------------------------------------------
--- configure.in
+++ configure.in
@@ -4751,7 +4751,7 @@
 	else
 		HAVE_PSDK_H="no"
 	fi
-	if test -f "$PSDK_HOME/lib/unicows.lib"; then
+    if test -f "$PSDK_HOME/lib/user32.lib"; then
 		HAVE_PSDK_LIB="yes"
 	else
 		HAVE_PSDK_LIB="no"
@@ -5038,22 +5038,6 @@
 AC_SUBST(ZIP_HOME)
 
 dnl ===================================================================
-dnl Windows builds need unicows.dll in external/unicows/
-dnl ===================================================================
-if test "$_os" = "WINNT"; then
-   AC_MSG_CHECKING([for unicows.dll])
-   if test -x ./external/unicows/unicows.dll; then
-      AC_MSG_RESULT([found])
-   else
-      AC_MSG_ERROR([The Microsoft Layer for Unicode (unicows.dll) is missing in external/unicows/.
-Get it from the Microsoft site and put it into external/unicows.
-(Note: Microsoft seems to enjoy changing the exact location of this file. You
-may have to search Microsoft's website.) Last time it was seen at:
-<http://download.microsoft.com/download/b/7/5/b75eace3-00e2-4aa0-9a6f-0b6882c71642/unicows.exe>.])
-   fi
-fi
-
-dnl ===================================================================
 dnl Windows builds need dbghelp.dll in external/dbghelp/
 dnl ===================================================================
 if test "$_os" = "WINNT"; then
@@ -5103,22 +5087,20 @@
 fi
 
 dnl ===================================================================
-dnl Windows builds with VS 2003/2005/2008 need instmsia.exe and instmsiw.exe in external/msi
+dnl Windows builds with VS 2003/2005/2008 need instmsiw.exe in external/msi
 dnl ===================================================================
 if test "$_os" = "WINNT"; then
    if test  "$WITH_MINGWIN" = "yes" || test "$COMEX" -ge "10"; then
-   AC_MSG_CHECKING([for instmsia.exe/instmsiw.exe])
-   if test -x ./external/msi/instmsia.exe -a -x ./external/msi/instmsiw.exe; then
+   AC_MSG_CHECKING([for instmsiw.exe])
+   if test -x ./external/msi/instmsiw.exe; then
       AC_MSG_RESULT([found])
    else
-      MSIAPATH=`/bin/find "$COMPATH/.." -iname instmsia.exe | head -n 1`
       MSIWPATH=`/bin/find "$COMPATH/.." -iname instmsiw.exe | head -n 1`
-      if test -n "$MSIAPATH" -a -n "$MSIWPATH"; then
-         cp "$MSIAPATH" ./external/msi/ && chmod +x ./external/msi/instmsia.exe && MSIACOPY="OK"
+      if test -n "$MSIWPATH"; then
          cp "$MSIWPATH" ./external/msi/ && chmod +x ./external/msi/instmsiw.exe && MSIWCOPY="OK"
       fi
-      if test -z "$MSIACOPY" -o -z "$MSIWCOPY"; then
-         AC_MSG_ERROR([instmsia.exe and/or instmsiw.exe are/is missing in the default location.
+      if test -z "$MSIWCOPY"; then
+         AC_MSG_ERROR([instmsiw.exe is missing in the default location.
 These programs are part of the Visual Studio installation and should be found in a
 directory similar to:
 "c:\\Program Files\\Microsoft Visual Studio .NET 2003\\Common7\\Tools\\Deployment\\MsiRedist\\"
