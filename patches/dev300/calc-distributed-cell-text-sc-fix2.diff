diff --git sc/source/ui/view/output2.cxx sc/source/ui/view/output2.cxx
index ebd1616..008dd8f 100644
--- sc/source/ui/view/output2.cxx
+++ sc/source/ui/view/output2.cxx
@@ -2101,7 +2101,7 @@ public:
      */
     bool isVerticallyOriented() const;
 
-    void setAlignmentItems(ScFieldEditEngine* pEngine);
+    void setAlignmentItems(ScFieldEditEngine* pEngine, ScBaseCell* pCell);
     bool adjustHorAlignment(ScFieldEditEngine* pEngine);
 
 private:
@@ -2203,7 +2203,7 @@ bool EditAlignmentParam::isVerticallyOriented() const
     return (meOrient == SVX_ORIENTATION_TOPBOTTOM || meOrient == SVX_ORIENTATION_BOTTOMTOP);
 }
 
-void EditAlignmentParam::setAlignmentItems(ScFieldEditEngine* pEngine)
+void EditAlignmentParam::setAlignmentItems(ScFieldEditEngine* pEngine, ScBaseCell* pCell)
 {
     if (isVerticallyOriented() || mbAsianVertical)
     {
@@ -2300,6 +2300,16 @@ void EditAlignmentParam::setAlignmentItems(ScFieldEditEngine* pEngine)
     }
 
     pEngine->SetVertical(mbAsianVertical);
+    if (pCell && pCell->GetCellType() == CELLTYPE_EDIT)
+    {
+        // We need to synchronize the vertical mode in the EditTextObject
+        // instance too.  No idea why we keep this state in two separate
+        // instances.
+        ScEditCell* pEditCell = static_cast<ScEditCell*>(pCell);
+        const EditTextObject* pData = pEditCell->GetData();
+        if (pData)
+            const_cast<EditTextObject*>(pData)->SetVertical(mbAsianVertical);
+    }
 }
 
 bool EditAlignmentParam::adjustHorAlignment(ScFieldEditEngine* pEngine)
@@ -2600,7 +2609,7 @@ void ScOutputData::DrawEdit(BOOL bPixelToLogic)
                                 pEngine->SetBackgroundColor( aBackCol );
                             }
 
-                            aAlignParam.setAlignmentItems(pEngine);
+                            aAlignParam.setAlignmentItems(pEngine, pCell);
 
                             //	Read content from cell
 
