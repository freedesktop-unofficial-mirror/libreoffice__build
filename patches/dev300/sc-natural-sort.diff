--- sc/inc/dbcolect.hxx.old	2009-04-02 10:45:43.000000000 +0000
+++ sc/inc/dbcolect.hxx	2009-04-06 16:41:48.000000000 +0000
@@ -65,6 +65,7 @@ private:
 	BOOL			bStripData;
 	// SortParam
 	BOOL			bSortCaseSens;
+	BOOL			bSortNaturalSort;
 	BOOL			bIncludePattern;
 	BOOL			bSortInplace;
 	BOOL			bSortUserDef;
--- sc/inc/global.hxx.old	2009-04-06 16:41:48.000000000 +0000
+++ sc/inc/global.hxx	2009-04-06 16:41:48.000000000 +0000
@@ -828,6 +828,7 @@ struct SC_DLLPUBLIC ScQueryParam
 	BOOL			bByRow;
 	BOOL			bInplace;
 	BOOL			bCaseSens;
+	BOOL			bNaturalSort;
 	BOOL			bRegExp;
     BOOL            bMixedComparison;   // whether numbers are smaller than strings
 	BOOL			bDuplicate;
--- sc/inc/sc.hrc.old	2009-04-06 16:41:48.000000000 +0000
+++ sc/inc/sc.hrc	2009-04-06 16:41:48.000000000 +0000
@@ -1126,6 +1126,7 @@
 #define SID_SORT_CASESENS		(SC_PARAM_START+2)
 #define SID_SORT_ATTRIBS		(SC_PARAM_START+3)
 #define SID_SORT_USERDEF		(SC_PARAM_START+4)
+#define SID_SORT_NATURALSORT	(SC_PARAM_START+5)
 
 // Resourcen -------------------------------------------------------------
 
--- sc/inc/sortparam.hxx.old	2009-04-02 10:45:43.000000000 +0000
+++ sc/inc/sortparam.hxx	2009-04-06 16:41:48.000000000 +0000
@@ -52,6 +52,7 @@ struct SC_DLLPUBLIC ScSortParam
 	BOOL		bHasHeader;
 	BOOL		bByRow;
 	BOOL		bCaseSens;
+	BOOL		bNaturalSort;
 	BOOL		bUserDef;
 	USHORT		nUserIndex;
 	BOOL		bIncludePattern;
--- sc/sdi/scalc.sdi.old	2009-04-06 16:41:48.000000000 +0000
+++ sc/sdi/scalc.sdi	2009-04-06 16:41:48.000000000 +0000
@@ -1577,7 +1577,7 @@ SfxVoidItem DataSelect SID_DATA_SELECT
 
 //--------------------------------------------------------------------------
 SfxVoidItem DataSort SID_SORT
-(SfxBoolItem ByRows SID_SORT_BYROW,SfxBoolItem HasHeader SID_SORT_HASHEADER,SfxBoolItem CaseSensitive SID_SORT_CASESENS,SfxBoolItem IncludeAttribs SID_SORT_ATTRIBS,SfxUInt16Item UserDefIndex SID_SORT_USERDEF,SfxInt32Item Col1 FN_PARAM_1,SfxBoolItem Ascending1 FN_PARAM_2,SfxInt32Item Col2 FN_PARAM_3,SfxBoolItem Ascending2 FN_PARAM_4,SfxInt32Item Col3 FN_PARAM_5,SfxBoolItem Ascending3 FN_PARAM_6)
+(SfxBoolItem ByRows SID_SORT_BYROW,SfxBoolItem HasHeader SID_SORT_HASHEADER,SfxBoolItem CaseSensitive SID_SORT_CASESENS,SfxBoolItem NaturalSort SID_SORT_NATURALSORT,SfxBoolItem IncludeAttribs SID_SORT_ATTRIBS,SfxUInt16Item UserDefIndex SID_SORT_USERDEF,SfxInt32Item Col1 FN_PARAM_1,SfxBoolItem Ascending1 FN_PARAM_2,SfxInt32Item Col2 FN_PARAM_3,SfxBoolItem Ascending2 FN_PARAM_4,SfxInt32Item Col3 FN_PARAM_5,SfxBoolItem Ascending3 FN_PARAM_6)
 [
 	/* flags: */
 	AutoUpdate = FALSE,
--- sc/source/core/data/sortparam.cxx.old	2009-04-02 10:45:01.000000000 +0000
+++ sc/source/core/data/sortparam.cxx	2009-04-06 16:41:48.000000000 +0000
@@ -50,7 +50,7 @@ ScSortParam::ScSortParam()
 
 ScSortParam::ScSortParam( const ScSortParam& r ) :
 		nCol1(r.nCol1),nRow1(r.nRow1),nCol2(r.nCol2),nRow2(r.nRow2),
-		bHasHeader(r.bHasHeader),bByRow(r.bByRow),bCaseSens(r.bCaseSens),
+		bHasHeader(r.bHasHeader),bByRow(r.bByRow),bCaseSens(r.bCaseSens),bNaturalSort(r.bNaturalSort),
 		bUserDef(r.bUserDef),nUserIndex(r.nUserIndex),bIncludePattern(r.bIncludePattern),
 		bInplace(r.bInplace),
 		nDestTab(r.nDestTab),nDestCol(r.nDestCol),nDestRow(r.nDestRow),
@@ -73,7 +73,7 @@ void ScSortParam::Clear()
 	nCompatHeader = 2;
 	nDestTab = 0;
 	nUserIndex = 0;
-	bHasHeader=bCaseSens=bUserDef = FALSE;
+	bHasHeader=bCaseSens=bUserDef=bNaturalSort = FALSE;
 	bByRow=bIncludePattern=bInplace	= TRUE;
 	aCollatorLocale = ::com::sun::star::lang::Locale();
 	aCollatorAlgorithm.Erase();
@@ -96,6 +96,7 @@ ScSortParam& ScSortParam::operator=( con
 	nRow2			= r.nRow2;
 	bHasHeader		= r.bHasHeader;
 	bCaseSens		= r.bCaseSens;
+	bNaturalSort	= r.bNaturalSort;
 	bByRow			= r.bByRow;
 	bUserDef		= r.bUserDef;
 	nUserIndex		= r.nUserIndex;
@@ -137,6 +138,7 @@ BOOL ScSortParam::operator==( const ScSo
 		&& (bHasHeader		== rOther.bHasHeader)
 		&& (bByRow			== rOther.bByRow)
 		&& (bCaseSens		== rOther.bCaseSens)
+		&& (bNaturalSort	== rOther.bNaturalSort)
 		&& (bUserDef		== rOther.bUserDef)
 		&& (nUserIndex		== rOther.nUserIndex)
 		&& (bIncludePattern == rOther.bIncludePattern)
--- sc/source/core/data/table3.cxx.old	2009-04-06 16:41:48.000000000 +0000
+++ sc/source/core/data/table3.cxx	2009-04-06 16:41:48.000000000 +0000
@@ -64,6 +64,143 @@
 
 #include <vector>
 
+using namespace ::com::sun::star;
+
+namespace naturalsort {
+
+using namespace ::com::sun::star::i18n;
+
+/** Splits a given string into three parts: the prefix, number string, and 
+	the suffix.
+
+	@param sWhole
+	Original string to be split into pieces
+
+	@param sPrefix
+	Prefix string that consists of the part before the first number token
+
+	@param sSuffix
+	String after the last number token.  This may still contain number strings.
+
+	@param fNum
+	Number converted from the middle number string
+
+	@return Returns TRUE if a numeral element is found in a given string, or 
+	FALSE if no numeral element is found.
+*/
+BOOL SplitString( const rtl::OUString &sWhole, 
+	rtl::OUString &sPrefix, rtl::OUString &sSuffix, double &fNum )
+{
+	i18n::LocaleDataItem aLocaleItem = ScGlobal::pLocaleData->getLocaleItem();
+
+	// Get prefix element
+	rtl::OUString sEmpty, sUser = rtl::OUString::createFromAscii( "-" );
+	ParseResult aPRPre = ScGlobal::pCharClass->parsePredefinedToken( 
+		KParseType::IDENTNAME, sWhole, 0, 
+		KParseTokens::ANY_LETTER, sUser, KParseTokens::ANY_LETTER, sUser );
+	sPrefix = sWhole.copy( 0, aPRPre.EndPos );
+	
+	// Return FALSE if no numeral element is found
+	if ( aPRPre.EndPos == sWhole.getLength() )
+		return FALSE;
+	
+	// Get numeral element
+	sUser = aLocaleItem.decimalSeparator;
+	ParseResult aPRNum = ScGlobal::pCharClass->parsePredefinedToken(
+		KParseType::ANY_NUMBER, sWhole, aPRPre.EndPos, 
+		KParseTokens::ANY_NUMBER, sEmpty, KParseTokens::ANY_NUMBER, sUser );
+	
+	if ( aPRNum.EndPos == aPRPre.EndPos )
+		return FALSE;
+	
+	fNum = aPRNum.Value;
+	sSuffix = sWhole.copy( aPRNum.EndPos );
+	
+	return TRUE;
+}
+
+/** Naturally compares two given strings.
+
+	This is the main function that should be called externally.  It returns 
+	either 1, 0, or -1 depending on the comparison result of given two strings.
+
+	@param sInput1
+	Input string 1
+
+	@param sInput2
+	Input string 2
+
+	@param bCaseSens
+	Boolean value for case sensitivity
+
+	@param pData
+	Pointer to user defined sort list
+
+	@param pCW
+	Pointer to collator wrapper for normal string comparison
+	
+	@return Returnes 1 if sInput1 is greater, 0 if sInput1 == sInput2, and -1 if 
+	sInput2 is greater.
+*/
+short Compare( const String &sInput1, const String &sInput2, 
+			   const BOOL bCaseSens, const ScUserListData* pData, const CollatorWrapper *pCW )
+{   
+	rtl::OUString sStr1( sInput1 ), sStr2( sInput2 ), sPre1, sSuf1, sPre2, sSuf2;
+
+	do
+	{
+		double nNum1, nNum2;
+		BOOL bNumFound1 = SplitString( sStr1, sPre1, sSuf1, nNum1 );
+		BOOL bNumFound2 = SplitString( sStr2, sPre2, sSuf2, nNum2 );
+
+		short nPreRes; // Prefix comparison result
+		if ( pData )
+		{
+			if ( bCaseSens )
+			{
+				if ( !bNumFound1 || !bNumFound2 )
+					return static_cast<short>(pData->Compare( sStr1, sStr2 ));
+				else
+					nPreRes = pData->Compare( sPre1, sPre2 );
+			}
+			else
+			{
+				if ( !bNumFound1 || !bNumFound2 )
+					return static_cast<short>(pData->ICompare( sStr1, sStr2 ));
+				else
+					nPreRes = pData->ICompare( sPre1, sPre2 );
+			}
+		} 
+		else
+		{
+			if ( !bNumFound1 || !bNumFound2 )
+				return static_cast<short>(pCW->compareString( sStr1, sStr2 ));
+			else
+				nPreRes = static_cast<short>(pCW->compareString( sPre1, sPre2 ));
+		}
+		
+		// Prefix strings differ.  Return immediately.
+		if ( nPreRes != 0 ) return nPreRes;
+			
+		if ( nNum1 != nNum2 )
+		{
+			if ( nNum1 < nNum2 ) return -1;
+			return static_cast<short>( nNum1 > nNum2 );
+		}
+
+		// The prefix and the first numerical elements are equal, but the suffix
+		// strings may still differ.  Stay in the loop.
+
+		sStr1 = sSuf1;
+		sStr2 = sSuf2;
+
+	} while ( true );
+
+	return 0;
+}
+
+}
+
 // STATIC DATA -----------------------------------------------------------
 
 const USHORT nMaxSorts = 3;		// maximale Anzahl Sortierkriterien in aSortParam
@@ -285,25 +422,40 @@ short ScTable::CompareCell( USHORT nSort
 					((ScStringCell*)pCell2)->GetString(aStr2);
 				else
 					GetString(nCell2Col, nCell2Row, aStr2);
-				BOOL bUserDef = aSortParam.bUserDef;
+
+				BOOL bUserDef     = aSortParam.bUserDef;		// custom sort order
+				BOOL bNaturalSort = aSortParam.bNaturalSort;	// natural sort
+				BOOL bCaseSens    = aSortParam.bCaseSens;		// case sensitivity
+				
 				if (bUserDef)
 				{
 					ScUserListData* pData =
-						(ScUserListData*)(ScGlobal::GetUserList()->At(
-						aSortParam.nUserIndex));
+						static_cast<ScUserListData*>( (ScGlobal::GetUserList()->At(
+						aSortParam.nUserIndex)) );
+						
 					if (pData)
 					{
-						if ( aSortParam.bCaseSens )
-                            nRes = sal::static_int_cast<short>( pData->Compare(aStr1, aStr2) );
+						if ( bNaturalSort )
+							nRes = naturalsort::Compare( aStr1, aStr2, bCaseSens, pData, pSortCollator );
 						else
-                            nRes = sal::static_int_cast<short>( pData->ICompare(aStr1, aStr2) );
+						{
+							if ( bCaseSens )
+								nRes = sal::static_int_cast<short>( pData->Compare(aStr1, aStr2) );
+							else
+								nRes = sal::static_int_cast<short>( pData->ICompare(aStr1, aStr2) );
+						}
 					}
 					else
 						bUserDef = FALSE;
 
 				}
 				if (!bUserDef)
-					nRes = (short) pSortCollator->compareString( aStr1, aStr2 );
+				{
+					if ( bNaturalSort )
+						nRes = naturalsort::Compare( aStr1, aStr2, bCaseSens, NULL, pSortCollator );
+					else
+						nRes = static_cast<short>( pSortCollator->compareString( aStr1, aStr2 ) );
+				}
 			}
 			else if ( bStr1 )				// String <-> Zahl
 				nRes = 1;					// Zahl vorne
--- sc/source/core/tool/dbcolect.cxx.old	2009-04-02 10:45:03.000000000 +0000
+++ sc/source/core/tool/dbcolect.cxx	2009-04-06 16:41:48.000000000 +0000
@@ -104,6 +104,7 @@ ScDBData::ScDBData( const ScDBData& rDat
 	bKeepFmt			(rData.bKeepFmt),
 	bStripData			(rData.bStripData),
 	bSortCaseSens   	(rData.bSortCaseSens),
+	bSortNaturalSort	(rData.bSortNaturalSort),
 	bIncludePattern 	(rData.bIncludePattern),
 	bSortInplace		(rData.bSortInplace),
 	bSortUserDef		(rData.bSortUserDef),
@@ -197,6 +198,7 @@ ScDBData& ScDBData::operator= (const ScD
 	bKeepFmt			= rData.bKeepFmt;
 	bStripData			= rData.bStripData;
 	bSortCaseSens   	= rData.bSortCaseSens;
+	bSortNaturalSort	= rData.bSortNaturalSort;
 	bIncludePattern 	= rData.bIncludePattern;
 	bSortInplace		= rData.bSortInplace;
 	nSortDestTab		= rData.nSortDestTab;
@@ -448,6 +450,7 @@ void ScDBData::GetSortParam( ScSortParam
 	rSortParam.bByRow = bByRow;
 	rSortParam.bHasHeader = bHasHeader;
 	rSortParam.bCaseSens = bSortCaseSens;
+	rSortParam.bNaturalSort = bSortNaturalSort;
 	rSortParam.bInplace = bSortInplace;
 	rSortParam.nDestTab = nSortDestTab;
 	rSortParam.nDestCol = nSortDestCol;
@@ -468,6 +471,7 @@ void ScDBData::GetSortParam( ScSortParam
 void ScDBData::SetSortParam( const ScSortParam& rSortParam )
 {
 	bSortCaseSens = rSortParam.bCaseSens;
+	bSortNaturalSort = rSortParam.bNaturalSort;
 	bIncludePattern = rSortParam.bIncludePattern;
 	bSortInplace = rSortParam.bInplace;
 	nSortDestTab = rSortParam.nDestTab;
--- sc/source/ui/dbgui/tpsort.cxx
+++ sc/source/ui/dbgui/tpsort.cxx
@@ -555,6 +555,7 @@ ScTabPageSortOptions::ScTabPageSortOptio
 		aBtnHeader		( this, ScResId( BTN_LABEL ) ),
 		aBtnFormats 	( this, ScResId( BTN_FORMATS ) ),
 		aBtnCopyResult	( this, ScResId( BTN_COPYRESULT ) ),
+		aBtnNaturalSort	( this, ScResId( BTN_NATURALSORT ) ),
 		aLbOutPos		( this, ScResId( LB_OUTAREA ) ),
 		aEdOutPos		( this, ScResId( ED_OUTAREA ) ),
 		aBtnSortUser	( this, ScResId( BTN_SORT_USER ) ),
@@ -566,7 +567,7 @@ ScTabPageSortOptions::ScTabPageSortOptio
 		aLineDirection	( this, ScResId( FL_DIRECTION ) ),
 		aBtnTopDown 	( this, ScResId( BTN_TOP_DOWN ) ),
 		aBtnLeftRight	( this, ScResId( BTN_LEFT_RIGHT ) ),
-		aFtAreaLabel	( this, ScResId( FT_AREA_LABEL ) ),
+// 		aFtAreaLabel	( this, ScResId( FT_AREA_LABEL ) ),
 //		aFtArea 		( this, ScResId( FT_AREA ) ),
 		//
 #if ENABLE_LAYOUT_EXPERIMENTAL
@@ -605,8 +606,8 @@ __EXPORT ScTabPageSortOptions::~ScTabPag
 
 void ScTabPageSortOptions::Init()
 {
-	aStrAreaLabel = aFtAreaLabel.GetText();
-	aStrAreaLabel.Append( (sal_Unicode) ' ' );
+// 	aStrAreaLabel = aFtAreaLabel.GetText();
+// 	aStrAreaLabel.Append( (sal_Unicode) ' ' );
 
 	//	CollatorRessource has user-visible names for sort algorithms
 	pColRes = new CollatorRessource();
@@ -685,8 +686,8 @@ void ScTabPageSortOptions::Init()
 		theArea += ')';
 
 		//aFtArea.SetText( theArea );
-		theArea.Insert( aStrAreaLabel, 0 );
-		aFtAreaLabel.SetText( theArea );
+		//theArea.Insert( aStrAreaLabel, 0 );
+		//aFtAreaLabel.SetText( theArea );
 
 		aBtnHeader.SetText( aStrColLabel );
 	}
@@ -732,9 +733,10 @@ void __EXPORT ScTabPageSortOptions::Rese
 		aLbSortUser.SelectEntryPos( 0 );
 	}
 
-	aBtnCase.Check		( rSortData.bCaseSens );
-	aBtnFormats.Check	( rSortData.bIncludePattern );
-	aBtnHeader.Check	( rSortData.bHasHeader );
+	aBtnCase.Check			( rSortData.bCaseSens );
+	aBtnFormats.Check		( rSortData.bIncludePattern );
+	aBtnHeader.Check		( rSortData.bHasHeader );
+	aBtnNaturalSort.Check	( rSortData.bNaturalSort );
 
 	if ( rSortData.bByRow )
 	{
@@ -800,6 +802,7 @@ BOOL __EXPORT ScTabPageSortOptions::Fill
 	theSortData.bByRow			= aBtnTopDown.IsChecked();
 	theSortData.bHasHeader		= aBtnHeader.IsChecked();
 	theSortData.bCaseSens		= aBtnCase.IsChecked();
+	theSortData.bNaturalSort	= aBtnNaturalSort.IsChecked();
 	theSortData.bIncludePattern = aBtnFormats.IsChecked();
 	theSortData.bInplace		= !aBtnCopyResult.IsChecked();
 	theSortData.nDestCol		= theOutPos.Col();
--- sc/source/ui/inc/sortdlg.hrc
+++ sc/source/ui/inc/sortdlg.hrc
@@ -64,7 +64,7 @@
 #define LB_SORT_USER		2
 #define LB_OUTAREA			3
 #define ED_OUTAREA          4
-#define FT_AREA_LABEL       5
+//#define FT_AREA_LABEL       5
 //#define FT_AREA             6
 #define BTN_SORT_USER       7
 #define BTN_CASESENSITIVE   8
@@ -79,6 +79,7 @@
 #define LB_LANGUAGE         17
 #define FT_ALGORITHM        18
 #define LB_ALGORITHM        19
+#define	BTN_NATURALSORT		20
 
 //#define RID_SCDLG_SORT_WARNING
 #define FT_TEXT             1
--- sc/source/ui/inc/tpsort.hxx
+++ sc/source/ui/inc/tpsort.hxx
@@ -53,7 +53,7 @@ class ScSortDlg;
 struct ScSortParam;
 
 //========================================================================
-// Kriterien
+// Kriterien (Sort Criteria)
 
 class ScTabPageSortFields : public SfxTabPage
 {
@@ -125,7 +125,7 @@ private:
 };
 
 //========================================================================
-// Sortieroptionen:
+// Sortieroptionen (Sort Options)
 
 class ScDocument;
 class ScRangeData;
@@ -158,6 +158,7 @@ private:
     CheckBox            aBtnCase;
     CheckBox            aBtnHeader;
     CheckBox            aBtnFormats;
+	CheckBox			aBtnNaturalSort;
 
     CheckBox            aBtnCopyResult;
     ListBox             aLbOutPos;
@@ -175,7 +176,7 @@ private:
     RadioButton         aBtnTopDown;
     RadioButton         aBtnLeftRight;
 
-    FixedText           aFtAreaLabel;
+//     FixedText           aFtAreaLabel;
 //  FixedInfo           aFtArea;
     LocalizedString aStrRowLabel;
     LocalizedString aStrColLabel;
--- sc/source/ui/src/sortdlg.src.old	2009-04-02 10:45:23.000000000 +0000
+++ sc/source/ui/src/sortdlg.src	2009-04-06 16:41:48.000000000 +0000
@@ -154,9 +154,20 @@ TabPage RID_SCPAGE_SORT_OPTIONS
 		Text [ en-US ] = "Include ~formats" ;
 		TabStop = TRUE ;
 	};
+	CheckBox BTN_NATURALSORT
+	{
+		Pos = MAP_APPFONT ( 12 , 48 ) ;
+		Size = MAP_APPFONT ( 242 , 10 ) ;
+		Text [ de ] = "Enable ~natural sort" ;
+		Text [ en-US ] = "Enable ~natural sort" ;
+		Text [ cs ] = "Aktivovat přirozené třídění" ;
+       Text [ sk ] = "Aktivovať prirodzené triedenie" ;
+		TabStop = TRUE ;
+		Text [ x-comment ] = " " ;
+	};
 	CheckBox BTN_COPYRESULT
 	{
-        Pos = MAP_APPFONT ( 12 , 48 ) ;
+        Pos = MAP_APPFONT ( 12 , 62 ) ;
         Size = MAP_APPFONT ( 242 , 10 ) ;
 		Text [ en-US ] = "~Copy sort results to:" ;
 		TabStop = TRUE ;
@@ -164,7 +175,7 @@ TabPage RID_SCPAGE_SORT_OPTIONS
 	ListBox LB_OUTAREA
 	{
 		Border = TRUE ;
-        Pos = MAP_APPFONT ( 20 , 59 ) ;
+        Pos = MAP_APPFONT ( 20 , 73 ) ;
         Size = MAP_APPFONT ( 93 , 90 ) ;
 		TabStop = TRUE ;
 		DropDown = TRUE ;
@@ -173,13 +184,13 @@ TabPage RID_SCPAGE_SORT_OPTIONS
 	{
 		Disable = TRUE ;
 		Border = TRUE ;
-        Pos = MAP_APPFONT ( 119 , 59 ) ;
+        Pos = MAP_APPFONT ( 119 , 73 ) ;
         Size = MAP_APPFONT ( 132 , 12 ) ;
 		TabStop = TRUE ;
 	};
 	CheckBox BTN_SORT_USER
 	{
-        Pos = MAP_APPFONT ( 12 , 75 ) ;
+        Pos = MAP_APPFONT ( 12 , 89 ) ;
         Size = MAP_APPFONT ( 242 , 10 ) ;
 		Text [ en-US ] = "Custom sort ~order" ;
 		TabStop = TRUE ;
@@ -188,21 +199,21 @@ TabPage RID_SCPAGE_SORT_OPTIONS
 	{
 		Disable = TRUE ;
 		Border = TRUE ;
-        Pos = MAP_APPFONT ( 20 , 86 ) ;
+        Pos = MAP_APPFONT ( 20 , 100 ) ;
         Size = MAP_APPFONT ( 231 , 90 ) ;
 		TabStop = TRUE ;
 		DropDown = TRUE ;
 	};
     FixedText FT_LANGUAGE
 	{
-        Pos = MAP_APPFONT ( 12 , 104 ) ;
+        Pos = MAP_APPFONT ( 12 , 118 ) ;
         Size = MAP_APPFONT ( 101 , 8 ) ;
 		Text [ en-US ] = "~Language";
 	};
 	ListBox LB_LANGUAGE
 	{
 		Border = TRUE ;
-        Pos = MAP_APPFONT ( 12 , 115 ) ;
+        Pos = MAP_APPFONT ( 12 , 129 ) ;
         Size = MAP_APPFONT ( 101 , 90 ) ;
 		TabStop = TRUE ;
 		DropDown = TRUE ;
@@ -210,44 +221,46 @@ TabPage RID_SCPAGE_SORT_OPTIONS
 	};
     FixedText FT_ALGORITHM
 	{
-        Pos = MAP_APPFONT ( 119 , 104 ) ;
+        Pos = MAP_APPFONT ( 119 , 118 ) ;
         Size = MAP_APPFONT ( 132 , 8 ) ;
 		Text [ en-US ] = "O~ptions";
 	};
 	ListBox LB_ALGORITHM
 	{
 		Border = TRUE ;
-        Pos = MAP_APPFONT ( 119 , 115 ) ;
+        Pos = MAP_APPFONT ( 119 , 129 ) ;
         Size = MAP_APPFONT ( 132 , 90 ) ;
 		TabStop = TRUE ;
 		DropDown = TRUE ;
 	};
 	FixedLine FL_DIRECTION
 	{
-        Pos = MAP_APPFONT ( 6 , 133 ) ;
+        Pos = MAP_APPFONT ( 6 , 147 ) ;
         Size = MAP_APPFONT ( 248 , 8 ) ;
 		Text [ en-US ] = "Direction" ;
 	};
 	RadioButton BTN_TOP_DOWN
 	{
-        Pos = MAP_APPFONT ( 12 , 144 ) ;
+        Pos = MAP_APPFONT ( 12 , 158 ) ;
         Size = MAP_APPFONT ( 242 , 10 ) ;
 		Text [ en-US ] = "~Top to bottom (sort rows)" ;
 		TabStop = TRUE ;
 	};
 	RadioButton BTN_LEFT_RIGHT
 	{
-        Pos = MAP_APPFONT ( 12 , 158 ) ;
+        Pos = MAP_APPFONT ( 12 , 172 ) ;
         Size = MAP_APPFONT ( 242 , 10 ) ;
 		Text [ en-US ] = "L~eft to right (sort columns)" ;
 		TabStop = TRUE ;
 	};
+/*
 	FixedText FT_AREA_LABEL
 	{
         Pos = MAP_APPFONT ( 6 , 171 ) ;
         Size = MAP_APPFONT ( 248 , 8 ) ;
 		Text [ en-US ] = "Data area:" ;
 	};
+*/
 };
 TabDialog RID_SCDLG_SORT
 {
--- sc/source/ui/view/cellsh2.cxx
+++ sc/source/ui/view/cellsh2.cxx
@@ -366,6 +366,7 @@ void ScCellShell::ExecuteDB( SfxRequest&
                     aSortParam.bHasHeader		= bHasHeader;
                     aSortParam.bByRow			= TRUE;
                     aSortParam.bCaseSens		= FALSE;
+                    aSortParam.bNaturalSort		= FALSE;
                     aSortParam.bIncludePattern	= TRUE;
                     aSortParam.bInplace 		= TRUE;
                     aSortParam.bDoSort[0]		= TRUE;
@@ -401,6 +402,8 @@ void ScCellShell::ExecuteDB( SfxRequest&
 						aSortParam.bHasHeader = ((const SfxBoolItem*)pItem)->GetValue();
 					if ( pArgs->GetItemState( SID_SORT_CASESENS, TRUE, &pItem ) == SFX_ITEM_SET )
 						aSortParam.bCaseSens = ((const SfxBoolItem*)pItem)->GetValue();
+					if ( pArgs->GetItemState( SID_SORT_NATURALSORT, TRUE, &pItem ) == SFX_ITEM_SET )
+						aSortParam.bNaturalSort = ((const SfxBoolItem*)pItem)->GetValue();
 					if ( pArgs->GetItemState( SID_SORT_ATTRIBS, TRUE, &pItem ) == SFX_ITEM_SET )
 						aSortParam.bIncludePattern = ((const SfxBoolItem*)pItem)->GetValue();
 					if ( pArgs->GetItemState( SID_SORT_USERDEF, TRUE, &pItem ) == SFX_ITEM_SET )
@@ -454,7 +457,7 @@ void ScCellShell::ExecuteDB( SfxRequest&
 
 					pDlg = pFact->CreateScSortDlg( pTabViewShell->GetDialogParent(),  &aArgSet, RID_SCDLG_SORT );
 					DBG_ASSERT(pDlg, "Dialog create fail!");//CHINA001
-					pDlg->SetCurPageId(1);
+					pDlg->SetCurPageId(1);	// 1=sort field tab  2=sort options tab
 
 					if ( pDlg->Execute() == RET_OK )
 					{
@@ -473,6 +476,8 @@ void ScCellShell::ExecuteDB( SfxRequest&
 												rOutParam.bHasHeader ) );
 							rReq.AppendItem( SfxBoolItem( SID_SORT_CASESENS,
 												rOutParam.bCaseSens ) );
+							rReq.AppendItem( SfxBoolItem( SID_SORT_NATURALSORT,
+												rOutParam.bNaturalSort ) );
 							rReq.AppendItem( SfxBoolItem( SID_SORT_ATTRIBS,
 												rOutParam.bIncludePattern ) );
 							USHORT nUser = rOutParam.bUserDef ? ( rOutParam.nUserIndex + 1 ) : 0;
