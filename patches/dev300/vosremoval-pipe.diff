diff --git a/configmgr/inc/pch/precompiled_configmgr.hxx b/configmgr/inc/pch/precompiled_configmgr.hxx
index 03e1410..d67a23b 100644
--- configmgr/inc/pch/precompiled_configmgr.hxx
+++ configmgr/inc/pch/precompiled_configmgr.hxx
@@ -242,7 +242,7 @@
 
 
 #include "osl/conditn.hxx"
-#include "vos/pipe.hxx"
+#include "osl/pipe.hxx"
 #include "rtl/ref.hxx"
 #include "salhelper/simplereferenceobject.hxx"
 #include "osl/socket.hxx"
diff --git a/configmgr/workben/local_io/simpletest.cxx b/configmgr/workben/local_io/simpletest.cxx
index 182630e..d26d687 100644
--- configmgr/workben/local_io/simpletest.cxx
+++ configmgr/workben/local_io/simpletest.cxx
@@ -110,7 +110,7 @@
 #include <osl/thread.hxx>
 #endif
 
-#include <vos/pipe.hxx>
+#include <osl/pipe.hxx>
 
 #ifndef _OSL_DIAGNOSE_H_
 #include <osl/diagnose.h>
diff --git a/configmgr/workben/local_io/xmlimport.cxx b/configmgr/workben/local_io/xmlimport.cxx
index b379082..0cc1501 100644
--- configmgr/workben/local_io/xmlimport.cxx
+++ configmgr/workben/local_io/xmlimport.cxx
@@ -109,7 +109,7 @@
 #include <osl/thread.hxx>
 #endif
 
-#include <vos/pipe.hxx>
+#include <osl/pipe.hxx>
 
 #ifndef _OSL_DIAGNOSE_H_
 #include <osl/diagnose.h>
diff --git a/desktop/source/app/app.cxx b/desktop/source/app/app.cxx
index b08b8de..fd52a42 100644
--- desktop/source/app/app.cxx
+++ desktop/source/app/app.cxx
@@ -323,7 +323,6 @@
 #define DEFINE_CONST_UNICODE(CONSTASCII)        UniString(RTL_CONSTASCII_USTRINGPARAM(CONSTASCII))
 #define U2S(STRING)                                ::rtl::OUStringToOString(STRING, RTL_TEXTENCODING_UTF8)
 
-using namespace vos;
 using rtl::OUString;
 using rtl::OUStringBuffer;
 
diff --git a/desktop/source/app/officeipcthread.cxx b/desktop/source/app/officeipcthread.cxx
index e621e73..7460800 100644
--- desktop/source/app/officeipcthread.cxx
+++ desktop/source/app/officeipcthread.cxx
@@ -81,8 +81,6 @@
 #include <comphelper/processfactory.hxx>
 #include <com/sun/star/uri/XExternalUriReferenceTranslator.hpp>
 
-
-using namespace vos;
 using namespace rtl;
 using namespace desktop;
 using namespace ::com::sun::star::uno;
@@ -377,20 +375,20 @@ OfficeIPCThread::Status OfficeIPCThread::EnableOfficeIPCThread()
 	{
         osl::Security &rSecurity = Security::get();
 		// Try to create pipe
-		if ( pThread->maPipe.create( pThread->maPipeIdent.getStr(), OPipe::TOption_Create, rSecurity ))
+        if ( pThread->maPipe.create( pThread->maPipeIdent.getStr(), osl_Pipe_CREATE, rSecurity ))
 		{
 			// Pipe created
 			nPipeMode = PIPEMODE_CREATED;
 		}
-		else if( pThread->maPipe.create( pThread->maPipeIdent.getStr(), OPipe::TOption_Open, rSecurity )) // Creation not successfull, now we try to connect
+        else if( pThread->maPipe.create( pThread->maPipeIdent.getStr(), osl_Pipe_OPEN, rSecurity )) // Creation not successfull, now we try to connect
 		{
 			// Pipe connected to first office
 			nPipeMode = PIPEMODE_CONNECTED;
 		}
 		else
 		{
-			OPipe::TPipeError eReason = pThread->maPipe.getError();
-			if ((eReason == OPipe::E_ConnectionRefused) || (eReason == OPipe::E_invalidError))
+            oslPipeError eReason = pThread->maPipe.getError();
+            if ((eReason == osl_Pipe_E_ConnectionRefused) || (eReason == osl_Pipe_E_invalidError))
 				return IPC_STATUS_BOOTSTRAP_ERROR;
 
 			// Wait for second office to be ready
@@ -508,7 +506,7 @@ void OfficeIPCThread::DisableOfficeIPCThread()
 		// send thread a termination message
 		// this is done so the subsequent join will not hang
 		// because the thread hangs in accept of pipe
-        OPipe Pipe( pOfficeIPCThread->maPipeIdent, OPipe::TOption_Open, Security::get() );
+        osl::StreamPipe Pipe( pOfficeIPCThread->maPipeIdent, osl_Pipe_OPEN, Security::get() );
 		//Pipe.send( TERMINATION_SEQUENCE, TERMINATION_LENGTH );
         if (Pipe.isValid())
         {
@@ -570,11 +568,9 @@ void SAL_CALL OfficeIPCThread::run()
 {
     do
 	{
-        OPipe::TPipeError
-			nError = maPipe.accept( maStreamPipe );
-
+        oslPipeError nError = maPipe.accept( maStreamPipe );
 
-		if( nError == OStreamPipe::E_None )
+        if( nError == osl_Pipe_E_None )
 		{
 
             // #111143# and others:
diff --git a/desktop/source/app/officeipcthread.hxx b/desktop/source/app/officeipcthread.hxx
index 65cc8b5..73a12e5 100644
--- desktop/source/app/officeipcthread.hxx
+++ desktop/source/app/officeipcthread.hxx
@@ -43,8 +43,8 @@
 #include <com/sun/star/frame/XTerminateListener.hpp>
 #endif
 
-#ifndef _VOS_PIPE_HXX_
-#include <vos/pipe.hxx>
+#ifndef _OSL_PIPE_HXX_
+#include <osl/pipe.hxx>
 #endif
 #ifndef _OSL_SECURITY_HXX_
 #include <osl/security.hxx>
@@ -93,8 +93,8 @@ class OfficeIPCThread : public osl::Thread
 	static OfficeIPCThread*		pGlobalOfficeIPCThread;
 	static ::osl::Mutex*		pOfficeIPCThreadMutex;
 
-    vos::OPipe					maPipe;
-    vos::OStreamPipe			maStreamPipe;
+    osl::Pipe					maPipe;
+    osl::StreamPipe				maStreamPipe;
 	rtl::OUString				maPipeIdent;
 	sal_Bool					mbBlockRequests;
 	int							mnPendingRequests;
diff --git a/extensions/inc/pch/precompiled_extensions.hxx b/extensions/inc/pch/precompiled_extensions.hxx
index 8be503a..49b59cb 100644
--- extensions/inc/pch/precompiled_extensions.hxx
+++ extensions/inc/pch/precompiled_extensions.hxx
@@ -548,7 +548,7 @@
 #include "sal/macros.h"
 #include "osl/module.hxx"
 #include "osl/mutex.hxx"
-#include "vos/pipe.hxx"
+#include "osl/pipe.hxx"
 #include "rtl/ref.hxx"
 #include "salhelper/simplereferenceobject.hxx"
 #include "osl/thread.hxx"
diff --git a/extensions/source/plugin/inc/plugin/unx/mediator.hxx b/extensions/source/plugin/inc/plugin/unx/mediator.hxx
index 4a847e3..96b3304 100644
--- extensions/source/plugin/inc/plugin/unx/mediator.hxx
+++ extensions/source/plugin/inc/plugin/unx/mediator.hxx
@@ -47,8 +47,8 @@
 #ifndef _LINK_HXX
 #include <tools/link.hxx>
 #endif
-#ifndef _VOS_PIPE_HXX_
-#include <vos/pipe.hxx>
+#ifndef _OSL_PIPE_HXX_
+#include <osl/pipe.hxx>
 #endif
 #ifndef _OSL_MUTEX_HXX_
 #include <osl/mutex.hxx>
diff --git a/vos/inc/vos/pipe.hxx b/vos/inc/vos/pipe.hxx
deleted file mode 100644
index 2982ae2..0000000
--- vos/inc/vos/pipe.hxx
+++ /dev/null
@@ -1,278 +0,0 @@
-/*************************************************************************
- *
- *  OpenOffice.org - a multi-platform office productivity suite
- *
- *  $RCSfile: pipe.hxx,v $
- *
- *  $Revision: 1.8 $
- *
- *  last change: $Author: vg $ $Date: 2006/06/02 12:37:52 $
- *
- *  The Contents of this file are made available subject to
- *  the terms of GNU Lesser General Public License Version 2.1.
- *
- *
- *    GNU Lesser General Public License Version 2.1
- *    =============================================
- *    Copyright 2005 by Sun Microsystems, Inc.
- *    901 San Antonio Road, Palo Alto, CA 94303, USA
- *
- *    This library is free software; you can redistribute it and/or
- *    modify it under the terms of the GNU Lesser General Public
- *    License version 2.1, as published by the Free Software Foundation.
- *
- *    This library is distributed in the hope that it will be useful,
- *    but WITHOUT ANY WARRANTY; without even the implied warranty of
- *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- *    Lesser General Public License for more details.
- *
- *    You should have received a copy of the GNU Lesser General Public
- *    License along with this library; if not, write to the Free Software
- *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- *    MA  02111-1307  USA
- *
- ************************************************************************/
-
-
-#ifndef _VOS_PIPE_HXX_
-#define _VOS_PIPE_HXX_
-
-#ifndef _OSL_PIPE_H_
-#   include <osl/pipe.h>
-#endif
-#ifndef _VOS_OBJECT_HXX_
-#   include <vos/object.hxx>
-#endif
-#ifndef _VOS_ISTREAM_HXX_
-#   include <vos/istream.hxx>
-#endif
-#ifndef _VOS_REFERMCE_HXX_
-#   include <vos/refernce.hxx>
-#endif
-#ifndef _VOS_REFOBJ_HXX_
-#   include <vos/refobj.hxx>
-#endif
-#ifndef _OSL_SECURITY_HXX_
-#   include <osl/security.hxx>
-#endif
-#ifndef _RTL_USTRING_HXX_
-#   include <rtl/ustring.hxx>
-#endif
-
-
-namespace vos
-{
-
-class OStreamPipe;
-
-/** Represents a pipe.
-*/
-class OPipe : public vos::OReference,
-              public vos::OObject
-{
-    VOS_DECLARE_CLASSINFO(vos::OPipe);
-
-public:
-    /*
-        Represents pipe-options
-    */
-    enum TPipeOption {
-        TOption_Open   = osl_Pipe_OPEN,         /* open existing pipe */
-        TOption_Create = osl_Pipe_CREATE        /* create pipe and open it, */
-                                                /*  fails if already existst */
-    };
-
-    enum TPipeError {
-        E_None              = osl_Pipe_E_None,              /* no error */
-        E_NotFound          = osl_Pipe_E_NotFound,          /* Pipe could not be found */
-        E_AlreadyExists     = osl_Pipe_E_AlreadyExists,     /* Pipe already exists */
-        E_NoProtocol        = osl_Pipe_E_NoProtocol,        /* Protocol not available */
-        E_NetworkReset      = osl_Pipe_E_NetworkReset,      /* Network dropped connection because of reset */
-        E_ConnectionAbort   = osl_Pipe_E_ConnectionAbort,   /* Software caused connection abort */
-        E_ConnectionReset   = osl_Pipe_E_ConnectionReset,   /* Connection reset by peer */
-        E_NoBufferSpace     = osl_Pipe_E_NoBufferSpace,     /* No buffer space available */
-        E_TimedOut          = osl_Pipe_E_TimedOut,          /* Connection timed out */
-        E_ConnectionRefused = osl_Pipe_E_ConnectionRefused, /* Connection refused */
-        E_invalidError      = osl_Pipe_E_invalidError       /* unmapped error */
-    };
-
-protected:
-    typedef ORefObj<oslPipe> PipeRef;
-
-    PipeRef* m_pPipeRef;
-
-public:
-
-    /** Does not create a pipe. Use assignment operator to
-        make this a useable pipe.
-    */
-    OPipe();
-
-    /** Creates a pipe.
-        @param strName
-        @param Options
-    */
-    OPipe(const ::rtl::OUString& strName, TPipeOption Options = TOption_Open);
-
-    /** Creates a pipe.
-        @param strName
-        @param Options
-        @param Security
-    */
-    OPipe(const ::rtl::OUString& strName, TPipeOption Options,
-          const osl::Security& rSecurity);
-
-    /** Copy constructor.
-    */
-    OPipe(const OPipe& pipe);
-
-    /** Creates pipe as wrapper around the underlying oslPipe.
-        @param Pipe
-    */
-    OPipe(oslPipe Pipe);
-
-    /** Destructor. Destroys the underlying oslPipe.
-    */
-    virtual ~OPipe();
-
-    /** Create a pipe with the given attributes.
-        If socket was already created, the old one will be discarded.
-        @param strName
-        @param Options
-        @return True if socket was successfully created.
-    */
-    sal_Bool SAL_CALL create(const ::rtl::OUString& strName, TPipeOption Options = TOption_Open);
-
-    /** Create a pipe with the given attributes.
-        If socket was already created, the old one will be discarded.
-        @param strName
-        @param Options
-        @param Security
-        @return True if socket was successfully created.
-    */
-    sal_Bool SAL_CALL create(const ::rtl::OUString& strName, TPipeOption Options,
-                   const osl::Security& rSecurity);
-
-    /** Assignment operator. If pipe was already created, the old one will
-        be discarded.
-    */
-    OPipe& SAL_CALL operator= (const OPipe& pipe);
-
-    /** Allow cast to underlying oslPipe.
-    */
-    SAL_CALL operator oslPipe() const;
-
-    /** Checks if the pipe is valid.
-        @return True if the object represents a valid pipe.
-    */
-    sal_Bool SAL_CALL isValid() const;
-
-    sal_Bool SAL_CALL operator==( const OPipe& rPipe )
-    {
-        return m_pPipeRef == rPipe.m_pPipeRef;
-    }
-
-    /** Closes the pipe.
-    */
-    virtual void SAL_CALL close();
-
-    /** Accept connection on an existing pipe
-    */
-    TPipeError SAL_CALL accept(OStreamPipe& Connection);
-
-    /** Tries to receives BytesToRead data from the connected pipe,
-
-        @param pBuffer [out] Points to a buffer that will be filled with the received
-        data.
-        @param BytesToRead [in] The number of bytes to read. pBuffer must have at least
-        this size.
-        @return the number of received bytes.
-    */
-    sal_Int32   SAL_CALL recv(void* pBuffer, sal_uInt32 BytesToRead);
-
-    /** Tries to sends BytesToSend data from the connected pipe.
-
-        @param pBuffer [in] Points to a buffer that contains the send-data.
-        @param BytesToSend [in] The number of bytes to send. pBuffer must have at least
-        this size.
-        @return the number of transfered bytes.
-    */
-    sal_Int32 SAL_CALL send(const void* pBuffer, sal_uInt32 BytesToSend);
-
-    /** Delivers a constant decribing the last error for the pipe system.
-        @return ENONE if no error occured, invalid_PipeError if
-        an unknown (unmapped) error occured, otherwise an enum describing the
-        error.
-    */
-    TPipeError SAL_CALL getError() const;
-
-};
-
-/** A pipe to send or receive a stream of data.
-*/
-class OStreamPipe : public vos::OPipe,
-                    public vos::IStream
-{
-    VOS_DECLARE_CLASSINFO(vos::OStreamPipe);
-public:
-
-    /** Creates an unattached pipe. You must attach the pipe to an oslPipe
-        e.g. by using the operator=(oslPipe), before you can use the stream-
-        functionality of the object.
-    */
-    OStreamPipe();
-
-    /** Creates pipe as wrapper around the underlying oslPipe.
-        @param Pipe
-    */
-    OStreamPipe(oslPipe Pipe);
-
-    /** Copy constructor.
-        @param Pipe
-    */
-    OStreamPipe(const OStreamPipe& Pipe);
-
-    /** Destructor. Calls shutdown(readwrite) and close().
-    */
-    virtual ~OStreamPipe();
-
-    /** Attaches the oslPipe to this object. If the object
-        already was attached to an oslPipe, the old one will
-        be closed and destroyed.
-        @param Pipe.
-    */
-    OStreamPipe& SAL_CALL operator=(oslPipe Pipe);
-
-    /** Assignment operator
-    */
-    OStreamPipe& SAL_CALL operator=(const OPipe& pipe);
-
-    /** Retrieves n bytes from the stream and copies them into pBuffer.
-        The method avoids incomplete reads due to packet boundaries.
-        @param pBuffer receives the read data.
-        @param n the number of bytes to read. pBuffer must be large enough
-        to hold the n bytes!
-        @return the number of read bytes. The number will only be smaller than
-        n if an exceptional condition (e.g. connection closed) occurs.
-    */
-    virtual sal_Int32 SAL_CALL read(void* pBuffer, sal_uInt32 n) const;
-
-    /** Writes n bytes from pBuffer to the stream. The method avoids
-        incomplete writes due to packet boundaries.
-        @param pBuffer contains the data to be written.
-        @param n the number of bytes to write.
-        @return the number of written bytes. The number will only be smaller than
-        n if an exceptional condition (e.g. connection closed) occurs.
-    */
-    virtual sal_Int32 SAL_CALL write(const void* pBuffer, sal_uInt32 n);
-
-    /** Checks if pipe is closed.
-        @return True if pipe is closed.
-    */
-    virtual sal_Bool SAL_CALL isEof() const;
-};
-
-}
-
-#endif // _VOS_PIPE_HXX_
-
diff --git a/vos/source/makefile.mk b/vos/source/makefile.mk
index 2c02290..3bf0de4 100644
--- vos/source/makefile.mk
+++ vos/source/makefile.mk
@@ -49,8 +49,7 @@ SLOFILES= \
 				$(SLO)$/object.obj      \
 				$(SLO)$/refernce.obj    \
 				$(SLO)$/stream.obj      \
-				$(SLO)$/timer.obj       \
-				$(SLO)$/pipe.obj
+                $(SLO)$/timer.obj
 
 
 .IF "$(UPDATER)"=="YES"
@@ -58,8 +57,7 @@ OBJFILES= \
 				$(OBJ)$/object.obj      \
 				$(OBJ)$/refernce.obj    \
 				$(OBJ)$/stream.obj      \
-				$(OBJ)$/timer.obj       \
-				$(OBJ)$/pipe.obj
+                $(OBJ)$/timer.obj
 
 .ENDIF
 
diff --git a/vos/source/pipe.cxx b/vos/source/pipe.cxx
deleted file mode 100644
index 1669b80..0000000
--- vos/source/pipe.cxx
+++ /dev/null
@@ -1,424 +0,0 @@
-/*************************************************************************
- *
- *  OpenOffice.org - a multi-platform office productivity suite
- *
- *  $RCSfile: pipe.cxx,v $
- *
- *  $Revision: 1.6 $
- *
- *  last change: $Author: hr $ $Date: 2006/06/20 04:07:03 $
- *
- *  The Contents of this file are made available subject to
- *  the terms of GNU Lesser General Public License Version 2.1.
- *
- *
- *    GNU Lesser General Public License Version 2.1
- *    =============================================
- *    Copyright 2005 by Sun Microsystems, Inc.
- *    901 San Antonio Road, Palo Alto, CA 94303, USA
- *
- *    This library is free software; you can redistribute it and/or
- *    modify it under the terms of the GNU Lesser General Public
- *    License version 2.1, as published by the Free Software Foundation.
- *
- *    This library is distributed in the hope that it will be useful,
- *    but WITHOUT ANY WARRANTY; without even the implied warranty of
- *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- *    Lesser General Public License for more details.
- *
- *    You should have received a copy of the GNU Lesser General Public
- *    License along with this library; if not, write to the Free Software
- *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- *    MA  02111-1307  USA
- *
- ************************************************************************/
-
-
-#include <vos/pipe.hxx>
-#include <osl/diagnose.h>
-
-using namespace vos;
-
-///////////////////////////////////////////////////////////////////////////////
-// Pipe
-
-
-VOS_IMPLEMENT_CLASSINFO(VOS_CLASSNAME(OPipe, vos), 
-						VOS_NAMESPACE(OPipe, vos), 
-						VOS_NAMESPACE(OObject, vos), 0);
-
-/*****************************************************************************/
-// OPipe()
-/*****************************************************************************/
-OPipe::OPipe()
-{
-	m_pPipeRef= 0;
-}
-
-/*****************************************************************************/
-// OPipe()
-/*****************************************************************************/
-
-OPipe::OPipe( const rtl::OUString& strName, TPipeOption Options)
-{
-	m_pPipeRef = 
-		new PipeRef( osl_createPipe(strName.pData, 
-									(oslPipeOptions)Options, 
-									NULL) );
-	
-	OSL_POSTCOND(m_pPipeRef != 0, "OPipe(): new failed.\n");
-	OSL_POSTCOND((*m_pPipeRef)(), "OPipe(): creation of pipe failed!\n");
-}
-
-/*****************************************************************************/
-// OPipe()
-/*****************************************************************************/
-
-OPipe::OPipe( const rtl::OUString& strName,
-			  TPipeOption Options,
-			  const osl::Security& rSecurity)
-{
-	m_pPipeRef= 
-		new PipeRef(osl_createPipe(strName.pData, 
-								   (oslPipeOptions)Options, 
-								   rSecurity.getHandle()));
-	
-	OSL_POSTCOND(m_pPipeRef != 0, "OPipe(): new failed.\n");
-	OSL_POSTCOND((*m_pPipeRef)(), "OPipe(): creation of pipe failed!\n");
-}
-
-/*****************************************************************************/
-// OPipe()
-/*****************************************************************************/
-OPipe::OPipe(const OPipe& pipe) :
-OReference(), OObject()
-{
-	
-	OSL_ASSERT(pipe.m_pPipeRef != 0);
-
-	m_pPipeRef= pipe.m_pPipeRef;
-
-	m_pPipeRef->acquire();
-}
-
-/*****************************************************************************/
-// OPipe()
-/*****************************************************************************/
-OPipe::OPipe(oslPipe Pipe)
-{
-	m_pPipeRef = new PipeRef(Pipe);
-}
-
-
-/*****************************************************************************/
-// ~OPipe()
-/*****************************************************************************/
-OPipe::~OPipe()
-{
-	close();
-}
-
-/*****************************************************************************/
-// create
-/*****************************************************************************/
-sal_Bool OPipe::create( const rtl::OUString& strName, TPipeOption Options )
-{
-	// if this was a valid pipe, decrease reference
-	if ((m_pPipeRef) && (m_pPipeRef->release() == 0))
-	{
-		osl_releasePipe((*m_pPipeRef)());
-		delete m_pPipeRef;
-		m_pPipeRef= 0;
-	}
-
-	m_pPipeRef= 
-		new PipeRef(osl_createPipe(strName.pData, 
-								   (oslPipeOptions)Options, 
-								   NULL));
-
-	OSL_POSTCOND(m_pPipeRef != 0, "OPipe(): new failed.\n");
-
-	return (*m_pPipeRef)() != 0;
-}
-
-/*****************************************************************************/
-// create
-/*****************************************************************************/
-sal_Bool OPipe::create( const rtl::OUString& strName,
-						TPipeOption Options,
-						const osl::Security& rSecurity ) 
-{
-	// if this was a valid pipe, decrease reference
-	if ((m_pPipeRef) && (m_pPipeRef->release() == 0))
-	{
-		osl_releasePipe((*m_pPipeRef)());
-		delete m_pPipeRef;
-		m_pPipeRef= 0;
-	}
-
-	m_pPipeRef= 
-		new PipeRef(osl_createPipe(strName.pData, 
-								   (oslPipeOptions)Options, 
-								   rSecurity.getHandle()));
-
-	OSL_POSTCOND(m_pPipeRef != 0, "OPipe(): new failed.\n");
-
-	return (*m_pPipeRef)() != 0;
-}
-
-/*****************************************************************************/
-// operator=
-/*****************************************************************************/
-OPipe& OPipe::operator= (const OPipe& pipe)
-{
-	OSL_PRECOND(pipe.m_pPipeRef != 0, "OPipe::operator=: tried to assign an empty/invalid pipe\n");
-
-	if (m_pPipeRef == pipe.m_pPipeRef)
-		return *this;
-
-	// if this was a valid pipe, decrease reference
-	if ((m_pPipeRef) && (m_pPipeRef->release() == 0))
-	{
-		osl_releasePipe((*m_pPipeRef)());
-		delete m_pPipeRef;
-		m_pPipeRef= 0;
-	}
-
-	m_pPipeRef= pipe.m_pPipeRef;
-
-	m_pPipeRef->acquire();
-
-	return *this;
-}
-
-/*****************************************************************************/
-// operator oslPipe()
-/*****************************************************************************/
-OPipe::operator oslPipe() const
-{
-	OSL_ASSERT(m_pPipeRef);
-	return (*m_pPipeRef)();
-}
-
-/*****************************************************************************/
-// isValid()
-/*****************************************************************************/
-sal_Bool OPipe::isValid() const
-{
-	return m_pPipeRef != 0 && (*m_pPipeRef)() != 0;
-}
-
-
-/*****************************************************************************/
-// close
-/*****************************************************************************/
-void OPipe::close()
-{
-	if (m_pPipeRef && (m_pPipeRef->release() == 0)) 
-	{
-		osl_releasePipe((*m_pPipeRef)());
-		delete m_pPipeRef;
-	}
-	m_pPipeRef= 0;
-}
-
-/*****************************************************************************/
-// accept
-/*****************************************************************************/
-OPipe::TPipeError OPipe::accept(OStreamPipe& Connection)
-{
-	if ( isValid() )
-	{
-		Connection = osl_acceptPipe((*m_pPipeRef)());
-		
-		if(Connection.isValid())
-			return E_None;
-	}
-
-	return getError();
-}
-
-/*****************************************************************************/
-// recv
-/*****************************************************************************/
-sal_Int32 OPipe::recv(void* pBuffer, sal_uInt32 BytesToRead)
-{
-	if ( isValid() )
-		return osl_receivePipe((*m_pPipeRef)(), 
-					 		pBuffer, 
-							BytesToRead);
-	else
-		return -1;
-
-}
-
-/*****************************************************************************/
-// send
-/*****************************************************************************/
-sal_Int32 OPipe::send(const void* pBuffer, sal_uInt32 BytesToSend)
-{
-	if ( isValid() )
-		return osl_sendPipe((*m_pPipeRef)(), 
-							pBuffer, 
-							BytesToSend);
-	else
-		return -1;
-}
-
-/*****************************************************************************/
-// getError
-/*****************************************************************************/
-OPipe::TPipeError OPipe::getError() const
-{
-	if (m_pPipeRef)
-		return (TPipeError)osl_getLastPipeError((*m_pPipeRef)());
-	else
-		return (TPipeError)osl_getLastPipeError(NULL);
-}
-
-
-
-VOS_IMPLEMENT_CLASSINFO(VOS_CLASSNAME(OStreamPipe, vos), 
-						VOS_NAMESPACE(OStreamPipe, vos), 
-						VOS_NAMESPACE(OPipe, vos), 0);
-
-
-
-/*****************************************************************************/
-// OStreamPipe
-/*****************************************************************************/
-OStreamPipe::OStreamPipe()
-{
-}
-
-/*****************************************************************************/
-// OStreamPipe
-/*****************************************************************************/
-OStreamPipe::OStreamPipe(oslPipe Pipe) :
-	OPipe(Pipe)
-{
-}
-
-/*****************************************************************************/
-// OStreamPipe
-// copy constructor
-/*****************************************************************************/
-OStreamPipe::OStreamPipe(const OStreamPipe& pipe) :
-OPipe(), IStream()
-{
-	OSL_ASSERT(pipe.m_pPipeRef != 0);
-
-	m_pPipeRef= pipe.m_pPipeRef;
-
-	m_pPipeRef->acquire();
-}
-
-/*****************************************************************************/
-// ~OStreamPipe
-/*****************************************************************************/
-OStreamPipe::~OStreamPipe()
-{
-}
-
-/*****************************************************************************/
-// operator=(oslPipe)
-/*****************************************************************************/
-OStreamPipe& OStreamPipe::operator=(oslPipe Pipe)
-{
-
-	// if this was a valid pipe, decrease reference
-	if (m_pPipeRef && (m_pPipeRef->release() == 0))
-	{
-		osl_releasePipe((*m_pPipeRef)());
-		delete m_pPipeRef;
-		m_pPipeRef= 0;
-	}
-
-	m_pPipeRef= new PipeRef(Pipe);
-
-	OSL_POSTCOND(m_pPipeRef != 0, "OPipe(): new failed.\n");
-
-	return *this;
-}
-
-/*****************************************************************************/
-// operator=OPipe
-/*****************************************************************************/
-
-OStreamPipe& OStreamPipe::operator= (const OPipe& pipe)
-{
-	OPipe::operator= ( pipe );
-	return *this;
-}
-
-/*****************************************************************************/
-// read
-/*****************************************************************************/
-sal_Int32 OStreamPipe::read(void* pBuffer, sal_uInt32 n) const
-{
-	OSL_ASSERT(m_pPipeRef && (*m_pPipeRef)());
-
-	/* loop until all desired bytes were read or an error occured */
-	sal_Int32 BytesRead= 0;
-	sal_Int32 BytesToRead= n;
-	while (BytesToRead > 0) 
-	{
-		sal_Int32 RetVal;
-		RetVal= osl_receivePipe((*m_pPipeRef)(), 
-						 	    pBuffer, 
-								BytesToRead);
-
-		/* error occured? */
-		if(RetVal <= 0)
-		{
-			break;
-		}
-
-		BytesToRead -= RetVal;
-		BytesRead += RetVal;
-		pBuffer= (sal_Char*)pBuffer + RetVal;
-	}
-
-	return BytesRead;   
-}
-
-/*****************************************************************************/
-// write
-/*****************************************************************************/
-sal_Int32 OStreamPipe::write(const void* pBuffer, sal_uInt32 n)
-{
-	OSL_ASSERT(m_pPipeRef && (*m_pPipeRef)());
-
-	/* loop until all desired bytes were send or an error occured */
-	sal_Int32 BytesSend= 0;
-	sal_Int32 BytesToSend= n;
-	while (BytesToSend > 0) 
-	{
-		sal_Int32 RetVal;
-
-		RetVal= osl_sendPipe((*m_pPipeRef)(), 
-								pBuffer, 
-								BytesToSend);
-
-		/* error occured? */
-		if(RetVal <= 0)
-		{
-			break;
-		}
-
-		BytesToSend -= RetVal;
-		BytesSend += RetVal;
-		pBuffer= (sal_Char*)pBuffer + RetVal;
-	}
-
-	return BytesSend;   
-}
-
-sal_Bool OStreamPipe::isEof() const
-{
-	return isValid();
-}
-
-
-
-
