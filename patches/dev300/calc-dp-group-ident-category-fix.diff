diff --git sc/inc/dpcachetable.hxx sc/inc/dpcachetable.hxx
index 8634351..5fbca4d 100644
--- sc/inc/dpcachetable.hxx
+++ sc/inc/dpcachetable.hxx
@@ -174,7 +174,7 @@ public:
     /** Get the cell instance at specified location within the data grid. Note
         that the data grid doesn't include the header row.  Don't delete the
         returned object! */
-    const ScDPCacheCell* getCell(SCCOL nCol, SCROW nRow, bool bRepeatIfEmpty = false) const;
+    const ScDPCacheCell* getCell(SCCOL nCol, SCROW nRow, bool bRepeatIfEmpty) const;
 
     const String* getFieldName(sal_Int32 nIndex) const;
 
diff --git sc/inc/dpgroup.hxx sc/inc/dpgroup.hxx
index 25df93d..ea97b9f 100644
--- sc/inc/dpgroup.hxx
+++ sc/inc/dpgroup.hxx
@@ -218,6 +218,8 @@ public:
     virtual void                    DisposeData();
     virtual void                    SetEmptyFlags( BOOL bIgnoreEmptyRows, BOOL bRepeatIfEmpty );
 
+    virtual bool                    IsRepeatIfEmpty();
+
     virtual void                    CreateCacheTable();
     virtual void                    FilterCacheTable(const ::std::vector<ScDPCacheTable::Criterion>& rCriteria);
     virtual void                    GetDrillDownData(const ::std::vector<ScDPCacheTable::Criterion>& rCriteria,
diff --git sc/source/core/data/dpgroup.cxx sc/source/core/data/dpgroup.cxx
index 1d1a6c8..40c08f1 100644
--- sc/source/core/data/dpgroup.cxx
+++ sc/source/core/data/dpgroup.cxx
@@ -1133,6 +1133,11 @@ void ScDPGroupTableData::SetEmptyFlags( BOOL bIgnoreEmptyRows, BOOL bRepeatIfEmp
     pSourceData->SetEmptyFlags( bIgnoreEmptyRows, bRepeatIfEmpty );
 }
 
+bool ScDPGroupTableData::IsRepeatIfEmpty()
+{
+    return pSourceData->IsRepeatIfEmpty();
+}
+
 void ScDPGroupTableData::CreateCacheTable()
 {
     pSourceData->CreateCacheTable();
diff --git sc/source/core/data/dptabdat.cxx sc/source/core/data/dptabdat.cxx
index ed9639c..c90b4ac 100644
--- sc/source/core/data/dptabdat.cxx
+++ sc/source/core/data/dptabdat.cxx
@@ -247,7 +247,7 @@ void ScDPTableData::FillRowDataFromCacheTable(sal_Int32 nRow, const ScDPCacheTab
         rData.aValues.push_back( ScDPValueData() );
         ScDPValueData& rVal = rData.aValues.back();
         const ScDPCacheCell* pCell = rCacheTable.getCell(
-            static_cast<SCCOL>(nDim), static_cast<SCROW>(nRow));
+            static_cast<SCCOL>(nDim), static_cast<SCROW>(nRow), IsRepeatIfEmpty());
         if (pCell)
         {
             rVal.fValue = pCell->mbNumeric ? pCell->mfValue : 0.0;
