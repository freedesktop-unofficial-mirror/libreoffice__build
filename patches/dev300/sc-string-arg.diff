diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/inc/interpre.hxx sc/source/core/inc/interpre.hxx
--- sc.clean/source/core/inc/interpre.hxx	2008-04-01 12:26:35.000000000 -0400
+++ sc/source/core/inc/interpre.hxx	2008-04-21 11:10:56.000000000 -0400
@@ -192,8 +192,8 @@ void ReplaceCell( ScAddress& );     // f
 void ReplaceCell( SCCOL& rCol, SCROW& rRow, SCTAB& rTab );  // for TableOp
 BOOL IsTableOpInRange( const ScRange& );
 ULONG GetCellNumberFormat( const ScAddress&, const ScBaseCell* );
-double GetCellValue( const ScAddress&, const ScBaseCell* );
-double GetCellValueOrZero( const ScAddress&, const ScBaseCell* );
+double GetCellValue( const ScAddress&, const ScBaseCell*, bool bNoValueAsError = false, bool bBlankAsZero = false );
+double GetCellValueOrZero( const ScAddress&, const ScBaseCell*, bool bBlankAsZero );
 double GetValueCellValue( const ScAddress&, const ScValueCell* );
 ScBaseCell* GetCell( const ScAddress& rPos )
     { return pDok->GetCell( rPos ); }
@@ -332,7 +332,7 @@ StackVar GetStackType( BYTE nParam );
 BYTE GetByte() { return cPar; }
 // generiert aus DoubleRef positionsabhaengige SingleRef
 BOOL DoubleRefToPosSingleRef( const ScRange& rRange, ScAddress& rAdr );
-double GetDouble();
+double GetDouble( bool bNoValueAsError = false, bool bBlankAsZero = false );
 double GetDoubleWithDefault(double nDefault);
 BOOL IsMissing();
 BOOL GetBool() { return GetDouble() != 0.0; }
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/tool/interpr1.cxx sc/source/core/tool/interpr1.cxx
--- sc.clean/source/core/tool/interpr1.cxx	2008-04-01 12:26:37.000000000 -0400
+++ sc/source/core/tool/interpr1.cxx	2008-04-21 11:21:35.000000000 -0400
@@ -3059,12 +3059,13 @@ double ScInterpreter::IterateParameters(
     size_t nRefInList = 0;
     while (nParamCount-- > 0)
     {
-        switch (GetStackType())
+        StackVar eStackType = GetStackType();
+        switch (eStackType)
         {
-
+            case svDouble:
             case svString:
             {
-                if( eFunc == ifCOUNT )
+                if( eFunc == ifCOUNT && eStackType == svString  )
                 {
                     String aStr( PopString() );
                     sal_uInt32 nFIndex = 0;                 // damit default Land/Spr.
@@ -3073,42 +3074,23 @@ double ScInterpreter::IterateParameters(
                 }
                 else
                 {
+                    if ( bTextAsZero && eStackType == svString )
+                    {
+                        Pop();
+                        nCount++;
+                        if ( eFunc == ifPRODUCT )
+                            fRes = 0.0;
+                        fVal = 0;
+                    }
+                    else
+                    {
+                        fVal = GetDouble();
+                        nCount++;
+                    }
                     switch ( eFunc )
                     {
                         case ifAVERAGE:
                         case ifSUM:
-                        case ifSUMSQ:
-                        case ifPRODUCT:
-                        {
-                            if ( bTextAsZero )
-                            {
-                                Pop();
-                                nCount++;
-                                if ( eFunc == ifPRODUCT )
-                                    fRes = 0.0;
-                            }
-                            else
-                            {
-                                while (nParamCount-- > 0)
-                                    Pop();
-                                SetError( errNoValue );
-                            }
-                        }
-                        break;
-                        default:
-                            Pop();
-                            nCount++;
-                    }
-                }
-            }
-            break;
-            case svDouble    :
-                fVal = GetDouble();
-                nCount++;
-                switch( eFunc )
-                {
-                    case ifAVERAGE:
-                    case ifSUM:
                         if ( bNull && fVal != 0.0 )
                         {
                             bNull = FALSE;
@@ -3117,12 +3099,15 @@ double ScInterpreter::IterateParameters(
                         else
                             fRes += fVal;
                         break;
-                    case ifSUMSQ:   fRes += fVal * fVal; break;
-                    case ifPRODUCT: fRes *= fVal; break;
-                    default: ; // nothing
+                        case ifSUMSQ:   fRes += fVal * fVal; break;
+                        case ifPRODUCT: fRes *= fVal; break;
+ 
+                        default:;
+                    }
                 }
                 nFuncFmtType = NUMBERFORMAT_NUMBER;
-                break;
+            }
+            break;
             case svSingleRef :
             {
                 PopSingleRef( aAdr );
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/tool/interpr4.cxx sc/source/core/tool/interpr4.cxx
--- sc.clean/source/core/tool/interpr4.cxx	2008-04-01 12:26:37.000000000 -0400
+++ sc/source/core/tool/interpr4.cxx	2008-04-21 11:26:59.000000000 -0400
@@ -203,18 +203,19 @@ double ScInterpreter::GetValueCellValue(
 }
 
 
-double ScInterpreter::GetCellValue( const ScAddress& rPos, const ScBaseCell* pCell )
+double ScInterpreter::GetCellValue( const ScAddress& rPos, const ScBaseCell* pCell, 
+                                    bool bNoValueAsError, bool bBlankAsZero )
 {
     USHORT nErr = nGlobalError;
     nGlobalError = 0;
-    double nVal = GetCellValueOrZero( rPos, pCell );
-    if ( !nGlobalError || nGlobalError == errCellNoValue )
+    double nVal = GetCellValueOrZero( rPos, pCell, bBlankAsZero );
+    if ( !nGlobalError || (!bNoValueAsError && nGlobalError == errCellNoValue) )
         nGlobalError = nErr;
     return nVal;
 }
 
 
-double ScInterpreter::GetCellValueOrZero( const ScAddress& rPos, const ScBaseCell* pCell )
+double ScInterpreter::GetCellValueOrZero( const ScAddress& rPos, const ScBaseCell* pCell, bool bBlankAsZero )
 {
     double fValue;
     if (pCell)
@@ -258,7 +259,7 @@ double ScInterpreter::GetCellValueOrZero
             break;
             case  CELLTYPE_STRING:
             case  CELLTYPE_EDIT:
-#if 0
+#if 1 /* JEG : re-enable because compatibility is more important than consistency for this */
 // Xcl does it, but SUM(A1:A2) differs from A1+A2. No good.
             {
                 String aStr;
@@ -269,14 +270,15 @@ double ScInterpreter::GetCellValueOrZero
                 sal_uInt32 nFIndex = 0;                 // damit default Land/Spr.
                 if ( !pFormatter->IsNumberFormat( aStr, nFIndex, fValue ) )
                 {
-                    SetError(errNoValue);
+                    SetError(errCellNoValue);   /* CellNoValue is not really an error */
                     fValue = 0.0;
                 }
             }
             break;
 #endif
             default:
-                SetError(errCellNoValue);
+                if (!bBlankAsZero)
+                    SetError(errCellNoValue);
                 fValue = 0.0;
         }
     }
@@ -1565,7 +1567,7 @@ BOOL ScInterpreter::DoubleRefToPosSingle
 }
 
 
-double ScInterpreter::GetDouble()
+double ScInterpreter::GetDouble( bool bNoValueAsError, bool bBlankAsZero )
 {
     double nVal;
     switch( GetRawStackType() )
@@ -1589,7 +1591,7 @@ double ScInterpreter::GetDouble()
             ScAddress aAdr;
             PopSingleRef( aAdr );
             ScBaseCell* pCell = GetCell( aAdr );
-            nVal = GetCellValue( aAdr, pCell );
+            nVal = GetCellValue( aAdr, pCell, bNoValueAsError, bBlankAsZero );
         }
         break;
         case svDoubleRef:
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/tool/interpr5.cxx sc/source/core/tool/interpr5.cxx
--- sc.clean/source/core/tool/interpr5.cxx	2008-04-01 12:26:37.000000000 -0400
+++ sc/source/core/tool/interpr5.cxx	2008-04-21 11:34:12.000000000 -0400
@@ -1419,7 +1419,12 @@ void ScInterpreter::ScAdd()
         pMat2 = GetMatrix();
     else
     {
-        fVal2 = GetDouble();
+        fVal2 = GetDouble(true, true);
+        if (nGlobalError)
+        {
+            PushError(nGlobalError);
+            return;
+        }
         switch ( nCurFmtType )
         {
             case NUMBERFORMAT_DATE :
@@ -1440,7 +1445,12 @@ void ScInterpreter::ScAdd()
         pMat1 = GetMatrix();
     else
     {
-        fVal1 = GetDouble();
+        fVal1 = GetDouble(true, true);
+        if (nGlobalError)
+        {
+            PushError(nGlobalError);
+            return;
+        }
         switch ( nCurFmtType )
         {
             case NUMBERFORMAT_DATE :
@@ -1614,7 +1624,11 @@ void ScInterpreter::ScSub()
         pMat2 = GetMatrix();
     else
     {
-        fVal2 = GetDouble();
+        if (nGlobalError)
+        {
+            PushError(nGlobalError);
+            return;
+        }
         switch ( nCurFmtType )
         {
             case NUMBERFORMAT_DATE :
@@ -1635,7 +1649,12 @@ void ScInterpreter::ScSub()
         pMat1 = GetMatrix();
     else
     {
-        fVal1 = GetDouble();
+        fVal1 = GetDouble(true, true);
+        if (nGlobalError)
+        {
+            PushError(nGlobalError);
+            return;
+        }
         switch ( nCurFmtType )
         {
             case NUMBERFORMAT_DATE :
@@ -1729,7 +1748,12 @@ void ScInterpreter::ScMul()
         pMat2 = GetMatrix();
     else
     {
-        fVal2 = GetDouble();
+        fVal2 = GetDouble(true, true);
+        if (nGlobalError)
+        {
+            PushError(nGlobalError);
+            return;
+        }
         switch ( nCurFmtType )
         {
             case NUMBERFORMAT_CURRENCY :
@@ -1742,7 +1766,12 @@ void ScInterpreter::ScMul()
         pMat1 = GetMatrix();
     else
     {
-        fVal1 = GetDouble();
+        fVal1 = GetDouble(true, true);
+        if (nGlobalError)
+        {
+            PushError(nGlobalError);
+            return;
+        }
         switch ( nCurFmtType )
         {
             case NUMBERFORMAT_CURRENCY :
@@ -1807,7 +1836,12 @@ void ScInterpreter::ScDiv()
         pMat2 = GetMatrix();
     else
     {
-        fVal2 = GetDouble();
+        fVal2 = GetDouble(true, true);
+        if (nGlobalError)
+        {
+            PushError(nGlobalError);
+            return;
+        }
         // hier kein Currency uebernehmen, 123kg/456DM sind nicht DM
         nFmtCurrencyType2 = nCurFmtType;
     }
@@ -1815,7 +1849,12 @@ void ScInterpreter::ScDiv()
         pMat1 = GetMatrix();
     else
     {
-        fVal1 = GetDouble();
+        fVal1 = GetDouble(true, true);
+        if (nGlobalError)
+        {
+            PushError(nGlobalError);
+            return;
+        }
         switch ( nCurFmtType )
         {
             case NUMBERFORMAT_CURRENCY :
