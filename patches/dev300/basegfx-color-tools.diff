Adds color conversion stuff to basegfx

From: Thorsten Behrens <thb@openoffice.org>


---

 basegfx/inc/basegfx/color/bcolortools.hxx |   76 ++++++++
 basegfx/prj/d.lst                         |    1 
 basegfx/source/color/bcolortools.cxx      |  272 +++++++++++++++++++++++++++++
 basegfx/source/color/makefile.mk          |    1 
 basegfx/test/basegfx2d.cxx                |  175 +++++++++++++++++++
 basegfx/test/makefile.mk                  |    1 
 6 files changed, 526 insertions(+), 0 deletions(-)
 create mode 100644 basegfx/inc/basegfx/color/bcolortools.hxx
 create mode 100644 basegfx/source/color/bcolortools.cxx


diff --git basegfx/inc/basegfx/color/bcolortools.hxx basegfx/inc/basegfx/color/bcolortools.hxx
new file mode 100644
index 0000000..59f6c28
--- /dev/null
+++ basegfx/inc/basegfx/color/bcolortools.hxx
@@ -0,0 +1,76 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: bcolor.hxx,v $
+ *
+ * $Revision: 1.2 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef _BGFX_COLOR_BCOLORTOOLS_HXX
+#define _BGFX_COLOR_BCOLORTOOLS_HXX
+
+#include <sal/types.h>
+
+//////////////////////////////////////////////////////////////////////////////
+
+namespace basegfx
+{
+    class BColor;
+
+    namespace tools
+    {
+        /// Transform from RGB to HSL
+        BColor rgb2hsl(const BColor& rRGBColor);
+        /// Transform from HSL to RGB
+        BColor hsl2rgb(const BColor& rHSLColor);
+
+        /// Transform from RGB to HSV
+        BColor rgb2hsv(const BColor& rRGBColor);
+        /// Transform from HSV to RGB
+        BColor hsv2rgb(const BColor& rHSVColor);
+
+        /// Transform from R'G'B' to YIQ (NTSC color model - Y is used in monochrome mode)
+        BColor rgb2yiq(const BColor& rRGBColor);
+        /// Transform from YIQ to R'G'B' (NTSC color model - Y is used in monochrome mode)
+        BColor yiq2rgb(const BColor& rYIQColor);
+
+        /// Transform from R'G'B' to Y'PbPr (the [0,1]x[-.5,.5]x[-.5,.5] equivalent of Y'CbCr (which is scaled into 8bit))
+        BColor rgb2ypbpr(const BColor& rRGBColor);
+        /// Transform from Y'PbPr (the [0,1]x[-.5,.5]x[-.5,.5] equivalent of Y'CbCr (which is scaled into 8bit)) into R'G'B'
+        BColor ypbpr2rgb(const BColor& rYPbPrColor);
+
+        /// Transform from CIE XYZ into Rec. 709 RGB (D65 white point)
+        BColor ciexyz2rgb( const BColor& rXYZColor );
+        /// Transform from Rec. 709 RGB (D65 white point) into CIE XYZ
+        BColor rgb2ciexyz( const BColor& rRGBColor );
+
+	}
+} // end of namespace basegfx
+
+#endif /* _BGFX_COLOR_BCOLORTOOLS_HXX */
+
+//////////////////////////////////////////////////////////////////////////////
+// eof
diff --git basegfx/prj/d.lst basegfx/prj/d.lst
index 9dd6085..a58cd33 100644
--- basegfx/prj/d.lst
+++ basegfx/prj/d.lst
@@ -96,6 +96,7 @@ mkdir: %_DEST%\inc%_EXT%\basegfx\tools
 
 mkdir: %_DEST%\inc%_EXT%\basegfx\color
 ..\inc\basegfx\color\bcolor.hxx %_DEST%\inc%_EXT%\basegfx\color\bcolor.hxx
+..\inc\basegfx\color\bcolortools.hxx %_DEST%\inc%_EXT%\basegfx\color\bcolortools.hxx
 ..\inc\basegfx\color\bcolormodifier.hxx %_DEST%\inc%_EXT%\basegfx\color\bcolormodifier.hxx
 
 mkdir: %_DEST%\inc%_EXT%\basegfx\pixel
diff --git basegfx/source/color/bcolortools.cxx basegfx/source/color/bcolortools.cxx
new file mode 100644
index 0000000..1dd2805
--- /dev/null
+++ basegfx/source/color/bcolortools.cxx
@@ -0,0 +1,272 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: bcolor.cxx,v $
+ *
+ * $Revision: 1.2 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_basegfx.hxx"
+
+#include <basegfx/numeric/ftools.hxx>
+#include <basegfx/color/bcolor.hxx>
+#include <basegfx/color/bcolortools.hxx>
+
+//////////////////////////////////////////////////////////////////////////////
+
+namespace basegfx { namespace tools
+{
+    BColor rgb2hsl(const BColor& rRGBColor)
+    {
+        const double r=rRGBColor.getRed(), g=rRGBColor.getGreen(), b=rRGBColor.getBlue();
+        const double minVal = ::std::min( ::std::min( r, g ), b );
+        const double maxVal = ::std::max( ::std::max( r, g ), b );
+        const double d = maxVal - minVal;
+
+        double h=0, s=0, l=0;
+
+        l = (maxVal + minVal) / 2.0;
+    
+        if( ::basegfx::fTools::equalZero(d) )
+        {
+            s = h = 0; // hue undefined (achromatic case)
+        }
+        else
+        {
+            s = l > 0.5 ? d/(2.0-maxVal-minVal) :
+                d/(maxVal + minVal);
+
+            if( r == maxVal )
+                h = (g - b)/d;
+            else if( g == maxVal )
+                h = 2.0 + (b - r)/d;
+            else
+                h = 4.0 + (r - h)/d;
+
+            h *= 60.0;
+
+            if( h < 0.0 )
+                h += 360.0;
+        }
+
+        return BColor(h,s,l);
+    }
+
+    static inline double hsl2rgbHelper( double nValue1, double nValue2, double nHue )
+    {
+        // clamp hue to [0,360]
+        nHue = fmod( nHue, 360.0 );
+
+        // cope with wrap-arounds
+        if( nHue < 0.0 )
+            nHue += 360.0;
+
+        if( nHue < 60.0 )
+            return nValue1 + (nValue2 - nValue1)*nHue/60.0;
+        else if( nHue < 180.0 )
+            return nValue2;
+        else if( nHue < 240.0 )
+            return nValue1 + (nValue2 - nValue1)*(240.0 - nHue)/60.0;
+        else 
+            return nValue1;
+    }
+
+    BColor hsl2rgb(const BColor& rHSLColor)
+    {
+        const double h=rHSLColor.getRed(), s=rHSLColor.getGreen(), l=rHSLColor.getBlue();
+
+        if( fTools::equalZero(s) )
+            return BColor(l, l, l ); // achromatic case
+
+        const double nVal1( l <= 0.5 ? l*(1.0 + s) : l + s - l*s );
+        const double nVal2( 2.0*l - nVal1 );
+
+        return BColor(
+            hsl2rgbHelper(nVal2,
+                          nVal1, 
+                          h + 120.0),
+            hsl2rgbHelper(nVal2, 
+                          nVal1,
+                          h),
+            hsl2rgbHelper(nVal2,
+                          nVal1,
+                          h - 120.0) );
+    }
+    
+    BColor rgb2hsv(const BColor& rRGBColor)
+    {
+        const double r=rRGBColor.getRed(), g=rRGBColor.getGreen(), b=rRGBColor.getBlue();
+        const double maxVal = std::max(std::max(r,g),b);
+        const double minVal = std::min(std::min(r,g),b);
+        const double delta = maxVal-minVal;
+
+        double h=0, s=0, v=0;
+
+        v = maxVal;
+        if( fTools::equalZero(v) )
+            s = 0;
+        else
+            s = delta / v;
+
+        if( !fTools::equalZero(s) )
+        {
+            if( maxVal == r )
+            {
+                h = (g - b) / delta;
+            }
+            else if( maxVal == g )
+            {
+                h = 2.0 + (b - r) / delta;
+            }
+            else
+            {
+                h = 4.0 + (r - g) / delta;
+            }
+
+            h *= 60.0;
+
+            if( h < 0 )
+                h += 360;
+        }
+
+        return BColor(h,s,v);
+    }
+
+    BColor hsv2rgb(const BColor& rHSVColor)
+    {
+        double h=rHSVColor.getRed();
+        const double s=rHSVColor.getGreen(), v=rHSVColor.getBlue();
+
+        if( fTools::equalZero(s) )
+        {
+            // achromatic case: no hue.
+            return BColor(v,v,v);
+        }
+        else
+        {
+            if( fTools::equal(h,360) )
+                h = 0; // 360 degrees is equivalent to 0 degrees
+
+            h /= 60.0;
+            const sal_Int32 intval = h;
+            const double f = h - intval;
+            const double p = v*(1.0-s);
+            const double q = v*(1.0-(s*f));
+            const double t = v*(1.0-(s*(1.0-f)));
+
+            /* which hue area? */
+            switch( intval )
+            {
+                case 0:
+                    return BColor(v,t,p);
+
+                case 1:
+                    return BColor(q,v,p);
+
+                case 2:
+                    return BColor(p,v,t);
+
+                case 3:
+                    return BColor(p,q,v);
+
+                case 4:
+                    return BColor(t,p,v);
+
+                case 5:
+                    return BColor(v,p,q);
+
+                default:
+                    // hue overflow
+                    return BColor();
+            }
+        }
+    }
+
+    BColor rgb2yiq(const BColor& rRGBColor)
+    {
+        // from Foley, van Dam, Computer Graphics
+        const double r=rRGBColor.getRed(), g=rRGBColor.getGreen(), b=rRGBColor.getBlue();
+        return BColor(
+            0.299*r + 0.587*g + 0.114*b,
+            0.596*r - 0.274*g - 0.322*b,
+            0.211*r - 0.522*g + 0.311*b);
+    }
+
+    BColor yiq2rgb(const BColor& rYIQColor)
+    {
+        // from Foley, van Dam, Computer Graphics
+        const double y=rYIQColor.getRed(), i=rYIQColor.getGreen(), q=rYIQColor.getBlue();
+        return BColor(
+            y + 0.956*i + 0.623*q,
+            y - 0.272*i - 0.648*q,
+            y - 1.105*i + 1.705*q );
+    }
+
+    BColor ciexyz2rgb( const BColor& rXYZColor )
+    {
+        // from Poynton color faq, and SMPTE RP 177-1993, Derivation
+        // of Basic Television Color Equations
+        const double x=rXYZColor.getRed(), y=rXYZColor.getGreen(), z=rXYZColor.getBlue();
+        return BColor(
+            3.240479*x - 1.53715*y  - 0.498535*z,
+            -0.969256*x + 1.875991*y + 0.041556*z,
+            0.055648*x - 0.204043*y + 1.057311*z );
+    }
+
+    BColor rgb2ciexyz( const BColor& rRGBColor )
+    {
+        // from Poynton color faq, and SMPTE RP 177-1993, Derivation
+        // of Basic Television Color Equations
+        const double r=rRGBColor.getRed(), g=rRGBColor.getGreen(), b=rRGBColor.getBlue();
+        return BColor(
+            0.412453*r + 0.35758*g  + 0.180423*b,
+            0.212671*r + 0.71516*g  + 0.072169*b,
+            0.019334*r + 0.119193*g + 0.950227*b);
+    }
+
+    BColor rgb2ypbpr(const BColor& rRGBColor)
+    {
+        const double r=rRGBColor.getRed(), g=rRGBColor.getGreen(), b=rRGBColor.getBlue();
+        return BColor(
+             0.299*r    + 0.587*g    + 0.114*b,
+            -0.168736*r - 0.331264*g + 0.5*b,
+             0.5*r      - 0.418688*g - 0.081312*b);
+    }
+
+    BColor ypbpr2rgb(const BColor& rYPbPrColor)
+    {
+        const double y=rYPbPrColor.getRed(), pb=rYPbPrColor.getGreen(), pr=rYPbPrColor.getBlue();
+        return BColor(
+            1.*y +       0.*pb +    1.402*pr,
+            1.*y - 0.344136*pb - 0.714136*pr,
+            1.*y +    1.772*pb +       0.*pr);
+    }
+
+} } // end of namespace basegfx
+
+//////////////////////////////////////////////////////////////////////////////
+// eof
diff --git basegfx/source/color/makefile.mk basegfx/source/color/makefile.mk
index 6a4ed94..36325e1 100644
--- basegfx/source/color/makefile.mk
+++ basegfx/source/color/makefile.mk
@@ -45,6 +45,7 @@ TARGET=color
 
 SLOFILES= \
 				$(SLO)$/bcolor.obj			\
+				$(SLO)$/bcolortools.obj		\
 				$(SLO)$/bcolormodifier.obj
 
 # --- Targets ----------------------------------
diff --git basegfx/test/basegfx2d.cxx basegfx/test/basegfx2d.cxx
index 6519a36..5cc1e02 100644
--- basegfx/test/basegfx2d.cxx
+++ basegfx/test/basegfx2d.cxx
@@ -43,6 +43,8 @@
 #include <basegfx/polygon/b2dpolypolygontools.hxx>
 #include <basegfx/range/b2dmultirange.hxx>
 #include <basegfx/numeric/ftools.hxx>
+#include <basegfx/color/bcolor.hxx>
+#include <basegfx/color/bcolortools.hxx>
 
 #include <basegfx/tools/debugplotter.hxx>
 
@@ -1443,6 +1445,178 @@ public:
     CPPUNIT_TEST_SUITE_END();
 }; // class b2dvector
 
+class bcolor : public CppUnit::TestFixture
+{
+    BColor maWhite;
+    BColor maBlack;
+    BColor maRed;
+    BColor maGreen;
+    BColor maBlue;
+    BColor maYellow;
+    BColor maMagenta;
+    BColor maCyan;
+
+public:
+    bcolor() :
+        maWhite(1,1,1),
+        maBlack(0,0,0),
+        maRed(1,0,0),
+        maGreen(0,1,0),
+        maBlue(0,0,1),
+        maYellow(1,1,0),
+        maMagenta(1,0,1),
+        maCyan(0,1,1)
+    {}
+
+
+    // initialise your test code values here.
+    void setUp()
+    {
+    }
+
+    void tearDown()
+    {
+    }
+
+    // insert your test code here.
+    void hslTest()
+    {
+        CPPUNIT_ASSERT_MESSAGE("white", 
+                               tools::rgb2hsl(maWhite) == BColor(0,0,1));
+        CPPUNIT_ASSERT_MESSAGE("black", 
+                               tools::rgb2hsl(maBlack) == BColor(0,0,0));
+        CPPUNIT_ASSERT_MESSAGE("red", 
+                               tools::rgb2hsl(maRed) == BColor(0,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("green", 
+                               tools::rgb2hsl(maGreen) == BColor(120,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("blue", 
+                               tools::rgb2hsl(maBlue) == BColor(240,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("yellow", 
+                               tools::rgb2hsl(maYellow) == BColor(60,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("magenta", 
+                               tools::rgb2hsl(maMagenta) == BColor(300,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("cyan", 
+                               tools::rgb2hsl(maCyan) == BColor(180,1,0.5));
+
+        CPPUNIT_ASSERT_MESSAGE("roundtrip white", 
+                               tools::hsl2rgb(tools::rgb2hsl(maWhite)) == maWhite);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip black", 
+                               tools::hsl2rgb(tools::rgb2hsl(maBlack)) == maBlack);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip red", 
+                               tools::hsl2rgb(tools::rgb2hsl(maRed)) == maRed);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip green", 
+                               tools::hsl2rgb(tools::rgb2hsl(maGreen)) == maGreen);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip blue", 
+                               tools::hsl2rgb(tools::rgb2hsl(maBlue)) == maBlue);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip yellow", 
+                               tools::hsl2rgb(tools::rgb2hsl(maYellow)) == maYellow);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip magenta", 
+                               tools::hsl2rgb(tools::rgb2hsl(maMagenta)) == maMagenta);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip cyan", 
+                               tools::hsl2rgb(tools::rgb2hsl(maCyan)) == maCyan);
+
+        CPPUNIT_ASSERT_MESSAGE("grey10", 
+                               tools::rgb2hsl(maWhite*.1) == BColor(0,0,.1));
+        CPPUNIT_ASSERT_MESSAGE("grey90", 
+                               tools::rgb2hsl(maWhite*.9) == BColor(0,0,.9));
+        CPPUNIT_ASSERT_MESSAGE("red/2", 
+                               tools::rgb2hsl(maRed*.5) == BColor(0,1,0.25));
+        CPPUNIT_ASSERT_MESSAGE("green/2", 
+                               tools::rgb2hsl(maGreen*.5) == BColor(120,1,0.25));
+        CPPUNIT_ASSERT_MESSAGE("blue/2", 
+                               tools::rgb2hsl(maBlue*.5) == BColor(240,1,0.25));
+        CPPUNIT_ASSERT_MESSAGE("yellow/2", 
+                               tools::rgb2hsl(maYellow*.5) == BColor(60,1,0.25));
+        CPPUNIT_ASSERT_MESSAGE("magenta/2", 
+                               tools::rgb2hsl(maMagenta*.5) == BColor(300,1,0.25));
+        CPPUNIT_ASSERT_MESSAGE("cyan/2", 
+                               tools::rgb2hsl(maCyan*.5) == BColor(180,1,0.25));
+
+        CPPUNIT_ASSERT_MESSAGE("pastel", 
+                               tools::rgb2hsl(BColor(.75,.25,.25)) == BColor(0,.5,.5));
+    }
+
+    // insert your test code here.
+    void hsvTest()
+    {
+        CPPUNIT_ASSERT_MESSAGE("white", 
+                               tools::rgb2hsv(maWhite) == BColor(0,0,1));
+        CPPUNIT_ASSERT_MESSAGE("black", 
+                               tools::rgb2hsv(maBlack) == BColor(0,0,0));
+        CPPUNIT_ASSERT_MESSAGE("red", 
+                               tools::rgb2hsv(maRed) == BColor(0,1,1));
+        CPPUNIT_ASSERT_MESSAGE("green", 
+                               tools::rgb2hsv(maGreen) == BColor(120,1,1));
+        CPPUNIT_ASSERT_MESSAGE("blue", 
+                               tools::rgb2hsv(maBlue) == BColor(240,1,1));
+        CPPUNIT_ASSERT_MESSAGE("yellow", 
+                               tools::rgb2hsv(maYellow) == BColor(60,1,1));
+        CPPUNIT_ASSERT_MESSAGE("magenta", 
+                               tools::rgb2hsv(maMagenta) == BColor(300,1,1));
+        CPPUNIT_ASSERT_MESSAGE("cyan", 
+                               tools::rgb2hsv(maCyan) == BColor(180,1,1));
+
+        CPPUNIT_ASSERT_MESSAGE("roundtrip white", 
+                               tools::hsv2rgb(tools::rgb2hsv(maWhite)) == maWhite);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip black", 
+                               tools::hsv2rgb(tools::rgb2hsv(maBlack)) == maBlack);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip red", 
+                               tools::hsv2rgb(tools::rgb2hsv(maRed)) == maRed);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip green", 
+                               tools::hsv2rgb(tools::rgb2hsv(maGreen)) == maGreen);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip blue", 
+                               tools::hsv2rgb(tools::rgb2hsv(maBlue)) == maBlue);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip yellow", 
+                               tools::hsv2rgb(tools::rgb2hsv(maYellow)) == maYellow);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip magenta", 
+                               tools::hsv2rgb(tools::rgb2hsv(maMagenta)) == maMagenta);
+        CPPUNIT_ASSERT_MESSAGE("roundtrip cyan", 
+                               tools::hsv2rgb(tools::rgb2hsv(maCyan)) == maCyan);
+
+        CPPUNIT_ASSERT_MESSAGE("grey10", 
+                               tools::rgb2hsv(maWhite*.1) == BColor(0,0,.1));
+        CPPUNIT_ASSERT_MESSAGE("grey90", 
+                               tools::rgb2hsv(maWhite*.9) == BColor(0,0,.9));
+        CPPUNIT_ASSERT_MESSAGE("red/2", 
+                               tools::rgb2hsv(maRed*.5) == BColor(0,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("green/2", 
+                               tools::rgb2hsv(maGreen*.5) == BColor(120,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("blue/2", 
+                               tools::rgb2hsv(maBlue*.5) == BColor(240,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("yellow/2", 
+                               tools::rgb2hsv(maYellow*.5) == BColor(60,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("magenta/2", 
+                               tools::rgb2hsv(maMagenta*.5) == BColor(300,1,0.5));
+        CPPUNIT_ASSERT_MESSAGE("cyan/2", 
+                               tools::rgb2hsv(maCyan*.5) == BColor(180,1,0.5));
+
+        CPPUNIT_ASSERT_MESSAGE("pastel", 
+                               tools::rgb2hsv(BColor(.5,.25,.25)) == BColor(0,.5,.5));
+    }
+
+    void ciexyzTest()
+    {
+        tools::rgb2ciexyz(maWhite);
+        tools::rgb2ciexyz(maBlack);
+        tools::rgb2ciexyz(maRed);
+        tools::rgb2ciexyz(maGreen);
+        tools::rgb2ciexyz(maBlue);
+        tools::rgb2ciexyz(maYellow);
+        tools::rgb2ciexyz(maMagenta);
+        tools::rgb2ciexyz(maCyan);
+    }
+
+    // Change the following lines only, if you add, remove or rename 
+    // member functions of the current class, 
+    // because these macros are need by auto register mechanism.
+
+    CPPUNIT_TEST_SUITE(bcolor);
+    CPPUNIT_TEST(hslTest);
+    CPPUNIT_TEST(hsvTest);
+    CPPUNIT_TEST(ciexyzTest);
+    CPPUNIT_TEST_SUITE_END();
+}; // class b2dvector
+
 // -----------------------------------------------------------------------------
 //CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(basegfx2d::b2dmultirange, "basegfx2d");
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(basegfx2d::b2dsvgdimpex, "basegfx2d");
@@ -1458,6 +1632,7 @@ CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(basegfx2d::b2dquadraticbezier, "basegfx2d"
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(basegfx2d::b2drange, "basegfx2d");
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(basegfx2d::b2dtuple, "basegfx2d");
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(basegfx2d::b2dvector, "basegfx2d");
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(basegfx2d::bcolor, "basegfx2d");
 } // namespace basegfx2d
 
 
diff --git basegfx/test/makefile.mk basegfx/test/makefile.mk
index 0781cf2..710d194 100644
--- basegfx/test/makefile.mk
+++ basegfx/test/makefile.mk
@@ -58,6 +58,7 @@ SHL1LIBS=\
 	$(SLB)$/range.lib	\
 	$(SLB)$/tuple.lib	\
 	$(SLB)$/tools.lib	\
+	$(SLB)$/color.lib	\
 	$(SLB)$/vector.lib
 
 SHL1TARGET= basegfx_tests
