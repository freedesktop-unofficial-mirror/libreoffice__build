--- vcl/source/gdi/impimage.cxx.old	2007-07-24 12:10:47.000000000 +0200
+++ vcl/source/gdi/impimage.cxx	2007-08-15 15:19:23.000000000 +0200
@@ -240,7 +240,7 @@ void ImplImageBmp::Create( long nItemWid
 	const Size aTotalSize( nInitSize * nItemWidth, nItemHeight );
 
 	maBmpEx = Bitmap( aTotalSize, 24 );
-	maDisabledBmp.SetEmpty();
+	maDisabledBmpEx.SetEmpty();
 
 	delete mpDisplayBmp;
 	mpDisplayBmp = NULL;
@@ -258,7 +258,7 @@ void ImplImageBmp::Create( long nItemWid
 void ImplImageBmp::Create( const BitmapEx& rBmpEx, long nItemWidth, long nItemHeight, USHORT nInitSize )
 {
 	maBmpEx = rBmpEx;
-	maDisabledBmp.SetEmpty();
+	maDisabledBmpEx.SetEmpty();
 
 	delete mpDisplayBmp;
 	mpDisplayBmp = NULL;
@@ -283,8 +283,8 @@ void ImplImageBmp::Expand( USHORT nGrowS
 
 	maBmpEx.Expand( nDX, 0UL );
 
-	if( !maDisabledBmp.IsEmpty() )
-		maDisabledBmp.Expand( nDX, 0UL );
+	if( !maDisabledBmpEx.IsEmpty() )
+		maDisabledBmpEx.Expand( nDX, 0UL );
 
 	delete mpDisplayBmp;
 	mpDisplayBmp = NULL;
@@ -315,8 +315,8 @@ void ImplImageBmp::Replace( USHORT nPos,
 
 	maBmpEx.CopyPixel( aDstRect, aSrcRect );
 
-	if( !maDisabledBmp.IsEmpty() )
-		maDisabledBmp.CopyPixel( aDstRect, aSrcRect );
+	if( !maDisabledBmpEx.IsEmpty() )
+		maDisabledBmpEx.CopyPixel( aDstRect, aSrcRect );
 
 	delete mpDisplayBmp;
 	mpDisplayBmp = NULL;
@@ -427,8 +427,7 @@ void ImplImageBmp::Draw( USHORT nPos, Ou
 
 			ImplUpdateDisabledBmp( -1 );
 
-			pOutDev->DrawMask( aOutPos1, aOutSize, aSrcPos, maSize, maDisabledBmp, rSettings.GetLightColor() );
-			pOutDev->DrawMask( rPos, aOutSize, aSrcPos, maSize, maDisabledBmp, rSettings.GetShadowColor() );
+			pOutDev->DrawBitmapEx( rPos, aOutSize, aSrcPos, maSize, maDisabledBmpEx );
 		}
 		else
 		{
@@ -609,160 +608,96 @@ pOutDev
 
 // -----------------------------------------------------------------------
 
+static unsigned char deSaturate (unsigned char col, unsigned char intensity)
+{
+	int i = (int) ((0.2 * intensity + col * 0.8) * 0.7);
+	if (i <= 0)
+		return 0;
+	if (i >= 255)
+		return 255;
+	return (unsigned char) i;
+}
+
 void ImplImageBmp::ImplUpdateDisabledBmp( int nPos )
 {
-	if( ( nPos >= 0 && !maDisabledBmp.IsEmpty() ) ||
-		( nPos < 0 && maDisabledBmp.IsEmpty() ) )
+	if( ! ( nPos >= 0 && !maDisabledBmpEx.IsEmpty() ) &&
+	    ! ( nPos < 0 && maDisabledBmpEx.IsEmpty() ) )
+		return;
+
+	Bitmap aBitmap;
+
+	// The source bitmap might use a palette. We are going to do some
+	// mathematical operations with the colors. It will be more safe
+	// to always put the output into RGB instead of searching the best
+	// matching colors in the current palette...
+	aBitmap = Bitmap( maBmpEx.GetSizePixel(), 24 );
+
+	Bitmap aSrcBitmap = maBmpEx.GetBitmap();
+	BitmapReadAccess  *pAcc = aSrcBitmap.AcquireReadAccess();
+	if( !pAcc )
+		return;
+	BitmapWriteAccess *pDis = aBitmap.AcquireWriteAccess();
+
+	if( !pDis )
 	{
-		Bitmap aBmp( maBmpEx.GetBitmap() );
-		Bitmap aMask;
+		aSrcBitmap.ReleaseAccess( pAcc );
+		return;
+	}
 
-		if( maBmpEx.IsTransparent() )
-			aMask = maBmpEx.GetMask();
-		else
-		{
-			aMask = aBmp;
-			aMask.Convert( BMP_CONVERSION_1BIT_THRESHOLD );
-		}
+	long nLeft, nTop, nRight, nBottom;
 
-		if( maDisabledBmp.IsEmpty() )
-			maDisabledBmp = Bitmap( aBmp.GetSizePixel(), 1 );
+	if( nPos >= 0 )
+	{
+		const Point aPos( nPos * maSize.Width(), 0 );
 
-		BitmapReadAccess*	pAcc = aBmp.AcquireReadAccess();
-		BitmapReadAccess*	pMsk = aMask.AcquireReadAccess();
-		BitmapWriteAccess*	pDis = maDisabledBmp.AcquireWriteAccess();
+		nLeft = aPos.X();
+		nTop = 0;
+		nRight = nLeft + maSize.Width();
+		nBottom = nTop + maSize.Height();
+	}
+	else
+	{
+		nLeft = nTop = 0L;
+		nRight = pDis->Width();
+		nBottom = pDis->Height();
+	}
 
-		if( pAcc && pMsk && pDis )
+	if( pAcc && pDis )
+	{
+		for( long nY = nTop; nY < nBottom; nY++ )
 		{
-			const Color 		aWhite( COL_WHITE );
-			const Color 		aBlack( COL_BLACK );
-			const BitmapColor	aAccWhite( pAcc->GetBestMatchingColor( aWhite ) );
-			const BitmapColor	aMskWhite( pMsk->GetBestMatchingColor( aWhite ) );
-			const BitmapColor	aDisWhite( pDis->GetBestMatchingColor( aWhite ) );
-			const BitmapColor	aDisBlack( pDis->GetBestMatchingColor( aBlack ) );
-			long				nLeft, nTop, nRight, nBottom;
-			long				nCurLeft, nCurRight;
-			const long			nBlackThreshold = FRound( maSize.Width() * maSize.Height() * 0.10 );
-
-			if( nPos >= 0 )
+			for( long nX = nLeft; nX < nRight; nX++ )
 			{
-				const Point aPos( nPos * maSize.Width(), 0 );
-
-				nLeft = aPos.X();
-				nTop = 0;
-				nRight = nLeft + maSize.Width();
-				nBottom = nTop + maSize.Height();
-			}
-			else
-			{
-				nLeft = nTop = 0L;
-				nRight = pDis->Width();
-				nBottom = pDis->Height();
-			}
-
-			nCurLeft = nLeft;
-			nCurRight = nCurLeft + maSize.Width();
-
-			while( nCurLeft < nRight )
-			{
-				sal_Int32 nBlackCount = 0;
-
-				if( pAcc->GetScanlineFormat() == BMP_FORMAT_4BIT_MSN_PAL &&
-					pMsk->GetScanlineFormat() == BMP_FORMAT_1BIT_MSB_PAL )
-				{
-					// optimized version
-					const BYTE cAccTest = aAccWhite.GetIndex();
-					const BYTE cMskTest = aMskWhite.GetIndex();
-
-					for( long nY = nTop; nY < nBottom; nY++ )
-					{
-						Scanline pAccScan = pAcc->GetScanline( nY );
-						Scanline pMskScan = pMsk->GetScanline( nY );
-
-						for( long nX = nCurLeft; nX < nCurRight; nX++ )
-						{
-							if( ( cMskTest == ( pMskScan[ nX >> 3 ] & ( 1 << ( 7 - ( nX & 7 ) ) ) ? 1 : 0 ) ) ||
-								( cAccTest == ( ( pAccScan[ nX >> 1 ] >> ( nX & 1 ? 0 : 4 ) ) & 0x0f ) ) )
-							{
-								pDis->SetPixel( nY, nX, aDisWhite );
-							}
-							else
-							{
-								pDis->SetPixel( nY, nX, aDisBlack );
-								++nBlackCount;
-							}
-						}
-					}
-				}
-				else if( pAcc->GetScanlineFormat() == BMP_FORMAT_8BIT_PAL &&
-						pMsk->GetScanlineFormat() == BMP_FORMAT_1BIT_MSB_PAL )
+				// read color even when the birmap uses palette
+				// we generate RGB anyway
+				BitmapColor col = pAcc->GetColor( nY, nX );
+				unsigned char i;
+
+				i = (unsigned char ) ( col.GetRed() * 0.3 + // magic numbers
+									   col.GetGreen() * 0.59 +
+									   col.GetBlue () * 0.11 );
+				if ((nY + nX) % 2 == 0)
 				{
-					// optimized version
-					const BYTE cAccTest = aAccWhite.GetIndex();
-					const BYTE cMskTest = aMskWhite.GetIndex();
-
-					for( long nY = nTop; nY < nBottom; nY++ )
-					{
-						Scanline pAccScan = pAcc->GetScanline( nY );
-						Scanline pMskScan = pMsk->GetScanline( nY );
-
-						for( long nX = nCurLeft; nX < nCurRight; nX++ )
-						{
-							if( ( cMskTest == ( pMskScan[ nX >> 3 ] & ( 1 << ( 7 - ( nX & 7 ) ) ) ? 1 : 0 ) ) ||
-								( cAccTest == pAccScan[ nX ] ) )
-							{
-								pDis->SetPixel( nY, nX, aDisWhite );
-							}
-							else
-							{
-								pDis->SetPixel( nY, nX, aDisBlack );
-								++nBlackCount;
-							}
-						}
-					}
+					col.SetRed   (i / 2 + 127);
+					col.SetGreen (i / 2 + 127);
+					col.SetBlue  (i / 2 + 127);
 				}
 				else
 				{
-					for( long nY = nTop; nY < nBottom; nY++ )
-					{
-						for( long nX = nCurLeft; nX < nCurRight; nX++ )
-						{
-							if( ( aMskWhite == pMsk->GetPixel( nY, nX ) ) ||
-								( aAccWhite == pAcc->GetPixel( nY, nX ) ) )
-							{
-								pDis->SetPixel( nY, nX, aDisWhite );
-							}
-							else
-							{
-								pDis->SetPixel( nY, nX, aDisBlack );
-								++nBlackCount;
-							}
-						}
-					}
-				}
-
-				if( nBlackCount < nBlackThreshold )
-				{
-					// emergency solution if paint bitmap is mostly white
-					for( long nY = nTop; nY < nBottom; nY++ )
-					{
-						for( long nX = nCurLeft; nX < nCurRight; nX++ )
-						{
-							if( aMskWhite == pMsk->GetPixel( nY, nX ) )
-								pDis->SetPixel( nY, nX, aDisWhite );
-							else
-								pDis->SetPixel( nY, nX, aDisBlack );
-						}
-					}
-				}
-
-				nCurLeft += maSize.Width();
-				nCurRight += maSize.Width();
+					col.SetRed   (deSaturate (col.GetRed(), i));
+					col.SetGreen (deSaturate (col.GetGreen(), i));
+					col.SetBlue  (deSaturate (col.GetBlue(), i));
+			}
+				pDis->SetPixel( nY, nX, col );
 			}
 		}
-
-		aBmp.ReleaseAccess( pAcc );
-		aMask.ReleaseAccess( pMsk );
-		maDisabledBmp.ReleaseAccess( pDis );
 	}
+
+	aSrcBitmap.ReleaseAccess( pAcc );
+	aBitmap.ReleaseAccess( pDis );
+
+	if( maBmpEx.IsAlpha() )
+			maDisabledBmpEx = BitmapEx( aBitmap, maBmpEx.GetAlpha() );
+	else
+			maDisabledBmpEx = BitmapEx( aBitmap, maBmpEx.GetMask() );
 }
Index: vcl/inc/image.h
===================================================================
RCS file: /cvs/gsl/vcl/inc/image.h,v
retrieving revision 1.8
diff -u -r1.8 image.h
--- vcl/inc/vcl/image.h	9 Sep 2005 11:01:36 -0000	1.8
+++ vcl/inc/vcl/image.h	22 Mar 2006 12:25:15 -0000
@@ -71,7 +71,7 @@
 private:
 
 	BitmapEx	maBmpEx;
-	Bitmap		maDisabledBmp;
+	BitmapEx	maDisabledBmpEx;
 	BitmapEx*	mpDisplayBmp;
 	Size		maSize;
 	BYTE*		mpInfoAry;
