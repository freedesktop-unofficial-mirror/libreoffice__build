diff --git chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx
index df18ec8..3d4e9a9 100644
--- chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx
+++ chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx
@@ -113,6 +113,7 @@ enum
     PROP_DIAGRAM_DATAROW_SOURCE,
 
     PROP_DIAGRAM_GROUP_BARS_PER_AXIS,
+    PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS,
 
     PROP_DIAGRAM_SORT_BY_X_VALUES,
 
@@ -230,6 +231,13 @@ void lcl_AddPropertiesToVector(
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
 
+    rOutProperties.push_back(
+        Property( C2U( "IncludeHiddenCells" ),
+                  PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+
     //new for XY charts
     rOutProperties.push_back(
         Property( C2U( "SortByXValues" ),
diff --git chart2/source/controller/dialogs/ObjectNameProvider.cxx chart2/source/controller/dialogs/ObjectNameProvider.cxx
index d477a34..20d9b81 100644
--- chart2/source/controller/dialogs/ObjectNameProvider.cxx
+++ chart2/source/controller/dialogs/ObjectNameProvider.cxx
@@ -63,6 +63,10 @@ using namespace ::com::sun::star::chart2;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::Sequence;
 using ::com::sun::star::uno::Any;
+using ::com::sun::star::uno::UNO_QUERY;
+using ::com::sun::star::chart2::XDiagram;
+using ::com::sun::star::beans::XPropertySet;
+using ::com::sun::star::beans::UnknownPropertyException;
 using rtl::OUString;
 
 namespace
@@ -95,11 +99,33 @@ void lcl_addText( OUString& rOut, const OUString& rSeparator, const OUString& rN
         rOut+=rNext;
 }
 
+bool lcl_isHiddenCellsIncluded( const Reference<frame::XModel>& xChartModel )
+{
+    bool bIncluded = true;  // hidden cells are included by default.
+
+    Reference< XDiagram > xDiagram( ChartModelHelper::findDiagram(xChartModel) );
+    if (!xDiagram.is())
+        return bIncluded;
+
+    Reference< XPropertySet > xProp( xDiagram, UNO_QUERY );
+    if (!xProp.is())
+        return bIncluded;
+
+    try
+    {
+        xProp->getPropertyValue(C2U("IncludeHiddenCells")) >>= bIncluded;
+    }
+    catch (const UnknownPropertyException&)
+    {
+    }
+
+    return bIncluded;
+}
+
 OUString lcl_getDataPointValueText( const Reference< XDataSeries >& xSeries, sal_Int32 nPointIndex,
                                     const Reference< XCoordinateSystem >& xCooSys,
                                     const Reference< frame::XModel >& xChartModel )
 {
-
     OUString aRet;
 
     Reference<data::XDataSource> xDataSource(
@@ -111,6 +137,7 @@ OUString lcl_getDataPointValueText( const Reference< XDataSeries >& xSeries, sal
 
     rtl::OUString aX, aY, aY_Min, aY_Max, aY_First, aY_Last;
     double fValue = 0;
+    bool bIncludeHiddenCells = lcl_isHiddenCellsIncluded(xChartModel);
 
     uno::Reference< util::XNumberFormatsSupplier > xNumberFormatsSupplier( xChartModel, uno::UNO_QUERY );
     NumberFormatterWrapper aNumberFormatterWrapper( xNumberFormatsSupplier );
@@ -130,6 +157,14 @@ OUString lcl_getDataPointValueText( const Reference< XDataSeries >& xSeries, sal
 	    {
 		    try
 		    {
+                if (!bIncludeHiddenCells)
+                {
+                    Sequence<sal_Int32> aHiddenValues;
+                    xProp->getPropertyValue( C2U("HiddenValues") ) >>= aHiddenValues;
+                    if (aHiddenValues.getLength())
+                        DataSeriesHelper::removeHiddenDataPoints(aData, aHiddenValues);
+                }
+
                 uno::Any aARole = xProp->getPropertyValue( C2U( "Role" ) );
                 rtl::OUString aRole;
                 aARole >>= aRole;
@@ -184,7 +219,7 @@ OUString lcl_getDataPointValueText( const Reference< XDataSeries >& xSeries, sal
 
         replaceParamterInString( aCategory
             , C2U("%CATEGORYVALUE")
-            , ExplicitCategoriesProvider::getCategoryByIndex( xCooSys, nPointIndex )
+            , ExplicitCategoriesProvider::getCategoryByIndex( xCooSys, nPointIndex, bIncludeHiddenCells )
             );
         
         aRet = aCategory;
diff --git chart2/source/inc/DataSeriesHelper.hxx chart2/source/inc/DataSeriesHelper.hxx
index a7e1019..0cf57eb 100644
--- chart2/source/inc/DataSeriesHelper.hxx
+++ chart2/source/inc/DataSeriesHelper.hxx
@@ -41,6 +41,7 @@
 
 #include <vector>
 #include <functional>
+#include <hash_set>
 
 namespace chart
 {
@@ -177,6 +178,34 @@ bool hasAttributedDataPointDifferentValue(
     const ::rtl::OUString& rPropertyName,
     const ::com::sun::star::uno::Any& rPropertyValue );
 
+template<typename T>
+void removeHiddenDataPoints(
+    ::com::sun::star::uno::Sequence<T>& rDataPoints,
+    const ::com::sun::star::uno::Sequence<sal_Int32>& rHiddenIndices )
+{
+    ::std::hash_set<sal_Int32> aIndices;
+    sal_Int32 n = rHiddenIndices.getLength();
+    for (sal_Int32 i = 0; i < n; ++i)
+        aIndices.insert(rHiddenIndices[i]);
+
+    ::std::vector<T> aNewDataVector;
+    n = rDataPoints.getLength();
+    aNewDataVector.reserve(n);
+    for (sal_Int32 i = 0; i < n; ++i)
+    {
+        if (aIndices.count(i))
+            // skip this value.
+            continue;
+
+        aNewDataVector.push_back(rDataPoints[i]);
+    }
+
+    n = aNewDataVector.size();
+    rDataPoints.realloc(n);
+    for (size_t i = 0; i < static_cast<size_t>(n); ++i)
+        rDataPoints[i] = aNewDataVector[i];
+}
+
 } //  namespace DataSeriesHelper
 } //  namespace chart
 
diff --git chart2/source/inc/ExplicitCategoriesProvider.hxx chart2/source/inc/ExplicitCategoriesProvider.hxx
index e6bf4fc..ad0b21e 100644
--- chart2/source/inc/ExplicitCategoriesProvider.hxx
+++ chart2/source/inc/ExplicitCategoriesProvider.hxx
@@ -56,11 +56,15 @@ public:
     static ::rtl::OUString getCategoryByIndex(
         const ::com::sun::star::uno::Reference<
             ::com::sun::star::chart2::XCoordinateSystem >& xCooSysModel,
-        sal_Int32 nIndex );
+        sal_Int32 nIndex, bool bIncludeHiddenCells );
+
+    void setIncludeHiddenCells(bool b);
+    bool getIncludeHiddenCells() const;
 
 private: //member
     ::com::sun::star::uno::Sequence< ::rtl::OUString > m_aExplicitCategories;
     bool volatile m_bDirty;
+    bool m_bIncludeHiddelCells;
 
     ::com::sun::star::uno::WeakReference<
         ::com::sun::star::chart2::XCoordinateSystem > m_xCooSysModel;
diff --git chart2/source/model/main/Diagram.cxx chart2/source/model/main/Diagram.cxx
index b7c1eb7..cc6dc2c 100644
--- chart2/source/model/main/Diagram.cxx
+++ chart2/source/model/main/Diagram.cxx
@@ -79,6 +79,7 @@ enum
     PROP_DIAGRAM_SORT_BY_X_VALUES,
     PROP_DIAGRAM_CONNECT_BARS,
     PROP_DIAGRAM_GROUP_BARS_PER_AXIS,
+    PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS,
     PROP_DIAGRAM_STARTING_ANGLE,
     PROP_DIAGRAM_RIGHT_ANGLED_AXES,
     PROP_DIAGRAM_PERSPECTIVE,
@@ -125,6 +126,13 @@ void lcl_AddPropertiesToVector(
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
 
     rOutProperties.push_back(
+        Property( C2U("IncludeHiddenCells"),
+                  PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+
+    rOutProperties.push_back(
         Property( C2U( "StartingAngle" ),
                   PROP_DIAGRAM_STARTING_ANGLE,
                   ::getCppuType( reinterpret_cast< const sal_Int32 * >(0) ),
@@ -163,6 +171,7 @@ void lcl_AddDefaultsToMap(
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_SORT_BY_X_VALUES, false );
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_CONNECT_BARS, false );
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_GROUP_BARS_PER_AXIS, true );
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS, false );
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_RIGHT_ANGLED_AXES, false );
     ::chart::PropertyHelper::setPropertyValueDefault< sal_Int32 >( rOutMap, PROP_DIAGRAM_STARTING_ANGLE, 90 );
 }
diff --git chart2/source/tools/ExplicitCategoriesProvider.cxx chart2/source/tools/ExplicitCategoriesProvider.cxx
index acd9585..c53a909 100644
--- chart2/source/tools/ExplicitCategoriesProvider.cxx
+++ chart2/source/tools/ExplicitCategoriesProvider.cxx
@@ -32,8 +32,13 @@
 #include "precompiled_chart2.hxx"
 
 #include "ExplicitCategoriesProvider.hxx"
+#include "DataSeriesHelper.hxx"
 #include "DiagramHelper.hxx"
 #include "CommonConverters.hxx"
+#include "macros.hxx"
+
+#include <hash_set>
+#include <vector>
 
 //.............................................................................
 namespace chart
@@ -45,9 +50,12 @@ using namespace ::com::sun::star::chart2;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::Sequence;
 using rtl::OUString;
+using ::std::hash_set;
+using ::std::vector;
 
 ExplicitCategoriesProvider::ExplicitCategoriesProvider( const Reference< chart2::XCoordinateSystem >& xCooSysModel )
     : m_bDirty(true)
+    , m_bIncludeHiddelCells(true)
     , m_xCooSysModel( xCooSysModel )
     , m_xCategories()
 {
@@ -68,23 +76,55 @@ Sequence< ::rtl::OUString > SAL_CALL ExplicitCategoriesProvider::getTextualData(
 {
     if( m_bDirty )
     {
-        if( m_xCategories.is() )
-            m_aExplicitCategories = DataSequenceToStringSequence(m_xCategories->getValues());
-        if(!m_aExplicitCategories.getLength())
-            m_aExplicitCategories = DiagramHelper::generateAutomaticCategories( uno::Reference< chart2::XCoordinateSystem >( m_xCooSysModel.get(), uno::UNO_QUERY ) );
+        if (!m_xCategories.is())
+            return m_aExplicitCategories;
+
+        uno::Reference< data::XDataSequence > xValues = m_xCategories->getValues();
+        uno::Reference< beans::XPropertySet > xProp(xValues, uno::UNO_QUERY);
+        bool bIsHidden = false;
+        Sequence<sal_Int32> aHiddenValues;
+        if (xProp.is())
+        {
+            xProp->getPropertyValue( C2U( "IsHidden" ) ) >>= bIsHidden;
+            xProp->getPropertyValue( C2U( "HiddenValues" ) ) >>= aHiddenValues;
+        }
+
+        if (!bIsHidden || m_bIncludeHiddelCells)
+        {
+            m_aExplicitCategories = DataSequenceToStringSequence(xValues);
+            if (!m_bIncludeHiddelCells)
+                DataSeriesHelper::removeHiddenDataPoints(m_aExplicitCategories, aHiddenValues);
+
+            if(!m_aExplicitCategories.getLength())
+                m_aExplicitCategories = DiagramHelper::generateAutomaticCategories(
+                    uno::Reference< chart2::XCoordinateSystem >( m_xCooSysModel.get(), uno::UNO_QUERY ) );
+        }
+
         m_bDirty = false;
     }
     return m_aExplicitCategories;
 }
 
+void ExplicitCategoriesProvider::setIncludeHiddenCells(bool b)
+{
+    m_bIncludeHiddelCells = b;
+}
+
+bool ExplicitCategoriesProvider::getIncludeHiddenCells() const
+{
+    return m_bIncludeHiddelCells;
+}
+
 // static
 OUString ExplicitCategoriesProvider::getCategoryByIndex(
         const Reference< XCoordinateSystem >& xCooSysModel,
-        sal_Int32 nIndex )
+        sal_Int32 nIndex, bool bIncludeHiddenCells )
 {
     if( xCooSysModel.is())
     {
-        Reference< XTextualDataSequence > xTemp( new ExplicitCategoriesProvider( xCooSysModel ));
+        ExplicitCategoriesProvider* p = new ExplicitCategoriesProvider(xCooSysModel);
+        p->setIncludeHiddenCells(bIncludeHiddenCells);
+        Reference< XTextualDataSequence > xTemp(p);
         if( xTemp.is())
         {
             Sequence< OUString > aCategories( xTemp->getTextualData());
diff --git chart2/source/tools/UncachedDataSequence.cxx chart2/source/tools/UncachedDataSequence.cxx
index bcf99f7..1fa3b00 100644
--- chart2/source/tools/UncachedDataSequence.cxx
+++ chart2/source/tools/UncachedDataSequence.cxx
@@ -79,7 +79,7 @@ UncachedDataSequence::UncachedDataSequence(
     const OUString & rRangeRepresentation )
         : OPropertyContainer( GetBroadcastHelper()),
           UncachedDataSequence_Base( GetMutex()),
-          m_bIsHidden( true ),
+          m_bIsHidden( false ),
           m_xDataProvider( xIntDataProv ),
           m_aSourceRepresentation( rRangeRepresentation ),
           m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder())
@@ -93,7 +93,7 @@ UncachedDataSequence::UncachedDataSequence(
     const OUString & rRole )
         : OPropertyContainer( GetBroadcastHelper()),
           UncachedDataSequence_Base( GetMutex()),
-          m_bIsHidden( true ),
+          m_bIsHidden( false ),
           m_xDataProvider( xIntDataProv ),
           m_aSourceRepresentation( rRangeRepresentation ),
           m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder())
diff --git chart2/source/view/axes/VCoordinateSystem.cxx chart2/source/view/axes/VCoordinateSystem.cxx
index 148b28c..82a4538 100644
--- chart2/source/view/axes/VCoordinateSystem.cxx
+++ chart2/source/view/axes/VCoordinateSystem.cxx
@@ -598,6 +598,16 @@ void VCoordinateSystem::setSeriesNamesForAxis( const Sequence< rtl::OUString >&
     m_aSeriesNamesForZAxis = rSeriesNames;
 }
 
+void VCoordinateSystem::setIncludeHiddenCells(bool b)
+{
+    m_aExplicitCategoriesProvider->setIncludeHiddenCells(b);
+}
+
+bool VCoordinateSystem::getIncludeHiddenCells() const
+{
+    return m_aExplicitCategoriesProvider->getIncludeHiddenCells();
+}
+
 sal_Int32 VCoordinateSystem::getNumberFormatKeyForAxis(
         const Reference< chart2::XAxis >& xAxis
         , const Reference< util::XNumberFormatsSupplier >& xNumberFormatsSupplier )
diff --git chart2/source/view/inc/VCoordinateSystem.hxx chart2/source/view/inc/VCoordinateSystem.hxx
index cc0f512..d816e2e 100644
--- chart2/source/view/inc/VCoordinateSystem.hxx
+++ chart2/source/view/inc/VCoordinateSystem.hxx
@@ -133,6 +133,9 @@ public:
     virtual bool needSeriesNamesForAxis() const;
     void setSeriesNamesForAxis( const ::com::sun::star::uno::Sequence< rtl::OUString >& rSeriesNames );
 
+    void setIncludeHiddenCells(bool b);
+    bool getIncludeHiddenCells() const;
+
 protected: //methods
     VCoordinateSystem( const ::com::sun::star::uno::Reference<
         ::com::sun::star::chart2::XCoordinateSystem >& xCooSys );
diff --git chart2/source/view/inc/VDataSeries.hxx chart2/source/view/inc/VDataSeries.hxx
index 135fcf8..11a5bd8 100644
--- chart2/source/view/inc/VDataSeries.hxx
+++ chart2/source/view/inc/VDataSeries.hxx
@@ -59,7 +59,7 @@ class VDataSequence
 {
 public:
     void init( const ::com::sun::star::uno::Reference<
-        ::com::sun::star::chart2::data::XDataSequence >& xModel);
+        ::com::sun::star::chart2::data::XDataSequence >& xModel, bool bIncludeHiddenCells );
     bool is() const;
     void clear();
     double getValue( sal_Int32 index ) const;
@@ -77,7 +77,7 @@ class VDataSeries
 {
 public:
     VDataSeries( const ::com::sun::star::uno::Reference<
-        ::com::sun::star::chart2::XDataSeries >& xDataSeries );
+        ::com::sun::star::chart2::XDataSeries >& xDataSeries, bool bIncludeHiddenCells );
     virtual ~VDataSeries();
 
     ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries >
@@ -138,6 +138,9 @@ public:
     void setGroupBarsPerAxis( sal_Bool bGroupBarsPerAxis );
     sal_Bool getGroupBarsPerAxis() const;
 
+    void setIncludeHiddenCells( sal_Bool bIncludeHiddenCells );
+    sal_Bool getIncludeHiddenCells() const;
+
     void setStartingAngle( sal_Int32 nStartingAngle );
     sal_Int32 getStartingAngle() const;
     
@@ -217,6 +220,8 @@ private: //member
 
     sal_Bool                m_bGroupBarsPerAxis;
 
+    sal_Bool                m_bIncludeHiddenCells;
+
     sal_Int32               m_nStartingAngle;
 
     rtl::OUString           m_aSeriesParticle;
diff --git chart2/source/view/main/ChartView.cxx chart2/source/view/main/ChartView.cxx
index a16fffd..63075dc 100644
--- chart2/source/view/main/ChartView.cxx
+++ chart2/source/view/main/ChartView.cxx
@@ -621,6 +621,7 @@ void SeriesPlotterContainer::initializeCooSysAndSeriesPlotter(
     sal_Bool bSortByXValues = sal_False;
     sal_Bool bConnectBars = sal_False;
     sal_Bool bGroupBarsPerAxis = sal_True;
+    sal_Bool bIncludeHiddenCells = sal_True;
     sal_Int32 nStartingAngle = 90;
     try
     {
@@ -628,6 +629,7 @@ void SeriesPlotterContainer::initializeCooSysAndSeriesPlotter(
         xDiaProp->getPropertyValue( C2U( "SortByXValues" ) ) >>= bSortByXValues;
         xDiaProp->getPropertyValue( C2U( "ConnectBars" ) ) >>= bConnectBars;
         xDiaProp->getPropertyValue( C2U( "GroupBarsPerAxis" ) ) >>= bGroupBarsPerAxis;
+        xDiaProp->getPropertyValue( C2U( "IncludeHiddenCells" ) ) >>= bIncludeHiddenCells;
         xDiaProp->getPropertyValue( C2U( "StartingAngle" ) ) >>= nStartingAngle;
     }
     catch( const uno::Exception & ex )
@@ -653,6 +655,7 @@ void SeriesPlotterContainer::initializeCooSysAndSeriesPlotter(
     {
         uno::Reference< XCoordinateSystem > xCooSys( aCooSysList[nCS] );
         VCoordinateSystem* pVCooSys = addCooSysToList(m_rVCooSysList,xCooSys,xChartModel);
+        pVCooSys->setIncludeHiddenCells(bIncludeHiddenCells);
 
         //iterate through all chart types in the current coordinate system
         uno::Reference< XChartTypeContainer > xChartTypeContainer( xCooSys, uno::UNO_QUERY );
@@ -692,7 +695,7 @@ void SeriesPlotterContainer::initializeCooSysAndSeriesPlotter(
                 uno::Reference< XDataSeries > xDataSeries( aSeriesList[nS], uno::UNO_QUERY );
 		        if(!xDataSeries.is())
 			        continue;
-		        VDataSeries* pSeries = new VDataSeries( xDataSeries );
+		        VDataSeries* pSeries = new VDataSeries( xDataSeries, bIncludeHiddenCells );
 
                 pSeries->setGlobalSeriesIndex(nGlobalSeriesIndex);
                 nGlobalSeriesIndex++;
diff --git chart2/source/view/main/VDataSeries.cxx chart2/source/view/main/VDataSeries.cxx
index fdee8d7..c558a00 100644
--- chart2/source/view/main/VDataSeries.cxx
+++ chart2/source/view/main/VDataSeries.cxx
@@ -37,6 +37,7 @@
 #include "LabelPositionHelper.hxx"
 #include "ChartTypeHelper.hxx"
 #include "ContainerHelper.hxx"
+#include "DataSeriesHelper.hxx"
 #include "MeanValueRegressionCurveCalculator.hxx"
 
 #include <com/sun/star/chart2/Symbol.hpp>
@@ -70,50 +71,13 @@ namespace
             return ( first < second );
         }
     };
-
-    void lcl_removeIndices( uno::Sequence< double >& rValues, const uno::Sequence< sal_Int32 >& rIndicesToRemove )
-    {
-        if( !rIndicesToRemove.getLength() )
-            return;
-
-        ::std::vector< sal_Int32 > aIndicesToRemove( ContainerHelper::SequenceToVector( rIndicesToRemove) );
-        ::std::sort( aIndicesToRemove.begin(), aIndicesToRemove.end(), lcl_LessIndex() );
-        
-        sal_Int32 nTarget=0;
-        sal_Int32 nR = 0;
-        sal_Int32 nRemove = aIndicesToRemove[nR];
-        for( sal_Int32 nSource=0; nSource<rValues.getLength(); nSource++ )
-        {
-            if( nSource<nRemove || nRemove==-1 )
-            {
-                if( nTarget < nSource )
-                    rValues[nTarget]=rValues[nSource];
-                nTarget++;
-                continue;
-            }
-            if( nSource==nRemove )
-            {
-                ++nR;
-                if( nR<static_cast<sal_Int32>(aIndicesToRemove.size()) )
-                    nRemove = aIndicesToRemove[nR];
-                else
-                    nRemove = -1;
-            }
-        }
-
-        if( nTarget>0 )
-            rValues.realloc( nTarget );
-        else
-            rValues.realloc(0);
-    }
 }
 
-void VDataSequence::init( const uno::Reference< data::XDataSequence >& xModel )
+void VDataSequence::init( const uno::Reference< data::XDataSequence >& xModel, bool bIncludeHiddenCells )
 {
-    bool bDisplayHiddenCells = true; //todo: make this configurable in future
     bool bIsHidden = false;
     uno::Sequence< sal_Int32 > aHiddenValues;
-    if( !bDisplayHiddenCells )
+    if( !bIncludeHiddenCells )
     {
         uno::Reference<beans::XPropertySet> xProp(xModel, uno::UNO_QUERY );
         if( xProp.is())
@@ -131,15 +95,15 @@ void VDataSequence::init( const uno::Reference< data::XDataSequence >& xModel )
     }
 
     Model = xModel;
-    if( bDisplayHiddenCells || !bIsHidden )
+    if( bIncludeHiddenCells || !bIsHidden )
         Doubles = DataSequenceToDoubleSequence( xModel );
 
-    if( !bDisplayHiddenCells )
+    if( !bIncludeHiddenCells )
     {
         if( bIsHidden )
             Doubles.realloc(0);
         else if( aHiddenValues.getLength() )
-            lcl_removeIndices( Doubles, aHiddenValues );
+            DataSeriesHelper::removeHiddenDataPoints(Doubles, aHiddenValues);
     }
 }
 
@@ -205,7 +169,7 @@ VDataSeries::VDataSeries()
     DBG_ERROR("not implemented");
 }
 
-VDataSeries::VDataSeries( const uno::Reference< XDataSeries >& xDataSeries )
+VDataSeries::VDataSeries( const uno::Reference< XDataSeries >& xDataSeries, bool bIncludeHiddenCells )
     : m_nPolygonIndex(0)
     , m_fLogicMinX(0.0)
     , m_fLogicMaxX(0.0)
@@ -235,6 +199,7 @@ VDataSeries::VDataSeries( const uno::Reference< XDataSeries >& xDataSeries )
     , m_nAxisIndex(0)
     , m_bConnectBars(sal_False)
     , m_bGroupBarsPerAxis(sal_True)
+    , m_bIncludeHiddenCells(bIncludeHiddenCells)
     , m_nStartingAngle(90)
 
     , m_aSeriesParticle()
@@ -278,17 +243,17 @@ VDataSeries::VDataSeries( const uno::Reference< XDataSeries >& xDataSeries )
                 aARole >>= aRole;
 
                 if( aRole.equals(C2U("values-x")) )
-                    m_aValues_X.init( xDataSequence );
+                    m_aValues_X.init( xDataSequence, bIncludeHiddenCells );
                 else if( aRole.equals(C2U("values-y")) )
-                    m_aValues_Y.init( xDataSequence );
+                    m_aValues_Y.init( xDataSequence, bIncludeHiddenCells );
                 else if( aRole.equals(C2U("values-min")) )
-                    m_aValues_Y_Min.init( xDataSequence );
+                    m_aValues_Y_Min.init( xDataSequence, bIncludeHiddenCells );
                 else if( aRole.equals(C2U("values-max")) )
-                    m_aValues_Y_Max.init( xDataSequence );
+                    m_aValues_Y_Max.init( xDataSequence, bIncludeHiddenCells );
                 else if( aRole.equals(C2U("values-first")) )
-                    m_aValues_Y_First.init( xDataSequence );
+                    m_aValues_Y_First.init( xDataSequence, bIncludeHiddenCells );
                 else if( aRole.equals(C2U("values-last")) )
-                    m_aValues_Y_Last.init( xDataSequence );
+                    m_aValues_Y_Last.init( xDataSequence, bIncludeHiddenCells );
                 //@todo assign the other roles (+ error for unknown?)
             }
             catch( uno::Exception& e )
@@ -483,6 +448,16 @@ sal_Bool VDataSeries::getGroupBarsPerAxis() const
     return m_bGroupBarsPerAxis;
 }
 
+void VDataSeries::setIncludeHiddenCells( sal_Bool bIncludeHiddenCells )
+{
+    m_bIncludeHiddenCells = bIncludeHiddenCells;
+}
+
+sal_Bool VDataSeries::getIncludeHiddenCells() const
+{
+    return m_bIncludeHiddenCells;
+}
+
 void VDataSeries::setStartingAngle( sal_Int32 nStartingAngle )
 {
     m_nStartingAngle = nStartingAngle;
