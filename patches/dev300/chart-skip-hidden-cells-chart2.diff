diff --git chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx
index 439a2b5..c47486c 100644
--- chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx
+++ chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx
@@ -112,6 +112,7 @@ enum
     PROP_DIAGRAM_DATAROW_SOURCE,
 
     PROP_DIAGRAM_GROUP_BARS_PER_AXIS,
+    PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS,
 
     PROP_DIAGRAM_SORT_BY_X_VALUES,
 
@@ -233,6 +234,13 @@ void lcl_AddPropertiesToVector(
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
 
+    rOutProperties.push_back(
+        Property( C2U( "IncludeHiddenCells" ),
+                  PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+
     //new for XY charts
     rOutProperties.push_back(
         Property( C2U( "SortByXValues" ),
@@ -1970,6 +1978,44 @@ Any WrappedAutomaticSizeProperty::getPropertyDefault( const Reference< beans::XP
 //-----------------------------------------------------------------------------------------------------------------
 //-----------------------------------------------------------------------------------------------------------------
 
+//PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS
+class WrappedIncludeHiddenCellsProperty : public WrappedProperty
+{
+public:
+    WrappedIncludeHiddenCellsProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );
+    virtual ~WrappedIncludeHiddenCellsProperty();
+
+    virtual void setPropertyValue( const ::com::sun::star::uno::Any& rOuterValue, const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& xInnerPropertySet ) const
+                        throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::beans::PropertyVetoException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException);
+
+private: //member
+    ::boost::shared_ptr< Chart2ModelContact >   m_spChart2ModelContact;
+};
+
+WrappedIncludeHiddenCellsProperty::WrappedIncludeHiddenCellsProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+            : WrappedProperty(C2U("IncludeHiddenCells"),C2U("IncludeHiddenCells"))
+            , m_spChart2ModelContact( spChart2ModelContact )
+{
+}
+
+WrappedIncludeHiddenCellsProperty::~WrappedIncludeHiddenCellsProperty()
+{
+}
+
+void WrappedIncludeHiddenCellsProperty::setPropertyValue( const Any& rOuterValue, const Reference< beans::XPropertySet >& /*xInnerPropertySet*/ ) const
+                throw (beans::UnknownPropertyException, beans::PropertyVetoException, lang::IllegalArgumentException, lang::WrappedTargetException, uno::RuntimeException)
+{
+    sal_Bool bNewValue = false;
+    if( ! (rOuterValue >>= bNewValue) )
+        throw lang::IllegalArgumentException( C2U("Property Dim3D requires boolean value"), 0, 0 );
+
+    ChartModelHelper::setIncludeHiddenCells( bNewValue, m_spChart2ModelContact->getChartModel() );
+}
+
+//-----------------------------------------------------------------------------------------------------------------
+//-----------------------------------------------------------------------------------------------------------------
+//-----------------------------------------------------------------------------------------------------------------
+
 // ____ XDiagramProvider ____
 Reference< chart2::XDiagram > SAL_CALL DiagramWrapper::getDiagram()
     throw (uno::RuntimeException)
@@ -2025,6 +2071,8 @@ const std::vector< WrappedProperty* > DiagramWrapper::createWrappedProperties()
     aWrappedProperties.push_back( new WrappedProperty( C2U( "StackedBarsConnected" ), C2U( "ConnectBars" ) ) );
     aWrappedProperties.push_back( new WrappedSolidTypeProperty( m_spChart2ModelContact ) );
     aWrappedProperties.push_back( new WrappedAutomaticSizeProperty() );
+    aWrappedProperties.push_back( new WrappedIncludeHiddenCellsProperty( m_spChart2ModelContact ) );
+
     return aWrappedProperties;
 }
 
diff --git chart2/source/controller/dialogs/TabPages.hrc chart2/source/controller/dialogs/TabPages.hrc
index a9fb1ab..fb58fd4 100644
--- chart2/source/controller/dialogs/TabPages.hrc
+++ chart2/source/controller/dialogs/TabPages.hrc
@@ -83,22 +83,6 @@
 #define CTL_BITMAP_PREVIEW          6
 */
 
-//#define TP_OPTIONS                 908
-#define GRP_OPT_AXIS				1
-#define RBT_OPT_AXIS_1				2
-#define RBT_OPT_AXIS_2				3
-#define MT_GAP						4
-#define MT_OVERLAP					5
-#define FT_GAP						6
-#define FT_OVERLAP					7
-#define GB_BAR						8
-#define CB_CONNECTOR				9
-#define CB_BARS_SIDE_BY_SIDE       10
-#define FL_PLOT_MISSING_VALUES     11
-#define RB_DONT_PAINT              12
-#define RB_ASSUME_ZERO             13
-#define RB_CONTINUE_LINE           14
-
 //------------
 //from old chart tplabel.hrc
 
diff --git chart2/source/controller/dialogs/tp_PolarOptions.cxx chart2/source/controller/dialogs/tp_PolarOptions.cxx
index 56b6907..ddd6904 100644
--- chart2/source/controller/dialogs/tp_PolarOptions.cxx
+++ chart2/source/controller/dialogs/tp_PolarOptions.cxx
@@ -32,7 +32,6 @@
 #include "tp_PolarOptions.hxx"
 #include "tp_PolarOptions.hrc"
 #include "ResId.hxx"
-#include "TabPages.hrc"
 #include "chartview/ChartSfxItemIds.hxx"
 #include "NoWarningThisInCTOR.hxx"
 
@@ -51,7 +50,9 @@ PolarOptionsTabPage::PolarOptionsTabPage( Window* pWindow,const SfxItemSet& rInA
     m_aFL_StartingAngle( this, SchResId( FL_STARTING_ANGLE ) ),
     m_aAngleDial( this, SchResId( CT_ANGLE_DIAL ) ),
     m_aFT_Degrees( this, SchResId( FT_ROTATION_DEGREES ) ),
-    m_aNF_StartingAngle( this, SchResId( NF_STARTING_ANGLE ) )
+    m_aNF_StartingAngle( this, SchResId( NF_STARTING_ANGLE ) ),
+    m_aFL_PlotOptions( this, SchResId( FL_PLOT_OPTIONS_POLAR ) ),
+    m_aCB_IncludeHiddenCells( this, SchResId( CB_INCLUDE_HIDDEN_CELLS_POLAR ) )
 {
     FreeResource();
 
@@ -78,6 +79,9 @@ BOOL PolarOptionsTabPage::FillItemSet( SfxItemSet& rOutAttrs )
     if( m_aCB_Clockwise.IsVisible() )
         rOutAttrs.Put(SfxInt32Item(SCHATTR_CLOCKWISE,m_aCB_Clockwise.IsChecked()));
 
+    if (m_aCB_IncludeHiddenCells.IsVisible())
+        rOutAttrs.Put(SfxBoolItem(SCHATTR_INCLUDE_HIDDEN_CELLS, m_aCB_IncludeHiddenCells.IsChecked()));
+
     return TRUE;
 }
 
@@ -108,6 +112,16 @@ void PolarOptionsTabPage::Reset(const SfxItemSet& rInAttrs)
     {
         m_aCB_Clockwise.Show(FALSE);
     }
+    if (rInAttrs.GetItemState(SCHATTR_INCLUDE_HIDDEN_CELLS, TRUE, &pPoolItem) == SFX_ITEM_SET)
+    {
+        bool bVal = static_cast<const SfxBoolItem*>(pPoolItem)->GetValue();
+        m_aCB_IncludeHiddenCells.Check(bVal);
+    }
+    else
+    {
+        m_aCB_IncludeHiddenCells.Show(FALSE);
+        m_aFL_PlotOptions.Show(FALSE);
+    }
 }
 
 //.............................................................................
Index: source/controller/dialogs/tp_SeriesToAxis.hrc
===================================================================
--- chart2/source/controller/dialogs/tp_SeriesToAxis.hrc	(.../tags/DEV300_m38/chart2)	(revision 0)
+++ chart2/source/controller/dialogs/tp_SeriesToAxis.hrc	(.../cws/koheichart01/chart2)	(revision 268777)
@@ -0,0 +1,48 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: ,v $
+ * $Revision: $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#include "ResourceIds.hrc"
+
+#define GRP_OPT_AXIS				1
+#define RBT_OPT_AXIS_1				2
+#define RBT_OPT_AXIS_2				3
+#define MT_GAP						4
+#define MT_OVERLAP					5
+#define FT_GAP						6
+#define FT_OVERLAP					7
+#define GB_BAR						8
+#define CB_CONNECTOR				9
+#define CB_BARS_SIDE_BY_SIDE       10
+#define FL_PLOT_OPTIONS            11
+#define FT_MISSING_VALUES          12
+#define RB_DONT_PAINT              13
+#define RB_ASSUME_ZERO             14
+#define RB_CONTINUE_LINE           15
+#define CB_INCLUDE_HIDDEN_CELLS    16
diff --git chart2/source/controller/dialogs/tp_PolarOptions.hrc chart2/source/controller/dialogs/tp_PolarOptions.hrc
index 722155b..b275a72 100644
--- chart2/source/controller/dialogs/tp_PolarOptions.hrc
+++ chart2/source/controller/dialogs/tp_PolarOptions.hrc
@@ -28,9 +28,13 @@
  *
  ************************************************************************/
 
+#include "ResourceIds.hrc"
+
 #define CB_CLOCKWISE 1
+#define CB_INCLUDE_HIDDEN_CELLS_POLAR 2
 
 #define FL_STARTING_ANGLE 1
+#define FL_PLOT_OPTIONS_POLAR 2
 
 #define CT_ANGLE_DIAL 1
 
diff --git chart2/source/controller/dialogs/tp_PolarOptions.hxx chart2/source/controller/dialogs/tp_PolarOptions.hxx
index cd1f8e5..77f7a2e 100644
--- chart2/source/controller/dialogs/tp_PolarOptions.hxx
+++ chart2/source/controller/dialogs/tp_PolarOptions.hxx
@@ -58,6 +58,9 @@ private:
     svx::DialControl m_aAngleDial;
     FixedText        m_aFT_Degrees;
     NumericField     m_aNF_StartingAngle;
+
+    FixedLine        m_aFL_PlotOptions;
+    CheckBox         m_aCB_IncludeHiddenCells;
 };
 
 //.............................................................................
diff --git chart2/source/controller/dialogs/tp_PolarOptions.src chart2/source/controller/dialogs/tp_PolarOptions.src
index b01ba74..049dfee 100644
--- chart2/source/controller/dialogs/tp_PolarOptions.src
+++ chart2/source/controller/dialogs/tp_PolarOptions.src
@@ -28,7 +28,6 @@
  *
  ************************************************************************/
 
-#include "TabPages.hrc"
 #include "tp_PolarOptions.hrc"
 #include "HelpIds.hrc"
 
@@ -47,8 +46,8 @@ TabPage TP_POLAROPTIONS
     };
     FixedLine FL_STARTING_ANGLE
     {
-        Pos = MAP_APPFONT ( 12 , 21  ) ;
-        Size = MAP_APPFONT ( 242 , 12 ) ;
+        Pos = MAP_APPFONT ( 6 , 21  ) ;
+        Size = MAP_APPFONT ( 248 , 12 ) ;
         Text [ en-US ] = "Starting angle" ;
     };
     Control CT_ANGLE_DIAL
@@ -75,4 +74,17 @@ TabPage TP_POLAROPTIONS
         Maximum = 359 ;
         SpinSize = 5 ;
     };
+    FixedLine FL_PLOT_OPTIONS_POLAR
+    {
+        Pos = MAP_APPFONT ( 6 , 90  ) ;
+        Size = MAP_APPFONT ( 248 , 8 ) ;
+        Text [ en-US ] = "Plot options";
+    };
+    CheckBox CB_INCLUDE_HIDDEN_CELLS_POLAR
+    {
+        Pos = MAP_APPFONT ( 12 , 104 ) ;
+        Size = MAP_APPFONT ( 200 , 10 ) ;
+        TabStop = TRUE ;
+        Text [ en-US ] = "Plot ~values from hidden cells";
+    };
 };
diff --git chart2/source/controller/dialogs/tp_SeriesToAxis.cxx chart2/source/controller/dialogs/tp_SeriesToAxis.cxx
index 9b11c6b..8b8a515 100644
--- chart2/source/controller/dialogs/tp_SeriesToAxis.cxx
+++ chart2/source/controller/dialogs/tp_SeriesToAxis.cxx
@@ -31,9 +31,9 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_chart2.hxx"
 #include "tp_SeriesToAxis.hxx"
+#include "tp_SeriesToAxis.hrc"
 
 #include "ResId.hxx"
-#include "TabPages.hrc"
 #include "chartview/ChartSfxItemIds.hxx"
 #include "NoWarningThisInCTOR.hxx"
 
@@ -43,6 +43,8 @@
 #include <svtools/intitem.hxx>
 //SfxIntegerListItem
 #include <svtools/ilstitem.hxx>
+#include <svtools/controldims.hrc>
+
 #include <com/sun/star/chart/MissingValueTreatment.hpp>
 
 //.............................................................................
@@ -63,10 +65,12 @@ SchOptionTabPage::SchOptionTabPage(Window* pWindow,const SfxItemSet& rInAttrs) :
 	aMTOverlap(this,SchResId(MT_OVERLAP)),
 	aCBConnect(this,SchResId(CB_CONNECTOR)),
     aCBAxisSideBySide(this,SchResId(CB_BARS_SIDE_BY_SIDE)),
-    m_aFL_EmptyCells(this,SchResId(FL_PLOT_MISSING_VALUES)),
+    m_aFL_PlotOptions(this,SchResId(FL_PLOT_OPTIONS)),
+    m_aFT_MissingValues(this,SchResId(FT_MISSING_VALUES)), 
     m_aRB_DontPaint(this,SchResId(RB_DONT_PAINT)),
     m_aRB_AssumeZero(this,SchResId(RB_ASSUME_ZERO)),
     m_aRB_ContinueLine(this,SchResId(RB_CONTINUE_LINE)),
+    m_aCBIncludeHiddenCells(this,SchResId(CB_INCLUDE_HIDDEN_CELLS)), 
     m_bProvidesSecondaryYAxis(true),
     m_bProvidesOverlapAndGapWidth(false)
 {
@@ -123,6 +127,9 @@ BOOL SchOptionTabPage::FillItemSet(SfxItemSet& rOutAttrs)
     else if(m_aRB_ContinueLine.IsChecked())
         rOutAttrs.Put(SfxInt32Item(SCHATTR_MISSING_VALUE_TREATMENT,::com::sun::star::chart::MissingValueTreatment::CONTINUE));
 
+    if (m_aCBIncludeHiddenCells.IsVisible())
+        rOutAttrs.Put(SfxBoolItem(SCHATTR_INCLUDE_HIDDEN_CELLS, m_aCBIncludeHiddenCells.IsChecked()));
+
 	return TRUE;
 }
 
@@ -212,13 +219,26 @@ void SchOptionTabPage::Reset(const SfxItemSet& rInAttrs)
         }
         else
         {
+            m_aFT_MissingValues.Show(FALSE);
             m_aRB_DontPaint.Show(FALSE);
             m_aRB_AssumeZero.Show(FALSE);
             m_aRB_ContinueLine.Show(FALSE);
-		    m_aFL_EmptyCells.Show(FALSE);
         }
     }
 
+    // Include hidden cells
+    if (rInAttrs.GetItemState(SCHATTR_INCLUDE_HIDDEN_CELLS, TRUE, &pPoolItem) == SFX_ITEM_SET)
+    {
+        bool bVal = static_cast<const SfxBoolItem*>(pPoolItem)->GetValue();
+        m_aCBIncludeHiddenCells.Check(bVal);
+    }
+    else
+    {
+        m_aCBIncludeHiddenCells.Show(FALSE);
+        if(!m_aFT_MissingValues.IsVisible())
+            m_aFL_PlotOptions.Show(FALSE);
+    }
+
     AdaptControlPositionsAndVisibility();
 }
 
@@ -231,6 +251,17 @@ void SchOptionTabPage::Init( bool bProvidesSecondaryYAxis, bool bProvidesOverlap
     AdaptControlPositionsAndVisibility();
 }
 
+void lcl_offsetControl(Control& rCtrl, long nXOffset, long nYOffset )
+{
+    Point aPos = rCtrl.GetPosPixel();
+    rCtrl.SetPosPixel( Point(aPos.getX() + nXOffset, aPos.getY() + nYOffset) );
+}
+
+void lcl_optimzeRadioButtonSize( RadioButton& rCtrl )
+{
+    rCtrl.SetSizePixel( rCtrl.CalcMinimumSize() );
+}
+
 void SchOptionTabPage::AdaptControlPositionsAndVisibility()
 {
     aRbtAxis1.Show(m_bProvidesSecondaryYAxis);
@@ -254,20 +285,30 @@ void SchOptionTabPage::AdaptControlPositionsAndVisibility()
 	    else
             aPos = aGrpBar.GetPosPixel();
 
-        long nDiffX = aRbtAxis1.GetPosPixel().getX() - aGrpAxis.GetPosPixel().getX();
-        long nDiffY = aRbtAxis1.GetPosPixel().getY() - aGrpAxis.GetPosPixel().getY();
-        long nDiffY1 = aRbtAxis2.GetPosPixel().getY() - aRbtAxis1.GetPosPixel().getY();
-
-        m_aFL_EmptyCells.SetPosPixel( aPos );
-        m_aRB_DontPaint.SetPosPixel( Point( aPos.getX() + nDiffX, aPos.getY() + nDiffY ) );
-        m_aRB_AssumeZero.SetPosPixel( Point( aPos.getX() + nDiffX, aPos.getY() + nDiffY + nDiffY1  ) );
-        m_aRB_ContinueLine.SetPosPixel( Point( aPos.getX() + nDiffX, aPos.getY() + nDiffY + nDiffY1 * 2 ) );
+        long nYOffset = aPos.getY() - m_aFL_PlotOptions.GetPosPixel().getY();
+        lcl_offsetControl(m_aFL_PlotOptions,       0, nYOffset);
+        lcl_offsetControl(m_aFT_MissingValues,     0, nYOffset);
+        lcl_offsetControl(m_aRB_DontPaint,         0, nYOffset);
+        lcl_offsetControl(m_aRB_AssumeZero,        0, nYOffset);
+        lcl_offsetControl(m_aRB_ContinueLine,      0, nYOffset);
+        lcl_offsetControl(m_aCBIncludeHiddenCells, 0, nYOffset);
     }
 
-    if( !m_aRB_DontPaint.IsVisible() )
+    m_aFT_MissingValues.SetSizePixel( m_aFT_MissingValues.CalcMinimumSize() );
+    lcl_optimzeRadioButtonSize( m_aRB_DontPaint );
+    lcl_optimzeRadioButtonSize( m_aRB_AssumeZero );
+    lcl_optimzeRadioButtonSize( m_aRB_ContinueLine );
+
+    Size aControlDistance( m_aFT_MissingValues.LogicToPixel( Size(RSC_SP_CTRL_DESC_X,RSC_SP_CTRL_GROUP_Y), MapMode(MAP_APPFONT) ) );
+    long nXOffset = m_aFT_MissingValues.GetPosPixel().getX() + m_aFT_MissingValues.GetSizePixel().getWidth() + aControlDistance.getWidth() - m_aRB_DontPaint.GetPosPixel().getX();
+    lcl_offsetControl(m_aRB_DontPaint,         nXOffset, 0);
+    lcl_offsetControl(m_aRB_AssumeZero,        nXOffset, 0);
+    lcl_offsetControl(m_aRB_ContinueLine,      nXOffset, 0);
+    
+    if( !m_aFT_MissingValues.IsVisible() )
     {
-        m_aRB_ContinueLine.SetPosPixel( m_aRB_AssumeZero.GetPosPixel() );
-        m_aRB_AssumeZero.SetPosPixel( m_aRB_DontPaint.GetPosPixel() );
+        //for example for stock charts
+        m_aCBIncludeHiddenCells.SetPosPixel( m_aFT_MissingValues.GetPosPixel() );
     }
 }
 //.............................................................................
diff --git chart2/source/controller/dialogs/tp_SeriesToAxis.hxx chart2/source/controller/dialogs/tp_SeriesToAxis.hxx
index af1f703..d6516a0 100644
--- chart2/source/controller/dialogs/tp_SeriesToAxis.hxx
+++ chart2/source/controller/dialogs/tp_SeriesToAxis.hxx
@@ -74,11 +74,14 @@ private: //member
     CheckBox	aCBConnect;
     CheckBox    aCBAxisSideBySide;
 
-    FixedLine   m_aFL_EmptyCells;
+    FixedLine   m_aFL_PlotOptions;
+    FixedText   m_aFT_MissingValues;
     RadioButton m_aRB_DontPaint;
     RadioButton m_aRB_AssumeZero;
     RadioButton m_aRB_ContinueLine;
 
+    CheckBox    m_aCBIncludeHiddenCells;
+
     DECL_LINK(EnableHdl, RadioButton * );
 
     sal_Int32   m_nAllSeriesAxisIndex;
diff --git chart2/source/controller/dialogs/tp_SeriesToAxis.src chart2/source/controller/dialogs/tp_SeriesToAxis.src
index 9729f8a..7eb712b 100644
--- chart2/source/controller/dialogs/tp_SeriesToAxis.src
+++ chart2/source/controller/dialogs/tp_SeriesToAxis.src
@@ -28,7 +28,7 @@
  *
  ************************************************************************/
 #include "HelpIds.hrc"
-#include "TabPages.hrc"
+#include "tp_SeriesToAxis.hrc"
 
 TabPage TP_OPTIONS
 {
@@ -120,7 +120,7 @@ TabPage TP_OPTIONS
         Pos = MAP_APPFONT ( 12 , 97 ) ;
 		Size = MAP_APPFONT ( 200 , 10 ) ;
 		TabStop = TRUE ;
-		Text [ en-US ] = "Connection Lines";
+        Text [ en-US ] = "Connection lines";
 	};
 
     CheckBox CB_BARS_SIDE_BY_SIDE
@@ -131,16 +131,23 @@ TabPage TP_OPTIONS
         Text [ en-US ] = "Show ~bars side by side";
     };
     
-    FixedLine FL_PLOT_MISSING_VALUES
+    FixedLine FL_PLOT_OPTIONS
     {
         Pos = MAP_APPFONT ( 6 , 113  ) ;
         Size = MAP_APPFONT ( 248 , 8 ) ;
+        Text [ en-US ] = "Plot options";
+    };
+
+    FixedText FT_MISSING_VALUES
+    {
+        Pos = MAP_APPFONT ( 12 , 127  ) ;
+        Size = MAP_APPFONT ( 80 , 8 ) ;
         Text [ en-US ] = "Plot missing values";
     };
     
     RadioButton RB_DONT_PAINT
     {
-        Pos = MAP_APPFONT ( 12 , 127  ) ;
+        Pos = MAP_APPFONT ( 82 , 127  ) ;
         Size = MAP_APPFONT ( 80 , 10 ) ;
         TabStop = TRUE ;
         Text [ en-US ] = "~Leave gap";  
@@ -148,7 +155,7 @@ TabPage TP_OPTIONS
     
     RadioButton RB_ASSUME_ZERO
     {
-        Pos = MAP_APPFONT ( 12 , 141  ) ;
+        Pos = MAP_APPFONT ( 82 , 141  ) ;
         Size = MAP_APPFONT ( 80 , 10 ) ;
         TabStop = TRUE ;
         Text [ en-US ] = "~Assume zero";  
@@ -156,9 +163,17 @@ TabPage TP_OPTIONS
     
     RadioButton RB_CONTINUE_LINE
     {
-        Pos = MAP_APPFONT ( 12 , 155  ) ;
+        Pos = MAP_APPFONT ( 82 , 155  ) ;
         Size = MAP_APPFONT ( 80 , 10 ) ;
         TabStop = TRUE ;
         Text [ en-US ] = "~Continue line";  
-    };  
+    };
+      
+    CheckBox CB_INCLUDE_HIDDEN_CELLS
+    {
+        Pos = MAP_APPFONT ( 12 , 172 ) ;
+        Size = MAP_APPFONT ( 200 , 10 ) ;
+        TabStop = TRUE ;
+        Text [ en-US ] = "Plot ~values from hidden cells";
+    };
 };
diff --git chart2/source/controller/inc/SeriesOptionsItemConverter.hxx chart2/source/controller/inc/SeriesOptionsItemConverter.hxx
index 5966449..1f5ddc3 100644
--- chart2/source/controller/inc/SeriesOptionsItemConverter.hxx
+++ chart2/source/controller/inc/SeriesOptionsItemConverter.hxx
@@ -93,6 +93,9 @@ private:
 
     ::com::sun::star::uno::Sequence< sal_Int32 > m_aSupportedMissingValueTreatments;
     sal_Int32 m_nMissingValueTreatment;
+
+    bool m_bSupportingPlottingOfHiddenCells;
+    bool m_bIncludeHiddenCells;
 };
 
 } //  namespace wrapper
diff --git chart2/source/controller/itemsetwrapper/SchWhichPairs.hxx chart2/source/controller/itemsetwrapper/SchWhichPairs.hxx
index 9b51d5d..d6215b2 100644
--- chart2/source/controller/itemsetwrapper/SchWhichPairs.hxx
+++ chart2/source/controller/itemsetwrapper/SchWhichPairs.hxx
@@ -163,7 +163,8 @@ const USHORT nDataPointWhichPairs[] =
     SCHATTR_STARTING_ANGLE,SCHATTR_STARTING_ANGLE, \
     SCHATTR_CLOCKWISE,SCHATTR_CLOCKWISE, \
     SCHATTR_MISSING_VALUE_TREATMENT,SCHATTR_MISSING_VALUE_TREATMENT, \
-    SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS,SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS
+    SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS,SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS, \
+    SCHATTR_INCLUDE_HIDDEN_CELLS,SCHATTR_INCLUDE_HIDDEN_CELLS
 
 const USHORT nSeriesOptionsWhichPairs[] =
 {
diff --git chart2/source/controller/itemsetwrapper/SeriesOptionsItemConverter.cxx chart2/source/controller/itemsetwrapper/SeriesOptionsItemConverter.cxx
index eae94e8..ad2aca8 100644
--- chart2/source/controller/itemsetwrapper/SeriesOptionsItemConverter.cxx
+++ chart2/source/controller/itemsetwrapper/SeriesOptionsItemConverter.cxx
@@ -93,6 +93,8 @@ SeriesOptionsItemConverter::SeriesOptionsItemConverter(
         , m_bClockwise(false)
         , m_aSupportedMissingValueTreatments()
         , m_nMissingValueTreatment(0)
+        , m_bSupportingPlottingOfHiddenCells(false)
+        , m_bIncludeHiddenCells(true)
 {
     try
     {
@@ -159,6 +161,23 @@ SeriesOptionsItemConverter::SeriesOptionsItemConverter(
         m_aSupportedMissingValueTreatments = ChartTypeHelper::getSupportedMissingValueTreatments( xChartType );
         m_nMissingValueTreatment = DiagramHelper::getCorrectedMissingValueTreatment(
             ChartModelHelper::findDiagram(m_xChartModel), xChartType );
+
+        uno::Reference< XChartDocument > xChartDoc( m_xChartModel, uno::UNO_QUERY );
+        uno::Reference< beans::XPropertySet > xProp( xChartDoc->getDataProvider(), uno::UNO_QUERY );
+        if( xProp.is() )
+        {
+            try
+            {
+                //test whether the data provider offers this property
+                xProp->getPropertyValue(C2U("IncludeHiddenCells"));
+                //if not exception is thrown the property is offered
+                m_bSupportingPlottingOfHiddenCells = true;
+                xDiagramProperties->getPropertyValue( C2U("IncludeHiddenCells") ) >>= m_bIncludeHiddenCells;
+            }
+            catch( const beans::UnknownPropertyException& )
+            {
+            }
+        }
     }
     catch( uno::Exception ex )
     {
@@ -341,6 +360,16 @@ bool SeriesOptionsItemConverter::ApplySpecialItem( USHORT nWhichId, const SfxIte
             }
         }
         break;
+        case SCHATTR_INCLUDE_HIDDEN_CELLS:
+        {
+            if( m_bSupportingPlottingOfHiddenCells )
+            {
+                bool bIncludeHiddenCells = static_cast<const SfxBoolItem &>(rItemSet.Get(nWhichId)).GetValue();
+                if (bIncludeHiddenCells != m_bIncludeHiddenCells)
+                    bChanged = ChartModelHelper::setIncludeHiddenCells( bIncludeHiddenCells, m_xChartModel );
+            }
+        }
+        break;
     }
     return bChanged;
 }
@@ -412,6 +441,12 @@ void SeriesOptionsItemConverter::FillSpecialItem(
             rOutItemSet.Put( SfxIntegerListItem( nWhichId, aList ) );
             break;
         }
+        case SCHATTR_INCLUDE_HIDDEN_CELLS:
+        {
+            if( m_bSupportingPlottingOfHiddenCells )
+                rOutItemSet.Put( SfxBoolItem(nWhichId, m_bIncludeHiddenCells) );
+            break;
+        }
         default:
             break;
    }
diff --git chart2/source/inc/ChartModelHelper.hxx chart2/source/inc/ChartModelHelper.hxx
index fa1dbbe..8b49b08 100644
--- chart2/source/inc/ChartModelHelper.hxx
+++ chart2/source/inc/ChartModelHelper.hxx
@@ -87,6 +87,12 @@ public:
 
     static void triggerRangeHighlighting( const ::com::sun::star::uno::Reference<
                                 ::com::sun::star::frame::XModel >& xModel );
+
+    static bool isIncludeHiddenCells( const ::com::sun::star::uno::Reference<
+                                ::com::sun::star::frame::XModel >& xChartModel );
+
+    static bool setIncludeHiddenCells( bool bIncludeHiddenCells, const ::com::sun::star::uno::Reference<
+                                ::com::sun::star::frame::XModel >& xChartModel );
 };
 
 //.............................................................................
diff --git chart2/source/inc/DataSeriesHelper.hxx chart2/source/inc/DataSeriesHelper.hxx
index 699c51c..0f3a187 100644
--- chart2/source/inc/DataSeriesHelper.hxx
+++ chart2/source/inc/DataSeriesHelper.hxx
@@ -42,6 +42,7 @@
 
 #include <vector>
 #include <functional>
+#include <hash_set>
 
 namespace chart
 {
@@ -180,6 +181,12 @@ OOO_DLLPUBLIC_CHARTTOOLS bool areAllSeriesAttachedToSameAxis(
         const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartType >& xChartType,
         sal_Int32 & rOutAxisIndex );
 
+OOO_DLLPUBLIC_CHARTTOOLS bool hasUnhiddenData( const ::com::sun::star::uno::Reference<
+        ::com::sun::star::chart2::XDataSeries >& xSeries );
+
+sal_Int32 translateIndexFromHiddenToFullSequence( sal_Int32 nClippedIndex, const ::com::sun::star::uno::Reference<
+        ::com::sun::star::chart2::data::XDataSequence >& xDataSequence, bool bTranslate );
+
 } //  namespace DataSeriesHelper
 } //  namespace chart
 
diff --git chart2/source/inc/RangeHighlighter.hxx chart2/source/inc/RangeHighlighter.hxx
index 1f0f08a..c0b5cc9 100644
--- chart2/source/inc/RangeHighlighter.hxx
+++ chart2/source/inc/RangeHighlighter.hxx
@@ -111,6 +111,7 @@ private:
     ::com::sun::star::uno::Sequence< ::com::sun::star::chart2::data::HighlightedRange >
         m_aSelectedRanges;
     sal_Int32 m_nAddedListenerCount;
+    bool m_bIncludeHiddenCells;
 };
 
 } //  namespace chart
diff --git chart2/source/inc/chartview/ChartSfxItemIds.hxx chart2/source/inc/chartview/ChartSfxItemIds.hxx
index 52e47c0..067389e 100644
--- chart2/source/inc/chartview/ChartSfxItemIds.hxx
+++ chart2/source/inc/chartview/ChartSfxItemIds.hxx
@@ -209,8 +209,9 @@
 #define SCHATTR_CLOCKWISE               (SCHATTR_CHARTTYPE_START + 10)
 #define SCHATTR_MISSING_VALUE_TREATMENT     (SCHATTR_CHARTTYPE_START + 11)
 #define SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS (SCHATTR_CHARTTYPE_START + 12)
+#define SCHATTR_INCLUDE_HIDDEN_CELLS    (SCHATTR_CHARTTYPE_START + 13)
 
-#define SCHATTR_CHARTTYPE_END           SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS
+#define SCHATTR_CHARTTYPE_END           SCHATTR_INCLUDE_HIDDEN_CELLS
 
 // items for transporting information to dialogs
 #define SCHATTR_MISC_START              (SCHATTR_CHARTTYPE_END + 1)
diff --git chart2/source/model/main/ChartModel.cxx chart2/source/model/main/ChartModel.cxx
index b190368..31ef4cf 100644
--- chart2/source/model/main/ChartModel.cxx
+++ chart2/source/model/main/ChartModel.cxx
@@ -43,6 +43,8 @@
 #include "DisposeHelper.hxx"
 #include "ControllerLockGuard.hxx"
 #include "ObjectIdentifier.hxx"
+#include "ChartModelHelper.hxx"
+
 #include <comphelper/InlineContainer.hxx>
 #include <comphelper/processfactory.hxx>
 
@@ -703,6 +705,19 @@ sal_Bool SAL_CALL ChartModel::hasInternalDataProvider()
     {
         // /--
         MutexGuard aGuard( m_aModelMutex );
+        uno::Reference< beans::XPropertySet > xProp( xProvider, uno::UNO_QUERY );
+        if( xProp.is() )
+        {
+            try
+            {
+                sal_Bool bIncludeHiddenCells = ChartModelHelper::isIncludeHiddenCells( Reference< frame::XModel >(this) );
+                xProp->setPropertyValue(C2U("IncludeHiddenCells"), uno::makeAny(bIncludeHiddenCells));
+            }
+            catch( const beans::UnknownPropertyException& )
+            {
+            }
+        }
+
         m_pImplChartModel->SetDataProvider( xProvider );
         // \--
     }
diff --git chart2/source/model/main/Diagram.cxx chart2/source/model/main/Diagram.cxx
index 02bf2b7..308ed19 100644
--- chart2/source/model/main/Diagram.cxx
+++ chart2/source/model/main/Diagram.cxx
@@ -78,6 +78,7 @@ enum
     PROP_DIAGRAM_SORT_BY_X_VALUES,
     PROP_DIAGRAM_CONNECT_BARS,
     PROP_DIAGRAM_GROUP_BARS_PER_AXIS,
+    PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS,
     PROP_DIAGRAM_STARTING_ANGLE,
     PROP_DIAGRAM_RIGHT_ANGLED_AXES,
     PROP_DIAGRAM_PERSPECTIVE,
@@ -125,6 +126,13 @@ void lcl_AddPropertiesToVector(
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
 
     rOutProperties.push_back(
+        Property( C2U("IncludeHiddenCells"),
+                  PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+
+    rOutProperties.push_back(
         Property( C2U( "StartingAngle" ),
                   PROP_DIAGRAM_STARTING_ANGLE,
                   ::getCppuType( reinterpret_cast< const sal_Int32 * >(0) ),
@@ -170,6 +178,7 @@ void lcl_AddDefaultsToMap(
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_SORT_BY_X_VALUES, false );
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_CONNECT_BARS, false );
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_GROUP_BARS_PER_AXIS, true );
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_INCLUDE_HIDDEN_CELLS, true );
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_DIAGRAM_RIGHT_ANGLED_AXES, false );
     ::chart::PropertyHelper::setPropertyValueDefault< sal_Int32 >( rOutMap, PROP_DIAGRAM_STARTING_ANGLE, 90 );
 }
diff --git chart2/source/tools/ChartModelHelper.cxx chart2/source/tools/ChartModelHelper.cxx
index 37e94a6..ce717eb 100644
--- chart2/source/tools/ChartModelHelper.cxx
+++ chart2/source/tools/ChartModelHelper.cxx
@@ -33,6 +33,9 @@
 #include "ChartModelHelper.hxx"
 #include "macros.hxx"
 #include "DiagramHelper.hxx"
+#include "DataSourceHelper.hxx"
+#include "ControllerLockGuard.hxx"
+
 #include <com/sun/star/chart2/data/XDataReceiver.hpp>
 #include <com/sun/star/chart2/XChartDocument.hpp>
 #include <com/sun/star/chart2/XChartTypeContainer.hpp>
@@ -137,6 +140,95 @@ void ChartModelHelper::triggerRangeHighlighting( const uno::Reference< frame::XM
     }
 }
 
+bool ChartModelHelper::isIncludeHiddenCells( const uno::Reference< frame::XModel >& xChartModel )
+{
+    bool bIncluded = true;  // hidden cells are included by default.
+
+    uno::Reference< chart2::XDiagram > xDiagram( ChartModelHelper::findDiagram(xChartModel) );
+    if (!xDiagram.is())
+        return bIncluded;
+
+    uno::Reference< beans::XPropertySet > xProp( xDiagram, uno::UNO_QUERY );
+    if (!xProp.is())
+        return bIncluded;
+
+    try
+    {
+        xProp->getPropertyValue(C2U("IncludeHiddenCells")) >>= bIncluded;
+    }
+    catch( const beans::UnknownPropertyException& )
+    {
+    }
+
+    return bIncluded;
+}
+
+bool ChartModelHelper::setIncludeHiddenCells( bool bIncludeHiddenCells, const uno::Reference< frame::XModel >& xChartModel )
+{
+    bool bChanged = false;
+    try
+    {
+        ControllerLockGuard aLockedControllers( xChartModel );
+
+        uno::Reference< beans::XPropertySet > xDiagramProperties( ChartModelHelper::findDiagram(xChartModel), uno::UNO_QUERY );
+        if (xDiagramProperties.is())
+        {
+            bool bOldValue = bIncludeHiddenCells;
+            xDiagramProperties->getPropertyValue( C2U("IncludeHiddenCells") ) >>= bOldValue;
+            if( bOldValue == bIncludeHiddenCells )
+                return bChanged;
+
+            uno::Any aNewValue = uno::makeAny(bIncludeHiddenCells);
+
+            try
+            {
+                uno::Reference< chart2::XChartDocument > xChartDoc( xChartModel, uno::UNO_QUERY );
+                if( xChartDoc.is() )
+                {
+                    uno::Reference< beans::XPropertySet > xDataProviderProperties( xChartDoc->getDataProvider(), uno::UNO_QUERY );
+                    if( xDataProviderProperties.is() )
+                        xDataProviderProperties->setPropertyValue(C2U("IncludeHiddenCells"), aNewValue );
+                }
+            }
+            catch( const beans::UnknownPropertyException& )
+            {
+                //the property is optional!
+            }
+
+            try
+            {
+                uno::Reference< chart2::data::XDataSource > xUsedData( DataSourceHelper::getUsedData( xChartModel ) );
+                if( xUsedData.is() )
+                {
+                    uno::Reference< beans::XPropertySet > xProp;
+                    uno::Sequence< uno::Reference< chart2::data::XLabeledDataSequence > > aData( xUsedData->getDataSequences());
+                    for( sal_Int32 i=0; i<aData.getLength(); ++i )
+                    {
+                        xProp.set( uno::Reference< beans::XPropertySet >( aData[i]->getValues(), uno::UNO_QUERY ) );
+                        if(xProp.is())
+                            xProp->setPropertyValue(C2U("IncludeHiddenCells"), aNewValue );
+                        xProp.set( uno::Reference< beans::XPropertySet >( aData[i]->getLabel(), uno::UNO_QUERY ) );
+                        if(xProp.is())
+                            xProp->setPropertyValue(C2U("IncludeHiddenCells"), aNewValue );
+                    }
+                }
+            }
+            catch( const beans::UnknownPropertyException& )
+            {
+                //the property is optional!
+            }
+            
+            xDiagramProperties->setPropertyValue( C2U("IncludeHiddenCells"), aNewValue);
+            bChanged = true;
+        }
+    }
+    catch (uno::Exception& e)
+    {
+        ASSERT_EXCEPTION(e);
+    }
+    return bChanged;
+}
+
 //.............................................................................
 } //namespace chart
 //.............................................................................
diff --git chart2/source/tools/DataSeriesHelper.cxx chart2/source/tools/DataSeriesHelper.cxx
index daba96d..900b4d8 100644
--- chart2/source/tools/DataSeriesHelper.cxx
+++ chart2/source/tools/DataSeriesHelper.cxx
@@ -644,5 +644,97 @@ bool areAllSeriesAttachedToSameAxis( const uno::Reference< chart2::XChartType >&
     }
 }
 
+namespace
+{
+
+bool lcl_SequenceHasUnhiddenData( const uno::Reference< chart2::data::XDataSequence >& xDataSequence )
+{
+    if( !xDataSequence.is() )
+        return false;
+    uno::Reference< beans::XPropertySet > xProp( xDataSequence, uno::UNO_QUERY );
+    if( xProp.is() )
+    {
+        bool bIsHidden = false;
+        uno::Sequence< sal_Int32 > aHiddenValues;
+        try
+        {
+            xProp->getPropertyValue( C2U( "IsHidden" ) ) >>= bIsHidden;
+            xProp->getPropertyValue( C2U( "HiddenValues" ) ) >>= aHiddenValues;
+            if( !aHiddenValues.getLength() && !bIsHidden )
+                return true;
+        }
+        catch( uno::Exception& e )
+        {
+            (void)e; // avoid warning
+            return true;
+        }
+    }
+    if( xDataSequence->getData().getLength() )
+        return true;
+    return false;
+}
+
+}
+
+bool hasUnhiddenData( const uno::Reference< chart2::XDataSeries >& xSeries )
+{
+    uno::Reference< chart2::data::XDataSource > xDataSource =
+        uno::Reference< chart2::data::XDataSource >( xSeries, uno::UNO_QUERY );
+
+    uno::Sequence< uno::Reference< chart2::data::XLabeledDataSequence > > aDataSequences = xDataSource->getDataSequences();
+
+    for(sal_Int32 nN = aDataSequences.getLength();nN--;)
+    {
+        if( !aDataSequences[nN].is() )
+            continue;
+        if( lcl_SequenceHasUnhiddenData( aDataSequences[nN]->getValues() ) )
+            return true;
+        if( lcl_SequenceHasUnhiddenData( aDataSequences[nN]->getLabel() ) )
+            return true;
+    }
+    return false;
+}
+
+struct lcl_LessIndex
+{
+    inline bool operator() ( const sal_Int32& first, const sal_Int32& second )
+    {
+        return ( first < second );
+    }
+};
+
+sal_Int32 translateIndexFromHiddenToFullSequence( sal_Int32 nIndex, const Reference< chart2::data::XDataSequence >& xDataSequence, bool bTranslate )
+{
+    if( !bTranslate )
+        return nIndex;
+
+    try
+    {
+        uno::Reference<beans::XPropertySet> xProp( xDataSequence, uno::UNO_QUERY );
+	    if( xProp.is())
+        {
+            Sequence<sal_Int32> aHiddenIndicesSeq;
+            xProp->getPropertyValue( C2U("HiddenValues") ) >>= aHiddenIndicesSeq;
+            if( aHiddenIndicesSeq.getLength() )
+            {
+                ::std::vector< sal_Int32 > aHiddenIndices( ContainerHelper::SequenceToVector( aHiddenIndicesSeq ) );
+                ::std::sort( aHiddenIndices.begin(), aHiddenIndices.end(), lcl_LessIndex() );
+
+                for( sal_Int32 nN = 0; nN < aHiddenIndices.size(); ++nN)
+                {
+                    if( aHiddenIndices[nN] <= nIndex )
+                        nIndex += 1;
+                    else
+                        break;
+                }
+            }
+        }
+    }
+    catch (const beans::UnknownPropertyException&)
+    {
+    }
+    return nIndex;
+}
+
 } //  namespace DataSeriesHelper
 } //  namespace chart
diff --git chart2/source/tools/RangeHighlighter.cxx chart2/source/tools/RangeHighlighter.cxx
index 50b5316..93227e7 100644
--- chart2/source/tools/RangeHighlighter.cxx
+++ chart2/source/tools/RangeHighlighter.cxx
@@ -38,6 +38,7 @@
 #include "ContainerHelper.hxx"
 #include "macros.hxx"
 #include "ObjectIdentifier.hxx"
+#include "DataSeriesHelper.hxx"
 
 #include <com/sun/star/chart2/XDataSeries.hpp>
 #include <com/sun/star/chart/ErrorBarStyle.hpp>
@@ -78,7 +79,8 @@ RangeHighlighter::RangeHighlighter(
     const Reference< view::XSelectionSupplier > & xSelectionSupplier ) :
         impl::RangeHighlighter_Base( m_aMutex ),
         m_xSelectionSupplier( xSelectionSupplier ),
-        m_nAddedListenerCount( 0 )
+        m_nAddedListenerCount( 0 ),
+        m_bIncludeHiddenCells(true)
 {
 }
 
@@ -104,6 +106,8 @@ void RangeHighlighter::determineRanges()
             if( xController.is())
                 xChartModel.set( xController->getModel());
 
+            m_bIncludeHiddenCells = ChartModelHelper::isIncludeHiddenCells( xChartModel );
+
             uno::Any aSelection( m_xSelectionSupplier->getSelection());
             OUString aCID;
             if(( aSelection >>= aCID ) &&
@@ -271,11 +275,13 @@ void RangeHighlighter::fillRangesForDataPoint( const Reference< uno::XInterface
                             -1,
                             nPreferredColor,
                             sal_False ));
+
+                sal_Int32 nUnhiddenIndex = DataSeriesHelper::translateIndexFromHiddenToFullSequence( nIndex, xValues, !m_bIncludeHiddenCells );
                 if( xValues.is())
                     aHilightedRanges.push_back(
                         chart2::data::HighlightedRange(
                             xValues->getSourceRangeRepresentation(),
-                            nIndex,
+                            nUnhiddenIndex,
                             nPreferredColor,
                             sal_False ));
             }
diff --git chart2/source/tools/UncachedDataSequence.cxx chart2/source/tools/UncachedDataSequence.cxx
index bcf99f7..1fa3b00 100644
--- chart2/source/tools/UncachedDataSequence.cxx
+++ chart2/source/tools/UncachedDataSequence.cxx
@@ -79,7 +79,7 @@ UncachedDataSequence::UncachedDataSequence(
     const OUString & rRangeRepresentation )
         : OPropertyContainer( GetBroadcastHelper()),
           UncachedDataSequence_Base( GetMutex()),
-          m_bIsHidden( true ),
+          m_bIsHidden( false ),
           m_xDataProvider( xIntDataProv ),
           m_aSourceRepresentation( rRangeRepresentation ),
           m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder())
@@ -93,7 +93,7 @@ UncachedDataSequence::UncachedDataSequence(
     const OUString & rRole )
         : OPropertyContainer( GetBroadcastHelper()),
           UncachedDataSequence_Base( GetMutex()),
-          m_bIsHidden( true ),
+          m_bIsHidden( false ),
           m_xDataProvider( xIntDataProv ),
           m_aSourceRepresentation( rRangeRepresentation ),
           m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder())
diff --git chart2/source/view/axes/ScaleAutomatism.cxx chart2/source/view/axes/ScaleAutomatism.cxx
index 7c58236..3e412c4 100644
--- chart2/source/view/axes/ScaleAutomatism.cxx
+++ chart2/source/view/axes/ScaleAutomatism.cxx
@@ -134,7 +134,7 @@ void ScaleAutomatism::calculateExplicitScaleAndIncrement(
         if( m_aSourceScale.AxisType==AxisType::PERCENT )
             rExplicitScale.Minimum = 0.0;
         else if( ::rtl::math::isNan( m_fValueMinimum ) )
-            rExplicitScale.Minimum = 0.0;   //@todo get Minimum from scsaling or from plotter????
+            rExplicitScale.Minimum = 0.0;   //@todo get Minimum from scaling or from plotter????
         else
             rExplicitScale.Minimum = m_fValueMinimum;
     }
@@ -143,7 +143,7 @@ void ScaleAutomatism::calculateExplicitScaleAndIncrement(
     if( bAutoMaximum )
     {
         if( m_aSourceScale.AxisType==AxisType::PERCENT )
-            rExplicitScale.Minimum = 1.0;
+            rExplicitScale.Maximum = 1.0;
         else if( ::rtl::math::isNan( m_fValueMaximum ) )
             rExplicitScale.Maximum = 10.0;  //@todo get Maximum from scaling or from plotter????
         else
diff --git chart2/source/view/inc/VDataSeries.hxx chart2/source/view/inc/VDataSeries.hxx
index e41340c..7e11efd 100644
--- chart2/source/view/inc/VDataSeries.hxx
+++ chart2/source/view/inc/VDataSeries.hxx
@@ -59,7 +59,7 @@ class VDataSequence
 {
 public:
     void init( const ::com::sun::star::uno::Reference<
-        ::com::sun::star::chart2::data::XDataSequence >& xModel);
+        ::com::sun::star::chart2::data::XDataSequence >& xModel );
     bool is() const;
     void clear();
     double getValue( sal_Int32 index ) const;
diff --git chart2/source/view/main/ChartItemPool.cxx chart2/source/view/main/ChartItemPool.cxx
index 784307a..f8f9b4a 100644
--- chart2/source/view/main/ChartItemPool.cxx
+++ chart2/source/view/main/ChartItemPool.cxx
@@ -184,6 +184,7 @@ ChartItemPool::ChartItemPool():
     ppPoolDefaults[SCHATTR_DIAGRAM_STYLE        - SCHATTR_START] = new SvxChartStyleItem( CHSTYLE_2D_COLUMN, SCHATTR_DIAGRAM_STYLE );
     ppPoolDefaults[SCHATTR_TEXTBREAK            - SCHATTR_START] = new SfxBoolItem( SCHATTR_TEXTBREAK, FALSE );
     ppPoolDefaults[SCHATTR_GROUP_BARS_PER_AXIS  - SCHATTR_START] = new SfxBoolItem(SCHATTR_GROUP_BARS_PER_AXIS, FALSE);
+    ppPoolDefaults[SCHATTR_INCLUDE_HIDDEN_CELLS - SCHATTR_START] = new SfxBoolItem(SCHATTR_INCLUDE_HIDDEN_CELLS, TRUE);
     ppPoolDefaults[SCHATTR_STARTING_ANGLE       - SCHATTR_START] = new SfxInt32Item( SCHATTR_STARTING_ANGLE, 90 );
     ppPoolDefaults[SCHATTR_CLOCKWISE            - SCHATTR_START] = new SfxBoolItem( SCHATTR_CLOCKWISE, FALSE );
 
diff --git chart2/source/view/main/ChartView.cxx chart2/source/view/main/ChartView.cxx
index 50afb71..c096326 100644
--- chart2/source/view/main/ChartView.cxx
+++ chart2/source/view/main/ChartView.cxx
@@ -631,6 +631,7 @@ void SeriesPlotterContainer::initializeCooSysAndSeriesPlotter(
     sal_Bool bSortByXValues = sal_False;
     sal_Bool bConnectBars = sal_False;
     sal_Bool bGroupBarsPerAxis = sal_True;
+    sal_Bool bIncludeHiddenCells = sal_True;
     sal_Int32 nStartingAngle = 90;
     try
     {
@@ -638,6 +639,7 @@ void SeriesPlotterContainer::initializeCooSysAndSeriesPlotter(
         xDiaProp->getPropertyValue( C2U( "SortByXValues" ) ) >>= bSortByXValues;
         xDiaProp->getPropertyValue( C2U( "ConnectBars" ) ) >>= bConnectBars;
         xDiaProp->getPropertyValue( C2U( "GroupBarsPerAxis" ) ) >>= bGroupBarsPerAxis;
+        xDiaProp->getPropertyValue( C2U( "IncludeHiddenCells" ) ) >>= bIncludeHiddenCells;
         xDiaProp->getPropertyValue( C2U( "StartingAngle" ) ) >>= nStartingAngle;
     }
     catch( const uno::Exception & ex )
@@ -703,6 +705,9 @@ void SeriesPlotterContainer::initializeCooSysAndSeriesPlotter(
                 uno::Reference< XDataSeries > xDataSeries( aSeriesList[nS], uno::UNO_QUERY );
 		        if(!xDataSeries.is())
 			        continue;
+                if( !bIncludeHiddenCells && !DataSeriesHelper::hasUnhiddenData(xDataSeries) )
+                    continue;
+
 		        VDataSeries* pSeries = new VDataSeries( xDataSeries );
 
                 pSeries->setGlobalSeriesIndex(nGlobalSeriesIndex);
diff --git chart2/source/view/main/VDataSeries.cxx chart2/source/view/main/VDataSeries.cxx
index cb2f652..d6f0cd4 100644
--- chart2/source/view/main/VDataSeries.cxx
+++ chart2/source/view/main/VDataSeries.cxx
@@ -37,6 +37,7 @@
 #include "LabelPositionHelper.hxx"
 #include "ChartTypeHelper.hxx"
 #include "ContainerHelper.hxx"
+#include "DataSeriesHelper.hxx"
 #include "MeanValueRegressionCurveCalculator.hxx"
 
 #include <com/sun/star/chart/MissingValueTreatment.hpp>
@@ -61,87 +62,10 @@ using namespace ::com::sun::star;
 using namespace ::com::sun::star::chart2;
 using ::com::sun::star::uno::Reference;
 
-namespace
-{
-    struct lcl_LessIndex
-    {
-        inline bool operator() ( const sal_Int32& first,
-                             const sal_Int32& second )
-        {
-            return ( first < second );
-        }
-    };
-
-    void lcl_removeIndices( uno::Sequence< double >& rValues, const uno::Sequence< sal_Int32 >& rIndicesToRemove )
-    {
-        if( !rIndicesToRemove.getLength() )
-            return;
-
-        ::std::vector< sal_Int32 > aIndicesToRemove( ContainerHelper::SequenceToVector( rIndicesToRemove) );
-        ::std::sort( aIndicesToRemove.begin(), aIndicesToRemove.end(), lcl_LessIndex() );
-        
-        sal_Int32 nTarget=0;
-        sal_Int32 nR = 0;
-        sal_Int32 nRemove = aIndicesToRemove[nR];
-        for( sal_Int32 nSource=0; nSource<rValues.getLength(); nSource++ )
-        {
-            if( nSource<nRemove || nRemove==-1 )
-            {
-                if( nTarget < nSource )
-                    rValues[nTarget]=rValues[nSource];
-                nTarget++;
-                continue;
-            }
-            if( nSource==nRemove )
-            {
-                ++nR;
-                if( nR<static_cast<sal_Int32>(aIndicesToRemove.size()) )
-                    nRemove = aIndicesToRemove[nR];
-                else
-                    nRemove = -1;
-            }
-        }
-
-        if( nTarget>0 )
-            rValues.realloc( nTarget );
-        else
-            rValues.realloc(0);
-    }
-}
-
 void VDataSequence::init( const uno::Reference< data::XDataSequence >& xModel )
 {
-    bool bDisplayHiddenCells = true; //todo: make this configurable in future
-    bool bIsHidden = false;
-    uno::Sequence< sal_Int32 > aHiddenValues;
-    if( !bDisplayHiddenCells )
-    {
-        uno::Reference<beans::XPropertySet> xProp(xModel, uno::UNO_QUERY );
-        if( xProp.is())
-        {
-            try
-            {
-                xProp->getPropertyValue( C2U( "IsHidden" ) ) >>= bIsHidden;
-                xProp->getPropertyValue( C2U( "HiddenValues" ) ) >>= aHiddenValues;
-            }
-            catch( uno::Exception& e )
-            {
-                ASSERT_EXCEPTION( e );
-            }
-        }
-    }
-
     Model = xModel;
-    if( bDisplayHiddenCells || !bIsHidden )
-        Doubles = DataSequenceToDoubleSequence( xModel );
-
-    if( !bDisplayHiddenCells )
-    {
-        if( bIsHidden )
-            Doubles.realloc(0);
-        else if( aHiddenValues.getLength() )
-            lcl_removeIndices( Doubles, aHiddenValues );
-    }
+    Doubles = DataSequenceToDoubleSequence( xModel );
 }
 
 bool VDataSequence::is() const
