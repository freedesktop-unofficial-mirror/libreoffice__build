From d1f34a3f7106560d01f917c27818dd37627cda7d Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:01:10 +0200
Subject: [PATCH 446/878] optional-icon-themes.diff

---
 svx/source/cui/optgdlg.cxx      |   80 +++++++++++++++++++--------------------
 svx/source/cui/optgdlg.hxx      |    3 +
 vcl/inc/vcl/impimagetree.hxx    |   16 ++++++--
 vcl/inc/vcl/settings.hxx        |    4 +-
 vcl/source/app/settings.cxx     |   44 ++++++++++++++++++++-
 vcl/source/gdi/impimagetree.cxx |   60 ++++++++++++++++++++++++++---
 6 files changed, 151 insertions(+), 56 deletions(-)

diff --git a/svx/source/cui/optgdlg.cxx b/svx/source/cui/optgdlg.cxx
index fe09556..d3b2e49 100644
--- a/svx/source/cui/optgdlg.cxx
+++ b/svx/source/cui/optgdlg.cxx
@@ -779,6 +779,31 @@ OfaViewTabPage::OfaViewTabPage(Window* pParent, const SfxItemSet& rSet ) :
         m_aSystemFont.Enable( FALSE );
     }
 
+    const StyleSettings& aStyleSettings = Application::GetSettings().GetStyleSettings();
+
+    // remove non-installed icon themes
+    if( aIconStyleLB.GetEntryCount() == STYLE_SYMBOLS_THEMES_MAX )
+    {
+    // do not check 0th item == auto; it is not a real theme
+    aIconStyleItemId[0] = 0;
+    ULONG nItem = 1;
+    for ( ULONG n=0; ++n < STYLE_SYMBOLS_THEMES_MAX; )
+    {
+        if ( aStyleSettings.CheckSymbolStyle( n ) )
+        {
+        // existing style => save the item id
+        aIconStyleItemId[n] = nItem++;
+        }
+        else
+        {
+        // non-existing style => remove item;
+        aIconStyleLB.RemoveEntry( nItem );
+        aIconStyleItemId[n] = 0;
+        }
+    }
+
+    }
+
     // add real theme name to 'auto' theme, e.g. 'auto' => 'auto (classic)'
     if( aIconStyleLB.GetEntryCount() > 1 )
     {
@@ -786,20 +811,14 @@ OfaViewTabPage::OfaViewTabPage(Window* pParent, const SfxItemSet& rSet ) :
 
         aAutoStr += ::rtl::OUString::createFromAscii( " (" );
 
-        switch( Application::GetSettings().GetStyleSettings().GetAutoSymbolsStyle() )
-        {
-            case STYLE_SYMBOLS_DEFAULT:     aAutoStr += aIconStyleLB.GetEntry( 1 ); break;
-            case STYLE_SYMBOLS_INDUSTRIAL:  aAutoStr += aIconStyleLB.GetEntry( 2 ); break;
-            case STYLE_SYMBOLS_CRYSTAL:     aAutoStr += aIconStyleLB.GetEntry( 3 ); break;
-            case STYLE_SYMBOLS_TANGO:       aAutoStr += aIconStyleLB.GetEntry( 4 ); break;
-            case STYLE_SYMBOLS_CLASSIC:     aAutoStr += aIconStyleLB.GetEntry( 5 ); break;
-            case STYLE_SYMBOLS_HICONTRAST:  aAutoStr += aIconStyleLB.GetEntry( 6 ); break;
-            case STYLE_SYMBOLS_OXYGEN:      aAutoStr += aIconStyleLB.GetEntry( 7 ); break;
-        }
+        ULONG nAutoStyle = aStyleSettings.GetAutoSymbolsStyle();
+        if ( aIconStyleItemId[nAutoStyle] )
+                aAutoStr += aIconStyleLB.GetEntry( aIconStyleItemId[nAutoStyle] );
 
         aIconStyleLB.RemoveEntry( 0 );
         aIconStyleLB.InsertEntry( aAutoStr += ::rtl::OUString::createFromAscii( ")" ), 0 );
-        aIconStyleLB.SetSeparatorPos( aIconStyleLB.GetEntryCount() - 2 );
+        // separate auto and other icon themes
+        aIconStyleLB.SetSeparatorPos( 0 );
     }
 }
 
@@ -878,26 +897,18 @@ BOOL OfaViewTabPage::FillItemSet( SfxItemSet& )
     UINT16 nStyleLB_NewSelection = aIconStyleLB.GetSelectEntryPos();
     if( nStyleLB_InitialSelection != nStyleLB_NewSelection )
     {
-        sal_Int16 eSet = SFX_SYMBOLS_STYLE_AUTO;
-        switch( nStyleLB_NewSelection )
-        {
-            case 0: eSet = SFX_SYMBOLS_STYLE_AUTO;       break;
-            case 1: eSet = SFX_SYMBOLS_STYLE_DEFAULT;    break;
-            case 2: eSet = SFX_SYMBOLS_STYLE_HICONTRAST; break;
-            case 3: eSet = SFX_SYMBOLS_STYLE_INDUSTRIAL; break;
-            case 4: eSet = SFX_SYMBOLS_STYLE_CRYSTAL;    break;
-            case 5: eSet = SFX_SYMBOLS_STYLE_TANGO;      break;
-            case 6: eSet = SFX_SYMBOLS_STYLE_CLASSIC;    break;
-            case 7: eSet = SFX_SYMBOLS_STYLE_OXYGEN;     break;
-            default:
-                DBG_ERROR( "OfaViewTabPage::FillItemSet(): This state of aIconStyleLB should not be possible!" );
-        }
-        aMiscOptions.SetSymbolsStyle( eSet );
+        // find the style name in the aIconStyleItemId table
+        // items from the non-installed icon themes were removed
+        for ( ULONG n=0; n < STYLE_SYMBOLS_THEMES_MAX; n++ )
+            if ( aIconStyleItemId[n] == nStyleLB_NewSelection )
+            {
+                aMiscOptions.SetSymbolsStyle( n );
+                n = STYLE_SYMBOLS_THEMES_MAX;
+            }
     }
 
     BOOL bAppearanceChanged = FALSE;
 
-
     // Screen Scaling
     UINT16 nOldScale = pAppearanceCfg->GetScaleFactor();
     UINT16 nNewScale = (UINT16)aWindowSizeMF.GetValue();
@@ -1064,20 +1075,7 @@ void OfaViewTabPage::Reset( const SfxItemSet& )
     aIconSizeLB.SaveValue();
 
     if( aMiscOptions.GetSymbolsStyle() != SFX_SYMBOLS_STYLE_AUTO )
-    {
-        switch ( aMiscOptions.GetCurrentSymbolsStyle() )
-        {
-            case SFX_SYMBOLS_STYLE_DEFAULT:    nStyleLB_InitialSelection = 1; break;
-            case SFX_SYMBOLS_STYLE_HICONTRAST: nStyleLB_InitialSelection = 2; break;
-            case SFX_SYMBOLS_STYLE_INDUSTRIAL: nStyleLB_InitialSelection = 3; break;
-            case SFX_SYMBOLS_STYLE_CRYSTAL:    nStyleLB_InitialSelection = 4; break;
-            case SFX_SYMBOLS_STYLE_TANGO:      nStyleLB_InitialSelection = 5; break;
-            case SFX_SYMBOLS_STYLE_CLASSIC:    nStyleLB_InitialSelection = 6; break;
-            case SFX_SYMBOLS_STYLE_OXYGEN:     nStyleLB_InitialSelection = 7; break;
-            default:                           nStyleLB_InitialSelection = 0; break;
-        }
-    }
-
+        nStyleLB_InitialSelection = aIconStyleItemId[aMiscOptions.GetCurrentSymbolsStyle()];
     aIconStyleLB.SelectEntryPos( nStyleLB_InitialSelection );
     aIconStyleLB.SaveValue();
 
diff --git a/svx/source/cui/optgdlg.hxx b/svx/source/cui/optgdlg.hxx
index 047b569..6d0c76f 100644
--- a/svx/source/cui/optgdlg.hxx
+++ b/svx/source/cui/optgdlg.hxx
@@ -135,6 +135,9 @@ private:
     UINT16			nStyleLB_InitialSelection;
     BOOL			bSfxSymbolsAuto;
 
+    // item ID for the given icon theme
+    // might be zero when the theme is not installed and the item is removed
+    ULONG			aIconStyleItemId[STYLE_SYMBOLS_THEMES_MAX];
     SvtTabAppearanceCfg*	pAppearanceCfg;
     CanvasSettings*			pCanvasSettings;
     SvtOptionsDrawinglayer*	mpDrawinglayerOpt;
diff --git a/vcl/inc/vcl/impimagetree.hxx b/vcl/inc/vcl/impimagetree.hxx
index e5add73..a094d9b 100644
--- a/vcl/inc/vcl/impimagetree.hxx
+++ b/vcl/inc/vcl/impimagetree.hxx
@@ -52,6 +52,9 @@ public:
 
     ~ImplImageTree();
 
+    // check whether the icon style is installed
+    bool checkStyle(rtl::OUString const & style);
+
     bool loadImage(
         rtl::OUString const & name, rtl::OUString const & style,
         BitmapEx & bitmap, bool localized = false);
@@ -59,7 +62,7 @@ public:
     void shutDown();
         // a crude form of life cycle control (called from DeInitVCL; otherwise,
         // if the ImplImageTree singleton were destroyed during exit that would
-        // be too late for the destructors of the bitmaps in m_cache)
+        // be too late for the destructors of the bitmaps in m_iconCache)
 
 private:
     typedef std::list<
@@ -69,17 +72,22 @@ private:
                 com::sun::star::container::XNameAccess > > > Zips;
 
     typedef std::hash_map<
-        rtl::OUString, std::pair< bool, BitmapEx >, rtl::OUStringHash > Cache;
+        rtl::OUString, bool, rtl::OUStringHash > CheckStyleCache;
+    typedef std::hash_map<
+        rtl::OUString, std::pair< bool, BitmapEx >, rtl::OUStringHash > IconCache;
 
     rtl::OUString m_style;
     Zips m_zips;
-    Cache m_cache;
+    CheckStyleCache m_checkStyleCache;
+    IconCache m_iconCache;
 
     void setStyle(rtl::OUString const & style);
 
     void resetZips();
 
-    bool cacheLookup(
+    bool checkStyleCacheLookup(
+        rtl::OUString const & style, bool &exists);
+    bool iconCacheLookup(
         rtl::OUString const & name, bool localized, BitmapEx & bitmap);
 
     bool find(std::vector< rtl::OUString > const & paths, BitmapEx & bitmap);
diff --git a/vcl/inc/vcl/settings.hxx b/vcl/inc/vcl/settings.hxx
index d537be5..f4e661d 100644
--- a/vcl/inc/vcl/settings.hxx
+++ b/vcl/inc/vcl/settings.hxx
@@ -521,7 +521,7 @@ private:
 #define STYLE_SYMBOLS_TANGO		((ULONG)5)
 #define STYLE_SYMBOLS_CLASSIC		((ULONG)6)
 #define STYLE_SYMBOLS_OXYGEN		((ULONG)7)
-#define STYLE_SYMBOLS_THEMES_MAX	((ULONG)7)
+#define STYLE_SYMBOLS_THEMES_MAX	((ULONG)8)
 
 #define STYLE_CURSOR_NOBLINKTIME    ((ULONG)0xFFFFFFFF)
 
@@ -945,6 +945,8 @@ public:
     void							SetPreferredSymbolsStyleName( const ::rtl::OUString &rName );
     ULONG							GetPreferredSymbolsStyle() const
                                         { return mpData->mnPreferredSymbolsStyle; }
+    // check whether the symbols style is supported (icons are installed)
+    bool							CheckSymbolStyle( ULONG nStyle ) const;
     ULONG                           GetAutoSymbolsStyle() const;
 
     ULONG							GetCurrentSymbolsStyle() const;
diff --git a/vcl/source/app/settings.cxx b/vcl/source/app/settings.cxx
index e5c3593..aedaeca 100644
--- a/vcl/source/app/settings.cxx
+++ b/vcl/source/app/settings.cxx
@@ -38,6 +38,8 @@
 #include "vcl/configsettings.hxx"
 #include "vcl/gradient.hxx"
 #include "vcl/unohelp.hxx"
+#include "vcl/bitmapex.hxx"
+#include "vcl/impimagetree.hxx"
 #include "unotools/localedatawrapper.hxx"
 #include "unotools/collatorwrapper.hxx"
 #include "unotools/configmgr.hxx"
@@ -767,12 +769,12 @@ ULONG StyleSettings::GetCurrentSymbolsStyle() const
     // style selected in Tools -> Options... -> OpenOffice.org -> View
     ULONG nStyle = GetSymbolsStyle();
 
-    if ( nStyle == STYLE_SYMBOLS_AUTO )
+    if ( nStyle == STYLE_SYMBOLS_AUTO || ( !CheckSymbolStyle (nStyle) ) )
     {
         // the preferred style can be read from the desktop setting by the desktop native widgets modules
         ULONG nPreferredStyle = GetPreferredSymbolsStyle();
 
-        if ( nPreferredStyle == STYLE_SYMBOLS_AUTO )
+        if ( nPreferredStyle == STYLE_SYMBOLS_AUTO || ( !CheckSymbolStyle (nPreferredStyle) ) )
         {
 
             // use a hardcoded desktop-specific fallback if no preferred style has been detected
@@ -788,7 +790,10 @@ ULONG StyleSettings::GetCurrentSymbolsStyle() const
             nPreferredStyle = snFallbackDesktopStyle;
         }
 
-        nStyle = GetHighContrastMode()? STYLE_SYMBOLS_HICONTRAST: nPreferredStyle;
+        if (GetHighContrastMode() && CheckSymbolStyle (STYLE_SYMBOLS_HICONTRAST) )
+            nStyle = STYLE_SYMBOLS_HICONTRAST;
+        else
+            nStyle = nPreferredStyle;
     }
 
     return nStyle;
@@ -827,11 +832,44 @@ ULONG StyleSettings::GetAutoSymbolsStyle() const
             nRet = STYLE_SYMBOLS_OXYGEN;
     }
 
+    // falback to any existing style
+    if ( ! CheckSymbolStyle (nRet) )
+    {
+        for ( ULONG n = 0 ; n <= STYLE_SYMBOLS_THEMES_MAX  ; n++ )
+        {
+            ULONG nStyleToCheck = n;
+
+            // auto is not a real theme => can't be fallback
+            if ( nStyleToCheck == STYLE_SYMBOLS_AUTO )
+                continue;
+
+            // will check hicontrast in the end
+            if ( nStyleToCheck == STYLE_SYMBOLS_HICONTRAST )
+                continue;
+            if ( nStyleToCheck == STYLE_SYMBOLS_THEMES_MAX )
+                nStyleToCheck = STYLE_SYMBOLS_HICONTRAST;
+
+            if ( CheckSymbolStyle ( nStyleToCheck ) )
+            {
+                nRet = nStyleToCheck;
+                n = STYLE_SYMBOLS_THEMES_MAX;
+            }
+        }
+    }
+
     return nRet;
 }
 
 // -----------------------------------------------------------------------
 
+bool StyleSettings::CheckSymbolStyle( ULONG nStyle ) const
+{
+    static ImplImageTreeSingletonRef aImageTree;
+    return aImageTree->checkStyle( ImplSymbolsStyleToName( nStyle ) );
+}
+
+// -----------------------------------------------------------------------
+
 void StyleSettings::SetStandardStyles()
 {
     CopyData();
diff --git a/vcl/source/gdi/impimagetree.cxx b/vcl/source/gdi/impimagetree.cxx
index af1afd0..03e4c1d 100644
--- a/vcl/source/gdi/impimagetree.cxx
+++ b/vcl/source/gdi/impimagetree.cxx
@@ -44,6 +44,7 @@
 #include "com/sun/star/uno/RuntimeException.hpp"
 #include "com/sun/star/uno/Sequence.hxx"
 #include "comphelper/processfactory.hxx"
+#include "osl/file.hxx"
 #include "osl/diagnose.h"
 #include "rtl/bootstrap.hxx"
 #include "rtl/string.h"
@@ -116,12 +117,43 @@ ImplImageTree::ImplImageTree() {}
 
 ImplImageTree::~ImplImageTree() {}
 
+bool ImplImageTree::checkStyle(rtl::OUString const & style)
+{
+    bool exists;
+
+    // using cache because setStyle is an expensive operation
+    // setStyle calls resetZips => closes any opened zip files with icons, cleans the icon cache, ...
+    if (checkStyleCacheLookup(style, exists)) {
+        return exists;
+    }
+
+    setStyle(style);
+
+    exists = false;
+    const rtl::OUString sBrandURLSuffix(RTL_CONSTASCII_USTRINGPARAM("_brand.zip"));
+    for (Zips::iterator i(m_zips.begin()); i != m_zips.end() && !exists;) {
+        ::rtl::OUString aZipURL = i->first;
+        sal_Int32 nFromIndex = aZipURL.getLength() - sBrandURLSuffix.getLength();
+        // skip brand-specific icon themes; they are incomplete and thus not useful for this check
+        if (nFromIndex < 0 || !aZipURL.match(sBrandURLSuffix, nFromIndex)) {
+            osl::File aZip(aZipURL);
+            if (aZip.open(OpenFlag_Read) == ::osl::FileBase::E_None) {
+                aZip.close();
+                exists = true;
+            }
+        }
+        ++i;
+    }
+    m_checkStyleCache[style] = exists;
+    return exists;
+}
+
 bool ImplImageTree::loadImage(
     rtl::OUString const & name, rtl::OUString const & style, BitmapEx & bitmap,
     bool localized)
 {
     setStyle(style);
-    if (cacheLookup(name, localized, bitmap)) {
+    if (iconCacheLookup(name, localized, bitmap)) {
         return true;
     }
     if (!bitmap.IsEmpty()) {
@@ -162,7 +194,7 @@ bool ImplImageTree::loadImage(
             rtl::OUStringToOString(e.Message, RTL_TEXTENCODING_UTF8).getStr());
     }
     if (found) {
-        m_cache[name.intern()] = std::make_pair(localized, bitmap);
+        m_iconCache[name.intern()] = std::make_pair(localized, bitmap);
     }
     return found;
 }
@@ -171,7 +203,8 @@ void ImplImageTree::shutDown() {
     m_style = rtl::OUString();
         // for safety; empty m_style means "not initialized"
     m_zips.clear();
-    m_cache.clear();
+    m_iconCache.clear();
+    m_checkStyleCache.clear();
 }
 
 void ImplImageTree::setStyle(rtl::OUString const & style) {
@@ -179,7 +212,7 @@ void ImplImageTree::setStyle(rtl::OUString const & style) {
     if (style != m_style) {
         m_style = style;
         resetZips();
-        m_cache.clear();
+        m_iconCache.clear();
     }
 }
 
@@ -239,6 +272,7 @@ void ImplImageTree::resetZips() {
                 u.GetMainURL(INetURLObject::NO_DECODE),
                 css::uno::Reference< css::container::XNameAccess >()));
     }
+    if ( m_style.equals(::rtl::OUString::createFromAscii("default")) )
     {
         rtl::OUString url(
             RTL_CONSTASCII_USTRINGPARAM(
@@ -250,11 +284,23 @@ void ImplImageTree::resetZips() {
     }
 }
 
-bool ImplImageTree::cacheLookup(
+bool ImplImageTree::checkStyleCacheLookup(
+    rtl::OUString const & style, bool &exists)
+{
+    CheckStyleCache::iterator i(m_checkStyleCache.find(style));
+    if (i != m_checkStyleCache.end()) {
+        exists = i->second;
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool ImplImageTree::iconCacheLookup(
     rtl::OUString const & name, bool localized, BitmapEx & bitmap)
 {
-    Cache::iterator i(m_cache.find(name));
-    if (i != m_cache.end() && i->second.first == localized) {
+    IconCache::iterator i(m_iconCache.find(name));
+    if (i != m_iconCache.end() && i->second.first == localized) {
         bitmap = i->second.second;
         return true;
     } else {
-- 
1.7.0.1

