diff -rup slideshow/source/engine/OGLTrans.orig/OGLTrans_TransitionImpl.cxx slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx
--- slideshow/source/engine/OGLTrans.orig/OGLTrans_TransitionImpl.cxx	2007-12-17 17:04:21.000000000 +0100
+++ slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx	2007-12-18 12:25:11.000000000 +0100
@@ -45,6 +45,8 @@ void OGLTransitionImpl::clear()
     for(unsigned int i(0); i < maSceneObjects.size(); ++i)
         delete maSceneObjects[i];
     maSceneObjects.clear();
+
+    bReflectSlides = false;
 }
 
 OGLTransitionImpl::~OGLTransitionImpl()
@@ -66,6 +68,30 @@ void OGLTransitionImpl::finish()
     }
 }
 
+static void blendSlide( double depth )
+{
+    double showHeight = -1 + depth*2;
+    GLfloat reflectionColor[] = {0, 0, 0, 0.25};
+
+    glBegin( GL_QUADS );
+    glColor4fv( reflectionColor );
+    glVertex3f( -1.01, -1.01, 0.001 );
+    glColor4f( 0, 0, 0, 1 );
+    glVertex3f(-1.01,  showHeight, 0.001 );
+    glVertex3f( 1.01,  showHeight, 0.001 );
+    glColor4fv( reflectionColor );
+    glVertex3f( 1.01, -1.01, 0.001 );
+    glEnd();
+
+    glBegin( GL_QUADS );
+    glColor4f( 0, 0, 0, 1 );
+    glVertex3f( -1.01, showHeight, 0.001 );
+    glVertex3f( -1.01,  1.01, 0.001 );
+    glVertex3f(  1.01,  1.01, 0.001 );
+    glVertex3f(  1.01, showHeight, 0.001 );
+    glEnd();
+}
+
 void OGLTransitionImpl::display( double nTime, ::sal_Int32 glLeavingSlideTex, ::sal_Int32 glEnteringSlideTex,
                                  double SlideWidth, double SlideHeight, double DispWidth, double DispHeight )
 {
@@ -75,30 +101,79 @@ void OGLTransitionImpl::display( double 
     SlideHeightScale = SlideHeight/DispHeight;
 
     glPushMatrix();
-    glEnable(GL_TEXTURE_2D);
-    //TODO change to foreach
+    if ( bReflectSlides ) {
+        double reflectionDepth = 0.3;
+        double surfaceLevel = -0.04;
+
+        /* reflected slides */
+        glPushMatrix();
+
+        glScaled( 1, -1, 1 );
+        glTranslated( 0, 2 - surfaceLevel, 0 );
+
+        glCullFace(GL_FRONT);
+        displaySlides( nTime, glLeavingSlideTex, glEnteringSlideTex, SlideWidthScale, SlideHeightScale );
+        glCullFace(GL_BACK);
+
+        glEnable(GL_BLEND);
+        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+        glDisable(GL_LIGHTING);
+
+        /* leaving slide reflection blending */
+        glPushMatrix();
+        maLeavingSlidePrimitives[0].applyOperations( nTime, SlideWidthScale, SlideHeightScale );
+        blendSlide( reflectionDepth );
+        glPopMatrix();
+
+        /* entering slide reflection blending */
+        glPushMatrix();
+        maEnteringSlidePrimitives[0].applyOperations( nTime, SlideWidthScale, SlideHeightScale );
+        blendSlide( reflectionDepth );
+        glPopMatrix();
+
+        glDisable(GL_BLEND);
+        glEnable(GL_LIGHTING);
+
+        glPopMatrix();
+    }
+
+    displaySlides( nTime, glLeavingSlideTex, glEnteringSlideTex, SlideWidthScale, SlideHeightScale );
+    displayScene( nTime, SlideWidth, SlideHeight, DispWidth, DispHeight );
+    glPopMatrix();
+}
+
+void OGLTransitionImpl::applyOverallOperations( double nTime, double SlideWidthScale, double SlideHeightScale )
+{
     for(unsigned int i(0); i < OverallOperations.size(); ++i)
         OverallOperations[i]->interpolate(nTime,SlideWidthScale,SlideHeightScale);
+}
+
+void OGLTransitionImpl::displaySlides( double nTime, ::sal_Int32 glLeavingSlideTex, ::sal_Int32 glEnteringSlideTex,
+                                       double SlideWidthScale, double SlideHeightScale )
+{
+    applyOverallOperations( nTime, SlideWidthScale, SlideHeightScale );
+    glEnable(GL_TEXTURE_2D);
+    //TODO change to foreach
     glBindTexture(GL_TEXTURE_2D, glLeavingSlideTex);
     for(unsigned int i(0); i < maLeavingSlidePrimitives.size(); ++i)
         maLeavingSlidePrimitives[i].display(nTime,SlideWidthScale,SlideHeightScale);
     glBindTexture(GL_TEXTURE_2D, glEnteringSlideTex);
     for(unsigned int i(0); i < maEnteringSlidePrimitives.size(); ++i)
         maEnteringSlidePrimitives[i].display(nTime,SlideWidthScale,SlideHeightScale);
+}
 
+void OGLTransitionImpl::displayScene( double nTime, double SlideWidth, double SlideHeight, double DispWidth, double DispHeight )
+{
+    glEnable(GL_TEXTURE_2D);
     for(unsigned int i(0); i < maSceneObjects.size(); ++i)
         maSceneObjects[i]->display(nTime, SlideWidth, SlideHeight, DispWidth, DispHeight);
-    
-
-    glPopMatrix();
 }
 
 void Primitive::display(double nTime, double WidthScale, double HeightScale)
 {
     glPushMatrix();
-    for(unsigned int i(0); i < Operations.size(); ++i)
-        Operations[i]->interpolate( nTime ,WidthScale,HeightScale);
-    glScaled(WidthScale,HeightScale,1);
+
+    applyOperations( nTime, WidthScale, HeightScale );
 
     glEnableClientState( GL_VERTEX_ARRAY );
     if(!Normals.empty())
@@ -113,6 +188,13 @@ void Primitive::display(double nTime, do
     glPopMatrix();
 }
 
+void Primitive::applyOperations(double nTime, double WidthScale, double HeightScale)
+{
+    for(unsigned int i(0); i < Operations.size(); ++i)
+        Operations[i]->interpolate( nTime ,WidthScale,HeightScale);
+    glScaled(WidthScale,HeightScale,1);
+}
+
 Primitive::~Primitive()
 {
     for(unsigned int i( 0 ); i < Operations.size(); ++i)
@@ -224,6 +307,8 @@ void OGLTransitionImpl::makeTurnAround()
 {
     clear();
     Primitive Slide;
+
+    bReflectSlides = true;
     
     Slide.pushTriangle(basegfx::B2DVector(0,0),basegfx::B2DVector(1,0),basegfx::B2DVector(0,1));
     Slide.pushTriangle(basegfx::B2DVector(1,0),basegfx::B2DVector(0,1),basegfx::B2DVector(1,1));
@@ -322,10 +407,12 @@ void OGLTransitionImpl::makeRochade()
     clear();
     Primitive Slide;
     
+    bReflectSlides = true;
+
     double w, h;
 
     w = 2.2;
-    h = 5;
+    h = 10;
 
     Slide.pushTriangle(basegfx::B2DVector(0,0),basegfx::B2DVector(1,0),basegfx::B2DVector(0,1));
     Slide.pushTriangle(basegfx::B2DVector(1,0),basegfx::B2DVector(0,1),basegfx::B2DVector(1,1));
diff -rup slideshow/source/engine/OGLTrans.orig/OGLTrans_TransitionImpl.hxx slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx
--- slideshow/source/engine/OGLTrans.orig/OGLTrans_TransitionImpl.hxx	2007-12-17 17:04:21.000000000 +0100
+++ slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx	2007-12-18 11:05:40.000000000 +0100
@@ -95,6 +95,15 @@ private:
     /** All the operations that should be applied to both leaving and entering slide primitives. These operations will be called in the order they were pushed back in. In OpenGL this effectively uses the operations in the opposite order they were pushed back.
 	*/
 	std::vector<Operation*> OverallOperations;
+
+    /** Whether to reflect slides, the reflection happens on flat surface beneath the slides.
+     ** Now it only works with slides which keep their rectangular shape together.
+     */
+    bool bReflectSlides;
+
+    void displaySlides( double nTime, ::sal_Int32 glLeavingSlideTex, ::sal_Int32 glEnteringSlideTex, double SlideWidthScale, double SlideHeightScale );
+    void displayScene( double nTime, double SlideWidth, double SlideHeight, double DispWidth, double DispHeight);
+    void applyOverallOperations( double nTime, double SlideWidthScale, double SlideHeightScale );
 };
 
 class SceneObject
@@ -138,6 +147,7 @@ public:
     Primitive(const Primitive& rvalue);
 	~Primitive();
 
+    void applyOperations(double nTime, double SlideWidthScale, double SlideHeightScale);
     void display(double nTime, double SlideWidthScale, double SlideHeightScale);
     const Primitive& operator=(const Primitive& rvalue);
     
diff --git a/slideshow/source/engine/OGLTrans/makefile.mk b/slideshow/source/engine/OGLTrans/makefile.mk
index 44de526..73f41cd 100644
--- slideshow/source/engine/OGLTrans/makefile.mk
+++ slideshow/source/engine/OGLTrans/makefile.mk
@@ -63,6 +63,7 @@ SLOFILES = \
         $(SLO)$/OGLTrans_TransitionImpl.obj \
         $(SLO)$/OGLTrans_TransitionerImpl.obj
         
+DLLPRE=
 SHL1TARGET=$(TARGET).uno
 
 SHL1STDLIBS= $(SALLIB) $(VCLLIB) $(CPPULIB) $(CPPUHELPERLIB) $(COMPHELPERLIB) $(CANVASTOOLSLIB) -lGL -lGLU -lX11
