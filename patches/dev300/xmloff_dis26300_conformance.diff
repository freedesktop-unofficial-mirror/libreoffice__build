--- sw/source/filter/xml/xmltbli.cxx.old	2009-10-08 16:17:18.000000000 +0200
+++ sw/source/filter/xml/xmltbli.cxx	2010-03-03 16:59:59.000000000 +0100
@@ -2893,7 +2893,7 @@ const SwStartNode *SwXMLTableContext::In
         bFirstSection = sal_False;
         OUString sStyleName( RTL_CONSTASCII_USTRINGPARAM("Standard") );
         GetImport().GetTextImport()->SetStyleAndAttrs( GetImport(),
-            GetImport().GetTextImport()->GetCursor(), sStyleName, sal_True );
+            GetImport().GetTextImport()->GetCursor(), sStyleName, rtl::OUString(), sal_True );
     }
     else
     {
--- xmloff/inc/xmloff/txtimp.hxx.old	2009-10-08 16:17:56.000000000 +0200
+++ xmloff/inc/xmloff/txtimp.hxx	2010-03-03 16:59:59.000000000 +0100
@@ -634,6 +634,7 @@ public:
             const ::com::sun::star::uno::Reference <
                 ::com::sun::star::text::XTextCursor >& rCursor,
             const ::rtl::OUString& rStyleName,
+            const ::rtl::OUString& rClassNames,
             sal_Bool bPara,
             sal_Bool bOutlineLevelAttrFound = sal_False,
             sal_Int8 nOutlineLevel = -1,
--- xmloff/inc/xmloff/xmlimp.hxx.old	2009-10-08 16:17:56.000000000 +0200
+++ xmloff/inc/xmloff/xmlimp.hxx	2010-03-03 16:59:59.000000000 +0100
@@ -215,6 +215,12 @@ public:
     static const ::com::sun::star::uno::Sequence< sal_Int8 > & getUnoTunnelId() throw();
     static SvXMLImport* getImplementation( ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > ) throw();
 
+
+        SvXMLImportContext *getTopContext();
+        SvXMLImportContext *createUnknownContext( USHORT nPrefix,
+                          const ::rtl::OUString& rLocalName,
+                          const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
+
     // ::com::sun::star::xml::sax::XDocumentHandler
     virtual void SAL_CALL startDocument(void)
         throw( ::com::sun::star::xml::sax::SAXException, ::com::sun::star::uno::RuntimeException );
--- xmloff/inc/xmloff/xmltoken.hxx.old	2010-03-03 16:59:35.000000000 +0100
+++ xmloff/inc/xmloff/xmltoken.hxx	2010-03-03 16:59:59.000000000 +0100
@@ -1406,6 +1406,7 @@ namespace xmloff { namespace token {
         XML_PRINTABLE,
         XML_PRINTED_BY,
         XML_PROCEEDINGS,
+    XML_PROCESS_CONTENT,
         XML_PRODUCT,
         XML_PROJECTION,
         XML_PROPERTIES,
@@ -1699,6 +1700,7 @@ namespace xmloff { namespace token {
         XML_STRUCTURE_PROTECTED,
         XML_STYLE,
         XML_STYLE_NAME,
+        XML_CLASS_NAMES,
         XML_STYLES,
         XML_STYLESHEET,
         XML_SUB_TABLE,
--- xmloff/source/core/xmlimp.cxx.old	2010-03-03 16:59:35.000000000 +0100
+++ xmloff/source/core/xmlimp.cxx	2010-03-03 16:59:59.000000000 +0100
@@ -771,6 +771,42 @@ void SAL_CALL SvXMLImport::startElement(
     mpContexts->Insert( pContext, nCount );
 }
 
+SvXMLImportContext *SvXMLImport::getTopContext() {
+    USHORT nCount = mpContexts->Count();
+    if (nCount>0) {
+    SvXMLImportContext *pContext = (*mpContexts)[nCount-1];
+    return pContext;
+    } else {
+    return NULL;
+    }		   
+}
+
+SvXMLImportContext *SvXMLImport::createUnknownContext( USHORT nPrefix,
+                      const ::rtl::OUString& rLocalName,
+                      const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList )
+{
+    bool bProcessContent=true;
+    sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
+    for(sal_Int16 a=0; a < nAttrCount; a++)
+    {
+    const OUString& rAttrName = xAttrList->getNameByIndex(a);
+    OUString aLocalName;
+    sal_uInt16 _nPrefix = GetNamespaceMap().GetKeyByAttrName(rAttrName, &aLocalName);
+    const OUString aValue( xAttrList->getValueByIndex(a) );
+    if (_nPrefix==XML_NAMESPACE_OFFICE && IsXMLToken( aLocalName, XML_PROCESS_CONTENT ) ) {
+        bProcessContent=!aValue.equalsIgnoreAsciiCaseAscii("false");
+    }
+    }
+    SvXMLImportContext *ret=NULL;
+    if (bProcessContent) {
+    ret=getTopContext();
+    }
+    if (ret==NULL) {
+    ret=new SvXMLImportContext( *this, nPrefix, rLocalName );
+    }
+    return ret;
+}
+
 void SAL_CALL SvXMLImport::endElement( const OUString&
 #ifndef PRODUCT
 rName
--- xmloff/source/core/xmltoken.cxx.old	2010-03-03 16:59:35.000000000 +0100
+++ xmloff/source/core/xmltoken.cxx	2010-03-03 16:59:59.000000000 +0100
@@ -1414,6 +1414,7 @@ namespace xmloff { namespace token {
         TOKEN( "printable",                       XML_PRINTABLE ),
         TOKEN( "printed-by",                      XML_PRINTED_BY ),
         TOKEN( "proceedings",                     XML_PROCEEDINGS ),
+        TOKEN( "process-content",                 XML_PROCESS_CONTENT ),
         TOKEN( "product",                         XML_PRODUCT ),
         TOKEN( "projection",                      XML_PROJECTION ),
         TOKEN( "properties",                      XML_PROPERTIES ),
@@ -1707,6 +1708,7 @@ namespace xmloff { namespace token {
         TOKEN( "structure-protected",             XML_STRUCTURE_PROTECTED ),
         TOKEN( "style",                           XML_STYLE ),
         TOKEN( "style-name",                      XML_STYLE_NAME ),
+        TOKEN( "class-names",                     XML_CLASS_NAMES ),
         TOKEN( "styles",                          XML_STYLES ),
         TOKEN( "stylesheet",                      XML_STYLESHEET ),
         TOKEN( "sub-table",                       XML_SUB_TABLE ),
--- xmloff/source/draw/shapeimport.cxx.old	2009-10-08 16:17:57.000000000 +0200
+++ xmloff/source/draw/shapeimport.cxx	2010-03-03 16:59:59.000000000 +0100
@@ -910,8 +910,8 @@ SvXMLShapeContext* XMLShapeImportHelper:
              return new SdXMLShapeLinkContext( rImport, p_nPrefix, rLocalName, xAttrList, rShapes );
          }
         // add other shapes here...
-        default:
-            return new SvXMLShapeContext( rImport, p_nPrefix, rLocalName, bTemporaryShape );
+        default: 
+        return NULL; // no shape context...
     }
 
     // now parse the attribute list and call the child context for each unknown attribute
--- xmloff/source/text/txtimp.cxx.old	2010-03-03 16:59:58.000000000 +0100
+++ xmloff/source/text/txtimp.cxx	2010-03-03 16:59:59.000000000 +0100
@@ -340,6 +340,8 @@ static __FAR_DATA SvXMLTokenMapEntry aTe
     { XML_NAMESPACE_TEXT, XML_IS_LIST_HEADER,XML_TOK_TEXT_P_IS_LIST_HEADER },
     { XML_NAMESPACE_TEXT, XML_RESTART_NUMBERING,XML_TOK_TEXT_P_RESTART_NUMBERING },
     { XML_NAMESPACE_TEXT, XML_START_VALUE,XML_TOK_TEXT_P_START_VALUE },
+    
+    { XML_NAMESPACE_TEXT, XML_CLASS_NAMES,	XML_TOK_TEXT_P_CLASS_NAMES },
     XML_TOKEN_MAP_END
 };
 
@@ -1063,6 +1065,7 @@ OUString XMLTextImportHelper::SetStyleAn
         SvXMLImport& rImport,
         const Reference < XTextCursor >& rCursor,
         const OUString& rStyleName,
+        const OUString& rClassNames,
         sal_Bool bPara,
         sal_Bool bOutlineLevelAttrFound,
         sal_Int8 nOutlineLevel,
@@ -1298,8 +1301,11 @@ OUString XMLTextImportHelper::SetStyleAn
     }
 
     // hard paragraph properties
-    if( pStyle )
-    {
+        sal_Int32 nTokenIndex = 0;
+    rtl::OUString aToken;
+    do {
+#if 1
+        if (pStyle) {
         pStyle->FillPropertySet( xPropSet );
         if( bPara && pStyle->HasMasterPageName() &&
             xPropSetInfo->hasPropertyByName( sPageDescName ) )
@@ -1361,7 +1367,19 @@ OUString XMLTextImportHelper::SetStyleAn
                 }
             }
         }
-    }
+        }
+        aToken = rClassNames.getToken( 0, ' ', nTokenIndex );
+        if (aToken.getLength() && xAutoStyles.Is() )
+        {
+        pStyle = PTR_CAST( XMLTextStyleContext,
+                   ((SvXMLStylesContext *)&xAutoStyles)->
+                   FindStyleChildContext( nFamily, aToken, sal_True ) );
+        } else {
+        pStyle=NULL;
+        aToken=rtl::OUString();
+        }
+#endif
+    } while (pStyle!=NULL || aToken.getLength()>0);
 
     // outline level; set after list style has been set
     // --> OD 2005-08-25 #i53198#
@@ -2034,8 +2052,9 @@ SvXMLImportContext *XMLTextImportHelper:
         }
     }
 
-//	if( !pContext )
-//		pContext = new SvXMLImportContext( GetImport(), nPrefix, rLocalName );
+    if (pContext==NULL) {
+        pContext=rImport.createUnknownContext(nPrefix, rLocalName, xAttrList);
+    }
 
     // handle open redlines
     if ( (XML_TOK_TEXT_CHANGE != nToken) &&
--- xmloff/source/text/txtparai.cxx.old	2009-10-08 16:17:57.000000000 +0200
+++ xmloff/source/text/txtparai.cxx	2010-03-03 16:59:59.000000000 +0100
@@ -1846,23 +1846,22 @@ SvXMLImportContext *XMLImpSpanContext_Im
             SvXMLShapeContext* pShapeContext = rImport.GetShapeImport()->CreateGroupChildContext(
                 rImport, nPrefix, rLocalName, xAttrList, xShapes );
             pContext = pShapeContext;
-            // OD 2004-04-20 #i26791# - keep shape in a text frame hint to
-            // adjust its anchor position, if its at-character anchored
-            Reference < XTextRange > xAnchorPos =
-                rImport.GetTextImport()->GetCursor()->getStart();
-            rHints.Insert( new XMLDrawHint_Impl( pShapeContext, xAnchorPos ),
-                           rHints.Count() );
+        if (pContext) {
+        // OD 2004-04-20 #i26791# - keep shape in a text frame hint to
+        // adjust its anchor position, if its at-character anchored	    
+        Reference < XTextRange > xAnchorPos =
+            rImport.GetTextImport()->GetCursor()->getStart();
+        rHints.Insert( new XMLDrawHint_Impl( pShapeContext, xAnchorPos ),
+                   rHints.Count() );
+        }
         }
         if( !pContext )
         {
-            // ignore unknown content
-            pContext =
-                new SvXMLImportContext( rImport, nPrefix, rLocalName );
+            pContext=rImport.createUnknownContext(nPrefix, rLocalName, xAttrList);
         }
         // Behind fields, shapes and any unknown content blanks aren't ignored
         rIgnoreLeadingSpace = sal_False;
     }
-
     return pContext;
 }
 
@@ -1920,7 +1919,7 @@ XMLParaContext::XMLParaContext(
     const SvXMLTokenMap& rTokenMap =
         GetImport().GetTextImport()->GetTextPAttrTokenMap();
 
-    OUString aCondStyleName, sClassNames;
+    OUString sStyleName, aCondStyleName, sClassNames;
 
     sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
     for( sal_Int16 i=0; i < nAttrCount; i++ )
@@ -2002,18 +2001,24 @@ XMLParaContext::XMLParaContext(
             break;
         }
     }
-
+    m_sClassNames = sClassNames;
     if( aCondStyleName.getLength() )
-        sStyleName = aCondStyleName;
-    else if( sClassNames.getLength() )
-    {
-        sal_Int32 nDummy = 0;
-        sStyleName = sClassNames.getToken( 0, ' ', nDummy );
+        m_sStyleName = aCondStyleName;
+    else {
+        m_sStyleName = sStyleName;
+    }
+    if (m_sStyleName.getLength()==0 && sClassNames.getLength()>0) {
+        // so when we only have class names make sure the first styles
+        // of the class names is the style name
+        sal_Int32 nDummy = 0;
+        m_sStyleName = m_sClassNames.getToken( 0, ' ', nDummy );
+        m_sClassNames = m_sClassNames.copy(m_sStyleName.getLength()+1);
     }
 }
 
 XMLParaContext::~XMLParaContext()
 {
+    rtl::OUString sStyleName = m_sStyleName;
     UniReference < XMLTextImportHelper > xTxtImport(
         GetImport().GetTextImport());
     Reference < XTextRange > xCrsrRange( xTxtImport->GetCursorAsRange() );
@@ -2078,6 +2083,7 @@ XMLParaContext::~XMLParaContext()
         // because of side effects of method <SetStyleAndAttrs(..)>
         xTxtImport->SetStyleAndAttrs( GetImport(), xAttrCursor,
                                       sCellParaStyleName,
+                      OUString(),
                                       sal_True,
                                       sal_False, -1, // suppress outline handling
                                       sal_False );   // suppress list attributes handling
@@ -2092,6 +2098,7 @@ XMLParaContext::~XMLParaContext()
     // --> OD 2007-07-25 #i73509# - add paramter <mbOutlineLevelAttrFound>
     sStyleName = xTxtImport->SetStyleAndAttrs( GetImport(), xAttrCursor,
                                                sStyleName,
+                           m_sClassNames,
                                                sal_True,
                                                mbOutlineLevelAttrFound,
                                                bHeading ? nOutlineLevel : -1 );
@@ -2154,7 +2161,7 @@ XMLParaContext::~XMLParaContext()
                             ((XMLStyleHint_Impl *)pHint)->GetStyleName();
                     if( rStyleName.getLength() )
                         xTxtImport->SetStyleAndAttrs( GetImport(),
-                                                      xAttrCursor, rStyleName,
+                                          xAttrCursor, rStyleName, OUString(), 
                                                       sal_False );
                 }
                 break;
@@ -2314,7 +2321,7 @@ SvXMLImportContext *XMLParaContext::Crea
 void XMLParaContext::Characters( const OUString& rChars )
 {
     OUString sChars =
-        GetImport().GetTextImport()->ConvertStarFonts( rChars, sStyleName,
+        GetImport().GetTextImport()->ConvertStarFonts( rChars, m_sStyleName,
                                                        nStarFontsConvFlags,
                                                        sal_True, GetImport() );
     GetImport().GetTextImport()->InsertString( sChars, bIgnoreLeadingSpace );
--- xmloff/source/text/txtparai.hxx.old	2009-10-08 16:17:57.000000000 +0200
+++ xmloff/source/text/txtparai.hxx	2010-03-03 16:59:59.000000000 +0100
@@ -48,7 +48,8 @@ class XMLParaContext : public SvXMLImpor
 {
     ::com::sun::star::uno::Reference <
         ::com::sun::star::text::XTextRange > xStart;	// xub_StrLen nStart;
-    ::rtl::OUString				sStyleName;
+    ::rtl::OUString				m_sStyleName;
+    ::rtl::OUString				m_sClassNames;
     ::rtl::OUString				sId;
     ::rtl::OUString             m_sXmlId;
     ::rtl::OUString             m_sAbout;
