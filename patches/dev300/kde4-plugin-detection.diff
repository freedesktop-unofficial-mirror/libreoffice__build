diff --git vcl/unx/source/plugadapt/.salplug.cxx.swo vcl/unx/source/plugadapt/.salplug.cxx.swo
index 03818db..d0e2a30 100644
Binary files vcl/unx/source/plugadapt/.salplug.cxx.swo and vcl/unx/source/plugadapt/.salplug.cxx.swo differ
diff --git vcl/unx/source/plugadapt/.salplug.cxx.swp vcl/unx/source/plugadapt/.salplug.cxx.swp
index 4725229..a28e589 100644
Binary files vcl/unx/source/plugadapt/.salplug.cxx.swp and vcl/unx/source/plugadapt/.salplug.cxx.swp differ
diff --git vcl/unx/source/plugadapt/salplug.cxx vcl/unx/source/plugadapt/salplug.cxx
index e33d05d..afa02f2 100644
--- vcl/unx/source/plugadapt/salplug.cxx
+++ vcl/unx/source/plugadapt/salplug.cxx
@@ -55,13 +55,16 @@ typedef SalInstance*(*salFactoryProc)( oslModule pModule);
 
 static oslModule pCloseModule = NULL;
 
-#define DESKTOP_NONE 0
-#define DESKTOP_UNKNOWN 1
-#define DESKTOP_GNOME 2
-#define DESKTOP_KDE 3
-#define DESKTOP_CDE 4
+enum {
+    DESKTOP_NONE = 0,
+    DESKTOP_UNKNOWN,
+    DESKTOP_GNOME,
+    DESKTOP_KDE,
+    DESKTOP_KDE4,
+    DESKTOP_CDE
+};
 
-static const char * desktop_strings[5] = { "none", "unknown", "GNOME", "KDE", "CDE" };
+static const char * desktop_strings[] = { "none", "unknown", "GNOME", "KDE", "KDE4", "CDE" };
 
 static SalInstance* tryInstance( const OUString& rModuleBase )
 {
@@ -214,105 +217,76 @@ extern "C"
     typedef int(* XErrorHandler)(Display*,XErrorEvent*);
 }
 
-static OUString getNetWMName( Display* pDisplay )
+/// Detect KDE using atoms.  
+///
+/// Returns 0 if not KDE, otherwise the KDE version
+static int KDEVersion( Display* pDisplay )
 {
-    OUString aRet;
+    Atom nFullSession = XInternAtom( pDisplay, "KDE_FULL_SESSION", True );
 
-    Atom nWmCheck	= XInternAtom( pDisplay, "_NET_SUPPORTING_WM_CHECK", True );
-    Atom nWmName	= XInternAtom( pDisplay, "_NET_WM_NAME", True );
-    if( nWmName && nWmCheck )
+    if ( !nFullSession )
+        return 0;
+
+    Atom            aRealType  = None;
+    int             nFormat    = 8;
+    unsigned long   nItems     = 0;
+    unsigned long   nBytesLeft = 0;
+    unsigned char*  pProperty  = NULL;
+    XGetWindowProperty( pDisplay,
+                        DefaultRootWindow( pDisplay ),
+                        nFullSession,
+                        0, 1,
+                        False,
+                        AnyPropertyType,
+                        &aRealType,
+                        &nFormat,
+                        &nItems,
+                        &nBytesLeft,
+                        &pProperty );
+
+    if ( WasXError() || nItems == 0 || !pProperty )
     {
-        XLIB_Window			aCheckWin	= None;
-        Atom				aRealType	= None;
-        int					nFormat		= 8;
-        unsigned long		nItems		= 0;
-        unsigned long		nBytesLeft	= 0;
-        unsigned char*	pProperty	= NULL;
-        XGetWindowProperty( pDisplay,
-                            DefaultRootWindow( pDisplay ),
-                            nWmCheck,
-                            0, 1,
-                            False,
-                            XA_WINDOW,
-                            &aRealType,
-                            &nFormat,
-                            &nItems,
-                            &nBytesLeft,
-                            &pProperty );
-        if( aRealType == XA_WINDOW && nFormat == 32 && nItems != 0 )
-            aCheckWin = *(XLIB_Window*)pProperty;
-        if( pProperty )
-        {
+        if ( pProperty )
             XFree( pProperty );
-            pProperty = NULL;
-        }
+        return 0;
+    }
+    XFree( pProperty );
+
+    // KDE_FULL_SESSION, but no KDE_SESSION_VERSION => KDE3
+    Atom nKDEVersion  = XInternAtom( pDisplay, "KDE_SESSION_VERSION", True );
+    if ( !nKDEVersion )
+        return 3;
+
+    int nVersion = 3;
+
+    aRealType  = None;
+    nFormat    = 8;
+    nItems     = 0;
+    nBytesLeft = 0;
+    pProperty  = NULL;
+    XGetWindowProperty( pDisplay,
+                        DefaultRootWindow( pDisplay ),
+                        nKDEVersion,
+                        0, 1,
+                        False,
+                        AnyPropertyType,
+                        &aRealType,
+                        &nFormat,
+                        &nItems,
+                        &nBytesLeft,
+                        &pProperty );
+    if( !WasXError() && nItems != 0 && pProperty )
+    {
+        nVersion = *reinterpret_cast< long* >( pProperty );                        
+    }
 
-        // see if that window really exists and has the check property set
-        if( aCheckWin != None )
-        {
-            // clear error flag
-            WasXError();
-            // get the property
-            XGetWindowProperty( pDisplay,
-                                aCheckWin,
-                                nWmCheck,
-                                0, 1,
-                                False,
-                                XA_WINDOW,
-                                &aRealType,
-                                &nFormat,
-                                &nItems,
-                                &nBytesLeft,
-                                &pProperty );
-            if( ! WasXError() && aRealType == XA_WINDOW && nFormat == 32 && nItems != 0 && pProperty )
-            {
-                if( aCheckWin == *(XLIB_Window*)pProperty )
-                {
-                    XFree( pProperty );
-                    pProperty = NULL;
-                    XGetWindowProperty( pDisplay,
-                                        aCheckWin,
-                                        nWmName,
-                                        0, 256,
-                                        False,
-                                        AnyPropertyType,
-                                        &aRealType,
-                                        &nFormat,
-                                        &nItems,
-                                        &nBytesLeft,
-                                        &pProperty );
-                    if( !WasXError() && nItems != 0 && pProperty && *pProperty )
-                    {
-                        if( aRealType == XA_STRING ) // some WM's use this although the should use UTF8_STRING
-                        {
-                            aRet = rtl::OStringToOUString( rtl::OString( (sal_Char*)pProperty ), RTL_TEXTENCODING_ISO_8859_1 );
-                        }
-                        else
-                            aRet = rtl::OStringToOUString( rtl::OString( (sal_Char*)pProperty ), RTL_TEXTENCODING_UTF8 );                        
-                    }
-                }
-            }
-            if( pProperty )
-            {
-                XFree( pProperty );
-                pProperty = NULL;
-            }
-        }
+    if( pProperty )
+    {
+        XFree( pProperty );
+        pProperty = NULL;
     }
-    return aRet;
-}
 
-static bool is_kde_desktop( Display* pDisplay )
-{
-    if ( NULL != getenv( "KDE_FULL_SESSION" ) )
-        return true;
-    
-    // check for kwin
-    rtl::OUString aWM = getNetWMName( pDisplay );
-    if( aWM.equalsIgnoreAsciiCaseAscii( "KWin" ) )
-        return true;
-    
-    return false;
+    return nVersion;
 }
 
 static bool is_cde_desktop( Display* pDisplay )
@@ -344,6 +318,8 @@ static const char * get_desktop_environment()
             pRet = desktop_strings[DESKTOP_CDE];
         if ( aOver.equalsIgnoreAsciiCase( "kde" ) )
             pRet = desktop_strings[DESKTOP_KDE];
+        if ( aOver.equalsIgnoreAsciiCase( "kde4" ) )
+            pRet = desktop_strings[DESKTOP_KDE4];
         if ( aOver.equalsIgnoreAsciiCase( "gnome" ) )
             pRet = desktop_strings[DESKTOP_GNOME];
         if ( aOver.equalsIgnoreAsciiCase( "none" ) )
@@ -384,7 +360,11 @@ static const char * get_desktop_environment()
             {
                 XErrorHandler pOldHdl = XSetErrorHandler( autodect_error_handler );
             
-                if ( is_kde_desktop( pDisplay ) )
+                int nKDEVersion = KDEVersion( pDisplay );
+
+                if ( nKDEVersion == 4 )
+                    pRet = desktop_strings[DESKTOP_KDE4];
+                else if ( nKDEVersion == 3 )
                     pRet = desktop_strings[DESKTOP_KDE];
                 else if ( is_gnome_desktop( pDisplay ) )
                     pRet = desktop_strings[DESKTOP_GNOME];
@@ -417,6 +397,8 @@ static const char* autodetect_plugin()
         pRet = "gtk";
     else if( desktop == desktop_strings[DESKTOP_KDE] )
         pRet = "kde";
+    else if( desktop == desktop_strings[DESKTOP_KDE4] )
+        pRet = "kde4";
     else
     {
         // #i95296# use the much nicer looking gtk plugin
diff --git vcl/util/makefile.mk vcl/util/makefile.mk
index f41aae8..a842fa9 100644
--- vcl/util/makefile.mk
+++ vcl/util/makefile.mk
@@ -387,7 +387,7 @@ SHL5IMPLIB=ikde_plug_
 SHL5LIBS=$(LIB5TARGET)
 SHL5DEPN=$(SHL2TARGETN)
 # libs for KDE plugin
-SHL5STDLIBS=$(KDE_LIBS)
+SHL5LINKFLAGS+=$(KDE_LIBS)
 SHL5STDLIBS+=-l$(SHL2TARGET)
 SHL5STDLIBS+=\
         $(VCLLIB)       \
@@ -404,6 +404,35 @@ SHL5STDLIBS+= $(XRANDR_LIBS)
 
 .ENDIF # "$(ENABLE_KDE)" != ""
 
+# KDE4 plugin
+.IF "$(ENABLE_KDE4)" != ""
+.IF "$(KDE4_ROOT)"!=""
+EXTRALIBPATHS+=-L$(KDE4_ROOT)$/lib
+.ENDIF
+LIB6TARGET=$(SLB)$/ikde4_plug_
+LIB6FILES=$(SLB)$/kde4plug.lib
+SHL6TARGET=vclplug_kde4$(DLLPOSTFIX)
+SHL6IMPLIB=ikde4_plug_
+SHL6LIBS=$(LIB6TARGET)
+SHL6DEPN=$(SHL2TARGETN)
+# libs for KDE4 plugin
+SHL6LINKFLAGS+=$(KDE4_LIBS)
+SHL6STDLIBS+=-l$(SHL2TARGET)
+SHL6STDLIBS+=\
+        $(VCLLIB)       \
+        $(PSPLIB)	\
+        $(TOOLSLIB)     \
+        $(VOSLIB)       \
+        $(SALLIB)
+
+.IF "$(ENABLE_RANDR)" != ""
+.IF "$(XRANDR_DLOPEN)" == "FALSE"
+SHL6STDLIBS+= $(XRANDR_LIBS)
+.ENDIF
+.ENDIF
+
+.ENDIF # "$(ENABLE_KDE4)" != ""
+
 .ENDIF # UNX
 
 # --- Allgemein ----------------------------------------------------------
