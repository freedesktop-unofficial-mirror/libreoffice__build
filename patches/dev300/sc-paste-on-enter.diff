diff --git sc/source/ui/app/inputhdl.cxx sc/source/ui/app/inputhdl.cxx
index 98aac39..6ac26bc 100644
--- sc/source/ui/app/inputhdl.cxx
+++ sc/source/ui/app/inputhdl.cxx
@@ -2055,6 +2055,7 @@ IMPL_LINK( ScInputHandler, ModifyHdl, void *, EMPTYARG )
 
 BOOL ScInputHandler::DataChanging( sal_Unicode cTyped, BOOL bFromCommand )		// return TRUE = new view created
 {
+    pActiveViewSh->GetViewData()->SetPasteMode( SC_PASTE_NONE );
     bInOwnChange = TRUE;				// disable ModifyHdl (reset in DataChanged)
 
     if ( eMode == SC_INPUT_NONE )
diff --git sc/source/ui/inc/viewdata.hxx sc/source/ui/inc/viewdata.hxx
index 6f0d986..19583a8 100644
--- sc/source/ui/inc/viewdata.hxx
+++ sc/source/ui/inc/viewdata.hxx
@@ -89,6 +89,13 @@ enum ScMarkType
 #endif
 };
 
+enum ScPasteFlags
+{
+    SC_PASTE_NONE   = 0,    // No flags specified
+    SC_PASTE_MODE   = 1,    // Enable paste-mode
+    SC_PASTE_BORDER = 2,    // Show a border around the source cells
+};
+
 class ScDocShell;
 class ScDocument;
 class ScDBFunc;
@@ -210,6 +217,8 @@ private:
     SCCOL				nTabStartCol;				// fuer Enter nach Tab
     ScRange				aDelRange;					// fuer AutoFill-Loeschen
 
+    ScPasteFlags        nPasteFlags;
+
     ScSplitPos          eEditActivePart;            // the part that was active when edit mode was started
     BOOL				bEditActive[4];				// aktiv?
     BOOL				bActive;					// aktives Fenster ?
@@ -295,6 +304,8 @@ public:
     SCCOL			GetFixPosX() const						{ return pThisTab->nFixPosX; }
     SCROW			GetFixPosY() const						{ return pThisTab->nFixPosY; }
     BOOL			IsPagebreakMode() const					{ return bPagebreak; }
+    BOOL            IsPasteMode() const                     { return nPasteFlags & SC_PASTE_MODE; }
+    BOOL            ShowPasteSource() const                 { return nPasteFlags & SC_PASTE_BORDER; }
 
     void			SetPosX( ScHSplitPos eWhich, SCCOL nNewPosX );
     void			SetPosY( ScVSplitPos eWhich, SCROW nNewPosY );
@@ -309,6 +320,7 @@ public:
     void			SetFixPosX( SCCOL nPos )						{ pThisTab->nFixPosX = nPos; }
     void			SetFixPosY( SCROW nPos )						{ pThisTab->nFixPosY = nPos; }
     void			SetPagebreakMode( BOOL bSet );
+    void            SetPasteMode ( ScPasteFlags nFlags )            { nPasteFlags = nFlags; }
 
     void            SetZoomType( SvxZoomType eNew, BOOL bAll );
     void            SetZoom( const Fraction& rNewX, const Fraction& rNewY, BOOL bAll );
diff --git sc/source/ui/view/cellsh1.cxx sc/source/ui/view/cellsh1.cxx
index ba66243..0cd4007 100644
--- sc/source/ui/view/cellsh1.cxx
+++ sc/source/ui/view/cellsh1.cxx
@@ -1170,6 +1170,8 @@ void ScCellShell::ExecuteEdit( SfxRequest& rReq )
                 WaitObject aWait( GetViewData()->GetDialogParent() );
                 pTabViewShell->CopyToClip( NULL, FALSE, FALSE, TRUE );
                 rReq.Done();
+                GetViewData()->SetPasteMode( (ScPasteFlags) (SC_PASTE_MODE | SC_PASTE_BORDER) );
+                pTabViewShell->ShowCursor();
             }
             break;
 
@@ -1178,6 +1180,7 @@ void ScCellShell::ExecuteEdit( SfxRequest& rReq )
                 WaitObject aWait( GetViewData()->GetDialogParent() );
                 pTabViewShell->CutToClip( NULL, TRUE );
                 rReq.Done();
+                GetViewData()->SetPasteMode( SC_PASTE_MODE );
             }
             break;
 
diff --git sc/source/ui/view/gridwin.cxx sc/source/ui/view/gridwin.cxx
index 6fc33d5..6e0280a 100644
--- sc/source/ui/view/gridwin.cxx
+++ sc/source/ui/view/gridwin.cxx
@@ -118,6 +118,7 @@
 #include "userdat.hxx"
 #include "drwlayer.hxx"
 #include "attrib.hxx"
+#include "cellsh.hxx"
 #include "validat.hxx"
 #include "tabprotection.hxx"
 #include "postit.hxx"
@@ -2969,12 +2970,30 @@ void ScGridWindow::SelectForContextMenu( const Point& rPosPixel )
     }
 }
 
+static void ClearSingleSelection( ScViewData* pViewData )
+{
+    SCCOL nX;
+    SCROW nY;
+    ScTransferObj* pTransObj = ScTransferObj::GetOwnClipboard( 
+        pViewData->GetActiveWin() );
+    if (!pTransObj)
+        return;
+
+    ScDocument* pClipDoc = pTransObj->GetDocument();
+    pClipDoc->GetClipArea( nX, nY, TRUE );
+    if (nX == 0 && nY == 0)
+    {
+        ScTabView* pView = pViewData->GetView();
+        pView->Unmark();
+    }
+}
+
 void __EXPORT ScGridWindow::KeyInput(const KeyEvent& rKEvt)
 {
     // #96965# Cursor control for ref input dialog
+    const KeyCode& rKeyCode = rKEvt.GetKeyCode();
     if( SC_MOD()->IsRefDialogOpen() )
     {
-        const KeyCode& rKeyCode = rKEvt.GetKeyCode();
         if( !rKeyCode.GetModifier() && (rKeyCode.GetCode() == KEY_F2) )
         {
             SC_MOD()->EndReference();
@@ -2989,9 +3008,35 @@ void __EXPORT ScGridWindow::KeyInput(const KeyEvent& rKEvt)
             return;
         }
     }
+    else if( rKeyCode.GetCode() == KEY_RETURN && pViewData->IsPasteMode() )
+    {
+        ScTabViewShell* pTabViewShell = pViewData->GetViewShell();
+
+        ScCellShell::PasteFromClipboard( pViewData, pTabViewShell, FALSE );
+        ClearSingleSelection( pViewData );
+
+        uno::Reference<datatransfer::clipboard::XClipboard> xSystemClipboard = 
+            TransferableHelper::GetSystemClipboard();
+        if (xSystemClipboard.is())
+        {
+            xSystemClipboard->setContents(
+                    uno::Reference<datatransfer::XTransferable>(),
+                    uno::Reference<datatransfer::clipboard::XClipboardOwner>());
+        }
+
+        // hide the border around the copy source
+        pViewData->SetPasteMode( SC_PASTE_NONE );
+        UpdateCursorOverlay();
+        return;
+    }
     // wenn semi-Modeless-SfxChildWindow-Dialog oben, keine KeyInputs:
     else if( !pViewData->IsAnyFillMode() )
     {
+        if (rKeyCode.GetCode() == KEY_ESCAPE)
+        {
+            pViewData->SetPasteMode( SC_PASTE_NONE );
+            UpdateCursorOverlay();
+        }
         //	query for existing note marker before calling ViewShell's keyboard handling
         //	which may remove the marker
         BOOL bHadKeyMarker = ( pNoteMarker && pNoteMarker->IsByKeyboard() );
diff --git sc/source/ui/view/viewdata.cxx sc/source/ui/view/viewdata.cxx
index df48982..e75b864 100644
--- sc/source/ui/view/viewdata.cxx
+++ sc/source/ui/view/viewdata.cxx
@@ -306,6 +306,7 @@ ScViewData::ScViewData( ScDocShell* pDocSh, ScTabViewShell* pViewSh )
         eRefType	( SC_REFTYPE_NONE ),
         nTabNo		( 0 ),
         nRefTabNo	( 0 ),
+        nPasteFlags ( SC_PASTE_NONE ),
         eEditActivePart( SC_SPLIT_BOTTOMLEFT ),
         bActive		( TRUE ),					//! wie initialisieren?
         bIsRefMode	( FALSE ),
@@ -432,6 +433,7 @@ void ScViewData::InitData( ScDocument* pDocument )
 //UNUSED2008-05      aDefPageZoomX = pRef->aDefPageZoomX;
 //UNUSED2008-05      aDefPageZoomY = pRef->aDefPageZoomY;
 //UNUSED2008-05      bPagebreak  = pRef->bPagebreak;
+//UNUSED2008-05 	nPasteFlags = pRef->nPasteFlags;
 //UNUSED2008-05      aLogicMode  = pRef->aLogicMode;
 //UNUSED2008-05  
 //UNUSED2008-05      SetGridMode     ( pRef->IsGridMode() );
diff --git sc/source/ui/view/viewfunc.cxx sc/source/ui/view/viewfunc.cxx
index 8155a80..61670e7 100644
--- sc/source/ui/view/viewfunc.cxx
+++ sc/source/ui/view/viewfunc.cxx
@@ -1910,6 +1910,7 @@ void ScViewFunc::DeleteMulti( BOOL bRows, BOOL bRecord )
 
 void ScViewFunc::DeleteContents( USHORT nFlags, BOOL bRecord )
 {
+    GetViewData()->SetPasteMode( SC_PASTE_NONE );
     // nur wegen Matrix nicht editierbar? Attribute trotzdem ok
     BOOL bOnlyNotBecauseOfMatrix;
     BOOL bEditable = SelectionEditable( &bOnlyNotBecauseOfMatrix );
