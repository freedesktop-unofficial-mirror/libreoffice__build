From b7796d2f1a990cea0e8904b4fab6fefe6a17fa9c Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:06:41 +0200
Subject: [PATCH 638/768] oox-pptx-export-animations-paragraph-target.diff

---
 sd/source/filter/pptx/pptexanimations.hxx      |    1 +
 sd/source/filter/pptx/pptx-epptooxml.cxx       |   17 ++++-
 sd/source/filter/pptx/pptx-pptexanimations.cxx |   87 ++++++++++++++----------
 3 files changed, 66 insertions(+), 39 deletions(-)

diff --git sd/source/filter/pptx/pptexanimations.hxx sd/source/filter/pptx/pptexanimations.hxx
index 76e6b81..4946b9c 100644
--- sd/source/filter/pptx/pptexanimations.hxx
+++ sd/source/filter/pptx/pptexanimations.hxx
@@ -144,6 +144,7 @@ public:
         static sal_uInt32 GetValueTypeForAttributeName( const rtl::OUString& rAttributeName );
 
     static const sal_Char* FindTransitionName( const sal_Int16 nType, const sal_Int16 nSubType, const sal_Bool bDirection );
+    static ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XShape > getTargetElementShape( const ::com::sun::star::uno::Any& rAny, sal_Int32& rBegin, sal_Int32& rEnd, sal_Bool& rParagraphTarget );
 };
 } // namespace ppt
 
diff --git sd/source/filter/pptx/pptx-epptooxml.cxx sd/source/filter/pptx/pptx-epptooxml.cxx
index c01206b..3121990 100644
--- sd/source/filter/pptx/pptx-epptooxml.cxx
+++ sd/source/filter/pptx/pptx-epptooxml.cxx
@@ -633,13 +633,24 @@ void PowerPointExport::WriteAnimationAttributeName( FSHelperPtr pFS, const OUStr
 
 void PowerPointExport::WriteAnimationTarget( FSHelperPtr pFS, Any aTarget )
 {
-    Reference< XShape > rXShape( aTarget, UNO_QUERY );
+    sal_Int32 nBegin = -1, nEnd = -1;
+    sal_Bool bParagraphTarget;
+    Reference< XShape > rXShape = AnimationExporter::getTargetElementShape( aTarget, nBegin, nEnd, bParagraphTarget );
 
     if( rXShape.is() ) {
     pFS->startElementNS( XML_p, XML_tgtEl, FSEND );
-    pFS->singleElementNS( XML_p, XML_spTgt,
-                  XML_spid, I32S( ShapeExport::GetShapeID( rXShape, &maShapeMap ) ),
+    pFS->startElementNS( XML_p, XML_spTgt,
+                 XML_spid, I32S( ShapeExport::GetShapeID( rXShape, &maShapeMap ) ),
+                 FSEND );
+    if( bParagraphTarget ) {
+        pFS->startElementNS( XML_p, XML_txEl, FSEND );
+        pFS->singleElementNS( XML_p, XML_pRg,
+                  XML_st, I32S( nBegin ),
+                  XML_end, I32S( nEnd ),
                   FSEND );
+        pFS->endElementNS( XML_p, XML_txEl );
+    }
+    pFS->endElementNS( XML_p, XML_spTgt );
     pFS->endElementNS( XML_p, XML_tgtEl );
     }
 }
diff --git sd/source/filter/pptx/pptx-pptexanimations.cxx sd/source/filter/pptx/pptx-pptexanimations.cxx
index 5a48766..3d4e90d 100644
--- sd/source/filter/pptx/pptx-pptexanimations.cxx
+++ sd/source/filter/pptx/pptx-pptexanimations.cxx
@@ -1761,54 +1761,69 @@ void AnimationExporter::exportAnimateTarget( SvStream& rStrm, const Reference< X
     }
 }
 
-void AnimationExporter::exportAnimateTargetElement( SvStream& rStrm, const Any aAny, const sal_Bool bCreate2b01Atom )
+Reference< XShape > AnimationExporter::getTargetElementShape( const Any& rAny, sal_Int32& rBegin, sal_Int32& rEnd, sal_Bool& rParagraphTarget )
 {
     Reference< XShape > xShape;
-    aAny >>= xShape;
-    sal_uInt32 nRefMode = 0;	// nRefMode == 2 -> Paragraph
-    sal_Int32 begin = -1;
-    sal_Int32 end = -1;
+    rAny >>= xShape;
+
+    rParagraphTarget = sal_False;
 
     if( !xShape.is() )
     {
-        ParagraphTarget aParaTarget;
-        if( aAny >>= aParaTarget )
-            xShape = aParaTarget.Shape;
-        if ( xShape.is() )
+    ParagraphTarget aParaTarget;
+    if( rAny >>= aParaTarget )
+        xShape = aParaTarget.Shape;
+    if ( xShape.is() )
+    {
+        // now calculating the character range for the paragraph
+        sal_Int16 nParagraph = aParaTarget.Paragraph;
+        Reference< XSimpleText > xText( xShape, UNO_QUERY );
+        if ( xText.is() )
+        {
+        rParagraphTarget = sal_True;
+        Reference< XEnumerationAccess > xTextParagraphEnumerationAccess( xText, UNO_QUERY );
+        if ( xTextParagraphEnumerationAccess.is() )
         {
-            // now calculating the character range for the paragraph
-            sal_Int16 nParagraph = aParaTarget.Paragraph;
-            Reference< XSimpleText > xText( xShape, UNO_QUERY );
-            if ( xText.is() )
+            Reference< XEnumeration > xTextParagraphEnumeration( xTextParagraphEnumerationAccess->createEnumeration() );
+            if ( xTextParagraphEnumeration.is() )
             {
-                nRefMode = 2;
-                Reference< XEnumerationAccess > xTextParagraphEnumerationAccess( xText, UNO_QUERY );
-                if ( xTextParagraphEnumerationAccess.is() )
+            sal_Int16 nCurrentParagraph;
+            rBegin = rEnd = nCurrentParagraph = 0;
+            while ( xTextParagraphEnumeration->hasMoreElements() )
+            {
+                Reference< XTextRange > xTextRange( xTextParagraphEnumeration->nextElement(), UNO_QUERY );
+                if ( xTextRange.is() )
                 {
-                    Reference< XEnumeration > xTextParagraphEnumeration( xTextParagraphEnumerationAccess->createEnumeration() );
-                    if ( xTextParagraphEnumeration.is() )
-                    {
-                        sal_Int16 nCurrentParagraph;
-                        begin = end = nCurrentParagraph = 0;
-                        while ( xTextParagraphEnumeration->hasMoreElements() )
-                        {
-                            Reference< XTextRange > xTextRange( xTextParagraphEnumeration->nextElement(), UNO_QUERY );
-                            if ( xTextRange.is() )
-                            {
-                                rtl::OUString aParaText( xTextRange->getString() );
-                                sal_Int32 nLength = aParaText.getLength() + 1;
-                                end += nLength;
-                                if ( nCurrentParagraph == nParagraph )
-                                    break;
-                                nCurrentParagraph++;
-                                begin += nLength;
-                            }
-                        }
-                    }
+                rtl::OUString aParaText( xTextRange->getString() );
+                sal_Int32 nLength = aParaText.getLength() + 1;
+                rEnd += nLength;
+                if ( nCurrentParagraph == nParagraph )
+                    break;
+                nCurrentParagraph++;
+                rBegin += nLength;
                 }
             }
+            }
         }
+        }
+    }
     }
+
+    return xShape;
+}
+
+void AnimationExporter::exportAnimateTargetElement( SvStream& rStrm, const Any aAny, const sal_Bool bCreate2b01Atom )
+{
+    sal_uInt32 nRefMode = 0;	// nRefMode == 2 -> Paragraph
+    sal_Int32 begin = -1;
+    sal_Int32 end = -1;
+    sal_Bool bParagraphTarget;
+
+    Reference< XShape > xShape = getTargetElementShape( aAny, begin, end, bParagraphTarget );
+
+    if( bParagraphTarget )
+        nRefMode = 2;
+
     if ( xShape.is() || bCreate2b01Atom )
     {
         EscherExContainer aAnimateTargetElement( rStrm, DFF_msofbtAnimateTargetElement );
-- 
1.7.0.1

