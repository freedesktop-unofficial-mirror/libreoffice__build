--- sc/source/filter/excel/xechart.cxx.old	2010-03-03 16:44:04.000000000 +0100
+++ sc/source/filter/excel/xechart.cxx	2010-03-03 16:59:13.000000000 +0100
@@ -36,6 +36,7 @@
 #include <com/sun/star/i18n/XBreakIterator.hpp>
 #include <com/sun/star/i18n/ScriptType.hpp>
 #include <com/sun/star/drawing/FillStyle.hpp>
+#include <com/sun/star/chart/XChartDocument.hpp>
 #include <com/sun/star/chart/ChartAxisLabelPosition.hpp>
 #include <com/sun/star/chart/ChartAxisPosition.hpp>
 #include <com/sun/star/chart/DataLabelPlacement.hpp>
@@ -975,6 +976,13 @@ void XclExpChSourceLink::ConvertNumFmt(
     }
 }
 
+void XclExpChSourceLink::AppendString( const String& rStr )
+{
+    if (!mxString.is())
+        return;
+    XclExpStringHelper::AppendString( *mxString, GetRoot(), rStr );
+}
+
 void XclExpChSourceLink::Save( XclExpStream& rStrm )
 {
     // CHFORMATRUNS record
@@ -1104,7 +1112,7 @@ void XclExpChText::SetRotation( sal_uInt
     ::insert_value( maData.mnFlags, XclTools::GetXclOrientFromRot( nRotation ), 8, 3 );
 }
 
-void XclExpChText::ConvertTitle( Reference< XTitle > xTitle, sal_uInt16 nTarget )
+void XclExpChText::ConvertTitle( Reference< XTitle > xTitle, sal_uInt16 nTarget, const String* pSubTitle )
 {
     switch( nTarget )
     {
@@ -1126,6 +1134,14 @@ void XclExpChText::ConvertTitle( Referen
         // string sequence
         mxSrcLink.reset( new XclExpChSourceLink( GetChRoot(), EXC_CHSRCLINK_TITLE ) );
         sal_uInt16 nFontIdx = mxSrcLink->ConvertStringSequence( xTitle->getText() );
+        if (pSubTitle)
+        {
+            // append subtitle as the 2nd line of the title.
+            String aSubTitle = String::CreateFromAscii("\n");
+            aSubTitle.Append(*pSubTitle);
+            mxSrcLink->AppendString(aSubTitle);
+        }
+
         ConvertFontBase( GetChRoot(), nFontIdx );
 
         // rotation
@@ -1301,14 +1317,15 @@ void XclExpChText::WriteBody( XclExpStre
 namespace {
 
 /** Creates and returns an Excel text object from the passed title. */
-XclExpChTextRef lclCreateTitle( const XclExpChRoot& rRoot, Reference< XTitled > xTitled, sal_uInt16 nTarget )
+XclExpChTextRef lclCreateTitle( const XclExpChRoot& rRoot, Reference< XTitled > xTitled, sal_uInt16 nTarget,
+                                const String* pSubTitle = NULL )
 {
     Reference< XTitle > xTitle;
     if( xTitled.is() )
         xTitle = xTitled->getTitleObject();
 
     XclExpChTextRef xText( new XclExpChText( rRoot ) );
-    xText->ConvertTitle( xTitle, nTarget );
+    xText->ConvertTitle( xTitle, nTarget, pSubTitle );
     /*  Do not delete the CHTEXT group for the main title. A missing CHTEXT
         will be interpreted as auto-generated title showing the series title in
         charts that contain exactly one data series. */
@@ -2969,6 +2986,23 @@ void XclExpChAxesSet::WriteBody( XclExpS
 
 // The chart object ===========================================================
 
+static void lcl_getChartSubTitle(const Reference<XChartDocument>& xChartDoc, 
+                                 String& rSubTitle)
+{
+    Reference< ::com::sun::star::chart::XChartDocument > xChartDoc1(xChartDoc, UNO_QUERY);
+    if (!xChartDoc1.is())
+        return;
+
+    Reference< XPropertySet > xProp(xChartDoc1->getSubTitle(), UNO_QUERY);
+    if (!xProp.is())
+        return;
+
+    OUString aTitle;
+    Any any = xProp->getPropertyValue( OUString::createFromAscii("String") );
+    if (any >>= aTitle)
+        rSubTitle = aTitle;
+}
+
 XclExpChChart::XclExpChChart( const XclExpRoot& rRoot,
         Reference< XChartDocument > xChartDoc, const Size& rSize ) :
     XclExpChGroupBase( XclExpChRoot( rRoot, this ), EXC_CHFRBLOCK_TYPE_CHART, EXC_ID_CHCHART, 16 )
@@ -3006,7 +3040,10 @@ XclExpChChart::XclExpChChart( const XclE
 
         // chart title
         Reference< XTitled > xTitled( xChartDoc, UNO_QUERY );
-        mxTitle = lclCreateTitle( GetChRoot(), xTitled, EXC_CHOBJLINK_TITLE );
+        String aSubTitle;
+        lcl_getChartSubTitle(xChartDoc, aSubTitle);
+        mxTitle = lclCreateTitle( GetChRoot(), xTitled, EXC_CHOBJLINK_TITLE, 
+                                  aSubTitle.Len() ? &aSubTitle : NULL );
 
         // diagrams (axes sets)
         sal_uInt16 nFreeGroupIdx = mxPrimAxesSet->Convert( xDiagram, 0 );
--- sc/source/filter/inc/xechart.hxx.old	2010-03-03 16:44:04.000000000 +0100
+++ sc/source/filter/inc/xechart.hxx	2010-03-03 16:59:13.000000000 +0100
@@ -383,6 +383,8 @@ public:
     /** Converts the number format from the passed property set. */
     void                ConvertNumFmt( const ScfPropertySet& rPropSet, bool bPercent );
 
+    void                AppendString( const String& rStr );
+
     /** Returns true, if this source link contains explicit string data. */
     inline bool         HasString() const { return mxString.is() && !mxString->IsEmpty(); }
 
@@ -494,7 +496,7 @@ public:
     virtual void        SetRotation( sal_uInt16 nRotation );
 
     /** Converts all text settings of the passed title text object. */
-    void                ConvertTitle( XTitleRef xTitle, sal_uInt16 nTarget );
+    void                ConvertTitle( XTitleRef xTitle, sal_uInt16 nTarget, const String* pSubTitle = NULL );
     /** Converts all text settings of the passed legend. */
     void                ConvertLegend( const ScfPropertySet& rPropSet );
     /** Converts all settings of the passed data point caption text object. */
