diff --git desktop/source/app/appinit.cxx desktop/source/app/appinit.cxx
index 6a982ad..e4c1168 100644
--- desktop/source/app/appinit.cxx
+++ desktop/source/app/appinit.cxx
@@ -153,7 +153,7 @@
                 {
                     Reference<XContentProviderManager> xCPM =
                         cb->getContentProviderManagerInterface();
-#if 0
+
                     try
                     {
 
@@ -174,30 +174,7 @@
                     } catch (...)
                     {
                     }
-#else
-
-		    // Workaround for P1 #124597#.  Instanciate GNOME-VFS-UCP in the thread that initialized
- 		    // GNOME in order to avoid a deadlock that may occure in case UCP gets initialized from
-		    // a different thread. The latter may happen when calling the Office remotely via UNO.  
-		    // THIS IS NOT A FIX, JUST A WORKAROUND!
-
-                    try
-                    {
-                        Reference<XContentProvider> xCP(
-                            xServiceFactory->createInstance(
-                                rtl::OUString::createFromAscii(
-                                    "com.sun.star.ucb.GnomeVFSContentProvider")),
-                            UNO_QUERY);
-                        if(xCP.is())
-                            xCPM->registerContentProvider(
-                                xCP,
-                                rtl::OUString::createFromAscii(".*"),
-                                false);
-                    } catch (...)
-                    {
-                    }
                 }
-#endif
             }
         } catch (RuntimeException e) {
         }
--- ucb/prj/build.lst-old	2009-03-05 14:42:20.000000000 +0100
+++ ucb/prj/build.lst	2009-03-05 14:42:26.000000000 +0100
@@ -1,4 +1,4 @@
-uc ucb : cppuhelper CURL:curl OPENSSL:openssl NEON:neon LIBXML2:libxml2 offapi sal salhelper ucbhelper udkapi comphelper NULL
+uc ucb : cppuhelper CURL:curl OPENSSL:openssl NEON:neon LIBXML2:libxml2 offapi sal salhelper ucbhelper udkapi comphelper vcl NULL
 uc	ucb							usr1	-	all	uc_mkout NULL
 uc	ucb\inc					    nmake	-	all	uc_inc NULL
 uc	ucb\source\regexp		    nmake	-	all	uc_regexp uc_inc NULL
diff --git ucb/source/ucp/gvfs/makefile.mk ucb/source/ucp/gvfs/makefile.mk
index 8351f6c..3bca046 100644
--- ucb/source/ucp/gvfs/makefile.mk
+++ ucb/source/ucp/gvfs/makefile.mk
@@ -84,6 +84,7 @@ SHL1STDLIBS=\
 	$(CPPULIB) \
 	$(SALLIB)  \
 	$(SALHELPERLIB)  \
+    $(VCLLIB)  \
 	$(UCBHELPERLIB)
 
 SHL1STDLIBS+=$(PKGCONFIG_LIBS)
diff --git ucb/source/ucp/gvfs/provider.cxx ucb/source/ucp/gvfs/provider.cxx
index df36cfa..dad5dcb 100644
--- ucb/source/ucp/gvfs/provider.cxx
+++ ucb/source/ucp/gvfs/provider.cxx
@@ -32,6 +32,9 @@
 #include "precompiled_ucb.hxx"
 
 #include <ucbhelper/contentidentifier.hxx>
+#include <osl/mutex.hxx>
+#include <vcl/svapp.hxx>
+
 #include <libgnomevfs/gnome-vfs-init.h>
 #include "provider.hxx"
 #include "content.hxx"
@@ -198,6 +201,55 @@ component_writeInfo( void */*pServiceManager*/,
 			   ::gvfs::ContentProvider::getImplementationName_Static(),
 			   ::gvfs::ContentProvider::getSupportedServiceNames_Static() );
 }
+
+/* This class is here to be able to initialize gnome-vfs in the main thread */
+class GnomeVFSInitializator
+{
+private:
+    osl::Mutex m_aLock;
+    bool m_bInitialized;
+
+public:
+    GnomeVFSInitializator() : m_bInitialized( false ) {}
+
+    void init()
+    {
+        Application::PostUserEvent( LINK( this, GnomeVFSInitializator, ImplInitializeGnomeVFS ) );
+
+        // cannot use a condition variable here, leads to a deadlock
+        while (1)
+        {
+            {
+                osl::MutexGuard aGuard( m_aLock );
+                if ( m_bInitialized )
+                    break;
+            }
+            Application::Yield();
+        }
+    }
+
+private:
+    DECL_LINK( ImplInitializeGnomeVFS, void* );
+};
+
+IMPL_LINK( GnomeVFSInitializator, ImplInitializeGnomeVFS, void*, EMPTYARG )
+{
+    osl::MutexGuard aGuard( osl::Mutex::getGlobalMutex() );
+
+    // this must be performed in the same thread where we initialized
+    // Gtk+ (if we did)
+    if ( !gnome_vfs_initialized () )
+        gnome_vfs_init ();
+    if ( !auth_queue )
+        auth_queue = g_private_new( auth_queue_destroy );
+
+    m_aLock.acquire();
+    m_bInitialized = true;
+    m_aLock.release();
+
+    return 0;
+}
+
 extern "C" void * SAL_CALL
 component_getFactory( const sal_Char *pImplName,
 		      void           *pServiceManager,
@@ -205,13 +257,8 @@ component_getFactory( const sal_Char *pImplName,
 {
 	void * pRet = 0;
 
-	{
-		osl::Guard< osl::Mutex > aGuard( osl::Mutex::getGlobalMutex() );
-		if (!gnome_vfs_initialized ())
-			gnome_vfs_init ();
-		if (!auth_queue)
-			auth_queue = g_private_new( auth_queue_destroy );
-	}
+    GnomeVFSInitializator aInitializator;
+    aInitializator.init();
 
 	uno::Reference< lang::XMultiServiceFactory > xSMgr
 		(reinterpret_cast< lang::XMultiServiceFactory * >( pServiceManager ) );
