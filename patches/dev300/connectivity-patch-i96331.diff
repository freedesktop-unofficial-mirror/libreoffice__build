Index: connectivity/source/drivers/evoab2/NStatement.cxx
===================================================================
--- connectivity/source/drivers/evoab2/NStatement.cxx	(revision 264185)
+++ connectivity/source/drivers/evoab2/NStatement.cxx	(revision 264302)
@@ -44,6 +44,7 @@
 #include "NConnection.hxx"
 #include "NResultSet.hxx"
 #include "NDebug.hxx"
+#include <resource/common_res.hrc>
 #include <connectivity/dbexception.hxx>
 
 using namespace connectivity::evoab;
@@ -262,10 +263,10 @@ EBookQuery *OStatement_Base::whereAnalysis( const
 			   // odbc date
 			   (SQL_ISRULE( parseTree->getChild( 2 ), set_fct_spec ) &&
 				SQL_ISPUNCTUATION( parseTree->getChild( 2 )->getChild( 0 ), "{" ) ) ) )
-			    getConnection()->throwGenericSQLException(STR_QUERY_TOO_COMPLEX,*this);
+			    m_pConnection->throwGenericSQLException(STR_QUERY_TOO_COMPLEX,*this);
 
         if (pPrec->getNodeType() != SQL_NODE_EQUAL && pPrec->getNodeType() != SQL_NODE_NOTEQUAL)
-            getConnection()->throwGenericSQLException(STR_OPERATOR_TOO_COMPLEX,*this);
+            m_pConnection->throwGenericSQLException(STR_OPERATOR_TOO_COMPLEX,*this);
 
 		rtl::OUString aMatchString;
 		rtl::OUString aColumnName;
@@ -299,7 +300,7 @@ EBookQuery *OStatement_Base::whereAnalysis( const
 		}
                                                                                                     
         if( ! SQL_ISRULE( parseTree->getChild( 0 ), column_ref) )
-            getConnection()->throwGenericSQLException(STR_QUERY_INVALID_LIKE_COLUMN,*this);
+            m_pConnection->throwGenericSQLException(STR_QUERY_INVALID_LIKE_COLUMN,*this);
                                                                                                     
         OSQLParseNode *pColumn    = parseTree->getChild( 0 );                          // Match Item
         OSQLParseNode *pAtom      = parseTree->getChild( parseTree->count() - 2 );     // Match String
@@ -312,7 +313,7 @@ EBookQuery *OStatement_Base::whereAnalysis( const
 			   ( pAtom->getChild( 0 ) && pAtom->getChild( 0 )->getNodeType() == SQL_NODE_STRING ) ) )
         {
             OSL_TRACE( "analyseSQL : pAtom->count() = %d\n", pAtom->count() );
-            getConnection()->throwGenericSQLException(STR_QUERY_INVALID_LIKE_STRING,*this);
+            m_pConnection->throwGenericSQLException(STR_QUERY_INVALID_LIKE_STRING,*this);
         }
 
         const sal_Unicode WILDCARD = '%';
@@ -342,7 +343,7 @@ EBookQuery *OStatement_Base::whereAnalysis( const
 			else if( bNotLike )
 			{
 				// We currently can't handle a 'NOT LIKE' when there are '%' 
-                getConnection()->throwGenericSQLException(STR_QUERY_NOT_LIKE_TOO_COMPLEX,*this);
+                m_pConnection->throwGenericSQLException(STR_QUERY_NOT_LIKE_TOO_COMPLEX,*this);
 			}
 			else if( (aMatchString.indexOf ( WILDCARD ) == aMatchString.lastIndexOf ( WILDCARD ) ) )
 			{   // One occurance of '%'  matches...
@@ -351,7 +352,7 @@ EBookQuery *OStatement_Base::whereAnalysis( const
                 else if ( aMatchString.indexOf ( WILDCARD ) == aMatchString.getLength() - 1 )
 					pResult = createTest( aColumnName, E_BOOK_QUERY_BEGINS_WITH, aMatchString.copy( 0, aMatchString.getLength() - 1 ) );
 				else
-                    getConnection()->throwGenericSQLException(STR_QUERY_LIKE_WILDCARD,*this);
+                    m_pConnection->throwGenericSQLException(STR_QUERY_LIKE_WILDCARD,*this);
 
 				if( pResult && bNotLike )
 					pResult = e_book_query_not( pResult, TRUE );
@@ -363,7 +364,7 @@ EBookQuery *OStatement_Base::whereAnalysis( const
 				pResult = createTest( aColumnName, E_BOOK_QUERY_CONTAINS, aMatchString.copy (1, aMatchString.getLength() - 2) );
 			}
 			else
-                getConnection()->throwGenericSQLException(STR_QUERY_LIKE_WILDCARD_MANY,*this);
+                m_pConnection->throwGenericSQLException(STR_QUERY_LIKE_WILDCARD_MANY,*this);
 		}
 		else
 			OSL_ASSERT( "Serious internal error" );
@@ -462,7 +463,7 @@ Reference< XResultSet > SAL_CALL OStatement_Base::
 		e_book_query_unref( pQuery );
 		xColumns = m_aSQLIterator.getSelectColumns();
 		if (!xColumns.isValid())
-            getConnection()->throwGenericSQLException(STR_QUERY_TOO_COMPLEX,*this);
+            m_pConnection->throwGenericSQLException(STR_QUERY_TOO_COMPLEX,*this);
 
         OEvoabResultSetMetaData *pMeta = (OEvoabResultSetMetaData *) pResult->getMetaData().get();
 		pMeta->setEvoabFields(xColumns);
Index: connectivity/source/drivers/evoab2/NResultSetMetaData.cxx
===================================================================
--- connectivity/source/drivers/evoab2/NResultSetMetaData.cxx	(revision 264185)
+++ connectivity/source/drivers/evoab2/NResultSetMetaData.cxx	(revision 264302)
@@ -66,7 +66,7 @@ void OEvoabResultSetMetaData::setEvoabFields(const
                 guint nFieldNumber = findEvoabField(aFieldName);
 		        if (nFieldNumber == (guint)-1)
                 {
-                    :.connectivity::SharedResource aResource;
+                    connectivity::SharedResources aResource;
                     const ::rtl::OUString sError( aResource.getResourceStringWithSubstitution(
                             STR_INVALID_COLUMNNAME,
                             "$columnname$", aFieldName
