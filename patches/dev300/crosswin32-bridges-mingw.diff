--- bridges/source/cpp_uno/mingw_intel/except.cxx.orig	2009-06-28 16:52:19.000000000 +0200
+++ bridges/source/cpp_uno/mingw_intel/except.cxx	2009-06-28 16:56:26.000000000 +0200
@@ -32,5 +32,6 @@
 #include "precompiled_bridges.hxx"
 
 #include <stdio.h>
+#include <string.h>
 #include <cxxabi.h>
 #include <hash_map>

--- bridges/source/cpp_uno/mingw_intel/call.s.orig	2009-06-28 16:58:39.000000000 +0200
+++ bridges/source/cpp_uno/mingw_intel/call.s	2009-06-29 13:08:00.000000000 +0200
@@ -1,14 +1,11 @@
     .text
 
 .globl _privateSnippetExecutorGeneral
-    .type   _privateSnippetExecutorGeneral,@function
+    .def _privateSnippetExecutorGeneral;  .scl	2;	.type	32;	.endef
 _privateSnippetExecutorGeneral:
-.LFBg:
     movl    %esp,%ecx
     pushl   %ebp              # proper stack frame needed for exception handling
-.LCFIg0:
     movl    %esp,%ebp
-.LCFIg1:
     subl    $0x4,%esp         # 32bit returnValue
     pushl   %esp              # 32bit &returnValue
     pushl   %ecx              # 32bit pCallStack
@@ -18,18 +15,13 @@
     movl    16(%esp),%eax     # 32bit returnValue
     leave
     ret
-.LFEg:
-    .size   _privateSnippetExecutorGeneral,.-_privateSnippetExecutorGeneral
 
 .globl _privateSnippetExecutorVoid
-    .type   _privateSnippetExecutorVoid,@function
+    .def  _privateSnippetExecutorVoid; .scl	2;	.type	32;	.endef
 _privateSnippetExecutorVoid:
-.LFBv:
     movl    %esp,%ecx
     pushl   %ebp              # proper stack frame needed for exception handling
-.LCFIv0:
     movl    %esp,%ebp
-.LCFIv1:
     pushl   $0                # 32bit null pointer (returnValue not used)
     pushl   %ecx              # 32bit pCallStack
     pushl   %edx              # 32bit nVtableOffset
@@ -37,18 +29,13 @@
     call    _cpp_vtable_call
     leave
     ret
-.LFEv:
-    .size   _privateSnippetExecutorVoid,.-_privateSnippetExecutorVoid
 
 .globl _privateSnippetExecutorHyper
-    .type   _privateSnippetExecutorHyper,@function
+    .def   _privateSnippetExecutorHyper; .scl	2;	.type	32;	.endef
 _privateSnippetExecutorHyper:
-.LFBh:
     movl    %esp,%ecx
     pushl   %ebp              # proper stack frame needed for exception handling
-.LCFIh0:
     movl    %esp,%ebp
-.LCFIh1:
     subl    $0x8,%esp         # 64bit returnValue
     pushl   %esp              # 32bit &returnValue
     pushl   %ecx              # 32bit pCallStack
@@ -59,18 +46,13 @@
     movl    20(%esp),%edx     # 64bit returnValue, upper half
     leave
     ret
-.LFEh:
-    .size   _privateSnippetExecutorHyper,.-_privateSnippetExecutorHyper
 
 .globl _privateSnippetExecutorFloat
-    .type   _privateSnippetExecutorFloat,@function
+    .def   _privateSnippetExecutorFloat; .scl	2;	.type	32;	.endef
 _privateSnippetExecutorFloat:
-.LFBf:
     movl    %esp,%ecx
     pushl   %ebp              # proper stack frame needed for exception handling
-.LCFIf0:
     movl    %esp,%ebp
-.LCFIf1:
     subl    $0x4,%esp         # 32bit returnValue
     pushl   %esp              # 32bit &returnValue
     pushl   %ecx              # 32bit pCallStack
@@ -80,18 +62,13 @@
     flds    16(%esp)          # 32bit returnValue
     leave
     ret
-.LFEf:
-    .size   _privateSnippetExecutorFloat,.-_privateSnippetExecutorFloat
 
 .globl _privateSnippetExecutorDouble
-    .type   _privateSnippetExecutorDouble,@function
+    .def   _privateSnippetExecutorDouble; .scl	2;	.type	32;	.endef
 _privateSnippetExecutorDouble:
-.LFBd:
     movl    %esp,%ecx
     pushl   %ebp              # proper stack frame needed for exception handling
-.LCFId0:
     movl    %esp,%ebp
-.LCFId1:
     subl    $0x8,%esp         # 64bit returnValue
     pushl   %esp              # 32bit &returnValue
     pushl   %ecx              # 32bit pCallStack
@@ -101,18 +78,13 @@
     fldl    16(%esp)          # 64bit returnValue
     leave
     ret
-.LFEd:
-    .size   _privateSnippetExecutorDouble,.-_privateSnippetExecutorDouble
 
 .globl _privateSnippetExecutorClass
-    .type   _privateSnippetExecutorClass,@function
+    .def   _privateSnippetExecutorClass; .scl	2;	.type	32;	.endef
 _privateSnippetExecutorClass:
-.LFBc:
     movl    %esp,%ecx
     pushl   %ebp              # proper stack frame needed for exception handling
-.LCFIc0:
     movl    %esp,%ebp
-.LCFIc1:
     subl    $0x4,%esp         # 32bit returnValue
     pushl   %esp              # 32bit &returnValue
     pushl   %ecx              # 32bit pCallStack
@@ -122,147 +94,3 @@
     movl    16(%esp),%eax     # 32bit returnValue
     leave
     ret     $4
-.LFEc:
-    .size   _privateSnippetExecutorClass,.-_privateSnippetExecutorClass
-
-    .section .eh_frame,"a",@progbits
-.Lframe1:
-    .long   .LECIE1-.LSCIE1   # length
-.LSCIE1:
-    .long   0                 # CIE_ID
-    .byte   1                 # version
-    .string "zR"              # augmentation
-    .uleb128 1                # code_alignment_factor
-    .sleb128 -4               # data_alignment_factor
-    .byte   8                 # return_address_register
-    .uleb128 1                # augmentation size 1:
-    .byte   0x1B              #  FDE Encoding (pcrel sdata4)
-                              # initial_instructions:
-    .byte   0x0C              #  DW_CFA_def_cfa %esp, 4
-    .uleb128 4
-    .uleb128 4
-    .byte   0x88              #  DW_CFA_offset ret, 1
-    .uleb128 1
-    .align 4
-.LECIE1:
-.LSFDEg:
-    .long   .LEFDEg-.LASFDEg  # length
-.LASFDEg:
-    .long   .LASFDEg-.Lframe1 # CIE_pointer
-    .long   .LFBg-.           # initial_location
-    .long   .LFEg-.LFBg       # address_range
-    .uleb128 0                # augmentation size 0
-                              # instructions:
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIg0-.LFBg
-    .byte   0x0E              #  DW_CFA_def_cfa_offset 8
-    .uleb128 8
-    .byte   0x85              #  DW_CFA_offset %ebp, 2
-    .uleb128 2
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIg1-.LCFIg0
-    .byte   0x0D              #  DW_CFA_def_cfa_register %ebp
-    .uleb128 5
-    .align 4
-.LEFDEg:
-.LSFDEv:
-    .long   .LEFDEv-.LASFDEv  # length
-.LASFDEv:
-    .long   .LASFDEv-.Lframe1 # CIE_pointer
-    .long   .LFBv-.           # initial_location
-    .long   .LFEv-.LFBv       # address_range
-    .uleb128 0                # augmentation size 0
-                              # instructions:
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIv0-.LFBv
-    .byte   0x0E              #  DW_CFA_def_cfa_offset 8
-    .uleb128 8
-    .byte   0x85              #  DW_CFA_offset %ebp, 2
-    .uleb128 2
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIv1-.LCFIv0
-    .byte   0x0D              #  DW_CFA_def_cfa_register %ebp
-    .uleb128 5
-    .align 4
-.LEFDEv:
-.LSFDEh:
-    .long   .LEFDEh-.LASFDEh  # length
-.LASFDEh:
-    .long   .LASFDEh-.Lframe1 # CIE_pointer
-    .long   .LFBh-.           # initial_location
-    .long   .LFEh-.LFBh       # address_range
-    .uleb128 0                # augmentation size 0
-                              # instructions:
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIh0-.LFBh
-    .byte   0x0E              #  DW_CFA_def_cfa_offset 8
-    .uleb128 8
-    .byte   0x85              #  DW_CFA_offset %ebp, 2
-    .uleb128 2
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIh1-.LCFIh0
-    .byte   0x0D              #  DW_CFA_def_cfa_register %ebp
-    .uleb128 5
-    .align 4
-.LEFDEh:
-.LSFDEf:
-    .long   .LEFDEf-.LASFDEf  # length
-.LASFDEf:
-    .long   .LASFDEf-.Lframe1 # CIE_pointer
-    .long   .LFBf-.           # initial_location
-    .long   .LFEf-.LFBf       # address_range
-    .uleb128 0                # augmentation size 0
-                              # instructions:
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIf0-.LFBf
-    .byte   0x0E              #  DW_CFA_def_cfa_offset 8
-    .uleb128 8
-    .byte   0x85              #  DW_CFA_offset %ebp, 2
-    .uleb128 2
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIf1-.LCFIf0
-    .byte   0x0D              #  DW_CFA_def_cfa_register %ebp
-    .uleb128 5
-    .align 4
-.LEFDEf:
-.LSFDEd:
-    .long   .LEFDEd-.LASFDEd  # length
-.LASFDEd:
-    .long   .LASFDEd-.Lframe1 # CIE_pointer
-    .long   .LFBd-.           # initial_location
-    .long   .LFEd-.LFBd       # address_range
-    .uleb128 0                # augmentation size 0
-                              # instructions:
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFId0-.LFBd
-    .byte   0x0E              #  DW_CFA_def_cfa_offset 8
-    .uleb128 8
-    .byte   0x85              #  DW_CFA_offset %ebp, 2
-    .uleb128 2
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFId1-.LCFId0
-    .byte   0x0D              #  DW_CFA_def_cfa_register %ebp
-    .uleb128 5
-    .align 4
-.LEFDEd:
-.LSFDEc:
-    .long   .LEFDEc-.LASFDEc  # length
-.LASFDEc:
-    .long   .LASFDEc-.Lframe1 # CIE_pointer
-    .long   .LFBc-.           # initial_location
-    .long   .LFEc-.LFBc       # address_range
-    .uleb128 0                # augmentation size 0
-                              # instructions:
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIc0-.LFBc
-    .byte   0x0E              #  DW_CFA_def_cfa_offset 8
-    .uleb128 8
-    .byte   0x85              #  DW_CFA_offset %ebp, 2
-    .uleb128 2
-    .byte   0x04              #  DW_CFA_advance_loc4
-    .long   .LCFIc1-.LCFIc0
-    .byte   0x0D              #  DW_CFA_def_cfa_register %ebp
-    .uleb128 5
-    .align 4
-.LEFDEc:
-    .section .note.GNU-stack,"",@progbits
