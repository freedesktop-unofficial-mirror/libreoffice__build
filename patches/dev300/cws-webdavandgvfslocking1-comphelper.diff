Index: comphelper/inc/comphelper/stillreadwriteinteraction.hxx
===================================================================
RCS file: comphelper/inc/comphelper/stillreadwriteinteraction.hxx
diff -N comphelper/inc/comphelper/stillreadwriteinteraction.hxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ comphelper/inc/comphelper/stillreadwriteinteraction.hxx	4 Jun 2008 13:51:24 -0000	1.1.2.2
@@ -0,0 +1,62 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef _COMPHELPER_STILLREADWRITEINTERACTION_HXX_
+#define _COMPHELPER_STILLREADWRITEINTERACTION_HXX_
+
+#include "comphelper/comphelperdllapi.h"
+#include <ucbhelper/interceptedinteraction.hxx>
+
+namespace comphelper{
+
+class COMPHELPER_DLLPUBLIC StillReadWriteInteraction : public ::ucbhelper::InterceptedInteraction
+{
+    private:
+		static const sal_Int32 HANDLE_INTERACTIVEIOEXCEPTION       = 0;
+		static const sal_Int32 HANDLE_UNSUPPORTEDDATASINKEXCEPTION = 1;
+
+		sal_Bool m_bUsed;
+		sal_Bool m_bHandledByMySelf;
+		sal_Bool m_bHandledByInternalHandler;
+
+    public:
+		StillReadWriteInteraction( const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionHandler >& xHandler );
+		void resetInterceptions();
+		void resetErrorStates();
+        sal_Bool wasWriteError();
+
+    private:
+		virtual ucbhelper::InterceptedInteraction::EInterceptionState intercepted( const ::ucbhelper::InterceptedInteraction::InterceptedRequest&                         aRequest,
+																				   const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionRequest >& xRequest );
+};
+
+} // namespace comphelper
+
+#endif // _COMPHELPER_STILLREADWRITEINTERACTION_HXX_
Index: comphelper/source/misc/mediadescriptor.cxx
===================================================================
RCS file: /cvs/util/comphelper/source/misc/mediadescriptor.cxx,v
retrieving revision 1.19
retrieving revision 1.17.86.2
diff -u -p -u -p -B -r1.19 -r1.17.86.2
--- comphelper/source/misc/mediadescriptor.cxx	15 Apr 2008 14:23:00 -0000	1.19
+++ comphelper/source/misc/mediadescriptor.cxx	2 Jun 2008 14:03:09 -0000	1.17.86.2
@@ -30,61 +30,28 @@
 
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_comphelper.hxx"
+
 #include <comphelper/mediadescriptor.hxx>
+#include <comphelper/stillreadwriteinteraction.hxx>
 
 //_______________________________________________
 // includes
 
-#ifndef __COM_SUN_STAR_UCB_XCONTENT_HPP__
 #include <com/sun/star/ucb/XContent.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_UCB_XCOMMANDENVIRONMENT_HPP__
 #include <com/sun/star/ucb/XCommandEnvironment.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_TASK_XINTERACTIONHANDLER_HPP__
 #include <com/sun/star/task/XInteractionHandler.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_IO_XSTREAM_HPP__
 #include <com/sun/star/io/XStream.hpp>
-#endif
 #include <com/sun/star/io/XActiveDataSink.hpp>
 #include <com/sun/star/io/XSeekable.hpp>
-
-#ifndef __COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP__
 #include <com/sun/star/lang/XMultiServiceFactory.hpp>
-#endif
 #include <com/sun/star/lang/IllegalArgumentException.hpp>
-
-#ifndef __COM_SUN_STAR_UTIL_XURLTRANSFORMER_HPP__
 #include <com/sun/star/util/XURLTransformer.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_UCB_INTERACTIVEIOEXCEPTION_HPP__
 #include <com/sun/star/ucb/InteractiveIOException.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_UCB_UNSUPPORTEDDATASINKEXCEPTION_HPP__
 #include <com/sun/star/ucb/UnsupportedDataSinkException.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_UCB_COMMANDFAILEDEXCEPTION_HPP__
 #include <com/sun/star/ucb/CommandFailedException.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_TASK_XINTERACTIONABORT_HPP__
 #include <com/sun/star/task/XInteractionAbort.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_URI_XURIREFERENCEFACTORY_HPP__
 #include <com/sun/star/uri/XUriReferenceFactory.hpp>
-#endif
-
-#ifndef __COM_SUN_STAR_URI_XURIREFERENCE_HPP__
 #include <com/sun/star/uri/XUriReference.hpp>
-#endif
 #include <com/sun/star/ucb/PostCommandArgument2.hpp>
 #include <ucbhelper/interceptedinteraction.hxx>
 #include <ucbhelper/content.hxx>
@@ -93,9 +60,7 @@
 #include <comphelper/processfactory.hxx>
 
 #if OSL_DEBUG_LEVEL>0
-    #ifndef _RTL_USTRBUF_HXX_
     #include <rtl/ustrbuf.hxx>
-    #endif
 #endif
 
 //_______________________________________________
@@ -619,109 +584,97 @@ sal_Bool MediaDescriptor::impl_openStrea
 }
 
 /*-----------------------------------------------*/
-class StillReadWriteInteraction : public ::ucbhelper::InterceptedInteraction
+StillReadWriteInteraction::StillReadWriteInteraction(const css::uno::Reference< css::task::XInteractionHandler >& xHandler)
+: m_bUsed                    (sal_False)
+, m_bHandledByMySelf         (sal_False)
+, m_bHandledByInternalHandler(sal_False)
 {
-    private:
-		static const sal_Int32 HANDLE_INTERACTIVEIOEXCEPTION       = 0;
-		static const sal_Int32 HANDLE_UNSUPPORTEDDATASINKEXCEPTION = 1;
-
-		sal_Bool m_bUsed;
-		sal_Bool m_bHandledByMySelf;
-		sal_Bool m_bHandledByInternalHandler;
-
-    public:
-		StillReadWriteInteraction(const css::uno::Reference< css::task::XInteractionHandler >& xHandler)
-			: m_bUsed                    (sal_False)
-			, m_bHandledByMySelf         (sal_False)
-			, m_bHandledByInternalHandler(sal_False)
-		{
-			::std::vector< ::ucbhelper::InterceptedInteraction::InterceptedRequest > lInterceptions;
-			::ucbhelper::InterceptedInteraction::InterceptedRequest                  aInterceptedRequest;
+    ::std::vector< ::ucbhelper::InterceptedInteraction::InterceptedRequest > lInterceptions;
+    ::ucbhelper::InterceptedInteraction::InterceptedRequest                  aInterceptedRequest;
 
-			aInterceptedRequest.Handle               = HANDLE_INTERACTIVEIOEXCEPTION;
-			aInterceptedRequest.Request            <<= css::ucb::InteractiveIOException();
-			aInterceptedRequest.Continuation         = ::getCppuType(static_cast< css::uno::Reference< css::task::XInteractionAbort >* >(0));
-			aInterceptedRequest.MatchExact           = sal_False;
-			lInterceptions.push_back(aInterceptedRequest);
-
-			aInterceptedRequest.Handle               = HANDLE_UNSUPPORTEDDATASINKEXCEPTION;
-			aInterceptedRequest.Request            <<= css::ucb::UnsupportedDataSinkException();
-			aInterceptedRequest.Continuation         = ::getCppuType(static_cast< css::uno::Reference< css::task::XInteractionAbort >* >(0));
-			aInterceptedRequest.MatchExact           = sal_False;
-			lInterceptions.push_back(aInterceptedRequest);
+    aInterceptedRequest.Handle               = HANDLE_INTERACTIVEIOEXCEPTION;
+    aInterceptedRequest.Request            <<= css::ucb::InteractiveIOException();
+    aInterceptedRequest.Continuation         = ::getCppuType(static_cast< css::uno::Reference< css::task::XInteractionAbort >* >(0));
+    aInterceptedRequest.MatchExact           = sal_False;
+    lInterceptions.push_back(aInterceptedRequest);
 
-			setInterceptedHandler(xHandler);
-			setInterceptions(lInterceptions);
-		}
+    aInterceptedRequest.Handle               = HANDLE_UNSUPPORTEDDATASINKEXCEPTION;
+    aInterceptedRequest.Request            <<= css::ucb::UnsupportedDataSinkException();
+    aInterceptedRequest.Continuation         = ::getCppuType(static_cast< css::uno::Reference< css::task::XInteractionAbort >* >(0));
+    aInterceptedRequest.MatchExact           = sal_False;
+    lInterceptions.push_back(aInterceptedRequest);
 
-		void resetInterceptions()
-		{
-			setInterceptions(::std::vector< ::ucbhelper::InterceptedInteraction::InterceptedRequest >());
-		}
+    setInterceptedHandler(xHandler);
+    setInterceptions(lInterceptions);
+}
 
-		void resetErrorStates()
-		{
-			m_bUsed                     = sal_False;
-			m_bHandledByMySelf          = sal_False;
-			m_bHandledByInternalHandler = sal_False;
-		}
+void StillReadWriteInteraction::resetInterceptions()
+{
+    setInterceptions(::std::vector< ::ucbhelper::InterceptedInteraction::InterceptedRequest >());
+}
+
+void StillReadWriteInteraction::resetErrorStates()
+{
+    m_bUsed                     = sal_False;
+    m_bHandledByMySelf          = sal_False;
+    m_bHandledByInternalHandler = sal_False;
+}
+
+sal_Bool StillReadWriteInteraction::wasWriteError()
+{
+    return (m_bUsed && m_bHandledByMySelf);
+}
+
+ucbhelper::InterceptedInteraction::EInterceptionState StillReadWriteInteraction::intercepted(
+                                                      const ::ucbhelper::InterceptedInteraction::InterceptedRequest&                         aRequest,
+                                                      const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionRequest >& xRequest)
+{
+    // we are used!
+    m_bUsed = sal_True;
 
-        sal_Bool wasWriteError()
+    // check if its a real interception - might some parameters are not the right ones ...
+    sal_Bool bAbort = sal_False;
+    switch(aRequest.Handle)
+    {
+        case HANDLE_INTERACTIVEIOEXCEPTION:
         {
-            return (m_bUsed && m_bHandledByMySelf);
+            css::ucb::InteractiveIOException exIO;
+            xRequest->getRequest() >>= exIO;
+            bAbort = (
+                        (exIO.Code == css::ucb::IOErrorCode_ACCESS_DENIED     ) ||
+                        (exIO.Code == css::ucb::IOErrorCode_LOCKING_VIOLATION )
+                    );
         }
+        break;
 
-    private:
-		virtual ucbhelper::InterceptedInteraction::EInterceptionState intercepted(const ::ucbhelper::InterceptedInteraction::InterceptedRequest&                         aRequest,
-																				  const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionRequest >& xRequest)
-		{
-            // we are used!
-            m_bUsed = sal_True;
+        case HANDLE_UNSUPPORTEDDATASINKEXCEPTION:
+        {
+            bAbort = sal_True;
+        }
+        break;
+    }
 
-            // check if its a real interception - might some parameters are not the right ones ...
-            sal_Bool bAbort = sal_False;
-			switch(aRequest.Handle)
-			{
-				case HANDLE_INTERACTIVEIOEXCEPTION:
-				{
-					css::ucb::InteractiveIOException exIO;
-					xRequest->getRequest() >>= exIO;
-					bAbort = (
-								(exIO.Code == css::ucb::IOErrorCode_ACCESS_DENIED     ) ||
-								(exIO.Code == css::ucb::IOErrorCode_LOCKING_VIOLATION )
-							);
-				}
-				break;
-
-				case HANDLE_UNSUPPORTEDDATASINKEXCEPTION:
-				{
-					bAbort = sal_True;
-				}
-				break;
-			}
-
-			// handle interaction by ourself
-            if (bAbort)
-			{
-                m_bHandledByMySelf = sal_True;
-				css::uno::Reference< css::task::XInteractionContinuation > xAbort = ::ucbhelper::InterceptedInteraction::extractContinuation(
-					xRequest->getContinuations(),
-					::getCppuType(static_cast< css::uno::Reference< css::task::XInteractionAbort >* >(0)));
-				if (!xAbort.is())
-					return ::ucbhelper::InterceptedInteraction::E_NO_CONTINUATION_FOUND;
-				xAbort->select();
-				return ::ucbhelper::InterceptedInteraction::E_INTERCEPTED;
-			}
+    // handle interaction by ourself
+    if (bAbort)
+    {
+        m_bHandledByMySelf = sal_True;
+        css::uno::Reference< css::task::XInteractionContinuation > xAbort = ::ucbhelper::InterceptedInteraction::extractContinuation(
+            xRequest->getContinuations(),
+            ::getCppuType(static_cast< css::uno::Reference< css::task::XInteractionAbort >* >(0)));
+        if (!xAbort.is())
+            return ::ucbhelper::InterceptedInteraction::E_NO_CONTINUATION_FOUND;
+        xAbort->select();
+        return ::ucbhelper::InterceptedInteraction::E_INTERCEPTED;
+    }
 
-			// Otherwhise use internal handler.
-            if (m_xInterceptedHandler.is())
-            {
-                m_bHandledByInternalHandler = sal_True;
-				m_xInterceptedHandler->handle(xRequest);
-            }
-			return ::ucbhelper::InterceptedInteraction::E_INTERCEPTED;
-		}
-};
+    // Otherwhise use internal handler.
+    if (m_xInterceptedHandler.is())
+    {
+        m_bHandledByInternalHandler = sal_True;
+        m_xInterceptedHandler->handle(xRequest);
+    }
+    return ::ucbhelper::InterceptedInteraction::E_INTERCEPTED;
+}
 
 /*-----------------------------------------------
     25.03.2004 12:29
