diff --git sc/source/ui/inc/gridwin.hxx sc/source/ui/inc/gridwin.hxx
index 1762f20..1ace419 100644
--- sc/source/ui/inc/gridwin.hxx
+++ sc/source/ui/inc/gridwin.hxx
@@ -143,6 +143,7 @@ private:
 	// #114409#
 	::sdr::overlay::OverlayObjectList*				mpOOCursors;
     ::sdr::overlay::OverlayObjectList*              mpOOSelection;
+    ::sdr::overlay::OverlayObjectList*              mpOOSelectionBorder;
     ::sdr::overlay::OverlayObjectList*              mpOOAutoFill;
     ::sdr::overlay::OverlayObjectList*              mpOODragRect;
     ::sdr::overlay::OverlayObjectList*              mpOOHeader;
@@ -310,6 +311,15 @@ private:
 	void			SelectForContextMenu( const Point& rPosPixel );
 
     void            GetSelectionRects( ::std::vector< Rectangle >& rPixelRects );
+    struct RectangleConverter {
+        virtual Rectangle Convert (const Rectangle& r) const = 0;
+    };
+    void            ConvertPixelRectsToRangeVector( 
+                        const ::std::vector< Rectangle >& rPixelRects, 
+                        sdr::overlay::OverlayObjectCell::RangeVector* pRanges,
+                        const MapMode& rDrawMode,
+                        const RectangleConverter *pConverter = NULL);
+    void            UpdateCopySourceOverlay(const MapMode& rDrawMode);
 
 protected:
     using Window::Resize;
diff --git sc/source/ui/view/gridwin.cxx sc/source/ui/view/gridwin.cxx
index a5952de..d57ed0a 100644
--- sc/source/ui/view/gridwin.cxx
+++ sc/source/ui/view/gridwin.cxx
@@ -407,6 +407,7 @@ ScGridWindow::ScGridWindow( Window* pParent, ScViewData* pData, ScSplitPos eWhic
 			DragSourceHelper( this ),
             mpOOCursors( NULL ),
             mpOOSelection( NULL ),
+            mpOOSelectionBorder( NULL ),
             mpOOAutoFill( NULL ),
             mpOODragRect( NULL ),
             mpOOHeader( NULL ),
@@ -5154,6 +5155,82 @@ void ScGridWindow::UpdateAllOverlays()
 void ScGridWindow::DeleteCursorOverlay()
 {
     DELETEZ( mpOOCursors );
+    DELETEZ( mpOOSelectionBorder );
+}
+
+void ScGridWindow::ConvertPixelRectsToRangeVector( const ::std::vector< Rectangle >& rPixelRects, 
+        sdr::overlay::OverlayObjectCell::RangeVector* pRanges,
+        const MapMode& rDrawMode,
+        const ScGridWindow::RectangleConverter* pConverter )
+{
+    std::vector<Rectangle>::const_iterator aPixelEnd( rPixelRects.end() );
+    for ( std::vector<Rectangle>::const_iterator aPixelIter( rPixelRects.begin() );
+          aPixelIter != aPixelEnd; ++aPixelIter )
+    {
+        Rectangle aLogic( PixelToLogic( 
+              (pConverter == NULL ? *aPixelIter : pConverter->Convert (*aPixelIter)),
+              rDrawMode ) );
+
+        const basegfx::B2DPoint aTopLeft(aLogic.Left(), aLogic.Top());
+        const basegfx::B2DPoint aBottomRight(aLogic.Right(), aLogic.Bottom());
+        const basegfx::B2DRange a2DRange(aTopLeft, aBottomRight);
+
+        pRanges->push_back( a2DRange );
+    }
+}
+
+void ScGridWindow::UpdateCopySourceOverlay( const MapMode& rDrawMode )
+{
+    if (!pViewData->ShowPasteSource())
+        return;
+    ::sdr::overlay::OverlayManager* pOverlayManager = getOverlayManager();
+    if (!pOverlayManager)
+        return;
+    ScTransferObj* pTransObj = ScTransferObj::GetOwnClipboard( pViewData->GetActiveWin() );
+    if (!pTransObj)
+        return;
+    ScDocument* pClipDoc = pTransObj->GetDocument();
+    if (!pClipDoc)
+        return;
+
+    SCCOL nClipStartX;
+    SCROW nClipStartY;
+    pClipDoc->GetClipStart( nClipStartX, nClipStartY );
+
+    SCCOL nClipAreaX;
+    SCROW nClipAreaY;
+    pClipDoc->GetClipArea( nClipAreaX, nClipAreaY, TRUE);
+
+    Point aClipStartScrPos = pViewData->GetScrPos( nClipStartX, nClipStartY, eWhich );
+    Point aClipEndScrPos   = pViewData->GetScrPos( nClipStartX + nClipAreaX + 1, 
+        nClipStartY + nClipAreaY + 1, eWhich);
+
+    long nSizeXPix = aClipEndScrPos.X() - aClipStartScrPos.X();
+    long nSizeYPix = aClipEndScrPos.Y() - aClipStartScrPos.Y();
+
+    aClipStartScrPos.X() -= 2;
+    aClipStartScrPos.Y() -= 2;
+
+    Rectangle aRect( aClipStartScrPos, Size( nSizeXPix + 3, nSizeYPix + 3 ) );
+
+    std::vector<Rectangle> aPixelRects;
+
+    aPixelRects.push_back(Rectangle( aRect.Left(), aRect.Top(), aRect.Left()+2, aRect.Bottom() ));
+    aPixelRects.push_back(Rectangle( aRect.Right()-2, aRect.Top(), aRect.Right(), aRect.Bottom() ));
+    aPixelRects.push_back(Rectangle( aRect.Left()+3, aRect.Top(), aRect.Right()-3, aRect.Top()+2 ));
+    aPixelRects.push_back(Rectangle( aRect.Left()+3, aRect.Bottom()-2, aRect.Right()-3, aRect.Bottom() ));
+
+    sdr::overlay::OverlayObjectCell::RangeVector aRanges;
+    ConvertPixelRectsToRangeVector( aPixelRects, &aRanges, rDrawMode );
+
+    ScOverlayType eType = SC_OVERLAY_TRANSPARENT;
+
+    Color aHighlight = GetSettings().GetStyleSettings().GetHighlightColor();
+    sdr::overlay::OverlayObjectCell* pOverlay = new sdr::overlay::OverlayObjectCell( eType, aHighlight, aRanges );
+
+    pOverlayManager->add(*pOverlay);
+    mpOOSelectionBorder = new ::sdr::overlay::OverlayObjectList;
+    mpOOSelectionBorder->append(*pOverlay);
 }
 
 void ScGridWindow::UpdateCursorOverlay()
@@ -5168,6 +5245,8 @@ void ScGridWindow::UpdateCursorOverlay()
 
     DeleteCursorOverlay();
 
+    UpdateCopySourceOverlay( aDrawMode );
+
     std::vector<Rectangle> aPixelRects;
 
     //
@@ -5252,19 +5331,7 @@ void ScGridWindow::UpdateCursorOverlay()
     if ( aPixelRects.size() )
     {
         sdr::overlay::OverlayObjectCell::RangeVector aRanges;
-
-        std::vector<Rectangle>::const_iterator aPixelEnd( aPixelRects.end() );
-        for ( std::vector<Rectangle>::const_iterator aPixelIter( aPixelRects.begin() );
-              aPixelIter != aPixelEnd; ++aPixelIter )
-        {
-            Rectangle aLogic( PixelToLogic( *aPixelIter, aDrawMode ) );
-
-            const basegfx::B2DPoint aTopLeft(aLogic.Left(), aLogic.Top());
-            const basegfx::B2DPoint aBottomRight(aLogic.Right(), aLogic.Bottom());
-            const basegfx::B2DRange a2DRange(aTopLeft, aBottomRight);
-
-            aRanges.push_back( a2DRange );
-        }
+        ConvertPixelRectsToRangeVector( aPixelRects, &aRanges, aDrawMode );
 
 		// #i70788# get the OverlayManager safely
 		::sdr::overlay::OverlayManager* pOverlayManager = getOverlayManager();
@@ -5306,41 +5373,43 @@ void ScGridWindow::UpdateSelectionOverlay()
 
     if ( aPixelRects.size() && pViewData->IsActive() )
     {
-        SCTAB nTab = pViewData->GetTabNo();
-        BOOL bLayoutRTL = pViewData->GetDocument()->IsLayoutRTL( nTab );
-        BOOL bOld = pViewData->GetView()->IsOldSelection();
-
-        sdr::overlay::OverlayObjectCell::RangeVector aRanges;
+        struct SelectionConverter : RectangleConverter {
+            SCTAB nTab;
+            BOOL bLayoutRTL;
+            BOOL bOld;
+
+            SelectionConverter (ScViewData* pViewData)
+              : nTab (pViewData->GetTabNo())
+              , bLayoutRTL (pViewData->GetDocument()->IsLayoutRTL( nTab ))
+              , bOld (pViewData->GetView()->IsOldSelection())
+            {
+            }
 
-        std::vector<Rectangle>::const_iterator aPixelEnd( aPixelRects.end() );
-        for ( std::vector<Rectangle>::const_iterator aPixelIter( aPixelRects.begin() );
-              aPixelIter != aPixelEnd; ++aPixelIter )
-        {
-            Rectangle aPixel( *aPixelIter );
-            if ( !bOld )
+            Rectangle Convert (const Rectangle& rRect) const
             {
+                if ( bOld )
+                    return rRect;
                 // for transparent selection, add a pixel so the border is on the grid on all edges
+                Rectangle aPixel (rRect);
                 if ( bLayoutRTL )
                     aPixel.Right() += 1;
                 else
                     aPixel.Left() -= 1;
                 aPixel.Top() -= 1;
+                return aPixel;
             }
-            Rectangle aLogic( PixelToLogic( aPixel, aDrawMode ) );
-
-            const basegfx::B2DPoint aTopLeft(aLogic.Left(), aLogic.Top());
-            const basegfx::B2DPoint aBottomRight(aLogic.Right(), aLogic.Bottom());
-            const basegfx::B2DRange a2DRange(aTopLeft, aBottomRight);
+        };
+        SelectionConverter aConverter (pViewData);
 
-            aRanges.push_back( a2DRange );
-        }
+        sdr::overlay::OverlayObjectCell::RangeVector aRanges;
+        ConvertPixelRectsToRangeVector( aPixelRects, &aRanges, aDrawMode, &aConverter );
 
 		// #i70788# get the OverlayManager safely
 		::sdr::overlay::OverlayManager* pOverlayManager = getOverlayManager();
 
 		if(pOverlayManager)
 		{
-            ScOverlayType eType = bOld ? SC_OVERLAY_INVERT : SC_OVERLAY_BORDER_TRANSPARENT;
+            ScOverlayType eType = aConverter.bOld ? SC_OVERLAY_INVERT : SC_OVERLAY_BORDER_TRANSPARENT;
 			Color aHighlight( GetSettings().GetStyleSettings().GetHighlightColor() );
             sdr::overlay::OverlayObjectCell* pOverlay =
 	            new sdr::overlay::OverlayObjectCell( eType, aHighlight, aRanges );
@@ -5535,19 +5604,7 @@ void ScGridWindow::UpdateDragRectOverlay()
         //
 
         sdr::overlay::OverlayObjectCell::RangeVector aRanges;
-
-        std::vector<Rectangle>::const_iterator aPixelEnd( aPixelRects.end() );
-        for ( std::vector<Rectangle>::const_iterator aPixelIter( aPixelRects.begin() );
-              aPixelIter != aPixelEnd; ++aPixelIter )
-        {
-            Rectangle aLogic( PixelToLogic( *aPixelIter, aDrawMode ) );
-
-            const basegfx::B2DPoint aTopLeft(aLogic.Left(), aLogic.Top());
-            const basegfx::B2DPoint aBottomRight(aLogic.Right(), aLogic.Bottom());
-            const basegfx::B2DRange a2DRange(aTopLeft, aBottomRight);
-
-            aRanges.push_back( a2DRange );
-        }
+        ConvertPixelRectsToRangeVector( aPixelRects, &aRanges, aDrawMode );
 
 		// #i70788# get the OverlayManager safely
 		::sdr::overlay::OverlayManager* pOverlayManager = getOverlayManager();
