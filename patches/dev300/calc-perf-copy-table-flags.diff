diff --git sc/source/core/data/table2.cxx sc/source/core/data/table2.cxx
index 889510f..0857312 100644
--- sc/source/core/data/table2.cxx
+++ sc/source/core/data/table2.cxx
@@ -663,6 +663,8 @@ void ScTable::CopyToTable(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2,
             //	Charts muessen beim Ein-/Ausblenden angepasst werden
             ScChartListenerCollection* pCharts = pDestTab->pDocument->GetChartListenerCollection();
 
+            bool bFlagChange = false;
+
             BOOL bWidth  = (nRow1==0 && nRow2==MAXROW && pColWidth && pDestTab->pColWidth);
             BOOL bHeight = (nCol1==0 && nCol2==MAXCOL && pRowHeight && pDestTab->pRowHeight);
 
@@ -673,18 +675,18 @@ void ScTable::CopyToTable(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2,
                 if (bWidth)
                     for (SCCOL i=nCol1; i<=nCol2; i++)
                     {
-                    bool bThisHidden = ColHidden(i);
-                    bool bHiddenChange = (pDestTab->ColHidden(i) != bThisHidden);
+                        bool bThisHidden = ColHidden(i);
+                        bool bHiddenChange = (pDestTab->ColHidden(i) != bThisHidden);
 						bool bChange = bHiddenChange || (pDestTab->pColWidth[i] != pColWidth[i]);
                         pDestTab->pColWidth[i] = pColWidth[i];
                         pDestTab->pColFlags[i] = pColFlags[i];
-                    pDestTab->SetColHidden(i, i, bThisHidden);
+                        pDestTab->SetColHidden(i, i, bThisHidden);
                         //!	Aenderungen zusammenfassen?
 						if (bHiddenChange && pCharts) 
                             pCharts->SetRangeDirty(ScRange( i, 0, nTab, i, MAXROW, nTab ));
 
 						if (bChange)
-							pDestTab->InvalidatePageBreaks();
+                            bFlagChange = true;
                     }
 
                 if (bHeight)
@@ -692,28 +694,58 @@ void ScTable::CopyToTable(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2,
 					bool bChange = pDestTab->pRowHeight->SumValues(nRow1, nRow2) != pRowHeight->SumValues(nRow1, nRow2);
 
 					if (bChange)
-						pDestTab->InvalidatePageBreaks();
+                        bFlagChange = true;
 
                     pDestTab->pRowHeight->CopyFrom( *pRowHeight, nRow1, nRow2);
-                    for (SCROW i=nRow1; i<=nRow2; i++)
-                    {
-                        // TODO: might need some performance improvement, block
-                        // operations instead of single GetValue()/SetValue() calls.
-                        BYTE nThisRowFlags = pRowFlags->GetValue(i);
-                    bool bThisHidden = RowHidden(i);
-                    bool bHiddenChange = (pDestTab->RowHidden(i) != bThisHidden);
-                        pDestTab->pRowFlags->SetValue( i, nThisRowFlags );
-                    pDestTab->SetRowHidden(i, i, bThisHidden);
-                        //!	Aenderungen zusammenfassen?
-						if (bHiddenChange && pCharts)
-                            pCharts->SetRangeDirty(ScRange( 0, i, nTab, MAXCOL, i, nTab ));
+                    pDestTab->pRowFlags->CopyFrom(*pRowFlags, nRow1, nRow2);
 
-						if (bHiddenChange)
-							pDestTab->InvalidatePageBreaks();
+                    // Hidden flags.
+                    for (SCROW i = nRow1; i <= nRow2; ++i)
+                    {
+                        SCROW nThisLastRow, nDestLastRow;
+                        bool bThisHidden = RowHidden(i, NULL, &nThisLastRow);
+                        bool bDestHidden = pDestTab->RowHidden(i, NULL, &nDestLastRow);
+    
+                        // If the segment sizes differ, we take the shorter segment of the two.
+                        SCROW nLastRow = ::std::min(nThisLastRow, nDestLastRow);
+                        if (nLastRow >= nRow2)
+                            // the last row shouldn't exceed the upper bound the caller specified.
+                            nLastRow = nRow2;
+    
+                        pDestTab->SetRowHidden(i, nLastRow, bThisHidden);
+
+                        bool bThisHiddenChange = (bThisHidden != bDestHidden);
+                        if (bThisHiddenChange && pCharts)
+                        {
+                            // Hidden flags differ.
+                            pCharts->SetRangeDirty(ScRange(0, i, nTab, MAXCOL, nLastRow, nTab));
+                        }
+    
+                        if (bThisHiddenChange)
+                            bFlagChange = true;
+    
+                        // Jump to the last row of the identical flag segment.
+                        i = nLastRow;
                     }
+                
+                    // Filtered flags.
+                    for (SCROW i = nRow1; i <= nRow2; ++i)
+                    {
+                        SCROW nLastRow;
+                        bool bFiltered = RowFiltered(i, NULL, &nLastRow);
+                        if (nLastRow >= nRow2)
+                            // the last row shouldn't exceed the upper bound the caller specified.
+                            nLastRow = nRow2;
+                        pDestTab->SetRowFiltered(i, nLastRow, bFiltered);
+                        i = nLastRow;
+                    }
                 }
                 pDestTab->DecRecalcLevel();
             }
+
+            if (bFlagChange)
+                pDestTab->InvalidatePageBreaks();
+
             pDestTab->SetOutlineTable( pOutlineTable );		// auch nur wenn bColRowFlags
         }
     }
