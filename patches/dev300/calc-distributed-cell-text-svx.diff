diff --git svx/inc/svx/algitem.hxx svx/inc/svx/algitem.hxx
index 8147387..590916b 100644
--- svx/inc/svx/algitem.hxx
+++ svx/inc/svx/algitem.hxx
@@ -110,6 +110,33 @@ public:
             }
 };
 
+//------------------------------------------------------------------------
+
+class SVX_DLLPUBLIC SvxJustifyMethodItem: public SfxEnumItem
+{
+public:
+    SvxJustifyMethodItem( const USHORT nId );
+
+    SvxJustifyMethodItem(
+        const SvxCellJustifyMethod eMethod,
+        const USHORT nId );
+
+    virtual SfxItemPresentation GetPresentation( SfxItemPresentation ePres,
+                                    SfxMapUnit eCoreMetric,
+                                    SfxMapUnit ePresMetric,
+                                    String &rText, const IntlWrapper * = 0 ) const;
+
+    virtual sal_Bool             QueryValue( com::sun::star::uno::Any& rVal, BYTE nMemberId = 0 ) const;
+    virtual sal_Bool             PutValue( const com::sun::star::uno::Any& rVal, BYTE nMemberId = 0 );
+
+    virtual USHORT          GetValueCount() const;
+    virtual String          GetValueText( USHORT nVal ) const;
+    virtual SfxPoolItem*    Clone( SfxItemPool *pPool = 0 ) const;
+    virtual SfxPoolItem*    Create( SvStream& rStream, USHORT nVer ) const;
+
+    SvxJustifyMethodItem& operator=(const SvxJustifyMethodItem& r);
+};
+
 
 //------------------------------------------------------------------------
 
diff --git svx/inc/svx/eeitem.hxx svx/inc/svx/eeitem.hxx
index e828c91..feed94e 100644
--- svx/inc/svx/eeitem.hxx
+++ svx/inc/svx/eeitem.hxx
@@ -33,7 +33,7 @@
 
 #define EE_ITEMS_START				3989
 
-// Absatzattribute:
+// Paragraph attributes:
 #define EE_PARA_START				(EE_ITEMS_START+0)
 #define EE_PARA_WRITINGDIR          (EE_ITEMS_START+0)
 #define EE_PARA_XMLATTRIBS	        (EE_ITEMS_START+1)
@@ -51,51 +51,53 @@
 #define	EE_PARA_SBL					(EE_ITEMS_START+13)
 #define EE_PARA_JUST				(EE_ITEMS_START+14)
 #define EE_PARA_TABS				(EE_ITEMS_START+15)
-#define EE_PARA_END					(EE_ITEMS_START+15)
+#define EE_PARA_JUST_METHOD         (EE_ITEMS_START+16)
+#define EE_PARA_VER_JUST            (EE_ITEMS_START+17)
+#define EE_PARA_END                 (EE_ITEMS_START+17)
 
-// Zeichenattribute:
-#define EE_CHAR_START				(EE_ITEMS_START+16)
-#define EE_CHAR_COLOR				(EE_ITEMS_START+16)
-#define EE_CHAR_FONTINFO			(EE_ITEMS_START+17)
-#define EE_CHAR_FONTHEIGHT			(EE_ITEMS_START+18)
-#define EE_CHAR_FONTWIDTH			(EE_ITEMS_START+19)
-#define EE_CHAR_WEIGHT				(EE_ITEMS_START+20)
-#define EE_CHAR_UNDERLINE			(EE_ITEMS_START+21)
-#define EE_CHAR_STRIKEOUT			(EE_ITEMS_START+22)
-#define EE_CHAR_ITALIC				(EE_ITEMS_START+23)
-#define EE_CHAR_OUTLINE				(EE_ITEMS_START+24)
-#define EE_CHAR_SHADOW				(EE_ITEMS_START+25)
-#define EE_CHAR_ESCAPEMENT			(EE_ITEMS_START+26)
-#define EE_CHAR_PAIRKERNING			(EE_ITEMS_START+27)
-#define EE_CHAR_KERNING				(EE_ITEMS_START+28)
-#define EE_CHAR_WLM					(EE_ITEMS_START+29)
-#define EE_CHAR_LANGUAGE			(EE_ITEMS_START+30)
-#define EE_CHAR_LANGUAGE_CJK		(EE_ITEMS_START+31)
-#define EE_CHAR_LANGUAGE_CTL		(EE_ITEMS_START+32)
-#define EE_CHAR_FONTINFO_CJK		(EE_ITEMS_START+33)
-#define EE_CHAR_FONTINFO_CTL		(EE_ITEMS_START+34)
-#define EE_CHAR_FONTHEIGHT_CJK		(EE_ITEMS_START+35)
-#define EE_CHAR_FONTHEIGHT_CTL		(EE_ITEMS_START+36)
-#define EE_CHAR_WEIGHT_CJK			(EE_ITEMS_START+37)
-#define EE_CHAR_WEIGHT_CTL			(EE_ITEMS_START+38)
-#define EE_CHAR_ITALIC_CJK			(EE_ITEMS_START+39)
-#define EE_CHAR_ITALIC_CTL			(EE_ITEMS_START+40)
-#define EE_CHAR_EMPHASISMARK		(EE_ITEMS_START+41)
-#define EE_CHAR_RELIEF				(EE_ITEMS_START+42)
-#define EE_CHAR_RUBI_DUMMY			(EE_ITEMS_START+43)
-#define EE_CHAR_XMLATTRIBS			(EE_ITEMS_START+44)
-#define EE_CHAR_OVERLINE			(EE_ITEMS_START+45)
-#define EE_CHAR_END					(EE_ITEMS_START+45)
+// Character attributes:
+#define EE_CHAR_START               (EE_ITEMS_START+18)
+#define EE_CHAR_COLOR               (EE_ITEMS_START+18)
+#define EE_CHAR_FONTINFO            (EE_ITEMS_START+19)
+#define EE_CHAR_FONTHEIGHT          (EE_ITEMS_START+20)
+#define EE_CHAR_FONTWIDTH           (EE_ITEMS_START+21)
+#define EE_CHAR_WEIGHT              (EE_ITEMS_START+22)
+#define EE_CHAR_UNDERLINE           (EE_ITEMS_START+23)
+#define EE_CHAR_STRIKEOUT           (EE_ITEMS_START+24)
+#define EE_CHAR_ITALIC              (EE_ITEMS_START+25)
+#define EE_CHAR_OUTLINE             (EE_ITEMS_START+26)
+#define EE_CHAR_SHADOW              (EE_ITEMS_START+27)
+#define EE_CHAR_ESCAPEMENT          (EE_ITEMS_START+28)
+#define EE_CHAR_PAIRKERNING         (EE_ITEMS_START+29)
+#define EE_CHAR_KERNING             (EE_ITEMS_START+30)
+#define EE_CHAR_WLM                 (EE_ITEMS_START+31)
+#define EE_CHAR_LANGUAGE            (EE_ITEMS_START+32)
+#define EE_CHAR_LANGUAGE_CJK        (EE_ITEMS_START+33)
+#define EE_CHAR_LANGUAGE_CTL        (EE_ITEMS_START+34)
+#define EE_CHAR_FONTINFO_CJK        (EE_ITEMS_START+35)
+#define EE_CHAR_FONTINFO_CTL        (EE_ITEMS_START+36)
+#define EE_CHAR_FONTHEIGHT_CJK      (EE_ITEMS_START+37)
+#define EE_CHAR_FONTHEIGHT_CTL      (EE_ITEMS_START+38)
+#define EE_CHAR_WEIGHT_CJK          (EE_ITEMS_START+39)
+#define EE_CHAR_WEIGHT_CTL          (EE_ITEMS_START+40)
+#define EE_CHAR_ITALIC_CJK          (EE_ITEMS_START+41)
+#define EE_CHAR_ITALIC_CTL          (EE_ITEMS_START+42)
+#define EE_CHAR_EMPHASISMARK        (EE_ITEMS_START+43)
+#define EE_CHAR_RELIEF              (EE_ITEMS_START+44)
+#define EE_CHAR_RUBI_DUMMY          (EE_ITEMS_START+45)
+#define EE_CHAR_XMLATTRIBS          (EE_ITEMS_START+46)
+#define EE_CHAR_OVERLINE            (EE_ITEMS_START+47)
+#define EE_CHAR_END                 (EE_ITEMS_START+47)
 
 
-#define EE_FEATURE_START			(EE_ITEMS_START+46)
-#define EE_FEATURE_TAB				(EE_ITEMS_START+46)
-#define EE_FEATURE_LINEBR			(EE_ITEMS_START+47)
-#define EE_FEATURE_NOTCONV			(EE_ITEMS_START+48)
-#define EE_FEATURE_FIELD			(EE_ITEMS_START+49)
-#define EE_FEATURE_END				(EE_ITEMS_START+49)
+#define EE_FEATURE_START            (EE_ITEMS_START+48)
+#define EE_FEATURE_TAB              (EE_ITEMS_START+48)
+#define EE_FEATURE_LINEBR           (EE_ITEMS_START+49)
+#define EE_FEATURE_NOTCONV          (EE_ITEMS_START+50)
+#define EE_FEATURE_FIELD            (EE_ITEMS_START+51)
+#define EE_FEATURE_END              (EE_ITEMS_START+51)
 
-#define EE_ITEMS_END				(EE_ITEMS_START+49)
+#define EE_ITEMS_END                (EE_ITEMS_START+51)
 
 #define EDITITEMCOUNT ( EE_ITEMS_END - EE_ITEMS_START + 1 )
 
diff --git svx/inc/svx/svxenum.hxx svx/inc/svx/svxenum.hxx
index d2f2530..fecec0a 100644
--- svx/inc/svx/svxenum.hxx
+++ svx/inc/svx/svxenum.hxx
@@ -127,12 +127,19 @@ enum SvxCellHorJustify
     SVX_HOR_JUSTIFY_REPEAT
 };
 
+enum SvxCellJustifyMethod
+{
+    SVX_JUSTIFY_METHOD_AUTO,
+    SVX_JUSTIFY_METHOD_DISTRIBUTE
+};
+
 enum SvxCellVerJustify
 {
     SVX_VER_JUSTIFY_STANDARD,
     SVX_VER_JUSTIFY_TOP,
     SVX_VER_JUSTIFY_CENTER,
-    SVX_VER_JUSTIFY_BOTTOM
+    SVX_VER_JUSTIFY_BOTTOM,
+    SVX_VER_JUSTIFY_BLOCK
 };
 
 enum SvxCellOrientation
diff --git svx/inc/svx/svxids.hrc svx/inc/svx/svxids.hrc
index 4d8f48a..a04975b 100644
--- svx/inc/svx/svxids.hrc
+++ svx/inc/svx/svxids.hrc
@@ -1359,9 +1359,11 @@
 #define SID_REPLYTO_POSTIT								(SID_SVX_START+1099)
 #define SID_DELETEALLBYAUTHOR_POSTIT					(SID_SVX_START+1100)
 #define SID_INSERT_POSTIT							    (SID_SVX_START+1101)
+#define SID_ATTR_ALIGN_HOR_JUSTIFY_METHOD               (SID_SVX_START+1102)
+#define SID_ATTR_ALIGN_VER_JUSTIFY_METHOD               (SID_SVX_START+1103)
 
 // IMPORTANT NOTE: adjust SID_SVX_FIRSTFREE, when adding new slot id
-#define SID_SVX_FIRSTFREE								SID_INSERT_POSTIT + 1
+#define SID_SVX_FIRSTFREE								SID_ATTR_ALIGN_VER_JUSTIFY_METHOD + 1
 
 // --------------------------------------------------------------------------
 // Overflow check for slot IDs
diff --git svx/inc/svx/svxitems.hrc svx/inc/svx/svxitems.hrc
index 8974d9f..010d7f8 100644
--- svx/inc/svx/svxitems.hrc
+++ svx/inc/svx/svxitems.hrc
@@ -569,10 +569,13 @@
 #define RID_SVXITEMS_CHARHIDDEN_FALSE           (RID_SVXITEMS_START + 577)
 #define RID_SVXITEMS_CHARHIDDEN_TRUE            (RID_SVXITEMS_START + 578)
 
+#define RID_SVXITEMS_JUSTMETHOD_AUTO            (RID_SVXITEMS_START + 579)
+#define RID_SVXITEMS_JUSTMETHOD_DISTRIBUTE      (RID_SVXITEMS_START + 580)
+
 // Ueberlaufpruefung --------------------------------------------------------
 
 // Resource-Id's
-#define ACT_RID_SVXITEMS_END    RID_SVXITEMS_CHARHIDDEN_TRUE
+#define ACT_RID_SVXITEMS_END    RID_SVXITEMS_JUSTMETHOD_DISTRIBUTE
 #if ACT_RID_SVXITEMS_END > RID_SVXITEMS_END
 #error Resource-Ueberlauf in #line, #file
 #endif
diff --git svx/source/cui/align.cxx svx/source/cui/align.cxx
index 77538a9..63e7929 100644
--- svx/source/cui/align.cxx
+++ svx/source/cui/align.cxx
@@ -77,6 +77,7 @@ static const HorJustConnection::MapEntryType s_pHorJustMap[] =
     { ALIGNDLG_HORALIGN_RIGHT,  SVX_HOR_JUSTIFY_RIGHT       },
     { ALIGNDLG_HORALIGN_BLOCK,  SVX_HOR_JUSTIFY_BLOCK       },
     { ALIGNDLG_HORALIGN_FILL,   SVX_HOR_JUSTIFY_REPEAT      },
+    { ALIGNDLG_HORALIGN_DISTRIBUTED, SVX_HOR_JUSTIFY_BLOCK  },
     { LISTBOX_ENTRY_NOTFOUND,   SVX_HOR_JUSTIFY_STANDARD    }
 };
 
@@ -91,6 +92,8 @@ static const VerJustConnection::MapEntryType s_pVerJustMap[] =
     { ALIGNDLG_VERALIGN_TOP,    SVX_VER_JUSTIFY_TOP         },
     { ALIGNDLG_VERALIGN_MID,    SVX_VER_JUSTIFY_CENTER      },
     { ALIGNDLG_VERALIGN_BOTTOM, SVX_VER_JUSTIFY_BOTTOM      },
+    { ALIGNDLG_VERALIGN_BLOCK,  SVX_VER_JUSTIFY_BLOCK       },
+    { ALIGNDLG_VERALIGN_DISTRIBUTED, SVX_VER_JUSTIFY_BLOCK  },
     { LISTBOX_ENTRY_NOTFOUND,   SVX_VER_JUSTIFY_STANDARD    }
 };
 
@@ -125,6 +128,48 @@ static USHORT s_pRanges[] =
 
 // ============================================================================
 
+namespace {
+
+template<typename _JustContainerType, typename _JustEnumType>
+void lcl_MaybeResetAlignToDistro(
+    ListBox& rLB, USHORT nListPos, const SfxItemSet& rCoreAttrs, USHORT nWhichAlign, USHORT nWhichJM, _JustEnumType eBlock)
+{
+    const SfxPoolItem* pItem;
+    if (rCoreAttrs.GetItemState(nWhichAlign, TRUE, &pItem) != SFX_ITEM_SET)
+        // alignment not set.
+        return;
+
+    const SfxEnumItem* p = static_cast<const SfxEnumItem*>(pItem);
+    _JustContainerType eVal = static_cast<_JustContainerType>(p->GetEnumValue());
+    if (eVal != eBlock)
+        // alignment is not 'justify'.  No need to go further.
+        return;
+
+    if (rCoreAttrs.GetItemState(nWhichJM, TRUE, &pItem) != SFX_ITEM_SET)
+        // justification method is not set.
+        return;
+
+    p = static_cast<const SfxEnumItem*>(pItem);
+    SvxCellJustifyMethod eMethod = static_cast<SvxCellJustifyMethod>(p->GetEnumValue());
+    if (eMethod == SVX_JUSTIFY_METHOD_DISTRIBUTE)
+        // Select the 'distribute' entry in the specified list box.
+        rLB.SelectEntryPos(nListPos);
+}
+
+void lcl_SetJustifyMethodToItemSet(SfxItemSet& rSet, USHORT nWhichJM, const ListBox& rLB, USHORT nListPos)
+{
+    SvxCellJustifyMethod eJM = SVX_JUSTIFY_METHOD_AUTO;
+    if (rLB.GetSelectEntryPos() == nListPos)
+        eJM = SVX_JUSTIFY_METHOD_DISTRIBUTE;
+
+    SvxJustifyMethodItem aItem(eJM, nWhichJM);
+    rSet.Put(aItem);
+}
+
+}
+
+// ============================================================================
+
 AlignmentTabPage::AlignmentTabPage( Window* pParent, const SfxItemSet& rCoreAttrs ) :
 
     SfxTabPage( pParent, SVX_RES( RID_SVXPAGE_ALIGNMENT ), rCoreAttrs ),
@@ -220,9 +265,43 @@ USHORT* AlignmentTabPage::GetRanges()
     return s_pRanges;
 }
 
+BOOL AlignmentTabPage::FillItemSet( SfxItemSet& rSet )
+{
+    bool bChanged = SfxTabPage::FillItemSet(rSet);
+
+    // Special treatment for distributed alignment; we need to set the justify
+    // method to 'distribute' to distinguish from the normal justification.
+
+    USHORT nWhichHorJM = GetWhich(SID_ATTR_ALIGN_HOR_JUSTIFY_METHOD);
+    lcl_SetJustifyMethodToItemSet(rSet, nWhichHorJM, maLbHorAlign, ALIGNDLG_HORALIGN_DISTRIBUTED);
+    if (!bChanged)
+        bChanged = HasAlignmentChanged(rSet, nWhichHorJM);
+
+    USHORT nWhichVerJM = GetWhich(SID_ATTR_ALIGN_VER_JUSTIFY_METHOD);
+    lcl_SetJustifyMethodToItemSet(rSet, nWhichVerJM, maLbVerAlign, ALIGNDLG_VERALIGN_DISTRIBUTED);
+    if (!bChanged)
+        bChanged = HasAlignmentChanged(rSet, nWhichVerJM);
+
+    return bChanged;
+}
+
 void AlignmentTabPage::Reset( const SfxItemSet& rCoreAttrs )
 {
     SfxTabPage::Reset( rCoreAttrs );
+
+    // Special treatment for distributed alignment; we need to set the justify
+    // method to 'distribute' to distinguish from the normal justification.
+
+    lcl_MaybeResetAlignToDistro<SvxCellHorJustify, SvxCellHorJustify>(
+        maLbHorAlign, ALIGNDLG_HORALIGN_DISTRIBUTED, rCoreAttrs, 
+        GetWhich(SID_ATTR_ALIGN_HOR_JUSTIFY), GetWhich(SID_ATTR_ALIGN_HOR_JUSTIFY_METHOD),
+        SVX_HOR_JUSTIFY_BLOCK);
+
+    lcl_MaybeResetAlignToDistro<SvxCellVerJustify, SvxCellVerJustify>(
+        maLbVerAlign, ALIGNDLG_VERALIGN_DISTRIBUTED, rCoreAttrs, 
+        GetWhich(SID_ATTR_ALIGN_VER_JUSTIFY), GetWhich(SID_ATTR_ALIGN_VER_JUSTIFY_METHOD),
+        SVX_VER_JUSTIFY_BLOCK);
+
     UpdateEnableControls();
 }
 
@@ -271,6 +350,7 @@ void AlignmentTabPage::UpdateEnableControls()
     bool bHorLeft  = (nHorAlign == ALIGNDLG_HORALIGN_LEFT);
     bool bHorBlock = (nHorAlign == ALIGNDLG_HORALIGN_BLOCK);
     bool bHorFill  = (nHorAlign == ALIGNDLG_HORALIGN_FILL);
+    bool bHorDist  = (nHorAlign == ALIGNDLG_HORALIGN_DISTRIBUTED);
 
     // indent edit field only for left alignment
     maFtIndent.Enable( bHorLeft );
@@ -282,8 +362,8 @@ void AlignmentTabPage::UpdateEnableControls()
     // hyphenation only for automatic line breaks or for block alignment
     maBtnHyphen.Enable( maBtnWrap.IsChecked() || bHorBlock );
 
-    // shrink only without automatic line break, and not for block and fill
-    maBtnShrink.Enable( (maBtnWrap.GetState() == STATE_NOCHECK) && !bHorBlock && !bHorFill );
+    // shrink only without automatic line break, and not for block, fill or distribute.
+    maBtnShrink.Enable( (maBtnWrap.GetState() == STATE_NOCHECK) && !bHorBlock && !bHorFill && !bHorDist );
 
     // visibility of fixed lines
     maFlAlignment.Show( maLbHorAlign.IsVisible() || maEdIndent.IsVisible() || maLbVerAlign.IsVisible() );
@@ -291,6 +371,27 @@ void AlignmentTabPage::UpdateEnableControls()
     maFlProperties.Show( maBtnWrap.IsVisible() || maBtnHyphen.IsVisible() || maBtnShrink.IsVisible() || maLbFrameDir.IsVisible() );
 }
 
+bool AlignmentTabPage::HasAlignmentChanged( const SfxItemSet& rNew, USHORT nWhich ) const
+{
+    const SfxItemSet& rOld = GetItemSet();
+    const SfxPoolItem* pItem;
+    SvxCellJustifyMethod eMethodOld = SVX_JUSTIFY_METHOD_AUTO;
+    SvxCellJustifyMethod eMethodNew = SVX_JUSTIFY_METHOD_AUTO;
+    if (rOld.GetItemState(nWhich, TRUE, &pItem) == SFX_ITEM_SET)
+    {
+        const SfxEnumItem* p = static_cast<const SfxEnumItem*>(pItem);
+        eMethodOld = static_cast<SvxCellJustifyMethod>(p->GetEnumValue());
+    }
+
+    if (rNew.GetItemState(nWhich, TRUE, &pItem) == SFX_ITEM_SET)
+    {
+        const SfxEnumItem* p = static_cast<const SfxEnumItem*>(pItem);
+        eMethodNew = static_cast<SvxCellJustifyMethod>(p->GetEnumValue());
+    }
+
+    return eMethodOld != eMethodNew;
+}
+
 IMPL_LINK( AlignmentTabPage, UpdateEnableHdl, void*, EMPTYARG )
 {
     UpdateEnableControls();
diff --git svx/source/cui/align.hrc svx/source/cui/align.hrc
index 0eb5bf2..7b0fc96 100644
--- svx/source/cui/align.hrc
+++ svx/source/cui/align.hrc
@@ -66,11 +66,14 @@
 #define ALIGNDLG_HORALIGN_RIGHT     3
 #define ALIGNDLG_HORALIGN_BLOCK     4
 #define ALIGNDLG_HORALIGN_FILL      5
+#define ALIGNDLG_HORALIGN_DISTRIBUTED 6
 
-#define ALIGNDLG_VERALIGN_STD       0
-#define ALIGNDLG_VERALIGN_TOP       1
-#define ALIGNDLG_VERALIGN_MID       2
-#define ALIGNDLG_VERALIGN_BOTTOM    3
+#define ALIGNDLG_VERALIGN_STD         0
+#define ALIGNDLG_VERALIGN_TOP         1
+#define ALIGNDLG_VERALIGN_MID         2
+#define ALIGNDLG_VERALIGN_BOTTOM      3
+#define ALIGNDLG_VERALIGN_BLOCK       4
+#define ALIGNDLG_VERALIGN_DISTRIBUTED 5
 
 // image list for ValueSets:
 #define IL_LOCK_BMPS                1100
diff --git svx/source/cui/align.hxx svx/source/cui/align.hxx
index 4d93e16..ad98b0a 100644
--- svx/source/cui/align.hxx
+++ svx/source/cui/align.hxx
@@ -66,6 +66,7 @@ public:
     static SfxTabPage*  Create( Window* pParent, const SfxItemSet& rAttrSet );
     static USHORT*      GetRanges();
 
+    virtual BOOL        FillItemSet( SfxItemSet& rSet );
     virtual void        Reset( const SfxItemSet& rSet );
     virtual int         DeactivatePage( SfxItemSet* pSet );
     virtual void        DataChanged( const DataChangedEvent& rDCEvt );
@@ -76,6 +77,8 @@ private:
     void                InitVsRefEgde();
     void                UpdateEnableControls();
 
+    bool                HasAlignmentChanged( const SfxItemSet& rNew, USHORT nWhich ) const;
+
     DECL_LINK( UpdateEnableHdl, void* );
 
 private:
diff --git svx/source/cui/align.src svx/source/cui/align.src
index 9780555..c458ab8 100644
--- svx/source/cui/align.src
+++ svx/source/cui/align.src
@@ -73,6 +73,7 @@ TabPage RID_SVXPAGE_ALIGNMENT
             < "Right" ; ALIGNDLG_HORALIGN_RIGHT ; > ;
             < "Justified" ; ALIGNDLG_HORALIGN_BLOCK ; > ;
             < "Filled" ; ALIGNDLG_HORALIGN_FILL ; > ;
+            < "Distributed" ; ALIGNDLG_HORALIGN_DISTRIBUTED ; > ;
         };
     };
     FixedText FT_INDENT
@@ -112,6 +113,8 @@ TabPage RID_SVXPAGE_ALIGNMENT
             < "Top" ; ALIGNDLG_VERALIGN_TOP ; > ;
             < "Middle" ; ALIGNDLG_VERALIGN_MID ; > ;
             < "Bottom" ; ALIGNDLG_VERALIGN_BOTTOM ; > ;
+            < "Justified" ; ALIGNDLG_VERALIGN_BLOCK ; > ;
+            < "Distributed" ; ALIGNDLG_VERALIGN_DISTRIBUTED ; > ;
         };
     };
     FixedLine FL_ORIENTATION
diff --git svx/source/editeng/editdoc.cxx svx/source/editeng/editdoc.cxx
index d5f9ee1..a6ba501 100644
--- svx/source/editeng/editdoc.cxx
+++ svx/source/editeng/editdoc.cxx
@@ -182,13 +182,15 @@ SfxItemInfo aItemInfos[EDITITEMCOUNT] = {
         { 0, SFX_ITEM_POOLABLE },							    // EE_PARA_HYPHENATE
         { 0, SFX_ITEM_POOLABLE },							    // EE_PARA_BULLETSTATE
         { 0, SFX_ITEM_POOLABLE },							    // EE_PARA_OUTLLRSPACE
-        { SID_ATTR_PARA_OUTLLEVEL, SFX_ITEM_POOLABLE },
-        { SID_ATTR_PARA_BULLET, SFX_ITEM_POOLABLE },
-        { SID_ATTR_LRSPACE, SFX_ITEM_POOLABLE },
-        { SID_ATTR_ULSPACE, SFX_ITEM_POOLABLE },
-        { SID_ATTR_PARA_LINESPACE, SFX_ITEM_POOLABLE },
-        { SID_ATTR_PARA_ADJUST, SFX_ITEM_POOLABLE },
-        { SID_ATTR_TABSTOP, SFX_ITEM_POOLABLE },
+        { SID_ATTR_PARA_OUTLLEVEL, SFX_ITEM_POOLABLE },         // EE_PARA_OUTLLEVEL  
+        { SID_ATTR_PARA_BULLET, SFX_ITEM_POOLABLE },            // EE_PARA_BULLET     
+        { SID_ATTR_LRSPACE, SFX_ITEM_POOLABLE },                // EE_PARA_LRSPACE    
+        { SID_ATTR_ULSPACE, SFX_ITEM_POOLABLE },                // EE_PARA_ULSPACE    
+        { SID_ATTR_PARA_LINESPACE, SFX_ITEM_POOLABLE },         // EE_PARA_SBL        
+        { SID_ATTR_PARA_ADJUST, SFX_ITEM_POOLABLE },            // EE_PARA_JUST       
+        { SID_ATTR_TABSTOP, SFX_ITEM_POOLABLE },                // EE_PARA_TABS       
+        { SID_ATTR_ALIGN_HOR_JUSTIFY_METHOD, SFX_ITEM_POOLABLE }, // EE_PARA_JUST_METHOD
+        { SID_ATTR_ALIGN_VER_JUSTIFY, SFX_ITEM_POOLABLE },      // EE_PARA_VER_JUST
         { SID_ATTR_CHAR_COLOR, SFX_ITEM_POOLABLE },
         { SID_ATTR_CHAR_FONT, SFX_ITEM_POOLABLE },
         { SID_ATTR_CHAR_FONTHEIGHT, SFX_ITEM_POOLABLE },
diff --git svx/source/editeng/eerdll.cxx svx/source/editeng/eerdll.cxx
index ce23a1e..3dd22de 100644
--- svx/source/editeng/eerdll.cxx
+++ svx/source/editeng/eerdll.cxx
@@ -71,6 +71,7 @@
 #include <svx/charscaleitem.hxx>
 #include <svx/charreliefitem.hxx>
 #include <svx/frmdiritem.hxx>
+#include "svx/algitem.hxx"
 #include <xmlcnitm.hxx>
 
 #include <forbiddencharacterstable.hxx>
@@ -109,7 +110,7 @@ SfxPoolItem** GlobalEditData::GetDefItems()
     {
         ppDefItems = new SfxPoolItem*[EDITITEMCOUNT];
 
-        // Absatzattribute:
+        // Paragraph attributes:
         SvxNumRule aTmpNumRule( 0, 0, FALSE );
 
         ppDefItems[0]  = new SvxFrameDirectionItem( FRMDIR_HORI_LEFT_TOP, EE_PARA_WRITINGDIR );
@@ -122,57 +123,59 @@ SfxPoolItem** GlobalEditData::GetDefItems()
         ppDefItems[7]  = new SfxBoolItem( EE_PARA_BULLETSTATE, TRUE );
         ppDefItems[8]  = new SvxLRSpaceItem( EE_PARA_OUTLLRSPACE );
         ppDefItems[9]  = new SfxInt16Item( EE_PARA_OUTLLEVEL, -1 );
-        ppDefItems[10]  = new SvxBulletItem( EE_PARA_BULLET );
-        ppDefItems[11]  = new SvxLRSpaceItem( EE_PARA_LRSPACE );
-        ppDefItems[12]  = new SvxULSpaceItem( EE_PARA_ULSPACE );
-        ppDefItems[13]  = new SvxLineSpacingItem( 0, EE_PARA_SBL );
-        ppDefItems[14]  = new SvxAdjustItem( SVX_ADJUST_LEFT, EE_PARA_JUST );
-        ppDefItems[15]  = new SvxTabStopItem( 0, 0, SVX_TAB_ADJUST_LEFT, EE_PARA_TABS );
-
-        // Zeichenattribute:
-        ppDefItems[16]  = new SvxColorItem( Color( COL_AUTO ), EE_CHAR_COLOR );
-        ppDefItems[17]  = new SvxFontItem( EE_CHAR_FONTINFO );
-        ppDefItems[18] = new SvxFontHeightItem( 240, 100, EE_CHAR_FONTHEIGHT );
-        ppDefItems[19] = new SvxCharScaleWidthItem( 100, EE_CHAR_FONTWIDTH );
-        ppDefItems[20] = new SvxWeightItem( WEIGHT_NORMAL, EE_CHAR_WEIGHT );
-        ppDefItems[21] = new SvxUnderlineItem( UNDERLINE_NONE, EE_CHAR_UNDERLINE );
-        ppDefItems[22] = new SvxCrossedOutItem( STRIKEOUT_NONE, EE_CHAR_STRIKEOUT );
-        ppDefItems[23] = new SvxPostureItem( ITALIC_NONE, EE_CHAR_ITALIC );
-        ppDefItems[24] = new SvxContourItem( FALSE, EE_CHAR_OUTLINE );
-        ppDefItems[25] = new SvxShadowedItem( FALSE, EE_CHAR_SHADOW );
-        ppDefItems[26] = new SvxEscapementItem( 0, 100, EE_CHAR_ESCAPEMENT );
-        ppDefItems[27] = new SvxAutoKernItem( FALSE, EE_CHAR_PAIRKERNING );
-        ppDefItems[28] = new SvxKerningItem( 0, EE_CHAR_KERNING );
-        ppDefItems[29] = new SvxWordLineModeItem( FALSE, EE_CHAR_WLM );
-        ppDefItems[30] = new SvxLanguageItem( LANGUAGE_DONTKNOW, EE_CHAR_LANGUAGE );
-        ppDefItems[31] = new SvxLanguageItem( LANGUAGE_DONTKNOW, EE_CHAR_LANGUAGE_CJK );
-        ppDefItems[32] = new SvxLanguageItem( LANGUAGE_DONTKNOW, EE_CHAR_LANGUAGE_CTL );
-        ppDefItems[33] = new SvxFontItem( EE_CHAR_FONTINFO_CJK );
-        ppDefItems[34] = new SvxFontItem( EE_CHAR_FONTINFO_CTL );
-        ppDefItems[35] = new SvxFontHeightItem( 240, 100, EE_CHAR_FONTHEIGHT_CJK );
-        ppDefItems[36] = new SvxFontHeightItem( 240, 100, EE_CHAR_FONTHEIGHT_CTL );
-        ppDefItems[37] = new SvxWeightItem( WEIGHT_NORMAL, EE_CHAR_WEIGHT_CJK );
-         ppDefItems[38] = new SvxWeightItem( WEIGHT_NORMAL, EE_CHAR_WEIGHT_CTL );
-        ppDefItems[39] = new SvxPostureItem( ITALIC_NONE, EE_CHAR_ITALIC_CJK );
-        ppDefItems[40] = new SvxPostureItem( ITALIC_NONE, EE_CHAR_ITALIC_CTL );
-        ppDefItems[41] = new SvxEmphasisMarkItem( EMPHASISMARK_NONE, EE_CHAR_EMPHASISMARK );
-        ppDefItems[42] = new SvxCharReliefItem( RELIEF_NONE, EE_CHAR_RELIEF );
-        ppDefItems[43] = new SfxVoidItem( EE_CHAR_RUBI_DUMMY );
+        ppDefItems[10] = new SvxBulletItem( EE_PARA_BULLET );
+        ppDefItems[11] = new SvxLRSpaceItem( EE_PARA_LRSPACE );
+        ppDefItems[12] = new SvxULSpaceItem( EE_PARA_ULSPACE );
+        ppDefItems[13] = new SvxLineSpacingItem( 0, EE_PARA_SBL );
+        ppDefItems[14] = new SvxAdjustItem( SVX_ADJUST_LEFT, EE_PARA_JUST );
+        ppDefItems[15] = new SvxTabStopItem( 0, 0, SVX_TAB_ADJUST_LEFT, EE_PARA_TABS );
+        ppDefItems[16] = new SvxJustifyMethodItem( SVX_JUSTIFY_METHOD_AUTO, EE_PARA_JUST_METHOD );
+        ppDefItems[17] = new SvxVerJustifyItem( SVX_VER_JUSTIFY_STANDARD, EE_PARA_VER_JUST );
+
+        // Character attributes:
+        ppDefItems[18] = new SvxColorItem( Color( COL_AUTO ), EE_CHAR_COLOR );
+        ppDefItems[19] = new SvxFontItem( EE_CHAR_FONTINFO );
+        ppDefItems[20] = new SvxFontHeightItem( 240, 100, EE_CHAR_FONTHEIGHT );
+        ppDefItems[21] = new SvxCharScaleWidthItem( 100, EE_CHAR_FONTWIDTH );
+        ppDefItems[22] = new SvxWeightItem( WEIGHT_NORMAL, EE_CHAR_WEIGHT );
+        ppDefItems[23] = new SvxUnderlineItem( UNDERLINE_NONE, EE_CHAR_UNDERLINE );
+        ppDefItems[24] = new SvxCrossedOutItem( STRIKEOUT_NONE, EE_CHAR_STRIKEOUT );
+        ppDefItems[25] = new SvxPostureItem( ITALIC_NONE, EE_CHAR_ITALIC );
+        ppDefItems[26] = new SvxContourItem( FALSE, EE_CHAR_OUTLINE );
+        ppDefItems[27] = new SvxShadowedItem( FALSE, EE_CHAR_SHADOW );
+        ppDefItems[28] = new SvxEscapementItem( 0, 100, EE_CHAR_ESCAPEMENT );
+        ppDefItems[29] = new SvxAutoKernItem( FALSE, EE_CHAR_PAIRKERNING );
+        ppDefItems[30] = new SvxKerningItem( 0, EE_CHAR_KERNING );
+        ppDefItems[31] = new SvxWordLineModeItem( FALSE, EE_CHAR_WLM );
+        ppDefItems[32] = new SvxLanguageItem( LANGUAGE_DONTKNOW, EE_CHAR_LANGUAGE );
+        ppDefItems[33] = new SvxLanguageItem( LANGUAGE_DONTKNOW, EE_CHAR_LANGUAGE_CJK );
+        ppDefItems[34] = new SvxLanguageItem( LANGUAGE_DONTKNOW, EE_CHAR_LANGUAGE_CTL );
+        ppDefItems[35] = new SvxFontItem( EE_CHAR_FONTINFO_CJK );
+        ppDefItems[36] = new SvxFontItem( EE_CHAR_FONTINFO_CTL );
+        ppDefItems[37] = new SvxFontHeightItem( 240, 100, EE_CHAR_FONTHEIGHT_CJK );
+        ppDefItems[38] = new SvxFontHeightItem( 240, 100, EE_CHAR_FONTHEIGHT_CTL );
+        ppDefItems[39] = new SvxWeightItem( WEIGHT_NORMAL, EE_CHAR_WEIGHT_CJK );
+        ppDefItems[40] = new SvxWeightItem( WEIGHT_NORMAL, EE_CHAR_WEIGHT_CTL );
+        ppDefItems[41] = new SvxPostureItem( ITALIC_NONE, EE_CHAR_ITALIC_CJK );
+        ppDefItems[42] = new SvxPostureItem( ITALIC_NONE, EE_CHAR_ITALIC_CTL );
+        ppDefItems[43] = new SvxEmphasisMarkItem( EMPHASISMARK_NONE, EE_CHAR_EMPHASISMARK );
+        ppDefItems[44] = new SvxCharReliefItem( RELIEF_NONE, EE_CHAR_RELIEF );
+        ppDefItems[45] = new SfxVoidItem( EE_CHAR_RUBI_DUMMY );
 #ifndef SVX_LIGHT
-        ppDefItems[44] = new SvXMLAttrContainerItem( EE_CHAR_XMLATTRIBS );
+        ppDefItems[46] = new SvXMLAttrContainerItem( EE_CHAR_XMLATTRIBS );
 #else
         // no need to have alien attributes persistent
-        ppDefItems[44] = new SfxVoidItem( EE_CHAR_XMLATTRIBS );
+        ppDefItems[46] = new SfxVoidItem( EE_CHAR_XMLATTRIBS );
 #endif // #ifndef SVX_LIGHT
-        ppDefItems[45] = new SvxOverlineItem( UNDERLINE_NONE, EE_CHAR_OVERLINE );
+        ppDefItems[47] = new SvxOverlineItem( UNDERLINE_NONE, EE_CHAR_OVERLINE );
 
         // Features
-        ppDefItems[46] = new SfxVoidItem( EE_FEATURE_TAB );
-        ppDefItems[47] = new SfxVoidItem( EE_FEATURE_LINEBR );
-        ppDefItems[48] = new SvxCharSetColorItem( Color( COL_RED ), RTL_TEXTENCODING_DONTKNOW, EE_FEATURE_NOTCONV );
-        ppDefItems[49] = new SvxFieldItem( SvxFieldData(), EE_FEATURE_FIELD );
+        ppDefItems[48] = new SfxVoidItem( EE_FEATURE_TAB );
+        ppDefItems[49] = new SfxVoidItem( EE_FEATURE_LINEBR );
+        ppDefItems[50] = new SvxCharSetColorItem( Color( COL_RED ), RTL_TEXTENCODING_DONTKNOW, EE_FEATURE_NOTCONV );
+        ppDefItems[51] = new SvxFieldItem( SvxFieldData(), EE_FEATURE_FIELD );
 
-        DBG_ASSERT( EDITITEMCOUNT == 50, "ITEMCOUNT geaendert, DefItems nicht angepasst!" );
+        DBG_ASSERT( EDITITEMCOUNT == 52, "ITEMCOUNT geaendert, DefItems nicht angepasst!" );
 
         // Init DefFonts:
         GetDefaultFonts( *(SvxFontItem*)ppDefItems[EE_CHAR_FONTINFO - EE_ITEMS_START],
diff --git svx/source/editeng/impedit.hxx svx/source/editeng/impedit.hxx
index e3773fa..2e13755 100644
--- svx/source/editeng/impedit.hxx
+++ svx/source/editeng/impedit.hxx
@@ -674,6 +674,8 @@ private:
     void				SetBackgroundColor( const Color& rColor ) { maBackgroundColor = rColor; }
     Color				GetBackgroundColor() const { return maBackgroundColor; }
 
+    long                CalcVertLineSpacing(Point& rStartPos) const;
+
     Color				GetAutoColor() const;
     void                EnableAutoColor( BOOL b ) { bUseAutoColor = b; }
     BOOL                IsAutoColorEnabled() const { return bUseAutoColor; }
@@ -994,6 +996,8 @@ public:
 
     const SvxLRSpaceItem&	GetLRSpaceItem( ContentNode* pNode );
     SvxAdjust               GetJustification( USHORT nPara ) const;
+    SvxCellJustifyMethod    GetJustifyMethod( USHORT nPara ) const;
+    SvxCellVerJustify       GetVerJustification( USHORT nPara ) const;
 
     void				SetCharStretching( sal_uInt16 nX, sal_uInt16 nY );
     inline void			GetCharStretching( sal_uInt16& rX, sal_uInt16& rY );
diff --git svx/source/editeng/impedit2.cxx svx/source/editeng/impedit2.cxx
index 9f543cb..26bc042 100644
--- svx/source/editeng/impedit2.cxx
+++ svx/source/editeng/impedit2.cxx
@@ -58,6 +58,7 @@
 #include <svx/adjitem.hxx>
 #include <svx/scripttypeitem.hxx>
 #include <svx/frmdiritem.hxx>
+#include "svx/algitem.hxx"
 #include <fontitem.hxx>
 #include <sfx2/viewfrm.hxx>
 #include <sfx2/fcontnr.hxx>
@@ -2145,6 +2146,20 @@ SvxAdjust ImpEditEngine::GetJustification( USHORT nPara ) const
     return eJustification;
 }
 
+SvxCellJustifyMethod ImpEditEngine::GetJustifyMethod( USHORT nPara ) const
+{
+    const SvxJustifyMethodItem& rItem = static_cast<const SvxJustifyMethodItem&>(
+        GetParaAttrib(nPara, EE_PARA_JUST_METHOD));
+    return static_cast<SvxCellJustifyMethod>(rItem.GetEnumValue());
+}
+
+SvxCellVerJustify ImpEditEngine::GetVerJustification( USHORT nPara ) const
+{
+    const SvxVerJustifyItem& rItem = static_cast<const SvxVerJustifyItem&>(
+        GetParaAttrib(nPara, EE_PARA_VER_JUST));
+    return static_cast<SvxCellVerJustify>(rItem.GetEnumValue());
+}
+
 
 //	----------------------------------------------------------------------
 //	Textaenderung
diff --git svx/source/editeng/impedit3.cxx svx/source/editeng/impedit3.cxx
index 435721d..3e91d45 100644
--- svx/source/editeng/impedit3.cxx
+++ svx/source/editeng/impedit3.cxx
@@ -66,6 +66,7 @@
 #include <svx/scriptspaceitem.hxx>
 #include <svx/charscaleitem.hxx>
 #include <svx/numitem.hxx>
+#include "svx/algitem.hxx"
 
 #include <svtools/colorcfg.hxx>
 #include <svtools/ctloptions.hxx>
@@ -1440,9 +1441,10 @@ sal_Bool ImpEditEngine::CreateLines( USHORT nPara, sal_uInt32 nStartPosY )
             break;
             case SVX_ADJUST_BLOCK:
             {
+                bool bDistLastLine = (GetJustifyMethod(nPara) == SVX_JUSTIFY_METHOD_DISTRIBUTE);
                 long nRemainingSpace = nMaxLineWidth - aTextSize.Width();
                 pLine->SetStartPosX( (sal_uInt16)nStartX );
-                if ( !bEOC && ( nRemainingSpace > 0 ) ) // nicht die letzte Zeile...
+                if ( nRemainingSpace > 0 && (!bEOC || bDistLastLine) )
                     ImpAdjustBlocks( pParaPortion, pLine, nRemainingSpace );
             }
             break;
@@ -2024,22 +2026,42 @@ void ImpEditEngine::ImpAdjustBlocks( ParaPortion* pParaPortion, EditLine* pLine,
 
     // Search blanks or Kashidas...
     SvUShorts aPositions;
-    USHORT nChar;
-    for ( nChar = nFirstChar; nChar <= nLastChar; nChar++ )
+    USHORT nLastScript = i18n::ScriptType::LATIN;
+    for ( USHORT nChar = nFirstChar; nChar <= nLastChar; nChar++ )
     {
+        EditPaM aPaM( pNode, nChar+1 );
+        LanguageType eLang = GetLanguage(aPaM);
+        USHORT nScript = GetScriptType(aPaM);
+        if ( MsLangId::getPrimaryLanguage( eLang) == LANGUAGE_ARABIC_PRIMARY_ONLY )
+            // Arabic script is handled later.
+            continue;
+
         if ( pNode->GetChar(nChar) == ' ' )
         {
-            // Don't use blank if language is arabic
-            LanguageType eLang = GetLanguage( EditPaM( pNode, nChar ) );
-            if ( MsLangId::getPrimaryLanguage( eLang) != LANGUAGE_ARABIC_PRIMARY_ONLY )
-                aPositions.Insert( nChar, aPositions.Count() );
+            // Normal latin script.
+            aPositions.Insert( nChar, aPositions.Count() );
         }
+        else if (nChar > nFirstChar)
+        {    
+            if (nLastScript == i18n::ScriptType::ASIAN)
+            {
+                // Set break position between this and the last character if 
+                // the last character is asian script.
+                aPositions.Insert( nChar-1, aPositions.Count() );
+            }
+            else if (nScript == i18n::ScriptType::ASIAN)
+            {
+                // Set break position between a latin script and asian script.
+                aPositions.Insert( nChar-1, aPositions.Count() );
+            }
+        }
+
+        nLastScript = nScript;
     }
 
     // Kashidas ?
     ImpFindKashidas( pNode, nFirstChar, nLastChar, aPositions );
 
-
     if ( !aPositions.Count() )
         return;
 
@@ -2079,12 +2101,13 @@ void ImpEditEngine::ImpAdjustBlocks( ParaPortion* pParaPortion, EditLine* pLine,
     // Letztes Zeichen wird schon nicht mehr beachtet...
     for ( USHORT n = 0; n < aPositions.Count(); n++ )
     {
-        nChar = aPositions[n];
+        USHORT nChar = aPositions[n];
         if ( nChar < nLastChar )
         {
             USHORT nPortionStart, nPortion;
-            nPortion = pParaPortion->GetTextPortions().FindPortion( nChar, nPortionStart );
+            nPortion = pParaPortion->GetTextPortions().FindPortion( nChar, nPortionStart, true );
             TextPortion* pLastPortion = pParaPortion->GetTextPortions()[ nPortion ];
+            USHORT nPortionEnd = nPortionStart + pLastPortion->GetLen();
 
             // Die Breite der Portion:
             pLastPortion->GetSize().Width() += nMore4Everyone;
@@ -2093,7 +2116,7 @@ void ImpEditEngine::ImpAdjustBlocks( ParaPortion* pParaPortion, EditLine* pLine,
 
             // Correct positions in array
             // Even for kashidas just change positions, VCL will then draw the kashida automaticly
-            USHORT nPortionEnd = nPortionStart + pLastPortion->GetLen();
+
             for ( USHORT _n = nChar; _n < nPortionEnd; _n++ )
             {
                 pLine->GetCharPosArray()[_n-nFirstChar] += nMore4Everyone;
@@ -2904,6 +2927,8 @@ void ImpEditEngine::Paint( OutputDevice* pOutDev, Rectangle aClipRec, Point aSta
 //	if( GetStatus().DoOnlineSpelling() && pActiveView )
 //		aCurPos = pActiveView->pImpEditView->GetEditSelections().Max();
 
+    long nVertLineSpacing = CalcVertLineSpacing(aStartPos);
+
     // --------------------------------------------------
     // Ueber alle Absaetze...
     // --------------------------------------------------
@@ -2952,12 +2977,16 @@ void ImpEditEngine::Paint( OutputDevice* pOutDev, Rectangle aClipRec, Point aSta
                     aTmpPos.X() += pLine->GetStartPosX();
                     aTmpPos.Y() += pLine->GetMaxAscent();
                     aStartPos.Y() += pLine->GetHeight();
+                    if (nLine != nLastLine)
+                        aStartPos.Y() += nVertLineSpacing;
                 }
                 else
                 {
                     aTmpPos.Y() += pLine->GetStartPosX();
                     aTmpPos.X() -= pLine->GetMaxAscent();
                     aStartPos.X() -= pLine->GetHeight();
+                    if (nLine != nLastLine)
+                        aStartPos.X() -= nVertLineSpacing;
                 }
 
                 if ( ( !IsVertical() && ( aStartPos.Y() > aClipRec.Top() ) )
@@ -4040,6 +4069,54 @@ ParaPortion* ImpEditEngine::GetNextVisPortion( ParaPortion* pCurPortion )
     return pPortion;
 }
 
+long ImpEditEngine::CalcVertLineSpacing(Point& rStartPos) const
+{
+    long nTotalOccupiedHeight = 0;
+    sal_uInt16 nTotalLineCount = 0;
+    const ParaPortionList& rParaPortions = GetParaPortions();
+    sal_uInt16 nParaCount = rParaPortions.Count();
+
+    for (sal_uInt16 i = 0; i < nParaCount; ++i)
+    {
+        if (GetVerJustification(i) != SVX_VER_JUSTIFY_BLOCK)
+            // All paragraphs must have the block justification set.
+            return 0;
+
+        ParaPortion* pPortion = rParaPortions.GetObject(i);
+        nTotalOccupiedHeight += pPortion->GetFirstLineOffset();
+
+        const SvxLineSpacingItem& rLSItem = (const SvxLineSpacingItem&)pPortion->GetNode()->GetContentAttribs().GetItem(EE_PARA_SBL);
+        sal_uInt16 nSBL = ( rLSItem.GetInterLineSpaceRule() == SVX_INTER_LINE_SPACE_FIX )
+                            ? GetYValue( rLSItem.GetInterLineSpace() ) : 0;
+
+        const SvxULSpaceItem& rULItem = (const SvxULSpaceItem&)pPortion->GetNode()->GetContentAttribs().GetItem(EE_PARA_ULSPACE);
+        long nUL = GetYValue( rULItem.GetLower() );
+
+        EditLineList& rLines = pPortion->GetLines();
+        sal_uInt16 nLineCount = rLines.Count();
+        nTotalLineCount += nLineCount;
+        for (sal_uInt16 j = 0; j < nLineCount; ++j)
+        {
+            EditLine* pLine = rLines.GetObject(j);
+            nTotalOccupiedHeight += pLine->GetHeight();
+            if (j < nLineCount-1)
+                nTotalOccupiedHeight += nSBL;
+            nTotalOccupiedHeight += nUL;
+        }
+    }
+
+    long nTotalSpace = IsVertical() ? aPaperSize.Width() : aPaperSize.Height();
+    nTotalSpace -= nTotalOccupiedHeight;
+    if (nTotalSpace <= 0 || nTotalLineCount <= 1)
+        return 0;
+
+    if (IsVertical())
+        // Shift the text to the right for the asian layout mode.
+        rStartPos.X() += nTotalSpace;
+
+    return nTotalSpace / (nTotalLineCount-1);
+}
+
 EditPaM ImpEditEngine::InsertParagraph( sal_uInt16 nPara )
 {
     EditPaM aPaM;
diff --git svx/source/items/algitem.cxx svx/source/items/algitem.cxx
index 4ce57b6..9bec827 100644
--- svx/source/items/algitem.cxx
+++ svx/source/items/algitem.cxx
@@ -36,7 +36,8 @@
 
 #include <tools/stream.hxx>
 #include <com/sun/star/table/BorderLine.hpp>
-#include <com/sun/star/table/CellVertJustify.hpp>
+#include <com/sun/star/table/CellJustifyMethod.hpp>
+#include <com/sun/star/table/CellVertJustify2.hpp>
 #include <com/sun/star/table/ShadowLocation.hpp>
 #include <com/sun/star/table/TableBorder.hpp>
 #include <com/sun/star/table/ShadowFormat.hpp>
@@ -296,16 +297,17 @@ sal_Bool SvxVerJustifyItem::QueryValue( uno::Any& rVal, BYTE nMemberId ) const
             }
         default:
             {
-                table::CellVertJustify eUno = table::CellVertJustify_STANDARD;
+                sal_Int32 nUno = table::CellVertJustify2::STANDARD;
                 switch ( (SvxCellVerJustify)GetValue() )
                 {
-                    case SVX_VER_JUSTIFY_STANDARD: eUno = table::CellVertJustify_STANDARD; break;
-                    case SVX_VER_JUSTIFY_TOP:	   eUno = table::CellVertJustify_TOP;	    break;
-                    case SVX_VER_JUSTIFY_CENTER:   eUno = table::CellVertJustify_CENTER;	break;
-                    case SVX_VER_JUSTIFY_BOTTOM:   eUno = table::CellVertJustify_BOTTOM;	break;
+                    case SVX_VER_JUSTIFY_STANDARD: nUno = table::CellVertJustify2::STANDARD; break;
+                    case SVX_VER_JUSTIFY_TOP:      nUno = table::CellVertJustify2::TOP;     break;
+                    case SVX_VER_JUSTIFY_CENTER:   nUno = table::CellVertJustify2::CENTER;  break;
+                    case SVX_VER_JUSTIFY_BOTTOM:   nUno = table::CellVertJustify2::BOTTOM;  break;
+                    case SVX_VER_JUSTIFY_BLOCK:    nUno = table::CellVertJustify2::BLOCK;  break;
                     default: ; //prevent warning
                 }
-                rVal <<= eUno;
+                rVal <<= nUno;
                 break;
             }
     }
@@ -337,22 +339,20 @@ sal_Bool SvxVerJustifyItem::PutValue( const uno::Any& rVal, BYTE nMemberId )
             }
         default:
             {
-                table::CellVertJustify eUno;
+                sal_Int32 eUno;
                 if(!(rVal >>= eUno))
                 {
-                    sal_Int32 nValue = 0;
-                    if(!(rVal >>= nValue))
-                        return sal_False;
-                    eUno = (table::CellVertJustify)nValue;
+                    eUno = table::CellVertJustify2::STANDARD;
                 }
 
                 SvxCellVerJustify eSvx = SVX_VER_JUSTIFY_STANDARD;
                 switch (eUno)
                 {
-                    case table::CellVertJustify_STANDARD: eSvx = SVX_VER_JUSTIFY_STANDARD;  break;
-                    case table::CellVertJustify_TOP:	  eSvx = SVX_VER_JUSTIFY_TOP;	  	break;
-                    case table::CellVertJustify_CENTER:   eSvx = SVX_VER_JUSTIFY_CENTER;	break;
-                    case table::CellVertJustify_BOTTOM:   eSvx = SVX_VER_JUSTIFY_BOTTOM;	break;
+                    case table::CellVertJustify2::STANDARD: eSvx = SVX_VER_JUSTIFY_STANDARD;  break;
+                    case table::CellVertJustify2::TOP:      eSvx = SVX_VER_JUSTIFY_TOP;       break;
+                    case table::CellVertJustify2::CENTER:   eSvx = SVX_VER_JUSTIFY_CENTER;    break;
+                    case table::CellVertJustify2::BOTTOM:   eSvx = SVX_VER_JUSTIFY_BOTTOM;    break;
+                    case table::CellVertJustify2::BLOCK:    eSvx = SVX_VER_JUSTIFY_BLOCK;     break;
                     default: ; //prevent warning
                 }
                 SetValue( (USHORT)eSvx );
@@ -394,6 +394,117 @@ USHORT SvxVerJustifyItem::GetValueCount() const
     return SVX_VER_JUSTIFY_BOTTOM + 1;	// letzter Enum-Wert + 1
 }
 
+
+// class SvxJustifyMethodItem -----------------------------------------------
+
+SvxJustifyMethodItem::SvxJustifyMethodItem( const USHORT nId ) :
+    SfxEnumItem( nId, (USHORT)SVX_JUSTIFY_METHOD_AUTO )
+{
+}
+
+SvxJustifyMethodItem::SvxJustifyMethodItem( const SvxCellJustifyMethod eJustify,
+                                      const USHORT nId ) :
+    SfxEnumItem( nId, (USHORT)eJustify )
+{
+}
+
+//------------------------------------------------------------------------
+
+SfxItemPresentation SvxJustifyMethodItem::GetPresentation
+(
+    SfxItemPresentation ePres,
+    SfxMapUnit          /*eCoreUnit*/,
+    SfxMapUnit          /*ePresUnit*/,
+    XubString&              rText,
+    const IntlWrapper * )    const
+{
+    switch ( ePres )
+    {
+        case SFX_ITEM_PRESENTATION_NONE:
+            rText.Erase();
+            return SFX_ITEM_PRESENTATION_NONE;
+        case SFX_ITEM_PRESENTATION_NAMELESS:
+        case SFX_ITEM_PRESENTATION_COMPLETE:
+            rText = GetValueText( GetValue() );
+            return SFX_ITEM_PRESENTATION_COMPLETE;
+        default: ; //prevent warning
+    }
+    return SFX_ITEM_PRESENTATION_NONE;
+}
+
+//------------------------------------------------------------------------
+
+sal_Bool SvxJustifyMethodItem::QueryValue( uno::Any& rVal, BYTE /*nMemberId*/ ) const
+{
+    sal_Int32 nUno = table::CellJustifyMethod::AUTO;
+    switch (static_cast<SvxCellJustifyMethod>(GetValue()))
+    {
+        case SVX_JUSTIFY_METHOD_AUTO:       nUno = table::CellJustifyMethod::AUTO;       break;
+        case SVX_JUSTIFY_METHOD_DISTRIBUTE: nUno = table::CellJustifyMethod::DISTRIBUTE; break;
+        default:;
+    }
+    rVal <<= nUno;
+    return true;
+}
+
+sal_Bool SvxJustifyMethodItem::PutValue( const uno::Any& rVal, BYTE /*nMemberId*/ )
+{
+    sal_Int32 nVal = table::CellJustifyMethod::AUTO;
+    if (!(rVal >>= nVal))
+        return false;
+
+    SvxCellJustifyMethod eSvx = SVX_JUSTIFY_METHOD_AUTO;
+    switch (nVal)
+    {
+        case table::CellJustifyMethod::AUTO:
+            eSvx = SVX_JUSTIFY_METHOD_AUTO;
+        break;
+        case table::CellJustifyMethod::DISTRIBUTE:
+            eSvx = SVX_JUSTIFY_METHOD_DISTRIBUTE;
+        break;
+        default:;
+    }
+    SetValue(static_cast<USHORT>(eSvx));
+    return true;
+}
+
+//------------------------------------------------------------------------
+
+XubString SvxJustifyMethodItem::GetValueText( USHORT nVal ) const
+{
+    DBG_ASSERT( nVal <= SVX_VER_JUSTIFY_BOTTOM, "enum overflow!" );
+    return SVX_RESSTR(RID_SVXITEMS_JUSTMETHOD_AUTO + nVal);
+}
+
+//------------------------------------------------------------------------
+
+SfxPoolItem* SvxJustifyMethodItem::Clone( SfxItemPool* ) const
+{
+    return new SvxJustifyMethodItem( *this );
+}
+
+//------------------------------------------------------------------------
+
+SfxPoolItem* SvxJustifyMethodItem::Create( SvStream& rStream, USHORT ) const
+{
+    USHORT nVal;
+    rStream >> nVal;
+    return new SvxJustifyMethodItem( (SvxCellJustifyMethod)nVal, Which() );
+}
+
+//------------------------------------------------------------------------
+
+USHORT SvxJustifyMethodItem::GetValueCount() const
+{
+    return SVX_JUSTIFY_METHOD_DISTRIBUTE + 1;	// letzter Enum-Wert + 1
+}
+
+SvxJustifyMethodItem& SvxJustifyMethodItem::operator=(const SvxJustifyMethodItem& r)
+{
+    SetValue( r.GetValue() );
+    return *this;
+}
+
 // class SvxOrientationItem ----------------------------------------------
 
 SvxOrientationItem::SvxOrientationItem( const SvxCellOrientation eOrientation,
diff --git svx/source/items/frmitems.cxx svx/source/items/frmitems.cxx
index 5b1bef3..f0e8c7b 100644
--- svx/source/items/frmitems.cxx
+++ svx/source/items/frmitems.cxx
@@ -85,14 +85,12 @@
 #include "svxerr.hxx"
 #include <svx/unoprnms.hxx>
 #include <com/sun/star/table/BorderLine.hpp>
-#include <com/sun/star/table/CellVertJustify.hpp>
 #include <com/sun/star/table/ShadowLocation.hpp>
 #include <com/sun/star/table/TableBorder.hpp>
 #include <com/sun/star/table/ShadowFormat.hpp>
 #include <com/sun/star/table/CellRangeAddress.hpp>
 #include <com/sun/star/table/CellContentType.hpp>
 #include <com/sun/star/table/TableOrientation.hpp>
-#include <com/sun/star/table/CellHoriJustify.hpp>
 #include <com/sun/star/util/SortField.hpp>
 #include <com/sun/star/util/SortFieldType.hpp>
 #include <com/sun/star/table/CellOrientation.hpp>
diff --git svx/source/items/makefile.mk svx/source/items/makefile.mk
index ef4bf0b..a90ea07 100644
--- svx/source/items/makefile.mk
+++ svx/source/items/makefile.mk
@@ -60,6 +60,7 @@ LIB1OBJFILES= \
         $(SLO)$/textitem.obj \
         $(SLO)$/flditem.obj \
         $(SLO)$/svxfont.obj \
+        $(SLO)$/algitem.obj \
         $(SLO)$/paperinf.obj    \
         $(SLO)$/drawitem.obj	\
         $(SLO)$/itemtype.obj	\
@@ -80,7 +81,6 @@ LIB2OBJFILES= \
         $(SLO)$/hlnkitem.obj \
         $(SLO)$/pageitem.obj	\
                 $(SLO)$/viewlayoutitem.obj    \
-        $(SLO)$/algitem.obj \
         $(SLO)$/rotmodit.obj \
         $(SLO)$/numinf.obj	\
         $(SLO)$/svxerr.obj	\
diff --git svx/source/items/rotmodit.cxx svx/source/items/rotmodit.cxx
index 6374cee..9366a29 100644
--- svx/source/items/rotmodit.cxx
+++ svx/source/items/rotmodit.cxx
@@ -32,14 +32,13 @@
 #include "precompiled_svx.hxx"
 #include <tools/stream.hxx>
 #include <com/sun/star/table/BorderLine.hpp>
-#include <com/sun/star/table/CellVertJustify.hpp>
+#include <com/sun/star/table/CellVertJustify2.hpp>
 #include <com/sun/star/table/ShadowLocation.hpp>
 #include <com/sun/star/table/TableBorder.hpp>
 #include <com/sun/star/table/ShadowFormat.hpp>
 #include <com/sun/star/table/CellRangeAddress.hpp>
 #include <com/sun/star/table/CellContentType.hpp>
 #include <com/sun/star/table/TableOrientation.hpp>
-#include <com/sun/star/table/CellHoriJustify.hpp>
 #include <com/sun/star/util/SortField.hpp>
 #include <com/sun/star/util/SortFieldType.hpp>
 #include <com/sun/star/table/CellOrientation.hpp>
@@ -137,40 +136,35 @@ USHORT __EXPORT SvxRotateModeItem::GetVersion( USHORT /*nFileVersion*/ ) const
     return 0;
 }
 
-//	QueryValue/PutValue: Der ::com::sun::star::table::CellVertJustify enum wird mitbenutzt...
-
 sal_Bool SvxRotateModeItem::QueryValue( uno::Any& rVal, BYTE /*nMemberId*/ ) const
 {
-    table::CellVertJustify eUno = table::CellVertJustify_STANDARD;
+    sal_Int32 nUno = table::CellVertJustify2::STANDARD;
     switch ( (SvxRotateMode)GetValue() )
     {
-        case SVX_ROTATE_MODE_STANDARD: eUno = table::CellVertJustify_STANDARD; break;
-        case SVX_ROTATE_MODE_TOP:	   eUno = table::CellVertJustify_TOP;	  	break;
-        case SVX_ROTATE_MODE_CENTER:   eUno = table::CellVertJustify_CENTER;	break;
-        case SVX_ROTATE_MODE_BOTTOM:   eUno = table::CellVertJustify_BOTTOM;	break;
+        case SVX_ROTATE_MODE_STANDARD: nUno = table::CellVertJustify2::STANDARD; break;
+        case SVX_ROTATE_MODE_TOP:      nUno = table::CellVertJustify2::TOP;      break;
+        case SVX_ROTATE_MODE_CENTER:   nUno = table::CellVertJustify2::CENTER;   break;
+        case SVX_ROTATE_MODE_BOTTOM:   nUno = table::CellVertJustify2::BOTTOM;   break;
     }
-    rVal <<= eUno;
+    rVal <<= nUno;
     return sal_True;
 }
 
 sal_Bool SvxRotateModeItem::PutValue( const uno::Any& rVal, BYTE /*nMemberId*/ )
 {
-    table::CellVertJustify eUno;
-    if(!(rVal >>= eUno))
+    sal_Int32 nUno;
+    if(!(rVal >>= nUno))
     {
-        sal_Int32 nValue = 0;
-        if(!(rVal >>= nValue))
-            return sal_False;
-        eUno = (table::CellVertJustify)nValue;
+        nUno = table::CellVertJustify2::STANDARD;
     }
 
     SvxRotateMode eSvx = SVX_ROTATE_MODE_STANDARD;
-    switch (eUno)
+    switch (nUno)
     {
-        case table::CellVertJustify_STANDARD: eSvx = SVX_ROTATE_MODE_STANDARD; break;
-        case table::CellVertJustify_TOP:	   eSvx = SVX_ROTATE_MODE_TOP;	  	break;
-        case table::CellVertJustify_CENTER:   eSvx = SVX_ROTATE_MODE_CENTER;	break;
-        case table::CellVertJustify_BOTTOM:   eSvx = SVX_ROTATE_MODE_BOTTOM;	break;
+        case table::CellVertJustify2::STANDARD: eSvx = SVX_ROTATE_MODE_STANDARD; break;
+        case table::CellVertJustify2::TOP:      eSvx = SVX_ROTATE_MODE_TOP;      break;
+        case table::CellVertJustify2::CENTER:   eSvx = SVX_ROTATE_MODE_CENTER;   break;
+        case table::CellVertJustify2::BOTTOM:   eSvx = SVX_ROTATE_MODE_BOTTOM;   break;
         default: ;//prevent warning
     }
     SetValue( (USHORT)eSvx );
