diff --git svx/inc/svx/algitem.hxx svx/inc/svx/algitem.hxx
index faf381d..2663c47 100644
--- svx/inc/svx/algitem.hxx
+++ svx/inc/svx/algitem.hxx
@@ -39,77 +39,6 @@ class SvStream;
 
 //------------------------------------------------------------------------
 
-
-
-class SVX_DLLPUBLIC SvxHorJustifyItem: public SfxEnumItem
-{
-public:
-    TYPEINFO();
-
-    SvxHorJustifyItem( const USHORT nId );
-
-    SvxHorJustifyItem(
-        const SvxCellHorJustify eJustify /*= SVX_HOR_JUSTIFY_STANDARD*/,
-        const USHORT nId );
-
-    virtual SfxItemPresentation GetPresentation( SfxItemPresentation ePres,
-                                    SfxMapUnit eCoreMetric,
-                                    SfxMapUnit ePresMetric,
-                                    String &rText, const IntlWrapper * = 0 ) const;
-
-    virtual	sal_Bool        	 QueryValue( com::sun::star::uno::Any& rVal, BYTE nMemberId = 0 ) const;
-    virtual	sal_Bool			 PutValue( const com::sun::star::uno::Any& rVal, BYTE nMemberId = 0 );
-
-    virtual USHORT          GetValueCount() const;
-    virtual String          GetValueText( USHORT nVal ) const;
-    virtual SfxPoolItem*    Clone( SfxItemPool *pPool = 0 ) const;
-    virtual SfxPoolItem*    Create( SvStream& rStream, USHORT nVer ) const;
-
-    inline  SvxHorJustifyItem& operator=(const SvxHorJustifyItem& rHorJustify)
-            {
-                SetValue( rHorJustify.GetValue() );
-                return *this;
-            }
-};
-
-
-//------------------------------------------------------------------------
-
-
-class SVX_DLLPUBLIC SvxVerJustifyItem: public SfxEnumItem
-{
-public:
-    TYPEINFO();
-
-    SvxVerJustifyItem( const USHORT nId  );
-
-    SvxVerJustifyItem(
-        const SvxCellVerJustify eJustify /*= SVX_VER_JUSTIFY_STANDARD*/,
-        const USHORT nId  );
-
-    virtual SfxItemPresentation GetPresentation( SfxItemPresentation ePres,
-                                    SfxMapUnit eCoreMetric,
-                                    SfxMapUnit ePresMetric,
-                                    String &rText, const IntlWrapper * = 0 ) const;
-
-    virtual	sal_Bool        	 QueryValue( com::sun::star::uno::Any& rVal, BYTE nMemberId = 0 ) const;
-    virtual	sal_Bool			 PutValue( const com::sun::star::uno::Any& rVal, BYTE nMemberId = 0 );
-
-    virtual USHORT          GetValueCount() const;
-    virtual String          GetValueText( USHORT nVal ) const;
-    virtual SfxPoolItem*    Clone( SfxItemPool *pPool = 0 ) const;
-    virtual SfxPoolItem*    Create( SvStream& rStream, USHORT nVer ) const;
-
-    inline  SvxVerJustifyItem& operator=(const SvxVerJustifyItem& rVerJustify)
-            {
-                SetValue( rVerJustify.GetValue() );
-                return *this;
-            }
-};
-
-
-//------------------------------------------------------------------------
-
 class SVX_DLLPUBLIC SvxOrientationItem: public SfxEnumItem
 {
 public:
diff --git svx/inc/svx/svxids.hrc svx/inc/svx/svxids.hrc
index 665ee7f..7f61d83 100644
--- svx/inc/svx/svxids.hrc
+++ svx/inc/svx/svxids.hrc
@@ -587,8 +587,8 @@
 #define SID_ATTR_POSITION                               ( SID_SVX_START + 223 )
 #define SID_ATTR_SIZE                                   ( SID_SVX_START + 224 )
 #define SID_TABLE_CELL                                  ( SID_SVX_START + 225 )
-#define SID_ATTR_ALIGN_HOR_JUSTIFY                      ( SID_SVX_START + 226 )
-#define SID_ATTR_ALIGN_VER_JUSTIFY                      ( SID_SVX_START + 227 )
+//#define SID_ATTR_ALIGN_HOR_JUSTIFY                      ( SID_SVX_START + 226 )
+//#define SID_ATTR_ALIGN_VER_JUSTIFY                      ( SID_SVX_START + 227 )
 #define SID_ATTR_ALIGN_MARGIN                           ( SID_SVX_START + 228 )
 #define SID_ATTR_ALIGN_STACKED                          ( SID_SVX_START + 229 )
 #define SID_ATTR_ALIGN_LINEBREAK                        ( SID_SVX_START + 230 )
diff --git svx/inc/svx/svxitems.hrc svx/inc/svx/svxitems.hrc
index 1909e2d..8a1a2cd 100644
--- svx/inc/svx/svxitems.hrc
+++ svx/inc/svx/svxitems.hrc
@@ -104,20 +104,6 @@
 #define RID_SVXITEMS_CHARSET_SYSTEM			(RID_SVXITEMS_START + 154)
 #define RID_SVXITEMS_CHARSET_SYMBOL			(RID_SVXITEMS_START + 155)
 
-// enum SvxCellHorJustify
-#define RID_SVXITEMS_HORJUST_STANDARD		(RID_SVXITEMS_START + 400)
-#define RID_SVXITEMS_HORJUST_LEFT			(RID_SVXITEMS_START + 401)
-#define RID_SVXITEMS_HORJUST_CENTER			(RID_SVXITEMS_START + 402)
-#define RID_SVXITEMS_HORJUST_RIGHT			(RID_SVXITEMS_START + 403)
-#define RID_SVXITEMS_HORJUST_BLOCK			(RID_SVXITEMS_START + 404)
-#define RID_SVXITEMS_HORJUST_REPEAT			(RID_SVXITEMS_START + 405)
-
-// enum SvxCellVerJustify
-#define RID_SVXITEMS_VERJUST_STANDARD		(RID_SVXITEMS_START + 406)
-#define RID_SVXITEMS_VERJUST_TOP			(RID_SVXITEMS_START + 407)
-#define RID_SVXITEMS_VERJUST_CENTER			(RID_SVXITEMS_START + 408)
-#define RID_SVXITEMS_VERJUST_BOTTOM			(RID_SVXITEMS_START + 409)
-
 // enum SvxCellOrientation
 #define RID_SVXITEMS_ORI_STANDARD			(RID_SVXITEMS_START + 410)
 #define RID_SVXITEMS_ORI_TOPBOTTOM			(RID_SVXITEMS_START + 411)
diff --git svx/source/items/algitem.cxx svx/source/items/algitem.cxx
index ac96e23..a8551cc 100644
--- svx/source/items/algitem.cxx
+++ svx/source/items/algitem.cxx
@@ -33,16 +33,12 @@
 
 #include <tools/stream.hxx>
 #include <com/sun/star/table/BorderLine.hpp>
-#include <com/sun/star/table/CellVertJustify.hpp>
 #include <com/sun/star/table/ShadowLocation.hpp>
 #include <com/sun/star/table/TableBorder.hpp>
 #include <com/sun/star/table/ShadowFormat.hpp>
 #include <com/sun/star/table/CellRangeAddress.hpp>
 #include <com/sun/star/table/CellContentType.hpp>
 #include <com/sun/star/table/TableOrientation.hpp>
-#include <com/sun/star/table/CellHoriJustify.hpp>
-#include <com/sun/star/style/ParagraphAdjust.hpp>
-#include "com/sun/star/style/VerticalAlignment.hpp"
 #include <com/sun/star/util/SortField.hpp>
 #include <com/sun/star/util/SortFieldType.hpp>
 #include <com/sun/star/table/CellOrientation.hpp>
@@ -63,334 +59,9 @@ using namespace ::com::sun::star;
 // STATIC DATA -----------------------------------------------------------
 
 //TYPEINIT1_AUTOFACTORY( SvxHorJustifyItem, SfxEnumItem );
-TYPEINIT1_FACTORY( SvxHorJustifyItem, SfxEnumItem, new SvxHorJustifyItem(SVX_HOR_JUSTIFY_STANDARD, 0))
-TYPEINIT1_FACTORY( SvxVerJustifyItem, SfxEnumItem, new SvxVerJustifyItem(SVX_VER_JUSTIFY_STANDARD, 0) );
 TYPEINIT1_FACTORY( SvxOrientationItem, SfxEnumItem, new SvxOrientationItem(SVX_ORIENTATION_STANDARD, 0) );
 TYPEINIT1_FACTORY( SvxMarginItem, SfxPoolItem, new SvxMarginItem(0) );
 
-// class SvxHorJustifyItem -----------------------------------------------
-
-
-SvxHorJustifyItem::SvxHorJustifyItem( const USHORT nId ) :
-    SfxEnumItem( nId, (USHORT)SVX_HOR_JUSTIFY_STANDARD )
-{
-}
-
-SvxHorJustifyItem::SvxHorJustifyItem( const SvxCellHorJustify eJustify,
-                                      const USHORT nId ) :
-    SfxEnumItem( nId, (USHORT)eJustify )
-{
-}
-
-//------------------------------------------------------------------------
-
-SfxItemPresentation SvxHorJustifyItem::GetPresentation
-(
-    SfxItemPresentation ePres,
-    SfxMapUnit          /*eCoreUnit*/,
-    SfxMapUnit          /*ePresUnit*/,
-    XubString&              rText, const IntlWrapper *)    const
-{
-    switch ( ePres )
-    {
-        case SFX_ITEM_PRESENTATION_NONE:
-            rText.Erase();
-            return SFX_ITEM_PRESENTATION_NONE;
-        case SFX_ITEM_PRESENTATION_NAMELESS:
-        case SFX_ITEM_PRESENTATION_COMPLETE:
-            rText = GetValueText( GetValue() );
-            return SFX_ITEM_PRESENTATION_COMPLETE;
-        default: ; //prevent warning
-    }
-    return SFX_ITEM_PRESENTATION_NONE;
-}
-
-//------------------------------------------------------------------------
-
-sal_Bool SvxHorJustifyItem::QueryValue( uno::Any& rVal, BYTE nMemberId ) const
-{
-//    sal_Bool bConvert = 0!=(nMemberId&CONVERT_TWIPS);
-    nMemberId &= ~CONVERT_TWIPS;
-    switch ( nMemberId )
-    {
-        case MID_HORJUST_HORJUST:
-            {
-                table::CellHoriJustify eUno = table::CellHoriJustify_STANDARD;
-                switch ( (SvxCellHorJustify)GetValue() )
-                {
-                    case SVX_HOR_JUSTIFY_STANDARD: eUno = table::CellHoriJustify_STANDARD; break;
-                    case SVX_HOR_JUSTIFY_LEFT:	   eUno = table::CellHoriJustify_LEFT;	   break;
-                    case SVX_HOR_JUSTIFY_CENTER:   eUno = table::CellHoriJustify_CENTER;   break;
-                    case SVX_HOR_JUSTIFY_RIGHT:	   eUno = table::CellHoriJustify_RIGHT;	   break;
-                    case SVX_HOR_JUSTIFY_BLOCK:	   eUno = table::CellHoriJustify_BLOCK;	   break;
-                    case SVX_HOR_JUSTIFY_REPEAT:   eUno = table::CellHoriJustify_REPEAT;   break;
-                }
-                rVal <<= eUno;
-            }
-            break;
-        case MID_HORJUST_ADJUST:
-            {
-                //	ParagraphAdjust values, as in SvxAdjustItem
-                //	(same value for ParaAdjust and ParaLastLineAdjust)
-
-                sal_Int16 nAdjust = style::ParagraphAdjust_LEFT;
-                switch ( (SvxCellHorJustify)GetValue() )
-                {
-                    // ParagraphAdjust_LEFT is used for STANDARD and REPEAT
-                    case SVX_HOR_JUSTIFY_STANDARD:
-                    case SVX_HOR_JUSTIFY_REPEAT:
-                    case SVX_HOR_JUSTIFY_LEFT:	 nAdjust = style::ParagraphAdjust_LEFT;	  break;
-                    case SVX_HOR_JUSTIFY_CENTER: nAdjust = style::ParagraphAdjust_CENTER; break;
-                    case SVX_HOR_JUSTIFY_RIGHT:	 nAdjust = style::ParagraphAdjust_RIGHT;  break;
-                    case SVX_HOR_JUSTIFY_BLOCK:	 nAdjust = style::ParagraphAdjust_BLOCK;  break;
-                }
-                rVal <<= nAdjust;		// as sal_Int16
-            }
-            break;
-    }
-    return sal_True;
-}
-
-sal_Bool SvxHorJustifyItem::PutValue( const uno::Any& rVal, BYTE nMemberId )
-{
-//    sal_Bool bConvert = 0!=(nMemberId&CONVERT_TWIPS);
-    nMemberId &= ~CONVERT_TWIPS;
-    switch ( nMemberId )
-    {
-        case MID_HORJUST_HORJUST:
-            {
-                table::CellHoriJustify eUno;
-                if(!(rVal >>= eUno))
-                {
-                    sal_Int32 nValue = 0;
-                    if(!(rVal >>= nValue))
-                        return sal_False;
-                    eUno = (table::CellHoriJustify)nValue;
-                }
-                SvxCellHorJustify eSvx = SVX_HOR_JUSTIFY_STANDARD;
-                switch (eUno)
-                {
-                    case table::CellHoriJustify_STANDARD: eSvx = SVX_HOR_JUSTIFY_STANDARD; break;
-                    case table::CellHoriJustify_LEFT:	  eSvx = SVX_HOR_JUSTIFY_LEFT;	   break;
-                    case table::CellHoriJustify_CENTER:   eSvx = SVX_HOR_JUSTIFY_CENTER;   break;
-                    case table::CellHoriJustify_RIGHT:	  eSvx = SVX_HOR_JUSTIFY_RIGHT;	   break;
-                    case table::CellHoriJustify_BLOCK:	  eSvx = SVX_HOR_JUSTIFY_BLOCK;	   break;
-                    case table::CellHoriJustify_REPEAT:   eSvx = SVX_HOR_JUSTIFY_REPEAT;   break;
-                    default: ; //prevent warning
-                }
-                SetValue( (USHORT)eSvx );
-            }
-            break;
-        case MID_HORJUST_ADJUST:
-            {
-                //	property contains ParagraphAdjust values as sal_Int16
-                sal_Int16 nVal = sal_Int16();
-                if(!(rVal >>= nVal))
-                    return sal_False;
-
-                SvxCellHorJustify eSvx = SVX_HOR_JUSTIFY_STANDARD;
-                switch (nVal)
-                {
-                    //	STRETCH is treated as BLOCK
-                    case style::ParagraphAdjust_LEFT:    eSvx = SVX_HOR_JUSTIFY_LEFT;   break;
-                    case style::ParagraphAdjust_RIGHT:   eSvx = SVX_HOR_JUSTIFY_RIGHT;  break;
-                    case style::ParagraphAdjust_STRETCH:
-                    case style::ParagraphAdjust_BLOCK:   eSvx = SVX_HOR_JUSTIFY_BLOCK;  break;
-                    case style::ParagraphAdjust_CENTER:  eSvx = SVX_HOR_JUSTIFY_CENTER; break;
-                }
-                SetValue( (USHORT)eSvx );
-            }
-    }
-    return sal_True;
-}
-
-//------------------------------------------------------------------------
-
-XubString SvxHorJustifyItem::GetValueText( USHORT nVal ) const
-{
-    DBG_ASSERT( nVal <= SVX_HOR_JUSTIFY_REPEAT, "enum overflow!" );
-    return SVX_RESSTR(RID_SVXITEMS_HORJUST_STANDARD + nVal);
-}
-
-//------------------------------------------------------------------------
-
-SfxPoolItem* SvxHorJustifyItem::Clone( SfxItemPool* ) const
-{
-    return new SvxHorJustifyItem( *this );
-}
-
-//------------------------------------------------------------------------
-
-SfxPoolItem* SvxHorJustifyItem::Create( SvStream& rStream, USHORT ) const
-{
-    USHORT nVal;
-    rStream >> nVal;
-    return new SvxHorJustifyItem( (SvxCellHorJustify)nVal, Which() );
-}
-//------------------------------------------------------------------------
-
-USHORT SvxHorJustifyItem::GetValueCount() const
-{
-    return SVX_HOR_JUSTIFY_REPEAT + 1;	// letzter Enum-Wert + 1
-}
-
-// class SvxVerJustifyItem -----------------------------------------------
-
-SvxVerJustifyItem::SvxVerJustifyItem( const USHORT nId ) :
-    SfxEnumItem( nId, (USHORT)SVX_VER_JUSTIFY_STANDARD )
-{
-}
-
-SvxVerJustifyItem::SvxVerJustifyItem( const SvxCellVerJustify eJustify,
-                                      const USHORT nId ) :
-    SfxEnumItem( nId, (USHORT)eJustify )
-{
-}
-
-//------------------------------------------------------------------------
-
-SfxItemPresentation SvxVerJustifyItem::GetPresentation
-(
-    SfxItemPresentation ePres,
-    SfxMapUnit          /*eCoreUnit*/,
-    SfxMapUnit          /*ePresUnit*/,
-    XubString&              rText,
-    const IntlWrapper * )    const
-{
-    switch ( ePres )
-    {
-        case SFX_ITEM_PRESENTATION_NONE:
-            rText.Erase();
-            return SFX_ITEM_PRESENTATION_NONE;
-        case SFX_ITEM_PRESENTATION_NAMELESS:
-        case SFX_ITEM_PRESENTATION_COMPLETE:
-            rText = GetValueText( GetValue() );
-            return SFX_ITEM_PRESENTATION_COMPLETE;
-        default: ; //prevent warning
-    }
-    return SFX_ITEM_PRESENTATION_NONE;
-}
-
-//------------------------------------------------------------------------
-
-sal_Bool SvxVerJustifyItem::QueryValue( uno::Any& rVal, BYTE nMemberId ) const
-{
-    nMemberId &= ~CONVERT_TWIPS;
-    switch ( nMemberId )
-    {
-        case MID_HORJUST_ADJUST:
-            {
-                style::VerticalAlignment eUno = style::VerticalAlignment_TOP;
-                switch ( (SvxCellVerJustify)GetValue() )
-                {
-                    case SVX_VER_JUSTIFY_TOP:	   eUno = style::VerticalAlignment_TOP;	    break;
-                    case SVX_VER_JUSTIFY_CENTER:   eUno = style::VerticalAlignment_MIDDLE;	break;
-                    case SVX_VER_JUSTIFY_BOTTOM:   eUno = style::VerticalAlignment_BOTTOM;	break;
-                    default: ; //prevent warning
-                }
-                rVal <<= eUno;
-                break;
-            }
-        default:
-            {
-                table::CellVertJustify eUno = table::CellVertJustify_STANDARD;
-                switch ( (SvxCellVerJustify)GetValue() )
-                {
-                    case SVX_VER_JUSTIFY_STANDARD: eUno = table::CellVertJustify_STANDARD; break;
-                    case SVX_VER_JUSTIFY_TOP:	   eUno = table::CellVertJustify_TOP;	    break;
-                    case SVX_VER_JUSTIFY_CENTER:   eUno = table::CellVertJustify_CENTER;	break;
-                    case SVX_VER_JUSTIFY_BOTTOM:   eUno = table::CellVertJustify_BOTTOM;	break;
-                    default: ; //prevent warning
-                }
-                rVal <<= eUno;
-                break;
-            }
-    }
-    return sal_True;
-}
-
-sal_Bool SvxVerJustifyItem::PutValue( const uno::Any& rVal, BYTE nMemberId )
-{
-    nMemberId &= ~CONVERT_TWIPS;
-    switch ( nMemberId )
-    {
-        case MID_HORJUST_ADJUST:
-            {
-                //	property contains ParagraphAdjust values as sal_Int16
-                style::VerticalAlignment nVal = style::VerticalAlignment_TOP;
-                if(!(rVal >>= nVal))
-                    return sal_False;
-
-                SvxCellVerJustify eSvx = SVX_VER_JUSTIFY_STANDARD;
-                switch (nVal)
-                {
-                    case style::VerticalAlignment_TOP:      eSvx = SVX_VER_JUSTIFY_TOP;     break;
-                    case style::VerticalAlignment_MIDDLE:   eSvx = SVX_VER_JUSTIFY_CENTER;  break;
-                    case style::VerticalAlignment_BOTTOM:   eSvx = SVX_VER_JUSTIFY_BOTTOM;  break;
-                    default:;
-                }
-                SetValue( (USHORT)eSvx );
-                break;
-            }
-        default:
-            {
-                table::CellVertJustify eUno;
-                if(!(rVal >>= eUno))
-                {
-                    sal_Int32 nValue = 0;
-                    if(!(rVal >>= nValue))
-                        return sal_False;
-                    eUno = (table::CellVertJustify)nValue;
-                }
-
-                SvxCellVerJustify eSvx = SVX_VER_JUSTIFY_STANDARD;
-                switch (eUno)
-                {
-                    case table::CellVertJustify_STANDARD: eSvx = SVX_VER_JUSTIFY_STANDARD;  break;
-                    case table::CellVertJustify_TOP:	  eSvx = SVX_VER_JUSTIFY_TOP;	  	break;
-                    case table::CellVertJustify_CENTER:   eSvx = SVX_VER_JUSTIFY_CENTER;	break;
-                    case table::CellVertJustify_BOTTOM:   eSvx = SVX_VER_JUSTIFY_BOTTOM;	break;
-                    default: ; //prevent warning
-                }
-                SetValue( (USHORT)eSvx );
-                break;
-            }
-    }
-
-    return sal_True;
-}
-
-//------------------------------------------------------------------------
-
-XubString SvxVerJustifyItem::GetValueText( USHORT nVal ) const
-{
-    DBG_ASSERT( nVal <= SVX_VER_JUSTIFY_BOTTOM, "enum overflow!" );
-    return SVX_RESSTR(RID_SVXITEMS_VERJUST_STANDARD + nVal);
-}
-
-//------------------------------------------------------------------------
-
-SfxPoolItem* SvxVerJustifyItem::Clone( SfxItemPool* ) const
-{
-    return new SvxVerJustifyItem( *this );
-}
-
-//------------------------------------------------------------------------
-
-SfxPoolItem* SvxVerJustifyItem::Create( SvStream& rStream, USHORT ) const
-{
-    USHORT nVal;
-    rStream >> nVal;
-    return new SvxVerJustifyItem( (SvxCellVerJustify)nVal, Which() );
-}
-
-//------------------------------------------------------------------------
-
-USHORT SvxVerJustifyItem::GetValueCount() const
-{
-    return SVX_VER_JUSTIFY_BOTTOM + 1;	// letzter Enum-Wert + 1
-}
-
 // class SvxOrientationItem ----------------------------------------------
 
 SvxOrientationItem::SvxOrientationItem( const SvxCellOrientation eOrientation,
diff --git svx/source/items/makefile.mk svx/source/items/makefile.mk
index 188e617..6e1f2a3 100644
--- svx/source/items/makefile.mk
+++ svx/source/items/makefile.mk
@@ -50,6 +50,7 @@ SRC1FILES =  \
 
 LIB1TARGET= $(SLB)$/$(TARGET)-core.lib
 LIB1OBJFILES= \
+        $(SLO)$/algitem.obj \
         $(SLO)$/drawitem.obj	\
         $(SLO)$/chrtitem.obj	\
         $(SLO)$/e3ditem.obj \
@@ -64,7 +65,6 @@ LIB2OBJFILES= \
         $(SLO)$/hlnkitem.obj \
         $(SLO)$/pageitem.obj	\
         $(SLO)$/viewlayoutitem.obj    \
-        $(SLO)$/algitem.obj \
         $(SLO)$/rotmodit.obj \
         $(SLO)$/numinf.obj	\
         $(SLO)$/svxerr.obj	\
diff --git svx/source/items/rotmodit.cxx svx/source/items/rotmodit.cxx
index f15f714..d8e4556 100644
--- svx/source/items/rotmodit.cxx
+++ svx/source/items/rotmodit.cxx
@@ -29,14 +29,13 @@
 #include "precompiled_svx.hxx"
 #include <tools/stream.hxx>
 #include <com/sun/star/table/BorderLine.hpp>
-#include <com/sun/star/table/CellVertJustify.hpp>
+#include <com/sun/star/table/CellVertJustify2.hpp>
 #include <com/sun/star/table/ShadowLocation.hpp>
 #include <com/sun/star/table/TableBorder.hpp>
 #include <com/sun/star/table/ShadowFormat.hpp>
 #include <com/sun/star/table/CellRangeAddress.hpp>
 #include <com/sun/star/table/CellContentType.hpp>
 #include <com/sun/star/table/TableOrientation.hpp>
-#include <com/sun/star/table/CellHoriJustify.hpp>
 #include <com/sun/star/util/SortField.hpp>
 #include <com/sun/star/util/SortFieldType.hpp>
 #include <com/sun/star/table/CellOrientation.hpp>
@@ -134,40 +133,35 @@ USHORT __EXPORT SvxRotateModeItem::GetVersion( USHORT /*nFileVersion*/ ) const
     return 0;
 }
 
-//	QueryValue/PutValue: Der ::com::sun::star::table::CellVertJustify enum wird mitbenutzt...
-
 sal_Bool SvxRotateModeItem::QueryValue( uno::Any& rVal, BYTE /*nMemberId*/ ) const
 {
-    table::CellVertJustify eUno = table::CellVertJustify_STANDARD;
+    sal_Int32 nUno = table::CellVertJustify2::STANDARD;
     switch ( (SvxRotateMode)GetValue() )
     {
-        case SVX_ROTATE_MODE_STANDARD: eUno = table::CellVertJustify_STANDARD; break;
-        case SVX_ROTATE_MODE_TOP:	   eUno = table::CellVertJustify_TOP;	  	break;
-        case SVX_ROTATE_MODE_CENTER:   eUno = table::CellVertJustify_CENTER;	break;
-        case SVX_ROTATE_MODE_BOTTOM:   eUno = table::CellVertJustify_BOTTOM;	break;
+        case SVX_ROTATE_MODE_STANDARD: nUno = table::CellVertJustify2::STANDARD; break;
+        case SVX_ROTATE_MODE_TOP:      nUno = table::CellVertJustify2::TOP;      break;
+        case SVX_ROTATE_MODE_CENTER:   nUno = table::CellVertJustify2::CENTER;   break;
+        case SVX_ROTATE_MODE_BOTTOM:   nUno = table::CellVertJustify2::BOTTOM;   break;
     }
-    rVal <<= eUno;
+    rVal <<= nUno;
     return sal_True;
 }
 
 sal_Bool SvxRotateModeItem::PutValue( const uno::Any& rVal, BYTE /*nMemberId*/ )
 {
-    table::CellVertJustify eUno;
-    if(!(rVal >>= eUno))
+    sal_Int32 nUno;
+    if(!(rVal >>= nUno))
     {
-        sal_Int32 nValue = 0;
-        if(!(rVal >>= nValue))
-            return sal_False;
-        eUno = (table::CellVertJustify)nValue;
+        nUno = table::CellVertJustify2::STANDARD;
     }
 
     SvxRotateMode eSvx = SVX_ROTATE_MODE_STANDARD;
-    switch (eUno)
+    switch (nUno)
     {
-        case table::CellVertJustify_STANDARD: eSvx = SVX_ROTATE_MODE_STANDARD; break;
-        case table::CellVertJustify_TOP:	   eSvx = SVX_ROTATE_MODE_TOP;	  	break;
-        case table::CellVertJustify_CENTER:   eSvx = SVX_ROTATE_MODE_CENTER;	break;
-        case table::CellVertJustify_BOTTOM:   eSvx = SVX_ROTATE_MODE_BOTTOM;	break;
+        case table::CellVertJustify2::STANDARD: eSvx = SVX_ROTATE_MODE_STANDARD; break;
+        case table::CellVertJustify2::TOP:      eSvx = SVX_ROTATE_MODE_TOP;      break;
+        case table::CellVertJustify2::CENTER:   eSvx = SVX_ROTATE_MODE_CENTER;   break;
+        case table::CellVertJustify2::BOTTOM:   eSvx = SVX_ROTATE_MODE_BOTTOM;   break;
         default: ;//prevent warning
     }
     SetValue( (USHORT)eSvx );
diff --git svx/source/items/svxitems.src svx/source/items/svxitems.src
index d70e69e..91923c2 100644
--- svx/source/items/svxitems.src
+++ svx/source/items/svxitems.src
@@ -216,46 +216,6 @@ String RID_SVXITEMS_BRUSHSTYLE_BITMAP
     Text [ en-US ] = "Image" ;
 };
  
-String RID_SVXITEMS_HORJUST_STANDARD
-{
-    Text [ en-US ] = "Horizontal alignment default" ;
-};
-String RID_SVXITEMS_HORJUST_LEFT
-{
-    Text [ en-US ] = "Align left" ;
-};
-String RID_SVXITEMS_HORJUST_CENTER
-{
-    Text [ en-US ] = "Centered horizontally" ;
-};
-String RID_SVXITEMS_HORJUST_RIGHT
-{
-    Text [ en-US ] = "Align right" ;
-};
-String RID_SVXITEMS_HORJUST_BLOCK
-{
-    Text [ en-US ] = "Justify" ;
-};
-String RID_SVXITEMS_HORJUST_REPEAT
-{
-    Text [ en-US ] = "Repeat alignment" ;
-};
-String RID_SVXITEMS_VERJUST_STANDARD
-{
-    Text [ en-US ] = "Vertical alignment default" ;
-};
-String RID_SVXITEMS_VERJUST_TOP
-{
-    Text [ en-US ] = "Align to top" ;
-};
-String RID_SVXITEMS_VERJUST_CENTER
-{
-    Text [ en-US ] = "Centered vertically" ;
-};
-String RID_SVXITEMS_VERJUST_BOTTOM
-{
-    Text [ en-US ] = "Align to bottom" ;
-};
 String RID_SVXITEMS_ORI_STANDARD
 {
     Text [ en-US ] = "Default orientation" ;
