diff --git a/sal/inc/osl/file.h b/sal/inc/osl/file.h
index cf8286f..abe3816 100644
--- sal/inc/osl/file.h
+++ sal/inc/osl/file.h
@@ -149,6 +149,7 @@ typedef enum {
 	osl_File_E_USERS,
 	osl_File_E_OVERFLOW,
 	osl_File_E_NOTREADY,
+	osl_File_E_TXTBSY,
 	osl_File_E_invalidError,		/* unmapped error: always last entry in enum! */
     osl_File_E_TIMEDOUT,
 	osl_File_E_FORCE_EQUAL_SIZE = SAL_MAX_ENUM
diff --git a/sal/inc/osl/file.hxx b/sal/inc/osl/file.hxx
index 7e228f9..27dd926 100644
--- sal/inc/osl/file.hxx
+++ sal/inc/osl/file.hxx
@@ -122,6 +122,7 @@ public:
 		E_USERS        = osl_File_E_USERS,
 		E_OVERFLOW     = osl_File_E_OVERFLOW,
 		E_NOTREADY     = osl_File_E_NOTREADY,
+		E_TXTBSY       = osl_File_E_TXTBSY,
 		E_invalidError = osl_File_E_invalidError,	/* unmapped error: always last entry in enum! */
         E_TIMEDOUT     = osl_File_E_TIMEDOUT
 	};
diff --git a/sal/osl/unx/file_error_transl.cxx b/sal/osl/unx/file_error_transl.cxx
index cd4788d..95340ae 100644
--- sal/osl/unx/file_error_transl.cxx
+++ sal/osl/unx/file_error_transl.cxx
@@ -252,6 +252,10 @@ oslFileError oslTranslateFileError(sal_Bool bIsError, int Errno)
             osl_error = osl_File_E_TIMEDOUT;
             break;
         
+        case ETXTBSY:
+            osl_error = osl_File_E_TXTBSY;
+            break;
+
         default:
             /* FIXME translateFileError: is this alright? Or add a new one: osl_File_E_Unknown? */
             osl_error = osl_File_E_invalidError;
diff --git a/ucb/source/ucp/file/filglob.cxx b/ucb/source/ucp/file/filglob.cxx
index 17e5e72..c383214 100644
--- ucb/source/ucp/file/filglob.cxx
+++ ucb/source/ucp/file/filglob.cxx
@@ -490,17 +490,13 @@ namespace fileaccess {
 					// not enough memory for allocating structures 
 					ioErrorCode = IOErrorCode_OUT_OF_MEMORY;
 					break;
-				case FileBase::E_BUSY:
-					// Text file busy
-					ioErrorCode = IOErrorCode_LOCKING_VIOLATION;
-					break;
-                case FileBase::E_AGAIN:
-					// Operation would block
+
+				case FileBase::E_BUSY:  // Text file busy
+				case FileBase::E_AGAIN: // Operation would block
+				case FileBase::E_NOLCK: // No record locks available
+				case FileBase::E_TXTBSY:// Text file busy
 					ioErrorCode = IOErrorCode_LOCKING_VIOLATION;
 					break;
-				case FileBase::E_NOLCK:  // No record locks available
-                    ioErrorCode = IOErrorCode_LOCKING_VIOLATION;
-                    break;
 
 				case FileBase::E_FAULT: // Bad address
 				case FileBase::E_LOOP:	// Too many symbolic links encountered
