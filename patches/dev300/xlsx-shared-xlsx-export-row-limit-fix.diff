diff --git sc/source/filter/inc/xlconst.hxx sc/source/filter/inc/xlconst.hxx
index eeb3fb3..2a176a9 100644
--- sc/source/filter/inc/xlconst.hxx
+++ sc/source/filter/inc/xlconst.hxx
@@ -77,6 +77,10 @@ const SCCOL EXC_MAXCOL8                     = EXC_MAXCOL5;
 const SCROW EXC_MAXROW8                     = 65535;
 const SCTAB EXC_MAXTAB8                     = EXC_MAXTAB5;
 
+const SCCOL EXC_MAXCOL_XML_2007             = 16383;
+const SCROW EXC_MAXROW_XML_2007             = 1048575;
+const SCTAB EXC_MAXTAB_XML_2007             = 1023;
+
 const sal_uInt16 EXC_NOTAB                  = SAL_MAX_UINT16;   /// An invalid Excel sheet index, for common use.
 const SCTAB SCTAB_INVALID                   = SCTAB_MAX;        /// An invalid Calc sheet index, for common use.
 const SCTAB SCTAB_GLOBAL                    = SCTAB_MAX;        /// A Calc sheet index for the workbook globals.
diff --git sc/source/filter/inc/xetable.hxx sc/source/filter/inc/xetable.hxx
index 2beb423..66a9e06 100644
--- sc/source/filter/inc/xetable.hxx
+++ sc/source/filter/inc/xetable.hxx
@@ -73,7 +73,7 @@ class XclExpRangeFmlaBase : public XclExpRecord
 {
 public:
     /** Returns true, if the passed cell position is equal to own base position. */
-    bool                IsBasePos( sal_uInt16 nXclCol, sal_uInt16 nXclRow ) const;
+    bool                IsBasePos( sal_uInt16 nXclCol, sal_uInt32 nXclRow ) const;
 
     /** Derived classes create the token array for a corresponding FORMULA cell record. */
     virtual XclTokenArrayRef CreateCellTokenArray( const XclExpRoot& rRoot ) const = 0;
@@ -240,9 +240,9 @@ private:
     SCTAB               mnScTab;        /// Sheet index of this record.
     sal_uInt16          mnLastAppXclCol;/// Column index of last appended cell.
     sal_uInt16          mnColInpXclCol; /// Column index of column input cell.
-    sal_uInt16          mnColInpXclRow; /// Row index of column input cell.
+    sal_uInt32          mnColInpXclRow; /// Row index of column input cell.
     sal_uInt16          mnRowInpXclCol; /// Column index of row input cell.
-    sal_uInt16          mnRowInpXclRow; /// Row index of row input cell.
+    sal_uInt32          mnRowInpXclRow; /// Row index of row input cell.
     sal_uInt8           mnScMode;       /// Type of the multiple operation (Calc constant).
     bool                mbValid;        /// true = Contains valid references.
 };
@@ -289,7 +289,7 @@ public:
     /** Returns the (first) Excel column index of the cell(s). */
     inline sal_uInt16   GetXclCol() const { return maXclPos.mnCol; }
     /** Returns the Excel row index of the cell. */
-    inline sal_uInt16   GetXclRow() const { return maXclPos.mnRow; }
+    inline sal_uInt32   GetXclRow() const { return maXclPos.mnRow; }
 
     /** Derived classes return the column index of the last contained cell. */
     virtual sal_uInt16  GetLastXclCol() const = 0;
@@ -317,7 +317,7 @@ protected:
     /** Sets this record to a new column position. */
     inline void         SetXclCol( sal_uInt16 nXclCol ) { maXclPos.mnCol = nXclCol; }
     /** Sets this record to a new row position. */
-    inline void         SetXclRow( sal_uInt16 nXclRow ) { maXclPos.mnRow = nXclRow; }
+    inline void         SetXclRow( sal_uInt32 nXclRow ) { maXclPos.mnRow = nXclRow; }
 
 private:
     XclAddress          maXclPos;       /// Address of the cell.
@@ -900,11 +900,11 @@ public:
     /** Constructs the ROW record and converts the Calc row settings.
         @param bAlwaysEmpty  true = This row will not be filled with blank cells
             in the Finalize() function. */
-    explicit            XclExpRow( const XclExpRoot& rRoot, sal_uInt16 nXclRow,
+    explicit            XclExpRow( const XclExpRoot& rRoot, sal_uInt32 nXclRow,
                             XclExpRowOutlineBuffer& rOutlineBfr, bool bAlwaysEmpty );
 
     /** Returns the excel row index of this ROW record. */
-    inline sal_uInt16   GetXclRow() const { return mnXclRow; }
+    inline sal_uInt32   GetXclRow() const { return mnXclRow; }
     /** Returns the height of the row in twips. */
     inline sal_uInt16   GetHeight() const { return mnHeight; }
     /** Returns true, if this row does not contain at least one valid cell. */
@@ -959,7 +959,7 @@ private:
     typedef XclExpRecordList< XclExpCellBase > XclExpCellList;
 
     XclExpCellList      maCellList;         /// List of cell records for this row.
-    sal_uInt16          mnXclRow;           /// Excel row index of this row.
+    sal_uInt32          mnXclRow;           /// Excel row index of this row.
     sal_uInt16          mnHeight;           /// Row height in twips.
     sal_uInt16          mnFlags;            /// Flags for the ROW record.
     sal_uInt16          mnXFIndex;          /// Default row formatting.
@@ -1002,7 +1002,7 @@ private:
     /** Returns access to the specified ROW record. Inserts preceding missing ROW records.
         @param bRowAlwaysEmpty  true = Created rows will not be filled with blank cells
             in the XclExpRow::Finalize() function. */
-    XclExpRow&          GetOrCreateRow( sal_uInt16 nXclRow, bool bRowAlwaysEmpty );
+    XclExpRow&          GetOrCreateRow( sal_uInt32 nXclRow, bool bRowAlwaysEmpty );
 
 private:
     typedef XclExpRecordList< XclExpRow >   XclExpRowList;
@@ -1012,7 +1012,7 @@ private:
     XclExpRowOutlineBuffer maOutlineBfr;    /// Buffer for row outline groups.
     XclExpDimensions    maDimensions;       /// DIMENSIONS record for used area.
     XclExpRow*          mpLastUsedRow;      /// Last used row for faster access.
-    sal_uInt16          mnLastUsedXclRow;   /// Last used row for faster access.
+    sal_uInt32          mnLastUsedXclRow;   /// Last used row for faster access.
 };
 
 // ============================================================================
diff --git sc/source/filter/inc/xeview.hxx sc/source/filter/inc/xeview.hxx
index 5c54ecd..592d3ff 100644
--- sc/source/filter/inc/xeview.hxx
+++ sc/source/filter/inc/xeview.hxx
@@ -111,7 +111,7 @@ private:
 
 private:
     sal_uInt16          mnSplitX;           /// Split X position, or frozen column.
-    sal_uInt16          mnSplitY;           /// Split Y position, or frozen row.
+    sal_uInt32          mnSplitY;           /// Split Y position, or frozen row.
     XclAddress          maSecondXclPos;     /// First visible cell in additional panes.
     sal_uInt8           mnActivePane;       /// Active pane (with cell cursor).
 };
diff --git sc/source/filter/inc/xladdress.hxx sc/source/filter/inc/xladdress.hxx
index c4aff69..1d3030a 100644
--- sc/source/filter/inc/xladdress.hxx
+++ sc/source/filter/inc/xladdress.hxx
#@@ -44,16 +44,13 @@ class XclExpStream;
 struct XclAddress
 {
     sal_uInt16          mnCol;
-    sal_uInt16          mnRow;
+    sal_uInt32          mnRow;
 
     inline explicit     XclAddress( ScAddress::Uninitialized ) {}
     inline explicit     XclAddress() : mnCol( 0 ), mnRow( 0 ) {}
-    inline explicit     XclAddress( sal_uInt16 nCol, sal_uInt16 nRow ) : mnCol( nCol ), mnRow( nRow ) {}
+    inline explicit     XclAddress( sal_uInt16 nCol, sal_uInt32 nRow ) : mnCol( nCol ), mnRow( nRow ) {}

-    inline void         Set( sal_uInt16 nCol, sal_uInt16 nRow ) { mnCol = nCol; mnRow = nRow; }
+    inline void         Set( sal_uInt16 nCol, sal_uInt32 nRow ) { mnCol = nCol; mnRow = nRow; }
+
+    void                Read( XclImpStream& rStrm, bool bCol16Bit = true );
+    void                Write( XclExpStream& rStrm, bool bCol16Bit = true ) const;
 };

 inline bool operator==( const XclAddress& rL, const XclAddress& rR )
#@@ -66,18 +63,6 @@ inline bool operator<( const XclAddress& rL, const XclAddress& rR )
#     return (rL.mnCol < rR.mnCol) || ((rL.mnCol == rR.mnCol) && (rL.mnRow < rR.mnRow));
# }
# 
#-inline XclImpStream& operator>>( XclImpStream& rStrm, XclAddress& rXclPos )
#-{
#-    rXclPos.Read( rStrm );
#-    return rStrm;
#-}
#-
#-inline XclExpStream& operator<<( XclExpStream& rStrm, const XclAddress& rXclPos )
#-{
#-    rXclPos.Write( rStrm );
#-    return rStrm;
#-}
#-
# // ----------------------------------------------------------------------------
# 
# /** A 2D cell range address struct with Excel column and row indexes. */
@@ -90,16 +90,16 @@ struct XclRange
     inline explicit     XclRange() {}
     inline explicit     XclRange( const XclAddress& rPos ) : maFirst( rPos ), maLast( rPos ) {}
     inline explicit     XclRange( const XclAddress& rFirst, const XclAddress& rLast ) : maFirst( rFirst ), maLast( rLast ) {}
-    inline explicit     XclRange( sal_uInt16 nCol1, sal_uInt16 nRow1, sal_uInt16 nCol2, sal_uInt16 nRow2 ) :
+    inline explicit     XclRange( sal_uInt16 nCol1, sal_uInt32 nRow1, sal_uInt16 nCol2, sal_uInt32 nRow2 ) :
                             maFirst( nCol1, nRow1 ), maLast( nCol2, nRow2 ) {}
 
     inline void         Set( const XclAddress& rFirst, const XclAddress& rLast )
                             { maFirst = rFirst; maLast = rLast; }
-    inline void         Set( sal_uInt16 nCol1, sal_uInt16 nRow1, sal_uInt16 nCol2, sal_uInt16 nRow2 )
+    inline void         Set( sal_uInt16 nCol1, sal_uInt32 nRow1, sal_uInt16 nCol2, sal_uInt32 nRow2 )
                             { maFirst.Set( nCol1, nRow1 ); maLast.Set( nCol2, nRow2 ); }
 
     inline sal_uInt16   GetColCount() const { return maLast.mnCol - maFirst.mnCol + 1; }
-    inline sal_uInt16   GetRowCount() const { return maLast.mnRow - maFirst.mnRow + 1; }
+    inline sal_uInt32   GetRowCount() const { return maLast.mnRow - maFirst.mnRow + 1; }
     bool                Contains( const XclAddress& rPos ) const;

     void                Read( XclImpStream& rStrm, bool bCol16Bit = true );
#@@ -116,18 +98,6 @@ inline bool operator<( const XclRange& rL, const XclRange& rR )
#     return (rL.maFirst < rR.maFirst) || ((rL.maFirst == rR.maFirst) && (rL.maLast < rR.maLast));
# }
# 
#-inline XclImpStream& operator>>( XclImpStream& rStrm, XclRange& rXclRange )
#-{
#-    rXclRange.Read( rStrm );
#-    return rStrm;
#-}
#-
#-inline XclExpStream& operator<<( XclExpStream& rStrm, const XclRange& rXclRange )
#-{
#-    rXclRange.Write( rStrm );
#-    return rStrm;
#-}
#-
# // ----------------------------------------------------------------------------
# 
# /** A 2D cell range address list with Excel column and row indexes. */
#@@ -137,25 +107,8 @@ public:
#     inline explicit     XclRangeList() {}
# 
#     XclRange            GetEnclosingRange() const;
#-
#-    void                Read( XclImpStream& rStrm, bool bCol16Bit = true );
#-    void                Write( XclExpStream& rStrm, bool bCol16Bit = true ) const;
#-    void                WriteSubList( XclExpStream& rStrm,
#-                            size_t nBegin, size_t nCount, bool bCol16Bit = true ) const;
# };
# 
#-inline XclImpStream& operator>>( XclImpStream& rStrm, XclRangeList& rXclRanges )
#-{
#-    rXclRanges.Read( rStrm );
#-    return rStrm;
#-}
#-
#-inline XclExpStream& operator<<( XclExpStream& rStrm, const XclRangeList& rXclRanges )
#-{
#-    rXclRanges.Write( rStrm );
#-    return rStrm;
#-}
#-
# // ============================================================================
# 
# class XclTracer;
@@ -188,7 +141,7 @@ protected:
     XclTracer&          mrTracer;       /// Tracer for invalid addresses.
     ScAddress           maMaxPos;       /// Default maximum position.
     sal_uInt16          mnMaxCol;       /// Maximum column index, as 16-bit value.
-    sal_uInt16          mnMaxRow;       /// Maximum row index, as 16-bit value.
+    sal_uInt32          mnMaxRow;       /// Maximum row index.
     bool                mbColTrunc;     /// Flag for "columns truncated" warning box.
     bool                mbRowTrunc;     /// Flag for "rows truncated" warning box.
     bool                mbTabTrunc;     /// Flag for "tables truncated" warning box.
diff --git sc/source/filter/xcl97/XclExpChangeTrack.cxx sc/source/filter/xcl97/XclExpChangeTrack.cxx
index a4c908b..fed4d1a 100644
--- sc/source/filter/xcl97/XclExpChangeTrack.cxx
+++ sc/source/filter/xcl97/XclExpChangeTrack.cxx
@@ -72,6 +72,7 @@ static OString lcl_DateTimeToOString( const DateTime& rDateTime )
 //___________________________________________________________________
 // local functions
 
+#if 0 // xlsx
 void lcl_WriteDateTime( XclExpStream& rStrm, const DateTime& rDateTime )
 {
     rStrm.SetSliceSize( 7 );
@@ -95,6 +96,7 @@ void lcl_WriteFixedString( XclExpStream& rStrm, const XclExpString& rString, sal
     if( nLength > nStrBytes )
         rStrm.WriteZeroBytes( nLength - nStrBytes );
 }
+#endif // xlsx
 
 inline void lcl_GenerateGUID( sal_uInt8* pGUID, sal_Bool& rValidGUID )
 {
@@ -339,12 +341,14 @@ XclExpChTr0x0194::~XclExpChTr0x0194()
 {
 }
 
-void XclExpChTr0x0194::SaveCont( XclExpStream& rStrm )
+void XclExpChTr0x0194::SaveCont( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << (sal_uInt32) 0;
     lcl_WriteDateTime( rStrm, aDateTime );
     rStrm << (sal_uInt8) 0;
     lcl_WriteFixedString( rStrm, sUsername, 147 );
+#endif // xlsx
 }
 
 UINT16 XclExpChTr0x0194::GetNum() const
@@ -412,8 +416,9 @@ XclExpChTrInfo::~XclExpChTrInfo()
 {
 }
 
-void XclExpChTrInfo::SaveCont( XclExpStream& rStrm )
+void XclExpChTrInfo::SaveCont( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm	<< (sal_uInt32)	0xFFFFFFFF
             << (sal_uInt32)	0x00000000
             << (sal_uInt32)	0x00000020
@@ -424,6 +429,7 @@ void XclExpChTrInfo::SaveCont( XclExpStream& rStrm )
     lcl_WriteDateTime( rStrm, aDateTime );
     rStrm	<< (sal_uInt8)	0x0000
             << (sal_uInt16)	0x0002;
+#endif // xlsx
 }
 
 UINT16 XclExpChTrInfo::GetNum() const
@@ -741,6 +747,7 @@ void XclExpChTrData::Clear()
     nSize = 0;
 }
 
+#if 0 // xlsx
 void XclExpChTrData::WriteFormula( XclExpStream& rStrm, const XclExpChTrTabIdBuffer& rTabIdBuffer )
 {
     DBG_ASSERT( mxTokArr.is() && !mxTokArr->Empty(), "XclExpChTrData::Write - no formula" );
@@ -787,6 +794,7 @@ void XclExpChTrData::Write( XclExpStream& rStrm, const XclExpChTrTabIdBuffer& rT
         break;
     }
 }
+#endif // xlsx
 
 //___________________________________________________________________
 
@@ -918,8 +926,9 @@ void XclExpChTrCellContent::GetCellData(
     }
 }
 
-void XclExpChTrCellContent::SaveActionData( XclExpStream& rStrm ) const
+void XclExpChTrCellContent::SaveActionData( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     WriteTabId( rStrm, aPosition.Tab() );
     rStrm	<< (sal_uInt16)((pOldData ? (pOldData->nType << 3) : 0x0000) | (pNewData ? pNewData->nType : 0x0000))
             << (sal_uInt16) 0x0000;
@@ -930,6 +939,7 @@ void XclExpChTrCellContent::SaveActionData( XclExpStream& rStrm ) const
         pOldData->Write( rStrm, rIdBuffer );
     if( pNewData )
         pNewData->Write( rStrm, rIdBuffer );
+#endif // xlsx
 }
 
 UINT16 XclExpChTrCellContent::GetNum() const
@@ -1172,13 +1182,15 @@ XclExpChTrInsertTab::~XclExpChTrInsertTab()
 {
 }
 
-void XclExpChTrInsertTab::SaveActionData( XclExpStream& rStrm ) const
+void XclExpChTrInsertTab::SaveActionData( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     WriteTabId( rStrm, nTab );
     rStrm << sal_uInt32( 0 );
     lcl_WriteFixedString( rStrm, XclExpString( GetTabInfo().GetScTabName( nTab ) ), 127 );
     lcl_WriteDateTime( rStrm, GetDateTime() );
     rStrm.WriteZeroBytes( 133 );
+#endif // xlsx
 }
 
 UINT16 XclExpChTrInsertTab::GetNum() const
diff --git sc/source/filter/excel/exctools.cxx sc/source/filter/excel/exctools.cxx
index a6b1fe3..58b0973 100644
--- sc/source/filter/excel/exctools.cxx
+++ sc/source/filter/excel/exctools.cxx
@@ -304,8 +304,9 @@ void ExcScenarioCell::SetValue( const String& r )
 #define	EXCSCNEXT()				((ExcScenarioCell*)List::Next())
 
 
-ExcScenario::ExcScenario( XclImpStream& rIn, const RootData& rR ) : nTab( rR.pIR->GetCurrScTab() )
+ExcScenario::ExcScenario( XclImpStream& /*rIn*/, const RootData& rR ) : nTab( rR.pIR->GetCurrScTab() )
 {
+#if 0 // xlsx
     UINT16			nCref;
     UINT8			nName, nComment;
 
@@ -349,6 +350,7 @@ ExcScenario::ExcScenario( XclImpStream& rIn, const RootData& rR ) : nTab( rR.pIR
 
         p = EXCSCNEXT();
     }
+#endif // xlsx 
 }
 
 
@@ -371,8 +373,9 @@ ExcScenario::~ExcScenario()
 }
 
 
-void ExcScenario::Apply( const XclImpRoot& rRoot, const BOOL bLast )
+void ExcScenario::Apply( const XclImpRoot& /*rRoot*/, const BOOL /*bLast*/ )
 {
+#if 0 // xlsx
     ScDocument&         r = rRoot.GetDoc();
     ExcScenarioCell*	p = EXCSCFIRST();
     String				aSzenName( *pName );
@@ -407,6 +410,7 @@ void ExcScenario::Apply( const XclImpRoot& rRoot, const BOOL bLast )
     if( (static_cast< SCCOL >( nTab ) < rDocSett.mnDisplTab) && (rDocSett.mnDisplTab < MAXTAB) )
         ++rDocSett.mnDisplTab;
     rRoot.GetTabInfo().InsertScTab( nNewTab );
+#endif // xlsx 
 }
 
 
diff --git sc/source/filter/excel/namebuff.cxx sc/source/filter/excel/namebuff.cxx
index 5ecea62..babae35 100644
--- sc/source/filter/excel/namebuff.cxx
+++ sc/source/filter/excel/namebuff.cxx
@@ -303,6 +303,7 @@ BOOL ExtName::IsOLE( void ) const
 }
 
 
+#if 0 // xlsx
 ExtNameBuff::ExtNameBuff( const XclImpRoot& rRoot ) :
     XclImpRoot( rRoot )
 {
@@ -345,3 +346,4 @@ void ExtNameBuff::Reset( void )
 }
 
 
+#endif // xlsx 
diff --git sc/source/filter/excel/xechart.cxx sc/source/filter/excel/xechart.cxx
index 3e06c27..3cb3e5e 100644
--- sc/source/filter/excel/xechart.cxx
+++ sc/source/filter/excel/xechart.cxx
@@ -113,6 +113,7 @@ using ::formula::FormulaToken;
 
 namespace {
 
+#if 0 // xlsx
 XclExpStream& operator<<( XclExpStream& rStrm, const XclChRectangle& rRect )
 {
     return rStrm << rRect.mnX << rRect.mnY << rRect.mnWidth << rRect.mnHeight;
@@ -142,6 +143,7 @@ void lclWriteChFrBlockRecord( XclExpStream& rStrm, const XclChFrBlock& rFrBlock,
     rStrm << nRecId << EXC_FUTUREREC_EMPTYFLAGS << rFrBlock.mnType << rFrBlock.mnContext << rFrBlock.mnValue1 << rFrBlock.mnValue2;
     rStrm.EndRecord();
 }
+#endif // xlsx
 
 template< typename Type >
 inline bool lclIsAutoAnyOrGetValue( Type& rValue, const Any& rAny, bool bPercent )
@@ -208,8 +210,9 @@ void XclExpChRootData::RegisterFutureRecBlock( const XclChFrBlock& rFrBlock )
     maUnwrittenFrBlocks.push_back( rFrBlock );
 }
 
-void XclExpChRootData::InitializeFutureRecBlock( XclExpStream& rStrm )
+void XclExpChRootData::InitializeFutureRecBlock( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // first call from a future record writes all missing CHFRBLOCKBEGIN records
     if( !maUnwrittenFrBlocks.empty() )
     {
@@ -231,10 +234,12 @@ void XclExpChRootData::InitializeFutureRecBlock( XclExpStream& rStrm )
         maWrittenFrBlocks.insert( maWrittenFrBlocks.end(), maUnwrittenFrBlocks.begin(), maUnwrittenFrBlocks.end() );
         maUnwrittenFrBlocks.clear();
     }
+#endif // xlsx
 }
 
-void XclExpChRootData::FinalizeFutureRecBlock( XclExpStream& rStrm )
+void XclExpChRootData::FinalizeFutureRecBlock( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( !maUnwrittenFrBlocks.empty() || !maWrittenFrBlocks.empty(), "XclExpChRootData::FinalizeFutureRecBlock - no future record level found" );
     if( !maUnwrittenFrBlocks.empty() )
     {
@@ -247,6 +252,7 @@ void XclExpChRootData::FinalizeFutureRecBlock( XclExpStream& rStrm )
         lclWriteChFrBlockRecord( rStrm, maWrittenFrBlocks.back(), false );
         maWrittenFrBlocks.pop_back();
     }
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -344,14 +350,18 @@ void XclExpChRoot::RegisterFutureRecBlock( const XclChFrBlock& rFrBlock )
     mxChData->RegisterFutureRecBlock( rFrBlock );
 }
 
-void XclExpChRoot::InitializeFutureRecBlock( XclExpStream& rStrm )
+void XclExpChRoot::InitializeFutureRecBlock( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     mxChData->InitializeFutureRecBlock( rStrm );
+#endif // xlsx
 }
 
-void XclExpChRoot::FinalizeFutureRecBlock( XclExpStream& rStrm )
+void XclExpChRoot::FinalizeFutureRecBlock( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     mxChData->FinalizeFutureRecBlock( rStrm );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -368,8 +378,9 @@ XclExpChGroupBase::~XclExpChGroupBase()
 {
 }
 
-void XclExpChGroupBase::Save( XclExpStream& rStrm )
+void XclExpChGroupBase::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // header record
     XclExpRecord::Save( rStrm );
     // group records
@@ -386,6 +397,7 @@ void XclExpChGroupBase::Save( XclExpStream& rStrm )
         // CHEND record
         XclExpEmptyRecord( EXC_ID_CHEND ).Save( rStrm );
     }
+#endif // xlsx
 }
 
 bool XclExpChGroupBase::HasSubRecords() const
@@ -409,10 +421,12 @@ XclExpChFutureRecordBase::XclExpChFutureRecordBase( const XclExpChRoot& rRoot,
 {
 }
 
-void XclExpChFutureRecordBase::Save( XclExpStream& rStrm )
+void XclExpChFutureRecordBase::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     InitializeFutureRecBlock( rStrm );
     XclExpFutureRecord::Save( rStrm );
+#endif // xlsx
 }
 
 // Frame formatting ===========================================================
@@ -475,11 +489,13 @@ bool XclExpChLineFormat::IsDefault( XclChFrameType eDefFrameType ) const
         ((eDefFrameType == EXC_CHFRAMETYPE_AUTO) && IsAuto());
 }
 
-void XclExpChLineFormat::WriteBody( XclExpStream& rStrm )
+void XclExpChLineFormat::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.maColor << maData.mnPattern << maData.mnWeight << maData.mnFlags;
     if( rStrm.GetRoot().GetBiff() == EXC_BIFF8 )
         rStrm << rStrm.GetRoot().GetPalette().GetColorIndex( mnColorId );
+#endif // xlsx
 }
 
 namespace {
@@ -566,14 +582,16 @@ bool XclExpChAreaFormat::IsDefault( XclChFrameType eDefFrameType ) const
         ((eDefFrameType == EXC_CHFRAMETYPE_AUTO) && IsAuto());
 }
 
-void XclExpChAreaFormat::WriteBody( XclExpStream& rStrm )
+void XclExpChAreaFormat::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.maPattColor << maData.maBackColor << maData.mnPattern << maData.mnFlags;
     if( rStrm.GetRoot().GetBiff() == EXC_BIFF8 )
     {
         const XclExpPalette& rPal = rStrm.GetRoot().GetPalette();
         rStrm << rPal.GetColorIndex( mnPattColorId ) << rPal.GetColorIndex( mnBackColorId );
     }
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -600,8 +618,9 @@ bool XclExpChEscherFormat::IsValid() const
     return maData.mxEscherSet.is();
 }
 
-void XclExpChEscherFormat::Save( XclExpStream& rStrm )
+void XclExpChEscherFormat::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( maData.mxEscherSet.is() )
     {
         // replace RGB colors with palette indexes in the Escher container
@@ -612,6 +631,7 @@ void XclExpChEscherFormat::Save( XclExpStream& rStrm )
         // save the record group
         XclExpChGroupBase::Save( rStrm );
     }
+#endif // xlsx
 }
 
 bool XclExpChEscherFormat::HasSubRecords() const
@@ -620,11 +640,13 @@ bool XclExpChEscherFormat::HasSubRecords() const
     return maPicFmt.mnBmpMode != EXC_CHPICFORMAT_NONE;
 }
 
-void XclExpChEscherFormat::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChEscherFormat::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm.StartRecord( EXC_ID_CHPICFORMAT, 14 );
     rStrm << maPicFmt.mnBmpMode << maPicFmt.mnFormat << maPicFmt.mnFlags << maPicFmt.mfScale;
     rStrm.EndRecord();
+#endif // xlsx
 }
 
 sal_uInt32 XclExpChEscherFormat::RegisterColor( sal_uInt16 nPropId )
@@ -642,14 +664,16 @@ sal_uInt32 XclExpChEscherFormat::RegisterColor( sal_uInt16 nPropId )
     return XclExpPalette::GetColorIdFromIndex( EXC_COLOR_CHWINDOWBACK );
 }
 
-void XclExpChEscherFormat::WriteBody( XclExpStream& rStrm )
+void XclExpChEscherFormat::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( maData.mxEscherSet.is(), "XclExpChEscherFormat::WriteBody - missing property container" );
     // write Escher property container via temporary memory stream
     SvMemoryStream aMemStrm;
     maData.mxEscherSet->Commit( aMemStrm );
     aMemStrm.Seek( STREAM_SEEK_TO_BEGIN );
     rStrm.CopyFromStream( aMemStrm );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -707,11 +731,13 @@ bool XclExpChFrameBase::IsDefaultFrameBase( XclChFrameType eDefFrameType ) const
         (!mxAreaFmt || mxAreaFmt->IsDefault( eDefFrameType ));
 }
 
-void XclExpChFrameBase::WriteFrameRecords( XclExpStream& rStrm )
+void XclExpChFrameBase::WriteFrameRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     lclSaveRecord( rStrm, mxLineFmt );
     lclSaveRecord( rStrm, mxAreaFmt );
     lclSaveRecord( rStrm, mxEscherFmt );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -737,8 +763,9 @@ bool XclExpChFrame::IsDeleteable() const
     return IsDefault() && GetFormatInfo( meObjType ).mbDeleteDefFrame;
 }
 
-void XclExpChFrame::Save( XclExpStream& rStrm )
+void XclExpChFrame::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     switch( meObjType )
     {
         // wall/floor frame without CHFRAME header record
@@ -749,16 +776,21 @@ void XclExpChFrame::Save( XclExpStream& rStrm )
         default:
             XclExpChGroupBase::Save( rStrm );
     }
+#endif // xlsx
 }
 
-void XclExpChFrame::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChFrame::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     WriteFrameRecords( rStrm );
+#endif // xlsx
 }
 
-void XclExpChFrame::WriteBody( XclExpStream& rStrm )
+void XclExpChFrame::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.mnFormat << maData.mnFlags;
+#endif // xlsx
 }
 
 namespace {
@@ -983,8 +1015,9 @@ void XclExpChSourceLink::AppendString( const String& rStr )
     XclExpStringHelper::AppendString( *mxString, GetRoot(), rStr );
 }
 
-void XclExpChSourceLink::Save( XclExpStream& rStrm )
+void XclExpChSourceLink::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // CHFORMATRUNS record
     if( mxString.is() && mxString->IsRich() )
     {
@@ -1002,15 +1035,18 @@ void XclExpChSourceLink::Save( XclExpStream& rStrm )
         rStrm << sal_uInt16( 0 ) << *mxString;
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
-void XclExpChSourceLink::WriteBody( XclExpStream& rStrm )
+void XclExpChSourceLink::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << maData.mnDestType
             << maData.mnLinkType
             << maData.mnFlags
             << maData.mnNumFmtIdx
             << mxLinkFmla;
+#endif // xlsx
 }
 
 // Text =======================================================================
@@ -1029,9 +1065,11 @@ XclExpChObjectLink::XclExpChObjectLink( sal_uInt16 nLinkTarget, const XclChDataP
     maData.maPointPos = rPointPos;
 }
 
-void XclExpChObjectLink::WriteBody( XclExpStream& rStrm )
+void XclExpChObjectLink::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.mnTarget << maData.maPointPos.mnSeriesIdx << maData.maPointPos.mnPointIdx;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1057,10 +1095,12 @@ void XclExpChFrLabelProps::Convert( const ScfPropertySet& rPropSet, bool bShowSe
         maData.maSeparator = String( sal_Unicode( ' ' ) );
 }
 
-void XclExpChFrLabelProps::WriteBody( XclExpStream& rStrm )
+void XclExpChFrLabelProps::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     XclExpString aXclSep( maData.maSeparator, EXC_STR_FORCEUNICODE | EXC_STR_SMARTFLAGS );
     rStrm << maData.mnFlags << aXclSep;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1281,8 +1321,9 @@ sal_uInt16 XclExpChText::GetAttLabelFlags() const
     return nFlags;
 }
 
-void XclExpChText::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChText::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // CHFONT record
     lclSaveRecord( rStrm, mxFont );
     // CHSOURCELINK group
@@ -1293,10 +1334,12 @@ void XclExpChText::WriteSubRecords( XclExpStream& rStrm )
     lclSaveRecord( rStrm, mxObjLink );
     // CHFRLABELPROPS record
     lclSaveRecord( rStrm, mxLabelProps );
+#endif // xlsx
 }
 
-void XclExpChText::WriteBody( XclExpStream& rStrm )
+void XclExpChText::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << maData.mnHAlign
             << maData.mnVAlign
             << maData.mnBackMode
@@ -1310,6 +1353,7 @@ void XclExpChText::WriteBody( XclExpStream& rStrm )
                 << maData.mnPlacement
                 << maData.mnRotation;
     }
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1396,14 +1440,16 @@ void XclExpChMarkerFormat::RegisterColors( const XclExpChRoot& rRoot )
     }
 }
 
-void XclExpChMarkerFormat::WriteBody( XclExpStream& rStrm )
+void XclExpChMarkerFormat::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.maLineColor << maData.maFillColor << maData.mnMarkerType << maData.mnFlags;
     if( rStrm.GetRoot().GetBiff() == EXC_BIFF8 )
     {
         const XclExpPalette& rPal = rStrm.GetRoot().GetPalette();
         rStrm << rPal.GetColorIndex( mnLineColorId ) << rPal.GetColorIndex( mnFillColorId ) << maData.mnMarkerSize;
     }
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1457,9 +1503,11 @@ void XclExpCh3dDataFormat::Convert( const ScfPropertySet& rPropSet )
     }
 }
 
-void XclExpCh3dDataFormat::WriteBody( XclExpStream& rStrm )
+void XclExpCh3dDataFormat::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.mnBase << maData.mnTop;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1534,22 +1582,26 @@ void XclExpChDataFormat::ConvertLine( const ScfPropertySet& rPropSet, XclChObjec
     ConvertFrameBase( GetChRoot(), rPropSet, eObjType );
 }
 
-void XclExpChDataFormat::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChDataFormat::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     lclSaveRecord( rStrm, mx3dDataFmt );
     WriteFrameRecords( rStrm );
     lclSaveRecord( rStrm, mxPieFmt );
     lclSaveRecord( rStrm, mxMarkerFmt );
     lclSaveRecord( rStrm, mxSeriesFmt );
     lclSaveRecord( rStrm, mxAttLabel );
+#endif // xlsx
 }
 
-void XclExpChDataFormat::WriteBody( XclExpStream& rStrm )
+void XclExpChDataFormat::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << maData.maPointPos.mnPointIdx
             << maData.maPointPos.mnSeriesIdx
             << maData.mnFormatIdx
             << maData.mnFlags;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1607,8 +1659,9 @@ bool XclExpChSerTrendLine::Convert( Reference< XRegressionCurve > xRegCurve, sal
     return true;
 }
 
-void XclExpChSerTrendLine::WriteBody( XclExpStream& rStrm )
+void XclExpChSerTrendLine::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << maData.mnLineType
             << maData.mnOrder
             << maData.mfIntercept
@@ -1616,6 +1669,7 @@ void XclExpChSerTrendLine::WriteBody( XclExpStream& rStrm )
             << maData.mnShowRSquared
             << maData.mfForecastFor
             << maData.mfForecastBack;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1689,14 +1743,16 @@ bool XclExpChSerErrorBar::Convert( XclExpChSourceLink& rValueLink, sal_uInt16& r
     return bOk;
 }
 
-void XclExpChSerErrorBar::WriteBody( XclExpStream& rStrm )
+void XclExpChSerErrorBar::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << maData.mnBarType
             << maData.mnSourceType
             << maData.mnLineEnd
             << sal_uInt8( 1 )       // must be 1 to make line visible
             << maData.mfValue
             << maData.mnValueCount;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1931,8 +1987,9 @@ void XclExpChSeries::ConvertCategSequence( Reference< XLabeledDataSequence > xCa
         maData.mnCategCount = mxCategLink->ConvertDataSequence( xCategSeq->getValues(), false );
 }
 
-void XclExpChSeries::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChSeries::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     lclSaveRecord( rStrm, mxTitleLink );
     lclSaveRecord( rStrm, mxValueLink );
     lclSaveRecord( rStrm, mxCategLink );
@@ -1945,6 +2002,7 @@ void XclExpChSeries::WriteSubRecords( XclExpStream& rStrm )
         XclExpUInt16Record( EXC_ID_CHSERPARENT, mnParentIdx ).Save( rStrm );
     lclSaveRecord( rStrm, mxTrendLine );
     lclSaveRecord( rStrm, mxErrorBar );
+#endif // xlsx
 }
 
 void XclExpChSeries::InitFromParent( const XclExpChSeries& rParent )
@@ -1997,11 +2055,13 @@ void XclExpChSeries::CreateErrorBar( const ScfPropertySet& rPropSet,
     }
 }
 
-void XclExpChSeries::WriteBody( XclExpStream& rStrm )
+void XclExpChSeries::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.mnCategType << maData.mnValueType << maData.mnCategCount << maData.mnValueCount;
     if( GetBiff() == EXC_BIFF8 )
         rStrm << maData.mnBubbleType << maData.mnBubbleCount;
+#endif // xlsx
 }
 
 // Chart type groups ==========================================================
@@ -2077,8 +2137,9 @@ void XclExpChType::SetStacked( bool bPercent )
     }
 }
 
-void XclExpChType::WriteBody( XclExpStream& rStrm )
+void XclExpChType::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     switch( GetRecId() )
     {
         case EXC_ID_CHBAR:
@@ -2106,6 +2167,7 @@ void XclExpChType::WriteBody( XclExpStream& rStrm )
         default:
             DBG_ERRORFILE( "XclExpChType::WriteBody - unknown chart type" );
     }
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -2152,8 +2214,9 @@ void XclExpChChart3d::Convert( const ScfPropertySet& rPropSet, bool b3dWallChart
     }
 }
 
-void XclExpChChart3d::WriteBody( XclExpStream& rStrm )
+void XclExpChChart3d::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << maData.mnRotation
             << maData.mnElevation
             << maData.mnEyeDist
@@ -2161,6 +2224,7 @@ void XclExpChChart3d::WriteBody( XclExpStream& rStrm )
             << maData.mnRelDepth
             << maData.mnDepthGap
             << maData.mnFlags;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -2181,15 +2245,19 @@ void XclExpChLegend::Convert( const ScfPropertySet& rPropSet )
     GetChartPropSetHelper().ReadLegendProperties( maData, rPropSet );
 }
 
-void XclExpChLegend::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChLegend::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     lclSaveRecord( rStrm, mxText );
     lclSaveRecord( rStrm, mxFrame );
+#endif // xlsx
 }
 
-void XclExpChLegend::WriteBody( XclExpStream& rStrm )
+void XclExpChLegend::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.maRect << maData.mnDockMode << maData.mnSpacing << maData.mnFlags;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -2209,14 +2277,18 @@ void XclExpChDropBar::Convert( const ScfPropertySet& rPropSet )
         SetDefaultFrameBase( GetChRoot(), EXC_CHFRAMETYPE_INVISIBLE, true );
 }
 
-void XclExpChDropBar::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChDropBar::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     WriteFrameRecords( rStrm );
+#endif // xlsx
 }
 
-void XclExpChDropBar::WriteBody( XclExpStream& rStrm )
+void XclExpChDropBar::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << mnBarDist;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -2338,8 +2410,9 @@ void XclExpChTypeGroup::ConvertLegend( const ScfPropertySet& rPropSet )
     }
 }
 
-void XclExpChTypeGroup::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChTypeGroup::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     maType.Save( rStrm );
     lclSaveRecord( rStrm, mxChart3d );
     lclSaveRecord( rStrm, mxLegend );
@@ -2347,6 +2420,7 @@ void XclExpChTypeGroup::WriteSubRecords( XclExpStream& rStrm )
     lclSaveRecord( rStrm, mxDownBar );
     for( XclExpChLineFormatMap::iterator aLIt = maChartLines.begin(), aLEnd = maChartLines.end(); aLIt != aLEnd; ++aLIt )
         lclSaveRecord( rStrm, aLIt->second, EXC_ID_CHCHARTLINE, aLIt->first );
+#endif // xlsx
 }
 
 sal_uInt16 XclExpChTypeGroup::GetFreeFormatIdx() const
@@ -2423,9 +2497,11 @@ bool XclExpChTypeGroup::CreateStockSeries( Reference< XDataSeries > xDataSeries,
     return bOk;
 }
 
-void XclExpChTypeGroup::WriteBody( XclExpStream& rStrm )
+void XclExpChTypeGroup::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.maRect << maData.mnFlags << maData.mnGroupIdx;
+#endif // xlsx
 }
 
 // Axes =======================================================================
@@ -2465,9 +2541,11 @@ void XclExpChLabelRange::ConvertAxisPosition( const ScfPropertySet& rPropSet )
     }
 }
 
-void XclExpChLabelRange::WriteBody( XclExpStream& rStrm )
+void XclExpChLabelRange::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.mnCross << maData.mnLabelFreq << maData.mnTickFreq << maData.mnFlags;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -2538,14 +2616,16 @@ void XclExpChValueRange::ConvertAxisPosition( const ScfPropertySet& rPropSet )
     }
 }
 
-void XclExpChValueRange::WriteBody( XclExpStream& rStrm )
+void XclExpChValueRange::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << maData.mfMin
             << maData.mfMax
             << maData.mfMajorStep
             << maData.mfMinorStep
             << maData.mfCross
             << maData.mnFlags;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -2626,8 +2706,9 @@ void XclExpChTick::SetRotation( sal_uInt16 nRotation )
     ::insert_value( maData.mnFlags, XclTools::GetXclOrientFromRot( nRotation ), 2, 3 );
 }
 
-void XclExpChTick::WriteBody( XclExpStream& rStrm )
+void XclExpChTick::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << maData.mnMajor
             << maData.mnMinor
             << maData.mnLabelPos
@@ -2637,6 +2718,7 @@ void XclExpChTick::WriteBody( XclExpStream& rStrm )
             << maData.mnFlags;
     if( GetBiff() == EXC_BIFF8 )
         rStrm << GetPalette().GetColorIndex( mnTextColorId ) << maData.mnRotation;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -2771,8 +2853,9 @@ void XclExpChAxis::ConvertWall( XDiagramRef xDiagram )
     }
 }
 
-void XclExpChAxis::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChAxis::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     lclSaveRecord( rStrm, mxLabelRange );
     lclSaveRecord( rStrm, mxValueRange );
     if( mnNumFmtIdx != EXC_FORMAT_NOTFOUND )
@@ -2783,11 +2866,14 @@ void XclExpChAxis::WriteSubRecords( XclExpStream& rStrm )
     lclSaveRecord( rStrm, mxMajorGrid, EXC_ID_CHAXISLINE, EXC_CHAXISLINE_MAJORGRID );
     lclSaveRecord( rStrm, mxMinorGrid, EXC_ID_CHAXISLINE, EXC_CHAXISLINE_MINORGRID );
     lclSaveRecord( rStrm, mxWallFrame, EXC_ID_CHAXISLINE, EXC_CHAXISLINE_WALLS );
+#endif // xlsx
 }
 
-void XclExpChAxis::WriteBody( XclExpStream& rStrm )
+void XclExpChAxis::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.mnType << maData.maRect;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -2933,8 +3019,9 @@ bool XclExpChAxesSet::Is3dChart() const
     return xTypeGroup.is() && xTypeGroup->Is3dChart();
 }
 
-void XclExpChAxesSet::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChAxesSet::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     lclSaveRecord( rStrm, mxXAxis );
     lclSaveRecord( rStrm, mxYAxis );
     lclSaveRecord( rStrm, mxZAxis );
@@ -2947,6 +3034,7 @@ void XclExpChAxesSet::WriteSubRecords( XclExpStream& rStrm )
         mxPlotFrame->Save( rStrm );
     }
     maTypeGroups.Save( rStrm );
+#endif // xlsx
 }
 
 XclExpChTypeGroupRef XclExpChAxesSet::GetFirstTypeGroup() const
@@ -2979,9 +3067,11 @@ void XclExpChAxesSet::ConvertAxis(
     rxChAxisTitle = lclCreateTitle( GetChRoot(), xTitled, nTitleTarget );
 }
 
-void XclExpChAxesSet::WriteBody( XclExpStream& rStrm )
+void XclExpChAxesSet::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maData.mnAxesSetId << maData.maRect;
+#endif // xlsx
 }
 
 // The chart object ===========================================================
@@ -3093,8 +3183,9 @@ void XclExpChChart::SetDataLabel( XclExpChTextRef xText )
         maLabels.AppendRecord( xText );
 }
 
-void XclExpChChart::WriteSubRecords( XclExpStream& rStrm )
+void XclExpChChart::WriteSubRecords( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // background format
     lclSaveRecord( rStrm, mxFrame );
 
@@ -3116,11 +3207,14 @@ void XclExpChChart::WriteSubRecords( XclExpStream& rStrm )
     // chart title and data labels
     lclSaveRecord( rStrm, mxTitle );
     maLabels.Save( rStrm );
+#endif // xlsx
 }
 
-void XclExpChChart::WriteBody( XclExpStream& rStrm )
+void XclExpChChart::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
      rStrm << maRect;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
diff --git sc/source/filter/excel/xecontent.cxx sc/source/filter/excel/xecontent.cxx
index 4575fca..c639e6b 100644
--- sc/source/filter/excel/xecontent.cxx
+++ sc/source/filter/excel/xecontent.cxx
@@ -166,8 +166,9 @@ sal_uInt32 XclExpSstImpl::Insert( XclExpStringRef xString )
     return nSstIndex;
 }
 
-void XclExpSstImpl::Save( XclExpStream& rStrm )
+void XclExpSstImpl::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( maStringList.empty() )
         return;
 
@@ -257,6 +258,7 @@ void XclExpSstImpl::Save( XclExpStream& rStrm )
     rStrm.CopyFromStream( aExtSst );
 
     rStrm.EndRecord();
+#endif // xlsx
 }
 
 void XclExpSstImpl::SaveXml( XclExpXmlStream& rStrm )
@@ -306,9 +308,11 @@ sal_uInt32 XclExpSst::Insert( XclExpStringRef xString )
     return mxImpl->Insert( xString );
 }
 
-void XclExpSst::Save( XclExpStream& rStrm )
+void XclExpSst::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     mxImpl->Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpSst::SaveXml( XclExpXmlStream& rStrm )
@@ -343,8 +347,9 @@ sal_uInt32 XclExpMergedcells::GetBaseXFId( const ScAddress& rPos ) const
     return EXC_XFID_NOTFOUND;
 }
 
-void XclExpMergedcells::Save( XclExpStream& rStrm )
+void XclExpMergedcells::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( GetBiff() == EXC_BIFF8 )
     {
         XclRangeList aXclRanges;
@@ -361,6 +366,7 @@ void XclExpMergedcells::Save( XclExpStream& rStrm )
             nRemainingRanges -= nRangeCount;
         }
     }
+#endif // xlsx
 }
 
 void XclExpMergedcells::SaveXml( XclExpXmlStream& rStrm )
@@ -397,15 +403,19 @@ XclExpHyperlink::XclExpHyperlink( const XclExpRoot& rRoot, const SvxURLField& rU
     INetURLObject aUrlObj( rUrl );
     const INetProtocol eProtocol = aUrlObj.GetProtocol();
     bool bWithRepr = rRepr.Len() > 0;
+#if 0 // xlsx
     XclExpStream aXclStrm( *mxVarData, rRoot );         // using in raw write mode.
+#endif // xlsx
 
     // description
     if( bWithRepr )
     {
         XclExpString aDescr( rRepr, EXC_STR_FORCEUNICODE, 255 );
+#if 0 // xlsx
         aXclStrm << sal_uInt32( aDescr.Len() + 1 );     // string length + 1 trailing zero word
         aDescr.WriteBuffer( aXclStrm );                 // NO flags
         aXclStrm << sal_uInt16( 0 );
+#endif // xlsx
 
         mnFlags |= EXC_HLINK_DESCR;
         mxRepr.reset( new String( rRepr ) );
@@ -432,6 +442,7 @@ XclExpHyperlink::XclExpHyperlink( const XclExpRoot& rRoot, const SvxURLField& rU
 
         ByteString aAsciiLink( aFileName, rRoot.GetTextEncoding() );
         XclExpString aLink( aFileName, EXC_STR_FORCEUNICODE, 255 );
+#if 0 // xlsx
         aXclStrm    << XclTools::maGuidFileMoniker
                     << nLevel
                     << sal_uInt32( aAsciiLink.Len() + 1 );      // string length + 1 trailing zero byte
@@ -443,6 +454,7 @@ XclExpHyperlink::XclExpHyperlink( const XclExpRoot& rRoot, const SvxURLField& rU
                     << sal_uInt32( aLink.GetBufferSize() )      // byte count, not string length
                     << sal_uInt16( 0x0003 );
         aLink.WriteBuffer( aXclStrm );                          // NO flags
+#endif // xlsx
 
         if( !mxRepr.get() )
             mxRepr.reset( new String( aFileName ) );
@@ -452,10 +464,12 @@ XclExpHyperlink::XclExpHyperlink( const XclExpRoot& rRoot, const SvxURLField& rU
     else if( eProtocol != INET_PROT_NOT_VALID )
     {
         XclExpString aUrl( aUrlObj.GetURLNoMark(), EXC_STR_FORCEUNICODE, 255 );
+#if 0 // xlsx
         aXclStrm    << XclTools::maGuidUrlMoniker
                     << sal_uInt32( aUrl.GetBufferSize() + 2 );  // byte count + 1 trailing zero word
         aUrl.WriteBuffer( aXclStrm );                           // NO flags
         aXclStrm    << sal_uInt16( 0 );
+#endif // xlsx
 
         mnFlags |= EXC_HLINK_BODY | EXC_HLINK_ABS;
         if( !mxRepr.get() )
@@ -476,9 +490,11 @@ XclExpHyperlink::XclExpHyperlink( const XclExpRoot& rRoot, const SvxURLField& rU
 
     if( mxTextMark.get() )
     {
+#if 0 // xlsx
         aXclStrm    << sal_uInt32( mxTextMark->Len() + 1 );  // string length + 1 trailing zero word
         mxTextMark->WriteBuffer( aXclStrm );                 // NO flags
         aXclStrm    << sal_uInt16( 0 );
+#endif // xlsx
 
         mnFlags |= EXC_HLINK_MARK;
     }
@@ -523,22 +539,26 @@ String XclExpHyperlink::BuildFileName(
     return aDosName;
 }
 
-void XclExpHyperlink::WriteBody( XclExpStream& rStrm )
+void XclExpHyperlink::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     sal_uInt16 nXclCol = static_cast< sal_uInt16 >( maScPos.Col() );
     sal_uInt16 nXclRow = static_cast< sal_uInt16 >( maScPos.Row() );
     rStrm   << nXclRow << nXclRow << nXclCol << nXclCol;
     WriteEmbeddedData( rStrm );
+#endif // xlsx
 }
 
-void XclExpHyperlink::WriteEmbeddedData( XclExpStream& rStrm )
+void XclExpHyperlink::WriteEmbeddedData( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << XclTools::maGuidStdLink
             << sal_uInt32( 2 )
             << mnFlags;
 
     mxVarData->Seek( STREAM_SEEK_TO_BEGIN );
     rStrm.CopyFromStream( *mxVarData );
+#endif // xlsx
 }
 
 void XclExpHyperlink::SaveXml( XclExpXmlStream& rStrm )
@@ -585,8 +605,9 @@ void XclExpLabelranges::FillRangeList( ScRangeList& rScRanges,
     }
 }
 
-void XclExpLabelranges::Save( XclExpStream& rStrm )
+void XclExpLabelranges::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     XclExpAddressConverter& rAddrConv = GetAddressConverter();
     XclRangeList aRowXclRanges, aColXclRanges;
     rAddrConv.ConvertRangeList( aRowXclRanges, maRowRanges, false );
@@ -597,6 +618,7 @@ void XclExpLabelranges::Save( XclExpStream& rStrm )
         rStrm << aRowXclRanges << aColXclRanges;
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
 // Conditional formatting  ====================================================
@@ -716,8 +738,9 @@ XclExpCFImpl::XclExpCFImpl( const XclExpRoot& rRoot, const ScCondFormatEntry& rF
     }
 }
 
-void XclExpCFImpl::WriteBody( XclExpStream& rStrm )
+void XclExpCFImpl::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // *** mode and comparison operator ***
 
     rStrm << mnType << mnOperator;
@@ -806,6 +829,7 @@ void XclExpCFImpl::WriteBody( XclExpStream& rStrm )
         mxTokArr1->WriteArray( rStrm );
     if( mxTokArr2.get() )
         mxTokArr2->WriteArray( rStrm );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -821,9 +845,11 @@ XclExpCF::~XclExpCF()
 {
 }
 
-void XclExpCF::WriteBody( XclExpStream& rStrm )
+void XclExpCF::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     mxImpl->WriteBody( rStrm );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -853,17 +879,20 @@ bool XclExpCondfmt::IsValid() const
     return !maCFList.IsEmpty() && !maXclRanges.empty();
 }
 
-void XclExpCondfmt::Save( XclExpStream& rStrm )
+void XclExpCondfmt::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( IsValid() )
     {
         XclExpRecord::Save( rStrm );
         maCFList.Save( rStrm );
     }
+#endif // xlsx
 }
 
-void XclExpCondfmt::WriteBody( XclExpStream& rStrm )
+void XclExpCondfmt::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( !maCFList.IsEmpty(), "XclExpCondfmt::WriteBody - no CF records to write" );
     DBG_ASSERT( !maXclRanges.empty(), "XclExpCondfmt::WriteBody - no cell ranges found" );
 
@@ -871,6 +900,7 @@ void XclExpCondfmt::WriteBody( XclExpStream& rStrm )
             << sal_uInt16( 1 )
             << maXclRanges.GetEnclosingRange()
             << maXclRanges;
+#endif // xlsx
 }
 
 void XclExpCondfmt::SaveXml( XclExpXmlStream& rStrm )
@@ -911,9 +941,11 @@ XclExpCondFormatBuffer::XclExpCondFormatBuffer( const XclExpRoot& rRoot ) :
     }
 }
 
-void XclExpCondFormatBuffer::Save( XclExpStream& rStrm )
+void XclExpCondFormatBuffer::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     maCondfmtList.Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpCondFormatBuffer::SaveXml( XclExpXmlStream& rStrm )
@@ -926,22 +958,26 @@ void XclExpCondFormatBuffer::SaveXml( XclExpXmlStream& rStrm )
 namespace {
 
 /** Writes a formula for the DV record. */
-void lclWriteDvFormula( XclExpStream& rStrm, const XclTokenArray* pXclTokArr )
+void lclWriteDvFormula( XclExpStream& /*rStrm*/, const XclTokenArray* /*pXclTokArr*/ )
 {
+#if 0 // xlsx
     sal_uInt16 nFmlaSize = pXclTokArr ? pXclTokArr->GetSize() : 0;
     rStrm << nFmlaSize << sal_uInt16( 0 );
     if( pXclTokArr )
         pXclTokArr->WriteArray( rStrm );
+#endif // xlsx
 }
 
 /** Writes a formula for the DV record, based on a single string. */
-void lclWriteDvFormula( XclExpStream& rStrm, const XclExpString& rString )
+void lclWriteDvFormula( XclExpStream& /*rStrm*/, const XclExpString& /*rString*/ )
 {
+#if 0 // xlsx
     // fake a formula with a single tStr token
     rStrm   << static_cast< sal_uInt16 >( rString.GetSize() + 1 )
             << sal_uInt16( 0 )
             << EXC_TOKID_STR
             << rString;
+#endif // xlsx
 }
 
 const char* lcl_GetValidationType( sal_uInt32 nFlags )
@@ -1146,8 +1182,9 @@ bool XclExpDV::Finalize()
     return (mnScHandle != ULONG_MAX) && !maXclRanges.empty();
 }
 
-void XclExpDV::WriteBody( XclExpStream& rStrm )
+void XclExpDV::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // flags and strings
     rStrm << mnFlags << maPromptTitle << maErrorTitle << maPromptText << maErrorText;
     // condition formulas
@@ -1158,6 +1195,7 @@ void XclExpDV::WriteBody( XclExpStream& rStrm )
     lclWriteDvFormula( rStrm, mxTokArr2.get() );
     // cell ranges
     rStrm << maXclRanges;
+#endif // xlsx
 }
 
 void XclExpDV::SaveXml( XclExpXmlStream& rStrm )
@@ -1214,8 +1252,9 @@ void XclExpDval::InsertCellRange( const ScRange& rRange, ULONG nScHandle )
     }
 }
 
-void XclExpDval::Save( XclExpStream& rStrm )
+void XclExpDval::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // check all records
     size_t nPos = maDVList.GetSize();
     while( nPos )
@@ -1232,6 +1271,7 @@ void XclExpDval::Save( XclExpStream& rStrm )
         XclExpRecord::Save( rStrm );
         maDVList.Save( rStrm );
     }
+#endif // xlsx
 }
 
 void XclExpDval::SaveXml( XclExpXmlStream& rStrm )
@@ -1290,10 +1330,12 @@ XclExpDV& XclExpDval::SearchOrCreateDv( ULONG nScHandle )
     return *mxLastFoundDV;
 }
 
-void XclExpDval::WriteBody( XclExpStream& rStrm )
+void XclExpDval::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm.WriteZeroBytes( 10 );
     rStrm << EXC_DVAL_NOOBJ << static_cast< sal_uInt32 >( maDVList.GetSize() );
+#endif // xlsx
 }
 
 // Web Queries ================================================================
@@ -1336,8 +1378,9 @@ XclExpWebQuery::~XclExpWebQuery()
 {
 }
 
-void XclExpWebQuery::Save( XclExpStream& rStrm )
+void XclExpWebQuery::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( !mbEntireDoc || !mxQryTables.get(), "XclExpWebQuery::Save - illegal mode" );
     sal_uInt16 nFlags;
 
@@ -1401,6 +1444,7 @@ void XclExpWebQuery::Save( XclExpStream& rStrm )
                 << *mxQryTables;            // comma separated list of source tables
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
diff --git sc/source/filter/excel/xeescher.cxx sc/source/filter/excel/xeescher.cxx
index 918e491..e224fc2 100644
--- sc/source/filter/excel/xeescher.cxx
+++ sc/source/filter/excel/xeescher.cxx
@@ -102,8 +102,9 @@ XclExpImgData::XclExpImgData( const Graphic& rGraphic, sal_uInt16 nRecId ) :
 {
 }
 
-void XclExpImgData::Save( XclExpStream& rStrm )
+void XclExpImgData::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     Bitmap aBmp = maGraphic.GetBitmap();
     if( aBmp.GetBitCount() != 24 )
         aBmp.Convert( BMP_CONVERSION_24BIT );
@@ -142,6 +143,7 @@ void XclExpImgData::Save( XclExpStream& rStrm )
         }
         aBmp.ReleaseAccess( pAccess );
     }
+#endif // xlsx
 }
 
 void XclExpImgData::SaveXml( XclExpXmlStream& rStrm )
@@ -220,20 +222,24 @@ void XclExpControlHelper::ConvertSheetLinks( Reference< XShape > xShape )
     }
 }
 
-void XclExpControlHelper::WriteFormula( XclExpStream& rStrm, const XclTokenArray& rTokArr ) const
+void XclExpControlHelper::WriteFormula( XclExpStream& /*rStrm*/, const XclTokenArray& /*rTokArr*/ ) const
 {
+#if 0 // xlsx
     sal_uInt16 nFmlaSize = rTokArr.GetSize();
     rStrm << nFmlaSize << sal_uInt32( 0 );
     rTokArr.WriteArray( rStrm );
     if( nFmlaSize & 1 )             // pad to 16-bit
         rStrm << sal_uInt8( 0 );
+#endif // xlsx
 }
 
-void XclExpControlHelper::WriteFormulaSubRec( XclExpStream& rStrm, sal_uInt16 nSubRecId, const XclTokenArray& rTokArr ) const
+void XclExpControlHelper::WriteFormulaSubRec( XclExpStream& /*rStrm*/, sal_uInt16 /*nSubRecId*/, const XclTokenArray& /*rTokArr*/ ) const
 {
+#if 0 // xlsx
     rStrm.StartRecord( nSubRecId, (rTokArr.GetSize() + 5) & ~1 );
     WriteFormula( rStrm, rTokArr );
     rStrm.EndRecord();
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -296,8 +302,9 @@ XclExpOcxControlObj::XclExpOcxControlObj( const XclExpRoot& rRoot, Reference< XS
     ConvertSheetLinks( xShape );
 }
 
-void XclExpOcxControlObj::WriteSubRecs( XclExpStream& rStrm )
+void XclExpOcxControlObj::WriteSubRecs( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // OBJCF - clipboard format
     rStrm.StartRecord( EXC_ID_OBJCF, 2 );
     rStrm << sal_uInt16( 2 );
@@ -343,6 +350,7 @@ void XclExpOcxControlObj::WriteSubRecs( XclExpStream& rStrm )
         WriteFormula( rStrm, *pSrcRange );
 
     rStrm.EndRecord();
+#endif // xlsx
 }
 
 #else
@@ -613,8 +621,9 @@ bool XclExpTbxControlObj::SetMacroLink( const ScriptEventDescriptor& rEvent )
 */
 }
 
-void XclExpTbxControlObj::WriteSubRecs( XclExpStream& rStrm )
+void XclExpTbxControlObj::WriteSubRecs( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     switch( mnObjType )
     {
         // *** Push buttons, labels ***
@@ -749,16 +758,20 @@ void XclExpTbxControlObj::WriteSubRecs( XclExpStream& rStrm )
         }
         break;
     }
+#endif // xlsx
 }
 
-void XclExpTbxControlObj::WriteCellLinkSubRec( XclExpStream& rStrm, sal_uInt16 nSubRecId )
+void XclExpTbxControlObj::WriteCellLinkSubRec( XclExpStream& /*rStrm*/, sal_uInt16 /*nSubRecId*/ )
 {
+#if 0 // xlsx
     if( const XclTokenArray* pCellLink = GetCellLinkTokArr() )
         WriteFormulaSubRec( rStrm, nSubRecId, *pCellLink );
+#endif // xlsx
 }
 
-void XclExpTbxControlObj::WriteSbs( XclExpStream& rStrm )
+void XclExpTbxControlObj::WriteSbs( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     sal_uInt16 nOrient = 0;
     ::set_flag( nOrient, EXC_OBJ_SCROLLBAR_HOR, mbScrollHor );
     sal_uInt16 nStyle = EXC_OBJ_SCROLLBAR_DEFFLAGS;
@@ -775,6 +788,7 @@ void XclExpTbxControlObj::WriteSbs( XclExpStream& rStrm )
             << sal_uInt16( 15 )             // thumb width
             << nStyle;                      // flags/style
     rStrm.EndRecord();
+#endif // xlsx
 }
 
 #endif
@@ -830,12 +844,14 @@ XclExpChartObj::~XclExpChartObj()
 {
 }
 
-void XclExpChartObj::Save( XclExpStream& rStrm )
+void XclExpChartObj::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // content of OBJ record
     XclObj::Save( rStrm );
     // chart substream
     mxChart->Save( rStrm );
+#endif // xlsx
 }
 
 // ============================================================================
@@ -878,8 +894,9 @@ XclExpNote::XclExpNote( const XclExpRoot& rRoot, const ScAddress& rScPos,
     }
 }
 
-void XclExpNote::Save( XclExpStream& rStrm )
+void XclExpNote::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     switch( rStrm.GetRoot().GetBiff() )
     {
         case EXC_BIFF5:
@@ -923,11 +940,13 @@ void XclExpNote::Save( XclExpStream& rStrm )
 
         default:    DBG_ERROR_BIFF();
     }
+#endif // xlsx
 }
 
 
-void XclExpNote::WriteBody( XclExpStream& rStrm )
+void XclExpNote::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // BIFF5/BIFF7 is written separately
     DBG_ASSERT_BIFF( rStrm.GetRoot().GetBiff() == EXC_BIFF8 );
 
@@ -940,6 +959,7 @@ void XclExpNote::WriteBody( XclExpStream& rStrm )
             << mnObjId
             << maAuthor
             << sal_uInt8( 0 );
+#endif // xlsx
 }
 
 void XclExpNote::WriteXml( sal_Int32 nAuthorId, XclExpXmlStream& rStrm )
@@ -976,10 +996,12 @@ XclMacroHelper::~XclMacroHelper()
 {
 }
 
-void XclMacroHelper::WriteMacroSubRec( XclExpStream& rStrm )
+void XclMacroHelper::WriteMacroSubRec( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( mxMacroLink.is() )
         WriteFormulaSubRec( rStrm, EXC_ID_OBJMACRO, *mxMacroLink );
+#endif // xlsx
 }
 
 bool 
@@ -1023,10 +1045,12 @@ XclExpShapeObj::~XclExpShapeObj()
 {
 }
 
-void XclExpShapeObj::WriteSubRecs( XclExpStream& rStrm )
+void XclExpShapeObj::WriteSubRecs( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     XclObjAny::WriteSubRecs( rStrm );
     WriteMacroSubRec( rStrm );
+#endif // xlsx
 }
 
 // ============================================================================
diff --git sc/source/filter/excel/xeformula.cxx sc/source/filter/excel/xeformula.cxx
index 849ac08..7f71543 100644
--- sc/source/filter/excel/xeformula.cxx
+++ sc/source/filter/excel/xeformula.cxx
@@ -1835,7 +1835,7 @@ void XclExpFmlaCompImpl::ConvertRefData(
             rnScRow = mnMaxAbsRow;
         else if( (rnScRow < 0) || (rnScRow > mnMaxAbsRow) )
             rRefData.SetRowDeleted( TRUE );
-        rXclPos.mnRow = static_cast< sal_uInt16 >( rnScRow ) & mnMaxRowMask;
+        rXclPos.mnRow = static_cast< sal_uInt32 >( rnScRow ) & mnMaxRowMask;
     }
     else
     {
@@ -1847,7 +1847,7 @@ void XclExpFmlaCompImpl::ConvertRefData(
 
         // convert row index (2-step-cast ScsROW->sal_Int16->sal_uInt16 to get all bits correctly)
         sal_Int16 nXclRelRow = static_cast< sal_Int16 >( rRefData.IsRowRel() ? rRefData.nRelRow : rRefData.nRow );
-        rXclPos.mnRow = static_cast< sal_uInt16 >( nXclRelRow ) & mnMaxRowMask;
+        rXclPos.mnRow = static_cast< sal_uInt32 >( nXclRelRow ) & mnMaxRowMask;
 
         // resolve relative tab index if possible
         if( rRefData.IsTabRel() && !IsInGlobals() && (GetCurrScTab() < GetDoc().GetTableCount()) )
@@ -1863,9 +1863,11 @@ void XclExpFmlaCompImpl::ConvertRefData(
     }
     else
     {
+#if 0 // FIXME : doesn't build in xlsx
         sal_uInt16& rnRelField = (meBiff <= EXC_BIFF5) ? rXclPos.mnRow : rXclPos.mnCol;
         ::set_flag( rnRelField, EXC_TOK_REF_COLREL, rRefData.IsColRel() );
         ::set_flag( rnRelField, EXC_TOK_REF_ROWREL, rRefData.IsRowRel() );
+#endif
     }
 }
 
diff --git sc/source/filter/excel/xehelper.cxx sc/source/filter/excel/xehelper.cxx
index 54043ce..53bd290 100644
--- sc/source/filter/excel/xehelper.cxx
+++ sc/source/filter/excel/xehelper.cxx
@@ -159,7 +159,7 @@ namespace {
 inline void lclFillAddress( XclAddress& rXclPos, SCCOL nScCol, SCROW nScRow )
 {
     rXclPos.mnCol = static_cast< sal_uInt16 >( nScCol );
-    rXclPos.mnRow = static_cast< sal_uInt16 >( nScRow );
+    rXclPos.mnRow = static_cast< sal_uInt32 >( nScRow );
 }
 
 } // namespace
diff --git sc/source/filter/excel/xename.cxx sc/source/filter/excel/xename.cxx
index f04c4e4..6b3e91c 100644
--- sc/source/filter/excel/xename.cxx
+++ sc/source/filter/excel/xename.cxx
@@ -310,12 +310,14 @@ bool XclExpName::IsMacroCall( bool bVBasic, bool bFunc ) const
         (::get_flag( mnFlags, EXC_NAME_FUNC ) == bFunc);
 }
 
-void XclExpName::Save( XclExpStream& rStrm )
+void XclExpName::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( mxName.is() && (mxName->Len() > 0), "XclExpName::Save - missing name" );
     DBG_ASSERT( !(IsGlobal() && ::get_flag( mnFlags, EXC_NAME_BUILTIN )), "XclExpName::Save - global built-in name" );
     SetRecSize( 11 + mxName->GetSize() + (mxTokArr.is() ? mxTokArr->GetSize() : 2) );
     XclExpRecord::Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpName::SaveXml( XclExpXmlStream& rStrm )
@@ -346,8 +348,9 @@ void XclExpName::SaveXml( XclExpXmlStream& rStrm )
     rWorkbook->endElement( XML_definedName );
 }
 
-void XclExpName::WriteBody( XclExpStream& rStrm )
+void XclExpName::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     sal_uInt16 nFmlaSize = mxTokArr.is() ? mxTokArr->GetSize() : 0;
 
     rStrm   << mnFlags                  // flags
@@ -361,6 +364,7 @@ void XclExpName::WriteBody( XclExpStream& rStrm )
     mxName->WriteBuffer( rStrm );       // character array of the name
     if( mxTokArr.is() )
         mxTokArr->WriteArray( rStrm );  // token array without size
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -467,9 +471,11 @@ const XclExpName* XclExpNameManagerImpl::GetName( sal_uInt16 nNameIdx ) const
     return maNameList.GetRecord( nNameIdx - 1 ).get();
 }
 
-void XclExpNameManagerImpl::Save( XclExpStream& rStrm )
+void XclExpNameManagerImpl::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     maNameList.Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpNameManagerImpl::SaveXml( XclExpXmlStream& rStrm )
@@ -780,9 +786,11 @@ bool XclExpNameManager::IsVolatile( sal_uInt16 nNameIdx ) const
     return pName && pName->IsVolatile();
 }
 
-void XclExpNameManager::Save( XclExpStream& rStrm )
+void XclExpNameManager::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     mxImpl->Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpNameManager::SaveXml( XclExpXmlStream& rStrm )
diff --git sc/source/filter/excel/xepivot.cxx sc/source/filter/excel/xepivot.cxx
index 66a885e..e509ce7 100644
--- sc/source/filter/excel/xepivot.cxx
+++ sc/source/filter/excel/xepivot.cxx
@@ -173,8 +173,9 @@ bool XclExpPCItem::EqualsBool( bool bValue ) const
 
 // ----------------------------------------------------------------------------
 
-void XclExpPCItem::WriteBody( XclExpStream& rStrm )
+void XclExpPCItem::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( const String* pText = GetText() )
     {
         rStrm << XclExpString( *pText );
@@ -207,6 +208,7 @@ void XclExpPCItem::WriteBody( XclExpStream& rStrm )
         // nothing to do for SXEMPTY
         DBG_ASSERT( IsEmpty(), "XclExpPCItem::WriteBody - no data found" );
     }
+#endif // xlsx
 }
 
 // ============================================================================
@@ -309,8 +311,9 @@ sal_Size XclExpPCField::GetIndexSize() const
     return Has16BitIndexes() ? 2 : 1;
 }
 
-void XclExpPCField::WriteIndex( XclExpStream& rStrm, sal_uInt32 nSrcRow ) const
+void XclExpPCField::WriteIndex( XclExpStream& /*rStrm*/, sal_uInt32 /*nSrcRow*/ ) const
 {
+#if 0 // xlsx
     // only standard fields write item indexes
     if( nSrcRow < maIndexVec.size() )
     {
@@ -320,10 +323,12 @@ void XclExpPCField::WriteIndex( XclExpStream& rStrm, sal_uInt32 nSrcRow ) const
         else
             rStrm << static_cast< sal_uInt8 >( nIndex );
     }
+#endif // xlsx
 }
 
-void XclExpPCField::Save( XclExpStream& rStrm )
+void XclExpPCField::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( IsSupportedField(), "XclExpPCField::Save - unknown field type" );
     // SXFIELD
     XclExpRecord::Save( rStrm );
@@ -337,6 +342,7 @@ void XclExpPCField::Save( XclExpStream& rStrm )
     WriteSxnumgroup( rStrm );
     // list of original items
     maOrigItemList.Save( rStrm );
+#endif // xlsx
 }
 
 // private --------------------------------------------------------------------
@@ -591,8 +597,9 @@ void XclExpPCField::Finalize()
     maFieldInfo.mnOrigItems = static_cast< sal_uInt16 >( maOrigItemList.GetSize() );
 }
 
-void XclExpPCField::WriteSxnumgroup( XclExpStream& rStrm )
+void XclExpPCField::WriteSxnumgroup( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( IsNumGroupField() || IsDateGroupField() )
     {
         // SXNUMGROUP record
@@ -605,10 +612,12 @@ void XclExpPCField::WriteSxnumgroup( XclExpStream& rStrm )
             "XclExpPCField::WriteSxnumgroup - missing numeric grouping limits" );
         maNumGroupLimits.Save( rStrm );
     }
+#endif // xlsx
 }
 
-void XclExpPCField::WriteSxgroupinfo( XclExpStream& rStrm )
+void XclExpPCField::WriteSxgroupinfo( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( IsStdGroupField() != maGroupOrder.empty(),
         "XclExpPCField::WriteSxgroupinfo - missing grouping info" );
     if( IsStdGroupField() && !maGroupOrder.empty() )
@@ -618,11 +627,14 @@ void XclExpPCField::WriteSxgroupinfo( XclExpStream& rStrm )
             rStrm << *aIt;
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
-void XclExpPCField::WriteBody( XclExpStream& rStrm )
+void XclExpPCField::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maFieldInfo;
+#endif // xlsx
 }
 
 // ============================================================================
@@ -726,8 +738,9 @@ bool XclExpPivotCache::HasEqualDataSource( const ScDPObject& rDPObj ) const
     return false;
 }
 
-void XclExpPivotCache::Save( XclExpStream& rStrm )
+void XclExpPivotCache::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( mbValid, "XclExpPivotCache::Save - invalid pivot cache" );
     // SXIDSTM
     XclExpUInt16Record( EXC_ID_SXIDSTM, maPCInfo.mnStrmId ).Save( rStrm );
@@ -737,6 +750,7 @@ void XclExpPivotCache::Save( XclExpStream& rStrm )
     WriteDconref( rStrm );
     // create the pivot cache storage stream
     WriteCacheStream();
+#endif // xlsx
 }
 
 void XclExpPivotCache::SaveXml( XclExpXmlStream& rStrm )
@@ -843,8 +857,9 @@ void XclExpPivotCache::AddCalcFields( const ScDPObject& /*rDPObj*/ )
     // not supported
 }
 
-void XclExpPivotCache::WriteDconref( XclExpStream& rStrm ) const
+void XclExpPivotCache::WriteDconref( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     XclExpString aRef( XclExpUrlHelper::EncodeUrl( GetRoot(), EMPTY_STRING, &maTabName ) );
     rStrm.StartRecord( EXC_ID_DCONREF, 7 + aRef.GetSize() );
     rStrm   << static_cast< sal_uInt16 >( maExpSrcRange.aStart.Row() )
@@ -854,10 +869,12 @@ void XclExpPivotCache::WriteDconref( XclExpStream& rStrm ) const
             << aRef
             << sal_uInt8( 0 );
     rStrm.EndRecord();
+#endif // xlsx
 }
 
 void XclExpPivotCache::WriteCacheStream()
 {
+#if 0 // xlsx
     SotStorageRef xSvStrg = OpenStorage( EXC_STORAGE_PTCACHE );
     SotStorageStreamRef xSvStrm = OpenStream( xSvStrg, ScfTools::GetHexStr( maPCInfo.mnStrmId ) );
     if( xSvStrm.Is() )
@@ -874,25 +891,31 @@ void XclExpPivotCache::WriteCacheStream()
         // EOF
         XclExpEmptyRecord( EXC_ID_EOF ).Save( aStrm );
     }
+#endif // xlsx
 }
 
-void XclExpPivotCache::WriteSxdb( XclExpStream& rStrm ) const
+void XclExpPivotCache::WriteSxdb( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     rStrm.StartRecord( EXC_ID_SXDB, 21 );
     rStrm << maPCInfo;
     rStrm.EndRecord();
+#endif // xlsx
 }
 
-void XclExpPivotCache::WriteSxdbex( XclExpStream& rStrm ) const
+void XclExpPivotCache::WriteSxdbex( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     rStrm.StartRecord( EXC_ID_SXDBEX, 12 );
     rStrm   << EXC_SXDBEX_CREATION_DATE
             << sal_uInt32( 0 );             // number of SXFORMULA records
     rStrm.EndRecord();
+#endif // xlsx
 }
 
-void XclExpPivotCache::WriteSxindexlistList( XclExpStream& rStrm ) const
+void XclExpPivotCache::WriteSxindexlistList( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     if( HasItemIndexList() )
     {
         sal_Size nRecSize = 0;
@@ -908,6 +931,7 @@ void XclExpPivotCache::WriteSxindexlistList( XclExpStream& rStrm ) const
             rStrm.EndRecord();
         }
     }
+#endif // xlsx
 }
 
 // ============================================================================
@@ -986,9 +1010,11 @@ void XclExpPTItem::SetPropertiesFromMember( const ScDPSaveMember& rSaveMem )
         maItemInfo.SetVisName(*pVisName);
 }
 
-void XclExpPTItem::WriteBody( XclExpStream& rStrm )
+void XclExpPTItem::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << maItemInfo;
+#endif // xlsx
 }
 
 // ============================================================================
@@ -1191,13 +1217,16 @@ void XclExpPTField::AppendSubtotalItems()
 
 // records --------------------------------------------------------------------
 
-void XclExpPTField::WriteSxpiEntry( XclExpStream& rStrm ) const
+void XclExpPTField::WriteSxpiEntry( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     rStrm << maPageInfo;
+#endif // xlsx
 }
 
-void XclExpPTField::WriteSxdi( XclExpStream& rStrm, sal_uInt16 nDataInfoIdx ) const
+void XclExpPTField::WriteSxdi( XclExpStream& /*rStrm*/, sal_uInt16 /*nDataInfoIdx*/ ) const
 {
+#if 0 // xlsx
     DBG_ASSERT( nDataInfoIdx < maDataInfoVec.size(), "XclExpPTField::WriteSxdi - data field not found" );
     if( nDataInfoIdx < maDataInfoVec.size() )
     {
@@ -1205,16 +1234,19 @@ void XclExpPTField::WriteSxdi( XclExpStream& rStrm, sal_uInt16 nDataInfoIdx ) co
         rStrm << maDataInfoVec[ nDataInfoIdx ];
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
-void XclExpPTField::Save( XclExpStream& rStrm )
+void XclExpPTField::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // SXVD
     WriteSxvd( rStrm );
     // list of SXVI records
     maItemList.Save( rStrm );
     // SXVDEX
     WriteSxvdex( rStrm );
+#endif // xlsx
 }
 
 // private --------------------------------------------------------------------
@@ -1234,18 +1266,22 @@ void XclExpPTField::AppendSubtotalItem( sal_uInt16 nItemType )
     ++maFieldInfo.mnItemCount;
 }
 
-void XclExpPTField::WriteSxvd( XclExpStream& rStrm ) const
+void XclExpPTField::WriteSxvd( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     rStrm.StartRecord( EXC_ID_SXVD, 10 );
     rStrm << maFieldInfo;
     rStrm.EndRecord();
+#endif // xlsx
 }
 
-void XclExpPTField::WriteSxvdex( XclExpStream& rStrm ) const
+void XclExpPTField::WriteSxvdex( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     rStrm.StartRecord( EXC_ID_SXVDEX, 20 );
     rStrm << maFieldExtInfo;
     rStrm.EndRecord();
+#endif // xlsx
 }
 
 // ============================================================================
@@ -1329,8 +1365,9 @@ sal_uInt16 XclExpPivotTable::GetDataFieldIndex( const String& rName, sal_uInt16
     return nDefaultIdx;
 }
 
-void XclExpPivotTable::Save( XclExpStream& rStrm )
+void XclExpPivotTable::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( mbValid )
     {
         // SXVIEW
@@ -1354,6 +1391,7 @@ void XclExpPivotTable::Save( XclExpStream& rStrm )
         // SXVIEWEX9
         WriteSxViewEx9( rStrm );
     }
+#endif // xlsx
 }
 
 void XclExpPivotTable::SaveXml( XclExpXmlStream& rStrm )
@@ -1626,9 +1664,9 @@ void XclExpPivotTable::Finalize()
 
     // update output range (initialized in ctor)
     sal_uInt16& rnXclCol1 = maPTInfo.maOutXclRange.maFirst.mnCol;
-    sal_uInt16& rnXclRow1 = maPTInfo.maOutXclRange.maFirst.mnRow;
+    sal_uInt32& rnXclRow1 = maPTInfo.maOutXclRange.maFirst.mnRow;
     sal_uInt16& rnXclCol2 = maPTInfo.maOutXclRange.maLast.mnCol;
-    sal_uInt16& rnXclRow2 = maPTInfo.maOutXclRange.maLast.mnRow;
+    sal_uInt32& rnXclRow2 = maPTInfo.maOutXclRange.maLast.mnRow;
     // exclude page fields from output range
     rnXclRow1 = rnXclRow1 + maPTInfo.mnPageFields;
     // exclude filter button from output range
@@ -1640,7 +1678,7 @@ void XclExpPivotTable::Finalize()
 
     // data area
     sal_uInt16& rnDataXclCol = maPTInfo.maDataXclPos.mnCol;
-    sal_uInt16& rnDataXclRow = maPTInfo.maDataXclPos.mnRow;
+    sal_uInt32& rnDataXclRow = maPTInfo.maDataXclPos.mnRow;
     rnDataXclCol = rnXclCol1 + maPTInfo.mnRowFields;
     rnDataXclRow = rnXclRow1 + maPTInfo.mnColFields + 1;
     if( maDataFields.empty() )
@@ -1664,15 +1702,18 @@ void XclExpPivotTable::Finalize()
 
 // records ----------------------------------------------------------------
 
-void XclExpPivotTable::WriteSxview( XclExpStream& rStrm ) const
+void XclExpPivotTable::WriteSxview( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     rStrm.StartRecord( EXC_ID_SXVIEW, 46 + maPTInfo.maTableName.Len() + maPTInfo.maDataName.Len() );
     rStrm << maPTInfo;
     rStrm.EndRecord();
+#endif // xlsx
 }
 
-void XclExpPivotTable::WriteSxivd( XclExpStream& rStrm, const ScfUInt16Vec& rFields ) const
+void XclExpPivotTable::WriteSxivd( XclExpStream& /*rStrm*/, const ScfUInt16Vec& /*rFields*/ ) const
 {
+#if 0 // xlsx
     if( !rFields.empty() )
     {
         rStrm.StartRecord( EXC_ID_SXIVD, rFields.size() * 2 );
@@ -1680,10 +1721,12 @@ void XclExpPivotTable::WriteSxivd( XclExpStream& rStrm, const ScfUInt16Vec& rFie
             rStrm << *aIt;
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
-void XclExpPivotTable::WriteSxpi( XclExpStream& rStrm ) const
+void XclExpPivotTable::WriteSxpi( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     if( !maPageFields.empty() )
     {
         rStrm.StartRecord( EXC_ID_SXPI, maPageFields.size() * 6 );
@@ -1696,20 +1739,24 @@ void XclExpPivotTable::WriteSxpi( XclExpStream& rStrm ) const
         }
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
-void XclExpPivotTable::WriteSxdiList( XclExpStream& rStrm ) const
+void XclExpPivotTable::WriteSxdiList( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     for( XclPTDataFieldPosVec::const_iterator aIt = maDataFields.begin(), aEnd = maDataFields.end(); aIt != aEnd; ++aIt )
     {
         XclExpPTFieldRef xField = maFieldList.GetRecord( aIt->first );
         if( xField.is() )
             xField->WriteSxdi( rStrm, aIt->second );
     }
+#endif // xlsx
 }
 
-void XclExpPivotTable::WriteSxli( XclExpStream& rStrm, sal_uInt16 nLineCount, sal_uInt16 nIndexCount ) const
+void XclExpPivotTable::WriteSxli( XclExpStream& /*rStrm*/, sal_uInt16 /*nLineCount*/, sal_uInt16 /*nIndexCount*/ ) const
 {
+#if 0 // xlsx
     if( nLineCount > 0 )
     {
         sal_uInt16 nLineSize = 8 + 2 * nIndexCount;
@@ -1730,17 +1777,21 @@ void XclExpPivotTable::WriteSxli( XclExpStream& rStrm, sal_uInt16 nLineCount, sa
         }
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
-void XclExpPivotTable::WriteSxex( XclExpStream& rStrm ) const
+void XclExpPivotTable::WriteSxex( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     rStrm.StartRecord( EXC_ID_SXEX, 24 );
     rStrm << maPTExtInfo;
     rStrm.EndRecord();
+#endif // xlsx
 }
 
-void XclExpPivotTable::WriteQsiSxTag( XclExpStream& rStrm ) const
+void XclExpPivotTable::WriteQsiSxTag( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     rStrm.StartRecord( 0x0802, 32 );
 
     sal_uInt16 nRecordType = 0x0802;
@@ -1791,10 +1842,12 @@ void XclExpPivotTable::WriteQsiSxTag( XclExpStream& rStrm ) const
     rStrm << static_cast<sal_uInt16>(0x0001); // no idea what this is for.
 
     rStrm.EndRecord();
+#endif // xlsx
 }
 
-void XclExpPivotTable::WriteSxViewEx9( XclExpStream& rStrm ) const
+void XclExpPivotTable::WriteSxViewEx9( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     // Until we sync the autoformat ids only export if using grid header layout
     // That could only have been set via xls import so far.
     if ( 0 == maPTViewEx9Info.mnGridLayout )
@@ -1803,6 +1856,7 @@ void XclExpPivotTable::WriteSxViewEx9( XclExpStream& rStrm ) const
         rStrm << maPTViewEx9Info;
         rStrm.EndRecord();
     }
+#endif // xlsx
 }
 
 // ============================================================================
@@ -1829,12 +1883,14 @@ XclExpPivotRecWrapper::XclExpPivotRecWrapper( XclExpPivotTableManager& rPTMgr, S
 {
 }
 
-void XclExpPivotRecWrapper::Save( XclExpStream& rStrm )
+void XclExpPivotRecWrapper::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( mnScTab == EXC_PTMGR_PIVOTCACHES )
         mrPTMgr.WritePivotCaches( rStrm );
     else
         mrPTMgr.WritePivotTables( rStrm, mnScTab );
+#endif // xlsx
 }
 
 void XclExpPivotRecWrapper::SaveXml( XclExpXmlStream& rStrm )
@@ -1874,9 +1930,11 @@ XclExpRecordRef XclExpPivotTableManager::CreatePivotTablesRecord( SCTAB nScTab )
     return XclExpRecordRef( new XclExpPivotRecWrapper( *this, nScTab ) );
 }
 
-void XclExpPivotTableManager::WritePivotCaches( XclExpStream& rStrm )
+void XclExpPivotTableManager::WritePivotCaches( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     maPCacheList.Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpPivotTableManager::WritePivotCachesXml( XclExpXmlStream& rStrm )
@@ -1892,14 +1950,16 @@ void XclExpPivotTableManager::WritePivotCachesXml( XclExpXmlStream& rStrm )
 #endif /* XLSX_PIVOT_CACHE */
 }
 
-void XclExpPivotTableManager::WritePivotTables( XclExpStream& rStrm, SCTAB nScTab )
+void XclExpPivotTableManager::WritePivotTables( XclExpStream& /*rStrm*/, SCTAB /*nScTab*/ )
 {
+#if 0 // xlsx
     for( size_t nPos = 0, nSize = maPTableList.GetSize(); nPos < nSize; ++nPos )
     {
         XclExpPivotTableRef xPTable = maPTableList.GetRecord( nPos );
         if( xPTable->GetScTab() == nScTab )
             xPTable->Save( rStrm );
     }
+#endif // xlsx
 }
 
 void XclExpPivotTableManager::WritePivotTablesXml( XclExpXmlStream& rStrm, SCTAB nScTab )
diff --git sc/source/filter/excel/xestream.cxx sc/source/filter/excel/xestream.cxx
index 91be79b..644d76e 100644
--- sc/source/filter/excel/xestream.cxx
+++ sc/source/filter/excel/xestream.cxx
@@ -820,8 +820,9 @@ static ScAddress lcl_ToAddress( const XclAddress& rAddress )
     // For some reason, ScRange::Format() returns omits row numbers if
     // the row is >= MAXROW or the column is >= MAXCOL, and Excel doesn't
     // like "A:IV" (i.e. no row numbers).  Prevent this.
-    aAddress.SetRow( std::min<sal_Int32>( rAddress.mnRow, MAXROW-1 ) );
-    aAddress.SetCol( static_cast<sal_Int16>(std::min<sal_Int32>( rAddress.mnCol, MAXCOL-1 )) );
+    // KOHEI: Find out if the above comment is still true.
+    aAddress.SetRow( std::min<sal_Int32>( rAddress.mnRow, MAXROW ) );
+    aAddress.SetCol( static_cast<sal_Int16>(std::min<sal_Int32>( rAddress.mnCol, MAXCOL )) );
 
     return aAddress;
 }
@@ -1135,6 +1136,11 @@ bool XclExpXmlStream::exportDocument() throw()
 
     XclExpRootData aData( EXC_BIFF8, *pShell->GetMedium (), rStorage, *pDoc, RTL_TEXTENCODING_DONTKNOW );
     aData.meOutput = EXC_OUTPUT_XML_2007;
+    aData.maXclMaxPos.Set( EXC_MAXCOL_XML_2007, EXC_MAXROW_XML_2007, EXC_MAXTAB_XML_2007 );
+    aData.maMaxPos.SetCol( ::std::min( aData.maScMaxPos.Col(), aData.maXclMaxPos.Col() ) );
+    aData.maMaxPos.SetRow( ::std::min( aData.maScMaxPos.Row(), aData.maXclMaxPos.Row() ) );
+    aData.maMaxPos.SetTab( ::std::min( aData.maScMaxPos.Tab(), aData.maXclMaxPos.Tab() ) );
+
     XclExpRoot aRoot( aData );
 
     mpRoot = &aRoot;
diff --git sc/source/filter/excel/xestyle.cxx sc/source/filter/excel/xestyle.cxx
index d3cecdc..3ce16a0 100644
--- sc/source/filter/excel/xestyle.cxx
+++ sc/source/filter/excel/xestyle.cxx
@@ -496,11 +496,13 @@ bool XclExpPaletteImpl::IsDefaultPalette() const
     return bDefault;
 }
 
-void XclExpPaletteImpl::WriteBody( XclExpStream& rStrm )
+void XclExpPaletteImpl::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << static_cast< sal_uInt16 >( maPalette.size() );
     for( XclPaletteColorVec::const_iterator aIt = maPalette.begin(), aEnd = maPalette.end(); aIt != aEnd; ++aIt )
         rStrm << aIt->maColor;
+#endif // xlsx
 }
 
 void XclExpPaletteImpl::SaveXml( XclExpXmlStream& rStrm )
@@ -803,10 +805,12 @@ ColorData XclExpPalette::GetColorData( sal_uInt16 nXclIndex ) const
     return mxImpl->GetColorData( nXclIndex );
 }
 
-void XclExpPalette::Save( XclExpStream& rStrm )
+void XclExpPalette::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( !mxImpl->IsDefaultPalette() )
         XclExpRecord::Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpPalette::SaveXml( XclExpXmlStream& rStrm )
@@ -815,9 +819,11 @@ void XclExpPalette::SaveXml( XclExpXmlStream& rStrm )
         mxImpl->SaveXml( rStrm );
 }
 
-void XclExpPalette::WriteBody( XclExpStream& rStrm )
+void XclExpPalette::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     mxImpl->WriteBody( rStrm );
+#endif // xlsx
 }
 
 // FONT record - font information =============================================
@@ -876,8 +882,9 @@ void XclExpFont::SaveXml( XclExpXmlStream& rStrm )
 
 // private --------------------------------------------------------------------
 
-void XclExpFont::WriteBody( XclExpStream& rStrm )
+void XclExpFont::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     sal_uInt16 nAttr = EXC_FONTATTR_NONE;
     ::set_flag( nAttr, EXC_FONTATTR_ITALIC, maData.mbItalic );
     ::set_flag( nAttr, EXC_FONTATTR_STRIKEOUT, maData.mbStrikeout );
@@ -901,6 +908,7 @@ void XclExpFont::WriteBody( XclExpStream& rStrm )
             << maData.mnCharSet
             << sal_uInt8( 0 )
             << aFontName;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1003,9 +1011,11 @@ sal_uInt16 XclExpFontBuffer::Insert( const ScPatternAttr& rPattern,
     return Insert( rPattern.GetItemSet(), nScript, eColorType, bAppFont );
 }
 
-void XclExpFontBuffer::Save( XclExpStream& rStrm )
+void XclExpFontBuffer::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     maFontList.Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpFontBuffer::SaveXml( XclExpXmlStream& rStrm )
@@ -1226,10 +1236,12 @@ sal_uInt16 XclExpNumFmtBuffer::Insert( ULONG nScNumFmt )
     return 0;
 }
 
-void XclExpNumFmtBuffer::Save( XclExpStream& rStrm )
+void XclExpNumFmtBuffer::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     for( XclExpNumFmtVec::const_iterator aIt = maFormatMap.begin(), aEnd = maFormatMap.end(); aIt != aEnd; ++aIt )
         WriteFormatRecord( rStrm, *aIt );
+#endif // xlsx
 }
 
 void XclExpNumFmtBuffer::SaveXml( XclExpXmlStream& rStrm )
@@ -1251,8 +1263,9 @@ void XclExpNumFmtBuffer::SaveXml( XclExpXmlStream& rStrm )
     rStyleSheet->endElement( XML_numFmts );
 }
 
-void XclExpNumFmtBuffer::WriteFormatRecord( XclExpStream& rStrm, sal_uInt16 nXclNumFmt, const String& rFormatStr )
+void XclExpNumFmtBuffer::WriteFormatRecord( XclExpStream& /*rStrm*/, sal_uInt16 /*nXclNumFmt*/, const String& /*rFormatStr*/ )
 {
+#if 0 // xlsx
     XclExpString aExpStr;
     if( GetBiff() <= EXC_BIFF5 )
         aExpStr.AssignByte( rFormatStr, GetTextEncoding(), EXC_STR_8BITLENGTH );
@@ -1262,11 +1275,14 @@ void XclExpNumFmtBuffer::WriteFormatRecord( XclExpStream& rStrm, sal_uInt16 nXcl
     rStrm.StartRecord( EXC_ID4_FORMAT, 2 + aExpStr.GetSize() );
     rStrm << nXclNumFmt << aExpStr;
     rStrm.EndRecord();
+#endif // xlsx
 }
 
-void XclExpNumFmtBuffer::WriteFormatRecord( XclExpStream& rStrm, const XclExpNumFmt& rFormat )
+void XclExpNumFmtBuffer::WriteFormatRecord( XclExpStream& /*rStrm*/, const XclExpNumFmt& /*rFormat*/ )
 {
+#if 0 // xlsx
     WriteFormatRecord( rStrm, rFormat.mnXclNumFmt, GetFormatCode( rFormat ) );
+#endif // xlsx
 }
 
 String XclExpNumFmtBuffer::GetFormatCode( const XclExpNumFmt& rFormat )
@@ -1990,8 +2006,9 @@ sal_uInt8 XclExpXF::GetUsedFlags() const
     return nUsedFlags;
 }
 
-void XclExpXF::WriteBody5( XclExpStream& rStrm )
+void XclExpXF::WriteBody5( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     sal_uInt16 nTypeProt = 0, nAlign = 0;
     sal_uInt32 nArea = 0, nBorder = 0;
 
@@ -2005,10 +2022,12 @@ void XclExpXF::WriteBody5( XclExpStream& rStrm )
     maArea.FillToXF5( nArea );
 
     rStrm << mnXclFont << mnXclNumFmt << nTypeProt << nAlign << nArea << nBorder;
+#endif // xlsx
 }
 
-void XclExpXF::WriteBody8( XclExpStream& rStrm )
+void XclExpXF::WriteBody8( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     sal_uInt16 nTypeProt = 0, nAlign = 0, nMiscAttrib = 0, nArea = 0;
     sal_uInt32 nBorder1 = 0, nBorder2 = 0;
 
@@ -2022,10 +2041,12 @@ void XclExpXF::WriteBody8( XclExpStream& rStrm )
     maArea.FillToXF8( nBorder2, nArea );
 
     rStrm << mnXclFont << mnXclNumFmt << nTypeProt << nAlign << nMiscAttrib << nBorder1 << nBorder2 << nArea;
+#endif // xlsx
 }
 
-void XclExpXF::WriteBody( XclExpStream& rStrm )
+void XclExpXF::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     XclExpXFId aParentId( mnParentXFId );
     aParentId.ConvertXFIndex( GetRoot() );
     mnParent = aParentId.mnXFIndex;
@@ -2035,6 +2056,7 @@ void XclExpXF::WriteBody( XclExpStream& rStrm )
         case EXC_BIFF8: WriteBody8( rStrm );    break;
         default:        DBG_ERROR_BIFF();
     }
+#endif // xlsx
 }
 
 void XclExpXF::SetXmlIds( sal_uInt32 nBorderId, sal_uInt32 nFillId )
@@ -2164,8 +2186,9 @@ XclExpStyle::XclExpStyle( sal_uInt32 nXFId, sal_uInt8 nStyleId, sal_uInt8 nLevel
 {
 }
 
-void XclExpStyle::WriteBody( XclExpStream& rStrm )
+void XclExpStyle::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     maXFId.ConvertXFIndex( rStrm.GetRoot() );
     ::set_flag( maXFId.mnXFIndex, EXC_STYLE_BUILTIN, IsBuiltIn() );
     rStrm << maXFId.mnXFIndex;
@@ -2183,6 +2206,7 @@ void XclExpStyle::WriteBody( XclExpStream& rStrm )
             aNameEx.AssignByte( maName, rStrm.GetRoot().GetTextEncoding(), EXC_STR_8BITLENGTH );
         rStrm << aNameEx;
     }
+#endif // xlsx
 }
 
 static const char* lcl_StyleNameFromId( sal_Int32 nStyleId )
@@ -2471,12 +2495,14 @@ sal_Int32 XclExpXFBuffer::GetXmlCellIndex( sal_uInt32 nXFIndex ) const
     return maCellIndexes[ nXFIndex ];
 }
 
-void XclExpXFBuffer::Save( XclExpStream& rStrm )
+void XclExpXFBuffer::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // save all XF records contained in the maSortedXFList vector (sorted by XF index)
     maSortedXFList.Save( rStrm );
     // save all STYLE records
     maStyleList.Save( rStrm );
+#endif // xlsx
 }
 
 static void lcl_GetCellCounts( const XclExpRecordList< XclExpXF >& rXFList, sal_Int32& rCells, sal_Int32& rStyles )
diff --git sc/source/filter/excel/xetable.cxx sc/source/filter/excel/xetable.cxx
index 9b73ef5..36de8e5 100644
--- sc/source/filter/excel/xetable.cxx
+++ sc/source/filter/excel/xetable.cxx
@@ -67,9 +67,11 @@ XclExpStringRec::XclExpStringRec( const XclExpRoot& rRoot, const String& rResult
     SetRecSize( mxResult->GetSize() );
 }
 
-void XclExpStringRec::WriteBody( XclExpStream& rStrm )
+void XclExpStringRec::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << *mxResult;
+#endif // xlsx
 }
 
 // Additional records for special formula ranges ==============================
@@ -98,7 +100,7 @@ XclExpRangeFmlaBase::XclExpRangeFmlaBase(
     maBaseXclPos = maXclRange.maFirst;
 }
 
-bool XclExpRangeFmlaBase::IsBasePos( sal_uInt16 nXclCol, sal_uInt16 nXclRow ) const
+bool XclExpRangeFmlaBase::IsBasePos( sal_uInt16 nXclCol, sal_uInt32 nXclRow ) const
 {
     return (maBaseXclPos.mnCol == nXclCol) && (maBaseXclPos.mnRow == nXclRow);
 }
@@ -106,16 +108,18 @@ bool XclExpRangeFmlaBase::IsBasePos( sal_uInt16 nXclCol, sal_uInt16 nXclRow ) co
 void XclExpRangeFmlaBase::Extend( const ScAddress& rScPos )
 {
     sal_uInt16 nXclCol = static_cast< sal_uInt16 >( rScPos.Col() );
-    sal_uInt16 nXclRow = static_cast< sal_uInt16 >( rScPos.Row() );
+    sal_uInt32 nXclRow = static_cast< sal_uInt32 >( rScPos.Row() );
     maXclRange.maFirst.mnCol = ::std::min( maXclRange.maFirst.mnCol, nXclCol );
     maXclRange.maFirst.mnRow = ::std::min( maXclRange.maFirst.mnRow, nXclRow );
     maXclRange.maLast.mnCol  = ::std::max( maXclRange.maLast.mnCol,  nXclCol );
     maXclRange.maLast.mnRow  = ::std::max( maXclRange.maLast.mnRow,  nXclRow );
 }
 
-void XclExpRangeFmlaBase::WriteRangeAddress( XclExpStream& rStrm ) const
+void XclExpRangeFmlaBase::WriteRangeAddress( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     maXclRange.Write( rStrm, false );
+#endif // xlsx
 }
 
 // Array formulas =============================================================
@@ -136,12 +140,14 @@ bool XclExpArray::IsVolatile() const
     return mxTokArr->IsVolatile();
 }
 
-void XclExpArray::WriteBody( XclExpStream& rStrm )
+void XclExpArray::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     WriteRangeAddress( rStrm );
     sal_uInt16 nFlags = EXC_ARRAY_DEFAULTFLAGS;
     ::set_flag( nFlags, EXC_ARRAY_RECALC_ALWAYS, IsVolatile() );
     rStrm << nFlags << sal_uInt32( 0 ) << *mxTokArr;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -206,10 +212,12 @@ bool XclExpShrfmla::IsVolatile() const
     return mxTokArr->IsVolatile();
 }
 
-void XclExpShrfmla::WriteBody( XclExpStream& rStrm )
+void XclExpShrfmla::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     WriteRangeAddress( rStrm );
     rStrm << sal_uInt8( 0 ) << mnUsedCount << *mxTokArr;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -367,10 +375,12 @@ bool XclExpTableop::IsVolatile() const
     return true;
 }
 
-void XclExpTableop::Save( XclExpStream& rStrm )
+void XclExpTableop::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( mbValid )
         XclExpRangeFmlaBase::Save( rStrm );
+#endif // xlsx
 }
 
 bool XclExpTableop::IsAppendable( sal_uInt16 nXclCol, sal_uInt16 nXclRow ) const
@@ -380,8 +390,9 @@ bool XclExpTableop::IsAppendable( sal_uInt16 nXclCol, sal_uInt16 nXclRow ) const
             ((mnLastAppXclCol == maXclRange.maLast.mnCol) && (nXclCol == maXclRange.maFirst.mnCol) && (nXclRow == maXclRange.maLast.mnRow + 1));
 }
 
-void XclExpTableop::WriteBody( XclExpStream& rStrm )
+void XclExpTableop::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     sal_uInt16 nFlags = EXC_TABLEOP_DEFAULTFLAGS;
     ::set_flag( nFlags, EXC_TABLEOP_RECALC_ALWAYS, IsVolatile() );
     switch( mnScMode )
@@ -396,6 +407,7 @@ void XclExpTableop::WriteBody( XclExpStream& rStrm )
         rStrm << mnRowInpXclRow << mnRowInpXclCol << mnColInpXclRow << mnColInpXclCol;
     else
         rStrm << mnColInpXclRow << mnColInpXclCol << sal_uInt32( 0 );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -559,17 +571,21 @@ void XclExpSingleCellBase::ConvertXFIndexes( const XclExpRoot& rRoot )
     maXFId.ConvertXFIndex( rRoot );
 }
 
-void XclExpSingleCellBase::Save( XclExpStream& rStrm )
+void XclExpSingleCellBase::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT_BIFF( rStrm.GetRoot().GetBiff() >= EXC_BIFF3 );
     AddRecSize( mnContSize );
     XclExpCellBase::Save( rStrm );
+#endif // xlsx
 }
 
-void XclExpSingleCellBase::WriteBody( XclExpStream& rStrm )
+void XclExpSingleCellBase::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << GetXclRow() << GetXclCol() << maXFId.mnXFIndex;
     WriteContents( rStrm );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -613,9 +629,11 @@ void XclExpNumberCell::SaveXml( XclExpXmlStream& rStrm )
     rWorksheet->endElement( XML_c );
 }
 
-void XclExpNumberCell::WriteContents( XclExpStream& rStrm )
+void XclExpNumberCell::WriteContents( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << mfValue;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -646,9 +664,11 @@ void XclExpBooleanCell::SaveXml( XclExpXmlStream& rStrm )
     rWorksheet->endElement( XML_c );
 }
 
-void XclExpBooleanCell::WriteContents( XclExpStream& rStrm )
+void XclExpBooleanCell::WriteContents( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << sal_uInt16( mbValue ? 1 : 0 ) << EXC_BOOLERR_BOOL;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -775,8 +795,9 @@ void XclExpLabelCell::SaveXml( XclExpXmlStream& rStrm )
     rWorksheet->endElement( XML_c );
 }
 
-void XclExpLabelCell::WriteContents( XclExpStream& rStrm )
+void XclExpLabelCell::WriteContents( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     switch( rStrm.GetRoot().GetBiff() )
     {
         case EXC_BIFF5:
@@ -792,6 +813,7 @@ void XclExpLabelCell::WriteContents( XclExpStream& rStrm )
         break;
         default:    DBG_ERROR_BIFF();
     }
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -898,8 +920,9 @@ XclExpFormulaCell::XclExpFormulaCell(
         mxTokArr = rRoot.GetFormulaCompiler().CreateFormula( EXC_FMLATYPE_CELL, rScTokArr, &aScPos );
 }
 
-void XclExpFormulaCell::Save( XclExpStream& rStrm )
+void XclExpFormulaCell::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // create token array for FORMULA cells with additional record
     if( mxAddRec.is() )
         mxTokArr = mxAddRec->CreateCellTokenArray( rStrm.GetRoot() );
@@ -918,6 +941,7 @@ void XclExpFormulaCell::Save( XclExpStream& rStrm )
     // STRING record for string result
     if( mxStringRec.is() )
         mxStringRec->Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpFormulaCell::SaveXml( XclExpXmlStream& rStrm )
@@ -967,8 +991,9 @@ void XclExpFormulaCell::SaveXml( XclExpXmlStream& rStrm )
     rWorksheet->endElement( XML_c );
 }
 
-void XclExpFormulaCell::WriteContents( XclExpStream& rStrm )
+void XclExpFormulaCell::WriteContents( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // result of the formula
     switch( mrScFmlaCell.GetFormatType() )
     {
@@ -1019,6 +1044,7 @@ void XclExpFormulaCell::WriteContents( XclExpStream& rStrm )
     ::set_flag( nFlags, EXC_FORMULA_RECALC_ALWAYS, mxTokArr->IsVolatile() || (mxAddRec.is() && mxAddRec->IsVolatile()) );
     ::set_flag( nFlags, EXC_FORMULA_SHARED, mxAddRec.is() && (mxAddRec->GetRecId() == EXC_ID_SHRFMLA) );
     rStrm << nFlags << sal_uInt32( 0 ) << *mxTokArr;
+#endif // xlsx
 }
 
 // Multiple cell records ======================================================
@@ -1052,8 +1078,9 @@ void XclExpMultiCellBase::ConvertXFIndexes( const XclExpRoot& rRoot )
         aIt->ConvertXFIndex( rRoot );
 }
 
-void XclExpMultiCellBase::Save( XclExpStream& rStrm )
+void XclExpMultiCellBase::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT_BIFF( rStrm.GetRoot().GetBiff() >= EXC_BIFF3 );
 
     XclExpMultiXFIdDeq::const_iterator aEnd = maXFIds.end();
@@ -1107,6 +1134,7 @@ void XclExpMultiCellBase::Save( XclExpStream& rStrm )
             rStrm.EndRecord();
         }
     }
+#endif // xlsx
 }
 
 void XclExpMultiCellBase::SaveXml( XclExpXmlStream& rStrm )
@@ -1321,10 +1349,12 @@ void XclExpRkCell::WriteXmlContents( XclExpXmlStream& rStrm, const XclAddress& r
     rWorksheet->endElement( XML_c );
 }
 
-void XclExpRkCell::WriteContents( XclExpStream& rStrm, sal_uInt16 nRelCol )
+void XclExpRkCell::WriteContents( XclExpStream& /*rStrm*/, sal_uInt16 /*nRelCol*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( nRelCol < maRkValues.size(), "XclExpRkCell::WriteContents - overflow error" );
     rStrm << maRkValues[ nRelCol ];
+#endif // xlsx
 }
 
 // ============================================================================
@@ -1421,9 +1451,11 @@ XclExpGuts::XclExpGuts( const XclExpRoot& rRoot ) :
     }
 }
 
-void XclExpGuts::WriteBody( XclExpStream& rStrm )
+void XclExpGuts::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm << mnRowWidth << mnColWidth << mnRowLevels << mnColLevels;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -1472,8 +1504,9 @@ void XclExpDimensions::SaveXml( XclExpXmlStream& rStrm )
             FSEND );
 }
 
-void XclExpDimensions::WriteBody( XclExpStream& rStrm )
+void XclExpDimensions::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     XclBiff eBiff = rStrm.GetRoot().GetBiff();
     if( eBiff == EXC_BIFF8 )
         rStrm << mnFirstUsedXclRow << mnFirstFreeXclRow;
@@ -1482,6 +1515,7 @@ void XclExpDimensions::WriteBody( XclExpStream& rStrm )
     rStrm << mnFirstUsedXclCol << mnFirstFreeXclCol;
     if( eBiff >= EXC_BIFF3 )
         rStrm << sal_uInt16( 0 );
+#endif // xlsx
 }
 
 // ============================================================================
@@ -1572,8 +1606,9 @@ bool XclExpColinfo::TryMerge( const XclExpColinfo& rColInfo )
     return false;
 }
 
-void XclExpColinfo::WriteBody( XclExpStream& rStrm )
+void XclExpColinfo::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // if last column is equal to last possible column, Excel adds one more
     sal_uInt16 nLastXclCol = mnLastXclCol;
     if( nLastXclCol == static_cast< sal_uInt16 >( rStrm.GetRoot().GetMaxPos().Col() ) )
@@ -1585,6 +1620,7 @@ void XclExpColinfo::WriteBody( XclExpStream& rStrm )
             << maXFId.mnXFIndex
             << mnFlags
             << sal_uInt16( 0 );
+#endif // xlsx
 }
 
 void XclExpColinfo::SaveXml( XclExpXmlStream& rStrm )
@@ -1684,12 +1720,14 @@ void XclExpColinfoBuffer::Finalize( ScfUInt16Vec& rXFIndexes )
     }
 }
 
-void XclExpColinfoBuffer::Save( XclExpStream& rStrm )
+void XclExpColinfoBuffer::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // DEFCOLWIDTH
     maDefcolwidth.Save( rStrm );
     // COLINFO records
     maColInfos.Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpColinfoBuffer::SaveXml( XclExpXmlStream& rStrm )
@@ -1738,15 +1776,17 @@ void XclExpDefrowheight::SetDefaultData( const XclExpDefaultRowData& rDefData )
     maDefData = rDefData;
 }
 
-void XclExpDefrowheight::WriteBody( XclExpStream& rStrm )
+void XclExpDefrowheight::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT_BIFF( rStrm.GetRoot().GetBiff() >= EXC_BIFF3 );
     rStrm << maDefData.mnFlags << maDefData.mnHeight;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
 
-XclExpRow::XclExpRow( const XclExpRoot& rRoot, sal_uInt16 nXclRow,
+XclExpRow::XclExpRow( const XclExpRoot& rRoot, sal_uInt32 nXclRow,
         XclExpRowOutlineBuffer& rOutlineBfr, bool bAlwaysEmpty ) :
     XclExpRecord( EXC_ID3_ROW, 16 ),
     XclExpRoot( rRoot ),
@@ -1968,16 +2008,20 @@ void XclExpRow::DisableIfDefault( const XclExpDefaultRowData& rDefRowData )
         (IsUnsynced() != rDefRowData.IsUnsynced());
 }
 
-void XclExpRow::WriteCellList( XclExpStream& rStrm )
+void XclExpRow::WriteCellList( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT( mbEnabled || maCellList.IsEmpty(), "XclExpRow::WriteCellList - cells in disabled row" );
     maCellList.Save( rStrm );
+#endif // xlsx
 }
 
-void XclExpRow::Save( XclExpStream& rStrm )
+void XclExpRow::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if( mbEnabled )
         XclExpRecord::Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpRow::InsertCell( XclExpCellRef xCell, size_t nPos, bool bIsMergedBase )
@@ -2004,8 +2048,9 @@ void XclExpRow::InsertCell( XclExpCellRef xCell, size_t nPos, bool bIsMergedBase
         maCellList.RemoveRecord( nPos );
 }
 
-void XclExpRow::WriteBody( XclExpStream& rStrm )
+void XclExpRow::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << mnXclRow
             << GetFirstUsedXclCol()
             << GetFirstFreeXclCol()
@@ -2013,6 +2058,7 @@ void XclExpRow::WriteBody( XclExpStream& rStrm )
             << sal_uInt32( 0 )
             << mnFlags
             << mnXFIndex;
+#endif // xlsx
 }
 
 void XclExpRow::SaveXml( XclExpXmlStream& rStrm )
@@ -2091,7 +2137,7 @@ void XclExpRowBuffer::Finalize( XclExpDefaultRowData& rDefRowData, const ScfUInt
         #i59220# Tolerance of +-128 rows for inserted/removed rows. */
     if( (nDefaultXclRow < 31872) || (nDefaultXclRow > 32128) )
     {
-        sal_uInt16 nLastXclRow = static_cast< sal_uInt16 >( GetMaxPos().Row() );
+        sal_uInt32 nLastXclRow = static_cast< sal_uInt32 >( GetMaxPos().Row() );
         if( nDefaultXclRow <= nLastXclRow )
         {
             // create a dummy ROW record and fill aMaxDefData
@@ -2153,7 +2199,7 @@ void XclExpRowBuffer::Finalize( XclExpDefaultRowData& rDefRowData, const ScfUInt
         // find used row range
         if( xRow->IsEnabled() )
         {
-            sal_uInt16 nXclRow = xRow->GetXclRow();
+            sal_uInt32 nXclRow = xRow->GetXclRow();
             nFirstUsedXclRow = ::std::min< sal_uInt32 >( nFirstUsedXclRow, nXclRow );
             nFirstFreeXclRow = ::std::max< sal_uInt32 >( nFirstFreeXclRow, nXclRow + 1 );
         }
@@ -2168,8 +2214,9 @@ void XclExpRowBuffer::Finalize( XclExpDefaultRowData& rDefRowData, const ScfUInt
         nFirstUsedXclCol, nFirstUsedXclRow, nFirstFreeXclCol, nFirstFreeXclRow );
 }
 
-void XclExpRowBuffer::Save( XclExpStream& rStrm )
+void XclExpRowBuffer::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // DIMENSIONS record
     maDimensions.Save( rStrm );
 
@@ -2197,6 +2244,7 @@ void XclExpRowBuffer::Save( XclExpStream& rStrm )
         nBlockStart = nBlockEnd;
         nStartXclRow += EXC_ROW_ROWBLOCKSIZE;
     }
+#endif // xlsx
 }
 
 void XclExpRowBuffer::SaveXml( XclExpXmlStream& rStrm )
@@ -2226,7 +2274,7 @@ XclExpDimensions* XclExpRowBuffer::GetDimensions()
     return &maDimensions;
 }
 
-XclExpRow& XclExpRowBuffer::GetOrCreateRow( sal_uInt16 nXclRow, bool bRowAlwaysEmpty )
+XclExpRow& XclExpRowBuffer::GetOrCreateRow( sal_uInt32 nXclRow, bool bRowAlwaysEmpty )
 {
     if( !mpLastUsedRow || (mnLastUsedXclRow != nXclRow) )
     {
@@ -2234,7 +2282,7 @@ XclExpRow& XclExpRowBuffer::GetOrCreateRow( sal_uInt16 nXclRow, bool bRowAlwaysE
         // do not use sal_uInt16 for nFirstFreeXclRow, would cause loop in full sheets
         for( size_t nFirstFreeXclRow = maRowList.GetSize(); nFirstFreeXclRow <= nXclRow; ++nFirstFreeXclRow )
             maRowList.AppendNewRecord( new XclExpRow(
-                GetRoot(), static_cast< sal_uInt16 >( nFirstFreeXclRow ), maOutlineBfr, bRowAlwaysEmpty ) );
+                GetRoot(), static_cast< sal_uInt32 >( nFirstFreeXclRow ), maOutlineBfr, bRowAlwaysEmpty ) );
 
         mpLastUsedRow = maRowList.GetRecord( nXclRow ).get();
         mnLastUsedXclRow = nXclRow;
@@ -2319,7 +2367,7 @@ XclExpCellTable::XclExpCellTable( const XclExpRoot& rRoot ) :
         SCCOL nLastScCol = aIt.GetEndCol();
         ScAddress aScPos( nScCol, nScRow, nScTab );
 
-        XclAddress aXclPos( static_cast< sal_uInt16 >( nScCol ), static_cast< sal_uInt16 >( nScRow ) );
+        XclAddress aXclPos( static_cast< sal_uInt16 >( nScCol ), static_cast< sal_uInt32 >( nScRow ) );
         sal_uInt16 nLastXclCol = static_cast< sal_uInt16 >( nLastScCol );
 
         const ScBaseCell* pScCell = aIt.GetCell();
@@ -2506,12 +2554,14 @@ XclExpRecordRef XclExpCellTable::CreateRecord( sal_uInt16 nRecId ) const
     return xRec;
 }
 
-void XclExpCellTable::Save( XclExpStream& rStrm )
+void XclExpCellTable::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     // DEFCOLWIDTH and COLINFOs
     maColInfoBfr.Save( rStrm );
     // ROWs and cell records
     maRowBfr.Save( rStrm );
+#endif // xlsx
 }
 
 void XclExpCellTable::SaveXml( XclExpXmlStream& rStrm )
diff --git sc/source/filter/excel/xeview.cxx sc/source/filter/excel/xeview.cxx
index d15634b..8b983a1 100644
--- sc/source/filter/excel/xeview.cxx
+++ sc/source/filter/excel/xeview.cxx
@@ -79,8 +79,9 @@ void XclExpWindow1::SaveXml( XclExpXmlStream& rStrm )
             FSEND );
 }
 
-void XclExpWindow1::WriteBody( XclExpStream& rStrm )
+void XclExpWindow1::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     const XclExpTabInfo& rTabInfo = rStrm.GetRoot().GetTabInfo();
 
     rStrm   << sal_uInt16( 0 )              // X position of the window
@@ -92,6 +93,7 @@ void XclExpWindow1::WriteBody( XclExpStream& rStrm )
             << rTabInfo.GetFirstVisXclTab()
             << rTabInfo.GetXclSelectedCount()
             << mnTabBarSize;
+#endif // xlsx
 }
 
 // Sheet view settings records ================================================
@@ -120,8 +122,9 @@ XclExpWindow2::XclExpWindow2( const XclExpRoot& rRoot,
     ::set_flag( mnFlags, EXC_WIN2_PAGEBREAKMODE,    rData.mbPageMode );
 }
 
-void XclExpWindow2::WriteBody( XclExpStream& rStrm )
+void XclExpWindow2::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     const XclExpRoot& rRoot = rStrm.GetRoot();
 
     rStrm   << mnFlags
@@ -143,6 +146,7 @@ void XclExpWindow2::WriteBody( XclExpStream& rStrm )
         break;
         default:    DBG_ERROR_BIFF();
     }
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -165,10 +169,12 @@ void XclExpScl::Shorten( sal_uInt16 nFactor )
     }
 }
 
-void XclExpScl::WriteBody( XclExpStream& rStrm )
+void XclExpScl::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     DBG_ASSERT_BIFF( rStrm.GetRoot().GetBiff() >= EXC_BIFF4 );
     rStrm << mnNum << mnDenom;
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -206,14 +212,16 @@ void XclExpPane::SaveXml( XclExpXmlStream& rStrm )
             FSEND );
 }
 
-void XclExpPane::WriteBody( XclExpStream& rStrm )
+void XclExpPane::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << mnSplitX
             << mnSplitY
             << maSecondXclPos
             << mnActivePane;
     if( rStrm.GetRoot().GetBiff() >= EXC_BIFF5 )
         rStrm << sal_uInt8( 0 );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -251,12 +259,14 @@ void XclExpSelection::SaveXml( XclExpXmlStream& rStrm )
             FSEND );
 }
 
-void XclExpSelection::WriteBody( XclExpStream& rStrm )
+void XclExpSelection::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     rStrm   << mnPane                   // pane for this selection
             << maSelData.maXclCursor    // cell cursor
             << maSelData.mnCursorIdx;   // index to range containing cursor
     maSelData.maXclSelection.Write( rStrm, false );
+#endif // xlsx
 }
 
 // ----------------------------------------------------------------------------
@@ -271,8 +281,9 @@ XclExpTabBgColor::XclExpTabBgColor( const XclTabViewData& rTabViewData ) :
 {
 }*/
 
-void XclExpTabBgColor::WriteBody( XclExpStream& rStrm )
+void XclExpTabBgColor::WriteBody( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     if ( mrTabViewData.IsDefaultTabBgColor() )
         return;
     sal_uInt16 rt = 0x0862; //rt
@@ -286,6 +297,7 @@ void XclExpTabBgColor::WriteBody( XclExpStream& rStrm )
     if (TabBgColorIndex < 8 || TabBgColorIndex > 63 ) // only numbers 8 - 63 are valid numbers
         TabBgColorIndex = 127; //Excel specs: 127 makes excel ignore tab color information.
     rStrm << rt << grbitFrt << unused << unused << cb << TabBgColorIndex << reserved;
+#endif // xlsx
 }
 
 // Sheet view settings ========================================================
@@ -355,7 +367,7 @@ XclExpTabViewSettings::XclExpTabViewSettings( const XclExpRoot& rRoot, SCTAB nSc
                 maData.mnSplitX = static_cast< sal_uInt16 >( nFreezeScCol ) - maData.maFirstXclPos.mnCol;
             SCROW nFreezeScRow = rTabSett.maFreezePos.Row();
             if( (0 < nFreezeScRow) && (nFreezeScRow <= GetXclMaxPos().Row()) )
-                maData.mnSplitY = static_cast< sal_uInt16 >( nFreezeScRow ) - maData.maFirstXclPos.mnRow;
+                maData.mnSplitY = static_cast< sal_uInt32 >( nFreezeScRow ) - maData.maFirstXclPos.mnRow;
             // if both splits are left out (address overflow), remove the frozen flag
             maData.mbFrozenPanes = maData.IsSplit();
 
@@ -408,8 +420,9 @@ XclExpTabViewSettings::XclExpTabViewSettings( const XclExpRoot& rRoot, SCTAB nSc
     }
 }
 
-void XclExpTabViewSettings::Save( XclExpStream& rStrm )
+void XclExpTabViewSettings::Save( XclExpStream& /*rStrm*/ )
 {
+#if 0 // xlsx
     WriteWindow2( rStrm );
     WriteScl( rStrm );
     WritePane( rStrm );
@@ -418,6 +431,7 @@ void XclExpTabViewSettings::Save( XclExpStream& rStrm )
     WriteSelection( rStrm, EXC_PANE_BOTTOMLEFT );
     WriteSelection( rStrm, EXC_PANE_BOTTOMRIGHT );
     WriteTabBgColor( rStrm );
+#endif // xlsx
 }
 
 static void lcl_WriteSelection( XclExpXmlStream& rStrm, const XclTabViewData& rData, sal_uInt8 nPane )
@@ -501,22 +515,27 @@ void XclExpTabViewSettings::CreateSelectionData( sal_uInt8 nPane,
     }
 }
 
-void XclExpTabViewSettings::WriteWindow2( XclExpStream& rStrm ) const
+void XclExpTabViewSettings::WriteWindow2( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
 //  #i43553# GCC 3.3 parse error
 //    XclExpWindow2( GetRoot(), maData, mnGridColorId ).Save( rStrm );
     XclExpWindow2 aWindow2( GetRoot(), maData, mnGridColorId );
     aWindow2.Save( rStrm );
+#endif // xlsx
 }
 
-void XclExpTabViewSettings::WriteScl( XclExpStream& rStrm ) const
+void XclExpTabViewSettings::WriteScl( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     if( maData.mnCurrentZoom != 0 )
         XclExpScl( maData.mnCurrentZoom ).Save( rStrm );
+#endif // xlsx
 }
 
-void XclExpTabViewSettings::WritePane( XclExpStream& rStrm ) const
+void XclExpTabViewSettings::WritePane( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     if( maData.IsSplit() )
 //  #i43553# GCC 3.3 parse error
 //        XclExpPane( GetRoot(), maData ).Save( rStrm );
@@ -524,18 +543,23 @@ void XclExpTabViewSettings::WritePane( XclExpStream& rStrm ) const
         XclExpPane aPane( maData );
         aPane.Save( rStrm );
     }
+#endif // xlsx
 }
 
-void XclExpTabViewSettings::WriteSelection( XclExpStream& rStrm, sal_uInt8 nPane ) const
+void XclExpTabViewSettings::WriteSelection( XclExpStream& /*rStrm*/, sal_uInt8 /*nPane*/ ) const
 {
+#if 0 // xlsx
     if( maData.HasPane( nPane ) )
         XclExpSelection( maData, nPane ).Save( rStrm );
+#endif // xlsx
 }
 
-void XclExpTabViewSettings::WriteTabBgColor( XclExpStream& rStrm ) const
+void XclExpTabViewSettings::WriteTabBgColor( XclExpStream& /*rStrm*/ ) const
 {
+#if 0 // xlsx
     if ( !maData.IsDefaultTabBgColor() )
         XclExpTabBgColor( maData ).Save( rStrm );
+#endif // xlsx
 }
 // ============================================================================
 
diff --git sc/source/filter/excel/xladdress.cxx sc/source/filter/excel/xladdress.cxx
index 290a7dc..ed5e051 100644
--- sc/source/filter/excel/xladdress.cxx
+++ sc/source/filter/excel/xladdress.cxx
#@@ -37,53 +37,12 @@
# 
# // ============================================================================
# 
#-void XclAddress::Read( XclImpStream& rStrm, bool bCol16Bit )
#-{
#-    rStrm >> mnRow;
#-    if( bCol16Bit )
#-        rStrm >> mnCol;
#-    else
#-        mnCol = rStrm.ReaduInt8();
#-}
#-
#-void XclAddress::Write( XclExpStream& rStrm, bool bCol16Bit ) const
#-{
#-    rStrm << mnRow;
#-    if( bCol16Bit )
#-        rStrm << mnCol;
#-    else
#-        rStrm << static_cast< sal_uInt8 >( mnCol );
#-}
#-
#-// ----------------------------------------------------------------------------
#-
# bool XclRange::Contains( const XclAddress& rPos ) const
# {
#     return  (maFirst.mnCol <= rPos.mnCol) && (rPos.mnCol <= maLast.mnCol) &&
#             (maFirst.mnRow <= rPos.mnRow) && (rPos.mnRow <= maLast.mnRow);
# }
# 
#-void XclRange::Read( XclImpStream& rStrm, bool bCol16Bit )
#-{
#-    rStrm >> maFirst.mnRow >> maLast.mnRow;
#-    if( bCol16Bit )
#-        rStrm >> maFirst.mnCol >> maLast.mnCol;
#-    else
#-    {
#-        maFirst.mnCol = rStrm.ReaduInt8();
#-        maLast.mnCol = rStrm.ReaduInt8();
#-    }
#-}
#-
#-void XclRange::Write( XclExpStream& rStrm, bool bCol16Bit ) const
#-{
#-    rStrm << maFirst.mnRow << maLast.mnRow;
#-    if( bCol16Bit )
#-        rStrm << maFirst.mnCol << maLast.mnCol;
#-    else
#-        rStrm << static_cast< sal_uInt8 >( maFirst.mnCol ) << static_cast< sal_uInt8 >( maLast.mnCol );
#-}
#-
# // ----------------------------------------------------------------------------
# 
# XclRange XclRangeList::GetEnclosingRange() const
#@@ -104,32 +63,6 @@ XclRange XclRangeList::GetEnclosingRange() const
#     return aXclRange;
# }
# 
#-void XclRangeList::Read( XclImpStream& rStrm, bool bCol16Bit )
#-{
#-    sal_uInt16 nCount;
#-    rStrm >> nCount;
#-    size_t nOldSize = size();
#-    resize( nOldSize + nCount );
#-    for( iterator aIt = begin() + nOldSize; rStrm.IsValid() && (nCount > 0); --nCount, ++aIt )
#-        aIt->Read( rStrm, bCol16Bit );
#-}
#-
#-void XclRangeList::Write( XclExpStream& rStrm, bool bCol16Bit ) const
#-{
#-    WriteSubList( rStrm, 0, size(), bCol16Bit );
#-}
#-
#-void XclRangeList::WriteSubList( XclExpStream& rStrm, size_t nBegin, size_t nCount, bool bCol16Bit ) const
#-{
#-    DBG_ASSERT( nBegin <= size(), "XclRangeList::WriteSubList - invalid start position" );
#-    size_t nEnd = ::std::min< size_t >( nBegin + nCount, size() );
#-    sal_uInt16 nXclCount = ulimit_cast< sal_uInt16 >( nEnd - nBegin );
#-    rStrm << nXclCount;
#-    rStrm.SetSliceSize( bCol16Bit ? 8 : 6 );
#-    for( const_iterator aIt = begin() + nBegin, aEnd = begin() + nEnd; aIt != aEnd; ++aIt )
#-        aIt->Write( rStrm, bCol16Bit );
#-}
#-
# // ============================================================================
# 
# XclAddressConverterBase::XclAddressConverterBase( XclTracer& rTracer, const ScAddress& rMaxPos ) :
@@ -142,7 +75,7 @@ XclAddressConverterBase::XclAddressConverterBase( XclTracer& rTracer, const ScAd
     mbTabTrunc( false )
 {
     DBG_ASSERT( static_cast< size_t >( rMaxPos.Col() ) <= SAL_MAX_UINT16, "XclAddressConverterBase::XclAddressConverterBase - invalid max column" );
-    DBG_ASSERT( static_cast< size_t >( rMaxPos.Row() ) <= SAL_MAX_UINT16, "XclAddressConverterBase::XclAddressConverterBase - invalid max row" );
+    DBG_ASSERT( static_cast< size_t >( rMaxPos.Row() ) <= SAL_MAX_UINT32, "XclAddressConverterBase::XclAddressConverterBase - invalid max row" );
 }
 
 XclAddressConverterBase::~XclAddressConverterBase()
diff --git sc/source/filter/excel/xlescher.cxx sc/source/filter/excel/xlescher.cxx
index 066eb57..9f5fc9b 100644
--- sc/source/filter/excel/xlescher.cxx
+++ sc/source/filter/excel/xlescher.cxx
@@ -138,7 +138,7 @@ void lclGetColFromX(
 /** Calculates an object row position from a drawing layer Y position (in twips). */
 void lclGetRowFromY(
         ScDocument& rDoc, SCTAB nScTab,
-        sal_uInt16& rnXclRow, sal_uInt16& rnOffset, sal_uInt16 nXclStartRow,
+        sal_uInt32& rnXclRow, sal_uInt16& rnOffset, sal_uInt16 nXclStartRow,
         long& rnStartH, long nY, double fScale )
 {
     // rnStartH in conjunction with nXclStartRow is used as buffer for previously calculated height
@@ -223,6 +223,7 @@ XclObjLineData::XclObjLineData() :
 {
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclObjLineData& rLineData )
 {
     return rStrm
@@ -231,6 +232,7 @@ XclImpStream& operator>>( XclImpStream& rStrm, XclObjLineData& rLineData )
         >> rLineData.mnWidth
         >> rLineData.mnAuto;
 }
+#endif // xlsx
 
 // ----------------------------------------------------------------------------
 
@@ -242,6 +244,7 @@ XclObjFillData::XclObjFillData() :
 {
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclObjFillData& rFillData )
 {
     return rStrm
@@ -250,6 +253,7 @@ XclImpStream& operator>>( XclImpStream& rStrm, XclObjFillData& rFillData )
         >> rFillData.mnPattern
         >> rFillData.mnAuto;
 }
+#endif // xlsx
 
 // ----------------------------------------------------------------------------
 
@@ -266,6 +270,7 @@ XclObjTextData::XclObjTextData() :
 {
 }
 
+#if 0 // xlsx
 void XclObjTextData::ReadObj3( XclImpStream& rStrm )
 {
     rStrm >> mnTextLen;
@@ -293,6 +298,7 @@ void XclObjTextData::ReadTxo8( XclImpStream& rStrm )
 {
     rStrm >> mnFlags >> mnOrient >> mnButtonFlags >> mnShortcut >> mnShortcutEA >> mnTextLen >> mnFormatSize;
 }
+#endif // xlsx
 
 // ============================================================================
 
diff --git sc/source/filter/excel/xlformula.cxx sc/source/filter/excel/xlformula.cxx
index b8c18eb..91cb2de 100644
--- sc/source/filter/excel/xlformula.cxx
+++ sc/source/filter/excel/xlformula.cxx
@@ -470,6 +470,7 @@ sal_uInt16 XclTokenArray::GetSize() const
     return limit_cast< sal_uInt16 >( maTokVec.size() );
 }
 
+#if 0 // xlsx
 void XclTokenArray::ReadSize( XclImpStream& rStrm )
 {
     sal_uInt16 nSize;
@@ -507,12 +508,14 @@ void XclTokenArray::Write( XclExpStream& rStrm ) const
     WriteSize( rStrm );
     WriteArray( rStrm );
 }
+#endif // xlsx
 
 bool XclTokenArray::operator==( const XclTokenArray& rTokArr ) const
 {
     return (mbVolatile == rTokArr.mbVolatile) && (maTokVec == rTokArr.maTokVec) && (maExtDataVec == rTokArr.maExtDataVec);
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclTokenArray& rTokArr )
 {
     rTokArr.Read( rStrm );
@@ -541,6 +544,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclTokenArrayRef& rxTokArr
         rStrm << sal_uInt16( 0 );
     return rStrm;
 }
+#endif // xlsx
 
 // ----------------------------------------------------------------------------
 
diff --git sc/source/filter/excel/xlpivot.cxx sc/source/filter/excel/xlpivot.cxx
index c915903..3704f40 100644
--- sc/source/filter/excel/xlpivot.cxx
+++ sc/source/filter/excel/xlpivot.cxx
@@ -178,6 +178,7 @@ XclPCFieldInfo::XclPCFieldInfo() :
 {
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPCFieldInfo& rInfo )
 {
     rStrm   >> rInfo.mnFlags
@@ -206,6 +207,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPCFieldInfo& rInfo )
         << rInfo.mnOrigItems
         << XclExpString( rInfo.maName );
 }
+#endif // xlsx
 
 // Numeric grouping field settings ============================================
 
@@ -264,6 +266,7 @@ void XclPCNumGroupInfo::SetXclDataType( sal_uInt16 nXclType )
     ::insert_value( mnFlags, nXclType, 2, 4 );
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPCNumGroupInfo& rInfo )
 {
     return rStrm >> rInfo.mnFlags;
@@ -273,6 +276,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPCNumGroupInfo& rInfo )
 {
     return rStrm << rInfo.mnFlags;
 }
+#endif // xlsx
 
 // Base class for pivot cache fields ==========================================
 
@@ -370,6 +374,7 @@ XclPCInfo::XclPCInfo() :
 {
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPCInfo& rInfo )
 {
     rStrm   >> rInfo.mnSrcRecs
@@ -397,6 +402,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPCInfo& rInfo )
         << rInfo.mnSrcType
         << XclExpString( rInfo.maUserName );
 }
+#endif // xlsx
 
 // ============================================================================
 // Pivot table
@@ -404,6 +410,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPCInfo& rInfo )
 
 // cached name ================================================================
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTCachedName& rCachedName )
 {
     sal_uInt16 nStrLen;
@@ -424,6 +431,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTCachedName& rCachedNam
         rStrm << XclExpString( rCachedName.maName, EXC_STR_DEFAULT, EXC_PT_MAXSTRLEN );
     return rStrm;
 }
+#endif // xlsx
 
 // ----------------------------------------------------------------------------
 
@@ -447,6 +455,7 @@ XclPTItemInfo::XclPTItemInfo() :
 {
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTItemInfo& rInfo )
 {
     return rStrm
@@ -464,6 +473,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTItemInfo& rInfo )
         << rInfo.mnCacheIdx
         << rInfo.maVisName;
 }
+#endif // xlsx
 
 // General field settings =====================================================
 
@@ -555,6 +565,7 @@ void XclPTFieldInfo::SetSubtotals( const XclPTSubtotalVec& rSubtotals )
             ++mnSubtCount;
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTFieldInfo& rInfo )
 {
     // rInfo.mnCacheIdx is not part of the SXVD record
@@ -576,6 +587,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTFieldInfo& rInfo )
         << rInfo.mnItemCount
         << rInfo.maVisName;
 }
+#endif // xlsx
 
 // Extended field settings ====================================================
 
@@ -640,6 +652,7 @@ void XclPTFieldExtInfo::SetApiLayoutMode( sal_Int32 nLayoutMode )
     ::set_flag( mnFlags, EXC_SXVDEX_LAYOUT_TOP, nLayoutMode == ScDPLayoutMode::OUTLINE_SUBTOTALS_TOP );
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTFieldExtInfo& rInfo )
 {
     sal_uInt8 nNameLen = 0;
@@ -681,6 +694,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTFieldExtInfo& rInfo )
     }
     return rStrm;
 }
+#endif // xlsx
 
 // Page field settings ========================================================
 
@@ -691,6 +705,7 @@ XclPTPageFieldInfo::XclPTPageFieldInfo() :
 {
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTPageFieldInfo& rInfo )
 {
     return rStrm
@@ -706,6 +721,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTPageFieldInfo& rInfo )
         << rInfo.mnSelItem
         << rInfo.mnObjId;
 }
+#endif // xlsx
 
 // Data field settings ========================================================
 
@@ -819,6 +835,7 @@ void XclPTDataFieldInfo::SetApiRefItemType( sal_Int32 nRefItemType )
     }
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTDataFieldInfo& rInfo )
 {
     return rStrm
@@ -842,6 +859,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTDataFieldInfo& rInfo )
         << rInfo.mnNumFmt
         << rInfo.maVisName;
 }
+#endif // xlsx
 
 // Pivot table settings =======================================================
 
@@ -862,6 +880,7 @@ XclPTInfo::XclPTInfo() :
 {
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTInfo& rInfo )
 {
     sal_uInt16 nTabLen, nDataLen;
@@ -908,6 +927,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTInfo& rInfo )
     aXclDataName.WriteBuffer( rStrm );
     return rStrm;
 }
+#endif // xlsx
 
 // Extended pivot table settings ==============================================
 
@@ -920,6 +940,7 @@ XclPTExtInfo::XclPTExtInfo() :
 {
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTExtInfo& rInfo )
 {
     rStrm >> rInfo.mnSxformulaRecs;
@@ -946,6 +967,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTExtInfo& rInfo )
         << EXC_PT_NOSTRING              // length of table style name
         << EXC_PT_NOSTRING;             // length of vacate style name
 }
+#endif // xlsx
 
 // ============================================================================
 
@@ -1010,6 +1032,7 @@ void XclPTViewEx9Info::Init( const ScDPObject& rDPObj )
     }
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclPTViewEx9Info& rInfo )
 {
     rStrm.Ignore( 2 );
@@ -1031,4 +1054,5 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclPTViewEx9Info& rInfo )
         << rInfo.mnGridLayout
         << XclExpString(rInfo.maGrandTotalName, EXC_STR_DEFAULT, EXC_PT_MAXSTRLEN);
 }
+#endif // xlsx
 
diff --git sc/source/filter/excel/xltools.cxx sc/source/filter/excel/xltools.cxx
index 6398e25..e4d9ae8 100644
--- sc/source/filter/excel/xltools.cxx
+++ sc/source/filter/excel/xltools.cxx
@@ -87,6 +87,7 @@ bool operator<( const XclGuid& rCmp1, const XclGuid& rCmp2 )
         rCmp2.mpnData, STATIC_TABLE_END( rCmp2.mpnData ) );
 }
 
+#if 0 // xlsx
 XclImpStream& operator>>( XclImpStream& rStrm, XclGuid& rGuid )
 {
     rStrm.Read( rGuid.mpnData, 16 );     // mpnData always in little endian
@@ -98,6 +99,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const XclGuid& rGuid )
     rStrm.Write( rGuid.mpnData, 16 );    // mpnData already in little endian
     return rStrm;
 }
+#endif // xlsx
 
 // Excel Tools ================================================================
 
@@ -663,6 +665,7 @@ bool XclTools::IsCondFormatStyleName( const String& rStyleName, xub_StrLen* pnNe
 
 // stream handling ------------------------------------------------------------
 
+#if 0 // xlsx
 void XclTools::SkipSubStream( XclImpStream& rStrm )
 {
     bool bLoop = true;
@@ -689,6 +692,7 @@ XclExpStream& operator<<( XclExpStream& rStrm, const Color& rColor )
 {
     return rStrm << rColor.GetRed() << rColor.GetGreen() << rColor.GetBlue() << sal_uInt8( 0 );
 }
+#endif // xlsx
 
 // ============================================================================
 
