--- ridljar/com/sun/star/uno/UnoRuntime.java.old	2009-09-25 00:39:01.000000000 +0200
+++ ridljar/com/sun/star/uno/UnoRuntime.java	2009-10-09 17:56:32.000000000 +0200
@@ -179,9 +179,8 @@ public class UnoRuntime {
      * otherwise <code>null</code>
      * @see #queryInterface(Type, Object)
      */
-    @SuppressWarnings("unchecked")
-    public static <T> T queryInterface(Class<T> zInterface, Object object) {
-        return (T) queryInterface(new Type(zInterface), object);
+    public static Object queryInterface(Class zInterface, Object object) {
+        return queryInterface(new Type(zInterface), object);
     }
 
     /**
--- jurt/com/sun/star/comp/urlresolver/UrlResolver.java.old	2009-09-25 00:39:01.000000000 +0200
+++ jurt/com/sun/star/comp/urlresolver/UrlResolver.java	2009-10-09 18:12:59.000000000 +0200
@@ -102,7 +102,7 @@ public class UrlResolver {
             Object rootObject = null;
             XBridgeFactory xBridgeFactory= null;
             try {
-                xBridgeFactory = UnoRuntime.queryInterface(XBridgeFactory.class, 
+                xBridgeFactory = (XBridgeFactory) UnoRuntime.queryInterface(XBridgeFactory.class, 
                                                                           _xMultiServiceFactory.createInstance("com.sun.star.bridge.BridgeFactory"));
             } catch (com.sun.star.uno.Exception e) {
                 throw new com.sun.star.uno.RuntimeException(e.getMessage());
@@ -117,7 +117,7 @@ public class UrlResolver {
                         throw new com.sun.star.uno.RuntimeException(e.getMessage());
                 }
                 
-                XConnector connector_xConnector = UnoRuntime.queryInterface(XConnector.class, connector);
+                XConnector connector_xConnector = (XConnector) UnoRuntime.queryInterface(XConnector.class, connector);
                 
                 // connect to the server
                 XConnection xConnection = connector_xConnector.connect(conDcp);
--- jurt/com/sun/star/comp/bridgefactory/BridgeFactory.java.old	2009-09-25 00:39:01.000000000 +0200
+++ jurt/com/sun/star/comp/bridgefactory/BridgeFactory.java	2009-10-09 18:17:02.000000000 +0200
@@ -134,7 +134,7 @@ public class BridgeFactory implements XB
         if (hasName) {
             IBridge iBridges[] = UnoRuntime.getBridges();
             for(int i = 0; i < iBridges.length; ++ i) {
-                XBridge xBridge = UnoRuntime.queryInterface(XBridge.class, iBridges[i]);
+                XBridge xBridge = (XBridge) UnoRuntime.queryInterface(XBridge.class, iBridges[i]);
 
                 if(xBridge != null) {
                     if(xBridge.getName().equals(sName))
@@ -148,7 +148,7 @@ public class BridgeFactory implements XB
         try {
             IBridge iBridge = UnoRuntime.getBridgeByName("java", context, "remote", context, hasName ? new Object[]{sProtocol, aConnection, anInstanceProvider, sName} : new Object[]{sProtocol, aConnection, anInstanceProvider});
 
-            xBridge = UnoRuntime.queryInterface(XBridge.class, iBridge);
+            xBridge = (XBridge) UnoRuntime.queryInterface(XBridge.class, iBridge);
         }
         catch(Exception exception) {
             throw new com.sun.star.lang.IllegalArgumentException(exception.getMessage());
@@ -171,7 +171,7 @@ public class BridgeFactory implements XB
 
         IBridge iBridges[] = UnoRuntime.getBridges();
         for(int i = 0; i < iBridges.length; ++ i) {
-            xBridge = UnoRuntime.queryInterface(XBridge.class, iBridges[i]);
+            xBridge = (XBridge) UnoRuntime.queryInterface(XBridge.class, iBridges[i]);
 
             if(xBridge != null) {
                 if(xBridge.getName().equals(sName))
@@ -199,7 +199,7 @@ public class BridgeFactory implements XB
 
         IBridge iBridges[] = UnoRuntime.getBridges();
         for(int i = 0; i < iBridges.length; ++ i) {
-            XBridge xBridge = UnoRuntime.queryInterface(XBridge.class, iBridges[i]);
+            XBridge xBridge = (XBridge) UnoRuntime.queryInterface(XBridge.class, iBridges[i]);
 
             if(xBridge != null)
                 vector.addElement(xBridge);
--- jurt/com/sun/star/comp/servicemanager/ServiceManager.java.old	2009-09-25 00:39:01.000000000 +0200
+++ jurt/com/sun/star/comp/servicemanager/ServiceManager.java	2009-10-09 18:15:43.000000000 +0200
@@ -158,7 +158,7 @@ public class ServiceManager implements X
         if (loaderObj == null)
             throw new com.sun.star.uno.Exception("Can get an instance of com.sun.star.loader.Java");
             
-        return UnoRuntime.queryInterface( XImplementationLoader.class, loaderObj );
+        return (XImplementationLoader) UnoRuntime.queryInterface( XImplementationLoader.class, loaderObj );
     }
 
     /**
@@ -335,7 +335,7 @@ public class ServiceManager implements X
         if (DEBUG) {
             if (factory == null) System.err.println("service not registered");
             else
-                System.err.println("service found:" + factory + " " + UnoRuntime.queryInterface(XSingleServiceFactory.class, factory));
+                System.err.println("service found:" + factory + " " + (XSingleServiceFactory) UnoRuntime.queryInterface(XSingleServiceFactory.class, factory));
         }
         
         if (factory == null) 
@@ -380,7 +380,7 @@ public class ServiceManager implements X
         Object fac = queryServiceFactory( rServiceSpecifier );
         if (fac != null)
         {
-            XSingleComponentFactory xCompFac = UnoRuntime.queryInterface(
+            XSingleComponentFactory xCompFac = (XSingleComponentFactory) UnoRuntime.queryInterface(
                 XSingleComponentFactory.class, fac );
             if (xCompFac != null)
             {
@@ -388,7 +388,7 @@ public class ServiceManager implements X
             }
             else
             {
-                XSingleServiceFactory xServiceFac = UnoRuntime.queryInterface(
+                XSingleServiceFactory xServiceFac = (XSingleServiceFactory) UnoRuntime.queryInterface(
                     XSingleServiceFactory.class, fac );
                 if (xServiceFac != null)
                 {
@@ -422,7 +422,7 @@ public class ServiceManager implements X
         Object fac = queryServiceFactory( rServiceSpecifier );
         if (fac != null)
         {
-            XSingleComponentFactory xCompFac = UnoRuntime.queryInterface(
+            XSingleComponentFactory xCompFac = (XSingleComponentFactory) UnoRuntime.queryInterface(
                 XSingleComponentFactory.class, fac );
             if (xCompFac != null)
             {
@@ -430,7 +430,7 @@ public class ServiceManager implements X
             }
             else
             {
-                XSingleServiceFactory xServiceFac = UnoRuntime.queryInterface(
+                XSingleServiceFactory xServiceFac = (XSingleServiceFactory) UnoRuntime.queryInterface(
                     XSingleServiceFactory.class, fac );
                 if (xServiceFac != null)
                 {
@@ -528,7 +528,7 @@ public class ServiceManager implements X
             if (object == null) 
                 throw new com.sun.star.uno.RuntimeException("The parameter must not been null");
             
-            XServiceInfo xServiceInfo = UnoRuntime.queryInterface(XServiceInfo.class, object);
+            XServiceInfo xServiceInfo = (XServiceInfo) UnoRuntime.queryInterface(XServiceInfo.class, object);
             
             if (xServiceInfo != null) {
                 return UnoRuntime.areSame(factoriesByImplNames.get(xServiceInfo.getImplementationName()), object);
@@ -552,7 +552,7 @@ public class ServiceManager implements X
         if (object == null) throw new com.sun.star.lang.IllegalArgumentException();
         
         XServiceInfo xServiceInfo = 
-                UnoRuntime.queryInterface(XServiceInfo.class, object);
+                (XServiceInfo) UnoRuntime.queryInterface(XServiceInfo.class, object);
         
         if (xServiceInfo == null) 
             throw new com.sun.star.lang.IllegalArgumentException(
@@ -606,7 +606,7 @@ public class ServiceManager implements X
             );
         
         XServiceInfo xServiceInfo = 
-            UnoRuntime.queryInterface(XServiceInfo.class, object);
+            (XServiceInfo) UnoRuntime.queryInterface(XServiceInfo.class, object);
         
         if (xServiceInfo == null)
             throw new com.sun.star.lang.IllegalArgumentException(
@@ -614,7 +614,7 @@ public class ServiceManager implements X
             );
         
         XSingleServiceFactory xSingleServiceFactory = 
-            UnoRuntime.queryInterface(XSingleServiceFactory.class, object);
+            (XSingleServiceFactory) UnoRuntime.queryInterface(XSingleServiceFactory.class, object);
         
         if (xSingleServiceFactory == null) 
             throw new com.sun.star.lang.IllegalArgumentException(
--- jurt/com/sun/star/comp/loader/JavaLoader.java.old	2009-09-25 00:39:01.000000000 +0200
+++ jurt/com/sun/star/comp/loader/JavaLoader.java	2009-10-09 18:18:03.000000000 +0200
@@ -103,7 +103,7 @@ public class JavaLoader implements XImpl
                 if (m_xMacroExpander == null)
                 {
                     XPropertySet xProps =
-                        UnoRuntime.queryInterface(
+                        (XPropertySet) UnoRuntime.queryInterface(
                             XPropertySet.class, multiServiceFactory );
                     if (xProps == null)
                     {
--- jurt/com/sun/star/comp/loader/FactoryHelper.java.old	2009-09-25 00:39:01.000000000 +0200
+++ jurt/com/sun/star/comp/loader/FactoryHelper.java	2009-10-09 18:12:19.000000000 +0200
@@ -174,7 +174,7 @@ public class FactoryHelper {
         {
             if (xContext != null)
             {
-                return UnoRuntime.queryInterface(
+                return (XMultiServiceFactory) UnoRuntime.queryInterface(
                     XMultiServiceFactory.class, xContext.getServiceManager() );
             }
             else
@@ -302,7 +302,7 @@ public class FactoryHelper {
                 Object instance = _constructor.newInstance( args );
                 if (bInitCall)
                 {
-                    XInitialization xInitialization = UnoRuntime.queryInterface(
+                    XInitialization xInitialization = (XInitialization) UnoRuntime.queryInterface(
                         XInitialization.class, instance );
                     if (xInitialization != null)
                     {
--- jurt/com/sun/star/uno/WeakReference.java.old	2009-09-25 00:39:01.000000000 +0200
+++ jurt/com/sun/star/uno/WeakReference.java	2009-10-09 18:09:30.000000000 +0200
@@ -61,7 +61,7 @@ public class WeakReference
             Object weakImpl= obj.get();
             if (weakImpl != null)
             {
-                XWeak weak= UnoRuntime.queryInterface(XWeak.class, weakImpl);
+                XWeak weak= (XWeak) UnoRuntime.queryInterface(XWeak.class, weakImpl);
                 if (weak != null)
                 {
                     XAdapter adapter= (XAdapter) weak.queryAdapter();
@@ -77,7 +77,7 @@ public class WeakReference
      */
     public WeakReference(Object obj)
     {
-        XWeak weak= UnoRuntime.queryInterface(XWeak.class, obj);
+        XWeak weak= (XWeak) UnoRuntime.queryInterface(XWeak.class, obj);
         if (weak != null)
         {
             XAdapter adapter= (XAdapter) weak.queryAdapter();
--- javaunohelper/com/sun/star/lib/uno/helper/Factory.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/lib/uno/helper/Factory.java	2009-10-09 18:45:41.000000000 +0200
@@ -210,7 +210,7 @@ public class Factory
         throws com.sun.star.uno.Exception
     {
         Object inst = instantiate( xContext );
-        XInitialization xInit = UnoRuntime.queryInterface(
+        XInitialization xInit = (XInitialization) UnoRuntime.queryInterface(
             XInitialization.class, inst );
         if (null == xInit)
         {
--- javaunohelper/com/sun/star/lib/uno/helper/PropertySet.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/lib/uno/helper/PropertySet.java	2009-10-09 18:45:02.000000000 +0200
@@ -671,7 +671,7 @@ XMultiPropertySet
                             // We try to get an XInterface of setVal and set an XInterface type.
                             if (setVal instanceof XInterface)   
                             {
-                                XInterface xint= UnoRuntime.queryInterface(XInterface.class, setVal);
+                                XInterface xint= (XInterface) UnoRuntime.queryInterface(XInterface.class, setVal);
                                 if (xint != null)
                                     convObj= new Any(new Type(XInterface.class), xint);
                             }
--- javaunohelper/com/sun/star/lib/uno/helper/PropertySetMixin.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/lib/uno/helper/PropertySetMixin.java	2009-10-09 19:01:30.000000000 +0200
@@ -143,13 +143,13 @@ public final class PropertySetMixin {
         idlClass = getReflection(type.getTypeName());
         XTypeDescription ifc;
         try {
-            ifc = UnoRuntime.queryInterface(
+            ifc = (XTypeDescription) UnoRuntime.queryInterface(
                 XTypeDescription.class,
-                (UnoRuntime.queryInterface(
-                    XHierarchicalNameAccess.class,
-                    context.getValueByName(
-                        "/singletons/com.sun.star.reflection."
-                        + "theTypeDescriptionManager")).
+                (((XHierarchicalNameAccess) UnoRuntime.queryInterface(
+                      XHierarchicalNameAccess.class,
+                      context.getValueByName(
+                          "/singletons/com.sun.star.reflection."
+                          + "theTypeDescriptionManager"))).
                  getByHierarchicalName(type.getTypeName())));
         } catch (NoSuchElementException e) {
             throw new RuntimeException(
@@ -585,7 +585,7 @@ public final class PropertySetMixin {
     private XIdlClass getReflection(String typeName) {
         XIdlReflection refl;
         try {
-            refl = UnoRuntime.queryInterface(
+            refl = (XIdlReflection) UnoRuntime.queryInterface(
                 XIdlReflection.class,
                 context.getServiceManager().createInstanceWithContext(
                     "com.sun.star.reflection.CoreReflection", context));
@@ -599,7 +599,8 @@ public final class PropertySetMixin {
         try {
             return refl.forName(typeName);
         } finally {
-            XComponent comp = UnoRuntime.queryInterface(XComponent.class, refl);
+            XComponent comp = (XComponent) UnoRuntime.queryInterface(
+                XComponent.class, refl);
             if (comp != null) {
                 comp.dispose();
             }
@@ -609,8 +610,9 @@ public final class PropertySetMixin {
     private void initProperties(
         XTypeDescription type, HashMap map, ArrayList handleNames, HashSet seen)
     {
-        XInterfaceTypeDescription2 ifc = UnoRuntime.queryInterface(
-            XInterfaceTypeDescription2.class, resolveTypedefs(type));
+        XInterfaceTypeDescription2 ifc = (XInterfaceTypeDescription2)
+            UnoRuntime.queryInterface(
+                XInterfaceTypeDescription2.class, resolveTypedefs(type));
         if (seen.add(ifc.getName())) {
             XTypeDescription[] bases = ifc.getBaseTypes();
             for (int i = 0; i < bases.length; ++i) {
@@ -620,10 +622,11 @@ public final class PropertySetMixin {
             for (int i = 0; i < members.length; ++i) {
                 if (members[i].getTypeClass() == TypeClass.INTERFACE_ATTRIBUTE)
                 {
-                    XInterfaceAttributeTypeDescription2 attr =
-                        UnoRuntime.queryInterface(
-                            XInterfaceAttributeTypeDescription2.class,
-                            members[i]);
+                    XInterfaceAttributeTypeDescription2 attr
+                        = ((XInterfaceAttributeTypeDescription2)
+                           UnoRuntime.queryInterface(
+                               XInterfaceAttributeTypeDescription2.class,
+                               members[i]));
                     short attrAttribs = 0;
                     if (attr.isBound()) {
                         attrAttribs |= PropertyAttribute.BOUND;
@@ -682,7 +685,7 @@ public final class PropertySetMixin {
                             break;
                         }
                         attrAttribs |= n;
-                        t = (UnoRuntime.queryInterface(
+                        t = ((XStructTypeDescription) UnoRuntime.queryInterface(
                                  XStructTypeDescription.class, t)).
                             getTypeArguments()[0];
                     }
@@ -744,14 +747,14 @@ public final class PropertySetMixin {
                 object, illegalArgumentPosition);
 
         }
-        XIdlField2 f = UnoRuntime.queryInterface(
+        XIdlField2 f = (XIdlField2) UnoRuntime.queryInterface(
             XIdlField2.class, idlClass.getField(name));
         Object[] o = new Object[] {
                 new Any(type, UnoRuntime.queryInterface(type, object)) };
         Object v = wrapValue(
             value,
-            UnoRuntime.queryInterface(
-                XIdlField2.class, idlClass.getField(name)).getType(),
+            ((XIdlField2) UnoRuntime.queryInterface(
+                XIdlField2.class, idlClass.getField(name))).getType(),
             (p.property.Attributes & PropertyAttribute.MAYBEAMBIGUOUS) != 0,
             isAmbiguous,
             (p.property.Attributes & PropertyAttribute.MAYBEDEFAULT) != 0,
@@ -804,7 +807,7 @@ public final class PropertySetMixin {
         if (p == null) {
             throw new UnknownPropertyException(name, object);
         }
-        XIdlField2 field = UnoRuntime.queryInterface(
+        XIdlField2 field = (XIdlField2) UnoRuntime.queryInterface(
             XIdlField2.class, idlClass.getField(name));
         Object value;
         try {
@@ -845,12 +848,12 @@ public final class PropertySetMixin {
                 XIdlClass ambiguous = getReflection(typeName);
                 try {
                     isAmbiguous = AnyConverter.toBoolean(
-                        UnoRuntime.queryInterface(
+                        ((XIdlField2) UnoRuntime.queryInterface(
                             XIdlField2.class,
-                            ambiguous.getField("IsAmbiguous")).get(value));
-                    value = UnoRuntime.queryInterface(
-                        XIdlField2.class,
-                        ambiguous.getField("Value")).get(value);
+                            ambiguous.getField("IsAmbiguous"))).get(value));
+                    value = ((XIdlField2) UnoRuntime.queryInterface(
+                                 XIdlField2.class,
+                                 ambiguous.getField("Value"))).get(value);
                 } catch (com.sun.star.lang.IllegalArgumentException e) {
                     throw new RuntimeException(
                         "unexpected"
@@ -864,12 +867,12 @@ public final class PropertySetMixin {
                 XIdlClass defaulted = getReflection(typeName);
                 try {
                     isDefaulted = AnyConverter.toBoolean(
-                        UnoRuntime.queryInterface(
+                        ((XIdlField2) UnoRuntime.queryInterface(
                             XIdlField2.class,
-                            defaulted.getField("IsDefaulted")).get(value));
-                    value = UnoRuntime.queryInterface(
-                        XIdlField2.class,
-                        defaulted.getField("Value")).get(value);
+                            defaulted.getField("IsDefaulted"))).get(value));
+                    value = ((XIdlField2) UnoRuntime.queryInterface(
+                                 XIdlField2.class,
+                                 defaulted.getField("Value"))).get(value);
                 } catch (com.sun.star.lang.IllegalArgumentException e) {
                     throw new RuntimeException(
                         "unexpected"
@@ -883,16 +886,16 @@ public final class PropertySetMixin {
                 XIdlClass optional = getReflection(typeName);
                 try {
                     boolean present = AnyConverter.toBoolean(
-                        UnoRuntime.queryInterface(
+                        ((XIdlField2) UnoRuntime.queryInterface(
                             XIdlField2.class,
-                            optional.getField("IsPresent")).get(value));
+                            optional.getField("IsPresent"))).get(value));
                     if (!present) {
                         value = Any.VOID;
                         break;
                     }
-                    value = UnoRuntime.queryInterface(
-                        XIdlField2.class,
-                        optional.getField("Value")).get(value);
+                    value = ((XIdlField2) UnoRuntime.queryInterface(
+                                 XIdlField2.class,
+                                 optional.getField("Value"))).get(value);
                 } catch (com.sun.star.lang.IllegalArgumentException e) {
                     throw new RuntimeException(
                         "unexpected"
@@ -929,15 +932,15 @@ public final class PropertySetMixin {
             Object[] strct = new Object[1];
             type.createObject(strct);
             try {
-                XIdlField2 field = UnoRuntime.queryInterface(
+                XIdlField2 field = (XIdlField2) UnoRuntime.queryInterface(
                     XIdlField2.class, type.getField("Value"));
                 field.set(
                     strct,
                     wrapValue(
                         value, field.getType(), false, false, wrapDefaulted,
                         isDefaulted, wrapOptional));
-                UnoRuntime.queryInterface(
-                    XIdlField2.class, type.getField("IsAmbiguous")).set(
+                ((XIdlField2) UnoRuntime.queryInterface(
+                    XIdlField2.class, type.getField("IsAmbiguous"))).set(
                         strct, new Boolean(isAmbiguous));
             } catch (com.sun.star.lang.IllegalArgumentException e) {
                 throw new RuntimeException(
@@ -956,15 +959,15 @@ public final class PropertySetMixin {
             Object[] strct = new Object[1];
             type.createObject(strct);
             try {
-                XIdlField2 field = UnoRuntime.queryInterface(
+                XIdlField2 field = (XIdlField2) UnoRuntime.queryInterface(
                     XIdlField2.class, type.getField("Value"));
                 field.set(
                     strct,
                     wrapValue(
                         value, field.getType(), wrapAmbiguous, isAmbiguous,
                         false, false, wrapOptional));
-                UnoRuntime.queryInterface(
-                    XIdlField2.class, type.getField("IsDefaulted")).set(
+                ((XIdlField2) UnoRuntime.queryInterface(
+                    XIdlField2.class, type.getField("IsDefaulted"))).set(
                         strct, new Boolean(isDefaulted));
             } catch (com.sun.star.lang.IllegalArgumentException e) {
                 throw new RuntimeException(
@@ -983,11 +986,11 @@ public final class PropertySetMixin {
             type.createObject(strct);
             boolean present = !AnyConverter.isVoid(value);
             try {
-                UnoRuntime.queryInterface(
-                    XIdlField2.class, type.getField("IsPresent")).set(
+                ((XIdlField2) UnoRuntime.queryInterface(
+                    XIdlField2.class, type.getField("IsPresent"))).set(
                         strct, new Boolean(present));
                 if (present) {
-                    XIdlField2 field = UnoRuntime.queryInterface(
+                    XIdlField2 field = (XIdlField2) UnoRuntime.queryInterface(
                         XIdlField2.class, type.getField("Value"));
                     field.set(
                         strct,
@@ -1015,8 +1018,9 @@ public final class PropertySetMixin {
 
     private static XTypeDescription resolveTypedefs(XTypeDescription type) {
         while (type.getTypeClass() == TypeClass.TYPEDEF) {
-            type = UnoRuntime.queryInterface(
-                XIndirectTypeDescription.class, type).getReferencedType();
+            type = ((XIndirectTypeDescription) UnoRuntime.queryInterface(
+                        XIndirectTypeDescription.class, type)).
+                getReferencedType();
         }
         return type;
     }
--- javaunohelper/com/sun/star/lib/uno/helper/InterfaceContainer.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/lib/uno/helper/InterfaceContainer.java	2009-10-09 18:45:19.000000000 +0200
@@ -715,7 +715,7 @@ public class InterfaceContainer implemen
                 try
                 {
                     Object o= aIt.next();
-                    XEventListener evtListener= UnoRuntime.queryInterface(
+                    XEventListener evtListener= (XEventListener) UnoRuntime.queryInterface(
                     XEventListener.class, o);
                     if( evtListener != null )
                         evtListener.disposing( evt );
--- javaunohelper/com/sun/star/comp/juhtest/SmoketestCommandEnvironment.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/comp/juhtest/SmoketestCommandEnvironment.java	2009-10-09 18:44:35.000000000 +0200
@@ -119,7 +119,7 @@ class InteractionImpl implements com.sun
             if (approve)
             {
                 com.sun.star.task.XInteractionApprove xApprove =
-                    UnoRuntime.queryInterface(com.sun.star.task.XInteractionApprove.class, conts[i]);
+                    (com.sun.star.task.XInteractionApprove) UnoRuntime.queryInterface(com.sun.star.task.XInteractionApprove.class, conts[i]);
                 if (xApprove != null)
                     xApprove.select();
                 //don't query again for ongoing extensions
@@ -128,7 +128,7 @@ class InteractionImpl implements com.sun
             else if (abort)
             {
                 com.sun.star.task.XInteractionAbort xAbort =
-                    UnoRuntime.queryInterface(com.sun.star.task.XInteractionAbort.class, conts[i]);
+                    (com.sun.star.task.XInteractionAbort) UnoRuntime.queryInterface(com.sun.star.task.XInteractionAbort.class, conts[i]);
                 if (xAbort != null)
                     xAbort.select();
                 //don't query again for ongoing extensions
--- javaunohelper/com/sun/star/comp/helper/RegistryServiceFactory.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/comp/helper/RegistryServiceFactory.java	2009-10-09 18:40:28.000000000 +0200
@@ -124,7 +124,7 @@ public class RegistryServiceFactory {
         Object obj = createRegistryServiceFactory(
             writeRegistryFile, readRegistryFile, readOnly,
             RegistryServiceFactory.class.getClassLoader() );
-        return UnoRuntime.queryInterface(
+        return (XMultiServiceFactory) UnoRuntime.queryInterface(
             XMultiServiceFactory.class, obj );	
     }
 
--- javaunohelper/com/sun/star/comp/helper/ComponentContext.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/comp/helper/ComponentContext.java	2009-10-09 18:41:44.000000000 +0200
@@ -101,7 +101,7 @@ public class ComponentContext implements
             {
                 o = ((ComponentContextEntry)o).m_value;
             }
-            m_xSMgr = UnoRuntime.queryInterface(
+            m_xSMgr = (XMultiComponentFactory) UnoRuntime.queryInterface(
                 XMultiComponentFactory.class, o );
         }
         if (m_xSMgr != null)
@@ -114,7 +114,7 @@ public class ComponentContext implements
         }
         
         // listen for delegate
-        XComponent xComp = UnoRuntime.queryInterface(
+        XComponent xComp = (XComponent) UnoRuntime.queryInterface(
             XComponent.class, m_xDelegate );
         if (xComp != null)
         {
@@ -154,7 +154,7 @@ public class ComponentContext implements
                         else
                         {
                             XSingleComponentFactory xCompFac =
-                                UnoRuntime.queryInterface(
+                                (XSingleComponentFactory) UnoRuntime.queryInterface(
                                     XSingleComponentFactory.class, entry.m_lateInit );
                             if (xCompFac != null)
                             {
@@ -185,7 +185,7 @@ public class ComponentContext implements
                             else // inited in the meantime
                             {
                                 // dispose fresh service instance
-                                XComponent xComp = UnoRuntime.queryInterface(
+                                XComponent xComp = (XComponent) UnoRuntime.queryInterface(
                                     XComponent.class, xInstance );
                                 if (xComp != null)
                                 {
@@ -253,7 +253,7 @@ public class ComponentContext implements
                     o = ((ComponentContextEntry)o).m_value;
                 }
                 
-                XComponent xComp = UnoRuntime.queryInterface( XComponent.class, o );
+                XComponent xComp = (XComponent) UnoRuntime.queryInterface( XComponent.class, o );
                 if (xComp != null)
                 {
                     if (name.equals( TDMGR_NAME ))
@@ -272,7 +272,7 @@ public class ComponentContext implements
         // smgr
         if (m_bDisposeSMgr)
         {
-            XComponent xComp = UnoRuntime.queryInterface(
+            XComponent xComp = (XComponent) UnoRuntime.queryInterface(
                 XComponent.class, m_xSMgr );
             if (xComp != null)
             {
--- javaunohelper/com/sun/star/comp/helper/SharedLibraryLoader.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/comp/helper/SharedLibraryLoader.java	2009-10-09 18:40:08.000000000 +0200
@@ -85,7 +85,7 @@ public class SharedLibraryLoader {
                 XMultiServiceFactory smgr, 
                 XRegistryKey regKey )
     {
-        return UnoRuntime.queryInterface(
+        return (XSingleServiceFactory) UnoRuntime.queryInterface(
                     XSingleServiceFactory.class, 
                     component_getFactory(
                         DEFAULT_LIBRARY, DEFAULT_IMPLEMENTATION, smgr, regKey,
@@ -110,7 +110,7 @@ public class SharedLibraryLoader {
                 XMultiServiceFactory smgr, 
                 XRegistryKey regKey )
     {
-        return UnoRuntime.queryInterface(
+        return (XSingleServiceFactory) UnoRuntime.queryInterface(
                     XSingleServiceFactory.class, 
                     component_getFactory(
                         libName, impName, smgr, regKey,
--- javaunohelper/com/sun/star/comp/helper/Bootstrap.java.old	2009-09-25 00:39:01.000000000 +0200
+++ javaunohelper/com/sun/star/comp/helper/Bootstrap.java	2009-10-09 18:43:54.000000000 +0200
@@ -108,20 +108,20 @@ public class Bootstrap {
     static public XComponentContext createInitialComponentContext( Hashtable context_entries )
         throws Exception
     {
-        XImplementationLoader xImpLoader = UnoRuntime.queryInterface(
+        XImplementationLoader xImpLoader = (XImplementationLoader) UnoRuntime.queryInterface(
             XImplementationLoader.class, new JavaLoader() );
         
         // Get the factory of the ServiceManager
-        XSingleComponentFactory smgr_fac = UnoRuntime.queryInterface(
+        XSingleComponentFactory smgr_fac = (XSingleComponentFactory) UnoRuntime.queryInterface(
             XSingleComponentFactory.class, xImpLoader.activate(
                 "com.sun.star.comp.servicemanager.ServiceManager", null, null, null ) );
         
         // Create an instance of the ServiceManager
-        XMultiComponentFactory xSMgr = UnoRuntime.queryInterface(
+        XMultiComponentFactory xSMgr = (XMultiComponentFactory) UnoRuntime.queryInterface(
             XMultiComponentFactory.class, smgr_fac.createInstanceWithContext( null ) );
         
         // post init loader
-        XInitialization xInit = UnoRuntime.queryInterface(
+        XInitialization xInit = (XInitialization) UnoRuntime.queryInterface(
             XInitialization.class, xImpLoader );
         Object[] args = new Object [] { xSMgr };
         xInit.initialize( args );
@@ -137,12 +137,12 @@ public class Bootstrap {
         XComponentContext xContext = new ComponentContext( context_entries, null );
         
         // post init smgr
-        xInit = UnoRuntime.queryInterface(
+        xInit = (XInitialization) UnoRuntime.queryInterface(
             XInitialization.class, xSMgr );
         args = new Object [] { null, xContext }; // no registry, default context
         xInit.initialize( args );
         
-        XSet xSet = UnoRuntime.queryInterface( XSet.class, xSMgr );
+        XSet xSet = (XSet) UnoRuntime.queryInterface( XSet.class, xSMgr );
         // insert the service manager
         xSet.insert( smgr_fac );
         // and basic jurt factories
@@ -159,7 +159,7 @@ public class Bootstrap {
      */
     static public XMultiServiceFactory createSimpleServiceManager() throws Exception
     {
-        return UnoRuntime.queryInterface(
+        return (XMultiServiceFactory) UnoRuntime.queryInterface(
             XMultiServiceFactory.class, createInitialComponentContext( null ).getServiceManager() );
     }
     
@@ -206,7 +206,7 @@ public class Bootstrap {
             NativeLibraryLoader.loadLibrary( Bootstrap.class.getClassLoader(), "juh" );
             m_loaded_juh = true;
         }
-        return UnoRuntime.queryInterface(
+        return (XComponentContext) UnoRuntime.queryInterface(
             XComponentContext.class,
             cppuhelper_bootstrap(
                 ini_file, pairs, Bootstrap.class.getClassLoader() ) );
@@ -283,7 +283,7 @@ public class Bootstrap {
                 try {
                     // try to connect to office
                     Object context = xUrlResolver.resolve( sConnect );
-                    xContext = UnoRuntime.queryInterface(
+                    xContext = (XComponentContext) UnoRuntime.queryInterface(
                         XComponentContext.class, context);
                     if ( xContext == null )
                         throw new BootstrapException( "no component context!" );
--- testtools/com/sun/star/comp/bridge/TestComponentMain.java.old	2009-09-25 00:39:01.000000000 +0200
+++ testtools/com/sun/star/comp/bridge/TestComponentMain.java	2009-10-09 20:30:26.000000000 +0200
@@ -105,10 +105,10 @@ public class TestComponentMain
         XComponentContext ctx = com.sun.star.comp.helper.Bootstrap.createInitialComponentContext( null );
         XMultiComponentFactory smgr = ctx.getServiceManager();
         XMultiServiceFactory oldsmgr =
-            UnoRuntime.queryInterface( XMultiServiceFactory.class, smgr );
+            (XMultiServiceFactory) UnoRuntime.queryInterface( XMultiServiceFactory.class, smgr );
 
         // prepare servicemanager
-        XSet set = UnoRuntime.queryInterface(XSet.class, smgr);
+        XSet set = (XSet) UnoRuntime.queryInterface(XSet.class, smgr);
         Object o = com.sun.star.comp.bridge.TestComponent.__getServiceFactory(
             "com.sun.star.comp.bridge.TestComponent$_TestObject", oldsmgr,null );
         set.insert(o);
@@ -121,7 +121,7 @@ public class TestComponentMain
 
             XConnection xConnection = xAcceptor.accept(conDcp);
             
-            XBridgeFactory xBridgeFactory = UnoRuntime.queryInterface(
+            XBridgeFactory xBridgeFactory = (XBridgeFactory) UnoRuntime.queryInterface(
                 XBridgeFactory.class,
                 smgr.createInstanceWithContext("com.sun.star.bridge.BridgeFactory",ctx));
             
@@ -130,7 +130,7 @@ public class TestComponentMain
 
             if (singleaccept) {
                 Listener listener = new Listener();
-                UnoRuntime.queryInterface(XComponent.class, xBridge).
+                ((XComponent) UnoRuntime.queryInterface(XComponent.class, xBridge)).
                     addEventListener(listener);
                 listener.await();
                 break;
