From 21069dc710c95f8453f8691e2d91775e4758e7ce Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:55:29 +0200
Subject: [PATCH 136/768] sc-overwrite-char-font-attrs.diff

---
 sc/inc/attarray.hxx              |   10 +++-
 sc/inc/cell.hxx                  |   51 ++++++++++++++++++++
 sc/inc/column.hxx                |    6 ++-
 sc/inc/document.hxx              |    9 +++-
 sc/inc/table.hxx                 |    6 ++-
 sc/source/core/data/attarray.cxx |   38 ++++++++++++++--
 sc/source/core/data/cell2.cxx    |   94 ++++++++++++++++++++++++++++++++++++++
 sc/source/core/data/column.cxx   |    9 ++--
 sc/source/core/data/documen2.cxx |    1 +
 sc/source/core/data/documen9.cxx |   10 ++++
 sc/source/core/data/document.cxx |   11 ++--
 sc/source/core/data/table2.cxx   |    9 ++--
 sc/source/ui/docshell/docsh.cxx  |   26 ++++++++++-
 sc/source/ui/inc/undoblk.hxx     |    7 +++
 sc/source/ui/inc/undocell.hxx    |   11 ++++-
 sc/source/ui/undo/undoblk3.cxx   |   26 ++++++++++
 sc/source/ui/undo/undocell.cxx   |   24 ++++++++--
 sc/source/ui/view/viewfunc.cxx   |   37 ++++++++++-----
 18 files changed, 341 insertions(+), 44 deletions(-)

diff --git sc/inc/attarray.hxx sc/inc/attarray.hxx
index 114cdbc..7d26451 100644
--- sc/inc/attarray.hxx
+++ sc/inc/attarray.hxx
@@ -32,6 +32,7 @@
 #include "attrib.hxx"
 
 class ScDocument;
+class ScEditDataArray;
 class ScMarkArray;
 class ScPatternAttr;
 class ScStyleSheet;
@@ -101,6 +102,9 @@ friend void lcl_IterGetNumberFormat( ULONG& nFormat,
                             SCROW nStartRow, SCROW nEndRow,
                             BOOL bLeft, SCCOL nDistRight, BOOL bTop, SCROW nDistBottom );
 
+    void RemoveCellCharAttribs( SCROW nStartRow, SCROW nEndRow,
+                              const ScPatternAttr* pPattern, ScEditDataArray* pDataArray );
+
 public:
             ScAttrArray( SCCOL nNewCol, SCTAB nNewTab, ScDocument* pDoc );
             ~ScAttrArray();
@@ -123,9 +127,11 @@ public:
                             SCROW nStartRow, SCROW nEndRow, BOOL bLeft, SCCOL nDistRight );
 
     void	SetPattern( SCROW nRow, const ScPatternAttr* pPattern, BOOL bPutToPool = FALSE );
-    void	SetPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr* pPattern, BOOL bPutToPool = FALSE);
+    void	SetPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr* pPattern,
+                            BOOL bPutToPool = FALSE, ScEditDataArray* pDataArray = NULL );
     void	ApplyStyleArea( SCROW nStartRow, SCROW nEndRow, ScStyleSheet* pStyle );
-    void	ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCache* pCache );
+    void	ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCache* pCache,
+                            ScEditDataArray* pDataArray = NULL );
     void	ApplyLineStyleArea( SCROW nStartRow, SCROW nEndRow,
                                 const SvxBorderLine* pLine, BOOL bColorOnly );
 
diff --git sc/inc/cell.hxx sc/inc/cell.hxx
index ac9e84b..c5f17a4 100644
--- sc/inc/cell.hxx
+++ sc/inc/cell.hxx
@@ -31,6 +31,9 @@
 #include <stddef.h>
 
 #include <set>
+#include <vector>
+#include <boost/shared_ptr.hpp>
+
 #include <tools/mempool.hxx>
 #include <svl/listener.hxx>
 #include "global.hxx"
@@ -56,6 +59,7 @@ class SvtBroadcaster;
 class ScCodeArray;
 class ScProgress;
 class ScPostIt;
+class ScPatternAttr;
 
 // ============================================================================
 
@@ -276,6 +280,53 @@ public:
     void			GetString( String& rString ) const;
 
     const EditTextObject* GetData() const	{ return pData; }
+
+    /** Removes character attribute based on new pattern attributes. */
+    void            RemoveCharAttribs( const ScPatternAttr& rAttr );
+};
+
+// ============================================================================
+
+class ScEditDataArray
+{
+public:
+    class Item
+    {
+    public:
+        explicit Item(SCTAB nTab, SCCOL nCol, SCROW nRow,
+                      EditTextObject* pOldData, EditTextObject* pNewData);
+        ~Item();
+
+        const EditTextObject* GetOldData() const;
+        const EditTextObject* GetNewData() const;
+        SCTAB GetTab() const;
+        SCCOL GetCol() const;
+        SCROW GetRow() const;
+
+    private:
+        Item(); // disabled
+
+    private:
+        ::boost::shared_ptr<EditTextObject> mpOldData;
+        ::boost::shared_ptr<EditTextObject> mpNewData;
+        SCTAB mnTab;
+        SCCOL mnCol;
+        SCROW mnRow;
+
+    };
+
+    ScEditDataArray();
+    ~ScEditDataArray();
+
+    void AddItem(SCTAB nTab, SCCOL nCol, SCROW nRow,
+                 EditTextObject* pOldData, EditTextObject* pNewData);
+
+    const Item* First();
+    const Item* Next();
+
+private:
+    ::std::vector<Item>::const_iterator maIter;
+    ::std::vector<Item> maArray;
 };
 
 // ============================================================================
diff --git sc/inc/column.hxx sc/inc/column.hxx
index 365d50f..f13345f 100644
--- sc/inc/column.hxx
+++ sc/inc/column.hxx
@@ -54,6 +54,7 @@ class ScAttrIterator;
 class ScAttrArray;
 class ScBaseCell;
 class ScDocument;
+class ScEditDataArray;
 class ScFormulaCell;
 class ScMarkData;
 class ScPatternAttr;
@@ -312,7 +313,8 @@ public:
 
     void		ApplyAttr( SCROW nRow, const SfxPoolItem& rAttr );
     void		ApplyPattern( SCROW nRow, const ScPatternAttr& rPatAttr );
-    void		ApplyPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr& rPatAttr );
+    void		ApplyPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr& rPatAttr,
+                                  ScEditDataArray* pDataArray = NULL );
     void		SetPattern( SCROW nRow, const ScPatternAttr& rPatAttr, BOOL bPutToPool = FALSE );
     void		SetPatternArea( SCROW nStartRow, SCROW nEndRow,
                                 const ScPatternAttr& rPatAttr, BOOL bPutToPool = FALSE );
@@ -344,7 +346,7 @@ public:
 
     void		RemoveProtected( SCROW nStartRow, SCROW nEndRow );
 
-    SCsROW		ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark );
+    SCsROW		ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark, ScEditDataArray* pDataArray = NULL );
     void        DeleteSelection( USHORT nDelFlag, const ScMarkData& rMark );
 
     void		ClearSelectionItems( const USHORT* pWhich, const ScMarkData& rMark );
diff --git sc/inc/document.hxx sc/inc/document.hxx
index d796790..86a4241 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -381,6 +381,7 @@ private:
     // kein Broadcast, keine Listener aufbauen waehrend aus einem anderen
     // Doc (per Filter o.ae.) inserted wird, erst bei CompileAll / CalcAfterLoad
     BOOL				bInsertingFromOtherDoc;
+    bool                bLoadingMedium;
     BOOL				bImportingXML;		// special handling of formula text
     BOOL                bXMLFromWrapper;    // distinguish ScXMLImportWrapper from external component
     BOOL				bCalcingAfterLoad;				// in CalcAfterLoad TRUE
@@ -1182,7 +1183,8 @@ public:
                                     const ScPatternAttr& rAttr );
     SC_DLLPUBLIC void			ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow,
                                         SCCOL nEndCol, SCROW nEndRow,
-                                        const ScMarkData& rMark, const ScPatternAttr& rAttr );
+                                        const ScMarkData& rMark, const ScPatternAttr& rAttr,
+                                        ScEditDataArray* pDataArray = NULL );
     SC_DLLPUBLIC void			ApplyPatternAreaTab( SCCOL nStartCol, SCROW nStartRow,
                                             SCCOL nEndCol, SCROW nEndRow, SCTAB nTab,
                                             const ScPatternAttr& rAttr );
@@ -1244,7 +1246,8 @@ public:
                             SCCOL nVCol, SCROW nVRow, SCTAB nVTab,
                             const String& sValStr, double& nX);
 
-    void			ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMarkData& rMark );
+    void			ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMarkData& rMark,
+                                           ScEditDataArray* pDataArray = NULL );
     void            DeleteSelection( USHORT nDelFlag, const ScMarkData& rMark );
     void			DeleteSelectionTab( SCTAB nTab, USHORT nDelFlag, const ScMarkData& rMark );
 
@@ -1494,6 +1497,8 @@ public:
     BOOL			GetNoSetDirty() const { return bNoSetDirty; }
     void			SetInsertingFromOtherDoc( BOOL bVal ) { bInsertingFromOtherDoc = bVal; }
     BOOL			IsInsertingFromOtherDoc() const { return bInsertingFromOtherDoc; }
+    void            SetLoadingMedium( bool bVal );
+    bool            IsLoadingMedium() const;
     void			SetImportingXML( BOOL bVal );
     BOOL			IsImportingXML() const { return bImportingXML; }
     void			SetXMLFromWrapper( BOOL bVal );
diff --git sc/inc/table.hxx sc/inc/table.hxx
index 9f44318..0fe45b0 100644
--- sc/inc/table.hxx
+++ sc/inc/table.hxx
@@ -56,6 +56,7 @@ class ScAutoFormatData;
 class ScBaseCell;
 class ScDocument;
 class ScDrawLayer;
+class ScEditDataArray;
 class ScFormulaCell;
 class ScOutlineTable;
 class ScPostIt;
@@ -501,7 +502,8 @@ public:
 
     void		ApplyAttr( SCCOL nCol, SCROW nRow, const SfxPoolItem& rAttr );
     void		ApplyPattern( SCCOL nCol, SCROW nRow, const ScPatternAttr& rAttr );
-    void		ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow, const ScPatternAttr& rAttr );
+    void		ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow,
+                                  const ScPatternAttr& rAttr, ScEditDataArray* pDataArray = NULL );
     void		SetPattern( const ScAddress& rPos, const ScPatternAttr& rAttr, BOOL bPutToPool = FALSE )
                     {
                         if (ValidColRow(rPos.Col(),rPos.Row()))
@@ -532,7 +534,7 @@ public:
     BOOL		ApplyFlags( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow, INT16 nFlags );
     BOOL		RemoveFlags( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow, INT16 nFlags );
 
-    void		ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark );
+    void		ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark, ScEditDataArray* pDataArray = NULL );
     void        DeleteSelection( USHORT nDelFlag, const ScMarkData& rMark );
 
     void		ClearSelectionItems( const USHORT* pWhich, const ScMarkData& rMark );
diff --git sc/source/core/data/attarray.cxx sc/source/core/data/attarray.cxx
index cd06dee..92a7f73 100644
--- sc/source/core/data/attarray.cxx
+++ sc/source/core/data/attarray.cxx
@@ -38,6 +38,7 @@
 #include <editeng/bolnitem.hxx>
 #include <editeng/frmdiritem.hxx>
 #include <editeng/shaditem.hxx>
+#include <editeng/editobj.hxx>
 #include <svl/poolcach.hxx>
 #include <editeng/fontitem.hxx>
 #include <unotools/fontcvt.hxx>
@@ -52,7 +53,7 @@
 #include "markarr.hxx"
 #include "rechead.hxx"
 #include "globstr.hrc"
-
+#include "cell.hxx"
 
 #undef DBG_INVALIDATE
 #define DBGOUTPUT(s) \
@@ -299,8 +300,31 @@ void ScAttrArray::SetPattern( SCROW nRow, const ScPatternAttr* pPattern, BOOL bP
     SetPatternArea( nRow, nRow, pPattern, bPutToPool );
 }
 
+void ScAttrArray::RemoveCellCharAttribs( SCROW nStartRow, SCROW nEndRow,
+                                       const ScPatternAttr* pPattern, ScEditDataArray* pDataArray )
+{
+    for (SCROW nRow = nStartRow; nRow <= nEndRow; ++nRow)
+    {
+        ScBaseCell* pCell;
+        pDocument->GetCell(nCol, nRow, nTab, pCell);
+        if (pCell && pCell->GetCellType() == CELLTYPE_EDIT)
+        {
+            EditTextObject* pOldData = NULL;
+            ScEditCell* pEditCell = static_cast<ScEditCell*>(pCell);
+            if (pDataArray)
+                pOldData = pEditCell->GetData()->Clone();
+            pEditCell->RemoveCharAttribs(*pPattern);
+            if (pDataArray)
+            {
+                EditTextObject* pNewData = pEditCell->GetData()->Clone();
+                pDataArray->AddItem(nTab, nCol, nRow, pOldData, pNewData);
+            }
+        }
+    }
+}
 
-void ScAttrArray::SetPatternArea(SCROW nStartRow, SCROW nEndRow, const ScPatternAttr *pPattern, BOOL bPutToPool )
+void ScAttrArray::SetPatternArea(SCROW nStartRow, SCROW nEndRow, const ScPatternAttr *pPattern,
+                                 BOOL bPutToPool, ScEditDataArray* pDataArray )
 {
     if (ValidRow(nStartRow) && ValidRow(nEndRow))
     {
@@ -470,6 +494,12 @@ void ScAttrArray::SetPatternArea(SCROW nStartRow, SCROW nEndRow, const ScPattern
                     pData[nInsert-1].nRow = nStartRow - 1;
                 pData[nInsert].nRow = nEndRow;
                 pData[nInsert].pPattern = pPattern;
+
+                // Remove character attributes from these cells if the pattern
+                // is applied during normal session.
+                if (pDataArray)
+                    RemoveCellCharAttribs(nStartRow, nEndRow, pPattern, pDataArray);
+
                 nCount++;
             }
 
@@ -711,7 +741,7 @@ void ScAttrArray::ApplyLineStyleArea( SCROW nStartRow, SCROW nEndRow,
 #undef SET_LINE
 
 
-void ScAttrArray::ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCache* pCache )
+void ScAttrArray::ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCache* pCache, ScEditDataArray* pDataArray )
 {
 #ifdef DBG_UTIL
     TestData();
@@ -746,7 +776,7 @@ void ScAttrArray::ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCac
                 {
                     if (nY1 < nStartRow) nY1=nStartRow;
                     if (nY2 > nEndRow) nY2=nEndRow;
-                    SetPatternArea( nY1, nY2, pNewPattern );
+                    SetPatternArea( nY1, nY2, pNewPattern, false, pDataArray );
                     Search( nStart, nPos );
                 }
                 else
diff --git sc/source/core/data/cell2.cxx sc/source/core/data/cell2.cxx
index 1ba95cf..8c4018b 100644
--- sc/source/core/data/cell2.cxx
+++ sc/source/core/data/cell2.cxx
@@ -51,6 +51,8 @@
 #include "editutil.hxx"
 #include "chgtrack.hxx"
 #include "externalrefmgr.hxx"
+#include "scitems.hxx"
+#include "patattr.hxx"
 
 using namespace formula;
 
@@ -139,6 +141,28 @@ void ScEditCell::GetString( String& rString ) const
         rString.Erase();
 }
 
+void ScEditCell::RemoveCharAttribs( const ScPatternAttr& rAttr )
+{
+    const struct {
+        USHORT nAttrType;
+        USHORT nCharType;
+    } AttrTypeMap[] = {
+        { ATTR_FONT,        EE_CHAR_FONTINFO },
+        { ATTR_FONT_HEIGHT, EE_CHAR_FONTHEIGHT },
+        { ATTR_FONT_WEIGHT, EE_CHAR_WEIGHT },
+        { ATTR_FONT_COLOR,  EE_CHAR_COLOR }
+    };
+    USHORT nMapCount = sizeof(AttrTypeMap) / sizeof(AttrTypeMap[0]);
+
+    const SfxItemSet& rSet = rAttr.GetItemSet();
+    const SfxPoolItem* pItem;
+    for (USHORT i = 0; i < nMapCount; ++i)
+    {
+        if ( rSet.GetItemState(AttrTypeMap[i].nAttrType, false, &pItem) == SFX_ITEM_SET )
+            pData->RemoveCharAttribs(AttrTypeMap[i].nCharType);
+    }
+}
+
 void ScEditCell::SetTextObject( const EditTextObject* pObject,
             const SfxItemPool* pFromPool )
 {
@@ -174,6 +198,76 @@ void ScEditCell::SetTextObject( const EditTextObject* pObject,
         pData = NULL;
 }
 
+ScEditDataArray::ScEditDataArray()
+{
+}
+
+ScEditDataArray::~ScEditDataArray()
+{
+}
+
+void ScEditDataArray::AddItem(SCTAB nTab, SCCOL nCol, SCROW nRow,
+                              EditTextObject* pOldData, EditTextObject* pNewData)
+{
+    maArray.push_back(Item(nTab, nCol, nRow, pOldData, pNewData));
+}
+
+const ScEditDataArray::Item* ScEditDataArray::First()
+{
+    maIter = maArray.begin();
+    if (maIter == maArray.end())
+        return NULL;
+    return &(*maIter++);
+}
+
+const ScEditDataArray::Item* ScEditDataArray::Next()
+{
+    if (maIter == maArray.end())
+        return NULL;
+    return &(*maIter++);
+}
+
+// ============================================================================
+
+ScEditDataArray::Item::Item(SCTAB nTab, SCCOL nCol, SCROW nRow,
+                            EditTextObject* pOldData, EditTextObject* pNewData) :
+    mnTab(nTab),
+    mnCol(nCol),
+    mnRow(nRow)
+{
+    mpOldData.reset(pOldData);
+    mpNewData.reset(pNewData);
+}
+
+ScEditDataArray::Item::~Item()
+{
+}
+
+const EditTextObject* ScEditDataArray::Item::GetOldData() const
+{
+    return mpOldData.get();
+}
+
+const EditTextObject* ScEditDataArray::Item::GetNewData() const
+{
+    return mpNewData.get();
+}
+
+SCTAB ScEditDataArray::Item::GetTab() const
+{
+    return mnTab;
+}
+
+SCCOL ScEditDataArray::Item::GetCol() const
+{
+    return mnCol;
+}
+
+SCROW ScEditDataArray::Item::GetRow() const
+{
+    return mnRow;
+}
+
 // ============================================================================
 
 namespace
diff --git sc/source/core/data/column.cxx sc/source/core/data/column.cxx
index 23e2e64..1a5e378 100644
--- sc/source/core/data/column.cxx
+++ sc/source/core/data/column.cxx
@@ -361,7 +361,7 @@ ULONG ScColumn::GetNumberFormat( SCROW nRow ) const
 }
 
 
-SCsROW ScColumn::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark )
+SCsROW ScColumn::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark, ScEditDataArray* pDataArray )
 {
     SCROW nTop = 0;
     SCROW nBottom = 0;
@@ -372,7 +372,7 @@ SCsROW ScColumn::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData
         ScMarkArrayIter aMarkIter( rMark.GetArray() + nCol );
         while (aMarkIter.Next( nTop, nBottom ))
         {
-            pAttrArray->ApplyCacheArea( nTop, nBottom, pCache );
+            pAttrArray->ApplyCacheArea( nTop, nBottom, pCache, pDataArray );
             bFound = TRUE;
         }
     }
@@ -446,11 +446,12 @@ void ScColumn::ApplyPattern( SCROW nRow, const ScPatternAttr& rPatAttr )
 }
 
 
-void ScColumn::ApplyPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr& rPatAttr )
+void ScColumn::ApplyPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr& rPatAttr,
+                                 ScEditDataArray* pDataArray )
 {
     const SfxItemSet* pSet = &rPatAttr.GetItemSet();
     SfxItemPoolCache aCache( pDocument->GetPool(), pSet );
-    pAttrArray->ApplyCacheArea( nStartRow, nEndRow, &aCache );
+    pAttrArray->ApplyCacheArea( nStartRow, nEndRow, &aCache, pDataArray );
 }
 
 
diff --git sc/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
index 15fbdd1..5b3cd8b 100644
--- sc/source/core/data/documen2.cxx
+++ sc/source/core/data/documen2.cxx
@@ -187,6 +187,7 @@ ScDocument::ScDocument( ScDocumentMode	eMode,
 //		bNoSetDirty( TRUE ),
         bNoSetDirty( FALSE ),
         bInsertingFromOtherDoc( FALSE ),
+        bLoadingMedium(false),
         bImportingXML( FALSE ),
         bXMLFromWrapper( FALSE ),
         bCalcingAfterLoad( FALSE ),
diff --git sc/source/core/data/documen9.cxx sc/source/core/data/documen9.cxx
index cda6b8b..91841db 100644
--- sc/source/core/data/documen9.cxx
+++ sc/source/core/data/documen9.cxx
@@ -722,6 +722,16 @@ void ScDocument::UpdateFontCharSet()
     }
 }
 
+void ScDocument::SetLoadingMedium( bool bVal )
+{
+    bLoadingMedium = bVal;
+}
+
+bool ScDocument::IsLoadingMedium() const
+{
+    return bLoadingMedium;
+}
+
 void ScDocument::SetImportingXML( BOOL bVal )
 {
     bImportingXML = bVal;
diff --git sc/source/core/data/document.cxx sc/source/core/data/document.cxx
index 75eed2b..46a1c97 100644
--- sc/source/core/data/document.cxx
+++ sc/source/core/data/document.cxx
@@ -3588,12 +3588,13 @@ void ScDocument::ApplyPattern( SCCOL nCol, SCROW nRow, SCTAB nTab, const ScPatte
 void ScDocument::ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow,
                         SCCOL nEndCol, SCROW nEndRow,
                         const ScMarkData& rMark,
-                        const ScPatternAttr& rAttr )
+                        const ScPatternAttr& rAttr,
+                        ScEditDataArray* pDataArray )
 {
     for (SCTAB i=0; i <= MAXTAB; i++)
         if (pTab[i])
             if (rMark.GetTableSelect(i))
-                pTab[i]->ApplyPatternArea( nStartCol, nStartRow, nEndCol, nEndRow, rAttr );
+                pTab[i]->ApplyPatternArea( nStartCol, nStartRow, nEndCol, nEndRow, rAttr, pDataArray );
 }
 
 
@@ -4528,7 +4529,7 @@ void ScDocument::ApplyFrameAreaTab( const ScRange& rRange,
 }
 
 
-void ScDocument::ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMarkData& rMark )
+void ScDocument::ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMarkData& rMark, ScEditDataArray* pDataArray )
 {
     const SfxItemSet* pSet = &rAttr.GetItemSet();
     BOOL bSet = FALSE;
@@ -4545,7 +4546,7 @@ void ScDocument::ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMark
             ScRange aRange;
             rMark.GetMarkArea( aRange );
             ApplyPatternArea( aRange.aStart.Col(), aRange.aStart.Row(),
-                              aRange.aEnd.Col(), aRange.aEnd.Row(), rMark, rAttr );
+                              aRange.aEnd.Col(), aRange.aEnd.Row(), rMark, rAttr, pDataArray );
         }
         else
         {
@@ -4553,7 +4554,7 @@ void ScDocument::ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMark
             for (SCTAB nTab=0; nTab<=MAXTAB; nTab++)
                 if (pTab[nTab])
                     if (rMark.GetTableSelect(nTab))
-                        pTab[nTab]->ApplySelectionCache( &aCache, rMark );
+                        pTab[nTab]->ApplySelectionCache( &aCache, rMark, pDataArray );
         }
     }
 }
diff --git sc/source/core/data/table2.cxx sc/source/core/data/table2.cxx
index 5ba73e0..3be0b94 100644
--- sc/source/core/data/table2.cxx
+++ sc/source/core/data/table2.cxx
@@ -1691,14 +1691,14 @@ void ScTable::ApplyPattern( SCCOL nCol, SCROW nRow, const ScPatternAttr& rAttr )
 
 
 void ScTable::ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow,
-                                     const ScPatternAttr& rAttr )
+                                     const ScPatternAttr& rAttr, ScEditDataArray* pDataArray )
 {
     if (ValidColRow(nStartCol, nStartRow) && ValidColRow(nEndCol, nEndRow))
     {
         PutInOrder(nStartCol, nEndCol);
         PutInOrder(nStartRow, nEndRow);
         for (SCCOL i = nStartCol; i <= nEndCol; i++)
-            aCol[i].ApplyPatternArea(nStartRow, nEndRow, rAttr);
+            aCol[i].ApplyPatternArea(nStartRow, nEndRow, rAttr, pDataArray);
     }
 }
 
@@ -1906,10 +1906,11 @@ void ScTable::ApplyAttr( SCCOL nCol, SCROW nRow, const SfxPoolItem& rAttr )
 }
 
 
-void ScTable::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark )
+void ScTable::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark,
+                                   ScEditDataArray* pDataArray )
 {
     for (SCCOL i=0; i<=MAXCOL; i++)
-        aCol[i].ApplySelectionCache( pCache, rMark );
+        aCol[i].ApplySelectionCache( pCache, rMark, pDataArray );
 }
 
 
diff --git sc/source/ui/docshell/docsh.cxx sc/source/ui/docshell/docsh.cxx
index 84985ca..3a3cdc2 100644
--- sc/source/ui/docshell/docsh.cxx
+++ sc/source/ui/docshell/docsh.cxx
@@ -448,10 +448,31 @@ BOOL ScDocShell::SaveXML( SfxMedium* pSaveMedium, const ::com::sun::star::uno::R
     return bRet;
 }
 
+namespace {
+
+class DocLoadChecker
+{
+public:
+    explicit DocLoadChecker(ScDocument* pDoc) :
+        mpDoc(pDoc)
+    {
+        mpDoc->SetLoadingMedium(true);
+    }
+
+    ~DocLoadChecker()
+    {
+        mpDoc->SetLoadingMedium(false);
+    }
+private:
+    ScDocument* mpDoc;
+};
+
+}
+
 BOOL __EXPORT ScDocShell::Load( SfxMedium& rMedium )
 {
     RTL_LOGFILE_CONTEXT_AUTHOR ( aLog, "sc", "nn93723", "ScDocShell::Load" );
-
+    DocLoadChecker aChecker(&aDocument);
     ScRefreshTimerProtector( aDocument.GetRefreshTimerControlAddress() );
 
     //	only the latin script language is loaded
@@ -795,7 +816,7 @@ void __EXPORT ScDocShell::Notify( SfxBroadcaster&, const SfxHint& rHint )
 BOOL __EXPORT ScDocShell::LoadFrom( SfxMedium& rMedium )
 {
     RTL_LOGFILE_CONTEXT_AUTHOR ( aLog, "sc", "nn93723", "ScDocShell::LoadFrom" );
-
+    DocLoadChecker aChecker(&aDocument);
     ScRefreshTimerProtector( aDocument.GetRefreshTimerControlAddress() );
 
     WaitObject aWait( GetActiveDialogParent() );
@@ -850,6 +871,7 @@ static void lcl_parseHtmlFilterOption(const OUString& rOption, LanguageType& rLa
 BOOL __EXPORT ScDocShell::ConvertFrom( SfxMedium& rMedium )
 {
     RTL_LOGFILE_CONTEXT_AUTHOR ( aLog, "sc", "nn93723", "ScDocShell::ConvertFrom" );
+    DocLoadChecker aChecker(&aDocument);
 
     BOOL bRet = FALSE;				// FALSE heisst Benutzerabbruch !!
                                     // bei Fehler: Fehler am Stream setzen!!
diff --git sc/source/ui/inc/undoblk.hxx sc/source/ui/inc/undoblk.hxx
index 350a416..f1aab93 100644
--- sc/source/ui/inc/undoblk.hxx
+++ sc/source/ui/inc/undoblk.hxx
@@ -32,6 +32,10 @@
 #include "viewutil.hxx"
 #include "spellparam.hxx"
 
+#include "cell.hxx"
+
+#include <boost/shared_ptr.hpp>
+
 class ScDocShell;
 class ScBaseCell;
 class ScDocument;
@@ -351,9 +355,11 @@ public:
 
     virtual String	GetComment() const;
 
+    ScEditDataArray*    GetDataArray();
 private:
     ScMarkData		aMarkData;
     ScRange			aRange;
+    ScEditDataArray aDataArray;
     ScDocument*		pUndoDoc;
     BOOL			bMulti;
     ScPatternAttr*	pApplyPattern;
@@ -361,6 +367,7 @@ private:
     SvxBoxInfoItem*	pLineInner;
 
     void			DoChange( const BOOL bUndo );
+    void            ChangeEditData( const bool bUndo );
 };
 
 
diff --git sc/source/ui/inc/undocell.hxx sc/source/ui/inc/undocell.hxx
index 8bded7d..5b95faf 100644
--- sc/source/ui/inc/undocell.hxx
+++ sc/source/ui/inc/undocell.hxx
@@ -31,6 +31,8 @@
 #include "undobase.hxx"
 #include "postit.hxx"
 
+#include <boost/shared_ptr.hpp>
+
 class ScDocShell;
 class ScBaseCell;
 class ScPatternAttr;
@@ -59,6 +61,11 @@ public:
 
     virtual String	GetComment() const;
 
+    /** once the objects are passed to this class, their life-cycle is
+        managed by this class; the calling function must pass new'ed
+        objects to this method. */
+    void            SetEditData( EditTextObject* pOld, EditTextObject* pNew );
+
 private:
     SCCOL			nCol;
     SCROW			nRow;
@@ -66,9 +73,11 @@ private:
     ScPatternAttr*	pOldPattern;
     ScPatternAttr*	pNewPattern;
     ScPatternAttr*	pApplyPattern;
+    ::boost::shared_ptr<EditTextObject> pOldEditData;
+    ::boost::shared_ptr<EditTextObject> pNewEditData;
     BOOL			bIsAutomatic;
 
-    void			DoChange( const ScPatternAttr* pWhichPattern ) const;
+    void			DoChange( const ScPatternAttr* pWhichPattern, const ::boost::shared_ptr<EditTextObject>& pEditData ) const;
 };
 
 
diff --git sc/source/ui/undo/undoblk3.cxx sc/source/ui/undo/undoblk3.cxx
index b08a614..3e4138d 100644
--- sc/source/ui/undo/undoblk3.cxx
+++ sc/source/ui/undo/undoblk3.cxx
@@ -479,6 +479,12 @@ String __EXPORT ScUndoSelectionAttr::GetComment() const
     return ScGlobal::GetRscString( pLineOuter ? STR_UNDO_SELATTRLINES : STR_UNDO_SELATTR );
 }
 
+//----------------------------------------------------------------------------
+
+ScEditDataArray* ScUndoSelectionAttr::GetDataArray()
+{
+    return &aDataArray;
+}
 
 //----------------------------------------------------------------------------
 
@@ -497,6 +503,8 @@ void ScUndoSelectionAttr::DoChange( const BOOL bUndo )
     USHORT nExtFlags = 0;
     pDocShell->UpdatePaintExt( nExtFlags, aEffRange );
 
+    ChangeEditData(bUndo);
+
     if (bUndo)	// nur bei Undo
     {
         ScRange aCopyRange = aRange;
@@ -521,6 +529,24 @@ void ScUndoSelectionAttr::DoChange( const BOOL bUndo )
     ShowTable( aRange );
 }
 
+void ScUndoSelectionAttr::ChangeEditData( const bool bUndo )
+{
+    ScDocument* pDoc = pDocShell->GetDocument();
+    for (const ScEditDataArray::Item* pItem = aDataArray.First(); pItem; pItem = aDataArray.Next())
+    {
+        ScBaseCell* pCell;
+        pDoc->GetCell(pItem->GetCol(), pItem->GetRow(), pItem->GetTab(), pCell);
+        if (!pCell || pCell->GetCellType() != CELLTYPE_EDIT)
+            continue;
+
+        ScEditCell* pEditCell = static_cast<ScEditCell*>(pCell);
+        if (bUndo)
+            pEditCell->SetData(pItem->GetOldData(), NULL);
+        else
+            pEditCell->SetData(pItem->GetNewData(), NULL);
+    }
+}
+
 
 //----------------------------------------------------------------------------
 
diff --git sc/source/ui/undo/undocell.cxx sc/source/ui/undo/undocell.cxx
index f433df5..d2260b9 100644
--- sc/source/ui/undo/undocell.cxx
+++ sc/source/ui/undo/undocell.cxx
@@ -54,6 +54,8 @@
 #include "sc.hrc"
 #include "docuno.hxx"
 
+using ::boost::shared_ptr;
+
 // STATIC DATA -----------------------------------------------------------
 
 TYPEINIT1(ScUndoCursorAttr, ScSimpleUndo);
@@ -82,6 +84,8 @@ ScUndoCursorAttr::ScUndoCursorAttr( ScDocShell* pNewDocShell,
     nCol( nNewCol ),
     nRow( nNewRow ),
     nTab( nNewTab ),
+    pOldEditData( static_cast<EditTextObject*>(NULL) ),
+    pNewEditData( static_cast<EditTextObject*>(NULL) ),
     bIsAutomatic( bAutomatic )
 {
     ScDocumentPool* pPool = pDocShell->GetDocument()->GetPool();
@@ -106,9 +110,21 @@ String __EXPORT ScUndoCursorAttr::GetComment() const
     return ScGlobal::GetRscString( nId );
 }
 
-void ScUndoCursorAttr::DoChange( const ScPatternAttr* pWhichPattern ) const
+void ScUndoCursorAttr::SetEditData( EditTextObject* pOld, EditTextObject* pNew )
+{
+    pOldEditData.reset(pOld);
+    pNewEditData.reset(pNew);
+}
+
+void ScUndoCursorAttr::DoChange( const ScPatternAttr* pWhichPattern, const shared_ptr<EditTextObject>& pEditData ) const
 {
-    pDocShell->GetDocument()->SetPattern( nCol, nRow, nTab, *pWhichPattern, TRUE );
+    ScDocument* pDoc = pDocShell->GetDocument();
+    pDoc->SetPattern( nCol, nRow, nTab, *pWhichPattern, TRUE );
+
+    ScBaseCell* pCell;
+    pDoc->GetCell(nCol, nRow, nTab, pCell);
+    if (pCell && pCell->GetCellType() == CELLTYPE_EDIT && pEditData.get())
+        static_cast<ScEditCell*>(pCell)->SetData(pEditData.get(), NULL);
 
     ScTabViewShell* pViewShell = ScTabViewShell::GetActiveViewShell();
     if (pViewShell)
@@ -134,7 +150,7 @@ void ScUndoCursorAttr::DoChange( const ScPatternAttr* pWhichPattern ) const
 void __EXPORT ScUndoCursorAttr::Undo()
 {
     BeginUndo();
-    DoChange(pOldPattern);
+    DoChange(pOldPattern, pOldEditData);
 
     if ( bIsAutomatic )
     {
@@ -152,7 +168,7 @@ void __EXPORT ScUndoCursorAttr::Undo()
 void __EXPORT ScUndoCursorAttr::Redo()
 {
     BeginRedo();
-    DoChange(pNewPattern);
+    DoChange(pNewPattern, pNewEditData);
     EndRedo();
 }
 
diff --git sc/source/ui/view/viewfunc.cxx sc/source/ui/view/viewfunc.cxx
index 5997635..f4a0d56 100644
--- sc/source/ui/view/viewfunc.cxx
+++ sc/source/ui/view/viewfunc.cxx
@@ -1313,6 +1313,8 @@ void ScViewFunc::ApplySelectionPattern( const ScPatternAttr& rAttr,
         SCROW nEndRow = aMarkRange.aEnd.Row();
         SCTAB nEndTab = aMarkRange.aEnd.Tab();
 
+        ScUndoSelectionAttr* pUndoAttr = NULL;
+        ScEditDataArray* pEditDataArray = NULL;
         if (bRecord)
         {
             ScRange aCopyRange = aMarkRange;
@@ -1328,15 +1330,14 @@ void ScViewFunc::ApplySelectionPattern( const ScPatternAttr& rAttr,
 
             aFuncMark.MarkToMulti();
 
-            pDocSh->GetUndoManager()->AddUndoAction(
-                new ScUndoSelectionAttr(
-                            pDocSh, aFuncMark,
-                            nStartCol, nStartRow, nStartTab,
-                            nEndCol, nEndRow, nEndTab,
-                            pUndoDoc, bMulti, &rAttr ) );
+            pUndoAttr = new ScUndoSelectionAttr(
+                pDocSh, aFuncMark, nStartCol, nStartRow, nStartTab,
+                nEndCol, nEndRow, nEndTab, pUndoDoc, bMulti, &rAttr );
+            pDocSh->GetUndoManager()->AddUndoAction(pUndoAttr);
+            pEditDataArray = pUndoAttr->GetDataArray();
         }
 
-        pDoc->ApplySelectionPattern( rAttr, aFuncMark );
+        pDoc->ApplySelectionPattern( rAttr, aFuncMark, pEditDataArray );
 
         pDocSh->PostPaint( nStartCol, nStartRow, nStartTab,
                            nEndCol,   nEndRow,   nEndTab,
@@ -1350,6 +1351,19 @@ void ScViewFunc::ApplySelectionPattern( const ScPatternAttr& rAttr,
         SCCOL nCol = pViewData->GetCurX();
         SCROW nRow = pViewData->GetCurY();
         SCTAB nTab = pViewData->GetTabNo();
+
+        ScBaseCell* pCell;
+        pDoc->GetCell(nCol, nRow, nTab, pCell);
+        EditTextObject* pOldEditData = NULL;
+        EditTextObject* pNewEditData = NULL;
+        if (pCell && pCell->GetCellType() == CELLTYPE_EDIT)
+        {
+            ScEditCell* pEditCell = static_cast<ScEditCell*>(pCell);
+            pOldEditData = pEditCell->GetData()->Clone();
+            pEditCell->RemoveCharAttribs(rAttr);
+            pNewEditData = pEditCell->GetData()->Clone();
+        }
+
         aChangeRanges.Append( ScRange( nCol, nRow, nTab ) );
         ScPatternAttr* pOldPat = new ScPatternAttr(*pDoc->GetPattern( nCol, nRow, nTab ));
 
@@ -1359,11 +1373,10 @@ void ScViewFunc::ApplySelectionPattern( const ScPatternAttr& rAttr,
 
         if (bRecord)
         {
-            pDocSh->GetUndoManager()->AddUndoAction(
-                        new ScUndoCursorAttr( pDocSh,
-                                              nCol, nRow, nTab,
-                                              pOldPat, pNewPat, &rAttr,
-                                              FALSE ) );	// FALSE = nicht automatisch
+            ScUndoCursorAttr* pUndo = new ScUndoCursorAttr(
+                pDocSh, nCol, nRow, nTab, pOldPat, pNewPat, &rAttr, false );
+            pUndo->SetEditData(pOldEditData, pNewEditData);
+            pDocSh->GetUndoManager()->AddUndoAction(pUndo);
         }
         delete pOldPat;		// wird im Undo kopiert (Pool)
 
-- 
1.7.0.1

