 sd/source/filter/pptin.cxx                         |    4 ---
 .../engine/OGLTrans/OGLTrans_TransitionImpl.cxx    |   25 +++++++++++++++++++++++
 .../engine/OGLTrans/OGLTrans_TransitionImpl.hxx    |    1 +
 .../engine/OGLTrans/OGLTrans_TransitionerImpl.cxx  |    5 +++++
 4 files changed, 31 insertions(+), 4 deletions(-)

diff --git a/sd/source/filter/pptin.cxx b/sd/source/filter/pptin.cxx
index bb73ddc..61c08d9 100644
--- sd/source/filter/pptin.cxx
+++ sd/source/filter/pptin.cxx
@@ -1796,12 +1796,8 @@ void ImplSdPPTImport::ImportPageEffect( SdPage* pPage, const sal_Bool bNewAnimat
 									break;
 									case PPT_TRANSITION_TYPE_NEWSFLASH :
 									{
-										pPage->setTransitionType( animations::TransitionType::FOURBOXWIPE );
-										pPage->setTransitionSubtype( animations::TransitionSubType::CORNERSOUT );
-/*
 										pPage->setTransitionType( animations::TransitionType::ZOOM );
 										pPage->setTransitionSubtype( animations::TransitionSubType::ROTATEIN );
-*/
 									}
 									break;
 									case PPT_TRANSITION_TYPE_SMOOTHFADE :
diff --git a/slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx b/slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx
index c84b322..bf9883f 100644
--- slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx
+++ slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx
@@ -744,7 +744,9 @@ void SRotate::interpolate(double t,double SlideWidthScale,double SlideHeightScal
         t = nT1;
     t = intervalInter(t,nT0,nT1);
     glTranslated(SlideWidthScale*origin.getX(),SlideHeightScale*origin.getY(),origin.getZ());
+    glScaled(SlideWidthScale,SlideHeightScale,1);
     glRotated(t*angle,axis.getX(),axis.getY(),axis.getZ());
+    glScaled(1/SlideWidthScale,1/SlideHeightScale,1);
     glTranslated(-SlideWidthScale*origin.getX(),-SlideHeightScale*origin.getY(),-origin.getZ());
 }
 
@@ -1234,3 +1236,26 @@ void OGLTransitionImpl::makeDissolve()
 
     mnRequiredGLVersion = 2.0;
 }
+
+void OGLTransitionImpl::makeNewsflash()
+{
+    Primitive Slide;
+    
+    Slide.pushTriangle(basegfx::B2DVector(0,0),basegfx::B2DVector(1,0),basegfx::B2DVector(0,1));
+    Slide.pushTriangle(basegfx::B2DVector(1,0),basegfx::B2DVector(0,1),basegfx::B2DVector(1,1));
+    Slide.Operations.push_back(new SRotate(basegfx::B3DVector(0,0,1),basegfx::B3DVector(0,0,0),3000,true,0,0.5));
+    Slide.Operations.push_back(new SScale(basegfx::B3DVector(0.01,0.01,0.01),basegfx::B3DVector(0,0,0),true,0,0.5));
+    Slide.Operations.push_back(new STranslate(basegfx::B3DVector(-10000, 0, 0),false, 0.5, 2));
+    maLeavingSlidePrimitives.push_back(Slide);
+
+    Slide.Operations.clear();
+    Slide.Operations.push_back(new SRotate(basegfx::B3DVector(0,0,1),basegfx::B3DVector(0,0,0),-3000,true,0.5,1));
+    Slide.Operations.push_back(new STranslate(basegfx::B3DVector(-100, 0, 0),false, -1, 1));
+    Slide.Operations.push_back(new STranslate(basegfx::B3DVector(100, 0, 0),false, 0.5, 1));
+    Slide.Operations.push_back(new SScale(basegfx::B3DVector(0.01,0.01,0.01),basegfx::B3DVector(0,0,0),false,-1,1));
+    Slide.Operations.push_back(new SScale(basegfx::B3DVector(100,100,100),basegfx::B3DVector(0,0,0),true,0.5,1));
+    maEnteringSlidePrimitives.push_back(Slide);
+
+    OverallOperations.push_back(new SRotate(basegfx::B3DVector(0,0,1),basegfx::B3DVector(0.2,0.2,0),1080,true,0,1));
+}
+
diff --git a/slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx b/slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx
index 30e1748..2dcabd0 100644
--- slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx
+++ slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx
@@ -98,6 +98,7 @@ public:
     void makeVenetianBlinds( bool vertical, int parts );
     void makeStatic();
     void makeDissolve();
+    void makeNewsflash();
 
     /** 2D replacements
      */
diff --git a/slideshow/source/engine/OGLTrans/OGLTrans_TransitionerImpl.cxx b/slideshow/source/engine/OGLTrans/OGLTrans_TransitionerImpl.cxx
index 2682e94..8e2d0b9 100644
--- slideshow/source/engine/OGLTrans/OGLTrans_TransitionerImpl.cxx
+++ slideshow/source/engine/OGLTrans/OGLTrans_TransitionerImpl.cxx
@@ -903,6 +903,8 @@ public:
             return sal_True;
         } else if( transitionType == animations::TransitionType::IRISWIPE && transitionSubType == animations::TransitionSubType::DIAMOND ) {
             return sal_True;
+        } else if( transitionType == animations::TransitionType::ZOOM && transitionSubType == animations::TransitionSubType::ROTATEIN ) {
+            return sal_True;
         } else
             return sal_False;
     }
@@ -981,6 +983,9 @@ public:
         } else if( transitionType == animations::TransitionType::IRISWIPE && transitionSubType == animations::TransitionSubType::DIAMOND ) {
             pTransition = new OGLTransitionImpl();
             pTransition->makeDiamond();
+        } else if( transitionType == animations::TransitionType::ZOOM && transitionSubType == animations::TransitionSubType::ROTATEIN ) {
+            pTransition = new OGLTransitionImpl();
+            pTransition->makeNewsflash();
         }
 
         rtl::Reference<OGLTransitionerImpl> xRes(
--- sd/xml/transitions.orig	2008-08-18 15:59:32.000000000 +0200
+++ sd/xml/transitions.xml	2008-08-18 16:23:48.000000000 +0200
@@ -141,9 +144,9 @@
  <anim:par pres:preset-id="random-transition">
   <anim:transitionFilter smil:type="random"/>
  </anim:par>
- <!--anim:par pres:preset-id="zoom-rotate-in">
+ <anim:par pres:preset-id="zoom-rotate-in">
   <anim:transitionFilter smil:type="zoom" smil:subtype="rotateIn"/>
- </anim:par-->
+ </anim:par>
  <anim:par pres:preset-id="clock-wipe-twelve">
   <anim:transitionFilter smil:type="clockWipe" smil:subtype="clockwiseTwelve"/>
  </anim:par>
