diff -r 93402e754dbd configure.in
--- configure.in	Tue Mar 02 12:22:53 2010 +0100
+++ configure.in	Mon Mar 08 15:25:06 2010 +0000
@@ -376,7 +376,7 @@
 AC_ARG_WITH(system-mysql,
 [  --with-system-mysql          Use MySQL libraries already on system, for building the MySQL Connector/OOo extension.
                                 Requires MYSQLCONFIG to point to the mysql_config executable.
-],,with_system_mysql="no")
+],,)
 AC_ARG_WITH(libmysql-path,
 [  --with-libmysql-path         Use Connector/C (libmysql) installation for building the MySQL Connector/OOo extension.
 
@@ -3952,13 +3952,6 @@
       ], [AC_MSG_RESULT(OK)], [AC_MSG_ERROR([not suitable, we need >= 1.0.6])])
         AC_LANG_POP([C++])
 
-	AC_MSG_CHECKING([STL compatibility])
-	if test "$WITH_STLPORT" != "no"; then
-		AC_MSG_ERROR([to use system mysqlcppconn you need to use --without-stlport])
-	else
-		AC_MSG_RESULT([OK])	
-	fi
-
 else
 	AC_MSG_RESULT([internal])
         AC_MSG_CHECKING([for mysqlcppconn module])
diff -r 93402e754dbd mysqlc/source/makefile.mk
--- mysqlc/source/makefile.mk	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/makefile.mk	Mon Mar 08 15:25:06 2010 +0000
@@ -116,6 +116,9 @@
 CDEFS += -DCPPCONN_LIB=\"$(DLLPRE)mysqlcppconn$(DLLPOST)\"
 .ELSE
 CDEFS += -DCPPCONN_LIB=\"$(shell readlink /usr/lib/libmysqlcppconn.so)\"
+.IF "$(USE_SYSTEM_STL)"!="YES"
+CDEFS += -DMYSQL_CPPCONN_ADAPTSTL
+.ENDIF
 .ENDIF
 
 # --------------- MySQL settings ------------------
diff -r 93402e754dbd mysqlc/source/mysqlc_connection.cxx
--- mysqlc/source/mysqlc_connection.cxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_connection.cxx	Mon Mar 08 15:25:06 2010 +0000
@@ -26,11 +26,13 @@
 * for a copy of the LGPLv3 License.
 ************************************************************************/
 
+#include "premysqlcstl.h"
 #include <cppconn/driver.h>
 #include <cppconn/connection.h>
 #include <cppconn/statement.h>
 #include <cppconn/metadata.h>
 #include <cppconn/exception.h>
+#include "postmysqlcstl.h"
 
 #include "mysqlc_connection.hxx"
 #include "mysqlc_databasemetadata.hxx"
@@ -186,10 +188,10 @@
 	if (bEmbedded == sal_False) {
 		try {
             sql::ConnectOptionsMap connProps;
-			std::string host_str = OUStringToOString(aHostName, m_settings.encoding).getStr();
-			std::string user_str = OUStringToOString(aUser, m_settings.encoding).getStr();
-			std::string pass_str = OUStringToOString(aPass, m_settings.encoding).getStr();
-			std::string schema_str = OUStringToOString(aDbName, m_settings.encoding).getStr();
+            mysqlc_std::string host_str = OUStringToOString(aHostName, m_settings.encoding).getStr();
+            mysqlc_std::string user_str = OUStringToOString(aUser, m_settings.encoding).getStr();
+            mysqlc_std::string pass_str = OUStringToOString(aPass, m_settings.encoding).getStr();
+            mysqlc_std::string schema_str = OUStringToOString(aDbName, m_settings.encoding).getStr();
 			connProps["hostName"] = sql::ConnectPropertyVal(host_str);
 			connProps["userName"] = sql::ConnectPropertyVal(user_str);
 			connProps["password"] = sql::ConnectPropertyVal(pass_str);
diff -r 93402e754dbd mysqlc/source/mysqlc_connection.hxx
--- mysqlc/source/mysqlc_connection.hxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_connection.hxx	Mon Mar 08 15:25:06 2010 +0000
@@ -46,7 +46,9 @@
 #include <com/sun/star/sdbc/XWarningsSupplier.hpp>
 #include <com/sun/star/util/XStringSubstitution.hpp>
 
+#include "premysqlcstl.h"
 #include <cppconn/driver.h>
+#include "postmysqlcstl.h"
 #include <cppuhelper/compbase3.hxx>
 #include <cppuhelper/weakref.hxx>
 #include <rtl/string.hxx>
diff -r 93402e754dbd mysqlc/source/mysqlc_databasemetadata.cxx
--- mysqlc/source/mysqlc_databasemetadata.cxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_databasemetadata.cxx	Mon Mar 08 15:25:06 2010 +0000
@@ -54,13 +54,15 @@
 using ::rtl::OUString;
 using mysqlc_sdbc_driver::getStringFromAny;
 
+#include "premysqlcstl.h"
 #include <cppconn/connection.h>
 #include <cppconn/resultset.h>
 #include <cppconn/metadata.h>
 #include <cppconn/statement.h>
 #include <cppconn/prepared_statement.h>
+#include "postmysqlcstl.h"
 
-static std::string wild("%");
+static mysqlc_std::string wild("%");
 
 using ::rtl::OUStringToOString;
 
@@ -114,7 +116,7 @@
 
 
 /* {{{ ODatabaseMetaData::impl_getStringMetaData() -I- */
-OUString ODatabaseMetaData::impl_getStringMetaData(const sal_Char* _methodName, const std::string& (sql::DatabaseMetaData::*_Method)() )
+OUString ODatabaseMetaData::impl_getStringMetaData(const sal_Char* _methodName, const mysqlc_std::string& (sql::DatabaseMetaData::*_Method)() )
 {
 	OSL_TRACE( "mysqlc::ODatabaseMetaData::%s", _methodName);
 	OUString stringMetaData;
@@ -133,7 +135,7 @@
 
 
 /* {{{ ODatabaseMetaData::impl_getStringMetaData() -I- */
-OUString ODatabaseMetaData::impl_getStringMetaData(const sal_Char* _methodName, std::string (sql::DatabaseMetaData::*_Method)() )
+OUString ODatabaseMetaData::impl_getStringMetaData(const sal_Char* _methodName, mysqlc_std::string (sql::DatabaseMetaData::*_Method)() )
 {
 	OSL_TRACE( "mysqlc::ODatabaseMetaData::%s", _methodName);
 	OUString stringMetaData;
@@ -1654,7 +1656,7 @@
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-    std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sch(OUStringToOString(schema, m_rConnection.getConnectionEncoding()).getStr()),
 				tab(OUStringToOString(table, m_rConnection.getConnectionEncoding()).getStr()),
 				cNamePattern(OUStringToOString(columnNamePattern, m_rConnection.getConnectionEncoding()).getStr());
@@ -1696,7 +1698,7 @@
 	OSL_TRACE("ODatabaseMetaData::getColumns");
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
-	std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sPattern(OUStringToOString(schemaPattern, m_rConnection.getConnectionEncoding()).getStr()),
 				tNamePattern(OUStringToOString(tableNamePattern, m_rConnection.getConnectionEncoding()).getStr()),
 				cNamePattern(OUStringToOString(columnNamePattern, m_rConnection.getConnectionEncoding()).getStr());
@@ -1750,11 +1752,11 @@
 				::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-	std::string cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sPattern(OUStringToOString(schemaPattern, m_rConnection.getConnectionEncoding()).getStr()),
 				tNamePattern(OUStringToOString(tableNamePattern, m_rConnection.getConnectionEncoding()).getStr());
 
-	std::list<sql::SQLString> tabTypes;
+    mysqlc_std::list<sql::SQLString> tabTypes;
 	for (const OUString *pStart = types.getConstArray(), *p = pStart, *pEnd = pStart + nLength; p != pEnd; ++p) {
 		tabTypes.push_back(OUStringToOString(*p, m_rConnection.getConnectionEncoding()).getStr());
 	}
@@ -1822,7 +1824,7 @@
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-	std::string cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sPattern(OUStringToOString(schemaPattern, m_rConnection.getConnectionEncoding()).getStr()),
 				pNamePattern(OUStringToOString(procedureNamePattern, m_rConnection.getConnectionEncoding()).getStr());
 
@@ -1882,7 +1884,7 @@
 	OSL_TRACE("ODatabaseMetaData::getExportedKeys");
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
-	std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sch(OUStringToOString(schema, m_rConnection.getConnectionEncoding()).getStr()),
 				tab(OUStringToOString(table, m_rConnection.getConnectionEncoding()).getStr());
 
@@ -1924,7 +1926,7 @@
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-	std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sch(OUStringToOString(schema, m_rConnection.getConnectionEncoding()).getStr()),
 				tab(OUStringToOString(table, m_rConnection.getConnectionEncoding()).getStr());
 
@@ -1965,7 +1967,7 @@
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-	std::string cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sch(OUStringToOString(schema, m_rConnection.getConnectionEncoding()).getStr()),
 				tab(OUStringToOString(table, m_rConnection.getConnectionEncoding()).getStr());
 
@@ -2008,7 +2010,7 @@
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-	std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sch(OUStringToOString(schema, m_rConnection.getConnectionEncoding()).getStr()),
 				tab(OUStringToOString(table, m_rConnection.getConnectionEncoding()).getStr());
 
@@ -2051,7 +2053,7 @@
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-	std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sch(OUStringToOString(schema, m_rConnection.getConnectionEncoding()).getStr()),
 				tab(OUStringToOString(table, m_rConnection.getConnectionEncoding()).getStr());
 
@@ -2092,7 +2094,7 @@
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-	std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string	cat(catalog.hasValue()? OUStringToOString(getStringFromAny(catalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				sPattern(OUStringToOString(schemaPattern, m_rConnection.getConnectionEncoding()).getStr()),
 				tPattern(OUStringToOString(tableNamePattern, m_rConnection.getConnectionEncoding()).getStr());
 
@@ -2157,7 +2159,7 @@
 	Reference< XResultSet > xResultSet(getOwnConnection().getDriver().getFactory()->createInstance(::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.comp.helper.DatabaseMetaDataResultSet"))),UNO_QUERY);
 	std::vector< std::vector< Any > > rRows;
 
-	std::string	primaryCat(primaryCatalog.hasValue()? OUStringToOString(getStringFromAny(primaryCatalog), m_rConnection.getConnectionEncoding()).getStr():""),
+    mysqlc_std::string	primaryCat(primaryCatalog.hasValue()? OUStringToOString(getStringFromAny(primaryCatalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				foreignCat(foreignCatalog.hasValue()? OUStringToOString(getStringFromAny(foreignCatalog), m_rConnection.getConnectionEncoding()).getStr():""),
 				pSchema(OUStringToOString(primarySchema, m_rConnection.getConnectionEncoding()).getStr()),
 				pTable(OUStringToOString(primaryTable, m_rConnection.getConnectionEncoding()).getStr()),
diff -r 93402e754dbd mysqlc/source/mysqlc_databasemetadata.hxx
--- mysqlc/source/mysqlc_databasemetadata.hxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_databasemetadata.hxx	Mon Mar 08 15:25:06 2010 +0000
@@ -39,7 +39,9 @@
 #include <cppuhelper/implbase1.hxx>
 #endif
 
+#include "premysqlcstl.h"
 #include <cppconn/metadata.h>
+#include "postmysqlcstl.h"
 
 namespace connectivity
 {
@@ -67,8 +69,8 @@
 			bool			identifier_quote_string_set;
 
         private:
-            OUString impl_getStringMetaData( const sal_Char* _methodName, const std::string& (sql::DatabaseMetaData::*_Method)() );
-            OUString impl_getStringMetaData( const sal_Char* _methodName, std::string (sql::DatabaseMetaData::*_Method)() );
+            OUString impl_getStringMetaData( const sal_Char* _methodName, const mysqlc_std::string& (sql::DatabaseMetaData::*_Method)() );
+            OUString impl_getStringMetaData( const sal_Char* _methodName, mysqlc_std::string (sql::DatabaseMetaData::*_Method)() );
             OUString impl_getStringMetaData( const sal_Char* _methodName, const sql::SQLString& (sql::DatabaseMetaData::*_Method)() );
             OUString impl_getStringMetaData( const sal_Char* _methodName, sql::SQLString (sql::DatabaseMetaData::*_Method)() );
             sal_Int32 impl_getInt32MetaData( const sal_Char* _methodName, unsigned int (sql::DatabaseMetaData::*_Method)() );
diff -r 93402e754dbd mysqlc/source/mysqlc_driver.cxx
--- mysqlc/source/mysqlc_driver.cxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_driver.cxx	Mon Mar 08 15:25:06 2010 +0000
@@ -38,11 +38,13 @@
 using ::rtl::OUString;
 #include <stdio.h>
 
+#include "premysqlcstl.h"
 #include <cppconn/exception.h>
 
 #ifdef SYSTEM_MYSQL_CPPCONN
     #include <mysql_driver.h>
 #endif
+#include "postmysqlcstl.h"
 
 
 /* {{{ MysqlCDriver::MysqlCDriver() -I- */
diff -r 93402e754dbd mysqlc/source/mysqlc_driver.hxx
--- mysqlc/source/mysqlc_driver.hxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_driver.hxx	Mon Mar 08 15:25:06 2010 +0000
@@ -36,7 +36,9 @@
 #include <com/sun/star/lang/XServiceInfo.hpp>
 
 #include <cppuhelper/compbase2.hxx>
+#include "premysqlcstl.h"
 #include <cppconn/driver.h>
+#include "postmysqlcstl.h"
 #include <osl/module.h>
 
 namespace connectivity
diff -r 93402e754dbd mysqlc/source/mysqlc_general.cxx
--- mysqlc/source/mysqlc_general.cxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_general.cxx	Mon Mar 08 15:25:06 2010 +0000
@@ -162,14 +162,14 @@
 }
 
 
-::rtl::OUString convert(const ::std::string& _string, const rtl_TextEncoding encoding)
+::rtl::OUString convert(const ::mysqlc_std::string& _string, const rtl_TextEncoding encoding)
 {
 	return ::rtl::OUString( _string.c_str(), _string.size(), encoding );
 }
 
-::std::string convert(const ::rtl::OUString& _string, const rtl_TextEncoding encoding)
+::mysqlc_std::string convert(const ::rtl::OUString& _string, const rtl_TextEncoding encoding)
 {
-	return ::std::string( ::rtl::OUStringToOString( _string, encoding ).getStr() );
+    return ::mysqlc_std::string( ::rtl::OUStringToOString( _string, encoding ).getStr() );
 }
 
 
diff -r 93402e754dbd mysqlc/source/mysqlc_general.hxx
--- mysqlc/source/mysqlc_general.hxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_general.hxx	Mon Mar 08 15:25:06 2010 +0000
@@ -30,7 +30,9 @@
 #ifndef _MYSQLC_GENERAL_
 #define _MYSQLC_GENERAL_
 
+#include "premysqlcstl.h"
 #include <cppconn/exception.h>
+#include "postmysqlcstl.h"
 
 #include <com/sun/star/uno/XInterface.hpp>
 #include <com/sun/star/sdbc/SQLException.hpp>
@@ -58,9 +60,9 @@
 	int mysqlToOOOType(int mysqlType) throw ();
 
 
-	::rtl::OUString convert(const ::std::string& _string, const rtl_TextEncoding encoding);
+    ::rtl::OUString convert(const ::mysqlc_std::string& _string, const rtl_TextEncoding encoding);
 
-	::std::string convert(const ::rtl::OUString& _string, const rtl_TextEncoding encoding);
+    ::mysqlc_std::string convert(const ::rtl::OUString& _string, const rtl_TextEncoding encoding);
 }
 
 #endif
diff -r 93402e754dbd mysqlc/source/mysqlc_preparedstatement.cxx
--- mysqlc/source/mysqlc_preparedstatement.cxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_preparedstatement.cxx	Mon Mar 08 15:25:06 2010 +0000
@@ -234,7 +234,7 @@
 	checkParameterIndex(parameter);
 
 	try {
-        std::string stringie(::rtl::OUStringToOString(x, m_pConnection->getConnectionEncoding()).getStr());
+        mysqlc_std::string stringie(::rtl::OUStringToOString(x, m_pConnection->getConnectionEncoding()).getStr());
 		((sql::PreparedStatement *)cppStatement)->setString(parameter, stringie);
 	} catch (sql::MethodNotImplementedException) {
 		mysqlc_sdbc_driver::throwFeatureNotImplementedException("OPreparedStatement::clearParameters", *this);
@@ -344,7 +344,7 @@
 	checkDisposed(OPreparedStatement::rBHelper.bDisposed);
 	checkParameterIndex(parameter);
 
-	std::string dateStr;
+    mysqlc_std::string dateStr;
 	char buf[20];
 	dateStr.append(my_i_to_a(buf, sizeof(buf)-1, aData.Year));
 	dateStr.append("-", 1);
@@ -372,7 +372,7 @@
 	checkDisposed(OPreparedStatement::rBHelper.bDisposed);
 	checkParameterIndex(parameter);
 
-	std::string timeStr;
+    mysqlc_std::string timeStr;
 	char buf[20];
 	timeStr.append(my_i_to_a(buf, sizeof(buf)-1, aVal.Hours));
 	timeStr.append(":", 1);
@@ -400,7 +400,7 @@
 	checkDisposed(OPreparedStatement::rBHelper.bDisposed);
 	checkParameterIndex(parameter);
 
-	std::string timeStr;
+    mysqlc_std::string timeStr;
 	char buf[20];
 	timeStr.append(my_i_to_a(buf, sizeof(buf)-1, aVal.Year));
 	timeStr.append("-", 1);
@@ -805,7 +805,7 @@
 	checkDisposed(OPreparedStatement::rBHelper.bDisposed);
 	checkParameterIndex(parameter);
 
-	std::string blobby((char *)x.getConstArray(), x.getLength()); 
+    mysqlc_std::string blobby((char *)x.getConstArray(), x.getLength()); 
 	try {
 		((sql::PreparedStatement *)cppStatement)->setString(parameter, blobby);
 	} catch (sql::MethodNotImplementedException) {
diff -r 93402e754dbd mysqlc/source/mysqlc_preparedstatement.hxx
--- mysqlc/source/mysqlc_preparedstatement.hxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_preparedstatement.hxx	Mon Mar 08 15:25:06 2010 +0000
@@ -48,7 +48,9 @@
 #include <com/sun/star/io/XInputStream.hpp>
 #endif
 
+#include "premysqlcstl.h"
 #include <cppconn/prepared_statement.h>
+#include "postmysqlcstl.h"
 
 namespace connectivity
 {
diff -r 93402e754dbd mysqlc/source/mysqlc_resultsetmetadata.hxx
--- mysqlc/source/mysqlc_resultsetmetadata.hxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_resultsetmetadata.hxx	Mon Mar 08 15:25:06 2010 +0000
@@ -35,7 +35,9 @@
 #include <com/sun/star/sdbc/XResultSetMetaData.hpp>
 
 #include <cppuhelper/implbase1.hxx>
+#include "premysqlcstl.h"
 #include <cppconn/resultset_metadata.h>
+#include "postmysqlcstl.h"
 
 namespace connectivity
 {
@@ -62,7 +64,7 @@
             {
             }
 
-            inline ::rtl::OUString convert( const ::std::string& _string ) const
+            inline ::rtl::OUString convert( const ::mysqlc_std::string& _string ) const
             {
                 return ::rtl::OUString( _string.c_str(), _string.size(), m_encoding );
             }
diff -r 93402e754dbd mysqlc/source/mysqlc_statement.hxx
--- mysqlc/source/mysqlc_statement.hxx	Tue Mar 02 12:22:53 2010 +0100
+++ mysqlc/source/mysqlc_statement.hxx	Mon Mar 08 15:25:06 2010 +0000
@@ -13,7 +13,9 @@
 #include <com/sun/star/sdbc/XWarningsSupplier.hpp>
 #include <com/sun/star/util/XCancellable.hpp>
 
+#include "premysqlcstl.h"
 #include <cppconn/statement.h>
+#include "postmysqlcstl.h"
 #include <cppuhelper/compbase5.hxx>
 #include <list>
 
diff -r 93402e754dbd mysqlc/source/postmysqlcstl.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ mysqlc/source/postmysqlcstl.h	Mon Mar 08 15:25:06 2010 +0000
@@ -0,0 +1,9 @@
+#ifdef std_was_redefined_as_stlport
+//  put things back the way they were
+#   define std std_was_redefined_as_stlport
+#   undef _STLP_OUTERMOST_HEADER_ID
+//  force config to be re-read
+#   undef _STLP_NOTHROW_INHERENTLY
+#   undef _STLP_CONFIG_H
+#   include <stddef.h>
+#endif
diff -r 93402e754dbd mysqlc/source/premysqlcstl.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ mysqlc/source/premysqlcstl.h	Mon Mar 08 15:25:06 2010 +0000
@@ -0,0 +1,36 @@
+#if defined(MYSQL_CPPCONN_ADAPTSTL)
+#   include <ostream>
+#   include <istream>
+#   include <fstream>
+#   include <iostream>
+#   include <vector>
+#   include <list>
+#   include <map>
+#   include <algorithm>
+#   if defined(std)
+#       define std_was_redefined_as_stlport std
+#       undef std
+#       define _STLP_OUTERMOST_HEADER_ID 0xdeadbeaf
+#       pragma GCC visibility push(default)
+#       include _STLP_NATIVE_HEADER(exception_defines.h)
+#       include _STLP_NATIVE_HEADER(limits)
+#       include _STLP_NATIVE_HEADER(memory)
+#       include _STLP_NATIVE_HEADER(exception)
+#       include _STLP_NATIVE_HEADER(iosfwd)
+#       include _STLP_NATIVE_HEADER(algorithm)
+#       include _STLP_NATIVE_HEADER(string)
+#       include _STLP_NATIVE_HEADER(streambuf)
+#       include _STLP_NATIVE_HEADER(ios)
+#       include _STLP_NATIVE_HEADER(locale)
+#       include _STLP_NATIVE_HEADER(stdexcept)
+#       include _STLP_NATIVE_HEADER(ostream)
+#       include _STLP_NATIVE_HEADER(istream)
+#       include _STLP_NATIVE_HEADER(iostream)
+#       include _STLP_NATIVE_HEADER(vector)
+#       include _STLP_NATIVE_HEADER(list)
+#       include _STLP_NATIVE_HEADER(map)
+#       pragma GCC visibility pop
+#   endif
+#endif
+//mysqlc_std resolves to the std that MySqlCppConnector was built with
+namespace mysqlc_std = std;
