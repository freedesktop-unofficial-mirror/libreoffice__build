--- sc/inc/cell.hxx.old	2010-03-03 16:59:11.000000000 +0100
+++ sc/inc/cell.hxx	2010-03-03 16:59:14.000000000 +0100
@@ -552,6 +552,7 @@ private:
 public:
                 ScDetectiveRefIter( ScFormulaCell* pCell );
     BOOL		GetNextRef( ScRange& rRange );
+    ScToken*    GetNextRefToken();
 };
 
 // ============================================================================
--- sc/inc/detfunc.hxx.old	2009-10-08 16:17:08.000000000 +0200
+++ sc/inc/detfunc.hxx	2010-03-03 16:59:14.000000000 +0100
@@ -35,6 +35,9 @@
 #include <tools/gen.hxx>
 #include <tools/color.hxx>
 #include "scdllapi.h"
+#include "token.hxx"
+
+#include <vector>
 
 class SdrObject;
 class SdrPage;
@@ -46,6 +49,7 @@ class ScDetectiveData;
 class ScDocument;
 class ScAddress;
 class ScRange;
+class ScRangeList;
 
 #define SC_DET_MAXCIRCLE	1000
 
@@ -147,6 +151,9 @@ public:
 
     BOOL		MarkInvalid(BOOL& rOverflow);
 
+    void        GetAllPreds(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2, ::std::vector<ScSharedTokenRef>& rRefTokens);
+    void        GetAllSuccs(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2, ::std::vector<ScSharedTokenRef>& rRefTokens);
+
     static void UpdateAllComments( ScDocument& rDoc );        // on all tables
     void		UpdateAllArrowColors();		// on all tables
 
--- sc/inc/reftokenhelper.hxx.old	2010-03-03 16:44:03.000000000 +0100
+++ sc/inc/reftokenhelper.hxx	2010-03-03 16:59:14.000000000 +0100
@@ -78,6 +78,9 @@ public:
     static void SC_DLLPUBLIC join(::std::vector<ScSharedTokenRef>& rTokens, const ScSharedTokenRef& pToken);
 
     static bool getDoubleRefDataFromToken(ScComplexRefData& rData, const ScSharedTokenRef& pToken);
+
+    static ScSharedTokenRef createRefToken(const ScAddress& rAddr);
+    static ScSharedTokenRef createRefToken(const ScRange& rRange);
 };
 
 #endif
--- sc/inc/sc.hrc.old	2010-03-03 16:59:12.000000000 +0100
+++ sc/inc/sc.hrc	2010-03-03 16:59:14.000000000 +0100
@@ -900,6 +900,9 @@
 #define SID_DETECTIVE_REFRESH   (DETECTIVE_START+14)
 #define SID_DETECTIVE_AUTO      (DETECTIVE_START+15)
 
+#define SID_DETECTIVE_MARK_PRED (DETECTIVE_START+16)
+#define SID_DETECTIVE_MARK_SUCC (DETECTIVE_START+17)
+
 #define DETECTIVE_END			(DETECTIVE_START+20)
 
 #define SID_API_SLOTS			(DETECTIVE_END)
--- sc/sdi/cellsh.sdi.old	2009-10-08 16:17:08.000000000 +0200
+++ sc/sdi/cellsh.sdi	2010-03-03 16:59:14.000000000 +0100
@@ -112,6 +112,8 @@ interface CellSelection
     SID_DETECTIVE_ADD_ERR	[ ExecMethod = ExecuteEdit; StateMethod = GetState; ]
     SID_DETECTIVE_INVALID	[ ExecMethod = ExecuteEdit; StateMethod = GetState; ]
     SID_DETECTIVE_REFRESH	[ ExecMethod = ExecuteEdit; StateMethod = GetState; ]
+	SID_DETECTIVE_MARK_PRED	[ ExecMethod = ExecuteEdit; StateMethod = GetState; ]
+	SID_DETECTIVE_MARK_SUCC	[ ExecMethod = ExecuteEdit; StateMethod = GetState; ]
     FID_INS_ROW				[ ExecMethod = ExecuteEdit; StateMethod = GetBlockState; ]
     FID_INS_COLUMN			[ ExecMethod = ExecuteEdit; StateMethod = GetBlockState; ]
     FID_INS_CELLSDOWN		[ ExecMethod = ExecuteEdit; StateMethod = GetBlockState; ]
--- sc/sdi/scalc.sdi.old	2010-03-03 16:59:12.000000000 +0100
+++ sc/sdi/scalc.sdi	2010-03-03 16:59:14.000000000 +0100
@@ -7828,3 +7828,52 @@ SfxVoidItem SetTabBgColor FID_TAB_MENU_S
     GroupId = GID_FORMAT;
 ]
 
+//--------------------------------------------------------------------------
+SfxVoidItem MarkPrecedents SID_DETECTIVE_MARK_PRED
+()
+[
+    /* flags: */
+    AutoUpdate = FALSE,
+    Cachable = Cachable,
+    FastCall = FALSE,
+    HasCoreId = FALSE,
+    HasDialog = FALSE,
+    ReadOnlyDoc = TRUE,
+    Toggle = FALSE,
+    Container = FALSE,
+    RecordAbsolute = FALSE,
+    RecordPerSet;
+    Synchron;
+    
+    /* config: */
+    AccelConfig = TRUE,
+    MenuConfig = TRUE,
+    StatusBarConfig = FALSE,
+    ToolBoxConfig = FALSE,
+    GroupId = GID_OPTIONS;
+]
+
+//--------------------------------------------------------------------------
+SfxVoidItem MarkDependents SID_DETECTIVE_MARK_SUCC
+()
+[
+    /* flags: */
+    AutoUpdate = FALSE,
+    Cachable = Cachable,
+    FastCall = FALSE,
+    HasCoreId = FALSE,
+    HasDialog = FALSE,
+    ReadOnlyDoc = TRUE,
+    Toggle = FALSE,
+    Container = FALSE,
+    RecordAbsolute = FALSE,
+    RecordPerSet;
+    Synchron;
+    
+    /* config: */
+    AccelConfig = TRUE,
+    MenuConfig = TRUE,
+    StatusBarConfig = FALSE,
+    ToolBoxConfig = FALSE,
+    GroupId = GID_OPTIONS;
+]
--- sc/source/core/data/cell.cxx.old	2010-03-03 16:44:03.000000000 +0100
+++ sc/source/core/data/cell.cxx	2010-03-03 16:59:14.000000000 +0100
@@ -1996,7 +1996,7 @@ BOOL lcl_ScDetectiveRefIter_SkipRef( ScT
     if ( rRef1.IsColDeleted() || rRef1.IsRowDeleted() || rRef1.IsTabDeleted()
             || !rRef1.Valid() )
         return TRUE;
-    if ( p->GetType() == svDoubleRef )
+	if ( p->GetType() == svDoubleRef || p->GetType() == svExternalDoubleRef )
     {
         ScSingleRefData& rRef2 = p->GetDoubleRef().Ref2;
         if ( rRef2.IsColDeleted() || rRef2.IsRowDeleted() || rRef2.IsTabDeleted()
@@ -2009,7 +2009,20 @@ BOOL lcl_ScDetectiveRefIter_SkipRef( ScT
 BOOL ScDetectiveRefIter::GetNextRef( ScRange& rRange )
 {
     BOOL bRet = FALSE;
+    ScToken* p = GetNextRefToken();
+    if( p )
+    {
+        SingleDoubleRefProvider aProv( *p );
+        rRange.aStart.Set( aProv.Ref1.nCol, aProv.Ref1.nRow, aProv.Ref1.nTab );
+        rRange.aEnd.Set( aProv.Ref2.nCol, aProv.Ref2.nRow, aProv.Ref2.nTab );
+        bRet = TRUE;
+    }
 
+    return bRet;
+}
+
+ScToken* ScDetectiveRefIter::GetNextRefToken()
+{
     ScToken* p = static_cast<ScToken*>(pCode->GetNextReferenceRPN());
     if (p)
         p->CalcAbsIfRel( aPos );
@@ -2020,16 +2033,7 @@ BOOL ScDetectiveRefIter::GetNextRef( ScR
         if (p)
             p->CalcAbsIfRel( aPos );
     }
-
-    if( p )
-    {
-        SingleDoubleRefProvider aProv( *p );
-        rRange.aStart.Set( aProv.Ref1.nCol, aProv.Ref1.nRow, aProv.Ref1.nTab );
-        rRange.aEnd.Set( aProv.Ref2.nCol, aProv.Ref2.nRow, aProv.Ref2.nTab );
-        bRet = TRUE;
-    }
-
-    return bRet;
+    return p;
 }
 
 // ============================================================================
--- sc/source/core/tool/detfunc.cxx.old	2009-10-08 16:17:08.000000000 +0200
+++ sc/source/core/tool/detfunc.cxx	2010-03-03 16:59:14.000000000 +0100
@@ -80,6 +80,12 @@
 #include "attrib.hxx"
 #include "scmod.hxx"
 #include "postit.hxx"
+#include "rangelst.hxx"
+#include "reftokenhelper.hxx"
+
+#include <vector>
+
+using ::std::vector;
 
 //------------------------------------------------------------------------
 
@@ -1423,6 +1429,52 @@ BOOL ScDetectiveFunc::MarkInvalid(BOOL&
     return ( bDeleted || nInsCount != 0 );
 }
 
+void ScDetectiveFunc::GetAllPreds(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2,
+                                  vector<ScSharedTokenRef>& rRefTokens)
+{
+    ScCellIterator aCellIter(pDoc, nCol1, nRow1, nTab, nCol2, nRow2, nTab);
+    for (ScBaseCell* pCell = aCellIter.GetFirst(); pCell; pCell = aCellIter.GetNext())
+    {
+        if (pCell->GetCellType() != CELLTYPE_FORMULA)
+            continue;
+
+        ScFormulaCell* pFCell = static_cast<ScFormulaCell*>(pCell);
+        ScDetectiveRefIter aRefIter(pFCell);
+        for (ScToken* p = aRefIter.GetNextRefToken(); p; p = aRefIter.GetNextRefToken())
+        {
+            ScSharedTokenRef pRef(static_cast<ScToken*>(p->Clone()));
+            ScRefTokenHelper::join(rRefTokens, pRef);
+        }
+    }
+}
+
+void ScDetectiveFunc::GetAllSuccs(SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2, 
+                                  vector<ScSharedTokenRef>& rRefTokens)
+{
+    vector<ScSharedTokenRef> aSrcRange;
+    aSrcRange.push_back(
+        ScRefTokenHelper::createRefToken(ScRange(nCol1, nRow1, nTab, nCol2, nRow2, nTab)));
+
+    ScCellIterator aCellIter(pDoc, 0, 0, nTab, MAXCOL, MAXROW, nTab);
+    for (ScBaseCell* pCell = aCellIter.GetFirst(); pCell; pCell = aCellIter.GetNext())
+    {
+        if (pCell->GetCellType() != CELLTYPE_FORMULA)
+            continue;
+
+        ScFormulaCell* pFCell = static_cast<ScFormulaCell*>(pCell);
+        ScDetectiveRefIter aRefIter(pFCell);
+        for (ScToken* p = aRefIter.GetNextRefToken(); p; p = aRefIter.GetNextRefToken())
+        {
+            ScSharedTokenRef pRef(static_cast<ScToken*>(p->Clone()));
+            if (ScRefTokenHelper::intersects(aSrcRange, pRef))
+            {
+                pRef = ScRefTokenHelper::createRefToken(aCellIter.GetPos());
+                ScRefTokenHelper::join(rRefTokens, pRef);
+            }
+        }
+    }
+}
+
 void ScDetectiveFunc::UpdateAllComments( ScDocument& rDoc )
 {
     //	for all caption objects, update attributes and SpecialTextBoxShadow flag
--- sc/source/core/tool/makefile.mk.old	2010-03-03 16:44:03.000000000 +0100
+++ sc/source/core/tool/makefile.mk	2010-03-03 16:59:14.000000000 +0100
@@ -125,6 +125,7 @@ EXCEPTIONSFILES= \
         $(SLO)$/chartlock.obj \
         $(SLO)$/chgtrack.obj \
         $(SLO)$/compiler.obj \
+        $(SLO)$/detfunc.obj \
 		$(SLO)$/doubleref.obj \
         $(SLO)$/formulaparserpool.obj \
         $(SLO)$/interpr1.obj \
--- sc/source/core/tool/reftokenhelper.cxx.old	2010-01-21 00:59:54.000000000 +0100
+++ sc/source/core/tool/reftokenhelper.cxx	2010-03-03 16:59:14.000000000 +0100
@@ -480,3 +480,19 @@ bool ScRefTokenHelper::getDoubleRefDataF
     }
     return true;
 }
+
+ScSharedTokenRef ScRefTokenHelper::createRefToken(const ScAddress& rAddr)
+{
+    ScSingleRefData aRefData;
+    aRefData.InitAddress(rAddr);
+    ScSharedTokenRef pRef(new ScSingleRefToken(aRefData));
+    return pRef;
+}
+
+ScSharedTokenRef ScRefTokenHelper::createRefToken(const ScRange& rRange)
+{
+    ScComplexRefData aRefData;
+    aRefData.InitRange(rRange);
+    ScSharedTokenRef pRef(new ScDoubleRefToken(aRefData));
+    return pRef;
+}
--- sc/source/ui/docshell/docfunc.cxx.old	2010-03-03 16:59:13.000000000 +0100
+++ sc/source/ui/docshell/docfunc.cxx	2010-03-03 16:59:14.000000000 +0100
@@ -102,6 +102,7 @@
 
 using namespace com::sun::star;
 using ::com::sun::star::uno::Sequence;
+using ::std::vector;
 
 // STATIC DATA -----------------------------------------------------------
 
@@ -532,6 +533,44 @@ BOOL ScDocFunc::DetectiveRefresh( BOOL b
     return bDone;
 }
 
+static void lcl_collectAllPredOrSuccRanges(
+    const ScRangeList& rSrcRanges, vector<ScSharedTokenRef>& rRefTokens, ScDocShell& rDocShell,
+    bool bPred)
+{
+    ScDocument* pDoc = rDocShell.GetDocument();
+    vector<ScSharedTokenRef> aRefTokens;
+    ScRangeList aSrcRanges(rSrcRanges);
+    ScRange* p = aSrcRanges.First();
+    if (!p)
+        return;
+    ScDetectiveFunc aDetFunc(pDoc, p->aStart.Tab());
+    ScRangeList aDestRanges;
+    for (; p; p = aSrcRanges.Next())
+    {
+        if (bPred)
+        {    
+            aDetFunc.GetAllPreds(
+                p->aStart.Col(), p->aStart.Row(), p->aEnd.Col(), p->aEnd.Row(), aRefTokens);
+        }
+        else
+        {    
+            aDetFunc.GetAllSuccs(
+                p->aStart.Col(), p->aStart.Row(), p->aEnd.Col(), p->aEnd.Row(), aRefTokens);
+        }
+    }
+    rRefTokens.swap(aRefTokens);
+}
+
+void ScDocFunc::DetectiveCollectAllPreds(const ScRangeList& rSrcRanges, vector<ScSharedTokenRef>& rRefTokens)
+{
+    lcl_collectAllPredOrSuccRanges(rSrcRanges, rRefTokens, rDocShell, true);
+}
+
+void ScDocFunc::DetectiveCollectAllSuccs(const ScRangeList& rSrcRanges, vector<ScSharedTokenRef>& rRefTokens)
+{
+    lcl_collectAllPredOrSuccRanges(rSrcRanges, rRefTokens, rDocShell, false);
+}
+
 //------------------------------------------------------------------------
 
 BOOL ScDocFunc::DeleteContents( const ScMarkData& rMark, USHORT nFlags,
--- sc/source/ui/inc/docfunc.hxx.old	2010-03-03 16:59:13.000000000 +0100
+++ sc/source/ui/inc/docfunc.hxx	2010-03-03 16:59:14.000000000 +0100
@@ -35,6 +35,9 @@
 #include "global.hxx"
 #include "formula/grammar.hxx"
 #include "tabbgcolor.hxx"
+#include "token.hxx"
+
+#include <vector>
 
 class ScEditEngineDefaulter;
 class SdrUndoAction;
@@ -43,6 +46,7 @@ class ScDocShell;
 class ScMarkData;
 class ScPatternAttr;
 class ScRange;
+class ScRangeList;
 class ScRangeName;
 class ScBaseCell;
 class ScTokenArray;
@@ -78,6 +82,8 @@ public:
     BOOL			DetectiveMarkInvalid(SCTAB nTab);
     BOOL			DetectiveDelAll(SCTAB nTab);
     BOOL			DetectiveRefresh(BOOL bAutomatic = FALSE);
+    void            DetectiveCollectAllPreds(const ScRangeList& rSrcRanges, ::std::vector<ScSharedTokenRef>& rRefTokens);
+    void            DetectiveCollectAllSuccs(const ScRangeList& rSrcRanges, ::std::vector<ScSharedTokenRef>& rRefTokens);
 
     BOOL			DeleteContents( const ScMarkData& rMark, USHORT nFlags,
                                     BOOL bRecord, BOOL bApi );
--- sc/source/ui/inc/viewfunc.hxx.old	2010-03-03 16:59:13.000000000 +0100
+++ sc/source/ui/inc/viewfunc.hxx	2010-03-03 16:59:14.000000000 +0100
@@ -331,6 +331,8 @@ public:
     void			DetectiveMarkInvalid();
     void			DetectiveDelAll();
     void			DetectiveRefresh();
+    void            DetectiveMarkPred();
+    void            DetectiveMarkSucc();
 
     void			ShowNote( bool bShow = true );
     inline void		HideNote() { ShowNote( false ); }
@@ -364,6 +366,8 @@ private:
     BOOL			TestFormatArea( SCCOL nCol, SCROW nRow, SCTAB nTab, BOOL bAttrChanged );
     void			DoAutoAttributes( SCCOL nCol, SCROW nRow, SCTAB nTab,
                                         BOOL bAttrChanged, BOOL bAddUndo );
+
+    void            MarkAndJumpToRanges(const ScRangeList& rRanges);
 };
 
 
--- sc/source/ui/view/cellsh1.cxx.old	2010-03-03 16:44:04.000000000 +0100
+++ sc/source/ui/view/cellsh1.cxx	2010-03-03 16:59:14.000000000 +0100
@@ -1551,6 +1551,13 @@ void ScCellShell::ExecuteEdit( SfxReques
             rReq.Done();
             break;
 
+        case SID_DETECTIVE_MARK_PRED:
+            pTabViewShell->DetectiveMarkPred();
+            break;
+        case SID_DETECTIVE_MARK_SUCC:
+            pTabViewShell->DetectiveMarkSucc();
+            break;
+
         case SID_SPELL_DIALOG:
 //           pTabViewShell->DoSpellingChecker();
             {
--- sc/source/ui/view/gridwin.cxx.old	2010-03-03 16:59:12.000000000 +0100
+++ sc/source/ui/view/gridwin.cxx	2010-03-03 16:59:14.000000000 +0100
@@ -3101,6 +3101,17 @@ void __EXPORT ScGridWindow::KeyInput(con
                 ShowNoteMarker( pViewData->GetCurX(), pViewData->GetCurY(), TRUE );
             return;
         }
+        if (aCode.GetCode() == KEY_BRACKETLEFT && aCode.GetModifier() == KEY_MOD1)
+        {
+            pViewSh->DetectiveMarkPred();
+            return;
+        }
+        if (aCode.GetCode() == KEY_BRACKETRIGHT && aCode.GetModifier() == KEY_MOD1)
+        {
+            pViewSh->DetectiveMarkSucc();
+            return;
+        }
+        
     }
 
     Window::KeyInput(rKEvt);
--- sc/source/ui/view/tabvwsh3.cxx.old	2009-10-08 16:17:09.000000000 +0200
+++ sc/source/ui/view/tabvwsh3.cxx	2010-03-03 16:59:14.000000000 +0100
@@ -407,13 +407,15 @@ void ScTabViewShell::Execute( SfxRequest
                     {
                         pViewData->ResetOldCursor();
                         SetCursor( nCol, nRow );
-                        AlignToCursor( nCol, nRow, SC_FOLLOW_JUMP );
                         rBindings.Invalidate( SID_CURRENTCELL );
                         rBindings.Update( nSlot );
 
                         if (!rReq.IsAPI())
                             rReq.Done();
                     }
+                    // align to cursor even if the cursor position hasn't changed, 
+                    // because the cursor may be set outside the visible area.
+                    AlignToCursor( nCol, nRow, SC_FOLLOW_JUMP );
 
                     rReq.SetReturnValue( SfxStringItem( SID_CURRENTCELL, aAddress ) );
                 }
--- sc/source/ui/view/viewfun6.cxx.old	2009-10-08 16:17:09.000000000 +0200
+++ sc/source/ui/view/viewfun6.cxx	2010-03-03 16:59:14.000000000 +0100
@@ -50,6 +50,13 @@
 #include "globstr.hrc"
 #include "sc.hrc"
 #include "fusel.hxx"
+#include "reftokenhelper.hxx"
+#include "externalrefmgr.hxx"
+
+#include <vector>
+
+using ::rtl::OUStringBuffer;
+using ::std::vector;
 
 //==================================================================
 
@@ -140,6 +147,136 @@ void ScViewFunc::DetectiveRefresh()
     RecalcPPT();
 }
 
+static void lcl_jumpToRange(const ScRange& rRange, ScViewData* pView, ScDocument* pDoc)
+{
+    String aAddrText;
+    rRange.Format(aAddrText, SCR_ABS_3D, pDoc);
+    SfxStringItem aPosItem(SID_CURRENTCELL, aAddrText);
+    SfxBoolItem aUnmarkItem(FN_PARAM_1, TRUE);        // remove existing selection
+    pView->GetDispatcher().Execute(
+        SID_CURRENTCELL, SFX_CALLMODE_SYNCHRON | SFX_CALLMODE_RECORD,
+        &aPosItem, &aUnmarkItem, 0L);
+}
+
+void ScViewFunc::MarkAndJumpToRanges(const ScRangeList& rRanges)
+{
+    ScViewData* pView = GetViewData();
+    ScDocShell* pDocSh = pView->GetDocShell();
+
+    ScRangeList aRanges(rRanges);
+    ScRange* p = aRanges.First();
+    ScRangeList aRangesToMark;
+    ScAddress aCurPos = pView->GetCurPos();
+    for (; p; p = aRanges.Next())
+    {
+        // Collect only those ranges that are on the same sheet as the current
+        // cursor.
+
+        if (p->aStart.Tab() == aCurPos.Tab())
+            aRangesToMark.Append(*p);
+    }
+
+    if (!aRangesToMark.Count())
+        return;
+
+    // Jump to the first range of all precedent ranges.
+    p = aRangesToMark.First();
+    lcl_jumpToRange(*p, pView, pDocSh->GetDocument());
+
+    for (; p; p = aRangesToMark.Next())
+        MarkRange(*p, false, true);
+}
+
+void ScViewFunc::DetectiveMarkPred()
+{
+    ScViewData* pView = GetViewData();
+    ScDocShell* pDocSh = pView->GetDocShell();
+    ScDocument* pDoc = pDocSh->GetDocument();
+    ScMarkData& rMarkData = pView->GetMarkData();
+    ScAddress aCurPos = pView->GetCurPos();
+    ScRangeList aRanges;
+    if (rMarkData.IsMarked() || rMarkData.IsMultiMarked())
+        rMarkData.FillRangeListWithMarks(&aRanges, false);
+    else
+        aRanges.Append(aCurPos);
+
+    vector<ScSharedTokenRef> aRefTokens;
+    pDocSh->GetDocFunc().DetectiveCollectAllPreds(aRanges, aRefTokens);
+
+    if (aRefTokens.empty())
+        // No precedents found.  Nothing to do.
+        return;
+
+    ScSharedTokenRef p = aRefTokens.front();
+    if (ScRefTokenHelper::isExternalRef(p))
+    {
+        // This is external.  Open the external document if available, and 
+        // jump to the destination.
+
+        sal_uInt16 nFileId = p->GetIndex();
+        ScExternalRefManager* pRefMgr = pDoc->GetExternalRefManager();
+        const String* pPath = pRefMgr->getExternalFileName(nFileId);
+
+        ScRange aRange;
+        if (pPath && ScRefTokenHelper::getRangeFromToken(aRange, p, true))
+        {
+            const String& rTabName = p->GetString();
+            OUStringBuffer aBuf;
+            aBuf.append(*pPath);
+            aBuf.append(sal_Unicode('#'));
+            aBuf.append(rTabName);
+            aBuf.append(sal_Unicode('.'));
+
+            String aRangeStr;
+            aRange.Format(aRangeStr, SCA_VALID); 
+            aBuf.append(aRangeStr);
+
+            ScGlobal::OpenURL(aBuf.makeStringAndClear(), String());
+        }
+        return;
+    }
+    else
+    {
+        ScRange aRange;
+        ScRefTokenHelper::getRangeFromToken(aRange, p, false);
+        if (aRange.aStart.Tab() != aCurPos.Tab())
+        {
+            // The first precedent range is on a different sheet.  Jump to it 
+            // immediately and forget the rest.
+            lcl_jumpToRange(aRange, pView, pDoc);
+            return;
+        }
+    }
+
+    ScRangeList aDestRanges;
+    ScRefTokenHelper::getRangeListFromTokens(aDestRanges, aRefTokens);
+    MarkAndJumpToRanges(aDestRanges);
+}
+
+void ScViewFunc::DetectiveMarkSucc()
+{
+    ScViewData* pView = GetViewData();
+    ScDocShell* pDocSh = pView->GetDocShell();
+    ScMarkData& rMarkData = pView->GetMarkData();
+    ScAddress aCurPos = pView->GetCurPos();
+    ScRangeList aRanges;
+    if (rMarkData.IsMarked() || rMarkData.IsMultiMarked())
+        rMarkData.FillRangeListWithMarks(&aRanges, false);
+    else
+        aRanges.Append(aCurPos);
+
+    vector<ScSharedTokenRef> aRefTokens;
+    pDocSh->GetDocFunc().DetectiveCollectAllSuccs(aRanges, aRefTokens);
+
+    if (aRefTokens.empty())
+        // No dependants found.  Nothing to do.
+        return;
+
+    ScRangeList aDestRanges;
+    ScRefTokenHelper::getRangeListFromTokens(aDestRanges, aRefTokens);
+    MarkAndJumpToRanges(aDestRanges);
+}
+
 //---------------------------------------------------------------------------
 
 void ScViewFunc::ShowNote( bool bShow )
