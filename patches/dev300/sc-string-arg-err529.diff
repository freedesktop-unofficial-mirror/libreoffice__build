diff -purN ooo300-m15-calc.new1/sc/source/core/inc/interpre.hxx ooo300-m15-calc.new2/sc/source/core/inc/interpre.hxx
--- sc/source/core/inc/interpre.hxx	2009-01-28 17:36:04.000000000 +0100
+++ sc/source/core/inc/interpre.hxx	2009-01-28 17:32:24.000000000 +0100
@@ -173,6 +173,16 @@ void ReplaceCell( ScAddress& );     // f
 void ReplaceCell( SCCOL& rCol, SCROW& rRow, SCTAB& rTab );  // for TableOp
 BOOL IsTableOpInRange( const ScRange& );
 ULONG GetCellNumberFormat( const ScAddress&, const ScBaseCell* );
+
+/** 
+ * @param bNoValueAsError when true, cell having no numerical value 
+ *                        (errCellNoValue) is interpreted as a legitimate
+ *                        no-value (errNoValue) error.
+ * @param bBlankAsZero when true, a cell having a blank text value is 
+ *                     interpreted as a no-value error.
+ * 
+ * @return double cell value.
+ */
 double GetCellValue( const ScAddress&, const ScBaseCell*, bool bNoValueAsError = false, bool bBlankAsZero = false );
 double GetCellValueOrZero( const ScAddress&, const ScBaseCell*, bool bBlankAsZero );
 double GetValueCellValue( const ScAddress&, const ScValueCell* );
diff -purN ooo300-m15-calc.new1/sc/source/core/tool/interpr4.cxx ooo300-m15-calc.new2/sc/source/core/tool/interpr4.cxx
--- sc/source/core/tool/interpr4.cxx	2009-01-28 17:36:04.000000000 +0100
+++ sc/source/core/tool/interpr4.cxx	2009-01-28 17:32:24.000000000 +0100
@@ -204,8 +204,15 @@ double ScInterpreter::GetCellValue( cons
     USHORT nErr = nGlobalError;
     nGlobalError = 0;
     double nVal = GetCellValueOrZero( rPos, pCell, bBlankAsZero );
-    if ( !nGlobalError || (!bNoValueAsError && nGlobalError == errCellNoValue) )
+    if (!nGlobalError)
+        // no global error.  good.
         nGlobalError = nErr;
+    else if (nGlobalError == errCellNoValue)
+        // Internal cell-no-value error.  If the caller wants to treat no
+        // value as error, then we need to translate this to a legitimate
+        // error number (#VALUE!). If not, we should re-assign the prior error
+        // number.
+        nGlobalError = bNoValueAsError ? errNoValue : nErr;
     return nVal;
 }
 
