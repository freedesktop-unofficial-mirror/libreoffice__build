---
 xmloff/source/chart/SchXMLChartContext.cxx |   51 ++++++++++++++++++++++++++++
 1 files changed, 51 insertions(+), 0 deletions(-)

diff --git xmloff/source/chart/SchXMLChartContext.cxx xmloff/source/chart/SchXMLChartContext.cxx
index e3d9727..729bfa3 100644
--- xmloff/source/chart/SchXMLChartContext.cxx
+++ xmloff/source/chart/SchXMLChartContext.cxx
@@ -67,13 +67,17 @@
 #include <com/sun/star/chart2/data/XDataSink.hpp>
 #include <com/sun/star/chart2/XDataSeriesContainer.hpp>
 #include <com/sun/star/chart2/XCoordinateSystemContainer.hpp>
+#include <com/sun/star/chart2/XCoordinateSystem.hpp>
 #include <com/sun/star/chart2/XChartTypeContainer.hpp>
+#include <com/sun/star/chart2/XChartType.hpp>
 #include <com/sun/star/chart2/XTitled.hpp>
 
 using namespace com::sun::star;
 using namespace ::xmloff::token;
 using ::rtl::OUString;
 using com::sun::star::uno::Reference;
+using ::com::sun::star::uno::Sequence;
+using ::com::sun::star::uno::UNO_QUERY;
 using namespace ::SchXMLTools;
 
 namespace
@@ -763,6 +767,48 @@ void lcl_ApplyDataFromRectangularRangeToDiagram(
     xTemplate->changeDiagramData( xNewDia, xDataSource, aArgs );
 }
 
+static void lcl_setStackTypeToAllChartTypes(
+    const Reference<chart2::XDiagram>& rDiagram, const uno::Any& rStacked, const uno::Any& rPercent)
+{
+    Reference<chart2::XCoordinateSystemContainer> xCoordContainer(rDiagram, uno::UNO_QUERY);
+    if (!xCoordContainer.is())
+        return;
+
+    Sequence< Reference<chart2::XCoordinateSystem> > xCoords = xCoordContainer->getCoordinateSystems();
+
+    sal_Int32 n = xCoords.getLength();
+    if (!n)
+        return;
+
+    for (sal_Int32 i = 0; i < n; ++i)
+    {
+        Reference<chart2::XChartTypeContainer> xChartTypeContainer(xCoords[i], UNO_QUERY);
+        if (!xChartTypeContainer.is())
+            continue;
+
+        Sequence< Reference<chart2::XChartType> > xChartTypes = xChartTypeContainer->getChartTypes();
+        sal_Int32 nChartTypeCount = xChartTypes.getLength();
+        for (sal_Int32 j = 0; j < nChartTypeCount; ++j)
+        {
+            Reference<beans::XPropertySet> xProp(xChartTypes[j], UNO_QUERY);
+            if (!xProp.is())
+                continue;
+
+            try
+            {
+                if (rStacked.hasValue())
+                    xProp->setPropertyValue(OUString::createFromAscii("Stacked"), rStacked);
+                if (rPercent.hasValue())
+                    xProp->setPropertyValue(OUString::createFromAscii("Percent"), rPercent);
+            }
+            catch (const beans::UnknownPropertyException&)
+            {
+                // fail silently.
+            }
+        }
+    }
+}
+
 void SchXMLChartContext::EndElement()
 {
     uno::Reference< chart::XChartDocument > xDoc = mrImportHelper.GetChartDocument();
@@ -940,6 +986,11 @@ void SchXMLChartContext::EndElement()
                 , SchXMLSeriesHelper::getDataSeriesIndexMapFromDiagram(xNewDiagram) );
         }
 
+        // For now, set the diagram's stack-related properties to all included
+        // chart types until we support chart types of mixed stack states.
+        lcl_setStackTypeToAllChartTypes(
+            xNewDoc->getFirstDiagram(), maSeriesDefaultsAndStyles.maStackedDefault, maSeriesDefaultsAndStyles.maPercentDefault);
+
         SchXMLSeries2Context::initSeriesPropertySets( maSeriesDefaultsAndStyles, uno::Reference< frame::XModel >(xDoc, uno::UNO_QUERY ) );
 
         //set defaults from diagram to the new series:
-- 
1.7.0.1

