--- sal/osl/w32/signal.c.~1.12.~	2008-04-10 13:22:35.000000000 +0200
+++ sal/osl/w32/signal.c	2008-10-21 20:53:05.000000000 +0200
@@ -37,8 +37,8 @@
 #include <osl/signal.h>
 #ifndef __MINGW32__
 #include <DbgHelp.h>
-#endif
 #include <ErrorRep.h>
+#endif /* __MINGW32__ */
 #include <systools/win32/uwinapi.h>
 
 typedef struct _oslSignalHandlerImpl
--- sal/systools/win32/uwinapi/GetLongPathNameW.cpp.~1.5.~	2008-04-10 14:18:12.000000000 +0200
+++ sal/systools/win32/uwinapi/GetLongPathNameW.cpp	2008-10-21 21:30:26.000000000 +0200
@@ -29,6 +29,13 @@
  ************************************************************************/
 
 #define UNICODE
+
+#ifdef __MINGW32__
+#undef _WIN32_WINNT
+#define _WIN32_WINNT 0x0500
+#include <windows.h>
+#endif /* __MINGW32__ */
+
 #include "macros.h"
 
 EXTERN_C DWORD WINAPI GetLongPathNameW_NT( LPCWSTR lpShortPath, LPWSTR lpLongPath, DWORD cchBuffer )
--- sal/systools/win32/uwinapi/GetLongPathNameA.cpp.~1.5.~	2008-04-10 14:17:56.000000000 +0200
+++ sal/systools/win32/uwinapi/GetLongPathNameA.cpp	2008-10-21 21:29:56.000000000 +0200
@@ -28,7 +28,13 @@
  *
  ************************************************************************/
 
+#ifdef __MINGW32__
+#undef _WIN32_WINNT
+#define _WIN32_WINNT 0x0500
+#include <windows.h>
+#endif /* __MINGW32__ */
+
 #include "macros.h"
 
 IMPLEMENT_THUNK( kernel32, WINDOWS, DWORD, WINAPI, GetLongPathNameA, ( LPCTSTR lpShortPath, LPTSTR lpLongPath, DWORD cchBuffer ) )
-#include "GetLongPathName.cpp"
\ Geen regeleindeteken (LF) aan einde van bestand
+#include "GetLongPathName.cpp"
--- sal/systools/win32/uwinapi/ResolveUnicows.cpp.~1.4.~	2008-06-06 19:02:43.000000000 +0200
+++ sal/systools/win32/uwinapi/ResolveUnicows.cpp	2008-10-21 21:53:19.000000000 +0200
@@ -1,7 +1,6 @@
 #ifdef __MINGW32__
 #define _GDI32_
 #include "macros.h"
-#include <multimon.h>
 extern "C" {
 extern HMODULE hModuleUnicowsDLL;
 }
--- sal/systools/win32/uwinapi/makefile.mk.~1.17.~	2008-04-10 14:26:19.000000000 +0200
+++ sal/systools/win32/uwinapi/makefile.mk	2008-10-21 23:43:31.000000000 +0200
@@ -160,7 +160,7 @@
 ALL: ALLTAR $(LB)$/libuwinapi.a
 
 $(LB)$/libuwinapi.a: $(MISC)$/uwinapi.def
-	dlltool --dllname uwinapi.dll --input-def=$(MISC)$/uwinapi.def --kill-at --output-lib=$(LB)$/libuwinapi.a
+    $(DLLTOOL) --dllname uwinapi.dll --input-def=$(MISC)$/uwinapi.def --kill-at --output-lib=$(LB)$/libuwinapi.a
 .ENDIF
 
 .INCLUDE : target.mk
--- sal/systools/win32/uwinapi/macros.h.pristine	2008-10-27 17:30:38.000000000 +0100
+++ sal/systools/win32/uwinapi/macros.h	2008-10-27 17:30:49.000000000 +0100
@@ -43,7 +43,7 @@
 #	ifdef UNICODE
 #		define _UNICODE
 #	endif
-#	include <TCHAR.H>
+#	include <tchar.h>
 #endif
 
 // Globally disable "warning C4100: unreferenced formal parameter" caused by
--- sal/inc/sal/mathconf.h.~1.6.~	2008-04-10 12:47:09.000000000 +0200
+++ sal/inc/sal/mathconf.h	2008-04-10 12:47:24.000000000 +0200
@@ -53,7 +53,7 @@
    problems, the SAL_MATH_FPEXCEPTIONS_OFF macro can be used to explicitly
    switch off exceptions (on Windows).
  */
-#if defined WNT
+#if defined (WNT) && ! defined (__MINGW32__)
 #define SAL_MATH_FPEXCEPTIONS_OFF() _control87( _MCW_EM, _MCW_EM )
 #else /* WNT */
 #define SAL_MATH_FPEXCEPTIONS_OFF()
@@ -61,16 +61,16 @@
 
 
 /* SAL_MATH_FINITE(d): test double d on INFINITY, NaN et al. */
-#if defined( WNT)
+#if defined (WNT) && ! defined (__MINGW32__)
 #define SAL_MATH_FINITE(d) _finite(d)
 #elif defined OS2
 #define SAL_MATH_FINITE(x) 				\
     ((sizeof (x) == sizeof (float)) ? __isfinitef(x)	\
     : (sizeof (x) == sizeof (double)) ? __isfinite(x)	\
     : __isfinitel(x))
-#elif defined LINUX || defined UNX
+#elif defined LINUX || defined UNX || defined __MINGW32__
 #define SAL_MATH_FINITE(d) finite(d)
-#else /* WNT, LINUX, UNX */
+#else /* WNT, LINUX, UNX, __MINGW32__ */
 #error "SAL_MATH_FINITE not defined"
 #endif /* WNT, LINUX, UNX */
 
