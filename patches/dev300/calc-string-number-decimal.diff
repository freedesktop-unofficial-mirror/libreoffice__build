diff --git sc/source/core/inc/interpre.hxx sc/source/core/inc/interpre.hxx
index b1ef2ef..2bf9e62 100644
--- sc/source/core/inc/interpre.hxx
+++ sc/source/core/inc/interpre.hxx
@@ -190,6 +190,9 @@ private:
 
     VolatileType meVolaileType;
 
+    sal_Unicode cDecSep;                // decimal separator 
+    sal_Unicode cGrpSep;                // group separator
+
 //---------------------------------Funktionen in interpre.cxx---------
 // nMust <= nAct <= nMax ? ok : PushError
 inline BOOL MustHaveParamCount( short nAct, short nMust );
diff --git sc/source/core/tool/interpr4.cxx sc/source/core/tool/interpr4.cxx
index 70540d1..d738dcf 100644
--- sc/source/core/tool/interpr4.cxx
+++ sc/source/core/tool/interpr4.cxx
@@ -257,7 +257,7 @@ double ScInterpreter::ConvertStringToValue( const String& rStr )
     sal_Int32 nParseEnd;
     // Decimal and group separator 0 => only integer and possibly exponent, 
     // stops at first non-digit non-sign.
-    fValue = ::rtl::math::stringToDouble( aStr, 0, 0, &eStatus, &nParseEnd);
+    fValue = ::rtl::math::stringToDouble( aStr, cDecSep, cGrpSep, &eStatus, &nParseEnd);
     sal_Int32 nLen;
     if (eStatus == rtl_math_ConversionStatus_Ok && nParseEnd < (nLen = aStr.getLength()))
     {
@@ -3652,6 +3652,10 @@ ScInterpreter::ScInterpreter( ScFormulaCell* pCell, ScDocument* pDoc,
         pStackObj = new ScTokenStack;
     }
     pStack = pStackObj->pPointer;
+
+    const i18n::LocaleDataItem& rLocaleData = ScGlobal::GetpLocaleData()->getLocaleItem();
+    cDecSep = rLocaleData.decimalSeparator.getLength() ? rLocaleData.decimalSeparator.getStr()[0] : 0;
+    cGrpSep = rLocaleData.thousandSeparator.getLength() ? rLocaleData.thousandSeparator.getStr()[0] : 0;
 }
 
 ScInterpreter::~ScInterpreter()
