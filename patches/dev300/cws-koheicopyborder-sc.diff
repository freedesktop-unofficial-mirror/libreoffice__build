From 3f7a46b65e60908b5f6181b71bbf14d5d859fe50 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:52:51 +0200
Subject: [PATCH 023/878] cws-koheicopyborder-sc.diff

---
 sc/source/ui/app/inputhdl.cxx       |    5 ++
 sc/source/ui/inc/gridwin.hxx        |    3 +
 sc/source/ui/inc/overlayobject.hxx  |   58 ++++++++++++++++++
 sc/source/ui/inc/tabview.hxx        |    1 +
 sc/source/ui/inc/viewdata.hxx       |   12 ++++
 sc/source/ui/view/cellsh1.cxx       |    9 +++-
 sc/source/ui/view/gridwin.cxx       |  114 ++++++++++++++++++++++++++++++++++-
 sc/source/ui/view/makefile.mk       |    2 +
 sc/source/ui/view/overlayobject.cxx |  104 +++++++++++++++++++++++++++++++
 sc/source/ui/view/tabview2.cxx      |    7 ++
 sc/source/ui/view/tabview3.cxx      |    1 +
 sc/source/ui/view/viewdata.cxx      |    1 +
 sc/source/ui/view/viewfunc.cxx      |    4 +
 13 files changed, 319 insertions(+), 2 deletions(-)
 create mode 100644 sc/source/ui/inc/overlayobject.hxx
 create mode 100644 sc/source/ui/view/overlayobject.cxx

diff --git a/sc/source/ui/app/inputhdl.cxx b/sc/source/ui/app/inputhdl.cxx
index 3a68ff9..6020eb7 100644
--- a/sc/source/ui/app/inputhdl.cxx
+++ b/sc/source/ui/app/inputhdl.cxx
@@ -2052,6 +2052,7 @@ IMPL_LINK( ScInputHandler, ModifyHdl, void *, EMPTYARG )
 
 BOOL ScInputHandler::DataChanging( sal_Unicode cTyped, BOOL bFromCommand )		// return TRUE = new view created
 {
+    pActiveViewSh->GetViewData()->SetPasteMode( SC_PASTE_NONE );
     bInOwnChange = TRUE;				// disable ModifyHdl (reset in DataChanged)
 
     if ( eMode == SC_INPUT_NONE )
@@ -2272,6 +2273,10 @@ void ScInputHandler::SetMode( ScInputMode eNewMode )
         return;
     }
 
+    if (eNewMode != SC_INPUT_NONE)
+        // Disable paste mode when edit mode starts.
+        pActiveViewSh->GetViewData()->SetPasteMode( SC_PASTE_NONE );
+
     bInOwnChange = TRUE;				// disable ModifyHdl (reset below)
 
     ScInputMode eOldMode = eMode;
diff --git a/sc/source/ui/inc/gridwin.hxx b/sc/source/ui/inc/gridwin.hxx
index 98dad89..04e2ce3 100644
--- a/sc/source/ui/inc/gridwin.hxx
+++ b/sc/source/ui/inc/gridwin.hxx
@@ -107,6 +107,7 @@ private:
     // #114409#
     ::sdr::overlay::OverlayObjectList*				mpOOCursors;
     ::sdr::overlay::OverlayObjectList*              mpOOSelection;
+    ::sdr::overlay::OverlayObjectList*              mpOOSelectionBorder;
     ::sdr::overlay::OverlayObjectList*              mpOOAutoFill;
     ::sdr::overlay::OverlayObjectList*              mpOODragRect;
     ::sdr::overlay::OverlayObjectList*              mpOOHeader;
@@ -379,6 +380,8 @@ public:
     void CursorChanged();
     void DrawLayerCreated();
 
+    void            DeleteCopySourceOverlay();
+    void            UpdateCopySourceOverlay();
     void            DeleteCursorOverlay();
     void            UpdateCursorOverlay();
     void            DeleteSelectionOverlay();
diff --git a/sc/source/ui/inc/overlayobject.hxx b/sc/source/ui/inc/overlayobject.hxx
new file mode 100644
index 0000000..3d10407
--- /dev/null
+++ b/sc/source/ui/inc/overlayobject.hxx
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: gridwin.hxx,v $
+ * $Revision: 1.30 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef __SC_OVERLAYOBJECT_HXX__
+#define __SC_OVERLAYOBJECT_HXX__
+
+#include "svx/sdr/overlay/overlayobject.hxx"
+
+class OutputDevice;
+class Window;
+
+class ScOverlayDashedBorder : public ::sdr::overlay::OverlayObject
+{
+public:
+    ScOverlayDashedBorder(const ::basegfx::B2DRange& rRange, const Color& rColor, Window* pWin);
+    virtual ~ScOverlayDashedBorder();
+
+    virtual void Trigger(sal_uInt32 nTime);
+
+    virtual void stripeDefinitionHasChanged();
+
+protected:
+    virtual drawinglayer::primitive2d::Primitive2DSequence createOverlayObjectPrimitive2DSequence();
+
+private:
+    ::basegfx::B2DRange maRange;
+    Window* mpParent;
+    bool mbToggle;
+};
+
+#endif
diff --git a/sc/source/ui/inc/tabview.hxx b/sc/source/ui/inc/tabview.hxx
index 7c00f9a..d3c2a86 100644
--- a/sc/source/ui/inc/tabview.hxx
+++ b/sc/source/ui/inc/tabview.hxx
@@ -434,6 +434,7 @@ public:
 
     void			CreateAnchorHandles(SdrHdlList& rHdl, const ScAddress& rAddress);
 
+    void            UpdateCopySourceOverlay();
     void            UpdateSelectionOverlay();
     void            UpdateShrinkOverlay();
     void            UpdateAllOverlays();
diff --git a/sc/source/ui/inc/viewdata.hxx b/sc/source/ui/inc/viewdata.hxx
index 2d70e56..4c04f25 100644
--- a/sc/source/ui/inc/viewdata.hxx
+++ b/sc/source/ui/inc/viewdata.hxx
@@ -86,6 +86,13 @@ enum ScMarkType
 #endif
 };
 
+enum ScPasteFlags
+{
+    SC_PASTE_NONE   = 0,    // No flags specified
+    SC_PASTE_MODE   = 1,    // Enable paste-mode
+    SC_PASTE_BORDER = 2,    // Show a border around the source cells
+};
+
 class ScDocShell;
 class ScDocument;
 class ScDBFunc;
@@ -210,6 +217,8 @@ private:
     SCCOL				nTabStartCol;				// fuer Enter nach Tab
     ScRange				aDelRange;					// fuer AutoFill-Loeschen
 
+    ScPasteFlags        nPasteFlags;
+
     ScSplitPos          eEditActivePart;            // the part that was active when edit mode was started
     BOOL				bEditActive[4];				// aktiv?
     BOOL				bActive;					// aktives Fenster ?
@@ -299,6 +308,8 @@ public:
     SCCOL			GetFixPosX() const						{ return pThisTab->nFixPosX; }
     SCROW			GetFixPosY() const						{ return pThisTab->nFixPosY; }
     BOOL			IsPagebreakMode() const					{ return bPagebreak; }
+    bool            IsPasteMode() const                     { return nPasteFlags & SC_PASTE_MODE; }
+    bool            ShowPasteSource() const                 { return nPasteFlags & SC_PASTE_BORDER; }
 
     void			SetPosX( ScHSplitPos eWhich, SCCOL nNewPosX );
     void			SetPosY( ScVSplitPos eWhich, SCROW nNewPosY );
@@ -313,6 +324,7 @@ public:
     void			SetFixPosX( SCCOL nPos )						{ pThisTab->nFixPosX = nPos; }
     void			SetFixPosY( SCROW nPos )						{ pThisTab->nFixPosY = nPos; }
     void			SetPagebreakMode( BOOL bSet );
+    void            SetPasteMode ( ScPasteFlags nFlags )            { nPasteFlags = nFlags; }
 
     void            SetZoomType( SvxZoomType eNew, BOOL bAll );
     void            SetZoom( const Fraction& rNewX, const Fraction& rNewY, BOOL bAll );
diff --git a/sc/source/ui/view/cellsh1.cxx b/sc/source/ui/view/cellsh1.cxx
index d5ad3e6..0aec70d 100644
--- a/sc/source/ui/view/cellsh1.cxx
+++ b/sc/source/ui/view/cellsh1.cxx
@@ -1162,11 +1162,16 @@ void ScCellShell::ExecuteEdit( SfxRequest& rReq )
         //	Clipboard
         //
 
+
         case SID_COPY:				// fuer Grafiken in DrawShell
             {
-                WaitObject aWait( GetViewData()->GetDialogParent() );
+                ScViewData* pViewData = GetViewData();
+                WaitObject aWait( pViewData->GetDialogParent() );
                 pTabViewShell->CopyToClip( NULL, FALSE, FALSE, TRUE );
                 rReq.Done();
+                pViewData->SetPasteMode( (ScPasteFlags) (SC_PASTE_MODE | SC_PASTE_BORDER) );
+                pTabViewShell->ShowCursor();
+                pTabViewShell->UpdateCopySourceOverlay();
             }
             break;
 
@@ -1175,6 +1180,8 @@ void ScCellShell::ExecuteEdit( SfxRequest& rReq )
                 WaitObject aWait( GetViewData()->GetDialogParent() );
                 pTabViewShell->CutToClip( NULL, TRUE );
                 rReq.Done();
+                GetViewData()->SetPasteMode( SC_PASTE_MODE );
+                pTabViewShell->UpdateCopySourceOverlay();
             }
             break;
 
diff --git a/sc/source/ui/view/gridwin.cxx b/sc/source/ui/view/gridwin.cxx
index e7e6c64..26111b1 100644
--- a/sc/source/ui/view/gridwin.cxx
+++ b/sc/source/ui/view/gridwin.cxx
@@ -119,6 +119,9 @@
 #include "tabprotection.hxx"
 #include "postit.hxx"
 #include "dpcontrol.hxx"
+#include "clipparam.hxx"
+#include "cellsh.hxx"
+#include "overlayobject.hxx"
 
 #include "drawview.hxx"
 #include <svx/sdrpagewindow.hxx>
@@ -358,6 +361,7 @@ ScGridWindow::ScGridWindow( Window* pParent, ScViewData* pData, ScSplitPos eWhic
             DragSourceHelper( this ),
             mpOOCursors( NULL ),
             mpOOSelection( NULL ),
+            mpOOSelectionBorder( NULL ),
             mpOOAutoFill( NULL ),
             mpOODragRect( NULL ),
             mpOOHeader( NULL ),
@@ -2942,12 +2946,30 @@ void ScGridWindow::SelectForContextMenu( const Point& rPosPixel )
     }
 }
 
+static void ClearSingleSelection( ScViewData* pViewData )
+{
+    SCCOL nX;
+    SCROW nY;
+    ScTransferObj* pTransObj = ScTransferObj::GetOwnClipboard(
+        pViewData->GetActiveWin() );
+    if (!pTransObj)
+        return;
+
+    ScDocument* pClipDoc = pTransObj->GetDocument();
+    pClipDoc->GetClipArea( nX, nY, TRUE );
+    if (nX == 0 && nY == 0)
+    {
+        ScTabView* pView = pViewData->GetView();
+        pView->Unmark();
+    }
+}
+
 void __EXPORT ScGridWindow::KeyInput(const KeyEvent& rKEvt)
 {
     // #96965# Cursor control for ref input dialog
+    const KeyCode& rKeyCode = rKEvt.GetKeyCode();
     if( SC_MOD()->IsRefDialogOpen() )
     {
-        const KeyCode& rKeyCode = rKEvt.GetKeyCode();
         if( !rKeyCode.GetModifier() && (rKeyCode.GetCode() == KEY_F2) )
         {
             SC_MOD()->EndReference();
@@ -2962,9 +2984,35 @@ void __EXPORT ScGridWindow::KeyInput(const KeyEvent& rKEvt)
             return;
         }
     }
+    else if( rKeyCode.GetCode() == KEY_RETURN && pViewData->IsPasteMode() )
+    {
+        ScTabViewShell* pTabViewShell = pViewData->GetViewShell();
+
+        ScCellShell::PasteFromClipboard( pViewData, pTabViewShell, FALSE );
+        ClearSingleSelection( pViewData );
+
+        uno::Reference<datatransfer::clipboard::XClipboard> xSystemClipboard =
+            TransferableHelper::GetSystemClipboard();
+        if (xSystemClipboard.is())
+        {
+            xSystemClipboard->setContents(
+                    uno::Reference<datatransfer::XTransferable>(),
+                    uno::Reference<datatransfer::clipboard::XClipboardOwner>());
+        }
+
+        // hide the border around the copy source
+        pViewData->SetPasteMode( SC_PASTE_NONE );
+        UpdateCopySourceOverlay();
+        return;
+    }
     // wenn semi-Modeless-SfxChildWindow-Dialog oben, keine KeyInputs:
     else if( !pViewData->IsAnyFillMode() )
     {
+        if (rKeyCode.GetCode() == KEY_ESCAPE)
+        {
+            pViewData->SetPasteMode( SC_PASTE_NONE );
+            UpdateCopySourceOverlay();
+        }
         //	query for existing note marker before calling ViewShell's keyboard handling
         //	which may remove the marker
         BOOL bHadKeyMarker = ( pNoteMarker && pNoteMarker->IsByKeyboard() );
@@ -5047,6 +5095,7 @@ void ScGridWindow::CursorChanged()
 void ScGridWindow::ImpCreateOverlayObjects()
 {
     UpdateCursorOverlay();
+    UpdateCopySourceOverlay();
     UpdateSelectionOverlay();
     UpdateAutoFillOverlay();
     UpdateDragRectOverlay();
@@ -5058,6 +5107,7 @@ void ScGridWindow::ImpCreateOverlayObjects()
 void ScGridWindow::ImpDestroyOverlayObjects()
 {
     DeleteCursorOverlay();
+    DeleteCopySourceOverlay();
     DeleteSelectionOverlay();
     DeleteAutoFillOverlay();
     DeleteDragRectOverlay();
@@ -5078,6 +5128,68 @@ void ScGridWindow::DeleteCursorOverlay()
     DELETEZ( mpOOCursors );
 }
 
+void ScGridWindow::DeleteCopySourceOverlay()
+{
+    DELETEZ( mpOOSelectionBorder );
+}
+
+void ScGridWindow::UpdateCopySourceOverlay()
+{
+    MapMode aDrawMode = GetDrawMapMode();
+    MapMode aOldMode = GetMapMode();
+    if ( aOldMode != aDrawMode )
+        SetMapMode( aDrawMode );
+
+    DeleteCopySourceOverlay();
+
+    if (!pViewData->ShowPasteSource())
+        return;
+    ::sdr::overlay::OverlayManager* pOverlayManager = getOverlayManager();
+    if (!pOverlayManager)
+        return;
+    ScTransferObj* pTransObj = ScTransferObj::GetOwnClipboard( pViewData->GetActiveWin() );
+    if (!pTransObj)
+        return;
+    ScDocument* pClipDoc = pTransObj->GetDocument();
+    if (!pClipDoc)
+        return;
+
+    SCTAB nCurTab = pViewData->GetCurPos().Tab();
+
+    ScClipParam& rClipParam = pClipDoc->GetClipParam();
+    mpOOSelectionBorder = new ::sdr::overlay::OverlayObjectList;
+    for (ScRange* p = rClipParam.maRanges.First(); p; p = rClipParam.maRanges.Next())
+    {
+        if (p->aStart.Tab() != nCurTab)
+            continue;
+
+        SCCOL nClipStartX = p->aStart.Col();
+        SCROW nClipStartY = p->aStart.Row();
+        SCCOL nClipEndX   = p->aEnd.Col();
+        SCROW nClipEndY   = p->aEnd.Row();
+
+        Point aClipStartScrPos = pViewData->GetScrPos( nClipStartX, nClipStartY, eWhich );
+        Point aClipEndScrPos   = pViewData->GetScrPos( nClipEndX + 1, nClipEndY + 1, eWhich );
+        aClipStartScrPos -= Point(1, 1);
+        long nSizeXPix = aClipEndScrPos.X() - aClipStartScrPos.X();
+        long nSizeYPix = aClipEndScrPos.Y() - aClipStartScrPos.Y();
+
+        Rectangle aRect( aClipStartScrPos, Size(nSizeXPix, nSizeYPix) );
+
+
+        Color aHighlight = GetSettings().GetStyleSettings().GetHighlightColor();
+
+        Rectangle aLogic = PixelToLogic(aRect, aDrawMode);
+        ::basegfx::B2DRange aRange(aLogic.Left(), aLogic.Top(), aLogic.Right(), aLogic.Bottom());
+        ScOverlayDashedBorder* pDashedBorder = new ScOverlayDashedBorder(aRange, aHighlight, this);
+        pOverlayManager->add(*pDashedBorder);
+        mpOOSelectionBorder->append(*pDashedBorder);
+    }
+
+    if ( aOldMode != aDrawMode )
+        SetMapMode( aOldMode );
+}
+
 void ScGridWindow::UpdateCursorOverlay()
 {
     MapMode aDrawMode = GetDrawMapMode();
diff --git a/sc/source/ui/view/makefile.mk b/sc/source/ui/view/makefile.mk
index 64c0be6..b1523ed 100644
--- a/sc/source/ui/view/makefile.mk
+++ b/sc/source/ui/view/makefile.mk
@@ -94,6 +94,7 @@ SLOFILES =  \
         $(SLO)$/output.obj \
         $(SLO)$/output2.obj \
         $(SLO)$/output3.obj \
+        $(SLO)$/overlayobject.obj \
         $(SLO)$/gridmerg.obj \
         $(SLO)$/invmerge.obj \
         $(SLO)$/select.obj \
@@ -147,6 +148,7 @@ EXCEPTIONSFILES= \
     $(SLO)$/gridwin.obj \
     $(SLO)$/invmerge.obj \
     $(SLO)$/output2.obj \
+    $(SLO)$/overlayobject.obj \
     $(SLO)$/pfuncache.obj \
     $(SLO)$/spelldialog.obj \
     $(SLO)$/cellsh1.obj \
diff --git a/sc/source/ui/view/overlayobject.cxx b/sc/source/ui/view/overlayobject.cxx
new file mode 100644
index 0000000..7f44f45
--- /dev/null
+++ b/sc/source/ui/view/overlayobject.cxx
@@ -0,0 +1,104 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: gridwin.hxx,v $
+ * $Revision: 1.30 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_sc.hxx"
+
+#include "overlayobject.hxx"
+#include "vcl/outdev.hxx"
+#include "vcl/lineinfo.hxx"
+#include "vcl/salbtype.hxx"
+#include "vcl/window.hxx"
+#include "tools/fract.hxx"
+#include "basegfx/range/b2drange.hxx"
+#include "basegfx/polygon/b2dpolygon.hxx"
+#include "basegfx/polygon/b2dpolygontools.hxx"
+#include "svx/sdr/overlay/overlaymanager.hxx"
+#include "drawinglayer/primitive2d/baseprimitive2d.hxx"
+#include "drawinglayer/primitive2d/polypolygonprimitive2d.hxx"
+
+using ::sdr::overlay::OverlayObject;
+using ::sdr::overlay::OverlayManager;
+using ::drawinglayer::primitive2d::Primitive2DSequence;
+
+#define DASH_UPDATE_INTERVAL 180    // in msec
+
+ScOverlayDashedBorder::ScOverlayDashedBorder(const ::basegfx::B2DRange& rRange, const Color& rColor, Window* pWin) :
+    OverlayObject(rColor),
+    mpParent(pWin),
+    mbToggle(true)
+{
+    mbAllowsAnimation = true;
+    maRange = rRange;
+}
+
+ScOverlayDashedBorder::~ScOverlayDashedBorder()
+{
+}
+
+void ScOverlayDashedBorder::Trigger(sal_uInt32 nTime)
+{
+    OverlayManager* pMgr = getOverlayManager();
+    if (pMgr)
+    {
+        SetTime(nTime + DASH_UPDATE_INTERVAL);
+        mbToggle = !mbToggle;
+        pMgr->InsertEvent(this);
+        objectChange();
+    }
+}
+
+void ScOverlayDashedBorder::stripeDefinitionHasChanged()
+{
+    objectChange();
+}
+
+Primitive2DSequence ScOverlayDashedBorder::createOverlayObjectPrimitive2DSequence()
+{
+    using ::basegfx::B2DPolygon;
+    using ::basegfx::B2DPolyPolygon;
+
+    OverlayManager* pMgr = getOverlayManager();
+    if (!pMgr)
+        return Primitive2DSequence();
+
+    basegfx::BColor aColorA = pMgr->getStripeColorA().getBColor();
+    basegfx::BColor aColorB = pMgr->getStripeColorB().getBColor();
+    if (!mbToggle)
+        ::std::swap(aColorA, aColorB);
+
+    const basegfx::B2DPolygon aPoly = basegfx::tools::createPolygonFromRect(maRange);
+    B2DPolyPolygon aPolygon(aPoly);
+    const drawinglayer::primitive2d::Primitive2DReference aReference(
+        new drawinglayer::primitive2d::PolyPolygonMarkerPrimitive2D(
+            aPolygon, aColorA, aColorB, pMgr->getStripeLengthPixel()));
+
+    return drawinglayer::primitive2d::Primitive2DSequence(&aReference, 1);
+}
diff --git a/sc/source/ui/view/tabview2.cxx b/sc/source/ui/view/tabview2.cxx
index 3d52a62..631a9bd 100644
--- a/sc/source/ui/view/tabview2.cxx
+++ b/sc/source/ui/view/tabview2.cxx
@@ -411,6 +411,13 @@ void ScTabView::MarkCursor( SCCOL nCurX, SCROW nCurY, SCTAB nCurZ,
         aHdrFunc.SetAnchorFlag( FALSE );
 }
 
+void ScTabView::UpdateCopySourceOverlay()
+{
+    for (sal_uInt8 i = 0; i < 4; ++i)
+        if (pGridWin[i] && pGridWin[i]->IsVisible())
+            pGridWin[i]->UpdateCopySourceOverlay();
+}
+
 void ScTabView::UpdateSelectionOverlay()
 {
     for (USHORT i=0; i<4; i++)
diff --git a/sc/source/ui/view/tabview3.cxx b/sc/source/ui/view/tabview3.cxx
index a9bc595..9f388fa 100644
--- a/sc/source/ui/view/tabview3.cxx
+++ b/sc/source/ui/view/tabview3.cxx
@@ -1814,6 +1814,7 @@ void ScTabView::MakeEditView( ScEditEngineDefaulter* pEngine, SCCOL nCol, SCROW
 
                     pGridWin[i]->DeleteCursorOverlay();
                     pGridWin[i]->DeleteAutoFillOverlay();
+                    pGridWin[i]->DeleteCopySourceOverlay();
 
                     // flush OverlayManager before changing MapMode to text edit
                     pGridWin[i]->flushOverlayManager();
diff --git a/sc/source/ui/view/viewdata.cxx b/sc/source/ui/view/viewdata.cxx
index 02c07f8..a661003 100644
--- a/sc/source/ui/view/viewdata.cxx
+++ b/sc/source/ui/view/viewdata.cxx
@@ -316,6 +316,7 @@ ScViewData::ScViewData( ScDocShell* pDocSh, ScTabViewShell* pViewSh )
         eRefType	( SC_REFTYPE_NONE ),
         nTabNo		( 0 ),
         nRefTabNo	( 0 ),
+        nPasteFlags ( SC_PASTE_NONE ),
         eEditActivePart( SC_SPLIT_BOTTOMLEFT ),
         bActive		( TRUE ),					//! wie initialisieren?
         bIsRefMode	( FALSE ),
diff --git a/sc/source/ui/view/viewfunc.cxx b/sc/source/ui/view/viewfunc.cxx
index 0449a0a..edd248a 100644
--- a/sc/source/ui/view/viewfunc.cxx
+++ b/sc/source/ui/view/viewfunc.cxx
@@ -1894,6 +1894,10 @@ void ScViewFunc::DeleteMulti( BOOL bRows, BOOL bRecord )
 
 void ScViewFunc::DeleteContents( USHORT nFlags, BOOL bRecord )
 {
+    ScViewData* pViewData = GetViewData();
+    pViewData->SetPasteMode( SC_PASTE_NONE );
+    pViewData->GetViewShell()->UpdateCopySourceOverlay();
+
     // nur wegen Matrix nicht editierbar? Attribute trotzdem ok
     BOOL bOnlyNotBecauseOfMatrix;
     BOOL bEditable = SelectionEditable( &bOnlyNotBecauseOfMatrix );
-- 
1.7.0.1

