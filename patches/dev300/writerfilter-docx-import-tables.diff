Index: writerfilter/inc/dmapper/DomainMapper.hxx
===================================================================
--- writerfilter/inc/dmapper/DomainMapper.hxx	(révision 267004)
+++ writerfilter/inc/dmapper/DomainMapper.hxx	(copie de travail)
@@ -120,8 +120,8 @@
 
     void sprm( Sprm& sprm, ::boost::shared_ptr<PropertyMap> pContext, SprmType = SPRM_DEFAULT );
 
-    void PushStyleSheetProperties( ::boost::shared_ptr<PropertyMap> pStyleProperties );
-    void PopStyleSheetProperties();
+    void PushStyleSheetProperties( ::boost::shared_ptr<PropertyMap> pStyleProperties, bool bAffectTableMngr = false );
+    void PopStyleSheetProperties( bool bAffectTableMngr = false );
     
     void PushListProperties( ::boost::shared_ptr<PropertyMap> pListProperties );
     void PopListProperties();
Index: writerfilter/source/dmapper/BorderHandler.hxx
===================================================================
--- writerfilter/source/dmapper/BorderHandler.hxx	(révision 267004)
+++ writerfilter/source/dmapper/BorderHandler.hxx	(copie de travail)
@@ -63,6 +63,7 @@
     sal_Int32       m_nLineDistance;
     bool            m_bOOXML;
 
+    bool                                        m_aFilledLines[BORDER_COUNT];
     ::com::sun::star::table::BorderLine         m_aBorderLines[BORDER_COUNT];
 
 public:
Index: writerfilter/source/dmapper/PropertyMap.cxx
===================================================================
--- writerfilter/source/dmapper/PropertyMap.cxx	(révision 267004)
+++ writerfilter/source/dmapper/PropertyMap.cxx	(copie de travail)
@@ -724,8 +724,8 @@
 
         sal_Int32 nCharWidth = 423; //240 twip/ 12 pt
         //todo: is '0' the right index here?
-        const StyleSheetEntry* pEntry = rDM_Impl.GetStyleSheetTable()->FindStyleSheetByISTD(::rtl::OUString::valueOf(static_cast<sal_Int32>(0), 16));
-        if( pEntry )
+        const StyleSheetEntryPtr pEntry = rDM_Impl.GetStyleSheetTable()->FindStyleSheetByISTD(::rtl::OUString::valueOf(static_cast<sal_Int32>(0), 16));
+        if( pEntry.get( ) )
         {
             PropertyMap::iterator aElement_ = pEntry->pProperties->find(PropertyDefinition( PROP_CHAR_HEIGHT_ASIAN, false ));
             if( aElement_ != pEntry->pProperties->end())
Index: writerfilter/source/dmapper/DomainMapperTableHandler.cxx
===================================================================
--- writerfilter/source/dmapper/DomainMapperTableHandler.cxx	(révision 267004)
+++ writerfilter/source/dmapper/DomainMapperTableHandler.cxx	(copie de travail)
@@ -68,7 +68,22 @@
         {
             rtl::OUString aOUStr = rPropSupplier.GetName( aMapIter->first.eId );
             rtl::OString aOStr(aOUStr.getStr(), aOUStr.getLength(),  RTL_TEXTENCODING_ASCII_US );
-            clog << aOStr.getStr() << '-';
+            clog << aOStr.getStr();
+
+            table::BorderLine aLine;
+            sal_Int32 nColor; 
+            if ( aMapIter->second >>= aLine )
+            {
+                clog << ": BorderLine ( Color: " << aLine.Color;
+                clog << ", Inner: " << aLine.InnerLineWidth;
+                clog << ", Outer: " << aLine.OuterLineWidth << ") ";
+            }
+            else if ( aMapIter->second >>= nColor )
+            {
+                clog << ": Color ( " << nColor << " ) ";
+            }
+
+            clog << " - ";
         }
         clog << endl;
     }
@@ -106,21 +121,121 @@
 /*-- 22.02.2008 10:18:37---------------------------------------------------
 
   -----------------------------------------------------------------------*/
-PropertyMapPtr lcl_SearchParentStyleSheetAndMergeProperties(const StyleSheetEntry* pStyleSheet, StyleSheetTablePtr pStyleSheetTable)
+PropertyMapPtr lcl_SearchParentStyleSheetAndMergeProperties(const StyleSheetEntryPtr pStyleSheet, StyleSheetTablePtr pStyleSheetTable)
 {
     PropertyMapPtr pRet;
     if( pStyleSheet->sBaseStyleIdentifier.getLength())
     {
-        const StyleSheetEntry* pParentStyleSheet = pStyleSheetTable->FindStyleSheetByISTD( pStyleSheet->sBaseStyleIdentifier );
+        const StyleSheetEntryPtr pParentStyleSheet = pStyleSheetTable->FindStyleSheetByISTD( pStyleSheet->sBaseStyleIdentifier );
         pRet = lcl_SearchParentStyleSheetAndMergeProperties( pParentStyleSheet, pStyleSheetTable );
     }    
     else
     {
         pRet.reset( new PropertyMap );
     }
+
     pRet->insert(  pStyleSheet->pProperties, true );
     return pRet;
 }
+
+void lcl_mergeBorder( PropertyIds nId, PropertyMapPtr pOrig, PropertyMapPtr pDest )
+{
+    PropertyDefinition aDef( nId, false );
+    PropertyMap::iterator pOrigIt = pOrig->find( aDef );
+
+    if ( pOrigIt != pOrig->end( ) )
+    {
+        pDest->Insert( nId, false, pOrigIt->second, false );
+    }
+}
+
+void lcl_computeCellBorders( PropertyMapPtr pTableBorders, PropertyMapPtr pCellProps, 
+        sal_Int32 nCell, sal_Int32 nRow, bool bIsEndCol, bool bIsEndRow )
+{
+    PropertyDefinition aVertPDef( META_PROP_VERTICAL_BORDER, false );
+    PropertyDefinition aHorizPDef( META_PROP_HORIZONTAL_BORDER, false );
+
+    PropertyMap::iterator aVerticalIter = pCellProps->find( aVertPDef );
+    PropertyMap::iterator aHorizontalIter = pCellProps->find( aHorizPDef );
+
+    // Handle the vertical and horizontal borders  
+    bool bHasVert = ( aVerticalIter != pCellProps->end(  ) );
+    uno::Any aVertProp;
+    if ( !bHasVert )
+    {
+        aVerticalIter = pTableBorders->find( aVertPDef );
+        bHasVert = ( aVerticalIter != pTableBorders->end( ) );
+        if ( bHasVert )
+            aVertProp = aVerticalIter->second;
+    }
+    else
+    {
+        aVertProp = aVerticalIter->second;
+        pCellProps->erase( aVerticalIter );
+    }
+
+    bool bHasHoriz = ( aHorizontalIter != pCellProps->end(  ) );
+    uno::Any aHorizProp;
+    if ( !bHasHoriz )
+    {
+        aHorizontalIter = pTableBorders->find( aHorizPDef );
+        bHasHoriz = ( aHorizontalIter != pTableBorders->end( ) );
+        if ( bHasHoriz )
+            aHorizProp = aHorizontalIter->second;
+    }
+    else
+    {
+        aHorizProp = aHorizontalIter->second;
+        pCellProps->erase( aHorizontalIter );
+    }
+
+    if ( nCell == 0 )
+    {
+        lcl_mergeBorder( PROP_LEFT_BORDER, pTableBorders, pCellProps );
+        if ( bHasVert )
+            pCellProps->Insert( PROP_RIGHT_BORDER, false, aVertProp, false );
+    }
+    
+    if ( bIsEndCol )
+    {
+        lcl_mergeBorder( PROP_RIGHT_BORDER, pTableBorders, pCellProps );
+        if ( bHasVert )
+            pCellProps->Insert( PROP_LEFT_BORDER, false, aVertProp, false );
+    }
+    
+    if ( nCell > 0 && !bIsEndCol )
+    {
+        if ( bHasVert )
+        {
+            pCellProps->Insert( PROP_RIGHT_BORDER, false, aVertProp, false );
+            pCellProps->Insert( PROP_LEFT_BORDER, false, aVertProp, false );
+        }
+    }
+
+    if ( nRow == 0 )
+    {
+        lcl_mergeBorder( PROP_TOP_BORDER, pTableBorders, pCellProps );
+        if ( bHasHoriz )
+            pCellProps->Insert( PROP_BOTTOM_BORDER, false, aHorizProp, false );
+    }
+
+    if ( bIsEndRow )
+    {
+        lcl_mergeBorder( PROP_BOTTOM_BORDER, pTableBorders, pCellProps );
+        if ( bHasHoriz )
+            pCellProps->Insert( PROP_TOP_BORDER, false, aHorizProp, false );
+    }
+    
+    if ( nRow > 0 && !bIsEndRow )
+    {
+        if ( bHasHoriz )
+        {
+            pCellProps->Insert( PROP_TOP_BORDER, false, aHorizProp, false );
+            pCellProps->Insert( PROP_BOTTOM_BORDER, false, aHorizProp, false );
+        }
+    }
+}
+
 void DomainMapperTableHandler::endTable()
 {
 #if OSL_DEBUG_LEVEL > 1
@@ -140,7 +255,7 @@
     if( nTblPropSize )
     {
         const beans::PropertyValues aDebugTbl = m_aTableProperties->GetPropertyValues();
-        for( sal_Int32  nDebug = 0; nDebug < nTblPropSize; ++nDebug)
+        for( sal_uInt32 nDebug = 0; nDebug < nTblPropSize; ++nDebug)
         {
             const ::rtl::OUString sName = aDebugTbl[nDebug].Name;
             sNames += sName;
@@ -156,6 +271,13 @@
     sal_Int32 nLeftBorderDistance, nRightBorderDistance, nTopBorderDistance, nBottomBorderDistance;
     nLeftBorderDistance = nRightBorderDistance = DEF_BORDER_DIST;
     nTopBorderDistance = nBottomBorderDistance = 0;
+
+    PropertyMapPtr pTableDefaults( new PropertyMap );
+    PropertyMapPtr pTableBorders( new PropertyMap );
+        
+    // will receive the table style if any
+    TableStyleSheetEntry* pTableStyle = NULL;
+
     if( m_aTableProperties.get() )
     {
         //create properties from the table attributes
@@ -169,35 +291,31 @@
                                 m_aTableProperties->find( PropertyDefinition( META_PROP_TABLE_STYLE_NAME, false ) );
         if(aTableStyleIter != m_aTableProperties->end())
         {
-            //TODO: apply table style properties recursively
+            // Apply table style properties recursively
             ::rtl::OUString sTableStyleName; 
             aTableStyleIter->second >>= sTableStyleName;
             StyleSheetTablePtr pStyleSheetTable = m_rDMapper_Impl.GetStyleSheetTable();
-            const StyleSheetEntry* pStyleSheet = pStyleSheetTable->FindStyleSheetByISTD( sTableStyleName );
+            const StyleSheetEntryPtr pStyleSheet = pStyleSheetTable->FindStyleSheetByISTD( sTableStyleName );
+            pTableStyle = static_cast<TableStyleSheetEntry*>( pStyleSheet.get( ) );
+            m_aTableProperties->erase( aTableStyleIter );
+
             if( pStyleSheet )
             {
-                PropertyMapPtr pMergedProperties = lcl_SearchParentStyleSheetAndMergeProperties(pStyleSheet, pStyleSheetTable);
-               
-                PropertyMap::const_iterator aStylePropIter = 
-                    pMergedProperties->find(PropertyDefinition( META_PROP_CELL_MAR_TOP, false ) );
-                if( aStylePropIter != pMergedProperties->end() )
-                    aStylePropIter->second >>= nTopBorderDistance;    
+                // First get the style properties, then the table ones
+                PropertyMapPtr pTableProps( m_aTableProperties );
+                TablePropertyMapPtr pEmptyProps( new TablePropertyMap );
                 
-                aStylePropIter = pMergedProperties->find(PropertyDefinition( META_PROP_CELL_MAR_BOTTOM, false ) );
-                if( aStylePropIter != pMergedProperties->end() )
-                    aStylePropIter->second >>= nBottomBorderDistance; 
+                m_aTableProperties = pEmptyProps;
                 
-                aStylePropIter = pMergedProperties->find(PropertyDefinition( META_PROP_CELL_MAR_LEFT, false ) );
-                if( aStylePropIter != pMergedProperties->end() )
-                    aStylePropIter->second >>= nLeftBorderDistance; 
-                
-                aStylePropIter = pMergedProperties->find(PropertyDefinition( META_PROP_CELL_MAR_RIGHT, false ) );
-                if( aStylePropIter != pMergedProperties->end() )
-                    aStylePropIter->second >>= nRightBorderDistance; 
-                
+                PropertyMapPtr pMergedProperties = lcl_SearchParentStyleSheetAndMergeProperties(pStyleSheet, pStyleSheetTable);
+    
+                m_aTableProperties->insert( pMergedProperties );
+                m_aTableProperties->insert( pTableProps );
             }    
-            m_aTableProperties->erase( aTableStyleIter );
         }
+        
+        // Set the table default attributes for the cells
+        pTableDefaults->insert( m_aTableProperties );
 
         m_aTableProperties->getValue( TablePropertyMap::GAP_HALF, nGapHalf );
         m_aTableProperties->getValue( TablePropertyMap::LEFT_MARGIN, nLeftMargin );
@@ -228,6 +346,11 @@
             aTblBorderIter->second >>= aTableBorder.TopLine;
             aTableBorder.IsTopLineValid = true;
             m_aTableProperties->erase( aTblBorderIter );
+
+            pTableBorders->Insert( PROP_TOP_BORDER, false, uno::makeAny( aTableBorder.TopLine ) );
+            PropertyMap::iterator pIt = pTableDefaults->find( PropertyDefinition( PROP_TOP_BORDER, false ) );
+            if ( pIt != pTableDefaults->end( ) )
+                pTableDefaults->erase( pIt );
         }
         aTblBorderIter = m_aTableProperties->find( PropertyDefinition(PROP_BOTTOM_BORDER, false) );
         if( aTblBorderIter != m_aTableProperties->end() )
@@ -235,6 +358,11 @@
             aTblBorderIter->second >>= aTableBorder.BottomLine;
             aTableBorder.IsBottomLineValid = true;
             m_aTableProperties->erase( aTblBorderIter );
+
+            pTableBorders->Insert( PROP_BOTTOM_BORDER, false, uno::makeAny( aTableBorder.BottomLine ) );
+            PropertyMap::iterator pIt = pTableDefaults->find( PropertyDefinition( PROP_BOTTOM_BORDER, false ) );
+            if ( pIt != pTableDefaults->end( ) )
+                pTableDefaults->erase( pIt );
         }
         aTblBorderIter = m_aTableProperties->find( PropertyDefinition(PROP_LEFT_BORDER, false) );
         if( aTblBorderIter != m_aTableProperties->end() )
@@ -242,6 +370,11 @@
             aTblBorderIter->second >>= aTableBorder.LeftLine;
             aTableBorder.IsLeftLineValid = true;
             m_aTableProperties->erase( aTblBorderIter );
+
+            pTableBorders->Insert( PROP_LEFT_BORDER, false, uno::makeAny( aTableBorder.LeftLine ) );
+            PropertyMap::iterator pIt = pTableDefaults->find( PropertyDefinition( PROP_LEFT_BORDER, false ) );
+            if ( pIt != pTableDefaults->end( ) )
+                pTableDefaults->erase( pIt );
         }
         aTblBorderIter = m_aTableProperties->find( PropertyDefinition(PROP_RIGHT_BORDER, false) );
         if( aTblBorderIter != m_aTableProperties->end() )
@@ -249,6 +382,11 @@
             aTblBorderIter->second >>= aTableBorder.RightLine;
             aTableBorder.IsRightLineValid = true;
             m_aTableProperties->erase( aTblBorderIter );
+
+            pTableBorders->Insert( PROP_RIGHT_BORDER, false, uno::makeAny( aTableBorder.RightLine ) );
+            PropertyMap::iterator pIt = pTableDefaults->find( PropertyDefinition( PROP_RIGHT_BORDER, false ) );
+            if ( pIt != pTableDefaults->end( ) )
+                pTableDefaults->erase( pIt );
         }
         aTblBorderIter = m_aTableProperties->find( PropertyDefinition(META_PROP_HORIZONTAL_BORDER, false) );
         if( aTblBorderIter != m_aTableProperties->end() )
@@ -256,6 +394,11 @@
             aTblBorderIter->second >>= aTableBorder.HorizontalLine;
             aTableBorder.IsHorizontalLineValid = true;
             m_aTableProperties->erase( aTblBorderIter );
+
+            pTableBorders->Insert( META_PROP_HORIZONTAL_BORDER, false, uno::makeAny( aTableBorder.HorizontalLine ) );
+            PropertyMap::iterator pIt = pTableDefaults->find( PropertyDefinition( META_PROP_HORIZONTAL_BORDER, false ) );
+            if ( pIt != pTableDefaults->end( ) )
+                pTableDefaults->erase( pIt );
         }
         aTblBorderIter = m_aTableProperties->find( PropertyDefinition(META_PROP_VERTICAL_BORDER, false) );
         if( aTblBorderIter != m_aTableProperties->end() )
@@ -263,10 +406,15 @@
             aTblBorderIter->second >>= aTableBorder.VerticalLine;
             aTableBorder.IsVerticalLineValid = true;
             m_aTableProperties->erase( aTblBorderIter );
+
+            pTableBorders->Insert( META_PROP_VERTICAL_BORDER, false, uno::makeAny( aTableBorder.VerticalLine ) );
+            PropertyMap::iterator pIt = pTableDefaults->find( PropertyDefinition( META_PROP_VERTICAL_BORDER, false ) );
+            if ( pIt != pTableDefaults->end( ) )
+                pTableDefaults->erase( pIt );
         }
         aTableBorder.Distance = 0;
         aTableBorder.IsDistanceValid = false;
-        
+       
         m_aTableProperties->Insert( PROP_TABLE_BORDER, false, uno::makeAny( aTableBorder ) );
         
         m_aTableProperties->Insert( PROP_LEFT_MARGIN, false, uno::makeAny( nLeftMargin - nGapHalf - nLeftBorderDistance));
@@ -294,8 +442,9 @@
     // std::vector< std::vector<PropertyMapPtr> > m_aCellProperties
     PropertyMapVector2::const_iterator aRowOfCellsIterator = m_aCellProperties.begin();
     PropertyMapVector2::const_iterator aRowOfCellsIteratorEnd = m_aCellProperties.end();
+    PropertyMapVector2::const_iterator aLastRowIterator = --m_aCellProperties.end();
     sal_Int32 nRow = 0;
-    
+
     //it's a uno::Sequence< beans::PropertyValues >*
     RowPropertyValuesSeq_t* pCellProperties = aCellProperties.getArray();
     while( aRowOfCellsIterator != aRowOfCellsIteratorEnd )
@@ -303,67 +452,70 @@
         //aRowOfCellsIterator points to a vector of PropertyMapPtr
         PropertyMapVector1::const_iterator aCellIterator = aRowOfCellsIterator->begin();
         PropertyMapVector1::const_iterator aCellIteratorEnd = aRowOfCellsIterator->end();
-
-        //contains the default border of the line
-        PropertyMapPtr aCellBorders( new PropertyMap );
-
+        PropertyMapVector1::const_iterator aLastCellIterator = --aRowOfCellsIterator->end();
+        
+        // Get the row style properties
+        sal_Int32 nRowStyleMask = sal_Int32( 0 );
+        PropertyMapPtr pRowProps = m_aRowProperties[nRow];
+        if ( pRowProps.get( ) )
+        {
+            PropertyMap::iterator pTcCnfStyleIt = pRowProps->find( PropertyDefinition( PROP_CNF_STYLE, true ) );
+            if ( pTcCnfStyleIt != pRowProps->end( ) )
+            {
+                if ( pTableStyle )
+                {
+                    rtl::OUString sMask;
+                    pTcCnfStyleIt->second >>= sMask;
+                    nRowStyleMask = sMask.toInt32( 2 );
+                }
+                pRowProps->erase( pTcCnfStyleIt );
+            }
+        }
+        
         sal_Int32 nCell = 0;
         pCellProperties[nRow].realloc( aRowOfCellsIterator->size() );
         beans::PropertyValues* pSingleCellProperties = pCellProperties[nRow].getArray();
         while( aCellIterator != aCellIteratorEnd )
         {
-            //TODO: aCellIterator contains HorizontalBorder and VerticalBorder 
-            // they have to be removed, depending on the position of the cell they 
-            // have to be moved to BottomBorder/RightBorder respectively
+            PropertyMapPtr pAllCellProps( new PropertyMap );
+                
+            bool bIsEndCol = aCellIterator == aLastCellIterator;
+            bool bIsEndRow = aRowOfCellsIterator == aLastRowIterator;
+
             //aCellIterator points to a PropertyMapPtr;
             if( aCellIterator->get() )
             {
-                if( nCell && aCellBorders->size() )
-                {
-                    //now apply the default border
-                    //TODO: This overwrites the existing values!
-                    aCellIterator->get()->insert( aCellBorders, false );
-                }    
+                if ( pTableDefaults->size( ) )
+                    pAllCellProps->insert( pTableDefaults );
 
-                    
-                const PropertyMap::iterator aVerticalIter = 
-                                aCellIterator->get()->find( PropertyDefinition(META_PROP_VERTICAL_BORDER, false) );
-                const PropertyMap::iterator aHorizontalIter = 
-                                aCellIterator->get()->find( PropertyDefinition(META_PROP_HORIZONTAL_BORDER, false) );
-                const PropertyMap::const_iterator aRightIter = 
-                                aCellIterator->get()->find( PropertyDefinition(PROP_RIGHT_BORDER, false) );
-                const PropertyMap::const_iterator aBottomIter = 
-                                aCellIterator->get()->find( PropertyDefinition(PROP_BOTTOM_BORDER, false) );
-                
-                if( aVerticalIter != aCellIterator->get()->end())
+                // Fill the cell properties with the ones of the style
+                sal_Int32 nCellStyleMask = 0;
+                const PropertyMap::iterator aCnfStyleIter = 
+                    aCellIterator->get()->find( PropertyDefinition( PROP_CNF_STYLE, false ) );
+                if ( aCnfStyleIter != aCellIterator->get( )->end( ) )
                 {
-                    if( !nCell )
-                        aCellBorders->insert(*aVerticalIter);
-                    aCellIterator->get()->erase( aVerticalIter );
+                    if ( pTableStyle ) {
+                        rtl::OUString sMask;
+                        aCnfStyleIter->second >>= sMask;
+                        nCellStyleMask = sMask.toInt32( 2 );
+                    }
+                    aCellIterator->get( )->erase( aCnfStyleIter );
                 }
-                if( aHorizontalIter != aCellIterator->get()->end())
+                
+                if ( pTableStyle )
                 {
-                    if( !nCell )
-                        aCellBorders->insert(*aHorizontalIter);
-                    aCellIterator->get()->erase( aHorizontalIter );
+                    PropertyMapPtr pStyleProps = pTableStyle->GetProperties( nCellStyleMask + nRowStyleMask );
+                    pAllCellProps->insert( pStyleProps );
                 }
-                //fill the additional borders into the line default border
-                if( !nCell )
-                {
-                    const PropertyMap::const_iterator aLeftIter = 
-                                    aCellIterator->get()->find( PropertyDefinition(PROP_RIGHT_BORDER, false) );
-                    if(aLeftIter != aCellIterator->get()->end())
-                        aCellBorders->insert(*aLeftIter);
-                    if(aRightIter != aCellIterator->get()->end())
-                        aCellBorders->insert(*aRightIter);
-                    const PropertyMap::const_iterator aTopIter = 
-                                    aCellIterator->get()->find( PropertyDefinition(PROP_TOP_BORDER, false) );
-                    if(aTopIter != aCellIterator->get()->end())
-                        aCellBorders->insert(*aTopIter);
-                    if(aBottomIter != aCellIterator->get()->end())
-                        aCellBorders->insert(*aBottomIter);
-                }   
-                
+
+                // Then add the cell properties
+                pAllCellProps->insert( *aCellIterator );
+                aCellIterator->get( )->swap( *pAllCellProps.get( ) );
+
+                clog << "Cell #" << nCell << ", Row #" << nRow << endl;
+
+                lcl_computeCellBorders( pTableBorders, *aCellIterator, nCell, nRow, bIsEndCol, bIsEndRow );
+
                 //now set the default left+right border distance TODO: there's an sprm containing the default distance!
                 const PropertyMap::const_iterator aLeftDistanceIter = 
                                 aCellIterator->get()->find( PropertyDefinition(PROP_LEFT_BORDER_DISTANCE, false) );
@@ -410,7 +562,7 @@
                     sNames += sName;
                     sNames += ::rtl::OUString('-');
                 }
-                sNames += ::rtl::OUString(' ');
+                sNames += ::rtl::OUString('\n');
             }
             (void)sNames;
         }
@@ -479,7 +631,8 @@
         (void) nCellPropertiesProperties;
         ++nCellPropertiesProperties;
     }    
-#endif            
+#endif           
+            clog << "Converting table" << endl;
             m_xText->convertToTable(*m_pTableSeq, 
                                     aCellProperties,
                                     aRowProperties,
@@ -491,7 +644,14 @@
             clog << "failed to import table!" << endl;
 #endif
         }
+#if OSL_DEBUG_LEVEL > 1
+        catch ( uno::Exception e )
+        {
+            clog << "Caught an other exception: " << rtl::OUStringToOString( e.Message, RTL_TEXTENCODING_UTF8 ).getStr( ) << endl;
+        }
+#endif
     }
+
     m_aTableProperties.reset();
     m_aCellProperties.clear();
     m_aRowProperties.clear();
@@ -529,7 +689,15 @@
                                          TablePropertyMapPtr pProps )
 {
     sal_uInt32 nRow = m_aRowProperties.size();
-    m_aCellProperties[nRow - 1].push_back( pProps );
+    if ( pProps.get( ) )
+        m_aCellProperties[nRow - 1].push_back( pProps );
+    else
+    {
+        // Adding an empty cell properties map to be able to get
+        // the table defaults properties
+        TablePropertyMapPtr pEmptyProps( new TablePropertyMap( ) );
+        m_aCellProperties[nRow - 1].push_back( pEmptyProps );
+    }
     
 #if OSL_DEBUG_LEVEL > 1
     clog << "<table.cell>";
Index: writerfilter/source/dmapper/TDefTableHandler.cxx
===================================================================
--- writerfilter/source/dmapper/TDefTableHandler.cxx	(révision 267004)
+++ writerfilter/source/dmapper/TDefTableHandler.cxx	(copie de travail)
@@ -155,6 +155,11 @@
         case NS_rtf::LN_UNUSED2_15: // 0x2877
             // ignored
         break;
+        case NS_ooxml::LN_CT_Border_themeColor:
+        case NS_ooxml::LN_CT_Border_themeTint:
+        case NS_ooxml::LN_CT_Border_themeShade:
+            // ignored
+        break;
         default:
             OSL_ENSURE(false, "unknown attribute");
     }
@@ -199,6 +204,12 @@
             case NS_rtf::LN_BRCRIGHT:
                 m_aRightBorderLines.push_back(aBorderLine);
             break;
+            case NS_ooxml::LN_CT_TcBorders_insideH:
+                m_aInsideHBorderLines.push_back(aBorderLine);
+            break;
+            case NS_ooxml::LN_CT_TcBorders_insideV:
+                m_aInsideVBorderLines.push_back(aBorderLine);
+            break;
             default:;
         }
     }
@@ -219,6 +230,10 @@
         case NS_ooxml::LN_CT_TcBorders_bottom: 
         /* WRITERFILTERSTATUS: done: 1, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_TcBorders_right:
+        case NS_ooxml::LN_CT_TcBorders_insideH:
+        case NS_ooxml::LN_CT_TcBorders_insideV:
+        case NS_ooxml::LN_CT_TcBorders_tl2br: 
+        case NS_ooxml::LN_CT_TcBorders_tr2bl:
         {    
             writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
             localResolve( rSprm.getId(), pProperties );
@@ -281,6 +296,10 @@
         pCellProperties->Insert( PROP_BOTTOM_BORDER, false, uno::makeAny( m_aBottomBorderLines[nCell] ) );
     if( m_aRightBorderLines.size() > nCell )
         pCellProperties->Insert( PROP_RIGHT_BORDER, false, uno::makeAny( m_aRightBorderLines[nCell] ) );
+    if( m_aInsideHBorderLines.size() > nCell )
+        pCellProperties->Insert( META_PROP_HORIZONTAL_BORDER, false, uno::makeAny( m_aInsideHBorderLines[nCell] ) );
+    if( m_aInsideVBorderLines.size() > nCell )
+        pCellProperties->Insert( META_PROP_VERTICAL_BORDER, false, uno::makeAny( m_aInsideVBorderLines[nCell] ) );
 }
 /*-- 09.05.2007 13:14:17---------------------------------------------------
 
Index: writerfilter/source/dmapper/TDefTableHandler.hxx
===================================================================
--- writerfilter/source/dmapper/TDefTableHandler.hxx	(révision 267004)
+++ writerfilter/source/dmapper/TDefTableHandler.hxx	(copie de travail)
@@ -56,6 +56,10 @@
     ::std::vector< ::com::sun::star::table::BorderLine >    m_aRightBorderLines;
     ::std::vector< ::com::sun::star::table::BorderLine >    m_aTopBorderLines;
     ::std::vector< ::com::sun::star::table::BorderLine >    m_aBottomBorderLines;
+    ::std::vector< ::com::sun::star::table::BorderLine >    m_aInsideHBorderLines;
+    ::std::vector< ::com::sun::star::table::BorderLine >    m_aInsideVBorderLines;
+    ::std::vector< ::com::sun::star::table::BorderLine >    m_aTl2brBorderLines;
+    ::std::vector< ::com::sun::star::table::BorderLine >    m_aTr2blBorderLines;
 
     //values of the current border
     sal_Int32                                           m_nLineWidth;
Index: writerfilter/source/dmapper/StyleSheetTable.cxx
===================================================================
--- writerfilter/source/dmapper/StyleSheetTable.cxx	(révision 267004)
+++ writerfilter/source/dmapper/StyleSheetTable.cxx	(copie de travail)
@@ -30,6 +30,7 @@
 #include <StyleSheetTable.hxx>
 #include <dmapper/DomainMapper.hxx>
 #include <ConversionHelper.hxx>
+#include <TblStylePrHandler.hxx>
 #include <BorderHandler.hxx>
 #include <doctok/resourceids.hxx>
 #include <ooxml/resourceids.hxx>
@@ -70,6 +71,175 @@
         {
         }
 
+TableStyleSheetEntry::TableStyleSheetEntry( StyleSheetEntry& rEntry, StyleSheetTable* pStyles ):
+    StyleSheetEntry( ),
+    m_pStyleSheet( pStyles )
+{
+    bIsDefaultStyle = rEntry.bIsDefaultStyle;
+    bInvalidHeight = rEntry.bInvalidHeight;
+    bHasUPE = rEntry.bHasUPE;
+    nStyleTypeCode = STYLE_TYPE_TABLE;
+    sBaseStyleIdentifier = rEntry.sBaseStyleIdentifier;
+    sNextStyleIdentifier = rEntry.sNextStyleIdentifier;
+    sStyleName = rEntry.sStyleName;
+    sStyleName1 = rEntry.sStyleName1;
+
+    m_nColBandSize = 1;
+    m_nRowBandSize = 1;
+}
+
+TableStyleSheetEntry::~TableStyleSheetEntry( )
+{
+    m_pStyleSheet = NULL;
+}
+
+void TableStyleSheetEntry::AddTblStylePr( TblStyleType nType, PropertyMapPtr pProps )
+{
+    static TblStyleType pTypesToFix[] =
+    {
+        TBL_STYLE_FIRSTROW,
+        TBL_STYLE_LASTROW,
+        TBL_STYLE_FIRSTCOL,
+        TBL_STYLE_LASTCOL
+    };
+
+    static PropertyIds pPropsToCheck[] =
+    {
+        PROP_BOTTOM_BORDER,
+        PROP_TOP_BORDER,
+        PROP_RIGHT_BORDER,
+        PROP_LEFT_BORDER
+    };
+
+    int i = 0;
+    while ( i < 4 )
+    {
+        if ( nType == pTypesToFix[i] )
+        {
+            PropertyIds nChecked = pPropsToCheck[i];
+            PropertyMap::iterator pCheckedIt = pProps->find( PropertyDefinition( nChecked, false )  );
+
+            PropertyIds nInsideProp = ( i < 2 ) ? META_PROP_HORIZONTAL_BORDER : META_PROP_VERTICAL_BORDER;
+            PropertyMap::iterator pInsideIt = pProps->find( PropertyDefinition( nInsideProp, false )  );
+
+            bool bHasChecked = pCheckedIt != pProps->end( );
+            bool bHasInside = pInsideIt != pProps->end( );
+
+            if ( bHasChecked && bHasInside )
+            {
+                // In this case, remove the inside border
+                pProps->erase( pInsideIt );
+            }
+
+            i = 4; // Stop looping stupidly
+        }
+        i++;
+    }
+
+    // Append the tblStylePr
+    m_aStyles[nType] = pProps;
+}
+
+PropertyMapPtr TableStyleSheetEntry::GetProperties( sal_Int32 nMask )
+{
+    PropertyMapPtr pProps( new PropertyMap );
+
+    // First get the parent properties
+    StyleSheetEntryPtr pEntry = m_pStyleSheet->FindParentStyleSheet( sBaseStyleIdentifier );
+
+    if ( pEntry.get( ) )
+    {
+        TableStyleSheetEntry* pParent = static_cast<TableStyleSheetEntry *>( pEntry.get( ) );
+        pProps->insert( pParent->GetProperties( nMask ) );
+    }
+    
+    // And finally get the mask ones
+    pProps->insert( GetLocalPropertiesFromMask( nMask ) );
+
+    return pProps;
+}
+
+void lcl_mergeProps( PropertyMapPtr pToFill,  PropertyMapPtr pToAdd, TblStyleType nStyleId )
+{
+    static PropertyIds pPropsToCheck[] =
+    {
+        PROP_BOTTOM_BORDER,
+        PROP_TOP_BORDER,
+        PROP_RIGHT_BORDER,
+        PROP_LEFT_BORDER,
+    };
+
+    bool pRemoveInside[] =
+    {
+        ( nStyleId == TBL_STYLE_FIRSTROW ),
+        ( nStyleId == TBL_STYLE_LASTROW ),
+        ( nStyleId == TBL_STYLE_LASTCOL ),
+        ( nStyleId == TBL_STYLE_FIRSTCOL )
+    };
+
+    for ( int i = 0 ; i < 7; i++ )
+    {
+        PropertyIds nId = pPropsToCheck[i];
+        PropertyDefinition aProp( nId, false );
+        PropertyMap::iterator pIt = pToAdd->find( aProp );
+   
+        if ( pIt != pToAdd->end( ) )
+        {
+            PropertyMap::iterator pDestIt = pToFill->find( aProp );
+            
+            if ( pRemoveInside[i] )
+            {
+                // Remove the insideH and insideV depending on the cell pos
+                PropertyIds nInsideProp = ( i < 2 ) ? META_PROP_HORIZONTAL_BORDER : META_PROP_VERTICAL_BORDER;
+                pDestIt = pToFill->find( PropertyDefinition( nInsideProp, false ) );
+                if ( pDestIt != pToFill->end( ) )
+                    pToFill->erase( pDestIt );
+            }
+        }    
+    }
+
+    pToFill->insert( pToAdd );
+}
+
+PropertyMapPtr TableStyleSheetEntry::GetLocalPropertiesFromMask( sal_Int32 nMask )
+{
+    // Order from right to left
+    static TblStyleType aBitsOrder[] = 
+    {
+        TBL_STYLE_SWCELL,
+        TBL_STYLE_SECELL,
+        TBL_STYLE_NWCELL,
+        TBL_STYLE_NECELL,
+        TBL_STYLE_BAND2HORZ,
+        TBL_STYLE_BAND1HORZ,
+        TBL_STYLE_BAND2VERT,
+        TBL_STYLE_BAND1VERT,
+        TBL_STYLE_LASTCOL,
+        TBL_STYLE_FIRSTCOL,
+        TBL_STYLE_LASTROW,
+        TBL_STYLE_FIRSTROW
+    };
+
+    // Get the properties applying according to the mask
+    PropertyMapPtr pProps( new PropertyMap( ) );
+    short nBit = 0;
+    do
+    {
+        TblStyleType nStyleId = aBitsOrder[nBit];
+        TblStylePrs::iterator pIt = m_aStyles.find( nStyleId );
+
+        short nTestBit = 1 << nBit;
+        sal_Int32 nBitMask = sal_Int32( nTestBit );
+        if ( ( nMask & nBitMask ) && ( pIt != m_aStyles.end( ) ) )
+            lcl_mergeProps( pProps, pIt->second, nStyleId );
+
+        nBit++;
+    }
+    while ( nBit < 12 );
+
+    return pProps;
+}
+
 /*-- 06.02.2008 11:30:46---------------------------------------------------
 
   -----------------------------------------------------------------------*/
@@ -92,8 +262,8 @@
     DomainMapper&                           m_rDMapper;
     uno::Reference< text::XTextDocument>    m_xTextDocument;
     uno::Reference< beans::XPropertySet>    m_xTextDefaults; 
-    std::vector< StyleSheetEntry >          m_aStyleSheetEntries;
-    StyleSheetEntry                         *m_pCurrentEntry;
+    std::vector< StyleSheetEntryPtr >       m_aStyleSheetEntries;
+    StyleSheetEntryPtr                      m_pCurrentEntry;
     PropertyMapPtr                          m_pDefaultParaProps, m_pDefaultCharProps;
     PropertyMapPtr                          m_pCurrentProps;
     StringPairMap_t                         m_aStyleNameMap;
@@ -110,7 +280,7 @@
 StyleSheetTable_Impl::StyleSheetTable_Impl(DomainMapper& rDMapper, uno::Reference< text::XTextDocument> xTextDocument ) :
             m_rDMapper( rDMapper ),
             m_xTextDocument( xTextDocument ),
-            m_pCurrentEntry(0),
+            m_pCurrentEntry(),
             m_pDefaultParaProps(new PropertyMap),
             m_pDefaultCharProps(new PropertyMap)
 {
@@ -659,13 +829,23 @@
 //        case NS_rtf::LN_STYLESHEET: break;
         /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_Style_type:
+        {
 /*          defaults should be set at the service "com.sun.star.text.Defaults"          
              if (nIntValue == 1)
                 *(m_pImpl->m_pCurrentEntry->pProperties) = *(m_pImpl->m_pDefaultParaProps);
             else if (nIntValue == 2)
                 *(m_pImpl->m_pCurrentEntry->pProperties) = *(m_pImpl->m_pDefaultCharProps);*/
-            m_pImpl->m_pCurrentEntry->nStyleTypeCode = (StyleType)nIntValue;
+            StyleType nType = ( StyleType ) nIntValue;
+            if ( nType == STYLE_TYPE_TABLE )
+            {
+                StyleSheetEntryPtr pEntry = m_pImpl->m_pCurrentEntry;
+                TableStyleSheetEntryPtr pTableEntry( new TableStyleSheetEntry( *pEntry.get( ), this ) );
+                m_pImpl->m_pCurrentEntry = pTableEntry;
+            }
+            else
+                m_pImpl->m_pCurrentEntry->nStyleTypeCode = (StyleType)nIntValue;
         break;
+        }
         /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_Style_default:
             m_pImpl->m_pCurrentEntry->bIsDefaultStyle = (nIntValue != 0);
@@ -707,7 +887,7 @@
     (void)nIntValue;
     rtl::OUString sStringValue = pValue.get() ? pValue->getString() : rtl::OUString();
     //printf ( "StyleSheetTable::sprm(0x%.4x, 0x%.4x) [%s]\n", (unsigned int)nSprmId, (unsigned int)nIntValue, ::rtl::OUStringToOString(sStringValue, RTL_TEXTENCODING_DONTKNOW).getStr());
-    
+   
     /* WRITERFILTERSTATUS: table: StyleSheetTable_sprm */
     switch(nSprmId)
     {
@@ -753,14 +933,29 @@
         case NS_ooxml::LN_CT_Style_rsid:
         /* WRITERFILTERSTATUS: done: 0, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_Style_trPr:
-        /* WRITERFILTERSTATUS: done: 0, planned: 0, spent: 0 */
-        case NS_ooxml::LN_CT_Style_tcPr:
         break;
         /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
+        case NS_ooxml::LN_CT_Style_tblStylePr: //contains  to table properties
+        {
+            writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+            if( pProperties.get())
+            {
+                TblStylePrHandlerPtr pTblStylePrHandler( new TblStylePrHandler( m_pImpl->m_rDMapper ) );
+                pProperties->resolve( *pTblStylePrHandler );
+
+                // Add the properties to the table style
+                TblStyleType nType = pTblStylePrHandler->getType( );
+                PropertyMapPtr pProps = pTblStylePrHandler->getProperties( );
+                StyleSheetEntryPtr pEntry = m_pImpl->m_pCurrentEntry;
+                TableStyleSheetEntry* pTableEntry = static_cast<TableStyleSheetEntry*>( pEntry.get( ) );
+                pTableEntry->AddTblStylePr( nType, pProps );
+            }
+            break;
+        }
+        case NS_ooxml::LN_CT_Style_tcPr:
+        /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_Style_tblPr: //contains table properties
         /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
-        case NS_ooxml::LN_CT_Style_tblStylePr: //contains  to table properties
-        /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_DocDefaults_pPrDefault:
         /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_DocDefaults_rPrDefault:
@@ -805,14 +1000,35 @@
             }
         }
         break;
-        /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
+        case NS_ooxml::LN_CT_TblPrBase_tblStyleRowBandSize:
+        case NS_ooxml::LN_CT_TblPrBase_tblStyleColBandSize:
+        {
+            StyleSheetEntry* pEntry = m_pImpl->m_pCurrentEntry.get( );
+            TableStyleSheetEntry *pTEntry = static_cast<TableStyleSheetEntry*>( pEntry );
+            if ( pTEntry )
+            {
+                if ( nSprmId == NS_ooxml::LN_CT_TblPrBase_tblStyleRowBandSize )
+                    pTEntry->m_nRowBandSize = nIntValue;
+                else
+                    pTEntry->m_nColBandSize = nIntValue;
+            }
+        }
+        break;
+            /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_Style_pPr:
         /* WRITERFILTERSTATUS: done: 100, planned: 0, spent: 0 */
         case NS_ooxml::LN_CT_Style_rPr:
         default:
             if (!m_pImpl->m_pCurrentEntry)
                 break;
-            m_pImpl->m_rDMapper.sprm( rSprm, m_pImpl->m_pCurrentEntry->pProperties );
+            TablePropertiesHandlerPtr pTblHandler( new TablePropertiesHandler( true ) );
+            pTblHandler->SetProperties( m_pImpl->m_pCurrentEntry->pProperties );
+            if ( !pTblHandler->sprm( rSprm ) )
+            {
+                m_pImpl->m_rDMapper.PushStyleSheetProperties( m_pImpl->m_pCurrentEntry->pProperties );
+                m_pImpl->m_rDMapper.sprm( rSprm );
+                m_pImpl->m_rDMapper.PopStyleSheetProperties( );
+            }
     }
 }
 /*-- 19.06.2006 12:04:33---------------------------------------------------
@@ -823,7 +1039,8 @@
     //create a new style entry
     // printf("StyleSheetTable::entry(...)\n");
     OSL_ENSURE( !m_pImpl->m_pCurrentEntry, "current entry has to be NULL here");
-    m_pImpl->m_pCurrentEntry = new StyleSheetEntry;
+    StyleSheetEntryPtr pNewEntry( new StyleSheetEntry );
+    m_pImpl->m_pCurrentEntry = pNewEntry;
     m_pImpl->m_rDMapper.PushStyleSheetProperties( m_pImpl->m_pCurrentEntry->pProperties );
     ref->resolve(*this);
     //append it to the table
@@ -831,13 +1048,14 @@
     if( !m_pImpl->m_rDMapper.IsOOXMLImport() || m_pImpl->m_pCurrentEntry->sStyleName.getLength() >0)
     {
         m_pImpl->m_pCurrentEntry->sConvertedStyleName = ConvertStyleName( m_pImpl->m_pCurrentEntry->sStyleName );
-        m_pImpl->m_aStyleSheetEntries.push_back( *m_pImpl->m_pCurrentEntry );
+        m_pImpl->m_aStyleSheetEntries.push_back( m_pImpl->m_pCurrentEntry );
     }
     else
     {
         //TODO: this entry contains the default settings - they have to be added to the settings
     }    
-    m_pImpl->m_pCurrentEntry = 0;
+    StyleSheetEntryPtr pEmptyEntry;
+    m_pImpl->m_pCurrentEntry = pEmptyEntry;
 }
 /*-- 21.06.2006 15:34:49---------------------------------------------------
     sorting helper
@@ -910,16 +1128,17 @@
         xStyleFamilies->getByName(rPropNameSupplier.GetName( PROP_PARAGRAPH_STYLES )) >>= xParaStyles;
         if(xCharStyles.is() && xParaStyles.is())
         {
-            std::vector< StyleSheetEntry >::iterator aIt = m_pImpl->m_aStyleSheetEntries.begin();
+            std::vector< StyleSheetEntryPtr >::iterator aIt = m_pImpl->m_aStyleSheetEntries.begin();
             while( aIt != m_pImpl->m_aStyleSheetEntries.end() )
             {
-                if( aIt->nStyleTypeCode == STYLE_TYPE_CHAR || aIt->nStyleTypeCode == STYLE_TYPE_PARA )
+                StyleSheetEntryPtr pEntry = *aIt;
+                if( pEntry->nStyleTypeCode == STYLE_TYPE_CHAR || pEntry->nStyleTypeCode == STYLE_TYPE_PARA )
                 {
-                    bool bParaStyle = aIt->nStyleTypeCode == STYLE_TYPE_PARA;
+                    bool bParaStyle = pEntry->nStyleTypeCode == STYLE_TYPE_PARA;
                     bool bInsert = false;
                     uno::Reference< container::XNameContainer > xStyles = bParaStyle ? xParaStyles : xCharStyles;
                     uno::Reference< style::XStyle > xStyle;
-                    ::rtl::OUString sConvertedStyleName = ConvertStyleName( aIt->sStyleName );
+                    ::rtl::OUString sConvertedStyleName = ConvertStyleName( pEntry->sStyleName );
                     if(xStyles->hasByName( sConvertedStyleName ))
                         xStyles->getByName( sConvertedStyleName ) >>= xStyle;
                     else
@@ -931,12 +1150,12 @@
                                         rPropNameSupplier.GetName( PROP_SERVICE_CHAR_STYLE )),
                                         uno::UNO_QUERY_THROW);
                     }
-                    if( aIt->sBaseStyleIdentifier.getLength() )
+                    if( pEntry->sBaseStyleIdentifier.getLength() )
                     {
                         try
                         {
                             //TODO: Handle cases where a paragraph <> character style relation is needed
-                            xStyle->setParentStyle(ConvertStyleName( aIt->sBaseStyleIdentifier ));
+                            xStyle->setParentStyle(ConvertStyleName( pEntry->sBaseStyleIdentifier ));
                         }
                         catch( const uno::RuntimeException& )
                         {
@@ -955,37 +1174,37 @@
                         {
                             uno::Any aTwoHundredFortyTwip = uno::makeAny(12.);
     //                      font size to 240 twip (12 pts) for all if not set
-                            aIt->pProperties->Insert(PROP_CHAR_HEIGHT, true, aTwoHundredFortyTwip, false);
+                            pEntry->pProperties->Insert(PROP_CHAR_HEIGHT, true, aTwoHundredFortyTwip, false);
     //                      western font not already set -> apply first font
                             const FontEntry* pWesternFontEntry = rFontTable->getFontEntry( 0 );
                             rtl::OUString sWesternFontName = pWesternFontEntry->sFontName;
-                            aIt->pProperties->Insert(PROP_CHAR_FONT_NAME, true, uno::makeAny( sWesternFontName ), false);
+                            pEntry->pProperties->Insert(PROP_CHAR_FONT_NAME, true, uno::makeAny( sWesternFontName ), false);
 
     //                      CJK  ... apply second font
                             const FontEntry* pCJKFontEntry  = rFontTable->getFontEntry( 2 );
-                            aIt->pProperties->Insert(PROP_CHAR_FONT_NAME_ASIAN, true, uno::makeAny( pCJKFontEntry->sFontName ), false);
-                            aIt->pProperties->Insert(PROP_CHAR_HEIGHT_ASIAN, true, aTwoHundredFortyTwip, false);
+                            pEntry->pProperties->Insert(PROP_CHAR_FONT_NAME_ASIAN, true, uno::makeAny( pCJKFontEntry->sFontName ), false);
+                            pEntry->pProperties->Insert(PROP_CHAR_HEIGHT_ASIAN, true, aTwoHundredFortyTwip, false);
     //                      CTL  ... apply third font, if available
                             if( nFontCount > 3 )
                             {
                                 const FontEntry* pCTLFontEntry  = rFontTable->getFontEntry( 3 );
-                                aIt->pProperties->Insert(PROP_CHAR_FONT_NAME_COMPLEX, true, uno::makeAny( pCTLFontEntry->sFontName ), false);
-                                aIt->pProperties->Insert(PROP_CHAR_HEIGHT_COMPLEX, true, aTwoHundredFortyTwip, false);
+                                pEntry->pProperties->Insert(PROP_CHAR_FONT_NAME_COMPLEX, true, uno::makeAny( pCTLFontEntry->sFontName ), false);
+                                pEntry->pProperties->Insert(PROP_CHAR_HEIGHT_COMPLEX, true, aTwoHundredFortyTwip, false);
                             }
                         }
     //                  Widow/Orphan -> set both to two if not already set
                         uno::Any aTwo = uno::makeAny(sal_Int8(2));
-                        aIt->pProperties->Insert(PROP_PARA_WIDOWS, true, aTwo, false);
-                        aIt->pProperties->Insert(PROP_PARA_ORPHANS, true, aTwo, false);
+                        pEntry->pProperties->Insert(PROP_PARA_WIDOWS, true, aTwo, false);
+                        pEntry->pProperties->Insert(PROP_PARA_ORPHANS, true, aTwo, false);
     //                  Left-to-right direction if not already set
-                        aIt->pProperties->Insert(PROP_WRITING_MODE, true, uno::makeAny( sal_Int16(text::WritingMode_LR_TB) ), false);
+                        pEntry->pProperties->Insert(PROP_WRITING_MODE, true, uno::makeAny( sal_Int16(text::WritingMode_LR_TB) ), false);
     //                  font color COL_AUTO if not already set
-                        aIt->pProperties->Insert(PROP_CHAR_COLOR, true, uno::makeAny( sal_Int32(0xffffffff) ), false);
+                        pEntry->pProperties->Insert(PROP_CHAR_COLOR, true, uno::makeAny( sal_Int32(0xffffffff) ), false);
                     }
 
-                    uno::Sequence< beans::PropertyValue > aPropValues = aIt->pProperties->GetPropertyValues();
+                    uno::Sequence< beans::PropertyValue > aPropValues = pEntry->pProperties->GetPropertyValues();
                     bool bAddFollowStyle = false;
-                    if(bParaStyle && !aIt->sNextStyleIdentifier.getLength() )
+                    if(bParaStyle && !pEntry->sNextStyleIdentifier.getLength() )
                     {
                             bAddFollowStyle = true;
                     }
@@ -1037,15 +1256,15 @@
                         if(bAddFollowStyle)
                         {
                             //find the name of the Next style
-                            std::vector< StyleSheetEntry >::iterator aNextStyleIt = m_pImpl->m_aStyleSheetEntries.begin();
+                            std::vector< StyleSheetEntryPtr >::iterator aNextStyleIt = m_pImpl->m_aStyleSheetEntries.begin();
                             for( ; aNextStyleIt !=  m_pImpl->m_aStyleSheetEntries.end(); ++aNextStyleIt )
                             {
-                                if( aNextStyleIt->sStyleName.getLength() &&
-                                        aNextStyleIt->sStyleName == aIt->sNextStyleIdentifier)
+                                if( ( *aNextStyleIt )->sStyleName.getLength() &&
+                                        ( *aNextStyleIt )->sStyleName == pEntry->sNextStyleIdentifier)
                                 {
                                     beans::PropertyValue aNew;
                                     aNew.Name = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("FollowStyle"));
-                                    aNew.Value = uno::makeAny(ConvertStyleName( aNextStyleIt->sStyleIdentifierD ));
+                                    aNew.Value = uno::makeAny(ConvertStyleName( ( *aNextStyleIt )->sStyleIdentifierD ));
                                     aSortedPropVals.Insert( aNew );
                                     break;
                                 }
@@ -1084,14 +1303,14 @@
 /*-- 22.06.2006 15:56:56---------------------------------------------------
 
   -----------------------------------------------------------------------*/
-const StyleSheetEntry* StyleSheetTable::FindStyleSheetByISTD(const ::rtl::OUString& sIndex)
+const StyleSheetEntryPtr StyleSheetTable::FindStyleSheetByISTD(const ::rtl::OUString& sIndex)
 {
-    const StyleSheetEntry* pRet = 0;
+    StyleSheetEntryPtr pRet;
     for( sal_uInt32 nPos = 0; nPos < m_pImpl->m_aStyleSheetEntries.size(); ++nPos )
     {
-        if( m_pImpl->m_aStyleSheetEntries[nPos].sStyleIdentifierD == sIndex)
+        if( m_pImpl->m_aStyleSheetEntries[nPos]->sStyleIdentifierD == sIndex)
         {
-            pRet = &m_pImpl->m_aStyleSheetEntries[nPos];
+            pRet = m_pImpl->m_aStyleSheetEntries[nPos];
             break;
         }
     }
@@ -1100,14 +1319,14 @@
 /*-- 28.12.2007 14:45:45---------------------------------------------------
 
   -----------------------------------------------------------------------*/
-const StyleSheetEntry* StyleSheetTable::FindStyleSheetByStyleName(const ::rtl::OUString& sIndex)
+const StyleSheetEntryPtr StyleSheetTable::FindStyleSheetByStyleName(const ::rtl::OUString& sIndex)
 {
-    const StyleSheetEntry* pRet = 0;
+    StyleSheetEntryPtr pRet;
     for( sal_uInt32 nPos = 0; nPos < m_pImpl->m_aStyleSheetEntries.size(); ++nPos )
     {
-        if( m_pImpl->m_aStyleSheetEntries[nPos].sStyleName == sIndex)
+        if( m_pImpl->m_aStyleSheetEntries[nPos]->sStyleName == sIndex)
         {
-            pRet = &m_pImpl->m_aStyleSheetEntries[nPos];
+            pRet = m_pImpl->m_aStyleSheetEntries[nPos];
             break;
         }
     }
@@ -1116,14 +1335,14 @@
 /*-- 28.12.2007 14:45:45---------------------------------------------------
 
   -----------------------------------------------------------------------*/
-const StyleSheetEntry* StyleSheetTable::FindStyleSheetByConvertedStyleName(const ::rtl::OUString& sIndex)
+const StyleSheetEntryPtr StyleSheetTable::FindStyleSheetByConvertedStyleName(const ::rtl::OUString& sIndex)
 {
-    const StyleSheetEntry* pRet = 0;
+    StyleSheetEntryPtr pRet;
     for( sal_uInt32 nPos = 0; nPos < m_pImpl->m_aStyleSheetEntries.size(); ++nPos )
     {
-        if( m_pImpl->m_aStyleSheetEntries[nPos].sConvertedStyleName == sIndex)
+        if( m_pImpl->m_aStyleSheetEntries[nPos]->sConvertedStyleName == sIndex)
         {
-            pRet = &m_pImpl->m_aStyleSheetEntries[nPos];
+            pRet = m_pImpl->m_aStyleSheetEntries[nPos];
             break;
         }
     }
@@ -1133,23 +1352,17 @@
 /*-- 17.07.2006 11:47:00---------------------------------------------------
 
   -----------------------------------------------------------------------*/
-const StyleSheetEntry* StyleSheetTable::FindParentStyleSheet(::rtl::OUString sBaseStyle)
+const StyleSheetEntryPtr StyleSheetTable::FindParentStyleSheet(::rtl::OUString sBaseStyle)
 {
     if( !sBaseStyle.getLength() )
-        return 0;
+    {
+        StyleSheetEntryPtr pEmptyPtr;
+        return pEmptyPtr;
+    }
     if( m_pImpl->m_pCurrentEntry)
         sBaseStyle = m_pImpl->m_pCurrentEntry->sBaseStyleIdentifier;
 
-    const StyleSheetEntry* pRet = 0;
-    for( sal_uInt32 nPos = 0; nPos < m_pImpl->m_aStyleSheetEntries.size(); ++nPos )
-    {
-        if( m_pImpl->m_aStyleSheetEntries[nPos].sStyleIdentifierD == sBaseStyle )
-        {
-            pRet = &m_pImpl->m_aStyleSheetEntries[nPos];
-            break;
-        }
-    }
-    return pRet;
+    return FindStyleSheetByISTD( sBaseStyle );
 }
 /*-- 21.12.2006 15:58:23---------------------------------------------------
 
@@ -1307,12 +1520,12 @@
     if( bExtendedSearch )
     {
         //search for the rWWName in the IdentifierD of the existing styles and convert the sStyleName member
-        std::vector< StyleSheetEntry >::iterator aIt = m_pImpl->m_aStyleSheetEntries.begin();
+        std::vector< StyleSheetEntryPtr >::iterator aIt = m_pImpl->m_aStyleSheetEntries.begin();
         //TODO: performance issue - put styles list into a map sorted by it's sStyleIdentifierD members
         while( aIt != m_pImpl->m_aStyleSheetEntries.end() )
         {
-            if( rWWName == aIt->sStyleIdentifierD ) 
-                sRet = aIt->sStyleName;
+            if( rWWName == ( *aIt )->sStyleIdentifierD ) 
+                sRet = ( *aIt )->sStyleName;
             ++aIt;
         }    
     }    
Index: writerfilter/source/dmapper/TblStylePrHandler.cxx
===================================================================
--- writerfilter/source/dmapper/TblStylePrHandler.cxx	(révision 0)
+++ writerfilter/source/dmapper/TblStylePrHandler.cxx	(révision 0)
@@ -0,0 +1,69 @@
+#include <TblStylePrHandler.hxx>
+#include <PropertyMap.hxx>
+#include <ooxml/resourceids.hxx>
+
+namespace writerfilter {
+namespace dmapper {
+
+TblStylePrHandler::TblStylePrHandler( DomainMapper & rDMapper ) :
+   m_rDMapper( rDMapper ), 
+   m_pTablePropsHandler( new TablePropertiesHandler( true ) ),
+   m_nType( TBL_STYLE_UNKNOWN ),
+   m_pProperties( new PropertyMap )
+{
+}
+
+TblStylePrHandler::~TblStylePrHandler( )
+{
+    delete m_pTablePropsHandler, m_pTablePropsHandler = NULL;
+}
+
+void TblStylePrHandler::attribute(Id rName, Value & rVal)
+{
+    switch ( rName )
+    {
+        case NS_ooxml::LN_CT_TblStyleOverrideType:
+            {
+                // The tokenid should be the same in the model.xml than
+                // in the TblStyleType enum
+                m_nType = TblStyleType( rVal.getInt( ) );
+            }
+            break;
+    }
+}
+
+void TblStylePrHandler::sprm(Sprm & rSprm)
+{
+    Value::Pointer_t pValue = rSprm.getValue();
+    switch ( rSprm.getId( ) )
+    {
+        case NS_ooxml::LN_CT_PPrBase:
+        case NS_ooxml::LN_EG_RPrBase:
+        case NS_ooxml::LN_CT_TblPrBase:
+        case NS_ooxml::LN_CT_TrPrBase: 
+        case NS_ooxml::LN_CT_TcPrBase:
+            resolveSprmProps( rSprm );
+            break;
+        default:
+            // Tables specific properties have to handled here
+            m_pTablePropsHandler->SetProperties( m_pProperties );
+            bool bRet = m_pTablePropsHandler->sprm( rSprm );
+
+            if ( !bRet )
+            {
+                // The DomainMapper can handle some of the properties
+                m_rDMapper.PushStyleSheetProperties( m_pProperties, true );
+                m_rDMapper.sprm( rSprm );
+                m_rDMapper.PopStyleSheetProperties( true );
+            }
+    }
+}
+
+void TblStylePrHandler::resolveSprmProps(Sprm & rSprm)
+{
+    writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+    if( pProperties.get())
+        pProperties->resolve(*this);
+}
+
+}}
Index: writerfilter/source/dmapper/StyleSheetTable.hxx
===================================================================
--- writerfilter/source/dmapper/StyleSheetTable.hxx	(révision 267004)
+++ writerfilter/source/dmapper/StyleSheetTable.hxx	(copie de travail)
@@ -30,6 +30,8 @@
 #ifndef INCLUDED_STYLESHEETTABLE_HXX
 #define INCLUDED_STYLESHEETTABLE_HXX
 
+#include "TblStylePrHandler.hxx"
+
 #include <WriterFilterDllApi.hxx>
 #include <dmapper/DomainMapper.hxx>
 #include <com/sun/star/lang/XComponent.hpp>
@@ -41,6 +43,7 @@
     class XTextDocument;
 }}}}
 
+
 namespace writerfilter {
 namespace dmapper
 {
@@ -72,6 +75,9 @@
     ::rtl::OUString sConvertedStyleName;
     StyleSheetEntry();
 };
+
+typedef boost::shared_ptr<StyleSheetEntry> StyleSheetEntryPtr;
+
 class DomainMapper;
 class WRITERFILTER_DLLPRIVATE StyleSheetTable :
         public Properties,
@@ -92,11 +98,11 @@
     virtual void entry(int pos, writerfilter::Reference<Properties>::Pointer_t ref);
 
     void ApplyStyleSheets( FontTablePtr rFontTable );
-    const StyleSheetEntry* FindStyleSheetByISTD(const ::rtl::OUString& sIndex);
-    const StyleSheetEntry* FindStyleSheetByStyleName(const ::rtl::OUString& rIndex);
-    const StyleSheetEntry* FindStyleSheetByConvertedStyleName(const ::rtl::OUString& rIndex);
+    const StyleSheetEntryPtr FindStyleSheetByISTD(const ::rtl::OUString& sIndex);
+    const StyleSheetEntryPtr FindStyleSheetByStyleName(const ::rtl::OUString& rIndex);
+    const StyleSheetEntryPtr FindStyleSheetByConvertedStyleName(const ::rtl::OUString& rIndex);
     // returns the parent of the one with the given name - if empty the parent of the current style sheet is returned
-    const StyleSheetEntry* FindParentStyleSheet(::rtl::OUString sBaseStyle);
+    const StyleSheetEntryPtr FindParentStyleSheet(::rtl::OUString sBaseStyle);
 
     ::rtl::OUString ConvertStyleName( const ::rtl::OUString& rWWName, bool bExtendedSearch = false );
     ::rtl::OUString GetStyleIdFromIndex(const sal_uInt32 sti);
@@ -110,6 +116,38 @@
 };
 typedef boost::shared_ptr< StyleSheetTable >    StyleSheetTablePtr;
 
+
+class WRITERFILTER_DLLPRIVATE TableStyleSheetEntry : 
+    public StyleSheetEntry
+{
+private:
+    typedef std::map<TblStyleType, PropertyMapPtr> TblStylePrs;
+
+    StyleSheetTable* m_pStyleSheet;
+    TblStylePrs m_aStyles;
+
+public:
+
+    short m_nColBandSize;
+    short m_nRowBandSize;
+
+    // Adds a new tblStylePr to the table style entry. This method
+    // fixes some possible properties conflicts, like borders ones.
+    void AddTblStylePr( TblStyleType nType, PropertyMapPtr pProps );
+
+    // Gets all the properties 
+    //     + corresponding to the mask,
+    //     + from the parent styles
+    PropertyMapPtr GetProperties( sal_Int32 nMask );
+
+    TableStyleSheetEntry( StyleSheetEntry& aEntry, StyleSheetTable* pStyles );
+    ~TableStyleSheetEntry( );
+
+protected:
+    PropertyMapPtr GetLocalPropertiesFromMask( sal_Int32 nMask );
+};
+typedef boost::shared_ptr<TableStyleSheetEntry> TableStyleSheetEntryPtr;
+
 }}
 
 #endif //
Index: writerfilter/source/dmapper/TblStylePrHandler.hxx
===================================================================
--- writerfilter/source/dmapper/TblStylePrHandler.hxx	(révision 0)
+++ writerfilter/source/dmapper/TblStylePrHandler.hxx	(révision 0)
@@ -0,0 +1,64 @@
+#ifndef INCLUDED_TBLSTYLEPRHANDLER_HXX
+#define INCLUDED_TBLSTYLEPRHANDLER_HXX
+
+#include "TablePropertiesHandler.hxx"
+
+#include <dmapper/DomainMapper.hxx>
+#include <WriterFilterDllApi.hxx>
+#include <resourcemodel/WW8ResourceModel.hxx>
+#include <boost/shared_ptr.hpp>
+
+namespace writerfilter {
+namespace dmapper {
+
+class DomainMapper;
+class PropertyMap;
+    
+enum TblStyleType
+{
+    TBL_STYLE_UNKNOWN,
+    TBL_STYLE_WHOLETABLE,
+    TBL_STYLE_FIRSTROW,
+    TBL_STYLE_LASTROW,
+    TBL_STYLE_FIRSTCOL,
+    TBL_STYLE_LASTCOL,
+    TBL_STYLE_BAND1VERT,
+    TBL_STYLE_BAND2VERT,
+    TBL_STYLE_BAND1HORZ,
+    TBL_STYLE_BAND2HORZ,
+    TBL_STYLE_NECELL,
+    TBL_STYLE_NWCELL,
+    TBL_STYLE_SECELL,
+    TBL_STYLE_SWCELL
+};
+
+class WRITERFILTER_DLLPRIVATE TblStylePrHandler : public Properties
+{
+private:
+    DomainMapper &              m_rDMapper;
+    TablePropertiesHandler *    m_pTablePropsHandler;
+
+    TblStyleType                m_nType;
+    PropertyMapPtr              m_pProperties;
+
+public:
+    TblStylePrHandler( DomainMapper & rDMapper );
+    virtual ~TblStylePrHandler( );
+    
+    // Properties
+    virtual void attribute(Id Name, Value & val);
+    virtual void sprm(Sprm & sprm);
+    
+    inline PropertyMapPtr       getProperties() { return m_pProperties; };
+    inline TblStyleType         getType() { return m_nType; };
+
+private:
+
+    void resolveSprmProps(Sprm & rSprm);
+};
+
+typedef boost::shared_ptr< TblStylePrHandler > TblStylePrHandlerPtr;
+
+}}
+
+#endif
Index: writerfilter/source/dmapper/DomainMapperTableManager.cxx
===================================================================
--- writerfilter/source/dmapper/DomainMapperTableManager.cxx	(révision 267004)
+++ writerfilter/source/dmapper/DomainMapperTableManager.cxx	(copie de travail)
@@ -56,14 +56,18 @@
     m_nCellBorderIndex(0),
     m_nHeaderRepeat(0),
     m_nTableWidth(0),
-    m_bOOXML( bOOXML )
+    m_bOOXML( bOOXML ),
+    m_pTablePropsHandler( new TablePropertiesHandler( bOOXML ) )
 {
+    m_pTablePropsHandler->SetTableManager( this );
 }
 /*-- 23.04.2007 14:57:49---------------------------------------------------
 
   -----------------------------------------------------------------------*/
 DomainMapperTableManager::~DomainMapperTableManager()
 {
+    if ( m_pTablePropsHandler )
+        delete m_pTablePropsHandler, m_pTablePropsHandler = NULL;
 }
 /*-- 23.04.2007 15:25:37---------------------------------------------------
 
@@ -73,40 +77,18 @@
     bool bRet = DomainMapperTableManager_Base_t::sprm(rSprm);
     if( !bRet )
     {
+        bRet = m_pTablePropsHandler->sprm( rSprm );
+    }
+
+    if ( !bRet )
+    {
         bRet = true;
         sal_uInt32 nSprmId = rSprm.getId();
         Value::Pointer_t pValue = rSprm.getValue();
         sal_Int32 nIntValue = ((pValue.get() != NULL) ? pValue->getInt() : 0);
-        /* WRITERFILTERSTATUS: table: table_sprmdata */
-        switch( nSprmId )
+        switch ( nSprmId )
         {
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 2 */
-            case NS_ooxml::LN_CT_TrPrBase_jc: //90706
-            /* WRITERFILTERSTATUS: done: 1, planned: 0.5, spent: 0.5 */
-            case NS_ooxml::LN_CT_TblPrBase_jc:
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 2 */
-            case 0x5400: // sprmTJc
-            {
-                //table justification 0: left, 1: center, 2: right
-                sal_Int16 nOrient = ConversionHelper::convertTableJustification( nIntValue );
-                TablePropertyMapPtr pTableMap( new TablePropertyMap );
-                pTableMap->setValue( TablePropertyMap::HORI_ORIENT, nOrient );
-                insertTableProps( pTableMap );
-            }
-            break;
-            /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
-            case 0x9601: // sprmTDxaLeft
-            break;  
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case 0x9602: // sprmTDxaGapHalf
-            {    
-                //m_nGapHalf = ConversionHelper::convertTwipToMM100( nIntValue );
-                TablePropertyMapPtr pPropMap( new TablePropertyMap );
-                pPropMap->setValue( TablePropertyMap::GAP_HALF, ConversionHelper::convertTwipToMM100( nIntValue ) );
-                insertTableProps(pPropMap);
-            }
-            break;  
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case 0xf661: //sprmTTRLeft left table indent
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case 0xf614: // sprmTTPreferredWidth - preferred table width
@@ -136,33 +118,7 @@
                 }
             }
             break;
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 2 */
-            case NS_ooxml::LN_CT_TrPrBase_trHeight: //90703
-            {
-                //contains unit and value 
-                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
-                if( pProperties.get())
-                {   //contains attributes x2902 (LN_unit) and x17e2 (LN_trleft)
-                    MeasureHandlerPtr pMeasureHandler( new MeasureHandler );
-                    pProperties->resolve(*pMeasureHandler);
-                    TablePropertyMapPtr pPropMap( new TablePropertyMap );
-                    pPropMap->Insert( PROP_SIZE_TYPE, false, uno::makeAny( pMeasureHandler->GetRowHeightSizeType() ));
-                    pPropMap->Insert( PROP_HEIGHT, false, uno::makeAny(pMeasureHandler->getMeasureValue() ));
-                    insertRowProps(pPropMap);
-                }
-            }
-            break;
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case 0x3403: // sprmTFCantSplit
-            case NS_sprm::LN_TCantSplit: // 0x3644
-            {    
-                //row can't break across pages if nIntValue == 1
-                TablePropertyMapPtr pPropMap( new TablePropertyMap );
-                pPropMap->Insert( PROP_IS_SPLIT_ALLOWED, false, uno::makeAny(sal_Bool( nIntValue == 1 ? sal_False : sal_True ) ));
-                insertRowProps(pPropMap);
-            }
-            break;  
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case 0x3404:// sprmTTableHeader
             case NS_ooxml::LN_CT_TrPrBase_tblHeader: //90704  
                 // if nIntValue == 1 then the row is a repeated header line
@@ -178,23 +134,6 @@
                     m_nHeaderRepeat = -1;
             break;  
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case 0x9407: // sprmTDyaRowHeight
-            {    
-                // table row height - negative values indicate 'exact height' - positive 'at least'
-                TablePropertyMapPtr pPropMap( new TablePropertyMap );
-                bool bMinHeight = true;
-                sal_Int16 nHeight = static_cast<sal_Int16>( nIntValue );
-                if( nHeight < 0 )
-                {
-                    bMinHeight = false;
-                    nHeight *= -1;
-                }    
-                pPropMap->Insert( PROP_SIZE_TYPE, false, uno::makeAny(bMinHeight ? text::SizeType::MIN : text::SizeType::FIX ));
-                pPropMap->Insert( PROP_HEIGHT, false, uno::makeAny(ConversionHelper::convertTwipToMM100( nHeight )));
-                insertRowProps(pPropMap);
-            }
-            break;  
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case 0xd608: // TDefTable
             {    
                 writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
@@ -226,22 +165,6 @@
             }
             break;
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case NS_ooxml::LN_CT_TcPrBase_vAlign://90694
-            {    
-                sal_Int16 nVertOrient = text::VertOrientation::NONE;
-                switch( nIntValue ) //0 - top 1 - center 3 - bottom
-                {
-                    case 1: nVertOrient = text::VertOrientation::CENTER; break;
-                    case 3: nVertOrient = text::VertOrientation::BOTTOM; break;
-                    default:;
-                };
-                TablePropertyMapPtr pCellPropMap( new TablePropertyMap() );
-                pCellPropMap->Insert( PROP_VERT_ORIENT, false, uno::makeAny( nVertOrient ) );
-                //todo: in ooxml import the value of m_ncell is wrong
-                cellProps( pCellPropMap );
-            }
-            break;
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case 0xD605: // sprmTTableBorders
             {
                 writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
@@ -256,70 +179,6 @@
                 }
             }
             break;
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case NS_ooxml::LN_CT_TblPrBase_tblBorders: //table borders, might be defined in table style
-            {    
-                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
-                if( pProperties.get())
-                {
-                    BorderHandlerPtr pBorderHandler( new BorderHandler(m_bOOXML) );
-                    pProperties->resolve(*pBorderHandler);
-                    TablePropertyMapPtr pTablePropMap( new TablePropertyMap );
-                    pTablePropMap->insert( pBorderHandler->getProperties() );
-                    insertTableProps( pTablePropMap );
-                }
-            }
-            break;
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case NS_ooxml::LN_CT_TcPrBase_tcBorders ://cell borders
-            //contains CT_TcBorders_left, right, top, bottom
-            {    
-                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
-                if( pProperties.get())
-                {
-                    //in OOXML there's one set of borders at each cell (if there is any)
-                    TDefTableHandlerPtr pTDefTableHandler( new TDefTableHandler( m_bOOXML ));
-                    pProperties->resolve( *pTDefTableHandler );
-                    TablePropertyMapPtr pCellPropMap( new TablePropertyMap );
-                    pTDefTableHandler->fillCellProperties( 0, pCellPropMap );
-                    cellProps( pCellPropMap );
-                }    
-            }
-            break;
-            case NS_ooxml::LN_CT_TblPrBase_shd:
-            {    
-                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
-                if( pProperties.get())
-                {
-                    CellColorHandlerPtr pCellColorHandler( new CellColorHandler);
-                    pProperties->resolve( *pCellColorHandler );
-                    TablePropertyMapPtr pTablePropMap( new TablePropertyMap );
-                    insertTableProps( pCellColorHandler->getProperties() );
-                }    
-            }
-            break;
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case 0xd61a : // sprmTCellTopColor
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case 0xd61b : // sprmTCellLeftColor
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case 0xd61c : // sprmTCellBottomColor
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case 0xd61d : // sprmTCellRightColor
-            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
-            case NS_ooxml::LN_CT_TcPrBase_shd:
-            {    
-                // each color sprm contains as much colors as cells are in a row
-                //LN_CT_TcPrBase_shd: cell shading contains: LN_CT_Shd_val, LN_CT_Shd_fill, LN_CT_Shd_color
-                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
-                if( pProperties.get())
-                {
-                    CellColorHandlerPtr pCellColorHandler( new CellColorHandler );
-                    pProperties->resolve( *pCellColorHandler );
-                    cellProps( pCellColorHandler->getProperties());
-                }    
-            }
-            break;
             /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
             case 0xd632 : //sprmTNewSpacing
             /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
@@ -356,7 +215,6 @@
             case 0xf618 : //unknown
                 bRet = false;
             break;
-//OOXML table properties            
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case NS_ooxml::LN_CT_TblPrBase_tblStyle: //table style name
             {    
@@ -374,28 +232,6 @@
                 m_aTableGrid.push_back( ConversionHelper::convertTwipToMM100( nIntValue ) );
             }    
             break;
-            /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
-            case NS_ooxml::LN_CT_TblPrBase_tblCellMar: //cell margins
-            {    
-                //contains LN_CT_TblCellMar_top, LN_CT_TblCellMar_left, LN_CT_TblCellMar_bottom, LN_CT_TblCellMar_right
-                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
-                if( pProperties.get())
-                {
-                    CellMarginHandlerPtr pCellMarginHandler( new CellMarginHandler );
-                    pProperties->resolve( *pCellMarginHandler );
-                    TablePropertyMapPtr pMarginProps( new TablePropertyMap );
-                    if( pCellMarginHandler->m_bTopMarginValid )
-                        pMarginProps->setValue( TablePropertyMap::CELL_MAR_TOP, pCellMarginHandler->m_nTopMargin );
-                    if( pCellMarginHandler->m_bBottomMarginValid )
-                        pMarginProps->setValue( TablePropertyMap::CELL_MAR_BOTTOM, pCellMarginHandler->m_nBottomMargin );
-                    if( pCellMarginHandler->m_bLeftMarginValid )
-                        pMarginProps->setValue( TablePropertyMap::CELL_MAR_LEFT, pCellMarginHandler->m_nLeftMargin );
-                    if( pCellMarginHandler->m_bRightMarginValid )
-                        pMarginProps->setValue( TablePropertyMap::CELL_MAR_RIGHT, pCellMarginHandler->m_nRightMargin );
-                    insertTableProps(pMarginProps);
-                }    
-            }
-            break;
             /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
             case NS_ooxml::LN_CT_TcPrBase_vMerge : //vertical merge
             {    
@@ -419,10 +255,30 @@
             }
             break;
             /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
-            case NS_ooxml::LN_CT_TblPrBase_tblLook: break; //todo: table look specifier
+            case NS_ooxml::LN_CT_TblPrBase_tblLook: 
+                break; //todo: table look specifier
             /* WRITERFILTERSTATUS: done: 100, planned: 0.5, spent: 0 */
-            case NS_ooxml::LN_CT_TcPrBase_tcW: break; //fixed column width is not supported
-            default: bRet = false;
+            case NS_ooxml::LN_CT_TcPrBase_tcW: 
+                break; //fixed column width is not supported
+            case NS_ooxml::LN_CT_TrPrBase_cnfStyle:
+                {
+                    TablePropertyMapPtr pProps( new TablePropertyMap );
+                    pProps->Insert( PROP_CNF_STYLE, true, uno::makeAny( pValue->getString( ) ) );
+                    insertRowProps( pProps );
+                }
+                break;
+            case NS_ooxml::LN_CT_PPrBase_cnfStyle:
+                // TODO cnfStyle on a paragraph
+                break;
+            case NS_ooxml::LN_CT_TcPrBase_cnfStyle:
+                {
+                    TablePropertyMapPtr pProps( new TablePropertyMap );
+                    pProps->Insert( PROP_CNF_STYLE, true, uno::makeAny( pValue->getString( ) ) );
+                    cellProps( pProps );
+                }
+                break;
+            default:
+                bRet = false;
         }
     }
     return bRet;
@@ -521,10 +377,10 @@
     //fill base style properties first, recursively
     if( pStyleSheetEntry->sBaseStyleIdentifier.getLength())
     {
-        const StyleSheetEntry* pParentStyleSheet = 
+        const StyleSheetEntryPtr pParentStyleSheet = 
             pStyleSheetTable->FindStyleSheetByISTD(pStyleSheetEntry->sBaseStyleIdentifier);
         OSL_ENSURE( pParentStyleSheet, "table style not found" );
-        lcl_CopyTextProperties( pToFill, pParentStyleSheet, pStyleSheetTable);
+        lcl_CopyTextProperties( pToFill, pParentStyleSheet.get( ), pStyleSheetTable);
     }
 
     PropertyMap::const_iterator aPropIter = pStyleSheetEntry->pProperties->begin();
@@ -541,10 +397,10 @@
     if( !m_pTableStyleTextProperies.get())
     {
         m_pTableStyleTextProperies.reset( new PropertyMap );
-        const StyleSheetEntry* pStyleSheetEntry = pStyleSheetTable->FindStyleSheetByISTD(
+        const StyleSheetEntryPtr pStyleSheetEntry = pStyleSheetTable->FindStyleSheetByISTD(
                                                         m_sTableStyleName);
         OSL_ENSURE( pStyleSheetEntry, "table style not found" );
-        lcl_CopyTextProperties(m_pTableStyleTextProperies, pStyleSheetEntry, pStyleSheetTable);
+        lcl_CopyTextProperties(m_pTableStyleTextProperies, pStyleSheetEntry.get( ), pStyleSheetTable);
     }
     pContext->insert( m_pTableStyleTextProperies );
 }
Index: writerfilter/source/dmapper/makefile.mk
===================================================================
--- writerfilter/source/dmapper/makefile.mk	(révision 267004)
+++ writerfilter/source/dmapper/makefile.mk	(copie de travail)
@@ -43,6 +43,8 @@
 # --- Files -------------------------------------
 
 SLOFILES=           $(SLO)$/BorderHandler.obj \
+                    $(SLO)$/TblStylePrHandler.obj \
+                    $(SLO)$/TablePropertiesHandler.obj \
                     $(SLO)$/CellColorHandler.obj \
                     $(SLO)$/CellMarginHandler.obj \
                     $(SLO)$/SectionColumnHandler.obj \
Index: writerfilter/source/dmapper/DomainMapperTableManager.hxx
===================================================================
--- writerfilter/source/dmapper/DomainMapperTableManager.hxx	(révision 267004)
+++ writerfilter/source/dmapper/DomainMapperTableManager.hxx	(copie de travail)
@@ -30,6 +30,8 @@
 #ifndef INCLUDED_DOMAIN_MAPPER_TABLE_MANAGER_HXX
 #define INCLUDED_DOMAIN_MAPPER_TABLE_MANAGER_HXX
 
+#include "TablePropertiesHandler.hxx"
+
 #include <resourcemodel/TableManager.hxx>
 #include <PropertyMap.hxx>
 #include <StyleSheetTable.hxx>
@@ -38,8 +40,6 @@
 
 namespace writerfilter {
 namespace dmapper {
-typedef ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > Handle_t;
-typedef TableManager<Handle_t , TablePropertyMapPtr > DomainMapperTableManager_Base_t;
 class DomainMapperTableManager : public DomainMapperTableManager_Base_t
 {
     sal_uInt32      m_nRow;
@@ -54,6 +54,9 @@
     ::std::vector<sal_Int32>  m_aTableGrid;
     ::std::vector<sal_Int32>  m_aGridSpans;
     
+    TablePropertiesHandler   *m_pTablePropsHandler;
+    PropertyMapPtr            m_pStyleProps;
+
     virtual void clearData();
 
 public:
@@ -61,6 +64,10 @@
     DomainMapperTableManager(bool bOOXML);
     virtual ~DomainMapperTableManager();
 
+    // use this method to avoid adding the properties for the table
+    // but in the provided properties map.
+    inline void SetStyleProperties( PropertyMapPtr pProperties ) { m_pStyleProps = pProperties; };
+
     virtual bool sprm(Sprm & rSprm);
 
     virtual void endOfCellAction();
@@ -70,6 +77,37 @@
     /// copy the text properties of the table style and its parent into pContext
     void    CopyTextProperties(PropertyMapPtr pContext, StyleSheetTablePtr pStyleSheetTable);
 
+    inline virtual void cellProps(TablePropertyMapPtr pProps)
+    {
+        if ( m_pStyleProps.get( ) )
+            m_pStyleProps->insert( pProps, true );
+        else
+           DomainMapperTableManager_Base_t::cellProps( pProps );
+    };
+
+    inline virtual void cellPropsByCell(unsigned int i, TablePropertyMapPtr pProps)
+    {
+        if ( m_pStyleProps.get( ) )
+            m_pStyleProps->insert( pProps, true );
+        else
+           DomainMapperTableManager_Base_t::cellPropsByCell( i, pProps );
+    };
+
+    inline virtual void insertRowProps(TablePropertyMapPtr pProps)
+    {
+        if ( m_pStyleProps.get( ) )
+            m_pStyleProps->insert( pProps, true );
+        else
+           DomainMapperTableManager_Base_t::insertRowProps( pProps );
+    };
+
+    inline virtual void insertTableProps(TablePropertyMapPtr pProps)
+    {
+        if ( m_pStyleProps.get( ) )
+            m_pStyleProps->insert( pProps, true );
+        else
+           DomainMapperTableManager_Base_t::insertTableProps( pProps );
+    };
 };
 
 }}
Index: writerfilter/source/dmapper/PropertyIds.cxx
===================================================================
--- writerfilter/source/dmapper/PropertyIds.cxx	(révision 267004)
+++ writerfilter/source/dmapper/PropertyIds.cxx	(copie de travail)
@@ -315,6 +315,7 @@
             case PROP_STREAM_NAME:    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("StreamName")); break;
             case PROP_BITMAP :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("Bitmap")); break;
             case PROP_IS_DATE :   sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("IsDate")); break;
+            case PROP_CNF_STYLE  :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("CnfStyle")); break;
 //            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
 //            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
 //            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
@@ -324,9 +325,6 @@
 //            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
 //            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
 //            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
-//            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
-//            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
-//            case       :    sName = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")); break;
         }
         ::std::pair<PropertyNameMap_t::iterator,bool> aInsertIt =
                 m_pImpl->aNameMap.insert( PropertyNameMap_t::value_type( eId, sName ));
Index: writerfilter/source/dmapper/ConversionHelper.cxx
===================================================================
--- writerfilter/source/dmapper/ConversionHelper.cxx	(révision 267004)
+++ writerfilter/source/dmapper/ConversionHelper.cxx	(copie de travail)
@@ -276,6 +276,10 @@
         case 21:
             eCodeIdx = double1;//  60 Twips for us
             break;
+        case 0:
+        case 255:
+            eCodeIdx = none;
+            break;
         default:
             eCodeIdx = single0;
             break;
@@ -306,7 +310,8 @@
         /*13*/  { DOUBLE_LINE7_OUT, DOUBLE_LINE7_IN, DOUBLE_LINE7_DIST },
         /*14*/  { DOUBLE_LINE8_OUT, DOUBLE_LINE8_IN, DOUBLE_LINE8_DIST },
         /*15*/  { DOUBLE_LINE9_OUT, DOUBLE_LINE9_IN, DOUBLE_LINE9_DIST },
-        /*16*/  { DOUBLE_LINE10_OUT,DOUBLE_LINE10_IN,DOUBLE_LINE10_DIST}
+        /*16*/  { DOUBLE_LINE10_OUT,DOUBLE_LINE10_IN,DOUBLE_LINE10_DIST},
+        /*17*/  { 0, 0, 0 }
     };
 
     rToFill.Color = nLineColor;
Index: writerfilter/source/dmapper/PropertyIds.hxx
===================================================================
--- writerfilter/source/dmapper/PropertyIds.hxx	(révision 267004)
+++ writerfilter/source/dmapper/PropertyIds.hxx	(copie de travail)
@@ -278,6 +278,7 @@
 /*239*/ ,PROP_STREAM_NAME
 /*240*/ ,PROP_BITMAP
 /*241*/ ,PROP_IS_DATE
+/*242*/ ,PROP_CNF_STYLE
 };
 struct PropertyNameSupplier_Impl;
 class PropertyNameSupplier
Index: writerfilter/source/dmapper/DomainMapper_Impl.cxx
===================================================================
--- writerfilter/source/dmapper/DomainMapper_Impl.cxx	(révision 267004)
+++ writerfilter/source/dmapper/DomainMapper_Impl.cxx	(copie de travail)
@@ -688,13 +688,13 @@
   -----------------------------------------------------------------------*/
 uno::Any DomainMapper_Impl::GetPropertyFromStyleSheet(PropertyIds eId)
 {
-    const StyleSheetEntry* pEntry = 0;
+    StyleSheetEntryPtr pEntry;
     if( m_bInStyleSheetImport )
         pEntry = GetStyleSheetTable()->FindParentStyleSheet(::rtl::OUString());
     else
         pEntry =
                 GetStyleSheetTable()->FindStyleSheetByISTD(GetCurrentParaStyleId());
-    while(pEntry)
+    while(pEntry.get( ) )
     {
         //is there a tab stop set?
         if(pEntry->pProperties)
@@ -906,11 +906,11 @@
                     try
                        {
                             //
-                           const StyleSheetEntry* pParaStyle =
+                            StyleSheetEntryPtr pParaStyle =
                                 m_pStyleSheetTable->FindStyleSheetByConvertedStyleName(rAppendContext.pLastParagraphProperties->GetParaStyleName());
 
                             uno::Sequence< beans::PropertyValue > aFrameProperties(pParaStyle ? 15: 0);
-                            if(pParaStyle)
+                            if ( pParaStyle.get( ) )
                             {
                                 const ParagraphProperties* pStyleProperties = dynamic_cast<const ParagraphProperties*>( pParaStyle->pProperties.get() );
                                 beans::PropertyValue* pFrameProperties = aFrameProperties.getArray();
Index: writerfilter/source/dmapper/TablePropertiesHandler.cxx
===================================================================
--- writerfilter/source/dmapper/TablePropertiesHandler.cxx	(révision 0)
+++ writerfilter/source/dmapper/TablePropertiesHandler.cxx	(révision 0)
@@ -0,0 +1,217 @@
+#include "BorderHandler.hxx"
+#include "CellColorHandler.hxx"
+#include "CellMarginHandler.hxx"
+#include "ConversionHelper.hxx"
+#include "MeasureHandler.hxx"
+#include "TablePropertiesHandler.hxx"
+#include "TDefTableHandler.hxx"
+
+#include <ooxml/resourceids.hxx>
+#include <doctok/sprmids.hxx>
+
+#include <com/sun/star/text/SizeType.hpp>
+#include <com/sun/star/text/VertOrientation.hpp>
+
+
+namespace writerfilter {
+namespace dmapper {
+
+    TablePropertiesHandler::TablePropertiesHandler( bool bOOXML ) :
+        m_pTableManager( NULL ),
+        m_bOOXML( bOOXML )
+    {
+    }
+
+
+    TablePropertiesHandler::~TablePropertiesHandler( )
+    {
+        // Do not delete the table manager... this will be done somewhere else
+        m_pTableManager = NULL;
+    }
+
+    bool TablePropertiesHandler::sprm(Sprm & rSprm)
+    {
+        bool bRet = true;
+        sal_uInt32 nSprmId = rSprm.getId();
+        Value::Pointer_t pValue = rSprm.getValue();
+        sal_Int32 nIntValue = ((pValue.get() != NULL) ? pValue->getInt() : 0);
+        /* WRITERFILTERSTATUS: table: table_sprmdata */
+        switch( nSprmId )
+       {
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 2 */
+            case NS_ooxml::LN_CT_TrPrBase_jc: //90706
+            /* WRITERFILTERSTATUS: done: 1, planned: 0.5, spent: 0.5 */
+            case NS_ooxml::LN_CT_TblPrBase_jc:
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 2 */
+            case 0x5400: // sprmTJc
+            {
+                //table justification 0: left, 1: center, 2: right
+                sal_Int16 nOrient = ConversionHelper::convertTableJustification( nIntValue );
+                TablePropertyMapPtr pTableMap( new TablePropertyMap );
+                pTableMap->setValue( TablePropertyMap::HORI_ORIENT, nOrient );
+                insertTableProps( pTableMap );
+            }
+            break;
+            /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
+            case 0x9601: // sprmTDxaLeft
+            break;  
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case 0x9602: // sprmTDxaGapHalf
+            {    
+                //m_nGapHalf = ConversionHelper::convertTwipToMM100( nIntValue );
+                TablePropertyMapPtr pPropMap( new TablePropertyMap );
+                pPropMap->setValue( TablePropertyMap::GAP_HALF, ConversionHelper::convertTwipToMM100( nIntValue ) );
+                insertTableProps(pPropMap);
+            }
+            break;  
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 2 */
+            case NS_ooxml::LN_CT_TrPrBase_trHeight: //90703
+            {
+                //contains unit and value 
+                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+                if( pProperties.get())
+                {   //contains attributes x2902 (LN_unit) and x17e2 (LN_trleft)
+                    MeasureHandlerPtr pMeasureHandler( new MeasureHandler );
+                    pProperties->resolve(*pMeasureHandler);
+                    TablePropertyMapPtr pPropMap( new TablePropertyMap );
+                    pPropMap->Insert( PROP_SIZE_TYPE, false, uno::makeAny( pMeasureHandler->GetRowHeightSizeType() ));
+                    pPropMap->Insert( PROP_HEIGHT, false, uno::makeAny(pMeasureHandler->getMeasureValue() ));
+                    insertRowProps(pPropMap);
+                }
+            }
+            break;
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case 0x3403: // sprmTFCantSplit
+            case NS_sprm::LN_TCantSplit: // 0x3644
+            {    
+                //row can't break across pages if nIntValue == 1
+                TablePropertyMapPtr pPropMap( new TablePropertyMap );
+                pPropMap->Insert( PROP_IS_SPLIT_ALLOWED, false, uno::makeAny(sal_Bool( nIntValue == 1 ? sal_False : sal_True ) ));
+                insertRowProps(pPropMap);
+            }
+            break;  
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case 0x9407: // sprmTDyaRowHeight
+            {    
+                // table row height - negative values indicate 'exact height' - positive 'at least'
+                TablePropertyMapPtr pPropMap( new TablePropertyMap );
+                bool bMinHeight = true;
+                sal_Int16 nHeight = static_cast<sal_Int16>( nIntValue );
+                if( nHeight < 0 )
+                {
+                    bMinHeight = false;
+                    nHeight *= -1;
+                }    
+                pPropMap->Insert( PROP_SIZE_TYPE, false, uno::makeAny(bMinHeight ? text::SizeType::MIN : text::SizeType::FIX ));
+                pPropMap->Insert( PROP_HEIGHT, false, uno::makeAny(ConversionHelper::convertTwipToMM100( nHeight )));
+                insertRowProps(pPropMap);
+            }
+            break;
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case NS_ooxml::LN_CT_TcPrBase_vAlign://90694
+            {    
+                sal_Int16 nVertOrient = text::VertOrientation::NONE;
+                switch( nIntValue ) //0 - top 1 - center 3 - bottom
+                {
+                    case 1: nVertOrient = text::VertOrientation::CENTER; break;
+                    case 3: nVertOrient = text::VertOrientation::BOTTOM; break;
+                    default:;
+                };
+                TablePropertyMapPtr pCellPropMap( new TablePropertyMap() );
+                pCellPropMap->Insert( PROP_VERT_ORIENT, false, uno::makeAny( nVertOrient ) );
+                //todo: in ooxml import the value of m_ncell is wrong
+                cellProps( pCellPropMap );
+            }
+            break;
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case NS_ooxml::LN_CT_TblPrBase_tblBorders: //table borders, might be defined in table style
+            {    
+                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+                if( pProperties.get())
+                {
+                    BorderHandlerPtr pBorderHandler( new BorderHandler(m_bOOXML) );
+                    pProperties->resolve(*pBorderHandler);
+                    TablePropertyMapPtr pTablePropMap( new TablePropertyMap );
+                    pTablePropMap->insert( pBorderHandler->getProperties() );
+                    insertTableProps( pTablePropMap );
+                }
+            }
+            break;
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case NS_ooxml::LN_CT_TcPrBase_tcBorders ://cell borders
+            //contains CT_TcBorders_left, right, top, bottom
+            {    
+                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+                if( pProperties.get())
+                {
+                    //in OOXML there's one set of borders at each cell (if there is any)
+                    TDefTableHandlerPtr pTDefTableHandler( new TDefTableHandler( m_bOOXML ));
+                    pProperties->resolve( *pTDefTableHandler );
+                    TablePropertyMapPtr pCellPropMap( new TablePropertyMap );
+                    pTDefTableHandler->fillCellProperties( 0, pCellPropMap );
+                    cellProps( pCellPropMap );
+                }    
+            }
+            break;
+            case NS_ooxml::LN_CT_TblPrBase_shd:
+            {    
+                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+                if( pProperties.get())
+                {
+                    CellColorHandlerPtr pCellColorHandler( new CellColorHandler);
+                    pProperties->resolve( *pCellColorHandler );
+                    TablePropertyMapPtr pTablePropMap( new TablePropertyMap );
+                    insertTableProps( pCellColorHandler->getProperties() );
+                }    
+            }
+            break;
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case 0xd61a : // sprmTCellTopColor
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case 0xd61b : // sprmTCellLeftColor
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case 0xd61c : // sprmTCellBottomColor
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case 0xd61d : // sprmTCellRightColor
+            /* WRITERFILTERSTATUS: done: 1, planned: 2, spent: 0 */
+            case NS_ooxml::LN_CT_TcPrBase_shd:
+            {    
+                // each color sprm contains as much colors as cells are in a row
+                //LN_CT_TcPrBase_shd: cell shading contains: LN_CT_Shd_val, LN_CT_Shd_fill, LN_CT_Shd_color
+                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+                if( pProperties.get())
+                {
+                    CellColorHandlerPtr pCellColorHandler( new CellColorHandler );
+                    pProperties->resolve( *pCellColorHandler );
+                    cellProps( pCellColorHandler->getProperties());
+                }    
+            }
+            break;
+//OOXML table properties            
+            /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
+            case NS_ooxml::LN_CT_TblPrBase_tblCellMar: //cell margins
+            {    
+                //contains LN_CT_TblCellMar_top, LN_CT_TblCellMar_left, LN_CT_TblCellMar_bottom, LN_CT_TblCellMar_right
+                writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+                if( pProperties.get())
+                {
+                    CellMarginHandlerPtr pCellMarginHandler( new CellMarginHandler );
+                    pProperties->resolve( *pCellMarginHandler );
+                    TablePropertyMapPtr pMarginProps( new TablePropertyMap );
+                    if( pCellMarginHandler->m_bTopMarginValid )
+                        pMarginProps->setValue( TablePropertyMap::CELL_MAR_TOP, pCellMarginHandler->m_nTopMargin );
+                    if( pCellMarginHandler->m_bBottomMarginValid )
+                        pMarginProps->setValue( TablePropertyMap::CELL_MAR_BOTTOM, pCellMarginHandler->m_nBottomMargin );
+                    if( pCellMarginHandler->m_bLeftMarginValid )
+                        pMarginProps->setValue( TablePropertyMap::CELL_MAR_LEFT, pCellMarginHandler->m_nLeftMargin );
+                    if( pCellMarginHandler->m_bRightMarginValid )
+                        pMarginProps->setValue( TablePropertyMap::CELL_MAR_RIGHT, pCellMarginHandler->m_nRightMargin );
+                    insertTableProps(pMarginProps);
+                }    
+            }
+            break;
+            default: bRet = false;
+        }
+        return bRet;
+    }
+}}
Index: writerfilter/source/dmapper/TablePropertiesHandler.hxx
===================================================================
--- writerfilter/source/dmapper/TablePropertiesHandler.hxx	(révision 0)
+++ writerfilter/source/dmapper/TablePropertiesHandler.hxx	(révision 0)
@@ -0,0 +1,84 @@
+#ifndef INCLUDED_TABLEPROPERTIESHANDLER_HXX
+#define INCLUDED_TABLEPROPERTIESHANDLER_HXX
+
+#include <PropertyMap.hxx>
+
+#include <resourcemodel/TableManager.hxx>
+#include <WriterFilterDllApi.hxx>
+#include <resourcemodel/WW8ResourceModel.hxx>
+
+#include <boost/shared_ptr.hpp>
+
+#include <vector>
+
+namespace writerfilter {
+namespace dmapper {
+
+using namespace std;
+
+typedef ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > Handle_t;
+typedef TableManager<Handle_t , TablePropertyMapPtr > DomainMapperTableManager_Base_t;
+
+class TablePropertiesHandler
+{
+private:
+    vector< PropertyMapPtr > m_rPropertiesStack;
+    PropertyMapPtr m_pCurrentProperties;
+    DomainMapperTableManager_Base_t *m_pTableManager;
+    bool m_bOOXML;
+
+public:
+    TablePropertiesHandler( bool bOOXML );
+    virtual ~TablePropertiesHandler( );
+
+    bool sprm(Sprm & sprm); 
+
+    inline void SetTableManager( DomainMapperTableManager_Base_t *pTableManager )
+    {
+        m_pTableManager = pTableManager;
+    };
+
+    inline void SetProperties( PropertyMapPtr pProperties )
+    {
+        m_pCurrentProperties = pProperties;
+    };
+
+private:
+
+    inline void cellProps( TablePropertyMapPtr pProps )
+    {
+        if ( m_pTableManager )
+            m_pTableManager->cellProps( pProps );
+        else
+            m_pCurrentProperties->insert( pProps, true );
+    };
+
+    inline void cellPropsByCell( unsigned int i, TablePropertyMapPtr pProps )
+    {
+        if ( m_pTableManager )
+            m_pTableManager->cellPropsByCell( i, pProps );
+        else
+            m_pCurrentProperties->insert( pProps, true );
+    };
+
+    inline void insertRowProps( TablePropertyMapPtr pProps )
+    {
+        if ( m_pTableManager )
+            m_pTableManager->insertRowProps( pProps );
+        else
+            m_pCurrentProperties->insert( pProps, true );
+    };
+
+    inline void insertTableProps( TablePropertyMapPtr pProps )
+    {
+        if ( m_pTableManager )
+            m_pTableManager->insertTableProps( pProps );
+        else
+            m_pCurrentProperties->insert( pProps, true );
+    };
+};
+typedef boost::shared_ptr<TablePropertiesHandler> TablePropertiesHandlerPtr;
+
+} }
+
+#endif
Index: writerfilter/source/dmapper/BorderHandler.cxx
===================================================================
--- writerfilter/source/dmapper/BorderHandler.cxx	(révision 267004)
+++ writerfilter/source/dmapper/BorderHandler.cxx	(copie de travail)
@@ -137,6 +137,8 @@
                 pProperties->resolve(*this);
             ConversionHelper::MakeBorderLine( m_nLineWidth,   m_nLineType, m_nLineColor,  
                                    m_aBorderLines[rSprm.getId() - NS_ooxml::LN_CT_TblBorders_top], m_bOOXML );
+
+            m_aFilledLines[ rSprm.getId( ) - NS_ooxml::LN_CT_TblBorders_top] = true;
         }
         break;
         default:;
@@ -161,7 +163,11 @@
     if( m_bOOXML || m_nCurrentBorderPosition )
     {
         for( sal_Int32 nProp = 0; nProp < BORDER_COUNT; ++nProp)
-            pPropertyMap->Insert( aPropNames[nProp], false, uno::makeAny( m_aBorderLines[nProp] ) );
+        {
+            if ( m_aFilledLines[nProp] ) {
+                pPropertyMap->Insert( aPropNames[nProp], false, uno::makeAny( m_aBorderLines[nProp] ) );
+            }
+        }
     }
     return pPropertyMap;
 }
Index: writerfilter/source/dmapper/CellColorHandler.cxx
===================================================================
--- writerfilter/source/dmapper/CellColorHandler.cxx	(révision 267004)
+++ writerfilter/source/dmapper/CellColorHandler.cxx	(copie de travail)
@@ -110,6 +110,11 @@
 //            }
 //        }
 //        break;
+        case NS_ooxml::LN_CT_Shd_themeFill:
+        case NS_ooxml::LN_CT_Shd_themeFillTint:
+        case NS_ooxml::LN_CT_Shd_themeFillShade:
+            // ignored
+            break;
         default:
             OSL_ENSURE( false, "unknown attribute");
     }
Index: writerfilter/source/dmapper/DomainMapper.cxx
===================================================================
--- writerfilter/source/dmapper/DomainMapper.cxx	(révision 267004)
+++ writerfilter/source/dmapper/DomainMapper.cxx	(copie de travail)
@@ -551,8 +551,8 @@
             //if the style is a user defined style then it must have an ISTD - built-in styles might not have it
             StyleSheetTablePtr pStyleSheets = m_pImpl->GetStyleSheetTable();
             ::rtl::OUString sValue = ::rtl::OUString::valueOf(nIntValue, 16);
-            const StyleSheetEntry* pEntry = pStyleSheets->FindStyleSheetByISTD(sValue);
-            if(pEntry)
+            const StyleSheetEntryPtr pEntry = pStyleSheets->FindStyleSheetByISTD(sValue);
+            if( pEntry.get( ) )
             {
                 bool bParaStyle = (pEntry->nStyleTypeCode == STYLE_TYPE_PARA);
                 if(bParaStyle)
@@ -3882,9 +3882,9 @@
         const ::rtl::OUString sConvertedStyleName = pStyleTable->ConvertStyleName( sStringValue, true );
 		if (m_pImpl->GetTopContext() && m_pImpl->GetTopContextType() != CONTEXT_SECTION)
 	        m_pImpl->GetTopContext()->Insert( PROP_PARA_STYLE_NAME, true, uno::makeAny( sConvertedStyleName ));
-        const StyleSheetEntry* pEntry = pStyleTable->FindStyleSheetByISTD(sStringValue);
+        const StyleSheetEntryPtr pEntry = pStyleTable->FindStyleSheetByISTD(sStringValue);
         //apply numbering to paragraph if it was set at the style
-        OSL_ENSURE( pEntry, "no style sheet found" );
+        OSL_ENSURE( pEntry.get(), "no style sheet found" );
         const StyleSheetPropertyMap* pStyleSheetProperties = dynamic_cast<const StyleSheetPropertyMap*>(pEntry ? pEntry->pProperties.get() : 0);
         if( pStyleSheetProperties && pStyleSheetProperties->GetListId() >= 0 )
             rContext->Insert( PROP_NUMBERING_RULES, true, uno::makeAny(m_pImpl->GetListTable()->GetNumberingRules(pStyleSheetProperties->GetListId())), false);
@@ -4224,16 +4224,23 @@
 /*-- 13.06.2007 16:15:55---------------------------------------------------
 
   -----------------------------------------------------------------------*/
-void DomainMapper::PushStyleSheetProperties( PropertyMapPtr pStyleProperties )
+void DomainMapper::PushStyleSheetProperties( PropertyMapPtr pStyleProperties, bool bAffectTableMngr )
 {
     m_pImpl->PushStyleProperties( pStyleProperties );
+    if ( bAffectTableMngr )
+        m_pImpl->getTableManager( ).SetStyleProperties( pStyleProperties );
 }
 /*-- 13.06.2007 16:15:55---------------------------------------------------
 
   -----------------------------------------------------------------------*/
-void DomainMapper::PopStyleSheetProperties()
+void DomainMapper::PopStyleSheetProperties( bool bAffectTableMngr )
 {
     m_pImpl->PopProperties( CONTEXT_STYLESHEET );
+    if ( bAffectTableMngr )
+    {
+        PropertyMapPtr emptyPtr;
+        m_pImpl->getTableManager( ).SetStyleProperties( emptyPtr );
+    }
 }
 /*-- 28.01.2008 14:52:33---------------------------------------------------
 
Index: writerfilter/source/ooxml/model.xml
===================================================================
--- writerfilter/source/ooxml/model.xml	(révision 267004)
+++ writerfilter/source/ooxml/model.xml	(copie de travail)
@@ -17550,7 +17550,7 @@
       </define>
       <define name="CT_Cnf">
         <attribute name="val">
-          <text/>
+          <ref name="ST_Cnf"/>
           <xs:documentation>Conditional Formatting Bit Mask</xs:documentation>
         </attribute>
       </define>
@@ -19867,16 +19867,16 @@
           </choice>
         </list>
       </define>
-      <define name="CT_TblStylePr">
+      <define name="CT_Style_tblStylePr">
         <group>
           <optional>
             <element name="pPr">
-              <ref name="CT_PPr"/>
+              <ref name="CT_PPrBase"/>
             </element>
           </optional>
           <optional>
             <element name="rPr">
-              <ref name="CT_RPr"/>
+              <ref name="EG_RPrBase"/>
             </element>
           </optional>
           <optional>
@@ -19886,20 +19886,29 @@
           </optional>
           <optional>
             <element name="trPr">
-              <ref name="CT_TrPr"/>
+              <ref name="CT_TrPrBase"/>
             </element>
           </optional>
           <optional>
             <element name="tcPr">
-              <ref name="CT_TcPr"/>
+              <ref name="CT_TcPrBase"/>
             </element>
           </optional>
         </group>
         <attribute name="type">
-          <text/>
+          <ref name="ST_TblStyleOverrideType"/>
           <xs:documentation>Table Style Conditional Formatting Type</xs:documentation>
         </attribute>
       </define>
+      <define name="CT_Style_TblPr">
+        <ref name="CT_TblPrBase"/>
+      </define>
+      <define name="CT_Style_TrPr">
+        <ref name="CT_TrPrBase"/>
+      </define>
+      <define name="CT_Style_TcPr">
+        <ref name="CT_TcPrBase"/>
+      </define>
       <define name="ST_StyleType">
         <list>
           <xs:documentation>Style Types</xs:documentation>
@@ -19999,12 +20008,12 @@
           </optional>
           <optional>
             <element name="pPr">
-              <ref name="CT_PPr"/>
+              <ref name="CT_PPrBase"/>
             </element>
           </optional>
           <optional>
             <element name="rPr">
-              <ref name="CT_RPr"/>
+              <ref name="EG_RPrBase"/>
             </element>
           </optional>
           <optional>
@@ -20014,17 +20023,17 @@
           </optional>
           <optional>
             <element name="trPr">
-              <ref name="CT_TrPr"/>
+              <ref name="CT_TrPrBase"/>
             </element>
           </optional>
           <optional>
             <element name="tcPr">
-              <ref name="CT_TcPr"/>
+              <ref name="CT_TcPrBase"/>
             </element>
           </optional>
           <zeroOrMore>
             <element name="tblStylePr">
-              <ref name="CT_TblStylePr"/>
+              <ref name="CT_Style_tblStylePr"/>
             </element>
           </zeroOrMore>
         </group>
@@ -22863,20 +22872,20 @@
       <element name="num" tokenid="ooxml:CT_Numbering_num"/>
       <element name="numIdMacAtCleanup" tokenid="ooxml:CT_Numbering_numIdMacAtCleanup"/>
     </resource>
-    <resource name="ST_TblStyleOverrideType" resource="List" generated="yes">
-      <value name="wholeTable" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_wholeTable">wholeTable</value>
-      <value name="firstRow" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_firstRow">firstRow</value>
-      <value name="lastRow" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_lastRow">lastRow</value>
-      <value name="firstCol" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_firstCol">firstCol</value>
-      <value name="lastCol" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_lastCol">lastCol</value>
-      <value name="band1Vert" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_band1Vert">band1Vert</value>
-      <value name="band2Vert" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_band2Vert">band2Vert</value>
-      <value name="band1Horz" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_band1Horz">band1Horz</value>
-      <value name="band2Horz" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_band2Horz">band2Horz</value>
-      <value name="neCell" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_neCell">neCell</value>
-      <value name="nwCell" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_nwCell">nwCell</value>
-      <value name="seCell" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_seCell">seCell</value>
-      <value name="swCell" tokenid="ooxml:Value_wordprocessingml_ST_TblStyleOverrideType_swCell">swCell</value>
+    <resource name="ST_TblStyleOverrideType" resource="List">
+      <value tokenid="1">wholeTable</value>
+      <value tokenid="2">firstRow</value>
+      <value tokenid="3">lastRow</value>
+      <value tokenid="4">firstCol</value>
+      <value tokenid="5">lastCol</value>
+      <value tokenid="6">band1Vert</value>
+      <value tokenid="7">band2Vert</value>
+      <value tokenid="8">band1Horz</value>
+      <value tokenid="9">band2Horz</value>
+      <value tokenid="10">neCell</value>
+      <value tokenid="11">nwCell</value>
+      <value tokenid="12">seCell</value>
+      <value tokenid="13">swCell</value>
     </resource>
     <resource name="ST_StyleType" resource="List">
       <value tokenid="1">paragraph</value>
@@ -22884,6 +22893,14 @@
       <value tokenid="3">table</value>
       <value tokenid="4">numbering</value>
     </resource>
+    <resource name="CT_Style_tblStylePr" resource="Properties">
+      <element name="pPr" tokenid="ooxml:CT_PPrBase"/>
+      <element name="rPr" tokenid="ooxml:EG_RPrBase"/>
+      <element name="tblPr" tokenid="ooxml:CT_TblPrBase"/>
+      <element name="trPr" tokenid="ooxml:CT_TrPrBase"/>
+      <element name="tcPr" tokenid="ooxml:CT_TcPrBase"/>
+      <attribute name="type" tokenid="ooxml:CT_TblStyleOverrideType"/>
+    </resource>
     <resource name="CT_Style" resource="Properties">
       <element name="name" tokenid="ooxml:CT_Style_name"/>
       <element name="aliases" tokenid="ooxml:CT_Style_aliases"/>
