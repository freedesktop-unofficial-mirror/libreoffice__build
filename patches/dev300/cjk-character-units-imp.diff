diff -uNr svtools/inc/ruler.hxx svtools/inc/ruler.hxx
--- svtools/inc/ruler.hxx	2007-12-17 01:39:55.000000000 +0800
+++ svtools/inc/ruler.hxx	2007-12-17 11:12:34.000000000 +0800
@@ -708,6 +708,10 @@
     USHORT              mnExtraStyle;
     USHORT              mnExtraClicks;
     USHORT              mnExtraModifier;
+// Amelia
+    long                mnCharWidth;
+    long                mnLineHeight;
+
     RulerExtra          meExtraType;
     RulerType           meDragType;
     MapUnit             meSourceUnit;
@@ -887,6 +891,9 @@
 
     //set text direction right-to-left
     void                SetTextRTL(BOOL bRTL);
+
+    void                SetCharWidth( long nWidth ) { mnCharWidth = nWidth ; }
+    void                SetLineHeight( long nHeight ) { mnLineHeight = nHeight ; }
 };
 
 #endif  // _RULER_HXX
diff -uNr svtools/source/control/ruler.cxx svtools/source/control/ruler.cxx
--- svtools/source/control/ruler.cxx	2007-12-17 01:39:58.000000000 +0800
+++ svtools/source/control/ruler.cxx	2007-12-17 11:12:38.000000000 +0800
@@ -487,6 +487,25 @@
     long    nY;
     BOOL    bNoTicks = FALSE;
 
+    //Amelia
+    long    nTickUnit ;
+    long    nTick2 ;
+    if ( mnUnitIndex == RULER_UNIT_CHAR )
+    {
+        nTick3 = mnCharWidth;
+        nTickCount = mnCharWidth;
+        nTickUnit = mnCharWidth;
+        nTick2 = mnCharWidth;
+    }
+    else if ( mnUnitIndex == RULER_UNIT_LINE )
+    {
+        nTick3 = mnLineHeight;
+        nTickCount = mnLineHeight;
+        nTickUnit = mnLineHeight;
+        nTick2 = mnLineHeight;
+    }
+    aPixSize = maVirDev.LogicToPixel( Size( nTick3, nTick3 ), maMapMode );
+
     // Groessenvorberechnung
     BOOL bVertRight = FALSE;
 	if ( mnWinStyle & WB_HORZ )
@@ -507,7 +526,11 @@
     long nMaxWidth = maVirDev.PixelToLogic( Size( mpData->nPageWidth, 0 ), maMapMode ).Width();
     if ( nMaxWidth < 0 )
         nMaxWidth *= -1;
-    nMaxWidth /= aImplRulerUnitTab[mnUnitIndex].nTickUnit;
+// Amelia
+    if (( mnUnitIndex == RULER_UNIT_CHAR ) || ( mnUnitIndex == RULER_UNIT_LINE ))
+        nMaxWidth /= nTickUnit; 
+    else
+        nMaxWidth /= aImplRulerUnitTab[mnUnitIndex].nTickUnit;
     UniString aNumStr( UniString::CreateFromInt32( nMaxWidth ) );
     long nTxtWidth = GetTextWidth( aNumStr );
     if ( (nTxtWidth*2) > nTickWidth )
@@ -587,7 +610,11 @@
                 // Tick3 - Ausgabe (Text)
                 if ( !(nTick % nTick3) )
                 {
-                    aNumStr = UniString::CreateFromInt32( nTick / aImplRulerUnitTab[mnUnitIndex].nTickUnit );
+                    //aNumStr = UniString::CreateFromInt32( nTick / aImplRulerUnitTab[mnUnitIndex].nTickUnit );
+                    if ( ( mnUnitIndex == RULER_UNIT_CHAR ) || ( mnUnitIndex == RULER_UNIT_LINE ) )
+                        aNumStr = UniString::CreateFromInt32( nTick / nTickUnit );
+                    else 
+                        aNumStr = UniString::CreateFromInt32( nTick / aImplRulerUnitTab[mnUnitIndex].nTickUnit );
                     nTxtWidth2 = GetTextWidth( aNumStr )/2;
 
                     nX = nStart+n;
@@ -614,7 +641,10 @@
                 // Tick/Tick2 - Ausgabe (Striche)
                 else
                 {
-                    if ( !(nTick % aImplRulerUnitTab[mnUnitIndex].nTick2) )
+		/// Amelia
+                    if ( ( mnUnitIndex != RULER_UNIT_CHAR ) && ( mnUnitIndex != RULER_UNIT_LINE ) )
+                        nTick2 = aImplRulerUnitTab[mnUnitIndex].nTick2;
+                    if ( !(nTick % nTick2 ) )
                         nTickWidth = RULER_TICK2_WIDTH;
                     else
                         nTickWidth = RULER_TICK1_WIDTH;
@@ -2824,6 +2854,12 @@
             case FUNIT_PICA:
                 mnUnitIndex = RULER_UNIT_PICA;
                 break;
+            case FUNIT_CHAR:
+                mnUnitIndex = RULER_UNIT_CHAR;
+                break;
+            case FUNIT_LINE:
+                mnUnitIndex = RULER_UNIT_LINE;
+                break;
             default:
 #ifdef DBG_UTIL
                 DBG_ERRORFILE( "Ruler::SetUnit() - Wrong Unit" );
diff -uNr svx/inc/dlgutil.hxx svx/inc/dlgutil.hxx
--- svx/inc/dlgutil.hxx	2007-12-17 01:40:27.000000000 +0800
+++ svx/inc/dlgutil.hxx	2007-12-17 11:13:02.000000000 +0800
@@ -87,6 +87,7 @@
 				   FieldUnit eUnit, BOOL bAll = FALSE );
 
 SVX_DLLPUBLIC FieldUnit GetModuleFieldUnit( const SfxItemSet* pSet = NULL );
+SVX_DLLPUBLIC  BOOL GetApplyCharUnit( const SfxItemSet* pSet = NULL );
 
 // Metriken umrechnen
 SVX_DLLPUBLIC long 		CalcToUnit( float nIn, SfxMapUnit eUnit );
diff -uNr svx/source/dialog/dlgutil.cxx svx/source/dialog/dlgutil.cxx
--- svx/source/dialog/dlgutil.cxx	2007-12-17 01:40:34.000000000 +0800
+++ svx/source/dialog/dlgutil.cxx	2007-12-17 11:13:12.000000000 +0800
@@ -55,6 +55,10 @@
 #include <sfx2/viewfrm.hxx>
 #include <sfx2/objsh.hxx>
 
+#ifndef _SFXENUMITEM_HXX
+#include <svtools/eitem.hxx>
+#endif
+
 #include <svx/dialogs.hrc>
 
 #include "dlgutil.hxx"
@@ -125,6 +129,9 @@
 	rField.SetUnit( eUnit );
 	switch( eUnit )
 	{
+		// Amelia : sets the step of "char" and "line" unit , they are same as FUNIT_MM
+		case FUNIT_CHAR:
+		case FUNIT_LINE:
 		case FUNIT_MM:
 			rField.SetSpinSize( 50 );
 			break;
@@ -222,6 +229,36 @@
 	}
 	return eUnit;
 }
+// -----------------------------------------------------------------------
+BOOL GetApplyCharUnit( const SfxItemSet* pSet )
+{
+	BOOL  bUseCharUnit = FALSE;
+	const SfxPoolItem* pItem = NULL;
+	if ( pSet && SFX_ITEM_SET == pSet->GetItemState( SID_ATTR_APPLYCHARUNIT, FALSE, &pItem ) )
+		bUseCharUnit = (BOOL)( (const SfxBoolItem*)pItem )->GetValue();
+	else
+	{
+		SfxViewFrame* pFrame = SfxViewFrame::Current();
+		SfxObjectShell* pSh = NULL;
+		if ( pFrame )
+		pSh = pFrame->GetObjectShell();
+ 		if ( pSh )  // #93209# the object shell is not always available during reload
+ 		{
+			SfxModule* pModule = pSh->GetModule();
+			if ( pModule )
+			{
+				const SfxPoolItem* pItem = pModule->GetItem( SID_ATTR_APPLYCHARUNIT );
+				if ( pItem )
+					bUseCharUnit = (BOOL)( (SfxBoolItem*)pItem )->GetValue();
+			}
+			else
+			{
+				DBG_ERRORFILE( "GetApplyCharUnit(): no module found" );
+			}
+		}
+	}
+	return bUseCharUnit;
+}
 
 // -----------------------------------------------------------------------
 void SetMetricValue( MetricField& rField, long nCoreValue, SfxMapUnit eUnit )
diff -uNr svx/source/dialog/paragrph.cxx svx/source/dialog/paragrph.cxx
--- svx/source/dialog/paragrph.cxx	2007-12-17 01:40:34.000000000 +0800
+++ svx/source/dialog/paragrph.cxx	2007-12-17 11:13:12.000000000 +0800
@@ -482,11 +482,20 @@
 
 	// Metrik einstellen
 	FieldUnit eFUnit = GetModuleFieldUnit( &rSet );
+
+	BOOL bApplyCharUnit = sal_False ;
+	bApplyCharUnit = GetApplyCharUnit( &rSet );
+
+	if ( bApplyCharUnit )
+		eFUnit = FUNIT_CHAR;  // Amelia
 	SetFieldUnit( aLeftIndent, eFUnit );
 	SetFieldUnit( aRightIndent, eFUnit );
 	SetFieldUnit( aFLineIndent, eFUnit );
+	if ( bApplyCharUnit )
+		eFUnit = FUNIT_LINE;   // Amelia
 	SetFieldUnit( aTopDist, eFUnit );
 	SetFieldUnit( aBottomDist, eFUnit );
+	eFUnit = FUNIT_POINT;
 	SetFieldUnit( aLineDistAtMetricBox, eFUnit );
 
     USHORT _nWhich = GetWhich( SID_ATTR_LRSPACE );
diff -uNr sw/inc/swmodule.hxx sw/inc/swmodule.hxx
--- sw/inc/swmodule.hxx	2007-12-17 01:41:35.000000000 +0800
+++ sw/inc/swmodule.hxx	2007-12-17 11:13:50.000000000 +0800
@@ -197,6 +197,8 @@
     //default page mode for text grid 
     SW_DLLPUBLIC void ApplyDefaultPageMode(sal_Bool bIsSquaredPageMode);
 
+	void ApplyUserCharUnit(BOOL bApplyChar, BOOL bWeb);  // apply_char_unit
+
 	// ConfigItems erzeugen
 	SwModuleOptions*    GetModuleConfig()		{ return pModuleConfig;}
 	SW_DLLPUBLIC SwPrintOptions* 	GetPrtOptions(sal_Bool bWeb);
diff -uNr sw/source/ui/app/appopt.cxx sw/source/ui/app/appopt.cxx
--- sw/source/ui/app/appopt.cxx	2007-12-17 01:41:44.000000000 +0800
+++ sw/source/ui/app/appopt.cxx	2007-12-17 11:13:58.000000000 +0800
@@ -205,6 +205,7 @@
 									FN_PARAM_WRTSHELL,		FN_PARAM_WRTSHELL,
 									FN_PARAM_ADDPRINTER, 	FN_PARAM_ADDPRINTER,
 									SID_ATTR_METRIC,		SID_ATTR_METRIC,
+									SID_ATTR_APPLYCHARUNIT, SID_ATTR_APPLYCHARUNIT,
 									SID_ATTR_DEFTABSTOP, 	SID_ATTR_DEFTABSTOP,
 									RES_BACKGROUND,			RES_BACKGROUND,
 									SID_HTML_MODE,			SID_HTML_MODE,
@@ -437,6 +438,15 @@
 		const SfxUInt16Item* pMetricItem = (const SfxUInt16Item*)pItem;
 		::SetDfltMetric((FieldUnit)pMetricItem->GetValue(), !bTextDialog);
 	}
+
+	if( SFX_ITEM_SET == rSet.GetItemState(SID_ATTR_APPLYCHARUNIT,
+													FALSE, &pItem ) )
+	{
+		SFX_APP()->SetOptions(rSet);
+		const SfxBoolItem* pCharItem = (const SfxBoolItem*)pItem;
+		::SetApplyCharUnit(pCharItem->GetValue(), !bTextDialog);
+	}
+
     if( SFX_ITEM_SET == rSet.GetItemState(FN_HSCROLL_METRIC,
 													FALSE, &pItem ) )
 	{
diff -uNr sw/source/ui/app/swmodul1.cxx sw/source/ui/app/swmodul1.cxx
--- sw/source/ui/app/swmodul1.cxx	2007-12-17 01:41:44.000000000 +0800
+++ sw/source/ui/app/swmodul1.cxx	2007-12-17 11:13:58.000000000 +0800
@@ -344,6 +344,63 @@
 		}
 
 }
+
+/*-------------------------------------------------
+set the usrpref 's char unit attribute and set ruler
+'s unit as char if the "apply char unit" is checked
+--------------------------------------------------*/
+void SwModule::ApplyUserCharUnit(BOOL bApplyChar, BOOL bWeb)
+{
+	SwMasterUsrPref* pPref;
+	if(bWeb)
+	{
+		if(!pWebUsrPref)
+		GetUsrPref(sal_True);
+		pPref = pWebUsrPref;
+	}
+	else
+	{
+		if(!pUsrPref)
+		GetUsrPref(sal_False);
+		pPref = pUsrPref;
+	}
+	BOOL  bOldApplyCharUnit = pPref->IsApplyCharUnit();
+	BOOL    bHasChanged = FALSE;
+	if(bOldApplyCharUnit != bApplyChar)
+	{
+		pPref->SetApplyCharUnit(bApplyChar);
+		bHasChanged = TRUE;
+	}
+
+	if( !bHasChanged )
+		return;
+
+	FieldUnit eHScrollMetric = pPref->IsHScrollMetric() ? pPref->GetHScrollMetric() : pPref->GetMetric();
+	FieldUnit eVScrollMetric = pPref->IsVScrollMetric() ? pPref->GetVScrollMetric() : pPref->GetMetric();
+	if(bApplyChar)
+	{
+		eHScrollMetric = FUNIT_CHAR;
+		eVScrollMetric = FUNIT_LINE;
+	}
+	else
+	{
+		eHScrollMetric = FUNIT_CM;
+		eVScrollMetric = FUNIT_CM;
+	}
+	SwView* pTmpView = SwModule::GetFirstView();
+	// fuer alle MDI-Fenster das Lineal umschalten
+	while(pTmpView)
+	{
+		if(bWeb == (0 != PTR_CAST(SwWebView, pTmpView)))
+		{
+			pTmpView->ChangeVLinealMetric(eVScrollMetric);
+			pTmpView->ChangeTabMetric(eHScrollMetric);
+		}
+
+		pTmpView = SwModule::GetNextView(pTmpView);
+	}
+}
+
 /*-----------------13.11.96 11.57-------------------
 
 --------------------------------------------------*/
diff -uNr sw/source/ui/config/optload.cxx sw/source/ui/config/optload.cxx
--- sw/source/ui/config/optload.cxx	2007-12-17 01:41:54.000000000 +0800
+++ sw/source/ui/config/optload.cxx	2007-12-17 11:14:00.000000000 +0800
@@ -260,6 +260,12 @@
 					(USHORT)aTabMF.Denormalize(aTabMF.GetValue(FUNIT_TWIP))));
         bRet = TRUE;
     }
+
+	if(aUseCharUnit.IsChecked() != aUseCharUnit.GetSavedValue())
+	{
+		rSet.Put(SfxBoolItem(SID_ATTR_APPLYCHARUNIT, aUseCharUnit.IsChecked()));
+		bRet = TRUE;
+	}
     
     sal_Bool bIsSquaredPageModeFlag = aUseSquaredPageMode.IsChecked();
     if ( bIsSquaredPageModeFlag != aUseSquaredPageMode.GetSavedValue() )
@@ -347,6 +353,17 @@
 		aUseSquaredPageMode.Check( bSquaredPageMode );
    	 	aUseSquaredPageMode.SaveValue();
 	}
+
+	if(SFX_ITEM_SET == rSet.GetItemState(SID_ATTR_APPLYCHARUNIT, FALSE, &pItem))
+	{
+		BOOL bUseCharUnit = ((const SfxBoolItem*)pItem)->GetValue();
+		aUseCharUnit.Check(bUseCharUnit);
+	}
+	else
+	{
+		aUseCharUnit.Check(pUsrPref->IsApplyCharUnit());
+	}
+	aUseCharUnit.SaveValue();
 }
 /*-----------------13.01.97 14.44-------------------
 	Metric des Deftabstops umschalten
diff -uNr sw/source/ui/config/usrpref.cxx sw/source/ui/config/usrpref.cxx
--- sw/source/ui/config/usrpref.cxx	2007-12-17 01:41:54.000000000 +0800
+++ sw/source/ui/config/usrpref.cxx	2007-12-17 11:14:00.000000000 +0800
@@ -283,9 +283,10 @@
         "Window/IsVerticalRulerRight",      //15
         "ViewLayout/Columns",               //16
         "ViewLayout/BookMode"               //17
-        "Other/IsSquaredPageMode"           //18
+        "Other/IsSquaredPageMode",        //18
+        "Other/ApplyCharUnit"               //19
     };
-    const int nCount = bWeb ? 14 : 19;
+    const int nCount = bWeb ? 14 : 20;
     Sequence<OUString> aNames(nCount);
 	OUString* pNames = aNames.getArray();
 	for(int i = 0; i < nCount; i++)
@@ -350,8 +351,9 @@
             case 16: pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(rParent.GetDefTab())); break;// "Other/TabStop",
             case 17: bSet = rParent.IsVRulerRight(); break;// "Window/IsVerticalRulerRight",
             case 18: bSet = rParent.IsSquaredPageMode(); break;// "Other/IsSquaredPageMode",
+            case 19: bSet = rParent.IsApplyCharUnit(); break;// "Other/IsApplyCharUnit",
         }
-        if(nProp < 8 || nProp == 10 || nProp == 15 || nProp == 17 || nProp == 18 )
+        if(nProp < 8 || nProp == 10 || nProp == 15 || nProp == 17 || nProp == 18 || nProp == 19 )
 			pValues[nProp].setValue(&bSet, ::getBooleanCppuType());
 	}
 	PutProperties(aNames, aValues);
@@ -371,7 +373,7 @@
 		{
 			if(pValues[nProp].hasValue())
 			{
-                sal_Bool bSet = nProp < 8 || nProp == 10 || nProp == 17 || nProp == 18 ? *(sal_Bool*)pValues[nProp].getValue() : sal_False;
+                sal_Bool bSet = nProp < 8 || nProp == 10 || nProp == 17 || nProp == 18 || nProp == 19 ? *(sal_Bool*)pValues[nProp].getValue() : sal_False;
                 switch(nProp)
 				{
                     case  0: rParent.SetCrossHair(bSet); break;// "Line/Guide",
@@ -429,6 +431,7 @@
 					break;// "Other/TabStop",
                     case 17: rParent.SetVRulerRight(bSet); break;// "Window/IsVerticalRulerRight",
                     case 18: rParent.SetDefaultPageMode(bSet); break;// "Other/IsSquaredPageMode",
+                    case 19: rParent.SetApplyCharUnit(bSet); break;// "Other/ApplyUserChar"
                 }
 			}
 		}
diff -uNr sw/source/ui/inc/pggrid.hxx sw/source/ui/inc/pggrid.hxx
--- sw/source/ui/inc/pggrid.hxx	2007-12-17 10:57:44.000000000 +0800
+++ sw/source/ui/inc/pggrid.hxx	2007-12-17 11:13:58.000000000 +0800
@@ -92,7 +92,7 @@
     FixedText       aColorFT;
     ColorListBox    aColorLB;
 
-    Window*         aControls[18];
+    Window*         aControls[20];
 
     sal_Int32       m_nRubyUserValue;
     sal_Bool        m_bRubyUserValue;
diff -uNr sw/source/ui/inc/uitool.hxx sw/source/ui/inc/uitool.hxx
--- sw/source/ui/inc/uitool.hxx	2007-12-17 01:41:47.000000000 +0800
+++ sw/source/ui/inc/uitool.hxx	2007-12-17 11:13:58.000000000 +0800
@@ -90,6 +90,9 @@
 SW_DLLPUBLIC FieldUnit	GetDfltMetric(BOOL bWeb);
 void		SetDfltMetric(FieldUnit	eMetric, BOOL bWeb);
 
+SW_DLLPUBLIC BOOL HasCharUnit( BOOL bWeb );
+void SetApplyCharUnit(BOOL bApplyChar, BOOL bWeb);
+
 // ListBox mit allen Zeichenvorlagen fuellen - ausser Standard!
 SW_DLLPUBLIC void FillCharStyleListBox(ListBox& rToFill, SwDocShell* pDocSh, BOOL bSorted = FALSE, BOOL bWithDefault = FALSE);
 
diff -uNr sw/source/ui/inc/usrpref.hxx sw/source/ui/inc/usrpref.hxx
--- sw/source/ui/inc/usrpref.hxx	2007-12-17 01:41:46.000000000 +0800
+++ sw/source/ui/inc/usrpref.hxx	2007-12-17 11:13:58.000000000 +0800
@@ -165,6 +165,7 @@
     SwCursorConfig      aCursorConfig;
     SwWebColorConfig*   pWebColorConfig;
 
+    sal_Bool bApplyCharUnit; // apply_char_unit
 public:
 	SwMasterUsrPref(BOOL bWeb);
 	~SwMasterUsrPref();
@@ -266,6 +267,17 @@
                         aLayoutConfig.SetModified();
                 }
 
+    sal_Bool    IsApplyCharUnit() const
+    {
+        return bApplyCharUnit;
+    }
+    void   SetApplyCharUnit(BOOL bSet, sal_Bool bNoModify = sal_False)
+    {
+        bApplyCharUnit = bSet;
+        if(!bNoModify)
+            aLayoutConfig.SetModified();
+    }
+
     sal_Int32   GetDefTab() const { return nDefTab;}
     void        SetDefTab( sal_Int32  nSet, sal_Bool bNoModify = sal_False )
                 {
+diff -uNr sw/source/ui/misc/pggrid.cxx sw/source/ui/misc/pggrid.cxx
--- sw/source/ui/misc/pggrid.cxx	2007-12-17 01:41:49.000000000 +0800
+++ sw/source/ui/misc/pggrid.cxx	2007-12-17 11:13:59.000000000 +0800
@@ -149,7 +149,9 @@
     aControls[14] =&aPrintCB;
     aControls[15] =&aColorFT;
     aControls[16] =&aColorLB;
-    aControls[17] =0;
+    aControls[17] =&aLinesRangeFT;
+    aControls[18] =&aCharsRangeFT;
+    aControls[19] =0;
 
     Link aLink = LINK(this, SwTextGridPage, CharorLineChangedHdl);
     aCharsPerLineNF.SetUpHdl(aLink);
@@ -346,6 +348,10 @@
         aGridItem.SetPrintGrid(aPrintCB.IsChecked());
         aGridItem.SetColor(aColorLB.GetSelectEntryColor());
         rSet.Put(aGridItem);
+/// Amelia
+        SwView * pView = ::GetActiveView();
+        pView->GetHLineal().SetCharWidth((long)(aCharWidthMF.GetValue(FUNIT_TWIP)/56.7));
+        pView->GetVLineal().SetLineHeight((long)(aTextSizeMF.GetValue(FUNIT_TWIP)/56.7));
 }
 /* -----------------------------08.02.2002 10:54------------------------------
 
@@ -450,6 +456,10 @@
             long nHeight = static_cast< sal_Int32 >(m_aPageSize.Height() / aLinesPerPageNF.GetValue());
             aTextSizeMF.SetValue(aTextSizeMF.Normalize(nHeight), FUNIT_TWIP);
             aRubySizeMF.SetValue(0, FUNIT_TWIP);
+            String aMaxLinesFTStr = String::CreateFromAscii("( 1 - ");
+            aMaxLinesFTStr += String::CreateFromInt32(aLinesPerPageNF.GetValue());
+            aMaxLinesFTStr += String::CreateFromAscii(" )");
+            aLinesRangeFT.SetText( aMaxLinesFTStr );
             
             m_nRubyUserValue = nHeight;
             m_bRubyUserValue = sal_True;
@@ -458,6 +468,10 @@
         {
             long nWidth = static_cast< sal_Int32 >(m_aPageSize.Width() / aCharsPerLineNF.GetValue());
             aCharWidthMF.SetValue(aCharWidthMF.Normalize(nWidth), FUNIT_TWIP);
+            String aMaxCharsFTStr = String::CreateFromAscii("( 1 - ");
+            aMaxCharsFTStr += String::CreateFromInt32(aCharsPerLineNF.GetValue());
+            aMaxCharsFTStr += String::CreateFromAscii(" )");
+            aCharsRangeFT.SetText( aMaxCharsFTStr );
         }
     }
     GridModifyHdl(0);
@@ -473,7 +487,6 @@
         if (&aTextSizeMF == pField)
     {
         sal_Int32 nTextSize = static_cast< sal_Int32 >(aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP)));
-        aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextSize);
         m_bRubyUserValue = sal_False;
     }
 		//set maximum line per page
@@ -491,14 +504,22 @@
             sal_Int32 nTextSize = static_cast< sal_Int32 >(aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP)));
             aLinesPerPageNF.SetValue(m_aPageSize.Height() / nTextSize);
             m_bRubyUserValue = sal_False;
+            String aRangesStr = String::CreateFromAscii("( 1 - ");
+            aRangesStr += String::CreateFromInt32( m_aPageSize.Height() / nTextSize );
+            aRangesStr += String::CreateFromAscii(" )");
+            aLinesRangeFT.SetText( aRangesStr );
         }
         else if (&aCharWidthMF == pField)
         {
             sal_Int32 nTextWidth = static_cast< sal_Int32 >(aCharWidthMF.Denormalize(aCharWidthMF.GetValue(FUNIT_TWIP)));
+            sal_Int32 nMaxChar = 45 ;
             if (nTextWidth)
-                aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextWidth); 
-            else
-                aCharsPerLineNF.SetValue( 45 );
+                nMaxChar = m_aPageSize.Width() / nTextWidth;
+            aCharsPerLineNF.SetValue( nMaxChar );
+            String aCharRangeStr = String::CreateFromAscii("( 1 - ");
+            aCharRangeStr += String::CreateFromInt32( nMaxChar );
+            aCharRangeStr += String::CreateFromAscii(" )");
+            aCharsRangeFT.SetText( aCharRangeStr );
         }
         //rubySize is disabled
     }
@@ -526,6 +547,7 @@
 	{
 		aCharsPerLineFT.Enable(sal_False);
 		aCharsPerLineNF.Enable(sal_False);
+		aCharsRangeFT.Enable(sal_False);
 		aCharWidthFT.Enable(sal_False);
 		aCharWidthMF.Enable(sal_False);
 	}
diff -uNr sw/source/ui/shells/textsh1.cxx sw/source/ui/shells/textsh1.cxx
--- sw/source/ui/shells/textsh1.cxx	2007-12-17 01:41:56.000000000 +0800
+++ sw/source/ui/shells/textsh1.cxx	2007-12-17 11:14:01.000000000 +0800
@@ -807,6 +807,10 @@
 		{
             FieldUnit eMetric = ::GetDfltMetric(0 != PTR_CAST(SwWebView, &GetView()));
             SW_MOD()->PutItem(SfxUInt16Item(SID_ATTR_METRIC, static_cast< UINT16 >(eMetric)));
+
+            BOOL bApplyCharUnit = ::HasCharUnit(0 != PTR_CAST(SwWebView, &GetView()));
+            SW_MOD()->PutItem(SfxBoolItem(SID_ATTR_APPLYCHARUNIT, bApplyCharUnit));
+
             SfxItemSet aCoreSet( GetPool(),
                             RES_PARATR_BEGIN,           RES_PARATR_END - 1,
                             RES_FRMATR_BEGIN,           RES_FRMATR_END - 1,
diff -uNr sw/source/ui/uiview/view.cxx sw/source/ui/uiview/view.cxx
--- sw/source/ui/uiview/view.cxx	2007-12-17 01:41:57.000000000 +0800
+++ sw/source/ui/uiview/view.cxx	2007-12-17 11:35:56.000000000 +0800
@@ -267,6 +267,7 @@
 
 #include <unomid.h>
 
+
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::lang;
@@ -1062,9 +1063,21 @@
     pVRuler->SetZoom( aZoomFract );
     pHRuler->SetDoubleClickHdl(LINK( this, SwView, ExecRulerClick ));
     FieldUnit eMetric = pUsrPref->GetHScrollMetric();
-    pHRuler->SetUnit( eMetric );
+
+    BOOL bApplyCharUnit = pUsrPref->IsApplyCharUnit();
+    if ( bApplyCharUnit )
+        pHRuler->SetUnit( FUNIT_CHAR );
+    else
+        pHRuler->SetUnit( eMetric );
+
     eMetric = pUsrPref->GetVScrollMetric();
-    pVRuler->SetUnit( eMetric );
+    if ( bApplyCharUnit )
+        pVRuler->SetUnit(FUNIT_LINE);
+    else
+        pVRuler->SetUnit( eMetric );
+
+        pHRuler->SetCharWidth( 371 );  // default character width
+        pVRuler->SetLineHeight( 551 );  // default line height
 
 	// DocShell setzen
 	pDocSh->SetView( this );
diff -uNr sw/source/ui/utlui/uitool.cxx sw/source/ui/utlui/uitool.cxx
--- sw/source/ui/utlui/uitool.cxx	2007-12-17 01:41:51.000000000 +0800
+++ sw/source/ui/utlui/uitool.cxx	2007-12-17 11:14:00.000000000 +0800
@@ -827,6 +827,19 @@
 	return sRet;
 }
 
+/*----------------------------------------------------------------------------
+ * add a new function which can get and set the current "SID_ATTR_APPLYCHARUNIT" value
+ *---------------------------------------------------------------------------*/
+BOOL HasCharUnit( BOOL bWeb)
+{
+    return SW_MOD()->GetUsrPref(bWeb)->IsApplyCharUnit();
+}
+
+void SetApplyCharUnit(BOOL bApplyChar, BOOL bWeb)
+{
+    SW_MOD()->ApplyUserCharUnit(bApplyChar, bWeb);
+}
+
 /*-- 26.01.2006 08:06:33---------------------------------------------------
 
   -----------------------------------------------------------------------*/
