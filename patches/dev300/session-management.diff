diff --git vcl/inc/vcl/salsession.hxx vcl/inc/vcl/salsession.hxx
index 13ec237..bff9626 100644
--- vcl/inc/vcl/salsession.hxx
+++ vcl/inc/vcl/salsession.hxx
@@ -102,11 +102,9 @@ public:
     // query the session manager for a user interaction slot
     virtual void queryInteraction() = 0;
     // signal the session manager that we're done with user interaction
-    virtual void interactionDone() = 0;
+    virtual void interactionDone( bool bCancelShutdown ) = 0;
     // signal that we're done saving
     virtual void saveDone() = 0;
-    // try to cancel the sutdown in progress
-    virtual bool cancelShutdown() = 0;
 };
 
 #endif
diff --git vcl/source/app/session.cxx vcl/source/app/session.cxx
index e1ebe1e..7c1f14a 100644
--- vcl/source/app/session.cxx
+++ vcl/source/app/session.cxx
@@ -88,9 +88,8 @@ public:
     virtual void SAL_CALL addSessionManagerListener( const Reference< XSessionManagerListener >& xListener ) throw( RuntimeException );
     virtual void SAL_CALL removeSessionManagerListener( const Reference< XSessionManagerListener>& xListener ) throw( RuntimeException );
     virtual void SAL_CALL queryInteraction( const Reference< XSessionManagerListener >& xListener ) throw( RuntimeException );
-    virtual void SAL_CALL interactionDone( const Reference< XSessionManagerListener >& xListener ) throw( RuntimeException );
+    virtual void SAL_CALL interactionDone( const Reference< XSessionManagerListener >& xListener, sal_Bool bCancelShutdown ) throw( RuntimeException );
     virtual void SAL_CALL saveDone( const Reference< XSessionManagerListener >& xListener ) throw( RuntimeException );
-    virtual sal_Bool SAL_CALL cancelShutdown() throw( RuntimeException );
 };
 
 VCLSession* VCLSession::pOneInstance = NULL;
@@ -170,7 +169,7 @@ void VCLSession::callInteractionGranted( bool bInteractionGranted )
         if( aListeners.empty() )
         {
             if( m_pSession )
-                m_pSession->interactionDone();
+                m_pSession->interactionDone( false );
             return;
         }
     }
@@ -272,7 +271,7 @@ void SAL_CALL VCLSession::queryInteraction( const Reference<XSessionManagerListe
     }
 }
 
-void SAL_CALL VCLSession::interactionDone( const Reference< XSessionManagerListener >& xListener ) throw( RuntimeException )
+void SAL_CALL VCLSession::interactionDone( const Reference< XSessionManagerListener >& xListener, sal_Bool bCancelShutdown ) throw( RuntimeException )
 {
     osl::MutexGuard aGuard( m_aMutex );
     int nRequested = 0, nDone = 0;
@@ -291,7 +290,7 @@ void SAL_CALL VCLSession::interactionDone( const Reference< XSessionManagerListe
     {
         m_bInteractionDone = true;
         if( m_pSession )
-            m_pSession->interactionDone();
+            m_pSession->interactionDone( bCancelShutdown );
     }
 }
 
@@ -316,11 +315,6 @@ void SAL_CALL VCLSession::saveDone( const Reference< XSessionManagerListener >&
     }
 }
 
-sal_Bool SAL_CALL VCLSession::cancelShutdown() throw( RuntimeException )
-{
-    return m_pSession ? (sal_Bool)m_pSession->cancelShutdown() : sal_False;
-}
-
 // service implementation
 
 OUString SAL_CALL vcl_session_getImplementationName()
diff --git vcl/unx/inc/sm.hxx vcl/unx/inc/sm.hxx
index 998b8ec..03646ba 100644
--- vcl/unx/inc/sm.hxx
+++ vcl/unx/inc/sm.hxx
@@ -39,7 +39,8 @@ class SessionManagerClient
 {
     static SmcConn			aSmcConnection;
     static ByteString		aClientID;
-    static bool			bDocSaveDone;
+    static bool			    bDocSaveDone;
+    static bool             bSaveDoneSent;
 
     static void SaveYourselfProc(		SmcConn connection,
                                         SmPointer client_data,
@@ -68,8 +69,8 @@ public:
 
     static bool checkDocumentsSaved();
     static bool queryInteraction();
-    static void saveDone();
-    static void interactionDone();
+    static void saveDone( bool bSuccess = true );
+    static void interactionDone( bool bCancelShutdown = false );
 
     static String getExecName();
     static VCL_DLLPUBLIC const ByteString&  getSessionID();
@@ -84,9 +85,8 @@ public:
     virtual ~IceSalSession();
     
     virtual void queryInteraction();
-    virtual void interactionDone();
+    virtual void interactionDone( bool bCancelShutdown );
     virtual void saveDone();
-    virtual bool cancelShutdown();
 
     static void handleOldX11SaveYourself( SalFrame* pFrame );
 };
diff --git vcl/unx/source/app/sm.cxx vcl/unx/source/app/sm.cxx
index c5c25a4..b9ed5ed 100644
--- vcl/unx/source/app/sm.cxx
+++ vcl/unx/source/app/sm.cxx
@@ -112,9 +112,9 @@ void IceSalSession::queryInteraction()
     }
 }
 
-void IceSalSession::interactionDone()
+void IceSalSession::interactionDone( bool bCancelShutdown )
 {
-    SessionManagerClient::interactionDone();
+    SessionManagerClient::interactionDone( bCancelShutdown );
 }
 
 void IceSalSession::saveDone()
@@ -127,11 +127,6 @@ void IceSalSession::saveDone()
     }
 }
 
-bool IceSalSession::cancelShutdown()
-{
-    return false;
-}
-
 void IceSalSession::handleOldX11SaveYourself( SalFrame* pFrame )
 {
     // do this only once
@@ -184,6 +179,7 @@ int					ICEConnectionObserver::nWakeupFiles[2]			= { 0, 0 };
 // HACK
 bool SessionManagerClient::bDocSaveDone = false;
 
+bool SessionManagerClient::bSaveDoneSent = false;
 
 static SmProp*	pSmProps = NULL;
 static SmProp**	ppSmProps = NULL;
@@ -265,6 +261,12 @@ bool SessionManagerClient::checkDocumentsSaved()
     return bDocSaveDone;
 }
 
+struct SaveYourselfArgs {
+    bool bShutdown;
+    bool bFast;
+    int nInteractionStyle;
+} aSaveYourselfArg;
+
 IMPL_STATIC_LINK( SessionManagerClient, SaveYourselfHdl, void*, EMPTYARG )
 {
     SMprintf( "posting save documents event shutdown = %s\n", (pThis!=0) ? "true" : "false" );
@@ -295,7 +297,7 @@ IMPL_STATIC_LINK( SessionManagerClient, SaveYourselfHdl, void*, EMPTYARG )
 
     if( pOneInstance )
     {
-        SalSessionSaveRequestEvent aEvent( pThis != 0, false );
+        SalSessionSaveRequestEvent aEvent( aSaveYourselfArg.bShutdown, aSaveYourselfArg.nInteractionStyle == SmInteractStyleAny && !aSaveYourselfArg.bFast );
         pOneInstance->CallCallback( &aEvent );        
     }
     else
@@ -307,12 +309,13 @@ IMPL_STATIC_LINK( SessionManagerClient, SaveYourselfHdl, void*, EMPTYARG )
 IMPL_STATIC_LINK_NOINSTANCE( SessionManagerClient, InteractionHdl, void*, EMPTYARG )
 {
     SMprintf( "interaction link\n" );
-    if( pOneInstance )
+ 
+    if( pOneInstance )
     {
         SalSessionInteractionEvent aEvent( true );
         pOneInstance->CallCallback( &aEvent );
     }
-    
+
     return 0;
 }
 
@@ -325,6 +328,9 @@ IMPL_STATIC_LINK_NOINSTANCE( SessionManagerClient, ShutDownCancelHdl, void*, EMP
         pOneInstance->CallCallback( &aEvent );
     }
     
+ 	if( !bSaveDoneSent )
+ 		saveDone( false );
+
     return 0;
 }
 
@@ -334,7 +340,7 @@ void SessionManagerClient::SaveYourselfProc(
     int save_type,
     Bool shutdown,
     int interact_style,
-    Bool
+    Bool fast
     )
 {
     SMprintf( "Session: save yourself, save_type = %s, shutdown = %s, interact_style = %s, fast = %s\n",
@@ -345,8 +351,9 @@ void SessionManagerClient::SaveYourselfProc(
               interact_style == SmInteractStyleNone ? "SmInteractStyleNone" :
               ( interact_style == SmInteractStyleErrors ? "SmInteractStyleErrors" :
                 ( interact_style == SmInteractStyleAny ? "SmInteractStyleAny" : "<unknown>" ) ),
-              false ? "true" : "false"
+              fast ? "true" : "false"
               );
+    bSaveDoneSent = false;
     BuildSmPropertyList();
 #ifdef USE_SM_EXTENSION
     bDocSaveDone = false;
@@ -361,7 +368,12 @@ void SessionManagerClient::SaveYourselfProc(
         SessionManagerClient::saveDone();
         return;
     }
-    Application::PostUserEvent( STATIC_LINK( (void*)(shutdown ? 0xffffffff : 0x0), SessionManagerClient, SaveYourselfHdl ) );
+
+    aSaveYourselfArg.bShutdown = shutdown;
+    aSaveYourselfArg.nInteractionStyle = interact_style;
+    aSaveYourselfArg.bFast = fast;
+    Application::PostUserEvent( STATIC_LINK( NULL, SessionManagerClient, SaveYourselfHdl ) );
+
     SMprintf( "waiting for save yourself event to be processed\n" );
 #endif
 }
@@ -414,15 +426,17 @@ void SessionManagerClient::InteractProc(
         Application::PostUserEvent( STATIC_LINK( NULL, SessionManagerClient, InteractionHdl ) );
 }
 
-void SessionManagerClient::saveDone()
+void SessionManagerClient::saveDone( bool bSuccess )
 {
     if( aSmcConnection )
     {
         ICEConnectionObserver::lock();
-        SmcSetProperties( aSmcConnection, nSmProps, ppSmProps );
-        SmcSaveYourselfDone( aSmcConnection, True );
+        if( bSuccess )
+            SmcSetProperties( aSmcConnection, nSmProps, ppSmProps );
+        SmcSaveYourselfDone( aSmcConnection, bSuccess );
         SMprintf( "sent SaveYourselfDone SmRestartHint of %d\n", *pSmRestartHint );
-        bDocSaveDone = true;
+        bDocSaveDone = bSuccess;
+        bSaveDoneSent = true;
         ICEConnectionObserver::unlock();
     }
 }
@@ -526,12 +540,12 @@ bool SessionManagerClient::queryInteraction()
     return bRet;
 }
 
-void SessionManagerClient::interactionDone()
+void SessionManagerClient::interactionDone( bool bCancelShutdown )
 {
     if( aSmcConnection )
     {
         ICEConnectionObserver::lock();
-        SmcInteractDone( aSmcConnection, False );
+        SmcInteractDone( aSmcConnection, bCancelShutdown );
         ICEConnectionObserver::unlock();
     }
 }
diff -rup offapi/com/sun/star/frame/XSessionManagerClient.idl offapi/com/sun/star/frame/XSessionManagerClient.idl
--- offapi/com/sun/star/frame/XSessionManagerClient.idl	2005-09-08 03:25:36.000000000 +0200
+++ offapi/com/sun/star/frame/XSessionManagerClient.idl	2006-02-20 17:09:58.000000000 +0100
@@ -88,7 +88,7 @@ module com {  module sun {  module star 
 
         @see XSessionManagerListener
         */
-        [oneway] void interactionDone( [in] XSessionManagerListener xListener );
+        [oneway] void interactionDone( [in] XSessionManagerListener xListener, [in] boolean bCancelShutdown );
 
         /** saveDone signals that a listener has processed a save request
 
@@ -98,14 +98,6 @@ module com {  module sun {  module star 
         @see XSessionManagerListener
         */
         [oneway] void saveDone( [in] XSessionManagerListener xListener );
-
-        /** Call cancelShutdown to try to cancel a desktop shutdown in progress
-
-        @returns
-        <TRUE/> if shutdown was canceled,
-        <FALSE/> else.
-        */
-        boolean cancelShutdown();
     };
 
 }; }; }; };
diff -rup framework-m188/inc/services/sessionlistener.hxx framework/inc/services/sessionlistener.hxx
--- framework-m188/inc/services/sessionlistener.hxx	2006-10-31 13:13:27.000000000 +0100
+++ framework/inc/services/sessionlistener.hxx	2006-10-31 18:14:09.000000000 +0100
@@ -161,6 +161,10 @@ class SessionListener :   // interfaces
 
         css::uno::Reference< css::frame::XSessionManagerClient > m_rSessionManager;
 
+        void _requestInteraction();
+        void _finishInteraction( sal_Bool bCancelShutdown );
+        void _saveAutorecovery( sal_Bool bSessionSave );
+
         // restore handling
         sal_Bool m_bRestored;
  
diff -rup framework-m188/source/services/sessionlistener.cxx framework/source/services/sessionlistener.cxx
--- framework-m188/source/services/sessionlistener.cxx	2006-10-31 13:13:29.000000000 +0100
+++ framework/source/services/sessionlistener.cxx	2006-11-01 13:08:26.000000000 +0100
@@ -249,38 +249,50 @@ sal_Bool SAL_CALL SessionListener::doRes
     return m_bRestored;
 }
 
+void SessionListener::_saveAutorecovery( sal_Bool bSessionSave )
+{
+    sal_Bool bDispatched = sal_False;
+    ResetableGuard aGuard(m_aLock);    
+    try 
+        {
+                        // ON session save
+            // xd create SERVICENAME_AUTORECOVERY -> XDispatch
+            // xd->dispatch("vnd.sun.star.autorecovery:/doSessionSave, async=true
+            // on stop event m_rSessionManager->saveDone(this);
+                        // ON autosave ( bSessionSave == false)
+            // xd->dispatch("vnd.sun.star.autorecovery:/doAutoSave, async=false
+
+            css::uno::Reference< XDispatch > xDispatch(m_xSMGR->createInstance(SERVICENAME_AUTORECOVERY), UNO_QUERY_THROW);
+            css::uno::Reference< XURLTransformer > xURLTransformer(m_xSMGR->createInstance(SERVICENAME_URLTRANSFORMER), UNO_QUERY_THROW);
+            URL aURL;
+            aURL.Complete = OUString::createFromAscii(bSessionSave
+                                                                  ? "vnd.sun.star.autorecovery:/doSessionSave"
+                                                                  : "vnd.sun.star.autorecovery:/doAutoSave");
+            xURLTransformer->parseStrict(aURL);
+                        if( bSessionSave )
+                            xDispatch->addStatusListener(this, aURL);
+            Sequence< PropertyValue > args(1);
+            args[0] = PropertyValue(OUString::createFromAscii("DispatchAsynchron"),-1,makeAny(bSessionSave),PropertyState_DIRECT_VALUE);
+            xDispatch->dispatch(aURL, args);
+            bDispatched = sal_True;
+            // on stop event set call m_rSessionManager->saveDone(this);            
+        } catch (com::sun::star::uno::Exception& e) {
+            OString aMsg = OUStringToOString(e.Message, RTL_TEXTENCODING_UTF8);
+            OSL_ENSURE(sal_False, aMsg.getStr());
+            // save failed, but tell manager to go on if we havent yet dispatched the request
+            if (m_rSessionManager.is() && !bDispatched && bSessionSave)
+                m_rSessionManager->saveDone(this);
+        }
+}
 
-void SAL_CALL SessionListener::doSave( sal_Bool bShutdown, sal_Bool /*bCancelable*/ )
+void SAL_CALL SessionListener::doSave( sal_Bool bShutdown, sal_Bool bCancelable )
     throw (RuntimeException)
 {
     if (bShutdown)
     {
-        sal_Bool bDispatched = sal_False;
-        ResetableGuard aGuard(m_aLock);    
-        try 
-        {
-            // xd create SERVICENAME_AUTORECOVERY -> XDispatch
-            // xd->dispatch("vnd.sun.star.autorecovery:/doSessionSave, async=true
-            // on stop event m_rSessionManager->saveDone(this);
-
-            css::uno::Reference< XDispatch > xDispatch(m_xSMGR->createInstance(SERVICENAME_AUTORECOVERY), UNO_QUERY_THROW);
-            css::uno::Reference< XURLTransformer > xURLTransformer(m_xSMGR->createInstance(SERVICENAME_URLTRANSFORMER), UNO_QUERY_THROW);
-            URL aURL;
-            aURL.Complete = OUString::createFromAscii("vnd.sun.star.autorecovery:/doSessionSave");
-            xURLTransformer->parseStrict(aURL);
-            xDispatch->addStatusListener(this, aURL);
-            Sequence< PropertyValue > args(1);
-            args[0] = PropertyValue(OUString::createFromAscii("DispatchAsynchron"),-1,makeAny(sal_True),PropertyState_DIRECT_VALUE);
-            xDispatch->dispatch(aURL, args);
-            bDispatched = sal_True;
-            // on stop event set call m_rSessionManager->saveDone(this);            
-        } catch (com::sun::star::uno::Exception& e) {
-            OString aMsg = OUStringToOString(e.Message, RTL_TEXTENCODING_UTF8);
-            OSL_ENSURE(sal_False, aMsg.getStr());
-            // save failed, but tell manager to go on if we havent yet dispatched the request
-            if (m_rSessionManager.is() && !bDispatched)
-                m_rSessionManager->saveDone(this);
-        }
+        _saveAutorecovery( !bCancelable );
+        if (bCancelable)
+            _requestInteraction();
     }
     // we don't have anything to do so tell the session manager we're done
     else if( m_rSessionManager.is() )
@@ -289,12 +301,32 @@ void SAL_CALL SessionListener::doSave( s
 
    
 
-void SAL_CALL SessionListener::approveInteraction( sal_Bool /*bInteractionGranted*/ )
+void SAL_CALL SessionListener::approveInteraction( sal_Bool bInteractionGranted )
     throw (RuntimeException)
-{}
+{
+    if( bInteractionGranted ) {
+        bool bExit = GetpApp()->QueryExit();
+
+        if( m_rSessionManager.is() )
+            m_rSessionManager->saveDone( this );
+    
+        _finishInteraction( !bExit );
+    } else
+        _saveAutorecovery( sal_True );
+}
 
 void SessionListener::shutdownCanceled()
     throw (RuntimeException)
 {}
 
+void SessionListener::_requestInteraction()
+{
+    m_rSessionManager->queryInteraction(Reference<XSessionManagerListener>(this));
+}
+  
+void SessionListener::_finishInteraction( sal_Bool bCancelShutdown )
+{
+    m_rSessionManager->interactionDone(Reference< XSessionManagerListener >(this), bCancelShutdown );
+}
+
 }
