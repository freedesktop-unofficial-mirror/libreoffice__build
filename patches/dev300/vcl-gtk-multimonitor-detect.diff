--- vcl/unx/gtk/app/gtkdata.cxx	(.../tags/DEV300_m46/vcl)	(Revision 271422)
+++ vcl/unx/gtk/app/gtkdata.cxx	(.../cws/vcl101/vcl)	(Revision 271422)
@@ -126,8 +126,14 @@
     pDisp->screenSizeChanged( pScreen );
 }
 
+void signalMonitorsChanged( GdkScreen* pScreen, gpointer data )
+{
+    GtkSalDisplay* pDisp = (GtkSalDisplay*)data;
+    pDisp->monitorsChanged( pScreen );
 }
 
+}
+
 GdkFilterReturn GtkSalDisplay::filterGdkEvent( GdkXEvent* sys_event,
                                                GdkEvent*,
                                                gpointer data )
@@ -192,6 +198,8 @@
             {
                 rSD.m_aSize = Size( gdk_screen_get_width( pScreen ),
                                     gdk_screen_get_height( pScreen ) );
+                if( ! m_aFrames.empty() )
+                    m_aFrames.front()->CallCallback( SALEVENT_DISPLAYCHANGED, 0 );
             }
         }
         else
@@ -201,6 +209,36 @@
     }
 }
 
+void GtkSalDisplay::monitorsChanged( GdkScreen* pScreen )
+{
+    if( pScreen )
+    {
+        if( gdk_display_get_n_screens(m_pGdkDisplay) == 1 )
+        {
+            int nScreen = gdk_screen_get_number( pScreen );
+            if( nScreen == m_nDefaultScreen ) //To-Do, make m_aXineramaScreens a per-screen thing ?
+            {
+                gint nMonitors = gdk_screen_get_n_monitors(pScreen);
+                m_aXineramaScreens = std::vector<Rectangle>();
+                for (gint i = 0; i < nMonitors; ++i)
+                {
+                    GdkRectangle dest;
+                    gdk_screen_get_monitor_geometry(pScreen, i, &dest);
+                    m_aXineramaScreens.push_back( Rectangle( Point(dest.x,
+                                                                   dest.y ), Size( dest.width, dest.height ) ) );
+                }
+                m_bXinerama = m_aXineramaScreens.size() > 1;
+                if( ! m_aFrames.empty() )
+                    m_aFrames.front()->CallCallback( SALEVENT_DISPLAYCHANGED, 0 );
+            }
+            else
+            {
+                DBG_ERROR( "monitors for non-default screen changed, extend-me" );
+            }
+        }
+    }
+}
+
 void GtkSalDisplay::initScreen( int nScreen ) const
 {
     if( nScreen < 0 || nScreen >= static_cast<int>(m_aScreens.size()) )
@@ -626,7 +664,10 @@
     {
         GdkScreen *pScreen = gdk_display_get_screen( pGdkDisp, n );
         if( pScreen )
+        {
             g_signal_connect( G_OBJECT(pScreen), "size-changed", G_CALLBACK(signalScreenSizeChanged), m_pGtkSalDisplay );
+            g_signal_connect( G_OBJECT(pScreen), "monitors-changed", G_CALLBACK(signalMonitorsChanged), m_pGtkSalDisplay );
+        }
     }
 }
 
--- vcl/unx/inc/plugins/gtk/gtkdata.hxx	(.../tags/DEV300_m46/vcl)	(Revision 271422)
+++ vcl/unx/inc/plugins/gtk/gtkdata.hxx	(.../cws/vcl101/vcl)	(Revision 271422)
@@ -85,6 +85,7 @@
     void startupNotificationCompleted() { m_bStartupCompleted = true; }
     
     void screenSizeChanged( GdkScreen* );
+    void monitorsChanged( GdkScreen* );
 };
 
 
