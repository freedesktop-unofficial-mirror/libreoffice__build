diff --git sc/inc/dbcolect.hxx sc/inc/dbcolect.hxx
index 73b4c3e..021a1e0 100644
--- sc/inc/dbcolect.hxx
+++ sc/inc/dbcolect.hxx
@@ -96,6 +96,7 @@ private:
     ScQueryConnect  eQueryConnect[MAXQUERY];
     BOOL			bIsAdvanced;		// TRUE if created by advanced filter
     ScRange			aAdvSource;			// source range
+    SCROW           nDynamicEndRow;
     // SubTotalParam
     BOOL			bSubRemoveOnly;
     BOOL			bSubReplace;
@@ -143,9 +144,10 @@ public:
             const String& GetName() const				{ return aName; }
             void		GetName(String& rName) const	{ rName = aName; }
             void		SetName(const String& rName)	{ aName = rName; }
-			void		GetArea(SCTAB& rTab, SCCOL& rCol1, SCROW& rRow1, SCCOL& rCol2, SCROW& rRow2) const;
-			SC_DLLPUBLIC void		GetArea(ScRange& rRange) const;
+			void		GetArea(SCTAB& rTab, SCCOL& rCol1, SCROW& rRow1, SCCOL& rCol2, SCROW& rRow2, bool bUseDynamicRange = false) const;
+			SC_DLLPUBLIC void		GetArea(ScRange& rRange, bool bUseDynamicRange = false) const;
             void		SetArea(SCTAB nTab, SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2);
+            void        SetDynamicEndRow(SCROW nRow);
             void		MoveTo(SCTAB nTab, SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2);
             BOOL		IsByRow() const 				{ return bByRow; }
             void		SetByRow(BOOL bByR) 			{ bByRow = bByR; }
diff --git sc/inc/document.hxx sc/inc/document.hxx
index 3675b1b..14c1ddc 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -858,7 +858,7 @@ public:
     USHORT			GetErrCode( const ScAddress& ) const;
 
     void			GetDataArea( SCTAB nTab, SCCOL& rStartCol, SCROW& rStartRow,
-									SCCOL& rEndCol, SCROW& rEndRow, BOOL bIncludeOld );
+									SCCOL& rEndCol, SCROW& rEndRow, BOOL bIncludeOld ) const;
     SC_DLLPUBLIC BOOL			GetCellArea( SCTAB nTab, SCCOL& rEndCol, SCROW& rEndRow ) const;
     SC_DLLPUBLIC BOOL			GetTableArea( SCTAB nTab, SCCOL& rEndCol, SCROW& rEndRow ) const;
     SC_DLLPUBLIC BOOL			GetPrintArea( SCTAB nTab, SCCOL& rEndCol, SCROW& rEndRow,
@@ -1377,6 +1377,9 @@ public:
                                         SCTAB nTab, ScQueryParam& rQueryParam );
     void 			GetUpperCellString(SCCOL nCol, SCROW nRow, SCTAB nTab, String& rStr);
 
+    /** Update the dynamic end row position of a current data area. */
+    void            UpdateDynamicEndRow(ScDBData& rDBData) const;
+
     BOOL			GetFilterEntries( SCCOL nCol, SCROW nRow, SCTAB nTab,
                                 bool bFilter, TypedScStrCollection& rStrings, bool& rHasDates);
     SC_DLLPUBLIC BOOL			GetFilterEntriesArea( SCCOL nCol, SCROW nStartRow, SCROW nEndRow,
diff --git sc/inc/global.hxx sc/inc/global.hxx
index 4892a3e..05fbc13 100644
--- sc/inc/global.hxx
+++ sc/inc/global.hxx
@@ -837,6 +837,8 @@ struct SC_DLLPUBLIC ScQueryParam
     SCTAB			nDestTab;
     SCCOL			nDestCol;
     SCROW			nDestRow;
+    SCROW           nDynamicEndRow;
+    bool            bUseDynamicRange;
 
 private:
     SCSIZE			nEntryCount;
diff --git sc/inc/table.hxx sc/inc/table.hxx
index 2b4017b..d754363 100644
--- sc/inc/table.hxx
+++ sc/inc/table.hxx
@@ -347,11 +347,10 @@ public:
                         SCCOL nStartCol, SCROW nStartRow, SCCOL& rEndCol, SCROW nEndRow );
 
     void		GetDataArea( SCCOL& rStartCol, SCROW& rStartRow, SCCOL& rEndCol, SCROW& rEndRow,
-								BOOL bIncludeOld );
+								BOOL bIncludeOld ) const;
 
     SCSIZE	    GetEmptyLinesInBlock( SCCOL nStartCol, SCROW nStartRow,
                                         SCCOL nEndCol, SCROW nEndRow, ScDirection eDir );
-
     void		FindAreaPos( SCCOL& rCol, SCROW& rRow, SCsCOL nMovX, SCsROW nMovY );
     void		GetNextPos( SCCOL& rCol, SCROW& rRow, SCsCOL nMovX, SCsROW nMovY,
                                 BOOL bMarked, BOOL bUnprotected, const ScMarkData& rMark );
diff --git sc/source/core/data/documen3.cxx sc/source/core/data/documen3.cxx
index 5db1f9a..411d542 100644
--- sc/source/core/data/documen3.cxx
+++ sc/source/core/data/documen3.cxx
@@ -1290,14 +1290,24 @@ BOOL ScDocument::HasRowHeader( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol,
     //if (VALIDTAB(nTab))
     //	if (pTab[nTab])
     //		return pTab[nTab]->HasRowHeader( nStartCol, nStartRow, nEndCol, nEndRow );
-
     //return FALSE;
 }
 
+void ScDocument::UpdateDynamicEndRow(ScDBData& rDBData) const
+{
+    SCCOL nCol1, nCol2;
+    SCROW nRow1, nRow2;
+    SCTAB nTab;
+    rDBData.GetArea(nTab, nCol1, nRow1, nCol2, nRow2);
+    SCCOL nCol1a = nCol1, nCol2a = nCol2;
+    SCROW nRow1a = nRow1, nRow2a = nRow2;
+    GetDataArea(nTab, nCol1a, nRow1a, nCol2a, nRow2a, false);
+    rDBData.SetDynamicEndRow(nRow2a);
+}
+
 //
 //	GetFilterEntries - Eintraege fuer AutoFilter-Listbox
 //
-
 BOOL ScDocument::GetFilterEntries(
     SCCOL nCol, SCROW nRow, SCTAB nTab, bool bFilter, TypedScStrCollection& rStrings, bool& rHasDates)
 {
@@ -1306,6 +1316,7 @@ BOOL ScDocument::GetFilterEntries(
         ScDBData* pDBData = pDBCollection->GetDBAtCursor(nCol, nRow, nTab, FALSE);	//!??
         if (pDBData)
         {
+            UpdateDynamicEndRow(*pDBData);
             SCTAB nAreaTab;
             SCCOL nStartCol;
             SCROW nStartRow;
@@ -1317,6 +1328,7 @@ BOOL ScDocument::GetFilterEntries(
 
             ScQueryParam aParam;
             pDBData->GetQueryParam( aParam );
+            nEndRow = aParam.nDynamicEndRow;
             rStrings.SetCaseSensitive( aParam.bCaseSens );
 
             // return all filter entries, if a filter condition is connected with a boolean OR
diff --git sc/source/core/data/document.cxx sc/source/core/data/document.cxx
index d08a3c0..f43ec20 100644
--- sc/source/core/data/document.cxx
+++ sc/source/core/data/document.cxx
@@ -601,7 +601,7 @@ BOOL ScDocument::GetTableArea( SCTAB nTab, SCCOL& rEndCol, SCROW& rEndRow ) cons
 //	zusammenhaengender Bereich
 
 void ScDocument::GetDataArea( SCTAB nTab, SCCOL& rStartCol, SCROW& rStartRow,
-								SCCOL& rEndCol, SCROW& rEndRow, BOOL bIncludeOld )
+								SCCOL& rEndCol, SCROW& rEndRow, BOOL bIncludeOld ) const
 {
     if (VALIDTAB(nTab))
         if (pTab[nTab])
diff --git sc/source/core/data/global2.cxx sc/source/core/data/global2.cxx
index 3b0d0f6..43740e8 100644
--- sc/source/core/data/global2.cxx
+++ sc/source/core/data/global2.cxx
@@ -261,7 +261,8 @@ ScQueryParam::ScQueryParam( const ScQueryParam& r ) :
         bHasHeader(r.bHasHeader), bByRow(r.bByRow), bInplace(r.bInplace), bCaseSens(r.bCaseSens),
         bRegExp(r.bRegExp), bMixedComparison(r.bMixedComparison),
         bDuplicate(r.bDuplicate), bDestPers(r.bDestPers),
-		nDestTab(r.nDestTab), nDestCol(r.nDestCol), nDestRow(r.nDestRow)
+		nDestTab(r.nDestTab), nDestCol(r.nDestCol), nDestRow(r.nDestRow),
+        nDynamicEndRow(r.nDynamicEndRow), bUseDynamicRange(r.bUseDynamicRange)
 {
     nEntryCount = 0;
 
@@ -287,6 +288,8 @@ void ScQueryParam::Clear()
     nTab = SCTAB_MAX;
     bHasHeader = bCaseSens = bRegExp = bMixedComparison = FALSE;
     bInplace = bByRow = bDuplicate = bDestPers = TRUE;
+    nDynamicEndRow = 0;
+    bUseDynamicRange = false;
 
     Resize( MAXQUERY );
     for (USHORT i=0; i<MAXQUERY; i++)
@@ -313,6 +316,8 @@ ScQueryParam& ScQueryParam::operator=( const ScQueryParam& r )
     bDuplicate	= r.bDuplicate;
     bByRow		= r.bByRow;
     bDestPers	= r.bDestPers;
+    nDynamicEndRow = r.nDynamicEndRow;
+    bUseDynamicRange = r.bUseDynamicRange;
 
     Resize( r.nEntryCount );
     for (USHORT i=0; i<nEntryCount; i++)
@@ -350,7 +355,9 @@ BOOL ScQueryParam::operator==( const ScQueryParam& rOther ) const
         && (bDestPers   == rOther.bDestPers)
         && (nDestTab	== rOther.nDestTab)
         && (nDestCol	== rOther.nDestCol)
-		&& (nDestRow	== rOther.nDestRow) )
+		&& (nDestRow	== rOther.nDestRow)
+        && (nDynamicEndRow == rOther.nDynamicEndRow)
+        && (bUseDynamicRange == rOther.bUseDynamicRange) )
     {
         bEqual = TRUE;
         for ( USHORT i=0; i<nUsed && bEqual; i++ )
@@ -412,6 +419,7 @@ void ScQueryParam::MoveToDest()
         nCol2 = sal::static_int_cast<SCCOL>( nCol2 + nDifX );
         nRow2 = sal::static_int_cast<SCROW>( nRow2 + nDifY );
         nTab  = sal::static_int_cast<SCTAB>( nTab  + nDifZ );
+        nDynamicEndRow = sal::static_int_cast<SCROW>( nDynamicEndRow + nDifY );
         for (USHORT i=0; i<nEntryCount; i++)
             pEntries[i].nField += nDifX;
 
diff --git sc/source/core/data/table1.cxx sc/source/core/data/table1.cxx
index fa6efb6..e0c3ff2 100644
--- sc/source/core/data/table1.cxx
+++ sc/source/core/data/table1.cxx
@@ -664,7 +664,7 @@ BOOL ScTable::GetDataStart( SCCOL& rStartCol, SCROW& rStartRow ) const
 }
 
 void ScTable::GetDataArea( SCCOL& rStartCol, SCROW& rStartRow, SCCOL& rEndCol, SCROW& rEndRow,
-							BOOL bIncludeOld )
+							BOOL bIncludeOld ) const
 {
     BOOL bLeft       = FALSE;
     BOOL bRight  = FALSE;
diff --git sc/source/core/data/table3.cxx sc/source/core/data/table3.cxx
index fc5a6da..6f41234 100644
--- sc/source/core/data/table3.cxx
+++ sc/source/core/data/table3.cxx
@@ -1574,6 +1574,7 @@ SCSIZE ScTable::Query(ScQueryParam& rParamOrg, BOOL bKeepSub)
     BOOL* pSpecial = new BOOL[nEntryCount];
     lcl_PrepareQuery( pDocument, this, aParam, pSpecial );
 
+    SCROW nEndRow = aParam.bUseDynamicRange ? aParam.nDynamicEndRow : aParam.nRow2;
     if (!aParam.bInplace)
     {
         nOutRow = aParam.nDestRow + nHeader;
@@ -1582,7 +1583,7 @@ SCSIZE ScTable::Query(ScQueryParam& rParamOrg, BOOL bKeepSub)
                             aParam.nDestCol, aParam.nDestRow, aParam.nDestTab );
     }
 
-	for (SCROW j=aParam.nRow1 + nHeader; j<=aParam.nRow2; j++)
+	for (SCROW j=aParam.nRow1 + nHeader; j<=nEndRow; j++)
     {
         BOOL bResult;									// Filterergebnis
         BOOL bValid = ValidQuery(j, aParam, pSpecial);
diff --git sc/source/core/tool/dbcolect.cxx sc/source/core/tool/dbcolect.cxx
index 1304c49..2627d87 100644
--- sc/source/core/tool/dbcolect.cxx
+++ sc/source/core/tool/dbcolect.cxx
@@ -380,18 +380,20 @@ String ScDBData::GetOperations() const
     return aVal;
 }
 
-void ScDBData::GetArea(SCTAB& rTab, SCCOL& rCol1, SCROW& rRow1, SCCOL& rCol2, SCROW& rRow2) const
+void ScDBData::GetArea(SCTAB& rTab, SCCOL& rCol1, SCROW& rRow1, SCCOL& rCol2, SCROW& rRow2, 
+                       bool bUseDynamicRange) const
 {
     rTab  = nTable;
     rCol1 = nStartCol;
     rRow1 = nStartRow;
     rCol2 = nEndCol;
-	rRow2 = nEndRow;
+	rRow2 = bUseDynamicRange ? nDynamicEndRow : nEndRow;
 }
 
-void ScDBData::GetArea(ScRange& rRange) const
+void ScDBData::GetArea(ScRange& rRange, bool bUseDynamicRange) const
 {
-	rRange = ScRange( nStartCol,nStartRow,nTable, nEndCol,nEndRow,nTable );
+    SCROW nNewEndRow = bUseDynamicRange ? nDynamicEndRow : nEndRow;
+	rRange = ScRange( nStartCol, nStartRow, nTable, nEndCol, nNewEndRow, nTable );
 }
 
 void ScDBData::SetArea(SCTAB nTab, SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2)
@@ -403,6 +405,11 @@ void ScDBData::SetArea(SCTAB nTab, SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW
     nEndRow   = nRow2;
 }
 
+void ScDBData::SetDynamicEndRow(SCROW nRow)
+{
+    nDynamicEndRow = nRow;
+}
+
 void ScDBData::MoveTo(SCTAB nTab, SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2)
 {
     USHORT i;
@@ -510,6 +517,7 @@ void ScDBData::GetQueryParam( ScQueryParam& rQueryParam ) const
     rQueryParam.nDestTab = nQueryDestTab;
     rQueryParam.nDestCol = nQueryDestCol;
     rQueryParam.nDestRow = nQueryDestRow;
+    rQueryParam.nDynamicEndRow = nDynamicEndRow;
 
     rQueryParam.Resize( MAXQUERY );
     for (SCSIZE i=0; i<MAXQUERY; i++)
diff --git sc/source/ui/dbgui/filtdlg.cxx sc/source/ui/dbgui/filtdlg.cxx
index 846cbad..369785e 100644
--- sc/source/ui/dbgui/filtdlg.cxx
+++ sc/source/ui/dbgui/filtdlg.cxx
@@ -390,7 +390,7 @@ void ScFilterDlg::UpdateValueList( USHORT nList )
             {
                 SCTAB nTab		 = nSrcTab;
                 SCROW nFirstRow = theQueryData.nRow1;
-				SCROW nLastRow	 = theQueryData.nRow2;
+				SCROW nLastRow	 = theQueryData.bUseDynamicRange ? theQueryData.nDynamicEndRow : theQueryData.nRow2;
                 mbHasDates[nList-1] = false;
 
                 //	erstmal ohne die erste Zeile
diff --git sc/source/ui/inc/dbfunc.hxx sc/source/ui/inc/dbfunc.hxx
index 814fc5f..f5e9ae4 100644
--- sc/source/ui/inc/dbfunc.hxx
+++ sc/source/ui/inc/dbfunc.hxx
@@ -80,7 +80,7 @@ public:
     void			GotoDBArea( const String& rDBName );
 
                     // DB-Bereich vom Cursor
-	ScDBData* 		GetDBData( BOOL bMarkArea = TRUE, ScGetDBMode eMode = SC_DB_MAKE );
+    ScDBData* 		GetDBData( bool bMarkArea = true, ScGetDBMode eMode = SC_DB_MAKE, bool bExpandRows = false );
 
     void			NotifyCloseDbNameDlg( const ScDBCollection& rNewColl, const List& rDelAreaList );
 
diff --git sc/source/ui/view/dbfunc.cxx sc/source/ui/view/dbfunc.cxx
index ed25c8e..9a96e42 100644
--- sc/source/ui/view/dbfunc.cxx
+++ sc/source/ui/view/dbfunc.cxx
@@ -105,9 +105,10 @@ void ScDBFunc::GotoDBArea( const String& rDBName )
     }
 }
 
+
 //	aktuellen Datenbereich fuer Sortieren / Filtern suchen
 
-ScDBData* ScDBFunc::GetDBData( BOOL bMark, ScGetDBMode eMode )
+ScDBData* ScDBFunc::GetDBData( bool bMark, ScGetDBMode eMode, bool bExpandRows )
 {
     ScDocShell* pDocSh = GetViewData()->GetDocShell();
     ScDBData* pData = NULL;
@@ -119,11 +120,20 @@ ScDBData* ScDBFunc::GetDBData( BOOL bMark, ScGetDBMode eMode )
                     ScRange( GetViewData()->GetCurX(), GetViewData()->GetCurY(),
                              GetViewData()->GetTabNo() ),
                     eMode, FALSE );
+    if (!pData)
+        return NULL;
+
+    if (bExpandRows)
+    {
+        // Dynamically expand rows to include any new data rows that are
+        // immediately below the original range.
+        GetViewData()->GetDocument()->UpdateDynamicEndRow(*pData);
+    }
 
-	if ( pData && bMark )
+    if (bMark)
     {
         ScRange aFound;
-		pData->GetArea(aFound);
+		pData->GetArea(aFound, bExpandRows);
         MarkRange( aFound, FALSE );
     }
     return pData;
diff --git sc/source/ui/view/gridwin.cxx sc/source/ui/view/gridwin.cxx
index 439f98d..b56189d 100644
--- sc/source/ui/view/gridwin.cxx
+++ sc/source/ui/view/gridwin.cxx
@@ -1198,6 +1198,7 @@ void ScGridWindow::ExecFilter( ULONG nSel,
                     pViewData->GetViewShell()->UpdateInputHandler();
                 }
 
+                aParam.bUseDynamicRange = true;
                 pViewData->GetView()->Query( aParam, NULL, TRUE );
                 pDBData->SetQueryParam( aParam );							// speichern
             }
diff --git sc/source/ui/view/tabvwshc.cxx sc/source/ui/view/tabvwshc.cxx
index 5e61e4e..0312ded 100644
--- sc/source/ui/view/tabvwshc.cxx
+++ sc/source/ui/view/tabvwshc.cxx
@@ -178,8 +178,9 @@ SfxModelessDialog* ScTabViewShell::CreateRefDialog(
                                      SCITEM_QUERYDATA,
                                      SCITEM_QUERYDATA );
 
-			ScDBData* pDBData = GetDBData();
+            ScDBData* pDBData = GetDBData(true, SC_DB_MAKE, true);
             pDBData->GetQueryParam( aQueryParam );
+            aQueryParam.bUseDynamicRange = true;
 
             ScQueryItem aItem( SCITEM_QUERYDATA, GetViewData(), &aQueryParam );
             ScRange aAdvSource;
@@ -203,8 +204,9 @@ SfxModelessDialog* ScTabViewShell::CreateRefDialog(
                                      SCITEM_QUERYDATA,
                                      SCITEM_QUERYDATA );
 
-			ScDBData* pDBData = GetDBData();
+            ScDBData* pDBData = GetDBData(true, SC_DB_MAKE, true);
             pDBData->GetQueryParam( aQueryParam );
+            aQueryParam.bUseDynamicRange = true;
 
             aArgSet.Put( ScQueryItem( SCITEM_QUERYDATA,
                                       GetViewData(),
