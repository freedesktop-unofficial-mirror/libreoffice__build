From 987ea88e99b296a9ae866471b397de8716ff7154 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:00:41 +0200
Subject: [PATCH 360/768] oox-fix-placeholder-layout.diff

---
 oox/source/ppt/pptshapecontext.cxx |   54 ++++++++++++++++++++++++++++-------
 1 files changed, 43 insertions(+), 11 deletions(-)

diff --git oox/source/ppt/pptshapecontext.cxx oox/source/ppt/pptshapecontext.cxx
index 7a81b4c..f198fbd 100644
--- oox/source/ppt/pptshapecontext.cxx
+++ oox/source/ppt/pptshapecontext.cxx
@@ -86,6 +86,26 @@ oox::drawingml::ShapePtr findPlaceholder( const sal_Int32 nMasterPlaceholder, sa
     return aShapePtr;
 }
 
+oox::drawingml::ShapePtr findPlaceholderByIndex( const sal_Int32 nIdx, std::vector< oox::drawingml::ShapePtr >& rShapes )
+{
+    oox::drawingml::ShapePtr aShapePtr;
+    std::vector< oox::drawingml::ShapePtr >::reverse_iterator aRevIter( rShapes.rbegin() );
+    while( aRevIter != rShapes.rend() )
+    {
+        if ( (*aRevIter)->getSubTypeIndex() == nIdx )
+        {
+            aShapePtr = *aRevIter;
+            break;
+        }
+        std::vector< oox::drawingml::ShapePtr >& rChildren = (*aRevIter)->getChildren();
+        aShapePtr = findPlaceholderByIndex( nIdx, rChildren );
+        if ( aShapePtr.get() )
+            break;
+        aRevIter++;
+    }
+    return aShapePtr;
+}
+
 // if nFirstPlaceholder can't be found, it will be searched for nSecondPlaceholder
 oox::drawingml::ShapePtr findPlaceholder( sal_Int32 nFirstPlaceholder, sal_Int32 nSecondPlaceholder,
     sal_Int32 nSubTypeIndex, std::vector< oox::drawingml::ShapePtr >& rShapes )
@@ -111,14 +131,27 @@ Reference< XFastContextHandler > PPTShapeContext::createFastChildContext( sal_In
     {
         sal_Int32 nSubType( xAttribs->getOptionalValueToken( XML_type, XML_obj ) );
         mpShapePtr->setSubType( nSubType );
-        mpShapePtr->setSubTypeIndex( xAttribs->getOptionalValue( XML_idx ).toInt32() );
-        if ( nSubType )
+    OUString sIdx( xAttribs->getOptionalValue( XML_idx ) );
+    sal_Bool bHasIdx = sIdx.getLength() > 0;
+    sal_Int32 nIdx = sIdx.toInt32();
+    mpShapePtr->setSubTypeIndex( nIdx );
+
+    if ( nSubType || bHasIdx )
         {
             PPTShape* pPPTShapePtr = dynamic_cast< PPTShape* >( mpShapePtr.get() );
             if ( pPPTShapePtr )
             {
                 oox::ppt::ShapeLocation eShapeLocation = pPPTShapePtr->getShapeLocation();
-                if ( ( eShapeLocation == Slide ) || ( eShapeLocation == Layout ) )
+        oox::drawingml::ShapePtr pPlaceholder;
+
+        if ( bHasIdx && eShapeLocation == Slide )
+        {
+            // TODO: use id to shape map
+          SlidePersistPtr pMasterPersist( mpSlidePersistPtr->getMasterPersist() );
+          if ( pMasterPersist.get() )
+              pPlaceholder = findPlaceholderByIndex( nIdx, pMasterPersist->getShapes()->getChildren() );
+        }
+        if ( !pPlaceholder.get() && ( ( eShapeLocation == Slide ) || ( eShapeLocation == Layout ) ) )
                 {
                     // inheriting properties from placeholder objects by cloning shape
 
@@ -157,7 +190,6 @@ Reference< XFastContextHandler > PPTShapeContext::createFastChildContext( sal_In
                     }
                     if ( nFirstPlaceholder )
                     {
-                        oox::drawingml::ShapePtr pPlaceholder;
                         if ( eShapeLocation == Layout )		// for layout objects the referenced object can be found within the same shape tree
                             pPlaceholder = findPlaceholder( nFirstPlaceholder, nSecondPlaceholder, -1, mpSlidePersistPtr->getShapes()->getChildren() );
                         else if ( eShapeLocation == Slide )	// normal slide shapes have to search within the corresponding master tree for referenced objects
@@ -167,15 +199,15 @@ Reference< XFastContextHandler > PPTShapeContext::createFastChildContext( sal_In
                                 pPlaceholder = findPlaceholder( nFirstPlaceholder, nSecondPlaceholder,
                                     pPPTShapePtr->getSubTypeIndex(), pMasterPersist->getShapes()->getChildren() );
                         }
-                        if ( pPlaceholder.get() )
-                        {
-                            mpShapePtr->applyShapeReference( *pPlaceholder.get() );
-                            PPTShape* pPPTShape = dynamic_cast< PPTShape* >( pPlaceholder.get() );
-                            if ( pPPTShape )
-                                pPPTShape->setReferenced( sal_True );
-                        }
                     }
                 }
+        if ( pPlaceholder.get() )
+        {
+            mpShapePtr->applyShapeReference( *pPlaceholder.get() );
+            PPTShape* pPPTShape = dynamic_cast< PPTShape* >( pPlaceholder.get() );
+            if ( pPPTShape )
+              pPPTShape->setReferenced( sal_True );
+        }
             }
         }
         break;
-- 
1.7.0.1

