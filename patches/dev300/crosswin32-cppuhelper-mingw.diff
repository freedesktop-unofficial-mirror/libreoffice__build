--- cppuhelper/source/shlib.cxx.pristine	2009-04-08 13:32:45.090439917 +0200
+++ cppuhelper/source/shlib.cxx	2009-04-08 16:20:54.526067518 +0200
@@ -100,7 +100,14 @@ static const ::std::vector< OUString > *
                     if (FileBase::getFileURLFromSystemPath(aStr, aFileUrl)
                         != FileBase::E_None)
                     {
-                        OSL_ASSERT(false);
+#if OSL_DEBUG_LEVEL > 1
+              out( "*** getFileURLFromSystemPath failed for: " );
+              out( aStr );
+#endif
+#ifdef __MINGW32__
+              continue;
+#endif /* __MINGW32__ */
+              OSL_ASSERT(false);
                     }
                     s_v.push_back( aFileUrl );
                 } while( nIndex != -1 );
@@ -172,6 +179,8 @@ static bool checkAccessPath( OUString * 
 #endif
             }
 
+        OUString aBaseDirPlusFileColonSlashSlash
+          = OUString::createFromAscii ("file://") + aBaseDir;
             if (0 == aAbs.indexOf( aBaseDir ) && // still part of it?
                 aBaseDir.getLength() < aAbs.getLength() &&
                 (aBaseDir[ aBaseDir.getLength() -1 ] == (sal_Unicode)'/' ||
@@ -186,6 +195,19 @@ static bool checkAccessPath( OUString * 
                 return true;
             }
 #if OSL_DEBUG_LEVEL > 1
+            else if (0 == aAbs.indexOf( aBaseDirPlusFileColonSlashSlash ) && // still part of it?
+                aBaseDirPlusFileColonSlashSlash.getLength() < aAbs.getLength() &&
+                (aBaseDirPlusFileColonSlashSlash[ aBaseDirPlusFileColonSlashSlash.getLength() -1 ] == (sal_Unicode)'/' ||
+                 // dir boundary
+                 aAbs[ aBaseDirPlusFileColonSlashSlash.getLength() ] == (sal_Unicode)'/'))
+            {
+#if OSL_DEBUG_LEVEL > 1
+                out( ": ok [adding file://].\n" );
+#endif
+                // load from absolute path
+                *pComp = aAbs;
+                return true;
+            }
             else
             {
                 out( "\" ...does not match given path \"" );
--- cppuhelper/source/bootstrap.cxx.pristine	2009-04-08 15:48:48.595676127 +0200
+++ cppuhelper/source/bootstrap.cxx	2009-04-08 15:48:22.621940816 +0200
@@ -354,12 +354,14 @@ Reference< registry::XSimpleRegistry > n
         }
         catch(registry::InvalidRegistryException & invalidRegistryException)
         {
+#ifndef __MINGW32__
             if (! optional)
             {
                 // if a registry was explicitly given, the exception shall fly
                 if( ! bFallenBack )
                     throw;
             }
+#endif /* __MINGW32__ */
 
             (void) invalidRegistryException;
 #if OSL_DEBUG_LEVEL > 1
