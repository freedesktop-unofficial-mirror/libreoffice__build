--- solenv/bin/build.pl.old	2010-05-19 19:57:28.000000000 +0200
+++ solenv/bin/build.pl	2010-06-22 16:03:40.000000000 +0200
@@ -129,6 +129,7 @@
     $all_dependent = 1;  # a flag indicating if the hash has independent keys
     $build_from_with_branches = '';
     $build_all_cont = '';
+    $build_all_dirs = '';
     $build_since = '';
     $dlv_switch = '';
     $child = 0;
@@ -628,7 +629,14 @@ sub reverse_dependensies {
 sub build_all {
     if ($build_all_parents) {
         my ($Prj, $PrjDir, $orig_prj);
+    if ($build_all_dirs) {
+        print "Using crazy new --subdirs build for '$build_all_dirs'\n";
+        for my $d (split ':', $build_all_dirs) {
+        get_parent_deps( $d, \%global_deps_hash);
+        }
+    } else {
         get_parent_deps( $initial_module, \%global_deps_hash);
+    }
         if (scalar keys %active_modules) {
             $active_modules{$initial_module}++;
             $modules_types{$initial_module} = 'mod';
@@ -1151,6 +1151,18 @@ sub get_stand_dir {
         $ENV{mk_tmp} = '';
         die "No environment set\n";
     };
+    if ($build_all_dirs) {
+	# build all modules => it is enough to return curent directory; no other things need to be computed
+	# the below code is similar to the one in RepositoryHelper:new
+	if ( defined $ENV{PWD} ) {
+    	    $StandDir = $ENV{PWD};
+	} elsif (defined $ENV{_cwd}) {
+    	    $StandDir = $ENV{_cwd};
+        } else {
+    	    $StandDir = cwd();
+	}
+	return $StandDir;
+    };
     my $repository_helper = RepositoryHelper->new();
     my $StandDir = $repository_helper->get_repository_root();
     my $initial_dir = $repository_helper->get_initial_directory();
@@ -1472,6 +1483,8 @@ sub get_options {
                                 and $build_all_cont = $1            and next;
         $arg =~ /^-a:(\S+)$/ and $build_all_parents = 1
                                 and $build_all_cont = $1            and next;
+        $arg =~ /^--subdirs:(.+)$/ and $build_all_parents = 1
+                                and $build_all_dirs = $1            and next;
         if ($arg =~ /^--from$/ || $arg =~ /^-f$/) {
                                     $build_all_parents = 1;
                                     get_modules_passed(\%incompatibles);
@@ -2226,24 +2239,31 @@ sub get_tmp_dir {
 sub retrieve_build_list {
     my $module = shift;
     my $old_fh = select(STDOUT);
-    
+
     # Try to get global depencies from solver's build.lst if such exists
+    my @search_dirs;
     my $solver_inc_dir = "$ENV{SOLARVER}/common";
     $solver_inc_dir .= $ENV{PROEXT} if (defined $ENV{PROEXT});
     $solver_inc_dir .= '/inc';
     $solver_inc_dir .= $ENV{UPDMINOREXT} if (defined $ENV{UPDMINOREXT});
     $solver_inc_dir .= "/$module";
-    $solver_inc_dir = CorrectPath($solver_inc_dir);
     $dead_parents{$module}++;
-    print "Fetching dependencies for module $module from solver...";
+    push @search_dirs, CorrectPath($solver_inc_dir);
+    if (defined $ENV{SOLARPIECEVERSION}) {
+    push (@search_dirs, CorrectPath($ENV{SOLARPIECEVERSION}."/inc/$module"));
+    }
+
+    print "Fetching dependencies for module $module from solvers @search_dirs...\n";
+    foreach my $dir (@search_dirs) {
     foreach (@possible_build_lists) {
-        my $possible_build_lst = "$solver_inc_dir/$_";
+        my $possible_build_lst = "$dir/$_";
         if (-e $possible_build_lst) {
-            print " ok\n";
-            select($old_fh);
-            return $possible_build_lst;
+        print " ok\n";
+        select($old_fh);
+        return $possible_build_lst;
         };
     }
+    }
     print " failed\n";
 
     if (!defined $dead_parents{$module}) {
