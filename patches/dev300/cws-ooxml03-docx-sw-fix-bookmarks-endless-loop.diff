Index: wrtww8.hxx
===================================================================
--- sw/source/filter/docx/wrtww8.hxx	(revision 270990)
+++ sw/source/filter/docx/wrtww8.hxx	(working copy)
@@ -723,9 +723,10 @@
     /// Format-dependant part of the actual export.
     virtual void ExportDocument_Impl() = 0;
 
-    // Get the next position in the text node to output
+    /// Get the next position in the text node to output
     virtual xub_StrLen GetNextPos( SwAttrIter* pAttrIter, const SwTxtNode& rNode, xub_StrLen nAktPos );
 
+    /// Update the information for GetNextPos().
     virtual void UpdatePosition( SwAttrIter* pAttrIter, xub_StrLen nAktPos, xub_StrLen nEnd );
 
     /// Output SwTxtNode
Index: docxexport.cxx
===================================================================
--- sw/source/filter/docx/docx-docxexport.cxx	(revision 271125)
+++ sw/source/filter/docx/docx-docxexport.cxx	(working copy)
@@ -162,38 +162,49 @@
     }
 };
 
-xub_StrLen DocxExport::GetNextPos( SwAttrIter* pAttrIter, const SwTxtNode& rNode, xub_StrLen nAktPos )
+bool DocxExport::NearestBookmark( xub_StrLen& rNearest )
 {
-    //  Get the bookmarks for the normal run
-    xub_StrLen nNextPos = MSWordExportBase::GetNextPos( pAttrIter, rNode, nAktPos );
-    GetSortedBookmarks( rNode, nAktPos, nNextPos - nAktPos );
+    bool bHasBookmark = false;
 
-    // Then return the nearest position between the bookmarks 
-    // starts and ends and the next pos
-    xub_StrLen nBStart = nNextPos;
-    if ( m_rSortedBkmksStart.size( ) >  0 )
+    if ( m_rSortedBkmksStart.size( ) > 0 )
     {
         SwBookmark* pBkmkStart = m_rSortedBkmksStart[0];
-        nBStart = pBkmkStart->BookmarkStart( )->nContent.GetIndex( );
+        rNearest = pBkmkStart->BookmarkStart()->nContent.GetIndex();
+        bHasBookmark = true;
     }        
-    
-    xub_StrLen nBEnd = nNextPos;
+
     if ( m_rSortedBkmksEnd.size( ) > 0 )
     {
         SwBookmark* pBkmkEnd = m_rSortedBkmksEnd[0];
-        nBEnd = pBkmkEnd->BookmarkEnd( )->nContent.GetIndex( );
+        if ( !bHasBookmark )
+            rNearest = pBkmkEnd->BookmarkEnd()->nContent.GetIndex();
+        else
+            rNearest = std::min( rNearest, pBkmkEnd->BookmarkEnd()->nContent.GetIndex() );
+        bHasBookmark = true;
     }
-    
-    nNextPos = std::min( nNextPos, std::min( nBStart, nBEnd ) );
 
-    return nNextPos;
+    return bHasBookmark;
 }
 
+xub_StrLen DocxExport::GetNextPos( SwAttrIter* pAttrIter, const SwTxtNode& rNode, xub_StrLen nAktPos )
+{
+    // Get the bookmarks for the normal run
+    xub_StrLen nNextPos = MSWordExportBase::GetNextPos( pAttrIter, rNode, nAktPos );
+
+    GetSortedBookmarks( rNode, nAktPos, nNextPos - nAktPos );
+
+    xub_StrLen nNextBookmark = nNextPos;
+    NearestBookmark( nNextPos );
+    
+    return std::min( nNextPos, nNextBookmark );
+}
+
 void DocxExport::UpdatePosition( SwAttrIter* pAttrIter, xub_StrLen nAktPos, xub_StrLen nEnd )
 {
-    bool hasBkmks = ( m_rSortedBkmksStart.size() > 0 || m_rSortedBkmksEnd.size() > 0 );
-    
-    if ( !hasBkmks )
+    xub_StrLen nNextPos;
+
+    // either no bookmark, or it is not at the current position
+    if ( !NearestBookmark( nNextPos ) || nNextPos > nAktPos )
     {
         MSWordExportBase::UpdatePosition( pAttrIter, nAktPos, nEnd );
     }
Index: docxexport.hxx
===================================================================
--- sw/source/filter/docx/docxexport.hxx	(revision 270990)
+++ sw/source/filter/docx/docxexport.hxx	(working copy)
@@ -161,12 +161,18 @@
                                      const SwNode& rNd,
                                      const SwFmtPageDesc* pNewPgDescFmt = 0,
                                      const SwPageDesc* pNewPgDesc = 0 );
-    
+
+    /// Get the next position in the text node to output
     virtual xub_StrLen GetNextPos( SwAttrIter* pAttrIter, const SwTxtNode& rNode, xub_StrLen nAktPos );
 
+    /// Update the information for GetNextPos().
     virtual void UpdatePosition( SwAttrIter* pAttrIter, xub_StrLen nAktPos, xub_StrLen nEnd );
 
 private:
+    /// Find the nearest bookmark from the current position.
+    ///
+    /// Returns false when there is no bookmark.
+    bool NearestBookmark( xub_StrLen& rNearest );
     
     void GetSortedBookmarks( const SwTxtNode& rNd, xub_StrLen nAktPos, 
                 xub_StrLen nLen );
