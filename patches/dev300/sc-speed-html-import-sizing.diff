diff -ur /opt/OpenOffice/svn-HEAD/build/ooo310-m4/sc/source/filter/html/htmlpars.cxx sc/source/filter/html/htmlpars.cxx
--- sc/source/filter/html/htmlpars.cxx
+++ sc/source/filter/html/htmlpars.cxx
@@ -2233,16 +2323,54 @@
 
 SCCOLROW ScHTMLTable::GetDocSize( ScHTMLOrient eOrient, SCCOLROW nCellPos ) const
 {
-    const ScSizeVec& rSizes = maSizes[ eOrient ];
-    return (static_cast< size_t >( nCellPos ) < rSizes.size()) ? rSizes[ nCellPos ] : 0;
+  /*    const ScSizeVec& rSizes = maSizes[ eOrient ];
+    SCCOLROW nSize = (static_cast< size_t >( nCellPos ) < rSizes.size()) ? rSizes[ nCellPos ] : 0; */
+  
+    const ScCumlSizeVec& rCSizes = maCumlSizes[ eOrient ];
+
+    if( static_cast< size_t >( nCellPos ) >= rCSizes.size() )
+        return 0;
+
+    SCCOLROW nLastSize = 0;
+    if( nCellPos > 0 )
+        nLastSize = rCSizes[ nCellPos - 1 ];
+    SCCOLROW nRealSize = rCSizes[ nCellPos ] - nLastSize;
+/*    if( nSize != nRealSize )
+      {
+    fprintf (stderr, "Size discrepancy at %d (%d vs %d)\n",
+         (int)nCellPos, (int) nSize, (int) nRealSize);
+    fprintf (stderr, "Table: ");
+    for (size_t i = 0; i < rCSizes.size(); i++)
+      fprintf (stderr, "%d ", rCSizes[i]);
+    fprintf (stderr, "\n");
+    for (size_t i = 0; i < rSizes.size(); i++)
+      fprintf (stderr, "%d ", rSizes[i]);
+    fprintf (stderr, "\n");
+    }*/
+    return nRealSize;
 }
 
 SCCOLROW ScHTMLTable::GetDocSize( ScHTMLOrient eOrient, SCCOLROW nCellBegin, SCCOLROW nCellEnd ) const
 {
-    SCCOLROW nSize = 0;
+/*    SCCOLROW nSize = 0;
     for( SCCOLROW nCellPos = nCellBegin; nCellPos < nCellEnd; ++nCellPos )
-        nSize += GetDocSize( eOrient, nCellPos );
-    return nSize;
+    nSize += GetDocSize( eOrient, nCellPos ); */
+
+    const ScCumlSizeVec& rCSizes = maCumlSizes[ eOrient ];
+    SCCOLROW nFirstSize = 0;
+    if( nCellBegin > 0 )
+      nFirstSize = rCSizes[ nCellBegin - 1 ];
+    SCCOLROW nLastSize = 0;
+    if( nCellEnd > 0 )
+      nLastSize = rCSizes[ nCellEnd - 1 ];
+    SCCOLROW nRealSize = nLastSize - nFirstSize;
+
+    /*    if( nSize != nRealSize )
+      {
+      fprintf (stderr, "Multi-range size discrepancy at %d->before %d (%d vs %d)\n",
+         (int)nCellBegin, (int)nCellEnd, (int) nSize, (int) nRealSize);
+      } */
+    return nRealSize;
 }
 
 SCCOLROW ScHTMLTable::GetDocSize( ScHTMLOrient eOrient ) const
@@ -2559,11 +2702,49 @@
 
 void ScHTMLTable::SetDocSize( ScHTMLOrient eOrient, SCCOLROW nCellPos, SCCOLROW nSize )
 {
-    ScSizeVec& rSizes = maSizes[ eOrient ];
+/*    ScSizeVec& rSizes = maSizes[ eOrient ];
     if( static_cast< size_t >( nCellPos ) >= rSizes.size() )
         rSizes.resize( static_cast< size_t >( nCellPos + 1 ), 1 );    // expand with minimum height/width == 1
     if( rSizes[ nCellPos ] < nSize )
-        rSizes[ nCellPos ] = nSize;
+    rSizes[ nCellPos ] = nSize; */
+
+    ScCumlSizeVec& rCSizes = maCumlSizes[ eOrient ];
+    size_t oldSize = rCSizes.size();
+    if( static_cast< size_t >( nCellPos ) >= rCSizes.size() )
+    {
+        rCSizes.resize( static_cast< size_t >( nCellPos + 1 ), 1 );    // expand with minimum height/width == 1
+
+    // Fill out the expansion with the correct cumulative sizes
+    SCCOLROW lastSize = 0;
+    if( oldSize > 0 )
+      lastSize = rCSizes[ oldSize - 1 ];
+    for( size_t i = oldSize; i < rCSizes.size(); i++ )
+      rCSizes[ i ] = ++lastSize;
+    }
+
+    // insert and shuffle everyone along a bit.
+    // the common case is of no items to shuffle.
+    {
+      SCCOLROW nLastSize = 0;
+      if( nCellPos > 0 )
+    nLastSize = rCSizes[ nCellPos - 1 ];
+
+      SCCOLROW curSize = rCSizes[ nCellPos ] - nLastSize;
+      if( curSize < nSize )
+    {
+      for( size_t i = nCellPos; i < rCSizes.size(); i++ )
+        rCSizes[ i ] += nSize - curSize;
+    }
+    }
+/*    if (getenv ("INSSIZE")) {
+    fprintf (stderr, "Table: ");
+    for (size_t i = 0; i < rCSizes.size(); i++)
+      fprintf (stderr, "%d ", rCSizes[i]);
+    fprintf (stderr, "\n");
+    for (size_t i = 0; i < rSizes.size(); i++)
+      fprintf (stderr, "%d ", rSizes[i]);
+    fprintf (stderr, "\n");
+    }*/
 }
 
 void ScHTMLTable::CalcNeededDocSize(

diff -ur /opt/OpenOffice/svn-HEAD/build/ooo310-m4/sc/source/filter/inc/htmlpars.hxx sc/source/filter/inc/htmlpars.hxx
--- sc/source/filter/inc/htmlpars.hxx
+++ sc/source/filter/inc/htmlpars.hxx
@@ -461,7 +463,8 @@
 private:
     typedef ::std::auto_ptr< ScHTMLTableMap >           ScHTMLTableMapPtr;
     typedef ::std::auto_ptr< SfxItemSet >               SfxItemSetPtr;
-    typedef ::std::vector< SCCOLROW >                   ScSizeVec;
+//    typedef ::std::vector< SCCOLROW >                   ScSizeVec;
+    typedef ::std::vector< SCCOLROW >                   ScCumlSizeVec;
     typedef ::std::list< ScHTMLEntry* >                 ScHTMLEntryList;
     typedef ::std::map< ScHTMLPos, ScHTMLEntryList >    ScHTMLEntryMap;
     typedef ::std::auto_ptr< ScHTMLEntry >              ScHTMLEntryPtr;
@@ -543,7 +546,8 @@
     ScHTMLEntryMap              maEntryMap;         /// List of entries for each cell.
     ScHTMLEntryList*            mpCurrEntryList;    /// Current entry list from map for faster access.
     ScHTMLEntryPtr              mpCurrEntry;        /// Working entry, not yet inserted in a list.
-    ScSizeVec                   maSizes[ 2 ];       /// Calc cell count of each HTML table column/row.
+//    ScSizeVec                   maSizes[ 2 ];       /// non-cumulative cell count of each HTML table column/row.
+    ScCumlSizeVec               maCumlSizes[ 2 ];   /// Cumulative cell count of each HTML table column/row.
     ScHTMLSize                  maSize;             /// Size of the table.
     ScHTMLPos                   maCurrCell;         /// Address of current cell to fill.
     ScHTMLPos                   maDocBasePos;       /// Resulting base address in a Calc document.
