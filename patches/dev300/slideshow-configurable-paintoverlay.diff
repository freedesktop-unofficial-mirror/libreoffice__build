From ab55250fadc03d14ae7b2f185e07b0009a9e7b28 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:05:31 +0200
Subject: [PATCH 675/878] slideshow-configurable-paintoverlay.diff

---
 sd/source/ui/slideshow/slideshow.hrc               |   13 ++-
 sd/source/ui/slideshow/slideshow.src               |   50 +++++++
 sd/source/ui/slideshow/slideshowimpl.cxx           |  143 +++++++++++++++++++-
 sd/source/ui/slideshow/slideshowimpl.hxx           |    4 +
 slideshow/source/engine/eventmultiplexer.cxx       |    8 +
 slideshow/source/engine/slide/slideimpl.cxx        |    9 +-
 slideshow/source/engine/slide/userpaintoverlay.cxx |   23 +++-
 slideshow/source/engine/slideshowimpl.cxx          |   32 +++++
 slideshow/source/inc/eventmultiplexer.hxx          |   11 ++
 slideshow/source/inc/slide.hxx                     |    1 +
 slideshow/source/inc/userpainteventhandler.hxx     |    1 +
 11 files changed, 287 insertions(+), 8 deletions(-)

diff --git a/sd/source/ui/slideshow/slideshow.hrc b/sd/source/ui/slideshow/slideshow.hrc
index c126ddf..b5a853f 100644
--- a/sd/source/ui/slideshow/slideshow.hrc
+++ b/sd/source/ui/slideshow/slideshow.hrc
@@ -35,8 +35,15 @@
 #define CM_SCREEN_BLACK	5
 #define CM_SCREEN_WHITE	6
 #define CM_ENDSHOW		7
-#define CM_FIRST_SLIDE	8
-#define CM_LAST_SLIDE	9
-#define CM_SLIDES		10
+#define CM_COLOR_PEN 8
+#define CM_FIRST_SLIDE	9
+#define CM_LAST_SLIDE	10
+#define CM_WIDTH_PEN		11
+#define CM_WIDTH_PEN_VERY_THIN		12
+#define CM_WIDTH_PEN_THIN		13
+#define CM_WIDTH_PEN_NORMAL	14
+#define CM_WIDTH_PEN_THICK	15
+#define CM_WIDTH_PEN_VERY_THICK	16
+#define CM_SLIDES		17
 
 #endif
diff --git a/sd/source/ui/slideshow/slideshow.src b/sd/source/ui/slideshow/slideshow.src
index 0c2ff96..720280d 100644
--- a/sd/source/ui/slideshow/slideshow.src
+++ b/sd/source/ui/slideshow/slideshow.src
@@ -97,6 +97,56 @@ Menu RID_SLIDESHOW_CONTEXTMENU
         {
             Separator = TRUE;
         };
+    MenuItem
+        {
+                    Identifier = CM_WIDTH_PEN;
+                    Text [ en-US ] = "~Pen Width" ;
+
+            SubMenu = Menu
+                    {
+                ItemList =
+                {
+                    MenuItem
+                    {
+                        Identifier =  CM_WIDTH_PEN_VERY_THIN;
+                        Text [ en-US ] = "~Very thin";
+                    };
+                    MenuItem
+                    {
+                        Identifier =  CM_WIDTH_PEN_THIN;
+                        Text [ en-US ] = "~Thin";
+                    };
+                    MenuItem
+                    {
+                        Identifier =  CM_WIDTH_PEN_NORMAL;
+                        Text [ en-US ] = "~Normal";
+                    };
+                    MenuItem
+                    {
+                        Identifier =  CM_WIDTH_PEN_THICK;
+                        Text [ en-US ] = "~Thick";
+                    };
+                    MenuItem
+                    {
+                        Identifier =  CM_WIDTH_PEN_VERY_THICK;
+                        Text [ en-US ] = "~Very Thick";
+                    };
+                };
+            };
+        };
+        MenuItem
+        {
+            Separator = TRUE;
+        };
+     MenuItem
+        {
+            Identifier = CM_COLOR_PEN ;
+            Text [ en-US ] = "~Change Color" ;
+        };
+        MenuItem
+        {
+            Separator = TRUE;
+        };
         MenuItem
         {
             Identifier = CM_ENDSHOW ;
diff --git a/sd/source/ui/slideshow/slideshowimpl.cxx b/sd/source/ui/slideshow/slideshowimpl.cxx
index 08fe26a..da307c1 100644
--- a/sd/source/ui/slideshow/slideshowimpl.cxx
+++ b/sd/source/ui/slideshow/slideshowimpl.cxx
@@ -83,6 +83,7 @@
 #include "canvas/elapsedtime.hxx"
 #include "canvas/prioritybooster.hxx"
 #include "avmedia/mediawindow.hxx"
+#include  "svtools/colrdlg.hxx"
 
 #include <boost/noncopyable.hpp>
 #include <boost/bind.hpp>
@@ -551,7 +552,8 @@ SlideshowImpl::SlideshowImpl( const Reference< XPresentation2 >& xPresentation,
 , mbInputFreeze(false)
 , mbActive(sal_False)
 , maPresSettings( pDoc->getPresentationSettings() )
-, mnUserPaintColor( 0x0000FF00L )
+, mnUserPaintColor( 0x00000000L )
+, mdUserPaintStrokeWidth ( 4.0 )
 , mnEntryCounter(0)
 , mnLastSlideNumber(-1)
 , msOnClick( RTL_CONSTASCII_USTRINGPARAM("OnClick") )
@@ -2149,6 +2151,8 @@ IMPL_LINK( SlideshowImpl, ContextMenuHdl, void*, EMPTYARG )
 
     PopupMenu* pMenu = new PopupMenu( SdResId( RID_SLIDESHOW_CONTEXTMENU ) );
 
+    pMenu->EnableItem( CM_COLOR_PEN, (maPresSettings.mbMouseAsPen));
+
     const ShowWindowMode eMode = mpShowWindow->GetShowWindowMode();
     pMenu->EnableItem( CM_NEXT_SLIDE, ( mpSlideController->getNextSlideIndex() != -1 ) );
     pMenu->EnableItem( CM_PREV_SLIDE, ( mpSlideController->getPreviousSlideIndex() != -1 ) || (eMode == SHOWWINDOWMODE_END) || (eMode == SHOWWINDOWMODE_PAUSE) || (eMode == SHOWWINDOWMODE_BLANK) );
@@ -2216,6 +2220,55 @@ IMPL_LINK( SlideshowImpl, ContextMenuHdl, void*, EMPTYARG )
         }
     }
 
+
+    PopupMenu* pWidthMenu = pMenu->GetPopupMenu( CM_WIDTH_PEN);
+
+    // populate color width list
+    if( pWidthMenu )
+    {
+        if(! maPresSettings.mbMouseAsPen)
+        {
+            pMenu->EnableItem( CM_WIDTH_PEN, FALSE );
+        }
+        else
+        {
+            sal_Int32 nIterator;
+            double nWidth;
+
+
+
+            nWidth = 4.0;
+            for( nIterator = 1; nIterator < 6; nIterator++)
+            {
+                switch(nIterator)
+                {
+                    case 1:
+                        nWidth = 4.0;
+                        break;
+                    case 2:
+                        nWidth = 100.0;
+                        break;
+                    case 3:
+                        nWidth = 150.0;
+                        break;
+                    case 4:
+                        nWidth = 200.0;
+                        break;
+                    case 5:
+                        nWidth = 400.0;
+                        break;
+                    default:
+                        break;
+                }
+
+                pWidthMenu->EnableItem( (USHORT)(CM_WIDTH_PEN + nIterator), TRUE);
+                        if( nWidth ==  mdUserPaintStrokeWidth)
+                            pWidthMenu->CheckItem( (USHORT)(CM_WIDTH_PEN + nIterator) );
+
+            }
+        }
+    }
+
     pMenu->SetSelectHdl( LINK( this, SlideshowImpl, ContextMenuSelectHdl ) );
     pMenu->Execute( mpShowWindow, maPopupMousePos );
     delete pMenu;
@@ -2278,6 +2331,59 @@ IMPL_LINK( SlideshowImpl, ContextMenuSelectHdl, Menu *, pMenu )
             }
         }
         break;
+
+        case CM_COLOR_PEN:
+             if( maPresSettings.mbMouseAsPen ){
+
+                //Open a color picker based on SvColorDialog
+                ::Color aColor( mnUserPaintColor );
+                SvColorDialog aColorDlg( mpShowWindow);
+                aColorDlg.SetColor( aColor );
+
+                if (aColorDlg.Execute() )
+                {
+                    aColor = aColorDlg.GetColor();
+                    mnUserPaintColor = aColor.GetColor();
+                    setPenColor(mnUserPaintColor);
+                }
+                mbWasPaused = false;
+            }
+            break;
+
+        case CM_WIDTH_PEN_VERY_THIN:
+             if( maPresSettings.mbMouseAsPen ){
+				setPenWidth(4.0);
+                mbWasPaused = false;
+            }
+            break;
+
+        case CM_WIDTH_PEN_THIN:
+             if( maPresSettings.mbMouseAsPen ){
+                setPenWidth(100.0);
+                mbWasPaused = false;
+            }
+            break;
+
+        case CM_WIDTH_PEN_NORMAL:
+             if( maPresSettings.mbMouseAsPen ){
+                setPenWidth(150.0);
+                mbWasPaused = false;
+            }
+            break;
+
+        case CM_WIDTH_PEN_THICK:
+             if( maPresSettings.mbMouseAsPen ){
+                setPenWidth(200.0);
+                mbWasPaused = false;
+            }
+            break;
+
+        case CM_WIDTH_PEN_VERY_THICK:
+             if( maPresSettings.mbMouseAsPen ){
+                setPenWidth(400.0);
+                mbWasPaused = false;
+            }
+            break;
         
         case CM_ENDSHOW:
             // in case the user cancels the presentation, switch to current slide
@@ -2894,6 +3000,17 @@ void SAL_CALL SlideshowImpl::setUsePen( sal_Bool bMouseAsPen ) throw (RuntimeExc
         aPenProp.Value = aValue;
 
         mxShow->setProperty( aPenProp );
+
+    //for StrokeWidth :
+        Any aValueWidth;
+        if( maPresSettings.mbMouseAsPen )
+            aValueWidth <<= mdUserPaintStrokeWidth;
+
+        beans::PropertyValue aPenPropWidth;
+        aPenPropWidth.Name = OUString( RTL_CONSTASCII_USTRINGPARAM( "UserPaintStrokeWidth" ));
+        aPenPropWidth.Value = aValueWidth;
+
+        mxShow->setProperty( aPenPropWidth );
     }
     catch( Exception& e )
     {
@@ -2907,6 +3024,27 @@ void SAL_CALL SlideshowImpl::setUsePen( sal_Bool bMouseAsPen ) throw (RuntimeExc
     }
 }
 
+
+// --------------------------------------------------------------------
+
+double SAL_CALL SlideshowImpl::getPenWidth() throw (RuntimeException)
+{
+    ::vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    return mdUserPaintStrokeWidth;
+}
+
+
+// --------------------------------------------------------------------
+
+void SAL_CALL SlideshowImpl::setPenWidth( double dStrokeWidth ) throw (RuntimeException)
+{
+        ::vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+        mdUserPaintStrokeWidth = dStrokeWidth;
+        if( maPresSettings.mbMouseAsPen )
+                setUsePen( sal_True ); // update color and width
+}
+
+
 // --------------------------------------------------------------------
 
 sal_Int32 SAL_CALL SlideshowImpl::getPenColor() throw (RuntimeException)
@@ -2915,6 +3053,7 @@ sal_Int32 SAL_CALL SlideshowImpl::getPenColor() throw (RuntimeException)
     return mnUserPaintColor;
 }
 
+
 // --------------------------------------------------------------------
 
 void SAL_CALL SlideshowImpl::setPenColor( sal_Int32 nColor ) throw (RuntimeException)
@@ -2922,7 +3061,7 @@ void SAL_CALL SlideshowImpl::setPenColor( sal_Int32 nColor ) throw (RuntimeExcep
     ::vos::OGuard aSolarGuard( Application::GetSolarMutex() );
     mnUserPaintColor = nColor;
     if( maPresSettings.mbMouseAsPen )
-        setUsePen( sal_True ); // update color
+        setUsePen( sal_True ); // update color and width
 }
 
 // --------------------------------------------------------------------
diff --git a/sd/source/ui/slideshow/slideshowimpl.hxx b/sd/source/ui/slideshow/slideshowimpl.hxx
index bc18807..0459460 100644
--- a/sd/source/ui/slideshow/slideshowimpl.hxx
+++ b/sd/source/ui/slideshow/slideshowimpl.hxx
@@ -197,6 +197,8 @@ public:
     virtual void SAL_CALL setMouseVisible( ::sal_Bool _mousevisible ) throw (css::uno::RuntimeException);
     virtual ::sal_Bool SAL_CALL getUsePen() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setUsePen( ::sal_Bool _usepen ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getPenWidth() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setPenWidth( double dStrokeWidth ) throw (css::uno::RuntimeException);
     virtual ::sal_Int32 SAL_CALL getPenColor() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setPenColor( ::sal_Int32 _pencolor ) throw (css::uno::RuntimeException);
     virtual ::sal_Bool SAL_CALL isRunning(  ) throw (css::uno::RuntimeException);
@@ -380,6 +382,8 @@ private:
     PresentationSettings maPresSettings;
     sal_Int32		mnUserPaintColor;
 
+    double		        mdUserPaintStrokeWidth;
+
     /// used in updateHdl to prevent recursive calls
     sal_Int32		mnEntryCounter;
  
diff --git a/slideshow/source/engine/eventmultiplexer.cxx b/slideshow/source/engine/eventmultiplexer.cxx
index 59b84c5..4f2251c 100644
--- a/slideshow/source/engine/eventmultiplexer.cxx
+++ b/slideshow/source/engine/eventmultiplexer.cxx
@@ -1070,6 +1070,14 @@ bool EventMultiplexer::notifyUserPaintColor( RGBColor const& rUserColor )
                     boost::cref(rUserColor)));
 }
 
+bool EventMultiplexer::notifyUserPaintStrokeWidth( double rUserStrokeWidth )
+{
+    return mpImpl->maUserPaintEventHandlers.applyAll(
+        boost::bind(&UserPaintEventHandler::widthChanged,
+                    _1,
+                    rUserStrokeWidth));
+}
+
 bool EventMultiplexer::notifyUserPaintDisabled()
 {
     return mpImpl->maUserPaintEventHandlers.applyAll(
diff --git a/slideshow/source/engine/slide/slideimpl.cxx b/slideshow/source/engine/slide/slideimpl.cxx
index 16dbb1b..f8ca942 100644
--- a/slideshow/source/engine/slide/slideimpl.cxx
+++ b/slideshow/source/engine/slide/slideimpl.cxx
@@ -110,6 +110,7 @@ public:
                const ShapeEventListenerMap&                      rShapeListenerMap,
                const ShapeCursorMap&                             rShapeCursorMap,
                RGBColor const&                                   rUserPaintColor,
+           double						dUserPaintStrokeWidth,
                bool                                              bUserPaintEnabled,
                bool                                              bIntrinsicAnimationsAllowed,
                bool                                              bDisableAnimationZOrder );
@@ -243,6 +244,7 @@ private:
     SlideAnimations										maAnimations;
         
     RGBColor                                            maUserPaintColor;
+    double 						mdUserPaintStrokeWidth;
     UserPaintOverlaySharedPtr							mpPaintOverlay;
     
     /// Bitmaps with slide content at various states
@@ -344,6 +346,7 @@ SlideImpl::SlideImpl( const uno::Reference< drawing::XDrawPage >&			xDrawPage,
                       const ShapeEventListenerMap&                          rShapeListenerMap,
                       const ShapeCursorMap&                                 rShapeCursorMap,
                       RGBColor const&                                       aUserPaintColor,
+              double						   dUserPaintStrokeWidth,
                       bool                                                  bUserPaintEnabled,
                       bool                                                  bIntrinsicAnimationsAllowed,
                       bool                                                  bDisableAnimationZOrder ) :
@@ -373,6 +376,7 @@ SlideImpl::SlideImpl( const uno::Reference< drawing::XDrawPage >&			xDrawPage,
     maAnimations( maContext,
                   getSlideSizeImpl() ),
     maUserPaintColor(aUserPaintColor),
+    mdUserPaintStrokeWidth(dUserPaintStrokeWidth),
     mpPaintOverlay(),
     maSlideBitmaps(),
     meAnimationState( CONSTRUCTING_STATE ),
@@ -860,7 +864,7 @@ void SlideImpl::enablePaintOverlay()
 {
     if( mbUserPaintOverlayEnabled )
         mpPaintOverlay = UserPaintOverlay::create( maUserPaintColor,
-                                                   2.0,
+                                                   mdUserPaintStrokeWidth,
                                                    maContext );
 }
 
@@ -1185,6 +1189,7 @@ SlideSharedPtr createSlide( const uno::Reference< drawing::XDrawPage >&			xDrawP
                             const ShapeEventListenerMap&                        rShapeListenerMap,
                             const ShapeCursorMap&                               rShapeCursorMap,
                             RGBColor const&                                     rUserPaintColor,
+                double						dUserPaintStrokeWidth,
                             bool                                                bUserPaintEnabled,
                             bool                                                bIntrinsicAnimationsAllowed,
                             bool                                                bDisableAnimationZOrder )
@@ -1195,7 +1200,7 @@ SlideSharedPtr createSlide( const uno::Reference< drawing::XDrawPage >&			xDrawP
                                                       rCursorManager, rViewContainer,
                                                       xComponentContext, rShapeListenerMap,
                                                       rShapeCursorMap, rUserPaintColor,
-                                                      bUserPaintEnabled, 
+                                                      dUserPaintStrokeWidth, bUserPaintEnabled,
                                                       bIntrinsicAnimationsAllowed,
                                                       bDisableAnimationZOrder ));
 
diff --git a/slideshow/source/engine/slide/userpaintoverlay.cxx b/slideshow/source/engine/slide/userpaintoverlay.cxx
index be13cbf..5a0bea4 100644
--- a/slideshow/source/engine/slide/userpaintoverlay.cxx
+++ b/slideshow/source/engine/slide/userpaintoverlay.cxx
@@ -60,7 +60,8 @@ namespace slideshow
     namespace internal
     {
         class PaintOverlayHandler : public MouseEventHandler,
-                                    public ViewEventHandler
+                                    public ViewEventHandler,
+                    public UserPaintEventHandler
         {
         public:
             PaintOverlayHandler( const RGBColor&         rStrokeColor,
@@ -205,6 +206,7 @@ namespace slideshow
                         if( pPolyPoly )
                         {
                             pPolyPoly->setRGBALineColor( maStrokeColor.getIntegerColor() );
+			    pPolyPoly->setStrokeWidth(mnStrokeWidth);
                             pPolyPoly->draw();
                         }
                     }
@@ -223,6 +225,24 @@ namespace slideshow
                 return false; // did not handle the event
             }
 
+
+            bool colorChanged( RGBColor const& rUserColor ){
+                this->maStrokeColor = rUserColor;
+                return true;
+            }
+
+       bool widthChanged( double nUserStrokeWidth ){
+                this->mnStrokeWidth = nUserStrokeWidth;
+                return true;
+            }
+
+            bool disable(){
+		//this->maStrokeColor = *(new RGBColor(255,255,255));
+        //this->mnStrokeWidth = 4.0;
+		return true;
+            }
+
+
         private:
             ActivitiesQueue&        mrActivitiesQueue;
             ScreenUpdater&          mrScreenUpdater;
@@ -259,6 +279,7 @@ namespace slideshow
             mrMultiplexer.addClickHandler( mpHandler, 3.0 );
             mrMultiplexer.addMouseMoveHandler( mpHandler, 3.0 );
             mrMultiplexer.addViewHandler( mpHandler );
+        mrMultiplexer.addUserPaintHandler(mpHandler);
         }
         
         UserPaintOverlay::~UserPaintOverlay()
diff --git a/slideshow/source/engine/slideshowimpl.cxx b/slideshow/source/engine/slideshowimpl.cxx
index e7f2340..60d91a4 100644
--- a/slideshow/source/engine/slideshowimpl.cxx
+++ b/slideshow/source/engine/slideshowimpl.cxx
@@ -360,6 +360,8 @@ private:
     
     boost::optional<RGBColor>               maUserPaintColor;
 
+    boost::optional<double>               maUserPaintStrokeWidth;
+
     boost::shared_ptr<canvas::tools::ElapsedTime> mpPresTimer;
     ScreenUpdater                           maScreenUpdater;
     EventQueue                              maEventQueue;
@@ -474,6 +476,7 @@ SlideShowImpl::SlideShowImpl(
       maShapeEventListeners(),
       maShapeCursors(),
       maUserPaintColor(),
+      maUserPaintStrokeWidth(4.0),
       mpPresTimer( new canvas::tools::ElapsedTime ),
       maScreenUpdater(maViewContainer),
       maEventQueue( mpPresTimer ),
@@ -806,6 +809,7 @@ SlideSharedPtr SlideShowImpl::makeSlide(
                                              maShapeEventListeners,
                                              maShapeCursors,
                                              maUserPaintColor ? *maUserPaintColor : RGBColor(),
+                         *maUserPaintStrokeWidth,
                                              !!maUserPaintColor,
                                              mbImageAnimationsAllowed,
                                              mbDisableAnimationZOrder) );
@@ -1349,6 +1353,34 @@ sal_Bool SlideShowImpl::setProperty( beans::PropertyValue const& rProperty )
 
         return true;
     }
+
+     // new Property for pen's width
+     if (rProperty.Name.equalsAsciiL(
+            RTL_CONSTASCII_STRINGPARAM("UserPaintStrokeWidth") ))
+    {
+        double nWidth(4.0);
+        if (rProperty.Value >>= nWidth)
+        {
+            OSL_ENSURE( mbMouseVisible,
+                        "setProperty(): User paint overrides invisible mouse" );
+
+            // enable user paint stroke width
+            maUserPaintStrokeWidth.reset( nWidth );
+            maEventMultiplexer.notifyUserPaintStrokeWidth( *maUserPaintStrokeWidth );
+        }
+        else
+        {
+            // disable user paint stroke width
+            maUserPaintStrokeWidth.reset();
+            maEventMultiplexer.notifyUserPaintDisabled();
+        }
+
+        if( mnCurrentCursor == awt::SystemPointer::ARROW )
+            resetCursor();
+
+        return true;
+    }
+
     
     if (rProperty.Name.equalsAsciiL(
             RTL_CONSTASCII_STRINGPARAM("AdvanceOnClick") )) 
diff --git a/slideshow/source/inc/eventmultiplexer.hxx b/slideshow/source/inc/eventmultiplexer.hxx
index d4c9a6d..a06d1b1 100644
--- a/slideshow/source/inc/eventmultiplexer.hxx
+++ b/slideshow/source/inc/eventmultiplexer.hxx
@@ -483,6 +483,17 @@ public:
     */
     bool notifyUserPaintColor( RGBColor const& rUserColor );
 
+    /** Notify a new user paint width
+
+        Sending this notification also implies that user paint is
+        enabled. .
+
+        @return true, if this event was processed by
+        anybody. If false is returned, no handler processed
+        this event (and probably, nothing will happen at all)
+    */
+    bool notifyUserPaintStrokeWidth( double rUserStrokeWidth );
+
     /** Notify that user paint is disabled
         
         User paint denotes the feature to draw colored lines on top of
diff --git a/slideshow/source/inc/slide.hxx b/slideshow/source/inc/slide.hxx
index 32990a0..1e14df0 100644
--- a/slideshow/source/inc/slide.hxx
+++ b/slideshow/source/inc/slide.hxx
@@ -195,6 +195,7 @@ namespace slideshow
                                     const ShapeEventListenerMap&                       rShapeListenerMap,
                                     const ShapeCursorMap&                              rShapeCursorMap,
                                     RGBColor const&                                    aUserPaintColor,
+				    double                                             dUserPaintStrokeWidth,
                                     bool                                               bUserPaintEnabled,
                                     bool                                               bIntrinsicAnimationsAllowed,
                                     bool                                               bDisableAnimationZOrder );
diff --git a/slideshow/source/inc/userpainteventhandler.hxx b/slideshow/source/inc/userpainteventhandler.hxx
index 077337e..082aab5 100644
--- a/slideshow/source/inc/userpainteventhandler.hxx
+++ b/slideshow/source/inc/userpainteventhandler.hxx
@@ -50,6 +50,7 @@ namespace slideshow
             virtual ~UserPaintEventHandler() {}
 
             virtual bool colorChanged( RGBColor const& rUserColor ) = 0;
+        virtual bool widthChanged( double nUserStrokeWidth ) = 0;
             virtual bool disable() = 0;
         };
 
-- 
1.7.0.1

