From 14f8f706112249e61407c58b3435d2625e64e238 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:08:54 +0200
Subject: [PATCH 739/768] sd-sound.diff

---
 sd/inc/diadef.h                          |    5 +-
 sd/source/filter/ppt/ppt97animations.cxx |    4 +
 sd/source/filter/ppt/ppt97animations.hxx |    1 +
 sd/source/filter/ppt/pptin.cxx           |   42 +++++++-
 sd/source/filter/ppt/pptin.hxx           |    2 +-
 sd/source/filter/ppt/pptinanimations.cxx |  154 +++++++++++++++---------------
 sd/source/filter/ppt/pptinanimations.hxx |    8 +-
 7 files changed, 129 insertions(+), 87 deletions(-)

diff --git sd/inc/diadef.h sd/inc/diadef.h
index c8fa533..cd91a2a 100644
--- sd/inc/diadef.h
+++ sd/inc/diadef.h
@@ -32,11 +32,12 @@ enum PresChange
 {
     PRESCHANGE_MANUAL = 0,
     PRESCHANGE_AUTO = 1,
-    PRESCHANGE_SEMIAUTO = 2
+    PRESCHANGE_SEMIAUTO = 2,
+    PRESCHANGE_AUTO_PPT = 3
 };
 
 // muss angepasst werden!
-#define PRESCHANGE_COUNT 3
+#define PRESCHANGE_COUNT 4
 
 #endif // _SD_DIADEF_H
 
diff --git sd/source/filter/ppt/ppt97animations.cxx sd/source/filter/ppt/ppt97animations.cxx
index 9b6795b..b1d8d4d 100644
--- sd/source/filter/ppt/ppt97animations.cxx
+++ sd/source/filter/ppt/ppt97animations.cxx
@@ -172,6 +172,10 @@ UINT32 Ppt97Animation::GetSoundRef() const
 {
     return m_aAtom.nSoundRef;
 }
+UINT16 Ppt97Animation::GetSlidesCount() const
+{
+    return m_aAtom.nSlideCount;
+}
 void Ppt97Animation::SetSoundFileUrl( const ::rtl::OUString& rSoundFileUrl )
 {
     m_aSoundFileUrl = rSoundFileUrl;
diff --git sd/source/filter/ppt/ppt97animations.hxx sd/source/filter/ppt/ppt97animations.hxx
index c45ea4a..8b9026d 100644
--- sd/source/filter/ppt/ppt97animations.hxx
+++ sd/source/filter/ppt/ppt97animations.hxx
@@ -108,6 +108,7 @@ public: //public methods
     bool HasSoundEffect() const;
     sal_Int32 GetDimColor() const;
     UINT32 GetSoundRef() const;
+    UINT16 GetSlidesCount() const;
     bool HasAnimateAssociatedShape() const; //true if the shape should be animated in addition to the text
 
     //set methods
diff --git sd/source/filter/ppt/pptin.cxx sd/source/filter/ppt/pptin.cxx
index 8655f28..8e4f624 100644
--- sd/source/filter/ppt/pptin.cxx
+++ sd/source/filter/ppt/pptin.cxx
@@ -254,6 +254,8 @@ sal_Bool ImplSdPPTImport::Import()
     if ( !bOk )
         return FALSE;
 
+    bool bAfterSound = false;
+
     pSdrModel->setLock( sal_True );
     pSdrModel->EnableUndo(false);
 
@@ -841,7 +843,7 @@ sal_Bool ImplSdPPTImport::Import()
                                             {
                                                 ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage > xPage( pMPage->getUnoPage(), ::com::sun::star::uno::UNO_QUERY );
                                                 ppt::AnimationImporter aImporter( this, rStCtrl );
-                                                aImporter.import( xPage, aProgTagContentHd );
+                                                aImporter.import( xPage, aProgTagContentHd, bAfterSound );
                                                 bNewAnimationsUsed = sal_True;
                                             }
                                             break;
@@ -968,7 +970,7 @@ sal_Bool ImplSdPPTImport::Import()
                                             {
                                                 ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage > xPage( pPage->getUnoPage(), ::com::sun::star::uno::UNO_QUERY );
                                                 ppt::AnimationImporter aImporter( this, rStCtrl );
-                                                aImporter.import( xPage, aProgTagContentHd );
+                                                aImporter.import( xPage, aProgTagContentHd, bAfterSound );
                                                 bNewAnimationsUsed = sal_True;
                                             }
                                             break;
@@ -1809,7 +1811,7 @@ void ImplSdPPTImport::ImportPageEffect( SdPage* pPage, const sal_Bool bNewAnimat
 
                                 if ( nBuildFlags & 0x400 )                      // slidechange by time
                                 {   // Standzeit (in Ticks)
-                                    pPage->SetPresChange( PRESCHANGE_AUTO );
+                                    pPage->SetPresChange( PRESCHANGE_AUTO_PPT );
                                     pPage->SetTime( nSlideTime / 1000 );
                                 }
                                 else
@@ -2021,7 +2023,7 @@ String ImplSdPPTImport::ReadSound(UINT32 nSoundRef) const
 //
 //////////////////////////////////////////////////////////////////////////
 
-String ImplSdPPTImport::ReadMedia( sal_uInt32 nMediaRef ) const
+String ImplSdPPTImport::ReadMedia( sal_uInt32 nMediaRef, bool& o_bLoop ) const
 {
     String aRetVal;
     DffRecordHeader* pHd( const_cast<ImplSdPPTImport*>(this)->aDocRecManager.GetRecordHeader( PPT_PST_ExObjList, SEEK_FROM_BEGINNING ) );
@@ -2034,6 +2036,28 @@ String ImplSdPPTImport::ReadMedia( sal_uInt32 nMediaRef ) const
             rStCtrl >> aHdMovie;
             switch( aHdMovie.nRecType )
             {
+                case DFF_PST_ExWAVAudioEmbedded :
+                {
+                    DffRecordHeader aExMediaAtomHd;
+                    if ( SeekToRec( rStCtrl, DFF_PST_ExMediaAtom, aHdMovie.GetRecEndFilePos(), &aExMediaAtomHd ) )
+                    {
+                        sal_uInt32 nRef, bLoop=0;
+                        rStCtrl >> nRef >> bLoop;
+                        if ( nRef == nMediaRef )
+                        {
+                            DffRecordHeader aExWaveAudioAtomHd;
+                            if ( SeekToRec( rStCtrl, DFF_PST_ExWAVAudioEmbeddedAtom, aExMediaAtomHd.GetRecEndFilePos(), &aExWaveAudioAtomHd ) )
+                            {
+                                sal_uInt32 nSndId;
+                                rStCtrl >> nSndId;
+                                o_bLoop = bLoop != 0;
+
+                                return ReadSound(nSndId);
+                            }
+                        }
+                    }
+                    break;
+                }
                 case PPT_PST_ExAviMovie :
                 case PPT_PST_ExMCIMovie :
                 {
@@ -2617,6 +2641,7 @@ SdrObject* ImplSdPPTImport::ProcessObj( SvStream& rSt, DffObjData& rObjData, voi
             while( TRUE )
             {
                 UINT32 nClientDataLen = rHdClientData.GetRecEndFilePos();
+                sal_uInt32 nSlideCount = 1;
                 DffRecordHeader aHd;
                 do
                 {
@@ -2667,6 +2692,9 @@ SdrObject* ImplSdPPTImport::ProcessObj( SvStream& rSt, DffObjData& rObjData, voi
 
                                     bAnimationInfoFound = TRUE;
                                 }
+                if( pAnimation->GetSlidesCount() > 1 )
+                    nSlideCount = pAnimation->GetSlidesCount();
+
                             }
                         }
                         break;
@@ -2695,14 +2723,18 @@ SdrObject* ImplSdPPTImport::ProcessObj( SvStream& rSt, DffObjData& rObjData, voi
                                     DffRecordHeader aObjRefAtomHd;
                                     if ( SeekToRec( rSt, PPT_PST_ExObjRefAtom, nHdRecEnd, &aObjRefAtomHd ) )
                                     {
+                                        bool bLoop=false;
                                         sal_uInt32 nRef;
                                         rSt >> nRef;
-                                        String aMediaURL( ReadMedia( nRef ) );
+                                        String aMediaURL( ReadMedia( nRef, bLoop ) );
                                         if ( !aMediaURL.Len() )
                                             aMediaURL = ReadSound( nRef );
                                         if ( aMediaURL.Len() )
                                         {
                                             SdrMediaObj* pMediaObj = new SdrMediaObj( pObj->GetSnapRect() );
+                                            if( nSlideCount > 1 && pMediaObj )
+                                                pMediaObj->setSlidesNumber( nSlideCount );
+
                                             pMediaObj->SetModel( pObj->GetModel() );
                                             pMediaObj->SetMergedItemSet( pObj->GetMergedItemSet() );
 
diff --git sd/source/filter/ppt/pptin.hxx sd/source/filter/ppt/pptin.hxx
index 6eae4d8..ea8195d 100644
--- sd/source/filter/ppt/pptin.hxx
+++ sd/source/filter/ppt/pptin.hxx
@@ -82,7 +82,7 @@ class ImplSdPPTImport : public SdrPowerPointImport
 public:
 
     String	        ReadSound( sal_uInt32 nSoundRef ) const;
-    String			ReadMedia( sal_uInt32 nMediaRef ) const;
+    String			ReadMedia( sal_uInt32 nMediaRef, bool& o_bLoop ) const;
  
     ImplSdPPTImport( SdDrawDocument* pDoc, SvStorage& rStorage, SfxMedium& rMed, PowerPointImportParam& );
     ~ImplSdPPTImport();
diff --git sd/source/filter/ppt/pptinanimations.cxx sd/source/filter/ppt/pptinanimations.cxx
index c358351..6889b64 100644
--- sd/source/filter/ppt/pptinanimations.cxx
+++ sd/source/filter/ppt/pptinanimations.cxx
@@ -24,7 +24,6 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_sd.hxx"
 #include <com/sun/star/animations/XAnimationNodeSupplier.hpp>
@@ -240,11 +239,11 @@ AnimationImporter::AnimationImporter( ImplSdPPTImport* pPPTImport, SvStream& rSt
 
 // --------------------------------------------------------------------
 
-void AnimationImporter::import( const Reference< XDrawPage >& xPage, const DffRecordHeader& rProgTagContentHd )
+void AnimationImporter::import( const Reference< XDrawPage >& xPage, const DffRecordHeader& rProgTagContentHd, bool& bAfterSound )
 {
 #ifdef DBG_ANIM_LOG
-    mpFile = fopen( "c:\\output.xml", "w+" );
-    //mpFile = stdout;
+    //mpFile = fopen( "c:\\output.xml", "w+" );
+    mpFile = stdout;
 #endif
     dump("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
 
@@ -259,7 +258,7 @@ void AnimationImporter::import( const Reference< XDrawPage >& xPage, const DffRe
             const Atom* pAtom = Atom::import( rProgTagContentHd, mrStCtrl );
             if( pAtom )
             {
-                importAnimationContainer( pAtom, xParent );
+                importAnimationContainer( pAtom, xParent, bAfterSound );
             }
 
             processAfterEffectNodes();
@@ -373,7 +372,7 @@ static bool is_random( const AnimationNode& rNode, const PropertySet& rSet, sal_
 }
 
 
-void AnimationImporter::importAnimationContainer( const Atom* pAtom, const Reference< XAnimationNode >& xParent )
+void AnimationImporter::importAnimationContainer( const Atom* pAtom, const Reference< XAnimationNode >& xParent, bool& bAfterSound )
 {
     if( pAtom->seekToContent() )
     {
@@ -413,7 +412,7 @@ void AnimationImporter::importAnimationContainer( const Atom* pAtom, const Refer
         // import if we have a node and its not random
         if( xNode.is() )
         {
-            fillNode( xNode, aNode, aSet );
+            fillNode( xNode, aNode, aSet, bAfterSound );
 
             switch( aNode.mnGroupType )
             {
@@ -422,7 +421,7 @@ void AnimationImporter::importAnimationContainer( const Atom* pAtom, const Refer
                 dump( "<par" );
                 dump( aNode );
                 dump( aSet );
-                importTimeContainer( pAtom, xNode );	
+                importTimeContainer( pAtom, xNode, bAfterSound );
                 dump( "</par>\n" );
 
                 // for iteration containers, map target from childs to iteration
@@ -473,7 +472,7 @@ void AnimationImporter::importAnimationContainer( const Atom* pAtom, const Refer
                 dump( "<seq" );
                 dump( aNode );
                 dump( aSet );
-                importTimeContainer( pAtom, xNode );	
+                importTimeContainer( pAtom, xNode, bAfterSound );
                 dump( "</seq>\n" );
 
                 if( aSet.hasProperty( DFF_ANIM_NODE_TYPE ) )
@@ -554,7 +553,7 @@ void AnimationImporter::importAnimationContainer( const Atom* pAtom, const Refer
                 dump( "<audio" );
                 dump( aNode );
                 dump( aSet );
-                importAudioContainer( pAtom, xNode );	
+                importAudioContainer( pAtom, xNode );
                 dump( "</audio>\n" );
             }
             break;
@@ -610,7 +609,7 @@ void AnimationImporter::fixMainSequenceTiming( const ::com::sun::star::uno::Refe
                     // with node
                     xE2->nextElement() >>= xEA2;
                     if( xEA2.is() )
-                        xE2.query( xEA2->createEnumeration() );
+                        xE2.set( xEA2->createEnumeration(), UNO_QUERY );
                     else
                         xE2.clear();
 
@@ -956,9 +955,9 @@ bool AnimationImporter::convertAnimationValue( MS_AttributeNames eAttribute, Any
                 sal_Int32 nA = aString.getToken( 0, (sal_Unicode)',', index ).toInt32();
                 sal_Int32 nB = aString.getToken( 0, (sal_Unicode)',', index ).toInt32();
                 sal_Int32 nC = aString.getToken( 0, (sal_Unicode)',', index ).toInt32();
-                dump( "hsl(%ld", nA );
-                dump( ",%ld", nB );
-                dump( ",%ld)", nC );
+                dump( "hsl(%d", nA );
+                dump( ",%d", nB );
+                dump( ",%d)", nC );
                 Sequence< double > aHSL( 3 );
                 aHSL[0] = nA * 360.0/255.0;
                 aHSL[1] = nB / 255.0;
@@ -1117,7 +1116,7 @@ static OUString getConvertedSubType( sal_Int16 nPresetClass, sal_Int32 nPresetId
 
 // --------------------------------------------------------------------
 
-void AnimationImporter::fillNode( Reference< XAnimationNode >& xNode, const AnimationNode& rNode, const PropertySet& rSet )
+void AnimationImporter::fillNode( Reference< XAnimationNode >& xNode, const AnimationNode& rNode, PropertySet& rSet, bool& bAfterSound )
 {
     sal_Bool bAfterEffect = false;
 
@@ -1182,6 +1181,7 @@ void AnimationImporter::fillNode( Reference< XAnimationNode >& xNode, const Anim
         if( rSet.getProperty( DFF_ANIM_NODE_TYPE ) >>= nPPTNodeType )
         {
             sal_Int16 nNodeType = ::com::sun::star::presentation::EffectNodeType::DEFAULT;
+
             switch( nPPTNodeType )
             {
                 case DFF_ANIM_NODE_TYPE_ON_CLICK:		nNodeType = ::com::sun::star::presentation::EffectNodeType::ON_CLICK;	break;
@@ -1191,7 +1191,11 @@ void AnimationImporter::fillNode( Reference< XAnimationNode >& xNode, const Anim
                 case DFF_ANIM_NODE_TYPE_TIMING_ROOT:	nNodeType = ::com::sun::star::presentation::EffectNodeType::TIMING_ROOT; break;
                 case DFF_ANIM_NODE_TYPE_INTERACTIVE_SEQ:nNodeType = ::com::sun::star::presentation::EffectNodeType::INTERACTIVE_SEQUENCE; break;
             }
-
+        if( bAfterSound
+        && ( nPPTNodeType == DFF_ANIM_NODE_TYPE_ON_CLICK
+             || nPPTNodeType == DFF_ANIM_NODE_TYPE_WITH_PREVIOUS
+             || nPPTNodeType == DFF_ANIM_NODE_TYPE_AFTER_PREVIOUS ) )
+        bAfterSound = false;
             sal_Int32 nSize = aUserData.getLength();
             aUserData.realloc(nSize+1);
             aUserData[nSize].Name = OUString( RTL_CONSTASCII_USTRINGPARAM( "node-type" ) );
@@ -1226,7 +1230,7 @@ void AnimationImporter::fillNode( Reference< XAnimationNode >& xNode, const Anim
             case DFF_ANIM_PRESS_CLASS_EMPHASIS:		nEffectPresetClass = EffectPresetClass::EMPHASIS; break;
             case DFF_ANIM_PRESS_CLASS_MOTIONPATH:	nEffectPresetClass = EffectPresetClass::MOTIONPATH; break;
             case DFF_ANIM_PRESS_CLASS_OLE_ACTION:	nEffectPresetClass = EffectPresetClass::OLEACTION; break;
-            case DFF_ANIM_PRESS_CLASS_MEDIACALL:	nEffectPresetClass = EffectPresetClass::MEDIACALL; break;
+        case DFF_ANIM_PRESS_CLASS_MEDIACALL:	nEffectPresetClass = EffectPresetClass::MEDIACALL; bAfterSound = true; break;
             }
             sal_Int32 nSize = aUserData.getLength();
             aUserData.realloc(nSize+1);
@@ -1416,7 +1420,7 @@ void AnimationImporter::fillNode( Reference< XAnimationNode >& xNode, const Anim
 
 // --------------------------------------------------------------------
 
-void AnimationImporter::importTimeContainer( const Atom* pAtom, const Reference< XAnimationNode >& xNode )
+void AnimationImporter::importTimeContainer( const Atom* pAtom, const Reference< XAnimationNode >& xNode, bool& bAfterSound )
 {
     DBG_ASSERT( pAtom && xNode.is(), "invalid call to ppt::AnimationImporter::importTimeContainer()!");
     if( pAtom && xNode.is() )
@@ -1454,13 +1458,13 @@ void AnimationImporter::importTimeContainer( const Atom* pAtom, const Reference<
                     }
                     else
                     {
-                        importAnimationContainer( pChildAtom, xNode );
+                        importAnimationContainer( pChildAtom, xNode, bAfterSound );
                     }
                 }
                 break;
                 case DFF_msofbtAnimGroup :
                 {
-                    importAnimationContainer( pChildAtom, xNode );
+                    importAnimationContainer( pChildAtom, xNode, bAfterSound );
                 }
                 break;
                 case DFF_msofbtAnimIteration:
@@ -1488,9 +1492,9 @@ void AnimationImporter::importTimeContainer( const Atom* pAtom, const Reference<
                         dump( "<iterate" );
                         dump( " iterateType=\"%s\"", (nTextUnitEffect == 0) ? "byElement" : (nTextUnitEffect == 1) ? "byWord" : "byLetter" );
                         dump( " iterateInterval=\"%g\"", fInterval );
-                        dump( " u1=\"%ld\"", nU1 );
-                        dump( " u2=\"%ld\"", nU2 );
-                        dump( " u3=\"%ld\"/>\n", nU3 );
+                        dump( " u1=\"%d\"", nU1 );
+                        dump( " u2=\"%d\"", nU2 );
+                        dump( " u3=\"%d\"/>\n", nU3 );
                     }
                 }
                 break;
@@ -1501,7 +1505,7 @@ void AnimationImporter::importTimeContainer( const Atom* pAtom, const Reference<
                     sal_uInt32 nU1, nU2;
                     mrStCtrl >> nU1 >> nU2;
 
-                    fprintf( mpFile, "<unknown_0xf136 nU1=\"%ld\" nU2=\"%ld\"/>\n", nU1, nU2 );
+                    fprintf( mpFile, "<unknown_0xf136 nU1=\"%d\" nU2=\"%d\"/>\n", nU1, nU2 );
 #endif
                 }
                 break;
@@ -1705,7 +1709,7 @@ void AnimationImporter::importAnimateFilterContainer( const Atom* pAtom, const R
                 break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
 
             }
@@ -1839,7 +1843,7 @@ void AnimationImporter::importAnimateAttributeTargetContainer( const Atom* pAtom
             break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -1886,17 +1890,17 @@ Any AnimationImporter::implGetColorAny( sal_Int32 nMode, sal_Int32  nA, sal_Int3
     {
     case 0: // rgb
         {
-            dump( "rgb(%ld", nA );
-            dump( ",%ld", nB );
-            dump( ",%ld)", nC );
+            dump( "rgb(%d", nA );
+            dump( ",%d", nB );
+            dump( ",%d)", nC );
             Color aColor( (UINT8)nA, (UINT8)nB, (UINT8)nC );
             return makeAny( (sal_Int32)aColor.GetRGBColor() );
         }
     case 1: // hsl
         {
-            dump( "hsl(%ld", nA );
-            dump( ",%ld", nB );
-            dump( ",%ld)", nC );
+            dump( "hsl(%d", nA );
+            dump( ",%d", nB );
+            dump( ",%d)", nC );
             Sequence< double > aHSL( 3 );
             aHSL[0] = nA * 360.0/255.0;
             aHSL[1] = nB / 255.0;
@@ -1908,19 +1912,19 @@ Any AnimationImporter::implGetColorAny( sal_Int32 nMode, sal_Int32  nA, sal_Int3
         {
             Color aColor;
             mpPPTImport->GetColorFromPalette((USHORT)nA, aColor );
-            dump( "index(%ld", nA );
-            dump( " [%ld", (sal_Int32)aColor.GetRed() );
-            dump( ",%ld", (sal_Int32)aColor.GetGreen() );
-            dump( ",%ld])", (sal_Int32)aColor.GetBlue() );
+            dump( "index(%d", nA );
+            dump( " [%d", (sal_Int32)aColor.GetRed() );
+            dump( ",%d", (sal_Int32)aColor.GetGreen() );
+            dump( ",%d])", (sal_Int32)aColor.GetBlue() );
             return makeAny( (sal_Int32)aColor.GetRGBColor() );
         }
 
     default:
         {
-            dump( "unknown_%ld(", nMode );
-            dump( "%ld", nA );
-            dump( ",%ld", nB );
-            dump( ",%ld)", nC );
+            dump( "unknown_%d(", nMode );
+            dump( "%d", nA );
+            dump( ",%d", nB );
+            dump( ",%d)", nC );
             DBG_ERROR( "ppt::implGetColorAny(), unhandled color type" );
 
             Any aAny;
@@ -1990,7 +1994,7 @@ void AnimationImporter::importAnimateColorContainer( const Atom* pAtom, const Re
                 break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -2025,8 +2029,8 @@ void AnimationImporter::importAnimateSetContainer( const Atom* pAtom, const Refe
                 sal_Int32 nU1, nU2;
                 mrStCtrl >> nU1 >> nU2;
 
-                dump( " set_1=\"%ld\"", nU1 ),
-                dump( " set_2=\"%ld\"", nU2 );
+                dump( " set_1=\"%d\"", nU1 ),
+                dump( " set_2=\"%d\"", nU2 );
             }
             break;
 
@@ -2049,7 +2053,7 @@ void AnimationImporter::importAnimateSetContainer( const Atom* pAtom, const Refe
                 break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -2128,7 +2132,7 @@ void AnimationImporter::importAnimateContainer( const Atom* pAtom, const Referen
                 }
                 break;
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -2207,7 +2211,7 @@ void AnimationImporter::importAnimateMotionContainer( const Atom* pAtom, const R
                 break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -2273,7 +2277,7 @@ void AnimationImporter::importCommandContainer( const Atom* pAtom, const Referen
                 break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -2407,7 +2411,7 @@ void AnimationImporter::importAudioContainer( const Atom* pAtom, const Reference
             break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -2513,7 +2517,7 @@ void AnimationImporter::importAnimateScaleContainer( const Atom* pAtom, const Re
                 break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -2573,7 +2577,7 @@ void AnimationImporter::importAnimateRotationContainer( const Atom* pAtom, const
                     fprintf( mpFile, " to=\"%g\"", (double)fTo );
 
                 if( nU1 )
-                    fprintf( mpFile, " rotation_1=\"%ld\"", nU1 );
+                    fprintf( mpFile, " rotation_1=\"%d\"", nU1 );
 #endif
             }
             break;
@@ -2583,7 +2587,7 @@ void AnimationImporter::importAnimateRotationContainer( const Atom* pAtom, const
                 break;
 
             default:
-                dump( " unknown_atom=\"%ld\"", (sal_Int32)pChildAtom->getType() );
+                dump( " unknown_atom=\"%d\"", (sal_Int32)pChildAtom->getType() );
                 break;
             }
 
@@ -2687,7 +2691,7 @@ void AnimationImporter::importAnimationValues( const Atom* pAtom, const Referenc
                 sal_Int32 nAutoreverse;
                 mrStCtrl >> nAutoreverse;
                 xNode->setAutoReverse( nAutoreverse != 0 );
-                dump( " autoreverse=\"%#lx\"", nAutoreverse );
+                dump( " autoreverse=\"%#x\"", nAutoreverse );
             }
             break;
 
@@ -2696,7 +2700,7 @@ void AnimationImporter::importAnimationValues( const Atom* pAtom, const Referenc
                 sal_uInt32 nUnknown;
                 mrStCtrl >> nUnknown;
 #ifdef DBG_ANIM_LOG
-                fprintf(mpFile, " attribute_%d=\"%#lx\"", nType, nUnknown );
+                fprintf(mpFile, " attribute_%d=\"%#x\"", nType, nUnknown );
 #endif
             }
             break;
@@ -2819,7 +2823,7 @@ void AnimationImporter::importAnimateKeyPoints( const Atom* pAtom, const Referen
                     else if( aValuePair.First >>= nVal )
                         dump( "%f", nVal );
                     else
-                        dump( "%X", (sal_Int32)&aValuePair.First );
+                        dump( "unknown" );
 
                     if( aValuePair.Second >>= aStr )
                         dump( ",%s", 
@@ -2828,7 +2832,7 @@ void AnimationImporter::importAnimateKeyPoints( const Atom* pAtom, const Referen
                     else if( aValuePair.Second >>= nVal )
                         dump( ",%f", nVal );
                     else
-                        dump( ",%X", (sal_Int32)&aValuePair.Second );
+                        dump( ",unknown" );
                 }
             }
         }
@@ -3068,8 +3072,8 @@ void AnimationImporter::importAnimationActions( const Atom* pAtom, const Referen
                 dump( " endSync=\"%s\"", nEndSync == 1 ? "all" : "unknown" );
             }
 
-            dump( " action_4=\"%#lx\"", nU4 );
-            dump( " action_5=\"%#lx\"", nU5 );
+            dump( " action_4=\"%#x\"", nU4 );
+            dump( " action_5=\"%#x\"", nU5 );
     #endif
         }
     }
@@ -3184,8 +3188,8 @@ sal_Int32 AnimationImporter::importTargetElementContainer( const Atom* pAtom, An
 #ifdef DBG_ANIM_LOG
                 if((begin != -1) || (end != -1) )
                 {
-//					dump( " text_begin=\"%ld\"", begin );
-//					dump( " text_end=\"%ld\"", end );
+//					dump( " text_begin=\"%d\"", begin );
+//					dump( " text_end=\"%d\"", end );
                 }
 #endif
             }
@@ -3196,7 +3200,7 @@ sal_Int32 AnimationImporter::importTargetElementContainer( const Atom* pAtom, An
                 mrStCtrl >> nU1;
     
                 // HINT: nU1 == 1 : target document. ?
-//				dump( " unknown_0x2b01=\"%#lx\"", nU1 );
+//				dump( " unknown_0x2b01=\"%#x\"", nU1 );
             }
             break;
             default:
@@ -3307,7 +3311,7 @@ void AnimationImporter::dump_atom_header( const Atom* pAtom, bool bOpen, bool bA
 
 void AnimationImporter::dump( UINT32 nLen, bool bNewLine )
 {
-    char * faul = "0123456789abcdef";
+    const char * faul = "0123456789abcdef";
 
     UINT32 i = 0;
     int b = 0;
@@ -3354,7 +3358,7 @@ void AnimationImporter::dump_atom( const Atom* pAtom, bool bNewLine )
 
                         if( aValue >>= nInt )
                         {
-                            fprintf(mpFile, " value=\"%ld\"", nInt );
+                            fprintf(mpFile, " value=\"%d\"", nInt );
                         }
                         else if( aValue >>= aString )
                         {
@@ -3434,7 +3438,7 @@ void AnimationImporter::dump_anim_group( const Atom* pAtom, const AnimationNode&
             break;
         default:
             {
-                fprintf( mpFile, "unknown_node_%#lx", rNode.mnNodeType );
+                fprintf( mpFile, "unknown_node_%#x", rNode.mnNodeType );
             }
             break;
         }
@@ -3443,7 +3447,7 @@ void AnimationImporter::dump_anim_group( const Atom* pAtom, const AnimationNode&
         fprintf( mpFile, "media" );
         break;
     default:
-        fprintf( mpFile, "unknown_group_%#lx", rNode.mnGroupType );
+        fprintf( mpFile, "unknown_group_%#x", rNode.mnGroupType );
         break;
     }
 
@@ -3482,9 +3486,9 @@ void AnimationImporter::dump( const AnimationNode& rNode )
         fprintf(mpFile, " dur=\"indefinite\"" );
     }
     
-    if( rNode.mnU1 ) fprintf(mpFile," u1=\"%#lx\"", rNode.mnU1);
-    if( rNode.mnU3 ) fprintf(mpFile," u3=\"%#lx\"", rNode.mnU3);
-    if( rNode.mnU4 ) fprintf(mpFile," u4=\"%#lx\"", rNode.mnU4);
+    if( rNode.mnU1 ) fprintf(mpFile," u1=\"%#x\"", rNode.mnU1);
+    if( rNode.mnU3 ) fprintf(mpFile," u3=\"%#x\"", rNode.mnU3);
+    if( rNode.mnU4 ) fprintf(mpFile," u4=\"%#x\"", rNode.mnU4);
 }
 
 void AnimationImporter::dump( Any& rAny )
@@ -3516,7 +3520,7 @@ void AnimationImporter::dump( Any& rAny )
     }
     else if( rAny >>= nInt )
     {
-        fprintf( mpFile, "%ld", nInt );
+        fprintf( mpFile, "%d", nInt );
     }
     else if( rAny >>= bBool )
     {
@@ -3635,7 +3639,7 @@ void AnimationImporter::dump( const PropertySet& rSet )
             sal_Int32 nPresetId ;
             if( aAny >>= nPresetId )
             {
-                fprintf(mpFile, " presetid=\"%ld\"", nPresetId );
+                fprintf(mpFile, " presetid=\"%d\"", nPresetId );
                 bKnown = true;
             }
         }
@@ -3646,7 +3650,7 @@ void AnimationImporter::dump( const PropertySet& rSet )
             sal_Int32 nPointsType ;
             if( aAny >>= nPointsType )
             {
-                fprintf(mpFile, " presetSubType=\"%ld\"", nPointsType );
+                fprintf(mpFile, " presetSubType=\"%d\"", nPointsType );
                 bKnown = true;
             }
         }
@@ -3670,7 +3674,7 @@ void AnimationImporter::dump( const PropertySet& rSet )
                 default:
                 {
                     static char buffer[128];
-                    sprintf( buffer, "%ld", nPresetClass );
+                    sprintf( buffer, "%d", nPresetClass );
                     pMode = buffer;
                 }
                 break;
@@ -3699,7 +3703,7 @@ void AnimationImporter::dump( const PropertySet& rSet )
                     default :
                     {
                         static char buffer[128];
-                        sprintf( buffer, "%ld", nNodeType );
+                        sprintf( buffer, "%d", nNodeType );
                         pNode = buffer;
                     }
                     break;
@@ -3716,7 +3720,7 @@ void AnimationImporter::dump( const PropertySet& rSet )
             sal_Int32 nGroupId;
             if ( aAny >>= nGroupId )
             {
-                fprintf( mpFile, " groupId=\"%ld\"", nGroupId );
+                fprintf( mpFile, " groupId=\"%d\"", nGroupId );
                 bKnown = true;
             }
         }
@@ -3753,7 +3757,7 @@ void AnimationImporter::dump( const PropertySet& rSet )
             sal_Int32 nEndAfterSlide;
             if( aAny >>= nEndAfterSlide )
             {
-                fprintf(mpFile, " endAfterSlide=\"%ld\"", nEndAfterSlide );
+                fprintf(mpFile, " endAfterSlide=\"%d\"", nEndAfterSlide );
             bKnown = true;
             }
         }
@@ -3811,7 +3815,7 @@ void AnimationImporter::dump( const PropertySet& rSet )
 
         if( !bKnown )
         {
-            fprintf( mpFile, " unknown_%lu=\"", nInstance );
+            fprintf( mpFile, " unknown_%u=\"", nInstance );
             dump( aAny );
             fprintf( mpFile, "\"" );
         }
diff --git sd/source/filter/ppt/pptinanimations.hxx sd/source/filter/ppt/pptinanimations.hxx
index 3fa95c3..eb6cea4 100644
--- sd/source/filter/ppt/pptinanimations.hxx
+++ sd/source/filter/ppt/pptinanimations.hxx
@@ -56,11 +56,11 @@ class AnimationImporter
 public:
     AnimationImporter( ImplSdPPTImport* pPPTImport, SvStream& rStCtrl );
 
-    void import( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >& xPage, const DffRecordHeader& rProgTagContentHd );
+    void import( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >& xPage, const DffRecordHeader& rProgTagContentHd, bool& bAfterSound );
 
 private:
-    void importAnimationContainer( const Atom* pAtom, const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xParent );
-    void importTimeContainer( const Atom* pAtom, const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode );
+    void importAnimationContainer( const Atom* pAtom, const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xParent, bool& bAfterSound );
+    void importTimeContainer( const Atom* pAtom, const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode, bool& bAfterSound );
     void importAnimationNodeContainer( const Atom* pAtom, const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode );
     void importAnimationSubContainer( const Atom* pAtom, const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode );
 
@@ -85,7 +85,7 @@ private:
     bool importAttributeNamesContainer( const Atom* pAtom, rtl::OUString& rAttributeNames );
     sal_Int32 importTargetElementContainer( const Atom* pAtom, ::com::sun::star::uno::Any& rTarget, sal_Int16& nSubType );
 
-    void fillNode( ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xTiming, const AnimationNode& rNode, const PropertySet& rSet );
+    void fillNode( ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xTiming, const AnimationNode& rNode, PropertySet& rSet, bool& bAfterEffect );
     ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode > createNode( const Atom* pAtom, const AnimationNode& rNode );
 
     bool convertAnimationNode( const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode, const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xParent );
-- 
1.7.0.1

