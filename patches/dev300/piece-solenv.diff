--- solenv/bin/modules/installer/setupscript.pm	2008-07-18 17:17:13.000000000 +0100
+++ solenv/bin/modules/installer/setupscript.pm	2008-07-18 17:17:13.000000000 +0100
@@ -66,10 +66,14 @@
 	
 	# and now the complete path for the setup script is needed
 	# The log file cannot be used, because this is the language independent section
-	
-	$scriptnameref = installer::scriptitems::get_sourcepath_from_filename_and_includepath(\$scriptname, $includepatharrayref, 1);
 
-	$installer::globals::setupscriptname = $$scriptnameref;
+	if (defined $ENV{OO_SOLVERDIR}) {
+	    $installer::globals::setupscriptname = "$ENV{OO_SOLVERDIR}/bin/$scriptname";
+	} else {
+	    $scriptnameref = installer::scriptitems::get_sourcepath_from_filename_and_includepath(\$scriptname, $includepatharrayref, 1);
+
+	    $installer::globals::setupscriptname = $$scriptnameref;
+	}
 
 	if ( $installer::globals::setupscriptname eq "" )
 	{

--- solenv/bin/modules/installer/globals.pm	2008-07-18 17:53:17.000000000 +0100
+++ solenv/bin/modules/installer/globals.pm	2008-07-18 17:53:17.000000000 +0100
@@ -56,7 +56,8 @@
 
 	$destdir = "";
 	$rootpath = "";
-	
+
+	$split = 0;
 	$required_dotnet_version = "2.0.0.0";
 	$productextension = "";
 	@languageproducts = ();
@@ -428,6 +429,8 @@
 	if ( $plat =~ /linux/i ) { $islinux = 1; } 
 	if ( $plat =~ /solaris/i ) { $issolaris = 1; } 
 
+	$split = 1 if (defined $ENV{SOLARPIECE});
+
 	# ToDo: Needs to be expanded for additional platforms
 
 }


--- solenv/bin/modules/installer/scriptitems.pm.old	2009-10-14 15:38:04.000000000 +0200
+++ solenv/bin/modules/installer/scriptitems.pm	2009-10-14 17:13:44.000000000 +0200
@@ -1373,8 +1373,10 @@ sub remove_Files_Without_Sourcedirectory
             
             if ( ! ( $styles =~ /\bSTARREGISTRY\b/ ))	# StarRegistry files will be created later
             {
-                my $filename = $onefile->{'Name'};
+              my $filename = $onefile->{'Name'};
 
+              if (! $installer::globals::split)
+              {
                 if ( ! $installer::globals::languagepack )
                 {
                     $infoline = "ERROR: Removing file $filename from file list.\n";
@@ -1383,7 +1385,6 @@ sub remove_Files_Without_Sourcedirectory
                     push(@missingfiles, "ERROR: File not found: $filename\n");	
                     $error_occured = 1;
 
-                    next;	# removing this file from list, if sourcepath is empty
                 }
                 else # special case for language packs
                 {
@@ -1395,7 +1396,6 @@ sub remove_Files_Without_Sourcedirectory
                         push(@missingfiles, "ERROR: File not found: $filename\n");	
                         $error_occured = 1;
 
-                        next;	# removing this file from list, if sourcepath is empty		
                     }
                     else
                     {
@@ -1404,9 +1404,10 @@ sub remove_Files_Without_Sourcedirectory
                         $infoline = "INFO: It is not language dependent and can be ignored in language packs.\n";
                         push( @installer::globals::logfileinfo, $infoline);
 
-                        next;	# removing this file from list, if sourcepath is empty					
                     }
                 }
+              }
+              next;	# removing this file from list, if sourcepath is empty
             }
         }
 
--- solenv/bin/modules/installer/profiles.pm	2008-07-21 14:04:00.000000000 +0100
+++ solenv/bin/modules/installer/profiles.pm	2008-07-21 14:04:00.000000000 +0100
@@ -91,20 +91,32 @@
 # Adding the newly created profile into the file list
 #####################################################################
 
+sub create_blank_profile
+{
+	my $profile = shift;
+
+	# Taking the base data from the "gid_File_Lib_Vcl"
+#	my $vclgid = "gid_File_Lib_Vcl";
+#	if ( $allvariables->{'GLOBALFILEGID'} ) { $vclgid = $allvariables->{'GLOBALFILEGID'}; }
+#	my $vclfile = installer::existence::get_specified_file($filesarrayref, $vclgid);
+	# copying all base data	
+#	installer::converter::copy_item_object($vclfile, \%profile);
+
+	# hard-coded defaults instead
+	$profile->{'ismultilingual'} = 0;
+	$profile->{'haslanguagemodule'} = 0;
+	$profile->{'specificlanguage'} = '';
+	$profile->{'Styles'} = '(PACKED,UNO_COMPONENT)';
+	$profile->{'RegistryID'} = 'gid_Starregistry_Services_Rdb';
+}
+
 sub add_profile_into_filelist
 {
 	my ($filesarrayref, $oneprofile, $completeprofilename, $allvariables) = @_;
 
 	my %profile = ();
 
-	# Taking the base data from the "gid_File_Lib_Vcl"
-
-	my $vclgid = "gid_File_Lib_Vcl";
-	if ( $allvariables->{'GLOBALFILEGID'} ) { $vclgid = $allvariables->{'GLOBALFILEGID'}; }
-	my $vclfile = installer::existence::get_specified_file($filesarrayref, $vclgid);
-
-	# copying all base data	
-	installer::converter::copy_item_object($vclfile, \%profile);			
+	create_blank_profile (\%profile);
 
 	# and overriding all new values
 	

--- solenv/bin/modules/installer/packagelist.pm	2008-07-22 12:05:12.000000000 +0100
+++ solenv/bin/modules/installer/packagelist.pm	2008-07-22 12:05:12.000000000 +0100
@@ -501,6 +501,9 @@
 			my $gid =  $onepackage->{'module'};
 			my $fileref = installer::scriptitems::get_sourcepath_from_filename_and_includepath(\$scriptfile, "" , 0);
 
+                        if ($$fileref eq "" && $installer::globals::split) {
+                            $$fileref = $ENV{OO_INSTDIR} . "/solver/bin/" . $scriptfile;
+                        }
 			if ( $$fileref eq "" ) { installer::exiter::exit_program("ERROR: Could not find script file $scriptfile for module $gid!", "check_packagelist"); }
 
 			my $infoline = "$gid: Using script file: \"$$fileref\"!\n";
@@ -651,7 +654,13 @@
 			# The file with package information has to be found in path list
 			my $fileref = installer::scriptitems::get_sourcepath_from_filename_and_includepath(\$packinfofile, "" , 0);
 
-			if ( $$fileref eq "" ) { installer::exiter::exit_program("ERROR: Could not find file $packinfofile for module $modulegid!", "collectpackages"); }
+			if ( $$fileref eq "" && $installer::globals::split) {
+			    $$fileref = $ENV{OO_INSTDIR} . "/solver/bin/" . $packinfofile;
+			}
+
+			if ( $$fileref eq "" ) {
+			    installer::exiter::exit_program("ERROR: Could not find file $packinfofile for module $modulegid!", "collectpackages");
+			}
 
 			my $infoline = "$modulegid: Using packinfo: \"$$fileref\"!\n";
 			push( @installer::globals::logfileinfo, $infoline);



--- solenv/bin/modules/installer/scpzipfiles.pm	2008-07-22 12:42:33.000000000 +0100
+++ solenv/bin/modules/installer/scpzipfiles.pm	2008-07-22 12:42:33.000000000 +0100
@@ -148,6 +148,8 @@
 				
 				my $onefilename = $onefile->{'Name'};
 				my $sourcepath = $onefile->{'sourcepath'};
+
+				next if ($installer::globals::split && $sourcepath eq '');
 				
 				if ( $onefilename =~ /^\s*\Q$installer::globals::separator\E/ )	# filename begins with a slash, for instance /registry/schema/org/openoffice/VCL.xcs
 				{




--- solenv/bin/make_installer.pl	2008-07-22 21:13:46.000000000 +0100
+++ solenv/bin/make_installer.pl	2008-07-22 21:13:46.000000000 +0100
@@ -302,6 +302,9 @@
 
 my $includepatharrayref = installer::converter::convert_stringlist_into_array($includepathref, ",");
 if ( $installer::globals::globallogging ) { installer::files::save_file($loggingdir . "allpatharray1.log" ,$includepatharrayref); }
+if (defined $ENV{OO_SOLVERDIR}) {
+    push @{$includepatharrayref}, "$ENV{OO_SOLVERDIR}/bin";
+}
 
 installer::ziplist::replace_all_variables_in_pathes($includepatharrayref, $pathvariableshashref);
 if ( $installer::globals::globallogging ) { installer::files::save_file($loggingdir . "allpatharray2.log" ,$includepatharrayref); }


--- solenv/bin/modules/installer/worker.pm	2008-07-22 13:49:26.000000000 +0100
+++ solenv/bin/modules/installer/worker.pm	2008-07-22 13:49:26.000000000 +0100
@@ -730,6 +730,17 @@ sub remove_all_items_with_special_flag
 	return \@allitems;
 }
 
+# ugly hack, for reasons ~unknown the directory counting
+# magic fails in split mode ...
+sub check_create_dir_for_file ($)
+{
+    return if (!$installer::globals::split);
+    my $file = shift;
+    $file =~ s|/[^/]*$||;
+    `mkdir -p $file` if (! -d $file);
+}
+    
+
 ###########################################################
 # Mechanism for simple installation without packing
 ###########################################################
@@ -748,6 +759,7 @@ sub install_simple ($$$$$$)
 
 	my $destdir = $installer::globals::destdir;
 	my @lines = (); 
+	my @sources = (); 
 
 	installer::logger::print_message( "DestDir: $destdir \n" );
 	installer::logger::print_message( "Rootpath: $installer::globals::rootpath \n" );
@@ -797,11 +809,24 @@ sub install_simple ($$$$$$)
 
 		push @lines, "$destination\n";
 		# printf "cp $sourcepath $destdir$destination\n";
-		copy ("$sourcepath", "$destdir$destination") || die "Can't copy file: $sourcepath -> $destdir$destination $!";
-		my $sourcestat = stat($sourcepath);
-		utime ($sourcestat->atime, $sourcestat->mtime, "$destdir$destination");
-		chmod (oct($unixrights), "$destdir$destination") || die "Can't change permissions: $!";
- 		push @lines, "$destination\n";
+
+		next if ($installer::globals::split && $sourcepath eq '');
+
+		check_create_dir_for_file ("$destdir$destination"); # urgh ...
+		if (!copy ("$sourcepath", "$destdir$destination")) {
+		    if (-f "$destdir$destination" && ! -w "$destdir$destination") {
+			print STDERR "skipping existing file: $destdir$destination: $!\n";
+		    } else {
+			die "Can't copy file '$sourcepath' to '$destdir$destination': $!";
+		    }
+		} else {
+		    printf "copy file $sourcepath to $destdir$destination\n";
+		    my $sourcestat = stat($sourcepath);
+		    utime ($sourcestat->atime, $sourcestat->mtime, "$destdir$destination");
+		    chmod (oct($unixrights), "$destdir$destination") || die "Can't change permissions: $!";
+ 		    push @lines, "$destination\n";
+		    push @sources, "$sourcepath\n";
+		}
 	}
 	
 	for ( my $i = 0; $i <= $#{$linksarray}; $i++ )
@@ -826,9 +851,15 @@ sub install_simple ($$$$$$)
 		push @lines, "$destination\n";
 	}
 
-	if ( $destdir ne "" )
-	{
-		my $filelist;
+	my ($filelist, $fname);
+	if ( $installer::globals::split ) {
+		# don't write file lists, just source lists 
+		$fname = $installer::globals::destdir . "/all_filelist.txt";
+		open ($filelist, ">>$fname") || die "Can't open $fname: $!";
+		print $filelist @sources;
+		close ($filelist);
+	}
+	if ($destdir ne "" ) {
 		my $fname = $installer::globals::destdir . "/$packagename";
 		open ($filelist, ">$fname") || die "Can't open $fname: $!";
 		print $filelist @lines;
@@ -2292,6 +2323,9 @@ sub add_variables_from_inc_to_hashref
 		$includefilename =~ s/^\s*//;
 		$includefilename =~ s/\s*$//;
 		$includefilenameref = installer::scriptitems::get_sourcepath_from_filename_and_includepath(\$includefilename, $includepatharrayref, 1);
+		if ($$includefilenameref eq "" && $installer::globals::split) {
+		    $$includefilenameref = $ENV{OO_INSTDIR} . "/solver/bin/" . $includefilename;
+		}
 		if ( $$includefilenameref eq "" ) { installer::exiter::exit_program("Include file $includefilename not found!\nADD_INCLUDE_FILES = $allvariables->{'ADD_INCLUDE_FILES'}", "add_variables_from_inc_to_hashref"); }
 
 		$infoline = "Including inc file: $$includefilenameref \n";
@@ -2916,6 +2950,9 @@ sub set_spellcheckerlanguages
 {
 	my ( $productlanguagesarrayref, $allvariables ) = @_;
 
+	# short circuit in split mode
+	return if ($installer::globals::split);
+
 	my %productlanguages = ();
 	for ( my $i = 0; $i <= $#{$productlanguagesarrayref}; $i++ ) { $productlanguages{${$productlanguagesarrayref}[$i]} = 1;  }
 	
--- solenv/bin/make_installer.pl	2008-07-18 17:58:25.000000000 +0100
+++ solenv/bin/make_installer.pl	2008-07-18 17:58:25.000000000 +0100
@@ -834,7 +834,8 @@
 			# "regcomp" or "regcomp.exe". Therefore this function can only be executed on the
 			# corresponding platform.
 
-			if ( $installer::globals::servicesrdb_can_be_created )
+			if ( $installer::globals::servicesrdb_can_be_created &&
+			     !$installer::globals::split)
 			{
 				installer::logger::print_message( "... creating preregistered services.rdb ...\n" );
 
@@ -950,7 +951,7 @@
 	my $profilesinproductlanguageresolvedarrayref;
 	my $profileitemsinproductlanguageresolvedarrayref;
 
-    if ((!($installer::globals::is_copy_only_project)) && (!($installer::globals::product =~ /ada/i )) && (!($installer::globals::languagepack)))
+    if ((!($installer::globals::is_copy_only_project)) && (!($installer::globals::product =~ /ada/i )) && (!($installer::globals::languagepack)) && $ENV{OO_ALLOW_PROFILES})
 	{
 		installer::logger::print_message( "... creating profiles ...\n" );
 


--- solenv/bin/modules/installer/regmerge.pm	2008-07-23 20:50:16.000000000 +0100
+++ solenv/bin/modules/installer/regmerge.pm	2008-07-23 20:50:16.000000000 +0100
@@ -135,6 +135,9 @@
 	else { $searchname = "regcomplazy.exe"; } 
 	
 	my $regmergefileref = installer::scriptitems::get_sourcepath_from_filename_and_includepath(\$searchname, $includepatharrayref, 1);
+	if ( $$regmergefileref eq "" && $installer::globals::split) {
+	    $$regmergefileref = $ENV{OO_INSTDIR} . "/solver/bin/" . $searchname;
+	}
 	if ( $$regmergefileref eq "" ) { installer::exiter::exit_program("ERROR: Could not find file $searchname for merging the StarRegistry!", "get_regmerge_file"); }
 	
 	return $$regmergefileref;
