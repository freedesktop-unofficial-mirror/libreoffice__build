diff -purN qadevOOo.old/runner/convwatch/OfficePrint.java qadevOOo/runner/convwatch/OfficePrint.java
--- qadevOOo.old/runner/convwatch/OfficePrint.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/convwatch/OfficePrint.java	2010-09-07 13:52:50.000000000 +0200
@@ -118,7 +118,7 @@ public class OfficePrint {
      */
     static String getDocumentType( XComponent _aDoc )
         {
-            XModel xModel =  UnoRuntime.queryInterface( XModel.class, _aDoc);
+            XModel xModel =  (XModel) UnoRuntime.queryInterface( XModel.class, _aDoc);
             PropertyValue[] aArgs = xModel.getArgs();
             for (int i=0;i<aArgs.length;i++)
             {
@@ -161,7 +161,7 @@ public class OfficePrint {
                     return null;
                 }
                 Object oDsk = _aGTA.getMultiServiceFactory().createInstance("com.sun.star.frame.Desktop");
-                XDesktop aDesktop = UnoRuntime.queryInterface(XDesktop.class, oDsk);
+                XDesktop aDesktop = (XDesktop) UnoRuntime.queryInterface(XDesktop.class, oDsk);
                 
                 if (aDesktop != null)
                 {
@@ -175,7 +175,7 @@ public class OfficePrint {
                     // set here the loadComponentFromURL() properties
                     // at the moment only 'Hidden' is set, so no window is opened at work
 
-                    ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+                    ArrayList aPropertyList = new ArrayList();
 
                     // check which properties should set and count it.
                     // if (_aGTA.isHidden())
@@ -212,7 +212,7 @@ public class OfficePrint {
                     GlobalLogWriter.get().println(DateHelper.getDateTimeForHumanreadableLog() + " Load document");
                     // GlobalLogWriter.get().flush();
                     
-                    XComponentLoader aCompLoader = UnoRuntime.queryInterface( XComponentLoader.class, aDesktop);
+                    XComponentLoader aCompLoader = (XComponentLoader) UnoRuntime.queryInterface( XComponentLoader.class, aDesktop);
                     
                     // XComponent aDoc = null;
 
@@ -254,11 +254,11 @@ public class OfficePrint {
     static boolean exportToPDF(XComponent _xComponent, String _sDestinationName)
         {
             XServiceInfo xServiceInfo =
-                 UnoRuntime.queryInterface(
+                 (XServiceInfo) UnoRuntime.queryInterface(
                     XServiceInfo.class, _xComponent
                     );
             
-            ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+            ArrayList aPropertyList = new ArrayList();
             PropertyValue aFiltername = new PropertyValue();
             aFiltername.Name = "FilterName";
             aFiltername.Value = getFilterName_forPDF(xServiceInfo);
@@ -269,7 +269,7 @@ public class OfficePrint {
             try
             {
                 XStorable store =
-                     UnoRuntime.queryInterface(
+                     (XStorable) UnoRuntime.queryInterface(
                         XStorable.class, _xComponent
                         );
                 store.storeToURL(_sDestinationName, PropertyHelper.createPropertyValueArrayFormArrayList(aPropertyList));
@@ -539,7 +539,7 @@ public class OfficePrint {
                     if (_aGTA.isStoreAllowed())
                     {
                         // store the document in an other directory
-                        XStorable aStorable = UnoRuntime.queryInterface( XStorable.class, _aDoc);
+                        XStorable aStorable = (XStorable) UnoRuntime.queryInterface( XStorable.class, _aDoc);
                         if (aStorable != null)
                         {
                             PropertyValue [] szEmptyArgs = new PropertyValue [0];
@@ -578,7 +578,7 @@ public class OfficePrint {
                 // Change Pagesettings to DIN A4
                 
                 GlobalLogWriter.get().println(DateHelper.getDateTimeForHumanreadableLog() + " Print document.");
-                XPrintable aPrintable =  UnoRuntime.queryInterface( XPrintable.class, _aDoc);
+                XPrintable aPrintable = (XPrintable) UnoRuntime.queryInterface( XPrintable.class, _aDoc);
                 if (aPrintable != null)
                 {
                     // System.out.println("  Set PaperFormat to DIN A4");
@@ -602,7 +602,7 @@ public class OfficePrint {
                     {
                         if (_aGTA.getPrinterName() != null)
                         {
-                            ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+                            ArrayList aPropertyList = new ArrayList();
                             // PropertyValue [] aPrintProps = new PropertyValue[1];
                             PropertyValue Arg = new PropertyValue();
                             Arg.Name = "Name";
@@ -626,20 +626,20 @@ public class OfficePrint {
                     // int nPropsCount = 0;
                     
                     // If we are a SpreadSheet (calc), we need to set PrintAllSheets property to 'true'
-                    XServiceInfo xServiceInfo = UnoRuntime.queryInterface( XServiceInfo.class, _aDoc );
+                    XServiceInfo xServiceInfo = (XServiceInfo) UnoRuntime.queryInterface( XServiceInfo.class, _aDoc );
                     if ( xServiceInfo.supportsService( "com.sun.star.sheet.SpreadsheetDocument" ) )
                     {
                         XMultiServiceFactory xMSF = _aGTA.getMultiServiceFactory();
                         Object aSettings = xMSF.createInstance( "com.sun.star.sheet.GlobalSheetSettings" );
                         if (aSettings != null)
                         {
-                            XPropertySet xPropSet =  UnoRuntime.queryInterface( XPropertySet.class, aSettings );
+                            XPropertySet xPropSet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, aSettings );
                             xPropSet.setPropertyValue( "PrintAllSheets", new Boolean( true ) );
                             GlobalLogWriter.get().println("PrintAllSheets := true");
                         }
                     }
                     
-                    ArrayList<PropertyValue> aPrintProps = new ArrayList<PropertyValue>();
+                    ArrayList aPrintProps = new ArrayList();
                     // GlobalLogWriter.get().println("Property FileName:=" + _sPrintFileURL);
 
                     // PropertyValue [] aPrintProps = new PropertyValue[nProperties];
@@ -948,7 +948,7 @@ public class OfficePrint {
             try
             {
                 Object oObj = _xMSF.createInstance("com.sun.star.document.TypeDetection");
-                aTypeDetection = UnoRuntime.queryInterface(XTypeDetection.class, oObj);
+                aTypeDetection = (XTypeDetection) UnoRuntime.queryInterface(XTypeDetection.class, oObj);
             }
             catch(com.sun.star.uno.Exception e)
             {
@@ -990,7 +990,7 @@ public class OfficePrint {
             }
             if (aObj != null)
             {
-                XNameAccess aNameAccess = UnoRuntime.queryInterface(XNameAccess.class, aObj);
+                XNameAccess aNameAccess = (XNameAccess) UnoRuntime.queryInterface(XNameAccess.class, aObj);
                 if (aNameAccess != null)
                 {
                     
@@ -1081,7 +1081,7 @@ public class OfficePrint {
             }
             if (aObj != null)
             {
-                XNameAccess aNameAccess = UnoRuntime.queryInterface(XNameAccess.class, aObj);
+                XNameAccess aNameAccess = (XNameAccess) UnoRuntime.queryInterface(XNameAccess.class, aObj);
                 if (aNameAccess != null)
                 {                    
                     if (! aNameAccess.hasByName(_sFilterName))
@@ -1149,7 +1149,7 @@ public class OfficePrint {
             try
             {
                 Object oObj = _xMSF.createInstance("com.sun.star.document.TypeDetection");
-                aTypeDetection =UnoRuntime.queryInterface(XTypeDetection.class, oObj);
+                aTypeDetection = (XTypeDetection) UnoRuntime.queryInterface(XTypeDetection.class, oObj);
             }
             catch(com.sun.star.uno.Exception e)
             {
@@ -1158,7 +1158,7 @@ public class OfficePrint {
             }
             if (aTypeDetection != null)
             {
-                XNameAccess aNameAccess = UnoRuntime.queryInterface(XNameAccess.class, aTypeDetection);
+                XNameAccess aNameAccess = (XNameAccess) UnoRuntime.queryInterface(XNameAccess.class, aTypeDetection);
                 if (aNameAccess != null)
                 {
                     
@@ -1257,12 +1257,12 @@ public class OfficePrint {
 //  TODO: Do we need to wait?
             TimeHelper.waitInSeconds(1, "wait after loadFromURL.");
 
-            XServiceInfo xServiceInfo = UnoRuntime.queryInterface( XServiceInfo.class, aDoc );
+            XServiceInfo xServiceInfo = (XServiceInfo) UnoRuntime.queryInterface( XServiceInfo.class, aDoc );
             // String sFilter = getFilterName_forExcel(xServiceInfo);
             // System.out.println("Filter is " + sFilter);
 
             // store the document in an other directory
-            XStorable xStorable = UnoRuntime.queryInterface( XStorable.class, aDoc);
+            XStorable xStorable = (XStorable) UnoRuntime.queryInterface( XStorable.class, aDoc);
             if (xStorable == null)
             {
                 GlobalLogWriter.get().println("com.sun.star.frame.XStorable is null");
@@ -1281,7 +1281,7 @@ public class OfficePrint {
             // initialize PropertyArray
             // PropertyValue [] aStoreProps = new PropertyValue[ nPropertyCount ];
             // int nPropertyIndex = 0;
-            ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+            ArrayList aPropertyList = new ArrayList();
             
             String sExtension = "";
 
diff -purN qadevOOo.old/runner/graphical/DirectoryHelper.java qadevOOo/runner/graphical/DirectoryHelper.java
--- qadevOOo.old/runner/graphical/DirectoryHelper.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/graphical/DirectoryHelper.java	2010-09-07 13:52:50.000000000 +0200
@@ -38,7 +38,7 @@ import java.util.ArrayList;
  */
 public class DirectoryHelper
 {    
-    ArrayList<String> m_aFileList = new ArrayList<String>();
+    ArrayList m_aFileList = new ArrayList();
     boolean m_bRecursiveIsAllowed = true;
 
     void setRecursiveIsAllowed(boolean _bValue)
diff -purN qadevOOo.old/runner/graphical/EnhancedComplexTestCase.java qadevOOo/runner/graphical/EnhancedComplexTestCase.java
--- qadevOOo.old/runner/graphical/EnhancedComplexTestCase.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/graphical/EnhancedComplexTestCase.java	2010-09-07 13:52:50.000000000 +0200
@@ -233,7 +233,7 @@ private void callEntry(String _sEntry, P
             {
                 // special case for odb files
                 int nFileCount = aIniFile.getIntValue(_sBasename, "reportcount", 0);
-                ArrayList<String> aList = new ArrayList<String>();
+                ArrayList aList = new ArrayList();
                 for (int i=0;i<nFileCount;i++)
                 {
                     String sValue = aIniFile.getValue(_sBasename, "report" + i);
@@ -253,7 +253,7 @@ private void callEntry(String _sEntry, P
                 // get the bad status and store it into the 
                 for (int i=0;i<aList.size();i++)
                 {
-                    String sEntry = aList.get(i);
+                    String sEntry = (String) aList.get(i);
                     callEntry(sEntry, _aParam);
                     
                     // we want to know the current status of the run through
@@ -447,7 +447,7 @@ private void callEntry(String _sEntry, P
                     {
                         // special case for odb files
                         int nFileCount = aIniFile.getIntValue(sBasename, "reportcount", 0);
-                        ArrayList<String> aList = new ArrayList<String>();
+                        ArrayList aList = new ArrayList();
                         for (int i=0;i<nFileCount;i++)
                         {
                             String sValue = aIniFile.getValue(sBasename, "report" + i);
@@ -467,7 +467,7 @@ private void callEntry(String _sEntry, P
         
                             for (int i=0;i<aList.size();i++)
                             {
-                                String sPSFile = aList.get(i);
+                                String sPSFile = (String) aList.get(i);
 
                                 // TODO: this information has to come out of the ini files
                                 String sStatusRunThrough = "";
diff -purN qadevOOo.old/runner/graphical/IniFile.java qadevOOo/runner/graphical/IniFile.java
--- qadevOOo.old/runner/graphical/IniFile.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/graphical/IniFile.java	2010-09-07 13:52:50.000000000 +0200
@@ -44,7 +44,7 @@ public class IniFile implements Enumerat
      * Problem, if ini file changed why other write something difference, we don't realise this.
      */
     private String m_sFilename;
-    private ArrayList<String> m_aList;
+    private ArrayList m_aList;
     boolean m_bListContainUnsavedChanges = false;
     private int m_aEnumerationPos = 0;
 
@@ -76,10 +76,10 @@ public class IniFile implements Enumerat
             }
         }
 
-    private ArrayList<String> loadLines()
+    private ArrayList loadLines()
         {
             File aFile = new File(m_sFilename);
-            ArrayList<String> aLines = new ArrayList<String>();
+            ArrayList aLines = new ArrayList();
             if (!aFile.exists())
             {
                 // GlobalLogWriter.println("couldn't find file '" + m_sFilename + "', will be created.");
@@ -165,7 +165,7 @@ public class IniFile implements Enumerat
 
     private String getItem(int i)
         {
-            return m_aList.get(i);
+            return (String) m_aList.get(i);
         }
 
     private String buildSectionName(String _sSectionName)
@@ -642,7 +642,7 @@ public class IniFile implements Enumerat
             {
                 while (i < m_aList.size())
                 {
-                    String sLine =  m_aList.get(i);
+                    String sLine = (String) m_aList.get(i);
                     if (sLine.startsWith("["))
                     {
                         return i;
@@ -662,7 +662,7 @@ public class IniFile implements Enumerat
             int nLineWithSection = findNextSection(m_aEnumerationPos);
             if (nLineWithSection != -1)
             {
-                String sSection =  m_aList.get(nLineWithSection);
+                String sSection = (String) m_aList.get(nLineWithSection);
                 m_aEnumerationPos = findNextSection(nLineWithSection + 1);
                 sSection = sectionToString(sSection);
                 return sSection;
diff -purN qadevOOo.old/runner/graphical/JPEGComparator.java qadevOOo/runner/graphical/JPEGComparator.java
--- qadevOOo.old/runner/graphical/JPEGComparator.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/graphical/JPEGComparator.java	2010-09-07 13:52:32.000000000 +0200
@@ -255,7 +255,7 @@ public class JPEGComparator extends Enha
         int good = 0;
         int bad = 0;
         int ugly = 0;
-        int ok_status = 1; // 1=ok 2=bad 3=ugly
+        Integer ok_status = new Integer(1); // 1=ok 2=bad 3=ugly
 
         IniFile aResultIniFile = new IniFile(sResultIniFile);
         int nPages = aResultIniFile.getIntValue("global", "pages", 0);
@@ -270,12 +270,12 @@ public class JPEGComparator extends Enha
             else if (nPercent <= 5)
             {
                 bad++;
-                ok_status = 2;
+                ok_status = new Integer(2);
             }
             else
             {
                 ugly++;
-                ok_status = 3;
+                ok_status = new Integer(3);
             }
         }
 
diff -purN qadevOOo.old/runner/graphical/MSOfficePostscriptCreator.java qadevOOo/runner/graphical/MSOfficePostscriptCreator.java
--- qadevOOo.old/runner/graphical/MSOfficePostscriptCreator.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/graphical/MSOfficePostscriptCreator.java	2010-09-07 13:52:50.000000000 +0200
@@ -191,7 +191,7 @@ public class MSOfficePostscriptCreator i
         {
             String sDocumentSuffix = FileHelper.getSuffix(_sInputFile);
             String sFilterName = _aGTA.getExportFilterName();
-            ArrayList<String> aStartCommand = new ArrayList<String>();
+            ArrayList aStartCommand = new ArrayList();
             if (isWordDocument(sDocumentSuffix))
             {
                 aStartCommand = createWordStoreHelper();
@@ -263,7 +263,7 @@ public class MSOfficePostscriptCreator i
 
             setPrinterName(_aGTA.getPrinterName());
 
-            ArrayList<String> aStartCommand = new ArrayList<String>();
+            ArrayList aStartCommand = new ArrayList();
             if (isWordDocument(sDocumentSuffix))
             {
                 aStartCommand = createWordPrintHelper();
@@ -379,7 +379,7 @@ public class MSOfficePostscriptCreator i
         return sPerlExe;
     }
 
-    ArrayList<String> createWordPrintHelper() throws java.io.IOException
+    ArrayList createWordPrintHelper() throws java.io.IOException
         {
             // create a program in tmp file
             String sTmpPath = util.utils.getUsersTempDir();
@@ -387,7 +387,7 @@ public class MSOfficePostscriptCreator i
 
             String sPrintViaWord = "printViaWord.pl";
 
-            ArrayList<String> aList = searchLocalFile(sPrintViaWord);
+            ArrayList aList = searchLocalFile(sPrintViaWord);
             if (aList.isEmpty() == false)
             {
                 return aList;
@@ -483,11 +483,11 @@ public class MSOfficePostscriptCreator i
 
     // TODO: Maybe give a possibility to say where search the script from outside
 
-    ArrayList<String> searchLocalFile(String _sScriptName)
+    ArrayList searchLocalFile(String _sScriptName)
         {
             String userdir = System.getProperty("user.dir");
 
-            ArrayList<String> aList = new ArrayList<String>();
+            ArrayList aList = new ArrayList();
             String sFileName = FileHelper.appendPath(userdir, _sScriptName);
             File aPerlScript = new File(sFileName);
             if (FileHelper.isDebugEnabled())
@@ -512,7 +512,7 @@ public class MSOfficePostscriptCreator i
             return aList;
         }
     
-    ArrayList<String> createWordStoreHelper() throws java.io.IOException
+    ArrayList createWordStoreHelper() throws java.io.IOException
         {
             // create a program in tmp file
             String sTmpPath = util.utils.getUsersTempDir();
@@ -521,7 +521,7 @@ public class MSOfficePostscriptCreator i
             // ArrayList aList = new ArrayList();
             String sSaveViaWord = "saveViaWord.pl";
 
-            ArrayList<String> aList = searchLocalFile(sSaveViaWord);
+            ArrayList aList = searchLocalFile(sSaveViaWord);
             if (aList.isEmpty() == false)
             {
                 return aList;
@@ -594,7 +594,7 @@ public class MSOfficePostscriptCreator i
         }
     
 
-    ArrayList<String> createExcelPrintHelper() throws java.io.IOException
+    ArrayList createExcelPrintHelper() throws java.io.IOException
         {
             // create a program in tmp file
             String sTmpPath = util.utils.getUsersTempDir();
@@ -602,7 +602,7 @@ public class MSOfficePostscriptCreator i
 
             String sPrintViaExcel = "printViaExcel.pl";
 
-            ArrayList<String> aList = searchLocalFile(sPrintViaExcel);
+            ArrayList aList = searchLocalFile(sPrintViaExcel);
             if (aList.isEmpty() == false)
             {
                 return aList;
@@ -697,7 +697,7 @@ public class MSOfficePostscriptCreator i
             return aList;
         }
 
-    ArrayList<String> createExcelStoreHelper() throws java.io.IOException
+    ArrayList createExcelStoreHelper() throws java.io.IOException
         {
             // create a program in tmp file
             String sTmpPath = util.utils.getUsersTempDir();
@@ -705,7 +705,7 @@ public class MSOfficePostscriptCreator i
 
             String sSaveViaExcel = "saveViaExcel.pl";
 
-            ArrayList<String> aList = searchLocalFile(sSaveViaExcel);
+            ArrayList aList = searchLocalFile(sSaveViaExcel);
             if (aList.isEmpty() == false)
             {
                 return aList;
@@ -786,7 +786,7 @@ public class MSOfficePostscriptCreator i
             return aList;
         }
     
-    ArrayList<String> createPowerPointPrintHelper() throws java.io.IOException
+    ArrayList createPowerPointPrintHelper() throws java.io.IOException
         {
             // create a program in tmp file
             String sTmpPath = util.utils.getUsersTempDir();
@@ -794,7 +794,7 @@ public class MSOfficePostscriptCreator i
 
             String sPrintViaPowerPoint = "printViaPowerPoint.pl";
             
-            ArrayList<String> aList = searchLocalFile(sPrintViaPowerPoint);
+            ArrayList aList = searchLocalFile(sPrintViaPowerPoint);
             if (aList.isEmpty() == false)
             {
                 return aList;
diff -purN qadevOOo.old/runner/graphical/OpenOfficeDatabaseReportExtractor.java qadevOOo/runner/graphical/OpenOfficeDatabaseReportExtractor.java
--- qadevOOo.old/runner/graphical/OpenOfficeDatabaseReportExtractor.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/graphical/OpenOfficeDatabaseReportExtractor.java	2010-09-07 13:52:50.000000000 +0200
@@ -64,7 +64,7 @@ class PropertySetHelper
     XPropertySet m_xPropertySet;
     public PropertySetHelper(Object _aObj)
         {
-            m_xPropertySet = UnoRuntime.queryInterface(XPropertySet.class, _aObj);
+            m_xPropertySet = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class, _aObj);
         }
     
     /**
@@ -115,7 +115,7 @@ public class OpenOfficeDatabaseReportExt
                 try 
                 {
                     XInterface xInterface = (XInterface) getMultiServiceFactory().createInstance( "com.sun.star.frame.Desktop" );
-                    m_xDesktop =  UnoRuntime.queryInterface(XDesktop.class, xInterface);
+                    m_xDesktop = (XDesktop) UnoRuntime.queryInterface(XDesktop.class, xInterface);
                 }
                 catch (com.sun.star.uno.Exception e) 
                 {
@@ -196,7 +196,7 @@ public class OpenOfficeDatabaseReportExt
      * @return
      */
        
-    public ArrayList<String> load(String _sDocument /*, int _nType*/)
+    public ArrayList load(String _sDocument /*, int _nType*/)
         {
             // We need to copy the database file to a place where we have write access, NEVER use the docpool for this
             String sOutputPath = m_aParameterHelper.getOutputPath();
@@ -213,7 +213,7 @@ public class OpenOfficeDatabaseReportExt
             String sFileURL = URLHelper.getFileURLFromSystemPath(sDestinationFile);
             GlobalLogWriter.println("File URL: " + sFileURL);
             
-            ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+            ArrayList aPropertyList = new ArrayList();
 
             // FYI: it is not allowed to open the document read only
 //            PropertyValue aReadOnly = new PropertyValue(); // always overwrite already exist files
@@ -234,7 +234,7 @@ public class OpenOfficeDatabaseReportExt
 // 	reportContainer = oDBDoc.getReportDocuments()
 //     report = reportContainer.loadComponentFromURL("Report40","",0,args)
                     
-            ArrayList<String> aList = null;
+            ArrayList aList = null;
             try
             {
 //                XInterface x = (XInterface)getMultiServiceFactory().createInstance("com.sun.star.sdb.DatabaseContext");
@@ -251,18 +251,18 @@ public class OpenOfficeDatabaseReportExt
 //                Object aDatabaseDocument = aHelper.getPropertyValueAsObject("DatabaseDocument");
 //                XOfficeDatabaseDocument xOfficeDBDoc = xDataSource.getDatabaseDocument();
                 
-                XOfficeDatabaseDocument xOfficeDBDoc = UnoRuntime.queryInterface(XOfficeDatabaseDocument.class, xDocComponent);
+                XOfficeDatabaseDocument xOfficeDBDoc = (XOfficeDatabaseDocument) UnoRuntime.queryInterface(XOfficeDatabaseDocument.class, xDocComponent);
                 
 //                XOfficeDatabaseDocument xOfficeDBDoc = (XOfficeDatabaseDocument)UnoRuntime.queryInterface(XOfficeDatabaseDocument.class, xDataSource);
                 assure("can't access DatabaseDocument", xOfficeDBDoc != null);
 //                GlobalLogWriter.println("2");
                 
-                XModel xDBSource = UnoRuntime.queryInterface(XModel.class, xOfficeDBDoc);
+                XModel xDBSource = (XModel) UnoRuntime.queryInterface(XModel.class, xOfficeDBDoc);
                 Object aController = xDBSource.getCurrentController();
                 assure("Controller of xOfficeDatabaseDocument is empty!", aController != null);
 //                GlobalLogWriter.println("3");
                 
-                XDatabaseDocumentUI aDBDocUI = UnoRuntime.queryInterface(XDatabaseDocumentUI.class, aController);
+                XDatabaseDocumentUI aDBDocUI = (XDatabaseDocumentUI) UnoRuntime.queryInterface(XDatabaseDocumentUI.class, aController);
                 aDBDocUI.connect();
                 boolean isConnect = aDBDocUI.isConnected();
                 if (isConnect)
@@ -276,7 +276,7 @@ public class OpenOfficeDatabaseReportExt
                 
                 // aHelper = new PropertySetHelper(aController);              
                 
-                XReportDocumentsSupplier xSupplier = UnoRuntime.queryInterface(XReportDocumentsSupplier.class, xOfficeDBDoc);
+                XReportDocumentsSupplier xSupplier = (XReportDocumentsSupplier) UnoRuntime.queryInterface(XReportDocumentsSupplier.class, xOfficeDBDoc);
                 XNameAccess xNameAccess = xSupplier.getReportDocuments();
                 assure("xOfficeDatabaseDocument returns no Report Document", xNameAccess != null);
 //                     GlobalLogWriter.println("5");
@@ -288,7 +288,7 @@ public class OpenOfficeDatabaseReportExt
                 assure("ActiveConnection is empty", aActiveConnectionObj != null);
 //                     GlobalLogWriter.println("5");
 
-                ArrayList<PropertyValue> aPropertyList2 = new ArrayList<PropertyValue>();
+                ArrayList aPropertyList2 = new ArrayList();
                 
                 PropertyValue aActiveConnection = new PropertyValue();
                 aActiveConnection.Name = "ActiveConnection";
@@ -363,9 +363,9 @@ public class OpenOfficeDatabaseReportExt
             }
         }
     
-    private ArrayList<String> loadAndStoreReports(XNameAccess _xNameAccess, ArrayList<PropertyValue> _aPropertyList /*, int _nType*/ )
+    private ArrayList loadAndStoreReports(XNameAccess _xNameAccess, ArrayList _aPropertyList /*, int _nType*/ )
         {
-            ArrayList<String> aList = new ArrayList<String>();
+            ArrayList aList = new ArrayList();
             if (_xNameAccess != null)
             {
                 String[] sElementNames = _xNameAccess.getElementNames();
@@ -389,7 +389,7 @@ public class OpenOfficeDatabaseReportExt
     private String getFormatExtension(Object _xComponent /* int _nType*/ )
          {
              String sExtension;
-             XServiceInfo xServiceInfo =  UnoRuntime.queryInterface( XServiceInfo.class, _xComponent );
+             XServiceInfo xServiceInfo = (XServiceInfo) UnoRuntime.queryInterface( XServiceInfo.class, _xComponent );
              if ( xServiceInfo.supportsService( "com.sun.star.sheet.SpreadsheetDocument" ) )
              {
                  // calc
@@ -483,7 +483,7 @@ public class OpenOfficeDatabaseReportExt
 
             String sOutputURL = URLHelper.getFileURLFromSystemPath(sOutputPath);
 
-            ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>(); // set some properties for storeAsURL
+            ArrayList aPropertyList = new ArrayList(); // set some properties for storeAsURL
 
             // PropertyValue aFileFormat = new PropertyValue();
             // aFileFormat.Name = "FilterName";
@@ -496,7 +496,7 @@ public class OpenOfficeDatabaseReportExt
             aPropertyList.add(aOverwrite);
 
             // store the document in an other directory
-            XStorable aStorable = UnoRuntime.queryInterface( XStorable.class, _xComponent);
+            XStorable aStorable = (XStorable) UnoRuntime.queryInterface( XStorable.class, _xComponent);
             if (aStorable != null)
             {
                 GlobalLogWriter.println("store document as URL: '" + sOutputURL + "'");
@@ -517,7 +517,7 @@ public class OpenOfficeDatabaseReportExt
     private XComponent loadComponent(String _sName, Object _xComponent, ArrayList _aPropertyList)
         {
             XComponent xDocComponent = null;
-            XComponentLoader xComponentLoader =  UnoRuntime.queryInterface( XComponentLoader.class, _xComponent );
+            XComponentLoader xComponentLoader = (XComponentLoader) UnoRuntime.queryInterface( XComponentLoader.class, _xComponent );
 
             try
             {
@@ -544,7 +544,7 @@ public class OpenOfficeDatabaseReportExt
     private void closeComponent(XComponent _xDoc)
         {
             // Close the document
-            XCloseable xCloseable =  UnoRuntime.queryInterface(XCloseable.class, _xDoc);
+            XCloseable xCloseable = (XCloseable) UnoRuntime.queryInterface(XCloseable.class, _xDoc);
             try
             {
                 xCloseable.close(true);
diff -purN qadevOOo.old/runner/graphical/OpenOfficePostscriptCreator.java qadevOOo/runner/graphical/OpenOfficePostscriptCreator.java
--- qadevOOo.old/runner/graphical/OpenOfficePostscriptCreator.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/graphical/OpenOfficePostscriptCreator.java	2010-09-07 13:52:50.000000000 +0200
@@ -161,7 +161,7 @@ public class OpenOfficePostscriptCreator
      */
     private String getDocumentType( XComponent _aDoc )
         {
-            XModel xModel = UnoRuntime.queryInterface( XModel.class, _aDoc);
+            XModel xModel = (XModel) UnoRuntime.queryInterface( XModel.class, _aDoc);
             PropertyValue[] aArgs = xModel.getArgs();
             for (int i=0;i<aArgs.length;i++)
             {
@@ -201,7 +201,7 @@ public class OpenOfficePostscriptCreator
                     return null;
                 }
                 Object oDsk = _aGTA.getMultiServiceFactory().createInstance("com.sun.star.frame.Desktop");
-                XDesktop aDesktop = UnoRuntime.queryInterface(XDesktop.class, oDsk);
+                XDesktop aDesktop = (XDesktop) UnoRuntime.queryInterface(XDesktop.class, oDsk);
                 
                 if (aDesktop != null)
                 {
@@ -215,7 +215,7 @@ public class OpenOfficePostscriptCreator
                     // set here the loadComponentFromURL() properties
                     // at the moment only 'Hidden' is set, so no window is opened at work
 
-                    ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+                    ArrayList aPropertyList = new ArrayList();
 
                     // check which properties should set and count it.
                     // if (_aGTA.isHidden())
@@ -257,7 +257,7 @@ public class OpenOfficePostscriptCreator
                     GlobalLogWriter.println(DateHelper.getDateTimeForHumanreadableLog() + " Load document");
                     // GlobalLogWriter.flush();
                     
-                    XComponentLoader aCompLoader = UnoRuntime.queryInterface( XComponentLoader.class, aDesktop);
+                    XComponentLoader aCompLoader = (XComponentLoader) UnoRuntime.queryInterface( XComponentLoader.class, aDesktop);
                     
                     // XComponent aDoc = null;
 
@@ -300,11 +300,11 @@ public class OpenOfficePostscriptCreator
     private boolean exportToPDF(XComponent _xComponent, String _sDestinationName)
         {
             XServiceInfo xServiceInfo =
-                 UnoRuntime.queryInterface(
+                 (XServiceInfo) UnoRuntime.queryInterface(
                     XServiceInfo.class, _xComponent
                     );
             
-            ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+            ArrayList aPropertyList = new ArrayList();
             PropertyValue aFiltername = new PropertyValue();
             aFiltername.Name = "FilterName";
             aFiltername.Value = getFilterName_forPDF(xServiceInfo);
@@ -316,7 +316,7 @@ public class OpenOfficePostscriptCreator
             try
             {
                 XStorable store =
-                     UnoRuntime.queryInterface(
+                     (XStorable) UnoRuntime.queryInterface(
                         XStorable.class, _xComponent
                         );
                 store.storeToURL(_sDestinationName, PropertyHelper.createPropertyValueArrayFormArrayList(aPropertyList));
@@ -485,7 +485,7 @@ public class OpenOfficePostscriptCreator
                     if (isStoreAllowed())
                     {
                         // store the document in an other directory
-                        XStorable aStorable = UnoRuntime.queryInterface( XStorable.class, _aDoc);
+                        XStorable aStorable = (XStorable) UnoRuntime.queryInterface( XStorable.class, _aDoc);
                         if (aStorable != null)
                         {
                             PropertyValue [] szEmptyArgs = new PropertyValue [0];
@@ -505,7 +505,7 @@ public class OpenOfficePostscriptCreator
                             }
                             else
                             {
-                                XCloseable xClose = UnoRuntime.queryInterface(XCloseable.class, aDoc);
+                                XCloseable xClose = (XCloseable) UnoRuntime.queryInterface(XCloseable.class, aDoc);
                                 if (xClose != null)
                                 {
                                     xClose.close(true);
@@ -545,7 +545,7 @@ public class OpenOfficePostscriptCreator
                 // Change Pagesettings to DIN A4
                 
                 GlobalLogWriter.println(DateHelper.getDateTimeForHumanreadableLog() + " Print document.");
-                XPrintable aPrintable =  UnoRuntime.queryInterface( XPrintable.class, _aDoc);
+                XPrintable aPrintable = (XPrintable) UnoRuntime.queryInterface( XPrintable.class, _aDoc);
                 if (aPrintable != null)
                 {
                     // System.out.println("  Set PaperFormat to DIN A4");
@@ -569,7 +569,7 @@ public class OpenOfficePostscriptCreator
                     {
                         if (_aGTA.getPrinterName() != null)
                         {
-                            ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+                            ArrayList aPropertyList = new ArrayList();
                             // PropertyValue [] aPrintProps = new PropertyValue[1];
                             PropertyValue Arg = new PropertyValue();
                             Arg.Name = "Name";
@@ -593,20 +593,20 @@ public class OpenOfficePostscriptCreator
                     // int nPropsCount = 0;
                     
                     // If we are a SpreadSheet (calc), we need to set PrintAllSheets property to 'true'
-                    XServiceInfo xServiceInfo =  UnoRuntime.queryInterface( XServiceInfo.class, _aDoc );
+                    XServiceInfo xServiceInfo = (XServiceInfo) UnoRuntime.queryInterface( XServiceInfo.class, _aDoc );
                     if ( xServiceInfo.supportsService( "com.sun.star.sheet.SpreadsheetDocument" ) )
                     {
                         XMultiServiceFactory xMSF = _aGTA.getMultiServiceFactory();
                         Object aSettings = xMSF.createInstance( "com.sun.star.sheet.GlobalSheetSettings" );
                         if (aSettings != null)
                         {
-                            XPropertySet xPropSet = UnoRuntime.queryInterface( XPropertySet.class, aSettings );
+                            XPropertySet xPropSet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, aSettings );
                             xPropSet.setPropertyValue( "PrintAllSheets", new Boolean( true ) );
                             GlobalLogWriter.println("PrintAllSheets := true");
                         }
                     }
                     
-                    ArrayList<PropertyValue> aPrintProps = new ArrayList<PropertyValue>();
+                    ArrayList aPrintProps = new ArrayList();
                     // GlobalLogWriter.println("Property FileName:=" + _sPrintFileURL);
 
                     // PropertyValue [] aPrintProps = new PropertyValue[nProperties];
@@ -912,7 +912,7 @@ public class OpenOfficePostscriptCreator
             try
             {
                 Object oObj = _xMSF.createInstance("com.sun.star.document.TypeDetection");
-                aTypeDetection = UnoRuntime.queryInterface(XTypeDetection.class, oObj);
+                aTypeDetection = (XTypeDetection) UnoRuntime.queryInterface(XTypeDetection.class, oObj);
             }
             catch(com.sun.star.uno.Exception e)
             {
@@ -954,7 +954,7 @@ public class OpenOfficePostscriptCreator
             }
             if (aObj != null)
             {
-                XNameAccess aNameAccess = UnoRuntime.queryInterface(XNameAccess.class, aObj);
+                XNameAccess aNameAccess = (XNameAccess) UnoRuntime.queryInterface(XNameAccess.class, aObj);
                 if (aNameAccess != null)
                 {
                     
@@ -1045,7 +1045,7 @@ public class OpenOfficePostscriptCreator
             }
             if (aObj != null)
             {
-                XNameAccess aNameAccess = UnoRuntime.queryInterface(XNameAccess.class, aObj);
+                XNameAccess aNameAccess = (XNameAccess) UnoRuntime.queryInterface(XNameAccess.class, aObj);
                 if (aNameAccess != null)
                 {                    
                     if (! aNameAccess.hasByName(_sFilterName))
@@ -1113,7 +1113,7 @@ public class OpenOfficePostscriptCreator
             try
             {
                 Object oObj = _xMSF.createInstance("com.sun.star.document.TypeDetection");
-                aTypeDetection = UnoRuntime.queryInterface(XTypeDetection.class, oObj);
+                aTypeDetection = (XTypeDetection) UnoRuntime.queryInterface(XTypeDetection.class, oObj);
             }
             catch(com.sun.star.uno.Exception e)
             {
@@ -1122,7 +1122,7 @@ public class OpenOfficePostscriptCreator
             }
             if (aTypeDetection != null)
             {
-                XNameAccess aNameAccess = UnoRuntime.queryInterface(XNameAccess.class, aTypeDetection);
+                XNameAccess aNameAccess = (XNameAccess) UnoRuntime.queryInterface(XNameAccess.class, aTypeDetection);
                 if (aNameAccess != null)
                 {
                     
@@ -1221,12 +1221,12 @@ public class OpenOfficePostscriptCreator
 //  TODO: Do we need to wait?
 //            TimeHelper.waitInSeconds(1, "wait after loadFromURL.");
 
-            XServiceInfo xServiceInfo =  UnoRuntime.queryInterface( XServiceInfo.class, aDoc );
+            XServiceInfo xServiceInfo = (XServiceInfo) UnoRuntime.queryInterface( XServiceInfo.class, aDoc );
             // String sFilter = getFilterName_forExcel(xServiceInfo);
             // System.out.println("Filter is " + sFilter);
 
             // store the document in an other directory
-            XStorable xStorable =  UnoRuntime.queryInterface( XStorable.class, aDoc);
+            XStorable xStorable = (XStorable) UnoRuntime.queryInterface( XStorable.class, aDoc);
             if (xStorable == null)
             {
                 GlobalLogWriter.println("com.sun.star.frame.XStorable is null");
@@ -1245,7 +1245,7 @@ public class OpenOfficePostscriptCreator
             // initialize PropertyArray
             // PropertyValue [] aStoreProps = new PropertyValue[ nPropertyCount ];
             // int nPropertyIndex = 0;
-            ArrayList<PropertyValue> aPropertyList = new ArrayList<PropertyValue>();
+            ArrayList aPropertyList = new ArrayList();
             
             String sExtension = "";
 
diff -purN qadevOOo.old/runner/graphical/PostscriptCreator.java qadevOOo/runner/graphical/PostscriptCreator.java
--- qadevOOo.old/runner/graphical/PostscriptCreator.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/graphical/PostscriptCreator.java	2010-09-07 13:52:32.000000000 +0200
@@ -51,7 +51,7 @@ public class PostscriptCreator extends E
         GlobalLogWriter.set(log);
         ParameterHelper aParam = new ParameterHelper(param);
         
-        param.put(util.PropertyName.OFFICE_CLOSE_TIME_OUT, 2000);
+        param.put(util.PropertyName.OFFICE_CLOSE_TIME_OUT, new Integer(2000));
         // run through all documents found in Inputpath
         foreachDocumentinInputPath(aParam);
     }
diff -purN qadevOOo.old/runner/helper/CwsDataExchangeImpl.java qadevOOo/runner/helper/CwsDataExchangeImpl.java
--- qadevOOo.old/runner/helper/CwsDataExchangeImpl.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/helper/CwsDataExchangeImpl.java	2010-09-07 13:52:32.000000000 +0200
@@ -84,7 +84,7 @@ public class CwsDataExchangeImpl impleme
 
         final String[] outs = procHdl.getOutputText().split("\n");
 
-        final ArrayList<String> moduleNames = new ArrayList<String>();
+        final ArrayList moduleNames = new ArrayList();
         boolean bStart = false;
         for (int i = 0; i < outs.length; i++)
         {
diff -purN qadevOOo.old/runner/helper/OfficeProvider.java qadevOOo/runner/helper/OfficeProvider.java
--- qadevOOo.old/runner/helper/OfficeProvider.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/helper/OfficeProvider.java	2010-09-07 13:52:50.000000000 +0200
@@ -130,7 +130,7 @@ public class OfficeProvider implements A
 
             try
             {
-                desk = UnoRuntime.queryInterface(XDesktop.class, msf.createInstance("com.sun.star.frame.Desktop"));
+                desk = (XDesktop) UnoRuntime.queryInterface(XDesktop.class, msf.createInstance("com.sun.star.frame.Desktop"));
             }
             catch (com.sun.star.uno.Exception ue)
             {
@@ -347,7 +347,7 @@ public class OfficeProvider implements A
         // create a connector, so that it can contact the office
 //        XUnoUrlResolver urlResolver = UnoUrlResolver.create(xcomponentcontext);
         final Object xUrlResolver = xLocalServiceManager.createInstanceWithContext("com.sun.star.bridge.UnoUrlResolver", xcomponentcontext);
-        final XUnoUrlResolver urlResolver = UnoRuntime.queryInterface(XUnoUrlResolver.class, xUrlResolver);
+        final XUnoUrlResolver urlResolver = (XUnoUrlResolver) UnoRuntime.queryInterface(XUnoUrlResolver.class, xUrlResolver);
 
         final Object rInitialObject = urlResolver.resolve(connectStr);
 
@@ -358,7 +358,7 @@ public class OfficeProvider implements A
             debug = true;
             dbg("resolved url");
 
-            xMSF = UnoRuntime.queryInterface(XMultiServiceFactory.class, rInitialObject);
+            xMSF = (XMultiServiceFactory) UnoRuntime.queryInterface(XMultiServiceFactory.class, rInitialObject);
         }
 
         return xMSF;
@@ -476,20 +476,22 @@ public class OfficeProvider implements A
         {
 
             // disable QuickStarter
-            try
-            {
-                Object quickStarter = msf.createInstance("com.sun.star.office.Quickstart");
-                XFastPropertySet fps = UnoRuntime.queryInterface(XFastPropertySet.class, quickStarter);
-                fps.setFastPropertyValue(0, false);
-            }
-            catch (com.sun.star.uno.Exception ex)
-            {
-                dbg("ERROR: Could not disable QuickStarter: " + ex.toString());
-            }
+            // can't be compiled with Sun Java 1.4
+            // anyway, we do not have enabled the quickstarter by default
+//            try
+//            {
+//                Object quickStarter = msf.createInstance("com.sun.star.office.Quickstart");
+//                XFastPropertySet fps = UnoRuntime.queryInterface(XFastPropertySet.class, quickStarter);
+//                fps.setFastPropertyValue(0, false);
+//            }
+//            catch (com.sun.star.uno.Exception ex)
+//            {
+//                dbg("ERROR: Could not disable QuickStarter: " + ex.toString());
+//            }
 
             try
             {
-                desk = UnoRuntime.queryInterface(XDesktop.class, msf.createInstance("com.sun.star.frame.Desktop"));
+                desk = (XDesktop) UnoRuntime.queryInterface(XDesktop.class, msf.createInstance("com.sun.star.frame.Desktop"));
                 msf = null;
 
                 if (desk != null)
@@ -608,7 +610,7 @@ public class OfficeProvider implements A
         {
             while (compEnum.hasMoreElements())
             {
-                final XCloseable closer = UnoRuntime.queryInterface(XCloseable.class, compEnum.nextElement());
+                final XCloseable closer = (XCloseable) UnoRuntime.queryInterface(XCloseable.class, compEnum.nextElement());
 
                 if (closer != null)
                 {
@@ -648,7 +650,7 @@ public class OfficeProvider implements A
 
         if (xPathSubst != null)
         {
-            return UnoRuntime.queryInterface(XStringSubstitution.class, xPathSubst);
+            return (XStringSubstitution) UnoRuntime.queryInterface(XStringSubstitution.class, xPathSubst);
         }
         else
         {
@@ -779,7 +781,10 @@ public class OfficeProvider implements A
             this.ow = ow;
         }
 
-        @Override
+        // @Override is optional; It just helps the compiler to catch errors, see. 
+        // http://java.sun.com/docs/books/tutorial/java/javaOO/annotations.html. 
+        // We will disable to to be able to compile with JRE 1.4. 
+        // @Override
         public void run()
         {
             System.out.println(utils.getDateTime() + "OfficeProvider:Owp: start ");
diff -purN qadevOOo.old/runner/org/openoffice/Runner.java qadevOOo/runner/org/openoffice/Runner.java
--- qadevOOo.old/runner/org/openoffice/Runner.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/org/openoffice/Runner.java	2010-09-07 13:52:50.000000000 +0200
@@ -182,7 +182,7 @@ public class Runner
         }
     }
 
-    public static boolean run(String... args)
+    public static boolean run(String[] args)
     {
         System.out.println("OOoRunner Main() version from 20100323 (yyyymmdd)");
 
diff -purN qadevOOo.old/runner/util/AccessibilityTools.java qadevOOo/runner/util/AccessibilityTools.java
--- qadevOOo.old/runner/util/AccessibilityTools.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/util/AccessibilityTools.java	2010-09-07 13:52:50.000000000 +0200
@@ -51,7 +51,7 @@ public class AccessibilityTools {
     }
     
     public static XAccessible getAccessibleObject(XInterface xObject) {
-        return UnoRuntime.queryInterface(XAccessible.class, xObject);
+        return (XAccessible) UnoRuntime.queryInterface(XAccessible.class, xObject);
     }
     
     public static XWindow getCurrentContainerWindow(XMultiServiceFactory msf,
diff -purN qadevOOo.old/runner/util/db/DataSource.java qadevOOo/runner/util/db/DataSource.java
--- qadevOOo.old/runner/util/db/DataSource.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/util/db/DataSource.java	2010-09-07 13:52:50.000000000 +0200
@@ -114,7 +114,7 @@ public class DataSource
         try
         {
             doing = "creating database context";
-            XNamingService dbContext = UnoRuntime.queryInterface( XNamingService.class,
+            XNamingService dbContext = (XNamingService) UnoRuntime.queryInterface( XNamingService.class,
                 m_orb.createInstance( "com.sun.star.sdb.DatabaseContext" ) );
 
             if ( _revokeIfRegistered )
diff -purN qadevOOo.old/runner/util/DesktopTools.java qadevOOo/runner/util/DesktopTools.java
--- qadevOOo.old/runner/util/DesktopTools.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/runner/util/DesktopTools.java	2010-09-07 13:52:32.000000000 +0200
@@ -479,7 +479,6 @@ public class DesktopTools
      * @param xModel
      * @deprecated
      */
-    @Deprecated
     public static void bringWindowToFromt(XModel xModel)
     {
         bringWindowToFront(xModel);
diff -purN qadevOOo.old/tests/java/ifc/awt/_XMessageBoxFactory.java qadevOOo/tests/java/ifc/awt/_XMessageBoxFactory.java
--- qadevOOo.old/tests/java/ifc/awt/_XMessageBoxFactory.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/ifc/awt/_XMessageBoxFactory.java	2010-09-07 13:52:50.000000000 +0200
@@ -60,7 +60,7 @@ public class _XMessageBoxFactory extends
             "The Message");
         final UITools tools = new UITools(
             (XMultiServiceFactory) tParam.getMSF(),
-            UnoRuntime.queryInterface(XWindow.class, mb));
+            (XWindow)UnoRuntime.queryInterface(XWindow.class, mb));
         final boolean[] done = new boolean[] { false };
         final boolean[] good = new boolean[] { false };
         XRequestCallback async = AsyncCallback.create(
diff -purN qadevOOo.old/tests/java/ifc/awt/_XToolkit.java qadevOOo/tests/java/ifc/awt/_XToolkit.java
--- qadevOOo.old/tests/java/ifc/awt/_XToolkit.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/ifc/awt/_XToolkit.java	2010-09-07 13:52:50.000000000 +0200
@@ -89,7 +89,7 @@ public class _XToolkit extends MultiMeth
             if (cWin == null) {
                 log.println("createWindow() create a NULL Object");
             } else {
-                UnoRuntime.queryInterface(XComponent.class, cWin).dispose();
+                ((XWindowPeer)UnoRuntime.queryInterface(XComponent.class, cWin)).dispose();
                 res = true;
             }
         } catch (com.sun.star.lang.IllegalArgumentException ex) {
@@ -114,8 +114,8 @@ public class _XToolkit extends MultiMeth
             if ( (cWins[0] == null) || (cWins[1] == null) ) {
                 log.println("createWindows() creates NULL Windows");
             } else {
-                UnoRuntime.queryInterface(XComponent.class, cWins[0]).dispose();
-                UnoRuntime.queryInterface(XComponent.class, cWins[1]).dispose();
+                ((XWindowPeer)UnoRuntime.queryInterface(XComponent.class, cWins[0])).dispose();
+                ((XWindowPeer)UnoRuntime.queryInterface(XComponent.class, cWins[1])).dispose();
                 res = true;
             }
         } catch (com.sun.star.lang.IllegalArgumentException ex) {
diff -purN qadevOOo.old/tests/java/ifc/beans/_XPropertySet.java qadevOOo/tests/java/ifc/beans/_XPropertySet.java
--- qadevOOo.old/tests/java/ifc/beans/_XPropertySet.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/ifc/beans/_XPropertySet.java	2010-09-07 13:52:50.000000000 +0200
@@ -105,9 +105,9 @@ public class _XPropertySet extends Multi
     * Constrained, Bound and Normal.
     */
     private final class PropsToTest {
-        Vector< String > constrained = new Vector< String >();
-        Vector< String > bound = new Vector< String >();
-        Vector< String > normal = new Vector< String >();
+        Vector constrained = new Vector();
+        Vector bound = new Vector();
+        Vector normal = new Vector();
     }
 
     private final PropsToTest PTT = new PropsToTest();
@@ -170,7 +170,7 @@ public class _XPropertySet extends Multi
         } else {
             boolean error = false;
             for (int i = 0; i < count; i++) {
-                String propertyName = PTT.bound.get(i);
+                String propertyName = (String)PTT.bound.get(i);
                 propertyChanged = false;
                 try {
                     oObj.addPropertyChangeListener(propertyName,PClistener);
@@ -231,7 +231,7 @@ public class _XPropertySet extends Multi
         } else {
             boolean error = false;
             for (int i = 0; i < count; i++) {
-                String propertyName = PTT.constrained.get(i);
+                String propertyName = (String)PTT.constrained.get(i);
                 vetoableChanged = false;
                 try {
                     oObj.addVetoableChangeListener(propertyName,VClistener);
@@ -295,7 +295,7 @@ public class _XPropertySet extends Multi
         } else {
             boolean error = false;
             for (int i = 0; i < count; i++) {
-                String propertyName = PTT.normal.get(i);
+                String propertyName = (String)PTT.normal.get(i);
                 try {
                     log.println("try to change value of property '" + propertyName + "'" );
                     gValue = oObj.getPropertyValue(propertyName);
@@ -385,7 +385,7 @@ public class _XPropertySet extends Multi
         } else {
             boolean error = false;
             for (int i = 0; i < count; i++) {
-                String propertyName = PTT.normal.get(i);
+                String propertyName = (String)PTT.normal.get(i);
                 boolean runOk = getSinglePropertyValue( propertyName );
                 if( !runOk )
                 {
@@ -423,7 +423,7 @@ public class _XPropertySet extends Multi
             
             //remove all listeners first
             for (int i = 0; i < count; i++) {
-                String propertyName = PTT.bound.get(i);
+                String propertyName = (String)PTT.bound.get(i);
                 try {
                     oObj.removePropertyChangeListener(propertyName,PClistener);
                 } catch (Exception e) {
@@ -435,7 +435,7 @@ public class _XPropertySet extends Multi
             
             boolean error = false;
             for (int i = 0; i < count; i++) {
-                String propertyName = PTT.bound.get(i);
+                String propertyName = (String)PTT.bound.get(i);
                 try {
                     propertyChanged = false;
                     oObj.addPropertyChangeListener(propertyName,PClistener);
@@ -499,7 +499,7 @@ public class _XPropertySet extends Multi
         
             //remove all listeners first
             for (int i = 0; i < count; i++) {
-                String propertyName = PTT.constrained.get(i);
+                String propertyName = (String)PTT.constrained.get(i);
                 try {
                     oObj.removeVetoableChangeListener(propertyName,VClistener);
                 } catch (Exception e) {
@@ -511,7 +511,7 @@ public class _XPropertySet extends Multi
             
             boolean error = false;
             for (int i = 0; i < count; i++) {
-                String propertyName = PTT.constrained.get(i);
+                String propertyName = (String)PTT.constrained.get(i);
                 vetoableChanged = false;
                 try {
                     oObj.addVetoableChangeListener(propertyName,VClistener);
diff -purN qadevOOo.old/tests/java/ifc/sdbc/_XWarningsSupplier.java qadevOOo/tests/java/ifc/sdbc/_XWarningsSupplier.java
--- qadevOOo.old/tests/java/ifc/sdbc/_XWarningsSupplier.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/ifc/sdbc/_XWarningsSupplier.java	2010-09-07 13:52:50.000000000 +0200
@@ -60,9 +60,9 @@ public class _XWarningsSupplier extends
     * Has OK status if the method return not empty value.
     */
     public void _getWarnings() {
-        final XRowUpdate rowUpdate = UnoRuntime.queryInterface(XRowUpdate.class, oObj);
-        final XResultSetUpdate resultSetUpdate = UnoRuntime.queryInterface(XResultSetUpdate.class, rowUpdate);
-        final XRow row = UnoRuntime.queryInterface(XRow.class, resultSetUpdate);
+        final XRowUpdate rowUpdate = (XRowUpdate) UnoRuntime.queryInterface(XRowUpdate.class, oObj);
+        final XResultSetUpdate resultSetUpdate = (XResultSetUpdate) UnoRuntime.queryInterface(XResultSetUpdate.class, rowUpdate);
+        final XRow row = (XRow) UnoRuntime.queryInterface(XRow.class, resultSetUpdate);
         if ( row == null)
             throw new StatusException(Status.failed("Test must be modified"));
 
diff -purN qadevOOo.old/tests/java/mod/_dbaccess/ConnectionLineAccessibility.java qadevOOo/tests/java/mod/_dbaccess/ConnectionLineAccessibility.java
--- qadevOOo.old/tests/java/mod/_dbaccess/ConnectionLineAccessibility.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_dbaccess/ConnectionLineAccessibility.java	2010-09-07 13:52:50.000000000 +0200
@@ -347,7 +347,7 @@ public class ConnectionLineAccessibility
         
         util.utils.shortWait(1000);
         
-        xWindow = UnoRuntime.queryInterface(XModel.class, QueryComponent).
+        xWindow = ((XModel)UnoRuntime.queryInterface(XModel.class, QueryComponent)).
             getCurrentController().getFrame().getContainerWindow();
         
         XAccessible xRoot = AccessibilityTools.getAccessibleObject(xWindow);
diff -purN qadevOOo.old/tests/java/mod/_dbaccess/JoinViewAccessibility.java qadevOOo/tests/java/mod/_dbaccess/JoinViewAccessibility.java
--- qadevOOo.old/tests/java/mod/_dbaccess/JoinViewAccessibility.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_dbaccess/JoinViewAccessibility.java	2010-09-07 13:52:50.000000000 +0200
@@ -326,7 +326,7 @@ public class JoinViewAccessibility exten
         
         QueryComponent = DesktopTools.loadDoc ((XMultiServiceFactory) Param.getMSF (),".component:DB/QueryDesign",loadProps);
         
-        xWindow = UnoRuntime.queryInterface(XModel.class, QueryComponent).
+        xWindow = ((XModel) UnoRuntime.queryInterface(XModel.class, QueryComponent)).
             getCurrentController().getFrame().getContainerWindow();
         
         XAccessible xRoot = AccessibilityTools.getAccessibleObject (xWindow);
diff -purN qadevOOo.old/tests/java/mod/_dbaccess/OQueryDesign.java qadevOOo/tests/java/mod/_dbaccess/OQueryDesign.java
--- qadevOOo.old/tests/java/mod/_dbaccess/OQueryDesign.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_dbaccess/OQueryDesign.java	2010-09-07 13:52:32.000000000 +0200
@@ -294,7 +294,10 @@ public class OQueryDesign extends TestCa
         
     }
     
-    @Override
+    // @Override is optional; It just helps the compiler to catch errors, see 
+    // http://java.sun.com/docs/books/tutorial/java/javaOO/annotations.html 
+    // We will disable to to be able to compile with JRE 1.4 
+    // @Override
     protected void cleanup(TestParameters tParam, PrintWriter log) {
         try {
             xConn.close() ;
diff -purN qadevOOo.old/tests/java/mod/_dbaccess/ORowSet.java qadevOOo/tests/java/mod/_dbaccess/ORowSet.java
--- qadevOOo.old/tests/java/mod/_dbaccess/ORowSet.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_dbaccess/ORowSet.java	2010-09-07 13:52:50.000000000 +0200
@@ -301,7 +301,7 @@ public class ORowSet extends TestCase {
         {
             m_rowSet = orb.createInstance("com.sun.star.sdb.RowSet");
 
-            XPropertySet rowSetProps = UnoRuntime.queryInterface( XPropertySet.class, m_rowSet );
+            XPropertySet rowSetProps = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, m_rowSet );
 
             log.println("Trying to open: " + tableName);
 
@@ -310,11 +310,11 @@ public class ORowSet extends TestCase {
             rowSetProps.setPropertyValue("CommandType",
                 new Integer(CommandType.TABLE));
 
-            final XRowSet rowSet = UnoRuntime.queryInterface( XRowSet.class, m_rowSet);                   
+            final XRowSet rowSet = (XRowSet) UnoRuntime.queryInterface( XRowSet.class, m_rowSet);                   
             rowSet.execute();
-            m_connection = UnoRuntime.queryInterface( XConnection.class, rowSetProps.getPropertyValue("ActiveConnection") );
+            m_connection = (XConnection) UnoRuntime.queryInterface( XConnection.class, rowSetProps.getPropertyValue("ActiveConnection") );
 
-            XResultSet xRes = UnoRuntime.queryInterface( XResultSet.class, m_rowSet );
+            XResultSet xRes = (XResultSet) UnoRuntime.queryInterface( XResultSet.class, m_rowSet );
             xRes.first();
 
             log.println( "creating a new environment for object" );
@@ -322,9 +322,9 @@ public class ORowSet extends TestCase {
 
             // Adding obj relation for XRowSetApproveBroadcaster test
             {
-                final XResultSet resultSet = UnoRuntime.queryInterface( XResultSet.class, m_rowSet );
-                final XResultSetUpdate resultSetUpdate = UnoRuntime.queryInterface( XResultSetUpdate.class, m_rowSet );
-                final XRowUpdate rowUpdate = UnoRuntime.queryInterface(XRowUpdate.class, m_rowSet );
+                final XResultSet resultSet = (XResultSet) UnoRuntime.queryInterface( XResultSet.class, m_rowSet );
+                final XResultSetUpdate resultSetUpdate = (XResultSetUpdate) UnoRuntime.queryInterface( XResultSetUpdate.class, m_rowSet );
+                final XRowUpdate rowUpdate = (XRowUpdate) UnoRuntime.queryInterface(XRowUpdate.class, m_rowSet );
                 final PrintWriter logF = log ;
                 tEnv.addObjRelation( "XRowSetApproveBroadcaster.ApproveChecker",
                     new ifc.sdb._XRowSetApproveBroadcaster.RowSetApproveChecker()
@@ -371,7 +371,7 @@ public class ORowSet extends TestCase {
                                 // since we gave the row set a parametrized statement, we need to ensure the
                                 // parameter is actually filled, otherwise we would get an empty result set,
                                 // which would imply some further tests failing
-                                XParameters rowSetParams = UnoRuntime.queryInterface( XParameters.class, resultSet );
+                                XParameters rowSetParams = (XParameters) UnoRuntime.queryInterface( XParameters.class, resultSet );
                                 rowSetParams.setString( 1, "String2" );
                                 rowSet.execute();
                                 resultSet.first();
@@ -425,13 +425,13 @@ public class ORowSet extends TestCase {
             tEnv.addObjRelation( "XParameters.ParamValues", new Vector() );
 
             // Adding relation for XRowUpdate
-            final XRow row = UnoRuntime.queryInterface( XRow.class, m_rowSet );
+            final XRow row = (XRow) UnoRuntime.queryInterface( XRow.class, m_rowSet );
             tEnv.addObjRelation("XRowUpdate.XRow", row);
 
             // Adding relation for XResultSetUpdate
             {
-                final XResultSet resultSet = UnoRuntime.queryInterface( XResultSet.class, m_rowSet );
-                final XRowUpdate rowUpdate = UnoRuntime.queryInterface( XRowUpdate.class, m_rowSet );
+                final XResultSet resultSet = (XResultSet) UnoRuntime.queryInterface( XResultSet.class, m_rowSet );
+                final XRowUpdate rowUpdate = (XRowUpdate) UnoRuntime.queryInterface( XRowUpdate.class, m_rowSet );
 
                 tEnv.addObjRelation("XResultSetUpdate.UpdateTester",
                     new ifc.sdbc._XResultSetUpdate.UpdateTester()
@@ -517,11 +517,11 @@ public class ORowSet extends TestCase {
 
             doing = "closing database document";
             log.println( doing );
-            XModel databaseDocModel = UnoRuntime.queryInterface( XModel.class,
+            XModel databaseDocModel = (XModel) UnoRuntime.queryInterface( XModel.class,
                 m_dataSource.getDatabaseDocument().getDatabaseDocument() );
             String documentFile = databaseDocModel.getURL();
 
-            XCloseable closeModel = UnoRuntime.queryInterface( XCloseable.class,
+            XCloseable closeModel = (XCloseable) UnoRuntime.queryInterface( XCloseable.class,
                 m_dataSource.getDatabaseDocument().getDatabaseDocument() );
             closeModel.close( true );
 
@@ -529,7 +529,7 @@ public class ORowSet extends TestCase {
             {
                 doing = "disposing row set";
                 log.println( doing );
-                XComponent rowSetComponent = UnoRuntime.queryInterface( XComponent.class, m_rowSet );
+                XComponent rowSetComponent = (XComponent) UnoRuntime.queryInterface( XComponent.class, m_rowSet );
                 rowSetComponent.dispose();
             }
 
@@ -608,13 +608,13 @@ public class ORowSet extends TestCase {
             for(int i=0; i<xCont.length; i++) {
                 if (abort) {
                     XInteractionAbort xAbort = null;
-                    xAbort = UnoRuntime.queryInterface(XInteractionAbort.class, xCont[i]);
+                    xAbort = (XInteractionAbort) UnoRuntime.queryInterface(XInteractionAbort.class, xCont[i]);
                     if (xAbort != null)
                         xAbort.select();
                         return;
                 }
                 else {
-                    xParamCallback = UnoRuntime.queryInterface(XInteractionSupplyParameters.class, xCont[i]);
+                    xParamCallback = (XInteractionSupplyParameters) UnoRuntime.queryInterface(XInteractionSupplyParameters.class, xCont[i]);
                     if (xParamCallback != null)
                         break;
                 }
diff -purN qadevOOo.old/tests/java/mod/_dbaccess/TableWindowAccessibility.java qadevOOo/tests/java/mod/_dbaccess/TableWindowAccessibility.java
--- qadevOOo.old/tests/java/mod/_dbaccess/TableWindowAccessibility.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_dbaccess/TableWindowAccessibility.java	2010-09-07 13:52:50.000000000 +0200
@@ -300,7 +300,7 @@ public class TableWindowAccessibility ex
         
         QueryComponent = DesktopTools.loadDoc((XMultiServiceFactory) Param.getMSF (),".component:DB/QueryDesign",loadProps);
         
-        xWindow = UnoRuntime.queryInterface(XModel.class, QueryComponent).
+        xWindow = ((XModel) UnoRuntime.queryInterface(XModel.class, QueryComponent)).
             getCurrentController().getFrame().getContainerWindow();
 
         XAccessible xRoot = AccessibilityTools.getAccessibleObject(xWindow);        
diff -purN qadevOOo.old/tests/java/mod/_svtools/AccessibleTabBar.java qadevOOo/tests/java/mod/_svtools/AccessibleTabBar.java
--- qadevOOo.old/tests/java/mod/_svtools/AccessibleTabBar.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_svtools/AccessibleTabBar.java	2010-09-07 13:52:50.000000000 +0200
@@ -112,7 +112,7 @@ public class AccessibleTabBar extends Te
 
         shortWait();
 
-        XWindow xWindow = UnoRuntime.queryInterface(XModel.class, xDoc).
+        XWindow xWindow = ((XModel) UnoRuntime.queryInterface(XModel.class, xDoc)).
             getCurrentController().getFrame().getContainerWindow();
 
         XAccessible xRoot = at.getAccessibleObject(xWindow);
diff -purN qadevOOo.old/tests/java/mod/_toolkit/AccessibleMenuBar.java qadevOOo/tests/java/mod/_toolkit/AccessibleMenuBar.java
--- qadevOOo.old/tests/java/mod/_toolkit/AccessibleMenuBar.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_toolkit/AccessibleMenuBar.java	2010-09-07 13:52:50.000000000 +0200
@@ -87,7 +87,7 @@ public class AccessibleMenuBar extends T
 
         AccessibilityTools at = new AccessibilityTools();
 
-        XWindow xWindow = UnoRuntime.queryInterface(XModel.class, xTextDoc).
+        XWindow xWindow = ((XModel) UnoRuntime.queryInterface(XModel.class, xTextDoc)).
             getCurrentController().getFrame().getContainerWindow();
 
         XAccessible xRoot = at.getAccessibleObject(xWindow);
diff -purN qadevOOo.old/tests/java/mod/_toolkit/AccessibleMenu.java qadevOOo/tests/java/mod/_toolkit/AccessibleMenu.java
--- qadevOOo.old/tests/java/mod/_toolkit/AccessibleMenu.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_toolkit/AccessibleMenu.java	2010-09-07 13:52:50.000000000 +0200
@@ -104,7 +104,7 @@ public class AccessibleMenu extends Test
 
         shortWait();
 
-        XWindow xWindow = UnoRuntime.queryInterface(XModel.class, xTextDoc).
+        XWindow xWindow = ((XModel) UnoRuntime.queryInterface(XModel.class, xTextDoc)).
             getCurrentController().getFrame().getContainerWindow();
 
         AccessibilityTools at = new AccessibilityTools();
diff -purN qadevOOo.old/tests/java/mod/_toolkit/AccessibleMenuSeparator.java qadevOOo/tests/java/mod/_toolkit/AccessibleMenuSeparator.java
--- qadevOOo.old/tests/java/mod/_toolkit/AccessibleMenuSeparator.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_toolkit/AccessibleMenuSeparator.java	2010-09-07 13:52:50.000000000 +0200
@@ -87,7 +87,7 @@ public class AccessibleMenuSeparator ext
 
         AccessibilityTools at = new AccessibilityTools();
 
-        XWindow xWindow = UnoRuntime.queryInterface(XModel.class, xTextDoc).
+        XWindow xWindow = ((XModel) UnoRuntime.queryInterface(XModel.class, xTextDoc)).
             getCurrentController().getFrame().getContainerWindow();
 
         XAccessible xRoot = at.getAccessibleObject(xWindow);
diff -purN qadevOOo.old/tests/java/mod/_toolkit/AccessibleStatusBar.java qadevOOo/tests/java/mod/_toolkit/AccessibleStatusBar.java
--- qadevOOo.old/tests/java/mod/_toolkit/AccessibleStatusBar.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_toolkit/AccessibleStatusBar.java	2010-09-07 13:52:50.000000000 +0200
@@ -149,7 +149,7 @@ public class AccessibleStatusBar extends
         AccessibilityTools at = new AccessibilityTools();
 
         final XWindow xWindow =
-            UnoRuntime.queryInterface(XModel.class, xTextDoc).
+            ((XModel) UnoRuntime.queryInterface(XModel.class, xTextDoc)).
             getCurrentController().getFrame().getContainerWindow();
 
         XAccessible xRoot = at.getAccessibleObject(xWindow);
diff -purN qadevOOo.old/tests/java/mod/_toolkit/AccessibleToolBox.java qadevOOo/tests/java/mod/_toolkit/AccessibleToolBox.java
--- qadevOOo.old/tests/java/mod/_toolkit/AccessibleToolBox.java	2010-08-24 17:01:40.000000000 +0200
+++ qadevOOo/tests/java/mod/_toolkit/AccessibleToolBox.java	2010-09-07 13:52:50.000000000 +0200
@@ -141,7 +141,7 @@ public class AccessibleToolBox extends T
         
         XInterface oObj = null;
         
-        XWindow xWindow = UnoRuntime.queryInterface(XModel.class, xTextDoc).
+        XWindow xWindow = ((XModel) UnoRuntime.queryInterface(XModel.class, xTextDoc)).
             getCurrentController().getFrame().getContainerWindow();
         
         AccessibilityTools at = new AccessibilityTools();
