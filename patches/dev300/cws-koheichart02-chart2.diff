From a457870c7f0827f7963024cf46643a9be4774c0e Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:52:48 +0200
Subject: [PATCH 020/878] cws-koheichart02-chart2.diff

---
 chart2/source/model/template/AreaChartType.cxx     |  114 ++++++++++++++++++++
 chart2/source/model/template/AreaChartType.hxx     |   10 ++
 .../model/template/AreaChartTypeTemplate.cxx       |    3 +
 .../source/model/template/BarChartTypeTemplate.cxx |    1 +
 chart2/source/model/template/ChartTypeTemplate.cxx |   43 ++++++++
 chart2/source/model/template/ChartTypeTemplate.hxx |    5 +
 chart2/source/model/template/ColumnChartType.cxx   |   20 ++++-
 .../model/template/ColumnLineChartTypeTemplate.cxx |    1 +
 chart2/source/model/template/LineChartType.cxx     |   20 ++++-
 .../model/template/LineChartTypeTemplate.cxx       |    1 +
 .../source/model/template/NetChartTypeTemplate.cxx |    1 +
 .../source/model/template/PieChartTypeTemplate.cxx |    1 +
 .../model/template/ScatterChartTypeTemplate.cxx    |    1 +
 .../model/template/StockChartTypeTemplate.cxx      |    1 +
 chart2/source/view/axes/ScaleAutomatism.cxx        |   16 +++
 chart2/source/view/charttypes/AreaChart.cxx        |   38 ++++++-
 chart2/source/view/charttypes/BarChart.cxx         |   13 +++
 chart2/source/view/charttypes/VSeriesPlotter.cxx   |   34 ++++++
 18 files changed, 319 insertions(+), 4 deletions(-)

diff --git a/chart2/source/model/template/AreaChartType.cxx b/chart2/source/model/template/AreaChartType.cxx
index 003220c..79828f5 100644
--- a/chart2/source/model/template/AreaChartType.cxx
+++ b/chart2/source/model/template/AreaChartType.cxx
@@ -30,8 +30,72 @@
 #include "AreaChartType.hxx"
 #include "macros.hxx"
 #include "servicenames_charttypes.hxx"
+#include "PropertyHelper.hxx"
+#include "ContainerHelper.hxx"
+
+#include <com/sun/star/beans/PropertyAttribute.hpp>
 
 using namespace ::com::sun::star;
+using ::com::sun::star::beans::Property;
+using ::com::sun::star::uno::Sequence;
+
+namespace
+{
+
+enum
+{
+    PROP_AREACHARTTYPE_STACKED,
+    PROP_AREACHARTTYPE_PERCENT
+};
+
+void lcl_AddPropertiesToVector(
+    ::std::vector< Property > & rOutProperties )
+{
+    rOutProperties.push_back(
+        Property( C2U( "Stacked" ),
+                  PROP_AREACHARTTYPE_STACKED,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+    rOutProperties.push_back(
+        Property( C2U( "Percent" ),
+                  PROP_AREACHARTTYPE_PERCENT,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+}
+
+void lcl_AddDefaultsToMap(
+    ::chart::tPropertyValueMap & rOutMap )
+{
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_AREACHARTTYPE_STACKED, false );
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_AREACHARTTYPE_PERCENT, false );
+}
+
+const Sequence< Property > & lcl_GetPropertySequence()
+{
+    static Sequence< Property > aPropSeq;
+
+    // /--
+    ::osl::MutexGuard aGuard( ::osl::Mutex::getGlobalMutex() );
+    if( 0 == aPropSeq.getLength() )
+    {
+        // get properties
+        ::std::vector< ::com::sun::star::beans::Property > aProperties;
+        lcl_AddPropertiesToVector( aProperties );
+
+        // and sort them for access via bsearch
+        ::std::sort( aProperties.begin(), aProperties.end(),
+                     ::chart::PropertyNameLess() );
+
+        // transfer result to static Sequence
+        aPropSeq = ::chart::ContainerHelper::ContainerToSequence( aProperties );
+    }
+
+    return aPropSeq;
+}
+
+} // anonymous namespace
 
 namespace chart
 {
@@ -62,6 +126,56 @@ uno::Reference< util::XCloneable > SAL_CALL AreaChartType::createClone()
     return CHART2_SERVICE_NAME_CHARTTYPE_AREA;
 }
 
+// ____ OPropertySet ____
+uno::Any AreaChartType::GetDefaultValue( sal_Int32 nHandle ) const
+    throw(beans::UnknownPropertyException)
+{
+    static tPropertyValueMap aStaticDefaults;
+
+    // /--
+    ::osl::MutexGuard aGuard( ::osl::Mutex::getGlobalMutex() );
+    if( 0 == aStaticDefaults.size() )
+    {
+        // initialize defaults
+        lcl_AddDefaultsToMap( aStaticDefaults );
+    }
+
+    tPropertyValueMap::const_iterator aFound(
+        aStaticDefaults.find( nHandle ));
+
+    if( aFound == aStaticDefaults.end())
+        return uno::Any();
+
+    return (*aFound).second;
+    // \--
+}
+
+::cppu::IPropertyArrayHelper & SAL_CALL AreaChartType::getInfoHelper()
+{
+    static ::cppu::OPropertyArrayHelper aArrayHelper( lcl_GetPropertySequence(),
+                                                      /* bSorted = */ sal_True );
+
+    return aArrayHelper;
+}
+
+// ____ XPropertySet ____
+uno::Reference< beans::XPropertySetInfo > SAL_CALL AreaChartType::getPropertySetInfo()
+    throw (uno::RuntimeException)
+{
+    static uno::Reference< beans::XPropertySetInfo > xInfo;
+
+    // /--
+    ::osl::MutexGuard aGuard( ::osl::Mutex::getGlobalMutex() );
+    if( !xInfo.is())
+    {
+        xInfo = ::cppu::OPropertySetHelper::createPropertySetInfo(
+            getInfoHelper());
+    }
+
+    return xInfo;
+    // \--
+}
+
 uno::Sequence< ::rtl::OUString > AreaChartType::getSupportedServiceNames_Static()
 {
     uno::Sequence< ::rtl::OUString > aServices( 2 );
diff --git a/chart2/source/model/template/AreaChartType.hxx b/chart2/source/model/template/AreaChartType.hxx
index 9955d5e..09895fc 100644
--- a/chart2/source/model/template/AreaChartType.hxx
+++ b/chart2/source/model/template/AreaChartType.hxx
@@ -53,6 +53,16 @@ protected:
     virtual ::rtl::OUString SAL_CALL getChartType()
         throw (::com::sun::star::uno::RuntimeException);
 
+    // ____ OPropertySet ____
+    virtual ::com::sun::star::uno::Any GetDefaultValue( sal_Int32 nHandle ) const
+        throw(::com::sun::star::beans::UnknownPropertyException);
+    virtual ::cppu::IPropertyArrayHelper & SAL_CALL getInfoHelper();
+
+    // ____ XPropertySet ____
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL
+        getPropertySetInfo()
+        throw (::com::sun::star::uno::RuntimeException);
+
     // ____ XCloneable ____
     virtual ::com::sun::star::uno::Reference< ::com::sun::star::util::XCloneable > SAL_CALL createClone()
         throw (::com::sun::star::uno::RuntimeException);
diff --git a/chart2/source/model/template/AreaChartTypeTemplate.cxx b/chart2/source/model/template/AreaChartTypeTemplate.cxx
index 8cf16fc..eebc68c 100644
--- a/chart2/source/model/template/AreaChartTypeTemplate.cxx
+++ b/chart2/source/model/template/AreaChartTypeTemplate.cxx
@@ -45,6 +45,8 @@ using ::com::sun::star::beans::Property;
 using ::com::sun::star::uno::Sequence;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::Any;
+using ::com::sun::star::uno::UNO_QUERY;
+using ::com::sun::star::uno::UNO_QUERY_THROW;
 using ::osl::MutexGuard;
 
 namespace
@@ -272,6 +274,7 @@ Reference< chart2::XChartType > SAL_CALL AreaChartTypeTemplate::getChartTypeForN
 {
     Reference< chart2::XChartType > xResult( getChartTypeForIndex( 0 ) );
     ChartTypeTemplate::copyPropertiesFromOldToNewCoordianteSystem( aFormerlyUsedChartTypes, xResult );    
+    setStackModePropertiesToChartType(xResult);
     return xResult;
 }
 
diff --git a/chart2/source/model/template/BarChartTypeTemplate.cxx b/chart2/source/model/template/BarChartTypeTemplate.cxx
index 27caed1..e1a944c 100644
--- a/chart2/source/model/template/BarChartTypeTemplate.cxx
+++ b/chart2/source/model/template/BarChartTypeTemplate.cxx
@@ -218,6 +218,7 @@ Reference< chart2::XChartType > SAL_CALL BarChartTypeTemplate::getChartTypeForNe
 {
     Reference< chart2::XChartType > xResult( getChartTypeForIndex( 0 ) );
     ChartTypeTemplate::copyPropertiesFromOldToNewCoordianteSystem( aFormerlyUsedChartTypes, xResult );    
+    setStackModePropertiesToChartType(xResult);
     return xResult;
 }
 
diff --git a/chart2/source/model/template/ChartTypeTemplate.cxx b/chart2/source/model/template/ChartTypeTemplate.cxx
index ececb51..5f83678 100644
--- a/chart2/source/model/template/ChartTypeTemplate.cxx
+++ b/chart2/source/model/template/ChartTypeTemplate.cxx
@@ -59,6 +59,7 @@ using ::rtl::OUString;
 using ::com::sun::star::uno::Sequence;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::Any;
+using ::com::sun::star::uno::UNO_QUERY;
 
 // ======================================================================
 
@@ -940,6 +941,48 @@ void ChartTypeTemplate::copyPropertiesFromOldToNewCoordianteSystem(
         comphelper::copyProperties( xSource, xDestination );
 }
 
+void ChartTypeTemplate::setStackModePropertiesToChartType(const Reference<XChartType>& xChartType)
+{
+    Reference<beans::XPropertySet> xPropSet(xChartType, UNO_QUERY);
+    if (!xPropSet.is())
+        return;
+
+    bool bStacked = false;
+    bool bPercent = false;
+    switch (getStackMode(0))
+    {
+        case StackMode_Y_STACKED:
+            bStacked = true;
+        break;
+        case StackMode_Y_STACKED_PERCENT:
+            bStacked = true;
+            bPercent = true;
+        break;
+        case StackMode_Z_STACKED:
+        break;
+        default:
+            ;
+    }
+
+    try
+    {
+        xPropSet->setPropertyValue(
+            C2U("Stacked"), uno::makeAny(static_cast<sal_Bool>(bStacked)));
+    }
+    catch (const beans::UnknownPropertyException&)
+    {
+    }
+
+    try
+    {
+        xPropSet->setPropertyValue(
+            C2U("Percent"), uno::makeAny(static_cast<sal_Bool>(bPercent)));
+    }
+    catch (const beans::UnknownPropertyException&)
+    {
+    }
+}
+
 // ________
 
 Sequence< OUString > ChartTypeTemplate::getSupportedServiceNames_Static()
diff --git a/chart2/source/model/template/ChartTypeTemplate.hxx b/chart2/source/model/template/ChartTypeTemplate.hxx
index 9629ba7..8f1a333 100644
--- a/chart2/source/model/template/ChartTypeTemplate.hxx
+++ b/chart2/source/model/template/ChartTypeTemplate.hxx
@@ -269,6 +269,11 @@ protected:
                     const ::com::sun::star::uno::Reference<
                           ::com::sun::star::chart2::XChartType > & xNewChartType );
 
+    void setStackModePropertiesToChartType(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XChartType>& xChartType );
+
+
 protected:
     ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >
         m_xContext;
diff --git a/chart2/source/model/template/ColumnChartType.cxx b/chart2/source/model/template/ColumnChartType.cxx
index aa11d77..ca78bd8 100644
--- a/chart2/source/model/template/ColumnChartType.cxx
+++ b/chart2/source/model/template/ColumnChartType.cxx
@@ -46,7 +46,9 @@ namespace
 enum
 {
     PROP_BARCHARTTYPE_OVERLAP_SEQUENCE,
-    PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE
+    PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE,
+    PROP_BARCHARTTYPE_STACKED,
+    PROP_BARCHARTTYPE_PERCENT
 };
 
 void lcl_AddPropertiesToVector(
@@ -65,6 +67,19 @@ void lcl_AddPropertiesToVector(
                   ::getCppuType( reinterpret_cast< const Sequence< sal_Int32 > * >(0)),
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
+
+    rOutProperties.push_back(
+        Property( C2U( "Stacked" ),
+                  PROP_BARCHARTTYPE_STACKED,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+    rOutProperties.push_back(
+        Property( C2U( "Percent" ),
+                  PROP_BARCHARTTYPE_PERCENT,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
 }
 
 void lcl_AddDefaultsToMap(
@@ -77,6 +92,9 @@ void lcl_AddDefaultsToMap(
 
     aSeq[0] = aSeq[1] = 100;
     ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE, aSeq );
+
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_BARCHARTTYPE_STACKED, false );
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_BARCHARTTYPE_PERCENT, false );
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
diff --git a/chart2/source/model/template/ColumnLineChartTypeTemplate.cxx b/chart2/source/model/template/ColumnLineChartTypeTemplate.cxx
index 275401d..de8e169 100644
--- a/chart2/source/model/template/ColumnLineChartTypeTemplate.cxx
+++ b/chart2/source/model/template/ColumnLineChartTypeTemplate.cxx
@@ -407,6 +407,7 @@ Reference< XChartType > SAL_CALL ColumnLineChartTypeTemplate::getChartTypeForNew
         ASSERT_EXCEPTION( ex );
     }
 
+    setStackModePropertiesToChartType(xResult);
     return xResult;
 }
 
diff --git a/chart2/source/model/template/LineChartType.cxx b/chart2/source/model/template/LineChartType.cxx
index f96d7ed..da71a87 100644
--- a/chart2/source/model/template/LineChartType.cxx
+++ b/chart2/source/model/template/LineChartType.cxx
@@ -51,7 +51,9 @@ enum
 {
     PROP_LINECHARTTYPE_CURVE_STYLE,
     PROP_LINECHARTTYPE_CURVE_RESOLUTION,
-    PROP_LINECHARTTYPE_SPLINE_ORDER
+    PROP_LINECHARTTYPE_SPLINE_ORDER,
+    PROP_LINECHARTTYPE_STACKED,
+    PROP_LINECHARTTYPE_PERCENT
 };
 
 void lcl_AddPropertiesToVector(
@@ -76,6 +78,19 @@ void lcl_AddPropertiesToVector(
                   ::getCppuType( reinterpret_cast< const sal_Int32 * >(0)),
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
+
+    rOutProperties.push_back(
+        Property( C2U( "Stacked" ),
+                  PROP_LINECHARTTYPE_STACKED,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+    rOutProperties.push_back(
+        Property( C2U( "Percent" ),
+                  PROP_LINECHARTTYPE_PERCENT,
+                  ::getBooleanCppuType(),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
 }
 
 void lcl_AddDefaultsToMap(
@@ -87,6 +102,9 @@ void lcl_AddDefaultsToMap(
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
     ::chart::PropertyHelper::setPropertyValueDefault< sal_Int32 >( rOutMap, PROP_LINECHARTTYPE_SPLINE_ORDER, 3 );
+
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_LINECHARTTYPE_STACKED, false );
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_LINECHARTTYPE_PERCENT, false );
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
diff --git a/chart2/source/model/template/LineChartTypeTemplate.cxx b/chart2/source/model/template/LineChartTypeTemplate.cxx
index 8d58217..fff7079 100644
--- a/chart2/source/model/template/LineChartTypeTemplate.cxx
+++ b/chart2/source/model/template/LineChartTypeTemplate.cxx
@@ -333,6 +333,7 @@ Reference< chart2::XChartType > LineChartTypeTemplate::getChartTypeForIndex( sal
         ASSERT_EXCEPTION( ex );
     }
 
+    setStackModePropertiesToChartType(xResult);
     return xResult;
 }
 
diff --git a/chart2/source/model/template/NetChartTypeTemplate.cxx b/chart2/source/model/template/NetChartTypeTemplate.cxx
index da3e27d..4ca593e 100644
--- a/chart2/source/model/template/NetChartTypeTemplate.cxx
+++ b/chart2/source/model/template/NetChartTypeTemplate.cxx
@@ -210,6 +210,7 @@ Reference< chart2::XChartType > SAL_CALL NetChartTypeTemplate::getChartTypeForNe
 {
     Reference< chart2::XChartType > xResult( getChartTypeForIndex( 0 ) );
     ChartTypeTemplate::copyPropertiesFromOldToNewCoordianteSystem( aFormerlyUsedChartTypes, xResult );    
+    setStackModePropertiesToChartType(xResult);
     return xResult;
 }
 
diff --git a/chart2/source/model/template/PieChartTypeTemplate.cxx b/chart2/source/model/template/PieChartTypeTemplate.cxx
index a8f2fc1..12e4361 100644
--- a/chart2/source/model/template/PieChartTypeTemplate.cxx
+++ b/chart2/source/model/template/PieChartTypeTemplate.cxx
@@ -471,6 +471,7 @@ Reference< chart2::XChartType > SAL_CALL PieChartTypeTemplate::getChartTypeForNe
         ASSERT_EXCEPTION( ex );
     }
 
+    setStackModePropertiesToChartType(xResult);
     return xResult;
 }
 
diff --git a/chart2/source/model/template/ScatterChartTypeTemplate.cxx b/chart2/source/model/template/ScatterChartTypeTemplate.cxx
index 7c83e80..8d3be52 100644
--- a/chart2/source/model/template/ScatterChartTypeTemplate.cxx
+++ b/chart2/source/model/template/ScatterChartTypeTemplate.cxx
@@ -371,6 +371,7 @@ Reference< chart2::XChartType > ScatterChartTypeTemplate::getChartTypeForIndex(
         ASSERT_EXCEPTION( ex );
     }
 
+    setStackModePropertiesToChartType(xResult);
     return xResult;
 }
 
diff --git a/chart2/source/model/template/StockChartTypeTemplate.cxx b/chart2/source/model/template/StockChartTypeTemplate.cxx
index b916cba..14484e8 100644
--- a/chart2/source/model/template/StockChartTypeTemplate.cxx
+++ b/chart2/source/model/template/StockChartTypeTemplate.cxx
@@ -524,6 +524,7 @@ Reference< XChartType > SAL_CALL StockChartTypeTemplate::getChartTypeForNewSerie
         ASSERT_EXCEPTION( ex );
     }
 
+    setStackModePropertiesToChartType(xResult);
     return xResult;
 }
 
diff --git a/chart2/source/view/axes/ScaleAutomatism.cxx b/chart2/source/view/axes/ScaleAutomatism.cxx
index a13b2cc..4bdade9 100644
--- a/chart2/source/view/axes/ScaleAutomatism.cxx
+++ b/chart2/source/view/axes/ScaleAutomatism.cxx
@@ -128,7 +128,15 @@ void ScaleAutomatism::calculateExplicitScaleAndIncrement(
     if( bAutoMinimum )
     {
         if( m_aSourceScale.AxisType==AxisType::PERCENT )
+        {
             rExplicitScale.Minimum = 0.0;
+            if (!::rtl::math::isNan(m_fValueMinimum))
+            {
+                double fMin = m_fValueMinimum / 100.0;
+                if (rExplicitScale.Minimum > fMin)
+                    rExplicitScale.Minimum = fMin;
+            }
+        }
         else if( ::rtl::math::isNan( m_fValueMinimum ) )
             rExplicitScale.Minimum = 0.0;   //@todo get Minimum from scaling or from plotter????
         else
@@ -139,7 +147,15 @@ void ScaleAutomatism::calculateExplicitScaleAndIncrement(
     if( bAutoMaximum )
     {
         if( m_aSourceScale.AxisType==AxisType::PERCENT )
+        {
             rExplicitScale.Maximum = 1.0;
+            if (!::rtl::math::isNan(m_fValueMaximum))
+            {
+                double fMax = m_fValueMaximum / 100.0;
+                if (rExplicitScale.Maximum < fMax)
+                    rExplicitScale.Maximum = fMax;
+            }
+        }
         else if( ::rtl::math::isNan( m_fValueMaximum ) )
             rExplicitScale.Maximum = 10.0;  //@todo get Maximum from scaling or from plotter????
         else
diff --git a/chart2/source/view/charttypes/AreaChart.cxx b/chart2/source/view/charttypes/AreaChart.cxx
index ae0e512..f69b14a 100644
--- a/chart2/source/view/charttypes/AreaChart.cxx
+++ b/chart2/source/view/charttypes/AreaChart.cxx
@@ -600,6 +600,19 @@ struct FormerPoint
 
 void AreaChart::createShapes()
 {
+    sal_Bool bPercent = sal_False;
+    uno::Reference< beans::XPropertySet > xPropSet(m_xChartTypeModel, uno::UNO_QUERY);
+    if (xPropSet.is())
+    {
+        try
+        {
+            xPropSet->getPropertyValue(C2U("Percent")) >>= bPercent;
+        }
+        catch (const beans::UnknownPropertyException&)
+        {
+        }
+    }
+
     if( m_aZSlots.begin() == m_aZSlots.end() ) //no series
         return;
 
@@ -749,9 +762,30 @@ void AreaChart::createShapes()
                     if( m_nDimension==3 && m_bArea && pSeriesList->size()!=1 )
                         fLogicY = fabs( fLogicY );
 
-                    if( pPosHelper->isPercentY() && !::rtl::math::approxEqual( aLogicYSumMap[nAttachedAxisIndex], 0.0 ) )
+                    if (bPercent)
+                    {
+                        // This data series is percent-stacked.
+
+                        if (::rtl::math::approxEqual(aLogicYSumMap[nAttachedAxisIndex], 0.0))
+                            fLogicY = 0.0;
+                        else
+                            fLogicY = fabs( fLogicY )/aLogicYSumMap[nAttachedAxisIndex];
+
+                        if (!pPosHelper->isPercentY())
+                        {
+                            // When the axis itself is not percent-stacked,
+                            // their internal range value is 0 - 100.  So we
+                            // need to adjust the data point values
+                            // accordingly.
+                            fLogicY *= 100.0;
+                        }
+                    }
+                    else if (pPosHelper->isPercentY())
                     {
-                        fLogicY = fabs( fLogicY )/aLogicYSumMap[nAttachedAxisIndex];
+                        // The data series is not percent-stacked, but the
+                        // axis itself is.  In this case, the axis' internal
+                        // range is 0 to 1.  Adjust the data point values.
+                        fLogicY /= 100.0;
                     }
 
                     if(    ::rtl::math::isNan(fLogicX) || ::rtl::math::isInf(fLogicX)
diff --git a/chart2/source/view/charttypes/BarChart.cxx b/chart2/source/view/charttypes/BarChart.cxx
index 51be488..7431999 100644
--- a/chart2/source/view/charttypes/BarChart.cxx
+++ b/chart2/source/view/charttypes/BarChart.cxx
@@ -463,6 +463,19 @@ void BarChart::adaptOverlapAndGapwidthForGroupBarsPerAxis()
 
 void BarChart::createShapes()
 {
+    uno::Reference< beans::XPropertySet > xPropSet(m_xChartTypeModel, uno::UNO_QUERY);
+    sal_Bool bPercent = sal_False;
+    if (xPropSet.is())
+    {
+        try
+        {
+            xPropSet->getPropertyValue(C2U("Percent")) >>= bPercent;
+        }
+        catch (const beans::UnknownPropertyException&)
+        {
+        }
+    }
+
     if( m_aZSlots.begin() == m_aZSlots.end() ) //no series
         return;
 
diff --git a/chart2/source/view/charttypes/VSeriesPlotter.cxx b/chart2/source/view/charttypes/VSeriesPlotter.cxx
index d2b9fc8..ecd0997 100644
--- a/chart2/source/view/charttypes/VSeriesPlotter.cxx
+++ b/chart2/source/view/charttypes/VSeriesPlotter.cxx
@@ -1149,6 +1149,23 @@ double VSeriesPlotter::getMaximumX()
 
 double VSeriesPlotter::getMinimumYInRange( double fMinimumX, double fMaximumX, sal_Int32 nAxisIndex )
 {
+    sal_Bool bPercent = sal_False;
+    uno::Reference< beans::XPropertySet > xPropSet(m_xChartTypeModel, uno::UNO_QUERY);
+    if (xPropSet.is())
+    {
+        try
+        {
+            xPropSet->getPropertyValue(C2U("Percent")) >>= bPercent;
+        }
+        catch (const beans::UnknownPropertyException&)
+        {
+        }
+    }
+
+    if (bPercent)
+        // This plotter is percent-stacked.
+        return 0.0;
+
     if( !m_bCategoryXAxis )
     {
         double fMinY, fMaxY;
@@ -1183,6 +1200,23 @@ double VSeriesPlotter::getMinimumYInRange( double fMinimumX, double fMaximumX, s
 
 double VSeriesPlotter::getMaximumYInRange( double fMinimumX, double fMaximumX, sal_Int32 nAxisIndex )
 {
+    sal_Bool bPercent = sal_False;
+    uno::Reference< beans::XPropertySet > xPropSet(m_xChartTypeModel, uno::UNO_QUERY);
+    if (xPropSet.is())
+    {
+        try
+        {
+            xPropSet->getPropertyValue(C2U("Percent")) >>= bPercent;
+        }
+        catch (const beans::UnknownPropertyException&)
+        {
+        }
+    }
+
+    if (bPercent)
+        // This plotter is percent-stacked.
+        return 100.0;
+
     if( !m_bCategoryXAxis )
     {
         double fMinY, fMaxY;
-- 
1.7.0.1

