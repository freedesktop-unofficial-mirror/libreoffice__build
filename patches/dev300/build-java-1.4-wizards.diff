--- wizards/com/sun/star/wizards/db/TypeInspector.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/db/TypeInspector.java	2009-10-01 20:13:53.000000000 +0200
@@ -80,14 +80,14 @@ public class TypeInspector
         try
         {
             xResultSet = _xResultSet;
-            Vector<String> aTypeNameVector = new Vector<String>();
-            Vector<Integer> aTypeVector = new Vector<Integer>();
-            Vector<Integer> aNullableVector = new Vector<Integer>();
-            Vector<Boolean> aAutoIncrementVector = new Vector<Boolean>();
-            Vector<Integer> aPrecisionVector = new Vector<Integer>();
-            Vector<Integer> aMinScaleVector = new Vector<Integer>();
-            Vector<Integer> aMaxScaleVector = new Vector<Integer>();
-            Vector<Integer> aSearchableVector = new Vector<Integer>();
+            Vector aTypeNameVector = new Vector();
+            Vector aTypeVector = new Vector();
+            Vector aNullableVector = new Vector();
+            Vector aAutoIncrementVector = new Vector();
+            Vector aPrecisionVector = new Vector();
+            Vector aMinScaleVector = new Vector();
+            Vector aMaxScaleVector = new Vector();
+            Vector aSearchableVector = new Vector();
             // Integer[] aIntegerDataTypes = null;
 //      XResultSet xResultSet = xDBMetaDagetTypeInfo();
             XRow xRow = (XRow) UnoRuntime.queryInterface(XRow.class, xResultSet);
--- wizards/com/sun/star/wizards/db/CommandMetaData.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/db/CommandMetaData.java	2009-10-01 20:12:40.000000000 +0200
@@ -298,7 +298,7 @@ public class CommandMetaData extends DBM
             try 
             {
                 // Object oField;
-                java.util.Vector<String> ResultFieldNames = new java.util.Vector<String>(10);
+                java.util.Vector ResultFieldNames = new java.util.Vector(10);
                 String[] FieldNames;
                 CommandObject oCommand = this.getCommandByName(_commandname, _commandtype);
                 FieldNames = oCommand.getColumns().getElementNames();
@@ -347,7 +347,7 @@ public class CommandMetaData extends DBM
 
     public String[] getOrderableColumns(String[] _fieldnames)
         {
-            Vector<String> aOrderableColumns = new Vector<String>();
+            Vector aOrderableColumns = new Vector();
             int ncount = 0;
             for (int i = 0; i < _fieldnames.length; i++)
             {
@@ -424,7 +424,7 @@ public class CommandMetaData extends DBM
         {
             try 
             {
-                Vector<String> numericfieldsvector = new java.util.Vector<String>();
+                Vector numericfieldsvector = new java.util.Vector();
                 for (int i = 0; i < FieldColumns.length; i++) 
                 {
                     if (isnumeric(FieldColumns[i]))
@@ -445,7 +445,7 @@ public class CommandMetaData extends DBM
 
     public String[] getFieldNames(String[] _sDisplayFieldNames, String _sCommandName)
         {
-            Vector<String> sFieldNamesVector = new java.util.Vector<String>();
+            Vector sFieldNamesVector = new java.util.Vector();
             for (int i = 0; i < FieldColumns.length; i++) 
             {
                 if (_sCommandName.equals(FieldColumns[i].getCommandName())) 
@@ -488,7 +488,7 @@ public class CommandMetaData extends DBM
         {
             try 
             {
-                Vector<String> nonaggregatefieldsvector = new java.util.Vector<String>();
+                Vector nonaggregatefieldsvector = new java.util.Vector();
                 for (int i = 0; i < FieldColumns.length; i++) 
                 {
                     if (JavaTools.FieldInTable(AggregateFieldNames, FieldColumns[i].getDisplayFieldName()) == -1)
@@ -689,7 +689,7 @@ public class CommandMetaData extends DBM
                 {
                     if (xDBMetaData.supportsIntegrityEnhancementFacility())
                     {
-                        java.util.Vector<String> TableVector = new java.util.Vector<String>();
+                        java.util.Vector TableVector = new java.util.Vector();
                         Object oTable = getTableNamesAsNameAccess().getByName(_stablename);
                         XKeysSupplier xKeysSupplier = UnoRuntime.queryInterface( XKeysSupplier.class, oTable );
                         xIndexKeys = xKeysSupplier.getKeys();
--- wizards/com/sun/star/wizards/form/FieldLinker.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/form/FieldLinker.java	2009-10-01 20:50:58.000000000 +0200
@@ -121,7 +121,7 @@ public class FieldLinker extends DBLimit
                         new Boolean(bDoEnable),
                         UIConsts.INTEGER_12,
                         sSlaveHidString,
-                        Short.valueOf(UnoDialog.getListBoxLineCount()),
+                        new Short(UnoDialog.getListBoxLineCount()),
                         new Integer(97),
                         new Integer(iCurPosY + 10),
                         IStep,
@@ -159,7 +159,7 @@ public class FieldLinker extends DBLimit
                         new Boolean(bDoEnable),
                         UIConsts.INTEGER_12,
                         sMasterHidString,
-                        Short.valueOf(UnoDialog.getListBoxLineCount()),
+                        new Short(UnoDialog.getListBoxLineCount()),
                         new Integer(206),
                         new Integer(iCurPosY + 10),
                         IStep,
--- wizards/com/sun/star/wizards/form/StyleApplier.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/form/StyleApplier.java	2009-10-01 20:49:59.000000000 +0200
@@ -363,9 +363,9 @@ public class StyleApplier
         return xMSF;
     }
 
-    private ArrayList<String> getStylePaths()
+    private ArrayList getStylePaths()
     {
-        ArrayList<String> aStylePaths = new ArrayList<String>();
+        ArrayList aStylePaths = new ArrayList();
         try
         {
             // TODO: check different languages in header layouts
--- wizards/com/sun/star/wizards/form/UIControlArranger.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/form/UIControlArranger.java	2009-10-01 20:50:45.000000000 +0200
@@ -412,7 +412,7 @@ public class UIControlArranger
             m_aButtonList.setCols(4);
             m_aButtonList.setRows(1);
             m_aButtonList.setName( "ButtonList_" + formindex );
-            m_aButtonList.setStep(Short.valueOf((short) FormWizard.SOCONTROL_PAGE));
+            m_aButtonList.setStep(new Short((short) FormWizard.SOCONTROL_PAGE));
             m_aButtonList.setShowButtons(false);      // shows a button line at ''wrong'' position like |<| 1..4/4 |>|
             m_aButtonList.setRenderer(new LayoutRenderer());
             m_aButtonList.setSelectionGap(new Size(2, 2));
--- wizards/com/sun/star/wizards/document/DatabaseControl.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/document/DatabaseControl.java	2009-10-01 20:47:01.000000000 +0200
@@ -252,7 +252,7 @@ public class DatabaseControl extends Con
             // }
             else if (getControlType() == FormHandler.SOIMAGECONTROL)
             {
-                xPropertySet.setPropertyValue("ScaleMode", com.sun.star.awt.ImageScaleMode.Isotropic);
+                xPropertySet.setPropertyValue("ScaleMode",  new Short(com.sun.star.awt.ImageScaleMode.Isotropic));
             }
         }
         catch (Exception e)
--- wizards/com/sun/star/wizards/ui/FieldSelection.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/FieldSelection.java	2009-10-01 20:14:37.000000000 +0200
@@ -629,7 +629,7 @@ public class FieldSelection
             int MaxOriginalCount = AllFieldNames.length;
             // int MaxSelected = OldSelFieldItems.length;
             String[] SelList = xFieldsListBox.getItems();
-            Vector<String> NewSourceVector = new Vector<String>();
+            Vector NewSourceVector = new Vector();
             for (int i = 0; i < MaxOriginalCount; i++)
             {
                 SearchString = AllFieldNames[i];
--- wizards/com/sun/star/wizards/ui/ButtonList.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/ButtonList.java	2009-10-01 20:38:18.000000000 +0200
@@ -136,15 +136,15 @@ public class ButtonList implements XItem
                 },
                 new Object[]
                 {
-                    Integer.valueOf(imageTextHeight),
+                    new Integer(imageTextHeight),
                     "",
                     "(1)",
-                    Integer.valueOf(nXPos),
-                    Integer.valueOf(nYPos),
+                    new Integer(nXPos),
+                    new Integer(nYPos),
                     step,
-                    Short.valueOf((short) 0),
+                    new Short((short) 0),
                     Boolean.FALSE,
-                    Integer.valueOf(nWidth)
+                    new Integer(nWidth)
                 });
 
 
@@ -162,17 +162,17 @@ public class ButtonList implements XItem
                 "Width"
             };
 
-            final Integer btnSize = Integer.valueOf(14);
+            final Integer btnSize = new Integer(14);
 
 // TODO: if list of strings not the same length of list object, office will die.
             btnBack = dialog.insertButton(m_aControlName + "_btnBack", "prevPage", this, pNames1, new Object[]
                     {
                         btnSize,
                         "HID:" + helpURL++,
-                        Integer.valueOf(pos.Width),
-                        Integer.valueOf(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + 1),
+                        new Integer(pos.Width),
+                        new Integer(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + 1),
                         step,
-                        Short.valueOf((short) (tabIndex + 1)),
+                        new Short((short) (tabIndex + 1)),
                         Boolean.TRUE,
                         btnSize
                     });
@@ -181,8 +181,8 @@ public class ButtonList implements XItem
                     {
                         btnSize,
                         "HID:" + helpURL++,
-                        Integer.valueOf(pos.Width + (m_aButtonSize.Width + gap.Width) * cols + gap.Width - btnSize.intValue() + 1),
-                        Integer.valueOf(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + 1),
+                        new Integer(pos.Width + (m_aButtonSize.Width + gap.Width) * cols + gap.Width - btnSize.intValue() + 1),
+                        new Integer(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + 1),
                         step,
                         new Short((short) (tabIndex + 2)),
                         Boolean.TRUE,
@@ -191,14 +191,14 @@ public class ButtonList implements XItem
 
             lblCounter = dialog.insertLabel(m_aControlName + "_lblCounter", pNames1, new Object[]
                     {
-                        Integer.valueOf(LINE_HEIGHT),
+                        new Integer(LINE_HEIGHT),
                         "",
-                        Integer.valueOf(pos.Width + btnSize.intValue() + 1),
-                        Integer.valueOf(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + ((btnSize.intValue() - LINE_HEIGHT) / 2)),
+                        new Integer(pos.Width + btnSize.intValue() + 1),
+                        new Integer(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + ((btnSize.intValue() - LINE_HEIGHT) / 2)),
                         step,
-                        Short.valueOf((short) 0),
+                        new Short((short) 0),
                         Boolean.FALSE,
-                        Integer.valueOf(cols * (m_aButtonSize.Width + gap.Width) + gap.Width - 2 * btnSize.intValue() - 1)
+                        new Integer(cols * (m_aButtonSize.Width + gap.Width) + gap.Width - 2 * btnSize.intValue() - 1)
                     });
 
             Helper.setUnoPropertyValue(getModel(lblCounter), "Align", new Short((short) 1));
@@ -213,8 +213,8 @@ public class ButtonList implements XItem
         m_aButtons = new XControl[rows * cols];
 
 
-        m_aButtonHeight = Integer.valueOf(m_aButtonSize.Height);
-        m_aButtonWidth = Integer.valueOf(m_aButtonSize.Width);
+        m_aButtonHeight = new Integer(m_aButtonSize.Height);
+        m_aButtonWidth = new Integer(m_aButtonSize.Width);
 
         for (int r = 0; r < rows; r++)
         {
@@ -256,13 +256,13 @@ public class ButtonList implements XItem
                 },
                 new Object[]
                 {
-                    /* Short.valueOf((short) 1), */ /* NO_BORDER, */
+                    /* new Short((short) 1), */ /* NO_BORDER, */
                     /* BACKGROUND_COLOR, */
                     m_aButtonHeight,
                     "HID:" + helpURL++,
                     /* "Test", */
-                    Integer.valueOf(nButtonX),
-                    Integer.valueOf(nButtonY),
+                    new Integer(nButtonX),
+                    new Integer(nButtonY),
                     /* scaleImages, */
                     step,
                     m_tabIndex,
@@ -317,7 +317,7 @@ public class ButtonList implements XItem
                     oUnoDialog.getPeerConfiguration().setImageUrl(m_aButtons[i].getModel(), oResources[0], oResources[1]);
 //                    Helper.setUnoPropertyValue(m_aButtons[i].getModel(), "ImageURL", oResources[0]);
                 }
-                boolean bTabStop = Boolean.TRUE; // focusable ? Boolean.TRUE : Boolean.FALSE;
+                Boolean bTabStop = new Boolean(true); // focusable ? Boolean.TRUE : Boolean.FALSE;
                 Helper.setUnoPropertyValue(m_aButtons[i].getModel(), "Tabstop", bTabStop);
                 // Object aEnabled = Helper.getUnoPropertyValue(m_aButtons[i].getModel(), "Enabled");
                 if (refreshOverNull)
@@ -349,7 +349,7 @@ public class ButtonList implements XItem
     }
 
     /** Utility field holding list of ItemListeners. */
-    private transient java.util.ArrayList<XItemListener> m_aItemListenerList;
+    private transient java.util.ArrayList m_aItemListenerList;
     private void setVisible(Object control, boolean visible)
     {
         final XWindow xWindow = (XWindow) UnoRuntime.queryInterface(XWindow.class, control);
@@ -430,7 +430,7 @@ public class ButtonList implements XItem
     {
         if (m_aItemListenerList == null)
         {
-            m_aItemListenerList = new java.util.ArrayList<XItemListener>();
+            m_aItemListenerList = new java.util.ArrayList();
         }
         m_aItemListenerList.add(listener);
     }
@@ -862,12 +862,12 @@ public class ButtonList implements XItem
                 if (i == m_nCurrentSelection)
                 {
                     final short one = 1;
-                    aHelper.setPropertyValueDontThrow("State", Short.valueOf(one));
+                    aHelper.setPropertyValueDontThrow("State", new Short(one));
                 }
                 else
                 {
                     final short zero = 0;
-                    aHelper.setPropertyValueDontThrow("State", Short.valueOf(zero));
+                    aHelper.setPropertyValueDontThrow("State", new Short(zero));
                 }
             }
         }
@@ -889,7 +889,7 @@ public class ButtonList implements XItem
         if (nState == 0)
         {
             // this will avoid a wrong state, if already pressed.
-            aHelper.setPropertyValueDontThrow("State", Short.valueOf((short)1));
+            aHelper.setPropertyValueDontThrow("State", new Short((short)1));
         }
 
         // check which Button is pressed.
--- wizards/com/sun/star/wizards/ui/FilterComponent.java.old	2009-10-01 20:55:00.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/FilterComponent.java	2009-10-01 20:29:10.000000000 +0200
@@ -262,7 +262,7 @@ public class FilterComponent
     private void togglefollowingControlRow(String _scurName)
     {
         // String sNameSuffix = sIncSuffix + "_" + _scurName.substring(_scurName.length() - 1, _scurName.length());
-        int Index = Integer.valueOf(getIndexNumber(_scurName)).intValue();
+        int Index = new Integer(getIndexNumber(_scurName)).intValue();
         if (Index < oControlRows.length)
         {
             boolean bValue = oControlRows[Index - 1].isConditionComplete();
@@ -385,7 +385,7 @@ public class FilterComponent
                 PropertyValue aduplicatecondition = filterconditions[iduplicate[0]][iduplicate[1]];
                 String smsgDuplicateCondition = getDisplayCondition(sDuplicateCondition, aduplicatecondition, null);
                 CurUnoDialog.showMessageBox("WarningBox", VclWindowPeerAttribute.OK, smsgDuplicateCondition);
-                CurUnoDialog.vetoableChange(new java.beans.PropertyChangeEvent(CurUnoDialog, "Steps", Integer.valueOf(1), Integer.valueOf(2)));
+                CurUnoDialog.vetoableChange(new java.beans.PropertyChangeEvent(CurUnoDialog, "Steps", new Integer(1), new Integer(2)));
                 return new PropertyValue[][]
                         {
                         };
@@ -499,7 +499,7 @@ public class FilterComponent
         {
             this.curHelpID = _firstHelpID;
             this.xMSF = _xMSF;
-            this.IStep = Integer.valueOf(iStep);
+            this.IStep = new Integer(iStep);
 
             curtabindex = UnoDialog.setInitialTabindex(iStep);
             this.CurUnoDialog = CurUnoDialog;
@@ -538,15 +538,15 @@ public class FilterComponent
                     },
                     new Object[]
                     {
-                        Integer.valueOf(9),
+                        new Integer(9),
                         "HID:" + curHelpID++,
                         soptMatchAll,
-                        Integer.valueOf(iPosX),
-                        Integer.valueOf(iPosY),
-                        Short.valueOf((short) 1),
+                        new Integer(iPosX),
+                        new Integer(iPosY),
+                        new Short((short) 1),
                         IStep,
-                        Short.valueOf(curtabindex++),
-                        Integer.valueOf(203)
+                        new Short(curtabindex++),
+                        new Integer(203)
                     });
             optMatchAny = CurUnoDialog.insertRadioButton("optMatchAny" + sIncSuffix, SOOPTORMODE, new ItemListenerImpl(),
                     new String[]
@@ -562,14 +562,14 @@ public class FilterComponent
                     },
                     new Object[]
                     {
-                        Integer.valueOf(9),
+                        new Integer(9),
                         "HID:" + curHelpID++,
                         soptMatchAny,
-                        Integer.valueOf(iPosX),
-                        Integer.valueOf(iPosY + 12),
+                        new Integer(iPosX),
+                        new Integer(iPosY + 12),
                         IStep,
-                        Short.valueOf(curtabindex++),
-                        Integer.valueOf(203)
+                        new Short(curtabindex++),
+                        new Integer(203)
                     });
             getfilterstate();
 
@@ -698,13 +698,13 @@ public class FilterComponent
                         new Object[]
                         {
                             Boolean.valueOf(isEnabled()),
-                            Integer.valueOf(9),
+                            new Integer(9),
                             slblFieldNames,
-                            Integer.valueOf(nPosX1),
-                            Integer.valueOf(iCompPosY + 13),
+                            new Integer(nPosX1),
+                            new Integer(iCompPosY + 13),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nFieldWidth)
+                            new Short(curtabindex++),
+                            new Integer(nFieldWidth)
                         });
 
                 // Label Operator
@@ -723,13 +723,13 @@ public class FilterComponent
                         new Object[]
                         {
                             Boolean.valueOf(isEnabled()),
-                            Integer.valueOf(9),
+                            new Integer(9),
                             slblOperators,
-                            Integer.valueOf(nPosX2),
-                            Integer.valueOf(iCompPosY + 13),
+                            new Integer(nPosX2),
+                            new Integer(iCompPosY + 13),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nOperatorWidth)
+                            new Short(curtabindex++),
+                            new Integer(nOperatorWidth)
                         });
 
                 // Label Value
@@ -748,13 +748,13 @@ public class FilterComponent
                         new Object[]
                         {
                             Boolean.valueOf(isEnabled()),
-                            Integer.valueOf(9),
+                            new Integer(9),
                             slblValue,
-                            Integer.valueOf(nPosX3),
-                            Integer.valueOf(iCompPosY + 13),
+                            new Integer(nPosX3),
+                            new Integer(iCompPosY + 13),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nValueWidth)
+                            new Short(curtabindex++),
+                            new Integer(nValueWidth)
                         });
 
                 // Listbox Fields
@@ -776,14 +776,14 @@ public class FilterComponent
                         {
                             Boolean.valueOf(isEnabled()),
                             Boolean.TRUE,
-                            Integer.valueOf(13),
+                            new Integer(13),
                             "HID:" + _firstRowHelpID++,
-                            Short.valueOf(UnoDialog.getListBoxLineCount() /* 7 */),
-                            Integer.valueOf(nPosX1),
-                            Integer.valueOf(iCompPosY + 23),
+                            new Short(UnoDialog.getListBoxLineCount() /* 7 */),
+                            new Integer(nPosX1),
+                            new Integer(iCompPosY + 23),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nFieldWidth)
+                            new Short(curtabindex++),
+                            new Integer(nFieldWidth)
                         });
 
                 // Listbox Operators
@@ -806,15 +806,15 @@ public class FilterComponent
                         {
                             Boolean.valueOf(isEnabled()),
                             Boolean.TRUE,
-                            Integer.valueOf(13),
+                            new Integer(13),
                             "HID:" + _firstRowHelpID++,
-                            Short.valueOf((short) sLogicOperators.length /* 7 */),
-                            Integer.valueOf(nPosX2),
-                            Integer.valueOf(iCompPosY + 23),
+                            new Short((short) sLogicOperators.length /* 7 */),
+                            new Integer(nPosX2),
+                            new Integer(iCompPosY + 23),
                             IStep,
                             sLogicOperators,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nOperatorWidth)
+                            new Short(curtabindex++),
+                            new Integer(nOperatorWidth)
                         });
                 ControlElements[SOTXTVALUE] = (XInterface) CurUnoDialog.insertFormattedField("txtValue" + sCompSuffix, SO_TEXTFIELDLIST[Index], new TextListenerImpl(),
                         new String[]
@@ -831,13 +831,13 @@ public class FilterComponent
                         new Object[]
                         {
                             Boolean.valueOf(isEnabled()),
-                            Integer.valueOf(13),
+                            new Integer(13),
                             "HID:" + _firstRowHelpID++,
-                            Integer.valueOf(nPosX3),
-                            Integer.valueOf(iCompPosY + 23),
+                            new Integer(nPosX3),
+                            new Integer(iCompPosY + 23),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nValueWidth)
+                            new Short(curtabindex++),
+                            new Integer(nValueWidth)
                         });
 
 //                ControlElements[6] = CurUnoDialog.insertListBox((new StringBuilder()).append("lstBoolean").append(sCompSuffix).toString(), SO_BOOLEANLIST[Index], null, new ItemListenerImpl(), new String[] {
@@ -958,10 +958,10 @@ public class FilterComponent
                 else if (AnyConverter.isBoolean(_filtercondition.Value))
                 {
                     boolean b = AnyConverter.toBoolean(_filtercondition.Value);
-                    double nValue = 0.0;
+                    Double nValue = new Double(0.0);
                     if (b)
                     {
-                        nValue = 1.0;
+                        nValue = new Double(1.0);
                     }
                     Helper.setUnoPropertyValue(UnoDialog.getModel(ControlElements[SOTXTVALUE]), "EffectiveValue", nValue);
                 }
--- wizards/com/sun/star/wizards/table/PrimaryKeyHandler.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/table/PrimaryKeyHandler.java	2009-10-01 20:52:59.000000000 +0200
@@ -175,7 +175,7 @@ public class PrimaryKeyHandler implement
                     Boolean.FALSE,
                     new Integer(12),
                     "HID:41231",
-                    Short.valueOf(UnoDialog.getListBoxLineCount()),
+                    new Short(UnoDialog.getListBoxLineCount()),
                     new Integer(162),
                     new Integer(115),
                     IPRIMEKEYSTEP,
--- wizards/com/sun/star/wizards/table/ScenarioSelector.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/table/ScenarioSelector.java	2009-10-01 20:52:31.000000000 +0200
@@ -221,7 +221,7 @@ public class ScenarioSelector extends Fi
     public String[] getSelectedFieldNames()
     {
         String[] displayfieldnames = super.getSelectedFieldNames();
-        Vector<String> afieldnameVector = new Vector<String>();
+        Vector afieldnameVector = new Vector();
         int a = 0;
         for (int i = 0; i < displayfieldnames.length; i++)
         {
--- wizards/com/sun/star/wizards/common/JavaTools.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/common/JavaTools.java	2009-10-01 20:02:37.000000000 +0200
@@ -142,7 +142,7 @@ public class JavaTools
      * @param _aIntegerVector
      * @return
      */
-    public static int[] IntegerTointList(Vector<Integer> _aIntegerVector)
+    public static int[] IntegerTointList(Vector _aIntegerVector)
     {
         try
         {
@@ -168,7 +168,7 @@ public class JavaTools
      * @param _aBooleanVector
      * @return
      */
-    public static boolean[] BooleanTobooleanList(Vector<Boolean> _aBooleanVector)
+    public static boolean[] BooleanTobooleanList(Vector _aBooleanVector)
     {
         try
         {
--- wizards/com/sun/star/wizards/common/PropertySetHelper.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/common/PropertySetHelper.java	2009-10-01 20:09:30.000000000 +0200
@@ -45,7 +45,7 @@ public class PropertySetHelper
 {
 
     protected XPropertySet m_xPropertySet;
-    private HashMap<String, Object> m_aHashMap;
+    private HashMap m_aHashMap;
 
     public PropertySetHelper(Object _aObj)
     {
@@ -56,11 +56,11 @@ public class PropertySetHelper
         m_xPropertySet = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class, _aObj);
     }
 
-    private HashMap<String, Object> getHashMap()
+    private HashMap getHashMap()
     {
         if (m_aHashMap == null)
         {
-            m_aHashMap = new HashMap<String, Object>();
+            m_aHashMap = new HashMap();
         }
         return m_aHashMap;
     }
--- wizards/com/sun/star/wizards/common/FileAccess.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/common/FileAccess.java	2009-10-01 20:16:08.000000000 +0200
@@ -216,12 +216,12 @@ public class FileAccess
         return ResultPath;
     }
 
-    public static ArrayList<String> getOfficePaths(XMultiServiceFactory xMSF, String _sPath, String sType, String sSearchDir) throws NoValidPathException
+    public static ArrayList getOfficePaths(XMultiServiceFactory xMSF, String _sPath, String sType, String sSearchDir) throws NoValidPathException
     {
         //This method currently only works with sPath="Template"
 
         // String ResultPath = "";
-        ArrayList<String> aPathList = new ArrayList<String>();
+        ArrayList aPathList = new ArrayList();
         String Template_writable = "";
         String[] Template_internal;
         String[] Template_user;
@@ -610,8 +610,8 @@ public class FileAccess
         String[][] LocLayoutFiles = new String[2][]; //{"",""}{""};
         try
         {
-            java.util.Vector<String> TitleVector = null;
-            java.util.Vector<String> NameVector = null;
+            java.util.Vector TitleVector = null;
+            java.util.Vector NameVector = null;
 
             XInterface xDocInterface = (XInterface) xMSF.createInstance("com.sun.star.document.DocumentProperties");
             XDocumentProperties xDocProps = (XDocumentProperties) UnoRuntime.queryInterface(XDocumentProperties.class, xDocInterface);
@@ -621,8 +621,8 @@ public class FileAccess
 
             String[] nameList = xSimpleFileAccess.getFolderContents(FolderName, false);
 
-            TitleVector = new java.util.Vector<String>(/*nameList.length*/);
-            NameVector = new java.util.Vector<String>(nameList.length);
+            TitleVector = new java.util.Vector(/*nameList.length*/);
+            NameVector = new java.util.Vector(nameList.length);
 
             FilterName = FilterName == null || FilterName.equals("") ? null : FilterName + "-";
 
@@ -740,8 +740,8 @@ public class FileAccess
         {
             throw new NoValidPathException(null, "Path not given.");
         }
-        ArrayList<String> TitleVector = new ArrayList<String>();
-        ArrayList<String> URLVector = new ArrayList<String>();
+        ArrayList TitleVector = new ArrayList();
+        ArrayList URLVector = new ArrayList();
 
         com.sun.star.ucb.XSimpleFileAccess xSimpleFileAccess = null;
         try
@@ -1141,7 +1141,7 @@ public class FileAccess
         String[] sFileData = null;
         try
         {
-            Vector<String> oDataVector = new Vector<String>();
+            Vector oDataVector = new Vector();
             Object oSimpleFileAccess = _xMSF.createInstance("com.sun.star.ucb.SimpleFileAccess");
             XSimpleFileAccess xSimpleFileAccess = (XSimpleFileAccess) com.sun.star.uno.UnoRuntime.queryInterface(XSimpleFileAccess.class, oSimpleFileAccess);
             if (xSimpleFileAccess.exists(_filepath))
--- wizards/com/sun/star/wizards/report/ReportWizard.java.old	2009-09-10 19:49:19.000000000 +0200
+++ wizards/com/sun/star/wizards/report/ReportWizard.java	2009-10-01 20:51:42.000000000 +0200
@@ -145,7 +145,7 @@ public class ReportWizard extends Wizard
                     },
                     new Object[]
                     {
-                        Integer.valueOf(210),
+                        new Integer(210),
                         Boolean.TRUE,
                         "DialogReport",
                         new Integer(102),
