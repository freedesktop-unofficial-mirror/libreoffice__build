diff -purN wizards.old/com/sun/star/wizards/common/Desktop.java wizards/com/sun/star/wizards/common/Desktop.java
--- wizards.old/com/sun/star/wizards/common/Desktop.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/common/Desktop.java	2010-09-07 20:11:52.000000000 +0200
@@ -181,8 +181,8 @@ public class Desktop
     {
         XMultiComponentFactory componentFactory = getMultiComponentFactory();
         Object xUrlResolver = componentFactory.createInstanceWithContext( "com.sun.star.bridge.UnoUrlResolver", null );
-        XUnoUrlResolver urlResolver = UnoRuntime.queryInterface(XUnoUrlResolver.class, xUrlResolver);
-        XMultiServiceFactory orb = UnoRuntime.queryInterface(XMultiServiceFactory.class, urlResolver.resolve( connectStr ) );
+        XUnoUrlResolver urlResolver = (XUnoUrlResolver) UnoRuntime.queryInterface(XUnoUrlResolver.class, xUrlResolver);
+        XMultiServiceFactory orb = (XMultiServiceFactory) UnoRuntime.queryInterface(XMultiServiceFactory.class, urlResolver.resolve( connectStr ) );
         return orb;
     }
 
diff -purN wizards.old/com/sun/star/wizards/common/FileAccess.java wizards/com/sun/star/wizards/common/FileAccess.java
--- wizards.old/com/sun/star/wizards/common/FileAccess.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/common/FileAccess.java	2010-09-07 20:11:37.000000000 +0200
@@ -213,12 +213,12 @@ public class FileAccess
         return ResultPath;
     }
 
-    public static ArrayList<String> getOfficePaths(XMultiServiceFactory xMSF, String _sPath, String sType, String sSearchDir) throws NoValidPathException
+    public static ArrayList getOfficePaths(XMultiServiceFactory xMSF, String _sPath, String sType, String sSearchDir) throws NoValidPathException
     {
         //This method currently only works with sPath="Template"
 
         // String ResultPath = "";
-        ArrayList<String> aPathList = new ArrayList<String>();
+        ArrayList aPathList = new ArrayList();
         String Template_writable = "";
         String[] Template_internal;
         String[] Template_user;
@@ -607,8 +607,8 @@ public class FileAccess
         String[][] LocLayoutFiles = new String[2][]; //{"",""}{""};
         try
         {
-            java.util.Vector<String> TitleVector = null;
-            java.util.Vector<String> NameVector = null;
+            java.util.Vector TitleVector = null;
+            java.util.Vector NameVector = null;
 
             XInterface xDocInterface = (XInterface) xMSF.createInstance("com.sun.star.document.DocumentProperties");
             XDocumentProperties xDocProps = (XDocumentProperties) UnoRuntime.queryInterface(XDocumentProperties.class, xDocInterface);
@@ -618,8 +618,8 @@ public class FileAccess
 
             String[] nameList = xSimpleFileAccess.getFolderContents(FolderName, false);
 
-            TitleVector = new java.util.Vector<String>(/*nameList.length*/);
-            NameVector = new java.util.Vector<String>(nameList.length);
+            TitleVector = new java.util.Vector(/*nameList.length*/);
+            NameVector = new java.util.Vector(nameList.length);
 
             FilterName = FilterName == null || FilterName.equals("") ? null : FilterName + "-";
 
@@ -737,8 +737,8 @@ public class FileAccess
         {
             throw new NoValidPathException(null, "Path not given.");
         }
-        ArrayList<String> TitleVector = new ArrayList<String>();
-        ArrayList<String> URLVector = new ArrayList<String>();
+        ArrayList TitleVector = new ArrayList();
+        ArrayList URLVector = new ArrayList();
 
         com.sun.star.ucb.XSimpleFileAccess xSimpleFileAccess = null;
         try
@@ -1138,7 +1138,7 @@ public class FileAccess
         String[] sFileData = null;
         try
         {
-            Vector<String> oDataVector = new Vector<String>();
+            Vector oDataVector = new Vector();
             Object oSimpleFileAccess = _xMSF.createInstance("com.sun.star.ucb.SimpleFileAccess");
             XSimpleFileAccess xSimpleFileAccess = (XSimpleFileAccess) com.sun.star.uno.UnoRuntime.queryInterface(XSimpleFileAccess.class, oSimpleFileAccess);
             if (xSimpleFileAccess.exists(_filepath))
diff -purN wizards.old/com/sun/star/wizards/common/JavaTools.java wizards/com/sun/star/wizards/common/JavaTools.java
--- wizards.old/com/sun/star/wizards/common/JavaTools.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/common/JavaTools.java	2010-09-07 20:11:37.000000000 +0200
@@ -139,7 +139,7 @@ public class JavaTools
      * @param _aIntegerVector
      * @return
      */
-    public static int[] IntegerTointList(Vector<Integer> _aIntegerVector)
+    public static int[] IntegerTointList(Vector _aIntegerVector)
     {
         try
         {
@@ -165,7 +165,7 @@ public class JavaTools
      * @param _aBooleanVector
      * @return
      */
-    public static boolean[] BooleanTobooleanList(Vector<Boolean> _aBooleanVector)
+    public static boolean[] BooleanTobooleanList(Vector _aBooleanVector)
     {
         try
         {
diff -purN wizards.old/com/sun/star/wizards/common/NamedValueCollection.java wizards/com/sun/star/wizards/common/NamedValueCollection.java
--- wizards.old/com/sun/star/wizards/common/NamedValueCollection.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/common/NamedValueCollection.java	2010-09-07 20:11:52.000000000 +0200
@@ -20,7 +20,7 @@ import java.util.Map.Entry;
  */
 public class NamedValueCollection
 {
-    final private HashMap< String, Object >    m_values = new HashMap< String, Object >();
+    final private HashMap    m_values = new HashMap();
 
     public NamedValueCollection()
     {
@@ -37,28 +37,26 @@ public class NamedValueCollection
         m_values.put( i_name, i_value );
     }
 
-    @SuppressWarnings("unchecked")
-    public final < T extends Object > T getOrDefault( final String i_key, final T i_default )
+    public final Object getOrDefault( final String i_key, final Object i_default )
     {
         if ( m_values.containsKey( i_key ) )
         {
             final Object value = m_values.get( i_key );
             try
             {
-                return (T)value;
+                return value;
             }
             catch ( ClassCastException e ) { }
         }
         return i_default;
     }
 
-    @SuppressWarnings("unchecked")
-    public final < T extends XInterface > T queryOrDefault( final String i_key, final T i_default, Class i_interfaceClass )
+    public final XInterface queryOrDefault( final String i_key, final XInterface i_default, Class i_interfaceClass )
     {
         if ( m_values.containsKey( i_key ) )
         {
             final Object value = m_values.get( i_key );
-            return (T)UnoRuntime.queryInterface( i_interfaceClass, value );
+            return (XInterface) UnoRuntime.queryInterface( i_interfaceClass, value );
         }
         return i_default;
     }
@@ -72,15 +70,15 @@ public class NamedValueCollection
     {
         PropertyValue[] values = new PropertyValue[ m_values.size() ];
 
-        Iterator< Entry< String, Object > > iter = m_values.entrySet().iterator();
+        Iterator iter = m_values.entrySet().iterator();
         int i = 0;
         while ( iter.hasNext() )
         {
-            Entry< String, Object > entry = iter.next();
+            Entry entry = (Entry) iter.next();
             values[i++] = new PropertyValue(
-                entry.getKey(),
+                (String) entry.getKey(),
                 0,
-                entry.getValue(),
+                (String) entry.getValue(),
                 PropertyState.DIRECT_VALUE
             );
         }
diff -purN wizards.old/com/sun/star/wizards/common/PropertySetHelper.java wizards/com/sun/star/wizards/common/PropertySetHelper.java
--- wizards.old/com/sun/star/wizards/common/PropertySetHelper.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/common/PropertySetHelper.java	2010-09-07 20:11:37.000000000 +0200
@@ -41,7 +41,7 @@ public class PropertySetHelper
 {
 
     protected XPropertySet m_xPropertySet;
-    private HashMap<String, Object> m_aHashMap;
+    private HashMap m_aHashMap;
 
     public PropertySetHelper(Object _aObj)
     {
@@ -52,11 +52,11 @@ public class PropertySetHelper
         m_xPropertySet = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class, _aObj);
     }
 
-    private HashMap<String, Object> getHashMap()
+    private HashMap getHashMap()
     {
         if (m_aHashMap == null)
         {
-            m_aHashMap = new HashMap<String, Object>();
+            m_aHashMap = new HashMap();
         }
         return m_aHashMap;
     }
diff -purN wizards.old/com/sun/star/wizards/db/CommandMetaData.java wizards/com/sun/star/wizards/db/CommandMetaData.java
--- wizards.old/com/sun/star/wizards/db/CommandMetaData.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/db/CommandMetaData.java	2010-09-07 20:11:52.000000000 +0200
@@ -149,7 +149,7 @@ public class CommandMetaData extends DBM
                 String CurCommandName = CurFieldColumn.getCommandName();
                 CommandObject oCommand = getTableByName(CurCommandName);
                 Object oColumn = oCommand.getColumns().getByName(CurFieldColumn.getFieldName());
-                XPropertySet xColumn = UnoRuntime.queryInterface( XPropertySet.class, oColumn );
+                XPropertySet xColumn = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, oColumn );
                 return xColumn;
             } 
             catch (Exception exception) 
@@ -293,7 +293,7 @@ public class CommandMetaData extends DBM
             try 
             {
                 // Object oField;
-                java.util.Vector<String> ResultFieldNames = new java.util.Vector<String>(10);
+                java.util.Vector ResultFieldNames = new java.util.Vector(10);
                 String[] FieldNames;
                 CommandObject oCommand = this.getCommandByName(_commandname, _commandtype);
                 FieldNames = oCommand.getColumns().getElementNames();
@@ -342,7 +342,7 @@ public class CommandMetaData extends DBM
 
     public String[] getOrderableColumns(String[] _fieldnames)
         {
-            Vector<String> aOrderableColumns = new Vector<String>();
+            Vector aOrderableColumns = new Vector();
             int ncount = 0;
             for (int i = 0; i < _fieldnames.length; i++)
             {
@@ -419,7 +419,7 @@ public class CommandMetaData extends DBM
         {
             try 
             {
-                Vector<String> numericfieldsvector = new java.util.Vector<String>();
+                Vector numericfieldsvector = new java.util.Vector();
                 for (int i = 0; i < FieldColumns.length; i++) 
                 {
                     if (isnumeric(FieldColumns[i]))
@@ -440,7 +440,7 @@ public class CommandMetaData extends DBM
 
     public String[] getFieldNames(String[] _sDisplayFieldNames, String _sCommandName)
         {
-            Vector<String> sFieldNamesVector = new java.util.Vector<String>();
+            Vector sFieldNamesVector = new java.util.Vector();
             for (int i = 0; i < FieldColumns.length; i++) 
             {
                 if (_sCommandName.equals(FieldColumns[i].getCommandName())) 
@@ -483,7 +483,7 @@ public class CommandMetaData extends DBM
         {
             try 
             {
-                Vector<String> nonaggregatefieldsvector = new java.util.Vector<String>();
+                Vector nonaggregatefieldsvector = new java.util.Vector();
                 for (int i = 0; i < FieldColumns.length; i++) 
                 {
                     if (JavaTools.FieldInTable(AggregateFieldNames, FieldColumns[i].getDisplayFieldName()) == -1)
@@ -626,13 +626,13 @@ public class CommandMetaData extends DBM
                 {
                     if (xDBMetaData.supportsIntegrityEnhancementFacility())
                     {
-                        java.util.Vector<String> TableVector = new java.util.Vector<String>();
+                        java.util.Vector TableVector = new java.util.Vector();
                         Object oTable = getTableNamesAsNameAccess().getByName(_stablename);
-                        XKeysSupplier xKeysSupplier = UnoRuntime.queryInterface( XKeysSupplier.class, oTable );
+                        XKeysSupplier xKeysSupplier = (XKeysSupplier) UnoRuntime.queryInterface( XKeysSupplier.class, oTable );
                         xIndexKeys = xKeysSupplier.getKeys();
                         for (int i = 0; i < xIndexKeys.getCount(); i++)
                         {
-                            XPropertySet xPropertySet = UnoRuntime.queryInterface( XPropertySet.class, xIndexKeys.getByIndex( i ) );
+                            XPropertySet xPropertySet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, xIndexKeys.getByIndex( i ) );
                             int curtype = AnyConverter.toInt(xPropertySet.getPropertyValue("Type"));
                             if (curtype == KeyType.FOREIGN)
                             {
@@ -671,7 +671,7 @@ public class CommandMetaData extends DBM
             {
                 for (int i = 0; i < xIndexKeys.getCount(); i++)
                 {
-                    XPropertySet xPropertySet = UnoRuntime.queryInterface( XPropertySet.class, xIndexKeys.getByIndex( i ) );
+                    XPropertySet xPropertySet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, xIndexKeys.getByIndex( i ) );
                     int curtype = AnyConverter.toInt(xPropertySet.getPropertyValue("Type"));
                     if (curtype == KeyType.FOREIGN)
                     {
@@ -680,14 +680,14 @@ public class CommandMetaData extends DBM
                         {
                             if (scurreftablename.equals(_sreferencedtablename))
                             {
-                                XColumnsSupplier xColumnsSupplier = UnoRuntime.queryInterface( XColumnsSupplier.class, xPropertySet );
+                                XColumnsSupplier xColumnsSupplier = (XColumnsSupplier) UnoRuntime.queryInterface( XColumnsSupplier.class, xPropertySet );
                                 String[] smastercolnames = xColumnsSupplier.getColumns().getElementNames();
                                 skeycolumnnames = new String[2][smastercolnames.length];
                                 skeycolumnnames[0] = smastercolnames;
                                 skeycolumnnames[1] = new String[smastercolnames.length];
                                 for (int n = 0; n < smastercolnames.length; n++)
                                 {
-                                    XPropertySet xcolPropertySet = UnoRuntime.queryInterface( XPropertySet.class, xColumnsSupplier.getColumns().getByName( smastercolnames[n] ) );
+                                    XPropertySet xcolPropertySet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, xColumnsSupplier.getColumns().getByName( smastercolnames[n] ) );
                                     skeycolumnnames[1][n] = AnyConverter.toString(xcolPropertySet.getPropertyValue("RelatedColumn"));
                                 }
                                 return skeycolumnnames;
diff -purN wizards.old/com/sun/star/wizards/db/DatabaseObjectWizard.java wizards/com/sun/star/wizards/db/DatabaseObjectWizard.java
--- wizards.old/com/sun/star/wizards/db/DatabaseObjectWizard.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/db/DatabaseObjectWizard.java	2010-09-07 20:11:52.000000000 +0200
@@ -36,16 +36,16 @@ public abstract class DatabaseObjectWiza
         m_wizardContext = i_wizardContext;
 
         final NamedValueCollection wizardContext = new NamedValueCollection( m_wizardContext );
-        m_docUI = wizardContext.queryOrDefault( "DocumentUI", (XDatabaseDocumentUI)null, XDatabaseDocumentUI.class );
+        m_docUI = (XDatabaseDocumentUI) wizardContext.queryOrDefault( "DocumentUI", (XDatabaseDocumentUI)null, XDatabaseDocumentUI.class );
 
         if ( m_docUI != null )
         {
-            XController docController = UnoRuntime.queryInterface( XController.class, m_docUI );
+            XController docController = (XController) UnoRuntime.queryInterface( XController.class, m_docUI );
             m_frame = docController.getFrame();
         }
         else
         {
-            XFrame parentFrame = wizardContext.queryOrDefault( "ParentFrame", (XFrame)null, XFrame.class );
+            XFrame parentFrame = (XFrame) wizardContext.queryOrDefault( "ParentFrame", (XFrame)null, XFrame.class );
             if ( parentFrame != null )
                 m_frame = parentFrame;
             else
diff -purN wizards.old/com/sun/star/wizards/db/DBMetaData.java wizards/com/sun/star/wizards/db/DBMetaData.java
--- wizards.old/com/sun/star/wizards/db/DBMetaData.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/db/DBMetaData.java	2010-09-07 20:11:52.000000000 +0200
@@ -218,9 +218,9 @@ public class DBMetaData
         {
             this.xMSF = xMSF;
             xDatabaseContext = (XInterface) xMSF.createInstance("com.sun.star.sdb.DatabaseContext");
-            xNameAccess = UnoRuntime.queryInterface( XNameAccess.class, xDatabaseContext );
+            xNameAccess = (XNameAccess) UnoRuntime.queryInterface( XNameAccess.class, xDatabaseContext );
             XInterface xInteractionHandler = (XInterface) xMSF.createInstance("com.sun.star.task.InteractionHandler");
-            oInteractionHandler = UnoRuntime.queryInterface( XInteractionHandler.class, xInteractionHandler );
+            oInteractionHandler = (XInteractionHandler) UnoRuntime.queryInterface( XInteractionHandler.class, xInteractionHandler );
             DataSourceNames = xNameAccess.getElementNames();
         }
         catch (Exception exception)
@@ -261,7 +261,6 @@ public class DBMetaData
         return getTableNamesAsNameAccess().hasByName(_stablename);
     }
 
-    @SuppressWarnings("unchecked")
     public void setTableByName(String _tableName)
     {
         CommandObject oTableObject = new CommandObject(_tableName, com.sun.star.sdb.CommandType.TABLE);
@@ -330,10 +329,10 @@ public class DBMetaData
                 {
                     oCommand = getQueryNamesAsNameAccess().getByName(Name);
                 }
-                XColumnsSupplier xCommandCols = UnoRuntime.queryInterface( XColumnsSupplier.class, oCommand );
-                xPropertySet = UnoRuntime.queryInterface( XPropertySet.class, oCommand );
+                XColumnsSupplier xCommandCols = (XColumnsSupplier) UnoRuntime.queryInterface( XColumnsSupplier.class, oCommand );
+                xPropertySet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, oCommand );
 // TODO: Performance leak getColumns() take very long.
-                xColumns = UnoRuntime.queryInterface( XNameAccess.class, xCommandCols.getColumns() );
+                xColumns = (XNameAccess) UnoRuntime.queryInterface( XNameAccess.class, xCommandCols.getColumns() );
             }
             catch (Exception exception)
             {
@@ -378,14 +377,14 @@ public class DBMetaData
 
     public XNameAccess getQueryNamesAsNameAccess()
     {
-        XQueriesSupplier xDBQueries = UnoRuntime.queryInterface( XQueriesSupplier.class, DBConnection );
+        XQueriesSupplier xDBQueries = (XQueriesSupplier) UnoRuntime.queryInterface( XQueriesSupplier.class, DBConnection );
         xQueryNames = xDBQueries.getQueries();
         return xQueryNames;
     }
 
     public XNameAccess getTableNamesAsNameAccess()
     {
-        XTablesSupplier xDBTables = UnoRuntime.queryInterface( XTablesSupplier.class, DBConnection );
+        XTablesSupplier xDBTables = (XTablesSupplier) UnoRuntime.queryInterface( XTablesSupplier.class, DBConnection );
         XNameAccess xTableNames = xDBTables.getTables();
         return xTableNames;
     }
@@ -530,8 +529,8 @@ public class DBMetaData
         if ( m_dataSourceSettings != null )
             return;
 
-        XPropertySet dataSourceProperties = UnoRuntime.queryInterface( XPropertySet.class, getDataSource() );
-        m_dataSourceSettings = UnoRuntime.queryInterface( XPropertySet.class, dataSourceProperties.getPropertyValue( "Settings" ) );
+        XPropertySet dataSourceProperties = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, getDataSource() );
+        m_dataSourceSettings = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, dataSourceProperties.getPropertyValue( "Settings" ) );
     }
 
     public boolean isSQL92CheckEnabled()
@@ -569,7 +568,7 @@ public class DBMetaData
             try
             {
                     Object oDataSource = xNameAccess.getByName(DataSourceName);
-                    m_dataSource = UnoRuntime.queryInterface( XDataSource.class, oDataSource );
+                    m_dataSource = (XDataSource) UnoRuntime.queryInterface( XDataSource.class, oDataSource );
             }
             catch (com.sun.star.container.NoSuchElementException e)
             {
@@ -587,7 +586,7 @@ public class DBMetaData
         {
             this.DataSourceName = _DataSourceName;
             getDataSourceInterfaces();
-            XDocumentDataSource xDocu = UnoRuntime.queryInterface( XDocumentDataSource.class, getDataSource() );
+            XDocumentDataSource xDocu = (XDocumentDataSource) UnoRuntime.queryInterface( XDocumentDataSource.class, getDataSource() );
             if (xDocu != null)
             {
                 xModel = xDocu.getDatabaseDocument();
@@ -601,8 +600,8 @@ public class DBMetaData
 
     public void getDataSourceInterfaces() throws Exception
     {
-        xCompleted = UnoRuntime.queryInterface( XCompletedConnection.class, getDataSource() );
-        xDataSourcePropertySet = UnoRuntime.queryInterface( XPropertySet.class, getDataSource() );
+        xCompleted = (XCompletedConnection) UnoRuntime.queryInterface( XCompletedConnection.class, getDataSource() );
+        xDataSourcePropertySet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, getDataSource() );
         bPasswordIsRequired = ((Boolean) xDataSourcePropertySet.getPropertyValue("IsPasswordRequired")).booleanValue();
     }
 
@@ -613,18 +612,18 @@ public class DBMetaData
             XConnection xConnection = null;
             if (Properties.hasPropertyValue(curproperties, "ActiveConnection"))
             {
-                xConnection = UnoRuntime.queryInterface( XConnection.class, Properties.getPropertyValue( curproperties, "ActiveConnection" ) );
+                xConnection = (XConnection) UnoRuntime.queryInterface( XConnection.class, Properties.getPropertyValue( curproperties, "ActiveConnection" ) );
                 if (xConnection != null)
                 {
-                    com.sun.star.container.XChild child = UnoRuntime.queryInterface( com.sun.star.container.XChild.class, xConnection );
+                    com.sun.star.container.XChild child = (com.sun.star.container.XChild) UnoRuntime.queryInterface( com.sun.star.container.XChild.class, xConnection );
 
-                    m_dataSource = UnoRuntime.queryInterface( XDataSource.class, child.getParent() );
-                    XDocumentDataSource xDocu = UnoRuntime.queryInterface( XDocumentDataSource.class, m_dataSource );
+                    m_dataSource = (XDataSource) UnoRuntime.queryInterface( XDataSource.class, child.getParent() );
+                    XDocumentDataSource xDocu = (XDocumentDataSource) UnoRuntime.queryInterface( XDocumentDataSource.class, m_dataSource );
                     if (xDocu != null)
                     {
                         xModel = xDocu.getDatabaseDocument();
                     }
-                    XPropertySet xPSet = UnoRuntime.queryInterface( XPropertySet.class, m_dataSource );
+                    XPropertySet xPSet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, m_dataSource );
                     if (xPSet != null)
                     {
                         DataSourceName = AnyConverter.toString(xPSet.getPropertyValue("Name"));
@@ -647,8 +646,8 @@ public class DBMetaData
             }
             else if (Properties.hasPropertyValue(curproperties, "DataSource"))
             {
-                m_dataSource = UnoRuntime.queryInterface( XDataSource.class, Properties.getPropertyValue( curproperties, "DataSource" ) );
-                XDocumentDataSource xDocu = UnoRuntime.queryInterface( XDocumentDataSource.class, this.m_dataSource );
+                m_dataSource = (XDataSource) UnoRuntime.queryInterface( XDataSource.class, Properties.getPropertyValue( curproperties, "DataSource" ) );
+                XDocumentDataSource xDocu = (XDocumentDataSource) UnoRuntime.queryInterface( XDocumentDataSource.class, this.m_dataSource );
                 if (xDocu != null)
                 {
                     xModel = xDocu.getDatabaseDocument();
@@ -693,7 +692,7 @@ public class DBMetaData
         try
         {
             this.DBConnection = _DBConnection;
-            this.ConnectionTools = UnoRuntime.queryInterface( XConnectionTools.class, this.DBConnection );
+            this.ConnectionTools = (XConnectionTools) UnoRuntime.queryInterface( XConnectionTools.class, this.DBConnection );
             getDataSourceObjects();
             return true;
         }
@@ -723,11 +722,11 @@ public class DBMetaData
             }
             else
             {
-                XInteractionHandler xInteractionHandler = UnoRuntime.queryInterface( XInteractionHandler.class, xMSF.createInstance("com.sun.star.task.InteractionHandler") );
+                XInteractionHandler xInteractionHandler = (XInteractionHandler) UnoRuntime.queryInterface( XInteractionHandler.class, xMSF.createInstance("com.sun.star.task.InteractionHandler") );
                 boolean bExitLoop = true;
                 do
                 {
-                    XCompletedConnection xCompleted2 = UnoRuntime.queryInterface( XCompletedConnection.class, _dataSource );
+                    XCompletedConnection xCompleted2 = (XCompletedConnection) UnoRuntime.queryInterface( XCompletedConnection.class, _dataSource );
                     try
                     {
                         DBConnection = xCompleted2.connectWithCompletion( xInteractionHandler );
@@ -755,8 +754,8 @@ public class DBMetaData
             }
             else
             {
-                xConnectionComponent = UnoRuntime.queryInterface( XComponent.class, DBConnection );
-                ConnectionTools = UnoRuntime.queryInterface( XConnectionTools.class, DBConnection );
+                xConnectionComponent = (XComponent) UnoRuntime.queryInterface( XComponent.class, DBConnection );
+                ConnectionTools = (XConnectionTools) UnoRuntime.queryInterface( XConnectionTools.class, DBConnection );
                 getDataSourceObjects();
             }
             return bgetConnection;
@@ -850,16 +849,16 @@ public class DBMetaData
     {
         try
         {
-            XQueryDefinitionsSupplier xQueryDefinitionsSuppl = UnoRuntime.queryInterface( XQueryDefinitionsSupplier.class, m_dataSource );
+            XQueryDefinitionsSupplier xQueryDefinitionsSuppl = (XQueryDefinitionsSupplier) UnoRuntime.queryInterface( XQueryDefinitionsSupplier.class, m_dataSource );
             XNameAccess xQueryDefs = xQueryDefinitionsSuppl.getQueryDefinitions();
-            XSingleServiceFactory xSSFQueryDefs = UnoRuntime.queryInterface( XSingleServiceFactory.class, xQueryDefs );
+            XSingleServiceFactory xSSFQueryDefs = (XSingleServiceFactory) UnoRuntime.queryInterface( XSingleServiceFactory.class, xQueryDefs );
             Object oQuery = xSSFQueryDefs.createInstance(); //"com.sun.star.sdb.QueryDefinition"
-            XPropertySet xPSet = UnoRuntime.queryInterface( XPropertySet.class, oQuery );
+            XPropertySet xPSet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, oQuery );
 
             String s = _oSQLQueryComposer.m_xQueryAnalyzer.getQuery();
             xPSet.setPropertyValue("Command", s);
 
-            XNameContainer xNameCont = UnoRuntime.queryInterface( XNameContainer.class, xQueryDefs );
+            XNameContainer xNameCont = (XNameContainer) UnoRuntime.queryInterface( XNameContainer.class, xQueryDefs );
             ConnectionTools.getObjectNames().checkNameForCreate(com.sun.star.sdb.CommandType.QUERY, _QueryName);
             xNameCont.insertByName(_QueryName, oQuery);
             return true;
@@ -903,23 +902,23 @@ public class DBMetaData
 
     public XHierarchicalNameAccess getReportDocuments()
     {
-        XReportDocumentsSupplier xReportDocumentSuppl = UnoRuntime.queryInterface( XReportDocumentsSupplier.class, this.xModel );
+        XReportDocumentsSupplier xReportDocumentSuppl = (XReportDocumentsSupplier) UnoRuntime.queryInterface( XReportDocumentsSupplier.class, this.xModel );
         xReportDocumentSuppl.getReportDocuments();
-        XHierarchicalNameAccess xReportHier = UnoRuntime.queryInterface( XHierarchicalNameAccess.class, xReportDocumentSuppl.getReportDocuments() );
+        XHierarchicalNameAccess xReportHier = (XHierarchicalNameAccess) UnoRuntime.queryInterface( XHierarchicalNameAccess.class, xReportDocumentSuppl.getReportDocuments() );
         return xReportHier;
     }
 
     public XHierarchicalNameAccess getFormDocuments()
     {
-        XFormDocumentsSupplier xFormDocumentSuppl = UnoRuntime.queryInterface( XFormDocumentsSupplier.class, xModel );
-        XHierarchicalNameAccess xFormHier = UnoRuntime.queryInterface( XHierarchicalNameAccess.class, xFormDocumentSuppl.getFormDocuments() );
+        XFormDocumentsSupplier xFormDocumentSuppl = (XFormDocumentsSupplier) UnoRuntime.queryInterface( XFormDocumentsSupplier.class, xModel );
+        XHierarchicalNameAccess xFormHier = (XHierarchicalNameAccess) UnoRuntime.queryInterface( XHierarchicalNameAccess.class, xFormDocumentSuppl.getFormDocuments() );
         return xFormHier;
     }
 
     public boolean hasFormDocumentByName(String _sFormName)
     {
-        XFormDocumentsSupplier xFormDocumentSuppl = UnoRuntime.queryInterface( XFormDocumentsSupplier.class, xModel );
-        XNameAccess xFormNameAccess = UnoRuntime.queryInterface( XNameAccess.class, xFormDocumentSuppl.getFormDocuments() );
+        XFormDocumentsSupplier xFormDocumentSuppl = (XFormDocumentsSupplier) UnoRuntime.queryInterface( XFormDocumentsSupplier.class, xModel );
+        XNameAccess xFormNameAccess = (XNameAccess) UnoRuntime.queryInterface( XNameAccess.class, xFormDocumentSuppl.getFormDocuments() );
         return xFormNameAccess.hasByName(_sFormName);
     }
 
@@ -946,23 +945,23 @@ public class DBMetaData
     {
         try
         {
-            XModel xDocumentModel = UnoRuntime.queryInterface( XModel.class, _xComponent );
+            XModel xDocumentModel = (XModel) UnoRuntime.queryInterface( XModel.class, _xComponent );
             String documentURL = xDocumentModel.getURL();
             String basename = FileAccess.getBasename(documentURL, "/");
-            XCloseable xCloseable = UnoRuntime.queryInterface( XCloseable.class, _xComponent );
+            XCloseable xCloseable = (XCloseable) UnoRuntime.queryInterface( XCloseable.class, _xComponent );
             xCloseable.close(false);
 
             NamedValueCollection creationArgs = new NamedValueCollection();
             creationArgs.put( "Name", basename );
             creationArgs.put( "URL", documentURL );
             creationArgs.put( "AsTemplate", new Boolean( i_createTemplate ) );
-            XMultiServiceFactory xDocMSF = UnoRuntime.queryInterface( XMultiServiceFactory.class, _xDocNameAccess );
+            XMultiServiceFactory xDocMSF = (XMultiServiceFactory) UnoRuntime.queryInterface( XMultiServiceFactory.class, _xDocNameAccess );
             Object oDBDocument = xDocMSF.createInstanceWithArguments( "com.sun.star.sdb.DocumentDefinition", creationArgs.getPropertyValues() );
-            XHierarchicalNameContainer xHier = UnoRuntime.queryInterface( XHierarchicalNameContainer.class, _xDocNameAccess );
+            XHierarchicalNameContainer xHier = (XHierarchicalNameContainer) UnoRuntime.queryInterface( XHierarchicalNameContainer.class, _xDocNameAccess );
             String sdocname = Desktop.getUniqueName(_xDocNameAccess, basename);
             xHier.insertByHierarchicalName(sdocname, oDBDocument);
             XInterface xInterface = (XInterface) xMSF.createInstance("com.sun.star.ucb.SimpleFileAccess");
-            XSimpleFileAccess xSimpleFileAccess = UnoRuntime.queryInterface( XSimpleFileAccess.class, xInterface );
+            XSimpleFileAccess xSimpleFileAccess = (XSimpleFileAccess) UnoRuntime.queryInterface( XSimpleFileAccess.class, xInterface );
             xSimpleFileAccess.kill(documentURL);
         }
         catch (Exception e)
@@ -986,7 +985,7 @@ public class DBMetaData
         String[] sColValues = null;
         try
         {
-            XRow xRow = UnoRuntime.queryInterface( XRow.class, _xResultSet );
+            XRow xRow = (XRow) UnoRuntime.queryInterface( XRow.class, _xResultSet );
             Vector aColVector = new Vector();
             while (_xResultSet.next())
             {
@@ -1035,9 +1034,9 @@ public class DBMetaData
         try
         {
             XInterface xInterface = (XInterface) xMSF.createInstance("com.sun.star.ucb.SimpleFileAccess");
-            XSimpleFileAccess xSimpleFileAccess = UnoRuntime.queryInterface( XSimpleFileAccess.class, xInterface );
+            XSimpleFileAccess xSimpleFileAccess = (XSimpleFileAccess) UnoRuntime.queryInterface( XSimpleFileAccess.class, xInterface );
             String storepath = FileAccess.getOfficePath(xMSF, "Temp", xSimpleFileAccess) + "/" + _storename;
-            XStorable xStoreable = UnoRuntime.queryInterface( XStorable.class, _xcomponent );
+            XStorable xStoreable = (XStorable) UnoRuntime.queryInterface( XStorable.class, _xcomponent );
             PropertyValue[] oStoreProperties = new PropertyValue[1];
             oStoreProperties[0] = Properties.createProperty("FilterName", "writer8");
             storepath += ".odt";
@@ -1086,12 +1085,12 @@ public class DBMetaData
         try
         {
             Object oDialog = xMSF.createInstance("com.sun.star.sdb.ErrorMessageDialog");
-            XInitialization xInitialization = UnoRuntime.queryInterface( XInitialization.class, oDialog );
+            XInitialization xInitialization = (XInitialization) UnoRuntime.queryInterface( XInitialization.class, oDialog );
             PropertyValue[] aPropertyValue = new PropertyValue[2];
             aPropertyValue[0] = Properties.createProperty("SQLException", oSQLException);
             aPropertyValue[1] = Properties.createProperty("ParentWindow", _xWindow);
             xInitialization.initialize(aPropertyValue);
-            XExecutableDialog xExecutableDialog = UnoRuntime.queryInterface( XExecutableDialog.class, oDialog );
+            XExecutableDialog xExecutableDialog = (XExecutableDialog) UnoRuntime.queryInterface( XExecutableDialog.class, oDialog );
             xExecutableDialog.execute();
         }
         catch (com.sun.star.uno.Exception ex)
diff -purN wizards.old/com/sun/star/wizards/db/TableDescriptor.java wizards/com/sun/star/wizards/db/TableDescriptor.java
--- wizards.old/com/sun/star/wizards/db/TableDescriptor.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/db/TableDescriptor.java	2010-09-07 20:11:52.000000000 +0200
@@ -116,13 +116,13 @@ public class TableDescriptor extends Com
         {
             // XTablesSupplier xDBTables = (XTablesSupplier) UnoRuntime.queryInterface(XTablesSupplier.class, DBConnection);
             // xTableNames = xDBTables.getTables();
-            xTableAppend = UnoRuntime.queryInterface( XAppend.class, getTableNamesAsNameAccess() );
-            xTableDrop = UnoRuntime.queryInterface( XDrop.class, getTableNamesAsNameAccess() );
-            xTableDataDescriptorFactory = UnoRuntime.queryInterface( XDataDescriptorFactory.class, getTableNamesAsNameAccess() );
+            xTableAppend = (XAppend) UnoRuntime.queryInterface( XAppend.class, getTableNamesAsNameAccess() );
+            xTableDrop = (XDrop) UnoRuntime.queryInterface( XDrop.class, getTableNamesAsNameAccess() );
+            xTableDataDescriptorFactory = (XDataDescriptorFactory) UnoRuntime.queryInterface( XDataDescriptorFactory.class, getTableNamesAsNameAccess() );
             xPropTableDataDescriptor = xTableDataDescriptorFactory.createDataDescriptor();
-            XColumnsSupplier xColumnsSupplier = UnoRuntime.queryInterface( XColumnsSupplier.class, xPropTableDataDescriptor );
+            XColumnsSupplier xColumnsSupplier = (XColumnsSupplier) UnoRuntime.queryInterface( XColumnsSupplier.class, xPropTableDataDescriptor );
             xNameAccessColumns = xColumnsSupplier.getColumns();
-            xColumnDataDescriptorFactory = UnoRuntime.queryInterface( XDataDescriptorFactory.class, xNameAccessColumns );
+            xColumnDataDescriptorFactory = (XDataDescriptorFactory) UnoRuntime.queryInterface( XDataDescriptorFactory.class, xNameAccessColumns );
             try
             {
                 createTypeInspector();
diff -purN wizards.old/com/sun/star/wizards/db/TypeInspector.java wizards/com/sun/star/wizards/db/TypeInspector.java
--- wizards.old/com/sun/star/wizards/db/TypeInspector.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/db/TypeInspector.java	2010-09-07 20:11:37.000000000 +0200
@@ -77,14 +77,14 @@ public class TypeInspector
         try
         {
             xResultSet = _xResultSet;
-            Vector<String> aTypeNameVector = new Vector<String>();
-            Vector<Integer> aTypeVector = new Vector<Integer>();
-            Vector<Integer> aNullableVector = new Vector<Integer>();
-            Vector<Boolean> aAutoIncrementVector = new Vector<Boolean>();
-            Vector<Integer> aPrecisionVector = new Vector<Integer>();
-            Vector<Integer> aMinScaleVector = new Vector<Integer>();
-            Vector<Integer> aMaxScaleVector = new Vector<Integer>();
-            Vector<Integer> aSearchableVector = new Vector<Integer>();
+            Vector aTypeNameVector = new Vector();
+            Vector aTypeVector = new Vector();
+            Vector aNullableVector = new Vector();
+            Vector aAutoIncrementVector = new Vector();
+            Vector aPrecisionVector = new Vector();
+            Vector aMinScaleVector = new Vector();
+            Vector aMaxScaleVector = new Vector();
+            Vector aSearchableVector = new Vector();
             // Integer[] aIntegerDataTypes = null;
 //      XResultSet xResultSet = xDBMetaDagetTypeInfo();
             XRow xRow = (XRow) UnoRuntime.queryInterface(XRow.class, xResultSet);
diff -purN wizards.old/com/sun/star/wizards/document/Control.java wizards/com/sun/star/wizards/document/Control.java
--- wizards.old/com/sun/star/wizards/document/Control.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/document/Control.java	2010-09-07 20:11:52.000000000 +0200
@@ -98,8 +98,8 @@ public class Control extends Shape
             icontroltype = _icontroltype;
             sServiceName = oFormHandler.sModelServices[getControlType()];
             Object oControlModel = oFormHandler.xMSFDoc.createInstance(sServiceName);
-            xControlModel = UnoRuntime.queryInterface( XControlModel.class, oControlModel );
-            xPropertySet = UnoRuntime.queryInterface( XPropertySet.class, oControlModel );
+            xControlModel = (XControlModel) UnoRuntime.queryInterface( XControlModel.class, oControlModel );
+            xPropertySet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, oControlModel );
 
             XPropertySetInfo xPSI = xPropertySet.getPropertySetInfo();
             if ( xPSI.hasPropertyByName( "MouseWheelBehavior" ) )
@@ -116,7 +116,7 @@ public class Control extends Shape
                 _xGroupShapes.add(xShape);
             }
             xControl = oFormHandler.xControlAccess.getControl(xControlModel);
-            xControlPropertySet = UnoRuntime.queryInterface( XPropertySet.class, xControl );
+            xControlPropertySet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, xControl );
             xWindowPeer = xControl.getPeer();
         }
         catch (Exception e)
diff -purN wizards.old/com/sun/star/wizards/document/DatabaseControl.java wizards/com/sun/star/wizards/document/DatabaseControl.java
--- wizards.old/com/sun/star/wizards/document/DatabaseControl.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/document/DatabaseControl.java	2010-09-07 20:11:37.000000000 +0200
@@ -255,7 +255,7 @@ public class DatabaseControl extends Con
             // }
             else if (getControlType() == FormHandler.SOIMAGECONTROL)
             {
-                xPropertySet.setPropertyValue("ScaleMode", com.sun.star.awt.ImageScaleMode.Isotropic);
+                xPropertySet.setPropertyValue("ScaleMode",  new Short(com.sun.star.awt.ImageScaleMode.Isotropic));
             }
         }
         catch (Exception e)
diff -purN wizards.old/com/sun/star/wizards/document/GridControl.java wizards/com/sun/star/wizards/document/GridControl.java
--- wizards.old/com/sun/star/wizards/document/GridControl.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/document/GridControl.java	2010-09-07 20:11:52.000000000 +0200
@@ -60,15 +60,15 @@ public class GridControl extends Shape
         {
             fieldcolumns = _fieldcolumns;
             Object oGridModel = oFormHandler.xMSFDoc.createInstance(oFormHandler.sModelServices[FormHandler.SOGRIDCONTROL]);
-            xNameContainer = UnoRuntime.queryInterface( XNameContainer.class, oGridModel );
-            xNameAccess = UnoRuntime.queryInterface( XNameAccess.class, oGridModel );
+            xNameContainer = (XNameContainer) UnoRuntime.queryInterface( XNameContainer.class, oGridModel );
+            xNameAccess = (XNameAccess) UnoRuntime.queryInterface( XNameAccess.class, oGridModel );
             _xFormName.insertByName(_sname, oGridModel);
-            xControlModel = UnoRuntime.queryInterface( XControlModel.class, oGridModel );
+            xControlModel = (XControlModel) UnoRuntime.queryInterface( XControlModel.class, oGridModel );
             xControlShape.setControl(xControlModel);
-            xPropertySet = UnoRuntime.queryInterface( XPropertySet.class, oGridModel );
+            xPropertySet = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, oGridModel );
             oFormHandler.xDrawPage.add(xShape);
-            xGridColumnFactory = UnoRuntime.queryInterface( XGridColumnFactory.class, oGridModel );
-            xComponent = UnoRuntime.queryInterface( XComponent.class, oGridModel );
+            xGridColumnFactory = (XGridColumnFactory) UnoRuntime.queryInterface( XGridColumnFactory.class, oGridModel );
+            xComponent = (XComponent) UnoRuntime.queryInterface( XComponent.class, oGridModel );
 
 //      Helper.setUnoPropertyValue(oGridModel, "Name", _sname);
             for (int i = 0; i < fieldcolumns.length; i++)
diff -purN wizards.old/com/sun/star/wizards/form/FieldLinker.java wizards/com/sun/star/wizards/form/FieldLinker.java
--- wizards.old/com/sun/star/wizards/form/FieldLinker.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/form/FieldLinker.java	2010-09-07 20:11:37.000000000 +0200
@@ -118,7 +118,7 @@ public class FieldLinker extends DBLimit
                         new Boolean(bDoEnable),
                         UIConsts.INTEGER_12,
                         sSlaveHidString,
-                        Short.valueOf(UnoDialog.getListBoxLineCount()),
+                        new Short(UnoDialog.getListBoxLineCount()),
                         new Integer(97),
                         new Integer(iCurPosY + 10),
                         IStep,
@@ -156,7 +156,7 @@ public class FieldLinker extends DBLimit
                         new Boolean(bDoEnable),
                         UIConsts.INTEGER_12,
                         sMasterHidString,
-                        Short.valueOf(UnoDialog.getListBoxLineCount()),
+                        new Short(UnoDialog.getListBoxLineCount()),
                         new Integer(206),
                         new Integer(iCurPosY + 10),
                         IStep,
diff -purN wizards.old/com/sun/star/wizards/form/StyleApplier.java wizards/com/sun/star/wizards/form/StyleApplier.java
--- wizards.old/com/sun/star/wizards/form/StyleApplier.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/form/StyleApplier.java	2010-09-07 20:11:37.000000000 +0200
@@ -360,9 +360,9 @@ public class StyleApplier
         return xMSF;
     }
 
-    private ArrayList<String> getStylePaths()
+    private ArrayList getStylePaths()
     {
-        ArrayList<String> aStylePaths = new ArrayList<String>();
+        ArrayList aStylePaths = new ArrayList();
         try
         {
             // TODO: check different languages in header layouts
diff -purN wizards.old/com/sun/star/wizards/form/UIControlArranger.java wizards/com/sun/star/wizards/form/UIControlArranger.java
--- wizards.old/com/sun/star/wizards/form/UIControlArranger.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/form/UIControlArranger.java	2010-09-07 20:11:37.000000000 +0200
@@ -409,7 +409,7 @@ public class UIControlArranger
             m_aButtonList.setCols(4);
             m_aButtonList.setRows(1);
             m_aButtonList.setName( "ButtonList_" + formindex );
-            m_aButtonList.setStep(Short.valueOf((short) FormWizard.SOCONTROL_PAGE));
+            m_aButtonList.setStep(new Short((short) FormWizard.SOCONTROL_PAGE));
             m_aButtonList.setShowButtons(false);      // shows a button line at ''wrong'' position like |<| 1..4/4 |>|
             m_aButtonList.setRenderer(new LayoutRenderer());
             m_aButtonList.setSelectionGap(new Size(2, 2));
diff -purN wizards.old/com/sun/star/wizards/query/CallQueryWizard.java wizards/com/sun/star/wizards/query/CallQueryWizard.java
--- wizards.old/com/sun/star/wizards/query/CallQueryWizard.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/query/CallQueryWizard.java	2010-09-07 20:11:52.000000000 +0200
@@ -86,7 +86,7 @@ public class CallQueryWizard
         private PropertyValue[] m_wizardContext;
         // <properties>
         public String           Command;
-        public final Integer    CommandType = com.sun.star.sdb.CommandType.QUERY;
+        public final Integer    CommandType = new Integer(com.sun.star.sdb.CommandType.QUERY);
         // </properties>
 
         /** The constructor of the inner class has a XMultiServiceFactory parameter.
diff -purN wizards.old/com/sun/star/wizards/query/QueryWizard.java wizards/com/sun/star/wizards/query/QueryWizard.java
--- wizards.old/com/sun/star/wizards/query/QueryWizard.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/query/QueryWizard.java	2010-09-07 20:11:52.000000000 +0200
@@ -140,7 +140,7 @@ public class QueryWizard extends Databas
                 buildSteps();
                 this.CurDBCommandFieldSelection.preselectCommand( m_wizardContext, false );
 
-                XWindowPeer windowPeer = UnoRuntime.queryInterface( XWindowPeer.class, m_frame.getContainerWindow() );
+                XWindowPeer windowPeer = (XWindowPeer) UnoRuntime.queryInterface( XWindowPeer.class, m_frame.getContainerWindow() );
                 createWindowPeer(windowPeer);
                 CurDBMetaData.setWindowPeer(this.xControl.getPeer());
                 insertQueryRelatedSteps();
diff -purN wizards.old/com/sun/star/wizards/report/CallReportWizard.java wizards/com/sun/star/wizards/report/CallReportWizard.java
--- wizards.old/com/sun/star/wizards/report/CallReportWizard.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/report/CallReportWizard.java	2010-09-07 20:11:52.000000000 +0200
@@ -147,8 +147,8 @@ public class CallReportWizard
                     if (m_wizardContext != null)
                     {
                         NamedValueCollection context = new NamedValueCollection( m_wizardContext );
-                        XTextDocument textDocument = context.queryOrDefault( "TextDocument", null, XTextDocument.class );
-                        XDatabaseDocumentUI documentUI = context.queryOrDefault( "DocumentUI", null, XDatabaseDocumentUI.class );
+                        XTextDocument textDocument = (XTextDocument) context.queryOrDefault( "TextDocument", null, XTextDocument.class );
+                        XDatabaseDocumentUI documentUI = (XDatabaseDocumentUI) context.queryOrDefault( "DocumentUI", null, XDatabaseDocumentUI.class );
                         if ( textDocument != null )
                         {
                             CurDataimport.createReport(xmultiservicefactory, documentUI, textDocument, m_wizardContext);
diff -purN wizards.old/com/sun/star/wizards/report/ReportTextImplementation.java wizards/com/sun/star/wizards/report/ReportTextImplementation.java
--- wizards.old/com/sun/star/wizards/report/ReportTextImplementation.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/report/ReportTextImplementation.java	2010-09-07 20:11:52.000000000 +0200
@@ -186,8 +186,8 @@ public class ReportTextImplementation ex
         try
         {
             XInterface xTextSection = (XInterface) getDocumentServiceFactory().createInstance("com.sun.star.text.TextSection");
-            XTextContent xTextSectionContent = UnoRuntime.queryInterface( XTextContent.class, xTextSection );
-            xNamedTextSection = UnoRuntime.queryInterface( XNamed.class, xTextSection );
+            XTextContent xTextSectionContent = (XTextContent) UnoRuntime.queryInterface( XTextContent.class, xTextSection );
+            xNamedTextSection = (XNamed) UnoRuntime.queryInterface( XNamed.class, xTextSection );
             xTextCursor.gotoEnd(false);
             xTextCursor.getText().insertTextContent(xTextCursor, xTextSectionContent, true);
             Helper.setUnoPropertyValue(xTextSection, "LinkRegion", sLinkRegion);
@@ -197,7 +197,7 @@ public class ReportTextImplementation ex
                 if (bIsGroupTable == true)
                 {
                     XTextTable xTextTable = getDoc().oTextTableHandler.getlastTextTable();
-                    XCellRange xCellRange = UnoRuntime.queryInterface( XCellRange.class, xTextTable );
+                    XCellRange xCellRange = (XCellRange) UnoRuntime.queryInterface( XCellRange.class, xTextTable );
                     CurDBColumn.modifyCellContent(xCellRange, CurGroupValue);
                 }
             }
@@ -212,7 +212,7 @@ public class ReportTextImplementation ex
     private void renameTableofLastSection(String _snewname)
     {
         XTextTable xTextTable = getDoc().oTextTableHandler.getlastTextTable();
-        XNamed xNamedTable = UnoRuntime.queryInterface( XNamed.class, xTextTable );
+        XNamed xNamedTable = (XNamed) UnoRuntime.queryInterface( XNamed.class, xTextTable );
         xNamedTable.setName(_snewname);
     }
 
@@ -232,7 +232,7 @@ public class ReportTextImplementation ex
             if (oDBForm != null)
             {
                 String sMsg = sMsgHiddenControlMissing + (char) 13 + sMsgEndAutopilot;
-                XNameAccess xNamedForm = UnoRuntime.queryInterface( XNameAccess.class, oDBForm );
+                XNameAccess xNamedForm = (XNameAccess) UnoRuntime.queryInterface( XNameAccess.class, oDBForm );
                 getRecordParser().Command = getDoc().oFormHandler.getValueofHiddenControl(xNamedForm, "Command", sMsg);
                 String sCommandType = getDoc().oFormHandler.getValueofHiddenControl(xNamedForm, "CommandType", sMsg);
                 String sGroupFieldNames = getDoc().oFormHandler.getValueofHiddenControl(xNamedForm, "GroupFieldNames", sMsg);
@@ -346,7 +346,7 @@ public class ReportTextImplementation ex
                 {
                     CurGroupTableName = ReportTextDocument.TBLGROUPSECTION + Integer.toString(ColIndex + 1);
                     oTable = getDoc().oTextTableHandler.xTextTablesSupplier.getTextTables().getByName(CurGroupTableName);
-                    xGroupBaseTables[ColIndex] = UnoRuntime.queryInterface( XTextTable.class, oTable );
+                    xGroupBaseTables[ColIndex] = (XTextTable) UnoRuntime.queryInterface( XTextTable.class, oTable );
                     CurGroupValue = getRecordParser().getGroupColumnValue(ColIndex);
                     OldGroupFieldValues[ColIndex] = CurGroupValue;
                     CurDBColumn = (DBColumn) getDoc().DBColumnsVector.elementAt(ColIndex);
diff -purN wizards.old/com/sun/star/wizards/report/ReportWizard.java wizards/com/sun/star/wizards/report/ReportWizard.java
--- wizards.old/com/sun/star/wizards/report/ReportWizard.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/report/ReportWizard.java	2010-09-07 20:11:52.000000000 +0200
@@ -119,7 +119,7 @@ public class ReportWizard extends Databa
                     },
                     new Object[]
                     {
-                        Integer.valueOf(210),
+                        new Integer(210),
                         Boolean.TRUE,
                         "DialogReport",
                         new Integer(102),
@@ -388,7 +388,7 @@ public class ReportWizard extends Databa
     private boolean isReportBuilderInstalled()
     {
         //! Check if the new Report Builder Extension is available
-        XContentEnumerationAccess a = com.sun.star.uno.UnoRuntime.queryInterface( XContentEnumerationAccess.class, xMSF );
+        XContentEnumerationAccess a = (XContentEnumerationAccess) com.sun.star.uno.UnoRuntime.queryInterface( XContentEnumerationAccess.class, xMSF );
         com.sun.star.container.XEnumeration e = a.createContentEnumeration("com.sun.star.report.pentaho.SOReportJobFactory");
         if (e == null)
         {
@@ -411,7 +411,7 @@ public class ReportWizard extends Databa
         // Get the path to the extension and try to add the path to the class loader
         final XComponentContext xComponentContext = Helper.getComponentContext(_xMSF);
         final Object aSingleton = xComponentContext.getValueByName("/singletons/com.sun.star.deployment.PackageInformationProvider");
-        XPackageInformationProvider xProvider = UnoRuntime.queryInterface( XPackageInformationProvider.class, aSingleton );
+        XPackageInformationProvider xProvider = (XPackageInformationProvider) UnoRuntime.queryInterface( XPackageInformationProvider.class, aSingleton );
         final String sLocation = xProvider.getPackageLocation("com.sun.reportdesigner");
         return sLocation;
     }
@@ -427,7 +427,7 @@ private static void initializeLogger(XMu
     {
         System.out.println("Can't get singleton from logging");
     }
-    final XLoggerPool xLoggerPool = UnoRuntime.queryInterface( XLoggerPool.class, aLoggerPool );
+    final XLoggerPool xLoggerPool = (XLoggerPool) UnoRuntime.queryInterface( XLoggerPool.class, aLoggerPool );
     m_xLogger = xLoggerPool.getNamedLogger("com.sun.star.wizards.ReportBuilder");    
 }
 
diff -purN wizards.old/com/sun/star/wizards/reportbuilder/ReportBuilderImplementation.java wizards/com/sun/star/wizards/reportbuilder/ReportBuilderImplementation.java
--- wizards.old/com/sun/star/wizards/reportbuilder/ReportBuilderImplementation.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/reportbuilder/ReportBuilderImplementation.java	2010-09-07 20:11:52.000000000 +0200
@@ -106,7 +106,7 @@ public class ReportBuilderImplementation
 
     public XWindowPeer getWizardParent()
     {
-        final XWindowPeer aWindowPeer = UnoRuntime.queryInterface( XWindowPeer.class, getFrame().getComponentWindow() );
+        final XWindowPeer aWindowPeer = (XWindowPeer) UnoRuntime.queryInterface( XWindowPeer.class, getFrame().getComponentWindow() );
         return aWindowPeer;
     }
     private XFrame m_xFrame = null;
@@ -146,8 +146,8 @@ public class ReportBuilderImplementation
             XComponent reportDefinitionComp = m_documentUI.createComponentWithArguments(
                 DatabaseObject.REPORT, creationArgs.getPropertyValues(), docDefinition );
 
-            m_documentDefinition = UnoRuntime.queryInterface( XPropertySet.class, docDefinition[0] );
-            m_reportDocument = UnoRuntime.queryInterface( XReportDefinition.class, reportDefinitionComp );
+            m_documentDefinition = (XPropertySet) UnoRuntime.queryInterface( XPropertySet.class, docDefinition[0] );
+            m_reportDocument = (XReportDefinition) UnoRuntime.queryInterface( XReportDefinition.class, reportDefinitionComp );
         }
         catch (com.sun.star.uno.Exception e)
         {
@@ -164,7 +164,7 @@ public class ReportBuilderImplementation
     private XModeSelector getModeSelector()
     {
         final XController xController = getReportDefinition().getCurrentController();
-        final XModeSelector xModeSelector = UnoRuntime.queryInterface( XModeSelector.class, xController );
+        final XModeSelector xModeSelector = (XModeSelector) UnoRuntime.queryInterface( XModeSelector.class, xController );
         return xModeSelector;
     }
 
@@ -209,11 +209,11 @@ public class ReportBuilderImplementation
         try
         {
             final XController xController = getReportDefinition().getCurrentController();
-            final XDispatchProvider xDP = UnoRuntime.queryInterface( XDispatchProvider.class, xController );
+            final XDispatchProvider xDP = (XDispatchProvider) UnoRuntime.queryInterface( XDispatchProvider.class, xController );
 
             // Create special service for parsing of given URL.
             final Object aURLTransformer = getMSF().createInstance("com.sun.star.util.URLTransformer");
-            final XURLTransformer xURLTransformer = UnoRuntime.queryInterface( com.sun.star.util.XURLTransformer.class, aURLTransformer );
+            final XURLTransformer xURLTransformer = (XURLTransformer) UnoRuntime.queryInterface( com.sun.star.util.XURLTransformer.class, aURLTransformer );
 
             com.sun.star.util.URL[] aURL = new com.sun.star.util.URL[1];
             aURL[0] = new com.sun.star.util.URL();
@@ -273,13 +273,13 @@ public class ReportBuilderImplementation
             return;
         }
 
-        final XCommandProcessor xProcessor = UnoRuntime.queryInterface( XCommandProcessor.class, m_documentDefinition );
+        final XCommandProcessor xProcessor = (XCommandProcessor) UnoRuntime.queryInterface( XCommandProcessor.class, m_documentDefinition );
         final com.sun.star.ucb.Command aCommand = new com.sun.star.ucb.Command();
         aCommand.Name = "store";
 
         xProcessor.execute(aCommand, xProcessor.createCommandIdentifier(), null);
 
-        final XHierarchicalNameContainer aNameContainer = UnoRuntime.queryInterface(XHierarchicalNameContainer.class, m_aReportDocument);
+        final XHierarchicalNameContainer aNameContainer = (XHierarchicalNameContainer) UnoRuntime.queryInterface(XHierarchicalNameContainer.class, m_aReportDocument);
         aNameContainer.insertByHierarchicalName( Name, m_documentDefinition );
     }
 
@@ -369,10 +369,10 @@ public class ReportBuilderImplementation
             if ( m_documentDefinition != null )
             {
                 // set the document to "not modified", to ensure that it won't ask the user before closing
-                XModifiable documentModify = UnoRuntime.queryInterface( XModifiable.class, m_reportDocument );
+                XModifiable documentModify = (XModifiable) UnoRuntime.queryInterface( XModifiable.class, m_reportDocument );
                 documentModify.setModified( false );
                 // actually close
-                XSubDocument subComponent = UnoRuntime.queryInterface( XSubDocument.class, m_documentDefinition );
+                XSubDocument subComponent = (XSubDocument) UnoRuntime.queryInterface( XSubDocument.class, m_documentDefinition );
                 subComponent.close();
             }
         }
@@ -422,14 +422,14 @@ public class ReportBuilderImplementation
 
     private XComponent loadReportFromDocumentDefinition()
     {
-        final XCommandProcessor commandProcessor = UnoRuntime.queryInterface(XCommandProcessor.class, m_documentDefinition);
+        final XCommandProcessor commandProcessor = (XCommandProcessor) UnoRuntime.queryInterface(XCommandProcessor.class, m_documentDefinition);
 
         com.sun.star.ucb.Command aCommand = new com.sun.star.ucb.Command();
         aCommand.Name = "open";
         try
         {
             final Object result = commandProcessor.execute( aCommand, commandProcessor.createCommandIdentifier(), null );
-            return UnoRuntime.queryInterface( XComponent.class, result );
+            return (XComponent) UnoRuntime.queryInterface( XComponent.class, result );
         }
         catch ( Exception ex )
         {
diff -purN wizards.old/com/sun/star/wizards/table/CallTableWizard.java wizards/com/sun/star/wizards/table/CallTableWizard.java
--- wizards.old/com/sun/star/wizards/table/CallTableWizard.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/table/CallTableWizard.java	2010-09-07 20:11:52.000000000 +0200
@@ -85,7 +85,7 @@ public class CallTableWizard
         private PropertyValue[] m_wizardContext;
         // <properties>
         public String           Command;
-        public final Integer    CommandType = com.sun.star.sdb.CommandType.TABLE;
+        public final Integer    CommandType = new Integer(com.sun.star.sdb.CommandType.TABLE);
         // </properties>
 
         /** The constructor of the inner class has a XMultiServiceFactory parameter.
diff -purN wizards.old/com/sun/star/wizards/table/CGCategory.java wizards/com/sun/star/wizards/table/CGCategory.java
--- wizards.old/com/sun/star/wizards/table/CGCategory.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/table/CGCategory.java	2010-09-07 20:11:52.000000000 +0200
@@ -62,7 +62,7 @@ public class CGCategory
         {
             oconfigView = Configuration.getConfigurationRoot(xMSF, CGROOTPATH, false);  //business/Tables   
             xNameAccessCurBusinessNode = Configuration.getChildNodebyName(
-                UnoRuntime.queryInterface(XNameAccess.class, oconfigView),
+                (XNameAccess) UnoRuntime.queryInterface(XNameAccess.class, oconfigView),
                 category);
         }
         catch (Exception e)
diff -purN wizards.old/com/sun/star/wizards/table/PrimaryKeyHandler.java wizards/com/sun/star/wizards/table/PrimaryKeyHandler.java
--- wizards.old/com/sun/star/wizards/table/PrimaryKeyHandler.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/table/PrimaryKeyHandler.java	2010-09-07 20:11:37.000000000 +0200
@@ -172,7 +172,7 @@ public class PrimaryKeyHandler implement
                     Boolean.FALSE,
                     new Integer(12),
                     "HID:41231",
-                    Short.valueOf(UnoDialog.getListBoxLineCount()),
+                    new Short(UnoDialog.getListBoxLineCount()),
                     new Integer(162),
                     new Integer(115),
                     IPRIMEKEYSTEP,
diff -purN wizards.old/com/sun/star/wizards/table/ScenarioSelector.java wizards/com/sun/star/wizards/table/ScenarioSelector.java
--- wizards.old/com/sun/star/wizards/table/ScenarioSelector.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/table/ScenarioSelector.java	2010-09-07 20:11:37.000000000 +0200
@@ -206,7 +206,7 @@ public class ScenarioSelector extends Fi
     public String[] getSelectedFieldNames()
     {
         String[] displayfieldnames = super.getSelectedFieldNames();
-        Vector<String> afieldnameVector = new Vector<String>();
+        Vector afieldnameVector = new Vector();
         int a = 0;
         for (int i = 0; i < displayfieldnames.length; i++)
         {
diff -purN wizards.old/com/sun/star/wizards/table/TableWizard.java wizards/com/sun/star/wizards/table/TableWizard.java
--- wizards.old/com/sun/star/wizards/table/TableWizard.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/table/TableWizard.java	2010-09-07 20:11:52.000000000 +0200
@@ -327,12 +327,12 @@ public class TableWizard extends Databas
             NamedValueCollection wizardContext = new NamedValueCollection();
             wizardContext.put( "ActiveConnection", curTableDescriptor.DBConnection );
             wizardContext.put( "DataSource", curTableDescriptor.getDataSource() );
-            wizardContext.put( "CommandType", CommandType.TABLE );
+            wizardContext.put( "CommandType", new Integer (CommandType.TABLE) );
             wizardContext.put( "Command", scomposedtablename );
             wizardContext.put( "DocumentUI", m_docUI );
-            XInitialization xInitialization = UnoRuntime.queryInterface( XInitialization.class, oFormWizard );
+            XInitialization xInitialization = (XInitialization) UnoRuntime.queryInterface( XInitialization.class, oFormWizard );
             xInitialization.initialize( wizardContext.getPropertyValues() );
-            XJobExecutor xJobExecutor = UnoRuntime.queryInterface( XJobExecutor.class, oFormWizard );
+            XJobExecutor xJobExecutor = (XJobExecutor) UnoRuntime.queryInterface( XJobExecutor.class, oFormWizard );
             xJobExecutor.trigger("start");
         }
         catch (Exception e)
diff -purN wizards.old/com/sun/star/wizards/ui/ButtonList.java wizards/com/sun/star/wizards/ui/ButtonList.java
--- wizards.old/com/sun/star/wizards/ui/ButtonList.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/ButtonList.java	2010-09-07 20:11:37.000000000 +0200
@@ -133,15 +133,15 @@ public class ButtonList implements XItem
                 },
                 new Object[]
                 {
-                    Integer.valueOf(imageTextHeight),
+                    new Integer(imageTextHeight),
                     "",
                     "(1)",
-                    Integer.valueOf(nXPos),
-                    Integer.valueOf(nYPos),
+                    new Integer(nXPos),
+                    new Integer(nYPos),
                     step,
-                    Short.valueOf((short) 0),
+                    new Short((short) 0),
                     Boolean.FALSE,
-                    Integer.valueOf(nWidth)
+                    new Integer(nWidth)
                 });
 
 
@@ -159,17 +159,17 @@ public class ButtonList implements XItem
                 "Width"
             };
 
-            final Integer btnSize = Integer.valueOf(14);
+            final Integer btnSize = new Integer(14);
 
 // TODO: if list of strings not the same length of list object, office will die.
             btnBack = dialog.insertButton(m_aControlName + "_btnBack", "prevPage", this, pNames1, new Object[]
                     {
                         btnSize,
                         "HID:" + helpURL++,
-                        Integer.valueOf(pos.Width),
-                        Integer.valueOf(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + 1),
+                        new Integer(pos.Width),
+                        new Integer(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + 1),
                         step,
-                        Short.valueOf((short) (tabIndex + 1)),
+                        new Short((short) (tabIndex + 1)),
                         Boolean.TRUE,
                         btnSize
                     });
@@ -178,8 +178,8 @@ public class ButtonList implements XItem
                     {
                         btnSize,
                         "HID:" + helpURL++,
-                        Integer.valueOf(pos.Width + (m_aButtonSize.Width + gap.Width) * cols + gap.Width - btnSize.intValue() + 1),
-                        Integer.valueOf(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + 1),
+                        new Integer(pos.Width + (m_aButtonSize.Width + gap.Width) * cols + gap.Width - btnSize.intValue() + 1),
+                        new Integer(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + 1),
                         step,
                         new Short((short) (tabIndex + 2)),
                         Boolean.TRUE,
@@ -188,14 +188,14 @@ public class ButtonList implements XItem
 
             lblCounter = dialog.insertLabel(m_aControlName + "_lblCounter", pNames1, new Object[]
                     {
-                        Integer.valueOf(LINE_HEIGHT),
+                        new Integer(LINE_HEIGHT),
                         "",
-                        Integer.valueOf(pos.Width + btnSize.intValue() + 1),
-                        Integer.valueOf(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + ((btnSize.intValue() - LINE_HEIGHT) / 2)),
+                        new Integer(pos.Width + btnSize.intValue() + 1),
+                        new Integer(pos.Height + (m_aButtonSize.Height + gap.Height) * rows + gap.Height + imageTextHeight + ((btnSize.intValue() - LINE_HEIGHT) / 2)),
                         step,
-                        Short.valueOf((short) 0),
+                        new Short((short) 0),
                         Boolean.FALSE,
-                        Integer.valueOf(cols * (m_aButtonSize.Width + gap.Width) + gap.Width - 2 * btnSize.intValue() - 1)
+                        new Integer(cols * (m_aButtonSize.Width + gap.Width) + gap.Width - 2 * btnSize.intValue() - 1)
                     });
 
             Helper.setUnoPropertyValue(getModel(lblCounter), "Align", new Short((short) 1));
@@ -210,8 +210,8 @@ public class ButtonList implements XItem
         m_aButtons = new XControl[rows * cols];
 
 
-        m_aButtonHeight = Integer.valueOf(m_aButtonSize.Height);
-        m_aButtonWidth = Integer.valueOf(m_aButtonSize.Width);
+        m_aButtonHeight = new Integer(m_aButtonSize.Height);
+        m_aButtonWidth = new Integer(m_aButtonSize.Width);
 
         for (int r = 0; r < rows; r++)
         {
@@ -253,13 +253,13 @@ public class ButtonList implements XItem
                 },
                 new Object[]
                 {
-                    /* Short.valueOf((short) 1), */ /* NO_BORDER, */
+                    /* new Short((short) 1), */ /* NO_BORDER, */
                     /* BACKGROUND_COLOR, */
                     m_aButtonHeight,
                     "HID:" + helpURL++,
                     /* "Test", */
-                    Integer.valueOf(nButtonX),
-                    Integer.valueOf(nButtonY),
+                    new Integer(nButtonX),
+                    new Integer(nButtonY),
                     /* scaleImages, */
                     step,
                     m_tabIndex,
@@ -314,7 +314,7 @@ public class ButtonList implements XItem
                     oUnoDialog.getPeerConfiguration().setImageUrl(m_aButtons[i].getModel(), oResources[0], oResources[1]);
 //                    Helper.setUnoPropertyValue(m_aButtons[i].getModel(), "ImageURL", oResources[0]);
                 }
-                boolean bTabStop = Boolean.TRUE; // focusable ? Boolean.TRUE : Boolean.FALSE;
+                Boolean bTabStop = new Boolean(true); // focusable ? Boolean.TRUE : Boolean.FALSE;
                 Helper.setUnoPropertyValue(m_aButtons[i].getModel(), "Tabstop", bTabStop);
                 // Object aEnabled = Helper.getUnoPropertyValue(m_aButtons[i].getModel(), "Enabled");
                 if (refreshOverNull)
@@ -346,7 +346,7 @@ public class ButtonList implements XItem
     }
 
     /** Utility field holding list of ItemListeners. */
-    private transient java.util.ArrayList<XItemListener> m_aItemListenerList;
+    private transient java.util.ArrayList m_aItemListenerList;
     private void setVisible(Object control, boolean visible)
     {
         final XWindow xWindow = (XWindow) UnoRuntime.queryInterface(XWindow.class, control);
@@ -427,7 +427,7 @@ public class ButtonList implements XItem
     {
         if (m_aItemListenerList == null)
         {
-            m_aItemListenerList = new java.util.ArrayList<XItemListener>();
+            m_aItemListenerList = new java.util.ArrayList();
         }
         m_aItemListenerList.add(listener);
     }
@@ -859,12 +859,12 @@ public class ButtonList implements XItem
                 if (i == m_nCurrentSelection)
                 {
                     final short one = 1;
-                    aHelper.setPropertyValueDontThrow("State", Short.valueOf(one));
+                    aHelper.setPropertyValueDontThrow("State", new Short(one));
                 }
                 else
                 {
                     final short zero = 0;
-                    aHelper.setPropertyValueDontThrow("State", Short.valueOf(zero));
+                    aHelper.setPropertyValueDontThrow("State", new Short(zero));
                 }
             }
         }
@@ -886,7 +886,7 @@ public class ButtonList implements XItem
         if (nState == 0)
         {
             // this will avoid a wrong state, if already pressed.
-            aHelper.setPropertyValueDontThrow("State", Short.valueOf((short)1));
+            aHelper.setPropertyValueDontThrow("State", new Short((short)1));
         }
 
         // check which Button is pressed.
diff -purN wizards.old/com/sun/star/wizards/ui/FieldSelection.java wizards/com/sun/star/wizards/ui/FieldSelection.java
--- wizards.old/com/sun/star/wizards/ui/FieldSelection.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/FieldSelection.java	2010-09-07 20:11:37.000000000 +0200
@@ -626,7 +626,7 @@ public class FieldSelection
             int MaxOriginalCount = AllFieldNames.length;
             // int MaxSelected = OldSelFieldItems.length;
             String[] SelList = xFieldsListBox.getItems();
-            Vector<String> NewSourceVector = new Vector<String>();
+            Vector NewSourceVector = new Vector();
             for (int i = 0; i < MaxOriginalCount; i++)
             {
                 SearchString = AllFieldNames[i];
diff -purN wizards.old/com/sun/star/wizards/ui/FilterComponent.java wizards/com/sun/star/wizards/ui/FilterComponent.java
--- wizards.old/com/sun/star/wizards/ui/FilterComponent.java	2010-08-25 22:34:06.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/FilterComponent.java	2010-09-07 20:11:52.000000000 +0200
@@ -253,7 +253,7 @@ public class FilterComponent
     private void togglefollowingControlRow(String _scurName)
     {
         // String sNameSuffix = sIncSuffix + "_" + _scurName.substring(_scurName.length() - 1, _scurName.length());
-        int Index = Integer.valueOf(getIndexNumber(_scurName)).intValue();
+        int Index = new Integer(getIndexNumber(_scurName)).intValue();
         if (Index < oControlRows.length)
         {
             boolean bValue = oControlRows[Index - 1].isConditionComplete();
@@ -289,9 +289,9 @@ public class FilterComponent
                 final String serviceName = "com.sun.star.beans.PropertyBag";
                 final XPropertyContainer column = (XPropertyContainer) UnoRuntime.queryInterface(XPropertyContainer.class, oQueryMetaData.xMSF.createInstance(serviceName));
                 
-                column.addProperty("Type", PropertyAttribute.BOUND, DataType.VARCHAR);
+                column.addProperty("Type", PropertyAttribute.BOUND, new Integer(DataType.VARCHAR));
                 column.addProperty("Name", PropertyAttribute.BOUND, "");
-                final XPropertySet columnSet = UnoRuntime.queryInterface(XPropertySet.class, column);
+                final XPropertySet columnSet = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class, column);
 
                 if ( oQueryMetaData.getSQLQueryComposer().getQuery().length() == 0)
                 {
@@ -320,7 +320,8 @@ public class FilterComponent
                             {
                                 case DataType.TIMESTAMP:
                                 case DataType.DATE:
-                                    value = ((Double)value) - oQueryMetaData.getNullDateCorrection();
+                            	    double correctedValue = ((Double)value).doubleValue() - oQueryMetaData.getNullDateCorrection();
+                                    value = new Double(correctedValue);
                                     break;
                             }
                             column.addProperty("Value", PropertyAttribute.MAYBEVOID, value);
@@ -336,7 +337,7 @@ public class FilterComponent
                     PropertyValue aduplicatecondition = filterconditions[iduplicate[0]][iduplicate[1]];
                     String smsgDuplicateCondition = getDisplayCondition(sDuplicateCondition, aduplicatecondition, null);
                     CurUnoDialog.showMessageBox("WarningBox", VclWindowPeerAttribute.OK, smsgDuplicateCondition);
-                    CurUnoDialog.vetoableChange(new java.beans.PropertyChangeEvent(CurUnoDialog, "Steps", Integer.valueOf(1), Integer.valueOf(2)));
+                CurUnoDialog.vetoableChange(new java.beans.PropertyChangeEvent(CurUnoDialog, "Steps", new Integer(1), new Integer(2)));
                     return new PropertyValue[][]
                             {
                             };
@@ -448,7 +449,7 @@ public class FilterComponent
     {
         this.curHelpID = _firstHelpID;
         this.xMSF = _xMSF;
-        this.IStep = Integer.valueOf(iStep);
+            this.IStep = new Integer(iStep);
 
         curtabindex = UnoDialog.setInitialTabindex(iStep);
         this.CurUnoDialog = CurUnoDialog;
@@ -487,15 +488,15 @@ public class FilterComponent
                 },
                 new Object[]
                 {
-                    Integer.valueOf(9),
+                        new Integer(9),
                     "HID:" + curHelpID++,
                     soptMatchAll,
-                    Integer.valueOf(iPosX),
-                    Integer.valueOf(iPosY),
-                    Short.valueOf((short) 1),
+                        new Integer(iPosX),
+                        new Integer(iPosY),
+                        new Short((short) 1),
                     IStep,
-                    Short.valueOf(curtabindex++),
-                    Integer.valueOf(203)
+                        new Short(curtabindex++),
+                        new Integer(203)
                 });
         optMatchAny = CurUnoDialog.insertRadioButton("optMatchAny" + sIncSuffix, SOOPTORMODE, new ItemListenerImpl(),
                 new String[]
@@ -511,14 +512,14 @@ public class FilterComponent
                 },
                 new Object[]
                 {
-                    Integer.valueOf(9),
+                        new Integer(9),
                     "HID:" + curHelpID++,
                     soptMatchAny,
-                    Integer.valueOf(iPosX),
-                    Integer.valueOf(iPosY + 12),
+                        new Integer(iPosX),
+                        new Integer(iPosY + 12),
                     IStep,
-                    Short.valueOf(curtabindex++),
-                    Integer.valueOf(203)
+                        new Short(curtabindex++),
+                        new Integer(203)
                 });
         getfilterstate();
 
@@ -634,13 +635,13 @@ public class FilterComponent
                         new Object[]
                         {
                             Boolean.valueOf(isEnabled()),
-                            Integer.valueOf(9),
+                            new Integer(9),
                             slblFieldNames,
-                            Integer.valueOf(nPosX1),
-                            Integer.valueOf(iCompPosY + 13),
+                            new Integer(nPosX1),
+                            new Integer(iCompPosY + 13),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nFieldWidth)
+                            new Short(curtabindex++),
+                            new Integer(nFieldWidth)
                         });
 
                 // Label Operator
@@ -659,13 +660,13 @@ public class FilterComponent
                         new Object[]
                         {
                             Boolean.valueOf(isEnabled()),
-                            Integer.valueOf(9),
+                            new Integer(9),
                             slblOperators,
-                            Integer.valueOf(nPosX2),
-                            Integer.valueOf(iCompPosY + 13),
+                            new Integer(nPosX2),
+                            new Integer(iCompPosY + 13),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nOperatorWidth)
+                            new Short(curtabindex++),
+                            new Integer(nOperatorWidth)
                         });
 
                 // Label Value
@@ -684,13 +685,13 @@ public class FilterComponent
                         new Object[]
                         {
                             Boolean.valueOf(isEnabled()),
-                            Integer.valueOf(9),
+                            new Integer(9),
                             slblValue,
-                            Integer.valueOf(nPosX3),
-                            Integer.valueOf(iCompPosY + 13),
+                            new Integer(nPosX3),
+                            new Integer(iCompPosY + 13),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nValueWidth)
+                            new Short(curtabindex++),
+                            new Integer(nValueWidth)
                         });
 
                 // Listbox Fields
@@ -712,14 +713,14 @@ public class FilterComponent
                         {
                             Boolean.valueOf(isEnabled()),
                             Boolean.TRUE,
-                            Integer.valueOf(13),
+                            new Integer(13),
                             "HID:" + _firstRowHelpID++,
-                            Short.valueOf(UnoDialog.getListBoxLineCount() /* 7 */),
-                            Integer.valueOf(nPosX1),
-                            Integer.valueOf(iCompPosY + 23),
+                            new Short(UnoDialog.getListBoxLineCount() /* 7 */),
+                            new Integer(nPosX1),
+                            new Integer(iCompPosY + 23),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nFieldWidth)
+                            new Short(curtabindex++),
+                            new Integer(nFieldWidth)
                         });
 
                 // Listbox Operators
@@ -742,15 +743,15 @@ public class FilterComponent
                         {
                             Boolean.valueOf(isEnabled()),
                             Boolean.TRUE,
-                            Integer.valueOf(13),
+                            new Integer(13),
                             "HID:" + _firstRowHelpID++,
-                            Short.valueOf((short) sLogicOperators.length /* 7 */),
-                            Integer.valueOf(nPosX2),
-                            Integer.valueOf(iCompPosY + 23),
+                            new Short((short) sLogicOperators.length /* 7 */),
+                            new Integer(nPosX2),
+                            new Integer(iCompPosY + 23),
                             IStep,
                             sLogicOperators,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nOperatorWidth)
+                            new Short(curtabindex++),
+                            new Integer(nOperatorWidth)
                         });
                 ControlElements[SOTXTVALUE] = (XInterface) CurUnoDialog.insertFormattedField("txtValue" + sCompSuffix, SO_TEXTFIELDLIST[Index], new TextListenerImpl(),
                         new String[]
@@ -767,13 +768,13 @@ public class FilterComponent
                         new Object[]
                         {
                             Boolean.valueOf(isEnabled()),
-                            Integer.valueOf(13),
+                            new Integer(13),
                             "HID:" + _firstRowHelpID++,
-                            Integer.valueOf(nPosX3),
-                            Integer.valueOf(iCompPosY + 23),
+                            new Integer(nPosX3),
+                            new Integer(iCompPosY + 23),
                             IStep,
-                            Short.valueOf(curtabindex++),
-                            Integer.valueOf(nValueWidth)
+                            new Short(curtabindex++),
+                            new Integer(nValueWidth)
                         });
 
 //                ControlElements[6] = CurUnoDialog.insertListBox((new StringBuilder()).append("lstBoolean").append(sCompSuffix).toString(), SO_BOOLEANLIST[Index], null, new ItemListenerImpl(), new String[] {
@@ -909,10 +910,10 @@ public class FilterComponent
                 else if (AnyConverter.isBoolean(_filtercondition.Value))
                 {
                     boolean b = AnyConverter.toBoolean(_filtercondition.Value);
-                    double nValue = 0.0;
+                    Double nValue = new Double(0.0);
                     if (b)
                     {
-                        nValue = 1.0;
+                        nValue = new Double(1.0);
                     }
                     Helper.setUnoPropertyValue(UnoDialog.getModel(ControlElements[SOTXTVALUE]), "EffectiveValue", nValue);
                 }
