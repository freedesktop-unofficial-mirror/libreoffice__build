diff --git sc/inc/document.hxx sc/inc/document.hxx
index 407851d..ecab008 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -427,6 +427,7 @@ private:
 	::std::vector< SCTAB > maTabs;
 
 	inline BOOL 		RowHidden( SCROW nRow, SCTAB nTab );		// FillInfo
+    bool                RowHidden(SCROW nRow, SCTAB nTab, SCROW& rLastHiddenRow) const;
 
 public:
 	SC_DLLPUBLIC ULONG			GetCellCount() const;		// alle Zellen
diff --git sc/inc/table.hxx sc/inc/table.hxx
index 6f7b016..a088fe5 100644
--- sc/inc/table.hxx
+++ sc/inc/table.hxx
@@ -40,6 +40,7 @@
 #include "compressedarray.hxx"
 
 #include <memory>
+#include <boost/shared_ptr.hpp>
 
 namespace utl {
 	class SearchParam;
@@ -75,6 +76,7 @@ struct RowInfo;
 struct ScFunctionData;
 struct ScLineFlags;
 class CollatorWrapper;
+class ScFlatBoolRowSegments;
 
 
 class ScTable
@@ -114,6 +116,7 @@ private:
 
 	BYTE*			pColFlags;
 	ScBitMaskCompressedArray< SCROW, BYTE>*     pRowFlags;
+    ::boost::shared_ptr<ScFlatBoolRowSegments>  mpHiddenRows;
 
 	ScOutlineTable*	pOutlineTable;
 
diff --git sc/source/core/data/fillinfo.cxx sc/source/core/data/fillinfo.cxx
index 53abf3e..a33a4cf 100644
--- sc/source/core/data/fillinfo.cxx
+++ sc/source/core/data/fillinfo.cxx
@@ -54,7 +54,7 @@
 #include "docpool.hxx"
 #include "conditio.hxx"
 #include "stlpool.hxx"
-
+#include "segmenttree.hxx"
 
 // -----------------------------------------------------------------------
 
@@ -160,7 +160,28 @@ void lcl_GetMergeRange( SCsCOL nX, SCsROW nY, SCSIZE nArrY,
 
 inline BOOL ScDocument::RowHidden( SCROW nRow, SCTAB nTab )
 {
-	return ( pTab[nTab]->pRowFlags->GetValue(nRow) & CR_HIDDEN ) != 0;
+    bool b = ( pTab[nTab]->pRowFlags->GetValue(nRow) & CR_HIDDEN ) != 0;
+#if 0
+    bool bHidden = pTab[nTab]->mpHiddenRows->getValue(nRow);
+    if (b != bHidden)
+        fprintf(stdout, "ScDocument::RowHidden:   bad! (table = %d; row = %ld) (hidden %d; myvalue %d)\n",
+                nTab, nRow, b, bHidden);
+#endif
+	return b;
+}
+
+bool ScDocument::RowHidden(SCROW nRow, SCTAB nTab, SCROW& rLastHiddenRow) const
+{
+    ScFlatBoolRowSegments::RangeData aData;
+    if (!pTab[nTab]->mpHiddenRows->getRangeData(nRow, aData))
+        return true;
+
+    if (!aData.mbValue)
+        return false;
+
+    // This row is hidden.
+    rLastHiddenRow = aData.mnRow2;
+    return true;
 }
 
 
@@ -484,7 +505,14 @@ void ScDocument::FillInfo( ScTableInfo& rTabInfo, SCCOL nX1, SCROW nY1, SCCOL nX
 
 						do
 						{
-							if ( nArrY==0 || !RowHidden( nCurRow,nTab ) )
+#define NEW_METHOD 1
+#if NEW_METHOD
+                            SCROW nLastHiddenRow = -1;
+                            bool bRowHidden = RowHidden(nCurRow, nTab, nLastHiddenRow);
+#else
+                            bool bRowHidden = RowHidden(nCurRow, nTab);
+#endif
+							if ( nArrY==0 || !bRowHidden )
 							{
 								RowInfo* pThisRowInfo = &pRowInfo[nArrY];
 								if (pBackground != pDefBackground)			// Spalten-HG == Standard ?
@@ -554,6 +582,14 @@ void ScDocument::FillInfo( ScTableInfo& rTabInfo, SCCOL nX1, SCROW nY1, SCCOL nX
 
 								++nArrY;
 							}
+#if NEW_METHOD
+                            else if (bRowHidden && nLastHiddenRow >= 0)
+                            {
+                                nCurRow = nLastHiddenRow;
+                                if (nCurRow > nThisRow)
+                                    nCurRow = nThisRow;
+                            }
+#endif
 							++nCurRow;
 						}
 						while (nCurRow <= nThisRow && nCurRow <= nYExtra);
diff --git sc/source/core/data/table1.cxx sc/source/core/data/table1.cxx
index ddd1bbb..0e0b9c1 100644
--- sc/source/core/data/table1.cxx
+++ sc/source/core/data/table1.cxx
@@ -115,6 +115,7 @@
 #include "hints.hxx"		// fuer Paint-Broadcast
 #include "prnsave.hxx"
 #include "tabprotection.hxx"
+#include "segmenttree.hxx"
 
 // STATIC DATA -----------------------------------------------------------
 
@@ -139,6 +140,7 @@ ScTable::ScTable( ScDocument* pDoc, SCTAB nNewTab, const String& rNewName,
 	pRowHeight( NULL ),
 	pColFlags( NULL ),
 	pRowFlags( NULL ),
+    mpHiddenRows(new ScFlatBoolRowSegments),
 	pOutlineTable( NULL ),
 	bTableAreaValid( FALSE ),
 	bVisible( TRUE ),
diff --git sc/source/core/data/table2.cxx sc/source/core/data/table2.cxx
index a59c910..768eb27 100644
--- sc/source/core/data/table2.cxx
+++ sc/source/core/data/table2.cxx
@@ -2269,9 +2269,15 @@ void ScTable::ShowRow(SCROW nRow, BOOL bShow)
 			}
 
 			if (bShow)
+            {
+                mpHiddenRows->setFalse(nRow, nRow);    
 				pRowFlags->SetValue( nRow, nFlags & ~(CR_HIDDEN | CR_FILTERED));
+            }
 			else
+            {    
+                mpHiddenRows->setTrue(nRow, nRow);    
 				pRowFlags->SetValue( nRow, nFlags | CR_HIDDEN);
+            }
 			if( !--nRecalcLvl )
 				SetDrawPageSize();
 
@@ -2308,9 +2314,15 @@ void ScTable::DBShowRow(SCROW nRow, BOOL bShow)
 
 		//	Filter-Flag immer setzen, auch wenn Hidden unveraendert
 		if (bShow)
+        {    
+            mpHiddenRows->setFalse(nRow, nRow);    
 			pRowFlags->SetValue( nRow, nFlags & ~(CR_HIDDEN | CR_FILTERED));
+        }
 		else
+        {    
+            mpHiddenRows->setTrue(nRow, nRow);    
 			pRowFlags->SetValue( nRow, nFlags | (CR_HIDDEN | CR_FILTERED));
+        }
 		if( !--nRecalcLvl )
 			SetDrawPageSize();
 
@@ -2410,9 +2422,15 @@ void ScTable::ShowRows(SCROW nRow1, SCROW nRow2, BOOL bShow)
 		}
 
 		if (bShow)
+        {    
             pRowFlags->AndValue( nStartRow, nEndRow, sal::static_int_cast<BYTE>(~(CR_HIDDEN | CR_FILTERED)) );
+            mpHiddenRows->setFalse(nStartRow, nEndRow);
+        }
 		else
+        {    
             pRowFlags->OrValue( nStartRow, nEndRow, CR_HIDDEN);
+            mpHiddenRows->setTrue(nStartRow, nEndRow);
+        }
 
 		if ( bChanged )
 		{
