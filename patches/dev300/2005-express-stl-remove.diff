--- canvas/source/tools/page.cxx.old	2009-10-07 15:06:51.000000000 +0200
+++ canvas/source/tools/page.cxx	2010-03-03 17:50:44.000000000 +0100
@@ -91,7 +91,11 @@ namespace canvas
         // currently be deleted. in either case, simply
         // remove the reference from our internal storage.
         FragmentContainer_t::iterator it(
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+			remove(
+#else
             std::remove(
+#endif
                 mpFragments.begin(),mpFragments.end(),pFragment));
         mpFragments.erase(it,mpFragments.end());
     }
--- canvas/source/tools/pagemanager.cxx.old	2009-10-07 15:06:51.000000000 +0200
+++ canvas/source/tools/pagemanager.cxx	2010-03-03 17:50:44.000000000 +0100
@@ -95,7 +95,11 @@ namespace canvas
         // erase the reference to the given fragment from our
         // internal container.
         FragmentContainer_t::iterator it(
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+			remove(
+#else
             std::remove(
+#endif
                 maFragments.begin(),maFragments.end(),pFragment));
         maFragments.erase(it,maFragments.end());
 
--- dbaccess/source/ui/querydesign/QueryTabWinUndoAct.hxx.old	2009-10-07 15:06:13.000000000 +0200
+++ dbaccess/source/ui/querydesign/QueryTabWinUndoAct.hxx	2010-03-03 17:50:44.000000000 +0100
@@ -78,7 +78,11 @@ namespace dbaui
         void InsertConnection( OTableConnection* pConnection ) { m_vTableConnection.push_back(pConnection); }
         void RemoveConnection( OTableConnection* pConnection ) 
         { 
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+			m_vTableConnection.erase(remove(m_vTableConnection.begin(),m_vTableConnection.end(),pConnection),m_vTableConnection.end());
+#else
             m_vTableConnection.erase(::std::remove(m_vTableConnection.begin(),m_vTableConnection.end(),pConnection),m_vTableConnection.end());
+#endif
         }
     };
 
--- dbaccess/source/ui/querydesign/JoinController.cxx.old	2009-10-08 16:17:07.000000000 +0200
+++ dbaccess/source/ui/querydesign/JoinController.cxx	2010-03-03 17:50:44.000000000 +0100
@@ -426,7 +426,11 @@ void OJoinController::SaveTabWinsPosSize
 // -----------------------------------------------------------------------------
 void OJoinController::removeConnectionData(const TTableConnectionData::value_type& _pData)
 {
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+	m_vTableConnectionData.erase( remove(m_vTableConnectionData.begin(),m_vTableConnectionData.end(),_pData),m_vTableConnectionData.end());
+#else
     m_vTableConnectionData.erase( ::std::remove(m_vTableConnectionData.begin(),m_vTableConnectionData.end(),_pData),m_vTableConnectionData.end());
+#endif
 }
 // -----------------------------------------------------------------------------
 void OJoinController::describeSupportedFeatures()
--- dbaccess/source/ui/querydesign/QueryTableView.cxx.old	2009-10-08 16:17:07.000000000 +0200
+++ dbaccess/source/ui/querydesign/QueryTableView.cxx	2010-03-03 17:50:44.000000000 +0100
@@ -373,8 +373,11 @@ void OQueryTableView::ReSync()
             pTabWin->clearListBox();
             delete pTabWin;
             arrInvalidTables.push_back(pData->GetAliasName());
-
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+			pTabWinDataList->erase( remove(pTabWinDataList->begin(),pTabWinDataList->end(),*aIter) ,pTabWinDataList->end());
+#else
             pTabWinDataList->erase( ::std::remove(pTabWinDataList->begin(),pTabWinDataList->end(),*aIter) ,pTabWinDataList->end());
+#endif
             continue;
         }
 
@@ -402,7 +405,11 @@ void OQueryTableView::ReSync()
 
         if (bInvalid)
         {	// nein -> Pech gehabt, die Connection faellt weg
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+			pTabConnDataList->erase( remove(pTabConnDataList->begin(),pTabConnDataList->end(),*aConIter) ,pTabConnDataList->end());
+#else
             pTabConnDataList->erase( ::std::remove(pTabConnDataList->begin(),pTabConnDataList->end(),*aConIter) ,pTabConnDataList->end());
+#endif
             continue;
         }
 
@@ -936,7 +943,11 @@ void OQueryTableView::HideTabWin( OQuery
 
         // die Daten zum TabWin muessen auch aus meiner Verantwortung entlassen werden
         TTableWindowData* pTabWinDataList = m_pView->getController().getTableWindowData();
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+		pTabWinDataList->erase( remove(pTabWinDataList->begin(),pTabWinDataList->end(),pTabWin->GetData()),pTabWinDataList->end());
+#else
         pTabWinDataList->erase( ::std::remove(pTabWinDataList->begin(),pTabWinDataList->end(),pTabWin->GetData()),pTabWinDataList->end());
+#endif
             // NICHT loeschen, da ja das TabWin selber - das noch lebt - sie auch noch braucht
             // Entweder geht es irgendwann wieder in meine Verantwortung ueber, (ueber ShowTabWin), dann fuege ich
             // auch die Daten wieder ein, oder die Undo-Action, die im Augenblick die alleinige Verantwortung fuer das Fenster
--- dbaccess/source/ui/relationdesign/RelationTableView.cxx.old	2009-10-08 16:17:07.000000000 +0200
+++ dbaccess/source/ui/relationdesign/RelationTableView.cxx	2010-03-03 17:50:44.000000000 +0100
@@ -149,8 +149,11 @@ void ORelationTableView::ReSync()
             pTabWin->clearListBox();
             delete pTabWin;
             arrInvalidTables.push_back(pData->GetTableName());
-
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+			pTabWinDataList->erase( remove(pTabWinDataList->begin(),pTabWinDataList->end(),*aIter) ,pTabWinDataList->end());
+#else
             pTabWinDataList->erase( ::std::remove(pTabWinDataList->begin(),pTabWinDataList->end(),*aIter) ,pTabWinDataList->end());
+#endif
             continue;
         }
 
@@ -179,7 +182,11 @@ void ORelationTableView::ReSync()
 
             if (bInvalid)
             {	// nein -> Pech gehabt, die Connection faellt weg
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+				pTabConnDataList->erase( remove(pTabConnDataList->begin(),pTabConnDataList->end(),*aConIter),pTabConnDataList->end() );
+#else
                 pTabConnDataList->erase( ::std::remove(pTabConnDataList->begin(),pTabConnDataList->end(),*aConIter),pTabConnDataList->end() );
+#endif
                 continue;
             }
         } // if ( !arrInvalidTables.empty() )
--- svx/source/accessibility/AccessibleControlShape.cxx.old	2009-10-07 15:07:00.000000000 +0200
+++ svx/source/accessibility/AccessibleControlShape.cxx	2010-03-03 17:50:44.000000000 +0100
@@ -473,7 +473,11 @@ Sequence< Type > SAL_CALL AccessibleCont
         Type aThisRoundType = *pBegin;
         if ( ++pBegin != pEnd )
         {
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+			pEnd = remove( pBegin, pEnd, aThisRoundType );
+#else
             pEnd = ::std::remove( pBegin, pEnd, aThisRoundType );
+#endif
             // now all types between begin and (the old) end which equal aThisRoundType
             // are moved behind the new end
         }
--- connectivity/source/drivers/odbcbase/OStatement.cxx.old	2009-10-19 13:28:09.000000000 +0200
+++ connectivity/source/drivers/odbcbase/OStatement.cxx	2010-03-03 17:50:44.000000000 +0100
@@ -170,7 +170,11 @@ Sequence< Type > SAL_CALL OStatement_Bas
     Sequence< Type > aOldTypes = OStatement_BASE::getTypes();
     if ( m_pConnection && !m_pConnection->isAutoRetrievingEnabled() )
     {
+#if defined(_MSC_VER) && (_MSC_VER > 1310) && (_MSC_VER < 1500)
+		remove(aOldTypes.getArray(),aOldTypes.getArray() + aOldTypes.getLength(),
+#else
         ::std::remove(aOldTypes.getArray(),aOldTypes.getArray() + aOldTypes.getLength(),
+#endif
                         ::getCppuType( (const Reference< XGeneratedResultSet > *)0 ));
         aOldTypes.realloc(aOldTypes.getLength() - 1);
     }
