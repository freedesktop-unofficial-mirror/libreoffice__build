diff -rup oox-orig-1/inc/oox/ppt/pptshape.hxx oox/inc/oox/ppt/pptshape.hxx
--- oox-orig-1/inc/oox/ppt/pptshape.hxx	2009-05-20 12:26:31.000000000 +0200
+++ oox/inc/oox/ppt/pptshape.hxx	2009-05-20 12:42:49.000000000 +0200
@@ -66,6 +66,10 @@ public:
 	void setReferenced( sal_Bool bReferenced ){ mbReferenced = bReferenced; };
         void setPlaceholder( oox::drawingml::ShapePtr pPlaceholder ) { mpPlaceholder = pPlaceholder; }
 
+	static oox::drawingml::ShapePtr findPlaceholder( const sal_Int32 nMasterPlaceholder, std::vector< oox::drawingml::ShapePtr >& rShapes );
+	static oox::drawingml::ShapePtr findPlaceholderByIndex( const sal_Int32 nIdx, std::vector< oox::drawingml::ShapePtr >& rShapes );
+	static oox::drawingml::ShapePtr findPlaceholder( sal_Int32 nFirstPlaceholder, sal_Int32 nSecondPlaceholder, std::vector< oox::drawingml::ShapePtr >& rShapes );
+
 protected:
 
         oox::drawingml::ShapePtr mpPlaceholder;
diff -rup oox-orig-1/source/ppt/pptshapecontext.cxx oox/source/ppt/pptshapecontext.cxx
--- oox-orig-1/source/ppt/pptshapecontext.cxx	2009-05-20 12:26:32.000000000 +0200
+++ oox/source/ppt/pptshapecontext.cxx	2009-05-20 12:44:46.000000000 +0200
@@ -65,53 +65,6 @@ PPTShapeContext::PPTShapeContext( Contex
 {
 }
 
-static oox::drawingml::ShapePtr findPlaceholder( const sal_Int32 nMasterPlaceholder, std::vector< oox::drawingml::ShapePtr >& rShapes )
-{
-	oox::drawingml::ShapePtr aShapePtr;
-	std::vector< oox::drawingml::ShapePtr >::reverse_iterator aRevIter( rShapes.rbegin() );
-	while( aRevIter != rShapes.rend() )
-	{
-		if ( (*aRevIter)->getSubType() == nMasterPlaceholder )
-		{
-			aShapePtr = *aRevIter;
-			break;
-		}
-        std::vector< oox::drawingml::ShapePtr >& rChildren = (*aRevIter)->getChildren();
-        aShapePtr = findPlaceholder( nMasterPlaceholder, rChildren );
-		if ( aShapePtr.get() )
-			break;
-		aRevIter++;
-	}
-	return aShapePtr;
-}
-
-static oox::drawingml::ShapePtr findPlaceholderByIndex( const sal_Int32 nIdx, std::vector< oox::drawingml::ShapePtr >& rShapes )
-{
-	oox::drawingml::ShapePtr aShapePtr;
-	std::vector< oox::drawingml::ShapePtr >::reverse_iterator aRevIter( rShapes.rbegin() );
-	while( aRevIter != rShapes.rend() )
-	{
-		if ( (*aRevIter)->getIndex() == nIdx )
-		{
-			aShapePtr = *aRevIter;
-			break;
-		}
-		std::vector< oox::drawingml::ShapePtr >& rChildren = (*aRevIter)->getChildren();
-		aShapePtr = findPlaceholderByIndex( nIdx, rChildren );
-		if ( aShapePtr.get() )
-		    break;
-		aRevIter++;
-	}
-	return aShapePtr;
-}
-
-// if nFirstPlaceholder can't be found, it will be searched for nSecondPlaceholder
-static oox::drawingml::ShapePtr findPlaceholder( sal_Int32 nFirstPlaceholder, sal_Int32 nSecondPlaceholder, std::vector< oox::drawingml::ShapePtr >& rShapes )
-{
-	oox::drawingml::ShapePtr pPlaceholder = findPlaceholder( nFirstPlaceholder, rShapes );
-	return !nSecondPlaceholder || pPlaceholder.get() ? pPlaceholder : findPlaceholder( nSecondPlaceholder, rShapes );
-}
-
 Reference< XFastContextHandler > PPTShapeContext::createFastChildContext( sal_Int32 aElementToken, const Reference< XFastAttributeList >& xAttribs ) throw (SAXException, RuntimeException)
 {
 	Reference< XFastContextHandler > xRet;
@@ -147,7 +100,7 @@ Reference< XFastContextHandler > PPTShap
 				    // TODO: use id to shape map
 				    SlidePersistPtr pMasterPersist( mpSlidePersistPtr->getMasterPersist() );
 				    if ( pMasterPersist.get() )
-					pPlaceholder = findPlaceholderByIndex( nIdx, pMasterPersist->getShapes()->getChildren() );
+					pPlaceholder = PPTShape::findPlaceholderByIndex( nIdx, pMasterPersist->getShapes()->getChildren() );
 				}
 				if ( !pPlaceholder.get() && ( ( eShapeLocation == Slide ) || ( eShapeLocation == Layout ) ) )
 				{
@@ -188,12 +141,12 @@ Reference< XFastContextHandler > PPTShap
 					if ( nFirstPlaceholder )
 					{
 						if ( eShapeLocation == Layout )		// for layout objects the referenced object can be found within the same shape tree
-                            pPlaceholder = findPlaceholder( nFirstPlaceholder, nSecondPlaceholder, mpSlidePersistPtr->getShapes()->getChildren() );
+						    pPlaceholder = PPTShape::findPlaceholder( nFirstPlaceholder, nSecondPlaceholder, mpSlidePersistPtr->getShapes()->getChildren() );
 						else if ( eShapeLocation == Slide )	// normal slide shapes have to search within the corresponding master tree for referenced objects
 						{
 							SlidePersistPtr pMasterPersist( mpSlidePersistPtr->getMasterPersist() );
 							if ( pMasterPersist.get() )
-                                pPlaceholder = findPlaceholder( nFirstPlaceholder, nSecondPlaceholder, pMasterPersist->getShapes()->getChildren() );
+							    pPlaceholder = PPTShape::findPlaceholder( nFirstPlaceholder, nSecondPlaceholder, pMasterPersist->getShapes()->getChildren() );
 						}
 					}
 				}
diff -rup oox-orig-1/source/ppt/pptshape.cxx oox/source/ppt/pptshape.cxx
--- oox-orig-1/source/ppt/pptshape.cxx	2009-05-20 12:26:32.000000000 +0200
+++ oox/source/ppt/pptshape.cxx	2009-05-20 14:01:11.000000000 +0200
@@ -163,6 +163,17 @@ void PPTShape::addShape(
 				}
 			}
 
+			// use placeholder index if possible
+			if( mnSubType && getIndex() && rSlidePersist.getMasterPersist().get() ) {
+			    oox::drawingml::ShapePtr pPlaceholder = PPTShape::findPlaceholderByIndex( getIndex(), rSlidePersist.getMasterPersist()->getShapes()->getChildren() );
+			    if( pPlaceholder.get() && pPlaceholder->getTextBody() ) {
+				TextListStylePtr pNewTextListStyle (new TextListStyle());
+				
+				pNewTextListStyle->apply( pPlaceholder->getTextBody()->getTextListStyle() );
+				aMasterTextListStyle = pNewTextListStyle;
+			    }
+			}
+
 			// use style from master slide for placeholders only, otherwise use slide's style, which might be the default style from presentation
 			if ( !aMasterTextListStyle.get() )
 			        aMasterTextListStyle = ( mnSubType && rSlidePersist.getMasterPersist().get() ) ? rSlidePersist.getMasterPersist()->getOtherTextStyle() : rSlidePersist.getOtherTextStyle();
@@ -203,4 +214,51 @@ void PPTShape::applyShapeReference( cons
 	Shape::applyShapeReference( rReferencedShape );
 }
 
+oox::drawingml::ShapePtr PPTShape::findPlaceholder( const sal_Int32 nMasterPlaceholder, std::vector< oox::drawingml::ShapePtr >& rShapes )
+{
+	oox::drawingml::ShapePtr aShapePtr;
+	std::vector< oox::drawingml::ShapePtr >::reverse_iterator aRevIter( rShapes.rbegin() );
+	while( aRevIter != rShapes.rend() )
+	{
+		if ( (*aRevIter)->getSubType() == nMasterPlaceholder )
+		{
+			aShapePtr = *aRevIter;
+			break;
+		}
+        std::vector< oox::drawingml::ShapePtr >& rChildren = (*aRevIter)->getChildren();
+        aShapePtr = findPlaceholder( nMasterPlaceholder, rChildren );
+		if ( aShapePtr.get() )
+			break;
+		aRevIter++;
+	}
+	return aShapePtr;
+}
+
+oox::drawingml::ShapePtr PPTShape::findPlaceholderByIndex( const sal_Int32 nIdx, std::vector< oox::drawingml::ShapePtr >& rShapes )
+{
+	oox::drawingml::ShapePtr aShapePtr;
+	std::vector< oox::drawingml::ShapePtr >::reverse_iterator aRevIter( rShapes.rbegin() );
+	while( aRevIter != rShapes.rend() )
+	{
+		if ( (*aRevIter)->getIndex() == nIdx )
+		{
+			aShapePtr = *aRevIter;
+			break;
+		}
+		std::vector< oox::drawingml::ShapePtr >& rChildren = (*aRevIter)->getChildren();
+		aShapePtr = findPlaceholderByIndex( nIdx, rChildren );
+		if ( aShapePtr.get() )
+		    break;
+		aRevIter++;
+	}
+	return aShapePtr;
+}
+
+// if nFirstPlaceholder can't be found, it will be searched for nSecondPlaceholder
+oox::drawingml::ShapePtr PPTShape::findPlaceholder( sal_Int32 nFirstPlaceholder, sal_Int32 nSecondPlaceholder, std::vector< oox::drawingml::ShapePtr >& rShapes )
+{
+	oox::drawingml::ShapePtr pPlaceholder = findPlaceholder( nFirstPlaceholder, rShapes );
+	return !nSecondPlaceholder || pPlaceholder.get() ? pPlaceholder : findPlaceholder( nSecondPlaceholder, rShapes );
+}
+
 } }
