--- offapi/com/sun/star/drawing/TextFitToSizeType.idl.old	2009-04-02 10:51:28.000000000 +0000
+++ offapi/com/sun/star/drawing/TextFitToSizeType.idl	2009-04-06 16:42:18.000000000 +0000
@@ -63,9 +63,10 @@ published enum TextFitToSizeType
  
 	//------------------------------------------------------------------------- 
 
-	/** if the shape is scaled, the font attributes are scaled and hard set
-		on the text */
-	RESIZEATTR 
+	/** if the shape is scaled, the font is scaled isotrophically to
+		fit the avaiable space. Auto line-breaks will keep working
+   */
+	AUTOFIT 
  
 }; 
  
--- qadevOOo/runner/util/ValueChanger.java.old	2009-04-02 10:57:39.000000000 +0000
+++ qadevOOo/runner/util/ValueChanger.java	2009-04-06 16:42:18.000000000 +0000
@@ -389,7 +389,7 @@ public class ValueChanger {
         com.sun.star.drawing.TextFitToSizeType TF1 = com.sun.star.drawing.TextFitToSizeType.ALLLINES;
         com.sun.star.drawing.TextFitToSizeType TF2 = com.sun.star.drawing.TextFitToSizeType.NONE;
         com.sun.star.drawing.TextFitToSizeType TF3 = com.sun.star.drawing.TextFitToSizeType.PROPORTIONAL;
-        com.sun.star.drawing.TextFitToSizeType TF4 = com.sun.star.drawing.TextFitToSizeType.RESIZEATTR;
+        com.sun.star.drawing.TextFitToSizeType TF4 = com.sun.star.drawing.TextFitToSizeType.AUTOFIT;
         if (oldValue.equals(TF1)) newValue = TF2;
         if (oldValue.equals(TF2)) newValue = TF3;
         if (oldValue.equals(TF3)) newValue = TF4;
--- sd/sdi/_drvwsh.sdi.old	2009-04-02 10:45:43.000000000 +0000
+++ sd/sdi/_drvwsh.sdi	2009-04-06 16:42:18.000000000 +0000
@@ -28,18 +28,6 @@
  *
  ************************************************************************/
 
-enum SdrFitToSizeType
-{
-    SDRTEXTFIT_NONE ,
-    SDRTEXTFIT_PROPORTIONAL ,
-    SDRTEXTFIT_ALLLINES ,
-    SDRTEXTFIT_RESIZEATTR
-}
-item UINT32 SvxObjectItem ;
-item BOOL SdrShadowItem ;
-item SdrFitToSizeType SdrTextFitToSizeTypeItem ;
-
-
 interface DrawView
 {
 	SID_JUMPTOMARK // ole : no, status : ?
--- svx/inc/svx/sdr/attribute/sdrtextattribute.hxx
+++ svx/inc/svx/sdr/attribute/sdrtextattribute.hxx
@@ -65,6 +65,7 @@ namespace drawinglayer
 			// bitfield
 			unsigned								mbContour : 1;
 			unsigned								mbFitToSize : 1;
+			unsigned								mbAutoFit : 1;
 			unsigned								mbHideContour : 1;
 			unsigned								mbBlink : 1;
 			unsigned								mbScroll : 1;
@@ -81,6 +82,7 @@ namespace drawinglayer
 				sal_Int32 aTextLowerDistance, 
 				bool bContour, 
                 bool bFitToSize, 
+                bool bAutoFit,
 				bool bHideContour, 
                 bool bBlink, 
 				bool bScroll,
@@ -93,6 +95,7 @@ namespace drawinglayer
             const OutlinerParaObject& getOutlinerParaObject() const { return maOutlinerParaObject; }
 			bool isContour() const { return mbContour; }
 			bool isFitToSize() const { return mbFitToSize; }
+			bool isAutoFit() const { return mbAutoFit; }
 			bool isHideContour() const { return mbHideContour; }
 			bool isBlink() const { return mbBlink; }
 			bool isScroll() const { return mbScroll; }
--- svx/inc/svx/sdr/primitive2d/sdrtextprimitive2d.hxx.old	2009-04-02 11:03:37.000000000 +0000
+++ svx/inc/svx/sdr/primitive2d/sdrtextprimitive2d.hxx	2009-04-06 16:42:18.000000000 +0000
@@ -265,6 +265,47 @@ namespace drawinglayer
 
 //////////////////////////////////////////////////////////////////////////////
 
+namespace drawinglayer
+{
+	namespace primitive2d
+	{
+		class SdrAutoFitTextPrimitive2D : public SdrTextPrimitive2D
+		{
+		private:
+			::basegfx::B2DHomMatrix					maTextRangeTransform;	// text range transformation from unit range ([0.0 .. 1.0]) to text range
+
+			// bitfield
+            unsigned                                mbWordWrap : 1;         // for CustomShapes text layout
+
+		protected:
+			// local decomposition.
+			virtual Primitive2DSequence createLocalDecomposition(const geometry::ViewInformation2D& aViewInformation) const;
+
+		public:
+			SdrAutoFitTextPrimitive2D(
+				const SdrText* pSdrText,
+                const OutlinerParaObject& rOutlinerParaObjectPtr,
+				const ::basegfx::B2DHomMatrix& rTextRangeTransform,
+                bool bWordWrap);
+
+			// get data
+			const basegfx::B2DHomMatrix& getTextRangeTransform() const { return maTextRangeTransform; }
+			bool getWordWrap() const { return mbWordWrap; }
+
+			// compare operator
+			virtual bool operator==(const BasePrimitive2D& rPrimitive) const;
+
+			// transformed clone operator
+			virtual SdrTextPrimitive2D* createTransformedClone(const ::basegfx::B2DHomMatrix& rTransform) const;
+
+			// provide unique ID
+			DeclPrimitrive2DIDBlock()
+		};
+	} // end of namespace primitive2d
+} // end of namespace drawinglayer
+
+//////////////////////////////////////////////////////////////////////////////
+
 #endif //INCLUDED_SDR_PRIMITIVE2D_SDRTEXTPRIMITIVE2D_HXX
 
 // eof
--- svx/inc/svx/sdr/primitive2d/svx_primitivetypes2d.hxx
+++ svx/inc/svx/sdr/primitive2d/svx_primitivetypes2d.hxx
@@ -52,6 +52,7 @@
 #define PRIMITIVE2D_ID_OVERLAYROLLINGRECTANGLEPRIMITIVE (PRIMITIVE2D_ID_RANGE_SVX| 20)
 #define PRIMITIVE2D_ID_SDRCONTROLPRIMITIVE2D            (PRIMITIVE2D_ID_RANGE_SVX| 21)
 #define PRIMITIVE2D_ID_SDROLECONTENTPRIMITIVE2D         (PRIMITIVE2D_ID_RANGE_SVX| 22)
+#define PRIMITIVE2D_ID_SDRAUTOFITTEXTPRIMITIVE2D		(PRIMITIVE2D_ID_RANGE_SVX| 23)
 
 //////////////////////////////////////////////////////////////////////////////
 
--- svx/inc/svx/sdtfsitm.hxx.old	2009-04-02 11:03:40.000000000 +0000
+++ svx/inc/svx/sdtfsitm.hxx	2009-04-06 16:42:18.000000000 +0000
@@ -34,19 +34,21 @@
 #include <svx/svddef.hxx>
 #include "svx/svxdllapi.h"
 
-enum SdrFitToSizeType {SDRTEXTFIT_NONE,         // - kein FitToSize
-					   SDRTEXTFIT_PROPORTIONAL, // - Alle Buchstaben proportional umgroessern
-					   SDRTEXTFIT_ALLLINES,     // - Zus. jede Zeile separat in der Breite stretchen
-					   SDRTEXTFIT_RESIZEATTR};  // - Bei Rahmenumgroesserung (ausser Autogrow) wird
-												//   die Schriftgroesse umattributiert (hart)
+enum SdrFitToSizeType {
+    SDRTEXTFIT_NONE,         // - no fit-to-size
+    SDRTEXTFIT_PROPORTIONAL, // - resize all glyhs proportionally
+                             //   (might scale anisotrophically)
+    SDRTEXTFIT_ALLLINES,     // - like SDRTEXTFIT_PROPORTIONAL, but
+                             //   scales each line separately
+    SDRTEXTFIT_AUTOFIT};     // - mimics PPT's automatic adaption of
+                             //   font size to text rect - comparable
+                             //   to SDRTEXTFIT_PROPORTIONAL, but
+                             //   scales isotrophically
 
-// Bei SDRTEXTFIT_PROPORTIONAL und SDRTEXTFIT_ALLLINES gibt es kein AutoGrow und
-// keine automatischen Umbrueche.
-// Ist SDRTEXTFIT_RESIZEATTR gesetzt, so wird beim umgroessern des Textrahmens
-// (ausser bei AutoGrow) die Schrift durch harte Attributierung ebenfalls
-// umgegroessert.
-// Bei AutoGrowingWidth gibt es ebenfalls keine automatischen Umbrueche (erst bei
-// TextMaxFrameWidth).
+// No AutoGrow and no automatic line breaks for
+// SDRTEXTFIT_PROPORTIONAL and SDRTEXTFIT_ALLLINES.
+// No automatic line breaks for AutoGrowingWidth as well (only if
+// TextMaxFrameWidth is reached).
 
 //--------------------------------
 // class SdrTextFitToSizeTypeItem
--- svx/inc/svx/svdotext.hxx
+++ svx/inc/svx/svdotext.hxx
@@ -62,6 +62,7 @@ namespace drawinglayer { namespace primi
 	class SdrContourTextPrimitive2D;
 	class SdrPathTextPrimitive2D;
 	class SdrBlockTextPrimitive2D;
+	class SdrAutoFitTextPrimitive2D;
 	class SdrStretchTextPrimitive2D;
 }}
 
@@ -259,6 +260,9 @@ protected:
     // Flag for allowing text animation. Default is sal_true.
     BOOL						mbTextAnimationAllowed : 1;
 
+    // flag for preventing recursive onEditOutlinerStatusEvent calls
+	BOOL					    mbInDownScale : 1;
+
     SdrOutliner& ImpGetDrawOutliner() const;
 
 private:
@@ -272,6 +276,8 @@ private:
                                        Rectangle& 		rAnchorRect, 
                                        Rectangle& 		rPaintRect, 
                                        Fraction& 		aFitXKorreg ) const;
+    void ImpAutoFitText( SdrOutliner& rOutliner ) const;
+    static void ImpAutoFitText( SdrOutliner& rOutliner, const Size& rShapeSize, bool bIsVerticalWriting );
 	SVX_DLLPRIVATE SdrObject* ImpConvertContainedTextToSdrPathObjs(bool bToPoly) const;
 	SVX_DLLPRIVATE void ImpLinkAnmeldung();
 	SVX_DLLPRIVATE void ImpLinkAbmeldung();
@@ -283,7 +289,7 @@ protected:
 	SdrObject* ImpConvertMakeObj(const basegfx::B2DPolyPolygon& rPolyPolygon, sal_Bool bClosed, sal_Bool bBezier, sal_Bool bNoSetAttr = sal_False) const;
 	SdrObject* ImpConvertAddText(SdrObject* pObj, FASTBOOL bBezier) const;
 	void ImpSetTextStyleSheetListeners();
-	void ImpSetCharStretching(SdrOutliner& rOutliner, const Rectangle& rTextRect, const Rectangle& rAnchorRect, Fraction& rFitXKorreg) const;
+    void ImpSetCharStretching(SdrOutliner& rOutliner, const Size& rTextSize, const Size& rShapeSize, Fraction& rFitXKorreg) const;
 	void ImpJustifyRect(Rectangle& rRect) const;
 	void ImpCheckShear();
 	Rectangle ImpDragCalcRect(const SdrDragStat& rDrag) const;
@@ -345,6 +351,10 @@ public:
 	void NbcResizeTextAttributes(const Fraction& xFact, const Fraction& yFact);
 	FASTBOOL IsTextFrame() const { return bTextFrame; }
 	FASTBOOL IsOutlText() const { return bTextFrame && (eTextKind==OBJ_OUTLINETEXT || eTextKind==OBJ_TITLETEXT); }
+    /// returns true if the PPT autofit of text into shape bounds is enabled. implies IsFitToSize()==false!
+	FASTBOOL IsAutoFit() const;
+    /// returns true if the old feature for fitting shape content should into shape is enabled. implies IsAutoFit()==false!
+	FASTBOOL IsFitToSize() const;
 	SdrObjKind GetTextKind() const { return eTextKind; }
 
 	virtual bool HasText() const;
@@ -590,6 +600,10 @@ public:
 		drawinglayer::primitive2d::Primitive2DSequence& rTarget, 
 		const drawinglayer::primitive2d::SdrBlockTextPrimitive2D& rSdrBlockTextPrimitive,
 		const drawinglayer::geometry::ViewInformation2D& aViewInformation) const;
+	void impDecomposeAutoFitTextPrimitive(
+		drawinglayer::primitive2d::Primitive2DSequence& rTarget, 
+		const drawinglayer::primitive2d::SdrAutoFitTextPrimitive2D& rSdrAutofitTextPrimitive,
+		const drawinglayer::geometry::ViewInformation2D& aViewInformation) const;
 	void impDecomposeStretchTextPrimitive(
 		drawinglayer::primitive2d::Primitive2DSequence& rTarget, 
 		const drawinglayer::primitive2d::SdrStretchTextPrimitive2D& rSdrStretchTextPrimitive,
--- svx/source/cui/dbregisterednamesconfig.cxx
+++ svx/source/cui/dbregisterednamesconfig.cxx
@@ -163,7 +163,7 @@ namespace svx
                     }
                     catch( const Exception& )
                     {
-                    	DBG_UNHANDLED_EXCEPTION();
+                    	//DBG_UNHANDLED_EXCEPTION();
                     }
                 }
 			}
@@ -184,7 +184,7 @@ namespace svx
                     }
                     catch( const Exception& )
                     {
-                    	DBG_UNHANDLED_EXCEPTION();
+                    	//DBG_UNHANDLED_EXCEPTION();
                     }
                 }
 			}
--- svx/source/cui/textattr.cxx
+++ svx/source/cui/textattr.cxx
@@ -460,7 +460,6 @@ BOOL SvxTextAttrPage::FillItemSet( SfxIt
             default: ; //prevent warning
 				DBG_ERROR( "svx::SvxTextAttrPage::FillItemSet(), unhandled state!" );
 			case STATE_NOCHECK: eFTS = SDRTEXTFIT_NONE; break;
-			//case STATE_CHECK: eFTS = SDRTEXTFIT_RESIZEATTR; break;
 			case STATE_CHECK: eFTS = SDRTEXTFIT_PROPORTIONAL; break;
 		}
 		rAttrs.Put( SdrTextFitToSizeTypeItem( eFTS ) );
--- svx/source/editeng/editobj2.hxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/editobj2.hxx	2009-04-06 16:42:18.000000000 +0000
@@ -115,12 +115,16 @@ class XParaPortionList : public  XBasePa
 	ULONG 		nRefDevPtr;
 	OutDevType	eRefDevType;
 	MapMode		aRefMapMode;
+	sal_uInt16	nStretchX;
+	sal_uInt16	nStretchY;
 	ULONG		nPaperWidth;
 
 
 public:
-			XParaPortionList( OutputDevice* pRefDev, ULONG nPW ) :
-				aRefMapMode( pRefDev->GetMapMode() )
+    XParaPortionList( OutputDevice* pRefDev, ULONG nPW, sal_uInt16 _nStretchX, sal_uInt16 _nStretchY ) :
+        aRefMapMode( pRefDev->GetMapMode() ),
+        nStretchX(_nStretchX),
+        nStretchY(_nStretchY)
 				{
 					nRefDevPtr = (ULONG)pRefDev; nPaperWidth = nPW;
 					eRefDevType = pRefDev->GetOutDevType();
@@ -130,6 +134,8 @@ public:
 	ULONG			GetPaperWidth() const 		{ return nPaperWidth; }
 	OutDevType		GetRefDevType() const 		{ return eRefDevType; }
 	const MapMode&	GetRefMapMode() const		{ return aRefMapMode; }
+	sal_uInt16	GetStretchX() const         { return nStretchX; }
+	sal_uInt16	GetStretchY() const         { return nStretchY; }
 };
 
 /* cl removed because not needed anymore since binfilter
--- svx/source/editeng/impedit3.cxx.old	2009-04-06 16:42:16.000000000 +0000
+++ svx/source/editeng/impedit3.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -2665,38 +2665,46 @@ void ImpEditEngine::SeekCursor( ContentNode* pNode, sal_uInt16 nPos, SvxFont& rF
 				aRealSz.Height() /= 100;
 			}
 			if ( nStretchX != 100 )
-			{
-				aRealSz.Width() *= nStretchX;
-				aRealSz.Width() /= 100;
+            {
+                if ( nStretchX == nStretchY &&
+                     nRelWidth == 100 )
+                {
+                    aRealSz.Width() = 0;
+                }
+                else
+                {
+                    aRealSz.Width() *= nStretchX;
+                    aRealSz.Width() /= 100;
 
-				// Auch das Kerning: (long wegen Zwischenergebnis)
-				long nKerning = rFont.GetFixKerning();
+                    // Auch das Kerning: (long wegen Zwischenergebnis)
+                    long nKerning = rFont.GetFixKerning();
 /*
-				Die Ueberlegung war: Wenn neg. Kerning, aber StretchX = 200
-				=> Nicht das Kerning verdoppelt, also die Buchstaben weiter
-				zusammenziehen
-				---------------------------
-				Kern	StretchX	=>Kern
-				---------------------------
-				 >0		<100		< (Proportional)
-				 <0		<100		< (Proportional)
-				 >0		>100		> (Proportional)
-				 <0		>100		< (Der Betrag, also Antiprop)
+  Die Ueberlegung war: Wenn neg. Kerning, aber StretchX = 200
+  => Nicht das Kerning verdoppelt, also die Buchstaben weiter
+  zusammenziehen
+  ---------------------------
+  Kern	StretchX	=>Kern
+  ---------------------------
+  >0		<100		< (Proportional)
+  <0		<100		< (Proportional)
+  >0		>100		> (Proportional)
+  <0		>100		< (Der Betrag, also Antiprop)
 */
-				if ( ( nKerning < 0  ) && ( nStretchX > 100 ) )
-				{
-					// Antiproportional
-					nKerning *= 100;
-					nKerning /= nStretchX;
-				}
-				else if ( nKerning )
-				{
-					// Proportional
-					nKerning *= nStretchX;
-					nKerning /= 100;
-				}
-				rFont.SetFixKerning( (short)nKerning );
-			}
+                    if ( ( nKerning < 0  ) && ( nStretchX > 100 ) )
+                    {
+                        // Antiproportional
+                        nKerning *= 100;
+                        nKerning /= nStretchX;
+                    }
+                    else if ( nKerning )
+                    {
+                        // Proportional
+                        nKerning *= nStretchX;
+                        nKerning /= 100;
+                    }
+                    rFont.SetFixKerning( (short)nKerning );
+                }
+            }
 		}
 		if ( nRelWidth != 100 )
 		{
@@ -4085,20 +4085,25 @@ void ImpEditEngine::SetFlatMode( sal_Boo
 
 void ImpEditEngine::SetCharStretching( sal_uInt16 nX, sal_uInt16 nY )
 {
+    bool bChanged(false);
 	if ( !IsVertical() )
 	{
+        bChanged = nStretchX!=nX || nStretchY!=nY;
 		nStretchX = nX;
 		nStretchY = nY;
 	}
 	else
 	{
+        bChanged = nStretchX!=nY || nStretchY!=nX;
 		nStretchX = nY;
 		nStretchY = nX;
 	}
 
-	if ( aStatus.DoStretch() )
+	if (bChanged && aStatus.DoStretch())
 	{
 		FormatFullDoc();
+        // (potentially) need everything redrawn
+        aInvalidRec=Rectangle(0,0,1000000,1000000);
 		UpdateViews( GetActiveView() );
 	}
 }
--- svx/source/editeng/impedit4.cxx.old	2009-04-02 11:03:02.000000000 +0000
+++ svx/source/editeng/impedit4.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -1169,7 +1169,7 @@ EditTextObject*	ImpEditEngine::CreateBin
 	// Schwelle rauf setzen, wenn Olli die Absaetze nicht mehr zerhackt!
 	if ( bAllowBigObjects && bOnlyFullParagraphs && IsFormatted() && GetUpdateMode() && ( nTextPortions >= nBigObjectStart ) )
 	{
-		XParaPortionList* pXList = new XParaPortionList( GetRefDevice(), aPaperSize.Width() );
+		XParaPortionList* pXList = new XParaPortionList( GetRefDevice(), aPaperSize.Width(), nStretchX, nStretchY );
 		pTxtObj->SetPortionInfo( pXList );
 		for ( nNode = nStartNode; nNode <= nEndNode; nNode++  )
 		{
@@ -1260,7 +1260,9 @@ EditSelection ImpEditEngine::InsertBinTe
 	XParaPortionList* pPortionInfo = rTextObject.GetPortionInfo();
 
 	if ( pPortionInfo && ( (long)pPortionInfo->GetPaperWidth() == aPaperSize.Width() )
-			&& ( pPortionInfo->GetRefMapMode() == GetRefDevice()->GetMapMode() ) )
+         && ( pPortionInfo->GetRefMapMode() == GetRefDevice()->GetMapMode() ) 
+         && ( pPortionInfo->GetStretchX() == nStretchX )
+         && ( pPortionInfo->GetStretchY() == nStretchY ) )
 	{
 		if ( ( pPortionInfo->GetRefDevPtr() == (sal_uIntPtr)GetRefDevice() ) ||
 			 ( ( pPortionInfo->GetRefDevType() == OUTDEV_VIRDEV ) &&
--- svx/source/outliner/outliner.cxx.old	2009-04-02 11:02:55.000000000 +0000
+++ svx/source/outliner/outliner.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -922,7 +922,10 @@ Font Outliner::ImpCalcBulletFont( USHORT
     }
 
     // #107508# Use original scale...
-	USHORT nScale = /* pEditEngine->IsFlatMode() ? DEFAULT_SCALE : */ pFmt->GetBulletRelSize();
+    USHORT nStretchX, nStretchY;
+    const_cast<Outliner*>(this)->GetGlobalCharStretching(nStretchX, nStretchY);
+    
+	USHORT nScale = pFmt->GetBulletRelSize() * nStretchY / 100;
 	ULONG nScaledLineHeight = aStdFont.GetSize().Height();
 	nScaledLineHeight *= nScale*10;
 	nScaledLineHeight /= 1000;
@@ -965,6 +968,12 @@ void Outliner::PaintBullet( USHORT nPara
         BOOL bRightToLeftPara = pEditEngine->IsRightToLeft( nPara );
 
 		Rectangle aBulletArea( ImpCalcBulletArea( nPara, TRUE, FALSE ) );
+        USHORT nStretchX, nStretchY;
+        GetGlobalCharStretching(nStretchX, nStretchY);
+        aBulletArea = Rectangle( Point(aBulletArea.Left()*nStretchX/100,
+                                       aBulletArea.Top()),
+                                 Size(aBulletArea.GetWidth()*nStretchX/100,
+                                      aBulletArea.GetHeight()) );
 
         Paragraph* pPara = pParaList->GetParagraph( nPara );
         const SvxNumberFormat* pFmt = GetNumberFormat( nPara );
--- svx/source/sdr/attribute/sdrtextattribute.cxx.old	2009-04-02 11:02:53.000000000 +0000
+++ svx/source/sdr/attribute/sdrtextattribute.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -52,6 +52,7 @@ namespace drawinglayer
 			sal_Int32 aTextLowerDistance, 
 			bool bContour, 
 			bool bFitToSize, 
+			bool bAutoFit, 
 			bool bHideContour, 
 			bool bBlink, 
 			bool bScroll,
@@ -65,6 +66,7 @@ namespace drawinglayer
 			maTextLowerDistance(aTextLowerDistance),
 			mbContour(bContour),
 			mbFitToSize(bFitToSize),
+			mbAutoFit(bAutoFit),
 			mbHideContour(bHideContour),
 			mbBlink(bBlink),
 			mbScroll(bScroll),
@@ -82,6 +84,7 @@ namespace drawinglayer
 				&& getTextLowerDistance() == rCandidate.getTextLowerDistance()
 				&& isContour() == rCandidate.isContour()
 				&& isFitToSize() == rCandidate.isFitToSize()
+				&& isAutoFit() == rCandidate.isAutoFit()
 				&& isHideContour() == rCandidate.isHideContour()
 				&& isBlink() == rCandidate.isBlink()
 				&& isScroll() == rCandidate.isScroll()
--- svx/source/sdr/primitive2d/sdrattributecreator.cxx.old	2009-04-02 11:02:54.000000000 +0000
+++ svx/source/sdr/primitive2d/sdrattributecreator.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -521,7 +521,8 @@ namespace drawinglayer
 				    rTextObj.GetTextRightDistance(),
 				    rTextObj.GetTextLowerDistance(),
 				    ((const SdrTextContourFrameItem&)rSet.Get(SDRATTR_TEXT_CONTOURFRAME)).GetValue(),
-				    (SDRTEXTFIT_PROPORTIONAL == eFit || SDRTEXTFIT_ALLLINES == eFit),
+                    rTextObj.IsFitToSize(),
+                    rTextObj.IsAutoFit(),
 				    ((const XFormTextHideFormItem&)rSet.Get(XATTR_FORMTXTHIDEFORM)).GetValue(),
 				    SDRTEXTANI_BLINK == eAniKind, 
 				    SDRTEXTANI_SCROLL == eAniKind || SDRTEXTANI_ALTERNATE == eAniKind || SDRTEXTANI_SLIDE == eAniKind,
@@ -542,7 +543,7 @@ namespace drawinglayer
 				const XGradient& rGradient = ((XFillFloatTransparenceItem*)pGradientItem)->GetGradientValue();
 				const sal_uInt8 nStartLuminance(rGradient.GetStartColor().GetLuminance());
 				const sal_uInt8 nEndLuminance(rGradient.GetEndColor().GetLuminance());
-				const bool bCompletelyTransparent(0xff == nStartLuminance == nEndLuminance);
+				const bool bCompletelyTransparent(0xff == nStartLuminance && 0xff == nEndLuminance);
 
 				if(!bCompletelyTransparent)
 				{
--- svx/source/sdr/primitive2d/sdrdecompositiontools.cxx.old	2009-04-02 11:02:54.000000000 +0000
+++ svx/source/sdr/primitive2d/sdrdecompositiontools.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -269,6 +269,11 @@ namespace drawinglayer
 					// streched text in range
 					pNew = new SdrStretchTextPrimitive2D(rText.getSdrText(), rText.getOutlinerParaObject(), aAnchorTransform);
 				}
+				else if(rText.isAutoFit())
+				{
+					// isotrophically scaled text in range
+					pNew = new SdrAutoFitTextPrimitive2D(&rText.getSdrText(), rText.getOutlinerParaObject(), aAnchorTransform, bWordWrap);
+				}
 				else // text in range
 				{
 					// build new primitive
--- svx/source/sdr/primitive2d/sdrtextprimitive2d.cxx.old	2009-04-02 11:02:54.000000000 +0000
+++ svx/source/sdr/primitive2d/sdrtextprimitive2d.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -305,6 +305,55 @@ namespace drawinglayer
 {
 	namespace primitive2d
 	{
+		Primitive2DSequence SdrAutoFitTextPrimitive2D::createLocalDecomposition(const geometry::ViewInformation2D& aViewInformation) const
+		{
+            Primitive2DSequence aRetval;
+            getSdrText()->GetObject().impDecomposeAutoFitTextPrimitive(aRetval, *this, aViewInformation);
+
+            return encapsulateWithTextHierarchyBlockPrimitive2D(aRetval);
+		}
+
+		SdrAutoFitTextPrimitive2D::SdrAutoFitTextPrimitive2D(
+			const SdrText* pSdrText,
+            const OutlinerParaObject& rParaObj,
+			const ::basegfx::B2DHomMatrix& rTextRangeTransform,
+            bool bWordWrap)
+		:	SdrTextPrimitive2D(pSdrText, rParaObj),
+			maTextRangeTransform(rTextRangeTransform),
+            mbWordWrap(bWordWrap)
+		{
+		}
+
+		bool SdrAutoFitTextPrimitive2D::operator==(const BasePrimitive2D& rPrimitive) const
+		{
+			if(SdrTextPrimitive2D::operator==(rPrimitive))
+			{
+				const SdrBlockTextPrimitive2D& rCompare = (SdrBlockTextPrimitive2D&)rPrimitive;
+
+				return (getTextRangeTransform() == rCompare.getTextRangeTransform()
+                    && getWordWrap() == rCompare.getWordWrap());
+			}
+
+			return false;
+		}
+
+		SdrTextPrimitive2D* SdrAutoFitTextPrimitive2D::createTransformedClone(const ::basegfx::B2DHomMatrix& rTransform) const
+		{
+			return new SdrAutoFitTextPrimitive2D(getSdrText(), getOutlinerParaObject(), rTransform * getTextRangeTransform(), getWordWrap());
+		}
+
+		// provide unique ID
+		ImplPrimitrive2DIDBlock(SdrAutoFitTextPrimitive2D, PRIMITIVE2D_ID_SDRAUTOFITTEXTPRIMITIVE2D)
+
+	} // end of namespace primitive2d
+} // end of namespace drawinglayer
+
+//////////////////////////////////////////////////////////////////////////////
+
+namespace drawinglayer
+{
+	namespace primitive2d
+	{
 		Primitive2DSequence SdrStretchTextPrimitive2D::createLocalDecomposition(const geometry::ViewInformation2D& aViewInformation) const
 		{
             Primitive2DSequence aRetval;
--- svx/source/svdraw/svdedxv.cxx.old	2009-04-06 16:42:16.000000000 +0000
+++ svx/source/svdraw/svdedxv.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -315,7 +315,7 @@ void SdrObjEditView::ImpPaintOutlinerVie
 	{
 		const SdrTextObj* pText = PTR_CAST(SdrTextObj,GetTextEditObject());
 		bool bTextFrame(pText && pText->IsTextFrame());
-		bool bFitToSize(0 != (pTextEditOutliner->GetControlWord() & EE_CNTRL_STRETCHING));
+		bool bFitToSize(pText && pText->IsFitToSize());
 		bool bModifyMerk(pTextEditOutliner->IsModified()); // #43095#
 		Rectangle aBlankRect(rOutlView.GetOutputArea());
 		aBlankRect.Union(aMinTextEditArea);
@@ -384,7 +384,7 @@ void SdrObjEditView::ImpInvalidateOutlin
 	{
 		const SdrTextObj* pText = PTR_CAST(SdrTextObj,GetTextEditObject());
 		bool bTextFrame(pText && pText->IsTextFrame());
-		bool bFitToSize(0 != (pTextEditOutliner->GetControlWord() & EE_CNTRL_STRETCHING));
+		bool bFitToSize(pText && pText->IsFitToSize());
 
 		if(bTextFrame && !bFitToSize) 
 		{
@@ -692,8 +692,7 @@ sal_Bool SdrObjEditView::SdrBeginTextEdi
     		if ( !pTextObj->IsContourTextFrame() )
 			{
 				// FitToSize erstmal nicht mit ContourFrame
-        		SdrFitToSizeType eFit = pTextObj->GetFitToSize();
-        		if (eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES)
+        		if (pTextObj->IsFitToSize())
         			aTextRect = aAnchorRect;
 			}
 
@@ -761,8 +760,7 @@ sal_Bool SdrObjEditView::SdrBeginTextEdi
 				// #71519#
 				if(!bExtraInvalidate)
 				{
-        			SdrFitToSizeType eFit = pTextObj->GetFitToSize();
-					if(eFit == SDRTEXTFIT_PROPORTIONAL || eFit == SDRTEXTFIT_ALLLINES)
+					if(pTextObj->IsFitToSize())
 						bExtraInvalidate = sal_True;
 				}
 
--- svx/source/svdraw/svdfppt.cxx
+++ svx/source/svdraw/svdfppt.cxx
@@ -1113,6 +1113,7 @@ SdrObject* SdrEscherImport::ProcessObj(
 				}
 				aTextObj.SetDestinationInstance( (sal_uInt16)nDestinationInstance );
 
+                bool bAutoFit = false; // auto-scale text into shape box
 				switch ( aTextObj.GetInstance() )
 				{
 					case TSS_TYPE_PAGETITLE :
@@ -1120,7 +1121,7 @@ SdrObject* SdrEscherImport::ProcessObj(
 					case TSS_TYPE_SUBTITLE : eTextKind = OBJ_TEXT; break;
 					case TSS_TYPE_BODY :
 					case TSS_TYPE_HALFBODY :
-					case TSS_TYPE_QUARTERBODY : eTextKind = OBJ_OUTLINETEXT; break;
+					case TSS_TYPE_QUARTERBODY : eTextKind = OBJ_OUTLINETEXT; bAutoFit = true; break;
 				}
 				if ( aTextObj.GetDestinationInstance() != TSS_TYPE_TEXT_IN_SHAPE )
 				{
@@ -1175,6 +1176,15 @@ SdrObject* SdrEscherImport::ProcessObj(
 				}
 				pTObj->SetMergedItem( SvxFrameDirectionItem( bVerticalText ? FRMDIR_VERT_TOP_RIGHT : FRMDIR_HORI_LEFT_TOP, EE_PARA_WRITINGDIR ) );
 
+                if (bAutoFit)
+                {
+                    // disable both, defeats purpose of autofit
+                    // otherwise
+                    bAutoGrowHeight = sal_False;
+                    bAutoGrowWidth = sal_False;
+                    pTObj->SetMergedItem( SdrTextFitToSizeTypeItem(SDRTEXTFIT_AUTOFIT) );
+                }
+
 			if ( !pTObj->ISA( SdrObjCustomShape ) )
 			{
 		 		pTObj->SetMergedItem( SdrTextAutoGrowWidthItem( bAutoGrowWidth ) );
--- svx/source/svdraw/svdotext.cxx.old	2009-04-02 11:03:00.000000000 +0000
+++ svx/source/svdraw/svdotext.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -145,6 +145,7 @@ SdrTextObj::SdrTextObj()
 
 	// #i25616#
 	mbSupportTextIndentingOnLineWidthChange = sal_True;
+    mbInDownScale = sal_False;
 }
 
 SdrTextObj::SdrTextObj(const Rectangle& rNewRect)
@@ -170,6 +171,7 @@ SdrTextObj::SdrTextObj(const Rectangle&
 
 	// #111096#
 	mbTextAnimationAllowed = sal_True;
+    mbInDownScale = sal_False;
 
 	// #108784#
 	maTextEditOffset = Point(0, 0);
@@ -200,6 +202,7 @@ SdrTextObj::SdrTextObj(SdrObjKind eNewTe
 
 	// #111096#
 	mbTextAnimationAllowed = sal_True;
+    mbInDownScale = sal_False;
 
 	// #108784#
 	maTextEditOffset = Point(0, 0);
@@ -232,6 +235,7 @@ SdrTextObj::SdrTextObj(SdrObjKind eNewTe
 
 	// #111096#
 	mbTextAnimationAllowed = sal_True;
+    mbInDownScale = sal_False;
 
 	// #108784#
 	maTextEditOffset = Point(0, 0);
@@ -266,6 +270,7 @@ SdrTextObj::SdrTextObj(SdrObjKind eNewTe
 
 	// #111096#
 	mbTextAnimationAllowed = sal_True;
+    mbInDownScale = sal_False;
 
 	// #108784#
 	maTextEditOffset = Point(0, 0);
@@ -842,8 +847,7 @@ void SdrTextObj::TakeTextRect( SdrOutlin
 	SdrTextAniKind      eAniKind=GetTextAniKind();
 	SdrTextAniDirection eAniDirection=GetTextAniDirection();
 
-	SdrFitToSizeType eFit=GetFitToSize();
-	FASTBOOL bFitToSize=(eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
+    FASTBOOL bFitToSize(IsFitToSize());
 	FASTBOOL bContourFrame=IsContourTextFrame();
 
 	FASTBOOL bFrame=IsTextFrame();
@@ -1004,7 +1008,7 @@ OutlinerParaObject* SdrTextObj::GetEditO
 	return pPara;
 }
 
-void SdrTextObj::ImpSetCharStretching(SdrOutliner& rOutliner, const Rectangle& rTextRect, const Rectangle& rAnchorRect, Fraction& rFitXKorreg) const
+void SdrTextObj::ImpSetCharStretching(SdrOutliner& rOutliner, const Size& rTextSize, const Size& rShapeSize, Fraction& rFitXKorreg) const
 {
 	OutputDevice* pOut = rOutliner.GetRefDevice();
 	BOOL bNoStretching(FALSE);
@@ -1049,12 +1053,12 @@ void SdrTextObj::ImpSetCharStretching(Sd
 	unsigned nLoopCount=0;
 	FASTBOOL bNoMoreLoop=FALSE;
 	long nXDiff0=0x7FFFFFFF;
-	long nWantWdt=rAnchorRect.Right()-rAnchorRect.Left();
-	long nIsWdt=rTextRect.Right()-rTextRect.Left();
+	long nWantWdt=rShapeSize.Width();
+	long nIsWdt=rTextSize.Width();
 	if (nIsWdt==0) nIsWdt=1;
 
-	long nWantHgt=rAnchorRect.Bottom()-rAnchorRect.Top();
-	long nIsHgt=rTextRect.Bottom()-rTextRect.Top();
+	long nWantHgt=rShapeSize.Height();
+	long nIsHgt=rTextSize.Height();
 	if (nIsHgt==0) nIsHgt=1;
 
 	long nXTolPl=nWantWdt/100; // Toleranz +1%
# FIXME: 2009-08-14: No CheckHit() method any longer --tml
#
# @@ -1143,8 +1147,7 @@ SdrObject* SdrTextObj::CheckHit(const Po
#  
#  	INT32 nMyTol=nTol;
#  	FASTBOOL bFontwork=IsFontwork();
# -	SdrFitToSizeType eFit=GetFitToSize();
# -	FASTBOOL bFitToSize=(eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
# +    FASTBOOL bFitToSize(IsFitToSize());
#  	Rectangle aR(aRect);
#  	Rectangle aAnchor2(aR);
#  	Rectangle aTextRect(aR);
@@ -1377,8 +1380,7 @@ basegfx::B2DPolyPolygon SdrTextObj::Take
 		Rectangle aR;
 		TakeTextRect(rOutliner,aR,FALSE,&aAnchor2);
 		rOutliner.Clear();
-		SdrFitToSizeType eFit=GetFitToSize();
-		FASTBOOL bFitToSize=(eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
+        FASTBOOL bFitToSize(IsFitToSize());
 		if (bFitToSize) aR=aAnchor2;
 		Polygon aPol(aR);
 		if (aGeo.nDrehWink!=0) RotatePoly(aPol,aR.TopLeft(),aGeo.nSin,aGeo.nCos);
@@ -1495,8 +1497,7 @@ void SdrTextObj::ImpSetupDrawOutlinerFor
     if (!bContourFrame)
     {
         // FitToSize erstmal nicht mit ContourFrame
-        SdrFitToSizeType eFit=GetFitToSize();
-        if (eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES)
+        if (IsFitToSize() || IsAutoFit())
         {
             ULONG nStat=rOutliner.GetControlWord();
             nStat|=EE_CNTRL_STRETCHING|EE_CNTRL_AUTOPAGESIZE;
@@ -1510,13 +1511,73 @@ void SdrTextObj::ImpSetupDrawOutlinerFor
     if (!bContourFrame)
     {
         // FitToSize erstmal nicht mit ContourFrame
-        SdrFitToSizeType eFit=GetFitToSize();
-        if (eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES)
+        if (IsFitToSize())
         {
-            ImpSetCharStretching(rOutliner,rTextRect,rAnchorRect,rFitXKorreg);
+            ImpSetCharStretching(rOutliner,rTextRect.GetSize(),rAnchorRect.GetSize(),rFitXKorreg);
             rPaintRect=rAnchorRect;
         }
+        else if (IsAutoFit())
+        {
+            ImpAutoFitText(rOutliner);
+        }
+    }
+}
+
+void SdrTextObj::ImpAutoFitText( SdrOutliner& rOutliner ) const
+{
+    const Size aShapeSize=GetSnapRect().GetSize();
+    ImpAutoFitText( rOutliner, 
+                    Size(aShapeSize.Width()-GetTextLeftDistance()-GetTextRightDistance(),
+                         aShapeSize.Height()-GetTextUpperDistance()-GetTextLowerDistance()), 
+                    IsVerticalWriting() );
+}
+
+void SdrTextObj::ImpAutoFitText( SdrOutliner& rOutliner, const Size& rTextSize, bool bIsVerticalWriting )
+{
+    // EditEngine formatting is unstable enough for
+    // line-breaking text that we need some more samples
+
+    // loop early-exits if we detect an already attained value
+    USHORT nMinStretchX=0, nMinStretchY=0;
+    USHORT aOldStretchXVals[]={0,0,0,0,0,0,0,0,0,0};
+    const size_t aStretchArySize=sizeof(aOldStretchXVals)/sizeof(*aOldStretchXVals);
+    for(int i=0; i<aStretchArySize; ++i)
+    {
+        const Size aCurrTextSize = rOutliner.CalcTextSize();
+        double fFactor(1.0);
+        if( bIsVerticalWriting )
+            fFactor = double(rTextSize.Width())/aCurrTextSize.Width();
+        else
+            fFactor = double(rTextSize.Height())/aCurrTextSize.Height();
+
+        USHORT nCurrStretchX, nCurrStretchY;
+        rOutliner.GetGlobalCharStretching(nCurrStretchX, nCurrStretchY);
+
+        if (fFactor >= 1.0 )
+        {
+            // resulting text area fits into available shape rect -
+            // err on the larger streching, to optimally fill area
+            nMinStretchX = std::max(nMinStretchX,nCurrStretchX);
+            nMinStretchY = std::max(nMinStretchY,nCurrStretchY);
+        }
+
+        aOldStretchXVals[i] = nCurrStretchX;
+        if( std::find(aOldStretchXVals, aOldStretchXVals+i, nCurrStretchX) != aOldStretchXVals+i )
+            break; // same value already attained once; algo is looping, exit
+
+        if (fFactor < 1.0 || (fFactor >= 1.0 && nCurrStretchX != 100))
+        {
+            nCurrStretchX = sal::static_int_cast<USHORT>(nCurrStretchX*fFactor);
+            nCurrStretchY = sal::static_int_cast<USHORT>(nCurrStretchY*fFactor);
+            rOutliner.SetGlobalCharStretching(std::min(USHORT(100),nCurrStretchX),
+                                              std::min(USHORT(100),nCurrStretchY));
+            OSL_TRACE("SdrTextObj::onEditOutlinerStatusEvent(): zoom is %d", nCurrStretchX);
+        }
     }
+
+    OSL_TRACE("---- SdrTextObj::onEditOutlinerStatusEvent(): final zoom is %d ----", nMinStretchX);
+    rOutliner.SetGlobalCharStretching(std::min(USHORT(100),nMinStretchX),
+                                      std::min(USHORT(100),nMinStretchY));
 }
 
 void SdrTextObj::SetupOutlinerFormatting( SdrOutliner& rOutl, Rectangle& rPaintRect ) const
@@ -2114,6 +2175,17 @@ bool SdrTextObj::IsTextAnimationAllowed(
 	return mbTextAnimationAllowed;
 }
 
+FASTBOOL SdrTextObj::IsAutoFit() const
+{
+    return GetFitToSize()==SDRTEXTFIT_AUTOFIT;
+}
+
+FASTBOOL SdrTextObj::IsFitToSize() const
+{
+    const SdrFitToSizeType eFit=GetFitToSize();
+    return (eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
+}
+
 void SdrTextObj::SetTextAnimationAllowed(sal_Bool bNew)
 {
 	if(mbTextAnimationAllowed != bNew)
@@ -2131,13 +2203,21 @@ void SdrTextObj::onEditOutlinerStatusEve
 	const bool bGrowY=(nStat & EE_STAT_TEXTHEIGHTCHANGED) !=0;
     if(bTextFrame && (bGrowX || bGrowY))
 	{
-		const bool bAutoGrowHgt= bTextFrame && IsAutoGrowHeight();
-		const bool bAutoGrowWdt= bTextFrame && IsAutoGrowWidth();
-
-	    if ((bGrowX && bAutoGrowWdt) || (bGrowY && bAutoGrowHgt))
+	    if ((bGrowX && IsAutoGrowWidth()) || (bGrowY && IsAutoGrowHeight()))
 		{
 			AdjustTextFrameWidthAndHeight();
 		}
+        else if (IsAutoFit() && !mbInDownScale)
+        {
+            OSL_ASSERT(pEdtOutl);
+            mbInDownScale = sal_True;
+
+            // sucks that we cannot disable paints via
+            // pEdtOutl->SetUpdateMode(FALSE) - but EditEngine skips
+            // formatting as well, then.
+            ImpAutoFitText(*pEdtOutl);
+            mbInDownScale = sal_False;
+        }
 	}
 }
 
--- svx/source/svdraw/svdotextdecomposition.cxx.old	2009-04-02 11:03:00.000000000 +0000
+++ svx/source/svdraw/svdotextdecomposition.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -927,11 +927,11 @@ bool SdrTextObj::impDecomposeStretchText
 	basegfx::B2DHomMatrix aNewTransformA;
 	basegfx::B2DHomMatrix aNewTransformB;
 
-	// calculate global char stretching scale parameters. Use non-mirrored sizes
-	// to layout without mirroring
-	const double fScaleX(fabs(aScale.getX()) / aOutlinerScale.getX());
-	const double fScaleY(fabs(aScale.getY()) / aOutlinerScale.getY());
-	rOutliner.SetGlobalCharStretching((sal_Int16)FRound(fScaleX * 100.0), (sal_Int16)FRound(fScaleY * 100.0));
+    // calculate global char stretching scale parameters. Use non-mirrored sizes
+    // to layout without mirroring. Scale anisotrophically
+    const double fScaleX(fabs(aScale.getX()) / aOutlinerScale.getX());
+    const double fScaleY(fabs(aScale.getY()) / aOutlinerScale.getY());
+    rOutliner.SetGlobalCharStretching((sal_Int16)FRound(fScaleX * 100.0), (sal_Int16)FRound(fScaleY * 100.0));
 
 	// mirroring. We are now in aAnchorTextRange sizes. When mirroring in X and Y,
 	// move the null point which was top left to bottom right.
@@ -956,5 +956,134 @@ bool SdrTextObj::impDecomposeStretchText
 
 	rTarget = aConverter.getPrimitive2DSequence();
+}
+
+void SdrTextObj::impDecomposeAutoFitTextPrimitive(
+	drawinglayer::primitive2d::Primitive2DSequence& rTarget, 
+	const drawinglayer::primitive2d::SdrAutoFitTextPrimitive2D& rSdrAutofitTextPrimitive,
+	const drawinglayer::geometry::ViewInformation2D& aViewInformation) const
+{
+    // decompose matrix to have position and size of text
+	basegfx::B2DVector aScale, aTranslate;
+	double fRotate, fShearX;
+	rSdrAutofitTextPrimitive.getTextRangeTransform().decompose(aScale, aTranslate, fRotate, fShearX);
+
+	// use B2DRange aAnchorTextRange for calculations
+	basegfx::B2DRange aAnchorTextRange(aTranslate);
+	aAnchorTextRange.expand(aTranslate + aScale);
+
+	// prepare outliner
+	const SfxItemSet& rTextItemSet = rSdrAutofitTextPrimitive.getSdrText()->GetItemSet();
+	SdrOutliner& rOutliner = ImpGetDrawOutliner();
+	SdrTextVertAdjust eVAdj = GetTextVerticalAdjust(rTextItemSet);
+	SdrTextHorzAdjust eHAdj = GetTextHorizontalAdjust(rTextItemSet);
+	const sal_uInt32 nOriginalControlWord(rOutliner.GetControlWord());
+	const Size aNullSize;
+
+	// set visualizing page at Outliner; needed e.g. for PageNumberField decomposition
+	rOutliner.setVisualizedPage(GetSdrPageFromXDrawPage(aViewInformation.getVisualizedPage()));
+
+	rOutliner.SetControlWord(nOriginalControlWord|EE_CNTRL_AUTOPAGESIZE|EE_CNTRL_STRETCHING);
+	rOutliner.SetMinAutoPaperSize(aNullSize);
+	rOutliner.SetMaxAutoPaperSize(Size(1000000,1000000));
+
+	// add one to rage sizes to get back to the old Rectangle and outliner measurements
+	const sal_uInt32 nAnchorTextWidth(FRound(aAnchorTextRange.getWidth() + 1L));
+	const sal_uInt32 nAnchorTextHeight(FRound(aAnchorTextRange.getHeight() + 1L));
+	const OutlinerParaObject* pOutlinerParaObject = rSdrAutofitTextPrimitive.getSdrText()->GetOutlinerParaObject();
+	OSL_ENSURE(pOutlinerParaObject, "impDecomposeBlockTextPrimitive used with no OutlinerParaObject (!)");
+	const bool bVerticalWritintg(pOutlinerParaObject->IsVertical());
+	const Size aAnchorTextSize(Size(nAnchorTextWidth, nAnchorTextHeight));
+
+    if((rSdrAutofitTextPrimitive.getWordWrap() || IsTextFrame()))
+    {
+        rOutliner.SetMaxAutoPaperSize(aAnchorTextSize);
+    }
+
+    if(SDRTEXTHORZADJUST_BLOCK == eHAdj && !bVerticalWritintg)
+    {
+        rOutliner.SetMinAutoPaperSize(Size(nAnchorTextWidth, 0));
+    }
+
+    if(SDRTEXTVERTADJUST_BLOCK == eVAdj && bVerticalWritintg)
+    {
+        rOutliner.SetMinAutoPaperSize(Size(0, nAnchorTextHeight));
+    }
+
+    rOutliner.SetPaperSize(aNullSize);
+    rOutliner.SetUpdateMode(true);
+    rOutliner.SetText(*pOutlinerParaObject);
+    ImpAutoFitText(rOutliner,aAnchorTextSize,bVerticalWritintg);
+
+	// now get back the layouted text size from outliner
+	const Size aOutlinerTextSiz(rOutliner.GetPaperSize());
+	const basegfx::B2DVector aOutlinerScale(aOutlinerTextSiz.Width(), aOutlinerTextSiz.Height());
+	basegfx::B2DVector aAdjustTranslate(0.0, 0.0);
+
+	// correct horizontal translation using the now known text size
+	if(SDRTEXTHORZADJUST_CENTER == eHAdj || SDRTEXTHORZADJUST_RIGHT == eHAdj)
+	{
+		const double fFree(aAnchorTextRange.getWidth() - aOutlinerScale.getX());
+
+		if(SDRTEXTHORZADJUST_CENTER == eHAdj)
+		{
+			aAdjustTranslate.setX(fFree / 2.0);
+		}
+
+		if(SDRTEXTHORZADJUST_RIGHT == eHAdj)
+		{
+			aAdjustTranslate.setX(fFree);
+		}
+	}
+
+	// correct vertical translation using the now known text size
+	if(SDRTEXTVERTADJUST_CENTER == eVAdj || SDRTEXTVERTADJUST_BOTTOM == eVAdj)
+	{
+		const double fFree(aAnchorTextRange.getHeight() - aOutlinerScale.getY());
+
+		if(SDRTEXTVERTADJUST_CENTER == eVAdj)
+		{
+			aAdjustTranslate.setY(fFree / 2.0);
+		}
+		
+		if(SDRTEXTVERTADJUST_BOTTOM == eVAdj)
+		{
+			aAdjustTranslate.setY(fFree);
+		}
+	}
+
+	// prepare matrices to apply to newly created primitives. aNewTransformA
+	// will get coordinates in aOutlinerScale size and positive in X, Y.
+	basegfx::B2DHomMatrix aNewTransformA;
+	basegfx::B2DHomMatrix aNewTransformB;
+
+	// translate relative to given primitive to get same rotation and shear
+	// as the master shape we are working on. For vertical, use the top-right
+	// corner
+	const double fStartInX(bVerticalWritintg ? aAdjustTranslate.getX() + aOutlinerScale.getX() : aAdjustTranslate.getX());
+	aNewTransformA.translate(fStartInX, aAdjustTranslate.getY());
+
+	// mirroring. We are now in aAnchorTextRange sizes. When mirroring in X and Y,
+	// move the null point which was top left to bottom right.
+	const bool bMirrorX(basegfx::fTools::less(aScale.getX(), 0.0));
+	const bool bMirrorY(basegfx::fTools::less(aScale.getY(), 0.0));
+	aNewTransformB.scale(bMirrorX ? -1.0 : 1.0, bMirrorY ? -1.0 : 1.0);
+
+	// in-between the translations of the single primitives will take place. Afterwards,
+	// the object's transformations need to be applied
+	aNewTransformB.shearX(fShearX);
+	aNewTransformB.rotate(fRotate);
+	aNewTransformB.translate(aTranslate.getX(), aTranslate.getY());
+
+	// now break up text primitives.
+	impTextBreakupHandler aConverter(rOutliner);
+	aConverter.decomposeBlockTextPrimitive(aNewTransformA, aNewTransformB);
+
+	// cleanup outliner
+	rOutliner.Clear();
+	rOutliner.setVisualizedPage(0);
+    rOutliner.SetControlWord(nOriginalControlWord);
+
+	rTarget = aConverter.getPrimitive2DSequence();
 }
 
 //////////////////////////////////////////////////////////////////////////////

--- svx/source/svdraw/svdotxat.cxx.old	2009-04-02 11:03:00.000000000 +0000
+++ svx/source/svdraw/svdotxat.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -82,8 +82,7 @@ FASTBOOL SdrTextObj::AdjustTextFrameWidt
 {
 	if (bTextFrame && pModel!=NULL && !rR.IsEmpty())
 	{
-		SdrFitToSizeType eFit=GetFitToSize();
-		FASTBOOL bFitToSize=(eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
+        FASTBOOL bFitToSize(IsFitToSize());
 		FASTBOOL bWdtGrow=bWdt && IsAutoGrowWidth();
 		FASTBOOL bHgtGrow=bHgt && IsAutoGrowHeight();
 		SdrTextAniKind eAniKind=GetTextAniKind();
--- svx/source/svdraw/svdotxed.cxx.old	2009-04-02 11:03:00.000000000 +0000
+++ svx/source/svdraw/svdotxed.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -76,15 +76,17 @@ sal_Bool SdrTextObj::BegTextEdit(SdrOutl
 	rOutl.Init( nOutlinerMode );
 	rOutl.SetRefDevice( pModel->GetRefDevice() );
 
-	SdrFitToSizeType eFit=GetFitToSize();
-	FASTBOOL bFitToSize=(eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
+    FASTBOOL bFitToSize(IsFitToSize());
 	FASTBOOL bContourFrame=IsContourTextFrame();
 	ImpSetTextEditParams();
 
 	if (!bContourFrame) {
 		ULONG nStat=rOutl.GetControlWord();
 		nStat|=EE_CNTRL_AUTOPAGESIZE;
-		if (bFitToSize) nStat|=EE_CNTRL_STRETCHING; else nStat&=~EE_CNTRL_STRETCHING;
+		if (bFitToSize || IsAutoFit()) 
+            nStat|=EE_CNTRL_STRETCHING; 
+        else 
+            nStat&=~EE_CNTRL_STRETCHING;
 		rOutl.SetControlWord(nStat);
 	}
 
@@ -122,8 +124,12 @@ sal_Bool SdrTextObj::BegTextEdit(SdrOutl
 		TakeTextRect(rOutl, aTextRect, FALSE, 
 			&aAnchorRect/* #97097# give TRUE here, not FALSE */);
 		Fraction aFitXKorreg(1,1);
-		ImpSetCharStretching(rOutl,aTextRect,aAnchorRect,aFitXKorreg);
+		ImpSetCharStretching(rOutl,aTextRect.GetSize(),aAnchorRect.GetSize(),aFitXKorreg);
 	}
+    else if (IsAutoFit())
+    {
+        ImpAutoFitText(rOutl);
+    }
 
 	if(pOutlinerParaObject)
 	{
@@ -149,8 +155,7 @@ sal_Bool SdrTextObj::BegTextEdit(SdrOutl
 
 void SdrTextObj::TakeTextEditArea(Size* pPaperMin, Size* pPaperMax, Rectangle* pViewInit, Rectangle* pViewMin) const
 {
-	SdrFitToSizeType eFit=GetFitToSize();
-	FASTBOOL bFitToSize=(eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
+    FASTBOOL bFitToSize(IsFitToSize());
 	Size aPaperMin,aPaperMax;
 	Rectangle aViewInit;
 	TakeTextAnchorRect(aViewInit);
--- svx/source/svdraw/svdotxtr.cxx.old	2009-04-02 11:03:00.000000000 +0000
+++ svx/source/svdraw/svdotxtr.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -83,9 +83,6 @@ void SdrTextObj::NbcSetSnapRect(const Re
 		if (bTextFrame && (pModel==NULL || !pModel->IsPasteResize())) { // #51139#
 			if (nTWdt0!=nTWdt1 && IsAutoGrowWidth() ) NbcSetMinTextFrameWidth(nTWdt1);
 			if (nTHgt0!=nTHgt1 && IsAutoGrowHeight()) NbcSetMinTextFrameHeight(nTHgt1);
-			if (GetFitToSize()==SDRTEXTFIT_RESIZEATTR) {
-				NbcResizeTextAttributes(Fraction(nTWdt1,nTWdt0),Fraction(nTHgt1,nTHgt0));
-			}
 			NbcAdjustTextFrameWidthAndHeight();
 		}
 		ImpCheckShear();
@@ -111,9 +108,6 @@ void SdrTextObj::NbcSetLogicRect(const R
 	if (bTextFrame) {
 		if (nTWdt0!=nTWdt1 && IsAutoGrowWidth() ) NbcSetMinTextFrameWidth(nTWdt1);
 		if (nTHgt0!=nTHgt1 && IsAutoGrowHeight()) NbcSetMinTextFrameHeight(nTHgt1);
-		if (GetFitToSize()==SDRTEXTFIT_RESIZEATTR) {
-			NbcResizeTextAttributes(Fraction(nTWdt1,nTWdt0),Fraction(nTHgt1,nTHgt0));
-		}
 		NbcAdjustTextFrameWidthAndHeight();
 	}
 	SetRectsDirty();
@@ -227,9 +221,6 @@ void SdrTextObj::NbcResize(const Point&
 	if (bTextFrame && (pModel==NULL || !pModel->IsPasteResize())) { // #51139#
 		if (nTWdt0!=nTWdt1 && IsAutoGrowWidth() ) NbcSetMinTextFrameWidth(nTWdt1);
 		if (nTHgt0!=nTHgt1 && IsAutoGrowHeight()) NbcSetMinTextFrameHeight(nTHgt1);
-		if (GetFitToSize()==SDRTEXTFIT_RESIZEATTR) {
-			NbcResizeTextAttributes(Fraction(nTWdt1,nTWdt0),Fraction(nTHgt1,nTHgt0));
-		}
 		NbcAdjustTextFrameWidthAndHeight();
 	}
 	ImpCheckShear();
# FIXME: 2009-08-14: No such file any longer, in fact no
# ImpTextPortionHandler class any longer. --tml
#
# --- svx/source/svdraw/svdtxhdl.cxx.old	2009-04-02 11:03:00.000000000 +0000
# +++ svx/source/svdraw/svdtxhdl.cxx	2009-04-06 16:42:18.000000000 +0000
# @@ -85,8 +85,7 @@ void ImpTextPortionHandler::ConvertToPat
#  
#  	Rectangle aAnchorRect;
#  	Rectangle aTextRect;
# -	SdrFitToSizeType eFit=rTextObj.GetFitToSize();
# -	FASTBOOL bFitToSize=(eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
# +    FASTBOOL bFitToSize(rTextObj.IsFitToSize());
#  	// Bei TakeTextRect wird u.a. auch der Text in
#  	// den Outliner gesteckt
#  	rTextObj.TakeTextRect(rOutliner,aTextRect,FALSE,&aAnchorRect);
--- svx/source/svdraw/svdview.cxx.old	2009-04-02 11:03:00.000000000 +0000
+++ svx/source/svdraw/svdview.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -504,8 +504,7 @@ SdrHitKind SdrView::PickAnything(const P
 				Point aTemporaryTextRelativePosition(aLocalLogicPosition - aTextRect.TopLeft());
 				
 				// FitToSize berueksichtigen
-				SdrFitToSizeType eFit=pTextObj->GetFitToSize();
-				BOOL bFitToSize=(eFit==SDRTEXTFIT_PROPORTIONAL || eFit==SDRTEXTFIT_ALLLINES);
+                BOOL bFitToSize(pTextObj->IsFitToSize());
 				if (bFitToSize) {
 					Fraction aX(aTextRect.GetWidth()-1,aAnchor.GetWidth()-1);
 					Fraction aY(aTextRect.GetHeight()-1,aAnchor.GetHeight()-1);
--- xmloff/source/draw/sdpropls.cxx.old	2009-04-02 10:36:08.000000000 +0000
+++ xmloff/source/draw/sdpropls.cxx	2009-04-06 16:42:18.000000000 +0000
@@ -627,8 +627,8 @@ SvXMLEnumMapEntry __READONLY_DATA pXML_F
 {
 	{ XML_FALSE,		drawing::TextFitToSizeType_NONE },
 	{ XML_TRUE, 		drawing::TextFitToSizeType_PROPORTIONAL },
-	{ XML_TRUE,	    	drawing::TextFitToSizeType_ALLLINES },
-	{ XML_TRUE,		    drawing::TextFitToSizeType_RESIZEATTR },
+	{ XML_ALL,	    	drawing::TextFitToSizeType_ALLLINES },
+	{ XML_SHRINK_TO_FIT,drawing::TextFitToSizeType_AUTOFIT },
 	{ XML_TOKEN_INVALID, 0 }
 };
 
