--- sal/osl/w32/dllentry.c.~1.34.~	2008-04-10 13:17:16.000000000 +0200
+++ sal/osl/w32/dllentry.c	2008-10-21 20:56:07.000000000 +0200
@@ -216,7 +216,9 @@
         
                 //We disable floating point exceptions. This is the usual state at program startup
                 //but on Windows 98 and ME this is not always the case.
+#ifndef __MINGW32__
                 _control87(_MCW_EM, _MCW_EM);
+#endif
 #ifdef __MINGW32__
 		atexit(do_cleanup);
 }
--- sal/systools/win32/uwinapi/ResolveUnicows.cpp.pristine	2008-10-01 10:05:18.000000000 +0200
+++ sal/systools/win32/uwinapi/ResolveUnicows.cpp	2009-04-04 14:43:41.198056996 +0200
@@ -227,8 +226,8 @@ DEFINE_UNICOWS_THUNK( kernel32, DWORD, W
 DEFINE_UNICOWS_THUNK( kernel32, BOOL, WINAPI, GetFileAttributesExW, (LPCWSTR,GET_FILEEX_INFO_LEVELS,PVOID) )
 DEFINE_UNICOWS_THUNK( kernel32, DWORD, WINAPI, GetFileAttributesW, (LPCWSTR) )
 DEFINE_UNICOWS_THUNK( comdlg32, short, WINAPI, GetFileTitleW, (LPCWSTR,LPWSTR,WORD) )
-DEFINE_UNICOWS_THUNK( version, DWORD, WINAPI, GetFileVersionInfoSizeW, (LPWSTR,PDWORD) )
-DEFINE_UNICOWS_THUNK( version, BOOL, WINAPI, GetFileVersionInfoW, (LPWSTR,DWORD,DWORD,PVOID) )
+DEFINE_UNICOWS_THUNK( version, DWORD, WINAPI, GetFileVersionInfoSizeW, (const WCHAR*,DWORD*) )
+DEFINE_UNICOWS_THUNK( version, BOOL, WINAPI, GetFileVersionInfoW, (const WCHAR*,DWORD,DWORD,PVOID) )
 DEFINE_UNICOWS_THUNK( kernel32, DWORD, WINAPI, GetFullPathNameW, (LPCWSTR,DWORD,LPWSTR,LPWSTR*) )
 DEFINE_UNICOWS_THUNK( gdi32, DWORD, WINAPI, GetGlyphOutlineW, (HDC,UINT,UINT,LPGLYPHMETRICS,DWORD,PVOID,const MAT2*) )
 DEFINE_UNICOWS_THUNK( gdi32, BOOL, WINAPI, GetICMProfileW, (HDC,LPDWORD,LPWSTR) )
@@ -273,7 +272,7 @@ DEFINE_UNICOWS_THUNK( kernel32, BOOL, WI
 DEFINE_UNICOWS_THUNK( kernel32, BOOL, WINAPI, GetStringTypeW, (DWORD,LPCWSTR,int,LPWORD) )
 DEFINE_UNICOWS_THUNK( kernel32, UINT, WINAPI, GetSystemDirectoryW, (LPWSTR,UINT) )
 DEFINE_UNICOWS_THUNK( kernel32, UINT, WINAPI, GetSystemWindowsDirectoryW, (LPWSTR,UINT) )
-DEFINE_UNICOWS_THUNK( user32, DWORD, WINAPI, GetTabbedTextExtentW, (HDC,LPCWSTR,int,int,CONST INT*) )
+DEFINE_UNICOWS_THUNK( user32, DWORD, WINAPI, GetTabbedTextExtentW, (HDC,LPCWSTR,int,int,int*) )
 DEFINE_UNICOWS_THUNK( kernel32, UINT, WINAPI, GetTempFileNameW, (LPCWSTR,LPCWSTR,UINT,LPWSTR) )
 DEFINE_UNICOWS_THUNK( kernel32, DWORD, WINAPI, GetTempPathW, (DWORD,LPWSTR) )
 DEFINE_UNICOWS_THUNK( gdi32, BOOL, WINAPI, GetTextExtentExPointW, ( HDC,LPCWSTR,int,int,LPINT,LPINT,LPSIZE ) )
@@ -452,11 +451,11 @@ DEFINE_UNICOWS_THUNK( shell32, BOOL, WIN
 DEFINE_UNICOWS_THUNK( winspool, DWORD, WINAPI, StartDocPrinterW, (HANDLE,DWORD,PBYTE) )
 DEFINE_UNICOWS_THUNK( gdi32, int, WINAPI, StartDocW, (HDC,const DOCINFOW*) )
 DEFINE_UNICOWS_THUNK( user32, BOOL, WINAPI, SystemParametersInfoW, (UINT,UINT,PVOID,UINT) )
-DEFINE_UNICOWS_THUNK( user32, LONG, WINAPI, TabbedTextOutW, (HDC,int,int,LPCWSTR,int,int,CONST INT*,int) )
+DEFINE_UNICOWS_THUNK( user32, LONG, WINAPI, TabbedTextOutW, (HDC,int,int,LPCWSTR,int,int,int*,int) )
 DEFINE_UNICOWS_THUNK( gdi32, BOOL, WINAPI, TextOutW, (HDC,int,int,LPCWSTR,int) )
 DEFINE_UNICOWS_THUNK( user32, int, WINAPI, TranslateAcceleratorW, (HWND,HACCEL,LPMSG) )
 DEFINE_UNICOWS_THUNK( user32, BOOL, WINAPI, UnregisterClassW, (LPCWSTR,HINSTANCE) )
-DEFINE_UNICOWS_THUNK( gdi32, BOOL, WINAPI, UpdateICMRegKeyW, (DWORD,LPWSTR,LPWSTR,UINT) )
+DEFINE_UNICOWS_THUNK( gdi32, BOOL, WINAPI, UpdateICMRegKeyW, (DWORD,DWORD,LPWSTR,UINT) )
 DEFINE_UNICOWS_THUNK( kernel32, BOOL, WINAPI, UpdateResourceW, (HANDLE,LPCWSTR,LPCWSTR,WORD,PVOID,DWORD) )
 DEFINE_UNICOWS_THUNK( version, DWORD, WINAPI, VerFindFileW, (DWORD,LPWSTR,LPWSTR,LPWSTR,LPWSTR,PUINT,LPWSTR,PUINT) )
 DEFINE_UNICOWS_THUNK( version, DWORD, WINAPI, VerInstallFileW, (DWORD,LPWSTR,LPWSTR,LPWSTR,LPWSTR,LPWSTR,LPWSTR,PUINT) )
--- sal/systools/win32/onlineupdate/onlinecheck.cxx.orig	10 apr 2008 14:11:15 +0200	1.8
+++ sal/systools/win32/onlineupdate/onlinecheck.cxx	22 okt 2008 10:56:53 +0200	
@@ -46,6 +46,134 @@
 #include <tchar.h>
 #ifdef __MINGW32__
 #include <excpt.h>
+#include <setjmp.h>
+
+// not implemented in mingw, only in wine...
+//BOOL WINAPI InternetGetConnectedStateEx(LPDWORD,LPTSTR,DWORD,DWORD);
+#define InternetGetConnectedStateEx(a,b,c,d) InternetGetConnectedState(a,c)
+
+#undef OPTIONAL
+#define OPTIONAL
+
+WINBASEAPI
+VOID
+WINAPI
+RtlUnwind (
+    IN PVOID TargetFrame OPTIONAL,
+    IN PVOID TargetIp OPTIONAL,
+    IN PEXCEPTION_RECORD ExceptionRecord OPTIONAL,
+    IN PVOID ReturnValue
+    );
+
+// What library is this supposed to be defined in?
+#define RtlUnwind(a,b,c,d)
+
+class __SEHandler
+{
+ public:
+  __SEHandler() {}
+  ~__SEHandler() {}
+  typedef int (*PF)(void *, LPEXCEPTION_POINTERS);
+  typedef void (*PH)(void *, LPEXCEPTION_POINTERS);
+  typedef void (*PN)(void *);
+  void Set(jmp_buf jb, void *pdata=NULL, PF pfilter=NULL, PH phandlerbody=NULL, PN pfinal=NULL)
+    {
+      __builtin_memcpy(m_jmpbuf, jb, sizeof(jmp_buf));
+      m_pData=pdata;
+      switch (reinterpret_cast<int>(pfilter))
+    {
+    default:
+      m_filter=pfilter;
+      break;
+    case EXCEPTION_CONTINUE_EXECUTION:
+      m_filter=DefaultFilterContinueExecution;
+      break;
+    case EXCEPTION_EXECUTE_HANDLER:
+      m_filter=DefaultFilterExecuteHandler;
+      break;
+    case EXCEPTION_CONTINUE_SEARCH:
+      m_filter=DefaultFilterContinueSearch;
+      break;
+    }
+      if (phandlerbody)
+    m_handlerbody=phandlerbody;
+      else
+    m_handlerbody=DefaultHandler;
+      if (pfinal)
+    m_final=pfinal;
+      else
+    m_final=DefaultFinal;
+      m_ER.pHandlerClass = this;
+      m_ER.hp = handler;
+      asm("movl %%fs:0, %%eax\n\t"
+      "movl %%eax, %0": : "m" (m_ER.prev): "%eax" );
+      asm("movl %0, %%eax\n\t"
+      "movl %%eax, %%fs:0": : "r" (&m_ER): "%eax" );
+    }
+  void Reset()
+    {
+      m_final(m_pData);
+      asm("movl %0, %%eax \n\t"
+      "movl %%eax, %%fs:0"
+      : : "m" (m_ER.prev): "%eax");
+    }
+ private:
+  __SEHandler(const __SEHandler&);
+  __SEHandler& operator=(const __SEHandler&);
+  struct _ER {
+    _ER* prev;
+    PEXCEPTION_HANDLER hp;
+    __SEHandler *pHandlerClass;
+  };
+  static EXCEPTION_DISPOSITION handler(
+             struct _EXCEPTION_RECORD *pExceptionRecord,
+             void * EstablisherFrame,
+             struct _CONTEXT *ContextRecord,
+             void * /*DispatcherContext*/)
+    {
+      __SEHandler* pThis = reinterpret_cast< _ER * >(EstablisherFrame)->pHandlerClass;
+      if ( pExceptionRecord->ExceptionFlags & EH_UNWINDING )
+    {
+      pThis->m_final(pThis->m_pData);
+      return ExceptionContinueSearch;
+    }
+      EXCEPTION_POINTERS ep={pExceptionRecord, ContextRecord};
+      switch ( pThis->m_filter(pThis->m_pData, &ep) )
+    {
+    case EXCEPTION_EXECUTE_HANDLER:
+      RtlUnwind(EstablisherFrame, &&__set_label, pExceptionRecord, 0);
+__set_label:
+      pThis->m_handlerbody(pThis->m_pData, &ep);
+      ContextRecord->Ebp = pThis->m_jmpbuf[0];
+      ContextRecord->Eip = pThis->m_jmpbuf[1];
+      ContextRecord->Esp = pThis->m_jmpbuf[2];
+      return ExceptionContinueExecution;
+    case EXCEPTION_CONTINUE_SEARCH:
+      return ExceptionContinueSearch;
+    case EXCEPTION_CONTINUE_EXECUTION:
+      return ExceptionContinueExecution;
+    }
+      return ExceptionContinueExecution;
+    }
+  static int DefaultFilterContinueSearch(void *, LPEXCEPTION_POINTERS) { return EXCEPTION_CONTINUE_SEARCH; }
+  static int DefaultFilterContinueExecution(void *, LPEXCEPTION_POINTERS) { return EXCEPTION_CONTINUE_EXECUTION; }
+  static int DefaultFilterExecuteHandler(void *, LPEXCEPTION_POINTERS) { return EXCEPTION_EXECUTE_HANDLER; }
+  static void DefaultHandler(void *, LPEXCEPTION_POINTERS) {}
+  static void DefaultFinal(void *) {}
+  typedef int (*handler_p)(
+               struct _EXCEPTION_RECORD *ExceptionRecord,
+               void * EstablisherFrame,
+               struct _CONTEXT *ContextRecord,
+               void * DispatcherContext);
+  _ER m_ER;
+  void *m_pData;
+  PN m_final;
+  PH m_handlerbody;
+  PF m_filter;
+  jmp_buf m_jmpbuf;
+};
+
+#undef OPTIONAL
 #endif
 
 #define elementsof(a) (sizeof(a)/sizeof((a)[0]))
--- sal/systools/win32/uwinapi/FindFirstVolumeA.cpp	2009-04-06 20:23:37.935495274 +0200
+++ sal/systools/win32/uwinapi/FindFirstVolumeA.cpp	2009-04-06 20:21:51.303494448 +0200
@@ -30,4 +30,4 @@
 
 #include "macros.h"
 
-DEFINE_DEFAULT_THUNK( kernel32, TRYLOAD, HANDLE, WINAPI, FindFirstVolumeA, (LPSTR lpszVolumeName, DWORD cchBufferLength) )
\ Geen regeleindeteken (LF) aan einde van bestand
+DEFINE_DEFAULT_THUNK( kernel32, TRYLOAD, HANDLE, WINAPI, FindFirstVolumeA, (LPCSTR lpszVolumeName, DWORD cchBufferLength) )
\ Geen regeleindeteken (LF) aan einde van bestand
diff -purN sal/systools/win32/uwinapi/FindFirstVolumeW.cpp sal/systools/win32/uwinapi/FindFirstVolumeW.cpp
--- sal/systools/win32/uwinapi/FindFirstVolumeW.cpp	2009-04-06 20:23:37.935495274 +0200
+++ sal/systools/win32/uwinapi/FindFirstVolumeW.cpp	2009-04-06 20:21:51.303494448 +0200
@@ -30,4 +30,4 @@
 
 #include "macros.h"
 
-DEFINE_DEFAULT_THUNK( kernel32, TRYLOAD, HANDLE, WINAPI, FindFirstVolumeW, (LPWSTR lpszVolumeName, DWORD cchBufferLength) )
\ Geen regeleindeteken (LF) aan einde van bestand
+DEFINE_DEFAULT_THUNK( kernel32, TRYLOAD, HANDLE, WINAPI, FindFirstVolumeW, (LPCWSTR lpszVolumeName, DWORD cchBufferLength) )
\ Geen regeleindeteken (LF) aan einde van bestand
diff -purN sal/systools/win32/uwinapi/FindNextVolumeA.cpp sal/systools/win32/uwinapi/FindNextVolumeA.cpp
--- sal/systools/win32/uwinapi/FindNextVolumeA.cpp	2009-04-06 20:23:37.935495274 +0200
+++ sal/systools/win32/uwinapi/FindNextVolumeA.cpp	2009-04-06 20:21:51.303494448 +0200
@@ -30,4 +30,4 @@
 
 #include "macros.h"
 
-DEFINE_DEFAULT_THUNK( kernel32, TRYLOAD, BOOL, WINAPI, FindNextVolumeA, (HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength) )
\ Geen regeleindeteken (LF) aan einde van bestand
+DEFINE_DEFAULT_THUNK( kernel32, TRYLOAD, BOOL, WINAPI, FindNextVolumeA, (HANDLE hFindVolume, LPCSTR lpszVolumeName, DWORD cchBufferLength) )
\ Geen regeleindeteken (LF) aan einde van bestand
--- sal/osl/w32/system.h.orig	2009-08-10 18:58:46.000000000 +0200
+++ sal/osl/w32/system.h	2009-08-10 19:04:33.000000000 +0200
@@ -71,8 +71,8 @@
     #include <ws2tcpip.h>
 #endif
     #include <shlobj.h>
-    #ifndef NO_DEBUG_CRT
-        #include <crtdbg.h>
+    #if !defined(NO_DEBUG_CRT) && !defined(__MINGW32__)
+    #include <crtdbg.h>
     #endif
 #else
     // winsock2.h includes windows.h
