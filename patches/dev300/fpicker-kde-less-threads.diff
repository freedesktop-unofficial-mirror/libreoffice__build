---
 fpicker/source/unx/kde_unx/UnxCommandThread.hxx |   44 +++++++++++++++++++++-
 fpicker/source/unx/kde_unx/UnxFilePicker.cxx    |    8 +++-
 2 files changed, 48 insertions(+), 4 deletions(-)

diff --git fpicker/source/unx/kde_unx/UnxCommandThread.hxx fpicker/source/unx/kde_unx/UnxCommandThread.hxx
index 17ec9fe..194d38f 100644
--- fpicker/source/unx/kde_unx/UnxCommandThread.hxx
+++ fpicker/source/unx/kde_unx/UnxCommandThread.hxx
@@ -86,10 +86,50 @@
 #include <rtl/ustring.hxx>
 #endif
 
+#include <vcl/svapp.hxx>
+
 #include <list>
 
 class UnxFilePickerNotifyThread;
 
+/** Synchronization for the 'thread-less' version of the fpicker.
+
+    Something like osl::Condition, but calls Application::Yield() while in
+    wait().
+*/
+class YieldingCondition
+{
+    ::osl::Mutex m_aMutex;
+    bool m_bValue;
+
+    bool get()
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        return m_bValue;
+    }
+
+public:
+    YieldingCondition() { reset(); }
+
+    void reset()
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        m_bValue = false;
+    }
+
+    void set()
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        m_bValue = true;
+    }
+
+    void wait()
+    {
+        while ( !get() )
+            Application::Yield();
+    }
+};
+
 class UnxFilePickerCommandThread : public ::osl::Thread
 {
 protected:
@@ -98,7 +138,7 @@ protected:
 
     ::osl::Mutex                m_aMutex;
 
-    ::osl::Condition            m_aExecCondition;
+    YieldingCondition           m_aExecCondition;
     sal_Bool                    m_aResult;
 
     ::osl::Condition            m_aGetCurrentFilterCondition;
@@ -117,7 +157,7 @@ public:
     UnxFilePickerCommandThread( UnxFilePickerNotifyThread *pNotifyThread, int nReadFD );
     ~UnxFilePickerCommandThread();
 
-    ::osl::Condition& SAL_CALL  execCondition() { return m_aExecCondition; }
+    YieldingCondition& SAL_CALL execCondition() { return m_aExecCondition; }
     sal_Bool SAL_CALL           result();
 
     ::osl::Condition& SAL_CALL  getCurrentFilterCondition() { return m_aGetCurrentFilterCondition; }
diff --git fpicker/source/unx/kde_unx/UnxFilePicker.cxx fpicker/source/unx/kde_unx/UnxFilePicker.cxx
index 46f049f..591c762 100644
--- fpicker/source/unx/kde_unx/UnxFilePicker.cxx
+++ fpicker/source/unx/kde_unx/UnxFilePicker.cxx
@@ -259,8 +259,12 @@ sal_Int16 SAL_CALL UnxFilePicker::execute()
 {
     checkFilePicker();
 
-    sendCommand( ::rtl::OUString::createFromAscii( "exec" ),
-                 m_pCommandThread->execCondition() );
+    // this is _not_ an osl::Condition, see i#93366
+    m_pCommandThread->execCondition().reset();
+
+    sendCommand( ::rtl::OUString::createFromAscii( "exec" ) );
+
+    m_pCommandThread->execCondition().wait();
 
     return m_pCommandThread->result();
 }
-- 
1.7.0.1

