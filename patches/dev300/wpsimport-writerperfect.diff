From 4b712c1e911120431dda9c2972ce6eb08cd51ee4 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:53:40 +0200
Subject: [PATCH 048/768] wpsimport-writerperfect.diff

---
 writerperfect/prj/build.lst                        |    5 +-
 writerperfect/prj/d.lst                            |    4 +-
 writerperfect/source/filter/DocumentCollector.cxx  |    2 +-
 writerperfect/source/filter/DocumentCollector.hxx  |    7 +-
 writerperfect/source/filter/DocumentHandler.cxx    |   10 +-
 writerperfect/source/filter/SectionStyle.cxx       |    2 +-
 writerperfect/source/filter/makefile.mk            |   12 +-
 writerperfect/source/stream/WPXSvStream.cxx        |    2 +-
 writerperfect/source/stream/WPXSvStream.h          |    3 +-
 writerperfect/source/stream/makefile.mk            |    6 +
 .../source/wpdimp/WordPerfectCollector.cxx         |    5 +-
 .../source/wpdimp/WordPerfectCollector.hxx         |    4 +-
 writerperfect/source/wpdimp/makefile.mk            |   12 +-
 writerperfect/source/wpsimp/MSWorksCollector.cxx   |   48 +++
 writerperfect/source/wpsimp/MSWorksCollector.hxx   |   41 +++
 .../source/wpsimp/MSWorksImportFilter.cxx          |  303 ++++++++++++++++++++
 .../source/wpsimp/MSWorksImportFilter.hxx          |  129 +++++++++
 writerperfect/source/wpsimp/makefile.mk            |   29 ++
 .../source/wpsimp/msworks_genericfilter.cxx        |  101 +++++++
 writerperfect/util/makefile.mk                     |   47 +++-
 21 files changed, 747 insertions(+), 33 deletions(-)
 create mode 100644 writerperfect/source/wpsimp/MSWorksCollector.cxx
 create mode 100644 writerperfect/source/wpsimp/MSWorksCollector.hxx
 create mode 100644 writerperfect/source/wpsimp/MSWorksImportFilter.cxx
 create mode 100644 writerperfect/source/wpsimp/MSWorksImportFilter.hxx
 create mode 100644 writerperfect/source/wpsimp/makefile.mk
 create mode 100644 writerperfect/source/wpsimp/msworks_genericfilter.cxx

diff --git writerperfect/prj/build.lst writerperfect/prj/build.lst
index 3bb3867..df9d2dd 100644
--- writerperfect/prj/build.lst
+++ writerperfect/prj/build.lst
@@ -1,6 +1,7 @@
-wp      writerperfect : LIBWPD:libwpd sot comphelper xmloff NULL
+wp      writerperfect : LIBWPS:libwps LIBWPD:libwpd sot comphelper xmloff svtools NULL
 wp	writerperfect			usr1	-	all	wp_mkout NULL
 wp	writerperfect\source\stream	nmake	-	all	wp_stream NULL
 wp	writerperfect\source\filter	nmake	-	all	wp_filter NULL
 wp	writerperfect\source\wpdimp	nmake	-	all	wp_wpdimp NULL
-wp	writerperfect\util		nmake	-	all	wp_util wp_wpdimp wp_filter wp_stream NULL
+wp	writerperfect\source\wpsimp	nmake	-	all	wp_wpsimp NULL
+wp	writerperfect\util		nmake	-	all	wp_util wp_wpsimp wp_wpdimp wp_filter wp_stream NULL
diff --git writerperfect/prj/d.lst writerperfect/prj/d.lst
index 5b5852c..fb11fa9 100644
--- writerperfect/prj/d.lst
+++ writerperfect/prj/d.lst
@@ -1,4 +1,4 @@
-..\%__SRC%\lib\libwpft*.so %_DEST%\lib%_EXT%
-..\%__SRC%\bin\wpft*.dll %_DEST%\bin%_EXT%
+..\%__SRC%\lib\lib*.so %_DEST%\lib%_EXT%
+..\%__SRC%\bin\*.dll %_DEST%\bin%_EXT%
 ..\%__SRC%\bin\wpftgo.dll %_DEST%\bin%_EXT%\wpftgo.dll
 ..\%__SRC%\lib\*.dylib %_DEST%\lib%_EXT%\*.dylib
diff --git writerperfect/source/filter/DocumentCollector.cxx writerperfect/source/filter/DocumentCollector.cxx
index 828e799..5baae93 100644
--- writerperfect/source/filter/DocumentCollector.cxx
+++ writerperfect/source/filter/DocumentCollector.cxx
@@ -58,7 +58,7 @@ _WriterDocumentState::_WriterDocumentState() :
 {
 }
 
-DocumentCollector::DocumentCollector(WPXInputStream *pInput, DocumentHandler *pHandler) :
+DocumentCollector::DocumentCollector(WPSInputStream *pInput, DocumentHandler *pHandler) :
         mpInput(pInput),
         mpHandler(pHandler),
     mbUsed(false),
diff --git writerperfect/source/filter/DocumentCollector.hxx writerperfect/source/filter/DocumentCollector.hxx
index 18ebcdb..a1e7fbc 100644
--- writerperfect/source/filter/DocumentCollector.hxx
+++ writerperfect/source/filter/DocumentCollector.hxx
@@ -35,6 +35,7 @@
 #if defined _MSC_VER
 #pragma warning( push, 1 )
 #endif
+#include <libwps/libwps.h>
 #include <libwpd/libwpd.h>
 #if defined _MSC_VER
 #pragma warning( pop )
@@ -82,7 +83,7 @@ struct ltstr
 class DocumentCollector : public WPXHLListenerImpl
 {
 public:
-    DocumentCollector(WPXInputStream *pInput, DocumentHandler *pHandler);
+    DocumentCollector(WPSInputStream *pInput, DocumentHandler *pHandler);
     virtual ~DocumentCollector();
     bool filter();
 
@@ -133,7 +134,7 @@ public:
     virtual void closeTableCell();
     virtual void insertCoveredTableCell(const WPXPropertyList &propList);
      virtual void closeTable();
-    virtual bool parseSourceDocument(WPXInputStream &input) = 0;
+    virtual bool parseSourceDocument(WPSInputStream &input) = 0;
 
 protected:
     void _resetDocumentState();
@@ -147,7 +148,7 @@ private:
     void _openListLevel(TagOpenElement *pListLevelOpenElement);
     void _closeListLevel(const char *szListType);
 
-        WPXInputStream *mpInput;
+        WPSInputStream *mpInput;
         DocumentHandler *mpHandler;
     bool mbUsed; // whether or not it has been before (you can only use me once!)
 
diff --git writerperfect/source/filter/DocumentHandler.cxx writerperfect/source/filter/DocumentHandler.cxx
index e0a11ab..2af504c 100644
--- writerperfect/source/filter/DocumentHandler.cxx
+++ writerperfect/source/filter/DocumentHandler.cxx
@@ -42,19 +42,19 @@ DocumentHandler::DocumentHandler(Reference < XDocumentHandler > &xHandler) :
 
 void DocumentHandler::startDocument() 
 {
-    WRITER_DEBUG_MSG(("DocumentHandler::startDocument"));
+    WRITER_DEBUG_MSG(("DocumentHandler::startDocument\n"));
     mxHandler->startDocument();
 }
 
 void DocumentHandler::endDocument()
 {
-    WRITER_DEBUG_MSG(("DocumentHandler::endDocument"));
+    WRITER_DEBUG_MSG(("DocumentHandler::endDocument\n"));
     mxHandler->endDocument();
 }
 
 void DocumentHandler::startElement(const char *psName, const WPXPropertyList &xPropList)
 {
-    WRITER_DEBUG_MSG(("DocumentHandler::startElement"));
+    WRITER_DEBUG_MSG(("DocumentHandler::startElement\n"));
         SvXMLAttributeList *pAttrList = new SvXMLAttributeList();
     Reference < XAttributeList > xAttrList(pAttrList);
     WPXPropertyList::Iter i(xPropList);
@@ -71,13 +71,13 @@ void DocumentHandler::startElement(const char *psName, const WPXPropertyList &xP
 
 void DocumentHandler::endElement(const char *psName)
 {
-    WRITER_DEBUG_MSG(("DocumentHandler::endElement"));
+    WRITER_DEBUG_MSG(("DocumentHandler::endElement\n"));
         mxHandler->endElement(OUString::createFromAscii(psName));
 }
 
 void DocumentHandler::characters(const WPXString &sCharacters)
 {
-    WRITER_DEBUG_MSG(("DocumentHandler::characters"));
+    WRITER_DEBUG_MSG(("DocumentHandler::characters\n"));
         OUString sCharU16(sCharacters.cstr(), strlen(sCharacters.cstr()), RTL_TEXTENCODING_UTF8);
         mxHandler->characters(sCharU16);
 }
diff --git writerperfect/source/filter/SectionStyle.cxx writerperfect/source/filter/SectionStyle.cxx
index 7dae06c..de94e9c 100644
--- writerperfect/source/filter/SectionStyle.cxx
+++ writerperfect/source/filter/SectionStyle.cxx
@@ -33,7 +33,7 @@
 
 #ifdef _MSC_VER
 double rint(double x);
-#endif /* _WIN32 */
+#endif /* _MSC_VER */
 
 SectionStyle::SectionStyle(const WPXPropertyList &xPropList, 
                            const WPXPropertyListVector &xColumns, 
diff --git writerperfect/source/filter/makefile.mk writerperfect/source/filter/makefile.mk
index e535d2a..a092ce2 100644
--- writerperfect/source/filter/makefile.mk
+++ writerperfect/source/filter/makefile.mk
@@ -7,12 +7,16 @@ ENABLE_EXCEPTIONS=true
 .INCLUDE :  settings.mk
 
 .IF "$(SYSTEM_LIBWPD)" == "YES"
-INCPRE+=$(LIBWPD_CFLAGS) -I..
-.ELSE
-# broken but ... necessary, internal include shafted ...
-INCPRE+=-I..
+INCPRE+=$(LIBWPD_CFLAGS)
+.ENDIF
+
+.IF "$(SYSTEM_LIBWPS)" == "YES"
+INCPRE+=$(LIBWPS_CFLAGS)
 .ENDIF
 
+# broken but ... necessary, internal include shafted ...
+INCPRE+= -I..
+
 SLOFILES= \
     $(SLO)$/DocumentElement.obj		\
     $(SLO)$/FontStyle.obj			\
diff --git writerperfect/source/stream/WPXSvStream.cxx writerperfect/source/stream/WPXSvStream.cxx
index 3737e93..f7cfe35 100644
--- writerperfect/source/stream/WPXSvStream.cxx
+++ writerperfect/source/stream/WPXSvStream.cxx
@@ -9,7 +9,7 @@ using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::io;
 
 WPXSvInputStream::WPXSvInputStream( Reference< XInputStream > xStream ) :
-        WPXInputStream(true),
+        WPSInputStream(),
         mxChildStorage(),
         mxChildStream(),
         mxStream(xStream),
diff --git writerperfect/source/stream/WPXSvStream.h writerperfect/source/stream/WPXSvStream.h
index 099c5a7..f4f3b7e 100644
--- writerperfect/source/stream/WPXSvStream.h
+++ writerperfect/source/stream/WPXSvStream.h
@@ -12,12 +12,13 @@
 #if defined _MSC_VER
 #pragma warning( push, 1 )
 #endif
+#include <libwps/WPSStream.h>
 #include <libwpd/WPXStream.h>
 #if defined _MSC_VER
 #pragma warning( pop )
 #endif
 
-class WPXSvInputStream : public WPXInputStream
+class WPXSvInputStream : public WPSInputStream
 {
 public:
     WPXSvInputStream( ::com::sun::star::uno::Reference<
diff --git writerperfect/source/stream/makefile.mk writerperfect/source/stream/makefile.mk
index 7e684b7..97262e7 100644
--- writerperfect/source/stream/makefile.mk
+++ writerperfect/source/stream/makefile.mk
@@ -10,6 +10,12 @@ ENABLE_EXCEPTIONS=true
 INCPRE+=$(LIBWPD_CFLAGS)
 .ENDIF
 
+.IF "$(SYSTEM_LIBWPS)" == "YES"
+INCPRE+=$(LIBWPS_CFLAGS)
+.ELSE
+INCPRE+=$(SOLARVER)$/$(UPD)$/$(INPATH)$/inc$/libwps
+.ENDIF
+
 # broken but ... necessary, internal include shafted ...
 INCPRE+= -I..
 
diff --git writerperfect/source/wpdimp/WordPerfectCollector.cxx writerperfect/source/wpdimp/WordPerfectCollector.cxx
index 0bc10cc..9d32fde 100644
--- writerperfect/source/wpdimp/WordPerfectCollector.cxx
+++ writerperfect/source/wpdimp/WordPerfectCollector.cxx
@@ -30,11 +30,12 @@
 #pragma warning( push, 1 )
 #endif
 #include "WordPerfectCollector.hxx"
+#include <libwpd/WPDocument.h>
 #if defined _MSC_VER
 #pragma warning( pop )
 #endif
 
-WordPerfectCollector::WordPerfectCollector(WPXInputStream *pInput, DocumentHandler *pHandler) :
+WordPerfectCollector::WordPerfectCollector(WPSInputStream *pInput, DocumentHandler *pHandler) :
     DocumentCollector(pInput, pHandler)
 {
 }
@@ -43,7 +44,7 @@ WordPerfectCollector::~WordPerfectCollector()
 {
 }
 
-bool WordPerfectCollector::parseSourceDocument(WPXInputStream &input)
+bool WordPerfectCollector::parseSourceDocument(WPSInputStream &input)
 {
         WPDResult result = WPDocument::parse(&input, static_cast<WPXHLListenerImpl *>(this));
         if (result != WPD_OK)
diff --git writerperfect/source/wpdimp/WordPerfectCollector.hxx writerperfect/source/wpdimp/WordPerfectCollector.hxx
index 400a5ca..95ed7af 100644
--- writerperfect/source/wpdimp/WordPerfectCollector.hxx
+++ writerperfect/source/wpdimp/WordPerfectCollector.hxx
@@ -34,8 +34,8 @@
 class WordPerfectCollector : public DocumentCollector
 {
 public:
-    WordPerfectCollector(WPXInputStream *pInput, DocumentHandler *pHandler);
+    WordPerfectCollector(WPSInputStream *pInput, DocumentHandler *pHandler);
     virtual ~WordPerfectCollector();
-    bool parseSourceDocument(WPXInputStream &pInput);
+    bool parseSourceDocument(WPSInputStream &pInput);
 };
 #endif
diff --git writerperfect/source/wpdimp/makefile.mk writerperfect/source/wpdimp/makefile.mk
index bc2a3cd..745887e 100644
--- writerperfect/source/wpdimp/makefile.mk
+++ writerperfect/source/wpdimp/makefile.mk
@@ -7,12 +7,16 @@ ENABLE_EXCEPTIONS=true
 .INCLUDE :  settings.mk
 
 .IF "$(SYSTEM_LIBWPD)" == "YES"
-INCPRE+=$(LIBWPD_CFLAGS) -I..
-.ELSE
-# broken but ... necessary, internal include shafted ...
-INCPRE+=-I..
+INCPRE+=$(LIBWPD_CFLAGS)
+.ENDIF
+
+.IF "$(SYSTEM_LIBWPS)" == "YES"
+INCPRE+=$(LIBWPS_CFLAGS)
 .ENDIF
 
+# broken but ... necessary, internal include shafted ...
+INCPRE+= -I..
+
 SLOFILES= \
     $(SLO)$/WordPerfectCollector.obj  \
     $(SLO)$/WordPerfectImportFilter.obj  \
diff --git writerperfect/source/wpsimp/MSWorksCollector.cxx writerperfect/source/wpsimp/MSWorksCollector.cxx
new file mode 100644
index 0000000..f562365
--- /dev/null
+++ writerperfect/source/wpsimp/MSWorksCollector.cxx
@@ -0,0 +1,48 @@
+/* MSWorksCollector: Collects sections and runs of text from a
+ * wordperfect file (and styles to go along with them) and writes them
+ * to a Writer target document
+ *
+ * Copyright (C) 2006 Fridrich Strba (fridrich.strba@bluewin.ch)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+
+#include "MSWorksCollector.hxx"
+#include <libwps/WPSDocument.h>
+
+MSWorksCollector::MSWorksCollector(WPSInputStream *pInput, DocumentHandler *pHandler) :
+    DocumentCollector(pInput, pHandler)
+{
+}
+
+MSWorksCollector::~MSWorksCollector()
+{
+}
+
+bool MSWorksCollector::parseSourceDocument(WPSInputStream &input)
+{
+        WPSResult result = WPSDocument::parse(&input, static_cast<WPXHLListenerImpl *>(this));
+        if (result != WPS_OK)
+                return false;
+
+    return true;
+}
diff --git writerperfect/source/wpsimp/MSWorksCollector.hxx writerperfect/source/wpsimp/MSWorksCollector.hxx
new file mode 100644
index 0000000..3b137c4
--- /dev/null
+++ writerperfect/source/wpsimp/MSWorksCollector.hxx
@@ -0,0 +1,41 @@
+/* MSWorksCollector: Collects sections and runs of text from a
+ * wordperfect file (and styles to go along with them) and writes them
+ * to a Writer target document
+ *
+ * Copyright (C) 2006 Fridrich Strba (fridrich.strba@bluewin.ch)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+
+#ifndef _MSWORKSCOLLECTOR_HXX
+#define _MSWORKSCOLLECTOR_HXX
+
+#include "filter/DocumentCollector.hxx"
+
+class MSWorksCollector : public DocumentCollector
+{
+public:
+    MSWorksCollector(WPSInputStream *pInput, DocumentHandler *pHandler);
+    virtual ~MSWorksCollector();
+    bool parseSourceDocument(WPSInputStream &input);
+};
+#endif
diff --git writerperfect/source/wpsimp/MSWorksImportFilter.cxx writerperfect/source/wpsimp/MSWorksImportFilter.cxx
new file mode 100644
index 0000000..417ff05
--- /dev/null
+++ writerperfect/source/wpsimp/MSWorksImportFilter.cxx
@@ -0,0 +1,303 @@
+/* MSWorksImportFilter: Sets up the filter, and calls DocumentCollector
+ * to do the actual filtering
+ *
+ * Copyright (C) 2000 by Sun Microsystems, Inc.
+ * Copyright (C) 2002-2004 William Lachance (wlach@interlog.com)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba <fridrich.strba@bluewin.ch>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ *  Contributor(s): Martin Gallwey (gallwey@sun.com)
+ *
+ */
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+
+#ifndef _OSL_DIAGNOSE_H_
+#include <osl/diagnose.h>
+#endif
+#ifndef _RTL_TENCINFO_H_
+#include <rtl/tencinfo.h>
+#endif
+#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#endif
+#ifndef _COM_SUN_STAR_IO_XINPUTSTREAM_HPP_
+#include <com/sun/star/io/XInputStream.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
+#include <com/sun/star/xml/sax/XAttributeList.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_INPUTSOURCE_HPP_
+#include <com/sun/star/xml/sax/InputSource.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_XPARSER_HPP_
+#include <com/sun/star/xml/sax/XParser.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UCB_XCOMMANDENVIRONMENT_HPP
+#include <com/sun/star/ucb/XCommandEnvironment.hpp>
+#endif
+
+#ifndef _ATTRLIST_HPP_
+#include <xmloff/attrlist.hxx>
+#endif
+#ifndef _XMLKYWD_HPP
+#include <xmloff/xmlkywd.hxx>
+#endif
+
+#ifndef _UCBHELPER_CONTENT_HXX
+#include <ucbhelper/content.hxx>
+#endif
+
+#include "filter/FilterInternal.hxx"
+#include "filter/DocumentHandler.hxx"
+#include "filter/DocumentCollector.hxx"
+#include "stream/WPXSvStream.h"
+
+#include <libwps/WPSDocument.h>
+#include "MSWorksImportFilter.hxx"
+#include "MSWorksCollector.hxx"
+
+// using namespace ::rtl;
+using rtl::OString;
+using rtl::OUString;
+using com::sun::star::uno::Sequence;
+using com::sun::star::uno::Reference;
+using com::sun::star::uno::Any;
+using com::sun::star::uno::UNO_QUERY;
+using com::sun::star::uno::XInterface;
+using com::sun::star::uno::Exception;
+using com::sun::star::uno::RuntimeException;
+using com::sun::star::lang::XMultiServiceFactory;
+using com::sun::star::beans::PropertyValue;
+using com::sun::star::document::XFilter;
+using com::sun::star::document::XExtendedFilterDetection;
+using com::sun::star::ucb::XCommandEnvironment;
+
+using com::sun::star::io::XInputStream;
+using com::sun::star::document::XImporter;
+using com::sun::star::xml::sax::InputSource;
+using com::sun::star::xml::sax::XAttributeList;
+using com::sun::star::xml::sax::XDocumentHandler;
+using com::sun::star::xml::sax::XParser;
+
+void callHandler(Reference < XDocumentHandler > xDocHandler);
+
+sal_Bool SAL_CALL MSWorksImportFilter::importImpl( const Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor )
+    throw (RuntimeException)
+{
+    WRITER_DEBUG_MSG(("MSWorksImportFilter::importImpl: Got here!\n"));
+
+    sal_Int32 nLength = aDescriptor.getLength();
+    const PropertyValue * pValue = aDescriptor.getConstArray();
+    OUString sURL;
+    Reference < XInputStream > xInputStream;
+    for ( sal_Int32 i = 0 ; i < nLength; i++)
+    {
+        if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
+        pValue[i].Value >>= xInputStream;
+        else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "URL" ) ) )
+        pValue[i].Value >>= sURL;
+    }
+    if ( !xInputStream.is() )
+    {
+        OSL_ASSERT( 0 );
+        return sal_False;
+    }
+    OString sFileName;
+    sFileName = OUStringToOString(sURL, RTL_TEXTENCODING_INFO_ASCII);
+
+    // An XML import service: what we push sax messages to..
+    OUString sXMLImportService ( RTL_CONSTASCII_USTRINGPARAM ( "com.sun.star.comp.Writer.XMLImporter" ) );
+    Reference < XDocumentHandler > xInternalHandler( mxMSF->createInstance( sXMLImportService ), UNO_QUERY );
+
+    // The XImporter sets up an empty target document for XDocumentHandler to write to..
+    Reference < XImporter > xImporter(xInternalHandler, UNO_QUERY);
+    xImporter->setTargetDocument(mxDoc);
+
+        // OO Document Handler: abstract class to handle document SAX messages, concrete implementation here
+        // writes to in-memory target doc
+        DocumentHandler xHandler(xInternalHandler);
+
+    WPXSvInputStream input( xInputStream );
+
+    MSWorksCollector collector(&input, &xHandler);
+    collector.filter();
+
+    return true;
+}
+
+sal_Bool SAL_CALL MSWorksImportFilter::filter( const Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor )
+    throw (RuntimeException)
+{
+    WRITER_DEBUG_MSG(("MSWorksImportFilter::filter: Got here!\n"));
+    return importImpl ( aDescriptor );
+}
+void SAL_CALL MSWorksImportFilter::cancel(  )
+    throw (RuntimeException)
+{
+    WRITER_DEBUG_MSG(("MSWorksImportFilter::cancel: Got here!\n"));
+}
+
+// XImporter
+void SAL_CALL MSWorksImportFilter::setTargetDocument( const Reference< ::com::sun::star::lang::XComponent >& xDoc )
+    throw (::com::sun::star::lang::IllegalArgumentException, RuntimeException)
+{
+    WRITER_DEBUG_MSG(("MSWorksImportFilter::getTargetDocument: Got here!\n"));
+    meType = FILTER_IMPORT;
+    mxDoc = xDoc;
+}
+
+// XExtendedFilterDetection
+OUString SAL_CALL MSWorksImportFilter::detect( com::sun::star::uno::Sequence< PropertyValue >& Descriptor )
+    throw( com::sun::star::uno::RuntimeException )
+{
+    WRITER_DEBUG_MSG(("MSWorksImportFilter::detect: Got here!\n"));
+
+    WPSConfidence confidence = WPS_CONFIDENCE_NONE;
+    OUString sTypeName = OUString( RTL_CONSTASCII_USTRINGPARAM ( "" ) );
+    sal_Int32 nLength = Descriptor.getLength();
+    sal_Int32 location = nLength;
+    OUString sURL;
+    const PropertyValue * pValue = Descriptor.getConstArray();
+    Reference < XInputStream > xInputStream;
+    for ( sal_Int32 i = 0 ; i < nLength; i++)
+    {
+        if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "TypeName" ) ) )
+            location=i;
+        else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
+            pValue[i].Value >>= xInputStream;
+        else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "URL" ) ) )
+            pValue[i].Value >>= sURL;
+    }
+
+        Reference< com::sun::star::ucb::XCommandEnvironment > xEnv;
+        if (!xInputStream.is())
+        {
+        try
+        {
+            ::ucbhelper::Content aContent(sURL, xEnv);
+                    xInputStream = aContent.openStream();
+        }
+        catch ( ... )
+        {
+            return ::rtl::OUString();
+        }
+
+                if (!xInputStream.is())
+                    return ::rtl::OUString();
+        }
+
+    WPXSvInputStream input( xInputStream );
+
+    if (input.atEOS())
+        return ::rtl::OUString();
+
+    confidence = WPSDocument::isFileFormatSupported(&input, false);
+
+    if ((confidence == WPS_CONFIDENCE_EXCELLENT) || (confidence == WPS_CONFIDENCE_GOOD))
+        sTypeName = OUString( RTL_CONSTASCII_USTRINGPARAM ( "writer_MS_Works_Document" ) );
+
+    if (sTypeName.getLength())
+    {
+        if ( location == Descriptor.getLength() )
+        {
+            Descriptor.realloc(nLength+1);
+            Descriptor[location].Name = ::rtl::OUString::createFromAscii( "TypeName" );
+        }
+
+        Descriptor[location].Value <<=sTypeName;
+    }
+
+    return sTypeName;
+}
+
+
+// XInitialization
+void SAL_CALL MSWorksImportFilter::initialize( const Sequence< Any >& aArguments )
+    throw (Exception, RuntimeException)
+{
+    WRITER_DEBUG_MSG(("MSWorksImportFilter::initialize: Got here!\n"));
+    Sequence < PropertyValue > aAnySeq;
+    sal_Int32 nLength = aArguments.getLength();
+    if ( nLength && ( aArguments[0] >>= aAnySeq ) )
+    {
+        const PropertyValue * pValue = aAnySeq.getConstArray();
+        nLength = aAnySeq.getLength();
+        for ( sal_Int32 i = 0 ; i < nLength; i++)
+        {
+            if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "Type" ) ) )
+            {
+                pValue[i].Value >>= msFilterName;
+                break;
+            }
+        }
+    }
+}
+OUString MSWorksImportFilter_getImplementationName ()
+    throw (RuntimeException)
+{
+    return OUString ( RTL_CONSTASCII_USTRINGPARAM ( "com.sun.star.comp.Writer.MSWorksImportFilter" ) );
+}
+
+#define SERVICE_NAME1 "com.sun.star.document.ImportFilter"
+#define SERVICE_NAME2 "com.sun.star.document.ExtendedTypeDetection"
+sal_Bool SAL_CALL MSWorksImportFilter_supportsService( const OUString& ServiceName )
+    throw (RuntimeException)
+{
+    return (ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME1 ) ) ||
+        ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME2 ) ) );
+}
+Sequence< OUString > SAL_CALL MSWorksImportFilter_getSupportedServiceNames(  )
+    throw (RuntimeException)
+{
+    Sequence < OUString > aRet(2);
+        OUString* pArray = aRet.getArray();
+        pArray[0] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME1 ) );
+    pArray[1] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME2 ) );
+        return aRet;
+}
+#undef SERVICE_NAME2
+#undef SERVICE_NAME1
+
+Reference< XInterface > SAL_CALL MSWorksImportFilter_createInstance( const Reference< XMultiServiceFactory > & rSMgr)
+    throw( Exception )
+{
+    return (cppu::OWeakObject*) new MSWorksImportFilter( rSMgr );
+}
+
+// XServiceInfo
+OUString SAL_CALL MSWorksImportFilter::getImplementationName(  )
+    throw (RuntimeException)
+{
+    return MSWorksImportFilter_getImplementationName();
+}
+sal_Bool SAL_CALL MSWorksImportFilter::supportsService( const OUString& rServiceName )
+    throw (RuntimeException)
+{
+    return MSWorksImportFilter_supportsService( rServiceName );
+}
+Sequence< OUString > SAL_CALL MSWorksImportFilter::getSupportedServiceNames(  )
+    throw (RuntimeException)
+{
+    return MSWorksImportFilter_getSupportedServiceNames();
+}
diff --git writerperfect/source/wpsimp/MSWorksImportFilter.hxx writerperfect/source/wpsimp/MSWorksImportFilter.hxx
new file mode 100644
index 0000000..db4519d
--- /dev/null
+++ writerperfect/source/wpsimp/MSWorksImportFilter.hxx
@@ -0,0 +1,129 @@
+/*
+ * Copyright (C) 2000 by Sun Microsystems, Inc.
+ * Copyright (C) 2002-2004 William Lachance (wlach@interlog.com)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba <fridrich.strba@bluewin.ch>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ *  Contributor(s): Martin Gallwey (gallwey@sun.com)
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+#ifndef _WORDPERFECTIMPORTFILTER_HXX
+#define _WORDPERFECTIMPORTFILTER_HXX
+
+#ifndef _COM_SUN_STAR_DOCUMENT_XFILTER_HPP_
+#include <com/sun/star/document/XFilter.hpp>
+#endif
+#ifndef _COM_SUN_STAR_DOCUMENT_XIMPORTER_HPP_
+#include <com/sun/star/document/XImporter.hpp>
+#endif
+#ifndef _COM_SUN_STAR_DOCUMENT_XEXTENDEDFILTERDETECTION_HPP_
+#include <com/sun/star/document/XExtendedFilterDetection.hpp>
+#endif
+#ifndef _COM_SUN_STAR_LANG_XINITIALIZATION_HPP_
+#include <com/sun/star/lang/XInitialization.hpp>
+#endif
+#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+#ifndef _CPPUHELPER_IMPLBASE5_HXX_
+#include <cppuhelper/implbase5.hxx>
+#endif
+
+enum FilterType
+{
+    FILTER_IMPORT,
+    FILTER_EXPORT
+};
+/* This component will be instantiated for both import or export. Whether it calls
+ * setSourceDocument or setTargetDocument determines which Impl function the filter
+ * member calls */
+class MSWorksImportFilter : public cppu::WeakImplHelper5
+<
+    com::sun::star::document::XFilter,
+    com::sun::star::document::XImporter,
+    com::sun::star::document::XExtendedFilterDetection,
+    com::sun::star::lang::XInitialization,
+    com::sun::star::lang::XServiceInfo
+>
+{
+protected:
+    // oo.org declares
+    ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > mxMSF;
+    ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent > mxDoc;
+    ::rtl::OUString msFilterName;
+    ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler > mxHandler;
+
+    FilterType meType;
+
+    sal_Bool SAL_CALL importImpl( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor )
+        throw (::com::sun::star::uno::RuntimeException);
+
+public:
+    MSWorksImportFilter( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > &rxMSF)
+        : mxMSF( rxMSF ) {}
+    virtual ~MSWorksImportFilter() {}
+
+    // XFilter
+        virtual sal_Bool SAL_CALL filter( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor )
+        throw (::com::sun::star::uno::RuntimeException);
+        virtual void SAL_CALL cancel(  )
+        throw (::com::sun::star::uno::RuntimeException);
+
+    // XImporter
+        virtual void SAL_CALL setTargetDocument( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent >& xDoc )
+        throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
+
+	//XExtendedFilterDetection
+    virtual ::rtl::OUString SAL_CALL detect( com::sun::star::uno::Sequence< com::sun::star::beans::PropertyValue >& Descriptor )
+        throw( com::sun::star::uno::RuntimeException );
+
+    // XInitialization
+        virtual void SAL_CALL initialize( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aArguments )
+        throw (::com::sun::star::uno::Exception, ::com::sun::star::uno::RuntimeException);
+
+    // XServiceInfo
+        virtual ::rtl::OUString SAL_CALL getImplementationName(  )
+        throw (::com::sun::star::uno::RuntimeException);
+        virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName )
+        throw (::com::sun::star::uno::RuntimeException);
+        virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  )
+        throw (::com::sun::star::uno::RuntimeException);
+
+};
+
+::rtl::OUString MSWorksImportFilter_getImplementationName()
+    throw ( ::com::sun::star::uno::RuntimeException );
+
+sal_Bool SAL_CALL MSWorksImportFilter_supportsService( const ::rtl::OUString& ServiceName )
+    throw ( ::com::sun::star::uno::RuntimeException );
+
+::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL MSWorksImportFilter_getSupportedServiceNames(  )
+    throw ( ::com::sun::star::uno::RuntimeException );
+
+::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >
+SAL_CALL MSWorksImportFilter_createInstance( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > & rSMgr)
+    throw ( ::com::sun::star::uno::Exception );
+
+#endif
diff --git writerperfect/source/wpsimp/makefile.mk writerperfect/source/wpsimp/makefile.mk
new file mode 100644
index 0000000..da17e80
--- /dev/null
+++ writerperfect/source/wpsimp/makefile.mk
@@ -0,0 +1,29 @@
+PRJ=..$/..
+
+PRJNAME=writerperfect
+TARGET=wpsimp
+ENABLE_EXCEPTIONS=true
+
+.INCLUDE :  settings.mk
+
+.IF "$(SYSTEM_LIBWPD)" == "YES"
+INCPRE+=$(LIBWPD_CFLAGS)
+.ELSE
+INCPRE+=$(SOLARVER)$/$(UPD)$/$(INPATH)$/inc$/libwpd
+.ENDIF
+
+.IF "$(SYSTEM_LIBWPS)" == "YES"
+INCPRE+=$(LIBWPS_CFLAGS)
+.ELSE
+INCPRE+=$(SOLARVER)$/$(UPD)$/$(INPATH)$/inc$/libwps
+.ENDIF
+
+# broken but ... necessary, internal include shafted ...
+INCPRE+= -I..
+
+SLOFILES= \
+    $(SLO)$/MSWorksCollector.obj  \
+    $(SLO)$/MSWorksImportFilter.obj  \
+    $(SLO)$/msworks_genericfilter.obj
+
+.INCLUDE :  target.mk
diff --git writerperfect/source/wpsimp/msworks_genericfilter.cxx writerperfect/source/wpsimp/msworks_genericfilter.cxx
new file mode 100644
index 0000000..f77b9c2
--- /dev/null
+++ writerperfect/source/wpsimp/msworks_genericfilter.cxx
@@ -0,0 +1,101 @@
+/* genericfilter: mostly generic code for registering the filter
+ *
+ * Portions of this code Copyright 2000 by Sun Microsystems, Inc.
+ * Rest is Copyright (C) 2002 William Lachance (wlach@interlog.com)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+#include <stdio.h>
+
+#include <osl/mutex.hxx>
+#include <osl/thread.h>
+#include <cppuhelper/factory.hxx>
+
+#ifndef _COM_SUN_STAR_LANG_XSINGLESERVICEFACTORY_HPP_
+#include <com/sun/star/lang/XSingleServiceFactory.hpp>
+#endif
+
+#include "MSWorksImportFilter.hxx"
+
+using namespace ::rtl;
+using namespace ::cppu;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::lang;
+using namespace ::com::sun::star::registry;
+
+extern "C"
+{
+//==================================================================================================
+void SAL_CALL component_getImplementationEnvironment(
+    const sal_Char ** ppEnvTypeName, uno_Environment ** /* ppEnv */ )
+{
+    *ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;
+}
+//==================================================================================================
+sal_Bool SAL_CALL component_writeInfo(
+    void * /* pServiceManager */, void * pRegistryKey )
+{
+    if (pRegistryKey)
+    {
+        try
+        {
+            sal_Int32 nPos = 0;
+            Reference< XRegistryKey > xNewKey(
+                reinterpret_cast< XRegistryKey * >( pRegistryKey )->createKey( MSWorksImportFilter_getImplementationName() ) );
+            xNewKey = xNewKey->createKey( OUString::createFromAscii( "/UNO/SERVICES" ) );
+
+            const Sequence< OUString > & rSNL = MSWorksImportFilter_getSupportedServiceNames();
+            const OUString * pArray = rSNL.getConstArray();
+            for ( nPos = rSNL.getLength(); nPos--; )
+                xNewKey->createKey( pArray[nPos] );
+
+            return sal_True;
+        }
+        catch (InvalidRegistryException &)
+        {
+            OSL_ENSURE( sal_False, "### InvalidRegistryException!" );
+        }
+    }
+    return sal_False;
+}
+//==================================================================================================
+void * SAL_CALL component_getFactory(
+    const sal_Char * pImplName, void * pServiceManager, void * /* pRegistryKey */ )
+{
+    void * pRet = 0;
+
+    OUString implName = OUString::createFromAscii( pImplName );
+    if ( pServiceManager && implName.equals(MSWorksImportFilter_getImplementationName()) )
+    {
+        Reference< XSingleServiceFactory > xFactory( createSingleFactory(
+            reinterpret_cast< XMultiServiceFactory * >( pServiceManager ),
+            OUString::createFromAscii( pImplName ),
+            MSWorksImportFilter_createInstance, MSWorksImportFilter_getSupportedServiceNames() ) );
+
+        if (xFactory.is())
+        {
+            xFactory->acquire();
+            pRet = xFactory.get();
+        }
+    }
+
+    return pRet;
+}
+}
diff --git writerperfect/util/makefile.mk writerperfect/util/makefile.mk
index dca29e0..7b5ef01 100644
--- writerperfect/util/makefile.mk
+++ writerperfect/util/makefile.mk
@@ -4,18 +4,26 @@ TARGET=writerperfect
 
 .INCLUDE :  settings.mk
 
-.IF "$(GUI)"=="UNX"
+
+.IF "$(GUI)"=="UNX" || "$(GUI)$(COM)"=="WNTGCC"
+
 .IF "$(SYSTEM_LIBWPD)" == "YES"
 LIBWPD=$(LIBWPD_LIBS)
 .ELSE
 LIBWPD=-lwpdlib
 .ENDIF
+
+.IF "$(SYSTEM_LIBWPS)" == "YES"
+LIBWPS=$(LIBWPS_LIBS)
 .ELSE
-.IF "$(GUI)$(COM)"=="WNTGCC"
-LIBWPD=-lwpdlib
-.ELSE
- LIBWPD=$(LIBPRE) wpdlib.lib
+LIBWPS=-lwpslib
 .ENDIF
+
+.ELSE
+
+LIBWPD=$(LIBPRE) wpdlib.lib
+LIBWPS=$(LIBPRE) wpslib.lib
+
 .ENDIF
 
 LIB1TARGET= $(SLB)$/wpft.lib
@@ -42,4 +50,33 @@ SHL1LIBS = $(LIB1TARGET)
 SHL1VERSIONMAP=$(SOLARENV)/src/component.map
 DEF1NAME=$(SHL1TARGET)
 
+
+LIB2TARGET= $(SLB)$/msworks.lib
+LIB2FILES= \
+    $(SLB)$/stream.lib  \
+    $(SLB)$/filter.lib  \
+    $(SLB)$/wpsimp.lib
+SHL2LIBS=$(LIB2TARGET)
+SHL2STDLIBS+= \
+    $(SVLLIB)	\
+    $(SOTLIB) \
+    $(SO2LIB) \
+    $(SVTOOLLIB) \
+    $(UNOTOOLSLIB) \
+    $(TOOLSLIB) \
+    $(COMPHELPERLIB) \
+    $(UCBHELPERLIB) \
+    $(CPPUHELPERLIB) \
+    $(CPPULIB) \
+    $(SALLIB) \
+    $(XMLOFFLIB) \
+    $(LIBWPS) \
+    $(LIBWPD)
+
+SHL2TARGET = msworks$(DLLPOSTFIX)
+SHL2IMPLIB = i$(SHL2TARGET)
+SHL2LIBS = $(LIB2TARGET)
+SHL2VERSIONMAP = $(SOLARENV)/src/component.map
+DEF2NAME = $(SHL2TARGET)
+
 .INCLUDE :  target.mk
