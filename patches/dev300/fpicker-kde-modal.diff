diff --git a/fpicker/source/unx/kde/kdefpmain.cxx b/fpicker/source/unx/kde/kdefpmain.cxx
index eedda41..6506cfb 100644
--- fpicker/source/unx/kde/kdefpmain.cxx
+++ fpicker/source/unx/kde/kdefpmain.cxx
@@ -73,6 +73,12 @@
 // Main
 //////////////////////////////////////////////////////////////////////////
 
+static KCmdLineOptions sOptions[] =
+{
+    { "winid <argument>", I18N_NOOP("Window ID to which is the fpicker modal"), "0" },
+    KCmdLineLastOption
+};
+
 int main( int argc, char* argv[] )
 {
     // we fake the name of the application to have "OpenOffice.org" in the
@@ -87,12 +93,19 @@ int main( int argc, char* argv[] )
     ::std::cerr << "kdefilepicker, an implementation of KDE file dialog for OOo." << ::std::endl
         << "Type 'exit' and press Enter to finish." << ::std::endl;
 
+    KCmdLineArgs::addCmdLineOptions( sOptions );
     KCmdLineArgs::init( argc, argv, &qAboutData );
 
     KLocale::setMainCatalogue( "kdialog" );
     
     KApplication kApplication;
-    //ModalityFilter qFilter( /*winid*/ 79691780 );
+
+    // Setup the modality
+    KCmdLineArgs *pArgs = KCmdLineArgs::parsedArgs();
+    long nWinId = atol( pArgs->getOption( "winid" ) );
+    pArgs->clear();
+
+    ModalityFilter qModalityFilter( nWinId );
 
     FileDialog aFileDialog( NULL, QString(), NULL, "kdefiledialog" );
     
diff --git a/fpicker/source/unx/kde/kdemodalityfilter.cxx b/fpicker/source/unx/kde/kdemodalityfilter.cxx
index b026f34..075fabe 100644
--- fpicker/source/unx/kde/kdemodalityfilter.cxx
+++ fpicker/source/unx/kde/kdemodalityfilter.cxx
@@ -91,8 +91,6 @@ bool ModalityFilter::eventFilter( QObject *pObject, QEvent *pEvent )
         if ( pDlg != NULL && m_nWinId != 0 )
         {
             XSetTransientForHint( qt_xdisplay(), pDlg->winId(), m_nWinId );
-            NETWinInfo aInfo( qt_xdisplay(), pDlg->winId(), qt_xrootwin(), NET::WMState );
-            aInfo.setState( NET::Modal, NET::Modal );
             m_nWinId = 0;
         }
     }
diff --git a/fpicker/source/unx/kde_unx/UnxFilePicker.cxx b/fpicker/source/unx/kde_unx/UnxFilePicker.cxx
index 9d3da56..4590b74 100644
--- fpicker/source/unx/kde_unx/UnxFilePicker.cxx
+++ fpicker/source/unx/kde_unx/UnxFilePicker.cxx
@@ -127,6 +127,11 @@
 #include <UnxNotifyThread.hxx>
 #endif
 
+#include <vcl/svapp.hxx>
+#include <vcl/sysdata.hxx>
+#include <vcl/syswin.hxx>
+#include <vcl/window.hxx>
+
 #include <sys/wait.h>
 #include <unistd.h>
 #include <fcntl.h>
@@ -528,7 +533,7 @@ void SAL_CALL UnxFilePicker::setLabel( sal_Int16 nControlId, const ::rtl::OUStri
     sendCommand( aBuffer.makeStringAndClear() );
 }
 
-rtl::OUString SAL_CALL UnxFilePicker::getLabel(sal_Int16 nControlId) 
+rtl::OUString SAL_CALL UnxFilePicker::getLabel(sal_Int16 /*nControlId*/) 
     throw ( uno::RuntimeException )
 {
     // FIXME getLabel() is not yet implemented
@@ -784,10 +789,29 @@ void UnxFilePicker::initFilePicker()
         }
 #endif
 
-        // FIXME: window id, etc.
+        // The executable name
         const char *pFname = "kdefilepicker";
 
-        execlp( pFname, pFname, NULL );
+        // ID of the main window
+        const int nIdLen = 20;
+        char pWinId[nIdLen] = "0";
+
+        // TODO pass here the real parent (not possible for system dialogs
+        // yet), and default to GetDefDialogParent() only when the real parent
+        // is NULL
+        Window *pParentWin = Application::GetDefDialogParent();
+        if ( pParentWin )
+        {
+            const SystemEnvData* pSysData = ((SystemWindow *)pParentWin)->GetSystemData();
+            if ( pSysData )
+            {
+                snprintf( pWinId, nIdLen, "%ld", pSysData->aWindow ); // unx only
+                pWinId[nIdLen-1] = 0;
+            }
+        }
+
+        // Execute the fpicker implementation
+        execlp( pFname, pFname, "--winid", pWinId, NULL );
 
         // Error, finish the child
         exit( -1 );
