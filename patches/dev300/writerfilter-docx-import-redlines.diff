diff --git writerfilter/source/dmapper/DomainMapper.cxx writerfilter/source/dmapper/DomainMapper.cxx
index 6129cee..97d0446 100644
--- writerfilter/source/dmapper/DomainMapper.cxx
+++ writerfilter/source/dmapper/DomainMapper.cxx
@@ -176,6 +176,10 @@ DomainMapper::~DomainMapper()
             uno::Reference< document::XEventBroadcaster > xBroadcaster(xIndexesSupplier, uno::UNO_QUERY);
             xBroadcaster->addEventListener(uno::Reference< document::XEventListener >(new ModelEventListener));
         }
+
+
+        // Apply the document settings after everything else
+        m_pImpl->GetSettingsTable()->ApplyProperties( m_pImpl->GetTextDocument( ) );
     }
     catch( const uno::Exception& rEx )
     {
@@ -2089,7 +2093,7 @@ void DomainMapper::attribute(Id nName, Value & val)
         break;
         case NS_ooxml::LN_CT_Markup_id:
             /* WRITERFILTERSTATUS: done: 100, planned: 0.5, spent: 0 */
-            m_pImpl->SetCurrentRedlineId( sStringValue );
+            m_pImpl->SetCurrentRedlineId( nIntValue );
         break;
         case NS_ooxml::LN_token:
             /* WRITERFILTERSTATUS: done: 100, planned: 0.5, spent: 0 */
@@ -2143,6 +2147,9 @@ void DomainMapper::attribute(Id nName, Value & val)
         case NS_ooxml::LN_CT_Color_themeShade:
             //unsupported
         break;
+    case NS_ooxml::LN_endtrackchange:
+        m_pImpl->RemoveCurrentRedline( );
+    break;
         default:
             {
 #if OSL_DEBUG_LEVEL > 0
@@ -4032,16 +4039,16 @@ void DomainMapper::sprm( Sprm& rSprm, PropertyMapPtr rContext, SprmType eSprmTyp
         }
     }
     break;
+    case NS_ooxml::LN_paratrackchange:
+        m_pImpl->StartParaChange( );
     case NS_ooxml::LN_trackchange:
         /* WRITERFILTERSTATUS: done: 100, planned: 5, spent: 0 */
     case NS_ooxml::LN_EG_RPrContent_rPrChange:
         /* WRITERFILTERSTATUS: done: 100, planned: 5, spent: 0 */
     {
+        m_pImpl->AddNewRedline( );
         resolveSprmProps( rSprm );
         // now the properties author, date and id should be available
-        ::rtl::OUString sAuthor = m_pImpl->GetCurrentRedlineAuthor();
-        ::rtl::OUString sDate = m_pImpl->GetCurrentRedlineDate();
-        ::rtl::OUString sId = m_pImpl->GetCurrentRedlineId();
         sal_Int32 nToken = m_pImpl->GetCurrentRedlineToken();
         switch( nToken & 0xffff )
         {
@@ -4050,6 +4057,7 @@ void DomainMapper::sprm( Sprm& rSprm, PropertyMapPtr rContext, SprmType eSprmTyp
             case ooxml::OOXML_del : break;
             default: OSL_ENSURE( false, "redline token other than mod, ins or del" );
         }
+        m_pImpl->EndParaChange( );
     }
     break;
     case NS_ooxml::LN_CT_RPrChange_rPr:
@@ -4500,6 +4508,9 @@ void DomainMapper::table(Id name, writerfilter::Reference<Table>::Pointer_t ref)
     case NS_ooxml::LN_THEMETABLE:
         ref->resolve ( *m_pImpl->GetThemeTable() );
     break;
+    case NS_ooxml::LN_SETTINGS:
+        ref->resolve( *m_pImpl->GetSettingsTable( ) );
+    break;
     default:
         OSL_ENSURE( false, "which table is to be filled here?");
     }
diff --git writerfilter/source/dmapper/DomainMapper_Impl.cxx writerfilter/source/dmapper/DomainMapper_Impl.cxx
index ee73b1f..6812db4 100644
--- writerfilter/source/dmapper/DomainMapper_Impl.cxx
+++ writerfilter/source/dmapper/DomainMapper_Impl.cxx
@@ -75,7 +75,6 @@
 #endif
 #include <ooxml/OOXMLFastTokens.hxx>
 
-
 #include <map>
 
 using namespace ::com::sun::star;
@@ -401,7 +400,7 @@ DomainMapper_Impl::DomainMapper_Impl(
         m_bLineNumberingSet( false ),
         m_bIsInFootnoteProperties( true ),
         m_bIsCustomFtnMark( false ),
-        n_CurrentRedlineToken( ooxml::OOXML_mod )
+        m_bIsParaChange( false )
 {
     GetBodyText();
     uno::Reference< text::XTextAppend > xBodyTextAppend = uno::Reference< text::XTextAppend >( m_xBodyText, uno::UNO_QUERY );
@@ -728,10 +727,10 @@ void DomainMapper_Impl::deferBreak( BreakType deferredBreakType)
     switch (deferredBreakType)
     {
     case COLUMN_BREAK:
-        m_bIsColumnBreakDeferred = true;
+            m_bIsColumnBreakDeferred = true;
         break;
     case PAGE_BREAK:
-        m_bIsPageBreakDeferred = true;
+            m_bIsPageBreakDeferred = true;
         break;
     default:
         return;
@@ -1048,10 +1047,13 @@ void DomainMapper_Impl::finishParagraph( PropertyMapPtr pPropertyMap )
                 uno::Reference< text::XTextRange > xTextRange =
                     xTextAppend->finishParagraph( aProperties );
                 m_TableManager.handle(xTextRange);
-            }
-            else
-            {
-
+    
+                // Get the end of paragraph character inserted
+                uno::Reference< text::XTextCursor > xCur = xTextRange->getText( )->createTextCursor( );
+                xCur->gotoEnd( false );
+                xCur->goLeft( 1 , true );
+                uno::Reference< text::XTextRange > xParaEnd( xCur, uno::UNO_QUERY );
+                CheckParaRedline( xParaEnd );
             }
             if( !bKeepLastParagraphProperties )
                 rAppendContext.pLastParagraphProperties = pToBeSavedProperties;
@@ -1102,35 +1104,7 @@ void DomainMapper_Impl::appendTextPortion( const ::rtl::OUString& rString, Prope
             uno::Reference< text::XTextRange > xTextRange =
                 xTextAppend->appendTextPortion
                 (rString, pPropertyMap->GetPropertyValues());
-            if( m_CurrentRedlineDate.getLength() )
-            {
-                try
-                {
-                    ::rtl::OUString sType;
-                    PropertyNameSupplier& rPropNameSupplier = PropertyNameSupplier::GetPropertyNameSupplier();
-                    switch(n_CurrentRedlineToken & 0xffff)
-                    {
-                        case ooxml::OOXML_mod : sType = rPropNameSupplier.GetName( PROP_FORMAT ); break;
-                        case ooxml::OOXML_ins : sType = rPropNameSupplier.GetName( PROP_INSERT ); break;
-                        case ooxml::OOXML_del : sType = rPropNameSupplier.GetName( PROP_DELETE ); break;
-                    }
-                    uno::Reference< text::XRedline > xRedline( xTextRange, uno::UNO_QUERY_THROW );
-                    beans::PropertyValues aRedlineProperties( 2 );
-                    beans::PropertyValue* pRedlineProperties = aRedlineProperties.getArray();
-                    pRedlineProperties[0].Name = rPropNameSupplier.GetName( PROP_REDLINE_AUTHOR );
-                    pRedlineProperties[0].Value <<= m_CurrentRedlineAuthor;
-                    pRedlineProperties[1].Name = rPropNameSupplier.GetName( PROP_REDLINE_DATE_TIME );
-                    pRedlineProperties[1].Value <<= lcl_DateStringToDateTime( m_CurrentRedlineDate );
-                    xRedline->makeRedline( sType, aRedlineProperties);
-
-                }
-                catch( const uno::Exception& rEx )
-                {
-                    (void)rEx;
-                    OSL_ENSURE( false, "Exception in makeRedline" );
-                }
-                ResetRedlineProperties();
-            }
+            CheckRedline( xTextRange );
 
             //m_TableManager.handle(xTextRange);
         }
@@ -1371,9 +1345,11 @@ void DomainMapper_Impl::PushFootOrEndnote( bool bIsFootnote )
             aFontProps->Insert(PROP_CHAR_FONT_NAME, true, uno::makeAny( pTopContext->GetFootnoteFontName()  ));
             aFontProperties = aFontProps->GetPropertyValues();
         }
-
         appendTextContent( uno::Reference< text::XTextContent >( xFootnoteText, uno::UNO_QUERY_THROW ), aFontProperties );
         m_aTextAppendStack.push(uno::Reference< text::XTextAppend >( xFootnoteText, uno::UNO_QUERY_THROW ));
+
+        // Redlines for the footnote anchor
+        CheckRedline( xFootnote->getAnchor( ) );
     }
     catch( uno::Exception& )
     {
@@ -1381,6 +1357,87 @@ void DomainMapper_Impl::PushFootOrEndnote( bool bIsFootnote )
     }
 }
 
+void DomainMapper_Impl::CreateRedline( uno::Reference< text::XTextRange > xRange, RedlineParamsPtr& pRedline )
+{
+    if ( pRedline.get( ) )
+    {
+#if DEBUG
+        clog << "REDLINE: Writing redline: " << pRedline->m_nId << endl;
+#endif
+        try
+        {
+            ::rtl::OUString sType;
+            PropertyNameSupplier & rPropNameSupplier = PropertyNameSupplier::GetPropertyNameSupplier(  );
+            switch ( pRedline->m_nToken & 0xffff )
+            {
+            case ooxml::OOXML_mod:
+                sType = rPropNameSupplier.GetName( PROP_FORMAT );
+                break;
+            case ooxml::OOXML_ins:
+                sType = rPropNameSupplier.GetName( PROP_INSERT );
+                break;
+            case ooxml::OOXML_del:
+                sType = rPropNameSupplier.GetName( PROP_DELETE );
+                break;
+            }
+            uno::Reference < text::XRedline > xRedline( xRange, uno::UNO_QUERY_THROW );
+            beans::PropertyValues aRedlineProperties( 2 );
+            beans::PropertyValue * pRedlineProperties = aRedlineProperties.getArray(  );
+            pRedlineProperties[0].Name = rPropNameSupplier.GetName( PROP_REDLINE_AUTHOR );
+            pRedlineProperties[0].Value <<= pRedline->m_sAuthor;
+            pRedlineProperties[1].Name = rPropNameSupplier.GetName( PROP_REDLINE_DATE_TIME );
+            pRedlineProperties[1].Value <<= lcl_DateStringToDateTime( pRedline->m_sDate );
+            
+            xRedline->makeRedline( sType, aRedlineProperties );
+        }
+        catch( const uno::Exception & rEx )
+        {
+#if DEBUG
+            clog << "REDLINE: error - " << rtl::OUStringToOString( rEx.Message, RTL_TEXTENCODING_UTF8 ).getStr( ) << endl;
+#endif
+            ( void ) rEx;
+            OSL_ENSURE( false, "Exception in makeRedline" );
+        }
+    }
+}
+
+void DomainMapper_Impl::CheckParaRedline( uno::Reference< text::XTextRange > xRange )
+{
+    if ( m_pParaRedline.get( ) )
+    {
+        CreateRedline( xRange, m_pParaRedline );
+        ResetParaRedline( ); 
+    }
+}
+
+void DomainMapper_Impl::CheckRedline( uno::Reference< text::XTextRange > xRange )
+{
+    vector<RedlineParamsPtr>::iterator pIt = m_aRedlines.begin( );
+    vector< RedlineParamsPtr > aCleaned;
+    for (; pIt != m_aRedlines.end( ); pIt++ )
+    {
+        CreateRedline( xRange, *pIt );
+        
+        // Adding the non-mod redlines to the temporary vector
+        if ( pIt->get( ) && ( ( *pIt )->m_nToken & 0xffff ) != ooxml::OOXML_mod ) 
+        {
+            aCleaned.push_back( *pIt );
+        }
+    }
+
+    m_aRedlines.swap( aCleaned );
+}
+
+void DomainMapper_Impl::StartParaChange( )
+{
+    m_bIsParaChange = true;
+}
+
+void DomainMapper_Impl::EndParaChange( )
+{
+    m_bIsParaChange = false;
+}
+
 /*-- 22.12.2008 13:45:15---------------------------------------------------
 
   -----------------------------------------------------------------------*/
@@ -3535,14 +3592,98 @@ bool DomainMapper_Impl::ExecuteFrameConversion()
     }
     return bRet;
 }
+
+void DomainMapper_Impl::AddNewRedline(  )
+{
+    RedlineParamsPtr pNew( new RedlineParams );
+    pNew->m_nToken = ooxml::OOXML_mod;
+    if ( !m_bIsParaChange ) 
+    {
+#if DEBUG
+    clog << "REDLINE: Adding a new redline to stack" << endl;
+#endif
+        m_aRedlines.push_back( pNew );
+    }
+    else
+    {
+#if DEBUG
+    clog << "REDLINE: Setting a new paragraph redline" << endl;
+#endif
+        m_pParaRedline.swap( pNew );
+    }
+}
+
+RedlineParamsPtr DomainMapper_Impl::GetTopRedline(  )
+{
+    RedlineParamsPtr pResult;
+    if ( !m_bIsParaChange && m_aRedlines.size(  ) > 0 )
+        pResult = m_aRedlines.back(  );
+    else if ( m_bIsParaChange )
+        pResult = m_pParaRedline;
+    return pResult;
+}
+
+sal_Int32 DomainMapper_Impl::GetCurrentRedlineToken(  )
+{
+    sal_Int32 nToken;
+    RedlineParamsPtr pCurrent( GetTopRedline(  ) );
+    if ( pCurrent.get(  ) )
+        nToken = pCurrent->m_nToken;
+    return nToken;
+}
+
+void DomainMapper_Impl::SetCurrentRedlineAuthor( rtl::OUString sAuthor )
+{
+    RedlineParamsPtr pCurrent( GetTopRedline(  ) );
+    if ( pCurrent.get(  ) )
+        pCurrent->m_sAuthor = sAuthor;
+}
+
+void DomainMapper_Impl::SetCurrentRedlineDate( rtl::OUString sDate )
+{
+    RedlineParamsPtr pCurrent( GetTopRedline(  ) );
+    if ( pCurrent.get(  ) )
+        pCurrent->m_sDate = sDate;
+}
+
+void DomainMapper_Impl::SetCurrentRedlineId( sal_Int32 sId )
+{
+    RedlineParamsPtr pCurrent( GetTopRedline(  ) );
+    if ( pCurrent.get(  ) )
+        pCurrent->m_nId = sId;
+}
+
+void DomainMapper_Impl::SetCurrentRedlineToken( sal_Int32 nToken )
+{
+    RedlineParamsPtr pCurrent( GetTopRedline(  ) );
+    if ( pCurrent.get(  ) )
+        pCurrent->m_nToken = nToken;
+}
+
 /*-- 19.03.2008 11:35:38---------------------------------------------------
 
   -----------------------------------------------------------------------*/
-void DomainMapper_Impl::ResetRedlineProperties()
+void DomainMapper_Impl::RemoveCurrentRedline( )
 {
-    m_CurrentRedlineAuthor = m_CurrentRedlineDate = m_CurrentRedlineId = ::rtl::OUString();
-    n_CurrentRedlineToken = ooxml::OOXML_mod;
+    if ( m_aRedlines.size( ) > 0 )
+    {
+#if DEBUG
+        clog << "REDLINE: Removing back redline" << endl;
+#endif
+        m_aRedlines.pop_back( );
+    }
 }
 
+void DomainMapper_Impl::ResetParaRedline( )
+{
+    if ( m_pParaRedline.get( ) )
+    {
+#if DEBUG
+        clog << "REDLINE: Cleaning the para redline" << endl;
+#endif
+        RedlineParamsPtr pEmpty;
+        m_pParaRedline.swap( pEmpty );
+    }
+}
 
 }}
diff --git writerfilter/source/dmapper/DomainMapper_Impl.hxx writerfilter/source/dmapper/DomainMapper_Impl.hxx
index f4dfaf0..1a9ad4d 100644
--- writerfilter/source/dmapper/DomainMapper_Impl.hxx
+++ writerfilter/source/dmapper/DomainMapper_Impl.hxx
@@ -51,6 +51,7 @@
 #include <LFOTable.hxx>
 #include <StyleSheetTable.hxx>
 #include <ThemeTable.hxx>
+#include <SettingsTable.hxx>
 #include <GraphicImport.hxx>
 #include <OLEHandler.hxx>
 #include <map>
@@ -225,6 +226,15 @@ struct BookmarkInsertPosition
      {}
 };
 
+struct RedlineParams
+{
+    ::rtl::OUString m_sAuthor;
+    ::rtl::OUString m_sDate;
+    sal_Int32       m_nId;
+    sal_Int32       m_nToken;
+};
+typedef boost::shared_ptr< RedlineParams > RedlineParamsPtr;
+
 /*-- 03.03.2008 11:01:38---------------------------------------------------
 
   -----------------------------------------------------------------------*/
@@ -293,6 +303,7 @@ private:
     StyleSheetTablePtr      m_pStyleSheetTable;
     ThemeTablePtr           m_pThemeTable;
     GraphicImportPtr        m_pGraphicImport;
+    SettingsTablePtr        m_pSettingsTable;
 
     PropertyMapPtr                  m_pTopContext;
 
@@ -311,11 +322,11 @@ private:
     ::com::sun::star::uno::Reference< text::XTextRange >      m_xFrameStartRange;
     ::com::sun::star::uno::Reference< text::XTextRange >      m_xFrameEndRange;
 
-    //current redline
-    ::rtl::OUString                 m_CurrentRedlineAuthor;
-    ::rtl::OUString                 m_CurrentRedlineDate;
-    ::rtl::OUString                 m_CurrentRedlineId;
-    sal_Int32                       n_CurrentRedlineToken;
+    // Redline stack
+    std::vector< RedlineParamsPtr > m_aRedlines;
+    RedlineParamsPtr                m_pParaRedline;
+    bool                            m_bIsParaChange;
+
 
     //shape import
     ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XShape >      m_xTemporaryShape;
@@ -357,6 +368,15 @@ public:
     }
     void SetDocumentSettingsProperty( const ::rtl::OUString& rPropName, const uno::Any& rValue );
 
+    void CreateRedline( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > xRange, RedlineParamsPtr& pRedline  );
+
+    void CheckParaRedline( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > xRange );
+
+    void CheckRedline( ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > xRange );
+
+    void StartParaChange( );
+    void EndParaChange( );
+
     void deferBreak( BreakType deferredBreakType );
     bool isBreakDeferred( BreakType deferredBreakType );
     void clearDeferredBreaks();
@@ -412,6 +432,13 @@ public:
         return m_pThemeTable;
     }
 
+    SettingsTablePtr GetSettingsTable( )
+    {
+        if ( !m_pSettingsTable )
+            m_pSettingsTable.reset( new SettingsTable );
+        return m_pSettingsTable;
+    }
+
     GraphicImportPtr GetGraphicImport( GraphicImportType eGraphicImportType );
     void            ResetGraphicImport();
     // this method deletes the current m_pGraphicImport after import
@@ -495,19 +522,17 @@ public:
         );
     bool ExecuteFrameConversion();
 
-    ::rtl::OUString  GetCurrentRedlineAuthor() const { return m_CurrentRedlineAuthor; }
-    void SetCurrentRedlineAuthor( const ::rtl::OUString& rSet ) { m_CurrentRedlineAuthor = rSet; }
-
-    ::rtl::OUString  GetCurrentRedlineDate() const   { return m_CurrentRedlineDate;   }
-    void SetCurrentRedlineDate( const ::rtl::OUString& rSet )    { m_CurrentRedlineDate = rSet;   }
-
-    ::rtl::OUString  GetCurrentRedlineId() const     { return m_CurrentRedlineId;     }
-    void SetCurrentRedlineId( const ::rtl::OUString& rSet ) { m_CurrentRedlineId = rSet;     }
+    void AddNewRedline( );
 
-    sal_Int32        GetCurrentRedlineToken() const  { return n_CurrentRedlineToken;  }
-    void SetCurrentRedlineToken(sal_Int32 nSet) { n_CurrentRedlineToken = nSet;  }
+    RedlineParamsPtr GetTopRedline( );
 
-    void ResetRedlineProperties();
+    sal_Int32 GetCurrentRedlineToken( ); 
+    void SetCurrentRedlineAuthor( rtl::OUString sAuthor );
+    void SetCurrentRedlineDate( rtl::OUString sDate );
+    void SetCurrentRedlineId( sal_Int32 nId );
+    void SetCurrentRedlineToken( sal_Int32 nToken );
+    void RemoveCurrentRedline( );
+    void ResetParaRedline( );
 
 };
 } //namespace dmapper
diff --git writerfilter/source/dmapper/SettingsTable.cxx writerfilter/source/dmapper/SettingsTable.cxx
new file mode 100644
index 0000000..fc1fb34
--- /dev/null
+++ writerfilter/source/dmapper/SettingsTable.cxx
@@ -0,0 +1,85 @@
+#include "SettingsTable.hxx"
+
+#include <ooxml/resourceids.hxx>
+
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+
+#if DEBUG
+#include <iostream>
+#endif
+
+using namespace com::sun::star;
+using namespace rtl;
+
+namespace writerfilter {
+namespace dmapper {
+
+SettingsTable_Impl::SettingsTable_Impl( ) 
+{
+}
+
+SettingsTable_Impl::~SettingsTable_Impl( ) 
+{
+}
+
+SettingsTable::SettingsTable( ) :
+    m_pImpl( new SettingsTable_Impl )
+{
+}
+
+SettingsTable::~SettingsTable( )
+{
+    delete m_pImpl, m_pImpl = NULL;
+}
+
+void SettingsTable::attribute( Id nName, Value& rVal )
+{
+#if DEBUG
+    clog << "SettingsTable::attribute( )" << endl;
+#endif
+}
+
+void SettingsTable::sprm( Sprm& rSprm )
+{
+    switch ( rSprm.getId( ) )
+    {
+        case NS_ooxml::LN_CT_Settings_trackRevisions:
+            {
+                m_pImpl->m_bRecordChanges = bool(rSprm.getValue( )->getInt( ) );
+            }
+            break;
+        default:
+            {
+#if DEBUG
+                clog << __FILE__ << ":" << __LINE__;
+                clog << ": unknown SPRM: " << rSprm.getName( ) << endl;
+#endif
+            }
+    }
+}
+
+void SettingsTable::entry( int nPos, writerfilter::Reference<Properties>::Pointer_t pRef )
+{
+#if DEBUG
+    clog << "SettingsTable::entry( ), pos: " << nPos << endl;
+#endif
+    pRef->resolve( *this );
+}
+
+void SettingsTable::resolveSprmProps( Sprm& rSprm )
+{
+    writerfilter::Reference<Properties>::Pointer_t pProperties = rSprm.getProps();
+    if( pProperties.get())
+        pProperties->resolve(*this);
+}
+    
+void SettingsTable::ApplyProperties( uno::Reference< text::XTextDocument > xDoc )
+{
+    uno::Reference< beans::XPropertySet> xDocProps( xDoc, uno::UNO_QUERY );
+
+    // Record changes value
+    xDocProps->setPropertyValue( OUString::createFromAscii( "RecordChanges" ), uno::makeAny( m_pImpl->m_bRecordChanges ) );
+}
+
+} }
diff --git writerfilter/source/dmapper/SettingsTable.hxx writerfilter/source/dmapper/SettingsTable.hxx
new file mode 100644
index 0000000..6a5e8b9
--- /dev/null
+++ writerfilter/source/dmapper/SettingsTable.hxx
@@ -0,0 +1,47 @@
+#ifndef INCLUDED_SETTINGSTABLE_HXX
+#define INCLUDED_SETTINGSTABLE_HXX
+
+#include <WriterFilterDllApi.hxx>
+#include <resourcemodel/WW8ResourceModel.hxx>
+
+#include <com/sun/star/text/XTextDocument.hpp>
+
+namespace writerfilter {
+namespace dmapper
+{
+using namespace std;
+
+struct SettingsTable_Impl
+{
+public:
+    bool m_bRecordChanges;
+
+    SettingsTable_Impl( );
+    ~SettingsTable_Impl( );
+};
+
+class WRITERFILTER_DLLPRIVATE SettingsTable: public Properties, public Table
+{
+public:
+    SettingsTable_Impl* m_pImpl;
+
+    SettingsTable( );
+    ~SettingsTable( );
+    
+    // Properties
+    virtual void attribute(Id Name, Value & val);
+    virtual void sprm(Sprm & sprm);
+
+    // Table
+    virtual void entry(int pos, writerfilter::Reference<Properties>::Pointer_t ref);
+
+    void resolveSprmProps( Sprm& rSprm );
+
+    void ApplyProperties( com::sun::star::uno::Reference< com::sun::star::text::XTextDocument > xDoc );
+};
+typedef boost::shared_ptr< SettingsTable > SettingsTablePtr;
+
+
+} }
+
+#endif
diff --git writerfilter/source/dmapper/makefile.mk writerfilter/source/dmapper/makefile.mk
index c1fcc36..e7235cc 100644
--- writerfilter/source/dmapper/makefile.mk
+++ writerfilter/source/dmapper/makefile.mk
@@ -63,7 +63,8 @@ SLOFILES=           $(SLO)$/BorderHandler.obj \
                     $(SLO)$/PropertyIds.obj  \
                     $(SLO)$/StyleSheetTable.obj \
                     $(SLO)$/TDefTableHandler.obj \
-		    $(SLO)$/ThemeTable.obj \
+                    $(SLO)$/ThemeTable.obj \
+                    $(SLO)$/SettingsTable.obj \
                     $(SLO)$/ModelEventListener.obj\
                     $(SLO)$/OLEHandler.obj
 
diff --git writerfilter/source/ooxml/model.xml writerfilter/source/ooxml/model.xml
index 399755a..b6ab5a7 100644
--- writerfilter/source/ooxml/model.xml
+++ writerfilter/source/ooxml/model.xml
@@ -16575,15 +16575,18 @@
           </element>
         </optional>
       </define>
+      <define name="CT_ParaTrackChange">
+        <ref name="CT_TrackChange"/>
+      </define>
       <define name="EG_ParaRPrTrackChanges">
         <optional>
           <element name="ins">
-            <ref name="CT_TrackChange"/>
+            <ref name="CT_ParaTrackChange"/>
           </element>
         </optional>
         <optional>
           <element name="del">
-            <ref name="CT_TrackChange"/>
+            <ref name="CT_ParaTrackChange"/>
           </element>
         </optional>
         <optional>
@@ -21638,6 +21641,11 @@
       <attribute name="author" tokenid="ooxml:CT_TrackChange_author"/>
       <attribute name="date" tokenid="ooxml:CT_TrackChange_date"/>
     </resource>
+    <resource name="CT_ParaTrackChange" resource="Properties">
+      <action name="start" action="tokenproperty"/>
+      <action name="start" action="propagateCharacterPropertiesAsSet" sendtokenid="ooxml:paratrackchange"/>
+      <action name="start" action="clearProps"/>
+    </resource>
     <resource name="CT_CellMergeTrackChange" resource="Properties">
       <attribute name="vMerge" tokenid="ooxml:CT_CellMergeTrackChange_vMerge"/>
       <attribute name="vMergeOrig" tokenid="ooxml:CT_CellMergeTrackChange_vMergeOrig"/>
@@ -21702,6 +21710,7 @@
       <action name="start" action="tokenproperty"/>
       <action name="start" action="propagateCharacterPropertiesAsSet" sendtokenid="ooxml:trackchange"/>
       <action name="start" action="clearProps"/>
+      <action name="end" action="mark" sendtokenid="ooxml:endtrackchange"/>
     </resource>
     <resource name="CT_NumPr" resource="Properties">
       <kind name="paragraph"/>
@@ -22272,6 +22281,8 @@
     <resource name="CT_RPrOriginal" resource="Properties"/>
     <resource name="CT_ParaRPrOriginal" resource="Properties"/>
     <resource name="CT_ParaRPr" resource="Properties">
+      <element name="ins" tokenid="ooxml:CT_ParaRPr_ins"/>
+      <element name="del" tokenid="ooxml:CT_ParaRPr_del"/>
       <element name="rPrChange" tokenid="ooxml:CT_ParaRPr_rPrChange"/>
     </resource>
     <resource name="ST_RubyAlign" resource="List" generated="yes">
