diff --git extensions/source/propctrlr/formcomponenthandler.cxx extensions/source/propctrlr/formcomponenthandler.cxx
index e8ef25c..3665d96 100644
--- extensions/source/propctrlr/formcomponenthandler.cxx
+++ extensions/source/propctrlr/formcomponenthandler.cxx
@@ -80,6 +80,7 @@
 #include <com/sun/star/inspection/PropertyLineElement.hpp>
 #include <com/sun/star/resource/XStringResourceManager.hpp>
 #include <com/sun/star/resource/MissingResourceException.hpp>
+#include <com/sun/star/graphic/GraphicObject.hpp>
 /** === end UNO includes === **/
 #include <connectivity/dbexception.hxx>
 #include <vcl/wrkwin.hxx>
@@ -116,6 +117,7 @@
 
 #include <limits>
 
+#define GRAPHOBJ_URLPREFIX "vnd.sun.star.GraphicObject:"
 //------------------------------------------------------------------------
 extern "C" void SAL_CALL createRegistryInfo_FormComponentPropertyHandler()
 {
@@ -336,7 +338,15 @@ namespace pcr
         ::osl::MutexGuard aGuard( m_aMutex );
         PropertyId nPropId( impl_getPropertyId_throw( _rPropertyName ) ); // check if property is known by the handler
 
-        if ( PROPERTY_ID_FONT_NAME == nPropId )
+        Reference< graphic::XGraphicObject > xGrfObj;
+        if ( PROPERTY_ID_IMAGE_URL == nPropId && ( _rValue >>= xGrfObj ) )
+        {
+            DBG_ASSERT( xGrfObj.is(), "FormComponentPropertyHandler::setPropertyValue() xGrfObj is invalid");
+            rtl::OUString sObjectID( RTL_CONSTASCII_USTRINGPARAM( GRAPHOBJ_URLPREFIX ) );
+            sObjectID = sObjectID + xGrfObj->getUniqueID();
+            m_xComponent->setPropertyValue( _rPropertyName, uno::makeAny( sObjectID ) );
+        }
+        else if ( PROPERTY_ID_FONT_NAME == nPropId )
         {
             // special handling, the value is a faked value we generated ourself in impl_executeFontDialog_nothrow
             Sequence< NamedValue > aFontPropertyValues;
@@ -561,9 +571,14 @@ namespace pcr
         {
             ::rtl::OUString sControlValue;
             OSL_VERIFY( _rControlValue >>= sControlValue );
-
-            INetURLObject aDocURL( impl_getDocumentURL_nothrow() );
-            aPropertyValue <<= (::rtl::OUString)URIHelper::SmartRel2Abs( aDocURL, sControlValue, Link(), false, true, INetURLObject::WAS_ENCODED, INetURLObject::DECODE_TO_IURI );
+            // Don't convert a placeholder
+            if ( nPropId == PROPERTY_ID_IMAGE_URL && sControlValue.equals( String( PcrRes( RID_EMBED_IMAGE_PLACEHOLDER ) ) ) )
+                aPropertyValue <<= sControlValue;
+            else
+            {
+                INetURLObject aDocURL( impl_getDocumentURL_nothrow() );
+                aPropertyValue <<= (::rtl::OUString)URIHelper::SmartRel2Abs( aDocURL, sControlValue, Link(), false, true, INetURLObject::WAS_ENCODED, INetURLObject::DECODE_TO_IURI );
+            }
         }
         break;
 
@@ -2658,12 +2673,16 @@ namespace pcr
     //------------------------------------------------------------------------
     bool FormComponentPropertyHandler::impl_browseForImage_nothrow( Any& _out_rNewValue, ::osl::ClearableMutexGuard& _rClearBeforeDialog ) const
     {
+        bool bIsLink = true;// reflect the legacy behavior
         ::rtl::OUString aStrTrans = m_pInfoService->getPropertyTranslation( PROPERTY_ID_IMAGE_URL );
 
         ::sfx2::FileDialogHelper aFileDlg(SFXWB_GRAPHIC);
 
         aFileDlg.SetTitle(aStrTrans);
-
+        // non-linked images ( e.g. those located in the document 
+        // stream ) cannot *currently* be handled by openoffice basic dialogs. 
+        bool bHandleNonLink = ( m_eComponentClass == eFormControl );
+        
         Reference< XFilePickerControlAccess > xController(aFileDlg.GetFilePicker(), UNO_QUERY);
         DBG_ASSERT(xController.is(), "FormComponentPropertyHandler::impl_browseForImage_nothrow: missing the controller interface on the file picker!");
         if (xController.is())
@@ -2671,14 +2690,14 @@ namespace pcr
             // do a preview by default
             xController->setValue(ExtendedFilePickerElementIds::CHECKBOX_PREVIEW, 0, ::cppu::bool2any(sal_True));
 
-            // "as link" is checked, but disabled
-            xController->setValue(ExtendedFilePickerElementIds::CHECKBOX_LINK, 0, ::cppu::bool2any(sal_True));
-            xController->enableControl(ExtendedFilePickerElementIds::CHECKBOX_LINK, sal_False);
+            xController->setValue(ExtendedFilePickerElementIds::CHECKBOX_LINK, 0, ::cppu::bool2any(bIsLink));
+            xController->enableControl(ExtendedFilePickerElementIds::CHECKBOX_LINK, bHandleNonLink );
+
         }
 
         ::rtl::OUString sCurValue;
         OSL_VERIFY( impl_getPropertyValue_throw( PROPERTY_IMAGE_URL ) >>= sCurValue );
-        if ( sCurValue.getLength() != 0 )
+        if ( sCurValue.getLength() != 0 && sCurValue.compareToAscii(GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH(GRAPHOBJ_URLPREFIX) ) != 0 )
         {
             aFileDlg.SetDisplayDirectory( sCurValue );
             // TODO: need to set the display directory _and_ the default name
@@ -2687,7 +2706,26 @@ namespace pcr
         _rClearBeforeDialog.clear();
         bool bSuccess = ( 0 == aFileDlg.Execute() );
         if ( bSuccess )
-            _out_rNewValue <<= (::rtl::OUString)aFileDlg.GetPath();
+        {
+            if ( bHandleNonLink && xController.is() )
+            {
+                xController->getValue(ExtendedFilePickerElementIds::CHECKBOX_LINK, 0) >>= bIsLink;
+            }
+            if ( !bIsLink )
+            {
+                Graphic aGraphic;
+                aFileDlg.GetGraphic( aGraphic );
+                
+                Reference< graphic::XGraphicObject > xGrfObj = graphic::GraphicObject::create( m_aContext.getUNOContext() );
+                xGrfObj->setGraphic( aGraphic.GetXGraphic() ); 
+                
+                
+                _out_rNewValue <<= xGrfObj;
+                 
+            }
+            else
+                _out_rNewValue <<= (::rtl::OUString)aFileDlg.GetPath();
+        }
         return bSuccess;
     }
 
diff --git extensions/source/propctrlr/propcontroller.cxx extensions/source/propctrlr/propcontroller.cxx
index 80c07a6..959177f 100644
--- extensions/source/propctrlr/propcontroller.cxx
+++ extensions/source/propctrlr/propcontroller.cxx
@@ -1384,6 +1384,18 @@ namespace pcr
 	{
 		try
 		{
+            rtl::OUString sPlcHolder = String( PcrRes( RID_EMBED_IMAGE_PLACEHOLDER ) );
+            bool bIsPlaceHolderValue = false;
+
+            if ( rName.equals( PROPERTY_IMAGE_URL ) )
+            {
+                // if the prop value is the PlaceHolder 
+                // can ignore it
+                rtl::OUString sVal;
+                _rValue >>= sVal;
+                if ( sVal.equals( sPlcHolder ) )
+                    bIsPlaceHolderValue = true;
+            }
             m_sCommittingProperty = rName;
 
             bool bIsActuatingProperty = impl_isActuatingProperty_nothrow( rName );
@@ -1396,8 +1408,9 @@ namespace pcr
             PropertyHandlerRef handler = impl_getHandlerForProperty_throw( rName );
 
 			//////////////////////////////////////////////////////////////////////
-			// set the value
-            handler->setPropertyValue( rName, _rValue );
+			// set the value ( only if it's not a placeholder )
+            if ( !bIsPlaceHolderValue )
+                handler->setPropertyValue( rName, _rValue );
 
 			//////////////////////////////////////////////////////////////////////
             // re-retrieve the value
diff --git extensions/source/propctrlr/propres.src extensions/source/propctrlr/propres.src
index 5857d25..59a0ce6 100644
--- extensions/source/propctrlr/propres.src
+++ extensions/source/propctrlr/propres.src
@@ -52,3 +52,7 @@ String RID_STR_HELP_SECTION_LABEL
 {
 	Text [ en-US ] = "Help";
 };
+String RID_EMBED_IMAGE_PLACEHOLDER
+{
+	Text [ en-US ] = "<Embedded-Image>";
+};
diff --git extensions/source/propctrlr/propresid.hrc extensions/source/propctrlr/propresid.hrc
index a854df7..e6cf56f 100644
--- extensions/source/propctrlr/propresid.hrc
+++ extensions/source/propctrlr/propresid.hrc
@@ -46,5 +46,6 @@
 #define RID_STR_PROPPAGE_DATA				( RID_PROPCONTROLLER_START +  2 )
 #define RID_STR_BOOL						( RID_PROPCONTROLLER_START +  3 )
 #define RID_STR_HELP_SECTION_LABEL          ( RID_PROPCONTROLLER_START +  4 )
+#define RID_EMBED_IMAGE_PLACEHOLDER          ( RID_PROPCONTROLLER_START +  5 )
 
 #endif // EXTENSIONS_PROPRESID_HRC
diff --git extensions/source/propctrlr/usercontrol.cxx extensions/source/propctrlr/usercontrol.cxx
index a9db7bd..69404a0 100644
--- extensions/source/propctrlr/usercontrol.cxx
+++ extensions/source/propctrlr/usercontrol.cxx
@@ -42,7 +42,8 @@
 #include <svtools/zformat.hxx>
 #include <connectivity/dbconversion.hxx>
 #include <com/sun/star/util/Time.hpp>
-
+#include "modulepcr.hxx"
+#include "propresid.hrc"
 //............................................................................
 namespace pcr
 {
@@ -271,6 +272,7 @@ namespace pcr
         :OFileUrlControl_Base( PropertyControlType::Unknown, pParent, nWinStyle | WB_DROPDOWN )
     {
         getTypedControlWindow()->SetDropDownLineCount( 10 );
+        getTypedControlWindow()->SetPlaceHolder( String( PcrRes( RID_EMBED_IMAGE_PLACEHOLDER ) ) ) ;
     }
 
 	//------------------------------------------------------------------
@@ -282,8 +284,13 @@ namespace pcr
 	void SAL_CALL OFileUrlControl::setValue( const Any& _rValue ) throw (IllegalTypeException, RuntimeException)
     {
         ::rtl::OUString sURL;
-        if ( _rValue >>= sURL )
-            getTypedControlWindow()->DisplayURL( sURL );
+        if ( ( _rValue >>= sURL ) )
+        {
+            if ( sURL.indexOf( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.GraphicObject:"  ) ) ) == 0  )
+                getTypedControlWindow()->DisplayURL( getTypedControlWindow()->GetPlaceHolder() );
+            else
+                getTypedControlWindow()->DisplayURL( sURL );
+        }
         else
             getTypedControlWindow()->SetText( String() );
     }
@@ -293,7 +300,7 @@ namespace pcr
     {
         Any aPropValue;
         if ( getTypedControlWindow()->GetText().Len() )
-            aPropValue <<= (::rtl::OUString)getTypedControlWindow()->GetURL();
+            	aPropValue <<= (::rtl::OUString)getTypedControlWindow()->GetURL();
         return aPropValue;
     }
 
diff --git forms/source/component/ImageControl.cxx forms/source/component/ImageControl.cxx
index 1ba9f90..f864210 100644
--- forms/source/component/ImageControl.cxx
+++ forms/source/component/ImageControl.cxx
@@ -57,6 +57,7 @@
 #include <com/sun/star/io/NotConnectedException.hpp>
 #include <com/sun/star/beans/PropertyValue.hpp>
 #include <com/sun/star/graphic/XGraphic.hpp>
+#include <com/sun/star/graphic/GraphicObject.hpp>
 #include <tools/urlobj.hxx>
 #include <tools/stream.hxx>
 #include <tools/debug.hxx>
@@ -353,9 +354,9 @@ sal_Bool OImageControlModel::handleNewImageURL( const ::rtl::OUString& _rURL, Va
     ::std::auto_ptr< SvStream > pImageStream;
     Reference< XInputStream > xImageStream;
 
-    if ( ::svt::ImageResourceAccess::isImageResourceURL( _rURL ) )
+    if ( ::svt::GraphicAccess::isSupportedURL( _rURL ) )
     {
-        xImageStream = ::svt::ImageResourceAccess::getImageXStream( getORB(), _rURL );
+        xImageStream = ::svt::GraphicAccess::getImageXStream( getORB(), _rURL );
     }
     else
     {
@@ -646,8 +647,18 @@ void OImageControlControl::implInsertGraphics()
 		DBG_ASSERT( xController.is(), "OImageControlControl::implInsertGraphics: invalid file picker!" );
 		if ( xController.is() )
 		{
+			// we can only give the option to choose a non-linked
+			// graphic if this control is not bound to a database
+			// column i.e. if bHasField is false 
+			// In either case, the 'Link' cb will be checked
+			Reference<XPropertySet> xBoundField;
+			if ( hasProperty( PROPERTY_BOUNDFIELD, xSet ) )
+				xSet->getPropertyValue( PROPERTY_BOUNDFIELD ) >>= xBoundField;
+			sal_Bool bHasField = xBoundField.is();
+
 			xController->setValue(ExtendedFilePickerElementIds::CHECKBOX_PREVIEW, 0, ::cppu::bool2any(sal_True));
-			xController->enableControl(ExtendedFilePickerElementIds::CHECKBOX_LINK, sal_False);
+			xController->setValue(ExtendedFilePickerElementIds::CHECKBOX_LINK, 0, ::cppu::bool2any( true ) );
+			xController->enableControl(ExtendedFilePickerElementIds::CHECKBOX_LINK, !bHasField );
 		}
 
 		if ( ERRCODE_NONE == aDialog.Execute() )
@@ -655,8 +666,21 @@ void OImageControlControl::implInsertGraphics()
 			// reset the url property in case it already has the value we're about to set - in this case
 			// our propertyChanged would not get called without this.
 			implClearGraphics( sal_False );
-
-			xSet->setPropertyValue( PROPERTY_IMAGE_URL, makeAny( ::rtl::OUString( aDialog.GetPath() ) ) );
+			sal_Bool bIsLink = sal_False;
+			xController->getValue(ExtendedFilePickerElementIds::CHECKBOX_LINK, 0) >>= bIsLink;
+			if ( !bIsLink )
+			{
+				Graphic aGraphic;
+				aDialog.GetGraphic( aGraphic );
+				                
+				Reference< graphic::XGraphicObject > xGrfObj = graphic::GraphicObject::create( m_aContext.getUNOContext() );
+				xGrfObj->setGraphic( aGraphic.GetXGraphic() );
+				rtl::OUString sObjectID( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.GraphicObject:" ) );
+				sObjectID = sObjectID + xGrfObj->getUniqueID();
+				xSet->setPropertyValue( PROPERTY_IMAGE_URL, makeAny( ::rtl::OUString( sObjectID ) ) );
+			}
+			else
+				xSet->setPropertyValue( PROPERTY_IMAGE_URL, makeAny( ::rtl::OUString( aDialog.GetPath() ) ) );
 		}
 	}
 	catch(Exception&)
diff --git forms/source/component/clickableimage.cxx forms/source/component/clickableimage.cxx
index 2a3e691..07bd00d 100644
--- forms/source/component/clickableimage.cxx
+++ forms/source/component/clickableimage.cxx
@@ -52,7 +52,7 @@
 #include "services.hxx"
 #include <comphelper/container.hxx>
 #include <comphelper/listenernotification.hxx>
-
+#include <svtools/imageresourceaccess.hxx>
 #define LOCAL_URL_PREFIX	'#'
 
 //.........................................................................
@@ -705,15 +705,20 @@ namespace frm
     void OClickableImageBaseModel::StartProduction()
     {
         ImageProducer *pImgProd = GetImageProducer();
+        // grab the ImageURL
+        rtl::OUString sURL;
+        getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ) ) >>= sURL;       
         if (!m_pMedium)
         {
-            // caution: the medium may be NULL if somebody gave us a invalid URL to work with
-            // 11/24/2000 - 79667 - FS
-            pImgProd->SetImage(String());
+            if ( ::svt::GraphicAccess::isSupportedURL( sURL )  )
+                pImgProd->SetImage( sURL );
+            else 
+                // caution: the medium may be NULL if somebody gave us a invalid URL to work with
+                // 11/24/2000 - 79667 - FS
+                pImgProd->SetImage(String());
             m_bDownloading = sal_False;
             return;
         }
-
         if (m_pMedium->GetErrorCode()==0)
         {
             SvStream* pStream = m_pMedium->GetInStream();
@@ -749,8 +754,8 @@ namespace frm
             // we treat an invalid URL like we would treat no URL
             return;
 
-        if (rURL.getLength())
-        {
+        if (rURL.getLength() && !::svt::GraphicAccess::isSupportedURL( rURL ) ) 
+       {
             if (m_pMedium)
                 delete m_pMedium;
 
@@ -860,6 +865,8 @@ namespace frm
         }
         else
         {
+            if ( ::svt::GraphicAccess::isSupportedURL( rURL )  )
+                GetImageProducer()->SetImage( rURL );
             GetImageProducer()->startProduction();
         }
     }
diff --git forms/source/component/imgprod.cxx forms/source/component/imgprod.cxx
index 01fa8ac..05fbe13 100644
--- forms/source/component/imgprod.cxx
+++ forms/source/component/imgprod.cxx
@@ -267,9 +267,9 @@ void ImageProducer::SetImage( const ::rtl::OUString& rPath )
 	mbAsync = sal_False;
 	delete mpStm;
 
-    if ( ::svt::ImageResourceAccess::isImageResourceURL( maURL ) )
+    if ( ::svt::GraphicAccess::isSupportedURL( maURL ) )
     {
-        mpStm = ::svt::ImageResourceAccess::getImageStream( ::comphelper::getProcessServiceFactory(), maURL );
+        mpStm = ::svt::GraphicAccess::getImageStream( ::comphelper::getProcessServiceFactory(), maURL );
     }
     else if( maURL.getLength() )
 	{
diff --git forms/source/inc/FormComponent.hxx forms/source/inc/FormComponent.hxx
index a78cce5..5388bbe 100644
--- forms/source/inc/FormComponent.hxx
+++ forms/source/inc/FormComponent.hxx
@@ -89,7 +89,6 @@
 namespace frm
 {
 //.........................................................................
-
     // default tab index for components
     const sal_Int16 FRM_DEFAULT_TABINDEX = 0;
 
diff --git goodies/source/unographic/graphicuno.cxx goodies/source/unographic/graphicuno.cxx
index 645c048..b39f7a7 100755
--- goodies/source/unographic/graphicuno.cxx
+++ goodies/source/unographic/graphicuno.cxx
@@ -38,11 +38,13 @@
 #include "renderer.hxx"
 
 #include <com/sun/star/registry/XRegistryKey.hpp>
+#include "comphelper/servicedecl.hxx"
 
 using namespace com::sun::star;
+namespace sdecl = comphelper::service_decl;
 
 namespace unographic {
-
+extern sdecl::ServiceDecl const serviceDecl;
 // --------------------
 // - *_createInstance -
 // --------------------
@@ -72,7 +74,7 @@ extern "C" void SAL_CALL component_getImplementationEnvironment( const sal_Char*
 // - component_writeInfo -
 // -----------------------
 
-extern "C" sal_Bool SAL_CALL component_writeInfo( void* /*pServiceManager*/, void* pRegistryKey )
+extern "C" sal_Bool SAL_CALL component_writeInfo( void* pServiceManager, void* pRegistryKey )
 {
 	sal_Bool bRet = sal_False;
 
@@ -105,6 +107,9 @@ extern "C" sal_Bool SAL_CALL component_writeInfo( void* /*pServiceManager*/, voi
 		    
 			for( i = 0; i < aServices.getLength(); i++ )
 		        xNewKey->createKey( aServices.getConstArray()[ i ] );
+
+   			if ( !component_writeInfoHelper( reinterpret_cast< lang::XMultiServiceFactory* >( pServiceManager ), reinterpret_cast< registry::XRegistryKey* >( pRegistryKey ), serviceDecl ) )
+				return false;
 				
 			bRet = true;
 		}
@@ -121,7 +126,7 @@ extern "C" sal_Bool SAL_CALL component_writeInfo( void* /*pServiceManager*/, voi
 // - component_getFactory -
 // ------------------------
 
-extern "C" void* SAL_CALL component_getFactory( const sal_Char* pImplName, void* pServiceManager, void* /*pRegistryKey*/ )
+extern "C" void* SAL_CALL component_getFactory( const sal_Char* pImplName, void* pServiceManager, void* pRegistryKey )
 {
 	void * pRet = 0;
 	
@@ -153,7 +158,11 @@ extern "C" void* SAL_CALL component_getFactory( const sal_Char* pImplName, void*
 			pRet = xFactory.get();
 		}
 	}
+	else 
+    {
+        pRet =  component_getFactoryHelper( pImplName, reinterpret_cast< lang::XMultiServiceFactory * >( pServiceManager ),reinterpret_cast< registry::XRegistryKey* >( pRegistryKey ), serviceDecl );
 
+    }
 	return pRet;
 }
  
diff --git goodies/source/unographic/graphicunofactory.cxx goodies/source/unographic/graphicunofactory.cxx
new file mode 100644
index 0000000..ddd7d5d
--- /dev/null
+++ goodies/source/unographic/graphicunofactory.cxx
@@ -0,0 +1,106 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: graphicuno.cxx,v $
+ * $Revision: 1.6 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_goodies.hxx"
+#include <comphelper/servicedecl.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/graphic/XGraphicObject.hpp>
+#include <com/sun/star/lang/IllegalArgumentException.hpp>
+#include "grfmgr.hxx"
+
+using namespace com::sun::star;
+
+namespace unographic {
+
+typedef ::cppu::WeakImplHelper1< graphic::XGraphicObject > GObjectAccess_BASE;
+ // Simple uno wrapper around the GraphicObject class to allow basic
+ // access. ( and solves a horrible cyclic link problem between
+ // goodies/toolkit/extensions )
+class GObjectImpl : public GObjectAccess_BASE
+{
+     ::osl::Mutex m_aMutex;
+     std::auto_ptr< GraphicObject > mpGObject;
+public:
+     GObjectImpl( uno::Sequence< uno::Any > const & args, uno::Reference< uno::XComponentContext > const & xComponentContext ) throw (uno::RuntimeException);
+
+     // XGraphicObject
+    virtual uno::Reference< graphic::XGraphic > SAL_CALL getGraphic() throw (uno::RuntimeException);
+    virtual void SAL_CALL setGraphic( const uno::Reference< graphic::XGraphic >& _graphic ) throw (uno::RuntimeException);
+    ::rtl::OUString SAL_CALL getUniqueID() throw (uno::RuntimeException);
+};
+
+GObjectImpl::GObjectImpl( uno::Sequence< uno::Any > const & args, uno::Reference< uno::XComponentContext > const & /*xComponentContext*/ ) throw (uno::RuntimeException)
+{
+    if ( args.getLength() == 1 )
+    {
+        rtl::OUString sId;
+        if ( !( args[ 0 ] >>= sId ) || sId.getLength() == 0 )
+            throw lang::IllegalArgumentException();
+        ByteString bsId( sId.getStr(), RTL_TEXTENCODING_UTF8 ); 
+        mpGObject.reset( new GraphicObject( bsId ) ); 
+    }
+    else
+       mpGObject.reset( new GraphicObject() ); 
+}
+
+uno::Reference< graphic::XGraphic > SAL_CALL GObjectImpl::getGraphic() throw (uno::RuntimeException)
+{
+    ::osl::MutexGuard aGuard( m_aMutex );
+    if ( !mpGObject.get() )
+        throw uno::RuntimeException();
+    return mpGObject->GetGraphic().GetXGraphic();
+}
+
+void SAL_CALL GObjectImpl::setGraphic( const uno::Reference< graphic::XGraphic >& _graphic ) throw (uno::RuntimeException)
+{
+    ::osl::MutexGuard aGuard( m_aMutex );
+    if ( !mpGObject.get() )
+        throw uno::RuntimeException();
+    Graphic aGraphic( _graphic );
+    mpGObject->SetGraphic( aGraphic );
+}
+
+::rtl::OUString SAL_CALL GObjectImpl::getUniqueID() throw (uno::RuntimeException)
+{
+    ::osl::MutexGuard aGuard( m_aMutex );
+    rtl::OUString sId;
+    if ( mpGObject.get() )
+        sId = String( mpGObject->GetUniqueID().GetBuffer(), RTL_TEXTENCODING_ASCII_US );
+    return sId;
+}
+
+
+namespace sdecl = comphelper::service_decl;
+sdecl::class_<GObjectImpl, sdecl::with_args<true> > serviceBI;
+extern sdecl::ServiceDecl const serviceDecl( serviceBI, "com.sun.star.graphic.GraphicObject", "com.sun.star.graphic.GraphicObject" );
+
+}
diff --git goodies/source/unographic/makefile.mk goodies/source/unographic/makefile.mk
index 7eee7f2..614996f 100755
--- goodies/source/unographic/makefile.mk
+++ goodies/source/unographic/makefile.mk
@@ -47,6 +47,7 @@ CXXFILES=							\
 			provider.cxx			\
 			graphic.cxx				\
 			renderer.cxx			\
+			graphicunofactory.cxx			\
 			transformer.cxx
 
 SLOFILES=							\
@@ -55,6 +56,7 @@ SLOFILES=							\
 			$(SLO)$/provider.obj	\
 			$(SLO)$/graphic.obj		\
 			$(SLO)$/renderer.obj	\
+			$(SLO)$/graphicunofactory.obj	\
 			$(SLO)$/transformer.obj
 
 # --- Target -------------------------------------------------------
diff --git goodies/source/unographic/provider.cxx goodies/source/unographic/provider.cxx
index 2f40db7..9fe7abf 100644
--- goodies/source/unographic/provider.cxx
+++ goodies/source/unographic/provider.cxx
@@ -54,12 +54,15 @@
 
 #include "descriptor.hxx"
 #include "graphic.hxx"
+#include "grfmgr.hxx"
 #include "provider.hxx"
 
 using namespace com::sun::star;
 
 namespace unographic {
 
+#define UNO_NAME_GRAPHOBJ_URLPREFIX                             "vnd.sun.star.GraphicObject:"
+
 // -------------------
 // - GraphicProvider -
 // -------------------
@@ -159,6 +162,24 @@ uno::Sequence< sal_Int8 > SAL_CALL GraphicProvider::getImplementationId()
 
 // ------------------------------------------------------------------------------
 
+uno::Reference< ::graphic::XGraphic > GraphicProvider::implLoadGraphicObject( const ::rtl::OUString& rResourceURL ) const
+{
+	uno::Reference< ::graphic::XGraphic > 	xRet;
+	if( rResourceURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) == 0 ) 
+	{
+		// graphic manager url
+		String aTmpStr( rResourceURL.copy( sizeof( UNO_NAME_GRAPHOBJ_URLPREFIX ) - 1 ) );
+		ByteString aUniqueID( aTmpStr, RTL_TEXTENCODING_UTF8 );
+		GraphicObject aGrafObj( aUniqueID );	
+		// I don't call aGrafObj.GetXGraphic because it will call us back 		
+		// into implLoadMemory ( with "private:memorygraphic" test )
+		::unographic::Graphic* pUnoGraphic = new ::unographic::Graphic;
+		pUnoGraphic->init( aGrafObj.GetGraphic() );
+		xRet = pUnoGraphic;
+	}
+	return xRet;
+}
+
 uno::Reference< ::graphic::XGraphic > GraphicProvider::implLoadMemory( const ::rtl::OUString& rResourceURL ) const
 {
 	uno::Reference< ::graphic::XGraphic > 	xRet;
@@ -382,9 +403,10 @@ uno::Reference< beans::XPropertySet > SAL_CALL GraphicProvider::queryGraphicDesc
 	else if( aURL.getLength() )
 	{
 		uno::Reference< ::graphic::XGraphic > xGraphic( implLoadMemory( aURL ) );
-		
 		if( !xGraphic.is() )
 			xGraphic = implLoadResource( aURL );
+		if( !xGraphic.is() )
+			xGraphic = implLoadGraphicObject( aURL );
 
         if ( !xGraphic.is() )
             xGraphic = implLoadRepositoryImage( aURL );
@@ -453,6 +475,9 @@ uno::Reference< ::graphic::XGraphic > SAL_CALL GraphicProvider::queryGraphic( co
 	else if( aPath.Len() )
 	{
 		xRet = implLoadMemory( aPath );
+
+		if( !xRet.is() )
+			xRet = implLoadGraphicObject( aPath );
 		
 		if( !xRet.is() )
 			xRet = implLoadResource( aPath );
diff --git goodies/source/unographic/provider.hxx goodies/source/unographic/provider.hxx
index 663d17d..e32b104 100644
--- goodies/source/unographic/provider.hxx
+++ goodies/source/unographic/provider.hxx
@@ -73,6 +73,7 @@ protected:
 private:
 
 	::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > implLoadMemory( const ::rtl::OUString& rResourceURL ) const;
+	::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > implLoadGraphicObject( const ::rtl::OUString& rResourceURL ) const;
 	::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > implLoadResource( const ::rtl::OUString& rResourceURL ) const;
 	::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > implLoadRepositoryImage( const ::rtl::OUString& rResourceURL ) const;
 	::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > implLoadBitmap( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XBitmap >& rBitmap ) const;
diff --git offapi/com/sun/star/graphic/GraphicObject.idl offapi/com/sun/star/graphic/GraphicObject.idl
new file mode 100644
index 0000000..79794c3
--- /dev/null
+++ offapi/com/sun/star/graphic/GraphicObject.idl
@@ -0,0 +1,63 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: GraphicProvider.idl,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef com_sun_star_graphic_GraphicObject_idl
+#define com_sun_star_graphic_GraphicObject_idl
+
+#include <com/sun/star/graphic/XGraphicObject.idl>
+
+module com { module sun { module star { module graphic
+{
+/** The <type>GraphicObject</type> service can be used to create <type>XGraphicObject</type> instances.
+<p>
+<type>XGraphicObject</type> objects are accessable using GraphicObject scheme urls like <code>vnd.sun.star.GraphicObject:10000000000001940000012FB99807BD</code>
+As long as at least one instance of <type>XGraphicObject</type> with a particular UniqueID exists, the associated image/graphic is available.
+    @see GraphicObject
+    @see GraphicProvider 
+    @see MediaProperties 
+</p>
+*/
+
+service GraphicObject : XGraphicObject
+{
+    /** Creates an <type>GraphicObject</type>
+    */
+
+    create();
+    /** Creates an <type>GraphicObject</type> with <code>uniqueId</code>
+	 @param uniqueId 
+		If another <type>XGraphicObject</type> with <code>uniqueId</code> exists, this GraphicObject is populated with the other <type>GraphicObject</type>'s data.
+    */
+    createWithId( [in] string uniqueId );
+};
+
+} ; } ; } ; } ; 
+
+#endif
diff --git offapi/com/sun/star/graphic/MediaProperties.idl offapi/com/sun/star/graphic/MediaProperties.idl
index c857109..b255532 100755
--- offapi/com/sun/star/graphic/MediaProperties.idl
+++ offapi/com/sun/star/graphic/MediaProperties.idl
@@ -61,11 +61,15 @@ published service MediaProperties
 			<li>private:resource/projectshortname/imagelist/12345</li>
 			<li>private:resource/projectshortname/imagelist/12345/12</li>
 		</ul>
+And additionally, GraphicObject scheme url's like 
+            <ul> <li>vnd.sun.star.GraphicObject:10000000000001940000012FB99807BD</li> </ul>
+              can be used to access graphics held by the GraphicCache implementation. 
         </p>
 
         <p>Yet more, you can access graphics in the application-wide image
         repository by specifying URLs of the form
-        <code>private:graphicrepository/<em>&lt;path_in_repository&gt;</em></code>.</p>
+        <code>private:graphicrepository/<em>&lt;path_in_repository&gt;</em></code>. 
+</p>
 	*/
 	[optional, property ] string URL;
 
diff --git offapi/com/sun/star/graphic/XGraphicObject.idl offapi/com/sun/star/graphic/XGraphicObject.idl
new file mode 100644
index 0000000..a320d0d
--- /dev/null
+++ offapi/com/sun/star/graphic/XGraphicObject.idl
@@ -0,0 +1,63 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XGraphic.idl,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef com_sun_star_graphic_XGraphicObject_idl
+#define com_sun_star_graphic_XGraphicObject_idl
+
+#include <com/sun/star/uno/XInterface.idl>
+
+module com { module sun { module star { module graphic
+{
+interface XGraphic;
+/** <p>
+    <type>XGraphicObject</type> objects represent in-memory image and graphic
+    objects. Such objects are accessable using GraphicObject scheme urls like
+<ul> <li>vnd.sun.star.GraphicObject:10000000000001940000012FB99807BD</li> </ul>
+ The numeric portion of the url is formed from <member>UniqueID</member>. As long as at least one instance of <type>XGraphicObject</type> with a particular UniqueID exists, the associated image/graphic is available.
+    @see XGraphicObject
+    @see GraphicProvider 
+    @see MediaProperties 
+    </p>
+*/
+
+interface XGraphicObject : ::com::sun::star::uno::XInterface
+{
+    /** is the associated image/graphic for this object.
+    */
+
+    [attribute ] XGraphic Graphic;
+    /** is the id that can be used to form the <code>vnd.sun.star.GraphicObject:</code> url to address this object. 
+    */
+    [attribute, readonly ] string UniqueID;
+};
+
+} ; } ; } ; } ; 
+
+#endif
diff --git offapi/com/sun/star/graphic/makefile.mk offapi/com/sun/star/graphic/makefile.mk
index 600f60d..d6f1ed9 100755
--- offapi/com/sun/star/graphic/makefile.mk
+++ offapi/com/sun/star/graphic/makefile.mk
@@ -53,6 +53,8 @@ IDLFILES= \
 	XGraphic.idl \
 	XGraphicProvider.idl \
 	XGraphicRenderer.idl \
+	XGraphicObject.idl \
+	GraphicObject.idl \
 	XGraphicTransformer.idl
 	
 # --- Targets ------------------------------------------------------
diff --git svtools/inc/imageresourceaccess.hxx svtools/inc/imageresourceaccess.hxx
index 7469b5c..deeaa8e 100644
--- svtools/inc/imageresourceaccess.hxx
+++ svtools/inc/imageresourceaccess.hxx
@@ -45,22 +45,23 @@ namespace svt
 //........................................................................
 
     //====================================================================
-    //= ImageResourceAccess
+    //= GraphicAccess
     //====================================================================
     /** helper class for obtaining streams (which also can be used with the ImageProducer)
         from a resource
     */
-    class ImageResourceAccess
+    class GraphicAccess
     {
     private:
-        ImageResourceAccess();    // never implemented
+        GraphicAccess();    // never implemented
 
     public:
         /** determines whether the given URL denotes an image within a resource
+         ( or an image specified by a vnd.sun.star.GraphicObject scheme URL )
         */
-        SVT_DLLPUBLIC static  bool        isImageResourceURL( const ::rtl::OUString& _rURL );
+        SVT_DLLPUBLIC static  bool        isSupportedURL( const ::rtl::OUString& _rURL );
 
-        /** for a given URL of an image within a resource, this method retrieves
+        /** for a given URL of an image within a resource ( or an image specified by a vnd.sun.star.GraphicObject scheme URL ), this method retrieves
             an SvStream for this image.
 
             This method works for arbitrary URLs denoting an image, since the
@@ -74,7 +75,7 @@ namespace svt
                     const ::rtl::OUString& _rImageResourceURL
                 );
 
-        /** for a given URL of an image within a resource, this method retrieves
+        /** for a given URL of an image within a resource ( or an image specified by a vnd.sun.star.GraphicObject scheme URL ), this method retrieves
             an <type scope="com::sun::star::io">XInputStream</type> for this image.
         */
         SVT_DLLPUBLIC static  ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >
diff --git svtools/inc/svtools/inettbc.hxx svtools/inc/svtools/inettbc.hxx
index 97a83e5..6cd8a05 100644
--- svtools/inc/svtools/inettbc.hxx
+++ svtools/inc/svtools/inettbc.hxx
@@ -50,6 +50,7 @@ friend class SvtMatchContext_Impl;
 friend class SvtURLBox_Impl;
 	Link							aOpenHdl;
 	String							aBaseURL;
+	String							aPlaceHolder;
 	SvtMatchContext_Impl*			pCtx;
 	SvtURLBox_Impl*					pImp;
 	INetProtocol					eSmartProtocol;
@@ -104,6 +105,9 @@ public:
 
     inline void                     EnableAutocompletion( BOOL _bEnable = TRUE )
                                         { bIsAutoCompleteEnabled = _bEnable; }
+    void SetPlaceHolder( const String& sPlaceHolder ) { aPlaceHolder = sPlaceHolder; }
+    String GetPlaceHolder() { return aPlaceHolder; }
+    bool MatchesPlaceHolder( const String& sToMatch ) { return ( ( aPlaceHolder.Len() > 0 ) && ( aPlaceHolder == sToMatch ) ); }
 };
 
 #endif
diff --git svtools/source/control/inettbc.cxx svtools/source/control/inettbc.cxx
index 9623762..d94d257 100644
--- svtools/source/control/inettbc.cxx
+++ svtools/source/control/inettbc.cxx
@@ -1079,6 +1079,13 @@ long SvtURLBox::PreNotify( NotifyEvent& rNEvt )
             SetSelection( Selection( nLen, GetText().Len() ) );
             return TRUE;
         }
+
+        if ( MatchesPlaceHolder( GetText() ) )
+        {
+            // set the selection so a key stroke will overwrite
+            // the placeholder rather than edit it
+            SetSelection( Selection( 0, GetText().Len() ) );
+        }
 	}
 
 	return ComboBox::PreNotify( rNEvt );
@@ -1148,6 +1155,8 @@ String SvtURLBox::GetURL()
     ::vos::OGuard aGuard( SvtMatchContext_Impl::GetMutex() );
 
     String aText( GetText() );
+	if ( MatchesPlaceHolder( aText ) )
+		return aPlaceHolder;
     // try to get the right case preserving URL from the list of URLs
     if ( pImp->pCompletions && pImp->pURLs )
     {
diff --git svtools/source/misc/imageresourceaccess.cxx svtools/source/misc/imageresourceaccess.cxx
index 039ba89..46a2954 100644
--- svtools/source/misc/imageresourceaccess.cxx
+++ svtools/source/misc/imageresourceaccess.cxx
@@ -51,6 +51,8 @@ namespace svt
 {
 //........................................................................
 
+#define GRAPHOBJ_URLPREFIX "vnd.sun.star.GraphicObject:"
+
     using namespace ::utl;
     using namespace ::comphelper;
     using namespace ::com::sun::star::io;
@@ -137,17 +139,17 @@ namespace svt
     }
 
     //====================================================================
-	//= ImageResourceAccess
+	//= GraphicAccess
 	//====================================================================
 	//--------------------------------------------------------------------
-    bool ImageResourceAccess::isImageResourceURL( const ::rtl::OUString& _rURL )
+    bool GraphicAccess::isSupportedURL( const ::rtl::OUString& _rURL )
     {
         ::rtl::OUString sIndicator( RTL_CONSTASCII_USTRINGPARAM( "private:resource/" ) );
-        return _rURL.indexOf( sIndicator ) == 0;
+        return ( ( _rURL.indexOf( sIndicator ) == 0 ) || ( _rURL.compareToAscii( GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( GRAPHOBJ_URLPREFIX ) ) == 0 ) );
     }
 
 	//--------------------------------------------------------------------
-    SvStream* ImageResourceAccess::getImageStream( const Reference< XMultiServiceFactory >& _rxORB, const ::rtl::OUString& _rImageResourceURL )
+    SvStream* GraphicAccess::getImageStream( const Reference< XMultiServiceFactory >& _rxORB, const ::rtl::OUString& _rImageResourceURL )
     {
         SvStream* pReturn = NULL;
 
@@ -157,7 +159,7 @@ namespace svt
             Reference< XGraphicProvider > xProvider;
             if ( _rxORB.is() )
                 xProvider = xProvider.query( _rxORB->createInstance( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.graphic.GraphicProvider" ) ) ) );
-            OSL_ENSURE( xProvider.is(), "ImageResourceAccess::getImageStream: could not create a graphic provider!" );
+            OSL_ENSURE( xProvider.is(), "GraphicAccess::getImageStream: could not create a graphic provider!" );
 
             if ( !xProvider.is() )
                 return pReturn;
@@ -167,7 +169,7 @@ namespace svt
             aMediaProperties[0].Name = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "URL" ) );
             aMediaProperties[0].Value <<= _rImageResourceURL;
             Reference< XGraphic > xGraphic( xProvider->queryGraphic( aMediaProperties ) );
-            OSL_ENSURE( xGraphic.is(), "ImageResourceAccess::getImageStream: the provider did not give us a graphic object!" );
+            OSL_ENSURE( xGraphic.is(), "GraphicAccess::getImageStream: the provider did not give us a graphic object!" );
             if ( !xGraphic.is() )
                 return pReturn;
 
@@ -190,14 +192,14 @@ namespace svt
         }
         catch( const Exception& )
         {
-        	OSL_ENSURE( sal_False, "ImageResourceAccess::getImageStream: caught an exception!" );
+        	OSL_ENSURE( sal_False, "GraphicAccess::getImageStream: caught an exception!" );
         }
 
         return pReturn;
     }
 
 	//--------------------------------------------------------------------
-    Reference< XInputStream > ImageResourceAccess::getImageXStream( const Reference< XMultiServiceFactory >& _rxORB, const ::rtl::OUString& _rImageResourceURL )
+    Reference< XInputStream > GraphicAccess::getImageXStream( const Reference< XMultiServiceFactory >& _rxORB, const ::rtl::OUString& _rImageResourceURL )
     {
         return new OSeekableInputStreamWrapper( getImageStream( _rxORB, _rImageResourceURL ), sal_True );   // take ownership
     }
diff --git toolkit/inc/toolkit/controls/unocontrols.hxx toolkit/inc/toolkit/controls/unocontrols.hxx
index 72c7db8..2743f2e 100644
--- toolkit/inc/toolkit/controls/unocontrols.hxx
+++ toolkit/inc/toolkit/controls/unocontrols.hxx
@@ -54,6 +54,7 @@
 #include <com/sun/star/awt/XCurrencyField.hpp>
 #include <com/sun/star/awt/XPatternField.hpp>
 #include <com/sun/star/awt/XProgressBar.hpp>
+#include <com/sun/star/graphic/XGraphicObject.hpp>
 #include <toolkit/controls/unocontrolmodel.hxx>
 #include <toolkit/controls/unocontrolbase.hxx>
 #include <toolkit/helper/macros.hxx>
@@ -67,6 +68,9 @@
 
 #include <list>
 
+#define UNO_NAME_GRAPHOBJ_URLPREFIX                             "vnd.sun.star.GraphicObject:"
+#define UNO_NAME_GRAPHOBJ_URLPKGPREFIX                  "vnd.sun.star.Package:"
+ 
 
 //	----------------------------------------------------
 //	class UnoControlEditModel
@@ -219,7 +223,9 @@ private:
 	std::list< ::com::sun::star::uno::Reference< ::com::sun::star::awt::XImageConsumer > >  maListeners;
     bool                                                                                    mbAdjustingImagePosition;
     bool                                                                                    mbAdjustingGraphic;
-
+    
+    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject > mxGrfObj;
+    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL );
 protected:
     ImageProducerControlModel() : mbAdjustingImagePosition( false ), mbAdjustingGraphic( false ) { }
     ImageProducerControlModel( const ImageProducerControlModel& _rSource ) : com::sun::star::awt::XImageProducer(), UnoControlModel( _rSource ), mbAdjustingImagePosition( false ), mbAdjustingGraphic( false ) { }
diff --git toolkit/source/controls/unocontrols.cxx toolkit/source/controls/unocontrols.cxx
index 821c1b9..1e5661b 100644
--- toolkit/source/controls/unocontrols.cxx
+++ toolkit/source/controls/unocontrols.cxx
@@ -37,6 +37,7 @@
 #include <com/sun/star/awt/VisualEffect.hpp>
 #include <com/sun/star/awt/LineEndFormat.hpp>
 #include <com/sun/star/graphic/XGraphicProvider.hpp>
+#include <com/sun/star/graphic/GraphicObject.hpp>
 #include <com/sun/star/util/Date.hpp>
 
 
@@ -576,11 +577,21 @@ uno::Any ImageProducerControlModel::ImplGetDefaultValue( sal_uInt16 nPropId ) co
 
     return UnoControlModel::ImplGetDefaultValue( nPropId );
 }
-namespace
-{
-    uno::Reference< graphic::XGraphic > lcl_getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL )
+    uno::Reference< graphic::XGraphic > ImageProducerControlModel::getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL )
     {
         uno::Reference< graphic::XGraphic > xGraphic;
+
+        if( ( _rURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) == 0 ) )
+        {
+            // graphic manager uniqueid
+            rtl::OUString sID = _rURL.copy( sizeof( UNO_NAME_GRAPHOBJ_URLPREFIX ) - 1 );
+            // get the DefaultContext
+            ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
+            mxGrfObj = graphic::GraphicObject::createWithId( aContext.getUNOContext(), sID );
+        }
+        else // linked
+            mxGrfObj = NULL; // release the GraphicObject
+
         if ( !_rURL.getLength() )
             return xGraphic;
 
@@ -603,7 +614,6 @@ namespace
 
         return xGraphic;
     }
-}
 
 void SAL_CALL ImageProducerControlModel::setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception)
 {
@@ -621,7 +631,7 @@ void SAL_CALL ImageProducerControlModel::setFastPropertyValue_NoBroadcast( sal_I
                 mbAdjustingGraphic = true;
                 ::rtl::OUString sImageURL;
                 OSL_VERIFY( rValue >>= sImageURL );
-                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( lcl_getGraphicFromURL_nothrow( sImageURL ) ) );
+                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( getGraphicFromURL_nothrow( sImageURL ) ) );
                 mbAdjustingGraphic = false;
             }
             break;
diff --git xmloff/source/forms/elementimport.cxx xmloff/source/forms/elementimport.cxx
index edc0c77..71d70ab 100644
--- xmloff/source/forms/elementimport.cxx
+++ xmloff/source/forms/elementimport.cxx
@@ -1133,10 +1133,10 @@ namespace xmloff
 					)
 				);
 
-		if ( bMakeAbsolute )
+		if ( bMakeAbsolute && ( _rValue.getLength() > 0  ) )
 		{
 			// make a global URL out of the local one
-			::rtl::OUString sAdjustedValue = m_rContext.getGlobalContext().GetAbsoluteReference( _rValue );
+			::rtl::OUString sAdjustedValue = m_rContext.getGlobalContext().ResolveGraphicObjectURL( _rValue, FALSE );
 			OImagePositionImport::handleAttribute( _nNamespaceKey, _rLocalName, sAdjustedValue );
 		}
 		else
diff --git xmloff/source/forms/propertyexport.cxx xmloff/source/forms/propertyexport.cxx
index bedd87f..0b5f7a7 100644
--- xmloff/source/forms/propertyexport.cxx
+++ xmloff/source/forms/propertyexport.cxx
@@ -429,7 +429,9 @@ namespace xmloff
 			
 		::rtl::OUString sTargetLocation = comphelper::getString(m_xProps->getPropertyValue(_sPropertyName));
         if ( sTargetLocation.getLength() )
-		    sTargetLocation = m_rContext.getGlobalContext().GetRelativeReference(sTargetLocation);
+                    // If this isn't a GraphicObject then GetRelativeReference
+                    // will be called anyway ( in AddEmbeddedGraphic )
+		    sTargetLocation = m_rContext.getGlobalContext().AddEmbeddedGraphicObject(sTargetLocation);
 		AddAttribute(OAttributeMetaData::getCommonControlAttributeNamespace(_nProperty)
 					,OAttributeMetaData::getCommonControlAttributeName(_nProperty)
 					, sTargetLocation);
