diff --git basctl/source/dlged/propbrw.cxx basctl/source/dlged/propbrw.cxx
index bfc59b0..0e40383 100644
--- basctl/source/dlged/propbrw.cxx
+++ basctl/source/dlged/propbrw.cxx
@@ -209,7 +209,12 @@ void PropBrw::ImplReCreateController()
         ::cppu::ContextEntry_Init aHandlerContextInfo[] =
         {
             ::cppu::ContextEntry_Init( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DialogParentWindow" ) ), makeAny( VCLUnoHelper::GetInterface ( this ) ) ),
-            ::cppu::ContextEntry_Init( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ContextDocument" ) ), makeAny( m_xContextDocument ) )
+            ::cppu::ContextEntry_Init( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ContextDocument" ) ), makeAny( m_xContextDocument ) ),
+            // Temporary disable of non-linked images for dialogs 
+            // (needs some support in the dialog code, the toolkit 
+            // already supports non-linked images ) 
+            ::cppu::ContextEntry_Init( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "SupportNonLinkedImage" ) ), makeAny( sal_False ) )
+
         };
         Reference< XComponentContext > xInspectorContext(
             ::cppu::createComponentContext( aHandlerContextInfo, sizeof( aHandlerContextInfo ) / sizeof( aHandlerContextInfo[0] ),
diff --git extensions/source/propctrlr/formcomponenthandler.cxx extensions/source/propctrlr/formcomponenthandler.cxx
index e8ef25c..df1b436 100644
--- extensions/source/propctrlr/formcomponenthandler.cxx
+++ extensions/source/propctrlr/formcomponenthandler.cxx
@@ -80,6 +80,7 @@
 #include <com/sun/star/inspection/PropertyLineElement.hpp>
 #include <com/sun/star/resource/XStringResourceManager.hpp>
 #include <com/sun/star/resource/MissingResourceException.hpp>
+#include <com/sun/star/graphic/GraphicObjectAccess.hpp>
 /** === end UNO includes === **/
 #include <connectivity/dbexception.hxx>
 #include <vcl/wrkwin.hxx>
@@ -1360,9 +1361,18 @@ namespace pcr
             break;
 
         case PROPERTY_ID_IMAGE_URL:
-            if ( impl_browseForImage_nothrow( _rData, aGuard ) )
-                eResult = InteractiveSelectionResult_ObtainedValue;
+        {
+            bool bIsLink = false;
+            if ( impl_browseForImage_nothrow( _rData, bIsLink, aGuard ) )
+            {
+                if ( bIsLink )
+                    eResult = InteractiveSelectionResult_ObtainedValue;
+                else 
+                    // ImageURL already set in impl_browseForImage_nothrow
+                    eResult = InteractiveSelectionResult_Success;
+            }
             break;
+        }
 
         case PROPERTY_ID_TARGET_URL:
             if ( impl_browseForTargetURL_nothrow( _rData, aGuard ) )
@@ -2656,13 +2666,27 @@ namespace pcr
     }
 
     //------------------------------------------------------------------------
-    bool FormComponentPropertyHandler::impl_browseForImage_nothrow( Any& _out_rNewValue, ::osl::ClearableMutexGuard& _rClearBeforeDialog ) const
+    bool FormComponentPropertyHandler::impl_browseForImage_nothrow( Any& _out_rNewValue, bool& bIsLink, ::osl::ClearableMutexGuard& _rClearBeforeDialog ) const
     {
+        bIsLink = true;// reflect the legacy behavior
         ::rtl::OUString aStrTrans = m_pInfoService->getPropertyTranslation( PROPERTY_ID_IMAGE_URL );
 
         ::sfx2::FileDialogHelper aFileDlg(SFXWB_GRAPHIC);
 
         aFileDlg.SetTitle(aStrTrans);
+        bool bHandleNonLink = sal_True; 
+        // Bit of a hack to allow basic dialogs to override support for 
+        // non-linked images ( e.g. those located in the document 
+        // stream )  Event though the toolkit control CAN handle this but 
+        // the dialog code can't ( right now ) hopefully it  will soon
+        try
+        {	
+            m_aContext.getContextValueByAsciiName( "SupportNonLinkedImage" ) >>= bHandleNonLink;
+        }
+        catch( const Exception& e )
+        {
+            DBG_UNHANDLED_EXCEPTION(); // shouldn't happen
+        }
 
         Reference< XFilePickerControlAccess > xController(aFileDlg.GetFilePicker(), UNO_QUERY);
         DBG_ASSERT(xController.is(), "FormComponentPropertyHandler::impl_browseForImage_nothrow: missing the controller interface on the file picker!");
@@ -2671,9 +2695,9 @@ namespace pcr
             // do a preview by default
             xController->setValue(ExtendedFilePickerElementIds::CHECKBOX_PREVIEW, 0, ::cppu::bool2any(sal_True));
 
-            // "as link" is checked, but disabled
-            xController->setValue(ExtendedFilePickerElementIds::CHECKBOX_LINK, 0, ::cppu::bool2any(sal_True));
-            xController->enableControl(ExtendedFilePickerElementIds::CHECKBOX_LINK, sal_False);
+            xController->setValue(ExtendedFilePickerElementIds::CHECKBOX_LINK, 0, ::cppu::bool2any(bIsLink));
+            xController->enableControl(ExtendedFilePickerElementIds::CHECKBOX_LINK, bHandleNonLink );
+
         }
 
         ::rtl::OUString sCurValue;
@@ -2687,7 +2711,26 @@ namespace pcr
         _rClearBeforeDialog.clear();
         bool bSuccess = ( 0 == aFileDlg.Execute() );
         if ( bSuccess )
+        {
+            if ( bHandleNonLink && xController.is() )
+            {
+                xController->getValue(ExtendedFilePickerElementIds::CHECKBOX_LINK, 0) >>= bIsLink;
+            }
+            if ( !bIsLink )
+            {
+                Graphic aGraphic;
+                aFileDlg.GetGraphic( aGraphic );
+                // Hold GraphicObject instance here until the property is set
+                Reference< graphic::XGraphicObject > xGrfObj = graphic::GraphicObjectAccess::createGraphicObject( m_aContext.getUNOContext() );
+                xGrfObj->setGraphic( aGraphic.GetXGraphic() ); 
+                rtl::OUString ObjectID( RTL_CONSTASCII_USTRINGPARAM("vnd.sun.star.GraphicObject:" ) );
+                ObjectID = ObjectID + xGrfObj->getUniqueID();
+                 
+                m_xComponent->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ImageURL" ) ), uno::makeAny( ObjectID ) );
+            }
+
             _out_rNewValue <<= (::rtl::OUString)aFileDlg.GetPath();
+        }
         return bSuccess;
     }
 
diff --git extensions/source/propctrlr/formcomponenthandler.hxx extensions/source/propctrlr/formcomponenthandler.hxx
index 2216704..fb34827 100644
--- extensions/source/propctrlr/formcomponenthandler.hxx
+++ extensions/source/propctrlr/formcomponenthandler.hxx
@@ -305,11 +305,13 @@ namespace pcr
                 our component actually has a ImageURL property
             @param _out_rNewValue
                 the new property value, if the user chose a new image url
+            @param _out_bIsLink
+                <TRUE/> if the chosen image a link
             @return
                 <TRUE/> if and only if a new image URL has been chosen by the user.
                 In this case, ->_out_rNewValue is filled with the new property value
         */
-        bool impl_browseForImage_nothrow( ::com::sun::star::uno::Any& _out_rNewValue, ::osl::ClearableMutexGuard& _rClearBeforeDialog ) const;
+        bool impl_browseForImage_nothrow( ::com::sun::star::uno::Any& _out_rNewValue, bool& _out_bIsLink, ::osl::ClearableMutexGuard& _rClearBeforeDialog ) const;
 
         /** executes a dialog which allows the user to change the TargetURL property of
             our component
diff --git extensions/source/propctrlr/propcontroller.cxx extensions/source/propctrlr/propcontroller.cxx
index 80c07a6..26eba26 100644
--- extensions/source/propctrlr/propcontroller.cxx
+++ extensions/source/propctrlr/propcontroller.cxx
@@ -1481,7 +1481,8 @@ namespace pcr
         {
             ::cppu::ContextEntry_Init aHandlerContextInfo[] =
             {
-                ::cppu::ContextEntry_Init( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DialogParentWindow" ) ), makeAny( VCLUnoHelper::GetInterface( m_pView ) ) )
+                ::cppu::ContextEntry_Init( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DialogParentWindow" ) ), makeAny( VCLUnoHelper::GetInterface( m_pView ) ) ),
+                ::cppu::ContextEntry_Init( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "SupportNonLinkedImage" ) ), makeAny( sal_True ) )
             };
             xHandlerContext = ::cppu::createComponentContext(
                 aHandlerContextInfo, sizeof( aHandlerContextInfo ) / sizeof( aHandlerContextInfo[0] ),
diff --git forms/source/component/ImageControl.cxx forms/source/component/ImageControl.cxx
index 1ba9f90..5d9e757 100644
--- forms/source/component/ImageControl.cxx
+++ forms/source/component/ImageControl.cxx
@@ -353,7 +353,7 @@ sal_Bool OImageControlModel::handleNewIm
     ::std::auto_ptr< SvStream > pImageStream;
     Reference< XInputStream > xImageStream;
 
-    if ( ::svt::ImageResourceAccess::isImageResourceURL( _rURL ) )
+    if ( ::svt::ImageResourceAccess::isImageResourceURL( _rURL ) || _rURL.indexOf( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.GraphicObject:"  ) )  == 0  ))
     {
         xImageStream = ::svt::ImageResourceAccess::getImageXStream( getORB(), _rURL );
     }
diff --git forms/source/component/clickableimage.cxx forms/source/component/clickableimage.cxx
index 2a3e691..9c6a478 100644
--- forms/source/component/clickableimage.cxx
+++ forms/source/component/clickableimage.cxx
@@ -705,6 +705,9 @@ namespace frm
     void OClickableImageBaseModel::StartProduction()
     {
         ImageProducer *pImgProd = GetImageProducer();
+        // grab the ImageURL
+        rtl::OUString sURL;
+        getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ) ) >>= sURL;       
         if (!m_pMedium)
         {
             // caution: the medium may be NULL if somebody gave us a invalid URL to work with
@@ -713,7 +716,6 @@ namespace frm
             m_bDownloading = sal_False;
             return;
         }
-
         if (m_pMedium->GetErrorCode()==0)
         {
             SvStream* pStream = m_pMedium->GetInStream();
@@ -722,7 +724,29 @@ namespace frm
             pImgProd->startProduction();
             m_bProdStarted = sal_True;
         }
-        else
+        else if ( sURL.indexOf( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("vnd.sun.star.GraphicObject:") ) == 0 ) )
+        {
+            // This is a bit of a hack, but I can't see a reason why using 
+            // SfxMedium [*] is necessary here ( for GraphicObject scheme 
+            // objects )
+            // We will get here if we have a vnd.sun.star.GraphicObject:xxxxx
+            // object ( the test above will fail because the SfxMedium can't 
+            // handle 'em )
+            // Is the SfxMedium use just to handle say external links ( ftp etc. )
+            // and notify when they are read?
+            //
+            // [*] we could always convert the "vnd.sun.star.GraphicObject:xxx
+            // url to a "vnd.sun.star.Package:xxx" type url. Or we even could 
+            // have another property at the controlmodel for that ( like Shapes
+            // do ). Using a "vnd.sun.star.Package:" in theory would be possible
+            // with the SfxMedium class ( assuming we can  access the document's
+            // XStorage
+            pImgProd->SetImage(sURL);
+            pImgProd->startProduction();
+            m_bProdStarted = sal_True;
+        }
+
+        else 
         {
             pImgProd->SetImage(String());
             delete m_pMedium;
diff --git forms/source/component/imgprod.cxx forms/source/component/imgprod.cxx
index 01fa8ac..96882b3 100644
--- forms/source/component/imgprod.cxx
+++ forms/source/component/imgprod.cxx
@@ -267,7 +267,7 @@ void ImageProducer::SetImage( const ::rt
 	mbAsync = sal_False;
 	delete mpStm;
 
-    if ( ::svt::ImageResourceAccess::isImageResourceURL( maURL ) )
+    if ( ::svt::ImageResourceAccess::isImageResourceURL( maURL ) || maURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) == 0 )
     {
         mpStm = ::svt::ImageResourceAccess::getImageStream( ::comphelper::getProcessServiceFactory(), maURL );
     }
diff --git forms/source/component/imgprod.hxx forms/source/component/imgprod.hxx
index 6dc6235..e7ab6d0 100644
--- forms/source/component/imgprod.hxx
+++ forms/source/component/imgprod.hxx
@@ -40,6 +40,7 @@
 #include <com/sun/star/lang/XInitialization.hpp>
 #include <cppuhelper/weak.hxx>
 
+#define UNO_NAME_GRAPHOBJ_URLPREFIX                             "vnd.sun.star.GraphicObject:"
 
 // -----------------
 // - ImageProducer -
diff --git goodies/source/unographic/graphicuno.cxx goodies/source/unographic/graphicuno.cxx
index 645c048..b39f7a7 100755
--- goodies/source/unographic/graphicuno.cxx
+++ goodies/source/unographic/graphicuno.cxx
@@ -38,11 +38,13 @@
 #include "renderer.hxx"
 
 #include <com/sun/star/registry/XRegistryKey.hpp>
+#include "comphelper/servicedecl.hxx"
 
 using namespace com::sun::star;
+namespace sdecl = comphelper::service_decl;
 
 namespace unographic {
-
+extern sdecl::ServiceDecl const serviceDecl;
 // --------------------
 // - *_createInstance -
 // --------------------
@@ -72,7 +74,7 @@ extern "C" void SAL_CALL component_getIm
 // - component_writeInfo -
 // -----------------------
 
-extern "C" sal_Bool SAL_CALL component_writeInfo( void* /*pServiceManager*/, void* pRegistryKey )
+extern "C" sal_Bool SAL_CALL component_writeInfo( void* pServiceManager, void* pRegistryKey )
 {
 	sal_Bool bRet = sal_False;
 
@@ -105,6 +107,9 @@ extern "C" sal_Bool SAL_CALL component_w
 		    
 			for( i = 0; i < aServices.getLength(); i++ )
 		        xNewKey->createKey( aServices.getConstArray()[ i ] );
+
+   			if ( !component_writeInfoHelper( reinterpret_cast< lang::XMultiServiceFactory* >( pServiceManager ), reinterpret_cast< registry::XRegistryKey* >( pRegistryKey ), serviceDecl ) )
+				return false;
 				
 			bRet = true;
 		}
@@ -121,7 +126,7 @@ extern "C" sal_Bool SAL_CALL component_w
 // - component_getFactory -
 // ------------------------
 
-extern "C" void* SAL_CALL component_getFactory( const sal_Char* pImplName, void* pServiceManager, void* /*pRegistryKey*/ )
+extern "C" void* SAL_CALL component_getFactory( const sal_Char* pImplName, void* pServiceManager, void* pRegistryKey )
 {
 	void * pRet = 0;
 	
@@ -153,7 +158,11 @@ extern "C" void* SAL_CALL component_getF
 			pRet = xFactory.get();
 		}
 	}
+	else 
+    {
+        pRet =  component_getFactoryHelper( pImplName, reinterpret_cast< lang::XMultiServiceFactory * >( pServiceManager ),reinterpret_cast< registry::XRegistryKey* >( pRegistryKey ), serviceDecl );
 
+    }
 	return pRet;
 }
  
diff --git goodies/source/unographic/graphicunoaccess.cxx goodies/source/unographic/graphicunoaccess.cxx
new file mode 100644
index 0000000..2d5a8cf
--- /dev/null
+++ goodies/source/unographic/graphicunoaccess.cxx
@@ -0,0 +1,102 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: graphicuno.cxx,v $
+ * $Revision: 1.6 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_goodies.hxx"
+#include <comphelper/servicedecl.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/graphic/XGraphicObject.hpp>
+#include <com/sun/star/lang/IllegalArgumentException.hpp>
+#include "grfmgr.hxx"
+
+using namespace com::sun::star;
+
+namespace unographic {
+
+typedef ::cppu::WeakImplHelper1< graphic::XGraphicObject > GObjectAccess_BASE;
+
+class GObjectAccessImpl : public GObjectAccess_BASE
+{
+     std::auto_ptr< GraphicObject > mpGObject;
+public:
+     GObjectAccessImpl( uno::Sequence< uno::Any > const & args, uno::Reference< uno::XComponentContext > const & xComponentContext ) throw (uno::RuntimeException);
+
+     // XGraphicObject
+    virtual uno::Reference< graphic::XGraphic > SAL_CALL getGraphic() throw (uno::RuntimeException);
+    virtual void SAL_CALL setGraphic( const uno::Reference< graphic::XGraphic >& _graphic ) throw (uno::RuntimeException);
+    ::rtl::OUString SAL_CALL getUniqueID() throw (uno::RuntimeException);
+};
+
+GObjectAccessImpl::GObjectAccessImpl( uno::Sequence< uno::Any > const & args, uno::Reference< uno::XComponentContext > const & xComponentContext ) throw (uno::RuntimeException)
+{
+    OSL_TRACE("In GObjectAccessImpl::GObjectAccessImpl argslength = %d", args.getLength());
+    if ( args.getLength() == 1 )
+    {
+        rtl::OUString sId;
+        if ( !( args[ 0 ] >>= sId ) )
+            throw lang::IllegalArgumentException();
+        ByteString bsId( sId.getStr(), RTL_TEXTENCODING_UTF8 ); 
+        mpGObject.reset( new GraphicObject( bsId ) ); 
+    }
+    else
+       mpGObject.reset( new GraphicObject() ); 
+    OSL_TRACE("In GObjectAccessImpl::GObjectAccessImpl complete");
+}
+
+uno::Reference< graphic::XGraphic > SAL_CALL GObjectAccessImpl::getGraphic() throw (uno::RuntimeException)
+{
+    if ( !mpGObject.get() )
+        throw uno::RuntimeException();
+    return mpGObject->GetGraphic().GetXGraphic();
+}
+
+void SAL_CALL GObjectAccessImpl::setGraphic( const uno::Reference< graphic::XGraphic >& _graphic ) throw (uno::RuntimeException)
+{
+    if ( !mpGObject.get() )
+        throw uno::RuntimeException();
+    Graphic aGraphic( _graphic );
+    mpGObject->SetGraphic( aGraphic );
+}
+
+::rtl::OUString SAL_CALL GObjectAccessImpl::getUniqueID() throw (uno::RuntimeException)
+{
+    rtl::OUString sId;
+    if ( mpGObject.get() )
+        sId = String( mpGObject->GetUniqueID().GetBuffer(), RTL_TEXTENCODING_ASCII_US );
+    return sId;
+}
+
+
+namespace sdecl = comphelper::service_decl;
+sdecl::class_<GObjectAccessImpl, sdecl::with_args<true> > serviceBI;
+extern sdecl::ServiceDecl const serviceDecl( serviceBI, "com.sun.star.graphic.GraphicObjectAccess", "com.sun.star.graphic.GraphicObjectAccess" );
+
+}
diff --git goodies/source/unographic/makefile.mk goodies/source/unographic/makefile.mk
index 7eee7f2..7702beb 100755
--- goodies/source/unographic/makefile.mk
+++ goodies/source/unographic/makefile.mk
@@ -47,6 +47,7 @@ CXXFILES=							\
 			provider.cxx			\
 			graphic.cxx				\
 			renderer.cxx			\
+			graphicunoaccess.cxx			\
 			transformer.cxx
 
 SLOFILES=							\
@@ -55,6 +56,7 @@ SLOFILES=							\
 			$(SLO)$/provider.obj	\
 			$(SLO)$/graphic.obj		\
 			$(SLO)$/renderer.obj	\
+			$(SLO)$/graphicunoaccess.obj	\
 			$(SLO)$/transformer.obj
 
 # --- Target -------------------------------------------------------
diff --git goodies/source/unographic/provider.cxx goodies/source/unographic/provider.cxx
index f51b852..cf7d733 100644
--- goodies/source/unographic/provider.cxx
+++ goodies/source/unographic/provider.cxx
@@ -54,12 +54,15 @@
 
 #include "descriptor.hxx"
 #include "graphic.hxx"
+#include "grfmgr.hxx"
 #include "provider.hxx"
 
 using namespace com::sun::star;
 
 namespace unographic {
 
+#define UNO_NAME_GRAPHOBJ_URLPREFIX                             "vnd.sun.star.GraphicObject:"
+
 // -------------------
 // - GraphicProvider -
 // -------------------
@@ -176,6 +179,18 @@ uno::Reference< ::graphic::XGraphic > Gr
 			xRet = pUnoGraphic;
 		}
 	}
+	else if( rResourceURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) == 0 )
+	{
+		// graphic manager url
+		String aTmpStr( rResourceURL.copy( sizeof( UNO_NAME_GRAPHOBJ_URLPREFIX ) - 1 ) );
+		ByteString aUniqueID( aTmpStr, RTL_TEXTENCODING_UTF8 );
+		GraphicObject aGrafObj( aUniqueID );	
+		// Don't call aGrafObj.GetXGraphic because it will call us back 		// here again ( albeit in the "private:memorygraphic" test 
+		// above )
+		::unographic::Graphic* pUnoGraphic = new ::unographic::Graphic;
+		pUnoGraphic->init( aGrafObj.GetGraphic() );
+		xRet = pUnoGraphic;
+	}
 	
 	return xRet;
 }
diff --git offapi/com/sun/star/graphic/GraphicObjectAccess.idl offapi/com/sun/star/graphic/GraphicObjectAccess.idl
new file mode 100644
index 0000000..a01e2cd
--- /dev/null
+++ offapi/com/sun/star/graphic/GraphicObjectAccess.idl
@@ -0,0 +1,47 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: GraphicProvider.idl,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef com_sun_star_graphic_GraphicObjectAccess_idl
+#define com_sun_star_graphic_GraphicObjectAccess_idl
+
+#include <com/sun/star/graphic/XGraphicObject.idl>
+
+module com { module sun { module star { module graphic
+{
+
+service GraphicObjectAccess : XGraphicObject
+{
+    createGraphicObject();
+    createGraphicObjectWithId( [in] string uniqueId );
+};
+
+} ; } ; } ; } ; 
+
+#endif
diff --git offapi/com/sun/star/graphic/XGraphicObject.idl offapi/com/sun/star/graphic/XGraphicObject.idl
new file mode 100644
index 0000000..97b4920
--- /dev/null
+++ offapi/com/sun/star/graphic/XGraphicObject.idl
@@ -0,0 +1,47 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XGraphic.idl,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef com_sun_star_graphic_XGraphicObject_idl
+#define com_sun_star_graphic_XGraphicObject_idl
+
+#include <com/sun/star/uno/XInterface.idl>
+
+module com { module sun { module star { module graphic
+{
+interface XGraphic;
+interface XGraphicObject : ::com::sun::star::uno::XInterface
+{
+    [attribute ] XGraphic Graphic;
+    [attribute, readonly ] string UniqueID;
+};
+
+} ; } ; } ; } ; 
+
+#endif
diff --git offapi/com/sun/star/graphic/makefile.mk offapi/com/sun/star/graphic/makefile.mk
index 600f60d..9224b90 100755
--- offapi/com/sun/star/graphic/makefile.mk
+++ offapi/com/sun/star/graphic/makefile.mk
@@ -53,6 +53,8 @@ IDLFILES= \
 	XGraphic.idl \
 	XGraphicProvider.idl \
 	XGraphicRenderer.idl \
+	XGraphicObject.idl \
+	GraphicObjectAccess.idl \
 	XGraphicTransformer.idl
 	
 # --- Targets ------------------------------------------------------
diff --git toolkit/inc/toolkit/controls/unocontrols.hxx toolkit/inc/toolkit/controls/unocontrols.hxx
index 72c7db8..29ef91a 100644
--- toolkit/inc/toolkit/controls/unocontrols.hxx
+++ toolkit/inc/toolkit/controls/unocontrols.hxx
@@ -54,6 +54,7 @@
 #include <com/sun/star/awt/XCurrencyField.hpp>
 #include <com/sun/star/awt/XPatternField.hpp>
 #include <com/sun/star/awt/XProgressBar.hpp>
+#include <com/sun/star/graphic/XGraphicObject.hpp>
 #include <toolkit/controls/unocontrolmodel.hxx>
 #include <toolkit/controls/unocontrolbase.hxx>
 #include <toolkit/helper/macros.hxx>
@@ -67,6 +68,9 @@
 
 #include <list>
 
+#define UNO_NAME_GRAPHOBJ_URLPREFIX                             "vnd.sun.star.GraphicObject:"
+#define UNO_NAME_GRAPHOBJ_URLPKGPREFIX                  "vnd.sun.star.Package:"
+ 
 
 //	----------------------------------------------------
 //	class UnoControlEditModel
@@ -219,7 +223,8 @@ private:
 	std::list< ::com::sun::star::uno::Reference< ::com::sun::star::awt::XImageConsumer > >  maListeners;
     bool                                                                                    mbAdjustingImagePosition;
     bool                                                                                    mbAdjustingGraphic;
-
+    
+    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject > mxGrfObj;
 protected:
     ImageProducerControlModel() : mbAdjustingImagePosition( false ), mbAdjustingGraphic( false ) { }
     ImageProducerControlModel( const ImageProducerControlModel& _rSource ) : com::sun::star::awt::XImageProducer(), UnoControlModel( _rSource ), mbAdjustingImagePosition( false ), mbAdjustingGraphic( false ) { }
diff --git toolkit/source/controls/dialogcontrol.cxx toolkit/source/controls/dialogcontrol.cxx
index 3fd5723..fcf99e4 100644
--- toolkit/source/controls/dialogcontrol.cxx
+++ toolkit/source/controls/dialogcontrol.cxx
@@ -2118,7 +2118,8 @@ throw (RuntimeException)
 	rbase  >>= baseLocation;
 	rUrl  >>= url;
 
-	if ( url.getLength() > 0 )
+	// Don't adjust GraphicObject url(s)
+	if ( url.getLength() > 0 && url.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) != 0 )
 	{
 		INetURLObject urlObj(baseLocation);
 		urlObj.removeSegment();
diff --git toolkit/source/controls/unocontrols.cxx toolkit/source/controls/unocontrols.cxx
index 821c1b9..8412a98 100644
--- toolkit/source/controls/unocontrols.cxx
+++ toolkit/source/controls/unocontrols.cxx
@@ -37,6 +37,7 @@
 #include <com/sun/star/awt/VisualEffect.hpp>
 #include <com/sun/star/awt/LineEndFormat.hpp>
 #include <com/sun/star/graphic/XGraphicProvider.hpp>
+#include <com/sun/star/graphic/GraphicObjectAccess.hpp>
 #include <com/sun/star/util/Date.hpp>
 
 
@@ -621,6 +622,17 @@ void SAL_CALL ImageProducerControlModel:
                 mbAdjustingGraphic = true;
                 ::rtl::OUString sImageURL;
                 OSL_VERIFY( rValue >>= sImageURL );
+
+                if( ( sImageURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) == 0 ) )
+		{
+		    // graphic manager uniqueid
+                    rtl::OUString sID = sImageURL.copy( sizeof( UNO_NAME_GRAPHOBJ_URLPREFIX ) - 1 );
+                    // get the DefaultContext
+                    ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
+                    mxGrfObj = graphic::GraphicObjectAccess::createGraphicObjectWithId( aContext.getUNOContext(), sID );
+                }
+                else // linked
+                    mxGrfObj = NULL; // release the GraphicObject
                 setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( lcl_getGraphicFromURL_nothrow( sImageURL ) ) );
                 mbAdjustingGraphic = false;
             }
diff --git xmloff/source/forms/elementimport.cxx xmloff/source/forms/elementimport.cxx
index edc0c77..8903f74 100644
--- xmloff/source/forms/elementimport.cxx
+++ xmloff/source/forms/elementimport.cxx
@@ -1136,7 +1136,7 @@ namespace xmloff
 		if ( bMakeAbsolute )
 		{
 			// make a global URL out of the local one
-			::rtl::OUString sAdjustedValue = m_rContext.getGlobalContext().GetAbsoluteReference( _rValue );
+			::rtl::OUString sAdjustedValue = m_rContext.getGlobalContext().ResolveGraphicObjectURL( _rValue, FALSE );
 			OImagePositionImport::handleAttribute( _nNamespaceKey, _rLocalName, sAdjustedValue );
 		}
 		else
diff --git xmloff/source/forms/propertyexport.cxx xmloff/source/forms/propertyexport.cxx
index bedd87f..0b5f7a7 100644
--- xmloff/source/forms/propertyexport.cxx
+++ xmloff/source/forms/propertyexport.cxx
@@ -429,7 +429,9 @@ namespace xmloff
 			
 		::rtl::OUString sTargetLocation = comphelper::getString(m_xProps->getPropertyValue(_sPropertyName));
         if ( sTargetLocation.getLength() )
-		    sTargetLocation = m_rContext.getGlobalContext().GetRelativeReference(sTargetLocation);
+                    // If this isn't a GraphicObject then GetRelativeReference
+                    // will be called anyway ( in AddEmbeddedGraphic )
+		    sTargetLocation = m_rContext.getGlobalContext().AddEmbeddedGraphicObject(sTargetLocation);
 		AddAttribute(OAttributeMetaData::getCommonControlAttributeNamespace(_nProperty)
 					,OAttributeMetaData::getCommonControlAttributeName(_nProperty)
 					, sTargetLocation);
