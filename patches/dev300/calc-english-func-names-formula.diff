diff --git formula/inc/formula/FormulaCompiler.hxx formula/inc/formula/FormulaCompiler.hxx
index 8710847..f897238 100644
--- formula/inc/formula/FormulaCompiler.hxx
+++ formula/inc/formula/FormulaCompiler.hxx
@@ -248,7 +248,8 @@ public:
     inline  FormulaGrammar::Grammar   GetGrammar() const { return meGrammar; }
 
     static void UpdateSeparatorsNative( const rtl::OUString& rSep, const rtl::OUString& rArrayColSep, const rtl::OUString& rArrayRowSep );
-
+    static void ResetNativeSymbols();
+    static void SetNativeSymbols( const OpCodeMapPtr& xMap );
 protected:
     virtual String FindAddInFunction( const String& rUpperName, BOOL bLocalFirst ) const;
     virtual void fillFromAddInCollectionUpperName( NonConstOpCodeMapPtr xMap ) const;
diff --git formula/source/core/api/FormulaCompiler.cxx formula/source/core/api/FormulaCompiler.cxx
index 8df7933..a5f0e8a 100644
--- formula/source/core/api/FormulaCompiler.cxx
+++ formula/source/core/api/FormulaCompiler.cxx
@@ -645,6 +645,7 @@ const String& FormulaCompiler::GetNativeSymbol( OpCode eOp )
 // -----------------------------------------------------------------------------
 void FormulaCompiler::InitSymbolsNative() const
 {
+#if 0 // No point in keeping this since you can now do this from the UI.
     if (mxSymbolsNative.get())
         return;
     //! Experimental!
@@ -659,10 +660,9 @@ void FormulaCompiler::InitSymbolsNative() const
         mxSymbolsNative = mxSymbolsEnglish;
         return;
     }
-    static NonConstOpCodeMapPtr s_sSymbol;
-    if ( !s_sSymbol.get() )
-        lcl_fillNativeSymbols(s_sSymbol);
-    mxSymbolsNative = s_sSymbol;
+#endif
+
+    lcl_fillNativeSymbols(mxSymbolsNative);
 }
 // -----------------------------------------------------------------------------
 void FormulaCompiler::InitSymbolsEnglish() const
@@ -1725,6 +1725,26 @@ void FormulaCompiler::UpdateSeparatorsNative(
     xSymbolsNative->putOpCode(rArrayRowSep, ocArrayRowSep);
 }
 
+void FormulaCompiler::ResetNativeSymbols()
+{
+    NonConstOpCodeMapPtr xSymbolsNative;
+    lcl_fillNativeSymbols(xSymbolsNative, true);
+    lcl_fillNativeSymbols(xSymbolsNative);
+}
+
+void FormulaCompiler::SetNativeSymbols( const OpCodeMapPtr& xMap )
+{
+    NonConstOpCodeMapPtr xSymbolsNative;
+    lcl_fillNativeSymbols(xSymbolsNative);
+    USHORT n = xMap->getSymbolCount();
+    for (USHORT i = 0; i < n; ++i)
+    {
+        OpCode eOp = OpCode(i);
+        const String& rSymbol = xMap->getSymbol(eOp);
+        xSymbolsNative->putOpCode(rSymbol, eOp);
+    }
+}
+
 // -----------------------------------------------------------------------------
 OpCode FormulaCompiler::NextToken()
 {
