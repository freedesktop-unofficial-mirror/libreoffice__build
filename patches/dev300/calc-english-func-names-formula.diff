From c2ed958bc8cc3192ec794985bb747f72772dec6f Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 17:08:12 +0200
Subject: [PATCH 802/878] calc-english-func-names-formula.diff

---
 formula/inc/formula/FormulaCompiler.hxx     |    6 +++-
 formula/source/core/api/FormulaCompiler.cxx |   38 ++++++++++++++++++++++++---
 2 files changed, 38 insertions(+), 6 deletions(-)

diff --git a/formula/inc/formula/FormulaCompiler.hxx b/formula/inc/formula/FormulaCompiler.hxx
index d6da299..c429edc 100644
--- a/formula/inc/formula/FormulaCompiler.hxx
+++ b/formula/inc/formula/FormulaCompiler.hxx
@@ -121,7 +121,8 @@ public:
             mbEnglish = FormulaGrammar::isEnglish( meGrammar);
         }
         virtual ~OpCodeMap();
-        
+
+        void copyFrom( const OpCodeMap& r );
 
         /// Get the symbol String -> OpCode hash map for finds.
         inline const OpCodeHashMap* getHashMap() const { return mpHashMap; }
@@ -245,7 +246,8 @@ public:
     inline  FormulaGrammar::Grammar   GetGrammar() const { return meGrammar; }
 
     static void UpdateSeparatorsNative( const rtl::OUString& rSep, const rtl::OUString& rArrayColSep, const rtl::OUString& rArrayRowSep );
-
+    static void ResetNativeSymbols();
+    static void SetNativeSymbols( const OpCodeMapPtr& xMap );
 protected:
     virtual String FindAddInFunction( const String& rUpperName, BOOL bLocalFirst ) const;
     virtual void fillFromAddInCollectionUpperName( NonConstOpCodeMapPtr xMap ) const;
diff --git a/formula/source/core/api/FormulaCompiler.cxx b/formula/source/core/api/FormulaCompiler.cxx
index cf50635..2e71701 100644
--- a/formula/source/core/api/FormulaCompiler.cxx
+++ b/formula/source/core/api/FormulaCompiler.cxx
@@ -642,6 +642,7 @@ const String& FormulaCompiler::GetNativeSymbol( OpCode eOp )
 // -----------------------------------------------------------------------------
 void FormulaCompiler::InitSymbolsNative() const
 {
+#if 0 // No point in keeping this since you can now do this from the UI.
     if (mxSymbolsNative.get())
         return;
     //! Experimental!
@@ -656,10 +657,9 @@ void FormulaCompiler::InitSymbolsNative() const
         mxSymbolsNative = mxSymbolsEnglish;
         return;
     }
-    static NonConstOpCodeMapPtr s_sSymbol;
-    if ( !s_sSymbol.get() )
-        lcl_fillNativeSymbols(s_sSymbol);
-    mxSymbolsNative = s_sSymbol;
+#endif
+
+    lcl_fillNativeSymbols(mxSymbolsNative);
 }
 // -----------------------------------------------------------------------------
 void FormulaCompiler::InitSymbolsEnglish() const
@@ -820,6 +820,22 @@ FormulaCompiler::OpCodeMap::~OpCodeMap()
     delete mpHashMap;
 }
 // -----------------------------------------------------------------------------
+void FormulaCompiler::OpCodeMap::copyFrom( const OpCodeMap& r )
+{
+    delete mpHashMap;
+    mpHashMap = new OpCodeHashMap(mnSymbols);
+
+    USHORT n = r.getSymbolCount();
+    for (USHORT i = 0; i < n; ++i)
+    {
+        OpCode eOp = OpCode(i);
+        const String& rSymbol = r.getSymbol(eOp);
+        putOpCode(rSymbol, eOp);
+    }
+
+    // TODO: maybe copy the external maps too?
+}
+// -----------------------------------------------------------------------------
 sal_Int32 FormulaCompiler::OpCodeMap::getOpCodeUnknown()
 {
     static const sal_Int32 kOpCodeUnknown = -1;
@@ -1722,6 +1738,20 @@ void FormulaCompiler::UpdateSeparatorsNative(
     xSymbolsNative->putOpCode(rArrayRowSep, ocArrayRowSep);
 }
 
+void FormulaCompiler::ResetNativeSymbols()
+{
+    NonConstOpCodeMapPtr xSymbolsNative;
+    lcl_fillNativeSymbols(xSymbolsNative, true);
+    lcl_fillNativeSymbols(xSymbolsNative);
+}
+
+void FormulaCompiler::SetNativeSymbols( const OpCodeMapPtr& xMap )
+{
+    NonConstOpCodeMapPtr xSymbolsNative;
+    lcl_fillNativeSymbols(xSymbolsNative);
+    xSymbolsNative->copyFrom(*xMap);
+}
+
 // -----------------------------------------------------------------------------
 OpCode FormulaCompiler::NextToken()
 {
-- 
1.7.0.1

