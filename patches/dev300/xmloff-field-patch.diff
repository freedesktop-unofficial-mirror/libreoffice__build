diff --git a/xmloff/source/text/XMLTextMarkImportContext.cxx b/xmloff/source/text/XMLTextMarkImportContext.cxx
index 2dece10..21bd4cc 100644
--- xmloff/source/text/XMLTextMarkImportContext.cxx
+++ xmloff/source/text/XMLTextMarkImportContext.cxx
@@ -50,6 +50,7 @@
 
 #include <com/sun/star/text/XFormField.hpp>
 
+#include <../../../sw/inc/ecmaflds.hxx>  // HACKYYYYYYYYY
 
 using ::rtl::OUString;
 using ::rtl::OUStringBuffer;
@@ -136,6 +137,33 @@ static SvXMLEnumMapEntry __READONLY_DATA lcl_aMarkTypeMap[] =
 	{ XML_TOKEN_INVALID,    		0 },
 };
 
+
+static const char *lcl_getFormFieldmarkName(rtl::OUString &name) 
+{
+    static const char sCheckbox[]=ECMA_FORMCHECKBOX;
+    static const char sFormDropDown[]=ECMA_FORMDROPDOWN;
+    if (name.compareToAscii("msoffice.field.FORMCHECKBOX")==0)
+	return sCheckbox;
+    else if (name.compareToAscii(ECMA_FORMCHECKBOX)==0)
+	return sCheckbox;
+    if (name.compareToAscii(ECMA_FORMDROPDOWN)==0)
+	return sFormDropDown;
+    else
+	return NULL;
+}
+
+static rtl::OUString lcl_getFieldmarkName(rtl::OUString &name) 
+{
+    static const char sFormtext[]=ECMA_FORMTEXT;
+    if (name.compareToAscii("msoffice.field.FORMTEXT")==0)
+	return rtl::OUString::createFromAscii(sFormtext);
+    else if (name.compareToAscii(ECMA_FORMTEXT)==0)
+	return rtl::OUString::createFromAscii(sFormtext);
+    else
+	return name;
+}
+
+
 void XMLTextMarkImportContext::StartElement(
 	const Reference<XAttributeList> & xAttrList)
 {
@@ -187,7 +215,8 @@ void XMLTextMarkImportContext::EndElement()
 				case TypeFieldmark:
 				case TypeBookmark:
 					{
-						bool bImportAsField=((lcl_MarkType)nTmp==TypeFieldmark && sFieldName.compareToAscii("msoffice.field.FORMCHECKBOX")==0); // for now only import FORMCHECKBOX boxes
+					        const char *formFieldmarkName=lcl_getFormFieldmarkName(sFieldName);
+						bool bImportAsField=((lcl_MarkType)nTmp==TypeFieldmark && formFieldmarkName!=NULL); //@TODO handle abbreviation cases..
 						// export point bookmark
 						Reference<XInterface> xIfc=CreateAndInsertMark(GetImport(),
 										(bImportAsField?sAPI_formfieldmark:sAPI_bookmark),
@@ -198,10 +227,8 @@ void XMLTextMarkImportContext::EndElement()
 							if (xIfc.is() && bImportAsField) {
 								// setup fieldmark...
 								Reference< ::com::sun::star::text::XFormField> xFormField(xIfc, UNO_QUERY);
-								xFormField->setType(1); // Checkbox...
+								xFormField->setFieldType(rtl::OUString::createFromAscii(formFieldmarkName)); 
 								if (xFormField.is() && rHelper.hasCurrentFieldCtx()) {
-//									xFormField->setDescription(::rtl::OUString::createFromAscii("HELLO CHECKBOX"));
-//									xFormField->setRes(1); 
 									rHelper.setCurrentFieldParamsTo(xFormField);
 								}
 							}
@@ -248,10 +275,6 @@ void XMLTextMarkImportContext::EndElement()
 								xInsertionCursor, UNO_QUERY);
 
 							bool bImportAsField=((lcl_MarkType)nTmp==TypeFieldmarkEnd && rHelper.hasCurrentFieldCtx());
-							if (bImportAsField) {
-								::rtl::OUString currentFieldType=rHelper.getCurrentFieldType();
-								bImportAsField=currentFieldType.compareToAscii("msoffice.field.FORMTEXT")==0; // for now only import FORMTEXT boxes
-							}
 
 							// insert reference
 							Reference<XInterface> xIfc=CreateAndInsertMark(GetImport(),
@@ -264,10 +287,12 @@ void XMLTextMarkImportContext::EndElement()
 								if (xIfc.is() && bImportAsField) {
 									// setup fieldmark...
 									Reference< ::com::sun::star::text::XFormField> xFormField(xIfc, UNO_QUERY);
-									xFormField->setType(0); // Text
 									if (xFormField.is() && rHelper.hasCurrentFieldCtx()) {
-										rHelper.setCurrentFieldParamsTo(xFormField);
-//									xFormField->setDescription(::rtl::OUString::createFromAscii("HELLO"));
+									    rtl::OUString givenTypeName=rHelper.getCurrentFieldType();
+									    rtl::OUString fieldmarkTypeName=lcl_getFieldmarkName(givenTypeName);
+									    
+									    xFormField->setFieldType(fieldmarkTypeName); 
+									    rHelper.setCurrentFieldParamsTo(xFormField);
 									}
 								}
 								rHelper.popFieldCtx();
diff --git a/xmloff/source/text/txtimp.cxx b/xmloff/source/text/txtimp.cxx
index f0889dd..c4f1530 100644
--- xmloff/source/text/txtimp.cxx
+++ xmloff/source/text/txtimp.cxx
@@ -2235,14 +2235,10 @@ void XMLTextImportHelper::setCurrentFieldParamsTo(::com::sun::star::uno::Referen
 	if (!aFieldStack.empty() && xFormField.is()) {
 		field_params_t &params=aFieldStack.top().second;
 		for (field_params_t::iterator i=params.begin();i!=params.end();i++) {
-			rtl::OUString name=i->first;
-			rtl::OUString value=i->second;
-			if (name.compareToAscii("Description")==0){
-				xFormField->setDescription(value);
-			} else if (name.compareToAscii("Result")==0){
-				xFormField->setRes((sal_Int16)value.toInt32());
-			}
-
+		    rtl::OString aOString1 = ::rtl::OUStringToOString (i->first, RTL_TEXTENCODING_UTF8);
+		    rtl::OString aOString2 = ::rtl::OUStringToOString (i->second, RTL_TEXTENCODING_UTF8);
+		    printf("param[\"%s\"]=\"%s\"\n", aOString1.getStr(), aOString2.getStr());
+		    xFormField->addParam(i->first, i->second, false);
 		}
 	}
 }
diff --git a/xmloff/source/text/txtparae.cxx b/xmloff/source/text/txtparae.cxx
index d93d797..ad6f544 100644
--- xmloff/source/text/txtparae.cxx
+++ xmloff/source/text/txtparae.cxx
@@ -2277,14 +2277,16 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
 				}
 				Reference< ::com::sun::star::text::XFormField > xFormField(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
 				if (xFormField.is()) {
-					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, ::rtl::OUString::createFromAscii("msoffice.field.FORMTEXT"));
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, xFormField->getFieldType());
 				}
 				GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_START, sal_False);
 				if (xFormField.is()) {
-					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Description"));
-					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, xFormField->getDescription());
+				    for(sal_Int16 i=0;i<xFormField->getParamCount();i++) {
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, xFormField->getParamName(i));
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, xFormField->getParamValue(i));
 					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
 					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+				    }
 				}
 				GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_START, sal_False);
 			}
@@ -2301,27 +2303,16 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
 				}
 				Reference< ::com::sun::star::text::XFormField > xFormField(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
 				if (xFormField.is()) {
-					sal_Int16 fftype=xFormField->getType();
-					switch (fftype) {
-						case 1:
-							GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, ::rtl::OUString::createFromAscii("msoffice.field.FORMCHECKBOX"));
-						break;
-						default:
-							DBG_ASSERT(false, "hey ---- add your export stuff here!!");
-						break;
-					}
+				    GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, xFormField->getFieldType());
 				}
 				GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK, sal_False);
 				if (xFormField.is()) {
-					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Description"));
-					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, xFormField->getDescription());
-					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
-					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
-
-					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Result"));
-					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, ::rtl::OUString::valueOf((sal_Int32 )xFormField->getRes()));
+				    for(sal_Int16 i=0;i<xFormField->getParamCount();i++) {
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, xFormField->getParamName(i));
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, xFormField->getParamValue(i));
 					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
 					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+				    }
 				}
 				GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK, sal_False);
 			}
