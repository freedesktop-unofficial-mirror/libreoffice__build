---
 sc/source/filter/excel/xechart.cxx |   48 ++++++++++++++++++++++-------------
 sc/source/filter/excel/xichart.cxx |   29 ++++++++++++++++++---
 sc/source/filter/inc/xechart.hxx   |    7 +++--
 sc/source/filter/inc/xichart.hxx   |    2 +-
 sc/source/filter/inc/xlchart.hxx   |    2 +
 5 files changed, 61 insertions(+), 27 deletions(-)

diff --git sc/source/filter/excel/xechart.cxx sc/source/filter/excel/xechart.cxx
index 4295aca..76a2cfc 100644
--- sc/source/filter/excel/xechart.cxx
+++ sc/source/filter/excel/xechart.cxx
@@ -156,16 +156,27 @@ void lclWriteChFrBlockRecord( XclExpStream& rStrm, const XclChFrBlock& rFrBlock,
 }
 
 template< typename Type >
-inline bool lclIsAutoAnyOrGetValue( Type& rValue, const Any& rAny )
+inline bool lclIsAutoAnyOrGetValue( Type& rValue, const Any& rAny, bool bPercent )
 {
-    return !rAny.hasValue() || !(rAny >>= rValue);
+    if (!rAny.hasValue())
+        return true;
+
+    if (rAny >>= rValue)
+    {
+        if (bPercent)
+            rValue *= 100.0;
+        return false;
+    }
+    else
+        return true;
 }
 
-bool lclIsAutoAnyOrGetScaledValue( double& rfValue, const Any& rAny, bool bLogScale )
+bool lclIsAutoAnyOrGetScaledValue( double& rfValue, const Any& rAny, bool bLogScale, bool bPercent )
 {
-    bool bIsAuto = lclIsAutoAnyOrGetValue( rfValue, rAny );
+    bool bIsAuto = lclIsAutoAnyOrGetValue( rfValue, rAny, bPercent );
     if( !bIsAuto && bLogScale )
         rfValue = log( rfValue ) / log( 10.0 );
+
     return bIsAuto;
 }
 
@@ -2550,7 +2561,7 @@ void XclExpChLabelRange::Convert( const ScaleData& rScaleData, bool bMirrorOrien
 {
     // origin
     double fOrigin = 0.0;
-    if( !lclIsAutoAnyOrGetValue( fOrigin, rScaleData.Origin ) )
+    if( !lclIsAutoAnyOrGetValue( fOrigin, rScaleData.Origin, false ) )
         maData.mnCross = limit_cast< sal_uInt16 >( fOrigin, 1, 31999 );
 
     // reverse order
@@ -2587,31 +2598,31 @@ XclExpChValueRange::XclExpChValueRange( const XclExpChRoot& rRoot ) :
 {
 }
 
-void XclExpChValueRange::Convert( const ScaleData& rScaleData )
+void XclExpChValueRange::Convert( const ScaleData& rScaleData, bool bPercent )
 {
     // scaling algorithm
     bool bLogScale = ScfApiHelper::GetServiceName( rScaleData.Scaling ) == SERVICE_CHART2_LOGSCALING;
     ::set_flag( maData.mnFlags, EXC_CHVALUERANGE_LOGSCALE, bLogScale );
 
     // min/max
-    bool bAutoMin = lclIsAutoAnyOrGetScaledValue( maData.mfMin, rScaleData.Minimum, bLogScale );
+    bool bAutoMin = lclIsAutoAnyOrGetScaledValue( maData.mfMin, rScaleData.Minimum, bLogScale, bPercent );
     ::set_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMIN, bAutoMin );
-    bool bAutoMax = lclIsAutoAnyOrGetScaledValue( maData.mfMax, rScaleData.Maximum, bLogScale );
+    bool bAutoMax = lclIsAutoAnyOrGetScaledValue( maData.mfMax, rScaleData.Maximum, bLogScale, bPercent );
     ::set_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMAX, bAutoMax );
 
     // origin
-    bool bAutoCross = lclIsAutoAnyOrGetScaledValue( maData.mfCross, rScaleData.Origin, bLogScale );
+    bool bAutoCross = lclIsAutoAnyOrGetScaledValue( maData.mfCross, rScaleData.Origin, bLogScale, bPercent );
     ::set_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOCROSS, bAutoCross );
 
     // major increment
     const IncrementData& rIncrementData = rScaleData.IncrementData;
-    bool bAutoMajor = lclIsAutoAnyOrGetValue( maData.mfMajorStep, rIncrementData.Distance ) || (maData.mfMajorStep <= 0.0);
+    bool bAutoMajor = lclIsAutoAnyOrGetValue( maData.mfMajorStep, rIncrementData.Distance, bPercent ) || (maData.mfMajorStep <= 0.0);
     ::set_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMAJOR, bAutoMajor );
     // minor increment
     const Sequence< SubIncrement >& rSubIncrementSeq = rIncrementData.SubIncrements;
     sal_Int32 nCount = 0;
     bool bAutoMinor = bLogScale || bAutoMajor || (rSubIncrementSeq.getLength() < 1) ||
-        lclIsAutoAnyOrGetValue( nCount, rSubIncrementSeq[ 0 ].IntervalCount ) || (nCount < 1);
+        lclIsAutoAnyOrGetValue( nCount, rSubIncrementSeq[ 0 ].IntervalCount, false ) || (nCount < 1);
     if( !bAutoMinor )
         maData.mfMinorStep = maData.mfMajorStep / nCount;
     ::set_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMINOR, bAutoMinor );
@@ -2786,7 +2797,7 @@ void XclExpChAxis::SetRotation( sal_uInt16 nRotation )
         mxTick->SetRotation( nRotation );
 }
 
-void XclExpChAxis::Convert( Reference< XAxis > xAxis, Reference< XAxis > xCrossingAxis, const XclChExtTypeInfo& rTypeInfo )
+void XclExpChAxis::Convert( Reference< XAxis > xAxis, Reference< XAxis > xCrossingAxis, const XclChExtTypeInfo& rTypeInfo, bool bPercent )
 {
     ScfPropertySet aAxisProp( xAxis );
     bool bCategoryAxis = ((GetAxisType() == EXC_CHAXIS_X) && rTypeInfo.mbCategoryAxis) || (GetAxisType() == EXC_CHAXIS_Z);
@@ -2816,7 +2827,7 @@ void XclExpChAxis::Convert( Reference< XAxis > xAxis, Reference< XAxis > xCrossi
     {
         mxValueRange.reset( new XclExpChValueRange( GetChRoot() ) );
         if( xAxis.is() )
-            mxValueRange->Convert( xAxis->getScaleData() );
+            mxValueRange->Convert( xAxis->getScaleData(), bPercent );
         // get position of crossing axis on this axis from passed axis object
         if( aCrossingProp.Is() )
             mxValueRange->ConvertAxisPosition( aCrossingProp );
@@ -2991,10 +3002,10 @@ sal_uInt16 XclExpChAxesSet::Convert( Reference< XDiagram > xDiagram, sal_uInt16
                 // create axes according to chart type (no axes for pie and donut charts)
                 if( rTypeInfo.meTypeCateg != EXC_CHTYPECATEG_PIE )
                 {
-                    ConvertAxis( mxXAxis, EXC_CHAXIS_X, mxXAxisTitle, EXC_CHOBJLINK_XAXIS, xCoordSystem, rTypeInfo, EXC_CHART_AXIS_Y );
-                    ConvertAxis( mxYAxis, EXC_CHAXIS_Y, mxYAxisTitle, EXC_CHOBJLINK_YAXIS, xCoordSystem, rTypeInfo, EXC_CHART_AXIS_X );
+                    ConvertAxis( mxXAxis, EXC_CHAXIS_X, mxXAxisTitle, EXC_CHOBJLINK_XAXIS, xCoordSystem, rTypeInfo, EXC_CHART_AXIS_Y, bPercent );
+                    ConvertAxis( mxYAxis, EXC_CHAXIS_Y, mxYAxisTitle, EXC_CHOBJLINK_YAXIS, xCoordSystem, rTypeInfo, EXC_CHART_AXIS_X, bPercent );
                     if( pGroup->Is3dDeepChart() )
-                        ConvertAxis( mxZAxis, EXC_CHAXIS_Z, mxZAxisTitle, EXC_CHOBJLINK_ZAXIS, xCoordSystem, rTypeInfo, EXC_CHART_AXIS_NONE );
+                        ConvertAxis( mxZAxis, EXC_CHAXIS_Z, mxZAxisTitle, EXC_CHOBJLINK_ZAXIS, xCoordSystem, rTypeInfo, EXC_CHART_AXIS_NONE, bPercent );
                 }
 
                 // X axis category ranges
@@ -3102,7 +3113,8 @@ void XclExpChAxesSet::ConvertAxis(
         XclExpChAxisRef& rxChAxis, sal_uInt16 nAxisType,
         XclExpChTextRef& rxChAxisTitle, sal_uInt16 nTitleTarget,
         Reference< XCoordinateSystem > xCoordSystem, const XclChExtTypeInfo& rTypeInfo,
-        sal_Int32 nCrossingAxisDim )
+        sal_Int32 nCrossingAxisDim,
+        bool bPercent )
 {
     // create and convert axis object
     rxChAxis.reset( new XclExpChAxis( GetChRoot(), nAxisType ) );
@@ -3110,7 +3122,7 @@ void XclExpChAxesSet::ConvertAxis(
     sal_Int32 nApiAxesSetIdx = GetApiAxesSetIndex();
     Reference< XAxis > xAxis = lclGetApiAxis( xCoordSystem, nApiAxisDim, nApiAxesSetIdx );
     Reference< XAxis > xCrossingAxis = lclGetApiAxis( xCoordSystem, nCrossingAxisDim, nApiAxesSetIdx );
-    rxChAxis->Convert( xAxis, xCrossingAxis, rTypeInfo );
+    rxChAxis->Convert( xAxis, xCrossingAxis, rTypeInfo, bPercent );
 
     // create and convert axis title
     Reference< XTitled > xTitled( xAxis, UNO_QUERY );
diff --git sc/source/filter/excel/xichart.cxx sc/source/filter/excel/xichart.cxx
index 1eaa250..8a47c21 100755
--- sc/source/filter/excel/xichart.cxx
+++ sc/source/filter/excel/xichart.cxx
@@ -2244,6 +2244,15 @@ Reference< XChartType > XclImpChType::CreateChartType( Reference< XDiagram > xDi
     // additional properties
     switch( maTypeInfo.meTypeCateg )
     {
+        case EXC_CHTYPECATEG_LINE:
+        {
+            ScfPropertySet aTypeProp(xChartType);
+            bool bStacked = (maData.mnFlags & EXC_CHLINE_STACKED);
+            bool bPercent = (maData.mnFlags & EXC_CHLINE_PERCENT);
+            aTypeProp.SetBoolProperty(EXC_CHPROP_STACKED, bStacked);
+            aTypeProp.SetBoolProperty(EXC_CHPROP_PERCENT, bPercent);
+        }
+        break;
         case EXC_CHTYPECATEG_BAR:
         {
             ScfPropertySet aTypeProp( xChartType );
@@ -2252,6 +2261,10 @@ Reference< XChartType > XclImpChType::CreateChartType( Reference< XDiagram > xDi
             aTypeProp.SetProperty( EXC_CHPROP_OVERLAPSEQ, aInt32Seq );
             aInt32Seq[ 0 ] = aInt32Seq[ 1 ] = maData.mnGap;
             aTypeProp.SetProperty( EXC_CHPROP_GAPWIDTHSEQ, aInt32Seq );
+            bool bStacked = (maData.mnFlags & EXC_CHBAR_STACKED);
+            bool bPercent = (maData.mnFlags & EXC_CHBAR_PERCENT);
+            aTypeProp.SetBoolProperty(EXC_CHPROP_STACKED, bStacked);
+            aTypeProp.SetBoolProperty(EXC_CHPROP_PERCENT, bPercent);
         }
         break;
         case EXC_CHTYPECATEG_PIE:
@@ -2879,7 +2892,7 @@ void XclImpChValueRange::ReadChValueRange( XclImpStream& rStrm )
             >> maData.mnFlags;
 }
 
-void XclImpChValueRange::Convert( ScaleData& rScaleData, bool bMirrorOrient ) const
+void XclImpChValueRange::Convert( ScaleData& rScaleData, bool bMirrorOrient, bool bPercent ) const
 {
     // scaling algorithm
     bool bLogScale = ::get_flag( maData.mnFlags, EXC_CHVALUERANGE_LOGSCALE );
@@ -2887,15 +2900,18 @@ void XclImpChValueRange::Convert( ScaleData& rScaleData, bool bMirrorOrient ) co
     rScaleData.Scaling.set( ScfApiHelper::CreateInstance( aScalingService ), UNO_QUERY );
 
     // min/max
-    lclSetExpValueOrClearAny( rScaleData.Minimum, maData.mfMin, bLogScale, ::get_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMIN ) );
-    lclSetExpValueOrClearAny( rScaleData.Maximum, maData.mfMax, bLogScale, ::get_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMAX ) );
+    double fMinVal = bPercent ? maData.mfMin/100.0 : maData.mfMin;
+    double fMaxVal = bPercent ? maData.mfMax/100.0 : maData.mfMax;
+    lclSetExpValueOrClearAny( rScaleData.Minimum, fMinVal, bLogScale, ::get_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMIN ) );
+    lclSetExpValueOrClearAny( rScaleData.Maximum, fMaxVal, bLogScale, ::get_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMAX ) );
 
     // increment
     bool bAutoMajor = ::get_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMAJOR );
     bool bAutoMinor = ::get_flag( maData.mnFlags, EXC_CHVALUERANGE_AUTOMINOR );
     // major increment
     IncrementData& rIncrementData = rScaleData.IncrementData;
-    lclSetValueOrClearAny( rIncrementData.Distance, maData.mfMajorStep, bAutoMajor );
+    double fMajorStep = bPercent ? maData.mfMajorStep/100.0 : maData.mfMajorStep;
+    lclSetValueOrClearAny( rIncrementData.Distance, fMajorStep, bAutoMajor );
     // minor increment
     Sequence< SubIncrement >& rSubIncrementSeq = rIncrementData.SubIncrements;
     rSubIncrementSeq.realloc( 1 );
@@ -3171,8 +3187,11 @@ Reference< XAxis > XclImpChAxis::CreateAxis( const XclImpChTypeGroup& rTypeGroup
             break;
             case cssc2::AxisType::REALNUMBER:
             case cssc2::AxisType::PERCENT:
+            {
+                bool bPercent = (aScaleData.AxisType == cssc2::AxisType::PERCENT);
                 // #i85167# pie/donut charts have reversed rotation direction (at Y axis!)
-                mxValueRange->Convert( aScaleData, rTypeInfo.meTypeCateg == EXC_CHTYPECATEG_PIE );
+                mxValueRange->Convert( aScaleData, rTypeInfo.meTypeCateg == EXC_CHTYPECATEG_PIE, bPercent );
+            }
             break;
             default:
                 DBG_ERRORFILE( "XclImpChAxis::CreateAxis - unknown axis type" );
diff --git sc/source/filter/inc/xechart.hxx sc/source/filter/inc/xechart.hxx
index 2bcdb99..4e265f0 100644
--- sc/source/filter/inc/xechart.hxx
+++ sc/source/filter/inc/xechart.hxx
@@ -1035,7 +1035,7 @@ public:
     explicit            XclExpChValueRange( const XclExpChRoot& rRoot );
 
     /** Converts value axis scaling settings. */
-    void                Convert( const ::com::sun::star::chart2::ScaleData& rScaleData );
+    void                Convert( const ::com::sun::star::chart2::ScaleData& rScaleData, bool bPercent );
     /** Converts position settings of a crossing axis at this axis. */
     void                ConvertAxisPosition( const ScfPropertySet& rPropSet );
 
@@ -1095,7 +1095,7 @@ public:
     virtual void        SetRotation( sal_uInt16 nRotation );
 
     /** Converts formatting and scaling settings from the passed axis. */
-    void                Convert( XAxisRef xAxis, XAxisRef xCrossingAxis, const XclChExtTypeInfo& rTypeInfo );
+    void                Convert( XAxisRef xAxis, XAxisRef xCrossingAxis, const XclChExtTypeInfo& rTypeInfo, bool bPercent );
     /** Converts and writes 3D wall/floor properties from the passed diagram. */
     void                ConvertWall( XDiagramRef xDiagram );
 
@@ -1168,7 +1168,8 @@ private:
     void                ConvertAxis( XclExpChAxisRef& rxChAxis, sal_uInt16 nAxisType,
                             XclExpChTextRef& rxChAxisTitle, sal_uInt16 nTitleTarget,
                             XCoordSystemRef xCoordSystem, const XclChExtTypeInfo& rTypeInfo,
-                            sal_Int32 nCrossingAxisDim );
+                            sal_Int32 nCrossingAxisDim,
+                            bool bPercent );
 
     virtual void        WriteBody( XclExpStream& rStrm );
 
diff --git sc/source/filter/inc/xichart.hxx sc/source/filter/inc/xichart.hxx
index 72e5d8c..25b8f42 100644
--- sc/source/filter/inc/xichart.hxx
+++ sc/source/filter/inc/xichart.hxx
@@ -1157,7 +1157,7 @@ public:
     /** Reads the CHVALUERANGE record (numeric axis scaling properties). */
     void                ReadChValueRange( XclImpStream& rStrm );
     /** Converts value axis scaling settings. */
-    void                Convert( ScaleData& rScaleData, bool bMirrorOrient ) const;
+    void                Convert( ScaleData& rScaleData, bool bMirrorOrient, bool bPercent ) const;
     /** Converts position settings of this axis at a crossing axis. */
     void                ConvertAxisPosition( ScfPropertySet& rPropSet ) const;
 
diff --git sc/source/filter/inc/xlchart.hxx sc/source/filter/inc/xlchart.hxx
index f039c74..f76b812 100755
--- sc/source/filter/inc/xlchart.hxx
+++ sc/source/filter/inc/xlchart.hxx
@@ -121,6 +121,7 @@ class XclRoot;
 #define EXC_CHPROP_OFFSET                   CREATE_OUSTRING( "Offset" )
 #define EXC_CHPROP_OVERLAPSEQ               CREATE_OUSTRING( "OverlapSequence" )
 #define EXC_CHPROP_PERCENTAGENUMFMT         CREATE_OUSTRING( "PercentageNumberFormat" )
+#define EXC_CHPROP_PERCENT                  CREATE_OUSTRING( "Percent" )
 #define EXC_CHPROP_PERCENTDIAGONAL          CREATE_OUSTRING( "PercentDiagonal" )
 #define EXC_CHPROP_PERSPECTIVE              CREATE_OUSTRING( "Perspective" )
 #define EXC_CHPROP_POSITIVEERROR            CREATE_OUSTRING( "PositiveError" )
@@ -136,6 +137,7 @@ class XclRoot;
 #define EXC_CHPROP_SHOWHIGHLOW              CREATE_OUSTRING( "ShowHighLow" )
 #define EXC_CHPROP_SHOWNEGATIVEERROR        CREATE_OUSTRING( "ShowNegativeError" )
 #define EXC_CHPROP_SHOWPOSITIVEERROR        CREATE_OUSTRING( "ShowPositiveError" )
+#define EXC_CHPROP_STACKED                  CREATE_OUSTRING( "Stacked" )
 #define EXC_CHPROP_STACKCHARACTERS          CREATE_OUSTRING( "StackCharacters" )
 #define EXC_CHPROP_STACKINGDIR              CREATE_OUSTRING( "StackingDirection" )
 #define EXC_CHPROP_STARTINGANGLE            CREATE_OUSTRING( "StartingAngle" )
-- 
1.7.0.1

