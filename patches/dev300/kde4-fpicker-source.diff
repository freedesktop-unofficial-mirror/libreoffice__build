diff --git fpicker/source/generic/fpicker.cxx fpicker/source/generic/fpicker.cxx
index 1129369..b4a96d6 100644
--- fpicker/source/generic/fpicker.cxx
+++ fpicker/source/generic/fpicker.cxx
@@ -68,6 +68,8 @@ static OUString FilePicker_getSystemPickerServiceName()
 		return OUString (RTL_CONSTASCII_USTRINGPARAM ("com.sun.star.ui.dialogs.GtkFilePicker"));
 	else if (aDesktopEnvironment.equalsIgnoreAsciiCaseAscii ("kde"))
 		return OUString (RTL_CONSTASCII_USTRINGPARAM ("com.sun.star.ui.dialogs.KDEFilePicker"));
+	else if (aDesktopEnvironment.equalsIgnoreAsciiCaseAscii ("kde4"))
+		return OUString (RTL_CONSTASCII_USTRINGPARAM ("com.sun.star.ui.dialogs.KDE4FilePicker"));
     else if (aDesktopEnvironment.equalsIgnoreAsciiCaseAscii ("macosx"))
         return OUString (RTL_CONSTASCII_USTRINGPARAM ("com.sun.star.ui.dialogs.AquaFilePicker"));
 #endif
diff --git fpicker/source/unx/kde/makefile.mk fpicker/source/unx/kde/makefile.mk
index 680e0f6..f4a113a 100644
--- fpicker/source/unx/kde/makefile.mk
+++ fpicker/source/unx/kde/makefile.mk
@@ -96,9 +96,10 @@ SLOFILES =\
 APP1TARGET=$(TARGET)
 APP1OBJS=$(SLOFILES)
 APP1RPATH=BRAND
+APP1LINKFLAGS+=$(KDE_LIBS)
 APP1STDLIBS=\
 			$(SALLIB) \
-			$(KDE_LIBS) -lkio
+			-lkio
 
 
 .ENDIF # "$(GUIBASE)" != "unx" || "$(ENABLE_KDE)" != "TRUE"
diff --git fpicker/source/unx/kde4/FPServiceInfo.hxx fpicker/source/unx/kde4/FPServiceInfo.hxx
new file mode 100644
index 0000000..59804ea
--- /dev/null
+++ fpicker/source/unx/kde4/FPServiceInfo.hxx
@@ -0,0 +1,74 @@
+/*************************************************************************
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#pragma once
+
+// the service names
+#define FILE_PICKER_SERVICE_NAME "com.sun.star.ui.dialogs.KDE4FilePicker"
+
+// the implementation names		
+#define FILE_PICKER_IMPL_NAME    "com.sun.star.ui.dialogs.KDE4FilePicker"
+
+// the registry key names
+// a key under which this service will be registered,
+// Format: -> "/ImplName/UNO/SERVICES/ServiceName"
+//  <Implementation-Name></UNO/SERVICES/><Service-Name> 
+#define FILE_PICKER_REGKEY_NAME  "/com.sun.star.ui.dialogs.KDE4FilePickerImpl/UNO/SERVICES/com.sun.star.ui.dialogs.KDE4FilePicker"
diff --git fpicker/source/unx/kde4/KDE4FPEntry.cxx fpicker/source/unx/kde4/KDE4FPEntry.cxx
new file mode 100644
index 0000000..9a75688
--- /dev/null
+++ fpicker/source/unx/kde4/KDE4FPEntry.cxx
@@ -0,0 +1,136 @@
+/*************************************************************************
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include <cppuhelper/factory.hxx>
+
+#include <com/sun/star/container/XSet.hpp>
+
+#include <osl/diagnose.h>
+
+#include "KDE4FilePicker.hxx"
+#include "FPServiceInfo.hxx"
+
+using namespace ::rtl;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::container;
+using namespace ::com::sun::star::lang;
+using namespace ::com::sun::star::registry;
+using namespace ::cppu;
+using ::com::sun::star::ui::dialogs::XFilePicker;
+
+static Reference< XInterface > SAL_CALL createInstance( const Reference< XMultiServiceFactory >& serviceManager )
+{
+    return Reference< XInterface >(static_cast< XFilePicker* >( new KDE4FilePicker( serviceManager ) ) );
+}
+
+// the three uno functions that will be exported
+extern "C" 
+{
+	void SAL_CALL component_getImplementationEnvironment( const sal_Char ** ppEnvTypeName, uno_Environment ** ppEnv )
+	{
+		*ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;
+	}
+
+	sal_Bool SAL_CALL component_writeInfo( void* pServiceManager, void* pRegistryKey )
+	{
+		sal_Bool bRetVal = sal_True;
+
+		if ( pRegistryKey )
+		{
+			try
+			{
+				Reference< XRegistryKey > pXNewKey( static_cast< XRegistryKey* >( pRegistryKey ) );				
+				pXNewKey->createKey( OUString::createFromAscii( FILE_PICKER_REGKEY_NAME ) );
+			}
+			catch( InvalidRegistryException& )
+			{			
+				OSL_ENSURE( sal_False, "InvalidRegistryException caught" );			
+				bRetVal = sal_False;
+			}
+		}
+
+		return bRetVal;
+	}
+
+	void* SAL_CALL component_getFactory( const sal_Char* pImplName, uno_Interface* pSrvManager, uno_Interface* pRegistryKey )
+	{
+		void* pRet = 0;
+
+		if ( pSrvManager && ( 0 == rtl_str_compare( pImplName, FILE_PICKER_IMPL_NAME ) ) )
+		{
+			Sequence< OUString > aSNS( 1 );
+			aSNS.getArray( )[0] = OUString::createFromAscii( FILE_PICKER_SERVICE_NAME );		
+
+			Reference< XSingleServiceFactory > xFactory ( createSingleFactory(
+						reinterpret_cast< XMultiServiceFactory* > ( pSrvManager ),
+						OUString::createFromAscii( pImplName ),
+						createInstance,
+						aSNS ) );
+			if ( xFactory.is() )
+			{
+				xFactory->acquire();
+				pRet = xFactory.get();
+			}			
+		}
+
+		return pRet;
+	}
+}
diff --git fpicker/source/unx/kde4/KDE4FilePicker.cxx fpicker/source/unx/kde4/KDE4FilePicker.cxx
new file mode 100644
index 0000000..6c382c8
--- /dev/null
+++ fpicker/source/unx/kde4/KDE4FilePicker.cxx
@@ -0,0 +1,717 @@
+/*************************************************************************
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): Jan Holesovsky <kendy@openoffice.org>
+ *
+ *
+ ************************************************************************/
+
+//////////////////////////////////////////////////////////////////////////
+// includes
+//////////////////////////////////////////////////////////////////////////
+
+#include <com/sun/star/lang/DisposedException.hpp>
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#include <cppuhelper/interfacecontainer.h>
+#include <com/sun/star/ui/dialogs/TemplateDescription.hpp>
+#include <com/sun/star/ui/dialogs/CommonFilePickerElementIds.hpp>
+#include <com/sun/star/ui/dialogs/ExtendedFilePickerElementIds.hpp>
+#include <com/sun/star/ui/dialogs/ControlActions.hpp>
+#include <com/sun/star/ui/dialogs/ExecutableDialogResults.hpp>
+
+#include <svtools/svtools.hrc>
+
+#include <vos/mutex.hxx>
+
+#include <vcl/svapp.hxx>
+#include <vcl/sysdata.hxx>
+#include <vcl/syswin.hxx>
+
+#include "KDE4FilePicker.hxx"
+#include "FPServiceInfo.hxx"
+
+/* ********* Hack, but needed because of conflicting types... */
+#define Region QtXRegion
+
+//kde has an enum that uses this...OO does too
+#undef SETTINGS_MOUSE
+
+#include <kfiledialog.h>
+#include <kwindowsystem.h>
+#include <kapplication.h>
+#include <kfilefiltercombo.h>
+
+#include <QWidget>
+#include <QCheckBox>
+#include <QGridLayout>
+
+#undef Region
+
+using namespace ::com::sun::star;
+
+using namespace ::com::sun::star::ui::dialogs;
+using namespace ::com::sun::star::ui::dialogs::TemplateDescription;
+
+using namespace ::com::sun::star;
+using namespace ::com::sun::star::ui::dialogs;
+using namespace ::com::sun::star::ui::dialogs::TemplateDescription;
+using namespace ::com::sun::star::ui::dialogs::ExtendedFilePickerElementIds;
+using namespace ::com::sun::star::ui::dialogs::CommonFilePickerElementIds;
+using namespace ::com::sun::star::lang;
+using namespace ::com::sun::star::beans;
+using namespace ::com::sun::star::uno;
+
+//////////////////////////////////////////////////////////////////////////
+// helper functions
+//////////////////////////////////////////////////////////////////////////
+
+namespace
+{
+    // controling event notifications    
+    const bool STARTUP_SUSPENDED = true;
+    const bool STARTUP_ALIVE     = false;
+
+    uno::Sequence<rtl::OUString> SAL_CALL FilePicker_getSupportedServiceNames()
+    {
+        uno::Sequence<rtl::OUString> aRet(3);
+        aRet[0] = rtl::OUString::createFromAscii("com.sun.star.ui.dialogs.FilePicker");
+        aRet[1] = rtl::OUString::createFromAscii("com.sun.star.ui.dialogs.SystemFilePicker");
+        aRet[2] = rtl::OUString::createFromAscii("com.sun.star.ui.dialogs.KDE4FilePicker");
+        return aRet;
+    }
+}
+
+rtl::OUString toOUString(const QString& s)
+{
+	return rtl::OUString(s.toUtf8().data(), s.length(), RTL_TEXTENCODING_UTF8);
+}
+
+QString toQString(const rtl::OUString& s)
+{
+	return QString::fromUtf16(s.getStr(), s.getLength());
+}
+
+//////////////////////////////////////////////////////////////////////////
+// KDE4FilePicker
+//////////////////////////////////////////////////////////////////////////
+
+KDE4FilePicker::KDE4FilePicker( const uno::Reference<lang::XMultiServiceFactory>& xServiceMgr )
+    : cppu::WeakComponentImplHelper8< 		
+          XFilterManager, 
+          XFilterGroupManager,
+          XFilePickerControlAccess,
+          XFilePickerNotifier,
+// TODO   XFilePreview,
+          lang::XInitialization,
+          util::XCancellable,
+          lang::XEventListener, 
+          lang::XServiceInfo>( _helperMutex ),
+          m_xServiceMgr( xServiceMgr ),
+		  _resMgr( CREATEVERSIONRESMGR( fps_office ) )
+{
+	_extraControls = new QWidget();
+	
+	_layout = new QGridLayout(_extraControls);
+	
+	_dialog = new KFileDialog(KUrl(""), QString(""), 0, _extraControls);
+	_dialog->setMode(KFile::File | KFile::LocalOnly);
+	
+	//default mode
+	_dialog->setOperationMode(KFileDialog::Opening);
+}
+
+KDE4FilePicker::~KDE4FilePicker()
+{
+	delete _resMgr;
+	delete _dialog;
+}
+
+void SAL_CALL KDE4FilePicker::addFilePickerListener( const uno::Reference<XFilePickerListener>& xListener )
+	throw( uno::RuntimeException )
+{
+    ::vos::OGuard aGuard( Application::GetSolarMutex() );
+    m_xListener = xListener;
+}
+
+void SAL_CALL KDE4FilePicker::removeFilePickerListener( const uno::Reference<XFilePickerListener>& )
+	throw( uno::RuntimeException )
+{
+    ::vos::OGuard aGuard( Application::GetSolarMutex() );
+    m_xListener.clear();
+}
+
+void SAL_CALL KDE4FilePicker::setTitle( const rtl::OUString &title )
+    throw( uno::RuntimeException )
+{
+	_dialog->setCaption(toQString(title));
+}
+
+sal_Int16 SAL_CALL KDE4FilePicker::execute()
+    throw( uno::RuntimeException )
+{
+	//get the window id of the main OO window to set it for the dialog as a parent
+	Window *pParentWin = Application::GetDefDialogParent();
+	if ( pParentWin )
+	{
+		const SystemEnvData* pSysData = ((SystemWindow *)pParentWin)->GetSystemData();
+		if ( pSysData )
+		{
+			KWindowSystem::setMainWindow( _dialog, pSysData->aWindow); // unx only
+		}
+	}
+	
+	_dialog->setFilter(_filter);
+	_dialog->exec();
+	
+	//nasty hack to get a local qt event loop going to process the dialog
+	//otherwise the dialog returns immediately
+	while (_dialog->isVisible())
+	{
+		kapp->processEvents(QEventLoop::WaitForMoreEvents);
+	}
+	
+	//block and wait for user input
+	if (_dialog->result() == KFileDialog::Accepted)
+	{
+		return ExecutableDialogResults::OK;
+	}
+	
+	return ExecutableDialogResults::CANCEL;
+}
+
+void SAL_CALL KDE4FilePicker::setMultiSelectionMode( sal_Bool multiSelect )
+    throw( uno::RuntimeException )
+{
+	if (multiSelect)
+	{
+		_dialog->setMode(KFile::Files | KFile::LocalOnly);
+	}
+	else
+	{
+		_dialog->setMode(KFile::File | KFile::LocalOnly);
+	}
+}
+
+void SAL_CALL KDE4FilePicker::setDefaultName( const ::rtl::OUString &name )
+    throw( uno::RuntimeException )
+{
+	const QString url = toQString(name);
+	_dialog->setSelection(url);
+}
+
+void SAL_CALL KDE4FilePicker::setDisplayDirectory( const rtl::OUString &dir )
+    throw( uno::RuntimeException )
+{
+	const QString url = toQString(dir);
+	_dialog->setStartDir(KUrl(url));
+}
+
+rtl::OUString SAL_CALL KDE4FilePicker::getDisplayDirectory()
+    throw( uno::RuntimeException )
+{
+	QString dir = _dialog->baseUrl().url();
+	return toOUString(dir);
+}
+
+uno::Sequence< ::rtl::OUString > SAL_CALL KDE4FilePicker::getFiles()
+    throw( uno::RuntimeException )
+{
+	QStringList files = _dialog->selectedFiles();
+	
+	uno::Sequence< ::rtl::OUString > seq(files.size());
+	
+	for (int i=0 ; i<files.size() ; ++i)
+	{
+		const QString fileName = "file:" + files[i];
+		seq[i] = toOUString(fileName);
+	}
+	
+	return seq;
+}
+
+void SAL_CALL KDE4FilePicker::appendFilter( const ::rtl::OUString &title, const ::rtl::OUString &filter )
+    throw( lang::IllegalArgumentException, uno::RuntimeException )
+{
+	QString t = toQString(title);
+	QString f = toQString(filter);
+	
+	if (!_filter.isNull())
+	{
+		_filter.append("\n");
+	}
+	
+	//add to hash map for reverse lookup in getCurrentFilter
+	_filters.insert(f, t);
+	
+	// '/' meed to be escaped to else they are assumed to be mime types by kfiledialog
+	//see the docs
+	t.replace("/", "\\/");
+	
+	_filter.append(QString("%1|%2").arg(f).arg(t));
+}
+
+void SAL_CALL KDE4FilePicker::setCurrentFilter( const rtl::OUString &title )
+    throw( lang::IllegalArgumentException, uno::RuntimeException )
+{
+	QString filter = toQString(title);
+	filter.replace("/", "\\/");
+	_dialog->filterWidget()->setCurrentFilter(filter);
+}
+
+rtl::OUString SAL_CALL KDE4FilePicker::getCurrentFilter()
+    throw( uno::RuntimeException )
+{
+	QString filter = _filters[_dialog->currentFilter()];
+	
+	//default if not found
+	if (filter.isNull())
+	{
+		filter = "ODF Text Document (.odt)";
+	}
+	
+	return toOUString(filter);
+}
+
+void SAL_CALL KDE4FilePicker::appendFilterGroup( const rtl::OUString&, const uno::Sequence<beans::StringPair>& )
+    throw( lang::IllegalArgumentException, uno::RuntimeException )
+{
+	//TODO
+}
+
+void SAL_CALL KDE4FilePicker::setValue( sal_Int16 controlId, sal_Int16, const uno::Any &value )
+    throw( uno::RuntimeException )
+{
+	QWidget* widget = _customWidgets[controlId];
+	
+	if (widget)
+	{
+		switch (controlId)
+		{
+			case ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION:
+			case ExtendedFilePickerElementIds::CHECKBOX_PASSWORD:
+			case ExtendedFilePickerElementIds::CHECKBOX_FILTEROPTIONS:
+			case ExtendedFilePickerElementIds::CHECKBOX_READONLY:
+			case ExtendedFilePickerElementIds::CHECKBOX_LINK:
+			case ExtendedFilePickerElementIds::CHECKBOX_PREVIEW:
+			case ExtendedFilePickerElementIds::CHECKBOX_SELECTION:
+			{
+				QCheckBox* cb = dynamic_cast<QCheckBox*>(widget);
+				cb->setChecked(value.getValue());
+				break;
+			}
+			case ExtendedFilePickerElementIds::PUSHBUTTON_PLAY:
+			case ExtendedFilePickerElementIds::LISTBOX_VERSION:
+			case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE:
+			case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE:
+			case ExtendedFilePickerElementIds::LISTBOX_VERSION_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_FILTER_SELECTOR:
+				break;
+		}
+	}
+}
+
+uno::Any SAL_CALL KDE4FilePicker::getValue( sal_Int16 controlId, sal_Int16 )
+    throw( uno::RuntimeException )
+{
+	uno::Any res(false);
+	
+	QWidget* widget = _customWidgets[controlId];
+	
+	if (widget)
+	{
+		switch (controlId)
+		{
+			case ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION:
+			case ExtendedFilePickerElementIds::CHECKBOX_PASSWORD:
+			case ExtendedFilePickerElementIds::CHECKBOX_FILTEROPTIONS:
+			case ExtendedFilePickerElementIds::CHECKBOX_READONLY:
+			case ExtendedFilePickerElementIds::CHECKBOX_LINK:
+			case ExtendedFilePickerElementIds::CHECKBOX_PREVIEW:
+			case ExtendedFilePickerElementIds::CHECKBOX_SELECTION:
+			{
+				QCheckBox* cb = dynamic_cast<QCheckBox*>(widget);
+				res = uno::Any(cb->isChecked());
+				break;
+			}
+			case ExtendedFilePickerElementIds::PUSHBUTTON_PLAY:
+			case ExtendedFilePickerElementIds::LISTBOX_VERSION:
+			case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE:
+			case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE:
+			case ExtendedFilePickerElementIds::LISTBOX_VERSION_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_FILTER_SELECTOR:
+				break;
+		}
+	}
+	
+	return res;
+}
+
+void SAL_CALL KDE4FilePicker::enableControl( sal_Int16 controlId, sal_Bool enable )
+    throw( uno::RuntimeException )
+{
+	QWidget* widget = _customWidgets[controlId];
+	
+	if (widget)
+	{
+		widget->setEnabled(enable);
+	}
+}
+
+void SAL_CALL KDE4FilePicker::setLabel( sal_Int16 controlId, const ::rtl::OUString &label )
+    throw( uno::RuntimeException )
+{
+	QWidget* widget = _customWidgets[controlId];
+	
+	if (widget)
+	{
+		switch (controlId)
+		{
+			case ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION:
+			case ExtendedFilePickerElementIds::CHECKBOX_PASSWORD:
+			case ExtendedFilePickerElementIds::CHECKBOX_FILTEROPTIONS:
+			case ExtendedFilePickerElementIds::CHECKBOX_READONLY:
+			case ExtendedFilePickerElementIds::CHECKBOX_LINK:
+			case ExtendedFilePickerElementIds::CHECKBOX_PREVIEW:
+			case ExtendedFilePickerElementIds::CHECKBOX_SELECTION:
+			{
+				QCheckBox* cb = dynamic_cast<QCheckBox*>(widget);
+				cb->setText(toQString(label));
+				break;
+			}
+			case ExtendedFilePickerElementIds::PUSHBUTTON_PLAY:
+			case ExtendedFilePickerElementIds::LISTBOX_VERSION:
+			case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE:
+			case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE:
+			case ExtendedFilePickerElementIds::LISTBOX_VERSION_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_FILTER_SELECTOR:
+				break;
+		}
+	}
+}
+
+rtl::OUString SAL_CALL KDE4FilePicker::getLabel(sal_Int16 controlId) 
+    throw ( uno::RuntimeException )
+{
+	QWidget* widget = _customWidgets[controlId];
+	QString label;
+	
+	if (widget)
+	{
+		switch (controlId)
+		{
+			case ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION:
+			case ExtendedFilePickerElementIds::CHECKBOX_PASSWORD:
+			case ExtendedFilePickerElementIds::CHECKBOX_FILTEROPTIONS:
+			case ExtendedFilePickerElementIds::CHECKBOX_READONLY:
+			case ExtendedFilePickerElementIds::CHECKBOX_LINK:
+			case ExtendedFilePickerElementIds::CHECKBOX_PREVIEW:
+			case ExtendedFilePickerElementIds::CHECKBOX_SELECTION:
+			{
+				QCheckBox* cb = dynamic_cast<QCheckBox*>(widget);
+				label = cb->text();
+				break;
+			}
+			case ExtendedFilePickerElementIds::PUSHBUTTON_PLAY:
+			case ExtendedFilePickerElementIds::LISTBOX_VERSION:
+			case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE:
+			case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE:
+			case ExtendedFilePickerElementIds::LISTBOX_VERSION_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE_LABEL:
+			case ExtendedFilePickerElementIds::LISTBOX_FILTER_SELECTOR:
+				break;
+		}
+	}
+	return toOUString(label);
+}
+
+void KDE4FilePicker::addCustomControl(sal_Int16 controlId)
+{
+	QWidget* widget = 0;
+	sal_Int32 resId = -1;
+	
+	switch (controlId)
+	{
+		case ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION:
+			resId = STR_SVT_FILEPICKER_AUTO_EXTENSION;
+			break;
+		case ExtendedFilePickerElementIds::CHECKBOX_PASSWORD:
+			resId = STR_SVT_FILEPICKER_PASSWORD;
+			break;
+		case ExtendedFilePickerElementIds::CHECKBOX_FILTEROPTIONS:
+			resId = STR_SVT_FILEPICKER_FILTER_OPTIONS;
+			break;
+		case ExtendedFilePickerElementIds::CHECKBOX_READONLY:
+			resId = STR_SVT_FILEPICKER_READONLY;
+			break;
+		case ExtendedFilePickerElementIds::CHECKBOX_LINK:
+			resId = STR_SVT_FILEPICKER_INSERT_AS_LINK;
+			break;
+		case ExtendedFilePickerElementIds::CHECKBOX_PREVIEW:
+			resId = STR_SVT_FILEPICKER_SHOW_PREVIEW;
+			break;
+		case ExtendedFilePickerElementIds::CHECKBOX_SELECTION:
+			resId = STR_SVT_FILEPICKER_SELECTION;
+			break;
+		case ExtendedFilePickerElementIds::PUSHBUTTON_PLAY:
+			resId = STR_SVT_FILEPICKER_PLAY;
+			break;
+		case ExtendedFilePickerElementIds::LISTBOX_VERSION:
+			resId = STR_SVT_FILEPICKER_VERSION;
+			break;
+		case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE:
+			resId = STR_SVT_FILEPICKER_TEMPLATES;
+			break;
+		case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE:
+			resId = STR_SVT_FILEPICKER_IMAGE_TEMPLATE;
+			break;
+		case ExtendedFilePickerElementIds::LISTBOX_VERSION_LABEL:
+		case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE_LABEL:
+		case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE_LABEL:
+		case ExtendedFilePickerElementIds::LISTBOX_FILTER_SELECTOR:
+			break;
+	}
+	
+	switch (controlId)
+	{
+		case ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION:
+		case ExtendedFilePickerElementIds::CHECKBOX_PASSWORD:
+		case ExtendedFilePickerElementIds::CHECKBOX_FILTEROPTIONS:
+		case ExtendedFilePickerElementIds::CHECKBOX_READONLY:
+		case ExtendedFilePickerElementIds::CHECKBOX_LINK:
+		case ExtendedFilePickerElementIds::CHECKBOX_PREVIEW:
+		case ExtendedFilePickerElementIds::CHECKBOX_SELECTION:
+		{
+			QString label;
+			
+			if (_resMgr && resId != -1)
+			{
+				rtl::OUString s = String(ResId( resId, *_resMgr ));
+				label = toQString(s);
+				label.replace("~", "&");
+			}
+			
+			widget = new QCheckBox(label, _extraControls);
+			
+			break;
+		}
+		case ExtendedFilePickerElementIds::PUSHBUTTON_PLAY:
+		case ExtendedFilePickerElementIds::LISTBOX_VERSION:
+		case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE:
+		case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE:
+		case ExtendedFilePickerElementIds::LISTBOX_VERSION_LABEL:
+		case ExtendedFilePickerElementIds::LISTBOX_TEMPLATE_LABEL:
+		case ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE_LABEL:
+		case ExtendedFilePickerElementIds::LISTBOX_FILTER_SELECTOR:
+			break;
+	}
+	
+	if (widget)
+	{
+		_layout->addWidget(widget);
+		_customWidgets.insert(controlId, widget);
+	}
+}
+
+void SAL_CALL KDE4FilePicker::initialize( const uno::Sequence<uno::Any> &args ) 
+    throw( uno::Exception, uno::RuntimeException )
+{	
+	_filter.clear();
+	_filters.clear();
+	
+    // parameter checking	    
+    uno::Any arg;
+    if (args.getLength() == 0)
+	{
+        throw lang::IllegalArgumentException(
+                rtl::OUString::createFromAscii( "no arguments" ),
+                static_cast< XFilePicker* >( this ), 1 );
+	}
+
+    arg = args[0];
+
+    if (( arg.getValueType() != ::getCppuType((sal_Int16*)0)) && 
+		( arg.getValueType() != ::getCppuType((sal_Int8*)0)))
+	{
+        throw lang::IllegalArgumentException(
+                rtl::OUString::createFromAscii( "invalid argument type" ),
+                static_cast< XFilePicker* >( this ), 1 );
+	}
+
+    sal_Int16 templateId = -1;
+    arg >>= templateId;
+	
+	//default is opening
+	KFileDialog::OperationMode operationMode = KFileDialog::Opening;
+	
+    switch ( templateId )
+    {
+        case FILEOPEN_SIMPLE:
+            break;
+			
+        case FILESAVE_SIMPLE:
+            operationMode = KFileDialog::Saving;
+            break;
+			
+        case FILESAVE_AUTOEXTENSION:
+            operationMode = KFileDialog::Saving;
+			addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION );
+            break;
+
+        case FILESAVE_AUTOEXTENSION_PASSWORD:
+		{
+            operationMode = KFileDialog::Saving;
+			addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION );
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_PASSWORD );
+            break;
+		}
+        case FILESAVE_AUTOEXTENSION_PASSWORD_FILTEROPTIONS:
+		{
+			operationMode = KFileDialog::Saving;
+			addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION );
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_PASSWORD );
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_FILTEROPTIONS );
+            break;
+		}
+        case FILESAVE_AUTOEXTENSION_SELECTION:
+            operationMode = KFileDialog::Saving;
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_AUTOEXTENSION );
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_SELECTION );
+            break;
+
+        case FILESAVE_AUTOEXTENSION_TEMPLATE:
+            operationMode = KFileDialog::Saving;
+            addCustomControl( ExtendedFilePickerElementIds::LISTBOX_TEMPLATE );
+            break;
+
+        case FILEOPEN_LINK_PREVIEW_IMAGE_TEMPLATE:
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_LINK );
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_PREVIEW );
+            addCustomControl( ExtendedFilePickerElementIds::LISTBOX_IMAGE_TEMPLATE );
+            break;
+
+        case FILEOPEN_PLAY:        
+            addCustomControl( ExtendedFilePickerElementIds::PUSHBUTTON_PLAY );
+            break;
+
+        case FILEOPEN_READONLY_VERSION:
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_READONLY );
+            addCustomControl( ExtendedFilePickerElementIds::LISTBOX_VERSION );
+            break;
+
+        case FILEOPEN_LINK_PREVIEW:
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_LINK );
+            addCustomControl( ExtendedFilePickerElementIds::CHECKBOX_PREVIEW );
+            break;
+
+        default:
+            throw lang::IllegalArgumentException(
+                    rtl::OUString::createFromAscii( "Unknown template" ),
+                    static_cast< XFilePicker* >( this ),
+                    1 );
+    }
+	
+	_dialog->setOperationMode(operationMode);
+}
+
+void SAL_CALL KDE4FilePicker::cancel()
+    throw ( uno::RuntimeException )
+{
+	
+}
+
+void SAL_CALL KDE4FilePicker::disposing( const lang::EventObject &rEvent )
+    throw( uno::RuntimeException )
+{
+    uno::Reference<XFilePickerListener> xFilePickerListener( rEvent.Source, uno::UNO_QUERY );
+
+    if ( xFilePickerListener.is() )
+	{
+        removeFilePickerListener( xFilePickerListener );
+	}
+}
+
+rtl::OUString SAL_CALL KDE4FilePicker::getImplementationName() 
+    throw( uno::RuntimeException )
+{
+    return rtl::OUString::createFromAscii( FILE_PICKER_IMPL_NAME );
+}
+
+sal_Bool SAL_CALL KDE4FilePicker::supportsService( const rtl::OUString& ServiceName ) 
+    throw( uno::RuntimeException )
+{
+    uno::Sequence< ::rtl::OUString > SupportedServicesNames = FilePicker_getSupportedServiceNames();
+
+    for ( sal_Int32 n = SupportedServicesNames.getLength(); n--; )
+    {
+        if ( SupportedServicesNames[n].compareTo( ServiceName ) == 0 )
+            return sal_True;
+    }
+
+    return sal_False;
+}
+
+uno::Sequence< ::rtl::OUString > SAL_CALL KDE4FilePicker::getSupportedServiceNames() 
+    throw( uno::RuntimeException )
+{
+    return FilePicker_getSupportedServiceNames();
+}
diff --git fpicker/source/unx/kde4/KDE4FilePicker.hxx fpicker/source/unx/kde4/KDE4FilePicker.hxx
new file mode 100644
index 0000000..4d5ca77
--- /dev/null
+++ fpicker/source/unx/kde4/KDE4FilePicker.hxx
@@ -0,0 +1,205 @@
+/*************************************************************************
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): Jan Holesovsky <kendy@openoffice.org>
+ *
+ *
+ ************************************************************************/
+
+#pragma once
+
+#include <cppuhelper/compbase8.hxx>
+
+#include <com/sun/star/lang/XInitialization.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/ui/dialogs/XFilePickerNotifier.hpp>
+#include <com/sun/star/ui/dialogs/XFilterManager.hpp>
+#include <com/sun/star/ui/dialogs/XFilterGroupManager.hpp>
+#include <com/sun/star/ui/dialogs/XFilePickerControlAccess.hpp>
+//#include <com/sun/star/ui/dialogs/XFilePreview.hpp>
+#include <com/sun/star/util/XCancellable.hpp>
+
+#include <osl/conditn.hxx>
+#include <osl/mutex.hxx>
+
+#include <rtl/ustrbuf.hxx>
+
+#include <QString>
+#include <QHash>
+
+class KFileDialog;
+class QWidget;
+class QLayout;
+
+class ResMgr;
+
+class KDE4FilePicker : 
+    public cppu::WeakComponentImplHelper8<
+        ::com::sun::star::ui::dialogs::XFilterManager,
+        ::com::sun::star::ui::dialogs::XFilterGroupManager,
+        ::com::sun::star::ui::dialogs::XFilePickerControlAccess,
+        ::com::sun::star::ui::dialogs::XFilePickerNotifier,
+// TODO ::com::sun::star::ui::dialogs::XFilePreview,
+        ::com::sun::star::lang::XInitialization,
+        ::com::sun::star::util::XCancellable,
+        ::com::sun::star::lang::XEventListener,
+        ::com::sun::star::lang::XServiceInfo >		
+{
+protected:
+    ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > m_xServiceMgr;   // to instanciate own services		
+
+	::com::sun::star::uno::Reference< ::com::sun::star::ui::dialogs::XFilePickerListener > m_xListener;
+	
+    ResMgr *_resMgr;
+	
+	//the dialog to display
+	KFileDialog* _dialog;
+	
+	osl::Mutex _helperMutex;
+	
+	//running filter string to add to dialog
+	QString _filter;
+	
+	//filter for reverse lookup of filter text
+	QHash<QString, QString> _filters;
+	
+	//mapping of SAL control ID's to created custom controls
+	QHash<sal_Int16, QWidget*> _customWidgets;
+	
+	//widget to contain extra custom controls
+	QWidget* _extraControls;
+	
+	//layout for extra custom controls
+	QLayout* _layout;
+
+public:
+    KDE4FilePicker( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceMgr );
+    virtual ~KDE4FilePicker();
+
+    // XFilePickerNotifier
+
+    virtual void SAL_CALL addFilePickerListener( const ::com::sun::star::uno::Reference< ::com::sun::star::ui::dialogs::XFilePickerListener >& xListener ) throw( ::com::sun::star::uno::RuntimeException );
+    virtual void SAL_CALL removeFilePickerListener( const ::com::sun::star::uno::Reference< ::com::sun::star::ui::dialogs::XFilePickerListener >& xListener ) throw( ::com::sun::star::uno::RuntimeException );
+
+    // XExecutableDialog functions
+
+    virtual void SAL_CALL setTitle( const ::rtl::OUString &rTitle ) throw( ::com::sun::star::uno::RuntimeException );
+    virtual sal_Int16 SAL_CALL execute() throw( ::com::sun::star::uno::RuntimeException );
+
+    // XFilePicker functions
+
+    virtual void SAL_CALL setMultiSelectionMode( sal_Bool bMode ) throw( ::com::sun::star::uno::RuntimeException );
+    virtual void SAL_CALL setDefaultName( const ::rtl::OUString &rName ) throw( ::com::sun::star::uno::RuntimeException );
+    virtual void SAL_CALL setDisplayDirectory( const ::rtl::OUString &rDirectory ) throw( ::com::sun::star::uno::RuntimeException );
+    virtual ::rtl::OUString SAL_CALL getDisplayDirectory() throw( ::com::sun::star::uno::RuntimeException );
+    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getFiles() throw( ::com::sun::star::uno::RuntimeException );
+
+    // XFilterManager functions
+
+    virtual void SAL_CALL appendFilter( const ::rtl::OUString &rTitle, const ::rtl::OUString &rFilter ) throw( ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException );
+    virtual void SAL_CALL setCurrentFilter( const ::rtl::OUString &rTitle ) throw( ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException );
+    virtual ::rtl::OUString SAL_CALL getCurrentFilter() throw( ::com::sun::star::uno::RuntimeException );
+
+    // XFilterGroupManager functions
+
+    virtual void SAL_CALL appendFilterGroup( const ::rtl::OUString &rGroupTitle, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::StringPair > &rFilters ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
+
+    // XFilePickerControlAccess functions
+
+    virtual void SAL_CALL setValue( sal_Int16 nControlId, sal_Int16 nControlAction, const ::com::sun::star::uno::Any &rValue ) throw (::com::sun::star::uno::RuntimeException);
+    virtual ::com::sun::star::uno::Any SAL_CALL getValue( sal_Int16 nControlId, sal_Int16 nControlAction ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL enableControl( sal_Int16 nControlId, sal_Bool bEnable ) throw( ::com::sun::star::uno::RuntimeException );
+    virtual void SAL_CALL setLabel( sal_Int16 nControlId, const ::rtl::OUString &rLabel ) throw (::com::sun::star::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getLabel( sal_Int16 nControlId ) throw (::com::sun::star::uno::RuntimeException);
+
+    /* TODO XFilePreview
+
+    virtual ::com::sun::star::uno::Sequence< sal_Int16 > SAL_CALL getSupportedImageFormats(  ) throw (::com::sun::star::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL  getTargetColorDepth(  ) throw (::com::sun::star::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL  getAvailableWidth(  ) throw (::com::sun::star::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL  getAvailableHeight(  ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL       setImage( sal_Int16 aImageFormat, const ::com::sun::star::uno::Any &rImage ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL   setShowState( sal_Bool bShowState ) throw (::com::sun::star::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL   getShowState(  ) throw (::com::sun::star::uno::RuntimeException);
+    */
+
+    // XInitialization
+
+    virtual void SAL_CALL initialize( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > &rArguments ) throw( ::com::sun::star::uno::Exception, ::com::sun::star::uno::RuntimeException );
+
+    // XCancellable
+
+    virtual void SAL_CALL cancel( ) throw( ::com::sun::star::uno::RuntimeException );
+
+    // XEventListener
+
+    virtual void SAL_CALL disposing( const ::com::sun::star::lang::EventObject &rEvent ) throw( ::com::sun::star::uno::RuntimeException );
+
+    // XServiceInfo
+
+    virtual ::rtl::OUString SAL_CALL getImplementationName() throw( ::com::sun::star::uno::RuntimeException );
+    virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString &rServiceName ) throw( ::com::sun::star::uno::RuntimeException );
+    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames() throw( ::com::sun::star::uno::RuntimeException );
+
+private:
+    // prevent copy and assignment
+    KDE4FilePicker( const KDE4FilePicker& );           
+    KDE4FilePicker& operator=( const KDE4FilePicker& );
+	
+	//add a custom control widget to the file dialog
+	void addCustomControl(sal_Int16 controlId);
+	
+}; 
diff --git fpicker/source/unx/kde4/fps-kde4-ucd.txt fpicker/source/unx/kde4/fps-kde4-ucd.txt
new file mode 100644
index 0000000..8ecc4e0
--- /dev/null
+++ fpicker/source/unx/kde4/fps-kde4-ucd.txt
@@ -0,0 +1,6 @@
+[ComponentDescriptor]
+ImplementationName=com.sun.star.ui.dialogs.KDE4FilePicker
+ComponentName=fps_kde4.uno.so
+LoaderName=com.sun.star.loader.SharedLibrary
+[SupportedServices]
+com.sun.star.ui.dialogs.KDE4FilePicker
diff --git fpicker/source/unx/kde4/fps_kde4.xml fpicker/source/unx/kde4/fps_kde4.xml
new file mode 100644
index 0000000..b250c05
--- /dev/null
+++ fpicker/source/unx/kde4/fps_kde4.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE module-description PUBLIC "-//StarOffice//DTD ComponentDescription 1.0//EN" "module-description.dtd">
+<module-description xmlns:xlink="http://www.w3.org/1999/xlink">
+    <module-name>fps_kde4</module-name>
+    <component-description>
+        <author> Jan Holesovsky </author>
+        <name>    com.sun.star.comp.ui.dialogs.FilePicker </name>
+        <description>
+            The KDE implementation of the FilePicker service.
+        </description>
+        <loader-name>com.sun.star.loader.SharedLibrary</loader-name>
+        <language>    c++    </language>
+        <status value="beta"/>
+        <supported-service>    com.sun.star.ui.dialogs.FilePicker </supported-service>        
+        <service-dependency>...</service-dependency>
+        <type>    com.sun.star.ui.dialogs.XExecutableDialog            </type>
+        <type>    com.sun.star.ui.dialogs.XFilePicker                  </type>
+        <type>    com.sun.star.ui.dialogs.XFilterManager               </type>
+        <type>    com.sun.star.ui.dialogs.XFilterGroupManager          </type>
+        <type>    com.sun.star.ui.dialogs.XFilePickerListener          </type>
+        <type>    com.sun.star.ui.dialogs.ExecutableDialogException    </type>
+        <type>    com.sun.star.ui.dialogs.XFilePickerNotifier          </type>
+        <type>    com.sun.star.ui.dialogs.XFilePickerControlAccess     </type>
+        <type>    com.sun.star.ui.dialogs.XFilePreview                 </type>
+        <type>    com.sun.star.ui.dialogs.ExtendedFilePickerElementIds </type>
+        <type>    com.sun.star.ui.dialogs.ExecutableDialogResults      </type>        
+        <type>    com.sun.star.ui.dialogs.FilePickerEvent              </type>
+        <type>    com.sun.star.ui.dialogs.CommonFilePickerElementIds   </type>
+        <type>    com.sun.star.ui.dialogs.ListboxControlActions        </type>
+        <type>    com.sun.star.ui.dialogs.TemplateDescription          </type>        
+        <type>    com.sun.star.ui.dialogs.FilePreviewImageFormats      </type>    
+        <type>    com.sun.star.util.XCancellable                       </type>
+        <type>    com.sun.star.lang.XComponent                         </type>
+        <type>    com.sun.star.lang.XMultiServiceFactory               </type>
+        <type>    com.sun.star.lang.XSingleServiceFactory              </type>
+        <type>    com.sun.star.lang.XServiceInfo                       </type>
+        <type>    com.sun.star.lang.XTypeProvider                      </type>
+        <type>    com.sun.star.lang.IllegalArgumentException           </type>
+        <type>    com.sun.star.uno.TypeClass                           </type>
+        <type>    com.sun.star.uno.XWeak                               </type>
+        <type>    com.sun.star.uno.XAggregation                        </type>
+        <type>    com.sun.star.registry.XRegistryKey                   </type>
+        <type>    com.sun.star.container.XSet                          </type>
+    </component-description>
+    <project-build-dependency>     cppuhelper  </project-build-dependency>
+    <project-build-dependency>     cppu        </project-build-dependency>
+    <project-build-dependency>     sal         </project-build-dependency>
+    <runtime-module-dependency>    cppuhelper  </runtime-module-dependency>
+    <runtime-module-dependency>    cppu2       </runtime-module-dependency>
+    <runtime-module-dependency>    sal2        </runtime-module-dependency>
+</module-description>
diff --git fpicker/source/unx/kde4/makefile.mk fpicker/source/unx/kde4/makefile.mk
new file mode 100644
index 0000000..f485e33
--- /dev/null
+++ fpicker/source/unx/kde4/makefile.mk
@@ -0,0 +1,117 @@
+#*************************************************************************
+#
+#
+#
+#
+#
+#
+#
+#   The Contents of this file are made available subject to the terms of
+#   either of the following licenses
+#
+#          - GNU Lesser General Public License Version 2.1
+#          - Sun Industry Standards Source License Version 1.1
+#
+#   Sun Microsystems Inc., October, 2000
+#
+#   GNU Lesser General Public License Version 2.1
+#   =============================================
+#   Copyright 2000 by Sun Microsystems, Inc.
+#   901 San Antonio Road, Palo Alto, CA 94303, USA
+#
+#   This library is free software; you can redistribute it and/or
+#   modify it under the terms of the GNU Lesser General Public
+#   License version 2.1, as published by the Free Software Foundation.
+#
+#   This library is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#   Lesser General Public License for more details.
+#
+#   You should have received a copy of the GNU Lesser General Public
+#   License along with this library; if not, write to the Free Software
+#   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+#   MA  02111-1307  USA
+#
+#
+#   Sun Industry Standards Source License Version 1.1
+#   =================================================
+#   The contents of this file are subject to the Sun Industry Standards
+#   Source License Version 1.1 (the "License"); You may not use this file
+#   except in compliance with the License. You may obtain a copy of the
+#   License at http://www.openoffice.org/license.html.
+#
+#   Software provided under this License is provided on an "AS IS" basis,
+#   WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+#   WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+#   MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+#   See the License for the specific provisions governing your rights and
+#   obligations concerning the Software.
+#
+#   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+#
+#   Copyright: 2000 by Sun Microsystems, Inc.
+#
+#   All Rights Reserved.
+#
+#   Contributor(s): _______________________________________
+#
+#
+#
+#*************************************************************************
+
+PRJ=..$/..$/..
+
+PRJNAME=fpicker
+TARGET=fps_kde4.uno
+LIBTARGET=NO
+ENABLE_EXCEPTIONS=TRUE
+
+# --- Settings -----------------------------------------------------
+
+.INCLUDE :  settings.mk
+DLLPRE=
+
+# ------------------------------------------------------------------
+
+# Currently just KDE is supported...
+.IF "$(GUIBASE)" != "unx" || "$(ENABLE_KDE4)" != "TRUE"
+
+dummy:
+	@echo "Nothing to build. GUIBASE == $(GUIBASE), ENABLE_KDE4 is not set"
+
+.ELSE # we build for KDE
+
+CFLAGS+= $(KDE4_CFLAGS)
+
+# --- Files --------------------------------------------------------
+
+SLOFILES =\
+		$(SLO)$/KDE4FilePicker.obj		\
+		$(SLO)$/KDE4FilePicker.moc.obj \
+		$(SLO)$/KDE4FPEntry.obj
+
+SHL1NOCHECK=TRUE
+SHL1TARGET=$(TARGET)
+SHL1STDLIBS=$(CPPULIB)\
+		$(CPPUHELPERLIB)\
+		$(SALLIB)\
+		$(VCLLIB)\
+		$(TOOLSLIB) \
+		$(KDE4_LIBS) -lkio -lkfile
+
+
+SHL1OBJS=$(SLOFILES)
+SHL1DEF=$(MISC)$/$(SHL1TARGET).def
+
+DEF1NAME=$(SHL1TARGET)
+DEF1VERSIONMAP=exports.map
+
+.ENDIF
+
+# --- Targets ------------------------------------------------------
+
+.INCLUDE :	target.mk
+
+$(MISC)$/KDE4FilePicker.moc.cxx : KDE4FilePicker.hxx
+	$(MOC4) $< -o $@
