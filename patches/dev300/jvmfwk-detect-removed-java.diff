--- jvmfwk/inc/jvmfwk/framework.h.old	2007-06-13 09:56:54.000000000 +0200
+++ jvmfwk/inc/jvmfwk/framework.h	2007-10-30 21:17:59.000000000 +0100
@@ -236,7 +236,8 @@ typedef enum _javaFrameworkError
     JFW_E_NO_JAVA_FOUND,
     JFW_E_VM_CREATION_FAILED,
     JFW_E_CONFIGURATION,
-    JFW_E_DIRECT_MODE
+    JFW_E_DIRECT_MODE,
+    JFW_E_TRY_AUTOSELECT
 } javaFrameworkError;
 
 /** an instance of this struct represents an installation of a Java
@@ -541,9 +542,11 @@ javaFrameworkError SAL_CALL jfw_getJavaI
     then the user enabled it. If then the selected  JRE has the requirement
     JFW_REQUIRE_NEEDRESTART then this error is returned. </br>
     JFW_E_VM_CREATION_FAILED the creation of the JVM failed. The creation is performed
-    by a plug-in library and not by this API.
+    by a plug-in library and not by this API.</br>
     JFW_E_FAILED_VERSION the &quot;Default Mode&quot; is active. The JRE determined by
-    <code>JAVA_HOME</code>does not meet the version requirements.
+    <code>JAVA_HOME</code>does not meet the version requirements.</br>
+    JFW_E_TRY_AUTOSELECT the current setting is wrong but autoselection
+    is enabled. Let's try it if possible.
  */
 javaFrameworkError SAL_CALL jfw_startVM(JavaVMOption *arOptions,
                                  sal_Int32 nSize, JavaVM **ppVM,
@@ -573,7 +576,9 @@ javaFrameworkError SAL_CALL jfw_startVM(
     JFW_E_ERROR An error occurred.<br/>
     JFW_E_CONFIGURATION mode was not properly set or their prerequisites
     were not met.<br/>
-    JFW_E_DIRECT_MODE the function cannot be used in this mode.
+    JFW_E_DIRECT_MODE the function cannot be used in this mode.<br/>
+    JFW_E_TRY_AUTOSELECT the current setting is wrong but autoselection
+    is enabled. Let's try it if possible.
  */
 javaFrameworkError SAL_CALL jfw_setSelectedJRE(JavaInfo const *pInfo);
 
@@ -603,7 +608,9 @@ javaFrameworkError SAL_CALL jfw_setSelec
     JFW_E_CONFIGURATION mode was not properly set or their prerequisites
     were not met.<br/>
     JFW_E_INVALID_SETTINGS the javavendors.xml has been changed and no
-    JRE has been selected afterwards. <br/>
+    JRE has been selected afterwards.<br/>
+    JFW_E_TRY_AUTOSELECT the current setting is wrong but autoselection
+    is enabled. Let's try it if possible.
  */
 javaFrameworkError SAL_CALL jfw_getSelectedJRE(JavaInfo **ppInfo);
 
--- jvmfwk/source/framework.cxx.old	2008-06-06 10:37:46.000000000 +0200
+++ jvmfwk/source/framework.cxx	2008-08-26 20:02:48.000000000 +0200
@@ -670,8 +670,87 @@ void SAL_CALL jfw_freeJavaInfo(JavaInfo
     rtl_freeMemory(pInfo);
 }
 
+// used by the hack in jfw_getSelectedJRE to search for correct JRE
+#if defined(__sparcv9)
+#define JFW_PLUGIN_ARCH "sparcv9"
+#elif defined SPARC
+#define JFW_PLUGIN_ARCH "sparc"
+#elif defined X86_64
+#define JFW_PLUGIN_ARCH "amd64"
+#elif defined INTEL
+#define JFW_PLUGIN_ARCH "i386"
+#elif defined POWERPC64
+#define JFW_PLUGIN_ARCH "ppc64"
+#elif defined POWERPC
+#define JFW_PLUGIN_ARCH "ppc"
+#elif defined MIPS
+#ifdef OSL_BIGENDIAN
+#  define JFW_PLUGIN_ARCH "mips"
+#else
+#  define JFW_PLUGIN_ARCH "mips32"
+#endif
+#elif defined S390X
+#define JFW_PLUGIN_ARCH "s390x"
+#elif defined S390
+#define JFW_PLUGIN_ARCH "s390"
+#elif defined ARM
+#define JFW_PLUGIN_ARCH "arm"
+#elif defined IA64
+#define JFW_PLUGIN_ARCH "ia64"
+#elif defined M68K
+#define JFW_PLUGIN_ARCH "m68k"
+#else // SPARC, INTEL, POWERPC, MIPS, ARM, IA64, M68K
+#error unknown plattform
+#endif // SPARC, INTEL, POWERPC, MIPS, ARM
+
+#if defined(MIPS) && defined(OSL_LITENDIAN)
+#define GCJ_JFW_PLUGIN_ARCH "mipsel"
+#else
+#define GCJ_JFW_PLUGIN_ARCH JFW_PLUGIN_ARCH
+#endif
+
 javaFrameworkError SAL_CALL jfw_getSelectedJRE(JavaInfo **ppInfo)
 {
+// used by the hack to search for correct JRE
+    static char const * ar[] = {
+#if defined(WNT) || defined(OS2)
+        "/bin/client/jvm.dll",
+        "/bin/hotspot/jvm.dll",
+        "/bin/classic/jvm.dll",
+	"/bin/jrockit/jvm.dll"
+#elif UNX
+#ifdef MACOSX
+        "/../../../JavaVM"
+#else // MACOSX
+        "/gcj-4.1.1/libjvm.so",
+	  "/gcj-4.3-90/libjvm.so",
+	  "/gcj-4.2-81/libjvm.so",
+	  "/gcj-4.2/libjvm.so",
+	  "/gcj-4.2.1/libjvm.so",
+	  "/gcj-4.2.2/libjvm.so",
+	  "/gcj-4.2.3/libjvm.so",
+	  "/gcj-4.1-71/libjvm.so",
+	  "/gcj-4_1/libjvm.so",
+	  "/gcj-4.1/libjvm.so",
+	  "/libgcj.so.81",
+	  "/libgcj.so.80",
+	  "/libgcj.so.8",
+	  "/libgcj.so.71",
+	  "/libgcj.so.70",
+        "/libgcj.so.7",
+        "/libgcj.so.6",
+	"/bin/classic/libjvm.so", // for IBM Java
+        "/jre/bin/classic/libjvm.so", // for IBM Java
+        "/lib/" JFW_PLUGIN_ARCH "/client/libjvm.so", // for Blackdown PPC
+        "/lib/" JFW_PLUGIN_ARCH "/server/libjvm.so", // for Blackdown AMD64
+        "/lib/" JFW_PLUGIN_ARCH "/classic/libjvm.so", // for Blackdown PPC
+	"/lib/" JFW_PLUGIN_ARCH "/jrockit/libjvm.so", // for Java of BEA Systems
+        "/libjvm.so",
+        "/lib/" GCJ_JFW_PLUGIN_ARCH "/client/libjvm.so",
+#endif // MACOSX
+#endif // UNX
+    };
+
     javaFrameworkError errcode = JFW_E_NONE;
     try
     {
@@ -706,11 +785,29 @@ javaFrameworkError SAL_CALL jfw_getSelec
 			*ppInfo = NULL;
 			return JFW_E_NONE;
 		}
+
+		// If the java location does not longer exist, ignore this aInfo
+		rtl::OUString sLocation = aInfo.getLocation();
+		bool bJavaFound = false;
+		for (int i=(sizeof (ar) / sizeof (char*)); --i > 0; ) {
+		    rtl::OUString sJavaPath = sLocation + rtl::OStringToOUString(ar[i], RTL_TEXTENCODING_UTF8);
+		    if (jfw::checkFileURL(sJavaPath) == jfw::FILE_OK)
+		    {
+			bJavaFound=true;
+			i=0;
+		    }
+		}
+	        if (!bJavaFound) {
+		    jfw_freeJavaInfo(aInfo.detach());
+		    *ppInfo = NULL;
+		    return JFW_E_TRY_AUTOSELECT;
+		}
+
 		//If the javavendors.xml has changed, then the current selected
 		//Java is not valid anymore
 		// /java/javaInfo/@vendorUpdate != javaSelection/updated (javavendors.xml)
 		rtl::OString sUpdated = jfw::getElementUpdated();
-	    
+
 		if (sUpdated.equals(settings.getJavaInfoAttrVendorUpdate()) == sal_False)
 			return JFW_E_INVALID_SETTINGS;
 		*ppInfo = aInfo.detach();
@@ -865,7 +962,8 @@ javaFrameworkError SAL_CALL jfw_setSelec
 		//check if pInfo is the selected JRE
 		JavaInfo *currentInfo = NULL;
 		errcode = jfw_getSelectedJRE( & currentInfo);
-		if (errcode != JFW_E_NONE && errcode != JFW_E_INVALID_SETTINGS)
+		if (errcode != JFW_E_NONE && errcode != JFW_E_INVALID_SETTINGS &&
+		    errcode != JFW_E_TRY_AUTOSELECT && errcode != JFW_E_CONFIGURATION )
 			return errcode;
 	    
 		if (jfw_areEqualJavaInfo(currentInfo, pInfo) == sal_False)
--- jvmfwk/plugins/sunmajor/javaenvsetup/javaldx.cxx.old	2006-09-16 19:45:14.000000000 +0200
+++ jvmfwk/plugins/sunmajor/javaenvsetup/javaldx.cxx	2007-10-30 21:04:14.000000000 +0100
@@ -104,7 +104,7 @@ SAL_IMPLEMENT_MAIN_WITH_ARGS(argc, argv)
     JavaInfo * pInfo = NULL;
     errcode = jfw_getSelectedJRE( & pInfo);
 
-    if (errcode != JFW_E_NONE && errcode != JFW_E_INVALID_SETTINGS)
+    if (errcode != JFW_E_NONE && errcode != JFW_E_INVALID_SETTINGS && errcode != JFW_E_TRY_AUTOSELECT)
     {
         fprintf(stderr,"javaldx failed! \n");
         return -1;
--- jvmfwk/source/elements.cxx 21 May 2008 08:24:47 -0000      1.22
+++ jvmfwk/source/elements.cxx 6 Jun 2008 08:37:17 -0000       1.23
@@ -1232,12 +1195,12 @@ JavaInfo * MergedSettings::createJavaInf
 {
     return m_javaInfo.makeJavaInfo();
 }
-#ifdef WNT
+
 bool MergedSettings::getJavaInfoAttrAutoSelect() const
 {
     return m_javaInfo.bAutoSelect;
 }
-#endif
+
 void MergedSettings::getVmParametersArray(
     rtl_uString *** parParams, sal_Int32 * size) const
 {
--- jvmfwk/source/elements.hxx 21 May 2008 08:24:59 -0000      1.12
+++ jvmfwk/source/elements.hxx 6 Jun 2008 08:37:30 -0000       1.13
@@ -336,14 +327,12 @@ public:
      */
     ::rtl::OString const & getJavaInfoAttrVendorUpdate() const;

-#ifdef WNT
     /** returns the javaInfo@autoSelect attribute.
         Before calling this function loadFromSettings must be called.
         It uses the javaInfo@autoSelect attribute  to determine
         the return value;
      */
     bool getJavaInfoAttrAutoSelect() const;
-#endif

     /** returns an array.
         Caller must free the strings and the array.
--- svx/source/dialog/optjava.cxx.old	2007-06-27 19:28:51.000000000 +0200
+++ svx/source/dialog/optjava.cxx	2008-05-22 19:58:25.000000000 +0200
@@ -750,7 +750,8 @@ BOOL SvxJavaOptionsPage::FillItemSet( Sf
 
 			JavaInfo* pSelectedJava = NULL;
 			eErr = jfw_getSelectedJRE( &pSelectedJava );
-			if ( JFW_E_NONE == eErr || JFW_E_INVALID_SETTINGS == eErr )
+			if ( JFW_E_NONE == eErr || JFW_E_INVALID_SETTINGS == eErr ||
+			     JFW_E_TRY_AUTOSELECT == eErr || JFW_E_CONFIGURATION == eErr )
 			{
 				if (pSelectedJava == NULL || !jfw_areEqualJavaInfo( pInfo, pSelectedJava ) )
 				{
