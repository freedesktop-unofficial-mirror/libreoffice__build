diff --git sc/inc/reftokenhelper.hxx sc/inc/reftokenhelper.hxx
index b1159cc..d7b335f 100644
--- sc/inc/reftokenhelper.hxx
+++ sc/inc/reftokenhelper.hxx
@@ -56,7 +56,8 @@ public:
      * The source range may consist of multiple ranges separated by ';'s. 
      */
     static void compileRangeRepresentation(
-        ::std::vector<ScSharedTokenRef>& rRefTokens, const ::rtl::OUString& rRangeStr, ScDocument* pDoc);
+        ::std::vector<ScSharedTokenRef>& rRefTokens, const ::rtl::OUString& rRangeStr, ScDocument* pDoc,
+        ::formula::FormulaGrammar::Grammar eGrammar = ::formula::FormulaGrammar::GRAM_ENGLISH);
 
     static bool getRangeFromToken(ScRange& rRange, const ScSharedTokenRef& pToken, bool bExternal = false);
 
diff --git sc/source/core/data/documen5.cxx sc/source/core/data/documen5.cxx
index 19f6b09..a921945 100644
--- sc/source/core/data/documen5.cxx
+++ sc/source/core/data/documen5.cxx
@@ -130,6 +130,7 @@ void lcl_SetChartRanges( const uno::Reference< chart2::XChartDocument >& xChartD
 
             if( xLabel.is())
             {
+                // the range string must be in Calc A1 format.
                 uno::Reference< chart2::data::XDataSequence > xNewSeq(
                     xDataProvider->createDataSequenceByRangeRepresentation( rRanges[nRange++] ));
                 
@@ -145,6 +146,7 @@ void lcl_SetChartRanges( const uno::Reference< chart2::XChartDocument >& xChartD
 
             if( xValues.is())
             {
+                // the range string must be in Calc A1 format.
                 uno::Reference< chart2::data::XDataSequence > xNewSeq(
                     xDataProvider->createDataSequenceByRangeRepresentation( rRanges[nRange++] ));
                 
@@ -391,7 +393,7 @@ void ScDocument::GetChartRanges( const String& rChartName, ::std::vector< ScRang
         for( sal_Int32 nN=0; nN<aRangeStrings.getLength(); nN++ )
         {
             ScRangeList aRanges;
-            aRanges.Parse( aRangeStrings[nN], pSheetNameDoc );
+            aRanges.Parse( aRangeStrings[nN], pSheetNameDoc, SCA_VALID, pSheetNameDoc->GetAddressConvention() );
             rRangesVector.push_back(aRanges);
         }
     }
@@ -407,8 +409,8 @@ void ScDocument::SetChartRanges( const String& rChartName, const ::std::vector<
         for( sal_Int32 nN=0; nN<nCount; nN++ )
         {
             ScRangeList aScRangeList( rRangesVector[nN] );
-            String sRangeStr;
-            aScRangeList.Format( sRangeStr, SCR_ABS_3D, this, GetAddressConvention() );
+            String sRangeStr; // This range must be in Calc A1 format.
+            aScRangeList.Format( sRangeStr, SCR_ABS_3D, this );
             aRangeStrings[nN]=sRangeStr;
         }
         lcl_SetChartRanges( xChartDoc, aRangeStrings );
diff --git sc/source/core/tool/reftokenhelper.cxx sc/source/core/tool/reftokenhelper.cxx
index 8ecb44a..0e07819 100644
--- sc/source/core/tool/reftokenhelper.cxx
+++ sc/source/core/tool/reftokenhelper.cxx
@@ -49,7 +49,7 @@ using ::std::auto_ptr;
 using ::rtl::OUString;
 
 void ScRefTokenHelper::compileRangeRepresentation(
-    vector<ScSharedTokenRef>& rRefTokens, const OUString& rRangeStr, ScDocument* pDoc)
+    vector<ScSharedTokenRef>& rRefTokens, const OUString& rRangeStr, ScDocument* pDoc, FormulaGrammar::Grammar eGrammar)
 {
     const sal_Unicode cSep = ';';
     const sal_Unicode cQuote = '\'';
@@ -63,7 +63,7 @@ void ScRefTokenHelper::compileRangeRepresentation(
             break;
         
         ScCompiler aCompiler(pDoc, ScAddress(0,0,0));
-        aCompiler.SetGrammar(FormulaGrammar::GRAM_ENGLISH);
+        aCompiler.SetGrammar(eGrammar);
         auto_ptr<ScTokenArray> pArray(aCompiler.CompileString(aToken));
 
         // There should only be one reference per range token.
diff --git sc/source/ui/drawfunc/fuins2.cxx sc/source/ui/drawfunc/fuins2.cxx
index f2562a3..22b46b9 100644
--- sc/source/ui/drawfunc/fuins2.cxx
+++ sc/source/ui/drawfunc/fuins2.cxx
@@ -167,8 +167,10 @@ void lcl_ChartInit( const uno::Reference < embed::XEmbeddedObject >& xObj, ScVie
             if ( aRangeListRef->Count() )
             {
                 pScDoc->LimitChartIfAll( aRangeListRef );               // limit whole columns/rows to used area
+
+                // update string from modified ranges.  The ranges must be in the current formula syntax.
                 String aTmpStr;                            
-                aRangeListRef->Format( aTmpStr, SCR_ABS_3D, pScDoc, pScDoc->GetAddressConvention() );   // update string from changed ranges
+                aRangeListRef->Format( aTmpStr, SCR_ABS_3D, pScDoc, pScDoc->GetAddressConvention() );
                 aRangeString = aTmpStr;
 
                 ScChartPositioner aChartPositioner( pScDoc, aRangeListRef );
diff --git sc/source/ui/unoobj/chart2uno.cxx sc/source/ui/unoobj/chart2uno.cxx
index 8bbd382..d9c2698 100644
--- sc/source/ui/unoobj/chart2uno.cxx
+++ sc/source/ui/unoobj/chart2uno.cxx
@@ -1057,7 +1057,7 @@ void lcl_SeperateOneRowRange(ScRange aR, const ScAddress& rPos, ScRangeListRef&
     }
 
     vector<ScSharedTokenRef> aTokens;
-    ScRefTokenHelper::compileRangeRepresentation(aTokens, aRangeRepresentation, m_pDocument);
+    ScRefTokenHelper::compileRangeRepresentation(aTokens, aRangeRepresentation, m_pDocument, m_pDocument->GetGrammar());
     return !aTokens.empty();
 }
 
@@ -1451,7 +1451,7 @@ ScChart2DataProvider::createDataSource(
     }
 
     vector<ScSharedTokenRef> aRefTokens;
-    ScRefTokenHelper::compileRangeRepresentation(aRefTokens, aRangeRepresentation, m_pDocument);
+    ScRefTokenHelper::compileRangeRepresentation(aRefTokens, aRangeRepresentation, m_pDocument, m_pDocument->GetGrammar());
     if (aRefTokens.empty())
         // Invalid range representation.  Bail out.
         throw lang::IllegalArgumentException();
@@ -2184,7 +2184,7 @@ uno::Sequence< beans::PropertyValue > SAL_CALL ScChart2DataProvider::detectArgum
         return false;
 
     vector<ScSharedTokenRef> aTokens;
-    ScRefTokenHelper::compileRangeRepresentation(aTokens, aRangeRepresentation, m_pDocument);
+    ScRefTokenHelper::compileRangeRepresentation(aTokens, aRangeRepresentation, m_pDocument, m_pDocument->GetGrammar());
     return !aTokens.empty();
 }
 
@@ -2201,6 +2201,12 @@ uno::Reference< chart2::data::XDataSequence > SAL_CALL
     if(!m_pDocument || (aRangeRepresentation.getLength() == 0))
         return xResult;
 
+    // Note: the range representation must be in Calc A1 format.  The import 
+    // filters use this method to pass data ranges, and they have no idea what
+    // the current formula syntax is.  In the future we should add another
+    // method to allow the client code to directly pass tokens representing
+    // ranges.
+
     vector<ScSharedTokenRef> aRefTokens;
     ScRefTokenHelper::compileRangeRepresentation(aRefTokens, aRangeRepresentation, m_pDocument);
     if (aRefTokens.empty())
@@ -2246,7 +2252,7 @@ rtl::OUString SAL_CALL ScChart2DataProvider::convertRangeToXML( const rtl::OUStr
         return aRet;
 
     vector<ScSharedTokenRef> aRefTokens;
-    ScRefTokenHelper::compileRangeRepresentation(aRefTokens, sRangeRepresentation, m_pDocument);
+    ScRefTokenHelper::compileRangeRepresentation(aRefTokens, sRangeRepresentation, m_pDocument, m_pDocument->GetGrammar());
     if (aRefTokens.empty())
         throw lang::IllegalArgumentException();
 
@@ -2405,7 +2411,7 @@ void ScChart2DataProvider::detectRangesFromDataSource(vector<ScSharedTokenRef>&
     {
         const OUString& rRangeRep = *itr;
         vector<ScSharedTokenRef> aTokens;
-        ScRefTokenHelper::compileRangeRepresentation(aTokens, rRangeRep, m_pDocument);
+        ScRefTokenHelper::compileRangeRepresentation(aTokens, rRangeRep, m_pDocument, m_pDocument->GetGrammar());
 
         CollectRefTokens func;
         func = for_each(aTokens.begin(), aTokens.end(), func);
diff --git sc/inc/document.hxx sc/inc/document.hxx
index 810f215..1be2397 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -607,7 +607,7 @@ public:
 	SC_DLLPUBLIC BOOL			IsActiveScenario( SCTAB nTab ) const;
 	SC_DLLPUBLIC void			SetActiveScenario( SCTAB nTab, BOOL bActive );		// nur fuer Undo etc.
 	SC_DLLPUBLIC formula::FormulaGrammar::AddressConvention GetAddressConvention() const;
-    formula::FormulaGrammar::Grammar GetGrammar() const;
+    SC_DLLPUBLIC formula::FormulaGrammar::Grammar GetGrammar() const;
     void            SetGrammar( formula::FormulaGrammar::Grammar eGram );
 	SC_DLLPUBLIC BYTE			GetLinkMode( SCTAB nTab ) const;
 	BOOL			IsLinked( SCTAB nTab ) const;
diff --git sc/source/filter/excel/xechart.cxx sc/source/filter/excel/xechart.cxx
index b01bdc6..cf3f218 100644
--- sc/source/filter/excel/xechart.cxx
+++ sc/source/filter/excel/xechart.cxx
@@ -717,11 +717,12 @@ sal_uInt16 XclExpChSourceLink::ConvertDataSequence( Reference< XDataSequence > x
     if (!xDataSeq.is())
         return nValueCount;
 
-    // Compile the range representation string into token array.
+    // Compile the range representation string into token array.  Note that the 
+    // source range text depends on the current grammar.
     OUString aRangeRepr = xDataSeq->getSourceRangeRepresentation();
     ScRangeList aScRanges;
     ScCompiler aComp(GetDocPtr(), ScAddress());
-    aComp.SetGrammar(FormulaGrammar::GRAM_ENGLISH);
+    aComp.SetGrammar(GetDocPtr()->GetGrammar());
     ScTokenArray* pArray = aComp.CompileString(aRangeRepr);
     if (!pArray)
         return nValueCount;
