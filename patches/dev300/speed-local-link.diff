From 47dea1081ee7e6967a05dd02f6555a9a5a1af189 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:57:07 +0200
Subject: [PATCH 245/878] speed-local-link.diff

---
 cppuhelper/source/shlib.cxx |  149 ++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 147 insertions(+), 2 deletions(-)

diff --git a/cppuhelper/source/shlib.cxx b/cppuhelper/source/shlib.cxx
index de4597a..342335e 100644
--- a/cppuhelper/source/shlib.cxx
+++ b/cppuhelper/source/shlib.cxx
@@ -38,6 +38,8 @@
 #include "uno/mapping.hxx"
 #include "cppuhelper/factory.hxx"
 #include "cppuhelper/shlib.hxx"
+#include "cppuhelper/bootstrap.hxx"
+#include <com/sun/star/lang/IllegalArgumentException.hpp>
 
 #include "com/sun/star/beans/XPropertySet.hpp"
 
@@ -272,6 +274,141 @@ static OUString makeComponentPath(
     return out;
 }
 
+#ifdef LINUX
+
+// This is a temporary hack until we can add this per
+// shlib annotation to services.rdb.
+
+static bool
+lcl_isWellKnownInternal(const OString &rLibName)
+{
+    // These are loaded at startup ...
+    static const char *pLookup[] = {
+        "behelper.uno.so",
+        "configmgr2.uno.so",
+        "deploymentli.uno.so",
+        "fsstorage.uno.so",
+        "gconfbe1.uno.so",
+        "i18npool.uno.so",
+        "introspection.uno.so",
+        "ldapbe2.uno.so",
+        "libanimcore.so",
+        "libevtatt.so",
+        "libfileacc.so",
+        "libfilterconfig1.so",
+        "libgcc3_uno.so",
+        "liblocaledata_en.so",
+        "liblocaledata_es.so",
+        "liblocaledata_euro.so",
+        "liblocaledata_others.so",
+        "libmcnttype.so",
+        "libpackage2.so",
+        "libsrtrs1.so",
+        "libucb1.so",
+        "libucpfile1.so",
+        "libxstor.so",
+        "localebe1.uno.so",
+        "implreg.uno.so",
+        "nestedreg.uno.so",
+        "regtypeprov.uno.so",
+        "security.uno.so",
+        "servicemgr.uno.so",
+        "shlibloader.uno.so",
+        "simplereg.uno.so",
+        "typemgr.uno.so",
+        "reflection.uno.so",
+        "sax.uno.so",
+        "stocservices.uno.so",
+        "streams.uno.so",
+        "sysmgr1.uno.so",
+        "typeconverter.uno.so",
+        "ucpgvfs1.uno.so",
+        "uriproc.uno.so",
+        NULL
+    };
+
+    // Perhaps do some cunning binary search ?
+    for (int i = 0; pLookup[i] != NULL; i++) {
+      bool match = rLibName.indexOf (pLookup[i]) > 0;
+//	  fprintf (stderr, "Match '%s' vs. '%s' : %d\n",
+//		   (const sal_Char *)rLibName, pLookup[i], match);
+      if (match)
+        return true;
+      }
+
+    return false;
+}
+
+// bootstrap.cxx
+OUString const & get_this_libpath();
+
+// Amusing hack to get 40% win on linking / startup speedup:
+// Rational: we load all of OO.o's exception symbols in a single, global
+// shlib once first of all (RTLD_GLOBAL). This allows us to load all
+// subsequent components RTLD_LOCAL, their vague linkage symbols will
+// resolve in the global scope.
+static bool
+lcl_isInternalLibrary(OUString const & rLibName, OUString const & rPath)
+{
+    if (getenv ("OOO_DISABLE_INTERNAL"))
+        return false;
+
+//	fprintf (stderr, "Lib path '%s' ",
+//			 (const sal_Char *)rtl::OUStringToOString(rPath, RTL_TEXTENCODING_ASCII_US));
+//	fprintf (stderr, "name '%s' - test:\n",
+//			 (const sal_Char *)rtl::OUStringToOString(rLibName, RTL_TEXTENCODING_ASCII_US));
+
+    bool bIsInternal = false;
+
+    // Is this an internal library ?
+    if (rPath.getLength() > 0 && rPath != get_this_libpath())
+    {
+//	fprintf (stderr, "Lib path '%s' - not internal!\n",
+//			 (const sal_Char *)rtl::OUStringToOString(rPath, RTL_TEXTENCODING_ASCII_US));
+        return false;
+    }
+
+    sal_Int32 nUpd = SUPD;
+    OUString aIntSuffix = OUSTR("li.so");
+    if (rLibName.indexOf (aIntSuffix) > 0)
+        bIsInternal = true;
+
+    if (!bIsInternal)
+        bIsInternal = lcl_isWellKnownInternal(
+            OUStringToOString(rLibName, RTL_TEXTENCODING_UTF8));
+
+    // If internal - load the exception type library RTLD_GLOBAL first
+    static bool bHaveLoadedExcepts = false;
+    if (bIsInternal && !bHaveLoadedExcepts)
+    {
+        rtl::OUString aExceptTmpl = rtl::OUString::createFromAscii("vnd.sun.star.expand:$OOO_BASE_DIR/program/libexlink") + aIntSuffix;
+        rtl::OUString aExceptName;
+        try
+          {
+            aExceptName = cppu::bootstrap_expandUri( aExceptTmpl );
+          }
+        catch ( ::com::sun::star::lang::IllegalArgumentException & e ) {}
+        oslModule nExceptLib = osl_loadModule(aExceptName.pData,
+                              SAL_LOADMODULE_LAZY | SAL_LOADMODULE_GLOBAL);
+        if (nExceptLib != NULL) {
+            bHaveLoadedExcepts = true;
+//			fprintf (stderr, "Loaded'%s'\n",
+//				 (const sal_Char *)rtl::OUStringToOString(aExceptName, RTL_TEXTENCODING_ASCII_US));
+        } else {
+            bIsInternal = false;
+//			fprintf (stderr, "Failed to load'%s'\n",
+//				 (const sal_Char *)rtl::OUStringToOString(aExceptName, RTL_TEXTENCODING_ASCII_US));
+        }
+    }
+
+//	fprintf (stderr, "Lib name '%s' %d %d\n",
+//		 (const sal_Char *)rtl::OUStringToOString(rLibName, RTL_TEXTENCODING_ASCII_US),
+//		 bIsInternal, bHaveLoadedExcepts);
+
+    return bIsInternal;
+}
+#endif
+
 //==============================================================================
 static OUString getLibEnv(OUString         const & aModulePath,
                           oslModule                lib, 
@@ -362,9 +499,17 @@ Reference< XInterface > SAL_CALL loadSharedLibComponentFactory(
             aModulePath,
             Reference< XInterface >() );
     }
+
+    sal_Int32 nFlags = SAL_LOADMODULE_LAZY;
+#ifdef LINUX
+    if (!lcl_isInternalLibrary (rLibName, rPath))
+        nFlags |= SAL_LOADMODULE_GLOBAL;
+//  else - faster local only binding
+#else
+    nFlags |= SAL_LOADMODULE_GLOBAL;
+#endif
     
-    oslModule lib = osl_loadModule(
-        aModulePath.pData, SAL_LOADMODULE_LAZY | SAL_LOADMODULE_GLOBAL );
+    oslModule lib = osl_loadModule(aModulePath.pData, nFlags);
     if (! lib)
     {
         throw loader::CannotActivateFactoryException(
-- 
1.7.0.1

