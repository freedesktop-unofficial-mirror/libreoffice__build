From 7bb029a5c97ab1494455efed2580d4eed5b763e9 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:56:16 +0200
Subject: [PATCH 200/878] calc-html-csv-import-force-text-cell.diff

---
 sc/inc/column.hxx                  |    4 +-
 sc/inc/document.hxx                |    4 +-
 sc/inc/stringutil.hxx              |   35 ++++++++++++++++++++++++++++++++
 sc/inc/table.hxx                   |    4 +-
 sc/source/core/data/column3.cxx    |   39 +++++++++++++++++++++++++----------
 sc/source/core/data/document.cxx   |    4 +-
 sc/source/core/data/table2.cxx     |    4 +-
 sc/source/core/tool/stringutil.cxx |    9 ++++++++
 sc/source/filter/rtf/eeimpars.cxx  |   13 ++++++++++-
 sc/source/ui/docshell/impex.cxx    |   23 ++++++++++++++++++++-
 10 files changed, 115 insertions(+), 24 deletions(-)

diff --git a/sc/inc/column.hxx b/sc/inc/column.hxx
index 8331384..e8e94bf 100644
--- a/sc/inc/column.hxx
+++ b/sc/inc/column.hxx
@@ -66,6 +66,7 @@ class ScPostIt;
 struct ScFunctionData;
 struct ScLineFlags;
 struct ScMergePatternState;
+struct ScSetStringParam;
 
 
 #define COLUMN_DELTA	4
@@ -237,8 +238,7 @@ public:
                 //	TRUE = Zahlformat gesetzt
     BOOL		SetString( SCROW nRow, SCTAB nTab, const String& rString,
                            formula::FormulaGrammar::AddressConvention conv = formula::FormulaGrammar::CONV_OOO,
-                           SvNumberFormatter* pFormatter = NULL,
-                           bool bDetectNumberFormat = true );
+                           ScSetStringParam* pParam = NULL );
     void		SetValue( SCROW nRow, const double& rVal);
     void		SetError( SCROW nRow, const USHORT nError);
 
diff --git a/sc/inc/document.hxx b/sc/inc/document.hxx
index 1c66189..78ee8d5 100644
--- a/sc/inc/document.hxx
+++ b/sc/inc/document.hxx
@@ -135,6 +135,7 @@ class SfxUndoManager;
 class ScFormulaParserPool;
 struct ScClipParam;        
 struct ScClipRangeNameData;
+struct ScSetStringParam;
 
 namespace com { namespace sun { namespace star {
     namespace lang {
@@ -723,8 +724,7 @@ public:
                             ULONG nFormatIndex, BOOL bForceTab = FALSE);
                     //	return TRUE = Zahlformat gesetzt
     SC_DLLPUBLIC BOOL           SetString(
-        SCCOL nCol, SCROW nRow, SCTAB nTab, const String& rString,
-        SvNumberFormatter* pFormatter = NULL, bool bDetectNumberFormat = true );
+        SCCOL nCol, SCROW nRow, SCTAB nTab, const String& rString, ScSetStringParam* pParam = NULL );
     SC_DLLPUBLIC void           SetValue( SCCOL nCol, SCROW nRow, SCTAB nTab, const double& rVal );
     void 			SetError( SCCOL nCol, SCROW nRow, SCTAB nTab, const USHORT nError);
 
diff --git a/sc/inc/stringutil.hxx b/sc/inc/stringutil.hxx
index c50c0d8..c6433eb 100644
--- a/sc/inc/stringutil.hxx
+++ b/sc/inc/stringutil.hxx
@@ -32,6 +32,41 @@
 #define SC_STRINGUTIL_HXX
 
 #include "rtl/ustring.hxx"
+#include "scdllapi.h"
+
+class SvNumberFormatter;
+
+/**
+ * Store parameters used in the ScDocument::SetString() method.  Various
+ * options for string-setting operation are specified herein.
+ */
+struct SC_DLLPUBLIC ScSetStringParam
+{
+    /**
+     * Stores the pointer to the number formatter instance to be used during
+     * number format detection.  The caller must manage the life cycle of the
+     * instance.
+     */
+    SvNumberFormatter* mpNumFormatter;
+
+    /**
+     * When true, we try to detect special number format (dates etc) from the
+     * input string, when false, we only try to detect a basic decimal number
+     * format.
+     */
+    bool mbDetectNumberFormat;
+
+    /**
+     * When true, set the format of the cell to Text when a string cell is
+     * requested for a number input.  We may want to do this during text file
+     * import (csv, html etc).
+     */
+    bool mbSetTextCellFormat;
+
+    ScSetStringParam();
+};
+
+// ============================================================================
 
 class ScStringUtil
 {
diff --git a/sc/inc/table.hxx b/sc/inc/table.hxx
index 9bdc8de..84a1153 100644
--- a/sc/inc/table.hxx
+++ b/sc/inc/table.hxx
@@ -73,7 +73,7 @@ struct RowInfo;
 struct ScFunctionData;
 struct ScLineFlags;
 class CollatorWrapper;
-
+struct ScSetStringParam;
 
 class ScTable
 {
@@ -262,7 +262,7 @@ public:
     void		PutCell(SCCOL nCol, SCROW nRow, ULONG nFormatIndex, ScBaseCell* pCell);
                 //	TRUE = Zahlformat gesetzt
     BOOL		SetString( SCCOL nCol, SCROW nRow, SCTAB nTab, const String& rString,
-                           SvNumberFormatter* pFormatter = NULL, bool bDetectNumberFormat = true );
+                           ScSetStringParam* pParam = NULL );
     void		SetValue( SCCOL nCol, SCROW nRow, const double& rVal );
     void 		SetError( SCCOL nCol, SCROW nRow, USHORT nError);
 
diff --git a/sc/source/core/data/column3.cxx b/sc/source/core/data/column3.cxx
index 6ce0e47..8760ac0 100644
--- a/sc/source/core/data/column3.cxx
+++ b/sc/source/core/data/column3.cxx
@@ -52,6 +52,7 @@
 #include "detfunc.hxx"			// fuer Notizen bei DeleteRange
 #include "postit.hxx"
 #include "stringutil.hxx"
+#include "docpool.hxx"
 
 #include <com/sun/star/i18n/LocaleDataItem.hpp>
 
@@ -1249,7 +1250,7 @@ void ScColumn::StartListeningInArea( SCROW nRow1, SCROW nRow2 )
 //	TRUE = Zahlformat gesetzt
 BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
                           formula::FormulaGrammar::AddressConvention eConv,
-                          SvNumberFormatter* pFormatter, bool bDetectNumberFormat )
+                          ScSetStringParam* pParam )
 {
     BOOL bNumFmtSet = FALSE;
     if (VALIDROW(nRow))
@@ -1258,11 +1259,15 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
         BOOL bIsLoading = FALSE;
         if (rString.Len() > 0)
         {
+            ScSetStringParam aParam;
+            if (pParam)
+                aParam = *pParam;
+
             double nVal;
             sal_uInt32 nIndex, nOldIndex = 0;
             sal_Unicode cFirstChar;
-            if (!pFormatter)
-                pFormatter = pDocument->GetFormatTable();
+            if (!aParam.mpNumFormatter)
+                aParam.mpNumFormatter = pDocument->GetFormatTable();
             SfxObjectShell* pDocSh = pDocument->GetDocumentShell();
             if ( pDocSh )
                 bIsLoading = pDocSh->IsLoading();
@@ -1271,7 +1276,7 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
             {
                 nIndex = nOldIndex = GetNumberFormat( nRow );
                 if ( rString.Len() > 1
-                        && pFormatter->GetType(nIndex) != NUMBERFORMAT_TEXT )
+                        && aParam.mpNumFormatter->GetType(nIndex) != NUMBERFORMAT_TEXT )
                     cFirstChar = rString.GetChar(0);
                 else
                     cFirstChar = 0;								// Text
@@ -1327,7 +1332,7 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
                     }
                     // nIndex fuer IsNumberFormat vorbelegen
                     if ( !bIsText )
-                        nIndex = nOldIndex = pFormatter->GetStandardIndex();
+                        nIndex = nOldIndex = aParam.mpNumFormatter->GetStandardIndex();
                 }
 
                 do
@@ -1335,9 +1340,9 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
                     if (bIsText)
                         break;
 
-                    if (bDetectNumberFormat)
+                    if (aParam.mbDetectNumberFormat)
                     {
-                        if (!pFormatter->IsNumberFormat(rString, nIndex, nVal))
+                        if (!aParam.mpNumFormatter->IsNumberFormat(rString, nIndex, nVal))
                             break;
 
                         pNewCell = new ScValueCell( nVal );
@@ -1348,21 +1353,21 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
                             // Exception: If the new format is boolean, always apply it.
 
                             BOOL bOverwrite = FALSE;
-                            const SvNumberformat* pOldFormat = pFormatter->GetEntry( nOldIndex );
+                            const SvNumberformat* pOldFormat = aParam.mpNumFormatter->GetEntry( nOldIndex );
                             if ( pOldFormat )
                             {
                                 short nOldType = pOldFormat->GetType() & ~NUMBERFORMAT_DEFINED;
                                 if ( nOldType == NUMBERFORMAT_NUMBER || nOldType == NUMBERFORMAT_DATE ||
                                      nOldType == NUMBERFORMAT_TIME || nOldType == NUMBERFORMAT_LOGICAL )
                                 {
-                                    if ( nOldIndex == pFormatter->GetStandardFormat(
+                                    if ( nOldIndex == aParam.mpNumFormatter->GetStandardFormat(
                                                         nOldType, pOldFormat->GetLanguage() ) )
                                     {
                                         bOverwrite = TRUE;      // default of these types can be overwritten
                                     }
                                 }
                             }
-                            if ( !bOverwrite && pFormatter->GetType( nIndex ) == NUMBERFORMAT_LOGICAL )
+                            if ( !bOverwrite && aParam.mpNumFormatter->GetType( nIndex ) == NUMBERFORMAT_LOGICAL )
                             {
                                 bOverwrite = TRUE;              // overwrite anything if boolean was detected
                             }
@@ -1378,7 +1383,7 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
                     else
                     {
                         // Only check if the string is a regular number.
-                        const LocaleDataWrapper* pLocale = pFormatter->GetLocaleData();
+                        const LocaleDataWrapper* pLocale = aParam.mpNumFormatter->GetLocaleData();
                         if (!pLocale)
                             break;
 
@@ -1400,7 +1405,19 @@ BOOL ScColumn::SetString( SCROW nRow, SCTAB nTabP, const String& rString,
                 while (false);
 
                 if (!pNewCell)
+                {
+                    if (aParam.mbSetTextCellFormat && aParam.mpNumFormatter->IsNumberFormat(rString, nIndex, nVal))
+                    {
+                        // Set the cell format type to Text.
+                        sal_uInt32 nFormat = aParam.mpNumFormatter->GetStandardFormat(NUMBERFORMAT_TEXT);
+                        ScPatternAttr aNewAttrs(pDocument->GetPool());
+                        SfxItemSet& rSet = aNewAttrs.GetItemSet();
+                        rSet.Put( SfxUInt32Item(ATTR_VALUE_FORMAT, nFormat) );
+                        ApplyPattern(nRow, aNewAttrs);
+                    }
+
                     pNewCell = new ScStringCell(rString);
+                }
             }
         }
 
diff --git a/sc/source/core/data/document.cxx b/sc/source/core/data/document.cxx
index 9a0f409..aa05041 100644
--- a/sc/source/core/data/document.cxx
+++ b/sc/source/core/data/document.cxx
@@ -2606,10 +2606,10 @@ void ScDocument::PutCell( const ScAddress& rPos, ScBaseCell* pCell, BOOL bForceT
 
 
 BOOL ScDocument::SetString( SCCOL nCol, SCROW nRow, SCTAB nTab, const String& rString,
-                            SvNumberFormatter* pFormatter, bool bDetectNumberFormat )
+                            ScSetStringParam* pParam )
 {
     if ( ValidTab(nTab) && pTab[nTab] )
-        return pTab[nTab]->SetString( nCol, nRow, nTab, rString, pFormatter, bDetectNumberFormat );
+        return pTab[nTab]->SetString( nCol, nRow, nTab, rString, pParam );
     else
         return FALSE;
 }
diff --git a/sc/source/core/data/table2.cxx b/sc/source/core/data/table2.cxx
index f551fb3..03f3895 100644
--- a/sc/source/core/data/table2.cxx
+++ b/sc/source/core/data/table2.cxx
@@ -846,11 +846,11 @@ void ScTable::PutCell( const ScAddress& rPos, ScBaseCell* pCell )
 
 
 BOOL ScTable::SetString( SCCOL nCol, SCROW nRow, SCTAB nTabP, const String& rString,
-                         SvNumberFormatter* pFormatter, bool bDetectNumberFormat )
+                         ScSetStringParam* pParam )
 {
     if (ValidColRow(nCol,nRow))
         return aCol[nCol].SetString(
-            nRow, nTabP, rString, pDocument->GetAddressConvention(), pFormatter, bDetectNumberFormat );
+            nRow, nTabP, rString, pDocument->GetAddressConvention(), pParam );
     else
         return FALSE;
 }
diff --git a/sc/source/core/tool/stringutil.cxx b/sc/source/core/tool/stringutil.cxx
index 28a4bc6..f8be97e 100644
--- a/sc/source/core/tool/stringutil.cxx
+++ b/sc/source/core/tool/stringutil.cxx
@@ -40,6 +40,15 @@
 using ::rtl::OUString;
 using ::rtl::OUStringBuffer;
 
+ScSetStringParam::ScSetStringParam() :
+    mpNumFormatter(NULL),
+    mbDetectNumberFormat(true),
+    mbSetTextCellFormat(false)
+{
+}
+
+// ============================================================================-
+
 bool ScStringUtil::parseSimpleNumber(
     const OUString& rStr, sal_Unicode dsep, sal_Unicode gsep, double& rVal)
 {
diff --git a/sc/source/filter/rtf/eeimpars.cxx b/sc/source/filter/rtf/eeimpars.cxx
index 064e131..a424956 100644
--- a/sc/source/filter/rtf/eeimpars.cxx
+++ b/sc/source/filter/rtf/eeimpars.cxx
@@ -66,6 +66,7 @@
 #include "drwlayer.hxx"
 #include "rangenam.hxx"
 #include "progress.hxx"
+#include "stringutil.hxx"
 
 #include "globstr.hrc"
 
@@ -328,12 +329,17 @@ void ScEEImport::WriteToDocument( BOOL bSizeColsRows, double nOutputFactor, SvNu
             // Daten eintragen
             if (bSimple)
             {
+                ScSetStringParam aParam;
+                aParam.mpNumFormatter = pFormatter;
+                aParam.mbDetectNumberFormat = true;
+                aParam.mbSetTextCellFormat = true;
+
                 if ( aValStr.Len() )
                     mpDoc->SetValue( nCol, nRow, nTab, fVal );
                 else if ( !pE->aSel.HasRange() )
                 {
                     // maybe ALT text of IMG or similar
-                    mpDoc->SetString( nCol, nRow, nTab, pE->aAltText, pFormatter );
+                    mpDoc->SetString( nCol, nRow, nTab, pE->aAltText, &aParam );
                     // wenn SelRange komplett leer kann nachfolgender Text im gleichen Absatz liegen!
                 }
                 else
@@ -378,7 +384,10 @@ void ScEEImport::WriteToDocument( BOOL bSizeColsRows, double nOutputFactor, SvNu
                     if (bNumbersEnglishUS && !bEnUsRecognized)
                         mpDoc->PutCell( nCol, nRow, nTab, new ScStringCell( aStr));
                     else
-                        mpDoc->SetString( nCol, nRow, nTab, aStr, pFormatter, bConvertDate );
+                    {
+                        aParam.mbDetectNumberFormat = bConvertDate;
+                        mpDoc->SetString( nCol, nRow, nTab, aStr, &aParam );
+                    }
                 }
             }
             else
diff --git a/sc/source/ui/docshell/impex.cxx b/sc/source/ui/docshell/impex.cxx
index fc0b56f..ff9ccf3 100644
--- a/sc/source/ui/docshell/impex.cxx
+++ b/sc/source/ui/docshell/impex.cxx
@@ -82,6 +82,9 @@ class StarBASIC;
 
 // ause
 #include "editutil.hxx"
+#include "patattr.hxx"
+#include "docpool.hxx"
+#include "stringutil.hxx"
 
 #include "globstr.hrc"
 #include <vcl/msgbox.hxx>
@@ -914,6 +917,18 @@ static bool lcl_PutString(
 
     if ( nColFormat == SC_COL_TEXT )
     {
+        double fDummy;
+        sal_uInt32 nIndex;
+        if (pFormatter->IsNumberFormat(rStr, nIndex, fDummy))
+        {
+            // Set the format of this cell to Text.
+            sal_uInt32 nFormat = pFormatter->GetStandardFormat(NUMBERFORMAT_TEXT);
+            ScPatternAttr aNewAttrs(pDoc->GetPool());
+            SfxItemSet& rSet = aNewAttrs.GetItemSet();
+            rSet.Put( SfxUInt32Item(ATTR_VALUE_FORMAT, nFormat) );
+            pDoc->ApplyPattern(nCol, nRow, nTab, aNewAttrs);
+
+        }
         pDoc->PutCell( nCol, nRow, nTab, ScBaseCell::CreateTextCell( rStr, pDoc ) );
         return bMultiLine;
     }
@@ -1126,7 +1141,13 @@ static bool lcl_PutString(
 
     // Standard or date not determined -> SetString / EditCell
     if( rStr.Search( _LF ) == STRING_NOTFOUND )
-        pDoc->SetString( nCol, nRow, nTab, rStr, pFormatter, bDetectNumFormat );
+    {
+        ScSetStringParam aParam;
+        aParam.mpNumFormatter = pFormatter;
+        aParam.mbDetectNumberFormat = bDetectNumFormat;
+        aParam.mbSetTextCellFormat = true;
+        pDoc->SetString( nCol, nRow, nTab, rStr, &aParam );
+    }
     else 
     {
         bMultiLine = true;
-- 
1.7.0.1

