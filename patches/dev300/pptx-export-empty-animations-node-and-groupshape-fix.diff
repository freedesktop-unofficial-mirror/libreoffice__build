# For the purpose of the 3.1 release, instead of sharing the binary and ooxml
# export, we introduce a separate sc/source/filter/xlsx that creates libxlsx -
# a filter for the XLSX files.  After the release, the changes will be
# reverted so that the binary and ooxml are shared again.
# The changes include:
#   sc/source/filter/eppt/* -> sc/source/filter/pptx/pptx-*
diff --git sd/source/filter/eppt/epptooxml.cxx sd/source/filter/eppt/epptooxml.cxx
index 40b318d..50862df 100644
--- sd/source/filter/pptx/pptx-epptooxml.cxx
+++ sd/source/filter/pptx/pptx-epptooxml.cxx
@@ -172,17 +172,13 @@ ShapeExport& PowerPointShapeExport::WriteUnknownShape( Reference< XShape > xShap
 
     DBG(printf( "shape(unknown): %s\n", USS(sShapeType) ));
 
-    if( sShapeType.equalsAscii( "com.sun.star.drawing.Group" ) )
+    if( sShapeType.equalsAscii( "com.sun.star.drawing.GroupShape" ) )
     {
         Reference< XIndexAccess > rXIndexAccess( xShape, UNO_QUERY );
 
         mrExport.EnterGroup( rXIndexAccess );
         DBG(printf( "enter group\n" ));
     }
-    else if( sShapeType.equalsAscii( "com.sun.star.drawing.Group" ) )
-    {
-        WritePageShape( xShape, mePageType, mrExport.GetPresObj() );
-    }
     else if( sShapeType.equalsAscii( "com.sun.star.drawing.PageShape" ) )
     {
         WritePageShape( xShape, mePageType, mrExport.GetPresObj() );
@@ -1059,18 +1055,26 @@ void PowerPointExport::WriteAnimationNode( FSHelperPtr pFS, const Reference< XAn
 
 void PowerPointExport::WriteAnimations( FSHelperPtr pFS )
 {
-    pFS->startElementNS( XML_p, XML_timing, FSEND );
-    pFS->startElementNS( XML_p, XML_tnLst, FSEND );
-
     Reference< XAnimationNodeSupplier > xNodeSupplier( mXDrawPage, UNO_QUERY );
     if( xNodeSupplier.is() ) {
 	const Reference< XAnimationNode > xNode( xNodeSupplier->getAnimationNode() );
-	if( xNode.is() )
-	    WriteAnimationNode( pFS, xNode, FALSE );
-    }
+	if( xNode.is() ) {
+	    Reference< XEnumerationAccess > xEnumerationAccess( xNode, UNO_QUERY );
+	    if( xEnumerationAccess.is() ) {
+		Reference< XEnumeration > xEnumeration( xEnumerationAccess->createEnumeration(), UNO_QUERY );
+		if( xEnumeration.is() && xEnumeration->hasMoreElements() ) {
+
+		    pFS->startElementNS( XML_p, XML_timing, FSEND );
+		    pFS->startElementNS( XML_p, XML_tnLst, FSEND );
 
-    pFS->endElementNS( XML_p, XML_tnLst );
-    pFS->endElementNS( XML_p, XML_timing );
+		    WriteAnimationNode( pFS, xNode, FALSE );
+
+		    pFS->endElementNS( XML_p, XML_tnLst );
+		    pFS->endElementNS( XML_p, XML_timing );
+		}
+	    }
+	}
+    }
 }
 
 void PowerPointExport::ImplWriteSlide( sal_uInt32 nPageNum, sal_uInt32 nMasterNum, sal_uInt16 /* nMode */,
