Index: framework/inc/services.h
===================================================================
RCS file: /cvs/framework/framework/inc/services.h,v
retrieving revision 1.44
retrieving revision 1.44.4.1
diff -u -p -u -p -r1.44 -r1.44.4.1
--- framework/inc/services.h	2 Aug 2007 17:03:01 -0000	1.44
+++ framework/inc/services.h	30 Aug 2007 15:00:07 -0000	1.44.4.1
@@ -149,7 +149,6 @@ namespace framework{
 #define	IMPLEMENTATIONNAME_LOGINDIALOG						    DECLARE_ASCII("com.sun.star.comp.framework.LoginDialog"				)
 #define	IMPLEMENTATIONNAME_TYPEDETECTION					    DECLARE_ASCII("com.sun.star.comp.framework.TypeDetection"			)
 #define	IMPLEMENTATIONNAME_DOCUMENTPROPERTIES				    DECLARE_ASCII("com.sun.star.comp.framework.DocumentProperties"		)
-#define IMPLEMENTATIONNAME_SOUNDHANDLER                         DECLARE_ASCII("com.sun.star.comp.framework.SoundHandler"            )
 #define IMPLEMENTATIONNAME_CONTENTHANDLERFACTORY                DECLARE_ASCII("com.sun.star.comp.framework.ContentHandlerFactory"   )
 #define IMPLEMENTATIONNAME_SFXTERMINATOR                        DECLARE_ASCII("com.sun.star.comp.sfx2.SfxTerminateListener"         )
 #define IMPLEMENTATIONNAME_PIPETERMINATOR                       DECLARE_ASCII("com.sun.star.comp.OfficeIPCThreadController"         )
Index: framework/inc/dispatch/soundhandler.hxx
===================================================================
RCS file: framework/inc/dispatch/soundhandler.hxx
diff -N framework/inc/dispatch/soundhandler.hxx
--- framework/inc/dispatch/soundhandler.hxx	19 Jun 2006 10:51:51 -0000	1.5
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,229 +0,0 @@
-/*************************************************************************
- *
- *  OpenOffice.org - a multi-platform office productivity suite
- *
- *  $RCSfile: soundhandler.hxx,v $
- *
- *  $Revision: 1.5 $
- *
- *  last change: $Author: hr $ $Date: 2006/06/19 10:51:51 $
- *
- *  The Contents of this file are made available subject to
- *  the terms of GNU Lesser General Public License Version 2.1.
- *
- *
- *    GNU Lesser General Public License Version 2.1
- *    =============================================
- *    Copyright 2005 by Sun Microsystems, Inc.
- *    901 San Antonio Road, Palo Alto, CA 94303, USA
- *
- *    This library is free software; you can redistribute it and/or
- *    modify it under the terms of the GNU Lesser General Public
- *    License version 2.1, as published by the Free Software Foundation.
- *
- *    This library is distributed in the hope that it will be useful,
- *    but WITHOUT ANY WARRANTY; without even the implied warranty of
- *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- *    Lesser General Public License for more details.
- *
- *    You should have received a copy of the GNU Lesser General Public
- *    License along with this library; if not, write to the Free Software
- *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- *    MA  02111-1307  USA
- *
- ************************************************************************/
-
-#ifndef __FRAMEWORK_HANDLER_SOUNDHANDLER_HXX_
-#define __FRAMEWORK_HANDLER_SOUNDHANDLER_HXX_
-
-//_________________________________________________________________________________________________________________
-//	my own includes
-//_________________________________________________________________________________________________________________
-
-#ifndef __FRAMEWORK_THREADHELP_THREADHELPBASE_HXX_
-#include <threadhelp/threadhelpbase.hxx>
-#endif
-
-#ifndef __FRAMEWORK_THREADHELP_RESETABLEGUARD_HXX_
-#include <threadhelp/resetableguard.hxx>
-#endif
-
-#ifndef __FRAMEWORK_MACROS_XINTERFACE_HXX_
-#include <macros/xinterface.hxx>
-#endif
-
-#ifndef __FRAMEWORK_MACROS_XTYPEPROVIDER_HXX_
-#include <macros/xtypeprovider.hxx>
-#endif
-
-#ifndef __FRAMEWORK_MACROS_XSERVICEINFO_HXX_
-#include <macros/xserviceinfo.hxx>
-#endif
-
-#ifndef __FRAMEWORK_MACROS_DEBUG_HXX_
-#include <macros/debug.hxx>
-#endif
-
-#ifndef __FRAMEWORK_MACROS_GENERIC_HXX_
-#include <macros/generic.hxx>
-#endif
-
-#ifndef __FRAMEWORK_GENERAL_H_
-#include <general.h>
-#endif
-
-#ifndef __FRAMEWORK_STDTYPES_H_
-#include <stdtypes.h>
-#endif
-
-//_________________________________________________________________________________________________________________
-//	interface includes
-//_________________________________________________________________________________________________________________
-
-#ifndef _COM_SUN_STAR_LANG_XTYPEPROVIDER_HPP_
-#include <com/sun/star/lang/XTypeProvider.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_
-#include <com/sun/star/lang/XMultiServiceFactory.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_FRAME_XNOTIFYINGDISPATCH_HPP_
-#include <com/sun/star/frame/XNotifyingDispatch.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_FRAME_XSTATUSLISTENER_HPP_
-#include <com/sun/star/frame/XStatusListener.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_FRAME_XFRAME_HPP_
-#include <com/sun/star/frame/XFrame.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_DOCUMENT_XEXTENDEDFILTERDETECTION_HPP_
-#include <com/sun/star/document/XExtendedFilterDetection.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_BEANS_PROPERTYVALUE_HPP_
-#include <com/sun/star/beans/PropertyValue.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_UTIL_URL_HPP_
-#include <com/sun/star/util/URL.hpp>
-#endif
-
-//_________________________________________________________________________________________________________________
-//	other includes
-//_________________________________________________________________________________________________________________
-
-#ifndef _CPPUHELPER_WEAK_HXX_
-#include <cppuhelper/weak.hxx>
-#endif
-
-#ifndef _SV_SOUND_HXX
-#include <vcl/sound.hxx>
-#endif
-
-//_________________________________________________________________________________________________________________
-//	namespace
-//_________________________________________________________________________________________________________________
-
-namespace framework{
-
-//_________________________________________________________________________________________________________________
-//	exported const
-//_________________________________________________________________________________________________________________
-
-//_________________________________________________________________________________________________________________
-//	exported definitions
-//_________________________________________________________________________________________________________________
-
-/*-************************************************************************************************************//**
-    @short          handler to detect and play sounds ("wav" and "au" only!)
-    @descr          Register this implementation as a content handler to detect and/or play wav- and au-sounds.
-                    It doesn't depend from the target platform. But one instance of this class
-                    can play one sound at the same time only. Means every new dispatch request will stop the
-                    might still running one. So we support one operation/one URL/one listener at the same time
-                    only.
-
-    @devstatus      ready
-    @threadsafe     yes
-*//*-*************************************************************************************************************/
-class SoundHandler  :   // interfaces
-                        public  css::lang::XTypeProvider
-                    ,   public  css::lang::XServiceInfo
-                    ,   public  css::frame::XNotifyingDispatch // => XDispatch
-                    ,   public  css::document::XExtendedFilterDetection
-                        // baseclasses
-                        // Order is neccessary for right initialization!
-                    ,   private ThreadHelpBase
-                    ,   public  ::cppu::OWeakObject
-{
-	//-------------------------------------------------------------------------------------------------------------
-	//	public methods
-	//-------------------------------------------------------------------------------------------------------------
-	public:
-
-		//---------------------------------------------------------------------------------------------------------
-		//	constructor / destructor
-		//---------------------------------------------------------------------------------------------------------
-                 SoundHandler( const css::uno::Reference< css::lang::XMultiServiceFactory >& xFactory );
-        virtual ~SoundHandler(                                                                        );
-
-		//---------------------------------------------------------------------------------------------------------
-        //  XInterface, XTypeProvider, XServiceInfo
-		//---------------------------------------------------------------------------------------------------------
-		FWK_DECLARE_XINTERFACE
-		FWK_DECLARE_XTYPEPROVIDER
-            DECLARE_XSERVICEINFO
-
-        //---------------------------------------------------------------------------------------------------------
-        //  XNotifyingDispatch
-        //---------------------------------------------------------------------------------------------------------
-        virtual void SAL_CALL dispatchWithNotification(const css::util::URL&                                             aURL      ,
-                                                       const css::uno::Sequence< css::beans::PropertyValue >&            lArguments,
-                                                       const css::uno::Reference< css::frame::XDispatchResultListener >& xListener ) throw(css::uno::RuntimeException);
-
-		//---------------------------------------------------------------------------------------------------------
-		//	XDispatch
-		//---------------------------------------------------------------------------------------------------------
-        virtual void SAL_CALL dispatch              (   const   css::util::URL&                                     aURL        ,
-                                                        const   css::uno::Sequence< css::beans::PropertyValue >&    lArguments  ) throw( css::uno::RuntimeException );
-        // not supported !
-        virtual void SAL_CALL addStatusListener     (   const   css::uno::Reference< css::frame::XStatusListener >& /*xListener*/   ,
-                                                        const   css::util::URL&                                     /*aURL*/        ) throw( css::uno::RuntimeException ) {};
-        virtual void SAL_CALL removeStatusListener  (   const   css::uno::Reference< css::frame::XStatusListener >& /*xListener*/   ,
-                                                        const   css::util::URL&                                     /*aURL*/        ) throw( css::uno::RuntimeException ) {};
-
-		//---------------------------------------------------------------------------------------------------------
-        //  XExtendedFilterDetection
-		//---------------------------------------------------------------------------------------------------------
-        virtual ::rtl::OUString SAL_CALL detect     (           css::uno::Sequence< css::beans::PropertyValue >&    lDescriptor ) throw( css::uno::RuntimeException );
-
-	//-------------------------------------------------------------------------------------------------------------
-	//	protected methods
-	//-------------------------------------------------------------------------------------------------------------
-	protected:
-
-	//-------------------------------------------------------------------------------------------------------------
-	//	private methods
-	//-------------------------------------------------------------------------------------------------------------
-	private:
-        DECL_LINK( implts_PlayerNotify, void* );
-
-	//-------------------------------------------------------------------------------------------------------------
-	//	variables
-	//	(should be private everyway!)
-	//-------------------------------------------------------------------------------------------------------------
-	private:
-
-        css::uno::Reference< css::lang::XMultiServiceFactory >     m_xFactory          ;   /// global uno service factory to create new services
-        css::uno::Reference< css::uno::XInterface >                m_xSelfHold         ;   /// we must protect us against dieing during async(!) dispatch() call!
-        Sound                                                      m_aPlayer           ;   /// used vcl player to play sounds ... works asynchron ... That's why "self hold" and "request count" ...
-        css::uno::Reference< css::frame::XDispatchResultListener > m_xListener         ;
-
-};      //  class SoundHandler
-
-}		//	namespace framework
-
-#endif  //  #ifndef __FRAMEWORK_HANDLER_SOUNDHANDLER_HXX_
Index: framework/qa/unoapi/framework.sce
===================================================================
RCS file: /cvs/framework/framework/qa/unoapi/framework.sce,v
retrieving revision 1.8
retrieving revision 1.7.400.2
diff -u -p -u -p -r1.8 -r1.7.400.2
--- framework/qa/unoapi/framework.sce	23 Oct 2007 09:49:36 -0000	1.8
+++ framework/qa/unoapi/framework.sce	30 Oct 2007 15:11:51 -0000	1.7.400.2
@@ -15,7 +15,6 @@
 #-o fwk.JobHandler
 -o fwk.MailToDispatcher
 -o fwk.ServiceHandler
--o fwk.SoundHandler
 -o fwk.URLTransformer
 -o fwk.MacrosMenuController
 -o fwk.ModuleManager
Index: framework/source/dispatch/makefile.mk
===================================================================
RCS file: /cvs/framework/framework/source/dispatch/makefile.mk,v
retrieving revision 1.13
retrieving revision 1.13.26.1
diff -u -p -u -p -r1.13 -r1.13.26.1
--- framework/source/dispatch/makefile.mk	5 Jul 2007 08:57:50 -0000	1.13
+++ framework/source/dispatch/makefile.mk	30 Aug 2007 15:00:08 -0000	1.13.26.1
@@ -56,7 +56,6 @@ SLOFILES=			$(SLO)$/interceptionhelper.o
 					$(SLO)$/menudispatcher.obj					\
 					$(SLO)$/helpagentdispatcher.obj				\
 					$(SLO)$/mailtodispatcher.obj				\
-					$(SLO)$/soundhandler.obj					\
 					$(SLO)$/interaction.obj						\
                     $(SLO)$/servicehandler.obj                  \
                     $(SLO)$/closedispatcher.obj                 \
Index: framework/source/dispatch/soundhandler.cxx
===================================================================
RCS file: framework/source/dispatch/soundhandler.cxx
diff -N framework/source/dispatch/soundhandler.cxx
--- framework/source/dispatch/soundhandler.cxx	16 Sep 2006 13:55:53 -0000	1.14
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,351 +0,0 @@
-/*************************************************************************
- *
- *  OpenOffice.org - a multi-platform office productivity suite
- *
- *  $RCSfile: soundhandler.cxx,v $
- *
- *  $Revision: 1.14 $
- *
- *  last change: $Author: obo $ $Date: 2006/09/16 13:55:53 $
- *
- *  The Contents of this file are made available subject to
- *  the terms of GNU Lesser General Public License Version 2.1.
- *
- *
- *    GNU Lesser General Public License Version 2.1
- *    =============================================
- *    Copyright 2005 by Sun Microsystems, Inc.
- *    901 San Antonio Road, Palo Alto, CA 94303, USA
- *
- *    This library is free software; you can redistribute it and/or
- *    modify it under the terms of the GNU Lesser General Public
- *    License version 2.1, as published by the Free Software Foundation.
- *
- *    This library is distributed in the hope that it will be useful,
- *    but WITHOUT ANY WARRANTY; without even the implied warranty of
- *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- *    Lesser General Public License for more details.
- *
- *    You should have received a copy of the GNU Lesser General Public
- *    License along with this library; if not, write to the Free Software
- *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- *    MA  02111-1307  USA
- *
- ************************************************************************/
-
-// MARKER(update_precomp.py): autogen include statement, do not remove
-#include "precompiled_framework.hxx"
-//_________________________________________________________________________________________________________________
-//	my own includes
-//_________________________________________________________________________________________________________________
-
-#ifndef __FRAMEWORK_DISPATCH_SOUNDHANDLER_HXX_
-#include <dispatch/soundhandler.hxx>
-#endif
-
-#ifndef __FRAMEWORK_THREADHELP_TRANSACTIONGUARD_HXX_
-#include <threadhelp/transactionguard.hxx>
-#endif
-
-#ifndef __FRAMEWORK_THREADHELP_WRITEGUARD_HXX_
-#include <threadhelp/writeguard.hxx>
-#endif
-
-#ifndef __FRAMEWORK_THREADHELP_READGUARD_HXX_
-#include <threadhelp/readguard.hxx>
-#endif
-
-#ifndef __FRAMEWORK_MACROS_DEBUG_HXX_
-#include <macros/debug.hxx>
-#endif
-
-#ifndef __FRAMEWORK_SERVICES_H_
-#include <services.h>
-#endif
-
-#ifndef __COMPHELPER_MEDIADESCRIPTOR_HXX_
-#include <comphelper/mediadescriptor.hxx>
-#endif
-
-//_________________________________________________________________________________________________________________
-//	interface includes
-//_________________________________________________________________________________________________________________
-
-#ifndef _COM_SUN_STAR_IO_XINPUTSTREAM_HPP_
-#include <com/sun/star/io/XInputStream.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_FRAME_DISPATCHRESULTSTATE_HPP_
-#include <com/sun/star/frame/DispatchResultState.hpp>
-#endif
-
-//_________________________________________________________________________________________________________________
-//	includes of other projects
-//_________________________________________________________________________________________________________________
-
-#ifndef _COMPHELPER_SEQUENCEASHASHMAP_HXX_
-#include <comphelper/sequenceashashmap.hxx>
-#endif
-
-#ifndef _RTL_USTRBUF_HXX_
-#include <rtl/ustrbuf.hxx>
-#endif
-
-#ifndef _SV_SALSTYPE_HXX
-#include <vcl/salstype.hxx>
-#endif
-
-//_________________________________________________________________________________________________________________
-//	namespace
-//_________________________________________________________________________________________________________________
-
-namespace framework{
-
-//_________________________________________________________________________________________________________________
-//	non exported const
-//_________________________________________________________________________________________________________________
-
-//_________________________________________________________________________________________________________________
-//	non exported definitions
-//_________________________________________________________________________________________________________________
-
-//_________________________________________________________________________________________________________________
-//	declarations
-//_________________________________________________________________________________________________________________
-
-//*****************************************************************************************************************
-//  XInterface, XTypeProvider, XServiceInfo
-//*****************************************************************************************************************
-DEFINE_XINTERFACE_5                 (   SoundHandler                                                 ,
-                                        OWeakObject                                                  ,
-                                        DIRECT_INTERFACE( css::lang::XTypeProvider                  ),
-                                        DIRECT_INTERFACE( css::lang::XServiceInfo                   ),
-                                        DIRECT_INTERFACE( css::frame::XNotifyingDispatch            ),
-                                        DIRECT_INTERFACE( css::frame::XDispatch                     ),
-                                        DIRECT_INTERFACE( css::document::XExtendedFilterDetection   )
-                                    )
-
-DEFINE_XTYPEPROVIDER_5              (   SoundHandler                                                ,
-                                        css::lang::XTypeProvider                                    ,
-                                        css::lang::XServiceInfo                                     ,
-                                        css::frame::XNotifyingDispatch                              ,
-                                        css::frame::XDispatch                                       ,
-                                        css::document::XExtendedFilterDetection
-                                    )
-
-DEFINE_XSERVICEINFO_MULTISERVICE    (   SoundHandler                                                ,
-                                        ::cppu::OWeakObject                                         ,
-                                        SERVICENAME_CONTENTHANDLER                                  ,
-                                        IMPLEMENTATIONNAME_SOUNDHANDLER
-									)
-
-DEFINE_INIT_SERVICE                 (   SoundHandler,
-                                        {
-                                        }
-                                    )
-
-/*-************************************************************************************************************//**
-    @short      standard ctor
-    @descr      These initialize a new instance of this class with needed informations for work.
-
-    @seealso    using at owner
-
-    @param      "xFactory", reference to service manager for creation of new services
-    @return     -
-
-    @onerror    Show an assertion and do nothing else.
-    @threadsafe yes
-*//*-*************************************************************************************************************/
-SoundHandler::SoundHandler( const css::uno::Reference< css::lang::XMultiServiceFactory >& xFactory )
-		//	Init baseclasses first
-        :   ThreadHelpBase      (          )
-        ,   ::cppu::OWeakObject (          )
-        // Init member
-        ,   m_xFactory          ( xFactory )
-        ,   m_aPlayer           (          )
-{
-    m_aPlayer.SetNotifyHdl( LINK( this, SoundHandler, implts_PlayerNotify ) );
-}
-
-/*-************************************************************************************************************//**
-    @short      standard dtor
-    @descr      -
-
-    @seealso    -
-
-    @param      -
-    @return     -
-
-    @onerror    -
-    @threadsafe -
-*//*-*************************************************************************************************************/
-SoundHandler::~SoundHandler()
-{
-    if (m_xListener.is())
-    {
-        css::frame::DispatchResultEvent aEvent;
-        aEvent.State = css::frame::DispatchResultState::FAILURE;
-        m_xListener->dispatchFinished(aEvent);
-        m_xListener = css::uno::Reference< css::frame::XDispatchResultListener >();
-    }
-}
-
-/*-************************************************************************************************************//**
-    @interface  ::com::sun::star::frame::XDispatch
-
-    @short      try to load audio file
-    @descr      This method try to load given audio file by URL and play it. We use vcl/Sound class to do that.
-                Playing of sound is asynchron everytime.
-
-    @attention  We must hold us alive by ourself ... because we use async. vcl sound player ... but playing is started
-                in async interface call "dispatch()" too. And caller forget us imediatly. But then our uno ref count
-                will decreased to 0 and will die. The only solution is to use own reference to our implementation.
-                But we do it for realy started jobs only and release it during call back of vcl.
-
-    @seealso    class vcl/Sound
-    @seealso    method implts_PlayerNotify()
-
-    @param      "aURL"      , URL to dispatch.
-    @param      "lArguments", list of optional arguments.
-    @return     -
-
-    @onerror    We do nothing.
-    @threadsafe yes
-*//*-*************************************************************************************************************/
-void SAL_CALL SoundHandler::dispatchWithNotification(const css::util::URL&                                             aURL      ,
-                                                     const css::uno::Sequence< css::beans::PropertyValue >&            /*lArguments*/,
-                                                     const css::uno::Reference< css::frame::XDispatchResultListener >& xListener ) throw(css::uno::RuntimeException)
-{
-    // SAFE {
-    ResetableGuard aLock( m_aLock );
-
-    // If player currently used for other dispatch() requests ...
-    // cancel it by calling stop()!
-    if (m_aPlayer.IsPlaying())
-    {
-        // It calls our impl_notify() automaticly ... so we inform our listener
-        // everytimes!
-        m_aPlayer.Stop();
-    }
-
-    // Try to initialize player.
-    m_xListener = xListener;
-    if (m_aPlayer.SetSoundName(aURL.Complete))
-    {
-        // OK- we can start async playing ...
-        // Count this request and initialize self-holder against dieing by uno ref count ...
-        m_xSelfHold = css::uno::Reference< css::uno::XInterface >(static_cast< ::cppu::OWeakObject* >(this), css::uno::UNO_QUERY);
-        m_aPlayer.Play();
-    }
-
-    // } SAFE
-    aLock.unlock();
-}
-
-void SAL_CALL SoundHandler::dispatch( const css::util::URL&                                  aURL       ,
-                                      const css::uno::Sequence< css::beans::PropertyValue >& lArguments ) throw( css::uno::RuntimeException )
-{
-    dispatchWithNotification(aURL, lArguments, css::uno::Reference< css::frame::XDispatchResultListener >());
-}
-
-/*-************************************************************************************************************//**
-    @interface  ::com::sun::star::document::XExtendedFilterDetection
-
-    @short      try to detect file (given as argument included in "lDescriptor")
-    @descr      We try to detect, if given file could be handled by this class and is a well known one.
-                If it is - we return right internal type name - otherwise we return nothing!
-                So call can search for another detect service and ask him too.
-
-    @attention  a) We don't need any mutex here ... because we don't use any member!
-                b) Dont' use internal player instance "m_pPlayer" to detect given sound file!
-                   It's not neccessary to do that ... and we can use temp. variable to do the same.
-                   This way is easy - we don't must synchronize it with currently played sounds!
-                   Another reason to do so ... We are a listener on our internal ma_Player object.
-                   If you would call "IsSoundFile()" on this instance, he would call us back and
-                   we make some uneccssary things ...
-
-    @seealso    -
-
-    @param      "lDescriptor", description of file to detect
-    @return     Internal type name which match this file ... or nothing if it is unknown.
-
-    @onerror    We return nothing.
-    @threadsafe yes
-*//*-*************************************************************************************************************/
-::rtl::OUString SAL_CALL SoundHandler::detect( css::uno::Sequence< css::beans::PropertyValue >& lDescriptor ) throw( css::uno::RuntimeException )
-{
-    // Our default is "nothing". So we can return it, if detection failed or fily type is realy unknown.
-    ::rtl::OUString sTypeName;
-
-    // Analyze given descriptor to find filename or input stream or ...
-    ::comphelper::MediaDescriptor aDescriptor(lDescriptor);
-    ::rtl::OUString               sURL       = aDescriptor.getUnpackedValueOrDefault(::comphelper::MediaDescriptor::PROP_URL(), ::rtl::OUString());
-    Sound                         aDetector  ;
-
-    if (
-        (sURL.getLength()           ) &&
-        (aDetector.IsSoundFile(sURL))
-       )
-    {
-        // "IsSoundFile" idffer between different "wav" and "au" file versions ...
-        // couldn't return this information ... because: He use the OS to detect it!
-        // I think we can the following ones:
-        //  a) look for given extension of url to map our type decision HARD CODED!!!
-        //  b) return preferred type every time... it's easy :-)
-        sTypeName = ::rtl::OUString::createFromAscii("wav_Wave_Audio_File");
-        aDescriptor[::comphelper::MediaDescriptor::PROP_TYPENAME()] <<= sTypeName;
-        aDescriptor >> lDescriptor;
-    }
-
-    // Return our decision.
-    return sTypeName;
-}
-
-/*-************************************************************************************************************//**
-    @short      call back of sound player
-    @descr      Our player call us back to give us some informations.
-                We use this informations to callback our might existing listener.
-
-    @seealso    method dispatchWithNotification()
-
-    @param      -
-    @return     0 everytime ... it doesnt matter for us.
-
-    @onerror    -
-    @threadsafe yes
-*//*-*************************************************************************************************************/
-IMPL_LINK( SoundHandler, implts_PlayerNotify, void*, EMPTYARG )
-{
-    // SAFE {
-    ResetableGuard aLock(m_aLock);
-
-    // We use m_xSelfHold to let us die ... but we must live till real finishing of this method too!!!
-    // So we SHOULD use another "self-holder" temp. to provide that ...
-    css::uno::Reference< css::uno::XInterface > xOperationHold = m_xSelfHold;
-    m_xSelfHold = css::uno::Reference< css::uno::XInterface >();
-
-    // get last error and reset it - so the next callback shows the real problem
-    ULONG nError = m_aPlayer.GetLastError();
-    m_aPlayer.ClearError();
-
-    // notify might existing listener
-    // And forget this listener!
-    // Because the corresponding dispatch was finished.
-    if (m_xListener.is())
-    {
-        css::frame::DispatchResultEvent aEvent;
-        if (nError == SOUNDERR_SUCCESS)
-            aEvent.State = css::frame::DispatchResultState::SUCCESS;
-        else
-            aEvent.State = css::frame::DispatchResultState::FAILURE;
-        m_xListener->dispatchFinished(aEvent);
-        m_xListener = css::uno::Reference< css::frame::XDispatchResultListener >();
-    }
-
-    aLock.unlock();
-    // } SAFE
-
-    return 0;
-}
-
-} // namespace framework
Index: framework/source/register/registerservices.cxx
===================================================================
RCS file: /cvs/framework/framework/source/register/registerservices.cxx,v
retrieving revision 1.39
retrieving revision 1.39.4.1
diff -u -p -u -p -r1.39 -r1.39.4.1
--- framework/source/register/registerservices.cxx	2 Aug 2007 17:03:59 -0000	1.39
+++ framework/source/register/registerservices.cxx	30 Aug 2007 15:00:09 -0000	1.39.4.1
@@ -89,10 +89,6 @@
 #include <jobs/jobexecutor.hxx>
 #endif
 
-#ifndef __FRAMEWORK_DISPATCH_SOUNDHANDLER_HXX_
-#include <dispatch/soundhandler.hxx>
-#endif
-
 #ifndef __FRAMEWORK_RECORDING_DISPATCHRECORDERSUPPLIER_HXX_
 #include <recording/dispatchrecordersupplier.hxx>
 #endif
@@ -281,7 +277,6 @@ COMPONENTGETIMPLEMENTATIONENVIRONMENT
 COMPONENTWRITEINFO  (   COMPONENTINFO( ::framework::URLTransformer                          )
 						COMPONENTINFO( ::framework::Desktop						            )
                         COMPONENTINFO( ::framework::Frame                                   )
-                        COMPONENTINFO( ::framework::SoundHandler                            )
                         COMPONENTINFO( ::framework::JobExecutor                             )
                         COMPONENTINFO( ::framework::DispatchRecorderSupplier                )
                         COMPONENTINFO( ::framework::DispatchRecorder                        )
@@ -335,7 +330,6 @@ COMPONENTWRITEINFO  (   COMPONENTINFO( :
 COMPONENTGETFACTORY	(	IFFACTORY( ::framework::URLTransformer					        )	else
 						IFFACTORY( ::framework::Desktop							        )	else
                         IFFACTORY( ::framework::Frame                                   )   else
-                        IFFACTORY( ::framework::SoundHandler                            )   else
                         IFFACTORY( ::framework::JobExecutor                             )   else
                         IFFACTORY( ::framework::DispatchRecorderSupplier                )   else
                         IFFACTORY( ::framework::DispatchRecorder                        )   else
Index: framework/source/unotypes/fwk.xml
===================================================================
RCS file: /cvs/framework/framework/source/unotypes/fwk.xml,v
retrieving revision 1.12
retrieving revision 1.12.400.1
diff -u -p -u -p -r1.12 -r1.12.400.1
--- framework/source/unotypes/fwk.xml	14 Jun 2005 15:34:15 -0000	1.12
+++ framework/source/unotypes/fwk.xml	30 Aug 2007 15:00:09 -0000	1.12.400.1
@@ -60,19 +60,6 @@
 
 	<component-description>
 		<author> Andreas Schluens </author>
-		<name> com.sun.star.comp.framework.SoundHandler </name>
-		<description>
-			Implements a handler service to detect and/or play audio files.
-			supported formats: wav/au
-		</description>
-		<loader-name> com.sun.star.loader.SharedLibrary </loader-name>
-		<language> c++ </language>
-		<status value="final"/>
-        <supported-service> com.sun.star.frame.ContentHandler </supported-service>
-	</component-description>
-
-	<component-description>
-		<author> Andreas Schluens </author>
 		<name> com.sun.star.comp.framework.DispatchRecorderSupplier </name>
 		<description>
 			This supplier is available on the servcice Frame as property "DispatchRecorderSupplier".
Index: framework/util/makefile.mk
===================================================================
RCS file: /cvs/framework/framework/util/makefile.mk,v
retrieving revision 1.115
retrieving revision 1.115.14.1
diff -u -p -u -p -r1.115 -r1.115.14.1
--- framework/util/makefile.mk	17 Jul 2007 13:26:27 -0000	1.115
+++ framework/util/makefile.mk	30 Aug 2007 15:00:10 -0000	1.115.14.1
@@ -224,7 +224,6 @@ SHL4OBJS=       \
 				$(SLO)$/oframes.obj					\
 				$(SLO)$/registerservices.obj		\
 				$(SLO)$/closedispatcher.obj         \
-				$(SLO)$/soundhandler.obj			\
 				$(SLO)$/statusindicator.obj			\
 				$(SLO)$/statusindicatorfactory.obj	\
 				$(SLO)$/targetfinder.obj		  	\
