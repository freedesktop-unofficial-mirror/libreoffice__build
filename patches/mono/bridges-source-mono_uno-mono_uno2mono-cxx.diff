--- /dev/null	
+++ bridges/source/mono_uno/mono_uno2mono.cxx	
@@ -0,0 +1,174 @@
+/*
+ *
+ *  $RCSfile: $
+ *
+ *  $Revision: $
+ *
+ *  last change: $Author: $ $Date: $
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "uno/environment.h"
+#include "uno/dispatcher.h"
+#include "mono_bridge.h"
+
+typedef struct _typelib_InterfaceTypeDescription typelib_InterfaceTypeDescription;
+
+namespace
+{
+extern "C"
+{
+
+//------------------------------------------------------------------------------
+void SAL_CALL UNO_proxy_free( uno_ExtEnvironment * env, void * proxy )
+    SAL_THROW_EXTERN_C();
+
+//------------------------------------------------------------------------------
+void SAL_CALL UNO_proxy_acquire( uno_Interface * pUnoI )
+    SAL_THROW_EXTERN_C();
+
+//------------------------------------------------------------------------------
+void SAL_CALL UNO_proxy_release( uno_Interface * pUnoI )
+    SAL_THROW_EXTERN_C();
+
+//------------------------------------------------------------------------------
+// void SAL_CALL UNO_proxy_dispatch(
+//     uno_Interface * pUnoI, typelib_TypeDescription const * member_td,
+//     void * uno_ret, void * uno_args[], uno_Any ** uno_exc )
+//     SAL_THROW_EXTERN_C();
+}
+}
+
+namespace mono_uno
+{
+
+//==== a uno proxy wrapping a mono interface ===================================
+struct UNO_proxy : public uno_Interface
+{
+    Bridge const * m_bridge;
+
+    inline UNO_proxy(
+        Bridge const * bridge, guint32 monoI, rtl_uString *oid );
+        
+};
+
+inline UNO_proxy::UNO_proxy(
+    Bridge const * bridge, guint32 monoI, rtl_uString *oid )
+{
+}
+
+uno_Interface * Bridge::map_to_uno(
+    guint32 monoI, typelib_TypeDescription *pTD ) const    
+{
+    rtl_uString * oid = 0; // FIXME
+    uno_Interface * pUnoI = 0;
+    (*m_uno_env->getRegisteredInterface)(
+        m_uno_env, (void **)&pUnoI,
+        oid, (typelib_InterfaceTypeDescription *)pTD );
+
+    if (0 == pUnoI) // no existing interface, register new proxy
+    {
+        // refcount initially 1
+        pUnoI = new UNO_proxy(
+            const_cast< Bridge * >( this ), monoI, oid );
+
+        (*m_uno_env->registerProxyInterface)(
+            m_uno_env, (void **)&pUnoI,
+            UNO_proxy_free,
+            oid, (typelib_InterfaceTypeDescription *)pTD );
+    }
+    return pUnoI;
+}
+
+}
+
+using namespace ::mono_uno;
+
+namespace
+{
+extern "C"
+{
+
+void SAL_CALL UNO_proxy_free( uno_ExtEnvironment * env, void * proxy )
+    SAL_THROW_EXTERN_C()
+{
+    UNO_proxy const * that = reinterpret_cast< UNO_proxy const * >( proxy );
+    Bridge const * bridge = that->m_bridge;
+
+    OSL_ASSERT( env == bridge->m_uno_env );
+#if OSL_DEBUG_LEVEL > 1
+    OString cstr_msg(
+        OUStringToOString( 
+            OUSTR("freeing binary uno proxy: ") + that->m_oid,
+            RTL_TEXTENCODING_ASCII_US ) );
+    OSL_TRACE( cstr_msg.getStr() );
+#endif
+
+    try
+    {
+//         mono_gchandle_free( that->m_monoI );
+//         mono_gchandle_free( that->m_mono_oid );
+    }
+    catch (BridgeRuntimeError & err)
+    {
+#if OSL_DEBUG_LEVEL > 0
+        OString cstr_msg(
+            OUStringToOString( err.m_message, RTL_TEXTENCODING_ASCII_US ) );
+        OSL_ENSURE( 0, cstr_msg.getStr() );
+#endif
+    }
+}
+
+}
+}
