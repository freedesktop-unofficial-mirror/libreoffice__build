From fe938484c1b5f69ed8ff21e64fd2511858bb860a Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:59:37 +0200
Subject: [PATCH 381/878] climaker-csharp-win.diff

---
 cli_ure/source/climaker/climaker_csharp.cs |   83 +++++++++++++++-------------
 cli_ure/source/climaker/climaker_mono.cxx  |    4 +-
 2 files changed, 46 insertions(+), 41 deletions(-)

diff --git a/cli_ure/source/climaker/climaker_csharp.cs b/cli_ure/source/climaker/climaker_csharp.cs
index d3b3711..1c7b60a 100644
--- a/cli_ure/source/climaker/climaker_csharp.cs
+++ b/cli_ure/source/climaker/climaker_csharp.cs
@@ -160,6 +160,7 @@ class TypeEmitter : IDisposable
         Type ret = mModuleBuilder.GetType (args.Name, false);
         //Console.WriteLine ("mModuleBuilder.GetType yields {0}", ret);
 
+#if __MonoCS__
         if (ret is TypeBuilder) {
             TypeBuilder tb = ret as TypeBuilder;
             //Console.WriteLine ("{0} is type builder", tb);
@@ -168,7 +169,7 @@ class TypeEmitter : IDisposable
                 //Console.WriteLine ("resolving to created {0} {1}", ret, tb);
             }
         }
-
+#endif
         if (ret == null) {
             IFaceEntry entry = mIncompleteIFaces [args.Name] as IFaceEntry;
             if (entry != null)
@@ -201,6 +202,7 @@ class TypeEmitter : IDisposable
         Type ret = mModuleBuilder.GetType (name, false);
         //Console.WriteLine ("mModuleBuilder.GetType yields {0}", ret);
 
+#if __MonoCS__
         if (ret is TypeBuilder) {
             TypeBuilder tb = ret as TypeBuilder;
             //Console.WriteLine ("{0} is type builder", tb);
@@ -209,7 +211,7 @@ class TypeEmitter : IDisposable
                 //Console.WriteLine ("resolving to created {0} {1}", ret, tb);
             }
         }
-
+#endif
         if (ret == null) {
             //Console.WriteLine ("looking name {0}", name);
             IFaceEntry entry = mIncompleteIFaces [name] as IFaceEntry;
@@ -1164,23 +1166,26 @@ class TypeEmitter : IDisposable
                     }
 
                     if (method.ReturnsStruct) {
-                        //Console.WriteLine ("returns struct");
+                        // Console.WriteLine ("returns struct");
 
                         UnoXStructTypeDescription std = method.ReturnType as UnoXStructTypeDescription;
-                        Type[] ats = new Type [std.TypeArguments];
+                        if (std.TypeArguments != 0) {
+                            // Console.WriteLine ("std: '{0}' '{1}' {2}", std, method.ReturnType, method.ReturnType.Name);
+                            Type[] ats = new Type [std.TypeArguments];
 
-                        //Console.WriteLine ("type arguments: {0}", std.TypeArguments);
+                            // Console.WriteLine ("type arguments: {0}", std.TypeArguments);
 
-                        for (j = 0; j < std.TypeArguments; j ++) {
-                            ats [j] = GetType (std.TypeArgument (j));
-                            //Console.WriteLine ("ats [{0}] = {1}", j, ats [j]);
-                        }
+                            for (j = 0; j < std.TypeArguments; j ++) {
+                                ats [j] = GetType (std.TypeArgument (j));
+                                //Console.WriteLine ("ats [{0}] = {1}", j, ats [j]);
+                            }
 
-                        object[] atso = { ats };
-                        Type[] ctor = { typeof (Type[]) };
-                        attrBuilder = new CustomAttributeBuilder (typeof (uno.TypeArgumentsAttribute).GetConstructor (ctor),
+                            object[] atso = { ats };
+                            Type[] ctor = { typeof (Type[]) };
+                            attrBuilder = new CustomAttributeBuilder (typeof (uno.TypeArgumentsAttribute).GetConstructor (ctor),
                                                                   atso);
-                        methodBuilder.SetCustomAttribute (attrBuilder);
+                            methodBuilder.SetCustomAttribute (attrBuilder);
+                        }
                     }
 
                     // define UNO exception attribute (exceptions) --------------------------------------
@@ -2051,7 +2056,7 @@ class UnoXTypeDescription : UnoObject
     {
         get
         {
-            return cmm_x_type_description_get_name (mHandle);
+            return Marshal.PtrToStringAnsi (cmm_x_type_description_get_name (mHandle));
         }
     }
 
@@ -2064,7 +2069,7 @@ class UnoXTypeDescription : UnoObject
     }
 
     [DllImport("climaker")]
-    private static extern string cmm_x_type_description_get_name (IntPtr handle);
+    private static extern IntPtr cmm_x_type_description_get_name (IntPtr handle);
 
     [DllImport("climaker")]
     private static extern UnoTypeClass cmm_x_type_description_get_type_class (IntPtr handle);
@@ -2086,7 +2091,7 @@ class UnoXEnumTypeDescription : UnoXTypeDescription
 
     public string ValueName (int idx)
     {
-        return cmm_x_enum_type_description_get_name (mHandle, idx);
+        return Marshal.PtrToStringAnsi (cmm_x_enum_type_description_get_name (mHandle, idx));
     }
 
     public int Value (int idx)
@@ -2101,7 +2106,7 @@ class UnoXEnumTypeDescription : UnoXTypeDescription
     private static extern int cmm_x_enum_type_description_get_value (IntPtr handle, int idx);
 
     [DllImport("climaker")]
-    private static extern string cmm_x_enum_type_description_get_name (IntPtr handle, int idx);
+    private static extern IntPtr cmm_x_enum_type_description_get_name (IntPtr handle, int idx);
 }
 
 class UnoXInterfaceTypeDescription : UnoXTypeDescription
@@ -2175,12 +2180,12 @@ class UnoXInterfaceMemberTypeDescription : UnoXTypeDescription
     {
         get
         {
-            return cmm_x_interface_member_type_description_get_member_name (mHandle);
+            return Marshal.PtrToStringAnsi (cmm_x_interface_member_type_description_get_member_name (mHandle));
         }
     }
 
     [DllImport("climaker")]
-    private static extern string cmm_x_interface_member_type_description_get_member_name (IntPtr handle);
+    private static extern IntPtr cmm_x_interface_member_type_description_get_member_name (IntPtr handle);
 }
 
 class UnoXInterfaceAttributeTypeDescription : UnoXInterfaceMemberTypeDescription
@@ -2262,10 +2267,10 @@ class UnoXInterfaceAttributeTypeDescription : UnoXInterfaceMemberTypeDescription
     [DllImport("climaker")]
     private static extern IntPtr cmm_x_interface_attribute_type_description_get_type (IntPtr handle);
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_interface_attribute_type_description_is_bound (IntPtr handle);
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_interface_attribute_type_description_is_read_only (IntPtr handle);
 
     [DllImport("climaker")]
@@ -2389,10 +2394,10 @@ class UnoXInterfaceMethodTypeDescription : UnoXInterfaceMemberTypeDescription
     [DllImport("climaker")]
     private static extern IntPtr cmm_x_interface_method_type_description_get_return_type (IntPtr handle);
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_interface_method_type_description_returns_struct (IntPtr handle);
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_interface_method_type_description_is_oneway (IntPtr handle);
 }
 
@@ -2429,7 +2434,7 @@ class UnoXCompoundTypeDescription : UnoXTypeDescription
         if (idx < 0 || idx >= mMemberNames)
             return null;
 
-        return cmm_x_compound_type_description_get_member_name (mMemberNamesHandle, idx);
+        return Marshal.PtrToStringAnsi (cmm_x_compound_type_description_get_member_name (mMemberNamesHandle, idx));
     }
 
     public int MemberNames
@@ -2475,7 +2480,7 @@ class UnoXCompoundTypeDescription : UnoXTypeDescription
     private static extern int cmm_x_compound_type_description_get_member_names (IntPtr handle, out IntPtr memberNamesHandle);
 
     [DllImport("climaker")]
-    private static extern string cmm_x_compound_type_description_get_member_name (IntPtr handle, int idx);
+    private static extern IntPtr cmm_x_compound_type_description_get_member_name (IntPtr handle, int idx);
 
     [DllImport("climaker")]
     private static extern int cmm_x_compound_type_description_get_member_types (IntPtr handle, out IntPtr memberTypesHandle);
@@ -2517,7 +2522,7 @@ class UnoXStructTypeDescription : UnoXCompoundTypeDescription
         if (idx < 0 || idx >= mTypeParameters)
             return null;
 
-        return cmm_x_struct_type_description_get_type_parameter (mTypeParametersHandle, idx);
+        return Marshal.PtrToStringAnsi (cmm_x_struct_type_description_get_type_parameter (mTypeParametersHandle, idx));
     }
 
     public int TypeParameters
@@ -2560,7 +2565,7 @@ class UnoXStructTypeDescription : UnoXCompoundTypeDescription
     private static extern int cmm_x_struct_type_description_get_type_parameters (IntPtr handle, out IntPtr typeParametersHandle);
 
     [DllImport("climaker")]
-    private static extern string cmm_x_struct_type_description_get_type_parameter (IntPtr typeParametersHandle, int idx);
+    private static extern IntPtr cmm_x_struct_type_description_get_type_parameter (IntPtr typeParametersHandle, int idx);
 
     [DllImport("climaker")]
     private static extern int cmm_x_struct_type_description_get_type_arguments (IntPtr handle, out IntPtr typeArgumentsHandle, out IntPtr typeArgumentsArrayHandle);
@@ -2595,7 +2600,7 @@ class UnoXMethodParameter : UnoObject
     {
         get
         {
-            return cmm_x_method_parameter_name (mHandle);
+            return Marshal.PtrToStringAnsi (cmm_x_method_parameter_name (mHandle));
         }
     }
 
@@ -2615,17 +2620,17 @@ class UnoXMethodParameter : UnoObject
         }
     }
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_method_parameter_is_out (IntPtr handle);
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_method_parameter_is_in (IntPtr handle);
 
     [DllImport("climaker")]
     private static extern int cmm_x_method_parameter_position (IntPtr handle);
 
     [DllImport("climaker")]
-    private static extern string cmm_x_method_parameter_name (IntPtr handle);
+    private static extern IntPtr cmm_x_method_parameter_name (IntPtr handle);
 
     [DllImport("climaker")]
     private static extern IntPtr cmm_x_method_parameter_type (IntPtr handle);
@@ -2645,7 +2650,7 @@ class UnoXParameter : UnoXMethodParameter
         }
     }
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_parameter_is_rest (IntPtr handle);
 }
 
@@ -2724,7 +2729,7 @@ class UnoXServiceTypeDescription : UnoXTypeDescription
     [DllImport("climaker")]
     private static extern IntPtr cmm_x_service_type_description_get_constructor (IntPtr constructorsHandle, int idx);
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_service_type_description_is_single_interface_based (IntPtr handle);
 
     [DllImport("climaker")]
@@ -2756,7 +2761,7 @@ class UnoXSingletonTypeDescription : UnoXTypeDescription
     [DllImport("climaker")]
     private static extern IntPtr cmm_x_singleton_type_description_get_interface (IntPtr handle);
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_singleton_type_description_is_interface_based (IntPtr handle);
 }
 
@@ -2777,7 +2782,7 @@ class UnoXConstantTypeDescription : UnoXTypeDescription
             System.UInt16 tUInt16;
             Int32 tInt32;
             System.UInt32 tUInt32;
-            Int16 tInt64;
+            Int64 tInt64;
             System.UInt64 tUInt64;
             System.Single tFloat;
             double tDouble;
@@ -2824,7 +2829,7 @@ class UnoXConstantTypeDescription : UnoXTypeDescription
                                 out byte tByte,
                                 out Int16 tInt16, out System.UInt16 tUInt16,
                                 out Int32 tInt32, out System.UInt32 tUInt32,
-                                out Int16 tInt64, out System.UInt64 tUInt64,
+                                out Int64 tInt64, out System.UInt64 tUInt64,
                                 out System.Single tFloat, out double tDouble);
 }
 
@@ -2909,7 +2914,7 @@ class UnoXServiceConstructorDescription : UnoObject
     {
         get
         {
-            return cmm_x_service_constructor_description_get_name (mHandle);
+            return Marshal.PtrToStringAnsi (cmm_x_service_constructor_description_get_name (mHandle));
         }
     }
 
@@ -2949,9 +2954,9 @@ class UnoXServiceConstructorDescription : UnoObject
     private static extern IntPtr cmm_x_service_constructor_description_get_parameter (IntPtr parametersHandle, int idx);
 
     [DllImport("climaker")]
-    private static extern string cmm_x_service_constructor_description_get_name (IntPtr handle);
+    private static extern IntPtr cmm_x_service_constructor_description_get_name (IntPtr handle);
 
-    [DllImport("climaker")]
+    [DllImport("climaker")][return:MarshalAs(UnmanagedType.I1)]
     private static extern bool cmm_x_service_constructor_description_is_default_constructor (IntPtr handle);
 
     [DllImport("climaker")]
diff --git a/cli_ure/source/climaker/climaker_mono.cxx b/cli_ure/source/climaker/climaker_mono.cxx
index 950cbf2..5a71947 100644
--- a/cli_ure/source/climaker/climaker_mono.cxx
+++ b/cli_ure/source/climaker/climaker_mono.cxx
@@ -154,7 +154,7 @@ class UnoHelper
     Reference< XInterface > mxTD_provider;
     Reference< reflection::XTypeDescriptionEnumeration > mxTD_enum;
     Reference< reflection::XTypeDescription > mxTD;
-    sal_Int32 mnPos;
+    sal_uInt32 mnPos;
 
     vector< OUString > mMandatoryRegistries;
     vector< OUString > mExtraRegistries;
@@ -1004,7 +1004,7 @@ extern "C" {
                              sal_uInt8 *tByte,
                              sal_Int16 *tInt16, sal_uInt16 *tUInt16,
                              sal_Int32 *tInt32, sal_uInt32 *tUInt32,
-                             sal_Int16 *tInt64, sal_uInt64 *tUInt64,
+                             sal_Int64 *tInt64, sal_uInt64 *tUInt64,
                              float *tFloat, double *tDouble)
     {
         reflection::XConstantTypeDescription* xtd = (reflection::XConstantTypeDescription*) ptr;
-- 
1.7.0.1

