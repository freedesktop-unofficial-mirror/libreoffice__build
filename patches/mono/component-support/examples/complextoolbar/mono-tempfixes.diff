diff --git cli_ure/qa/climaker/makefile.mk cli_ure/qa/climaker/makefile.mk
index cde3f40..b24c701 100644
--- cli_ure/qa/climaker/makefile.mk
+++ cli_ure/qa/climaker/makefile.mk
@@ -38,7 +38,6 @@ PACKAGE = climaker
 CLIMAKER*=$(WRAPCMD) $(BIN)$/climaker
 .INCLUDE: settings.mk
 
-
 #----- compile .java files -----------------------------------------
 
 JARFILES = sandbox.jar ridl.jar unoil.jar jurt.jar juh.jar java_uno.jar OOoRunner.jar
@@ -55,7 +54,7 @@ JARCOMPRESS 	= TRUE
 
 
 
-CSCFLAGS = -incr
+#CSCFLAGS = -incr
 .IF "$(debug)" != ""
 CSCFLAGS += -checked+ -define:DEBUG -define:TRACE -debug+
 .ELSE
diff --git cli_ure/source/mono_bridge/.bridge.cs.swp cli_ure/source/mono_bridge/.bridge.cs.swp
index 994437f..f67f4ae 100644
Binary files cli_ure/source/mono_bridge/.bridge.cs.swp and cli_ure/source/mono_bridge/.bridge.cs.swp differ
diff --git cli_ure/source/mono_bridge/bridge.cs cli_ure/source/mono_bridge/bridge.cs
index bcab902..931b8c8 100644
--- cli_ure/source/mono_bridge/bridge.cs
+++ cli_ure/source/mono_bridge/bridge.cs
@@ -1679,9 +1679,9 @@ public unsafe class Bridge
 
         for (int i = 0; i < nParams; ++i)
         {
-            // FIXME it's a TypeDescriptionReference
-            TypeDescription *type = (TypeDescription *)parameters[i].pTypeRef;
-
+            TypeDescriptionReference *typeref = (TypeDescriptionReference *)parameters[i].pTypeRef;
+            TypeDescription *type = null;
+            TypeDescriptionReference.GetDescription(&type, typeref);
             unoArgPtrs[i] = unoArgs + i;
             if ((type->eTypeClass == TypeClass.STRUCT ||
                  type->eTypeClass == TypeClass.EXCEPTION) &&
@@ -1696,7 +1696,7 @@ public unsafe class Bridge
             if (parameters[i].bIn != 0)
             {
                 // FIXME error handling
-                MapToUno(unoArgPtrs[i], args[i], type, false /* no assign */);
+                MapToUno(unoArgPtrs[i], args[i], (TypeDescription*)typeref, false /* no assign */);
             }
         }
 
@@ -1828,13 +1828,27 @@ public unsafe class Bridge
                 MapToManaged(ref args[i], unoArgs[i], parameters[i].pTypeRef, null, false);
 
         object invocationResult = null;
+        Exception exc = null;
         try
         {
             invocationResult = method.Invoke(managedI, args);
         }
         catch (TargetInvocationException e)
         {
-            Exception exc = e.InnerException;
+            exc = e.InnerException;
+        }
+        catch (Exception e)
+        {
+            exc = e;
+        }
+        if ( exc != null )
+        {
+            if ( !( exc is unoidl.com.sun.star.uno.Exception ) )
+            {
+                // #FIXME put more info in here trace, stack etc. ( when I
+                // figure out how to do that in mono )
+                exc = new unoidl.com.sun.star.uno.RuntimeException( exc.ToString(), null );
+            }
             TypeDescription* td = null;
             // FIXME leak
             TypeDescriptionReference.GetDescription(&td, MapManagedType(exc.GetType()));
@@ -1844,11 +1858,6 @@ public unsafe class Bridge
             (*unoExc)->pData = memExc;
             return;
         }
-        catch (Exception e)
-        {
-            // FIXME
-        }
-
         // convert out, in/out params
         for (int i = 0; i < nParams; ++i)
         {
diff --git cli_ure/source/mono_bridge/mono_proxy.cxx cli_ure/source/mono_bridge/mono_proxy.cxx
index 0a5f130..f4d138f 100644
--- cli_ure/source/mono_bridge/mono_proxy.cxx
+++ cli_ure/source/mono_bridge/mono_proxy.cxx
@@ -196,6 +196,6 @@ inline void MonoProxy::dispatch( typelib_TypeDescription const * member_td,
 							  obj, pMonoParams, NULL,
 							  mono_object_get_domain( obj ) );
 }
-
+    
 }
 
