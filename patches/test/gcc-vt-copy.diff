diff -u -r /usr/src/packages/BUILD/gcc-4.1.0/gcc/collect2.c gcc/collect2.c
--- /usr/src/packages/BUILD/gcc-4.1.0/gcc/collect2.c	2005-10-28 15:17:39.000000000 +0100
+++ gcc/collect2.c	2007-02-17 13:12:07.000000000 +0000
@@ -175,7 +175,7 @@
 static int aixrtl_flag;			/* true if -brtl */
 #endif
 
-int debug;				/* true if -debug */
+int debug = 1;				/* true if -debug */
 
 static int shared_obj;		        /* true if -shared */
 
Only in gcc: collect2.c~
diff -u -r /usr/src/packages/BUILD/gcc-4.1.0/gcc/cp/class.c gcc/cp/class.c
--- /usr/src/packages/BUILD/gcc-4.1.0/gcc/cp/class.c	2006-02-18 12:05:01.000000000 +0000
+++ gcc/cp/class.c	2007-02-19 10:21:52.000000000 +0000
@@ -114,6 +114,8 @@
    declaration order.  */
 VEC(tree,gc) *local_classes;
 
+static void dump_slot_relocs (tree t, tree slot_relocs);
+
 static tree get_vfield_name (tree);
 static void finish_struct_anon (tree);
 static tree get_vtable_name (tree);
@@ -138,7 +140,7 @@
 						    bool, tree);
 static tree build_simple_base_path (tree expr, tree binfo);
 static tree build_vtbl_ref_1 (tree, tree);
-static tree build_vtbl_initializer (tree, tree, tree, tree, int *);
+static tree build_vtbl_initializer (tree, tree, tree, tree, int *, tree *);
 static int count_fields (tree);
 static int add_fields_to_record_type (tree, struct sorted_fields_type*, int);
 static void check_bitfield_decl (tree);
@@ -181,9 +183,9 @@
 					   tree, tree, splay_tree);
 static tree end_of_class (tree, int);
 static bool layout_empty_base (tree, tree, splay_tree);
-static void accumulate_vtbl_inits (tree, tree, tree, tree, tree);
+static void accumulate_vtbl_inits (tree, tree, tree, tree, tree, tree *);
 static tree dfs_accumulate_vtbl_inits (tree, tree, tree, tree,
-					       tree);
+					       tree, tree *);
 static void build_rtti_vtbl_entries (tree, vtbl_init_data *);
 static void build_vcall_and_vbase_vtbl_entries (tree, vtbl_init_data *);
 static void clone_constructors_and_destructors (tree);
@@ -6649,6 +6651,16 @@
   dump_thunk (stderr, 0, fn);
 }
 
+tree vtable_copy_slots;
+
+static void
+append_slot_relocs (tree t, tree slot_relocs)
+{
+/*  dump_slot_relocs (t, slot_relocs); */
+  vtable_copy_slots = tree_cons (t, slot_relocs,
+                                 vtable_copy_slots);
+}
+
 /* Virtual function table initialization.  */
 
 /* Create all the necessary vtables for T and its base classes.  */
@@ -6659,23 +6671,26 @@
   tree list;
   tree vbase;
 
+  tree slot_relocs = NULL_TREE;
   /* We lay out the primary and secondary vtables in one contiguous
      vtable.  The primary vtable is first, followed by the non-virtual
      secondary vtables in inheritance graph order.  */
   list = build_tree_list (BINFO_VTABLE (TYPE_BINFO (t)), NULL_TREE);
   accumulate_vtbl_inits (TYPE_BINFO (t), TYPE_BINFO (t),
-			 TYPE_BINFO (t), t, list);
+			 TYPE_BINFO (t), t, list, &slot_relocs);
 
   /* Then come the virtual bases, also in inheritance graph order.  */
   for (vbase = TYPE_BINFO (t); vbase; vbase = TREE_CHAIN (vbase))
     {
       if (!BINFO_VIRTUAL_P (vbase))
 	continue;
-      accumulate_vtbl_inits (vbase, vbase, TYPE_BINFO (t), t, list);
+      accumulate_vtbl_inits (vbase, vbase, TYPE_BINFO (t), t, list, &slot_relocs);
     }
 
   if (BINFO_VTABLE (TYPE_BINFO (t)))
     initialize_vtable (TYPE_BINFO (t), TREE_VALUE (list));
+  
+  append_slot_relocs (t, slot_relocs);
 }
 
 /* Initialize the vtable for BINFO with the INITS.  */
@@ -6957,6 +6972,7 @@
   tree inits;
   tree id;
   tree vbase;
+  tree slot_relocs;
 
   /* See if we've already created this construction vtable group.  */
   id = mangle_ctor_vtbl_for_type (t, binfo);
@@ -6970,8 +6986,9 @@
   vtbl = build_vtable (t, id, ptr_type_node);
   DECL_CONSTRUCTION_VTABLE_P (vtbl) = 1;
   list = build_tree_list (vtbl, NULL_TREE);
+  slot_relocs = NULL_TREE;
   accumulate_vtbl_inits (binfo, TYPE_BINFO (TREE_TYPE (binfo)),
-			 binfo, t, list);
+			 binfo, t, list, &slot_relocs);
 
   /* Add the vtables for each of our virtual bases using the vbase in T
      binfo.  */
@@ -6985,7 +7002,7 @@
 	continue;
       b = copied_binfo (vbase, binfo);
 
-      accumulate_vtbl_inits (b, vbase, binfo, t, list);
+      accumulate_vtbl_inits (b, vbase, binfo, t, list, &slot_relocs);
     }
   inits = TREE_VALUE (list);
 
@@ -6998,6 +7015,8 @@
   CLASSTYPE_VTABLES (t) = chainon (CLASSTYPE_VTABLES (t), vtbl);
   initialize_artificial_var (vtbl, inits);
   dump_vtable (t, binfo, vtbl);
+
+  append_slot_relocs (t, slot_relocs);
 }
 
 /* Add the vtbl initializers for BINFO (and its bases other than
@@ -7015,7 +7034,8 @@
 		       tree orig_binfo,
 		       tree rtti_binfo,
 		       tree t,
-		       tree inits)
+		       tree inits,
+                       tree *slot_relocs)
 {
   int i;
   tree base_binfo;
@@ -7038,7 +7058,7 @@
   TREE_VALUE (inits)
     = chainon (TREE_VALUE (inits),
 	       dfs_accumulate_vtbl_inits (binfo, orig_binfo,
-					  rtti_binfo, t, inits));
+					  rtti_binfo, t, inits, slot_relocs));
 
   /* Walk the BINFO and its bases.  We walk in preorder so that as we
      initialize each vtable we can figure out at what offset the
@@ -7053,7 +7073,7 @@
       accumulate_vtbl_inits (base_binfo,
 			     BINFO_BASE_BINFO (orig_binfo, i),
 			     rtti_binfo, t,
-			     inits);
+			     inits, slot_relocs);
     }
 }
 
@@ -7065,7 +7085,8 @@
 			   tree orig_binfo,
 			   tree rtti_binfo,
 			   tree t,
-			   tree l)
+			   tree l,
+                           tree *slot_relocs)
 {
   tree inits = NULL_TREE;
   tree vtbl = NULL_TREE;
@@ -7132,7 +7153,7 @@
 
       /* Compute the initializer for this vtable.  */
       inits = build_vtbl_initializer (binfo, orig_binfo, t, rtti_binfo,
-				      &non_fn_entries);
+				      &non_fn_entries, slot_relocs);
 
       /* Figure out the position to which the VPTR should point.  */
       vtbl = TREE_PURPOSE (l);
@@ -7160,6 +7181,37 @@
   return inits;
 }
 
+static void
+dump_slot_relocs (tree t, tree slot_relocs)
+{
+  tree st;
+  fprintf (stderr, "Copy data for '%s'\n",
+           type_as_string (t, TFF_PLAIN_IDENTIFIER));
+
+  for (st = slot_relocs; st; st = TREE_CHAIN(st)) 
+    {
+        tree orig_binfo = TREE_PURPOSE(st);
+        tree init_list = TREE_VALUE(st);
+        tree v;
+        fprintf (stderr, "\tfrom %s (%d) entries\n",
+                 type_as_string (orig_binfo, TFF_PLAIN_IDENTIFIER),
+                 list_length (init_list));
+        for (v = init_list; v; v = TREE_CHAIN(v)) 
+          {
+            if (!TREE_VALUE(v))
+                fprintf (stderr, "\t\tNULL\n");
+            else
+              {
+                tree fn = TREE_VALUE(v);
+                fprintf (stderr, "\t\t%s ",
+                         expr_as_string (fn, TFF_PLAIN_IDENTIFIER));
+                fprintf (stderr, "[ %s ]\n",
+                         expr_as_string (DECL_VINDEX (fn), TFF_PLAIN_IDENTIFIER));
+              }
+          }
+    }
+}
+
 static GTY(()) tree abort_fndecl_addr;
 
 /* Construct the initializer for BINFO's virtual function table.  BINFO
@@ -7190,7 +7242,8 @@
 			tree orig_binfo,
 			tree t,
 			tree rtti_binfo,
-			int* non_fn_entries_p)
+			int* non_fn_entries_p,
+                        tree *slot_relocs)
 {
   tree v, b;
   tree vfun_inits;
@@ -7198,6 +7251,7 @@
   unsigned ix;
   tree vbinfo;
   VEC(tree,gc) *vbases;
+  tree slot_reloc_data;
 
   /* Initialize VID.  */
   memset (&vid, 0, sizeof (vid));
@@ -7252,12 +7306,27 @@
   /* Go through all the ordinary virtual functions, building up
      initializers.  */
   vfun_inits = NULL_TREE;
+  slot_reloc_data = NULL_TREE;
+
+/*  fprintf (stderr, "Init vtable: ");
+  fprintf (stderr, " (%s)",
+           type_as_string (t, TFF_PLAIN_IDENTIFIER));
+  fprintf (stderr, " (%s)",
+           type_as_string (binfo, TFF_PLAIN_IDENTIFIER));
+  fprintf (stderr, " (%s) -",
+           type_as_string (orig_binfo, TFF_PLAIN_IDENTIFIER));
+  if (get_primary_binfo (binfo))
+      fprintf (stderr, " (%s)",
+               type_as_string (get_primary_binfo (binfo), TFF_PLAIN_IDENTIFIER));
+               fprintf (stderr, "\n"); */
   for (v = BINFO_VIRTUALS (orig_binfo); v; v = TREE_CHAIN (v))
     {
       tree delta;
       tree vcall_index;
       tree fn, fn_original;
       tree init = NULL_TREE;
+      tree slot_fn = NULL_TREE;
+      tree first_overrider = NULL_TREE;
 
       fn = BV_FN (v);
       fn_original = fn;
@@ -7287,7 +7356,10 @@
 	{
 	  /* We found a defn before a lost primary; go ahead as normal.  */
 	  if (look_for_overrides_here (BINFO_TYPE (b), fn_original))
-	    break;
+           {
+             first_overrider = TYPE_BINFO (BINFO_TYPE (b));
+             break;
+           }
 
 	  /* The nearest definition is from a lost primary; clear the
 	     slot.  */
@@ -7305,6 +7377,9 @@
 	  delta = BV_DELTA (v);
 	  vcall_index = BV_VCALL_INDEX (v);
 
+/*          fprintf (stderr, "\tVfn: %s\n",
+            expr_as_string (fn, TFF_PLAIN_IDENTIFIER)); */
+
 	  gcc_assert (TREE_CODE (delta) == INTEGER_CST);
 	  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL);
 
@@ -7325,9 +7400,20 @@
 		  if (!DECL_NAME (fn))
 		    finish_thunk (fn);
 		}
-	      /* Take the address of the function, considering it to be of an
-		 appropriate generic type.  */
-	      init = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);
+             else if (slot_relocs &&
+                      first_overrider && BINFO_TYPE (first_overrider) != t)
+               {
+                 /* accumulate information about overriding */
+                 gcc_assert (BINFO_VTABLE (first_overrider));
+                 slot_fn = fn;
+               }
+
+              if (!init)
+                {
+	          /* Take the address of the function, considering it to be of an
+		     appropriate generic type.  */
+	          init = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);
+                }
 	    }
 	}
 
@@ -7352,8 +7438,26 @@
 	}
       else
 	vfun_inits = tree_cons (NULL_TREE, init, vfun_inits);
+
+      /* Accumulate overriding information for subequent construction
+         of copy-vtable initialisers */
+      if (slot_relocs)
+      {
+        slot_reloc_data = tree_cons (NULL_TREE, slot_fn, slot_reloc_data);
+      }
     }
 
+  /* Write details about vtable inheritance, if we have any parent entries */
+  if (slot_relocs)
+  {
+      tree copy_parent = orig_binfo;
+      if (orig_binfo == TYPE_BINFO (t))
+          copy_parent = get_primary_binfo (orig_binfo);
+
+      slot_reloc_data = nreverse (slot_reloc_data);
+      *slot_relocs = tree_cons (copy_parent, slot_reloc_data, *slot_relocs);
+  }
+
   /* The initializers for virtual functions were built up in reverse
      order; straighten them out now.  */
   vfun_inits = nreverse (vfun_inits);
Only in gcc/cp: class.c~
diff -u -r /usr/src/packages/BUILD/gcc-4.1.0/gcc/cp/cp-tree.h gcc/cp/cp-tree.h
--- /usr/src/packages/BUILD/gcc-4.1.0/gcc/cp/cp-tree.h	2006-02-18 12:05:01.000000000 +0000
+++ gcc/cp/cp-tree.h	2007-02-19 10:31:14.000000000 +0000
@@ -495,6 +495,7 @@
     CPTI_UNKNOWN_TYPE,
     CPTI_VTBL_TYPE,
     CPTI_VTBL_PTR_TYPE,
+    CPTI_VTBL_SLOT_COPY_TYPE,
     CPTI_STD,
     CPTI_ABI,
     CPTI_CONST_TYPE_INFO_TYPE,
@@ -559,6 +560,7 @@
 #define unknown_type_node		cp_global_trees[CPTI_UNKNOWN_TYPE]
 #define vtbl_type_node			cp_global_trees[CPTI_VTBL_TYPE]
 #define vtbl_ptr_type_node		cp_global_trees[CPTI_VTBL_PTR_TYPE]
+#define vtbl_slot_copy_type_node        cp_global_trees[CPTI_VTBL_SLOT_COPY_TYPE]
 #define std_node			cp_global_trees[CPTI_STD]
 #define abi_node			cp_global_trees[CPTI_ABI]
 #define const_type_info_type_node	cp_global_trees[CPTI_CONST_TYPE_INFO_TYPE]
@@ -3298,6 +3300,14 @@
    TREE_PURPOSE slot.  */
 extern GTY(()) tree static_aggregates;
 
+/* foo */
+extern GTY(()) tree vtable_copy_slots;
+
+/* A list of inherited vtable slots which are copies of other slots
+   The source address is stored in the TREE_VALUE slot and the
+   destination is stored in the TREE_PURPOSE slot. */
+/* extern GTY(()) tree vtable_slot_copies; */
+
 /* Functions called along with real static constructors and destructors.  */
 
 extern GTY(()) tree static_ctors;
Only in gcc/cp: cp-tree.h~
diff -u -r /usr/src/packages/BUILD/gcc-4.1.0/gcc/cp/decl2.c gcc/cp/decl2.c
--- /usr/src/packages/BUILD/gcc-4.1.0/gcc/cp/decl2.c	2006-02-18 12:05:01.000000000 +0000
+++ gcc/cp/decl2.c	2007-02-19 16:27:30.000000000 +0000
@@ -2666,6 +2666,159 @@
     finish_objects (function_key, priority, body);
 }
 
+static tree
+build_addr_offset (tree binfo, int offset)
+{
+#if 0
+  tree index, addr;
+
+  /* FIXME: binfo ? */
+  addr = build1 (ADDR_EXPR, ptr_type_node, binfo);
+/*  index = size_binop (MULT_EXPR,
+                      size_in_bytes (ptr_type_node),
+                      build_int_cst (NULL_TREE, offset)); */
+  index = build_int_cst (NULL_TREE, offset);
+  addr = build2 (PLUS_EXPR, TREE_TYPE (addr), addr, index);
+
+  return addr;
+#endif
+  return null_pointer_node;
+}
+
+/* Ideal .rodata output format: */
+/* dest_symbol, |dest_offset|src_bitmap_blocks, src_symbol, <bitmap> */
+/* Pragmatic 1st cut output format: */
+/* dest_addr, src_addr, <bitmap> */
+static tree
+build_vtable_copy_slot (tree dest_binfo, int dest_offset,
+                        tree src_binfo,  int src_offset,
+                        int bitmap, tree chain)
+{
+    tree elem, init;
+
+    if (!bitmap)
+        return chain;
+
+    fprintf (stderr, "Copy %s + %d => ",
+             type_as_string (src_binfo, TFF_PLAIN_IDENTIFIER),
+             src_offset);
+    fprintf (stderr, " %s + %d mask 0x%x\n",
+             type_as_string (dest_binfo, TFF_PLAIN_IDENTIFIER),
+             dest_offset, bitmap);
+
+    elem = tree_cons (NULL_TREE, build_addr_offset (src_binfo, src_offset), NULL_TREE);
+    elem = tree_cons (NULL_TREE, build_addr_offset (dest_binfo, dest_offset), elem);
+    elem = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, bitmap), elem);
+    init = build_constructor_from_list (vtbl_slot_copy_type_node, elem);
+
+    return tree_cons (NULL_TREE, init, chain);
+}
+
+static void
+generate_vtable_copy_slots (void)
+{
+  tree k, decl;
+  tree inits = NULL_TREE;
+  int dest_offset = 0;
+
+  fprintf (stderr, "Generate_vtable_copy_slots\n");
+    
+  for (k = vtable_copy_slots; k; k = TREE_CHAIN(k))
+    {
+      tree st;
+      tree t = TREE_PURPOSE(k);
+      tree slot_relocs = TREE_VALUE(k);
+      fprintf (stderr, "Copy data for '%s'\n",
+               type_as_string (t, TFF_PLAIN_IDENTIFIER));
+      for (st = slot_relocs; st; st = TREE_CHAIN(st)) 
+        {
+          tree orig_binfo = TREE_PURPOSE(st);
+          tree init_list = TREE_VALUE(st);
+          tree v;
+          int bitmap = 0;
+          unsigned int i = 0;
+          unsigned int offset = 0;
+          fprintf (stderr, "\tfrom %s (%d) entries\n",
+                   type_as_string (orig_binfo, TFF_PLAIN_IDENTIFIER),
+                   list_length (init_list));
+          for (v = init_list; v; v = TREE_CHAIN(v)) 
+            {
+              if (!TREE_VALUE(v))
+                fprintf (stderr, "\t\tNULL\n");
+              else
+                {
+                  tree fn = TREE_VALUE(v);
+                  fprintf (stderr, "\t\t%s ",
+                           expr_as_string (fn, TFF_PLAIN_IDENTIFIER));
+                  fprintf (stderr, "[ %s ]\n",
+                           expr_as_string (DECL_VINDEX (fn), TFF_PLAIN_IDENTIFIER));
+                  bitmap |= 1 << i;
+                }
+              i++;
+              if (i == 32) {
+                  inits = build_vtable_copy_slot (t, dest_offset - i, orig_binfo,
+                                                  offset, bitmap, inits);
+                  bitmap = 0;
+                  i = 0;
+                  offset += 32;
+              }
+              dest_offset++;
+            }
+          inits = build_vtable_copy_slot (t, dest_offset - i, orig_binfo,
+                                          offset, bitmap, inits);
+        }
+    }
+
+  if (inits)
+    {
+      tree atype;
+      tree ctor;
+      int n = list_length (inits);
+      fprintf (stderr, "Emit __vtbl_copy_global %d items\n", n);
+      
+      atype = build_cplus_array_type (vtbl_slot_copy_type_node,
+                                      build_index_type (size_int (n)));
+      layout_type (atype);
+
+      decl = build_lang_decl (VAR_DECL, get_identifier ("__vtbl_copy_global"), atype);
+
+      {
+          /* vtable names are already mangled; give them their DECL_ASSEMBLER_NAME
+             now to avoid confusion in mangle_decl.  */
+          SET_DECL_ASSEMBLER_NAME (decl, get_identifier ("__vtbl_copy_global"));
+/*          DECL_CONTEXT (decl) = class_type; */
+          DECL_ARTIFICIAL (decl) = 1;
+          TREE_STATIC (decl) = 1;
+          TREE_READONLY (decl) = 1;
+/*          DECL_VIRTUAL_P (decl) = 1; */
+          DECL_EXTERNAL (decl) = 1;
+          DECL_NOT_REALLY_EXTERN (decl) = 1;
+
+          DECL_IGNORED_P (decl) = 1;
+#if 0          
+          /* Mark the VAR_DECL node representing the vtable itself as a
+             "gratuitous" one, thereby forcing dwarfout.c to ignore it. */
+#endif
+      }
+
+      ctor = build_constructor_from_list (atype, inits);
+      fprintf (stderr, "Constructor elts %d on decl %p ctor %p\n",
+               VEC_length(constructor_elt, CONSTRUCTOR_ELTS(ctor)),
+               decl, ctor);
+      initialize_artificial_var (decl, ctor);
+
+      TREE_PUBLIC (decl) = 1;
+      DECL_EXTERNAL (decl) = 1;
+      DECL_INTERFACE_KNOWN (decl) = 1;
+      import_export_decl (decl);
+      mark_used (decl);
+
+      DECL_EXTERNAL (decl) = 0;
+      rest_of_decl_compilation (decl, 1, 1);
+    }
+}
+
+
 /* Generate constructor and destructor functions for the priority
    indicated by N.  */
 
@@ -3068,6 +3221,9 @@
 	}
     }
 
+  /* Generate C++ vtable copy data */
+  generate_vtable_copy_slots ();
+
   /* We give C linkage to static constructors and destructors.  */
   push_lang_context (lang_name_c);
 
Only in gcc/cp: decl2.c~
diff -u -r /usr/src/packages/BUILD/gcc-4.1.0/gcc/cp/decl.c gcc/cp/decl.c
--- /usr/src/packages/BUILD/gcc-4.1.0/gcc/cp/decl.c	2007-02-06 10:02:59.000000000 +0000
+++ gcc/cp/decl.c	2007-02-19 16:26:43.000000000 +0000
@@ -136,6 +136,10 @@
 	tree vtbl_type_node;
 	tree vtbl_ptr_type_node;
 
+   Array slot copy type info:
+
+	tree vtbl_slot_copy_type_node;
+
    Namespaces,
 
 	tree std_node;
@@ -2940,6 +2944,13 @@
     }
 }
 
+static tree
+append_struct_field (const char *name, tree type, tree chain)
+{
+  return chainon (chain, build_decl (FIELD_DECL,
+                                     get_identifier (name), type));
+}
+
 /* Create the predefined scalar types of C,
    and some nodes representing standard constants (0, 1, (void *)0).
    Initialize the global binding level.
@@ -3068,6 +3079,19 @@
   layout_type (vtbl_ptr_type_node);
   record_builtin_type (RID_MAX, NULL, vtbl_ptr_type_node);
 
+  {
+    tree elem_fields = NULL;
+
+    vtbl_slot_copy_type_node = make_aggr_type (RECORD_TYPE);
+    elem_fields = append_struct_field ("vt_src_addr", ptr_type_node, elem_fields);
+    elem_fields = append_struct_field ("vt_dest_addr", ptr_type_node, elem_fields);
+    elem_fields = append_struct_field ("vt_copy_bitmask", size_type_node, elem_fields);
+    finish_builtin_struct (vtbl_slot_copy_type_node, "__vt_copy_slot_relocs",
+                           elem_fields, NULL_TREE);
+    layout_type (vtbl_slot_copy_type_node);
+    record_builtin_type (RID_MAX, NULL, vtbl_slot_copy_type_node);
+  }
+
   push_namespace (get_identifier ("__cxxabiv1"));
   abi_node = current_namespace;
   pop_namespace ();
Only in gcc/cp: decl.c~
Only in gcc/cp: TAGS
Only in gcc/cp: TAGS.sub
Only in gcc: include
Only in gcc/java: TAGS
Only in gcc/java: TAGS.sub
Only in gcc/objc: TAGS
Only in gcc/objc: TAGS.sub
Only in gcc: TAGS
Only in gcc: TAGS.sub
