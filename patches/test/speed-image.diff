Index: vcl/inc/image.h
===================================================================
RCS file: /cvs/gsl/vcl/inc/image.h,v
retrieving revision 1.8
diff -u -p -u -r1.8 image.h
--- vcl/inc/image.h	9 Sep 2005 11:01:36 -0000	1.8
+++ vcl/inc/image.h	19 Jun 2006 20:02:53 -0000
@@ -71,7 +71,7 @@ public:
 private:
 
 	BitmapEx	maBmpEx;
-	Bitmap		maDisabledBmp;
+	BitmapEx	maDisabledBmpEx;
 	BitmapEx*	mpDisplayBmp;
 	Size		maSize;
 	BYTE*		mpInfoAry;
@@ -94,13 +94,18 @@ enum ImageType { IMAGETYPE_BITMAP, IMAGE
 struct ImageAryData
 {
 	::rtl::OUString	maName;
-	USHORT			mnId;					
+	// Images identified by either name, or by id
+	USHORT			mnId;				
 	USHORT			mnRefCount;
+	BitmapEx        maBitmapEx;
 	
 					ImageAryData();
 					ImageAryData( const ImageAryData& rData );
 					~ImageAryData();
 					
+	bool IsLoadable() { return maBitmapEx.IsEmpty() && maName.getLength(); }
+	void Load(const rtl::OUString &rPrefix);
+	
 	ImageAryData&	operator=( const ImageAryData& rData );
 };
 
@@ -108,17 +113,13 @@ struct ImageAryData
 
 struct ImplImageList
 {
-	ULONG			mnRefCount; 			
-	ULONG			mnIRefCount;			
-	USHORT			mnCount;				
-	USHORT			mnRealCount;			
-	USHORT			mnArySize;				
-	ImageAryData*	mpAry;					
-	Size			maImageSize;			
-	ImplImageBmp*	mpImageBitmap;			
+	ULONG			          mnRefCount;
+	std::vector<ImageAryData> maImages;
+	rtl::OUString             maPrefix;
+	Size			          maImageSize;			
 
-					ImplImageList();
-					~ImplImageList();
+	ImplImageList();
+	~ImplImageList();
 };
 
 // --------------------
Index: vcl/inc/image.hxx
===================================================================
RCS file: /cvs/gsl/vcl/inc/image.hxx,v
retrieving revision 1.13
diff -u -p -u -r1.13 image.hxx
--- vcl/inc/image.hxx	5 Jan 2006 18:06:22 -0000	1.13
+++ vcl/inc/image.hxx	19 Jun 2006 20:02:53 -0000
@@ -137,39 +137,23 @@ public:
 							   const ::rtl::OUString& rPrefix,
 							   const Color* pMaskColor = NULL );
 					ImageList( const ImageList& rImageList );
-					ImageList( const BitmapEx& rBitmapEx,
-							   USHORT nInitSize, 
-							   USHORT* pIdAry = NULL,
-							   USHORT nGrow = 4 );
-					ImageList( const BitmapEx& rBitmapEx,
-							   const ::std::vector< ::rtl::OUString >& rNameVector,
-							   USHORT nGrow = 4 );
-					
-					ImageList( const Bitmap& rBitmap,
-							   USHORT nInitSize, USHORT* pIdAry = NULL,
-							   USHORT nGrow = 4 );
-					ImageList( const Bitmap& rBitmap, const Bitmap& rMaskBmp,
-							   USHORT nInitSize, USHORT* pIdAry = NULL,
-							   USHORT nGrow = 4 );
-					ImageList( const Bitmap& rBitmap, const Color& rColor,
-							   USHORT nInitSize, USHORT* pIdAry = NULL,
-							   USHORT nGrow = 4 );
 					~ImageList();
 
 	void			Clear();
-
+	void            InsertFromHorizontalStrip( const BitmapEx &rBitmapEx,
+											   const std::vector< rtl::OUString > &rNameVector );
+	void            InsertFromHorizontalBitmap( const ResId& rResId,
+												const Color *pNonAlphaMaskColor,
+												const Color *pSearchColors = NULL,
+												const Color *pReplaceColors = NULL,
+												ULONG        nColorCount = 0);
+	BitmapEx		GetAsHorizontalStrip() const;
 	USHORT			GetImageCount() const;
 	Size			GetImageSize() const;
-	BitmapEx		GetBitmapEx() const;
-    ImageList       GetColorTransformedImageList( ImageColorTransform eColorTransform ) const;
-   	void            Invert();
 					
 	void			AddImage( USHORT nNewId, const Image& rImage );
 	void			AddImage( const ::rtl::OUString& rImageName, const Image& rImage );
-	
-	void			CopyImage( USHORT nNewId, USHORT nCopyId );
-	void			CopyImage( const ::rtl::OUString& rImageName, const ::rtl::OUString& rCopyName );
-	
+		
 	void			ReplaceImage( USHORT nId, const Image& rImage );
 	void			ReplaceImage( const ::rtl::OUString& rImageName, const Image& rImage );
 	
@@ -183,6 +167,7 @@ public:
 	Image			GetImage( const ::rtl::OUString& rImageName ) const;
 	
 	USHORT			GetImagePos( USHORT nId ) const;
+	bool			HasImageAtPos( USHORT nId ) const;
 	USHORT			GetImagePos( const ::rtl::OUString& rImageName ) const;
 	
 	USHORT			GetImageId( USHORT nPos ) const;
@@ -195,9 +180,6 @@ public:
 	BOOL			operator==( const ImageList& rImageList ) const;
 	BOOL			operator!=( const ImageList& rImageList ) const { return !(ImageList::operator==( rImageList )); }
 
-	friend VCL_DLLPUBLIC SvStream& operator>>( SvStream& rIStream, ImageList& rImageList );
-	friend VCL_DLLPUBLIC SvStream& operator<<( SvStream& rOStream, const ImageList& rImageList );
-
 private:
 
 	ImplImageList*	mpImplData;
@@ -209,7 +191,7 @@ private:
                                              const ::rtl::OUString& rSymbolsStyle,
                                              BitmapEx& rBmpEx,
                                              const Color* pMaskColor ) const;
-	SAL_DLLPRIVATE void    ImplInit( const BitmapEx& rBitmapEx, USHORT nInit, const USHORT* pIdAry, const ::std::vector< ::rtl::OUString >* pNames, USHORT nGrow );
+	SAL_DLLPRIVATE void    ImplInit( USHORT nItems, const Size &rSize );
 	SAL_DLLPRIVATE USHORT  ImplGetImageId( const ::rtl::OUString& rImageName ) const;
 	SAL_DLLPRIVATE void    ImplMakeUnique();
 };
Index: vcl/source/gdi/impimage.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/gdi/impimage.cxx,v
retrieving revision 1.18
diff -u -p -u -r1.18 impimage.cxx
--- vcl/source/gdi/impimage.cxx	9 Sep 2005 12:01:31 -0000	1.18
+++ vcl/source/gdi/impimage.cxx	19 Jun 2006 20:02:53 -0000
@@ -113,34 +113,6 @@ ImplImageList::ImplImageList()
 
 ImplImageList::~ImplImageList()
 {
-	delete mpImageBitmap;
-	delete[] mpAry;
-}
-
-// --------------------
-// - ImplImageRefData -
-// --------------------
-
-ImplImageRefData::~ImplImageRefData()
-{
-	--mpImplData->mnIRefCount;
-	
-	if( mpImplData->mnRefCount || mpImplData->mnIRefCount )
-	{
-		--mpImplData->mpAry[mnIndex].mnRefCount;
-		
-		if( !mpImplData->mpAry[mnIndex].mnRefCount )
-			--mpImplData->mnRealCount;
-	}
-	else
-		delete mpImplData;
-}
-
-// -----------------------------------------------------------------------
-
-BOOL ImplImageRefData::IsEqual( const ImplImageRefData& rData )
-{
-	return( ( mpImplData == rData.mpImplData ) && ( mnIndex == rData.mnIndex ) );
 }
 
 // -----------------
@@ -190,10 +162,6 @@ ImplImage::~ImplImage()
 		case IMAGETYPE_IMAGE:
 			delete static_cast< ImplImageData* >( mpData );
 		break;
-
-		case IMAGETYPE_IMAGEREF:
-			delete static_cast< ImplImageRefData* >( mpData );
-		break;
 	}
 }
 
@@ -225,7 +193,7 @@ void ImplImageBmp::Create( long nItemWid
 	const Size aTotalSize( nInitSize * nItemWidth, nItemHeight );
 
 	maBmpEx = Bitmap( aTotalSize, 24 );
-	maDisabledBmp.SetEmpty();
+	maDisabledBmpEx.SetEmpty();
 
 	delete mpDisplayBmp;
 	mpDisplayBmp = NULL; 
@@ -243,7 +211,7 @@ void ImplImageBmp::Create( long nItemWid
 void ImplImageBmp::Create( const BitmapEx& rBmpEx, long nItemWidth, long nItemHeight, USHORT nInitSize )
 {
 	maBmpEx = rBmpEx;
-	maDisabledBmp.SetEmpty();
+	maDisabledBmpEx.SetEmpty();
 	
 	delete mpDisplayBmp;
 	mpDisplayBmp = NULL; 
@@ -268,8 +236,8 @@ void ImplImageBmp::Expand( USHORT nGrowS
 
 	maBmpEx.Expand( nDX, 0UL );
 
-	if( !maDisabledBmp.IsEmpty() )
-		maDisabledBmp.Expand( nDX, 0UL );
+	if( !maDisabledBmpEx.IsEmpty() )
+		maDisabledBmpEx.Expand( nDX, 0UL );
 
 	delete mpDisplayBmp;
 	mpDisplayBmp = NULL; 
@@ -300,8 +268,8 @@ void ImplImageBmp::Replace( USHORT nPos,
 
 	maBmpEx.CopyPixel( aDstRect, aSrcRect );
 
-	if( !maDisabledBmp.IsEmpty() )
-		maDisabledBmp.CopyPixel( aDstRect, aSrcRect );
+	if( !maDisabledBmpEx.IsEmpty() )
+		maDisabledBmpEx.CopyPixel( aDstRect, aSrcRect );
 
 	delete mpDisplayBmp;
 	mpDisplayBmp = NULL; 
@@ -412,8 +380,15 @@ void ImplImageBmp::Draw( USHORT nPos, Ou
 
 			ImplUpdateDisabledBmp( -1 );
 
-			pOutDev->DrawMask( aOutPos1, aOutSize, aSrcPos, maSize, maDisabledBmp, rSettings.GetLightColor() );
-			pOutDev->DrawMask( rPos, aOutSize, aSrcPos, maSize, maDisabledBmp, rSettings.GetShadowColor() );
+			if( maDisabledBmpEx.IsAlpha() )
+				pOutDev->DrawBitmapEx( rPos, aOutSize, aSrcPos, maSize, maDisabledBmpEx );
+			else
+			{
+				pOutDev->DrawMask( aOutPos1, aOutSize, aSrcPos, maSize, maDisabledBmpEx.GetBitmap(),
+								   rSettings.GetLightColor() );
+				pOutDev->DrawMask( rPos, aOutSize, aSrcPos, maSize, maDisabledBmpEx.GetBitmap(),
+								   rSettings.GetShadowColor() );
+			}
 		}
 		else
 		{
@@ -592,158 +567,112 @@ void ImplImageBmp::ImplUpdateDisplayBmp(
 
 void ImplImageBmp::ImplUpdateDisabledBmp( int nPos )
 {
-	if( ( nPos >= 0 && !maDisabledBmp.IsEmpty() ) || 
-		( nPos < 0 && maDisabledBmp.IsEmpty() ) )
-	{
-		Bitmap aBmp( maBmpEx.GetBitmap() );
-		Bitmap aMask;
+	if( ! ( nPos >= 0 && !maDisabledBmpEx.IsEmpty() ) &&
+	    ! ( nPos < 0 && maDisabledBmpEx.IsEmpty() ) )
+		return;
+
+	Bitmap aBitmap;
+
+	if( maBmpEx.IsAlpha() )
+		aBitmap = Bitmap( maBmpEx.GetSizePixel(),
+						  maBmpEx.GetBitCount() );
+	else
+        aBitmap = Bitmap( maBmpEx.GetSizePixel(), 1 );
 
-		if( maBmpEx.IsTransparent() )
-			aMask = maBmpEx.GetMask();
-		else
-		{
-			aMask = aBmp;
-			aMask.Convert( BMP_CONVERSION_1BIT_THRESHOLD );
-		}
-		
-		if( maDisabledBmp.IsEmpty() )
-			maDisabledBmp = Bitmap( aBmp.GetSizePixel(), 1 );
-		
-		BitmapReadAccess*	pAcc = aBmp.AcquireReadAccess();
-		BitmapReadAccess*	pMsk = aMask.AcquireReadAccess();
-		BitmapWriteAccess*	pDis = maDisabledBmp.AcquireWriteAccess();
+	Bitmap aSrcBitmap = maBmpEx.GetBitmap();
+	BitmapReadAccess  *pAcc = aSrcBitmap.AcquireReadAccess();
+	if( !pAcc )
+		return;
+	BitmapWriteAccess *pDis = aBitmap.AcquireWriteAccess();
 
-		if( pAcc && pMsk && pDis )
-		{
-			const Color 		aWhite( COL_WHITE );
-			const Color 		aBlack( COL_BLACK );
-			const BitmapColor	aAccWhite( pAcc->GetBestMatchingColor( aWhite ) );
-			const BitmapColor	aMskWhite( pMsk->GetBestMatchingColor( aWhite ) );
-			const BitmapColor	aDisWhite( pDis->GetBestMatchingColor( aWhite ) );
-			const BitmapColor	aDisBlack( pDis->GetBestMatchingColor( aBlack ) );
-			long				nLeft, nTop, nRight, nBottom;
-			long				nCurLeft, nCurRight;
-			const long			nBlackThreshold = FRound( maSize.Width() * maSize.Height() * 0.10 );
+	if( !pDis )
+	{
+		aSrcBitmap.ReleaseAccess( pAcc );
+		return;
+	}
 
-			if( nPos >= 0 )
-			{
-				const Point aPos( nPos * maSize.Width(), 0 );
+	long nLeft, nTop, nRight, nBottom;
 
-				nLeft = aPos.X();
-				nTop = 0;
-				nRight = nLeft + maSize.Width();
-				nBottom = nTop + maSize.Height();
-			}
-			else
-			{
-				nLeft = nTop = 0L;
-				nRight = pDis->Width();
-				nBottom = pDis->Height();
-			}
+	if( nPos >= 0 )
+	{
+		const Point aPos( nPos * maSize.Width(), 0 );
 
-			nCurLeft = nLeft;
-			nCurRight = nCurLeft + maSize.Width();
+		nLeft = aPos.X();
+		nTop = 0;
+		nRight = nLeft + maSize.Width();
+		nBottom = nTop + maSize.Height();
+	}
+	else
+	{
+		nLeft = nTop = 0L;
+		nRight = pDis->Width();
+		nBottom = pDis->Height();
+	}
 
-			while( nCurLeft < nRight )
+	if( maBmpEx.IsAlpha() )
+	{
+		if( pAcc && pDis )
+		{
+			for( long nY = nTop; nY < nBottom; nY++ )
 			{
-				sal_Int32 nBlackCount = 0;
-
-				if( pAcc->GetScanlineFormat() == BMP_FORMAT_4BIT_MSN_PAL &&
-					pMsk->GetScanlineFormat() == BMP_FORMAT_1BIT_MSB_PAL )
-				{
-					// optimized version
-					const BYTE cAccTest = aAccWhite.GetIndex();
-					const BYTE cMskTest = aMskWhite.GetIndex();
-
-					for( long nY = nTop; nY < nBottom; nY++ )
-					{
-						Scanline pAccScan = pAcc->GetScanline( nY );
-						Scanline pMskScan = pMsk->GetScanline( nY );
-				
-						for( long nX = nCurLeft; nX < nCurRight; nX++ )
-						{
-							if( ( cMskTest == ( pMskScan[ nX >> 3 ] & ( 1 << ( 7 - ( nX & 7 ) ) ) ? 1 : 0 ) ) || 
-								( cAccTest == ( ( pAccScan[ nX >> 1 ] >> ( nX & 1 ? 0 : 4 ) ) & 0x0f ) ) )
-							{
-								pDis->SetPixel( nY, nX, aDisWhite );
-							}
-							else
-							{
-								pDis->SetPixel( nY, nX, aDisBlack );
-								++nBlackCount;
-							}
-						}
-					}
-				}
-				else if( pAcc->GetScanlineFormat() == BMP_FORMAT_8BIT_PAL &&
-						pMsk->GetScanlineFormat() == BMP_FORMAT_1BIT_MSB_PAL )
-				{
-					// optimized version
-					const BYTE cAccTest = aAccWhite.GetIndex();
-					const BYTE cMskTest = aMskWhite.GetIndex();
+				for( long nX = nLeft; nX < nRight; nX++ )
+ 				{
+					BitmapColor col = pAcc->GetPixel( nY, nX );
 
-					for( long nY = nTop; nY < nBottom; nY++ )
+					if ((nY + nX) % 2 == 0)
 					{
-						Scanline pAccScan = pAcc->GetScanline( nY );
-						Scanline pMskScan = pMsk->GetScanline( nY );
-				
-						for( long nX = nCurLeft; nX < nCurRight; nX++ )
-						{
-							if( ( cMskTest == ( pMskScan[ nX >> 3 ] & ( 1 << ( 7 - ( nX & 7 ) ) ) ? 1 : 0 ) ) || 
-								( cAccTest == pAccScan[ nX ] ) )
-							{
-								pDis->SetPixel( nY, nX, aDisWhite );
-							}
-							else
-							{
-								pDis->SetPixel( nY, nX, aDisBlack );
-								++nBlackCount;
-							}
-						}
+						unsigned char i;
+						i = (unsigned char ) ( col.GetRed() * 0.3 + // magic numbers
+								       col.GetGreen() * 0.59 +
+								       col.GetBlue () * 0.11 );
+
+						col.SetRed   (i / 2 + 127);
+						col.SetGreen (i / 2 + 127);
+						col.SetBlue  (i / 2 + 127);
 					}
-				}
-				else
-				{	
-					for( long nY = nTop; nY < nBottom; nY++ )
+					else
 					{
-						for( long nX = nCurLeft; nX < nCurRight; nX++ )
-						{
-							if( ( aMskWhite == pMsk->GetPixel( nY, nX ) ) || 
-								( aAccWhite == pAcc->GetPixel( nY, nX ) ) )
-							{
-								pDis->SetPixel( nY, nX, aDisWhite );
-							}
-							else
-							{
-								pDis->SetPixel( nY, nX, aDisBlack );
-								++nBlackCount;
-							}
-						}
+#define GT_ZERO(c) ((unsigned char)(((c) >= 0) ? (c) : 0))
+						col.SetRed   (GT_ZERO (( col.GetRed ())   * 0.7));
+						col.SetGreen (GT_ZERO (( col.GetGreen ()) * 0.7));
+						col.SetBlue  (GT_ZERO (( col.GetBlue ())  * 0.7));
+#undef GT_ZERO
 					}
+					pDis->SetPixel( nY, nX, col );
 				}
+			}
+		}
+	}
+	else
+	{
+		BitmapReadAccess *pMsk = aBitmap.AcquireReadAccess();
 
-				if( nBlackCount < nBlackThreshold )
-				{
-					// emergency solution if paint bitmap is mostly white
-					for( long nY = nTop; nY < nBottom; nY++ )
-					{
-						for( long nX = nCurLeft; nX < nCurRight; nX++ )
-						{
-							if( aMskWhite == pMsk->GetPixel( nY, nX ) )
-								pDis->SetPixel( nY, nX, aDisWhite );
-							else
-								pDis->SetPixel( nY, nX, aDisBlack );
-						}
-					}
-				}
+		const Color aWhite( COL_WHITE );
+		const Color aBlack( COL_BLACK );
+		const BitmapColor aAccWhite( pAcc->GetBestMatchingColor( aWhite ) );
+		const BitmapColor aMskWhite( pMsk->GetBestMatchingColor( aWhite ) );
+		const BitmapColor aDisWhite( pDis->GetBestMatchingColor( aWhite ) );
+		const BitmapColor aDisBlack( pDis->GetBestMatchingColor( aBlack ) );
 
-				nCurLeft += maSize.Width();
-				nCurRight += maSize.Width();
+		for( long nY = nTop; nY < nBottom; nY++ )
+		{
+			for( long nX = nLeft; nX < nRight; nX++ )
+			{
+				if( ( aMskWhite == pMsk->GetPixel( nY, nX ) ) &&
+				    ( aAccWhite != pAcc->GetPixel( nY, nX ) ) )
+					pDis->SetPixel( nY, nX, aDisBlack );
+				else
+					pDis->SetPixel( nY, nX, aDisWhite );
 			}
 		}
-
-		aBmp.ReleaseAccess( pAcc );
-		aMask.ReleaseAccess( pMsk );
-		maDisabledBmp.ReleaseAccess( pDis );
+		aBitmap.ReleaseAccess( pMsk );
 	}
+
+	aSrcBitmap.ReleaseAccess( pAcc );
+	aBitmap.ReleaseAccess( pDis );
+
+	if( maBmpEx.IsAlpha() )
+			maDisabledBmpEx = BitmapEx( aBitmap, maBmpEx.GetAlpha() );
+	else
+			maDisabledBmpEx = BitmapEx( aBitmap );
 }
Index: vcl/source/gdi/outdev2.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/gdi/outdev2.cxx,v
retrieving revision 1.29
diff -u -p -u -r1.29 outdev2.cxx
--- vcl/source/gdi/outdev2.cxx	9 Sep 2005 12:06:08 -0000	1.29
+++ vcl/source/gdi/outdev2.cxx	19 Jun 2006 20:02:54 -0000
@@ -1183,13 +1183,6 @@ void OutputDevice::DrawImage( const Poin
 		}
 		break;
 
-		case IMAGETYPE_IMAGEREF:
-		{
-			ImplImageRefData* pData = static_cast< ImplImageRefData* >( rImage.mpImplData->mpData );
-			pData->mpImplData->mpImageBitmap->Draw( pData->mnIndex, this, rPos, nStyle );
-		}
-		break;
-
 		default:
 		break;
 	}
@@ -1225,14 +1218,7 @@ void OutputDevice::DrawImage( const Poin
 				pData->mpImageBitmap->Draw( 0, this, rPos, nStyle, &rSize );
 			}
 			break;
-	
-			case IMAGETYPE_IMAGEREF:
-			{
-				ImplImageRefData* pData = static_cast< ImplImageRefData* >( rImage.mpImplData->mpData );
-				pData->mpImplData->mpImageBitmap->Draw( pData->mnIndex, this, rPos, nStyle, &rSize );
-			}
-			break;
-			
+				
 			default:
 			break;
 		}
Index: vcl/source/gdi/image.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/gdi/image.cxx,v
retrieving revision 1.22
diff -u -p -u -r1.22 image.cxx
--- vcl/source/gdi/image.cxx	5 Jan 2006 18:07:31 -0000	1.22
+++ vcl/source/gdi/image.cxx	19 Jun 2006 20:02:54 -0000
@@ -1,3 +1,4 @@
+#include <stdio.h>
 /*************************************************************************
  *
  *  OpenOffice.org - a multi-platform office productivity suite
@@ -266,10 +267,6 @@ Size Image::GetSizePixel() const
 			case IMAGETYPE_IMAGE:
 				aRet = static_cast< ImplImageData* >( mpImplData->mpData )->maBmpEx.GetSizePixel();
 			break;
-
-			case IMAGETYPE_IMAGEREF:
-				aRet = static_cast< ImplImageRefData* >( mpImplData->mpData )->mpImplData->maImageSize;
-			break;
 		}
 	}
 
@@ -295,14 +292,6 @@ BitmapEx Image::GetBitmapEx() const
 			case IMAGETYPE_IMAGE:
 				aRet = static_cast< ImplImageData* >( mpImplData->mpData )->maBmpEx;
 			break;
-
-			case IMAGETYPE_IMAGEREF:
-			{
-				ImplImageRefData* pData = static_cast< ImplImageRefData* >( mpImplData->mpData );
-				
-				aRet = pData->mpImplData->mpImageBitmap->GetBitmapEx( 1, &pData->mnIndex );
-			}				
-			break;
 		}
 	}
 
@@ -446,10 +435,6 @@ BOOL Image::operator==( const Image& rIm
 			case IMAGETYPE_IMAGE:
 				bRet = static_cast< ImplImageData* >( rImage.mpImplData->mpData )->IsEqual( *static_cast< ImplImageData* >( mpImplData->mpData ) );
 			break;
-
-			case IMAGETYPE_IMAGEREF:
-				bRet = static_cast< ImplImageRefData* >( rImage.mpImplData->mpData )->IsEqual( *static_cast< ImplImageRefData* >( mpImplData->mpData ) );
-			break;
 			
 			default:
 				bRet = false;
@@ -509,42 +494,23 @@ ImageList::ImageList( const ResId& rResI
 				pResMgr->ReadLong();
 		}
 		
-        BitmapEx                           aBmpEx;
-		sal_Int32		                   nCount = pResMgr->ReadLong();
-        ::boost::scoped_array< USHORT >    aIdArray( new USHORT[ nCount ] ); 
-        ::std::vector< ::rtl::OUString >   aImageNames( nCount );   
-        ::rtl::OUString                    aResMgrName( pResMgr->GetFileName() );
-        ::rtl::OUString                    aUserImageName;
-        sal_Int32                          nPos = aResMgrName.lastIndexOf( '\\' );
-		
-		// load file entry list 
-		for( sal_Int32 i = 0; i < nCount; ++i )
-		{
-			aImageNames[ i ] = pResMgr->ReadString();
-			aIdArray[ i ] = static_cast< USHORT >( pResMgr->ReadLong() );
-		}
+		sal_Int32 nCount = pResMgr->ReadLong();
+		ImplInit( nCount, Size() );
 
-		if( -1 == nPos )
-			nPos = aResMgrName.lastIndexOf( '/' );
+		// FIXME - we need to determine the ImageList size from the 1st
+		// loaded occurence ! - should we always load the 1st image ?
+		// should we fetch the size from the 1st image ?
 
-		if( -1 != nPos++ )
+		for( sal_Int32 i = 0; i < nCount; ++i )
 		{
-			const sal_Int32	nSecondPos = aResMgrName.lastIndexOf( '.' );
-			aUserImageName = aResMgrName.copy( nPos, ( ( -1 != nSecondPos ) ? nSecondPos : aResMgrName.getLength() ) - nPos );
+			ImageAryData aItem;
+			aItem.maName = pResMgr->ReadString();
+			aItem.mnId = static_cast< USHORT >( pResMgr->ReadLong() );
+			mpImplData->maImages.push_back( aItem );
 		}
 
-        aUserImageName += ::rtl::OUString::valueOf( static_cast< sal_Int32 >( rResId.GetId() ) );
-        aUserImageName += ::rtl::OUString::valueOf( nCount );
-
-        ::rtl::OUString aCurrentSymbolsStyle = Application::GetSettings().GetStyleSettings().GetCurrentSymbolsStyleName();
-        aUserImageName += aCurrentSymbolsStyle;
-        
-        ImplInitBitmapEx( aUserImageName, aImageNames, aCurrentSymbolsStyle, aBmpEx, spMaskColor.get() );
-
 		if( nObjMask & RSC_IMAGELIST_IDCOUNT )
 			pResMgr->ReadShort();
-
-		ImplInit( aBmpEx, nCount, aIdArray.get(), NULL, 4 );
 	}
 }
 
@@ -561,22 +527,19 @@ ImageList::ImageList( const ::std::vecto
 
 	DBG_CTOR( ImageList, NULL );
 
-    BitmapEx                           aBmpEx;
-	::rtl::OUString		               aUserImageName( rPrefix );
-    ::std::vector< ::rtl::OUString >   aImageNames( rNameVector.size() );
-    const lang::Locale&                rLocale = Application::GetSettings().GetUILocale();
-
-    for( sal_Int32 i = 0, nCount = rNameVector.size(); i < nCount; ++i )
-       ( aImageNames[ i ] = rPrefix ) += rNameVector[ i ];
-        
-    aUserImageName = ( ( aUserImageName += rLocale.Language ) += rLocale.Country ).replace( '/', '_' );
-    aUserImageName += ::rtl::OUString::valueOf( static_cast< sal_Int32 >( rNameVector.size() ) );
-
-    ::rtl::OUString aCurrentSymbolsStyle = Application::GetSettings().GetStyleSettings().GetCurrentSymbolsStyleName();
-    aUserImageName += aCurrentSymbolsStyle;
-    
-    ImplInitBitmapEx( aUserImageName, aImageNames, aCurrentSymbolsStyle, aBmpEx, pMaskColor );
-	ImplInit( aBmpEx, static_cast< USHORT >( rNameVector.size() ), NULL, &rNameVector, 4 );
+	ImplInit( rNameVector.size(), Size() );
+
+	mpImplData->maPrefix = rPrefix;
+	for( sal_Int32 i = 0; i < rNameVector.size(); ++i )
+	{
+		ImageAryData aItem;
+		aItem.maName = rNameVector[ i ];
+//		fprintf (stderr, "List %p [%d]: '%s'\n",
+//				 this, i, rtl::OUStringToOString( aItem.maName, RTL_TEXTENCODING_UTF8 ).getStr() );
+
+		aItem.mnId = i + 1;
+		mpImplData->maImages.push_back( aItem );
+	}
 }
 
 // -----------------------------------------------------------------------
@@ -594,105 +557,42 @@ ImageList::ImageList( const ImageList& r
 
 // -----------------------------------------------------------------------
 
-ImageList::ImageList( const BitmapEx& rBitmapEx,
-					  USHORT nInit, USHORT* pIdAry, USHORT nGrow ) :
-	mpImplData( NULL ),
-	mnInitSize( nInit ),
-	mnGrowSize( nGrow )
-{
-	DBG_CTOR( ImageList, NULL );
-
-	ImplInit( rBitmapEx, nInit, pIdAry, NULL, nGrow );
-}
-
-// -----------------------------------------------------------------------
-
-ImageList::ImageList( const BitmapEx& rBitmapEx,
-  				      const ::std::vector< ::rtl::OUString >& rNameVector, 
-					  USHORT nGrow ) :
-	mpImplData( NULL ),
-	mnInitSize( static_cast< USHORT >( rNameVector.size() ) ),
-	mnGrowSize( nGrow )
-{
-    RTL_LOGFILE_CONTEXT( aLog, "vcl: ImageList::ImageList( const BitmapEx& ..." );
-
-	DBG_CTOR( ImageList, NULL );
-
-	ImplInit( rBitmapEx, static_cast< USHORT >( rNameVector.size() ), NULL, &rNameVector, nGrow );
-}
-
-// -----------------------------------------------------------------------
-
-ImageList::ImageList( const Bitmap& rBitmap,
-					  USHORT nInit, USHORT* pIdAry, USHORT nGrow ) :
-	mpImplData( NULL ),
-	mnInitSize( nInit ),
-	mnGrowSize( nGrow )
+ImageList::~ImageList()
 {
-	DBG_CTOR( ImageList, NULL );
+	DBG_DTOR( ImageList, NULL );
 
-	ImplInit( rBitmap, nInit, pIdAry, NULL, nGrow );
+	if( mpImplData && ( 0 == --mpImplData->mnRefCount ) )
+		delete mpImplData;
 }
 
-// -----------------------------------------------------------------------
-
-ImageList::ImageList( const Bitmap& rBitmap, const Bitmap& rMaskBmp,
-					  USHORT nInit, USHORT* pIdAry, USHORT nGrow ) :
-	mpImplData( NULL ),
-	mnInitSize( nInit ),
-	mnGrowSize( nGrow )
+void ImageList::ImplInit( USHORT nItems, const Size &rSize )
 {
-	DBG_CTOR( ImageList, NULL );
-
-	const BitmapEx aBmpEx( rBitmap, rMaskBmp );
-	
-	ImplInit( aBmpEx, nInit, pIdAry, NULL, nGrow );
+	mpImplData = new ImplImageList;
+	mpImplData->mnRefCount = 1;
+	mpImplData->maImages.resize( nItems );
+	mpImplData->maImageSize = rSize;
 }
 
 // -----------------------------------------------------------------------
 
-ImageList::ImageList( const Bitmap& rBitmap, const Color& rColor,
-					  USHORT nInit, USHORT* pIdAry, USHORT nGrow )
+void ImageAryData::Load(const rtl::OUString &rPrefix)
 {
-	DBG_CTOR( ImageList, NULL );
+    static ImplImageTreeSingletonRef aImageTree;
 
-	const BitmapEx aBmpEx( rBitmap, rColor );
-	
-	ImplInit( aBmpEx, nInit, pIdAry, NULL, nGrow );
-}
+	::rtl::OUString aSymbolsStyle = Application::GetSettings().GetStyleSettings().GetCurrentSymbolsStyleName();
 
-// -----------------------------------------------------------------------
+	BitmapEx aBmpEx;
 
-ImageList::~ImageList()
-{
-	DBG_DTOR( ImageList, NULL );
-
-	if( mpImplData && ( 0 == --mpImplData->mnRefCount ) && ( 0 == mpImplData->mnIRefCount ) )
-		delete mpImplData;
-}
-
-// -----------------------------------------------------------------------
+//	fprintf (stderr, "Attempt load of '%s'\n",
+//			 rtl::OUStringToOString( maName, RTL_TEXTENCODING_UTF8 ).getStr() );
 
-void ImageList::ImplInitBitmapEx( const ::rtl::OUString& rUserImageName,
-                                  const ::std::vector< ::rtl::OUString >& rImageNames,
-                                  const ::rtl::OUString& rSymbolsStyle,
-                                  BitmapEx& rBmpEx, 
-                                  const Color* pMaskColor ) const
-{
-    static ImplImageTreeSingletonRef aImageTree;
-    
-    if( !aImageTree->loadImage( rUserImageName, rSymbolsStyle, rBmpEx ) )
-    {
-        BitmapEx    aCurBmpEx;
-        Size        aItemSizePixel;
-        bool        bInit = false;
-        
-        for( sal_Int32 i = 0, nCount = rImageNames.size(); i < nCount; ++i )
-        {
-            if( aImageTree->loadImage( rImageNames[ i ], rSymbolsStyle, aCurBmpEx, true ) )
-            {
-                const Size aCurSizePixel( aCurBmpEx.GetSizePixel() );
-           
+	rtl::OUString aFileName = rPrefix;
+	aFileName += maName;
+	if( aImageTree->loadImage( aFileName, aSymbolsStyle, maBitmapEx, true ) )
+	{
+		// FIXME - how do we get our initial size !?
+#if 0           
+		const Size maBitmapEx( aCurBmpEx.GetSizePixel() );
                 if( !bInit )
                 {
                     const Size      aTotalSize( aCurSizePixel.Width() * nCount, aCurSizePixel.Height() );
@@ -706,7 +606,6 @@ void ImageList::ImplInitBitmapEx( const 
                     bInit = true;
                 }
                     
-#ifdef DBG_UTIL
                 if( ( aItemSizePixel.Width() < aCurSizePixel.Width() ) ||
                     ( aItemSizePixel.Height() < aCurSizePixel.Height() ) )
                 {   
@@ -724,81 +623,18 @@ void ImageList::ImplInitBitmapEx( const 
 
                     DBG_ERROR( aStr.GetBuffer() );
                 }
-#endif
                 
                 const Rectangle aRectDst( Point( aItemSizePixel.Width() * i, 0 ), aItemSizePixel );
                 const Rectangle aRectSrc( Point( 0, 0 ), aCurSizePixel );
                 
                 rBmpEx.CopyPixel( aRectDst, aRectSrc, &aCurBmpEx );            
             }
-#ifdef DBG_UTIL     
-            else
-            {
-                ByteString aErrorStr( "ImageList::ImplInitBitmapEx(...): could not load image <" );
-                DBG_ERROR( ( ( aErrorStr += ByteString( String( rImageNames[ i ] ), RTL_TEXTENCODING_ASCII_US ) ) += '>' ).GetBuffer() );
-            }
 #endif
-        }
-            
-        if( !rBmpEx.IsEmpty() )
-        {
-            if( !rBmpEx.IsTransparent() && pMaskColor )
-                rBmpEx = BitmapEx( rBmpEx.GetBitmap(), *pMaskColor );
-            
-            aImageTree->addUserImage( rUserImageName, rBmpEx );
-        }
-    }
-}
-
-// -----------------------------------------------------------------------
-
-void ImageList::ImplInit( const BitmapEx& rBitmapEx, 
-						  USHORT nInit, const USHORT* pIdAry, 
-						  const ::std::vector< ::rtl::OUString >* pNames,
-						  USHORT nGrow  )
-{
-    RTL_LOGFILE_CONTEXT( aLog, "vcl: ImageList::ImplInit" );
-
-	if( !nInit )
-	{
-		mpImplData  = NULL;
-		mnInitSize = 1;
-		mnGrowSize = nGrow;
 	}
-	else
-	{
-		DBG_ASSERT( !nInit || rBitmapEx.GetSizePixel().Width(), "ImageList::ImageList(): nInitSize != 0 and BmpSize.Width() == 0" );
-		DBG_ASSERT( (rBitmapEx.GetSizePixel().Width() % nInit) == 0, "ImageList::ImageList(): BmpSize % nInitSize != 0" );
-
-		Size aBmpSize( rBitmapEx.GetSizePixel() );
-		
-		mpImplData = new ImplImageList;
-		mnInitSize = nInit;
-		mnGrowSize = nGrow;
+//	else
+//		fprintf (stderr, "Failed to load '%s'\n",
+//				 rtl::OUStringToOString( maName, RTL_TEXTENCODING_UTF8 ).getStr() );
 
-		mpImplData->mnRefCount = 1;
-		mpImplData->mnIRefCount = 0;
-		mpImplData->mnCount = nInit;
-		mpImplData->mnRealCount = nInit;
-		mpImplData->mnArySize = nInit;
-		mpImplData->mpAry = new ImageAryData[nInit];
-		mpImplData->maImageSize = Size( aBmpSize.Width() / nInit, aBmpSize.Height() );
-	
-		for( USHORT i = 0; i < nInit; i++ )
-		{
-			mpImplData->mpAry[ i ].mnId = pIdAry ? pIdAry[ i ] : ( i + 1 );
-			mpImplData->mpAry[ i ].mnRefCount = 1;
-		
-			if( pNames && ( i < pNames->size() ) )
-				mpImplData->mpAry[ i ].maName = (*pNames)[ i ];
-		}
-	
-		mpImplData->mpImageBitmap = new ImplImageBmp;
-		mpImplData->mpImageBitmap->Create( rBitmapEx,
-										   mpImplData->maImageSize.Width(),
-										   mpImplData->maImageSize.Height(),
-										   nInit );
-	}
 }
 
 // -----------------------------------------------------------------------
@@ -807,278 +643,142 @@ void ImageList::ImplMakeUnique()
 {
 	if( mpImplData && mpImplData->mnRefCount > 1 )
 	{
-		ImplImageList*	pNewData = new ImplImageList;
-		USHORT 			i = 0, n = 0;
-		
-		--mpImplData->mnRefCount;
-		
+		ImplImageList *pNewData = new ImplImageList() ;
+
 		pNewData->mnRefCount = 1;
-		pNewData->mnIRefCount = 0;
-		pNewData->mnCount = mpImplData->mnCount;
-		pNewData->mnRealCount = mpImplData->mnRealCount;
-		pNewData->mnArySize = mpImplData->mnArySize;
-		pNewData->mpAry = new ImageAryData[ pNewData->mnArySize ];
+		pNewData->maImages = mpImplData->maImages;
 		pNewData->maImageSize = mpImplData->maImageSize;
-		pNewData->mpImageBitmap = new ImplImageBmp;
-		pNewData->mpImageBitmap->Create( pNewData->maImageSize.Width(), pNewData->maImageSize.Height(), pNewData->mnArySize );
-
-		while( i < mpImplData->mnArySize )
-		{
-			if( mpImplData->mpAry[i].mnId )
-			{
-				pNewData->mpAry[n].maName = mpImplData->mpAry[i].maName;
-				pNewData->mpAry[n].mnId	= mpImplData->mpAry[i].mnId;
-				pNewData->mpAry[n].mnRefCount = 1;
-				pNewData->mpImageBitmap->Replace( n, *mpImplData->mpImageBitmap, i );
-				++n;
-			}
+		--mpImplData->mnRefCount;
 
-			++i;
-		}
+		// FIXME - bogus child reference counts ...
 
 		mpImplData = pNewData;
 	}
 }
 
 // -----------------------------------------------------------------------
-
-USHORT ImageList::ImplGetImageId( const ::rtl::OUString& rImageName ) const
+// Rather a performance hazard:
+BitmapEx ImageList::GetAsHorizontalStrip() const
 {
-	DBG_CHKTHIS( ImageList, NULL );
+	BitmapEx aResult;
+	Size aSize( mpImplData->maImageSize );
+	ULONG nCount = GetImageCount();
+	aSize.Width() *= nCount;
 
-	if( mpImplData && rImageName.getLength() )
-	{
-		USHORT nPos = 0, i = 0;
-		
-		while( i < mpImplData->mnArySize )
-		{
-			if( mpImplData->mpAry[i].maName == rImageName )
-				return mpImplData->mpAry[i].mnId;
+	aResult.SetSizePixel( aSize );
 
-			if ( mpImplData->mpAry[i].mnId )
-				++nPos;
-			
-			++i;
-		}
+	Rectangle aSrcRect( Point( 0, 0 ), mpImplData->maImageSize );
+	for (ULONG nIdx = 0; nIdx < nCount; nIdx++)
+	{
+		Rectangle aDestRect( Point( nIdx * mpImplData->maImageSize.Width(), 0 ),
+							 mpImplData->maImageSize );
+		aResult.CopyPixel( aDestRect, aSrcRect, &mpImplData->maImages[ nIdx ].maBitmapEx);
 	}
 
-	return 0;
+	return aResult;
 }
 
 // -----------------------------------------------------------------------
 
-void ImageList::AddImage( USHORT nId, const Image& rImage )
+void ImageList::InsertFromHorizontalStrip( const BitmapEx &rBitmapEx,
+										   const std::vector< rtl::OUString > &rNameVector )
 {
-	DBG_CHKTHIS( ImageList, NULL );
-	DBG_CHKOBJ( &rImage, Image, NULL );
-	DBG_ASSERT( nId, "ImageList::AddImage(): ImageId == 0" );
-	DBG_ASSERT( GetImagePos( nId ) == IMAGELIST_IMAGE_NOTFOUND, "ImageList::AddImage() - ImageId already exists" );
-	DBG_ASSERT( rImage.mpImplData, "ImageList::AddImage(): Wrong Size" );
-	DBG_ASSERT( !mpImplData || (rImage.GetSizePixel() == mpImplData->maImageSize), "ImageList::AddImage(): Wrong Size" );
+	sal_uInt32 nItems = rNameVector.size();
 
-	bool		bHasImage = ( rImage.mpImplData != 0 );
-	ImageType	eImageType	= IMAGETYPE_BITMAP;
-	Size		aImageSize;
-	USHORT		nIndex;
+//	fprintf (stderr, "InsertFromHorizontalStrip (1) [%d items]\n", nItems);
 
-	if( bHasImage )
-	{
-		eImageType = rImage.mpImplData->meType;
-		aImageSize = rImage.GetSizePixel();
-	}
-	else
-	{
-		if( mpImplData )
-		{
-			eImageType = IMAGETYPE_BITMAP;
-			aImageSize = mpImplData->maImageSize;
-		}
-		else
+	if (!nItems)
 			return;
-	}
 
-	if( !mpImplData )
-	{
-		mpImplData = new ImplImageList;
-		mpImplData->mnRefCount = 1;
-		mpImplData->mnIRefCount = 0;
-		mpImplData->mnCount = 0;
-		mpImplData->mnRealCount = 0;
-		mpImplData->mnArySize = mnInitSize;
-		mpImplData->mpAry = new ImageAryData[mnInitSize];
-		mpImplData->maImageSize = aImageSize;
-		mpImplData->mpImageBitmap = new ImplImageBmp;
-		mpImplData->mpImageBitmap->Create( aImageSize.Width(), aImageSize.Height(), mnInitSize );
-	}
-	else
-		ImplMakeUnique();
-
-	if( mpImplData->mnRealCount == mpImplData->mnArySize )
-	{
-		ImageAryData*	pOldAry  = mpImplData->mpAry;
-		USHORT			nOldSize = mpImplData->mnArySize;
+	Size aSize( rBitmapEx.GetSizePixel());
+	DBG_ASSERT (rBitmapEx.GetSizePixel().Width() % nItems != 0,
+				"ImageList::InsertFromHorizontalStrip - very odd size");
+	aSize.Width() /= nItems;
+	ImplInit( nItems, aSize );
 
-		mpImplData->mnArySize += mnGrowSize;
-		mpImplData->mpAry = new ImageAryData[mpImplData->mnArySize];
-		
-		for( USHORT i = 0; i < nOldSize; ++i )
-			mpImplData->mpAry[ i ] = pOldAry[ i ]; 
-		
-		mpImplData->mpImageBitmap->Expand( mnGrowSize );
-    	delete[] pOldAry;
-		nIndex = mpImplData->mnRealCount;
-	}
-	else
+	Rectangle aDestRect( Point( 0, 0 ), aSize );
+	for (ULONG nIdx = 0; nIdx < nItems; nIdx++)
 	{
-		nIndex = 0;
-		
-		while( mpImplData->mpAry[nIndex].mnRefCount )
-			++nIndex;
+		BitmapEx aBmp;
+		Rectangle aSrcRect( Point( nIdx * mpImplData->maImageSize.Width(), 0 ),
+							mpImplData->maImageSize );
+		aBmp.CopyPixel( aDestRect, aSrcRect, &rBitmapEx );
+		AddImage( rNameVector[ nIdx ], Image( aBmp ) );
 	}
+}
 
-	switch( eImageType )
-	{
-		case IMAGETYPE_BITMAP:
-		{
-			if( !bHasImage )
-			{
-				const Bitmap 	aBmp( aImageSize, 1 );
-				const BitmapEx	aBmpEx( aBmp, COL_BLACK );
-				
-				mpImplData->mpImageBitmap->Replace( nIndex, aBmpEx );
-			}
-			else
-				mpImplData->mpImageBitmap->Replace( nIndex, *static_cast< Bitmap* >( rImage.mpImplData->mpData ) );
-		}
-		break;
-
-		case IMAGETYPE_IMAGE:
-		{
-			ImplImageData* pData = static_cast< ImplImageData* >( rImage.mpImplData->mpData );
-			
-			if( pData->mpImageBitmap )
-				mpImplData->mpImageBitmap->Replace( nIndex, *pData->mpImageBitmap, 0 );
-			else
-				mpImplData->mpImageBitmap->Replace( nIndex, pData->maBmpEx );
-		}
-		break;
+// -----------------------------------------------------------------------
 
-		case IMAGETYPE_IMAGEREF:
-		{
-			ImplImageRefData* pData = static_cast< ImplImageRefData* >( rImage.mpImplData->mpData );
-			
-			mpImplData->mpImageBitmap->Replace( nIndex, *pData->mpImplData->mpImageBitmap, pData->mnIndex );
-		}
-		break;
-	}
+void ImageList::InsertFromHorizontalBitmap( const ResId& rResId,
+											const Color *pMaskColor,
+											const Color *pSearchColors, 
+											const Color *pReplaceColors,
+											ULONG        nColorCount)
+{
+//	fprintf (stderr, "InsertFromHorizontalBitmap\n");
 
-	++mpImplData->mnCount;
-	++mpImplData->mnRealCount;
-	mpImplData->mpAry[nIndex].mnId = nId;
-	mpImplData->mpAry[nIndex].mnRefCount = 1;
+	BitmapEx aBmpEx( rResId );
+	if (!aBmpEx.IsTransparent())
+		aBmpEx = BitmapEx( aBmpEx.GetBitmap(), *pMaskColor );
+	if (nColorCount)
+		aBmpEx.Replace( pSearchColors, pReplaceColors, nColorCount );
+	
+	// FIXME: number of elements !?
+//	fprintf (stderr, "error broken!\n");
+	std::vector< rtl::OUString > aNames;
+	InsertFromHorizontalStrip( aBmpEx, aNames );
 }
 
 // -----------------------------------------------------------------------
 
-void ImageList::AddImage( const ::rtl::OUString& rImageName, const Image& rImage )
+USHORT ImageList::ImplGetImageId( const ::rtl::OUString& rImageName ) const
 {
-	DBG_ASSERT( GetImagePos( rImageName ) == IMAGELIST_IMAGE_NOTFOUND, "ImageList::AddImage() - ImageName already exists" );
-
-	USHORT i, nMax = 0;
+	DBG_CHKTHIS( ImageList, NULL );
 
-	if( mpImplData )
-	{
-		for( i = 0; i < mpImplData->mnArySize; ++i )
-		{
-			if( mpImplData->mpAry[ i ].mnId > nMax )
-			{
-				nMax = mpImplData->mpAry[ i ].mnId;
-			}
-		}
-    }
-	
-	if( nMax < USHRT_MAX )
-    {
-	    AddImage( ++nMax, rImage );
-		
-		for( i = 0; i < mpImplData->mnArySize; ++i )
-		{
-			if( mpImplData->mpAry[ i ].mnId == nMax )
-			{
-				mpImplData->mpAry[ i ].maName = rImageName;
-				break;
-			}
-		}
-	}
-	else
+	std::vector<ImageAryData>::iterator aIter;
+	for( aIter = mpImplData->maImages.begin();
+		 aIter != mpImplData->maImages.end(); aIter++)
 	{
-		DBG_ERROR( "No free image id left" );
+		if( aIter->maName == rImageName )
+			return aIter->mnId;
 	}
+
+	return 0;
 }
 
 // -----------------------------------------------------------------------
 
-void ImageList::CopyImage( USHORT nId, USHORT nCopyId )
+void ImageList::AddImage( USHORT nId, const Image& rImage )
 {
 	DBG_CHKTHIS( ImageList, NULL );
-	DBG_ASSERT( nId, "ImageList::CopyImage(): ImageId == 0" );
-	DBG_ASSERT( GetImagePos( nId ) == IMAGELIST_IMAGE_NOTFOUND, "ImageList::CopyImage(): ImageId already exists" );
-	DBG_ASSERT( GetImagePos( nCopyId ) != IMAGELIST_IMAGE_NOTFOUND, "ImageList::CopyImage(): Unknown nCopyId" );
-
-	USHORT nIndex, nCopyIndex = 0;
-
-	while( nCopyIndex < mpImplData->mnArySize )
-	{
-		if ( mpImplData->mpAry[nCopyIndex].mnId == nCopyId )
-			break;
-
-		++nCopyIndex;
-	}
-	
-	if( nCopyIndex < mpImplData->mnArySize )
-	{
-		ImplMakeUnique();
+	DBG_CHKOBJ( &rImage, Image, NULL );
+	DBG_ASSERT( nId, "ImageList::AddImage(): ImageId == 0" );
+	DBG_ASSERT( GetImagePos( nId ) == IMAGELIST_IMAGE_NOTFOUND, "ImageList::AddImage() - ImageId already exists" );
+	DBG_ASSERT( rImage.mpImplData, "ImageList::AddImage(): Wrong Size" );
+	DBG_ASSERT( !mpImplData || (rImage.GetSizePixel() == mpImplData->maImageSize), "ImageList::AddImage(): Wrong Size" );
 
-		if( mpImplData->mnRealCount == mpImplData->mnArySize )
-		{
-			ImageAryData*	pOldAry  = mpImplData->mpAry;
-			USHORT			nOldSize = mpImplData->mnArySize;
-	
-			mpImplData->mnArySize += mnGrowSize;
-			mpImplData->mpAry = new ImageAryData[mpImplData->mnArySize];
-			
-			for( USHORT i = 0; i < nOldSize; ++i )
-				mpImplData->mpAry[ i ] = pOldAry[ i ]; 
+	if( !mpImplData )
+		ImplInit( 0, rImage.GetSizePixel() );
 
-			mpImplData->mpImageBitmap->Expand( mnGrowSize );
-			delete[] pOldAry;
-			nIndex = mpImplData->mnRealCount;
-		}
-		else
-		{
-			nIndex = 0;
-			
-			while( mpImplData->mpAry[nIndex].mnRefCount )
-				nIndex++;
-		}
-	
-		mpImplData->mpImageBitmap->Replace( nIndex, *mpImplData->mpImageBitmap, nCopyIndex );
-	
-		++mpImplData->mnCount;
-		++mpImplData->mnRealCount;
-		mpImplData->mpAry[nIndex].mnId = nId;
-		mpImplData->mpAry[nIndex].mnRefCount = 1;
-	}
+	ImageAryData aItem;
+	aItem.mnId = nId;
+	aItem.maBitmapEx = rImage.GetBitmapEx();
+	mpImplData->maImages.push_back( aItem );
 }
 
 // -----------------------------------------------------------------------
 
-void ImageList::CopyImage( const ::rtl::OUString& rImageName, const ::rtl::OUString& rCopyName )
+void ImageList::AddImage( const ::rtl::OUString& rImageName, const Image& rImage )
 {
-    const USHORT nId1 = ImplGetImageId( rImageName ), nId2 = ImplGetImageId( rCopyName );
+	DBG_ASSERT( GetImagePos( rImageName ) == IMAGELIST_IMAGE_NOTFOUND, "ImageList::AddImage() - ImageName already exists" );
 
-	if( nId1 && nId2 )
-        CopyImage( nId1, nId2 );
+	if( !mpImplData )
+		ImplInit( 0, rImage.GetSizePixel() );
+
+	ImageAryData aItem;
+	aItem.maName = rImageName;
+	aItem.maBitmapEx = rImage.GetBitmapEx();
+	mpImplData->maImages.push_back( aItem );
 }
 
 // -----------------------------------------------------------------------
@@ -1099,6 +799,7 @@ void ImageList::ReplaceImage( const ::rt
 {
     const USHORT nId = ImplGetImageId( rImageName );
 
+	// FIXME - check 0: were id's 1 based ?
 	if( nId )
         ReplaceImage( nId, rImage );
 }
@@ -1111,31 +812,13 @@ void ImageList::ReplaceImage( USHORT nId
 	DBG_ASSERT( GetImagePos( nId ) != IMAGELIST_IMAGE_NOTFOUND, "ImageList::ReplaceImage(): Unknown nId" );
 	DBG_ASSERT( GetImagePos( nReplaceId ) != IMAGELIST_IMAGE_NOTFOUND, "ImageList::ReplaceImage(): Unknown nReplaceId" );
 
-	USHORT nPos1 = 0, nPos2 = 0;
-
-	while( nPos1 < mpImplData->mnArySize )
-	{
-		if ( mpImplData->mpAry[nPos1].mnId == nId )
-			break;
-
-		++nPos1;
-	}
-	
-	if( nPos1 < mpImplData->mnArySize )
+	ULONG nPosDest = GetImagePos( nId );
+	ULONG nPosSrc = GetImagePos( nReplaceId );
+	if( nPosDest != IMAGELIST_IMAGE_NOTFOUND &&
+		nPosSrc != IMAGELIST_IMAGE_NOTFOUND )
 	{
-		while( nPos2 < mpImplData->mnArySize )
-		{
-			if( mpImplData->mpAry[nPos2].mnId == nReplaceId )
-				break;
-	
-			++nPos2;
-		}
-
-		if( nPos2 < mpImplData->mnArySize )
-		{
-			ImplMakeUnique();
-			mpImplData->mpImageBitmap->Replace( nPos1, nPos2 );
-		}
+		ImplMakeUnique();
+		mpImplData->maImages[nPosDest] = mpImplData->maImages[nPosSrc];
 	}
 }
 
@@ -1155,29 +838,14 @@ void ImageList::RemoveImage( USHORT nId 
 {
 	DBG_CHKTHIS( ImageList, NULL );
 
-	if( mpImplData )
+	std::vector<ImageAryData>::iterator aIter;
+	for( aIter = mpImplData->maImages.begin();
+		 aIter != mpImplData->maImages.end(); aIter++)
 	{
-		USHORT i = 0;
-
-		ImplMakeUnique();
-
-		while( i < mpImplData->mnArySize )
-		{
-			if( mpImplData->mpAry[i].mnId == nId )
-				break;
-
-			++i;
-		}
-
-		if( i < mpImplData->mnArySize )
+		if( aIter->mnId == nId )
 		{
-			--mpImplData->mpAry[i].mnRefCount;
-			mpImplData->mpAry[i].mnId = 0;
-			
-			if( !mpImplData->mpAry[i].mnRefCount )
-				--mpImplData->mnRealCount;
-
-			--mpImplData->mnCount;
+			mpImplData->maImages.erase( aIter );
+			return;
 		}
 	}
 }
@@ -1198,49 +866,52 @@ Image ImageList::GetImage( USHORT nId ) 
 {
 	DBG_CHKTHIS( ImageList, NULL );
 
-	Image aImage;
+//	fprintf (stderr, "GetImage %d\n", nId);
 
 	if( mpImplData )
 	{
-		USHORT i = 0;
-		
-		while( i < mpImplData->mnArySize )
-		{
-			if( mpImplData->mpAry[i].mnId == nId )
-				break;
-
-			++i;
-		}
-
-		if( i < mpImplData->mnArySize )
+		std::vector<ImageAryData>::iterator aIter;
+		for( aIter = mpImplData->maImages.begin();
+			 aIter != mpImplData->maImages.end(); aIter++)
 		{
-			ImplImageRefData* mpData = new ImplImageRefData;
-
-			++mpImplData->mnIRefCount;
-			++mpImplData->mpAry[i].mnRefCount;
-			mpData->mpImplData = mpImplData;
-			mpData->mnIndex = i;
-
-			aImage.mpImplData = new ImplImage;
-			aImage.mpImplData->mnRefCount = 1;
-			aImage.mpImplData->meType = IMAGETYPE_IMAGEREF;
-			aImage.mpImplData->mpData = mpData;
+			if (aIter->mnId == nId)
+			{
+				if( aIter->IsLoadable() )
+					aIter->Load( mpImplData->maPrefix );
+				return Image( aIter->maBitmapEx );
+			}
 		}
 	}
 
-	return aImage;
+//	fprintf (stderr, "no image\n");
+
+	return Image();
 }
 
 // -----------------------------------------------------------------------
 
 Image ImageList::GetImage( const ::rtl::OUString& rImageName ) const
 {
-    const USHORT nId = ImplGetImageId( rImageName );
+//	fprintf (stderr, "GetImage '%s'\n",
+//			 rtl::OUStringToOString( rImageName, RTL_TEXTENCODING_UTF8 ).getStr() );
 
-    if( nId )
-        return GetImage( nId );
-    else 
-        return Image();
+	if( mpImplData )
+	{
+		std::vector<ImageAryData>::iterator aIter;
+ 		for( aIter = mpImplData->maImages.begin();
+			 aIter != mpImplData->maImages.end(); aIter++)
+		{
+			if (aIter->maName == rImageName)
+			{
+				if( aIter->IsLoadable() )
+					aIter->Load( mpImplData->maPrefix );
+				return Image( aIter->maBitmapEx );
+			}
+		}
+	}
+//	fprintf (stderr, "no such image\n");
+
+	return Image();
 }
 
 // -----------------------------------------------------------------------
@@ -1261,7 +932,7 @@ USHORT ImageList::GetImageCount() const
 {
 	DBG_CHKTHIS( ImageList, NULL );
 	
-	return( mpImplData ? mpImplData->mnCount : 0 );
+	return mpImplData ? mpImplData->maImages.size() : 0;
 }
 
 // -----------------------------------------------------------------------
@@ -1272,23 +943,28 @@ USHORT ImageList::GetImagePos( USHORT nI
 
 	if( mpImplData && nId )
 	{
-		USHORT nPos = 0, i = 0;
-		
-		while( i < mpImplData->mnArySize )
+		int i = 0;
+		std::vector<ImageAryData>::iterator aIter;
+ 		for( aIter = mpImplData->maImages.begin();
+			 aIter != mpImplData->maImages.end(); aIter++)
 		{
-			if( mpImplData->mpAry[i].mnId == nId )
-				return nPos;
-
-			if ( mpImplData->mpAry[i].mnId )
-				++nPos;
-			
-			++i;
+			if (aIter->mnId == nId)
+				return i;
 		}
 	}
 
+	// FIXME: destroyed an invariant over Removal ...
+	// FIXME: do we -ever- remove images ?
+	//        audit & remove that functionality ...
+
 	return IMAGELIST_IMAGE_NOTFOUND;
 }
 
+bool ImageList::HasImageAtPos( USHORT nId ) const
+{
+	return GetImagePos( nId ) != IMAGELIST_IMAGE_NOTFOUND;
+}
+
 // -----------------------------------------------------------------------
 
 USHORT ImageList::GetImagePos( const ::rtl::OUString& rImageName ) const
@@ -1297,17 +973,11 @@ USHORT ImageList::GetImagePos( const ::r
 
 	if( mpImplData && rImageName.getLength() )
 	{
-		USHORT nPos = 0, i = 0;
-		
-		while( i < mpImplData->mnArySize )
+		std::vector<ImageAryData>::iterator aIter;
+		for( sal_Int32 i = 0; i < mpImplData->maImages.size(); i++ )
 		{
-			if( mpImplData->mpAry[i].maName == rImageName )
-				return nPos;
-
-			if ( mpImplData->mpAry[i].mnId )
-				++nPos;
-			
-			++i;
+			if (mpImplData->maImages[i].maName == rImageName)
+				return i;
 		}
 	}
 
@@ -1320,21 +990,8 @@ USHORT ImageList::GetImageId( USHORT nPo
 {
 	DBG_CHKTHIS( ImageList, NULL );
 
-	if( mpImplData )
-	{
-		USHORT nRealPos = 0, i = 0;
-		
-		while( i < mpImplData->mnArySize )
-		{
-			if( (nPos == nRealPos) && (mpImplData->mpAry[i].mnId) )
-				return mpImplData->mpAry[i].mnId;
-
-			if ( mpImplData->mpAry[i].mnId )
-				++nRealPos;
-
-			++i;
-		}
-	}
+	if( mpImplData && nPos < mpImplData->maImages.size() )
+		return mpImplData->maImages[ nPos ].mnId;
 
 	return 0;
 }
@@ -1351,11 +1008,10 @@ void ImageList::GetImageIds( ::std::vect
 	
 	if( mpImplData )
 	{
-		for( USHORT i = 0; i < mpImplData->mnArySize; ++i )
-		{
-			if( mpImplData->mpAry[ i ].mnId )
-				rIds.push_back( mpImplData->mpAry[ i ].mnId );
-		}
+		std::vector<ImageAryData>::iterator aIter;
+ 		for( aIter = mpImplData->maImages.begin();
+			 aIter != mpImplData->maImages.end(); aIter++)
+			rIds.push_back( aIter->mnId );
 	}
 }
 
@@ -1365,21 +1021,8 @@ void ImageList::GetImageIds( ::std::vect
 {
 	DBG_CHKTHIS( ImageList, NULL );
 
-	if( mpImplData )
-	{
-		USHORT nRealPos = 0, i = 0;
-		
-		while( i < mpImplData->mnArySize )
-		{
-			if( (nPos == nRealPos) && (mpImplData->mpAry[i].mnId) )
-				return mpImplData->mpAry[i].maName;
-
-			if ( mpImplData->mpAry[i].mnId )
-				++nRealPos;
-
-			++i;
-		}
-	}
+	if( mpImplData && nPos < mpImplData->maImages.size() )
+		return mpImplData->maImages[ nPos ].maName;
 
 	return ::rtl::OUString();
 }
@@ -1396,11 +1039,10 @@ void ImageList::GetImageNames( ::std::ve
 	
 	if( mpImplData )
 	{
-		for( USHORT i = 0; i < mpImplData->mnArySize; ++i )
-		{
-			if( mpImplData->mpAry[ i ].mnId )
-				rNames.push_back( mpImplData->mpAry[ i ].maName );
-		}
+		std::vector<ImageAryData>::iterator aIter;
+ 		for( aIter = mpImplData->maImages.begin();
+			 aIter != mpImplData->maImages.end(); aIter++)
+			rNames.push_back( aIter->maName );
 	}
 }
 
@@ -1414,91 +1056,14 @@ Size ImageList::GetImageSize() const
 
 	if( mpImplData )
 		aRet = mpImplData->maImageSize;
+//	fprintf (stderr, "GetImageSize returns %d, %d\n",
+//			 aRet.Width(), aRet.Height());
 
 	return aRet;
 }
 
 // -----------------------------------------------------------------------
 
-BitmapEx ImageList::GetBitmapEx() const
-{
-	DBG_CHKTHIS( ImageList, NULL );
-
-	BitmapEx aRet;
-
-	if( mpImplData )
-	{
-		USHORT* pPosAry = new USHORT[ mpImplData->mnCount ];
-		USHORT	nPosCount = 0;
-		
-		for( USHORT i = 0; i < mpImplData->mnArySize; i++ )
-		{
-			if( mpImplData->mpAry[i].mnId )
-			{
-				pPosAry[ nPosCount ] = i;
-				++nPosCount;
-			}
-		}
-
-		aRet = mpImplData->mpImageBitmap->GetBitmapEx( nPosCount, pPosAry );
-		delete[] pPosAry;
-	}
-
-	return aRet;
-}
-
-// -----------------------------------------------------------------------
-
-ImageList ImageList::GetColorTransformedImageList( ImageColorTransform eColorTransform ) const
-{
-	DBG_CHKTHIS( ImageList, NULL );
-
-    ImageList aRet;
-
-    if( IMAGECOLORTRANSFORM_HIGHCONTRAST == eColorTransform )
-    {
-        Color*  pSrcColors = NULL;
-        Color*  pDstColors = NULL;
-        ULONG   nColorCount = 0;
-
-        aRet = *this;
-        aRet.ImplMakeUnique();
-
-		Image::GetColorTransformArrays( eColorTransform, pSrcColors, pDstColors, nColorCount );
-
-        if( nColorCount && pSrcColors && pDstColors && mpImplData )
-    		aRet.mpImplData->mpImageBitmap->ReplaceColors( pSrcColors, pDstColors, nColorCount ); 
-
-        delete[] pSrcColors;
-        delete[] pDstColors;
-    }
-	else if( IMAGECOLORTRANSFORM_MONOCHROME_BLACK == eColorTransform ||
-			 IMAGECOLORTRANSFORM_MONOCHROME_WHITE == eColorTransform )
-	{
-		aRet = *this;
-        aRet.ImplMakeUnique();
-   		aRet.mpImplData->mpImageBitmap->ColorTransform( ( BmpColorMode )( eColorTransform ) );
-	}
-
-    if( !aRet.GetImageCount() )
-        aRet = *this;
-
-    return aRet;
-}
-
-// -----------------------------------------------------------------------
-
-void ImageList::Invert()
-{
-    ImageList aNew( *this );
-    aNew.ImplMakeUnique();
-    aNew.mpImplData->mpImageBitmap->Invert();
-    
-    *this = aNew;
-}
-
-// -----------------------------------------------------------------------
-
 ImageList& ImageList::operator=( const ImageList& rImageList )
 {
 	DBG_CHKTHIS( ImageList, NULL );
@@ -1507,12 +1072,10 @@ ImageList& ImageList::operator=( const I
 	if( rImageList.mpImplData )
 		++rImageList.mpImplData->mnRefCount;
 
-	if( mpImplData && ( 0 == --mpImplData->mnRefCount ) && ( 0 == mpImplData->mnIRefCount ) )
+	if( mpImplData && ( 0 == --mpImplData->mnRefCount ) )
 		delete mpImplData;
 
 	mpImplData = rImageList.mpImplData;
-	mnInitSize = rImageList.mnInitSize;
-	mnGrowSize = rImageList.mnGrowSize;
 
 	return *this;
 }
@@ -1530,140 +1093,9 @@ BOOL ImageList::operator==( const ImageL
 		bRet = true;
 	else if( !rImageList.mpImplData || !mpImplData )
 		bRet = false;
-	else if( ( rImageList.mpImplData->mnCount == mpImplData->mnCount ) &&
-		 	 ( rImageList.mpImplData->maImageSize == mpImplData->maImageSize ) )
-	{
-		bRet = true;
-	}
+	else if( rImageList.GetImageCount() == GetImageCount() &&
+		 	 rImageList.mpImplData->maImageSize == mpImplData->maImageSize )
+		bRet = true; // strange semantic
 
 	return bRet;
-}
-
-// -----------------------------------------------------------------------
-
-SvStream& operator>>( SvStream& rIStream, ImageList& rImageList )
-{
-	DBG_CHKOBJ( &rImageList, ImageList, NULL );
-
-	if( rImageList.mpImplData )
-	{
-		--rImageList.mpImplData->mnRefCount;
-		
-		if( ( 0 == rImageList.mpImplData->mnRefCount ) && ( 0 == rImageList.mpImplData->mnIRefCount ) )
-			delete rImageList.mpImplData;
-	}
-	
-	rImageList.mpImplData = NULL;
-
-	USHORT	nVersion;
-	Size	aImageSize;
-	BOOL	bImageList;
-	
-	rIStream >> nVersion >> rImageList.mnInitSize >> rImageList.mnGrowSize >> bImageList;
-
-	if( bImageList )
-	{
-		BitmapEx	aBmpEx;
-		Bitmap		aBmp;
-		BYTE		bMaskOrAlpha, bMaskColor;
-
-		rIStream >> aImageSize.Width() >> aImageSize.Height();
-
-		rImageList.mpImplData = new ImplImageList;
-		rImageList.mpImplData->mnRefCount = 1;
-		rImageList.mpImplData->mnIRefCount= 0;
-		rImageList.mpImplData->mnCount = rImageList.mnInitSize;
-		rImageList.mpImplData->mnRealCount = rImageList.mnInitSize;
-		rImageList.mpImplData->mnArySize = rImageList.mnInitSize;
-		rImageList.mpImplData->mpAry = new ImageAryData[ rImageList.mnInitSize ];
-		rImageList.mpImplData->maImageSize = aImageSize;
-
-		for( USHORT i = 0; i < rImageList.mnInitSize; ++i )
-		{
-			rIStream >> rImageList.mpImplData->mpAry[i].mnId;
-			rImageList.mpImplData->mpAry[i].mnRefCount = 1;
-		}
-	
-		rIStream >> aBmp >> bMaskOrAlpha;
-		
-		if( bMaskOrAlpha )
-		{
-			Bitmap aMaskOrAlpha;			
-		
-			rIStream >> aMaskOrAlpha;
-			
-			if( aMaskOrAlpha.GetBitCount() == 8 && aMaskOrAlpha.HasGreyPalette() )
-				aBmpEx = BitmapEx( aBmp, AlphaMask( aMaskOrAlpha ) );
-			else
-				aBmpEx = BitmapEx( aBmp, aMaskOrAlpha );
-		}
-		
-		rIStream >> bMaskColor;
-
-		if( bMaskColor )
-		{
-			Color aMaskColor;
-			
-			rIStream >> aMaskColor;
-			
-			if( !aBmpEx.IsAlpha() && !aBmpEx.IsTransparent() )
-				aBmpEx = BitmapEx( aBmp, aMaskColor );
-		}
-	
-		rImageList.mpImplData->mpImageBitmap = new ImplImageBmp;
-		rImageList.mpImplData->mpImageBitmap->Create( aBmpEx, aImageSize.Width(), aImageSize.Height(), rImageList.mnInitSize );
-	}
-	
-	return rIStream;
-}
-
-// -----------------------------------------------------------------------
-
-SvStream& operator<<( SvStream& rOStream, const ImageList& rImageList )
-{
-	DBG_CHKOBJ( &rImageList, ImageList, NULL );
-
-	USHORT	nVersion = IMAGE_FILE_VERSION;
-	BOOL	bImageList = rImageList.mpImplData ? true : false;
-
-	rOStream << nVersion;
-
-	if ( !bImageList || !rImageList.mpImplData->mnCount )
-		rOStream << rImageList.mnInitSize << rImageList.mnGrowSize << ( bImageList = FALSE );
-	else
-	{
-		rOStream << rImageList.mpImplData->mnCount;
-		rOStream << rImageList.mnGrowSize;
-		rOStream << bImageList;
-		rOStream << rImageList.mpImplData->maImageSize.Width();
-		rOStream << rImageList.mpImplData->maImageSize.Height();
-	
-		USHORT* mpPosAry = new USHORT[rImageList.mpImplData->mnCount];
-		USHORT	nPosCount = 0;
-		
-		for( USHORT i = 0; i < rImageList.mpImplData->mnArySize; ++i )
-		{
-			if( rImageList.mpImplData->mpAry[i].mnId )
-			{
-				rOStream << rImageList.mpImplData->mpAry[i].mnId;
-				mpPosAry[ nPosCount++ ] = i;
-			}
-		}
-	
-		BitmapEx	aBmpEx( rImageList.mpImplData->mpImageBitmap->GetBitmapEx( nPosCount, mpPosAry ) );
-		const BOOL	bMaskOrAlpha = aBmpEx.IsAlpha() || aBmpEx.IsTransparent();
-		const BOOL	bMaskColor = false;
-
-		rOStream << aBmpEx.GetBitmap() << bMaskOrAlpha;
-		
-		if( bMaskOrAlpha )
-			rOStream << ( aBmpEx.IsAlpha() ? aBmpEx.GetAlpha().ImplGetBitmap() : aBmpEx.GetMask() );
-	
-		// BitmapEx doesn't have internal mask colors anymore
-		rOStream << bMaskColor;
-
-		delete[] mpPosAry;
-	}
-
-	return rOStream;
 }
