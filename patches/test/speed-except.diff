--- /dev/null	2006-02-19 17:37:33.000000000 +0000
+++ offuh/except/makefile.mk	2006-02-21 14:53:46.000000000 +0000
@@ -0,1 +1,20 @@
+# --- Settings -----------------------------------------------------
+
+PRJ=..
+
+PRJNAME=offuh
+TARGET=unotypes
+ENABLE_EXCEPTIONS=TRUE
+
+.INCLUDE :  settings.mk
+
+LIB1TARGET= $(SLB)$/$(TARGET).lib
+LIB1OBJFILES= $(SLO)$/except.obj
+
+SHL1TARGET=except$(UPD)$(DLLPOSTFIX)
+SHL1LIBS=$(LIB1TARGET)
+
+# --- Targets -------------------------------------------------------
+
+.INCLUDE :  target.mk
--- /dev/null	2006-02-19 17:37:33.000000000 +0000
+++ offuh/except/except.cxx	2006-02-21 14:48:09.000000000 +0000
@@ -0,0 +1 @@
+#include <catch.hxx>
Index: codemaker/source/cppumaker/cppumaker.cxx
===================================================================
RCS file: /cvs/udk/codemaker/source/cppumaker/cppumaker.cxx,v
retrieving revision 1.8
diff -u -p -u -r1.8 cppumaker.cxx
--- codemaker/source/cppumaker/cppumaker.cxx	8 Sep 2005 02:11:34 -0000	1.8
+++ codemaker/source/cppumaker/cppumaker.cxx	9 Mar 2006 22:19:49 -0000
@@ -245,6 +245,36 @@ SAL_IMPLEMENT_MAIN_WITH_ARGS(argc, argv)
 		exit(99);
 	}
 
+	if (!aIncludes.empty() && options.isValid("-O"))
+	{
+		OString outPath = options.getOption("-O");
+		outPath += "/catch.hxx";
+		FILE *excepts = fopen (outPath, "w+");
+		fprintf (excepts, "// This file is autogenerated by cppumaker\n");
+		fprintf (excepts, "// include exception headers\n");
+
+		::std::list<rtl::OString>::const_iterator iter;
+
+		for (iter = aIncludes.begin(); iter != aIncludes.end(); iter++)
+		{
+			rtl::OString aStr = *iter;
+			fprintf (excepts, "#include <%s.hppi>\n", (const sal_Char *) aStr);
+		}
+	
+		fprintf (excepts, "// dummy method\n");
+		fprintf (excepts, "extern void force_emit ()\n");
+		fprintf (excepts, "{\n");
+		for (iter = aExceptionNames.begin(); iter != aExceptionNames.end(); iter++) {
+			fprintf (excepts, "    try {\n");
+			fprintf (excepts, "        force_emit ();\n");
+			fprintf (excepts, "    }\n");
+			rtl::OString aStr = *iter;
+			fprintf (excepts, "catch (const %s &r) {} \n", (const sal_Char *)aStr);
+		}
+		fprintf (excepts, "}\n\n");
+		fclose (excepts);
+	}
+
 	return 0;
 }
 
Index: codemaker/source/cppumaker/cpputype.cxx
===================================================================
RCS file: /cvs/udk/codemaker/source/cppumaker/cpputype.cxx,v
retrieving revision 1.37
diff -u -p -u -r1.37 cpputype.cxx
--- codemaker/source/cppumaker/cpputype.cxx	26 Jan 2006 17:42:38 -0000	1.37
+++ codemaker/source/cppumaker/cpputype.cxx	9 Mar 2006 22:19:50 -0000
@@ -56,8 +56,14 @@
 
 using namespace rtl;
 
+::std::list<rtl::OString> aExceptionNames;
+::std::list<rtl::OString> aIncludes;
+
 namespace {
 
+// This sucks - but ...
+static const char *inline_str = "inline";
+
 rtl::OString translateSimpleUnoType(rtl::OString const & unoType) {
     static rtl::OString const trans[codemaker::UnoType::SORT_COMPLEX + 1] = {
         "void", "::sal_Bool", "::sal_Int8", "::sal_Int16", "::sal_uInt16",
@@ -322,9 +328,14 @@ void CppuType::addGetCppuTypeIncludes(co
     }
 }
 
-bool CppuType::dumpFiles(CppuOptions * options, rtl::OString const & outPath) {
+bool CppuType::dumpFiles(CppuOptions * options, rtl::OString const & outPath)
+{
+		if (options->isValid("-O")) // sucky indeed !
+		inline_str = "";
+	aIncludes.insert(aIncludes.end(), m_typeName);
     return dumpFile(options, ".hdl", m_typeName, outPath)
-        && dumpFile(options, ".hpp", m_typeName, outPath);
+        && dumpFile(options, ".hpp", m_typeName, outPath) 
+		&& dumpFile(options, ".hppi", m_typeName, outPath);
 }
 
 void CppuType::addLightGetCppuTypeIncludes(
@@ -367,13 +378,13 @@ void CppuType::dumpGetCppuTypePreamble(F
         out << " > {\npublic:\n";
         inc();
         out << indent()
-            << "static inline ::com::sun::star::uno::Type const & get() {\n";
+            << "static " << inline_str << " ::com::sun::star::uno::Type const & get() {\n";
     } else {
         if (codemaker::cppumaker::dumpNamespaceOpen(out, m_typeName, false)) {
             out << "\n\n";
         }
-        out << ("inline ::com::sun::star::uno::Type const &"
-                " cppu_detail_getUnoType(");
+        out << inline_str << (" ::com::sun::star::uno::Type const &"
+							  " cppu_detail_getUnoType(");
         dumpType(out, m_typeName, false, false, true);
         out << " const *) {\n";
     }
@@ -395,7 +406,7 @@ void CppuType::dumpGetCppuTypePostamble(
         }
     }
     dumpTemplateHead(out);
-    out << "inline ::com::sun::star::uno::Type const & SAL_CALL getCppuType(";
+    out << inline_str << " ::com::sun::star::uno::Type const & SAL_CALL getCppuType(";
     dumpType(out, m_typeName);
     dumpTemplateParameters(out);
     out << " const *) SAL_THROW(()) {\n";
@@ -443,11 +454,18 @@ sal_Bool CppuType::dumpFile(CppuOptions*
 	sal_Bool ret = sal_False;
 
     OString sTmpExt(".tml");
-    sal_Bool bHdl = sal_True;    ;
+    sal_Bool bHdl = sal_True;
     if (sExtension.equals(".hpp")) {
         sTmpExt = ".tmp";
-        bHdl = sal_False;
+		if (pOptions->isValid("-O")) // duplicate hdl file ...
+			bHdl = sal_True;
     }
+    if (sExtension.equals(".hppi")) {
+		if (!pOptions->isValid("-O"))
+			return sal_True;
+        sTmpExt = ".tmpi";
+		bHdl = sal_False;
+	}
     
     OString sFileName = createFileNameFromType(sOutPath, sName, sExtension);
     if (sFileName.getLength() == 0)
@@ -476,10 +494,10 @@ sal_Bool CppuType::dumpFile(CppuOptions*
         sTmpFileName = oFile.getName();
 
     codemaker::cppumaker::Includes includes(m_typeMgr, m_dependencies, !bHdl);
-    if (bHdl) 
+    if (bHdl)
 		ret = dumpHFile(oFile, includes);
     else {
-        addGetCppuTypeIncludes(includes);
+		addGetCppuTypeIncludes(includes);
 		ret = dumpHxxFile(oFile, includes);
     }
         
@@ -627,8 +645,8 @@ void CppuType::dumpInitializer(
 
 void CppuType::dumpGetCppuType(FileStream & out) {
     if (m_typeName.equals("com/sun/star/uno/XInterface")) {
-        out << indent()
-            << ("inline ::com::sun::star::uno::Type const & SAL_CALL"
+		out << indent() << inline_str
+            << (" ::com::sun::star::uno::Type const & SAL_CALL"
                 " getCppuType(");
         dumpType(out, m_typeName, true, false);
         out << " *) SAL_THROW(()) {\n";
@@ -639,8 +657,8 @@ void CppuType::dumpGetCppuType(FileStrea
         dec();
         out << indent() << "}\n";
     } else if (m_typeName.equals("com/sun/star/uno/Exception")) {
-        out << indent()
-            << ("inline ::com::sun::star::uno::Type const & SAL_CALL"
+		out << indent() << inline_str
+            << (" ::com::sun::star::uno::Type const & SAL_CALL"
                 " getCppuType(");
         dumpType(out, m_typeName, true, false);
         out << " *) SAL_THROW(()) {\n";
@@ -1472,7 +1490,7 @@ sal_Bool InterfaceType::dumpHFile(
         o << "\n";
     }
 
-	o << "\ninline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
+	o << inline_str << "\n const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
 	dumpType(o, m_typeName, sal_True, sal_False);
 	o << "* ) SAL_THROW( () );\n\n";
 
@@ -1500,8 +1518,8 @@ sal_Bool InterfaceType::dumpDeclaration(
 	dumpAttributes(o);
 	dumpMethods(o);
 
-    o << "\n" << indent()
-      << ("static inline ::com::sun::star::uno::Type const & SAL_CALL"
+    o << "\n" << indent() << "static " << inline_str
+      << (" ::com::sun::star::uno::Type const & SAL_CALL"
           " static_type(void * = 0);\n");
 
 	dec();
@@ -2496,7 +2514,8 @@ bool ModuleType::dumpFiles(
         tmpName += "/" + m_typeName.copy(m_typeName.lastIndexOf('/') + 1);
     }
     return dumpFile(options, ".hdl", tmpName, outPath)
-        && dumpFile(options, ".hpp", tmpName, outPath);
+        && dumpFile(options, ".hpp", tmpName, outPath)
+		&& dumpFile(options, ".hppi", m_typeName, outPath);
 }
 
 //*************************************************************************
@@ -2551,7 +2570,7 @@ sal_Bool StructureType::dumpHFile(
 	  << "class Type;\n} } } }\n\n";
 
     dumpTemplateHead(o);
-	o << "inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
+	o << inline_str << " const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
 	dumpType(o, m_typeName, sal_True, sal_False); 
     dumpTemplateParameters(o);
 	o << "* );\n\n";
@@ -2585,10 +2604,10 @@ sal_Bool StructureType::dumpDeclaration(
     }
     o << " {\n";
     inc();
-    o << indent() << "inline " << m_name << "() SAL_THROW(());\n";
+    o << indent() << inline_str << " " << m_name << "() SAL_THROW(());\n";
     sal_uInt16 members = m_reader.getFieldCount();
     if (members > 0 || getInheritedMemberCount() > 0) {
-        o << "\n" << indent() << "inline " << m_name << "(";
+		o << "\n" << indent() << inline_str << " " << m_name << "(";
         bool prev = dumpSuperMember(o, base, true);
         for (sal_uInt16 i = 0; i < members; ++i) {
             if (prev) {
@@ -2667,7 +2686,7 @@ sal_Bool StructureType::dumpHxxFile(
 	o << "\n";
 
     dumpTemplateHead(o);
-	o << "inline " << m_name;
+	o << inline_str << " " << m_name;
     dumpTemplateParameters(o);
     o << "::" << m_name << "() SAL_THROW( () )\n";
 	inc();
@@ -2718,7 +2737,7 @@ sal_Bool StructureType::dumpHxxFile(
 	if (fieldCount > 0 || getInheritedMemberCount() > 0)
 	{
         dumpTemplateHead(o);
-		o << "inline " << m_name;
+		o << inline_str << " " << m_name;
         dumpTemplateParameters(o);
         o << "::" << m_name << "(";
 
@@ -3256,7 +3275,7 @@ sal_Bool ExceptionType::dumpHFile(
 	o << "\nnamespace com { namespace sun { namespace star { namespace uno {\n"
 	  << "class Type;\n} } } }\n\n";
 
-	o << "inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
+	o << inline_str << " const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
 	dumpType(o, m_typeName, sal_True, sal_False); 
 	o << "* ) SAL_THROW( () );\n\n";
 
@@ -3265,6 +3284,15 @@ sal_Bool ExceptionType::dumpHFile(
 	return sal_True;
 }
 
+bool
+ExceptionType::dumpFiles(CppuOptions * options, rtl::OString const & outPath)
+{
+	OString aTypeName = scopedName (OString(), m_typeName);
+	aExceptionNames.insert(aExceptionNames.end(), aTypeName);
+
+	return CppuType::dumpFiles (options, outPath);
+}
+
 sal_Bool ExceptionType::dumpDeclaration(FileStream& o)
 	throw( CannotDumpException )
 {
@@ -3280,7 +3308,7 @@ sal_Bool ExceptionType::dumpDeclaration(
 		
 	o << "\n{\npublic:\n";
 	inc();
-	o << indent() << "inline CPPU_GCC_DLLPRIVATE " << m_name
+	o << indent() << inline_str << " CPPU_GCC_DLLPRIVATE " << m_name
       << "() SAL_THROW( () );\n\n";
 		
 	sal_uInt16 		fieldCount = m_reader.getFieldCount();
@@ -3291,7 +3319,7 @@ sal_Bool ExceptionType::dumpDeclaration(
 		
 	if (fieldCount > 0 || getInheritedMemberCount() > 0)
 	{
-		o << indent() << "inline CPPU_GCC_DLLPRIVATE " << m_name << "(";
+		o << indent() << inline_str << " CPPU_GCC_DLLPRIVATE " << m_name << "(";
 			
 		sal_Bool superHasMember = dumpSuperMember(o, superType, sal_True);
 			
@@ -3318,10 +3346,10 @@ sal_Bool ExceptionType::dumpDeclaration(
 		}		
 		o << ") SAL_THROW( () );\n\n";
 	}
-    o << indent() << "inline CPPU_GCC_DLLPRIVATE " << m_name << "(" << m_name
+    o << indent() << inline_str << " CPPU_GCC_DLLPRIVATE " << m_name << "(" << m_name
       << " const &);\n\n"
-      << indent() << "inline CPPU_GCC_DLLPRIVATE ~" << m_name << "();\n\n"
-      << indent() << "inline CPPU_GCC_DLLPRIVATE " << m_name << " & operator =("
+      << indent() << inline_str << " CPPU_GCC_DLLPRIVATE ~" << m_name << "();\n\n"
+      << indent() << inline_str << " CPPU_GCC_DLLPRIVATE " << m_name << " & operator =("
       << m_name << " const &);\n\n";
 
 	for (i=0; i < fieldCount; i++)
@@ -3370,7 +3398,7 @@ sal_Bool ExceptionType::dumpHxxFile(
     }
 	o << "\n";
 
-	o << "inline " << m_name << "::" << m_name << "() SAL_THROW( () )\n";
+	o << inline_str << " " << m_name << "::" << m_name << "() SAL_THROW( () )\n";
 	inc();
 	OString superType;
     if (m_reader.getSuperTypeCount() >= 1) {
@@ -3426,7 +3454,7 @@ sal_Bool ExceptionType::dumpHxxFile(
 
 	if (fieldCount > 0 || getInheritedMemberCount() > 0)
 	{
-		o << indent() << "inline " << m_name << "::" << m_name << "(";
+		o << indent() << inline_str << " " << m_name << "::" << m_name << "(";
 
 		sal_Bool superHasMember = dumpSuperMember(o, superType, sal_True);
 
@@ -3638,7 +3666,7 @@ sal_Bool EnumType::dumpHFile(
 	o << "\nnamespace com { namespace sun { namespace star { namespace uno {\n"
 	  << "class Type;\n} } } }\n\n";
 
-	o << "inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
+	o << inline_str << " const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
 	dumpType(o, m_typeName, sal_True, sal_False); 
 	o << "* ) SAL_THROW( () );\n\n";
 
@@ -3890,7 +3918,10 @@ sal_Bool ConstructiveType::dumpHFile(
 bool ConstructiveType::dumpFiles(
     CppuOptions * options, rtl::OString const & outPath)
 {
-    return dumpFile(options, ".hpp", m_typeName, outPath);
+	if (options->isValid("-O"))
+		return dumpFile(options, ".hppi", m_typeName, outPath);
+	else			
+		return dumpFile(options, ".hpp", m_typeName, outPath);
 }
 
 //*************************************************************************
Index: codemaker/source/cppumaker/cpputype.hxx
===================================================================
RCS file: /cvs/udk/codemaker/source/cppumaker/cpputype.hxx,v
retrieving revision 1.9
diff -u -p -u -r1.9 cpputype.hxx
--- codemaker/source/cppumaker/cpputype.hxx	10 Jan 2006 15:46:47 -0000	1.9
+++ codemaker/source/cppumaker/cpputype.hxx	9 Mar 2006 22:19:50 -0000
@@ -61,6 +61,10 @@ enum CppuTypeDecl
 class CppuOptions;
 class FileStream;
 
+#include <list>
+extern ::std::list<rtl::OString> aExceptionNames;
+extern ::std::list<rtl::OString> aIncludes;
+
 class CppuType
 {
 public:
@@ -300,6 +304,7 @@ public:
 
 	virtual ~ExceptionType();
 
+    bool        dumpFiles(CppuOptions * options, rtl::OString const & outPath);
 	sal_Bool	dumpDeclaration(FileStream& o) throw( CannotDumpException );
 	sal_Bool	dumpHFile(FileStream& o, codemaker::cppumaker::Includes & includes) throw( CannotDumpException );
 	sal_Bool	dumpHxxFile(FileStream& o, codemaker::cppumaker::Includes & includes) throw( CannotDumpException );
