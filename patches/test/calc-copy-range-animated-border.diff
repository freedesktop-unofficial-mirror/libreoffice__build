diff --git sc/source/ui/inc/gridwin.hxx sc/source/ui/inc/gridwin.hxx
index 2b62bc5..a6210f1 100644
--- sc/source/ui/inc/gridwin.hxx
+++ sc/source/ui/inc/gridwin.hxx
@@ -148,6 +148,7 @@ private:
     ::sdr::overlay::OverlayObjectList*				mpOOCursors;
     ::sdr::overlay::OverlayObjectList*              mpOOSelection;
     ::sdr::overlay::OverlayObjectList*              mpOOSelectionBorder;
+    ::sdr::overlay::OverlayObjectList*              mpOOSelectionBorder2;
     ::sdr::overlay::OverlayObjectList*              mpOOAutoFill;
     ::sdr::overlay::OverlayObjectList*              mpOODragRect;
     ::sdr::overlay::OverlayObjectList*              mpOOHeader;
@@ -356,7 +357,6 @@ private:
                         sdr::overlay::OverlayObjectCell::RangeVector* pRanges,
                         const MapMode& rDrawMode,
                         const RectangleConverter *pConverter = NULL);
-    void            UpdateCopySourceOverlay(const MapMode& rDrawMode);
 
 protected:
     using Window::Resize;
@@ -458,6 +458,8 @@ public:
     void CursorChanged();
     void DrawLayerCreated();
 
+    void            DeleteCopySourceOverlay();
+    void            UpdateCopySourceOverlay(const MapMode& rDrawMode);
     void            DeleteCursorOverlay();
     void            UpdateCursorOverlay();
     void            DeleteSelectionOverlay();
diff --git sc/source/ui/inc/overlayobject.hxx sc/source/ui/inc/overlayobject.hxx
new file mode 100644
index 0000000..5c3e774
--- /dev/null
+++ sc/source/ui/inc/overlayobject.hxx
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: gridwin.hxx,v $
+ * $Revision: 1.30 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef __SC_OVERLAYOBJECT_HXX__
+#define __SC_OVERLAYOBJECT_HXX__
+
+#include "svx/sdr/overlay/overlayobject.hxx"
+
+class OutputDevice;
+class Window;
+
+class ScOverlayDashedBorder : public ::sdr::overlay::OverlayObject
+{
+public:
+    ScOverlayDashedBorder(const ::basegfx::B2DRange& rRange, const Color& rColor, Window* pWin);
+    virtual ~ScOverlayDashedBorder();
+
+    virtual void Trigger(sal_uInt32 nTime);
+    virtual void transform(const ::basegfx::B2DHomMatrix& rMatrix);
+    virtual void zoomHasChanged();
+
+private:
+    virtual void drawGeometry(OutputDevice& rOutputDevice);
+    virtual void createBaseRange(OutputDevice& rOutputDevice);
+
+private:
+    Window* mpParent;
+    bool mbToggle;
+};
+
+#endif
diff --git sc/source/ui/view/gridwin.cxx sc/source/ui/view/gridwin.cxx
index 8713b06..9460b2d 100644
--- sc/source/ui/view/gridwin.cxx
+++ sc/source/ui/view/gridwin.cxx
@@ -122,6 +122,8 @@
 #include "tabprotection.hxx"
 #include "clipparam.hxx"
 #include "dpcontrol.hxx"
+#include "overlayobject.hxx"
+#include "basegfx/range/b2drange.hxx"
 
 // #114409#
 #include <vcl/salbtype.hxx>		// FRound
@@ -415,6 +417,7 @@ ScGridWindow::ScGridWindow( Window* pParent, ScViewData* pData, ScSplitPos eWhic
             mpOOCursors( NULL ),
             mpOOSelection( NULL ),
             mpOOSelectionBorder( NULL ),
+            mpOOSelectionBorder2( NULL ),
             mpOOAutoFill( NULL ),
             mpOODragRect( NULL ),
             mpOOHeader( NULL ),
@@ -5160,6 +5163,7 @@ void ScGridWindow::ImpCreateOverlayObjects()
 void ScGridWindow::ImpDestroyOverlayObjects()
 {
     DeleteCursorOverlay();
+    DeleteCopySourceOverlay();
     DeleteSelectionOverlay();
     DeleteAutoFillOverlay();
     DeleteDragRectOverlay();
@@ -5178,7 +5182,6 @@ void ScGridWindow::UpdateAllOverlays()
 void ScGridWindow::DeleteCursorOverlay()
 {
     DELETEZ( mpOOCursors );
-    DELETEZ( mpOOSelectionBorder );
 }
 
 void ScGridWindow::ConvertPixelRectsToRangeVector( const ::std::vector< Rectangle >& rPixelRects, 
@@ -5202,6 +5205,12 @@ void ScGridWindow::ConvertPixelRectsToRangeVector( const ::std::vector< Rectangl
     }
 }
 
+void ScGridWindow::DeleteCopySourceOverlay()
+{
+    DELETEZ( mpOOSelectionBorder );
+    DELETEZ( mpOOSelectionBorder2 );
+}
+
 void ScGridWindow::UpdateCopySourceOverlay( const MapMode& rDrawMode )
 {
     if (!pViewData->ShowPasteSource())
@@ -5219,7 +5228,8 @@ void ScGridWindow::UpdateCopySourceOverlay( const MapMode& rDrawMode )
     SCTAB nCurTab = pViewData->GetCurPos().Tab();
 
     ScClipParam& rClipParam = pClipDoc->GetClipParam();
-    mpOOSelectionBorder = new ::sdr::overlay::OverlayObjectList;
+//  mpOOSelectionBorder = new ::sdr::overlay::OverlayObjectList;
+    mpOOSelectionBorder2 = new ::sdr::overlay::OverlayObjectList;
     for (ScRange* p = rClipParam.maRanges.First(); p; p = rClipParam.maRanges.Next())
     {
         if (p->aStart.Tab() != nCurTab)
@@ -5236,28 +5246,36 @@ void ScGridWindow::UpdateCopySourceOverlay( const MapMode& rDrawMode )
         long nSizeXPix = aClipEndScrPos.X() - aClipStartScrPos.X();
         long nSizeYPix = aClipEndScrPos.Y() - aClipStartScrPos.Y();
     
-        aClipStartScrPos.X() -= 2;
-        aClipStartScrPos.Y() -= 2;
+//      aClipStartScrPos.X() -= 2;
+//      aClipStartScrPos.Y() -= 2;
     
-        Rectangle aRect( aClipStartScrPos, Size( nSizeXPix + 3, nSizeYPix + 3 ) );
+//      Rectangle aRect( aClipStartScrPos, Size( nSizeXPix + 3, nSizeYPix + 3 ) );
+        Rectangle aRect( aClipStartScrPos, Size(nSizeXPix, nSizeYPix) );
     
-        std::vector<Rectangle> aPixelRects;
-    
-        aPixelRects.push_back(Rectangle( aRect.Left(), aRect.Top(), aRect.Left()+2, aRect.Bottom() ));
-        aPixelRects.push_back(Rectangle( aRect.Right()-2, aRect.Top(), aRect.Right(), aRect.Bottom() ));
-        aPixelRects.push_back(Rectangle( aRect.Left()+3, aRect.Top(), aRect.Right()-3, aRect.Top()+2 ));
-        aPixelRects.push_back(Rectangle( aRect.Left()+3, aRect.Bottom()-2, aRect.Right()-3, aRect.Bottom() ));
+//      std::vector<Rectangle> aPixelRects;
+//
+//      aPixelRects.push_back(Rectangle( aRect.Left(), aRect.Top(), aRect.Left()+2, aRect.Bottom() ));
+//      aPixelRects.push_back(Rectangle( aRect.Right()-2, aRect.Top(), aRect.Right(), aRect.Bottom() ));
+//      aPixelRects.push_back(Rectangle( aRect.Left()+3, aRect.Top(), aRect.Right()-3, aRect.Top()+2 ));
+//      aPixelRects.push_back(Rectangle( aRect.Left()+3, aRect.Bottom()-2, aRect.Right()-3, aRect.Bottom() ));
+//
+//      sdr::overlay::OverlayObjectCell::RangeVector aRanges;
+//      ConvertPixelRectsToRangeVector( aPixelRects, &aRanges, rDrawMode );
     
-        sdr::overlay::OverlayObjectCell::RangeVector aRanges;
-        ConvertPixelRectsToRangeVector( aPixelRects, &aRanges, rDrawMode );
-    
-        ScOverlayType eType = SC_OVERLAY_BORDER_TRANSPARENT;
+//      ScOverlayType eType = SC_OVERLAY_BORDER_TRANSPARENT;
     
         Color aHighlight = GetSettings().GetStyleSettings().GetHighlightColor();
-        sdr::overlay::OverlayObjectCell* pOverlay = new sdr::overlay::OverlayObjectCell( eType, aHighlight, aRanges );
-    
-        pOverlayManager->add(*pOverlay);
-        mpOOSelectionBorder->append(*pOverlay);
+//      sdr::overlay::OverlayObjectCell* pOverlay = new sdr::overlay::OverlayObjectCell( eType, aHighlight, aRanges );
+//
+//      pOverlayManager->add(*pOverlay);
+//      mpOOSelectionBorder->append(*pOverlay);
+
+        Rectangle aLogic = PixelToLogic(aRect, rDrawMode);
+        ::basegfx::B2DRange aRange(aLogic.Left(), aLogic.Top(), aLogic.Right(), aLogic.Bottom());
+        aHighlight = COL_BLACK;
+        ScOverlayDashedBorder* pDashedBorder = new ScOverlayDashedBorder(aRange, aHighlight, this);
+        pOverlayManager->add(*pDashedBorder);
+        mpOOSelectionBorder2->append(*pDashedBorder);
     }
 }
 
@@ -5272,6 +5290,7 @@ void ScGridWindow::UpdateCursorOverlay()
     // For now, just re-create them.
 
     DeleteCursorOverlay();
+    DeleteCopySourceOverlay();
 
     UpdateCopySourceOverlay( aDrawMode );
 
diff --git sc/source/ui/view/makefile.mk sc/source/ui/view/makefile.mk
index 312929c..9003498 100644
--- sc/source/ui/view/makefile.mk
+++ sc/source/ui/view/makefile.mk
@@ -98,6 +98,7 @@ SLOFILES =  \
         $(SLO)$/output.obj \
         $(SLO)$/output2.obj \
         $(SLO)$/output3.obj \
+        $(SLO)$/overlayobject.obj \
         $(SLO)$/gridmerg.obj \
         $(SLO)$/invmerge.obj \
         $(SLO)$/cellmergeoption.obj \
@@ -155,6 +156,7 @@ EXCEPTIONSFILES= \
     $(SLO)$/gridwin.obj \
     $(SLO)$/invmerge.obj \
     $(SLO)$/output2.obj \
+    $(SLO)$/overlayobject.obj \
     $(SLO)$/pfuncache.obj \
     $(SLO)$/spelldialog.obj \
     $(SLO)$/cellsh1.obj \
diff --git sc/source/ui/view/overlayobject.cxx sc/source/ui/view/overlayobject.cxx
new file mode 100644
index 0000000..0081358
--- /dev/null
+++ sc/source/ui/view/overlayobject.cxx
@@ -0,0 +1,157 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: gridwin.hxx,v $
+ * $Revision: 1.30 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_sc.hxx"
+
+#include "overlayobject.hxx"
+#include "vcl/outdev.hxx"
+#include "vcl/lineinfo.hxx"
+#include "vcl/salbtype.hxx"
+#include "vcl/window.hxx"
+#include "tools/fract.hxx"
+#include "basegfx/range/b2drange.hxx"
+#include "basegfx/polygon/b2dpolygon.hxx"
+#include "svx/sdr/overlay/overlaymanager.hxx"
+
+using ::sdr::overlay::OverlayObject;
+using ::sdr::overlay::OverlayManager;
+
+
+#include <stdio.h>
+#include <string>
+#include <sys/time.h>
+
+namespace {
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+        mfStartTime = getTime();
+    }
+
+    ~StackPrinter()
+    {
+        double fEndTime = getTime();
+        fprintf(stdout, "%s: --end (duration: %g sec)\n", msMsg.c_str(), (fEndTime-mfStartTime));
+    }
+
+private:
+    double getTime() const
+    {
+        timeval tv;
+        gettimeofday(&tv, NULL);
+        return tv.tv_sec + tv.tv_usec / 1000000.0;
+    }
+
+    ::std::string msMsg;
+    double mfStartTime;
+};
+
+}
+
+#define DASH_UPDATE_INTERVAL 180    // in msec
+
+ScOverlayDashedBorder::ScOverlayDashedBorder(const ::basegfx::B2DRange& rRange, const Color& rColor, Window* pWin) :
+    OverlayObject(rColor),
+    mpParent(pWin),
+    mbToggle(true)
+{
+    mbAllowsAnimation = true;
+    maBaseRange = rRange;
+}
+
+ScOverlayDashedBorder::~ScOverlayDashedBorder()
+{
+}
+
+void ScOverlayDashedBorder::Trigger(sal_uInt32 nTime)
+{
+    OverlayManager* pMgr = getOverlayManager();
+    if (pMgr)
+    {
+        SetTime(nTime + DASH_UPDATE_INTERVAL);
+        mbToggle = !mbToggle;
+        pMgr->InsertEvent(this);
+        objectChange();
+    }
+}
+
+void ScOverlayDashedBorder::transform(const ::basegfx::B2DHomMatrix& /*rMatrix*/)
+{
+}
+
+void ScOverlayDashedBorder::zoomHasChanged()
+{
+}
+
+void ScOverlayDashedBorder::drawGeometry(OutputDevice& rOutputDevice)
+{
+    using ::basegfx::B2DPoint;
+    using ::basegfx::B2DPolygon;
+
+    OverlayManager* pMgr = getOverlayManager();
+    if (!pMgr)
+        return;
+
+    // save original AA and switch off for selection
+    const sal_uInt16 nOriginalAA(rOutputDevice.GetAntialiasing());
+    rOutputDevice.SetAntialiasing(0);
+
+    if (mbToggle)
+    {    
+        pMgr->setStripeColorA(getBaseColor());
+        pMgr->setStripeColorB(COL_WHITE);
+    }
+    else
+    {
+        pMgr->setStripeColorA(COL_WHITE);
+        pMgr->setStripeColorB(getBaseColor());
+    }
+    B2DPolygon aPoly;
+    aPoly.append(B2DPoint(maBaseRange.getMinX(), maBaseRange.getMinY()));
+    aPoly.append(B2DPoint(maBaseRange.getMaxX(), maBaseRange.getMinY()));
+    aPoly.append(B2DPoint(maBaseRange.getMaxX(), maBaseRange.getMaxY()));
+    aPoly.append(B2DPoint(maBaseRange.getMinX(), maBaseRange.getMaxY()));
+    aPoly.append(B2DPoint(maBaseRange.getMinX(), maBaseRange.getMinY()));
+    ImpDrawPolygonStriped(rOutputDevice, aPoly);
+
+    // restore original AA
+    rOutputDevice.SetAntialiasing(nOriginalAA);
+}
+
+void ScOverlayDashedBorder::createBaseRange(OutputDevice& /*rOutputDevice*/)
+{
+}
+
diff --git sc/source/ui/view/tabview3.cxx sc/source/ui/view/tabview3.cxx
index 7130fba..ff7c2cf 100644
--- sc/source/ui/view/tabview3.cxx
+++ sc/source/ui/view/tabview3.cxx
@@ -1810,6 +1810,7 @@ void ScTabView::MakeEditView( ScEditEngineDefaulter* pEngine, SCCOL nCol, SCROW
                     pGridWin[i]->HideCursor();
 
                     pGridWin[i]->DeleteCursorOverlay();
+                    pGridWin[i]->DeleteCopySourceOverlay();
                     pGridWin[i]->DeleteAutoFillOverlay();
 
                     // flush OverlayManager before changing MapMode to text edit
diff --git svx/inc/svx/sdr/animation/scheduler.hxx svx/inc/svx/sdr/animation/scheduler.hxx
index 6ee3e41..3dd8871 100644
--- svx/inc/svx/sdr/animation/scheduler.hxx
+++ svx/inc/svx/sdr/animation/scheduler.hxx
@@ -61,7 +61,7 @@ namespace sdr
 
             // get/set time
             sal_uInt32 GetTime() const;
-            void SetTime(sal_uInt32 nNew);
+            void SVX_DLLPUBLIC SetTime(sal_uInt32 nNew);
 
             // execute event
             virtual void Trigger(sal_uInt32 nTime) = 0;
@@ -145,7 +145,7 @@ namespace sdr
             void checkTimeout();
 
             // insert/remove events, wrapper to EventList methods
-            void InsertEvent(Event* pNew);
+            void SVX_DLLPUBLIC InsertEvent(Event* pNew);
             void RemoveEvent(Event* pOld);
 
             // get/set pause
