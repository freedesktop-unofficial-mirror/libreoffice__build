diff -u -x '*.info*' -r binutils-2.16/bfd/bfd-in2.h binutils-2.16.current/bfd/bfd-in2.h
--- binutils-2.16/bfd/bfd-in2.h	2005-03-02 21:23:20.000000000 +0000
+++ binutils-2.16.current/bfd/bfd-in2.h	2005-07-18 17:00:00.795156488 +0100
@@ -2476,6 +2476,7 @@
 /* i386/elf relocations  */
   BFD_RELOC_386_GOT32,
   BFD_RELOC_386_PLT32,
+  BFD_RELOC_386_PLT32ABS,
   BFD_RELOC_386_COPY,
   BFD_RELOC_386_GLOB_DAT,
   BFD_RELOC_386_JUMP_SLOT,


diff -u -x '*.info*' -r binutils-2.16/bfd/elf32-i386.c binutils-2.16.current/bfd/elf32-i386.c
--- binutils-2.16/bfd/elf32-i386.c	2005-02-06 18:11:29.000000000 +0000
+++ binutils-2.16.current/bfd/elf32-i386.c	2005-07-18 17:31:29.827979848 +0100
@@ -158,9 +160,13 @@
 	 FALSE,			/* partial_inplace */
 	 0,			/* src_mask */
 	 0,			/* dst_mask */
-	 FALSE)			/* pcrel_offset */
+	 FALSE),			/* pcrel_offset */
 
-#define R_386_vt (R_386_GNU_VTENTRY + 1 - R_386_vt_offset)
+  HOWTO(R_386_PLT32ABS, 0, 2, 32, FALSE, 0, complain_overflow_bitfield,
+	bfd_elf_generic_reloc, "R_386_PLT32ABS",
+	TRUE, 0xffffffff, 0xffffffff, FALSE)
+
+#define R_386_vt (R_386_GNU_VTENTRY + 2 - R_386_vt_offset)
 
 };
 
@@ -299,6 +305,10 @@
       TRACE ("BFD_RELOC_VTABLE_ENTRY");
       return &elf_howto_table[R_386_GNU_VTENTRY - R_386_vt_offset];
 
+    case BFD_RELOC_386_PLT32ABS:
+      TRACE ("BFD_RELOC_386_PLT32ABS");
+      return &elf_howto_table[R_386_PLT32ABS - R_386_vt_offset];
+
     default:
       break;
     }
@@ -882,6 +892,7 @@
 	  goto create_got;
 
 	case R_386_PLT32:
+	case R_386_PLT32ABS:
 	  /* This symbol requires a procedure linkage table entry.  We
 	     actually build the entry in adjust_dynamic_symbol,
 	     because this might be a case of linking PIC code which is
@@ -1295,6 +1306,7 @@
 	  /* Fall through */
 
 	case R_386_PLT32:
+	case R_386_PLT32ABS:
 	  if (h != NULL)
 	    {
 	      if (h->plt.refcount > 0)
@@ -2307,6 +2319,7 @@
 	  break;
 
 	case R_386_PLT32:
+	case R_386_PLT32ABS: 
 	  /* Relocation is to the entry for this symbol in the
 	     procedure linkage table.  */
 
@@ -2481,7 +2494,8 @@
 					 contents + rel->r_offset + 4)
 			      == 0xe8);
 		  BFD_ASSERT (rel + 1 < relend);
-		  BFD_ASSERT (ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32);
+		  BFD_ASSERT (ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32 ||
+			      ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32ABS);
 		  roff = rel->r_offset + 5;
 		  val = bfd_get_8 (input_bfd,
 				   contents + rel->r_offset - 1);
@@ -2755,7 +2769,8 @@
 	      BFD_ASSERT (bfd_get_8 (input_bfd, contents + rel->r_offset + 4)
 			  == 0xe8);
 	      BFD_ASSERT (rel + 1 < relend);
-	      BFD_ASSERT (ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32);
+	      BFD_ASSERT (ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32 ||
+			  ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32ABS);
 	      roff = rel->r_offset - 3;
 	      val = bfd_get_8 (input_bfd, contents + rel->r_offset - 1);
 	      if (type == 0x04)
@@ -2827,7 +2842,8 @@
 	      BFD_ASSERT (bfd_get_8 (input_bfd, contents + rel->r_offset + 4)
 			  == 0xe8);
 	      BFD_ASSERT (rel + 1 < relend);
-	      BFD_ASSERT (ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32);
+	      BFD_ASSERT (ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32 ||
+			  ELF32_R_TYPE (rel[1].r_info) == R_386_PLT32ABS);
 	      memcpy (contents + rel->r_offset - 2,
 		      "\x65\xa1\0\0\0\0\x90\x8d\x74\x26", 11);
 	      /* Skip R_386_PLT32.  */

diff -u -x '*.info*' -r binutils-2.16/bfd/libbfd.h binutils-2.16.current/bfd/libbfd.h
--- binutils-2.16/bfd/libbfd.h	2005-03-02 21:23:21.000000000 +0000
+++ binutils-2.16.current/bfd/libbfd.h	2005-07-18 17:00:00.837150104 +0100
@@ -993,6 +993,7 @@
 
   "BFD_RELOC_386_GOT32",
   "BFD_RELOC_386_PLT32",
+  "BFD_RELOC_386_PLT32ABS",
   "BFD_RELOC_386_COPY",
   "BFD_RELOC_386_GLOB_DAT",
   "BFD_RELOC_386_JUMP_SLOT",

diff -u -x '*.info*' -r binutils-2.16/bfd/reloc.c binutils-2.16.current/bfd/reloc.c
--- binutils-2.16/bfd/reloc.c	2005-03-02 21:23:21.000000000 +0000
+++ binutils-2.16.current/bfd/reloc.c	2005-07-18 17:00:00.848148432 +0100
@@ -2279,6 +2279,8 @@
 ENUMX
   BFD_RELOC_386_PLT32
 ENUMX
+  BFD_RELOC_386_PLT32ABS
+ENUMX
   BFD_RELOC_386_COPY
 ENUMX
   BFD_RELOC_386_GLOB_DAT

diff -u -x '*.info*' -r binutils-2.16/gas/config/tc-i386.c binutils-2.16.current/gas/config/tc-i386.c
--- binutils-2.16/gas/config/tc-i386.c	2005-04-13 18:58:42.000000000 +0100
+++ binutils-2.16.current/gas/config/tc-i386.c	2005-07-18 17:00:00.885142808 +0100
@@ -3682,6 +3682,7 @@
     const char *str;
     const enum bfd_reloc_code_real rel[NUM_FLAG_CODE];
   } gotrel[] = {
+    { "PLTABS",   { BFD_RELOC_386_PLT32ABS,   0, BFD_RELOC_X86_64_PLT32    } },
     { "PLT",      { BFD_RELOC_386_PLT32,      0, BFD_RELOC_X86_64_PLT32    } },
     { "GOTOFF",   { BFD_RELOC_386_GOTOFF,     0, 0                         } },
     { "GOTPCREL", { 0,                        0, BFD_RELOC_X86_64_GOTPCREL } },

diff -u -x '*.info*' -r binutils-2.16/include/elf/i386.h binutils-2.16.current/include/elf/i386.h
--- binutils-2.16/include/elf/i386.h	2005-03-03 11:58:06.000000000 +0000
+++ binutils-2.16.current/include/elf/i386.h	2005-07-18 17:28:10.459288496 +0100
@@ -68,6 +68,7 @@
      /* These are GNU extensions to enable C++ vtable garbage collection.  */
      RELOC_NUMBER (R_386_GNU_VTINHERIT, 250)
      RELOC_NUMBER (R_386_GNU_VTENTRY, 251)
+     RELOC_NUMBER (R_386_PLT32ABS,    252)
 END_RELOC_NUMBERS (R_386_max)
 
 #endif
