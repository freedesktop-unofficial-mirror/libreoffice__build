Index: vcl/inc/pngread.hxx
===================================================================
RCS file: /cvs/gsl/vcl/inc/pngread.hxx,v
retrieving revision 1.5.18.2
diff -u -p -r1.5.18.2 pngread.hxx
--- vcl/inc/pngread.hxx	13 Oct 2005 10:18:52 -0000	1.5.18.2
+++ vcl/inc/pngread.hxx	1 Dec 2005 14:46:25 -0000
@@ -77,7 +77,7 @@ namespace vcl
 		// TODO: when incompatible changes are possible again
 		// the preview size hint should be redone
 		static void SetPreviewSizeHint( const Size& r ) { aPreviewSizeHint = r; }
-		static void DisablePreviewMode() { aPreviewSizeHint = Size(0,0); }
+		static void DisablePreviewMode() { OSL_TRACE("preview hint disabled"); aPreviewSizeHint = Size(0,0); }
 	private:
 		static Size aPreviewSizeHint;
 	};
Index: vcl/source/gdi/pngread.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/gdi/pngread.cxx,v
retrieving revision 1.10.18.14
diff -u -p -r1.10.18.14 pngread.cxx
--- vcl/source/gdi/pngread.cxx	15 Nov 2005 09:59:48 -0000	1.10.18.14
+++ vcl/source/gdi/pngread.cxx	1 Dec 2005 14:46:25 -0000
@@ -609,18 +609,34 @@ BOOL PNGReaderImpl::ImplReadHeader( cons
     mpScanPrior = new BYTE[ mnScansize ];
 
     // calculate target size from original size and the preview hint
-    if( rPreviewSizeHint.Width() && rPreviewSizeHint.Height() )
+    if( rPreviewSizeHint.Width() || rPreviewSizeHint.Height() )
     {
+		Size aPreviewSize( rPreviewSizeHint.Width(), rPreviewSizeHint.Height() );
         maTargetSize = maOrigSize;
-        for( int i = 1; i < 5; ++i )
-        {
-            if( (maTargetSize.Width() >> i) < rPreviewSizeHint.Width() )
-                break;
-            if( (maTargetSize.Height() >> i) < rPreviewSizeHint.Height() )
-                break;
-            mnPreviewShift = i;
-        }
-        mnPreviewMask = (1 << mnPreviewShift) - 1;
+
+		if( aPreviewSize.Width() == 0 ) {
+			aPreviewSize.setWidth( ( maOrigSize.Width()*aPreviewSize.Height() )/maOrigSize.Height() );
+			if( aPreviewSize.Width() <= 0 )
+				aPreviewSize.setWidth( 1 );
+		} else if( aPreviewSize.Height() == 0 ) {
+			aPreviewSize.setHeight( ( maOrigSize.Height()*aPreviewSize.Width() )/maOrigSize.Width() );
+			if( aPreviewSize.Height() <= 0 )
+				aPreviewSize.setHeight( 1 );
+		}
+
+		if( aPreviewSize.Width() < maOrigSize.Width() && aPreviewSize.Height() < maOrigSize.Height() ) {
+			OSL_TRACE("preview size %dx%d", aPreviewSize.Width(), aPreviewSize.Height() );
+
+			for( int i = 1; i < 5; ++i )
+				{
+					if( (maTargetSize.Width() >> i) < aPreviewSize.Width() )
+						break;
+					if( (maTargetSize.Height() >> i) < aPreviewSize.Height() )
+						break;
+					mnPreviewShift = i;
+				}
+			mnPreviewMask = (1 << mnPreviewShift) - 1;
+		}
     }
 
     maTargetSize.Width()  = (maOrigSize.Width() + mnPreviewMask) >> mnPreviewShift;
