? configmgr/workben/testapp.cxx
Index: configmgr/workben/makefile.mk
===================================================================
RCS file: /cvs/util/configmgr/workben/makefile.mk,v
retrieving revision 1.3
diff -u -p -u -r1.3 makefile.mk
--- configmgr/workben/makefile.mk	8 Sep 2005 04:44:54 -0000	1.3
+++ configmgr/workben/makefile.mk	23 May 2006 09:45:00 -0000
@@ -73,35 +73,7 @@ USE_LDUMP2=TRUE
 # CFGDEMO
 #
 APP1TARGET=	cfgdemo
-APP1OBJS=\
-	$(OBJ)$/treetests.obj \
-	$(SLO)$/xmltreebuilder.obj \
-	$(SLO)$/xmlformater.obj \
-	$(SLO)$/attributes.obj \
-	$(SLO)$/changes.obj \
-	$(SLO)$/confname.obj \
-	$(SLO)$/typeconverter.obj \
-	$(SLO)$/synchronize.obj	\
-	$(SLO)$/cmtree.obj \
-	$(SLO)$/cmtreemodel.obj \
-	$(SLO)$/localsession.obj \
-	$(SLO)$/mergeupdates.obj \
-	$(SLO)$/oslstream.obj \
-	$(SLO)$/saxtools.obj \
-	$(SLO)$/configsession.obj \
-	$(SLO)$/strimpl.obj \
-	$(SLO)$/tracer.obj \
-	$(SLO)$/confchangesset.obj \
-	$(SLO)$/filehelper.obj \
-	$(SLO)$/strconverter.obj \
-	$(SLO)$/updatedom.obj \
-	$(SLO)$/valuehandler.obj \
-	$(SLO)$/dataconverter.obj \
-
-#	$(OBJ)$/cmxmlexport.obj \
-#	$(OBJ)$/cmxmlimport.obj \
-
-#APP1RES=	$(RES)$/ucbdemo.res
+APP1OBJS= $(OBJ)$/testapp.obj 
 
 APP1STDLIBS=\
 	$(SALLIB) \
--- /dev/null	2006-04-23 09:28:32.000000000 +0100
+++ configmgr/workben/testapp.cxx	2006-05-23 10:30:21.000000000 +0100
@@ -0,0 +1,268 @@
+#include <stdio.h>
+#include <sys/time.h>
+#include <memory>
+#include <vector>
+
+#include <iostream>
+
+#ifndef _SV_SVAPP_HXX //autogen
+#include <vcl/svapp.hxx>
+#endif
+
+#ifndef _CPPUHELPER_SERVICEFACTORY_HXX_
+#include <cppuhelper/servicefactory.hxx>
+#endif
+#include <cppuhelper/implbase1.hxx>
+#include <cppuhelper/bootstrap.hxx>
+
+#ifndef _COMPHELPER_PROCESSFACTORY_HXX_
+#include <comphelper/processfactory.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_REFERENCE_H_
+#include <com/sun/star/uno/Reference.h>
+#endif
+
+#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_BEANS_PROPERTYVALUE_HPP_
+#include <com/sun/star/beans/PropertyValue.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_BEANS_XPROPERTYSET_HPP_
+#include <com/sun/star/beans/XPropertySet.hpp>
+#endif
+
+#include <com/sun/star/beans/XMultiPropertySet.hpp>
+
+#ifndef _COM_SUN_STAR_CONTAINER_XNAMEACCESS_HPP_
+#include <com/sun/star/container/XNameAccess.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_CONTAINER_XNAMECONTAINER_HPP_
+#include <com/sun/star/container/XNameContainer.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_CONTAINER_XCONTAINER_HPP_
+#include <com/sun/star/container/XContainer.hpp>
+#endif
+#include <com/sun/star/container/XContainerListener.hpp>
+
+#ifndef _UTL_CONFIGMGR_HXX_
+#include <unotools/configmgr.hxx>
+#endif
+
+#ifndef _STREAM_HXX //autogen wg. SvStream
+#include <tools/stream.hxx>
+#endif
+
+#include <rtl/ustring.hxx>
+
+#ifndef _UTL_STREAM_WRAPPER_HXX_
+#include <unotools/streamwrap.hxx>
+#endif
+
+#include <tools/urlobj.hxx>
+#include <osl/diagnose.h>
+#include <cppuhelper/implbase1.hxx>
+
+// #include <icmp_oustring.hxx>
+
+#ifndef _COM_SUN_STAR_UNO_ANY_H_
+#include <com/sun/star/uno/Any.h>
+#endif
+#ifndef _COM_SUN_STAR_UNO_SEQUENCE_H_
+#include <com/sun/star/uno/Sequence.h>
+#endif
+
+// using namespace vos;
+using namespace rtl;
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::beans;
+using namespace com::sun::star::container;
+using namespace std;
+
+#define ASCII(x) OUString::createFromAscii(x)
+
+class DumpEvents : public ::cppu::WeakImplHelper1<XContainerListener>
+{
+public:
+        DumpEvents() {}
+        virtual ~DumpEvents() {}
+
+        virtual void SAL_CALL elementInserted( const ContainerEvent& aEvent ) throw(RuntimeException)
+        {
+            fprintf (stderr, "elementInserted\n");
+        }
+        virtual void SAL_CALL elementRemoved ( const ContainerEvent& aEvent ) throw(RuntimeException)
+        {
+            fprintf (stderr, "elementRemoved\n");
+        }
+        virtual void SAL_CALL elementReplaced( const ContainerEvent& aEvent ) throw(RuntimeException)
+        {
+            fprintf (stderr, "elementReplaced\n");
+        }
+        // lang.XEventListener
+        virtual void SAL_CALL disposing( const EventObject& aEvent ) throw(RuntimeException)
+        {
+//			fprintf (stderr, "listener: disposing\n");
+        }
+};
+
+static void
+doTest(	Reference< XMultiServiceFactory > xFac, Reference< XContainerListener > xDumpEvents )
+{
+    bool bSlow = xDumpEvents.is();
+
+    // uicommanddescription code:
+    static const char CONFIGURATION_ROOT_ACCESS[]           = "/org.openoffice.Office.UI.";
+    static const char CONFIGURATION_POP_ELEMENT_ACCESS[]    = "/UserInterface/Commands";
+static const char CONFIGURATION_PROPERTY_LABEL[]        = "Label";
+static const char CONFIGURATION_PROPERTY_CONTEXT_LABEL[] = "ContextLabel";
+static const char PROPSET_LABEL[]                       = "Label";
+static const char PROPSET_NAME[]                        = "Name";
+static const char PROPSET_POPUP[]                       = "Popup";
+static const char PROPSET_PROPERTIES[]                  = "Properties";
+
+    rtl::OUString m_aConfigPopupAccess( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_ROOT_ACCESS ) );
+    Reference< XMultiServiceFactory > m_xConfigProviderPopups;
+    Reference< XNameAccess > m_xConfigAccessPopups;
+    rtl::OUString m_aPropUILabel( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_PROPERTY_LABEL ));
+    rtl::OUString m_aPropUIContextLabel( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_PROPERTY_CONTEXT_LABEL ));
+    rtl::OUString m_aPropLabel( RTL_CONSTASCII_USTRINGPARAM( PROPSET_LABEL ));
+    rtl::OUString m_aPropName( RTL_CONSTASCII_USTRINGPARAM( PROPSET_NAME ));
+    rtl::OUString m_aPropPopup( RTL_CONSTASCII_USTRINGPARAM( PROPSET_POPUP ));
+    rtl::OUString m_aPropProperties( RTL_CONSTASCII_USTRINGPARAM( PROPSET_PROPERTIES ));
+
+    m_aConfigPopupAccess += ASCII("GenericCommands");
+    m_aConfigPopupAccess += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_POP_ELEMENT_ACCESS ));
+    m_xConfigProviderPopups = Reference< XMultiServiceFactory >( xFac->createInstance(
+                                                                 rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+                                                                            "com.sun.star.configuration.ConfigurationProvider" ))),
+                                                                 UNO_QUERY );
+
+
+    PropertyValue aPropValue;
+    Sequence< Any > aArgs( 1 );
+    aPropValue.Name  = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "nodepath" ));
+    aPropValue.Value = makeAny( m_aConfigPopupAccess );
+    aArgs[0] <<= aPropValue;
+    m_xConfigAccessPopups = Reference< XNameAccess >( m_xConfigProviderPopups->createInstanceWithArguments(
+                                                              rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+                                                                     "com.sun.star.configuration.ConfigurationAccess" )),
+                                                              aArgs ),
+                                                      UNO_QUERY );
+#if 0
+    if ( m_xConfigAccessPopups.is() && xDumpEvents.is() )
+    {
+       // Add as container listener
+       Reference< XContainer > xContainer( m_xConfigAccessPopups, UNO_QUERY );
+       if ( xContainer.is() )
+           xContainer->addContainerListener( xDumpEvents );
+       else 
+           fprintf (stderr, "no listening\n");
+    }
+#endif
+
+    sal_Int32               i( 0 );
+    Any                     a;
+    std::vector< OUString > aImageCommandVector;
+    std::vector< OUString > aImageRotateVector;
+    std::vector< OUString > aImageMirrorVector;
+    Sequence< OUString >    aNameSeq;
+
+    if ( m_xConfigAccessPopups.is() )
+    {
+         aNameSeq = m_xConfigAccessPopups->getElementNames();
+         fprintf (stderr, "Element names: %d\n", aNameSeq.getLength());
+        for ( i = 0; i < aNameSeq.getLength(); i++ )
+        {
+            try
+            {
+                if (1) // bSlow) 
+                {
+                    Reference< XNameAccess > xNameAccess;
+                    // This is the slow bit ! ...
+                    // Creating the @#$@#$ing XNameAccess object [ 650 times ]
+                    // which we then use to 'getByName' etc.
+                    a = m_xConfigAccessPopups->getByName( aNameSeq[i] );
+                    if ( a >>= xNameAccess )
+                    {
+                        a = xNameAccess->getByName( m_aPropUILabel );
+                        a = xNameAccess->getByName( m_aPropUIContextLabel );
+                        a = xNameAccess->getByName( m_aPropProperties );
+                    }
+                }
+                else
+                {
+                        // getAsProperty !?
+                    Reference< XMultiPropertySet > xMPS;
+                    Sequence< OUString > aPropNames(3);
+                    aPropNames[0] = m_aPropUILabel;
+                    aPropNames[1] = m_aPropUIContextLabel;
+                    aPropNames[2] = m_aPropProperties;
+                    a = m_xConfigAccessPopups->getByName( aNameSeq[i] );
+                    if ( a >>= xMPS )
+                    {
+                        Sequence<Any> aVals;
+                        aVals = xMPS->getPropertyValues (aPropNames);
+                    }
+                    else
+                        fprintf (stderr, "not an MPS\n");
+                }
+            }
+            catch ( com::sun::star::lang::WrappedTargetException& )
+            {
+            }
+            catch ( com::sun::star::container::NoSuchElementException& )
+            {
+            }
+        }
+    }
+}
+
+static void
+doTestRun( Reference< XMultiServiceFactory > xMSF, Reference< XContainerListener > xDumpEvents, int niter )
+{
+   struct timeval start, end;
+   gettimeofday (&start, NULL);
+
+   for (int i = 0; i < niter; i++)
+       doTest (xMSF, xDumpEvents);
+
+    gettimeofday (&end, NULL);
+    static sal_Int64 usecs = 0;
+    usecs += 1000000 * (end.tv_sec - start.tv_sec);
+    usecs += end.tv_usec - start.tv_usec;
+    usecs /= niter;
+    fprintf (stderr, "(per iteration) %d.%0.6d\n", (int) (usecs / 1000000),
+             (int)(usecs % 1000000));
+}
+
+int main( int argc, char **argv )
+{
+    Reference<XComponentContext> xComponentContext = ::cppu::defaultBootstrap_InitialComponentContext();
+    Reference<XMultiServiceFactory> xMSF(xComponentContext->getServiceManager(), UNO_QUERY);
+    if( !xMSF.is() )
+        fprintf( stderr, "Failed to bootstrap\n" );
+    ::comphelper::setProcessServiceFactory( xMSF );
+
+    Reference< XMultiServiceFactory > xStayLoaded;
+    xStayLoaded = Reference< XMultiServiceFactory >(
+            xMSF->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+                 "com.sun.star.configuration.ConfigurationProvider" ))),
+            UNO_QUERY );
+
+    Reference< XContainerListener > xDumpEvents;
+
+    doTestRun (xMSF, xDumpEvents, 10);
+
+//	xDumpEvents = new DumpEvents();
+
+//	doTestRun (xMSF, xDumpEvents, 10);
+
+    return 0;
+}
