Index: codemaker/source/cppumaker/cppumaker.cxx
===================================================================
RCS file: /cvs/udk/codemaker/source/cppumaker/cppumaker.cxx,v
retrieving revision 1.8
diff -u -p -u -r1.8 cppumaker.cxx
--- codemaker/source/cppumaker/cppumaker.cxx	8 Sep 2005 02:11:34 -0000	1.8
+++ codemaker/source/cppumaker/cppumaker.cxx	20 Mar 2006 15:07:18 -0000
@@ -180,6 +180,13 @@ SAL_IMPLEMENT_MAIN_WITH_ARGS(argc, argv)
 		exit(99);
 	}
 
+	// iNternal - sucky but -I has a well defined meaning.
+	if (options.isValid("-N"))
+	{
+		inline_str = "";
+		do_internal = true;
+	}
+
 	if (options.isValid("-B"))
 	{
 		typeMgr.setBase(options.getOption("-B"));
@@ -245,6 +252,36 @@ SAL_IMPLEMENT_MAIN_WITH_ARGS(argc, argv)
 		exit(99);
 	}
 
+	if (!aIncludes.empty() && options.isValid("-O"))
+	{
+		OString outPath = options.getOption("-O");
+		outPath += "/catch.hxx";
+		FILE *excepts = fopen (outPath, "w+");
+		fprintf (excepts, "// This file is autogenerated by cppumaker\n");
+		fprintf (excepts, "// include exception headers\n");
+
+		::std::list<rtl::OString>::const_iterator iter;
+
+		for (iter = aIncludes.begin(); iter != aIncludes.end(); iter++)
+		{
+			rtl::OString aStr = *iter;
+			fprintf (excepts, "#include <%s.hpp>\n", (const sal_Char *) aStr);
+		}
+	
+		fprintf (excepts, "// dummy method\n");
+		fprintf (excepts, "extern void force_emit ()\n");
+		fprintf (excepts, "{\n");
+		for (iter = aExceptionNames.begin(); iter != aExceptionNames.end(); iter++) {
+			fprintf (excepts, "    try {\n");
+			fprintf (excepts, "        force_emit ();\n");
+			fprintf (excepts, "    }\n");
+			rtl::OString aStr = *iter;
+			fprintf (excepts, "catch (const %s &r) {} \n", (const sal_Char *)aStr);
+		}
+		fprintf (excepts, "}\n\n");
+		fclose (excepts);
+	}
+
 	return 0;
 }
 
Index: codemaker/source/cppumaker/cppuoptions.cxx
===================================================================
RCS file: /cvs/udk/codemaker/source/cppumaker/cppuoptions.cxx,v
retrieving revision 1.9
diff -u -p -u -r1.9 cppuoptions.cxx
--- codemaker/source/cppumaker/cppuoptions.cxx	8 Sep 2005 02:11:54 -0000	1.9
+++ codemaker/source/cppumaker/cppuoptions.cxx	20 Mar 2006 15:07:18 -0000
@@ -71,6 +71,9 @@ sal_Bool CppuOptions::initOptions(int ac
 		{
 			switch (av[i][1])
 			{
+				case 'N':
+					m_options["-N"] = OString("");
+					break;
 				case 'O':
 					if (av[i][2] == '\0')
 					{
Index: codemaker/source/cppumaker/cpputype.cxx
===================================================================
RCS file: /cvs/udk/codemaker/source/cppumaker/cpputype.cxx,v
retrieving revision 1.37
diff -u -p -u -r1.37 cpputype.cxx
--- codemaker/source/cppumaker/cpputype.cxx	26 Jan 2006 17:42:38 -0000	1.37
+++ codemaker/source/cppumaker/cpputype.cxx	20 Mar 2006 15:07:19 -0000
@@ -56,6 +56,13 @@
 
 using namespace rtl;
 
+::std::list<rtl::OString> aExceptionNames;
+::std::list<rtl::OString> aIncludes;
+
+// This sucks - but ...
+const char *inline_str = "inline";
+bool do_internal = false;
+
 namespace {
 
 rtl::OString translateSimpleUnoType(rtl::OString const & unoType) {
@@ -322,9 +329,11 @@ void CppuType::addGetCppuTypeIncludes(co
     }
 }
 
-bool CppuType::dumpFiles(CppuOptions * options, rtl::OString const & outPath) {
+bool CppuType::dumpFiles(CppuOptions * options, rtl::OString const & outPath)
+{
+	aIncludes.insert(aIncludes.end(), m_typeName);
     return dumpFile(options, ".hdl", m_typeName, outPath)
-        && dumpFile(options, ".hpp", m_typeName, outPath);
+		&& dumpFile(options, ".hpp", m_typeName, outPath);
 }
 
 void CppuType::addLightGetCppuTypeIncludes(
@@ -357,7 +366,8 @@ void CppuType::dumpTemplateHead(FileStre
 
 void CppuType::dumpTemplateParameters(FileStream &) const {}
 
-void CppuType::dumpGetCppuTypePreamble(FileStream & out) {
+void CppuType::dumpGetCppuTypePreamble(FileStream & out)
+{
     if (isPolymorphic()) {
         out << "namespace cppu {\n\n";
         dumpTemplateHead(out);
@@ -367,17 +377,29 @@ void CppuType::dumpGetCppuTypePreamble(F
         out << " > {\npublic:\n";
         inc();
         out << indent()
-            << "static inline ::com::sun::star::uno::Type const & get() {\n";
+            << "static " << inline_str << " ::com::sun::star::uno::Type const & get()\n";
+		out << "{\n";
+		// FIXME: ignore 'internal' for now; needs re-work
     } else {
         if (codemaker::cppumaker::dumpNamespaceOpen(out, m_typeName, false)) {
             out << "\n\n";
         }
-        out << ("inline ::com::sun::star::uno::Type const &"
-                " cppu_detail_getUnoType(");
+        out << inline_str << (" ::com::sun::star::uno::Type const &"
+							  " cppu_detail_getUnoType(");
         dumpType(out, m_typeName, false, false, true);
-        out << " const *) {\n";
+        out << " const *)";
+
+		out << "\n";
+		if (do_internal) {
+			out << "#ifndef CPPU_INTERNAL_IMPL\n";
+			out << ";\n";
+			if (codemaker::cppumaker::dumpNamespaceClose(out, m_typeName, false))
+				out << "\n";
+			out << "#else // CPPU_INTERNAL_IMPL\n";
+		}
+		out << "{\n";
     }
-    inc();
+	inc();
 }
 
 void CppuType::dumpGetCppuTypePostamble(FileStream & out) {
@@ -393,9 +415,11 @@ void CppuType::dumpGetCppuTypePostamble(
         if (codemaker::cppumaker::dumpNamespaceClose(out, m_typeName, false)) {
             out << "\n\n";
         }
+		if (do_internal)
+			out << "#endif // CPPU_INTERNAL_IMPL\n";
     }
     dumpTemplateHead(out);
-    out << "inline ::com::sun::star::uno::Type const & SAL_CALL getCppuType(";
+    out << inline_str << " ::com::sun::star::uno::Type const & SAL_CALL getCppuType(";
     dumpType(out, m_typeName);
     dumpTemplateParameters(out);
     out << " const *) SAL_THROW(()) {\n";
@@ -443,7 +467,7 @@ sal_Bool CppuType::dumpFile(CppuOptions*
 	sal_Bool ret = sal_False;
 
     OString sTmpExt(".tml");
-    sal_Bool bHdl = sal_True;    ;
+    sal_Bool bHdl = sal_True;
     if (sExtension.equals(".hpp")) {
         sTmpExt = ".tmp";
         bHdl = sal_False;
@@ -627,8 +651,8 @@ void CppuType::dumpInitializer(
 
 void CppuType::dumpGetCppuType(FileStream & out) {
     if (m_typeName.equals("com/sun/star/uno/XInterface")) {
-        out << indent()
-            << ("inline ::com::sun::star::uno::Type const & SAL_CALL"
+		out << indent() << inline_str
+            << (" ::com::sun::star::uno::Type const & SAL_CALL"
                 " getCppuType(");
         dumpType(out, m_typeName, true, false);
         out << " *) SAL_THROW(()) {\n";
@@ -639,8 +663,8 @@ void CppuType::dumpGetCppuType(FileStrea
         dec();
         out << indent() << "}\n";
     } else if (m_typeName.equals("com/sun/star/uno/Exception")) {
-        out << indent()
-            << ("inline ::com::sun::star::uno::Type const & SAL_CALL"
+		out << indent() << inline_str
+            << (" ::com::sun::star::uno::Type const & SAL_CALL"
                 " getCppuType(");
         dumpType(out, m_typeName, true, false);
         out << " *) SAL_THROW(()) {\n";
@@ -1468,11 +1492,12 @@ sal_Bool InterfaceType::dumpHFile(
         o << "\n";
     }
 	dumpDeclaration(o);
+
     if (codemaker::cppumaker::dumpNamespaceClose(o, m_typeName, false)) {
         o << "\n";
     }
 
-	o << "\ninline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
+	o << inline_str << "\n const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
 	dumpType(o, m_typeName, sal_True, sal_False);
 	o << "* ) SAL_THROW( () );\n\n";
 
@@ -1500,8 +1525,8 @@ sal_Bool InterfaceType::dumpDeclaration(
 	dumpAttributes(o);
 	dumpMethods(o);
 
-    o << "\n" << indent()
-      << ("static inline ::com::sun::star::uno::Type const & SAL_CALL"
+    o << "\n" << indent() << "static " << inline_str
+      << (" ::com::sun::star::uno::Type const & SAL_CALL"
           " static_type(void * = 0);\n");
 
 	dec();
@@ -1521,6 +1546,10 @@ sal_Bool InterfaceType::dumpHxxFile(
 	includes.dump(o, &m_typeName);
 	o << "\n";
 
+	if (do_internal) {
+		o << "#ifdef CPPU_INTERNAL_IMPL\n";
+		o << "// InterfaceType::dumpHxxFile impl\n";
+	}
 	dumpGetCppuType(o);
 
     o << "\n::com::sun::star::uno::Type const & "
@@ -1532,6 +1561,8 @@ sal_Bool InterfaceType::dumpHxxFile(
     o << " * >(0));\n";
     dec();
     o << "}\n";
+	if (do_internal)
+		o << "#endif // CPPU_INTERNAL_IMPL\n";
 
 	o << "\n#endif // "<< headerDefine << "\n";
 	return sal_True;
@@ -2432,8 +2463,8 @@ sal_Bool ConstantsType::dumpDeclaration(
             m_reader.getFieldTypeName(i), RTL_TEXTENCODING_UTF8);
 				
         o << "static const ";
-        dumpType(o, fieldType);	
-        o << " " << fieldName << " = ";
+        dumpType(o, fieldType);
+        o << " " << translateIdentifier(fieldName, "const", false) << " = ";
         dumpConstantValue(o, i);
         o << ";\n";
 	}		
@@ -2447,7 +2478,7 @@ sal_Bool ConstantsType::hasConstants()
 }	
 
 sal_Bool ConstantsType::dumpHxxFile(
-    FileStream& o, codemaker::cppumaker::Includes & includes)
+	FileStream& o, codemaker::cppumaker::Includes & includes)
 	throw( CannotDumpException )
 {
 	sal_Bool bSpecialDefine = sal_True;
@@ -2489,6 +2520,7 @@ ModuleType::~ModuleType()
 bool ModuleType::dumpFiles(
     CppuOptions * options, rtl::OString const & outPath)
 {
+	aIncludes.insert(aIncludes.end(), m_typeName);
     rtl::OString tmpName(m_typeName);
     if (tmpName.equals("/")) {
         tmpName = "global";
@@ -2496,7 +2528,7 @@ bool ModuleType::dumpFiles(
         tmpName += "/" + m_typeName.copy(m_typeName.lastIndexOf('/') + 1);
     }
     return dumpFile(options, ".hdl", tmpName, outPath)
-        && dumpFile(options, ".hpp", tmpName, outPath);
+		&& dumpFile(options, ".hpp", tmpName, outPath);
 }
 
 //*************************************************************************
@@ -2551,7 +2583,7 @@ sal_Bool StructureType::dumpHFile(
 	  << "class Type;\n} } } }\n\n";
 
     dumpTemplateHead(o);
-	o << "inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
+	o << inline_str << " const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
 	dumpType(o, m_typeName, sal_True, sal_False); 
     dumpTemplateParameters(o);
 	o << "* );\n\n";
@@ -2585,10 +2617,10 @@ sal_Bool StructureType::dumpDeclaration(
     }
     o << " {\n";
     inc();
-    o << indent() << "inline " << m_name << "() SAL_THROW(());\n";
+    o << indent() << inline_str << " " << m_name << "() SAL_THROW(());\n";
     sal_uInt16 members = m_reader.getFieldCount();
     if (members > 0 || getInheritedMemberCount() > 0) {
-        o << "\n" << indent() << "inline " << m_name << "(";
+		o << "\n" << indent() << inline_str << " " << m_name << "(";
         bool prev = dumpSuperMember(o, base, true);
         for (sal_uInt16 i = 0; i < members; ++i) {
             if (prev) {
@@ -2652,7 +2684,7 @@ sal_Bool StructureType::dumpDeclaration(
 }
 
 sal_Bool StructureType::dumpHxxFile(
-    FileStream& o, codemaker::cppumaker::Includes & includes)
+	FileStream& o, codemaker::cppumaker::Includes & includes)
 	throw( CannotDumpException )
 {
 	OString headerDefine(dumpHeaderDefine(o, "HPP"));
@@ -2667,7 +2699,7 @@ sal_Bool StructureType::dumpHxxFile(
 	o << "\n";
 
     dumpTemplateHead(o);
-	o << "inline " << m_name;
+	o << inline_str << " " << m_name;
     dumpTemplateParameters(o);
     o << "::" << m_name << "() SAL_THROW( () )\n";
 	inc();
@@ -2718,7 +2750,7 @@ sal_Bool StructureType::dumpHxxFile(
 	if (fieldCount > 0 || getInheritedMemberCount() > 0)
 	{
         dumpTemplateHead(o);
-		o << "inline " << m_name;
+		o << inline_str << " " << m_name;
         dumpTemplateParameters(o);
         o << "::" << m_name << "(";
 
@@ -2792,7 +2824,11 @@ sal_Bool StructureType::dumpHxxFile(
     }
 
 	o << "\n";
+	if (do_internal)
+		o << "// struct no #ifdef CPPU_INTERNAL_IMPL\n";
 	dumpGetCppuType(o);
+	if (do_internal)
+		o << "// struct no #endif // CPPU_INTERNAL_IMPL\n";
 
 	o << "\n#endif // "<< headerDefine << "\n";
 
@@ -3256,7 +3292,7 @@ sal_Bool ExceptionType::dumpHFile(
 	o << "\nnamespace com { namespace sun { namespace star { namespace uno {\n"
 	  << "class Type;\n} } } }\n\n";
 
-	o << "inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
+	o << inline_str << " const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
 	dumpType(o, m_typeName, sal_True, sal_False); 
 	o << "* ) SAL_THROW( () );\n\n";
 
@@ -3265,6 +3301,16 @@ sal_Bool ExceptionType::dumpHFile(
 	return sal_True;
 }
 
+bool
+ExceptionType::dumpFiles(CppuOptions * options, rtl::OString const & outPath)
+{
+	OString aTypeName = scopedName (OString(), m_typeName);
+	aExceptionNames.insert(aExceptionNames.end(), aTypeName);
+
+	aIncludes.insert(aIncludes.end(), m_typeName);
+	return CppuType::dumpFiles (options, outPath);
+}
+
 sal_Bool ExceptionType::dumpDeclaration(FileStream& o)
 	throw( CannotDumpException )
 {
@@ -3280,7 +3326,7 @@ sal_Bool ExceptionType::dumpDeclaration(
 		
 	o << "\n{\npublic:\n";
 	inc();
-	o << indent() << "inline CPPU_GCC_DLLPRIVATE " << m_name
+	o << indent() << inline_str << " CPPU_GCC_DLLPRIVATE " << m_name
       << "() SAL_THROW( () );\n\n";
 		
 	sal_uInt16 		fieldCount = m_reader.getFieldCount();
@@ -3291,7 +3337,7 @@ sal_Bool ExceptionType::dumpDeclaration(
 		
 	if (fieldCount > 0 || getInheritedMemberCount() > 0)
 	{
-		o << indent() << "inline CPPU_GCC_DLLPRIVATE " << m_name << "(";
+		o << indent() << inline_str << " CPPU_GCC_DLLPRIVATE " << m_name << "(";
 			
 		sal_Bool superHasMember = dumpSuperMember(o, superType, sal_True);
 			
@@ -3318,10 +3364,10 @@ sal_Bool ExceptionType::dumpDeclaration(
 		}		
 		o << ") SAL_THROW( () );\n\n";
 	}
-    o << indent() << "inline CPPU_GCC_DLLPRIVATE " << m_name << "(" << m_name
+    o << indent() << inline_str << " CPPU_GCC_DLLPRIVATE " << m_name << "(" << m_name
       << " const &);\n\n"
-      << indent() << "inline CPPU_GCC_DLLPRIVATE ~" << m_name << "();\n\n"
-      << indent() << "inline CPPU_GCC_DLLPRIVATE " << m_name << " & operator =("
+      << indent() << inline_str << " CPPU_GCC_DLLPRIVATE ~" << m_name << "();\n\n"
+      << indent() << inline_str << " CPPU_GCC_DLLPRIVATE " << m_name << " & operator =("
       << m_name << " const &);\n\n";
 
 	for (i=0; i < fieldCount; i++)
@@ -3355,7 +3401,7 @@ sal_Bool ExceptionType::dumpDeclaration(
 }
 
 sal_Bool ExceptionType::dumpHxxFile(
-    FileStream& o, codemaker::cppumaker::Includes & includes)
+	FileStream& o, codemaker::cppumaker::Includes & includes)
 	throw( CannotDumpException )
 {
 	OString headerDefine(dumpHeaderDefine(o, "HPP"));
@@ -3365,12 +3411,17 @@ sal_Bool ExceptionType::dumpHxxFile(
 	includes.dump(o, &m_typeName);
 	o << "\n";
 	
+	if (do_internal) {
+		o << "#ifdef CPPU_INTERNAL_IMPL\n";
+		o << "// ExceptionType::dumpHxxFile impl\n";
+	}
+
     if (codemaker::cppumaker::dumpNamespaceOpen(o, m_typeName, false)) {
         o << "\n";
     }
 	o << "\n";
 
-	o << "inline " << m_name << "::" << m_name << "() SAL_THROW( () )\n";
+	o << inline_str << " " << m_name << "::" << m_name << "() SAL_THROW( () )\n";
 	inc();
 	OString superType;
     if (m_reader.getSuperTypeCount() >= 1) {
@@ -3426,7 +3477,7 @@ sal_Bool ExceptionType::dumpHxxFile(
 
 	if (fieldCount > 0 || getInheritedMemberCount() > 0)
 	{
-		o << indent() << "inline " << m_name << "::" << m_name << "(";
+		o << indent() << inline_str << " " << m_name << "::" << m_name << "(";
 
 		sal_Bool superHasMember = dumpSuperMember(o, superType, sal_True);
 
@@ -3539,6 +3590,8 @@ sal_Bool ExceptionType::dumpHxxFile(
 
 	o << "\n";
 	dumpGetCppuType(o);
+	if (do_internal)
+		o << "\n#endif // CPPU_INTERNAL_IMPL\n";
 
 	o << "\n#endif // "<< headerDefine << "\n";
 	return sal_True;
@@ -3638,7 +3691,7 @@ sal_Bool EnumType::dumpHFile(
 	o << "\nnamespace com { namespace sun { namespace star { namespace uno {\n"
 	  << "class Type;\n} } } }\n\n";
 
-	o << "inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
+	o << inline_str << " const ::com::sun::star::uno::Type& SAL_CALL getCppuType( ";
 	dumpType(o, m_typeName, sal_True, sal_False); 
 	o << "* ) SAL_THROW( () );\n\n";
 
@@ -3686,7 +3739,7 @@ sal_Bool EnumType::dumpDeclaration(FileS
 }
 
 sal_Bool EnumType::dumpHxxFile(
-    FileStream& o, codemaker::cppumaker::Includes & includes)
+	FileStream& o, codemaker::cppumaker::Includes & includes)
 	throw( CannotDumpException )
 {
 	OString headerDefine(dumpHeaderDefine(o, "HPP"));
@@ -3696,7 +3749,11 @@ sal_Bool EnumType::dumpHxxFile(
     includes.dump(o, &m_typeName);
 	o << "\n";
 
+	if (do_internal)
+		o << "// enum: no #ifdef CPPU_INTERNAL_IMPL\n";
 	dumpGetCppuType(o);
+	if (do_internal)
+		o << "// enum no #endif // CPPU_INTERNAL_IMPL\n";
 
 	o << "\n#endif // "<< headerDefine << "\n";
 	return sal_True;
@@ -3862,7 +3919,7 @@ sal_Bool TypeDefType::dumpDeclaration(Fi
 }
 
 sal_Bool TypeDefType::dumpHxxFile(
-    FileStream& o, codemaker::cppumaker::Includes & includes)
+	FileStream& o, codemaker::cppumaker::Includes & includes)
 	throw( CannotDumpException )
 {
 	OString headerDefine(dumpHeaderDefine(o, "HPP"));
@@ -3890,7 +3947,8 @@ sal_Bool ConstructiveType::dumpHFile(
 bool ConstructiveType::dumpFiles(
     CppuOptions * options, rtl::OString const & outPath)
 {
-    return dumpFile(options, ".hpp", m_typeName, outPath);
+	aIncludes.insert(aIncludes.end(), m_typeName);
+	return dumpFile(options, ".hpp", m_typeName, outPath);
 }
 
 //*************************************************************************
@@ -3921,8 +3979,69 @@ bool ServiceType::isSingleInterfaceBased
     return m_reader.getSuperTypeCount() == 1;
 }
 
+void ServiceType::dumpCtorSignature(FileStream & o,
+									const OString & cppName,
+									bool impl, int i)
+		throw (CannotDumpException)
+{
+	OString aNameSpace;
+	if (impl)
+		aNameSpace = cppName + "::";
+
+	rtl::OString baseName(
+            rtl::OUStringToOString(
+					m_reader.getSuperTypeName(0), RTL_TEXTENCODING_UTF8));
+	rtl::OString scopedBaseName(scopedName(rtl::OString(), baseName));
+
+	o << indent() << (impl ? "" : "static ");
+	if (isDefaultConstructor(i)) {
+		o << "::com::sun::star::uno::Reference< "
+		  << scopedBaseName << " > "
+		  << aNameSpace
+		  << translateIdentifier("create", "method", false, &cppName)
+		  << ("(::com::sun::star::uno::Reference<"
+			  " ::com::sun::star::uno::XComponentContext > const &"
+			  " the_context)");
+	} else {
+		o << "::com::sun::star::uno::Reference< "
+		  << scopedBaseName << " > "
+		  << aNameSpace
+		  << translateIdentifier(
+				  rtl::OUStringToOString(
+                          m_reader.getMethodName(i), RTL_TEXTENCODING_UTF8),
+				  "method", false, &cppName)
+		  << ("(::com::sun::star::uno::Reference<"
+			  " ::com::sun::star::uno::XComponentContext > const &"
+			  " the_context");
+		sal_uInt16 params = m_reader.getMethodParameterCount(i);
+		for (sal_uInt16 j = 0; j < params; ++j) {
+			o << ", ";
+			rtl::OStringBuffer buf;
+			if ((m_reader.getMethodParameterFlags(i, j) & RT_PARAM_REST)
+				!= 0)
+			{
+				buf.append(RTL_CONSTASCII_STRINGPARAM("[]"));
+			}
+			buf.append(
+					rtl::OUStringToOString(
+                            m_reader.getMethodParameterTypeName(i, j),
+                            RTL_TEXTENCODING_UTF8));
+			rtl::OString type(buf.makeStringAndClear());
+			bool byRef = passByReference(type);
+			dumpType(o, type, byRef, byRef);
+			o << " "
+			  << translateIdentifier(
+					  rtl::OUStringToOString(
+                              m_reader.getMethodParameterName(i, j),
+                              RTL_TEXTENCODING_UTF8),
+					  "param", false);
+		}
+		o << ")\n";
+	}
+}
+
 sal_Bool ServiceType::dumpHxxFile(
-    FileStream & o, codemaker::cppumaker::Includes & includes)
+	FileStream & o, codemaker::cppumaker::Includes & includes)
     throw (CannotDumpException)
 {
     sal_uInt16 ctors = m_reader.getMethodCount();
@@ -3983,27 +4102,40 @@ sal_Bool ServiceType::dumpHxxFile(
     o << "\n";
     includes.dump(o, 0);
     o << "\n";
+
     if (codemaker::cppumaker::dumpNamespaceOpen(o, m_typeName, false)) {
         o << "\n";
     }
     o << "\nclass " << cppName << " {\n";
     inc();
     if (ctors > 0) {
+        o << "public:\n";
+        for (sal_uInt16 i = 0; i < ctors; ++i) {
+			dumpCtorSignature (o, cppName, false, i);
+			o << ";\n";
+		}
+	}
+    o << "private:\n";
+    o << indent() << cppName << "(); // not implemented\n"
+      << indent() << cppName << "(" << cppName << " &); // not implemented\n"
+      << indent() << "~" << cppName << "(); // not implemented\n"
+      << indent() << "void operator =(" << cppName << "); // not implemented\n";
+    dec();
+    o << "};\n\n";
+
+    if (ctors > 0) {
+		if (do_internal)
+			o << "#ifdef CPPU_INTERNAL_IMPL\n";
         rtl::OString fullName(m_typeName.replace('/', '.'));
         rtl::OString baseName(
             rtl::OUStringToOString(
                 m_reader.getSuperTypeName(0), RTL_TEXTENCODING_UTF8));
         rtl::OString fullBaseName(baseName.replace('/', '.'));
         rtl::OString scopedBaseName(scopedName(rtl::OString(), baseName));
-        o << "public:\n";
         for (sal_uInt16 i = 0; i < ctors; ++i) {
-            if (isDefaultConstructor(i)) {
-                o << indent() << "static ::com::sun::star::uno::Reference< "
-                  << scopedBaseName << " > "
-                  << translateIdentifier("create", "method", false, &cppName)
-                  << ("(::com::sun::star::uno::Reference<"
-                      " ::com::sun::star::uno::XComponentContext > const &"
-                      " the_context) {\n");
+			dumpCtorSignature (o, cppName, true, i);
+			if (isDefaultConstructor(i)) {
+				o << "{\n";
                 inc();
                 o << indent()
                   << ("::com::sun::star::uno::Reference<"
@@ -4059,40 +4191,10 @@ sal_Bool ServiceType::dumpHxxFile(
                 dec();
                 o << indent() << "}\n\n";
             } else {
-                o << indent() << "static ::com::sun::star::uno::Reference< "
-                  << scopedBaseName << " > "
-                  << translateIdentifier(
-                      rtl::OUStringToOString(
-                          m_reader.getMethodName(i), RTL_TEXTENCODING_UTF8),
-                      "method", false, &cppName)
-                  << ("(::com::sun::star::uno::Reference<"
-                      " ::com::sun::star::uno::XComponentContext > const &"
-                      " the_context");
-                sal_uInt16 params = m_reader.getMethodParameterCount(i);
-                bool rest = hasRestParameter(i);
-                for (sal_uInt16 j = 0; j < params; ++j) {
-                    o << ", ";
-                    rtl::OStringBuffer buf;
-                    if ((m_reader.getMethodParameterFlags(i, j) & RT_PARAM_REST)
-                        != 0)
-                    {
-                        buf.append(RTL_CONSTASCII_STRINGPARAM("[]"));
-                    }
-                    buf.append(
-                        rtl::OUStringToOString(
-                            m_reader.getMethodParameterTypeName(i, j),
-                            RTL_TEXTENCODING_UTF8));
-                    rtl::OString type(buf.makeStringAndClear());
-                    bool byRef = passByReference(type);
-                    dumpType(o, type, byRef, byRef);
-                    o << " "
-                      << translateIdentifier(
-                          rtl::OUStringToOString(
-                              m_reader.getMethodParameterName(i, j),
-                              RTL_TEXTENCODING_UTF8),
-                          "param", false);
-                }
-                o << ") {\n";
+				bool rest = hasRestParameter(i);
+				sal_uInt16 params = m_reader.getMethodParameterCount(i);
+
+				o << "{\n";
                 inc();
                 o << indent()
                   << ("::com::sun::star::uno::Reference<"
@@ -4216,14 +4318,10 @@ sal_Bool ServiceType::dumpHxxFile(
                 o << indent() << "}\n\n";
             }
         }
+		if (do_internal)
+			o << "#endif // CPPU_INTERNAL_IMPL\n";
     }
-    o << "private:\n";
-    o << indent() << cppName << "(); // not implemented\n"
-      << indent() << cppName << "(" << cppName << " &); // not implemented\n"
-      << indent() << "~" << cppName << "(); // not implemented\n"
-      << indent() << "void operator =(" << cppName << "); // not implemented\n";
-    dec();
-    o << "};\n\n";
+
     if (codemaker::cppumaker::dumpNamespaceClose(o, m_typeName, false)) {
         o << "\n";
     }
@@ -4282,7 +4380,7 @@ bool SingletonType::isInterfaceBased() {
 }
 
 sal_Bool SingletonType::dumpHxxFile(
-    FileStream & o, codemaker::cppumaker::Includes & includes)
+	FileStream & o, codemaker::cppumaker::Includes & includes)
     throw (CannotDumpException)
 {
     rtl::OString cppName(translateIdentifier(m_name, "singleton", isGlobal()));
@@ -4304,6 +4402,12 @@ sal_Bool SingletonType::dumpHxxFile(
     includes.addRtlUstringHxx();
     includes.dump(o, 0);
     o << "\n";
+
+	if (do_internal) {
+		o << "#ifdef CPPU_INTERNAL_IMPL\n";
+		o << "// SingletonType::dumpHxxFile impl\n";
+	}
+
     if (codemaker::cppumaker::dumpNamespaceOpen(o, m_typeName, false)) {
         o << "\n";
     }
@@ -4340,6 +4444,8 @@ sal_Bool SingletonType::dumpHxxFile(
     if (codemaker::cppumaker::dumpNamespaceClose(o, m_typeName, false)) {
         o << "\n";
     }
+	if (do_internal)
+		o << "\n#endif // CPPU_INTERNAL_IMPL\n";
     o << "\n#endif // "<< headerDefine << "\n";
     return true;
 }
Index: codemaker/source/cppumaker/cpputype.hxx
===================================================================
RCS file: /cvs/udk/codemaker/source/cppumaker/cpputype.hxx,v
retrieving revision 1.9
diff -u -p -u -r1.9 cpputype.hxx
--- codemaker/source/cppumaker/cpputype.hxx	10 Jan 2006 15:46:47 -0000	1.9
+++ codemaker/source/cppumaker/cpputype.hxx	20 Mar 2006 15:07:19 -0000
@@ -61,6 +61,12 @@ enum CppuTypeDecl
 class CppuOptions;
 class FileStream;
 
+#include <list>
+extern ::std::list<rtl::OString> aExceptionNames;
+extern ::std::list<rtl::OString> aIncludes;
+extern const char *inline_str;
+extern bool do_internal;
+
 class CppuType
 {
 public:
@@ -300,6 +306,7 @@ public:
 
 	virtual ~ExceptionType();
 
+    bool        dumpFiles(CppuOptions * options, rtl::OString const & outPath);
 	sal_Bool	dumpDeclaration(FileStream& o) throw( CannotDumpException );
 	sal_Bool	dumpHFile(FileStream& o, codemaker::cppumaker::Includes & includes) throw( CannotDumpException );
 	sal_Bool	dumpHxxFile(FileStream& o, codemaker::cppumaker::Includes & includes) throw( CannotDumpException );
@@ -367,6 +374,11 @@ public:
         throw (CannotDumpException);
 
 private:
+
+	void dumpCtorSignature(FileStream & o, 
+						   const rtl::OString & cppName,
+						   bool impl, int i) throw (CannotDumpException);
+
     virtual void addSpecialDependencies();
 
     bool isDefaultConstructor(sal_uInt16 ctorIndex) const;
