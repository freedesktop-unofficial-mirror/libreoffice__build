diff -u -r sc/inc/cell.hxx sc/inc/cell.hxx
--- sc/inc/cell.hxx	2006-07-04 12:18:43.000000000 +0100
+++ sc/inc/cell.hxx	2006-07-04 18:22:00.000000000 +0100
@@ -83,10 +83,10 @@
 class ScBaseCell
 {
 protected:
-	ScPostIt*		pNote;
 	SvtBroadcaster*	pBroadcaster;
 	USHORT			nTextWidth;
-	BYTE			eCellType;		// enum CellType - BYTE spart Speicher
+	BYTE			eCellType : 7;		// enum CellType - BYTE spart Speicher
+	bool            bSpecial : 1;
 	BYTE			nScriptType;
 
 public: // fuer Idle-Berechnung
@@ -104,13 +104,13 @@
 	inline			ScBaseCell( const ScBaseCell& rBaseCell, ScDocument* pDoc );
 
 	ScBaseCell*		Clone(ScDocument* pDoc) const;
-	void			Delete();						// simulierter virtueller Destructor
+	void			Delete(ScDocument* pDoc);						// simulierter virtueller Destructor
 	CellType		GetCellType() const;
 
-	void			SetNote( const ScPostIt& rNote );
-	BOOL			GetNote( ScPostIt& rNote ) const;
-	const ScPostIt*	GetNotePtr() const;
-	inline void		DeleteNote();
+	void			SetNote( const ScPostIt& rNote, ScDocument* pDoc );
+	BOOL			GetNote( ScPostIt& rNote, ScDocument* pDoc ) const;
+	const ScPostIt*	GetNotePtr( ScDocument *pDoc) const;
+	void	    	DeleteNote(ScDocument* pDoc);
 
 	inline SvtBroadcaster*	GetBroadcaster() const;
 	void			SetBroadcaster(SvtBroadcaster* pNew);
@@ -461,7 +461,6 @@
 //		ScBaseCell
 
 inline ScBaseCell::ScBaseCell( CellType eNewType ) :
-    pNote( NULL ),
     pBroadcaster( NULL ),
     nTextWidth( TEXTWIDTH_DIRTY ),
     eCellType( eNewType ),
@@ -475,27 +474,20 @@
     eCellType( rBaseCell.eCellType ),
     nScriptType( SC_SCRIPTTYPE_UNKNOWN )
 {
-	if (rBaseCell.pNote)
-		pNote = new ScPostIt( *rBaseCell.pNote, pDoc );
-	else
-		pNote = NULL;
-}
+		const ScPostIt* tmp = rBaseCell.GetNotePtr (pDoc);
+		fprintf (stderr, "We are copying here... %s\n", rBaseCell.GetStringData().c_str());
 
+		if (tmp) {
+				fprintf (stderr, "We decided it was worth copying...\n");
 
-inline CellType ScBaseCell::GetCellType() const
-{
-	return (CellType)eCellType;
+				SetNote (*tmp, pDoc);
+		}
 }
 
-inline const ScPostIt* ScBaseCell::GetNotePtr() const
-{
-	return pNote;
-}
 
-inline void ScBaseCell::DeleteNote()
+inline CellType ScBaseCell::GetCellType() const
 {
-	delete pNote;
-	pNote = NULL;
+	return (CellType)eCellType;
 }
 
 inline SvtBroadcaster* ScBaseCell::GetBroadcaster() const
@@ -609,12 +602,13 @@
 inline ScNoteCell::ScNoteCell( const ScNoteCell& rScNoteCell, ScDocument* pDoc ) :
 	ScBaseCell( rScNoteCell, pDoc )
 {
+		
 }
 
 inline ScNoteCell::ScNoteCell( const ScPostIt& rNote ) :
 	ScBaseCell( CELLTYPE_NOTE )
 {
-	ScBaseCell::SetNote(rNote);
+	ScBaseCell::SetNote(rNote, rNote.GetDocument());
 }
 
 inline ScBaseCell* ScNoteCell::Clone(ScDocument* pDoc) const
diff -u -r sc/inc/column.hxx sc/inc/column.hxx
--- sc/inc/column.hxx	2006-06-25 21:53:31.000000000 +0100
+++ sc/inc/column.hxx	2006-07-04 09:21:13.000000000 +0100
@@ -195,6 +195,7 @@
 
 	USHORT		GetBlockMatrixEdges( SCROW nRow1, SCROW nRow2, USHORT nMask ) const;
 	BOOL		HasSelectionMatrixFragment(const ScMarkData& rMark) const;
+	BOOL        CellVisible( const ScBaseCell* pCell ) const;
 
 				// Daten oder Attribute:
 	SCROW		GetFirstEntryPos() const;
diff -u -r sc/inc/dociter.hxx sc/inc/dociter.hxx
--- sc/inc/dociter.hxx	2005-09-08 18:32:38.000000000 +0100
+++ sc/inc/dociter.hxx	2006-07-04 09:43:00.000000000 +0100
@@ -381,6 +381,7 @@
 
 	ScBaseCell*		GetNext( SCCOL& rCol, SCROW& rRow );
 	BOOL			ReturnNext( SCCOL& rCol, SCROW& rRow );
+	ScDocument*     GetDocument() const { return pDoc; }
 
 private:
 	void			Advance();
diff -u -r sc/inc/document.hxx sc/inc/document.hxx
--- sc/inc/document.hxx	2006-06-25 21:53:46.000000000 +0100
+++ sc/inc/document.hxx	2006-07-03 17:27:26.000000000 +0100
@@ -100,6 +100,7 @@
 class Window;
 class XColorTable;
 class List;
+class ScNoteTracker;
 
 class ScAutoFormatData;
 class ScBaseCell;
@@ -250,6 +251,9 @@
 friend class ScAttrRectIterator;
 friend class ScPivot;
 
+public:
+	ScNoteTracker* pNoteTracker;
+
 private:
 	::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > xServiceManager;
 
diff -u -r sc/inc/postit.hxx sc/inc/postit.hxx
--- sc/inc/postit.hxx	2005-09-08 18:48:49.000000000 +0100
+++ sc/inc/postit.hxx	2006-07-03 17:40:57.000000000 +0100
@@ -108,6 +108,7 @@
 	const String&		GetAuthor() const { return maStrAuthor; }
 	BOOL			IsShown()   const { return mbShown;     }
 
+    ScDocument*     GetDocument() const { return mpDoc; };
 	void		        SetEditTextObject( const EditTextObject* pTextObj);
 	void			SetText( const String& rText ); 
 	void			SetDate( const String& rNew ) 	{ maStrDate   = rNew; }
diff -u -r sc/source/core/data/cell.cxx sc/source/core/data/cell.cxx
--- sc/source/core/data/cell.cxx	2006-06-25 21:53:31.000000000 +0100
+++ sc/source/core/data/cell.cxx	2006-07-04 17:33:24.000000000 +0100
@@ -43,6 +43,7 @@
 #endif
 
 #include <svtools/zforlist.hxx>
+#include <hash_map>
 
 #include "scitems.hxx"
 #include "attrib.hxx"
@@ -106,9 +107,26 @@
 #endif
 
 // -----------------------------------------------------------------------
+class ScNoteTracker
+{
+		struct foo
+		{
+				size_t operator () (const ScBaseCell *cell) const
+						{
+								return (size_t) cell;
+						}
+		};
+
 
+public:
+		std::hash_map< const ScBaseCell *, ScPostIt *, foo > aNotes;
+		ScNoteTracker() { aNotes.clear(); }
+};
+
+// -----------------------------------------------------------------------
 ScBaseCell* ScBaseCell::Clone(ScDocument* pDoc) const
 {
+		fprintf (stderr, "Cloneing a cell...\n");
 	switch (eCellType)
 	{
 		case CELLTYPE_VALUE:
@@ -130,14 +148,17 @@
 
 ScBaseCell::~ScBaseCell()
 {
-	delete pNote;
+		fscanf (stdin, "");
+	if (bSpecial)
+		fprintf (stderr, "Darstardly error - not released hash ptr\n");
 	delete pBroadcaster;
 	DBG_ASSERT( eCellType == CELLTYPE_DESTROYED, "BaseCell Destructor" );
 }
 
-void ScBaseCell::Delete()
+void ScBaseCell::Delete (ScDocument* pDoc)
 {
-	DELETEZ(pNote);
+	DeleteNote (pDoc);
+
 	switch (eCellType)
 	{
 		case CELLTYPE_VALUE:
@@ -161,27 +182,80 @@
 	}
 }
 
-void ScBaseCell::SetNote( const ScPostIt& rNote )
+void ScBaseCell::DeleteNote(ScDocument* pDoc)
 {
-	if (!rNote.IsEmpty())
-	{
-		if (!pNote)
-			pNote = new ScPostIt(rNote);
-		else
-			*pNote = rNote;
+		fprintf (stderr, "Deleting a postit (%d) [%p]...\n",
+				 bSpecial, this);
+		if (bSpecial) {
+				delete pDoc->pNoteTracker->aNotes [this];
+				pDoc->pNoteTracker->aNotes.erase (this);
+				bSpecial = false;
+		}
+}
+
+void ScBaseCell::SetNote( const ScPostIt& rNote, ScDocument* pDoc )
+{
+		if (!pDoc->pNoteTracker) {
+				pDoc->pNoteTracker = new ScNoteTracker();
+				fprintf (stderr, "yo yo, this be me, in SetNote...\n");
+		}
+		if (!rNote.IsEmpty())
+		{
+			if (!bSpecial || !pDoc->pNoteTracker->aNotes [this]) {
+					fprintf (stderr, "Creating a new ScPostIt...%d \n", bSpecial);
+					bSpecial = true;
+					fprintf (stderr, "Creating a new ScPostIt... %d\n", bSpecial);
+					pDoc->pNoteTracker->aNotes [this] = new ScPostIt(rNote);
+			} else {
+					fprintf (stderr, "Using a pre-created ScPostIt... %p\n", this);
+					bSpecial = true;
+					*(pDoc->pNoteTracker->aNotes [this]) = rNote;
+			}
+			fprintf (stderr, "Inserted note ptr %p\n", this);
+	}
+	else {
+			DeleteNote (pDoc);
 	}
-	else
-		DELETEZ(pNote);
 }
 
-BOOL ScBaseCell::GetNote( ScPostIt& rNote ) const
+const ScPostIt* ScBaseCell::GetNotePtr ( ScDocument* pDoc ) const
 {
-	if ( pNote )
+		if (!pDoc->pNoteTracker) {
+				fprintf (stderr, "Get failed to find hash...\n");
+				pDoc->pNoteTracker = new ScNoteTracker();
+		}
+		fprintf (stderr, "GetNotePtr ran... %p\n", this);
+
+		ScPostIt *tmp = NULL;
+		if (bSpecial) {
+				tmp = pDoc->pNoteTracker->aNotes [this];
+		}
+		return tmp;
+}
+
+BOOL ScBaseCell::GetNote( ScPostIt& rNote, 
+						  ScDocument* pDoc ) const
+{
+		if (!pDoc->pNoteTracker) {
+				fprintf (stderr, "Get failed to find hash...");
+				pDoc->pNoteTracker = new ScNoteTracker();
+		}
+		fprintf (stderr, "GetNote ran... special = %d\n", bSpecial);
+		const ScPostIt *tmp = GetNotePtr (pDoc);
+
+		if (tmp)
+				rNote = *tmp;
+		else
+				rNote.Clear();
+
+		return ( tmp != NULL );
+/*	if ( pNote )
 		rNote = *pNote;
 	else
 		rNote.Clear();
 
 	return ( pNote != NULL );
+*/
 }
 
 ScBaseCell* ScBaseCell::CreateTextCell( const String& rString, ScDocument* pDoc )
@@ -194,8 +268,11 @@
 
 void ScBaseCell::LoadNote( SvStream& rStream, ScDocument* pDoc )
 {
-	pNote = new ScPostIt(pDoc);
+		fprintf (stderr, "LoadNote ran... special = %d\n", bSpecial);
+
+/*	pNote = new ScPostIt(pDoc);
 	rStream >> *pNote;
+*/
 }
 
 void ScBaseCell::SetBroadcaster(SvtBroadcaster* pNew)
@@ -2062,7 +2139,3 @@
 	eCellType = CELLTYPE_DESTROYED;
 }
 #endif
-
-
-
-
diff -u -r sc/source/core/data/column2.cxx sc/source/core/data/column2.cxx
--- sc/source/core/data/column2.cxx	2006-06-25 21:53:26.000000000 +0100
+++ sc/source/core/data/column2.cxx	2006-07-04 09:31:37.000000000 +0100
@@ -84,11 +84,12 @@
 #define SC_ROT_BREAK_FACTOR		6
 
 // -----------------------------------------------------------------------
-
+/*
 inline BOOL CellVisible( const ScBaseCell* pCell )
 {
-	return ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() );
+		return ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr(pDocument) );
 }
+*/
 
 inline BOOL IsAmbiguousScript( BYTE nScript )
 {
@@ -453,7 +454,7 @@
 	SCSIZE i;
 
 	for (i=0; i<nCount; i++)
-		if ( pItems[i].pCell->GetNotePtr() && pItems[i].nRow<=nMaxRow )
+		if ( pItems[i].pCell->GetNotePtr(pDocument) && pItems[i].nRow<=nMaxRow )
 			++nNoteCount;
 
 	return nNoteCount;
@@ -472,7 +473,7 @@
 
 		nNoteCount = 0;
 		for (i=0; i<nCount; i++)
-			if ( pItems[i].pCell->GetNotePtr() && pItems[i].nRow<=nSaveMaxRow &&
+			if ( pItems[i].pCell->GetNotePtr(pDocument) && pItems[i].nRow<=nSaveMaxRow &&
 					!lcl_RemoveThis( pDocument, nCol, pItems[i].nRow, nTab ) )
 				++nNoteCount;
 	}
@@ -495,7 +496,7 @@
 		SCROW nRow = pItems[i].nRow;
 		if ( !bRemoveAny || !lcl_RemoveThis( pDocument, nCol, nRow, nTab ) )
 		{
-			const ScPostIt* pNote = pItems[i].pCell->GetNotePtr();
+			const ScPostIt* pNote = pItems[i].pCell->GetNotePtr(pDocument);
 			if ( pNote && nRow <= nSaveMaxRow )
 			{
 				rStream << nDestPos;
@@ -1496,8 +1497,8 @@
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
-				if (pOldCell->GetNotePtr())
-					pNewCell->SetNote( *pOldCell->GetNotePtr() );
+				if (pOldCell->GetNotePtr(pDocument))
+						pNewCell->SetNote( *pOldCell->GetNotePtr(pDocument), pDocument );
 				pItems[i].pCell = pNewCell;
 				delete pOldCell;
 			}
@@ -1571,8 +1572,8 @@
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
-				if (pOldCell->GetNotePtr())
-					pNewCell->SetNote( *pOldCell->GetNotePtr() );
+				if (pOldCell->GetNotePtr(pDocument))
+						pNewCell->SetNote( *pOldCell->GetNotePtr(pDocument), pDocument );
 				pItems[i].pCell = pNewCell;
 				delete pOldCell;
 			}
@@ -1721,7 +1722,7 @@
 		for (i=0; i<nCount && !bVisData; i++)
 		{
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr(pDocument)) )
 				bVisData = TRUE;
 		}
 		return !bVisData;
@@ -1758,7 +1759,7 @@
 		{
 			--i;
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr(pDocument)) )
 			{
 				bFound = TRUE;
 				nRet = pItems[i].nRow;
@@ -1778,7 +1779,7 @@
 		for (i=0; i<nCount && !bFound; i++)
 		{
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr(pDocument)) )
 			{
 				bFound = TRUE;
 				nRet = pItems[i].nRow;
@@ -2160,7 +2161,7 @@
 
 			if (!pBC->HasListeners())
 			{
-				if (pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetNotePtr())
+				if (pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetNotePtr(pDocument))
 					DeleteAtIndex(nIndex);
 				else
 					pCell->SetBroadcaster(NULL);
diff -u -r sc/source/core/data/column3.cxx sc/source/core/data/column3.cxx
--- sc/source/core/data/column3.cxx	2006-06-25 21:53:45.000000000 +0100
+++ sc/source/core/data/column3.cxx	2006-07-04 16:59:40.000000000 +0100
@@ -90,8 +90,8 @@
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
 			}
-			if (pOldCell->GetNotePtr() && !pNewCell->GetNotePtr())
-				pNewCell->SetNote( *pOldCell->GetNotePtr() );
+			if (pOldCell->GetNotePtr(pDocument) && !pNewCell->GetNotePtr(pDocument))
+				pNewCell->SetNote( *pOldCell->GetNotePtr(pDocument), pDocument );
 			if ( pOldCell->GetCellType() == CELLTYPE_FORMULA && !pDocument->IsClipOrUndo() )
 			{
 				pOldCell->EndListeningTo( pDocument );
@@ -99,7 +99,7 @@
 				if ( nIndex >= nCount || pItems[nIndex].nRow != nRow )
 					Search(nRow, nIndex);
 			}
-			pOldCell->Delete();
+			pOldCell->Delete(pDocument);
 			pItems[nIndex].pCell = pNewCell;
 		}
 		else
@@ -229,7 +229,7 @@
 			//	Soll man hier den Speicher freigeben (delta)? Wird dann langsamer!
 		}
 		pCell->EndListeningTo( pDocument );
-		pCell->Delete();
+		pCell->Delete(pDocument);
 	}
 }
 
@@ -247,7 +247,7 @@
 	pItems[nCount].nRow = 0;
 	pItems[nCount].pCell = NULL;
 	pCell->EndListeningTo( pDocument );
-	pCell->Delete();
+	pCell->Delete(pDocument);
 }
 
 
@@ -256,7 +256,7 @@
 	if (pItems)
 	{
 		for (SCSIZE i = 0; i < nCount; i++)
-			pItems[i].pCell->Delete();
+			pItems[i].pCell->Delete(pDocument);
 		delete[] pItems;
 		pItems = NULL;
 	}
@@ -389,7 +389,7 @@
 	{
 		for ( i = nStartIndex; i <= nEndIndex; i++ )
 		{
-			const ScPostIt*	pNote = pItems[i].pCell->GetNotePtr();
+			const ScPostIt*	pNote = pItems[i].pCell->GetNotePtr(pDocument);
 			if ( pNote && pNote->IsShown() )
 			{
 				ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, pItems[i].nRow );
@@ -423,7 +423,7 @@
                 aHint.GetAddress().SetRow( pItems[i].nRow );
                 aHint.SetCell( pOldCell );
 				pDocument->Broadcast( aHint );
-				pOldCell->Delete();
+				pOldCell->Delete(pDocument);
 			}
 		}
 		delete pNoteCell;
@@ -479,7 +479,7 @@
 				{
 					if ((nDelFlag & IDF_NOTE) == 0)
 					{
-						const ScPostIt* pNote = pOldCell->GetNotePtr();
+						const ScPostIt* pNote = pOldCell->GetNotePtr(pDocument);
 						if (pNote)
 							pNoteCell = new ScNoteCell(*pNote);
 					}
@@ -518,14 +518,14 @@
 					pDocument->Broadcast( aHint );
 					if (eCellType != CELLTYPE_NOTE)
 						pOldCell->ForgetBroadcaster();
-					pOldCell->Delete();
+					pOldCell->Delete(pDocument);
 				}
 			}
 			else
 			{
 				if (nDelFlag & IDF_NOTE)
-					if (pItems[j].pCell->GetNotePtr())
-						pItems[j].pCell->DeleteNote();
+					if (pItems[j].pCell->GetNotePtr(pDocument))
+						pItems[j].pCell->DeleteNote(pDocument);
 				++j;
 			}
 		}
@@ -554,7 +554,7 @@
         aHint.SetCell( pOldCell );
 		pDocument->Broadcast( aHint );
 		pOldCell->ForgetBroadcaster();
-		pOldCell->Delete();
+		pOldCell->Delete(pDocument);
 	}
 
 	delete[] ppDelCells;
@@ -778,20 +778,20 @@
 			{
 				pNew = rColumn.CloneCell( i, nInsFlag, pDocument, ScAddress(nCol,(SCROW)nDestRow,nTab) );
 
-				if ( pNew && pNew->GetNotePtr())
+				if ( pNew && pNew->GetNotePtr(pDocument))
                 {
                     if((nInsFlag & IDF_NOTE) == 0 )
-					    pNew->DeleteNote();
+					    pNew->DeleteNote(pDocument);
                     else
                     {
                         // Set the cell note rectangle dimensions to default position 
                         // following the paste.
                         ScPostIt aCellNote(pDocument);
-                        if(pNew->GetNote(aCellNote))
+                        if(pNew->GetNote(aCellNote, pDocument))
                         {
                             Rectangle aRect = aCellNote.DefaultRectangle(ScAddress(nCol,nDestRow,nTab));
                             aCellNote.SetRectangle(aRect);
-                            pNew->SetNote(aCellNote);
+                            pNew->SetNote(aCellNote, pDocument);
                         }
                     }
                 }
@@ -916,21 +916,21 @@
 								// #33224# LeerStrings nicht kopieren
 						}
 					}
-					if ( pNew && pSource->GetNotePtr() && ( nFlags & IDF_NOTE ) )
+					if ( pNew && pSource->GetNotePtr(pDocument) && ( nFlags & IDF_NOTE ) )
                     {
                         // #i52342# the note must be constructed with the destination document pointer
-                        ScPostIt aNewNote( *pSource->GetNotePtr(), pDestDoc );
-                        pNew->SetNote( aNewNote );
+                        ScPostIt aNewNote( *pSource->GetNotePtr(pDocument), pDestDoc );
+                        pNew->SetNote( aNewNote, pDocument );
                     }
 				}
 			}
 			break;
 	}
 
-	if ( !pNew && pSource->GetNotePtr() && ( nFlags & IDF_NOTE ) )
+	if ( !pNew && pSource->GetNotePtr(pDocument) && ( nFlags & IDF_NOTE ) )
     {
         // #i52342# the note must be constructed with the destination document pointer
-        ScPostIt aNewNote( *pSource->GetNotePtr(), pDestDoc );
+        ScPostIt aNewNote( *pSource->GetNotePtr(pDocument), pDestDoc );
         pNew = new ScNoteCell( aNewNote );
     }
 
@@ -1393,14 +1393,14 @@
 			if (Search(nRow, i))
 			{
 				ScBaseCell* pOldCell = pItems[i].pCell;
-				const ScPostIt* pNote = pOldCell->GetNotePtr();
+				const ScPostIt* pNote = pOldCell->GetNotePtr(pDocument);
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				if (pNewCell || pNote || pBC)
 				{
 					if (!pNewCell)
 						pNewCell = new ScNoteCell();
 					if (pNote)
-						pNewCell->SetNote(*pNote);
+						pNewCell->SetNote(*pNote, pDocument);
 					if (pBC)
 					{
 						pNewCell->SetBroadcaster(pBC);
@@ -1415,7 +1415,7 @@
 						if ( i >= nCount || pItems[i].nRow != nRow )
 							Search(nRow, i);
 					}
-					pOldCell->Delete();
+					pOldCell->Delete(pDocument);
 					pItems[i].pCell = pNewCell;			// ersetzen
 					if ( pNewCell->GetCellType() == CELLTYPE_FORMULA )
 					{
@@ -1492,11 +1492,11 @@
 		}
 		ScPostIt aCellNote(pDocument);
 		// Hide visible notes during Filtering.
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown()) 
+		if(pCell->GetNote(aCellNote, pDocument) && aCellNote.IsShown()) 
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
 		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    pCell->SetNote(aCellNote, pDocument );
 		}
 
 		if ( !rStrings.Insert( pData ) )
@@ -1669,12 +1669,18 @@
 		if (bEmpty && pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetBroadcaster())
 			DeleteAtIndex(nIndex);
 		else
-			pCell->SetNote(rNote);
+			pCell->SetNote(rNote, pDocument);
 	}
 	else
 	{
 		if (!bEmpty)
-			Insert(nRow, new ScNoteCell(rNote, pDocument));
+		{
+				fprintf (stderr, "inline me!\n");
+				ScNoteCell *foo = new ScNoteCell(rNote);
+				fprintf (stderr, "don't inline me!\n");
+				Insert(nRow, foo);
+				fprintf (stderr, "don't inline me!\n");
+		}
 	}
 }
 
@@ -1767,7 +1773,7 @@
 	BOOL	bHasNote = FALSE;
 	SCSIZE	nIndex;
 	if (Search(nRow, nIndex))
-		bHasNote = pItems[nIndex].pCell->GetNote(rNote);
+		bHasNote = pItems[nIndex].pCell->GetNote(rNote, pDocument);
 	else
 		rNote.Clear();
 
diff -u -r sc/source/core/data/column.cxx sc/source/core/data/column.cxx
--- sc/source/core/data/column.cxx	2006-06-25 21:53:27.000000000 +0100
+++ sc/source/core/data/column.cxx	2006-07-04 11:56:47.000000000 +0100
@@ -66,11 +66,6 @@
 // STATIC DATA -----------------------------------------------------------
 
 
-inline BOOL CellVisible( const ScBaseCell* pCell )		//! an Zelle verschieben
-{
-	return ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() );
-}
-
 inline BOOL IsAmbiguousScriptNonZero( BYTE nScript )
 {
 	//!	move to a header file
@@ -82,7 +77,6 @@
 
 // -----------------------------------------------------------------------------------------
 
-
 ScColumn::ScColumn() :
 	nCol( 0 ),
 	nCount( 0 ),
@@ -109,6 +103,11 @@
 	pAttrArray = new ScAttrArray( nCol, nTab, pDocument );
 }
 
+BOOL ScColumn::CellVisible( const ScBaseCell* pCell ) const
+{
+		return ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr(pDocument) );
+}
+
 
 SCsROW ScColumn::GetNextUnprotected( SCROW nRow, BOOL bUp ) const
 {
@@ -961,17 +960,17 @@
 		}
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1 && pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell1 && pCell1->GetNote(aCellNote, pDocument) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow1 );
 		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    pCell1->SetNote(aCellNote, pDocument);
 		}
-		if(pCell2 && pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell2 && pCell2->GetNote(aCellNote, pDocument) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow2 );
 		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    pCell2->SetNote(aCellNote, pDocument);
 		}
 
 		return ;
@@ -1026,11 +1025,11 @@
 			pCell1->ForgetBroadcaster();
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell1->GetNote(aCellNote, pDocument) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow1 );
 		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    pCell1->SetNote(aCellNote, pDocument);
 		}
 		if ( eType1 == CELLTYPE_FORMULA )
 		{
@@ -1055,11 +1054,11 @@
 			pCell2->ForgetBroadcaster();
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell2->GetNote(aCellNote, pDocument) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow2 );
 		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    pCell2->SetNote(aCellNote, pDocument);
 		}
 		if ( eType2 == CELLTYPE_FORMULA )
 		{
@@ -1085,9 +1084,9 @@
 	//	Delete nur, wenn es keine neue Zelle gibt (Insert loescht die alte Zelle auch)
 	//	Notizen muessen aber einzeln geloescht werden, weil Insert sie stehenlaesst
 
-	if ( pCell1 && ( !pNew1 || (pCell1->GetNotePtr() && !pNew1->GetNotePtr()) ) )
+	if ( pCell1 && ( !pNew1 || (pCell1->GetNotePtr(pDocument) && !pNew1->GetNotePtr(pDocument)) ) )
 		Delete( nRow1 );
-	if ( pCell2 && ( !pNew2 || (pCell2->GetNotePtr() && !pNew2->GetNotePtr()) ) )
+	if ( pCell2 && ( !pNew2 || (pCell2->GetNotePtr(pDocument) && !pNew2->GetNotePtr(pDocument)) ) )
 		Delete( nRow2 );
 
 	if (pNew1)
@@ -1128,17 +1127,17 @@
 		ScFormulaCell* pCell2 = (ScFormulaCell*) rCol.pItems[nIndex2].pCell;
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell1->GetNote(aCellNote, pDocument) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
 		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    pCell1->SetNote(aCellNote, pDocument);
 		}
-		if(pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell2->GetNote(aCellNote, pDocument) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( rCol.nCol, nRow );
 		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    pCell2->SetNote(aCellNote, pDocument);
 		}
 		pItems[nIndex1].pCell = pCell2;
 		rCol.pItems[nIndex2].pCell = pCell1;
@@ -1163,11 +1162,11 @@
 	{
 		ScFormulaCell* pCell = (ScFormulaCell*) pItems[nIndex1].pCell;
 		ScPostIt aCellNote(pDocument);
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell->GetNote(aCellNote, pDocument) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
 		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    pCell->SetNote(aCellNote, pDocument);
 		}
 		// Loeschen
 		--nCount;
@@ -1190,11 +1189,11 @@
 	{
 		ScFormulaCell* pCell = (ScFormulaCell*) rCol.pItems[nIndex2].pCell;
 		ScPostIt aCellNote(pDocument);
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell->GetNote(aCellNote, pDocument) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( rCol.nCol, nRow );
 		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    pCell->SetNote(aCellNote, pDocument);
 		}
 		// Loeschen
 		--(rCol.nCount);
@@ -1363,7 +1362,7 @@
 			{
 				MoveListeners( *pBC, pDelRows[i] - nSize );
 				pCell->SetBroadcaster(NULL);
-				pCell->Delete();
+				pCell->Delete(pDocument);
 			}
 		}
 
@@ -1492,8 +1491,8 @@
 				{
 					pNew = CloneCell( i, nFlags, rColumn.pDocument, aAdr );
 
-					if ( pNew && pNew->GetNotePtr() && (nFlags & IDF_NOTE) == 0 )
-						pNew->DeleteNote();
+					if ( pNew && pNew->GetNotePtr(pDocument) && (nFlags & IDF_NOTE) == 0 )
+						pNew->DeleteNote(pDocument);
 				}
 
 				if (pNew)
diff -u -r sc/source/core/data/dociter.cxx sc/source/core/data/dociter.cxx
--- sc/source/core/data/dociter.cxx	2006-01-13 16:52:35.000000000 +0000
+++ sc/source/core/data/dociter.cxx	2006-07-04 09:43:34.000000000 +0100
@@ -1598,7 +1598,8 @@
 	if ( pCell && IsGreater( nNextCol, nNextRow, nCellCol, nCellRow ) )
 		pCell = aCellIter.GetNext( nCellCol, nCellRow );
 
-	while ( pCell && pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetNotePtr() )
+	while ( pCell && pCell->GetCellType() == CELLTYPE_NOTE 
+			&& !pCell->GetNotePtr(aCellIter.GetDocument()) )
 		pCell = aCellIter.GetNext( nCellCol, nCellRow );
 
 	if ( pPattern && IsGreater( nNextCol, nNextRow, nAttrCol2, nAttrRow ) )
diff -u -r sc/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
--- sc/source/core/data/documen2.cxx	2006-06-25 21:53:31.000000000 +0100
+++ sc/source/core/data/documen2.cxx	2006-07-04 17:10:19.000000000 +0100
@@ -412,6 +412,7 @@
 
 	aTrackTimer.SetTimeoutHdl( LINK( this, ScDocument, TrackTimeHdl ) );
 	aTrackTimer.SetTimeout( 100 );
+	pNoteTracker = NULL;
 }
 
 
diff -u -r sc/source/core/data/table6.cxx sc/source/core/data/table6.cxx
--- sc/source/core/data/table6.cxx	2006-06-25 21:53:31.000000000 +0100
+++ sc/source/core/data/table6.cxx	2006-07-03 18:02:49.000000000 +0100
@@ -137,7 +137,7 @@
 			case SVX_SEARCHIN_NOTE:
 				{
 				    ScPostIt aNote(pDocument);
-				    if(pCell->GetNote( aNote ))
+				    if(pCell->GetNote( aNote, pDocument ))
 				    {
 				        aString = aNote.GetText();
 				        bMultiLine = ( ((aNote.GetEditTextObject())->GetParagraphCount()) > 1 );
@@ -255,7 +255,7 @@
 			if (rSearchItem.GetCellType() == SVX_SEARCHIN_NOTE)
 			{
 				ScPostIt aNote(pDocument);
-				if(pCell->GetNote( aNote ))
+				if(pCell->GetNote( aNote, pDocument ))
 				{	
                     aNote.SetText( aString );
 
diff -u -r sc/source/core/data/validat.cxx sc/source/core/data/validat.cxx
--- sc/source/core/data/validat.cxx	2006-04-07 09:25:47.000000000 +0100
+++ sc/source/core/data/validat.cxx	2006-07-04 12:00:55.000000000 +0100
@@ -546,7 +546,7 @@
 
 	BOOL bRet = IsDataValid( pCell, rPos );
 
-	pCell->Delete();
+	pCell->Delete(GetDocument());
 	return bRet;
 }
 
diff -u -r sc/source/core/tool/chgtrack.cxx sc/source/core/tool/chgtrack.cxx
--- sc/source/core/tool/chgtrack.cxx	2006-06-25 21:53:31.000000000 +0100
+++ sc/source/core/tool/chgtrack.cxx	2006-07-04 12:05:30.000000000 +0100
@@ -1927,7 +1927,7 @@
 {
 	if ( pCell )
 	{
-		pCell->Delete();
+		pCell->Delete(pDoc);
 		pCell = NULL;
 	}
 	if ( rStr.Len() > 1 && rStr.GetChar(0) == '=' )
@@ -2226,7 +2226,7 @@
 {
 	rStr.Erase();
 	if ( pCell )
-		pCell->Delete();
+		pCell->Delete(pToDoc);
 	if ( ScChangeActionContent::GetContentCellType( pOrgCell ) )
 	{
 		pCell = pOrgCell->Clone( pToDoc );
diff -u -r sc/source/core/tool/interpr2.cxx sc/source/core/tool/interpr2.cxx
--- sc/source/core/tool/interpr2.cxx	2006-06-25 21:53:31.000000000 +0100
+++ sc/source/core/tool/interpr2.cxx	2006-07-03 18:05:18.000000000 +0100
@@ -1485,7 +1485,7 @@
 				if ( bTempCell )
 				{
 					if ( bHasNote = (pVCell != NULL) )
-						bHasNote = pVCell->GetNote( aNote );
+						bHasNote = pVCell->GetNote( aNote, aNote.GetDocument() );
 					fSaveVal = 0.0;
 					pVCell = new ScValueCell( fSaveVal );
 					pDok->PutCell( aValueAdr, pVCell );
diff -u -r sc/source/filter/excel/excel.cxx sc/source/filter/excel/excel.cxx
--- sc/source/filter/excel/excel.cxx	2006-05-05 10:35:01.000000000 +0100
+++ sc/source/filter/excel/excel.cxx	2006-07-03 20:14:09.000000000 +0100
@@ -96,7 +96,7 @@
     DBG_ASSERT( pDocument, "::ScImportExcel - no document" );
     if( !pDocument ) return eERR_INTERN;        // should not happen
 
-#if SCF_INCL_DUMPER
+#if 0
     {
         ::scf::xls::dump::Dumper aDumper( rMedium, pDocument->GetDocumentShell() );
         aDumper.Dump();
diff -u -r sc/source/filter/excel/xetable.cxx sc/source/filter/excel/xetable.cxx
--- sc/source/filter/excel/xetable.cxx	2006-05-05 10:38:32.000000000 +0100
+++ sc/source/filter/excel/xetable.cxx	2006-07-04 09:51:34.000000000 +0100
@@ -2142,7 +2142,7 @@
             maRowBfr.AppendCell( xCell );
 
         // notes
-        const ScPostIt* pScNote = pScCell ? pScCell->GetNotePtr() : 0;
+        const ScPostIt* pScNote = pScCell ? pScCell->GetNotePtr(&rDoc) : 0;
         if( pScNote || aAddNoteText.Len() )
             mxNoteList->AppendNewRecord( new XclExpNote( GetRoot(), aScPos, pScNote, aAddNoteText ) );
 
diff -u -r sc/source/filter/xcl97/XclImpChangeTrack.cxx sc/source/filter/xcl97/XclImpChangeTrack.cxx
--- sc/source/filter/xcl97/XclImpChangeTrack.cxx	2006-04-07 09:29:06.000000000 +0100
+++ sc/source/filter/xcl97/XclImpChangeTrack.cxx	2006-07-04 12:13:43.000000000 +0100
@@ -385,9 +385,9 @@
 		{
 			DBG_ERROR( "XclImpChangeTrack::ReadChTrCellContent - bytes left, action ignored" );
 			if( pOldCell )
-				pOldCell->Delete();
+					pOldCell->Delete(GetDocPtr());
 			if( pNewCell )
-				pNewCell->Delete();
+				pNewCell->Delete(GetDocPtr());
 		}
 		else
 		{
diff -u -r sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx
--- sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx	2006-06-25 21:53:31.000000000 +0100
+++ sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx	2006-07-04 12:15:56.000000000 +0100
@@ -95,8 +95,10 @@
 
 ScMyCellInfo::~ScMyCellInfo()
 {
-	if (pCell)
+/*	if (pCell)
 		pCell->Delete();
+*/
+		fprintf (stderr, "FIXME: PostIt Note leaked");
 }
 
 ScBaseCell* ScMyCellInfo::CreateCell(ScDocument* pDoc)
diff -u -r sc/source/filter/xml/xmlexprt.cxx sc/source/filter/xml/xmlexprt.cxx
--- sc/source/filter/xml/xmlexprt.cxx	2006-01-31 18:36:59.000000000 +0000
+++ sc/source/filter/xml/xmlexprt.cxx	2006-07-04 09:55:55.000000000 +0100
@@ -790,7 +790,7 @@
 		    ScBaseCell* pCell = aCellIter.GetFirst();
 		    while (pCell)
 		    {
-                const ScPostIt* pScNote = pCell->GetNotePtr();
+                const ScPostIt* pScNote = pCell->GetNotePtr(pDoc);
 			    if (pScNote && !pScNote->IsShown())
                 {
                     const SfxItemSet& rSet = pScNote->GetItemSet();
diff -u -r sc/source/ui/docshell/dbdocfun.cxx sc/source/ui/docshell/dbdocfun.cxx
--- sc/source/ui/docshell/dbdocfun.cxx	2006-06-25 21:53:27.000000000 +0100
+++ sc/source/ui/docshell/dbdocfun.cxx	2006-07-04 09:59:16.000000000 +0100
@@ -1121,7 +1121,7 @@
 	ScBaseCell* pCell = aIter.GetFirst();
 	while (pCell)
 	{
-		if ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() )		// real content?
+		if ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr(pDoc) )		// real content?
 		{
 			if ( !rExcept.In( ScAddress( aIter.GetCol(), aIter.GetRow(), aIter.GetTab() ) ) )
 				return FALSE;		// cell found
diff -u -r sc/source/ui/docshell/docfunc.cxx sc/source/ui/docshell/docfunc.cxx
--- sc/source/ui/docshell/docfunc.cxx	2006-06-25 21:53:31.000000000 +0100
+++ sc/source/ui/docshell/docfunc.cxx	2006-07-04 12:18:52.000000000 +0100
@@ -785,7 +785,7 @@
 	    {
 		    if (!bApi)
 			    rDocShell.ErrorMessage(aTester.GetMessageId());
-		    pNewCell->Delete();
+		    pNewCell->Delete(rDocShell.GetDocument());
 		    return FALSE;
 	    }
     }
diff -u -r sc/source/ui/docshell/docsh.cxx sc/source/ui/docshell/docsh.cxx
--- sc/source/ui/docshell/docsh.cxx	2006-05-04 16:02:55.000000000 +0100
+++ sc/source/ui/docshell/docsh.cxx	2006-07-04 10:02:22.000000000 +0100
@@ -512,7 +512,7 @@
 		    ScBaseCell* pCell = aCellIter.GetFirst();
 		    while (pCell && !bFound)
 		    {
-                if (pCell->GetNotePtr())
+                if (pCell->GetNotePtr(&aDocument))
                     bFound = sal_True;
 				pCell = aCellIter.GetNext();
             }
diff -u -r sc/source/ui/navipi/content.cxx sc/source/ui/navipi/content.cxx
--- sc/source/ui/navipi/content.cxx	2006-03-27 11:08:06.000000000 +0100
+++ sc/source/ui/navipi/content.cxx	2006-07-04 10:06:21.000000000 +0100
@@ -902,7 +902,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = pCell->GetNotePtr(pDoc);
 			if (pNote)
 				InsertContent( SC_CONTENT_NOTE, lcl_NoteString(*pNote) );
 
@@ -925,7 +925,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = pCell->GetNotePtr(pDoc);
 			if (pNote)
 			{
 				if (nFound == nIndex)
@@ -960,7 +960,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell && bEqual)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = pCell->GetNotePtr(pDoc);
 			if (pNote)
 			{
 				if ( !pEntry )
diff -u -r sc/source/ui/undo/undocell.cxx sc/source/ui/undo/undocell.cxx
--- sc/source/ui/undo/undocell.cxx	2006-01-13 17:07:31.000000000 +0000
+++ sc/source/ui/undo/undocell.cxx	2006-07-04 12:26:16.000000000 +0100
@@ -212,7 +212,7 @@
 
 	for (USHORT i=0; i<nCount; i++)
 		if (ppOldCells[i])
-			ppOldCells[i]->Delete();
+			ppOldCells[i]->Delete(pDocShell->GetDocument());
 	delete[] ppOldCells;
 
 	delete[] pHasFormat;
@@ -367,8 +367,9 @@
 
 __EXPORT ScUndoEnterValue::~ScUndoEnterValue()
 {
-	if (pOldCell)
-		pOldCell->Delete();
+/*	if (pOldCell)
+	pOldCell->Delete();*/
+		fprintf (stderr, "FIXME: Leaked Post It Note...");
 }
 
 String __EXPORT ScUndoEnterValue::GetComment() const
@@ -462,9 +463,9 @@
 __EXPORT ScUndoPutCell::~ScUndoPutCell()
 {
 	if (pOldCell)
-		pOldCell->Delete();
+		pOldCell->Delete(pDocShell->GetDocument());
 	if (pEnteredCell)
-		pEnteredCell->Delete();
+		pEnteredCell->Delete(pDocShell->GetDocument());
 }
 
 String __EXPORT ScUndoPutCell::GetComment() const
@@ -738,7 +739,7 @@
 	else
 		pOldCell = new ScStringCell( aUndoStr );
 	SetChangeTrack( pOldCell );
-	pOldCell->Delete();
+	pOldCell->Delete(pDocShell->GetDocument());
 }
 
 __EXPORT ScUndoThesaurus::~ScUndoThesaurus()
diff -u -r sc/source/ui/unoobj/cellsuno.cxx sc/source/ui/unoobj/cellsuno.cxx
--- sc/source/ui/unoobj/cellsuno.cxx	2006-05-05 10:47:19.000000000 +0100
+++ sc/source/ui/unoobj/cellsuno.cxx	2006-07-04 10:08:19.000000000 +0100
@@ -3424,7 +3424,7 @@
 			while (pCell)
 			{
 				//	Notizen zaehlen als nicht-leer
-				if ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() )
+				if ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr(pDoc) )
 					aMarkData.SetMultiMarkArea(
 							ScRange( aIter.GetCol(), aIter.GetRow(), aIter.GetTab() ),
 							FALSE );
@@ -3466,7 +3466,7 @@
 			while (pCell)
 			{
 				BOOL bAdd = FALSE;
-				if ( pCell->GetNotePtr() && ( nContentFlags & sheet::CellFlags::ANNOTATION ) )
+				if ( pCell->GetNotePtr(pDoc) && ( nContentFlags & sheet::CellFlags::ANNOTATION ) )
 					bAdd = TRUE;
 				else
 					switch ( pCell->GetCellType() )
diff -u -r sc/source/ui/unoobj/docuno.cxx sc/source/ui/unoobj/docuno.cxx
--- sc/source/ui/unoobj/docuno.cxx	2006-06-25 21:53:46.000000000 +0100
+++ sc/source/ui/unoobj/docuno.cxx	2006-07-04 10:09:45.000000000 +0100
@@ -2768,7 +2768,7 @@
 		ScBaseCell* pCell = aCellIter.GetFirst();
 		while (pCell)
 		{
-			if (pCell->GetNotePtr())
+			if (pCell->GetNotePtr(pDoc))
 			{
 				if (nFound == nIndex)
 				{
@@ -2853,7 +2853,7 @@
 		ScBaseCell* pCell = aCellIter.GetFirst();
 		while (pCell)
 		{
-			if (pCell->GetNotePtr())
+			if (pCell->GetNotePtr(pDoc))
 				++nCount;
 			pCell = aCellIter.GetNext();
 		}
diff -u -r sc/source/ui/view/output.cxx sc/source/ui/view/output.cxx
--- sc/source/ui/view/output.cxx	2005-09-09 00:01:40.000000000 +0100
+++ sc/source/ui/view/output.cxx	2006-07-03 21:20:24.000000000 +0100
@@ -2237,7 +2237,7 @@
 					// use origin's pCell for NotePtr test below
 				}
 
-				if ( pCell && pCell->GetNotePtr() && ( bIsMerged ||
+				if ( pCell && pCell->GetNotePtr(pDoc) && ( bIsMerged ||
 						( !pInfo->bHOverlapped && !pInfo->bVOverlapped ) ) )
 				{
 					if (bFirst)
@@ -2315,7 +2315,7 @@
                     // use origin's pCell for NotePtr test below
                 }
 
-                if ( pCell && pCell->GetNotePtr() && ( bIsMerged ||
+                if ( pCell && pCell->GetNotePtr(pDoc) && ( bIsMerged ||
                         ( !pInfo->bHOverlapped && !pInfo->bVOverlapped ) ) )
                 {
                     long nNoteWidth = (long)( SC_CLIPMARK_SIZE * nPPTX );
@@ -2335,7 +2335,7 @@
                     if ( bLayoutRTL ? ( nMarkX >= 0 ) : ( nMarkX < nScrX+nScrW ) )
                     {
                         Rectangle aNoteRect( nMarkX, nPosY, nMarkX+nNoteWidth*nLayoutSign, nPosY+nNoteHeight );
-                        const ScPostIt* pNote = pCell->GetNotePtr();
+                        const ScPostIt* pNote = pCell->GetNotePtr(pDoc);
 
                         // Note title is the cell address (as on printed note pages)
                         String aTitle;
@@ -2396,7 +2396,7 @@
 			{
 				CellInfo* pInfo = &pThisRowInfo->pCellInfo[nX+1];
 				ScBaseCell* pCell = pInfo->pCell;
-				if ( pCell && pCell->GetNotePtr() )		// auch verdeckte wegen der Numerierung
+				if ( pCell && pCell->GetNotePtr(pDoc) )		// auch verdeckte wegen der Numerierung
 				{
                     aStr = String::CreateFromInt32( lcl_FindInList( rPosList,
                                 ScAddress( nX, pThisRowInfo->nRowNo, nTab)));

diff -u -r sc/source/ui/view/printfun.cxx sc/source/ui/view/printfun.cxx
--- sc/source/ui/view/printfun.cxx	2006-05-02 16:52:52.000000000 +0100
+++ sc/source/ui/view/printfun.cxx	2006-07-03 21:21:26.000000000 +0100
@@ -1980,7 +1980,7 @@
 		if (pPos)
 		{
 			ScBaseCell* pCell = pDoc->GetCell( *pPos);
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = pCell->GetNotePtr(pDoc);
 			if (pNote)
 			{
 				if(const EditTextObject *pEditText = pNote->GetEditTextObject())
@@ -2626,7 +2626,7 @@
 			ScBaseCell* pCell = aIter.GetNext( nCol, nRow );
 			while (pCell)
 			{
-				if (pCell->GetNotePtr())
+				if (pCell->GetNotePtr(pDoc))
 				{
 					aNotePosList.Insert( new ScAddress( nCol,nRow,nPrintTab ), LIST_APPEND );
 					++nCount;


