diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/inc/cell.hxx sc/inc/cell.hxx
--- sc-pristine/inc/cell.hxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/inc/cell.hxx	2006-08-17 14:06:13.000000000 +0100
@@ -83,10 +83,10 @@
 class ScBaseCell
 {
 protected:
-	ScPostIt*		pNote;
 	SvtBroadcaster*	pBroadcaster;
 	USHORT			nTextWidth;
-	BYTE			eCellType;		// enum CellType - BYTE spart Speicher
+	BYTE			eCellType : 7;		// enum CellType - BYTE spart Speicher
+	bool            bSpecial : 1;
 	BYTE			nScriptType;
 
 public: // fuer Idle-Berechnung
@@ -107,17 +107,12 @@
 	void			Delete();						// simulierter virtueller Destructor
 	CellType		GetCellType() const;
 
-	void			SetNote( const ScPostIt& rNote );
-	BOOL			GetNote( ScPostIt& rNote ) const;
-	const ScPostIt*	GetNotePtr() const;
-	inline void		DeleteNote();
-
 	inline SvtBroadcaster*	GetBroadcaster() const;
 	void			SetBroadcaster(SvtBroadcaster* pNew);
 	inline void		ForgetBroadcaster();
 	inline void		SwapBroadcaster(ScBaseCell& rOther);	// zum Sortieren
 
-	void			LoadNote( SvStream& rStream, ScDocument* pDoc );
+//	void			LoadNote( SvStream& rStream, ScDocument* pDoc );
 
 						// String- oder EditCell
 	static ScBaseCell* CreateTextCell( const String& rString, ScDocument* );
@@ -133,8 +128,10 @@
 	String			GetStringData() const;			// nur echte Strings
 
 	static BOOL		CellEqual( const ScBaseCell* pCell1, const ScBaseCell* pCell2 );
-};
 
+	bool            IsSpecial() const;
+	void            SetSpecial(bool bSpecial);
+};
 
 
 class ScValueCell : public ScBaseCell
@@ -449,8 +446,8 @@
 #endif
 
 					ScNoteCell();
-					ScNoteCell( const ScPostIt& rNote );
 					ScNoteCell( const ScNoteCell& rScNoteCell, ScDocument* pDoc );
+//					ScNoteCell( const ScPostIt& rNote );
 					ScNoteCell( SvStream& rStream, USHORT nVer );
 	ScBaseCell*		Clone(ScDocument* pDoc) const;
 
@@ -461,41 +458,37 @@
 //		ScBaseCell
 
 inline ScBaseCell::ScBaseCell( CellType eNewType ) :
-    pNote( NULL ),
     pBroadcaster( NULL ),
     nTextWidth( TEXTWIDTH_DIRTY ),
     eCellType( eNewType ),
+	bSpecial( false ),
     nScriptType( SC_SCRIPTTYPE_UNKNOWN )
 {
 }
 
+// FIXME: should we have a copy constructor - cf. Note transferal
 inline ScBaseCell::ScBaseCell( const ScBaseCell& rBaseCell, ScDocument* pDoc ) :
     pBroadcaster( NULL ),
     nTextWidth( rBaseCell.nTextWidth ),
     eCellType( rBaseCell.eCellType ),
+	bSpecial( false ),
     nScriptType( SC_SCRIPTTYPE_UNKNOWN )
 {
-	if (rBaseCell.pNote)
-		pNote = new ScPostIt( *rBaseCell.pNote, pDoc );
-	else
-		pNote = NULL;
 }
 
-
-inline CellType ScBaseCell::GetCellType() const
+inline bool ScBaseCell::IsSpecial() const
 {
-	return (CellType)eCellType;
+	return bSpecial;
 }
 
-inline const ScPostIt* ScBaseCell::GetNotePtr() const
+inline void ScBaseCell::SetSpecial( bool _bSpecial )
 {
-	return pNote;
+	bSpecial = _bSpecial;
 }
 
-inline void ScBaseCell::DeleteNote()
+inline CellType ScBaseCell::GetCellType() const
 {
-	delete pNote;
-	pNote = NULL;
+	return (CellType)eCellType;
 }
 
 inline SvtBroadcaster* ScBaseCell::GetBroadcaster() const
@@ -606,22 +599,26 @@
 {
 }
 
+
 inline ScNoteCell::ScNoteCell( const ScNoteCell& rScNoteCell, ScDocument* pDoc ) :
 	ScBaseCell( rScNoteCell, pDoc )
-{
+{		
 }
+/*
 
+// This is screwed up ! :-)
 inline ScNoteCell::ScNoteCell( const ScPostIt& rNote ) :
 	ScBaseCell( CELLTYPE_NOTE )
 {
-	ScBaseCell::SetNote(rNote);
+	fprintf (stderr, "ScNoteCell::constructir - this API is totally broken\n");
+//	ScBaseCell::SetNote(rNote, rNote.GetDocument());
 }
+*/
 
 inline ScBaseCell* ScNoteCell::Clone(ScDocument* pDoc) const
 {
 	return new ScNoteCell(*this, pDoc);
 }
 
-
 #endif
 
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/inc/column.hxx sc/inc/column.hxx
--- sc-pristine/inc/column.hxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/inc/column.hxx	2006-08-17 16:40:57.000000000 +0100
@@ -195,6 +195,7 @@
 
 	USHORT		GetBlockMatrixEdges( SCROW nRow1, SCROW nRow2, USHORT nMask ) const;
 	BOOL		HasSelectionMatrixFragment(const ScMarkData& rMark) const;
+	BOOL        CellVisible( const ScBaseCell* pCell, bool bNotesVisible = true ) const;
 
 				// Daten oder Attribute:
 	SCROW		GetFirstEntryPos() const;
@@ -267,7 +268,7 @@
 	BOOL		SetString( SCROW nRow, SCTAB nTab, const String& rString,
 						   ScAddress::Convention conv = ScAddress::CONV_OOO );
 	void		SetValue( SCROW nRow, const double& rVal);
-	void		SetNote( SCROW nRow, const ScPostIt& rNote );
+	ScBaseCell* SetNoteInternal( SCROW nRow, bool bEmpty );
 	void		SetError( SCROW nRow, const USHORT nError);
 
 	void		GetString( SCROW nRow, String& rString ) const;
@@ -275,7 +276,6 @@
 	double		GetValue( SCROW nRow ) const;
 	void		GetFormula( SCROW nRow, String& rFormula,
 							BOOL bAsciiExport = FALSE ) const;
-	BOOL		GetNote( SCROW nRow, ScPostIt& rNote ) const;
 	CellType	GetCellType( SCROW nRow ) const;
 	SCSIZE		GetCellCount() const { return nCount; }
 	ULONG		GetWeightedCount() const;
@@ -429,6 +429,12 @@
 									SCROW nRowStart, SCROW nRowEnd ) const;
 
 private:
+	ScBaseCell *CopyCellTo( const ScBaseCell *pCell, const ScDocument *pSrcDoc,
+							ScDocument *pDestDoc) const;
+	void DeleteCell( ScBaseCell *pCell );
+	const ScPostIt*	GetNotePtr( const ScBaseCell* pCell ) const;
+	bool GetNote( const ScBaseCell* pCell, ScPostIt &rNote );
+	void SetNote( ScBaseCell* pCell, const ScPostIt &rNote );
 	ScBaseCell* CloneCell(SCSIZE nIndex, USHORT nFlags,
 							ScDocument* pDestDoc, const ScAddress& rDestPos);
 	void		CorrectSymbolCells( CharSet eStreamCharSet );
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/inc/dociter.hxx sc/inc/dociter.hxx
--- sc-pristine/inc/dociter.hxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/inc/dociter.hxx	2006-08-17 14:06:13.000000000 +0100
@@ -54,6 +54,7 @@
 class ScAttrArray;
 class ScAttrIterator;
 class ScRange;
+class ScPostIt;
 
 class ScDocumentIterator				// alle nichtleeren Zellen durchgehen
 {
@@ -180,6 +181,7 @@
 
 	ScBaseCell*		GetThis();
 public:
+	const ScPostIt* GetNotePtr();
 					ScCellIterator(ScDocument* pDocument,
 								   SCCOL nSCol, SCROW nSRow, SCTAB nSTab,
 								   SCCOL nECol, SCROW nERow, SCTAB nETab,
@@ -381,6 +383,7 @@
 
 	ScBaseCell*		GetNext( SCCOL& rCol, SCROW& rRow );
 	BOOL			ReturnNext( SCCOL& rCol, SCROW& rRow );
+	ScDocument*     GetDocument() const { return pDoc; }
 
 private:
 	void			Advance();
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/inc/document.hxx sc/inc/document.hxx
--- sc-pristine/inc/document.hxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/inc/document.hxx	2006-08-17 15:11:11.000000000 +0100
@@ -100,6 +100,7 @@
 class Window;
 class XColorTable;
 class List;
+class ScNoteTracker;
 
 class ScAutoFormatData;
 class ScBaseCell;
@@ -402,6 +403,7 @@
 	BOOL				bInUnoBroadcast;
 	BOOL				bInUnoListenerCall;
 	ScAddress::Convention eAddrConv;
+	ScNoteTracker* pNoteTracker;
 
     mutable BOOL        bStyleSheetUsageInvalid;
 
@@ -409,6 +411,7 @@
 	inline BOOL 		RowHidden( SCROW nRow, SCTAB nTab );		// FillInfo
 
 public:
+	ScNoteTracker  *GetNoteTracker() const;
 	ULONG			GetCellCount() const;		// alle Zellen
 	ULONG			GetWeightedCount() const;	// Formeln und Edit staerker gewichtet
 	ULONG			GetCodeCount() const;		// RPN-Code in Formeln
@@ -707,6 +710,8 @@
 	BOOL			SetString( SCCOL nCol, SCROW nRow, SCTAB nTab, const String& rString );
 	void			SetValue( SCCOL nCol, SCROW nRow, SCTAB nTab, const double& rVal );
 	void			SetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, const ScPostIt& rNote );
+	void			SetNote( ScBaseCell *pNote, const ScPostIt& rNote );
+	void            DeleteNote( ScBaseCell *pNote );
 	void 			SetError( SCCOL nCol, SCROW nRow, SCTAB nTab, const USHORT nError);
 
 	void 			InsertMatrixFormula(SCCOL nCol1, SCROW nRow1,
@@ -732,7 +737,8 @@
 						const ScAddress& rPos, const ScFormulaCell& rFCell ) const;
 	void			GetFormula( SCCOL nCol, SCROW nRow, SCTAB nTab, String& rFormula,
 								BOOL bAsciiExport = FALSE ) const;
-	BOOL			GetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, ScPostIt& rNote);
+	BOOL			GetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, ScPostIt& rNote ) const;
+	const ScPostIt *GetNotePtr( const ScBaseCell* pCell ) const;
 	void			GetCellType( SCCOL nCol, SCROW nRow, SCTAB nTab, CellType& rCellType ) const;
 	CellType		GetCellType( const ScAddress& rPos ) const;
 	void			GetCell( SCCOL nCol, SCROW nRow, SCTAB nTab, ScBaseCell*& rpCell ) const;
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/inc/fillinfo.hxx sc/inc/fillinfo.hxx
--- sc-pristine/inc/fillinfo.hxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/inc/fillinfo.hxx	2006-08-17 14:06:13.000000000 +0100
@@ -50,6 +50,7 @@
 class SvxLineItem;
 class SvxShadowItem;
 
+class ScPostIt;
 class ScBaseCell;
 class ScPatternAttr;
 
@@ -80,6 +81,7 @@
 struct CellInfo
 {
     ScBaseCell*                 pCell;
+    const ScPostIt*             pNote;
 
     const ScPatternAttr*        pPatternAttr;
     const SfxItemSet*           pConditionSet;
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/inc/postit.hxx sc/inc/postit.hxx
--- sc-pristine/inc/postit.hxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/inc/postit.hxx	2006-08-21 15:03:16.000000000 +0100
@@ -108,6 +108,7 @@
 	const String&		GetAuthor() const { return maStrAuthor; }
 	BOOL			IsShown()   const { return mbShown;     }
 
+    ScDocument*     GetDocument() const { return mpDoc; };
 	void		        SetEditTextObject( const EditTextObject* pTextObj);
 	void			SetText( const String& rText ); 
 	void			SetDate( const String& rNew ) 	{ maStrDate   = rNew; }
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/inc/table.hxx sc/inc/table.hxx
--- sc-pristine/inc/table.hxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/inc/table.hxx	2006-08-17 14:06:13.000000000 +0100
@@ -268,7 +268,7 @@
 				//	TRUE = Zahlformat gesetzt
 	BOOL		SetString( SCCOL nCol, SCROW nRow, SCTAB nTab, const String& rString );
 	void		SetValue( SCCOL nCol, SCROW nRow, const double& rVal );
-	void		SetNote( SCCOL nCol, SCROW nRow, const ScPostIt& rNote);
+	ScBaseCell *SetNoteInternal( SCCOL nCol, SCROW nRow, bool bEmpty );
 	void 		SetError( SCCOL nCol, SCROW nRow, USHORT nError);
 
 	void		GetString( SCCOL nCol, SCROW nRow, String& rString );
@@ -278,7 +278,6 @@
 	double		GetValue( SCCOL nCol, SCROW nRow );
 	void		GetFormula( SCCOL nCol, SCROW nRow, String& rFormula,
 							BOOL bAsciiExport = FALSE );
-	BOOL		GetNote( SCCOL nCol, SCROW nRow, ScPostIt& rNote);
 
 	CellType	GetCellType( const ScAddress& rPos ) const
 					{ return aCol[rPos.Col()].GetCellType( rPos.Row() ); }
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/cell.cxx sc/source/core/data/cell.cxx
--- sc-pristine/source/core/data/cell.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/cell.cxx	2006-08-17 17:53:05.000000000 +0100
@@ -46,6 +46,7 @@
 #endif
 
 #include <svtools/zforlist.hxx>
+#include <hash_map>
 
 #include "scitems.hxx"
 #include "attrib.hxx"
@@ -78,6 +79,7 @@
 #ifndef _SVT_BROADCAST_HXX
 #include <svtools/broadcast.hxx>
 #endif
+#include <notetracker.hxx>
 
 // More or less arbitrary, of course all recursions must fit into available
 // stack space (which is what on all systems we don't know yet?). Choosing a
@@ -110,8 +112,15 @@
 
 // -----------------------------------------------------------------------
 
+// -----------------------------------------------------------------------
 ScBaseCell* ScBaseCell::Clone(ScDocument* pDoc) const
 {
+	fprintf (stderr, "Clone a cell...\n");
+	if (bSpecial)
+	{
+//		fscanf (stdin, "");
+		fprintf (stderr, "Terminal problem - not cloning note contents\n");
+	}
 	switch (eCellType)
 	{
 		case CELLTYPE_VALUE:
@@ -133,14 +142,17 @@
 
 ScBaseCell::~ScBaseCell()
 {
-	delete pNote;
+	if (bSpecial)
+	{
+		fscanf (stdin, "");
+		fprintf (stderr, "Darstardly error - not released hash ptr\n");
+	}
 	delete pBroadcaster;
 	DBG_ASSERT( eCellType == CELLTYPE_DESTROYED, "BaseCell Destructor" );
 }
 
-void ScBaseCell::Delete()
+void ScBaseCell::Delete ()
 {
-	DELETEZ(pNote);
 	switch (eCellType)
 	{
 		case CELLTYPE_VALUE:
@@ -164,29 +176,6 @@
 	}
 }
 
-void ScBaseCell::SetNote( const ScPostIt& rNote )
-{
-	if (!rNote.IsEmpty())
-	{
-		if (!pNote)
-			pNote = new ScPostIt(rNote);
-		else
-			*pNote = rNote;
-	}
-	else
-		DELETEZ(pNote);
-}
-
-BOOL ScBaseCell::GetNote( ScPostIt& rNote ) const
-{
-	if ( pNote )
-		rNote = *pNote;
-	else
-		rNote.Clear();
-
-	return ( pNote != NULL );
-}
-
 ScBaseCell* ScBaseCell::CreateTextCell( const String& rString, ScDocument* pDoc )
 {
 	if ( rString.Search('\n') != STRING_NOTFOUND || rString.Search(CHAR_CR) != STRING_NOTFOUND )
@@ -195,12 +184,6 @@
 		return new ScStringCell( rString );
 }
 
-void ScBaseCell::LoadNote( SvStream& rStream, ScDocument* pDoc )
-{
-	pNote = new ScPostIt(pDoc);
-	rStream >> *pNote;
-}
-
 void ScBaseCell::SetBroadcaster(SvtBroadcaster* pNew)
 {
 	delete pBroadcaster;
@@ -2065,7 +2048,3 @@
 	eCellType = CELLTYPE_DESTROYED;
 }
 #endif
-
-
-
-
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/column2.cxx sc/source/core/data/column2.cxx
--- sc-pristine/source/core/data/column2.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/column2.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -84,11 +84,6 @@
 
 // -----------------------------------------------------------------------
 
-inline BOOL CellVisible( const ScBaseCell* pCell )
-{
-	return ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() );
-}
-
 inline BOOL IsAmbiguousScript( BYTE nScript )
 {
 	//!	move to a header file
@@ -437,7 +432,11 @@
 		nPos = i;
 #endif
 		if (nPos < nCount)
-			pItems[nPos].pCell->LoadNote(rStream, pDocument);
+		{
+			ScPostIt aNote( pDocument );
+			rStream >> aNote;
+			pDocument->SetNote( pItems[nPos].pCell, aNote );
+		}
 		else
 		{
 			DBG_ERROR("falsche Pos in ScColumn::LoadNotes");
@@ -452,7 +451,7 @@
 	SCSIZE i;
 
 	for (i=0; i<nCount; i++)
-		if ( pItems[i].pCell->GetNotePtr() && pItems[i].nRow<=nMaxRow )
+		if ( GetNotePtr( pItems[i].pCell ) && pItems[i].nRow<=nMaxRow )
 			++nNoteCount;
 
 	return nNoteCount;
@@ -471,7 +470,7 @@
 
 		nNoteCount = 0;
 		for (i=0; i<nCount; i++)
-			if ( pItems[i].pCell->GetNotePtr() && pItems[i].nRow<=nSaveMaxRow &&
+			if ( GetNotePtr( pItems[i].pCell ) && pItems[i].nRow<=nSaveMaxRow &&
 					!lcl_RemoveThis( pDocument, nCol, pItems[i].nRow, nTab ) )
 				++nNoteCount;
 	}
@@ -494,7 +493,7 @@
 		SCROW nRow = pItems[i].nRow;
 		if ( !bRemoveAny || !lcl_RemoveThis( pDocument, nCol, nRow, nTab ) )
 		{
-			const ScPostIt* pNote = pItems[i].pCell->GetNotePtr();
+			const ScPostIt* pNote = GetNotePtr( pItems[i].pCell );
 			if ( pNote && nRow <= nSaveMaxRow )
 			{
 				rStream << nDestPos;
@@ -1495,8 +1494,9 @@
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
-				if (pOldCell->GetNotePtr())
-					pNewCell->SetNote( *pOldCell->GetNotePtr() );
+				const ScPostIt *pNote;
+				if ( ( pNote = GetNotePtr( pOldCell ) ) )
+					pDocument->SetNote( pNewCell, *pNote );
 				pItems[i].pCell = pNewCell;
 				delete pOldCell;
 			}
@@ -1570,8 +1570,8 @@
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
-				if (pOldCell->GetNotePtr())
-					pNewCell->SetNote( *pOldCell->GetNotePtr() );
+				if (GetNotePtr( pOldCell ))
+					pDocument->SetNote( pNewCell, *GetNotePtr( pOldCell ) );
 				pItems[i].pCell = pNewCell;
 				delete pOldCell;
 			}
@@ -1720,7 +1720,7 @@
 		for (i=0; i<nCount && !bVisData; i++)
 		{
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( CellVisible( pCell, bNotes ) )
 				bVisData = TRUE;
 		}
 		return !bVisData;
@@ -1757,7 +1757,7 @@
 		{
 			--i;
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( CellVisible( pCell, bNotes ) )
 			{
 				bFound = TRUE;
 				nRet = pItems[i].nRow;
@@ -1777,7 +1777,7 @@
 		for (i=0; i<nCount && !bFound; i++)
 		{
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( CellVisible( pCell, bNotes ) )
 			{
 				bFound = TRUE;
 				nRet = pItems[i].nRow;
@@ -2159,7 +2159,7 @@
 
 			if (!pBC->HasListeners())
 			{
-				if (pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetNotePtr())
+				if (pCell->GetCellType() == CELLTYPE_NOTE && !GetNotePtr(pCell))
 					DeleteAtIndex(nIndex);
 				else
 					pCell->SetBroadcaster(NULL);
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/column3.cxx sc/source/core/data/column3.cxx
--- sc-pristine/source/core/data/column3.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/column3.cxx	2006-08-17 17:45:34.000000000 +0100
@@ -89,8 +89,9 @@
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
 			}
-			if (pOldCell->GetNotePtr() && !pNewCell->GetNotePtr())
-				pNewCell->SetNote( *pOldCell->GetNotePtr() );
+			const ScPostIt *pNote;
+			if ( ( pNote = GetNotePtr( pOldCell ) ) && !GetNotePtr( pNewCell ))
+					SetNote( pNewCell, *pNote );
 			if ( pOldCell->GetCellType() == CELLTYPE_FORMULA && !pDocument->IsClipOrUndo() )
 			{
 				pOldCell->EndListeningTo( pDocument );
@@ -98,7 +99,8 @@
 				if ( nIndex >= nCount || pItems[nIndex].nRow != nRow )
 					Search(nRow, nIndex);
 			}
-			pOldCell->Delete();
+			DeleteCell( pOldCell );
+
 			pItems[nIndex].pCell = pNewCell;
 		}
 		else
@@ -228,7 +230,7 @@
 			//	Soll man hier den Speicher freigeben (delta)? Wird dann langsamer!
 		}
 		pCell->EndListeningTo( pDocument );
-		pCell->Delete();
+		DeleteCell(pCell);
 	}
 }
 
@@ -246,7 +248,7 @@
 	pItems[nCount].nRow = 0;
 	pItems[nCount].pCell = NULL;
 	pCell->EndListeningTo( pDocument );
-	pCell->Delete();
+	DeleteCell( pCell );
 }
 
 
@@ -255,7 +257,7 @@
 	if (pItems)
 	{
 		for (SCSIZE i = 0; i < nCount; i++)
-			pItems[i].pCell->Delete();
+			DeleteCell( pItems[i].pCell );
 		delete[] pItems;
 		pItems = NULL;
 	}
@@ -388,7 +390,7 @@
 	{
 		for ( i = nStartIndex; i <= nEndIndex; i++ )
 		{
-			const ScPostIt*	pNote = pItems[i].pCell->GetNotePtr();
+			const ScPostIt*	pNote = GetNotePtr( pItems[i].pCell );
 			if ( pNote && pNote->IsShown() )
 			{
 				ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, pItems[i].nRow );
@@ -422,7 +424,7 @@
                 aHint.GetAddress().SetRow( pItems[i].nRow );
                 aHint.SetCell( pOldCell );
 				pDocument->Broadcast( aHint );
-				pOldCell->Delete();
+				DeleteCell( pOldCell );
 			}
 		}
 		delete pNoteCell;
@@ -478,9 +480,12 @@
 				{
 					if ((nDelFlag & IDF_NOTE) == 0)
 					{
-						const ScPostIt* pNote = pOldCell->GetNotePtr();
+						const ScPostIt* pNote = GetNotePtr( pOldCell );
 						if (pNote)
-							pNoteCell = new ScNoteCell(*pNote);
+						{
+							pNoteCell = new ScNoteCell();
+							pDocument->SetNote( pNoteCell, *pNote );
+						}
 					}
 					SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 					if (pBC)
@@ -517,14 +522,14 @@
 					pDocument->Broadcast( aHint );
 					if (eCellType != CELLTYPE_NOTE)
 						pOldCell->ForgetBroadcaster();
-					pOldCell->Delete();
+					DeleteCell( pOldCell );
 				}
 			}
 			else
 			{
 				if (nDelFlag & IDF_NOTE)
-					if (pItems[j].pCell->GetNotePtr())
-						pItems[j].pCell->DeleteNote();
+					if (GetNotePtr( pItems[j].pCell ))
+						pDocument->DeleteNote( pItems[j].pCell );
 				++j;
 			}
 		}
@@ -553,7 +558,7 @@
         aHint.SetCell( pOldCell );
 		pDocument->Broadcast( aHint );
 		pOldCell->ForgetBroadcaster();
-		pOldCell->Delete();
+		DeleteCell( pOldCell );
 	}
 
 	delete[] ppDelCells;
@@ -779,20 +784,20 @@
 			{
 				pNew = rColumn.CloneCell( i, nInsFlag, pDocument, ScAddress(nCol,(SCROW)nDestRow,nTab) );
 
-				if ( pNew && pNew->GetNotePtr())
+				if (pNew && GetNotePtr(pNew))
                 {
                     if((nInsFlag & IDF_NOTE) == 0 )
-					    pNew->DeleteNote();
+					    pDocument->DeleteNote( pNew );
                     else
                     {
                         // Set the cell note rectangle dimensions to default position 
                         // following the paste.
                         ScPostIt aCellNote(pDocument);
-                        if(pNew->GetNote(aCellNote))
+                        if( GetNote( pNew, aCellNote ) )
                         {
                             Rectangle aRect = aCellNote.DefaultRectangle(ScAddress(nCol,nDestRow,nTab));
                             aCellNote.SetRectangle(aRect);
-                            pNew->SetNote(aCellNote);
+							SetNote( pNew, aCellNote );
                         }
                     }
                 }
@@ -917,23 +922,21 @@
 								// #33224# LeerStrings nicht kopieren
 						}
 					}
-					if ( pNew && pSource->GetNotePtr() && ( nFlags & IDF_NOTE ) )
-                    {
-                        // #i52342# the note must be constructed with the destination document pointer
-                        ScPostIt aNewNote( *pSource->GetNotePtr(), pDestDoc );
-                        pNew->SetNote( aNewNote );
-                    }
 				}
 			}
 			break;
 	}
 
-	if ( !pNew && pSource->GetNotePtr() && ( nFlags & IDF_NOTE ) )
-    {
+	// Copy note across ...
+	const ScPostIt *pNote;
+	if ( ( nFlags & IDF_NOTE ) && (pNote = GetNotePtr( pSource ) ) )
+	{
         // #i52342# the note must be constructed with the destination document pointer
-        ScPostIt aNewNote( *pSource->GetNotePtr(), pDestDoc );
-        pNew = new ScNoteCell( aNewNote );
-    }
+        ScPostIt aNewNote( *pNote, pDestDoc );
+		if (!pNew)
+			pNew = new ScNoteCell();
+		pDestDoc->SetNote( pNew, *pNote );
+	}
 
 	return pNew;
 }
@@ -1043,9 +1046,7 @@
 		if ( bSkipEmpty && bDestEmpty )		// Originalzelle wiederherstellen
 		{
 			if ( pSrc )						// war da eine Zelle?
-			{
-				pNew = pSrc->Clone( pDocument );
-			}
+				pNew = CopyCellTo( pSrc, pDocument, pDocument );
 		}
 		else if ( nFunction )				// wirklich Rechenfunktion angegeben
 		{
@@ -1100,7 +1101,7 @@
 				//	mit Texten wird nicht gerechnet - immer "alte" Zelle, also pSrc
 
 				if (pSrc)
-					pNew = pSrc->Clone( pDocument );
+					pNew = CopyCellTo( pSrc, pDocument, pDocument );
 				else if (pDest)
 					bDelete = TRUE;
 			}
@@ -1394,14 +1395,14 @@
 			if (Search(nRow, i))
 			{
 				ScBaseCell* pOldCell = pItems[i].pCell;
-				const ScPostIt* pNote = pOldCell->GetNotePtr();
+				const ScPostIt* pNote = GetNotePtr( pOldCell );
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				if (pNewCell || pNote || pBC)
 				{
 					if (!pNewCell)
 						pNewCell = new ScNoteCell();
 					if (pNote)
-						pNewCell->SetNote(*pNote);
+						SetNote( pNewCell, *pNote );
 					if (pBC)
 					{
 						pNewCell->SetBroadcaster(pBC);
@@ -1416,7 +1417,7 @@
 						if ( i >= nCount || pItems[i].nRow != nRow )
 							Search(nRow, i);
 					}
-					pOldCell->Delete();
+					DeleteCell( pOldCell );
 					pItems[i].pCell = pNewCell;			// ersetzen
 					if ( pNewCell->GetCellType() == CELLTYPE_FORMULA )
 					{
@@ -1493,11 +1494,11 @@
 		}
 		ScPostIt aCellNote(pDocument);
 		// Hide visible notes during Filtering.
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown()) 
+		if(GetNote( pCell, aCellNote ) && aCellNote.IsShown()) 
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
 		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    SetNote( pCell, aCellNote );
 		}
 
 		if ( !rStrings.Insert( pData ) )
@@ -1658,25 +1659,30 @@
 	}
 }
 
-
-void ScColumn::SetNote( SCROW nRow, const ScPostIt& rNote)
+// Manages the cell magic necessary to create ScNoteCells where necessary
+ScBaseCell *ScColumn::SetNoteInternal( SCROW nRow, bool bEmpty )
 {
-	BOOL bEmpty = rNote.IsEmpty();
+	ScBaseCell* pCell = NULL;
 
 	SCSIZE nIndex;
 	if (Search(nRow, nIndex))
 	{
-		ScBaseCell* pCell = pItems[nIndex].pCell;
+		pCell = pItems[nIndex].pCell;
 		if (bEmpty && pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetBroadcaster())
+		{
 			DeleteAtIndex(nIndex);
-		else
-			pCell->SetNote(rNote);
+			pCell = NULL;
+		}
 	}
 	else
 	{
 		if (!bEmpty)
-			Insert(nRow, new ScNoteCell(rNote, pDocument));
+		{
+			pCell = new ScNoteCell();
+			Insert(nRow, pCell);
+		}
 	}
+	return pCell;
 }
 
 
@@ -1762,19 +1768,19 @@
 		rFormula.Erase();
 }
 
-
+#if 0
 BOOL ScColumn::GetNote( SCROW nRow, ScPostIt& rNote) const
 {
 	BOOL	bHasNote = FALSE;
 	SCSIZE	nIndex;
 	if (Search(nRow, nIndex))
-		bHasNote = pItems[nIndex].pCell->GetNote(rNote);
+		bHasNote = pItems[nIndex].pCell->GetNote(rNote, pDocument);
 	else
 		rNote.Clear();
 
 	return bHasNote;
 }
-
+#endif
 
 CellType ScColumn::GetCellType( SCROW nRow ) const
 {
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/column.cxx sc/source/core/data/column.cxx
--- sc-pristine/source/core/data/column.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/column.cxx	2006-08-17 16:52:23.000000000 +0100
@@ -65,11 +65,6 @@
 // STATIC DATA -----------------------------------------------------------
 
 
-inline BOOL CellVisible( const ScBaseCell* pCell )		//! an Zelle verschieben
-{
-	return ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() );
-}
-
 inline BOOL IsAmbiguousScriptNonZero( BYTE nScript )
 {
 	//!	move to a header file
@@ -81,7 +76,6 @@
 
 // -----------------------------------------------------------------------------------------
 
-
 ScColumn::ScColumn() :
 	nCol( 0 ),
 	nCount( 0 ),
@@ -108,6 +102,49 @@
 	pAttrArray = new ScAttrArray( nCol, nTab, pDocument );
 }
 
+const ScPostIt*	ScColumn::GetNotePtr( const ScBaseCell* pCell ) const
+{
+	return pDocument->GetNotePtr( pCell );
+}
+
+bool ScColumn::GetNote( const ScBaseCell* pCell, ScPostIt &rNote )
+{
+	const ScPostIt *pNote;
+	if (! ( pNote = GetNotePtr( pCell ) ) )
+		return false;
+	rNote = *pNote;
+	return true;
+}
+
+void ScColumn::SetNote( ScBaseCell* pCell, const ScPostIt &rNote )
+{
+	pDocument->SetNote( pCell, rNote );
+}
+
+void ScColumn::DeleteCell( ScBaseCell* pCell )
+{
+	pDocument->DeleteNote( pCell );
+	pCell->Delete();
+}
+
+ScBaseCell *ScColumn::CopyCellTo( const ScBaseCell *pCell, const ScDocument *pSrcDoc,
+								  ScDocument *pDestDoc) const
+{
+	const ScPostIt *pNote; 
+	ScBaseCell *pNewCell = pCell->Clone( pDestDoc );
+
+	if( ( pNote = pSrcDoc->GetNotePtr( pCell ) ) )
+		pDestDoc->SetNote( pNewCell, *pNote );
+
+	return pNewCell;
+}
+
+BOOL ScColumn::CellVisible( const ScBaseCell* pCell, bool bNotesVisible ) const
+{
+	return pCell->GetCellType() != CELLTYPE_NOTE
+			|| ( bNotesVisible && GetNotePtr( pCell ) );
+}
+
 
 SCsROW ScColumn::GetNextUnprotected( SCROW nRow, BOOL bUp ) const
 {
@@ -960,17 +997,17 @@
 		}
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1 && pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell1 && GetNote( pCell1, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow1 );
-		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell1, aCellNote );
 		}
-		if(pCell2 && pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell2 && GetNote( pCell2, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow2 );
-		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell2, aCellNote );
 		}
 
 		return ;
@@ -1025,11 +1062,11 @@
 			pCell1->ForgetBroadcaster();
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell1, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow1 );
-		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell1, aCellNote );
 		}
 		if ( eType1 == CELLTYPE_FORMULA )
 		{
@@ -1054,11 +1091,11 @@
 			pCell2->ForgetBroadcaster();
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell2, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow2 );
-		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell2, aCellNote );
 		}
 		if ( eType2 == CELLTYPE_FORMULA )
 		{
@@ -1084,9 +1121,9 @@
 	//	Delete nur, wenn es keine neue Zelle gibt (Insert loescht die alte Zelle auch)
 	//	Notizen muessen aber einzeln geloescht werden, weil Insert sie stehenlaesst
 
-	if ( pCell1 && ( !pNew1 || (pCell1->GetNotePtr() && !pNew1->GetNotePtr()) ) )
+	if ( pCell1 && ( !pNew1 || ( GetNotePtr( pCell1 ) && !GetNotePtr( pNew1 ) ) ) )
 		Delete( nRow1 );
-	if ( pCell2 && ( !pNew2 || (pCell2->GetNotePtr() && !pNew2->GetNotePtr()) ) )
+	if ( pCell2 && ( !pNew2 || ( GetNotePtr( pCell2 ) && !GetNotePtr( pNew2 ) ) ) )
 		Delete( nRow2 );
 
 	if (pNew1)
@@ -1127,17 +1164,17 @@
 		ScFormulaCell* pCell2 = (ScFormulaCell*) rCol.pItems[nIndex2].pCell;
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell1, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
-		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell1, aCellNote );
 		}
-		if(pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell2, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( rCol.nCol, nRow );
-		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell2, aCellNote );
 		}
 		pItems[nIndex1].pCell = pCell2;
 		rCol.pItems[nIndex2].pCell = pCell1;
@@ -1162,11 +1199,11 @@
 	{
 		ScFormulaCell* pCell = (ScFormulaCell*) pItems[nIndex1].pCell;
 		ScPostIt aCellNote(pDocument);
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
-		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell, aCellNote );
 		}
 		// Loeschen
 		--nCount;
@@ -1189,11 +1226,11 @@
 	{
 		ScFormulaCell* pCell = (ScFormulaCell*) rCol.pItems[nIndex2].pCell;
 		ScPostIt aCellNote(pDocument);
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( rCol.nCol, nRow );
-		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell, aCellNote );
 		}
 		// Loeschen
 		--(rCol.nCount);
@@ -1362,8 +1399,9 @@
 			{
 				MoveListeners( *pBC, pDelRows[i] - nSize );
 				pCell->SetBroadcaster(NULL);
-				pCell->Delete();
+				DeleteCell( pCell );
 			}
+			// FIXME: is it correct only to -Delete- cells wiht a broadcaster ?
 		}
 
 		delete pDelRows;
@@ -1408,11 +1446,12 @@
 	{
 		rColumn.Resize( rColumn.GetCellCount() + nBlockCount );
 		for (i = nStartIndex; i <= nEndIndex; i++)
-			{
+        {
 			if ( pDocument->RowFiltered( pItems[i].nRow , nTab))
 				continue;			
-			rColumn.Append(pItems[i].nRow, pItems[i].pCell->Clone(rColumn.pDocument));
-			}
+			rColumn.Append(pItems[i].nRow, 
+						   CopyCellTo( pItems[i].pCell, pDocument, rColumn.pDocument ));
+        }
 	}
 }
 
@@ -1484,17 +1523,10 @@
 				aAdr.SetRow( pItems[i].nRow );
 				ScBaseCell* pNew;
 				if (bAsLink)
-				{
 					pNew = CreateRefCell( rColumn.pDocument, aAdr, i, nFlags );
-				}
 				else
-				{
 					pNew = CloneCell( i, nFlags, rColumn.pDocument, aAdr );
 
-					if ( pNew && pNew->GetNotePtr() && (nFlags & IDF_NOTE) == 0 )
-						pNew->DeleteNote();
-				}
-
 				if (pNew)
 					rColumn.Insert(pItems[i].nRow, pNew);
 			}
@@ -1526,10 +1558,8 @@
 		SCROW nRow = rPosCol.pItems[nPosIndex].nRow;
 		SCSIZE nThisIndex;
 		if ( Search( nRow, nThisIndex ) )
-		{
-			ScBaseCell* pNew = pItems[nThisIndex].pCell->Clone(pDestDoc);
-			rDestCol.Insert( nRow, pNew );
-		}
+			rDestCol.Insert( nRow, CopyCellTo( pItems[nThisIndex].pCell,
+											   pDocument, pDestDoc ) );
 	}
 
 	//	Dummy:
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/dociter.cxx sc/source/core/data/dociter.cxx
--- sc-pristine/source/core/data/dociter.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/dociter.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -737,6 +737,15 @@
 	}
 }
 
+const ScPostIt* ScCellIterator::GetNotePtr()
+{
+	ScBaseCell *pCell = GetThis();
+	if( pCell->IsSpecial() )
+		return pDoc->GetNotePtr( pCell );
+	else
+		return NULL;
+}
+
 ScBaseCell* ScCellIterator::GetFirst()
 {
 	if ( !ValidTab(nTab) )
@@ -1601,7 +1610,8 @@
 	if ( pCell && IsGreater( nNextCol, nNextRow, nCellCol, nCellRow ) )
 		pCell = aCellIter.GetNext( nCellCol, nCellRow );
 
-	while ( pCell && pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetNotePtr() )
+	while ( pCell && pCell->GetCellType() == CELLTYPE_NOTE 
+			&& !aCellIter.GetDocument()->GetNotePtr( pCell ) )
 		pCell = aCellIter.GetNext( nCellCol, nCellRow );
 
 	if ( pPattern && IsGreater( nNextCol, nNextRow, nAttrCol2, nAttrRow ) )
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
--- sc-pristine/source/core/data/documen2.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/documen2.cxx	2006-08-17 16:50:25.000000000 +0100
@@ -286,6 +286,7 @@
 #include "poolhelp.hxx"
 #include "listenercalls.hxx"
 #include "recursionhelper.hxx"
+#include "notetracker.hxx"
 
 // STATIC DATA -----------------------------------------------------------
 
@@ -415,6 +416,7 @@
 
 	aTrackTimer.SetTimeoutHdl( LINK( this, ScDocument, TrackTimeHdl ) );
 	aTrackTimer.SetTimeout( 100 );
+	pNoteTracker = new ScNoteTracker( this );
 }
 
 
@@ -581,6 +583,13 @@
 	delete pScriptTypeData;
 	delete pOtherObjects;
     delete pRecursionHelper;
+	if (pNoteTracker->aNotes.size())
+	{
+		fprintf (stderr, "Hideous leak: %p notes left\n",
+				 pNoteTracker->aNotes.size());
+		pNoteTracker->dump();
+	}
+	delete pNoteTracker;
 
     DBG_ASSERT( !pAutoNameCache, "AutoNameCache still set in dtor" );
 }
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/documen3.cxx sc/source/core/data/documen3.cxx
--- sc-pristine/source/core/data/documen3.cxx	2006-08-16 17:28:38.000000000 +0100
+++ sc/source/core/data/documen3.cxx	2006-08-18 15:23:54.000000000 +0100
@@ -1888,7 +1888,8 @@
 				{
 					if (aCellNote.IsShown())
 						ScDetectiveFunc( this, nTab ).HideComment( nCol, nRow );
-					SetNote(nCol,nRow,nTab,ScPostIt(this));
+					ScPostIt aNote(this); // urk ...
+					SetNote(nCol,nRow,nTab,aNote);//ScPostIt(this));
 					bDoNote = TRUE;
 				}
 			}
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/document.cxx sc/source/core/data/document.cxx
--- sc-pristine/source/core/data/document.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/document.cxx	2006-08-21 16:06:26.000000000 +0100
@@ -105,6 +105,7 @@
 #include <set>
 #endif
 #include "autonamecache.hxx"
+#include "notetracker.hxx"
 
 struct ScDefaultAttr
 {
@@ -2119,14 +2120,100 @@
 			pTab[nTab]->SetValue( nCol, nRow, rVal );
 }
 
+void ScDocument::SetNote( ScBaseCell *pCell, const ScPostIt& rNote )
+{
+	ScPostIt *pNote;
+
+	if (!pCell) {
+			fprintf (stderr, "evil error - set note on Null\n");
+//			fscanf (stdin, "");
+	}
+
+	if ( rNote.IsEmpty() )
+		DeleteNote( pCell );
+
+	else if ( !pCell->IsSpecial() )
+	{
+		pNote = new ScPostIt( rNote, this );
+		GetNoteTracker()->aNotes[ pCell ] = pNote;
+		pCell->SetSpecial( TRUE );
+	}
+	else
+		*(GetNoteTracker()->aNotes[ pCell ]) = ScPostIt( rNote, this );
+
+	fprintf (stderr, "Doc::SetNote on %p -> ('%s')\n",
+			 pCell, rtl::OUStringToOString( rNote.GetText(), RTL_TEXTENCODING_UTF8 ).getStr());
+}
 
 void ScDocument::SetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, const ScPostIt& rNote )
 {
-	if (VALIDTAB(nTab))
-		if (pTab[nTab])
-			pTab[nTab]->SetNote( nCol, nRow, rNote );
+	if ( VALIDTAB(nTab) && pTab[nTab] )
+	{
+		ScBaseCell *pCell;
+		pCell = pTab[nTab]->SetNoteInternal( nCol, nRow,
+											 rNote.IsEmpty() );
+
+		fprintf (stderr, "Doc::SetNote on %p at (%d,%d,%d) -> ('%s') (%d)\n",
+				 pCell, nTab, nCol, nRow,
+				 rtl::OUStringToOString( rNote.GetText(), RTL_TEXTENCODING_UTF8 ).getStr(),
+				 rNote.IsEmpty());
+
+		if (pCell)
+			SetNote( pCell, rNote );
+		else if (!rNote.IsEmpty()) {
+			fprintf (stderr, "evil error - set note on bogus null\n");
+//			fscanf (stdin, "");
+		}
+	}
+}
+
+void ScDocument::DeleteNote( ScBaseCell *pCell )
+{
+	if ( !pCell->IsSpecial() )
+		return;
+	fprintf (stderr, "Doc::DeleteNote %p\n", pCell );
+	delete GetNoteTracker()->aNotes[ pCell ];
+	GetNoteTracker()->aNotes.erase( pCell );
+	pCell->SetSpecial( false );
+}
+
+const ScPostIt *ScDocument::GetNotePtr( const ScBaseCell* pCell ) const
+{
+	if ( !pCell->IsSpecial() )
+		return NULL;
+	fprintf (stderr, "Doc::GetNotePtr %p -> %p ('%s')\n",
+			 pCell, GetNoteTracker()->aNotes[ pCell ],
+			 rtl::OUStringToOString( GetNoteTracker()->aNotes[ pCell ]->GetText(), RTL_TEXTENCODING_UTF8 ).getStr());
+	return GetNoteTracker()->aNotes[ pCell ];
+}
+
+ScNoteTracker *ScDocument::GetNoteTracker() const
+{
+	return pNoteTracker;
 }
 
+BOOL ScDocument::GetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, ScPostIt& rNote ) const
+{
+	ScBaseCell *pCell = NULL;
+	GetCell( nCol, nRow, nTab, pCell );
+
+	rNote.Clear();
+	if( !pCell || !pCell->IsSpecial() )
+		return FALSE;
+
+	ScPostIt *pPostIt = GetNoteTracker()->aNotes[ pCell ];
+	if (!pPostIt)
+	{
+		fprintf( stderr, "Odd special cell %p with no note at s %d c %d r %d\n",
+				 pCell, nTab, nCol, nRow );
+		return FALSE;
+	}
+	rNote = *pPostIt;
+
+	fprintf (stderr, "Doc::GetNote on %p -> ('%s')\n",
+			 pCell, rtl::OUStringToOString( rNote.GetText(), RTL_TEXTENCODING_UTF8 ).getStr());
+	return true;
+}
 
 void ScDocument::GetString( SCCOL nCol, SCROW nRow, SCTAB nTab, String& rString )
 {
@@ -2216,19 +2303,6 @@
 }
 
 
-BOOL ScDocument::GetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, ScPostIt& rNote )
-{
-	BOOL bHasNote = FALSE;
-
-	if ( VALIDTAB(nTab) && pTab[nTab] )
-		bHasNote = pTab[nTab]->GetNote( nCol, nRow, rNote );
-	else
-		rNote.Clear();
-
-	return bHasNote;
-}
-
-
 CellType ScDocument::GetCellType( const ScAddress& rPos ) const
 {
 	SCTAB nTab = rPos.Tab();
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/fillinfo.cxx sc/source/core/data/fillinfo.cxx
--- sc-pristine/source/core/data/fillinfo.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/fillinfo.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -326,6 +326,7 @@
 			CellInfo* pInfo = &pThisRowInfo->pCellInfo[nArrX];
 			pInfo->bEmptyCellText = TRUE;
 			pInfo->pCell = NULL;
+			pInfo->pNote = NULL;
 			if (bPaintMarks)
 				pInfo->bMarked = ( nX >= nBlockStartX && nX <= nBlockEndX
 								&& nY >= nBlockStartY && nY <= nBlockEndY );
@@ -409,6 +410,7 @@
                         RowInfo* pThisRowInfo = &pRowInfo[nArrY];
                         CellInfo* pInfo = &pThisRowInfo->pCellInfo[nArrX];
                         pInfo->pCell = pThisCol->pItems[nUIndex].pCell;
+						pInfo->pNote = GetNotePtr( pInfo->pCell );
                         if (pInfo->pCell->GetCellType() != CELLTYPE_NOTE)
                         {
                             pThisRowInfo->bEmptyText = FALSE;                   // Zeile nicht leer
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/postit.cxx sc/source/core/data/postit.cxx
--- sc-pristine/source/core/data/postit.cxx	2006-07-21 12:07:51.000000000 +0100
+++ sc/source/core/data/postit.cxx	2006-08-21 17:30:13.000000000 +0100
@@ -165,6 +165,21 @@
 {
 }
 
+#if 0
+// Not handling the document pointer explicitely is risky
+ScPostIt::ScPostIt( const ScPostIt &rCopy ) :
+		mpEditObj( rCopy.mpEditObj ),
+		mpDoc( rCopy.mpDoc ),
+		maStrDate( rCopy.maStrDate ),
+		maStrAuthor( rCopy.maStrAuthor ),
+		mbShown( rCopy.mbShown ),
+		maRectangle( rCopy.maRectangle ),
+		maItemSet( rCopy.maItemSet )
+{
+	DBG_ASSERT( true, "ScPostIt: dangerous copy constr." );
+}
+#endif
+
 const ScPostIt& ScPostIt::operator=( const ScPostIt& rCpy )
 {
     mpDoc       = rCpy.mpDoc;
@@ -379,6 +394,9 @@
 {
     SdrPage* pPage = NULL;
     ScDrawLayer* pDrawModel = rDoc.GetDrawLayer();
+
+	fprintf (stderr, "InsertObject\n");
+
     // Copying note cells between documents is one user scenario where the
     // DrawLayer may not exist. Use the ScModelObj() to create
     // and ensure there is a DrawLayer.
@@ -392,10 +410,13 @@
             pDrawModel= pScModelObj->MakeDrawLayer();
         if(pDrawModel)
             pPage = pDrawModel->GetPage(nTab);
+		fprintf (stderr, "attempt create model\n");
     }
     else
         pPage = pDrawModel->GetPage(nTab);
 
+	fprintf (stderr, "InsertObject : %p %p\n", pDrawModel, rDoc.GetDrawLayer());
+
     if(pPage && pObj)
     {
         if (!bVisible)
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/table2.cxx sc/source/core/data/table2.cxx
--- sc-pristine/source/core/data/table2.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/table2.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -850,11 +850,12 @@
 		aCol[nCol].SetValue( nRow, rVal );
 }
 
-
-void ScTable::SetNote( SCCOL nCol, SCROW nRow, const ScPostIt& rNote)
+ScBaseCell *ScTable::SetNoteInternal( SCCOL nCol, SCROW nRow, bool bEmpty )
 {
-	if (ValidColRow(nCol, nRow))
-		aCol[nCol].SetNote(nRow, rNote);
+	if (ValidColRow( nCol, nRow ))
+		return aCol[nCol].SetNoteInternal( nRow, bEmpty );
+	else
+		return NULL;
 }
 
 
@@ -893,7 +894,7 @@
 		rFormula.Erase();
 }
 
-
+/*
 BOOL ScTable::GetNote( SCCOL nCol, SCROW nRow, ScPostIt& rNote)
 {
 	BOOL bHasNote = FALSE;
@@ -905,7 +906,7 @@
 
 	return bHasNote;
 }
-
+*/
 
 CellType ScTable::GetCellType( SCCOL nCol, SCROW nRow ) const
 {
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/data/table6.cxx sc/source/core/data/table6.cxx
--- sc-pristine/source/core/data/table6.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/data/table6.cxx	2006-08-21 14:12:20.000000000 +0100
@@ -135,11 +135,11 @@
 				break;
 			case SVX_SEARCHIN_NOTE:
 				{
-				    ScPostIt aNote(pDocument);
-				    if(pCell->GetNote( aNote ))
+				    const ScPostIt *pNote;
+				    if( ( pNote = pDocument->GetNotePtr( pCell ) ) != NULL)
 				    {
-				        aString = aNote.GetText();
-				        bMultiLine = ( ((aNote.GetEditTextObject())->GetParagraphCount()) > 1 );
+				        aString = pNote->GetText();
+				        bMultiLine = ( ((pNote->GetEditTextObject())->GetParagraphCount()) > 1 );
 				    }
 				}
 				break;
@@ -253,21 +253,23 @@
 			while (bRepeat);
 			if (rSearchItem.GetCellType() == SVX_SEARCHIN_NOTE)
 			{
-				ScPostIt aNote(pDocument);
-				if(pCell->GetNote( aNote ))
+				const ScPostIt *pNote;
+				if ( ( pNote = pDocument->GetNotePtr( pCell ) ) != NULL )
 				{	
+					ScPostIt aNote( *pNote, pDocument );
                     aNote.SetText( aString );
 
                     // if note is visible - hide it to force a refresh of replaced text 
                     if (aNote.IsShown())
                     {
 			ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
+#warning Ropey - no idea what's going on ...
                         aNote.SetShown(FALSE);
                     }
 				                
                     // NB: rich text format is lost.
                     // This is also true of Cells.
-                    aCol[nCol].SetNote( nRow, aNote );
+					pDocument->SetNote( nCol, nRow, nTab, aNote );
             	}
 			}
 			else if ( cMatrixFlag != MM_NONE )
Only in sc/source/core/inc: notetracker.hxx
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/tool/chgtrack.cxx sc/source/core/tool/chgtrack.cxx
--- sc-pristine/source/core/tool/chgtrack.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/tool/chgtrack.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -1929,6 +1929,8 @@
 {
 	if ( pCell )
 	{
+		fprintf (stderr, "TESTME: SetValueString destroys note ?\n");
+		pDoc->DeleteNote( pCell );
 		pCell->Delete();
 		pCell = NULL;
 	}
@@ -2228,7 +2230,10 @@
 {
 	rStr.Erase();
 	if ( pCell )
+	{
+		pToDoc->DeleteNote( pCell );
 		pCell->Delete();
+	}
 	if ( ScChangeActionContent::GetContentCellType( pOrgCell ) )
 	{
 		pCell = pOrgCell->Clone( pToDoc );
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/core/tool/interpr2.cxx sc/source/core/tool/interpr2.cxx
--- sc-pristine/source/core/tool/interpr2.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/core/tool/interpr2.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -1484,7 +1484,7 @@
 				if ( bTempCell )
 				{
 					if ( bHasNote = (pVCell != NULL) )
-						bHasNote = pVCell->GetNote( aNote );
+						bHasNote = pDok->GetNotePtr( pVCell ) != NULL;
 					fSaveVal = 0.0;
 					pVCell = new ScValueCell( fSaveVal );
 					pDok->PutCell( aValueAdr, pVCell );
@@ -1631,9 +1631,10 @@
 				}
 				if ( bTempCell )
 				{
-					if ( bHasNote )
-						pVCell = new ScNoteCell( aNote, pDok );
-					else
+					if ( bHasNote ) {
+						pVCell = new ScNoteCell();
+						pDok->SetNote( pVCell, aNote );
+					} else
 						pVCell = NULL;
 					pDok->PutCell( aValueAdr, pVCell );
 				}
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/filter/excel/excel.cxx sc/source/filter/excel/excel.cxx
--- sc-pristine/source/filter/excel/excel.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/filter/excel/excel.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -95,7 +95,7 @@
     DBG_ASSERT( pDocument, "::ScImportExcel - no document" );
     if( !pDocument ) return eERR_INTERN;        // should not happen
 
-#if SCF_INCL_DUMPER
+#if 0
     {
         ::scf::dump::xls::Dumper aDumper( rMedium, pDocument->GetDocumentShell() );
         aDumper.Dump();
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/filter/excel/xetable.cxx sc/source/filter/excel/xetable.cxx
--- sc-pristine/source/filter/excel/xetable.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/filter/excel/xetable.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -2146,7 +2146,7 @@
             maRowBfr.AppendCell( xCell );
 
         // notes
-        const ScPostIt* pScNote = pScCell ? pScCell->GetNotePtr() : 0;
+        const ScPostIt* pScNote = rDoc.GetNotePtr( pScCell );
         if( pScNote || aAddNoteText.Len() )
             mxNoteList->AppendNewRecord( new XclExpNote( GetRoot(), aScPos, pScNote, aAddNoteText ) );
 
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/filter/xml/XMLChangeTrackingImportHelper.cxx sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx
--- sc-pristine/source/filter/xml/XMLChangeTrackingImportHelper.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -98,8 +98,10 @@
 
 ScMyCellInfo::~ScMyCellInfo()
 {
-	if (pCell)
+/*	if (pCell)
 		pCell->Delete();
+*/
+		fprintf (stderr, "FIXME: PostIt Note leaked");
 }
 
 ScBaseCell* ScMyCellInfo::CreateCell(ScDocument* pDoc)
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/filter/xml/XMLExportIterator.cxx sc/source/filter/xml/XMLExportIterator.cxx
--- sc-pristine/source/filter/xml/XMLExportIterator.cxx	2006-07-21 13:46:39.000000000 +0100
+++ sc/source/filter/xml/XMLExportIterator.cxx	2006-08-22 16:04:51.000000000 +0100
@@ -56,6 +56,9 @@
 #ifndef _COM_SUN_STAR_SHEET_XSHEETANNOTATIONSSUPPLIER_HPP_
 #include <com/sun/star/sheet/XSheetAnnotationsSupplier.hpp>
 #endif
+#ifndef _COM_SUN_STAR_SHEET_XSHEETANNOTATIONSHAPESUPPLIER_HPP_
+#include <com/sun/star/sheet/XSheetAnnotationShapeSupplier.hpp>
+#endif
 #ifndef _COM_SUN_STAR_CONTAINER_XENUMERATIONACCESS_HPP_
 #include <com/sun/star/container/XEnumerationAccess.hpp>
 #endif
@@ -738,12 +741,18 @@
 void ScMyNotEmptyCellsIterator::HasAnnotation(ScMyCell& aCell)
 {
 	aCell.bHasAnnotation = sal_False;
+	fprintf( stderr, "HasAnnotation %d, %d (nelems %d) ",
+			 aCell.aCellAddress.Column, aCell.aCellAddress.Row,
+			 aAnnotations.size() );
 	if (!aAnnotations.empty())
 	{
 		ScMyExportAnnotationList::iterator aItr(aAnnotations.begin());
+		fprintf( stderr, " match %d, %d ? ",
+				 aItr->aCellAddress.Column, aItr->aCellAddress.Row );
 		if ((aCell.aCellAddress.Column == aItr->aCellAddress.Column) &&
 			(aCell.aCellAddress.Row == aItr->aCellAddress.Row))
 		{
+			fprintf (stderr, "yes");
 			aCell.xAnnotation.set(aItr->xAnnotation);
 			uno::Reference<text::XSimpleText> xSimpleText(aCell.xAnnotation, uno::UNO_QUERY);
 			if (aCell.xAnnotation.is() && xSimpleText.is())
@@ -754,7 +763,10 @@
 			}
 			aAnnotations.erase(aItr);
 		}
+		else
+			fprintf (stderr, "no");
 	}
+	fprintf (stderr, "has annotation %d\n", aCell.bHasAnnotation);
 
     // test - bypass the API
     // if (xCellRange.is())
@@ -793,6 +805,17 @@
 						if (aAnnotation.xAnnotation.is())
 						{
 							aAnnotation.aCellAddress = aAnnotation.xAnnotation->getPosition();
+#if 0
+							uno::Reference<sheet::XSheetAnnotationShapeSupplier> xAnSup(aAnnotation.xAnnotation, uno::UNO_QUERY);
+							if (xAnSup.is())
+							{
+									aAnnotation.xNoteShape = xAnSup->getAnnotationShape();
+									fprintf (stderr, "Forced drawing layer create [!?]\n");
+									// Force construction of Drawing Layer & postit layout
+									(void)aAnnotation.xNoteShape->getPosition();
+							} else
+									fprintf (stderr, "Missing xAnSup ptr\n");
+#endif
 							aAnnotations.push_back(aAnnotation);
 						}
 					}
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/filter/xml/xmlexprt.cxx sc/source/filter/xml/xmlexprt.cxx
--- sc-pristine/source/filter/xml/xmlexprt.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/filter/xml/xmlexprt.cxx	2006-08-22 16:53:29.000000000 +0100
@@ -64,6 +64,9 @@
 #ifndef SC_CELLSUNO_HXX
 #include "cellsuno.hxx"
 #endif
+#ifndef SC_NOTESUNO_HXX
+#include "notesuno.hxx"
+#endif
 #ifndef SC_CELL_HXX
 #include "cell.hxx"
 #endif
@@ -676,6 +679,8 @@
                 if (!pSharedData)
 					CreateSharedData(nTableCount);
 				pCellStyles->AddNewTable(nTableCount - 1);
+				fprintf (stderr, "ScXMLExport::CollectSharedData::HasDrawPages ? %d\n",
+						 HasDrawPages(xSpreadDoc));
 				if (HasDrawPages(xSpreadDoc))
 				{
 					rtl::OUString sCaptionPoint( RTL_CONSTASCII_USTRINGPARAM( "CaptionPoint" ));
@@ -683,6 +688,8 @@
 					{
                         nCurrentTable = nTable;
 						uno::Reference<drawing::XDrawPageSupplier> xDrawPageSupplier(xIndex->getByIndex(nTable), uno::UNO_QUERY);
+						fprintf (stderr, "ScXMLExport::CollectSharedData::tab %d ? %d\n",
+								 nTable, xDrawPageSupplier.is());
 						if (xDrawPageSupplier.is())
 						{
 							uno::Reference<drawing::XDrawPage> xDrawPage(xDrawPageSupplier->getDrawPage());
@@ -765,8 +772,11 @@
 	GetProgressBarHelper()->SetValue(0);
 }
 
-void ScXMLExport::CollectShapesAutoStyles(const sal_Int32 nTableCount)
+void ScXMLExport::CollectShapesAutoStyles(
+	const uno::Reference<container::XIndexAccess> &xIndex,
+	const sal_Int32 nTableCount)
 {
+	fprintf (stderr, "CollectShapesAutoStyles\n");
 	pSharedData->SortShapesContainer();
     pSharedData->SortNoteShapes();
 	const ScMyShapeList* pShapeList(NULL);
@@ -776,100 +786,125 @@
 		pShapeList = pSharedData->GetShapesContainer()->GetShapes();
 		aShapeItr = pShapeList->begin();
 	}
-	if (pSharedData->HasDrawPage())
+
+	for (SCTAB nTable = 0; nTable < nTableCount; ++nTable)
 	{
-		for (SCTAB nTable = 0; nTable < nTableCount; ++nTable)
+		uno::Reference <sheet::XSpreadsheet> xTable(xIndex->getByIndex(nTable), uno::UNO_QUERY);
+		if (!xTable.is())
+			continue;
+
+		/*
+		 * This Cell / Note scanning code may cause the creation of a
+		 * DrawPage, check for that later.
+		 */
+		uno::Reference<sheet::XSheetAnnotationsSupplier> xSheetAnnotationsSupplier (xTable, uno::UNO_QUERY);
+		if (xSheetAnnotationsSupplier.is())
 		{
-		    uno::Reference<drawing::XDrawPage> xDrawPage(pSharedData->GetDrawPage(nTable));
-		    uno::Reference<drawing::XShapes> xShapes (xDrawPage, uno::UNO_QUERY);
+			uno::Reference<container::XEnumerationAccess> xAnnotationAccess (
+				xSheetAnnotationsSupplier->getAnnotations(), uno::UNO_QUERY);
+			if (xAnnotationAccess.is())
+			{
+				uno::Reference<container::XEnumeration> xAnnotations(xAnnotationAccess->createEnumeration());
+				if (xAnnotations.is())
+				{
+					while (xAnnotations->hasMoreElements())
+					{
+						uno::Reference<sheet::XSheetAnnotation> xAnnotation(
+							xAnnotations->nextElement(), uno::UNO_QUERY);
+						if (!xAnnotation.is() || xAnnotation->getIsVisible())
+							continue;
 
-            uno::Reference<drawing::XShapes> xNoteShapes;
-            ::std::vector < uno::Reference < drawing::XShape > > aNoteShapes;
-            ScCellIterator aCellIter( pDoc, 0,0, nTable, MAXCOL,MAXROW, nTable );
-		    ScBaseCell* pCell = aCellIter.GetFirst();
-		    while (pCell)
-		    {
-                const ScPostIt* pScNote = pCell->GetNotePtr();
-			    if (pScNote && !pScNote->IsShown())
-                {
-                    const SfxItemSet& rSet = pScNote->GetItemSet();
+						uno::Reference<sheet::XSheetAnnotationShapeSupplier> xAnSup(xAnnotation, uno::UNO_QUERY);
+						if (!xAnSup.is())
+							continue;
 
-                    // In order to transform the SfxItemSet to an EscherPropertyContainer
-                    // and export the properties, we need to recreate the drawing object and
-                    // pass this to XclObjComment() for processing.
-                    SdrCaptionObj* pCaption = new SdrCaptionObj( pScNote->GetRectangle() );
-                    pCaption->SetMergedItemSet(rSet);
+						uno::Reference < drawing::XShape > xShape(xAnSup->getAnnotationShape(), uno::UNO_QUERY);
+						if (!xShape.is())
+							continue;
 
-                    if(const EditTextObject* pEditText = pScNote->GetEditTextObject())
-                    {
-                        OutlinerParaObject* pOPO = new OutlinerParaObject( *pEditText );
-                        pOPO->SetOutlinerMode( OUTLINERMODE_TEXTOBJECT );
-                        pCaption->NbcSetOutlinerParaObject( pOPO );
-                    }
+						fprintf (stderr, "woah ... forced drawing layer create [!?]\n");
+						// can forces construction of Drawing Layer
+						(void)xShape->getPosition();
 
-                    pScNote->InsertObject(pCaption, *pDoc, aCellIter.GetTab(), sal_False);
+						ScAddress aCellPos;
+						table::CellAddress aCellAddress = xAnnotation->getPosition();
+						ScUnoConversion::FillScAddress( aCellPos, aCellAddress );
 
-                    uno::Reference<drawing::XShape> xShape(pCaption->getUnoShape(), uno::UNO_QUERY);
-                    if (xShape.is())
-                        pSharedData->AddNoteObj(xShape, ScAddress(aCellIter.GetCol(), aCellIter.GetRow(), aCellIter.GetTab()));
-                }
-			    pCell = aCellIter.GetNext();
-		    }
+						fprintf (stderr, "AddNoteObj!\n");
+                        pSharedData->AddNoteObj( xShape, aCellPos );
+ 						GetShapeExport()->collectShapeAutoStyles( xShape );
+					}
+				}
+			}
+		}
 
-            if (xShapes.is())
-		    {
+		// Now look for sheet shapes NB. re-check for the DrawPage ...
+		uno::Reference<drawing::XDrawPageSupplier> xDrawPageSupplier(xTable, uno::UNO_QUERY);
+		if (xDrawPageSupplier.is())
+		{
+			uno::Reference<drawing::XDrawPage> xDrawPage(xDrawPageSupplier->getDrawPage());
+			uno::Reference<drawing::XShapes> xShapes(xDrawPage, uno::UNO_QUERY);
+
+/*
+	    uno::Reference<drawing::XDrawPage> xDrawPage(pSharedData->GetDrawPage(nTable));
+	    uno::Reference<drawing::XShapes> xShapes (xDrawPage, uno::UNO_QUERY);
+*/
+
+			fprintf (stderr, "Sheet shapes... %d\n", xShapes.is());
+			if (xShapes.is())
+			{
 				GetShapeExport()->seekShapes(xShapes);
 				uno::Reference< form::XFormsSupplier2 > xFormsSupplier( xDrawPage, uno::UNO_QUERY );
-				if( xFormsSupplier.is() && xFormsSupplier->hasForms() )
+			if( xFormsSupplier.is() && xFormsSupplier->hasForms() )
+			{
+				GetFormExport()->examineForms(xDrawPage);
+				pSharedData->SetDrawPageHasForms(nTable, sal_True);
+			}
+			ScMyTableShapes* pTableShapes(pSharedData->GetTableShapes());
+			if (pTableShapes)
+			{
+				ScMyTableXShapes::iterator aItr((*pTableShapes)[nTable].begin());
+				ScMyTableXShapes::iterator aEndItr((*pTableShapes)[nTable].end());
+				while (aItr != aEndItr)
 				{
-					GetFormExport()->examineForms(xDrawPage);
-					pSharedData->SetDrawPageHasForms(nTable, sal_True);
+					GetShapeExport()->collectShapeAutoStyles(*aItr);
+					IncrementProgressBar(sal_False);
+					++aItr;
 				}
-				ScMyTableShapes* pTableShapes(pSharedData->GetTableShapes());
-				if (pTableShapes)
+			}
+			if (pShapeList)
+			{
+				ScMyShapeList::const_iterator aEndItr(pShapeList->end());
+				while (aShapeItr != aEndItr && (static_cast<sal_Int32>(aShapeItr->aAddress.Tab()) == nTable))
 				{
-					ScMyTableXShapes::iterator aItr((*pTableShapes)[nTable].begin());
-					ScMyTableXShapes::iterator aEndItr((*pTableShapes)[nTable].end());
-					while (aItr != aEndItr)
-					{
-						GetShapeExport()->collectShapeAutoStyles(*aItr);
-						IncrementProgressBar(sal_False);
-						++aItr;
-					}
+					GetShapeExport()->collectShapeAutoStyles(aShapeItr->xShape);
+					IncrementProgressBar(sal_False);
+					++aShapeItr;
 				}
-				if (pShapeList)
+			}
+			const ScMyNoteShapeList* pNoteShapes = NULL;
+			ScMyNoteShapeList::const_iterator aNoteShapeItr;
+			ScMyNoteShapeList::const_iterator aNoteShapeEndItr;
+			if (pSharedData->GetNoteShapes())
+			{
+				pNoteShapes = pSharedData->GetNoteShapes()->GetNotes();
+				if (pNoteShapes)
 				{
-                    ScMyShapeList::const_iterator aEndItr(pShapeList->end());
-					while (aShapeItr != aEndItr && (static_cast<sal_Int32>(aShapeItr->aAddress.Tab()) == nTable))
-					{
-						GetShapeExport()->collectShapeAutoStyles(aShapeItr->xShape);
-						IncrementProgressBar(sal_False);
-						++aShapeItr;
-					}
+					aNoteShapeItr = pNoteShapes->begin();
+					aNoteShapeEndItr = pNoteShapes->end();
 				}
-                const ScMyNoteShapeList* pNoteShapes = NULL;
-                ScMyNoteShapeList::const_iterator aNoteShapeItr;
-                ScMyNoteShapeList::const_iterator aNoteShapeEndItr;
-                if (pSharedData->GetNoteShapes())
-                {
-                    pNoteShapes = pSharedData->GetNoteShapes()->GetNotes();
-                    if (pNoteShapes)
-                    {
-                        aNoteShapeItr = pNoteShapes->begin();
-                        aNoteShapeEndItr = pNoteShapes->end();
-                    }
-                }
-                if (pNoteShapes)
-                {
-                    while (aNoteShapeItr != aNoteShapeEndItr)
-                    {
-                        if (static_cast<sal_Int32>(aNoteShapeItr->aPos.Tab()) == nTable)
-                            GetShapeExport()->collectShapeAutoStyles(aNoteShapeItr->xShape);
-                        ++aNoteShapeItr;
-                    }
-                }
 			}
-        }
+			if (pNoteShapes)
+			{
+				while (aNoteShapeItr != aNoteShapeEndItr)
+				{
+					if (static_cast<sal_Int32>(aNoteShapeItr->aPos.Tab()) == nTable)
+						GetShapeExport()->collectShapeAutoStyles(aNoteShapeItr->xShape);
+					++aNoteShapeItr;
+				}
+			}
+		}
+		}
 	}
     pSharedData->SortNoteShapes(); // sort twice, because some more shapes are added
 }
@@ -1801,7 +1836,7 @@
 					rtl::OUString SC_NUMBERFORMAT(RTL_CONSTASCII_USTRINGPARAM(SC_UNONAME_NUMFMT));
 					sal_Int32 nTableCount(xIndex->getCount());
 					pCellStyles->AddNewTable(nTableCount - 1);
-					CollectShapesAutoStyles(nTableCount);
+					CollectShapesAutoStyles(xIndex, nTableCount);
 					for (sal_Int32 nTable = 0; nTable < nTableCount; ++nTable)
 					{
                         uno::Reference <sheet::XSpreadsheet> xTable(xIndex->getByIndex(nTable), uno::UNO_QUERY);
@@ -2809,7 +2844,13 @@
         pCurrentCell = &rMyCell;
 
         if(rMyCell.xNoteShape.is())
+		{
+			fprintf (stderr, "xNoteShape: export ...\n");
             GetShapeExport()->exportShape(rMyCell.xNoteShape, SEF_DEFAULT|SEF_EXPORT_ANNOTATION, NULL);
+		} else {
+			fprintf (stderr, "xNoteShape - is not ...\n");
+			// URGH !? bug here ...
+		}
 
         pCurrentCell = NULL;
 
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/filter/xml/xmlexprt.hxx sc/source/filter/xml/xmlexprt.hxx
--- sc-pristine/source/filter/xml/xmlexprt.hxx	2006-01-31 18:37:13.000000000 +0000
+++ sc/source/filter/xml/xmlexprt.hxx	2006-08-22 15:55:35.000000000 +0100
@@ -140,7 +140,8 @@
 
 	sal_Bool		HasDrawPages(com::sun::star::uno::Reference <com::sun::star::sheet::XSpreadsheetDocument>& xDoc);
 	void			CollectSharedData(sal_Int32& nTableCount, sal_Int32& nShapesCount, const sal_Int32 nCellCount);
-	void			CollectShapesAutoStyles(const sal_Int32 nTableCount);
+	void			CollectShapesAutoStyles(const com::sun::star::uno::Reference <com::sun::star::container::XIndexAccess>& xIndex,
+											const sal_Int32 nTableCount);
 	void			WriteTablesView(const com::sun::star::uno::Any& aTableView);
 	void			WriteView(const com::sun::star::uno::Any& aView);
 	virtual void _ExportFontDecls();
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/docshell/dbdocfun.cxx sc/source/ui/docshell/dbdocfun.cxx
--- sc-pristine/source/ui/docshell/dbdocfun.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/docshell/dbdocfun.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -1120,7 +1120,7 @@
 	ScBaseCell* pCell = aIter.GetFirst();
 	while (pCell)
 	{
-		if ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() )		// real content?
+		if ( pCell->GetCellType() != CELLTYPE_NOTE || aIter.GetNotePtr() )		// real content?
 		{
 			if ( !rExcept.In( ScAddress( aIter.GetCol(), aIter.GetRow(), aIter.GetTab() ) ) )
 				return FALSE;		// cell found
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/docshell/docfunc.cxx sc/source/ui/docshell/docfunc.cxx
--- sc-pristine/source/ui/docshell/docfunc.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/docshell/docfunc.cxx	2006-08-17 14:49:22.000000000 +0100
@@ -721,6 +721,7 @@
 
 	SCTAB* pTabs = NULL;
 	ScBaseCell** ppOldCells = NULL;
+	ScPostIt** ppOldPostIts = NULL;
 	BOOL* pHasFormat = NULL;
 	ULONG* pOldFormats = NULL;
 	ScBaseCell* pDocCell = pDoc->GetCell( rPos );
@@ -731,6 +732,9 @@
 		pTabs[0] = rPos.Tab();
 		ppOldCells	= new ScBaseCell*[1];
 		ppOldCells[0] = pDocCell ? pDocCell->Clone(pDoc) : NULL;
+		const ScPostIt *pNote = pDocCell ? pDoc->GetNotePtr( pDocCell ) : NULL;
+		ppOldPostIts = new ScPostIt*[1];
+		ppOldPostIts[0] = pNote ? new ScPostIt( *pNote, pDoc ) : NULL;
 
 		pHasFormat = new BOOL[1];
 		pOldFormats = new ULONG[1];
@@ -752,7 +756,7 @@
 	{
 		//	wegen ChangeTracking darf UndoAction erst nach SetString angelegt werden
 		rDocShell.GetUndoManager()->AddUndoAction(new ScUndoEnterData( &rDocShell, rPos.Col(),rPos.Row(),rPos.Tab(), 1,pTabs,
-									 ppOldCells, pHasFormat, pOldFormats, rText, NULL ) );
+									 ppOldCells, ppOldPostIts, pHasFormat, pOldFormats, rText, NULL ) );
 	}
 
 	if ( bEditDeleted || pDoc->HasAttrib( ScRange(rPos), HASATTR_NEEDHEIGHT ) )
@@ -770,7 +774,6 @@
 
 BOOL ScDocFunc::PutCell( const ScAddress& rPos, ScBaseCell* pNewCell, BOOL bApi )
 {
-
     ScDocShellModificator aModificator( rDocShell );
 	ScDocument* pDoc = rDocShell.GetDocument();
 	BOOL bUndo (pDoc->IsUndoEnabled());
@@ -784,6 +787,7 @@
 	    {
 		    if (!bApi)
 			    rDocShell.ErrorMessage(aTester.GetMessageId());
+			pDoc->DeleteNote( pNewCell );
 		    pNewCell->Delete();
 		    return FALSE;
 	    }
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/docshell/docsh.cxx sc/source/ui/docshell/docsh.cxx
--- sc-pristine/source/ui/docshell/docsh.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/docshell/docsh.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -511,7 +511,7 @@
 		    ScBaseCell* pCell = aCellIter.GetFirst();
 		    while (pCell && !bFound)
 		    {
-                if (pCell->GetNotePtr())
+                if (aCellIter.GetNotePtr())
                     bFound = sal_True;
 				pCell = aCellIter.GetNext();
             }
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/inc/undocell.hxx sc/source/ui/inc/undocell.hxx
--- sc-pristine/source/ui/inc/undocell.hxx	2005-09-08 23:02:19.000000000 +0100
+++ sc/source/ui/inc/undocell.hxx	2006-08-17 14:12:27.000000000 +0100
@@ -91,7 +91,8 @@
 					ScUndoEnterData( ScDocShell* pNewDocShell,
 							SCCOL nNewCol, SCROW nNewRow, SCTAB nNewTab,
 							SCTAB nNewCount, SCTAB* pNewTabs,
-							ScBaseCell** ppOldData, BOOL* pHasForm, ULONG* pOldForm,
+							ScBaseCell** ppOldData, ScPostIt** ppOldPostIts,
+							BOOL* pHasForm, ULONG* pOldForm,
 							const String& rNewStr, EditTextObject* pObj = NULL );
 	virtual 		~ScUndoEnterData();
 
@@ -106,6 +107,7 @@
 	String			aNewString;
 	SCTAB*			pTabs;
 	ScBaseCell**	ppOldCells;
+	ScPostIt**      ppOldPostIts;
 	BOOL*			pHasFormat;
 	ULONG*			pOldFormats;
 	EditTextObject*	pNewEditData;
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/navipi/content.cxx sc/source/ui/navipi/content.cxx
--- sc-pristine/source/ui/navipi/content.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/navipi/content.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -901,7 +901,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = aIter.GetNotePtr();
 			if (pNote)
 				InsertContent( SC_CONTENT_NOTE, lcl_NoteString(*pNote) );
 
@@ -924,7 +924,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = aIter.GetNotePtr();
 			if (pNote)
 			{
 				if (nFound == nIndex)
@@ -959,7 +959,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell && bEqual)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = aIter.GetNotePtr();
 			if (pNote)
 			{
 				if ( !pEntry )
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/undo/undocell.cxx sc/source/ui/undo/undocell.cxx
--- sc-pristine/source/ui/undo/undocell.cxx	2006-07-21 15:26:49.000000000 +0100
+++ sc/source/ui/undo/undocell.cxx	2006-08-21 14:24:59.000000000 +0100
@@ -187,7 +187,8 @@
 
 ScUndoEnterData::ScUndoEnterData( ScDocShell* pNewDocShell,
 			SCCOL nNewCol, SCROW nNewRow, SCTAB nNewTab,
-			SCTAB nNewCount, SCTAB* pNewTabs, ScBaseCell** ppOldData,
+			SCTAB nNewCount, SCTAB* pNewTabs,
+			ScBaseCell** ppOldData, ScPostIt** ppOldPostItData, 
 			BOOL* pHasForm, ULONG* pOldForm,
 			const String& rNewStr, EditTextObject* pObj ) :
 	ScSimpleUndo( pNewDocShell ),
@@ -197,6 +198,7 @@
 	nCount( nNewCount ),
 	pTabs( pNewTabs ),
 	ppOldCells( ppOldData ),
+	ppOldPostIts( ppOldPostItData ),
 	pHasFormat( pHasForm ),
 	pOldFormats( pOldForm ),
 	aNewString( rNewStr ),
@@ -210,8 +212,11 @@
 	ScDocumentPool* pPool = pDocShell->GetDocument()->GetPool();
 
 	for (USHORT i=0; i<nCount; i++)
+	{
 		if (ppOldCells[i])
 			ppOldCells[i]->Delete();
+		delete ppOldPostIts[i];
+	}
 	delete[] ppOldCells;
 
 	delete[] pHasFormat;
@@ -289,6 +294,9 @@
 			pNewCell = NULL;
 		pDoc->PutCell( nCol, nRow, pTabs[i], pNewCell );
 
+		if ( pNewCell && ppOldPostIts[i] )
+			pDoc->SetNote( pNewCell, *ppOldPostIts[i] );
+
 		if (pHasFormat && pOldFormats)
 		{
 			if ( pHasFormat[i] )
@@ -316,6 +324,8 @@
 {
 	BeginRedo();
 
+	fprintf (stderr, "TESTME: wtf... ScUndoEnterData::Redo()\n");
+
 	ScDocument* pDoc = pDocShell->GetDocument();
 	for (USHORT i=0; i<nCount; i++)
 	{
@@ -917,8 +927,8 @@
 								const ScPostIt& rOld, const ScPostIt& rNew ) :
 	ScSimpleUndo( pNewDocShell ),
 	aPos		( rNewPos ),
-	aOldNote	( rOld ),
-	aNewNote	( rNew )
+	aOldNote	( rOld, rOld.GetDocument() ),
+	aNewNote	( rNew, rNew.GetDocument() )
 {
 }
 
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/unoobj/cellsuno.cxx sc/source/ui/unoobj/cellsuno.cxx
--- sc-pristine/source/ui/unoobj/cellsuno.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/unoobj/cellsuno.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -3430,7 +3430,7 @@
 			while (pCell)
 			{
 				//	Notizen zaehlen als nicht-leer
-				if ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() )
+				if ( pCell->GetCellType() != CELLTYPE_NOTE || aIter.GetNotePtr() )
 					aMarkData.SetMultiMarkArea(
 							ScRange( aIter.GetCol(), aIter.GetRow(), aIter.GetTab() ),
 							FALSE );
@@ -3472,7 +3472,7 @@
 			while (pCell)
 			{
 				BOOL bAdd = FALSE;
-				if ( pCell->GetNotePtr() && ( nContentFlags & sheet::CellFlags::ANNOTATION ) )
+				if ( aIter.GetNotePtr() && ( nContentFlags & sheet::CellFlags::ANNOTATION ) )
 					bAdd = TRUE;
 				else
 					switch ( pCell->GetCellType() )
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/unoobj/docuno.cxx sc/source/ui/unoobj/docuno.cxx
--- sc-pristine/source/ui/unoobj/docuno.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/unoobj/docuno.cxx	2006-08-22 16:09:20.000000000 +0100
@@ -1469,6 +1469,8 @@
 		}
 		else if ( aString.EqualsAscii( SC_UNO_HASDRAWPAGES ) )
 		{
+			fprintf (stderr, "get prop 'HasDrawPages: %d'\n",
+					 pDocShell->GetDocument()->GetDrawLayer() != 0);
 			ScUnoHelpFunctions::SetBoolInAny( aRet, (pDocShell->GetDocument()->GetDrawLayer() != 0) );
 		}
         else if ( aString.EqualsAscii( SC_UNO_BASICLIBRARIES ) )
@@ -2778,10 +2780,11 @@
 		ScBaseCell* pCell = aCellIter.GetFirst();
 		while (pCell)
 		{
-			if (pCell->GetNotePtr())
+			if (pDoc->GetNotePtr( pCell ))
 			{
 				if (nFound == nIndex)
 				{
+					fprintf (stderr, "ScAnnotationsObj::getbyindex(%d) found\n", nFound);
 					rPos = ScAddress( aCellIter.GetCol(), aCellIter.GetRow(), aCellIter.GetTab() );
 					return TRUE;
 				}
@@ -2790,6 +2793,7 @@
 			pCell = aCellIter.GetNext();
 		}
 	}
+	fprintf (stderr, "ScAnnotationsObj::getbyindex(%d) not found\n", nIndex);
 	return FALSE;	// nicht gefunden
 }
 
@@ -2859,15 +2863,19 @@
 	if (pDocShell)
 	{
 		ScDocument* pDoc = pDocShell->GetDocument();
-		ScCellIterator aCellIter( pDoc, 0,0, nTab, MAXCOL,MAXROW, nTab );
-		ScBaseCell* pCell = aCellIter.GetFirst();
-		while (pCell)
-		{
-			if (pCell->GetNotePtr())
-				++nCount;
-			pCell = aCellIter.GetNext();
+		if (1) // pDoc->GetNoteTracker()->aNotes.size())
+		{	/* FIXME: iterate over the note tracker instead ... (way faster) */
+			ScCellIterator aCellIter( pDoc, 0,0, nTab, MAXCOL,MAXROW, nTab );
+			ScBaseCell* pCell = aCellIter.GetFirst();
+			while (pCell)
+			{
+				if (aCellIter.GetNotePtr())
+					++nCount;
+				pCell = aCellIter.GetNext();
+			}
 		}
 	}
+	fprintf (stderr, "ScAnnotationsObj::getCount -> %d\n", nCount);
 	return nCount;
 }
 
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/view/output.cxx sc/source/ui/view/output.cxx
--- sc-pristine/source/ui/view/output.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/view/output.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -2236,7 +2236,7 @@
 					// use origin's pCell for NotePtr test below
 				}
 
-				if ( pCell && pCell->GetNotePtr() && ( bIsMerged ||
+				if ( pCell && pInfo->pNote && ( bIsMerged ||
 						( !pInfo->bHOverlapped && !pInfo->bVOverlapped ) ) )
 				{
 					if (bFirst)
@@ -2264,7 +2264,11 @@
 						}
 					}
 					if ( bLayoutRTL ? ( nMarkX >= 0 ) : ( nMarkX < nScrX+nScrW ) )
+					{
+						fprintf (stderr, "Render note mark %p size %d\n", pInfo->pNote,
+								 sizeof (CellInfo));
 						pDev->DrawRect( Rectangle( nMarkX,nPosY,nMarkX+2*nLayoutSign,nPosY+2 ) );
+					}
 				}
 
 				nPosX += pRowInfo[0].pCellInfo[nX+1].nWidth * nLayoutSign;
@@ -2314,7 +2318,7 @@
                     // use origin's pCell for NotePtr test below
                 }
 
-                if ( pCell && pCell->GetNotePtr() && ( bIsMerged ||
+                if ( pCell && pInfo->pNote && ( bIsMerged ||
                         ( !pInfo->bHOverlapped && !pInfo->bVOverlapped ) ) )
                 {
                     long nNoteWidth = (long)( SC_CLIPMARK_SIZE * nPPTX );
@@ -2334,7 +2338,6 @@
                     if ( bLayoutRTL ? ( nMarkX >= 0 ) : ( nMarkX < nScrX+nScrW ) )
                     {
                         Rectangle aNoteRect( nMarkX, nPosY, nMarkX+nNoteWidth*nLayoutSign, nPosY+nNoteHeight );
-                        const ScPostIt* pNote = pCell->GetNotePtr();
 
                         // Note title is the cell address (as on printed note pages)
                         String aTitle;
@@ -2342,7 +2345,7 @@
                         aAddress.Format( aTitle, SCA_VALID, pDoc );
 
                         // Content has to be a simple string without line breaks
-                        String aContent = pNote->GetText();
+                        String aContent = pInfo->pNote->GetText();
                         aContent.ConvertLineEnd(LINEEND_LF);
                         xub_StrLen nPos;
                         while ( (nPos=aContent.Search('\n')) != STRING_NOTFOUND )
@@ -2395,7 +2398,7 @@
 			{
 				CellInfo* pInfo = &pThisRowInfo->pCellInfo[nX+1];
 				ScBaseCell* pCell = pInfo->pCell;
-				if ( pCell && pCell->GetNotePtr() )		// auch verdeckte wegen der Numerierung
+				if ( pCell && pInfo->pNote )		// auch verdeckte wegen der Numerierung
 				{
                     aStr = String::CreateFromInt32( lcl_FindInList( rPosList,
                                 ScAddress( nX, pThisRowInfo->nRowNo, nTab)));
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/view/prevwsh.cxx sc/source/ui/view/prevwsh.cxx
--- sc-pristine/source/ui/view/prevwsh.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/view/prevwsh.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -928,7 +928,7 @@
 	if (pAccessibilityBroadcaster)
 		rObject.EndListening( *pAccessibilityBroadcaster );
 	else
-		DBG_ERROR("kein Accessibility-Broadcaster??!?");
+		DBG_ERROR("kein Accessibility-Broadcaster?!?");
 }
 
 void ScPreviewShell::BroadcastAccessibility( const SfxHint &rHint )
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/view/printfun.cxx sc/source/ui/view/printfun.cxx
--- sc-pristine/source/ui/view/printfun.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/view/printfun.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -1979,8 +1979,8 @@
 		if (pPos)
 		{
 			ScBaseCell* pCell = pDoc->GetCell( *pPos);
-			const ScPostIt* pNote = pCell->GetNotePtr();
-			if (pNote)
+			const ScPostIt* pNote = pDoc->GetNotePtr( pCell );
+			if( pNote )
 			{
 				if(const EditTextObject *pEditText = pNote->GetEditTextObject())
 				    pEditEngine->SetText(*pEditText);
@@ -2625,7 +2625,7 @@
 			ScBaseCell* pCell = aIter.GetNext( nCol, nRow );
 			while (pCell)
 			{
-				if (pCell->GetNotePtr())
+				if ( pDoc->GetNotePtr( pCell ) )
 				{
 					aNotePosList.Insert( new ScAddress( nCol,nRow,nPrintTab ), LIST_APPEND );
 					++nCount;
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/view/tabvwshh.cxx sc/source/ui/view/tabvwshh.cxx
--- sc-pristine/source/ui/view/tabvwshh.cxx	2006-08-17 14:01:43.000000000 +0100
+++ sc/source/ui/view/tabvwshh.cxx	2006-08-17 14:06:13.000000000 +0100
@@ -259,7 +259,7 @@
 			pDoc->RemoveUnoObject(rObject);
 	}
 	else
-		DBG_ERROR("kein Accessibility-Broadcaster??!?");
+		DBG_ERROR("kein Accessibility-Broadcaster?!?");
 }
 
 void ScTabViewShell::BroadcastAccessibility( const SfxHint &rHint )
diff -x unxlngi6.pro -x '*~' -x '*.orig' -u -r sc-pristine/source/ui/view/viewfunc.cxx sc/source/ui/view/viewfunc.cxx
--- sc-pristine/source/ui/view/viewfunc.cxx	2006-08-16 17:28:38.000000000 +0100
+++ sc/source/ui/view/viewfunc.cxx	2006-08-17 14:45:42.000000000 +0100
@@ -370,6 +370,7 @@
 		BYTE nOldScript = 0;
 
 		ScBaseCell** ppOldCells	= NULL;
+		ScPostIt** ppOldPostIts = NULL;
 		BOOL* pHasFormat		= NULL;
 		ULONG* pOldFormats		= NULL;
 		SCTAB* pTabs			= NULL;
@@ -377,6 +378,7 @@
 		if ( bRecord )
 		{
 			ppOldCells		= new ScBaseCell*[nSelCount];
+			ppOldPostIts	= new ScPostIt*[nSelCount];
 			pHasFormat		= new BOOL[nSelCount];
 			pOldFormats		= new ULONG[nSelCount];
 			pTabs			= new SCTAB[nSelCount];
@@ -390,6 +392,9 @@
 					pDoc->GetCell( nCol, nRow, i, pDocCell );
 					if ( pDocCell )
 					{
+						const ScPostIt *pNote = pDoc->GetNotePtr( pDocCell );
+						ppOldPostIts[nUndoPos] = pNote ? new ScPostIt( *pNote, pDoc ) : NULL;
+
 						ppOldCells[nUndoPos] = pDocCell->Clone(pDoc);
 						if ( pDocCell->GetCellType() == CELLTYPE_EDIT )
 							bEditDeleted = TRUE;
@@ -403,6 +408,7 @@
 					else
 					{
 						ppOldCells[nUndoPos] = NULL;
+						ppOldPostIts[nUndoPos] = NULL;
 					}
 
 					const SfxPoolItem* pItem;
@@ -599,7 +605,7 @@
 		{	// wg. ChangeTrack erst jetzt
 			pDocSh->GetUndoManager()->AddUndoAction(
 				new ScUndoEnterData( pDocSh, nCol, nRow, nTab, nUndoPos, pTabs,
-									 ppOldCells, pHasFormat, pOldFormats,
+									 ppOldCells, ppOldPostIts, pHasFormat, pOldFormats,
 									 rString, NULL ) );
 		}
 
@@ -732,13 +738,15 @@
 		SCTAB nTabCount = pDoc->GetTableCount();
 		SCTAB nSelCount = rMark.GetSelectCount();
 		SCTAB i;
-		ScBaseCell** ppOldCells	= NULL;
+		ScBaseCell** ppOldCells	= NULL;	
+		ScPostIt** ppOldPostIts = NULL;
 		SCTAB* pTabs			= NULL;
 		SCTAB nPos = 0;
 		EditTextObject* pUndoData = NULL;
 		if (bRecord && !bSimple)
 		{
 			ppOldCells	= new ScBaseCell*[nSelCount];
+			ppOldPostIts = new ScPostIt*[nSelCount];
 			pTabs  		= new SCTAB[nSelCount];
 			nPos = 0;
 
@@ -749,9 +757,16 @@
 					ScBaseCell* pDocCell;
 					pDoc->GetCell( nCol, nRow, i, pDocCell );
 					if ( pDocCell )
+					{
+						const ScPostIt *pNote = pDoc->GetNotePtr( pDocCell );
+						ppOldPostIts[nPos] = pNote ? new ScPostIt( *pNote, pDoc ) : NULL;
 						ppOldCells[nPos] = pDocCell->Clone( pDoc );
+					}
 					else
+					{
 						ppOldCells[nPos] = NULL;
+						ppOldPostIts[nPos] = NULL;
+					}
 					++nPos;
 				}
 
@@ -784,7 +799,7 @@
 			{	// wg. ChangeTrack erst jetzt
 				pDocSh->GetUndoManager()->AddUndoAction(
 					new ScUndoEnterData( pDocSh, nCol, nRow, nTab, nPos, pTabs,
-										ppOldCells, NULL, NULL, String(),
+										ppOldCells, ppOldPostIts, NULL, NULL, String(),
 										pUndoData ) );
 			}
 
--- /dev/null	2006-06-16 14:07:58.000000000 +0100
+++ sc/source/core/inc/notetracker.hxx	2006-08-17 16:49:50.000000000 +0100
@@ -0,0 +1,28 @@
+#ifndef _SC_NOTE_TRACKER
+#define _SC_NOTE_TRACKER
+
+#include <hash_map>
+
+class ScNoteTracker
+{
+	struct foo
+	{
+		size_t operator () (const ScBaseCell *cell) const
+		{ return (size_t) cell; }
+	};
+
+public:
+	std::hash_map< const ScBaseCell *, ScPostIt *, foo > aNotes;
+	ScNoteTracker( ScDocument *pDoc ) { aNotes.clear(); }
+	void dump()
+	{
+		std::hash_map< const ScBaseCell *, ScPostIt *, foo >::const_iterator aIter;
+		for (aIter = aNotes.begin(); aIter != aNotes.end(); aIter++)
+			fprintf (stderr, "Cell %p -> note '%s'\n",
+					 aIter->first, 
+					 rtl::OUStringToOString( aIter->second->GetText(), RTL_TEXTENCODING_UTF8 ).getStr());
+	}
+};
+
+
+#endif // _SC_NOTE_TRACKER
