diff -u -r sc-original/inc/cell.hxx sc/inc/cell.hxx
--- sc-original/inc/cell.hxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/inc/cell.hxx	2006-08-02 11:19:21.000000000 +0100
@@ -83,10 +83,10 @@
 class ScBaseCell
 {
 protected:
-	ScPostIt*		pNote;
 	SvtBroadcaster*	pBroadcaster;
 	USHORT			nTextWidth;
-	BYTE			eCellType;		// enum CellType - BYTE spart Speicher
+	BYTE			eCellType : 7;		// enum CellType - BYTE spart Speicher
+	bool            bSpecial : 1;
 	BYTE			nScriptType;
 
 public: // fuer Idle-Berechnung
@@ -107,17 +107,12 @@
 	void			Delete();						// simulierter virtueller Destructor
 	CellType		GetCellType() const;
 
-	void			SetNote( const ScPostIt& rNote );
-	BOOL			GetNote( ScPostIt& rNote ) const;
-	const ScPostIt*	GetNotePtr() const;
-	inline void		DeleteNote();
-
 	inline SvtBroadcaster*	GetBroadcaster() const;
 	void			SetBroadcaster(SvtBroadcaster* pNew);
 	inline void		ForgetBroadcaster();
 	inline void		SwapBroadcaster(ScBaseCell& rOther);	// zum Sortieren
 
-	void			LoadNote( SvStream& rStream, ScDocument* pDoc );
+//	void			LoadNote( SvStream& rStream, ScDocument* pDoc );
 
 						// String- oder EditCell
 	static ScBaseCell* CreateTextCell( const String& rString, ScDocument* );
@@ -133,8 +128,10 @@
 	String			GetStringData() const;			// nur echte Strings
 
 	static BOOL		CellEqual( const ScBaseCell* pCell1, const ScBaseCell* pCell2 );
-};
 
+	bool            IsSpecial() const;
+	void            SetSpecial(bool bSpecial);
+};
 
 
 class ScValueCell : public ScBaseCell
@@ -449,8 +446,8 @@
 #endif
 
 					ScNoteCell();
-					ScNoteCell( const ScPostIt& rNote );
 					ScNoteCell( const ScNoteCell& rScNoteCell, ScDocument* pDoc );
+//					ScNoteCell( const ScPostIt& rNote );
 					ScNoteCell( SvStream& rStream, USHORT nVer );
 	ScBaseCell*		Clone(ScDocument* pDoc) const;
 
@@ -461,41 +458,37 @@
 //		ScBaseCell
 
 inline ScBaseCell::ScBaseCell( CellType eNewType ) :
-    pNote( NULL ),
     pBroadcaster( NULL ),
     nTextWidth( TEXTWIDTH_DIRTY ),
     eCellType( eNewType ),
+	bSpecial( false ),
     nScriptType( SC_SCRIPTTYPE_UNKNOWN )
 {
 }
 
+// FIXME: should we have a copy constructor - cf. Note transferal
 inline ScBaseCell::ScBaseCell( const ScBaseCell& rBaseCell, ScDocument* pDoc ) :
     pBroadcaster( NULL ),
     nTextWidth( rBaseCell.nTextWidth ),
     eCellType( rBaseCell.eCellType ),
+	bSpecial( false ),
     nScriptType( SC_SCRIPTTYPE_UNKNOWN )
 {
-	if (rBaseCell.pNote)
-		pNote = new ScPostIt( *rBaseCell.pNote, pDoc );
-	else
-		pNote = NULL;
 }
 
-
-inline CellType ScBaseCell::GetCellType() const
+inline bool ScBaseCell::IsSpecial() const
 {
-	return (CellType)eCellType;
+	return bSpecial;
 }
 
-inline const ScPostIt* ScBaseCell::GetNotePtr() const
+inline void ScBaseCell::SetSpecial( bool _bSpecial )
 {
-	return pNote;
+	bSpecial = _bSpecial;
 }
 
-inline void ScBaseCell::DeleteNote()
+inline CellType ScBaseCell::GetCellType() const
 {
-	delete pNote;
-	pNote = NULL;
+	return (CellType)eCellType;
 }
 
 inline SvtBroadcaster* ScBaseCell::GetBroadcaster() const
@@ -606,22 +599,26 @@
 {
 }
 
+
 inline ScNoteCell::ScNoteCell( const ScNoteCell& rScNoteCell, ScDocument* pDoc ) :
 	ScBaseCell( rScNoteCell, pDoc )
-{
+{		
 }
+/*
 
+// This is screwed up ! :-)
 inline ScNoteCell::ScNoteCell( const ScPostIt& rNote ) :
 	ScBaseCell( CELLTYPE_NOTE )
 {
-	ScBaseCell::SetNote(rNote);
+	fprintf (stderr, "ScNoteCell::constructir - this API is totally broken\n");
+//	ScBaseCell::SetNote(rNote, rNote.GetDocument());
 }
+*/
 
 inline ScBaseCell* ScNoteCell::Clone(ScDocument* pDoc) const
 {
 	return new ScNoteCell(*this, pDoc);
 }
 
-
 #endif
 
Only in sc/inc: cell.hxx~
diff -u -r sc-original/inc/column.hxx sc/inc/column.hxx
--- sc-original/inc/column.hxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/inc/column.hxx	2006-08-03 18:07:18.000000000 +0100
@@ -195,6 +195,7 @@
 
 	USHORT		GetBlockMatrixEdges( SCROW nRow1, SCROW nRow2, USHORT nMask ) const;
 	BOOL		HasSelectionMatrixFragment(const ScMarkData& rMark) const;
+	BOOL        CellVisible( const ScBaseCell* pCell, bool bNotesVisible = true ) const;
 
 				// Daten oder Attribute:
 	SCROW		GetFirstEntryPos() const;
@@ -267,7 +268,7 @@
 	BOOL		SetString( SCROW nRow, SCTAB nTab, const String& rString,
 						   ScAddress::Convention conv = ScAddress::CONV_OOO );
 	void		SetValue( SCROW nRow, const double& rVal);
-	void		SetNote( SCROW nRow, const ScPostIt& rNote );
+	ScBaseCell* SetNoteInternal( SCROW nRow, bool bEmpty );
 	void		SetError( SCROW nRow, const USHORT nError);
 
 	void		GetString( SCROW nRow, String& rString ) const;
@@ -275,7 +276,6 @@
 	double		GetValue( SCROW nRow ) const;
 	void		GetFormula( SCROW nRow, String& rFormula,
 							BOOL bAsciiExport = FALSE ) const;
-	BOOL		GetNote( SCROW nRow, ScPostIt& rNote ) const;
 	CellType	GetCellType( SCROW nRow ) const;
 	SCSIZE		GetCellCount() const { return nCount; }
 	ULONG		GetWeightedCount() const;
@@ -429,6 +429,10 @@
 									SCROW nRowStart, SCROW nRowEnd ) const;
 
 private:
+//	BOOL		GetNote( SCROW nRow, ScPostIt& rNote ) const;
+	const ScPostIt*	GetNotePtr( const ScBaseCell* pCell ) const;
+	bool GetNote( const ScBaseCell* pCell, ScPostIt &rNote );
+	void SetNote( ScBaseCell* pCell, const ScPostIt &rNote );
 	ScBaseCell* CloneCell(SCSIZE nIndex, USHORT nFlags,
 							ScDocument* pDestDoc, const ScAddress& rDestPos);
 	void		CorrectSymbolCells( CharSet eStreamCharSet );
Only in sc/inc: column.hxx~
diff -u -r sc-original/inc/dociter.hxx sc/inc/dociter.hxx
--- sc-original/inc/dociter.hxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/inc/dociter.hxx	2006-08-03 21:40:10.000000000 +0100
@@ -54,6 +54,7 @@
 class ScAttrArray;
 class ScAttrIterator;
 class ScRange;
+class ScPostIt;
 
 class ScDocumentIterator				// alle nichtleeren Zellen durchgehen
 {
@@ -180,6 +181,7 @@
 
 	ScBaseCell*		GetThis();
 public:
+	const ScPostIt* GetNotePtr();
 					ScCellIterator(ScDocument* pDocument,
 								   SCCOL nSCol, SCROW nSRow, SCTAB nSTab,
 								   SCCOL nECol, SCROW nERow, SCTAB nETab,
@@ -381,6 +383,7 @@
 
 	ScBaseCell*		GetNext( SCCOL& rCol, SCROW& rRow );
 	BOOL			ReturnNext( SCCOL& rCol, SCROW& rRow );
+	ScDocument*     GetDocument() const { return pDoc; }
 
 private:
 	void			Advance();
Only in sc/inc: dociter.hxx~
diff -u -r sc-original/inc/document.hxx sc/inc/document.hxx
--- sc-original/inc/document.hxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/inc/document.hxx	2006-08-03 17:55:49.000000000 +0100
@@ -100,6 +100,7 @@
 class Window;
 class XColorTable;
 class List;
+class ScNoteTracker;
 
 class ScAutoFormatData;
 class ScBaseCell;
@@ -402,6 +403,7 @@
 	BOOL				bInUnoBroadcast;
 	BOOL				bInUnoListenerCall;
 	ScAddress::Convention eAddrConv;
+	ScNoteTracker* pNoteTracker;
 
     mutable BOOL        bStyleSheetUsageInvalid;
 
@@ -409,6 +411,7 @@
 	inline BOOL 		RowHidden( SCROW nRow, SCTAB nTab );		// FillInfo
 
 public:
+	ScNoteTracker  *GetNoteTracker() const;
 	ULONG			GetCellCount() const;		// alle Zellen
 	ULONG			GetWeightedCount() const;	// Formeln und Edit staerker gewichtet
 	ULONG			GetCodeCount() const;		// RPN-Code in Formeln
@@ -707,6 +710,8 @@
 	BOOL			SetString( SCCOL nCol, SCROW nRow, SCTAB nTab, const String& rString );
 	void			SetValue( SCCOL nCol, SCROW nRow, SCTAB nTab, const double& rVal );
 	void			SetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, const ScPostIt& rNote );
+	void			SetNote( ScBaseCell *pNote, const ScPostIt& rNote );
+	void            DeleteNote( const ScBaseCell *pNote );
 	void 			SetError( SCCOL nCol, SCROW nRow, SCTAB nTab, const USHORT nError);
 
 	void 			InsertMatrixFormula(SCCOL nCol1, SCROW nRow1,
@@ -732,7 +737,8 @@
 						const ScAddress& rPos, const ScFormulaCell& rFCell ) const;
 	void			GetFormula( SCCOL nCol, SCROW nRow, SCTAB nTab, String& rFormula,
 								BOOL bAsciiExport = FALSE ) const;
-	BOOL			GetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, ScPostIt& rNote);
+	BOOL			GetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, ScPostIt& rNote ) const;
+	const ScPostIt *GetNotePtr( const ScBaseCell* pCell ) const;
 	void			GetCellType( SCCOL nCol, SCROW nRow, SCTAB nTab, CellType& rCellType ) const;
 	CellType		GetCellType( const ScAddress& rPos ) const;
 	void			GetCell( SCCOL nCol, SCROW nRow, SCTAB nTab, ScBaseCell*& rpCell ) const;
Only in sc/inc: document.hxx~
diff -u -r sc-original/inc/fillinfo.hxx sc/inc/fillinfo.hxx
--- sc-original/inc/fillinfo.hxx	2005-09-08 18:39:47.000000000 +0100
+++ sc/inc/fillinfo.hxx	2006-08-04 13:22:02.000000000 +0100
@@ -50,6 +50,7 @@
 class SvxLineItem;
 class SvxShadowItem;
 
+class ScPostIt;
 class ScBaseCell;
 class ScPatternAttr;
 
@@ -80,6 +81,7 @@
 struct CellInfo
 {
     ScBaseCell*                 pCell;
+    const ScPostIt*             pNote;
 
     const ScPatternAttr*        pPatternAttr;
     const SfxItemSet*           pConditionSet;
Only in sc/inc: fillinfo.hxx~
diff -u -r sc-original/inc/postit.hxx sc/inc/postit.hxx
--- sc-original/inc/postit.hxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/inc/postit.hxx	2006-07-07 17:52:53.000000000 +0100
@@ -108,6 +108,7 @@
 	const String&		GetAuthor() const { return maStrAuthor; }
 	BOOL			IsShown()   const { return mbShown;     }
 
+    ScDocument*     GetDocument() const { return mpDoc; };
 	void		        SetEditTextObject( const EditTextObject* pTextObj);
 	void			SetText( const String& rText ); 
 	void			SetDate( const String& rNew ) 	{ maStrDate   = rNew; }
diff -u -r sc-original/inc/table.hxx sc/inc/table.hxx
--- sc-original/inc/table.hxx	2006-03-27 10:26:33.000000000 +0100
+++ sc/inc/table.hxx	2006-07-13 12:40:20.000000000 +0100
@@ -268,7 +268,7 @@
 				//	TRUE = Zahlformat gesetzt
 	BOOL		SetString( SCCOL nCol, SCROW nRow, SCTAB nTab, const String& rString );
 	void		SetValue( SCCOL nCol, SCROW nRow, const double& rVal );
-	void		SetNote( SCCOL nCol, SCROW nRow, const ScPostIt& rNote);
+	ScBaseCell *SetNoteInternal( SCCOL nCol, SCROW nRow, bool bEmpty );
 	void 		SetError( SCCOL nCol, SCROW nRow, USHORT nError);
 
 	void		GetString( SCCOL nCol, SCROW nRow, String& rString );
@@ -278,7 +278,6 @@
 	double		GetValue( SCCOL nCol, SCROW nRow );
 	void		GetFormula( SCCOL nCol, SCROW nRow, String& rFormula,
 							BOOL bAsciiExport = FALSE );
-	BOOL		GetNote( SCCOL nCol, SCROW nRow, ScPostIt& rNote);
 
 	CellType	GetCellType( const ScAddress& rPos ) const
 					{ return aCol[rPos.Col()].GetCellType( rPos.Row() ); }
diff -u -r sc-original/source/core/data/cell.cxx sc/source/core/data/cell.cxx
--- sc-original/source/core/data/cell.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/data/cell.cxx	2006-07-10 17:57:14.000000000 +0100
@@ -43,6 +43,7 @@
 #endif
 
 #include <svtools/zforlist.hxx>
+#include <hash_map>
 
 #include "scitems.hxx"
 #include "attrib.hxx"
@@ -75,6 +76,7 @@
 #ifndef _SVT_BROADCAST_HXX
 #include <svtools/broadcast.hxx>
 #endif
+#include <notetracker.hxx>
 
 // More or less arbitrary, of course all recursions must fit into available
 // stack space (which is what on all systems we don't know yet?). Choosing a
@@ -107,8 +109,10 @@
 
 // -----------------------------------------------------------------------
 
+// -----------------------------------------------------------------------
 ScBaseCell* ScBaseCell::Clone(ScDocument* pDoc) const
 {
+	fprintf (stderr, "Clone a cell...\n");
 	switch (eCellType)
 	{
 		case CELLTYPE_VALUE:
@@ -130,14 +134,15 @@
 
 ScBaseCell::~ScBaseCell()
 {
-	delete pNote;
+	fscanf (stdin, "");
+	if (bSpecial)
+		fprintf (stderr, "Darstardly error - not released hash ptr\n");
 	delete pBroadcaster;
 	DBG_ASSERT( eCellType == CELLTYPE_DESTROYED, "BaseCell Destructor" );
 }
 
-void ScBaseCell::Delete()
+void ScBaseCell::Delete ()
 {
-	DELETEZ(pNote);
 	switch (eCellType)
 	{
 		case CELLTYPE_VALUE:
@@ -161,29 +166,6 @@
 	}
 }
 
-void ScBaseCell::SetNote( const ScPostIt& rNote )
-{
-	if (!rNote.IsEmpty())
-	{
-		if (!pNote)
-			pNote = new ScPostIt(rNote);
-		else
-			*pNote = rNote;
-	}
-	else
-		DELETEZ(pNote);
-}
-
-BOOL ScBaseCell::GetNote( ScPostIt& rNote ) const
-{
-	if ( pNote )
-		rNote = *pNote;
-	else
-		rNote.Clear();
-
-	return ( pNote != NULL );
-}
-
 ScBaseCell* ScBaseCell::CreateTextCell( const String& rString, ScDocument* pDoc )
 {
 	if ( rString.Search('\n') != STRING_NOTFOUND || rString.Search(CHAR_CR) != STRING_NOTFOUND )
@@ -192,12 +174,6 @@
 		return new ScStringCell( rString );
 }
 
-void ScBaseCell::LoadNote( SvStream& rStream, ScDocument* pDoc )
-{
-	pNote = new ScPostIt(pDoc);
-	rStream >> *pNote;
-}
-
 void ScBaseCell::SetBroadcaster(SvtBroadcaster* pNew)
 {
 	delete pBroadcaster;
@@ -2062,7 +2038,3 @@
 	eCellType = CELLTYPE_DESTROYED;
 }
 #endif
-
-
-
-
diff -u -r sc-original/source/core/data/column2.cxx sc/source/core/data/column2.cxx
--- sc-original/source/core/data/column2.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/data/column2.cxx	2006-08-02 15:27:16.000000000 +0100
@@ -85,11 +85,6 @@
 
 // -----------------------------------------------------------------------
 
-inline BOOL CellVisible( const ScBaseCell* pCell )
-{
-	return ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() );
-}
-
 inline BOOL IsAmbiguousScript( BYTE nScript )
 {
 	//!	move to a header file
@@ -438,7 +433,11 @@
 		nPos = i;
 #endif
 		if (nPos < nCount)
-			pItems[nPos].pCell->LoadNote(rStream, pDocument);
+		{
+			ScPostIt aNote( pDocument );
+			rStream >> aNote;
+			pDocument->SetNote( pItems[nPos].pCell, aNote );
+		}
 		else
 		{
 			DBG_ERROR("falsche Pos in ScColumn::LoadNotes");
@@ -453,7 +452,7 @@
 	SCSIZE i;
 
 	for (i=0; i<nCount; i++)
-		if ( pItems[i].pCell->GetNotePtr() && pItems[i].nRow<=nMaxRow )
+		if ( GetNotePtr( pItems[i].pCell ) && pItems[i].nRow<=nMaxRow )
 			++nNoteCount;
 
 	return nNoteCount;
@@ -472,7 +471,7 @@
 
 		nNoteCount = 0;
 		for (i=0; i<nCount; i++)
-			if ( pItems[i].pCell->GetNotePtr() && pItems[i].nRow<=nSaveMaxRow &&
+			if ( GetNotePtr( pItems[i].pCell ) && pItems[i].nRow<=nSaveMaxRow &&
 					!lcl_RemoveThis( pDocument, nCol, pItems[i].nRow, nTab ) )
 				++nNoteCount;
 	}
@@ -495,7 +494,7 @@
 		SCROW nRow = pItems[i].nRow;
 		if ( !bRemoveAny || !lcl_RemoveThis( pDocument, nCol, nRow, nTab ) )
 		{
-			const ScPostIt* pNote = pItems[i].pCell->GetNotePtr();
+			const ScPostIt* pNote = GetNotePtr( pItems[i].pCell );
 			if ( pNote && nRow <= nSaveMaxRow )
 			{
 				rStream << nDestPos;
@@ -1496,8 +1495,9 @@
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
-				if (pOldCell->GetNotePtr())
-					pNewCell->SetNote( *pOldCell->GetNotePtr() );
+				const ScPostIt *pNote;
+				if ( ( pNote = GetNotePtr( pOldCell ) ) )
+					pDocument->SetNote( pNewCell, *pNote );
 				pItems[i].pCell = pNewCell;
 				delete pOldCell;
 			}
@@ -1571,8 +1571,8 @@
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
-				if (pOldCell->GetNotePtr())
-					pNewCell->SetNote( *pOldCell->GetNotePtr() );
+				if (GetNotePtr( pOldCell ))
+					pDocument->SetNote( pNewCell, *GetNotePtr( pOldCell ) );
 				pItems[i].pCell = pNewCell;
 				delete pOldCell;
 			}
@@ -1721,7 +1721,7 @@
 		for (i=0; i<nCount && !bVisData; i++)
 		{
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( CellVisible( pCell, bNotes ) )
 				bVisData = TRUE;
 		}
 		return !bVisData;
@@ -1758,7 +1758,7 @@
 		{
 			--i;
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( CellVisible( pCell, bNotes ) )
 			{
 				bFound = TRUE;
 				nRet = pItems[i].nRow;
@@ -1778,7 +1778,7 @@
 		for (i=0; i<nCount && !bFound; i++)
 		{
 			ScBaseCell* pCell = pItems[i].pCell;
-			if ( pCell->GetCellType() != CELLTYPE_NOTE || (bNotes && pCell->GetNotePtr()) )
+			if ( CellVisible( pCell, bNotes ) )
 			{
 				bFound = TRUE;
 				nRet = pItems[i].nRow;
@@ -2160,7 +2160,7 @@
 
 			if (!pBC->HasListeners())
 			{
-				if (pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetNotePtr())
+				if (pCell->GetCellType() == CELLTYPE_NOTE && !GetNotePtr(pCell))
 					DeleteAtIndex(nIndex);
 				else
 					pCell->SetBroadcaster(NULL);
Only in sc/source/core/data: column2.cxx~
diff -u -r sc-original/source/core/data/column3.cxx sc/source/core/data/column3.cxx
--- sc-original/source/core/data/column3.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/data/column3.cxx	2006-08-03 17:50:51.000000000 +0100
@@ -90,8 +90,9 @@
 				pNewCell->SetBroadcaster( pBC );
 				pOldCell->ForgetBroadcaster();
 			}
-			if (pOldCell->GetNotePtr() && !pNewCell->GetNotePtr())
-				pNewCell->SetNote( *pOldCell->GetNotePtr() );
+			const ScPostIt *pNote;
+			if ( ( pNote = GetNotePtr( pOldCell ) ) && !GetNotePtr( pNewCell ))
+					SetNote( pNewCell, *pNote );
 			if ( pOldCell->GetCellType() == CELLTYPE_FORMULA && !pDocument->IsClipOrUndo() )
 			{
 				pOldCell->EndListeningTo( pDocument );
@@ -100,6 +101,7 @@
 					Search(nRow, nIndex);
 			}
 			pOldCell->Delete();
+
 			pItems[nIndex].pCell = pNewCell;
 		}
 		else
@@ -389,7 +391,7 @@
 	{
 		for ( i = nStartIndex; i <= nEndIndex; i++ )
 		{
-			const ScPostIt*	pNote = pItems[i].pCell->GetNotePtr();
+			const ScPostIt*	pNote = GetNotePtr( pItems[i].pCell );
 			if ( pNote && pNote->IsShown() )
 			{
 				ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, pItems[i].nRow );
@@ -479,9 +481,12 @@
 				{
 					if ((nDelFlag & IDF_NOTE) == 0)
 					{
-						const ScPostIt* pNote = pOldCell->GetNotePtr();
+						const ScPostIt* pNote = GetNotePtr( pOldCell );
 						if (pNote)
-							pNoteCell = new ScNoteCell(*pNote);
+						{
+							pNoteCell = new ScNoteCell();
+							pDocument->SetNote( pNoteCell, *pNote );
+						}
 					}
 					SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 					if (pBC)
@@ -524,8 +529,8 @@
 			else
 			{
 				if (nDelFlag & IDF_NOTE)
-					if (pItems[j].pCell->GetNotePtr())
-						pItems[j].pCell->DeleteNote();
+					if (GetNotePtr( pItems[j].pCell ))
+						pDocument->DeleteNote( pItems[j].pCell );
 				++j;
 			}
 		}
@@ -778,20 +783,20 @@
 			{
 				pNew = rColumn.CloneCell( i, nInsFlag, pDocument, ScAddress(nCol,(SCROW)nDestRow,nTab) );
 
-				if ( pNew && pNew->GetNotePtr())
+				if (pNew && GetNotePtr(pNew))
                 {
                     if((nInsFlag & IDF_NOTE) == 0 )
-					    pNew->DeleteNote();
+					    pDocument->DeleteNote( pNew );
                     else
                     {
                         // Set the cell note rectangle dimensions to default position 
                         // following the paste.
                         ScPostIt aCellNote(pDocument);
-                        if(pNew->GetNote(aCellNote))
+                        if( GetNote( pNew, aCellNote ) )
                         {
                             Rectangle aRect = aCellNote.DefaultRectangle(ScAddress(nCol,nDestRow,nTab));
                             aCellNote.SetRectangle(aRect);
-                            pNew->SetNote(aCellNote);
+							SetNote( pNew, aCellNote );
                         }
                     }
                 }
@@ -916,23 +921,21 @@
 								// #33224# LeerStrings nicht kopieren
 						}
 					}
-					if ( pNew && pSource->GetNotePtr() && ( nFlags & IDF_NOTE ) )
-                    {
-                        // #i52342# the note must be constructed with the destination document pointer
-                        ScPostIt aNewNote( *pSource->GetNotePtr(), pDestDoc );
-                        pNew->SetNote( aNewNote );
-                    }
 				}
 			}
 			break;
 	}
 
-	if ( !pNew && pSource->GetNotePtr() && ( nFlags & IDF_NOTE ) )
-    {
+	// Copy note across ...
+	const ScPostIt *pNote;
+	if ( ( nFlags & IDF_NOTE ) && (pNote = GetNotePtr( pSource ) ) )
+	{
         // #i52342# the note must be constructed with the destination document pointer
-        ScPostIt aNewNote( *pSource->GetNotePtr(), pDestDoc );
-        pNew = new ScNoteCell( aNewNote );
-    }
+        ScPostIt aNewNote( *pNote, pDestDoc );
+		if (!pNew)
+			pNew = new ScNoteCell();
+		pDestDoc->SetNote( pNew, *pNote );
+	}
 
 	return pNew;
 }
@@ -1393,14 +1396,14 @@
 			if (Search(nRow, i))
 			{
 				ScBaseCell* pOldCell = pItems[i].pCell;
-				const ScPostIt* pNote = pOldCell->GetNotePtr();
+				const ScPostIt* pNote = GetNotePtr( pOldCell );
 				SvtBroadcaster* pBC = pOldCell->GetBroadcaster();
 				if (pNewCell || pNote || pBC)
 				{
 					if (!pNewCell)
 						pNewCell = new ScNoteCell();
 					if (pNote)
-						pNewCell->SetNote(*pNote);
+						SetNote( pNewCell, *pNote );
 					if (pBC)
 					{
 						pNewCell->SetBroadcaster(pBC);
@@ -1492,11 +1495,11 @@
 		}
 		ScPostIt aCellNote(pDocument);
 		// Hide visible notes during Filtering.
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown()) 
+		if(GetNote( pCell, aCellNote ) && aCellNote.IsShown()) 
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
 		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    SetNote( pCell, aCellNote );
 		}
 
 		if ( !rStrings.Insert( pData ) )
@@ -1657,25 +1660,30 @@
 	}
 }
 
-
-void ScColumn::SetNote( SCROW nRow, const ScPostIt& rNote)
+// Manages the cell magic necessary to create ScNoteCells where necessary
+ScBaseCell *ScColumn::SetNoteInternal( SCROW nRow, bool bEmpty )
 {
-	BOOL bEmpty = rNote.IsEmpty();
+	ScBaseCell* pCell = NULL;
 
 	SCSIZE nIndex;
 	if (Search(nRow, nIndex))
 	{
 		ScBaseCell* pCell = pItems[nIndex].pCell;
 		if (bEmpty && pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetBroadcaster())
+		{
 			DeleteAtIndex(nIndex);
-		else
-			pCell->SetNote(rNote);
+			pCell = NULL;
+		}
 	}
 	else
 	{
 		if (!bEmpty)
-			Insert(nRow, new ScNoteCell(rNote, pDocument));
+		{
+			pCell = new ScNoteCell();
+			Insert(nRow, pCell);
+		}
 	}
+	return pCell;
 }
 
 
@@ -1761,19 +1769,19 @@
 		rFormula.Erase();
 }
 
-
+#if 0
 BOOL ScColumn::GetNote( SCROW nRow, ScPostIt& rNote) const
 {
 	BOOL	bHasNote = FALSE;
 	SCSIZE	nIndex;
 	if (Search(nRow, nIndex))
-		bHasNote = pItems[nIndex].pCell->GetNote(rNote);
+		bHasNote = pItems[nIndex].pCell->GetNote(rNote, pDocument);
 	else
 		rNote.Clear();
 
 	return bHasNote;
 }
-
+#endif
 
 CellType ScColumn::GetCellType( SCROW nRow ) const
 {
Only in sc/source/core/data: column3.cxx~
diff -u -r sc-original/source/core/data/column.cxx sc/source/core/data/column.cxx
--- sc-original/source/core/data/column.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/data/column.cxx	2006-08-03 18:07:20.000000000 +0100
@@ -66,11 +66,6 @@
 // STATIC DATA -----------------------------------------------------------
 
 
-inline BOOL CellVisible( const ScBaseCell* pCell )		//! an Zelle verschieben
-{
-	return ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() );
-}
-
 inline BOOL IsAmbiguousScriptNonZero( BYTE nScript )
 {
 	//!	move to a header file
@@ -82,7 +77,6 @@
 
 // -----------------------------------------------------------------------------------------
 
-
 ScColumn::ScColumn() :
 	nCol( 0 ),
 	nCount( 0 ),
@@ -109,6 +103,31 @@
 	pAttrArray = new ScAttrArray( nCol, nTab, pDocument );
 }
 
+const ScPostIt*	ScColumn::GetNotePtr( const ScBaseCell* pCell ) const
+{
+	return pDocument->GetNotePtr( pCell );
+}
+
+bool ScColumn::GetNote( const ScBaseCell* pCell, ScPostIt &rNote )
+{
+	const ScPostIt *pNote;
+	if (! ( pNote = GetNotePtr( pCell ) ) )
+		return false;
+	rNote = *pNote;
+	return true;
+}
+
+void ScColumn::SetNote( ScBaseCell* pCell, const ScPostIt &rNote )
+{
+	pDocument->SetNote( pCell, rNote );
+}
+
+BOOL ScColumn::CellVisible( const ScBaseCell* pCell, bool bNotesVisible ) const
+{
+	return pCell->GetCellType() != CELLTYPE_NOTE
+			|| ( bNotesVisible && GetNotePtr( pCell ) );
+}
+
 
 SCsROW ScColumn::GetNextUnprotected( SCROW nRow, BOOL bUp ) const
 {
@@ -961,17 +980,17 @@
 		}
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1 && pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell1 && GetNote( pCell1, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow1 );
-		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell1, aCellNote );
 		}
-		if(pCell2 && pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(pCell2 && GetNote( pCell2, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow2 );
-		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell2, aCellNote );
 		}
 
 		return ;
@@ -1026,11 +1045,11 @@
 			pCell1->ForgetBroadcaster();
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell1, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow1 );
-		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell1, aCellNote );
 		}
 		if ( eType1 == CELLTYPE_FORMULA )
 		{
@@ -1055,11 +1074,11 @@
 			pCell2->ForgetBroadcaster();
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell2, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow2 );
-		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell2, aCellNote );
 		}
 		if ( eType2 == CELLTYPE_FORMULA )
 		{
@@ -1085,9 +1104,9 @@
 	//	Delete nur, wenn es keine neue Zelle gibt (Insert loescht die alte Zelle auch)
 	//	Notizen muessen aber einzeln geloescht werden, weil Insert sie stehenlaesst
 
-	if ( pCell1 && ( !pNew1 || (pCell1->GetNotePtr() && !pNew1->GetNotePtr()) ) )
+	if ( pCell1 && ( !pNew1 || ( GetNotePtr( pCell1 ) && !GetNotePtr( pNew1 ) ) ) )
 		Delete( nRow1 );
-	if ( pCell2 && ( !pNew2 || (pCell2->GetNotePtr() && !pNew2->GetNotePtr()) ) )
+	if ( pCell2 && ( !pNew2 || ( GetNotePtr( pCell2 ) && !GetNotePtr( pNew2 ) ) ) )
 		Delete( nRow2 );
 
 	if (pNew1)
@@ -1128,17 +1147,17 @@
 		ScFormulaCell* pCell2 = (ScFormulaCell*) rCol.pItems[nIndex2].pCell;
 		ScPostIt aCellNote(pDocument);
 		// Hide the visible note if doing a swap.
-		if(pCell1->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell1, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
-		    aCellNote.SetShown(FALSE);
-		    pCell1->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell1, aCellNote );
 		}
-		if(pCell2->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell2, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( rCol.nCol, nRow );
-		    aCellNote.SetShown(FALSE);
-		    pCell2->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell2, aCellNote );
 		}
 		pItems[nIndex1].pCell = pCell2;
 		rCol.pItems[nIndex2].pCell = pCell1;
@@ -1163,11 +1182,11 @@
 	{
 		ScFormulaCell* pCell = (ScFormulaCell*) pItems[nIndex1].pCell;
 		ScPostIt aCellNote(pDocument);
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
-		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell, aCellNote );
 		}
 		// Loeschen
 		--nCount;
@@ -1190,11 +1209,11 @@
 	{
 		ScFormulaCell* pCell = (ScFormulaCell*) rCol.pItems[nIndex2].pCell;
 		ScPostIt aCellNote(pDocument);
-		if(pCell->GetNote(aCellNote) && aCellNote.IsShown())
+		if(GetNote( pCell, aCellNote ) && aCellNote.IsShown())
 		{
 		    ScDetectiveFunc( pDocument, nTab ).HideComment( rCol.nCol, nRow );
-		    aCellNote.SetShown(FALSE);
-		    pCell->SetNote(aCellNote);
+		    aCellNote.SetShown( FALSE );
+		    SetNote( pCell, aCellNote );
 		}
 		// Loeschen
 		--(rCol.nCount);
@@ -1363,8 +1382,10 @@
 			{
 				MoveListeners( *pBC, pDelRows[i] - nSize );
 				pCell->SetBroadcaster(NULL);
+				pDocument->DeleteNote( pCell );
 				pCell->Delete();
 			}
+			// FIXME: is it correct only to -Delete- cells wiht a broadcaster ?
 		}
 
 		delete pDelRows;
@@ -1485,16 +1506,11 @@
 				aAdr.SetRow( pItems[i].nRow );
 				ScBaseCell* pNew;
 				if (bAsLink)
-				{
 					pNew = CreateRefCell( rColumn.pDocument, aAdr, i, nFlags );
-				}
 				else
-				{
 					pNew = CloneCell( i, nFlags, rColumn.pDocument, aAdr );
-
-					if ( pNew && pNew->GetNotePtr() && (nFlags & IDF_NOTE) == 0 )
-						pNew->DeleteNote();
-				}
+#warning bogus (?) code was here - this was done in CloneCell anyhow
+#warning - or were we (accidentally) copying notes in error before ?
 
 				if (pNew)
 					rColumn.Insert(pItems[i].nRow, pNew);
Only in sc/source/core/data: column.cxx~
diff -u -r sc-original/source/core/data/dociter.cxx sc/source/core/data/dociter.cxx
--- sc-original/source/core/data/dociter.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/data/dociter.cxx	2006-07-10 17:26:17.000000000 +0100
@@ -734,6 +734,15 @@
 	}
 }
 
+const ScPostIt* ScCellIterator::GetNotePtr()
+{
+	ScBaseCell *pCell = GetThis();
+	if( pCell->IsSpecial() )
+		return pDoc->GetNotePtr( pCell );
+	else
+		return NULL;
+}
+
 ScBaseCell* ScCellIterator::GetFirst()
 {
 	if ( !ValidTab(nTab) )
@@ -1598,7 +1607,8 @@
 	if ( pCell && IsGreater( nNextCol, nNextRow, nCellCol, nCellRow ) )
 		pCell = aCellIter.GetNext( nCellCol, nCellRow );
 
-	while ( pCell && pCell->GetCellType() == CELLTYPE_NOTE && !pCell->GetNotePtr() )
+	while ( pCell && pCell->GetCellType() == CELLTYPE_NOTE 
+			&& !aCellIter.GetDocument()->GetNotePtr( pCell ) )
 		pCell = aCellIter.GetNext( nCellCol, nCellRow );
 
 	if ( pPattern && IsGreater( nNextCol, nNextRow, nAttrCol2, nAttrRow ) )
diff -u -r sc-original/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
--- sc-original/source/core/data/documen2.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/data/documen2.cxx	2006-07-07 18:00:45.000000000 +0100
@@ -283,6 +283,7 @@
 #include "poolhelp.hxx"
 #include "listenercalls.hxx"
 #include "recursionhelper.hxx"
+#include "notetracker.hxx"
 
 // STATIC DATA -----------------------------------------------------------
 
@@ -412,6 +413,7 @@
 
 	aTrackTimer.SetTimeoutHdl( LINK( this, ScDocument, TrackTimeHdl ) );
 	aTrackTimer.SetTimeout( 100 );
+	pNoteTracker = new ScNoteTracker( this );
 }
 
 
@@ -578,6 +580,7 @@
 	delete pScriptTypeData;
 	delete pOtherObjects;
     delete pRecursionHelper;
+	delete pNoteTracker;
 
     DBG_ASSERT( !pAutoNameCache, "AutoNameCache still set in dtor" );
 }
diff -u -r sc-original/source/core/data/document.cxx sc/source/core/data/document.cxx
--- sc-original/source/core/data/document.cxx	2006-03-27 10:28:45.000000000 +0100
+++ sc/source/core/data/document.cxx	2006-08-04 14:51:45.000000000 +0100
@@ -106,6 +106,7 @@
 #include <set>
 #endif
 #include "autonamecache.hxx"
+#include "notetracker.hxx"
 
 struct ScDefaultAttr
 {
@@ -2109,14 +2110,62 @@
 			pTab[nTab]->SetValue( nCol, nRow, rVal );
 }
 
+void ScDocument::SetNote( ScBaseCell *pCell, const ScPostIt& rNote )
+{
+	DeleteNote( pCell );
+	pCell->SetSpecial( TRUE );
+	GetNoteTracker()->aNotes[ pCell ] = new ScPostIt( rNote );
+}
 
 void ScDocument::SetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, const ScPostIt& rNote )
 {
-	if (VALIDTAB(nTab))
-		if (pTab[nTab])
-			pTab[nTab]->SetNote( nCol, nRow, rNote );
+	if ( VALIDTAB(nTab) && pTab[nTab] )
+	{
+		ScBaseCell *pCell;
+		pCell = pTab[nTab]->SetNoteInternal( nCol, nRow,
+											 rNote.IsEmpty() );
+		if (pCell)
+			SetNote( pCell, rNote );
+	}
+}
+
+void ScDocument::DeleteNote( const ScBaseCell *pCell )
+{
+	if ( !pCell->IsSpecial() )
+		return;
+	delete GetNoteTracker()->aNotes[ pCell ];
+	GetNoteTracker()->aNotes.erase( pCell );
+}
+
+const ScPostIt *ScDocument::GetNotePtr( const ScBaseCell* pCell ) const
+{
+	if ( !pCell->IsSpecial() )
+		return NULL;
+	return GetNoteTracker()->aNotes[ pCell ];
+}
+
+ScNoteTracker *ScDocument::GetNoteTracker() const
+{
+	return pNoteTracker;
 }
 
+BOOL ScDocument::GetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, ScPostIt& rNote ) const
+{
+	ScBaseCell *pCell = NULL;
+	GetCell( nCol, nRow, nTab, pCell );
+
+	if( !pCell || !pCell->IsSpecial() )
+		return FALSE;
+
+	ScPostIt *pPostIt = GetNoteTracker()->aNotes[ pCell ];
+	if (!pPostIt)
+	{
+		fprintf (stderr, "Odd special cell %p with no note\n", pCell);
+		return FALSE;
+	}
+	rNote = *pPostIt;
+	return true;
+}
 
 void ScDocument::GetString( SCCOL nCol, SCROW nRow, SCTAB nTab, String& rString )
 {
@@ -2206,19 +2255,6 @@
 }
 
 
-BOOL ScDocument::GetNote( SCCOL nCol, SCROW nRow, SCTAB nTab, ScPostIt& rNote )
-{
-	BOOL bHasNote = FALSE;
-
-	if ( VALIDTAB(nTab) && pTab[nTab] )
-		bHasNote = pTab[nTab]->GetNote( nCol, nRow, rNote );
-	else
-		rNote.Clear();
-
-	return bHasNote;
-}
-
-
 CellType ScDocument::GetCellType( const ScAddress& rPos ) const
 {
 	SCTAB nTab = rPos.Tab();
Only in sc/source/core/data: document.cxx~
Only in sc/source/core/data: #table2.cxx#
diff -u -r sc-original/source/core/data/table2.cxx sc/source/core/data/table2.cxx
--- sc-original/source/core/data/table2.cxx	2006-06-25 21:53:27.000000000 +0100
+++ sc/source/core/data/table2.cxx	2006-08-04 13:25:00.000000000 +0100
@@ -851,11 +851,12 @@
 		aCol[nCol].SetValue( nRow, rVal );
 }
 
-
-void ScTable::SetNote( SCCOL nCol, SCROW nRow, const ScPostIt& rNote)
+ScBaseCell *ScTable::SetNoteInternal( SCCOL nCol, SCROW nRow, bool bEmpty )
 {
-	if (ValidColRow(nCol, nRow))
-		aCol[nCol].SetNote(nRow, rNote);
+	if (ValidColRow( nCol, nRow ))
+		return aCol[nCol].SetNoteInternal( nRow, bEmpty );
+	else
+		return NULL;
 }
 
 
@@ -894,7 +895,7 @@
 		rFormula.Erase();
 }
 
-
+/*
 BOOL ScTable::GetNote( SCCOL nCol, SCROW nRow, ScPostIt& rNote)
 {
 	BOOL bHasNote = FALSE;
@@ -906,7 +907,7 @@
 
 	return bHasNote;
 }
-
+*/
 
 CellType ScTable::GetCellType( SCCOL nCol, SCROW nRow ) const
 {
Only in sc/source/core/data: table2.cxx~
diff -u -r sc-original/source/core/data/table6.cxx sc/source/core/data/table6.cxx
--- sc-original/source/core/data/table6.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/data/table6.cxx	2006-08-04 14:26:39.000000000 +0100
@@ -136,11 +136,11 @@
 				break;
 			case SVX_SEARCHIN_NOTE:
 				{
-				    ScPostIt aNote(pDocument);
-				    if(pCell->GetNote( aNote ))
+				    const ScPostIt *pNote;
+				    if( ( pNote = pDocument->GetNotePtr( pCell ) ) != NULL)
 				    {
-				        aString = aNote.GetText();
-				        bMultiLine = ( ((aNote.GetEditTextObject())->GetParagraphCount()) > 1 );
+				        aString = pNote->GetText();
+				        bMultiLine = ( ((pNote->GetEditTextObject())->GetParagraphCount()) > 1 );
 				    }
 				}
 				break;
@@ -254,21 +254,23 @@
 			while (bRepeat);
 			if (rSearchItem.GetCellType() == SVX_SEARCHIN_NOTE)
 			{
-				ScPostIt aNote(pDocument);
-				if(pCell->GetNote( aNote ))
+				const ScPostIt *pNote;
+				if ( ( pNote = pDocument->GetNotePtr( pCell ) ) != NULL )
 				{	
+					ScPostIt aNote( *pNote );
                     aNote.SetText( aString );
 
                     // if note is visible - hide it to force a refresh of replaced text 
                     if (aNote.IsShown())
                     {
 			ScDetectiveFunc( pDocument, nTab ).HideComment( nCol, nRow );
+#warning Ropey - no idea what's going on ...
                         aNote.SetShown(FALSE);
                     }
 				                
                     // NB: rich text format is lost.
                     // This is also true of Cells.
-                    aCol[nCol].SetNote( nRow, aNote );
+					pDocument->SetNote( nCol, nRow, nTab, aNote );
             	}
 			}
 			else if ( cMatrixFlag != MM_NONE )
Only in sc/source/core/data: table6.cxx~
Only in sc/source/core/inc: notetracker.hxx
diff -u -r sc-original/source/core/tool/chgtrack.cxx sc/source/core/tool/chgtrack.cxx
--- sc-original/source/core/tool/chgtrack.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/tool/chgtrack.cxx	2006-08-03 21:37:53.000000000 +0100
@@ -1927,6 +1927,8 @@
 {
 	if ( pCell )
 	{
+		// FIXME: Should this destroy the note ?
+		pDoc->DeleteNote ( pCell );
 		pCell->Delete();
 		pCell = NULL;
 	}
Only in sc/source/core/tool: chgtrack.cxx~
diff -u -r sc-original/source/core/tool/interpr2.cxx sc/source/core/tool/interpr2.cxx
--- sc-original/source/core/tool/interpr2.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/core/tool/interpr2.cxx	2006-08-04 13:17:55.000000000 +0100
@@ -1485,7 +1485,7 @@
 				if ( bTempCell )
 				{
 					if ( bHasNote = (pVCell != NULL) )
-						bHasNote = pVCell->GetNote( aNote );
+						bHasNote = pDok->GetNotePtr( pVCell ) != NULL;
 					fSaveVal = 0.0;
 					pVCell = new ScValueCell( fSaveVal );
 					pDok->PutCell( aValueAdr, pVCell );
@@ -1632,9 +1632,10 @@
 				}
 				if ( bTempCell )
 				{
-					if ( bHasNote )
-						pVCell = new ScNoteCell( aNote, pDok );
-					else
+					if ( bHasNote ) {
+						pVCell = new ScNoteCell();
+						pDok->SetNote( pVCell, aNote );
+					} else
 						pVCell = NULL;
 					pDok->PutCell( aValueAdr, pVCell );
 				}
Only in sc/source/core/tool: interpr2.cxx~
diff -u -r sc-original/source/filter/excel/excel.cxx sc/source/filter/excel/excel.cxx
--- sc-original/source/filter/excel/excel.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/filter/excel/excel.cxx	2006-07-07 17:52:53.000000000 +0100
@@ -96,7 +96,7 @@
     DBG_ASSERT( pDocument, "::ScImportExcel - no document" );
     if( !pDocument ) return eERR_INTERN;        // should not happen
 
-#if SCF_INCL_DUMPER
+#if 0
     {
         ::scf::xls::dump::Dumper aDumper( rMedium, pDocument->GetDocumentShell() );
         aDumper.Dump();
diff -u -r sc-original/source/filter/excel/xetable.cxx sc/source/filter/excel/xetable.cxx
--- sc-original/source/filter/excel/xetable.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/filter/excel/xetable.cxx	2006-08-03 21:39:13.000000000 +0100
@@ -2142,7 +2142,7 @@
             maRowBfr.AppendCell( xCell );
 
         // notes
-        const ScPostIt* pScNote = pScCell ? pScCell->GetNotePtr() : 0;
+        const ScPostIt* pScNote = rDoc.GetNotePtr( pScCell );
         if( pScNote || aAddNoteText.Len() )
             mxNoteList->AppendNewRecord( new XclExpNote( GetRoot(), aScPos, pScNote, aAddNoteText ) );
 
Only in sc/source/filter/excel: xetable.cxx~
diff -u -r sc-original/source/filter/xcl97/XclImpChangeTrack.cxx sc/source/filter/xcl97/XclImpChangeTrack.cxx
--- sc-original/source/filter/xcl97/XclImpChangeTrack.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/filter/xcl97/XclImpChangeTrack.cxx	2006-08-03 21:39:35.000000000 +0100
@@ -385,9 +385,9 @@
 		{
 			DBG_ERROR( "XclImpChangeTrack::ReadChTrCellContent - bytes left, action ignored" );
 			if( pOldCell )
-				pOldCell->Delete();
+				pOldCell->Delete(); //GetDocPtr());
 			if( pNewCell )
-				pNewCell->Delete();
+				pNewCell->Delete(); //GetDocPtr());
 		}
 		else
 		{
Only in sc/source/filter/xcl97: XclImpChangeTrack.cxx~
diff -u -r sc-original/source/filter/xml/XMLChangeTrackingImportHelper.cxx sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx
--- sc-original/source/filter/xml/XMLChangeTrackingImportHelper.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx	2006-07-07 17:52:53.000000000 +0100
@@ -95,8 +95,10 @@
 
 ScMyCellInfo::~ScMyCellInfo()
 {
-	if (pCell)
+/*	if (pCell)
 		pCell->Delete();
+*/
+		fprintf (stderr, "FIXME: PostIt Note leaked");
 }
 
 ScBaseCell* ScMyCellInfo::CreateCell(ScDocument* pDoc)
diff -u -r sc-original/source/filter/xml/xmlexprt.cxx sc/source/filter/xml/xmlexprt.cxx
--- sc-original/source/filter/xml/xmlexprt.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/filter/xml/xmlexprt.cxx	2006-07-10 17:23:27.000000000 +0100
@@ -790,7 +790,7 @@
 		    ScBaseCell* pCell = aCellIter.GetFirst();
 		    while (pCell)
 		    {
-                const ScPostIt* pScNote = pCell->GetNotePtr();
+                const ScPostIt* pScNote = aCellIter.GetNotePtr();
 			    if (pScNote && !pScNote->IsShown())
                 {
                     const SfxItemSet& rSet = pScNote->GetItemSet();
diff -u -r sc-original/source/ui/docshell/dbdocfun.cxx sc/source/ui/docshell/dbdocfun.cxx
--- sc-original/source/ui/docshell/dbdocfun.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/docshell/dbdocfun.cxx	2006-07-10 17:23:09.000000000 +0100
@@ -1121,7 +1121,7 @@
 	ScBaseCell* pCell = aIter.GetFirst();
 	while (pCell)
 	{
-		if ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() )		// real content?
+		if ( pCell->GetCellType() != CELLTYPE_NOTE || aIter.GetNotePtr() )		// real content?
 		{
 			if ( !rExcept.In( ScAddress( aIter.GetCol(), aIter.GetRow(), aIter.GetTab() ) ) )
 				return FALSE;		// cell found
diff -u -r sc-original/source/ui/docshell/docfunc.cxx sc/source/ui/docshell/docfunc.cxx
--- sc-original/source/ui/docshell/docfunc.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/docshell/docfunc.cxx	2006-07-10 20:53:15.000000000 +0100
@@ -771,7 +771,6 @@
 
 BOOL ScDocFunc::PutCell( const ScAddress& rPos, ScBaseCell* pNewCell, BOOL bApi )
 {
-
     ScDocShellModificator aModificator( rDocShell );
 	ScDocument* pDoc = rDocShell.GetDocument();
 	BOOL bUndo (pDoc->IsUndoEnabled());
@@ -785,6 +784,7 @@
 	    {
 		    if (!bApi)
 			    rDocShell.ErrorMessage(aTester.GetMessageId());
+			fprintf (stderr, "FIXME: delete cell ...\n");
 		    pNewCell->Delete();
 		    return FALSE;
 	    }
diff -u -r sc-original/source/ui/docshell/docsh.cxx sc/source/ui/docshell/docsh.cxx
--- sc-original/source/ui/docshell/docsh.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/docshell/docsh.cxx	2006-07-10 17:22:55.000000000 +0100
@@ -512,7 +512,7 @@
 		    ScBaseCell* pCell = aCellIter.GetFirst();
 		    while (pCell && !bFound)
 		    {
-                if (pCell->GetNotePtr())
+                if (aCellIter.GetNotePtr())
                     bFound = sal_True;
 				pCell = aCellIter.GetNext();
             }
diff -u -r sc-original/source/ui/navipi/content.cxx sc/source/ui/navipi/content.cxx
--- sc-original/source/ui/navipi/content.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/navipi/content.cxx	2006-07-10 17:22:20.000000000 +0100
@@ -902,7 +902,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = aIter.GetNotePtr();
 			if (pNote)
 				InsertContent( SC_CONTENT_NOTE, lcl_NoteString(*pNote) );
 
@@ -925,7 +925,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = aIter.GetNotePtr();
 			if (pNote)
 			{
 				if (nFound == nIndex)
@@ -960,7 +960,7 @@
 		ScBaseCell* pCell = aIter.GetFirst();
 		while (pCell && bEqual)
 		{
-			const ScPostIt* pNote = pCell->GetNotePtr();
+			const ScPostIt* pNote = aIter.GetNotePtr();
 			if (pNote)
 			{
 				if ( !pEntry )
diff -u -r sc-original/source/ui/undo/undocell.cxx sc/source/ui/undo/undocell.cxx
--- sc-original/source/ui/undo/undocell.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/undo/undocell.cxx	2006-08-04 13:18:08.000000000 +0100
@@ -210,6 +210,8 @@
 {
 	ScDocumentPool* pPool = pDocShell->GetDocument()->GetPool();
 
+	fprintf (stderr, "FIXME: not undoing cell foo\n");
+	// pDocShell->GetDocument
 	for (USHORT i=0; i<nCount; i++)
 		if (ppOldCells[i])
 			ppOldCells[i]->Delete();
@@ -367,8 +369,9 @@
 
 __EXPORT ScUndoEnterValue::~ScUndoEnterValue()
 {
-	if (pOldCell)
-		pOldCell->Delete();
+/*	if (pOldCell)
+	pOldCell->Delete();*/
+		fprintf (stderr, "FIXME: Leaked Post It Note...");
 }
 
 String __EXPORT ScUndoEnterValue::GetComment() const
@@ -461,6 +464,7 @@
 
 __EXPORT ScUndoPutCell::~ScUndoPutCell()
 {
+	fprintf (stderr, "FIXME: Leaked Post It Note...");
 	if (pOldCell)
 		pOldCell->Delete();
 	if (pEnteredCell)
@@ -738,6 +742,7 @@
 	else
 		pOldCell = new ScStringCell( aUndoStr );
 	SetChangeTrack( pOldCell );
+	fprintf (stderr, "FIXME: Leaked Post It Note...");
 	pOldCell->Delete();
 }
 
Only in sc/source/ui/undo: undocell.cxx~
diff -u -r sc-original/source/ui/unoobj/cellsuno.cxx sc/source/ui/unoobj/cellsuno.cxx
--- sc-original/source/ui/unoobj/cellsuno.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/unoobj/cellsuno.cxx	2006-07-10 17:21:37.000000000 +0100
@@ -3424,7 +3424,7 @@
 			while (pCell)
 			{
 				//	Notizen zaehlen als nicht-leer
-				if ( pCell->GetCellType() != CELLTYPE_NOTE || pCell->GetNotePtr() )
+				if ( pCell->GetCellType() != CELLTYPE_NOTE || aIter.GetNotePtr() )
 					aMarkData.SetMultiMarkArea(
 							ScRange( aIter.GetCol(), aIter.GetRow(), aIter.GetTab() ),
 							FALSE );
@@ -3466,7 +3466,7 @@
 			while (pCell)
 			{
 				BOOL bAdd = FALSE;
-				if ( pCell->GetNotePtr() && ( nContentFlags & sheet::CellFlags::ANNOTATION ) )
+				if ( aIter.GetNotePtr() && ( nContentFlags & sheet::CellFlags::ANNOTATION ) )
 					bAdd = TRUE;
 				else
 					switch ( pCell->GetCellType() )
diff -u -r sc-original/source/ui/unoobj/docuno.cxx sc/source/ui/unoobj/docuno.cxx
--- sc-original/source/ui/unoobj/docuno.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/unoobj/docuno.cxx	2006-07-10 17:20:41.000000000 +0100
@@ -2768,7 +2768,7 @@
 		ScBaseCell* pCell = aCellIter.GetFirst();
 		while (pCell)
 		{
-			if (pCell->GetNotePtr())
+			if (pDoc->GetNotePtr( pCell ))
 			{
 				if (nFound == nIndex)
 				{
@@ -2853,7 +2853,7 @@
 		ScBaseCell* pCell = aCellIter.GetFirst();
 		while (pCell)
 		{
-			if (pCell->GetNotePtr())
+			if (aCellIter.GetNotePtr())
 				++nCount;
 			pCell = aCellIter.GetNext();
 		}
diff -u -r sc-original/source/ui/view/output.cxx sc/source/ui/view/output.cxx
--- sc-original/source/ui/view/output.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/view/output.cxx	2006-07-10 17:14:31.000000000 +0100
@@ -2237,7 +2237,7 @@
 					// use origin's pCell for NotePtr test below
 				}
 
-				if ( pCell && pCell->GetNotePtr() && ( bIsMerged ||
+				if ( pCell && pInfo->pNote && ( bIsMerged ||
 						( !pInfo->bHOverlapped && !pInfo->bVOverlapped ) ) )
 				{
 					if (bFirst)
@@ -2315,7 +2315,7 @@
                     // use origin's pCell for NotePtr test below
                 }
 
-                if ( pCell && pCell->GetNotePtr() && ( bIsMerged ||
+                if ( pCell && pInfo->pNote && ( bIsMerged ||
                         ( !pInfo->bHOverlapped && !pInfo->bVOverlapped ) ) )
                 {
                     long nNoteWidth = (long)( SC_CLIPMARK_SIZE * nPPTX );
@@ -2335,7 +2335,6 @@
                     if ( bLayoutRTL ? ( nMarkX >= 0 ) : ( nMarkX < nScrX+nScrW ) )
                     {
                         Rectangle aNoteRect( nMarkX, nPosY, nMarkX+nNoteWidth*nLayoutSign, nPosY+nNoteHeight );
-                        const ScPostIt* pNote = pCell->GetNotePtr();
 
                         // Note title is the cell address (as on printed note pages)
                         String aTitle;
@@ -2343,7 +2342,7 @@
                         aAddress.Format( aTitle, SCA_VALID, pDoc );
 
                         // Content has to be a simple string without line breaks
-                        String aContent = pNote->GetText();
+                        String aContent = pInfo->pNote->GetText();
                         aContent.ConvertLineEnd(LINEEND_LF);
                         xub_StrLen nPos;
                         while ( (nPos=aContent.Search('\n')) != STRING_NOTFOUND )
@@ -2396,7 +2395,7 @@
 			{
 				CellInfo* pInfo = &pThisRowInfo->pCellInfo[nX+1];
 				ScBaseCell* pCell = pInfo->pCell;
-				if ( pCell && pCell->GetNotePtr() )		// auch verdeckte wegen der Numerierung
+				if ( pCell && pInfo->pNote )		// auch verdeckte wegen der Numerierung
 				{
                     aStr = String::CreateFromInt32( lcl_FindInList( rPosList,
                                 ScAddress( nX, pThisRowInfo->nRowNo, nTab)));
diff -u -r sc-original/source/ui/view/prevwsh.cxx sc/source/ui/view/prevwsh.cxx
--- sc-original/source/ui/view/prevwsh.cxx	2006-05-04 16:04:16.000000000 +0100
+++ sc/source/ui/view/prevwsh.cxx	2006-08-03 18:04:09.000000000 +0100
@@ -929,7 +929,7 @@
 	if (pAccessibilityBroadcaster)
 		rObject.EndListening( *pAccessibilityBroadcaster );
 	else
-		DBG_ERROR("kein Accessibility-Broadcaster??!?");
+		DBG_ERROR("kein Accessibility-Broadcaster?!?");
 }
 
 void ScPreviewShell::BroadcastAccessibility( const SfxHint &rHint )
Only in sc/source/ui/view: prevwsh.cxx~
diff -u -r sc-original/source/ui/view/printfun.cxx sc/source/ui/view/printfun.cxx
--- sc-original/source/ui/view/printfun.cxx	2006-07-07 17:51:23.000000000 +0100
+++ sc/source/ui/view/printfun.cxx	2006-07-10 17:11:17.000000000 +0100
@@ -1980,8 +1980,8 @@
 		if (pPos)
 		{
 			ScBaseCell* pCell = pDoc->GetCell( *pPos);
-			const ScPostIt* pNote = pCell->GetNotePtr();
-			if (pNote)
+			const ScPostIt* pNote = pDoc->GetNotePtr( pCell );
+			if( pNote )
 			{
 				if(const EditTextObject *pEditText = pNote->GetEditTextObject())
 				    pEditEngine->SetText(*pEditText);
@@ -2626,7 +2626,7 @@
 			ScBaseCell* pCell = aIter.GetNext( nCol, nRow );
 			while (pCell)
 			{
-				if (pCell->GetNotePtr())
+				if ( pDoc->GetNotePtr( pCell ) )
 				{
 					aNotePosList.Insert( new ScAddress( nCol,nRow,nPrintTab ), LIST_APPEND );
 					++nCount;
diff -u -r sc-original/source/ui/view/tabvwshh.cxx sc/source/ui/view/tabvwshh.cxx
--- sc-original/source/ui/view/tabvwshh.cxx	2005-09-28 13:18:44.000000000 +0100
+++ sc/source/ui/view/tabvwshh.cxx	2006-08-03 18:04:33.000000000 +0100
@@ -260,7 +260,7 @@
 			pDoc->RemoveUnoObject(rObject);
 	}
 	else
-		DBG_ERROR("kein Accessibility-Broadcaster??!?");
+		DBG_ERROR("kein Accessibility-Broadcaster?!?");
 }
 
 void ScTabViewShell::BroadcastAccessibility( const SfxHint &rHint )
Only in sc/source/ui/view: tabvwshh.cxx~
Only in sc: unxlngi6.pro
--- /dev/null	2006-06-16 14:07:58.000000000 +0100
+++ sc/source/core/inc/notetracker.hxx	2006-08-11 16:30:03.000000000 +0100
@@ -0,0 +1,20 @@
+#ifndef _SC_NOTE_TRACKER
+#define _SC_NOTE_TRACKER
+
+#include <hash_map>
+
+class ScNoteTracker
+{
+	struct foo
+	{
+		size_t operator () (const ScBaseCell *cell) const
+		{ return (size_t) cell; }
+	};
+
+public:
+	std::hash_map< const ScBaseCell *, ScPostIt *, foo > aNotes;
+	ScNoteTracker( ScDocument *pDoc ) { aNotes.clear(); }
+};
+
+
+#endif // _SC_NOTE_TRACKER
