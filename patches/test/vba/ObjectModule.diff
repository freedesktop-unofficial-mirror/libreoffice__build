diff --git .gitignore .gitignore
index 71145e6..7f99c80 100644
--- .gitignore
+++ .gitignore
@@ -6,3 +6,5 @@ unxlng*.pro
 localize.sdf
 /solver
 *.orig
+*.swp
+/sc.nodebug
diff --git basctl/source/basicide/baside3.cxx basctl/source/basicide/baside3.cxx
index 1865b94..12c8e0c 100644
--- basctl/source/basicide/baside3.cxx
+++ basctl/source/basicide/baside3.cxx
@@ -112,7 +112,7 @@ DialogWindow::DialogWindow( Window* pPar
 {
 	InitSettings( TRUE, TRUE, TRUE );
 
-	pEditor = new DlgEditor();
+	pEditor = new DlgEditor( rDocument.getDocument() );
 	pEditor->SetWindow( this );
 	pEditor->SetDialog( xDialogModel );
 
@@ -724,7 +724,7 @@ BOOL DialogWindow::SaveDialog()
 		Reference< beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
 		OSL_ASSERT( xProps.is() );
 		OSL_VERIFY( xProps->getPropertyValue( ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext );
-		Reference< XInputStreamProvider > xISP = ::xmlscript::exportDialogModel( xDialogModel, xContext );
+		Reference< XInputStreamProvider > xISP = ::xmlscript::exportDialogModel( xDialogModel, xContext, GetDocument().getDocument() );
 		Reference< XInputStream > xInput( xISP->createInputStream() );
 
 		Reference< XSimpleFileAccess > xSFI( xMSF->createInstance
@@ -942,7 +942,7 @@ void DialogWindow::StoreData()
                     Reference< beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
                     OSL_ASSERT( xProps.is() );
                     OSL_VERIFY( xProps->getPropertyValue( ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext );
-					Reference< XInputStreamProvider > xISP = ::xmlscript::exportDialogModel( xDialogModel, xContext );
+					Reference< XInputStreamProvider > xISP = ::xmlscript::exportDialogModel( xDialogModel, xContext, GetDocument().getDocument() );
 					xLib->replaceByName( ::rtl::OUString( GetName() ), makeAny( xISP ) );
 				}
 			}
diff --git basctl/source/basicide/basides3.cxx basctl/source/basicide/basides3.cxx
index b211eb3..e562ecb 100644
--- basctl/source/basicide/basides3.cxx
+++ basctl/source/basicide/basides3.cxx
@@ -98,7 +98,7 @@ DialogWindow* BasicIDEShell::CreateDlgWi
                 Reference< beans::XPropertySet > xProps( xMSF, UNO_QUERY );
                 OSL_ASSERT( xProps.is() );
                 OSL_VERIFY( xProps->getPropertyValue( ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext );
-				::xmlscript::importDialogModel( xInput, xDialogModel, xContext );
+				::xmlscript::importDialogModel( xInput, xDialogModel, xContext, rDocument.getDocument() );
 				LocalizationMgr::setStringResourceAtDialog( rDocument, rLibName, aDlgName, xDialogModel );
 
 				// new dialog window
diff --git basctl/source/basicide/moduldlg.cxx basctl/source/basicide/moduldlg.cxx
index a5b41e7..cd2c032 100644
--- basctl/source/basicide/moduldlg.cxx
+++ basctl/source/basicide/moduldlg.cxx
@@ -315,7 +315,7 @@ void BasicIDEShell::CopyDialogResources(
     Reference< beans::XPropertySet > xProps( xMSF, UNO_QUERY );
     OSL_ASSERT( xProps.is() );
     OSL_VERIFY( xProps->getPropertyValue( ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext );
-	::xmlscript::importDialogModel( xInput, xDialogModel, xContext );
+	::xmlscript::importDialogModel( xInput, xDialogModel, xContext, rSourceDoc.getDocument() );
 
 	if( xDialogModel.is() )
 	{
@@ -332,7 +332,7 @@ void BasicIDEShell::CopyDialogResources(
 		{
 			LocalizationMgr::setResourceIDsForDialog( xDialogModel, xDestMgr );
 		}
-		io_xISP = ::xmlscript::exportDialogModel( xDialogModel, xContext );
+		io_xISP = ::xmlscript::exportDialogModel( xDialogModel, xContext, rDestDoc.getDocument() );
 	}
 }
 
diff --git basctl/source/basicide/scriptdocument.cxx basctl/source/basicide/scriptdocument.cxx
index a12fb46..e984052 100644
--- basctl/source/basicide/scriptdocument.cxx
+++ basctl/source/basicide/scriptdocument.cxx
@@ -663,7 +663,7 @@ namespace basctl
                 if ( !_rxExistingDialogModel.is() )
                 {
                     Reference< XInputStream > xInput( xISP->createInputStream(), UNO_QUERY_THROW );
-    			    ::xmlscript::importDialogModel( xInput, xDialogModel, aContext.getUNOContext() );
+    			    ::xmlscript::importDialogModel( xInput, xDialogModel, aContext.getUNOContext(), getDocument() );
                 }
 
 			    // set new name as property
@@ -671,7 +671,7 @@ namespace basctl
 			    xDlgPSet->setPropertyValue( DLGED_PROP_NAME, makeAny( _rNewName ) );
 
 			    // export dialog model
-			    xISP = ::xmlscript::exportDialogModel( xDialogModel, aContext.getUNOContext() );
+			    xISP = ::xmlscript::exportDialogModel( xDialogModel, aContext.getUNOContext(), getDocument() );
 			    aElement <<= xISP;
             }
 
@@ -749,8 +749,16 @@ namespace basctl
             Reference< XNameContainer > xLib( getOrCreateLibrary( E_SCRIPTS, _rLibName ), UNO_QUERY_THROW );
 	        if ( !xLib->hasByName( _rModName ) )
                 return false;
-
-            xLib->replaceByName( _rModName, makeAny( _rModuleCode ) );
+            ModuleInfo mInfo;
+            Any aMod;
+            if ( xLib->getByName( _rModName ) >>= mInfo )
+            {
+                mInfo.ModuleSource = _rModuleCode;
+                aMod <<= mInfo;
+            }
+            else
+                aMod <<= _rModuleCode;
+            xLib->replaceByName( _rModName, aMod );
             return true;
         }
         catch( const Exception& )
@@ -783,7 +791,7 @@ namespace basctl
 		    xDlgPSet->setPropertyValue( DLGED_PROP_NAME, makeAny( _rDialogName ) );
 
 		    // export dialog model
-            _out_rDialogProvider = ::xmlscript::exportDialogModel( xDialogModel, aContext.getUNOContext() );
+            _out_rDialogProvider = ::xmlscript::exportDialogModel( xDialogModel, aContext.getUNOContext(), getDocument() );
 
 		    // insert dialog into library
 		    xLib->insertByName( _rDialogName, makeAny( _out_rDialogProvider ) );
diff --git basctl/source/dlged/dlged.cxx basctl/source/dlged/dlged.cxx
index b7588ee..09ebe9c 100644
--- basctl/source/dlged/dlged.cxx
+++ basctl/source/dlged/dlged.cxx
@@ -208,7 +208,7 @@ BOOL DlgEditor::RemarkDialog()
 
 //----------------------------------------------------------------------------
 
-DlgEditor::DlgEditor()
+DlgEditor::DlgEditor( const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& xModel )
 	:pHScroll(NULL)
 	,pVScroll(NULL)
 	,pDlgEdModel(NULL)
@@ -230,6 +230,7 @@ DlgEditor::DlgEditor()
 	,bCreateOK(TRUE)
 	,bDialogModelChanged(FALSE)
 	,mnPaintGuard(0)
+	,m_xDocument( xModel )
 {
 	pDlgEdModel = new DlgEdModel();
 	pDlgEdModel->GetItemPool().FreezeIdRanges();
@@ -838,7 +839,7 @@ void DlgEditor::Copy()
     Reference< beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
     OSL_ASSERT( xProps.is() );
     OSL_VERIFY( xProps->getPropertyValue( OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext );
-	Reference< XInputStreamProvider > xISP = ::xmlscript::exportDialogModel( xClipDialogModel, xContext );
+	Reference< XInputStreamProvider > xISP = ::xmlscript::exportDialogModel( xClipDialogModel, xContext, m_xDocument );
 	Reference< XInputStream > xStream( xISP->createInputStream() );
 	Sequence< sal_Int8 > DialogModelBytes;
 	implCopyStreamToByteSequence( xStream, DialogModelBytes );
@@ -871,7 +872,7 @@ void DlgEditor::Copy()
 			uno::Reference< resource::XStringResourceManager >
 				xStringResourceManager( xStringResourcePersistence, uno::UNO_QUERY );
 			LocalizationMgr::resetResourceForDialog( xClipDialogModel, xStringResourceManager );
-			Reference< XInputStreamProvider > xISP2 = ::xmlscript::exportDialogModel( xClipDialogModel, xContext );
+			Reference< XInputStreamProvider > xISP2 = ::xmlscript::exportDialogModel( xClipDialogModel, xContext, m_xDocument );
 			Reference< XInputStream > xStream2( xISP2->createInputStream() );
 			Sequence< sal_Int8 > NoResourceDialogModelBytes;
 			implCopyStreamToByteSequence( xStream2, NoResourceDialogModelBytes );
@@ -1017,7 +1018,7 @@ void DlgEditor::Paste()
                     Reference< beans::XPropertySet > xProps( xMSF, UNO_QUERY );
                     OSL_ASSERT( xProps.is() );
                     OSL_VERIFY( xProps->getPropertyValue( OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext );
-					::xmlscript::importDialogModel( ::xmlscript::createInputStream( *((::rtl::ByteSequence*)(&DialogModelBytes)) ) , xClipDialogModel, xContext );
+					::xmlscript::importDialogModel( ::xmlscript::createInputStream( *((::rtl::ByteSequence*)(&DialogModelBytes)) ) , xClipDialogModel, xContext, m_xDocument );
 				}
 
 				// get control models from clipboard dialog model
diff --git basctl/source/inc/dlged.hxx basctl/source/inc/dlged.hxx
index 02a1b08..3db132a 100644
--- basctl/source/inc/dlged.hxx
+++ basctl/source/inc/dlged.hxx
@@ -35,6 +35,7 @@
 #include <com/sun/star/awt/XControlContainer.hpp>
 #include <com/sun/star/datatransfer/DataFlavor.hpp>
 #include <com/sun/star/util/XNumberFormatsSupplier.hpp>
+#include <com/sun/star/frame/XModel.hpp>
 #include <tools/link.hxx>
 #include <tools/gen.hxx> 
 #include <vcl/timer.hxx>
@@ -129,9 +130,11 @@ protected:
 	BOOL				bDialogModelChanged;
     Timer               aMarkTimer;
 	long				mnPaintGuard;
+	::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel > m_xDocument;
 
+	DlgEditor(); // not implemented
 public:
-	DlgEditor();
+	DlgEditor( const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& xModel );
 	~DlgEditor();
 
 	void			SetWindow( Window* pWindow );
diff --git basic/inc/basic/basmgr.hxx basic/inc/basic/basmgr.hxx
index 2674c59..3c4f364 100644
--- basic/inc/basic/basmgr.hxx
+++ basic/inc/basic/basmgr.hxx
@@ -113,9 +113,10 @@ struct LibraryContainerInfo
     ::com::sun::star::uno::Reference< com::sun::star::script::XPersistentLibraryContainer > mxScriptCont;
     ::com::sun::star::uno::Reference< com::sun::star::script::XPersistentLibraryContainer > mxDialogCont;
     OldBasicPassword* mpOldBasicPassword;
+    bool mbVBACompatOn;
 
     LibraryContainerInfo()
-        :mpOldBasicPassword( NULL )
+        :mpOldBasicPassword( NULL ), mbVBACompatOn( false )
     {
     }
 
@@ -127,7 +128,7 @@ struct LibraryContainerInfo
     )
         : mxScriptCont( xScriptCont )
         , mxDialogCont( xDialogCont )
-        , mpOldBasicPassword( pOldBasicPassword )
+        , mpOldBasicPassword( pOldBasicPassword ), mbVBACompatOn( false )
 	{}
 };
 
diff --git basic/inc/basic/sbobjmod.hxx basic/inc/basic/sbobjmod.hxx
index bdc23d9..15f6352 100644
--- basic/inc/basic/sbobjmod.hxx
+++ basic/inc/basic/sbobjmod.hxx
@@ -56,6 +56,7 @@ public:
     SbObjModule( const com::sun::star::script::ModuleInfo& mInfo, bool bIsVbaCompatible );
     virtual SbxVariable* Find( const XubString& rName, SbxClassType t );
     SbxVariable* GetObject();
+    void SetUnoObject( const com::sun::star::uno::Any& aObj )throw ( com::sun::star::uno::RuntimeException ) ;
 };
 
 class SbUserFormModule : public SbObjModule
diff --git basic/source/basmgr/basmgr.cxx basic/source/basmgr/basmgr.cxx
index b5394ae..f12312e 100644
--- basic/source/basmgr/basmgr.cxx
+++ basic/source/basmgr/basmgr.cxx
@@ -44,6 +44,7 @@
 #include <tools/debug.hxx>
 #include <tools/diagnose_ex.h>
 #include <basic/sbmod.hxx>
+#include <basic/sbobjmod.hxx>
 
 #include <basic/sbuno.hxx>
 #include <basic/basmgr.hxx>
@@ -60,6 +61,7 @@
 
 // Library API, implemented for XML import/export
 
+#include <com/sun/star/script/XVBACompat.hpp>
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/container/XContainer.hpp>
 #include <com/sun/star/script/XStarBasicAccess.hpp>
@@ -208,10 +210,11 @@ void BasMgrContainerListenerImpl::insert
 	if( !pMgr->GetLib( aLibName ) )
 	{
         BasicManager* pBasMgr = static_cast< BasicManager* >( pMgr );
-#ifdef DBG_UTIL
 		StarBASIC* pLib = 
-#endif
 		pBasMgr->CreateLibForLibContainer( aLibName, xScriptCont );
+		if ( pLib )
+			pLib->SetVBAEnabled( pMgr->mpImpl->maContainerInfo.mbVBACompatOn );
+        
 		DBG_ASSERT( pLib, "XML Import: Basic library could not be created");
 	}
 
@@ -292,6 +295,12 @@ void SAL_CALL BasMgrContainerListenerImp
 	{
         Reference< XLibraryContainer > xScriptCont( Event.Source, UNO_QUERY );
 		insertLibraryImpl( xScriptCont, mpMgr, Event.Element, aName );
+                Reference<  XVBACompat > xCompat( xScriptCont, UNO_QUERY );
+                if ( xCompat.is() )
+                {
+		    StarBASIC* pLib = mpMgr->GetLib( aName );
+                    pLib->SetVBAEnabled( xCompat->getVBACompatModeOn() );
+                }
 	}
 	else
 	{
@@ -337,25 +346,35 @@ void SAL_CALL BasMgrContainerListenerImp
     DBG_ASSERT( !bLibContainer, "library container fired elementReplaced()");
 
 	StarBASIC* pLib = mpMgr->GetLib( maLibName );
+    
 	if( pLib )
 	{
-         ModuleInfo mInfo;
+	    SbModule* pMod = pLib->FindModule( aName );
+		OUString aMod;
+        ModuleInfo mInfo;
         if( Event.Element >>= mInfo )
-        {
-            OSL_TRACE("#elementReplaced Mod");
-            pLib->MakeModule32( mInfo );
-        }
-        else
-        {
-		    SbModule* pMod = pLib->FindModule( aName );
-
-		    OUString aMod;
+			aMod = mInfo.ModuleSource;
+        else 
             Event.Element >>= aMod;
-		    if( pMod )
-		   	    pMod->SetSource32( aMod );
-            else
-			    pLib->MakeModule32( aName, aMod );
-        }
+		if( pMod )
+		{
+			pMod->SetSource32( aMod );
+			if ( mInfo.ModuleType == ModuleType::Document )
+			{
+				SbObjModule* pObjModule = dynamic_cast< SbObjModule* >( pMod );
+				if ( pObjModule )	
+					pObjModule->SetUnoObject( makeAny( mInfo.ModuleObject ) );
+			}
+		}
+        else
+			// Probably we should have an assert for
+			// unknow module type, e.g. either we are using
+			// the ModuleInfo structure ( vba ) for *all* modules
+			// or not ( normal )
+			if ( mInfo.ModuleType == ModuleType::Unknown )
+				pLib->MakeModule32( aName, aMod );
+			else
+				pLib->MakeModule32( mInfo );
 
 		pLib->SetModified( FALSE );
 	}
@@ -822,6 +841,12 @@ void BasicManager::SetLibraryContainerIn
 
 	Reference< XLibraryContainer > xScriptCont( mpImpl->maContainerInfo.mxScriptCont.get() );
 	StarBASIC* pStdLib = GetStdLib();
+        Reference< XVBACompat > xCompat( GetScriptLibraryContainer(), UNO_QUERY );
+        if ( xCompat.is() )
+                mpImpl->maContainerInfo.mbVBACompatOn = xCompat->getVBACompatModeOn();    
+	// Std is created regardless of any persisted Libraries, so.. we need
+	// to make sure we set its compat mode here
+	pStdLib->SetVBAEnabled( mpImpl->maContainerInfo.mbVBACompatOn );
 	String aLibName = pStdLib->GetName();
 	if( xScriptCont.is() )
 	{
diff --git basic/source/classes/sbxmod.cxx basic/source/classes/sbxmod.cxx
index 3f9e76c..8083eaa 100644
--- basic/source/classes/sbxmod.cxx
+++ basic/source/classes/sbxmod.cxx
@@ -2250,25 +2250,26 @@ SbObjModule::SbObjModule( const com::sun
     if ( mInfo.ModuleType == script::ModuleType::Form )
     {
         SetClassName( rtl::OUString::createFromAscii( "Form" ) );
-        return;
     }
-    try
+    else if ( mInfo.ModuleObject.is() )
+        SetUnoObject( uno::makeAny( mInfo.ModuleObject ) );   
+}
+void
+SbObjModule::SetUnoObject( const uno::Any& aObj ) throw ( uno::RuntimeException )
+{
+    SbUnoObject* pUnoObj = PTR_CAST(SbUnoObject,(SbxVariable*)pDocObject);
+    if ( pUnoObj && pUnoObj->getUnoAny() == aObj ) // object is equal, nothing to do
+        return;
+    pDocObject = new SbUnoObject( GetName(), uno::makeAny( aObj ) );
+            
+    com::sun::star::uno::Reference< com::sun::star::lang::XServiceInfo > xServiceInfo( aObj, com::sun::star::uno::UNO_QUERY_THROW );
+    if( xServiceInfo->supportsService( rtl::OUString::createFromAscii( "org.openoffice.excel.Worksheet" ) ) )
     {
-        com::sun::star::uno::Any aObject( mInfo.ModuleObject );
-        pDocObject = new SbUnoObject( GetName(), aObject );
-        com::sun::star::uno::Reference< com::sun::star::lang::XServiceInfo > xServiceInfo( aObject, com::sun::star::uno::UNO_QUERY_THROW );
-        if( xServiceInfo->supportsService( rtl::OUString::createFromAscii( "org.openoffice.excel.Worksheet" ) ) )
-        {
-            SetClassName( rtl::OUString::createFromAscii( "Worksheet" ) );
-        }
-        else if( xServiceInfo->supportsService( rtl::OUString::createFromAscii( "org.openoffice.excel.Workbook" ) ) )
-        {
-            SetClassName( rtl::OUString::createFromAscii( "Workbook" ) );
-        }
+        SetClassName( rtl::OUString::createFromAscii( "Worksheet" ) );
     }
-    catch( com::sun::star::uno::RuntimeException e )
+    else if( xServiceInfo->supportsService( rtl::OUString::createFromAscii( "org.openoffice.excel.Workbook" ) ) )
     {
-        OSL_TRACE("***** Failed to initialise API Object." );
+        SetClassName( rtl::OUString::createFromAscii( "Workbook" ) );
     }
 }
 
@@ -2301,7 +2302,7 @@ class FormObjEventListenerImpl : public 
 public:
     FormObjEventListenerImpl( SbUserFormModule* pUserForm, const uno::Reference< lang::XComponent >& xComponent ) : mpUserForm( pUserForm ), mxComponent( xComponent) , mbDisposed( false )
     {
-        if ( mxComponent.is() );
+        if ( mxComponent.is() )
         {
 	    uno::Reference< awt::XTopWindow > xList( mxComponent, uno::UNO_QUERY_THROW );;
             //uno::Reference< awt::XWindow > xList( mxComponent, uno::UNO_QUERY_THROW );;
diff --git basic/source/inc/namecont.hxx basic/source/inc/namecont.hxx
index e5b3d76..ac4278b 100644
--- basic/source/inc/namecont.hxx
+++ basic/source/inc/namecont.hxx
@@ -62,20 +62,23 @@
 #include <cppuhelper/implbase2.hxx>
 #include <cppuhelper/compbase6.hxx>
 #include <cppuhelper/compbase7.hxx>
+#include <cppuhelper/compbase8.hxx>
 #include <cppuhelper/interfacecontainer.hxx>
+#include <com/sun/star/script/XVBACompat.hpp>
 
 class BasicManager;
 
 namespace basic
 {
 
-typedef ::cppu::WeakComponentImplHelper7< 
+typedef ::cppu::WeakComponentImplHelper8< 
     ::com::sun::star::lang::XInitialization,
     ::com::sun::star::script::XStorageBasedLibraryContainer,
     ::com::sun::star::script::XLibraryContainerPassword,
     ::com::sun::star::script::XLibraryContainerExport,
     ::com::sun::star::container::XContainer,
     ::com::sun::star::script::XLibraryQueryExecutable,
+    ::com::sun::star::script::XVBACompat,
     ::com::sun::star::lang::XServiceInfo > LibraryContainerHelper;
 
 typedef ::cppu::WeakImplHelper2< ::com::sun::star::container::XNameContainer,
@@ -109,6 +112,11 @@ NameContainerNameMap;
 
 
 //============================================================================
+class ItemConvertor
+{
+public:
+    virtual bool convert(com::sun::star::uno::Any& item ) = 0;
+};
 
 class NameContainer : public ::cppu::BaseMutex, public NameContainerHelper
 {
@@ -132,7 +140,7 @@ public:
 
 	void setEventSource( ::com::sun::star::uno::XInterface* pxEventSource )
 		{ mpxEventSource = pxEventSource; }
-
+        bool convertContainer( const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor );
     // Methods XElementAccess
     virtual ::com::sun::star::uno::Type SAL_CALL getElementType(  ) 
 		throw(::com::sun::star::uno::RuntimeException);
@@ -248,7 +256,7 @@ protected:
 	sal_Bool        mbOwnBasMgr;
 
     InitMode meInitMode;
-
+    bool mbVBACompatModeOn;
 	void implStoreLibrary( SfxLibrary* pLib,
 							const ::rtl::OUString& aName,
 							const ::com::sun::star::uno::Reference< ::com::sun::star::embed::XStorage >& xStorage );
@@ -331,7 +339,7 @@ protected:
     virtual const sal_Char* SAL_CALL    getOldInfoFileName() const = 0;
     virtual const sal_Char* SAL_CALL    getLibElementFileExtension() const = 0;
     virtual const sal_Char* SAL_CALL    getLibrariesDir() const = 0;
-
+    virtual void convertLibraryEntries() { /*default bogus implementation*/}
     // Handle maLibInfoFileURL and maStorageURL correctly
     void checkStorageURL
     (
@@ -497,6 +505,9 @@ public:
         throw (::com::sun::star::uno::RuntimeException);
     virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames( )
         throw (::com::sun::star::uno::RuntimeException) = 0;
+    // Methods XVBACompat
+    virtual ::sal_Bool SAL_CALL getVBACompatModeOn() throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL setVBACompatModeOn( ::sal_Bool _vbacompatmodeon ) throw (::com::sun::star::uno::RuntimeException);
 };
 
 class LibraryContainerMethodGuard
@@ -556,7 +567,7 @@ private:
 	::rtl::OUString maPassword;
 
 	sal_Bool mbSharedIndexFile;
-
+    ::xmlscript::ObjectModuleDescHash mhCodeNameToObjDesc;
 	// Additional functionality for localisation
 	// Provide modify state including resources
 	virtual sal_Bool isModified( void ) = 0;
@@ -646,6 +657,7 @@ public:
 	virtual void SAL_CALL removeContainerListener( const ::com::sun::star::uno::Reference< 
 		::com::sun::star::container::XContainerListener >& xListener ) 
 			throw (::com::sun::star::uno::RuntimeException);
+	bool convertContainer(const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor );
 };
 
 
diff --git basic/source/inc/scriptcont.hxx basic/source/inc/scriptcont.hxx
index 140a5ca..99d1cc8 100644
--- basic/source/inc/scriptcont.hxx
+++ basic/source/inc/scriptcont.hxx
@@ -97,6 +97,7 @@ class SfxScriptLibraryContainer : public
     virtual const sal_Char* SAL_CALL    getOldInfoFileName() const;
     virtual const sal_Char* SAL_CALL    getLibElementFileExtension() const;
     virtual const sal_Char* SAL_CALL    getLibrariesDir() const;
+    virtual void convertLibraryEntries();
 
 public:
 	SfxScriptLibraryContainer( void );
@@ -161,7 +162,7 @@ public:
     (
         ModifiableHelper& _rModifiable,
         const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xMSF,
-	    const ::com::sun::star::uno::Reference< ::com::sun::star::ucb::XSimpleFileAccess >& xSFI
+	    const ::com::sun::star::uno::Reference< ::com::sun::star::ucb::XSimpleFileAccess >& xSFI, bool bVBACompat
     );
 
 	SfxScriptLibrary
@@ -169,7 +170,7 @@ public:
         ModifiableHelper& _rModifiable,
         const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xMSF,
 	    const ::com::sun::star::uno::Reference< ::com::sun::star::ucb::XSimpleFileAccess >& xSFI,
-        const ::rtl::OUString& aLibInfoFileURL, const ::rtl::OUString& aStorageURL, sal_Bool ReadOnly
+        const ::rtl::OUString& aLibInfoFileURL, const ::rtl::OUString& aStorageURL, sal_Bool ReadOnly, bool bVBACOmpat
     );
 };
 
diff --git basic/source/uno/dlgcont.cxx basic/source/uno/dlgcont.cxx
index 91efe9d..9920651 100644
--- basic/source/uno/dlgcont.cxx
+++ basic/source/uno/dlgcont.cxx
@@ -325,7 +325,7 @@ Any SAL_CALL SfxDialogLibraryContainer::
 	
 	try {
 		// start parsing 
-		xParser->setDocumentHandler( ::xmlscript::importDialogModel( xDialogModel, xContext ) );
+		xParser->setDocumentHandler( ::xmlscript::importDialogModel( xDialogModel, xContext, mxOwnerDocument ) );
 		xParser->parseStream( source );
 	}
 	catch( Exception& )
@@ -339,7 +339,7 @@ Any SAL_CALL SfxDialogLibraryContainer::
 
 	// Create InputStream, TODO: Implement own InputStreamProvider
 	// to avoid creating the DialogModel here!
-	Reference< XInputStreamProvider > xISP = ::xmlscript::exportDialogModel( xDialogModel, xContext );
+	Reference< XInputStreamProvider > xISP = ::xmlscript::exportDialogModel( xDialogModel, xContext, mxOwnerDocument );
 	aRetAny <<= xISP;
 	return aRetAny;
 }
diff --git basic/source/uno/namecont.cxx basic/source/uno/namecont.cxx
index e5f37c7..2b910a4 100644
--- basic/source/uno/namecont.cxx
+++ basic/source/uno/namecont.cxx
@@ -105,6 +105,27 @@ static bool GbMigrationSuppressErrors = 
 //============================================================================
 // Implementation class NameContainer
 
+bool 
+NameContainer::convertContainer(const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor )
+{
+        bool bRes = true;
+        uno::Sequence< uno::Any > mCopyValues( mValues );
+	for ( sal_Int32	i = 0; bRes && i < mCopyValues.getLength();  ++i )
+	{
+		if ( !aConvertor.convert( mCopyValues[ i ] ) )
+                {
+			bRes = false;
+                        break;
+                }
+	}
+	if ( bRes )
+        {
+                mValues = mCopyValues;
+		mType = rNewType;
+        }
+	return bRes;
+}
+
 // Methods XElementAccess
 Type NameContainer::getElementType()
 	throw(RuntimeException)
@@ -153,7 +174,7 @@ void NameContainer::replaceByName( const
 	throw(IllegalArgumentException, NoSuchElementException, WrappedTargetException, RuntimeException)
 {
 	Type aAnyType = aElement.getValueType();
-    if( mType != aAnyType && aAnyType != getCppuType( static_cast< ModuleInfo* >( NULL ) ) )
+    if( mType != aAnyType )
 		throw IllegalArgumentException();
 
 	NameContainerNameMap::iterator aIt = mHashMap.find( aName );
@@ -195,7 +216,7 @@ void NameContainer::insertByName( const 
 	throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
 {
 	Type aAnyType = aElement.getValueType();
-    if( mType != aAnyType && aAnyType != getCppuType( static_cast< ModuleInfo* >( NULL ) ) )
+    if( mType != aAnyType )
 		throw IllegalArgumentException();
 
 	NameContainerNameMap::iterator aIt = mHashMap.find( aName );
@@ -325,6 +346,30 @@ void ModifiableHelper::setModified( sal_
 // Implementation class SfxLibraryContainer
 DBG_NAME( SfxLibraryContainer )
 
+::sal_Bool SAL_CALL 
+SfxLibraryContainer::getVBACompatModeOn() throw (RuntimeException)
+{
+    return mbVBACompatModeOn;
+}
+void SAL_CALL 
+SfxLibraryContainer::setVBACompatModeOn( ::sal_Bool _vbacompatmodeon ) throw (RuntimeException)
+{
+    // will need to trigger event so that basicmanager can get it	
+    bool bNeedsConversion = ( mbVBACompatModeOn != _vbacompatmodeon );
+    mbVBACompatModeOn =  ( _vbacompatmodeon == sal_True );
+    // for Dialogs 'convertLibraryEntries' does nothing ( for now ) 
+    // for Scripts the Library's NameContainer needs to be converted as follows
+    // When vba mode is turned off
+    // Userform and Document modules need to be deleted
+    //    String -> Any( ModuleInfo ) to
+    //    String -> Any( String ) 
+    // When vba mode is turned on
+    //    String -> Any( String )  to
+    //    String -> Any( ModuleInfo )
+    // Userform and Document modules need to be created
+    if ( bNeedsConversion )
+        convertLibraryEntries(); // for Dialogs this does nothing ( for now ) 
+}
 // Ctor
 SfxLibraryContainer::SfxLibraryContainer( void )
 	: LibraryContainerHelper( maMutex )
@@ -334,6 +379,7 @@ SfxLibraryContainer::SfxLibraryContainer
     , mbOasis2OOoFormat( sal_False )
     , mpBasMgr( NULL )
     , mbOwnBasMgr( sal_False )
+    , mbVBACompatModeOn( sal_False )
 {
     DBG_CTOR( SfxLibraryContainer, NULL );
 
@@ -790,7 +836,7 @@ sal_Bool SfxLibraryContainer::init_Impl(
                 OSL_ENSURE( 0, OUStringToOString( e.Message, RTL_TEXTENCODING_ASCII_US ).getStr() );
                 return sal_False;
             }
-
+            mbVBACompatModeOn = pLibArray->mbVBAMode; 
 		    sal_Int32 nLibCount = pLibArray->mnLibCount;
 		    for( sal_Int32 i = 0 ; i < nLibCount ; i++ )
 		    {
@@ -1619,17 +1665,39 @@ void SfxLibraryContainer::implImportLibD
     {
 	    sal_Int32 nElementCount = rLib.aElementNames.getLength();
 	    const OUString* pElementNames = rLib.aElementNames.getConstArray();
-	    Any aDummyElement = createEmptyLibraryElement();
+	    Any aDummyElement;
+            ::xmlscript::ObjectModuleDescHash::iterator it_end = rLib.hModuleTypeDesc.end();
 	    for( sal_Int32 i = 0 ; i < nElementCount ; i++ )
 	    {
+                    if ( getVBACompatModeOn() ) 
+                    {
+                        ::xmlscript::ObjectModuleDescHash::iterator it = rLib.hModuleTypeDesc.find( pElementNames[i] );
+                    
+                        com::sun::star::script::ModuleInfo mInfo;
+                        mInfo.ModuleType = ModuleType::Normal;
+                        mInfo.ModuleName = pElementNames[i];
+                        if ( it != it_end )
+                        {
+                            mInfo.ModuleType = it->second.mnModuleType;
+                            // hack for userform, needs to know about the document
+                            // well really it needs the dialog library
+                            if (  mInfo.ModuleType == ModuleType::Form )
+                                mInfo.ModuleObject = mxOwnerDocument;
+                        }
+                        aDummyElement <<= mInfo;
+                    }
+                    else
+	                aDummyElement = createEmptyLibraryElement();
 		    pLib->maNameContainer.insertByName( pElementNames[i], aDummyElement );
-	    }
+        }
         pLib->mbPasswordProtected = rLib.bPasswordProtected;
         pLib->mbReadOnly = rLib.bReadOnly;
 		pLib->mbPreload  = rLib.bPreload;
         pLib->implSetModified( sal_False );
 
         pLib->mbInitialised = sal_True;
+        pLib->mhCodeNameToObjDesc = rLib.hModuleTypeDesc;
+
     }
 }
 
@@ -2177,13 +2245,29 @@ void SAL_CALL SfxLibraryContainer::loadL
 			}
 
 			Any aAny = importLibraryElement( aFile, xInStream );
+
+            com::sun::star::script::ModuleInfo mInfo;
 			if( pImplLib->hasByName( aElementName ) )
             {
+                if ( getVBACompatModeOn() )
+                {
+				    pImplLib->maNameContainer.getByName( aElementName ) >>= mInfo;
+                    aAny >>= mInfo.ModuleSource; 
+                    aAny <<= mInfo;
+                } 
                 if( aAny.hasValue() )
+                {
 				    pImplLib->maNameContainer.replaceByName( aElementName, aAny );
+                }
             }
 			else
             {
+                if ( getVBACompatModeOn() )
+                {
+                    mInfo.ModuleType = ModuleType::Normal;
+                    aAny >>= mInfo.ModuleSource; 
+                    aAny <<= mInfo;
+                }
 				pImplLib->maNameContainer.insertByName( aElementName, aAny );
             }
 		}
@@ -2832,6 +2916,12 @@ void SAL_CALL SfxLibrary::removeContaine
 	maNameContainer.removeContainerListener( xListener );
 }
 
+bool SfxLibrary::convertContainer(const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor )
+{
+	return maNameContainer.convertContainer( rNewType, aConvertor );
+}
+
+
 //============================================================================
 
 }   // namespace basic
diff --git basic/source/uno/sbservices.cxx basic/source/uno/sbservices.cxx
index a2a4ded..aa076ea 100644
--- basic/source/uno/sbservices.cxx
+++ basic/source/uno/sbservices.cxx
@@ -43,6 +43,7 @@ namespace basic
     //--------------------------------------------------------------------
     extern void createRegistryInfo_SfxDialogLibraryContainer();
     extern void createRegistryInfo_SfxScriptLibraryContainer();
+    extern void createRegistryInfo_PersistedReadOnlyCodeNames();
 
     static void initializeModule()
     {
@@ -54,6 +55,7 @@ namespace basic
             {
                 createRegistryInfo_SfxDialogLibraryContainer();
                 createRegistryInfo_SfxScriptLibraryContainer();
+                createRegistryInfo_PersistedReadOnlyCodeNames();
             }
         }
     }
diff --git basic/source/uno/scriptcont.cxx basic/source/uno/scriptcont.cxx
index 7480f7c..61955ff 100644
--- basic/source/uno/scriptcont.cxx
+++ basic/source/uno/scriptcont.cxx
@@ -156,7 +156,7 @@ SfxScriptLibraryContainer::SfxScriptLibr
 SfxLibrary* SfxScriptLibraryContainer::implCreateLibrary( const OUString& aName )
 {
 	(void)aName;	// Only needed for SfxDialogLibrary
-	SfxLibrary* pRet = new SfxScriptLibrary( maModifiable, mxMSF, mxSFI );
+	SfxLibrary* pRet = new SfxScriptLibrary( maModifiable, mxMSF, mxSFI, getVBACompatModeOn() );
 	return pRet;
 }
 
@@ -167,7 +167,7 @@ SfxLibrary* SfxScriptLibraryContainer::i
 	(void)aName;	// Only needed for SfxDialogLibrary
 	SfxLibrary* pRet =
 		new SfxScriptLibrary
-            ( maModifiable, mxMSF, mxSFI, aLibInfoFileURL, StorageURL, ReadOnly );
+            ( maModifiable, mxMSF, mxSFI, aLibInfoFileURL, StorageURL, ReadOnly, getVBACompatModeOn() );
 	return pRet;
 }
 
@@ -1056,6 +1056,11 @@ SfxScriptLibraryContainer:: HasExecutabl
 
 //============================================================================
 // Service
+class PersistedReadOnlyCodeNames;
+void createRegistryInfo_PersistedReadOnlyCodeNames()
+{
+    static OAutoRegistration< PersistedReadOnlyCodeNames > aAutoRegistration;
+}
 void createRegistryInfo_SfxScriptLibraryContainer()
 {
     static OAutoRegistration< SfxScriptLibraryContainer > aAutoRegistration;
@@ -1109,8 +1114,8 @@ Reference< XInterface > SAL_CALL SfxScri
 // Ctor
 SfxScriptLibrary::SfxScriptLibrary( ModifiableHelper& _rModifiable,
                                     const Reference< XMultiServiceFactory >& xMSF,
-                                    const Reference< XSimpleFileAccess >& xSFI )
-	: SfxLibrary( _rModifiable, getCppuType( (const OUString *)0 ), xMSF, xSFI )
+                                    const Reference< XSimpleFileAccess >& xSFI, bool bVBA )
+	: SfxLibrary( _rModifiable, bVBA ? getCppuType( ( const script::ModuleInfo*)0 ) : getCppuType( (const OUString *)0 ), xMSF, xSFI )
     , mbLoadedSource( sal_False )
     , mbLoadedBinary( sal_False )
 {
@@ -1121,8 +1126,8 @@ SfxScriptLibrary::SfxScriptLibrary( Modi
                                     const Reference< XSimpleFileAccess >& xSFI,
                                     const OUString& aLibInfoFileURL,
                                     const OUString& aStorageURL,
-                                    sal_Bool ReadOnly )
-	: SfxLibrary( _rModifiable, getCppuType( (const OUString *)0 ), xMSF, xSFI,
+                                    sal_Bool ReadOnly, bool bVBA )
+	: SfxLibrary( _rModifiable, bVBA ? getCppuType( ( const script::ModuleInfo*)0 ) : getCppuType( (const OUString *)0 ), xMSF, xSFI,
 						aLibInfoFileURL, aStorageURL, ReadOnly)
     , mbLoadedSource( sal_False )
     , mbLoadedBinary( sal_False )
@@ -1160,7 +1165,183 @@ void SfxScriptLibrary::storeResourcesToS
 	// No resources
 	(void)xStorage;
 }
+typedef ::cppu::WeakImplHelper3< container::XNameAccess, lang::XInitialization, lang::XServiceInfo > ReadOnlyCodeNames_BASE;
+
+// XNameAccess, codename to/from objectnames
+class PersistedReadOnlyCodeNames : ReadOnlyCodeNames_BASE
+{
+    ::xmlscript::CodeNameHash mCodeNameToObjectNames;
+public:
+    PersistedReadOnlyCodeNames()
+    {
+    }
+    // Methods - XInitialise
+    virtual void SAL_CALL initialize( const uno::Sequence< uno::Any >& aArguments ) throw (uno::Exception, uno::RuntimeException)
+    {
+        if ( !aArguments.getLength() )
+            throw RuntimeException();
+        Reference< document::XStorageBasedDocument > xDocument( aArguments[ 0 ], uno::UNO_QUERY_THROW ); 
+        Reference< embed::XStorage > xDocStorage; 
+        try
+        {
+            Reference< XMultiServiceFactory > xMSF = comphelper::getProcessServiceFactory();
+            Reference< XServiceInfo > xSI( xDocument, UNO_QUERY_THROW );
+            if ( xSI->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.document.OfficeDocument" ) ) ) )
+                xDocStorage.set( xDocument->getDocumentStorage(), UNO_QUERY_THROW );
+            if ( xDocStorage.is() ) // not a 'real' document
+            {
+                rtl::OUString codeNameDir( RTL_CONSTASCII_USTRINGPARAM("Basic") );
+                rtl::OUString codeNameFile( RTL_CONSTASCII_USTRINGPARAM("script-lc.xml") );
+    
+                uno::Reference< embed::XStorage > xLibrariesStor( xDocStorage->openStorageElement( codeNameDir, embed::ElementModes::READ ), UNO_QUERY_THROW );
+                uno::Reference< io::XStream > xStream( xLibrariesStor->openStreamElement( codeNameFile, embed::ElementModes::READ ), UNO_QUERY_THROW );
+                uno::Reference< io::XInputStream > xInput( xStream->getInputStream(), UNO_QUERY_THROW );
+                ::xmlscript::LibDescriptorArray* pLibArray = new ::xmlscript::LibDescriptorArray();
+                InputSource source;
+                source.aInputStream = xInput;
+
+                Reference< XParser > xParser( xMSF->createInstance( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.xml.sax.Parser") ) ), UNO_QUERY_THROW );
+                xParser->setDocumentHandler(  ::xmlscript::importLibraryCodeNames( pLibArray ) );
+                xParser->parseStream( source );
+                mCodeNameToObjectNames = pLibArray->mCodeNames;
+            }
+        }
+        catch ( Exception& e )
+        {
+            OSL_TRACE("Urk, should never get here, help!!");
+        }
+    }
+    // Methods - XNameAccess
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        ::xmlscript::CodeNameHash::iterator it = mCodeNameToObjectNames.find( aName );
+        if ( it == mCodeNameToObjectNames.end() )
+            throw container::NoSuchElementException();
+        return uno::makeAny( it->second );
+    }
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< ::rtl::OUString > sNames( mCodeNameToObjectNames.size() );
+        ::rtl::OUString* pStr = sNames.getArray();
+        ::xmlscript::CodeNameHash::iterator it = mCodeNameToObjectNames.begin();
+        ::xmlscript::CodeNameHash::iterator it_end = mCodeNameToObjectNames.end();
+        for ( ; it != it_end ; ++it, ++pStr )
+            *pStr = it->first;    
+        return sNames;
+    }
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+    {
+        return ( mCodeNameToObjectNames.find( aName ) != mCodeNameToObjectNames.end() );
+    }
+    // Methods - XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return ::getCppuType( (const rtl::OUString *)0 );
+    }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return ( mCodeNameToObjectNames.size() > 0 );
+    }
+    // Methods XServiceInfo
+    virtual ::rtl::OUString SAL_CALL getImplementationName( ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        return getImplementationName_static(); 
+    }
+    virtual ::sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        uno::Sequence< rtl::OUString > sNames( getSupportedServiceNames() );
+        rtl::OUString* pStr = sNames.getArray(); 
+        rtl::OUString* pEnd = ( sNames.getArray() + sNames.getLength() ); 
+        for ( ; pStr != pEnd ; ++pStr )
+        {
+            if ( (*pStr).equals( ServiceName ) )
+                return sal_True; 
+        } 
+        return sal_False;
+    }
+    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames( ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        return getSupportedServiceNames_static();
+    }
+    // Service
+    static ::com::sun::star::uno::Sequence< ::rtl::OUString > getSupportedServiceNames_static()
+    {
+        uno::Sequence< rtl::OUString > sServiceNames(1);
+        sServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("org.openoffice.vba.PersistedCodeNames"));
+        return sServiceNames;
+    }
+    static ::rtl::OUString getImplementationName_static()
+    {
+         static OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("PersistedReadOnlyCodeNames") );
+         return sImplName;
+    }
+
+    static Reference< XInterface > SAL_CALL Create ( const Reference< XComponentContext >& xServiceManager ) throw( Exception )
+    {
+        Reference< XInterface > xRet =
+        static_cast< XInterface* >( static_cast< OWeakObject* >( new PersistedReadOnlyCodeNames() ));
+        return xRet;
+    }
+};
+class ConvertEntryToVbaEntry : public ItemConvertor
+{
+	virtual bool convert( Any& item )
+	{
+	    // All entries are converted to 'Normal' modules
+	    // Document Modules need to be created externall ( e.g. these are under the control
+	    // of the document itself )
+	    rtl::OUString sSource;
+	    bool bRes = false;
+	
+	    if ( item >>= sSource )
+	    {
+	        script::ModuleInfo mInfo;
+	        mInfo.ModuleSource = sSource;
+	        mInfo.ModuleType = script::ModuleType::Normal;
+	        item <<= mInfo;
+	        bRes = true;
+	    }
+	    return bRes; 
+	}
+};
+
+class ConvertEntryFromVbaEntry : public ItemConvertor
+{
+	bool convert( Any& item )
+	{
+	    bool bRes = false;
+	    script::ModuleInfo mInfo;
+	    if ( item >>= mInfo )
+	    {
+	        item <<= mInfo.ModuleSource;
+	        bRes = true;
+	    }
+	    return bRes;
+	}
+};
 
+void SfxScriptLibraryContainer::convertLibraryEntries()
+{
+    if ( getVBACompatModeOn() )
+    {
+        // going from non-vba to vba        
+        SfxLibrary* pImplLib = getImplLib( String( RTL_CONSTASCII_USTRINGPARAM("Standard") ) );
+        
+	ConvertEntryToVbaEntry converter;
+	bool bRes = pImplLib ? pImplLib->convertContainer( getCppuType( ( const script::ModuleInfo* ) NULL ), converter ) : false;
+    }
+    else
+    { 
+        // going from vba to non-vba        
+        // we must delete all Document modules
+        // what we also must do is warn the user that this is going to happen ( see. Excel )
+        // needs interaction handler love ( perhaps that needs to be passed into the setVBACompat ) 
+        // or perhaps we can access the documents InteractionHandler ?
+        SfxLibrary* pImplLib = getImplLib( String( RTL_CONSTASCII_USTRINGPARAM("Standard") ) );
+	ConvertEntryFromVbaEntry convertor;
+	bool bRes = pImplLib ? pImplLib->convertContainer( getCppuType( ( const rtl::OUString*) NULL ), convertor ) : false;
+    }
+}
 //============================================================================
 
 }   // namespace basic
diff --git offapi/com/sun/star/document/XVbaEventsHelper.idl offapi/com/sun/star/document/XVbaEventsHelper.idl
index 718e68d..fd0e2db 100644
--- offapi/com/sun/star/document/XVbaEventsHelper.idl
+++ offapi/com/sun/star/document/XVbaEventsHelper.idl
@@ -45,6 +45,7 @@ module com {  module sun {  module star 
 
 interface XVbaEventsHelper
 {
+    [attribute ] boolean IgnoreEvents; 
     // nTab -1 for workbook.
     boolean ProcessCompatibleVbaEvent( [in] long VbaEvent, [in] sequence< any > aArgs );
 };
diff --git offapi/com/sun/star/script/XCodeNameBinder.idl offapi/com/sun/star/script/XCodeNameBinder.idl
new file mode 100644
index 0000000..58e3606
--- /dev/null
+++ offapi/com/sun/star/script/XCodeNameBinder.idl
@@ -0,0 +1,49 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XLibraryContainer.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __com_sun_star_script_XCodeNameBinder_idl__ 
+#define __com_sun_star_script_XCodeNameBinder_idl__ 
+ 
+#ifndef __com_sun_star_uno_XInterface_idl__ 
+#include <com/sun/star/uno/XInterface.idl> 
+#endif 
+ 
+//============================================================================= 
+ 
+module com {  module sun {  module star {  module script {  
+ 
+interface XCodeNameBinder: com::sun::star::uno::XInterface
+{ 
+
+    void bindCodeName( [in] string codename, [in] string objectname );
+//============================================================================= 
+ 
+}; }; }; };  
+}; 
+#endif 
diff --git offapi/com/sun/star/script/XVBACompat.idl offapi/com/sun/star/script/XVBACompat.idl
new file mode 100644
index 0000000..e1b2d28
--- /dev/null
+++ offapi/com/sun/star/script/XVBACompat.idl
@@ -0,0 +1,49 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XLibraryContainer.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __com_sun_star_script_XVBACompat_idl__ 
+#define __com_sun_star_script_XVBACompat_idl__ 
+ 
+#ifndef __com_sun_star_uno_XInterface_idl__ 
+#include <com/sun/star/uno/XInterface.idl> 
+#endif 
+ 
+//============================================================================= 
+ 
+module com {  module sun {  module star {  module script {  
+ 
+interface XVBACompat: com::sun::star::uno::XInterface
+{ 
+
+//============================================================================= 
+    [attribute ] boolean VBACompatModeOn;
+ 
+}; }; }; };  
+}; 
+#endif 
diff --git offapi/com/sun/star/script/makefile.mk offapi/com/sun/star/script/makefile.mk
index 113d4c9..f9e3208 100644
--- offapi/com/sun/star/script/makefile.mk
+++ offapi/com/sun/star/script/makefile.mk
@@ -51,6 +51,8 @@ IDLFILES=\
 	XPersistentLibraryContainer.idl\
 	XStorageBasedLibraryContainer.idl\
 	XLibraryQueryExecutable.idl \
+	XVBACompat.idl\
+	XCodeNameBinder.idl\
 	ModuleSizeExceededRequest.idl\
 
 # ------------------------------------------------------------------
diff --git sc/inc/addruno.hxx sc/inc/addruno.hxx
index bc9391a..fad1f03 100644
--- sc/inc/addruno.hxx
+++ sc/inc/addruno.hxx
@@ -50,7 +50,7 @@ private:
     sal_Int32               nRefSheet;
     sal_Bool                bIsRange;
 
-    sal_Bool                ParseUIString( const String& rUIString );
+    sal_Bool                ParseUIString( const String& rUIString, ScAddress::Convention eConv = ScAddress::CONV_OOO );
 
 public:
 
diff --git sc/inc/document.hxx sc/inc/document.hxx
index d32e28c..e23cbfd 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -34,6 +34,7 @@
 
 #include <vcl/prntypes.hxx>
 #include <vcl/timer.hxx>
+#include <com/sun/star/container/XNameAccess.hpp>
 #include <com/sun/star/uno/Reference.hxx>
 #include <vos/ref.hxx>
 #include "scdllapi.h"
@@ -316,7 +317,7 @@ private:
 
 	//ScVbaEventsHelper*	pVbaEventsHelper;
     com::sun::star::uno::Reference< com::sun::star::document::XVbaEventsHelper > rVbaEventsHelper;
-
+        com::sun::star::uno::Reference< com::sun::star::container::XNameAccess > mxCodeNames;
 public:
     ScTabOpList         aTableOpList;		            // list of ScInterpreterTableOpParams currently in use
     ScInterpreterTableOpParams  aLastTableOpParams;     // remember last params
@@ -434,6 +435,7 @@ public:
 								SfxObjectShell* pDocShell = NULL );
 					~ScDocument();
 
+    com::sun::star::uno::Reference< com::sun::star::container::XNameAccess > GetPersistedCodeNames() throw( com::sun::star::uno::RuntimeException );
 	inline ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >
 					GetServiceManager() const { return xServiceManager; }
 
diff --git sc/inc/unonames.hxx sc/inc/unonames.hxx
index 4193574..a1350aa 100644
--- sc/inc/unonames.hxx
+++ sc/inc/unonames.hxx
@@ -590,6 +590,7 @@
 #define SC_UNONAME_ADDRESS          "Address"
 #define SC_UNONAME_UIREPR           "UserInterfaceRepresentation"
 #define SC_UNONAME_PERSREPR         "PersistentRepresentation"
+#define SC_UNONAME_XL_A1_REPR       "XL_A1_Representation"
 #define SC_UNONAME_REFSHEET         "ReferenceSheet"
 
 // --> PB 2004-08-23 #i33095# Security Options
diff --git sc/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
index e506a03..feb8746 100644
--- sc/source/core/data/documen2.cxx
+++ sc/source/core/data/documen2.cxx
@@ -248,6 +248,7 @@ ScDocument::ScDocument( ScDocumentMode	e
 
 	aTrackTimer.SetTimeoutHdl( LINK( this, ScDocument, TrackTimeHdl ) );
 	aTrackTimer.SetTimeout( 100 );
+	aDocCodeName = String( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
 }
 
 
diff --git sc/source/core/data/document.cxx sc/source/core/data/document.cxx
index b123ad7..7ee3b4a 100644
--- sc/source/core/data/document.cxx
+++ sc/source/core/data/document.cxx
@@ -91,6 +91,9 @@
 #include "bcaslot.hxx"
 #include "postit.hxx"
 #include "tabprotection.hxx"
+#include <comphelper/processfactory.hxx>
+
+using namespace ::com::sun::star;
 
 struct ScDefaultAttr
 {
@@ -4830,5 +4833,30 @@ BOOL ScDocument::NeedPageResetAfterTab( 
 	return FALSE;		// sonst nicht
 }
 
+uno::Reference< container::XNameAccess > 
+ScDocument::GetPersistedCodeNames() throw( uno::RuntimeException )
+{
+    SfxObjectShell* pObjShell = GetDocumentShell();
+    if ( pShell && !mxCodeNames.is() )
+    {
+        uno::Sequence< uno::Any > aArgs( 1 );
+        aArgs[ 0 ] = uno::makeAny( pObjShell->GetModel() );
+        mxCodeNames.set( ::comphelper::getProcessServiceFactory()->createInstanceWithArguments(rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.vba.PersistedCodeNames")), aArgs),  uno::UNO_QUERY );
+        if ( mxCodeNames.is() )
+        {
+            rtl::OUString sWorkbook( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
+            if ( mxCodeNames->hasByName( sWorkbook ) )
+            {
+		
+                rtl::OUString sCodeName;
+                mxCodeNames->getByName( sWorkbook ) >>= sCodeName;
+                SetCodeName( sCodeName );
+            }
+        }
+    }
+    return mxCodeNames;
+}
+
+
 
 
diff --git sc/source/filter/excel/excimp8.cxx sc/source/filter/excel/excimp8.cxx
index efd372d..8ec6e31 100644
--- sc/source/filter/excel/excimp8.cxx
+++ sc/source/filter/excel/excimp8.cxx
@@ -105,6 +105,7 @@
 
 #include <com/sun/star/document/XDocumentProperties.hpp>
 #include <com/sun/star/document/XDocumentPropertiesSupplier.hpp>
+#include <com/sun/star/script/ModuleInfo.hpp>
 
 
 using namespace com::sun::star;
@@ -112,8 +113,8 @@ using namespace com::sun::star;
 
 #define	INVALID_POS		0xFFFFFFFF
 
-
-
+// defined in docfunc.cxx ( really this needs a new name )
+script::ModuleInfo lcl_InitModuleInfo( SfxObjectShell& rDocSh, String& sModule );
 
 ImportExcel8::ImportExcel8( XclImpRootData& rImpData, SvStream& rStrm ) :
     ImportExcel( rImpData, rStrm ), mnTab(0)
@@ -291,6 +292,44 @@ void ImportExcel8::ReadBasic( void )
             SvxImportMSVBasic aBasicImport( *pShell, *xRootStrg, bLoadCode, bLoadStrg );
 			bool bAsComment = !bLoadExecutable || !lcl_hasVBAEnabled();
             aBasicImport.Import( EXC_STORAGE_VBA_PROJECT, EXC_STORAGE_VBA, bAsComment );
+            // for each document module get the associated object for the codename and do a replacebyname
+            ScDocument& aDoc = GetDoc();
+            uno::Reference< script::XLibraryContainer > xLibContainer = GetDocShell()->GetBasicContainer();
+            uno::Reference< container::XNameContainer > xLib;
+            if( xLibContainer.is() )
+            {
+                String aLibName( RTL_CONSTASCII_USTRINGPARAM( "Standard" ) );
+                uno::Any aLibAny = xLibContainer->getByName( aLibName );
+                aLibAny >>= xLib;
+            }
+            if ( xLib.is() )
+            {
+                rtl::OUString sOUCodeName( aDoc.GetCodeName() );
+                if ( xLib->hasByName( sOUCodeName ) )
+                {
+                    script::ModuleInfo mInfo;
+                    xLib->getByName( sOUCodeName ) >>= mInfo; 
+                    String sTmp = sOUCodeName;
+                    mInfo.ModuleObject = lcl_InitModuleInfo( *GetDocShell(), sTmp ).ModuleObject;
+                    xLib->replaceByName( sOUCodeName, uno::makeAny( mInfo ) );
+			
+                }
+                SCTAB nCount = aDoc.GetTableCount();
+    
+                for( SCTAB i = 0; i < nCount; ++i )
+                {
+                    String sName;
+                    aDoc.GetCodeName( i, sName );
+                    sOUCodeName = sName;
+                    if ( xLib->hasByName( sOUCodeName ) )
+                    {
+                        script::ModuleInfo mInfo;
+                        xLib->getByName( sOUCodeName ) >>= mInfo; 
+                        mInfo.ModuleObject = lcl_InitModuleInfo( *GetDocShell(), sName ).ModuleObject;
+                        xLib->replaceByName( sOUCodeName, uno::makeAny( mInfo ) );
+                    }
+                }
+            }
         }
     }
 }
diff --git sc/source/filter/xml/xmlsubti.cxx sc/source/filter/xml/xmlsubti.cxx
index ab00932..f8674ae 100644
--- sc/source/filter/xml/xmlsubti.cxx
+++ sc/source/filter/xml/xmlsubti.cxx
@@ -228,6 +228,7 @@ void ScMyTables::NewSheet(const rtl::OUS
 				uno::Reference <container::XIndexAccess> xIndex( xSheets, uno::UNO_QUERY );
 				if ( xIndex.is() )
 				{
+
                     xCurrentSheet.set(xIndex->getByIndex(nCurrentSheet), uno::UNO_QUERY);
 					if ( xCurrentSheet.is() )
 					{
@@ -254,6 +255,25 @@ void ScMyTables::NewSheet(const rtl::OUS
 									}
 								}
 						}
+
+						ScDocument *pDoc = ScXMLConverter::GetScDocument(rImport.GetModel());
+						// Codenames need to be set as sheets are created and read
+						if ( pDoc  )
+						{
+							String sName;
+							pDoc->GetName( nCurrentSheet, sName );
+	                        rtl::OUString sOUName( sName );
+							uno::Reference< container::XNameAccess > xCodeNames( pDoc->GetPersistedCodeNames() );
+							if( xCodeNames.is() && xCodeNames->hasByName( sName ) )
+							{
+								rtl::OUString sOUSCodeName;
+								xCodeNames->getByName( sName ) >>= sOUSCodeName;
+								rImport.LockSolarMutex();
+								String sCodeName( sOUSCodeName );
+								pDoc->SetCodeName( nCurrentSheet, sCodeName );		
+								rImport.UnlockSolarMutex();
+							}
+						}
 						rImport.SetTableStyle(sStyleName);
 
                         if ( sStyleName.getLength() )
diff --git sc/source/ui/docshell/docfunc.cxx sc/source/ui/docshell/docfunc.cxx
index 105f743..91ff9f7 100644
--- sc/source/ui/docshell/docfunc.cxx
+++ sc/source/ui/docshell/docfunc.cxx
@@ -2028,23 +2028,29 @@ BOOL ScDocFunc::MoveBlock( const ScRange
 }
 
 //------------------------------------------------------------------------
-script::ModuleInfo lcl_InitModuleInfo( ScDocShell& rDocSh, String& sModule )
+uno::Reference< uno::XInterface > GetDocModuleObject( SfxObjectShell& rDocSh, String& sCodeName )
 {
-    ::rtl::OUString aModName( sModule );
     uno::Reference< lang::XMultiServiceFactory> xSF(rDocSh.GetModel(), uno::UNO_QUERY);
+    uno::Reference< container::XNameAccess > xVBACodeNamedObjectAccess;
+    uno::Reference< uno::XInterface > xDocModuleApiObject;
+    if ( xSF.is() )
+    {
+        xVBACodeNamedObjectAccess.set( xSF->createInstance( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.vba.VBAObjectModuleObjectProvider"))), uno::UNO_QUERY );    
+        xDocModuleApiObject.set( xVBACodeNamedObjectAccess->getByName( sCodeName ), uno::UNO_QUERY );    
+    }
+    return xDocModuleApiObject;
+
+}
+
+script::ModuleInfo lcl_InitModuleInfo( SfxObjectShell& rDocSh, String& sModule )
+{
+    ::rtl::OUString aModName( sModule );
     ::rtl::OUString sVbaOption( RTL_CONSTASCII_USTRINGPARAM( "Rem Attribute VBA_ModuleType=VBADocumentModule\nOption VBASupport 1\n" ));
     script::ModuleInfo sModuleInfo;
     sModuleInfo.ModuleName = aModName;
     sModuleInfo.ModuleSource = sVbaOption;
     sModuleInfo.ModuleType = script::ModuleType::Document;
-    uno::Reference< container::XNameAccess > xVBACodeNamedObjectAccess;
-    if ( xSF.is() )
-    {
-        uno::Sequence< uno::Any > aArgs(1);
-        aArgs[0] = uno::Any( aModName );
-        xVBACodeNamedObjectAccess.set( xSF->createInstanceWithArguments( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.vba.VBAObjectModuleObjectProvider")), aArgs), uno::UNO_QUERY );    
-        sModuleInfo.ModuleObject.set( xVBACodeNamedObjectAccess->getByName( aModName ), uno::UNO_QUERY );    
-    }
+    sModuleInfo.ModuleObject = GetDocModuleObject( rDocSh, sModule );
     return sModuleInfo;
 }
 
@@ -2064,21 +2070,19 @@ void lcl_InsertModule( ScDocShell& rDocS
     }
     if( xLib.is() )
     {
-        // test Module has exist
-        // if the Module is exist. changed to another name
-        // and at this time the string like "SheetX"
+        // if the Module with codename exists then find a new name
         sal_Int32 nNum = 1;
+        sModuleInfo.ModuleName = sModuleName;
         while( xLib->hasByName( sModuleInfo.ModuleName  ) )
         {
-            sModuleName = rtl::OUString::createFromAscii( "Sheet" ) + rtl::OUString::valueOf( nNum );
+            sModuleInfo.ModuleName = rtl::OUString::createFromAscii( "Sheet" ) + rtl::OUString::valueOf( nNum );
             nNum += 1;
         }
-        sModuleInfo.ModuleName = sModuleName;
         uno::Any aSourceAny;
         aSourceAny <<= sModuleInfo;
-        xLib->insertByName( sModuleName, aSourceAny );
+        xLib->insertByName( sModuleInfo.ModuleName, aSourceAny );
         ScDocument* pDoc = rDocSh.GetDocument();
-        String sCodeName( sModuleName );
+        String sCodeName( sModuleInfo.ModuleName );
         pDoc->SetCodeName( nTab, sCodeName );
     }
     SFX_APP()->LeaveBasicCall();
@@ -2116,8 +2120,10 @@ BOOL ScDocFunc::InsertTable( SCTAB nTab,
 	ScDocShellModificator aModificator( rDocShell );
 
 	ScDocument* pDoc = rDocShell.GetDocument();
-    StarBASIC* pStarBASIC = rDocShell.GetBasic();
-    BOOL bVbaEnabled = pStarBASIC->isVBAEnabled();
+    // Strange loop, also basic is loaded too early ( InsertTable )
+    // is called via the xml import for sheets in described in odf 
+    StarBASIC* pStarBASIC = rDocShell.GetBasic(); 
+    BOOL bVbaEnabled = pStarBASIC ? pStarBASIC->isVBAEnabled() : false;
 	if (bRecord && !pDoc->IsUndoEnabled())
 		bRecord = FALSE;
     if ( bVbaEnabled )
@@ -2132,13 +2138,16 @@ BOOL ScDocFunc::InsertTable( SCTAB nTab,
 
 	if (pDoc->InsertTab( nTab, rName ))
 	{
+		String sCodeName;
 		if (bRecord)
 			rDocShell.GetUndoManager()->AddUndoAction(
 						new ScUndoInsertTab( &rDocShell, nTab, bAppend, rName));
 		//	Views updaten:
-        if( bVbaEnabled )
+        // Only insert vba modules if vba mode ( and not currently importing XML )
+        if( bVbaEnabled && !rDocShell.GetDocument()->IsImportingXML() )
         {
-            String sCodeName( rName );
+            if ( sCodeName.Len() == 0 )
+		sCodeName = rName;
             lcl_InsertModule( rDocShell, nTab, sCodeName );
         }
 		rDocShell.Broadcast( ScTablesHint( SC_TAB_INSERTED, nTab ) );
diff --git sc/source/ui/docshell/docsh.cxx sc/source/ui/docshell/docsh.cxx
index da54daa..aa4dec8 100644
--- sc/source/ui/docshell/docsh.cxx
+++ sc/source/ui/docshell/docsh.cxx
@@ -130,6 +130,7 @@
 #include "cellsuno.hxx"
 #include <com/sun/star/document/XVbaEventsHelper.hpp>
 #include <com/sun/star/document/VbaEventId.hpp>
+#include <com/sun/star/script/ModuleInfo.hpp>
 
 using namespace com::sun::star;
 using namespace com::sun::star::document::VbaEventId;
@@ -516,7 +517,11 @@ sal_uInt16 ScDocShell::GetHiddenInformat
 void ScDocShell::BeforeXMLLoading()
 {
     aDocument.DisableIdle( TRUE );
-
+    // suppress VBA events when loading the xml
+    uno::Reference< document::XVbaEventsHelper > xEvt( aDocument.GetVbaEventsHelper() );
+    if ( xEvt.is() )
+       xEvt->setIgnoreEvents( sal_True );
+    
     // prevent unnecessary broadcasts and updates
     DBG_ASSERT(pModificator == NULL, "The Modificator should not exist");
 	pModificator = new ScDocShellModificator( *this );
@@ -530,6 +535,45 @@ void ScDocShell::BeforeXMLLoading()
 		ScColumn::bDoubleAlloc = sal_True;
 }
 
+// defined in docfunc.cxx ( really this needs a new name )
+uno::Reference< uno::XInterface > GetDocModuleObject( SfxObjectShell& rDocSh, String& sCodeName );
+
+rtl::OUString GetCodeName( ScDocument& aDocument, String& sObjectName )
+{
+    uno::Reference< container::XNameAccess > xCodeNames( aDocument.GetPersistedCodeNames() );
+    rtl::OUString sOUSCodeName;
+    xCodeNames->getByName( sObjectName ) >>= sOUSCodeName;
+    return sOUSCodeName;
+}
+
+void SetDocModuleForCodeName( ScDocument& aDocument, String& sCodeName )
+{
+    uno::Reference< script::XLibraryContainer > xLibContainer = aDocument.GetDocumentShell()->GetBasicContainer();
+    uno::Reference< container::XNameContainer > xLib;
+
+    if( xLibContainer.is() )
+    {
+        String aLibName( RTL_CONSTASCII_USTRINGPARAM( "Standard" ) );
+        uno::Any aLibAny = xLibContainer->getByName( aLibName );
+        aLibAny >>= xLib;
+    }
+
+    if ( xLib.is() )
+    {
+        rtl::OUString sOUCodeName( sCodeName );
+        script::ModuleInfo mInfo;
+        if ( xLib->getByName( sOUCodeName ) >>= mInfo )
+        {
+            mInfo.ModuleObject = GetDocModuleObject( *aDocument.GetDocumentShell(), sCodeName );
+            xLib->replaceByName( sOUCodeName, uno::makeAny( mInfo ) );         
+        }
+        else
+        {
+            // Insert a big fat assertion etc
+        }
+    }
+}
+
 void ScDocShell::AfterXMLLoading(sal_Bool bRet)
 {
 	if (GetCreateMode() != SFX_CREATE_MODE_ORGANIZER)
@@ -600,8 +644,35 @@ void ScDocShell::AfterXMLLoading(sal_Boo
     }
     else
 		aDocument.SetInsertingFromOtherDoc( FALSE );
-
+        // suppress VBA events when loading the xml
+        uno::Reference< document::XVbaEventsHelper > xEvt( aDocument.GetVbaEventsHelper() );
+        if ( xEvt.is() )
+            xEvt->setIgnoreEvents( sal_False );
+        // SetCodenames for each tab  ( and set up the vba DOC Modules ) 
+        SCTAB nTabCount = aDocument.GetTableCount();
+        for (SCTAB i = 0; i < nTabCount; ++i)
+        {
+            String sObjectName;
+            String sCodeName;
+            try
+            {
+                if ( i == 0 )
+                {
+                    sObjectName = String( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
+                    sCodeName = GetCodeName( aDocument, sObjectName );
+                    SetDocModuleForCodeName( aDocument, sCodeName );
+                }
+                aDocument.GetName( i, sObjectName );
+                sCodeName = GetCodeName( aDocument, sObjectName );
+                SetDocModuleForCodeName( aDocument, sCodeName );
+            } 
+            catch( uno::Exception& )
+            {
+            }
+        }
+            
 	aDocument.SetImportingXML( FALSE );
+    
     aDocument.EnableUndo( TRUE );
     bIsEmpty = FALSE;
 
diff --git sc/source/ui/unoobj/addruno.cxx sc/source/ui/unoobj/addruno.cxx
index b417b7e..4f313f2 100644
--- sc/source/ui/unoobj/addruno.cxx
+++ sc/source/ui/unoobj/addruno.cxx
@@ -72,7 +72,7 @@ void ScAddressConversionObj::Notify( Sfx
     }
 }
 
-sal_Bool ScAddressConversionObj::ParseUIString( const String& rUIString )
+sal_Bool ScAddressConversionObj::ParseUIString( const String& rUIString, ScAddress::Convention eConv )
 {
     if (!pDocShell)
         return sal_False;
@@ -81,7 +81,7 @@ sal_Bool ScAddressConversionObj::ParseUI
     sal_Bool bSuccess = sal_False;
     if ( bIsRange )
     {
-        USHORT nResult = aRange.ParseAny( rUIString, pDoc );
+        USHORT nResult = aRange.ParseAny( rUIString, pDoc, eConv );
         if ( nResult & SCA_VALID )
         {
             if ( ( nResult & SCA_TAB_3D ) == 0 )
@@ -95,7 +95,7 @@ sal_Bool ScAddressConversionObj::ParseUI
     }
     else
     {
-        USHORT nResult = aRange.aStart.Parse( rUIString, pDoc );
+        USHORT nResult = aRange.aStart.Parse( rUIString, pDoc, eConv );
         if ( nResult & SCA_VALID )
         {
             if ( ( nResult & SCA_TAB_3D ) == 0 )
@@ -119,6 +119,7 @@ uno::Reference<beans::XPropertySetInfo> 
         {
             {MAP_CHAR_LEN(SC_UNONAME_ADDRESS),  0,  &getCppuType((table::CellRangeAddress*)0), 0, 0 },
             {MAP_CHAR_LEN(SC_UNONAME_PERSREPR), 0,  &getCppuType((rtl::OUString*)0),    0, 0 },
+            {MAP_CHAR_LEN(SC_UNONAME_XL_A1_REPR), 0,  &getCppuType((rtl::OUString*)0),    0, 0 },
             {MAP_CHAR_LEN(SC_UNONAME_REFSHEET), 0,  &getCppuType((sal_Int32*)0),        0, 0 },
             {MAP_CHAR_LEN(SC_UNONAME_UIREPR),   0,  &getCppuType((rtl::OUString*)0),    0, 0 },
             {0,0,0,0,0,0}
@@ -132,6 +133,7 @@ uno::Reference<beans::XPropertySetInfo> 
         {
             {MAP_CHAR_LEN(SC_UNONAME_ADDRESS),  0,  &getCppuType((table::CellAddress*)0), 0, 0 },
             {MAP_CHAR_LEN(SC_UNONAME_PERSREPR), 0,  &getCppuType((rtl::OUString*)0),    0, 0 },
+            {MAP_CHAR_LEN(SC_UNONAME_XL_A1_REPR), 0,  &getCppuType((rtl::OUString*)0),    0, 0 },
             {MAP_CHAR_LEN(SC_UNONAME_REFSHEET), 0,  &getCppuType((sal_Int32*)0),        0, 0 },
             {MAP_CHAR_LEN(SC_UNONAME_UIREPR),   0,  &getCppuType((rtl::OUString*)0),    0, 0 },
             {0,0,0,0,0,0}
@@ -193,8 +195,11 @@ void SAL_CALL ScAddressConversionObj::se
             bSuccess = ParseUIString( aUIString );
         }
     }
-    else if ( aNameStr.EqualsAscii( SC_UNONAME_PERSREPR ) )
+    else if ( aNameStr.EqualsAscii( SC_UNONAME_PERSREPR ) || aNameStr.EqualsAscii( SC_UNONAME_XL_A1_REPR ) )
     {
+        ScAddress::Convention aConv = ScAddress::CONV_OOO; 
+        if ( aNameStr.EqualsAscii( SC_UNONAME_XL_A1_REPR ) )
+            aConv = ScAddress::CONV_XL_A1; 
         //  parse the file format string
         rtl::OUString sRepresentation;
         if (aValue >>= sRepresentation)
@@ -215,7 +220,7 @@ void SAL_CALL ScAddressConversionObj::se
             }
 
             //  parse the rest like a UI string
-            bSuccess = ParseUIString( aUIString );
+            bSuccess = ParseUIString( aUIString, aConv );
         }
     }
     else
@@ -268,17 +273,21 @@ uno::Any SAL_CALL ScAddressConversionObj
             aRange.aStart.Format( aFormatStr, nFlags, pDoc );
         aRet <<= rtl::OUString( aFormatStr );
     }
-    else if ( aNameStr.EqualsAscii( SC_UNONAME_PERSREPR ) )
+    else if ( aNameStr.EqualsAscii( SC_UNONAME_PERSREPR ) || aNameStr.EqualsAscii( SC_UNONAME_XL_A1_REPR ) )
     {
+        ScAddress::Convention aConv = ScAddress::CONV_OOO; 
+        if ( aNameStr.EqualsAscii( SC_UNONAME_XL_A1_REPR ) )
+            aConv = ScAddress::CONV_XL_A1; 
+
         //  generate file format string - always include sheet
         String aFormatStr;
-        aRange.aStart.Format( aFormatStr, SCA_VALID | SCA_TAB_3D, pDoc );
+        aRange.aStart.Format( aFormatStr, SCA_VALID | SCA_TAB_3D, pDoc, aConv );
         if ( bIsRange )
         {
             //  manually concatenate range so both parts always have the sheet name
             aFormatStr.Append( (sal_Unicode) ':' );
             String aSecond;
-            aRange.aEnd.Format( aSecond, SCA_VALID | SCA_TAB_3D, pDoc );
+            aRange.aEnd.Format( aSecond, SCA_VALID | SCA_TAB_3D, pDoc, aConv );
             aFormatStr.Append( aSecond );
         }
         aRet <<= rtl::OUString( aFormatStr );
diff --git sc/source/ui/unoobj/docuno.cxx sc/source/ui/unoobj/docuno.cxx
index 1dcc337..55e67bd 100644
--- sc/source/ui/unoobj/docuno.cxx
+++ sc/source/ui/unoobj/docuno.cxx
@@ -1693,6 +1693,7 @@ uno::Sequence<rtl::OUString> SAL_CALL Sc
 
 	return concatServiceNames( aMyServices, aDrawServices );
 }
+
 // XCodeNameQuery
 rtl::OUString SAL_CALL 
 ScModelObj::getCodeNameForObject( const uno::Reference< uno::XInterface >& xIf ) throw( uno::RuntimeException )
@@ -1700,7 +1701,6 @@ ScModelObj::getCodeNameForObject( const 
     rtl::OUString sCodeName;
     if ( pDocShell )
     {
-        OSL_TRACE( "*** In ScModelObj::getCodeNameForObject");
         // need to find the page ( and index )  for this control
         uno::Reference< drawing::XDrawPagesSupplier > xSupplier( pDocShell->GetModel(), uno::UNO_QUERY_THROW );
         uno::Reference< container::XIndexAccess > xIndex( xSupplier->getDrawPages(), uno::UNO_QUERY_THROW );
diff --git sc/source/ui/unoobj/servuno.cxx sc/source/ui/unoobj/servuno.cxx
index b1a8a85..270c61a 100644
--- sc/source/ui/unoobj/servuno.cxx
+++ sc/source/ui/unoobj/servuno.cxx
@@ -63,7 +63,6 @@
 #include <svx/xmlgrhlp.hxx>
 
 #include <comphelper/processfactory.hxx>
-
 using namespace ::com::sun::star;
 
 class ScVbaObjectForCodeNameProvider : public ::cppu::WeakImplHelper1< container::XNameAccess >
diff --git sc/source/ui/vba/vbaeventshelper.cxx sc/source/ui/vba/vbaeventshelper.cxx
index 6c11c73..31664d0 100644
--- sc/source/ui/vba/vbaeventshelper.cxx
+++ sc/source/ui/vba/vbaeventshelper.cxx
@@ -307,7 +307,7 @@ void ImplVbaEventNameInfo::InitImplVbaEv
 }
 
 ScVbaEventsHelper::ScVbaEventsHelper( uno::Sequence< css::uno::Any > const& aArgs, uno::Reference< uno::XComponentContext > const& xContext )
-    : m_xContext( xContext ), mpWindowListener( NULL ), mbOpened( sal_False )
+    : m_xContext( xContext ), mpWindowListener( NULL ), mbOpened( sal_False ), mbIgnoreEvents( sal_False )
 {
     OSL_TRACE( "ScVbaEventsHelper::ScVbaEventsHelper" );
     uno::Reference< frame::XModel > xModel ( getXSomethingFromArgs< frame::XModel >( aArgs, 0 ), uno::UNO_QUERY );
@@ -524,7 +524,7 @@ String ScVbaEventsHelper::getSheetModule
 {
 	ScExtDocOptions* pExtOptions = pDoc->GetExtDocOptions();
 	String aCodeName;
-	pDoc->GetName( nTab, aCodeName);
+	pDoc->GetCodeName( nTab, aCodeName);
 	// Use code name if that exists
 	if ( pExtOptions )
 		aCodeName = pExtOptions->GetCodeName( nTab );
@@ -580,17 +580,14 @@ ScVbaEventsHelper::getMacroPath( const s
     	case VBAEVENT_WORKBOOK_SHEET_SELECTIONCHANGE          :
         {
 	        ScExtDocOptions* pExtOptions = pDoc->GetExtDocOptions();
+            String sWorkbookModuleName = pDoc->GetCodeName();
             if( pExtOptions )
             {
                 ScExtDocSettings aExtDocSettings = pExtOptions->GetDocSettings();
                 String sWorkbookModuleName = aExtDocSettings.maGlobCodeName;
-                sMacroPath = workbookMacroExists( pShell, sWorkbookModuleName, sMacroName );
-            }
-            else
-            {
-                // TODO need this?
-                sMacroPath = workbookMacroExists( pShell, rtl::OUString(), sMacroName );
             }
+           
+            sMacroPath = workbookMacroExists( pShell, sWorkbookModuleName, sMacroName );
             break;
         }
         default:
@@ -793,11 +790,28 @@ ScVbaEventsHelper::getTabFromArgs( const
     return nTab;
 }
 
+::sal_Bool SAL_CALL 
+ScVbaEventsHelper::getIgnoreEvents() throw (uno::RuntimeException)
+{
+    return mbIgnoreEvents;
+}
+
+void SAL_CALL 
+ScVbaEventsHelper::setIgnoreEvents( ::sal_Bool _ignoreevents ) throw (uno::RuntimeException)
+{
+    mbIgnoreEvents = _ignoreevents;
+}
+
 #define INVALID_TAB -1
 
 sal_Bool SAL_CALL 
 ScVbaEventsHelper::ProcessCompatibleVbaEvent( sal_Int32 VbaEvent, const uno::Sequence< uno::Any >& aArgs ) throw (uno::RuntimeException)
 {
+    if ( mbIgnoreEvents ) 
+    {
+    	OSL_TRACE("** Ignoring event %s [%d]", rtl::OUStringToOString( GetEventName( VbaEvent ), RTL_TEXTENCODING_UTF8 ).getStr(), VbaEvent );
+        return sal_False; // return True or False, to me returning False sorta makes sense but...
+    }
 	SfxObjectShell* pShell = pDoc->GetDocumentShell();
 	if( !pShell )
 		return sal_False;
@@ -966,13 +980,12 @@ ScVbaEventsHelper::ProcessCompatibleVbaE
         {
             // if workbook open event do not be fired. fired it before 
             // workbook activate event to compatible with MSO.
-            if( !mbOpened )
+            if( mbOpened )
             {
-                ProcessCompatibleVbaEvent( VBAEVENT_WORKBOOK_OPEN, aArgs );
+                 processVbaEventMacro_noreturn( VBAEVENT_WORKBOOK_ACTIVATE );
+                 // workbook window activate event same as this one
+                 ProcessCompatibleVbaEvent( VBAEVENT_WORKBOOK_WINDOWACTIVATE, aArgs );
             }
-            processVbaEventMacro_noreturn( VBAEVENT_WORKBOOK_ACTIVATE );
-            // workbook window activate event same as this one
-            ProcessCompatibleVbaEvent( VBAEVENT_WORKBOOK_WINDOWACTIVATE, aArgs );
             break;
         }
 		case VBAEVENT_WORKBOOK_DEACTIVATE          :
@@ -991,6 +1004,7 @@ ScVbaEventsHelper::ProcessCompatibleVbaE
             {
                 processVbaEventMacro_noreturn( VBAEVENT_WORKBOOK_OPEN );
                 mbOpened = sal_True;
+                ProcessCompatibleVbaEvent( VBAEVENT_WORKBOOK_ACTIVATE, aArgs );
             }
             // register the window listener.
             if( !mpWindowListener )
diff --git sc/source/ui/vba/vbaeventshelper.hxx sc/source/ui/vba/vbaeventshelper.hxx
index fe556be..4ac8b76 100644
--- sc/source/ui/vba/vbaeventshelper.hxx
+++ sc/source/ui/vba/vbaeventshelper.hxx
@@ -44,7 +44,6 @@
 #include <com/sun/star/document/XVbaEventsHelper.hpp>
 #include "vbahelper.hxx"
 
-using namespace com::sun::star;
 
 typedef ::cppu::WeakImplHelper1< com::sun::star::document::XVbaEventsHelper > VBAWorkbookEvent_BASE;
 
@@ -59,21 +58,21 @@ private:
     css::uno::Reference< css::uno::XComponentContext > m_xContext;
     VbaWindowListener* mpWindowListener;
     sal_Bool mbOpened;
-
+    sal_Bool mbIgnoreEvents;
 	String getSheetModuleName( SCTAB nTab );
 	String workbookMacroExists( SfxObjectShell* pShell, const String& sMod, const String& sMacro );
 
-	uno::Any createWorkSheet( SfxObjectShell* pShell, SCTAB nTab );
-	uno::Any createRange( const uno::Any& aRange );
-	uno::Any createHyperlink( const uno::Any& rCell );
-	uno::Any createWindow( SfxObjectShell* pShell );
-	sal_Bool executeWorkBookMacro( SfxObjectShell* pShell, const String& sMacroName, uno::Sequence< uno::Any >& aArgs, uno::Any& aRet );
+	css::uno::Any createWorkSheet( SfxObjectShell* pShell, SCTAB nTab );
+	css::uno::Any createRange( const css::uno::Any& aRange );
+	css::uno::Any createHyperlink( const css::uno::Any& rCell );
+	css::uno::Any createWindow( SfxObjectShell* pShell );
+	sal_Bool executeWorkBookMacro( SfxObjectShell* pShell, const String& sMacroName, css::uno::Sequence< css::uno::Any >& aArgs, css::uno::Any& aRet );
     sal_Bool processVbaEventWithCancel( const sal_Int32 nEventId );
 	sal_Bool processDocBeforeSaveMacro( sal_Bool bSaveAsUI );
     void processVbaEventMacro_noreturn( const sal_Int32 nEventId );
-    void processVbaEventMacroWithArgs( const sal_Int32 nEventId, uno::Sequence< uno::Any >& rArgs );
+    void processVbaEventMacroWithArgs( const sal_Int32 nEventId, css::uno::Sequence< css::uno::Any >& rArgs );
     void WorkbookWindowMacro( const sal_Int32 nHint );
-    SCTAB getTabFromArgs( const uno::Sequence< uno::Any > aArgs, const sal_Int32 nPos );
+    SCTAB getTabFromArgs( const css::uno::Sequence< css::uno::Any > aArgs, const sal_Int32 nPos );
 protected:
     rtl::OUString GetEventName( const sal_Int32 nId );
     rtl::OUString getMacroPath( const sal_Int32 nEventId, const SCTAB nTab );
@@ -83,9 +82,11 @@ public:
     ScVbaEventsHelper( css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext > const& xContext );
     ~ScVbaEventsHelper();
 	ScDocument* getDocument() { return pDoc; };
-	sal_Bool executeSheetMacro( USHORT nEvent, SCTAB nTab, uno::Sequence< uno::Any >& rArgs );
+	sal_Bool executeSheetMacro( USHORT nEvent, SCTAB nTab, css::uno::Sequence< css::uno::Any >& rArgs );
     // XVBAWorkbookEventHelper
-    virtual sal_Bool SAL_CALL ProcessCompatibleVbaEvent( sal_Int32 VbaEvent, const uno::Sequence< uno::Any >& aArgs ) throw (uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getIgnoreEvents() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setIgnoreEvents( ::sal_Bool _ignoreevents ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL ProcessCompatibleVbaEvent( sal_Int32 VbaEvent, const css::uno::Sequence< css::uno::Any >& aArgs ) throw (css::uno::RuntimeException);
 };
 
 #endif
diff --git scripting/source/dlgprov/dlgevtatt.cxx scripting/source/dlgprov/dlgevtatt.cxx
index ed8f91e..970b945 100644
--- scripting/source/dlgprov/dlgevtatt.cxx
+++ scripting/source/dlgprov/dlgevtatt.cxx
@@ -415,7 +415,7 @@ namespace dlgprov
 
     void DialogAllListenerImpl::firing( const AllEventObject& Event ) throw ( RuntimeException )
     {
-        ::osl::MutexGuard aGuard( getMutex() );
+        //::osl::MutexGuard aGuard( getMutex() );
 
         firing_impl( Event, NULL );
     }
@@ -425,7 +425,7 @@ namespace dlgprov
     Any DialogAllListenerImpl::approveFiring( const AllEventObject& Event ) 
         throw ( reflection::InvocationTargetException, RuntimeException )
     {
-        ::osl::MutexGuard aGuard( getMutex() );
+        //::osl::MutexGuard aGuard( getMutex() );
 
         Any aReturn;
         firing_impl( Event, &aReturn );
@@ -669,7 +669,7 @@ namespace dlgprov
 
     void DialogScriptListenerImpl::firing( const ScriptEvent& aScriptEvent ) throw ( RuntimeException )
     {
-        ::osl::MutexGuard aGuard( getMutex() );
+        //::osl::MutexGuard aGuard( getMutex() );
 
         firing_impl( aScriptEvent, NULL );
     }
@@ -679,7 +679,7 @@ namespace dlgprov
     Any DialogScriptListenerImpl::approveFiring( const ScriptEvent& aScriptEvent ) 
         throw ( reflection::InvocationTargetException, RuntimeException )
     {
-        ::osl::MutexGuard aGuard( getMutex() );
+        //::osl::MutexGuard aGuard( getMutex() );
 
         Any aReturn;
         firing_impl( aScriptEvent, &aReturn );
diff --git scripting/source/dlgprov/dlgprov.cxx scripting/source/dlgprov/dlgprov.cxx
index b6912c6..d48e6d7 100644
--- scripting/source/dlgprov/dlgprov.cxx
+++ scripting/source/dlgprov/dlgprov.cxx
@@ -188,7 +188,7 @@ static ::rtl::OUString aResourceResolver
     Reference< container::XNameContainer > DialogProviderImpl::createDialogModel( const Reference< io::XInputStream >& xInput, const Reference< resource::XStringResourceManager >& xStringResourceManager ) throw ( Exception )
     {
         Reference< container::XNameContainer > xDialogModel(  createControlModel() );
-        ::xmlscript::importDialogModel( xInput, xDialogModel, m_xContext );
+        ::xmlscript::importDialogModel( xInput, xDialogModel, m_xContext, m_xModel );
         // Set resource property
         if( xStringResourceManager.is() )
         {
diff --git svx/inc/svx/msocximex.hxx svx/inc/svx/msocximex.hxx
index 05e3c75..7a98fbe 100644
--- svx/inc/svx/msocximex.hxx
+++ svx/inc/svx/msocximex.hxx
@@ -404,6 +404,8 @@ public:
 	sal_uInt32 nGroupNameLen;
 	sal_uInt32 nUnknown10;
 
+        rtl::OUString msCtrlSource;
+        rtl::OUString msRowSource;
 	char *pValue;
 	char *pCaption;
 	char *pGroupName;
@@ -487,6 +489,8 @@ struct ContainerRecord
 
     ::rtl::OUString cName;
     ::rtl::OUString controlTip;
+    ::rtl::OUString sCtrlSource;
+    ::rtl::OUString sRowSource;
 
     sal_uInt32 nTop;
     sal_uInt32 nLeft;
@@ -1086,7 +1090,8 @@ class OCX_ListBox : public OCX_ModernCon
 public:
 	OCX_ListBox() : OCX_ModernControl(rtl::OUString::createFromAscii("ListBox")){
 		msFormType = rtl::OUString::createFromAscii("com.sun.star.form.component.ListBox");
-		msDialogType = rtl::OUString::createFromAscii("com.sun.star.awt.UnoControlListBoxModel");
+		//msDialogType = rtl::OUString::createFromAscii("com.sun.star.awt.UnoControlListBoxModel");
+		msDialogType = rtl::OUString::createFromAscii("com.sun.star.form.component.ListBox");
 		mnBackColor = 0x80000005;
 		mnForeColor = 0x80000008;
 		nBorderColor = 0x80000006;
diff --git svx/source/msfilter/msocximex.cxx svx/source/msfilter/msocximex.cxx
index 143c66b..6af2878 100644
--- svx/source/msfilter/msocximex.cxx
+++ svx/source/msfilter/msocximex.cxx
@@ -49,6 +49,10 @@
 #include <com/sun/star/drawing/XDrawPageSupplier.hpp>
 #include <com/sun/star/form/XFormsSupplier.hpp>
 #include <com/sun/star/form/XForm.hpp>
+#include <com/sun/star/form/binding/XBindableValue.hpp>
+#include <com/sun/star/form/binding/XValueBinding.hpp>
+#include <com/sun/star/form/binding/XListEntrySink.hpp>
+#include <com/sun/star/form/binding/XListEntrySource.hpp>
 #include <com/sun/star/form/FormComponentType.hpp>
 #include <com/sun/star/awt/FontWeight.hpp>
 #include <com/sun/star/awt/FontSlant.hpp>
@@ -80,6 +84,13 @@
 #include <algorithm>
 #include <memory>
 
+#include <com/sun/star/beans/NamedValue.hpp>
+#include <com/sun/star/table/XCellRange.hpp>
+#include <com/sun/star/table/CellRangeAddress.hpp>
+#include <com/sun/star/table/CellAddress.hpp>
+#include <com/sun/star/sheet/XSpreadsheetView.hpp>
+#include <com/sun/star/sheet/XCellRangeAddressable.hpp>
+ 
 #ifndef C2S
 #define C2S(cChar)	String::CreateFromAscii(RTL_CONSTASCII_STRINGPARAM(cChar))
 #endif
@@ -707,14 +718,22 @@ class ContainerRecReader
             if( nCtrlSrcBufSize > 0 )
             {
                 ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                pS->SeekRel( nCtrlSrcBufSize );
+                std::auto_ptr< sal_Char > pCtrlSrcName;
+                pCtrlSrcName.reset( new sal_Char[ nCtrlSrcBufSize ] );
+                pS->Read( pCtrlSrcName.get(), nCtrlSrcBufSize );
+                rec.sCtrlSource = lclCreateOUString( pCtrlSrcName.get(), nCtrlSrcLen );
+                OSL_TRACE("*** *** *** ControlSourceName -> %s ", rtl::OUStringToOString( rec.sCtrlSource, RTL_TEXTENCODING_UTF8 ).getStr() );
             }
             // row source name
             sal_uInt32 nRowSrcBufSize = lclGetBufferSize( nRowSrcLen );
             if( nRowSrcBufSize > 0 )
             {
                 ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                pS->SeekRel( nRowSrcBufSize );
+                std::auto_ptr< sal_Char > pRowSrcName;
+                pRowSrcName.reset( new sal_Char[ nRowSrcBufSize ] );
+                pS->Read( pRowSrcName.get(), nRowSrcBufSize );
+                rec.sRowSource =  lclCreateOUString( pRowSrcName.get(), nRowSrcLen );
+                OSL_TRACE("*** *** *** RowSourceName -> %s ", rtl::OUStringToOString( rec.sRowSource, RTL_TEXTENCODING_UTF8 ).getStr() );
             }
 
             // seek to end of data
@@ -2825,7 +2844,66 @@ sal_Bool OCX_ListBox::Import(com::sun::s
 
     aTmp <<= ImportColor( nBorderColor );
     rPropSet->setPropertyValue( WW8_ASCII2STR("BorderColor"), aTmp);
+// XBindable etc.
+    uno::Reference< lang::XMultiServiceFactory > xFac;
+    if ( pDocSh )
+        xFac.set( pDocSh->GetModel(), uno::UNO_QUERY );
+    uno::Reference< form::binding::XBindableValue > xBindable( rPropSet, uno::UNO_QUERY );
+    if (  xFac.is() && msCtrlSource.getLength() && xBindable.is() )
+    {
+         
+         // OOo address structures
+         // RefCell - convert from XL
+         // pretend we converted the imported string address into the
+         // appropriate address structure
+         uno::Reference< beans::XPropertySet > xConvertor( xFac->createInstance( C2U( "com.sun.star.table.CellAddressConversion" )), uno::UNO_QUERY );
+         table::CellAddress aAddress;
+         if ( xConvertor.is() )
+         {
+             // we need this service to properly convert XL notation also
+             // Should be easy to extend
+             xConvertor->setPropertyValue( C2U( "XL_A1_Representation" ), uno::makeAny( msCtrlSource ) );
+             xConvertor->getPropertyValue( C2U( "Address" ) ) >>= aAddress;    
+         }
+        
+         beans::NamedValue aArg1;
+         aArg1.Name = C2U("BoundCell");
+         aArg1.Value <<= aAddress;
+
+         uno::Sequence< uno::Any > aArgs(1);
+         aArgs[ 0 ]  <<= aArg1;
+
+         uno::Reference< form::binding::XValueBinding > xBinding( xFac->createInstanceWithArguments( C2U("com.sun.star.table.CellValueBinding" ), aArgs ), uno::UNO_QUERY );
+         xBindable->setValueBinding( xBinding );
+    }
+    uno::Reference< form::binding::XListEntrySink > xListEntrySink( rPropSet, uno::UNO_QUERY );
+    if (  xFac.is() && msRowSource.getLength() && xListEntrySink.is() )
+    {
+         
+         // OOo address structures
+         // RefCell - convert from XL
+         // pretend we converted the imported string address into the
+         // appropriate address structure
+         uno::Reference< beans::XPropertySet > xConvertor( xFac->createInstance( C2U( "com.sun.star.table.CellRangeAddressConversion" )), uno::UNO_QUERY );
+         table::CellRangeAddress aAddress;
+         if ( xConvertor.is() )
+         {
+             // we need this service to properly convert XL notation also
+             // Should be easy to extend
+             xConvertor->setPropertyValue( C2U( "XL_A1_Representation" ), uno::makeAny( msRowSource ) );
+             xConvertor->getPropertyValue( C2U( "Address" ) ) >>= aAddress;    
+         }
+        
+         beans::NamedValue aArg1;
+         aArg1.Name = C2U("CellRange");
+         aArg1.Value <<= aAddress;
 
+         uno::Sequence< uno::Any > aArgs(1);
+         aArgs[ 0 ]  <<= aArg1;
+
+         uno::Reference< form::binding::XListEntrySource > xSource( xFac->createInstanceWithArguments( C2U("com.sun.star.table.CellRangeListSource" ), aArgs ), uno::UNO_QUERY );
+         xListEntrySink->setListEntrySource( xSource );
+    }
 	aFontData.Import(rPropSet);
 	return sal_True;
 }
@@ -3600,13 +3678,26 @@ void OCX_ContainerControl::ProcessContro
     {
         // A container control needs to read the f stream in
         // the folder ( substorage ) associated with this control
-        if (  rec.nTypeIdent ==  FRAME ||
-            rec.nTypeIdent ==  MULTIPAGE||
-            rec.nTypeIdent ==  PAGE )
+        switch ( rec.nTypeIdent )
         {
-            OCX_ContainerControl* pContainer =
-               static_cast< OCX_ContainerControl* >( pControl );
-            oStream = pContainer->getContainerStream();
+            case FRAME:
+            case MULTIPAGE:
+            case PAGE:
+                {
+                    OCX_ContainerControl* pContainer =
+                        static_cast< OCX_ContainerControl* >( pControl );
+                    oStream = pContainer->getContainerStream();
+                    break;
+                }
+            case LISTBOX:
+                {
+                    OCX_ModernControl* pList = static_cast< OCX_ModernControl* >( pControl );
+                    if ( pList )
+                    {
+                        pList->msCtrlSource = rec.sCtrlSource;
+                        pList->msRowSource = rec.sRowSource;
+                    }
+                }
         }
 
         pControl->sName = rec.cName;
@@ -4247,7 +4338,7 @@ sal_Bool OCX_UserForm::Import(
     OCX_ContainerControl::Import( xPropSet );
 
     uno::Reference<io::XInputStreamProvider> xSource =
-        xmlscript::exportDialogModel(mxParent, mxCtx);
+        xmlscript::exportDialogModel(mxParent, mxCtx, pDocSh->GetModel() );
     uno::Any aSourceAny(uno::makeAny(xSource));
     if (rLib->hasByName(sName))
         rLib->replaceByName(sName, aSourceAny);
diff --git svx/source/msfilter/svxmsbas.cxx svx/source/msfilter/svxmsbas.cxx
index e647cf8..83949e0 100644
--- svx/source/msfilter/svxmsbas.cxx
+++ svx/source/msfilter/svxmsbas.cxx
@@ -54,6 +54,7 @@ using namespace com::sun::star::awt;
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/script/XLibraryContainer.hpp>
 #include <com/sun/star/script/ModuleInfo.hpp>
+#include <com/sun/star/script/XVBACompat.hpp>
 using namespace com::sun::star::container;
 using namespace com::sun::star::script;
 using namespace com::sun::star::uno;
@@ -250,12 +251,13 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
             Any aLibAny = xLibContainer->getByName( aLibName );
 		    aLibAny >>= xLib;
         }
-		if( xLib.is() )
+		Reference< XVBACompat > xCompat( xLibContainer, UNO_QUERY );
+		if( xLib.is() && xCompat.is() )
 		{
             Reference< container::XNameAccess > xVBAObjectForCodeName;
 			if ( !bAsComment )
             {
-                rDocSh.GetBasic()->SetVBAEnabled( true );
+         		xCompat->setVBACompatModeOn( sal_True );
                 Reference< XMultiServiceFactory> xSF(rDocSh.GetModel(), UNO_QUERY);
                 if ( xSF.is() )
                 {
@@ -403,20 +405,24 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
 
 					Any aSourceAny;
                     OSL_TRACE("erm %d", mType );
-                    if (  xVBAObjectForCodeName.is() && ( mType == ModuleType::Document || mType == ModuleType::Class || mType == ModuleType::Form ) )
+                    //if ( /*xVBAObjectForCodeName.is() && */ ( mType == ModuleType::Document || mType == ModuleType::Class || mType == ModuleType::Form ) )
+                    if ( true )
                     {
                         OSL_TRACE("vba processing  %d", mType );
                         script::ModuleInfo sModuleInfo;
                         sModuleInfo.ModuleName = aModName;
                         sModuleInfo.ModuleSource = aSource;
                         sModuleInfo.ModuleType = mType;
+// ok, try always passing the model to basic, should fit
                         if ( mType == ModuleType::Form )
                             // hack, the module ( in document basic should...
                             // know the XModel... ) needs fixing in basic 
                             // somewhere
                             sModuleInfo.ModuleObject.set( rDocSh.GetModel(), UNO_QUERY );
+/*
                         else if ( mType != ModuleType::Class )
                             sModuleInfo.ModuleObject.set( xVBAObjectForCodeName->getByName( aModName ), UNO_QUERY );
+*/
                         aSourceAny <<= sModuleInfo;
                     }
                     else
diff --git xmlscript/inc/xmlscript/xmldlg_imexp.hxx xmlscript/inc/xmlscript/xmldlg_imexp.hxx
index ea5b591..4549fa9 100644
--- xmlscript/inc/xmlscript/xmldlg_imexp.hxx
+++ xmlscript/inc/xmlscript/xmldlg_imexp.hxx
@@ -30,6 +30,8 @@
 #ifndef _XMLSCRIPT_XMLDLG_IMEXP_HXX_
 #define _XMLSCRIPT_XMLDLG_IMEXP_HXX_
 
+#include <com/sun/star/frame/XModel.hpp>
+
 #ifndef _COM_SUN_STAR_CONTAINER_XNAMECONTAINER_HXX_
 #include <com/sun/star/container/XNameContainer.hpp>
 #endif
@@ -54,7 +56,9 @@ void SAL_CALL exportDialogModel(
 	::com::sun::star::uno::Reference<
     ::com::sun::star::xml::sax::XExtendedDocumentHandler > const & xOut,
 	::com::sun::star::uno::Reference<
-    ::com::sun::star::container::XNameContainer > const & xDialogModel )
+    ::com::sun::star::container::XNameContainer > const & xDialogModel, 
+	::com::sun::star::uno::Reference<
+    ::com::sun::star::frame::XModel > const & xDocument )
 	SAL_THROW( (::com::sun::star::uno::Exception) );
 
 //==============================================================================
@@ -63,7 +67,9 @@ SAL_CALL importDialogModel(
 	::com::sun::star::uno::Reference<
     ::com::sun::star::container::XNameContainer > const & xDialogModel,
     ::com::sun::star::uno::Reference<
-    ::com::sun::star::uno::XComponentContext > const & xContext )
+    ::com::sun::star::uno::XComponentContext > const & xContext,
+    ::com::sun::star::uno::Reference<
+    ::com::sun::star::frame::XModel > const & xDocument )
 	SAL_THROW( (::com::sun::star::uno::Exception) );
 
 // additional functions for convenience
@@ -74,7 +80,9 @@ SAL_CALL exportDialogModel(
 	::com::sun::star::uno::Reference<
     ::com::sun::star::container::XNameContainer > const & xDialogModel,
     ::com::sun::star::uno::Reference<
-    ::com::sun::star::uno::XComponentContext > const & xContext )
+    ::com::sun::star::uno::XComponentContext > const & xContext,
+    ::com::sun::star::uno::Reference<
+    ::com::sun::star::frame::XModel > const & xDocument )
 	SAL_THROW( (::com::sun::star::uno::Exception) );
 
 //==============================================================================
@@ -84,7 +92,9 @@ void SAL_CALL importDialogModel(
 	::com::sun::star::uno::Reference<
     ::com::sun::star::container::XNameContainer > const & xDialogModel,
     ::com::sun::star::uno::Reference<
-    ::com::sun::star::uno::XComponentContext > const & xContext )
+    ::com::sun::star::uno::XComponentContext > const & xContext,
+    ::com::sun::star::uno::Reference<
+    ::com::sun::star::frame::XModel > const & xDocument )
 	SAL_THROW( (::com::sun::star::uno::Exception) );
 
 }
diff --git xmlscript/inc/xmlscript/xmllib_imexp.hxx xmlscript/inc/xmlscript/xmllib_imexp.hxx
index 9a3048f..f92b154 100644
--- xmlscript/inc/xmlscript/xmllib_imexp.hxx
+++ xmlscript/inc/xmlscript/xmllib_imexp.hxx
@@ -34,11 +34,21 @@
 #include <com/sun/star/uno/Sequence.hxx>
 
 #include "xmlscript/xmlns.h"
-
+#include <hash_map>
+#include <com/sun/star/script/ModuleType.hpp>
 
 namespace xmlscript
 {
+struct ObjectModuleDesc
+{
+    rtl::OUString msObjectName;
+    sal_Int32 mnModuleType;
+ObjectModuleDesc() : mnModuleType( ::com::sun::star::script::ModuleType::Normal ) {}
+};
 
+typedef  std::hash_map< rtl::OUString,
+ObjectModuleDesc, ::rtl::OUStringHash,
+::std::equal_to< ::rtl::OUString > > ObjectModuleDescHash;
 //==============================================================================
 // Library container export
 // HACK C++ struct to transport info. Later the container 
@@ -53,14 +63,19 @@ struct LibDescriptor
 	sal_Bool bPasswordProtected;
 	::com::sun::star::uno::Sequence< ::rtl::OUString > aElementNames;
 	sal_Bool bPreload;
+	ObjectModuleDescHash hModuleTypeDesc;
 };
 
+typedef std::hash_map< rtl::OUString, rtl::OUString, ::rtl::OUStringHash, ::std::equal_to< ::rtl::OUString > > CodeNameHash;
+
 struct LibDescriptorArray
 {
     LibDescriptor* mpLibs;
     sal_Int32 mnLibCount;
 
-    LibDescriptorArray( void ) { mpLibs = NULL; mnLibCount = 0; }
+    CodeNameHash mCodeNames;
+    bool mbVBAMode;
+    LibDescriptorArray( void ) { mpLibs = NULL; mnLibCount = 0; mbVBAMode = false; }
     LibDescriptorArray( sal_Int32 nLibCount );
 
     ~LibDescriptorArray();
@@ -79,6 +94,11 @@ SAL_CALL exportLibraryContainer(
 SAL_CALL importLibraryContainer( LibDescriptorArray* pLibArray )
 		SAL_THROW( (::com::sun::star::uno::Exception) );
 
+::com::sun::star::uno::Reference<
+    ::com::sun::star::xml::sax::XDocumentHandler >
+SAL_CALL importLibraryCodeNames( LibDescriptorArray* pLibArray )
+		SAL_THROW( (::com::sun::star::uno::Exception) );
+
 
 void
 SAL_CALL exportLibrary(
diff --git xmlscript/source/xmldlg_imexp/exp_share.hxx xmlscript/source/xmldlg_imexp/exp_share.hxx
index c87538f..092aeeb 100644
--- xmlscript/source/xmldlg_imexp/exp_share.hxx
+++ xmlscript/source/xmldlg_imexp/exp_share.hxx
@@ -198,7 +198,7 @@ public:
         SAL_THROW( (css::uno::Exception) );
     void readImageControlModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readListBoxModel( StyleBag * all_styles )
+    void readListBoxModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
         SAL_THROW( (css::uno::Exception) );
     void readNumericFieldModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
diff --git xmlscript/source/xmldlg_imexp/imp_share.hxx xmlscript/source/xmldlg_imexp/imp_share.hxx
index c53e325..e5263ad 100644
--- xmlscript/source/xmldlg_imexp/imp_share.hxx
+++ xmlscript/source/xmldlg_imexp/imp_share.hxx
@@ -131,6 +131,7 @@ struct DialogImport
     
     css::uno::Reference< css::container::XNameContainer > _xDialogModel;
     css::uno::Reference< css::lang::XMultiServiceFactory > _xDialogModelFactory;
+    css::uno::Reference< css::frame::XModel > _xDoc;
 
     sal_Int32 XMLNS_DIALOGS_UID, XMLNS_SCRIPT_UID;
     
@@ -164,16 +165,18 @@ public:
     inline DialogImport(
         css::uno::Reference<css::uno::XComponentContext> const & xContext,
         css::uno::Reference<css::container::XNameContainer>
-        const & xDialogModel )
+        const & xDialogModel,
+        css::uno::Reference<css::frame::XModel> const & xDoc )
         SAL_THROW( () )
         : _xContext( xContext )
         , _xDialogModel( xDialogModel )
-        , _xDialogModelFactory( xDialogModel, css::uno::UNO_QUERY_THROW )
+        , _xDialogModelFactory( xDialogModel, css::uno::UNO_QUERY_THROW ), _xDoc( xDoc )
         { OSL_ASSERT( _xDialogModel.is() && _xDialogModelFactory.is() &&
                       _xContext.is() ); }
     virtual ~DialogImport()
         SAL_THROW( () );
     
+    inline css::uno::Reference< css::frame::XModel > getDocOwner() { return _xDoc; }
     // XRoot
     virtual void SAL_CALL startDocument(
         css::uno::Reference< css::xml::input::XNamespaceMapping >
diff --git xmlscript/source/xmldlg_imexp/xmldlg_addfunc.cxx xmlscript/source/xmldlg_imexp/xmldlg_addfunc.cxx
index be29402..1d7e398 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_addfunc.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_addfunc.cxx
@@ -44,6 +44,7 @@
 using namespace ::rtl;
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::frame;
 
 namespace xmlscript
 {
@@ -73,7 +74,8 @@ Reference< io::XInputStream > InputStrea
 //==================================================================================================
 Reference< io::XInputStreamProvider > SAL_CALL exportDialogModel(
     Reference< container::XNameContainer > const & xDialogModel,
-    Reference< XComponentContext > const & xContext )
+    Reference< XComponentContext > const & xContext,
+    Reference< XModel > const & xDocument )
 	SAL_THROW( (Exception) )
 {
 	Reference< lang::XMultiComponentFactory > xSMgr( xContext->getServiceManager() );
@@ -98,7 +100,7 @@ Reference< io::XInputStreamProvider > SA
 	
 	Reference< io::XActiveDataSource > xSource( xHandler, UNO_QUERY );
 	xSource->setOutputStream( createOutputStream( &aBytes ) );
-	exportDialogModel( xHandler, xDialogModel );
+	exportDialogModel( xHandler, xDialogModel, xDocument );
 	
 	return new InputStreamProvider( aBytes );
 }
@@ -107,7 +109,8 @@ Reference< io::XInputStreamProvider > SA
 void SAL_CALL importDialogModel(
 	Reference< io::XInputStream > xInput,
 	Reference< container::XNameContainer > const & xDialogModel,
-    Reference< XComponentContext > const & xContext )
+    Reference< XComponentContext > const & xContext,
+    Reference< XModel > const & xDocument )
 	SAL_THROW( (Exception) )
 {
 	Reference< lang::XMultiComponentFactory > xSMgr( xContext->getServiceManager() );
@@ -129,7 +132,7 @@ void SAL_CALL importDialogModel(
 	}
 	
 	// error handler, entity resolver omitted for this helper function
-	xParser->setDocumentHandler( importDialogModel( xDialogModel, xContext ) );
+	xParser->setDocumentHandler( importDialogModel( xDialogModel, xContext, xDocument ) );
 	
 	xml::sax::InputSource source;
 	source.aInputStream = xInput;
diff --git xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
index 4a2c142..b419162 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
@@ -33,7 +33,11 @@
 #include "exp_share.hxx"
 
 #include <com/sun/star/util/XNumberFormatsSupplier.hpp>
-
+#include <com/sun/star/form/binding/XListEntrySink.hpp>
+#include <com/sun/star/form/binding/XBindableValue.hpp>
+#include <com/sun/star/form/binding/XValueBinding.hpp>
+#include <com/sun/star/table/CellAddress.hpp>
+#include <com/sun/star/table/CellRangeAddress.hpp>
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
@@ -276,7 +280,7 @@ void ElementDescriptor::readComboBoxMode
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readListBoxModel( StyleBag * all_styles )
+void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -311,7 +315,56 @@ void ElementDescriptor::readListBoxModel
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linecount") ) );
     readAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Align") ),
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );
+    Reference< lang::XMultiServiceFactory > xFac;
+    if ( xDocument.is() )
+        xFac.set( xDocument, uno::UNO_QUERY );
+
+    Reference< form::binding::XBindableValue > xBinding( _xProps, UNO_QUERY );
+
+    if ( xFac.is() && xBinding.is() )
+    {
+         Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellAddressConversion" )), uno::UNO_QUERY );  
+        Reference< beans::XPropertySet > xBindable( xBinding->getValueBinding(), UNO_QUERY );
+        if ( xBindable.is() )
+        {
+            table::CellAddress aAddress; 
+	    try
+            {
+                xBindable->getPropertyValue( OUSTR("BoundCell") ) >>= aAddress; 
+                xConvertor->setPropertyValue( OUSTR("Address"), makeAny( aAddress ) );
+                rtl::OUString sAddress;
+                xConvertor->getPropertyValue( OUSTR("PersistentRepresentation") ) >>= sAddress;
+                if ( sAddress.getLength() > 0 )
+                    addAttribute( OUSTR(XMLNS_DIALOGS_PREFIX ":linked-cell"), sAddress );
+                
+                OSL_TRACE( "*** Bindable value %s", rtl::OUStringToOString( sAddress, RTL_TEXTENCODING_UTF8 ).getStr() ); 
+               
+            }
+            catch( Exception& e )
+            {
+            }
+        }
+    }
+    Reference< form::binding::XListEntrySink > xEntrySink( _xProps, UNO_QUERY );
+    if ( xEntrySink.is() )
+    {
+        Reference< beans::XPropertySet > xListSource( xEntrySink->getListEntrySource(), UNO_QUERY );
+        if ( xListSource.is() )
+        {
+            Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellRangeAddressConversion" )), uno::UNO_QUERY );  
+
+            table::CellRangeAddress aAddress; 
+            xListSource->getPropertyValue( OUSTR( "CellRange" ) ) >>= aAddress;
 
+            rtl::OUString sAddress;
+            xConvertor->setPropertyValue( OUSTR("Address"), makeAny( aAddress ) );
+            xConvertor->getPropertyValue( OUSTR("PersistentRepresentation") ) >>= sAddress;
+            OSL_TRACE("**** cell range source list %s",
+                rtl::OUStringToOString( sAddress, RTL_TEXTENCODING_UTF8 ).getStr() ); 
+            if ( sAddress.getLength() > 0 );
+                addAttribute( OUSTR(XMLNS_DIALOGS_PREFIX ":source-cell-range"), sAddress );
+        }
+    }
     // string item list
     Sequence< OUString > itemValues;
     if ((readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ) ) >>= itemValues) &&
diff --git xmlscript/source/xmldlg_imexp/xmldlg_export.cxx xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
index 999f899..0d6fb8a 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
@@ -1309,7 +1309,8 @@ void StyleBag::dump( Reference< xml::sax
 //==================================================================================================
 void SAL_CALL exportDialogModel(
     Reference< xml::sax::XExtendedDocumentHandler > const & xOut,
-    Reference< container::XNameContainer > const & xDialogModel )
+    Reference< container::XNameContainer > const & xDialogModel,
+    Reference< frame::XModel > const & xDocument )
     SAL_THROW( (Exception) )
 {
     StyleBag all_styles;
@@ -1394,7 +1395,7 @@ void SAL_CALL exportDialogModel(
                     xProps, xPropState,
                     OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menulist") ) );
                 xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readListBoxModel( &all_styles );
+                pElem->readListBoxModel( &all_styles, xDocument );
             }
             else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) ) )
             {
diff --git xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
index ba05479..34d9d46 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
@@ -34,6 +34,12 @@
 
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/beans/XPropertyState.hpp>
+#include <com/sun/star/form/binding/XBindableValue.hpp>
+#include <com/sun/star/form/binding/XValueBinding.hpp>
+#include <com/sun/star/form/binding/XListEntrySink.hpp>
+#include <com/sun/star/beans/NamedValue.hpp>
+#include <com/sun/star/table/CellAddress.hpp>
+#include <com/sun/star/table/CellRangeAddress.hpp>
 
 
 using namespace ::com::sun::star;
@@ -1638,9 +1644,24 @@ Reference< xml::input::XElement > MenuLi
 void MenuListElement::endElement()
 	throw (xml::sax::SAXException, RuntimeException)
 {
+        OUString sLinkedCell;
+        OUString sCellRange;
+        OUString sListBoxService( OUSTR("com.sun.star.awt.UnoControlListBoxModel") );
+        try
+        {
+            sLinkedCell = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "linked-cell" ) );
+            sCellRange = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "source-cell-range" ) );
+            // we should probably limit this to vba mode also ( leave for now )
+            if ( sLinkedCell.getLength() || sCellRange.getLength() && _pImport->getDocOwner().is() )
+                sListBoxService = OUSTR("com.sun.star.form.component.ListBox");
+        }
+        catch( Exception& /*e*/ )
+        {
+        }
 	ControlImportContext ctx(
 		_pImport, getControlId( _xAttributes ),
-		OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) );
+		//OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) );
+		sListBoxService );
 	Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
 	
 	Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
@@ -1673,13 +1694,66 @@ void MenuListElement::endElement()
 	ctx.importAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("Align") ),
                              OUString( RTL_CONSTASCII_USTRINGPARAM("align") ),
                              _xAttributes );
-	
+        // import cell-link and cell source range
+        Reference< lang::XMultiServiceFactory > xFac( _pImport->getDocOwner(), UNO_QUERY );;
+        if ( xFac.is() && sLinkedCell.getLength() &&  sCellRange.getLength() )
+        {
+            
+            // Set up Celllink
+            if ( sLinkedCell.getLength() )
+            {
+                Reference< form::binding::XBindableValue > xBindable( ctx.getControlModel(), uno::UNO_QUERY );
+
+                Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellAddressConversion" )), uno::UNO_QUERY );
+                if ( xBindable.is() && xConvertor.is() )
+                {
+                    table::CellAddress aAddress;
+                    xConvertor->setPropertyValue( OUSTR( "PersistentRepresentation" ), uno::makeAny( sLinkedCell ) );
+                    xConvertor->getPropertyValue( OUSTR( "Address" ) ) >>= aAddress;     
+                    beans::NamedValue aArg1;
+                    aArg1.Name = OUSTR("BoundCell");
+                    aArg1.Value <<= aAddress;
+           
+                    uno::Sequence< uno::Any > aArgs(1);
+                    aArgs[ 0 ]  <<= aArg1;
+           
+                    uno::Reference< form::binding::XValueBinding > xBinding( xFac->createInstanceWithArguments( OUSTR("com.sun.star.table.CellValueBinding" ), aArgs ), uno::UNO_QUERY );
+                    xBindable->setValueBinding( xBinding );
+ 
+                }
+            }
+            // Set up CelllRange
+            if ( sCellRange.getLength() )
+            {
+                Reference< form::binding::XListEntrySink  > xListEntrySink( ctx.getControlModel(), uno::UNO_QUERY );
+
+                Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellRangeAddressConversion" )), uno::UNO_QUERY );
+                if ( xListEntrySink.is() && xConvertor.is() )
+                {
+                    table::CellRangeAddress aAddress;
+                    xConvertor->setPropertyValue( OUSTR( "PersistentRepresentation" ), uno::makeAny( sCellRange ) );
+                    xConvertor->getPropertyValue( OUSTR( "Address" ) ) >>= aAddress;     
+                    beans::NamedValue aArg1;
+                    aArg1.Name = OUSTR("CellRange");
+                    aArg1.Value <<= aAddress;
+           
+                    uno::Sequence< uno::Any > aArgs(1);
+                    aArgs[ 0 ]  <<= aArg1;
+           
+                    uno::Reference< form::binding::XListEntrySource > xSource( xFac->createInstanceWithArguments( OUSTR("com.sun.star.table.CellRangeListSource" ), aArgs ), uno::UNO_QUERY );
+                    xListEntrySink->setListEntrySource( xSource );
+ 
+                }
+            }
+        }
 	if (_popup.is())
 	{
 		MenuPopupElement * p = static_cast< MenuPopupElement * >( _popup.get() );
-		xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ),
+        if (  !sCellRange.getLength() )
+		    xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ),
 										 makeAny( p->getItemValues() ) );
-		xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("SelectedItems") ),
+        if (  !sLinkedCell.getLength() )
+		    xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("SelectedItems") ),
 										 makeAny( p->getSelectedItems() ) );
 	}
 	ctx.importEvents( _events );
diff --git xmlscript/source/xmldlg_imexp/xmldlg_import.cxx xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
index 74c09e6..092dcc0 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
@@ -62,6 +62,7 @@
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::frame;
 using ::rtl::OUString;
 
 namespace xmlscript
@@ -1879,12 +1880,13 @@ Reference< xml::input::XElement > Dialog
 //==================================================================================================
 Reference< xml::sax::XDocumentHandler > SAL_CALL importDialogModel(
     Reference< container::XNameContainer > const & xDialogModel,
-    Reference< XComponentContext > const & xContext )
+    Reference< XComponentContext > const & xContext,
+    Reference< XModel > const & xDocument )
     SAL_THROW( (Exception) )
 {
     return ::xmlscript::createDocumentHandler(
         static_cast< xml::input::XRoot * >(
-            new DialogImport( xContext, xDialogModel ) ) );
+            new DialogImport( xContext, xDialogModel, xDocument ) ) );
 }
 
 }
diff --git xmlscript/source/xmllib_imexp/imp_share.hxx xmlscript/source/xmllib_imexp/imp_share.hxx
index d602103..fdc0536 100644
--- xmlscript/source/xmllib_imexp/imp_share.hxx
+++ xmlscript/source/xmllib_imexp/imp_share.hxx
@@ -220,7 +220,6 @@ class LibrariesElement : public LibEleme
     
 protected:
     vector< LibDescriptor > mLibDescriptors;
-
 public:
     virtual Reference< xml::input::XElement > SAL_CALL startChildElement(
         sal_Int32 nUid, OUString const & rLocalName,
@@ -244,7 +243,7 @@ class LibraryElement : public LibElement
 {
 protected:
     vector< OUString > mElements;
-
+    ObjectModuleDescHash mObjectDescs;
 public:
 
     virtual Reference< xml::input::XElement > SAL_CALL startChildElement(
diff --git xmlscript/source/xmllib_imexp/xmllib_import.cxx xmlscript/source/xmllib_imexp/xmllib_import.cxx
index b533d37..ce31ee0 100644
--- xmlscript/source/xmllib_imexp/xmllib_import.cxx
+++ xmlscript/source/xmllib_imexp/xmllib_import.cxx
@@ -44,7 +44,20 @@ namespace xmlscript
 {
 
 //##################################################################################################
-
+sal_Int32 lcl_getModuleTypeForStringType( const rtl::OUString& rsType )
+{
+    // default to normal unknown
+    sal_Int32 nType = com::sun::star::script::ModuleType::Unknown;
+    if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("class") ) ) )
+        nType = com::sun::star::script::ModuleType::Class;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("form") ) ) )
+        nType = com::sun::star::script::ModuleType::Form;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("document") ) ) )
+        nType = com::sun::star::script::ModuleType::Document;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("normal") ) ) )
+        nType = com::sun::star::script::ModuleType::Normal;
+    return nType;
+}
 //__________________________________________________________________________________________________
 Reference< xml::input::XElement > LibElementBase::getParent()
     throw (RuntimeException)
@@ -185,6 +198,13 @@ Reference< xml::input::XElement > Librar
     }
     else if (mpLibArray && rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("libraries") ))
     {
+        rtl::OUString sVbaCompatMode;
+        sVbaCompatMode =  xAttributes->getValueByUidName(
+            XMLNS_LIBRARY_UID,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("vbaenabled") ) );
+
+        if ( sVbaCompatMode.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("true") ) ) )
+            mpLibArray->mbVBAMode = true;
         return new LibrariesElement( rLocalName, xAttributes, 0, this );
     }
     else if (mpLibDesc && rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("library") ))
@@ -269,6 +289,19 @@ Reference< xml::input::XElement > Librar
         mLibDescriptors.push_back( aDesc );
         return new LibraryElement( rLocalName, xAttributes, this, _pImport );
     }
+    // CodeNames are only relevant for the container ( e.g. the document )
+    else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("codename") ))
+    {
+        rtl::OUString sCodeName =  xAttributes->getValueByUidName(
+            _pImport->XMLNS_LIBRARY_UID,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("name") ) );
+        rtl::OUString sObjectName =  xAttributes->getValueByUidName(
+            _pImport->XMLNS_LIBRARY_UID,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("objectname") ) );
+        if ( ( sCodeName.getLength() > 0 ) && ( sObjectName.getLength() > 0 ) )
+                _pImport->mpLibArray->mCodeNames[ sObjectName ] = sCodeName;
+        return new LibElementBase( rLocalName, xAttributes, this, _pImport );
+    }
     else
     {
         throw xml::sax::SAXException(
@@ -311,7 +344,13 @@ Reference< xml::input::XElement > Librar
             OUString( RTL_CONSTASCII_USTRINGPARAM("name") ) ) );
         if (aValue.getLength())
             mElements.push_back( aValue );
-
+        ObjectModuleDesc aDesc;
+        aDesc.mnModuleType = lcl_getModuleTypeForStringType( 
+          xAttributes->getValueByUidName(
+            _pImport->XMLNS_LIBRARY_UID,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("moduletype") ) ) );
+        if ( aValue.getLength() && aDesc.mnModuleType != ::com::sun::star::script::ModuleType::Unknown )
+             mObjectDescs[ aValue ] = aDesc;
         return new LibElementBase( rLocalName, xAttributes, this, _pImport );
     }
     else
@@ -335,6 +374,7 @@ void LibraryElement::endElement()
     if( !pLib )
         pLib = &static_cast< LibrariesElement* >( _pParent )->mLibDescriptors.back();
     pLib->aElementNames = aElementNames;
+    pLib->hModuleTypeDesc = mObjectDescs;
 }
 
 
@@ -348,6 +388,16 @@ SAL_CALL importLibraryContainer( LibDesc
         static_cast< xml::input::XRoot * >( new LibraryImport( pLibArray ) ) );
 }
 
+
+Reference< ::com::sun::star::xml::sax::XDocumentHandler >
+SAL_CALL importLibraryCodeNames( LibDescriptorArray* pLibArray )
+        SAL_THROW( (Exception) )
+{
+    return ::xmlscript::createDocumentHandler(
+        static_cast< xml::input::XRoot * >( new LibraryImport( pLibArray ) ) );
+}
+
+
 //##################################################################################################
 
 ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler >
@@ -365,6 +415,7 @@ LibDescriptorArray::LibDescriptorArray( 
 {
     mnLibCount = nLibCount;
     mpLibs = new LibDescriptor[ mnLibCount ];
+    mbVBAMode = false;
 }
 
 LibDescriptorArray::~LibDescriptorArray()
