--- /data4/CurrentBuild/ooo-build/build/src680-m237/basic/source/classes/eventatt.cxx	2007-10-15 14:03:12.000000000 +0100
+++ basic/source/classes/eventatt.cxx	2007-12-11 12:09:29.000000000 +0000
@@ -99,6 +99,8 @@
 
 #include <com/sun/star/frame/XModel.hpp>
 
+#include <org/openoffice/vba/XVBAToOOEventDescGen.hpp>
+
 //==================================================================================================
 
 #include <xmlscript/xmldlg_imexp.hxx>
@@ -127,10 +129,10 @@ class DialogEventAttacher : public Scrip
 	::osl::Mutex maMutex;
 
 public:
-	DialogEventAttacher( void ) {}
+	DialogEventAttacher( void );
 
     // Methods
-    virtual void SAL_CALL attachEvents( const ::com::sun::star::uno::Sequence< 
+	virtual void SAL_CALL attachEvents( const ::com::sun::star::uno::Sequence< 
 		::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& Objects, 
 		const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xListener, 
 		const ::com::sun::star::uno::Any& Helper ) 
@@ -139,6 +141,30 @@ public:
 				  ::com::sun::star::script::CannotCreateAdapterException, 
 				  ::com::sun::star::lang::ServiceNotRegisteredException, 
 				  ::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL attachVBAEvents( const ::com::sun::star::uno::Sequence< 
+		::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& Objects, 
+		const ::com::sun::star::uno::Any& Helper,
+		const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& xModel ) 
+			throw(::com::sun::star::lang::IllegalArgumentException, 
+				  ::com::sun::star::beans::IntrospectionException, 
+				  ::com::sun::star::script::CannotCreateAdapterException, 
+				  ::com::sun::star::lang::ServiceNotRegisteredException, 
+				  ::com::sun::star::uno::RuntimeException);
+private:
+		virtual void attachEventsToControl( com::sun::star::uno::Reference< ::com::sun::star::script::XScriptEventsSupplier >& xEventsSupplier, 
+		const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xListener, 
+		com::sun::star::uno::Reference< com::sun::star::awt::XControl > xControl,
+		com::sun::star::uno::Reference< com::sun::star::awt::XControlModel > xControlModel,
+		const ::com::sun::star::uno::Any& Helper ); 
+
+		virtual void processControls( const ::com::sun::star::uno::Sequence< 
+		::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& Objects, 
+		const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xListener, 
+		const ::com::sun::star::uno::Any& Helper
+		, bool replaceBinding = false 
+		); 
+		com::sun::star::uno::Reference< com::sun::star::uno::XComponentContext > m_xCtx;
 };
 
 
@@ -488,10 +514,12 @@ void SAL_CALL attachDialogEvents( StarBA
 	//const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xListener )
 {
 	static Reference< XScriptEventsAttacher > xEventsAttacher;
+	static DialogEventAttacher*  pEventsAttacher = NULL;
 	Guard< Mutex > aGuard( Mutex::getGlobalMutex() );
 	{
 		if( !xEventsAttacher.is() )
 			xEventsAttacher = new DialogEventAttacher();
+		pEventsAttacher = static_cast< DialogEventAttacher* >( xEventsAttacher.get() );
 	}
 
 	if( !xDialogControl.is() )
@@ -518,8 +546,24 @@ void SAL_CALL attachDialogEvents( StarBA
 	pObjects[ nControlCount ] = xDialogIface;
 
 	Reference< XScriptListener > xScriptListener = new BasicScriptListener_Impl( pBasic, xModel );
+		
 	Any Helper;
 	xEventsAttacher->attachEvents( aObjectSeq, xScriptListener, Helper );
+
+	if ( pEventsAttacher )
+	{
+		try
+		{
+			Reference< XPropertySet > xProps( xDialogControl->getModel(), UNO_QUERY_THROW ); 
+			OUString sDialogName;
+			xProps->getPropertyValue( rtl::OUString::createFromAscii("Name" ) ) >>= sDialogName;
+			Helper <<= sDialogName;
+			pEventsAttacher->attachVBAEvents( aObjectSeq, Helper, xModel );
+		}
+		catch( Exception& e )
+		{
+		}
+	}
 }
 
 
@@ -595,6 +639,13 @@ void DialogAllListener_Impl::firing_impl
     aScriptEvent.ScriptType     = maScriptType;
     aScriptEvent.ScriptCode     = maScriptCode;
 
+    if ( maScriptType.equals( rtl::OUString::createFromAscii("VBAInterop") ) )
+    {
+       	rtl::OUString sDialogName;
+	if ( aScriptEvent.Helper >>= sDialogName )
+    		aScriptEvent.ScriptCode = sDialogName;
+    }
+
 	if( pRet )
 		*pRet = mxScriptListener->approveFiring( aScriptEvent );
 	else
@@ -603,20 +654,7 @@ void DialogAllListener_Impl::firing_impl
 
 
 //===================================================================
-
-
-
-void SAL_CALL DialogEventAttacher::attachEvents
-(
-	const Sequence< Reference< XInterface > >& Objects,
-	const Reference< XScriptListener >& xListener, 
-	const Any& Helper 
-) 
-	throw(	IllegalArgumentException, 
-			IntrospectionException, 
-			CannotCreateAdapterException, 
-			ServiceNotRegisteredException, 
-			RuntimeException )
+DialogEventAttacher::DialogEventAttacher()
 {
 	// Get EventAttacher and Introspection (Introspection???)
 	{
@@ -637,11 +675,45 @@ void SAL_CALL DialogEventAttacher::attac
 			if( !mxEventAttacher.is() )
 				throw ServiceNotRegisteredException();
 		}
+		Reference < XPropertySet > xProps(
+			::comphelper::getProcessServiceFactory(), UNO_QUERY );
+
+		if( xProps.is() )
+		{
+			m_xCtx.set( xProps->getPropertyValue(
+				rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), 
+			UNO_QUERY );
+		}
+	}
+}
+void 
+DialogEventAttacher::processControls( const Sequence< 
+		Reference< XInterface > >& Objects, 
+		const Reference<XScriptListener >& xListener, 
+		const Any& Helper
+		, bool replaceBindings 
+)
+{
+	static Reference< org::openoffice::vba::XVBAToOOEventDescGen > xVBAToOOEvtDesc;
+	if (  m_xCtx.is() )
+	{
+		Reference< XMultiComponentFactory > xMFac( 
+			m_xCtx->getServiceManager(), UNO_QUERY );
+		if ( xMFac.is() )
+		{
+			if ( !xVBAToOOEvtDesc.is() )
+				xVBAToOOEvtDesc.set( 
+					xMFac->createInstanceWithContext( 
+						rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 
+							"org.openoffice.vba.VBAToOOEventDesc"  ) ),
+							m_xCtx ), UNO_QUERY );
+		}
 	}
 
 	// Go over all objects
 	const Reference< XInterface >* pObjects = Objects.getConstArray();
 	sal_Int32 i, nObjCount = Objects.getLength();
+
 	for( i = 0 ; i < nObjCount ; i++ )
 	{
 		// We know that we have to do with instances of XControl
@@ -654,68 +726,141 @@ void SAL_CALL DialogEventAttacher::attac
 		// Get XEventsSupplier from ControlModel
 		Reference< XControlModel > xControlModel = xControl->getModel();
 		Reference< XScriptEventsSupplier > xEventsSupplier( xControlModel, UNO_QUERY );
-		if( xEventsSupplier.is() )
-		{
-			Reference< XNameContainer > xEventCont = xEventsSupplier->getEvents();
-			Sequence< OUString > aNames = xEventCont->getElementNames();
-			const OUString* pNames = aNames.getConstArray();
-			sal_Int32 j, nNameCount = aNames.getLength();
+		if ( replaceBindings && xVBAToOOEvtDesc.is() )
+            // Or get XEventSupplier for VBAEvents
+			xEventsSupplier.set( xVBAToOOEvtDesc->getEventSupplier( xControl ),
+				UNO_QUERY );
+		else
+			xEventsSupplier.set( xControlModel, UNO_QUERY );
+			
+		attachEventsToControl( xEventsSupplier, xListener, xControl, xControlModel,Helper );
+	}
 
-			for( j = 0 ; j < nNameCount ; j++ )
-			{
-				ScriptEventDescriptor aDesc;
+}
 
-				Any aElement = xEventCont->getByName( pNames[ j ] );
-				aElement >>= aDesc;
-				Reference< XAllListener > xAllListener =
-					new DialogAllListener_Impl( xListener, aDesc.ScriptType, aDesc.ScriptCode );
-
-				// Try first to attach event to the ControlModel
-				sal_Bool bSuccess = sal_False;
-				try
-				{
-					Reference< XEventListener > xListener_ = mxEventAttacher->
-						attachSingleEventListener( xControlModel, xAllListener, Helper, 
-						aDesc.ListenerType, aDesc.AddListenerParam, aDesc.EventMethod );
+void
+DialogEventAttacher::attachVBAEvents( 
+	const Sequence< Reference< XInterface > >& Objects,
+	const Any& Helper,
+	const Reference< frame::XModel >& xModel 
+) 
+	throw(	IllegalArgumentException, 
+			IntrospectionException, 
+			CannotCreateAdapterException, 
+			ServiceNotRegisteredException, 
+			RuntimeException )
+{
+	
+	Reference< XScriptListener > xVbaScriptListener;
+	// #TODO ?? maybe better to create this object directly and not
+	// use UNO ( can pass the StarBasic* ptr in this case )
+	// to do that need to create .hxx file for 
+	// basic/source/vbaevents/eventhelper.cxx ( inc file needs to be
+    // in basic source/inc 
+	if (  m_xCtx.is() )
+	{
+		Reference< XMultiComponentFactory > xMFac( 
+			m_xCtx->getServiceManager(), UNO_QUERY );
+		if ( xMFac.is() )
+		{
+			Sequence< Any > args(1);
+			args[0] <<= xModel;
+			xVbaScriptListener.set( 
+				xMFac->createInstanceWithArgumentsAndContext( 
+					rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 
+						"org.openoffice.vba.EventListener"  ) ), args, 
+						m_xCtx ), UNO_QUERY );
+		}		
+		if ( xVbaScriptListener.is() )
+		{
+			processControls( Objects, xVbaScriptListener, Helper, true );
+		}
+	}	
+}
 
-					if( xListener_.is() )
-						bSuccess = sal_True;
-				}
-				catch( IllegalArgumentException& ) 
-				{}
-				catch( IntrospectionException& ) 
-				{}
-				catch( CannotCreateAdapterException& ) 
-				{}
-				catch( ServiceNotRegisteredException& ) 
-				{}
-				//{
-					//throw IntrospectionException();
-				//}
+void 
+DialogEventAttacher::attachEventsToControl( Reference< XScriptEventsSupplier >& xEventsSupplier, 
+		const Reference< XScriptListener >& xScriptListener, 
+		Reference< XControl > xControl,
+		Reference< XControlModel > xControlModel,
+		const Any& Helper )
+{
+	if( xEventsSupplier.is() )
+	{
+		Reference< XNameContainer > xEventCont = xEventsSupplier->getEvents();
+		Sequence< OUString > aNames = xEventCont->getElementNames();
+		const OUString* pNames = aNames.getConstArray();
+		sal_Int32 j, nNameCount = aNames.getLength();
+		for( j = 0 ; j < nNameCount ; j++ )
+		{
+			ScriptEventDescriptor aDesc;
 
-				try
-				{
-				// If we had no success, try to attach to the Control
-				if( !bSuccess )
-				{
+			Any aElement = xEventCont->getByName( pNames[ j ] );
+			aElement >>= aDesc;
+			Reference< XAllListener > xAllListener =
+				new DialogAllListener_Impl( xScriptListener, aDesc.ScriptType, aDesc.ScriptCode );
+
+			OSL_TRACE("Event [%d] name %s ", j, rtl::OUStringToOString( pNames[ j ], RTL_TEXTENCODING_UTF8 ).getStr() );
+			OSL_TRACE(" ScriptType %s\n ScriptCode %s\n ListenerType %s\n EventMethod %s", rtl::OUStringToOString( aDesc.ScriptType , RTL_TEXTENCODING_UTF8 ).getStr(), rtl::OUStringToOString( aDesc.ScriptCode, RTL_TEXTENCODING_UTF8 ).getStr(), rtl::OUStringToOString( aDesc.ListenerType, RTL_TEXTENCODING_UTF8 ).getStr(), rtl::OUStringToOString( aDesc.EventMethod, RTL_TEXTENCODING_UTF8 ).getStr() );
+			// Try first to attach event to the ControlModel
+			sal_Bool bSuccess = sal_False;
+			try
+			{
+				Reference< XEventListener > xListener = mxEventAttacher->
+					attachSingleEventListener( xControlModel, xAllListener, Helper, 
+					aDesc.ListenerType, aDesc.AddListenerParam, aDesc.EventMethod );
+				if( xListener.is() )
+					bSuccess = sal_True;
+			}
+			catch( IllegalArgumentException& ) 
+			{}
+			catch( IntrospectionException& ) 
+			{}
+			catch( CannotCreateAdapterException& ) 
+			{}
+			catch( ServiceNotRegisteredException& ) 
+			{}
+			//{
+				//throw IntrospectionException();
+			//}
+
+			try
+			{
+ 				// If we had no success, try to attach to the Control
+ 				if( !bSuccess )
+ 				{
 					Reference< XEventListener > xListener_;	// Do we need that?!?
 					xListener_ = mxEventAttacher->attachSingleEventListener
 						( xControl, xAllListener, Helper, aDesc.ListenerType,
 						  aDesc.AddListenerParam, aDesc.EventMethod );
 				}
-				}
-				catch( IllegalArgumentException& ) 
-				{}
-				catch( IntrospectionException& ) 
-				{}
-				catch( CannotCreateAdapterException& ) 
-				{}
-				catch( ServiceNotRegisteredException& ) 
-				{}
 			}
+			catch( IllegalArgumentException& ) 
+			{}
+			catch( IntrospectionException& ) 
+			{}
+			catch( CannotCreateAdapterException& ) 
+			{}
+			catch( ServiceNotRegisteredException& ) 
+			{}
 		}
 	}
+}
+
 
+void SAL_CALL DialogEventAttacher::attachEvents
+(
+	const Sequence< Reference< XInterface > >& Objects,
+	const Reference< XScriptListener >& xListener, 
+	const Any& Helper 
+) 
+	throw(	IllegalArgumentException, 
+			IntrospectionException, 
+			CannotCreateAdapterException, 
+			ServiceNotRegisteredException, 
+			RuntimeException )
+{
+	processControls( Objects, xListener, Helper );
 }
 
 Reference< XStringResourceManager > getStringResourceFromDialogLibrary( const Any& aDlgLibAny )
