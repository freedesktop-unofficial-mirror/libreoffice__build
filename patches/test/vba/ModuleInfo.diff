--- /dev/null	2006-11-25 20:17:37.000000000 +0800
+++ udkapi/com/sun/star/script/ModuleInfo.idl	2007-09-14 11:14:57.000000000 +0800
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: ArrayWrapper.idl,v $
+ *
+ *  $Revision: 1.2 $
+ *
+ *  last change: $Author: rt $ $Date: 2006/05/05 10:14:46 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __com_sun_star_script_ModuleInfo_idl__
+#define __com_sun_star_script_ModuleInfo_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+//=============================================================================
+module com {  module sun {  module star { module script {
+interface XObjectProvider;
+struct ModuleInfo
+{
+	string ModuleName; 
+	string ModuleSource; 
+	XObjectProvider ModuleObjectProvider; 
+	short ModuleType; // maybe we need this later
+};
+
+//=============================================================================
+
+}; }; }; };
+
+#endif
--- /dev/null	2006-11-25 20:17:37.000000000 +0800
+++ udkapi/com/sun/star/script/XObjectProvider.idl	2007-09-14 11:12:32.000000000 +0800
@@ -0,0 +1,52 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: XDefaultMethod.idl,v $
+ *
+ *  $Revision: 1.3 $
+ *
+ *  last change: $Author: vg $ $Date: 2006/11/02 16:34:45 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __com_sun_star_script_XObjectProvider_idl__
+#define __com_sun_star_script_XObjectProvider_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+module com { module sun { module star { module script {
+//==============================================================================
+interface XObjectProvider : ::com::sun::star::uno::XInterface
+{
+  any getObject();
+
+};
+
+};  };  };  };
+#endif
--- udkapi/com/sun/star/script/makefile.mk.bak	2007-09-14 11:22:21.000000000 +0800
+++ udkapi/com/sun/star/script/makefile.mk	2007-09-14 11:15:55.000000000 +0800
@@ -89,6 +89,8 @@ IDLFILES=\
 	XScriptEventsAttacher.idl\
 	XDefaultMethod.idl\
 	XDefaultProperty.idl\
+    ModuleInfo.idl\
+    XObjectProvider.idl\
 
 # ------------------------------------------------------------------
 
--- svx/source/msfilter/svxmsbas.cxx.bak	2007-09-03 13:31:10.000000000 +0800
+++ svx/source/msfilter/svxmsbas.cxx	2007-09-14 11:48:19.000000000 +0800
@@ -88,6 +88,7 @@ using namespace com::sun::star::awt;
 
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/script/XLibraryContainer.hpp>
+#include <com/sun/star/script/ModuleInfo.hpp>
 using namespace com::sun::star::container;
 using namespace com::sun::star::script;
 using namespace com::sun::star::uno;
@@ -303,6 +304,17 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
         }
 		if( xLib.is() )
 		{
+            Reference< XNameAccess> xVBAObjects;
+            Reference< XMultiServiceFactory> xSF(rDocSh.GetModel(), UNO_QUERY);
+            if ( xSF.is() )
+            {
+                try
+                {
+                    xVBAObjects.set( xSF->createInstance( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.vba.VBAObjectModuleObjects"))), UNO_QUERY);
+                }
+                catch( Exception& ) { }
+            }
+
 			for( UINT16 i=0; i<nStreamCount;i++)
 			{
 				StringArray aDecompressed = aVBA.Decompress(i);
@@ -435,12 +447,27 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
 						aSource += rtl::OUString::createFromAscii("\nEnd Sub");
 				}
 				::rtl::OUString aModName( sModule );
-				if ( aSource.getLength() )
+				//if ( aSource.getLength() )
 				{
 					aSource = modeTypeComment + aSource;
 
+                    // Query the application about object modules
 					Any aSourceAny;
-					aSourceAny <<= aSource;
+                    // Hack for Document (ObjectModule) objects right now
+                    //if ( xVBAObjects.is() && mType == Document )
+                    {
+                        // fill up the structure to contain the necessary
+                        // info needed by basic to create the ObjectModule
+                        script::ModuleInfo sModuleInfo;
+                        sModuleInfo.ModuleName = aModName;
+                        sModuleInfo.ModuleSource = aSource;
+                        sModuleInfo.ModuleType == Document;
+                        xVBAObjects->getByName( aModName ) >>= sModuleInfo.ModuleObjectProvider;
+                        aSourceAny <<= sModuleInfo;
+                    }
+                    //else 
+                    //    aSourceAny <<= aSource;
+
 					if( xLib->hasByName( aModName ) )
 						xLib->replaceByName( aModName, aSourceAny );
 					else
--- sc/inc/servuno.hxx.bak	2007-09-14 11:53:22.000000000 +0800
+++ sc/inc/servuno.hxx	2007-09-14 11:56:25.000000000 +0800
@@ -102,7 +102,8 @@ class ScDocShell;
 
 #define SC_SERVICE_FORMULAPARS  38
 
-#define SC_SERVICE_COUNT        39
+#define SC_SERVICE_VBAOBJECTS   39
+#define SC_SERVICE_COUNT        40
 #define SC_SERVICE_INVALID		USHRT_MAX
 
 
--- sc/source/ui/unoobj/servuno.cxx.bak	2007-09-14 11:59:13.000000000 +0800
+++ sc/source/ui/unoobj/servuno.cxx	2007-09-14 14:06:48.000000000 +0800
@@ -77,8 +77,81 @@
 #include <svx/xmlgrhlp.hxx>
 #endif
 
+#include "scextopt.hxx"
+#include <com/sun/star/script/XObjectProvider.hpp>
+#include <comphelper/processfactory.hxx>
+
 using namespace ::com::sun::star;
 
+class ScVbaObjectProvider : public ::cppu::WeakImplHelper1< script::XObjectProvider >
+{
+   ScDocShell* mpDocShell;
+   uno::Any aObj;
+public:
+   ScVbaObjectProvider( const rtl::OUString& sName, ScDocShell* pDocShell ) : mpDocShell( pDocShell ) {}
+   virtual uno::Any SAL_CALL getObject() throw (uno::RuntimeException)
+   {
+       if ( !aObj.hasValue() )
+       {
+           // #STUB - Skeleton implementation
+           uno::Reference<lang::XMultiServiceFactory> xSF(comphelper::getProcessServiceFactory());
+               uno::Reference<beans::XPropertySet> xProps(xSF, uno::UNO_QUERY);
+           if ( xProps.is() )
+           {
+                   uno::Reference<uno::XComponentContext> xContext;
+                   xProps->getPropertyValue( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext;
+               // determine the type of object we require from
+               // the code name e.g. either Workbook or Worksheet
+               // create that object - example Workbook
+               uno::Sequence< uno::Any > aArgs(2);
+               aArgs[0] = uno::Any( uno::Reference< uno::XInterface >() ); // dummy parent
+               aArgs[1] = uno::Any( mpDocShell->GetModel() );
+               uno::Reference< uno::XInterface > xIf = xSF->createInstanceWithArguments(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("org.openoffice.excel.Workbook") ), aArgs, xContext  );
+
+               aObj <<= xIf;
+           }
+
+       }
+       return aObj;
+   }
+};
+
+class ScVbaObjects : public ::cppu::WeakImplHelper1< container::XNameAccess >
+{
+   ScDocShell* mpDocShell;
+public:
+   ScVbaObjects( ScDocShell* pDocShell ):mpDocShell( pDocShell ) {}
+// XNameAccess
+   virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+   {
+       // #STUB - Skeleton implementation
+       if ( !hasByName( aName ) )
+           throw ::com::sun::star::container::NoSuchElementException();
+       return uno::makeAny( new ScVbaObjectProvider( aName, mpDocShell ) );
+   }
+   virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames() throw (uno::RuntimeException)
+   {
+       // #STUB - Skeleton implementation
+       // return all codenames here
+       // e.g. query ScExtDocOptions for the names of the
+       // sheet and workbook objects
+       return uno::Sequence< ::rtl::OUString >();
+   }
+   virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (::com::sun::star::uno::RuntimeException)
+   {
+       // #STUB - Skeleton implementation
+       // determine whether this codename exists or not
+       return sal_False;
+   }
+   virtual ::com::sun::star::uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException) { return script::XObjectProvider::static_type(0); }
+   virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+   {
+       // #STUB - Skeleton implementation
+       // determine if any codenames are here
+       return sal_False;
+   }
+};
+
 
 //------------------------------------------------------------------------
 
@@ -127,7 +200,8 @@ static const sal_Char* __FAR_DATA aProvN
         "com.sun.star.sheet.DocumentSettings",      // SC_SERVICE_SHEETDOCSET
 
         SC_SERVICENAME_CHDATAPROV,                  // SC_SERVICE_CHDATAPROV
-        SC_SERVICENAME_FORMULAPARS                  // SC_SERVICE_FORMULAPARS
+        SC_SERVICENAME_FORMULAPARS,                  // SC_SERVICE_FORMULAPARS
+        "org.openoffice.vba.VBAObjectModuleObjects",                 // SC_SERVICE_VBAOBJECTS
 	};
 
 //
@@ -178,7 +252,8 @@ static const sal_Char* __FAR_DATA aOldNa
 		"",											// SC_SERVICE_RANGEADDRESS
         "",                                         // SC_SERVICE_SHEETDOCSET
         "",                                         // SC_SERVICE_CHDATAPROV
-        ""                                          // SC_SERVICE_FORMULAPARS
+        "",                                          // SC_SERVICE_FORMULAPARS
+        ""                                          // SC_SERVICE_VBAOBJECTS
 	};
 
 


--- basic/source/basmgr/basmgr.cxx.bak	2007-08-28 14:00:38.000000000 +0800
+++ basic/source/basmgr/basmgr.cxx	2007-09-14 15:25:55.000000000 +0800
@@ -86,6 +86,7 @@
 #include "sbintern.hxx"
 #include <sb.hrc>
 
+#include <com/sun/star/script/ModuleInfo.hpp>
 
 #define LIB_SEP			0x01
 #define LIBINFO_SEP		0x02
@@ -280,9 +281,22 @@ void BasMgrContainerListenerImpl::addLib
 		{
 			OUString aModuleName = pNames[ j ];
 			Any aElement = xLibNameAccess->getByName( aModuleName );
+            ModuleInfo sModInfo;
 			OUString aMod;
-			aElement >>= aMod;
-			pLib->MakeModule32( aModuleName, aMod );
+            OUString aModType;
+            aElement >> sModInfo;
+            aMod = sModInfo.ModuleSource;
+            switch( sModInfo.ModuleType )
+            {
+                case SBXID_DOCUMENTMOD:
+                    pLib->MakeModule32( aModuleName, aMod, SBXID_DOCUMENTMOD );
+                    break;
+                case SBXID_BASICMOD:
+                    pLib->MakeModule32( aModuleName, aMod );
+                    break;
+                default:
+                    break;
+            }
 		}
 	}
 
@@ -319,9 +333,12 @@ void SAL_CALL BasMgrContainerListenerImp
 	}
 	else
 	{
+        ModuleInfo sModInfo;
 		OUString aMod;
-		Event.Element >>= aMod;
-
+        OUString aModType;
+        Event.Element >> sModInfo;
+        aMod = sModInfo.ModuleSource;
+ 
 		StarBASIC* pLib = mpMgr->GetLib( maLibName );
 		DBG_ASSERT( pLib, "BasMgrContainerListenerImpl::elementInserted: Unknown lib!");
 		if( pLib )
@@ -329,7 +346,17 @@ void SAL_CALL BasMgrContainerListenerImp
     		SbModule* pMod = pLib->FindModule( aName );
             if( !pMod )
             {
-			    pLib->MakeModule32( aName, aMod );
+                switch( sModInfo.ModuleType )
+                {
+                    case SBXID_DOCUMENTMOD:
+                        pLib->MakeModule32( aModuleName, aMod, SBXID_DOCUMENTMOD );
+                        break;
+                    case SBXID_BASICMOD:
+                        pLib->MakeModule32( aModuleName, aMod );
+                        break;
+                    default:
+                        break;
+                }
 			    pLib->SetModified( FALSE );
             }
 		}
@@ -356,13 +383,22 @@ void SAL_CALL BasMgrContainerListenerImp
 	if( pLib )
 	{
 		SbModule* pMod = pLib->FindModule( aName );
+        ModuleInfo sModInfo;
 		OUString aMod;
-		Event.Element >>= aMod;
-		if( pMod )
-			pMod->SetSource32( aMod );
-		else
-			pLib->MakeModule32( aName, aMod );
-
+        OUString aModType;
+        aElement >> sModInfo;
+        aMod = sModInfo.ModuleSource;
+        switch( sModInfo.ModuleType )
+        {
+            case SBXID_DOCUMENTMOD:
+            pLib->MakeModule32( aModuleName, aMod, SBXID_DOCUMENTMOD );
+                break;
+            case SBXID_BASICMOD:
+                pLib->MakeModule32( aModuleName, aMod );
+                break;
+            default:
+                break;
+        }
 		pLib->SetModified( FALSE );
 	}
 }
