--- /dev/null	2006-11-25 20:17:37.000000000 +0800
+++ udkapi/com/sun/star/script/ModuleInfo.idl	2007-09-18 13:58:27.000000000 +0800
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: ArrayWrapper.idl,v $
+ *
+ *  $Revision: 1.2 $
+ *
+ *  last change: $Author: rt $ $Date: 2006/05/05 10:14:46 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __com_sun_star_script_ModuleInfo_idl__
+#define __com_sun_star_script_ModuleInfo_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+//=============================================================================
+module com {  module sun {  module star { module script {
+interface XObjectProvider;
+struct ModuleInfo
+{
+	string ModuleName; 
+	string ModuleSource; 
+	XObjectProvider ModuleObjectProvider; 
+	short ModuleType; // string?
+};
+
+//=============================================================================
+
+}; }; }; };
+
+#endif
--- /dev/null	2006-11-25 20:17:37.000000000 +0800
+++ udkapi/com/sun/star/script/XObjectProvider.idl	2007-09-18 13:58:48.000000000 +0800
@@ -0,0 +1,52 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: XDefaultMethod.idl,v $
+ *
+ *  $Revision: 1.3 $
+ *
+ *  last change: $Author: vg $ $Date: 2006/11/02 16:34:45 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __com_sun_star_script_XObjectProvider_idl__
+#define __com_sun_star_script_XObjectProvider_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+module com { module sun { module star { module script {
+//==============================================================================
+interface XObjectProvider : ::com::sun::star::uno::XInterface
+{
+  any getObject();
+
+};
+
+};  };  };  };
+#endif
--- udkapi/com/sun/star/script/makefile.mk.bak	2007-09-18 13:59:16.000000000 +0800
+++ udkapi/com/sun/star/script/makefile.mk	2007-09-18 13:59:54.000000000 +0800
@@ -89,6 +89,8 @@ IDLFILES=\
 	XScriptEventsAttacher.idl\
 	XDefaultMethod.idl\
 	XDefaultProperty.idl\
+    ModuleInfo.idl\
+    XObjectProvider.idl\
 
 # ------------------------------------------------------------------
 
--- svx/source/msfilter/svxmsbas.cxx.bak	2007-09-18 14:13:40.000000000 +0800
+++ svx/source/msfilter/svxmsbas.cxx	2007-09-26 17:30:22.000000000 +0800
@@ -88,6 +88,7 @@ using namespace com::sun::star::awt;
 
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/script/XLibraryContainer.hpp>
+#include <com/sun/star/script/ModuleInfo.hpp>
 using namespace com::sun::star::container;
 using namespace com::sun::star::script;
 using namespace com::sun::star::uno;
@@ -303,6 +304,16 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
         }
 		if( xLib.is() )
 		{
+            Reference< XNameAccess> xVBAObjects;
+            Reference< XMultiServiceFactory> xSF(rDocSh.GetModel(), UNO_QUERY);
+            if ( xSF.is() )
+            {
+                try
+                {
+                    xVBAObjects.set( xSF->createInstance( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.vba.VBAObjectModuleObjects"))), UNO_QUERY);
+                }
+                catch( Exception& ) { }
+            }
 			for( UINT16 i=0; i<nStreamCount;i++)
 			{
 				StringArray aDecompressed = aVBA.Decompress(i);
@@ -435,12 +446,22 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
 						aSource += rtl::OUString::createFromAscii("\nEnd Sub");
 				}
 				::rtl::OUString aModName( sModule );
-				if ( aSource.getLength() )
+				//if ( aSource.getLength() )
 				{
 					aSource = modeTypeComment + aSource;
 
 					Any aSourceAny;
-					aSourceAny <<= aSource;
+                    if ( xVBAObjects.is() && mType == Document )
+                    {
+                        script::ModuleInfo sModuleInfo;
+                        sModuleInfo.ModuleName = aModName;
+                        sModuleInfo.ModuleSource = aSource;
+                        sModuleInfo.ModuleType == Document;
+                        xVBAObjects->getByName( aModName ) >>= sModuleInfo.ModuleObjectProvider;
+                        aSourceAny <<= sModuleInfo;
+                    }
+                    else
+					    aSourceAny <<= aSource;
 					if( xLib->hasByName( aModName ) )
 						xLib->replaceByName( aModName, aSourceAny );
 					else
--- sc/inc/servuno.hxx.bak	2007-09-18 14:17:18.000000000 +0800
+++ sc/inc/servuno.hxx	2007-09-18 14:18:17.000000000 +0800
@@ -103,7 +103,8 @@ class ScDocShell;
 #define SC_SERVICE_FORMULAPARS  38
 #define SC_SERVICE_OPCODEMAPPER 39
 
-#define SC_SERVICE_COUNT        40
+#define SC_SERVICE_VBAOBJECTS   40
+#define SC_SERVICE_COUNT        41
 #define SC_SERVICE_INVALID		USHRT_MAX
 
 
--- sc/source/ui/unoobj/servuno.cxx.bak	2007-09-18 14:18:43.000000000 +0800
+++ sc/source/ui/unoobj/servuno.cxx	2007-09-25 16:24:08.000000000 +0800
@@ -77,8 +77,119 @@
 #include <svx/xmlgrhlp.hxx>
 #endif
 
+#include "scextopt.hxx"
+#include <com/sun/star/script/XObjectProvider.hpp>
+#include <comphelper/processfactory.hxx>
+#include <org/openoffice/vba/XGlobals.hpp>
+#include <org/openoffice/excel/XWorksheets.hpp>
+
 using namespace ::com::sun::star;
+using namespace ::org::openoffice;
 
+class ScVbaObjectProvider : public ::cppu::WeakImplHelper1< script::XObjectProvider >
+{
+    ScDocShell* mpDocShell;
+    uno::Any aObj;
+    String msName;
+public:
+    ScVbaObjectProvider( const rtl::OUString& sName, ScDocShell* pDocShell ) : mpDocShell( pDocShell ), msName(sName) {}
+    virtual uno::Any SAL_CALL getObject() throw (uno::RuntimeException)
+    {
+        if ( !aObj.hasValue() )
+        {
+            uno::Reference<lang::XMultiServiceFactory> xSF(comphelper::getProcessServiceFactory());
+            uno::Reference<beans::XPropertySet> xProps(xSF, uno::UNO_QUERY);
+            if( xProps.is() )
+            {
+                //uno::Reference<uno::XComponentContext> xContext;
+                //xProps->getPropertyValue( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext;
+                uno::Sequence< uno::Any > aArgs(2);
+                aArgs[0] = uno::Any( uno::Reference< uno::XInterface >() );
+                aArgs[1] = uno::Any( mpDocShell->GetModel() );
+                uno::Reference< uno::XInterface > xIf = xSF->createInstanceWithArguments(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("org.openoffice.excel.Workbook") ), aArgs );
+                uno::Reference< excel::XWorkbook > xWorkbook( xIf, uno::UNO_QUERY );
+                if( xWorkbook.is() )
+                {
+                    String sGlobCodeName = xWorkbook->getCodeName();
+                    if ( sGlobCodeName == msName )
+                    {
+                        OSL_TRACE("globcodename is %s", rtl::OUStringToOString(  sGlobCodeName, RTL_TEXTENCODING_UTF8 ).getStr() );
+                        aObj <<= xWorkbook;
+                    }
+                    else
+                    {
+                        com::sun::star::uno::Any aIndex;
+                        com::sun::star::uno::Reference< org::openoffice::excel::XWorksheets > xWorksheets( xWorkbook->Sheets( aIndex ), com::sun::star::uno::UNO_QUERY_THROW );
+                        sal_Int32 nCount = xWorksheets->getCount();
+                        for ( sal_Int32 i = 1; i <= nCount; i++ )
+                        {
+                            com::sun::star::uno::Reference< org::openoffice::excel::XWorksheet > xWorksheet( xWorkbook->Sheets( com::sun::star::uno::makeAny( i ) ), com::sun::star::uno::UNO_QUERY_THROW );
+                            String sCodeName = xWorksheet->getCodeName();
+                            if ( sCodeName == msName )
+                            {
+                                OSL_TRACE("sheet %s 's codename is %s", rtl::OUStringToOString(  xWorksheet->getName(), RTL_TEXTENCODING_UTF8 ).getStr(), rtl::OUStringToOString(  sCodeName, RTL_TEXTENCODING_UTF8 ).getStr() );
+                                aObj <<= xWorksheet;
+                            }
+
+                        }
+                    }
+                }
+            }
+        }
+        return aObj;
+    }
+};
+class ScVbaObjects : public ::cppu::WeakImplHelper2< container::XNameAccess, lang::XInitialization >
+{
+    ScDocShell* mpDocShell;
+    uno::Sequence< rtl::OUString > maCodeNames;
+public:
+    ScVbaObjects( ScDocShell* pDocShell ):mpDocShell( pDocShell ) { maCodeNames = uno::Sequence< rtl::OUString >(0); }
+    // XNameAccess
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& sName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        //if ( !hasByName( sName ) )
+        //    throw ::com::sun::star::container::NoSuchElementException();
+        return uno::makeAny( uno::Reference< script::XObjectProvider > ( new ScVbaObjectProvider( sName, mpDocShell ) ));
+    }
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames() throw (uno::RuntimeException)
+    {
+        return maCodeNames;
+    }
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        if( hasElements() )
+        {
+            SCTAB  nCount = maCodeNames.getLength();
+            for( SCTAB i = 0; i < nCount; i++ )
+            {
+                if( maCodeNames[i] == aName )
+                    return sal_True;
+            }
+        }
+        return sal_False;
+    }
+    virtual ::com::sun::star::uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException) { return script::XObjectProvider::static_type(0); }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return maCodeNames.hasElements();
+    }
+    // XInitialization
+    virtual void SAL_CALL initialize( const uno::Sequence< uno::Any >& aArguments ) throw (uno::Exception, uno::RuntimeException)
+    {
+        ScDocument* pDoc = mpDocShell->GetDocument();
+        ScExtDocOptions* pExtOptions = pDoc->GetExtDocOptions();
+        SCTAB  nCount = pExtOptions->GetCodeNameCount();
+        if( !maCodeNames.hasElements() )
+        {
+            maCodeNames.realloc( nCount );
+        }
+        for( SCTAB i = 0; i < nCount; i++ )
+        {
+            maCodeNames[i] = pExtOptions->GetCodeName(i);
+        }
+    }
+};
 
 //------------------------------------------------------------------------
 
@@ -128,7 +239,8 @@ static const sal_Char* __FAR_DATA aProvN
 
         SC_SERVICENAME_CHDATAPROV,                  // SC_SERVICE_CHDATAPROV
         SC_SERVICENAME_FORMULAPARS,                 // SC_SERVICE_FORMULAPARS
-        SC_SERVICENAME_OPCODEMAPPER                 // SC_SERVICE_OPCODEMAPPER
+        SC_SERVICENAME_OPCODEMAPPER,                 // SC_SERVICE_OPCODEMAPPER
+        "org.openoffice.vba.VBAObjectModuleObjects",// SC_SERVICE_VBAOBJECTS
 	};
 
 //
@@ -180,6 +292,7 @@ static const sal_Char* __FAR_DATA aOldNa
         "",                                         // SC_SERVICE_SHEETDOCSET
         "",                                         // SC_SERVICE_CHDATAPROV
         "",                                         // SC_SERVICE_FORMULAPARS
+        "",                                         // SC_SERVICE_VBAOBJECTS
         ""                                          // SC_SERVICE_OPCODEMAPPER
 	};
 
@@ -373,6 +486,8 @@ uno::Reference<uno::XInterface> ScServic
         case SC_SERVICE_OPCODEMAPPER:
             xRet.set(static_cast<sheet::XFormulaOpCodeMapper*>(new ScFormulaOpCodeMapperObj));
             break;
+        case SC_SERVICE_VBAOBJECTS:
+            xRet.set(static_cast<container::XNameAccess*>(new ScVbaObjects( pDocShell )));
 	}
 	return xRet;
 }
--- sc/source/ui/unoobj/makefile.mk.bak	2007-09-24 01:27:42.000000000 +0800
+++ sc/source/ui/unoobj/makefile.mk	2007-09-24 01:54:11.000000000 +0800
@@ -54,6 +54,7 @@ AUTOSEG=true
 .INCLUDE :  sc.mk
 .INCLUDE :  $(PRJ)$/util$/makefile.pmk
 
+INCPRE=$(INCCOM)$/vbaobj
 # --- Files --------------------------------------------------------
 SLO1FILES =  \
         $(SLO)$/docuno.obj \
--- basctl/source/basicide/scriptdocument.cxx.bak	2007-09-18 17:11:34.000000000 +0800
+++ basctl/source/basicide/scriptdocument.cxx	2007-09-18 17:31:14.000000000 +0800
@@ -62,6 +62,9 @@
 #ifndef _COM_SUN_STAR_DOCUMENT_MACROEXECMODE_HPP_
 #include <com/sun/star/document/MacroExecMode.hpp>
 #endif
+#ifndef _COM_SUN_STAR_SCRIPT_MODULEINFO_HPP_
+#include <com/sun/star/script/ModuleInfo.hpp>
+#endif
 /** === end UNO includes === **/
 
 #include <sfx2/objsh.hxx>
@@ -114,6 +117,7 @@ namespace basctl
     using ::com::sun::star::io::XInputStreamProvider;
     using ::com::sun::star::uno::Any;
     using ::com::sun::star::io::XInputStream;
+    using ::com::sun::star::script::ModuleInfo;
     /** === end UNO using === **/
     namespace MacroExecMode = ::com::sun::star::document::MacroExecMode;
 
@@ -1102,7 +1106,18 @@ namespace basctl
         Any aCode;
         if ( !m_pImpl->getModuleOrDialog( E_SCRIPTS, _rLibName, _rModName, aCode ) )
             return false;
-        OSL_VERIFY( aCode >>= _out_rModuleSource );
+        ModuleInfo sModuleInfo;
+        rtl::OUString sMod;
+        if ( aCode >>= sModuleInfo )
+        {
+            sMod = sModuleInfo.ModuleSource;
+        }
+        else
+        {
+            aCode >>= sMod;
+        }
+        Any aMod(sMod);
+        OSL_VERIFY( aMod >>= _out_rModuleSource );
         return true;
     }
 
--- /dev/null	2006-11-25 20:17:37.000000000 +0800
+++ basic/inc/basic/sbobjmod.hxx	2007-09-24 00:54:07.000000000 +0800
@@ -0,0 +1,68 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: sbobjmod.hxx,v $
+ *
+ *  $Revision: 1.4 $
+ *
+ *  last change: $Author:  $ $Date: 2007/08/27 16:31:39 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef _SB_OBJMOD_HXX
+#define _SB_OBJMOD_HXX
+
+#include <basic/sbmod.hxx>
+#include <basic/sbstar.hxx>
+#include <com/sun/star/script/ModuleInfo.hpp>
+
+// Basic-Module for excel object.
+
+class SbObjModule : public SbModule
+{
+    com::sun::star::script::ModuleInfo m_mInfo;
+    SbxObjectRef pDocObject; // a excel object.
+protected:
+	//virtual ~SbObjModule();
+    void InitObject( const XubString& rName );
+    void InitObject( );
+public:
+    TYPEINFO();
+	SBX_DECL_PERSIST_NODATA(SBXCR_SBX,SBXID_DOCUMENTMOD,2);
+    SbObjModule( const rtl::OUString& rName, const com::sun::star::script::ModuleInfo& mInfo );
+    virtual SbxVariable* Find( const XubString& rName, SbxClassType t );
+    virtual SbxVariable* GetObject();
+    virtual void SetCodeName( const XubString& rName );
+};
+#ifndef __SB_SBOBJMODULEREF_HXX
+#define __SB_SBOBJMODULEREF_HXX
+
+SV_DECL_IMPL_REF(SbObjModule);
+
+#endif
+#endif
+
--- basic/prj/d.lst.bak	2007-09-18 18:05:07.000000000 +0800
+++ basic/prj/d.lst	2007-09-18 18:05:58.000000000 +0800
@@ -27,6 +27,7 @@ mkdir: %_DEST%\inc%_EXT%\basic
 
 ..\inc\basic\sbdef.hxx %_DEST%\inc%_EXT%\basic\sbdef.hxx
 ..\inc\basic\sbmod.hxx %_DEST%\inc%_EXT%\basic\sbmod.hxx
+..\inc\basic\sbobjmod.hxx %_DEST%\inc%_EXT%\basic\sbobjmod.hxx
 ..\inc\basic\sbjsmod.hxx %_DEST%\inc%_EXT%\basic\sbjsmod.hxx
 ..\inc\basic\sbmeth.hxx %_DEST%\inc%_EXT%\basic\sbmeth.hxx
 ..\inc\basic\sbprop.hxx %_DEST%\inc%_EXT%\basic\sbprop.hxx
--- basic/source/classes/sbxmod.cxx.bak	2007-09-19 10:52:19.000000000 +0800
+++ basic/source/classes/sbxmod.cxx	2007-09-24 01:11:43.000000000 +0800
@@ -62,6 +62,8 @@
 #include "sbunoobj.hxx"
 #include <basic/hilight.hxx>
 #include <basic/basrdll.hxx>
+#include <basic/sbobjmod.hxx>
+#include <com/sun/star/script/XObjectProvider.hpp>
 
 #ifndef _VOS_MUTEX_HXX_
 #include <vos/mutex.hxx>
@@ -88,6 +90,7 @@ TYPEINIT1(SbProperty,SbxProperty)
 TYPEINIT1(SbProcedureProperty,SbxProperty)
 TYPEINIT1(SbJScriptModule,SbModule)
 TYPEINIT1(SbJScriptMethod,SbMethod)
+TYPEINIT1(SbObjModule,SbModule)
 
 SV_DECL_VARARR(SbiBreakpoints,USHORT,4,4)
 SV_IMPL_VARARR(SbiBreakpoints,USHORT)
@@ -1903,6 +1906,66 @@ void SyntaxHighlighter::getHighlightPort
 	m_pSimpleTokenizer->getHighlightPortions( nLine, rLine, portions );
 }
 
+/////////////////////////////////////////////////////////////////////////
+SbObjModule::SbObjModule( const rtl::OUString& rName, const com::sun::star::script::ModuleInfo& mInfo )
+    :SbModule( rName ), pDocObject( NULL )
+{
+    m_mInfo = mInfo;
+    SetSource32( mInfo.ModuleSource );
+}
+SbxVariable*
+SbObjModule::GetObject()
+{
+    return Find( GetName(), SbxCLASS_DONTCARE );
+}
+SbxVariable*
+SbObjModule::Find( const XubString& rName, SbxClassType t )
+{
+    OSL_TRACE("SbObjectModule find for %s", rtl::OUStringToOString(  rName, RTL_TEXTENCODING_UTF8 ).getStr() );
+    if ( !pDocObject )
+        InitObject( );
+    OSL_TRACE("!!!!try to find in derived module " );
+    SbxVariable* pVar = NULL;
+    if ( !pVar && pDocObject)
+    {
+        pVar = pDocObject->Find( rName, t );
+        if ( pVar )
+        {
+           OSL_TRACE("found in uno (psuedo-base) object" );
+           pVar->SetFlag( SBX_PRIVATE );
+        }
+        else
+           OSL_TRACE("NOT found in uno (psuedo-base) object" );
+    }
+    if ( !pVar )
+    {
+        pVar = SbModule::Find( rName, t );
+        OSL_TRACE("! found in (normal) module " );
+    }
+    return pVar;
+}
+void
+SbObjModule::InitObject()
+{
+    InitObject( GetName() );
+}
+void
+SbObjModule::InitObject( const XubString& rName )
+{
+    OSL_TRACE("Initialize pDocObject");
+    try
+    {
+        com::sun::star::uno::Reference< com::sun::star::script::XObjectProvider > xObjectProvider( m_mInfo.ModuleObjectProvider, com::sun::star::uno::UNO_QUERY_THROW );
+        pDocObject = new SbUnoObject( rName, xObjectProvider->getObject() );
+    }catch( com::sun::star::uno::RuntimeException e )
+    {
+        OSL_TRACE("Object is not exist." );
+    }
+}
+void
+SbObjModule::SetCodeName( const XubString& rName )
+{
+}
 
 /////////////////////////////////////////////////////////////////////////
 // Implementation SbJScriptModule (Basic-Modul fuer JavaScript-Sourcen)
--- basic/source/classes/sb.cxx.bak	2007-09-18 18:26:18.000000000 +0800
+++ basic/source/classes/sb.cxx	2007-09-24 01:01:43.000000000 +0800
@@ -70,6 +70,7 @@
 #include "disas.hxx"
 #include "runtime.hxx"
 #include <basic/sbuno.hxx>
+#include <basic/sbobjmod.hxx>
 #include "stdobj.hxx"
 #include "filefmt.hxx"
 #include "sb.hrc"
@@ -769,13 +770,21 @@ SbModule* StarBASIC::MakeModule( const S
 
 SbModule* StarBASIC::MakeModule32( const String& rName, const ::rtl::OUString& rSrc )
 {
-	SbModule* p = new SbModule( rName );
+    SbModule* p = new SbModule( rName );
 	p->SetSource32( rSrc );
 	p->SetParent( this );
 	pModules->Insert( p, pModules->Count() );
 	SetModified( TRUE );
 	return p;
 }
+SbModule* StarBASIC::MakeObjModule( const String& rName, const com::sun::star::script::ModuleInfo& mInfo )
+{
+    SbObjModule* p = new SbObjModule( rName, mInfo );
+	p->SetParent( this );
+	pModules->Insert( p, pModules->Count() );
+	SetModified( TRUE );
+    return p;
+}
 
 void StarBASIC::Insert( SbxVariable* pVar )
 {
--- basic/source/runtime/methods1.cxx.bak	2007-09-19 14:14:34.000000000 +0800
+++ basic/source/runtime/methods1.cxx	2007-09-19 14:18:55.000000000 +0800
@@ -60,6 +60,9 @@
 #ifndef _SBX_HXX
 #include <basic/sbx.hxx>
 #endif
+#ifndef _SBSTAR_HXX
+#include <basic/sbstar.hxx>
+#endif
 #ifndef _ZFORLIST_HXX //autogen
 #include <svtools/zforlist.hxx>
 #endif
@@ -80,6 +83,7 @@
 #endif
 
 #include <vcl/jobset.hxx>
+#include <basic/sbobjmod.hxx>
 
 #include "sbintern.hxx"
 #include "runtime.hxx"
@@ -2605,7 +2609,14 @@ RTLFUNC(Me)
 	SbClassModuleObject* pClassModuleObject = PTR_CAST(SbClassModuleObject,pActiveModule);
 	if( pClassModuleObject == NULL )
 	{
-		StarBASIC::Error( SbERR_INVALID_USAGE_OBJECT );
+        SbObjModule* pMod = PTR_CAST(SbObjModule,pActiveModule);
+        if ( pMod == NULL )
+		    StarBASIC::Error( SbERR_INVALID_USAGE_OBJECT );
+        else
+        {
+            SbxVariableRef refVar = rPar.Get(0);
+            refVar->PutObject( pMod->GetObject() );
+        }
 	}
 	else
 	{
--- basic/source/basmgr/basmgr.cxx.bak	2007-09-19 14:20:15.000000000 +0800
+++ basic/source/basmgr/basmgr.cxx	2007-09-24 00:59:18.000000000 +0800
@@ -102,6 +102,7 @@
 #include <com/sun/star/script/XStarBasicDialogInfo.hpp>
 #include <com/sun/star/script/XStarBasicLibraryInfo.hpp>
 #include <com/sun/star/script/XLibraryContainerPassword.hpp>
+#include <com/sun/star/script/ModuleInfo.hpp>
 
 #include <cppuhelper/implbase1.hxx>
 
@@ -145,6 +146,7 @@ static const char* szScriptLanguage = "S
 static const String BasicStreamName( String::CreateFromAscii(szBasicStorage) );
 static const String ManagerStreamName( String::CreateFromAscii(szManagerStream) );
 
+enum ModuleType { Unknown = 0, Normal, Class, Form, Document };
 
 #define	DEFINE_CONST_UNICODE(CONSTASCII)    UniString(RTL_CONSTASCII_USTRINGPARAM(CONSTASCII))
 
@@ -280,9 +282,22 @@ void BasMgrContainerListenerImpl::addLib
 		{
 			OUString aModuleName = pNames[ j ];
 			Any aElement = xLibNameAccess->getByName( aModuleName );
+            ModuleInfo mInfo;
 			OUString aMod;
-			aElement >>= aMod;
-			pLib->MakeModule32( aModuleName, aMod );
+            sal_Int16 mType;
+            if ( aElement >>= mInfo )
+            {
+                aMod = mInfo.ModuleSource;
+                mType = mInfo.ModuleType;
+                OSL_TRACE("#1 - aMod");
+                //pLib->MakeModule32( aModuleName, aMod, SBXID_DOCUMENTMOD );
+                pLib->MakeObjModule( aModuleName, mInfo );
+            }
+            else
+            {
+			    aElement >>= aMod;
+			    pLib->MakeModule32( aModuleName, aMod );
+            }
 		}
 	}
 
@@ -319,8 +334,16 @@ void SAL_CALL BasMgrContainerListenerImp
 	}
 	else
 	{
+        ModuleInfo mInfo;
 		OUString aMod;
-		Event.Element >>= aMod;
+        sal_Int16 mType;
+        if( Event.Element >>= mInfo )
+        {
+            aMod = mInfo.ModuleSource;
+            mType = mInfo.ModuleType;
+        }
+        else
+		    Event.Element >>= aMod;
 
 		StarBASIC* pLib = mpMgr->GetLib( maLibName );
 		DBG_ASSERT( pLib, "BasMgrContainerListenerImpl::elementInserted: Unknown lib!");
@@ -329,7 +352,15 @@ void SAL_CALL BasMgrContainerListenerImp
     		SbModule* pMod = pLib->FindModule( aName );
             if( !pMod )
             {
-			    pLib->MakeModule32( aName, aMod );
+                if ( mType == Document )
+                {
+                    //pLib->MakeModule32( aName, aMod, SBXID_DOCUMENTMOD );
+                    pLib->MakeObjModule( aName, mInfo );
+                }
+                else
+                {
+			        pLib->MakeModule32( aName, aMod );
+                }
 			    pLib->SetModified( FALSE );
             }
 		}
@@ -356,12 +387,27 @@ void SAL_CALL BasMgrContainerListenerImp
 	if( pLib )
 	{
 		SbModule* pMod = pLib->FindModule( aName );
+        ModuleInfo mInfo;
 		OUString aMod;
+        sal_Int16 mType;
 		Event.Element >>= aMod;
 		if( pMod )
 			pMod->SetSource32( aMod );
 		else
-			pLib->MakeModule32( aName, aMod );
+        {
+            if( Event.Element >>= mInfo )
+            {
+                aMod = mInfo.ModuleSource;
+                mType = mInfo.ModuleType;
+                //pLib->MakeModule32( aName, aMod, SBXID_DOCUMENTMOD );
+                pLib->MakeObjModule( aName, mInfo );
+            }
+            else
+            {
+                Event.Element >>= aMod;
+			    pLib->MakeModule32( aName, aMod );
+            }
+        }
 
 		pLib->SetModified( FALSE );
 	}
--- basic/inc/basic/sbstar.hxx.bak	2007-09-18 18:22:12.000000000 +0800
+++ basic/inc/basic/sbstar.hxx	2007-09-24 00:49:50.000000000 +0800
@@ -51,6 +51,7 @@
 
 #include <basic/sbdef.hxx>
 #include <basic/sberrors.hxx>
+#include <com/sun/star/script/ModuleInfo.hpp>
 
 class SbModule;                     // fertiges Modul
 class SbiInstance;                  // Laufzeit-Instanz
@@ -124,7 +125,8 @@ public:
 
 	// Compiler-Interface
 	SbModule*   	MakeModule( const String& rName, const String& rSrc );
-    SbModule*   	MakeModule32( const String& rName, const ::rtl::OUString& rSrc );
+    SbModule*       MakeModule32( const String& rName, const ::rtl::OUString& rSrc );
+    SbModule*       MakeObjModule( const String& rName, const com::sun::star::script::ModuleInfo& mInfo );
 	BOOL			Compile( SbModule* );
 	BOOL 			Disassemble( SbModule*, String& rText );
 	static void 	Stop();
