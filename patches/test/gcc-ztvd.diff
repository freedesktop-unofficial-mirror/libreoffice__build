? TAGS.sub
Index: class.c
===================================================================
RCS file: /cvsroot/gcc/gcc/gcc/cp/class.c,v
retrieving revision 1.707.2.3
diff -u -r1.707.2.3 class.c
--- class.c	24 Apr 2005 12:46:26 -0000	1.707.2.3
+++ class.c	9 Aug 2005 15:45:55 -0000
@@ -169,6 +169,7 @@
 static void dump_thunk (FILE *, int, tree);
 static tree build_vtable (tree, tree, tree);
 static void initialize_vtable (tree, tree);
+static void initialize_vtable_description (tree, tree, tree);
 static void layout_nonempty_base_or_field (record_layout_info,
 					   tree, tree, splay_tree);
 static tree end_of_class (tree, int);
@@ -6609,7 +6610,10 @@
     }
 
   if (BINFO_VTABLE (TYPE_BINFO (t)))
-    initialize_vtable (TYPE_BINFO (t), TREE_VALUE (list));
+    {
+      initialize_vtable (TYPE_BINFO (t), TREE_VALUE (list));
+      initialize_vtable_description (t, TYPE_BINFO (t), TREE_VALUE (list));
+    }
 }
 
 /* Initialize the vtable for BINFO with the INITS.  */
@@ -6623,6 +6627,76 @@
   decl = get_vtbl_decl_for_binfo (binfo);
   initialize_artificial_var (decl, inits);
   dump_vtable (BINFO_TYPE (binfo), binfo, decl);
+}
+
+
+static tree
+build_string_literal (int len, const char *str)
+{
+  tree t, elem, index, type;
+
+  t = build_string (len, str);
+  elem = build_type_variant (char_type_node, 1, 0);
+  index = build_index_type (build_int_cst (NULL_TREE, len - 1));
+  type = build_array_type (elem, index);
+  TREE_TYPE (t) = type;
+  TREE_CONSTANT (t) = 1;
+  TREE_INVARIANT (t) = 1;
+  TREE_READONLY (t) = 1;
+  TREE_STATIC (t) = 1;
+
+  return t;
+}
+
+/* Create initializers for vtable descriptors */
+static void
+initialize_vtable_description (tree type, tree binfo, tree vt_inits)
+{
+    tree decl, clist, carray, slot;
+    tree name = mangle_vtbl_descr_for_type (type);
+
+    /* create the vtable description variable */
+    decl = build_vtable (type, name, vtbl_descr_type_node);
+
+    /* setup the array type */
+    carray = build_cplus_array_type (string_type_node,
+				     build_index_type (size_int (list_length (vt_inits) - 1)));
+    layout_type (carray);
+
+    /* layout the descr decl */
+    TREE_TYPE (decl) = carray;
+    DECL_SIZE (decl) = DECL_SIZE_UNIT (decl) = NULL_TREE;
+    layout_decl (decl, 0);
+
+    /* setup the array contents */
+    clist = NULL_TREE;
+    for (slot = vt_inits; slot; slot = TREE_CHAIN (slot))
+    {
+	tree elem = TREE_VALUE (slot);
+	tree value;
+	if (TREE_CODE (elem) == NOP_EXPR)
+		value = build_int_cst (NULL_TREE, 0);
+	else
+	{
+	    const char *method_name;
+	    gcc_assert (TREE_CODE (elem) == ADDR_EXPR);
+	    tree method = TREE_OPERAND (elem, 0);
+	    method_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (method));
+	    value = build_string_literal (strlen (method_name) + 1, method_name);
+	}
+	clist = tree_cons (NULL_TREE, value, clist);
+    }
+    clist = nreverse (clist);
+    initialize_artificial_var (decl, clist);
+
+    // FIXME: looks broken (?)
+    if (!CLASSTYPE_VTABLE_DESCRS (type))
+        CLASSTYPE_VTABLE_DESCRS (type) = decl;
+    else
+    {
+        TREE_CHAIN (decl) = TREE_CHAIN (CLASSTYPE_VTABLE_DESCRS (type));
+	TREE_CHAIN (CLASSTYPE_VTABLE_DESCRS (type)) = decl;
+    }
 }
 
 /* Build the VTT (virtual table table) for T.
Index: cp-tree.h
===================================================================
RCS file: /cvsroot/gcc/gcc/gcc/cp/cp-tree.h,v
retrieving revision 1.1106.2.8
diff -u -r1.1106.2.8 cp-tree.h
--- cp-tree.h	5 Jun 2005 16:46:53 -0000	1.1106.2.8
+++ cp-tree.h	9 Aug 2005 15:46:01 -0000
@@ -484,6 +484,7 @@
     CPTI_UNKNOWN_TYPE,
     CPTI_VTBL_TYPE,
     CPTI_VTBL_PTR_TYPE,
+    CPTI_VTBL_DESCR_TYPE,
     CPTI_STD,
     CPTI_ABI,
     CPTI_CONST_TYPE_INFO_TYPE,
@@ -560,6 +561,7 @@
 #define unknown_type_node		cp_global_trees[CPTI_UNKNOWN_TYPE]
 #define vtbl_type_node			cp_global_trees[CPTI_VTBL_TYPE]
 #define vtbl_ptr_type_node		cp_global_trees[CPTI_VTBL_PTR_TYPE]
+#define vtbl_descr_type_node		cp_global_trees[CPTI_VTBL_DESCR_TYPE]
 #define std_node			cp_global_trees[CPTI_STD]
 #define abi_node                        cp_global_trees[CPTI_ABI]
 #define const_type_info_type_node	cp_global_trees[CPTI_CONST_TYPE_INFO_TYPE]
@@ -1052,6 +1054,7 @@
   tree primary_base;
   VEC (tree_pair_s) *vcall_indices;
   tree vtables;
+  tree vtable_descrs;
   tree typeinfo_var;
   VEC (tree) *vbases;
   binding_table nested_udts;
@@ -1444,6 +1447,10 @@
 #define CLASSTYPE_VTABLES(NODE) \
   (LANG_TYPE_CLASS_CHECK (NODE)->vtables)
 
+/* Vtable descriptions for the class NODE. */
+#define CLASSTYPE_VTABLE_DESCRS(NODE) \
+  (LANG_TYPE_CLASS_CHECK (NODE)->vtable_descrs)
+
 /* The std::type_info variable representing this class, or NULL if no
    such variable has been created.  This field is only set for the
    TYPE_MAIN_VARIANT of the class.  */
@@ -4365,6 +4372,7 @@
 extern tree mangle_typeinfo_for_type            (tree);
 extern tree mangle_typeinfo_string_for_type     (tree);
 extern tree mangle_vtbl_for_type                (tree);
+extern tree mangle_vtbl_descr_for_type          (tree);
 extern tree mangle_vtt_for_type                 (tree);
 extern tree mangle_ctor_vtbl_for_type           (tree, tree);
 extern tree mangle_thunk                        (tree, int, tree, tree);
Index: decl.c
===================================================================
RCS file: /cvsroot/gcc/gcc/gcc/cp/decl.c,v
retrieving revision 1.1371.2.14
diff -u -r1.1371.2.14 decl.c
--- decl.c	3 Jun 2005 16:18:26 -0000	1.1371.2.14
+++ decl.c	9 Aug 2005 15:46:12 -0000
@@ -142,6 +142,7 @@
 
 	tree vtbl_type_node;
 	tree vtbl_ptr_type_node;
+	tree vtbl_descr_type_node;
 
    Namespaces,
 
@@ -2984,6 +2985,24 @@
   layout_type (vtbl_ptr_type_node);
   record_builtin_type (RID_MAX, NULL, vtbl_ptr_type_node);
 
+  vtbl_descr_type_node
+    = build_cplus_array_type (string_type_node, NULL_TREE);
+  fprintf (stderr, "Setup vtbl_descr_type_node %p\n", vtbl_descr_type_node);
+  layout_type (vtbl_descr_type_node);
+  if (!TYPE_SIZE (vtbl_descr_type_node))
+	  fprintf (stderr, "UNFAIR!\n");
+  fprintf (stderr, "Setup vtbl_descr_type_node 2 %p\n", vtbl_descr_type_node);
+  vtbl_descr_type_node = build_qualified_type (vtbl_descr_type_node, TYPE_QUAL_CONST);
+  if (!TYPE_SIZE (vtbl_descr_type_node))
+	  {
+	  fprintf (stderr, "UNFAIR - take 2 %p %p!\n",
+		   TYPE_SIZE (vtbl_type_node),
+		   TYPE_SIZE (vtbl_descr_type_node));
+	  layout_type (vtbl_descr_type_node);
+	  }
+  fprintf (stderr, "Setup vtbl_descr_type_node 3 %p\n", vtbl_descr_type_node);
+  record_builtin_type (RID_MAX, NULL, vtbl_descr_type_node);
+
   push_namespace (get_identifier ("__cxxabiv1"));
   abi_node = current_namespace;
   pop_namespace ();
Index: decl2.c
===================================================================
RCS file: /cvsroot/gcc/gcc/gcc/cp/decl2.c,v
retrieving revision 1.770.2.2
diff -u -r1.770.2.2 decl2.c
--- decl2.c	2 Jun 2005 17:31:01 -0000	1.770.2.2
+++ decl2.c	9 Aug 2005 15:46:16 -0000
@@ -1514,6 +1514,35 @@
 /* If necessary, write out the vtables for the dynamic class CTYPE.
    Returns true if any vtables were emitted.  */
 
+static void
+emit_vt_descrs (tree ctype)
+{
+  tree vtbl;
+
+  for (vtbl = CLASSTYPE_VTABLE_DESCRS (ctype); vtbl; vtbl = TREE_CHAIN (vtbl))
+    {
+      tree content;
+
+//      fprintf (stderr, "Finish TVDecl\n");
+      TREE_PUBLIC (vtbl) = 1;
+      DECL_EXTERNAL (vtbl) = 1;
+      DECL_INTERFACE_KNOWN (vtbl) = 1;
+      import_export_decl (vtbl);
+      mark_used (vtbl);
+
+      if (TREE_TYPE (DECL_INITIAL (vtbl)) == 0)
+	{
+	  tree expr = store_init_value (vtbl, DECL_INITIAL (vtbl));
+	  
+	  /* It had better be all done at compile-time.  */
+	  gcc_assert (!expr);
+	}
+
+      DECL_EXTERNAL (vtbl) = 0;
+      rest_of_decl_compilation (vtbl, 1, 1);
+    }
+}    
+
 static bool
 maybe_emit_vtables (tree ctype)
 {
@@ -1582,6 +1611,8 @@
   /* Since we're writing out the vtable here, also write the debug
      info.  */
   note_debug_info_needed (ctype);
+
+  emit_vt_descrs (ctype);
 
   return true;
 }
Index: init.c
===================================================================
RCS file: /cvsroot/gcc/gcc/gcc/cp/init.c,v
retrieving revision 1.412.2.5
diff -u -r1.412.2.5 init.c
--- init.c	31 May 2005 18:00:46 -0000	1.412.2.5
+++ init.c	9 Aug 2005 15:46:19 -0000
@@ -803,6 +803,25 @@
   /* Assign the vtable to the vptr.  */
   vtbl = convert_force (TREE_TYPE (vtbl_ptr), vtbl, 0);
   finish_expr_stmt (build_modify_expr (vtbl_ptr, NOP_EXPR, vtbl));
+
+#if 1
+  /* Get pointer to information table */
+  /* call vtable constructor */
+  {
+    tree vtbl_init;
+    static tree vtbl_init_fndecl = NULL;
+    if (!vtbl_init_fndecl) {
+	    tree args = build_function_type_list (ptr_type_node, NULL_TREE);
+	    vtbl_init_fndecl = build_decl (FUNCTION_DECL, get_identifier ("__vt_fixup"), args);
+	    TREE_PUBLIC (vtbl_init_fndecl) = 1;
+	    DECL_EXTERNAL (vtbl_init_fndecl) = 1;
+	    pushdecl_top_level (vtbl_init_fndecl);
+    }
+
+    vtbl_init = build_tree_list (NULL_TREE, vtbl);
+    finish_expr_stmt (build_function_call_expr (vtbl_init_fndecl, vtbl_init));
+  }
+#endif
 }
 
 /* If an exception is thrown in a constructor, those base classes already
Index: mangle.c
===================================================================
RCS file: /cvsroot/gcc/gcc/gcc/cp/mangle.c,v
retrieving revision 1.116
diff -u -r1.116 mangle.c
--- mangle.c	24 Feb 2005 21:55:15 -0000	1.116
+++ mangle.c	9 Aug 2005 15:46:22 -0000
@@ -2619,6 +2619,14 @@
   return mangle_special_for_type (type, "TV");
 }
 
+/* Create an identifier for the mangled name of the vtable for TYPE.  */
+
+tree
+mangle_vtbl_descr_for_type (const tree type)
+{
+  return mangle_special_for_type (type, "TVD");
+}
+
 /* Returns an identifier for the mangled name of the VTT for TYPE.  */
 
 tree
