? sc/sc.vpj
Index: sc/inc/dpgroup.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/dpgroup.hxx,v
retrieving revision 1.4
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.4 dpgroup.hxx
--- sc/inc/dpgroup.hxx	8 Sep 2005 17:34:35 -0000	1.4
+++ sc/inc/dpgroup.hxx	12 Sep 2007 16:48:29 -0000
@@ -42,6 +42,9 @@
 #include "dptabdat.hxx"
 #endif
 
+#include <com/sun/star/uno/Sequence.h>
+#include <com/sun/star/uno/Any.h>
+
 class ScDocument;
 class SvNumberFormatter;
 
@@ -212,6 +215,10 @@
     virtual UINT32                  GetNumberFormat(long nDim);
     virtual void                    DisposeData();
     virtual void                    SetEmptyFlags( BOOL bIgnoreEmptyRows, BOOL bRepeatIfEmpty );
+    virtual void                    CreateCacheTable();
+    virtual void                    GetDrillDownData(
+        const ScDPDataFieldCellData& rCellData,
+        ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > >& rTableData);
 
     virtual void                    ResetIterator();
     virtual BOOL                    GetNextRow( const ScDPTableIteratorParam& rParam );
Index: sc/inc/dpobject.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/dpobject.hxx,v
retrieving revision 1.12
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.12 dpobject.hxx
--- sc/inc/dpobject.hxx	27 Jun 2007 13:41:57 -0000	1.12
+++ sc/inc/dpobject.hxx	12 Sep 2007 16:48:29 -0000
@@ -176,6 +176,7 @@
     BOOL                IsDuplicated( long nDim );
     long                GetDimCount();
 	void				GetPositionData( ScDPPositionData& rData, const ScAddress& rPos );
+    void                GetDataFieldCellData(ScDPDataFieldCellData& rData, const ScAddress& rPos);
 	long				GetHeaderDim( const ScAddress& rPos, USHORT& rOrient );
 	BOOL				GetHeaderDrag( const ScAddress& rPos, BOOL bMouseLeft, BOOL bMouseTop,
 										long nDragDim,
Index: sc/inc/dpoutput.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/dpoutput.hxx,v
retrieving revision 1.8
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.8 dpoutput.hxx
--- sc/inc/dpoutput.hxx	27 Jun 2007 13:42:13 -0000	1.8
+++ sc/inc/dpoutput.hxx	12 Sep 2007 16:48:29 -0000
@@ -69,8 +69,20 @@
 
 struct ScDPOutLevelData;
 
+/** Holds information on a particular cell within the data field of the data
+    pilot output. */
+struct ScDPDataFieldCellData
+{
+    struct Filter
+    {
+        String maFieldName;
+        sal_Int32 mnFieldIndex;
+        String maMatchValue;
+    };
 
-
+    /** First, I need an array of  */
+    ::std::vector< ::ScDPDataFieldCellData::Filter > maFilterCriteria;
+};
 
 struct ScDPPositionData
 {
@@ -166,6 +178,7 @@
 	BOOL			HasError();			// range overflow or exception from source
 
 	void			GetPositionData( ScDPPositionData& rData, const ScAddress& rPos );
+    void            GetDataFieldCellData(ScDPDataFieldCellData& rData, const ScAddress& rPos);
     BOOL            GetPivotData( ScDPGetPivotDataField& rTarget, /* returns result */
                                   const std::vector< ScDPGetPivotDataField >& rFilters );
 	long			GetHeaderDim( const ScAddress& rPos, USHORT& rOrient );
Index: sc/inc/dpsdbtab.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/dpsdbtab.hxx,v
retrieving revision 1.3
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.3 dpsdbtab.hxx
--- sc/inc/dpsdbtab.hxx	8 Sep 2005 17:35:48 -0000	1.3
+++ sc/inc/dpsdbtab.hxx	12 Sep 2007 16:48:29 -0000
@@ -46,6 +46,9 @@
 	}
 }}}
 
+#include <com/sun/star/uno/Sequence.h>
+#include <com/sun/star/uno/Any.h>
+
 #ifndef SC_DPTABDAT_HXX
 #include "dptabdat.hxx"
 #endif
@@ -93,6 +96,10 @@
 	virtual BOOL					IsDateDimension(long nDim);
 	virtual void					DisposeData();
 	virtual void					SetEmptyFlags( BOOL bIgnoreEmptyRows, BOOL bRepeatIfEmpty );
+    virtual void                    CreateCacheTable();
+    virtual void                    GetDrillDownData(
+        const ScDPDataFieldCellData& rCellData,
+        ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > >& rTableData);
 
 	virtual void					ResetIterator();
 	virtual BOOL					GetNextRow( const ScDPTableIteratorParam& rParam );
Index: sc/inc/dpshttab.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/dpshttab.hxx,v
retrieving revision 1.4
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.4 dpshttab.hxx
--- sc/inc/dpshttab.hxx	8 Sep 2005 17:36:03 -0000	1.4
+++ sc/inc/dpshttab.hxx	12 Sep 2007 16:48:29 -0000
@@ -48,6 +48,8 @@
 #include "address.hxx"
 #endif
 
+#include <com/sun/star/uno/Sequence.h>
+#include <com/sun/star/uno/Any.h>
 
 // --------------------------------------------------------------------
 //
@@ -84,6 +86,10 @@
 	virtual UINT32					GetNumberFormat(long nDim);
 	virtual void					DisposeData();
 	virtual void					SetEmptyFlags( BOOL bIgnoreEmptyRows, BOOL bRepeatIfEmpty );
+    virtual void                    CreateCacheTable();
+    virtual void                    GetDrillDownData(
+        const ScDPDataFieldCellData& rCellData,
+        ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > >& rData);
 
 	virtual void					ResetIterator();
 	virtual BOOL					GetNextRow( const ScDPTableIteratorParam& rParam );
Index: sc/inc/dptabdat.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/dptabdat.hxx,v
retrieving revision 1.6
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.6 dptabdat.hxx
--- sc/inc/dptabdat.hxx	25 Jan 2007 11:03:15 -0000	1.6
+++ sc/inc/dptabdat.hxx	12 Sep 2007 16:48:30 -0000
@@ -40,10 +40,17 @@
 #include "address.hxx"
 #endif
 
+#include "dpoutput.hxx"
+
 #ifndef _STRING_HXX
 #include <tools/string.hxx>
 #endif
 
+#include <com/sun/star/uno/Sequence.h>
+#include <com/sun/star/uno/Any.h>
+
+#include <stdio.h>
+
 class TypedStrCollection;
 
 // -----------------------------------------------------------------------
@@ -155,6 +162,11 @@
 	virtual void					DisposeData() = 0;
 	virtual void					SetEmptyFlags( BOOL bIgnoreEmptyRows, BOOL bRepeatIfEmpty ) = 0;
 
+    virtual void                    CreateCacheTable() = 0;
+    virtual void                    GetDrillDownData(
+        const ScDPDataFieldCellData& rCellData,
+        ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > >& rTableData) = 0;
+
 	virtual void					ResetIterator() = 0;
 	virtual BOOL					GetNextRow( const ScDPTableIteratorParam& rParam ) = 0;
 
Index: sc/source/core/data/dpgroup.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/dpgroup.cxx,v
retrieving revision 1.7
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.7 dpgroup.cxx
--- sc/source/core/data/dpgroup.cxx	27 Feb 2007 12:03:31 -0000	1.7
+++ sc/source/core/data/dpgroup.cxx	12 Sep 2007 16:48:30 -0000
@@ -56,6 +56,9 @@
 #include <com/sun/star/sheet/DataPilotFieldGroupBy.hpp>
 #endif
 
+using ::com::sun::star::uno::Sequence;
+using ::com::sun::star::uno::Any;
+
 #define D_TIMEFACTOR              86400.0
 
 const USHORT SC_DP_LEAPYEAR = 1648;     // arbitrary leap year for date calculations
@@ -972,6 +975,14 @@
     pSourceData->SetEmptyFlags( bIgnoreEmptyRows, bRepeatIfEmpty );
 }
 
+void ScDPGroupTableData::CreateCacheTable()
+{
+}
+
+void ScDPGroupTableData::GetDrillDownData(const ScDPDataFieldCellData& rCellData, Sequence< Sequence<Any> >& rData)
+{
+}
+
 void ScDPGroupTableData::ResetIterator()
 {
     pSourceData->ResetIterator();
Index: sc/source/core/data/dpobject.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/dpobject.cxx,v
retrieving revision 1.21
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.21 dpobject.cxx
--- sc/source/core/data/dpobject.cxx	27 Jun 2007 13:43:19 -0000	1.21
+++ sc/source/core/data/dpobject.cxx	12 Sep 2007 16:48:30 -0000
@@ -803,6 +803,12 @@
 	pOutput->GetPositionData( rData, rPos );
 }
 
+void ScDPObject::GetDataFieldCellData(ScDPDataFieldCellData& rData, const ScAddress& rPos)
+{
+    CreateOutput();
+    pOutput->GetDataFieldCellData(rData, rPos);
+}
+
 // Returns TRUE on success and stores the result in rTarget
 BOOL ScDPObject::GetPivotData( ScDPGetPivotDataField& rTarget,
                                const std::vector< ScDPGetPivotDataField >& rFilters )
Index: sc/source/core/data/dpoutput.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/dpoutput.cxx,v
retrieving revision 1.15
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.15 dpoutput.cxx
--- sc/source/core/data/dpoutput.cxx	27 Jun 2007 13:43:33 -0000	1.15
+++ sc/source/core/data/dpoutput.cxx	12 Sep 2007 16:48:31 -0000
@@ -36,7 +36,7 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_sc.hxx"
 
-
+#include <stdio.h>
 
 // INCLUDE ---------------------------------------------------------------
 
@@ -73,7 +73,10 @@
 #include <com/sun/star/sheet/GeneralFunction.hpp>
 #include <com/sun/star/container/XNamed.hpp>
 
+#include <vector>
+
 using namespace com::sun::star;
+using ::std::vector;
 
 // -----------------------------------------------------------------------
 
@@ -995,6 +998,80 @@
 	}
 }
 
+void ScDPOutput::GetDataFieldCellData(ScDPDataFieldCellData& rData, const ScAddress& rPos)
+{
+	SCCOL nCol = rPos.Col();
+	SCROW nRow = rPos.Row();
+	SCTAB nTab = rPos.Tab();
+	if ( nTab != aStartPos.Tab() )
+		return;										// wrong sheet
+
+	CalcSizes();
+
+    fprintf(stdout, "ScDPOutput::GetDataFieldCellData: table (%d, %ld) - (%d, %ld); data start (%d, %ld)\n",
+            nTabStartCol, nTabStartRow, nTabEndCol, nTabEndRow, nDataStartCol, nDataStartRow);fflush(stdout);
+
+    // test for data area.
+    if (nCol < nDataStartCol || nCol > nTabEndCol || nRow < nDataStartRow || nRow > nTabEndRow)
+        // Cell is outside the data field area.
+        return;
+
+    // column fields
+    for (SCCOL nColField = 0; nColField < nColFieldCount; ++nColField)
+    {
+        ScDPDataFieldCellData::Filter aFilter;
+        aFilter.maFieldName = pColFields[nColField].aCaption;
+
+        const uno::Sequence<sheet::MemberResult> rSequence = pColFields[nColField].aResult;
+        long nThisColCount = rSequence.getLength();
+        const sheet::MemberResult* pArray = rSequence.getConstArray();
+
+        DBG_ASSERT(nDataStartCol + nThisColCount - 1 == nTabEndCol, "ScDPOutput::GetDataFieldCellData: error in geometric assumption");
+
+        long nItem = nCol - nDataStartCol;
+                //	get origin of "continue" fields
+        while ( nItem > 0 && (pArray[nItem].Flags & sheet::MemberResultFlags::CONTINUE) )
+            --nItem;
+
+        aFilter.maMatchValue = pArray[nItem].Name;
+        if (aFilter.maMatchValue.Len() > 0 && !aFilter.maMatchValue.EqualsAscii("Total"))
+            rData.maFilterCriteria.push_back(aFilter);
+    }
+
+    // row fields
+    for (SCROW nRowField = 0; nRowField < nRowFieldCount; ++nRowField)
+    {
+        ScDPDataFieldCellData::Filter aFilter;
+        aFilter.maFieldName = pRowFields[nRowField].aCaption;
+
+        const uno::Sequence<sheet::MemberResult> rSequence = pRowFields[nRowField].aResult;
+        long nThisRowCount = rSequence.getLength();
+        const sheet::MemberResult* pArray = rSequence.getConstArray();
+
+        DBG_ASSERT(nDataStartRow + nThisRowCount - 1 == nTabEndRow, "ScDPOutput::GetDataFieldCellData: error in geometric assumption");
+
+        long nItem = nRow - nDataStartRow;
+			//	get origin of "continue" fields
+        while ( nItem > 0 && (pArray[nItem].Flags & sheet::MemberResultFlags::CONTINUE) )
+            --nItem;
+
+        aFilter.maMatchValue = pArray[nItem].Name;
+        if (aFilter.maMatchValue.Len() > 0 && !aFilter.maMatchValue.EqualsAscii("Total"))
+            rData.maFilterCriteria.push_back(aFilter);
+    }
+
+    // Just make sure I got it right....
+    vector<ScDPDataFieldCellData::Filter>::const_iterator itr = rData.maFilterCriteria.begin(), 
+        itrEnd = rData.maFilterCriteria.end();
+    for (; itr != itrEnd; ++itr)
+    {
+        fprintf(stdout, "ScDPOutput::GetDataFieldCellData: field = '%s'; value = '%s'\n",
+                OUStringToOString(rtl::OUString(itr->maFieldName), RTL_TEXTENCODING_UTF8).getStr(),
+                OUStringToOString(rtl::OUString(itr->maMatchValue), RTL_TEXTENCODING_UTF8).getStr());
+        fflush(stdout);
+    }
+}
+
 //
 //  helper functions for ScDPOutput::GetPivotData
 //
Index: sc/source/core/data/dpsdbtab.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/dpsdbtab.cxx,v
retrieving revision 1.12
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.12 dpsdbtab.cxx
--- sc/source/core/data/dpsdbtab.cxx	27 Feb 2007 12:04:37 -0000	1.12
+++ sc/source/core/data/dpsdbtab.cxx	12 Sep 2007 16:48:31 -0000
@@ -62,6 +62,8 @@
 #include "globstr.hrc"
 
 using namespace com::sun::star;
+using ::com::sun::star::uno::Sequence;
+using ::com::sun::star::uno::Any;
 
 #define SC_SERVICE_ROWSET			"com.sun.star.sdb.RowSet"
 #define SC_SERVICE_INTHANDLER		"com.sun.star.sdb.InteractionHandler"
@@ -500,6 +502,14 @@
 	//!	disable flags
 }
 
+void ScDatabaseDPData::CreateCacheTable()
+{
+}
+
+void ScDatabaseDPData::GetDrillDownData(const ScDPDataFieldCellData& rCellData, Sequence< Sequence<Any> >& rData)
+{
+}
+
 void ScDatabaseDPData::ResetIterator()
 {
 	try
Index: sc/source/core/data/dpshttab.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/dpshttab.cxx,v
retrieving revision 1.9
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.9 dpshttab.cxx
--- sc/source/core/data/dpshttab.cxx	27 Feb 2007 12:04:49 -0000	1.9
+++ sc/source/core/data/dpshttab.cxx	12 Sep 2007 16:48:31 -0000
@@ -36,7 +36,7 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_sc.hxx"
 
-
+#include <stdio.h>
 
 // INCLUDE --------------------------------------------------------------
 
@@ -47,8 +47,15 @@
 #include "document.hxx"
 #include "collect.hxx"
 #include "cell.hxx"
+#include "rangeseq.hxx"
 #include "globstr.hrc"
 
+#include <vector>
+
+using ::com::sun::star::uno::Any;
+using ::com::sun::star::uno::Sequence;
+using ::std::vector;
+
 // -----------------------------------------------------------------------
 
 class ScSheetDPData_Impl
@@ -57,13 +64,15 @@
 	ScDocument*		pDoc;
 	ScRange			aRange;
 	ScQueryParam	aQuery;
-	long			nColCount;
+	long			nColCount;          // number of columns
 	BOOL			bIgnoreEmptyRows;
 	BOOL			bRepeatIfEmpty;
-	TypedStrCollection**	ppStrings;
+	TypedStrCollection**	ppStrings;  // column header ?
 	BOOL*			pDateDim;
 	SCROW			nNextRow;		// for iterator, within range
 
+    Sequence< Sequence<Any> > aCacheTable;
+
 	ScSheetDPData_Impl() {}
 };
 
@@ -295,6 +304,141 @@
 	pImpl->bRepeatIfEmpty   = bRepeatIfEmpty;
 }
 
+void ScSheetDPData::CreateCacheTable()
+{
+    sal_Int32 nCacheTableSize = pImpl->aCacheTable.getLength();
+    fprintf(stdout, "ScSheetDPData::CreateCacheTable: cache table row size = %ld\n", nCacheTableSize);fflush(stdout);
+    if (pImpl->aCacheTable.getLength() > 0)
+        // source data already cached.
+        return;
+
+    fprintf(stdout, "ScSheetDPData::CreateCacheTable: *** ---------- ***\n");fflush(stdout);
+    const ScRange& rRange = pImpl->aRange;
+    fprintf(stdout, "ScSheetDPData::CreateCacheTable: source range: sheet %d; (%d, %ld) - (%d, %ld)\n",
+            rRange.aStart.Tab(), rRange.aStart.Col(), rRange.aStart.Row(), rRange.aEnd.Col(), rRange.aEnd.Row());fflush(stdout);
+
+    // Scan and store the data from the source range.
+    Any any;
+    ScRangeToSequence::FillMixedArray(any, pImpl->pDoc, pImpl->aRange, true);
+    any >>= pImpl->aCacheTable;
+
+#if 0    
+    sal_Int32 nRowSize = pImpl->aCacheTable.getLength();
+    for (sal_Int32 nRow = 0; nRow < nRowSize; ++nRow)
+    {
+        const Sequence<Any>& rRow = pImpl->aCacheTable[nRow];
+        sal_Int32 nColSize = rRow.getLength();
+        fprintf(stdout, "%ld\t", nRow);
+        for (sal_Int32 nCol = 0; nCol < nColSize; ++nCol)
+        {
+            rtl::OUString aHeaderLabel;
+            double fVal;
+            if (rRow[nCol] >>= aHeaderLabel)
+            {
+                fprintf(stdout, "%s\t", OUStringToOString(aHeaderLabel, RTL_TEXTENCODING_UTF8).getStr());
+            }
+            else if (rRow[nCol] >>= fVal)
+            {
+                fprintf(stdout, "%g\t", fVal);
+            }
+        }
+        fprintf(stdout, "\n");
+    }
+#endif    
+
+    fprintf(stdout, "ScSheetDPData::CreateCacheTable: *** ---------- ***\n");fflush(stdout);
+}
+
+void ScSheetDPData::GetDrillDownData(const ScDPDataFieldCellData& rCellData,
+                                     Sequence< Sequence<Any> >& rData)
+{
+    sal_Int32 nRowSize = pImpl->aCacheTable.getLength();
+    if (!nRowSize)
+        return;
+
+    // Get the column headers.
+    const Sequence<Any>& rHeader = pImpl->aCacheTable[0];
+    sal_Int32 nHeaderSize = rHeader.getLength();
+    vector<ScDPDataFieldCellData::Filter> aFilters;
+    for (sal_Int32 i = 0; i < nHeaderSize; ++i)
+    {
+        rtl::OUString aHeaderLabel;
+        if (rHeader[i] >>= aHeaderLabel)
+        {
+            vector<ScDPDataFieldCellData::Filter>::const_iterator 
+                itr = rCellData.maFilterCriteria.begin(),
+                itrEnd = rCellData.maFilterCriteria.end();
+            for (; itr != itrEnd; ++itr)
+            {
+                if ( aHeaderLabel.equals(rtl::OUString(itr->maFieldName)) )
+                {
+                    ScDPDataFieldCellData::Filter aFilter;
+                    aFilter.mnFieldIndex = i;
+                    aFilter.maMatchValue = itr->maMatchValue;
+                    aFilters.push_back(aFilter);
+                    break;
+                }
+            }
+        }
+    }
+
+#if 0    
+    vector<ScDPDataFieldCellData::Filter>::const_iterator itr, itrEnd = aFilters.end();
+    for (itr = aFilters.begin(); itr != itrEnd; ++itr)
+    {
+        fprintf(stdout, "ScSheetDPData::GetDrillDownData: %ld\t%s\n",
+                itr->mnFieldIndex, OUStringToOString(rtl::OUString(itr->maMatchValue), RTL_TEXTENCODING_UTF8).getStr());fflush(stdout);
+    }
+#endif    
+
+    vector< Sequence<Any> > aNewRowsVec;
+    for (sal_Int32 i = 1; i < nRowSize; ++i)
+    {
+        bool bRetainRow = true;
+
+        // Check whether this row should be filtered out or not.
+        const Sequence<Any>& rRow = pImpl->aCacheTable[i];
+        sal_Int32 nColSize = rRow.getLength();
+        vector<ScDPDataFieldCellData::Filter>::const_iterator itr, itrEnd = aFilters.end();
+        for (itr = aFilters.begin(); itr != itrEnd; ++itr)
+        {
+            if (itr->mnFieldIndex >= nColSize)
+            {
+                // specified field is outside the source data columns.
+                bRetainRow = false;
+                break;
+            }
+
+            rtl::OUString aStr;
+            if ( !(rRow[itr->mnFieldIndex] >>= aStr) )
+            {
+                // The value is not a string.
+                bRetainRow = false;
+                break;
+            }
+
+            if ( !aStr.equals(rtl::OUString(itr->maMatchValue)) )
+            {
+                // The value does not match.
+                bRetainRow = false;
+                break;
+            }
+        }
+
+        if (bRetainRow)
+            aNewRowsVec.push_back(rRow);
+    }
+
+    sal_Int32 n = aNewRowsVec.size();
+    Sequence< Sequence<Any> > aNewRows(n+1);
+    aNewRows[0] = rHeader;
+    for (sal_Int32 i = 0; i < n; ++i)
+        aNewRows[i+1] = aNewRowsVec[i];
+
+    // All good.  Write the new data to the reference.
+    rData = aNewRows;
+}
+
 void ScSheetDPData::ResetIterator()
 {
 	pImpl->nNextRow = pImpl->aRange.aStart.Row() + 1;
Index: sc/source/core/data/dptabdat.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/dptabdat.cxx,v
retrieving revision 1.12
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.12 dptabdat.cxx
--- sc/source/core/data/dptabdat.cxx	27 Feb 2007 12:05:02 -0000	1.12
+++ sc/source/core/data/dptabdat.cxx	12 Sep 2007 16:48:31 -0000
@@ -36,7 +36,7 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_sc.hxx"
 
-
+#include <stdio.h>
 
 // INCLUDE ---------------------------------------------------------------
 
Index: sc/source/core/data/dptabsrc.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/dptabsrc.cxx,v
retrieving revision 1.19
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.19 dptabsrc.cxx
--- sc/source/core/data/dptabsrc.cxx	5 Mar 2007 14:40:18 -0000	1.19
+++ sc/source/core/data/dptabsrc.cxx	12 Sep 2007 16:48:31 -0000
@@ -573,6 +573,7 @@
 {
 	if ( !pResData )
 	{
+        fprintf(stdout, "ScDPSource::CreateRes_Impl: constructing result data...\n");fflush(stdout);
 		USHORT nDataOrient = GetDataLayoutOrientation();
         if ( nDataDimCount > 1 && ( nDataOrient != sheet::DataPilotFieldOrientation_COLUMN &&
                                     nDataOrient != sheet::DataPilotFieldOrientation_ROW ) )
@@ -795,6 +796,7 @@
 						nDataDimCount,   nDataSrcCols,   aValues );
 
 			pData->ResetIterator();
+            pData->CreateCacheTable();
 			while ( pData->GetNextRow( aIterPar ) )
 			{
 				// test page fields ----------------------------
Index: sc/source/ui/view/gridwin.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/gridwin.cxx,v
retrieving revision 1.83
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.83 gridwin.cxx
--- sc/source/ui/view/gridwin.cxx	21 Aug 2007 12:27:31 -0000	1.83
+++ sc/source/ui/view/gridwin.cxx	12 Sep 2007 16:48:32 -0000
@@ -36,7 +36,7 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_sc.hxx"
 
-
+#include <stdio.h>
 
 //------------------------------------------------------------------
 
@@ -96,6 +96,9 @@
 #include <com/sun/star/awt/KeyModifier.hpp>
 #include <com/sun/star/awt/MouseButton.hpp>
 
+#include <com/sun/star/uno/Sequence.h>
+#include <com/sun/star/uno/Any.h>
+
 #include "gridwin.hxx"
 #include "tabvwsh.hxx"
 #include "docsh.hxx"
@@ -140,6 +143,8 @@
 #include "compiler.hxx"
 #include "editable.hxx"
 #include "fillinfo.hxx"
+#include "dptabdat.hxx"
+#include "dptabsrc.hxx"
 
 // #114409#
 #ifndef _SV_SALBTYPE_HXX
@@ -162,6 +167,10 @@
 #endif
 
 using namespace com::sun::star;
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::uno::UNO_QUERY;
+using ::com::sun::star::uno::Sequence;
+using ::com::sun::star::uno::Any;
 
 const BYTE SC_NESTEDBUTTON_NONE = 0;
 const BYTE SC_NESTEDBUTTON_DOWN = 1;
@@ -2178,11 +2187,16 @@
 		Point aPos = rMEvt.GetPosPixel();
         SCsCOL nPosX;
         SCsROW nPosY;
+        SCTAB nTab = pViewData->GetTabNo();
         pViewData->GetPosFromPixel( aPos.X(), aPos.Y(), eWhich, nPosX, nPosY );
-		ScDPObject*	pDPObj	= pDoc->GetDPAtCursor( nPosX, nPosY, pViewData->GetTabNo() );
+		ScDPObject*	pDPObj	= pDoc->GetDPAtCursor( nPosX, nPosY, nTab );
 		if ( pDPObj && pDPObj->GetSaveData()->GetDrillDown() )
 		{
-			ScAddress aCellPos( nPosX, nPosY, pViewData->GetTabNo() );
+            fprintf(stdout, "ScGridWindow::MouseButtonUp: *---------- pivot table hit (name = '%s'; tag = '%s') ----------*\n",
+                    OUStringToOString(rtl::OUString(pDPObj->GetName()), RTL_TEXTENCODING_UTF8).getStr(),
+                    OUStringToOString(rtl::OUString(pDPObj->GetTag()), RTL_TEXTENCODING_UTF8).getStr());fflush(stdout);
+
+			ScAddress aCellPos( nPosX, nPosY, nTab );
 			ScDPPositionData aData;
 			pDPObj->GetPositionData( aData, aCellPos );
 
@@ -2206,7 +2220,40 @@
                 }
 			}
 			else
-				Sound::Beep();		// nothing to expand/collapse
+            {
+                // Check if the data area is double-clicked.
+                ScDPDataFieldCellData aDataFieldData;
+                pDPObj->GetDataFieldCellData(aDataFieldData, aCellPos);
+                Reference<sheet::XDimensionsSupplier> xSource = pDPObj->GetSource();
+
+                // HACK!
+                ScDPSource* pSource = static_cast<ScDPSource*>(xSource.get());
+                ScDPTableData* pData = pSource->GetData();
+                Sequence< Sequence<Any> > aArrayData;
+                pData->GetDrillDownData(aDataFieldData, aArrayData);
+                ScTabViewShell* pViewShell = pViewData->GetViewShell();
+                String aNewTabName;
+                pViewData->GetDocument()->CreateValidTabName(aNewTabName);
+                if ( pViewShell->InsertTable(aNewTabName, nTab+1, false) )
+                {
+                    sal_Int32 nRowSize = aArrayData.getLength();
+                    fprintf(stdout, "ScGridWindow::MouseButtonUp: row size = %ld\n", nRowSize);fflush(stdout);
+                    for (sal_Int32 nRow = 0; nRow < nRowSize; ++nRow)
+                    {
+                        const Sequence<Any>& rRow = aArrayData[nRow];
+                        sal_Int32 nColSize = rRow.getLength();
+                        for (sal_Int32 nCol = 0; nCol < nColSize; ++nCol)
+                        {
+                            rtl::OUString aStr;
+                            double fVal;
+                            if (rRow[nCol] >>= aStr)
+                                pDoc->SetString(nCol, nRow, nTab+1, String(aStr));
+                            else if (rRow[nCol] >>= fVal)
+                                pDoc->SetValue(nCol, nRow, nTab+1, fVal);
+                        }
+                    }
+                }
+            }
 
 			return;
 		}
