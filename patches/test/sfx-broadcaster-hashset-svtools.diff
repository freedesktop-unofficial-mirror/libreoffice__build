diff --git a/svtools/inc/svtools/brdcst.hxx b/svtools/inc/svtools/brdcst.hxx
index 6734f63..105f69d 100644
--- svtools/inc/svtools/brdcst.hxx
+++ svtools/inc/svtools/brdcst.hxx
@@ -31,35 +31,25 @@
 #define _SFXBRDCST_HXX
 
 #include "svtools/svldllapi.h"
+#include "svtools/svarray.hxx"
 #include <tools/rtti.hxx>
-#include <svtools/svarray.hxx>
+
+#include <memory>
 
 class SfxListener;
 class SfxHint;
 
-#ifndef _SFX_BRDCST_CXX
-typedef SvPtrarr SfxListenerArr_Impl;
-#endif
-
-#define SFX_FORWARD( rBC, rBCT, rHint, rHintT ) \
-		Forward( rBC, rHint )
-
-//-------------------------------------------------------------------------
+struct SfxBroadcasterImpl;
 
 class SVL_DLLPUBLIC SfxBroadcaster
 {
-friend class SfxListener;
-
-	SfxListenerArr_Impl 	aListeners;
+    ::std::auto_ptr<SfxBroadcasterImpl> mpImpl;
 
 private:
-	BOOL		 AddListener( SfxListener& rListener );
-	void					RemoveListener( SfxListener& rListener );
 	const SfxBroadcaster&	operator=(const SfxBroadcaster &); // verboten
 
 protected:
-	void					SFX_FORWARD(SfxBroadcaster& rBC, const TypeId& rBCType,
-										const SfxHint& rHint, const TypeId& rHintType);
+	void					Forward(SfxBroadcaster& rBC, const SfxHint& rHint);
 	virtual void			ListenersGone();
 
 public:
@@ -73,10 +63,11 @@ public:
 	void					BroadcastDelayed( const SfxHint& rHint );
 	void					BroadcastInIdle( const SfxHint& rHint );
 
+	BOOL		            AddListener( SfxListener& rListener );
+	void					RemoveListener( SfxListener& rListener );
 	BOOL					HasListeners() const;
-	USHORT					GetListenerCount() const { return aListeners.Count(); }
-	SfxListener*			GetListener( USHORT nNo ) const
-							{ return (SfxListener*) aListeners[nNo]; }
+	size_t					GetListenerCount() const;
+	SfxListener*			GetListener( size_t nNo ) const;
 };
 
 #endif
diff --git a/svtools/inc/svtools/lstner.hxx b/svtools/inc/svtools/lstner.hxx
index e60c028..47cdbc5 100644
--- svtools/inc/svtools/lstner.hxx
+++ svtools/inc/svtools/lstner.hxx
@@ -31,24 +31,19 @@
 #define _SFXLSTNER_HXX
 
 #include "svtools/svldllapi.h"
+#include "svtools/svarray.hxx"
 #include <tools/rtti.hxx>
-#include <svtools/svarray.hxx>
+
+#include <memory>
 
 class SfxBroadcaster;
 class SfxHint;
 
-#ifndef _SFX_LSTNER_CXX
-typedef SvPtrarr SfxBroadcasterArr_Impl;
-#endif
-
-#define SFX_NOTIFY( rBC, rBCT, rHint, rHintT ) \
-		Notify( rBC, rHint )
-
-//-------------------------------------------------------------------------
+struct SfxListenerImpl;
 
 class SVL_DLLPUBLIC SfxListener
 {
-	SfxBroadcasterArr_Impl aBCs;
+    ::std::auto_ptr<SfxListenerImpl> mpImpl;
 
 private:
 	const SfxListener&	operator=(const SfxListener &); // n.i., ist verboten
@@ -62,14 +57,12 @@ public:
 
 	BOOL				StartListening( SfxBroadcaster& rBroadcaster, BOOL bPreventDups = FALSE );
 	BOOL				EndListening( SfxBroadcaster& rBroadcaster, BOOL bAllDups = FALSE );
-	void				EndListening( USHORT nNo );
+	void				EndListening( size_t nNo );
 	void				EndListeningAll();
 	BOOL				IsListening( SfxBroadcaster& rBroadcaster ) const;
 
-	USHORT				GetBroadcasterCount() const
-						{ return aBCs.Count(); }
-	SfxBroadcaster* 	GetBroadcasterJOE( USHORT nNo ) const
-						{ return (SfxBroadcaster*) aBCs.GetObject(nNo); }
+	size_t				GetBroadcasterCount() const;
+	SfxBroadcaster* 	GetBroadcasterJOE( size_t nNo ) const;
 
 	virtual void		Notify( SfxBroadcaster& rBC, const SfxHint& rHint );
 
diff --git a/svtools/source/items/style.cxx b/svtools/source/items/style.cxx
index cc3b525..519f5fe 100644
--- svtools/source/items/style.cxx
+++ svtools/source/items/style.cxx
@@ -1286,7 +1286,7 @@ BOOL SfxStyleSheet::SetParent( const XubString& rName )
 void SfxStyleSheet::SFX_NOTIFY(SfxBroadcaster& rBC, const TypeId& rBCType,
 						   const SfxHint& rHint, const TypeId& rHintType )
 {
-	SFX_FORWARD(rBC, rBCType, rHint, rHintType);
+    Forward(rBC, rHint);
 }
 
 //////////////////////// SfxStyleSheetPool ///////////////////////////////
diff --git a/svtools/source/notify/brdcst.cxx b/svtools/source/notify/brdcst.cxx
index 4e7f5c5..c0f3291 100644
--- svtools/source/notify/brdcst.cxx
+++ svtools/source/notify/brdcst.cxx
@@ -39,17 +39,111 @@
 #include <svtools/smplhint.hxx>
 #include <svtools/lstner.hxx>
 
-SV_DECL_PTRARR( SfxListenerArr_Impl, SfxListener*, 0, 2 )
-
-#define _SFX_BRDCST_CXX
 #include <svtools/brdcst.hxx>
 
+#include <algorithm>
+#include <hash_set>
+
+using ::std::find;
+using ::std::unary_function;
+
 //====================================================================
 DBG_NAME(SfxBroadcaster)
 TYPEINIT0(SfxBroadcaster);
 
 //====================================================================
 
+struct SfxListenerHash
+{
+    size_t operator()(SfxListener* p) const
+    {
+        return reinterpret_cast<size_t>(p);
+    }
+};
+
+typedef ::std::hash_set<SfxListener*, SfxListenerHash> ListenerArray;
+
+struct SfxBroadcasterImpl
+{
+	ListenerArray   maListeners;
+
+    SfxBroadcasterImpl() {}
+
+    explicit SfxBroadcasterImpl(const SfxBroadcasterImpl& r) :
+        maListeners(r.maListeners)
+    {
+    }
+};
+
+// ----------------------------------------------------------------------------
+
+class NotifyListenerFunc : public unary_function<SfxListener*, void>
+{
+public:
+    explicit NotifyListenerFunc(const SfxHint& rHint, SfxBroadcaster& rParent) :
+        mrHint(rHint),
+        mrParentBC(rParent)
+    {
+    }
+
+    void operator()(SfxListener* pListener)
+    {
+        if (pListener)
+            pListener->Notify(mrParentBC, mrHint);
+    }
+private:
+    NotifyListenerFunc(); // disable
+
+private:
+    const SfxHint& mrHint;
+    SfxBroadcaster& mrParentBC;
+};
+
+// ----------------------------------------------------------------------------
+
+class UnregisterListenerFunc : public unary_function<SfxListener*, void>
+{
+public:
+    explicit UnregisterListenerFunc(SfxBroadcaster& rParent) :
+        mrParentBC(rParent)
+    {
+    }
+
+    void operator()(SfxListener* pListener)
+    {
+        if (pListener)
+            pListener->RemoveBroadcaster_Impl(mrParentBC);
+    }
+private:
+    UnregisterListenerFunc(); // disable
+
+private:
+    SfxBroadcaster& mrParentBC;
+};
+
+// ----------------------------------------------------------------------------
+
+class RegisterListenerFunc : public ::std::unary_function<SfxListener*, void>
+{
+public:
+    explicit RegisterListenerFunc(SfxBroadcaster& rParent) :
+        mrParentBC(rParent)
+    {
+    }
+
+    void operator()(SfxListener* pListener)
+    {
+        if (pListener)
+            pListener->StartListening(mrParentBC);
+    }
+
+private:
+    RegisterListenerFunc(); // disabled
+
+private:
+    SfxBroadcaster& mrParentBC;
+};
+
 //====================================================================
 // broadcast immediately
 
@@ -59,25 +153,28 @@ void SfxBroadcaster::Broadcast( const SfxHint &rHint )
 	DBG_CHKTHIS(SfxBroadcaster, 0);
 
 	// is anybody to notify?
-	if ( aListeners.Count() /*! || aGlobListeners.Count() */ )
+	if ( !mpImpl->maListeners.empty() /*! || aGlobListeners.Count() */ )
 	{
-        #if 0
-		// determine the type only once, because of its expensiveness
-		const TypeId& rBCType = Type();
-		const TypeId& rHintType = rHint.Type();
-        #endif
-
 		// notify all registered listeners exactly once
-		for ( USHORT n = 0; n < aListeners.Count(); ++n )
-		{
-			SfxListener* pListener = aListeners[n];
-			if ( pListener )
-                #if 0
-				pListener->SFX_NOTIFY( *this, rBCType, rHint, rHintType );
-                #else
-				pListener->Notify( *this, rHint );
-                #endif
-		}
+#if 1
+        ListenerArray::iterator itrEnd = mpImpl->maListeners.end();
+        for (ListenerArray::iterator itr = mpImpl->maListeners.begin(); itr != itrEnd; ++itr)
+        {
+            SfxListener* pLis = *itr;
+            unsigned int nFoo = reinterpret_cast<unsigned int>(pLis);
+            fprintf(stdout, "SfxBroadcaster::Broadcast:   notifying listener = %p (%d)\n", pLis, nFoo);fflush(stdout);
+            if (pLis && nFoo > 20)
+            {
+                fprintf(stdout, "SfxBroadcaster::Broadcast:   notifying\n");
+                pLis->Notify(*this, rHint);
+            }
+            else
+                fprintf(stdout, "SfxBroadcaster::Broadcast:   not\n");
+        }
+#else
+        NotifyListenerFunc f(rHint, *this);
+        for_each(mpImpl->maListeners.begin(), mpImpl->maListeners.end(), f);
+#endif
 	}
 }
 
@@ -111,19 +208,16 @@ SfxBroadcaster::~SfxBroadcaster()
 	Broadcast( SfxSimpleHint(SFX_HINT_DYING) );
 
 	// remove all still registered listeners
-	for ( USHORT nPos = 0; nPos < aListeners.Count(); ++nPos )
-	{
-		SfxListener *pListener = aListeners[nPos];
-		if ( pListener )
-			pListener->RemoveBroadcaster_Impl(*this);
-	}
+    UnregisterListenerFunc f(*this);
+    for_each(mpImpl->maListeners.begin(), mpImpl->maListeners.end(), f);
 }
 
 //--------------------------------------------------------------------
 
 // simple ctor of class SfxBroadcaster
 
-SfxBroadcaster::SfxBroadcaster()
+SfxBroadcaster::SfxBroadcaster() :
+    mpImpl(new SfxBroadcasterImpl)
 {
 	DBG_CTOR(SfxBroadcaster, 0);
 }
@@ -133,16 +227,13 @@ SfxBroadcaster::SfxBroadcaster()
 // copy ctor of class SfxBroadcaster
 
 
-SfxBroadcaster::SfxBroadcaster( const SfxBroadcaster &rBC )
+SfxBroadcaster::SfxBroadcaster( const SfxBroadcaster &rBC ) :
+    mpImpl(new SfxBroadcasterImpl(*rBC.mpImpl))
 {
 	DBG_CTOR(SfxBroadcaster, 0);
 
-	for ( USHORT n = 0; n < rBC.aListeners.Count(); ++n )
-	{
-		SfxListener *pListener = rBC.aListeners[n];
-		if ( pListener )
-			pListener->StartListening( *this );
-	}
+    RegisterListenerFunc f(*this);
+    for_each(rBC.mpImpl->maListeners.begin(), rBC.mpImpl->maListeners.end(), f);
 }
 
 //--------------------------------------------------------------------
@@ -152,21 +243,9 @@ SfxBroadcaster::SfxBroadcaster( const SfxBroadcaster &rBC )
 BOOL SfxBroadcaster::AddListener( SfxListener& rListener )
 {
 	DBG_CHKTHIS(SfxBroadcaster, 0);
-	const SfxListener *pListener = &rListener;
-	const SfxListener *pNull = 0;
-	USHORT nFreePos = aListeners.GetPos( pNull );
-	if ( nFreePos < aListeners.Count() )
-		aListeners.GetData()[nFreePos] = pListener;
-	else if ( aListeners.Count() < (USHRT_MAX-1) )
-		aListeners.Insert( pListener, aListeners.Count() );
-	else
-	{
-		DBG_ERROR( "array overflow" );
-		return FALSE;
-	}
-
-	DBG_ASSERT( USHRT_MAX != aListeners.GetPos(pListener),
-				"AddListener failed" );
+	SfxListener *pListener = &rListener;
+    fprintf(stdout, "SfxBroadcaster::AddListener:   adding listener %p\n", pListener);
+    mpImpl->maListeners.insert(pListener);
 	return TRUE;
 }
 
@@ -182,17 +261,10 @@ void SfxBroadcaster::ListenersGone()
 //--------------------------------------------------------------------
 
 // forward a notification to all registered listeners
-
-void SfxBroadcaster::SFX_FORWARD(SfxBroadcaster& rBC, const TypeId& rBCType,
-							   const SfxHint& rHint, const TypeId& rHintType)
+void SfxBroadcaster::Forward(SfxBroadcaster& rBC, const SfxHint& rHint)
 {
-	const USHORT nCount = aListeners.Count();
-	for ( USHORT i = 0; i < nCount; ++i )
-	{
-		SfxListener *pListener = aListeners[i];
-		if ( pListener )
-			pListener->SFX_NOTIFY( rBC, rBCType, rHint, rHintType);
-	}
+    NotifyListenerFunc f(rHint, rBC);
+    for_each(mpImpl->maListeners.begin(), mpImpl->maListeners.end(), f);
 }
 
 //--------------------------------------------------------------------
@@ -202,10 +274,23 @@ void SfxBroadcaster::SFX_FORWARD(SfxBroadcaster& rBC, const TypeId& rBCType,
 void SfxBroadcaster::RemoveListener( SfxListener& rListener )
 {
 	{DBG_CHKTHIS(SfxBroadcaster, 0);}
-	const SfxListener *pListener = &rListener;
-	USHORT nPos = aListeners.GetPos(pListener);
-	DBG_ASSERT( nPos != USHRT_MAX, "RemoveListener: Listener unknown" );
-	aListeners.GetData()[nPos] = 0;
+	SfxListener *pListener = &rListener;
+    fprintf(stdout, "SfxBroadcaster::RemoveListener:   removing listener %p\n", pListener);
+    ListenerArray::iterator itr = find(mpImpl->maListeners.begin(), mpImpl->maListeners.end(), pListener);
+    if (itr == mpImpl->maListeners.end())
+    {
+        fprintf(stdout, "SfxBroadcaster::RemoveListener:   listener not found!\n");
+        // listener not found!
+        return;
+    }
+
+    fprintf(stdout, "SfxBroadcaster::RemoveListener:   # listeners before removal: %d\n", mpImpl->maListeners.size());
+    mpImpl->maListeners.erase(itr);
+
+    fprintf(stdout, "SfxBroadcaster::RemoveListener:   # listeners after removal: %d\n", mpImpl->maListeners.size());
+    for (itr = mpImpl->maListeners.begin(); itr != mpImpl->maListeners.end(); ++itr)
+        fprintf(stdout, "SfxBroadcaster::RemoveListener:   - listener %p\n", *itr);
+
 	if ( !HasListeners() )
 		ListenersGone();
 }
@@ -214,10 +299,22 @@ void SfxBroadcaster::RemoveListener( SfxListener& rListener )
 
 BOOL SfxBroadcaster::HasListeners() const
 {
-	for ( USHORT n = 0; n < aListeners.Count(); ++n )
-		if ( aListeners.GetObject(n) != 0 )
-			return TRUE;
-	return FALSE;
+    return !mpImpl->maListeners.empty();
 }
 
-//--------------------------------------------------------------------
+// ----------------------------------------------------------------------------
+
+size_t SfxBroadcaster::GetListenerCount() const
+{
+    return mpImpl->maListeners.size();
+}
+
+SfxListener* SfxBroadcaster::GetListener( size_t nNo ) const
+{
+    if (nNo >= mpImpl->maListeners.size())
+        return NULL;
+
+    ListenerArray::const_iterator itr = mpImpl->maListeners.begin();
+    ::std::advance(itr, nNo);
+    return *itr;
+}
diff --git a/svtools/source/notify/lstner.cxx b/svtools/source/notify/lstner.cxx
index 25246c0..660dcb1 100644
--- svtools/source/notify/lstner.cxx
+++ svtools/source/notify/lstner.cxx
@@ -39,20 +39,88 @@
 
 #include <svtools/hint.hxx>
 #include <svtools/brdcst.hxx>
+#include <svtools/lstner.hxx>
 
-SV_DECL_PTRARR( SfxBroadcasterArr_Impl, SfxBroadcaster*, 0, 2 )
+#include <algorithm>
+#include <hash_set>
 
-#define _SFX_LSTNER_CXX
-#include <svtools/lstner.hxx>
+using ::std::find;
+using ::std::unary_function;
+using ::std::advance;
 
 //====================================================================
 DBG_NAME(SfxListener)
 TYPEINIT0(SfxListener);
 
+// ----------------------------------------------------------------------------
+
+struct SfxBroadcasterHash
+{
+    size_t operator()(SfxBroadcaster* p) const
+    {
+        return reinterpret_cast<size_t>(p);
+    }
+};
+
+typedef ::std::hash_multiset<SfxBroadcaster*, SfxBroadcasterHash> BroadcasterArray;
+
+struct SfxListenerImpl
+{
+	BroadcasterArray maBCs;
+
+    SfxListenerImpl() {}
+
+    SfxListenerImpl(const SfxListenerImpl& r) :
+        maBCs(r.maBCs)
+    {
+    }
+};
+
+// ----------------------------------------------------------------------------
+
+class StartListeningToBC : public unary_function<SfxBroadcaster*, void>
+{
+public:
+    explicit StartListeningToBC(SfxListener& rListener) :
+        mrListener(rListener)
+    {
+    }
+
+    void operator()(SfxBroadcaster* pBC)
+    {
+        mrListener.StartListening(*pBC);
+    }
+private:
+    StartListeningToBC(); // disabled
+
+private:
+    SfxListener& mrListener;
+};
+
+class RemoveListenerFromBC : public unary_function<SfxBroadcaster*, void>
+{
+public:
+    explicit RemoveListenerFromBC(SfxListener& rListener) :
+        mrListener(rListener)
+    {
+    }
+
+    void operator()(SfxBroadcaster* pBC)
+    {
+        pBC->RemoveListener(mrListener);
+    }
+private:
+    RemoveListenerFromBC(); // disabled
+
+private:
+    SfxListener& mrListener;
+};
+
 //====================================================================
 // simple ctor of class SfxListener
 
-SfxListener::SfxListener()
+SfxListener::SfxListener() :
+    mpImpl(new SfxListenerImpl)
 {
 	DBG_CTOR(SfxListener, 0);
 }
@@ -60,13 +128,14 @@ SfxListener::SfxListener()
 
 // copy ctor of class SfxListener
 
-SfxListener::SfxListener( const SfxListener &rListener )
+SfxListener::SfxListener( const SfxListener &rListener ) :
+    mpImpl(new SfxListenerImpl(*rListener.mpImpl))
 {
 	DBG_CTOR(SfxListener, 0);
-
-	for ( USHORT n = 0; n < rListener.aBCs.Count(); ++n )
-		StartListening( *rListener.aBCs[n] );
+    StartListeningToBC f(*this);
+    for_each(rListener.mpImpl->maBCs.begin(), rListener.mpImpl->maBCs.end(), f);
 }
+
 //--------------------------------------------------------------------
 
 // unregisteres the SfxListener from its SfxBroadcasters
@@ -76,11 +145,8 @@ SfxListener::~SfxListener()
 	DBG_DTOR(SfxListener, 0);
 
 	// unregister at all remainding broadcasters
-	for ( USHORT nPos = 0; nPos < aBCs.Count(); ++nPos )
-	{
-		SfxBroadcaster *pBC = aBCs[nPos];
-		pBC->RemoveListener(*this);
-	}
+    RemoveListenerFromBC f(*this);
+    for_each(mpImpl->maBCs.begin(), mpImpl->maBCs.end(), f);
 }
 
 //--------------------------------------------------------------------
@@ -91,8 +157,10 @@ void SfxListener::RemoveBroadcaster_Impl( SfxBroadcaster& rBC )
 {
 	DBG_CHKTHIS(SfxListener, 0);
 
-	const SfxBroadcaster *pBC = &rBC;
-	aBCs.Remove( aBCs.GetPos(pBC), 1 );
+	SfxBroadcaster *pBC = &rBC;
+    BroadcasterArray::iterator itr = ::std::find(mpImpl->maBCs.begin(), mpImpl->maBCs.end(), pBC);
+    if (itr != mpImpl->maBCs.end())
+        mpImpl->maBCs.erase(itr);
 }
 
 //--------------------------------------------------------------------
@@ -107,8 +175,9 @@ BOOL SfxListener::StartListening( SfxBroadcaster& rBroadcaster, BOOL bPreventDup
 	{
 		if ( rBroadcaster.AddListener(*this) )
 		{
-			const SfxBroadcaster *pBC = &rBroadcaster;
-			aBCs.Insert( pBC, aBCs.Count() );
+			SfxBroadcaster *pBC = &rBroadcaster;
+            mpImpl->maBCs.insert(pBC);
+//          maBCs.push_back(pBC);
 
 			DBG_ASSERT( IsListening(rBroadcaster), "StartListening failed" );
 			return TRUE;
@@ -132,8 +201,10 @@ BOOL SfxListener::EndListening( SfxBroadcaster& rBroadcaster, BOOL bAllDups )
 	do
 	{
 		rBroadcaster.RemoveListener(*this);
-		const SfxBroadcaster *pBC = &rBroadcaster;
-		aBCs.Remove( aBCs.GetPos(pBC), 1 );
+		SfxBroadcaster *pBC = &rBroadcaster;
+        BroadcasterArray::iterator itr = ::std::find(mpImpl->maBCs.begin(), mpImpl->maBCs.end(), pBC);
+        if (itr != mpImpl->maBCs.end())
+            mpImpl->maBCs.erase(itr);
 	}
 	while ( bAllDups && IsListening( rBroadcaster ) );
 	return TRUE;
@@ -143,13 +214,18 @@ BOOL SfxListener::EndListening( SfxBroadcaster& rBroadcaster, BOOL bAllDups )
 
 // unregisteres at a specific SfxBroadcaster by index
 
-void SfxListener::EndListening( USHORT nNo )
+void SfxListener::EndListening( size_t nNo )
 {
 	DBG_CHKTHIS(SfxListener, 0);
 
-	SfxBroadcaster *pBC = aBCs.GetObject(nNo);
-	pBC->RemoveListener(*this);
-	aBCs.Remove( nNo, 1 );
+    if (nNo >= mpImpl->maBCs.size())
+        return;
+
+    BroadcasterArray::iterator itr = mpImpl->maBCs.begin();
+    advance(itr, nNo);
+    SfxBroadcaster* pBC = *itr;
+    pBC->RemoveListener(*this);
+    mpImpl->maBCs.erase(itr);
 }
 
 //--------------------------------------------------------------------
@@ -160,21 +236,33 @@ void SfxListener::EndListeningAll()
 {
 	DBG_CHKTHIS(SfxListener, 0);
 
-	// MI: bei Optimierung beachten: Seiteneffekte von RemoveListener beachten!
-	while ( aBCs.Count() )
-	{
-		SfxBroadcaster *pBC = aBCs.GetObject(0);
-		pBC->RemoveListener(*this);
-		aBCs.Remove( 0, 1 );
-	}
+    RemoveListenerFromBC f(*this);
+    for_each(mpImpl->maBCs.begin(), mpImpl->maBCs.end(), f);
+    mpImpl->maBCs.clear();
 }
 
 //--------------------------------------------------------------------
 
 BOOL SfxListener::IsListening( SfxBroadcaster& rBroadcaster ) const
 {
-	const SfxBroadcaster *pBC = &rBroadcaster;
-	return USHRT_MAX != aBCs.GetPos( pBC );
+	SfxBroadcaster *pBC = &rBroadcaster;
+    BroadcasterArray::const_iterator itr = find(mpImpl->maBCs.begin(), mpImpl->maBCs.end(), pBC);
+    return itr != mpImpl->maBCs.end();
+}
+
+size_t SfxListener::GetBroadcasterCount() const
+{
+    return mpImpl->maBCs.size();
+}
+
+SfxBroadcaster* SfxListener::GetBroadcasterJOE( size_t nNo ) const
+{
+    if (nNo >= mpImpl->maBCs.size())
+        return NULL;
+
+    BroadcasterArray::const_iterator itr = mpImpl->maBCs.begin();
+    advance(itr, nNo);
+    return *itr;
 }
 
 //--------------------------------------------------------------------
@@ -182,17 +270,16 @@ BOOL SfxListener::IsListening( SfxBroadcaster& rBroadcaster ) const
 // base implementation of notification handler
 
 #ifdef DBG_UTIL
-void SfxListener::SFX_NOTIFY( SfxBroadcaster& rBC, const TypeId& rBCType,
-							  const SfxHint&, const TypeId& rHintType )
+void SfxListener::Notify( SfxBroadcaster& rBC, const SfxHint& )
 #else
-void SfxListener::SFX_NOTIFY( SfxBroadcaster&, const TypeId&,
-							  const SfxHint&, const TypeId& )
+void SfxListener::Notify( SfxBroadcaster& /*rBC*/, const SfxHint& )
 #endif
 {
-    #ifdef DBG_UTIL
-	const SfxBroadcaster *pBC = &rBC;
-	DBG_ASSERT( USHRT_MAX != aBCs.GetPos(pBC),
+#ifdef DBG_UTIL
+	SfxBroadcaster *pBC = &rBC;
+    BroadcasterArray::const_iterator itr = find(mpImpl->maBCs.begin(), mpImpl->maBCs.end(), pBC);
+	DBG_ASSERT( itr != mpImpl->maBCs.end(),
 				"notification from unregistered broadcaster" );
-    #endif
+#endif
 }
 
