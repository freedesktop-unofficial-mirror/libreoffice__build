Index: vcl/source/gdi/outdev3.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/gdi/outdev3.cxx,v
retrieving revision 1.209
diff -u -p -u -r1.209 outdev3.cxx
--- vcl/source/gdi/outdev3.cxx	2 Nov 2005 14:41:10 -0000	1.209
+++ vcl/source/gdi/outdev3.cxx	24 Jan 2006 17:56:21 -0000
@@ -1531,32 +1531,43 @@ bool ImplFontData::IsBetterMatch( const 
         }
     }
 
+	bool bBetter;
+
     if( rStatus.mnFaceMatch > nMatch )
-        return false;
+        bBetter = false;
     else if( rStatus.mnFaceMatch < nMatch )
     {
         rStatus.mnFaceMatch      = nMatch;
         rStatus.mnHeightMatch    = nHeightMatch;
         rStatus.mnWidthMatch     = nWidthMatch;
-        return true;
+        bBetter = true;
     }
 
     // when two fonts are still competing prefer the
     // one with the best matching height
-    if( rStatus.mnHeightMatch > nHeightMatch )
-        return false;
+    else if( rStatus.mnHeightMatch > nHeightMatch )
+        bBetter = false;
     else if( rStatus.mnHeightMatch < nHeightMatch )
     {
         rStatus.mnHeightMatch    = nHeightMatch;
         rStatus.mnWidthMatch     = nWidthMatch;
-        return true;
+        bBetter = true;
     }
-
-    if( rStatus.mnWidthMatch > nWidthMatch )
-        return false;
-
-    rStatus.mnWidthMatch = nWidthMatch;
-    return true;
+    else if( rStatus.mnWidthMatch > nWidthMatch )
+        bBetter = false;
+	else
+	{
+		rStatus.mnWidthMatch = nWidthMatch;
+		bBetter = true;
+	}
+	if (bBetter)
+	{
+	    fprintf (stderr, "'%s' is a better match",
+				 rtl::OUStringToOString(rFontName, RTL_TEXTENCODING_UTF8).getStr());
+	    fprintf (stderr, "for '%s'\n",
+				 rtl::OUStringToOString(rFontName, RTL_TEXTENCODING_UTF8).getStr());
+	}
+	return bBetter;
 }
 
 // =======================================================================
@@ -1714,7 +1725,10 @@ ImplFontData* ImplDevFontListData::FindB
     if( !mpFirst )
         return NULL;
     if( !mpFirst->GetNextFace() )
+	{
+		fprintf (stderr, "getnextface => ");
         return mpFirst;
+	}
 
     // FontName+StyleName should map to FamilyName+StyleName
     const String& rSearchName = rFSD.maTargetName;
@@ -2663,6 +2677,9 @@ ImplFontEntry* ImplFontCache::Get( ImplD
 {
     String aSearchName = rFont.GetName();
 
+	fprintf (stderr, "FontCache::Get '%s' => ",
+			 rtl::OUStringToOString(aSearchName, RTL_TEXTENCODING_UTF8).getStr());
+
     // TODO: also add device specific name caching
     if( !pDevSpecific )
     {
@@ -2671,7 +2688,10 @@ ImplFontEntry* ImplFontCache::Get( ImplD
         FontNameList::const_iterator it_name = maFontNameList.find( aSearchName );
         if( it_name != maFontNameList.end() )
             if( !(*it_name).second.EqualsAscii( "hg", 0, 2) )
+			{
                 aSearchName = (*it_name).second;
+				fprintf (stderr, "already known => ");
+			}
     }
 
     // initialize internal font request object
@@ -2688,7 +2708,10 @@ ImplFontEntry* ImplFontCache::Get( ImplD
     {
         FontInstanceList::iterator it = maFontInstanceList.find( aFontSelData );
         if( it != maFontInstanceList.end() )
+		{
             pEntry = (*it).second;
+			fprintf (stderr, "direct cache hit => ");
+		}
     }
 
     if( !pEntry ) // no direct cache hit
@@ -2698,12 +2721,15 @@ ImplFontEntry* ImplFontCache::Get( ImplD
         DBG_ASSERT( (pFontFamily != NULL), "ImplFontCache::Get() No logical font found!" );
         aFontSelData.maSearchName = pFontFamily->GetSearchName();
 
+		fprintf (stderr, " implfindbyfont => ");
+
         // check if an indirectly matching logical font instance is already cached
         FontInstanceList::iterator it = maFontInstanceList.find( aFontSelData );
         if( it != maFontInstanceList.end() )
         {
             // we have an indirect cache hit
             pEntry = (*it).second;
+			fprintf (stderr, "(in)direct cache hit => ");
             // cache the requested and the selected font names
             // => next time there is a good chance for a direct cache hit
             // don't allow the cache to grow too big
@@ -2729,6 +2755,7 @@ ImplFontEntry* ImplFontCache::Get( ImplD
         ImplFontData* pFontData = pFontFamily->FindBestFontFace( aFontSelData );
         aFontSelData.mpFontData = pFontData;
 
+		fprintf (stderr, "create new font instance => ");
         // create a new logical font instance from this physical font face
         pEntry = pFontData->CreateFontInstance( aFontSelData );
 
@@ -2741,6 +2768,11 @@ ImplFontEntry* ImplFontCache::Get( ImplD
         maFontInstanceList[ aFontSelData ] = pEntry;
     }
 
+	fprintf (stderr, "'%s'\n",
+			 pEntry ?
+			 rtl::OUStringToOString(pEntry->maFontSelData.maSearchName, RTL_TEXTENCODING_UTF8).getStr()
+			 : "<null>");
+
     mpFirstEntry = pEntry;
     return pEntry;
 }
@@ -2794,7 +2826,10 @@ ImplDevFontListData* ImplDevFontList::Im
         }
         ImplDevFontListData* pFoundData = ImplFindBySearchName( aSearchName );
         if( pFoundData )
+		{
+			fprintf (stderr, "found by search name => ");
             return pFoundData;
+		}
 
         // break after last font token
         if( nTokenPos == STRING_NOTFOUND)
@@ -2820,7 +2855,10 @@ ImplDevFontListData* ImplDevFontList::Im
         ImplFontSubstitute( aSearchName, 0, pDevSpecific );
         ImplDevFontListData* pFoundData = ImplFindBySearchName( aSearchName );
         if( pFoundData )
+		{
+			fprintf (stderr, "found by iterating list => ");
             return pFoundData;
+		}
     }
 
     // if no font with a directly matching name is available use the
@@ -2881,9 +2919,18 @@ ImplDevFontListData* ImplDevFontList::Im
         // try the font substitutions suggested by the fallback info
         if( pFontAttr )
         {
+			fprintf (stderr, "found fallbck '%s' ",
+					 rtl::OUStringToOString(aSearchShortName, RTL_TEXTENCODING_UTF8).getStr());
+			fprintf (stderr, " '%s' ",
+					 rtl::OUStringToOString(aSearchFamilyName, RTL_TEXTENCODING_UTF8).getStr());
+			fprintf (stderr, " '%s' ",
+					 rtl::OUStringToOString(aSearchName, RTL_TEXTENCODING_UTF8).getStr());
             ImplDevFontListData* pFoundData = ImplFindBySubstFontAttr( *pFontAttr );
             if( pFoundData )
+			{
+				fprintf (stderr, "found from fallback list => ");
                 return pFoundData;
+			}
         }
     }
 
@@ -2894,7 +2941,10 @@ ImplDevFontListData* ImplDevFontList::Im
         aSearchName = DefaultFontConfigItem::get()->getDefaultFont( aDefaultLocale, DEFAULTFONT_SYMBOL );
         ImplDevFontListData* pFoundData = ImplFindByTokenNames( aSearchName );
         if( pFoundData )
+		{
+			fprintf (stderr, "default symbol font => ");
             return pFoundData;
+		}
     }
 
     // now try the other font name tokens
@@ -2920,7 +2970,10 @@ ImplDevFontListData* ImplDevFontList::Im
         {
             ImplDevFontListData* pFoundData = ImplFindBySearchName( aTempShortName );
             if( pFoundData )
+			{
+				fprintf (stderr, "shortened token name match => ");
                 return pFoundData;
+			}
         }
 
         // use a font name from font fallback list to determine font attributes
@@ -2939,7 +2992,10 @@ ImplDevFontListData* ImplDevFontList::Im
         {
             ImplDevFontListData* pFoundData = ImplFindBySubstFontAttr( *pTempFontAttr );
             if( pFoundData )
+			{
+				fprintf (stderr, "shortened token name subst match => ");
                 return pFoundData;
+			}
             if( !pFontAttr )
                 pFontAttr = pTempFontAttr;
         }
@@ -2950,7 +3006,10 @@ ImplDevFontListData* ImplDevFontList::Im
     {
         ImplDevFontListData* pFoundData = ImplFindByAliasName( rFSD.maTargetName, aSearchShortName );
         if( pFoundData )
+		{
+			fprintf (stderr, "use alias name => ");
             return pFoundData;
+		}
     }
 
     // if still needed use the font request's attributes to find a good match
@@ -3008,6 +3067,8 @@ ImplDevFontListData* ImplDevFontList::Im
         pFoundData = FindDefaultFont();
     }
 
+	fprintf (stderr, "quit with default => ");
+
     return pFoundData;
 }
 
Index: vcl/source/gdi/fontcfg.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/gdi/fontcfg.cxx,v
retrieving revision 1.36
diff -u -p -u -r1.36 fontcfg.cxx
--- vcl/source/gdi/fontcfg.cxx	9 Sep 2005 11:57:35 -0000	1.36
+++ vcl/source/gdi/fontcfg.cxx	24 Jan 2006 17:56:21 -0000
@@ -1207,7 +1207,13 @@ const FontNameAttr* FontSubstConfigItem:
             // because the list is sorted this will also find fontnames of the form searchfontname*
             ::std::vector< FontNameAttr >::const_iterator it = ::std::lower_bound( lang->second.begin(), lang->second.end(), aSearchAttr, StrictStringSort() );
             if( it != lang->second.end() && aSearchFont.CompareTo( it->Name, aSearchFont.Len() ) == COMPARE_EQUAL )
+			{
+				fprintf (stderr, " getSubstInfo '%s' == ",
+						 rtl::OUStringToOString(it->Name, RTL_TEXTENCODING_UTF8).getStr());
+				fprintf (stderr, " '%s' ",
+						 rtl::OUStringToOString(aSearchFont, RTL_TEXTENCODING_UTF8).getStr());
                 return &(*it);
+			}
         }
         // gradually become more unspecific
         if( aLocale.Variant.getLength() )
