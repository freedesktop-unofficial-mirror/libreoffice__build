diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/inc/gridwin.hxx sc/source/ui/inc/gridwin.hxx
--- sc.clean/source/ui/inc/gridwin.hxx	2008-04-01 12:26:31.000000000 -0400
+++ sc/source/ui/inc/gridwin.hxx	2008-04-14 09:09:24.000000000 -0400
@@ -169,6 +169,7 @@ private:
     ::sdr::overlay::OverlayObjectList*              mpOODragRect;
     ::sdr::overlay::OverlayObjectList*              mpOOHeader;
     ::sdr::overlay::OverlayObjectList*              mpOOShrink;
+    ::sdr::overlay::OverlayObjectList*              mpOORowHighlight;
 
 private:
 	ScViewData*				pViewData;
@@ -446,6 +447,8 @@ public:
     void            UpdateHeaderOverlay();
     void            DeleteShrinkOverlay();
     void            UpdateShrinkOverlay();
+    void            DeleteRowHighlightOverlay();
+    void            UpdateRowHighlightOverlay( const MapMode& rDrawMode );
     void            UpdateAllOverlays();
 
 protected:
@@ -453,6 +456,12 @@ protected:
 	void ImpCreateOverlayObjects();
 	void ImpDestroyOverlayObjects();
 
+private:
+
+    void            ConvertPixelRectsToRangeVector( 
+                        const ::std::vector< Rectangle >& rPixelRects, 
+                        sdr::overlay::OverlayObjectCell::RangeVector& rRanges,
+                        const MapMode& rDrawMode );
 };
 
 
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/view/gridwin.cxx sc/source/ui/view/gridwin.cxx
--- sc.clean/source/ui/view/gridwin.cxx	2008-04-13 06:12:16.000000000 -0400
+++ sc/source/ui/view/gridwin.cxx	2008-04-26 19:57:38.000000000 -0400
@@ -36,7 +36,7 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_sc.hxx"
 
-
+#include <stdio.h>
 
 //------------------------------------------------------------------
 
@@ -421,6 +421,7 @@ ScGridWindow::ScGridWindow( Window* pPar
             mpOODragRect( NULL ),
             mpOOHeader( NULL ),
             mpOOShrink( NULL ),
+            mpOORowHighlight( NULL ),
 			pViewData( pData ),
 			eWhich( eWhichPos ),
 			pNoteMarker( NULL ),
@@ -5022,6 +5023,7 @@ void ScGridWindow::ImpDestroyOverlayObje
     DeleteDragRectOverlay();
     DeleteHeaderOverlay();
     DeleteShrinkOverlay();
+    DeleteRowHighlightOverlay();
 }
 
 void ScGridWindow::UpdateAllOverlays()
@@ -5048,6 +5050,9 @@ void ScGridWindow::UpdateCursorOverlay()
     // For now, just re-create them.
 
     DeleteCursorOverlay();
+    DeleteRowHighlightOverlay();
+
+    UpdateRowHighlightOverlay(aDrawMode);
 
     std::vector<Rectangle> aPixelRects;
 
@@ -5159,8 +5164,16 @@ void ScGridWindow::UpdateCursorOverlay()
             sdr::overlay::OverlayObjectCell* pOverlay = new sdr::overlay::OverlayObjectCell( eType, aCursorColor, aRanges );
 
 			pOverlayManager->add(*pOverlay);
-			mpOOCursors = new ::sdr::overlay::OverlayObjectList;
-			mpOOCursors->append(*pOverlay);
+            mpOOCursors = new ::sdr::overlay::OverlayObjectList;
+            mpOOCursors->append(*pOverlay);
+            const basegfx::B2DRange range = pOverlay->getBaseRange();
+
+            double minX = range.getMinX();
+            double minY = range.getMinY();
+            double maxX = range.getMaxX();
+            double maxY = range.getMaxY();
+            double w = range.getWidth();
+            double h = range.getHeight();
         }
     }
 
@@ -5584,6 +5597,41 @@ void ScGridWindow::UpdateShrinkOverlay()
         SetMapMode( aOldMode );
 }
 
+void ScGridWindow::DeleteRowHighlightOverlay()
+{
+    DELETEZ( mpOORowHighlight );
+}
+
+void ScGridWindow::UpdateRowHighlightOverlay( const MapMode& rDrawMode )
+{
+    ::sdr::overlay::OverlayManager* pOverlayManager = getOverlayManager();
+    if (!pOverlayManager)
+        return;
+
+    std::vector<Rectangle> aPixelRects;
+
+    SCCOL nCurX = pViewData->GetCurX();
+    SCCOL nCurY = pViewData->GetCurY();
+    Point aCurPtStart = pViewData->GetScrPos(nCurX, nCurY, eWhich);
+    Point aCurPtEnd   = pViewData->GetScrPos(nCurX+1, nCurY+1, eWhich);
+    Size aScrSize = pViewData->GetScrSize();
+
+    aPixelRects.push_back(Rectangle(0, aCurPtStart.Y()-4, aScrSize.getWidth(), aCurPtStart.Y()-2));
+    aPixelRects.push_back(Rectangle(0, aCurPtEnd.Y(), aScrSize.getWidth(), aCurPtEnd.Y()+2));
+
+    sdr::overlay::OverlayObjectCell::RangeVector aRanges;
+    ConvertPixelRectsToRangeVector( aPixelRects, aRanges, rDrawMode );
+
+    ScOverlayType eType = SC_OVERLAY_TRANSPARENT;
+
+    Color aHighlight(140, 100, 24);
+    sdr::overlay::OverlayObjectCell* pOverlay = new sdr::overlay::OverlayObjectCell( eType, aHighlight, aRanges );
+
+    pOverlayManager->add(*pOverlay);
+    mpOORowHighlight = new ::sdr::overlay::OverlayObjectList;
+    mpOORowHighlight->append(*pOverlay);
+}
+
 // #i70788# central method to get the OverlayManager safely
 ::sdr::overlay::OverlayManager* ScGridWindow::getOverlayManager()
 {
@@ -5613,6 +5661,24 @@ void ScGridWindow::flushOverlayManager()
 	}
 }
 
+void ScGridWindow::ConvertPixelRectsToRangeVector( const ::std::vector< Rectangle >& rPixelRects, 
+        sdr::overlay::OverlayObjectCell::RangeVector& rRanges,
+        const MapMode& rDrawMode )
+{
+    std::vector<Rectangle>::const_iterator aPixelEnd( rPixelRects.end() );
+    for ( std::vector<Rectangle>::const_iterator aPixelIter( rPixelRects.begin() );
+          aPixelIter != aPixelEnd; ++aPixelIter )
+    {
+        Rectangle aLogic( PixelToLogic( *aPixelIter, rDrawMode ) );
+
+        const basegfx::B2DPoint aTopLeft(aLogic.Left(), aLogic.Top());
+        const basegfx::B2DPoint aBottomRight(aLogic.Right(), aLogic.Bottom());
+        const basegfx::B2DRange a2DRange(aTopLeft, aBottomRight);
+
+        rRanges.push_back( a2DRange );
+    }
+}
+
 // ---------------------------------------------------------------------------
 
 // #114409#
