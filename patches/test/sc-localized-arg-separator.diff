diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/inc/compiler.hxx sc/inc/compiler.hxx
--- sc.clean/inc/compiler.hxx	2008-02-05 11:16:54.000000000 -0500
+++ sc/inc/compiler.hxx	2008-02-05 19:41:04.000000000 -0500
@@ -236,26 +236,6 @@ typedef ::std::hash_map< String, String,
 class SC_DLLPUBLIC ScCompiler
 {
 public:
-	struct Convention
-	{
-		const ScAddress::Convention meConv;
-		const ULONG*   				mpCharTable;
-
-
-		Convention( ScAddress::Convention eConvP );
-        virtual ~Convention();
-
-		virtual void MakeRefStr( rtl::OUStringBuffer&	rBuffer,
-								 const ScCompiler&		rCompiler,
-								 const ComplRefData&	rRef,
-								 BOOL bSingleRef ) const = 0;
-		virtual ::com::sun::star::i18n::ParseResult
-					parseAnyToken( const String& rFormula,
-								   xub_StrLen nSrcPos,
-								   const CharClass* pCharClass) const = 0;
-	};
-    friend struct Convention;
-
     /** Mappings from strings to OpCodes and vice versa. */
     class OpCodeMap
     {
@@ -362,6 +342,30 @@ private:
     typedef ::boost::shared_ptr< const OpCodeMap > OpCodeMapPtr;
     typedef ::boost::shared_ptr< OpCodeMap > NonConstOpCodeMapPtr;
 
+    struct Convention
+    {
+        const ScAddress::Convention meConv;
+        const ULONG*                mpCharTable;
+
+
+        Convention( ScAddress::Convention eConvP );
+        virtual ~Convention();
+
+        virtual void MakeRefStr( rtl::OUStringBuffer&   rBuffer,
+                                 const ScCompiler&      rCompiler,
+                                 const ComplRefData&    rRef,
+                                 BOOL bSingleRef ) const = 0;
+        virtual ::com::sun::star::i18n::ParseResult
+                    parseAnyToken( const String& rFormula,
+                                   xub_StrLen nSrcPos,
+                                   const CharClass* pCharClass) const = 0;
+
+        virtual const String& GetSymbol( const OpCodeMapPtr& rpMap, OpCode e ) const = 0;
+
+        virtual OpCode GetOpCode( const OpCodeMapPtr& rpMap, const String& rName ) const = 0;
+    };
+    friend struct Convention;
+
 private:
 
     static NonConstOpCodeMapPtr  mxSymbolsODFF;                          // ODFF symbols
Only in sc: sc.diff
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
--- sc.clean/source/core/data/documen2.cxx	2008-02-05 11:16:59.000000000 -0500
+++ sc/source/core/data/documen2.cxx	2008-02-05 13:39:02.000000000 -0500
@@ -210,7 +210,7 @@ ScDocument::ScDocument( ScDocumentMode	e
         nInDdeLinkUpdate( 0 ),
         bInUnoBroadcast( FALSE ),
         bInUnoListenerCall( FALSE ),
-        eAddrConv( ScAddress::CONV_OOO ),
+        eAddrConv( ScAddress::CONV_XL_A1 ),
         bStyleSheetUsageInvalid( TRUE ),
         bUndoEnabled( TRUE ),
         mbAdjustHeightEnabled( true ),
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/tool/compiler.cxx sc/source/core/tool/compiler.cxx
--- sc.clean/source/core/tool/compiler.cxx	2008-02-05 11:16:59.000000000 -0500
+++ sc/source/core/tool/compiler.cxx	2008-02-05 21:31:52.000000000 -0500
@@ -439,6 +439,7 @@ void ScCompiler::SetCompileEnglish( BOOL
         if (!pCharClassEnglish)
             InitCharClassEnglish();
         pCharClass = pCharClassEnglish;
+        SetRefConvention(ScAddress::CONV_OOO); // hack!  when compiling English, it's most likely handling ODF formula syntax.
     }
     else
     {
@@ -928,7 +929,7 @@ for (i = 97; i < 123; i++)
 /* ) */     t[41] |=   SC_COMPILER_C_WORD;
 /* * */     t[42] |=   SC_COMPILER_C_WORD;
 /* + */     t[43] |=   SC_COMPILER_C_WORD;
-#if 0 /* this really needs to be locale specific. */
+#if 1 /* this really needs to be locale specific. */
 /* , */     t[44]  =   SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
 #else
 /* , */     t[44] |=   SC_COMPILER_C_WORD;
@@ -980,6 +981,21 @@ struct Convention_A1 : public ScCompiler
         return pCharClass->parseAnyToken( rFormula,
                 nSrcPos, nStartFlags, aAddAllowed, nContFlags, aAddAllowed );
     }
+
+    virtual const String& GetSymbol( const ScCompiler::OpCodeMapPtr& rpMap, OpCode e ) const
+    {
+        return rpMap->getSymbol(e);
+    }
+
+    virtual OpCode GetOpCode( const ScCompiler::OpCodeMapPtr& rpMap, const String& rName ) const
+    {
+        fprintf(stdout, "Convention_A1::GetOpCode: OOO A1\n");fflush(stdout);
+        const ScOpCodeHashMap* pHashMap = rpMap->getHashMap();
+        ScOpCodeHashMap::const_iterator itr = pHashMap->find(rName);
+        if (itr == pHashMap->end())
+            return ocNone;
+        return itr->second;
+    }
 };
 
 String Convention_A1::MakeColStr( SCCOL nCol )
@@ -1232,6 +1248,8 @@ static const ScCompiler::Convention *pCo
 
 struct ConventionXL
 {
+    static const String maSep;
+
     static bool GetDocAndTab( const ScCompiler& rComp,
                               const SingleRefData& rRef,
                               String& rDocName,
@@ -1316,6 +1334,8 @@ struct ConventionXL
     }
 };
 
+const String ConventionXL::maSep = String::CreateFromAscii(",");
+
 struct ConventionXL_A1 : public Convention_A1, public ConventionXL
 {
     ConventionXL_A1() : Convention_A1( ScAddress::CONV_XL_A1 ) { }
@@ -1389,6 +1409,37 @@ struct ConventionXL_A1 : public Conventi
             MakeRowStr( rBuf, aRef.Ref2.nRow );
         }
     }
+
+    virtual const String& GetSymbol( const ScCompiler::OpCodeMapPtr& rpMap, OpCode e ) const
+    {
+        switch (e)
+        {
+            case ocSep:
+                return ConventionXL::maSep;
+        }
+        return rpMap->getSymbol(e);
+    }
+
+    virtual OpCode GetOpCode( const ScCompiler::OpCodeMapPtr& rpMap, const String& rName ) const
+    {
+        fprintf(stdout, "ConventionXL_A1::GetOpCode: XL A1\n");fflush(stdout);
+        const ScOpCodeHashMap* pHashMap = rpMap->getHashMap();
+        ScOpCodeHashMap::const_iterator itr = pHashMap->find(rName);
+        if (itr == pHashMap->end())
+        {
+            if (rName.Equals(ConventionXL::maSep))
+                // TODO: Don't do this!
+                return ocSep;
+            return ocNone;
+        }
+
+        switch (itr->second)
+        {
+            case ocSep:
+                return ocNone;
+        }
+        return itr->second;
+    }
 };
 
 static const ConventionXL_A1 ConvXL_A1;
@@ -1508,6 +1559,36 @@ struct ConventionXL_R1C1 : public ScComp
         return pCharClass->parseAnyToken( rFormula,
                 nSrcPos, nStartFlags, aAddAllowed, nContFlags, aAddAllowed );
     }
+
+    virtual const String& GetSymbol( const ScCompiler::OpCodeMapPtr& rpMap, OpCode e ) const
+    {
+        switch (e)
+        {
+            case ocSep:
+                return ConventionXL::maSep;
+        }
+        return rpMap->getSymbol(e);
+    }
+
+    virtual OpCode GetOpCode( const ScCompiler::OpCodeMapPtr& rpMap, const String& rName ) const
+    {
+        const ScOpCodeHashMap* pHashMap = rpMap->getHashMap();
+        ScOpCodeHashMap::const_iterator itr = pHashMap->find(rName);
+        if (itr == pHashMap->end())
+        {
+            if (rName.Equals(ConventionXL::maSep))
+                // TODO: Don't do this!
+                return ocSep;
+            return ocNone;
+        }
+
+        switch (itr->second)
+        {
+            case ocSep:
+                return ocNone;
+        }
+        return itr->second;
+    }
 };
 
 static const ConventionXL_R1C1 ConvXL_R1C1;
@@ -1970,13 +2051,14 @@ xub_StrLen ScCompiler::NextSymbol()
 
 BOOL ScCompiler::IsOpCode( const String& rName )
 {
-    ScOpCodeHashMap::const_iterator iLook( mxSymbols->getHashMap()->find( rName));
-    BOOL bFound = (iLook != mxSymbols->getHashMap()->end());
-    if (bFound)
+    bool bFound = false;
+    OpCode oc = pConv->GetOpCode(mxSymbols, rName);
+    if (oc != ocNone)
     {
         ScRawToken aToken;
-        aToken.SetOpCode( (*iLook).second );
+        aToken.SetOpCode(oc);
         pRawToken = aToken.Clone();
+        bFound = true;
     }
     else
     {
@@ -5046,7 +5128,7 @@ ScToken* ScCompiler::CreateStringFromTok
     else if( eOp >= ocInternalBegin && eOp <= ocInternalEnd )
         rBuffer.appendAscii( pInternal[ eOp - ocInternalBegin ] );
     else if( (USHORT) eOp < mxSymbolsNative->getSymbolCount())        // Keyword:
-        rBuffer.append(mxSymbols->getSymbol(eOp));
+        rBuffer.append( pConv->GetSymbol(mxSymbols, eOp) );
     else
     {
         DBG_ERROR("Unbekannter OpCode");
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/filter/inc/fdumper.hxx sc/source/filter/inc/fdumper.hxx
--- sc.clean/source/filter/inc/fdumper.hxx	2008-02-05 11:16:59.000000000 -0500
+++ sc/source/filter/inc/fdumper.hxx	2008-02-05 16:47:29.000000000 -0500
@@ -36,7 +36,7 @@
 #ifndef SC_FDUMPER_HXX
 #define SC_FDUMPER_HXX
 
-#define SCF_INCL_DUMPER (OSL_DEBUG_LEVEL > 0)
+#define SCF_INCL_DUMPER (OSL_DEBUG_LEVEL > 0) && 0
 
 #if SCF_INCL_DUMPER
 
