--- /dev/null	
+++ accessibility/unx/atkbridge.hxx	
@@ -0,0 +1,77 @@
+#ifndef _ATK_BRIDGE_HXX_
+#define _ATK_BRIDGE_HXX_
+
+#include <com/sun/star/uno/Any.hxx>
+#include <com/sun/star/uno/Type.hxx>
+#include <com/sun/star/uno/Sequence.hxx>
+#include <com/sun/star/accessibility/AccessibleRole.hpp>
+#include <com/sun/star/accessibility/XAccessible.hpp>
+#include <com/sun/star/accessibility/XAccessibleContext.hpp>
+#include <com/sun/star/awt/XExtendedToolkit.hpp>
+#include <com/sun/star/awt/XTopWindow.hpp>
+#include <com/sun/star/awt/XTopWindowListener.hpp>
+#include <com/sun/star/awt/XWindow.hpp>
+#include <com/sun/star/lang/XComponent.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/lang/XInitialization.hpp>
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#include <com/sun/star/lang/XSingleServiceFactory.hpp>
+#include <com/sun/star/beans/Property.hpp>
+
+#include <rtl/ref.hxx>
+#include <cppuhelper/factory.hxx>
+#include <cppuhelper/queryinterface.hxx>
+
+using namespace ::com::sun::star;
+
+namespace a11y {
+
+class AtkBridge : public awt::XTopWindowListener,
+				  public lang::XInitialization,
+				  public lang::XComponent,
+				  public lang::XServiceInfo
+{
+	// UNO sucks for not providing a sane base-class for this.
+	sal_Int32 m_nRefCount;
+
+public:
+	AtkBridge( const ::com::sun::star::uno::Reference<
+			   ::com::sun::star::lang::XMultiServiceFactory >& rSMgr );
+	virtual ~AtkBridge();
+
+	// XInterface
+	virtual void acquire() throw () { ++m_nRefCount; }
+	virtual void release() throw () { if (! --m_nRefCount) delete this; }
+	virtual uno::Any queryInterface( const uno::Type & rType ) throw (uno::RuntimeException);
+
+	// XServiceInfo
+    virtual rtl::OUString getImplementationName() throw(uno::RuntimeException);
+    virtual sal_Bool supportsService( const rtl::OUString& ServiceName ) throw(uno::RuntimeException);
+    virtual uno::Sequence< rtl::OUString > getSupportedServiceNames() throw(uno::RuntimeException);
+	static uno::Sequence<rtl::OUString> AtkBridge::getSupportedServiceNames_Static();
+
+	// XTopWindowListener
+	virtual void windowOpened( const lang::EventObject& e ) throw (uno::RuntimeException);
+    virtual void windowClosing( const lang::EventObject& e ) throw (uno::RuntimeException);
+    virtual void windowClosed( const lang::EventObject& e ) throw (uno::RuntimeException);
+    virtual void windowMinimized( const lang::EventObject& e ) throw (uno::RuntimeException);
+    virtual void windowNormalized( const lang::EventObject& e ) throw (uno::RuntimeException);
+    virtual void windowActivated( const lang::EventObject& e ) throw (uno::RuntimeException);
+    virtual void windowDeactivated( const lang::EventObject& e ) throw (uno::RuntimeException);
+
+	// XInitialization
+	virtual void initialize( const uno::Sequence< uno::Any >& aArguments ) throw (uno::Exception, uno::RuntimeException);
+
+	// XComponent
+	virtual void dispose() throw (uno::RuntimeException);
+	virtual void addEventListener( const uno::Reference< lang::XEventListener >& xListener ) throw (uno::RuntimeException);
+	virtual void removeEventListener( const uno::Reference< lang::XEventListener >& aListener ) throw (uno::RuntimeException);
+
+	// XEventListener
+	virtual void disposing( const lang::EventObject& Source ) throw (uno::RuntimeException);
+};
+
+}; /* namespace a11y */
+
+#endif /* _ATK_BRIDGE_HXX_ */
+
