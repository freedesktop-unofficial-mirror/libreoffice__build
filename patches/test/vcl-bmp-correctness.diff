Fixes to broken VclCanvasBitmap class & unit test

From: Thorsten Behrens <thb@openoffice.org>


---

 vcl/source/helper/canvasbitmap.cxx |    8 -
 vcl/source/helper/canvastools.cxx  |   63 ++++++++--
 vcl/test/canvasbitmaptest.cxx      |  228 +++++++++++++++++++++---------------
 vcl/test/makefile.mk               |    9 -
 vcl/unx/source/gdi/salbmp.cxx      |   12 +-
 5 files changed, 189 insertions(+), 131 deletions(-)


diff --git vcl/source/helper/canvasbitmap.cxx vcl/source/helper/canvasbitmap.cxx
index 12eaa5e..3999a73 100644
--- vcl/source/helper/canvasbitmap.cxx
+++ vcl/source/helper/canvasbitmap.cxx
@@ -150,9 +150,6 @@ VclCanvasBitmap::VclCanvasBitmap( const BitmapEx& rBitmap ) :
         m_aLayout.ScanLineStride = m_pBmpAcc->GetScanlineSize();
         m_aLayout.PlaneStride    = 0;
 
-        if( !(m_pBmpAcc->GetScanlineFormat() & BMP_FORMAT_TOP_DOWN) )
-            m_aLayout.ScanLineStride *= -1;
-
         switch( m_pBmpAcc->GetScanlineFormat() )
         {
             case BMP_FORMAT_1BIT_MSB_PAL:
@@ -436,8 +433,6 @@ VclCanvasBitmap::VclCanvasBitmap( const BitmapEx& rBitmap ) :
             const Size aSize = m_aBitmap.GetSizePixel();
             m_aLayout.ScanLineBytes  = 
             m_aLayout.ScanLineStride = (aSize.Width()*m_nBitsPerOutputPixel + 7)/8;
-            if( !(m_pBmpAcc->GetScanlineFormat() & BMP_FORMAT_TOP_DOWN) )
-                m_aLayout.ScanLineStride *= -1;
         }
     }
 }
@@ -514,9 +509,6 @@ uno::Sequence< sal_Int8 > SAL_CALL VclCanvasBitmap::getData( rendering::IntegerB
     bitmapLayout.ScanLines     = aRequestedBytes.getHeight();
     bitmapLayout.ScanLineBytes = 
     bitmapLayout.ScanLineStride= aRequestedBytes.getWidth();
-        
-    if( !(m_pBmpAcc->GetScanlineFormat() & BMP_FORMAT_TOP_DOWN) )
-        bitmapLayout.ScanLineStride *= -1;
 
     if( !m_aBmpEx.IsTransparent() )
     {
diff --git vcl/source/helper/canvastools.cxx vcl/source/helper/canvastools.cxx
index 85df8df..f94d923 100644
--- vcl/source/helper/canvastools.cxx
+++ vcl/source/helper/canvastools.cxx
@@ -250,28 +250,61 @@ namespace vcl
                     {
                         // read ARGB color
                         aARGBColors = rLayout.ColorSpace->convertIntegerToARGB(aPixelData);
-                        for( sal_Int32 x=0; x<nWidth; ++x )
+
+                        if( rWriteAcc->HasPalette() )
+                        {
+                            for( sal_Int32 x=0; x<nWidth; ++x )
+                            {
+                                const rendering::ARGBColor& rColor=aARGBColors[x];
+                                rWriteAcc->SetPixel( aRect.Y1, x,
+                                                     rWriteAcc->GetBestPaletteIndex(
+                                                         BitmapColor( toByteColor(rColor.Red),
+                                                                      toByteColor(rColor.Green),
+                                                                      toByteColor(rColor.Blue))) );
+                                rAlphaAcc->SetPixel( aRect.Y1, x,
+                                                     BitmapColor( 255 - toByteColor(rColor.Alpha) ));
+                            }
+                        }
+                        else
                         {
-                            const rendering::ARGBColor& rColor=aARGBColors[x];
-                            rWriteAcc->SetPixel( aRect.Y1, x,
-                                                 BitmapColor( toByteColor(rColor.Red),
-                                                              toByteColor(rColor.Green),
-                                                              toByteColor(rColor.Blue) ));
-                            rAlphaAcc->SetPixel( aRect.Y1, x,
-                                                 BitmapColor( 255 - toByteColor(rColor.Alpha) ));
+                            for( sal_Int32 x=0; x<nWidth; ++x )
+                            {
+                                const rendering::ARGBColor& rColor=aARGBColors[x];
+                                rWriteAcc->SetPixel( aRect.Y1, x,
+                                                     BitmapColor( toByteColor(rColor.Red),
+                                                                  toByteColor(rColor.Green),
+                                                                  toByteColor(rColor.Blue) ));
+                                rAlphaAcc->SetPixel( aRect.Y1, x,
+                                                     BitmapColor( 255 - toByteColor(rColor.Alpha) ));
+                            }
                         }
                     }
                     else
                     {
                         // read RGB color
                         aRGBColors = rLayout.ColorSpace->convertIntegerToRGB(aPixelData);
-                        for( sal_Int32 x=0; x<nWidth; ++x )
+                        if( rWriteAcc->HasPalette() )
                         {
-                            const rendering::RGBColor& rColor=aRGBColors[x];
-                            rWriteAcc->SetPixel( aRect.Y1, x,
-                                                 BitmapColor( toByteColor(rColor.Red),
-                                                              toByteColor(rColor.Green),
-                                                              toByteColor(rColor.Blue) ));
+                            for( sal_Int32 x=0; x<nWidth; ++x )
+                            {
+                                const rendering::RGBColor& rColor=aRGBColors[x];
+                                rWriteAcc->SetPixel( aRect.Y1, x,
+                                                     rWriteAcc->GetBestPaletteIndex(
+                                                         BitmapColor( toByteColor(rColor.Red),
+                                                                      toByteColor(rColor.Green),
+                                                                      toByteColor(rColor.Blue))) );
+                            }
+                        }
+                        else
+                        {
+                            for( sal_Int32 x=0; x<nWidth; ++x )
+                            {
+                                const rendering::RGBColor& rColor=aRGBColors[x];
+                                rWriteAcc->SetPixel( aRect.Y1, x,
+                                                     BitmapColor( toByteColor(rColor.Red),
+                                                                  toByteColor(rColor.Green),
+                                                                  toByteColor(rColor.Blue) ));
+                            }
                         }
                     }
                 }
@@ -404,7 +437,7 @@ namespace vcl
                 { // limit scoped access 
                     ScopedBitmapWriteAccess pWriteAccess( aBitmap.AcquireWriteAccess(),
                                                           aBitmap );
-                    ScopedBitmapWriteAccess pAlphaWriteAccess( aAlpha.AcquireWriteAccess(),
+                    ScopedBitmapWriteAccess pAlphaWriteAccess( nAlphaDepth ? aAlpha.AcquireWriteAccess() : NULL,
                                                                aAlpha );
 
                     ENSURE_OR_THROW(pWriteAccess.get() != NULL,
diff --git vcl/test/canvasbitmaptest.cxx vcl/test/canvasbitmaptest.cxx
index 78793c8..a950496 100644
--- vcl/test/canvasbitmaptest.cxx
+++ vcl/test/canvasbitmaptest.cxx
@@ -32,6 +32,7 @@
 #include "precompiled_vcl.hxx"
 
 // bootstrap stuff
+#include <sal/main.h>
 #include <rtl/bootstrap.hxx>
 #include <rtl/ref.hxx>
 #include <comphelper/processfactory.hxx>
@@ -54,20 +55,45 @@
 #include <cppuhelper/compbase3.hxx>
 
 #include <tools/diagnose_ex.h>
+#include <tools/extendapplicationenvironment.hxx>
 
 #include "vcl/svapp.hxx"
 #include "vcl/canvastools.hxx"
+#include "vcl/canvasbitmap.hxx"
 #include "vcl/dialog.hxx"
 #include "vcl/outdev.hxx"
 #include "vcl/bmpacc.hxx"
 #include "vcl/virdev.hxx"
 #include "vcl/bitmapex.hxx"
-#include "canvasbitmap.hxx"
 
 
 using namespace ::com::sun::star;
 using namespace ::vcl::unotools;
 
+// -----------------------------------------------------------------------
+
+void Main();
+
+// -----------------------------------------------------------------------
+
+SAL_IMPLEMENT_MAIN()
+{
+    tools::extendApplicationEnvironment();
+
+    uno::Reference< lang::XMultiServiceFactory > xMS;
+    xMS = cppu::createRegistryServiceFactory( 
+        rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "applicat.rdb" ) ), 
+        sal_True );
+
+    InitVCL( xMS );
+    ::Main();
+    DeInitVCL();
+
+    return 0;
+}
+
+// -----------------------------------------------------------------------
+
 namespace com { namespace sun { namespace star { namespace rendering
 {
 
@@ -192,8 +218,8 @@ void checkCanvasBitmap( const rtl::Reference<VclCanvasBitmap>& xBmp,
     test( aPixelData2.getLength() == aPixelData.getLength(),
           "getData and getPixel return same amount of data" );
 
-    aPixelData = xBmp->getData(aLayout, geometry::IntegerRectangle2D(0,0,200,1));
-    test( aLayout.ScanLines == 1,
+    aPixelData = xBmp->getData(aLayout, geometry::IntegerRectangle2D(0,0,200,2));
+    test( aLayout.ScanLines == 2,
           "# scanlines" );
     test( aLayout.ScanLineBytes == (200*nExpectedBitsPerPixel+7)/8,
           "# scanline bytes" );
@@ -258,28 +284,28 @@ void checkCanvasBitmap( const rtl::Reference<VclCanvasBitmap>& xBmp,
     if( nOriginalDepth > 8 )
     {
         const uno::Sequence<sal_Int8> aComponentTags( xBmp->getComponentTags() );
-        uno::Sequence<rendering::ARGBColor> aARGBColors(1);
-        uno::Sequence<rendering::RGBColor>  aRGBColors(1);
+        uno::Sequence<rendering::ARGBColor> aARGBColor(1);
+        uno::Sequence<rendering::RGBColor>  aRGBColor(1);
         uno::Sequence<sal_Int8> aPixel3, aPixel4;
 
         const Color aCol(COL_GREEN);
-        aARGBColors[0].Red   = vcl::unotools::toDoubleColor(aCol.GetRed());
-        aARGBColors[0].Green = vcl::unotools::toDoubleColor(aCol.GetGreen());
-        aARGBColors[0].Blue  = vcl::unotools::toDoubleColor(aCol.GetBlue());
-        aARGBColors[0].Alpha = 1.0;
+        aARGBColor[0].Red   = vcl::unotools::toDoubleColor(aCol.GetRed());
+        aARGBColor[0].Green = vcl::unotools::toDoubleColor(aCol.GetGreen());
+        aARGBColor[0].Blue  = vcl::unotools::toDoubleColor(aCol.GetBlue());
+        aARGBColor[0].Alpha = 1.0;
 
-        aRGBColors[0].Red   = vcl::unotools::toDoubleColor(aCol.GetRed());
-        aRGBColors[0].Green = vcl::unotools::toDoubleColor(aCol.GetGreen());
-        aRGBColors[0].Blue  = vcl::unotools::toDoubleColor(aCol.GetBlue());
+        aRGBColor[0].Red   = vcl::unotools::toDoubleColor(aCol.GetRed());
+        aRGBColor[0].Green = vcl::unotools::toDoubleColor(aCol.GetGreen());
+        aRGBColor[0].Blue  = vcl::unotools::toDoubleColor(aCol.GetBlue());
 
-        aPixel3 = xBmp->convertIntegerFromARGB( aARGBColors );
+        aPixel3 = xBmp->convertIntegerFromARGB( aARGBColor );
         aPixel4 = xBmp->getPixel( aLayout, geometry::IntegerPoint2D(5,0) );
         test( aPixel3 == aPixel4,
               "Green pixel from bitmap matches with manually converted green pixel" );
 
         if( !aContainedBmpEx.IsTransparent() )
         {
-            aPixel3 = xBmp->convertIntegerFromRGB( aRGBColors );
+            aPixel3 = xBmp->convertIntegerFromRGB( aRGBColor );
             test( aPixel3 == aPixel4,
                   "Green pixel from bitmap matches with manually RGB-converted green pixel" );
         }
@@ -409,28 +435,28 @@ void checkBitmapImport( const rtl::Reference<VclCanvasBitmap>& xBmp,
     if( nOriginalDepth > 8 )
     {
         const uno::Sequence<sal_Int8> aComponentTags( xBmp->getComponentTags() );
-        uno::Sequence<rendering::ARGBColor> aARGBColors(1);
-        uno::Sequence<rendering::RGBColor>  aRGBColors(1);
+        uno::Sequence<rendering::ARGBColor> aARGBColor(1);
+        uno::Sequence<rendering::RGBColor>  aRGBColor(1);
         uno::Sequence<sal_Int8> aPixel3, aPixel4;
 
         const Color aCol(COL_GREEN);
-        aARGBColors[0].Red   = vcl::unotools::toDoubleColor(aCol.GetRed());
-        aARGBColors[0].Green = vcl::unotools::toDoubleColor(aCol.GetGreen());
-        aARGBColors[0].Blue  = vcl::unotools::toDoubleColor(aCol.GetBlue());
-        aARGBColors[0].Alpha = 1.0;
+        aARGBColor[0].Red   = vcl::unotools::toDoubleColor(aCol.GetRed());
+        aARGBColor[0].Green = vcl::unotools::toDoubleColor(aCol.GetGreen());
+        aARGBColor[0].Blue  = vcl::unotools::toDoubleColor(aCol.GetBlue());
+        aARGBColor[0].Alpha = 1.0;
 
-        aRGBColors[0].Red   = vcl::unotools::toDoubleColor(aCol.GetRed());
-        aRGBColors[0].Green = vcl::unotools::toDoubleColor(aCol.GetGreen());
-        aRGBColors[0].Blue  = vcl::unotools::toDoubleColor(aCol.GetBlue());
+        aRGBColor[0].Red   = vcl::unotools::toDoubleColor(aCol.GetRed());
+        aRGBColor[0].Green = vcl::unotools::toDoubleColor(aCol.GetGreen());
+        aRGBColor[0].Blue  = vcl::unotools::toDoubleColor(aCol.GetBlue());
 
-        aPixel3 = xBmp->convertIntegerFromARGB( aARGBColors );
+        aPixel3 = xBmp->convertIntegerFromARGB( aARGBColor );
         aPixel4 = xBmp->getPixel( aLayout, geometry::IntegerPoint2D(5,0) );
         test( aPixel3 == aPixel4,
               "Green pixel from bitmap matches with manually converted green pixel" );
 
         if( !aContainedBmpEx.IsTransparent() )
         {
-            aPixel3 = xBmp->convertIntegerFromRGB( aRGBColors );
+            aPixel3 = xBmp->convertIntegerFromRGB( aRGBColor );
             test( aPixel3 == aPixel4,
                   "Green pixel from bitmap matches with manually RGB-converted green pixel" );
         }
@@ -631,6 +657,13 @@ private:
         return uno::Sequence< rendering::ARGBColor >();
     }
 
+    virtual uno::Sequence< rendering::ARGBColor > SAL_CALL convertToPARGB( const uno::Sequence< double >& ) throw (lang::IllegalArgumentException, 
+                                                                                                                   uno::RuntimeException)
+    {
+        test(false, "Method not implemented");
+        return uno::Sequence< rendering::ARGBColor >();
+    }
+
     virtual uno::Sequence< double > SAL_CALL convertFromRGB( const uno::Sequence< rendering::RGBColor >& ) throw (lang::IllegalArgumentException, 
                                                                                                                   uno::RuntimeException)
     {
@@ -645,6 +678,13 @@ private:
         return uno::Sequence< double >();
     }
 
+    virtual uno::Sequence< double > SAL_CALL convertFromPARGB( const uno::Sequence< rendering::ARGBColor >& ) throw (lang::IllegalArgumentException, 
+                                                                                                                    uno::RuntimeException)
+    {
+        test(false, "This method is not expected to be called!");
+        return uno::Sequence< double >();
+    }
+
     virtual ::sal_Int32 SAL_CALL getBitsPerPixel(  ) throw (uno::RuntimeException)
     {
         return mnBitsPerPixel;
@@ -660,9 +700,17 @@ private:
         return util::Endianness::LITTLE;
     }
 
-    virtual uno::Sequence< ::sal_Int8 > SAL_CALL convertIntegerColorSpace( const uno::Sequence< ::sal_Int8 >&, 
-                                                                           const uno::Reference< rendering::XIntegerBitmapColorSpace >& ) throw (lang::IllegalArgumentException, 
-                                                                                                                                                 uno::RuntimeException)
+    virtual uno::Sequence< double > SAL_CALL convertFromIntegerColorSpace( const uno::Sequence< ::sal_Int8 >& , 
+                                                                           const uno::Reference< rendering::XColorSpace >& ) throw (lang::IllegalArgumentException, 
+                                                                                                                                    uno::RuntimeException)
+    {
+        test(false, "Method not implemented");
+        return uno::Sequence< double >();
+    }
+
+    virtual uno::Sequence< ::sal_Int8 > SAL_CALL convertToIntegerColorSpace( const uno::Sequence< ::sal_Int8 >& , 
+                                                                             const uno::Reference< rendering::XIntegerBitmapColorSpace >& ) throw (lang::IllegalArgumentException, 
+                                                                                                                                                   uno::RuntimeException)
     {
         test(false, "Method not implemented");
         return uno::Sequence< sal_Int8 >();
@@ -722,6 +770,44 @@ private:
         return aRes;
     }
 
+    virtual uno::Sequence< rendering::ARGBColor > SAL_CALL convertIntegerToPARGB( const uno::Sequence< ::sal_Int8 >& deviceColor ) throw (lang::IllegalArgumentException, 
+                                                                                                                                         uno::RuntimeException)
+    {
+        const sal_Size  nLen( deviceColor.getLength() );
+        const sal_Int32 nBytesPerPixel(mnBitsPerPixel == 8 ? 1 : 4);
+        test(nLen%nBytesPerPixel==0, 
+             "number of channels no multiple of pixel element count");
+
+        uno::Sequence< rendering::ARGBColor > aRes( nLen / nBytesPerPixel );
+        rendering::ARGBColor* pOut( aRes.getArray() );
+
+        if( getPalette().is() )
+        {
+            for( sal_Size i=0; i<nLen; ++i )
+            {
+                *pOut++ = rendering::ARGBColor(
+                    1.0,
+                    vcl::unotools::toDoubleColor(deviceColor[i]),
+                    vcl::unotools::toDoubleColor(deviceColor[i]),
+                    vcl::unotools::toDoubleColor(deviceColor[i]));
+            }
+        }
+        else
+        {
+            for( sal_Size i=0; i<nLen; i+=4 )
+            {
+                const double fAlpha=deviceColor[i+3];
+                *pOut++ = rendering::ARGBColor(
+                    vcl::unotools::toDoubleColor(fAlpha),
+                    vcl::unotools::toDoubleColor(fAlpha*deviceColor[i+0]),
+                    vcl::unotools::toDoubleColor(fAlpha*deviceColor[i+1]),
+                    vcl::unotools::toDoubleColor(fAlpha*deviceColor[i+2]));
+            }
+        }
+
+        return aRes;
+    }
+
     virtual uno::Sequence< ::sal_Int8 > SAL_CALL convertIntegerFromRGB( const uno::Sequence< rendering::RGBColor >& ) throw (lang::IllegalArgumentException, 
                                                                                                                              uno::RuntimeException)
     {
@@ -736,6 +822,13 @@ private:
         return uno::Sequence< sal_Int8 >();
     }
 
+    virtual uno::Sequence< ::sal_Int8 > SAL_CALL convertIntegerFromPARGB( const uno::Sequence< rendering::ARGBColor >& ) throw (lang::IllegalArgumentException, 
+                                                                                                                                uno::RuntimeException)
+    {
+        test(false, "Method not implemented");
+        return uno::Sequence< sal_Int8 >();
+    }
+
 public:
     TestBitmap( const geometry::IntegerSize2D& rSize, bool bPalette ) :
         maSize(rSize),
@@ -784,14 +877,14 @@ public:
 
 void TestWindow::Paint( const Rectangle& )
 {
-    static sal_Int8 lcl_depths[]={1,4,8,16,24,32};
+    static sal_Int8 lcl_depths[]={1,4,8,16,24};
 
     try
     {
         // Testing VclCanvasBitmap wrapper
         // ===============================
 
-        for( int i=0; i<sizeof(lcl_depths)/sizeof(*lcl_depths); ++i )
+        for( unsigned int i=0; i<sizeof(lcl_depths)/sizeof(*lcl_depths); ++i )
         {
             const sal_Int8 nDepth( lcl_depths[i] );
             Bitmap aBitmap(Size(200,200),nDepth);
@@ -801,8 +894,8 @@ void TestWindow::Paint( const Rectangle& )
                                              aBitmap);
                 if( pAcc.get() )
                 {
-                    BitmapColor aBlack;
-                    BitmapColor aWhite;
+                    BitmapColor aBlack(0);
+                    BitmapColor aWhite(0);
                     if( pAcc->HasPalette() )
                     {
                         aBlack.SetIndex( sal::static_int_cast<BYTE>(pAcc->GetBestPaletteIndex(BitmapColor(0,0,0))) );
@@ -943,73 +1036,14 @@ void TestWindow::Paint( const Rectangle& )
         exit(2);
 }
 
-USHORT TestApp::Exception( USHORT nError )
-{
-	switch( nError & EXC_MAJORTYPE )
-	{
-		case EXC_RSCNOTLOADED:
-			Abort( String::CreateFromAscii( 
-                       "Error: could not load language resources.\nPlease check your installation.\n" ) );
-			break;
-	}
-	return 0;
-}
+} // namespace
 
-void TestApp::Main()
+void Main()
 {
-	bool bHelp = false;
-
-	for( USHORT i = 0; i < GetCommandLineParamCount(); i++ )
-	{
-		::rtl::OUString aParam = GetCommandLineParam( i );
-
-		if( aParam.equalsAscii( "--help" ) ||
-			aParam.equalsAscii( "-h" ) )
-				bHelp = true;
-	}
-
-	if( bHelp )
-	{
-        printf( "outdevgrind - Profile OutputDevice\n" );
-		return;
-	}
-
-	//-------------------------------------------------
-	// create the global service-manager
-	//-------------------------------------------------
-    uno::Reference< lang::XMultiServiceFactory > xFactory;
-    try
-    {
-        uno::Reference< uno::XComponentContext > xCtx = ::cppu::defaultBootstrap_InitialComponentContext();
-        xFactory = uno::Reference< lang::XMultiServiceFactory >(  xCtx->getServiceManager(), 
-                                                                  uno::UNO_QUERY );
-        if( xFactory.is() )
-            ::comphelper::setProcessServiceFactory( xFactory );
-    }
-    catch( uno::Exception& )
-    {
-    }
-
-    if( !xFactory.is() )
-    {
-        fprintf( stderr, 
-                 "Could not bootstrap UNO, installation must be in disorder. Exiting.\n" );
-        exit( 1 );
-    }
-
-    // Create UCB.
-    uno::Sequence< uno::Any > aArgs( 2 );
-	aArgs[ 0 ] <<= rtl::OUString::createFromAscii( UCB_CONFIGURATION_KEY1_LOCAL );
-	aArgs[ 1 ] <<= rtl::OUString::createFromAscii( UCB_CONFIGURATION_KEY2_OFFICE );
-    ::ucbhelper::ContentBroker::initialize( xFactory, aArgs );
-
-	TestWindow pWindow;
-	pWindow.Execute();
+	TestWindow aWindow;
+	aWindow.Execute();
+	aWindow.SetText( XubString( RTL_CONSTASCII_USTRINGPARAM( "VCL - canvasbitmaptest" ) ) );
 
-    // clean up UCB
-	::ucbhelper::ContentBroker::deinitialize();
+	Application::Execute();
 }
 
-} // namespace
-
-TestApp aTestApp;
diff --git vcl/test/makefile.mk vcl/test/makefile.mk
index f2f2125..73dd9f8 100644
--- vcl/test/makefile.mk
+++ vcl/test/makefile.mk
@@ -46,13 +46,12 @@ TARGETTYPE=GUI
 
 # --- Files --------------------------------------------------------
 
-OBJFILES= \
+APP1OBJS= \
 	$(OBJ)$/dndtest.obj
 
 
 APP1NOSAL=		TRUE
 APP1TARGET= 	$(TARGET)
-APP1OBJS=	    $(OBJFILES)	$(OBJ)$/salmain.obj
 APP1STDLIBS=	$(CPPULIB)			\
 				$(CPPUHELPERLIB)	\
 				$(TOOLSLIB) 		\
@@ -68,12 +67,6 @@ APP2TARGET= canvasbitmaptest
 APP2OBJS=	\
 	$(OBJ)$/canvasbitmaptest.obj
 
-.IF "$(GUI)"!="UNX"
-	APP2OBJS += $(OBJ)$/salmain.obj
-.ELSE
-	APP2OBJS += $(SLO)$/salmain.obj
-.ENDIF
-
 APP2NOSAL=		TRUE
 APP2STDLIBS=$(TOOLSLIB) 		\
 			$(COMPHELPERLIB)	\
diff --git vcl/unx/source/gdi/salbmp.cxx vcl/unx/source/gdi/salbmp.cxx
index ac8caa8..b64196f 100644
--- vcl/unx/source/gdi/salbmp.cxx
+++ vcl/unx/source/gdi/salbmp.cxx
@@ -141,9 +141,15 @@ BitmapBuffer* X11SalBitmap::ImplCreateDIB( const Size& rSize, USHORT nBitCount,
 				case( 4 ): pDIB->mnFormat |= BMP_FORMAT_4BIT_MSN_PAL; break;
 				case( 8 ): pDIB->mnFormat |= BMP_FORMAT_8BIT_PAL; break;
 #ifdef OSL_BIGENDIAN
-                case(16 ) : pDIB->mnFormat|= BMP_FORMAT_16BIT_TC_MSB_MASK; break;
+                case(16 ): 
+                    pDIB->mnFormat|= BMP_FORMAT_16BIT_TC_MSB_MASK; 
+                    pDIB->maColorMask = ColorMask( 0xf800, 0x07e0, 0x001f );
+                    break;
 #else
-                case(16 ) : pDIB->mnFormat|= BMP_FORMAT_16BIT_TC_LSB_MASK; break;
+                case(16 ): 
+                    pDIB->mnFormat|= BMP_FORMAT_16BIT_TC_LSB_MASK; 
+                    pDIB->maColorMask = ColorMask( 0xf800, 0x07e0, 0x001f );
+                    break;
 #endif
 				default:
 					nBitCount = 24;
@@ -251,7 +257,7 @@ BitmapBuffer* X11SalBitmap::ImplCreateDIB( Drawable aDrawable,
 				case( 16 ):
 				{
 					nDstFormat |= BMP_FORMAT_24BIT_TC_BGR;
-						aSrcBuf.maColorMask = ColorMask( pImage->red_mask, pImage->green_mask, pImage->blue_mask );
+                    aSrcBuf.maColorMask = ColorMask( pImage->red_mask, pImage->green_mask, pImage->blue_mask );
 
 					if( LSBFirst == pImage->byte_order )
                     {
