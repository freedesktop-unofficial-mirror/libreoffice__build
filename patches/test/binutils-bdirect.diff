diff -u -r -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' binutils-2.16/bfd/elf-bfd.h binutils.current/bfd/elf-bfd.h
--- binutils-2.16/bfd/elf-bfd.h	2005-03-03 20:52:31.000000000 +0000
+++ binutils.current/bfd/elf-bfd.h	2005-10-17 11:47:08.000000000 +0100
@@ -396,6 +396,9 @@
   asection *tls_sec;
   bfd_size_type tls_size;
 
+  /* Direct linkage output section */
+  asection *direct_sec;
+
   /* A linked list of BFD's loaded in the link.  */
   struct elf_link_loaded_list *loaded;
 
@@ -1238,6 +1241,7 @@
      name actually used, which will be the DT_SONAME entry if there is
      one.  */
   const char *dt_name;
+  int         dt_needed_idx;
 
   /* Records the result of `get_program_header_size'.  */
   bfd_size_type program_header_size;
@@ -1338,6 +1342,7 @@
 #define elf_local_got_offsets(bfd) (elf_tdata(bfd) -> local_got.offsets)
 #define elf_local_got_ents(bfd) (elf_tdata(bfd) -> local_got.ents)
 #define elf_dt_name(bfd)	(elf_tdata(bfd) -> dt_name)
+#define elf_dt_needed_idx(bfd)	(elf_tdata(bfd) -> dt_needed_idx)
 #define elf_dyn_lib_class(bfd)	(elf_tdata(bfd) -> dyn_lib_class)
 #define elf_bad_symtab(bfd)	(elf_tdata(bfd) -> bad_symtab)
 #define elf_flags_init(bfd)	(elf_tdata(bfd) -> flags_init)

diff -u -r -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' binutils-2.16/bfd/elf.c binutils.current/bfd/elf.c
--- binutils-2.16/bfd/elf.c	2005-03-06 02:02:15.000000000 +0000
+++ binutils.current/bfd/elf.c	2005-10-19 20:25:03.000000000 +0100
@@ -1145,6 +1145,7 @@
 	    case DT_RELCOUNT: name = "RELCOUNT"; break;
 	    case DT_FLAGS_1: name = "FLAGS_1"; break;
 	    case DT_VERSYM: name = "VERSYM"; break;
+	    case DT_DIRECT: name = "DIRECT"; break;
 	    case DT_VERDEF: name = "VERDEF"; break;
 	    case DT_VERDEFNUM: name = "VERDEFNUM"; break;
 	    case DT_VERNEED: name = "VERNEED"; break;
@@ -1495,6 +1496,7 @@
   table->runpath = NULL;
   table->tls_sec = NULL;
   table->tls_size = 0;
+  table->direct_sec = NULL;
   table->loaded = NULL;
   table->is_relocatable_executable = FALSE;
 

diff -u -r -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' binutils-2.16/bfd/elflink.c binutils.current/bfd/elflink.c
--- binutils-2.16/bfd/elflink.c	2005-04-29 14:40:22.000000000 +0100
+++ binutils.current/bfd/elflink.c	2005-10-19 20:02:14.000000000 +0100
@@ -172,6 +172,16 @@
       elf_hash_table (info)->eh_info.hdr_sec = s;
     }
 
+  if ( info->direct )
+    {
+      s = bfd_make_section (abfd, ".direct");
+      if (s == NULL
+	  || ! bfd_set_section_flags (abfd, s, flags | SEC_READONLY)
+	  || ! bfd_set_section_alignment (abfd, s, 2))
+	return FALSE;
+      elf_hash_table (info)->direct_sec = s;
+    }
+
   /* Create sections to hold version informations.  These are removed
      if they are not needed.  */
   s = bfd_make_section (abfd, ".gnu.version_d");
@@ -2193,7 +2203,15 @@
 
   return TRUE;
 }
+
 
+static int
+is_direct (struct bfd_link_info *info, const char *sym)
+{
+  return info->direct && !info->direct_vague (sym);
+}
+
+
 /* Fix up the flags for a symbol.  This handles various cases which
    can only be fixed after all the input files are seen.  This is
    currently called by both adjust_dynamic_symbol and
@@ -2284,7 +2302,8 @@
       && eif->info->shared
       && is_elf_hash_table (eif->info->hash)
       && (eif->info->symbolic
-	  || ELF_ST_VISIBILITY (h->other) != STV_DEFAULT)
+	  || ELF_ST_VISIBILITY (h->other) != STV_DEFAULT
+	  || is_direct (eif->info, "foo") )
       && h->def_regular)
     {
       const struct elf_backend_data *bed;
@@ -2519,7 +2538,8 @@
 
   /* Identify the cases where name binding rules say that a
      visible symbol resolves locally.  */
-  binding_stays_local_p = info->executable || info->symbolic;
+  binding_stays_local_p = (info->executable || info->symbolic
+			   || is_direct (info, "baa"));
 
   switch (ELF_ST_VISIBILITY (h->other))
     {
@@ -2582,7 +2602,8 @@
   /* At this point, we know the symbol is defined and dynamic.  In an
      executable it must resolve locally, likewise when building symbolic
      shared libraries.  */
-  if (info->executable || info->symbolic)
+  if (info->executable || info->symbolic ||
+      is_direct (info, "baz"))
     return TRUE;
 
   /* Now deal with defined dynamic symbols in shared libraries.  Ones
@@ -2848,6 +2869,9 @@
 
       if (!_bfd_elf_add_dynamic_entry (info, DT_NEEDED, strindex))
 	return -1;
+      elf_dt_needed_idx (abfd) = ++(info->dt_needed_index);
+      fprintf (stderr, "Set soname '%s' as index %d\n",
+	       soname, info->dt_needed_index);
     }
   else
     /* We were just checking for existence of the tag.  */
@@ -5671,6 +5695,24 @@
 	    return FALSE;
 	}
 
+      /* Create the direct bindings section - 1 entry per dynsym */
+      s = bfd_get_section_by_name (dynobj, ".direct");
+      if (s)
+        {
+  	  if (dynsymcount == 0)
+	    _bfd_strip_section_from_output (info, s);
+	  else
+	    {
+	      s->size = dynsymcount * sizeof (Elf_External_Direct);
+	      s->contents = bfd_zalloc (output_bfd, s->size);
+	      if (s->contents == NULL)
+	        return FALSE;
+
+	      if (!_bfd_elf_add_dynamic_entry (info, DT_DIRECT, 0))
+	        return FALSE;
+	    }
+	}
+
       /* Set the size of the .dynsym and .hash sections.  We counted
 	 the number of dynamic symbols in elf_link_add_object_symbols.
 	 We will build the contents of .dynsym and .hash when we build
@@ -5749,6 +5791,8 @@
   asection *hash_sec;
   /* symbol version section (.gnu.version).  */
   asection *symver_sec;
+  /* .direct linkage section */
+  asection *direct_sec;
   /* Buffer large enough to hold contents of any section.  */
   bfd_byte *contents;
   /* Buffer large enough to hold external relocs of any section.  */
@@ -6603,6 +6647,35 @@
 	  eversym += h->dynindx;
 	  _bfd_elf_swap_versym_out (finfo->output_bfd, &iversym, eversym);
 	}
+
+      if (finfo->direct_sec)
+	{
+	  bfd_vma offset = 2 * h->dynindx;
+	  if (offset > finfo->direct_sec->size)
+	    fprintf (stderr, "Out of bounds direct section index %d\n",
+		     (int) offset);
+	  else
+	    {
+	      int dt_index = 0;
+
+	      fprintf( stderr, "Symbol '%s' type %d\n",
+		       h->root.root.string, h->root.type);
+
+	      if (h->root.type == bfd_link_hash_defined
+		  || h->root.type == bfd_link_hash_defweak)
+	        {
+		   asection *sec = h->root.u.def.section;
+		   if (sec && sec->owner)
+		     dt_index = elf_dt_needed_idx (sec->owner);
+		   fprintf (stderr, "Section %p, owner '%s' [%d] offset %d\n",
+			    sec, sec && sec->owner ? sec->owner->filename : "<noowner?>",
+			    dt_index, (int) offset);
+		}
+	      bfd_put_16 (finfo->output_bfd,
+			  dt_index,
+			  finfo->direct_sec->contents + offset);
+	    }
+	}
     }
 
   /* If we're stripping it, then it was just a dynamic symbol, and
@@ -7727,6 +7800,8 @@
   if (finfo.symstrtab == NULL)
     return FALSE;
 
+  finfo.direct_sec = bfd_get_section_by_name (dynobj, ".direct");
+
   if (! dynamic)
     {
       finfo.dynsym_sec = NULL;
@@ -8492,6 +8567,9 @@
 	    case DT_VERNEED:
 	      name = ".gnu.version_r";
 	      goto get_vma;
+	    case DT_DIRECT:
+	      name = ".direct";
+	      goto get_vma;
 	    case DT_VERSYM:
 	      name = ".gnu.version";
 	    get_vma:
@@ -8560,6 +8638,10 @@
 	    continue;
 	  if (elf_hash_table (info)->eh_info.hdr_sec == o)
 	    continue;
+	  if (elf_hash_table (info)->direct_sec == o)
+	    {
+	      fprintf (stderr, "** ERROR ** omit direct section output\n");
+	    }
 	  if ((elf_section_data (o->output_section)->this_hdr.sh_type
 	       != SHT_STRTAB)
 	      || strcmp (bfd_get_section_name (abfd, o), ".dynstr") != 0)

diff -u -r -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' binutils-2.16/binutils/readelf.c binutils.current/binutils/readelf.c
--- binutils-2.16/binutils/readelf.c	2005-04-20 19:43:36.000000000 +0100
+++ binutils.current/binutils/readelf.c	2005-10-19 20:24:32.000000000 +0100
@@ -143,6 +143,7 @@
 int do_dynamic;
 int do_syms;
 int do_reloc;
+int do_direct;
 int do_sections;
 int do_section_groups;
 int do_segments;
@@ -1519,6 +1520,7 @@
     case DT_SYMINFO:	return "SYMINFO"; /* aka ADDRRNGHI */
 
     case DT_VERSYM:	return "VERSYM";
+    case DT_DIRECT:	return "DIRECT";
 
     case DT_RELACOUNT:	return "RELACOUNT";
     case DT_RELCOUNT:	return "RELCOUNT";
@@ -2590,6 +2592,7 @@
   {"symbols",	       no_argument, 0, 's'},
   {"syms",	       no_argument, 0, 's'},
   {"relocs",	       no_argument, 0, 'r'},
+  {"direct",	       no_argument, 0, 'y'},
   {"notes",	       no_argument, 0, 'n'},
   {"dynamic",	       no_argument, 0, 'd'},
   {"arch-specific",    no_argument, 0, 'A'},
@@ -2626,6 +2629,7 @@
       --symbols          An alias for --syms\n\
   -n --notes             Display the core notes (if present)\n\
   -r --relocs            Display the relocations (if present)\n\
+  -y --direct            Display direct linkage table (if present)\n\
   -u --unwind            Display the unwind info (if present)\n\
   -d --dynamic           Display the dynamic section (if present)\n\
   -V --version-info      Display the version sections (if present)\n\
@@ -2693,7 +2697,7 @@
     usage ();
 
   while ((c = getopt_long
-	  (argc, argv, "ersuahnldSDAIgw::x:i:vVWH", options, NULL)) != EOF)
+	  (argc, argv, "erysuahnldSDAIgw::x:i:vVWH", options, NULL)) != EOF)
     {
       char *cp;
       int section;
@@ -2710,6 +2714,7 @@
 	case 'a':
 	  do_syms++;
 	  do_reloc++;
+	  do_direct++;
 	  do_unwind++;
 	  do_dynamic++;
 	  do_header++;
@@ -2738,6 +2743,9 @@
 	case 'r':
 	  do_reloc++;
 	  break;
+	case 'y':
+	  do_direct++;
+	  break;
 	case 'u':
 	  do_unwind++;
 	  break;
@@ -2943,7 +2951,7 @@
 	}
     }
 
-  if (!do_dynamic && !do_syms && !do_reloc && !do_unwind && !do_sections
+  if (!do_dynamic && !do_syms && !do_reloc && !do_direct && !do_unwind && !do_sections
       && !do_segments && !do_header && !do_dump && !do_version
       && !do_histogram && !do_debugging && !do_arch && !do_notes
       && !do_section_groups)
@@ -4328,6 +4336,114 @@
   return 1;
 }
 
+static void
+print_dt_needed_name (int idx)
+{
+  const char *name = NULL;
+  Elf_Internal_Dyn *entry;
+
+  for (entry = dynamic_section;
+       entry < dynamic_section + dynamic_nent && idx > 0;
+       entry++)
+    if (entry->d_tag == DT_NEEDED)
+      idx--;
+  
+  if (idx == 0)
+    {
+      if (VALID_DYNAMIC_NAME (entry->d_un.d_val))
+	name = GET_DYNAMIC_NAME (entry->d_un.d_val);
+      else
+	name = NULL;
+    }
+  if (!name)
+    name = _("<unknown>");
+  if (do_wide)
+    printf ("%s", name);
+  else
+    printf ("%-25s", name);
+}
+
+static int
+process_direct (FILE *file)
+{
+  unsigned int i;
+  unsigned int si;
+  char *strtab;
+  unsigned char *directtab;
+  Elf_Internal_Sym *symtab = NULL;
+  Elf_Internal_Sym *psym;
+  Elf_Internal_Shdr *direct = NULL;
+  Elf_Internal_Shdr *dynsym = NULL;
+  Elf_Internal_Shdr *section;
+
+  if (!do_direct)
+    return 1;
+  if (!dynamic_symbols || !dynamic_section || !dynamic_strings)
+    return 1;
+
+  for (i = 0, section = section_headers;
+       i < elf_header.e_shnum;
+       i++, section++)
+    {
+      if (section->sh_type == SHT_DYNSYM)
+        dynsym = section;
+      if (!strcmp (SECTION_NAME (section), ".direct"))
+        direct = section;
+    }
+  if (!dynsym || !direct)
+    return 1;
+  
+  symtab = GET_ELF_SYMBOLS (file, dynsym);
+  if (!symtab)
+    return 1;
+
+  directtab = get_data (NULL, file, direct->sh_offset,
+			direct->sh_size, _("direct linkage table"));
+  if (!symtab)
+  {
+    free (symtab);
+    return 1;
+  }
+
+  if (dynsym->sh_link == elf_header.e_shstrndx)
+    strtab = string_table;
+  else
+    {
+      Elf_Internal_Shdr *string_sec;
+
+      string_sec = SECTION_HEADER (dynsym->sh_link);
+
+      strtab = get_data (NULL, file, string_sec->sh_offset,
+			 string_sec->sh_size, _("string table"));
+    }
+
+  assert (strtab != NULL);
+
+  printf (_("\nDirect relocations for image:\n"));
+  printf (_("   Num:  Index     Binding                 Symbol\n"));
+  for (si = 0, psym = symtab;
+       si < dynsym->sh_size / dynsym->sh_entsize;
+       si++, psym++)
+    {
+       unsigned int field;
+       printf ("%6d:   ", si);
+       field = byte_get (directtab + (si * 2), 2);
+       printf ("[0x%.2x] ", field);
+       print_dt_needed_name (field - 1);
+       printf ("  ");
+       print_symbol (25, strtab + psym->st_name);
+       printf ("\n");
+    }
+
+
+  free (symtab);
+  if (strtab != string_table)
+    free (strtab);
+
+  return 1;
+}
+
+
 /* Process the unwind section.  */
 
 #include "unwind-ia64.h"
@@ -11784,6 +11900,8 @@
 
   process_relocs (file);
 
+  process_direct (file);
+
   process_unwind (file);
 
   process_symbol_table (file);

diff -u -r -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' binutils-2.16/include/bfdlink.h binutils.current/include/bfdlink.h
--- binutils-2.16/include/bfdlink.h	2005-03-03 11:58:00.000000000 +0000
+++ binutils.current/include/bfdlink.h	2005-10-17 15:23:49.000000000 +0100
@@ -244,6 +244,9 @@
   /* TRUE if BFD should pre-bind symbols in a shared object.  */
   unsigned int symbolic: 1;
 
+  /* TRUE if BFD should bind symbols directly to resolved at link time.  */
+  unsigned int direct: 1;
+
   /* TRUE if BFD should export all symbols in the dynamic symbol table
      of an executable, rather than only those used.  */
   unsigned int export_dynamic: 1;
@@ -416,6 +419,12 @@
 
   /* Start and end of RELRO region.  */
   bfd_vma relro_start, relro_end;
+
+  /* function to filter out symbols that must not be directly linked */
+  int (*direct_vague) (const char *symbol);
+
+  /* current max dtinfo section number */
+  int dt_needed_index;
 };
 
 /* This structures holds a set of callback functions.  These are

diff -u -r -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' binutils-2.16/include/elf/common.h binutils.current/include/elf/common.h
--- binutils-2.16/include/elf/common.h	2004-10-08 14:55:08.000000000 +0100
+++ binutils.current/include/elf/common.h	2005-10-15 11:31:38.000000000 +0100
@@ -586,6 +586,7 @@
 
 /* This tag is a GNU extension to the Solaris version scheme.  */
 #define DT_VERSYM	0x6ffffff0
+#define DT_DIRECT	0x6ffffff1 /* FIXME - how are these allocated ? */
 
 #define DT_LOPROC	0x70000000
 #define DT_HIPROC	0x7fffffff

diff -u -r -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' binutils-2.16/include/elf/external.h binutils.current/include/elf/external.h
--- binutils-2.16/include/elf/external.h	2005-03-03 11:58:05.000000000 +0000
+++ binutils.current/include/elf/external.h	2005-10-15 11:29:45.000000000 +0100
@@ -213,6 +213,10 @@
   unsigned char		vd_next[4];
 } Elf_External_Verdef;
 
+typedef struct {
+  unsigned char		dir_libidx[2];
+} Elf_External_Direct;
+
 /* This structure appears in a SHT_GNU_verdef section.  */
 
 typedef struct {

Files binutils-2.16/ld/ld-new and binutils.current/ld/ld-new differ
diff -u -r -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' binutils-2.16/ld/lexsup.c binutils.current/ld/lexsup.c
--- binutils-2.16/ld/lexsup.c	2005-03-03 11:52:00.000000000 +0000
+++ binutils.current/ld/lexsup.c	2005-10-17 13:05:31.000000000 +0100
@@ -70,6 +70,7 @@
   OPTION_CREF,
   OPTION_DEFSYM,
   OPTION_DEMANGLE,
+  OPTION_DIRECT,
   OPTION_DYNAMIC_LINKER,
   OPTION_SYSROOT,
   OPTION_EB,
@@ -341,6 +342,8 @@
     '\0', NULL, NULL, ONE_DASH },
   { {"Bsymbolic", no_argument, NULL, OPTION_SYMBOLIC},
     '\0', NULL, N_("Bind global references locally"), ONE_DASH },
+  { {"Bdirect", no_argument, NULL, OPTION_DIRECT},
+    '\0', NULL, N_("Direct-linkage the the shared libraries"), ONE_DASH },
   { {"check-sections", no_argument, NULL, OPTION_CHECK_SECTIONS},
     '\0', NULL, N_("Check section addresses for overlaps (default)"),
     TWO_DASHES },
@@ -522,6 +525,13 @@
 
 #define OPTION_COUNT ARRAY_SIZE (ld_options)
 
+static int
+is_direct_vague (const char *symbol)
+{
+  fprintf (stderr, "Is '%s' vague\n", symbol);
+  return 0;
+}
+
 void
 parse_args (unsigned argc, char **argv)
 {
@@ -746,6 +756,10 @@
 	      cplus_demangle_set_style (style);
 	    }
 	  break;
+	case OPTION_DIRECT:
+	  link_info.direct = TRUE;
+	  link_info.direct_vague = is_direct_vague;
+	  break;
 	case 'I':		/* Used on Solaris.  */
 	case OPTION_DYNAMIC_LINKER:
 	  command_line.interpreter = optarg;
