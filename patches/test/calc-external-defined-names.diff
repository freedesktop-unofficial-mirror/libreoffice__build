diff --git sc/inc/compiler.hrc sc/inc/compiler.hrc
index 92b7e82..22d77cb 100644
--- sc/inc/compiler.hrc
+++ sc/inc/compiler.hrc
@@ -39,25 +39,26 @@
 #define SC_OPCODE_STOP                2
 #define SC_OPCODE_EXTERNAL            3
 #define SC_OPCODE_NAME                4
-#define SC_OPCODE_IF                  5     /* jump commands */
-#define SC_OPCODE_CHOSE               6
-#define SC_OPCODE_OPEN                7     /* parentheses and separators */
-#define SC_OPCODE_CLOSE               8
-#define SC_OPCODE_SEP                 9
-#define SC_OPCODE_MISSING            10     /* special OpCodes */
-#define SC_OPCODE_BAD                11
-#define SC_OPCODE_SPACES             12
-#define SC_OPCODE_MAT_REF            13
-#define SC_OPCODE_DB_AREA            14     /* additional access operators */
-#define SC_OPCODE_MACRO              15
-#define SC_OPCODE_COL_ROW_NAME       16
-#define SC_OPCODE_COL_ROW_NAME_AUTO  17
-#define SC_OPCODE_PERCENT_SIGN       18     /* operator _follows_ value */
-#define SC_OPCODE_ARRAY_OPEN         19
-#define SC_OPCODE_ARRAY_CLOSE        20
-#define SC_OPCODE_ARRAY_ROW_SEP      21
-#define SC_OPCODE_ARRAY_COL_SEP      22     /* some convs use sep != col_sep */
-#define SC_OPCODE_STOP_DIV           23
+#define SC_OPCODE_EXTERNAL_NAME       5
+#define SC_OPCODE_IF                  6     /* jump commands */
+#define SC_OPCODE_CHOSE               7
+#define SC_OPCODE_OPEN                8     /* parentheses and separators */
+#define SC_OPCODE_CLOSE               9
+#define SC_OPCODE_SEP                10
+#define SC_OPCODE_MISSING            11     /* special OpCodes */
+#define SC_OPCODE_BAD                12
+#define SC_OPCODE_SPACES             13
+#define SC_OPCODE_MAT_REF            14
+#define SC_OPCODE_DB_AREA            15     /* additional access operators */
+#define SC_OPCODE_MACRO              16
+#define SC_OPCODE_COL_ROW_NAME       17
+#define SC_OPCODE_COL_ROW_NAME_AUTO  18
+#define SC_OPCODE_PERCENT_SIGN       19     /* operator _follows_ value */
+#define SC_OPCODE_ARRAY_OPEN         20
+#define SC_OPCODE_ARRAY_CLOSE        21
+#define SC_OPCODE_ARRAY_ROW_SEP      22
+#define SC_OPCODE_ARRAY_COL_SEP      23     /* some convs use sep != col_sep */
+#define SC_OPCODE_STOP_DIV           24
 
 /*** error constants #... ***/
 #define SC_OPCODE_START_ERRORS       30
diff --git sc/inc/compiler.hxx sc/inc/compiler.hxx
index 8036115..6d89e05 100644
--- sc/inc/compiler.hxx
+++ sc/inc/compiler.hxx
@@ -45,6 +45,7 @@
 #include <unotools/charclass.hxx>
 #include <rtl/ustrbuf.hxx>
 #include <com/sun/star/uno/Sequence.hxx>
+#include <vector>
 
 namespace com { namespace sun { namespace star {
     namespace sheet {
@@ -150,6 +151,10 @@ public:
             bool        bHasForceArray;
         } sbyte;
         ComplRefData aRef;
+        struct {
+            sal_Unicode cFile[MAXSTRLEN+1];
+            sal_Unicode cName[MAXSTRLEN+1];
+        } extname;
         ScMatrix*    pMat;
         USHORT       nIndex;                // index into name collection
         sal_Unicode  cStr[ MAXSTRLEN+1 ];   // string (up to 255 characters + 0)
@@ -179,6 +184,7 @@ public:
     void SetDouble( double fVal );
     void SetInt( int nVal );
     void SetName( USHORT n );
+    void SetExternalName( const String& rFile, const String& rName );
     void SetMatrix( ScMatrix* p );
     void SetExternal(const sal_Unicode* pStr);
     // These methods are ok to use, reference count not cleared.
@@ -227,6 +233,16 @@ public:
                                    xub_StrLen nSrcPos,
                                    const CharClass* pCharClass) const = 0;
 
+        /** 
+         * Parse the symbol string and pick up the file name and the external 
+         * range name. 
+         *
+         * @return true on successful parse, or false otherwise.
+         */
+        virtual bool parseExternalName( const String& rSymbol, String& rFile, String& rName ) const = 0;
+
+        virtual String makeExternalNameStr( const String& rFile, const String& rName ) const = 0;
+
         enum SpecialSymbolType
         {
             /** 
@@ -443,6 +459,7 @@ private:
     BOOL IsDoubleReference( const String& );
     BOOL IsMacro( const String& );
     BOOL IsNamedRange( const String& );
+    bool IsExternalNamedRange( const String& rSymbol );
     BOOL IsDBRange( const String& );
     BOOL IsColRowName( const String& );
     BOOL IsBoolean( const String& );
diff --git sc/inc/document.hxx sc/inc/document.hxx
index 8a648d3..82bd60a 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -624,6 +624,8 @@ SC_DLLPUBLIC	ScDBCollection*	GetDBCollection() const;
 									const String& aFileName,
 									const String& aTabName );
 
+    ScTokenArray*   FindExternalRangeName( const String& rFile, const String& rName, const ScAddress& rCurPos );
+
     /** Creates a new sheet, and makes it linked to the specified sheet in an external document.
         @param rnTab  (out-param) Returns the sheet index, if sheet could be inserted).
         @return  TRUE = Sheet created, rnTab contains valid sheet index. */
diff --git sc/inc/opcode.hxx sc/inc/opcode.hxx
index 285104d..b72ebad 100644
--- sc/inc/opcode.hxx
+++ sc/inc/opcode.hxx
@@ -44,6 +44,7 @@ enum OpCodeEnum
 		ocStop				= SC_OPCODE_STOP,
 		ocExternal			= SC_OPCODE_EXTERNAL,
 		ocName				= SC_OPCODE_NAME,
+        ocExternalName      = SC_OPCODE_EXTERNAL_NAME,
 	// Jump commands
 		ocIf				= SC_OPCODE_IF,
 		ocChose				= SC_OPCODE_CHOSE,
diff --git sc/inc/token.hxx sc/inc/token.hxx
index 23decd6..0cc2f24 100644
--- sc/inc/token.hxx
+++ sc/inc/token.hxx
@@ -64,7 +64,7 @@ enum StackVarEnum
                                         // cell during import, having a double
                                         // and/or string result and a formula
                                         // string to be compiled.
-
+    svExternalName,
     svError,                            // error token
     svMissing = 0x70,                   // 0 or ""
     svUnknown                           // unknown StackType
@@ -151,6 +151,8 @@ public:
     virtual double              GetDouble() const;
     virtual double&             GetDoubleAsReference();
     virtual const String&       GetString() const;
+    virtual const String&       GetString( USHORT ) const;
+    virtual USHORT              GetStringCount() const;
     virtual const SingleRefData&    GetSingleRef() const;
     virtual SingleRefData&      GetSingleRef();
     virtual const ComplRefData& GetDoubleRef() const;
@@ -171,6 +173,7 @@ public:
     virtual       ScRefList*    GetRefList();
     virtual USHORT              GetError() const;
     virtual void                SetError( USHORT );
+    virtual bool                IsExternalRef() const;
 
             ScToken*            Clone() const;
 
@@ -446,6 +449,39 @@ public:
     virtual BOOL                operator==( const ScToken& rToken ) const;
 };
 
+/** 
+ *  represents an external cell reference that points to a cell outside
+ *  the current document.  The cell address must be absolute, and the
+ *  value may be cached.
+ */
+class ScExternalSingleRefToken : public ScToken
+{
+private:
+    SingleRefData       maSingleRef;
+    String  maFile;
+
+public:
+    ScExternalSingleRefToken( SCsCOL nCol, SCsROW nRow, SCsTAB nTab, const String& rFile );
+    ScExternalSingleRefToken( const ScExternalSingleRefToken& r );
+    virtual ~ScExternalSingleRefToken();
+    virtual const SingleRefData&    GetSingleRef() const;
+    virtual const String&           GetString() const;
+    virtual bool                    IsExternalRef() const;
+};
+
+class ScExternalNameToken : public ScOpToken
+{
+private:
+    ::std::vector<String>   maData;
+public:
+                                ScExternalNameToken( const String& rFile, const String& rName );
+                                ScExternalNameToken( const ScExternalNameToken& r );
+    virtual                     ~ScExternalNameToken();
+    virtual const String&       GetString( USHORT n ) const;
+    virtual USHORT              GetStringCount() const;
+    virtual BOOL                operator==( const ScToken& rToken ) const;
+};
+
 
 class ScJumpToken : public ScOpToken
 {
diff --git sc/source/core/data/documen3.cxx sc/source/core/data/documen3.cxx
index 541e2e4..5f33212 100644
--- sc/source/core/data/documen3.cxx
+++ sc/source/core/data/documen3.cxx
@@ -81,7 +81,10 @@
 #include "svtools/PasswordHelper.hxx"
 #include "tabprotection.hxx"
 
+#include <memory>
+
 using namespace com::sun::star;
+using ::std::auto_ptr;
 
 //------------------------------------------------------------------------
 
@@ -478,6 +481,214 @@ BOOL ScDocument::LinkExternalTab( SCTAB& rTab, const String& aDocTab,
 	return TRUE;
 }
 
+static bool lcl_AddSingleRefToTokenArray(ScBaseCell* pCell, ScTokenArray& rArray)
+{
+    switch (pCell->GetCellType())
+    {
+        case CELLTYPE_STRING:
+        {
+            String aStr;
+            static_cast<ScStringCell*>(pCell)->GetString(aStr);
+            ScStringToken aToken(aStr);
+            rArray.AddToken(aToken);
+            return true;
+        }
+        break;
+        case CELLTYPE_VALUE:
+        {
+            double fVal = static_cast<ScValueCell*>(pCell)->GetValue();
+            ScDoubleToken aToken(fVal);
+            rArray.AddToken(aToken);
+            return true;
+        }
+        break;
+        case CELLTYPE_FORMULA:
+        {
+            ScFormulaCell* pFCell = static_cast<ScFormulaCell*>(pCell);
+            if (pFCell->IsValue())
+            {
+                double fVal = pFCell->GetValue();
+                ScDoubleToken aToken(fVal);
+                rArray.AddToken(aToken);
+                return true;
+            }
+            else
+            {
+                String aStr;
+                pFCell->GetString(aStr);
+                ScStringToken aToken(aStr);
+                rArray.AddToken(aToken);
+                return true;
+            }
+        }
+        break;
+        default:
+            DBG_ERROR("attempted to convert an unknown cell type.");
+    }
+
+    return false;
+}
+
+static bool lcl_AddDoubleRefToTokenArray(SCsTAB nTab1, SCsCOL nCol1, SCsROW nRow1,
+                                         SCsTAB nTab2, SCsCOL nCol2, SCsROW nRow2,
+                                         ScDocument* pSrcDoc, ScTokenArray& rArray)
+{
+    for (SCsTAB nTab = nTab1; nTab <= nTab2; ++nTab)
+    {
+        ScMatrixRef xMat = new ScMatrix(
+            static_cast<SCSIZE>(nCol2-nCol1+1),
+            static_cast<SCSIZE>(nRow2-nRow1+1));
+
+        for (SCsCOL nCol = nCol1; nCol <= nCol2; ++nCol)
+        {
+            for (SCsROW nRow = nRow1; nRow <= nRow2; ++nRow)
+            {
+                SCSIZE nC = nCol - nCol1, nR = nRow - nRow1;
+                ScBaseCell* pCell;
+                pSrcDoc->GetCell(nCol, nRow, nTab, pCell);
+                if (pCell)
+                {
+                    switch (pCell->GetCellType())
+                    {
+                        case CELLTYPE_STRING:
+                        {
+                            String aStr;
+                            static_cast<ScStringCell*>(pCell)->GetString(aStr);
+                            xMat->PutString(aStr, nC, nR);
+                        }
+                        break;
+                        case CELLTYPE_VALUE:
+                        {
+                            double fVal = static_cast<ScValueCell*>(pCell)->GetValue();
+                            xMat->PutDouble(fVal, nC, nR);
+                        }
+                        break;
+                        case CELLTYPE_FORMULA:
+                        {
+                            ScFormulaCell* pFCell = static_cast<ScFormulaCell*>(pCell);
+                            if (pFCell->IsValue())
+                            {
+                                double fVal = pFCell->GetValue();
+                                xMat->PutDouble(fVal, nC, nR);
+                            }
+                            else
+                            {
+                                String aStr;
+                                pFCell->GetString(aStr);
+                                xMat->PutString(aStr, nC, nR);
+                            }
+                        }
+                        break;
+                        default:
+                            DBG_ERROR("attempted to convert an unknown cell type.");
+                    }
+                }
+                else
+                {
+                    xMat->PutEmpty(nC, nR);
+                }
+            }
+        }
+        ScMatrix* pMat2 = xMat;
+        ScMatrixToken aToken(pMat2);
+        rArray.AddToken(aToken);
+    }
+    return true;
+}
+
+ScTokenArray* ScDocument::FindExternalRangeName( const String& rFile, const String& rName, const ScAddress& rCurPos )
+{
+    fprintf(stdout, "ScDocument::FindExternalRangeName: --begin (file = '%s'; name = '%s')\n",
+            rtl::OUStringToOString(rFile, RTL_TEXTENCODING_UTF8).getStr(), 
+            rtl::OUStringToOString(rName, RTL_TEXTENCODING_UTF8).getStr());
+
+    String aFilterName, aOptions;
+    sal_uInt32 nLinkCnt = pExtDocOptions ? pExtDocOptions->GetDocSettings().mnLinkCnt : 0;
+    ScDocumentLoader aLoader(rFile, aFilterName, aOptions, nLinkCnt + 1);
+    if (aLoader.IsError())
+        return NULL;
+
+    // TODO: Find a way to cache the source document to avoid loading it for
+    // every single external cell reference.
+
+    ScDocument* pSrcDoc = aLoader.GetDocument();
+    ScRangeName* pExtNames = pSrcDoc->GetRangeName();
+    String aUpperName = ScGlobal::pCharClass->upper(rName);
+    USHORT n;
+    bool bRes = pExtNames->SearchNameUpper(aUpperName, n);
+    if (!bRes)
+        return NULL;
+
+    ScRangeData* p = (*pExtNames)[n];
+    if (!p)
+        return NULL;
+
+    // Parse all tokens in this external range data, and replace each absolute 
+    // reference token with an external reference token, and cache them.  Also
+    // register the source document with the link manager if it's a new
+    // source.
+
+    auto_ptr<ScTokenArray> pNew(new ScTokenArray);
+
+    ScTokenArray* pCode = p->GetCode();
+    for (ScToken* pToken = pCode->First(); pToken; pToken = pCode->Next())
+    {
+        bool bTokenAdded = false;
+        switch (pToken->GetType())
+        {
+            case svSingleRef:
+            {
+                fprintf(stdout, "ScDocument::FindExternalRangeName:   single ref\n");
+                SingleRefData aRef(pToken->GetSingleRef());
+                if (aRef.IsTabRel())
+                    break;
+
+                // The sheet reference is absolute.  Get the cell from the 
+                // source document, and convert it to a static value.
+    
+                aRef.CalcAbsIfRel(rCurPos);
+                ScBaseCell* pCell;
+                pSrcDoc->GetCell(aRef.nCol, aRef.nRow, aRef.nTab, pCell);
+                if (pCell)
+                    bTokenAdded = lcl_AddSingleRefToTokenArray(pCell, *pNew);        
+
+                if (!bTokenAdded)
+                {
+                    // Cell in the source document is probably empty.
+                    ScEmptyCellToken aToken(false, false);
+                    pNew->AddToken(aToken);
+                    bTokenAdded = true;
+                }
+            }
+            break;
+            case svDoubleRef:
+            {
+                fprintf(stdout, "ScDocument::FindExternalRangeName:   double ref\n");
+                ComplRefData aComRef(pToken->GetDoubleRef());
+                if (aComRef.Ref1.IsTabRel() || aComRef.Ref2.IsTabRel())
+                    break;
+
+                aComRef.CalcAbsIfRel(rCurPos);
+                SCsTAB nTab1 = aComRef.Ref1.nTab;
+                SCsCOL nCol1 = aComRef.Ref1.nCol;
+                SCsROW nRow1 = aComRef.Ref1.nRow;
+                SCsTAB nTab2 = aComRef.Ref2.nTab;
+                SCsCOL nCol2 = aComRef.Ref2.nCol;
+                SCsROW nRow2 = aComRef.Ref2.nRow;
+                
+                bTokenAdded = lcl_AddDoubleRefToTokenArray(
+                    nTab1, nCol1, nRow1, nTab2, nCol2, nRow2, pSrcDoc, *pNew);
+            }
+            break;
+        }
+        
+        if (!bTokenAdded)
+            pNew->AddToken(*pToken);
+    }
+
+    return pNew.release();
+}
+
 BOOL ScDocument::InsertLinkedEmptyTab( SCTAB& rnTab, const String& rFileName,
         const String& rFilterName, const String& rFilterOpt, const String& rTabName )
 {
diff --git sc/source/core/tool/compiler.cxx sc/source/core/tool/compiler.cxx
index 7caea76..2fbeb71 100644
--- sc/source/core/tool/compiler.cxx
+++ sc/source/core/tool/compiler.cxx
@@ -74,8 +74,11 @@
 #include "parclass.hxx"
 #include "autonamecache.hxx"
 
+#include <stdio.h>
+
 using namespace ::com::sun::star;
 using rtl::OUString;
+using ::std::vector;
 
 #if OSL_DEBUG_LEVEL > 1
 // For some unknown reason the identical dbg_dump utilities in
@@ -1361,6 +1364,64 @@ struct ConventionOOO_A1 : public Convention_A1
 
         return sal_Unicode(0);
     }
+
+    virtual bool parseExternalName( const String& rSymbol, String& rFile, String& rName ) const
+    {
+        // in OOO A1, an external name syntax is as follows:
+        // 
+        //   'file:///path/to/source'#ExternalName
+
+        String aTmpFile, aTmpName;
+        xub_StrLen nLen = rSymbol.Len();
+        const sal_Unicode* p = rSymbol.GetBuffer();
+        bool bInFilePath = false;
+        bool bInName = false;
+        sal_Unicode cPrev = 0;
+        for (xub_StrLen i = 0; i < nLen; ++i, ++p)
+        {
+            const sal_Unicode c = *p;
+            if (c == '\'')
+            {
+                if (!bInFilePath && i != 0)
+                    // The first character must be a single quote.
+                    return false;
+
+                bInFilePath = !bInFilePath;
+            }
+            else if (bInFilePath)
+                aTmpFile.Append(c);
+            else if (bInName)
+                aTmpName.Append(c);
+            else if (c == '#')
+            {
+                if (cPrev != '\'')
+                    // '#' must immediately follow the closing single quote.
+                    return false;
+
+                bInName = true;
+            }
+
+            cPrev = c;
+        }
+
+        if (aTmpFile.Len() == 0 || aTmpName.Len() == 0)
+            return false;
+
+        rFile = aTmpFile;
+        rName = aTmpName;
+
+        return true;
+    }
+
+    virtual String makeExternalNameStr( const String& rFile, const String& rName ) const
+    {
+        String aStr;
+        aStr.Append(sal_Unicode('\''));
+        aStr.Append(rFile);
+        aStr.AppendAscii("\'#");
+        aStr.Append(rName);
+        return aStr;
+    }
 };
 
 
@@ -1480,6 +1541,16 @@ struct ConventionXL
         }
         return sal_Unicode(0);
     }
+
+    static bool parseExternalName( const String& rSymbol, String& rFile, String& rName )
+    {
+        return false;
+    }
+
+    static String makeExternalNameStr( const String& rFile, const String& rName )
+    {
+        return String();
+    }
 };
 
 struct ConventionXL_A1 : public Convention_A1, public ConventionXL
@@ -1561,6 +1632,16 @@ struct ConventionXL_A1 : public Convention_A1, public ConventionXL
     {
         return ConventionXL::getSpecialSymbol(eSymType);
     }
+
+    virtual bool parseExternalName( const String& rSymbol, String& rFile, String& rName ) const
+    {
+        return ConventionXL::parseExternalName(rSymbol, rFile, rName);
+    }
+
+    virtual String makeExternalNameStr( const String& rFile, const String& rName ) const
+    {
+        return ConventionXL::makeExternalNameStr(rFile, rName);
+    }
 };
 
 static const ConventionXL_A1 ConvXL_A1;
@@ -1688,6 +1769,16 @@ struct ConventionXL_R1C1 : public ScCompiler::Convention, public ConventionXL
     {
         return ConventionXL::getSpecialSymbol(eSymType);
     }
+
+    virtual bool parseExternalName( const String& rSymbol, String& rFile, String& rName ) const
+    {
+        return ConventionXL::parseExternalName(rSymbol, rFile, rName);
+    }
+
+    virtual String makeExternalNameStr( const String& rFile, const String& rName ) const
+    {
+        return ConventionXL::makeExternalNameStr(rFile, rName);
+    }
 };
 
 static const ConventionXL_R1C1 ConvXL_R1C1;
@@ -2597,6 +2688,24 @@ BOOL ScCompiler::IsNamedRange( const String& rUpperName )
         return FALSE;
 }
 
+bool ScCompiler::IsExternalNamedRange( const String& rSymbol )
+{
+    if (!pConv)
+        return false;
+
+    String aFile, aName;
+    if (!pConv->parseExternalName(rSymbol, aFile, aName))
+        return false;
+
+    ScRawToken aToken;
+    if (aFile.Len() > MAXSTRLEN || aName.Len() > MAXSTRLEN)
+        return false;
+
+    aToken.SetExternalName(aFile, aName);
+    pRawToken = aToken.Clone();
+    return true;
+}
+
 BOOL ScCompiler::IsDBRange( const String& rName )
 {
     USHORT n;
@@ -3183,6 +3292,15 @@ BOOL ScCompiler::NextNewToken( bool bAllowBooleans )
             fprintf( stderr, "Token '%s'\n",
                      rtl::OUStringToOString( aUpper, RTL_TEXTENCODING_UTF8 ).getStr() );
 #endif
+            fprintf(stdout, "ScCompiler::NextNewToken:   token = '%s'\n",
+                    rtl::OUStringToOString(aOrg, RTL_TEXTENCODING_UTF8).getStr());
+
+            bool bIsRef = IsReference(aOrg);
+            bool bIsNamedRange = IsNamedRange(aUpper);
+            bool bIsExternNameRange = IsExternalNamedRange(aOrg);
+            fprintf(stdout, "ScCompiler::NextNewToken:   is reference? (%d); is named range? (%d); external name? (%d)\n", 
+                    bIsRef, bIsNamedRange, bIsExternNameRange);
+
             // Column 'DM' ("Deutsche Mark", German currency) couldn't be
             // referred to => IsReference() before IsValue().
             // #42016# Italian ARCTAN.2 resulted in #REF! => IsOpcode() before
@@ -3190,10 +3308,11 @@ BOOL ScCompiler::NextNewToken( bool bAllowBooleans )
             // IsBoolean before isValue to catch inline bools without the kludge
             //    for inline arrays.
             if ( !(bMayBeFuncName && IsOpCode( aUpper ))
-              && !IsReference( aOrg )
+              && !bIsRef
               && !(bAllowBooleans && IsBoolean( aUpper ))
               && !IsValue( aUpper )
-              && !IsNamedRange( aUpper )
+              && !bIsNamedRange
+              && !bIsExternNameRange
               && !IsDBRange( aUpper )
               && !IsColRowName( aUpper )
               && !(bMayBeFuncName && IsMacro( aUpper ))
@@ -3452,8 +3571,30 @@ BOOL ScCompiler::GetToken()
     }
     if( pToken->GetOpCode() == ocSubTotal )
         glSubTotal = TRUE;
+    else if ( pToken->GetOpCode() == ocExternalName )
+    {
+        fprintf(stdout, "ScCompiler::GetToken:   ocExternalName\n");
+        if (pToken->GetStringCount() != 2)
+            SetError(errNoName);
+
+        const String& rFile = pToken->GetString(0);
+        const String& rName = pToken->GetString(1);
+
+        fprintf(stdout, "ScCompiler::GetToken:     file = '%s'; name = '%s'\n",
+                rtl::OUStringToOString(rFile, RTL_TEXTENCODING_UTF8).getStr(), 
+                rtl::OUStringToOString(rName, RTL_TEXTENCODING_UTF8).getStr());
+
+        ScTokenArray* pNew = pDoc->FindExternalRangeName(rFile, rName, aPos);
+        if (pNew)
+        {
+            PushTokenArray(pNew, true);
+            return GetToken();
+        }
+        SetError(errNoName);
+    }
     else if( pToken->GetOpCode() == ocName )
     {
+        fprintf(stdout, "ScCompiler::GetToken:   ocName\n");
         ScRangeData* pRangeData = pDoc->GetRangeName()->FindIndex( pToken->GetIndex() );
         if (pRangeData)
         {
@@ -5402,6 +5543,9 @@ ScToken* ScCompiler::CreateStringFromToken( rtl::OUStringBuffer& rBuffer, ScToke
     BOOL bSpaces = FALSE;
     ScToken* t = pTokenP;
     OpCode eOp = t->GetOpCode();
+    if (eOp == ocExternalName)
+        rBuffer.append(pConv->makeExternalNameStr(t->GetString(0), t->GetString(1)));
+
     if( eOp >= ocAnd && eOp <= ocOr )
     {
         // AND, OR infix?
diff --git sc/source/core/tool/token.cxx sc/source/core/tool/token.cxx
index 7312257..493fc2e 100644
--- sc/source/core/tool/token.cxx
+++ sc/source/core/tool/token.cxx
@@ -52,6 +52,8 @@
 #include "parclass.hxx"
 #include "jumpmatrix.hxx"
 
+using ::std::vector;
+
 // ImpTokenIterator wird je Interpreter angelegt, mehrfache auch durch
 // SubCode via ScTokenIterator Push/Pop moeglich
 IMPL_FIXEDMEMPOOL_NEWDEL( ImpTokenIterator, 32, 16 )
@@ -196,6 +198,21 @@ void ScRawToken::SetName( USHORT n )
     nRefCnt = 0;
 }
 
+void ScRawToken::SetExternalName( const String& rFile, const String& rName )
+{
+    eOp = ocExternalName;
+    eType = svExternalName;
+    nRefCnt = 0;
+
+    xub_StrLen n = rFile.Len();
+    memcpy(extname.cFile, rFile.GetBuffer(), n*sizeof(sal_Unicode));
+    extname.cFile[n] = 0;
+
+    n = rName.Len();
+    memcpy(extname.cName, rName.GetBuffer(), n*sizeof(sal_Unicode));
+    extname.cName[n] = 0;
+}
+
 ComplRefData& ScRawToken::GetReference()
 {
     DBG_ASSERT( lcl_IsReference( eOp, GetType() ), "GetReference: no Ref" );
@@ -255,6 +272,7 @@ ScRawToken* ScRawToken::Clone() const
             case svSingleRef:
             case svDoubleRef:   n += sizeof(aRef); break;
             case svMatrix:      n += sizeof(ScMatrix*); break;
+            case svExternalName: n += sizeof(extname); break;
             case svIndex:       n += sizeof(USHORT); break;
             case svJump:        n += nJump[ 0 ] * 2 + 2; break;
             case svExternal:    n = sal::static_int_cast<USHORT>( n + GetStrLenBytes( cStr+1 ) + GetStrLenBytes( 2 ) ); break;
@@ -311,8 +329,15 @@ ScToken* ScRawToken::CreateToken() const
             return new ScMatrixToken( pMat );
         //break;
         case svIndex :
+            fprintf(stdout, "ScRawToken::CreateToken:   creating index token ... (op = %d)\n", eOp);
             return new ScIndexToken( eOp, nIndex );
         //break;
+        case svExternalName:
+        {
+            String aFile(extname.cFile);
+            String aName(extname.cName);
+            return new ScExternalNameToken( aFile, aName );
+        }
         case svJump :
             return new ScJumpToken( eOp, (short*) nJump );
         //break;
@@ -505,6 +530,9 @@ ScToken* ScToken::Clone() const
         case svExternal :
             return new ScExternalToken( *static_cast<const ScExternalToken*>(this) );
         //break;
+        case svExternalName :
+            return new ScExternalNameToken( *static_cast<const ScExternalNameToken*>(this) );
+        //break;
         case svFAP :
             return new ScFAPToken( *static_cast<const ScFAPToken*>(this) );
         //break;
@@ -756,6 +784,18 @@ const String& ScToken::GetString() const
     return aDummyString;
 }
 
+const String& ScToken::GetString( USHORT ) const
+{
+    DBG_ERRORFILE( "ScToken::GetString: virtual dummy called" );
+    return aDummyString;
+}
+
+USHORT ScToken::GetStringCount() const
+{
+    DBG_ERRORFILE( "ScToken::GetStringCount: virtual dummy called" );
+    return 0;
+}
+
 const SingleRefData& ScToken::GetSingleRef() const
 {
     DBG_ERRORFILE( "ScToken::GetSingleRef: virtual dummy called" );
@@ -878,6 +918,11 @@ void ScToken::SetError( USHORT )
     DBG_ERRORFILE( "ScToken::SetError: virtual dummy called" );
 }
 
+bool ScToken::IsExternalRef() const
+{
+    return false;
+}
+
 // ==========================================================================
 // real implementations of virtual functions
 // --------------------------------------------------------------------------
@@ -1015,6 +1060,94 @@ BOOL ScIndexToken::operator==( const ScToken& r ) const
     return ScToken::operator==( r ) && nIndex == r.GetIndex();
 }
 
+ScExternalSingleRefToken::ScExternalSingleRefToken( SCsCOL nCol, SCsROW nRow, SCsTAB nTab, const String& rFile ) :
+    ScToken( svSingleRef ),
+    maFile(rFile)
+{
+    maSingleRef.nCol = nCol;
+    maSingleRef.nRow = nRow;
+    maSingleRef.nTab = nTab;
+}
+
+ScExternalSingleRefToken::ScExternalSingleRefToken( const ScExternalSingleRefToken& r ) :
+    ScToken( svSingleRef ),
+    maSingleRef(r.maSingleRef),
+    maFile(r.maFile)
+{
+}
+
+ScExternalSingleRefToken::~ScExternalSingleRefToken()
+{
+}
+
+const SingleRefData& ScExternalSingleRefToken::GetSingleRef() const
+{
+    return maSingleRef;
+}
+
+const String& ScExternalSingleRefToken::GetString() const
+{
+    return maFile;
+}
+
+bool ScExternalSingleRefToken::IsExternalRef() const
+{
+    return true;
+}
+
+ScExternalNameToken::ScExternalNameToken( const String& rFile, const String& rName ) :
+    ScOpToken( ocExternalName, svExternalName )
+{
+    maData.reserve(2);
+    maData.push_back(rFile);
+    maData.push_back(rName);
+}
+
+ScExternalNameToken::ScExternalNameToken( const ScExternalNameToken& r ) :
+    ScOpToken( r )
+{
+    maData = r.maData;
+}
+
+ScExternalNameToken::~ScExternalNameToken() {}
+
+const String& ScExternalNameToken::GetString( USHORT n ) const
+{
+    return maData[n];
+}
+
+USHORT ScExternalNameToken::GetStringCount() const
+{
+    return static_cast<USHORT>(maData.size());
+}
+
+BOOL ScExternalNameToken::operator==( const ScToken& r ) const
+{
+    if ( !ScToken::operator==(r) )
+        return false;
+
+    USHORT n = GetStringCount();
+    if ( n != r.GetStringCount() )
+        return false;
+
+    for (USHORT i = 0; i < n; ++i)
+    {
+        xub_StrLen nLen = GetString(i).Len();
+        if ( nLen != r.GetString(i).Len() )
+            return false;
+        
+        const sal_Unicode* p1 = GetString(i).GetBuffer();
+        const sal_Unicode* p2 = r.GetString(i).GetBuffer();
+        for (xub_StrLen j = 0; j < nLen; ++j)
+        {
+            if (p1[j] != p2[j])
+                return false;
+        }
+    }
+
+    return true;
+}
+
 
 short* ScJumpToken::GetJump() const                     { return pJump; }
 BOOL ScJumpToken::operator==( const ScToken& r ) const
