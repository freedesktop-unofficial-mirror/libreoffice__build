diff --git sc/inc/address.hxx sc/inc/address.hxx
index f92fc8e..f15a341 100644
--- sc/inc/address.hxx
+++ sc/inc/address.hxx
@@ -287,6 +287,15 @@ public:
     };
     static const Details detailsOOOa1;
 
+    struct ExternalInfo
+    {
+        String      maTabName;
+        sal_uInt16  mnFileId;
+        bool        mbExternal;
+
+        inline ExternalInfo() : mnFileId(0), mbExternal(false) {}
+    };
+
     inline ScAddress() : nRow(0), nCol(0), nTab(0) {}
     inline ScAddress( SCCOL nColP, SCROW nRowP, SCTAB nTabP )
         : nRow(nRowP), nCol(nColP), nTab(nTabP)
@@ -317,8 +326,8 @@ public:
     inline void GetVars( SCCOL& nColP, SCROW& nRowP, SCTAB& nTabP ) const
     { nColP = nCol; nRowP = nRow; nTabP = nTab; }
 
-    USHORT Parse( const String&, ScDocument* = NULL,
-                  const Details& rDetails = detailsOOOa1);
+    USHORT Parse( const String&, ScDocument* = NULL, 
+                  const Details& rDetails = detailsOOOa1, ExternalInfo* pExtInfo = NULL);
     void Format( String&, USHORT = 0, ScDocument* = NULL,
                  const Details& rDetails = detailsOOOa1) const;
 
@@ -463,7 +472,8 @@ public:
     inline bool In( const ScRange& ) const;     // is Range& in Range?
 
     USHORT Parse( const String&, ScDocument* = NULL,
-                  const ScAddress::Details& rDetails = ScAddress::detailsOOOa1 );
+                  const ScAddress::Details& rDetails = ScAddress::detailsOOOa1,
+                  ScAddress::ExternalInfo* pExtInfo = NULL );
     USHORT ParseAny( const String&, ScDocument* = NULL,
                      const ScAddress::Details& rDetails = ScAddress::detailsOOOa1 );
     USHORT ParseCols( const String&, ScDocument* = NULL,
diff --git sc/inc/compiler.hrc sc/inc/compiler.hrc
index 92b7e82..22d77cb 100644
--- sc/inc/compiler.hrc
+++ sc/inc/compiler.hrc
@@ -39,25 +39,26 @@
 #define SC_OPCODE_STOP                2
 #define SC_OPCODE_EXTERNAL            3
 #define SC_OPCODE_NAME                4
-#define SC_OPCODE_IF                  5     /* jump commands */
-#define SC_OPCODE_CHOSE               6
-#define SC_OPCODE_OPEN                7     /* parentheses and separators */
-#define SC_OPCODE_CLOSE               8
-#define SC_OPCODE_SEP                 9
-#define SC_OPCODE_MISSING            10     /* special OpCodes */
-#define SC_OPCODE_BAD                11
-#define SC_OPCODE_SPACES             12
-#define SC_OPCODE_MAT_REF            13
-#define SC_OPCODE_DB_AREA            14     /* additional access operators */
-#define SC_OPCODE_MACRO              15
-#define SC_OPCODE_COL_ROW_NAME       16
-#define SC_OPCODE_COL_ROW_NAME_AUTO  17
-#define SC_OPCODE_PERCENT_SIGN       18     /* operator _follows_ value */
-#define SC_OPCODE_ARRAY_OPEN         19
-#define SC_OPCODE_ARRAY_CLOSE        20
-#define SC_OPCODE_ARRAY_ROW_SEP      21
-#define SC_OPCODE_ARRAY_COL_SEP      22     /* some convs use sep != col_sep */
-#define SC_OPCODE_STOP_DIV           23
+#define SC_OPCODE_EXTERNAL_NAME       5
+#define SC_OPCODE_IF                  6     /* jump commands */
+#define SC_OPCODE_CHOSE               7
+#define SC_OPCODE_OPEN                8     /* parentheses and separators */
+#define SC_OPCODE_CLOSE               9
+#define SC_OPCODE_SEP                10
+#define SC_OPCODE_MISSING            11     /* special OpCodes */
+#define SC_OPCODE_BAD                12
+#define SC_OPCODE_SPACES             13
+#define SC_OPCODE_MAT_REF            14
+#define SC_OPCODE_DB_AREA            15     /* additional access operators */
+#define SC_OPCODE_MACRO              16
+#define SC_OPCODE_COL_ROW_NAME       17
+#define SC_OPCODE_COL_ROW_NAME_AUTO  18
+#define SC_OPCODE_PERCENT_SIGN       19     /* operator _follows_ value */
+#define SC_OPCODE_ARRAY_OPEN         20
+#define SC_OPCODE_ARRAY_CLOSE        21
+#define SC_OPCODE_ARRAY_ROW_SEP      22
+#define SC_OPCODE_ARRAY_COL_SEP      23     /* some convs use sep != col_sep */
+#define SC_OPCODE_STOP_DIV           24
 
 /*** error constants #... ***/
 #define SC_OPCODE_START_ERRORS       30
diff --git sc/inc/compiler.hxx sc/inc/compiler.hxx
index 2d816d1..74f8f35 100644
--- sc/inc/compiler.hxx
+++ sc/inc/compiler.hxx
@@ -45,6 +45,7 @@
 #include <unotools/charclass.hxx>
 #include <rtl/ustrbuf.hxx>
 #include <com/sun/star/uno/Sequence.hxx>
+#include <vector>
 
 namespace com { namespace sun { namespace star {
     namespace sheet {
@@ -100,6 +101,7 @@ namespace com { namespace sun { namespace star {
 class ScDocument;
 class ScMatrix;
 class ScRangeData;
+class ScExternalRefManager;
 
 // constants and data types internal to compiler
 
@@ -151,6 +153,15 @@ public:
             bool        bHasForceArray;
         } sbyte;
         ComplRefData aRef;
+        struct {
+            sal_uInt16      nFileId;
+            sal_Unicode     cTabName[MAXSTRLEN+1];
+            ComplRefData    aRef;
+        } extref;
+        struct {
+            sal_uInt16  nFileId;
+            sal_Unicode cName[MAXSTRLEN+1];
+        } extname;
         ScMatrix*    pMat;
         USHORT       nIndex;                // index into name collection
         sal_Unicode  cStr[ MAXSTRLEN+1 ];   // string (up to 255 characters + 0)
@@ -180,6 +191,9 @@ public:
     void SetDouble( double fVal );
     void SetInt( int nVal );
     void SetName( USHORT n );
+    void SetExternalSingleRef( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef );
+    void SetExternalDoubleRef( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef );
+    void SetExternalName( sal_uInt16 nFileId, const String& rName );
     void SetMatrix( ScMatrix* p );
     void SetExternal(const sal_Unicode* pStr);
     // These methods are ok to use, reference count not cleared.
@@ -228,6 +242,28 @@ public:
                                    xub_StrLen nSrcPos,
                                    const CharClass* pCharClass) const = 0;
 
+        /** 
+         * Parse the symbol string and pick up the file name and the external 
+         * range name. 
+         *
+         * @return true on successful parse, or false otherwise.
+         */
+        virtual bool parseExternalName( const String& rSymbol, String& rFile, String& rName ) const = 0;
+
+        virtual String makeExternalNameStr( const String& rFile, const String& rName ) const = 0;
+
+        virtual void makeExternalRefStr( ::rtl::OUStringBuffer& rBuffer, const ScCompiler& rCompiler,
+                                         sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef, 
+                                         ScExternalRefManager* pRefMgr ) const
+        {
+        }
+
+        virtual void makeExternalRefStr( ::rtl::OUStringBuffer& rBuffer, const ScCompiler& rCompiler,
+                                         sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef, 
+                                         ScExternalRefManager* pRefMgr ) const
+        {
+        }
+
         enum SpecialSymbolType
         {
             /** 
@@ -447,6 +483,7 @@ private:
     BOOL IsDoubleReference( const String& );
     BOOL IsMacro( const String& );
     BOOL IsNamedRange( const String& );
+    bool IsExternalNamedRange( const String& rSymbol );
     BOOL IsDBRange( const String& );
     BOOL IsColRowName( const String& );
     BOOL IsBoolean( const String& );
diff --git sc/inc/document.hxx sc/inc/document.hxx
index 6d361ae..b5fd39d 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -93,6 +93,7 @@ class ScDocOptions;
 class ScDocumentPool;
 class ScDrawLayer;
 class ScExtDocOptions;
+class ScExternalRefManager;
 class ScFormulaCell;
 class ScMarkData;
 class ScOutlineTable;
@@ -282,6 +283,7 @@ private:
 	ScFieldEditEngine*	pCacheFieldEditEngine;
 
     ::std::auto_ptr<ScDocProtection> pDocProtection;
+    ::std::auto_ptr<ScExternalRefManager> pExternalRefMgr;
 	String              aDocName;                       // opt: Dokumentname
 	String              aDocCodeName;                       // opt: Dokumentname
 	ScRangePairListRef	xColNameRanges;
@@ -631,6 +633,8 @@ SC_DLLPUBLIC	ScDBCollection*	GetDBCollection() const;
 									const String& aFileName,
 									const String& aTabName );
 
+    ScExternalRefManager* GetExternalRefManager();
+
     /** Creates a new sheet, and makes it linked to the specified sheet in an external document.
         @param rnTab  (out-param) Returns the sheet index, if sheet could be inserted).
         @return  TRUE = Sheet created, rnTab contains valid sheet index. */
diff --git sc/inc/externalrefmgr.hxx sc/inc/externalrefmgr.hxx
new file mode 100644
index 0000000..1245062
--- /dev/null
+++ sc/inc/externalrefmgr.hxx
@@ -0,0 +1,288 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: document.hxx,v $
+ * $Revision: 1.112 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef SC_EXTERNALREFMGR_HXX
+#define SC_EXTERNALREFMGR_HXX
+
+#include "global.hxx"
+#include "address.hxx"
+#include "sfx2/objsh.hxx"
+#include "sfx2/lnkbase.hxx"
+#include "tools/time.hxx"
+#include "vcl/timer.hxx"
+
+#include <hash_map>
+#include <hash_set>
+#include <boost/shared_ptr.hpp>
+#include <vector>
+
+class ScDocument;
+class ScToken;
+class ScMatrix;
+class ScTokenArray;
+class String;
+class SfxObjectShellRef;
+class Window;
+
+class ScExternalRefCache;
+
+class ScExternalRefLink : public ::sfx2::SvBaseLink
+{
+public:
+    ScExternalRefLink(ScDocument* pDoc, sal_uInt16 nFileId, const String& rFilter);
+    virtual ~ScExternalRefLink();
+
+    virtual void Closed();
+    virtual void DataChanged(const String& rMimeType, const ::com::sun::star::uno::Any & rValue);
+    virtual void Edit(Window* pParent, const Link& rEndEditHdl);
+
+    void SetDoReferesh(bool b);
+
+private:
+    ScExternalRefLink(); // disabled
+    ScExternalRefLink(const ScExternalRefLink&); // disabled
+
+    DECL_LINK(EndEditHdl, void*);
+
+    sal_uInt16  mnFileId;
+    String      maFilterName;
+    ScDocument* mpDoc;
+    bool        mbDoRefresh;
+};
+
+// ============================================================================
+
+/** 
+ * Cache table for external reference data.
+ */
+class ScExternalRefCache
+{
+public:
+    typedef ::boost::shared_ptr<ScToken> TokenRef;
+    typedef ::boost::shared_ptr<ScMatrix> MatrixRef;
+
+    ScExternalRefCache();
+    ~ScExternalRefCache();
+
+    ScToken* getCellData(sal_uInt16 nFileId, const String& rTabName, SCROW nRow, SCCOL nCol);
+    ScTokenArray* getCellRangeData(sal_uInt16 nFileId, const String& rTabName, const ScRange& rRange);
+
+    void setCellData(sal_uInt16 nFileId, const String& rTabName, SCROW nRow, SCCOL nCol, TokenRef pToken);
+    void setCellRangeData(sal_uInt16 nFileId, const String& rTabName, const ScRange& rRange,
+                          const ::std::vector<MatrixRef>& rData);
+
+private:
+    typedef ::std::hash_map<SCCOL, TokenRef>        RowDataType;
+    typedef ::std::hash_map<SCROW, RowDataType>     TableDataType;
+    typedef ::boost::shared_ptr<TableDataType>      TableDataTypeRef;
+    typedef ::std::vector<TableDataTypeRef>         TableListType;
+
+    typedef ::std::hash_map<String, size_t, ScStringHashCode>   TableNameIndexMap;
+    
+    struct DocItem
+    {
+        TableListType       maTables;
+        TableNameIndexMap   maTableNameIndex;    
+    };
+    typedef ::std::hash_map<sal_uInt16, DocItem>  DocDataType;
+
+    DocDataType maDocs;
+};
+
+// ============================================================================
+
+class ScExternalRefManager
+{
+private:
+    struct AddressHash
+    {
+        size_t operator()(const ScAddress& rAddr) const
+        {
+            // dumb hashing - how do we properly hash a cell address?
+            return rAddr.Tab() + rAddr.Col() + rAddr.Row();
+        }
+    };
+
+    struct RangeHash
+    {
+        size_t operator()(const ScRange& rRange) const
+        {
+            const ScAddress& s = rRange.aStart;
+            const ScAddress& e = rRange.aEnd;
+            return s.Tab() + s.Col() + s.Row() + e.Tab() + e.Col() + e.Row();
+        }
+    };
+
+    struct SrcDoc
+    {
+        SfxObjectShellRef   maShell;
+        Time                maLastAccess;
+    };
+
+    typedef ::boost::shared_ptr<ScToken>        TokenRef;
+    typedef ::boost::shared_ptr<ScTokenArray>   TokenArrayRef;
+
+    typedef ::std::hash_map<sal_uInt16, SrcDoc>                                                 DocShellMap;
+    typedef ::std::hash_map<ScAddress, TokenRef, AddressHash, ::std::equal_to<ScAddress> >      SingleTokenMap;
+    typedef ::std::hash_map<ScRange, TokenArrayRef, RangeHash, ::std::equal_to<ScRange> >       DoubleTokenMap;
+    typedef ::std::hash_map<String, TokenArrayRef, ScStringHashCode, ::std::equal_to<String> >  RangeNameMap;
+    typedef ::std::hash_set<sal_uInt16, ScStringHashCode>                                       LinkedDocSet;
+
+    typedef ::std::hash_set<ScAddress, AddressHash, ::std::equal_to<ScAddress> >    RefCellSet;
+    typedef ::std::hash_map<sal_uInt16, RefCellSet>                                 RefCellMap;
+
+    /** 
+     * Cached content of a single external document
+     */
+    struct DocCache
+    {
+        SingleTokenMap  maSingleTokens;
+        DoubleTokenMap  maDoubleTokens;
+        RangeNameMap    maRangeNames;
+        ::std::vector<String> maTableNames;
+    };
+    typedef ::boost::shared_ptr<DocCache> DocCacheRef;
+    typedef ::std::hash_map<sal_uInt16, DocCacheRef>   DocCacheMap;
+
+public:
+    explicit ScExternalRefManager(ScDocument* pDoc);
+    ~ScExternalRefManager();
+
+    ScToken* getSingleRefToken(sal_uInt16 nFileId, const String& rTabName, const ScAddress& rCell, const ScAddress* pCurPos, SCTAB* pTab);
+#if 1
+    ScToken* getSingleRefToken(sal_uInt16 nFileId, const ScAddress& rCell, const ScAddress* pCurPos);
+#endif
+
+    ScTokenArray* getDoubleRefTokens(sal_uInt16 nFileId, const String& rTabName, const ScRange& rRange, const ScAddress* pCurPos);
+#if 1
+    ScTokenArray* getDoubleRefTokens(sal_uInt16 nFileId, const ScRange& rRange, const ScAddress* pCurPos);
+#endif
+
+    /** 
+     * Get an array of tokens corresponding with a specified name in a 
+     * specified file. 
+     *  
+     * @param pCurPos currnet cell address where this name token is used. 
+     *                This is purely to keep track of all cells containing
+     *                external names for refreshing purposes.  If this is
+     *                NULL, then the cell will not be added to the list.
+     * 
+     * @return array of tokens composing the name
+     */
+    ScTokenArray* getRangeNameTokens(sal_uInt16 nFileId, const String& rName, const ScAddress* pCurPos = NULL);
+
+    /** 
+     * Takes a flat file name, and convert it to an absolute URL path.  An 
+     * absolute URL path begines with 'file:///. 
+     *
+     * @param rFile file name to convert 
+     */
+    void convertToAbsName(String& rFile) const;
+    sal_uInt16 getExternalFileId(const String& rFile);
+    const String* getExternalFileName(sal_uInt16 nFileId) const;
+    const String* getExternalTableName(sal_uInt16 nFileId, SCTAB nTabId);
+
+    /** 
+     * Get the table index of an external table from its name.
+     *
+     * @param nFileId external file ID
+     * @param rTabName table name
+     * 
+     * @return table index, or -1 if the name is not found.
+     */
+    SCTAB getExternalTableId(sal_uInt16 nFileId, const String& rTabName);
+    
+    void refreshNames(sal_uInt16 nFileId);
+    void switchSrcFile(sal_uInt16 nFileId, const String& rNewFile);
+    void removeSrcDocument(sal_uInt16 nFileId, bool bBreakLink);
+    void clear();
+
+private:
+    ScExternalRefManager();
+    ScExternalRefManager(const ScExternalRefManager&); 
+
+#if 1
+    ScToken* getSingleRefToken(sal_uInt16 nFileId, const ScAddress& rCell);
+#endif
+
+    ScTokenArray* getDoubleRefTokens(sal_uInt16 nFileId, const ScRange& rRange);
+
+    void refreshAllReferencingCells(sal_uInt16 nFileId);
+
+    void insertReferencingCell(sal_uInt16 nFileId, const ScAddress& rCell);
+
+    DocCache* getDocumentCache(sal_uInt16 nFileId);
+    ScDocument* getSrcDocument(sal_uInt16 nFileId);
+    SfxObjectShellRef loadSrcDocument(const String& rFile, String& rFilter);
+    void insertExternalFileLink(sal_uInt16 nFileId, const String& rFilterName);
+
+    bool compileTokensByCell(const ScAddress& rCell);
+
+    /** 
+     * Purge those source document instances that have not been accessed for 
+     * the specified duration.
+     *  
+     * @param nTimeOut time out value in 100th of a second 
+     */
+    void purgeStaleSrcDocument(sal_Int32 nTimeOut);
+
+private:
+    ScExternalRefCache maRefCache;
+
+    ScDocument* mpDoc;
+
+    /** 
+     * Source document cache.  This stores the original source document 
+     * instances.  The source documents get purged after certain period of 
+     * time. 
+     */
+    DocShellMap maDocShells;
+
+    /** cache only of referenced ranges and names from source documents. */
+    DocCacheMap maCachedDocContents;
+
+    /** list of source documents that are managed by the link manager. */
+    LinkedDocSet maLinkedDocs;
+
+    /** 
+     *  List of referencing cells that may contain external names.  There is
+     *  one list per source document.
+     */
+    RefCellMap maRefCells;
+
+    /** original source file index. */
+    ::std::vector<String> maFileNames;
+
+    AutoTimer maSrcDocTimer;
+    DECL_LINK(TimeOutHdl, AutoTimer*);
+};
+
+
+#endif
diff --git sc/inc/opcode.hxx sc/inc/opcode.hxx
index 285104d..b72ebad 100644
--- sc/inc/opcode.hxx
+++ sc/inc/opcode.hxx
@@ -44,6 +44,7 @@ enum OpCodeEnum
 		ocStop				= SC_OPCODE_STOP,
 		ocExternal			= SC_OPCODE_EXTERNAL,
 		ocName				= SC_OPCODE_NAME,
+        ocExternalName      = SC_OPCODE_EXTERNAL_NAME,
 	// Jump commands
 		ocIf				= SC_OPCODE_IF,
 		ocChose				= SC_OPCODE_CHOSE,
diff --git sc/inc/token.hxx sc/inc/token.hxx
index ded3a94..92a9137 100644
--- sc/inc/token.hxx
+++ sc/inc/token.hxx
@@ -64,7 +64,7 @@ enum StackVarEnum
                                         // cell during import, having a double
                                         // and/or string result and a formula
                                         // string to be compiled.
-
+    svExternalName,
     svError,                            // error token
     svMissing = 0x70,                   // 0 or ""
     svSep,                              // separator, ocSep, ocOpen, ocClose
@@ -448,6 +448,65 @@ public:
 };
 
 
+class ScExternalSingleRefToken : public ScOpToken
+{
+private:
+    sal_uInt16                  mnFileId;
+    String                      maTabName;
+    SingleRefData               maSingleRef;
+
+                                ScExternalSingleRefToken(); // disabled
+public:
+                                ScExternalSingleRefToken( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& r );
+                                ScExternalSingleRefToken( const ScExternalSingleRefToken& r );
+    virtual                     ~ScExternalSingleRefToken();
+
+    virtual USHORT                  GetIndex() const;
+    virtual const String&           GetString() const;
+    virtual const SingleRefData&    GetSingleRef() const;
+    virtual SingleRefData&          GetSingleRef();
+    virtual BOOL                    operator==( const ScToken& rToken ) const;
+};
+
+
+class ScExternalDoubleRefToken : public ScOpToken
+{
+private:
+    sal_uInt16                  mnFileId;
+    String                      maTabName;  // name of the first sheet
+    ComplRefData                maDoubleRef;
+
+                                ScExternalDoubleRefToken(); // disabled
+public:
+                                ScExternalDoubleRefToken( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& r );
+                                ScExternalDoubleRefToken( const ScExternalDoubleRefToken& r );
+    virtual                     ~ScExternalDoubleRefToken();
+
+    virtual USHORT                 GetIndex() const;
+    virtual const String&          GetString() const;
+    virtual const ComplRefData&    GetDoubleRef() const;
+    virtual ComplRefData&          GetDoubleRef();
+    virtual BOOL                    operator==( const ScToken& rToken ) const;
+};
+
+
+class ScExternalNameToken : public ScOpToken
+{
+private:
+    sal_uInt16                  mnFileId;
+    String                      maName;
+private:
+                                ScExternalNameToken(); // disabled
+public:
+                                ScExternalNameToken( sal_uInt16 nFileId, const String& rName );
+                                ScExternalNameToken( const ScExternalNameToken& r );
+    virtual                     ~ScExternalNameToken();
+    virtual USHORT              GetIndex() const;
+    virtual const String&       GetString() const;
+    virtual BOOL                operator==( const ScToken& rToken ) const;
+};
+
+
 class ScJumpToken : public ScOpToken
 {
 private:
diff --git sc/inc/tokenarray.hxx sc/inc/tokenarray.hxx
index 1d903ce..1e94c2f 100644
--- sc/inc/tokenarray.hxx
+++ sc/inc/tokenarray.hxx
@@ -193,6 +193,9 @@ public:
     ScToken* AddDoubleReference( const ComplRefData& rRef );
     ScToken* AddName( USHORT n );
     ScToken* AddMatrix( ScMatrix* p );
+    ScToken* AddExternalName( sal_uInt16 nFileId, const String& rName );
+    ScToken* AddExternalSingleReference( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef );
+    ScToken* AddExternalDoubleReference( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef );
     ScToken* AddExternal( const sal_Unicode* pStr );
     /** Xcl import may play dirty tricks with OpCode!=ocExternal.
         Others don't use! */
diff --git sc/source/core/data/cell.cxx sc/source/core/data/cell.cxx
index a68efc0..a1e3c12 100644
--- sc/source/core/data/cell.cxx
+++ sc/source/core/data/cell.cxx
@@ -87,6 +87,30 @@ static const sal_Char __FAR_DATA msgDbgInfinity[] =
 	"NICHTS anruehren und ER bescheid sagen!";
 #endif
 
+
+namespace {
+
+#include <string>
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+    }
+
+    ~StackPrinter()
+    {
+        fprintf(stdout, "%s: --end\n", msMsg.c_str());
+    }
+
+private:
+    ::std::string msMsg;
+};
+
+}
 // -----------------------------------------------------------------------
 
 ScBaseCell::ScBaseCell( CellType eNewType ) :
diff --git sc/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
index 85ad0e5..f04061f 100644
--- sc/source/core/data/documen2.cxx
+++ sc/source/core/data/documen2.cxx
@@ -93,6 +93,7 @@
 #include "listenercalls.hxx"
 #include "recursionhelper.hxx"
 #include "lookupcache.hxx"
+#include "externalrefmgr.hxx"
 #include <com/sun/star/document/XVbaEventsHelper.hpp>
 
 // pImpl because including lookupcache.hxx in document.hxx isn't wanted, and
@@ -152,6 +153,7 @@ ScDocument::ScDocument( ScDocumentMode	eMode,
 		pScriptTypeData( NULL ),
         pCacheFieldEditEngine( NULL ),
         pDocProtection( NULL ),
+        pExternalRefMgr( NULL ),
 		pViewOptions( NULL ),
 		pDocOptions( NULL ),
 		pExtDocOptions( NULL ),
@@ -382,6 +384,11 @@ ScDocument::~ScDocument()
 			pLinkManager->Remove( 0, pLinkManager->GetLinks().Count() );
 	}
 
+    if (pExternalRefMgr.get())
+        // Destroy the external ref mgr instance here because it has a timer 
+        // which needs to be stopped before the app closes.
+        pExternalRefMgr.reset(NULL);
+
 	ScAddInAsync::RemoveDocument( this );
 	ScAddInListener::RemoveDocument( this );
 	delete pChartListenerCollection;	// vor pBASM wg. evtl. Listener!
diff --git sc/source/core/data/documen3.cxx sc/source/core/data/documen3.cxx
index 541e2e4..20dae1e 100644
--- sc/source/core/data/documen3.cxx
+++ sc/source/core/data/documen3.cxx
@@ -61,6 +61,7 @@
 #include "brdcst.hxx"
 #include "bcaslot.hxx"
 #include "tablink.hxx"
+#include "externalrefmgr.hxx"
 #include "markdata.hxx"
 #include "validat.hxx"
 #include "dociter.hxx"
@@ -81,7 +82,10 @@
 #include "svtools/PasswordHelper.hxx"
 #include "tabprotection.hxx"
 
+#include <memory>
+
 using namespace com::sun::star;
+using ::std::auto_ptr;
 
 //------------------------------------------------------------------------
 
@@ -478,6 +482,14 @@ BOOL ScDocument::LinkExternalTab( SCTAB& rTab, const String& aDocTab,
 	return TRUE;
 }
 
+ScExternalRefManager* ScDocument::GetExternalRefManager()
+{
+    if (!pExternalRefMgr.get())
+        pExternalRefMgr.reset(new ScExternalRefManager(this));
+
+    return pExternalRefMgr.get();
+}
+
 BOOL ScDocument::InsertLinkedEmptyTab( SCTAB& rnTab, const String& rFileName,
         const String& rFilterName, const String& rFilterOpt, const String& rTabName )
 {
diff --git sc/source/core/tool/address.cxx sc/source/core/tool/address.cxx
index 2cb5dce..39cdd8e 100644
--- sc/source/core/tool/address.cxx
+++ sc/source/core/tool/address.cxx
@@ -35,6 +35,7 @@
 #include "global.hxx"
 #include "compiler.hxx"
 #include "document.hxx"
+#include "externalrefmgr.hxx"
 
 #include "globstr.hrc"
 #include <sal/alloca.h>
@@ -45,6 +46,31 @@
 #include <tools/urlobj.hxx>
 using namespace ::com::sun::star;
 
+
+namespace {
+
+#include <string>
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+    }
+
+    ~StackPrinter()
+    {
+        fprintf(stdout, "%s: --end\n", msMsg.c_str());
+    }
+
+private:
+    ::std::string msMsg;
+};
+
+}
+
 ////////////////////////////////////////////////////////////////////////////
 const ScAddress::Details ScAddress::detailsOOOa1( CONV_OOO, 0, 0 );
 
@@ -713,15 +739,16 @@ lcl_ScRange_Parse_XL_A1( ScRange& r,
 }
 
 static USHORT
-lcl_ScAddress_Parse_OOo( BOOL& bExternal, const sal_Unicode* p,
-                         ScDocument* pDoc, ScAddress& rAddr )
+lcl_ScAddress_Parse_OOo( const sal_Unicode* p, ScDocument* pDoc, ScAddress& rAddr, 
+                         ScAddress::ExternalInfo* pExtInfo = NULL )
 {
+    StackPrinter aStack("::lcl_ScAddress_Parse_OOo");
     USHORT  nRes = 0;
     String  aDocName;       // der pure Dokumentenname
     String  aDocTab;        // zusammengesetzt fuer Table
     String  aTab;
     BOOL    bExtDoc = FALSE;
-    BOOL    bNeedExtTab = FALSE;
+    const ScAddress aCurPos(rAddr);
 
     // Lets see if this is a reference to something in an external file.
     // A Documentname is always quoted and has a trailing #
@@ -795,35 +822,11 @@ lcl_ScAddress_Parse_OOo( BOOL& bExternal, const sal_Unicode* p,
         }
         if( *p++ != '.' )
             nBits = 0;
-        if ( pDoc )
+
+        if (pDoc)
         {
-            if ( bExtDoc )
-            {
-                bExternal = TRUE;
-                aDocTab += aTab;    // "'Doc'#Tab"
-                if ( !pDoc->GetTable( aDocTab, nTab ) )
-                {
-                    if ( pDoc->ValidTabName( aTab ) )
-                    {
-                        aDocName = ScGlobal::GetAbsDocName( aDocName,
-                            pDoc->GetDocumentShell() );
-                        aDocTab = ScGlobal::GetDocTabName( aDocName, aTab );
-                        if ( !pDoc->GetTable( aDocTab, nTab ) )
-                        {
-                            // erst einfuegen, wenn Rest der Ref ok
-                            bNeedExtTab = TRUE;
-                            nBits = 0;
-                        }
-                    }
-                    else
-                        nBits = 0;
-                }
-            }
-            else
-            {
-                if ( !pDoc->GetTable( aTab, nTab ) )
-                    nBits = 0;
-            }
+            if ( !pDoc->GetTable( aTab, nTab ) )
+                nBits = 0;
         }
         else
             nBits = 0;
@@ -884,16 +887,33 @@ lcl_ScAddress_Parse_OOo( BOOL& bExternal, const sal_Unicode* p,
         if( !nBits )
             p = q;
     }
-    if ( bNeedExtTab )
+
+    if (bExtDoc)
     {
-        if ( (nRes & SCA_VALID_ROW) && (nRes & SCA_VALID_COL)
-          && pDoc->LinkExternalTab( nTab, aDocTab, aDocName, aTab ) )
+        ScExternalRefManager* pRefMgr = pDoc->GetExternalRefManager();
+        pRefMgr->convertToAbsName(aDocName);
+        fprintf(stdout, "lcl_ScAddress_Parse_OOo:   doc name = '%s'; tab = '%s' col = %d row = %ld\n",
+                rtl::OUStringToOString(aDocName, RTL_TEXTENCODING_UTF8).getStr(),
+                rtl::OUStringToOString(aTab, RTL_TEXTENCODING_UTF8).getStr(), nCol, nRow);
+
+        // TODO: Make sure the document exists!
+
+        sal_uInt16 nFileId = pRefMgr->getExternalFileId(aDocName);
+        if (pExtInfo && !pExtInfo->mbExternal)
+        {
+            pExtInfo->mbExternal = true;
+            pExtInfo->maTabName = aTab;
+            pExtInfo->mnFileId = nFileId;
+        }
+
+        if (pRefMgr->getSingleRefToken(nFileId, aTab, ScAddress(nCol, nRow, 0), NULL, &nTab))
         {
             nRes |= SCA_VALID_TAB;
         }
         else
-            nRes = 0;   // #NAME? statt #REF!, Dateiname bleibt erhalten
+            nRes = 0;
     }
+
     if ( !(nRes & SCA_VALID_ROW) && (nRes & SCA_VALID_COL)
             && !( (nRes & SCA_TAB_3D) && (nRes & SCA_VALID_TAB)) )
     {   // keine Row, keine Tab, aber Col => DM (...), B (...) o.ae.
@@ -912,9 +932,8 @@ lcl_ScAddress_Parse_OOo( BOOL& bExternal, const sal_Unicode* p,
 }
 
 static USHORT
-lcl_ScAddress_Parse ( BOOL& bExternal, const sal_Unicode* p,
-                      ScDocument* pDoc, ScAddress& rAddr,
-                      const ScAddress::Details& rDetails )
+lcl_ScAddress_Parse ( const sal_Unicode* p, ScDocument* pDoc, ScAddress& rAddr,
+                      const ScAddress::Details& rDetails, ScAddress::ExternalInfo* pExtInfo = NULL )
 {
     if( !*p )
         return 0;
@@ -924,7 +943,7 @@ lcl_ScAddress_Parse ( BOOL& bExternal, const sal_Unicode* p,
     default :
     case ScAddress::CONV_OOO:
         {
-            return lcl_ScAddress_Parse_OOo( bExternal, p, pDoc, rAddr );
+            return lcl_ScAddress_Parse_OOo( p, pDoc, rAddr, pExtInfo );
         }
 
     case ScAddress::CONV_XL_A1:
@@ -949,9 +968,8 @@ bool ConvertSingleRef( ScDocument* pDoc, const String& rRefString,
                        SCTAB nDefTab, ScRefAddress& rRefAddress,
                        const ScAddress::Details& rDetails )
 {
-    BOOL bExternal = FALSE;
     ScAddress aAddr( 0, 0, nDefTab );
-    USHORT nRes = lcl_ScAddress_Parse( bExternal, rRefString.GetBuffer(), pDoc, aAddr, rDetails );
+    USHORT nRes = lcl_ScAddress_Parse( rRefString.GetBuffer(), pDoc, aAddr, rDetails, NULL );
     if( nRes & SCA_VALID )
     {
         rRefAddress.Set( aAddr,
@@ -988,10 +1006,9 @@ bool ConvertDoubleRef( ScDocument* pDoc, const String& rRefString, SCTAB nDefTab
 
 
 USHORT ScAddress::Parse( const String& r, ScDocument* pDoc,
-                         const Details& rDetails)
+                         const Details& rDetails, ExternalInfo* pExtInfo )
 {
-    BOOL bExternal = FALSE;
-    return lcl_ScAddress_Parse( bExternal, r.GetBuffer(), pDoc, *this, rDetails );
+    return lcl_ScAddress_Parse( r.GetBuffer(), pDoc, *this, rDetails, pExtInfo );
 }
 
 
@@ -1060,7 +1077,7 @@ void ScRange::ExtendTo( const ScRange& rRange )
 }
 
 static USHORT
-lcl_ScRange_Parse_OOo( ScRange &aRange, const String& r, ScDocument* pDoc )
+lcl_ScRange_Parse_OOo( ScRange &aRange, const String& r, ScDocument* pDoc, ScAddress::ExternalInfo* pExtInfo = NULL )
 {
     USHORT nRes1 = 0, nRes2 = 0;
     xub_StrLen nTmp = 0;
@@ -1073,13 +1090,12 @@ lcl_ScRange_Parse_OOo( ScRange &aRange, const String& r, ScDocument* pDoc )
         String aTmp( r );
         sal_Unicode* p = aTmp.GetBufferAccess();
         p[ nPos ] = 0;
-        BOOL bExternal = FALSE;
-        if( (nRes1 = lcl_ScAddress_Parse_OOo( bExternal, p, pDoc, aRange.aStart ) ) != 0 )
+        if( (nRes1 = lcl_ScAddress_Parse_OOo( p, pDoc, aRange.aStart, pExtInfo ) ) != 0 )
         {
             aRange.aEnd = aRange.aStart;  // die Tab _muss_ gleich sein, so ist`s weniger Code
-            if ( (nRes2 = lcl_ScAddress_Parse_OOo( bExternal, p + nPos+ 1, pDoc, aRange.aEnd ) ) != 0 )
+            if ( (nRes2 = lcl_ScAddress_Parse_OOo( p + nPos+ 1, pDoc, aRange.aEnd, NULL ) ) != 0 )
             {
-                if ( bExternal && aRange.aStart.Tab() != aRange.aEnd.Tab() )
+                if ( pExtInfo && pExtInfo->mbExternal && aRange.aStart.Tab() != aRange.aEnd.Tab() )
                     nRes2 &= ~SCA_VALID_TAB;    // #REF!
                 else
                 {
@@ -1132,7 +1148,7 @@ lcl_ScRange_Parse_OOo( ScRange &aRange, const String& r, ScDocument* pDoc )
 }
 
 USHORT ScRange::Parse( const String& r, ScDocument* pDoc,
-                       const ScAddress::Details& rDetails )
+                       const ScAddress::Details& rDetails, ScAddress::ExternalInfo* pExtInfo )
 {
     if ( r.Len() <= 0 )
         return 0;
@@ -1141,7 +1157,7 @@ USHORT ScRange::Parse( const String& r, ScDocument* pDoc,
     {
     default :
     case ScAddress::CONV_OOO:
-        return lcl_ScRange_Parse_OOo( *this, r, pDoc );
+        return lcl_ScRange_Parse_OOo( *this, r, pDoc, pExtInfo );
 
     case ScAddress::CONV_XL_A1:
         return lcl_ScRange_Parse_XL_A1( *this, r.GetBuffer(), pDoc, FALSE );
diff --git sc/source/core/tool/compiler.cxx sc/source/core/tool/compiler.cxx
index f88d5d3..563adf9 100644
--- sc/source/core/tool/compiler.cxx
+++ sc/source/core/tool/compiler.cxx
@@ -74,9 +74,38 @@
 #include "errorcodes.hxx"
 #include "parclass.hxx"
 #include "autonamecache.hxx"
+#include "externalrefmgr.hxx"
+
+#include <stdio.h>
+
+
+namespace {
+
+#include <string>
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+    }
+
+    ~StackPrinter()
+    {
+        fprintf(stdout, "%s: --end\n", msMsg.c_str());
+    }
+
+private:
+    ::std::string msMsg;
+};
+
+}
 
 using namespace ::com::sun::star;
 using rtl::OUString;
+using ::std::vector;
 
 #if OSL_DEBUG_LEVEL > 1
 // For some unknown reason the identical dbg_dump utilities in
@@ -1165,6 +1194,174 @@ static bool lcl_isValidQuotedText( const String& rFormula, xub_StrLen nSrcPos, P
     return true;
 }
 
+static bool lcl_parseExternalName( const String& rSymbol, String& rFile, String& rName, const sal_Unicode cSep )
+{
+    StackPrinter aStack("lcl_parseExternalName");
+    fprintf(stdout, "lcl_parseExternalName:   symbol = '%s'\n", rtl::OUStringToOString(rSymbol, RTL_TEXTENCODING_UTF8).getStr());
+
+    const sal_Unicode* p = rSymbol.GetBuffer();
+    xub_StrLen nLen = rSymbol.Len();
+    sal_Unicode cPrev = 0;
+    String aTmpFile, aTmpName;
+    bool bInName = false;
+    for (xub_StrLen i = 0; i < nLen; ++i, ++p)
+    {
+        sal_Unicode c = *p;
+        if (i == 0)
+        {
+            if (c == '.' || c == cSep)
+            {
+                fprintf(stdout, "lcl_parseExternalName:   not allowed as first character '%s'\n", 
+                        rtl::OUStringToOString(String(c), RTL_TEXTENCODING_UTF8).getStr());    
+                return false;
+            }
+
+            if (c == '\'')
+            {
+                // Move to the next chart and loop until the second single
+                // quote.
+                cPrev = c;
+                ++i; ++p;
+                for (xub_StrLen j = i; j < nLen; ++j, ++p)
+                {
+                    c = *p;
+                    if (c == '\'')
+                    {
+                        if (j == i)
+                        {    
+                            // empty quote e.g. (=''!Name)
+                            fprintf(stdout, "lcl_parseExternalName:   empty quote\n");
+                            return false;
+                        }
+
+                        if (cPrev == '\'')
+                        {
+                            // two consecutive quotes equals a single
+                            // quote in the file name.
+                            aTmpFile.Append(c);
+                            cPrev = 'a';
+                        }
+                        else
+                            cPrev = c;
+
+                        continue;
+                    }
+
+                    if (cPrev == '\'' && j != i)
+                    {
+                        // this is not a quote but the previous one
+                        // is.  This ends the parsing of the quoted
+                        // segment.
+
+                        i = j;
+                        bInName = true;
+                        break;
+                    }
+                    aTmpFile.Append(c);
+                    cPrev = c;
+                }
+
+                if (!bInName)
+                {    
+                    // premature ending of the quoted segment.
+                    fprintf(stdout, "lcl_parseExternalName:   premature ending of the quoted segment\n");
+                    return false;
+                }
+
+                if (c != cSep)
+                {    
+                    // only the separator is allowed after the closing quote.
+                    fprintf(stdout, "lcl_parseExternalName:   only the '%s' is allowed after the closing quote '%s'\n",
+                            rtl::OUStringToOString(String(cSep), RTL_TEXTENCODING_UTF8).getStr(),
+                            rtl::OUStringToOString(String(c), RTL_TEXTENCODING_UTF8).getStr());
+                    return false;
+                }
+
+                cPrev = c;
+                continue;
+            }
+        }
+
+        if (bInName)
+        {
+            if (c == cSep)
+            {
+                // A second separator ?  Not a valid external name.
+                fprintf(stdout, "lcl_parseExternalName:   second %s encountered\n",
+                        rtl::OUStringToOString(String(cSep), RTL_TEXTENCODING_UTF8).getStr());
+                return false;
+            }
+            aTmpName.Append(c);
+        }
+        else
+        {
+            if (c == cSep)
+            {
+                bInName = true;
+            }
+            else
+            {
+                do
+                {
+                    if (CharClass::isAsciiAlphaNumeric(c))
+                        // allowed.
+                        break;
+
+                    if (c > 128)
+                        // non-ASCII character is allowed.
+                        break;
+
+                    bool bValid = false;
+                    switch (c)
+                    {
+                        case '_':
+                        case '-':
+                        case '.':
+                            // these special characters are allowed.
+                            bValid = true;
+                            break;
+                    }
+                    if (bValid)
+                        break;
+
+                    fprintf(stdout, "lcl_parseExternalName:   invalid character '%s'\n",
+                            rtl::OUStringToOString(String(c), RTL_TEXTENCODING_UTF8).getStr());
+                    return false;
+                }
+                while (false);
+                aTmpFile.Append(c);
+            }
+        }
+        cPrev = c;
+    }
+
+    if (!bInName)
+    {
+        // No name found - most likely the symbol has no '!'s.
+        fprintf(stdout, "lcl_parseExternalName:   not name found\n");
+        return false;
+    }
+
+    fprintf(stdout, "lcl_parseExternalName:   file = '%s'; name = '%s'\n",
+            rtl::OUStringToOString(aTmpFile, RTL_TEXTENCODING_UTF8).getStr(),
+            rtl::OUStringToOString(aTmpName, RTL_TEXTENCODING_UTF8).getStr());
+    rFile = aTmpFile;
+    rName = aTmpName;
+    return true;
+}
+
+static String lcl_makeExternalNameStr( const String& rFile, const String& rName, const sal_Unicode cSep )
+{
+    String aStr, aFile = rFile;
+    aFile.SearchAndReplaceAllAscii("'", String::CreateFromAscii("''"));
+    aStr.Append(sal_Unicode('\''));
+    aStr.Append(aFile);
+    aStr.Append(sal_Unicode('\''));
+    aStr.Append(cSep);
+    aStr.Append(rName);
+    return aStr;
+}
+
 struct Convention_A1 : public ScCompiler::Convention
 {
     Convention_A1( ScAddress::Convention eConv ) : ScCompiler::Convention( eConv ) { }
@@ -1185,7 +1382,7 @@ struct Convention_A1 : public ScCompiler::Convention
             KParseTokens::ASC_UNDERSCORE | KParseTokens::ASC_DOLLAR;
         static const sal_Int32 nContFlags = nStartFlags | KParseTokens::ASC_DOT;
         // '?' allowed in range names because of Xcl :-/
-        static const String aAddAllowed( '?' );
+        static const String aAddAllowed(String::CreateFromAscii("?#"));
         return pCharClass->parseAnyToken( rFormula,
                 nSrcPos, nStartFlags, aAddAllowed, nContFlags, aAddAllowed );
     }
@@ -1368,6 +1565,81 @@ struct ConventionOOO_A1 : public Convention_A1
 
         return sal_Unicode(0);
     }
+
+    virtual bool parseExternalName( const String& rSymbol, String& rFile, String& rName ) const
+    {
+        return lcl_parseExternalName(rSymbol, rFile, rName, sal_Unicode('#'));
+    }
+
+    virtual String makeExternalNameStr( const String& rFile, const String& rName ) const
+    {
+        return lcl_makeExternalNameStr(rFile, rName, sal_Unicode('#'));
+    }
+
+    bool makeExternalSingleRefStr( ::rtl::OUStringBuffer& rBuffer, sal_uInt16 nFileId, 
+                                   const String& rTabName, const SingleRefData& rRef, 
+                                   ScExternalRefManager* pRefMgr, bool bDisplayTabName ) const
+    {
+        if (bDisplayTabName)
+        {
+            String aFile;
+            const String* p = pRefMgr->getExternalFileName(nFileId);
+            if (p)
+                aFile = *p;
+            aFile.SearchAndReplaceAllAscii("'", String::CreateFromAscii("''"));
+    
+            rBuffer.append(sal_Unicode('\''));
+            rBuffer.append(aFile);
+            rBuffer.append(sal_Unicode('\''));
+            rBuffer.append(sal_Unicode('#'));
+    
+            // external reference is always 3D and the sheet is absolute.
+            rBuffer.append(sal_Unicode('$'));
+            bool bQuote = (rTabName.Search(sal_Unicode(' '), 0) != STRING_NOTFOUND);
+            if (bQuote)
+                rBuffer.append(sal_Unicode('\''));
+            rBuffer.append(rTabName);
+            if (bQuote)
+                rBuffer.append(sal_Unicode('\''));
+
+            rBuffer.append(sal_Unicode('.'));
+        }
+
+        if (!rRef.IsColRel())
+            rBuffer.append(sal_Unicode('$'));
+        rBuffer.append(MakeColStr(rRef.nCol));
+        if (!rRef.IsRowRel())
+            rBuffer.append(sal_Unicode('$'));
+        rBuffer.append(MakeRowStr(rRef.nRow));
+
+        return true;
+    }
+
+    virtual void makeExternalRefStr( ::rtl::OUStringBuffer& rBuffer, const ScCompiler& rCompiler,
+                                     sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef, 
+                                     ScExternalRefManager* pRefMgr ) const
+    {
+        SingleRefData aRef(rRef);
+        aRef.CalcAbsIfRel(rCompiler.GetPos());
+
+        makeExternalSingleRefStr(rBuffer, nFileId, rTabName, aRef, pRefMgr, true);
+    }
+
+    virtual void makeExternalRefStr( ::rtl::OUStringBuffer& rBuffer, const ScCompiler& rCompiler,
+                                     sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef, 
+                                     ScExternalRefManager* pRefMgr ) const
+    {
+        ComplRefData aRef(rRef);
+        aRef.CalcAbsIfRel(rCompiler.GetPos());
+
+        if (!makeExternalSingleRefStr(rBuffer, nFileId, rTabName, aRef.Ref1, pRefMgr, true))
+            return;
+
+        rBuffer.append(sal_Unicode(':'));
+
+        // TODO: Get the real table name of the last table.
+        makeExternalSingleRefStr(rBuffer, nFileId, rTabName, aRef.Ref2, pRefMgr, (aRef.Ref1.nTab != aRef.Ref2.nTab));
+    }
 };
 
 
@@ -1489,6 +1761,16 @@ struct ConventionXL
         }
         return sal_Unicode(0);
     }
+
+    static bool parseExternalName( const String& rSymbol, String& rFile, String& rName )
+    {
+        return lcl_parseExternalName(rSymbol, rFile, rName, sal_Unicode('!'));
+    }
+
+    static String makeExternalNameStr( const String& rFile, const String& rName )
+    {
+        return lcl_makeExternalNameStr(rFile, rName, sal_Unicode('!'));
+    }
 };
 
 struct ConventionXL_A1 : public Convention_A1, public ConventionXL
@@ -1587,6 +1869,16 @@ struct ConventionXL_A1 : public Convention_A1, public ConventionXL
     {
         return ConventionXL::getSpecialSymbol(eSymType);
     }
+
+    virtual bool parseExternalName( const String& rSymbol, String& rFile, String& rName ) const
+    {
+        return ConventionXL::parseExternalName(rSymbol, rFile, rName);
+    }
+
+    virtual String makeExternalNameStr( const String& rFile, const String& rName ) const
+    {
+        return ConventionXL::makeExternalNameStr(rFile, rName);
+    }
 };
 
 static const ConventionXL_A1 ConvXL_A1;
@@ -1714,6 +2006,16 @@ struct ConventionXL_R1C1 : public ScCompiler::Convention, public ConventionXL
     {
         return ConventionXL::getSpecialSymbol(eSymType);
     }
+
+    virtual bool parseExternalName( const String& rSymbol, String& rFile, String& rName ) const
+    {
+        return ConventionXL::parseExternalName(rSymbol, rFile, rName);
+    }
+
+    virtual String makeExternalNameStr( const String& rFile, const String& rName ) const
+    {
+        return ConventionXL::makeExternalNameStr(rFile, rName);
+    }
 };
 
 static const ConventionXL_R1C1 ConvXL_R1C1;
@@ -1888,6 +2190,7 @@ sal_Unicode* lcl_UnicodeStrNCpy( sal_Unicode* pDst, const sal_Unicode* pSrc, xub
 
 xub_StrLen ScCompiler::NextSymbol(bool bInArray)
 {
+    StackPrinter aStack("ScCompiler:NextSymbol");
     cSymbol[MAXSTRLEN-1] = 0;       // Stopper
     sal_Unicode* pSym = cSymbol;
     const sal_Unicode* const pStart = aFormula.GetBuffer();
@@ -1912,6 +2215,11 @@ xub_StrLen ScCompiler::NextSymbol(bool bInArray)
     bool bAutoIntersection = false;
     int nRefInSheetName = 0;
     mnPredetectedReference = 0;
+#if 0 
+    // disable non-i18n parsing
+    if (c != 0)
+        bi18n = true;
+#else
     // try to parse simple tokens before calling i18n parser
     while ((c != 0) && (eState != ssStop) )
     {
@@ -2169,7 +2477,7 @@ xub_StrLen ScCompiler::NextSymbol(bool bInArray)
                     static const int kQuote = kInc * 2;
                     static const int kPast = kInc * 3;
                     bool bAddToSymbol = true;
-                    if ('.' == c && nRefInSheetName == 0)
+                    if (cSheetSep == c && nRefInSheetName == 0)
                     {
                         // eat it, no sheet name
                         bAddToSymbol = false;
@@ -2184,7 +2492,7 @@ xub_StrLen ScCompiler::NextSymbol(bool bInArray)
                     }
                     else if (nRefInSheetName < kPast)
                     {
-                        if ('$' == c && nRefInSheetName < kDollar)
+                        if (cSheetPrefix == c && nRefInSheetName < kDollar)
                             nRefInSheetName += kDollar;
                         else if ('\'' == c)
                         {
@@ -2235,6 +2543,7 @@ xub_StrLen ScCompiler::NextSymbol(bool bInArray)
         cLast = c;
         c = *pSrc;
     }
+#endif
     if ( bi18n )
     {
         nSrcPos = sal::static_int_cast<xub_StrLen>( nSrcPos + nSpaces );
@@ -2287,6 +2596,9 @@ xub_StrLen ScCompiler::NextSymbol(bool bInArray)
         aCorrectedSymbol = cSymbol;
     if (bAutoIntersection && nSpaces > 1)
         --nSpaces;  // replace '!!' with only one space
+
+    fprintf(stdout, "ScCompiler::NextSymbol:   symbol = '%s'\n", 
+            rtl::OUStringToOString(aCorrectedSymbol, RTL_TEXTENCODING_UTF8).getStr());
     return nSpaces;
 }
 
@@ -2506,7 +2818,8 @@ BOOL ScCompiler::IsDoubleReference( const String& rName )
 {
     ScRange aRange( aPos, aPos );
     const ScAddress::Details aDetails( pConv->meConv, aPos );
-    USHORT nFlags = aRange.Parse( rName, pDoc, aDetails );
+    ScAddress::ExternalInfo aExtInfo;
+    USHORT nFlags = aRange.Parse( rName, pDoc, aDetails, &aExtInfo );
     if( nFlags & SCA_VALID )
     {
         ScRawToken aToken;
@@ -2525,23 +2838,41 @@ BOOL ScCompiler::IsDoubleReference( const String& rName )
             aRef.Ref2.SetTabDeleted( TRUE );        // #REF!
         aRef.Ref2.SetFlag3D( ( nFlags & SCA_TAB2_3D ) != 0 );
         aRef.CalcRelFromAbs( aPos );
-        aToken.SetDoubleReference( aRef );
+        if (aExtInfo.mbExternal)
+        {
+            aToken.SetExternalDoubleRef(aExtInfo.mnFileId, aExtInfo.maTabName, aRef);
+        }
+        else
+        {
+            aToken.SetDoubleReference(aRef);
+        }
         pRawToken = aToken.Clone();
     }
 
+    bool bRes = (nFlags & SCA_VALID) != 0;
+    fprintf(stdout, "ScCompiler::IsDoubleReference:   is double ref? (%s)\n", bRes?"yes":"no");
     return ( nFlags & SCA_VALID ) != 0;
 }
 
 
 BOOL ScCompiler::IsSingleReference( const String& rName )
 {
+    StackPrinter aStack("ScCompiler::IsSingleReference");
+    fprintf(stdout, "ScCompiler::IsSingleReference:   symbol ='%s'\n", rtl::OUStringToOString(rName, RTL_TEXTENCODING_UTF8).getStr());
+
     ScAddress aAddr( aPos );
     const ScAddress::Details aDetails( pConv->meConv, aPos );
-    USHORT nFlags = aAddr.Parse( rName, pDoc, aDetails );
+    ScAddress::ExternalInfo aExtInfo;
+    USHORT nFlags = aAddr.Parse( rName, pDoc, aDetails, &aExtInfo );
     // Something must be valid in order to recognize Sheet1.blah or blah.a1
     // as a (wrong) reference.
     if( nFlags & ( SCA_VALID_COL|SCA_VALID_ROW|SCA_VALID_TAB ) )
     {
+        if (aExtInfo.mbExternal)
+            fprintf(stdout, "ScCompiler::IsSingleReference:   this is an external single ref\n");
+        else
+            fprintf(stdout, "ScCompiler::IsSingleReference:   this is an internal single ref\n");
+
         ScRawToken aToken;
         SingleRefData aRef;
         aRef.InitAddress( aAddr );
@@ -2561,16 +2892,28 @@ BOOL ScCompiler::IsSingleReference( const String& rName )
             nFlags |= SCA_VALID;
         }
         aRef.CalcRelFromAbs( aPos );
-        aToken.SetSingleReference( aRef );
+        fprintf(stdout, "ScCompiler::IsSingleReference:   abs col = %d; row = %d; tab = %d\n", aRef.nCol, aRef.nRow, aRef.nTab);
+        fprintf(stdout, "ScCompiler::IsSingleReference:   rel col = %d; row = %d; tab = %d\n", 
+                aRef.nRelCol, aRef.nRelRow, aRef.nRelTab);
+        fprintf(stdout, "ScCompiler::IsSingleReference:   col rel (%d); row rel (%d); tab rel (%d)\n", 
+                aRef.IsColRel(), aRef.IsRowRel(), aRef.IsTabRel());
+
+        if (aExtInfo.mbExternal)
+            aToken.SetExternalSingleRef(aExtInfo.mnFileId, aExtInfo.maTabName, aRef);
+        else
+            aToken.SetSingleReference(aRef);
         pRawToken = aToken.Clone();
     }
 
+    fprintf(stdout, "ScCompiler::IsSingleReference:   is single ref? (%s)\n", (nFlags&SCA_VALID)?"yes":"no");
     return ( nFlags & SCA_VALID ) != 0;
 }
 
 
 BOOL ScCompiler::IsReference( const String& rName )
 {
+    StackPrinter aStack("ScCompiler::IsReference");
+
     // Has to be called before IsValue
     sal_Unicode ch1 = rName.GetChar(0);
     sal_Unicode cDecSep = ( mxSymbols->isEnglish() ? '.' :
@@ -2669,6 +3012,30 @@ BOOL ScCompiler::IsNamedRange( const String& rUpperName )
         return FALSE;
 }
 
+bool ScCompiler::IsExternalNamedRange( const String& rSymbol )
+{
+    if (!pConv)
+        return false;
+
+    String aFile, aName;
+    if (!pConv->parseExternalName(rSymbol, aFile, aName))
+        return false;
+
+    ScRawToken aToken;
+    if (aFile.Len() > MAXSTRLEN || aName.Len() > MAXSTRLEN)
+        return false;
+
+    ScExternalRefManager* pRefMgr = pDoc->GetExternalRefManager();
+    pRefMgr->convertToAbsName(aFile);
+    sal_uInt16 nFileId = pRefMgr->getExternalFileId(aFile);
+    fprintf(stdout, "ScCompiler::IsExternalNamedRange:   file name = '%s'; file id = %d\n",
+            rtl::OUStringToOString(aFile, RTL_TEXTENCODING_UTF8).getStr(), nFileId);
+
+    aToken.SetExternalName(nFileId, aName);
+    pRawToken = aToken.Clone();
+    return true;
+}
+
 BOOL ScCompiler::IsDBRange( const String& rName )
 {
     USHORT n;
@@ -3267,6 +3634,7 @@ BOOL ScCompiler::NextNewToken( bool bInArray )
               && !(bAllowBooleans && IsBoolean( aUpper ))
               && !IsValue( aUpper )
               && !IsNamedRange( aUpper )
+              && !IsExternalNamedRange(aOrg)
               && !IsDBRange( aUpper )
               && !IsColRowName( aUpper )
               && !(bMayBeFuncName && IsMacro( aUpper ))
@@ -3593,6 +3961,69 @@ BOOL ScCompiler::GetToken()
     }
     if( pToken->GetOpCode() == ocSubTotal )
         glSubTotal = TRUE;
+    else if ( pToken->GetOpCode() == ocExternalName )
+    {
+        // Handle external single and double references, or names.
+
+        ScExternalRefManager* pRefMgr = pDoc->GetExternalRefManager();
+        const String* pFile = pRefMgr->getExternalFileName(pToken->GetIndex());
+        if (!pFile)
+            SetError(errNoName);
+
+        switch (pToken->GetType())
+        {
+            case svExternalName:
+            {
+                fprintf(stdout, "ScCompiler::GetToken:   external name token\n");
+                const String& rName = pToken->GetString();
+                ScTokenArray* pNew = pRefMgr->getRangeNameTokens(pToken->GetIndex(), rName, &aPos);
+                if (pNew)
+                {
+                    PushTokenArray(pNew->Clone(), true);
+                    return GetToken();
+                }
+            }
+            break;
+            case svSingleRef:
+            {
+                fprintf(stdout, "ScCompiler::GetToken:   external single ref (file id = %d)\n", pToken->GetIndex());
+                SingleRefData aData(pToken->GetSingleRef());
+                if (aData.IsTabRel())
+                    // external single reference must have an absolute table reference!
+                    break;
+
+                aData.CalcAbsIfRel(aPos);
+                ScAddress aAddr(aData.nCol, aData.nRow, aData.nTab);
+                ScToken* pNew = pRefMgr->getSingleRefToken(pToken->GetIndex(), pToken->GetString(), aAddr, &aPos, NULL);
+                if (pNew)
+                {
+                    pToken = pNew->Clone();
+                    return false;
+                }
+            }
+            break;
+            case svDoubleRef:
+            {
+                fprintf(stdout, "ScCompiler::GetToken:   external double ref (file id = %d)\n", pToken->GetIndex());
+                ComplRefData aData(pToken->GetDoubleRef());
+                if (aData.Ref1.IsTabRel() || aData.Ref2.IsTabRel())
+                    // external double reference must have an absolute table reference!
+                    break;
+
+                aData.CalcAbsIfRel(aPos);
+                ScRange aRange(aData.Ref1.nCol, aData.Ref1.nRow, aData.Ref1.nTab, 
+                               aData.Ref2.nCol, aData.Ref2.nRow, aData.Ref2.nTab);
+                ScTokenArray* pNew = pRefMgr->getDoubleRefTokens(pToken->GetIndex(), pToken->GetString(), aRange, &aPos);
+                if (pNew)
+                {
+                    PushTokenArray(pNew->Clone(), true);
+                    return GetToken();
+                }
+            }
+            break;
+        }
+        SetError(errNoName);
+    }
     else if( pToken->GetOpCode() == ocName )
     {
         ScRangeData* pRangeData = pDoc->GetRangeName()->FindIndex( pToken->GetIndex() );
@@ -5543,6 +5974,7 @@ ScToken* ScCompiler::CreateStringFromToken( rtl::OUStringBuffer& rBuffer, ScToke
     BOOL bSpaces = FALSE;
     ScToken* t = pTokenP;
     OpCode eOp = t->GetOpCode();
+
     if( eOp >= ocAnd && eOp <= ocOr )
     {
         // AND, OR infix?
@@ -5590,111 +6022,141 @@ ScToken* ScCompiler::CreateStringFromToken( rtl::OUStringBuffer& rBuffer, ScToke
         DBG_ERRORFILE("unknown OpCode");
         rBuffer.append(ScGlobal::GetRscString(STR_NO_NAME_REF));
     }
-    if( bNext ) switch( t->GetType() )
+    if (bNext) 
     {
-        case svDouble:
-            AppendDouble( rBuffer, t->GetDouble() );
-        break;
-
-        case svString:
-            if( eOp == ocBad )
-                rBuffer.append(t->GetString());
-            else
-                AppendString( rBuffer, t->GetString() );
-            break;
-        case svSingleRef:
+        if (eOp == ocExternalName)
         {
-            SingleRefData& rRef = t->GetSingleRef();
-            ComplRefData aRef;
-            aRef.Ref1 = aRef.Ref2 = rRef;
-            if ( eOp == ocColRowName )
+            fprintf(stdout, "ScCompiler::CreateStringFromToken:   external name token\n");
+            ScExternalRefManager* pRefMgr = pDoc->GetExternalRefManager();
+            switch (t->GetType())
             {
-                rRef.CalcAbsIfRel( aPos );
-                if ( pDoc->HasStringData( rRef.nCol, rRef.nRow, rRef.nTab ) )
-                {
-                    String aStr;
-                    pDoc->GetString( rRef.nCol, rRef.nRow, rRef.nTab, aStr );
-                    EnQuote( aStr );
-                    rBuffer.append(aStr);
-                }
-                else
+                case svExternalName:
                 {
-                    rBuffer.append(ScGlobal::GetRscString(STR_NO_NAME_REF));
-                    pConv->MakeRefStr (rBuffer, *this, aRef, TRUE );
+                    const String *pStr = pRefMgr->getExternalFileName(t->GetIndex());
+                    String aFileName = pStr ? *pStr : ScGlobal::GetRscString(STR_NO_NAME_REF);
+                    rBuffer.append(pConv->makeExternalNameStr(
+                        aFileName, t->GetString()));
                 }
+                break;
+                case svSingleRef:
+                    pConv->makeExternalRefStr(
+                        rBuffer, *this, t->GetIndex(), t->GetString(), t->GetSingleRef(), pRefMgr);
+                break;
+                case svDoubleRef:
+                    pConv->makeExternalRefStr(
+                        rBuffer, *this, t->GetIndex(), t->GetString(), t->GetDoubleRef(), pRefMgr);
+                break;
             }
-            else
-                pConv->MakeRefStr( rBuffer, *this, aRef, TRUE );
         }
-            break;
-        case svDoubleRef:
-            pConv->MakeRefStr( rBuffer, *this, t->GetDoubleRef(), FALSE );
-            break;
-        case svMatrix:
-            CreateStringFromScMatrix( rBuffer, t->GetMatrix() );
-            break;
-
-        case svIndex:
+        else
         {
-            rtl::OUStringBuffer aBuffer;
-            switch ( eOp )
+            switch( t->GetType() )
             {
-                case ocName:
+                case svDouble:
+                    AppendDouble( rBuffer, t->GetDouble() );
+                break;
+        
+                case svString:
+                    if( eOp == ocBad )
+                        rBuffer.append(t->GetString());
+                    else
+                        AppendString( rBuffer, t->GetString() );
+                    break;
+                case svSingleRef:
                 {
-                    ScRangeData* pData = pDoc->GetRangeName()->FindIndex(t->GetIndex());
-                    if (pData)
+                    SingleRefData& rRef = t->GetSingleRef();
+                    ComplRefData aRef;
+                    aRef.Ref1 = aRef.Ref2 = rRef;
+                    if ( eOp == ocColRowName )
                     {
-                        if (pData->HasType(RT_SHARED))
-                            pData->UpdateSymbol( aBuffer, aPos, GetGrammar());
+                        rRef.CalcAbsIfRel( aPos );
+                        if ( pDoc->HasStringData( rRef.nCol, rRef.nRow, rRef.nTab ) )
+                        {
+                            String aStr;
+                            pDoc->GetString( rRef.nCol, rRef.nRow, rRef.nTab, aStr );
+                            EnQuote( aStr );
+                            rBuffer.append(aStr);
+                        }
                         else
-                            aBuffer.append(pData->GetName());
+                        {
+                            rBuffer.append(ScGlobal::GetRscString(STR_NO_NAME_REF));
+                            pConv->MakeRefStr (rBuffer, *this, aRef, TRUE );
+                        }
                     }
+                    else
+                        pConv->MakeRefStr( rBuffer, *this, aRef, TRUE );
                 }
-                break;
-                case ocDBArea:
+                    break;
+                case svDoubleRef:
+                    pConv->MakeRefStr( rBuffer, *this, t->GetDoubleRef(), FALSE );
+                    break;
+                case svMatrix:
+                    CreateStringFromScMatrix( rBuffer, t->GetMatrix() );
+                    break;
+        
+                case svIndex:
                 {
-                    ScDBData* pDBData = pDoc->GetDBCollection()->FindIndex(t->GetIndex());
-                    if (pDBData)
-                        aBuffer.append(pDBData->GetName());
+                    rtl::OUStringBuffer aBuffer;
+                    switch ( eOp )
+                    {
+                        case ocName:
+                        {
+                            ScRangeData* pData = pDoc->GetRangeName()->FindIndex(t->GetIndex());
+                            if (pData)
+                            {
+                                if (pData->HasType(RT_SHARED))
+                                    pData->UpdateSymbol( aBuffer, aPos, GetGrammar());
+                                else
+                                    aBuffer.append(pData->GetName());
+                            }
+                        }
+                        break;
+                        case ocDBArea:
+                        {
+                            ScDBData* pDBData = pDoc->GetDBCollection()->FindIndex(t->GetIndex());
+                            if (pDBData)
+                                aBuffer.append(pDBData->GetName());
+                        }
+                        break;
+                        default:
+                            ;   // nothing
+                    }
+                    if ( aBuffer.getLength() )
+                        rBuffer.append(aBuffer);
+                    else
+                        rBuffer.append(ScGlobal::GetRscString(STR_NO_NAME_REF));
+                    break;
                 }
-                break;
-                default:
-                    ;   // nothing
-            }
-            if ( aBuffer.getLength() )
-                rBuffer.append(aBuffer);
-            else
-                rBuffer.append(ScGlobal::GetRscString(STR_NO_NAME_REF));
-            break;
-        }
-        case svExternal:
-        {
-            // mapped or translated name of AddIns
-            String aAddIn( t->GetExternal() );
-            bool bMapped = mxSymbols->isPODF();     // ODF 1.1 directly uses programmatical name
-            if (!bMapped && mxSymbols->hasExternals())
-            {
-                ScExternalHashMap::const_iterator iLook = mxSymbols->getReverseExternalHashMap()->find( aAddIn);
-                if (iLook != mxSymbols->getReverseExternalHashMap()->end())
+                case svExternal:
                 {
-                    aAddIn = (*iLook).second;
-                    bMapped = true;
+                    // mapped or translated name of AddIns
+                    String aAddIn( t->GetExternal() );
+                    bool bMapped = mxSymbols->isPODF();     // ODF 1.1 directly uses programmatical name
+                    if (!bMapped && mxSymbols->hasExternals())
+                    {
+                        ScExternalHashMap::const_iterator iLook = mxSymbols->getReverseExternalHashMap()->find( aAddIn);
+                        if (iLook != mxSymbols->getReverseExternalHashMap()->end())
+                        {
+                            aAddIn = (*iLook).second;
+                            bMapped = true;
+                        }
+                    }
+                    if (!bMapped && !mxSymbols->isEnglish())
+                        ScGlobal::GetAddInCollection()->LocalizeString( aAddIn );
+                    rBuffer.append(aAddIn);
                 }
-            }
-            if (!bMapped && !mxSymbols->isEnglish())
-                ScGlobal::GetAddInCollection()->LocalizeString( aAddIn );
-            rBuffer.append(aAddIn);
+                    break;
+                case svByte:
+                case svJump:
+                case svFAP:
+                case svMissing:
+                case svSep:
+                    break;      // Opcodes
+                default:
+                    DBG_ERROR("ScCompiler:: GetStringFromToken errUnknownVariable");
+            }                                           // of switch
         }
-            break;
-        case svByte:
-        case svJump:
-        case svFAP:
-        case svMissing:
-        case svSep:
-            break;      // Opcodes
-        default:
-            DBG_ERROR("ScCompiler:: GetStringFromToken errUnknownVariable");
-    }                                           // of switch
+    }
     if( bSpaces )
         rBuffer.append(sal_Unicode(' '));
     if ( bAllowArrAdvance )
diff --git sc/source/core/tool/token.cxx sc/source/core/tool/token.cxx
index a20cbd5..25090a8 100644
--- sc/source/core/tool/token.cxx
+++ sc/source/core/tool/token.cxx
@@ -54,6 +54,33 @@
 #include "parclass.hxx"
 #include "jumpmatrix.hxx"
 
+using ::std::vector;
+
+
+namespace {
+
+#include <string>
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+    }
+
+    ~StackPrinter()
+    {
+        fprintf(stdout, "%s: --end\n", msMsg.c_str());
+    }
+
+private:
+    ::std::string msMsg;
+};
+
+}
+
 // ImpTokenIterator wird je Interpreter angelegt, mehrfache auch durch
 // SubCode via ScTokenIterator Push/Pop moeglich
 IMPL_FIXEDMEMPOOL_NEWDEL( ImpTokenIterator, 32, 16 )
@@ -209,6 +236,51 @@ void ScRawToken::SetName( USHORT n )
     nRefCnt = 0;
 }
 
+void ScRawToken::SetExternalSingleRef( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef )
+{
+    eOp = ocExternalName;
+    eType = svSingleRef;
+    nRefCnt = 0;
+
+    extref.nFileId = nFileId;
+    extref.aRef.Ref1 = 
+    extref.aRef.Ref2 = rRef;
+
+    xub_StrLen n = rTabName.Len();
+    fprintf(stdout, "ScRawToken::SetExternalSingleRef:   tab name = '%s'; len = %d\n", 
+            rtl::OUStringToOString(rTabName, RTL_TEXTENCODING_UTF8).getStr(), n);
+
+    memcpy(extref.cTabName, rTabName.GetBuffer(), n*sizeof(sal_Unicode));
+    extref.cTabName[n] = 0;
+}
+
+void ScRawToken::SetExternalDoubleRef( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef )
+{
+    eOp = ocExternalName;
+    eType = svDoubleRef;
+    nRefCnt = 0;
+
+    extref.nFileId = nFileId;
+    extref.aRef = rRef;
+
+    xub_StrLen n = rTabName.Len();
+    memcpy(extref.cTabName, rTabName.GetBuffer(), n*sizeof(sal_Unicode));
+    extref.cTabName[n] = 0;
+}
+
+void ScRawToken::SetExternalName( sal_uInt16 nFileId, const String& rName )
+{
+    eOp = ocExternalName;
+    eType = svExternalName;
+    nRefCnt = 0;
+
+    extname.nFileId = nFileId;
+
+    xub_StrLen n = rName.Len();
+    memcpy(extname.cName, rName.GetBuffer(), n*sizeof(sal_Unicode));
+    extname.cName[n] = 0;
+}
+
 ComplRefData& ScRawToken::GetReference()
 {
     DBG_ASSERT( lcl_IsReference( eOp, GetType() ), "GetReference: no Ref" );
@@ -260,22 +332,34 @@ ScRawToken* ScRawToken::Clone() const
         static USHORT nOffset = lcl_ScRawTokenOffset();     // offset of sbyte
         USHORT n = nOffset;
 
-        switch( eType )
+        if (eOp == ocExternalName)
         {
-            case svSep:         break;
-            case svByte:        n += sizeof(ScRawToken::sbyte); break;
-            case svDouble:      n += sizeof(double); break;
-            case svString:      n = sal::static_int_cast<USHORT>( n + GetStrLenBytes( cStr ) + GetStrLenBytes( 1 ) ); break;
-            case svSingleRef:
-            case svDoubleRef:   n += sizeof(aRef); break;
-            case svMatrix:      n += sizeof(ScMatrix*); break;
-            case svIndex:       n += sizeof(USHORT); break;
-            case svJump:        n += nJump[ 0 ] * 2 + 2; break;
-            case svExternal:    n = sal::static_int_cast<USHORT>( n + GetStrLenBytes( cStr+1 ) + GetStrLenBytes( 2 ) ); break;
-            default:
-                                {
-                                    DBG_ERROR1( "unknown ScRawToken::Clone() type %d", int(eType));
-                                }
+            switch (eType)
+            {
+                case svSingleRef:
+                case svDoubleRef:    n += sizeof(extref); break;
+                case svExternalName: n += sizeof(extname); break;
+            }
+        }
+        else
+        {
+            switch( eType )
+            {
+                case svSep:         break;
+                case svByte:        n += sizeof(ScRawToken::sbyte); break;
+                case svDouble:      n += sizeof(double); break;
+                case svString:      n = sal::static_int_cast<USHORT>( n + GetStrLenBytes( cStr ) + GetStrLenBytes( 1 ) ); break;
+                case svSingleRef:
+                case svDoubleRef:   n += sizeof(aRef); break;
+                case svMatrix:      n += sizeof(ScMatrix*); break;
+                case svIndex:       n += sizeof(USHORT); break;
+                case svJump:        n += nJump[ 0 ] * 2 + 2; break;
+                case svExternal:    n = sal::static_int_cast<USHORT>( n + GetStrLenBytes( cStr+1 ) + GetStrLenBytes( 2 ) ); break;
+                default:
+                {
+                    DBG_ERROR1( "unknown ScRawToken::Clone() type %d", int(eType));
+                }
+            }
         }
         p = (ScRawToken*) new BYTE[ n ];
         memcpy( p, this, n * sizeof(BYTE) );
@@ -311,12 +395,22 @@ ScToken* ScRawToken::CreateToken() const
         case svSingleRef :
             if (eOp == ocPush)
                 return new ScSingleRefToken( aRef.Ref1 );
+            else if (eOp == ocExternalName)
+            {
+                String aTabName(extref.cTabName);
+                return new ScExternalSingleRefToken(extref.nFileId, aTabName, extref.aRef.Ref1);
+            }
             else
                 return new ScSingleRefOpToken( eOp, aRef.Ref1 );
         //break;
         case svDoubleRef :
             if (eOp == ocPush)
                 return new ScDoubleRefToken( aRef );
+            else if (eOp == ocExternalName)
+            {
+                String aTabName(extref.cTabName);
+                return new ScExternalDoubleRefToken(extref.nFileId, aTabName, extref.aRef);
+            }
             else
                 return new ScDoubleRefOpToken( eOp, aRef );
         //break;
@@ -327,6 +421,11 @@ ScToken* ScRawToken::CreateToken() const
         case svIndex :
             return new ScIndexToken( eOp, nIndex );
         //break;
+        case svExternalName:
+        {
+            String aName(extname.cName);
+            return new ScExternalNameToken( extname.nFileId, aName );
+        }
         case svJump :
             return new ScJumpToken( eOp, (short*) nJump );
         //break;
@@ -478,6 +577,7 @@ BOOL ScToken::IsMatrixFunction() const
 
 ScToken* ScToken::Clone() const
 {
+    OpCode nOp = GetOpCode();
     switch ( GetType() )
     {
         case svByte :
@@ -487,20 +587,24 @@ ScToken* ScToken::Clone() const
             return new ScDoubleToken( *static_cast<const ScDoubleToken*>(this) );
         //break;
         case svString :
-            if (GetOpCode() == ocPush)
+            if (nOp == ocPush)
                 return new ScStringToken( *static_cast<const ScStringToken*>(this) );
             else
                 return new ScStringOpToken( *static_cast<const ScStringOpToken*>(this) );
         //break;
         case svSingleRef :
-            if (GetOpCode() == ocPush)
+            if (nOp == ocPush)
                 return new ScSingleRefToken( *static_cast<const ScSingleRefToken*>(this) );
+            else if (nOp == ocExternalName)
+                return new ScExternalSingleRefToken( *static_cast<const ScExternalSingleRefToken*>(this) );
             else
                 return new ScSingleRefOpToken( *static_cast<const ScSingleRefOpToken*>(this) );
         //break;
         case svDoubleRef :
-            if (GetOpCode() == ocPush)
+            if (nOp == ocPush)
                 return new ScDoubleRefToken( *static_cast<const ScDoubleRefToken*>(this) );
+            else if (nOp == ocExternalName)
+                return new ScExternalDoubleRefToken( *static_cast<const ScExternalDoubleRefToken*>(this) );
             else
                 return new ScDoubleRefOpToken( *static_cast<const ScDoubleRefOpToken*>(this) );
         //break;
@@ -522,6 +626,9 @@ ScToken* ScToken::Clone() const
         case svExternal :
             return new ScExternalToken( *static_cast<const ScExternalToken*>(this) );
         //break;
+        case svExternalName :
+            return new ScExternalNameToken( *static_cast<const ScExternalNameToken*>(this) );
+        //break;
         case svFAP :
             return new ScFAPToken( *static_cast<const ScFAPToken*>(this) );
         //break;
@@ -660,6 +767,7 @@ ScTokenRef ScToken::ExtendRangeReference( ScToken & rTok1, ScToken & rTok2,
         return NULL;
 
     ScTokenRef xRes;
+    bool bExternal = rTok1.GetOpCode() == ocExternalName;
     if (sv1 == svSingleRef && sv2 == svSingleRef)
     {
         // Range references like Sheet1.A1:A2 are generalized and built by
@@ -671,7 +779,10 @@ ScTokenRef ScToken::ExtendRangeReference( ScToken & rTok1, ScToken & rTok2,
         aRef.Ref1 = aRef.Ref2 = p1->GetSingleRef();
         aRef.Ref2.SetFlag3D( false);
         aRef.Extend( p2->GetSingleRef(), rPos);
-        xRes = new ScDoubleRefToken( aRef);
+        if (bExternal)
+            xRes = new ScExternalDoubleRefToken(rTok1.GetIndex(), rTok1.GetString(), aRef);
+        else
+            xRes = new ScDoubleRefToken( aRef);
     }
     else
     {
@@ -694,7 +805,10 @@ ScTokenRef ScToken::ExtendRangeReference( ScToken & rTok1, ScToken & rTok2,
         {
             if (!pRefList->size())
                 return NULL;
-            xRes = new ScDoubleRefToken( (*pRefList)[0] );
+            if (bExternal)
+                xRes = new ScExternalDoubleRefToken(rTok1.GetIndex(), rTok1.GetString(), (*pRefList)[0]);
+            else
+                xRes = new ScDoubleRefToken( (*pRefList)[0] );
         }
         if (!xRes)
             return NULL;    // shouldn't happen..
@@ -1035,6 +1149,170 @@ BOOL ScIndexToken::operator==( const ScToken& r ) const
     return ScToken::operator==( r ) && nIndex == r.GetIndex();
 }
 
+// ============================================================================
+
+ScExternalSingleRefToken::ScExternalSingleRefToken( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& r ) :
+    ScOpToken(ocExternalName, svSingleRef),
+    mnFileId(nFileId),
+    maTabName(rTabName),
+    maSingleRef(r)
+{
+}
+
+ScExternalSingleRefToken::ScExternalSingleRefToken( const ScExternalSingleRefToken& r ) :
+    ScOpToken(r), 
+    mnFileId(r.mnFileId),
+    maTabName(r.maTabName),
+    maSingleRef(r.maSingleRef)
+{
+}
+
+ScExternalSingleRefToken::~ScExternalSingleRefToken()
+{
+}
+
+USHORT ScExternalSingleRefToken::GetIndex() const
+{
+    return mnFileId;
+}
+
+const String& ScExternalSingleRefToken::GetString() const
+{
+    return maTabName;
+}
+
+const SingleRefData& ScExternalSingleRefToken::GetSingleRef() const
+{
+    return maSingleRef;
+}
+
+SingleRefData& ScExternalSingleRefToken::GetSingleRef()
+{
+    return maSingleRef;
+}
+
+BOOL ScExternalSingleRefToken::operator ==( const ScToken& r ) const
+{
+    if (!ScToken::operator==(r))
+        return false;
+
+    if (mnFileId != r.GetIndex())
+        return false;
+
+    if (maTabName != r.GetString())
+        return false;
+
+    return maSingleRef == r.GetSingleRef();
+}
+
+// ============================================================================
+
+ScExternalDoubleRefToken::ScExternalDoubleRefToken( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& r ) :
+    ScOpToken(ocExternalName, svDoubleRef),
+    mnFileId(nFileId),
+    maTabName(rTabName),
+    maDoubleRef(r)
+{
+}
+
+ScExternalDoubleRefToken::ScExternalDoubleRefToken( const ScExternalDoubleRefToken& r ) :
+    ScOpToken(r), 
+    mnFileId(r.mnFileId),
+    maTabName(r.maTabName),
+    maDoubleRef(r.maDoubleRef)
+{
+}
+
+ScExternalDoubleRefToken::~ScExternalDoubleRefToken()
+{
+}
+
+USHORT ScExternalDoubleRefToken::GetIndex() const
+{
+    return mnFileId;
+}
+
+const String& ScExternalDoubleRefToken::GetString() const
+{
+    return maTabName;
+}
+
+const ComplRefData& ScExternalDoubleRefToken::GetDoubleRef() const
+{
+    return maDoubleRef;
+}
+
+ComplRefData& ScExternalDoubleRefToken::GetDoubleRef()
+{
+    return maDoubleRef;
+}
+
+BOOL ScExternalDoubleRefToken::operator ==( const ScToken& r ) const
+{
+    if (!ScToken::operator==(r))
+        return false;
+
+    if (mnFileId != r.GetIndex())
+        return false;
+
+    if (maTabName != r.GetString())
+        return false;
+
+    return maDoubleRef == r.GetDoubleRef();
+}
+
+// ============================================================================
+
+ScExternalNameToken::ScExternalNameToken( sal_uInt16 nFileId, const String& rName ) :
+    ScOpToken(ocExternalName, svExternalName),
+    mnFileId(nFileId),
+    maName(rName)
+{
+}
+
+ScExternalNameToken::ScExternalNameToken( const ScExternalNameToken& r ) :
+    ScOpToken(r),
+    mnFileId(r.mnFileId),
+    maName(r.maName)
+{
+}
+
+ScExternalNameToken::~ScExternalNameToken() {}
+
+USHORT ScExternalNameToken::GetIndex() const
+{
+    return mnFileId;
+}
+
+const String& ScExternalNameToken::GetString() const
+{
+    return maName;
+}
+
+BOOL ScExternalNameToken::operator==( const ScToken& r ) const
+{
+    if ( !ScToken::operator==(r) )
+        return false;
+
+    if (mnFileId != r.GetIndex())
+        return false;
+
+    xub_StrLen nLen = maName.Len();
+    const String& rName = r.GetString();
+    if (nLen != rName.Len())
+        return false;
+
+    const sal_Unicode* p1 = maName.GetBuffer();
+    const sal_Unicode* p2 = rName.GetBuffer();
+    for (xub_StrLen j = 0; j < nLen; ++j)
+    {
+        if (p1[j] != p2[j])
+            return false;
+    }
+    return true;
+}
+
+// ============================================================================
 
 short* ScJumpToken::GetJump() const                     { return pJump; }
 BOOL ScJumpToken::operator==( const ScToken& r ) const
@@ -1893,6 +2171,21 @@ ScToken* ScTokenArray::AddMatrix( ScMatrix* p )
     return Add( new ScMatrixToken( p ) );
 }
 
+ScToken* ScTokenArray::AddExternalName( sal_uInt16 nFileId, const String& rName )
+{
+    return Add( new ScExternalNameToken(nFileId, rName) );
+}
+
+ScToken* ScTokenArray::AddExternalSingleReference( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef )
+{
+    return Add( new ScExternalSingleRefToken(nFileId, rTabName, rRef) );
+}
+
+ScToken* ScTokenArray::AddExternalDoubleReference( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef )
+{
+    return Add( new ScExternalDoubleRefToken(nFileId, rTabName, rRef) );
+}
+
 ScToken* ScTokenArray::AddColRowName( const SingleRefData& rRef )
 {
     return Add( new ScSingleRefOpToken( ocColRowName, rRef ) );
diff --git sc/source/filter/excel/excform8.cxx sc/source/filter/excel/excform8.cxx
index ebf8543..e4968c2 100644
--- sc/source/filter/excel/excform8.cxx
+++ sc/source/filter/excel/excform8.cxx
@@ -41,6 +41,32 @@
 #include "xilink.hxx"
 #include "xiname.hxx"
 
+#include "externalrefmgr.hxx"
+
+
+namespace {
+
+#include <string>
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+    }
+
+    ~StackPrinter()
+    {
+        fprintf(stdout, "%s: --end\n", msMsg.c_str());
+    }
+
+private:
+    ::std::string msMsg;
+};
+
+}
 
 ExcelToSc8::ExcelToSc8( const XclImpRoot& rRoot ) :
     ExcelToSc( rRoot ),
@@ -53,15 +79,23 @@ ExcelToSc8::~ExcelToSc8()
 {
 }
 
-
-BOOL ExcelToSc8::Read3DTabReference( XclImpStream& rStrm, SCTAB& rFirstTab, SCTAB& rLastTab )
+bool ExcelToSc8::GetExternalFileIdFromXti( UINT16 nIxti, sal_uInt16& rFileId ) const
 {
-	rFirstTab = rLastTab = 0;
+    const String* pFileUrl = rLinkMan.GetSupbookUrl(nIxti);
+    if (!pFileUrl || pFileUrl->Len() == 0)
+        return false;
 
-	UINT16 nIxti;
-    rStrm >> nIxti;
+    String aFileUrl = ScGlobal::GetAbsDocName(*pFileUrl, GetDocShell());
+    ScExternalRefManager* pRefMgr = GetDoc().GetExternalRefManager();
+    rFileId = pRefMgr->getExternalFileId(aFileUrl);
 
-    return rLinkMan.GetScTabRange( rFirstTab, rLastTab, nIxti );
+    return true;
+}
+
+bool ExcelToSc8::Read3DTabReference( SCTAB& rFirstTab, SCTAB& rLastTab, UINT16 nIxti )
+{
+	rFirstTab = rLastTab = 0;
+    return rLinkMan.GetScTabRange(rFirstTab, rLastTab, nIxti);
 }
 
 
@@ -608,8 +642,14 @@ ConvErr ExcelToSc8::Convert( const ScTokenArray*& rpTokArray, XclImpStream& aIn,
                     {
                         case xlExtName:
                         {
-                            aStack << aPool.Store( ocNoName, pExtName->GetName() );
-                            GetTracer().TraceFormulaExtName();
+                            sal_uInt16 nFileId;
+                            if (!GetExternalFileIdFromXti(nXtiIndex, nFileId))
+                            {
+                                aStack << aPool.Store(ocNoName, pExtName->GetName());
+                                break;
+                            }
+
+                            aStack << aPool.StoreExtName(nFileId, pExtName->GetName());
                         }
                         break;
 
@@ -657,47 +697,81 @@ ConvErr ExcelToSc8::Convert( const ScTokenArray*& rpTokArray, XclImpStream& aIn,
 			case 0x7C:
 			case 0x3C: // Deleted 3-D Cell Reference			[    277]
 			{
-				UINT16 nRw, nGrbitCol;
+                fprintf(stdout, "ExcelToSc8::Convert:   cell reference\n");
+				UINT16 nIxti, nRw, nGrbitCol;
 				SCTAB nTabFirst, nTabLast;
 
-                BOOL bOK = Read3DTabReference( aIn, nTabFirst, nTabLast );
-				aIn >> nRw >> nGrbitCol;
+                aIn >> nIxti >> nRw >> nGrbitCol;
 
-				if( bOK )
-				{
-					aSRD.nTab = nTabFirst;
-                    aSRD.SetFlag3D( TRUE );
-					aSRD.SetTabRel( FALSE );
+                if (!Read3DTabReference(nTabFirst, nTabLast, nIxti))
+                {
+                    aPool << ocBad;
+                    aPool >> aStack;
+                    break;
+                }
 
-                    ExcRelToScRel8( nRw, nGrbitCol, aSRD, bRangeName );
+                bool bExternal = !rLinkMan.IsSelfRef(nIxti);
+                fprintf(stdout, "ExcelToSc8::Convert:   first tab = %d; last tab = %d; external (%d)\n", nTabFirst, nTabLast, bExternal);
 
-					switch ( nOp )
-					{
-						case 0x5C:
-						case 0x7C:
-						case 0x3C: // Deleted 3-D Cell Reference	[    277]
-							// no information which part is deleted, set both
-							aSRD.SetColDeleted( TRUE );
-							aSRD.SetRowDeleted( TRUE );
-					}
-					if ( !ValidTab(nTabFirst) )
-						aSRD.SetTabDeleted( TRUE );
+                aSRD.nTab = nTabFirst;
+                aSRD.SetFlag3D( TRUE );
+                aSRD.SetTabRel( FALSE );
 
-					if( nTabLast != nTabFirst )
-					{
-						aCRD.Ref1 = aCRD.Ref2 = aSRD;
-						aCRD.Ref2.nTab = nTabLast;
+                ExcRelToScRel8( nRw, nGrbitCol, aSRD, bRangeName );
+
+                switch ( nOp )
+                {
+                    case 0x5C:
+                    case 0x7C:
+                    case 0x3C: // Deleted 3-D Cell Reference	[    277]
+                        // no information which part is deleted, set both
+                        aSRD.SetColDeleted( TRUE );
+                        aSRD.SetRowDeleted( TRUE );
+                }
+
+                if (bExternal)
+                {
+                    // nTabFirst and nTabLast are the indices of the refernced 
+                    // sheets in the SUPBOOK record, hence do not represent
+                    // the actual indices of the original sheets since the
+                    // SUPBOOK record only stores referenced sheets and skips
+                    // the ones that are not referenced.
+
+                    const String& rTabName = rLinkMan.GetSupbookTabName(nIxti, nTabFirst);
+                    fprintf(stdout, "ExcelToSc8::Convert:   tab name of first sheet = '%s'\n",
+                            rtl::OUStringToOString(rTabName, RTL_TEXTENCODING_UTF8).getStr());
+
+                    sal_uInt16 nFileId;
+                    if (!GetExternalFileIdFromXti(nIxti, nFileId))
+                    {
+                        aPool << ocBad;
+                        aPool >> aStack;
+                        break;
+                    }
+                    if (nTabLast != nTabFirst)
+                    {
+                        aCRD.Ref1 = aCRD.Ref2 = aSRD;
+                        aCRD.Ref2.nTab = nTabLast;
+                        aStack << aPool.StoreExtRef(nFileId, rTabName, aCRD);
+                    }
+                    else
+                        aStack << aPool.StoreExtRef(nFileId, rTabName, aSRD);
+                }
+                else
+                {
+                    if ( !ValidTab(nTabFirst))
+                        aSRD.SetTabDeleted( TRUE );
+
+                    if( nTabLast != nTabFirst )
+                    {
+                        aCRD.Ref1 = aCRD.Ref2 = aSRD;
+                        aCRD.Ref2.nTab = nTabLast;
                         aCRD.Ref2.SetTabDeleted( !ValidTab(nTabLast) );
-						aStack << aPool.Store( aCRD );
-					}
-					else
-						aStack << aPool.Store( aSRD );
-				}
-				else
-				{
-					aPool << ocBad;
-					aPool >> aStack;
-				}
+                        aStack << aPool.Store( aCRD );
+                    }
+                    else
+                        aStack << aPool.Store( aSRD );
+                }
 			}
 				break;
 			case 0x5B:
@@ -707,55 +781,75 @@ ConvErr ExcelToSc8::Convert( const ScTokenArray*& rpTokArray, XclImpStream& aIn,
 			case 0x7D:
 			case 0x3D: // Deleted 3-D Area Reference			[    277]
 			{
-				UINT16 nRw1, nGrbitCol1, nRw2, nGrbitCol2;
+                fprintf(stdout, "ExcelToSc8::Convert:   area reference\n");
+				UINT16 nIxti, nRw1, nGrbitCol1, nRw2, nGrbitCol2;
 				SCTAB nTabFirst, nTabLast;
+				aIn >> nIxti >> nRw1 >> nRw2 >> nGrbitCol1 >> nGrbitCol2;
 
-                BOOL bOK = Read3DTabReference( aIn, nTabFirst, nTabLast );
-				aIn >> nRw1 >> nRw2 >> nGrbitCol1 >> nGrbitCol2;
-
-				if( bOK )
+                if (!Read3DTabReference(nTabFirst, nTabLast, nIxti))
 				{
-					SingleRefData	&rR1 = aCRD.Ref1;
-					SingleRefData	&rR2 = aCRD.Ref2;
+					aPool << ocBad;
+					aPool >> aStack;
+                    break;
+				}
 
-					rR1.nTab = nTabFirst;
-					rR2.nTab = nTabLast;
-                    rR1.SetFlag3D( TRUE );
-					rR1.SetTabRel( FALSE );
-                    rR2.SetFlag3D( nTabFirst != nTabLast );
-					rR2.SetTabRel( FALSE );
+                bool bExternal = !rLinkMan.IsSelfRef(nIxti);
+                fprintf(stdout, "ExcelToSc8::Convert:   first tab = %d; last tab = %d; external (%d)\n", nTabFirst, nTabLast, bExternal);
+                
+                SingleRefData	&rR1 = aCRD.Ref1;
+                SingleRefData	&rR2 = aCRD.Ref2;
 
-                    ExcRelToScRel8( nRw1, nGrbitCol1, aCRD.Ref1, bRangeName );
-                    ExcRelToScRel8( nRw2, nGrbitCol2, aCRD.Ref2, bRangeName );
+                rR1.nTab = nTabFirst;
+                rR2.nTab = nTabLast;
+                rR1.SetFlag3D( TRUE );
+                rR1.SetTabRel( FALSE );
+                rR2.SetFlag3D( nTabFirst != nTabLast );
+                rR2.SetTabRel( FALSE );
 
-					if( IsComplColRange( nGrbitCol1, nGrbitCol2 ) )
-						SetComplCol( aCRD );
-					else if( IsComplRowRange( nRw1, nRw2 ) )
-						SetComplRow( aCRD );
+                ExcRelToScRel8( nRw1, nGrbitCol1, aCRD.Ref1, bRangeName );
+                ExcRelToScRel8( nRw2, nGrbitCol2, aCRD.Ref2, bRangeName );
 
-					switch ( nOp )
-					{
-						case 0x5D:
-						case 0x7D:
-						case 0x3D: // Deleted 3-D Area Reference	[    277]
-							// no information which part is deleted, set all
-							rR1.SetColDeleted( TRUE );
-							rR1.SetRowDeleted( TRUE );
-							rR2.SetColDeleted( TRUE );
-							rR2.SetRowDeleted( TRUE );
-					}
-					if ( !ValidTab(nTabFirst) )
-						rR1.SetTabDeleted( TRUE );
-					if ( !ValidTab(nTabLast) )
-						rR2.SetTabDeleted( TRUE );
+                if( IsComplColRange( nGrbitCol1, nGrbitCol2 ) )
+                    SetComplCol( aCRD );
+                else if( IsComplRowRange( nRw1, nRw2 ) )
+                    SetComplRow( aCRD );
 
-					aStack << aPool.Store( aCRD );
-				}
-				else
-				{
-					aPool << ocBad;
-					aPool >> aStack;
-				}
+                switch ( nOp )
+                {
+                    case 0x5D:
+                    case 0x7D:
+                    case 0x3D: // Deleted 3-D Area Reference	[    277]
+                        // no information which part is deleted, set all
+                        rR1.SetColDeleted( TRUE );
+                        rR1.SetRowDeleted( TRUE );
+                        rR2.SetColDeleted( TRUE );
+                        rR2.SetRowDeleted( TRUE );
+                }
+
+                if (bExternal)
+                {
+                    const String& rTabName = rLinkMan.GetSupbookTabName(nIxti, nTabFirst);
+                    fprintf(stdout, "ExcelToSc8::Convert:   tab name of first sheet = '%s'\n",
+                            rtl::OUStringToOString(rTabName, RTL_TEXTENCODING_UTF8).getStr());
+
+                    sal_uInt16 nFileId;
+                    if (!GetExternalFileIdFromXti(nIxti, nFileId))
+                    {
+                        aPool << ocBad;
+                        aPool >> aStack;
+                        break;
+                    }
+                    aStack << aPool.StoreExtRef(nFileId, rTabName, aCRD);
+                }
+                else
+                {
+                    if ( !ValidTab(nTabFirst) )
+                        rR1.SetTabDeleted( TRUE );
+                    if ( !ValidTab(nTabLast) )
+                        rR2.SetTabDeleted( TRUE );
+    
+                    aStack << aPool.Store( aCRD );
+                }
 			}
 				break;
 			default: bError = TRUE;
diff --git sc/source/filter/excel/tokstack.cxx sc/source/filter/excel/tokstack.cxx
index 20ada63..9c4ddba 100644
--- sc/source/filter/excel/tokstack.cxx
+++ sc/source/filter/excel/tokstack.cxx
@@ -395,6 +395,34 @@ void TokenPool::GetElement( const UINT16 nId )
                         pScToken->AddMatrix( p );
                 }
                 break;
+            case T_ExtName:
+            {
+                UINT16 n = pElement[nId];
+                if (n < maExtNames.size())
+                {
+                    const ExtName& r = maExtNames[n];
+                    pScToken->AddExternalName(r.mnFileId, r.maName);
+                }
+            }
+            case T_ExtRefC:
+            {
+                UINT16 n = pElement[nId];
+                if (n < maExtCellRefs.size())
+                {
+                    const ExtCellRef& r = maExtCellRefs[n];
+                    pScToken->AddExternalSingleReference(r.mnFileId, r.maTabName, r.maRef);
+                }
+            }
+            case T_ExtRefA:
+            {
+                UINT16 n = pElement[nId];
+                if (n < maExtAreaRefs.size())
+                {
+                    const ExtAreaRef& r = maExtAreaRefs[n];
+                    pScToken->AddExternalDoubleReference(r.mnFileId, r.maTabName, r.maRef);
+                }
+            }
+            break;
 			default:
 				DBG_ERROR("-TokenPool::GetElement(): Zustand undefiniert!?");
 		}
@@ -477,6 +505,34 @@ void TokenPool::GetElementRek( const UINT16 nId )
                             pScToken->AddMatrix( p );
                     }
                     break;
+                case T_ExtName:
+                {
+                    UINT16 n = pElement[*pAkt];
+                    if (n < maExtNames.size())
+                    {
+                        const ExtName& r = maExtNames[n];
+                        pScToken->AddExternalName(r.mnFileId, r.maName);
+                    }
+                }
+                case T_ExtRefC:
+                {
+                    UINT16 n = pElement[*pAkt];
+                    if (n < maExtCellRefs.size())
+                    {
+                        const ExtCellRef& r = maExtCellRefs[n];
+                        pScToken->AddExternalSingleReference(r.mnFileId, r.maTabName, r.maRef);
+                    }
+                }
+                case T_ExtRefA:
+                {
+                    UINT16 n = pElement[*pAkt];
+                    if (n < maExtAreaRefs.size())
+                    {
+                        const ExtAreaRef& r = maExtAreaRefs[n];
+                        pScToken->AddExternalDoubleReference(r.mnFileId, r.maTabName, r.maRef);
+                    }
+                }
+                break;
 				default:
 					DBG_ERROR("-TokenPool::GetElementRek(): Zustand undefiniert!?");
 			}
@@ -724,9 +780,68 @@ const TokenId TokenPool::StoreMatrix( SCSIZE nC, SCSIZE nR )
     return ( const TokenId ) nElementAkt;
 }
 
+const TokenId TokenPool::StoreExtName( sal_uInt16 nFileId, const String& rName )
+{
+    if ( nElementAkt >= nElement )
+        GrowElement();
+
+    pElement[nElementAkt] = static_cast<UINT16>(maExtNames.size());
+    pType[nElementAkt] = T_ExtName;
+    
+    maExtNames.push_back(ExtName());
+    ExtName& r = maExtNames.back();
+    r.mnFileId = nFileId;
+    r.maName = rName;
+
+    ++nElementAkt;
+
+    return static_cast<const TokenId>(nElementAkt);
+}
+
+const TokenId TokenPool::StoreExtRef( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef )
+{
+    if ( nElementAkt >= nElement )
+        GrowElement();
+
+    pElement[nElementAkt] = static_cast<UINT16>(maExtCellRefs.size());
+    pType[nElementAkt] = T_ExtRefC;
+    
+    maExtCellRefs.push_back(ExtCellRef());
+    ExtCellRef& r = maExtCellRefs.back();
+    r.mnFileId = nFileId;
+    r.maTabName = rTabName;
+    r.maRef = rRef;
+
+    ++nElementAkt;
+
+    return static_cast<const TokenId>(nElementAkt);
+}
+
+const TokenId TokenPool::StoreExtRef( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef )
+{
+    if ( nElementAkt >= nElement )
+        GrowElement();
+
+    pElement[nElementAkt] = static_cast<UINT16>(maExtAreaRefs.size());
+    pType[nElementAkt] = T_ExtRefA;
+    
+    maExtAreaRefs.push_back(ExtAreaRef());
+    ExtAreaRef& r = maExtAreaRefs.back();
+    r.mnFileId = nFileId;
+    r.maTabName = rTabName;
+    r.maRef = rRef;
+
+    ++nElementAkt;
+
+    return static_cast<const TokenId>(nElementAkt);
+}
+
 void TokenPool::Reset( void )
 {
     nP_IdAkt = nP_IdLast = nElementAkt = nP_StrAkt = nP_DblAkt = nP_ErrAkt = nP_RefTrAkt = nP_ExtAkt = nP_NlfAkt = nP_MatrixAkt = 0;
+    maExtNames.clear();
+    maExtCellRefs.clear();
+    maExtAreaRefs.clear();
 }
 
 
diff --git sc/source/filter/excel/xeformula.cxx sc/source/filter/excel/xeformula.cxx
index 3db8da7..65a5775 100644
--- sc/source/filter/excel/xeformula.cxx
+++ sc/source/filter/excel/xeformula.cxx
@@ -42,6 +42,12 @@
 #include "xelink.hxx"
 #include "xename.hxx"
 
+#include "document.hxx"
+#include "externalrefmgr.hxx"
+
+#include <memory>
+#include <stdio.h>
+
 // External reference log =====================================================
 
 XclExpRefLogEntry::XclExpRefLogEntry() :
@@ -225,6 +231,32 @@ void XclExpFuncData::IncExpParamClassIdx()
         ++mnClassIdx;
 }
 
+// reference handling ---------------------------------------------------------
+
+namespace {
+
+inline bool lclIsRefRel2D( const SingleRefData& rRefData )
+{
+    return rRefData.IsColRel() || rRefData.IsRowRel();
+}
+
+inline bool lclIsRefDel2D( const SingleRefData& rRefData )
+{
+    return rRefData.IsColDeleted() || rRefData.IsRowDeleted();
+}
+
+inline bool lclIsRefRel2D( const ComplRefData& rRefData )
+{
+    return lclIsRefRel2D( rRefData.Ref1 ) || lclIsRefRel2D( rRefData.Ref2 );
+}
+
+inline bool lclIsRefDel2D( const ComplRefData& rRefData )
+{
+    return lclIsRefDel2D( rRefData.Ref1 ) || lclIsRefDel2D( rRefData.Ref2 );
+}
+
+} // namespace
+
 // ----------------------------------------------------------------------------
 
 /** Implementation class of the export formula compiler. */
@@ -299,6 +331,7 @@ private:
     void                ProcessBoolean( const XclExpTokenData& rTokData );
     void                ProcessDdeLink( const XclExpTokenData& rTokData, sal_uInt8 nExpClass );
     void                ProcessExternal( const XclExpTokenData& rTokData, sal_uInt8 nExpClass );
+    void                ProcessExternalName( const XclExpTokenData& rTokData, sal_uInt8 nExpClass );
 
     void                ProcessFunction( const XclExpTokenData& rTokData, sal_uInt8 nExpClass );
     void                PrepareFunction( XclExpFuncData& rFuncData );
@@ -1114,6 +1147,12 @@ XclExpTokenData XclExpFmlaCompImpl::Factor( XclExpTokenData aTokData, sal_uInt8
     StackVar eTokType = aTokData.GetType();
     OpCode eOpCode = aTokData.GetOpCode();
 
+    if (eOpCode == ocExternalName)
+    {
+        ProcessExternalName( aTokData, nExpClass );
+        return GetNextToken();
+    }
+
     switch( eTokType )
     {
         case svUnknown:     mbOk = false;                           break;
@@ -1248,6 +1287,107 @@ void XclExpFmlaCompImpl::ProcessExternal( const XclExpTokenData& rTokData, sal_u
         ProcessFunction( rTokData, nExpClass );
 }
 
+void XclExpFmlaCompImpl::ProcessExternalName( const XclExpTokenData& rTokData, sal_uInt8 nExpClass )
+{
+    StackVar eType = rTokData.GetType();
+
+    ScExternalRefManager* pRefMgr = GetDoc().GetExternalRefManager();
+    USHORT nFileId = rTokData.mpScToken->GetIndex();
+    switch (eType)
+    {
+        case svSingleRef:
+        {
+            fprintf(stdout, "XclExpFmlaCompImpl::ProcessExternalName:   svSingleRef not supported yet\n");
+            if (!mpScBasePos)
+            {
+                AppendErrorToken(EXC_ERR_REF, rTokData.mnSpaces);
+                break;
+            }
+            SingleRefData aRef(rTokData.mpScToken->GetSingleRef());
+            aRef.CalcAbsIfRel(*mpScBasePos);
+            ScToken* p = pRefMgr->getSingleRefToken(nFileId, ScAddress(aRef.nCol, aRef.nRow, aRef.nTab), NULL);
+            if (!p)
+            {
+                AppendErrorToken(EXC_ERR_REF, rTokData.mnSpaces);
+                break;
+            }
+
+            mpLinkMgr->StoreCell(nFileId, rTokData.mpScToken->GetString(), aRef);
+
+            XclAddress aXclPos(ScAddress::UNINITIALIZED);
+            ConvertRefData(aRef, aXclPos, false, false, false);
+
+            const String* pFile = pRefMgr->getExternalFileName(nFileId);
+            sal_uInt16 nExtSheet, nFirstSBTab, nLastSBTab;
+            mpLinkMgr->FindExtSheet(nFileId, nExtSheet, nFirstSBTab, nLastSBTab, 
+                                    aRef.nTab, aRef.nTab, GetNewRefLogEntry());
+            sal_uInt8 nBaseId = lclIsRefDel2D(aRef) ? EXC_TOKID_REFERR3D : EXC_TOKID_REF3D;
+            AppendOpTokenId(GetTokenId(nBaseId, EXC_TOKCLASS_REF), nExpClass, rTokData.mnSpaces);
+            Append(nExtSheet);
+            if (meBiff <= EXC_BIFF5)
+            {
+                Append(0, 8);
+                Append(static_cast<sal_uInt16>(nFirstSBTab));
+                Append(static_cast<sal_uInt16>(nFirstSBTab));
+            }
+            AppendAddress(aXclPos);
+        }
+        break;
+        case svDoubleRef:
+        {
+            fprintf(stdout, "XclExpFmlaCompImpl::ProcessExternalName:   svDoubleRef not supported yet\n");
+            if (!mpScBasePos)
+            {
+                AppendErrorToken(XclTools::GetXclErrorCode(errNoRef), rTokData.mnSpaces);
+                break;
+            }
+            AppendBoolToken(true, rTokData.mnSpaces);
+        }
+        break;
+        case svExternalName:
+        {
+            fprintf(stdout, "XclExpFmlaCompImpl::ProcessExternalName:   svExternalName\n");
+
+            const String& aName = rTokData.mpScToken->GetString();
+            ScTokenArray* pArray = pRefMgr->getRangeNameTokens(nFileId, aName);
+            if (!pArray || !mpScBasePos)
+            {    
+                AppendErrorToken(XclTools::GetXclErrorCode(errNoName), rTokData.mnSpaces);
+                break;
+            }
+
+            // Go through all these tokens to store the external cell/range 
+            // references for CRN records.
+            for (ScToken* p = pArray->First(); p; p = pArray->Next())
+            {
+                if (p->GetOpCode() == ocExternalName)
+                {
+                    if (p->GetType() == svSingleRef)
+                    {
+                        SingleRefData aData(p->GetSingleRef());
+                        aData.CalcAbsIfRel(*mpScBasePos);
+                        mpLinkMgr->StoreCell(nFileId, p->GetString(), aData);
+                    }
+                    else if (p->GetType() == svDoubleRef)
+                    {
+                        ComplRefData aData(p->GetDoubleRef());
+                        aData.CalcAbsIfRel(*mpScBasePos);
+                        mpLinkMgr->StoreCellRange(nFileId, p->GetString(), aData);
+                    }
+                }
+            }
+
+            const String* pFile = pRefMgr->getExternalFileName(nFileId);
+            sal_uInt16 nExtSheet, nExtName;
+            if (mpLinkMgr->InsertExtName(nExtSheet, nExtName, *pFile, aName, pArray))
+                AppendNameXToken(nExtSheet, nExtName, nExpClass, rTokData.mnSpaces);
+            else
+                AppendErrorToken(EXC_ERR_REF, rTokData.mnSpaces);
+        }
+        break;
+    }
+}
+
 void XclExpFmlaCompImpl::ProcessFunction( const XclExpTokenData& rTokData, sal_uInt8 nExpClass )
 {
     OpCode eOpCode = rTokData.GetOpCode();
@@ -1623,32 +1763,6 @@ void XclExpFmlaCompImpl::AppendTrailingParam( XclExpFuncData& rFuncData )
     }
 }
 
-// reference handling ---------------------------------------------------------
-
-namespace {
-
-inline bool lclIsRefRel2D( const SingleRefData& rRefData )
-{
-    return rRefData.IsColRel() || rRefData.IsRowRel();
-}
-
-inline bool lclIsRefDel2D( const SingleRefData& rRefData )
-{
-    return rRefData.IsColDeleted() || rRefData.IsRowDeleted();
-}
-
-inline bool lclIsRefRel2D( const ComplRefData& rRefData )
-{
-    return lclIsRefRel2D( rRefData.Ref1 ) || lclIsRefRel2D( rRefData.Ref2 );
-}
-
-inline bool lclIsRefDel2D( const ComplRefData& rRefData )
-{
-    return lclIsRefDel2D( rRefData.Ref1 ) || lclIsRefDel2D( rRefData.Ref2 );
-}
-
-} // namespace
-
 // ----------------------------------------------------------------------------
 
 SCTAB XclExpFmlaCompImpl::GetScTab( const SingleRefData& rRefData ) const
diff --git sc/source/filter/excel/xelink.cxx sc/source/filter/excel/xelink.cxx
index b1bacad..ebd2999 100644
--- sc/source/filter/excel/xelink.cxx
+++ sc/source/filter/excel/xelink.cxx
@@ -38,6 +38,15 @@
 #include "document.hxx"
 #include "cell.hxx"
 #include "scextopt.hxx"
+#include "externalrefmgr.hxx"
+
+#include <vector>
+#include <memory>
+#include <stdio.h>
+
+using ::std::auto_ptr;
+using ::std::find_if;
+using ::std::vector;
 
 // ============================================================================
 // *** Helper classes ***
@@ -102,6 +111,22 @@ private:
     XclExpCachedMatRef  mxMatrix;       /// Cached results of the DDE link.
 };
 
+// ----------------------------------------------------------------------------
+
+class XclExpExtName : public XclExpExtNameBase
+{
+public:
+    explicit            XclExpExtName( const XclExpRoot& rRoot, const String& rName,
+                                       const ScTokenArray* pArray );
+
+private:
+    /** Writes additional record contents. */
+    virtual void        WriteAddData( XclExpStream& rStrm );
+
+private:
+    auto_ptr<ScTokenArray>  mpArray;
+};
+
 // List of external names =====================================================
 
 /** List of all external names of a sheet. */
@@ -117,6 +142,8 @@ public:
         @return  The 1-based (Excel-like) list index of the DDE link. */
     sal_uInt16          InsertDde( const String& rApplic, const String& rTopic, const String& rItem );
 
+    sal_uInt16          InsertExtName( const String& rName, const ScTokenArray* pArray );
+
     /** Writes the EXTERNNAME record list. */
     virtual void        Save( XclExpStream& rStrm );
 
@@ -220,6 +247,9 @@ public:
     /** Stores all cells in the given range in the CRN list. */
     void                StoreCellRange( const XclExpRoot& rRoot, const ScRange& rRange );
 
+    void                StoreCell( const XclExpRoot& rRoot, const ScAddress& rCell, const ScToken& rToken );
+    void                StoreCellRange( const XclExpRoot& rRoot, const ScRange& rRange, const ScToken& rToken );
+
     /** Writes the XCT and all CRN records. */
     virtual void        Save( XclExpStream& rStrm );
 
@@ -319,6 +349,11 @@ public:
     /** Stores all cells in the given range in the CRN list of the specified SUPBOOK sheet. */
     void                StoreCellRange( const ScRange& rRange, sal_uInt16 nSBTab );
 
+    void                StoreCell( sal_uInt16 nSBTab, const ScAddress& rCell, const ScToken& rToken );
+    void                StoreCellRange( sal_uInt16 nSBTab, const ScRange& rRange, const ScToken& rToken );
+
+    sal_uInt16          GetTabIndex( const String& rTabName );
+
     /** Inserts a new sheet name into the SUPBOOK and returns the SUPBOOK internal sheet index. */
     sal_uInt16          InsertTabName( const String& rTabName );
     /** Finds or inserts an EXTERNNAME record for add-ins.
@@ -328,6 +363,8 @@ public:
         @return  The 1-based EXTERNNAME record index; or 0, if the record list is full. */
     sal_uInt16          InsertDde( const String& rItem );
 
+    sal_uInt16          InsertExtName( const String& rName, const ScTokenArray* pArray );
+
     /** Writes the SUPBOOK and all EXTERNNAME, XCT and CRN records. */
     virtual void        Save( XclExpStream& rStrm );
 
@@ -394,6 +431,9 @@ public:
     /** Stores all cells in the given range in a CRN record list. */
     void                StoreCellRange( const ScRange& rRange );
 
+    void                StoreCell( sal_uInt16 nFileId, const String& rTabName, const ScAddress& rCell );
+    void                StoreCellRange( sal_uInt16 nFileId, const String& rTabName, const ScRange& rRange );
+
     /** Finds or inserts an EXTERNNAME record for an add-in function name.
         @param rnSupbook  Returns the index of the SUPBOOK record which contains the add-in function name.
         @param rnExtName  Returns the 1-based EXTERNNAME record index. */
@@ -407,9 +447,25 @@ public:
                             sal_uInt16& rnSupbook, sal_uInt16& rnExtName,
                             const String& rApplic, const String& rTopic, const String& rItem );
 
+    bool                InsertExtName(
+                            sal_uInt16& rnSupbook, sal_uInt16& rnExtName, const String& rUrl,
+                            const String& rName, const ScTokenArray* pArray );
+
+    XclExpXti           GetXti( sal_uInt16 nFileId, sal_uInt16 nFirstXclTab, sal_uInt16 nLastXclTab,
+                                XclExpRefLogEntry* pRefLogEntry = NULL );
+
     /** Writes all SUPBOOK records with their sub records. */
     virtual void        Save( XclExpStream& rStrm );
 
+    struct XclExpSBIndex
+    {
+        sal_uInt16          mnSupbook;          /// SUPBOOK index for an Excel sheet.
+        sal_uInt16          mnSBTab;            /// Sheet name index in SUPBOOK for an Excel sheet.
+        inline void         Set( sal_uInt16 nSupbook, sal_uInt16 nSBTab )
+                                { mnSupbook = nSupbook; mnSBTab = nSBTab; }
+    };
+    typedef ::std::vector< XclExpSBIndex > XclExpSBIndexVec;
+
 private:
     typedef XclExpRecordList< XclExpSupbook >   XclExpSupbookList;
     typedef XclExpSupbookList::RecordRefType    XclExpSupbookRef;
@@ -435,15 +491,6 @@ private:
     void                AddExtSupbook( SCTAB nScTab );
 
 private:
-    struct XclExpSBIndex
-    {
-        sal_uInt16          mnSupbook;          /// SUPBOOK index for an Excel sheet.
-        sal_uInt16          mnSBTab;            /// Sheet name in SUPBOOK for an Excel sheet.
-        inline void         Set( sal_uInt16 nSupbook, sal_uInt16 nSBTab )
-                                { mnSupbook = nSupbook; mnSBTab = nSBTab; }
-    };
-    typedef ::std::vector< XclExpSBIndex > XclExpSBIndexVec;
-
     XclExpSupbookList   maSupbookList;      /// List of all SUPBOOK records.
     XclExpSBIndexVec    maSBIndexVec;       /// SUPBOOK and sheet name index for each Excel sheet.
     sal_uInt16          mnOwnDocSB;         /// Index to SUPBOOK for own document.
@@ -464,9 +511,17 @@ public:
     /** Derived classes search for a special EXTERNSHEET index for the own document. */
     virtual sal_uInt16  FindExtSheet( sal_Unicode cCode ) = 0;
 
+    virtual void FindExtSheet( sal_uInt16 nFileId, sal_uInt16& rnExtSheet, 
+                               sal_uInt16& rnFirstSBTab, sal_uInt16& rnLastSBTab, 
+                               sal_uInt16 nFirstXclTab, sal_uInt16 nLastXclTab, 
+                               XclExpRefLogEntry* pRefLogEntry ) = 0;
+
     /** Derived classes store all cells in the given range in a CRN record list. */
     virtual void        StoreCellRange( const SingleRefData& rRef1, const SingleRefData& rRef2 ) = 0;
 
+    virtual void        StoreCell( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef ) = 0;
+    virtual void        StoreCellRange( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef1, const SingleRefData& rRef2 ) = 0;
+
     /** Derived classes find or insert an EXTERNNAME record for an add-in function name. */
     virtual bool        InsertAddIn(
                             sal_uInt16& rnExtSheet, sal_uInt16& rnExtName,
@@ -476,6 +531,10 @@ public:
                             sal_uInt16& rnExtSheet, sal_uInt16& rnExtName,
                             const String& rApplic, const String& rTopic, const String& rItem ) = 0;
 
+    virtual bool        InsertExtName(
+                            sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rUrl,
+                            const String& rName, const ScTokenArray* pArray ) = 0;
+
     /** Derived classes write the entire link table to the passed stream. */
     virtual void        Save( XclExpStream& rStrm ) = 0;
 
@@ -497,15 +556,28 @@ public:
                             XclExpRefLogEntry* pRefLogEntry );
     virtual sal_uInt16  FindExtSheet( sal_Unicode cCode );
 
+    virtual void FindExtSheet( sal_uInt16 nFileId, sal_uInt16& rnExtSheet, 
+                               sal_uInt16& rnFirstSBTab, sal_uInt16& rnLastSBTab, 
+                               sal_uInt16 nFirstXclTab, sal_uInt16 nLastXclTab, 
+                               XclExpRefLogEntry* pRefLogEntry );
+
     virtual void        StoreCellRange( const SingleRefData& rRef1, const SingleRefData& rRef2 );
 
+    virtual void        StoreCell( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef );
+    virtual void        StoreCellRange( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef1, const SingleRefData& rRef2 );
+
     virtual bool        InsertAddIn(
                             sal_uInt16& rnExtSheet, sal_uInt16& rnExtName,
                             const String& rName );
+
     virtual bool        InsertDde(
                             sal_uInt16& rnExtSheet, sal_uInt16& rnExtName,
                             const String& rApplic, const String& rTopic, const String& rItem );
 
+    virtual bool        InsertExtName(
+                            sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rUrl,
+                            const String& rName, const ScTokenArray* pArray );
+
     virtual void        Save( XclExpStream& rStrm );
 
 private:
@@ -550,15 +622,28 @@ public:
                             XclExpRefLogEntry* pRefLogEntry );
     virtual sal_uInt16  FindExtSheet( sal_Unicode cCode );
 
+    virtual void FindExtSheet( sal_uInt16 nFileId, sal_uInt16& rnExtSheet, 
+                               sal_uInt16& rnFirstSBTab, sal_uInt16& rnLastSBTab, 
+                               sal_uInt16 nFirstXclTab, sal_uInt16 nLastXclTab, 
+                               XclExpRefLogEntry* pRefLogEntry );
+
     virtual void        StoreCellRange( const SingleRefData& rRef1, const SingleRefData& rRef2 );
 
+    virtual void        StoreCell( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef );
+    virtual void        StoreCellRange( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef1, const SingleRefData& rRef2 );
+
     virtual bool        InsertAddIn(
                             sal_uInt16& rnExtSheet, sal_uInt16& rnExtName,
                             const String& rName );
+
     virtual bool        InsertDde(
                             sal_uInt16& rnExtSheet, sal_uInt16& rnExtName,
                             const String& rApplic, const String& rTopic, const String& rItem );
 
+    virtual bool        InsertExtName(
+                            sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rUrl,
+                            const String& rName, const ScTokenArray* pArray );
+
     virtual void        Save( XclExpStream& rStrm );
 
 private:
@@ -885,6 +970,94 @@ void XclExpExtNameDde::WriteAddData( XclExpStream& rStrm )
         mxMatrix->Save( rStrm );
 }
 
+// ----------------------------------------------------------------------------
+
+XclExpExtName::XclExpExtName( const XclExpRoot& rRoot, const String& rName, const ScTokenArray* pArray ) :
+    XclExpExtNameBase( rRoot, rName ),
+    mpArray(pArray->Clone())
+{
+}
+
+void XclExpExtName::WriteAddData( XclExpStream& rStrm )
+{
+    // Write only if it only has a single token that is either a cell or cell 
+    // range address.  Excel just writes '02 00 1C 17' for all the other types
+    // of external names.
+
+    do
+    {
+        if (mpArray->GetLen() != 1)
+            break;
+
+        const ScToken* p = mpArray->First();
+        if (p->GetOpCode() != ocExternalName)
+            break;
+
+        switch (p->GetType())
+        {
+            case svSingleRef:
+            {
+                const SingleRefData& rRef = p->GetSingleRef();
+                if (rRef.IsTabRel())
+                    break;
+
+                sal_uInt16 nTab = rRef.nTab;
+                bool bColRel = rRef.IsColRel();
+                bool bRowRel = rRef.IsRowRel();
+                sal_uInt16 nCol = bColRel ? rRef.nRelCol : rRef.nCol;
+                sal_uInt16 nRow = bRowRel ? rRef.nRelRow : rRef.nRow;
+                if (bColRel) nCol |= 0x4000;
+                if (bRowRel) nCol |= 0x8000;
+
+                // size is always 9
+                rStrm << static_cast<sal_uInt16>(9);
+                // operator token (3A for cell reference)
+                rStrm << static_cast<sal_uInt8>(0x3A);
+                // cell address (Excel's address has 2 sheet IDs.)
+                rStrm << nTab << nTab << nRow << nCol;
+                return;
+            }
+            case svDoubleRef:
+            {
+                const ComplRefData& rRef = p->GetDoubleRef();
+                const SingleRefData& r1 = rRef.Ref1;
+                const SingleRefData& r2 = rRef.Ref2;
+                if (r1.IsTabRel() || r2.IsTabRel())
+                    break;
+
+                sal_uInt16 nTab1 = r1.nTab;
+                sal_uInt16 nTab2 = r2.nTab;
+                bool bCol1Rel = r1.IsColRel();
+                bool bRow1Rel = r1.IsRowRel();
+                bool bCol2Rel = r2.IsColRel();
+                bool bRow2Rel = r2.IsRowRel();
+
+                sal_uInt16 nCol1 = bCol1Rel ? r1.nRelCol : r1.nCol;
+                sal_uInt16 nCol2 = bCol2Rel ? r2.nRelCol : r2.nCol;
+                sal_uInt16 nRow1 = bRow1Rel ? r1.nRelRow : r1.nRow;
+                sal_uInt16 nRow2 = bRow2Rel ? r2.nRelRow : r2.nRow;
+                if (bCol1Rel) nCol1 |= 0x4000;
+                if (bRow1Rel) nCol1 |= 0x8000;
+                if (bCol2Rel) nCol2 |= 0x4000;
+                if (bRow2Rel) nCol2 |= 0x8000;
+
+                // size is always 13 (0x0D)
+                rStrm << static_cast<sal_uInt16>(13);
+                // operator token (3B for area reference)
+                rStrm << static_cast<sal_uInt8>(0x3B);
+                // range (area) address
+                rStrm << nTab1 << nTab2 << nRow1 << nRow2 << nCol1 << nCol2;
+                return;
+            }
+        }
+    }
+    while (false);
+
+    // special value for #REF! (02 00 1C 17)
+    rStrm << static_cast<sal_uInt16>(0x0002);
+    rStrm << static_cast<sal_uInt16>(0x171C);
+}
+
 // List of external names =====================================================
 
 XclExpExtNameBuffer::XclExpExtNameBuffer( const XclExpRoot& rRoot ) :
@@ -920,6 +1093,12 @@ sal_uInt16 XclExpExtNameBuffer::InsertDde(
     return nIndex;
 }
 
+sal_uInt16 XclExpExtNameBuffer::InsertExtName( const String& rName, const ScTokenArray* pArray )
+{
+    sal_uInt16 nIndex = GetIndex( rName );
+    return nIndex ? nIndex : AppendNew( new XclExpExtName( GetRoot(), rName, pArray ) );
+}
+
 void XclExpExtNameBuffer::Save( XclExpStream& rStrm )
 {
     maNameList.Save( rStrm );
@@ -1066,6 +1245,78 @@ void XclExpXct::StoreCellRange( const XclExpRoot& rRoot, const ScRange& rRange )
     maUsedCells.SetMultiMarkArea( rRange );
 }
 
+void XclExpXct::StoreCell( const XclExpRoot& /*rRoot*/, const ScAddress& rCell, const ScToken& rToken )
+{
+    switch (rToken.GetType())
+    {
+        case svString:
+        {
+            XclExpCrnRef xCrn(
+                new XclExpCrnString(rCell.Col(), rCell.Row(), rToken.GetString()));
+            maCrnList.AppendRecord(xCrn);
+        }
+        break;
+        case svDouble:
+        {
+            XclExpCrnRef xCrn(
+                new XclExpCrnDouble(rCell.Col(), rCell.Row(), rToken.GetDouble()));
+            maCrnList.AppendRecord(xCrn);
+        }
+        break;
+        case svEmptyCell:
+        {
+            XclExpCrnRef xCrn(
+                new XclExpCrnDouble(rCell.Col(), rCell.Row(), 0.0));
+            maCrnList.AppendRecord(xCrn);
+        }
+        break;
+    }
+}
+
+void XclExpXct::StoreCellRange( const XclExpRoot& /*rRoot*/, const ScRange& rRange, const ScToken& rToken )
+{
+    if (rToken.GetType() != svMatrix)
+        return;
+
+    if (rRange.aStart.Tab() != rRange.aEnd.Tab())
+        // multi-table range is not supported here.
+        return;
+
+    const ScMatrix* pMtx = rToken.GetMatrix();
+    if (!pMtx)
+        return;
+
+    SCSIZE nCols, nRows;
+    pMtx->GetDimensions(nCols, nRows);
+    const ScAddress& s = rRange.aStart;
+    const ScAddress& e = rRange.aEnd;
+    if (static_cast<SCCOL>(nCols) != e.Col() - s.Col() + 1 || 
+        static_cast<SCROW>(nRows) != e.Row() - s.Row() + 1)
+    {
+        // size mis-match!
+        return;
+    }
+
+    for (SCSIZE nCol = 0; nCol < nCols; ++nCol)
+    {
+        for (SCSIZE nRow = 0; nRow < nRows; ++nRow)
+        {
+            if (pMtx->IsString(nCol, nRow))
+            {
+                XclExpCrnRef xCrn(new XclExpCrnString(
+                    s.Col() + nCol, s.Row() + nRow, pMtx->GetString(nCol, nRow)));
+                maCrnList.AppendRecord(xCrn);
+            }
+            else if (pMtx->IsValueOrEmpty(nCol, nRow))
+            {
+                XclExpCrnRef xCrn(new XclExpCrnDouble(
+                    s.Col() + nCol, s.Row() + nRow, pMtx->GetDouble(nCol, nRow)));
+                maCrnList.AppendRecord(xCrn);
+            }
+        }
+    }
+}
+
 void XclExpXct::Save( XclExpStream& rStrm )
 {
     XclExpRecord::Save( rStrm );
@@ -1206,6 +1457,41 @@ void XclExpSupbook::StoreCellRange( const ScRange& rRange, sal_uInt16 nSBTab )
         xXct->StoreCellRange( GetRoot(), rRange );
 }
 
+void XclExpSupbook::StoreCell( sal_uInt16 nSBTab, const ScAddress& rCell, const ScToken& rToken )
+{
+    XclExpXctRef xXct = maXctList.GetRecord(nSBTab);
+    if (!xXct.is())
+        return;
+
+    xXct->StoreCell(GetRoot(), rCell, rToken);
+}
+
+void XclExpSupbook::StoreCellRange( sal_uInt16 nSBTab, const ScRange& rRange, const ScToken& rToken )
+{
+    if (rRange.aStart.Tab() != rRange.aEnd.Tab())
+        // multi-table range is not allowed!
+        return;
+
+    XclExpXctRef xXct = maXctList.GetRecord(nSBTab);
+    if (!xXct.is())
+        return;
+
+    xXct->StoreCellRange(GetRoot(), rRange, rToken);
+}
+
+sal_uInt16 XclExpSupbook::GetTabIndex( const String& rTabName )
+{
+    XclExpString aXclName(rTabName);
+    size_t nSize = maXctList.GetSize();
+    for (size_t i = 0; i < nSize; ++i)
+    {
+        XclExpXctRef aRec = maXctList.GetRecord(i);
+        if (aXclName == aRec->GetTabName())
+            return ulimit_cast<sal_uInt16>(i);
+    }
+    return InsertTabName(rTabName);
+}
+
 sal_uInt16 XclExpSupbook::InsertTabName( const String& rTabName )
 {
     DBG_ASSERT( meType == EXC_SBTYPE_EXTERN, "XclExpSupbook::InsertTabName - don't insert sheet names here" );
@@ -1226,6 +1512,11 @@ sal_uInt16 XclExpSupbook::InsertDde( const String& rItem )
     return GetExtNameBuffer().InsertDde( maUrl, maDdeTopic, rItem );
 }
 
+sal_uInt16 XclExpSupbook::InsertExtName( const String& rName, const ScTokenArray* pArray )
+{
+    return GetExtNameBuffer().InsertExtName(rName, pArray);
+}
+
 void XclExpSupbook::Save( XclExpStream& rStrm )
 {
     // SUPBOOK record
@@ -1352,6 +1643,135 @@ void XclExpSupbookBuffer::StoreCellRange( const ScRange& rRange )
     }
 }
 
+namespace {
+
+class FindSBIndexEntry
+{
+public:
+    explicit FindSBIndexEntry(sal_uInt16 nSupbookId, sal_uInt16 nTabId) :
+        mnSupbookId(nSupbookId), mnTabId(nTabId) {}
+
+    bool operator()(const XclExpSupbookBuffer::XclExpSBIndex& r) const
+    {
+        return mnSupbookId == r.mnSupbook && mnTabId == r.mnSBTab;
+    }
+
+private:
+    sal_uInt16 mnSupbookId;
+    sal_uInt16 mnTabId;
+};
+
+}
+
+void XclExpSupbookBuffer::StoreCell( sal_uInt16 nFileId, const String& rTabName, const ScAddress& rCell )
+{
+    ScExternalRefManager* pRefMgr = GetDoc().GetExternalRefManager();
+    const String* pUrl = pRefMgr->getExternalFileName(nFileId);
+    if (!pUrl)
+        return;
+
+    XclExpSupbookRef xSupbook;
+    sal_uInt16 nSupbookId;
+    if (!GetSupbookUrl(xSupbook, nSupbookId, *pUrl))
+    {
+        xSupbook.reset(new XclExpSupbook(GetRoot(), *pUrl));
+        nSupbookId = Append(xSupbook);
+    }
+
+    ScToken* pToken = pRefMgr->getSingleRefToken(nFileId, rTabName, rCell, NULL, NULL);
+    if (!pToken)
+        return;
+
+//  const String* pTabName = pRefMgr->getExternalTableName(nFileId, rCell.Tab());
+//  if (!pTabName)
+//      return;
+
+    sal_uInt16 nSheetId = xSupbook->GetTabIndex(rTabName);
+    FindSBIndexEntry f(nSupbookId, nSheetId);
+    fprintf(stdout, "XclExpSupbookBuffer::StoreCell: supbook id = %d; sheet id = %d\n", nSupbookId, nSheetId);
+    XclExpSBIndexVec::iterator itrEnd = maSBIndexVec.end();
+    XclExpSBIndexVec::const_iterator itr = find_if(maSBIndexVec.begin(), itrEnd, f);
+    if (itr == itrEnd)
+    {
+        maSBIndexVec.push_back(XclExpSBIndex());
+        XclExpSBIndex& r = maSBIndexVec.back();
+        r.mnSupbook = nSupbookId;
+        r.mnSBTab   = nSheetId;
+    }
+
+    xSupbook->StoreCell(nSheetId, rCell, *pToken);
+}
+
+void XclExpSupbookBuffer::StoreCellRange( sal_uInt16 nFileId, const String& rTabName, const ScRange& rRange )
+{
+    ScExternalRefManager* pRefMgr = GetDoc().GetExternalRefManager();
+    const String* pUrl = pRefMgr->getExternalFileName(nFileId);
+    if (!pUrl)
+        return;
+
+    XclExpSupbookRef xSupbook;
+    sal_uInt16 nSupbookId;
+    if (!GetSupbookUrl(xSupbook, nSupbookId, *pUrl))
+    {
+        xSupbook.reset(new XclExpSupbook(GetRoot(), *pUrl));
+        nSupbookId = Append(xSupbook);
+    }
+
+    SCTAB nTab1 = rRange.aStart.Tab(), nTab2 = rRange.aEnd.Tab();
+    SCTAB nTabCount = rRange.aEnd.Tab() - rRange.aStart.Tab() + 1;
+
+    // If this is a multi-table range, get token for each table.
+    vector<ScToken*> aMatrixList;
+    aMatrixList.reserve(nTabCount);
+    ScTokenArray* pArray = pRefMgr->getDoubleRefTokens(nFileId, rTabName, rRange, NULL);
+    if (!pArray)
+        return;
+
+    auto_ptr<ScTokenArray> pNew(pArray->Clone());
+    for (ScToken* p = pNew->First(); p; p = pNew->Next())
+    {
+        if (p->GetType() == svMatrix)
+            aMatrixList.push_back(p);
+        else if (p->GetOpCode() != ocSep)
+        {
+            fprintf(stdout, "XclExpSupbookBuffer::StoreCellRange:   this is supposed to be ocSep!!!\n");
+            return;
+        }
+    }
+
+    if (aMatrixList.size() != nTabCount)
+    {
+        // matrix size mis-match !
+        return;
+    }
+
+    sal_uInt16 nFirstSheetId = xSupbook->GetTabIndex(rTabName);
+
+    ScRange aRange(rRange);
+    aRange.aStart.SetTab(0);
+    aRange.aEnd.SetTab(0);
+    for (SCTAB nTab = 0; nTab < nTabCount; ++nTab)
+    {
+        const String* pTabName = pRefMgr->getExternalTableName(nFileId, nTab);
+        if (!pTabName)
+            continue;
+
+        sal_uInt16 nSheetId = nFirstSheetId + static_cast<sal_uInt16>(nTab);
+        FindSBIndexEntry f(nSupbookId, nSheetId);
+        XclExpSBIndexVec::iterator itrEnd = maSBIndexVec.end();
+        XclExpSBIndexVec::const_iterator itr = find_if(maSBIndexVec.begin(), itrEnd, f);
+        if (itr == itrEnd)
+        {
+            maSBIndexVec.push_back(XclExpSBIndex());
+            XclExpSBIndex& r = maSBIndexVec.back();
+            r.mnSupbook = nSupbookId;
+            r.mnSBTab   = nSheetId;
+        }
+
+        xSupbook->StoreCellRange(nSheetId, aRange, *aMatrixList[nTab-nTab1]);
+    }
+}
+
 bool XclExpSupbookBuffer::InsertAddIn(
         sal_uInt16& rnSupbook, sal_uInt16& rnExtName, const String& rName )
 {
@@ -1383,6 +1803,72 @@ bool XclExpSupbookBuffer::InsertDde(
     return rnExtName > 0;
 }
 
+bool XclExpSupbookBuffer::InsertExtName(
+        sal_uInt16& rnSupbook, sal_uInt16& rnExtName, const String& rUrl,
+        const String& rName, const ScTokenArray* pArray )
+{
+    XclExpSupbookRef xSupbook;
+    if (!GetSupbookUrl(xSupbook, rnSupbook, rUrl))
+    {
+        xSupbook.reset( new XclExpSupbook(GetRoot(), rUrl) );
+        rnSupbook = Append(xSupbook);
+    }
+    rnExtName = xSupbook->InsertExtName(rName, pArray);
+    return rnExtName > 0;
+}
+
+XclExpXti XclExpSupbookBuffer::GetXti( sal_uInt16 nFileId, sal_uInt16 nFirstXclTab, sal_uInt16 nLastXclTab,
+                                       XclExpRefLogEntry* pRefLogEntry )
+{
+    XclExpXti aXti(0, EXC_NOTAB, EXC_NOTAB);
+    ScExternalRefManager* pRefMgr = GetDoc().GetExternalRefManager();
+    const String* pUrl = pRefMgr->getExternalFileName(nFileId);
+    if (!pUrl)
+        return aXti;
+
+    XclExpSupbookRef xSupbook;
+    sal_uInt16 nSupbookId;
+    if (!GetSupbookUrl(xSupbook, nSupbookId, *pUrl))
+    {
+        xSupbook.reset(new XclExpSupbook(GetRoot(), *pUrl));
+        nSupbookId = Append(xSupbook);
+    }
+    aXti.mnSupbook = nSupbookId;
+
+    for (sal_uInt16 nTab = nFirstXclTab; nTab <= nLastXclTab; ++nTab)
+    {
+        const String* pTabName = pRefMgr->getExternalTableName(nFileId, nTab);
+        if (!pTabName)
+            continue;
+
+        sal_uInt16 nSheetId = xSupbook->GetTabIndex(*pTabName);
+        FindSBIndexEntry f(nSupbookId, nSheetId);
+        XclExpSBIndexVec::iterator itrEnd = maSBIndexVec.end();
+        XclExpSBIndexVec::const_iterator itr = find_if(maSBIndexVec.begin(), itrEnd, f);
+        if (itr == itrEnd)
+        {
+            maSBIndexVec.push_back(XclExpSBIndex());
+            XclExpSBIndex& r = maSBIndexVec.back();
+            r.mnSupbook = nSupbookId;
+            r.mnSBTab   = nSheetId;
+        }
+        if (nTab == nFirstXclTab)
+            aXti.mnFirstSBTab = nSheetId;
+        if (nTab == nLastXclTab)
+            aXti.mnLastSBTab = nSheetId;
+    }
+
+    if (pRefLogEntry)
+    {
+        pRefLogEntry->mnFirstXclTab = nFirstXclTab;
+        pRefLogEntry->mnLastXclTab  = nLastXclTab;
+        if (xSupbook.is())
+            xSupbook->FillRefLogEntry(*pRefLogEntry, aXti.mnFirstSBTab, aXti.mnLastSBTab);
+    }
+
+    return aXti;
+}
+
 void XclExpSupbookBuffer::Save( XclExpStream& rStrm )
 {
     maSupbookList.Save( rStrm );
@@ -1485,11 +1971,28 @@ sal_uInt16 XclExpLinkManagerImpl5::FindExtSheet( sal_Unicode cCode )
     return nExtSheet;
 }
 
+void XclExpLinkManagerImpl5::FindExtSheet( 
+    sal_uInt16 /*nFileId*/, sal_uInt16& /*rnExtSheet*/, sal_uInt16& /*rnFirstSBTab*/, sal_uInt16& /*rnLastSBTab*/, 
+    sal_uInt16 /*nFirstXclTab*/, sal_uInt16 /*nLastXclTab*/, XclExpRefLogEntry* /*pRefLogEntry*/ )
+{
+    // not implemented
+}
+
 void XclExpLinkManagerImpl5::StoreCellRange( const SingleRefData& /*rRef1*/, const SingleRefData& /*rRef2*/ )
 {
     // not implemented
 }
 
+void XclExpLinkManagerImpl5::StoreCell( sal_uInt16 /*nFileId*/, const String& /*rTabName*/, const SingleRefData& /*rRef*/ )
+{
+    // not implemented
+}
+
+void XclExpLinkManagerImpl5::StoreCellRange( sal_uInt16 /*nFileId*/, const String& /*rTabName*/, const SingleRefData& /*rRef1*/, const SingleRefData& /*rRef2*/ )
+{
+    // not implemented
+}
+
 bool XclExpLinkManagerImpl5::InsertAddIn(
         sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rName )
 {
@@ -1510,6 +2013,14 @@ bool XclExpLinkManagerImpl5::InsertDde(
     return false;
 }
 
+bool XclExpLinkManagerImpl5::InsertExtName(
+        sal_uInt16& /*rnExtSheet*/, sal_uInt16& /*rnExtName*/, const String& /*rUrl*/,
+        const String& /*rName*/, const ScTokenArray* /*pArray*/ )
+{
+    // not implemented
+    return false;
+}
+
 void XclExpLinkManagerImpl5::Save( XclExpStream& rStrm )
 {
     if( sal_uInt16 nExtSheetCount = GetExtSheetCount() )
@@ -1630,6 +2141,16 @@ sal_uInt16 XclExpLinkManagerImpl8::FindExtSheet( sal_Unicode cCode )
     return InsertXti( maSBBuffer.GetXti( EXC_TAB_EXTERNAL, EXC_TAB_EXTERNAL ) );
 }
 
+void XclExpLinkManagerImpl8::FindExtSheet( 
+    sal_uInt16 nFileId, sal_uInt16& rnExtSheet, sal_uInt16& rnFirstSBTab, sal_uInt16& rnLastSBTab, 
+    sal_uInt16 nFirstXclTab, sal_uInt16 nLastXclTab, XclExpRefLogEntry* pRefLogEntry )
+{
+    XclExpXti aXti = maSBBuffer.GetXti(nFileId, nFirstXclTab, nLastXclTab, pRefLogEntry);
+    rnExtSheet = InsertXti(aXti);
+    rnFirstSBTab = aXti.mnFirstSBTab;
+    rnLastSBTab  = aXti.mnLastSBTab;
+}
+
 void XclExpLinkManagerImpl8::StoreCellRange( const SingleRefData& rRef1, const SingleRefData& rRef2 )
 {
     if( !rRef1.IsDeleted() && !rRef2.IsDeleted() && (rRef1.nTab >= 0) && (rRef2.nTab >= 0) )
@@ -1652,6 +2173,19 @@ void XclExpLinkManagerImpl8::StoreCellRange( const SingleRefData& rRef1, const S
     }
 }
 
+void XclExpLinkManagerImpl8::StoreCell( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef )
+{
+    ScAddress aAddr(rRef.nCol, rRef.nRow, rRef.nTab);
+    maSBBuffer.StoreCell(nFileId, rTabName, aAddr);
+}
+
+void XclExpLinkManagerImpl8::StoreCellRange( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef1, const SingleRefData& rRef2 )
+{
+    ScRange aRange(static_cast<SCCOL>(rRef1.nCol), static_cast<SCROW>(rRef1.nRow), static_cast<SCTAB>(rRef1.nTab),
+                   static_cast<SCCOL>(rRef2.nCol), static_cast<SCROW>(rRef2.nRow), static_cast<SCTAB>(rRef2.nTab));
+    maSBBuffer.StoreCellRange(nFileId, rTabName, aRange);
+}
+
 bool XclExpLinkManagerImpl8::InsertAddIn(
         sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rName )
 {
@@ -1677,6 +2211,18 @@ bool XclExpLinkManagerImpl8::InsertDde(
     return false;
 }
 
+bool XclExpLinkManagerImpl8::InsertExtName(
+    sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rName, const String& rUrl, const ScTokenArray* pArray )
+{
+    sal_uInt16 nSupbook;
+    if( maSBBuffer.InsertExtName( nSupbook, rnExtName, rUrl, rName, pArray ) )
+    {
+        rnExtSheet = InsertXti( XclExpXti( nSupbook, EXC_TAB_EXTERNAL, EXC_TAB_EXTERNAL ) );
+        return true;
+    }
+    return false;
+}
+
 void XclExpLinkManagerImpl8::Save( XclExpStream& rStrm )
 {
     if( !maXtiVec.empty() )
@@ -1745,6 +2291,14 @@ sal_uInt16 XclExpLinkManager::FindExtSheet( sal_Unicode cCode )
     return mxImpl->FindExtSheet( cCode );
 }
 
+void XclExpLinkManager::FindExtSheet( sal_uInt16 nFileId, sal_uInt16& rnExtSheet, 
+                                      sal_uInt16& rnFirstSBTab, sal_uInt16& rnLastSBTab,
+                                      sal_uInt16 nFirstXclTab, sal_uInt16 nLastXclTab, 
+                                      XclExpRefLogEntry* pRefLogEntry )
+{
+    mxImpl->FindExtSheet( nFileId, rnExtSheet, rnFirstSBTab, rnLastSBTab, nFirstXclTab, nLastXclTab, pRefLogEntry );
+}
+
 void XclExpLinkManager::StoreCell( const SingleRefData& rRef )
 {
     mxImpl->StoreCellRange( rRef, rRef );
@@ -1755,6 +2309,16 @@ void XclExpLinkManager::StoreCellRange( const ComplRefData& rRef )
     mxImpl->StoreCellRange( rRef.Ref1, rRef.Ref2 );
 }
 
+void XclExpLinkManager::StoreCell( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef )
+{
+    mxImpl->StoreCell( nFileId, rTabName, rRef );
+}
+
+void XclExpLinkManager::StoreCellRange( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef )
+{
+    mxImpl->StoreCellRange( nFileId, rTabName, rRef.Ref1, rRef.Ref2 );
+}
+
 bool XclExpLinkManager::InsertAddIn(
         sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rName )
 {
@@ -1768,6 +2332,13 @@ bool XclExpLinkManager::InsertDde(
     return mxImpl->InsertDde( rnExtSheet, rnExtName, rApplic, rTopic, rItem );
 }
 
+bool XclExpLinkManager::InsertExtName(
+    sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rName, const String& rUrl,
+    const ScTokenArray* pArray )
+{
+    return mxImpl->InsertExtName( rnExtSheet, rnExtName, rUrl, rName, pArray );
+}
+
 void XclExpLinkManager::Save( XclExpStream& rStrm )
 {
     mxImpl->Save( rStrm );
diff --git sc/source/filter/excel/xilink.cxx sc/source/filter/excel/xilink.cxx
index 01932a5..38b846b 100644
--- sc/source/filter/excel/xilink.cxx
+++ sc/source/filter/excel/xilink.cxx
@@ -39,6 +39,31 @@
 #include "xihelper.hxx"
 #include "xiname.hxx"
 
+
+namespace {
+
+#include <string>
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+    }
+
+    ~StackPrinter()
+    {
+        fprintf(stdout, "%s: --end\n", msMsg.c_str());
+    }
+
+private:
+    ::std::string msMsg;
+};
+
+}
+
 // ============================================================================
 // *** Helper classes ***
 // ============================================================================
@@ -52,8 +77,10 @@ public:
     /** Reads a cached value and stores it with its cell address. */
     explicit            XclImpCrn( XclImpStream& rStrm, const XclAddress& rXclPos );
 
+#if 0
     /** Copies the cached value to sheet nTab in the document. */
     void                SetCell( const XclImpRoot& rRoot, SCTAB nScTab ) const;
+#endif
 
 private:
     XclAddress          maXclPos;       /// Excel position of the cached cell.
@@ -76,11 +103,13 @@ public:
     /** Reads a CRN record (external referenced cell) at the specified address. */
     void                ReadCrn( XclImpStream& rStrm, const XclAddress& rXclPos );
 
+#if 0
     /** Creates a new linked table in the passed document and fills it with the cached cells.
         @descr  Stores the index of the new sheet, will be accessible with GetScTab(). */
     void                CreateAndFillTable(
                             const XclImpRoot& rRoot, const String& rAbsUrl,
                             const String& rFilterName, const String& rFilterOpt );
+#endif
 
 private:
     typedef ScfDelList< XclImpCrn > XclImpCrnList;
@@ -112,11 +141,13 @@ public:
 
     /** Returns the URL of the external document. */
     inline const String& GetXclUrl() const { return maXclUrl; }
-
+#if 0
     /** Returns Calc sheet index from Excel sheet index. */
     SCTAB               GetScTabNum( sal_uInt16 nXclTab ) const;
     /** Returns Calc sheet index from sheet name. */
     SCTAB               GetScTabNum( const String& rTabName ) const;
+#endif
+    sal_uInt16          GetXclTabNum( const String& rTabName ) const;
 
     /** Returns the external name specified by an index from the Excel document (one-based). */
     const XclImpExtName* GetExternName( sal_uInt16 nXclIndex ) const;
@@ -128,10 +159,14 @@ public:
     /** Returns the specified macro name (1-based) or an empty string on error. */
     const String&       GetMacroName( sal_uInt16 nXclNameIdx ) const;
 
+    const String&       GetTabName( sal_uInt16 nXtiTab ) const;
+
+#if 0
     /** Creates all sheets of this external document.
         @param nFirstTab  The external Excel index of the first sheet to be created.
         @param nLastTab  The external Excel index of the last sheet to be created. */
     void                CreateTables( sal_uInt16 nSBTabFirst, sal_uInt16 nSBTabLast );
+#endif
 
 private:
     typedef ScfDelList< XclImpSupbookTab >  XclImpSupbookTabList;
@@ -191,6 +226,13 @@ public:
                             sal_uInt16 nXtiIndex ) const;
     /** Returns the specified external name or 0 on error. */
     const XclImpExtName* GetExternName( sal_uInt16 nXtiIndex, sal_uInt16 nExtName ) const;
+
+    /** Returns the absolute file URL of a supporting workbook specified by
+        the index. */
+    const String*       GetSupbookUrl( sal_uInt16 nXtiIndex ) const;
+
+    const String&       GetSupbookTabName( sal_uInt16 nXti, sal_uInt16 nXtiTab ) const;
+
     /** Tries to decode the URL of the specified XTI entry to OLE or DDE link components.
         @descr  For DDE links: Decodes to application name and topic.
         For OLE object links: Decodes to class name and document URL.
@@ -198,19 +240,23 @@ public:
     bool                GetLinkData( String& rApplic, String& rTopic, sal_uInt16 nXtiIndex ) const;
     /** Returns the specified macro name or an empty string on error. */
     const String&       GetMacroName( sal_uInt16 nExtSheet, sal_uInt16 nExtName ) const;
-
+#if 0
     /** Returns the Calc sheet index of a table in an external document.
         @return  Calc sheet index or EXC_TAB_INVALID on error. */
     SCTAB               GetScTab( const String& rUrl, const String& rTabName ) const;
+#endif
+    sal_uInt16          GetXclTab( const String& rUrl, const String& rTabName ) const;
 
 private:
     /** Returns the specified SUPBOOK (external document). */
     const XclImpSupbook* GetSupbook( sal_uInt32 nXtiIndex ) const;
     /** Returns the SUPBOOK (external workbook) specified by its URL. */
     const XclImpSupbook* GetSupbook( const String& rUrl ) const;
-
+#if 0
     /** Creates all external sheets in the Calc document. */
     void                CreateTables();
+#endif
+    void                LoadCachedValues();
 
     /** Finds the largest range of sheet indexes in a SUPBOOK after a start sheet index.
         @param rnSBTabFirst  (out-param) The first sheet index of the range in SUPBOOK is returned here.
@@ -341,6 +387,7 @@ XclImpCrn::XclImpCrn( XclImpStream& rStrm, const XclAddress& rXclPos ) :
 {
 }
 
+#if 0
 void XclImpCrn::SetCell( const XclImpRoot& rRoot, SCTAB nScTab ) const
 {
     ScAddress aScPos( ScAddress::UNINITIALIZED );
@@ -365,6 +412,7 @@ void XclImpCrn::SetCell( const XclImpRoot& rRoot, SCTAB nScTab ) const
         }
     }
 }
+#endif
 
 // Sheet in an external document ==============================================
 
@@ -383,6 +431,7 @@ void XclImpSupbookTab::ReadCrn( XclImpStream& rStrm, const XclAddress& rXclPos )
     maCrnList.Append( new XclImpCrn( rStrm, rXclPos ) );
 }
 
+#if 0
 void XclImpSupbookTab::CreateAndFillTable( const XclImpRoot& rRoot,
         const String& rAbsUrl, const String& rFilterName, const String& rFilterOpt )
 {
@@ -391,6 +440,7 @@ void XclImpSupbookTab::CreateAndFillTable( const XclImpRoot& rRoot,
             for( const XclImpCrn* pCrn = maCrnList.First(); pCrn; pCrn = maCrnList.Next() )
                 pCrn->SetCell( rRoot, mnScTab );
 }
+#endif
 
 // External document (SUPBOOK) ================================================
 
@@ -457,13 +507,14 @@ void XclImpSupbook::ReadExternname( XclImpStream& rStrm )
 {
     maExtNameList.Append( new XclImpExtName( rStrm, meType == EXC_SBTYPE_ADDIN ) );
 }
-
+#if 0
 SCTAB XclImpSupbook::GetScTabNum( sal_uInt16 nXclTab ) const
 {
     if( meType == EXC_SBTYPE_SELF )
         return static_cast< SCTAB >( nXclTab );
-    const XclImpSupbookTab* pSBTab = maSupbTabList.GetObject( nXclTab );
-    return pSBTab ? pSBTab->GetScTab() : SCTAB_INVALID;
+    return SCTAB_INVALID;
+//  const XclImpSupbookTab* pSBTab = maSupbTabList.GetObject( nXclTab );
+//  return pSBTab ? pSBTab->GetScTab() : SCTAB_INVALID;
 }
 
 SCTAB XclImpSupbook::GetScTabNum( const String& rTabName ) const
@@ -473,6 +524,15 @@ SCTAB XclImpSupbook::GetScTabNum( const String& rTabName ) const
             return pSBTab->GetScTab();
     return SCTAB_INVALID;
 }
+#endif
+sal_uInt16 XclImpSupbook::GetXclTabNum( const String& rTabName ) const
+{
+    sal_uInt16 nTabNum = 0;
+    for (const XclImpSupbookTab* pSBTab = maSupbTabList.First(); pSBTab; pSBTab = maSupbTabList.Next(), ++nTabNum)
+        if (pSBTab->GetTabName() == rTabName)
+            return nTabNum;
+    return EXC_NOTAB;
+}
 
 const XclImpExtName* XclImpSupbook::GetExternName( sal_uInt16 nXclIndex ) const
 {
@@ -492,6 +552,22 @@ const String& XclImpSupbook::GetMacroName( sal_uInt16 nXclNameIdx ) const
     return (pName && pName->IsVBName()) ? pName->GetScName() : EMPTY_STRING;
 }
 
+const String& XclImpSupbook::GetTabName( sal_uInt16 nXtiTab ) const
+{
+    if (maSupbTabList.Empty())
+        return EMPTY_STRING;
+
+    sal_uInt16 i = 0;
+    for (XclImpSupbookTab* p = maSupbTabList.First(); p; p = maSupbTabList.Next(), ++i)
+    {
+        if (i == nXtiTab)
+            return p->GetTabName();
+    }
+
+    return EMPTY_STRING;
+}
+
+#if 0
 void XclImpSupbook::CreateTables( sal_uInt16 nSBTabFirst, sal_uInt16 nSBTabLast )
 {
     if( (meType == EXC_SBTYPE_EXTERN) && (GetExtDocOptions().GetDocSettings().mnLinkCnt == 0) && GetDocShell() )
@@ -508,6 +584,7 @@ void XclImpSupbook::CreateTables( sal_uInt16 nSBTabFirst, sal_uInt16 nSBTabLast
                 pSBTab->CreateAndFillTable( GetRoot(), aAbsUrl, maFilterName, maFilterOpt );
     }
 }
+#endif
 
 // Import link manager ========================================================
 
@@ -531,7 +608,7 @@ void XclImpLinkManagerImpl::ReadExternsheet( XclImpStream& rStrm )
         --nXtiCount;
     }
 
-    CreateTables();
+    LoadCachedValues();
 }
 
 void XclImpLinkManagerImpl::ReadSupbook( XclImpStream& rStrm )
@@ -570,8 +647,8 @@ bool XclImpLinkManagerImpl::GetScTabRange(
     {
         if( const XclImpSupbook* pSupbook = maSupbookList.GetObject( pXti->mnSupbook ) )
         {
-            rnFirstScTab = pSupbook->GetScTabNum( pXti->mnSBTabFirst );
-            rnLastScTab = pSupbook->GetScTabNum( pXti->mnSBTabLast );
+            rnFirstScTab = pXti->mnSBTabFirst;
+            rnLastScTab  = pXti->mnSBTabLast;
             return true;
         }
     }
@@ -584,6 +661,20 @@ const XclImpExtName* XclImpLinkManagerImpl::GetExternName( sal_uInt16 nXtiIndex,
     return pSupbook ? pSupbook->GetExternName( nExtName ) : 0;
 }
 
+const String* XclImpLinkManagerImpl::GetSupbookUrl( sal_uInt16 nXtiIndex ) const
+{
+    const XclImpSupbook* p = GetSupbook( nXtiIndex );
+    if (!p)
+        return NULL;
+    return &p->GetXclUrl();
+}
+
+const String& XclImpLinkManagerImpl::GetSupbookTabName( sal_uInt16 nXti, sal_uInt16 nXtiTab ) const
+{
+    const XclImpSupbook* p = GetSupbook(nXti);
+    return p ? p->GetTabName(nXtiTab) : EMPTY_STRING;
+}
+
 bool XclImpLinkManagerImpl::GetLinkData( String& rApplic, String& rTopic, sal_uInt16 nXtiIndex ) const
 {
     const XclImpSupbook* pSupbook = GetSupbook( nXtiIndex );
@@ -595,12 +686,18 @@ const String& XclImpLinkManagerImpl::GetMacroName( sal_uInt16 nExtSheet, sal_uIn
     const XclImpSupbook* pSupbook = GetSupbook( nExtSheet );
     return pSupbook ? pSupbook->GetMacroName( nExtName ) : EMPTY_STRING;
 }
-
+#if 0
 SCTAB XclImpLinkManagerImpl::GetScTab( const String& rUrl, const String& rTabName ) const
 {
     const XclImpSupbook* pSupbook = GetSupbook( rUrl );
     return pSupbook ? pSupbook->GetScTabNum( rTabName ) : SCTAB_INVALID;
 }
+#endif
+sal_uInt16 XclImpLinkManagerImpl::GetXclTab( const String& rUrl, const String& rTabName ) const
+{
+    const XclImpSupbook* pSupbook = GetSupbook( rUrl );
+    return pSupbook ? pSupbook->GetXclTabNum( rTabName ) : EXC_NOTAB;
+}
 
 const XclImpSupbook* XclImpLinkManagerImpl::GetSupbook( sal_uInt32 nXtiIndex ) const
 {
@@ -616,6 +713,7 @@ const XclImpSupbook* XclImpLinkManagerImpl::GetSupbook( const String& rUrl ) con
     return 0;
 }
 
+#if 0
 void XclImpLinkManagerImpl::CreateTables()
 {
     DBG_ASSERT( !mbCreated, "XclImpLinkManager::CreateTables - multiple call" );
@@ -637,6 +735,15 @@ void XclImpLinkManagerImpl::CreateTables()
     }
     mbCreated = true;
 }
+#endif
+
+void XclImpLinkManagerImpl::LoadCachedValues()
+{
+    // Read all CRN records which can be accessed via XclImpSupbook, and store 
+    // the cached values to the external reference manager.
+
+    // TODO: Implement this.
+}
 
 bool XclImpLinkManagerImpl::FindNextTabRange(
         sal_uInt16& rnSBTabFirst, sal_uInt16& rnSBTabLast,
@@ -707,6 +814,16 @@ const XclImpExtName* XclImpLinkManager::GetExternName( sal_uInt16 nXtiIndex, sal
     return mxImpl->GetExternName( nXtiIndex, nExtName );
 }
 
+const String* XclImpLinkManager::GetSupbookUrl( sal_uInt16 nXtiIndex ) const
+{
+    return mxImpl->GetSupbookUrl(nXtiIndex);
+}
+
+const String& XclImpLinkManager::GetSupbookTabName( sal_uInt16 nXti,  sal_uInt16 nXtiTab ) const
+{
+    return mxImpl->GetSupbookTabName(nXti, nXtiTab);
+}
+
 bool XclImpLinkManager::GetLinkData( String& rApplic, String& rTopic, sal_uInt16 nXtiIndex ) const
 {
     return mxImpl->GetLinkData( rApplic, rTopic, nXtiIndex );
@@ -716,11 +833,16 @@ const String& XclImpLinkManager::GetMacroName( sal_uInt16 nExtSheet, sal_uInt16
 {
     return mxImpl->GetMacroName( nExtSheet, nExtName );
 }
-
+#if 0
 SCTAB XclImpLinkManager::GetScTab( const String& rUrl, const String& rTabName ) const
 {
     return mxImpl->GetScTab( rUrl, rTabName );
 }
+#endif
+sal_uInt16 XclImpLinkManager::GetXclTab( const String& rUrl, const String& rTabName ) const
+{
+    return mxImpl->GetXclTab( rUrl, rTabName );
+}
 
 // ============================================================================
 
diff --git sc/source/filter/inc/XclImpChangeTrack.hxx sc/source/filter/inc/XclImpChangeTrack.hxx
index 2335c6c..399a650 100644
--- sc/source/filter/inc/XclImpChangeTrack.hxx
+++ sc/source/filter/inc/XclImpChangeTrack.hxx
@@ -182,7 +182,7 @@ class XclImpChTrFmlConverter : public ExcelToSc8
 private:
 	XclImpChangeTrack&			rChangeTrack;
 
-    virtual BOOL                Read3DTabReference( XclImpStream& rStrm, SCTAB& rFirstTab, SCTAB& rLastTab );
+    virtual bool                Read3DTabReference( SCTAB& rFirstTab, SCTAB& rLastTab, UINT16 nIxti );
 
 public:
 	inline						XclImpChTrFmlConverter(
diff --git sc/source/filter/inc/excform.hxx sc/source/filter/inc/excform.hxx
index 915dd98..6913b25 100644
--- sc/source/filter/inc/excform.hxx
+++ sc/source/filter/inc/excform.hxx
@@ -113,8 +113,9 @@ private:
     void                ExcRelToScRel8( UINT16 nRow, UINT16 nCol, SingleRefData&,
 							const BOOL bName );
 
-						// this function must read 2 bytes from stream and adjust <nBytesLeft>
-    virtual BOOL        Read3DTabReference( XclImpStream& rStrm, SCTAB& rFirstTab, SCTAB& rLastTab );
+    bool                GetExternalFileIdFromXti( UINT16 nIxti, sal_uInt16& rFileId ) const;
+
+    virtual bool        Read3DTabReference( SCTAB& rFirstTab, SCTAB& rLastTab, UINT16 nIxti );
 
 public:
                         ExcelToSc8( const XclImpRoot& rRoot );
diff --git sc/source/filter/inc/fdumper.hxx sc/source/filter/inc/fdumper.hxx
index aea8de6..8f57403 100644
--- sc/source/filter/inc/fdumper.hxx
+++ sc/source/filter/inc/fdumper.hxx
@@ -31,7 +31,7 @@
 #ifndef SC_FDUMPER_HXX
 #define SC_FDUMPER_HXX
 
-#define SCF_INCL_DUMPER (OSL_DEBUG_LEVEL > 0)
+#define SCF_INCL_DUMPER (OSL_DEBUG_LEVEL > 0) && 0
 
 #include <map>
 #include <math.h>
diff --git sc/source/filter/inc/tokstack.hxx sc/source/filter/inc/tokstack.hxx
index 89e955a..5bb6772 100644
--- sc/source/filter/inc/tokstack.hxx
+++ sc/source/filter/inc/tokstack.hxx
@@ -35,6 +35,8 @@
 #include <tools/debug.hxx>
 #include "compiler.hxx"
 
+#include <vector>
+
 
 typedef OpCode DefTokenId;
 // in PRODUCT version: ambiguity between OpCode (being USHORT) and UINT16
@@ -78,6 +80,9 @@ enum E_TYPE
 	T_Ext,		// irgendwas Unbekanntes mit Funktionsnamen
 	T_Nlf,		// token for natural language formula
 	T_Matrix,	// token for inline arrays
+    T_ExtName,  // token for external names
+    T_ExtRefC,
+    T_ExtRefA,
 	T_Error		// fuer Abfrage im Fehlerfall
 };
 
@@ -134,6 +139,32 @@ class TokenPool
 		UINT16						nP_Matrix;
 		UINT16						nP_MatrixAkt;
 
+        /** for storage of external names */
+        struct ExtName
+        {
+            sal_uInt16  mnFileId;
+            String      maName;
+        };
+        ::std::vector<ExtName>      maExtNames;
+
+        /** for storage of external cell references */
+        struct ExtCellRef
+        {
+            sal_uInt16      mnFileId;
+			String			maTabName;
+            SingleRefData   maRef;
+        };
+        ::std::vector<ExtCellRef>   maExtCellRefs;
+
+        /** for storage of external area references */
+        struct ExtAreaRef
+        {
+            sal_uInt16      mnFileId;
+			String			maTabName;
+            ComplRefData    maRef;
+        };
+        ::std::vector<ExtAreaRef>   maExtAreaRefs;
+
 		UINT16*						pElement;	// Array mit Indizes fuer Elemente
 		E_TYPE*						pType;		// ...mit Typ-Info
 		UINT16*						pSize;		// ...mit Laengenangabe (Anz. UINT16)
@@ -180,12 +211,14 @@ class TokenPool
 										// 4 externals (e.g. AddIns, Makros...)
 		const TokenId				StoreNlf( const SingleRefData& rTr );
 		const TokenId				StoreMatrix( SCSIZE nC, SCSIZE nR );
+        const TokenId               StoreExtName( sal_uInt16 nFileId, const String& rName );
+        const TokenId               StoreExtRef( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef );
+        const TokenId               StoreExtRef( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef );
 
 		inline const TokenId		LastId( void ) const;
 		inline const ScTokenArray*	operator []( const TokenId nId );
 		void						Reset( void );
 		inline E_TYPE				GetType( const TokenId& nId ) const;
-		inline const SingleRefData*	GetSRD( const TokenId& nId ) const;
 		BOOL						IsSingleOp( const TokenId& nId, const DefTokenId eId ) const;
         const String*               GetExternal( const TokenId& nId ) const;
         const String*               GetString( const TokenId& nId ) const;
@@ -374,21 +407,5 @@ inline E_TYPE TokenPool::GetType( const TokenId& rId ) const
 }
 
 
-inline const SingleRefData* TokenPool::GetSRD( const TokenId& rId ) const
-{
-    SingleRefData* pRet;
-
-	UINT16 nId = (UINT16) rId - 1;
-
-	if( nId < nElementAkt && pType[ nId ] == T_RefC )
-		pRet = ppP_RefTr[ pElement[ nId ] ];
-	else
-		pRet = NULL;
-
-	return pRet;
-}
-
-
-
 #endif
 
diff --git sc/source/filter/inc/xelink.hxx sc/source/filter/inc/xelink.hxx
index 795219c..53e864f 100644
--- sc/source/filter/inc/xelink.hxx
+++ sc/source/filter/inc/xelink.hxx
@@ -173,11 +173,20 @@ public:
     /** Searches for a special EXTERNSHEET index for the own document. */
     sal_uInt16          FindExtSheet( sal_Unicode cCode );
 
+    void                FindExtSheet( sal_uInt16 nFileId, sal_uInt16& rnExtSheet, 
+                                      sal_uInt16& rnFirstSBTab, sal_uInt16& rnLastSBTab, 
+                                      sal_uInt16 nFirstXclTab, sal_uInt16 nLastXclTab, 
+                                      XclExpRefLogEntry* pRefLogEntry = NULL );
+
     /** Stores the cell with the given address in a CRN record list. */
     void                StoreCell( const SingleRefData& rRef );
     /** Stores all cells in the given range in a CRN record list. */
     void                StoreCellRange( const ComplRefData& rRef );
 
+    void                StoreCell( sal_uInt16 nFileId, const String& rTabName, const SingleRefData& rRef );
+
+    void                StoreCellRange( sal_uInt16 nFileId, const String& rTabName, const ComplRefData& rRef );
+
     /** Finds or inserts an EXTERNNAME record for an add-in function name.
         @param rnExtSheet  (out-param) Returns the index of the EXTSHEET structure for the add-in function name.
         @param rnExtName  (out-param) Returns the 1-based EXTERNNAME record index.
@@ -193,6 +202,10 @@ public:
                             sal_uInt16& rnExtSheet, sal_uInt16& rnExtName,
                             const String& rApplic, const String& rTopic, const String& rItem );
 
+    bool                InsertExtName(
+                            sal_uInt16& rnExtSheet, sal_uInt16& rnExtName, const String& rUrl,
+                            const String& rName, const ScTokenArray* pArray );
+
     /** Writes the entire Link table. */
     virtual void        Save( XclExpStream& rStrm );
 
diff --git sc/source/filter/inc/xilink.hxx sc/source/filter/inc/xilink.hxx
index 0d547fe..c9d7567 100644
--- sc/source/filter/inc/xilink.hxx
+++ sc/source/filter/inc/xilink.hxx
@@ -179,6 +179,11 @@ public:
                             sal_uInt16 nXtiIndex ) const;
     /** Returns the specified external name or 0 on error. */
     const XclImpExtName* GetExternName( sal_uInt16 nXtiIndex, sal_uInt16 nExtName ) const;
+
+    const String* GetSupbookUrl( sal_uInt16 nXtiIndex ) const;
+
+    const String& GetSupbookTabName( sal_uInt16 nXti, sal_uInt16 nXtiTab ) const;
+
     /** Tries to decode the URL of the specified XTI entry to OLE or DDE link components.
         @descr  For DDE links: Decodes to application name and topic.
         For OLE object links: Decodes to class name and document URL.
@@ -186,10 +191,12 @@ public:
     bool                GetLinkData( String& rApplic, String& rTopic, sal_uInt16 nXtiIndex ) const;
     /** Returns the specified macro name or an empty string on error. */
     const String&       GetMacroName( sal_uInt16 nExtSheet, sal_uInt16 nExtName ) const;
-
+#if 0
     /** Returns the Calc sheet index of a table in an external document.
         @return  Calc sheet index or EXC_TAB_INVALID on error. */
     SCTAB               GetScTab( const String& rUrl, const String& rTabName ) const;
+#endif
+    sal_uInt16          GetXclTab( const String& rUrl,  const String& rTabName ) const;
 
 private:
     typedef ::std::auto_ptr< XclImpLinkManagerImpl > XclImpLinkMgrImplPtr;
diff --git sc/source/filter/xcl97/XclImpChangeTrack.cxx sc/source/filter/xcl97/XclImpChangeTrack.cxx
index 022b472..75cc8c6 100644
--- sc/source/filter/xcl97/XclImpChangeTrack.cxx
+++ sc/source/filter/xcl97/XclImpChangeTrack.cxx
@@ -176,7 +176,7 @@ sal_Bool XclImpChangeTrack::Read3DTabRefInfo( SCTAB& rFirstTab, SCTAB& rLastTab
         // - sheet name, always separated from URL
         String aTabName( pStrm->ReadUniString() );
         pStrm->Ignore( 1 );
-        rFirstTab = rLastTab = static_cast<SCTAB>(GetLinkManager().GetScTab( aUrl, aTabName ));
+        rFirstTab = rLastTab = static_cast<SCTAB>(GetLinkManager().GetXclTab( aUrl, aTabName ));
 	}
 	return sal_True;
 }
@@ -490,9 +490,8 @@ XclImpChTrFmlConverter::~XclImpChTrFmlConverter()
 }
 
 // virtual, called from ExcToSc8::Convert()
-BOOL XclImpChTrFmlConverter::Read3DTabReference( XclImpStream& rStrm, SCTAB& rFirstTab, SCTAB& rLastTab )
+bool XclImpChTrFmlConverter::Read3DTabReference( SCTAB& rFirstTab, SCTAB& rLastTab, UINT16 /*nIxti*/ )
 {
-    rStrm.Ignore( 2 );
 	return rChangeTrack.Read3DTabRefInfo( rFirstTab, rLastTab );
 }
 
diff --git sc/source/ui/docshell/externalrefmgr.cxx sc/source/ui/docshell/externalrefmgr.cxx
new file mode 100644
index 0000000..b1d4117
--- /dev/null
+++ sc/source/ui/docshell/externalrefmgr.cxx
@@ -0,0 +1,1115 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: document.hxx,v $
+ * $Revision: 1.112 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_sc.hxx"
+
+
+
+// INCLUDE ---------------------------------------------------------------
+
+#include "externalrefmgr.hxx"
+#include "document.hxx"
+#include "token.hxx"
+#include "tokenarray.hxx"
+#include "address.hxx"
+#include "tablink.hxx"
+#include "docsh.hxx"
+#include "scextopt.hxx"
+#include "rangenam.hxx"
+#include "cell.hxx"
+#include "viewdata.hxx"
+#include "tabvwsh.hxx"
+#include "sc.hrc"
+
+#include "sfx2/app.hxx"
+#include "sfx2/docfilt.hxx"
+#include "sfx2/docfile.hxx"
+#include "sfx2/fcontnr.hxx"
+#include "sfx2/sfxsids.hrc"
+#include "sfx2/objsh.hxx"
+#include "svtools/broadcast.hxx"
+#include "svtools/smplhint.hxx"
+#include "svtools/itemset.hxx"
+#include "svtools/stritem.hxx"
+#include "svx/linkmgr.hxx"
+
+#include <memory>
+#include <stdio.h>
+
+using ::std::auto_ptr;
+using ::com::sun::star::uno::Any;
+using ::std::vector;
+using ::std::find;
+using ::std::distance;
+
+
+namespace {
+
+#include <string>
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+    }
+
+    ~StackPrinter()
+    {
+        fprintf(stdout, "%s: --end\n", msMsg.c_str());
+    }
+
+private:
+    ::std::string msMsg;
+};
+
+}
+
+#define SRCDOC_LIFE_SPAN     6000       // 1 minute (in 100th of a sec)
+#define SRCDOC_SCAN_INTERVAL 1000*2     // every 2 seconds (in msec)
+
+// ============================================================================
+
+ScExternalRefCache::ScExternalRefCache()
+{
+}
+ScExternalRefCache::~ScExternalRefCache()
+{
+}
+
+ScToken* ScExternalRefCache::getCellData(sal_uInt16 nFileId, const String& rTabName, SCROW nRow, SCCOL nCol)
+{
+    StackPrinter __stack_print__("ScExternalRefCache::getCellData");
+
+    DocDataType::iterator itrDoc = maDocs.find(nFileId);
+    if (itrDoc == maDocs.end())
+        // specified document is not cached.
+        return NULL;
+
+    DocItem& rDoc = itrDoc->second;
+    TableNameIndexMap::iterator itrTabId = rDoc.maTableNameIndex.find(rTabName);
+    if (itrTabId == rDoc.maTableNameIndex.end())
+        // the specified table is not in cache.
+        return NULL;
+
+    TableDataTypeRef pTableData = rDoc.maTables[itrTabId->second];
+    TableDataType::iterator itrTable = pTableData->find(nRow);
+    if (itrTable == pTableData->end())
+        // this table doesn't have the specified row.
+        return NULL;
+
+    RowDataType& rRowData = itrTable->second;
+    RowDataType::iterator itrRow = rRowData.find(nCol);
+    if (itrRow == rRowData.end())
+        // this row doesn't have the specified column.
+        return NULL;
+
+    return itrRow->second.get();
+}
+
+ScTokenArray* ScExternalRefCache::getCellRangeData(sal_uInt16 nFileId, const String& rTabName, const ScRange& rRange)
+{
+    StackPrinter __stack_print__("ScExternalRefCache::getCellRangeData");
+
+    DocDataType::iterator itrDoc = maDocs.find(nFileId);
+    if (itrDoc == maDocs.end())
+        // specified document is not cached.
+        return NULL;
+
+    DocItem& rDoc = itrDoc->second;
+    TableNameIndexMap::iterator itrTabId = rDoc.maTableNameIndex.find(rTabName);
+    if (itrTabId == rDoc.maTableNameIndex.end())
+        // the specified table is not in cache.
+        return NULL;
+
+    const ScAddress& s = rRange.aStart;
+    const ScAddress& e = rRange.aEnd;
+
+    SCTAB nTab1 = s.Tab(), nTab2 = e.Tab();
+    SCCOL nCol1 = s.Col(), nCol2 = e.Col();
+    SCROW nRow1 = s.Row(), nRow2 = e.Row();
+
+    // Make sure I have all the tables cached.
+    size_t nTabFirstId = itrTabId->second;
+    size_t nTabLastId  = nTabFirstId + nTab2 - nTab1;
+    if (nTabLastId >= rDoc.maTables.size())
+        // not all tables are cached.
+        return NULL;
+
+    auto_ptr<ScTokenArray> pArray(new ScTokenArray);
+    bool bFirstTab = true;
+    for (size_t nTab = nTabFirstId; nTab <= nTabLastId; ++nTab)
+    {
+        TableDataTypeRef pTab = rDoc.maTables[nTab];
+
+        ScMatrixRef xMat = new ScMatrix(
+            static_cast<SCSIZE>(nCol2-nCol1+1), static_cast<SCSIZE>(nRow2-nRow1+1));
+
+
+        for (SCROW nRow = nRow1; nRow <= nRow2; ++nRow)
+        {
+            TableDataType::iterator itrTable = pTab->find(nRow);
+            if (itrTable == pTab->end())
+                // this table doesn't have the specified row.
+                return NULL;
+
+            RowDataType& rRowData = itrTable->second;
+
+            for (SCCOL nCol = nCol1; nCol <= nCol2; ++nCol)
+            {
+                RowDataType::iterator itrRow = rRowData.find(nCol);
+                if (itrRow == rRowData.end())
+                    // this row doesn't have the specified column.
+                    return NULL;
+
+                ScToken* pToken = itrRow->second.get();
+                SCSIZE nC = nCol - nCol1, nR = nRow - nRow1;
+                switch (pToken->GetType())
+                {
+                    case svDouble:
+                        xMat->PutDouble(pToken->GetDouble(), nC, nR);
+                    break;
+                    case svString:
+                        xMat->PutString(pToken->GetString(), nC, nR);
+                    break;
+                    default:
+                        xMat->PutEmpty(nC, nR);
+                }
+            }
+        }
+        if (!bFirstTab)
+            pArray->AddOpCode(ocSep);
+
+        ScMatrix* pMat2 = xMat;
+        ScMatrixToken aToken(pMat2);
+        pArray->AddToken(aToken);
+
+        bFirstTab = false;
+    }
+    return pArray.release();
+}
+
+void ScExternalRefCache::setCellData(sal_uInt16 nFileId, const String& rTabName, SCROW nRow, SCCOL nCol, TokenRef pToken)
+{
+    StackPrinter __stack_print__("ScExternalRefCache::setCellData");
+
+    using ::std::pair;
+    DocDataType::iterator itrDoc = maDocs.find(nFileId);
+    if (itrDoc == maDocs.end())
+    {
+        // specified document is not cached.
+        pair<DocDataType::iterator, bool> res = maDocs.insert(
+                DocDataType::value_type(nFileId, DocItem()));
+
+        if (!res.second)
+            // insertion failed.
+            return;
+
+        itrDoc = res.first;
+    }
+
+    DocItem& rDoc = itrDoc->second;
+    
+    // See if the table by this name already exists.
+    TableNameIndexMap::iterator itrTabName = rDoc.maTableNameIndex.find(rTabName);
+    if (itrTabName == rDoc.maTableNameIndex.end())
+    {
+        // Insert a new table by this name.
+        rDoc.maTables.push_back(TableDataTypeRef(new TableDataType));
+        pair<TableNameIndexMap::iterator, bool> res = rDoc.maTableNameIndex.insert(
+            TableNameIndexMap::value_type(rTabName, rDoc.maTables.size()-1));
+
+        if (!res.second)
+            return;
+
+        itrTabName = res.first;
+    }
+
+    TableDataTypeRef pTableData = rDoc.maTables[itrTabName->second];
+    TableDataType::iterator itrRow = pTableData->find(nRow);
+    if (itrRow == pTableData->end())
+    {
+        // This row does not exist yet.
+        pair<TableDataType::iterator, bool> res = pTableData->insert(
+            TableDataType::value_type(nRow, RowDataType()));
+
+        if (!res.second)
+            return;
+
+        itrRow = res.first;
+    }
+
+    // Insert this token into the specified column location.  I don't need to 
+    // check for existing data.  Just overwrite it.
+    RowDataType& rRow = itrRow->second;
+    rRow.insert(RowDataType::value_type(nCol, pToken));
+    fprintf(stdout, "ScExternalRefCache::setCellData:   token inserted\n");
+}
+
+void ScExternalRefCache::setCellRangeData(sal_uInt16 nFileId, const String& rTabName, const ScRange& rRange,
+                                          const vector<MatrixRef>& rData)
+{
+}
+
+// ============================================================================
+
+ScExternalRefLink::ScExternalRefLink(ScDocument* pDoc, sal_uInt16 nFileId, const String& rFilter) :
+    ::sfx2::SvBaseLink(::sfx2::LINKUPDATE_ONCALL, FORMAT_FILE),
+    mnFileId(nFileId),
+    maFilterName(rFilter),
+    mpDoc(pDoc),
+    mbDoRefresh(true)
+{
+}
+
+ScExternalRefLink::~ScExternalRefLink()
+{
+}
+
+void ScExternalRefLink::Closed()
+{
+    ScExternalRefManager* pMgr = mpDoc->GetExternalRefManager();
+    pMgr->removeSrcDocument(mnFileId, true);
+}
+
+void ScExternalRefLink::DataChanged(const String& /*rMimeType*/, const Any& /*rValue*/)
+{
+    if (!mbDoRefresh)
+        return;
+
+    String aFile, aFilter;
+    mpDoc->GetLinkManager()->GetDisplayNames(this, NULL, &aFile, NULL, &aFilter);
+    ScExternalRefManager* pMgr = mpDoc->GetExternalRefManager();
+    const String* pCurFile = pMgr->getExternalFileName(mnFileId);
+    if (!pCurFile)
+        return;
+
+    if (pCurFile->Equals(aFile))
+    {
+        // Refresh the current source document.
+        pMgr->refreshNames(mnFileId);
+    }
+    else
+    {
+        // The source document has changed.
+        pMgr->switchSrcFile(mnFileId, aFile);
+        maFilterName = aFilter;
+    }
+}
+
+void ScExternalRefLink::Edit(Window* pParent, const Link& /*rEndEditHdl*/)
+{
+    SvBaseLink::Edit(pParent, LINK(this, ScExternalRefLink, EndEditHdl));
+}
+
+void ScExternalRefLink::SetDoReferesh(bool b)
+{
+    mbDoRefresh = b;
+}
+
+IMPL_LINK(ScExternalRefLink, EndEditHdl, void*, EMPTYARG)
+{
+    return 0;
+}
+
+// ============================================================================
+
+static ScToken* lcl_convertToToken(ScBaseCell* pCell)
+{
+    StackPrinter __stack_print__("::lcl_convertToToken");
+
+    if (!pCell)
+        return NULL;
+
+    switch (pCell->GetCellType())
+    {
+        case CELLTYPE_STRING:
+        {
+            String aStr;
+            static_cast<ScStringCell*>(pCell)->GetString(aStr);
+            fprintf(stdout, "lcl_convertToToken:   string type (%s)\n", rtl::OUStringToOString(aStr, RTL_TEXTENCODING_UTF8).getStr());
+            ScStringToken aToken(aStr);
+            return aToken.Clone();
+        }
+        break;
+        case CELLTYPE_VALUE:
+        {
+            double fVal = static_cast<ScValueCell*>(pCell)->GetValue();
+            ScDoubleToken aToken(fVal);
+            fprintf(stdout, "lcl_convertToToken:   value type (%g)\n", fVal);
+            return aToken.Clone();
+        }
+        break;
+        case CELLTYPE_FORMULA:
+        {
+            fprintf(stdout, "lcl_convertToToken:   formula type\n");
+            ScFormulaCell* pFCell = static_cast<ScFormulaCell*>(pCell);
+            if (pFCell->IsValue())
+            {
+                double fVal = pFCell->GetValue();
+                ScDoubleToken aToken(fVal);
+                return aToken.Clone();
+            }
+            else
+            {
+                String aStr;
+                pFCell->GetString(aStr);
+                ScStringToken aToken(aStr);
+                return aToken.Clone();
+            }
+        }
+        break;
+        default:
+            DBG_ERROR("attempted to convert an unknown cell type.");
+    }
+
+    return NULL;
+}
+
+static ScTokenArray* lcl_convertToTokenArray(ScDocument* pSrcDoc, const ScRange& rRange)
+{
+    const ScAddress& s = rRange.aStart;
+    const ScAddress& e = rRange.aEnd;
+
+    SCTAB nTab1 = s.Tab(), nTab2 = e.Tab();
+    SCCOL nCol1 = s.Col(), nCol2 = e.Col();
+    SCROW nRow1 = s.Row(), nRow2 = e.Row();
+
+    auto_ptr<ScTokenArray> pArray(new ScTokenArray);
+    bool bFirstTab = true;
+    for (SCTAB nTab = nTab1; nTab <= nTab2; ++nTab)
+    {
+        ScMatrixRef xMat = new ScMatrix(
+            static_cast<SCSIZE>(nCol2-nCol1+1),
+            static_cast<SCSIZE>(nRow2-nRow1+1));
+
+        for (SCCOL nCol = nCol1; nCol <= nCol2; ++nCol)
+        {
+            for (SCROW nRow = nRow1; nRow <= nRow2; ++nRow)
+            {
+                SCSIZE nC = nCol - nCol1, nR = nRow - nRow1;
+                ScBaseCell* pCell;
+                pSrcDoc->GetCell(nCol, nRow, nTab, pCell);
+                if (pCell)
+                {
+                    switch (pCell->GetCellType())
+                    {
+                        case CELLTYPE_STRING:
+                        {
+                            String aStr;
+                            static_cast<ScStringCell*>(pCell)->GetString(aStr);
+                            xMat->PutString(aStr, nC, nR);
+                        }
+                        break;
+                        case CELLTYPE_VALUE:
+                        {
+                            double fVal = static_cast<ScValueCell*>(pCell)->GetValue();
+                            xMat->PutDouble(fVal, nC, nR);
+                        }
+                        break;
+                        case CELLTYPE_FORMULA:
+                        {
+                            ScFormulaCell* pFCell = static_cast<ScFormulaCell*>(pCell);
+                            if (pFCell->IsValue())
+                            {
+                                double fVal = pFCell->GetValue();
+                                xMat->PutDouble(fVal, nC, nR);
+                            }
+                            else
+                            {
+                                String aStr;
+                                pFCell->GetString(aStr);
+                                xMat->PutString(aStr, nC, nR);
+                            }
+                        }
+                        break;
+                        default:
+                            DBG_ERROR("attempted to convert an unknown cell type.");
+                    }
+                }
+                else
+                {
+                    xMat->PutEmpty(nC, nR);
+                }
+            }
+        }
+        if (!bFirstTab)
+            pArray->AddOpCode(ocSep);
+
+        ScMatrix* pMat2 = xMat;
+        ScMatrixToken aToken(pMat2);
+        pArray->AddToken(aToken);
+
+        bFirstTab = false;
+    }
+    return pArray.release();
+}
+
+ScExternalRefManager::ScExternalRefManager(ScDocument* pDoc) :
+    mpDoc(pDoc)
+{
+    maSrcDocTimer.SetTimeoutHdl( LINK(this, ScExternalRefManager, TimeOutHdl) );
+    maSrcDocTimer.SetTimeout(SRCDOC_SCAN_INTERVAL);
+}
+
+ScExternalRefManager::~ScExternalRefManager()
+{
+    clear();
+}
+
+ScToken* ScExternalRefManager::getSingleRefToken(sal_uInt16 nFileId, const String& rTabName, const ScAddress& rCell,
+                                                 const ScAddress* pCurPos, SCTAB* pTab)
+{
+    StackPrinter __stack_print__("ScExternalRefManager::getSingleRefToken");
+    fprintf(stdout, "ScExternalRefManager::getSingleRefToken:   file id = %d; tab name = '%s'\n", nFileId, 
+            rtl::OUStringToOString(rTabName, RTL_TEXTENCODING_UTF8).getStr());
+
+    if (pCurPos)
+        insertReferencingCell(nFileId, *pCurPos);
+
+    if (pTab)
+        *pTab = -1;
+
+    // Check if the given table name and the cell position is cached.
+    ScToken* pToken = maRefCache.getCellData(nFileId, rTabName, rCell.Row(), rCell.Col());
+    if (pToken)
+    {
+        fprintf(stdout, "ScExternalRefManager::getSingleRefToken:   cell reference cached.\n");
+        return pToken;
+    }
+
+    fprintf(stdout, "ScExternalRefManager::getSingleRefToken:   cell reference not cached.\n");
+
+    // reference not cached.  read from the source document.
+    ScDocument* pSrcDoc = getSrcDocument(nFileId);
+    if (!pSrcDoc)
+    {
+        fprintf(stdout, "ScExternalRefManager::getSingleRefToken:   source document NULL\n");
+        return NULL;
+    }
+
+    ScBaseCell* pCell = NULL;
+    SCTAB nTab;
+    if (!pSrcDoc->GetTable(rTabName, nTab))
+    {
+        // specified table name doesn't exist in the source document.
+        fprintf(stdout, "ScExternalRefManager::getSingleRefToken:   tab name doesn't exist in the source document.\n");
+        return NULL;
+    }
+
+    if (pTab)
+        *pTab = nTab;
+
+    pSrcDoc->GetCell(rCell.Col(), rCell.Row(), nTab, pCell);
+    TokenRef pTok(lcl_convertToToken(pCell));
+
+    if (!pTok.get())
+    {
+        // Cell in the source document is probably empty.
+        pTok.reset(new ScEmptyCellToken(false, false));
+    }
+
+    // Now, insert the token into cache table.
+    maRefCache.setCellData(nFileId, rTabName, rCell.Row(), rCell.Col(), pTok);
+    return pTok.get();
+}
+
+#if 1
+ScToken* ScExternalRefManager::getSingleRefToken(sal_uInt16 nFileId, const ScAddress& rCell, const ScAddress* pCurPos)
+{
+    if (pCurPos)
+        insertReferencingCell(nFileId, *pCurPos);
+    return getSingleRefToken(nFileId, rCell);
+}
+
+ScToken* ScExternalRefManager::getSingleRefToken(sal_uInt16 nFileId, const ScAddress& rCell)
+{
+    {
+        String aStr;
+        rCell.Format(aStr, SCA_ABS_3D);
+        const String *pFile = getExternalFileName(nFileId);
+        fprintf(stdout, "ScExternalRefManager::getSingleRefToken: --begin (file = '%s'; address = '%s')\n",
+                rtl::OUStringToOString(*pFile, RTL_TEXTENCODING_UTF8).getStr(),
+                rtl::OUStringToOString(aStr, RTL_TEXTENCODING_UTF8).getStr());
+    }
+
+    SingleTokenMap& rMap = getDocumentCache(nFileId)->maSingleTokens;
+    SingleTokenMap::iterator itr = rMap.find(rCell);
+    if (itr != rMap.end())
+    {
+        fprintf(stdout, "ScExternalRefManager::getSingleRefToken:   reference cached\n");
+        // this single reference is cached.
+        return itr->second.get();
+    }
+
+    // reference not cached.  read from the source document.
+    ScDocument* pSrcDoc = getSrcDocument(nFileId);
+    if (!pSrcDoc)
+        return NULL;
+
+    ScBaseCell* pCell = NULL;
+    pSrcDoc->GetCell(rCell.Col(), rCell.Row(), rCell.Tab(), pCell);
+    TokenRef pTok(lcl_convertToToken(pCell));
+
+    if (!pTok.get())
+    {
+        // Cell in the source document is probably empty.
+        pTok.reset(new ScEmptyCellToken(false, false));
+    }
+
+    rMap.insert(SingleTokenMap::value_type(rCell, pTok));
+    fprintf(stdout, "ScExternalRefManager::getSingleRefToken: --end\n");
+    return pTok.get();
+}
+#endif
+
+ScTokenArray* ScExternalRefManager::getDoubleRefTokens(sal_uInt16 nFileId, const String& rTabName, const ScRange& rRange, const ScAddress* pCurPos)
+{
+    if (pCurPos)
+        insertReferencingCell(nFileId, *pCurPos);
+
+    // Check if the given table name and the cell position is cached.
+    auto_ptr<ScTokenArray> pArray;
+    pArray.reset(maRefCache.getCellRangeData(nFileId, rTabName, rRange));
+    if (pArray.get())
+    {
+        fprintf(stdout, "ScExternalRefManager::getDoubleRefTokens:   range reference cached.\n");
+        return pArray.release();
+    }
+
+
+    SCTAB nTab = getExternalTableId(nFileId, rTabName);
+    if (nTab < 0)
+        return NULL;
+    
+    ScRange aRange(rRange);
+    SCTAB nTabSpan = aRange.aEnd.Tab() - aRange.aStart.Tab();
+    aRange.aStart.SetTab(nTab);
+    aRange.aEnd.SetTab(nTab + nTabSpan);
+    return getDoubleRefTokens(nFileId, aRange);
+}
+
+#if 1
+ScTokenArray* ScExternalRefManager::getDoubleRefTokens(sal_uInt16 nFileId, const ScRange& rRange)
+{
+    {
+        String aStr;
+        rRange.Format(aStr, SCR_ABS_3D, mpDoc);
+        const String *pFile = getExternalFileName(nFileId);
+        fprintf(stdout, "ScExternalRefManager::getDoubleRefToken: --begin (file = '%s'; range = '%s)\n",
+                rtl::OUStringToOString(*pFile, RTL_TEXTENCODING_UTF8).getStr(), 
+                rtl::OUStringToOString(aStr, RTL_TEXTENCODING_UTF8).getStr());
+    }
+
+    DoubleTokenMap& rMap = getDocumentCache(nFileId)->maDoubleTokens;
+    DoubleTokenMap::iterator itr = rMap.find(rRange);
+    if (itr != rMap.end())
+    {
+        fprintf(stdout, "ScExternalRefManager::getDoubleRefToken:   range reference cached\n");
+        // this range reference is cached.
+        return itr->second.get();
+    }
+
+    // reference not cached.  read from the source document.
+    ScDocument* pSrcDoc = getSrcDocument(nFileId);
+    if (!pSrcDoc)
+        return NULL;
+
+    TokenArrayRef pArray(lcl_convertToTokenArray(pSrcDoc, rRange));
+    if (!pArray.get())
+    {
+        // highly unlikely since lcl_convertToTokenArray never returns NULL.
+        fprintf(stdout, "ScExternalRefManager::getDoubleRefToken: --end (NULL)\n");
+        return NULL;
+    }
+
+    rMap.insert(DoubleTokenMap::value_type(rRange, pArray));
+    fprintf(stdout, "ScExternalRefManager::getDoubleRefToken: --end\n");
+    return pArray.get();
+}
+#endif
+
+ScTokenArray* ScExternalRefManager::getRangeNameTokens(sal_uInt16 nFileId, const String& rName, const ScAddress* pCurPos)
+{
+    if (pCurPos)
+    {
+        String aCellStr;
+        pCurPos->Format(aCellStr, SCA_ABS_3D);
+        const String* pFile = getExternalFileName(nFileId);
+        fprintf(stdout, "ScExternalRefManager::getRangeNameTokens: --begin (file = '%s' [%d]; name = '%s'; pos = '%s')\n",
+                rtl::OUStringToOString(*pFile, RTL_TEXTENCODING_UTF8).getStr(),
+                nFileId,
+                rtl::OUStringToOString(rName, RTL_TEXTENCODING_UTF8).getStr(),
+                rtl::OUStringToOString(aCellStr, RTL_TEXTENCODING_UTF8).getStr());
+    }
+
+    if (pCurPos)
+        insertReferencingCell(nFileId, *pCurPos);
+
+    // First, check if this name has already been cached.
+    RangeNameMap& rMap = getDocumentCache(nFileId)->maRangeNames;
+    RangeNameMap::iterator itr = rMap.find(rName);
+    if (itr != rMap.end())
+    {
+        fprintf(stdout, "ScExternalRefManager::getRangeNameTokens:   name is cached\n");
+        // this name is cached.
+        return itr->second.get();
+    }
+
+    ScDocument* pSrcDoc = getSrcDocument(nFileId);
+    if (!pSrcDoc)
+        return NULL;
+
+    ScRangeName* pExtNames = pSrcDoc->GetRangeName();
+    String aUpperName = ScGlobal::pCharClass->upper(rName);
+    USHORT n;
+    bool bRes = pExtNames->SearchNameUpper(aUpperName, n);
+    if (!bRes)
+        return NULL;
+
+    ScRangeData* pRangeData = (*pExtNames)[n];
+    if (!pRangeData)
+        return NULL;
+
+    // Parse all tokens in this external range data, and replace each absolute 
+    // reference token with an external reference token, and cache them.  Also
+    // register the source document with the link manager if it's a new
+    // source.
+
+    TokenArrayRef pNew(new ScTokenArray);
+
+    ScTokenArray* pCode = pRangeData->GetCode();
+    for (ScToken* pToken = pCode->First(); pToken; pToken = pCode->Next())
+    {
+        bool bTokenAdded = false;
+        switch (pToken->GetType())
+        {
+            case svSingleRef:
+            {
+                fprintf(stdout, "ScDocument::FindExternalRangeName:   single ref\n");
+                ScExternalSingleRefToken aNewToken(nFileId, String(), pToken->GetSingleRef());
+                pNew->AddToken(aNewToken);
+                bTokenAdded = true;
+            }
+            break;
+            case svDoubleRef:
+            {
+                fprintf(stdout, "ScDocument::FindExternalRangeName:   double ref\n");
+                ScExternalDoubleRefToken aNewToken(nFileId, String(), pToken->GetDoubleRef());
+                pNew->AddToken(aNewToken);
+                bTokenAdded = true;
+            }
+            break;
+        }
+        
+        if (!bTokenAdded)
+            pNew->AddToken(*pToken);
+    }
+
+    rMap.insert(RangeNameMap::value_type(rName, pNew));
+    fprintf(stdout, "ScExternalRefManager::getRangeNameTokens: --end\n");
+    return pNew.get();
+}
+
+void ScExternalRefManager::refreshAllReferencingCells(sal_uInt16 nFileId)
+{
+    fprintf(stdout, "ScExternalRefManager::refreshAllReferencingCells: --begin\n");
+    RefCellMap::iterator itr = maRefCells.find(nFileId);
+    if (itr == maRefCells.end())
+    {
+        const String* pFile = getExternalFileName(nFileId);
+        fprintf(stdout, "ScExternalRefManager::refreshAllReferencingCells:   no referencing cells for names from '%s'\n",
+                rtl::OUStringToOString(*pFile, RTL_TEXTENCODING_UTF8).getStr());
+        return;
+    }
+
+    RefCellSet aNewSet;
+    RefCellSet& rSet = itr->second;
+    RefCellSet::const_iterator itrSet = rSet.begin(), itrSetEnd = rSet.end();
+    for (; itrSet != itrSetEnd; ++itrSet)
+    {
+        if (compileTokensByCell(*itrSet))
+            // Cell still contains an external name/ref token.
+            aNewSet.insert(*itrSet);
+    }
+    rSet.swap(aNewSet);
+
+    ScViewData* pViewData = ScDocShell::GetViewData();
+    if (!pViewData)
+        return;
+
+    ScTabViewShell* pVShell = pViewData->GetViewShell();
+    if (!pVShell)
+        return;
+
+    // Repainting the grid also repaints the texts, but is there a better way
+    // to refresh texts?
+    pVShell->Invalidate(FID_TAB_TOGGLE_GRID);
+    pVShell->PaintGrid();
+}
+
+void ScExternalRefManager::insertReferencingCell(sal_uInt16 nFileId, const ScAddress& rCell)
+{
+    RefCellMap::iterator itr = maRefCells.find(nFileId);
+    if (itr != maRefCells.end())
+    {
+        itr->second.insert(rCell);
+        return;
+    }
+
+    RefCellSet aSet;
+    aSet.insert(rCell);
+    maRefCells.insert(RefCellMap::value_type(nFileId, aSet));
+}
+
+ScExternalRefManager::DocCache* ScExternalRefManager::getDocumentCache(
+    sal_uInt16 nFileId)
+{
+    DocCacheMap::iterator itr = maCachedDocContents.find(nFileId);
+    if (itr != maCachedDocContents.end())
+        return itr->second.get();
+
+    DocCacheRef pCache(new DocCache);
+    maCachedDocContents.insert(DocCacheMap::value_type(nFileId, pCache));
+    return pCache.get();
+}
+
+ScDocument* ScExternalRefManager::getSrcDocument(sal_uInt16 nFileId)
+{
+    DocShellMap::iterator itrEnd = maDocShells.end();
+    DocShellMap::iterator itr = maDocShells.find(nFileId);
+
+    if (itr != itrEnd)
+    {
+        SfxObjectShell* p = itr->second.maShell;
+        itr->second.maLastAccess = Time();
+        return static_cast<ScDocShell*>(p)->GetDocument();
+    }
+
+    const String* pFile = getExternalFileName(nFileId);
+    if (!pFile)
+    {
+        fprintf(stdout, "ScExternalRefManager::getSrcDocument:   no file name associated with the ID of %d\n", nFileId);
+        return NULL;
+    }
+
+    fprintf(stdout, "ScExternalRefManager::getSourceDocument:   file not found: '%s'\n",
+            rtl::OUStringToOString(*pFile, RTL_TEXTENCODING_UTF8).getStr());
+
+    String aFilter;
+    SrcDoc aSrcDoc;
+    aSrcDoc.maShell = loadSrcDocument(*pFile, aFilter);
+    if (maDocShells.empty())
+    {
+        // If this is the first source document insertion, start up the timer.
+        maSrcDocTimer.Start();
+    }
+
+    maDocShells.insert(DocShellMap::value_type(nFileId, aSrcDoc));
+    if (!maLinkedDocs.count(nFileId))
+    {
+        // Source document not linked yet.  Link it now.
+        insertExternalFileLink(nFileId, aFilter);
+        maLinkedDocs.insert(nFileId);
+    }
+    SfxObjectShell* p = aSrcDoc.maShell;
+    ScDocument* pSrcDoc = static_cast<ScDocShell*>(p)->GetDocument();
+
+    // Store all its table names.  Excel exporter needs this info.
+    vector<String> aTableNames;
+    SCTAB nCount = pSrcDoc->GetTableCount();
+    aTableNames.reserve(nCount);
+    for (SCTAB i = 0; i < nCount; ++i)
+    {
+        String aTabName;
+        pSrcDoc->GetName(i, aTabName);
+        aTableNames.push_back(aTabName);
+    }
+    DocCache* pCache = getDocumentCache(nFileId);
+    pCache->maTableNames.swap(aTableNames);
+
+    return pSrcDoc;
+}
+
+SfxObjectShellRef ScExternalRefManager::loadSrcDocument(const String& rFile, String& rFilter)
+{
+    String aOptions;
+    ScDocumentLoader::GetFilterName(rFile, rFilter, aOptions, true, false);
+    const SfxFilter* pFilter = ScDocShell::Factory().GetFilterContainer()->GetFilter4FilterName(rFilter);
+
+    SfxItemSet* pSet = new SfxAllItemSet(SFX_APP()->GetPool());
+    if (aOptions.Len())
+        pSet->Put(SfxStringItem(SID_FILE_FILTEROPTIONS, aOptions));
+
+    auto_ptr<SfxMedium> pMedium(new SfxMedium(rFile, STREAM_STD_READ, FALSE, pFilter, pSet));
+    if (pMedium->GetError() != ERRCODE_NONE)
+        return NULL;
+
+    pMedium->UseInteractionHandler(false);
+
+    ScDocShell* pNewShell = new ScDocShell(SFX_CREATE_MODE_INTERNAL);
+    SfxObjectShellRef aRef = pNewShell;
+
+    // increment the recursive link count of the source document.
+    ScExtDocOptions* pExtOpt = mpDoc->GetExtDocOptions();
+    sal_uInt32 nLinkCount = pExtOpt ? pExtOpt->GetDocSettings().mnLinkCnt : 0;
+    ScDocument* pSrcDoc = pNewShell->GetDocument();
+    ScExtDocOptions* pExtOptNew = pSrcDoc->GetExtDocOptions();
+    if (!pExtOptNew)
+    {
+        pExtOptNew = new ScExtDocOptions;
+        pSrcDoc->SetExtDocOptions(pExtOptNew);
+    }
+    pExtOptNew->GetDocSettings().mnLinkCnt = nLinkCount + 1;
+
+    pNewShell->DoLoad(pMedium.release());
+    return aRef;
+}
+
+void ScExternalRefManager::insertExternalFileLink(sal_uInt16 nFileId, const String& rFilterName)
+{
+    SvxLinkManager* pLinkMgr = mpDoc->GetLinkManager();
+    ScExternalRefLink* pLink = new ScExternalRefLink(mpDoc, nFileId, rFilterName);
+    const String* pFileName = getExternalFileName(nFileId);
+    DBG_ASSERT(pFileName, "ScExternalRefManager::insertExternalFileLink: file name pointer is NULL");
+    pLinkMgr->InsertFileLink(*pLink, OBJECT_CLIENT_FILE, *pFileName, &rFilterName);
+
+    pLink->SetDoReferesh(false);
+    pLink->Update();
+    pLink->SetDoReferesh(true);
+}
+
+bool ScExternalRefManager::compileTokensByCell(const ScAddress& rCell)
+{
+    String aStr;
+    rCell.Format(aStr, SCA_ABS_3D);
+    fprintf(stdout, "ScExternalRefManager::compileTokensByCell: --begin (cell = '%s')\n", 
+            rtl::OUStringToOString(aStr, RTL_TEXTENCODING_UTF8).getStr());
+
+    ScBaseCell* pCell;
+    mpDoc->GetCell(rCell.Col(), rCell.Row(), rCell.Tab(), pCell);
+
+    if (!pCell || pCell->GetCellType() != CELLTYPE_FORMULA)
+    {
+        fprintf(stdout, "ScExternalRefManager::compileTokensByCell: --end (not a valid formula cell)\n");
+        return false;
+    }
+
+    ScFormulaCell* pFC = static_cast<ScFormulaCell*>(pCell);
+
+    // Check to make sure the cell really contains ocExternalName.
+    bool bCompile = false;
+    ScTokenArray* pCode = pFC->GetCode();
+    pCode->Reset();
+    for (ScToken* p = pCode->First(); p; p = pCode->Next())
+    {
+        // External names, external cell and range references all have a 
+        // ocExternalName token.
+        if (p->GetOpCode() == ocExternalName)
+        {
+            bCompile = true;
+            break;
+        }
+    }
+    if (!bCompile)
+    {
+        fprintf(stdout, "ScExternalRefManager::compileTokensByCell: --end (cell doesn't contain any external name)\n");
+        return false;
+    }
+
+    pFC->SetCompile(true);
+    pFC->CompileTokenArray();
+    pFC->SetDirty();
+
+    fprintf(stdout, "ScExternalRefManager::compileTokensByCell: --end (cell re-compiled)\n");
+    return true;
+}
+
+void ScExternalRefManager::convertToAbsName(String& rFile) const
+{
+    SfxObjectShell* pDocShell = mpDoc->GetDocumentShell();
+    rFile = ScGlobal::GetAbsDocName(rFile, pDocShell);
+}
+
+sal_uInt16 ScExternalRefManager::getExternalFileId(const String& rFile)
+{
+    using namespace std;
+
+    vector<String>::const_iterator itrBeg = maFileNames.begin(), itrEnd = maFileNames.end();
+    vector<String>::const_iterator itr = find(itrBeg, itrEnd, rFile);
+    if (itr != itrEnd)
+    {
+        size_t nId = distance(itrBeg, itr);
+        return static_cast<sal_uInt16>(nId);
+    }
+
+    maFileNames.push_back(rFile);
+    return static_cast<sal_uInt16>(maFileNames.size() - 1);
+}
+
+const String* ScExternalRefManager::getExternalFileName(sal_uInt16 nFileId) const
+{
+    if (nFileId >= maFileNames.size())
+        return NULL;
+
+    return &maFileNames[nFileId];
+}
+
+const String* ScExternalRefManager::getExternalTableName(sal_uInt16 nFileId, SCTAB nTabId)
+{
+    if (nFileId >= maFileNames.size())
+        return NULL;
+
+    DocCache* pCache = getDocumentCache(nFileId);
+    if (nTabId >= pCache->maTableNames.size())
+        return NULL;
+
+    return &pCache->maTableNames[nTabId];
+}
+
+SCTAB ScExternalRefManager::getExternalTableId(sal_uInt16 nFileId, const String& rTabName)
+{
+    vector<String>& rNames = getDocumentCache(nFileId)->maTableNames;
+    vector<String>::iterator itrBeg = rNames.begin(), itrEnd = rNames.end();
+    vector<String>::iterator itr = find(itrBeg, itrEnd, rTabName);
+    if (itr != itrEnd)
+        // found in cache
+        return static_cast<SCTAB>(distance(itrBeg, itr));
+
+    // Loading the source document resets the table name vector.
+    ScDocument* pSrcDoc = getSrcDocument(nFileId);
+    if (!pSrcDoc)
+        // source document could not be loaded.
+        return -1;
+
+    itrBeg = rNames.begin();
+    itrEnd = rNames.end();
+    itr = find(itrBeg, itrEnd, rTabName);
+    if (itr != itrEnd)
+        // found in the source document
+        return static_cast<SCTAB>(distance(itrBeg, itr));
+
+    return -1;
+}
+
+template<typename MapContainer>
+static void lcl_removeByFileId(sal_uInt16 nFileId, MapContainer& rMap)
+{
+    typename MapContainer::iterator itr = rMap.find(nFileId);
+    if (itr != rMap.end())
+        rMap.erase(itr);
+}
+
+void ScExternalRefManager::refreshNames(sal_uInt16 nFileId)
+{
+    fprintf(stdout, "ScExternalRefManager::refreshNames: --begin\n");
+
+    removeSrcDocument(nFileId, false);
+
+    // Update all cells containing names from this source document.
+    refreshAllReferencingCells(nFileId);
+    fprintf(stdout, "ScExternalRefManager::refreshNames: --end\n");
+}
+
+void ScExternalRefManager::switchSrcFile(sal_uInt16 nFileId, const String& rNewFile)
+{
+    const String* pOldFile = getExternalFileName(nFileId);
+    fprintf(stdout, "ScExternalRefManager::switchSrcFile: --begin (old file = '%s'; new file = '%s')\n",
+            rtl::OUStringToOString(*pOldFile, RTL_TEXTENCODING_UTF8).getStr(), 
+            rtl::OUStringToOString(rNewFile, RTL_TEXTENCODING_UTF8).getStr());
+
+    maFileNames[nFileId] = rNewFile;
+    refreshNames(nFileId);
+}
+
+void ScExternalRefManager::removeSrcDocument(sal_uInt16 nFileId, bool bBreakLink)
+{
+    const String* pFile = getExternalFileName(nFileId);
+    if (pFile)
+    {
+        fprintf(stdout, "ScExternalRefManager::removeSrcFile: --begin (file = '%s')\n", 
+                rtl::OUStringToOString(*pFile, RTL_TEXTENCODING_UTF8).getStr());
+    }
+
+    lcl_removeByFileId(nFileId, maCachedDocContents);
+    lcl_removeByFileId(nFileId, maDocShells);
+
+    if (bBreakLink)
+        maLinkedDocs.erase(nFileId);
+
+    if (maDocShells.empty())
+        maSrcDocTimer.Stop();
+
+    fprintf(stdout, "ScExternalRefManager::removeSrcFile: --end\n");
+}
+
+void ScExternalRefManager::clear()
+{
+    DocShellMap::iterator itrEnd = maDocShells.end();
+    for (DocShellMap::iterator itr = maDocShells.begin(); itr != itrEnd; ++itr)
+        itr->second.maShell->DoClose();
+
+    maDocShells.clear();
+    maSrcDocTimer.Stop();
+}
+
+void ScExternalRefManager::purgeStaleSrcDocument(sal_Int32 nTimeOut)
+{
+    DocShellMap aNewDocShells;
+    DocShellMap::iterator itr = maDocShells.begin(), itrEnd = maDocShells.end();
+    for (; itr != itrEnd; ++itr)
+    {
+        // in 100th of a second.
+        sal_Int32 nSinceLastAccess = (Time() - itr->second.maLastAccess).GetTime(); 
+//      const String* pStr = getExternalFileName(itr->first);
+//      if (pStr)
+//          fprintf(stdout, "ScExternalRefManager::purgeStaleSrcDocument:   file = '%s'; since last access = %ld\n",
+//                  rtl::OUStringToOString(*pStr, RTL_TEXTENCODING_UTF8).getStr(), nSinceLastAccess);
+
+        if (nSinceLastAccess < nTimeOut)
+            aNewDocShells.insert(*itr);
+    }
+    maDocShells.swap(aNewDocShells);
+
+    if (maDocShells.empty())
+        maSrcDocTimer.Stop();
+}
+
+IMPL_LINK(ScExternalRefManager, TimeOutHdl, AutoTimer*, pTimer)
+{
+    if (pTimer == &maSrcDocTimer)
+        purgeStaleSrcDocument(SRCDOC_LIFE_SPAN);
+
+    return 0;
+}
+
diff --git sc/source/ui/docshell/makefile.mk sc/source/ui/docshell/makefile.mk
index db83fec..6286dfb 100644
--- sc/source/ui/docshell/makefile.mk
+++ sc/source/ui/docshell/makefile.mk
@@ -53,6 +53,7 @@ CXXFILES = \
         docsh6.cxx 	\
         docsh7.cxx 	\
         docsh8.cxx 	\
+        externalrefmgr.cxx \
         tablink.cxx 	\
         arealink.cxx 	\
         dbdocfun.cxx 	\
@@ -79,6 +80,7 @@ SLOFILES =  \
         $(SLO)$/docsh6.obj   	\
         $(SLO)$/docsh7.obj   	\
         $(SLO)$/docsh8.obj   	\
+        $(SLO)$/externalrefmgr.obj \
         $(SLO)$/tablink.obj   	\
         $(SLO)$/arealink.obj   	\
         $(SLO)$/dbdocfun.obj 	\
@@ -101,6 +103,7 @@ EXCEPTIONSFILES= \
         $(SLO)$/docsh3.obj	\
         $(SLO)$/docsh4.obj \
         $(SLO)$/docsh8.obj \
+        $(SLO)$/externalrefmgr.obj \
         $(SLO)$/dbdocimp.obj
 
 SRS1NAME=$(TARGET)
@@ -117,6 +120,7 @@ LIB1OBJFILES =  \
         $(SLO)$/docsh6.obj   	\
         $(SLO)$/docsh7.obj   	\
         $(SLO)$/docsh8.obj   	\
+        $(SLO)$/externalrefmgr.obj \
         $(SLO)$/tablink.obj   	\
         $(SLO)$/arealink.obj   	\
         $(SLO)$/dbdocfun.obj 	\
diff --git sc/source/ui/view/viewfun3.cxx sc/source/ui/view/viewfun3.cxx
index e42ed5d..e660e1c 100644
--- sc/source/ui/view/viewfun3.cxx
+++ sc/source/ui/view/viewfun3.cxx
@@ -212,6 +212,31 @@
 
 using namespace com::sun::star;
 
+
+namespace {
+
+#include <string>
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+    }
+
+    ~StackPrinter()
+    {
+        fprintf(stdout, "%s: --end\n", msMsg.c_str());
+    }
+
+private:
+    ::std::string msMsg;
+};
+
+}
+
 // STATIC DATA ---------------------------------------------------------------
 
 
@@ -748,6 +773,7 @@ BOOL ScViewFunc::PasteFromClip( USHORT nFlags, ScDocument* pClipDoc,
 									InsCellCmd eMoveMode, USHORT nUndoExtraFlags,
 									BOOL bAllowDialogs )
 {
+    StackPrinter aStack("ScViewFunc::PasteFromClip");
 	if (!pClipDoc)
 	{
 		DBG_ERROR("PasteFromClip: pClipDoc=0 not allowed");
