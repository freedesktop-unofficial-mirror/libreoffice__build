diff -u -r -x cc-nptl -x build-dir -x '*.orig' -x texis -x Makeconfig -x version.h -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' /usr/src/packages/BUILD/binutils-2.17.50/bfd/elf-bfd.h binutils-2.17.50/bfd/elf-bfd.h
--- /usr/src/packages/BUILD/binutils-2.17.50/bfd/elf-bfd.h	2007-07-19 09:51:03.000000000 +0100
+++ binutils-2.17.50/bfd/elf-bfd.h	2008-01-09 12:42:12.000000000 +0000
@@ -1787,6 +1787,12 @@
 extern void _bfd_elf_init_2_index_sections
   (bfd *, struct bfd_link_info *);
 
+/* elf-vtreloc */
+extern bfd_boolean _bfd_elf_vtreloc_accumulate
+  (bfd *, struct bfd_link_info *);
+extern bfd_boolean _bfd_elf_vtreloc_fill
+  (bfd *, struct bfd_link_info *);
+
 extern bfd_boolean _bfd_elfcore_make_pseudosection
   (bfd *, char *, size_t, ufile_ptr);
 extern char *_bfd_elfcore_strndup
diff -u -r -x cc-nptl -x build-dir -x '*.orig' -x texis -x Makeconfig -x version.h -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' /usr/src/packages/BUILD/binutils-2.17.50/bfd/elf.c binutils-2.17.50/bfd/elf.c
--- /usr/src/packages/BUILD/binutils-2.17.50/bfd/elf.c	2007-07-24 10:50:16.000000000 +0100
+++ binutils-2.17.50/bfd/elf.c	2008-01-09 12:44:13.000000000 +0000
@@ -1240,6 +1240,7 @@
 	    case DT_USED: name = "USED"; break;
 	    case DT_FILTER: name = "FILTER"; stringp = TRUE; break;
 	    case DT_GNU_HASH: name = "GNU_HASH"; break;
+        case DT_SUSE_VTRELOC: name = "SUSE_VTRELOC"; break;
 	    }
 
 	  fprintf (f, "  %-11s ", name);
diff -u -r -x cc-nptl -x build-dir -x '*.orig' -x texis -x Makeconfig -x version.h -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' /usr/src/packages/BUILD/binutils-2.17.50/bfd/elflink.c binutils-2.17.50/bfd/elflink.c
--- /usr/src/packages/BUILD/binutils-2.17.50/bfd/elflink.c	2007-07-25 09:33:23.000000000 +0100
+++ binutils-2.17.50/bfd/elflink.c	2008-01-09 12:46:24.000000000 +0000
@@ -148,6 +148,34 @@
   return TRUE;
 }
 
+static int
+_bfd_elf_create_vtreloc_sections (struct bfd_link_info *info)
+{
+  bfd *abfd;
+  asection *s;
+  flagword flags;
+  const struct elf_backend_data *bed;
+
+  abfd = elf_hash_table (info)->dynobj;
+  bed = get_elf_backend_data (abfd);
+  flags = bed->dynamic_sec_flags;
+
+  s = bfd_make_section (abfd, ".suse.vtrelocs");
+  if (s == NULL
+      || ! bfd_set_section_flags (abfd, s, flags | SEC_READONLY)
+      || ! bfd_set_section_alignment (abfd, s, 2))
+    return FALSE;
+  s = bfd_make_section (abfd, ".rel.suse.vtrelocs");
+  if (s == NULL
+      || ! bfd_set_section_flags (abfd, s, flags | SEC_READONLY
+                                  | SEC_HAS_CONTENTS
+                                  | SEC_IN_MEMORY | SEC_LINKER_CREATED)
+      || ! bfd_set_section_alignment (abfd, s, 2))
+      return FALSE;
+
+  return TRUE;
+}
+
 /* Create some sections which will be filled in with dynamic linking
    information.  ABFD is an input file which requires dynamic sections
    to be created.  The dynamic sections take up virtual memory space
@@ -2266,6 +2294,7 @@
 	return FALSE;
 
       elf_section_data (o)->rel_hashes = p;
+      fprintf (stderr, "allocated rel_hashes for asec %p\n", o);
     }
 
   return TRUE;
@@ -3291,7 +3320,24 @@
   bed = get_elf_backend_data (abfd);
 
   if ((abfd->flags & DYNAMIC) == 0)
+  {
+    asection *vtrel_sec;
+
     dynamic = FALSE;
+
+    vtrel_sec = bfd_get_section_by_name (abfd, ".vtrelocs");
+    if (vtrel_sec)
+      {
+        fprintf (stderr, "Has vtrelocs ! %d\n", (int)vtrel_sec->size);
+        if (!info->vtreloc)
+          {
+            info->vtreloc = 1;
+            if (!_bfd_elf_create_vtreloc_sections (info))
+              goto error_return;
+          }
+        vtrel_sec->flags |= SEC_EXCLUDE;
+      }
+  }
   else
     {
       dynamic = TRUE;
@@ -3603,6 +3649,7 @@
   else
     hdr = &elf_tdata (abfd)->dynsymtab_hdr;
 
+/* FIXME: cut/paste this ! ....*/
   symcount = hdr->sh_size / bed->s->sizeof_sym;
 
   /* The sh_info field of the symtab header tells us where the
@@ -4978,8 +5025,14 @@
   switch (bfd_get_format (abfd))
     {
     case bfd_object:
+      fprintf (stderr, "add_symbols from %s object '%s'\n",
+               abfd->flags & DYNAMIC ? "dynamic" : "static",
+               abfd->filename);
+      // from an .o or .so file ...
       return elf_link_add_object_symbols (abfd, info);
     case bfd_archive:
+      fprintf (stderr, "add_symbols from archive '%s'\n", abfd->filename);
+      // from a .a file ...
       return elf_link_add_archive_symbols (abfd, info);
     default:
       bfd_set_error (bfd_error_wrong_format);
@@ -5372,6 +5425,8 @@
 	}
     }
 
+  _bfd_elf_vtreloc_accumulate (output_bfd, info);
+
   /* Any syms created from now on start with -1 in
      got.refcount/offset and plt.refcount/offset.  */
   elf_hash_table (info)->init_got_refcount
@@ -7159,6 +7214,8 @@
   size_t symbuf_size;
   /* And same for symshndxbuf.  */
   size_t shndxbuf_size;
+  /* .suse.vtreloc section.  */
+  asection *vtreloc_sec;
 };
 
 /* This struct is used to pass information to elf_link_output_extsym.  */
@@ -7902,6 +7959,8 @@
   bfd_vma r_type_mask;
   int r_sym_shift;
 
+  fprintf (stderr, "elf_link_adjust_relocs ... %p\n", rel_hash);
+
   if (rel_hdr->sh_entsize == bed->s->sizeof_rel)
     {
       swap_in = bed->s->swap_reloc_in;
@@ -10038,6 +10097,7 @@
       finfo.dynsym_sec = NULL;
       finfo.hash_sec = NULL;
       finfo.symver_sec = NULL;
+      finfo.vtreloc_sec = NULL;
     }
   else
     {
@@ -10045,6 +10105,7 @@
       finfo.hash_sec = bfd_get_section_by_name (dynobj, ".hash");
       BFD_ASSERT (finfo.dynsym_sec != NULL);
       finfo.symver_sec = bfd_get_section_by_name (dynobj, ".gnu.version");
+      finfo.vtreloc_sec = bfd_get_section_by_name (dynobj, ".suse.vtrelocs");
       /* Note that it is OK if symver_sec is NULL.  */
     }
 
@@ -10104,6 +10165,10 @@
   max_sym_count = 0;
   max_sym_shndx_count = 0;
   merged = FALSE;
+
+  if (dynobj && !info->relocatable)
+    _bfd_elf_vtreloc_fill (finfo.output_bfd, info);
+
   for (o = abfd->sections; o != NULL; o = o->next)
     {
       struct bfd_elf_section_data *esdo = elf_section_data (o);
@@ -10732,6 +10797,10 @@
       if ((o->flags & SEC_RELOC) == 0)
 	continue;
 
+      fprintf (stderr, "rel_hashes for asec %p is %d, %p\n", o,
+               (int)elf_section_data (o)->rel_count,
+               elf_section_data (o)->rel_hashes);
+
       elf_link_adjust_relocs (abfd, &elf_section_data (o)->rel_hdr,
 			      elf_section_data (o)->rel_count,
 			      elf_section_data (o)->rel_hashes);
@@ -10869,6 +10938,9 @@
 	    case DT_VERNEED:
 	      name = ".gnu.version_r";
 	      goto get_vma;
+	    case DT_SUSE_VTRELOC:
+	      name = ".suse.vtreloc";
+	      goto get_vma;
 	    case DT_VERSYM:
 	      name = ".gnu.version";
 	    get_vma:
@@ -11129,6 +11201,8 @@
   bfd_boolean is_eh;
   asection *group_sec;
 
+/* #warning "Do we want to ignore relocs inside .suse.vtreloc ?" */
+
   sec->gc_mark = 1;
 
   /* Mark all the sections in the group.  */
diff -u -r -x cc-nptl -x build-dir -x '*.orig' -x texis -x Makeconfig -x version.h -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' /usr/src/packages/BUILD/binutils-2.17.50/include/bfdlink.h binutils-2.17.50/include/bfdlink.h
--- /usr/src/packages/BUILD/binutils-2.17.50/include/bfdlink.h	2007-07-10 12:10:44.000000000 +0100
+++ binutils-2.17.50/include/bfdlink.h	2008-01-09 12:42:12.000000000 +0000
@@ -293,6 +293,10 @@
   /* TRUE if the new ELF dynamic tags are enabled. */
   unsigned int new_dtags: 1;
 
+  /* TRUE if we want to produce copy-based vtable relocation
+     data. This saves both space and time.  */
+  unsigned int vtreloc: 1;
+
   /* TRUE if non-PLT relocs should be merged into one reloc section
      and sorted so that relocs against the same symbol come together.  */
   unsigned int combreloc: 1;
diff -u -r -x cc-nptl -x build-dir -x '*.orig' -x texis -x Makeconfig -x version.h -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' /usr/src/packages/BUILD/binutils-2.17.50/include/elf/common.h binutils-2.17.50/include/elf/common.h
--- /usr/src/packages/BUILD/binutils-2.17.50/include/elf/common.h	2007-07-10 12:10:44.000000000 +0100
+++ binutils-2.17.50/include/elf/common.h	2008-01-09 13:19:01.000000000 +0000
@@ -624,6 +624,13 @@
 #define DT_USED		0x7ffffffe
 #define DT_FILTER	0x7fffffff
 
+/* SUSE specific pieces - at a random OS specific address, after
+   previous 2 (direct/hashvals) development sections  */
+#define DT_SUSE_LO (0x6cbdd030 + 2)
+#define DT_SUSE_VTRELOC   DT_SUSE_LO
+#define DT_SUSE_HI 0x6cbdd040
+#define DT_SUSE_TAGIDX(tag) (tag - DT_SUSE_LO)
+#define DT_SUSENUM 1
 
 /* Values used in DT_FEATURE .dynamic entry.  */
 #define DTF_1_PARINIT	0x00000001
diff -u -r -x cc-nptl -x build-dir -x '*.orig' -x texis -x Makeconfig -x version.h -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' /usr/src/packages/BUILD/binutils-2.17.50/ld/ldmain.c binutils-2.17.50/ld/ldmain.c
--- /usr/src/packages/BUILD/binutils-2.17.50/ld/ldmain.c	2008-01-09 11:23:41.000000000 +0000
+++ binutils-2.17.50/ld/ldmain.c	2008-01-09 12:42:11.000000000 +0000
@@ -1105,6 +1105,7 @@
 	    asection *section,
 	    bfd_vma value)
 {
+  fprintf (stderr, "add_to_set '%s'\n", h->root.string);
   if (config.warn_constructors)
     einfo (_("%P: warning: global constructor %s used\n"),
 	   h->root.string);
diff -u -r -x cc-nptl -x build-dir -x '*.orig' -x texis -x Makeconfig -x version.h -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' /usr/src/packages/BUILD/binutils-2.17.50/ld/lexsup.c binutils-2.17.50/ld/lexsup.c
--- /usr/src/packages/BUILD/binutils-2.17.50/ld/lexsup.c	2008-01-09 11:23:41.000000000 +0000
+++ binutils-2.17.50/ld/lexsup.c	2008-01-09 12:42:11.000000000 +0000
@@ -157,6 +157,7 @@
   OPTION_ACCEPT_UNKNOWN_INPUT_ARCH,
   OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH,
   OPTION_PIE,
+  OPTION_VTRELOC,
   OPTION_UNRESOLVED_SYMBOLS,
   OPTION_WARN_UNRESOLVED_SYMBOLS,
   OPTION_ERROR_UNRESOLVED_SYMBOLS,
@@ -409,6 +410,8 @@
   { {"no-undefined", no_argument, NULL, OPTION_NO_UNDEFINED},
     '\0', NULL, N_("Do not allow unresolved references in object files"),
     TWO_DASHES },
+  { {"vtreloc", no_argument, NULL, OPTION_VTRELOC},
+    '\0', NULL, N_("Build vtable copy reloc data"), TWO_DASHES },
   { {"allow-shlib-undefined", no_argument, NULL, OPTION_ALLOW_SHLIB_UNDEFINED},
     '\0', NULL, N_("Allow unresolved references in shared libaries"),
     TWO_DASHES },
@@ -1171,6 +1174,9 @@
 	case OPTION_DEFAULT_SCRIPT:
 	  command_line.default_script = optarg;
 	  break;
+	case OPTION_VTRELOC:
+	  link_info.vtreloc = TRUE;
+	  break;
 	case OPTION_SECTION_START:
 	  {
 	    char *optarg2;
diff -u -r -x cc-nptl -x build-dir -x '*.orig' -x texis -x Makeconfig -x version.h -x '*.o' -x '*.1' -x 'Makefile*' -x 'config*' -x libtool -x '*.info' -x '*.tex' /usr/src/packages/BUILD/binutils-2.17.50/ld/scripttempl/elf.sc binutils-2.17.50/ld/scripttempl/elf.sc
--- /usr/src/packages/BUILD/binutils-2.17.50/ld/scripttempl/elf.sc	2007-07-10 12:10:44.000000000 +0100
+++ binutils-2.17.50/ld/scripttempl/elf.sc	2008-01-09 12:42:12.000000000 +0000
@@ -285,6 +285,7 @@
 eval $COMBRELOCCAT <<EOF
   .rel.init     ${RELOCATING-0} : { *(.rel.init) }
   .rela.init    ${RELOCATING-0} : { *(.rela.init) }
+  .rel.suse.vtrelocs     ${RELOCATING-0} : { *(.rel.suse.vtrelocs) }
   .rel.text     ${RELOCATING-0} : { *(.rel.text${RELOCATING+ .rel.text.* .rel.gnu.linkonce.t.*}) }
   .rela.text    ${RELOCATING-0} : { *(.rela.text${RELOCATING+ .rela.text.* .rela.gnu.linkonce.t.*}) }
   .rel.fini     ${RELOCATING-0} : { *(.rel.fini) }
@@ -321,7 +322,7 @@
     {
 EOF
 sed -e '/^[ 	]*[{}][ 	]*$/d;/:[ 	]*$/d;/\.rela\./d;s/^.*: { *\(.*\)}$/      \1/' $COMBRELOC
-cat <<EOF
+cat <<EOF 
     }
   .rela.dyn     ${RELOCATING-0} :
     {
@@ -410,6 +411,13 @@
   ${SMALL_DATA_DTOR-${RELOCATING+${DTOR}}}
   .jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }
 
+  /* Virtual table copy relocation tables */
+  __vtrelocs = .;
+  .suse.vtrelocs  :
+  {
+    KEEP (*(.suse.vtrelocs))
+  }
+
   ${RELOCATING+${DATARELRO}}
   ${OTHER_RELRO_SECTIONS}
   ${TEXT_DYNAMIC-${DYNAMIC}}
