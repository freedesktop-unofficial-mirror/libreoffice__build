--- svx/source/msfilter/svxmsbas.cxx.bak	2007-09-03 13:31:10.000000000 +0800
+++ svx/source/msfilter/svxmsbas.cxx	2007-08-31 01:39:01.000000000 +0800
@@ -88,6 +88,7 @@ using namespace com::sun::star::awt;
 
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/script/XLibraryContainer.hpp>
+#include <com/sun/star/beans/StringPair.hpp>
 using namespace com::sun::star::container;
 using namespace com::sun::star::script;
 using namespace com::sun::star::uno;
@@ -341,6 +342,7 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
                 rtl::OUString sClassRem( RTL_CONSTASCII_USTRINGPARAM( "Rem Attribute VBA_ModuleType=" ) );
 
                 rtl::OUString modeTypeComment;
+                beans::StringPair sPair;
 
                 switch( mType )
                 {
@@ -375,6 +377,8 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
 					modeTypeComment = modeTypeComment + sVBAOption;
 					if ( mType == Class )
 						modeTypeComment = modeTypeComment + sClassOption;
+                    else if ( mType == Document )
+                        sPair.First = rtl::OUString::createFromAscii( "Document" );
 
 				}
 
@@ -435,12 +439,19 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
 						aSource += rtl::OUString::createFromAscii("\nEnd Sub");
 				}
 				::rtl::OUString aModName( sModule );
-				if ( aSource.getLength() )
+				//if ( aSource.getLength() )
 				{
 					aSource = modeTypeComment + aSource;
 
 					Any aSourceAny;
-					aSourceAny <<= aSource;
+                    if ( sPair.First.getLength() )
+                    {
+                        sPair.Second = aSource;
+                        aSourceAny <<= sPair;
+                    }
+                    else 
+                        aSourceAny <<= aSource;
+
 					if( xLib->hasByName( aModName ) )
 						xLib->replaceByName( aModName, aSourceAny );
 					else
--- basctl/source/basicide/scriptdocument.cxx.bak	2007-09-03 13:50:05.000000000 +0800
+++ basctl/source/basicide/scriptdocument.cxx	2007-09-04 16:59:01.000000000 +0800
@@ -62,6 +62,9 @@
 #ifndef _COM_SUN_STAR_DOCUMENT_MACROEXECMODE_HPP_
 #include <com/sun/star/document/MacroExecMode.hpp>
 #endif
+#ifndef _COM_SUN_STAR_BEAMS_STRINGPAIR_HPP_
+#include <com/sun/star/beans/StringPair.hpp>
+#endif
 /** === end UNO includes === **/
 
 #include <sfx2/objsh.hxx>
@@ -99,6 +102,7 @@ namespace basctl
     using ::com::sun::star::script::XLibraryContainer;
     using ::com::sun::star::uno::UNO_QUERY_THROW;
     using ::com::sun::star::beans::XPropertySetInfo;
+    using ::com::sun::star::beans::StringPair;
     using ::com::sun::star::uno::Exception;
     using ::com::sun::star::container::XNameContainer;
     using ::com::sun::star::container::NoSuchElementException;
@@ -1102,7 +1106,20 @@ namespace basctl
         Any aCode;
         if ( !m_pImpl->getModuleOrDialog( E_SCRIPTS, _rLibName, _rModName, aCode ) )
             return false;
-        OSL_VERIFY( aCode >>= _out_rModuleSource );
+        StringPair sPair;
+        rtl::OUString sMod;
+        rtl::OUString sModType;
+        if ( aCode >>= sPair )
+        {
+            sModType = sPair.First;
+            sMod = sPair.Second;
+        }
+        else
+        {
+            aCode >>= sMod;
+        }
+        Any aMod(sMod);
+        OSL_VERIFY( aMod >>= _out_rModuleSource );
         return true;
     }
 
--- basic/source/uno/namecont.cxx.bak	2007-08-28 14:36:26.000000000 +0800
+++ basic/source/uno/namecont.cxx	2007-08-28 14:38:43.000000000 +0800
@@ -137,8 +137,9 @@
 #ifndef _CPPUHELPER_EXC_HLP_HXX_
 #include <cppuhelper/exc_hlp.hxx>
 #endif
+#include <com/sun/star/beans/StringPair.hpp>
 #include <basic/sbmod.hxx>
-
+#include <comphelper/anytostring.hxx>
 
 namespace basic
 {
@@ -217,10 +218,10 @@ void NameContainer::replaceByName( const
 	throw(IllegalArgumentException, NoSuchElementException, WrappedTargetException, RuntimeException)
 {
 	Type aAnyType = aElement.getValueType();
-	if( mType != aAnyType )
+    if( mType != aAnyType && aAnyType != getCppuType( static_cast< StringPair* >( NULL ) ) )
 		throw IllegalArgumentException();
 
-	NameContainerNameMap::iterator aIt = mHashMap.find( aName );
+    NameContainerNameMap::iterator aIt = mHashMap.find( aName );
 	if( aIt == mHashMap.end() )
 	{
 		throw NoSuchElementException();
@@ -259,7 +260,7 @@ void NameContainer::insertByName( const 
 	throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
 {
 	Type aAnyType = aElement.getValueType();
-	if( mType != aAnyType )
+    if( mType != aAnyType && aAnyType != getCppuType( static_cast< StringPair* >( NULL ) ) )
 		throw IllegalArgumentException();
 
 	NameContainerNameMap::iterator aIt = mHashMap.find( aName );
--- basic/source/runtime/step2.cxx.bak	2007-08-28 14:11:17.000000000 +0800
+++ basic/source/runtime/step2.cxx	2007-08-28 14:13:21.000000000 +0800
@@ -61,56 +61,6 @@ using com::sun::star::uno::Reference;
 
 SbxVariable* getVBAConstant( const String& rName );
 
-const static String aThisComponent( RTL_CONSTASCII_USTRINGPARAM("ThisComponent") );
-const static String aVBAHook( RTL_CONSTASCII_USTRINGPARAM( "VBAGlobals" ) );
-//  i#i68894# 
-SbxArray* getVBAGlobals( )
-{
-	static SbxArrayRef pArray;
-	static bool isInitialised = false;
-	if ( isInitialised )
-		return pArray;
-	Reference < XComponentContext > xCtx;
-	Reference < XPropertySet > xProps(
-	::comphelper::getProcessServiceFactory(), UNO_QUERY_THROW );
-	xCtx.set( xProps->getPropertyValue( rtl::OUString( 
-		RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), 
-			UNO_QUERY_THROW );
-	SbUnoObject dGlobs( String( RTL_CONSTASCII_USTRINGPARAM("ExcelGlobals") ), xCtx->getValueByName( ::rtl::OUString::createFromAscii( "/singletons/org.openoffice.vba.theGlobals") ) );
-
-	SbxVariable *vba = dGlobs.Find( String( RTL_CONSTASCII_USTRINGPARAM("getGlobals") ) , SbxCLASS_DONTCARE );
-
-	if ( vba )
-	{
-		pArray = static_cast<SbxArray *>(vba->GetObject());
-		isInitialised = true;
-		return pArray;
-	}
-	return NULL;
-}
-
-//  i#i68894# 
-SbxVariable* VBAFind( const String& rName, SbxClassType t )
-{
-	if( rName == aThisComponent )
-		return NULL;
-
-	SbxArray *pVBAGlobals = getVBAGlobals( );
-	for (USHORT i = 0; pVBAGlobals && i < pVBAGlobals->Count(); i++)
-	{
-		SbxVariable *pElem = pVBAGlobals->Get( i );
-		if (!pElem || !pElem->IsObject())
-			continue;
-		SbxObject *pVba = static_cast<SbxObject *>(pElem->GetObject());
-		SbxVariable *pVbaVar = pVba ? pVba->Find( rName, t ) : NULL;
-		if( pVbaVar )
-		{
-			return pVbaVar;
-		}
-	}
-	return NULL;
-
-}
 
 // Suchen eines Elements
 // Die Bits im String-ID:
@@ -130,6 +80,7 @@ SbxVariable* SbiRuntime::FindElement
 		BOOL bFatalError = FALSE;
 		SbxDataType t = (SbxDataType) nOp2;
 		String aName( pImg->GetString( static_cast<short>( nOp1 & 0x7FFF ) ) );
+        OSL_TRACE("FindElement %s, bLocal %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), bLocal );
 		bool bIsVBAInterOp = SbiRuntime::isVBAEnabled(); 
 		if( bIsVBAInterOp )
 		{
@@ -187,7 +138,7 @@ SbxVariable* SbiRuntime::FindElement
 				if ( bVBAEnabled )
 				{
 					// Try Find in VBA symbols space
-					pElem = VBAFind( aName, SbxCLASS_DONTCARE );
+                    pElem = rBasic.VBAFind( aName, SbxCLASS_DONTCARE );
 					if ( pElem )
 						bSetName = false; // don't overwrite uno name
 					else
--- basic/source/classes/sbxmod.cxx.bak	2007-08-28 12:01:38.000000000 +0800
+++ basic/source/classes/sbxmod.cxx	2007-09-05 23:56:14.000000000 +0800
@@ -51,6 +51,7 @@
 #include <tools/shl.hxx>
 #endif
 #include <basic/sbx.hxx>
+#include <basic/sbobjmod.hxx>
 #include "sb.hxx"
 #include <sbjsmeth.hxx>
 #include "sbjsmod.hxx"
@@ -88,6 +89,7 @@ TYPEINIT1(SbProperty,SbxProperty)
 TYPEINIT1(SbProcedureProperty,SbxProperty)
 TYPEINIT1(SbJScriptModule,SbModule)
 TYPEINIT1(SbJScriptMethod,SbMethod)
+TYPEINIT1(SbObjModule,SbModule)
 
 SV_DECL_VARARR(SbiBreakpoints,USHORT,4,4)
 SV_IMPL_VARARR(SbiBreakpoints,USHORT)
@@ -1902,7 +1904,144 @@ void SyntaxHighlighter::getHighlightPort
 	m_pSimpleTokenizer->getHighlightPortions( nLine, rLine, portions );
 }
 
+#include <org/openoffice/vba/XGlobals.hpp>
+#include <org/openoffice/excel/XWorksheets.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <comphelper/processfactory.hxx>
+com::sun::star::uno::Reference< org::openoffice::vba::XGlobals > getVBAGlob()
+{
+   com::sun::star::uno::Reference < com::sun::star::uno::XComponentContext > xCtx;
+   com::sun::star::uno::Reference < com::sun::star::beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), com::sun::star::uno::UNO_QUERY_THROW );
+
+   com::sun::star::uno::Reference< com::sun::star::lang::XMultiComponentFactory > xSMgr( xProps, com::sun::star::uno::UNO_QUERY_THROW );
+
+   xCtx.set( xProps->getPropertyValue( rtl::OUString(
+       RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))),
+           com::sun::star::uno::UNO_QUERY_THROW );
+   com::sun::star::uno::Reference< org::openoffice::vba::XGlobals > xGlobs( xSMgr->createInstanceWithContext( ::rtl::OUString::createFromAscii( "org.openoffice.vba.Globals"), xCtx ), com::sun::star::uno::UNO_QUERY_THROW );
+   return xGlobs;
+}
+/////////////////////////////////////////////////////////////////////////
+SbObjModule::SbObjModule( const String& rName, StarBASIC* pBasic )
+   :SbModule( rName ), pDocObject( NULL )
+{
+    InitObject( rName );
+}
+/*
+SbObjModule::~SbObjModule()
+{
+    if ( pDocObject )
+        delete pDocObject;
+}
+*/
+/*
+BOOL SbObjModule::LoadData( SvStream&, USHORT )
+{
+   return FALSE;
+}
+
+BOOL SbObjModule::StoreData( SvStream& ) const
+{
+   return FALSE;
+}
+*/
+SbxVariable*
+SbObjModule::GetObject()
+{
+    return Find( GetName(), SbxCLASS_DONTCARE );
+}
 
+SbxVariable*
+SbObjModule::Find( const XubString& rName, SbxClassType t )
+{
+   OSL_TRACE("SbObjectModule find for %s", rtl::OUStringToOString(  rName, RTL_TEXTENCODING_UTF8 ).getStr() );
+    // should init pDocObject when first search.
+   SbxVariable* pVar = SbModule::Find( rName, t );
+   if ( !pDocObject )
+        InitObject( );
+   if ( !pVar )
+   {
+       OSL_TRACE("Not found in derived module " );
+       if ( !pVar && pDocObject)
+       {
+           OSL_TRACE("!!!!try to find in derived module " );
+           pVar = pDocObject->Find( rName, t );
+           // make private
+           if ( pVar )
+           {
+               OSL_TRACE("found in uno (psuedo-base) object" );
+               pVar->SetFlag( SBX_PRIVATE );
+           }
+           else
+               OSL_TRACE("NOT found in uno (psuedo-base) object" );
+       }
+   }
+   else
+       OSL_TRACE("! found in (normal) module " );
+   return pVar;
+}
+void 
+SbObjModule::InitObject( )
+{
+    InitObject( GetName() );
+}
+void 
+SbObjModule::InitObject( const XubString& rName )
+{
+    try
+    {
+        com::sun::star::uno::Reference< org::openoffice::vba::XGlobals > xGlobs = getVBAGlob();
+        com::sun::star::uno::Reference< org::openoffice::excel::XWorkbook > xWorkbook = xGlobs->getActiveWorkbook();
+        String sGlobCodeName = xWorkbook->getCodeName();
+        OSL_TRACE("globcodename is %s", rtl::OUStringToOString(  sGlobCodeName, RTL_TEXTENCODING_UTF8 ).getStr() );
+        if ( sGlobCodeName == rName )
+        {
+            pDocObject = new SbUnoObject( rName, com::sun::star::uno::makeAny( xWorkbook ) );
+            return;
+        }
+        com::sun::star::uno::Any aIndex;
+        com::sun::star::uno::Reference< org::openoffice::excel::XWorksheets > xWorksheets( xWorkbook->Sheets( aIndex ), com::sun::star::uno::UNO_QUERY_THROW );
+        sal_Int32 nCount = xWorksheets->getCount();
+        for ( sal_Int32 i = 1; i <= nCount; i++ )
+        {
+            com::sun::star::uno::Reference< org::openoffice::excel::XWorksheet > xWorksheet( xWorkbook->Sheets( com::sun::star::uno::makeAny( i ) ), com::sun::star::uno::UNO_QUERY_THROW );
+            String sCodeName = xWorksheet->getCodeName();
+            OSL_TRACE("sheet %s 's codename is %s", rtl::OUStringToOString(  xWorksheet->getName(), RTL_TEXTENCODING_UTF8 ).getStr(), rtl::OUStringToOString(  sCodeName, RTL_TEXTENCODING_UTF8 ).getStr() );
+            if ( sCodeName == rName )
+            {
+                pDocObject = new SbUnoObject( rName, com::sun::star::uno::makeAny( xWorksheet ) );
+                return;
+            }
+        }
+    }catch( com::sun::star::uno::RuntimeException e )
+    {
+        OSL_TRACE("Object is not exist." );
+    }
+}
+void
+SbObjModule::SetCodeName( const XubString& rName )
+{
+    if ( rName == GetName() )
+        return;
+    if ( !pDocObject )
+        InitObject( );
+    if ( pDocObject )
+    {
+        SbUnoObject* pUnoObj = PTR_CAST(SbUnoObject,(SbxObject*)pDocObject);
+        com::sun::star::uno::Reference< org::openoffice::excel::XWorksheet > xWorksheet( pUnoObj->getUnoAny(), com::sun::star::uno::UNO_QUERY );
+        if ( xWorksheet.is() )
+        {
+            OSL_TRACE("Worksheet's new codename is %s", rtl::OUStringToOString(  rName, RTL_TEXTENCODING_UTF8 ).getStr() );
+            return;
+        }
+        com::sun::star::uno::Reference< org::openoffice::excel::XWorkbook > xWorkbook( pUnoObj->getUnoAny(), com::sun::star::uno::UNO_QUERY );
+        if ( xWorkbook.is() )
+        {
+            OSL_TRACE("Workbook's new codename is %s", rtl::OUStringToOString(  rName, RTL_TEXTENCODING_UTF8 ).getStr() );
+            return;
+        }
+    }
+}
 /////////////////////////////////////////////////////////////////////////
 // Implementation SbJScriptModule (Basic-Modul fuer JavaScript-Sourcen)
 SbJScriptModule::SbJScriptModule( const String& rName )
--- basic/source/classes/sb.cxx.bak	2007-08-28 14:05:01.000000000 +0800
+++ basic/source/classes/sb.cxx	2007-09-05 21:23:24.000000000 +0800
@@ -70,6 +70,7 @@
 #include "disas.hxx"
 #include "runtime.hxx"
 #include <basic/sbuno.hxx>
+#include <basic/sbobjmod.hxx>
 #include "stdobj.hxx"
 #include "filefmt.hxx"
 #include "sb.hrc"
@@ -78,6 +79,10 @@
 #ifndef _VOS_MUTEX_HXX_
 #include <vos/mutex.hxx>
 #endif
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <comphelper/processfactory.hxx>
+using namespace com::sun::star::uno;
+using namespace com::sun::star::beans;
 
 // #pragma SW_SEGMENT_CLASS( SBASIC, SBASIC_CODE )
 
@@ -767,9 +772,15 @@ SbModule* StarBASIC::MakeModule( const S
 	return MakeModule32( rName, rSrc );
 }
 
-SbModule* StarBASIC::MakeModule32( const String& rName, const ::rtl::OUString& rSrc )
+SbModule* StarBASIC::MakeModule32( const String& rName, const ::rtl::OUString& rSrc, UINT16 nSbxId )
 {
-	SbModule* p = new SbModule( rName );
+    SbModule* p = NULL;
+ 
+    if ( nSbxId == SBXID_DOCUMENTMOD)
+        p = new SbObjModule( rName, this );
+    else
+        p = new SbModule( rName );
+ 
 	p->SetSource32( rSrc );
 	p->SetParent( this );
 	pModules->Insert( p, pModules->Count() );
@@ -931,6 +942,13 @@ SbxVariable* StarBASIC::Find( const Stri
 		if( pRes )
 			pRes->SetFlag( SBX_EXTFOUND );
 	}
+/*
+    // Hack for helperapi
+    bool bVBA = SbiRuntime::isVBAEnabled()
+    if ( bVBA && !bDocBasic )
+        return NULL;
+*/
+
 	// Module durchsuchen
 	if( !pRes )
 	  for( USHORT i = 0; i < pModules->Count(); i++ )
@@ -1491,6 +1509,65 @@ BOOL StarBASIC::LoadOldModules( SvStream
 	return FALSE;
 }
 
+const static String aThisComponent( RTL_CONSTASCII_USTRINGPARAM("ThisComponent") );
+const static String aVBAHook( RTL_CONSTASCII_USTRINGPARAM( "VBAGlobals" ) );
+//  i#i68894#
+SbxArray*
+StarBASIC::getVBAGlobals( )
+{
+   if ( !bDocBasic )
+       return NULL; // VBA only valid for Document basic
+
+   if ( pVBAArray )
+       return pVBAArray;
+
+   Reference < XComponentContext > xCtx;
+   Reference < XPropertySet > xProps(
+
+   ::comphelper::getProcessServiceFactory(), UNO_QUERY_THROW );
+
+   Reference< XMultiComponentFactory > xSMgr( xProps, UNO_QUERY_THROW );
+
+   xCtx.set( xProps->getPropertyValue( rtl::OUString(
+       RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))),
+           UNO_QUERY_THROW );
+   SbUnoObject* dGlobs = new SbUnoObject( aVBAHook , makeAny( xSMgr->createInstanceWithContext( ::rtl::OUString::createFromAscii( "org.openoffice.vba.Globals"), xCtx ) ));
+   Insert( dGlobs );
+
+   SbxVariable *vba = dGlobs->Find( String( RTL_CONSTASCII_USTRINGPARAM("getGlobals") ) , SbxCLASS_DONTCARE );
+
+   if ( vba )
+   {
+       pVBAArray = static_cast<SbxArray *>(vba->GetObject());
+       return pVBAArray;
+   }
+   return NULL;
+}
+
+//  i#i68894#
+SbxVariable*
+StarBASIC::VBAFind( const String& rName, SbxClassType t )
+{
+   if( rName == aThisComponent )
+       return NULL;
+
+   SbxArray *pVBAGlobals = getVBAGlobals( );
+   for (USHORT i = 0; pVBAGlobals && i < pVBAGlobals->Count(); i++)
+   {
+       SbxVariable *pElem = pVBAGlobals->Get( i );
+       if (!pElem || !pElem->IsObject())
+           continue;
+       SbxObject *pVba = static_cast<SbxObject *>(pElem->GetObject());
+       SbxVariable *pVbaVar = pVba ? pVba->Find( rName, t ) : NULL;
+       if( pVbaVar )
+       {
+           return pVbaVar;
+       }
+   }
+   return NULL;
+
+}
+
 
 //========================================================================
 // #118116 Implementation Collection object
--- basic/source/basmgr/basmgr.cxx.bak	2007-08-28 14:00:38.000000000 +0800
+++ basic/source/basmgr/basmgr.cxx	2007-08-31 01:00:51.000000000 +0800
@@ -86,6 +86,7 @@
 #include "sbintern.hxx"
 #include <sb.hrc>
 
+#include <com/sun/star/beans/StringPair.hpp>
 
 #define LIB_SEP			0x01
 #define LIBINFO_SEP		0x02
@@ -105,6 +106,7 @@
 
 #include <cppuhelper/implbase1.hxx>
 
+using namespace com::sun::star::beans;
 using com::sun::star::uno::Reference;
 using namespace com::sun::star::container;
 using namespace com::sun::star::uno;
@@ -280,9 +282,21 @@ void BasMgrContainerListenerImpl::addLib
 		{
 			OUString aModuleName = pNames[ j ];
 			Any aElement = xLibNameAccess->getByName( aModuleName );
+            StringPair sPair;
 			OUString aMod;
-			aElement >>= aMod;
-			pLib->MakeModule32( aModuleName, aMod );
+            OUString aModType;
+            if ( aElement >>= sPair )
+            {
+                aModType = sPair.First;
+                aMod = sPair.Second;
+                OSL_TRACE("#1 - aMod");
+                pLib->MakeModule32( aModuleName, aMod, SBXID_DOCUMENTMOD );
+            }
+            else
+            {
+                aElement >>= aMod;
+                pLib->MakeModule32( aModuleName, aMod );
+            }
 		}
 	}
 
@@ -319,9 +333,17 @@ void SAL_CALL BasMgrContainerListenerImp
 	}
 	else
 	{
+        StringPair sPair;
 		OUString aMod;
-		Event.Element >>= aMod;
-
+        OUString aModType;
+ 
+        if ( Event.Element >>= sPair )
+        {
+            aModType = sPair.First;
+            aMod = sPair.Second;
+        }
+        else
+            Event.Element >>= aMod;
 		StarBASIC* pLib = mpMgr->GetLib( maLibName );
 		DBG_ASSERT( pLib, "BasMgrContainerListenerImpl::elementInserted: Unknown lib!");
 		if( pLib )
@@ -329,7 +351,12 @@ void SAL_CALL BasMgrContainerListenerImp
     		SbModule* pMod = pLib->FindModule( aName );
             if( !pMod )
             {
-			    pLib->MakeModule32( aName, aMod );
+                if ( aModType.getLength() && aModType.equalsAscii( "Document" ) )
+                {
+                    pLib->MakeModule32( aName, aMod, SBXID_DOCUMENTMOD );
+                }
+                else
+                    pLib->MakeModule32( aName, aMod );
 			    pLib->SetModified( FALSE );
             }
 		}
@@ -356,13 +383,29 @@ void SAL_CALL BasMgrContainerListenerImp
 	if( pLib )
 	{
 		SbModule* pMod = pLib->FindModule( aName );
+        StringPair sPair;
 		OUString aMod;
+        OUString aModType;
+ 
+        if ( Event.Element >>= sPair )
+        {
+            aModType = sPair.First;
+            aMod = sPair.Second;
+        }
+        else
+            Event.Element >>= aMod;
 		Event.Element >>= aMod;
 		if( pMod )
 			pMod->SetSource32( aMod );
 		else
-			pLib->MakeModule32( aName, aMod );
-
+        {
+            if ( aModType.getLength() && aModType.equalsAscii( "Document" ) )
+            {
+                pLib->MakeModule32( aName, aMod, SBXID_DOCUMENTMOD );
+            }
+            else
+			    pLib->MakeModule32( aName, aMod );
+        }
 		pLib->SetModified( FALSE );
 	}
 }
--- basic/inc/basic/sbstar.hxx.bak	2007-08-28 13:57:02.000000000 +0800
+++ basic/inc/basic/sbstar.hxx	2007-08-28 14:00:10.000000000 +0800
@@ -94,6 +94,8 @@ private:
 	virtual BOOL LoadData( SvStream&, USHORT );
 	virtual BOOL StoreData( SvStream& ) const;
 
+   SbxArrayRef pVBAArray;
+   SbxArray* getVBAGlobals( );
 protected:
 
 	virtual	BOOL  	ErrorHdl();
@@ -124,7 +126,7 @@ public:
 
 	// Compiler-Interface
 	SbModule*   	MakeModule( const String& rName, const String& rSrc );
-    SbModule*   	MakeModule32( const String& rName, const ::rtl::OUString& rSrc );
+    SbModule*      MakeModule32( const String& rName, const ::rtl::OUString& rSrc, UINT16 nSbxId = SBXID_BASICMOD);
 	BOOL			Compile( SbModule* );
 	BOOL 			Disassemble( SbModule*, String& rText );
 	static void 	Stop();
@@ -191,6 +193,7 @@ public:
 
     SbxArrayRef		getUnoListeners( void );
 
+    SbxVariable* VBAFind( const String& rName, SbxClassType t );
 	static SbxBase*	FindSBXInCurrentScope( const String& rName );
 	static SbxVariable*	FindVarInCurrentScopy
 					( const String& rName, USHORT& rStatus );
--- basic/inc/basic/sbdef.hxx.bak	2007-08-28 13:50:38.000000000 +0800
+++ basic/inc/basic/sbdef.hxx	2007-08-28 13:50:42.000000000 +0800
@@ -100,6 +100,7 @@ void setBasicWatchMode( bool bOn );
 
 #define SBXID_BASIC			0x6273			// sb: StarBASIC
 #define	SBXID_BASICMOD		0x6d62			// bm: StarBASIC-Modul
+#define SBXID_DOCUMENTMOD   0x6d63          // Special document Module
 #define SBXID_BASICPROP		0x7262			// pr: StarBASIC-Property
 #define	SBXID_BASICMETHOD	0x6d65          // me: StarBASIC-Methode
 #define	SBXID_JSCRIPTMOD	0x6a62			// jm: JavaScript-Modul
--- /dev/null	2006-11-25 20:17:37.000000000 +0800
+++ basic/inc/basic/sbobjmod.hxx	2007-09-05 21:39:59.000000000 +0800
@@ -0,0 +1,66 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: sbobjmod.hxx,v $
+ *
+ *  $Revision: 1.4 $
+ *
+ *  last change: $Author:  $ $Date: 2007/08/27 16:31:39 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef _SB_OBJMOD_HXX
+#define _SB_OBJMOD_HXX
+
+#include <basic/sbmod.hxx>
+#include <basic/sbstar.hxx>
+
+// Basic-Module for excel object.
+
+class SbObjModule : public SbModule
+{
+    SbxObjectRef pDocObject; // a excel object.
+protected:
+	//virtual ~SbObjModule();
+    void InitObject( const XubString& rName );
+    void InitObject( );
+public:
+    TYPEINFO();
+	SBX_DECL_PERSIST_NODATA(SBXCR_SBX,SBXID_DOCUMENTMOD,2);
+    SbObjModule( const String&, StarBASIC* pBasic );
+    virtual SbxVariable* Find( const XubString& rName, SbxClassType t );
+    virtual SbxVariable* GetObject();
+    virtual void SetCodeName( const XubString& rName );
+};
+#ifndef __SB_SBOBJMODULEREF_HXX
+#define __SB_SBOBJMODULEREF_HXX
+
+SV_DECL_IMPL_REF(SbObjModule);
+
+#endif
+#endif
+
--- basic/prj/d.lst.bak	2007-09-05 21:12:53.000000000 +0800
+++ basic/prj/d.lst	2007-09-05 21:16:18.000000000 +0800
@@ -27,6 +27,7 @@ mkdir: %_DEST%\inc%_EXT%\basic
 
 ..\inc\basic\sbdef.hxx %_DEST%\inc%_EXT%\basic\sbdef.hxx
 ..\inc\basic\sbmod.hxx %_DEST%\inc%_EXT%\basic\sbmod.hxx
+..\inc\basic\sbobjmod.hxx %_DEST%\inc%_EXT%\basic\sbobjmod.hxx
 ..\inc\basic\sbjsmod.hxx %_DEST%\inc%_EXT%\basic\sbjsmod.hxx
 ..\inc\basic\sbmeth.hxx %_DEST%\inc%_EXT%\basic\sbmeth.hxx
 ..\inc\basic\sbprop.hxx %_DEST%\inc%_EXT%\basic\sbprop.hxx
--- basctl/source/basicide/basobj2.cxx.bak	2007-09-05 20:38:21.000000000 +0800
+++ basctl/source/basicide/basobj2.cxx	2007-09-05 21:38:46.000000000 +0800
@@ -46,6 +46,9 @@
 #ifndef _SBXCLASS_HXX //autogen
 #include <basic/sbx.hxx>
 #endif
+#ifndef _SB_OBJMOD_HXX
+#include <basic/sbobjmod.hxx>
+#endif
 #ifndef INCLUDED_SVTOOLS_MODULEOPTIONS_HXX
 #include <svtools/moduleoptions.hxx>
 #endif
@@ -245,20 +248,29 @@ bool BasicIDE::RenameModule( Window* pEr
 		return false;
     }
 
-    if ( !rDocument.renameModule( rLibName, rOldName, rNewName ) )
-        return false;
-
 	BasicIDEShell* pIDEShell = IDE_DLL()->GetShell();
 	if ( pIDEShell )
 	{
 		IDEBaseWindow* pWin = pIDEShell->FindWindow( rDocument, rLibName, rOldName, BASICIDE_TYPE_MODULE, FALSE );
 		if ( pWin )
 		{
+            ModulWindow* pModWin = (ModulWindow*)pWin;
+            // Object Module
+            SbModule* pMod = pModWin->GetBasic()->FindModule( rOldName );
+            SbObjModule* pObjMod = dynamic_cast< SbObjModule* > (pMod);
+            if ( pObjMod != NULL )
+                pObjMod->SetCodeName( rNewName );
+            if ( !rDocument.renameModule( rLibName, rOldName, rNewName ) )
+            {
+                if ( pObjMod != NULL )
+                    pObjMod->SetCodeName( rOldName );
+                return false;
+            }
+
 			// set new name in window
             pWin->SetName( rNewName );
 
             // set new module in module window
-            ModulWindow* pModWin = (ModulWindow*)pWin;
             pModWin->SetSbModule( (SbModule*)pModWin->GetBasic()->FindModule( rNewName ) );
 
 			// update tabwriter
--- basic/source/runtime/methods1.cxx.bak	2007-09-06 11:44:25.000000000 +0800
+++ basic/source/runtime/methods1.cxx	2007-09-05 21:23:47.000000000 +0800
@@ -60,6 +60,9 @@
 #ifndef _SBX_HXX
 #include <basic/sbx.hxx>
 #endif
+#ifndef _SBSTAR_HXX
+#include <basic/sbstar.hxx>
+#endif
 #ifndef _ZFORLIST_HXX //autogen
 #include <svtools/zforlist.hxx>
 #endif
@@ -81,6 +84,7 @@
 
 #include <vcl/jobset.hxx>
 
+#include <basic/sbobjmod.hxx>
 #include "sbintern.hxx"
 #include "runtime.hxx"
 #include "stdobj.hxx"
@@ -2605,7 +2609,14 @@ RTLFUNC(Me)
 	SbClassModuleObject* pClassModuleObject = PTR_CAST(SbClassModuleObject,pActiveModule);
 	if( pClassModuleObject == NULL )
 	{
-		StarBASIC::Error( SbERR_INVALID_USAGE_OBJECT );
+	    SbObjModule* pMod = PTR_CAST(SbObjModule,pActiveModule);
+        if ( pMod == NULL )
+		    StarBASIC::Error( SbERR_INVALID_USAGE_OBJECT );
+        else
+        {
+		    SbxVariableRef refVar = rPar.Get(0);
+		    refVar->PutObject( pMod->GetObject() );
+        }
 	}
 	else
 	{
