diff --git xmloff/inc/xmloff/xmltoken.hxx xmloff/inc/xmloff/xmltoken.hxx
index f03fba5..923cde1 100644
--- xmloff/inc/xmloff/xmltoken.hxx
+++ xmloff/inc/xmloff/xmltoken.hxx
@@ -3045,11 +3045,16 @@ namespace xmloff { namespace token {
     XMLOFF_DLLPUBLIC const ::rtl::OUString& GetXMLToken(
         enum XMLTokenEnum eToken );
 
+    XMLOFF_DLLPUBLIC XMLTokenEnum GetXMLTokenID( 
+        const ::rtl::OUString& rName );
+
     /// compare eToken to the string
     XMLOFF_DLLPUBLIC sal_Bool IsXMLToken(
         const ::rtl::OUString& rString,
         enum XMLTokenEnum eToken );
 
+    XMLOFF_DLLPUBLIC void InitTokens();
+
     // gives all allocated memory for OUString* back
     XMLOFF_DLLPUBLIC void ResetTokens();
 
diff --git xmloff/source/core/xmlexp.cxx xmloff/source/core/xmlexp.cxx
index d164a7c..7e21c1b 100644
--- xmloff/source/core/xmlexp.cxx
+++ xmloff/source/core/xmlexp.cxx
@@ -346,6 +346,8 @@ void SvXMLExport::_InitCtor()
 		}
 	}
     // <--
+
+    xmloff::token::InitTokens();
 }
 
 // --> OD 2006-03-14 #i51726#
diff --git xmloff/source/core/xmlimp.cxx xmloff/source/core/xmlimp.cxx
index 3d25e07..987d496 100644
--- xmloff/source/core/xmlimp.cxx
+++ xmloff/source/core/xmlimp.cxx
@@ -309,6 +309,8 @@ void SvXMLImport::_InitCtor()
 		mxModel->addEventListener(mxEventListener);
 	}
 
+    ::xmloff::token::InitTokens();
+
     ::comphelper::UnoInterfaceToUniqueIdentifierMapper	maInterfaceToIdentifierMapper;
 
 }
diff --git xmloff/source/core/xmltoken.cxx xmloff/source/core/xmltoken.cxx
index 323d59b..fd5d013 100644
--- xmloff/source/core/xmltoken.cxx
+++ xmloff/source/core/xmltoken.cxx
@@ -34,7 +34,10 @@
 #include <tools/debug.hxx>
 #include <rtl/ustring.hxx>
 
+#include <hash_map>
+
 using ::rtl::OUString;
+using ::rtl::OUStringHash;
 
 namespace xmloff { namespace token {
 
@@ -3047,6 +3050,9 @@ namespace xmloff { namespace token {
 #endif
     };
 
+    typedef ::std::hash_map<OUString, XMLTokenEnum, OUStringHash> TokenNameMapType;
+    TokenNameMapType aTokenNameMap;
+
     sal_Int32 nRescheduleCount = 0;
 
     // get OUString representation of token
@@ -3077,6 +3083,15 @@ namespace xmloff { namespace token {
         return *pToken->pOUString;
     }
 
+    XMLTokenEnum GetXMLTokenID( const OUString& rName )
+    {
+        TokenNameMapType::const_iterator itr = aTokenNameMap.find(rName);
+        if (itr != aTokenNameMap.end())
+            return itr->second;
+
+        return XML_TOKEN_INVALID;
+    }
+
     // does rString represent eToken?
     sal_Bool IsXMLToken(
         const OUString& rString,
@@ -3089,6 +3104,23 @@ namespace xmloff { namespace token {
         return rString.equalsAsciiL( pToken->pChar, pToken->nLength );
     }
 
+    void InitTokens()
+    {
+        if (!aTokenNameMap.empty())
+            return;
+
+        size_t n = sizeof(aTokenList)/sizeof(XMLTokenEntry);
+        for (size_t i = 0; i < n; ++i)
+        {
+            if (!aTokenList[i].pOUString)
+                aTokenList[i].pOUString = new OUString( 
+                    aTokenList[i].pChar, aTokenList[i].nLength, RTL_TEXTENCODING_ASCII_US );
+
+            aTokenNameMap.insert(
+                TokenNameMapType::value_type(*aTokenList[i].pOUString, static_cast<XMLTokenEnum>(i)));
+        }
+    }
+
     // gives all allocated memory for OUString* back
     void ResetTokens()
     {
@@ -3101,6 +3133,7 @@ namespace xmloff { namespace token {
 	    		delete aTokenList[i].pOUString;
 		    	aTokenList[i].pOUString = NULL;
     		}
+            aTokenNameMap.clear();
     	}
     }
 
