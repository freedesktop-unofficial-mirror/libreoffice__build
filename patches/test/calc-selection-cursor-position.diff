diff --git sc/source/ui/inc/cellsh.hxx sc/source/ui/inc/cellsh.hxx
index b859e36..39fe3e8 100644
--- sc/source/ui/inc/cellsh.hxx
+++ sc/source/ui/inc/cellsh.hxx
@@ -37,6 +37,7 @@
 #include <svx/svdmark.hxx>
 #include <tools/link.hxx>
 #include "formatsh.hxx"
+#include "address.hxx"
 
 class SvxClipboardFmtItem;
 class TransferableDataHelper;
diff --git sc/source/ui/inc/tabview.hxx sc/source/ui/inc/tabview.hxx
index 4e5cb0b..d147e13 100644
--- sc/source/ui/inc/tabview.hxx
+++ sc/source/ui/inc/tabview.hxx
@@ -203,6 +203,8 @@ private:
 	static void		SetScrollBar( ScrollBar& rScroll, long nRangeMax, long nVisible, long nPos, BOOL bLayoutRTL );
 	static long		GetScrollBarPos( ScrollBar& rScroll, BOOL bLayoutRTL );
 
+    void            GetPageMoveEndPosition(SCsCOL nMovX, SCsROW nMovY, SCsCOL& rPageX, SCsROW& rPageY);
+
 protected:
 	void			UpdateHeaderWidth( const ScVSplitPos* pWhich = NULL,
 										const SCROW* pPosY = NULL );
@@ -483,6 +485,10 @@ public:
 
 	BOOL			IsBlockMode() const		{ return bIsBlockMode; }
 
+    void            ExpandBlock(SCsCOL nMovX, SCsROW nMovY, ScFollowMode eMode);
+    void            ExpandBlockPage(SCsCOL nMovX, SCsROW nMovY);
+    void            ExpandBlockArea(SCsCOL nMovX, SCsROW nMovY);
+
 	void			MarkColumns();
 	void			MarkRows();
 	void			MarkDataArea( BOOL bIncludeCursor = TRUE );
diff --git sc/source/ui/view/cellsh4.cxx sc/source/ui/view/cellsh4.cxx
index afb7c54..3c0fb0c 100644
--- sc/source/ui/view/cellsh4.cxx
+++ sc/source/ui/view/cellsh4.cxx
@@ -53,6 +53,42 @@
 #include "sc.hrc"
 
 
+#include <stdio.h>
+#include <string>
+#include <sys/time.h>
+
+namespace {
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+        mfStartTime = getTime();
+    }
+
+    ~StackPrinter()
+    {
+        double fEndTime = getTime();
+        fprintf(stdout, "%s: --end (duration: %g sec)\n", msMsg.c_str(), (fEndTime-mfStartTime));
+    }
+
+private:
+    double getTime() const
+    {
+        timeval tv;
+        gettimeofday(&tv, NULL);
+        return tv.tv_sec + tv.tv_usec / 1000000.0;
+    }
+
+    ::std::string msMsg;
+    double mfStartTime;
+};
+
+}
+
 //------------------------------------------------------------------
 
 #define IS_AVAILABLE(WhichId,ppItem) \
@@ -61,6 +97,8 @@
 
 void ScCellShell::ExecuteCursor( SfxRequest& rReq )
 {
+    StackPrinter __stack_printer__("ScCellShell::ExecuteCursor ------------------------------");
+
 	ScViewData* pData = GetViewData();
 	ScTabViewShell*	pTabViewShell  	= pData->GetViewShell();
 	const SfxItemSet*	pReqArgs = rReq.GetArgs();
@@ -92,6 +130,54 @@ void ScCellShell::ExecuteCursor( SfxRequest& rReq )
 		}
 	}
 
+    fprintf(stdout, "ScCellShell::ExecuteCursor:   selection (%d)  keep (%d)  repeat (%d)\n", bSel, bKeep, nRepeat);
+    if (bSel)
+    {
+        switch (nSlotId)
+        {
+            case SID_CURSORDOWN:
+                rReq.SetSlot(SID_CURSORDOWN_SEL);
+            break;
+            case SID_CURSORUP:
+                rReq.SetSlot(SID_CURSORUP_SEL);
+            break;
+            case SID_CURSORRIGHT:
+                rReq.SetSlot(SID_CURSORRIGHT_SEL);
+            break;
+            case SID_CURSORLEFT:
+                rReq.SetSlot(SID_CURSORLEFT_SEL);
+            break;
+            case SID_CURSORPAGEDOWN:
+                rReq.SetSlot(SID_CURSORPAGEDOWN_SEL);
+            break;
+            case SID_CURSORPAGEUP:
+                rReq.SetSlot(SID_CURSORPAGEUP_SEL);
+            break;
+            case SID_CURSORPAGERIGHT:
+                rReq.SetSlot(SID_CURSORPAGERIGHT_SEL);
+            break;
+            case SID_CURSORPAGELEFT:
+                rReq.SetSlot(SID_CURSORPAGELEFT_SEL);
+            break;
+            case SID_CURSORBLKDOWN:
+                rReq.SetSlot(SID_CURSORBLKDOWN_SEL);
+            break;
+            case SID_CURSORBLKUP:
+                rReq.SetSlot(SID_CURSORBLKUP_SEL);
+            break;
+            case SID_CURSORBLKRIGHT:
+                rReq.SetSlot(SID_CURSORBLKRIGHT_SEL);
+            break;
+            case SID_CURSORBLKLEFT:
+                rReq.SetSlot(SID_CURSORBLKLEFT_SEL);
+            break;
+            default:
+                ;
+        }
+        ExecuteCursorSel(rReq);
+        return;
+    }
+
 	SCsCOLROW nRTLSign = 1;
 	if ( pData->GetDocument()->IsLayoutRTL( pData->GetTabNo() ) )
 	{
@@ -104,6 +190,7 @@ void ScCellShell::ExecuteCursor( SfxRequest& rReq )
 
 	//OS: einmal fuer alle wird doch reichen!
 	pTabViewShell->ExecuteInputDirect();
+
 	switch ( nSlotId )
 	{
 		case SID_CURSORDOWN:
@@ -172,9 +259,61 @@ void ScCellShell::GetStateCursor( SfxItemSet& /* rSet */ )
 
 void ScCellShell::ExecuteCursorSel( SfxRequest& rReq )
 {
-	const SfxItemSet*	pReqArgs = rReq.GetArgs();
-	USHORT				nSlotId  = rReq.GetSlot();
-	short				nRepeat = 1;
+    StackPrinter __stack_printer__("ScCellShell::ExecuteCursorSel");
+    const SfxItemSet*   pReqArgs = rReq.GetArgs();
+    sal_uInt16          nSlotId  = rReq.GetSlot();
+    short               nRepeat = 1;
+    ScViewData* pData = GetViewData();
+    ScTabViewShell* pViewShell = pData->GetViewShell();
+
+    sal_uInt16 nLocked = pViewShell->GetLockedModifiers();
+    bool bAddSel = (nLocked & KEY_MOD1);
+    fprintf(stdout, "ScCellShell::ExecuteCursorSel:   add selection (%d)\n", bAddSel);
+
+#if 1
+    switch (nSlotId)
+    {
+        case SID_CURSORDOWN_SEL:
+            pViewShell->ExpandBlock(0, 1, SC_FOLLOW_LINE);
+        break;
+        case SID_CURSORUP_SEL:
+            pViewShell->ExpandBlock(0, -1, SC_FOLLOW_LINE);
+        break;
+        case SID_CURSORRIGHT_SEL:
+            pViewShell->ExpandBlock(1, 0, SC_FOLLOW_LINE);
+        break;
+        case SID_CURSORLEFT_SEL:
+            pViewShell->ExpandBlock(-1, 0, SC_FOLLOW_LINE);
+        break;
+        case SID_CURSORPAGEUP_SEL:
+            pViewShell->ExpandBlockPage(0, -1);
+        break;
+        case SID_CURSORPAGEDOWN_SEL:
+            pViewShell->ExpandBlockPage(0, 1);
+        break;
+        case SID_CURSORPAGERIGHT_SEL:
+            pViewShell->ExpandBlockPage(1, 0);
+        break;
+        case SID_CURSORPAGELEFT_SEL:
+            pViewShell->ExpandBlockPage(-1, 0);
+        break;
+        case SID_CURSORBLKDOWN_SEL:
+            fprintf(stdout, "ScCellShell::ExecuteCursorSel:   block down\n");
+        break;
+        case SID_CURSORBLKUP_SEL:
+            fprintf(stdout, "ScCellShell::ExecuteCursorSel:   block up\n");
+        break;
+        case SID_CURSORBLKRIGHT_SEL:
+            fprintf(stdout, "ScCellShell::ExecuteCursorSel:   block right\n");
+        break;
+        case SID_CURSORBLKLEFT_SEL:
+            fprintf(stdout, "ScCellShell::ExecuteCursorSel:   block left\n");
+        break;
+        default:
+            fprintf(stdout, "ScCellShell::ExecuteCursorSel:   other\n");
+            ;
+    }
+#else
 
 	if ( pReqArgs != NULL )
 	{
@@ -204,6 +343,7 @@ void ScCellShell::ExecuteCursorSel( SfxRequest& rReq )
 	rReq.AppendItem( SfxInt16Item(FN_PARAM_1, nRepeat ) );
 	rReq.AppendItem( SfxBoolItem(FN_PARAM_2, TRUE) );
 	ExecuteSlot( rReq, GetInterface() );
+#endif
 }
 
 void ScCellShell::ExecuteMove( SfxRequest& rReq )
@@ -325,6 +465,7 @@ void ScCellShell::ExecutePageSel( SfxRequest& rReq )
 
 void ScCellShell::ExecutePage( SfxRequest& rReq )
 {
+    StackPrinter __stack_printer__("ScCellShell::ExecutePage");
 	ScTabViewShell*	pTabViewShell  	= GetViewData()->GetViewShell();
 	const SfxItemSet*	pReqArgs = rReq.GetArgs();
 	USHORT				nSlotId  = rReq.GetSlot();
diff --git sc/source/ui/view/select.cxx sc/source/ui/view/select.cxx
index f7ae33d..b4e3f3d 100644
--- sc/source/ui/view/select.cxx
+++ sc/source/ui/view/select.cxx
@@ -54,6 +54,43 @@ extern USHORT nScFillModeMouseModifier;				// global.cxx
 
 using namespace com::sun::star;
 
+
+#include <stdio.h>
+#include <string>
+#include <sys/time.h>
+
+namespace {
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+        mfStartTime = getTime();
+    }
+
+    ~StackPrinter()
+    {
+        double fEndTime = getTime();
+        fprintf(stdout, "%s: --end (duration: %g sec)\n", msMsg.c_str(), (fEndTime-mfStartTime));
+    }
+
+private:
+    double getTime() const
+    {
+        timeval tv;
+        gettimeofday(&tv, NULL);
+        return tv.tv_sec + tv.tv_usec / 1000000.0;
+    }
+
+    ::std::string msMsg;
+    double mfStartTime;
+};
+
+}
+
 // STATIC DATA -----------------------------------------------------------
 
 static Point aSwitchPos;				//! Member
@@ -304,6 +341,8 @@ void ScViewFunctionSet::SetAnchorFlag( BOOL bSet )
 
 BOOL __EXPORT ScViewFunctionSet::SetCursorAtPoint( const Point& rPointPixel, BOOL /* bDontSelectAtCursor */ )
 {
+    StackPrinter __stack_printer__("ScViewFunctionSet::SetCursorAtPoint");
+    fprintf(stdout, "ScViewFunctionSet::SetCursorAtPoint:   cursor at point (%ld,%ld)\n", rPointPixel.X(), rPointPixel.Y());
 	if ( bDidSwitch )
 	{
 		if ( rPointPixel == aSwitchPos )
@@ -402,6 +441,8 @@ BOOL __EXPORT ScViewFunctionSet::SetCursorAtPoint( const Point& rPointPixel, BOO
 
 BOOL ScViewFunctionSet::SetCursorAtCell( SCsCOL nPosX, SCsROW nPosY, BOOL bScroll )
 {
+    StackPrinter __stack_printer__("ScViewFunctionSet::SetCursorAtCell");
+    fprintf(stdout, "ScViewFunctionSet::SetCursorAtCell:   cursor at (%ld,%ld)\n", nPosX,nPosY);
 	ScTabView* pView = pViewData->GetView();
 	SCTAB nTab = pViewData->GetTabNo();
     ScDocument* pDoc = pViewData->GetDocument();
@@ -656,6 +697,7 @@ BOOL ScViewFunctionSet::SetCursorAtCell( SCsCOL nPosX, SCsROW nPosY, BOOL bScrol
 
 		if (bAnchor)
 		{
+            fprintf(stdout, "ScViewFunctionSet::SetCursorAtCell:   anchor\n");
 			if (!bStarted)
 			{
 				BOOL bMove = ( nPosX != (SCsCOL) aAnchorPos.Col() ||
@@ -668,13 +710,18 @@ BOOL ScViewFunctionSet::SetCursorAtCell( SCsCOL nPosX, SCsROW nPosY, BOOL bScrol
 				}
 			}
 			if (bStarted)
+                // If the selection is already started, don't set the cursor.
 				pView->MarkCursor( (SCCOL) nPosX, (SCROW) nPosY, nTab, FALSE, FALSE, TRUE );
+            else
+                pView->SetCursor( (SCCOL) nPosX, (SCROW) nPosY );
 		}
 		else
 		{
+            fprintf(stdout, "ScViewFunctionSet::SetCursorAtCell:   no anchor\n");
 			ScMarkData& rMark = pViewData->GetMarkData();
-			if (rMark.IsMarked() || rMark.IsMultiMarked())
+            if (rMark.IsMarked() || rMark.IsMultiMarked())
 			{
+                fprintf(stdout, "ScViewFunctionSet::SetCursorAtCell:   mark exists\n");
 				pView->DoneBlockMode(TRUE);
 				pView->InitBlockMode( nPosX, nPosY, nTab, TRUE );
 				pView->MarkCursor( (SCCOL) nPosX, (SCROW) nPosY, nTab );
@@ -704,9 +751,9 @@ BOOL ScViewFunctionSet::SetCursorAtCell( SCsCOL nPosX, SCsROW nPosY, BOOL bScrol
 				
 				bStarted = TRUE;
 			}
+            pView->SetCursor( (SCCOL) nPosX, (SCROW) nPosY );
 		}
 
-		pView->SetCursor( (SCCOL) nPosX, (SCROW) nPosY );
 		pViewData->SetRefStart( nPosX, nPosY, nTab );
 		if (bHideCur)
 			pView->ShowAllCursors();
diff --git sc/source/ui/view/tabview2.cxx sc/source/ui/view/tabview2.cxx
index 72bae06..66b1a5e 100644
--- sc/source/ui/view/tabview2.cxx
+++ sc/source/ui/view/tabview2.cxx
@@ -68,6 +68,42 @@
 #define SC_BLOCKMODE_OWN		2
 
 
+#include <stdio.h>
+#include <string>
+#include <sys/time.h>
+
+namespace {
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+        mfStartTime = getTime();
+    }
+
+    ~StackPrinter()
+    {
+        double fEndTime = getTime();
+        fprintf(stdout, "%s: --end (duration: %g sec)\n", msMsg.c_str(), (fEndTime-mfStartTime));
+    }
+
+private:
+    double getTime() const
+    {
+        timeval tv;
+        gettimeofday(&tv, NULL);
+        return tv.tv_sec + tv.tv_usec / 1000000.0;
+    }
+
+    ::std::string msMsg;
+    double mfStartTime;
+};
+
+}
+
 
 //
 //          Markier - Funktionen
@@ -127,6 +163,7 @@ void ScTabView::InitOwnBlockMode()
 void ScTabView::InitBlockMode( SCCOL nCurX, SCROW nCurY, SCTAB nCurZ,
 								BOOL bTestNeg, BOOL bCols, BOOL bRows )
 {
+    fprintf(stdout, "ScTabView::InitBlockMode:   ********************* called !!!\n");
 	if (!bIsBlockMode)
 	{
 		if (!ValidCol(nCurX)) nCurX = MAXCOL;
@@ -414,6 +451,81 @@ void ScTabView::MarkCursor( SCCOL nCurX, SCROW nCurY, SCTAB nCurZ,
 		aHdrFunc.SetAnchorFlag( FALSE );
 }
 
+void ScTabView::GetPageMoveEndPosition(SCsCOL nMovX, SCsROW nMovY, SCsCOL& rPageX, SCsROW& rPageY)
+{
+    SCCOL nCurX;
+    SCROW nCurY;
+    aViewData.GetMoveCursor( nCurX,nCurY );
+
+    ScSplitPos eWhich = aViewData.GetActivePart();
+    ScHSplitPos eWhichX = WhichH( eWhich );
+    ScVSplitPos eWhichY = WhichV( eWhich );
+
+    SCsCOL nPageX;
+    SCsROW nPageY;
+    if (nMovX >= 0)
+        nPageX = ((SCsCOL) aViewData.CellsAtX( nCurX, 1, eWhichX )) * nMovX;
+    else
+        nPageX = ((SCsCOL) aViewData.CellsAtX( nCurX, -1, eWhichX )) * nMovX;
+
+    if (nMovY >= 0)
+        nPageY = ((SCsROW) aViewData.CellsAtY( nCurY, 1, eWhichY )) * nMovY;
+    else
+        nPageY = ((SCsROW) aViewData.CellsAtY( nCurY, -1, eWhichY )) * nMovY;
+
+    if (nMovX != 0 && nPageX == 0) nPageX = (nMovX>0) ? 1 : -1;
+    if (nMovY != 0 && nPageY == 0) nPageY = (nMovY>0) ? 1 : -1;
+
+    rPageX = nPageX;
+    rPageY = nPageY;
+}
+
+void ScTabView::ExpandBlock(SCsCOL nMovX, SCsROW nMovY, ScFollowMode eMode)
+{
+    if (!nMovX && !nMovY)
+        // Nothing to do.  Bail out.
+        return;
+
+    StackPrinter __stack_printer__("ScTabView::ExpandBlock");
+    if (!IsBlockMode())
+        InitBlockMode(aViewData.GetCurX(), aViewData.GetCurY(), aViewData.GetTabNo());
+
+    if (nMovX)
+        nBlockEndX += nMovX;
+
+    if (nMovY)
+        nBlockEndY += nMovY;
+
+    // Check for boundaries.
+
+    if (nBlockEndX < 0)
+        nBlockEndX = 0;
+    else if (nBlockEndX > MAXCOL) 
+        nBlockEndX = MAXCOL;
+
+    if (nBlockEndY < 0)
+        nBlockEndY = 0;
+    else if (nBlockEndY > MAXROW)
+        nBlockEndY = MAXROW;
+
+    MarkCursor(nBlockEndX, nBlockEndY, aViewData.GetTabNo(), false, false, true);
+    AlignToCursor(nBlockEndX, nBlockEndY, eMode);
+    fprintf(stdout, "ScTabView::ExpandBlock:   block (%ld,%ld) - (%ld,%ld)\n", 
+            nBlockStartX, nBlockStartY, nBlockEndX, nBlockEndY);
+}
+
+void ScTabView::ExpandBlockPage(SCsCOL nMovX, SCsROW nMovY)
+{
+    SCsCOL nPageX;
+    SCsROW nPageY;
+    GetPageMoveEndPosition(nMovX, nMovY, nPageX, nPageY);
+    ExpandBlock(nPageX, nPageY, SC_FOLLOW_FIX);
+}
+
+void ScTabView::ExpandBlockArea(SCsCOL nMovX, SCsROW nMovY)
+{
+}
+
 void ScTabView::UpdateSelectionOverlay()
 {
     for (USHORT i=0; i<4; i++)
diff --git sc/source/ui/view/tabview3.cxx sc/source/ui/view/tabview3.cxx
index 6f559a5..144a665 100644
--- sc/source/ui/view/tabview3.cxx
+++ sc/source/ui/view/tabview3.cxx
@@ -87,6 +87,43 @@
 
 using namespace com::sun::star::document::VbaEventId;
 
+
+#include <stdio.h>
+#include <string>
+#include <sys/time.h>
+
+namespace {
+
+class StackPrinter
+{
+public:
+    explicit StackPrinter(const char* msg) :
+        msMsg(msg)
+    {
+        fprintf(stdout, "%s: --begin\n", msMsg.c_str());
+        mfStartTime = getTime();
+    }
+
+    ~StackPrinter()
+    {
+        double fEndTime = getTime();
+        fprintf(stdout, "%s: --end (duration: %g sec)\n", msMsg.c_str(), (fEndTime-mfStartTime));
+    }
+
+private:
+    double getTime() const
+    {
+        timeval tv;
+        gettimeofday(&tv, NULL);
+        return tv.tv_sec + tv.tv_usec / 1000000.0;
+    }
+
+    ::std::string msMsg;
+    double mfStartTime;
+};
+
+}
+
 namespace
 {
 
@@ -292,6 +329,9 @@ void ScTabView::InvalidateAttribs()
 
 void ScTabView::SetCursor( SCCOL nPosX, SCROW nPosY, BOOL bNew )
 {
+    StackPrinter __stack_printer__("ScTabView::SetCursor");
+    fprintf(stdout, "ScTabView::SetCursor:  (%d,%d)\n", nPosX, nPosY);
+
 	SCCOL nOldX = aViewData.GetCurX();
 	SCROW nOldY = aViewData.GetCurY();
 
@@ -911,6 +951,9 @@ BOOL ScTabView::SelMouseButtonDown( const MouseEvent& rMEvt )
 void ScTabView::MoveCursorAbs( SCsCOL nCurX, SCsROW nCurY, ScFollowMode eMode,
 								BOOL bShift, BOOL bControl, BOOL bKeepOld, BOOL bKeepSel )
 {
+    StackPrinter __stack_printer__("ScTabView::MoveCursorAbs");
+    fprintf(stdout, "ScTabView::MoveCursorAbs:   move cursor to (%ld,%ld)  block mode? (%d)  shift (%d)  keep selection (%d)\n", 
+            nCurX,nCurY, IsBlockMode(), bShift, bKeepSel);
 	if (!bKeepOld)
 		aViewData.ResetOldCursor();
 
@@ -921,12 +964,12 @@ void ScTabView::MoveCursorAbs( SCsCOL nCurX, SCsROW nCurY, ScFollowMode eMode,
 
 	HideAllCursors();
 
-	if ( bShift && bNewStartIfMarking && IsBlockMode() )
-	{
-		//	used for ADD selection mode: start a new block from the cursor position
-		DoneBlockMode( TRUE );
-		InitBlockMode( aViewData.GetCurX(), aViewData.GetCurY(), aViewData.GetTabNo(), TRUE );
-	}
+//  if ( bShift && bNewStartIfMarking && IsBlockMode() )
+//  {
+//  	//	used for ADD selection mode: start a new block from the cursor position
+//  	DoneBlockMode( TRUE );
+//  	InitBlockMode( aViewData.GetCurX(), aViewData.GetCurY(), aViewData.GetTabNo(), TRUE );
+//  }
 
 		//	aktiven Teil umschalten jetzt in AlignToCursor
 
@@ -934,22 +977,31 @@ void ScTabView::MoveCursorAbs( SCsCOL nCurX, SCsROW nCurY, ScFollowMode eMode,
 	//!		auf OS/2: SC_FOLLOW_JUMP statt SC_FOLLOW_LINE, um Nachlaufen zu verhindern ???
 
 	if (bKeepSel)
+    {    
 		SetCursor( nCurX, nCurY );		// Markierung stehenlassen
+        DoneBlockMode(true);
+    }
 	else
 	{
+        // Remove all marked data on cursor movement.
+        ScMarkData aData(aViewData.GetMarkData());
+        aData.ResetMark();
+        SetMarkData(aData);
+
 		BOOL bSame = ( nCurX == aViewData.GetCurX() && nCurY == aViewData.GetCurY() );
 		bMoveIsShift = bShift;
-		pSelEngine->CursorPosChanging( bShift, bControl );
+        pSelEngine->CursorPosChanging( bShift, bControl );
 		bMoveIsShift = FALSE;
 		aFunctionSet.SetCursorAtCell( nCurX, nCurY, FALSE );
 
 		//	Wenn der Cursor nicht bewegt wurde, muss das SelectionChanged fuer das
 		//	Aufheben der Selektion hier einzeln passieren:
-		if (bSame)
+        if (bSame)
 			SelectionChanged();
 	}
 
 	ShowAllCursors();
+    fprintf(stdout, "ScTabView::MoveCursorAbs:   block mode? (%d)\n", IsBlockMode());
 }
 
 void ScTabView::MoveCursorRel( SCsCOL nMovX, SCsROW nMovY, ScFollowMode eMode,
@@ -1080,29 +1132,9 @@ void ScTabView::MoveCursorRel( SCsCOL nMovX, SCsROW nMovY, ScFollowMode eMode,
 
 void ScTabView::MoveCursorPage( SCsCOL nMovX, SCsROW nMovY, ScFollowMode eMode, BOOL bShift, BOOL bKeepSel )
 {
-	SCCOL nCurX;
-	SCROW nCurY;
-	aViewData.GetMoveCursor( nCurX,nCurY );
-
-	ScSplitPos eWhich = aViewData.GetActivePart();
-	ScHSplitPos eWhichX = WhichH( eWhich );
-	ScVSplitPos eWhichY = WhichV( eWhich );
-
-	SCsCOL nPageX;
-	SCsROW nPageY;
-	if (nMovX >= 0)
-		nPageX = ((SCsCOL) aViewData.CellsAtX( nCurX, 1, eWhichX )) * nMovX;
-	else
-		nPageX = ((SCsCOL) aViewData.CellsAtX( nCurX, -1, eWhichX )) * nMovX;
-
-	if (nMovY >= 0)
-		nPageY = ((SCsROW) aViewData.CellsAtY( nCurY, 1, eWhichY )) * nMovY;
-	else
-		nPageY = ((SCsROW) aViewData.CellsAtY( nCurY, -1, eWhichY )) * nMovY;
-
-	if (nMovX != 0 && nPageX == 0) nPageX = (nMovX>0) ? 1 : -1;
-	if (nMovY != 0 && nPageY == 0) nPageY = (nMovY>0) ? 1 : -1;
-
+    SCsCOL nPageX;
+    SCsROW nPageY;
+    GetPageMoveEndPosition(nMovX, nMovY, nPageX, nPageY);
 	MoveCursorRel( nPageX, nPageY, eMode, bShift, bKeepSel );
 }
 
