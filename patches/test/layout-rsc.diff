? rsc/.2.html
? rsc/doc++
? rsc/rsc-list
? rsc/rscJbgiwe
? rsc/test.cxx
? rsc/test.hxx
? rsc/test.rc
? rsc/test.src
? rsc/test2.rc
? rsc/test2.src
? rsc/inc/rsclayout.hxx
? rsc/source/res/rsclayout.cxx
Index: rsc/inc/rscdb.hxx
===================================================================
RCS file: /cvs/gsl/rsc/inc/rscdb.hxx,v
retrieving revision 1.8
diff -u -p -u -r1.8 rscdb.hxx
--- rsc/inc/rscdb.hxx	2 Jul 2002 14:25:56 -0000	1.8
+++ rsc/inc/rscdb.hxx	26 Aug 2003 14:48:26 -0000
@@ -226,6 +226,8 @@ class RscTypCont
 								RscTop * pClassColor );
 	RscTop *	InitClassImageList( RscTop * pSuper, RscTop *pClassBitmap,
 									RscTop * pClassColor );
+
+	RscTop *	InitClassLayout( RscTop * pSuper );
 	RscTop *	InitClassWindow( RscTop * pSuper, RscEnum * pMapUnit,
 								 RscArray * pLangGeo );
 	RscTop *	InitClassSystemWindow( RscTop * pSuper );
Index: rsc/inc/rsctop.hxx
===================================================================
RCS file: /cvs/gsl/rsc/inc/rsctop.hxx,v
retrieving revision 1.2
diff -u -p -u -r1.2 rsctop.hxx
--- rsc/inc/rsctop.hxx	10 Oct 2001 11:51:13 -0000	1.2
+++ rsc/inc/rsctop.hxx	26 Aug 2003 14:48:26 -0000
@@ -73,6 +73,9 @@
 #ifndef _RSCCLOBJ_HXX
 #include <rscclobj.hxx>
 #endif
+#ifndef _TOOLS_RCID_H
+#include <tools/rcid.h>
+#endif
 
 /****************** T Y P E S ********************************************/
 typedef short RSCVAR;
@@ -112,6 +115,9 @@ public:
 			USHORT	GetTypId() const
 					{ return nTypId; };
 					// Gibt die Oberklasse zurueck
+			BOOL    IsLayout() { return ( GetTypId() >= RSC_LAYOUT &&
+						      GetTypId() <= RSC_LAYOUT_LAST ); }
+
 			BOOL	InHierarchy( RscTop * pClass );
 			BOOL	IsCodeWriteable() const
 					{
Index: rsc/source/parser/erscerr.cxx
===================================================================
RCS file: /cvs/gsl/rsc/source/parser/erscerr.cxx,v
retrieving revision 1.6
diff -u -p -u -r1.6 erscerr.cxx
--- rsc/source/parser/erscerr.cxx	7 Nov 2001 16:51:18 -0000	1.6
+++ rsc/source/parser/erscerr.cxx	26 Aug 2003 14:48:26 -0000
@@ -464,7 +464,7 @@ void RscError::ErrorFormat( const ERRTYP
 		StdLstErr( "\n" );
 	}
 	StdLstErr( "f" );
-	sprintf( buf, "%u", (USHORT)rError );
+	sprintf( buf, "0x%x", (USHORT)rError );
 	StdLstErr( buf );
 
 	if( pFI && pTC ){
Index: rsc/source/parser/rscicpx.cxx
===================================================================
RCS file: /cvs/gsl/rsc/source/parser/rscicpx.cxx,v
retrieving revision 1.6
diff -u -p -u -r1.6 rscicpx.cxx
--- rsc/source/parser/rscicpx.cxx	26 Mar 2003 15:50:46 -0000	1.6
+++ rsc/source/parser/rscicpx.cxx	26 Aug 2003 14:48:28 -0000
@@ -281,6 +281,71 @@ RscTop * RscTypCont::InitClassImageList(
 	return( pClassImageList );
 }
 
+RscTop * RscTypCont::InitClassLayout( RscTop * pSuper )
+{
+	HASHID  nId;
+	RscTop *pClassLayout;
+
+	// Layout
+	nId = pHS->Insert( "Layout" );
+	pClassLayout = new RscClass( nId, RSC_LAYOUT, pSuper );
+	aNmTb.Put( nId, CLASSNAME, pClassLayout );
+
+	nId = aNmTb.Put( "PeerId", VARNAME );
+	pClassLayout->SetVariable( nId, &aIdNoZeroUShort, NULL, 0, RSC_LAYOUT_PEER );
+	nId = aNmTb.Put( "Border", VARNAME );
+	pClassLayout->SetVariable( nId, &aShort, NULL, 0, RSC_LAYOUT_BORDER );
+	nId = aNmTb.Put( "Homogeneous", VARNAME );
+	pClassLayout->SetVariable( nId, &aBool, NULL, 0, RSC_LAYOUT_HOMOGENEOUS );
+
+	// Not a very satisfactory way to do child properties:
+	nId = aNmTb.Put( "Expand", VARNAME );
+	pClassLayout->SetVariable( nId, &aBool, NULL, 0, RSC_LAYOUT_CHILD_EXPAND );
+	nId = aNmTb.Put( "Fill", VARNAME );
+	pClassLayout->SetVariable( nId, &aBool, NULL, 0, RSC_LAYOUT_CHILD_FILL );
+	nId = aNmTb.Put( "Padding", VARNAME );
+	pClassLayout->SetVariable( nId, &aShort, NULL, 0, RSC_LAYOUT_CHILD_PADDING );
+	nId = aNmTb.Put( "PackEnd", VARNAME );
+	pClassLayout->SetVariable( nId, &aBool, NULL, 0, RSC_LAYOUT_CHILD_PACK_END );
+
+	// FIXME: table options - need a flag per option... - or more complexity.
+	pRoot->Insert( pClassLayout );
+
+	// LayoutBin
+	RscTop *pClassLayoutBin;
+	nId = pHS->Insert( "LayoutBin" );
+	pClassLayoutBin = new RscClass( nId, RSC_LAYOUT_BIN, pClassLayout );
+	aNmTb.Put( nId, CLASSNAME, pClassLayoutBin );
+
+	// LayoutAlignment
+	RscTop *pClassLayoutAlign;
+	nId = pHS->Insert( "LayoutAlignment" );
+	pClassLayoutAlign = new RscClass( nId, RSC_LAYOUT_ALIGNMENT, pClassLayoutBin );
+	aNmTb.Put( nId, CLASSNAME, pClassLayoutAlign );
+
+	// FIXME: need a flag per option, and a floating point type [!]
+
+	// LayoutBox
+	RscTop *pClassLayoutBox;
+	nId = pHS->Insert( "LayoutBox" );
+	pClassLayoutBox = new RscClass( nId, RSC_LAYOUT_BOX, pClassLayout );
+	aNmTb.Put( nId, CLASSNAME, pClassLayoutBox );
+
+	// LayoutHBox
+	RscTop *pClassLayoutHBox;
+	nId = pHS->Insert( "LayoutHBox" );
+	pClassLayoutHBox = new RscClass( nId, RSC_LAYOUT_HBOX, pClassLayoutBox );
+	aNmTb.Put( nId, CLASSNAME, pClassLayoutHBox );
+
+	// LayoutVBox
+	RscTop *pClassLayoutVBox;
+	nId = pHS->Insert( "LayoutVBox" );
+	pClassLayoutVBox = new RscClass( nId, RSC_LAYOUT_VBOX, pClassLayoutBox );
+	aNmTb.Put( nId, CLASSNAME, pClassLayoutVBox );
+
+	return pClassLayout;
+}
+
 /*************************************************************************
 |*	  RscTypCont::InitClassWindow()
 *************************************************************************/
@@ -315,7 +380,7 @@ RscTop * RscTypCont::InitClassWindow( Rs
 		// Variable einfuegen
 		nVarId = aNmTb.Put( "_RscExtraFlags", VARNAME );
 		pClassWindow->SetVariable( nVarId, pFlag, NULL,
-																		VAR_HIDDEN | VAR_NOENUM );
+					   VAR_HIDDEN | VAR_NOENUM );
 
 		aBaseLst.Insert(
 			pClient = new RscClient( pHS->Insert( "BOOL" ), RSC_NOTYPE,
@@ -373,6 +438,8 @@ RscTop * RscTypCont::InitClassWindow( Rs
 	pClassWindow->SetVariable( nId, &aLong, NULL, 0, WINDOW_EXTRALONG );
 	nId = aNmTb.Put( "UniqueId", VARNAME );
 	pClassWindow->SetVariable( nId, &aLong, NULL, 0, WINDOW_UNIQUEID );
+	nId = aNmTb.Put( "LayoutId", VARNAME );
+	pClassWindow->SetVariable( nId, &aIdNoZeroUShort, NULL, 0, WINDOW_LAYOUT );
 
 	return( pClassWindow );
 }
Index: rsc/source/parser/rscinit.cxx
===================================================================
RCS file: /cvs/gsl/rsc/source/parser/rscinit.cxx,v
retrieving revision 1.7
diff -u -p -u -r1.7 rscinit.cxx
--- rsc/source/parser/rscinit.cxx	2 Jul 2002 14:44:00 -0000	1.7
+++ rsc/source/parser/rscinit.cxx	26 Aug 2003 14:48:28 -0000
@@ -517,6 +517,8 @@ void RscTypCont::Init()
 	pClassWindow = InitClassWindow( pClassMgr, pMapUnit,
 									pLangGeometry );
 	pRoot->Insert( pClassWindow );
+
+	InitClassLayout( pClassMgr );
 }
 {
 
Index: rsc/source/res/rsccont.cxx
===================================================================
RCS file: /cvs/gsl/rsc/source/res/rsccont.cxx,v
retrieving revision 1.2
diff -u -p -u -r1.2 rsccont.cxx
--- rsc/source/res/rsccont.cxx	10 Oct 2001 11:51:25 -0000	1.2
+++ rsc/source/res/rsccont.cxx	26 Aug 2003 14:48:32 -0000
@@ -292,14 +292,14 @@ RSCINST RscBaseCont::SearchEle( const RS
 |*
 *************************************************************************/
 ERRTYPE RscBaseCont::GetElement( const RSCINST & rInst, const RscId & rEleName,
-								 RscTop * pCreateClass,
-								 const RSCINST & rCreateInst, RSCINST * pGetInst )
+				 RscTop * pCreateClass,
+				 const RSCINST & rCreateInst, RSCINST * pGetInst )
 {
 	RscBaseContInst * pClassData;
 	RSCINST 		  aTmpI;
 	ERRTYPE 		  aError;
 
-	if( !bNoId && !rEleName.IsId() )
+	if( !bNoId && !rEleName.IsId() && !pCreateClass->IsLayout() )
 		aError = WRN_CONT_NOID;
 	pClassData = (RscBaseContInst *)(rInst.pData + nOffInstData);
 
@@ -924,6 +924,11 @@ ERRTYPE RscBaseCont::ContWriteRc( const 
 	if( bExtra || bNoId )
 	{ // Nur Subresourcen schreiben, wenn bExtra == TRUE
 		pClassData = (RscBaseContInst *)(rInst.pData + nOffInstData);
+
+		if( rInst.pClass->IsLayout() ) {
+			rMem.Put( (USHORT) 0x3c3e ); // helpful visible marker.
+			rMem.Put( (USHORT) pClassData->nEntries );
+		}
 
 		for( i = 0; i < pClassData->nEntries && aError.IsOk(); i++ ){
 			aError = pClassData->pEntries[ i ].aInst.pClass->
