--- tools/inc/solar.h	2005-05-16 14:55:18.163486499 +0200
+++ tools/inc/solar.h	2005-05-16 14:55:13.244029682 +0200
@@ -169,12 +169,12 @@ inline USHORT	SVBT16ToShort( const SVBT1
 												   + ((USHORT)p[1] <<  8); }
 #endif
 #if defined OSL_LITENDIAN && SAL_TYPES_ALIGNMENT4 == 1
-inline ULONG	SVBT32ToLong ( const SVBT32 p ) { return *(ULONG*)p; }
+inline sal_uInt32	SVBT32ToLong ( const SVBT32 p ) { return *(sal_uInt32*)p; }
 #else
-inline ULONG	SVBT32ToLong ( const SVBT32 p ) { return (ULONG)p[0]
-												   + ((ULONG)p[1] <<  8)
-												   + ((ULONG)p[2] << 16)
-												   + ((ULONG)p[3] << 24); }
+inline sal_uInt32	SVBT32ToLong ( const SVBT32 p ) { return (sal_uInt32)p[0]
+												   + ((sal_uInt32)p[1] <<  8)
+												   + ((sal_uInt32)p[2] << 16)
+												   + ((sal_uInt32)p[3] << 24); }
 #endif
 #if defined OSL_LITENDIAN && SAL_TYPES_ALIGNMENT8 == 1
 inline double	SVBT64ToDouble( const SVBT64 p ) { return *(double*)p; }
@@ -210,9 +210,9 @@ inline void 	ShortToSVBT16( USHORT n, SV
 													  p[1] = (BYTE)(n >>  8); }
 #endif
 #if defined OSL_LITENDIAN && SAL_TYPES_ALIGNMENT4 == 1
-inline void 	LongToSVBT32 ( ULONG  n, SVBT32 p ) { *(ULONG*)p = n; }
+inline void 	LongToSVBT32 ( sal_uInt32  n, SVBT32 p ) { *(sal_uInt32*)p = n; }
 #else
-inline void 	LongToSVBT32 ( ULONG  n, SVBT32 p ) { p[0] = (BYTE) n;
+inline void 	LongToSVBT32 ( sal_uInt32  n, SVBT32 p ) { p[0] = (BYTE) n;
 													  p[1] = (BYTE)(n >>  8);
 													  p[2] = (BYTE)(n >> 16);
 													  p[3] = (BYTE)(n >> 24); }
