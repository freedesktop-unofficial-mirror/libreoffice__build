--- extensions/source/dbpilots/commonpagesdbp.cxx	2004-11-16 10:52:32.000000000 +0100
+++ extensions/source/dbpilots/commonpagesdbp.cxx	2005-01-03 09:01:31.798173653 +0100
@@ -220,7 +220,7 @@ namespace dbp
             for ( USHORT nLookup = 0; nLookup < m_aTable.GetEntryCount(); ++nLookup )
             {
                 if ( m_aTable.GetEntry( nLookup ) == sLookup )
-                    if ( reinterpret_cast< sal_Int32 >( m_aTable.GetEntryData( nLookup ) ) == nCommandType )
+                    if ( reinterpret_cast< sal_IntPtr >( m_aTable.GetEntryData( nLookup ) ) == nCommandType )
                     {
                         m_aTable.SelectEntryPos( nLookup );
                         break;
@@ -246,7 +246,7 @@ namespace dbp
 
             ::rtl::OUString sDataSource = m_aDatasource.GetSelectEntry();
             ::rtl::OUString sCommand = m_aTable.GetSelectEntry();
-            sal_Int32 nCommandType = reinterpret_cast< sal_Int32 >( m_aTable.GetEntryData( m_aTable.GetSelectEntryPos() ) );
+            sal_Int32 nCommandType = reinterpret_cast< sal_IntPtr >( m_aTable.GetEntryData( m_aTable.GetSelectEntryPos() ) );
 
 			rContext.xForm->setPropertyValue( ::rtl::OUString::createFromAscii("DataSourceName"), makeAny( sDataSource ) );
 			rContext.xForm->setPropertyValue( ::rtl::OUString::createFromAscii("Command"), makeAny( sCommand ) );
--- extensions/source/dbpilots/gridwizard.cxx	2004-11-29 09:07:52.000000000 +0100
+++ extensions/source/dbpilots/gridwizard.cxx	2005-01-03 09:01:50.686906628 +0100
@@ -469,7 +469,7 @@ namespace dbp
 		// the index of the selected entry
 		WizardState nSelected = bMoveRight ? m_aExistFields.GetSelectEntryPos() : m_aSelFields.GetSelectEntryPos();
 		// the (original) relative position of the entry
-		sal_Int32 nRelativeIndex = reinterpret_cast<sal_Int32>(bMoveRight ? m_aExistFields.GetEntryData(nSelected) : m_aSelFields.GetEntryData(nSelected));
+		sal_IntPtr nRelativeIndex = reinterpret_cast<sal_IntPtr>(bMoveRight ? m_aExistFields.GetEntryData(nSelected) : m_aSelFields.GetEntryData(nSelected));
 
 		WizardState nInsertPos = LISTBOX_APPEND;
 		if (!bMoveRight)
@@ -477,7 +477,7 @@ namespace dbp
 			nInsertPos = 0;
 			while (nInsertPos < rMoveTo.GetEntryCount())
 			{
-				if (reinterpret_cast<sal_Int32>(rMoveTo.GetEntryData(nInsertPos)) > nRelativeIndex)
+				if (reinterpret_cast<sal_IntPtr>(rMoveTo.GetEntryData(nInsertPos)) > nRelativeIndex)
 					break;
 				++nInsertPos;
 			}
--- extensions/source/plugin/base/xplugin.cxx	2004-03-17 11:14:07.000000000 +0100
+++ extensions/source/plugin/base/xplugin.cxx	2005-01-03 09:41:18.903842954 +0100
@@ -117,7 +117,7 @@ void PluginDisposer::onShot()
     {
         if( m_pPlugin->isDisposable() )
         {
-            sal_uInt32 nEvent;
+            ULONG nEvent;
             Application::PostUserEvent( nEvent, LINK( m_pPlugin, XPlugin_Impl, secondLevelDispose ), (void*)m_pPlugin );
         }
     }
--- extensions/source/plugin/unx/npnapi.cxx	2004-10-15 12:12:17.000000000 +0200
+++ extensions/source/plugin/unx/npnapi.cxx	2005-01-03 09:33:08.741501767 +0100
@@ -23,7 +23,7 @@ void* CreateNewShell( void**, XLIB_Windo
 // begin Netscape plugin api calls
 extern "C" {
 
-static void* l_NPN_MemAlloc( UINT32 nBytes )
+static void* l_NPN_MemAlloc( uint32 nBytes )
 {
 	void* pMem = new char[nBytes];
     return pMem;
@@ -34,7 +34,7 @@ static void l_NPN_MemFree( void* pMem )
     delete [] (char*)pMem;
 }
     
-static UINT32 l_NPN_MemFlush( UINT32 nSize )
+static uint32 l_NPN_MemFlush( uint32 nSize )
 {
     return 0;
 }
@@ -165,7 +165,7 @@ static NPError l_NPN_NewStream( NPP inst
 	return aRet;
 }
 
-static NPError l_NPN_PostURLNotify( NPP instance, const char* url, const char* target, UINT32 len, const char* buf, NPBool file, void* notifyData )
+static NPError l_NPN_PostURLNotify( NPP instance, const char* url, const char* target, uint32 len, const char* buf, NPBool file, void* notifyData )
 {
 	UINT32 nInstance = pConnector->GetNPPID( instance );
     if( nInstance == PluginConnector::UnknownNPPID )
@@ -190,7 +190,7 @@ static NPError l_NPN_PostURLNotify( NPP 
 	return aRet;
 }
 
-static NPError l_NPN_PostURL( NPP instance, const char* url, const char* window, UINT32 len, const char* buf, NPBool file )
+static NPError l_NPN_PostURL( NPP instance, const char* url, const char* window, uint32 len, const char* buf, NPBool file )
 {
 	UINT32 nInstance = pConnector->GetNPPID( instance );
     if( nInstance == PluginConnector::UnknownNPPID )
--- extensions/source/svg/svgaction.cxx	2004-12-29 18:59:51.347956000 +0100
+++ extensions/source/svg/svgaction.cxx	2005-01-03 09:55:20.309543204 +0100
@@ -819,7 +819,7 @@ void SVGActionWriter::ImplWriteText( con
 		{
 			pOwnArray = NULL;
 			aNormSize = Size( mpVDev->GetTextWidth( aText ), 0 );
-			pDX = pDXArray;
+			pDX = const_cast< sal_Int32* >( pDXArray );
 		}
 		else
 		{	
--- extensions/source/svg/svgprinter.cxx	2004-05-03 15:53:06.000000000 +0200
+++ extensions/source/svg/svgprinter.cxx	2005-01-03 09:54:12.502253873 +0100
@@ -106,7 +106,7 @@ protected:
 	virtual void			_ExportAutoStyles() {}
 	virtual void			_ExportContent() {}
 	virtual void			_ExportMasterStyles() {}
-	virtual ULONG			exportDoc( enum ::xmloff::token::XMLTokenEnum eClass = ::xmloff::token::XML_TOKEN_INVALID ) { return 0; }
+	virtual sal_uInt32		exportDoc( enum ::xmloff::token::XMLTokenEnum eClass = ::xmloff::token::XML_TOKEN_INVALID ) { return 0; }
 							
 public:						
 							
--- extensions/source/svg/svgwriter.cxx	2004-05-03 15:53:17.000000000 +0200
+++ extensions/source/svg/svgwriter.cxx	2005-01-03 09:53:54.208413278 +0100
@@ -80,7 +80,7 @@ protected:
 	virtual void			_ExportAutoStyles() {}
 	virtual void			_ExportContent() {}
 	virtual void			_ExportMasterStyles() {}
-	virtual ULONG			exportDoc( enum ::xmloff::token::XMLTokenEnum eClass ) { return 0; }
+	virtual sal_uInt32		exportDoc( enum ::xmloff::token::XMLTokenEnum eClass ) { return 0; }
 							
 public:						
 							
