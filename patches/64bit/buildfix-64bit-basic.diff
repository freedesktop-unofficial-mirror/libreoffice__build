--- basic/inc/sbxdef.hxx	17 Mar 2004 13:25:37 -0000	1.5
+++ basic/inc/sbxdef.hxx	21 Jul 2004 17:34:07 -0000	1.5.132.1
@@ -88,54 +88,54 @@ enum SbxClassType {			// SBX-Klassen-IDs
 #define _SBX_DATA_TYPE
 
 enum SbxDataType {
-	SbxEMPTY 	  =  0,	// * Uninitialized
-	SbxNULL 	  =  1,	// * Contains no valid data
-	SbxINTEGER	  =  2,	// * Integer (INT16)
-	SbxLONG		  =  3,	// * Long integer (INT32)
-	SbxSINGLE	  =  4,	// * Single-precision floating point number (float)
-	SbxDOUBLE	  =  5,	// * Double-precision floating point number (double)
+	SbxEMPTY      =  0,	// * Uninitialized
+	SbxNULL       =  1,	// * Contains no valid data
+	SbxINTEGER    =  2,	// * Integer (INT16)
+	SbxLONG       =  3,	// * Long integer (INT32)
+	SbxSINGLE     =  4,	// * Single-precision floating point number (float)
+	SbxDOUBLE     =  5,	// * Double-precision floating point number (double)
 	SbxCURRENCY   =  6,	//   Currency (INT64)
-	SbxDATE		  =  7,	// * Date (double)
-	SbxSTRING	  =  8,	// * String (StarView)
+	SbxDATE       =  7,	// * Date (double)
+	SbxSTRING     =  8,	// * String (StarView)
 	SbxOBJECT     =  9,	// * SbxBase object pointer
 	SbxERROR      = 10,	// * Error (UINT16)
-	SbxBOOL		  = 11,	// * Boolean (0 or -1)
+	SbxBOOL       = 11,	// * Boolean (0 or -1)
 	SbxVARIANT    = 12,	// * Anzeige fuer varianten Datentyp
 	SbxDATAOBJECT = 13,	// * Common data object w/o ref count
 
-	SbxCHAR		  = 16,	// * signed char
-	SbxBYTE 	  = 17,	// * unsigned char
-	SbxUSHORT	  = 18,	// * unsigned short (UINT16)
-	SbxULONG 	  = 19,	// * unsigned long (UINT32)
-	SbxLONG64	  = 20,	//   signed 64-bit int
-	SbxULONG64	  = 21,	//   unsigned 64-bit int
-	SbxINT		  = 22,	// * signed machine-dependent int
-	SbxUINT		  = 23,	// * unsigned machine-dependent int
-	SbxVOID		  = 24,	// * no value (= SbxEMPTY)
-	SbxHRESULT	  = 25,	//   HRESULT
-	SbxPOINTER	  = 26,	//   generic pointer
-	SbxDIMARRAY	  = 27,	//   dimensioned array
-	SbxCARRAY	  = 28,	//   C style array
-	SbxUSERDEF	  = 29, //   user defined
-	SbxLPSTR	  = 30,	// * null terminated string
-	SbxLPWSTR	  = 31,	//   wide null terminated string
+	SbxCHAR       = 16,	// * signed char
+	SbxBYTE       = 17,	// * unsigned char
+	SbxUSHORT     = 18,	// * unsigned short (UINT16)
+	SbxULONG      = 19,	// * unsigned long (UINT32)
+	SbxLONG64     = 20,	//   signed 64-bit int
+	SbxULONG64    = 21,	//   unsigned 64-bit int
+	SbxINT        = 22,	// * NOTE: deprecated and aliased to SbxLONG
+	SbxUINT       = 23,	// * NOTE: deprecated and aliased to SbxULONG
+	SbxVOID       = 24,	// * no value (= SbxEMPTY)
+	SbxHRESULT    = 25,	//   HRESULT
+	SbxPOINTER    = 26,	//   generic pointer
+	SbxDIMARRAY   = 27,	//   dimensioned array
+	SbxCARRAY     = 28,	//   C style array
+	SbxUSERDEF    = 29, //   user defined
+	SbxLPSTR      = 30,	// * null terminated string
+	SbxLPWSTR     = 31,	//   wide null terminated string
 	SbxCoreSTRING = 32,	//   AB 10.4.97, fuer GetCoreString(), nur zum Konvertieren
-	SbxWSTRING	  = 33,	//   AB 4.10.2000 Reimplemented for backwards compatibility (#78919)
-	SbxWCHAR	  = 34,	//   AB 4.10.2000 Reimplemented for backwards compatibility (#78919)
-	SbxSALINT64	  = 35,	//   for UNO hyper
+	SbxWSTRING    = 33,	//   AB 4.10.2000 Reimplemented for backwards compatibility (#78919)
+	SbxWCHAR      = 34,	//   AB 4.10.2000 Reimplemented for backwards compatibility (#78919)
+	SbxSALINT64   = 35,	//   for UNO hyper
 	SbxSALUINT64  = 36,	//   for UNO unsigned hyper
 	SbxDECIMAL    = 37,	//   for UNO/automation Decimal
 
-	SbxVECTOR = 0x1000,	// simple counted array
-	SbxARRAY  = 0x2000,	// array
-	SbxBYREF  = 0x4000,	// access by reference
+	SbxVECTOR     = 0x1000,	// simple counted array
+	SbxARRAY      = 0x2000,	// array
+	SbxBYREF      = 0x4000,	// access by reference
 
-	SbxSV1 	  = 128,  	// first defined data type for StarView
-	SbxMEMORYSTREAM,	// SvMemoryStream
+	SbxSV1        = 128,  	// first defined data type for StarView
+	SbxMEMORYSTREAM,		// SvMemoryStream
 	SbxSTORAGE,			// SvStorage
 
-	SbxUSER1  = 256,  	// first user defined data type
-	SbxUSERn  = 2047  	// last user defined data type
+	SbxUSER1      = 256,  	// first user defined data type
+	SbxUSERn      = 2047  	// last user defined data type
 };
 
 #endif
--- basic/inc/sbxvar.hxx	17 Mar 2004 13:25:56 -0000	1.7
+++ basic/inc/sbxvar.hxx	21 Jan 2005 15:09:33 -0000	1.7.132.2
@@ -81,19 +81,23 @@
 
 struct SbxINT64
 {
-	INT32 nHigh; UINT32 nLow;
+	sal_Int32 nHigh; sal_uInt32 nLow;
 
 #if _SOLAR__PRIVATE
 #if FALSE
-	SbxINT64()           : nHigh( 0 ), nLow( 0 ) {}
-	SbxINT64( UINT8  n ) : nHigh( 0 ), nLow( n ) {}
-	SbxINT64( UINT16 n ) : nHigh( 0 ), nLow( n ) {}
-	SbxINT64( UINT32 n ) : nHigh( 0 ), nLow( n ) {}
+	SbxINT64()               : nHigh( 0 ), nLow( 0 ) {}
+	SbxINT64( sal_uInt8  n ) : nHigh( 0 ), nLow( n ) {}
+	SbxINT64( sal_uInt16 n ) : nHigh( 0 ), nLow( n ) {}
+	SbxINT64( sal_uInt32 n ) : nHigh( 0 ), nLow( n ) {}
+#if 0
 	SbxINT64( unsigned int n ) : nHigh( 0 ), nLow( n ) {}
-	SbxINT64( INT8   n ) : nHigh( n < 0 ? -1 : 0 ), nLow( n ) {}
-	SbxINT64( INT16  n ) : nHigh( n < 0 ? -1 : 0 ), nLow( n ) {}
-	SbxINT64( INT32  n ) : nHigh( n < 0 ? -1 : 0 ), nLow( n ) {}
-	SbxINT64( int    n ) : nHigh( n < 0 ? -1 : 0 ), nLow( n ) {}
+#endif
+	SbxINT64( sal_Int8   n ) : nHigh( n < 0 ? -1 : 0 ), nLow( n ) {}
+	SbxINT64( sal_Int16  n ) : nHigh( n < 0 ? -1 : 0 ), nLow( n ) {}
+	SbxINT64( sal_Int32  n ) : nHigh( n < 0 ? -1 : 0 ), nLow( n ) {}
+#if 0
+	SbxINT64( int        n ) : nHigh( n < 0 ? -1 : 0 ), nLow( n ) {}
+#endif
 	SbxINT64( SbxINT64 &r ) : nHigh( r.nHigh ), nLow( r.nLow ) {}
 
 	SbxINT64( BigInt &r );
@@ -101,7 +105,7 @@ struct SbxINT64
 #endif
 	void CHS()
 	{
-		nLow  ^= (UINT32)-1;
+		nLow  ^= (sal_uInt32)-1;
 		nHigh ^= -1;
 		nLow++;
 		if( !nLow )
@@ -113,16 +117,16 @@ struct SbxINT64
 	{
 		if( n >= 0 )
 		{
-			nHigh = (INT32)(n / (double)4294967296.0);
-			nLow  = (UINT32)(n - ((double)nHigh * (double)4294967296.0));
+			nHigh = (sal_Int32)(n / (double)4294967296.0);
+			nLow  = (sal_uInt32)(n - ((double)nHigh * (double)4294967296.0));
 		}
 		else {
-			nHigh = (INT32)(-n / (double)4294967296.0);
-			nLow  = (UINT32)(-n - ((double)nHigh * (double)4294967296.0));
+			nHigh = (sal_Int32)(-n / (double)4294967296.0);
+			nLow  = (sal_uInt32)(-n - ((double)nHigh * (double)4294967296.0));
 			CHS();
 		}
 	}
-	void Set(INT32 n) { nHigh = n < 0 ? -1 : 0; nLow = n; }
+	void Set(sal_Int32 n) { nHigh = n < 0 ? -1 : 0; nLow = n; }
 
 	void SetMax()  { nHigh = 0x7FFFFFFF; nLow = 0xFFFFFFFF; }
 	void SetMin()  { nHigh = 0x80000000; nLow = 0x00000000; }
@@ -162,15 +166,15 @@ struct SbxINT64
 
 struct SbxUINT64
 {
-	UINT32 nHigh; UINT32 nLow;
+	sal_uInt32 nHigh; sal_uInt32 nLow;
 #if _SOLAR__PRIVATE
 	void Set(double n)
 	{
-		nHigh = (UINT32)(n / (double)4294967296.0);
-		nLow  = (UINT32)(n - ((double)nHigh * (double)4294967296.0));
+		nHigh = (sal_uInt32)(n / (double)4294967296.0);
+		nLow  = (sal_uInt32)(n - ((double)nHigh * (double)4294967296.0));
 	}
 
-	void Set(UINT32 n) { nHigh = 0; nLow = n; }
+	void Set(sal_uInt32 n) { nHigh = 0; nLow = n; }
 
 	void SetMax()  { nHigh = 0xFFFFFFFF; nLow = 0xFFFFFFFF; }
 	void SetMin()  { nHigh = 0x00000000; nLow = 0x00000000; }
@@ -212,54 +216,60 @@ class SbxDecimal;
 struct SbxValues
 {
 	union {
-		sal_Unicode		nChar;
-		BYTE			nByte;
-		INT16			nInteger;
-		INT32           nLong;
-		UINT16          nUShort;
-		UINT32          nULong;
+		sal_Unicode     nChar;
+		sal_uInt8       nByte;
+		sal_Int16       nInteger;
+		sal_Int32       nLong;
+		sal_uInt16      nUShort;
+		sal_uInt32      nULong;
 		float           nSingle;
 		double          nDouble;
 		SbxINT64        nLong64;
 		SbxUINT64       nULong64;
 		sal_Int64       nInt64;
 		sal_uInt64      uInt64;
+#if 0
 		int             nInt;
 		unsigned int    nUInt;
+#endif
 		String*         pString;
-		SbxDecimal*		pDecimal;
+		SbxDecimal*     pDecimal;
 
 		SbxBase*        pObj;
 		sal_Unicode*    pChar;
-		BYTE*	        pByte;
-		INT16*	        pInteger;
-		INT32*	        pLong;
-		UINT16*	        pUShort;
-		UINT32*	        pULong;
-		float*	        pSingle;
-		double*	        pDouble;
+		sal_uInt8*      pByte;
+		sal_Int16*      pInteger;
+		sal_Int32*      pLong;
+		sal_uInt16*     pUShort;
+		sal_uInt32*     pULong;
+		float*          pSingle;
+		double*         pDouble;
 		SbxINT64*       pLong64;
 		SbxUINT64*      pULong64;
 		sal_Int64*      pnInt64;
 		sal_uInt64*     puInt64;
-		int*	        pInt;
+#if 0
+		int*            pInt;
 		unsigned int*   pUInt;
-		void*	        pData;
+#endif
+		void*           pData;
 	};
 	SbxDataType	 eType;
 
 	SbxValues(): eType(SbxEMPTY), pData( NULL ) {}
 	SbxValues( SbxDataType e ): eType(e) {}
 	SbxValues( char _nChar ): nChar( _nChar ), eType(SbxCHAR) {}
-	SbxValues( BYTE _nByte ): nByte( _nByte ), eType(SbxBYTE) {}
-	SbxValues( short _nInteger ): nInteger( _nInteger ), eType(SbxINTEGER ) {}
-	SbxValues( long _nLong ): nLong( _nLong ), eType(SbxLONG) {}
-	SbxValues( USHORT _nUShort ): nUShort( _nUShort ), eType(SbxUSHORT) {}
-	SbxValues( ULONG _nULong ): nULong( _nULong ), eType(SbxULONG) {}
+	SbxValues( sal_uInt8 _nByte ): nByte( _nByte ), eType(SbxBYTE) {}
+	SbxValues( sal_Int16 _nInteger ): nInteger( _nInteger ), eType(SbxINTEGER ) {}
+	SbxValues( sal_Int32 _nLong ): nLong( _nLong ), eType(SbxLONG) {}
+	SbxValues( sal_uInt16 _nUShort ): nUShort( _nUShort ), eType(SbxUSHORT) {}
+	SbxValues( sal_uInt32 _nULong ): nULong( _nULong ), eType(SbxULONG) {}
 	SbxValues( float _nSingle ): nSingle( _nSingle ), eType(SbxSINGLE) {}
 	SbxValues( double _nDouble ): nDouble( _nDouble ), eType(SbxDOUBLE) {}
+#if 0
 	SbxValues( int _nInt ): nInt( _nInt ), eType(SbxINT) {}
 	SbxValues( unsigned int _nUInt ): nUInt( _nUInt ), eType(SbxUINT) {}
+#endif
 	SbxValues( const String* _pString ): pString( (String*) _pString ), eType(SbxSTRING) {}
 	SbxValues( SbxBase* _pObj ): pObj( _pObj ), eType(SbxOBJECT) {}
 	SbxValues( sal_Unicode* _pChar ): pChar( _pChar ), eType(SbxLPSTR) {}
@@ -316,8 +326,8 @@ public:
 	BOOL IsByte()    const { return BOOL( GetType() == SbxBYTE     ); }
 	BOOL IsUShort()  const { return BOOL( GetType() == SbxUSHORT   ); }
 	BOOL IsULong()   const { return BOOL( GetType() == SbxULONG    ); }
-	BOOL IsInt()     const { return BOOL( GetType() == SbxINT      ); }
-	BOOL IsUInt()    const { return BOOL( GetType() == SbxUINT     ); }
+	BOOL IsInt()     const { return BOOL( GetType() == SbxLONG     ); }
+	BOOL IsUInt()    const { return BOOL( GetType() == SbxULONG    ); }
 	BOOL IspChar()   const { return BOOL( GetType() == SbxLPSTR    ); }
 	BOOL IsNumeric() const;
 	BOOL IsNumericRTL() const;	// #41692 Schnittstelle fuer Basic
@@ -333,42 +343,42 @@ public:
 	const SbxValues& GetValues_Impl() const { return aData; }
 	virtual BOOL Put( const SbxValues& );
 
-	SbxINT64 GetCurrency() const;
-	SbxINT64 GetLong64() const;
-	SbxUINT64 GetULong64() const;
-	sal_Int64  GetInt64() const;
-	sal_uInt64 GetUInt64() const;
-	INT16  GetInteger() const;
-	INT32  GetLong() const;
-	float  GetSingle() const;
-	double GetDouble() const;
-	double GetDate() const;
-	BOOL   GetBool() const;
-	UINT16 GetErr() const;
-	const  String& GetString() const;
-	const  String& GetCoreString() const;
-	SbxDecimal* GetDecimal() const;
-	SbxBase* GetObject() const;
-	BOOL	 HasObject() const;
-	void*  GetData() const;
-	sal_Unicode GetChar() const;
-	BYTE   GetByte() const;
-	UINT16 GetUShort() const;
-	UINT32 GetULong() const;
-	int	   GetInt() const;
+	SbxINT64		GetCurrency() const;
+	SbxINT64		GetLong64() const;
+	SbxUINT64		GetULong64() const;
+	sal_Int64		GetInt64() const;
+	sal_uInt64	GetUInt64() const;
+	sal_Int16		GetInteger() const;
+	long		GetLong() const;
+	float		GetSingle() const;
+	double		GetDouble() const;
+	double		GetDate() const;
+	BOOL			GetBool() const;
+	sal_uInt16	GetErr() const;
+	const String&	GetString() const;
+	const String&	GetCoreString() const;
+	SbxDecimal*	GetDecimal() const;
+	SbxBase*		GetObject() const;
+	BOOL			HasObject() const;
+	void*		GetData() const;
+	sal_Unicode	GetChar() const;
+	sal_uInt8		GetByte() const;
+	sal_uInt16	GetUShort() const;
+	ULONG		GetULong() const;
+	sal_uInt32	GetInt() const;
 
 	BOOL PutCurrency( const SbxINT64& );
 	BOOL PutLong64( const SbxINT64& );
 	BOOL PutULong64( const SbxUINT64& );
 	BOOL PutInt64( sal_Int64 );
 	BOOL PutUInt64( sal_uInt64 );
-	BOOL PutInteger( INT16 );
-	BOOL PutLong( INT32 );
+	BOOL PutInteger( sal_Int16 );
+	BOOL PutLong( sal_Int32 );
 	BOOL PutSingle( float );
 	BOOL PutDouble( double );
 	BOOL PutDate( double );
 	BOOL PutBool( BOOL );
-	BOOL PutErr( USHORT );
+	BOOL PutErr( sal_uInt16 );
 	BOOL PutStringExt( const String& );	// mit erweiterter Auswertung (International, "TRUE"/"FALSE")
 	BOOL PutString( const String& );
 	BOOL PutString( const sal_Unicode* );	// Typ = SbxSTRING
@@ -377,10 +387,10 @@ public:
 	BOOL PutObject( SbxBase* );
 	BOOL PutData( void* );
 	BOOL PutChar( sal_Unicode );
-	BOOL PutByte( BYTE );
-	BOOL PutUShort( UINT16 );
-	BOOL PutULong( UINT32 );
-	BOOL PutInt( int );
+	BOOL PutByte( sal_uInt8 );
+	BOOL PutUShort( sal_uInt16 );
+	BOOL PutULong( sal_uInt32 );
+	BOOL PutInt( sal_uInt32 );
 	BOOL PutEmpty();
 	BOOL PutNull();
 
--- basic/source/sbx/sbxvals.cxx	18 Sep 2000 16:59:04 -0000	1.1.1.1
+++ basic/source/sbx/sbxvals.cxx	21 Jul 2004 17:34:15 -0000	1.1.1.1.650.1
@@ -85,7 +85,7 @@ BOOL BigInt::INT64( SbxINT64 *p ) const
 			p->CHS();
 	}
 	else
-		p->Set( (INT32)nVal );
+		p->Set( sal_Int32( nVal ) );
 
 	return TRUE;
 }
--- basic/source/sbx/sbxvalue.cxx	9 Sep 2004 07:42:07 -0000	1.10
+++ basic/source/sbx/sbxvalue.cxx	21 Jan 2005 15:09:37 -0000	1.9.8.3
@@ -284,6 +284,7 @@ SbxValue::SbxValue( SbxDataType t, void*
 		case SbxULONG64:	n |= SbxBYREF; aData.pULong64 = (SbxUINT64*) p; break;
 		case SbxLONG64:
 		case SbxCURRENCY:	n |= SbxBYREF; aData.pLong64 = (SbxINT64*) p; break;
+		case SbxINT:
 		case SbxLONG:		n |= SbxBYREF; aData.pLong = (INT32*) p; break;
 		case SbxSINGLE:		n |= SbxBYREF; aData.pSingle = (float*) p; break;
 		case SbxDATE:
@@ -295,7 +296,6 @@ SbxValue::SbxValue( SbxDataType t, void*
 		case SbxULONG:		n |= SbxBYREF; aData.pULong = (UINT32*) p; break;
 		case SbxCHAR:		n |= SbxBYREF; aData.pChar = (xub_Unicode*) p; break;
 		case SbxBYTE:		n |= SbxBYREF; aData.pByte = (BYTE*) p; break;
-		case SbxINT:		n |= SbxBYREF; aData.pInt = (int*) p; break;
 		case SbxOBJECT:
 			aData.pObj = (SbxBase*) p;
 			if( p )
@@ -559,6 +559,7 @@ BOOL SbxValue::Get( SbxValues& rRes ) co
 				case SbxNULL:	 break;
 				case SbxVARIANT: rRes = p->aData; break;
 				case SbxINTEGER: rRes.nInteger = ImpGetInteger( &p->aData ); break;
+				case SbxINT:
 				case SbxLONG:	 rRes.nLong = ImpGetLong( &p->aData ); break;
 				case SbxSINGLE:	 rRes.nSingle = ImpGetSingle( &p->aData ); break;
 				case SbxDOUBLE:	 rRes.nDouble = ImpGetDouble( &p->aData ); break;
@@ -569,26 +570,13 @@ BOOL SbxValue::Get( SbxValues& rRes ) co
 				case SbxCHAR:	 rRes.nChar = ImpGetChar( &p->aData ); break;
 				case SbxBYTE:	 rRes.nByte = ImpGetByte( &p->aData ); break;
 				case SbxUSHORT:	 rRes.nUShort = ImpGetUShort( &p->aData ); break;
+				case SbxUINT:
 				case SbxULONG:	 rRes.nULong = ImpGetULong( &p->aData ); break;
 				case SbxLPSTR:
 				case SbxSTRING:	 p->aPic = ImpGetString( &p->aData );
 								 rRes.pString = &p->aPic; break;
 				case SbxCoreSTRING:	p->aPic = ImpGetCoreString( &p->aData );
 									rRes.pString = &p->aPic; break;
-				case SbxINT:
-#if SAL_TYPES_SIZEOFINT == 2
-					rRes.nInt = (int) ImpGetInteger( &p->aData );
-#else
-					rRes.nInt = (int) ImpGetLong( &p->aData );
-#endif
-					break;
-				case SbxUINT:
-#if SAL_TYPES_SIZEOFINT == 2
-					rRes.nUInt = (int) ImpGetUShort( &p->aData );
-#else
-					rRes.nUInt = (int) ImpGetULong( &p->aData );
-#endif
-					break;
 				case SbxOBJECT:
 					if( p->aData.eType == SbxOBJECT )
 						rRes.pObj = p->aData.pObj;
@@ -690,13 +678,12 @@ GET( GetDate,     SbxDATE,       double,
 GET( GetData,     SbxDATAOBJECT, void*,            pData )
 GET( GetDouble,   SbxDOUBLE,     double,           nDouble )
 GET( GetErr,      SbxERROR,      UINT16,           nUShort )
-GET( GetInt,      SbxINT,        int,              nInt )
 GET( GetInteger,  SbxINTEGER,    INT16,            nInteger )
-GET( GetLong,     SbxLONG,       INT32,            nLong )
+GET( GetLong,     SbxLONG,       long,            nLong )
 GET( GetLong64,   SbxLONG64,     SbxINT64,         nLong64 )
 GET( GetObject,   SbxOBJECT,     SbxBase*,         pObj )
 GET( GetSingle,   SbxSINGLE,     float,            nSingle )
-GET( GetULong,    SbxULONG,      UINT32,           nULong )
+GET( GetULong,    SbxULONG,      ULONG,           nULong )
 GET( GetULong64,  SbxULONG64,    SbxUINT64,        nULong64 )
 GET( GetUShort,   SbxUSHORT,     UINT16,           nUShort )
 GET( GetInt64,    SbxSALINT64,   sal_Int64,        nInt64 )
@@ -734,6 +721,7 @@ BOOL SbxValue::Put( const SbxValues& rVa
 				case SbxVOID:
 				case SbxNULL:		break;
 				case SbxINTEGER:	ImpPutInteger( &p->aData, rVal.nInteger ); break;
+				case SbxINT:
 				case SbxLONG:		ImpPutLong( &p->aData, rVal.nLong ); break;
 				case SbxSINGLE:		ImpPutSingle( &p->aData, rVal.nSingle ); break;
 				case SbxDOUBLE:		ImpPutDouble( &p->aData, rVal.nDouble ); break;
@@ -744,23 +732,10 @@ BOOL SbxValue::Put( const SbxValues& rVa
 				case SbxCHAR:		ImpPutChar( &p->aData, rVal.nChar ); break;
 				case SbxBYTE:		ImpPutByte( &p->aData, rVal.nByte ); break;
 				case SbxUSHORT:		ImpPutUShort( &p->aData, rVal.nUShort ); break;
+				case SbxUINT:
 				case SbxULONG:		ImpPutULong( &p->aData, rVal.nULong ); break;
 				case SbxLPSTR:
 				case SbxSTRING:		ImpPutString( &p->aData, rVal.pString ); break;
-				case SbxINT:
-#if SAL_TYPES_SIZEOFINT == 2
-					ImpPutInteger( &p->aData, (INT16) rVal.nInt );
-#else
-					ImpPutLong( &p->aData, (INT32) rVal.nInt );
-#endif
-					break;
-				case SbxUINT:
-#if SAL_TYPES_SIZEOFINT == 2
-					ImpPutUShort( &p->aData, (UINT16) rVal.nUInt );
-#else
-					ImpPutULong( &p->aData, (UINT32) rVal.nUInt );
-#endif
-					break;
 				case SbxOBJECT:
 					if( !p->IsFixed() || p->aData.eType == SbxOBJECT )
 					{
@@ -955,7 +930,6 @@ PUT( PutDate,     SbxDATE,       double,
 PUT( PutData,     SbxDATAOBJECT, void*,            pData )
 PUT( PutDouble,   SbxDOUBLE,     double,           nDouble )
 PUT( PutErr,      SbxERROR,      UINT16,           nUShort )
-PUT( PutInt,      SbxINT,        int,              nInt )
 PUT( PutInteger,  SbxINTEGER,    INT16,            nInteger )
 PUT( PutLong,     SbxLONG,       INT32,            nLong )
 PUT( PutLong64,   SbxLONG64,     const SbxINT64&,  nLong64 )
@@ -1598,6 +1572,7 @@ BOOL SbxValue::LoadData( SvStream& r, US
 		case SbxBOOL:
 		case SbxINTEGER:
 			r >> aData.nInteger; break;
+		case SbxINT:
 		case SbxLONG:
 			r >> aData.nLong; break;
 		case SbxSINGLE:
@@ -1680,30 +1655,9 @@ BOOL SbxValue::LoadData( SvStream& r, US
 		}
 		case SbxBYTE:
 			r >> aData.nByte; break;
+		case SbxUINT:
 		case SbxULONG:
 			r >> aData.nULong; break;
-		case SbxINT:
-		{
-			BYTE n;
-			r >> n;
-			// Passt der Int auf diesem System?
-			if( n > SAL_TYPES_SIZEOFINT )
-				r >> aData.nLong, aData.eType = SbxLONG;
-			else
-				r >> aData.nInt;
-			break;
-		}
-		case SbxUINT:
-		{
-			BYTE n;
-			r >> n;
-			// Passt der UInt auf diesem System?
-			if( n > SAL_TYPES_SIZEOFINT )
-				r >> aData.nULong, aData.eType = SbxULONG;
-			else
-				r >> (sal_uInt32&)aData.nUInt;
-			break;
-		}
 		case SbxEMPTY:
 		case SbxNULL:
 		case SbxVOID:
@@ -1734,6 +1688,7 @@ BOOL SbxValue::StoreData( SvStream& r ) 
 		case SbxBOOL:
 		case SbxINTEGER:
 			r << aData.nInteger; break;
+		case SbxINT:
 		case SbxLONG:
 			r << aData.nLong; break;
 		case SbxDATE:
@@ -1794,20 +1749,9 @@ BOOL SbxValue::StoreData( SvStream& r ) 
 		}
 		case SbxBYTE:
 			r << aData.nByte; break;
+		case SbxUINT:
 		case SbxULONG:
 			r << aData.nULong; break;
-		case SbxINT:
-		{
-			BYTE n = SAL_TYPES_SIZEOFINT;
-			r << n << (sal_Int32)aData.nInt;
-			break;
-		}
-		case SbxUINT:
-		{
-			BYTE n = SAL_TYPES_SIZEOFINT;
-			r << n << (sal_uInt32)aData.nUInt;
-			break;
-		}
 		case SbxEMPTY:
 		case SbxNULL:
 		case SbxVOID:
