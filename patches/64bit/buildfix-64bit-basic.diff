--- basic/source/inc/runtime.hxx	2004-11-29 08:54:49.000000000 +0100
+++ basic/source/inc/runtime.hxx	2004-12-27 14:40:08.830891548 +0100
@@ -210,7 +210,7 @@ class SbiInstance
 	SvNumberFormatter* pNumberFormatter;
     LanguageType    meFormatterLangType;
     DateFormat      meFormatterDateFormat;
-	ULONG 			nStdDateIdx, nStdTimeIdx, nStdDateTimeIdx;
+	sal_uInt32 		nStdDateIdx, nStdTimeIdx, nStdDateTimeIdx;
 
 	SbError      	nErr;     		// aktueller Fehlercode
 	String		    aErrorMsg;		// letzte Error-Message fuer $ARG
@@ -260,13 +260,13 @@ public:
 	SbiRTLData* GetRTLData() const { return (SbiRTLData*)&aRTLData; }
 
 	SvNumberFormatter* GetNumberFormatter();
-	ULONG GetStdDateIdx() const { return nStdDateIdx; }
-	ULONG GetStdTimeIdx() const { return nStdTimeIdx; }
-	ULONG GetStdDateTimeIdx() const { return nStdDateTimeIdx; }
+	sal_uInt32 GetStdDateIdx() const { return nStdDateIdx; }
+	sal_uInt32 GetStdTimeIdx() const { return nStdTimeIdx; }
+	sal_uInt32 GetStdDateTimeIdx() const { return nStdDateTimeIdx; }
 
 	// #39629# NumberFormatter auch statisch anbieten
 	static void PrepareNumberFormatter( SvNumberFormatter*& rpNumberFormatter,
-		ULONG &rnStdDateIdx, ULONG &rnStdTimeIdx, ULONG &rnStdDateTimeIdx,
+		sal_uInt32 &rnStdDateIdx, sal_uInt32 &rnStdTimeIdx, sal_uInt32 &rnStdDateTimeIdx,
         LanguageType* peFormatterLangType=NULL, DateFormat* peFormatterDateFormat=NULL );
 };
 
--- basic/source/runtime/methods.cxx	2004-11-29 08:54:51.000000000 +0100
+++ basic/source/runtime/methods.cxx	2004-12-27 14:38:27.311429002 +0100
@@ -1753,11 +1753,11 @@ RTLFUNC(DateValue)
 			pFormatter = pINST->GetNumberFormatter();
 		else
 		{
-			ULONG n;	// Dummy
+			sal_uInt32 n;	// Dummy
 			SbiInstance::PrepareNumberFormatter( pFormatter, n, n, n );
 		}
 
-		ULONG nIndex;
+		sal_uInt32 nIndex;
 		double fResult;
 		String aStr( rPar.Get(1)->GetString() );
 		BOOL bSuccess = pFormatter->IsNumberFormat( aStr, nIndex, fResult );
@@ -1796,11 +1796,11 @@ RTLFUNC(TimeValue)
 			pFormatter = pINST->GetNumberFormatter();
 		else
 		{
-			ULONG n;	// Dummy
+			sal_uInt32 n;	// Dummy
 			SbiInstance::PrepareNumberFormatter( pFormatter, n, n, n );
 		}
 
-		ULONG nIndex;
+		sal_uInt32 nIndex;
 		double fResult;
 		BOOL bSuccess = pFormatter->IsNumberFormat( rPar.Get(1)->GetString(),
 												   nIndex, fResult );
@@ -1977,7 +1977,7 @@ RTLFUNC(Time)
 
 			// #39629 pINST pruefen, kann aus URL-Zeile gerufen werden
 			SvNumberFormatter* pFormatter = NULL;
-			ULONG nIndex;
+			sal_uInt32 nIndex;
 			if( pINST )
 			{
 				pFormatter = pINST->GetNumberFormatter();
@@ -1985,7 +1985,7 @@ RTLFUNC(Time)
 			}
 			else
 			{
-				ULONG n;	// Dummy
+				sal_uInt32 n;	// Dummy
 				SbiInstance::PrepareNumberFormatter( pFormatter, n, nIndex, n );
 			}
 
@@ -2028,7 +2028,7 @@ RTLFUNC(Date)
 
 			// #39629 pINST pruefen, kann aus URL-Zeile gerufen werden
 			SvNumberFormatter* pFormatter = NULL;
-			ULONG nIndex;
+			sal_uInt32 nIndex;
 			if( pINST )
 			{
 				pFormatter = pINST->GetNumberFormatter();
@@ -2036,7 +2036,7 @@ RTLFUNC(Date)
 			}
 			else
 			{
-				ULONG n;	// Dummy
+				sal_uInt32 n;	// Dummy
 				SbiInstance::PrepareNumberFormatter( pFormatter, nIndex, n, n );
 			}
 
@@ -2922,7 +2922,7 @@ RTLFUNC(FileDateTime)
 
 		// #39629 pINST pruefen, kann aus URL-Zeile gerufen werden
 		SvNumberFormatter* pFormatter = NULL;
-		ULONG nIndex;
+		sal_uInt32 nIndex;
 		if( pINST )
 		{
 			pFormatter = pINST->GetNumberFormatter();
@@ -2930,7 +2930,7 @@ RTLFUNC(FileDateTime)
 		}
 		else
 		{
-			ULONG n;	// Dummy
+			sal_uInt32 n;	// Dummy
 			SbiInstance::PrepareNumberFormatter( pFormatter, n, n, nIndex );
 		}
 
--- basic/source/runtime/runtime.cxx	2004-11-29 08:54:52.000000000 +0100
+++ basic/source/runtime/runtime.cxx	2004-12-27 14:40:19.911977290 +0100
@@ -362,7 +362,7 @@ SvNumberFormatter* SbiInstance::GetNumbe
 
 // #39629 NumberFormatter auch statisch anbieten
 void SbiInstance::PrepareNumberFormatter( SvNumberFormatter*& rpNumberFormatter,
-	ULONG &rnStdDateIdx, ULONG &rnStdTimeIdx, ULONG &rnStdDateTimeIdx,
+	sal_uInt32 &rnStdDateIdx, sal_uInt32 &rnStdTimeIdx, sal_uInt32 &rnStdDateTimeIdx,
     LanguageType* peFormatterLangType, DateFormat* peFormatterDateFormat )
 {
 	com::sun::star::uno::Reference< com::sun::star::lang::XMultiServiceFactory > 
