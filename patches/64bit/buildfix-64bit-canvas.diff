Index: canvas/source/vcl/spritecanvashelper.cxx
===================================================================
RCS file: /cvs/gsl/canvas/source/vcl/spritecanvashelper.cxx,v
retrieving revision 1.2
diff -u -r1.2 spritecanvashelper.cxx
--- canvas/source/vcl/spritecanvashelper.cxx	2 Nov 2005 13:04:38 -0000	1.2
+++ canvas/source/vcl/spritecanvashelper.cxx	7 Nov 2005 15:55:02 -0000
@@ -509,20 +509,20 @@
         // otherwise, truncation of size below might leave visible
         // areas uncovered by VDev.
         const ::Point aOutputPosition( 
-            ::std::max( 0L,
+            ::std::max( sal_Int32( 0 ),
                         static_cast< sal_Int32 >(rRequestedArea.getMinX()) ),
-            ::std::max( 0L,
+            ::std::max( sal_Int32( 0 ),
                         static_cast< sal_Int32 >(rRequestedArea.getMinY()) ) );
         // round output size towards +infty. Don't want to truncate a
         // fraction of a sprite pixel... Limit coverage of VDev to
         // output device's area (i.e. not only to total size, but to
         // cover _only_ the visible parts).
         const ::Size aOutputSize( 
-            ::std::max( 0L,
-                        ::std::min( rTargetSizePixel.Width() - aOutputPosition.X(),
+            ::std::max( sal_Int32( 0 ),
+                        ::std::min( static_cast< sal_Int32 >(rTargetSizePixel.Width() - aOutputPosition.X()),
                                     ::canvas::tools::roundUp( rRequestedArea.getMaxX() - aOutputPosition.X() ))),
-            ::std::max( 0L,
-                        ::std::min( rTargetSizePixel.Height() - aOutputPosition.Y(),
+            ::std::max( sal_Int32( 0 ),
+                        ::std::min( static_cast< sal_Int32 >(rTargetSizePixel.Height() - aOutputPosition.Y()),
                                     ::canvas::tools::roundUp( rRequestedArea.getMaxY() - aOutputPosition.Y() ))));
 
         // early exit for empty output area.
