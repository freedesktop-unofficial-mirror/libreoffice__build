--- sal/cpprt/operators_new_delete.cxx	15 Apr 2003 17:40:45 -0000	1.3
+++ sal/cpprt/operators_new_delete.cxx	25 Aug 2004 16:46:45 -0000	1.3.206.1
@@ -180,7 +180,7 @@ static void* allocate (
 	n = rTraits.size (n);
 	for (;;)
 	{
-		void * p = rtl_allocateMemory (sal_uInt32(n));
+		void * p = rtl_allocateMemory (sal_Size(n));
 		if (p != 0)
 			return rTraits.init (p);
 
--- sal/inc/sal/types.h	27 Oct 2004 15:21:17 -0000	1.25
+++ sal/inc/sal/types.h	18 Jan 2005 19:57:05 -0000	1.23.4.6
@@ -121,7 +121,15 @@ typedef unsigned char       sal_uInt8;
 	#define SAL_CONST_INT64(x)       x##i64
 	#define SAL_CONST_UINT64(x)      x##ui64
 #elif defined(__SUNPRO_CC) || defined(__SUNPRO_C) || defined (__GNUC__) || defined(__hpux) || defined (sgi)
-	#if SAL_TYPES_SIZEOFLONGLONG == 8
+	#if SAL_TYPES_SIZEOFLONG == 8
+		typedef signed long int         sal_Int64;
+		typedef unsigned long int       sal_uInt64;
+
+
+		/*  The following are macros that will add the 64 bit constant suffix. */
+		#define SAL_CONST_INT64(x)       x##l
+		#define SAL_CONST_UINT64(x)      x##ul
+	#elif SAL_TYPES_SIZEOFLONGLONG == 8
 		typedef signed long long    sal_Int64;
 		typedef unsigned long long  sal_uInt64;
 
@@ -129,14 +137,6 @@ typedef unsigned char       sal_uInt8;
 		#define SAL_CONST_INT64(x)       x##ll
 		#define SAL_CONST_UINT64(x)      x##ull
 
-	#elif SAL_TYPES_SIZEOFLONG == 8
-		typedef signed long         sal_Int64;
-		typedef unsigned long       sal_uInt64;
-
-
-		/*  The following are macros that will add the 64 bit constant suffix. */
-		#define SAL_CONST_INT64(x)       x##l
-		#define SAL_CONST_UINT64(x)      x##ul
 	#else
 		#error "Could not find 64-bit type, add support for your architecture"
 	#endif
@@ -190,7 +211,15 @@ typedef void *                   sal_Han
 #define SAL_MIN_INT64         ((sal_Int64)  (SAL_CONST_INT64(-0x7FFFFFFFFFFFFFFF) - 1))
 #define SAL_MAX_INT64         ((sal_Int64)  SAL_CONST_INT64(0x7FFFFFFFFFFFFFFF))
 #define SAL_MAX_UINT64        ((sal_uInt64) SAL_CONST_UINT64(0xFFFFFFFFFFFFFFFF))
-  
+
+#if SAL_TYPES_SIZEOFLONG == 4
+#define SAL_MAX_SSIZE		SAL_MAX_INT32
+#define SAL_MAX_SIZE		SAL_MAX_UINT32
+#elif SAL_TYPES_SIZEOFLONG == 8
+#define SAL_MAX_SSIZE		SAL_MAX_INT64
+#define SAL_MAX_SIZE		SAL_MAX_UINT64
+#endif
+
 #if defined(SAL_W32) || defined(SAL_OS2) || defined(SAL_UNX)
 #   define SAL_MAX_ENUM 0x7fffffff
 #elif defined(SAL_W16)
