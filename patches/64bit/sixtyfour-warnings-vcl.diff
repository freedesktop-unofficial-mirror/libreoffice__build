--- vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx	2006-06-21 09:18:02.000000000 +0000
+++ vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx	2006-06-21 12:32:31.000000000 +0000
@@ -555,7 +555,7 @@ BOOL GtkSalGraphics::hitTestNativeContro
 	    gtk_widget_style_get( gScrollHorizWidget, "has-forward-stepper", &has_forward,
 									    "has-secondary-forward-stepper", &has_forward2,
 									    "has-backward-stepper", &has_backward,
-	   								    "has-secondary-backward-stepper", &has_backward2, NULL );
+	   								    "has-secondary-backward-stepper", &has_backward2, (char *)NULL );
         Rectangle aForward;
         Rectangle aBackward;
 
@@ -915,7 +915,7 @@ BOOL GtkSalGraphics::getNativeControlReg
                                  gMenuItemCheckMenuWidget : gMenuItemRadioMenuWidget;
             gtk_widget_style_get( pWidget,
                                   "indicator_size", &indicator_size,
-                                  NULL );
+                                  (char *)NULL );
             rNativeBoundingRegion = rControlRegion;
             Rectangle aIndicatorRect( Point( 0,
                                              (rControlRegion.GetBoundRect().GetHeight()-indicator_size)/2),
@@ -933,7 +933,7 @@ BOOL GtkSalGraphics::getNativeControlReg
         gtk_widget_style_get( widget,
                               "indicator_size", &indicator_size,
                               "indicator_spacing", &indicator_spacing,
-                              NULL);
+                              (char *)NULL);
         indicator_size += 2*indicator_spacing; // guess overpaint of theme
         rNativeBoundingRegion = rControlRegion;
         Rectangle aIndicatorRect( Point( 0,
@@ -983,7 +983,7 @@ BOOL GtkSalGraphics::NWPaintGTKButton(
 								"focus-padding", 	&focusPad,
 					 			"interior_focus",	&interiorFocus,
 								"default_border",	&pBorder,
-								NULL );
+								(char *)NULL );
 
 	// Make sure the border values exist, otherwise use some defaults
 	if ( pBorder )
@@ -1086,7 +1086,7 @@ static Rectangle NWGetButtonArea( Contro
 								"focus-padding", 	&focusPad,
 					 			"interior_focus",	&interiorFocus,
 								"default_border",	&pBorder,
-								NULL );
+								(char *)NULL );
 
 	// Make sure the border values exist, otherwise use some defaults
 	if ( pBorder )
@@ -1139,7 +1139,7 @@ BOOL GtkSalGraphics::NWPaintGTKRadio( Gd
 	NWConvertVCLStateToGTKState( nState, &stateType, &shadowType );
 
     gint indicator_size;
-    gtk_widget_style_get( gRadioWidget, "indicator_size", &indicator_size, NULL);
+    gtk_widget_style_get( gRadioWidget, "indicator_size", &indicator_size, (char *)NULL);
 
     x = rControlRectangle.Left() + (rControlRectangle.GetWidth()-indicator_size)/2;
     y = rControlRectangle.Top() + (rControlRectangle.GetHeight()-indicator_size)/2;
@@ -1197,7 +1197,7 @@ BOOL GtkSalGraphics::NWPaintGTKCheck( Gd
 	NWConvertVCLStateToGTKState( nState, &stateType, &shadowType );
 
     gint indicator_size;
-    gtk_widget_style_get( gCheckWidget, "indicator_size", &indicator_size, NULL);
+    gtk_widget_style_get( gCheckWidget, "indicator_size", &indicator_size, (char *)NULL);
 
     x = rControlRectangle.Left() + (rControlRectangle.GetWidth()-indicator_size)/2;
     y = rControlRectangle.Top() + (rControlRectangle.GetHeight()-indicator_size)/2;
@@ -1296,7 +1296,7 @@ BOOL GtkSalGraphics::NWPaintGTKScrollbar
 									  "stepper_size", &stepper_size,
 									  "trough_border", &trough_border,
 									  "stepper_spacing", &stepper_spacing,
-									  "min_slider_length", &min_slider_length, NULL );
+									  "min_slider_length", &min_slider_length, (char *)NULL );
     gboolean has_forward;
     gboolean has_forward2;
     gboolean has_backward;
@@ -1305,7 +1305,7 @@ BOOL GtkSalGraphics::NWPaintGTKScrollbar
 	gtk_widget_style_get( gScrollHorizWidget, "has-forward-stepper", &has_forward,
 									  "has-secondary-forward-stepper", &has_forward2,
 									  "has-backward-stepper", &has_backward,
-	   								  "has-secondary-backward-stepper", &has_backward2, NULL );
+	   								  "has-secondary-backward-stepper", &has_backward2, (char *)NULL );
 	gint magic = trough_border ? 1 : 0;
     gint nFirst = 0;
 
@@ -1575,7 +1575,7 @@ static Rectangle NWGetScrollButtonRect(	
 	gtk_widget_style_get( gScrollHorizWidget, "slider-width", &slider_width,
 									  "stepper-size", &stepper_size,
 									  "trough-border", &trough_border,
-	   								  "stepper-spacing", &stepper_spacing, NULL );
+	   								  "stepper-spacing", &stepper_spacing, (char *)NULL );
 
     gboolean has_forward;
     gboolean has_forward2;
@@ -1585,7 +1585,7 @@ static Rectangle NWGetScrollButtonRect(	
 	gtk_widget_style_get( gScrollHorizWidget, "has-forward-stepper", &has_forward,
 									  "has-secondary-forward-stepper", &has_forward2,
 									  "has-backward-stepper", &has_backward,
-	   								  "has-secondary-backward-stepper", &has_backward2, NULL );
+	   								  "has-secondary-backward-stepper", &has_backward2, (char *)NULL );
 	gint       buttonWidth;
 	gint       buttonHeight;
 	Rectangle  buttonRect;
@@ -1692,7 +1692,7 @@ static Rectangle NWGetEditBoxPixmapRect(
 
 	// Grab some entry style attributes
 	gtk_widget_style_get( gEditBoxWidget,	"focus-line-width",	&focusWidth,
-					 				"interior-focus",	&interiorFocus, NULL );
+					 				"interior-focus",	&interiorFocus, (char *)NULL );
 
 	if ( !interiorFocus )
 	{
@@ -1843,7 +1843,7 @@ BOOL GtkSalGraphics::NWPaintGTKSpinBox( 
 	}
 
 	NWSetWidgetState( gSpinButtonWidget, nState, stateType );
-	gtk_widget_style_get( gSpinButtonWidget, "shadow_type", &shadowType, NULL );
+	gtk_widget_style_get( gSpinButtonWidget, "shadow_type", &shadowType, (char *)NULL );
 
 	if ( shadowType != GTK_SHADOW_NONE )
 	{
@@ -2053,7 +2053,7 @@ static Rectangle NWGetComboBoxButtonRect
 
 	// Grab some button style attributes
 	gtk_widget_style_get( gDropdownWidget,	"focus-line-width",	&nFocusWidth,
-									"focus-padding", 	&nFocusPad, NULL );
+									"focus-padding", 	&nFocusPad, (char *)NULL );
 
 	nArrowWidth = MIN_ARROW_SIZE + (GTK_MISC(gArrowWidget)->xpad * 2);
     nButtonWidth = nArrowWidth +
@@ -2277,7 +2277,7 @@ BOOL GtkSalGraphics::NWPaintGTKListBox( 
 			"interior_focus",	&bInteriorFocus,
 			"focus_line_width",	&nFocusLineWidth,
 			"focus_padding",	&nFocusPadding,
-			NULL);
+			(char *)NULL);
     }
     
     for( clipList::const_iterator it = rClipList.begin(); it != rClipList.end(); ++it )
@@ -2487,7 +2487,7 @@ BOOL GtkSalGraphics::NWPaintGTKMenubar(
         {
             gtk_widget_style_get( gMenuItemMenubarWidget,
                                   "selected_shadow_type", &selected_shadow_type,
-                                  NULL);
+                                  (char *)NULL);
         }
     }
     
@@ -2576,7 +2576,7 @@ BOOL GtkSalGraphics::NWPaintGTKPopupMenu
     {
         gtk_widget_style_get( gMenuItemMenuWidget,
                               "selected_shadow_type", &selected_shadow_type,
-                              NULL);
+                              (char *)NULL);
     }
 
     NWSetWidgetState( gMenuWidget, nState, stateType );
@@ -2735,7 +2735,7 @@ static Rectangle NWGetListBoxButtonRect(
 
 	gtk_widget_style_get( gOptionMenuWidget,
 			"indicator_size",	&pIndicatorSize,
-			"indicator_spacing",&pIndicatorSpacing, NULL);
+			"indicator_spacing",&pIndicatorSpacing, (char *)NULL);
 	
 	if ( pIndicatorSize )
 		width = pIndicatorSize->width;
@@ -2796,7 +2796,7 @@ static Rectangle NWGetListBoxIndicatorRe
 
 	gtk_widget_style_get( gOptionMenuWidget,
 			"indicator_size",	&pIndicatorSize,
-			"indicator_spacing",&pIndicatorSpacing, NULL);
+			"indicator_spacing",&pIndicatorSpacing, (char *)NULL);
 	
 	if ( pIndicatorSize )
     {
@@ -3079,11 +3079,11 @@ void GtkSalGraphics::updateSettings( All
     GtkSettings *pSettings = gtk_widget_get_settings( gEditBoxWidget );
     gboolean blink = false;
 
-    g_object_get( pSettings, "gtk-cursor-blink", &blink, NULL );
+    g_object_get( pSettings, "gtk-cursor-blink", &blink, (char *)NULL );
     if( blink )
     {
         gint blink_time = STYLE_CURSOR_NOBLINKTIME;
-        g_object_get( pSettings, "gtk-cursor-blink-time", &blink_time, NULL );
+        g_object_get( pSettings, "gtk-cursor-blink-time", &blink_time, (char *)NULL );
         // set the blink_time if there is a setting and it is reasonable
         // else leave the default value
         if( blink_time > 100 && blink_time != gint(STYLE_CURSOR_NOBLINKTIME) )
@@ -3102,7 +3102,7 @@ void GtkSalGraphics::updateSettings( All
                           "slider-width", &slider_width,
                           "trough-border", &trough_border,
                           "min-slider-length", &min_slider_length,
-                          NULL );
+                          (char *)NULL );
     gint magic = trough_border ? 1 : 0;
     aStyleSet.SetScrollBarSize( slider_width + 2*trough_border );
     aStyleSet.SetMinThumbSize( min_slider_length - magic );
@@ -3444,7 +3444,7 @@ static void NWEnsureGTKToolbar(void)
         gtk_widget_ensure_style( gToolbarWidget );
         gtk_widget_style_get( gToolbarWidget,
 			                  "button_relief", &aRelief,
-                              NULL);
+                              (char *)NULL);
                               
         gtk_button_set_relief( GTK_BUTTON(gToolbarButtonWidget), aRelief );
         GTK_WIDGET_UNSET_FLAGS( gToolbarButtonWidget, GTK_CAN_FOCUS );
