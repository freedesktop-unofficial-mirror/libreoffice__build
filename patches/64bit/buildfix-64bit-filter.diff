--- filter/source/flash/swfwriter.hxx	2004-01-06 17:48:59.000000000 +0100
+++ filter/source/flash/swfwriter.hxx	2005-01-05 10:13:22.904619226 +0100
@@ -433,8 +433,8 @@ private:
 	void Impl_writePolygon( const Polygon& rPoly, sal_Bool bFilled, const Color& rFillColor, const Color& rLineColor );
 	void Impl_writePolyPolygon( const PolyPolygon& rPolyPoly, sal_Bool bFilled, sal_uInt8 nTransparence = 0);
 	void Impl_writePolyPolygon( const PolyPolygon& rPolyPoly, sal_Bool bFilled, const Color& rFillColor, const Color& rLineColor );
-	void Impl_writeText( const Point& rPos, const String& rText, const long* pDXArray, long nWidth );
-	void Impl_writeText( const Point& rPos, const String& rText, const long* pDXArray, long nWidth, Color aTextColor );
+	void Impl_writeText( const Point& rPos, const String& rText, const sal_Int32* pDXArray, long nWidth );
+	void Impl_writeText( const Point& rPos, const String& rText, const sal_Int32* pDXArray, long nWidth, Color aTextColor );
 	void Impl_writeGradientEx( const PolyPolygon& rPolyPoly, const Gradient& rGradient );
 	void Impl_writeLine( const Point& rPt1, const Point& rPt2, const Color* pLineColor = NULL );
 	void Impl_writeRect( const Rectangle& rRect, long nRadX, long nRadY );
--- filter/source/flash/swfwriter1.cxx	2004-04-21 16:00:55.000000000 +0200
+++ filter/source/flash/swfwriter1.cxx	2005-01-05 10:16:10.026868238 +0100
@@ -469,7 +469,7 @@ FlashFont& Writer::Impl_getFont( const F
 
 // -----------------------------------------------------------------------------
 
-void Writer::Impl_writeText( const Point& rPos, const String& rText, const long* pDXArray, long nWidth )
+void Writer::Impl_writeText( const Point& rPos, const String& rText, const sal_Int32* pDXArray, long nWidth )
 {
 	const FontMetric aMetric( mpVDev->GetFontMetric() );
 
@@ -557,26 +557,26 @@ void Writer::Impl_writeText( const Point
 	}
 }
 
-void Writer::Impl_writeText( const Point& rPos, const String& rText, const long* pDXArray, long nWidth, Color aTextColor )
+void Writer::Impl_writeText( const Point& rPos, const String& rText, const sal_Int32* pDXArray, long nWidth, Color aTextColor )
 {
 	sal_uInt32 nLen = rText.Len();
 
 	if( nLen )
 	{
 		Size	aNormSize;
-		long*	pOwnArray;
-		long*	pDX;
+		sal_Int32* pOwnArray;
+		sal_Int32* pDX;
 
 		// get text sizes
 		if( pDXArray )
 		{
 			pOwnArray = NULL;
 			aNormSize = Size( mpVDev->GetTextWidth( rText ), 0 );
-			pDX = (long*) pDXArray;
+			pDX = (sal_Int32*) pDXArray;
 		}
 		else
 		{	
-			pOwnArray = new long[ nLen ];
+			pOwnArray = new sal_Int32[ nLen ];
 			aNormSize = Size( mpVDev->GetTextArray( rText, pOwnArray ), 0 );
 			pDX = pOwnArray;
 		}
@@ -872,7 +872,7 @@ sal_uInt16 Writer::defineBitmap( const B
 
 	getBitmapData( bmpSource, pImageData, pAlphaData, width, height );
 	sal_uInt32 raw_size = width * height * 4;
-	sal_uInt32 compressed_size = raw_size + (sal_uInt32)(raw_size/100) + 12;
+	uLongf compressed_size = uLongf( raw_size + (sal_uInt32)(raw_size/100) + 12 );
 	sal_uInt8 *pCompressed = new sal_uInt8[ compressed_size ];
 	
 	if(compress2(pCompressed, &compressed_size, pImageData, raw_size, Z_BEST_COMPRESSION) != Z_OK)
@@ -880,11 +880,11 @@ sal_uInt16 Writer::defineBitmap( const B
 
 	// AS: SWF files let you provide an Alpha mask for JPEG images, but we have 
 	//  to ZLIB compress the alpha channel seperately.
-	sal_uInt32 alpha_compressed_size = 0;
+	uLongf alpha_compressed_size = 0;
 	sal_uInt8 *pAlphaCompressed = NULL;
 	if (bmpSource.IsAlpha() || bmpSource.IsTransparent())
 	{
-		alpha_compressed_size = width * height + (sal_uInt32)(raw_size/100) + 12;
+		alpha_compressed_size = uLongf( width * height + (sal_uInt32)(raw_size/100) + 12 );
 		pAlphaCompressed = new sal_uInt8[ compressed_size ];
 		
 		if(compress2(pAlphaCompressed, &alpha_compressed_size, pAlphaData, width * height, Z_BEST_COMPRESSION) != Z_OK)
--- filter/source/pdf/pdfexport.cxx	2004-12-16 11:49:58.000000000 +0100
+++ filter/source/pdf/pdfexport.cxx	2005-01-05 10:09:43.705347158 +0100
@@ -488,7 +488,7 @@ sal_Bool PDFExport::ImplWriteActions( PD
 {
     bool bAssertionFired( false );
 
-	for( ULONG i = 0, nCount = rMtf.GetActionCount(); i < nCount; )
+	for( sal_uInt32 i = 0, nCount = rMtf.GetActionCount(); i < nCount; )
 	{
 		if ( !pPDFExtOutDevData || !pPDFExtOutDevData->PlaySyncPageAct( rWriter, i ) )
 		{
--- filter/source/svg/svgfilter.hxx	2004-05-03 15:51:53.000000000 +0200
+++ filter/source/svg/svgfilter.hxx	2005-01-05 10:08:13.393897420 +0100
@@ -201,7 +201,7 @@ protected:
 	virtual void			_ExportAutoStyles() {}
 	virtual void			_ExportContent() {}
 	virtual void			_ExportMasterStyles() {}
-	virtual ULONG			exportDoc( enum ::xmloff::token::XMLTokenEnum eClass ) { return 0; }
+	virtual sal_uInt32		exportDoc( enum ::xmloff::token::XMLTokenEnum eClass ) { return 0; }
 							
 public:						
 							
--- filter/source/svg/svgwriter.cxx	2004-01-06 17:49:42.000000000 +0100
+++ filter/source/svg/svgwriter.cxx	2005-01-05 10:08:13.394897248 +0100
@@ -724,7 +724,7 @@ void SVGActionWriter::ImplWriteGradientE
 // -----------------------------------------------------------------------------
 
 void SVGActionWriter::ImplWriteText( const Point& rPos, const String& rText, 
-									 const long* pDXArray, long nWidth,
+									 const sal_Int32* pDXArray, long nWidth,
 									 const NMSP_RTL::OUString* pStyle )
 {
 	String	aText( rText ); aText.EraseLeadingChars( ' ' );
@@ -733,19 +733,19 @@ void SVGActionWriter::ImplWriteText( con
 	if( nLen )
 	{
 		Size	aNormSize;
-		long*	pOwnArray;
-		long*	pDX;
+		sal_Int32*	pOwnArray;
+		sal_Int32*	pDX;
 
 		// get text sizes
 		if( pDXArray )
 		{
 			pOwnArray = NULL;
 			aNormSize = Size( mpVDev->GetTextWidth( aText ), 0 );
-			pDX = (long*) pDXArray;
+			pDX = (sal_Int32 *) pDXArray;
 		}
 		else
 		{	
-			pOwnArray = new long[ nLen ];
+			pOwnArray = new sal_Int32[ nLen ];
 			aNormSize = Size( mpVDev->GetTextArray( aText, pOwnArray ), 0 );
 			pDX = pOwnArray;
 		}
--- filter/source/svg/svgwriter.hxx	2003-12-15 14:57:23.000000000 +0100
+++ filter/source/svg/svgwriter.hxx	2005-01-05 10:08:13.395897075 +0100
@@ -248,7 +248,7 @@ private:
 	void					ImplWriteEllipse( const Point& rCenter, long nRadX, long nRadY, const ::rtl::OUString* pStyle = NULL );
 	void					ImplWritePolyPolygon( const PolyPolygon& rPolyPoly, sal_Bool bLineOnly, const ::rtl::OUString* pStyle = NULL );
 	void					ImplWriteGradientEx( const PolyPolygon& rPolyPoly, const Gradient& rGradient, const ::rtl::OUString* pStyle, sal_uInt32 nWriteFlags );
-	void					ImplWriteText( const Point& rPos, const String& rText, const long* pDXArray, long nWidth, const ::rtl::OUString* pStyle = NULL );
+	void					ImplWriteText( const Point& rPos, const String& rText, const sal_Int32* pDXArray, long nWidth, const ::rtl::OUString* pStyle = NULL );
 	void					ImplWriteBmp( const BitmapEx& rBmpEx, const Point& rPt, const Size& rSz, const Point& rSrcPt, const Size& rSrcSz, const ::rtl::OUString* pStyle = NULL );
 
 	void					ImplCheckFontAttributes();
