diff -ru sw.ooo-build/source/core/unocore/unosett.cxx sw/source/core/unocore/unosett.cxx
--- sw.ooo-build/source/core/unocore/unosett.cxx	2006-02-15 18:02:44.000000000 +0000
+++ sw/source/core/unocore/unosett.cxx	2006-02-15 18:34:20.000000000 +0000
@@ -1217,7 +1217,7 @@
 					sal_uInt32 nPos = rInfo.GetPosFromLeft();
 					if(USHRT_MAX == nPos)
 						nPos = 0;
-					aRet <<= TWIP_TO_MM100(nPos);
+					aRet <<= static_cast < sal_Int32 >(TWIP_TO_MM100(nPos));
 				}
 				break;
 				case WID_INTERVAL   :
@@ -2633,7 +2633,7 @@
 	switch(pMap->nWID)
 	{
 		case WID_TXTCOL_LINE_WIDTH:
-			aRet <<= TWIP_TO_MM100(nSepLineWidth);
+			aRet <<= static_cast < sal_Int32 >(TWIP_TO_MM100(nSepLineWidth));
 		break;
 		case WID_TXTCOL_LINE_COLOR:
 			aRet <<= nSepLineColor;
diff -ru sw.ooo-build/source/ui/config/fontcfg.cxx sw/source/ui/config/fontcfg.cxx
--- sw.ooo-build/source/ui/config/fontcfg.cxx	2006-02-15 18:02:44.000000000 +0000
+++ sw/source/ui/config/fontcfg.cxx	2006-02-15 18:44:58.000000000 +0000
@@ -205,7 +205,7 @@
         else
         {
             if(nDefaultFontHeight[nProp - DEF_FONT_COUNT] > 0)
-                pValues[nProp] <<= TWIP_TO_MM100(nDefaultFontHeight[nProp - DEF_FONT_COUNT]);
+                pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(nDefaultFontHeight[nProp - DEF_FONT_COUNT]));
         }            
 	}
 	PutProperties(aNames, aValues);
diff -ru sw.ooo-build/source/ui/config/usrpref.cxx sw/source/ui/config/usrpref.cxx
--- sw.ooo-build/source/ui/config/usrpref.cxx	2006-02-15 18:02:44.000000000 +0000
+++ sw/source/ui/config/usrpref.cxx	2006-02-15 18:46:36.000000000 +0000
@@ -336,7 +336,7 @@
             case 11: pValues[nProp] <<= (sal_Int32)rParent.GetZoom(); break;// "Zoom/Value",
             case 12: pValues[nProp] <<= (sal_Int32)rParent.GetZoomType(); break;// "Zoom/Type",
             case 13: pValues[nProp] <<= (sal_Int32)rParent.GetMetric(); break;// "Other/MeasureUnit",
-            case 14: pValues[nProp] <<= TWIP_TO_MM100(rParent.GetDefTab()); break;// "Other/TabStop",
+            case 14: pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(rParent.GetDefTab())); break;// "Other/TabStop",
             case 15: bSet = rParent.IsVRulerRight(); break;// "Window/IsVerticalRulerRight",
         }
         if(nProp < 8 || nProp == 10)
diff -ru sw.ooo-build/source/ui/envelp/envimg.cxx sw/source/ui/envelp/envimg.cxx
--- sw.ooo-build/source/ui/envelp/envimg.cxx	2006-02-15 18:02:44.000000000 +0000
+++ sw/source/ui/envelp/envimg.cxx	2006-02-15 18:38:59.000000000 +0000
@@ -308,16 +308,16 @@
 			case  0: pValues[nProp] <<= aEnvItem.aAddrText; break;// "Inscription/Addressee",
 			case  1: pValues[nProp] <<= aEnvItem.aSendText; break;// "Inscription/Sender",
 			case  2: pValues[nProp].setValue(&aEnvItem.bSend, rType);break;// "Inscription/UseSender",
-			case  3: pValues[nProp] <<= TWIP_TO_MM100(aEnvItem.lAddrFromLeft) ; break;// "Format/AddresseeFromLeft",
-			case  4: pValues[nProp] <<= TWIP_TO_MM100(aEnvItem.lAddrFromTop)  ; break;// "Format/AddresseeFromTop",
-			case  5: pValues[nProp] <<= TWIP_TO_MM100(aEnvItem.lSendFromLeft) ; break;// "Format/SenderFromLeft",
-			case  6: pValues[nProp] <<= TWIP_TO_MM100(aEnvItem.lSendFromTop)  ; break;// "Format/SenderFromTop",
-			case  7: pValues[nProp] <<= TWIP_TO_MM100(aEnvItem.lWidth)  ; break;// "Format/Width",
-			case  8: pValues[nProp] <<= TWIP_TO_MM100(aEnvItem.lHeight) ; break;// "Format/Height",
+			case  3: pValues[nProp] <<= static_cast <sal_Int32>(TWIP_TO_MM100(aEnvItem.lAddrFromLeft)) ; break;// "Format/AddresseeFromLeft",
+			case  4: pValues[nProp] <<= static_cast <sal_Int32>(TWIP_TO_MM100(aEnvItem.lAddrFromTop))  ; break;// "Format/AddresseeFromTop",
+			case  5: pValues[nProp] <<= static_cast <sal_Int32>(TWIP_TO_MM100(aEnvItem.lSendFromLeft)) ; break;// "Format/SenderFromLeft",
+			case  6: pValues[nProp] <<= static_cast <sal_Int32>(TWIP_TO_MM100(aEnvItem.lSendFromTop))  ; break;// "Format/SenderFromTop",
+			case  7: pValues[nProp] <<= static_cast <sal_Int32>(TWIP_TO_MM100(aEnvItem.lWidth))  ; break;// "Format/Width",
+			case  8: pValues[nProp] <<= static_cast <sal_Int32>(TWIP_TO_MM100(aEnvItem.lHeight)) ; break;// "Format/Height",
 			case  9: pValues[nProp] <<= sal_Int32(aEnvItem.eAlign); break;// "Print/Alignment",
 			case 10: pValues[nProp].setValue(&aEnvItem.bPrintFromAbove, rType); break;// "Print/FromAbove",
-			case 11: pValues[nProp] <<= TWIP_TO_MM100(aEnvItem.lShiftRight);break; // "Print/Right",
-			case 12: pValues[nProp] <<= TWIP_TO_MM100(aEnvItem.lShiftDown); break;// "Print/Down"
+			case 11: pValues[nProp] <<= static_cast <sal_Int32>(TWIP_TO_MM100(aEnvItem.lShiftRight));break; // "Print/Right",
+			case 12: pValues[nProp] <<= static_cast <sal_Int32>(TWIP_TO_MM100(aEnvItem.lShiftDown)); break;// "Print/Down"
 		}
 	}
 	PutProperties(aNames, aValues);
diff -ru sw.ooo-build/source/ui/envelp/labimg.cxx sw/source/ui/envelp/labimg.cxx
--- sw.ooo-build/source/ui/envelp/labimg.cxx	2006-02-15 18:02:44.000000000 +0000
+++ sw/source/ui/envelp/labimg.cxx	2006-02-15 18:40:55.000000000 +0000
@@ -447,12 +447,12 @@
 			case  2: pValues[nProp] <<= aItem.aType;			break;// "Medium/Type",
 			case  3: pValues[nProp] <<= aItem.nCols; 			break;// "Format/Column",
 			case  4: pValues[nProp] <<= aItem.nRows; 			break;// "Format/Row",
-			case  5: pValues[nProp] <<= TWIP_TO_MM100(aItem.lHDist);break;// "Format/HorizontalDistance",
-			case  6: pValues[nProp] <<= TWIP_TO_MM100(aItem.lVDist);break;// "Format/VerticalDistance",
-			case  7: pValues[nProp] <<= TWIP_TO_MM100(aItem.lWidth);			break;// "Format/Width",
-			case  8: pValues[nProp] <<= TWIP_TO_MM100(aItem.lHeight);			break;// "Format/Height",
-			case  9: pValues[nProp] <<= TWIP_TO_MM100(aItem.lLeft);			break;// "Format/LeftMargin",
-			case 10: pValues[nProp] <<= TWIP_TO_MM100(aItem.lUpper);			break;// "Format/TopMargin",
+			case  5: pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(aItem.lHDist));break;// "Format/HorizontalDistance",
+			case  6: pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(aItem.lVDist));break;// "Format/VerticalDistance",
+			case  7: pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(aItem.lWidth));			break;// "Format/Width",
+			case  8: pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(aItem.lHeight));			break;// "Format/Height",
+			case  9: pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(aItem.lLeft));			break;// "Format/LeftMargin",
+			case 10: pValues[nProp] <<= static_cast<sal_Int32>(TWIP_TO_MM100(aItem.lUpper));			break;// "Format/TopMargin",
 			case 11: pValues[nProp].setValue(&aItem.bSynchron, rType); break;// "Option/Synchronize",
 			case 12: pValues[nProp].setValue(&aItem.bPage, rType); break;// "Option/Page",
 			case 13: pValues[nProp] <<= aItem.nCol; 	break;// "Option/Column",
