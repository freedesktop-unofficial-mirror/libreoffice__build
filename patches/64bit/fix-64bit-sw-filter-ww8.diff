--- sw/source/filter/ww8/dump/ww8scan.cxx	2004-06-17 15:49:57.000000000 +0200
+++ sw/source/filter/ww8/dump/ww8scan.cxx	2005-05-17 16:49:01.000000000 +0200
@@ -930,7 +930,7 @@ WW8PLCFx& WW8PLCFx_PCDAttrs::operator ++
 
 WW8_CP WW8PLCFx_PCDAttrs::Where()
 {
-	return ( pPcd ) ? pPcd->Where() : LONG_MAX;
+	return ( pPcd ) ? pPcd->Where() : WW8_CP_MAX;
 }
 
 void WW8PLCFx_PCDAttrs::GetSprms(WW8PLCFxDesc* p)
@@ -941,7 +941,7 @@ void WW8PLCFx_PCDAttrs::GetSprms(WW8PLCF
 	if ( !pPcdI || !pPcdI->Get(p->nStartPos, p->nEndPos, pData) )
 	{
 		// PLCF fully processed
-		p->nStartPos = p->nEndPos = LONG_MAX;
+		p->nStartPos = p->nEndPos = WW8_CP_MAX;
 		p->pMemPos = 0;
         p->nSprmsLen = 0;
 		return;
@@ -956,7 +956,7 @@ void WW8PLCFx_PCDAttrs::GetSprms(WW8PLCF
 		if( nSprmIdx >= nGrpprls )
         {
 			// Invalid Index
-			p->nStartPos = p->nEndPos = LONG_MAX;
+			p->nStartPos = p->nEndPos = WW8_CP_MAX;
 			p->pMemPos = 0;
             p->nSprmsLen = 0;
 			return;
@@ -1128,7 +1128,7 @@ bool WW8PLCFx_PCD::SeekPos(WW8_CP nCpPos
 
 WW8_CP WW8PLCFx_PCD::Where()
 {
-	return pPcdI ? pPcdI->Where() : LONG_MAX;
+	return pPcdI ? pPcdI->Where() : WW8_CP_MAX;
 }
 
 long WW8PLCFx_PCD::GetNoSprms( long& rStart, long& rEnd, long& rLen )
@@ -1161,7 +1161,7 @@ WW8_FC WW8PLCFx_PCD::AktPieceStartCp2Fc(
 	if ( !pPcdI->Get(nCpStart, nCpEnd, pData) )
     {
 		ASSERT( !this, "AktPieceStartCp2Fc() with false Cp found (1)" );
-		return LONG_MAX;
+		return WW8_FC_MAX;
 	}
 
 	ASSERT( nCp >= nCpStart && nCp < nCpEnd,
@@ -1199,7 +1199,7 @@ WW8_CP WW8PLCFx_PCD::AktPieceStartFc2Cp(
 	if ( !pPcdI->Get( nCpStart, nCpEnd, pData ) )
 	{
  		ASSERT( !this, "AktPieceStartFc2Cp() - Fehler" );
-		return LONG_MAX;
+		return WW8_CP_MAX;
 	}
 	bool bIsUnicode = false;
 	INT32 nFcStart  = SVBT32ToLong( ((WW8_PCD*)pData)->fc );
@@ -1472,8 +1472,8 @@ short WW8_BRC::DetermineBorderProperties
 
 WW8_CP WW8ScannerBase::WW8Fc2Cp( WW8_FC nFcPos ) const
 {
-	WW8_CP nFallBackCpEnd = LONG_MAX;
-	if( nFcPos == LONG_MAX )
+	WW8_CP nFallBackCpEnd = WW8_CP_MAX;
+	if( nFcPos == WW8_FC_MAX )
 		return nFallBackCpEnd;
 
     bool bIsUnicode = false;
@@ -1539,8 +1539,8 @@ WW8_FC WW8ScannerBase::WW8Cp2Fc(WW8_CP n
 {
 	if( pTestFlag )
 		*pTestFlag = true;
-	if( LONG_MAX == nCpPos )
-		return LONG_MAX;
+	if( WW8_CP_MAX == nCpPos )
+		return WW8_FC_MAX;
 
     bool bIsUnicode;
     if( !pIsUnicode )
@@ -1549,7 +1549,7 @@ WW8_FC WW8ScannerBase::WW8Cp2Fc(WW8_CP n
 	if( pPieceIter )
 	{	// Complex File
 		if( pNextPieceCp )
-			*pNextPieceCp = LONG_MAX;
+			*pNextPieceCp = WW8_CP_MAX;
 
 		if( !pPieceIter->SeekPos( nCpPos ) )
 		{
@@ -1557,7 +1557,7 @@ WW8_FC WW8ScannerBase::WW8Cp2Fc(WW8_CP n
 				*pTestFlag = false;
 			else
 				ASSERT( !this, "Falscher CP an WW8Cp2Fc() uebergeben" );
-			return LONG_MAX;
+			return WW8_FC_MAX;
 		}
 		long nCpStart, nCpEnd;
 		void* pData;
@@ -1567,7 +1567,7 @@ WW8_FC WW8ScannerBase::WW8Cp2Fc(WW8_CP n
 				*pTestFlag = false;
 			else
 				ASSERT( !this, "PLCFfpcd-Get ging schief" );
-			return LONG_MAX;
+			return WW8_FC_MAX;
 		}
 		if( pNextPieceCp )
 			*pNextPieceCp = nCpEnd;
@@ -2611,7 +2611,7 @@ BYTE* WW8PLCFx_Fc_FKP::WW8Fkp::Get( WW8_
 
 	if( nIdx >= nIMax )
     {
-		rStart = LONG_MAX;
+		rStart = WW8_FC_MAX;
 		return 0;
 	}
 
@@ -2670,7 +2670,7 @@ bool WW8PLCFx_Fc_FKP::WW8Fkp::HasSprm(US
 void WW8PLCFx::GetSprms( WW8PLCFxDesc* p )
 {
 	ASSERT( !this, "Falsches GetSprms gerufen" );
-	p->nStartPos = p->nEndPos = LONG_MAX;
+	p->nStartPos = p->nEndPos = WW8_CP_MAX;
 	p->pMemPos = 0;
 	p->nSprmsLen = 0;
 	p->bRealLineEnd = false;
@@ -2854,10 +2854,10 @@ WW8_FC WW8PLCFx_Fc_FKP::Where()
 	if( !pFkp )
 	{
 		if( !NewFkp() )
-			return LONG_MAX;
+			return WW8_FC_MAX;
 	}
 	WW8_FC nP = pFkp->Where();
-	if( nP != LONG_MAX )
+	if( nP != WW8_FC_MAX )
 		return nP;
 
 	pFkp = 0;					// FKP beendet -> hole neuen
@@ -2867,7 +2867,7 @@ WW8_FC WW8PLCFx_Fc_FKP::Where()
 BYTE* WW8PLCFx_Fc_FKP::GetSprmsAndPos(WW8_FC& rStart, WW8_FC& rEnd, long& rLen)
 {
 	rLen = 0; 								// Default
-	rStart = rEnd = LONG_MAX;
+	rStart = rEnd = WW8_FC_MAX;
 
 	if( !pFkp )     // Fkp not there ?
     {
@@ -2876,7 +2876,7 @@ BYTE* WW8PLCFx_Fc_FKP::GetSprmsAndPos(WW
 	}
 
 	BYTE* pPos = pFkp->Get( rStart, rEnd, rLen );
-	if( rStart == LONG_MAX )    //Not found
+	if( rStart == WW8_FC_MAX )    //Not found
 		return 0;
 	return pPos;
 }
@@ -2890,7 +2890,7 @@ WW8PLCFx& WW8PLCFx_Fc_FKP::operator ++( 
 	}
 
 	(*pFkp)++;
-	if( pFkp->Where() == LONG_MAX )
+	if( pFkp->Where() == WW8_FC_MAX )
 		NewFkp();
 
 	return *this;
@@ -3096,7 +3096,7 @@ void WW8PLCFx_Cp_FKP::GetSprms(WW8PLCFxD
 		{
 			p->bRealLineEnd = (ePLCF == PAP);
 
-			if ( ((ePLCF == PAP ) || (ePLCF == CHP)) && (nOrigCp != LONG_MAX) )
+			if ( ((ePLCF == PAP ) || (ePLCF == CHP)) && (nOrigCp != WW8_CP_MAX) )
 			{
                 bool bIsUnicode=false;
 				/*
@@ -3243,7 +3243,7 @@ WW8PLCFx& WW8PLCFx_Cp_FKP::operator ++( 
 
 	if( GetPCDIdx() >= GetPCDIMax() )			// End of PLCF
 	{
-		nAttrStart = nAttrEnd = LONG_MAX;
+		nAttrStart = nAttrEnd = WW8_CP_MAX;
 		return *this;
 	}
 
@@ -3306,7 +3306,7 @@ void WW8PLCFx_SEPX::GetSprms(WW8PLCFxDes
 	p->bRealLineEnd = false;
 	if (!pPLCF->Get( p->nStartPos, p->nEndPos, pData ))
 	{
-		p->nStartPos = p->nEndPos = LONG_MAX;		// PLCF fertig abgearbeitet
+		p->nStartPos = p->nEndPos = WW8_CP_MAX;		// PLCF fertig abgearbeitet
 		p->pMemPos = 0;
         p->nSprmsLen = 0;
 	}
@@ -3315,7 +3315,7 @@ void WW8PLCFx_SEPX::GetSprms(WW8PLCFxDes
 		long nPo =  SVBT32ToLong( (BYTE*)pData+2 );
 		if (nPo == -1L)
 		{
-			p->nStartPos = p->nEndPos = LONG_MAX;		// Sepx empty
+			p->nStartPos = p->nEndPos = WW8_CP_MAX;		// Sepx empty
 			p->pMemPos = 0;
             p->nSprmsLen = 0;
 		}
@@ -3471,7 +3471,7 @@ bool WW8PLCFx_SubDoc::SeekPos( WW8_CP nC
 
 WW8_CP WW8PLCFx_SubDoc::Where()
 {
-	return ( pRef ) ? pRef->Where() : LONG_MAX;
+	return ( pRef ) ? pRef->Where() : WW8_CP_MAX;
 }
 
 long WW8PLCFx_SubDoc::GetNoSprms( WW8_CP& rStart, long& rEnd, long& rLen )
@@ -3482,7 +3482,7 @@ long WW8PLCFx_SubDoc::GetNoSprms( WW8_CP
 
 	if ( !pRef )
 	{
-		rStart  = LONG_MAX;				// Es gibt keine Noten
+		rStart  = WW8_CP_MAX;				// Es gibt keine Noten
 		rLen = 0;
 		return -1;
 	}
@@ -3491,7 +3491,7 @@ long WW8PLCFx_SubDoc::GetNoSprms( WW8_CP
 
 	if (!pRef->Get( rStart, nE, pData ))
 	{
-		rStart = LONG_MAX;				// PLCF fertig abgearbeitet
+		rStart = WW8_CP_MAX;				// PLCF fertig abgearbeitet
 		rLen = 0;
 		return -1;
 	}
@@ -3499,7 +3499,7 @@ long WW8PLCFx_SubDoc::GetNoSprms( WW8_CP
 
 	if(!pTxt->Get( nSt, rLen, pData ))
 	{
-		rStart = LONG_MAX;				// PLCF fertig abgearbeitet
+		rStart = WW8_CP_MAX;				// PLCF fertig abgearbeitet
 		rLen = 0;
 		return -1;
 	}
@@ -3586,7 +3586,7 @@ bool WW8PLCFx_FLD::SeekPos(WW8_CP nCpPos
 
 WW8_CP WW8PLCFx_FLD::Where()
 {
-	return pPLCF ? pPLCF->Where() : LONG_MAX;
+	return pPLCF ? pPLCF->Where() : WW8_CP_MAX;
 }
 
 bool WW8PLCFx_FLD::StartPosIsFieldStart()
@@ -3624,14 +3624,14 @@ bool WW8PLCFx_FLD::EndPosIsFieldEnd()
 
 void WW8PLCFx_FLD::GetSprms(WW8PLCFxDesc* p)
 {
-    p->nStartPos = p->nEndPos = LONG_MAX;
+    p->nStartPos = p->nEndPos = WW8_CP_MAX;
     p->pMemPos = 0;
     p->nSprmsLen = 0;
     p->bRealLineEnd = false;
 
 	if (!pPLCF)
     {
-		p->nStartPos = LONG_MAX;					// Es gibt keine Felder
+		p->nStartPos = WW8_CP_MAX;					// Es gibt keine Felder
 		return;
 	}
 
@@ -3641,7 +3641,7 @@ void WW8PLCFx_FLD::GetSprms(WW8PLCFxDesc
     void *pData;
     if (!pPLCF->Get(nP, pData))				// Ende des PLCFspecial ?
     {
-        p->nStartPos = LONG_MAX;			// PLCF fertig abgearbeitet
+        p->nStartPos = WW8_CP_MAX;			// PLCF fertig abgearbeitet
 		return;
     }
 
@@ -3650,7 +3650,7 @@ void WW8PLCFx_FLD::GetSprms(WW8PLCFxDesc
     (*pPLCF)++;
     if (!pPLCF->Get(nP, pData))				// Ende des PLCFspecial ?
     {
-        p->nStartPos = LONG_MAX;			// PLCF fertig abgearbeitet
+        p->nStartPos = WW8_CP_MAX;			// PLCF fertig abgearbeitet
         return;
     }
 
@@ -4060,7 +4060,7 @@ void WW8PLCFMan::AdjustEnds( WW8PLCFxDes
 
 	if ( (&rDesc == pPap) && rDesc.bRealLineEnd )
 	{
-		if ( pPap->nEndPos != LONG_MAX )	// Para adjust
+		if ( pPap->nEndPos != WW8_CP_MAX )	// Para adjust
 		{
 			nLineEnd = pPap->nEndPos;// nLineEnd zeigt *hinter* das <CR>
 			pPap->nEndPos--;        // Absatzende um 1 Zeichen verkuerzen
@@ -4086,10 +4086,10 @@ void WW8PLCFMan::AdjustEnds( WW8PLCFxDes
 
 void WW8PLCFxDesc::ReduceByOffset()
 {
-	ASSERT((LONG_MAX == nStartPos) || (nStartPos <= nEndPos),
+	ASSERT((WW8_CP_MAX == nStartPos) || (nStartPos <= nEndPos),
 			"Attr-Anfang und -Ende ueber Kreuz" );
 
-	if( nStartPos != LONG_MAX )
+	if( nStartPos != WW8_CP_MAX )
 	{
 		/*
 		##516##,##517##
@@ -4102,7 +4102,7 @@ void WW8PLCFxDesc::ReduceByOffset()
 		else
 			nStartPos -= nCpOfs;
 	}
-	if( nEndPos   != LONG_MAX )
+	if( nEndPos   != WW8_CP_MAX )
 	{
 		ASSERT(nCpOfs <= nEndPos,
 			"oh oh, so much for the subdocument piece theory");
@@ -4125,7 +4125,7 @@ void WW8PLCFMan::GetNewNoSprms( WW8PLCFx
 	rDesc.nCp2OrIdx = rDesc.pPLCFx->GetNoSprms(rDesc.nStartPos, rDesc.nEndPos,
 		rDesc.nSprmsLen);
 
-	ASSERT((LONG_MAX == rDesc.nStartPos) || (rDesc.nStartPos <= rDesc.nEndPos),
+	ASSERT((WW8_CP_MAX == rDesc.nStartPos) || (rDesc.nStartPos <= rDesc.nEndPos),
 			"Attr-Anfang und -Ende ueber Kreuz" );
 
     rDesc.ReduceByOffset();
@@ -4293,7 +4293,7 @@ WW8PLCFMan::WW8PLCFMan(WW8ScannerBase* p
 		if ((p == pChp) || (p == pPap))
 			p->nStartPos = p->nEndPos = nStartCp;
 		else
-			p->nStartPos = p->nEndPos = LONG_MAX;
+			p->nStartPos = p->nEndPos = WW8_CP_MAX;
 	}
 
 	// initialisieren der Member-Vars High-Level
@@ -4302,7 +4302,7 @@ WW8PLCFMan::WW8PLCFMan(WW8ScannerBase* p
 
 		if( !p->pPLCFx )
 		{
-			p->nStartPos = p->nEndPos = LONG_MAX;
+			p->nStartPos = p->nEndPos = WW8_CP_MAX;
 			continue;
 		}
 
@@ -4317,7 +4317,7 @@ WW8PLCFMan::WW8PLCFMan(WW8ScannerBase* p
                 p->nSprmsLen = 0;
 				p->nStartPos = nTemp;
 				if (!(*p->pPLCFx).SeekPos(p->nStartPos))
-					p->nEndPos = p->nStartPos = LONG_MAX;
+					p->nEndPos = p->nStartPos = WW8_CP_MAX;
 				else
 					GetNewSprms( *p );
 			}
@@ -4351,7 +4351,7 @@ USHORT WW8PLCFMan::WhereIdx(bool* pbStar
 		pD = &aD[i];
 		if (pD != pPcdA)
 		{
-			if(	(pD->nEndPos < nNext) && (pD->nStartPos == LONG_MAX) )
+			if(	(pD->nEndPos < nNext) && (pD->nStartPos == WW8_CP_MAX) )
 			{
                 // sonst ist Anfang = Ende
 				nNext = pD->nEndPos;
@@ -4564,7 +4564,7 @@ void WW8PLCFMan::AdvSprm(short nIdx, boo
 				p->nSprmsLen = 0;
 		}
 		if (p->nSprmsLen < maSprmParser.MinSprmLen())
-			p->nStartPos = LONG_MAX;	// es folgen Enden
+			p->nStartPos = WW8_CP_MAX;	// es folgen Enden
 	}
 	else
 	{
@@ -4587,7 +4587,7 @@ void WW8PLCFMan::AdvSprm(short nIdx, boo
                 */
 			    if (!(*p->pPLCFx).SeekPos(p->nStartPos))
                 {
-                    p->nEndPos = LONG_MAX;
+                    p->nEndPos = WW8_CP_MAX;
                     p->pPLCFx->SetDirty(true);
                 }
                 if (!p->pPLCFx->GetDirty() || pPcd)
@@ -4618,7 +4618,7 @@ void WW8PLCFMan::AdvSprm(short nIdx, boo
                 the pap and chps.
                 */
                 if (pPcd && ((p->nStartPos > pPcd->nStartPos) ||
-                    (pPcd->nStartPos == LONG_MAX)) &&
+                    (pPcd->nStartPos == WW8_CP_MAX)) &&
                     (pPcd->nEndPos != p->nStartPos))
                 {
                     pPcd->nEndPos = p->nStartPos;
@@ -4846,7 +4846,7 @@ void WW8PLCFxDesc::Save( WW8PLCFxSave1& 
             aD.nCpOfs = rSave.nCpOfs = nCpOfs;
             if (!(pPLCFx->SeekPos(aD.nStartPos)))
             {
-                aD.nEndPos = LONG_MAX;
+                aD.nEndPos = WW8_CP_MAX;
                 pPLCFx->SetDirty(true);
             }
             pPLCFx->GetSprms(&aD);
@@ -4870,7 +4870,7 @@ void WW8PLCFxDesc::Restore( const WW8PLC
             nCpOfs = aD.nCpOfs = rSave.nCpOfs;
             if (!(pPLCFx->SeekPos(aD.nStartPos)))
             {
-                aD.nEndPos = LONG_MAX;
+                aD.nEndPos = WW8_CP_MAX;
                 pPLCFx->SetDirty(true);
             }
             pPLCFx->GetSprms(&aD);
--- sw/source/filter/ww8/ww8par2.cxx	2005-03-30 12:54:34.000000000 +0200
+++ sw/source/filter/ww8/ww8par2.cxx	2005-05-17 16:59:49.000000000 +0200
@@ -580,9 +580,9 @@ bool SwWW8ImplReader::SearchRowEnd(WW8PL
     aRes.pMemPos = 0;
     aRes.nEndPos = rStartCp;
 
-    while (pPap->HasFkp() && rStartCp != LONG_MAX)
+    while (pPap->HasFkp() && rStartCp != WW8_CP_MAX)
     {
-        if (pPap->Where() != LONG_MAX)
+        if (pPap->Where() != WW8_CP_MAX)
         {
             const BYTE* pB = pPap->HasSprm(TabRowSprm(nLevel));
             if (pB && *pB == 1)
@@ -606,7 +606,7 @@ bool SwWW8ImplReader::SearchRowEnd(WW8PL
         //Seek to our next block of properties
         if (!(pPap->SeekPos(aRes.nStartPos)))
         {
-            aRes.nEndPos = LONG_MAX;
+            aRes.nEndPos = WW8_CP_MAX;
             pPap->SetDirty(true);
         }
         pPap->GetSprms(&aRes);
@@ -1928,7 +1928,7 @@ WW8TabDesc::WW8TabDesc(SwWW8ImplReader* 
 
         if (!(pPap->SeekPos(aRes.nStartPos)))
         {
-            aRes.nEndPos = LONG_MAX;
+            aRes.nEndPos = WW8_CP_MAX;
             pPap->SetDirty(true);
         }
         pPap->GetSprms(&aRes);
@@ -1936,8 +1936,8 @@ WW8TabDesc::WW8TabDesc(SwWW8ImplReader* 
 
         //Are we at the end of available properties
         if (
-             !pPap->HasFkp() || pPap->Where() == LONG_MAX ||
-             aRes.nStartPos == LONG_MAX
+             !pPap->HasFkp() || pPap->Where() == WW8_CP_MAX ||
+             aRes.nStartPos == WW8_CP_MAX
            )
         {
             bOk = false;
@@ -1969,7 +1969,7 @@ WW8TabDesc::WW8TabDesc(SwWW8ImplReader* 
         pIo->pPlcxMan->GetPap()->nOrigStartPos = aRes.nStartPos;
         if (!(pPap->SeekPos(aRes.nStartPos)))
         {
-            aRes.nEndPos = LONG_MAX;
+            aRes.nEndPos = WW8_CP_MAX;
             pPap->SetDirty(true);
         }
         pPap->GetSprms(&aRes);
--- sw/source/filter/ww8/ww8scan.cxx	2005-05-16 18:51:42.000000000 +0200
+++ sw/source/filter/ww8/ww8scan.cxx	2005-05-17 17:39:25.326874438 +0200
@@ -938,7 +938,7 @@ WW8PLCFx& WW8PLCFx_PCDAttrs::operator ++
 
 WW8_CP WW8PLCFx_PCDAttrs::Where()
 {
-    return ( pPcd ) ? pPcd->Where() : LONG_MAX;
+    return ( pPcd ) ? pPcd->Where() : WW8_CP_MAX;
 }
 
 void WW8PLCFx_PCDAttrs::GetSprms(WW8PLCFxDesc* p)
@@ -949,7 +949,7 @@ void WW8PLCFx_PCDAttrs::GetSprms(WW8PLCF
     if ( !pPcdI || !pPcdI->Get(p->nStartPos, p->nEndPos, pData) )
     {
         // PLCF fully processed
-        p->nStartPos = p->nEndPos = LONG_MAX;
+        p->nStartPos = p->nEndPos = WW8_CP_MAX;
         p->pMemPos = 0;
         p->nSprmsLen = 0;
         return;
@@ -964,7 +964,7 @@ void WW8PLCFx_PCDAttrs::GetSprms(WW8PLCF
         if( nSprmIdx >= nGrpprls )
         {
             // Invalid Index
-            p->nStartPos = p->nEndPos = LONG_MAX;
+            p->nStartPos = p->nEndPos = WW8_CP_MAX;
             p->pMemPos = 0;
             p->nSprmsLen = 0;
             return;
@@ -1136,7 +1136,7 @@ bool WW8PLCFx_PCD::SeekPos(WW8_CP nCpPos
 
 WW8_CP WW8PLCFx_PCD::Where()
 {
-    return pPcdI ? pPcdI->Where() : LONG_MAX;
+    return pPcdI ? pPcdI->Where() : WW8_CP_MAX;
 }
 
 long WW8PLCFx_PCD::GetNoSprms( WW8_CP& rStart, WW8_CP& rEnd, long& rLen )
@@ -1146,7 +1146,7 @@ long WW8PLCFx_PCD::GetNoSprms( WW8_CP& r
 
     if ( !pPcdI || !pPcdI->Get(rStart, rEnd, pData) )
     {
-        rStart = rEnd = LONG_MAX;
+        rStart = rEnd = WW8_CP_MAX;
         return -1;
     }
     return pPcdI->GetIdx();
@@ -1169,7 +1169,7 @@ WW8_FC WW8PLCFx_PCD::AktPieceStartCp2Fc(
     if ( !pPcdI->Get(nCpStart, nCpEnd, pData) )
     {
         ASSERT( !this, "AktPieceStartCp2Fc() with false Cp found (1)" );
-        return LONG_MAX;
+        return WW8_FC_MAX;
     }
 
     ASSERT( nCp >= nCpStart && nCp < nCpEnd,
@@ -1193,7 +1193,7 @@ void WW8PLCFx_PCD::AktPieceFc2Cp( WW8_CP
     const WW8ScannerBase *pSBase )
 {
     //No point going anywhere with this
-    if ((rStartPos == LONG_MAX) && (rEndPos == LONG_MAX))
+    if ((rStartPos == WW8_CP_MAX) && (rEndPos == WW8_CP_MAX))
         return;
 
     rStartPos = pSBase->WW8Fc2Cp( rStartPos );
@@ -1207,7 +1207,7 @@ WW8_CP WW8PLCFx_PCD::AktPieceStartFc2Cp(
     if ( !pPcdI->Get( nCpStart, nCpEnd, pData ) )
     {
         ASSERT( !this, "AktPieceStartFc2Cp() - Fehler" );
-        return LONG_MAX;
+        return WW8_CP_MAX;
     }
     bool bIsUnicode = false;
     INT32 nFcStart  = SVBT32ToLong( ((WW8_PCD*)pData)->fc );
@@ -1447,8 +1447,8 @@ short WW8_BRC::DetermineBorderProperties
 
 WW8_CP WW8ScannerBase::WW8Fc2Cp( WW8_FC nFcPos ) const
 {
-    WW8_CP nFallBackCpEnd = LONG_MAX;
-    if( nFcPos == LONG_MAX )
+    WW8_CP nFallBackCpEnd = WW8_CP_MAX;
+    if( nFcPos == WW8_FC_MAX )
         return nFallBackCpEnd;
 
     bool bIsUnicode = false;
@@ -1514,8 +1514,8 @@ WW8_FC WW8ScannerBase::WW8Cp2Fc(WW8_CP n
 {
     if( pTestFlag )
         *pTestFlag = true;
-    if( LONG_MAX == nCpPos )
-        return LONG_MAX;
+    if( WW8_CP_MAX == nCpPos )
+        return WW8_FC_MAX;
 
     bool bIsUnicode;
     if( !pIsUnicode )
@@ -1524,7 +1524,7 @@ WW8_FC WW8ScannerBase::WW8Cp2Fc(WW8_CP n
     if( pPieceIter )
     {   // Complex File
         if( pNextPieceCp )
-            *pNextPieceCp = LONG_MAX;
+            *pNextPieceCp = WW8_CP_MAX;
 
         if( !pPieceIter->SeekPos( nCpPos ) )
         {
@@ -1532,7 +1532,7 @@ WW8_FC WW8ScannerBase::WW8Cp2Fc(WW8_CP n
                 *pTestFlag = false;
             else
                 ASSERT( !this, "Falscher CP an WW8Cp2Fc() uebergeben" );
-            return LONG_MAX;
+            return WW8_FC_MAX;
         }
         WW8_CP nCpStart, nCpEnd;
         void* pData;
@@ -1542,7 +1542,7 @@ WW8_FC WW8ScannerBase::WW8Cp2Fc(WW8_CP n
                 *pTestFlag = false;
             else
                 ASSERT( !this, "PLCFfpcd-Get ging schief" );
-            return LONG_MAX;
+            return WW8_FC_MAX;
         }
         if( pNextPieceCp )
             *pNextPieceCp = nCpEnd;
@@ -1600,8 +1600,8 @@ WW8PLCFpcd* WW8ScannerBase::OpenPieceTab
     }
     pStr->Seek( nClxPos );
     nLeft = nClxLen;
     pPieceGrpprls = new BYTE*[nGrpprl + 1];
-    memset( pPieceGrpprls, 0, ( nGrpprl + 1 ) * 4 );
+    memset( pPieceGrpprls, 0, ( nGrpprl + 1 ) * sizeof( BYTE * ) );
     nPieceGrpprls = nGrpprl;
     INT16 nAktGrpprl = 0;                       // lies Grpprls ein
     while( 1 )
@@ -2172,7 +2172,7 @@ bool WW8PLCFspecial::GetData(WW8_CP nInI
 {
     if ( nInIdx >= nIMax )
     {
-        rPos = LONG_MAX;
+        rPos = WW8_FC_MAX;
         return false;
     }
     rPos = pPLCF_PosArray[nInIdx];
@@ -2316,7 +2316,7 @@ bool WW8PLCF::Get(WW8_CP& rStart, WW8_CP
 {
     if ( nIdx >= nIMax )
     {
-        rStart = rEnd = LONG_MAX;
+        rStart = rEnd = WW8_CP_MAX;
         return false;
     }
     rStart = pPLCF_PosArray[ nIdx ];
@@ -2328,7 +2328,7 @@ bool WW8PLCF::Get(WW8_CP& rStart, WW8_CP
 WW8_CP WW8PLCF::Where() const
 {
     if ( nIdx >= nIMax )
-        return LONG_MAX;
+        return WW8_CP_MAX;
 
     return pPLCF_PosArray[nIdx];
 }
@@ -2403,7 +2403,7 @@ bool WW8PLCFpcd_Iter::Get(WW8_CP& rStart
 {
     if( nIdx >= rPLCF.nIMax )
     {
-        rStart = rEnd = LONG_MAX;
+        rStart = rEnd = WW8_CP_MAX;
         return false;
     }
     rStart = rPLCF.pPLCF_PosArray[nIdx];
@@ -2415,7 +2415,7 @@ bool WW8PLCFpcd_Iter::Get(WW8_CP& rStart
 WW8_FC WW8PLCFpcd_Iter::Where() const
 {
     if ( nIdx >= rPLCF.nIMax )
-        return LONG_MAX;
+        return WW8_FC_MAX;
 
     return rPLCF.pPLCF_PosArray[nIdx];
 }
@@ -2627,7 +2627,7 @@ BYTE* WW8PLCFx_Fc_FKP::WW8Fkp::Get(WW8_F
 
     if (mnIdx >= mnIMax)
     {
-        rStart = LONG_MAX;
+        rStart = WW8_FC_MAX;
         return 0;
     }
 
@@ -2690,7 +2690,7 @@ bool WW8PLCFx_Fc_FKP::WW8Fkp::HasSprm(US
 void WW8PLCFx::GetSprms( WW8PLCFxDesc* p )
 {
     ASSERT( !this, "Falsches GetSprms gerufen" );
-    p->nStartPos = p->nEndPos = LONG_MAX;
+    p->nStartPos = p->nEndPos = WW8_CP_MAX;
     p->pMemPos = 0;
     p->nSprmsLen = 0;
     p->bRealLineEnd = false;
@@ -2700,7 +2700,7 @@ void WW8PLCFx::GetSprms( WW8PLCFxDesc* p
 WW8_CP WW8PLCFx::GetNoSprms( WW8_CP& rStart, WW8_CP& rEnd, WW8_CP& rLen )
 {
     ASSERT( !this, "Falsches GetNoSprms gerufen" );
-    rStart = rEnd = LONG_MAX;
+    rStart = rEnd = WW8_CP_MAX;
     rLen = 0;
     return 0;
 }
@@ -2877,10 +2877,10 @@ WW8_FC WW8PLCFx_Fc_FKP::Where()
     if( !pFkp )
     {
         if( !NewFkp() )
-            return LONG_MAX;
+            return WW8_FC_MAX;
     }
     WW8_FC nP = pFkp->Where();
-    if( nP != LONG_MAX )
+    if( nP != WW8_FC_MAX )
         return nP;
 
     pFkp = 0;                   // FKP beendet -> hole neuen
@@ -2890,7 +2890,7 @@ WW8_FC WW8PLCFx_Fc_FKP::Where()
 BYTE* WW8PLCFx_Fc_FKP::GetSprmsAndPos(WW8_FC& rStart, WW8_FC& rEnd, WW8_CP& rLen)
 {
     rLen = 0;                               // Default
-    rStart = rEnd = LONG_MAX;
+    rStart = rEnd = WW8_FC_MAX;
 
     if( !pFkp )     // Fkp not there ?
     {
@@ -2899,7 +2899,7 @@ BYTE* WW8PLCFx_Fc_FKP::GetSprmsAndPos(WW
     }
 
     BYTE* pPos = pFkp->Get( rStart, rEnd, rLen );
-    if( rStart == LONG_MAX )    //Not found
+    if( rStart == WW8_FC_MAX )    //Not found
         return 0;
     return pPos;
 }
@@ -2913,7 +2913,7 @@ WW8PLCFx& WW8PLCFx_Fc_FKP::operator ++( 
     }
 
     (*pFkp)++;
-    if( pFkp->Where() == LONG_MAX )
+    if( pFkp->Where() == WW8_FC_MAX )
         NewFkp();
 
     return *this;
@@ -3119,7 +3119,7 @@ void WW8PLCFx_Cp_FKP::GetSprms(WW8PLCFxD
         {
             p->bRealLineEnd = (ePLCF == PAP);
 
-            if ( ((ePLCF == PAP ) || (ePLCF == CHP)) && (nOrigCp != LONG_MAX) )
+            if ( ((ePLCF == PAP ) || (ePLCF == CHP)) && (nOrigCp != WW8_CP_MAX) )
             {
                 bool bIsUnicode=false;
                 /*
@@ -3266,7 +3266,7 @@ WW8PLCFx& WW8PLCFx_Cp_FKP::operator ++( 
 
     if( GetPCDIdx() >= GetPCDIMax() )           // End of PLCF
     {
-        nAttrStart = nAttrEnd = LONG_MAX;
+        nAttrStart = nAttrEnd = WW8_CP_MAX;
         return *this;
     }
 
@@ -3329,7 +3329,7 @@ void WW8PLCFx_SEPX::GetSprms(WW8PLCFxDes
     p->bRealLineEnd = false;
     if (!pPLCF->Get( p->nStartPos, p->nEndPos, pData ))
     {
-        p->nStartPos = p->nEndPos = LONG_MAX;       // PLCF fertig abgearbeitet
+        p->nStartPos = p->nEndPos = WW8_CP_MAX;       // PLCF fertig abgearbeitet
         p->pMemPos = 0;
         p->nSprmsLen = 0;
     }
@@ -3338,7 +3338,7 @@ void WW8PLCFx_SEPX::GetSprms(WW8PLCFxDes
         long nPo =  SVBT32ToLong( (BYTE*)pData+2 );
         if (nPo == -1L)
         {
-            p->nStartPos = p->nEndPos = LONG_MAX;       // Sepx empty
+            p->nStartPos = p->nEndPos = WW8_CP_MAX;       // Sepx empty
             p->pMemPos = 0;
             p->nSprmsLen = 0;
         }
@@ -3494,12 +3494,12 @@ bool WW8PLCFx_SubDoc::SeekPos( WW8_CP nC
 
 WW8_CP WW8PLCFx_SubDoc::Where()
 {
-    return ( pRef ) ? pRef->Where() : LONG_MAX;
+    return ( pRef ) ? pRef->Where() : WW8_CP_MAX;
 }
 
 void WW8PLCFx_SubDoc::GetSprms(WW8PLCFxDesc* p)
 {
-    p->nStartPos = p->nEndPos = LONG_MAX;
+    p->nStartPos = p->nEndPos = WW8_CP_MAX;
     p->pMemPos = 0;
     p->nSprmsLen = 0;
     p->bRealLineEnd = false;
@@ -3513,7 +3513,7 @@ void WW8PLCFx_SubDoc::GetSprms(WW8PLCFxD
     WW8_CP nFoo;
     if (!pRef->Get(p->nStartPos, nFoo, pData))
     {
-        p->nEndPos = p->nStartPos = LONG_MAX;
+        p->nEndPos = p->nStartPos = WW8_CP_MAX;
         return;
     }
 
@@ -3526,7 +3526,7 @@ void WW8PLCFx_SubDoc::GetSprms(WW8PLCFxD
 
     if (!pTxt->Get(p->nCp2OrIdx, p->nSprmsLen, pData))
     {
-        p->nEndPos = p->nStartPos = LONG_MAX;
+        p->nEndPos = p->nStartPos = WW8_CP_MAX;
         p->nSprmsLen = 0;
         return;
     }
@@ -3612,7 +3612,7 @@ bool WW8PLCFx_FLD::SeekPos(WW8_CP nCpPos
 
 WW8_CP WW8PLCFx_FLD::Where()
 {
-    return pPLCF ? pPLCF->Where() : LONG_MAX;
+    return pPLCF ? pPLCF->Where() : WW8_CP_MAX;
 }
 
 bool WW8PLCFx_FLD::StartPosIsFieldStart()
@@ -3650,14 +3650,14 @@ bool WW8PLCFx_FLD::EndPosIsFieldEnd()
 
 void WW8PLCFx_FLD::GetSprms(WW8PLCFxDesc* p)
 {
-    p->nStartPos = p->nEndPos = LONG_MAX;
+    p->nStartPos = p->nEndPos = WW8_CP_MAX;
     p->pMemPos = 0;
     p->nSprmsLen = 0;
     p->bRealLineEnd = false;
 
     if (!pPLCF)
     {
-        p->nStartPos = LONG_MAX;                    // Es gibt keine Felder
+        p->nStartPos = WW8_CP_MAX;                    // Es gibt keine Felder
         return;
     }
 
@@ -3667,7 +3667,7 @@ void WW8PLCFx_FLD::GetSprms(WW8PLCFxDesc
     void *pData;
     if (!pPLCF->Get(nP, pData))             // Ende des PLCFspecial ?
     {
-        p->nStartPos = LONG_MAX;            // PLCF fertig abgearbeitet
+        p->nStartPos = WW8_CP_MAX;            // PLCF fertig abgearbeitet
         return;
     }
 
@@ -3676,7 +3676,7 @@ void WW8PLCFx_FLD::GetSprms(WW8PLCFxDesc
     (*pPLCF)++;
     if (!pPLCF->Get(nP, pData))             // Ende des PLCFspecial ?
     {
-        p->nStartPos = LONG_MAX;            // PLCF fertig abgearbeitet
+        p->nStartPos = WW8_CP_MAX;            // PLCF fertig abgearbeitet
         return;
     }
 
@@ -3904,12 +3904,12 @@ WW8_CP WW8PLCFx_Book::Where()
 WW8_CP WW8PLCFx_Book::GetNoSprms( WW8_CP& rStart, WW8_CP& rEnd, WW8_CP& rLen )
 {
     void* pData;
-    rEnd = LONG_MAX;
+    rEnd = WW8_CP_MAX;
     rLen = 0;
 
     if (!pBook[0] || !pBook[1] || !nIMax || (pBook[nIsEnd]->GetIdx()) >= nIMax)
     {
-        rStart = rEnd = LONG_MAX;
+        rStart = rEnd = WW8_CP_MAX;
         return -1;
     }
 
@@ -4100,7 +4100,7 @@ void WW8PLCFMan::AdjustEnds( WW8PLCFxDes
 
     if ( (&rDesc == pPap) && rDesc.bRealLineEnd )
     {
-        if ( pPap->nEndPos != LONG_MAX )    // Para adjust
+        if ( pPap->nEndPos != WW8_CP_MAX )    // Para adjust
         {
             nLineEnd = pPap->nEndPos;// nLineEnd zeigt *hinter* das <CR>
             pPap->nEndPos--;        // Absatzende um 1 Zeichen verkuerzen
@@ -4126,10 +4126,10 @@ void WW8PLCFMan::AdjustEnds( WW8PLCFxDes
 
 void WW8PLCFxDesc::ReduceByOffset()
 {
-    ASSERT((LONG_MAX == nStartPos) || (nStartPos <= nEndPos),
+    ASSERT((WW8_CP_MAX == nStartPos) || (nStartPos <= nEndPos),
             "Attr-Anfang und -Ende ueber Kreuz" );
 
-    if( nStartPos != LONG_MAX )
+    if( nStartPos != WW8_CP_MAX )
     {
         /*
         ##516##,##517##
@@ -4142,7 +4142,7 @@ void WW8PLCFxDesc::ReduceByOffset()
         else
             nStartPos -= nCpOfs;
     }
-    if( nEndPos   != LONG_MAX )
+    if( nEndPos   != WW8_CP_MAX )
     {
         ASSERT(nCpOfs <= nEndPos,
             "oh oh, so much for the subdocument piece theory");
@@ -4165,7 +4165,7 @@ void WW8PLCFMan::GetNewNoSprms( WW8PLCFx
     rDesc.nCp2OrIdx = rDesc.pPLCFx->GetNoSprms(rDesc.nStartPos, rDesc.nEndPos,
         rDesc.nSprmsLen);
 
-    ASSERT((LONG_MAX == rDesc.nStartPos) || (rDesc.nStartPos <= rDesc.nEndPos),
+    ASSERT((WW8_CP_MAX == rDesc.nStartPos) || (rDesc.nStartPos <= rDesc.nEndPos),
             "Attr-Anfang und -Ende ueber Kreuz" );
 
     rDesc.ReduceByOffset();
@@ -4340,7 +4340,7 @@ WW8PLCFMan::WW8PLCFMan(WW8ScannerBase* p
         if ((p == pChp) || (p == pPap))
             p->nStartPos = p->nEndPos = nStartCp;
         else
-            p->nStartPos = p->nEndPos = LONG_MAX;
+            p->nStartPos = p->nEndPos = WW8_CP_MAX;
     }
 
     // initialisieren der Member-Vars High-Level
@@ -4349,7 +4349,7 @@ WW8PLCFMan::WW8PLCFMan(WW8ScannerBase* p
 
         if( !p->pPLCFx )
         {
-            p->nStartPos = p->nEndPos = LONG_MAX;
+            p->nStartPos = p->nEndPos = WW8_CP_MAX;
             continue;
         }
 
@@ -4364,7 +4364,7 @@ WW8PLCFMan::WW8PLCFMan(WW8ScannerBase* p
                 p->nSprmsLen = 0;
                 p->nStartPos = nTemp;
                 if (!(*p->pPLCFx).SeekPos(p->nStartPos))
-                    p->nEndPos = p->nStartPos = LONG_MAX;
+                    p->nEndPos = p->nStartPos = WW8_CP_MAX;
                 else
                     GetNewSprms( *p );
             }
@@ -4398,7 +4398,7 @@ USHORT WW8PLCFMan::WhereIdx(bool* pbStar
         pD = &aD[i];
         if (pD != pPcdA)
         {
-            if( (pD->nEndPos < nNext) && (pD->nStartPos == LONG_MAX) )
+            if( (pD->nEndPos < nNext) && (pD->nStartPos == WW8_CP_MAX) )
             {
                 // sonst ist Anfang = Ende
                 nNext = pD->nEndPos;
@@ -4613,7 +4613,7 @@ void WW8PLCFMan::AdvSprm(short nIdx, boo
                 p->nSprmsLen = 0;
         }
         if (p->nSprmsLen < maSprmParser.MinSprmLen())
-            p->nStartPos = LONG_MAX;    // es folgen Enden
+            p->nStartPos = WW8_CP_MAX;    // es folgen Enden
     }
     else
     {
@@ -4636,7 +4636,7 @@ void WW8PLCFMan::AdvSprm(short nIdx, boo
                 */
                 if (!(*p->pPLCFx).SeekPos(p->nStartPos))
                 {
-                    p->nEndPos = LONG_MAX;
+                    p->nEndPos = WW8_CP_MAX;
                     p->pPLCFx->SetDirty(true);
                 }
                 if (!p->pPLCFx->GetDirty() || pPcd)
@@ -4667,7 +4667,7 @@ void WW8PLCFMan::AdvSprm(short nIdx, boo
                 the pap and chps.
                 */
                 if (pPcd && ((p->nStartPos > pPcd->nStartPos) ||
-                    (pPcd->nStartPos == LONG_MAX)) &&
+                    (pPcd->nStartPos == WW8_CP_MAX)) &&
                     (pPcd->nEndPos != p->nStartPos))
                 {
                     pPcd->nEndPos = p->nStartPos;
@@ -4895,7 +4895,7 @@ void WW8PLCFxDesc::Save( WW8PLCFxSave1& 
             aD.nCpOfs = rSave.nCpOfs = nCpOfs;
             if (!(pPLCFx->SeekPos(aD.nStartPos)))
             {
-                aD.nEndPos = LONG_MAX;
+                aD.nEndPos = WW8_CP_MAX;
                 pPLCFx->SetDirty(true);
             }
             pPLCFx->GetSprms(&aD);
@@ -4919,7 +4919,7 @@ void WW8PLCFxDesc::Restore( const WW8PLC
             nCpOfs = aD.nCpOfs = rSave.nCpOfs;
             if (!(pPLCFx->SeekPos(aD.nStartPos)))
             {
-                aD.nEndPos = LONG_MAX;
+                aD.nEndPos = WW8_CP_MAX;
                 pPLCFx->SetDirty(true);
             }
             pPLCFx->GetSprms(&aD);
--- sw/source/filter/ww8/ww8scan.hxx	2005-05-16 18:51:42.000000000 +0200
+++ sw/source/filter/ww8/ww8scan.hxx	2005-05-17 16:31:56.000000000 +0200
@@ -268,7 +268,7 @@ public:
                                         // bzw. naechste groesseren Wert
     bool SeekPosExact(long nPos);
     WW8_FC Where() const 
-        { return ( nIdx >= nIMax ) ? LONG_MAX : pPLCF_PosArray[nIdx]; }
+        { return ( nIdx >= nIMax ) ? WW8_FC_MAX : pPLCF_PosArray[nIdx]; }
     bool Get(WW8_CP& rStart, void*& rpValue) const;
     bool GetData(WW8_CP nIdx, WW8_CP& rPos, void*& rpValue) const;
 
@@ -551,7 +551,7 @@ public:
         bool SeekPos(WW8_FC nFc);
         WW8_FC Where() const 
         { 
-            return (mnIdx < mnIMax) ? maEntries[mnIdx].mnFC : LONG_MAX; 
+            return (mnIdx < mnIMax) ? maEntries[mnIdx].mnFC : WW8_FC_MAX; 
         }
         WW8Fkp& operator ++( int ) 
         { 
@@ -773,7 +773,7 @@ public:
     virtual WW8PLCFx& operator ++( int );
     const String* GetName() const;
     WW8_CP GetStartPos() const
-        { return ( nIsEnd ) ? LONG_MAX : pBook[0]->Where(); }
+        { return ( nIsEnd ) ? WW8_CP_MAX : pBook[0]->Where(); }
     long GetLen() const;
     bool GetIsEnd() const { return nIsEnd ? true : false; }
     long GetHandle() const;
@@ -843,10 +843,10 @@ struct WW8PLCFxDesc
     bool bRealLineEnd;  // false bei Pap-Piece-Ende
     void Save( WW8PLCFxSave1& rSave ) const;
     void Restore( const WW8PLCFxSave1& rSave );
-    //With nStartPos set to LONG_MAX then in the case of a pap or chp
+    //With nStartPos set to WW8_CP_MAX then in the case of a pap or chp
     //GetSprms will not search for the sprms, but instead take the
     //existing ones.
-    WW8PLCFxDesc() : pIdStk(0), nStartPos(LONG_MAX) {}
+    WW8PLCFxDesc() : pIdStk(0), nStartPos(WW8_CP_MAX) {}
     void ReduceByOffset();
 };
 
--- sw/source/filter/ww8/ww8struc.hxx	2005-05-17 16:26:23.000000000 +0200
+++ sw/source/filter/ww8/ww8struc.hxx	2005-05-17 17:01:41.000000000 +0200
@@ -108,6 +108,9 @@ typedef sal_Int16 WW8_PN;
 typedef sal_Int32 WW8_FC;
 typedef sal_Int32 WW8_CP;
 
+const WW8_FC WW8_FC_MAX = 0x7fffffff;
+const WW8_CP WW8_CP_MAX = 0x7fffffff;
+
 // STD: STyle Definition
 //   The STD contains the entire definition of a style.
 //   It has two parts, a fixed-length base (cbSTDBase bytes long)
