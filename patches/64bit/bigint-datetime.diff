--- tools/inc/datetime.hxx	2005-12-12 19:13:52.000000000 +0100
+++ tools/inc/datetime.hxx	2005-12-12 20:46:59.000000000 +0100
@@ -115,6 +115,9 @@ public:
 						{ return (const Date&) rDateTime - rDate; }
 
     DateTime&       operator =( const DateTime& rDateTime );
+
+    void            GetWin32FileDateTime( sal_uInt32 & rLower, sal_uInt32 & rUpper );
+    static DateTime CreateFromWin32FileDateTime( const sal_uInt32 & rLower, const sal_uInt32 & rUpper );
 };
 
 inline DateTime& DateTime::operator =( const DateTime& rDateTime )
--- tools/source/datetime/datetime.cxx	2005-12-12 19:15:05.000000000 +0100
+++ tools/source/datetime/datetime.cxx	2005-12-12 20:11:54.000000000 +0100
@@ -386,3 +386,58 @@ double operator -( const DateTime& rDate
 	}
 	return double(nDays);
 }
+
+void DateTime::GetWin32FileDateTime( sal_uInt32 & rLower, sal_uInt32 & rUpper )
+{
+    const sal_Int64 a100nPerSecond = SAL_CONST_INT64( 10000000 );
+    const sal_Int64 a100nPerDay = a100nPerSecond * sal_Int64( 60 * 60 * 24 );
+
+    sal_Int64 nYears = GetYear() - 1601;
+    sal_Int64 nDays =
+        nYears * 365 +
+        nYears / 4 - nYears / 100 + nYears / 400 +
+        GetDayOfYear() - 1;
+
+    sal_Int64 aTime =
+        a100nPerDay * nDays +
+        a100nPerSecond * (
+                sal_Int64( GetSec() ) +
+                60 * sal_Int64( GetMin() ) +
+                60 * 60 * sal_Int64( GetHour() ) );
+
+    rLower = sal_uInt32( aTime % SAL_CONST_UINT64( 0x100000000 ) );
+    rUpper = sal_uInt32( aTime / SAL_CONST_UINT64( 0x100000000 ) );
+}
+
+DateTime DateTime::CreateFromWin32FileDateTime( const sal_uInt32 & rLower, const sal_uInt32 & rUpper )
+{
+    const sal_Int64 a100nPerSecond = SAL_CONST_INT64( 10000000 );
+    const sal_Int64 a100nPerDay = a100nPerSecond * sal_Int64( 60 * 60 * 24 );
+
+    sal_Int64 aTime = sal_Int64(
+            sal_uInt64( rUpper ) * SAL_CONST_UINT64( 0x100000000 ) +
+            sal_uInt64( rLower ) );
+
+    sal_Int64 nDays = aTime / a100nPerDay;
+    sal_Int64 nYears =
+        ( nDays -
+          ( nDays / ( 4 * 365 ) ) +
+          ( nDays / ( 100 * 365 ) ) -
+          ( nDays / ( 400 * 365 ) ) ) / 365;
+    nDays -= nYears * 365 + nYears / 4 - nYears / 100 + nYears / 400;
+
+    USHORT nMonths = 0;
+    for( long nDaysCount = nDays; nDaysCount >= 0; )
+    {
+        nDays = nDaysCount;
+        nMonths ++;
+        nDaysCount -= Date( 1, nMonths, 1601 + nYears ).GetDaysInMonth();
+    }
+
+    Date _aDate( (USHORT)( nDays + 1 ), nMonths, nYears + 1601 );
+    Time _aTime( ULONG( ( aTime / ( a100nPerSecond * 60 * 60 ) ) % sal_Int64( 24 ) ),
+            ULONG( ( aTime / ( a100nPerSecond * 60 ) ) % sal_Int64( 60 ) ),
+            ULONG( ( aTime / ( a100nPerSecond ) ) % sal_Int64( 60 ) ) );
+
+    return DateTime( _aDate, _aTime );
+}
--- sfx2/source/doc/docinf.cxx	2005-12-12 18:53:26.000000000 +0100
+++ sfx2/source/doc/docinf.cxx	2005-12-12 19:58:04.000000000 +0100
@@ -33,9 +33,6 @@
  *
  ************************************************************************/
 
-#ifndef _BIGINT_HXX //autogen wg. BigInt
-#include <tools/bigint.hxx>
-#endif
 #ifndef _SFXECODE_HXX
 #include <svtools/sfxecode.hxx>
 #endif
@@ -350,23 +347,12 @@ ULONG SfxPSDateTimeProperty_Impl::Save(S
 	// Nicht Valid ist das gleiche, wie bei MS, nur nicht konvertiert
 	if( aDateTime.IsValid() )
 		aDateTime.ConvertToUTC();
-	BigInt a100nPerSecond(10000000L);
-	BigInt a100nPerDay=a100nPerSecond*BigInt(60L*60*24);
-	USHORT nYears=aDateTime.GetYear()-1601;
-	long nDays=
-		nYears*365+nYears/4-nYears/100+nYears/400+
-			aDateTime.GetDayOfYear()-1;
-	BigInt aTime=
-		a100nPerDay*BigInt(nDays)+a100nPerSecond*
-			BigInt((long)( aDateTime.GetSec() +
-				   60* aDateTime.GetMin() +
-				   60L*60* aDateTime.GetHour() ));
 
-	BigInt aUlongMax((ULONG)ULONG_MAX);
-	aUlongMax += 1;
+	sal_uInt32 nUpper, nLower;
+	aDateTime.GetWin32FileDateTime( nLower, nUpper );
 
-	rStream<<(UINT32)(aTime % aUlongMax) ;
-	rStream<<(UINT32)(aTime / aUlongMax);
+	rStream << nLower;
+	rStream << nUpper;
 	return rStream.GetErrorCode();
 }
 
@@ -377,33 +363,10 @@ ErrCode SfxPSDateTimeProperty_Impl::Load
 	UINT32 nLow, nHigh;
 	rStream >> nLow;
 	rStream >> nHigh;
-	BigInt aUlongMax( (ULONG)ULONG_MAX );
-	aUlongMax += 1;
-	BigInt aTime = aUlongMax * BigInt( nHigh );
-	aTime += nLow;
-	BigInt a100nPerSecond(10000000L);
-	BigInt a100nPerDay = a100nPerSecond*BigInt( 60L * 60 * 24 );
-	ULONG nDays = aTime / a100nPerDay;
-	USHORT nYears = (USHORT)
-		(( nDays - ( nDays / ( 4 * 365 ) ) + ( nDays / ( 100 * 365 ) ) -
-		  ( nDays / ( 400 * 365 ) ) ) / 365 );
-	nDays -= nYears * 365 + nYears / 4 - nYears / 100 + nYears / 400;
-	USHORT nMonths = 0;
-	for( long nDaysCount = nDays; nDaysCount >= 0; )
-	{
-		nDays = nDaysCount;
-		nMonths ++;
-		nDaysCount-= Date(  1, nMonths, 1601 + nYears ).GetDaysInMonth();
-	}
-	Date _aDate( (USHORT)( nDays + 1 ), nMonths, nYears + 1601 );
-	Time _aTime( ( aTime / ( a100nPerSecond * BigInt( 60 * 60 ) ) ) %
-				 BigInt( 24 ),
-				 ( aTime / ( a100nPerSecond * BigInt( 60 ) ) ) %
-				 BigInt( 60 ),
-				 ( aTime / ( a100nPerSecond ) ) %
-				 BigInt( 60 ) );
-	aDateTime = DateTime( _aDate, _aTime );
+
+	aDateTime = DateTime::CreateFromWin32FileDateTime( nLow, nHigh );
 	aDateTime.ConvertToLocalTime();
+
 	return rStream.GetErrorCode();
 }
 
--- sd/source/filter/eppt/dinfos2.cxx	2005-12-12 18:57:02.000000000 +0100
+++ sd/source/filter/eppt/dinfos2.cxx	2005-12-12 20:51:48.000000000 +0100
@@ -36,9 +36,6 @@
 #ifndef _DINFOS2_HXX_
 #include <dinfos2.hxx>
 #endif
-#ifndef _BIGINT_HXX
-#include <tools/bigint.hxx>
-#endif
 #ifndef _NEW_HXX
 #include <tools/new.hxx>
 #endif
@@ -171,26 +168,14 @@ void PropItem::Write( String& rString )
 
 void PropItem::Write( DateTime& rDateTime )
 {
+	sal_uInt32 nLower, nUpper;
+	
 	rDateTime.ConvertToUTC();
-	BigInt a100nPerSecond( 10000000L );
-	BigInt a100nPerDay = a100nPerSecond * BigInt( 60L * 60 * 24 );
-
-	USHORT nYears = rDateTime.GetYear() - 1601;
-	long nDays =
-		nYears * 365 + nYears / 4 - nYears / 100 + nYears / 400 +
-			rDateTime.GetDayOfYear() - 1;
-	BigInt aTime=
-		a100nPerDay * BigInt( nDays ) + a100nPerSecond *
-			BigInt( (long)( rDateTime.GetSec() +
-				   60 * rDateTime.GetMin() +
-				   60L * 60 * rDateTime.GetHour() ) );
-
-	BigInt aUlongMax( (ULONG)ULONG_MAX );
-	aUlongMax += 1;
+	rDateTime.GetWin32FileDateTime( nLower, nUpper );
 
 	*this	<< (UINT32)VT_FILETIME
-			<< (UINT32)( aTime % aUlongMax )
-			<< (UINT32)( aTime / aUlongMax );
+			<< nLower
+			<< nUpper;
 }
 
 //	-----------------------------------------------------------------------
