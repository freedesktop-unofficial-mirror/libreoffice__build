--- tools/inc/bigint.hxx	2004-06-17 15:08:56.000000000 +0200
+++ tools/inc/bigint.hxx	2004-12-27 15:51:46.677420277 +0100
@@ -111,8 +111,8 @@ public:
     operator        long()  const;
     operator        int()   const;
     operator        double() const;
-    operator        USHORT() const;
-    operator        ULONG() const;
+    operator        sal_uInt16() const;
+    operator        sal_uInt32() const;
 
     void            Set( sal_Bool bSet ) { bIsSet = bSet; }
     ByteString      GetByteString() const;
@@ -230,7 +230,7 @@
         return 0;
 }
 
-inline BigInt::operator USHORT() const
+inline BigInt::operator sal_uInt16() const
 {
     if ( !bIsBig && (nVal == (sal_uInt32)(sal_uInt16)nVal) )
         return (sal_uInt16)nVal;
--- tools/inc/date.hxx	2003-09-04 09:44:38.000000000 +0200
+++ tools/inc/date.hxx	2004-12-27 09:48:14.465562808 +0100
@@ -86,21 +86,21 @@ enum DayOfWeek { MONDAY, TUESDAY, WEDNES
 class Date
 {
 private:
-	ULONG			nDate;
+	sal_uInt32		nDate;
 
 public:
 					Date();
 					Date( const ResId & rResId );
-					Date( ULONG _nDate ) { Date::nDate = _nDate; }
+					Date( sal_uInt32 _nDate ) { Date::nDate = _nDate; }
 					Date( const Date& rDate )
 						{ nDate = rDate.nDate; }
 					Date( USHORT nDay, USHORT nMonth, USHORT nYear )
-						{ nDate = ((ULONG)(nDay%100)) +
-								  (((ULONG)(nMonth%100))*100) +
-								  (((ULONG)nYear%10000)*10000); }
+						{ nDate = ((sal_uInt32)(nDay%100)) +
+								  (((sal_uInt32)(nMonth%100))*100) +
+								  (((sal_uInt32)nYear%10000)*10000); }
 
-	void			SetDate( ULONG nNewDate ) { nDate = nNewDate; }
-	ULONG			GetDate() const { return nDate; }
+	void			SetDate( sal_uInt32 nNewDate ) { nDate = nNewDate; }
+	sal_uInt32		GetDate() const { return nDate; }
 
 	void			SetDay( USHORT nNewDay );
 	void			SetMonth( USHORT nNewMonth );
--- tools/source/generic/bigint.cxx	2004-06-17 15:11:15.000000000 +0200
+++ tools/source/generic/bigint.cxx	2004-12-27 15:52:43.680572912 +0100
@@ -687,7 +687,7 @@ BigInt::BigInt( sal_uInt32 nValue )
 
 // -----------------------------------------------------------------------
 
-BigInt::operator ULONG() const
+BigInt::operator sal_uInt32() const
 {
     if ( !bIsBig )
         return (sal_uInt32)nVal;
--- tools/source/ref/pstm.cxx	2004-12-29 15:23:00.416981449 +0100
+++ tools/source/ref/pstm.cxx	2004-12-29 15:24:12.475527726 +0100
@@ -113,12 +113,12 @@ void SvPersistBaseMemberList::WriteObjec
 	rStm << bTmp;
 #endif
 	UINT32 nCount = Count();
-	ULONG  nCountPos = rStm.Tell();
+	sal_Size  nCountPos = rStm.Tell();
 	UINT32 nWriteCount = 0;
 	rStm << nCount;
 	//bloss die Liste nicht veraendern,
 	//wegen Seiteneffekten beim Save
-	for( ULONG n = 0; n < nCount; n++ )
+	for( UINT32 n = 0; n < nCount; n++ )
 	{
 		SvPersistBase * pObj = GetObject( n );
 		if( !bOnlyStreamed || rStm.IsStreamed( pObj ) )
@@ -130,7 +130,7 @@ void SvPersistBaseMemberList::WriteObjec
 	if( nWriteCount != nCount )
 	{
 		// nicht alle Objekte geschrieben, Count anpassen
-		ULONG nPos = rStm.Tell();
+		sal_Size nPos = rStm.Tell();
 		rStm.Seek( nCountPos );
 		rStm << nWriteCount;
 		rStm.Seek( nPos );
@@ -169,9 +169,9 @@ SvPersistStream& operator >> ( SvPersist
 	if( nVer & PERSIST_LIST_DBGUTIL )
 		nObjLen = rStm.ReadLen( &nObjPos );
 
-	ULONG nCount;
+	UINT32 nCount;
 	rStm >> nCount;
-	for( ULONG n = 0; n < nCount && rStm.GetError() == SVSTREAM_OK; n++ )
+	for( UINT32 n = 0; n < nCount && rStm.GetError() == SVSTREAM_OK; n++ )
 	{
 		SvPersistBase * pObj;
 		rStm >> pObj;
