--- bridges/source/cpp_uno/gcc3_linux_x86-64/except.cxx	9 Mar 2004 12:11:06 -0000	1.2
+++ bridges/source/cpp_uno/gcc3_linux_x86-64/except.cxx	22 Jan 2005 23:55:03 -0000	1.2.30.1
@@ -93,7 +93,7 @@ void dummy_can_throw_anything( char cons
 //==================================================================================================
 static OUString toUNOname( char const * p ) SAL_THROW( () )
 {
-#ifdef DEBUG
+#if OSL_DEBUG_LEVEL > 1
     char const * start = p;
 #endif
     
@@ -118,7 +118,7 @@ static OUString toUNOname( char const * 
             buf.append( (sal_Unicode)'.' );
     }
     
-#ifdef DEBUG
+#if OSL_DEBUG_LEVEL > 1
     OUString ret( buf.makeStringAndClear() );
     OString c_ret( OUStringToOString( ret, RTL_TEXTENCODING_ASCII_US ) );
     fprintf( stderr, "> toUNOname(): %s => %s\n", start, c_ret.getStr() );
@@ -200,7 +200,7 @@ type_info * RTTI::getRTTI( typelib_Compo
                 // symbol and rtti-name is nearly identical,
                 // the symbol is prefixed with _ZTI
                 char const * rttiName = symName.getStr() +4;
-#ifdef DEBUG
+#if OSL_DEBUG_LEVEL > 1
                 fprintf( stderr,"generated rtti for %s\n", rttiName );
 #endif
                 if (pTypeDescr->pBaseTypeDescription)
@@ -253,6 +253,13 @@ static void deleteException( void * pExc
 //==================================================================================================
 void raiseException( uno_Any * pUnoExc, uno_Mapping * pUno2Cpp )
 {
+#if OSL_DEBUG_LEVEL > 1
+    OString cstr(
+        OUStringToOString(
+            *reinterpret_cast< OUString const * >( &pUnoExc->pType->pTypeName ),
+            RTL_TEXTENCODING_ASCII_US ) );
+    fprintf( stderr, "> uno exception occured: %s\n", cstr.getStr() );
+#endif
     void * pCppExc;
     type_info * rtti;
 
@@ -295,7 +302,7 @@ void raiseException( uno_Any * pUnoExc, 
 }
 
 //==================================================================================================
-void fillUnoException( __cxa_exception * header, uno_Any * pExc, uno_Mapping * pCpp2Uno )
+void fillUnoException( __cxa_exception * header, uno_Any * pUnoExc, uno_Mapping * pCpp2Uno )
 {
     OSL_ENSURE( header, "### no exception header!!!" );
     if (! header)
@@ -309,8 +316,8 @@ void fillUnoException( __cxa_exception *
         terminate();
     
     // construct uno exception any
-    ::uno_any_constructAndConvert( pExc, header->adjustedPtr, pExcTypeDescr, pCpp2Uno );
-    ::typelib_typedescription_release( pExcTypeDescr );
+    uno_any_constructAndConvert( pUnoExc, header->adjustedPtr, pExcTypeDescr, pCpp2Uno );
+    typelib_typedescription_release( pExcTypeDescr );
 }
 
 }
--- bridges/source/cpp_uno/gcc3_linux_x86-64/share.hxx	9 Mar 2004 12:11:26 -0000	1.2
+++ bridges/source/cpp_uno/gcc3_linux_x86-64/share.hxx	22 Jan 2005 23:55:22 -0000	1.2.30.1
@@ -59,6 +59,8 @@
  *
  ************************************************************************/
 
+#include "uno/mapping.h"
+
 #include <typeinfo>
 #include <exception>
 #include <cstddef>
@@ -66,6 +68,8 @@
 namespace CPPU_CURRENT_NAMESPACE
 {
 
+void dummy_can_throw_anything( char const * );
+
 // ----- following decl from libstdc++-v3/libsupc++/unwind-cxx.h and unwind.h
 
 struct _Unwind_Exception
