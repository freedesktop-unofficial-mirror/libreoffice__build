--- svtools/inc/zforlist.hxx	25 Jun 2004 17:22:53 -0000	1.32
+++ svtools/inc/zforlist.hxx	21 Jan 2005 17:16:07 -0000	1.32.146.1
@@ -271,10 +271,10 @@ enum NfEvalDateFormat
 #endif
 #ifdef _ZFORLIST_DECLARE_TABLE
 DECLARE_TABLE (SvNumberFormatTable, SvNumberformat*);
-DECLARE_TABLE (SvULONGTable, ULONG*);
+DECLARE_TABLE (Svsal_uInt32Table, sal_uInt32*);
 #else
 typedef Table SvNumberFormatTable;
-typedef Table SvULONGTable;
+typedef Table Svsal_uInt32Table;
 #endif
 
 
@@ -421,24 +421,24 @@ public:
 	/** Get table of formats of a specific type of a language/country.
 		FIndex returns the default format of that type. */
 	SvNumberFormatTable& GetEntryTable(short eType,
-									   ULONG& FIndex,
+									   sal_uInt32& FIndex,
 									   LanguageType eLnge);
 
 	/** Get table of formats of a specific type of a language/country.
 		FIndex returns the default format of that type.
 		If the language/country was never touched before new entries are generated */
 	SvNumberFormatTable& ChangeCL(short eType,
-								  ULONG& FIndex,
+								  sal_uInt32& FIndex,
 								  LanguageType eLnge);
 
 	/** Get table of formats of the same type as FIndex; eType and rLnge are
 		set accordingly. An unknown format is set to Standard/General */
 	SvNumberFormatTable& GetFirstEntryTable(short& eType,
-											ULONG& FIndex,
+											sal_uInt32& FIndex,
 											LanguageType& rLnge);
 
 	/// Delete an entry including the format it is refering to
-	void DeleteEntry(ULONG nKey);
+	void DeleteEntry(sal_uInt32 nKey);
 
 	/** Create new entry of a format code string for language/country.
 		@return
@@ -485,22 +485,22 @@ public:
 				returned in fOutNumber
 			<FALSE/> if input is not a number
 	 */
-	BOOL IsNumberFormat( const String& sString, ULONG& F_Index, double& fOutNumber );
+	BOOL IsNumberFormat( const String& sString, sal_uInt32& F_Index, double& fOutNumber );
 
 	/// Format a number according to a format index, return string and color
-	void GetOutputString( const double& fOutNumber, ULONG nFIndex,
+	void GetOutputString( const double& fOutNumber, sal_uInt32 nFIndex,
 						  String& sOutString, Color** ppColor );
 
 	/** Format a string according to a format index, return string and color.
 		Formats only if the format code is of type text or the 4th subcode
 		of a format code is specified, otherwise sOutString will be == "" */
-	void GetOutputString( String& sString, ULONG nFIndex,
+	void GetOutputString( String& sString, sal_uInt32 nFIndex,
 						  String& sOutString, Color** ppColor );
 
 	/** Format a number according to the standard default format matching
 		the given format index */
 	void GetInputLineString( const double& fOutNumber,
-							ULONG nFIndex, String& sOutString );
+							sal_uInt32 nFIndex, String& sOutString );
 
 	/** Format a number according to a format code string to be scanned.
 		@return
@@ -596,36 +596,36 @@ public:
 	BOOL GetNoZero() { return bNoZero; }
 	/** Get the type of a format (or NUMBERFORMAT_UNDEFINED if no entry),
 	 	but with NUMBERFORMAT_DEFINED masked out */
-	short GetType(ULONG nFIndex);
+	short GetType(sal_uInt32 nFIndex);
 
 	/// As the name says
 	void ClearMergeTable();
 	/// Merge in all new entries from rNewTable and return a table of resulting new format indices
-	SvULONGTable* MergeFormatter(SvNumberFormatter& rNewTable);
+	Svsal_uInt32Table* MergeFormatter(SvNumberFormatter& rNewTable);
 
 	/// Whether a merge table is present or not
 	inline BOOL HasMergeFmtTbl() const;
 	/// Return the new format index for an old format index, if a merge table exists
-	inline ULONG GetMergeFmtIndex( ULONG nOldFmt ) const;
+	inline sal_uInt32 GetMergeFmtIndex( sal_uInt32 nOldFmt ) const;
 
 	/// Return the last used position ever of a language/country combination
-	USHORT GetLastInsertKey(ULONG CLOffset);
+	USHORT GetLastInsertKey(sal_uInt32 CLOffset);
 
 	/** Return the format index of a builtin format for a specific language/country.
 		If nFormat is not a builtin format nFormat is returned. */
-	ULONG GetFormatForLanguageIfBuiltIn( ULONG nFormat,
+	sal_uInt32 GetFormatForLanguageIfBuiltIn( sal_uInt32 nFormat,
 									LanguageType eLnge = LANGUAGE_DONTKNOW );
 
 	/** Return the format index for a builtin format of a specific language
 		@see NfIndexTableOffset
 	 */
-	ULONG GetFormatIndex( NfIndexTableOffset, LanguageType eLnge = LANGUAGE_DONTKNOW );
+	sal_uInt32 GetFormatIndex( NfIndexTableOffset, LanguageType eLnge = LANGUAGE_DONTKNOW );
 
 	/** Return enum index of a format index of a builtin format,
 		NF_INDEX_TABLE_ENTRIES if it's not a builtin format.
 		@see NfIndexTableOffset
 	 */
-	NfIndexTableOffset GetIndexTableOffset( ULONG nFormat ) const;
+	NfIndexTableOffset GetIndexTableOffset( sal_uInt32 nFormat ) const;
 
 	/** Set evaluation type and order of input date strings
 		@see NfEvalDateFormat
@@ -786,7 +786,7 @@ private:
 	SvNumberFormatTable aFTable;			// Table of format keys to format entries
 	Table aDefaultFormatKeys;				// Table of default standard to format keys
 	SvNumberFormatTable* pFormatTable;		// For the UI dialog
-	SvULONGTable* pMergeTable;				// List of indices for merging two formatters
+	Svsal_uInt32Table* pMergeTable;				// List of indices for merging two formatters
 	CharClass* pCharClass;					// CharacterClassification
     OnDemandLocaleDataWrapper xLocaleData;  // LocaleData switched between SYSTEM, ENGLISH and other
     OnDemandTransliterationWrapper xTransliteration;    // Transliteration loaded on demand
@@ -825,38 +825,38 @@ private:
 
 	// Generate builtin formats provided by i18n behind CLOffset,
 	// if bLoadingSO5==FALSE also generate additional i18n formats.
-	SVT_DLLPRIVATE void ImpGenerateFormats( ULONG CLOffset, BOOL bLoadingSO5 );
+	SVT_DLLPRIVATE void ImpGenerateFormats( sal_uInt32 CLOffset, BOOL bLoadingSO5 );
 
 	// Generate additional formats provided by i18n
 	SVT_DLLPRIVATE void ImpGenerateAdditionalFormats(
-				ULONG CLOffset,
+				sal_uInt32 CLOffset,
 				NumberFormatCodeWrapper& rNumberFormatCode,
 				BOOL bAfterLoadingSO5 );
 
 	SVT_DLLPRIVATE SvNumberformat* ImpInsertFormat(
 				const ::com::sun::star::i18n::NumberFormatCode& rCode,
-				ULONG nPos,
+				sal_uInt32 nPos,
 				BOOL bAfterLoadingSO5 = FALSE,
 				sal_Int16 nOrgIndex = 0 );
 	// ImpInsertNewStandardFormat for new (since version ...) builtin formats
 	SVT_DLLPRIVATE SvNumberformat* ImpInsertNewStandardFormat(
 				const ::com::sun::star::i18n::NumberFormatCode& rCode,
-				ULONG nPos,
+				sal_uInt32 nPos,
 				USHORT nVersion,
 				BOOL bAfterLoadingSO5 = FALSE,
 				sal_Int16 nOrgIndex = 0 );
 
 	// Return CLOffset or (MaxCLOffset + SV_COUNTRY_LANGUAGE_OFFSET) if new language/country
-	SVT_DLLPRIVATE ULONG ImpGetCLOffset(LanguageType eLnge) const;
+	SVT_DLLPRIVATE sal_uInt32 ImpGetCLOffset(LanguageType eLnge) const;
 
 	// Test whether format code already exists, then return index key,
 	// otherwise NUMBERFORMAT_ENTRY_NOT_FOUND
-	SVT_DLLPRIVATE ULONG ImpIsEntry( const String& rString,
-						ULONG CLOffset,
+	SVT_DLLPRIVATE sal_uInt32 ImpIsEntry( const String& rString,
+						sal_uInt32 CLOffset,
 						LanguageType eLnge );
 
 	// Create builtin formats for language/country if necessary, return CLOffset
-	SVT_DLLPRIVATE ULONG ImpGenerateCL( LanguageType eLnge, BOOL bLoadingSO5 = FALSE );
+	SVT_DLLPRIVATE sal_uInt32 ImpGenerateCL( LanguageType eLnge, BOOL bLoadingSO5 = FALSE );
 
     // Build negative currency format, old compatibility style
     SVT_DLLPRIVATE void ImpGetNegCurrFormat( String& sNegStr, const String& rCurrSymbol );
@@ -982,9 +982,9 @@ public:
 
 // --------------------------- inline --------------------------------------
 
-inline ULONG SvNumberFormatter::GetMergeFmtIndex( ULONG nOldFmt ) const
+inline sal_uInt32 SvNumberFormatter::GetMergeFmtIndex( sal_uInt32 nOldFmt ) const
 {
-    ULONG* pU = (pMergeTable && pMergeTable->Count()) ? (ULONG*)pMergeTable->Get( nOldFmt ) : 0;
+    sal_uInt32* pU = (pMergeTable && pMergeTable->Count()) ? (sal_uInt32*)pMergeTable->Get( nOldFmt ) : 0;
 	return pU ? *pU : nOldFmt;
 }
 
--- svtools/source/control/fmtfield.cxx	3 Dec 2004 14:28:21 -0000	1.29
+++ svtools/source/control/fmtfield.cxx	21 Jan 2005 17:16:19 -0000	1.29.62.1
@@ -1065,7 +1065,7 @@ BOOL FormattedField::ImplGetValue(double
 
 	DBG_ASSERT(ImplGetFormatter() != NULL, "FormattedField::ImplGetValue : can't give you a current value without a formatter !");
 
-	ULONG nFormatKey = m_nFormatKey;	// IsNumberFormat veraendert den FormatKey ...
+	sal_uInt32 nFormatKey = m_nFormatKey;	// IsNumberFormat veraendert den FormatKey ...
 
 	if (ImplGetFormatter()->IsTextFormat(nFormatKey) && m_bTreatAsNumber)
 		// damit wir in einem als Text formatierten Feld trotzdem eine Eingabe wie '1,1' erkennen ...
@@ -1079,7 +1079,7 @@ BOOL FormattedField::ImplGetValue(double
 		// the default number format for this language
 		ULONG nStandardNumericFormat = m_pFormatter->GetStandardFormat(NUMBERFORMAT_NUMBER, eLanguage);
 
-		ULONG nTempFormat = nStandardNumericFormat;
+		sal_uInt32 nTempFormat = nStandardNumericFormat;
 		double dTemp;
 		if (m_pFormatter->IsNumberFormat(sText, nTempFormat, dTemp) &&
 			NUMBERFORMAT_NUMBER == m_pFormatter->GetType(nTempFormat))
--- svtools/source/numbers/numfmuno.cxx	16 Jun 2004 10:27:44 -0000	1.6
+++ svtools/source/numbers/numfmuno.cxx	21 Jan 2005 17:16:44 -0000	1.6.16.1
@@ -230,7 +230,7 @@ sal_Int32 SAL_CALL SvNumberFormatterServ
 	if (pFormatter)
 	{
 		String aTemp = aString;
-		ULONG nUKey = nKey;
+		sal_uInt32 nUKey = nKey;
 		double fValue = 0.0;
 		if ( pFormatter->IsNumberFormat(aTemp, nUKey, fValue) )
 			nRet = nUKey;
@@ -254,7 +254,7 @@ double SAL_CALL SvNumberFormatterService
 	if (pFormatter)
 	{
 		String aTemp = aString;
-		ULONG nUKey = nKey;
+		sal_uInt32 nUKey = nKey;
 		double fValue = 0.0;
 		if ( pFormatter->IsNumberFormat(aTemp, nUKey, fValue) )
 			fRet = fValue;
@@ -507,15 +507,15 @@ uno::Sequence<sal_Int32> SAL_CALL SvNumb
 	SvNumberFormatter* pFormatter = pSupplier ? pSupplier->GetNumberFormatter() : NULL;
 	if ( pFormatter )
 	{
-		ULONG nIndex = 0;
+		sal_uInt32 nIndex = 0;
 		LanguageType eLang = lcl_GetLanguage( nLocale );
 		SvNumberFormatTable& rTable = bCreate ?
 										pFormatter->ChangeCL( nType, nIndex, eLang ) :
 										pFormatter->GetEntryTable( nType, nIndex, eLang );
-		ULONG nCount = rTable.Count();
+		sal_uInt32 nCount = rTable.Count();
 		uno::Sequence<sal_Int32> aSeq(nCount);
 		sal_Int32* pAry = aSeq.getArray();
-		for (ULONG i=0; i<nCount; i++)
+		for (sal_uInt32 i=0; i<nCount; i++)
 			pAry[i] = rTable.GetObjectKey( i );
 
 		return aSeq;
--- svtools/source/numbers/numuno.cxx	16 Jun 2004 10:28:10 -0000	1.3
+++ svtools/source/numbers/numuno.cxx	21 Jan 2005 15:09:36 -0000	1.3.16.1
@@ -117,7 +117,7 @@ void SvNumberFormatsSupplierObj::SetNumb
 	pImpl->pFormatter = pNew;
 }
 
-void SvNumberFormatsSupplierObj::NumberFormatDeleted(ULONG nKey)
+void SvNumberFormatsSupplierObj::NumberFormatDeleted(sal_uInt32 nKey)
 {
 	//	Basis-Implementierung tut nix...
 }
--- svtools/source/numbers/zforlist.cxx	25 Jun 2004 17:27:03 -0000	1.53
+++ svtools/source/numbers/zforlist.cxx	21 Jan 2005 17:17:04 -0000	1.53.146.1
@@ -181,7 +181,7 @@ public:
                                 { aFormatters.Insert( pThis, LIST_APPEND ); }
             SvNumberFormatter*  Remove( SvNumberFormatter* pThis )
                                     { return (SvNumberFormatter*)aFormatters.Remove( pThis ); }
-            ULONG           Count()
+            sal_uInt32           Count()
                                 { return aFormatters.Count(); }
 
     virtual void            Notify( SvtBroadcaster& rBC, const SfxHint& rHint );
@@ -477,13 +477,13 @@ void SvNumberFormatter::ImpChangeSysCL( 
 
 void SvNumberFormatter::ReplaceSystemCL( LanguageType eOldLanguage )
 {
-    ULONG nCLOffset = ImpGetCLOffset( LANGUAGE_SYSTEM );
+    sal_uInt32 nCLOffset = ImpGetCLOffset( LANGUAGE_SYSTEM );
     if ( nCLOffset > MaxCLOffset )
         return ;    // no SYSTEM entries to replace
 
-    const ULONG nMaxBuiltin = nCLOffset + SV_MAX_ANZ_STANDARD_FORMATE;
-    const ULONG nNextCL = nCLOffset + SV_COUNTRY_LANGUAGE_OFFSET;
-    ULONG nKey;
+    const sal_uInt32 nMaxBuiltin = nCLOffset + SV_MAX_ANZ_STANDARD_FORMATE;
+    const sal_uInt32 nNextCL = nCLOffset + SV_COUNTRY_LANGUAGE_OFFSET;
+    sal_uInt32 nKey;
 
     // remove old builtin formats
     aFTable.Seek( nCLOffset );
@@ -556,7 +556,7 @@ void SvNumberFormatter::ReplaceSystemCL(
 }
 
 
-BOOL SvNumberFormatter::IsTextFormat(ULONG F_Index) const
+BOOL SvNumberFormatter::IsTextFormat(sal_uInt32 F_Index) const
 {
 	SvNumberformat* pFormat = (SvNumberformat*) aFTable.Get(F_Index);
 	if (!pFormat)
@@ -565,7 +565,7 @@ BOOL SvNumberFormatter::IsTextFormat(ULO
 		return pFormat->IsTextFormat();
 }
 
-BOOL SvNumberFormatter::HasTextFormat(ULONG F_Index) const
+BOOL SvNumberFormatter::HasTextFormat(sal_uInt32 F_Index) const
 {
 	SvNumberformat* pFormat = (SvNumberformat*) aFTable.Get(F_Index);
 	if (!pFormat)
@@ -577,7 +577,7 @@ BOOL SvNumberFormatter::HasTextFormat(UL
 BOOL SvNumberFormatter::PutEntry(String& rString,
 								 xub_StrLen& nCheckPos,
 								 short& nType,
-								 ULONG& nKey,			// Formatnummer
+								 sal_uInt32& nKey,			// Formatnummer
 								 LanguageType eLnge)
 {
 	nKey = 0;
@@ -644,7 +644,7 @@ BOOL SvNumberFormatter::PutEntry(String&
 BOOL SvNumberFormatter::PutandConvertEntry(String& rString,
 										   xub_StrLen& nCheckPos,
 										   short& nType,
-										   ULONG& nKey,
+										   sal_uInt32& nKey,
 										   LanguageType eLnge,
 										   LanguageType eNewLnge)
 {
@@ -662,7 +662,7 @@ BOOL SvNumberFormatter::PutandConvertEnt
 BOOL SvNumberFormatter::PutandConvertEntrySystem(String& rString,
 										   xub_StrLen& nCheckPos,
 										   short& nType,
-										   ULONG& nKey,
+										   sal_uInt32& nKey,
 										   LanguageType eLnge,
 										   LanguageType eNewLnge)
 {
@@ -677,7 +677,7 @@ BOOL SvNumberFormatter::PutandConvertEnt
 }
 
 
-void SvNumberFormatter::DeleteEntry(ULONG nKey)
+void SvNumberFormatter::DeleteEntry(sal_uInt32 nKey)
 {
 	SvNumberformat* pEntry = aFTable.Remove(nKey);
 	delete pEntry;
@@ -693,7 +693,7 @@ void SvNumberFormatter::PrepareSave()
 	 }
 }
 
-void SvNumberFormatter::SetFormatUsed(ULONG nFIndex)
+void SvNumberFormatter::SetFormatUsed(sal_uInt32 nFIndex)
 {
 	SvNumberformat* pFormat = (SvNumberformat*) aFTable.Get(nFIndex);
 	if (pFormat)
@@ -895,7 +895,7 @@ BOOL SvNumberFormatter::Load( SvStream& 
 	{
 		LanguageType eLang = aList[j];
 		ChangeIntl( eLang );
-		ULONG CLOffset = ImpGetCLOffset( eLang );
+		sal_uInt32 CLOffset = ImpGetCLOffset( eLang );
 		ImpGenerateAdditionalFormats( CLOffset, aNumberFormatCode, TRUE );
 	}
 	ChangeIntl( eOldLanguage );
@@ -995,10 +995,10 @@ String SvNumberFormatter::GetStandardNam
 }
 
 
-ULONG SvNumberFormatter::ImpGetCLOffset(LanguageType eLnge) const
+sal_uInt32 SvNumberFormatter::ImpGetCLOffset(LanguageType eLnge) const
 {
 	SvNumberformat* pFormat;
-	ULONG nOffset = 0;
+	sal_uInt32 nOffset = 0;
 	while (nOffset <= MaxCLOffset)
 	{
 		pFormat = (SvNumberformat*) aFTable.Get(nOffset);
@@ -1009,8 +1009,8 @@ ULONG SvNumberFormatter::ImpGetCLOffset(
 	return nOffset;
 }
 
-ULONG SvNumberFormatter::ImpIsEntry(const String& rString,
-									   ULONG nCLOffset,
+sal_uInt32 SvNumberFormatter::ImpIsEntry(const String& rString,
+									   sal_uInt32 nCLOffset,
 									   LanguageType eLnge)
 {
 #ifndef NF_COMMENT_IN_FORMATSTRING
@@ -1056,7 +1056,7 @@ ULONG SvNumberFormatter::ImpIsEntry(cons
 
 SvNumberFormatTable& SvNumberFormatter::GetFirstEntryTable(
 													  short& eType,
-													  ULONG& FIndex,
+													  sal_uInt32& FIndex,
 													  LanguageType& rLnge)
 {
 	short eTypetmp = eType;
@@ -1094,10 +1094,10 @@ SvNumberFormatTable& SvNumberFormatter::
 	return GetEntryTable(eTypetmp, FIndex, rLnge);
 }
 
-ULONG SvNumberFormatter::ImpGenerateCL( LanguageType eLnge, BOOL bLoadingSO5 )
+sal_uInt32 SvNumberFormatter::ImpGenerateCL( LanguageType eLnge, BOOL bLoadingSO5 )
 {
 	ChangeIntl(eLnge);
-	ULONG CLOffset = ImpGetCLOffset(ActLnge);
+	sal_uInt32 CLOffset = ImpGetCLOffset(ActLnge);
 	if (CLOffset > MaxCLOffset)
 	{	// new CL combination
 #ifndef PRODUCT
@@ -1153,7 +1153,7 @@ ULONG SvNumberFormatter::ImpGenerateCL( 
 }
 
 SvNumberFormatTable& SvNumberFormatter::ChangeCL(short eType,
-												 ULONG& FIndex,
+												 sal_uInt32& FIndex,
 												 LanguageType eLnge)
 {
 	ImpGenerateCL(eLnge);
@@ -1162,7 +1162,7 @@ SvNumberFormatTable& SvNumberFormatter::
 
 SvNumberFormatTable& SvNumberFormatter::GetEntryTable(
 													short eType,
-													ULONG& FIndex,
+													sal_uInt32& FIndex,
 													LanguageType eLnge)
 {
 	if ( pFormatTable )
@@ -1170,11 +1170,11 @@ SvNumberFormatTable& SvNumberFormatter::
 	else
 		pFormatTable = new SvNumberFormatTable;
 	ChangeIntl(eLnge);
-	ULONG CLOffset = ImpGetCLOffset(ActLnge);
+	sal_uInt32 CLOffset = ImpGetCLOffset(ActLnge);
 
     // Might generate and insert a default format for the given type
     // (e.g. currency) => has to be done before collecting formats.
-    ULONG nDefaultIndex = GetStandardFormat( eType, ActLnge );
+    sal_uInt32 nDefaultIndex = GetStandardFormat( eType, ActLnge );
 
 	SvNumberformat* pEntry;
 	pEntry = (SvNumberformat*) aFTable.Seek(CLOffset);
@@ -1207,7 +1207,7 @@ SvNumberFormatTable& SvNumberFormatter::
 }
 
 BOOL SvNumberFormatter::IsNumberFormat(const String& sString,
-									   ULONG& F_Index,
+									   sal_uInt32& F_Index,
 									   double& fOutNumber)
 {
 	short FType;
@@ -1329,10 +1329,10 @@ BOOL SvNumberFormatter::IsCompatible(sho
 }
 
 
-ULONG SvNumberFormatter::ImpGetDefaultFormat( short nType )
+sal_uInt32 SvNumberFormatter::ImpGetDefaultFormat( short nType )
 {
-	ULONG CLOffset = ImpGetCLOffset( ActLnge );
-	ULONG nSearch;
+	sal_uInt32 CLOffset = ImpGetCLOffset( ActLnge );
+	sal_uInt32 nSearch;
 	switch( nType )
 	{
 		case NUMBERFORMAT_DATE		:
@@ -1402,9 +1402,9 @@ ULONG SvNumberFormatter::ImpGetDefaultFo
 }
 
 
-ULONG SvNumberFormatter::GetStandardFormat( short eType, LanguageType eLnge )
+sal_uInt32 SvNumberFormatter::GetStandardFormat( short eType, LanguageType eLnge )
 {
-	ULONG CLOffset = ImpGenerateCL(eLnge);
+	sal_uInt32 CLOffset = ImpGenerateCL(eLnge);
 	switch(eType)
 	{
 		case NUMBERFORMAT_CURRENCY  :
@@ -1432,7 +1432,7 @@ ULONG SvNumberFormatter::GetStandardForm
 	}
 }
 
-BOOL SvNumberFormatter::IsSpecialStandardFormat( ULONG nFIndex,
+BOOL SvNumberFormatter::IsSpecialStandardFormat( sal_uInt32 nFIndex,
 		LanguageType eLnge )
 {
 	return
@@ -1442,7 +1442,7 @@ BOOL SvNumberFormatter::IsSpecialStandar
 		;
 }
 
-ULONG SvNumberFormatter::GetStandardFormat( ULONG nFIndex, short eType,
+sal_uInt32 SvNumberFormatter::GetStandardFormat( sal_uInt32 nFIndex, short eType,
 		LanguageType eLnge )
 {
 	if ( IsSpecialStandardFormat( nFIndex, eLnge ) )
@@ -1451,7 +1451,7 @@ ULONG SvNumberFormatter::GetStandardForm
 		return GetStandardFormat( eType, eLnge );
 }
 
-ULONG SvNumberFormatter::GetStandardFormat( double fNumber, ULONG nFIndex,
+sal_uInt32 SvNumberFormatter::GetStandardFormat( double fNumber, sal_uInt32 nFIndex,
 		short eType, LanguageType eLnge )
 {
 	if ( IsSpecialStandardFormat( nFIndex, eLnge ) )
@@ -1492,7 +1492,7 @@ ULONG SvNumberFormatter::GetStandardForm
 }
 
 void SvNumberFormatter::GetInputLineString(const double& fOutNumber,
-										   ULONG nFIndex,
+										   sal_uInt32 nFIndex,
 										   String& sOutString)
 {
 	SvNumberformat* pFormat;
@@ -1545,7 +1545,7 @@ void SvNumberFormatter::GetInputLineStri
 }
 
 void SvNumberFormatter::GetOutputString(const double& fOutNumber,
-										ULONG nFIndex,
+										sal_uInt32 nFIndex,
 										String& sOutString,
 										Color** ppColor)
 {
@@ -1562,7 +1562,7 @@ void SvNumberFormatter::GetOutputString(
 }
 
 void SvNumberFormatter::GetOutputString(String& sString,
-										ULONG nFIndex,
+										sal_uInt32 nFIndex,
 										String& sOutString,
 										Color** ppColor)
 {
@@ -1716,7 +1716,7 @@ BOOL SvNumberFormatter::GetPreviewString
 	return FALSE;
 }
 
-ULONG SvNumberFormatter::TestNewString(const String& sFormatString,
+sal_uInt32 SvNumberFormatter::TestNewString(const String& sFormatString,
 									  LanguageType eLnge)
 {
 	if (sFormatString.Len() == 0) 						// keinen Leerstring
@@ -1749,7 +1749,7 @@ ULONG SvNumberFormatter::TestNewString(c
 
 SvNumberformat* SvNumberFormatter::ImpInsertFormat(
 			const ::com::sun::star::i18n::NumberFormatCode& rCode,
-			ULONG nPos, BOOL bAfterLoadingSO5, sal_Int16 nOrgIndex )
+			sal_uInt32 nPos, BOOL bAfterLoadingSO5, sal_Int16 nOrgIndex )
 {
 	String aCodeStr( rCode.Code );
 	if ( rCode.Index < NF_INDEX_TABLE_ENTRIES &&
@@ -1857,7 +1857,7 @@ SvNumberformat* SvNumberFormatter::ImpIn
 
 SvNumberformat* SvNumberFormatter::ImpInsertNewStandardFormat(
 			const ::com::sun::star::i18n::NumberFormatCode& rCode,
-			ULONG nPos, USHORT nVersion, BOOL bAfterLoadingSO5,
+			sal_uInt32 nPos, USHORT nVersion, BOOL bAfterLoadingSO5,
 			sal_Int16 nOrgIndex )
 {
 	SvNumberformat* pNewFormat = ImpInsertFormat( rCode, nPos,
@@ -1868,7 +1868,7 @@ SvNumberformat* SvNumberFormatter::ImpIn
 	return pNewFormat;
 }
 
-void SvNumberFormatter::GetFormatSpecialInfo(ULONG nFormat,
+void SvNumberFormatter::GetFormatSpecialInfo(sal_uInt32 nFormat,
 											 BOOL& bThousand,
 											 BOOL& IsRed,
 											 USHORT& nPrecision,
@@ -1888,7 +1888,7 @@ void SvNumberFormatter::GetFormatSpecial
 	}
 }
 
-USHORT SvNumberFormatter::GetFormatPrecision( ULONG nFormat ) const
+USHORT SvNumberFormatter::GetFormatPrecision( sal_uInt32 nFormat ) const
 {
 	const SvNumberformat* pFormat = aFTable.Get( nFormat );
 	if ( pFormat )
@@ -1898,7 +1898,7 @@ USHORT SvNumberFormatter::GetFormatPreci
 }
 
 
-String SvNumberFormatter::GetFormatDecimalSep( ULONG nFormat ) const
+String SvNumberFormatter::GetFormatDecimalSep( sal_uInt32 nFormat ) const
 {
 	const SvNumberformat* pFormat = aFTable.Get( nFormat );
 	if ( !pFormat || pFormat->GetLanguage() == ActLnge )
@@ -1920,7 +1920,7 @@ String SvNumberFormatter::GetFormatDecim
 }
 
 
-ULONG SvNumberFormatter::GetFormatSpecialInfo( const String& rFormatString,
+sal_uInt32 SvNumberFormatter::GetFormatSpecialInfo( const String& rFormatString,
 			BOOL& bThousand, BOOL& IsRed, USHORT& nPrecision,
 			USHORT& nAnzLeading, LanguageType eLnge )
 
@@ -2129,7 +2129,7 @@ sal_Int32 SvNumberFormatter::ImpAdjustFo
 }
 
 
-void SvNumberFormatter::ImpGenerateFormats( ULONG CLOffset, BOOL bLoadingSO5 )
+void SvNumberFormatter::ImpGenerateFormats( sal_uInt32 CLOffset, BOOL bLoadingSO5 )
 {
 	using namespace ::com::sun::star;
 
@@ -2555,7 +2555,7 @@ void SvNumberFormatter::ImpGenerateForma
 }
 
 
-void SvNumberFormatter::ImpGenerateAdditionalFormats( ULONG CLOffset,
+void SvNumberFormatter::ImpGenerateAdditionalFormats( sal_uInt32 CLOffset,
 			NumberFormatCodeWrapper& rNumberFormatCode, BOOL bAfterLoadingSO5 )
 {
 	using namespace ::com::sun::star;
@@ -2567,7 +2567,7 @@ void SvNumberFormatter::ImpGenerateAddit
 		DBG_ERRORFILE( "ImpGenerateAdditionalFormats: no GENERAL format" );
 		return ;
 	}
-	ULONG nPos = CLOffset + pStdFormat->GetLastInsertKey();
+	sal_uInt32 nPos = CLOffset + pStdFormat->GetLastInsertKey();
 	rNumberFormatCode.setLocale( GetLocale() );
 	sal_Int32 j;
 
@@ -2649,7 +2649,7 @@ void SvNumberFormatter::ImpGetNegCurrFor
 }
 
 void SvNumberFormatter::GenerateFormat(String& sString,
-									   ULONG nIndex,
+									   sal_uInt32 nIndex,
 									   LanguageType eLnge,
 									   BOOL bThousand,
 									   BOOL IsRed,
@@ -2784,24 +2784,24 @@ BOOL SvNumberFormatter::IsUserDefined(co
 	return FALSE;
 }
 
-ULONG SvNumberFormatter::GetEntryKey(const String& sStr,
+sal_uInt32 SvNumberFormatter::GetEntryKey(const String& sStr,
 									 LanguageType eLnge)
 {
 	if (eLnge == LANGUAGE_DONTKNOW)
         eLnge = IniLnge;
-	ULONG CLOffset = ImpGenerateCL(eLnge);				// ggfs. neu Standard-
+	sal_uInt32 CLOffset = ImpGenerateCL(eLnge);				// ggfs. neu Standard-
 													// formate anlegen
 	return ImpIsEntry(sStr, CLOffset, eLnge);
 }
 
-ULONG SvNumberFormatter::GetStandardIndex(LanguageType eLnge)
+sal_uInt32 SvNumberFormatter::GetStandardIndex(LanguageType eLnge)
 {
 	if (eLnge == LANGUAGE_DONTKNOW)
         eLnge = IniLnge;
 	return GetStandardFormat(NUMBERFORMAT_NUMBER, eLnge);
 }
 
-short SvNumberFormatter::GetType(ULONG nFIndex)
+short SvNumberFormatter::GetType(sal_uInt32 nFIndex)
 {
 	short eType;
 	SvNumberformat* pFormat = (SvNumberformat*) aFTable.Get(nFIndex);
@@ -2830,15 +2830,15 @@ void SvNumberFormatter::ClearMergeTable(
     }
 }
 
-SvULONGTable* SvNumberFormatter::MergeFormatter(SvNumberFormatter& rTable)
+Svsal_uInt32Table* SvNumberFormatter::MergeFormatter(SvNumberFormatter& rTable)
 {
     if ( pMergeTable )
         ClearMergeTable();
     else
-        pMergeTable = new SvULONGTable;
-	ULONG nCLOffset = 0;
-	ULONG nOldKey, nOffset, nNewKey;
-	ULONG* pNewIndex;
+        pMergeTable = new Svsal_uInt32Table;
+	sal_uInt32 nCLOffset = 0;
+	sal_uInt32 nOldKey, nOffset, nNewKey;
+	sal_uInt32* pNewIndex;
 	SvNumberformat* pNewEntry;
 	SvNumberformat* pFormat = rTable.aFTable.First();
 	while (pFormat)
@@ -2905,22 +2905,22 @@ SvULONGTable* SvNumberFormatter::MergeFo
 }
 
 
-ULONG SvNumberFormatter::GetFormatForLanguageIfBuiltIn( ULONG nFormat,
+sal_uInt32 SvNumberFormatter::GetFormatForLanguageIfBuiltIn( sal_uInt32 nFormat,
 		LanguageType eLnge )
 {
 	if ( eLnge == LANGUAGE_DONTKNOW )
         eLnge = IniLnge;
     if ( nFormat < SV_COUNTRY_LANGUAGE_OFFSET && eLnge == IniLnge )
 		return nFormat;		// es bleibt wie es ist
-	ULONG nOffset = nFormat % SV_COUNTRY_LANGUAGE_OFFSET;		// relativIndex
+	sal_uInt32 nOffset = nFormat % SV_COUNTRY_LANGUAGE_OFFSET;		// relativIndex
 	if ( nOffset > SV_MAX_ANZ_STANDARD_FORMATE )
 		return nFormat;					// kein eingebautes Format
-	ULONG nCLOffset = ImpGenerateCL(eLnge);		// ggbf. generieren
+	sal_uInt32 nCLOffset = ImpGenerateCL(eLnge);		// ggbf. generieren
 	return nCLOffset + nOffset;
 }
 
 
-ULONG SvNumberFormatter::GetFormatIndex( NfIndexTableOffset nTabOff,
+sal_uInt32 SvNumberFormatter::GetFormatIndex( NfIndexTableOffset nTabOff,
 		LanguageType eLnge )
 {
 	if ( nTabOff >= NF_INDEX_TABLE_ENTRIES
@@ -2928,14 +2928,14 @@ ULONG SvNumberFormatter::GetFormatIndex(
 		return NUMBERFORMAT_ENTRY_NOT_FOUND;
 	if ( eLnge == LANGUAGE_DONTKNOW )
         eLnge = IniLnge;
-	ULONG nCLOffset = ImpGenerateCL(eLnge);		// ggbf. generieren
+	sal_uInt32 nCLOffset = ImpGenerateCL(eLnge);		// ggbf. generieren
 	return nCLOffset + theIndexTable[nTabOff];
 }
 
 
-NfIndexTableOffset SvNumberFormatter::GetIndexTableOffset( ULONG nFormat ) const
+NfIndexTableOffset SvNumberFormatter::GetIndexTableOffset( sal_uInt32 nFormat ) const
 {
-	ULONG nOffset = nFormat % SV_COUNTRY_LANGUAGE_OFFSET;		// relativIndex
+	sal_uInt32 nOffset = nFormat % SV_COUNTRY_LANGUAGE_OFFSET;		// relativIndex
 	if ( nOffset > SV_MAX_ANZ_STANDARD_FORMATE )
 		return NF_INDEX_TABLE_ENTRIES;		// kein eingebautes Format
 	for ( USHORT j = 0; j < NF_INDEX_TABLE_ENTRIES; j++ )
@@ -3089,7 +3089,7 @@ void SvNumberFormatter::ResetDefaultSyst
 }
 
 
-ULONG SvNumberFormatter::ImpGetDefaultSystemCurrencyFormat()
+sal_uInt32 SvNumberFormatter::ImpGetDefaultSystemCurrencyFormat()
 {
 	if ( nDefaultSystemCurrencyFormat == NUMBERFORMAT_ENTRY_NOT_FOUND )
 	{
@@ -3111,18 +3111,18 @@ ULONG SvNumberFormatter::ImpGetDefaultSy
 }
 
 
-ULONG SvNumberFormatter::ImpGetDefaultCurrencyFormat()
+sal_uInt32 SvNumberFormatter::ImpGetDefaultCurrencyFormat()
 {
-	ULONG CLOffset = ImpGetCLOffset( ActLnge );
-	ULONG nDefaultCurrencyFormat =
-		(ULONG) aDefaultFormatKeys.Get( CLOffset + ZF_STANDARD_CURRENCY );
+	sal_uInt32 CLOffset = ImpGetCLOffset( ActLnge );
+	sal_uInt32 nDefaultCurrencyFormat =
+		(sal_uInt32)(sal_uIntPtr) aDefaultFormatKeys.Get( CLOffset + ZF_STANDARD_CURRENCY );
 	if ( !nDefaultCurrencyFormat )
 		nDefaultCurrencyFormat = NUMBERFORMAT_ENTRY_NOT_FOUND;
 	if ( nDefaultCurrencyFormat == NUMBERFORMAT_ENTRY_NOT_FOUND )
 	{
 		// look for a defined standard
-		ULONG nStopKey = CLOffset + SV_COUNTRY_LANGUAGE_OFFSET;
-		ULONG nKey;
+		sal_uInt32 nStopKey = CLOffset + SV_COUNTRY_LANGUAGE_OFFSET;
+		sal_uInt32 nKey;
 		aFTable.Seek( CLOffset );
 		while ( (nKey = aFTable.GetCurKey()) >= CLOffset && nKey < nStopKey )
 		{
@@ -3218,7 +3218,7 @@ inline
 }
 
 
-BOOL SvNumberFormatter::GetNewCurrencySymbolString( ULONG nFormat,
+BOOL SvNumberFormatter::GetNewCurrencySymbolString( sal_uInt32 nFormat,
 			String& rStr, const NfCurrencyEntry** ppEntry /* = NULL */,
 			BOOL* pBank /* = NULL */ ) const
 {
