--- dbaccess/source/ui/dlg/indexdialog.cxx	2005-09-08 13:42:46.340059049 +0200
+++ dbaccess/source/ui/dlg/indexdialog.cxx	2005-09-08 13:47:36.218926915 +0200
@@ -352,7 +352,7 @@ namespace dbaui
 		if (pSelected)
 		{
 			// is the current entry modified?
-			Indexes::const_iterator aSelectedPos = m_pIndexes->begin() + reinterpret_cast<sal_Int32>(pSelected->GetUserData());
+			Indexes::const_iterator aSelectedPos = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(pSelected->GetUserData());
 			m_aActions.EnableItem(ID_INDEX_SAVE, aSelectedPos->isModified() || aSelectedPos->isNew());
 			m_aActions.EnableItem(ID_INDEX_RESET, aSelectedPos->isModified() || aSelectedPos->isNew());
             bSelectedAnything = bSelectedAnything && !aSelectedPos->bPrimaryKey;
@@ -406,7 +406,7 @@ namespace dbaui
 	{
 		DBG_ASSERT(_pEntry, "DbaIndexDialog::implCommit: invalid entry!");
 
-		Indexes::iterator aCommitPos = m_pIndexes->begin() + reinterpret_cast< sal_Int32 >(_pEntry->GetUserData());
+		Indexes::iterator aCommitPos = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(_pEntry->GetUserData());
 
 		// if it's not a new index, remove it
 		// (we can't modify indexes, only drop'n'insert)
@@ -514,7 +514,7 @@ namespace dbaui
 	sal_Bool DbaIndexDialog::implDropIndex(SvLBoxEntry* _pEntry, sal_Bool _bRemoveFromCollection)
 	{
 		// do the drop
-		Indexes::iterator aDropPos = m_pIndexes->begin() + reinterpret_cast< sal_Int32 >(_pEntry->GetUserData());
+		Indexes::iterator aDropPos = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(_pEntry->GetUserData());
 		DBG_ASSERT(aDropPos != m_pIndexes->end(), "DbaIndexDialog::OnDropIndex: did not find the index in my collection!");
 
 		SQLExceptionInfo aExceptionInfo;
@@ -596,7 +596,7 @@ namespace dbaui
 		SvLBoxEntry* pSelected = m_aIndexes.FirstSelected();
 		DBG_ASSERT(pSelected, "DbaIndexDialog::OnResetIndex: invalid call!");
 
-		Indexes::iterator aResetPos = m_pIndexes->begin() + reinterpret_cast< sal_Int32 >(pSelected->GetUserData());
+		Indexes::iterator aResetPos = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(pSelected->GetUserData());
 
 		if (aResetPos->isNew())
 		{
@@ -669,7 +669,7 @@ namespace dbaui
 		if (pSelected)
 		{
 			// the descriptor
-			Indexes::const_iterator aSelected = m_pIndexes->begin() + reinterpret_cast<sal_Int32>(pSelected->GetUserData());
+			Indexes::const_iterator aSelected = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(pSelected->GetUserData());
 			
 			if (aSelected->isModified() || aSelected->isNew())
 			{
@@ -706,7 +706,7 @@ namespace dbaui
 	//------------------------------------------------------------------
 	IMPL_LINK( DbaIndexDialog, OnEntryEdited, SvLBoxEntry*, _pEntry )
 	{
-		Indexes::iterator aPosition = m_pIndexes->begin() + reinterpret_cast<sal_Int32>(_pEntry->GetUserData());
+		Indexes::iterator aPosition = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(_pEntry->GetUserData());
 		
 		DBG_ASSERT(aPosition >= m_pIndexes->begin() && aPosition < m_pIndexes->end(),
 			"DbaIndexDialog::OnEntryEdited: invalid entry!");
@@ -755,7 +755,7 @@ namespace dbaui
 			if (m_pFields->IsModified() && !m_pFields->SaveModified())
 				return sal_False;
 
-			Indexes::iterator aPreviouslySelected = m_pIndexes->begin() + reinterpret_cast<sal_Int32>(m_pPreviousSelection->GetUserData());
+			Indexes::iterator aPreviouslySelected = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(m_pPreviousSelection->GetUserData());
 
 			// the unique flag
 			aPreviouslySelected->bUnique = m_aUnique.IsChecked();
@@ -816,7 +816,7 @@ namespace dbaui
 	{
 		if (m_pPreviousSelection)
 		{
-			Indexes::iterator aPreviouslySelected = m_pIndexes->begin() + reinterpret_cast<sal_Int32>(m_pPreviousSelection->GetUserData());
+			Indexes::iterator aPreviouslySelected = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(m_pPreviousSelection->GetUserData());
 
 			if (!implSaveModified())
 				return sal_False;
@@ -833,7 +833,7 @@ namespace dbaui
 	IMPL_LINK( DbaIndexDialog, OnModified, void*, NOTINTERESTEDIN )
 	{
 		DBG_ASSERT(m_pPreviousSelection, "DbaIndexDialog, OnModified: invalid call!");
-		Indexes::iterator aPosition = m_pIndexes->begin() + reinterpret_cast<sal_Int32>(m_pPreviousSelection->GetUserData());
+		Indexes::iterator aPosition = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(m_pPreviousSelection->GetUserData());
 
 		aPosition->setModified(sal_True);
 		updateToolbox();
@@ -847,7 +847,7 @@ namespace dbaui
 		if (_pEntry)
 		{
 			// the descriptor of the selected index
-			Indexes::const_iterator aSelectedIndex = m_pIndexes->begin() + reinterpret_cast<sal_Int32>(_pEntry->GetUserData());
+			Indexes::const_iterator aSelectedIndex = m_pIndexes->begin() + reinterpret_cast<sal_IntPtr>(_pEntry->GetUserData());
 
 			// fill the controls
 			m_aUnique.Check(aSelectedIndex->bUnique);
