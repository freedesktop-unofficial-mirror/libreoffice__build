Index: svtools/inc/instrm.hxx
===================================================================
RCS file: /cvs/util/svtools/inc/instrm.hxx,v
retrieving revision 1.1.1.1
retrieving revision 1.1.1.1.650.1
diff -u -p -u -p -r1.1.1.1 -r1.1.1.1.650.1
--- svtools/inc/instrm.hxx	18 Sep 2000 16:58:51 -0000	1.1.1.1
+++ svtools/inc/instrm.hxx	21 Jan 2005 15:09:32 -0000	1.1.1.1.650.1
@@ -84,19 +84,19 @@ class SvInputStream: public SvStream
 	com::sun::star::uno::Reference< com::sun::star::io::XSeekable >
 	    m_xSeekable;
 	SvDataPipe_Impl * m_pPipe;
-	ULONG m_nSeekedFrom;
+	sal_Size m_nSeekedFrom;
 
 	SVL_DLLPRIVATE bool open();
 
-	SVL_DLLPRIVATE virtual ULONG GetData(void * pData, ULONG nSize);
+	SVL_DLLPRIVATE virtual sal_Size GetData(void * pData, sal_Size nSize);
 
-	SVL_DLLPRIVATE virtual ULONG PutData(void const *, ULONG);
+	SVL_DLLPRIVATE virtual sal_Size PutData(void const *, sal_Size);
 
-	SVL_DLLPRIVATE virtual ULONG SeekPos(ULONG nPos);
+	SVL_DLLPRIVATE virtual sal_Size SeekPos(sal_Size nPos);
 
 	SVL_DLLPRIVATE virtual void FlushData();
 
-	SVL_DLLPRIVATE virtual void SetSize(ULONG);
+	SVL_DLLPRIVATE virtual void SetSize(sal_Size);
 
 public:
 	SvInputStream(
@@ -108,9 +108,9 @@ public:
 
 	virtual USHORT IsA() const;
 
-	virtual void AddMark(ULONG nPos);
+	virtual void AddMark(sal_Size nPos);
 
-	virtual void RemoveMark(ULONG nPos);
+	virtual void RemoveMark(sal_Size nPos);
 };
 
 #endif // SVTOOLS_INSTRM_HXX
Index: svtools/inc/outstrm.hxx
===================================================================
RCS file: /cvs/util/svtools/inc/outstrm.hxx,v
retrieving revision 1.1.1.1
retrieving revision 1.1.1.1.650.1
diff -u -p -u -p -r1.1.1.1 -r1.1.1.1.650.1
--- svtools/inc/outstrm.hxx	18 Sep 2000 16:58:52 -0000	1.1.1.1
+++ svtools/inc/outstrm.hxx	21 Jan 2005 15:09:33 -0000	1.1.1.1.650.1
@@ -79,15 +79,15 @@ class SvOutputStream: public SvStream
 	com::sun::star::uno::Reference< com::sun::star::io::XOutputStream >
 		m_xStream;
 
-	SVL_DLLPRIVATE virtual ULONG GetData(void *, ULONG);
+	SVL_DLLPRIVATE virtual sal_Size GetData(void *, sal_Size);
 
-	SVL_DLLPRIVATE virtual ULONG PutData(void const * pData, ULONG nSize);
+	SVL_DLLPRIVATE virtual sal_Size PutData(void const * pData, sal_Size nSize);
 
-	SVL_DLLPRIVATE virtual ULONG SeekPos(ULONG);
+	SVL_DLLPRIVATE virtual sal_Size SeekPos(sal_Size);
 
 	SVL_DLLPRIVATE virtual void FlushData();
 
-	SVL_DLLPRIVATE virtual void SetSize(ULONG);
+	SVL_DLLPRIVATE virtual void SetSize(sal_Size);
 
 public:
 	SvOutputStream(com::sun::star::uno::Reference<

Index: svtools/inc/poolitem.hxx
===================================================================
RCS file: /cvs/util/svtools/inc/poolitem.hxx,v
retrieving revision 1.8
retrieving revision 1.7.10.2
diff -u -p -u -p -r1.8 -r1.7.10.2
--- svtools/inc/poolitem.hxx	18 Jan 2005 14:22:53 -0000	1.8
+++ svtools/inc/poolitem.hxx	9 Mar 2005 23:07:05 -0000	1.7.10.2
@@ -230,17 +230,17 @@ friend class SfxItemPoolCache;
 friend class SfxItemSet;
 friend class SfxVoidItem;
 
-	ULONG                    nRefCount;                    // Referenzzaehler
+	sal_uInt32                   nRefCount;                    // Referenzzaehler
 	USHORT                   nWhich;
 	USHORT					 nKind;
 
 private:
-	inline void              SetRefCount( ULONG n );
+	inline void              SetRefCount( sal_uInt32 n );
 	inline void				 SetKind( USHORT n );
 public:
-	inline ULONG             AddRef( ULONG n = 1 ) const;
+	inline sal_uInt32             AddRef( sal_uInt32 n = 1 ) const;
 private:
-	inline ULONG             ReleaseRef( ULONG n = 1 ) const;
+	inline sal_uInt32             ReleaseRef( sal_uInt32 n = 1 ) const;
 	SVL_DLLPRIVATE long      Delete_Impl(void*);
 
 #if 0
@@ -284,7 +284,7 @@ public:
 	virtual SvStream&        Store( SvStream &, USHORT nItemVersion ) const;
 	virtual SfxPoolItem*     Clone( SfxItemPool *pPool = 0 ) const = 0;
 
-	ULONG                    GetRefCount() const { return nRefCount; }
+	sal_uInt32                    GetRefCount() const { return nRefCount; }
 	inline USHORT			 GetKind() const { return nKind; }
 
 	/** Read in a Unicode string from a streamed byte string representation.
@@ -340,7 +340,7 @@ private:
 
 // -----------------------------------------------------------------------
 
-inline void SfxPoolItem::SetRefCount( ULONG n )
+inline void SfxPoolItem::SetRefCount( sal_uInt32 n )
 {
 	DBG_CHKTHIS( SfxPoolItem, 0 );
 	nRefCount = n;
@@ -354,15 +354,15 @@ inline void SfxPoolItem::SetKind( USHORT
 	nKind = n;
 }
 
-inline ULONG SfxPoolItem::AddRef( ULONG n ) const
+inline sal_uInt32 SfxPoolItem::AddRef( sal_uInt32 n ) const
 {
 	DBG_CHKTHIS( SfxPoolItem, 0 );
 	DBG_ASSERT( nRefCount <= SFX_ITEMS_MAXREF, "AddRef mit nicht-Pool-Item" );
-	DBG_ASSERT( ULONG_MAX - nRefCount > n, "AddRef: Referenzzaehler ueberschlaegt sich" );
+	DBG_ASSERT( UINT_MAX - nRefCount > n, "AddRef: Referenzzaehler ueberschlaegt sich" );
 	return ( ((SfxPoolItem *)this)->nRefCount += n );
 }
 
-inline ULONG SfxPoolItem::ReleaseRef( ULONG n ) const
+inline sal_uInt32 SfxPoolItem::ReleaseRef( sal_uInt32 n ) const
 {
 	DBG_CHKTHIS( SfxPoolItem, 0 );
 	DBG_ASSERT( nRefCount <= SFX_ITEMS_MAXREF, "AddRef mit nicht-Pool-Item" );
Index: svtools/inc/zforlist.hxx
===================================================================
RCS file: /cvs/util/svtools/inc/zforlist.hxx,v
retrieving revision 1.32
retrieving revision 1.32.146.1
diff -u -p -u -p -r1.32 -r1.32.146.1
--- svtools/inc/zforlist.hxx	25 Jun 2004 17:22:53 -0000	1.32
+++ svtools/inc/zforlist.hxx	21 Jan 2005 17:16:07 -0000	1.32.146.1
@@ -271,10 +271,10 @@ enum NfEvalDateFormat
 #endif
 #ifdef _ZFORLIST_DECLARE_TABLE
 DECLARE_TABLE (SvNumberFormatTable, SvNumberformat*);
-DECLARE_TABLE (SvULONGTable, ULONG*);
+DECLARE_TABLE (Svsal_uInt32Table, sal_uInt32*);
 #else
 typedef Table SvNumberFormatTable;
-typedef Table SvULONGTable;
+typedef Table Svsal_uInt32Table;
 #endif
 
 
@@ -421,24 +421,24 @@ public:
 	/** Get table of formats of a specific type of a language/country.
 		FIndex returns the default format of that type. */
 	SvNumberFormatTable& GetEntryTable(short eType,
-									   ULONG& FIndex,
+									   sal_uInt32& FIndex,
 									   LanguageType eLnge);
 
 	/** Get table of formats of a specific type of a language/country.
 		FIndex returns the default format of that type.
 		If the language/country was never touched before new entries are generated */
 	SvNumberFormatTable& ChangeCL(short eType,
-								  ULONG& FIndex,
+								  sal_uInt32& FIndex,
 								  LanguageType eLnge);
 
 	/** Get table of formats of the same type as FIndex; eType and rLnge are
 		set accordingly. An unknown format is set to Standard/General */
 	SvNumberFormatTable& GetFirstEntryTable(short& eType,
-											ULONG& FIndex,
+											sal_uInt32& FIndex,
 											LanguageType& rLnge);
 
 	/// Delete an entry including the format it is refering to
-	void DeleteEntry(ULONG nKey);
+	void DeleteEntry(sal_uInt32 nKey);
 
 	/** Create new entry of a format code string for language/country.
 		@return
@@ -453,14 +453,14 @@ public:
 			nType contains the type of the format.
 			nKey contains the index key of the format.
 	 */
-	BOOL PutEntry( String& rString, xub_StrLen& nCheckPos, short& nType, ULONG& nKey,
+	BOOL PutEntry( String& rString, xub_StrLen& nCheckPos, short& nType, sal_uInt32& nKey,
 				  LanguageType eLnge = LANGUAGE_DONTKNOW );
 
 	/** Same as <method>PutEntry</method> but the format code string is
 	 	considered to be of language/country eLnge and is converted to
 		language/country eNewLnge */
 	BOOL PutandConvertEntry( String& rString, xub_StrLen& nCheckPos,
-							 short& nType, ULONG& nKey,
+							 short& nType, sal_uInt32& nKey,
 							 LanguageType eLnge, LanguageType eNewLnge );
 
 	/** Same as <method>PutandConvertEntry</method> but the format code string
@@ -468,12 +468,12 @@ public:
 		converted to another System language/country eNewLnge. In this case
 	 	the automatic currency is converted too. */
 	BOOL PutandConvertEntrySystem( String& rString, xub_StrLen& nCheckPos,
-							 short& nType, ULONG& nKey,
+							 short& nType, sal_uInt32& nKey,
 							 LanguageType eLnge, LanguageType eNewLnge );
 
 	/** Create a format code string using format nIndex as a template and
 		applying other settings (passed from the dialog) */
-	void GenerateFormat( String& sString, ULONG nIndex,
+	void GenerateFormat( String& sString, sal_uInt32 nIndex,
 						LanguageType eLnge = LANGUAGE_DONTKNOW,
 						BOOL bThousand = FALSE, BOOL IsRed = FALSE,
 						USHORT nPrecision = 0, USHORT nAnzLeading = 1 );
@@ -485,22 +485,22 @@ public:
 				returned in fOutNumber
 			<FALSE/> if input is not a number
 	 */
-	BOOL IsNumberFormat( const String& sString, ULONG& F_Index, double& fOutNumber );
+	BOOL IsNumberFormat( const String& sString, sal_uInt32& F_Index, double& fOutNumber );
 
 	/// Format a number according to a format index, return string and color
-	void GetOutputString( const double& fOutNumber, ULONG nFIndex,
+	void GetOutputString( const double& fOutNumber, sal_uInt32 nFIndex,
 						  String& sOutString, Color** ppColor );
 
 	/** Format a string according to a format index, return string and color.
 		Formats only if the format code is of type text or the 4th subcode
 		of a format code is specified, otherwise sOutString will be == "" */
-	void GetOutputString( String& sString, ULONG nFIndex,
+	void GetOutputString( String& sString, sal_uInt32 nFIndex,
 						  String& sOutString, Color** ppColor );
 
 	/** Format a number according to the standard default format matching
 		the given format index */
 	void GetInputLineString( const double& fOutNumber,
-							ULONG nFIndex, String& sOutString );
+							sal_uInt32 nFIndex, String& sOutString );
 
 	/** Format a number according to a format code string to be scanned.
 		@return
@@ -521,13 +521,13 @@ public:
 		@return
 			NUMBERFORMAT_ENTRY_NOT_FOUND if not found, else the format index.
 	 */
-	ULONG TestNewString( const String& sFormatString,
+	sal_uInt32 TestNewString( const String& sFormatString,
 						LanguageType eLnge = LANGUAGE_DONTKNOW );
 
 	/// Whether format index nFIndex is of type text or not
-	BOOL IsTextFormat(ULONG nFIndex) const;
+	BOOL IsTextFormat(sal_uInt32 nFIndex) const;
 	/// Whether the 4th string subcode of format index nFIndex is present
-	BOOL HasTextFormat(ULONG nFIndex) const;
+	BOOL HasTextFormat(sal_uInt32 nFIndex) const;
 
 	/// Load all formats from a stream
 	BOOL Load( SvStream& rStream );
@@ -537,14 +537,14 @@ public:
 	void PrepareSave();
 
 	/// Flag format index as used
-	void SetFormatUsed(ULONG nFIndex);
+	void SetFormatUsed(sal_uInt32 nFIndex);
 
 	/// Get additional info of a format index, e.g. for dialog box
-	void GetFormatSpecialInfo(ULONG nFormat, BOOL& bThousand, BOOL& IsRed,
+	void GetFormatSpecialInfo(sal_uInt32 nFormat, BOOL& bThousand, BOOL& IsRed,
 							  USHORT& nPrecision, USHORT& nAnzLeading);
 
 	/// Count of decimals
-	USHORT GetFormatPrecision( ULONG nFormat ) const;
+	USHORT GetFormatPrecision( sal_uInt32 nFormat ) const;
 
 	/** Get additional info of a format code string, e.g. for dialog box.
 		Uses a temporary parse, if possible use only if format code is not
@@ -553,7 +553,7 @@ public:
 			0 if format code string parsed without errors, otherwise error
 			position (like nCheckPos on <method>PutEntry</method>)
 	 */
-	ULONG GetFormatSpecialInfo( const String&, BOOL& bThousand, BOOL& IsRed,
+	sal_uInt32 GetFormatSpecialInfo( const String&, BOOL& bThousand, BOOL& IsRed,
 							  USHORT& nPrecision, USHORT& nAnzLeading,
 							  LanguageType eLnge = LANGUAGE_DONTKNOW );
 
@@ -562,31 +562,31 @@ public:
 
 	/** Return the format index of the format code string for language/country,
 		or NUMBERFORMAT_ENTRY_NOT_FOUND */
-	ULONG GetEntryKey( const String& sStr, LanguageType eLnge = LANGUAGE_DONTKNOW );
+	sal_uInt32 GetEntryKey( const String& sStr, LanguageType eLnge = LANGUAGE_DONTKNOW );
 
 	/// Return the format for a format index
-	const SvNumberformat* GetEntry(ULONG nKey) const
+	const SvNumberformat* GetEntry(sal_uInt32 nKey) const
 		{ return (SvNumberformat*) aFTable.Get(nKey); }
 
 	/// Return the format index of the standard default number format for language/country
-	ULONG GetStandardIndex(LanguageType eLnge = LANGUAGE_DONTKNOW);
+	sal_uInt32 GetStandardIndex(LanguageType eLnge = LANGUAGE_DONTKNOW);
 
 	/// Return the format index of the default format of a type for language/country
-	ULONG GetStandardFormat(short eType, LanguageType eLnge = LANGUAGE_DONTKNOW);
+	sal_uInt32 GetStandardFormat(short eType, LanguageType eLnge = LANGUAGE_DONTKNOW);
 
 	/** Return the format index of the default format of a type for language/country.
 		Maybe not the default format but a special builtin format, e.g. for
 		NF_TIME_HH_MMSS00, if that format is passed in nFIndex. */
-	ULONG GetStandardFormat( ULONG nFIndex, short eType, LanguageType eLnge );
+	sal_uInt32 GetStandardFormat( sal_uInt32 nFIndex, short eType, LanguageType eLnge );
 
 	/** Return the format index of the default format of a type for language/country.
 		Maybe not the default format but a special builtin format, e.g. for
 		NF_TIME_HH_MMSS00, or NF_TIME_HH_MMSS if fNumber >= 1.0  */
-	ULONG GetStandardFormat( double fNumber, ULONG nFIndex, short eType,
+	sal_uInt32 GetStandardFormat( double fNumber, sal_uInt32 nFIndex, short eType,
 							LanguageType eLnge );
 
 	/// Whether nFIndex is a special builtin format
-	BOOL IsSpecialStandardFormat( ULONG nFIndex, LanguageType eLnge );
+	BOOL IsSpecialStandardFormat( sal_uInt32 nFIndex, LanguageType eLnge );
 
 	/// Return the reference date
 	Date* GetNullDate();
@@ -596,36 +596,36 @@ public:
 	BOOL GetNoZero() { return bNoZero; }
 	/** Get the type of a format (or NUMBERFORMAT_UNDEFINED if no entry),
 	 	but with NUMBERFORMAT_DEFINED masked out */
-	short GetType(ULONG nFIndex);
+	short GetType(sal_uInt32 nFIndex);
 
 	/// As the name says
 	void ClearMergeTable();
 	/// Merge in all new entries from rNewTable and return a table of resulting new format indices
-	SvULONGTable* MergeFormatter(SvNumberFormatter& rNewTable);
+	Svsal_uInt32Table* MergeFormatter(SvNumberFormatter& rNewTable);
 
 	/// Whether a merge table is present or not
 	inline BOOL HasMergeFmtTbl() const;
 	/// Return the new format index for an old format index, if a merge table exists
-	inline ULONG GetMergeFmtIndex( ULONG nOldFmt ) const;
+	inline sal_uInt32 GetMergeFmtIndex( sal_uInt32 nOldFmt ) const;
 
 	/// Return the last used position ever of a language/country combination
-	USHORT GetLastInsertKey(ULONG CLOffset);
+	USHORT GetLastInsertKey(sal_uInt32 CLOffset);
 
 	/** Return the format index of a builtin format for a specific language/country.
 		If nFormat is not a builtin format nFormat is returned. */
-	ULONG GetFormatForLanguageIfBuiltIn( ULONG nFormat,
+	sal_uInt32 GetFormatForLanguageIfBuiltIn( sal_uInt32 nFormat,
 									LanguageType eLnge = LANGUAGE_DONTKNOW );
 
 	/** Return the format index for a builtin format of a specific language
 		@see NfIndexTableOffset
 	 */
-	ULONG GetFormatIndex( NfIndexTableOffset, LanguageType eLnge = LANGUAGE_DONTKNOW );
+	sal_uInt32 GetFormatIndex( NfIndexTableOffset, LanguageType eLnge = LANGUAGE_DONTKNOW );
 
 	/** Return enum index of a format index of a builtin format,
 		NF_INDEX_TABLE_ENTRIES if it's not a builtin format.
 		@see NfIndexTableOffset
 	 */
-	NfIndexTableOffset GetIndexTableOffset( ULONG nFormat ) const;
+	NfIndexTableOffset GetIndexTableOffset( sal_uInt32 nFormat ) const;
 
 	/** Set evaluation type and order of input date strings
 		@see NfEvalDateFormat
@@ -655,7 +655,7 @@ public:
     String GetDecimalSep() const { return GetNumDecimalSep(); }
 
 	/// Return the decimal separator matching the locale of the given format
-	String GetFormatDecimalSep( ULONG nFormat ) const;
+	String GetFormatDecimalSep( sal_uInt32 nFormat ) const;
 
 	/// Return a <type>SvPtrArr</type> with pointers to <type>NfCurrencyEntry</type> entries
     static const NfCurrencyTable& GetTheCurrencyTable();
@@ -708,7 +708,7 @@ public:
 		If ppEntry is not NULL and exactly one entry is found, a [$xxx-nnn] is
 		returned, even if the format code only contains [$xxx] !
 	 */
-	BOOL	GetNewCurrencySymbolString( ULONG nFormat, String& rSymbol,
+	BOOL	GetNewCurrencySymbolString( sal_uInt32 nFormat, String& rSymbol,
 				const NfCurrencyEntry** ppEntry = NULL, BOOL* pBank = NULL ) const;
 
 	/** Look up the corresponding <type>NfCurrencyEntry</type> matching
@@ -786,7 +786,7 @@ private:
 	SvNumberFormatTable aFTable;			// Table of format keys to format entries
 	Table aDefaultFormatKeys;				// Table of default standard to format keys
 	SvNumberFormatTable* pFormatTable;		// For the UI dialog
-	SvULONGTable* pMergeTable;				// List of indices for merging two formatters
+	Svsal_uInt32Table* pMergeTable;				// List of indices for merging two formatters
 	CharClass* pCharClass;					// CharacterClassification
     OnDemandLocaleDataWrapper xLocaleData;  // LocaleData switched between SYSTEM, ENGLISH and other
     OnDemandTransliterationWrapper xTransliteration;    // Transliteration loaded on demand
@@ -795,8 +795,8 @@ private:
 	ImpSvNumberInputScan* pStringScanner;	// Input string scanner
 	ImpSvNumberformatScan* pFormatScanner;	// Format code string scanner
     Link aColorLink;                        // User defined color table CallBack
-	ULONG MaxCLOffset;						// Max language/country offset used
-	ULONG nDefaultSystemCurrencyFormat;		// NewCurrency matching SYSTEM locale
+	sal_uInt32 MaxCLOffset;						// Max language/country offset used
+	sal_uInt32 nDefaultSystemCurrencyFormat;		// NewCurrency matching SYSTEM locale
     LanguageType IniLnge;                   // Initialized setting language/country
 	LanguageType ActLnge;                   // Current setting language/country
 	NfEvalDateFormat eEvalDateFormat;		// DateFormat evaluation
@@ -825,38 +825,38 @@ private:
 
 	// Generate builtin formats provided by i18n behind CLOffset,
 	// if bLoadingSO5==FALSE also generate additional i18n formats.
-	SVT_DLLPRIVATE void ImpGenerateFormats( ULONG CLOffset, BOOL bLoadingSO5 );
+	SVT_DLLPRIVATE void ImpGenerateFormats( sal_uInt32 CLOffset, BOOL bLoadingSO5 );
 
 	// Generate additional formats provided by i18n
 	SVT_DLLPRIVATE void ImpGenerateAdditionalFormats(
-				ULONG CLOffset,
+				sal_uInt32 CLOffset,
 				NumberFormatCodeWrapper& rNumberFormatCode,
 				BOOL bAfterLoadingSO5 );
 
 	SVT_DLLPRIVATE SvNumberformat* ImpInsertFormat(
 				const ::com::sun::star::i18n::NumberFormatCode& rCode,
-				ULONG nPos,
+				sal_uInt32 nPos,
 				BOOL bAfterLoadingSO5 = FALSE,
 				sal_Int16 nOrgIndex = 0 );
 	// ImpInsertNewStandardFormat for new (since version ...) builtin formats
 	SVT_DLLPRIVATE SvNumberformat* ImpInsertNewStandardFormat(
 				const ::com::sun::star::i18n::NumberFormatCode& rCode,
-				ULONG nPos,
+				sal_uInt32 nPos,
 				USHORT nVersion,
 				BOOL bAfterLoadingSO5 = FALSE,
 				sal_Int16 nOrgIndex = 0 );
 
 	// Return CLOffset or (MaxCLOffset + SV_COUNTRY_LANGUAGE_OFFSET) if new language/country
-	SVT_DLLPRIVATE ULONG ImpGetCLOffset(LanguageType eLnge) const;
+	SVT_DLLPRIVATE sal_uInt32 ImpGetCLOffset(LanguageType eLnge) const;
 
 	// Test whether format code already exists, then return index key,
 	// otherwise NUMBERFORMAT_ENTRY_NOT_FOUND
-	SVT_DLLPRIVATE ULONG ImpIsEntry( const String& rString,
-						ULONG CLOffset,
+	SVT_DLLPRIVATE sal_uInt32 ImpIsEntry( const String& rString,
+						sal_uInt32 CLOffset,
 						LanguageType eLnge );
 
 	// Create builtin formats for language/country if necessary, return CLOffset
-	SVT_DLLPRIVATE ULONG ImpGenerateCL( LanguageType eLnge, BOOL bLoadingSO5 = FALSE );
+	SVT_DLLPRIVATE sal_uInt32 ImpGenerateCL( LanguageType eLnge, BOOL bLoadingSO5 = FALSE );
 
     // Build negative currency format, old compatibility style
     SVT_DLLPRIVATE void ImpGetNegCurrFormat( String& sNegStr, const String& rCurrSymbol );
@@ -868,15 +868,15 @@ private:
 
 	// Return the format index of the currency format of the system locale.
 	// Format is created if not already present.
-	SVT_DLLPRIVATE ULONG	ImpGetDefaultSystemCurrencyFormat();
+	SVT_DLLPRIVATE sal_uInt32	ImpGetDefaultSystemCurrencyFormat();
 
 	// Return the format index of the currency format of the current locale.
 	// Format is created if not already present.
-	SVT_DLLPRIVATE ULONG	ImpGetDefaultCurrencyFormat();
+	SVT_DLLPRIVATE sal_uInt32	ImpGetDefaultCurrencyFormat();
 
 	// Return the default format for a given type and current locale.
 	// May ONLY be called from within GetStandardFormat().
-	SVT_DLLPRIVATE ULONG	ImpGetDefaultFormat( short nType );
+	SVT_DLLPRIVATE sal_uInt32	ImpGetDefaultFormat( short nType );
 
 	// Return the index in a sequence of format codes matching an enum of
 	// NfIndexTableOffset. If not found 0 is returned. If the sequence doesn't
@@ -982,9 +982,9 @@ public:
 
 // --------------------------- inline --------------------------------------
 
-inline ULONG SvNumberFormatter::GetMergeFmtIndex( ULONG nOldFmt ) const
+inline sal_uInt32 SvNumberFormatter::GetMergeFmtIndex( sal_uInt32 nOldFmt ) const
 {
-    ULONG* pU = (pMergeTable && pMergeTable->Count()) ? (ULONG*)pMergeTable->Get( nOldFmt ) : 0;
+    sal_uInt32* pU = (pMergeTable && pMergeTable->Count()) ? (sal_uInt32*)pMergeTable->Get( nOldFmt ) : 0;
 	return pU ? *pU : nOldFmt;
 }
 
