--- sj2/stardiv/app/AppletProps.java	2000-09-18 18:54:03.000000000 +0200
+++ sj2/stardiv/app/AppletProps.java	2004-12-27 14:03:39.636052263 +0100
@@ -138,7 +138,7 @@ public class AppletProps extends Frame {
 		if (System.getProperty("http.proxyHost") != null) {
 			proxyHost.setText(System.getProperty("http.proxyHost"));
 			proxyPort.setText(System.getProperty("http.proxyPort"));
-			HttpClient.proxyPort = Integer.valueOf(System.getProperty("http.proxyPort")).intValue();
+			//HttpClient.proxyPort = Integer.valueOf(System.getProperty("http.proxyPort")).intValue();
 		} 
 		else {
 			proxyHost.setText("");
--- sj2/stardiv/controller/PropertyEditor.java	2004-12-22 17:05:45.554835333 +0100
+++ sj2/stardiv/controller/PropertyEditor.java	2004-12-22 17:06:53.896731282 +0100
@@ -197,10 +197,10 @@ public class PropertyEditor extends java
 
 			m_DefaultList.removeAll();
 			m_List.removeAll();
-	        java.util.Enumeration enum = m_Properties.propertyNames();
-	        while (enum.hasMoreElements())
+	        java.util.Enumeration enumer = m_Properties.propertyNames();
+	        while (enumer.hasMoreElements())
 	        {
-	            String strKey = (String)enum.nextElement();
+	            String strKey = (String)enumer.nextElement();
 
 	            if (isDefaultKey(strKey))
 	            	addToList(m_DefaultList, strKey, m_Properties.getProperty(strKey));
@@ -551,19 +551,19 @@ public class PropertyEditor extends java
     {
     	int nMax = 0;
 
-    	java.util.Enumeration enum = props.propertyNames();
-    	while (enum.hasMoreElements())
-    		nMax = Math.max(nMax, ((String)enum.nextElement()).length());
+    	java.util.Enumeration enumer = props.propertyNames();
+    	while (enumer.hasMoreElements())
+    		nMax = Math.max(nMax, ((String)enumer.nextElement()).length());
 
     	return nMax+2;
     }
 
     protected static boolean isDefaultKey(String strKey)
     {
-    	java.util.Enumeration enum = c_DefaultProperties.elements();
-    	while (enum.hasMoreElements())
+    	java.util.Enumeration enumer = c_DefaultProperties.elements();
+    	while (enumer.hasMoreElements())
     	{
-    		if (strKey.equals((String)enum.nextElement()))
+    		if (strKey.equals((String)enumer.nextElement()))
     			return true;
     	}
 
@@ -574,10 +574,10 @@ public class PropertyEditor extends java
     {
     	java.util.Properties saveProps = new java.util.Properties();
 
-    	java.util.Enumeration enum = m_Properties.propertyNames();
-    	while (enum.hasMoreElements())
+    	java.util.Enumeration enumer = m_Properties.propertyNames();
+    	while (enumer.hasMoreElements())
     	{
-    		String strKey = (String)enum.nextElement();
+    		String strKey = (String)enumer.nextElement();
 
     		if (!isDefaultKey(strKey))
 	    		saveProps.put(strKey, m_Properties.getProperty(strKey));
@@ -623,9 +623,9 @@ public class PropertyEditor extends java
 
 	    	try
 	    	{
-	    		java.util.Enumeration enum = System.getProperties().propertyNames();
-	    		while (enum.hasMoreElements())
-	    			c_DefaultProperties.addElement(enum.nextElement());
+	    		java.util.Enumeration enumer = System.getProperties().propertyNames();
+	    		while (enumer.hasMoreElements())
+	    			c_DefaultProperties.addElement(enumer.nextElement());
 	    	}
 	    	catch (Exception ignore0) {}
 	    }
@@ -656,10 +656,10 @@ public class PropertyEditor extends java
     	}
     	catch (Exception ignore2) {}
 
-    	java.util.Enumeration enum = props.propertyNames();
-    	while (enum.hasMoreElements())
+    	java.util.Enumeration enumer = props.propertyNames();
+    	while (enumer.hasMoreElements())
     	{
-    		String propKey = (String)enum.nextElement();
+    		String propKey = (String)enumer.nextElement();
 
     		// if the key is not a default put the new property into the table
     		if (!isDefaultKey(propKey))
--- sj2/stardiv/controller/StreamObserver.java	2000-09-18 18:54:04.000000000 +0200
+++ sj2/stardiv/controller/StreamObserver.java	2004-12-27 13:53:46.691482076 +0100
@@ -65,8 +65,7 @@ import java.util.Observer;
 import java.util.Observable;
 import java.net.URL;
 import java.net.MalformedURLException;
-import sun.net.ProgressData;
-import sun.net.ProgressEntry;
+import sun.net.ProgressSource;
 
 
 /** 
@@ -79,12 +78,12 @@ public class StreamObserver implements O
 {
 	public StreamObserver()
 	{
-		ProgressData.pdata.addObserver( this );
+		progressSource.beginTracking();
 	}
 
 	public void dispose()
 	{
-		ProgressData.pdata.deleteObserver( this );
+		progressSource.finishTracking();
 	}
 
 	static long nLastTime;
@@ -95,48 +94,47 @@ public class StreamObserver implements O
 			nLastTime = System.currentTimeMillis();
 			
 			String aStatus = null;
-			ProgressEntry pEntry = (ProgressEntry)aArg;
-			switch( pEntry.what )
+			switch( progressSource.getState() )
 			{
-				case ProgressData.CONNECTED:
+				case CONNECTED:
 					{
 						try
 						{
-							URL aURL = new URL( pEntry.label );
+							URL aURL = progressSource.getURL();
 							aStatus = "Connect: Host " + aURL.getHost() + " contacted. Waiting for reply...";
 						}
-						catch( MalformedURLException e )
+						catch( Exception e )
 						{
-							aStatus = "Connect: " + pEntry.label;
+							aStatus = "Connect: " + progressSource.getURL().toString();
 						}
 					}
 				break;
 
-				case ProgressData.UPDATE:
+				case UPDATE:
 					if( System.currentTimeMillis() - nLastTime > 3000 )
 						// Only 1 update / 3s
 						return;
-					if( pEntry.need != 0 )
+					if( progressSource.getExpected() > 0 )
 					{
 						// Java kommt mit dem letzten Byte nicht r"uber
-						aStatus = "Transfered: " + pEntry.label + " - ";
-						int nPercent = (int)(((long)pEntry.read * 100) / pEntry.need);
+						aStatus = "Transfered: " + progressSource.getURL().toString() + " - ";
+						int nPercent = (int)(((long)progressSource.getProgress() * 100) / progressSource.getExpected());
 						aStatus += String.valueOf( nPercent ) + "% of ";
-						if( pEntry.need >= 1000 )
-							aStatus += String.valueOf( pEntry.need / 1000 ) + "K ";
+						if( progressSource.getExpected() >= 1000 )
+							aStatus += String.valueOf( progressSource.getExpected() / 1000 ) + "K ";
 						else
-							aStatus += String.valueOf( pEntry.need );
+							aStatus += String.valueOf( progressSource.getExpected() );
 						aStatus += "bytes.";
 					}
 					else
-						aStatus = "Transfered: " + pEntry.label;
+						aStatus = "Transfered: " + progressSource.getURL().toString();
 				break;
 
-				case ProgressData.NEW:
-					aStatus = "Try: " + pEntry.label;
+				case NEW:
+					aStatus = "Try: " + progressSource.getURL().toString();
 				break;
-				case ProgressData.DELETE:
-					aStatus = "Done: " + pEntry.label;
+				case DELETE:
+					aStatus = "Done: " + progressSource.getURL().toString();
 				break;
 			}
 			if( aStatus != null )
@@ -179,6 +177,8 @@ public class StreamObserver implements O
 			System.out.println( pStatus );
 		}
 	}
+
+	private ProgressSource progressSource;
 }
 
 
