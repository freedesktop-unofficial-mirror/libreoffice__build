--- /dev/null	2003-01-30 15:54:37.000000000 +0530
+++ connectivity/source/drivers/evoab1.5/NResultSet.hxx	2004-06-17 20:19:36.000000000 +0530
@@ -0,0 +1,240 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  the BSD license.
+ *  
+ *  Copyright (c) 2003 by Sun Microsystems, Inc.
+ *  All rights reserved.
+ *
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions
+ *  are met:
+ *  1. Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *  2. Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *  3. Neither the name of Sun Microsystems, Inc. nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+ *  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     
+ *************************************************************************/
+
+#ifndef _CONNECTIVITY_EVOAB_RESULTSET_HXX_
+#define _CONNECTIVITY_EVOAB_RESULTSET_HXX_
+
+#ifndef _COM_SUN_STAR_SDBC_XRESULTSET_HPP_
+#include <com/sun/star/sdbc/XResultSet.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XROW_HPP_
+#include <com/sun/star/sdbc/XRow.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XRESULTSETMETADATASUPPLIER_HPP_
+#include <com/sun/star/sdbc/XResultSetMetaDataSupplier.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XCLOSEABLE_HPP_
+#include <com/sun/star/sdbc/XCloseable.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XCOLUMNLOCATE_HPP_
+#include <com/sun/star/sdbc/XColumnLocate.hpp>
+#endif
+#ifndef _COM_SUN_STAR_UTIL_XCANCELLABLE_HPP_
+#include <com/sun/star/util/XCancellable.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XWARNINGSSUPPLIER_HPP_
+#include <com/sun/star/sdbc/XWarningsSupplier.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XRESULTSETUPDATE_HPP_
+#include <com/sun/star/sdbc/XResultSetUpdate.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XROWUPDATE_HPP_
+#include <com/sun/star/sdbc/XRowUpdate.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBCX_XROWLOCATE_HPP_
+#include <com/sun/star/sdbcx/XRowLocate.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBCX_XDELETEROWS_HPP_
+#include <com/sun/star/sdbcx/XDeleteRows.hpp>
+#endif
+#ifndef _CPPUHELPER_COMPBASE12_HXX_
+#include <cppuhelper/compbase8.hxx>
+#endif
+#ifndef _COMPHELPER_PROPERTY_ARRAY_HELPER_HXX_
+#include <comphelper/proparrhlp.hxx>
+#endif
+#ifndef _CONNECTIVITY_COMMONTOOLS_HXX_
+#include "connectivity/CommonTools.hxx"
+#endif
+#ifndef _CONNECTIVITY_FILE_VALUE_HXX_
+#include "connectivity/FValue.hxx"
+#endif
+#ifndef _CONNECTIVITY_EVOAB_STATEMENT_HXX_ 
+#include "NStatement.hxx"
+#endif
+#ifndef _CONNECTIVITY_OSUBCOMPONENT_HXX_
+#include "OSubComponent.hxx"
+#endif
+#ifndef _CONNECTIVITY_EVOAB_EVOCONTACTS_HXX_
+#include "NEvoContacts.hxx"
+#endif
+#ifndef _CONNECTIVITY_EVOAB_RESULTSETMETADATA_HXX_ 
+#include "NResultSetMetaData.hxx"
+#endif 
+
+namespace connectivity
+{
+	namespace evoab
+	{
+
+
+		typedef ::cppu::WeakComponentImplHelper8<      ::com::sun::star::sdbc::XResultSet,
+							       ::com::sun::star::sdbc::XRow,
+							       ::com::sun::star::sdbc::XResultSetMetaDataSupplier,
+							       ::com::sun::star::util::XCancellable,
+							       ::com::sun::star::sdbc::XWarningsSupplier,
+							       ::com::sun::star::sdbc::XCloseable,
+							       ::com::sun::star::sdbc::XColumnLocate,
+							       ::com::sun::star::lang::XServiceInfo> OResultSet_BASE;
+
+
+		class OEvoabResultSet :	public	comphelper::OBaseMutex,
+					public	OResultSet_BASE,
+					public	::cppu::OPropertySetHelper,
+					public	::comphelper::OPropertyArrayUsageHelper<OEvoabResultSet>
+		{
+		
+		protected:
+
+			OStatement_Base                                       *m_pStatement;
+			::com::sun::star::uno::WeakReferenceHelper	m_aStatement;
+			::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSetMetaData>        m_xMetaData;
+			
+			rtl_TextEncoding							m_nTextEncoding;
+			sal_Bool									m_bWasNull;
+			EvoContacts                                                             *m_pTable;
+			::rtl::OUString                                                           m_pURI;
+			sal_Int32                                   m_nFetchSize;
+			sal_Int32                                   m_nResultSetType;
+			sal_Int32                                   m_nFetchDirection;
+			sal_Int32                                   m_nResultSetConcurrency;
+			
+			
+			// OPropertyArrayUsageHelper
+			virtual ::cppu::IPropertyArrayHelper* createArrayHelper( ) const;
+			// OPropertySetHelper
+			virtual ::cppu::IPropertyArrayHelper & SAL_CALL getInfoHelper();
+			
+			virtual sal_Bool SAL_CALL convertFastPropertyValue(
+									   ::com::sun::star::uno::Any & rConvertedValue,
+									   ::com::sun::star::uno::Any & rOldValue,
+									   sal_Int32 nHandle,
+									   const ::com::sun::star::uno::Any& rValue )
+				throw (::com::sun::star::lang::IllegalArgumentException);
+			virtual void SAL_CALL setFastPropertyValue_NoBroadcast(
+									       sal_Int32 nHandle,
+									       const ::com::sun::star::uno::Any& rValue
+									       )
+				throw (::com::sun::star::uno::Exception);
+			virtual void SAL_CALL getFastPropertyValue(
+								   ::com::sun::star::uno::Any& rValue,
+								   sal_Int32 nHandle
+								   ) const;
+			
+			// you can't delete objects of this type
+			virtual ~OEvoabResultSet();
+		public:
+			DECLARE_SERVICE_INFO();
+			
+			OEvoabResultSet(OStatement_Base *pStmt, EvoContacts * _table);
+			virtual void construct(void);
+			
+			EvoContacts * getEvoContacts() { return m_pTable; }
+			
+			::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > operator *()
+			{
+				return ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >(*(OResultSet_BASE*)this);
+			}
+			
+			// ::cppu::OComponentHelper
+			virtual void SAL_CALL disposing(void);
+			// XInterface
+			virtual ::com::sun::star::uno::Any SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL acquire() throw();
+			virtual void SAL_CALL release() throw();
+			//XTypeProvider
+			virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type > SAL_CALL getTypes(  ) throw(::com::sun::star::uno::RuntimeException);
+			// XPropertySet
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw(::com::sun::star::uno::RuntimeException);
+			// XResultSet
+			virtual sal_Bool SAL_CALL next(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isBeforeFirst(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isAfterLast(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isFirst(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isLast(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL beforeFirst(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL afterLast(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL first(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL last(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL absolute( sal_Int32 row ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL relative( sal_Int32 rows ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL previous(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL refreshRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL rowUpdated(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL rowInserted(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL rowDeleted(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > SAL_CALL getStatement(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			// XRow
+			virtual sal_Bool SAL_CALL wasNull(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getString( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL getBoolean( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int8 SAL_CALL getByte( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int16 SAL_CALL getShort( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getInt( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int64 SAL_CALL getLong( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual float SAL_CALL getFloat( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual double SAL_CALL getDouble( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Sequence< sal_Int8 > SAL_CALL getBytes( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::util::Date SAL_CALL getDate( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::util::Time SAL_CALL getTime( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::util::DateTime SAL_CALL getTimestamp( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream > SAL_CALL getBinaryStream( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream > SAL_CALL getCharacterStream( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Any SAL_CALL getObject( sal_Int32 columnIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess >& typeMap ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XRef > SAL_CALL getRef( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XBlob > SAL_CALL getBlob( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XClob > SAL_CALL getClob( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XArray > SAL_CALL getArray( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			// XCancellable
+            virtual void SAL_CALL cancel(  ) throw(::com::sun::star::uno::RuntimeException);
+			// XCloseable
+            virtual void SAL_CALL close(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			// XResultSetMetaDataSupplier
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSetMetaData > SAL_CALL getMetaData(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			// XWarningsSupplier
+            virtual ::com::sun::star::uno::Any SAL_CALL getWarnings(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual void SAL_CALL clearWarnings(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			// XColumnLocate
+			virtual sal_Int32 SAL_CALL findColumn( const ::rtl::OUString& columnName ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+		};
+	}
+}
+#endif // CONNECTIVITY_SRESULTSET_HXX
--- /dev/null	2003-01-30 15:54:37.000000000 +0530
+++ connectivity/source/drivers/evoab1.5/NResultSet.cxx	2004-06-18 14:52:16.000000000 +0530
@@ -0,0 +1,786 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  the BSD license.
+ *  
+ *  Copyright (c) 2003 by Sun Microsystems, Inc.
+ *  All rights reserved.
+ *
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions
+ *  are met:
+ *  1. Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *  2. Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *  3. Neither the name of Sun Microsystems, Inc. nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+ *  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *     
+ *************************************************************************/
+
+#ifndef _COMPHELPER_PROPERTY_HXX_
+#include <comphelper/property.hxx>
+#endif
+#ifndef _COMPHELPER_SEQUENCE_HXX_
+#include <comphelper/sequence.hxx>
+#endif
+#ifndef _CPPUHELPER_TYPEPROVIDER_HXX_
+#include <cppuhelper/typeprovider.hxx>
+#endif
+#ifndef _COMPHELPER_EXTRACT_HXX_
+#include <comphelper/extract.hxx>
+#endif
+#ifndef _COM_SUN_STAR_LANG_DISPOSEDEXCEPTION_HPP_
+#include <com/sun/star/lang/DisposedException.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_RESULTSETTYPE_HPP_
+#include <com/sun/star/sdbc/ResultSetType.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_FETCHDIRECTION_HPP_
+#include <com/sun/star/sdbc/FetchDirection.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_RESULTSETCONCURRENCY_HPP_
+#include <com/sun/star/sdbc/ResultSetConcurrency.hpp>
+#endif
+#ifndef _COMPHELPER_TYPES_HXX_
+#include <comphelper/types.hxx>
+#endif
+#ifndef _DBHELPER_DBEXCEPTION_HXX_
+#include <connectivity/dbexception.hxx>
+#endif
+#ifndef _CONNECTIVITY_TSORTINDEX_HXX_
+#include <TSortIndex.hxx>
+#endif
+#ifndef _RTL_STRING_HXX_
+#include <rtl/string.hxx>
+#endif
+#include <vector>
+#include <algorithm>
+#ifndef _CONNECTIVITY_EVOAB_RESULTSET_HXX_
+#include "NResultSet.hxx"
+#endif
+#ifndef _COM_SUN_STAR_SDBC_DATATYPE_HPP_
+#include <com/sun/star/sdbc/DataType.hpp>
+#endif
+#ifndef _COM_SUN_STAR_BEANS_PROPERTYATTRIBUTE_HPP_
+#include <com/sun/star/beans/PropertyAttribute.hpp>
+#endif
+//#ifndef _COM_SUN_STAR_SDBCX_COMPAREBOOKMARK_HPP_
+//#include <com/sun/star/sdbcx/CompareBookmark.hpp>
+//#endif
+#ifndef _CPPUHELPER_TYPEPROVIDER_HXX_
+#include <cppuhelper/typeprovider.hxx>
+#endif
+#ifndef _COM_SUN_STAR_LANG_DISPOSEDEXCEPTION_HPP_
+#include <com/sun/star/lang/DisposedException.hpp>
+#endif
+#ifndef _CONNECTIVITY_PROPERTYIDS_HXX_
+#include "propertyids.hxx"
+#endif
+
+using namespace ::comphelper;
+using namespace connectivity;
+using namespace connectivity::evoab;
+using namespace cppu;
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::beans;
+using namespace com::sun::star::sdbc;
+using namespace com::sun::star::sdbcx;
+using namespace com::sun::star::container;
+using namespace com::sun::star::io;
+using namespace com::sun::star::util;
+
+//------------------------------------------------------------------------------
+//	IMPLEMENT_SERVICE_INFO(OEvoabResultSet,"com.sun.star.sdbcx.OResultSet","com.sun.star.sdbc.ResultSet");
+::rtl::OUString SAL_CALL OEvoabResultSet::getImplementationName(  ) throw ( RuntimeException)	\
+{
+	return ::rtl::OUString::createFromAscii("com.sun.star.sdbcx.evoab.ResultSet");
+  	//return ::rtl::OUString::createFromAscii("com.sun.star.sdbc.evoab.ResultSet");
+}
+// -------------------------------------------------------------------------
+ Sequence< ::rtl::OUString > SAL_CALL OEvoabResultSet::getSupportedServiceNames(  ) throw( RuntimeException)
+{
+	 Sequence< ::rtl::OUString > aSupported(1);
+	aSupported[0] = ::rtl::OUString::createFromAscii("com.sun.star.sdbc.ResultSet");
+	return aSupported;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::supportsService( const ::rtl::OUString& _rServiceName ) throw( RuntimeException)
+{
+	Sequence< ::rtl::OUString > aSupported(getSupportedServiceNames());
+	const ::rtl::OUString* pSupported = aSupported.getConstArray();
+	const ::rtl::OUString* pEnd = pSupported + aSupported.getLength();
+	for (;pSupported != pEnd && !pSupported->equals(_rServiceName); ++pSupported)
+		;
+
+	return pSupported != pEnd;
+}
+
+// -------------------------------------------------------------------------
+OEvoabResultSet::OEvoabResultSet(OStatement_Base* pStmt,EvoContacts *  _table) 
+	: OResultSet_BASE(m_aMutex)
+	,OPropertySetHelper(OResultSet_BASE::rBHelper)
+	,m_aStatement((OWeakObject*)pStmt)
+	,m_xMetaData(NULL)
+	,m_pStatement(pStmt)
+	,m_pTable(_table)
+	,m_bWasNull(sal_True)
+	,m_nFetchSize(0)
+	,m_nResultSetType(ResultSetType::SCROLL_INSENSITIVE)
+	,m_nResultSetConcurrency(ResultSetConcurrency::READ_ONLY)
+	,m_nFetchDirection(FetchDirection::FORWARD)
+{
+}
+
+// -------------------------------------------------------------------------
+OEvoabResultSet::~OEvoabResultSet()
+{
+}
+
+// -------------------------------------------------------------------------
+
+void OEvoabResultSet::construct(void)
+{
+}
+
+// -------------------------------------------------------------------------
+void OEvoabResultSet::disposing(void)
+{
+	OPropertySetHelper::disposing();
+
+	::osl::MutexGuard aGuard(m_aMutex);
+
+	m_aStatement	= NULL;
+	m_xMetaData		= NULL;
+}
+// -------------------------------------------------------------------------
+Any SAL_CALL OEvoabResultSet::queryInterface( const Type & rType ) throw(RuntimeException)
+{
+	Any aRet = OPropertySetHelper::queryInterface(rType);
+	if(!aRet.hasValue())
+		aRet = OResultSet_BASE::queryInterface(rType);
+	return aRet;
+}
+// -------------------------------------------------------------------------
+ Sequence<  Type > SAL_CALL OEvoabResultSet::getTypes(  ) throw( RuntimeException)
+{
+	OTypeCollection aTypes(	::getCppuType( (const  Reference< ::com::sun::star::beans::XMultiPropertySet > *)0 ),
+												::getCppuType( (const  Reference< ::com::sun::star::beans::XFastPropertySet > *)0 ),
+												::getCppuType( (const  Reference< ::com::sun::star::beans::XPropertySet > *)0 ));
+
+	/* Dont know what is this yet */
+	return ::comphelper::concatSequences(aTypes.getTypes(),OResultSet_BASE::getTypes());
+}
+
+// -------------------------------------------------------------------------
+// XRow Interface 
+
+/**
+ * getString:
+ * @columnIndex: The column index from the table.
+ * Returns OUString 
+ *
+ * Info for developer: if In the NResultSetMetaData.cxx the columntype of  columnIndex was 
+ * DataType::VARCHAR this function is called.
+ * History: changed by Jayant M to check if char * is NULL in this function
+ */
+::rtl::OUString SAL_CALL OEvoabResultSet::getString( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	char *fName = "OEvoabResultSet::getString";
+ 	char *field_value=NULL;	
+	EVO_TRACE(fName);
+	EVO_TRACE("columnIndex %d\n",columnIndex);
+	
+	m_bWasNull = sal_False;
+        field_value = (char *)m_pTable->getFieldValue(columnIndex);
+        if (NULL==field_value) 
+        	field_value = g_strdup("");
+        EVO_TRACE("fieldValue:String %s\n",field_value);
+
+	return ::rtl::OUString::createFromAscii(field_value);
+}
+// -------------------------------------------------------------------------
+
+sal_Int64 SAL_CALL OEvoabResultSet::getLong( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return sal_Int64();
+}
+// -------------------------------------------------------------------------
+Reference< XArray > SAL_CALL OEvoabResultSet::getArray( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return NULL;
+}
+
+// -------------------------------------------------------------------------
+
+Reference< XClob > SAL_CALL OEvoabResultSet::getClob( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XBlob > SAL_CALL OEvoabResultSet::getBlob( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return NULL;
+}
+// -------------------------------------------------------------------------
+
+Reference< XRef > SAL_CALL OEvoabResultSet::getRef( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return NULL;
+}
+// -------------------------------------------------------------------------
+
+Any SAL_CALL OEvoabResultSet::getObject( sal_Int32 columnIndex, const Reference< ::com::sun::star::container::XNameAccess >& typeMap ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return Any();
+}
+// -------------------------------------------------------------------------
+
+sal_Int16 SAL_CALL OEvoabResultSet::getShort( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	sal_Int16 nRet=0;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+
+
+Time SAL_CALL OEvoabResultSet::getTime( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+
+	::osl::MutexGuard aGuard( m_aMutex );
+
+	Time nRet;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+
+
+DateTime SAL_CALL OEvoabResultSet::getTimestamp( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	::osl::MutexGuard aGuard( m_aMutex );
+
+	DateTime nRet;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+Reference< XInputStream > SAL_CALL OEvoabResultSet::getBinaryStream( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XInputStream > SAL_CALL OEvoabResultSet::getCharacterStream( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	return NULL;
+}
+
+// -------------------------------------------------------------------------
+/**
+ * getBoolean:
+ * @columnIndex: The column index of the table.
+ * Returns boolean (sal_Bool) 
+ *
+ * Info for developer: if In the NResultSetMetaData.cxx the columntype of  columnIndex was 
+ * DataType::BIT this function is called.
+ * History -> Changed by jayant to return true or false
+ */
+
+sal_Bool SAL_CALL OEvoabResultSet::getBoolean( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	
+	if (sal_True == (sal_Int32) (m_pTable->getFieldValue(columnIndex)))
+                return sal_True;
+        else
+                return sal_False;
+ 
+}
+// -------------------------------------------------------------------------
+
+sal_Int8 SAL_CALL OEvoabResultSet::getByte( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	sal_Int8 nRet = 0;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+
+Sequence< sal_Int8 > SAL_CALL OEvoabResultSet::getBytes( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	::osl::MutexGuard aGuard( m_aMutex );
+		
+	return Sequence< sal_Int8 >();
+}
+// -------------------------------------------------------------------------
+
+Date SAL_CALL OEvoabResultSet::getDate( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	Date nRet;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+
+double SAL_CALL OEvoabResultSet::getDouble( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	double nRet = 0;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+
+float SAL_CALL OEvoabResultSet::getFloat( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	float nVal(0);
+	return nVal;
+}
+// -------------------------------------------------------------------------
+
+sal_Int32 SAL_CALL OEvoabResultSet::getInt( sal_Int32 columnIndex ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	sal_Int32 nRet=0;
+	return nRet;
+}
+// XRow Interface Ends 
+// -------------------------------------------------------------------------
+
+// XResultSetMetaDataSupplier Interface
+Reference< XResultSetMetaData > SAL_CALL OEvoabResultSet::getMetaData(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	char *fName = "OEvoabResultSet::getMetaData";
+	
+	EVO_TRACE(fName);
+		
+
+	if(!m_xMetaData.is())
+		m_xMetaData = new OEvoabResultSetMetaData(m_pStatement->getOwnConnection(),m_pTable);
+	return m_xMetaData;
+}
+// XResultSetMetaDataSupplier Interface Ends
+// -------------------------------------------------------------------------
+
+// XResultSet Interface 
+sal_Bool SAL_CALL OEvoabResultSet::next(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	char *fName = "OEvoabResultSet::next";
+	
+	EVO_TRACE(fName);
+
+	
+	sal_Int32 nRet = m_pTable->moveCursor(1);
+
+	if (  nRet == 0 )
+	  return sal_True;
+	else if ( nRet == -1 )
+	  return sal_False; // verify how to handle exception 
+	
+}
+// -------------------------------------------------------------------------
+
+sal_Bool SAL_CALL OEvoabResultSet::wasNull(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	return m_bWasNull;
+}
+// -------------------------------------------------------------------------
+
+sal_Bool SAL_CALL OEvoabResultSet::isBeforeFirst(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	return m_pTable->getCurrentCursor() == 0;
+	// here you have to implement your movements
+	// return true means there is no data
+	//return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL OEvoabResultSet::getRow(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return m_pTable->getCurrentRowIndex();
+}
+
+
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::isAfterLast(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return m_pTable->getCurrentCursor() == (m_pTable->getEndCursor() + 1);
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::isFirst(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return m_pTable->getCurrentCursor() == 1;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::isLast(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	return m_pTable->getCurrentCursor() == m_pTable->getEndCursor();
+}
+// -------------------------------------------------------------------------
+void SAL_CALL OEvoabResultSet::beforeFirst(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+	// move before the first row so that isBeforeFirst returns false
+	// the smae for other movement methods
+	  m_pTable->moveCursorToStart();
+}
+// -------------------------------------------------------------------------
+void SAL_CALL OEvoabResultSet::afterLast(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+
+	m_pTable->moveCursorToEnd();
+}
+// -------------------------------------------------------------------------
+
+sal_Bool SAL_CALL OEvoabResultSet::first(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	
+	m_pTable->moveCursorToStart();
+	return m_pTable->moveCursor(1) == 0;
+}
+// -------------------------------------------------------------------------
+
+sal_Bool SAL_CALL OEvoabResultSet::last(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+
+	m_pTable->moveCursorToEnd();
+	return m_pTable->moveCursor(-1) == 0;
+
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::absolute( sal_Int32 row ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	m_pTable->moveCursorToStart();
+	return m_pTable->moveCursor(row + 1) == 0;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::relative( sal_Int32 row ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+
+	return m_pTable->moveCursor(row + 1) == 0;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::previous(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	char *fName = "OEvoabResultSet::previous";
+	
+	EVO_TRACE(fName);
+
+	return m_pTable->moveCursor(-1) == 0;
+}
+// -------------------------------------------------------------------------
+Reference< XInterface > SAL_CALL OEvoabResultSet::getStatement(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	return m_aStatement.get();
+}
+// -------------------------------------------------------------------------
+
+sal_Bool SAL_CALL OEvoabResultSet::rowDeleted(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::rowInserted(  ) throw(SQLException, RuntimeException)
+{	
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL OEvoabResultSet::rowUpdated(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL OEvoabResultSet::refreshRow(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+		
+}
+//XResult Interface ends 
+// -------------------------------------------------------------------------
+// XCancellable
+void SAL_CALL OEvoabResultSet::cancel(  ) throw(RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+	OSL_TRACE("In/Out: OEvoabResultSet::cancel" );
+
+}
+//XCloseable 
+void SAL_CALL OEvoabResultSet::close(  ) throw(SQLException, RuntimeException)
+{
+	{
+		::osl::MutexGuard aGuard( m_aMutex );
+		checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+
+	}
+	OSL_TRACE("In/Out: OEvoabResultSet::close" );
+	// dispose();
+}
+
+// XWarningsSupplier
+// -------------------------------------------------------------------------
+void SAL_CALL OEvoabResultSet::clearWarnings(  ) throw(SQLException, RuntimeException)
+{
+	OSL_TRACE("In/Out: OEvoabResultSet::clearWarnings" );
+}
+// -------------------------------------------------------------------------
+Any SAL_CALL OEvoabResultSet::getWarnings(  ) throw(SQLException, RuntimeException)
+{
+	OSL_TRACE("In/Out: OEvoabResultSet::getWarnings" );
+	return Any();
+}
+// -------------------------------------------------------------------------
+//XColumnLocate Interface 
+sal_Int32 SAL_CALL OEvoabResultSet::findColumn( const ::rtl::OUString& columnName ) throw(SQLException, RuntimeException)
+{
+	
+	checkDisposed(OResultSet_BASE::rBHelper.bDisposed);
+
+	// find the first column with the name columnName 
+
+	::osl::MutexGuard aGuard( m_aMutex );
+
+	Reference< XResultSetMetaData > xMeta = getMetaData();
+	sal_Int32 nLen = xMeta->getColumnCount();
+	sal_Int32 i = 1;
+	for(;i<=nLen;++i)
+		if(xMeta->isCaseSensitive(i) ? columnName == xMeta->getColumnName(i) : 
+				columnName.equalsIgnoreAsciiCase(xMeta->getColumnName(i)))
+			break;
+	return i;
+}
+// -------------------------------------------------------------------------
+//XColumnLocate interface ends 
+
+// -------------------------------------------------------------------------
+IPropertyArrayHelper* OEvoabResultSet::createArrayHelper( ) const
+{
+	Sequence< Property > aProps(6);
+	Property* pProperties = aProps.getArray();
+	sal_Int32 nPos = 0;
+	DECL_PROP1IMPL(CURSORNAME,			::rtl::OUString) PropertyAttribute::READONLY);
+	DECL_PROP0(FETCHDIRECTION,			sal_Int32);
+	DECL_PROP0(FETCHSIZE,				sal_Int32);
+	DECL_BOOL_PROP1IMPL(ISBOOKMARKABLE) PropertyAttribute::READONLY);
+	DECL_PROP1IMPL(RESULTSETCONCURRENCY,sal_Int32) PropertyAttribute::READONLY);
+	DECL_PROP1IMPL(RESULTSETTYPE,		sal_Int32) PropertyAttribute::READONLY);
+
+	return new OPropertyArrayHelper(aProps);
+}
+// -------------------------------------------------------------------------
+IPropertyArrayHelper & OEvoabResultSet::getInfoHelper()
+{
+	return *const_cast<OEvoabResultSet*>(this)->getArrayHelper();
+}
+// -------------------------------------------------------------------------
+sal_Bool OEvoabResultSet::convertFastPropertyValue(
+							Any & rConvertedValue,
+							Any & rOldValue,
+							sal_Int32 nHandle,
+							const Any& rValue )
+								throw (::com::sun::star::lang::IllegalArgumentException)
+{
+	switch(nHandle)
+	{
+		case PROPERTY_ID_ISBOOKMARKABLE:
+		case PROPERTY_ID_CURSORNAME:
+		case PROPERTY_ID_RESULTSETCONCURRENCY:
+		case PROPERTY_ID_RESULTSETTYPE:
+			throw ::com::sun::star::lang::IllegalArgumentException();
+			break;
+		case PROPERTY_ID_FETCHDIRECTION:
+		case PROPERTY_ID_FETCHSIZE:
+		default:
+			;
+	}
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+void OEvoabResultSet::setFastPropertyValue_NoBroadcast(
+								sal_Int32 nHandle,
+								const Any& rValue
+												 )
+												 throw (Exception)
+{
+	switch(nHandle)
+	{
+		case PROPERTY_ID_ISBOOKMARKABLE:
+		case PROPERTY_ID_CURSORNAME:
+		case PROPERTY_ID_RESULTSETCONCURRENCY:
+		case PROPERTY_ID_RESULTSETTYPE:
+			throw Exception();
+			break;
+		case PROPERTY_ID_FETCHDIRECTION:
+			break;
+		case PROPERTY_ID_FETCHSIZE:
+			break;
+		default:
+			;
+	}
+}
+// -------------------------------------------------------------------------
+void OEvoabResultSet::getFastPropertyValue(
+								Any& rValue,
+								sal_Int32 nHandle
+									 ) const
+{
+
+	switch(nHandle)
+	{
+        case PROPERTY_ID_RESULTSETCONCURRENCY:
+            rValue <<= (sal_Int32)m_nResultSetConcurrency;
+            break;
+        case PROPERTY_ID_RESULTSETTYPE:
+            rValue <<= m_nResultSetType;
+            break;
+        case PROPERTY_ID_FETCHDIRECTION:
+            rValue <<= m_nFetchDirection;
+            break;
+        case PROPERTY_ID_FETCHSIZE:
+            rValue <<= m_nFetchSize;
+            break;
+	}
+
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL OEvoabResultSet::acquire() throw()
+{
+        OResultSet_BASE::acquire();
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL OEvoabResultSet::release() throw()
+{
+	OResultSet_BASE::release();
+}
+// -----------------------------------------------------------------------------
+::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL OEvoabResultSet::getPropertySetInfo(  ) throw(::com::sun::star::uno::RuntimeException)
+{
+	return ::cppu::OPropertySetHelper::createPropertySetInfo(getInfoHelper());
+}
+// -----------------------------------------------------------------------------
