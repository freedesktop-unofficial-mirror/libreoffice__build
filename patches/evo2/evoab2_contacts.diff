--- /dev/null	2003-01-30 15:54:37.000000000 +0530
+++ connectivity/source/drivers/evoab1.5/NEvoContacts.hxx	2004-03-18 14:57:56.000000000 +0530
@@ -0,0 +1,315 @@
+#ifndef _CONNECTIVITY_EVOAB_EVOCONTACTS_HXX_
+#define _CONNECTIVITY_EVOAB_EVOCONTACTS_HXX_
+
+#define COMMA_SEPARATOR ","
+#define NOMAP -1
+
+
+#ifndef _RTL_USTRING_HXX_
+#include <rtl/ustring.hxx>
+#endif
+
+#ifndef _CONNECTIVITY_EVOAB_DEBUG_HXX_
+#include "NDebug.hxx"
+#endif
+
+#include <vector>
+// todo in place of string use rtl string 
+#include <string>
+#include <iostream>
+using namespace std;
+
+extern "C"
+{
+#include <bonobo/bonobo-main.h>
+#include <stdlib.h>
+#include <string.h>
+#include <libebook/e-book.h>
+
+
+enum _DeliveryAddressField
+{
+	DELIVERY_ADDRESS_STREET,
+	DELIVERY_ADDRESS_EXT,
+	DELIVERY_ADDRESS_CITY,
+	DELIVERY_ADDRESS_REGION,
+	DELIVERY_ADDRESS_CODE,
+	DELIVERY_ADDRESS_COUNTRY
+};
+
+enum _EContactFieldCSV
+{
+	E_CONTACT_CSV_FILE_AS,
+	E_CONTACT_CSV_FULL_NAME,
+	E_CONTACT_CSV_EMAIL,
+	E_CONTACT_CSV_PHONE_PRIMARY,
+	E_CONTACT_CSV_PHONE_ASSISTANT,
+	E_CONTACT_CSV_PHONE_BUSINESS,
+	E_CONTACT_CSV_PHONE_CALLBACK,
+	E_CONTACT_CSV_PHONE_COMPANY,
+	E_CONTACT_CSV_PHONE_HOME,
+	E_CONTACT_CSV_ORG,
+	/*E_CONTACT_CSV_ADDRESS_BUSINESS, */
+	E_CONTACT_CSV_ADDRESS_BUSINESS_STREET,
+	E_CONTACT_CSV_ADDRESS_BUSINESS_EXT,
+	E_CONTACT_CSV_ADDRESS_BUSINESS_CITY,
+	E_CONTACT_CSV_ADDRESS_BUSINESS_REGION,
+	E_CONTACT_CSV_ADDRESS_BUSINESS_POSTCODE,
+	E_CONTACT_CSV_ADDRESS_BUSINESS_COUNTRY,
+	/*E_CONTACT_CSV_ADDRESS_HOME, */
+	E_CONTACT_CSV_ADDRESS_HOME_STREET,
+	E_CONTACT_CSV_ADDRESS_HOME_EXT,
+	E_CONTACT_CSV_ADDRESS_HOME_CITY,
+	E_CONTACT_CSV_ADDRESS_HOME_REGION,
+	E_CONTACT_CSV_ADDRESS_HOME_POSTCODE,
+	E_CONTACT_CSV_ADDRESS_HOME_COUNTRY,
+	E_CONTACT_CSV_PHONE_MOBILE,
+	E_CONTACT_CSV_PHONE_CAR,
+	E_CONTACT_CSV_PHONE_BUSINESS_FAX,
+	E_CONTACT_CSV_PHONE_HOME_FAX,
+	E_CONTACT_CSV_PHONE_BUSINESS_2,
+	E_CONTACT_CSV_PHONE_HOME_2,
+	E_CONTACT_CSV_PHONE_ISDN,
+	E_CONTACT_CSV_PHONE_OTHER,
+	E_CONTACT_CSV_PHONE_OTHER_FAX,
+	E_CONTACT_CSV_PHONE_PAGER,
+	E_CONTACT_CSV_PHONE_RADIO,
+	E_CONTACT_CSV_PHONE_TELEX,
+	E_CONTACT_CSV_PHONE_TTYTDD,
+	/*E_CONTACT_CSV_ADDRESS_OTHER, */
+	E_CONTACT_CSV_ADDRESS_OTHER_STREET,
+	E_CONTACT_CSV_ADDRESS_OTHER_EXT,
+	E_CONTACT_CSV_ADDRESS_OTHER_CITY,
+	E_CONTACT_CSV_ADDRESS_OTHER_REGION,
+	E_CONTACT_CSV_ADDRESS_OTHER_POSTCODE,
+	E_CONTACT_CSV_ADDRESS_OTHER_COUNTRY,
+	E_CONTACT_CSV_EMAIL_2,
+	E_CONTACT_CSV_EMAIL_3,
+	E_CONTACT_CSV_URL,
+	E_CONTACT_CSV_ORG_UNIT,
+	E_CONTACT_CSV_OFFICE,
+	E_CONTACT_CSV_TITLE,
+	E_CONTACT_CSV_ROLE,
+	E_CONTACT_CSV_MANAGER,
+	E_CONTACT_CSV_ASSISTANT,
+	E_CONTACT_CSV_NICKNAME,
+	E_CONTACT_CSV_SPOUSE,
+	E_CONTACT_CSV_NOTE,
+	E_CONTACT_CSV_CALENDAR_URI,
+	E_CONTACT_CSV_FREEBUSY_URL,
+	/*E_CONTACT_CSV_ANNIVERSARY, */
+	E_CONTACT_CSV_ANNIVERSARY_YEAR,
+	E_CONTACT_CSV_ANNIVERSARY_MONTH,
+	E_CONTACT_CSV_ANNIVERSARY_DAY,
+	/*E_CONTACT_CSV_BIRTH_DATE, */
+	E_CONTACT_CSV_BIRTH_DATE_YEAR,
+	E_CONTACT_CSV_BIRTH_DATE_MONTH,
+	E_CONTACT_CSV_BIRTH_DATE_DAY,
+	E_CONTACT_CSV_MAILER,
+	E_CONTACT_CSV_NAME_OR_ORG,
+	E_CONTACT_CSV_CATEGORIES,
+	E_CONTACT_CSV_FAMILY_NAME,
+	E_CONTACT_CSV_GIVEN_NAME,
+	E_CONTACT_CSV_ADDITIONAL_NAME,
+	E_CONTACT_CSV_NAME_SUFFIX,
+	E_CONTACT_CSV_WANTS_HTML,
+	E_CONTACT_CSV_IS_LIST,
+	E_CONTACT_CSV_LAST
+};
+
+struct _EContactCSVFieldData
+{
+	gint csv_field;
+	gint contact_field;
+	gchar *csv_name;
+};
+
+typedef enum _DeliveryAddressField DeliveryAddressField;
+typedef enum _EContactFieldCSV EContactFieldCSV;
+typedef struct _EContactCSVFieldData EContactCSVFieldData;
+
+
+
+}
+
+static EContactCSVFieldData csv_field_data[] = {
+	{E_CONTACT_CSV_FILE_AS, E_CONTACT_FILE_AS, ""},
+	{E_CONTACT_CSV_FULL_NAME, E_CONTACT_CSV_FULL_NAME, ""},
+	{E_CONTACT_CSV_EMAIL, E_CONTACT_EMAIL_1, ""},
+	{E_CONTACT_CSV_PHONE_PRIMARY, E_CONTACT_PHONE_PRIMARY,
+	 ""},
+	{E_CONTACT_CSV_PHONE_ASSISTANT,
+	 E_CONTACT_PHONE_ASSISTANT, ""},
+	{E_CONTACT_CSV_PHONE_BUSINESS,
+	 E_CONTACT_PHONE_BUSINESS, ""},
+	{E_CONTACT_CSV_PHONE_CALLBACK,
+	 E_CONTACT_PHONE_CALLBACK, ""},
+	{E_CONTACT_CSV_PHONE_COMPANY, E_CONTACT_PHONE_COMPANY,
+	 ""},
+	{E_CONTACT_CSV_PHONE_HOME, E_CONTACT_PHONE_HOME, ""},
+	{E_CONTACT_CSV_ORG, E_CONTACT_ORG, ""},
+	/*E_CONTACT_CSV_ADDRESS_BUSINESS, */
+	{E_CONTACT_CSV_ADDRESS_BUSINESS_STREET, NOMAP,
+	 "Business Address"},
+	{E_CONTACT_CSV_ADDRESS_BUSINESS_EXT, NOMAP,
+	 "Business Address2"},
+	{E_CONTACT_CSV_ADDRESS_BUSINESS_CITY, NOMAP,
+	 "Business Address City"},
+	{E_CONTACT_CSV_ADDRESS_BUSINESS_REGION, NOMAP,
+	 "Business Address State"},
+	{E_CONTACT_CSV_ADDRESS_BUSINESS_POSTCODE, NOMAP,
+	 "Business Address PostCode"},
+	{E_CONTACT_CSV_ADDRESS_BUSINESS_COUNTRY, NOMAP,
+	 "Business Address Country"},
+	/*E_CONTACT_CSV_ADDRESS_HOME, */
+	{E_CONTACT_CSV_ADDRESS_HOME_STREET, NOMAP, "Home Address"},
+	{E_CONTACT_CSV_ADDRESS_HOME_EXT, NOMAP, "Home Address2"},
+	{E_CONTACT_CSV_ADDRESS_HOME_CITY, NOMAP, "Home Address City"},
+	{E_CONTACT_CSV_ADDRESS_HOME_REGION, NOMAP,
+	 "Home Address State"},
+	{E_CONTACT_CSV_ADDRESS_HOME_POSTCODE, NOMAP,
+	 "Home Address PostCode"},
+	{E_CONTACT_CSV_ADDRESS_HOME_COUNTRY, NOMAP,
+	 "Home Address Country"},
+	{E_CONTACT_CSV_PHONE_MOBILE, E_CONTACT_PHONE_MOBILE,
+	 ""},
+	{E_CONTACT_CSV_PHONE_CAR, E_CONTACT_PHONE_CAR, ""},
+	{E_CONTACT_CSV_PHONE_BUSINESS_FAX,
+	 E_CONTACT_PHONE_BUSINESS_FAX, ""},
+	{E_CONTACT_CSV_PHONE_HOME_FAX,
+	 E_CONTACT_PHONE_HOME_FAX, ""},
+	{E_CONTACT_CSV_PHONE_BUSINESS_2,
+	 E_CONTACT_PHONE_BUSINESS_2, ""},
+	{E_CONTACT_CSV_PHONE_HOME_2, E_CONTACT_PHONE_HOME_2,
+	 ""},
+	{E_CONTACT_CSV_PHONE_ISDN, E_CONTACT_PHONE_ISDN, ""},
+	{E_CONTACT_CSV_PHONE_OTHER, E_CONTACT_PHONE_OTHER, ""},
+	{E_CONTACT_CSV_PHONE_OTHER_FAX,
+	 E_CONTACT_PHONE_OTHER_FAX, ""},
+	{E_CONTACT_CSV_PHONE_PAGER, E_CONTACT_PHONE_PAGER, ""},
+	{E_CONTACT_CSV_PHONE_RADIO, E_CONTACT_PHONE_RADIO, ""},
+	{E_CONTACT_CSV_PHONE_TELEX, E_CONTACT_PHONE_TELEX, ""},
+	{E_CONTACT_CSV_PHONE_TTYTDD, E_CONTACT_PHONE_TTYTDD,
+	 ""},
+	/*E_CONTACT_CSV_ADDRESS_OTHER, */
+	{E_CONTACT_CSV_ADDRESS_OTHER_STREET, NOMAP, "Other Address"},
+	{E_CONTACT_CSV_ADDRESS_OTHER_EXT, NOMAP, "Other Address2"},
+	{E_CONTACT_CSV_ADDRESS_OTHER_CITY, NOMAP,
+	 "Other Address City"},
+	{E_CONTACT_CSV_ADDRESS_OTHER_REGION, NOMAP,
+	 "Other Address State"},
+	{E_CONTACT_CSV_ADDRESS_OTHER_POSTCODE, NOMAP,
+	 "Other Address PostCode"},
+	{E_CONTACT_CSV_ADDRESS_OTHER_COUNTRY, NOMAP,
+	 "Other Address Country"},
+	{E_CONTACT_CSV_EMAIL_2, E_CONTACT_EMAIL_2, ""},
+	{E_CONTACT_CSV_EMAIL_3, E_CONTACT_EMAIL_3, ""},
+	{E_CONTACT_CSV_URL, NOMAP, ""},
+	{E_CONTACT_CSV_ORG_UNIT, E_CONTACT_ORG_UNIT, ""},
+	{E_CONTACT_CSV_OFFICE, E_CONTACT_OFFICE, ""},
+	{E_CONTACT_CSV_TITLE, E_CONTACT_TITLE, ""},
+	{E_CONTACT_CSV_ROLE, E_CONTACT_ROLE, ""},
+	{E_CONTACT_CSV_MANAGER, E_CONTACT_MANAGER, ""},
+	{E_CONTACT_CSV_ASSISTANT, E_CONTACT_ASSISTANT, ""},
+	{E_CONTACT_CSV_NICKNAME, E_CONTACT_NICKNAME, ""},
+	{E_CONTACT_CSV_SPOUSE, E_CONTACT_SPOUSE, ""},
+	{E_CONTACT_CSV_NOTE, E_CONTACT_NOTE, ""},
+	{E_CONTACT_CSV_CALENDAR_URI, E_CONTACT_CALENDAR_URI, ""},
+	{E_CONTACT_CSV_FREEBUSY_URL, E_CONTACT_FREEBUSY_URL, ""},
+	/*E_CONTACT_ANNIVERSARY, */
+	{E_CONTACT_CSV_ANNIVERSARY_YEAR, NOMAP, "Anniversary Year"},
+	{E_CONTACT_CSV_ANNIVERSARY_MONTH, NOMAP, "Anniversary Month"},
+	{E_CONTACT_CSV_ANNIVERSARY_DAY, NOMAP, "Anniversary Day"},
+	/*E_CONTACT_BIRTH_DATE, */
+	{E_CONTACT_CSV_BIRTH_DATE_YEAR, NOMAP, "Birth Year"},
+	{E_CONTACT_CSV_BIRTH_DATE_MONTH, NOMAP, "Birth Month"},
+	{E_CONTACT_CSV_BIRTH_DATE_DAY, NOMAP, "Birth Day"},
+	{E_CONTACT_CSV_MAILER, E_CONTACT_MAILER, ""},
+	{E_CONTACT_CSV_NAME_OR_ORG, E_CONTACT_NAME_OR_ORG, ""},
+	{E_CONTACT_CSV_CATEGORIES, E_CONTACT_CATEGORIES, ""},
+	{E_CONTACT_CSV_FAMILY_NAME, E_CONTACT_FAMILY_NAME, ""},
+	{E_CONTACT_CSV_GIVEN_NAME, E_CONTACT_GIVEN_NAME, ""},
+	{E_CONTACT_CSV_ADDITIONAL_NAME,
+	 NOMAP, ""},
+	{E_CONTACT_CSV_NAME_SUFFIX, NOMAP, ""},
+	{E_CONTACT_CSV_WANTS_HTML, E_CONTACT_WANTS_HTML, ""},
+	{E_CONTACT_CSV_IS_LIST, E_CONTACT_IS_LIST, ""},
+	{E_CONTACT_CSV_LAST, NOMAP, ""}
+
+};
+
+namespace connectivity
+{
+	namespace evoab
+	{
+		class EvoContacts
+		{
+		public:
+			EvoContacts(char *url);
+			EvoContacts(char *_uri,char *_user,char *_passwd);
+			~EvoContacts();
+			
+			/* Get the field value from current row's column specified by the colIndex */
+			const char * getFieldValue(int fieldIndex);
+			
+			/* Get the current row index */
+			int getCurrentRowIndex();
+			
+			/* Move the cursor to next offset, it can be negative ie go to previous rows 0 if success else -1 */
+			int moveCursor(int offset);
+			
+			/* Move the cursor to first row 0 if success else -1 */
+			int moveCursorToStart();
+			
+			/* Move the cursor to last row+1 0 if success else -1 */
+			int moveCursorToEnd();
+			
+			/* get the current cursor position same as current row index */
+			int getCurrentCursor();
+			
+			/* get the end cursor position is the length of EContacts array */
+			int getEndCursor();
+			
+			/* get the fieldname based on the fieldindex */
+			const char * getFieldName(int fieldIndex);
+			
+			/* get no of fields */
+			int getFieldCount();
+			
+			/* construct/load the addressbook data */
+			int construct();
+			
+			/* Dont know the format yet */
+			void setQuery(char *queryString);
+			
+			const ::std::vector< ::rtl::OUString > & getColumnNames() const;
+			
+			
+			
+			
+		private:
+			int currentIndex;
+			int startIndex;
+			int endIndex;
+			guint noOfContacts;
+			guint noOfFields;
+			
+			char *addressBookURI;
+			char *userName;
+			char *passwd;
+			EBook *book;
+			EBookQuery *query;
+			EContact *current_contact;
+			GSList *pre_defined_fields;
+			GList *contacts;
+			//			::std::vector<string> columnNames;
+			::std::vector< ::rtl::OUString > columnNames;
+			
+			void set_pre_defined_field(GSList **);
+			gint e_contact_csv_get_contact_field (EContactFieldCSV csv_field);
+			void initColumnNames();
+		};
+	}
+}
+
+#endif
--- /dev/null	2003-01-30 15:54:37.000000000 +0530
+++ connectivity/source/drivers/evoab1.5/NEvoContacts.cxx	2004-03-18 14:57:45.000000000 +0530
@@ -0,0 +1,381 @@
+#ifndef _CONNECTIVITY_EVOAB_EVOCONTACTS_HXX_
+#include "NEvoContacts.hxx"
+#endif
+#define ID_INDEX 2
+using namespace connectivity::evoab;
+
+/* Addressbook parameters like addressBookUri,userName and paswd should be freed by this class */
+EvoContacts::EvoContacts(char *_uri): addressBookURI(g_strdup(_uri))
+{
+	char *fName="EvoContacts::EvoContacts";
+
+	EVO_TRACE(fName);
+	set_pre_defined_field(&pre_defined_fields);
+	book = NULL;
+	query = NULL;
+	contacts = NULL;
+	userName = NULL;
+	passwd = NULL;
+	current_contact = NULL;
+}
+
+EvoContacts::EvoContacts(char *_uri,char *_user,char *_passwd): addressBookURI(g_strdup(_uri)), 
+								userName(g_strdup(_user)), 
+								passwd(g_strdup(_passwd))
+{
+	char *fName="EvoContacts::EvoContacts";
+
+	EVO_TRACE(fName);
+	set_pre_defined_field(&pre_defined_fields);
+	book = NULL;
+	query = NULL;
+	contacts = NULL;
+	current_contact = NULL;
+}
+
+
+EvoContacts::~EvoContacts()
+{
+	char *fName="EvoContacts::~EvoContacts";
+
+	EVO_TRACE(fName);
+
+	if (addressBookURI)
+		g_free(addressBookURI);
+	if (userName)
+		g_free(userName);
+	if (passwd)
+		g_free(passwd);
+
+	// free the book and contacts
+	
+	if (book)
+		g_object_unref (book);
+
+	if (contacts)
+		{
+			for (GList *c = contacts; c; c = c->next) {
+				EContact *contact = E_CONTACT (c->data);
+				g_object_unref (G_OBJECT (contact));
+			}
+			g_list_free (contacts);
+		}
+}
+
+int  EvoContacts::construct()
+{
+	gboolean status;
+	EBookStatus stat;
+	char *fName="EvoContacts::construct";
+	ESourceGroup *group;
+	ESource      *source;
+
+
+	EVO_TRACE(fName);
+
+
+	if (bonobo_init (NULL, NULL) == FALSE)
+		{
+			g_error ("Could not initialize Bonobo");
+			// throw exception 
+		}
+
+	book = e_book_new ();
+	
+	EVO_TRACE("loading addressbook %s\n",addressBookURI);
+
+	group  = e_source_group_new ("DataSources", "");
+	source = e_source_new ("Frequent Contacts", addressBookURI);
+	
+	e_source_set_group (source, group);
+
+
+	if (strcmp(addressBookURI,"evolution://")) {
+		status = e_book_load_source (book, source, FALSE, NULL);
+		if ( userName && passwd )
+			status = e_book_authenticate_user(book,userName,passwd,"noauth",NULL);
+	} else {
+		status = e_book_load_local_addressbook (book, NULL);
+	}
+	
+	if (status == FALSE)
+		{
+			printf ("failed to open local addressbook\n");
+			return -1;
+			//exit(0); throw an exception 
+		}
+	
+	query = e_book_query_field_exists (E_CONTACT_FULL_NAME);
+	
+	status = e_book_get_contacts (book, query, &contacts, NULL);
+
+	e_book_query_unref (query);
+
+	if (status == FALSE) 
+		{
+			printf ("error %d getting card list\n", status);
+			return -1;
+			// throw an exception 
+		}
+
+	noOfContacts = g_list_length(contacts); // no of rows 
+	noOfFields = g_slist_length(pre_defined_fields); // no of columns 
+
+	currentIndex = -1;
+	startIndex = -1;
+	endIndex = noOfContacts + 1; // one greater the last 
+	current_contact = E_CONTACT(g_list_nth_data (contacts, 0));
+	initColumnNames();
+
+	return 0;
+}
+
+const char * EvoContacts::getFieldName(int colIndex)
+{
+	char *fName="EvoContacts::getFieldName";
+	int fieldIndex = 0;
+
+	EVO_TRACE(fName);
+
+	/* as the columns are numbered from 1 */
+	fieldIndex = colIndex - 1; 
+
+	// todo check index
+	EVO_TRACE("getFieldName %s %d\n",get_utf_string(columnNames[fieldIndex]),fieldIndex);
+
+	return get_utf_string(columnNames[fieldIndex]);
+}
+
+
+/* Returns the fieldValue based on index, for a currentContact */
+const char * EvoContacts::getFieldValue(int colIndex)
+{
+	gint contact_field;
+	EContactFieldCSV csv_field;
+	gchar *field_value;
+	char *fName="EvoContacts::getFieldValue";
+	int fieldIndex = 0;
+
+	EVO_TRACE(fName);
+
+	/* as the columns are numbered from 1 */
+	fieldIndex = colIndex - 1; 
+
+	const EContactAddress *delivery_address = NULL;
+
+	csv_field = (EContactFieldCSV)GPOINTER_TO_INT (g_slist_nth_data (pre_defined_fields, fieldIndex));
+
+	contact_field = e_contact_csv_get_contact_field (csv_field);
+
+	if (contact_field != NOMAP) {
+		field_value = (gchar *)e_contact_get (current_contact, (EContactField)contact_field);
+	} else {
+		field_value = g_strdup ("");
+	}
+
+	/*checking to avoid the NULL pointer */
+	if (field_value == NULL)
+		field_value =  g_strdup ("");
+
+	if (fieldIndex == ID_INDEX)
+		field_value =  g_strdup (""); // dont print id till its fine 
+
+	EVO_TRACE("getFieldValue: field_value %s\n",field_value);
+
+	/* caller should free the memory */
+	return field_value;
+
+}
+
+int EvoContacts::getCurrentRowIndex()
+{
+	char *fName="EvoContacts::getCurrentRowIndex";
+
+	EVO_TRACE(fName);
+
+	return currentIndex;
+}
+
+int EvoContacts::moveCursor(int offset)
+{
+	char *fName="EvoContacts::moveCursor";
+
+	EVO_TRACE(fName);
+
+	currentIndex = currentIndex + offset;
+
+	/* verify if currentIndex is negative throw exception */
+	current_contact = E_CONTACT(g_list_nth_data (contacts, currentIndex));
+	
+	if (current_contact)
+		return 0;
+	else
+		return -1;
+} 
+
+int EvoContacts::moveCursorToStart()
+{
+	char *fName="EvoContacts::moveCursorToStart";
+
+	EVO_TRACE(fName);
+
+	currentIndex = startIndex;
+	return 0;
+}
+
+int EvoContacts::moveCursorToEnd()
+{
+	char *fName="EvoContacts::moveCursorToEnd";
+
+	EVO_TRACE(fName);
+
+	currentIndex = endIndex;
+	return 0;
+}
+
+int EvoContacts::getCurrentCursor()
+{
+	char *fName="EvoContacts::getCurrentCursor";
+
+	EVO_TRACE(fName);
+
+	return currentIndex;
+}
+
+int EvoContacts::getEndCursor()
+{
+	char *fName="EvoContacts::getEndCursor";
+
+	EVO_TRACE(fName);
+
+	return endIndex;
+}
+
+int EvoContacts::getFieldCount()
+{
+	char *fName="EvoContacts::getFieldCount";
+
+	EVO_TRACE(fName);
+	EVO_TRACE("getFieldCount %d\n",noOfFields);
+
+	return noOfFields;
+}
+
+void EvoContacts::setQuery(char *queryString)
+{
+}
+
+const ::std::vector < ::rtl::OUString > & EvoContacts::getColumnNames() const
+{
+	char *fName="EvoContacts::getColumnNames";
+
+	EVO_TRACE(fName);
+
+	return columnNames;
+}
+
+
+// private functions 
+
+void
+EvoContacts::initColumnNames()
+{
+	guint fieldNumber;
+	EContactFieldCSV csvField;
+	gint contactField;
+	char *fName="EvoContacts::initColumnNames";
+
+	EVO_TRACE(fName);
+
+	
+	fieldNumber = g_slist_length (pre_defined_fields);
+	
+	for(guint i=0; i<fieldNumber ; i++)
+		{
+			csvField = (EContactFieldCSV)GPOINTER_TO_INT (g_slist_nth_data (pre_defined_fields, i));
+			contactField = e_contact_csv_get_contact_field (csvField);
+			
+			if (contactField != NOMAP) {
+				columnNames.push_back(::rtl::OUString::createFromAscii(e_contact_field_name((EContactField)contactField)));
+			} else {
+				columnNames.push_back(::rtl::OUString::createFromAscii(csv_field_data[csvField].csv_name));
+			}
+		}
+}
+
+gint
+EvoContacts::e_contact_csv_get_contact_field (EContactFieldCSV csv_field)
+{
+	return csv_field_data[csv_field].contact_field;
+}
+
+void
+EvoContacts::set_pre_defined_field (GSList ** pre_defined_fields)
+{
+	*pre_defined_fields = NULL;
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_GIVEN_NAME));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_FAMILY_NAME));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_FULL_NAME));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_NICKNAME));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_EMAIL));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_PHONE_PRIMARY));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_EMAIL_2));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_WANTS_HTML));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_PHONE_BUSINESS));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_PHONE_HOME));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_PHONE_BUSINESS_FAX));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_PHONE_PAGER));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_PHONE_MOBILE));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_HOME_STREET));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_HOME_EXT));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_HOME_CITY));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_HOME_REGION));
+	*pre_defined_fields =
+		g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_HOME_POSTCODE));
+	*pre_defined_fields =
+		g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_HOME_COUNTRY));
+	*pre_defined_fields =
+		g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_BUSINESS_STREET));
+	*pre_defined_fields =
+		g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_BUSINESS_EXT));
+	*pre_defined_fields =
+		g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_BUSINESS_CITY));
+	*pre_defined_fields =
+		g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_BUSINESS_REGION));
+	*pre_defined_fields =
+		g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_BUSINESS_POSTCODE));
+	*pre_defined_fields =
+		g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ADDRESS_BUSINESS_COUNTRY));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_TITLE));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_OFFICE));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_ORG));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_URL));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_CALENDAR_URI));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_BIRTH_DATE_YEAR));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_BIRTH_DATE_MONTH));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_BIRTH_DATE_DAY));
+	*pre_defined_fields = g_slist_append (*pre_defined_fields, GINT_TO_POINTER (E_CONTACT_CSV_NOTE));
+}
+
+
+#ifdef DEBUG1
+int main(int argc,char *argv[])
+{
+	EvoContacts econtact = EvoContacts(argv[1]);
+
+	econtact.construct();
+	const ::std::vector<string> & colNames = econtact.getColumnNames();
+
+	
+	econtact.moveCursor(2);
+	econtact.moveCursor(0);
+	
+	for(int i=0;i<colNames.size();i++)
+		{
+			cout << colNames[i] << "\n";
+		}
+
+	printf("%s %s\n",econtact.getFieldName(1),econtact.getFieldValue(1));
+
+}
+#endif 
