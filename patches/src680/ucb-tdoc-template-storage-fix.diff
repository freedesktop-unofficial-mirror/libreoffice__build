Index: ucb/source/ucp/tdoc/tdoc_docmgr.cxx
===================================================================
RCS file: /cvs/ucb/ucb/source/ucp/tdoc/tdoc_docmgr.cxx,v
retrieving revision 1.11
retrieving revision 1.11.26.1
diff -u -p -u -p -r1.11 -r1.11.26.1
--- ucb/source/ucp/tdoc/tdoc_docmgr.cxx	3 Nov 2005 12:39:48 -0000	1.11
+++ ucb/source/ucp/tdoc/tdoc_docmgr.cxx	26 Jan 2006 14:00:13 -0000	1.11.26.1
@@ -406,7 +406,21 @@ void SAL_CALL OfficeDocumentsManager::no
                 if ( (*it).second.xModel == xModel )
                 {
                     // Adjust title.
-                    (*it).second.aTitle = getDocumentTitle( Event.Source );
+                    rtl:: OUString aTitle = getDocumentTitle( Event.Source );
+                    (*it).second.aTitle = aTitle;
+
+                    // Adjust storage.
+                    uno::Reference< document::XStorageBasedDocument >
+                        xDoc( Event.Source, uno::UNO_QUERY );
+                    OSL_ENSURE( xDoc.is(), "Got no document::XStorageBasedDocument!" );
+
+                    uno::Reference< embed::XStorage > xStorage
+                        = xDoc->getDocumentStorage();
+                    OSL_ENSURE( xDoc.is(), "Got no document storage!" );
+
+                    rtl:: OUString aDocId = getDocumentId( Event.Source );
+
+                    m_aDocs[ aDocId ] = StorageInfo( aTitle, xStorage, xModel );
                     break;
                 }
                 ++it;
Index: basic/source/classes/sbunoobj.cxx
===================================================================
RCS file: /cvs/script/basic/source/classes/sbunoobj.cxx,v
retrieving revision 1.35
retrieving revision 1.35.36.1
diff -u -p -u -p -r1.35 -r1.35.36.1
--- basic/source/classes/sbunoobj.cxx	29 Sep 2005 16:10:51 -0000	1.35
+++ basic/source/classes/sbunoobj.cxx	26 Jan 2006 15:14:33 -0000	1.35.36.1
@@ -1640,7 +1640,8 @@ TYPEINIT1(AutomationNamedArgsSbxArray,Sb
 void SbUnoObject::SFX_NOTIFY( SfxBroadcaster& rBC, const TypeId& rBCType,
 						   const SfxHint& rHint, const TypeId& rHintType )
 {
-	if( bNeedIntrospection ) doIntrospection();
+	if( bNeedIntrospection )
+		doIntrospection();
 
 	const SbxHint* pHint = PTR_CAST(SbxHint,&rHint);
 	if( pHint )
@@ -1651,6 +1652,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 		SbUnoMethod* pMeth = PTR_CAST(SbUnoMethod,pVar);
 		if( pProp )
 		{
+			bool bInvocation = pProp->isInvocationBased();
 			if( pHint->GetId() == SBX_HINT_DATAWANTED )
 			{
 				// Test-Properties
@@ -1682,7 +1684,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 					return;
 				}
 
-				if( mxUnoAccess.is() )
+				if( !bInvocation && mxUnoAccess.is() )
 				{
 					try
 					{
@@ -1713,7 +1715,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 						StarBASIC::Error( ERRCODE_BASIC_EXCEPTION, implGetExceptionMsg( e3 ) );
 					}
 				}
-				else if( mxInvocation.is() )
+				else if( bInvocation && mxInvocation.is() )
 				{
 					try
 					{
@@ -1743,7 +1745,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 			}
 			else if( pHint->GetId() == SBX_HINT_DATACHANGED )
 			{
-				if( mxUnoAccess.is() )
+				if( !bInvocation && mxUnoAccess.is() )
 				{
 					if( pProp->aUnoProp.Attributes & PropertyAttribute::READONLY )
 					{
@@ -1784,7 +1786,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 						StarBASIC::Error( ERRCODE_BASIC_EXCEPTION, implGetExceptionMsg( e4 ) );
 					}
 				}
-				else if( mxInvocation.is() )
+				else if( bInvocation && mxInvocation.is() )
 				{
 					// Wert von Uno nach Sbx uebernehmen
 					Any aAnyValue = sbxToUnoValueImpl( pVar );
@@ -1814,6 +1816,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 		}
 		else if( pMeth )
 		{
+			bool bInvocation = pMeth->isInvocationBased();
 			if( pHint->GetId() == SBX_HINT_DATAWANTED )
 			{
 				// Anzahl Parameter -1 wegen Param0 == this
@@ -1822,7 +1825,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 				BOOL bOutParams = FALSE;
 				UINT32 i;
 
-				if( mxUnoAccess.is() )
+				if( !bInvocation && mxUnoAccess.is() )
 				{
 					// Infos holen
 					const Sequence<ParamInfo>& rInfoSeq = pMeth->getParamInfos();
@@ -1883,7 +1886,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 						}
 					}
 				}
-				else if( pParams && mxInvocation.is() )
+				else if( bInvocation && pParams && mxInvocation.is() )
 				{
 					bool bOLEAutomation = true;
 					// TODO: bOLEAutomation = xOLEAutomation.is()
@@ -1938,7 +1941,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
                 GetSbData()->bBlockCompilerError = TRUE;  // #106433 Block compiler errors for API calls
 				try
 				{
-					if( mxUnoAccess.is() )
+					if( !bInvocation && mxUnoAccess.is() )
 					{
 						Any aRetAny = pMeth->m_xUnoMethod->invoke( getUnoAny(), args );
 
@@ -1964,7 +1967,7 @@ void SbUnoObject::SFX_NOTIFY( SfxBroadca
 							}
 						}
 					}
-					else if( mxInvocation.is() )
+					else if( bInvocation && mxInvocation.is() )
 					{
 						Sequence< INT16 > OutParamIndex;
 						Sequence< Any > OutParam;
@@ -2056,12 +2059,15 @@ SbUnoObject::SbUnoObject( const String& 
 			return;
 	}
 
+	Reference< XTypeProvider > xTypeProvider;
 #ifdef INVOCATION_ONLY
 	// Invocation besorgen
 	mxInvocation = createDynamicInvocationFor( aUnoObj_ );
 #else
 	// Hat das Object selbst eine Invocation?
 	mxInvocation = Reference< XInvocation >( x, UNO_QUERY );
+
+	xTypeProvider = Reference< XTypeProvider >( x, UNO_QUERY );
 #endif
 
 	if( mxInvocation.is() )
@@ -2072,11 +2078,14 @@ SbUnoObject::SbUnoObject( const String& 
 		// mxMaterialHolder = Reference< XMaterialHolder >::query( mxInvocation );
 
 		// ExactName holen
-		mxExactName = Reference< XExactName >::query( mxInvocation );
+		mxExactNameInvocation = Reference< XExactName >::query( mxInvocation );
 
 		// Rest bezieht sich nur auf Introspection
-		bNeedIntrospection = FALSE;
-		return;
+		if( !xTypeProvider.is() )
+		{
+			bNeedIntrospection = FALSE;
+			return;
+		}
 	}
 
 	// Introspection-Flag
@@ -2217,9 +2226,11 @@ SbUnoMethod::SbUnoMethod
 (
 	const String& aName,
 	SbxDataType eSbxType,
-	Reference< XIdlMethod > xUnoMethod_
+	Reference< XIdlMethod > xUnoMethod_,
+	bool bInvocation
 )
 	: SbxMethod( aName, eSbxType )
+	, mbInvocation( bInvocation )
 {
 	m_xUnoMethod = xUnoMethod_;
 	pParamInfoSeq = NULL;
@@ -2287,9 +2298,11 @@ SbUnoProperty::SbUnoProperty
 	const String& aName,
 	SbxDataType eSbxType,
 	const Property& aUnoProp_,
-	UINT32 nId_
+	UINT32 nId_,
+	bool bInvocation
 )
 	: SbxProperty( aName, eSbxType )
+	, mbInvocation( bInvocation )
 {
 	aUnoProp = aUnoProp_;
 	nId = nId_;
@@ -2339,21 +2352,22 @@ SbxVariable* SbUnoObject::Find( const Xu
 
 	SbxVariable* pRes = SbxObject::Find( rName, t );
 
-	if( bNeedIntrospection ) doIntrospection();
+	if( bNeedIntrospection )
+		doIntrospection();
 
 	// Neu 4.3.1999: Properties on Demand anlegen, daher jetzt perIntrospectionAccess
 	// suchen, ob doch eine Property oder Methode des geforderten Namens existiert
 	if( !pRes )
 	{
 		OUString aUName( rName );
-		if( mxExactName.is() )
-		{
-			OUString aUExactName = mxExactName->getExactName( aUName );
-			if( aUExactName.getLength() )
-				aUName = aUExactName;
-		}
 		if( mxUnoAccess.is() )
 		{
+			if( mxExactName.is() )
+			{
+				OUString aUExactName = mxExactName->getExactName( aUName );
+				if( aUExactName.getLength() )
+					aUName = aUExactName;
+			}
 			if( mxUnoAccess->hasProperty( aUName, PropertyConcept::ALL - PropertyConcept::DANGEROUS ) )
 			{
 				const Property& rProp = mxUnoAccess->
@@ -2367,7 +2381,7 @@ SbxVariable* SbUnoObject::Find( const Xu
 					eSbxType = unoToSbxType( rProp.Type.getTypeClass() );
 
 				// Property anlegen und reinbraten
-				SbxVariableRef xVarRef = new SbUnoProperty( rProp.Name, eSbxType, rProp, 0 );
+				SbxVariableRef xVarRef = new SbUnoProperty( rProp.Name, eSbxType, rProp, 0, false );
 				QuickInsert( (SbxVariable*)xVarRef );
 				pRes = xVarRef;
 			}
@@ -2379,8 +2393,8 @@ SbxVariable* SbUnoObject::Find( const Xu
 					getMethod( aUName, MethodConcept::ALL - MethodConcept::DANGEROUS );
 
 				// SbUnoMethode anlegen und reinbraten
-				SbxVariableRef xMethRef = new SbUnoMethod
-					( rxMethod->getName(), unoToSbxType( rxMethod->getReturnType() ), rxMethod );
+				SbxVariableRef xMethRef = new SbUnoMethod( rxMethod->getName(), 
+					unoToSbxType( rxMethod->getReturnType() ), rxMethod, false );
 				QuickInsert( (SbxVariable*)xMethRef );
 				pRes = xMethRef;
 			}
@@ -2434,21 +2448,28 @@ SbxVariable* SbUnoObject::Find( const Xu
 				}
 			}
 		}
-		else if( mxInvocation.is() )
+		if( !pRes && mxInvocation.is() )
 		{
+			if( mxExactNameInvocation.is() )
+			{
+				OUString aUExactName = mxExactNameInvocation->getExactName( aUName );
+				if( aUExactName.getLength() )
+					aUName = aUExactName;
+			}
+
 			try
 			{
 				if( mxInvocation->hasProperty( aUName ) )
 				{
 					// Property anlegen und reinbraten
-					SbxVariableRef xVarRef = new SbUnoProperty( aUName, SbxVARIANT, aDummyProp, 0 );
+					SbxVariableRef xVarRef = new SbUnoProperty( aUName, SbxVARIANT, aDummyProp, 0, true );
 					QuickInsert( (SbxVariable*)xVarRef );
 					pRes = xVarRef;
 				}
 				else if( mxInvocation->hasMethod( aUName ) )
 				{
 					// SbUnoMethode anlegen und reinbraten
-					SbxVariableRef xMethRef = new SbUnoMethod( aUName, SbxVARIANT, xDummyMethod );
+					SbxVariableRef xMethRef = new SbUnoMethod( aUName, SbxVARIANT, xDummyMethod, true );
 					QuickInsert( (SbxVariable*)xMethRef );
 					pRes = xMethRef;
 				}
@@ -2489,15 +2510,15 @@ void SbUnoObject::implCreateDbgPropertie
 	Property aProp;
 
 	// Id == -1: Implementierte Interfaces gemaess ClassProvider anzeigen
-	SbxVariableRef xVarRef = new SbUnoProperty( ID_DBG_SUPPORTEDINTERFACES, SbxSTRING, aProp, -1 );
+	SbxVariableRef xVarRef = new SbUnoProperty( ID_DBG_SUPPORTEDINTERFACES, SbxSTRING, aProp, -1, false );
 	QuickInsert( (SbxVariable*)xVarRef );
 
 	// Id == -2: Properties ausgeben
-	xVarRef = new SbUnoProperty( ID_DBG_PROPERTIES, SbxSTRING, aProp, -2 );
+	xVarRef = new SbUnoProperty( ID_DBG_PROPERTIES, SbxSTRING, aProp, -2, false );
 	QuickInsert( (SbxVariable*)xVarRef );
 
 	// Id == -3: Methoden ausgeben
-	xVarRef = new SbUnoProperty( ID_DBG_METHODS, SbxSTRING, aProp, -3 );
+	xVarRef = new SbUnoProperty( ID_DBG_METHODS, SbxSTRING, aProp, -3, false );
 	QuickInsert( (SbxVariable*)xVarRef );
 }
 
@@ -2537,7 +2558,7 @@ void SbUnoObject::implCreateAll( void )
 			eSbxType = unoToSbxType( rProp.Type.getTypeClass() );
 
 		// Property anlegen und reinbraten
-		SbxVariableRef xVarRef = new SbUnoProperty( rProp.Name, eSbxType, rProp, i );
+		SbxVariableRef xVarRef = new SbUnoProperty( rProp.Name, eSbxType, rProp, i, false );
 		QuickInsert( (SbxVariable*)xVarRef );
 	}
 
@@ -2556,7 +2577,7 @@ void SbUnoObject::implCreateAll( void )
 
 		// SbUnoMethode anlegen und reinbraten
 		SbxVariableRef xMethRef = new SbUnoMethod
-			( rxMethod->getName(), unoToSbxType( rxMethod->getReturnType() ), rxMethod );
+			( rxMethod->getName(), unoToSbxType( rxMethod->getReturnType() ), rxMethod, false );
 		QuickInsert( (SbxVariable*)xMethRef );
 	}
 }
Index: basic/source/comp/scanner.cxx
===================================================================
RCS file: /cvs/script/basic/source/comp/scanner.cxx,v
retrieving revision 1.16
retrieving revision 1.16.38.1
diff -u -p -u -p -r1.16 -r1.16.38.1
--- basic/source/comp/scanner.cxx	29 Sep 2005 18:40:46 -0000	1.16
+++ basic/source/comp/scanner.cxx	23 Jan 2006 10:52:33 -0000	1.16.38.1
@@ -467,7 +467,7 @@ PrevLineCommentLbl:
 		bPrevLineExtentsComment = FALSE;
 		aSym = String::CreateFromAscii( "REM" );
 		USHORT nLen = String( pLine ).Len();
-		if( pLine[ nLen - 1 ] == '_' && pLine[ nLen - 2 ] == ' ' )
+		if( bCompatible && pLine[ nLen - 1 ] == '_' && pLine[ nLen - 2 ] == ' ' )
 			bPrevLineExtentsComment = TRUE;
 		nCol2 += nLen;
 		pLine = NULL;
Index: basic/source/inc/sbunoobj.hxx
===================================================================
RCS file: /cvs/script/basic/source/inc/sbunoobj.hxx,v
retrieving revision 1.13
retrieving revision 1.13.38.1
diff -u -p -u -p -r1.13 -r1.13.38.1
--- basic/source/inc/sbunoobj.hxx	29 Sep 2005 16:31:39 -0000	1.13
+++ basic/source/inc/sbunoobj.hxx	26 Jan 2006 15:14:34 -0000	1.13.38.1
@@ -84,6 +84,7 @@ class SbUnoObject: public SbxObject
 	Reference< XMaterialHolder > mxMaterialHolder;
 	Reference< XInvocation > mxInvocation;
 	Reference< XExactName > mxExactName;
+	Reference< XExactName > mxExactNameInvocation;
 	BOOL bNeedIntrospection;
 	Any maTmpUnoObj;	// Only to save obj for doIntrospection!
 
@@ -134,14 +135,20 @@ class SbUnoMethod : public SbxMethod
 	SbUnoMethod* pPrev;
 	SbUnoMethod* pNext;
 
+	bool mbInvocation;		// Method is based on invocation
+
 public:
 	TYPEINFO();
 
-	SbUnoMethod( const String& aName, SbxDataType eSbxType, Reference< XIdlMethod > xUnoMethod_ );
+	SbUnoMethod( const String& aName, SbxDataType eSbxType, Reference< XIdlMethod > xUnoMethod_, 
+		bool bInvocation );
 	virtual ~SbUnoMethod();
 	virtual SbxInfo* GetInfo();
 
 	const Sequence<ParamInfo>& getParamInfos( void );
+
+	bool isInvocationBased( void )
+		{ return mbInvocation; }
 };
 
 
@@ -153,11 +160,16 @@ class SbUnoProperty : public SbxProperty
 	Property aUnoProp;
 	UINT32 nId;
 
+	bool mbInvocation;		// Property is based on invocation
+
 	virtual ~SbUnoProperty();
 public:
 	TYPEINFO();
 	SbUnoProperty( const String& aName, SbxDataType eSbxType,
-		const Property& aUnoProp_, UINT32 nId_ );
+		const Property& aUnoProp_, UINT32 nId_, bool bInvocation );
+
+	bool isInvocationBased( void )
+		{ return mbInvocation; }
 };
 
 // Factory-Klasse fuer das Anlegen von Uno-Structs per DIM AS NEW
Index: sfx2/source/appl/namecont.cxx
===================================================================
RCS file: /cvs/framework/sfx2/source/appl/namecont.cxx,v
retrieving revision 1.50
retrieving revision 1.50.116.1
diff -u -p -u -p -r1.50 -r1.50.116.1
--- sfx2/source/appl/namecont.cxx	7 Sep 2005 17:44:26 -0000	1.50
+++ sfx2/source/appl/namecont.cxx	17 Jan 2006 11:02:25 -0000	1.50.116.1
@@ -1605,6 +1605,8 @@ void SfxLibraryContainer_Impl::storeLibr
 		}
 		catch( uno::Exception& )
 		{
+			ULONG nErrorCode = ERRCODE_IO_GENERAL;
+			ErrorHandler::HandleError( nErrorCode );
 		}
 	}
 	else
@@ -1639,10 +1641,11 @@ void SfxLibraryContainer_Impl::storeLibr
 	Reference< XActiveDataSource > xSource( xHandler, UNO_QUERY );
 	xSource->setOutputStream( xOut );
 
-	xmlscript::exportLibraryContainer( xHandler, pLibArray );
-    if ( bStorage )
-    {
-        try {
+    try 
+	{
+		xmlscript::exportLibraryContainer( xHandler, pLibArray );
+		if ( bStorage )
+		{
             uno::Reference< embed::XTransactedObject > xTransact( xLibrariesStor, uno::UNO_QUERY );
             OSL_ENSURE( xTransact.is(), "The storage must implement XTransactedObject!\n" );
             if ( !xTransact.is() )
@@ -1650,11 +1653,12 @@ void SfxLibraryContainer_Impl::storeLibr
 
             xTransact->commit();
         }
-        catch( uno::Exception& )
-        {
-			OSL_ENSURE( sal_False, "Problem during storing of libraries!\n" );
-            // TODO: error handling
-        }
+    }
+    catch( uno::Exception& )
+    {
+		OSL_ENSURE( sal_False, "Problem during storing of libraries!\n" );
+        ULONG nErrorCode = ERRCODE_IO_GENERAL;
+        ErrorHandler::HandleError( nErrorCode );
     }
 
 	delete pLibArray;
Index: basctl/source/basicide/baside2b.cxx
===================================================================
RCS file: /cvs/script/basctl/source/basicide/baside2b.cxx,v
retrieving revision 1.50
retrieving revision 1.50.6.1
diff -u -p -u -p -r1.50 -r1.50.6.1
--- basctl/source/basicide/baside2b.cxx	3 Jan 2006 12:42:22 -0000	1.50
+++ basctl/source/basicide/baside2b.cxx	20 Jan 2006 11:11:46 -0000	1.50.6.1
@@ -522,7 +522,9 @@ void __EXPORT EditorWindow::LoseFocus()
 BOOL EditorWindow::SetSourceInBasic( BOOL bQuiet )
 {
 	BOOL bChanged = FALSE;
-	if ( pEditEngine && pEditEngine->IsModified() )
+	if ( pEditEngine && pEditEngine->IsModified() 
+		&& !GetEditView()->IsReadOnly() )	// Added because of #i60626, otherwise
+			// any read only bug in the text engine could lead to a crash later
 	{
         if ( !StarBASIC::IsRunning() ) // Nicht zur Laufzeit!
 		{
