Index: XmlSearch/src/com/jclark/xsl/dom/XmlSearchTransform.java
===================================================================
--- /dev/null  1970-01-01 00:00:00.000000000 +0000
+++ XmlSearch/src/com/jclark/xsl/dom/XmlSearchTransform.java   2005-12-31 16:52:28.000000000 +0000
@@ -0,0 +1,10 @@
+package com.jclark.xsl.dom;
+
+import com.jclark.xsl.om.Node;
+import com.jclark.xsl.tr.Result;
+
+public interface XmlSearchTransform extends Transform
+{
+    public void transform(Node sourceRoot,
+                          Result result) throws TransformException;
+}
Index: XmlSearch/src/com/jclark/xsl/dom/XmlSearchXSLTransformEngine.java
===================================================================
--- /dev/null  1970-01-01 00:00:00.000000000 +0000
+++ XmlSearch/src/com/jclark/xsl/dom/XmlSearchXSLTransformEngine.java  2005-12-31 16:53:53.000000000 +0000
@@ -0,0 +1,178 @@
+// Derived from:
+// Id: XSLTransformEngine.java 96 2005-02-28 21:07:29Z blindsey
+// And added methods required by XmlSearch
+
+// Copyright (c) 1998, 1999 James Clark
+
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// ``Software''), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+
+// THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+// IN NO EVENT SHALL JAMES CLARK BE LIABLE FOR ANY CLAIM, DAMAGES OR
+// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+// OTHER DEALINGS IN THE SOFTWARE.
+
+// Except as contained in this notice, the name of James Clark shall
+// not be used in advertising or otherwise to promote the sale, use or
+// other dealings in this Software without prior written authorization
+// from James Clark.
+
+
+package com.jclark.xsl.dom;
+
+import com.jclark.xsl.tr.*;
+import com.jclark.xsl.om.*;
+import com.jclark.xsl.sax.ExtensionHandlerImpl;
+import com.jclark.xsl.sax.MultiNamespaceResult;
+import java.net.URL;
+import java.io.IOException;
+
+public class XmlSearchXSLTransformEngine
+    implements TransformEngine, XMLProcessor
+{
+    private Engine engine;
+    private DOMExtensions extend;
+
+    public Node load(URL url,
+                   int documentIndex,
+                   LoadContext context,
+                   NameTable nameTable) throws XSLException
+    {
+      throw new XSLException("external documents not supported");
+    }
+
+    public Result createResult(Node baseNode,
+                             int documentIndex,
+                             LoadContext loadContext,
+                             Node[] rootNodeRef) throws XSLException
+    {
+      if (baseNode == null)
+          throw new XSLException("cannot convert result tree fragment returned by extension function to a node-set with the DOM");
+      RootNode root = ((NodeBase)baseNode).root;
+      org.w3c.dom.DocumentFragment docFrag
+          = root.ownerDocument.createDocumentFragment();
+      String base = null;
+      URL baseURL = baseNode.getURL();
+      if (baseURL != null)
+          base = baseURL.toString();
+      rootNodeRef[0] =
+          new RootNode(docFrag,
+                       extend,
+                       loadContext,
+                       engine.getNameTable(),
+                       base,
+                       documentIndex);
+      return new MultiNamespaceResult(new DOMBuilder(docFrag), null);
+    }
+
+    public XmlSearchXSLTransformEngine()
+    {
+      engine = new EngineImpl(this, new ExtensionHandlerImpl());
+    }
+
+    public XmlSearchXSLTransformEngine(DOMExtensions extend)
+    {
+      this();
+      this.extend = extend;
+    }
+
+    private class TransformImpl implements XmlSearchTransform, ParameterSet
+    {
+      private Sheet sheet;
+
+      TransformImpl (Sheet sheet) {
+          this.sheet = sheet;
+      }
+
+      public void transform(org.w3c.dom.Node sourceRoot,
+                            org.w3c.dom.Node resultRoot)
+          throws TransformException {
+          try {
+              sheet.process(new RootNode(sourceRoot,
+                                         extend,
+                                         sheet.getSourceLoadContext(),
+                                         engine.getNameTable(),
+                                         null,
+                                         0),
+                            XmlSearchXSLTransformEngine.this,
+                            this, // ParameterSet
+                            new MultiNamespaceResult(new DOMBuilder(resultRoot),
+                                                     null));
+          }
+          catch (XSLException e) {
+              throw toTransformException(e);
+          }
+      }
+
+      public void transform(Node sourceRoot,
+                            Result result)
+          throws TransformException {
+          try {
+              sheet.process(sourceRoot,
+                            XmlSearchXSLTransformEngine.this,
+                            this, // ParameterSet
+                            result);
+          }
+          catch (XSLException e) {
+              throw toTransformException(e);
+          }
+      }
+      public Object getParameter(Name name) {
+          return null;
+      }
+    }
+
+    public Transform createTransform(org.w3c.dom.Node domNode)
+      throws TransformException
+    {
+      try {
+          return new TransformImpl(engine.createSheet(new RootNode(domNode,
+                                                                   extend,
+                                                                   engine.getSheetLoadContext(),
+                                                                   engine.getNameTable(),
+                                                                   null,
+                                                                   0)));
+      }
+      catch (XSLException e) {
+          throw toTransformException(e);
+      }
+      catch (IOException e) {
+          throw new Error("unexpected exception: " + e);
+      }
+    }
+
+    public NameTable getNameTable()
+    {
+      return engine.getNameTable();
+    }
+
+    public LoadContext getSourceLoadContext()
+    {
+      return engine.getSheetLoadContext();
+    }
+
+    private TransformException toTransformException(XSLException e)
+    {
+      org.w3c.dom.Node domNode = null;
+      Node node = e.getNode();
+      if (node != null) {
+          domNode = ((NodeBase)node).domNode;
+      }
+      String message = e.getMessage();
+      if (e == null) {
+          message = e.getException().toString();
+      }
+      return new TransformException(message, domNode);
+    }
+}
Index: XmlSearch/src/com/jclark/xsl/makefile.mk
===================================================================
--- /dev/null  1970-01-01 00:00:00.000000000 +0000
+++ XmlSearch/src/com/jclark/xsl/makefile.mk   2005-12-31 16:53:13.000000000 +0000
@@ -0,0 +1,67 @@
+#*************************************************************************
+#
+#   OpenOffice.org - a multi-platform office productivity suite
+#
+#   $RCSfile$
+#
+#   $Revision$
+#
+#   last change: $Author$
+#
+#   The Contents of this file are made available subject to
+#   the terms of GNU Lesser General Public License Version 2.1.
+#
+#
+#     GNU Lesser General Public License Version 2.1
+#     =============================================
+#     Copyright 2005 by Sun Microsystems, Inc.
+#     901 San Antonio Road, Palo Alto, CA 94303, USA
+#
+#     This library is free software; you can redistribute it and/or
+#     modify it under the terms of the GNU Lesser General Public
+#     License version 2.1, as published by the Free Software Foundation.
+#
+#     This library is distributed in the hope that it will be useful,
+#     but WITHOUT ANY WARRANTY; without even the implied warranty of
+#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#     Lesser General Public License for more details.
+#
+#     You should have received a copy of the GNU Lesser General Public
+#     License along with this library; if not, write to the Free Software
+#     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+#     MA  02111-1307  USA
+#
+#*************************************************************************
+
+PRJ   = ..$/..$/..$/..
+PRJNAME       = xt-xmlsearch
+PACKAGE = com$/jclark$/xsl
+TARGET  = com_jclark_xsl
+
+# --- Settings -----------------------------------------------------
+
+.INCLUDE : settings.mk
+
+.IF "$(XML_CLASSPATH)" != ""
+XCLASSPATH+=:$(XML_CLASSPATH)
+.ENDIF
+
+JARFILES              =  xt.jar
+
+JAVAFILES             = $(subst,$(CLASSDIR)$/$(PACKAGE)$/, $(subst,.class,.java $(JAVACLASSFILES)))
+
+# --- Files --------------------------------------------------------
+
+JAVACLASSFILES        = \
+      $(CLASSDIR)$/$(PACKAGE)$/dom$/XmlSearchTransform.class \
+      $(CLASSDIR)$/$(PACKAGE)$/dom$/XmlSearchXSLTransformEngine.class
+
+JARCLASSDIRS  = com$/jclark
+JARTARGET     = $(PRJNAME).jar
+JARCOMPRESS   = TRUE
+CUSTOMMANIFESTFILE =
+
+
+# --- Targets ------------------------------------------------------
+
+.INCLUDE :  target.mk
Index: XmlSearch/prj/build.lst
===================================================================
--- XmlSearch/prj/build.lst.orig       2003-03-19 12:48:40.000000000 +0000
+++ XmlSearch/prj/build.lst    2005-12-31 16:17:41.000000000 +0000
@@ -1,2 +1,3 @@
 xh    XmlSearch       :       external codemaker NULL
-xh XmlSearch\src\com\sun\xmlsearch    nmake - all xs NULL
+xh XmlSearch\src\com\jclark\xsl       nmake - all xs_xt NULL
+xh XmlSearch\src\com\sun\xmlsearch    nmake - all xs xs_xt NULL
Index: XmlSearch/src/com/sun/xmlsearch/makefile.mk
===================================================================
--- XmlSearch/src/com/sun/xmlsearch/makefile.mk.orig   2005-12-31 16:13:55.000000000 +0000
+++ XmlSearch/src/com/sun/xmlsearch/makefile.mk        2005-12-31 16:17:41.000000000 +0000
@@ -25,8 +25,8 @@
 XCLASSPATH+=:$(XML_CLASSPATH)
 .ENDIF

-JARFILES              =  xt.jar
-#EXTRAJARFILES                =  xt.jar
+JARFILES              =  xt.jar xt-xmlsearch.jar
+#EXTRAJARFILES                =  xt.jar xt-xmlsearch.jar

 JAVAFILES             = $(subst,$(CLASSDIR)$/$(PACKAGE)$/, $(subst,.class,.java $(JAVACLASSFILES)))

@@ -129,7 +129,7 @@
       $(CLASSDIR)$/$(PACKAGE)$/xml/qe/RoleFiller.class     \
       $(CLASSDIR)$/$(PACKAGE)$/xml/qe/Search.class

-JARCLASSDIRS  = com
+JARCLASSDIRS  = com$/sun
 JARTARGET             = $(PRJNAME).jar
 JARCOMPRESS   = TRUE
 CUSTOMMANIFESTFILE =
Index: XmlSearch/src/com/sun/xmlsearch/tree/TreeBuilder.java
===================================================================
--- XmlSearch/src/com/sun/xmlsearch/tree/TreeBuilder.java.orig 2005-12-31 16:13:55.000000000 +0000
+++ XmlSearch/src/com/sun/xmlsearch/tree/TreeBuilder.java      2005-12-31 16:42:09.000000000 +0000
@@ -145,6 +145,7 @@

               public URL getURL() { return null; }
               public int getLineNumber() { return -1; }
+              public int getColumnNumber() { return -1; }
               public NamespacePrefixMap getNamespacePrefixMap() {
                       return _parent.getNamespacePrefixMap();
               }
@@ -154,6 +155,12 @@
               public String getUnparsedEntityURI(String name) {
                       return "getUnparsedEntityURI";
               }
+              public String getPublicId() {
+                      return "getPublicId";
+              }
+              public String getSystemId() {
+                      return "getSystemId";
+              }

               public boolean isLeaf() { return true; }
               public int getChildCount() { return 0; }
Index: XmlSearch/src/com/sun/xmlsearch/xml/indexer/XmlIndexBuilder.java
===================================================================
--- XmlSearch/src/com/sun/xmlsearch/xml/indexer/XmlIndexBuilder.java.orig   2005-12-31 16:13:55.000000000 +0000
+++ XmlSearch/src/com/sun/xmlsearch/xml/indexer/XmlIndexBuilder.java   2005-12-31 16:51:39.000000000 +0000
@@ -60,13 +60,13 @@
 import com.jclark.xsl.tr.OutputMethod;
 import com.jclark.xsl.tr.LoadContext;

-import com.jclark.xsl.dom.Transform;
+import com.jclark.xsl.dom.XmlSearchTransform;
 import com.jclark.xsl.dom.TransformEngine;
 import com.jclark.xsl.dom.TransformException;
-import com.jclark.xsl.dom.XSLTransformEngine;
+import com.jclark.xsl.dom.XmlSearchXSLTransformEngine;

 public final class XmlIndexBuilder {
-      final class MyXslEngine extends XSLTransformEngine {
+      final class MyXslEngine extends XmlSearchXSLTransformEngine {
               public Node load(
                       URL url,
                       int documentIndex,
@@ -436,8 +436,8 @@

       private TreeBuilder _treeBuilder;
       private MyXslEngine _transformEngine;
-      private Transform _indexingTransform;
-      private Transform _defaultTransform;
+      private XmlSearchTransform _indexingTransform;
+      private XmlSearchTransform _defaultTransform;
       private IndexAdapter _indexAdapter;

       public XmlIndexBuilder(String indexDir) throws Exception {
@@ -534,7 +534,7 @@
               return _treeBuilder.getRoot(docUrl);
       }

-      private Transform getTransform(String stylesheetName) throws Exception {
+      private XmlSearchTransform getTransform(String stylesheetName) throws Exception {
               // System.out.println("creating indexing transform: " + stylesheetName);
               URL stylesheetUrl = null;
               if (_useLocalTransformFile) {
@@ -556,7 +556,7 @@
               DocumentBuilder dBuilder = dFactory.newDocumentBuilder();
               Document sheet = dBuilder.parse(stylesheetStream);

-              return _transformEngine.createTransform(sheet);
+              return (XmlSearchTransform)_transformEngine.createTransform(sheet);
       }

       // GTM new:
Index: helpcontent2/settings.pmk
===================================================================
--- helpcontent2/settings.pmk  2005-12-31 16:57:56.000000000 +0000
+++ helpcontent2/settings.pmk  2005-12-31 17:32:59.000000000 +0000
@@ -1,5 +1,5 @@

-my_cp:=$(CLASSPATH)$(PATH_SEPERATOR)$(SOLARBINDIR)$/xercesImpl.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/xt.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/unoil.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/ridl.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/jurt.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/jut.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/xmlsearch.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/xmlhelp.jar
+my_cp:=$(CLASSPATH)$(PATH_SEPERATOR)$(SOLARBINDIR)$/xercesImpl.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/xt.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/unoil.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/ridl.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/jurt.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/jut.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/xmlsearch.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/xmlhelp.jar$(PATH_SEPERATOR)$(SOLARBINDIR)$/xt-xmlsearch.jar

 .IF "$(SYSTEM_DB)" == "YES"
 my_cp!:=$(my_cp)$(PATH_SEPERATOR)$(DB_JAR)
Index: xmlhelp/source/com/sun/star/help/makefile.mk
===================================================================
--- xmlhelp/source/com/sun/star/help/makefile.mk       2005-12-31 16:57:56.000000000 +0000
+++ xmlhelp/source/com/sun/star/help/makefile.mk       2005-12-31 17:01:41.000000000 +0000
@@ -22,7 +22,7 @@

 .INCLUDE : settings.mk

-JARFILES              = xt.jar unoil.jar ridl.jar jurt.jar jut.jar xmlsearch.jar
+JARFILES              = xt.jar unoil.jar ridl.jar jurt.jar jut.jar xmlsearch.jar xt-xmlsearch.jar
 EXTRAJARFILES         =

 .IF "$(SYSTEM_DB)" == "YES"
