Index: cppuhelper/inc/cppuhelper/interfacecontainer.h
===================================================================
RCS file: /cvs/udk/cppuhelper/inc/cppuhelper/interfacecontainer.h,v
retrieving revision 1.18
diff -u -p -u -r1.18 interfacecontainer.h
--- cppuhelper/inc/cppuhelper/interfacecontainer.h	21 Dec 2005 13:19:23 -0000	1.18
+++ cppuhelper/inc/cppuhelper/interfacecontainer.h	19 Dec 2006 16:11:47 -0000
@@ -36,6 +36,7 @@
 #define _CPPUHELPER_INTERFACECONTAINER_H_
 
 #include <hash_map>
+#include <vector>
 #include <functional>
 
 #ifndef _OSL_MUTEX_HXX_
@@ -406,9 +407,25 @@ public:
 
 	typedef key keyType;
 private:
-	::std::hash_map< key , void* , hashImpl , equalImpl > *m_pMap;
+    typedef ::std::vector< std::pair < key , void* > > InterfaceMap;
+    InterfaceMap *m_pMap;
 	::osl::Mutex &	rMutex;
 
+    inline typename InterfaceMap::iterator find(const key &rKey) const
+    {
+        typename InterfaceMap::iterator iter = m_pMap->begin();
+        typename InterfaceMap::iterator end = m_pMap->end();
+
+    	while( iter != end )
+        {
+            equalImpl equal;
+            if( equal( iter->first, rKey ) )
+                break;
+            iter++;
+        }
+        return iter;
+    }
+    
 	inline OMultiTypeInterfaceContainerHelperVar( const OMultiTypeInterfaceContainerHelperVar & ) SAL_THROW( () );
 	inline OMultiTypeInterfaceContainerHelperVar & operator = ( const OMultiTypeInterfaceContainerHelperVar & ) SAL_THROW( () );
 };
Index: cppuhelper/inc/cppuhelper/interfacecontainer.hxx
===================================================================
RCS file: /cvs/udk/cppuhelper/inc/cppuhelper/interfacecontainer.hxx,v
retrieving revision 1.6
diff -u -p -u -r1.6 interfacecontainer.hxx
--- cppuhelper/inc/cppuhelper/interfacecontainer.hxx	19 Jun 2006 10:31:01 -0000	1.6
+++ cppuhelper/inc/cppuhelper/interfacecontainer.hxx	19 Dec 2006 16:11:47 -0000
@@ -38,7 +38,7 @@
 #include <cppuhelper/interfacecontainer.h>
 
 
-#define CONT_HASHMAP ::std::hash_map< key , void* , hashImpl , equalImpl >
+#define CONT_HASHMAP ::std::vector< std::pair < key , void* > >
 
 namespace cppu
 {     
@@ -108,7 +109,7 @@ OInterfaceContainerHelper * OMultiTypeIn
 {
 	::osl::MutexGuard aGuard( rMutex );
 
- 	typename CONT_HASHMAP::iterator iter = m_pMap->find( rKey );
+ 	typename CONT_HASHMAP::iterator iter = find( rKey );
 	if( iter != m_pMap->end() )
 			return (OInterfaceContainerHelper*) (*iter).second;
 	return 0;
@@ -122,11 +123,11 @@ sal_Int32 OMultiTypeInterfaceContainerHe
 	SAL_THROW( () )
 {
 	::osl::MutexGuard aGuard( rMutex );
-	typename CONT_HASHMAP::iterator iter = m_pMap->find( rKey );
+	typename CONT_HASHMAP::iterator iter = find( rKey );
 	if( iter == m_pMap->end() )
 	{
 		OInterfaceContainerHelper * pLC = new OInterfaceContainerHelper( rMutex );
-		(*m_pMap)[rKey] = pLC;
+        m_pMap->push_back(std::pair<key, void*>(rKey, pLC));
 		return pLC->addInterface( rListener );
 	}
 	else
@@ -143,7 +145,7 @@ inline sal_Int32 OMultiTypeInterfaceCont
 	::osl::MutexGuard aGuard( rMutex );
 
 	// search container with id nUik
-	typename CONT_HASHMAP::iterator iter = m_pMap->find( rKey );
+	typename CONT_HASHMAP::iterator iter = find( rKey );
     // container found?
 	if( iter != m_pMap->end() )
         return ((OInterfaceContainerHelper*)(*iter).second)->removeInterface( rListener );
Index: cppuhelper/source/interfacecontainer.cxx
===================================================================
RCS file: /cvs/udk/cppuhelper/source/interfacecontainer.cxx,v
retrieving revision 1.16
diff -u -p -u -r1.16 interfacecontainer.cxx
--- cppuhelper/source/interfacecontainer.cxx	16 Sep 2006 12:41:22 -0000	1.16
+++ cppuhelper/source/interfacecontainer.cxx	19 Dec 2006 16:11:47 -0000
@@ -389,7 +390,7 @@ void OInterfaceContainerHelper::clear() 
 
 // specialized class for type
 
-typedef ::std::hash_map< Type , void* , hashType_Impl , ::std::equal_to< Type > > t_type2ptr;
+typedef ::std::vector< std::pair < Type , void* > > t_type2ptr;
 
 OMultiTypeInterfaceContainerHelper::OMultiTypeInterfaceContainerHelper( Mutex & rMutex_ )
     SAL_THROW( () )
@@ -445,13 +446,28 @@ Sequence< Type > OMultiTypeInterfaceCont
 	}
 	return ::com::sun::star::uno::Sequence< Type >();
 }
+
+static t_type2ptr::iterator findType(t_type2ptr *pMap, const Type & rKey )
+{
+	t_type2ptr::iterator iter = pMap->begin();
+	t_type2ptr::iterator end = pMap->end();
+
+	while( iter != end )
+    {
+        if (iter->first == rKey)
+            break;
+        iter++;
+    }
+    return iter;
+}
+
 OInterfaceContainerHelper * OMultiTypeInterfaceContainerHelper::getContainer( const Type & rKey ) const
     SAL_THROW( () )
 {
 	::osl::MutexGuard aGuard( rMutex );
 
     t_type2ptr * pMap = (t_type2ptr *)m_pMap;
- 	t_type2ptr::iterator iter = pMap->find( rKey );
+ 	t_type2ptr::iterator iter = findType( pMap, rKey );
 	if( iter != pMap->end() )
 			return (OInterfaceContainerHelper*) (*iter).second;
 	return 0;
@@ -462,11 +478,11 @@ sal_Int32 OMultiTypeInterfaceContainerHe
 {
 	::osl::MutexGuard aGuard( rMutex );
     t_type2ptr * pMap = (t_type2ptr *)m_pMap;
-	t_type2ptr::iterator iter = pMap->find( rKey );
+	t_type2ptr::iterator iter = findType( pMap, rKey );
 	if( iter == pMap->end() )
 	{
 		OInterfaceContainerHelper * pLC = new OInterfaceContainerHelper( rMutex );
-		(*pMap)[rKey] = pLC;
+        pMap->push_back(std::pair<Type, void*>(rKey, pLC));
 		return pLC->addInterface( rListener );
 	}
 	else
@@ -480,7 +496,7 @@ sal_Int32 OMultiTypeInterfaceContainerHe
 
 	// search container with id nUik
     t_type2ptr * pMap = (t_type2ptr *)m_pMap;
-	t_type2ptr::iterator iter = pMap->find( rKey );
+	t_type2ptr::iterator iter = findType( pMap, rKey );
 		// container found?
 	if( iter != pMap->end() )
         return ((OInterfaceContainerHelper*)(*iter).second)->removeInterface( rListener );
@@ -547,17 +563,35 @@ void OMultiTypeInterfaceContainerHelper:
 
 // specialized class for long
 
-typedef ::std::hash_map< sal_Int32 , void* , hashInt32_Impl , equalInt32_Impl > t_long2ptr;
+typedef ::std::vector< std::pair < sal_Int32 , void* > > t_long2ptr;
+
+static t_long2ptr::iterator findLong(t_long2ptr *pMap, sal_Int32 nKey )
+{
+	t_long2ptr::iterator iter = pMap->begin();
+	t_long2ptr::iterator end = pMap->end();
+
+	while( iter != end )
+    {
+        if (iter->first == nKey)
+            break;
+        iter++;
+    }
+    return iter;
+}
 
 OMultiTypeInterfaceContainerHelperInt32::OMultiTypeInterfaceContainerHelperInt32( Mutex & rMutex_ )
     SAL_THROW( () )
     : rMutex( rMutex_ )
+    , m_pMap( NULL )
 {
-	m_pMap = new t_long2ptr();
+    // delay pMap allocation until necessary, empty containers are common
 }
 OMultiTypeInterfaceContainerHelperInt32::~OMultiTypeInterfaceContainerHelperInt32()
     SAL_THROW( () )
 {
+    if (!m_pMap)
+        return;
+
     t_long2ptr * pMap = (t_long2ptr *)m_pMap;
 	t_long2ptr::iterator iter = pMap->begin();
 	t_long2ptr::iterator end = pMap->end();
@@ -577,7 +611,7 @@ Sequence< sal_Int32 > OMultiTypeInterfac
 	t_long2ptr::size_type nSize;
 
 	::osl::MutexGuard aGuard( rMutex );
-	nSize = pMap->size();
+	nSize = pMap ? pMap->size() : 0;
 	if( nSize )
 	{
 		::com::sun::star::uno::Sequence< sal_Int32 > aInterfaceTypes( nSize );
@@ -608,8 +642,10 @@ OInterfaceContainerHelper * OMultiTypeIn
 {
 	::osl::MutexGuard aGuard( rMutex );
 
+    if (!m_pMap)
+        return 0;
     t_long2ptr * pMap = (t_long2ptr *)m_pMap;
- 	t_long2ptr::iterator iter = pMap->find( rKey );
+ 	t_long2ptr::iterator iter = findLong( pMap, rKey );
 	if( iter != pMap->end() )
 			return (OInterfaceContainerHelper*) (*iter).second;
 	return 0;
@@ -619,12 +655,14 @@ sal_Int32 OMultiTypeInterfaceContainerHe
     SAL_THROW( () )
 {
 	::osl::MutexGuard aGuard( rMutex );
+    if (!m_pMap)
+    	m_pMap = new t_long2ptr();
     t_long2ptr * pMap = (t_long2ptr *)m_pMap;
-	t_long2ptr::iterator iter = pMap->find( rKey );
-	if( iter == pMap->end() )
+	t_long2ptr::iterator iter = findLong( pMap, rKey );
+ 	if( iter == pMap->end() )
 	{
 		OInterfaceContainerHelper * pLC = new OInterfaceContainerHelper( rMutex );
-		(*pMap)[rKey] = pLC;
+        pMap->push_back(std::pair< sal_Int32, void* >(rKey, pLC));
 		return pLC->addInterface( rListener );
 	}
 	else
@@ -636,9 +674,11 @@ sal_Int32 OMultiTypeInterfaceContainerHe
 {
 	::osl::MutexGuard aGuard( rMutex );
 
+    if (!m_pMap)
+        return 0;
 	// search container with id nUik
     t_long2ptr * pMap = (t_long2ptr *)m_pMap;
-	t_long2ptr::iterator iter = pMap->find( rKey );
+	t_long2ptr::iterator iter = findLong( pMap, rKey );
 		// container found?
 	if( iter != pMap->end() )
         return ((OInterfaceContainerHelper*)(*iter).second)->removeInterface( rListener );
@@ -653,6 +693,9 @@ void OMultiTypeInterfaceContainerHelperI
 	OInterfaceContainerHelper ** ppListenerContainers = NULL;
 	{
 		::osl::MutexGuard aGuard( rMutex );
+        if (!m_pMap)
+            return;
+
         t_long2ptr * pMap = (t_long2ptr *)m_pMap;
 		nSize = pMap->size();
 		if( nSize )
@@ -687,6 +730,8 @@ void OMultiTypeInterfaceContainerHelperI
     SAL_THROW( () )
 {
 	::osl::MutexGuard aGuard( rMutex );
+    if (!m_pMap)
+        return;
     t_long2ptr * pMap = (t_long2ptr *)m_pMap;
 	t_long2ptr::iterator iter = pMap->begin();
 	t_long2ptr::iterator end = pMap->end();
