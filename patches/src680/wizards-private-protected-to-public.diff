--- wizards/com/sun/star/wizards/agenda/AgendaTemplate.java	2006-07-06 16:13:53.000000000 +0200
+++ wizards/com/sun/star/wizards/agenda/AgendaTemplate.java	2007-05-24 11:24:05.000000000 +0200
@@ -206,7 +206,7 @@ public class AgendaTemplate extends Text
     /**
      * used to set the document title property (step 6).
      */
-    private Object docInfo;
+    public Object docInfo;
     
     /**
      * loads the given template, and analyze its structure.
@@ -234,7 +234,7 @@ public class AgendaTemplate extends Text
      * @param url
      * @return the template name without the "aw-" at the beginning.
      */
-    private String calcTemplateName(String url) {
+    public String calcTemplateName(String url) {
         return FileAccess.connectURLs( FileAccess.getParentDir(url) ,FileAccess.getFilename(url).substring(3)); 
     }
     
@@ -246,7 +246,7 @@ public class AgendaTemplate extends Text
      * information (it is only actualized on save) the given list
      * supplies this information.
      */
-    private void initializeData(List topicsData) {
+    public void initializeData(List topicsData) {
         for (int i = 0; i < itemsTables.length; i++) {
             try {
                 itemsTables[i].write("");
@@ -352,7 +352,7 @@ public class AgendaTemplate extends Text
      * A cache is used in order to reuse the objects, instead of recreate them.
      * This method fills the cache will all items objects (names and headings).
      */
-    private void initItemsCache() {
+    public void initItemsCache() {
         itemsCache = new Hashtable(11);
         
         XMultiServiceFactory xmsf = (XMultiServiceFactory)UnoRuntime.queryInterface(XMultiServiceFactory.class,document);
@@ -418,7 +418,7 @@ public class AgendaTemplate extends Text
      * -locate the titles and actualize them
      * -analyze the topics table
      */
-    private void initialize() 
+    public void initialize() 
     {
         /*
          * Get the default locale of the document, and create the date and time formatters.
@@ -473,7 +473,7 @@ public class AgendaTemplate extends Text
      * locates the titles (name, location, date, time) and saves a reference to thier Text ranges.
      *
      */
-    private void initializeTitles() {
+    public void initializeTitles() {
         XTextRange item = null;
         
         XMultiServiceFactory xmsf = (XMultiServiceFactory)UnoRuntime.queryInterface(XMultiServiceFactory.class,document);
@@ -505,12 +505,12 @@ public class AgendaTemplate extends Text
         }
     }
     
-    private void initializeTopics() 
+    public void initializeTopics() 
     {
         topics = new Topics();
     }
     
-    private void initializeItems()  
+    public void initializeItems()  
     {
         _allItems = searchFillInItems();
     }
@@ -519,7 +519,7 @@ public class AgendaTemplate extends Text
      * searches the document for items in the format "&gt;*&lt;"
      * @return a vector containing the XTextRanges of the found items
      */
-    private List searchFillInItems() {
+    public List searchFillInItems() {
         try {
             XSearchable xSearchable = (XSearchable)UnoRuntime.queryInterface(XSearchable.class,document);
             XSearchDescriptor sd = xSearchable.createSearchDescriptor();
@@ -549,7 +549,7 @@ public class AgendaTemplate extends Text
      * analyze the item sections in the template. delegates the analyze of each table to the
      * ItemsTable class.
      */
-    private void initializeItemsSections() 
+    public void initializeItemsSections() 
     {
         String[] sections = getSections(document, TemplateConsts.SECTION_ITEMS);
 
@@ -568,7 +568,7 @@ public class AgendaTemplate extends Text
         
     }
     
-    private String[] getSections(Object document, String s)
+    public String[] getSections(Object document, String s)
     {
         XTextSectionsSupplier xTextSectionsSupplier = (XTextSectionsSupplier) UnoRuntime.queryInterface(XTextSectionsSupplier.class, document);
         String[] allSections = xTextSectionsSupplier.getTextSections().getElementNames();
@@ -602,7 +602,7 @@ public class AgendaTemplate extends Text
         
     }
     
-    private synchronized void redrawTitle(String controlName) {
+    public synchronized void redrawTitle(String controlName) {
         if (controlName.equals("txtTitle"))
             writeTitle(teTitle, trTitle, agenda.cp_Title);
         else if (controlName.equals("txtDate")) {
@@ -615,13 +615,13 @@ public class AgendaTemplate extends Text
     }
     
 
-    private void writeTitle( TextElement te, XTextRange tr, String text) {
+    public void writeTitle( TextElement te, XTextRange tr, String text) {
         te.text = (text == null ? "" : text);
         te.write(tr);
     }
-    private static long DAY_IN_MILLIS = ( 24 * 60 * 60 * 1000 );
+    public static long DAY_IN_MILLIS = ( 24 * 60 * 60 * 1000 );
     
-    private String getDateString(String d) {
+    public String getDateString(String d) {
         if (d == null || d.equals("")) 
             return "";
         
@@ -641,7 +641,7 @@ public class AgendaTemplate extends Text
         return dateFormatter.convertNumberToString(dateFormat, daysDiff);
     }
     
-    private String getTimeString(String s) {
+    public String getTimeString(String s) {
         if (s == null || s.equals(""))
             return "";
         int time = new Integer(s).intValue();
@@ -667,7 +667,7 @@ public class AgendaTemplate extends Text
      * user specified not to display any items which it contains.
      * When finishing the wizard removes this sections entireley from the document.
      */ 
-    private void deleteHiddenSections() {
+    public void deleteHiddenSections() {
         XTextSectionsSupplier xTextSectionsSupplier = (XTextSectionsSupplier) UnoRuntime.queryInterface(XTextSectionsSupplier.class, document);
         String[] allSections = xTextSectionsSupplier.getTextSections().getElementNames();
         try {
@@ -799,7 +799,7 @@ public class AgendaTemplate extends Text
      * @param text the text to fill to the text range object.
      * @param placeholder the placeholder text to use, if the text argument is empty (null or "")
      */
-    private void fillMinutesItem(XTextRange range, Object text, String placeholder) {
+    public void fillMinutesItem(XTextRange range, Object text, String placeholder) {
         String paraStyle = (String)Helper.getUnoPropertyValue(range,"ParaStyleName");
         range.setString((String)text);
         Helper.setUnoPropertyValue(range,"ParaStyleName",paraStyle);
@@ -1201,7 +1201,7 @@ public class AgendaTemplate extends Text
          * @return the number of rows that have been added
          * to the table. 0 or a negative number: no rows added.
          */
-        private int write2(int topic, PropertyValue[] data) throws Exception {
+        public int write2(int topic, PropertyValue[] data) throws Exception {
             while (topic >= writtenTopics.size())
                 writtenTopics.add(null);
             
@@ -1245,7 +1245,7 @@ public class AgendaTemplate extends Text
          * (false would mean new rows must be added to the table in order to 
          * be able to write this topic).
          */
-        private boolean isWritten(int topic) {
+        public boolean isWritten(int topic) {
             return (writtenTopics.size() > topic && writtenTopics.get(topic) != null );
         }
         
@@ -1381,7 +1381,7 @@ public class AgendaTemplate extends Text
         /**
          * reapply the format of the first (header) row.
          */
-        private void formatFirstRow() {
+        public void formatFirstRow() {
             XTextTableCursor cursor = table.createCursorByCellName("A1");
             formatTable(cursor,firstRowFormat, false );
         }
@@ -1389,7 +1389,7 @@ public class AgendaTemplate extends Text
         /**
          * reaply the format of the last row.
          */
-        private void formatLastRow() {
+        public void formatLastRow() {
             XTextTableCursor cursor = table.createCursorByCellName("A1");
             cursor.gotoEnd(false);
             formatTable(cursor,lastRowFormat, true);
@@ -1403,7 +1403,7 @@ public class AgendaTemplate extends Text
          * @return a TextElement object which will write the given value
          * to the given cell.
          */
-        private TextElement setItemText(int cell, Object value) {
+        public TextElement setItemText(int cell, Object value) {
             if (cell >= 0) {
                 TextElement te = ((TextElement)topicCells.get(cell));
                 if (te != null)
@@ -1423,7 +1423,7 @@ public class AgendaTemplate extends Text
          * @param formats a List containing TableCellFormatter objects. Each will format one cell in the direction specified.
          * @param reverse if true the cursor will move left, formatting in reverse order (used for the last row).
          */
-        private void formatTable(XTextTableCursor cursor, List formats, boolean reverse) {
+        public void formatTable(XTextTableCursor cursor, List formats, boolean reverse) {
             for ( int i = 0; i < formats.size() ; i++ ) {
                 ((TableCellFormatter)formats.get(i)).format(table.getCellByName(cursor.getRangeName()));
                 if (reverse)
@@ -1774,7 +1774,7 @@ class TableCellFormatter {
         "TopBorderDistance"
   };
   
-  private Object[] values = new Object[properties.length];
+  public Object[] values = new Object[properties.length];
   
   public TableCellFormatter(Object tableCell) {
     for (int i = 0; i<properties.length; i++)
--- wizards/com/sun/star/wizards/agenda/AgendaWizardDialogImpl.java	2006-10-04 22:09:10.000000000 +0200
+++ wizards/com/sun/star/wizards/agenda/AgendaWizardDialogImpl.java	2007-05-24 11:24:05.000000000 +0200
@@ -89,14 +89,14 @@ public class AgendaWizardDialogImpl exte
      * (live synchronized: when the user changes the gui,
      * the data model changes, except for topics).
      */
-    private CGAgenda agenda;
+    public CGAgenda agenda;
     
     /**
      * the topics control, a gui element which 
      * manipulates the topics data according to the
      * user's input. 
      */
-    private TopicsControl topicsControl;
+    public TopicsControl topicsControl;
     
     /**
      * an array with two array memebers:
@@ -105,7 +105,7 @@ public class AgendaWizardDialogImpl exte
      * agendaTemplates[1] contains an array with
      * corresponding URLs.
      */
-    private String[][] agendaTemplates;
+    public String[][] agendaTemplates;
     
     PathSelection myPathSelection;
     
@@ -196,7 +196,7 @@ public class AgendaWizardDialogImpl exte
         
     }
     
-    private class myPathSelectionListener implements XPathSelectionListener {
+    public class myPathSelectionListener implements XPathSelectionListener {
         public void validatePath() {
             if (myPathSelection.usedPathPicker) {
                 filenameChanged = true;             
@@ -215,7 +215,7 @@ public class AgendaWizardDialogImpl exte
         myPathSelection.addSelectionListener(new myPathSelectionListener());
     }
     
-    private void initializePaths() {
+    public void initializePaths() {
         try {
             sTemplatePath = FileAccess.getOfficePath(xMSF, "Template", "share", "/wizard");
             sUserTemplatePath = FileAccess.getOfficePath(xMSF, "Template", "user", "");
@@ -225,7 +225,7 @@ public class AgendaWizardDialogImpl exte
         }
     }
     
-    private void checkSavePath() {
+    public void checkSavePath() {
         if (agenda.cp_TemplatePath == null || 
                 agenda.cp_TemplatePath.equals("") || 
                 !getFileAccess().exists(FileAccess.getParentDir(agenda.cp_TemplatePath),false) ||
@@ -247,7 +247,7 @@ public class AgendaWizardDialogImpl exte
     /**
      * bind controls to the agenda member (DataAware model)
      */
-    private void makeDA() {
+    public void makeDA() {
         
         setControlProperty("listPageDesign", "StringItemList", agendaTemplates[0]);
         
@@ -306,7 +306,7 @@ public class AgendaWizardDialogImpl exte
 
     
     /*
-    private void initializePaths() {
+    public void initializePaths() {
         try {
             
             sUserTemplatePath = FileAccess.getOfficePath(xMSF, "Template", "user");
@@ -366,7 +366,7 @@ public class AgendaWizardDialogImpl exte
     }
     
     
-    private FileAccess fileAccess1;
+    public FileAccess fileAccess1;
     /** convenience method.
      *  instead of creating a FileAccess object every time
      *  it is needed, I have a FileAccess object memeber.
@@ -374,7 +374,7 @@ public class AgendaWizardDialogImpl exte
      *  then be reused...
      * @return the FileAccess memeber object.
      */
-    private FileAccess getFileAccess() {
+    public FileAccess getFileAccess() {
         if (fileAccess1 == null)
             try {
                 fileAccess1 = new FileAccess(xMSF);
@@ -390,7 +390,7 @@ public class AgendaWizardDialogImpl exte
      * If it is so, one needs not warn the user
      * upon overwrite, since she was already warned. 
      */
-    private boolean filenameChanged = false;
+    public boolean filenameChanged = false;
     
     /**
      * last page, "browse" ("...") button was clicked...
@@ -426,7 +426,7 @@ public class AgendaWizardDialogImpl exte
      * The path displayed is a translated, user-friendly, platform dependant path.
      * @param url the new save url.
      */
-    private void setFilename(String url) {
+    public void setFilename(String url) {
         try {
             String path = getFileAccess().getPath(url,"");
             Helper.setUnoPropertyValue( getModel(myPathSelection.xSaveTextBox), "Text", path);
@@ -561,7 +561,7 @@ public class AgendaWizardDialogImpl exte
         running = false;
     }
     
-    private void closeDocument() {
+    public void closeDocument() {
         try {
             //xComponent.dispose();                       
             XCloseable xCloseable = (XCloseable) UnoRuntime.queryInterface(XCloseable.class, agendaTemplate.xFrame);
@@ -581,9 +581,9 @@ public class AgendaWizardDialogImpl exte
      * this class is used to redraw an item's table when
      * the user clicks one of the checkboxes in step 3 or 4.
      */
-    private class RedrawListener implements DataAware.Listener {
+    public class RedrawListener implements DataAware.Listener {
         
-        private String itemName;
+        public String itemName;
         
         public RedrawListener(String itemName_) {
             itemName = itemName_;
--- wizards/com/sun/star/wizards/agenda/AgendaWizardDialog.java	2006-04-07 14:28:30.000000000 +0200
+++ wizards/com/sun/star/wizards/agenda/AgendaWizardDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -123,16 +123,16 @@ public abstract class AgendaWizardDialog
   //Resources Object
   AgendaWizardDialogResources resources;
   
-  private String[] PROPS_LIST = new String[] {"Dropdown", "Height", "HelpURL", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
-  private String[] PROPS_LABEL_B = new String[] {"FontDescriptor", "Height", "Label", "MultiLine", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
-  private String[] PROPS_CHECK = new String[] {"Height", "HelpURL", "Label", "PositionX", "PositionY", "State", "Step", "TabIndex", "Width"};
-  private String[] PROPS_BUTTON = new String[] {"Height", "HelpURL", "Label", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
-  private String[] PROPS_X = new String[] {"Height", "HelpURL", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
-  private String[] PROPS_TEXTAREA = new String[] {"Height", "Label", "MultiLine", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
-  private String[] PROPS_TEXT = new String[] {"Height", "Label", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
-  private String[] PROPS_IMAGE = new String[] {"Border", "Height", "HelpURL", "ImageURL", "PositionX", "PositionY", "ScaleImage", "Step", "TabIndex", "Width"};
+  public String[] PROPS_LIST = new String[] {"Dropdown", "Height", "HelpURL", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+  public String[] PROPS_LABEL_B = new String[] {"FontDescriptor", "Height", "Label", "MultiLine", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+  public String[] PROPS_CHECK = new String[] {"Height", "HelpURL", "Label", "PositionX", "PositionY", "State", "Step", "TabIndex", "Width"};
+  public String[] PROPS_BUTTON = new String[] {"Height", "HelpURL", "Label", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+  public String[] PROPS_X = new String[] {"Height", "HelpURL", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+  public String[] PROPS_TEXTAREA = new String[] {"Height", "Label", "MultiLine", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+  public String[] PROPS_TEXT = new String[] {"Height", "Label", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+  public String[] PROPS_IMAGE = new String[] {"Border", "Height", "HelpURL", "ImageURL", "PositionX", "PositionY", "ScaleImage", "Step", "TabIndex", "Width"};
   
-  private static final Short NO_BORDER = new Short((short)0);
+  public static final Short NO_BORDER = new Short((short)0);
   
   public AgendaWizardDialog(XMultiServiceFactory xmsf) {
     super(xmsf,HID);
--- wizards/com/sun/star/wizards/agenda/CallWizard.java	2006-04-07 14:29:12.000000000 +0200
+++ wizards/com/sun/star/wizards/agenda/CallWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -140,12 +140,12 @@ public class CallWizard {
         /**
          * The service name, that must be used to get an instance of this service.
          */
-        private static final String __serviceName = "com.sun.star.wizards.agenda.CallWizard";
+        public static final String __serviceName = "com.sun.star.wizards.agenda.CallWizard";
 
         /**
          * The service manager, that gives access to all registered services.
          */
-        private XMultiServiceFactory xmultiservicefactory;
+        public XMultiServiceFactory xmultiservicefactory;
 
         /**
          * This method is a member of the interface for initializing an object directly
--- wizards/com/sun/star/wizards/agenda/TopicsControl.java	2006-04-07 14:29:42.000000000 +0200
+++ wizards/com/sun/star/wizards/agenda/TopicsControl.java	2007-05-24 11:24:05.000000000 +0200
@@ -141,18 +141,18 @@ public class TopicsControl extends Contr
      * topic text box.
      * When pressing tab on this one a scroll down *may* be performed.
      */
-    private Object firstTopic;
+    public Object firstTopic;
     /**
      * the first time box.
      * When pressing shift-tab on this control, a scroll up *may* be performed.
      */
-    private Object lastTime;
+    public Object lastTime;
     
     /**
      * is used when constructing to track the tab index
      * of the created control rows.
      */
-    private int tabIndex = 520;
+    public int tabIndex = 520;
     
     /**
      * create a new TopicControl. Since this is used specifically for the
@@ -214,14 +214,14 @@ public class TopicsControl extends Contr
     /**
      * Implementation of the parent class...
      */
-    protected void initializeScrollFields() {}
+    public void initializeScrollFields() {}
  
     
     /**
      * initializes the data of the control.
      * @param agenda
      */
-    protected void initializeScrollFields(CGAgenda agenda)
+    public void initializeScrollFields(CGAgenda agenda)
     {
         // create a row for each topic with the given values....
         for (int i = 0; i < agenda.cp_Topics.getSize(); i++) {
@@ -241,7 +241,7 @@ public class TopicsControl extends Contr
      * The control has always a blank row at the 
      * end, which enables the user to enter data...
      */
-    protected void insertRowAtEnd() {
+    public void insertRowAtEnd() {
         int l = scrollfields.size(); 
         registerControlGroup( newRow(l), l );
         setTotalFieldCount(l+1);
@@ -269,7 +269,7 @@ public class TopicsControl extends Contr
      * overrides the parent class method to also enable the
      * row whenever data is written to it.
      */
-    protected void fillupControls(int guiRow) {
+    public void fillupControls(int guiRow) {
         super.fillupControls(guiRow);
         ((ControlRow) ControlGroupVector.get( guiRow )).setEnabled(true);
     }
@@ -278,7 +278,7 @@ public class TopicsControl extends Contr
     /**
      * remove the last row
      */
-    protected void removeLastRow() {
+    public void removeLastRow() {
         int l = scrollfields.size(); 
         
         // if we should scroll up...
@@ -315,7 +315,7 @@ public class TopicsControl extends Contr
      * This is done by this method.
      * @param control
      */
-    private void focusGained(XControl control) {
+    public void focusGained(XControl control) {
         try {
             //calculate in which row we are...
             String name = (String)Helper.getUnoPropertyValue(UnoDialog2.getModel(control),"Name");
@@ -335,7 +335,7 @@ public class TopicsControl extends Contr
      * enable or disable the buttons according to the
      * current row we are in.
      */
-    private void enableButtons() {
+    public void enableButtons() {
         UnoDialog2.setEnabled( getAD().btnInsert , (lastFocusRow < scrollfields.size() - 1  ? Boolean.TRUE : Boolean.FALSE ) );
         UnoDialog2.setEnabled( getAD().btnRemove , (lastFocusRow < scrollfields.size() - 1  ? Boolean.TRUE : Boolean.FALSE ) );
         UnoDialog2.setEnabled( getAD().btnUp , (lastFocusRow > 0  ? Boolean.TRUE : Boolean.FALSE ) );
@@ -357,7 +357,7 @@ public class TopicsControl extends Contr
      * the template controller (live preview in background).
      * @return the parent dialog, casted to AgendaWizardDialog.
      */
-    private AgendaWizardDialog getAD() {
+    public AgendaWizardDialog getAD() {
         return (AgendaWizardDialog)this.CurUnoDialog;
     }
     
@@ -375,11 +375,11 @@ public class TopicsControl extends Contr
         rowDown(lastFocusRow - nscrollvalue, lastFocusControl);
     }
     
-    private void lockDoc() {
+    public void lockDoc() {
         //((AgendaWizardDialogImpl)CurUnoDialog).agendaTemplate.xTextDocument.lockControllers();
     }
     
-    private void unlockDoc() {
+    public void unlockDoc() {
         //((AgendaWizardDialogImpl)CurUnoDialog).agendaTemplate.xTextDocument.unlockControllers();
     }
     
@@ -454,7 +454,7 @@ public class TopicsControl extends Contr
      * @param i the index of the new row 
      * @return
      */
-    private PropertyValue[] newRow(int i) {
+    public PropertyValue[] newRow(int i) {
         PropertyValue[] pv = new PropertyValue[4];
         pv[0] = Properties.createProperty(LABEL + i, "" + (i + 1) + ".");
         pv[1] = Properties.createProperty(TOPIC + i, "" );
@@ -469,7 +469,7 @@ public class TopicsControl extends Contr
      * It uses the child-class ControlRow. (see below).
      * @see ControlRow 
      */
-    protected void insertControlGroup(int _index, int npos)
+    public void insertControlGroup(int _index, int npos)
     {
         ControlRow oControlRow = new ControlRow((AgendaWizardDialog)CurUnoDialog, iCompPosX, npos, _index, tabIndex);
         ControlGroupVector.addElement(oControlRow);
@@ -482,7 +482,7 @@ public class TopicsControl extends Contr
      * As far as I know it is never called.
      * @see ControlRow 
      */
-    protected void setControlGroupVisible(int _index, boolean _bIsVisible)
+    public void setControlGroupVisible(int _index, boolean _bIsVisible)
     {
         ((ControlRow)ControlGroupVector.get(_index)).setVisible(_bIsVisible);
     
@@ -496,7 +496,7 @@ public class TopicsControl extends Contr
      * @param row the index number of the row to check.
      * @return true if empty. false if not.
      */
-    protected boolean isRowEmpty(int row) {
+    public boolean isRowEmpty(int row) {
         PropertyValue[] data = getTopicData(row );
         
         // now - is this row empty?
@@ -510,7 +510,7 @@ public class TopicsControl extends Contr
     /**
      * is used for data tracking.
      */
-    private Object[] oldData;
+    public Object[] oldData;
     
     /**
      * update the preview document and 
@@ -632,7 +632,7 @@ public class TopicsControl extends Contr
      * sets focus to the given control.
      * @param textControl
      */
-    private void focus(Object textControl) {
+    public void focus(Object textControl) {
         ((XWindow)UnoRuntime.queryInterface(XWindow.class,textControl)).setFocus();
         XTextComponent xTextComponent = (XTextComponent)UnoRuntime.queryInterface(XTextComponent.class,textControl);
         String text = xTextComponent.getText();
@@ -744,7 +744,7 @@ public class TopicsControl extends Contr
      * @param row1 one can figure out what this parameter is...
      * @param row2 one can figure out what this parameter is...
      */
-    private void switchRows( int row1, int row2) {
+    public void switchRows( int row1, int row2) {
         PropertyValue[] o1 = (PropertyValue[]) scrollfields.get(row1 + nscrollvalue);
         PropertyValue[] o2 = (PropertyValue[]) scrollfields.get(row2 + nscrollvalue);
         
@@ -788,7 +788,7 @@ public class TopicsControl extends Contr
      * should be gotten.
      * @return the selection object.
      */
-    private Selection getSelection(Object control) {
+    public Selection getSelection(Object control) {
         return ((XTextComponent)UnoRuntime.queryInterface(XTextComponent.class,control)).getSelection();
     }
     
@@ -806,7 +806,7 @@ public class TopicsControl extends Contr
      * @param eventSource helps to detect the control's column to set the selection to.
      * @param s the selection object to set.
      */
-    private void setSelection(int guiRow, Object eventSource, Selection s) {
+    public void setSelection(int guiRow, Object eventSource, Selection s) {
         ControlRow cr = (ControlRow)ControlGroupVector.get(guiRow);
         Object control = getControl(cr, eventSource);
         ((XWindow)UnoRuntime.queryInterface(XWindow.class,control)).setFocus();
@@ -821,7 +821,7 @@ public class TopicsControl extends Contr
      * @param column the column number.
      * @return the control...
      */
-    private Object getControl( ControlRow cr, int column) {
+    public Object getControl( ControlRow cr, int column) {
         switch ( column ) {
             case 0 : return cr.label;
             case 1 : return cr.textbox;
@@ -839,7 +839,7 @@ public class TopicsControl extends Contr
      * @param control a control indicating a column.
      * @return
      */
-    private Object getControl(ControlRow cr, Object control) {
+    public Object getControl(ControlRow cr, Object control) {
         int column = getColumn(control);
         return getControl(cr,column);
     }
@@ -849,7 +849,7 @@ public class TopicsControl extends Contr
      * @param control
      * @return
      */
-    private int getColumn(Object control) {
+    public int getColumn(Object control) {
         String name = (String)Helper.getUnoPropertyValue(UnoDialog2.getModel(control),"Name");
         if (name.startsWith( TOPIC ))
             return 1;
@@ -867,7 +867,7 @@ public class TopicsControl extends Contr
      * updates the given row in the preview document.
      * @param row
      */
-    private void updateDocumentRow( int row ) {
+    public void updateDocumentRow( int row ) {
         updateDocumentRow( row , (PropertyValue[])scrollfields.get(row));
     }
 
@@ -876,7 +876,7 @@ public class TopicsControl extends Contr
      * @param row
      * @param data
      */
-    private void updateDocumentRow( int row , PropertyValue[] data) {
+    public void updateDocumentRow( int row , PropertyValue[] data) {
         try {
             ((AgendaWizardDialogImpl)CurUnoDialog).agendaTemplate.topics.write(row, data);
         }
@@ -893,7 +893,7 @@ public class TopicsControl extends Contr
      * @param column the column to update (a gui column, not a document column).
      * @param data the data of the entire row.
      */
-    private void updateDocumentCell( int row , int column, PropertyValue[] data) {
+    public void updateDocumentCell( int row , int column, PropertyValue[] data) {
         try {
             ((AgendaWizardDialogImpl)CurUnoDialog).agendaTemplate.topics.writeCell(row, column, data);
         }
@@ -907,7 +907,7 @@ public class TopicsControl extends Contr
      * the preview document to show the number of rows
      * according to the data model.
      */
-    private void reduceDocumentToTopics() {
+    public void reduceDocumentToTopics() {
         try {
             ((AgendaWizardDialogImpl)CurUnoDialog).agendaTemplate.topics.reduceDocumentTo(scrollfields.size()-1);
         }
@@ -927,19 +927,19 @@ public class TopicsControl extends Contr
     /**
      * A static member used for the child-class ControlRow (GUI Constant)
      */
-    private static Integer I_12 = new Integer(12);
+    public static Integer I_12 = new Integer(12);
     /**
      * A static member used for the child-class ControlRow (GUI Constant)
      */
-    private static Integer I_8 = new Integer(8);
+    public static Integer I_8 = new Integer(8);
     /**
      * A static member used for the child-class ControlRow (GUI Constant)
      */
-    private static final String[] LABEL_PROPS = new String[] {"Height",  "Label", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+    public static final String[] LABEL_PROPS = new String[] {"Height",  "Label", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
     /**
      * A static member used for the child-class ControlRow (GUI Constant)
      */
-    private static final String[] TEXT_PROPS = new String[] {"Height",  "HelpURL", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+    public static final String[] TEXT_PROPS = new String[] {"Height",  "HelpURL", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
     
     /**
      * 
@@ -1122,7 +1122,7 @@ public class TopicsControl extends Contr
          * @param control
          * @return an int columnd number of the given control (0 to 3).
          */
-        private int getColumn(Object control) {
+        public int getColumn(Object control) {
             if ( control == textbox )
                 return 1;
             else if ( control == combobox )
@@ -1135,16 +1135,16 @@ public class TopicsControl extends Contr
                 throw new IllegalArgumentException("Control is not part of this ControlRow");
         }
         
-        private boolean isMoveDown(KeyEvent e) {
+        public boolean isMoveDown(KeyEvent e) {
             return ( e.KeyCode == Key.DOWN ) && ( e.Modifiers == KeyModifier.MOD1 );
         }
-        private boolean isMoveUp(KeyEvent e) {
+        public boolean isMoveUp(KeyEvent e) {
             return ( e.KeyCode == Key.UP ) && ( e.Modifiers == KeyModifier.MOD1 );
         }
-        private boolean isDown(KeyEvent e) {
+        public boolean isDown(KeyEvent e) {
             return ( e.KeyCode == Key.DOWN ) && ( e.Modifiers == 0 );
         }
-        private boolean isUp(KeyEvent e) {
+        public boolean isUp(KeyEvent e) {
             return ( e.KeyCode == Key.UP ) && ( e.Modifiers == 0 );
         }
         
--- wizards/com/sun/star/wizards/common/ConfigGroup.java	2006-04-07 14:30:01.000000000 +0200
+++ wizards/com/sun/star/wizards/common/ConfigGroup.java	2007-05-24 11:24:05.000000000 +0200
@@ -55,7 +55,7 @@ public class ConfigGroup implements Conf
                 }
     }
 
-    private void writeField(Field field, Object configView, String prefix) throws Exception {
+    public void writeField(Field field, Object configView, String prefix) throws Exception {
         String propertyName = field.getName().substring(prefix.length());
         //System.out.println("Going to save:" + propertyName);
         Class fieldType = field.getType();
@@ -103,7 +103,7 @@ public class ConfigGroup implements Conf
                 }
     }
 
-    private void readField(Field field, Object configView, String prefix) throws Exception {
+    public void readField(Field field, Object configView, String prefix) throws Exception {
         String propertyName = field.getName().substring(prefix.length());
 
         Class fieldType = field.getType();
--- wizards/com/sun/star/wizards/common/ConfigSet.java	2006-04-07 14:30:30.000000000 +0200
+++ wizards/com/sun/star/wizards/common/ConfigSet.java	2007-05-24 11:24:05.000000000 +0200
@@ -46,9 +46,9 @@ import org.w3c.dom.*;
  * @author  rpiterman
  */
 public class ConfigSet implements ConfigNode, XMLProvider, ListModel {
-    private Class childClass;
-    private Map childrenMap = new HashMap();
-    private List childrenList = new Vector();
+    public Class childClass;
+    public Map childrenMap = new HashMap();
+    public List childrenList = new Vector();
     public Object root;
 
     /**
@@ -59,10 +59,10 @@ public class ConfigSet implements Config
      * subclasses can change this field in the constructor
      * to avoid this "deletion" of nulls.
      */
-    protected boolean noNulls = true;
+    public boolean noNulls = true;
 
     /** Utility field used by event firing mechanism. */
-    private javax.swing.event.EventListenerList listenerList = null;
+    public javax.swing.event.EventListenerList listenerList = null;
 
     public ConfigSet(Class childType) {
         childClass = childType;
@@ -96,7 +96,7 @@ public class ConfigSet implements Config
         fireListDataListenerIntervalAdded(i, i);
     }
 
-    protected Object createChild() throws InstantiationException, IllegalAccessException {
+    public Object createChild() throws InstantiationException, IllegalAccessException {
         return childClass.newInstance();
     }
 
@@ -255,7 +255,7 @@ public class ConfigSet implements Config
      * @param event The event to be fired
      *
      */
-    private void fireListDataListenerIntervalAdded(int i0, int i1) {
+    public void fireListDataListenerIntervalAdded(int i0, int i1) {
         ListDataEvent event = new ListDataEvent(this, ListDataEvent.INTERVAL_ADDED, i0, i1);
         if (listenerList == null)
             return;
@@ -272,7 +272,7 @@ public class ConfigSet implements Config
      * @param event The event to be fired
      *
      */
-    private void fireListDataListenerIntervalRemoved(int i0, int i1) {
+    public void fireListDataListenerIntervalRemoved(int i0, int i1) {
         ListDataEvent event = new ListDataEvent(this, ListDataEvent.INTERVAL_REMOVED, i0, i1);
         if (listenerList == null)
             return;
@@ -289,7 +289,7 @@ public class ConfigSet implements Config
      * @param event The event to be fired
      *
      */
-    private void fireListDataListenerContentsChanged(int i0, int i1) {
+    public void fireListDataListenerContentsChanged(int i0, int i1) {
         ListDataEvent event = new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, i0, i1);
         if (listenerList == null)
             return;
--- wizards/com/sun/star/wizards/common/FileAccess.java	2006-07-13 14:13:13.000000000 +0200
+++ wizards/com/sun/star/wizards/common/FileAccess.java	2007-05-24 11:24:05.000000000 +0200
@@ -623,7 +623,7 @@ public class FileAccess {
         return url;
     }
 
-    private static String filename(String name, String ext, int i) {
+    public static String filename(String name, String ext, int i) {
         return name + (i == 0 ? "" : String.valueOf(i)) + (ext.equals("") ? "" : "." + ext);
     }
     
--- wizards/com/sun/star/wizards/common/Helper.java	2006-04-07 14:31:28.000000000 +0200
+++ wizards/com/sun/star/wizards/common/Helper.java	2007-05-24 11:24:05.000000000 +0200
@@ -236,14 +236,14 @@ public class Helper {
         }
     }
 
-    private static long DAY_IN_MILLIS = ( 24 * 60 * 60 * 1000 );
+    public static long DAY_IN_MILLIS = ( 24 * 60 * 60 * 1000 );
 
     public static class DateUtils {
 
-        private long docNullTime;
-        private XNumberFormatter formatter;
-        private XNumberFormatsSupplier formatSupplier;
-        private Calendar calendar;
+        public long docNullTime;
+        public XNumberFormatter formatter;
+        public XNumberFormatsSupplier formatSupplier;
+        public Calendar calendar;
 
         public DateUtils(XMultiServiceFactory xmsf, Object document) throws Exception {
             XMultiServiceFactory docMSF = (XMultiServiceFactory)UnoRuntime.queryInterface(XMultiServiceFactory.class,document);
@@ -279,7 +279,7 @@ public class Helper {
             return formatter;
         }
 
-        private long getTimeInMillis(){
+        public long getTimeInMillis(){
             java.util.Date dDate = calendar.getTime();
             return dDate.getTime();
         }
--- wizards/com/sun/star/wizards/common/NumberFormatter.java	2006-12-01 17:29:09.000000000 +0100
+++ wizards/com/sun/star/wizards/common/NumberFormatter.java	2007-05-24 11:24:05.000000000 +0200
@@ -61,8 +61,8 @@ public class NumberFormatter {
     public XNumberFormats xNumberFormats;
     public XNumberFormatTypes xNumberFormatTypes;
     public XPropertySet xNumberFormatSettings;
-    private boolean bNullDateCorrectionIsDefined = false;
-    private Locale aLocale; 
+    public boolean bNullDateCorrectionIsDefined = false;
+    public Locale aLocale; 
     
     
     public NumberFormatter(XMultiServiceFactory _xMSF, XNumberFormatsSupplier _xNumberFormatsSupplier, Locale _aLocale) throws Exception{
--- wizards/com/sun/star/wizards/common/SystemDialog.java	2006-04-07 14:33:46.000000000 +0200
+++ wizards/com/sun/star/wizards/common/SystemDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -107,7 +107,7 @@ public class SystemDialog {
     
     
     
-    private String subst(String path) {
+    public String subst(String path) {
         try {
             //System.out.println("SystemDialog.subst:");
             //System.out.println(path);
@@ -178,7 +178,7 @@ public class SystemDialog {
             return null;
     }
 
-    private boolean execute(XExecutableDialog execDialog) {
+    public boolean execute(XExecutableDialog execDialog) {
         return execDialog.execute() == 1;
     }
 
@@ -227,7 +227,7 @@ public class SystemDialog {
      * @param filterName
      * @return
      */
-    private String getFilterUIName(String filterName) {
+    public String getFilterUIName(String filterName) {
         String prodName = Configuration.getProductName(xMSF);
         String[][] s = new String[][] { { getFilterUIName_(filterName)}
         };
@@ -240,7 +240,7 @@ public class SystemDialog {
      * @param filterName
      * @return the UI localized name of the given filter name.
      */
-    private String getFilterUIName_(String filterName) {
+    public String getFilterUIName_(String filterName) {
         try {
             Object oFactory = xMSF.createInstance("com.sun.star.document.FilterFactory");
             Object oObject = Helper.getUnoObjectbyName(oFactory, filterName);
--- wizards/com/sun/star/wizards/common/UCB.java	2006-04-07 14:34:11.000000000 +0200
+++ wizards/com/sun/star/wizards/common/UCB.java	2007-05-24 11:24:05.000000000 +0200
@@ -24,8 +24,8 @@ import com.sun.star.uno.UnoRuntime;
  * It should be always: dir,filename.
  */
 public class UCB {
-    private Object ucb;
-    private FileAccess fa;
+    public Object ucb;
+    public FileAccess fa;
     
     public UCB(XMultiServiceFactory xmsf) throws Exception {
         String[] keys = new String[2];
--- wizards/com/sun/star/wizards/db/BlindtextCreator.java	2006-07-06 16:14:10.000000000 +0200
+++ wizards/com/sun/star/wizards/db/BlindtextCreator.java	2007-05-24 11:24:05.000000000 +0200
@@ -96,7 +96,7 @@ public class BlindtextCreator {
         return PartBlindText;
     }
 
-    private static int getMaxFieldCount(boolean bIsCurLandscape) {
+    public static int getMaxFieldCount(boolean bIsCurLandscape) {
         if (bIsCurLandscape == true)
             return 5;
         else
--- wizards/com/sun/star/wizards/db/ColumnPropertySet.java	2006-04-07 14:35:08.000000000 +0200
+++ wizards/com/sun/star/wizards/db/ColumnPropertySet.java	2007-05-24 11:24:05.000000000 +0200
@@ -49,8 +49,8 @@ import com.sun.star.wizards.db.TypeInspe
 public class ColumnPropertySet {
     TypeInspector oTypeInspector;
     public XPropertySet xPropertySet;
-    private int nType;
-    private String sTypeName = "";
+    public int nType;
+    public String sTypeName = "";
     
     
     public ColumnPropertySet(TypeInspector _oTypeInspector, XPropertySet _xPropertySet){
@@ -107,7 +107,7 @@ public class ColumnPropertySet {
     }}
     
         
-    private int getPrecision(){
+    public int getPrecision(){
     try{
         return ((Integer) xPropertySet.getPropertyValue("Precision")).intValue();
     } catch (Exception e) {
@@ -116,7 +116,7 @@ public class ColumnPropertySet {
     }}
         
         
-    private void setType(int _nType, String _sTypeName){
+    public void setType(int _nType, String _sTypeName){
         if (_sTypeName.equals(""))
             sTypeName = oTypeInspector.getDefaultTypeName(nType);
         else
@@ -127,7 +127,7 @@ public class ColumnPropertySet {
     }
     
     
-    private void assignPropertyValue(String _spropname, Object _oValue){
+    public void assignPropertyValue(String _spropname, Object _oValue){
         try {
             if (_spropname.equals("Type")){
                 nType = ((Integer) _oValue).intValue();
@@ -160,7 +160,7 @@ public class ColumnPropertySet {
     }
     
 
-    private int getType(){
+    public int getType(){
         return nType;
     }
 }
--- wizards/com/sun/star/wizards/db/CommandMetaData.java	2006-12-01 17:29:23.000000000 +0100
+++ wizards/com/sun/star/wizards/db/CommandMetaData.java	2007-05-24 11:24:05.000000000 +0200
@@ -64,15 +64,15 @@ public class CommandMetaData extends DBM
     public String[] NumericFieldNames = new String[] {};
     public String[] NonAggregateFieldNames;
     public int[] FieldTypes;
-    private int CommandType;
-    private String Command;
+    public int CommandType;
+    public String Command;
     boolean bCatalogAtStart = true;
     String sCatalogSep = "";
     String sIdentifierQuote = "";
     boolean bCommandComposerAttributesalreadyRetrieved = false;
 
 
-    private XIndexAccess xIndexKeys;
+    public XIndexAccess xIndexKeys;
 
     public CommandMetaData(XMultiServiceFactory xMSF, Locale _aLocale, NumberFormatter oNumberFormatter) {
         super(xMSF, _aLocale, oNumberFormatter);
--- wizards/com/sun/star/wizards/db/CommandName.java	2006-04-07 14:35:38.000000000 +0200
+++ wizards/com/sun/star/wizards/db/CommandName.java	2007-05-24 11:24:05.000000000 +0200
@@ -38,17 +38,17 @@ import com.sun.star.uno.Exception;
 import com.sun.star.wizards.common.JavaTools;
 
 public class CommandName{
-    protected CommandMetaData oCommandMetaData;
-    protected String CatalogName = "";
-    protected String SchemaName = "";
-    protected String TableName = "";
-    protected String DisplayName = "";
-    protected String ComposedName = "";
-    protected String AliasName = "";
-    protected boolean bCatalogAtStart;
-    protected String sCatalogSep;
-    protected String sIdentifierQuote;
-    protected boolean baddQuotation = true;
+    public CommandMetaData oCommandMetaData;
+    public String CatalogName = "";
+    public String SchemaName = "";
+    public String TableName = "";
+    public String DisplayName = "";
+    public String ComposedName = "";
+    public String AliasName = "";
+    public boolean bCatalogAtStart;
+    public String sCatalogSep;
+    public String sIdentifierQuote;
+    public boolean baddQuotation = true;
 
     
     public CommandName(CommandMetaData _CommandMetaData, String _DisplayName){
@@ -82,7 +82,7 @@ public class CommandName{
     }}
     
     
-    private void setComposedCommandName(String _DisplayName) {
+    public void setComposedCommandName(String _DisplayName) {
     try{
         if (this.setMetaDataAttributes()){
             this.DisplayName = _DisplayName;
@@ -139,7 +139,7 @@ public class CommandName{
     }
 
     
-    private boolean setMetaDataAttributes(){
+    public boolean setMetaDataAttributes(){
     try {
         bCatalogAtStart = oCommandMetaData.xDBMetaData.isCatalogAtStart();
         sCatalogSep = oCommandMetaData.xDBMetaData.getCatalogSeparator();
--- wizards/com/sun/star/wizards/db/DBMetaData.java	2006-12-01 17:29:36.000000000 +0100
+++ wizards/com/sun/star/wizards/db/DBMetaData.java	2007-05-24 11:24:05.000000000 +0200
@@ -95,16 +95,16 @@ public class DBMetaData {
 
     public XNameAccess xTableNames;
     public XNameAccess xQueryNames;
-    private XInteractionHandler oInteractionHandler;
-    private XNameAccess xNameAccess;
-    private XInterface xDatabaseContext;
+    public XInteractionHandler oInteractionHandler;
+    public XNameAccess xNameAccess;
+    public XInterface xDatabaseContext;
     public XDatabaseMetaData xDBMetaData;
     public XDataSource xDataSource;
     public XOfficeDatabaseDocument xModel;
-    private XCompletedConnection xCompleted;
+    public XCompletedConnection xCompleted;
     public XPropertySet xDataSourcePropertySet;
-    private int[] nDataTypes = null;
-    private XWindowPeer xWindowPeer;
+    public int[] nDataTypes = null;
+    public XWindowPeer xWindowPeer;
     public String[] DataSourceNames;
     public String[] CommandNames;
     public String[] TableNames = new String[] {};
@@ -126,17 +126,17 @@ public class DBMetaData {
     int iMaxColumnsInTable;
     int iMaxColumnNameLength = -1;
     int iMaxTableNameLength = -1;
-    private boolean bPasswordIsRequired;
-    private boolean bFormatKeysareset = false;
+    public boolean bPasswordIsRequired;
+    public boolean bFormatKeysareset = false;
     final int NOLIMIT = 9999999;
     final int RID_DB_COMMON = 1000;
     final int INVALID = 9999999;
     public TypeInspector oTypeInspector;
-    private PropertyValue[] aInfoPropertyValues = null;
-    private boolean bisSQL92CheckEnabled = false;
-    private NumberFormatter oNumberFormatter = null;
-    private long lDateCorrection = INVALID;
-    private boolean bdisposeConnection = false;
+    public PropertyValue[] aInfoPropertyValues = null;
+    public boolean bisSQL92CheckEnabled = false;
+    public NumberFormatter oNumberFormatter = null;
+    public long lDateCorrection = INVALID;
+    public boolean bdisposeConnection = false;
 
     public DBMetaData(XMultiServiceFactory xMSF) {
         getInterfaces(xMSF);
@@ -393,13 +393,13 @@ public class DBMetaData {
         return iMaxColumnsInGroupBy;
     }
 
-    private void setMaxColumnsInSelect() throws SQLException {
+    public void setMaxColumnsInSelect() throws SQLException {
         iMaxColumnsInSelect = xDBMetaData.getMaxColumnsInSelect();
         if (iMaxColumnsInSelect == 0)
             iMaxColumnsInSelect = this.NOLIMIT;
     }
 
-    private void setMaxColumnsInGroupBy() throws SQLException {
+    public void setMaxColumnsInGroupBy() throws SQLException {
         iMaxColumnsInGroupBy = xDBMetaData.getMaxColumnsInGroupBy();
         if (iMaxColumnsInGroupBy == 0)
             iMaxColumnsInGroupBy = this.NOLIMIT;
@@ -414,7 +414,7 @@ public class DBMetaData {
     }
 
 
-    private void getDataSourceObjects() throws Exception{
+    public void getDataSourceObjects() throws Exception{
     try {
         xDBMetaData = DBConnection.getMetaData();
         XChild xChild = (XChild) UnoRuntime.queryInterface(XChild.class, DBConnection);
@@ -452,7 +452,7 @@ public class DBMetaData {
     }
 
 
-    private void setDataSourceByName(String _DataSourceName, boolean bgetInterfaces) {
+    public void setDataSourceByName(String _DataSourceName, boolean bgetInterfaces) {
         try {
             this.DataSourceName = _DataSourceName;
             Object oDataSource = xNameAccess.getByName(DataSourceName);
@@ -534,13 +534,13 @@ public class DBMetaData {
     }
 
 
-    private boolean getConnection(String _DataSourceName) {
+    public boolean getConnection(String _DataSourceName) {
         setDataSourceByName(_DataSourceName, true);
         return getConnection(xDataSource);
     }
 
 
-    private boolean getConnection(com.sun.star.sdbc.XConnection _DBConnection){
+    public boolean getConnection(com.sun.star.sdbc.XConnection _DBConnection){
     try {
         this.DBConnection = _DBConnection;
         this.ConnectionTools = (XConnectionTools)UnoRuntime.queryInterface( XConnectionTools.class, this.DBConnection );
@@ -552,7 +552,7 @@ public class DBMetaData {
     }}
 
 
-    private boolean getConnection(XDataSource xDataSource){
+    public boolean getConnection(XDataSource xDataSource){
     Resource oResource = new Resource(xMSF, "Database", "dbw");
     try {
         int iMsg = 0;
@@ -793,7 +793,7 @@ public class DBMetaData {
     }
 
 
-    private String[] StringsFromResultSet(XResultSet _xResultSet, int _icol){
+    public String[] StringsFromResultSet(XResultSet _xResultSet, int _icol){
         String[] sColValues = null;
         try {
             XRow xRow = (XRow) UnoRuntime.queryInterface(XRow.class, _xResultSet);
--- wizards/com/sun/star/wizards/db/FieldColumn.java	2006-12-01 17:29:49.000000000 +0100
+++ wizards/com/sun/star/wizards/db/FieldColumn.java	2007-05-24 11:24:05.000000000 +0200
@@ -57,12 +57,12 @@ public class FieldColumn {
     public boolean bIsNumberFormat;
     public XPropertySet m_xColPropertySet;
     public int iType;
-    protected int iDateFormatKey;
-    protected int iDateTimeFormatKey;
-    protected int iNumberFormatKey;
-    protected int iTextFormatKey;
-    protected int iTimeFormatKey;
-    protected int iLogicalFormatKey;
+    public int iDateFormatKey;
+    public int iDateTimeFormatKey;
+    public int iNumberFormatKey;
+    public int iTextFormatKey;
+    public int iTimeFormatKey;
+    public int iLogicalFormatKey;
 
     public FieldColumn(CommandMetaData oCommandMetaData, String _DisplayFieldName) {
         DisplayFieldName = _DisplayFieldName;
@@ -100,7 +100,7 @@ public class FieldColumn {
     }
 
     
-    private String getFieldName(String _DisplayFieldName, String _CommandName){
+    public String getFieldName(String _DisplayFieldName, String _CommandName){
     	return _DisplayFieldName.substring(_CommandName.length()+1, _DisplayFieldName.length());
     }
         
@@ -109,7 +109,7 @@ public class FieldColumn {
         return _sCommandName + "." + _sFieldName;
     }
     
-    private void setFormatKeys(CommandMetaData oCommandMetaData, XNameAccess _xColumns){
+    public void setFormatKeys(CommandMetaData oCommandMetaData, XNameAccess _xColumns){
     try {
         m_xColPropertySet = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class, _xColumns.getByName(FieldName));
         ColIndex = JavaTools.FieldInList(_xColumns.getElementNames(), FieldName) + 1;
@@ -188,7 +188,7 @@ public class FieldColumn {
         return bIsBoolean;
     }
 
-    private Object getTyperelatedFieldData() {
+    public Object getTyperelatedFieldData() {
         try {
             FieldType = AnyConverter.toInt(m_xColPropertySet.getPropertyValue("Type"));
             switch (FieldType) {
@@ -298,7 +298,7 @@ public class FieldColumn {
         }
     }
 
-    private void getTextFieldWidth(int iWidth) {
+    public void getTextFieldWidth(int iWidth) {
         int iNewWidth = iWidth;
         try {
             FieldWidth = AnyConverter.toInt(m_xColPropertySet.getPropertyValue("Precision"));
--- wizards/com/sun/star/wizards/db/RecordParser.java	2006-12-01 17:30:14.000000000 +0100
+++ wizards/com/sun/star/wizards/db/RecordParser.java	2007-05-24 11:24:05.000000000 +0200
@@ -77,7 +77,7 @@ public class RecordParser extends QueryM
         getInterfaces();
     }
 
-    private void getInterfaces() {
+    public void getInterfaces() {
         try {
             xRowSet = (XInterface) xMSF.createInstance("com.sun.star.sdb.RowSet");
             xRowSetColumnsSupplier = (XColumnsSupplier) UnoRuntime.queryInterface(XColumnsSupplier.class, xRowSet);
@@ -90,7 +90,7 @@ public class RecordParser extends QueryM
         }
     }
 
-    private Object getColumnStringValue(int ColIndex) {
+    public Object getColumnStringValue(int ColIndex) {
         try {
             com.sun.star.uno.Type CurType;
             Object oAny;
@@ -104,7 +104,7 @@ public class RecordParser extends QueryM
         }
     }
 
-    private Object getColumnDoubleValue(int ColIndex, boolean bisDate) {
+    public Object getColumnDoubleValue(int ColIndex, boolean bisDate) {
         try {
             Double DblValue;
             if (bisDate)
@@ -239,7 +239,7 @@ public class RecordParser extends QueryM
     }}
 
     
-    private FieldColumn[] getFieldColumnList(String[] _FieldNames) {
+    public FieldColumn[] getFieldColumnList(String[] _FieldNames) {
         FieldColumn[] LocFieldColumns = new FieldColumn[_FieldNames.length];
         for (int i = 0; i < _FieldNames.length; i++) {
             LocFieldColumns[i] = super.getFieldColumnByFieldName(_FieldNames[i]);
--- wizards/com/sun/star/wizards/db/RelationController.java	2006-04-07 14:36:44.000000000 +0200
+++ wizards/com/sun/star/wizards/db/RelationController.java	2007-05-24 11:24:05.000000000 +0200
@@ -55,15 +55,15 @@ import com.sun.star.wizards.common.JavaT
  * Window - Preferences - Java - Code Style - Code Templates
  */
 public class RelationController extends CommandName {
-    private int  PKTABLE_CAT = 1;
-    private int  PKTABLE_SCHEM = 2;
-    private int  PKTABLE_NAME = 3;
-    private int  PKCOLUMN_NAME = 4;
+    public int  PKTABLE_CAT = 1;
+    public int  PKTABLE_SCHEM = 2;
+    public int  PKTABLE_NAME = 3;
+    public int  PKCOLUMN_NAME = 4;
 
-    private int  FKTABLE_CAT = 5;
-    private int  FKTABLE_SCHEM = 6;
-    private int  FKTABLE_NAME = 7;
-    private int  FKCOLUMN_NAME = 8;
+    public int  FKTABLE_CAT = 5;
+    public int  FKTABLE_SCHEM = 6;
+    public int  FKTABLE_NAME = 7;
+    public int  FKCOLUMN_NAME = 8;
     
     public RelationController(CommandMetaData _CommandMetaData, String _CatalogName, String _SchemaName, String _TableName, boolean _baddQuotation){
         super(_CommandMetaData, _CatalogName, _SchemaName, _TableName, _baddQuotation);
@@ -97,7 +97,7 @@ public class RelationController extends 
     return sReferencedTableNames;
     }
 
-    private Object getCatalogName(CommandName _oCommandName){
+    public Object getCatalogName(CommandName _oCommandName){
         String sLocCatalog = _oCommandName.getCatalogName(); 
         if (sLocCatalog.equals(""))
             return null;
--- wizards/com/sun/star/wizards/db/SQLQueryComposer.java	2006-07-06 16:16:25.000000000 +0200
+++ wizards/com/sun/star/wizards/db/SQLQueryComposer.java	2007-05-24 11:24:05.000000000 +0200
@@ -86,7 +86,7 @@ public class SQLQueryComposer {
         }
     }
 
-	private boolean addtoSelectClause(String DisplayFieldName) throws SQLException {
+	public boolean addtoSelectClause(String DisplayFieldName) throws SQLException {
         if (bincludeGrouping){
             if (CurDBMetaData.xDBMetaData.supportsGroupByUnrelated()) {
                 if (CurDBMetaData.GroupFieldNames != null) {
@@ -165,7 +165,7 @@ public class SQLQueryComposer {
         }
     }
 
-    private void appendSortingCriterion(int _SortIndex, boolean _baddAliasFieldNames ) throws SQLException{
+    public void appendSortingCriterion(int _SortIndex, boolean _baddAliasFieldNames ) throws SQLException{
   		XPropertySet xColumn = CurDBMetaData.getColumnObjectByFieldName(CurDBMetaData.SortFieldNames[_SortIndex][0], _baddAliasFieldNames);
     	boolean bascend = (CurDBMetaData.SortFieldNames[_SortIndex][1] == "ASC");
         xQueryComposer.appendOrderByColumn(xColumn, bascend);
@@ -203,7 +203,7 @@ public class SQLQueryComposer {
         this.CurDBMetaData = _oDBMetaData;
     }
 
-    private PropertyValue[][] replaceConditionsByAlias(PropertyValue _filterconditions[][]) {
+    public PropertyValue[][] replaceConditionsByAlias(PropertyValue _filterconditions[][]) {
         for (int n = 0; n < _filterconditions.length; n++) {
             for (int m = 0; m < _filterconditions[n].length; m++) {
                 _filterconditions[n][m].Name = getComposedAliasFieldName(_filterconditions[n][m].Name);
@@ -256,7 +256,7 @@ public class SQLQueryComposer {
     }
 
 
-    private String getComposedAliasFieldName(String _fieldname){
+    public String getComposedAliasFieldName(String _fieldname){
         FieldColumn CurFieldColumn = CurDBMetaData.getFieldColumnByDisplayName(_fieldname);
         CommandName curComposedCommandName = getComposedCommandByDisplayName(CurFieldColumn.getCommandName());
         String curAliasName = curComposedCommandName.getAliasName();
@@ -264,7 +264,7 @@ public class SQLQueryComposer {
     }
 
 
-    private CommandName getComposedCommandByAliasName(String _AliasName) {
+    public CommandName getComposedCommandByAliasName(String _AliasName) {
         if (composedCommandNames != null) {
             CommandName curComposedName;
             for (int i = 0; i < composedCommandNames.size(); i++) {
@@ -307,7 +307,7 @@ public class SQLQueryComposer {
     }
 
 
-    private String quoteName(String _sname){
+    public String quoteName(String _sname){
         return CommandName.quoteName(_sname, CurDBMetaData.getIdentifierQuote());
     }
 
--- wizards/com/sun/star/wizards/db/TableDescriptor.java	2006-12-01 17:30:27.000000000 +0100
+++ wizards/com/sun/star/wizards/db/TableDescriptor.java	2007-05-24 11:24:05.000000000 +0200
@@ -74,28 +74,28 @@ import com.sun.star.wizards.common.Prope
 public class TableDescriptor extends CommandMetaData  implements XContainerListener{
     XDataDescriptorFactory xTableDataDescriptorFactory;
     XPropertySet xPropTableDataDescriptor;
-    private XNameAccess xNameAccessColumns;
-    private XIndexAccess xIndexAccessKeys;
+    public XNameAccess xNameAccessColumns;
+    public XIndexAccess xIndexAccessKeys;
     
     public XDataDescriptorFactory xColumnDataDescriptorFactory;
     XContainer xTableContainer;
     XAppend xTableAppend;
     XDrop   xTableDrop;
-    private XAppend xKeyAppend;
-    private XDrop xKeyDrop;
-    private String[] sTableFilters = null;
-    private Vector columncontainer;
-    private Vector keycolumncontainer;
+    public XAppend xKeyAppend;
+    public XDrop xKeyDrop;
+    public String[] sTableFilters = null;
+    public Vector columncontainer;
+    public Vector keycolumncontainer;
     public XHierarchicalNameAccess xTableHierarchicalNameAccess;
-    private CommandName ComposedTableName;
-    private XAppend xKeyColAppend;
-    private XColumnsSupplier xKeyColumnSupplier;
-    private XPropertySet xKey;
-    private boolean bIDFieldisInserted = false;
-    private String IDFieldName = "";
-    private String sColumnAlreadyExistsMessage = "";
-    private WizardDialog oUnoDialog;
-    private XWindow xWindow;
+    public CommandName ComposedTableName;
+    public XAppend xKeyColAppend;
+    public XColumnsSupplier xKeyColumnSupplier;
+    public XPropertySet xKey;
+    public boolean bIDFieldisInserted = false;
+    public String IDFieldName = "";
+    public String sColumnAlreadyExistsMessage = "";
+    public WizardDialog oUnoDialog;
+    public XWindow xWindow;
         
         /**
          * @param xMSF
@@ -109,7 +109,7 @@ public class TableDescriptor extends Com
         }
 
         
-        private class ColumnDescriptor{
+        public class ColumnDescriptor{
             String Name;
             XPropertySet xColPropertySet;
 
@@ -144,7 +144,7 @@ public class TableDescriptor extends Com
         }
         
         
-        private void removePrimaryKeys(){
+        public void removePrimaryKeys(){
            if (keycolumncontainer.size() > 0){
                 for (int i = (keycolumncontainer.size()-1); i >= 0 ; i--){
                     keycolumncontainer.remove(i);
@@ -272,7 +272,7 @@ public class TableDescriptor extends Com
         }
         
         
-        private boolean removeAllColumnsFromDescriptor(String _tablename){
+        public boolean removeAllColumnsFromDescriptor(String _tablename){
             try {
                 xPropTableDataDescriptor.setPropertyValue("Name", "");
                 if ((xKeyDrop != null) && (xIndexAccessKeys != null)){
@@ -311,7 +311,7 @@ public class TableDescriptor extends Com
         }
         
         
-        private void assignTableProperty(String _spropname, String _svalue){
+        public void assignTableProperty(String _spropname, String _svalue){
             if (_svalue != null){
                 if (!_svalue.equals("")){
                     try {
@@ -415,7 +415,7 @@ public class TableDescriptor extends Com
         }
         
         
-        private boolean hasByName(String _fieldname){
+        public boolean hasByName(String _fieldname){
             try {
                 if (columncontainer.size() > 0){
                     for (int i = 0; i < columncontainer.size(); i++){
@@ -432,7 +432,7 @@ public class TableDescriptor extends Com
         }
 
 
-        private ColumnDescriptor getColumnDescriptorByName(String _fieldname){
+        public ColumnDescriptor getColumnDescriptorByName(String _fieldname){
             try {
                 if (this.columncontainer.size() > 0){
                     for (int i = 0; i < columncontainer.size(); i++){
@@ -458,7 +458,7 @@ public class TableDescriptor extends Com
         }
 
         
-        private XPropertySet getByIndex(int _index){
+        public XPropertySet getByIndex(int _index){
             try {
                 if (columncontainer.size() > _index){
                     ColumnDescriptor oColumnDescriptor = (ColumnDescriptor) columncontainer.get(_index);
--- wizards/com/sun/star/wizards/db/TypeInspector.java	2006-04-07 14:37:27.000000000 +0200
+++ wizards/com/sun/star/wizards/db/TypeInspector.java	2007-05-24 11:24:05.000000000 +0200
@@ -51,15 +51,15 @@ import com.sun.star.wizards.common.JavaT
 
 
 public class TypeInspector{
-    private String[] sDataTypeNames;
-    private int[] nDataTypeInfos;
-    private int[] nPrecisionInfos;
-    private int[] nNullableInfos;
-    private int[] nSearchables;
-    private boolean[] bisAutoIncrementableInfos;
-    private int[] nMinScaleInfos;
-    private int[] nMaxScaleInfos;
-    private int[] nNumericFallBackList  = new int[]{DataType.INTEGER, DataType.FLOAT, DataType.REAL, DataType.DOUBLE, DataType.NUMERIC, DataType.DECIMAL};
+    public String[] sDataTypeNames;
+    public int[] nDataTypeInfos;
+    public int[] nPrecisionInfos;
+    public int[] nNullableInfos;
+    public int[] nSearchables;
+    public boolean[] bisAutoIncrementableInfos;
+    public int[] nMinScaleInfos;
+    public int[] nMaxScaleInfos;
+    public int[] nNumericFallBackList  = new int[]{DataType.INTEGER, DataType.FLOAT, DataType.REAL, DataType.DOUBLE, DataType.NUMERIC, DataType.DECIMAL};
     final int INVALID = 999999;     
     XResultSet xResultSet;
     
@@ -177,7 +177,7 @@ public class TypeInspector{
     }
 
     
-    private int getDataTypeIndex(XPropertySet _xColPropertySet, boolean _bCheckNumericAttributes){
+    public int getDataTypeIndex(XPropertySet _xColPropertySet, boolean _bCheckNumericAttributes){
         try {
             int nPrecision = -1;
             int nScale = -1;
--- wizards/com/sun/star/wizards/document/Control.java	2006-04-07 14:37:39.000000000 +0200
+++ wizards/com/sun/star/wizards/document/Control.java	2007-05-24 11:24:05.000000000 +0200
@@ -69,8 +69,8 @@ public class Control extends Shape{
     XNamed xNamed;
     final int SOMAXTEXTSIZE = 50;
     int icontroltype;
-    protected XNameContainer xFormName;
-    protected final int IIMGFIELDWIDTH = 2000;
+    public XNameContainer xFormName;
+    public final int IIMGFIELDWIDTH = 2000;
         
         
     public Control(){
@@ -169,7 +169,7 @@ public class Control extends Shape{
     }
     
 
-    private void setDefaultValue(Object DatabaseField){
+    public void setDefaultValue(Object DatabaseField){
         oDefaultValue = Helper.getUnoPropertyValue(DatabaseField, "DefaultValue");
     }
 
--- wizards/com/sun/star/wizards/document/DatabaseControl.java	2006-12-01 17:30:40.000000000 +0100
+++ wizards/com/sun/star/wizards/document/DatabaseControl.java	2007-05-24 11:24:05.000000000 +0200
@@ -56,10 +56,10 @@ import com.sun.star.wizards.db.FieldColu
  * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
  */
 public class DatabaseControl extends Control {
-    protected int ifieldtype;
-    private int iMemofieldwidth = IIMGFIELDWIDTH;
-    private int iMemofieldheight = -1;
-    private FieldColumn m_FieldColumn;
+    public int ifieldtype;
+    public int iMemofieldwidth = IIMGFIELDWIDTH;
+    public int iMemofieldheight = -1;
+    public FieldColumn m_FieldColumn;
 
 
     public DatabaseControl(GridControl _oGridControl, FieldColumn _curfieldcolumn){
@@ -77,7 +77,7 @@ public class DatabaseControl extends Con
     }
 
 
-    private void createGridColumn(GridControl _oGridControl, FieldColumn _curfieldcolumn, int _fieldtype, String _columntitle){
+    public void createGridColumn(GridControl _oGridControl, FieldColumn _curfieldcolumn, int _fieldtype, String _columntitle){
     try {
         ifieldtype = _fieldtype;
         String suniqueName = Desktop.getUniqueName(_oGridControl.xNameAccess, _curfieldcolumn.FieldName);
@@ -121,7 +121,7 @@ public class DatabaseControl extends Con
     }}
 
 
-    private String getGridColumnName(){
+    public String getGridColumnName(){
         for (int i = 0; i < FormHandler.oControlData.length; i++){
             if (FormHandler.oControlData[i].DataType == this.ifieldtype)
                 return FormHandler.oControlData[i].GridColumnName;
--- wizards/com/sun/star/wizards/document/FormHandler.java	2006-04-07 14:38:16.000000000 +0200
+++ wizards/com/sun/star/wizards/document/FormHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -78,7 +78,7 @@ public class FormHandler {
     public XMultiServiceFactory xMSFDoc;
     public XMultiServiceFactory xMSF;
     public XDrawPage xDrawPage;
-    private XDrawPageSupplier xDrawPageSupplier;
+    public XDrawPageSupplier xDrawPageSupplier;
     public String[] sModelServices = new String[8];
     public XNameContainer xNamedForm;
     public static ControlData[] oControlData;
--- wizards/com/sun/star/wizards/document/OfficeDocument.java	2006-04-07 14:38:48.000000000 +0200
+++ wizards/com/sun/star/wizards/document/OfficeDocument.java	2007-05-24 11:24:05.000000000 +0200
@@ -72,8 +72,8 @@ import com.sun.star.util.XCloseable;
 import com.sun.star.util.XModifiable;
 
 public class OfficeDocument {
-    private XWindowPeer xWindowPeer;
-    private XMultiServiceFactory xMSF;
+    public XWindowPeer xWindowPeer;
+    public XMultiServiceFactory xMSF;
     
 
     /** Creates a new instance of OfficeDocument */
--- wizards/com/sun/star/wizards/document/Shape.java	2006-07-06 16:16:43.000000000 +0200
+++ wizards/com/sun/star/wizards/document/Shape.java	2007-05-24 11:24:05.000000000 +0200
@@ -56,11 +56,11 @@ import com.sun.star.wizards.common.JavaT
  */
 public class Shape {
     public XShape xShape;
-    protected FormHandler oFormHandler; 
+    public FormHandler oFormHandler; 
     public XServiceInfo xServiceInfo;   
-    protected Point aPoint; 
-    protected Size aSize;
-    protected XControlShape xControlShape;
+    public Point aPoint; 
+    public Size aSize;
+    public XControlShape xControlShape;
     public XMultiServiceFactory xMSF;
     public XShapes xShapes;
 
@@ -91,7 +91,7 @@ public class Shape {
     }
     
 
-    private void createShape(String sServiceName){
+    public void createShape(String sServiceName){
     try {
         xMSF = oFormHandler.xMSFDoc;
         Object oShape = xMSF.createInstance(sServiceName);
--- wizards/com/sun/star/wizards/fax/CallWizard.java	2006-04-07 14:39:55.000000000 +0200
+++ wizards/com/sun/star/wizards/fax/CallWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -102,12 +102,12 @@ public class CallWizard {
         /**
          * The service name, that must be used to get an instance of this service.
          */
-        private static final String __serviceName = "com.sun.star.wizards.fax.CallWizard";
+        public static final String __serviceName = "com.sun.star.wizards.fax.CallWizard";
 
         /**
          * The service manager, that gives access to all registered services.
          */
-        private XMultiServiceFactory xmultiservicefactory;
+        public XMultiServiceFactory xmultiservicefactory;
 
         /**
          * This method is a member of the interface for initializing an object directly
--- wizards/com/sun/star/wizards/fax/FaxWizardDialogImpl.java	2006-10-04 22:09:22.000000000 +0200
+++ wizards/com/sun/star/wizards/fax/FaxWizardDialogImpl.java	2007-05-24 11:24:05.000000000 +0200
@@ -54,7 +54,7 @@ public class FaxWizardDialogImpl extends
     String sPath;
     boolean bEditTemplate;
     boolean bSaveSuccess = false;
-    private boolean filenameChanged = false;
+    public boolean filenameChanged = false;
     
     final static int RM_TYPESTYLE = 1;
     final static int RM_ELEMENTS = 2;
@@ -256,7 +256,7 @@ public class FaxWizardDialogImpl extends
         setCurrentRoadmapItemID((short) 1);
     }
     
-    private class myPathSelectionListener implements XPathSelectionListener {
+    public class myPathSelectionListener implements XPathSelectionListener {
         public void validatePath() {
             if (myPathSelection.usedPathPicker) {
                 filenameChanged = true;             
@@ -274,7 +274,7 @@ public class FaxWizardDialogImpl extends
         myPathSelection.addSelectionListener(new myPathSelectionListener());
     }
     
-    private void insertIcons() {
+    public void insertIcons() {
         try {
             Object oGS = xMSF.createInstance("com.sun.star.graphic.GraphicProvider");
             XGraphicProvider xGraphicProvider = (XGraphicProvider) UnoRuntime.queryInterface(XGraphicProvider.class, oGS);
@@ -292,12 +292,12 @@ public class FaxWizardDialogImpl extends
         
     }
     
-    private void updateUI() {
+    public void updateUI() {
         UnoDataAware.updateUI(mainDA);
         UnoDataAware.updateUI(faxDA);
     }
     
-    private void initializePaths() {
+    public void initializePaths() {
         try {
             sTemplatePath = FileAccess.getOfficePath(xMSF, "Template", "share", "/wizard");
             sUserTemplatePath = FileAccess.getOfficePath(xMSF, "Template", "user", "");
@@ -349,7 +349,7 @@ public class FaxWizardDialogImpl extends
         setControlProperty("lstCommunicationType", "StringItemList", resources.CommunicationLabels);
     }
     
-    private void setDefaultForGreetingAndSalutationAndCommunication() {
+    public void setDefaultForGreetingAndSalutationAndCommunication() {
         XTextComponent xTextComponent;
         xTextComponent = (XTextComponent) UnoRuntime.queryInterface(XTextComponent.class, lstSalutation);
         if (xTextComponent.getText().equals("")) {
@@ -664,7 +664,7 @@ public class FaxWizardDialogImpl extends
     public void lstGreetingTextChanged() {      
     }
     
-    private void setPossibleFooter(boolean bState) {
+    public void setPossibleFooter(boolean bState) {
         setControlProperty("chkUseFooter", "Enabled", new Boolean(bState));
         if (!bState) {
             chkUseFooter.setState((short) 0);
@@ -672,12 +672,12 @@ public class FaxWizardDialogImpl extends
         chkUseFooterItemChanged();
     }
 
-    private void enableSenderReceiver() {
+    public void enableSenderReceiver() {
         XInterface BPaperItem = getRoadmapItemByID(RM_SENDERRECEIVER);
         Helper.setUnoPropertyValue(BPaperItem, "Enabled", Boolean.TRUE);
     }
     
-    private void disableSenderReceiver() {
+    public void disableSenderReceiver() {
         XInterface BPaperItem = getRoadmapItemByID(RM_SENDERRECEIVER);
         Helper.setUnoPropertyValue(BPaperItem, "Enabled", Boolean.FALSE);
     }
--- wizards/com/sun/star/wizards/fax/FaxWizardDialogResources.java	2006-04-07 14:40:52.000000000 +0200
+++ wizards/com/sun/star/wizards/fax/FaxWizardDialogResources.java	2007-05-24 11:24:05.000000000 +0200
@@ -13,10 +13,10 @@ public class FaxWizardDialogResources ex
     final static int RID_FAXWIZARDROADMAP_START = 3300;
     final static int RID_RID_COMMON_START = 500;
     
-    protected String[] RoadmapLabels = new String[7];
-    protected String[] SalutationLabels = new String[4];
-    protected String[] GreetingLabels = new String[4];
-    protected String[] CommunicationLabels = new String[3];
+    public String[] RoadmapLabels = new String[7];
+    public String[] SalutationLabels = new String[4];
+    public String[] GreetingLabels = new String[4];
+    public String[] CommunicationLabels = new String[3];
     
     String resOverwriteWarning;
     String resTemplateDescription;
@@ -115,32 +115,32 @@ public class FaxWizardDialogResources ex
         loadCommonResources();
     }
     
-    private void loadCommonResources() {
+    public void loadCommonResources() {
         resOverwriteWarning = getResText(RID_RID_COMMON_START + 19);
         resTemplateDescription = getResText(RID_RID_COMMON_START + 20);
     }
     
-    private void loadRoadmapResources() {
+    public void loadRoadmapResources() {
         for (int i = 1; i < 6; i++) {
             RoadmapLabels[i] = getResText(RID_FAXWIZARDROADMAP_START + i);
         }
     }
     
-    private void loadSalutationResources() {
+    public void loadSalutationResources() {
         for (int i = 1; i < 5; i++) {
             SalutationLabels[i - 1] = getResText(RID_FAXWIZARDSALUTATION_START
                     + i);
         }
     }
     
-    private void loadGreetingResources() {
+    public void loadGreetingResources() {
         for (int i = 1; i < 5; i++) {
             GreetingLabels[i - 1] = getResText(RID_FAXWIZARDGREETING_START
                     + i);
         }
     }
     
-    private void loadCommunicationResources() {
+    public void loadCommunicationResources() {
         for (int i = 1; i < 4; i++) {
             CommunicationLabels[i - 1] = getResText(RID_FAXWIZARDCOMMUNICATION_START
                     + i);
--- wizards/com/sun/star/wizards/form/CallFormWizard.java	2006-04-07 14:41:10.000000000 +0200
+++ wizards/com/sun/star/wizards/form/CallFormWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -117,11 +117,11 @@ public class CallFormWizard {
 
         /** The service name, that must be used to get an instance of this service.
          */
-        private static final String __serviceName = "com.sun.star.wizards.form.CallFormWizard";
+        public static final String __serviceName = "com.sun.star.wizards.form.CallFormWizard";
 
         /** The service manager, that gives access to all registered services.
          */
-        private com.sun.star.lang.XMultiServiceFactory xmultiservicefactory;
+        public com.sun.star.lang.XMultiServiceFactory xmultiservicefactory;
 
         /** This method is a member of the interface for initializing an object
          * directly after its creation.
--- wizards/com/sun/star/wizards/form/FieldLinker.java	2006-04-07 14:41:41.000000000 +0200
+++ wizards/com/sun/star/wizards/form/FieldLinker.java	2007-05-24 11:24:05.000000000 +0200
@@ -78,7 +78,7 @@ public class FieldLinker extends DBLimit
     }
 
     
-    protected void insertControlGroup(int i){
+    public void insertControlGroup(int i){
     try {
         if (i == 0){
             lblSlaveFields = new XFixedText[rowcount];
@@ -117,7 +117,7 @@ public class FieldLinker extends DBLimit
     }}
     
 
-    protected void enableNextControlRow(int curindex) {
+    public void enableNextControlRow(int curindex) {
         setMaxSelIndex();
         boolean bDoEnable = ((lstSlaveFields[curindex].getSelectedItemPos() > 0) && (lstMasterFields[curindex].getSelectedItemPos() > 0));
         if (!bDoEnable)
@@ -127,7 +127,7 @@ public class FieldLinker extends DBLimit
     }
     
     
-    protected void setMaxSelIndex(){
+    public void setMaxSelIndex(){
         MaxSelIndex = -1;
         for (int i = 0; i < rowcount; i++) {
             if ((lstSlaveFields[i].getSelectedItemPos() > 0) && (lstMasterFields[i].getSelectedItemPos() > 0))
@@ -136,7 +136,7 @@ public class FieldLinker extends DBLimit
     }
     
     
-    protected void toggleControlRow(int i, boolean bDoEnable){
+    public void toggleControlRow(int i, boolean bDoEnable){
         if (i < rowcount) {
             Helper.setUnoPropertyValue(UnoDialog.getModel(lblSlaveFields[i]), "Enabled", new Boolean(bDoEnable));
             Helper.setUnoPropertyValue(UnoDialog.getModel(lstSlaveFields[i]), "Enabled", new Boolean(bDoEnable));
@@ -150,7 +150,7 @@ public class FieldLinker extends DBLimit
     }
     
     
-    protected void updateFromNextControlRow(int curindex){
+    public void updateFromNextControlRow(int curindex){
         short iNextMasterItemPos = lstMasterFields[curindex + 1].getSelectedItemPos();
         short iNextSlaveItemPos = lstSlaveFields[curindex + 1].getSelectedItemPos();
 
--- wizards/com/sun/star/wizards/form/FormConfiguration.java	2006-04-07 14:42:18.000000000 +0200
+++ wizards/com/sun/star/wizards/form/FormConfiguration.java	2007-05-24 11:24:05.000000000 +0200
@@ -176,7 +176,7 @@ public class FormConfiguration {
         CurUnoDialog.enablefromStep(FormWizard.SOSUBFORMFIELDSPAGE, false);                 
     }
 
-    private void toggleRelationsListbox(){
+    public void toggleRelationsListbox(){
         boolean bdoenable = bsupportsRelations &&  this.optOnExistingRelation.getState() && (chkcreateSubForm.getState() == 1);
         Helper.setUnoPropertyValue(UnoDialog.getModel(lblRelations), "Enabled", new Boolean(bdoenable));
         Helper.setUnoPropertyValue(UnoDialog.getModel(lstRelations), "Enabled", new Boolean(bdoenable));                
--- wizards/com/sun/star/wizards/form/FormControlArranger.java	2006-08-22 16:19:36.000000000 +0200
+++ wizards/com/sun/star/wizards/form/FormControlArranger.java	2007-05-24 11:24:05.000000000 +0200
@@ -58,8 +58,8 @@ public class FormControlArranger {
     XMultiServiceFactory xMSF;
     public DatabaseControl[] DBControlList = null;
     public Control[] LabelControlList = null;
-    private XStatusIndicator xProgressBar;
-    private FieldColumn[] FieldColumns; 
+    public XStatusIndicator xProgressBar;
+    public FieldColumn[] FieldColumns; 
     DatabaseControl curDBControl;
     Control curLabelControl;
     int icurArrangement;
@@ -110,7 +110,7 @@ public class FormControlArranger {
     
     // Note: on all Controls except for the checkbox the Label has to be set
     // a bit under the DBControl because its Height is also smaller 
-    private int getLabelDiffHeight(int _index){
+    public int getLabelDiffHeight(int _index){
         if (curDBControl != null){
             if (curDBControl.getControlType() == FormHandler.SOCHECKBOX)
                 return getCheckBoxDiffHeight(_index);
@@ -124,7 +124,7 @@ public class FormControlArranger {
     }
     
     
-    private int getCheckBoxDiffHeight(int LastIndex){
+    public int getCheckBoxDiffHeight(int LastIndex){
         if ((LastIndex < DBControlList.length)){
             if (DBControlList[LastIndex].getControlType() == FormHandler.SOCHECKBOX){
                 return (int)((oFormHandler.getDBRefHeight() - DBControlList[LastIndex].getDBHeight())/2);
@@ -134,7 +134,7 @@ public class FormControlArranger {
     }
 
     
-    private boolean isReducable(int _index){
+    public boolean isReducable(int _index){
         boolean bisreducable = false;
         int ntype = this.FieldColumns[_index].FieldType;
         switch(ntype)
@@ -176,7 +176,7 @@ public class FormControlArranger {
     }
         
     
-    private int getControlGroupWidth(){
+    public int getControlGroupWidth(){
         if (nDBWidth > nTCWidth)
             return nDBWidth;
         else
@@ -184,7 +184,7 @@ public class FormControlArranger {
     }
     
 
-    private void checkJustifiedPosition(int a){
+    public void checkJustifiedPosition(int a){
         int nBaseWidth = nFormWidth + cXOffset;
         int nLeftDist = nMaxColRightX - nBaseWidth;
         int nRightDist = nBaseWidth - (DBControlList[a].getPosition().X - this.cHoriDistance);
@@ -226,7 +226,7 @@ public class FormControlArranger {
     }
 
 
-    private int getCorrWidth(int StartIndex , int EndIndex , int nDist, int Widthfactor ){ 
+    public int getCorrWidth(int StartIndex , int EndIndex , int nDist, int Widthfactor ){ 
     int ShapeCount; 
         if (Widthfactor > 0){
             // shapes are made wide
@@ -247,7 +247,7 @@ public class FormControlArranger {
      * @param nDist
      * @param WidthFactor is either '+1' or '-1' and determines whether the control shapes widths are to be made smaller or larger
      */
-    private void adjustLineWidth(int StartIndex , int EndIndex , int nDist, int WidthFactor ){
+    public void adjustLineWidth(int StartIndex , int EndIndex , int nDist, int WidthFactor ){
         int CorrWidth = getCorrWidth(StartIndex, EndIndex, nDist, WidthFactor);
         int iLocTCPosX = cXOffset;
         for (int i = StartIndex; i <= EndIndex; i++){
@@ -284,7 +284,7 @@ public class FormControlArranger {
 
     
 
-    private void checkOuterPoints(int nXPos, int nWidth, int nYPos, int nHeight, boolean bIsDBField){
+    public void checkOuterPoints(int nXPos, int nWidth, int nYPos, int nHeight, boolean bIsDBField){
         int nColRightX;
         if (icurArrangement == FormWizard.SOTOPJUSTIFIED){
             if (bIsDBField){
@@ -352,14 +352,14 @@ public class FormControlArranger {
     }
     
 
-    private void initializeControlColumn(int LastIndex){
+    public void initializeControlColumn(int LastIndex){
         bIsFirstRun = true;
         StartA = LastIndex + 1;
         a = 0;
     }
 
 
-    private void resetPosSizes(int LastIndex){
+    public void resetPosSizes(int LastIndex){
         int nYRefPos = nYDBPos;
         switch (icurArrangement){
             case FormWizard.SOCOLUMNARLEFT:
@@ -418,7 +418,7 @@ public class FormControlArranger {
 
 
 
-    private void repositionColumnarLeftControls(int LastIndex ){
+    public void repositionColumnarLeftControls(int LastIndex ){
         bIsFirstRun = true;
         for (int i = StartA; i <= LastIndex; i++){
             if (i == StartA){
@@ -432,7 +432,7 @@ public class FormControlArranger {
     }
 
 
-    private void resetDBShape(Shape _curDBControl, int iXPos){
+    public void resetDBShape(Shape _curDBControl, int iXPos){
         int nYDBPos = _curDBControl.getPosition().Y;
         nDBWidth = _curDBControl.getSize().Width;
         nDBHeight = _curDBControl.getSize().Height;
@@ -440,7 +440,7 @@ public class FormControlArranger {
     }
 
 
-    private void initializePosSizes(){
+    public void initializePosSizes(){
         this.nMaxDBYPos = 0;
         nXTCPos = cXOffset;
         nTCWidth = 2000;
@@ -460,7 +460,7 @@ public class FormControlArranger {
     }
 
 
-    private void insertLabel(int i, int _iAlign){
+    public void insertLabel(int i, int _iAlign){
     try {
         if (bControlsareCreated){
             LabelControlList[i].setPosition(new Point(nXTCPos, nYTCPos));
@@ -510,7 +510,7 @@ public class FormControlArranger {
     }}
 
 
-    private void insertDBControl(int i ){
+    public void insertDBControl(int i ){
     try {
         Point aPoint = new Point(nXDBPos, nYDBPos);
         if (bControlsareCreated)
@@ -541,7 +541,7 @@ public class FormControlArranger {
     }}
 
 
-    private int assignFieldLength(int _fieldlength){
+    public int assignFieldLength(int _fieldlength){
         if (_fieldlength >= 65535)
             return  -1;
         else
--- wizards/com/sun/star/wizards/form/FormDocument.java	2007-04-16 18:52:19.000000000 +0200
+++ wizards/com/sun/star/wizards/form/FormDocument.java	2007-05-24 11:24:05.000000000 +0200
@@ -66,16 +66,16 @@ public class FormDocument extends TextDo
     public TextStyleHandler oTextStyleHandler;
     public XPropertySet xPropPageStyle;
     public final int SOSYMBOLMARGIN = 2000;
-    private final int SOFORMGAP = 2000;
+    public final int SOFORMGAP = 2000;
     public Vector oControlForms = new Vector();
     public CommandMetaData oMainFormDBMetaData;
     public CommandMetaData oSubFormDBMetaData;
-    private boolean bhasSubForm;
-    private UIControlArranger curUIControlArranger;
+    public boolean bhasSubForm;
+    public UIControlArranger curUIControlArranger;
     public StyleApplier curStyleApplier;
     public String[][] LinkFieldNames;
     public XModel xModel;
-    private String sMsgEndAutopilot;
+    public String sMsgEndAutopilot;
     int MainFormStandardHeight;
     int nPageWidth;
     int nPageHeight;
@@ -88,7 +88,7 @@ public class FormDocument extends TextDo
     final static String SOMAINFORM = "MainForm";
     final static String SOSUBFORM = "SubForm";
 
-    private final static PropertyValue MODULE_IDENTIFIER = new PropertyValue( "ModuleIdentifier", -1, "com.sun.star.sdb.FormDesign", com.sun.star.beans.PropertyState.DIRECT_VALUE );
+    public final static PropertyValue MODULE_IDENTIFIER = new PropertyValue( "ModuleIdentifier", -1, "com.sun.star.sdb.FormDesign", com.sun.star.beans.PropertyState.DIRECT_VALUE );
 
     public FormDocument(XMultiServiceFactory xMSF, Resource oResource) {
     super(xMSF, new PropertyValue[]{ MODULE_IDENTIFIER }, true, null);
@@ -121,11 +121,11 @@ public class FormDocument extends TextDo
         this.curStyleApplier = _curStyleApplier;
     }
 
-    private String getDataSourceName(){
+    public String getDataSourceName(){
         return this.oMainFormDBMetaData.DataSourceName;
     }
 
-    private void adjustPageStyle(){
+    public void adjustPageStyle(){
     try {
         int nMargin;
         totfieldcount = getTotFieldCount();
@@ -183,14 +183,14 @@ public class FormDocument extends TextDo
     }
 
 
-    private int getTotFieldCount(){
+    public int getTotFieldCount(){
 		nMainFormFieldCount = oMainFormDBMetaData.getFieldNames().length;
 		totfieldcount = nMainFormFieldCount + oSubFormDBMetaData.getFieldNames().length;
         return totfieldcount;
     }
 
 
-    private Size getMainFormSize(int _curArrangement){
+    public Size getMainFormSize(int _curArrangement){
         int nMainFormHeight = nFormHeight;
         if (bhasSubForm){
             if (_curArrangement == FormWizard.SOGRID)
@@ -206,7 +206,7 @@ public class FormDocument extends TextDo
     }
 
 
-    private Size getSubFormSize(){
+    public Size getSubFormSize(){
 //      int nSubFormHeight = (int) ((double)nFormHeight/2) - SOFORMGAP;
 //      int nSubFormFieldCount = this.oSubFormDBMetaData.FieldNames.length;
 //      int totfieldcount = oMainFormDBMetaData.FieldNames.length + nSubFormFieldCount;
@@ -215,14 +215,14 @@ public class FormDocument extends TextDo
         return aSubFormSize;
     }
 
-    private Point getSubFormPoint(){
+    public Point getSubFormPoint(){
         ControlForm curMainControlForm = ((ControlForm) oControlForms.get(0));
         return new Point(curMainControlForm.aStartPoint.X,
                         (curMainControlForm.aStartPoint.Y + curMainControlForm.getFormSize().Height +  SOFORMGAP));
     }
 
 
-    private void adjustMainFormSize(Short _NBorderType){
+    public void adjustMainFormSize(Short _NBorderType){
         ControlForm oMainControlForm = (ControlForm) oControlForms.get(0);
         oMainControlForm.setFormSize(getMainFormSize(oMainControlForm.curArrangement));
         if (oMainControlForm.curArrangement == FormWizard.SOGRID)
@@ -235,7 +235,7 @@ public class FormDocument extends TextDo
     }
 
 
-    private void adjustSubFormPosSize(Short _NBorderType){
+    public void adjustSubFormPosSize(Short _NBorderType){
         ControlForm oMainControlForm = (ControlForm) oControlForms.get(0);
         ControlForm oSubControlForm = (ControlForm) oControlForms.get(1);
         oSubControlForm.setFormSize(new Size(nFormWidth, (int)nFormHeight - oMainControlForm.getFormSize().Height));
@@ -313,7 +313,7 @@ public class FormDocument extends TextDo
         FormDocument oFormDocument;
         String Name;
         Point aStartPoint;
-        private Size aFormSize;
+        public Size aFormSize;
         CommandMetaData oDBMetaData;
         XPropertySet xPropertySet;
 
@@ -385,7 +385,7 @@ public class FormDocument extends TextDo
             return aFormSize;
         }
 
-        private Size getAvailableFormSize(){
+        public Size getAvailableFormSize(){
             if (this.Name.equals(SOMAINFORM))
                 setFormSize(getMainFormSize(curArrangement));
             else
@@ -399,13 +399,13 @@ public class FormDocument extends TextDo
         }
 
 
-        private void setStartPoint(Point _aPoint){
+        public void setStartPoint(Point _aPoint){
             aStartPoint = _aPoint;
             if (oFormController != null)
                 oFormController.setStartPoint(_aPoint);
         }
 
-        private int getActualFormHeight(){
+        public int getActualFormHeight(){
             if (curArrangement == FormWizard.SOGRID)
                 return oGridControl.xShape.getSize().Height;
             else
@@ -413,7 +413,7 @@ public class FormDocument extends TextDo
         }
 
 
-        private int getEntryPointY(){
+        public int getEntryPointY(){
             if (curArrangement == FormWizard.SOGRID)
                 return oGridControl.xShape.getPosition().Y;
             else
@@ -421,7 +421,7 @@ public class FormDocument extends TextDo
         }
 
 
-        private void setFormProperties(PropertyValue[] _aPropertySetList, CommandMetaData _oDBMetaData){
+        public void setFormProperties(PropertyValue[] _aPropertySetList, CommandMetaData _oDBMetaData){
         try {
             xPropertySet.setPropertyValue("DataSourceName", getDataSourceName());
             xPropertySet.setPropertyValue("Command", _oDBMetaData.getCommandName());
@@ -448,7 +448,7 @@ public class FormDocument extends TextDo
             return curArrangement;
         }
 
-        private void insertGridControl(Short _NBorderType){
+        public void insertGridControl(Short _NBorderType){
         try {
 			curArrangement = FormWizard.SOGRID;
 			if (Name.equals(SOMAINFORM))
--- wizards/com/sun/star/wizards/form/FormWizard.java	2007-04-16 18:52:35.000000000 +0200
+++ wizards/com/sun/star/wizards/form/FormWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -99,7 +99,7 @@ public class FormWizard extends WizardDi
     }
 
 
-    protected void enterStep(int nOldStep, int nNewStep) {
+    public void enterStep(int nOldStep, int nNewStep) {
     try {
         if ((nOldStep < SOCONTROLPAGE) && (nNewStep >= SOCONTROLPAGE)){
             curFormDocument.initialize(curDBCommandFieldSelection.isModified(), curFormConfiguration.hasSubForm(), curSubFormFieldSelection.isModified(), getBorderType());
@@ -138,11 +138,11 @@ public class FormWizard extends WizardDi
         e.printStackTrace(System.out);
     }}
 
-    protected Short getBorderType(){
+    public Short getBorderType(){
     	return curStyleApplier.getBorderType();
     }
 
-    protected void leaveStep(int nOldStep, int nNewStep){
+    public void leaveStep(int nOldStep, int nNewStep){
          switch (nOldStep){
             case SOMAINPAGE:
 //				curFormDocument.oMainFormDBMetaData.setFieldNames(curDBCommandFieldSelection.getSelectedFieldNames());
@@ -325,7 +325,7 @@ public class FormWizard extends WizardDi
 
 
     public class FieldSelectionListener implements com.sun.star.wizards.ui.XFieldSelectionListener{
-         protected int ID;
+         public int ID;
 
          public int getID(){
              return ID;
@@ -368,7 +368,7 @@ public class FormWizard extends WizardDi
          public void moveItemUp(String item){
          }
 
-         private boolean toggleSubFormSteps(){
+         public boolean toggleSubFormSteps(){
             curSubFormFieldSelection.setModified(true);
             boolean benable = curSubFormFieldSelection.getSelectedFieldNames().length > 0;
             enablefromStep(SOFIELDLINKERPAGE, benable);
@@ -377,7 +377,7 @@ public class FormWizard extends WizardDi
             return benable;
          }
 
-        private void toggleMainFormSteps(){
+        public void toggleMainFormSteps(){
             curDBCommandFieldSelection.setModified(true);
             boolean benable = curDBCommandFieldSelection.getSelectedFieldNames().length > 0;
             enablefromStep(SOSUBFORMPAGE, benable);
--- wizards/com/sun/star/wizards/form/StyleApplier.java	2006-07-13 14:14:43.000000000 +0200
+++ wizards/com/sun/star/wizards/form/StyleApplier.java	2007-05-24 11:24:05.000000000 +0200
@@ -155,7 +155,7 @@ public class StyleApplier{
 */  
     
     
-    private void setStyles(){   
+    public void setStyles(){   
     try {
         Object oRootNode = Configuration.getConfigurationRoot(xMSF, "org.openoffice.Office.FormWizard/FormWizard/Styles", false);
         XNameAccess xNameAccess = (XNameAccess) UnoRuntime.queryInterface(XNameAccess.class, oRootNode);
@@ -172,7 +172,7 @@ public class StyleApplier{
     }}
     
     
-    private short getStyleIndex(){
+    public short getStyleIndex(){
     try {
         short[] SelFields = (short[]) AnyConverter.toArray(Helper.getUnoPropertyValue(UnoDialog.getModel(lstStyles), "SelectedItems"));
         if (SelFields != null)
@@ -266,7 +266,7 @@ public class StyleApplier{
     }   
     
     
-    private int getStyleColor(String[] _sDataList, String _sHeader, String _sPropertyDescription){
+    public int getStyleColor(String[] _sDataList, String _sHeader, String _sPropertyDescription){
         int iColor = -1;
         int index = JavaTools.FieldInList(_sDataList, _sHeader);
         if (index > -1){
@@ -292,7 +292,7 @@ public class StyleApplier{
     }
 
     
-    private int[] getStyleColors(String _filename){
+    public int[] getStyleColors(String _filename){
         String sFilePath = this.StylesPath + "/" + _filename;
         int[] oStylePropList = new int[6];
         String[] sData = FileAccess.getDataFromTextFile(xMSF, sFilePath);
@@ -307,7 +307,7 @@ public class StyleApplier{
     
     
         
-    private void setDBControlColors(XPropertySet xPropertySet, int[] _iStyleColors){
+    public void setDBControlColors(XPropertySet xPropertySet, int[] _iStyleColors){
         try {
             if (xPropertySet.getPropertySetInfo().hasPropertyByName("TextColor")){
                 if (_iStyleColors[SODBTEXTCOLOR] > -1)
--- wizards/com/sun/star/wizards/form/UIControlArranger.java	2006-07-06 16:20:53.000000000 +0200
+++ wizards/com/sun/star/wizards/form/UIControlArranger.java	2007-05-24 11:24:05.000000000 +0200
@@ -116,7 +116,7 @@ public class UIControlArranger {
     }
 
 
-    private class LayoutRenderer implements ImageList.ImageRenderer {
+    public class LayoutRenderer implements ImageList.ImageRenderer {
         public Object[] getImageUrls(Object listitem) {
             
             int ResId = UIConsts.RID_IMG_FORM + (2 * ((Integer)listitem).intValue());
@@ -168,14 +168,14 @@ public class UIControlArranger {
     }}
 
 
-    private void enableAlignControlGroup(boolean _bEnableAlignControlGroup){
+    public void enableAlignControlGroup(boolean _bEnableAlignControlGroup){
         Helper.setUnoPropertyValue(UnoDialog.getModel(flnLabelPlacement), "Enabled", new Boolean(_bEnableAlignControlGroup));
         Helper.setUnoPropertyValue(UnoDialog.getModel(optAlignLeft), "Enabled", new Boolean(_bEnableAlignControlGroup));
         Helper.setUnoPropertyValue(UnoDialog.getModel(optAlignRight), "Enabled", new Boolean(_bEnableAlignControlGroup));
     }
 
     
-    private class ArrangeImageList implements XItemListener{
+    public class ArrangeImageList implements XItemListener{
         int formindex;
         ImageList ilLayouts = new ImageList();
         
--- wizards/com/sun/star/wizards/letter/CallWizard.java	2006-04-07 14:46:03.000000000 +0200
+++ wizards/com/sun/star/wizards/letter/CallWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -102,12 +102,12 @@ public class CallWizard {
         /**
          * The service name, that must be used to get an instance of this service.
          */
-        private static final String __serviceName = "com.sun.star.wizards.letter.CallWizard";
+        public static final String __serviceName = "com.sun.star.wizards.letter.CallWizard";
 
         /**
          * The service manager, that gives access to all registered services.
          */
-        private XMultiServiceFactory xmultiservicefactory;
+        public XMultiServiceFactory xmultiservicefactory;
 
         /**
          * This method is a member of the interface for initializing an object directly
--- wizards/com/sun/star/wizards/letter/LetterWizardDialogImpl.java	2006-10-04 22:09:46.000000000 +0200
+++ wizards/com/sun/star/wizards/letter/LetterWizardDialogImpl.java	2007-05-24 11:24:05.000000000 +0200
@@ -67,7 +67,7 @@ public class LetterWizardDialogImpl exte
     String sPath;
     boolean bEditTemplate;
     boolean bSaveSuccess = false;
-    private boolean filenameChanged = false;
+    public boolean filenameChanged = false;
 
     LetterDocument.BusinessPaperObject BusCompanyLogo = null;
     LetterDocument.BusinessPaperObject BusCompanyAddress = null;
@@ -674,19 +674,19 @@ public class LetterWizardDialogImpl exte
         chkUseFooterItemChanged();
     }
 
-    private void setPossibleFooter(boolean bState) {
+    public void setPossibleFooter(boolean bState) {
         setControlProperty("chkUseFooter", "Enabled", new Boolean(bState));
         chkUseFooterItemChanged();
     }
 
-    private void setPossibleAddressReceiver(boolean bState) {
+    public void setPossibleAddressReceiver(boolean bState) {
         if (myLetterDoc.hasElement("Sender Address Repeated")) {        
             setControlProperty("chkUseAddressReceiver", "Enabled", new Boolean(bState));
             chkUseAddressReceiverItemChanged();
         }
     }
 
-    private void setPossibleLogo(boolean bState) {
+    public void setPossibleLogo(boolean bState) {
         if (myLetterDoc.hasElement("Company Logo")) {
             setControlProperty("chkUseLogo", "Enabled", new Boolean(bState));
             chkUseLogoItemChanged();
@@ -751,7 +751,7 @@ public class LetterWizardDialogImpl exte
         setControlProperty("lstGreeting", "Enabled", new Boolean(chkUseGreeting.getState() != 0));
     }
     
-    private void setDefaultForGreetingAndSalutation() {
+    public void setDefaultForGreetingAndSalutation() {
         XTextComponent xTextComponent;
         xTextComponent = (XTextComponent) UnoRuntime.queryInterface(XTextComponent.class, lstSalutation);
         if (xTextComponent.getText().equals("")) {
@@ -783,7 +783,7 @@ public class LetterWizardDialogImpl exte
         }
     }
     
-    private int getOfficeLinguistic() {
+    public int getOfficeLinguistic() {
         int oL = 0;
         boolean found = false;
         String OfficeLinguistic = Configuration.getOfficeLinguistic(xMSF);
@@ -807,7 +807,7 @@ public class LetterWizardDialogImpl exte
         return oL;
     }
     
-    private void setPossibleSenderData(boolean bState) {
+    public void setPossibleSenderData(boolean bState) {
         setControlProperty("optSenderDefine", "Enabled", new Boolean(bState));
         setControlProperty("optSenderPlaceholder", "Enabled", new Boolean(bState));
         setControlProperty("lblSenderAddress", "Enabled", new Boolean(bState));
@@ -824,17 +824,17 @@ public class LetterWizardDialogImpl exte
         }
     }
     
-    private void enableSenderReceiver() {
+    public void enableSenderReceiver() {
         XInterface BPaperItem = getRoadmapItemByID(RM_SENDERRECEIVER);
         Helper.setUnoPropertyValue(BPaperItem, "Enabled", Boolean.TRUE);
     }
     
-    private void disableSenderReceiver() {
+    public void disableSenderReceiver() {
         XInterface BPaperItem = getRoadmapItemByID(RM_SENDERRECEIVER);
         Helper.setUnoPropertyValue(BPaperItem, "Enabled", Boolean.FALSE);
     }
         
-    private void enableBusinessPaper() {
+    public void enableBusinessPaper() {
         XInterface BPaperItem = getRoadmapItemByID(RM_BUSINESSPAPER);
         Helper.setUnoPropertyValue(BPaperItem, "Enabled", Boolean.TRUE);
         chkPaperCompanyLogoItemChanged();
@@ -843,7 +843,7 @@ public class LetterWizardDialogImpl exte
         chkCompanyReceiverItemChanged();
     }
 
-    private void disableBusinessPaper() {
+    public void disableBusinessPaper() {
         XInterface BPaperItem = getRoadmapItemByID(RM_BUSINESSPAPER);
         Helper.setUnoPropertyValue(BPaperItem, "Enabled", Boolean.FALSE);
         if (BusCompanyLogo != null) {
@@ -1010,7 +1010,7 @@ public class LetterWizardDialogImpl exte
         setControlProperty("lstLetterNorm", "StringItemList", LanguageLabels);
     }
     
-    private CGLetter getCurrentLetter() {
+    public CGLetter getCurrentLetter() {
         switch (myConfig.cp_LetterType) {
             case 0 : return myConfig.cp_BusinessLetter;
             case 1 : return myConfig.cp_PrivateOfficialLetter;
@@ -1019,7 +1019,7 @@ public class LetterWizardDialogImpl exte
         }
     }
 
-    private void initializePaths() {
+    public void initializePaths() {
         try {
             sTemplatePath = FileAccess.getOfficePath(xMSF, "Template", "share", "/wizard");
             sUserTemplatePath = FileAccess.getOfficePath(xMSF, "Template", "user", "");
@@ -1105,7 +1105,7 @@ public class LetterWizardDialogImpl exte
         setCurrentRoadmapItemID((short) 1);
     }
     
-    private class myPathSelectionListener implements XPathSelectionListener {
+    public class myPathSelectionListener implements XPathSelectionListener {
         public void validatePath() {
             if (myPathSelection.usedPathPicker) {
                 filenameChanged = true;             
@@ -1186,7 +1186,7 @@ public class LetterWizardDialogImpl exte
 
     }
     
-    private void updateUI() {
+    public void updateUI() {
         UnoDataAware.updateUI(mainDA);
         UnoDataAware.updateUI(letterDA);
         UnoDataAware.updateUI(businessDA);          
--- wizards/com/sun/star/wizards/letter/LetterWizardDialogResources.java	2006-04-07 14:48:00.000000000 +0200
+++ wizards/com/sun/star/wizards/letter/LetterWizardDialogResources.java	2007-05-24 11:24:05.000000000 +0200
@@ -14,10 +14,10 @@ public class LetterWizardDialogResources
     final static int RID_LETTERWIZARDLANGUAGE_START = 3110;
     final static int RID_RID_COMMON_START = 500;
 
-    protected String[] RoadmapLabels = new String[7];
-    protected String[] SalutationLabels = new String[3];
-    protected String[] GreetingLabels = new String[3];
-    protected String[] LanguageLabels = new String[16];
+    public String[] RoadmapLabels = new String[7];
+    public String[] SalutationLabels = new String[3];
+    public String[] GreetingLabels = new String[3];
+    public String[] LanguageLabels = new String[16];
     
     String resOverwriteWarning;
     String resTemplateDescription;
@@ -148,24 +148,24 @@ public class LetterWizardDialogResources
         loadCommonResources();
     }
     
-    private void loadCommonResources() {
+    public void loadCommonResources() {
         resOverwriteWarning = getResText(RID_RID_COMMON_START + 19);
         resTemplateDescription = getResText(RID_RID_COMMON_START + 20);
     }
 
-    private void loadRoadmapResources() {
+    public void loadRoadmapResources() {
         for (int i = 1; i < 7; i++) {
             RoadmapLabels[i] = getResText(RID_LETTERWIZARDROADMAP_START + i);
         }
     }
     
-    private void loadSalutationResources() {
+    public void loadSalutationResources() {
         for (int i = 1; i < 4; i++) {
             SalutationLabels[i-1] = getResText(RID_LETTERWIZARDSALUTATION_START + i);
         }
     }
     
-    private void loadGreetingResources() {
+    public void loadGreetingResources() {
         for (int i = 1; i < 4; i++) {
             GreetingLabels[i-1] = getResText(RID_LETTERWIZARDGREETING_START + i);
         }
--- wizards/com/sun/star/wizards/query/CallQueryWizard.java	2006-04-07 14:48:29.000000000 +0200
+++ wizards/com/sun/star/wizards/query/CallQueryWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -106,11 +106,11 @@ public class CallQueryWizard {
 
         /** The service name, that must be used to get an instance of this service.
          */
-        private static final String __serviceName = "com.sun.star.wizards.query.CallQueryWizard";
+        public static final String __serviceName = "com.sun.star.wizards.query.CallQueryWizard";
 
         /** The service manager, that gives access to all registered services.
          */
-        private com.sun.star.lang.XMultiServiceFactory xmultiservicefactory;
+        public com.sun.star.lang.XMultiServiceFactory xmultiservicefactory;
 
         /** This method is a member of the interface for initializing an object
          * directly after its creation.
--- wizards/com/sun/star/wizards/query/Finalizer.java	2006-07-10 18:05:08.000000000 +0200
+++ wizards/com/sun/star/wizards/query/Finalizer.java	2007-05-24 11:24:05.000000000 +0200
@@ -91,7 +91,7 @@ public class Finalizer {
     /* TODO: The title textbox always has to be updated when
         a new Table has been selected if it is clear that the user has not made any input meanwhile
     */
-    protected String initialize() {
+    public String initialize() {
         try {
             String sCurQueryName = AnyConverter.toString(Helper.getUnoPropertyValue(UnoDialog.getModel(txtTitle), "Text"));
             if (sCurQueryName != null) {
@@ -112,7 +112,7 @@ public class Finalizer {
         }
     }
 
-    private String getTitle() {
+    public String getTitle() {
         return (String) Helper.getUnoPropertyValue(UnoDialog.getModel(txtTitle), "Text");
     }
 
--- wizards/com/sun/star/wizards/query/QuerySummary.java	2006-07-06 16:21:09.000000000 +0200
+++ wizards/com/sun/star/wizards/query/QuerySummary.java	2007-05-24 11:24:05.000000000 +0200
@@ -46,10 +46,10 @@ public class QuerySummary extends QueryM
     String sSummary;
     Resource oResource;
     XMultiServiceFactory xMSF;
-    private String sSeparator;
-    private String sReturnChar;
-    private String sAnd;
-    private String sOr; 
+    public String sSeparator;
+    public String sReturnChar;
+    public String sAnd;
+    public String sOr; 
 
 
     public QuerySummary(XMultiServiceFactory _xMSF, Resource _oResource) {
@@ -103,7 +103,7 @@ public class QuerySummary extends QueryM
     }
 
 
-    private String combineFilterNameFraction(PropertyValue[][] _filterconditions, int _InitResID, int _AlternativeResID) {
+    public String combineFilterNameFraction(PropertyValue[][] _filterconditions, int _InitResID, int _AlternativeResID) {
         if (_filterconditions != null) {
             if (_filterconditions.length > 0) {
                 String sconditions = "";
@@ -129,7 +129,7 @@ public class QuerySummary extends QueryM
         return oResource.getResText(_AlternativeResID);
     }
 
-    private String combineFieldNameFraction() {
+    public String combineFieldNameFraction() {
         String CurString = "";
         String sReturn = oResource.getResText(RID_QUERY + 50);
         String BaseString = oResource.getResText(RID_QUERY + 92);
@@ -150,7 +150,7 @@ public class QuerySummary extends QueryM
     }
 
 
-    private String appendClauseSeparator(String _basestring, String _suffix, int _i, int _fieldcount) {
+    public String appendClauseSeparator(String _basestring, String _suffix, int _i, int _fieldcount) {
         if (_i < _fieldcount - 1)
             _basestring += _suffix;
         return _basestring;
@@ -167,7 +167,7 @@ public class QuerySummary extends QueryM
         return oResource.getResText(_AlternativeResID);
     }
 
-    protected String ArrayFieldsToString(int _InitResID, String[] _FieldNames) {
+    public String ArrayFieldsToString(int _InitResID, String[] _FieldNames) {
         String sReturn = oResource.getResText(_InitResID);
         int FieldCount = _FieldNames.length;
         for (int i = 0; i < FieldCount; i++) {
--- wizards/com/sun/star/wizards/query/QueryWizard.java	2006-12-01 17:31:08.000000000 +0100
+++ wizards/com/sun/star/wizards/query/QueryWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -246,7 +246,7 @@ public class QueryWizard extends WizardD
     }
 
 
-    protected void enterStep(int nOldStep, int nNewStep) {
+    public void enterStep(int nOldStep, int nNewStep) {
     try {
         if (nOldStep <= SOGROUPSELECTIONPAGE && nNewStep > SOGROUPSELECTIONPAGE) {
             if (CurDBMetaData.xDBMetaData.supportsGroupBy()) {
@@ -286,7 +286,7 @@ public class QueryWizard extends WizardD
     }}
 
 
-    protected void leaveStep(int nOldStep, int nNewStep) {
+    public void leaveStep(int nOldStep, int nNewStep) {
         switch (nOldStep) {
             case SOFIELDSELECTIONPAGE :
 		CurDBMetaData.reorderFieldColumns(CurDBCommandFieldSelection.getSelectedFieldNames());
@@ -333,7 +333,7 @@ public class QueryWizard extends WizardD
         }
     }
 
-    private void searchForOutdatedFields() {
+    public void searchForOutdatedFields() {
         String[] GroupCompNames;
 		String[] sFieldNames = CurDBMetaData.getFieldNames();
 		CurDBMetaData.SortFieldNames = JavaTools.removeOutdatedFields(CurDBMetaData.SortFieldNames, sFieldNames);
@@ -341,7 +341,7 @@ public class QueryWizard extends WizardD
 		CurDBMetaData.AggregateFieldNames = JavaTools.removeOutdatedFields(CurDBMetaData.AggregateFieldNames, sFieldNames);
     }
 
-    private void enableWizardSteps(String[] NewItems) {
+    public void enableWizardSteps(String[] NewItems) {
         boolean bEnabled = NewItems.length > 0;
         setControlProperty("btnWizardNext", "Enabled", new Boolean(bEnabled));
         setControlProperty("btnWizardFinish", "Enabled", new Boolean(bEnabled));
@@ -350,7 +350,7 @@ public class QueryWizard extends WizardD
 
 
     public class FieldSelectionListener implements com.sun.star.wizards.ui.XFieldSelectionListener {
-        protected int ID;
+        public int ID;
 
         public int getID() {
             return ID;
--- wizards/com/sun/star/wizards/report/CallReportWizard.java	2006-04-07 14:50:10.000000000 +0200
+++ wizards/com/sun/star/wizards/report/CallReportWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -154,11 +154,11 @@ public class CallReportWizard {
 
         /** The service name, that must be used to get an instance of this service.
          */
-        private static final String __serviceName = "com.sun.star.wizards.report.CallReportWizard";
+        public static final String __serviceName = "com.sun.star.wizards.report.CallReportWizard";
 
         /** The service manager, that gives access to all registered services.
          */
-        private com.sun.star.lang.XMultiServiceFactory xmultiservicefactory;
+        public com.sun.star.lang.XMultiServiceFactory xmultiservicefactory;
 
         /** This method is a member of the interface for initializing an object
          * directly after its creation.
--- wizards/com/sun/star/wizards/report/Dataimport.java	2007-04-16 18:52:49.000000000 +0200
+++ wizards/com/sun/star/wizards/report/Dataimport.java	2007-05-24 11:24:05.000000000 +0200
@@ -181,7 +181,7 @@ public class Dataimport extends UnoDialo
     }
 
 
-    private void addTextSectionCopies(){
+    public void addTextSectionCopies(){
         CurReportDocument.setLayoutSectionsVisible(false);
         XTextCursor xTextCursor = ReportDocument.createTextCursor(CurReportDocument.xTextDocument.getText());
         xTextCursor.gotoStart(false);
@@ -198,7 +198,7 @@ public class Dataimport extends UnoDialo
     }
 
 
-    private void renameTableofLastSection(String _snewname){
+    public void renameTableofLastSection(String _snewname){
         XTextTable xTextTable = CurReportDocument.oTextTableHandler.getlastTextTable();
         XNamed xNamedTable = (XNamed) UnoRuntime.queryInterface(XNamed.class, xTextTable);
         xNamedTable.setName(_snewname);
--- wizards/com/sun/star/wizards/report/DBColumn.java	2006-12-01 17:31:22.000000000 +0100
+++ wizards/com/sun/star/wizards/report/DBColumn.java	2007-05-24 11:24:05.000000000 +0200
@@ -74,11 +74,11 @@ public class DBColumn {
     public int ValColumn = 1;
     public int ValRow = 0;
     public FieldColumn CurDBField;
-    private XTextTable xTextTable;
-    private XTableColumns xTableColumns;
-    private XCellRange xCellRange;
+    public XTextTable xTextTable;
+    public XTableColumns xTableColumns;
+    public XCellRange xCellRange;
     public XNamed xTableName;
-    private boolean bIsGroupColumn;
+    public boolean bIsGroupColumn;
     TextDocument oTextDocument;
     RecordParser CurDBMetaData;
     RecordTable CurRecordTable;
@@ -101,7 +101,7 @@ public class DBColumn {
 
     
 
-    private void initializeRecordTableMembers(RecordTable _CurRecordTable, TextTableHandler _oTextTableHandler, RecordParser _CurDBMetaData, int i, boolean _bForce) throws Exception{
+    public void initializeRecordTableMembers(RecordTable _CurRecordTable, TextTableHandler _oTextTableHandler, RecordParser _CurDBMetaData, int i, boolean _bForce) throws Exception{
         this.oTextTableHandler = _oTextTableHandler;
         this.CurDBMetaData = _CurDBMetaData;
         this.CurRecordTable = _CurRecordTable;
@@ -119,7 +119,7 @@ public class DBColumn {
         }
     }
 
-    private boolean assignCells(int _nColumn, boolean _bforce){
+    public boolean assignCells(int _nColumn, boolean _bforce){
     try {
         XCell xCell = CurRecordTable.xCellRange.getCellByPosition(_nColumn,0);
         XTextRange xTextCell = (XTextRange) UnoRuntime.queryInterface(XTextRange.class, xCell);
@@ -190,7 +190,7 @@ public class DBColumn {
     }
 
 
-    private void  getTableColumns(String TableName){
+    public void  getTableColumns(String TableName){
     try {
         XNameAccess xAllTextTables = oTextTableHandler.xTextTablesSupplier.getTextTables();
         if (xAllTextTables.hasByName(TableName) == true){
@@ -248,7 +248,7 @@ public class DBColumn {
             bAlignLeft = true;
     }
 
-    private boolean checkforLeftAlignment(){
+    public boolean checkforLeftAlignment(){
         bAlignLeft = ((CurDBField.bIsNumberFormat) && (ValColumn == xTableColumns.getCount()-1));
         return bAlignLeft;
     }
@@ -356,7 +356,7 @@ public class DBColumn {
         exception.printStackTrace(System.out);
     }}
 
-    private boolean isNameCell(XTextCursor xCellCursor, String CurFieldName, String CompString){
+    public boolean isNameCell(XTextCursor xCellCursor, String CurFieldName, String CompString){
     try{
         xCellCursor.gotoStart(false);
         XTextRange xTextRange = xCellCursor.getEnd();
--- wizards/com/sun/star/wizards/report/GroupFieldHandler.java	2006-12-01 17:31:49.000000000 +0100
+++ wizards/com/sun/star/wizards/report/GroupFieldHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -103,7 +103,7 @@ static final short MAXSELFIELDS = 4;
     }
 
     
-    protected void toggleListboxButtons(short iFieldsSelIndex, short iSelFieldsSelIndex) {
+    public void toggleListboxButtons(short iFieldsSelIndex, short iSelFieldsSelIndex) {
         super.toggleListboxButtons(iFieldsSelIndex, iSelFieldsSelIndex);
         int iSelCount = xSelFieldsListBox.getItemCount();
         if (iSelCount >= MAXSELFIELDS){
@@ -120,7 +120,7 @@ static final short MAXSELFIELDS = 4;
         
     }    
 
-    protected class FieldSelectionListener implements com.sun.star.wizards.ui.XFieldSelectionListener{
+    public class FieldSelectionListener implements com.sun.star.wizards.ui.XFieldSelectionListener{
         
         public void moveItemDown(String Selitem){
             CurReportDocument.refreshGroupFields(xSelFieldsListBox.getItems());
--- wizards/com/sun/star/wizards/report/RecordTable.java	2006-04-07 14:51:32.000000000 +0200
+++ wizards/com/sun/star/wizards/report/RecordTable.java	2007-05-24 11:24:05.000000000 +0200
@@ -53,7 +53,7 @@ public class RecordTable{
     public XNamed xTableName;
     public XCellRange xCellRange;
     public XTextTable xTextTable;
-    private TextTableHandler oTextTableHandler;
+    public TextTableHandler oTextTableHandler;
     public XTableColumns xTableColumns;
     public XTableRows xTableRows;
 
--- wizards/com/sun/star/wizards/report/ReportDocument.java	2007-04-16 18:53:23.000000000 +0200
+++ wizards/com/sun/star/wizards/report/ReportDocument.java	2007-05-24 11:24:05.000000000 +0200
@@ -62,20 +62,20 @@ import com.sun.star.wizards.document.For
 
 
 class ReportDocument extends com.sun.star.wizards.text.TextDocument implements Comparator{
-    private Object ReportPageStyle;
-    private Object FirstPageStyle;
-    private int PageWidth;
-    private Rectangle PosSize;
-    private String ReportFolderName;
+    public Object ReportPageStyle;
+    public Object FirstPageStyle;
+    public int PageWidth;
+    public Rectangle PosSize;
+    public String ReportFolderName;
     public Vector DBColumnsVector;
-    private RecordTable CurRecordTable;
+    public RecordTable CurRecordTable;
     public RecordParser CurDBMetaData;
-    private String sMsgTableNotExisting;
-    private String sMsgCommonReportError;
-    private String ContentTemplatePath;
-    private String LayoutTemplatePath;
-    private String sMsgInvalidTextField;
-    private String sMsgEndAutopilot;
+    public String sMsgTableNotExisting;
+    public String sMsgCommonReportError;
+    public String ContentTemplatePath;
+    public String LayoutTemplatePath;
+    public String sMsgInvalidTextField;
+    public String sMsgEndAutopilot;
     public boolean bIsCurLandscape;
     public TextTableHandler oTextTableHandler;
     public TextSectionHandler oTextSectionHandler;
@@ -522,7 +522,7 @@ class ReportDocument extends com.sun.sta
     }
 
 
-    private DBColumn getDBColumnByName(String _FieldName){
+    public DBColumn getDBColumnByName(String _FieldName){
     	for (int i = 0; i < DBColumnsVector.size(); i++){
     		DBColumn oDBColumn = (DBColumn) DBColumnsVector.get(i);
     		if (oDBColumn.CurDBField.FieldName.equals(_FieldName))
@@ -567,7 +567,7 @@ class ReportDocument extends com.sun.sta
         }
     }
 
-    private String[] getLayoutTextTableNames(){
+    public String[] getLayoutTextTableNames(){
         int GroupCount = CurDBMetaData.GroupFieldNames.length;
         String[] sLayoutTableNames = new String[GroupCount + 1];
         for (int i = 0; i < GroupCount; i++){
--- wizards/com/sun/star/wizards/report/ReportLayouter.java	2006-12-01 17:32:17.000000000 +0100
+++ wizards/com/sun/star/wizards/report/ReportLayouter.java	2007-05-24 11:24:05.000000000 +0200
@@ -64,7 +64,7 @@ public class ReportLayouter {
     ReportDocument CurReportDocument;
     public String[][] LayoutFiles;
     public String[][] ContentFiles;
-    private Desktop.OfficePathRetriever curofficepath;
+    public Desktop.OfficePathRetriever curofficepath;
     Object imgOrientation;  
 
     public ReportLayouter(ReportDocument _CurReportDocument, UnoDialog _CurUnoDialog) {
--- wizards/com/sun/star/wizards/report/ReportWizard.java	2007-04-16 18:53:41.000000000 +0200
+++ wizards/com/sun/star/wizards/report/ReportWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -122,7 +122,7 @@ public class ReportWizard extends Wizard
     }
 
 
-    protected void enterStep(int nOldStep, int nNewStep){
+    public void enterStep(int nOldStep, int nNewStep){
         if ((nOldStep >= SOTEMPLATEPAGE) && (nNewStep < SOTEMPLATEPAGE)){
             CurReportDocument.oTextSectionHandler.removeTextSectionbyName("RecordSection");
             CurReportDocument.oTextTableHandler.removeTextTablebyName("Tbl_RecordSection");
@@ -152,7 +152,7 @@ public class ReportWizard extends Wizard
         }
     }
 
-    protected void leaveStep(int nOldStep, int nNewStep){
+    public void leaveStep(int nOldStep, int nNewStep){
 
          switch (nOldStep){
             case SOMAINPAGE:
@@ -191,7 +191,7 @@ public class ReportWizard extends Wizard
     }
 
 
-    private boolean executeQuery(){
+    public boolean executeQuery(){
         boolean bQueryCreated = false;
         if (this.CurDBCommandFieldSelection.getSelectedCommandType() == CommandType.TABLE){
             bQueryCreated = CurDBMetaData.oSQLQueryComposer.setQueryCommand(sMsgWizardName, this.xWindow, false, false);
@@ -441,7 +441,7 @@ public class ReportWizard extends Wizard
 
 
 
-    private void enableWizardSteps(String[] NewItems){
+    public void enableWizardSteps(String[] NewItems){
         boolean bEnabled = NewItems.length > 0;
         setControlProperty("btnWizardNext", "Enabled", new Boolean(bEnabled));
         setControlProperty("btnWizardFinish", "Enabled", new Boolean(bEnabled));
@@ -473,14 +473,14 @@ public class ReportWizard extends Wizard
     }
 
 
-    private void toggleSortingPage(){
+    public void toggleSortingPage(){
         int nCommandType = this.CurDBCommandFieldSelection.getSelectedCommandType();
         super.setStepEnabled(SOSORTPAGE, (nCommandType == CommandType.TABLE));
     }
 
 
     public class FieldSelectionListener implements com.sun.star.wizards.ui.XFieldSelectionListener{
-         protected int ID;
+         public int ID;
 
          public int getID(){
              return ID;
--- wizards/com/sun/star/wizards/table/CallTableWizard.java	2006-04-07 14:53:13.000000000 +0200
+++ wizards/com/sun/star/wizards/table/CallTableWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -106,11 +106,11 @@ public class CallTableWizard {
 
         /** The service name, that must be used to get an instance of this service.
          */
-        private static final String __serviceName = "com.sun.star.wizards.table.CallTableWizard";
+        public static final String __serviceName = "com.sun.star.wizards.table.CallTableWizard";
 
         /** The service manager, that gives access to all registered services.
          */
-        private com.sun.star.lang.XMultiServiceFactory xmultiservicefactory;
+        public com.sun.star.lang.XMultiServiceFactory xmultiservicefactory;
 
         /** This method is a member of the interface for initializing an object
          * directly after its creation.
--- wizards/com/sun/star/wizards/table/CGCategory.java	2006-04-07 14:52:47.000000000 +0200
+++ wizards/com/sun/star/wizards/table/CGCategory.java	2007-05-24 11:24:05.000000000 +0200
@@ -57,8 +57,8 @@ public class CGCategory{
     
     public String Name;
     public int Index;
-    private String[] Tables;
-    private final String CGROOTPATH = "/org.openoffice.Office.TableWizard/TableWizard/";
+    public String[] Tables;
+    public final String CGROOTPATH = "/org.openoffice.Office.TableWizard/TableWizard/";
     XMultiServiceFactory xMSF;
     XNameAccess xNameAccessTablesNode;
     XNameAccess xNameAccessCurBusinessNode;
--- wizards/com/sun/star/wizards/table/CGTable.java	2006-04-07 14:53:00.000000000 +0200
+++ wizards/com/sun/star/wizards/table/CGTable.java	2007-05-24 11:24:05.000000000 +0200
@@ -52,8 +52,8 @@ public class CGTable{
     XNameAccess xNameAccessTableNode;
     public String Index;
     public String Name;
-    private Object oconfigView;
-    private final String CGROOTPATH = "/org.openoffice.Office.TableWizard/TableWizard/";
+    public Object oconfigView;
+    public final String CGROOTPATH = "/org.openoffice.Office.TableWizard/TableWizard/";
 
 
     public CGTable(XMultiServiceFactory _xMSF){
--- wizards/com/sun/star/wizards/table/FieldDescription.java	2006-04-07 14:53:34.000000000 +0200
+++ wizards/com/sun/star/wizards/table/FieldDescription.java	2007-05-24 11:24:05.000000000 +0200
@@ -53,20 +53,20 @@ import com.sun.star.wizards.common.Prope
 
 public class FieldDescription{
     int category;
-    private String tablename = "";
+    public String tablename = "";
 //  String fieldname;
-    private String keyname;
-    private XNameAccess xNameAccessTableNode;
-    private XPropertySet xPropertySet;
-    private Vector aPropertyValues;
+    public String keyname;
+    public XNameAccess xNameAccessTableNode;
+    public XPropertySet xPropertySet;
+    public Vector aPropertyValues;
 //  PropertyValue[] aPropertyValues;
-    private Integer Type;
-    private Integer Scale;
-    private Integer Precision;
-    private Boolean DefaultValue;
-    private String Name;
-    private XMultiServiceFactory xMSF;
-    private Locale aLocale;
+    public Integer Type;
+    public Integer Scale;
+    public Integer Precision;
+    public Boolean DefaultValue;
+    public String Name;
+    public XMultiServiceFactory xMSF;
+    public Locale aLocale;
         
     public FieldDescription(XMultiServiceFactory _xMSF, Locale _aLocale, ScenarioSelector _curscenarioselector, String _fieldname, String _keyname, int _nmaxcharCount){
         xMSF = _xMSF;
@@ -115,7 +115,7 @@ public class FieldDescription{
     }
 
         
-    private boolean propertyexists(String _propertyname){
+    public boolean propertyexists(String _propertyname){
     boolean bexists = false;
     try {
         if (xPropertySet.getPropertySetInfo().hasPropertyByName(_propertyname)){
--- wizards/com/sun/star/wizards/table/FieldFormatter.java	2006-07-06 16:27:28.000000000 +0200
+++ wizards/com/sun/star/wizards/table/FieldFormatter.java	2007-05-24 11:24:05.000000000 +0200
@@ -304,7 +304,7 @@ public class FieldFormatter  implements 
         return false;
     }
 
-    private void updateColumnDescriptor(String _ColumnName, XPropertySet _xColumn){
+    public void updateColumnDescriptor(String _ColumnName, XPropertySet _xColumn){
         updateColumnofColumnDescriptor();
         XPropertySet xNewPropertySet = curTableDescriptor.clonePropertySet(_ColumnName, _xColumn);
         if (xNewPropertySet != null)
--- wizards/com/sun/star/wizards/table/PrimaryKeyHandler.java	2006-07-06 16:28:21.000000000 +0200
+++ wizards/com/sun/star/wizards/table/PrimaryKeyHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -163,7 +163,7 @@ public class PrimaryKeyHandler implement
     }
 
 
-    private boolean isAutoPrimeKeyAutoIncrementationsupported(){
+    public boolean isAutoPrimeKeyAutoIncrementationsupported(){
         TypeInspector.TypeInfo aAutoPrimeTypeInfo;
         aAutoPrimeTypeInfo = curTableDescriptor.oTypeInspector.findAutomaticPrimaryKeyType();
         return aAutoPrimeTypeInfo.bisAutoIncrementable;
@@ -216,7 +216,7 @@ public class PrimaryKeyHandler implement
     }
 
 
-    private boolean isAutoIncrementatable(String _fieldname){
+    public boolean isAutoIncrementatable(String _fieldname){
     boolean bisAutoIncrementable = false;
     try {
         XPropertySet xColPropertySet = curTableDescriptor.getByName(_fieldname);
@@ -274,7 +274,7 @@ public class PrimaryKeyHandler implement
     }}
 
 
-    private void toggleAutomaticAutoValueCheckBox(){
+    public void toggleAutomaticAutoValueCheckBox(){
     try {
         boolean bisAutomaticMode = AnyConverter.toBoolean(Helper.getUnoPropertyValue(UnoDialog.getModel(optAddAutomatically), "Enabled"));
         boolean bdoenable = bAutoPrimaryKeysupportsAutoIncrmentation && optAddAutomatically.getState() && bisAutomaticMode;
@@ -283,7 +283,7 @@ public class PrimaryKeyHandler implement
         e.printStackTrace(System.out);
     }}
 
-    private void toggleSinglePrimeKeyFields(boolean _bdoenable){
+    public void toggleSinglePrimeKeyFields(boolean _bdoenable){
         Helper.setUnoPropertyValue(UnoDialog.getModel(lblPrimeFieldName), "Enabled", new Boolean(_bdoenable));
         Helper.setUnoPropertyValue(UnoDialog.getModel(lstSinglePrimeKey), "Enabled", new Boolean(_bdoenable));
         Helper.setUnoPropertyValue(UnoDialog.getModel(chkApplyAutoValueExisting), "Enabled", new Boolean(_bdoenable));
@@ -292,7 +292,7 @@ public class PrimaryKeyHandler implement
     }
 
 
-    private void toggleSeveralPrimeKeyFields(){
+    public void toggleSeveralPrimeKeyFields(){
         boolean bdoEnable = (this.optUseSeveral.getState());
         curPrimaryKeySelection.toggleListboxControls(new Boolean(bdoEnable));
     }
--- wizards/com/sun/star/wizards/table/ScenarioSelector.java	2006-07-06 16:28:47.000000000 +0200
+++ wizards/com/sun/star/wizards/table/ScenarioSelector.java	2007-05-24 11:24:05.000000000 +0200
@@ -81,10 +81,10 @@ public class ScenarioSelector extends Fi
     CGCategory oCGCategory;
     CGTable oCGTable;
     String SELECTCATEGORY = "selectCategory";
-    private int curcategory;
+    public int curcategory;
     public boolean bcolumnnameislimited;
-    private int imaxcolumnchars;
-    private String[] fieldnames;
+    public int imaxcolumnchars;
+    public String[] fieldnames;
     String smytable;
     Locale aLocale;
     XMultiServiceFactory xMSF;
@@ -267,7 +267,7 @@ public class ScenarioSelector extends Fi
     }
     
     
-     protected int ID;
+     public int ID;
         
      public int getID(){
          return ID;
--- wizards/com/sun/star/wizards/table/TableWizard.java	2006-07-06 16:29:40.000000000 +0200
+++ wizards/com/sun/star/wizards/table/TableWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -74,7 +74,7 @@ public class TableWizard extends WizardD
     public static final int SOFIELDSFORMATPAGE = 2;
     public static final int SOPRIMARYKEYPAGE = 3;
     public static final int SOFINALPAGE = 4;
-    private String sMsgColumnAlreadyExists = "";
+    public String sMsgColumnAlreadyExists = "";
 
     String WizardHeaderText[] = new String[8];
 
@@ -93,7 +93,7 @@ public class TableWizard extends WizardD
     }
 
 
-    protected void leaveStep(int nOldStep, int nNewStep){
+    public void leaveStep(int nOldStep, int nNewStep){
          switch (nOldStep){
             case SOMAINPAGE:
                 curScenarioSelector.addColumnsToDescriptor();
@@ -114,7 +114,7 @@ public class TableWizard extends WizardD
     }
 
 
-    protected void enterStep(int nOldStep, int nNewStep) {
+    public void enterStep(int nOldStep, int nNewStep) {
         switch (nNewStep){
             case SOMAINPAGE:
                 break;
@@ -279,7 +279,7 @@ public class TableWizard extends WizardD
     }
 
 
-    private void callFormWizard(){
+    public void callFormWizard(){
     try {
         Object oFormWizard = this.xMSF.createInstance("com.sun.star.wizards.form.CallFormWizard");
         PropertyValue[] aProperties  = new PropertyValue[4];
@@ -354,7 +354,7 @@ public class TableWizard extends WizardD
     }
 
 
-    private void toggleWizardSteps(int _startStep, boolean _benable){
+    public void toggleWizardSteps(int _startStep, boolean _benable){
         super.setStepEnabled(SOFIELDSFORMATPAGE, _benable);
         super.setStepEnabled(SOPRIMARYKEYPAGE, _benable);
         super.setStepEnabled(SOFINALPAGE, _benable);
--- wizards/com/sun/star/wizards/text/TextDocument.java	2007-04-16 18:53:54.000000000 +0200
+++ wizards/com/sun/star/wizards/text/TextDocument.java	2007-05-24 11:24:05.000000000 +0200
@@ -173,7 +173,7 @@ public class TextDocument {
     }
 
 
-    private void init() {
+    public void init() {
         xWindowPeer = (XWindowPeer) UnoRuntime.queryInterface(XWindowPeer.class, xFrame.getComponentWindow());
         xMSFDoc = (XMultiServiceFactory) UnoRuntime.queryInterface(XMultiServiceFactory.class, xTextDocument);
         xNumberFormatsSupplier = (XNumberFormatsSupplier) UnoRuntime.queryInterface(XNumberFormatsSupplier.class, xTextDocument);
@@ -184,7 +184,7 @@ public class TextDocument {
         xText = xTextDocument.getText();
     }
 
-    private void showStatusIndicator() {
+    public void showStatusIndicator() {
         XStatusIndicatorFactory xStatusIndicatorFactory = (XStatusIndicatorFactory) UnoRuntime.queryInterface(XStatusIndicatorFactory.class, xFrame);
         xProgressBar = xStatusIndicatorFactory.createStatusIndicator();
         xProgressBar.start("", 100);
--- wizards/com/sun/star/wizards/text/TextFieldHandler.java	2006-04-07 14:55:39.000000000 +0200
+++ wizards/com/sun/star/wizards/text/TextFieldHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -66,7 +66,7 @@ import com.sun.star.wizards.common.Helpe
 public class TextFieldHandler {
 
     public XTextFieldsSupplier xTextFieldsSupplier;
-    private XMultiServiceFactory xMSFDoc;
+    public XMultiServiceFactory xMSFDoc;
 
 
     /** Creates a new instance of TextFieldHandler */
@@ -129,7 +129,7 @@ public class TextFieldHandler {
 
 
 
-    private XDependentTextField[] getTextFieldsByProperty(String _PropertyName, Object _aPropertyValue, String _TypeName) throws Exception{
+    public XDependentTextField[] getTextFieldsByProperty(String _PropertyName, Object _aPropertyValue, String _TypeName) throws Exception{
     try {
         XDependentTextField[] xDependentFields;
         Vector xDependentVector = new Vector();
--- wizards/com/sun/star/wizards/text/TextSectionHandler.java	2006-12-01 17:32:44.000000000 +0100
+++ wizards/com/sun/star/wizards/text/TextSectionHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -54,9 +54,9 @@ import com.sun.star.wizards.common.Helpe
 public class TextSectionHandler {
 
     public XTextSectionsSupplier xTextSectionsSupplier;
-    private XMultiServiceFactory xMSFDoc;
-    private XTextDocument xTextDocument;
-    private XText xText;
+    public XMultiServiceFactory xMSFDoc;
+    public XTextDocument xTextDocument;
+    public XText xText;
 
     /** Creates a new instance of TextSectionHandler */
     public TextSectionHandler(XMultiServiceFactory xMSF, XTextDocument xTextDocument) {
--- wizards/com/sun/star/wizards/text/TextStyleHandler.java	2006-04-07 14:57:02.000000000 +0200
+++ wizards/com/sun/star/wizards/text/TextStyleHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -51,8 +51,8 @@ import com.sun.star.uno.UnoRuntime;
 
 public class TextStyleHandler {
     public XStyleFamiliesSupplier xStyleFamiliesSupplier;
-    private XMultiServiceFactory xMSFDoc;
-    private XTextDocument xTextDocument;
+    public XMultiServiceFactory xMSFDoc;
+    public XTextDocument xTextDocument;
 
     /** Creates a new instance of TextStyleHandler */
     public TextStyleHandler(com.sun.star.lang.XMultiServiceFactory xMSF, XTextDocument xTextDocument) {
--- wizards/com/sun/star/wizards/text/TextTableHandler.java	2006-12-01 17:32:58.000000000 +0100
+++ wizards/com/sun/star/wizards/text/TextTableHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -63,9 +63,9 @@ public class TextTableHandler {
     public XMultiServiceFactory xMSFDoc;
     public XTextDocument xTextDocument;
     public XSimpleText xSimpleText;
-    private XText xText;
-    private NumberFormatter oNumberFormatter;
-    private Locale aCharLocale;
+    public XText xText;
+    public NumberFormatter oNumberFormatter;
+    public Locale aCharLocale;
     
     
 
--- wizards/com/sun/star/wizards/text/ViewHandler.java	2006-07-06 16:31:57.000000000 +0200
+++ wizards/com/sun/star/wizards/text/ViewHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -54,11 +54,11 @@ import com.sun.star.view.XViewSettingsSu
 import com.sun.star.wizards.common.Helper;
 
 public class ViewHandler {
-    private XTextViewCursorSupplier xTextViewCursorSupplier;
-    private XMultiServiceFactory xMSFDoc;
-    private XTextDocument xTextDocument;
-    private XStyleFamiliesSupplier xStyleFamiliesSupplier;
-    private XViewSettingsSupplier xViewSettingsSupplier;
+    public XTextViewCursorSupplier xTextViewCursorSupplier;
+    public XMultiServiceFactory xMSFDoc;
+    public XTextDocument xTextDocument;
+    public XStyleFamiliesSupplier xStyleFamiliesSupplier;
+    public XViewSettingsSupplier xViewSettingsSupplier;
 
     /** Creates a new instance of View */
     public ViewHandler(XMultiServiceFactory xMSF, XTextDocument xTextDocument) {
--- wizards/com/sun/star/wizards/ui/AggregateComponent.java	2006-04-07 15:21:29.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/AggregateComponent.java	2007-05-24 11:24:05.000000000 +0200
@@ -164,7 +164,7 @@ public class AggregateComponent extends 
     }
     
     
-    protected void insertControlGroup(int i, int ypos){
+    public void insertControlGroup(int i, int ypos){
         if (i == 0){
             int BaseID = 2300;          
             soptDetailQuery = CurUnoDialog.oResource.getResText(BaseID + 11);
@@ -183,7 +183,7 @@ public class AggregateComponent extends 
     }
 
 
-    protected void setControlGroupVisible(int _index, boolean _bIsVisible){
+    public void setControlGroupVisible(int _index, boolean _bIsVisible){
         ControlRow oControlRow = (ControlRow) ControlRowVector.elementAt(_index);
         oControlRow.setVisible(_bIsVisible);
         if (_index >= (this.CurDBMetaData.AggregateFieldNames.length))
@@ -191,7 +191,7 @@ public class AggregateComponent extends 
     }
         
     
-    protected void addRow(){
+    public void addRow(){
         int fieldcount = super.getTotalFieldCount();
         registerControlGroupAtIndex(fieldcount);
         if ( fieldcount < super.getBlockIncrementation()){
@@ -211,7 +211,7 @@ public class AggregateComponent extends 
     }
 
     
-    protected void removeRow(){
+    public void removeRow(){
         int fieldcount = super.getTotalFieldCount();
         if ( fieldcount > 0){
             ControlRow oControlRow;
@@ -229,7 +229,7 @@ public class AggregateComponent extends 
     }
 
     
-    protected void toggleButtons(){
+    public void toggleButtons(){
         ControlRow curcontrolrow = null;
         boolean biscomplete = true;
         CurDBMetaData.Type = getQueryType();
@@ -256,7 +256,7 @@ public class AggregateComponent extends 
     }
 
     
-    private boolean isAggregateComponentEnabled(){
+    public boolean isAggregateComponentEnabled(){
         return(CurDBMetaData.Type == QueryMetaData.QueryType.SOSUMMARYQUERY);
     }
     
@@ -279,7 +279,7 @@ public class AggregateComponent extends 
     }
 
     
-    private void togglefollowingDialogSteps(){
+    public void togglefollowingDialogSteps(){
         boolean benabletherest = true;
         boolean benableGroupPage = isGroupingpossible();
         CurUnoDialog.setStepEnabled(UIConsts.SOGROUPSELECTIONPAGE, benableGroupPage);
@@ -291,7 +291,7 @@ public class AggregateComponent extends 
     }
     
         
-    private void hideControlRowsfromindex(int _index){
+    public void hideControlRowsfromindex(int _index){
         if (_index < this.ControlRowVector.size()){
             for (int i = _index; i < ControlRowVector.size();i++){
                 ControlRow oControlRow = (ControlRow) ControlRowVector.elementAt(i);
@@ -369,7 +369,7 @@ public class AggregateComponent extends 
     }
 
 
-    protected void initializeScrollFields(){
+    public void initializeScrollFields(){
         ControlRow curControlRow;
         if (CurDBMetaData.AggregateFieldNames != null){
             for (int i = 0; i < this.getBlockIncrementation(); i++){
@@ -382,7 +382,7 @@ public class AggregateComponent extends 
     }
     
 
-    private void registerControlGroupAtIndex(int _index){
+    public void registerControlGroupAtIndex(int _index){
         short[] iselfunctionlist = new short[]{};
         short[] iselfieldslist = new short[]{};
         PropertyValue[] currowproperties = new PropertyValue[2];
@@ -398,18 +398,18 @@ public class AggregateComponent extends 
     }
 
 
-    private String getFunctionControlName(int _index){
+    public String getFunctionControlName(int _index){
         String namesuffix = "_" + String.valueOf(_index + 1);
         return "lstfunctions" + namesuffix;
     }
 
-    private String getFieldsControlName(int _index){
+    public String getFieldsControlName(int _index){
         String namesuffix = "_" + String.valueOf(_index + 1);
         return "lstFieldnames" + namesuffix;
     }
 
 
-    private boolean hasonlycompletefunctions(){
+    public boolean hasonlycompletefunctions(){
         int maxfieldcount = super.getCurFieldCount();
         if (maxfieldcount > 0){
             ControlRow curcontrolrow = (ControlRow) this.ControlRowVector.elementAt(maxfieldcount-1);
@@ -421,12 +421,12 @@ public class AggregateComponent extends 
 
 
 
-    protected class ControlRow{
-        private XListBox xFieldListBox;
-        private XListBox xFunctionListBox;
-        private int index;
+    public class ControlRow{
+        public XListBox xFieldListBox;
+        public XListBox xFunctionListBox;
+        public int index;
             
-        protected ControlRow(int _index, int ypos, int _curHelpID){
+        public ControlRow(int _index, int ypos, int _curHelpID){
         try{            
             this.index = _index;
             xFunctionListBox = CurUnoDialog.insertListBox(getFunctionControlName(index), 1, null, new ItemListenerImpl(),
@@ -445,40 +445,40 @@ public class AggregateComponent extends 
         }}
         
         
-        private String getSelectedFieldName(){
+        public String getSelectedFieldName(){
             return xFieldListBox.getSelectedItem();
         }
 
 
-        private String getSelectedFunction(){
+        public String getSelectedFunction(){
             return xFunctionListBox.getSelectedItem();
         }
 
 
-        private void setVisible(boolean _bvisible){
+        public void setVisible(boolean _bvisible){
             CurUnoDialog.setControlVisible(getFunctionControlName(index), _bvisible);
             CurUnoDialog.setControlVisible(getFieldsControlName(index), _bvisible);
         }
     
     
-        private void insertFieldNames(){
+        public void insertFieldNames(){
             Helper.setUnoPropertyValue(UnoDialog.getModel(xFieldListBox), "StringItemList", CurDBMetaData.NumericFieldNames);
         }
         
-        private boolean isComplete(){
+        public boolean isComplete(){
             boolean bfieldnameisselected = (Helper.getUnoArrayPropertyValue(UnoDialog.getModel(xFieldListBox), "SelectedItems") != null);
             boolean bfunctionisselected = (Helper.getUnoArrayPropertyValue(UnoDialog.getModel(xFunctionListBox), "SelectedItems") != null);
             return (bfieldnameisselected && bfunctionisselected);
         }
         
         
-        private void settovoid(){
+        public void settovoid(){
             CurUnoDialog.deselectListBox(xFieldListBox);
             CurUnoDialog.deselectListBox(xFunctionListBox);                     
         }
         
         
-        protected class ItemListenerImpl implements com.sun.star.awt.XItemListener{
+        public class ItemListenerImpl implements com.sun.star.awt.XItemListener{
     
             public void itemStateChanged(com.sun.star.awt.ItemEvent EventObject){
             try{
--- wizards/com/sun/star/wizards/ui/CommandFieldSelection.java	2006-04-07 15:21:48.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/CommandFieldSelection.java	2007-05-24 11:24:05.000000000 +0200
@@ -117,7 +117,7 @@ public class CommandFieldSelection exten
     }
 
 
-    private void insertControls(CommandMetaData _CurDBMetaData, boolean _bgetQueries, String _reslblTables){
+    public void insertControls(CommandMetaData _CurDBMetaData, boolean _bgetQueries, String _reslblTables){
         try {
             this.AppendMode = !_bgetQueries;
             this.bgetQueries = _bgetQueries;
@@ -151,7 +151,7 @@ public class CommandFieldSelection exten
     }
     
     
-    private String getCommandPrefix(int _nCommandType){
+    public String getCommandPrefix(int _nCommandType){
         if (_nCommandType == CommandType.TABLE)
             return getTablePrefix();
         else if (_nCommandType == CommandType.QUERY)
@@ -169,7 +169,7 @@ public class CommandFieldSelection exten
         return sTablePrefix;
     }
 
-    private short getselectedItemPos(){
+    public short getselectedItemPos(){
         short[] iSelPoses = ((short[]) Helper.getUnoPropertyValue(UnoDialog.getModel(xTableListBox), "SelectedItems"));
         if (iSelPoses.length > 0)
             return iSelPoses[0];
@@ -229,7 +229,7 @@ public class CommandFieldSelection exten
      * @return
      * @throws com.sun.star.wizards.common.TerminateWizardException
      */
-    private short fillupCommandListBox() throws com.sun.star.wizards.common.TerminateWizardException {
+    public short fillupCommandListBox() throws com.sun.star.wizards.common.TerminateWizardException {
         short[] iSelArray = new short[0];
         boolean bgetFields = false;
         String[] ContentList = new String[0];
@@ -261,7 +261,7 @@ public class CommandFieldSelection exten
         return iSelPos;
     }
 
-    private String[] setPrefixinArray(String[] _ContentList, String _sprefix, int _startindex, int _nlen) {
+    public String[] setPrefixinArray(String[] _ContentList, String _sprefix, int _startindex, int _nlen) {
         for (int i = _startindex; i < _startindex + _nlen; i++)
             _ContentList[i] = _sprefix + _ContentList[i];
         return _ContentList;
--- wizards/com/sun/star/wizards/ui/ControlScroller.java	2006-04-07 15:22:07.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/ControlScroller.java	2007-05-24 11:24:05.000000000 +0200
@@ -46,35 +46,35 @@ import com.sun.star.wizards.common.*;
 import java.util.*;
 
 public abstract class ControlScroller {
-    protected WizardDialog CurUnoDialog;
-    protected XMultiServiceFactory xMSF;
-    private Object oImgControl;
-    protected int ncurfieldcount;
-    protected int nblockincrement;
-    private int nlineincrement;
-    protected int nscrollvalue = 0;
-    protected int ntotfieldcount;
+    public WizardDialog CurUnoDialog;
+    public XMultiServiceFactory xMSF;
+    public Object oImgControl;
+    public int ncurfieldcount;
+    public int nblockincrement;
+    public int nlineincrement;
+    public int nscrollvalue = 0;
+    public int ntotfieldcount;
     XScrollBar xScrollBar;
-    protected Vector scrollfields;
-    protected Integer ICompPosX;
-    protected int iCompPosX;
-    protected Integer ICompPosY;
-    protected int iCompPosY;
-    protected Integer ICompWidth;
-    protected int iCompWidth;
-    protected Integer ICompHeight;
-    protected int iCompHeight;
-    protected int iStartPosY;
-    protected short curtabindex;
+    public Vector scrollfields;
+    public Integer ICompPosX;
+    public int iCompPosX;
+    public Integer ICompPosY;
+    public int iCompPosY;
+    public Integer ICompWidth;
+    public int iCompWidth;
+    public Integer ICompHeight;
+    public int iCompHeight;
+    public int iStartPosY;
+    public short curtabindex;
     int iStep;
-    protected Integer IStep;
-    protected int linedistance;
+    public Integer IStep;
+    public int linedistance;
     int iScrollBarWidth = 10;
     int SORELFIRSTPOSY = 3;
-    protected int curHelpIndex;
+    public int curHelpIndex;
     String sIncSuffix;
-    protected Vector ControlGroupVector = new Vector();
-    protected PeerConfig oTitlePeerConfig;
+    public Vector ControlGroupVector = new Vector();
+    public PeerConfig oTitlePeerConfig;
 
     class AdjustmentListenerImpl implements com.sun.star.awt.XAdjustmentListener {
 
@@ -98,7 +98,7 @@ public abstract class ControlScroller {
      * @author bc93774
      */
     // TODO add parameters for tabindices and helpindex
-    protected ControlScroller(WizardDialog _CurUnoDialog, XMultiServiceFactory _xMSF, int _iStep, int _iCompPosX, int _iCompPosY, int _iCompWidth, int _nblockincrement, int _nlinedistance, int _firsthelpindex) {
+    public ControlScroller(WizardDialog _CurUnoDialog, XMultiServiceFactory _xMSF, int _iStep, int _iCompPosX, int _iCompPosY, int _iCompWidth, int _nblockincrement, int _nlinedistance, int _firsthelpindex) {
         this.xMSF = _xMSF;
         this.nblockincrement = _nblockincrement;
         this.CurUnoDialog = _CurUnoDialog;
@@ -139,7 +139,7 @@ public abstract class ControlScroller {
         CurUnoDialog.getPeerConfiguration().setPeerProperties(oImgControl, new String[] { "MouseTransparent" }, new Boolean[] { Boolean.TRUE });
     }
 
-    protected void setScrollBarOrientationHorizontal() {
+    public void setScrollBarOrientationHorizontal() {
         Helper.setUnoPropertyValue(xScrollBar, "Orientation", new Integer(ScrollBarOrientation.HORIZONTAL));
     }
 
@@ -147,7 +147,7 @@ public abstract class ControlScroller {
      * @author bc93774
      * @param _ntotfieldcount: The number of fields that are to be administered by the ControlScroller
      */
-    protected void initialize(int _ntotfieldcount) {
+    public void initialize(int _ntotfieldcount) {
         try {
             boolean bisVisible;
             ntotfieldcount = _ntotfieldcount;
@@ -164,7 +164,7 @@ public abstract class ControlScroller {
         }
     }
 
-    protected void fillupControls(boolean binitialize) {
+    public void fillupControls(boolean binitialize) {
         int newindex;
         PropertyValue[] oldproperties;
         PropertyValue[] newproperties;
@@ -179,7 +179,7 @@ public abstract class ControlScroller {
 
     }
     
-    protected void fillupControls(int guiRow) {
+    public void fillupControls(int guiRow) {
         PropertyValue[] nameProps = (PropertyValue[]) scrollfields.get(guiRow);
         PropertyValue[] valueProps = (PropertyValue[]) scrollfields.get(guiRow + nscrollvalue);
         for (int n = 0; n < nameProps.length; n++) {
@@ -191,34 +191,34 @@ public abstract class ControlScroller {
     }       
         
 
-    protected void setScrollValue(int _nscrollvalue) {
+    public void setScrollValue(int _nscrollvalue) {
         if (_nscrollvalue >= 0) {
             Helper.setUnoPropertyValue(UnoDialog.getModel(xScrollBar), new String("ScrollValue"), new Integer(_nscrollvalue));
             scrollControls();
         }
     }
 
-    protected void setScrollValue(int _nscrollvalue, int _ntotfieldcount) {
+    public void setScrollValue(int _nscrollvalue, int _ntotfieldcount) {
         setTotalFieldCount(_ntotfieldcount);
         setScrollValue(_nscrollvalue);
     }
 
-    protected int getTotalFieldCount() {
+    public int getTotalFieldCount() {
         return ntotfieldcount;
     }
 
-    protected int getCurFieldCount() {
+    public int getCurFieldCount() {
         return ncurfieldcount;
     }
 
-    private void setCurFieldCount() {
+    public void setCurFieldCount() {
         if (ntotfieldcount > nblockincrement)
             ncurfieldcount = nblockincrement;
         else
             ncurfieldcount = ntotfieldcount;
     }
 
-    protected void setTotalFieldCount(int _ntotfieldcount) {
+    public void setTotalFieldCount(int _ntotfieldcount) {
         this.ntotfieldcount = _ntotfieldcount;
         setCurFieldCount();
         if (ntotfieldcount > nblockincrement)
@@ -227,12 +227,12 @@ public abstract class ControlScroller {
             Helper.setUnoPropertyValue(UnoDialog.getModel(xScrollBar), "Enabled", Boolean.FALSE);
     }
 
-    protected void toggleComponent(boolean _bdoenable) {
+    public void toggleComponent(boolean _bdoenable) {
         boolean bdoenable = _bdoenable && (ntotfieldcount > nblockincrement);
         CurUnoDialog.setControlProperty("TitleScrollBar" + sIncSuffix, "Enabled", new Boolean(bdoenable));
     }
 
-    protected void toggleControls(boolean _bdoenable) {
+    public void toggleControls(boolean _bdoenable) {
         for (int n = 0; n < scrollfields.size(); n++) {
             PropertyValue[] curproperties = (PropertyValue[]) scrollfields.elementAt(n);
             for (int m = 0; m < curproperties.length; m++) {
@@ -243,30 +243,30 @@ public abstract class ControlScroller {
 
     }
 
-    protected int getScrollValue() {
+    public int getScrollValue() {
         return nscrollvalue;
     }
 
-    protected void setLineIncrementation(int _nlineincrement) {
+    public void setLineIncrementation(int _nlineincrement) {
         this.nlineincrement = _nlineincrement;
         Helper.setUnoPropertyValue(UnoDialog.getModel(xScrollBar), new String("LineIncrement"), new Integer(nlineincrement));
 
     }
 
-    protected int getLineIncrementation() {
+    public int getLineIncrementation() {
         return nlineincrement;
     }
 
-    protected void setBlockIncrementation(int _nblockincrement) {
+    public void setBlockIncrementation(int _nblockincrement) {
         this.nblockincrement = _nblockincrement;
         Helper.setUnoPropertyValues(UnoDialog.getModel(xScrollBar), new String[] { "Enabled", "BlockIncrement", "ScrollValueMax" }, new Object[] { new Boolean(ntotfieldcount > nblockincrement), new Integer(nblockincrement), new Integer(ntotfieldcount - nblockincrement)});
     }
 
-    protected int getBlockIncrementation() {
+    public int getBlockIncrementation() {
         return nblockincrement;
     }
 
-    private void scrollControls() {
+    public void scrollControls() {
         try {
             scrollRowsInfo();
             nscrollvalue = ((Integer) Helper.getUnoPropertyValue(UnoDialog.getModel(xScrollBar), "ScrollValue")).intValue();
@@ -278,7 +278,7 @@ public abstract class ControlScroller {
         }
     }
 
-    protected void scrollRowsInfo() {
+    public void scrollRowsInfo() {
         int cols = 
             scrollfields.size() > 0 
                 ?   ((PropertyValue[])scrollfields.get(0)).length
@@ -297,7 +297,7 @@ public abstract class ControlScroller {
      * @return the propertyValue object corresponding to 
      * this control.
      */
-    protected PropertyValue fieldInfo(int guiRow, int column) {
+    public PropertyValue fieldInfo(int guiRow, int column) {
         if (guiRow + nscrollvalue < scrollfields.size()) {
             PropertyValue pv = fieldInfo ( 
                 ((PropertyValue[]) scrollfields.elementAt(guiRow + nscrollvalue )) [column],
@@ -311,7 +311,7 @@ public abstract class ControlScroller {
         else return null;
     }
 
-    protected PropertyValue fieldInfo(PropertyValue valueProp, PropertyValue nameProp) {
+    public PropertyValue fieldInfo(PropertyValue valueProp, PropertyValue nameProp) {
         if (CurUnoDialog.xDlgNameAccess.hasByName(nameProp.Name))
             valueProp.Value = getControlData(nameProp.Name);
         else
@@ -319,11 +319,11 @@ public abstract class ControlScroller {
         return valueProp;
     }
 
-    protected void unregisterControlGroup(int _index) {
+    public void unregisterControlGroup(int _index) {
         scrollfields.remove(_index);
     }
 
-    protected void registerControlGroup(PropertyValue[] _currowproperties, int _i) {
+    public void registerControlGroup(PropertyValue[] _currowproperties, int _i) {
         if (_i == 0)
             scrollfields.removeAllElements();
         if (_i >= scrollfields.size())
@@ -332,11 +332,11 @@ public abstract class ControlScroller {
             scrollfields.setElementAt(_currowproperties, _i);
     }
 
-    protected PropertyValue[] getControlGroupInfo(int _i) {
+    public PropertyValue[] getControlGroupInfo(int _i) {
         return (PropertyValue[]) scrollfields.elementAt(_i);
     }
 
-    protected void setControlData(String controlname, Object newvalue) {
+    public void setControlData(String controlname, Object newvalue) {
         Object oControlModel = UnoDialog.getModel(CurUnoDialog.xDlgContainer.getControl(controlname));
         String propertyname = UnoDialog.getDisplayProperty(oControlModel);
         if (propertyname != "") {
@@ -344,7 +344,7 @@ public abstract class ControlScroller {
         }
     }
 
-    protected Object getControlData(String controlname) {
+    public Object getControlData(String controlname) {
         Object oControlModel = UnoDialog.getModel(CurUnoDialog.xDlgContainer.getControl(controlname));
         String propertyname = UnoDialog.getDisplayProperty(oControlModel);
         if (propertyname != "")  
@@ -353,7 +353,7 @@ public abstract class ControlScroller {
             return null;
     }
 
-    protected PropertyValue[][] getScrollFieldValues() {
+    public PropertyValue[][] getScrollFieldValues() {
         scrollRowsInfo();
         PropertyValue[] curproperties;
         PropertyValue[][] retproperties;
@@ -370,7 +370,7 @@ public abstract class ControlScroller {
         }
     }
 
-    protected abstract void initializeScrollFields();
+    public abstract void initializeScrollFields();
 
     /** inserts a group of controls into the component. The group may either be a row or a column of controls 
      *  The controls should be put on Step 99 (means made invisible at first). All the controlrows that are needed are than
@@ -379,9 +379,9 @@ public abstract class ControlScroller {
      * @param i: The index of the control group
      * @param npos: Can be an x coordinate or an y coordinate which depends on the orientation of the scrollbar
      */
-    protected abstract void insertControlGroup(int _index, int npos);
+    public abstract void insertControlGroup(int _index, int npos);
 
-    protected abstract void setControlGroupVisible(int _index, boolean _bIsVisible);
+    public abstract void setControlGroupVisible(int _index, boolean _bIsVisible);
     
     
 }
--- wizards/com/sun/star/wizards/ui/DBLimitedFieldSelection.java	2006-04-07 15:22:31.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/DBLimitedFieldSelection.java	2007-05-24 11:24:05.000000000 +0200
@@ -45,20 +45,20 @@ import com.sun.star.wizards.common.JavaT
  * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
  */
 public abstract class DBLimitedFieldSelection {
-    protected XMultiServiceFactory xMSF;
-    protected WizardDialog CurUnoDialog;
-    protected String sNoField;
-    protected Integer IStep;
-    protected Integer ICompPosX;
-    protected Integer ICompPosY;
-    protected Integer ICompWidth;
-    protected final int rowcount = 4;   
-    protected final int MAXSELINDEX = rowcount - 1;
-    protected short curtabindex;
-    protected int iCurPosY;
-    protected int FirstHelpIndex;
-    protected int iCompPosX;
-    protected int MaxSelIndex;
+    public XMultiServiceFactory xMSF;
+    public WizardDialog CurUnoDialog;
+    public String sNoField;
+    public Integer IStep;
+    public Integer ICompPosX;
+    public Integer ICompPosY;
+    public Integer ICompWidth;
+    public final int rowcount = 4;   
+    public final int MAXSELINDEX = rowcount - 1;
+    public short curtabindex;
+    public int iCurPosY;
+    public int FirstHelpIndex;
+    public int iCompPosX;
+    public int MaxSelIndex;
     
     
     public DBLimitedFieldSelection(WizardDialog _CurUnoDialog, int iStep, int _iCompPosX, int iCompPosY, int iCompWidth, int _FirstHelpIndex){
@@ -80,18 +80,18 @@ public abstract class DBLimitedFieldSele
     }
     
     
-    protected abstract void insertControlGroup(int index);
+    public abstract void insertControlGroup(int index);
     
-    protected abstract void toggleControlRow(int CurIndex, boolean bDoEnable);
+    public abstract void toggleControlRow(int CurIndex, boolean bDoEnable);
     
-    protected abstract void enableNextControlRow(int CurIndex);
+    public abstract void enableNextControlRow(int CurIndex);
 
-    protected abstract void updateFromNextControlRow(int CurIndex);
+    public abstract void updateFromNextControlRow(int CurIndex);
     
-    protected abstract void setMaxSelIndex();
+    public abstract void setMaxSelIndex();
     
     
-    protected void moveupSelectedItems(int CurIndex, boolean bDoEnable){    
+    public void moveupSelectedItems(int CurIndex, boolean bDoEnable){    
         short iNextItemPos;
         if ((bDoEnable == false) && (MAXSELINDEX > CurIndex)) {
             for (int i = CurIndex; i < MAXSELINDEX; i++) {
@@ -104,7 +104,7 @@ public abstract class DBLimitedFieldSele
     }
 
     
-    protected String[] addNoneFieldItemToList(String[] _FieldNames){
+    public String[] addNoneFieldItemToList(String[] _FieldNames){
         int FieldCount = _FieldNames.length;
         String[] ViewFieldNames = new String[FieldCount + 1];
         ViewFieldNames[0] = sNoField;
@@ -114,7 +114,7 @@ public abstract class DBLimitedFieldSele
     }
 
 
-    protected void initializeListBox(XListBox xListBox, String[] _AllFieldNames, String[] _SelFieldNames, int curindex){
+    public void initializeListBox(XListBox xListBox, String[] _AllFieldNames, String[] _SelFieldNames, int curindex){
         short[] SelList = null;     
         Helper.setUnoPropertyValue(UnoDialog.getModel(xListBox),"StringItemList", _AllFieldNames);
         if (_SelFieldNames != null){
@@ -134,7 +134,7 @@ public abstract class DBLimitedFieldSele
     }
     
         
-    protected void initializeListBox(XListBox xListBox, String[] _AllFieldNames, String _SelFieldName){
+    public void initializeListBox(XListBox xListBox, String[] _AllFieldNames, String _SelFieldName){
         Helper.setUnoPropertyValue(UnoDialog.getModel(xListBox),"StringItemList", _AllFieldNames);
         short[] SelList = null;
         int index = JavaTools.FieldInList(_AllFieldNames, _SelFieldName);
--- wizards/com/sun/star/wizards/ui/DocumentPreview.java	2006-04-07 15:22:57.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/DocumentPreview.java	2007-05-24 11:24:05.000000000 +0200
@@ -56,22 +56,22 @@ public class DocumentPreview  {
     /**
      * The window in which the preview is showed.
      */
-    private XWindow xWindow;
+    public XWindow xWindow;
     /**
      * The frame service which is used to show the preview
      */
-    private XFrame xFrame;
+    public XFrame xFrame;
     /**
      * The content component of the frame.
      */
-    private XComponent xComponent;
+    public XComponent xComponent;
 
-    private XControl xControl;
+    public XControl xControl;
 
-    private int step;
+    public int step;
 
-    private PropertyValue[] loadArgs;
-    private String url;
+    public PropertyValue[] loadArgs;
+    public String url;
 
     public static final int PREVIEW_MODE = 1;
 
@@ -91,7 +91,7 @@ public class DocumentPreview  {
         createPreviewFrame(xmsf, xControl);
     }
 
-    protected XComponent setDocument(String url_, String[] propNames, Object[] propValues) throws com.sun.star.lang.IllegalArgumentException, IOException, CloseVetoException {
+    public XComponent setDocument(String url_, String[] propNames, Object[] propValues) throws com.sun.star.lang.IllegalArgumentException, IOException, CloseVetoException {
         url = url_;
 
         Properties ps = new Properties();
@@ -102,7 +102,7 @@ public class DocumentPreview  {
         return setDocument(url, ps.getProperties());
     }
 
-    protected XComponent setDocument(String url, PropertyValue[] lArgs) throws com.sun.star.lang.IllegalArgumentException, IOException, CloseVetoException {
+    public XComponent setDocument(String url, PropertyValue[] lArgs) throws com.sun.star.lang.IllegalArgumentException, IOException, CloseVetoException {
         loadArgs = lArgs;
         XComponentLoader xCompLoader = (XComponentLoader) UnoRuntime.queryInterface(XComponentLoader.class, xFrame);
         xFrame.activate();
@@ -116,7 +116,7 @@ public class DocumentPreview  {
         setDocument(url, loadArgs);
     }
 
-    private void closeFrame() throws CloseVetoException {
+    public void closeFrame() throws CloseVetoException {
         if (xFrame != null)
              ((XCloseable) UnoRuntime.queryInterface(XCloseable.class, xFrame)).close(false);
     }
--- wizards/com/sun/star/wizards/ui/event/AbstractListener.java	2006-04-07 15:30:35.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/AbstractListener.java	2007-05-24 11:24:05.000000000 +0200
@@ -54,7 +54,7 @@ import java.util.Hashtable;
  * @author  rpiterman
  */
 public class AbstractListener {
-    private Hashtable mHashtable = new Hashtable();
+    public Hashtable mHashtable = new Hashtable();
 
     /** Creates a new instance of AbstractListener */
     public AbstractListener() {
--- wizards/com/sun/star/wizards/ui/event/DataAwareFields.java	2006-04-07 15:31:36.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/DataAwareFields.java	2007-05-24 11:24:05.000000000 +0200
@@ -47,8 +47,8 @@ import com.sun.star.uno.Any;
  * @see com.sun.star.wizards.ui.event.DataAware.Value 
  */
 public class DataAwareFields {
-    private static final String TRUE = "true";
-    private static final String FALSE = "false";
+    public static final String TRUE = "true";
+    public static final String FALSE = "false";
 
     /**
      * returns a Value Object which sets and gets values
@@ -90,7 +90,7 @@ public class DataAwareFields {
      * an abstract implementation of DataAware.Value to access
      * object memebers (fields) usign reflection.
      */
-    private static abstract class FieldValue implements DataAware.Value {
+    public static abstract class FieldValue implements DataAware.Value {
         Field field;
 
         public FieldValue(Field field_) {
@@ -103,8 +103,8 @@ public class DataAwareFields {
 
     }
 
-    private static class BooleanFieldValue extends FieldValue {
-        private Class convertTo;
+    public static class BooleanFieldValue extends FieldValue {
+        public Class convertTo;
 
         public BooleanFieldValue(Field f, Class convertTo_) {
             super(f);
@@ -143,8 +143,8 @@ public class DataAwareFields {
 
     }
 
-    private static class IntFieldValue extends FieldValue {
-        private Class convertTo;
+    public static class IntFieldValue extends FieldValue {
+        public Class convertTo;
 
         public IntFieldValue(Field f, Class convertTo_) {
             super(f);
@@ -182,8 +182,8 @@ public class DataAwareFields {
         }
 
     }
-    private static class DoubleFieldValue extends FieldValue {
-        private Class convertTo;
+    public static class DoubleFieldValue extends FieldValue {
+        public Class convertTo;
 
         public DoubleFieldValue(Field f, Class convertTo_) {
             super(f);
@@ -220,8 +220,8 @@ public class DataAwareFields {
         }
     }
 
-    private static class ConvertedStringValue extends FieldValue {
-        private Class convertTo;
+    public static class ConvertedStringValue extends FieldValue {
+        public Class convertTo;
 
         public ConvertedStringValue(Field f, Class convertTo_) {
             super(f);
@@ -264,7 +264,7 @@ public class DataAwareFields {
         }
     }
 
-    private static class SimpleFieldValue extends FieldValue {
+    public static class SimpleFieldValue extends FieldValue {
 
         public SimpleFieldValue(Field f) {
             super(f);
@@ -300,7 +300,7 @@ public class DataAwareFields {
         }
     }
 
-    private static double toDouble(Object value) {
+    public static double toDouble(Object value) {
         if (value instanceof Boolean)
             return ((Boolean) value).booleanValue() ? 1 : 0;
         else if (value instanceof Number)
@@ -313,7 +313,7 @@ public class DataAwareFields {
             throw new IllegalArgumentException("Can't convert value to double." + value.getClass().getName());
     }
 
-    private static boolean toBoolean(Object value) {
+    public static boolean toBoolean(Object value) {
         if (value instanceof Boolean)
             return ((Boolean) value).booleanValue();
         else if (value instanceof Number)
@@ -326,15 +326,15 @@ public class DataAwareFields {
             throw new IllegalArgumentException("Can't convert value to boolean." + value.getClass().getName());
     }
 
-    private static int toInt(boolean b) {
+    public static int toInt(boolean b) {
         return b ? 1 : 0;
     }
 
-    private static short[] toShortArray(double i) {
+    public static short[] toShortArray(double i) {
         return new short[] {(short) i };
     }
 
-    private static Number toNumber(double i, Class c) {
+    public static Number toNumber(double i, Class c) {
         if (c.equals(Integer.class))
             return new Integer((int) i);
         else if (c.equals(Short.class))
--- wizards/com/sun/star/wizards/ui/event/DataAware.java	2006-04-07 15:31:17.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/DataAware.java	2007-05-24 11:24:05.000000000 +0200
@@ -56,26 +56,26 @@ import java.util.Iterator;
  * Data Object.
  */
 public abstract class DataAware {
-    protected static Class[] EMPTY_ARRAY = new Class[0];
+    public static Class[] EMPTY_ARRAY = new Class[0];
 
     /**
      * this is the data object.
      */
-    protected Object dataObject;
+    public Object dataObject;
     //protected Method setMethod;
     //protected Method getMethod;
     /**
      * A Value Object knows how to get/set a value
      * from/to the data object.
      */
-    protected Value value;
+    public Value value;
     
     /**
      * creates a DataAware object for the given data object and Value object.
      * @param dataObject_
      * @param value_
      */
-    protected DataAware(Object dataObject_, Value value_) {
+    public DataAware(Object dataObject_, Value value_) {
         dataObject = dataObject_;
         value = value_;
         //getMethod = createGetMethod(dataPropName, dataObject);
@@ -115,7 +115,7 @@ public abstract class DataAware {
      * another kind of Data is needed.
      * @param newValue the new value to set to the DataObject.
      */
-    protected void setToData(Object newValue) {
+    public void setToData(Object newValue) {
         value.set(newValue,getDataObject());
     }
 
@@ -125,7 +125,7 @@ public abstract class DataAware {
      * the value object.
      * @return the current value of the data object.
      */
-    protected Object getFromData() {
+    public Object getFromData() {
         return value.get(getDataObject());
     }
     
@@ -133,13 +133,13 @@ public abstract class DataAware {
      * sets the given value to the UI control
      * @param newValue the value to set to the ui control.
      */
-    protected abstract void setToUI(Object newValue);
+    public abstract void setToUI(Object newValue);
 
     /**
      * gets the current value from the UI control.
      * @return the current value from the UI control.
      */
-    protected abstract Object getFromUI();
+    public abstract Object getFromUI();
 
     /**
      * updates the UI control according to the
@@ -162,7 +162,7 @@ public abstract class DataAware {
      * enables
      * @param currentValue
      */
-    protected void enableControls(Object currentValue) {
+    public void enableControls(Object currentValue) {
     }
 
     /**
@@ -189,7 +189,7 @@ public abstract class DataAware {
      * @param b second object to compare.
      * @return true if both are null or both are equal.
      */
-    protected boolean equals(Object a, Object b) {
+    public boolean equals(Object a, Object b) {
         if (a == null && b == null)
             return true;
         if (a == null || b == null)
@@ -275,11 +275,11 @@ public abstract class DataAware {
         /**
          * the get method of the JavaBean-style property
          */
-        private Method getMethod;
+        public Method getMethod;
         /**
          * the set method of the JavaBean-style property
          */
-        private Method setMethod;
+        public Method setMethod;
 
         /**
          * creates a PropertyValue for the property with
@@ -299,7 +299,7 @@ public abstract class DataAware {
          * @param obj the object which contains the property.
          * @return the get method reflection object.
          */
-        protected Method createGetMethod(String propName, Object obj) {
+        public Method createGetMethod(String propName, Object obj) {
             Method m = null;
             try { //try to get a "get" method.
                 m = obj.getClass().getMethod("get" + propName, EMPTY_ARRAY);
@@ -333,7 +333,7 @@ public abstract class DataAware {
         
         }
 
-        protected Method createSetMethod(String propName, Object obj, Class paramClass) {
+        public Method createSetMethod(String propName, Object obj, Class paramClass) {
             Method m = null;
             try {
                 m = obj.getClass().getMethod("set" + propName, new Class[] { paramClass });
--- wizards/com/sun/star/wizards/ui/event/ListModelBinder.java	2006-04-07 15:32:33.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/ListModelBinder.java	2007-05-24 11:24:05.000000000 +0200
@@ -47,10 +47,10 @@ import com.sun.star.wizards.common.Helpe
 
  * */
 public class ListModelBinder implements ListDataListener {
-    private XListBox unoList;
-    private Object unoListModel;
-    private ListModel listModel;
-    private Renderer renderer = new Renderer() {
+    public XListBox unoList;
+    public Object unoListModel;
+    public ListModel listModel;
+    public Renderer renderer = new Renderer() {
         public String render(Object item) {
             if (item == null)
                 return "";
@@ -82,32 +82,32 @@ public class ListModelBinder implements 
         setSelectedItems(selected);
     }
 
-    protected void update(short i) {
+    public void update(short i) {
         remove(i, i);
         insert(i);
     }
 
-    protected void remove(short i1, short i2) {
+    public void remove(short i1, short i2) {
         unoList.removeItems((short) i1, (short) (i2 - i1 + 1));
     }
 
-    protected void insert(short i) {
+    public void insert(short i) {
         unoList.addItem(getItemString(i), i);
     }
 
-    protected String getItemString(short i) {
+    public String getItemString(short i) {
         return getItemString(listModel.getElementAt((int) i));
     }
 
-    protected String getItemString(Object item) {
+    public String getItemString(Object item) {
         return renderer.render(item);
     }
 
-    protected short[] getSelectedItems() {
+    public short[] getSelectedItems() {
         return (short[]) Helper.getUnoPropertyValue(unoListModel, "SelectedItems");
     }
 
-    protected void setSelectedItems(short[] selected) {
+    public void setSelectedItems(short[] selected) {
         Helper.setUnoPropertyValue(unoListModel, "SelectedItems", selected);
     }
 
--- wizards/com/sun/star/wizards/ui/event/RadioDataAware.java	2006-04-07 15:33:15.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/RadioDataAware.java	2007-05-24 11:24:05.000000000 +0200
@@ -44,7 +44,7 @@ import com.sun.star.uno.UnoRuntime;
  * Window>Preferences>Java>Code Generation>Code and Comments
  */
 public class RadioDataAware extends DataAware {
-    protected XRadioButton[] radioButtons;
+    public XRadioButton[] radioButtons;
 
     public RadioDataAware(Object data, Value value, Object[] radioButs) {
         super(data, value);
@@ -56,7 +56,7 @@ public class RadioDataAware extends Data
     /* (non-Javadoc)
      * @see com.sun.star.wizards.ui.DataAware#setToUI(java.lang.Object)
      */
-    protected void setToUI(Object value) {
+    public void setToUI(Object value) {
         int selected = ((Number) value).intValue();
         if (selected == -1)
             for (int i = 0; i < radioButtons.length; i++)
@@ -68,7 +68,7 @@ public class RadioDataAware extends Data
     /* (non-Javadoc)
      * @see com.sun.star.wizards.ui.DataAware#getFromUI()
      */
-    protected Object getFromUI() {
+    public Object getFromUI() {
         for (int i = 0; i < radioButtons.length; i++)
             if (radioButtons[i].getState())
                 return new Integer(i);
--- wizards/com/sun/star/wizards/ui/event/SimpleDataAware.java	2006-04-07 15:33:39.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/SimpleDataAware.java	2007-05-24 11:24:05.000000000 +0200
@@ -37,9 +37,9 @@ package com.sun.star.wizards.ui.event;
 
 public class SimpleDataAware extends DataAware {
 
-    protected Object control;
-    protected Object[] disableObjects = new Object[0];
-    protected Value controlValue;
+    public Object control;
+    public Object[] disableObjects = new Object[0];
+    public Value controlValue;
 
     public SimpleDataAware(Object dataObject, Value value, Object control_, Value controlValue_ ) {
         super(dataObject, value);
@@ -48,14 +48,14 @@ public class SimpleDataAware extends Dat
     }
 
     /*
-    protected void enableControls(Object value) {
+    public void enableControls(Object value) {
         Boolean b = getBoolean(value);
         for (int i = 0; i<disableObjects.length; i++)
             UIHelper.setEnabled(disableObjects[i],b);
     }
     */
 
-    protected void setToUI(Object value) {
+    public void setToUI(Object value) {
         controlValue.set(value,control);
     }
 
@@ -85,7 +85,7 @@ public class SimpleDataAware extends Dat
     }
     */
 
-    protected Object getFromUI() {
+    public Object getFromUI() {
         return controlValue.get(control);
     }
 
--- wizards/com/sun/star/wizards/ui/event/TaskEvent.java	2006-04-07 15:34:39.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/TaskEvent.java	2007-05-24 11:24:05.000000000 +0200
@@ -49,7 +49,7 @@ public class TaskEvent extends EventObje
     public static final int SUBTASK_NAME_CHANGED = 4;
     public static final int TASK_FAILED = 5;
     
-    private int type;
+    public int type;
     
     /**
      * general constructor-
--- wizards/com/sun/star/wizards/ui/event/Task.java	2006-04-07 15:34:04.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/Task.java	2007-05-24 11:24:05.000000000 +0200
@@ -43,13 +43,13 @@ import java.util.Vector;
  * Window>Preferences>Java>Code Generation>Code and Comments
  */
 public class Task {
-    private int successfull = 0;
-    private int failed = 0;
+    public int successfull = 0;
+    public int failed = 0;
     
-    private int max = 0;
-    private String taskName;
-    private List listeners = new Vector();
-    private String subtaskName;
+    public int max = 0;
+    public String taskName;
+    public List listeners = new Vector();
+    public String subtaskName;
     
     
     public Task(String taskName_ , String subtaskName_, int max_) {
@@ -102,35 +102,35 @@ public class Task {
         listeners.remove(tl);
     }
     
-    protected void fireTaskStatusChanged() {
+    public void fireTaskStatusChanged() {
         TaskEvent te = new TaskEvent(this, TaskEvent.TASK_STATUS_CHANGED);
         
         for (int i = 0; i<listeners.size(); i++)
           ((TaskListener)listeners.get(i)).taskStatusChanged(te);
     }
     
-    protected void fireTaskStarted() {  
+    public void fireTaskStarted() {  
         TaskEvent te = new TaskEvent(this, TaskEvent.TASK_STARTED);
         
         for (int i = 0; i<listeners.size(); i++)
           ((TaskListener)listeners.get(i)).taskStarted(te);
     }
     
-    protected void fireTaskFailed() {   
+    public void fireTaskFailed() {   
             TaskEvent te = new TaskEvent(this, TaskEvent.TASK_FAILED);
         
             for (int i = 0; i<listeners.size(); i++)
               ((TaskListener)listeners.get(i)).taskFinished(te);
         }
     
-    protected void fireTaskFinished() {
+    public void fireTaskFinished() {
         TaskEvent te = new TaskEvent(this, TaskEvent.TASK_FINISHED);
         
         for (int i = 0; i<listeners.size(); i++)
           ((TaskListener)listeners.get(i)).taskFinished(te);
     }
     
-    protected void fireSubtaskNameChanged() {
+    public void fireSubtaskNameChanged() {
         TaskEvent te = new TaskEvent(this, TaskEvent.SUBTASK_NAME_CHANGED);
     
         for (int i = 0; i<listeners.size(); i++)
--- wizards/com/sun/star/wizards/ui/event/UnoDataAware.java	2006-04-07 15:35:48.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/event/UnoDataAware.java	2007-05-24 11:24:05.000000000 +0200
@@ -52,13 +52,13 @@ import com.sun.star.wizards.common.Helpe
  */
 public class UnoDataAware extends DataAware {
 
-    protected Object unoControl;
-    protected Object unoModel;
-    protected String unoPropName;
-    protected Object[] disableObjects = new Object[0];
-    protected boolean inverse = false;
+    public Object unoControl;
+    public Object unoModel;
+    public String unoPropName;
+    public Object[] disableObjects = new Object[0];
+    public boolean inverse = false;
 
-    protected UnoDataAware(Object dataObject, Value value, Object unoObject_, String unoPropName_) {
+    public UnoDataAware(Object dataObject, Value value, Object unoObject_, String unoPropName_) {
         super(dataObject, value);
         unoControl = unoObject_;
         unoModel = getModel(unoControl);
@@ -69,7 +69,7 @@ public class UnoDataAware extends DataAw
         inverse = i;
     }
 
-    protected void enableControls(Object value) {
+    public void enableControls(Object value) {
         Boolean b = getBoolean(value);
         if (inverse)
             b = b.booleanValue() ? Boolean.FALSE : Boolean.TRUE;
@@ -77,12 +77,12 @@ public class UnoDataAware extends DataAw
             setEnabled(disableObjects[i], b);
     }
 
-    protected void setToUI(Object value) {
+    public void setToUI(Object value) {
         //System.out.println("Settings uno property : "+ Helper.getUnoPropertyValue(this.unoModel,"Name") + "<-" +stringof(value));
         Helper.setUnoPropertyValue(unoModel, unoPropName, value);
     }
     
-    private String stringof(Object value) {
+    public String stringof(Object value) {
         if (value.getClass().isArray()) {
             StringBuffer sb = new StringBuffer("[");
             for (int i = 0 ; i<((short[])value).length; i++)
@@ -106,7 +106,7 @@ public class UnoDataAware extends DataAw
      * @param value
      * @return
      */
-    protected Boolean getBoolean(Object value) {
+    public Boolean getBoolean(Object value) {
         if (value == null)
             return Boolean.FALSE;
         if (value instanceof Boolean)
@@ -125,11 +125,11 @@ public class UnoDataAware extends DataAw
         disableObjects = controls;
     }
 
-    protected Object getFromUI() {
+    public Object getFromUI() {
         return Helper.getUnoPropertyValue(unoModel, unoPropName);
     }
 
-    private static UnoDataAware attachTextControl(Object data, String prop, Object unoText, final Listener listener, String unoProperty, boolean field, Object value) {
+    public static UnoDataAware attachTextControl(Object data, String prop, Object unoText, final Listener listener, String unoProperty, boolean field, Object value) {
         XTextComponent text = (XTextComponent) UnoRuntime.queryInterface(XTextComponent.class, unoText);
         final UnoDataAware uda = new UnoDataAware(data,
             field 
--- wizards/com/sun/star/wizards/ui/FieldSelection.java	2006-12-01 17:49:43.000000000 +0100
+++ wizards/com/sun/star/wizards/ui/FieldSelection.java	2007-05-24 11:24:05.000000000 +0200
@@ -49,9 +49,9 @@ public class FieldSelection {
     public XFieldSelectionListener xFieldSelection;
     public int maxfieldcount = 10000000;
     public String sIncSuffix;
-    protected Integer IStep;
-    protected int FirstHelpIndex;
-    protected short curtabindex;
+    public Integer IStep;
+    public int FirstHelpIndex;
+    public short curtabindex;
     String[] AllFieldNames;
     public Integer ListBoxWidth;
     public Integer SelListBoxPosX;
@@ -266,7 +266,7 @@ public class FieldSelection {
     }
 
     // Todo: If Value is getting smaller than zero -> throw exception
-    private Integer[] getYButtonPositions(int ButtonCount) {
+    public Integer[] getYButtonPositions(int ButtonCount) {
         Integer[] YPosArray;
         if (ButtonCount > 0) {
             YPosArray = new Integer[ButtonCount];
@@ -287,7 +287,7 @@ public class FieldSelection {
     }
 
 
-    private void changeSelectionOrder(int iNeighbor) {
+    public void changeSelectionOrder(int iNeighbor) {
         short[] iSelIndices = xSelFieldsListBox.getSelectedItemsPos();
         // Todo: we are assuming that the array starts with the lowest index. Verfy this assumption!!!!!
         if (iSelIndices.length == 1) {
@@ -329,7 +329,7 @@ public class FieldSelection {
 
     // Enable or disable the buttons used for moving the available
     // fields between the two list boxes.
-    protected void toggleListboxButtons(short iFieldsSelIndex, short iSelFieldsSelIndex) {
+    public void toggleListboxButtons(short iFieldsSelIndex, short iSelFieldsSelIndex) {
         try {
             boolean bmoveUpenabled = false;
             boolean bmoveDownenabled = false;
@@ -357,7 +357,7 @@ public class FieldSelection {
     }
 
 
-    protected void toggleMoveButtons(boolean _btoggleMoveAll, boolean _btoggleMoveSelected) {
+    public void toggleMoveButtons(boolean _btoggleMoveAll, boolean _btoggleMoveSelected) {
         boolean btoggleMoveAll = (((xFieldsListBox.getItemCount() + xSelFieldsListBox.getItemCount()) < maxfieldcount) && (_btoggleMoveAll));
         boolean btoggleMoveSelected = (((xFieldsListBox.getSelectedItems().length + xSelFieldsListBox.getItemCount()) < maxfieldcount) && (_btoggleMoveSelected));
         CurUnoDialog.setControlProperty("cmdMoveAll" + sIncSuffix, "Enabled", new Boolean(btoggleMoveAll));
--- wizards/com/sun/star/wizards/ui/FilterComponent.java	2006-12-01 17:49:56.000000000 +0100
+++ wizards/com/sun/star/wizards/ui/FilterComponent.java	2007-05-24 11:24:05.000000000 +0200
@@ -70,18 +70,18 @@ public class FilterComponent{
     public String[] FieldNames;
     XRadioButton optMatchAll;
     XRadioButton optMatchAny;
-    private String soptMatchAll;
-    private String soptMatchAny;
-    private String[] sHeadLines;
-    private String slblFieldNames;
-    private String slblOperators;
-    private String slblValue;
+    public String soptMatchAll;
+    public String soptMatchAny;
+    public String[] sHeadLines;
+    public String slblFieldNames;
+    public String slblOperators;
+    public String slblValue;
     WizardDialog CurUnoDialog;
-    private int BaseID = 2300;
-    private String sIncSuffix;
-    private ControlRow[] oControlRows;
-    private Vector FilterNames;
-    private String sDuplicateCondition;
+    public int BaseID = 2300;
+    public String sIncSuffix;
+    public ControlRow[] oControlRows;
+    public Vector FilterNames;
+    public String sDuplicateCondition;
     final int SOLSTFIELDNAME = 3;
     final int SOLSTOPERATOR = 4;
     final int SOTXTVALUE = 5;
@@ -201,7 +201,7 @@ public class FilterComponent{
     }
 
 
-    private void togglefollowingControlRow(String _scurName){
+    public void togglefollowingControlRow(String _scurName){
         String sNameSuffix = sIncSuffix + "_" + _scurName.substring(_scurName.length() - 1, _scurName.length());
         int Index = Integer.valueOf(_scurName.substring(_scurName.length() - 1, _scurName.length())).intValue();
         if (Index < oControlRows.length)
@@ -209,7 +209,7 @@ public class FilterComponent{
     }
 
 
-    private String getControlName(Object _oSourceevent){
+    public String getControlName(Object _oSourceevent){
     try {
         XControl xControl = (XControl) UnoRuntime.queryInterface(XControl.class, _oSourceevent);
         XPropertySet xPSet = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class, xControl.getModel());
@@ -315,7 +315,7 @@ public class FilterComponent{
         }
     }
 
-    private int getfilterstate() {
+    public int getfilterstate() {
         boolean bisany = true;
         bisany = (this.optMatchAny.getState()) == true;
         if (bisany)
@@ -325,7 +325,7 @@ public class FilterComponent{
         return ifilterstate;
     }
 
-    private void addfiltercondition(int _index, String _curFieldName, Object _curValue, int _curOperator) {
+    public void addfiltercondition(int _index, String _curFieldName, Object _curValue, int _curOperator) {
         try {
             String ValString = String.valueOf(_curValue);
             PropertyValue oPropertyValue = Properties.createProperty(_curFieldName, ValString, _curOperator);
@@ -341,7 +341,7 @@ public class FilterComponent{
         }
     }
 
-    private int getFilterCount() {
+    public int getFilterCount() {
         int a = 0;
         for (int i = 0; i < RowCount; i++)
             if (oControlRows[i].isEnabled() && oControlRows[i].isComplete())
@@ -432,11 +432,11 @@ public class FilterComponent{
 
 
         class ControlRow {
-            protected XInterface[] ControlElements = new XInterface[6];
-            private boolean bEnabled;
+            public XInterface[] ControlElements = new XInterface[6];
+            public boolean bEnabled;
             String[] FieldNames;
 
-            protected ControlRow(int iCompPosY, int Index, boolean _bEnabled, int _firstRowHelpID) {
+            public ControlRow(int iCompPosY, int Index, boolean _bEnabled, int _firstRowHelpID) {
             try {
                 String sCompSuffix = sIncSuffix + "_" + String.valueOf(Index + 1);
                 this.bEnabled = _bEnabled;
@@ -487,7 +487,7 @@ public class FilterComponent{
             }
 
 
-            protected void setCondition(PropertyValue _filtercondition) {
+            public void setCondition(PropertyValue _filtercondition) {
             try {
                 int ikey;
                 XListBox xFieldsListBox = (XListBox) UnoRuntime.queryInterface(XListBox.class, ControlElements[SOLSTFIELDNAME]);
@@ -514,22 +514,22 @@ public class FilterComponent{
             }}
 
 
-            protected void setFieldNames(String[] _FieldNames) {
+            public void setFieldNames(String[] _FieldNames) {
                 Helper.setUnoPropertyValue(UnoDialog.getModel(ControlElements[SOLSTFIELDNAME]), "StringItemList", _FieldNames);
                 FieldNames = _FieldNames;
             }
 
-            protected boolean isEnabled() {
+            public boolean isEnabled() {
                 return bEnabled;
             }
 
-            protected void settovoid() {
+            public void settovoid() {
                 CurUnoDialog.deselectListBox(ControlElements[SOLSTFIELDNAME]);
                 CurUnoDialog.deselectListBox(ControlElements[SOLSTOPERATOR]);
                 Helper.setUnoPropertyValue(UnoDialog.getModel(ControlElements[SOTXTVALUE]), "EffectiveValue", com.sun.star.uno.Any.VOID);
             }
 
-            protected void setEnabled(boolean _bEnabled) {
+            public void setEnabled(boolean _bEnabled) {
                 for (int i = 0; i < ControlElements.length; i++)
                     Helper.setUnoPropertyValue(UnoDialog.getModel(ControlElements[i]), "Enabled", new Boolean(_bEnabled));
                 bEnabled = _bEnabled;
@@ -548,7 +548,7 @@ public class FilterComponent{
                         CurUnoDialog.deselectListBox(ControlElements[SOLSTOPERATOR]);
             }
 
-            protected String getSelectedFieldName() {
+            public String getSelectedFieldName() {
                 try {
                     short[] SelFields = (short[]) AnyConverter.toArray(Helper.getUnoPropertyValue(UnoDialog.getModel(ControlElements[SOLSTFIELDNAME]), "SelectedItems"));
                     return FieldNames[SelFields[0]];
@@ -559,7 +559,7 @@ public class FilterComponent{
             }
 
             // TODO: check if it is really useful to match the indices of the listbox the API constants
-            protected short getSelectedOperator() {
+            public short getSelectedOperator() {
                 try {
                     short[] SelFields = (short[]) AnyConverter.toArray(Helper.getUnoPropertyValue(UnoDialog.getModel(ControlElements[SOLSTOPERATOR]), "SelectedItems"));
                     return SelFields[0];
@@ -570,7 +570,7 @@ public class FilterComponent{
             }
 
             // TODO make a difference between Text and Numbers
-            protected Object getValue() {
+            public Object getValue() {
                 try {
                     return (Helper.getUnoPropertyValue(UnoDialog.getModel(ControlElements[SOTXTVALUE]), "EffectiveValue"));
                 } catch (Exception exception) {
@@ -579,7 +579,7 @@ public class FilterComponent{
                 }
             }
 
-            protected Object getText() {
+            public Object getText() {
                 try {
                     return (Helper.getUnoPropertyValue(UnoDialog.getModel(ControlElements[SOTXTVALUE]), "Text"));
                 } catch (Exception exception) {
@@ -588,7 +588,7 @@ public class FilterComponent{
                 }
             }
             
-            protected String getDateTimeString(boolean bgetDate) {
+            public String getDateTimeString(boolean bgetDate) {
             try {
                 double dblValue = ((Double) getValue()).doubleValue();
                 NumberFormatter oNumberFormatter = oQueryMetaData.getNumberFormatter();
--- wizards/com/sun/star/wizards/ui/ImageList.java	2006-04-07 15:24:04.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/ImageList.java	2007-05-24 11:24:05.000000000 +0200
@@ -55,54 +55,54 @@ import javax.swing.event.ListDataListene
  */
     public class ImageList implements XItemEventBroadcaster, ListDataListener{
 
-    private XControl imgContainer;
-    private XFixedText lblImageText;
-    private XFixedText grbxSelectedImage;
-    private XButton btnBack;
-    private XButton btnNext;
-    private XFixedText lblCounter;
-    private XControl images[];
-    private boolean benabled = true;
-    private UnoDialog2 oUnoDialog;
-    private Size gap = new Size(4, 4);
-    private int cols = 4;
-    private int rows = 3;
-    private Size imageSize = new Size(20, 20);
-    private Size pos;
-    private Size selectionGap = new Size(2, 2);
-    private boolean showButtons = true;
-    private Short step;
-    private final static Short NO_BORDER = new Short((short) 0);
-    private boolean refreshOverNull = true;
-    private int imageTextLines = 1;
+    public XControl imgContainer;
+    public XFixedText lblImageText;
+    public XFixedText grbxSelectedImage;
+    public XButton btnBack;
+    public XButton btnNext;
+    public XFixedText lblCounter;
+    public XControl images[];
+    public boolean benabled = true;
+    public UnoDialog2 oUnoDialog;
+    public Size gap = new Size(4, 4);
+    public int cols = 4;
+    public int rows = 3;
+    public Size imageSize = new Size(20, 20);
+    public Size pos;
+    public Size selectionGap = new Size(2, 2);
+    public boolean showButtons = true;
+    public Short step;
+    public final static Short NO_BORDER = new Short((short) 0);
+    public boolean refreshOverNull = true;
+    public int imageTextLines = 1;
 
-    private boolean rowSelect = false;
+    public boolean rowSelect = false;
     public int tabIndex;
     public Boolean scaleImages = Boolean.TRUE;
     public String name = "il";
 
-    private int selected = -1;
-    private int pageStart = 0;
+    public int selected = -1;
+    public int pageStart = 0;
     public int helpURL = 0;
 
-    private CommonListener uiEventListener = new CommonListener();
-    private ImageRenderer renderer;
-    private ListModel listModel;
+    public CommonListener uiEventListener = new CommonListener();
+    public ImageRenderer renderer;
+    public ListModel listModel;
     public Renderer counterRenderer = new SimpleCounterRenderer();
 
-    private Object dialogModel;
+    public Object dialogModel;
 
-    private ImageKeyListener imageKeyListener;
+    public ImageKeyListener imageKeyListener;
 
-    private static final Integer BACKGROUND_COLOR = new Integer(16777216);  //new Integer(SystemColor.window.getRGB() + 16777216);
+    public static final Integer BACKGROUND_COLOR = new Integer(16777216);  //new Integer(SystemColor.window.getRGB() + 16777216);
 
-    private final static Short HIDE_PAGE = new Short((short) 99);
-    private final static Integer TRANSPARENT = new Integer(-1);
-    private final static int LINE_HEIGHT = 8;
+    public final static Short HIDE_PAGE = new Short((short) 99);
+    public final static Integer TRANSPARENT = new Integer(-1);
+    public final static int LINE_HEIGHT = 8;
 
     //private MethodInvocation METHOD_MOUSE_ENTER_IMAGE;
     //private MethodInvocation METHOD_MOUSE_EXIT_IMAGE;
-    private MethodInvocation METHOD_MOUSE_PRESSED;
+    public MethodInvocation METHOD_MOUSE_PRESSED;
 
     /** Getter for property imageSize.
      * @return Value of property imageSize.
@@ -211,12 +211,12 @@ import javax.swing.event.ListDataListene
 
     }
 
-    private Integer _imageHeight, _imageWidth;
-    private final static String[] IMAGE_PROPS = new String[] { "Border", "BackgroundColor", "Height", "HelpURL", "PositionX", "PositionY", "ScaleImage", "Step", "TabIndex", "Tabstop", "Width" };
+    public Integer _imageHeight, _imageWidth;
+    public final static String[] IMAGE_PROPS = new String[] { "Border", "BackgroundColor", "Height", "HelpURL", "PositionX", "PositionY", "ScaleImage", "Step", "TabIndex", "Tabstop", "Width" };
     //used for optimization
-    private Short tabIndex_;
+    public Short tabIndex_;
 
-    private XControl createImage(UnoDialog2 dialog, int row, int col) {
+    public XControl createImage(UnoDialog2 dialog, int row, int col) {
         String imageName = name + "_image" + (row * cols + col);
         XControl image = dialog.insertImage(imageName, IMAGE_PROPS, new Object[] { NO_BORDER, BACKGROUND_COLOR, _imageHeight, "HID:" + helpURL++, new Integer(imagePosX(col)), new Integer(imagePosY(row)), scaleImages, step, tabIndex_ , Boolean.FALSE, _imageWidth });
 
@@ -230,15 +230,15 @@ import javax.swing.event.ListDataListene
         return image;
     }
 
-    private int imagePosX(int col) {
+    public int imagePosX(int col) {
         return pos.Width + col * (imageSize.Width + gap.Width) + gap.Width;
     }
 
-    private int imagePosY(int row) {
+    public int imagePosY(int row) {
         return pos.Height + row * (imageSize.Height + gap.Height) + gap.Height;
     }
 
-    private void refreshImages() {
+    public void refreshImages() {
         if (showButtons)
             refreshCounterText();
         hideSelection();
@@ -262,11 +262,11 @@ import javax.swing.event.ListDataListene
         refreshSelection();
     }
 
-    private void refreshCounterText() {
+    public void refreshCounterText() {
         Helper.setUnoPropertyValue(getModel(lblCounter), "Label", counterRenderer.render(new Counter(pageStart + 1, pageEnd(), listModel.getSize())));
     }
 
-    private int pageEnd() {
+    public int pageEnd() {
         int i = pageStart + cols * rows;
         if (i > listModel.getSize() - 1)
             return listModel.getSize();
@@ -274,25 +274,25 @@ import javax.swing.event.ListDataListene
             return i;
     }
 
-    private void refreshSelection() {
+    public void refreshSelection() {
         if (selected < pageStart || selected >= (pageStart + rows * cols))
             hideSelection();
         else
             moveSelection(getImageIndexFor(selected));
     }
 
-    private void hideSelection() {
+    public void hideSelection() {
         Helper.setUnoPropertyValue(getModel(grbxSelectedImage), "Step", HIDE_PAGE);
         setVisible(grbxSelectedImage, false);
     }
 
-    private final static String[] MOVE_SELECTION = new String[] { "PositionX", "PositionY", "Step" };
-    private Object[] MOVE_SELECTION_VALS = new Object[3];
+    public final static String[] MOVE_SELECTION = new String[] { "PositionX", "PositionY", "Step" };
+    public Object[] MOVE_SELECTION_VALS = new Object[3];
 
     /** Utility field holding list of ItemListeners. */
-    private transient java.util.ArrayList itemListenerList;
+    public transient java.util.ArrayList itemListenerList;
 
-    private void moveSelection(int image) {
+    public void moveSelection(int image) {
         //System.out.println(image);
         setVisible(grbxSelectedImage, false);
 
@@ -316,7 +316,7 @@ import javax.swing.event.ListDataListene
     }
         
 
-    private void setVisible(Object control, boolean visible) {
+    public void setVisible(Object control, boolean visible) {
         ((XWindow) UnoRuntime.queryInterface(XWindow.class, control)).setVisible(visible);
     }
 
@@ -325,7 +325,7 @@ import javax.swing.event.ListDataListene
      * @param i
      * @return the Object in the list model corresponding to the given image index.
      */
-    private Object getObjectFor(int i) {
+    public Object getObjectFor(int i) {
         int ii = getIndexFor(i);
         if (listModel.getSize() <= ii)
             return null;
@@ -338,11 +338,11 @@ import javax.swing.event.ListDataListene
      * @param i
      * @return the index in the listModel for the given image index.
      */
-    private int getIndexFor(int i) {
+    public int getIndexFor(int i) {
         return pageStart + i;
     }
 
-    private int getImageIndexFor(int i) {
+    public int getImageIndexFor(int i) {
         return i - pageStart;
     }
 
@@ -398,7 +398,7 @@ import javax.swing.event.ListDataListene
      * @param event The event to be fired
      *
      */
-    private void fireItemSelected() {
+    public void fireItemSelected() {
 //      java.awt.event.ItemEvent event = new java.awt.event.ItemEvent(this, 0, 
 //          getSelectedObject(), java.awt.event.ItemEvent.SELECTED);
         java.util.ArrayList list;
@@ -576,7 +576,7 @@ import javax.swing.event.ListDataListene
 
     }
 
-    private void refreshImageText() {
+    public void refreshImageText() {
         Object item = selected >= 0 ? getListModel().getElementAt(selected) : null;
         Helper.setUnoPropertyValue(getModel(lblImageText), "Label", " " + renderer.render(item));
     }
@@ -610,16 +610,16 @@ import javax.swing.event.ListDataListene
         setPageStart(i);
     }
 
-    private void enableButtons() {
+    public void enableButtons() {
         enable(btnNext, new Boolean(pageStart + rows * cols < listModel.getSize()));
         enable(btnBack, new Boolean(pageStart > 0));
     }
 
-    private void enable(Object control, Boolean enable) {
+    public void enable(Object control, Boolean enable) {
         Helper.setUnoPropertyValue(getModel(control), "Enabled", enable);
     }
 
-    private Object getModel(Object control) {
+    public Object getModel(Object control) {
         return ((XControl) UnoRuntime.queryInterface(XControl.class, control)).getModel();
     }
 
@@ -641,13 +641,13 @@ import javax.swing.event.ListDataListene
     }
 */
 
-    private void setBorder(Object control, Short border) {
+    public void setBorder(Object control, Short border) {
         Helper.setUnoPropertyValue(getModel(control), "Border", border);
         //XWindowPeer peer = ((XControl)UnoRuntime.queryInterface(XControl.class,control)).getPeer();
         //peer.invalidate(InvalidateStyle.CHILDREN);
     }
 
-    private int getImageFromEvent(Object event) {
+    public int getImageFromEvent(Object event) {
         Object image = ((EventObject) event).Source;
         String controlName = (String) Helper.getUnoPropertyValue(getModel(image), "Name");
         return Integer.valueOf(controlName.substring(6  + name.length())).intValue();
@@ -680,7 +680,7 @@ import javax.swing.event.ListDataListene
         public Object[] getImageUrls(Object listItem);
     }
 
-    private static class SimpleCounterRenderer implements Renderer {
+    public static class SimpleCounterRenderer implements Renderer {
         public String render(Object counter) {
             return "" + ((Counter) counter).start + ".." + ((Counter) counter).end + "/" + ((Counter) counter).max;
         }
@@ -722,7 +722,7 @@ import javax.swing.event.ListDataListene
     
     
     
-    private class ImageKeyListener implements XKeyListener {
+    public class ImageKeyListener implements XKeyListener {
 
         /* (non-Javadoc)
          * @see com.sun.star.awt.XKeyListener#keyPressed(com.sun.star.awt.KeyEvent)
@@ -739,17 +739,17 @@ import javax.swing.event.ListDataListene
                 changeFocus(image,newImage);
         }
         
-        private boolean isFocusable(int image) {
+        public boolean isFocusable(int image) {
             return (image >= 0) && (getIndexFor(image) < listModel.getSize());
         }
         
-        private void changeFocus(int oldFocusImage, int newFocusImage) {
+        public void changeFocus(int oldFocusImage, int newFocusImage) {
             focus(newFocusImage);
             defocus(oldFocusImage);
         }
         
         
-        private final int getKeyMove(KeyEvent ke, int row, int col) {
+        public final int getKeyMove(KeyEvent ke, int row, int col) {
             switch (ke.KeyCode) {
                 case Key.UP : 
                     if (row > 0) return 0 - getCols();
@@ -769,7 +769,7 @@ import javax.swing.event.ListDataListene
             return 0;
         }
         
-        private void select(KeyEvent ke) {
+        public void select(KeyEvent ke) {
             setSelected(getIndexFor(getImageFromEvent(ke)));
         }
         
@@ -780,14 +780,14 @@ import javax.swing.event.ListDataListene
         
     }
     
-    private final void focus(int image) {   
+    public final void focus(int image) {   
         Helper.setUnoPropertyValue(images[image].getModel(),"Tabstop",
             Boolean.TRUE );
         XWindow xWindow = (XWindow) UnoRuntime.queryInterface(XWindow.class,images[image]); 
         xWindow.setFocus();
     }
     
-    private final void defocus(int image) {
+    public final void defocus(int image) {
         Helper.setUnoPropertyValue(UnoDialog.getModel(images[image]),"Tabstop",
             Boolean.FALSE);
         
--- wizards/com/sun/star/wizards/ui/PathSelection.java	2006-04-07 15:24:26.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/PathSelection.java	2007-05-24 11:24:05.000000000 +0200
@@ -22,8 +22,8 @@ public class PathSelection {
     public XPathSelectionListener xAction;
     public XTextComponent xSaveTextBox;
 
-    private final int CMDSELECTPATH = 1;
-    private final int TXTSAVEPATH = 1;
+    public final int CMDSELECTPATH = 1;
+    public final int TXTSAVEPATH = 1;
 
     public static class DialogTypes {
         public static final int FOLDER = 0;
--- wizards/com/sun/star/wizards/ui/SortingComponent.java	2006-04-07 15:25:20.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/SortingComponent.java	2007-05-24 11:24:05.000000000 +0200
@@ -115,7 +115,7 @@ public class SortingComponent {
         }
     }
 
-    private boolean getResources() {
+    public boolean getResources() {
         sSortHeader[0] = CurUnoDialog.oResource.getResText(UIConsts.RID_REPORT + 20);
         sSortHeader[1] = CurUnoDialog.oResource.getResText(UIConsts.RID_REPORT + 21);
         sSortHeader[2] = CurUnoDialog.oResource.getResText(UIConsts.RID_REPORT + 51);
@@ -151,7 +151,7 @@ public class SortingComponent {
         }
     }
 
-    private void setMaxSortIndex() {
+    public void setMaxSortIndex() {
         MaxSortIndex = -1;
         for (int i = 0; i <= MAXSORTCRITERIAINDEX; i++) {
             if (xSortListBox[i].getSelectedItemPos() > 0)
@@ -181,7 +181,7 @@ public class SortingComponent {
         }
     }
     
-    private void enableNextSortListBox(int CurIndex) {
+    public void enableNextSortListBox(int CurIndex) {
         try {
             setMaxSortIndex();
             boolean bDoEnable = (xSortListBox[CurIndex].getSelectedItemPos() != 0);
@@ -245,7 +245,7 @@ public class SortingComponent {
     }
 
     //  The following code can be reactivated in a future version when task #100799 will be fixed
-    private void moveupSortItems(int CurIndex, boolean bDoEnable) {
+    public void moveupSortItems(int CurIndex, boolean bDoEnable) {
         short iNextItemPos;
         if ((bDoEnable == false) && (MAXSORTCRITERIAINDEX > CurIndex)) {
             for (int i = CurIndex; i < MAXSORTCRITERIAINDEX; i++) {
@@ -264,7 +264,7 @@ public class SortingComponent {
             toggleSortListBox(CurIndex + 1, bDoEnable);
     }
 
-    private void toggleSortListBox(int CurIndex, boolean bDoEnable) {
+    public void toggleSortListBox(int CurIndex, boolean bDoEnable) {
         try {
             if (CurIndex < xSortListBox.length) {
                 CurUnoDialog.setControlProperty("lblSort" + new Integer(CurIndex + 1).toString(), "Enabled", new Boolean(bDoEnable));
--- wizards/com/sun/star/wizards/ui/TitlesComponent.java	2006-07-10 18:41:27.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/TitlesComponent.java	2007-05-24 11:24:05.000000000 +0200
@@ -60,7 +60,7 @@ public class TitlesComponent extends Con
         CurUnoDialog.insertControlModel("com.sun.star.awt.UnoControlFixedTextModel", "lblColumnTitles", new String[] { "Height", "Label", "PositionX", "PositionY", "Step", "Width" }, new Object[] { new Integer(8), _slblColumnTitles, new Integer(90), new Integer(iCompPosY - 10), IStep, new Integer(152)});
     }
 
-    protected void insertControlGroup(int i, int ypos) {
+    public void insertControlGroup(int i, int ypos) {
         iLabelPosX = iCompPosX + iRelLabelPosXDist;
         ControlRow oControlRow = new ControlRow(i, ypos);
         ControlGroupVector.addElement(oControlRow);
@@ -68,7 +68,7 @@ public class TitlesComponent extends Con
     }
 
 
-    protected void setControlGroupVisible(int _index, boolean _bIsVisible){
+    public void setControlGroupVisible(int _index, boolean _bIsVisible){
         CurUnoDialog.setControlVisible(getColumnName(_index), _bIsVisible);
         CurUnoDialog.setControlVisible(getTitleName(_index), _bIsVisible);
     }
@@ -104,17 +104,17 @@ public class TitlesComponent extends Con
     }
 
 
-    private String getColumnName(int _index) {
+    public String getColumnName(int _index) {
         return SOLABELPREFIX + Integer.toString(_index + 1);
     }
 
 
-    private String getTitleName(int _index) {
+    public String getTitleName(int _index) {
         return SOTITLEPREFIX + Integer.toString(_index + 1);
     }
 
 
-    protected void initializeScrollFields() {
+    public void initializeScrollFields() {
         for (int i = 0; i < fieldnames.length; i++) {
             PropertyValue[] currowproperties = new PropertyValue[2];
             currowproperties[0] = Properties.createProperty(getColumnName(i), fieldnames[i], i);
@@ -124,7 +124,7 @@ public class TitlesComponent extends Con
     }
 
 
-    private void adjustPosSizes() {
+    public void adjustPosSizes() {
         String sLongestFieldName = JavaTools.getlongestArrayItem(fieldnames);
         Size aSize = CurUnoDialog.getpreferredLabelSize(getColumnName(0), sLongestFieldName);
         double dblMAPConversion = CurUnoDialog.getMAPConversionFactor(getColumnName(0));
@@ -152,7 +152,7 @@ public class TitlesComponent extends Con
     }
 
 
-    private void setFieldTitles() {
+    public void setFieldTitles() {
         fieldtitles = new String[fieldnames.length];
         for (int i = 0; i < fieldnames.length; i++) {
             if (this.fieldtitleset.containsKey(fieldnames[i])) {
@@ -190,13 +190,13 @@ public class TitlesComponent extends Con
     }
 
 
-    private void refreshtitleset() {
+    public void refreshtitleset() {
         for (int i = 0; i < fieldnames.length; i++)
             fieldtitleset.put(fieldnames[i], fieldtitles[i]);
     }
 
 
-    private int getFieldNameWidth(int iMAPControlWidth, double dblMAPConversion) {
+    public int getFieldNameWidth(int iMAPControlWidth, double dblMAPConversion) {
         int iFieldNameWidth = (int) (1.15 * ((double) (iMAPControlWidth)) / dblMAPConversion);
         double dblAvailableWidth = (double) (iCompWidth - iScrollBarWidth - iRelLabelPosXDist);
         if (iFieldNameWidth > (0.5 * (dblAvailableWidth)))
--- wizards/com/sun/star/wizards/ui/UnoDialog.java	2006-04-07 15:26:42.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/UnoDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -72,9 +72,9 @@ public class UnoDialog implements EventN
     public Hashtable ControlList;
     public Resource oResource;
     public XWindowPeer xWindowPeer = null;
-    protected PeerConfig oPeerConfig;
+    public PeerConfig oPeerConfig;
 
-    protected AbstractListener guiEventListener;
+    public AbstractListener guiEventListener;
 
     public UnoDialog(XMultiServiceFactory xMSF, String[] PropertyNames, Object[] PropertyValues) {
         try {
@@ -453,7 +453,7 @@ public class UnoDialog implements EventN
      * @param the name of the control
      * @param iStep  change the step if you want to make the control invisible
      */
-    private void setControlVisible(String controlname, int iStep) {
+    public void setControlVisible(String controlname, int iStep) {
         try {
             int iCurStep = AnyConverter.toInt(getControlProperty(controlname, "Step"));
             setControlProperty(controlname, "Step", new Integer(iStep));
@@ -832,7 +832,7 @@ public class UnoDialog implements EventN
     }
 
 
-    private Boolean BisHighContrastModeActivated = null;
+    public Boolean BisHighContrastModeActivated = null;
 
     public boolean isHighContrastModeActivated(){
         if (xVclWindowPeer != null){
--- wizards/com/sun/star/wizards/ui/UnoDialog2.java	2006-04-07 15:27:13.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/UnoDialog2.java	2007-05-24 11:24:05.000000000 +0200
@@ -58,7 +58,7 @@ public class UnoDialog2 extends UnoDialo
     /**
      * Override this method to return another listener.
      */
-    protected AbstractListener createListener() {
+    public AbstractListener createListener() {
         return new CommonListener();
     }
 
@@ -182,7 +182,7 @@ public class UnoDialog2 extends UnoDialo
      * This method is used for creating Edit, Currency, Date, Formatted, Pattern, File
      * and Time edit components.
      */
-    private Object insertEditField(String sName, String sTextChanged, Object eventTarget, String sModelClass, String[] sPropNames, Object[] oPropValues, Class type) {
+    public Object insertEditField(String sName, String sTextChanged, Object eventTarget, String sModelClass, String[] sPropNames, Object[] oPropValues, Class type) {
         XTextComponent xField = (XTextComponent) insertControlModel2(sModelClass, sName, sPropNames, oPropValues, XTextComponent.class);
         if (sTextChanged != null) {
             xField.addTextListener((XTextListener) guiEventListener);
@@ -287,7 +287,7 @@ public class UnoDialog2 extends UnoDialo
         return xDlgContainer.getControl(componentName);
     }
 
-    private void setControlPropertiesDebug(Object model, String[] names, Object[] values) {
+    public void setControlPropertiesDebug(Object model, String[] names, Object[] values) {
         for (int i = 0; i<names.length; i++) {
             System.out.println("   Settings: " + names[i]);
             Helper.setUnoPropertyValue(model,names[i],values[i]);
--- wizards/com/sun/star/wizards/ui/WizardDialog.java	2006-07-06 16:32:56.000000000 +0200
+++ wizards/com/sun/star/wizards/ui/WizardDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -56,29 +56,29 @@ import com.sun.star.lang.IllegalArgument
 import com.sun.star.beans.*;
 
 public abstract class WizardDialog extends UnoDialog2 implements VetoableChangeListener, XTerminateListener, XCompletion{
-    private static final String NEXT_ACTION_PERFORMED = "gotoNextAvailableStep";
-    private static final String BACK_ACTION_PERFORMED = "gotoPreviousAvailableStep";
-    private static final String FINISH_ACTION_PERFORMED = "finishWizard_1";
-    private static final String CANCEL_ACTION_PERFORMED = "cancelWizard_1";
-    private static final String HELP_ACTION_PERFORMED = "callHelp";
+    public static final String NEXT_ACTION_PERFORMED = "gotoNextAvailableStep";
+    public static final String BACK_ACTION_PERFORMED = "gotoPreviousAvailableStep";
+    public static final String FINISH_ACTION_PERFORMED = "finishWizard_1";
+    public static final String CANCEL_ACTION_PERFORMED = "cancelWizard_1";
+    public static final String HELP_ACTION_PERFORMED = "callHelp";
     public VetoableChangeSupport vetos = new VetoableChangeSupport(this);
-    private String[] sRightPaneHeaders;
-    private int iButtonWidth = 50;
-    private int nNewStep = 1;
-    private int nOldStep = 1;
-    private int nMaxStep = 1;
-    protected XItemListener RoadmapItemListener;
-    protected XControl xRoadmapControl;
+    public String[] sRightPaneHeaders;
+    public int iButtonWidth = 50;
+    public int nNewStep = 1;
+    public int nOldStep = 1;
+    public int nMaxStep = 1;
+    public XItemListener RoadmapItemListener;
+    public XControl xRoadmapControl;
     XItemEventBroadcaster xRoadmapBroadcaster;
     String[] sRMItemLabels;
-    private Object oRoadmap;
-    private Object oRoadmapControl;
-    private XSingleServiceFactory xSSFRoadmap;
+    public Object oRoadmap;
+    public Object oRoadmapControl;
+    public XSingleServiceFactory xSSFRoadmap;
     public XIndexContainer xIndexContRoadmap;
-    private Resource oWizardResource;
+    public Resource oWizardResource;
     public String sMsgEndAutopilot;
-    private int hid;
-    private boolean bTerminateListenermustberemoved = true;
+    public int hid;
+    public boolean bTerminateListenermustberemoved = true;
 
 
     /** Creates a new instance of WizardDialog
@@ -285,7 +285,7 @@ public abstract class WizardDialog exten
         return switchToStep();
     }
 
-    private boolean switchToStep() {
+    public boolean switchToStep() {
         leaveStep(nOldStep, nNewStep);
         if (nNewStep != nOldStep) {
             if (nNewStep == nMaxStep) {
@@ -302,13 +302,13 @@ public abstract class WizardDialog exten
         return false;
     }
 
-    protected void leaveStep(int nOldStep, int nNewStep) {
+    public void leaveStep(int nOldStep, int nNewStep) {
     }
 
-    protected void enterStep(int nOldStep, int nNewStep) {
+    public void enterStep(int nOldStep, int nNewStep) {
     }
 
-    protected void changeToStep(int nNewStep) {
+    public void changeToStep(int nNewStep) {
         Helper.setUnoPropertyValue(xDialogModel, "Step", new Integer(nNewStep));
         setCurrentRoadmapItemID((short) (nNewStep));
         enableNextButton(getNextAvailableStep() > 0);
@@ -397,7 +397,7 @@ public abstract class WizardDialog exten
         }
     }
 
-    protected void insertRoadMapItems(String[] items, int[] steps, boolean[] enabled) {
+    public void insertRoadMapItems(String[] items, int[] steps, boolean[] enabled) {
         for (int i = 0; i < items.length; i++)
             insertRoadmapItem(i, enabled[i], items[i], steps[i]);
     }
@@ -484,7 +484,7 @@ public abstract class WizardDialog exten
     }
 
     //TODO discuss with rp
-    protected int getNextAvailableStep() {
+    public int getNextAvailableStep() {
         if (isRoadmapComplete())
             for (int i = nNewStep + 1; i <= nMaxStep; i++)
                 if (isStepEnabled(i))
@@ -559,7 +559,7 @@ public abstract class WizardDialog exten
         }
     }   
 
-    private boolean wizardClosed = false;
+    public boolean wizardClosed = false;
     /**
      * called by the cancel button and
      * by the window hidden event.
--- wizards/com/sun/star/wizards/web/AbstractErrorHandler.java	2006-04-07 15:36:10.000000000 +0200
+++ wizards/com/sun/star/wizards/web/AbstractErrorHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -51,7 +51,7 @@ public abstract class AbstractErrorHandl
     XMultiServiceFactory xmsf;
     XWindowPeer peer;
     
-    protected AbstractErrorHandler(XMultiServiceFactory xmsf, XWindowPeer peer_) {
+    public AbstractErrorHandler(XMultiServiceFactory xmsf, XWindowPeer peer_) {
         this.xmsf = xmsf;
         peer=peer_;
     }
@@ -96,7 +96,7 @@ public abstract class AbstractErrorHandl
      * @param errorType
      * @return true if the ok/yes button is clicked, false otherwise.
      */
-    protected boolean showMessage(String message, int errorType) {
+    public boolean showMessage(String message, int errorType) {
         return showMessage(xmsf,peer, message,errorType);
     }
     
@@ -133,7 +133,7 @@ public abstract class AbstractErrorHandl
      * @param errorType
      * @return
      */
-    private static int getTrueFor(int errorType) {
+    public static int getTrueFor(int errorType) {
         switch (errorType) {
             case ErrorHandler.ERROR_FATAL :
             case ErrorHandler.ERROR_PROCESS_FATAL :
@@ -162,7 +162,7 @@ public abstract class AbstractErrorHandl
      * @param errorType
      * @return the Uno attributes for each error type. 
      */
-    private static int getAttributeFor(int errorType) {
+    public static int getAttributeFor(int errorType) {
         switch (errorType) {
             case ErrorHandler.ERROR_FATAL :
                 return VclWindowPeerAttribute.OK;
@@ -193,7 +193,7 @@ public abstract class AbstractErrorHandl
      * @param errorType
      * @return the uno service name for each error type
      */
-    private static String getServiceNameFor(int errorType) {
+    public static String getServiceNameFor(int errorType) {
         switch (errorType) {
             case ErrorHandler.ERROR_FATAL :
                 return "errorbox";
@@ -229,7 +229,7 @@ public abstract class AbstractErrorHandl
      * @return a Strings which will be displayed in the message box,
      * and which describes the error, and the needed action from the user.
      */
-    protected abstract String getMessageFor(Exception ex, Object arg, int ix, int type);
+    public abstract String getMessageFor(Exception ex, Object arg, int ix, int type);
     
 }
 
--- wizards/com/sun/star/wizards/web/BackgroundsDialog.java	2006-04-07 15:36:34.000000000 +0200
+++ wizards/com/sun/star/wizards/web/BackgroundsDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -54,9 +54,9 @@ import com.sun.star.wizards.web.data.CGS
  */
 public class BackgroundsDialog extends ImageListDialog {
 
-    private FileAccess fileAccess;
-    private SystemDialog sd;
-    private CGSettings settings;
+    public FileAccess fileAccess;
+    public SystemDialog sd;
+    public CGSettings settings;
 
     /**
      * @param xmsf
@@ -115,7 +115,7 @@ public class BackgroundsDialog extends I
      * @param s
      * @return
      */
-    private int add(String s) {
+    public int add(String s) {
         
         //first i check the item does not already exists in the list...
         for (int i = 0; i<il.getListModel().getSize(); i++)
@@ -146,8 +146,8 @@ public class BackgroundsDialog extends I
      * @author rpiterman
      *
      */
-    private class BGRenderer implements ImageList.ImageRenderer {
-            private int cut;
+    public class BGRenderer implements ImageList.ImageRenderer {
+            public int cut;
     
             public BGRenderer(int cut_) {
                 cut = cut_;
@@ -177,7 +177,7 @@ public class BackgroundsDialog extends I
      * if it is a file, it adds the file to the list. 
      * @author rpiterman
      */
-    private class Model extends DefaultListModel {
+    public class Model extends DefaultListModel {
     
        /**
         * constructor. </br>
@@ -208,7 +208,7 @@ public class BackgroundsDialog extends I
          * This is what this method does...
          * @param imageName
          */
-       private void remove(String imageName) {
+       public void remove(String imageName) {
            try {
                Object conf = Configuration.getConfigurationRoot(xMSF,WebWizardConst.CONFIG_PATH + "/BackgroundImages",true);
                Configuration.removeNode(conf,imageName);
@@ -224,7 +224,7 @@ public class BackgroundsDialog extends I
          * otherwise (if it is a file) adds the file to the list.
          * @param url
          */
-        private void addDir(String url) {
+        public void addDir(String url) {
            if (fileAccess.isDirectory(url))
                add(fileAccess.listFiles(url,false));
            else
@@ -236,7 +236,7 @@ public class BackgroundsDialog extends I
          * the list
          * @param filenames
          */
-        private void add(String[] filenames) {
+        public void add(String[] filenames) {
            for (int i = 0; i<filenames.length; i++)
             add(filenames[i]);
        }
@@ -247,7 +247,7 @@ public class BackgroundsDialog extends I
          * (case insensitive) 
          * @param filename image url.
          */
-       private void add(String filename) {
+       public void add(String filename) {
            String lcase = filename.toLowerCase();
                if (lcase.endsWith("jpg") ||
                    lcase.endsWith("jpeg") ||
--- wizards/com/sun/star/wizards/web/CallWizard.java	2006-10-04 22:09:58.000000000 +0200
+++ wizards/com/sun/star/wizards/web/CallWizard.java	2007-05-24 11:24:05.000000000 +0200
@@ -117,7 +117,7 @@ public class CallWizard {
             }
         }
 
-        private static WebWizard webWizard = null;
+        public static WebWizard webWizard = null;
         /**
          * Execute Wizard
          *
@@ -164,12 +164,12 @@ public class CallWizard {
         /**
          * The service name, that must be used to get an instance of this service.
          */
-        private static final String __serviceName = "com.sun.star.wizards.web.CallWizard";
+        public static final String __serviceName = "com.sun.star.wizards.web.CallWizard";
 
         /**
          * The service manager, that gives access to all registered services.
          */
-        private XMultiServiceFactory xmultiservicefactory;
+        public XMultiServiceFactory xmultiservicefactory;
 
         /**
          * This method is a member of the interface for initializing an object directly
--- wizards/com/sun/star/wizards/web/data/CGContent.java	2006-04-07 15:45:57.000000000 +0200
+++ wizards/com/sun/star/wizards/web/data/CGContent.java	2007-05-24 11:24:05.000000000 +0200
@@ -50,7 +50,7 @@ public class CGContent         extends C
    
   public CGContent() {
       /*cp_Documents = new ConfigSet(CGDocument.class) {
-        protected DefaultListModel createChildrenList() {
+        public DefaultListModel createChildrenList() {
             return cp_Contents.getChildrenList();
         }
       };*/
--- wizards/com/sun/star/wizards/web/data/CGDesign.java	2006-04-07 15:46:19.000000000 +0200
+++ wizards/com/sun/star/wizards/web/data/CGDesign.java	2007-05-24 11:24:05.000000000 +0200
@@ -60,10 +60,10 @@ public class CGDesign extends ConfigGrou
      
      
         
-     private final String TRUE = "true";
-     private final String FALSE = null;
+     public final String TRUE = "true";
+     public final String FALSE = null;
      
-     private String styleName;
+     public String styleName;
      
         
      public Node createDOM(Node parent) {
@@ -73,8 +73,8 @@ public class CGDesign extends ConfigGrou
                  
      }
      
-    private static final Short SHORT_TRUE = new Short((short)1);
-    private static final Short SHORT_FALSE = new Short((short)0);
+    public static final Short SHORT_TRUE = new Short((short)1);
+    public static final Short SHORT_FALSE = new Short((short)0);
     
      
     public short[] getStyle() {
--- wizards/com/sun/star/wizards/web/data/CGDocument.java	2006-04-07 15:46:40.000000000 +0200
+++ wizards/com/sun/star/wizards/web/data/CGDocument.java	2007-05-24 11:24:05.000000000 +0200
@@ -231,7 +231,7 @@ public class CGDocument extends ConfigSe
      * Analyzes a type-detection string, returned from the TypeDetection service,
      * and sets the appType, isSOOpenable and isSODocument memebres.
      */
-    private void analyzeFileType(PropertyValue[] mediaDesc) {
+    public void analyzeFileType(PropertyValue[] mediaDesc) {
         
         if (mediaDesc == null) {
         }
@@ -261,7 +261,7 @@ public class CGDocument extends ConfigSe
      * @return one of the constants in the interface TypeDetection.
      * 
      */
-    private String getDocType(String media) {
+    public String getDocType(String media) {
         if (media.equals("")) return TypeDetection.NO_TYPE;
         
         if (media.startsWith("writer")) {
@@ -299,30 +299,30 @@ public class CGDocument extends ConfigSe
     }
     
     
-    private String updateDate() {
+    public String updateDate() {
         if ( this.updateDate == null )
             return "";
         return getSettings().formatter.formatCreated(this.updateDate);
     }
     
-    private String createDate() {
+    public String createDate() {
         if ( this.createDate == null )
             return "";
         return getSettings().formatter.formatCreated(this.createDate);
     }
     
-    private String sizeKB() {
+    public String sizeKB() {
         if (sizeBytes == -1) 
             return "";
         else return getSettings().formatter.formatFileSize(sizeBytes);
     }
     
-    private String pages() {
+    public String pages() {
         return pages == -1 ?  ""
          : JavaTools.replaceSubString(pagesTemplate() , "" + pages , "%NUMBER" ); 
     }
     
-    private String pagesTemplate() {
+    public String pagesTemplate() {
         int pagesType = ((CGExporter)getSettings().cp_Exporters.getElement(cp_Exporter)).cp_PageType;
         switch (pagesType) {
             case PAGE_TYPE_UNKNOWN :
@@ -335,18 +335,18 @@ public class CGDocument extends ConfigSe
         }
     }
     
-    private String getTargetTypeName(CGExporter exp) {
+    public String getTargetTypeName(CGExporter exp) {
         return (exp.targetTypeName.equals("")) 
             ? (String) Properties.getPropertyValue(mediaDescriptor,"UIName") 
             : exp.targetTypeName;
     }
     
-    private String getIcon(CGExporter exporter) {
+    public String getIcon(CGExporter exporter) {
         return exporter.cp_Icon.equals("") ? 
             getIcon(this.appType) : exporter.cp_Icon;
     }
     
-    private String getIcon(String appType) {
+    public String getIcon(String appType) {
         //System.out.println("Getting Icon for: " + appType);
         return appType+".gif";
     }
@@ -374,7 +374,7 @@ public class CGDocument extends ConfigSe
      * @see getExporter()
      * @return
      */
-    private short getExporterIndex() {
+    public short getExporterIndex() {
         if (cp_Exporter==null)
           return 0;
         Object exporter = getSettings().cp_Exporters.getElement(cp_Exporter);
--- wizards/com/sun/star/wizards/web/data/CGGeneralInfo.java	2006-04-07 15:47:24.000000000 +0200
+++ wizards/com/sun/star/wizards/web/data/CGGeneralInfo.java	2007-05-24 11:24:05.000000000 +0200
@@ -76,7 +76,7 @@ public class CGGeneralInfo     extends C
         cp_UpdateDate = i.intValue();
     }
 
-    private int currentDate() {
+    public int currentDate() {
         DateTime dt = JavaTools.getDateTime(System.currentTimeMillis());
         //System.out.println();
         return dt.Day + dt.Month * 100 + dt.Year * 10000;
--- wizards/com/sun/star/wizards/web/data/CGLayout.java	2006-04-07 15:47:48.000000000 +0200
+++ wizards/com/sun/star/wizards/web/data/CGLayout.java	2007-05-24 11:24:05.000000000 +0200
@@ -46,9 +46,9 @@ public class CGLayout extends ConfigSetI
     public String cp_Name;
     public String cp_FSName;
     
-    private Map templates;
+    public Map templates;
     
-    private void createTemplates(XMultiServiceFactory xmsf) throws Exception {
+    public void createTemplates(XMultiServiceFactory xmsf) throws Exception {
         
         templates = new Hashtable(3);
         
--- wizards/com/sun/star/wizards/web/data/CGPublish.java	2006-04-07 15:48:10.000000000 +0200
+++ wizards/com/sun/star/wizards/web/data/CGPublish.java	2007-05-24 11:24:05.000000000 +0200
@@ -91,7 +91,7 @@ public class CGPublish extends ConfigGro
         }
     }
     
-    private String ftpURL() {
+    public String ftpURL() {
         return "ftp://" + cp_Username + 
           ((password!=null && password.length()>0) ? ":" + password : "")
           + "@" + cp_URL.substring(7);
--- wizards/com/sun/star/wizards/web/data/CGSession.java	2006-04-07 15:48:28.000000000 +0200
+++ wizards/com/sun/star/wizards/web/data/CGSession.java	2007-05-24 11:24:05.000000000 +0200
@@ -70,7 +70,7 @@ public class CGSession   extends ConfigS
         return root;
     }
     
-    private String getScreenSize() {
+    public String getScreenSize() {
         switch (cp_Design.cp_OptimizeDisplaySize) {
             case 0 : return "640";
             case 1 : return "800";
--- wizards/com/sun/star/wizards/web/data/CGSettings.java	2006-07-13 14:29:06.000000000 +0200
+++ wizards/com/sun/star/wizards/web/data/CGSettings.java	2007-05-24 11:24:05.000000000 +0200
@@ -52,8 +52,8 @@ public class CGSettings    extends Confi
     public CGSession       cp_DefaultSession    = new CGSession();
     public String          cp_LastSavedSession;
 
-    private Map exportersMap = new Hashtable();
-    private XMultiServiceFactory xmsf;
+    public Map exportersMap = new Hashtable();
+    public XMultiServiceFactory xmsf;
 
     String[] resources;
     public Formatter formatter;
@@ -80,7 +80,7 @@ public class CGSettings    extends Confi
     }
 
 
-    private static final CGExporter[] EMPTY_ARRAY_1 = new CGExporter[0];
+    public static final CGExporter[] EMPTY_ARRAY_1 = new CGExporter[0];
 
     public CGExporter[] getExporters(String mime) {
         CGExporter[] exps = (CGExporter[])exportersMap.get(mime);
@@ -89,7 +89,7 @@ public class CGSettings    extends Confi
         return exps;
     }
 
-    private CGExporter[] createExporters(String mime) {
+    public CGExporter[] createExporters(String mime) {
         Object[] exporters = cp_Exporters.items();
         Vector v = new Vector();
         for (int i = 0; i<exporters.length; i++)
@@ -114,7 +114,7 @@ public class CGSettings    extends Confi
         calcExportersTargetTypeNames(xmsf);
     }
 
-    private void calcExportersTargetTypeNames(XMultiServiceFactory xmsf) throws Exception {
+    public void calcExportersTargetTypeNames(XMultiServiceFactory xmsf) throws Exception {
         Object typeDetect = xmsf.createInstance("com.sun.star.document.TypeDetection");
         XNameAccess xNameAccess = (XNameAccess)UnoRuntime.queryInterface(XNameAccess.class,typeDetect);
         for (int i = 0; i < cp_Exporters.getSize(); i++)
@@ -122,7 +122,7 @@ public class CGSettings    extends Confi
     }
 
 
-    private void calcExporterTargetTypeName(XNameAccess xNameAccess, CGExporter exporter)
+    public void calcExporterTargetTypeName(XNameAccess xNameAccess, CGExporter exporter)
         throws  NoSuchElementException,
                 WrappedTargetException
     {
@@ -147,9 +147,9 @@ public class CGSettings    extends Confi
     }
 
     public class Formatter {
-        private long docNullTime;
-        private int dateFormat, numberFormat;
-        private DateUtils dateUtils;
+        public long docNullTime;
+        public int dateFormat, numberFormat;
+        public DateUtils dateUtils;
 
         public Formatter(XMultiServiceFactory xmsf, Object document ) throws Exception {
             dateUtils = new DateUtils(xmsf, document);
--- wizards/com/sun/star/wizards/web/export/AbstractExporter.java	2006-04-07 15:50:25.000000000 +0200
+++ wizards/com/sun/star/wizards/web/export/AbstractExporter.java	2007-05-24 11:24:05.000000000 +0200
@@ -32,10 +32,10 @@ import com.sun.star.wizards.web.data.Typ
  * @author  rpiterman
  */
 public abstract class AbstractExporter implements Exporter {
-    protected CGExporter exporter;
-    protected FileAccess fileAccess;
+    public CGExporter exporter;
+    public FileAccess fileAccess;
     
-    protected void storeToURL(Object officeDocument, Properties props, String targetUrl, String filterName, PropertyValue[] filterData) 
+    public void storeToURL(Object officeDocument, Properties props, String targetUrl, String filterName, PropertyValue[] filterData) 
        throws IOException {
         
          props = new Properties();
@@ -49,24 +49,24 @@ public abstract class AbstractExporter i
          xs.storeToURL(targetUrl, o);
      }
     
-     protected void storeToURL(Object officeDocument, String targetUrl, String filterName, PropertyValue[] filterData) 
+     public void storeToURL(Object officeDocument, String targetUrl, String filterName, PropertyValue[] filterData) 
          throws IOException {
         
          storeToURL(officeDocument, new Properties(), targetUrl, filterName, filterData);
      }
     
-     protected void storeToURL(Object officeDocument, String targetUrl, String filterName ) 
+     public void storeToURL(Object officeDocument, String targetUrl, String filterName ) 
              throws IOException {
         
          storeToURL(officeDocument, new Properties(), targetUrl, filterName, new PropertyValue[0]);
          
      }
 
-    protected String getArgument(String name, CGExporter p) {
+    public String getArgument(String name, CGExporter p) {
             return ((CGArgument)p.cp_Arguments.getElement(name)).cp_Value;
     }
     
-    protected Object openDocument(CGDocument doc, XMultiServiceFactory xmsf) 
+    public Object openDocument(CGDocument doc, XMultiServiceFactory xmsf) 
         throws com.sun.star.io.IOException 
     {
         Object document = null;
@@ -90,7 +90,7 @@ public abstract class AbstractExporter i
         return document;
     }
 
-    protected void closeDocument(Object doc,XMultiServiceFactory xmsf) {
+    public void closeDocument(Object doc,XMultiServiceFactory xmsf) {
         /*OfficeDocument.dispose(
             xmsf,
             (XComponent) UnoRuntime.queryInterface(XComponent.class, doc));*/
@@ -103,7 +103,7 @@ public abstract class AbstractExporter i
         }
     }
     
-    private void pageCount(CGDocument doc, Object document) {
+    public void pageCount(CGDocument doc, Object document) {
         if (doc.appType.equals(TypeDetection.WRITER_DOC)) 
             doc.pages = TextDocument.getPageCount(document);
         else if (doc.appType.equals(TypeDetection.IMPRESS_DOC))
@@ -116,7 +116,7 @@ public abstract class AbstractExporter i
         exporter = exporter_;
     }
     
-    protected FileAccess getFileAccess(XMultiServiceFactory xmsf) {
+    public FileAccess getFileAccess(XMultiServiceFactory xmsf) {
         if ( fileAccess == null )
             try {
                 fileAccess = new FileAccess(xmsf);
@@ -125,7 +125,7 @@ public abstract class AbstractExporter i
         return fileAccess;
     }
     
-    protected void calcFileSize(CGDocument doc, String url, XMultiServiceFactory xmsf) {
+    public void calcFileSize(CGDocument doc, String url, XMultiServiceFactory xmsf) {
         /*if the exporter exports to a
          * binary format, get the size of the destination.
          */     
--- wizards/com/sun/star/wizards/web/export/ConfiguredExporter.java	2006-04-07 15:51:00.000000000 +0200
+++ wizards/com/sun/star/wizards/web/export/ConfiguredExporter.java	2007-05-24 11:24:05.000000000 +0200
@@ -33,7 +33,7 @@ public class ConfiguredExporter extends 
         }
     }
         
-    private Object cast(String s) {
+    public Object cast(String s) {
         String s1 = s.substring(1);
         char c = s.charAt(0);
         switch (c) {
--- wizards/com/sun/star/wizards/web/export/FilterExporter.java	2006-04-11 13:09:44.000000000 +0200
+++ wizards/com/sun/star/wizards/web/export/FilterExporter.java	2007-05-24 11:24:05.000000000 +0200
@@ -49,8 +49,8 @@ import com.sun.star.wizards.web.data.CGE
  */
 public class FilterExporter extends AbstractExporter  { 
     
-    protected String filterName;
-    protected Properties props = new Properties();
+    public String filterName;
+    public Properties props = new Properties();
     
     /* (non-Javadoc)
      * @see com.sun.star.wizards.web.export.Exporter#export(java.lang.Object, java.io.File, com.sun.star.wizards.web.data.CGSettings, com.sun.star.lang.XMultiServiceFactory)
--- wizards/com/sun/star/wizards/web/export/ImpressHTMLExporter.java	2006-04-07 15:52:31.000000000 +0200
+++ wizards/com/sun/star/wizards/web/export/ImpressHTMLExporter.java	2007-05-24 11:24:05.000000000 +0200
@@ -48,9 +48,9 @@ import com.sun.star.wizards.web.data.CGS
  */
 public class ImpressHTMLExporter extends ConfiguredExporter {
     
-    private static final Integer SMALL_IMAGE = new Integer(512);
-    private static final Integer MEDIUM_IMAGE = new Integer(640);
-    private static final Integer LARGE_IMAGE = new Integer(800);
+    public static final Integer SMALL_IMAGE = new Integer(512);
+    public static final Integer MEDIUM_IMAGE = new Integer(640);
+    public static final Integer LARGE_IMAGE = new Integer(800);
     
     public boolean export(CGDocument source, String targetDirectory ,XMultiServiceFactory xmsf, Task task)  throws IOException {
         
@@ -84,12 +84,12 @@ public class ImpressHTMLExporter extends
         
     }
     
-    private String getHomepageURL(CGSession session) {
+    public String getHomepageURL(CGSession session) {
         return "../" + 
              ( exporter.cp_OwnDirectory ? "../index.html" : "index.html" ) ; 
     }
     
-    private Integer getImageWidth(CGSession session) {
+    public Integer getImageWidth(CGSession session) {
         switch (session.cp_Design.cp_OptimizeDisplaySize) {
             case 0 : return SMALL_IMAGE;
             case 1 : return MEDIUM_IMAGE;
@@ -98,7 +98,7 @@ public class ImpressHTMLExporter extends
         return MEDIUM_IMAGE;
     }
     
-    private CGSession getSession(CGDocument doc) {
+    public CGSession getSession(CGDocument doc) {
         return doc.getSettings().cp_DefaultSession;
     }
 
--- wizards/com/sun/star/wizards/web/ExtensionVerifier.java	2006-04-07 15:37:46.000000000 +0200
+++ wizards/com/sun/star/wizards/web/ExtensionVerifier.java	2007-05-24 11:24:05.000000000 +0200
@@ -46,7 +46,7 @@ import com.sun.star.wizards.common.UCB;
  *
  */
 public class ExtensionVerifier implements UCB.Verifier {
-    private String extension;
+    public String extension;
 
     public ExtensionVerifier(String extension_) {
         extension="." + extension_;
--- wizards/com/sun/star/wizards/web/FTPDialog.java	2006-04-07 15:38:11.000000000 +0200
+++ wizards/com/sun/star/wizards/web/FTPDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -85,84 +85,84 @@ public class FTPDialog extends UnoDialog
      * status-display. "unknown" is the status when the user first 
      * opens the dialog, or changes the servername/username/password.
      */
-    private final static int STATUS_UNKONWN= 0;
+    public final static int STATUS_UNKONWN= 0;
     /**
      * A Constant used for the setLabel(int) method to change the
      * status-display. (connection established)
      */
-    private final static int STATUS_OK = 1;
+    public final static int STATUS_OK = 1;
     /**
      * A Constant used for the setLabel(int) method to change the
      * status-display.
      */
-    private final static int STATUS_USER_PWD_WRONG = 2;
+    public final static int STATUS_USER_PWD_WRONG = 2;
     /**
      * A Constant used for the setLabel(int) method to change the
      * status-display.
      */
-    private final static int STATUS_SERVER_NOT_FOUND = 3;
+    public final static int STATUS_SERVER_NOT_FOUND = 3;
     /**
      * A Constant used for the setLabel(int) method to change the
      * status-display.
      */
-    private final static int STATUS_NO_RIGHTS = 4;
+    public final static int STATUS_NO_RIGHTS = 4;
     /**
      * A Constant used for the setLabel(int) method to change the
      * status-display.
      */
-    private final static int STATUS_HOST_UNREACHABLE = 5;
+    public final static int STATUS_HOST_UNREACHABLE = 5;
     /**
      * A Constant used for the setLabel(int) method to change the
      * status-display.
      */
-    private final static int STATUS_CONNECTING = 6;
+    public final static int STATUS_CONNECTING = 6;
 
     /**
      * The icon url for error
      */ 
-    private final static String ICON_ERROR = "ftperror.gif";
+    public final static String ICON_ERROR = "ftperror.gif";
     /**
      * The icon url for ok (connection ok)
      */ 
-    private final static String ICON_OK = "ftpconnected.gif";
+    public final static String ICON_OK = "ftpconnected.gif";
     /**
      * The icon url for unknown - this is the status when
      * the user first opens the dialog
      */ 
-    private final static String ICON_UNKNOWN= "ftpunknown.gif";
+    public final static String ICON_UNKNOWN= "ftpunknown.gif";
     /**
      * The icon url for an icon representing the "connecting" state. 
      */ 
-    private final static String ICON_CONNECTING = "ftpconnecting.gif";
+    public final static String ICON_CONNECTING = "ftpconnecting.gif";
     
 
     //GUI Components as Class members.
     //Fixed Line
-    private XControl ln1;
-    private XFixedText lblFTPAddress;
-    private XTextComponent txtHost;
-    private XFixedText lblUsername;
-    private XTextComponent txtUsername;
-    private XFixedText lblPassword;
-    private XTextComponent txtPassword;
+    public XControl ln1;
+    public XFixedText lblFTPAddress;
+    public XTextComponent txtHost;
+    public XFixedText lblUsername;
+    public XTextComponent txtUsername;
+    public XFixedText lblPassword;
+    public XTextComponent txtPassword;
     //Fixed Line
-    private XControl ln2;
-    private XButton btnTestConnection;
-    private XControl imgStatus;
-    private XFixedText lblStatus;
+    public XControl ln2;
+    public XButton btnTestConnection;
+    public XControl imgStatus;
+    public XFixedText lblStatus;
     //Fixed Line
-    private XControl ln3;
-    private XTextComponent txtDir;
-    private XButton btnDir;
-    private XButton btnOK;
-    private XButton btnCancel;
-    private XButton btnHelp;
+    public XControl ln3;
+    public XTextComponent txtDir;
+    public XButton btnDir;
+    public XButton btnOK;
+    public XButton btnCancel;
+    public XButton btnHelp;
     //Font Descriptors as Class members.
 
     //Resources Object
-    private FTPDialogResources resources;
+    public FTPDialogResources resources;
 
-    private List dataAware = new Vector();
+    public List dataAware = new Vector();
 
     public String username = "";
     public String password = "";
@@ -173,18 +173,18 @@ public class FTPDialog extends UnoDialog
     /**
      * The ftp directory.
      */
-    private String dir = "";
+    public String dir = "";
 
     /**
      * the ftp publish object which contains the
      * data for this dialog.
      */
-    private CGPublish publish;
-    private UCB ucb;
+    public CGPublish publish;
+    public UCB ucb;
     /**
      * used for the status images url.
      */
-    private String imagesDirectory;
+    public String imagesDirectory;
     
     /**
      * constructor.
@@ -291,7 +291,7 @@ public class FTPDialog extends UnoDialog
     /**
      * Make hostname, username and password text fields data aware.
      */
-    private void configure() {
+    public void configure() {
         dataAware.add(UnoDataAware.attachEditControl(this, "host", txtHost, null,true));
         dataAware.add(UnoDataAware.attachEditControl(this, "username", txtUsername, null, true));
         dataAware.add(UnoDataAware.attachEditControl(this, "password", txtPassword, null, true));
@@ -330,7 +330,7 @@ public class FTPDialog extends UnoDialog
      * directory text fields.
      * is called uppon initialization.
      */
-    private void updateUI() {
+    public void updateUI() {
         DataAware.updateUI(dataAware);
         setDir(dir);
     }
@@ -341,7 +341,7 @@ public class FTPDialog extends UnoDialog
      * @param ftpUrl
      * @return
      */
-    private String extractHost(String ftpUrl) {
+    public String extractHost(String ftpUrl) {
         if (ftpUrl == null || ftpUrl.length() < 6)
             return "";
 
@@ -358,7 +358,7 @@ public class FTPDialog extends UnoDialog
      * @param ftpUrl
      * @return the directory portion of the ftp-url
      */
-    private String extractDir(String ftpUrl) {
+    public String extractDir(String ftpUrl) {
         if (ftpUrl == null || ftpUrl.length() < 6)
             return "/";
 
@@ -375,7 +375,7 @@ public class FTPDialog extends UnoDialog
      * according to the status of the hostname, username, password text fields.
      * If one of these fields is empty, the button is disabled.
      */
-    private void enableTestButton() {
+    public void enableTestButton() {
         setEnabled(btnTestConnection, !(isEmpty(host) || isEmpty(username) || isEmpty(password)));
 
     }
@@ -383,7 +383,7 @@ public class FTPDialog extends UnoDialog
      * @param s
      * @return true if the string is null or "".
      */
-    private final boolean isEmpty(String s) {
+    public final boolean isEmpty(String s) {
         return (s==null) || (s.equals(""));
     }
 
@@ -399,18 +399,18 @@ public class FTPDialog extends UnoDialog
      * return the host name without the "ftp://"
      * @return
      */
-    private String host() {
+    public String host() {
         return host(host);
     }
 
-    private static String host(String s) {
+    public static String host(String s) {
         return (s.startsWith("ftp://") ? s.substring(6) : s);
     } 
 
     /**
      * @return the full ftp url including username, password and directory portion.
      */
-    private String getFullUrl() {
+    public String getFullUrl() {
         return getAcountUrl() + dir;
     }
     
@@ -469,7 +469,7 @@ public class FTPDialog extends UnoDialog
      * @param acountUrl
      * @throws Exception
      */
-    private void connect(String acountUrl) throws Exception {
+    public void connect(String acountUrl) throws Exception {
         Object content = ucb.getContent(acountUrl);
 
         //list files in the content.
@@ -543,7 +543,7 @@ public class FTPDialog extends UnoDialog
      * @param status one opf the private status-constants.
      * if this param is not one of them, an "unknown error" status is displayed.
      */
-    private void setLabel(int status) {
+    public void setLabel(int status) {
         switch (status) {
             //not connected yet
             case STATUS_UNKONWN:
@@ -582,13 +582,13 @@ public class FTPDialog extends UnoDialog
      * @param label
      * @param color
      */
-    private void setLabel(String label, String image) {
+    public void setLabel(String label, String image) {
         Helper.setUnoPropertyValue(getModel(lblStatus), "Label", label);
         Helper.setUnoPropertyValue(getModel(imgStatus), "ImageURL", imageUrl(image));
     }
     
 
-    private String imageUrl(String s) {
+    public String imageUrl(String s) {
         String t = imagesDirectory + s;
         //System.out.println(t);
         return t;
--- wizards/com/sun/star/wizards/web/IconsDialog.java	2006-07-13 14:20:31.000000000 +0200
+++ wizards/com/sun/star/wizards/web/IconsDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -53,14 +53,14 @@ import com.sun.star.wizards.web.data.CGI
  */
 public class IconsDialog extends ImageListDialog implements ImageList.ImageRenderer, ListModel {
 
-    private ConfigSet set;
+    public ConfigSet set;
     String htmlexpDirectory;
     /**
      * this icons filename prefixes are used to display the icons.
      */
-    private String[] icons = new String[] 
+    public String[] icons = new String[] 
          {"firs","prev","next","last","nav","text","up","down"};
-    private Integer[] objects;
+    public Integer[] objects;
     
     
     /**
@@ -169,23 +169,23 @@ public class IconsDialog extends ImageLi
     }
     
 
-    private int getIconsetNum(int i) {
+    public int getIconsetNum(int i) {
         return i / icons.length;
     }
         
-    private int getIconNum(int i) {
+    public int getIconNum(int i) {
         return i % icons.length;
     } 
     
-    private String getIconsetPref(int iconset) {
+    public String getIconsetPref(int iconset) {
         return getIconset(iconset).cp_FNPrefix;
     }
         
-    private String getIconsetPostfix(int iconset) {
+    public String getIconsetPostfix(int iconset) {
         return getIconset(iconset).cp_FNPostfix;
     }
         
-    private CGIconSet getIconset(int i ) {
+    public CGIconSet getIconset(int i ) {
         return (CGIconSet)set.getElementAt(i); 
     }
 
--- wizards/com/sun/star/wizards/web/ImageListDialog.java	2006-04-07 15:39:48.000000000 +0200
+++ wizards/com/sun/star/wizards/web/ImageListDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -74,44 +74,44 @@ import com.sun.star.wizards.ui.ImageList
  */
 public abstract class ImageListDialog  extends UnoDialog2 implements UIConsts  {
   
-  private String[] resources;
+  public String[] resources;
   
-  private final static int RES_TITLE = 0;
-  private final static int RES_LABEL = 1;
-  private final static int RES_OK = 2;
-  private final static int RES_CANCEL = 3;
-  private final static int RES_HELP = 4;
-  private final static int RES_DESELECT = 5;
-  private final static int RES_OTHER = 6;
-  private final static int RES_COUNTER = 7;
+  public final static int RES_TITLE = 0;
+  public final static int RES_LABEL = 1;
+  public final static int RES_OK = 2;
+  public final static int RES_CANCEL = 3;
+  public final static int RES_HELP = 4;
+  public final static int RES_DESELECT = 5;
+  public final static int RES_OTHER = 6;
+  public final static int RES_COUNTER = 7;
   
     //GUI Components as Class members.
-  private XButton btnOK;
-  private XButton btnCancel;
-  private XButton btnHelp;
-  private XButton btnOther;
-  private XButton btnDeselect;
-  
-  private static final String START = "%START";
-  private static final String END = "%END";
-  private static final String TOTAL= "%TOTAL";
+  public XButton btnOK;
+  public XButton btnCancel;
+  public XButton btnHelp;
+  public XButton btnOther;
+  public XButton btnDeselect;
+  
+  public static final String START = "%START";
+  public static final String END = "%END";
+  public static final String TOTAL= "%TOTAL";
   
-  protected int cutFilename = 0;
+  public int cutFilename = 0;
   
-  protected boolean showDeselectButton = true;
-  protected boolean showOtherButton = true;
+  public boolean showDeselectButton = true;
+  public boolean showOtherButton = true;
   
-  private XFixedText lblTitle;
+  public XFixedText lblTitle;
   //Font Descriptors as Class members.
-  private FontDescriptor fontDescriptor1 = new FontDescriptor();
+  public FontDescriptor fontDescriptor1 = new FontDescriptor();
   
-  protected ImageList il;
+  public ImageList il;
   
   //private FileAccess fileAccess;
   
-  private Object result;
+  public Object result;
   
-  private int hid;
+  public int hid;
   
   /**
    * 
@@ -138,7 +138,7 @@ public abstract class ImageListDialog  e
    * This method should be called by subclasses after setting
    * the il ImageList member properties 
    */
-  protected void build() { 
+  public void build() { 
     //set dialog properties...
     
     int ilWidth = (il.getImageSize().Width + il.getGap().Width) * il.getCols()+ il.getGap().Width;
--- wizards/com/sun/star/wizards/web/LogTaskListener.java	2006-04-07 15:40:07.000000000 +0200
+++ wizards/com/sun/star/wizards/web/LogTaskListener.java	2007-05-24 11:24:05.000000000 +0200
@@ -17,7 +17,7 @@ import com.sun.star.wizards.ui.event.Tas
  */
 public class LogTaskListener implements TaskListener, ErrorHandler {
     
-    private PrintStream out;
+    public PrintStream out;
     
     public LogTaskListener(PrintStream os) {
         out = os;
--- wizards/com/sun/star/wizards/web/ProcessErrorHandler.java	2006-04-07 15:40:55.000000000 +0200
+++ wizards/com/sun/star/wizards/web/ProcessErrorHandler.java	2007-05-24 11:24:05.000000000 +0200
@@ -54,9 +54,9 @@ public class ProcessErrorHandler extends
                 ProcessErrors 
 {
     
-    private static final String FILENAME= "%FILENAME";
-    private static final String URL = "%URL";
-    private static final String ERROR = "%ERROR";
+    public static final String FILENAME= "%FILENAME";
+    public static final String URL = "%URL";
+    public static final String ERROR = "%ERROR";
   
     
     WebWizardDialogResources resources;
@@ -66,7 +66,7 @@ public class ProcessErrorHandler extends
         resources = res;
     }
 
-    protected String getMessageFor(Exception ex, Object obj, int ix, int errType) {
+    public String getMessageFor(Exception ex, Object obj, int ix, int errType) {
 
         switch (ix) {
 
--- wizards/com/sun/star/wizards/web/Process.java	2006-07-17 16:13:08.000000000 +0200
+++ wizards/com/sun/star/wizards/web/Process.java	2007-05-24 11:24:05.000000000 +0200
@@ -98,25 +98,25 @@ import com.sun.star.wizards.web.export.E
  */
 public class Process implements WebWizardConst, ProcessErrors {
     
-    private static final int TASKS_PER_DOC = 5;
-    private static final int TASKS_PER_XSL = 2;
-    private static final int TASKS_PER_PUBLISH = 2;
+    public static final int TASKS_PER_DOC = 5;
+    public static final int TASKS_PER_XSL = 2;
+    public static final int TASKS_PER_PUBLISH = 2;
 
-    private static final int TASKS_IN_PREPARE = 1;
-    private static final int TASKS_IN_EXPORT = 2;
-    private static final int TASKS_IN_GENERATE = 2;
-    private static final int TASKS_IN_PUBLISH = 2;
-    private static final int TASKS_IN_FINISHUP = 1;
+    public static final int TASKS_IN_PREPARE = 1;
+    public static final int TASKS_IN_EXPORT = 2;
+    public static final int TASKS_IN_GENERATE = 2;
+    public static final int TASKS_IN_PUBLISH = 2;
+    public static final int TASKS_IN_FINISHUP = 1;
 
-    private CGSettings settings;
-    private XMultiServiceFactory xmsf;
+    public CGSettings settings;
+    public XMultiServiceFactory xmsf;
     
-    private ErrorHandler errorHandler;
+    public ErrorHandler errorHandler;
     
     
-    private String tempDir;
-    private FileAccess fileAccess;
-    private UCB ucb;
+    public String tempDir;
+    public FileAccess fileAccess;
+    public UCB ucb;
     
     public Task myTask;
     
@@ -124,9 +124,9 @@ public class Process implements WebWizar
      * This is a cache for exporters, so I do not need to 
      * instanciate the same exporter more than once. 
      */
-    private Map exporters = new Hashtable(3);
+    public Map exporters = new Hashtable(3);
     
-    private boolean result;
+    public boolean result;
     
     public Process(
         CGSettings settings, 
@@ -152,7 +152,7 @@ public class Process implements WebWizar
      * @return to how many destinations should the
      * generated site be published. 
      */
-    private int countPublish() {
+    public int countPublish() {
         int count = 0;
         ConfigSet publishers = settings.cp_DefaultSession.cp_Publishing;
         for (int i = 0; i<publishers.getSize(); i++)
@@ -165,7 +165,7 @@ public class Process implements WebWizar
      * @return the number of task steps that this
      * session should have
      */
-    private int getTaskSteps() {
+    public int getTaskSteps() {
         int docs = settings.cp_DefaultSession.cp_Content.cp_Documents.getSize();
         int xsl = 0;
         try {
@@ -224,7 +224,7 @@ public class Process implements WebWizar
      * @param task
      * @return true should continue
      */
-    private boolean createTempDir(Task task) {
+    public boolean createTempDir(Task task) {
 
         tempDir = fileAccess.createNewDir(getSOTempDir(xmsf), "wwiztemp");
         if (tempDir == null) {
@@ -256,7 +256,7 @@ public class Process implements WebWizar
      * delete the temporary directory
      * @return true should continue
      */ 
-    private boolean cleanup(Task task) {
+    public boolean cleanup(Task task) {
         
         task.setSubtaskName(TASK_FINISH);
         boolean b = fileAccess.delete(tempDir);
@@ -340,7 +340,7 @@ public class Process implements WebWizar
      * @param task task tracking.
      * @return true if should continue
      */
-    private boolean publish(String dir, Task task ) {
+    public boolean publish(String dir, Task task ) {
         task.setSubtaskName(TASK_PUBLISH_PREPARE);
         ConfigSet set = settings.cp_DefaultSession.cp_Publishing;
         try {
@@ -388,7 +388,7 @@ public class Process implements WebWizar
      * @param task task tracking
      * @return true if should continue
      */
-    private boolean publish(String dir,CGPublish publish,UCB copy,Task task) {
+    public boolean publish(String dir,CGPublish publish,UCB copy,Task task) {
         try {
             //copy.deleteDirContent(publish.url);
             task.advance(true);
@@ -540,7 +540,7 @@ public class Process implements WebWizar
      * @param task
      * @return
      */
-    private boolean export(Task task) {
+    public boolean export(Task task) {
 
         return export(settings.cp_DefaultSession.cp_Content, tempDir, task);
 
@@ -556,7 +556,7 @@ public class Process implements WebWizar
      * @param task
      * @return true if should continue
      */
-    private boolean export(CGContent content, String dir, Task task) {
+    public boolean export(CGContent content, String dir, Task task) {
         int toPerform = 1;
         String contentDir = dir;
     
@@ -630,7 +630,7 @@ public class Process implements WebWizar
      * @param task task tracking
      * @return true if should continue
      */
-    private boolean export(CGDocument doc, String dir,Task task) {
+    public boolean export(CGDocument doc, String dir,Task task) {
         
         //first I check if the document was already validated...
         if (!doc.valid)
@@ -728,7 +728,7 @@ public class Process implements WebWizar
      * @param errType error type
      * @return the interaction result
      */
-    private boolean error(Exception ex, Object arg1, int arg2, int errType) {
+    public boolean error(Exception ex, Object arg1, int arg2, int errType) {
         result = false;
         return errorHandler.error(ex,arg1,arg2,errType);
     }
@@ -740,7 +740,7 @@ public class Process implements WebWizar
      * @param task the task to advance
      * @param count the number of steps to advance
      */
-    private void failTask(Task task, int count) {
+    public void failTask(Task task, int count) {
         while (count-- > 0)
           task.advance(false);
     }
@@ -755,7 +755,7 @@ public class Process implements WebWizar
      * @throws IllegalAccessException
      * @throws InstantiationException
      */
-    private Exporter createExporter(CGExporter export)
+    public Exporter createExporter(CGExporter export)
         throws  ClassNotFoundException,
                 IllegalAccessException,
                 InstantiationException
@@ -776,7 +776,7 @@ public class Process implements WebWizar
      * @throws IllegalAccessException thrown when using Class.forName(string)
      * @throws InstantiationException thrown when using Class.forName(string)
      */
-    private Exporter getExporter(CGExporter export) 
+    public Exporter getExporter(CGExporter export) 
         throws  ClassNotFoundException,
                 IllegalAccessException,
                 InstantiationException
--- wizards/com/sun/star/wizards/web/status/ErrorLog.java	2006-04-07 15:52:52.000000000 +0200
+++ wizards/com/sun/star/wizards/web/status/ErrorLog.java	2007-05-24 11:24:05.000000000 +0200
@@ -17,7 +17,7 @@ import java.util.Vector;
  */
 public class ErrorLog implements ErrorReporter {
     
-    private List errors = new Vector();
+    public List errors = new Vector();
 
     public void error(Exception ex, Object obj, String s) {
       errors.add(new Err(ex,obj,s));
--- wizards/com/sun/star/wizards/web/status/LogTaskListener.java	2006-04-07 15:53:08.000000000 +0200
+++ wizards/com/sun/star/wizards/web/status/LogTaskListener.java	2007-05-24 11:24:05.000000000 +0200
@@ -16,7 +16,7 @@ import java.io.PrintStream;
  */
 public class LogTaskListener implements TaskListener {
     
-    private PrintStream out;
+    public PrintStream out;
     
     public LogTaskListener(PrintStream os) {
         out = os;
--- wizards/com/sun/star/wizards/web/status/TaskEvent.java	2006-04-07 15:53:41.000000000 +0200
+++ wizards/com/sun/star/wizards/web/status/TaskEvent.java	2007-05-24 11:24:05.000000000 +0200
@@ -21,7 +21,7 @@ public class TaskEvent extends EventObje
     public static final int TASK_STATUS_CHANGED = 3;
     public static final int SUBTASK_NAME_CHANGED = 4;
     
-    private int type;
+    public int type;
     
     /**
      * general constructor-
--- wizards/com/sun/star/wizards/web/status/Task.java	2006-04-07 15:53:27.000000000 +0200
+++ wizards/com/sun/star/wizards/web/status/Task.java	2007-05-24 11:24:05.000000000 +0200
@@ -16,13 +16,13 @@ import java.util.Vector;
  * Window>Preferences>Java>Code Generation>Code and Comments
  */
 public class Task {
-    private int successfull = 0;
-    private int failed = 0;
+    public int successfull = 0;
+    public int failed = 0;
     
-    private int max = 0;
-    private String taskName;
-    private List listeners = new Vector();
-    private String subtaskName;
+    public int max = 0;
+    public String taskName;
+    public List listeners = new Vector();
+    public String subtaskName;
     
     
     public Task(String taskName_ , String subtaskName_, int max_) {
@@ -71,28 +71,28 @@ public class Task {
         listeners.remove(tl);
     }
     
-    protected void fireTaskStatusChanged() {
+    public void fireTaskStatusChanged() {
         TaskEvent te = new TaskEvent(this, TaskEvent.TASK_STATUS_CHANGED);
         
         for (int i = 0; i<listeners.size(); i++)
           ((TaskListener)listeners.get(i)).taskStatusChanged(te);
     }
     
-    protected void fireTaskStarted() {  
+    public void fireTaskStarted() {  
         TaskEvent te = new TaskEvent(this, TaskEvent.TASK_STARTED);
         
         for (int i = 0; i<listeners.size(); i++)
           ((TaskListener)listeners.get(i)).taskStarted(te);
     }
     
-    protected void fireTaskFinished() {
+    public void fireTaskFinished() {
         TaskEvent te = new TaskEvent(this, TaskEvent.TASK_FINISHED);
         
         for (int i = 0; i<listeners.size(); i++)
           ((TaskListener)listeners.get(i)).taskFinished(te);
     }
     
-    protected void fireSubtaskNameChanged() {
+    public void fireSubtaskNameChanged() {
             TaskEvent te = new TaskEvent(this, TaskEvent.SUBTASK_NAME_CHANGED);
         
             for (int i = 0; i<listeners.size(); i++)
--- wizards/com/sun/star/wizards/web/StatusDialog.java	2006-04-07 15:42:03.000000000 +0200
+++ wizards/com/sun/star/wizards/web/StatusDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -59,20 +59,20 @@ public class StatusDialog extends UnoDia
 
     public static final int STANDARD_WIDTH = 240;
 
-    private XProgressBar progressBar;
-    private XFixedText lblTaskName;
-    private XFixedText lblCounter;
-    private XButton btnCancel;
-
-    private String[] res;
-    private Renderer renderer;
-    private boolean enableBreak = false;
-    private boolean closeOnFinish = true;
-    private MethodInvocation finishedMethod;
+    public XProgressBar progressBar;
+    public XFixedText lblTaskName;
+    public XFixedText lblCounter;
+    public XButton btnCancel;
+
+    public String[] res;
+    public Renderer renderer;
+    public boolean enableBreak = false;
+    public boolean closeOnFinish = true;
+    public MethodInvocation finishedMethod;
 
-    private UnoDialog parent;
+    public UnoDialog parent;
 
-    private boolean finished;
+    public boolean finished;
 
     /**
      * Note on the argument resource:
@@ -120,12 +120,12 @@ public class StatusDialog extends UnoDia
 
     }
 
-    private void initProgressBar(Task t) {
+    public void initProgressBar(Task t) {
         progressBar.setRange(0,t.getMax());
         progressBar.setValue(0);
     }
 
-    private void setStatus(int status) {
+    public void setStatus(int status) {
         if (finished) return;
         progressBar.setValue(status);
         xReschedule.reschedule();
@@ -141,7 +141,7 @@ public class StatusDialog extends UnoDia
      * change the max property of the status bar
      * @param max
      */
-    private void setMax(int max) {
+    public void setMax(int max) {
         if (finished) return;
         Helper.setUnoPropertyValue(getModel(progressBar),"ProgressValueMax", new Integer(max));
     }
--- wizards/com/sun/star/wizards/web/StylePreview.java	2006-07-13 14:28:39.000000000 +0200
+++ wizards/com/sun/star/wizards/web/StylePreview.java	2007-05-24 11:24:05.000000000 +0200
@@ -49,7 +49,7 @@ import com.sun.star.wizards.web.data.CGS
  * of the user.
  */
 public class StylePreview {
-    private FileAccess fileAccess;
+    public FileAccess fileAccess;
     /**
      * the destination html url.
      */
@@ -57,7 +57,7 @@ public class StylePreview {
     /** 
      * the destination css url
      */
-    private String cssFilename;
+    public String cssFilename;
     /**
      * destination directory
      */
@@ -65,11 +65,11 @@ public class StylePreview {
     /**
      * destination background file url
      */
-    private String backgroundFilename;
+    public String backgroundFilename;
     /**
      * web wizard work directory
      */
-    private String wwRoot;
+    public String wwRoot;
     
     
     /**
@@ -133,7 +133,7 @@ public class StylePreview {
      * @return the url of the new directory.
      * @throws Exception
      */
-    private String createTempDir(XMultiServiceFactory xmsf) throws Exception {
+    public String createTempDir(XMultiServiceFactory xmsf) throws Exception {
         String tempPath = FileAccess.getOfficePath(xmsf,"Temp","", "") ;
         String s = fileAccess.createNewDir(tempPath, "wwiz");
         fileAccess.createNewDir(s,"images");
@@ -144,7 +144,7 @@ public class StylePreview {
      * deletes/removes the temporary directroy.
      * @throws Exception
      */
-    private void removeTempDir() throws Exception {
+    public void removeTempDir() throws Exception {
         fileAccess.delete(tempDir);
     }
 
--- wizards/com/sun/star/wizards/web/TOCPreview.java	2006-04-07 15:42:38.000000000 +0200
+++ wizards/com/sun/star/wizards/web/TOCPreview.java	2007-05-24 11:24:05.000000000 +0200
@@ -71,15 +71,15 @@ import com.sun.star.wizards.web.data.CGS
  */
  
 public class TOCPreview {
-    private String tempDir = null;
-    private XMultiServiceFactory xmsf;
-    private FileAccess fileAccess;
-    private WebWizardDialogResources resources;
-    private URL openHyperlink;
-    private XDispatch xDispatch;
-    private PropertyValue[] loadArgs;
-    private UCB ucb;
-    private XFrame xFrame;
+    public String tempDir = null;
+    public XMultiServiceFactory xmsf;
+    public FileAccess fileAccess;
+    public WebWizardDialogResources resources;
+    public URL openHyperlink;
+    public XDispatch xDispatch;
+    public PropertyValue[] loadArgs;
+    public UCB ucb;
+    public XFrame xFrame;
     
     /**
      * @param xmsf_
@@ -122,7 +122,7 @@ public class TOCPreview {
     }
 
 
-    private PropertyValue[] loadArgs(String url) {
+    public PropertyValue[] loadArgs(String url) {
         PropertyValue pv = new PropertyValue();
         pv.Name = "URL";
         pv.Value = url;
--- wizards/com/sun/star/wizards/web/WebWizardDialog.java	2006-04-07 15:44:51.000000000 +0200
+++ wizards/com/sun/star/wizards/web/WebWizardDialog.java	2007-05-24 11:24:05.000000000 +0200
@@ -192,17 +192,17 @@ public abstract class WebWizardDialog  e
   FontDescriptor fontDescriptor7 = new FontDescriptor();
   
   //private static String[] PROPNAMES_LBL_NOFOCUS =     new String[] {"Height", "Label", "Name", "PositionX", "PositionY", "Step", "Width"};
-  private static String[] PROPNAMES_LBL =           new String[] { "Height", "Label", "Name", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
-  private static String[] PROPNAMES_CHKBOX =        new String[] { "Height", "HelpURL", "Label", "Name", "PositionX", "PositionY", "State", "Step", "TabIndex", "Width" };
-  private static String[] PROPNAMES_BUTTON =        new String[] { "Height", "HelpURL", "Label", "Name", "PositionX", "PositionY", "Step", "TabIndex", "Width" };  
-  private static String[] PROPNAMES_TXT =           new String[] { "Height", "HelpURL", "Name", "PositionX", "PositionY", "Step", "TabIndex", "Width" };  
-  private static String[] PROPNAMES_TXT_2 =         new String[] { "Height", "HelpURL", "Name", "PositionX", "PositionY", "ReadOnly", "Step", "TabIndex", "Width" };
-  private static String[] PROPNAMES_TITLE =         new String[] { "FontDescriptor", "Height", "Label", "MultiLine", "Name", "PositionX", "PositionY", "Step", "TabIndex", "Width" };
+  public static String[] PROPNAMES_LBL =           new String[] { "Height", "Label", "Name", "PositionX", "PositionY", "Step", "TabIndex", "Width"};
+  public static String[] PROPNAMES_CHKBOX =        new String[] { "Height", "HelpURL", "Label", "Name", "PositionX", "PositionY", "State", "Step", "TabIndex", "Width" };
+  public static String[] PROPNAMES_BUTTON =        new String[] { "Height", "HelpURL", "Label", "Name", "PositionX", "PositionY", "Step", "TabIndex", "Width" };  
+  public static String[] PROPNAMES_TXT =           new String[] { "Height", "HelpURL", "Name", "PositionX", "PositionY", "Step", "TabIndex", "Width" };  
+  public static String[] PROPNAMES_TXT_2 =         new String[] { "Height", "HelpURL", "Name", "PositionX", "PositionY", "ReadOnly", "Step", "TabIndex", "Width" };
+  public static String[] PROPNAMES_TITLE =         new String[] { "FontDescriptor", "Height", "Label", "MultiLine", "Name", "PositionX", "PositionY", "Step", "TabIndex", "Width" };
   
-  private static Integer INTEGER_91 = new Integer(91);
-  private static Integer INTEGER_97 = new Integer(97);
-  private static Integer INTEGER_103 = new Integer(103);
-  private static Integer INTEGER_169 = new Integer(169);
+  public static Integer INTEGER_91 = new Integer(91);
+  public static Integer INTEGER_97 = new Integer(97);
+  public static Integer INTEGER_103 = new Integer(103);
+  public static Integer INTEGER_169 = new Integer(169);
   
   
     //Resources Object
@@ -668,7 +668,7 @@ public abstract class WebWizardDialog  e
    * @author rpiterman
    
    */
-  private class LayoutRenderer implements ImageList.ImageRenderer {
+  public class LayoutRenderer implements ImageList.ImageRenderer {
 
     public Object[] getImageUrls(Object listItem) {
         Object[] oResIds = null;
--- wizards/com/sun/star/wizards/web/WWD_Events.java	2006-04-07 15:42:59.000000000 +0200
+++ wizards/com/sun/star/wizards/web/WWD_Events.java	2007-05-24 11:24:05.000000000 +0200
@@ -70,7 +70,7 @@ import com.sun.star.wizards.web.data.CGS
  */
 public abstract class WWD_Events extends WWD_Startup {
 
-    private static final short[] EMPTY_SHORT_ARRAY = new short[0];
+    public static final short[] EMPTY_SHORT_ARRAY = new short[0];
     
     
     /**
@@ -78,7 +78,7 @@ public abstract class WWD_Events extends
      * If "" - it means the current session is the default one (empty)
      * If a session is loaded, this will be the name of the loaded session.
      */
-    protected String currentSession = "";
+    public String currentSession = "";
     
     /**
      * He - my constructor !
@@ -102,14 +102,14 @@ public abstract class WWD_Events extends
      *  *******************************************************
      * *********************************************************/
 
-    protected void leaveStep(int nOldStep, int nNewStep) {
+    public void leaveStep(int nOldStep, int nNewStep) {
         if (nOldStep == 1 && nNewStep == 2) {
             // 1. check if the selected session is the same as the current one.
         }
     }
 
     
-    protected void enterStep(int old, int newStep) {
+    public void enterStep(int old, int newStep) {
         if ((old == 1)) {
             String sessionToLoad = "";
             short[] s = (short[]) Helper.getUnoPropertyValue(getModel(lstLoadSettings), "SelectedItems");
@@ -255,7 +255,7 @@ public abstract class WWD_Events extends
         return selectedDoc;
     }
 
-    private static String[] EMPTY_STRING_ARRAY = new String[0];
+    public static String[] EMPTY_STRING_ARRAY = new String[0];
 
     /*  public void loadSessionSelected() {
             UIHelper.setEnabled(btnLoadSession,true);
@@ -384,7 +384,7 @@ public abstract class WWD_Events extends
      * invoked when the user clicks "Choose backgrounds" button.
      */
 
-    private ImageListDialog bgDialog;
+    public ImageListDialog bgDialog;
 
     /**
      * the user clicked the "backgrounds" button
@@ -416,7 +416,7 @@ public abstract class WWD_Events extends
         refreshStylePreview();
     }
 
-    private IconsDialog iconsDialog;
+    public IconsDialog iconsDialog;
 
     /**
      * is called when the user clicks "Icon sets" button.
@@ -458,7 +458,7 @@ public abstract class WWD_Events extends
      * sets the publishing url of either a local/zip or ftp publisher.
      * updates the ui....
      */
-    private CGPublish setPublishUrl(String publisher, String url, int number) {
+    public CGPublish setPublishUrl(String publisher, String url, int number) {
         if (url == null)
             return null;
         CGPublish p = getPublisher(publisher);
@@ -474,7 +474,7 @@ public abstract class WWD_Events extends
      * (the text box url)
      * @param number
      */
-    private void updatePublishUI(int number) {
+    public void updatePublishUI(int number) {
         ((DataAware) pubAware.get(number)).updateUI();
         ((DataAware) pubAware.get(number + 1)).updateUI();
         checkPublish();
@@ -507,7 +507,7 @@ public abstract class WWD_Events extends
      * @param pub
      * @return true if OK was pressed, otherwise false.
      */
-    private boolean showFTPDialog(CGPublish pub) {
+    public boolean showFTPDialog(CGPublish pub) {
         try {
             return getFTPDialog(pub).execute(this) == 1;
         } catch (Exception ex) {
@@ -527,7 +527,7 @@ public abstract class WWD_Events extends
         getPublisher(ZIP_PUBLISHER).overwriteApproved = true;
     }
 
-    private TOCPreview docPreview;
+    public TOCPreview docPreview;
 
     
     /**
@@ -554,7 +554,7 @@ public abstract class WWD_Events extends
      * be replaced.
      * @return true if "create" should continue. false if "create" should abort.
      */
-    private boolean publishTargetApproved() {
+    public boolean publishTargetApproved() {
         boolean result = true;
         // 1. check local publish target
         
@@ -717,7 +717,7 @@ public abstract class WWD_Events extends
     /*
      * return false if "create" should be aborted. true if everything is fine.
      */
-    private boolean saveSession() {
+    public boolean saveSession() {
         try {
             Object node = null;
             String name = getSessionSaveName();
@@ -778,7 +778,7 @@ public abstract class WWD_Events extends
         }
     }
 
-    private String targetStringFor(String publisher) {
+    public String targetStringFor(String publisher) {
         CGPublish p = getPublisher(publisher);
         if (p.cp_Publish)
                 return "\n" + getFileAccess().getPath(p.cp_URL,null);
@@ -811,8 +811,8 @@ public abstract class WWD_Events extends
         xDialog.endExecute();
     }
 
-    private Process process;
-    private boolean exitOnCreate = true;
+    public Process process;
+    public boolean exitOnCreate = true;
     
     /**
      * the user clicks the finish/create button.
@@ -858,7 +858,7 @@ public abstract class WWD_Events extends
      * popped up when clicking "Create". 
      *
      */
-    private void finishWizard2() {      
+    public void finishWizard2() {      
         
         CGPublish p = getPublisher(LOCAL_PUBLISHER);
         p.url = p.cp_URL;
@@ -956,7 +956,7 @@ public abstract class WWD_Events extends
      * of the last steps' checkboxes.
      * @author rp143992
      */
-    private class Create implements XKeyListener {
+    public class Create implements XKeyListener {
         long time = 0;
         int count = 0;
         
@@ -1029,7 +1029,7 @@ public abstract class WWD_Events extends
     }
     
     public class LoadDocs {
-        private XControl xC;
+        public XControl xC;
         String[] files;
         Task task;
         
--- wizards/com/sun/star/wizards/web/WWD_General.java	2006-04-07 15:43:18.000000000 +0200
+++ wizards/com/sun/star/wizards/web/WWD_General.java	2007-05-24 11:24:05.000000000 +0200
@@ -55,22 +55,22 @@ import com.sun.star.wizards.web.data.CGS
 public abstract class WWD_General extends WebWizardDialog {
     
     
-    private FileAccess fileAccess;
+    public FileAccess fileAccess;
     
-    private SystemDialog docAddDialog, folderDialog, favIconDialog, zipDialog;
+    public SystemDialog docAddDialog, folderDialog, favIconDialog, zipDialog;
     
-    protected FTPDialog ftpDialog;
+    public FTPDialog ftpDialog;
     
-    protected CGSettings settings;
+    public CGSettings settings;
     
     
     /**
      * true if proxies are on, which means, ftp is disabled.
      */
-    protected boolean proxies;
-    private XStringSubstitution xStringSubstitution ;
+    public boolean proxies;
+    public XStringSubstitution xStringSubstitution ;
     
-    protected StatusDialog getStatusDialog() {
+    public StatusDialog getStatusDialog() {
     
         StatusDialog statusDialog = new StatusDialog(xMSF, StatusDialog.STANDARD_WIDTH,  resources.resLoadingSession , false , new String[] { resources.prodName, "", "", "", "", "" }, "HID:"+ HID0_STATUS_DIALOG);
         try {
@@ -96,7 +96,7 @@ public abstract class WWD_General extend
      */
 
     
-    protected SystemDialog getDocAddDialog() {
+    public SystemDialog getDocAddDialog() {
         //if (docAddDialog == null) {
             docAddDialog = SystemDialog.createOpenDialog(xMSF);
             for (int i = 0; i < settings.cp_Filters.getSize(); i++) {
@@ -113,7 +113,7 @@ public abstract class WWD_General extend
         return docAddDialog;
     }
     
-    protected SystemDialog getZipDialog() {
+    public SystemDialog getZipDialog() {
         if (zipDialog==null) {
             zipDialog = SystemDialog.createStoreDialog(xMSF);
             zipDialog.addFilter(resources.resZipFiles,"*.zip",true); 
@@ -121,7 +121,7 @@ public abstract class WWD_General extend
         return zipDialog;
     }
     
-    protected FTPDialog getFTPDialog(CGPublish pub) {
+    public FTPDialog getFTPDialog(CGPublish pub) {
         if (ftpDialog == null) {
             try {
                 ftpDialog = new FTPDialog(xMSF,pub);
@@ -135,14 +135,14 @@ public abstract class WWD_General extend
     }
     
     
-    protected String showFolderDialog(String title, String description,String dir) {
+    public String showFolderDialog(String title, String description,String dir) {
         if (folderDialog == null)
             folderDialog = SystemDialog.createFolderDialog(xMSF);
         return folderDialog.callFolderDialog(title,description,dir);
     }
     
     
-    protected FileAccess getFileAccess() {
+    public FileAccess getFileAccess() {
         if (fileAccess == null)
           try {
             fileAccess = new FileAccess(xMSF);
@@ -160,7 +160,7 @@ public abstract class WWD_General extend
      * @param s
      * @return
      */
-    protected CGDocument getDoc(short[] s) {
+    public CGDocument getDoc(short[] s) {
         if (s.length==0)
           return null;
         else if (settings.cp_DefaultSession.cp_Content.cp_Documents.getSize() <= s[0])
@@ -172,7 +172,7 @@ public abstract class WWD_General extend
      * how many documents are in the list?
      * @return the number of documents in the docs list.
      */
-    protected int getDocsCount() {
+    public int getDocsCount() {
         return settings.cp_DefaultSession.cp_Content.cp_Documents.getSize(); 
     }
     
@@ -181,7 +181,7 @@ public abstract class WWD_General extend
      * fills the export listbox.
      * @param listContent
      */
-    protected void fillExportList(Object[] listContent) {
+    public void fillExportList(Object[] listContent) {
         ListModelBinder.fillList(lstDocTargetType,listContent,null);
     }
     
@@ -190,14 +190,14 @@ public abstract class WWD_General extend
      * @param name one of the WebWizardConst constants : FTP 
      * @return
      */
-    protected CGPublish getPublisher(String name) {
+    public CGPublish getPublisher(String name) {
         return (CGPublish)settings.cp_DefaultSession.cp_Publishing.getElement(name);
     }
     
     /**
      * @return true if the checkbox "save session" is checked.
      */
-    protected boolean isSaveSession() {
+    public boolean isSaveSession() {
         return (((Number)Helper.getUnoPropertyValue(
             getModel(chkSaveSettings),"State")).intValue()==1);
     }
@@ -205,7 +205,7 @@ public abstract class WWD_General extend
     /**
      * @return the name to save the session (step 7)
      */
-    protected String getSessionSaveName() {
+    public String getSessionSaveName() {
         return (String)Helper.getUnoPropertyValue(
             getModel(cbSaveSettings),"Text");
     }
@@ -216,7 +216,7 @@ public abstract class WWD_General extend
      * enables or disables the 'next' and the 'create' button.
      *
      */
-    protected void checkSteps() {
+    public void checkSteps() {
         /* first I check the document list.
          * If it is empty, then step3 and on are disabled.
          */
@@ -229,7 +229,7 @@ public abstract class WWD_General extend
      * enables/disables the steps 3 to 7)
      * @param enabled true = enabled, false = disabled.
      */
-    private void enableSteps(boolean enabled) {
+    public void enableSteps(boolean enabled) {
         
         if (!enabled && !isStepEnabled(3))
           return;
@@ -254,7 +254,7 @@ public abstract class WWD_General extend
      * create button.
      * @return
      */
-    protected boolean checkDocList() {
+    public boolean checkDocList() {
         if (settings.cp_DefaultSession.cp_Content.cp_Documents.getSize() == 0) {
             enableSteps(false);
             return false;
@@ -283,7 +283,7 @@ public abstract class WWD_General extend
      * active, returns true if the url is not empty...
      * if the url is empty, throws an exception
      */ 
-    private boolean checkPublish(String s, Object text, String property) {
+    public boolean checkPublish(String s, Object text, String property) {
         CGPublish p = getPublisher(s);
         if (p.cp_Publish) {
             String url = (String)Helper.getUnoPropertyValue(getModel(text),property);
@@ -304,7 +304,7 @@ public abstract class WWD_General extend
      * which are chosen are legal.
      * If proxies are on, ftp publisher is ignored.
      */
-    private boolean checkPublish_() {
+    public boolean checkPublish_() {
         try {
             return (checkPublish(LOCAL_PUBLISHER, txtLocalDir, "Text")
                 | ( !proxies && checkPublish(FTP_PUBLISHER, lblFTP, "Label")) 
@@ -330,7 +330,7 @@ public abstract class WWD_General extend
      * shows a message box "Unexpected Error... " :-)
      * @param ex
      */
-    protected void unexpectedError(Exception ex) {
+    public void unexpectedError(Exception ex) {
         ex.printStackTrace();
         XWindowPeer peer = xControl.getPeer();
         AbstractErrorHandler.showMessage(xMSF,peer,resources.resErrUnexpected, ErrorHandler.ERROR_PROCESS_FATAL);
@@ -341,7 +341,7 @@ public abstract class WWD_General extend
      * @param path a path, which might contain OOo path variables. 
      * @return the path, after substituing path variables.
      */
-    protected String substitute(String path) {
+    public String substitute(String path) {
         try {
             return xStringSubstitution.substituteVariables(path,false);
         }
--- wizards/com/sun/star/wizards/web/WWD_Startup.java	2006-07-13 14:28:54.000000000 +0200
+++ wizards/com/sun/star/wizards/web/WWD_Startup.java	2007-05-24 11:24:05.000000000 +0200
@@ -135,27 +135,27 @@ public abstract class WWD_Startup extend
      * We did not implement the live-preview document,
      * so this became obsolete.
      */
-    protected DataAware.Listener refresh;
+    public DataAware.Listener refresh;
     /**
      * Is called whenever a field is changed which
      * could affect the "create" button enable state,
      * like publishing-checkboxes, save-session check- and textbox.
      */
-    protected DataAware.Listener checkPublish = new CheckPublish();
+    public DataAware.Listener checkPublish = new CheckPublish();
 
     /**
      * The Vector containing DataAware objects
      * which relay on the selected document
      * as DataObject (or Model).
      */
-    protected List docAware = new Vector();
+    public List docAware = new Vector();
     /**
      * The Vector containing DataAware objects
      * which relay on the session's generalInfo
      * Object (CGSession.cp_GeneralInfo) as
      * DataObject (or model).
      */
-    protected List genAware = new Vector();
+    public List genAware = new Vector();
     /**
      * The vector containing DataAware objectscm25npd ..
      * which relay on the session's Design Object
@@ -163,7 +163,7 @@ public abstract class WWD_Startup extend
      * (or model).
      *
      */
-    protected List designAware = new Vector();
+    public List designAware = new Vector();
     /**
      * A Vector containig the DataAware objects
      * which relay on Publishing Objects.
@@ -172,7 +172,7 @@ public abstract class WWD_Startup extend
      * on a <b>different</b> CGPublish object,
      * So they are handled with more care.
      */
-    protected List pubAware = new Vector(3);
+    public List pubAware = new Vector(3);
 
     /**
      * The DataAware object which handles
@@ -180,35 +180,35 @@ public abstract class WWD_Startup extend
      * This will call the set/getDocument() method
      * implemented in WWD_General.
      */
-    protected UnoDataAware docListDA;
+    public UnoDataAware docListDA;
     /**
      * DataAware object which synchronizes the session
      * name in step 7 with the CGSession.cp_Name
      */
-    protected UnoDataAware sessionNameDA;
+    public UnoDataAware sessionNameDA;
 
     /**
      * Binds a ListModel to the UnoControlListBox.
      */
-    protected ListModelBinder docsBinder;
+    public ListModelBinder docsBinder;
 
     /**
      *  a DocumentPreview object is
      * the UI OO Document preview
      * in the Dialog
      */
-    protected DocumentPreview dpStylePreview;
+    public DocumentPreview dpStylePreview;
     /**
      * An Object that implements the
      * File-copy and refresh of the
      * style preview
      */
-    protected StylePreview stylePreview;
+    public StylePreview stylePreview;
 
     /**
      * the currently selected document.
      */
-    protected short[] selectedDoc = new short[0];
+    public short[] selectedDoc = new short[0];
 
     /**
      * If ftp proxies are on, ftp is disabled, and
@@ -224,7 +224,7 @@ public abstract class WWD_Startup extend
      * The backgroundDoc memeber contains the TextDocument
      * instance used for that purpose.
      */
-    protected XFrame myFrame;
+    public XFrame myFrame;
 
 
     /* ******************************************
@@ -312,7 +312,7 @@ public abstract class WWD_Startup extend
      * @return true if (http) proxies are on.
      * @throws Exception
      */
-    private boolean getOOProxies() throws Exception {
+    public boolean getOOProxies() throws Exception {
         Object node = Configuration.getConfigurationRoot(xMSF,"org.openoffice.Inet/Settings",false);
         int i = Configuration.getInt("ooInetProxyType",node);
         //System.out.println("WWD:Startup:getOOProxies:" + i);
@@ -333,7 +333,7 @@ public abstract class WWD_Startup extend
      * The combobox text in step 7 will be updated
      * automatically when updateUI() is called.
      */
-    protected void setSaveSessionName(CGSession session) {
+    public void setSaveSessionName(CGSession session) {
         int max = 0;
         int len = resources.resSessionName.length();
         // traverse between the sessions and find the one that
@@ -349,7 +349,7 @@ public abstract class WWD_Startup extend
     }
 
 
-    private int max(int i1, int i2) {
+    public int max(int i1, int i2) {
         if (i1 > i2)
             return i1;
         else
@@ -361,7 +361,7 @@ public abstract class WWD_Startup extend
      * like MaxStep, Complete, Interactive-
      * Disables the finbihButton.
      */
-    private void addRoadMapItems() {
+    public void addRoadMapItems() {
         insertRoadMapItems(new String[] { resources.resStep1, resources.resStep2, resources.resStep3, resources.resStep4, resources.resStep5, resources.resStep6, resources.resStep7  }, new int[] { 1, 2, 3, 4, 5, 6, 7 }, new boolean[] { true, true, false, false, false, false, false });
 
         setRoadmapInteractive(true);
@@ -380,7 +380,7 @@ public abstract class WWD_Startup extend
      * the state of the corresponding data objects.
      *
      */
-    private void updateUI() {
+    public void updateUI() {
         DataAware.updateUI(designAware);
         DataAware.updateUI(genAware);
         DataAware.updateUI(pubAware);
@@ -388,7 +388,7 @@ public abstract class WWD_Startup extend
         checkPublish();
     }
 
-    private XFrame getFrame(Object model) {
+    public XFrame getFrame(Object model) {
         XModel xmodel = (XModel)UnoRuntime.queryInterface(XModel.class,model);
         return xmodel.getCurrentController().getFrame();
     }
@@ -431,7 +431,7 @@ public abstract class WWD_Startup extend
     /**
      * initializes the style preview.
      */
-    private void addStylePreview() {
+    public void addStylePreview() {
         try {
             dpStylePreview = new DocumentPreview(xMSF, imgPreview);
             stylePreview = new StylePreview(xMSF, settings.workPath);
@@ -446,7 +446,7 @@ public abstract class WWD_Startup extend
     /**
      * Loads the web wizard settings from the registry.
      */
-    private void loadSettings(Object document) {
+    public void loadSettings(Object document) {
         try {
             // instanciate
             String[] settingsResources = new String[] {
@@ -495,7 +495,7 @@ public abstract class WWD_Startup extend
     }
 
 
-    protected void prepareSessionLists() {
+    public void prepareSessionLists() {
         // now copy the sessions list...
         Object[] sessions = settings.cp_SavedSessions.items();
         settings.savedSessions.clear();
@@ -514,7 +514,7 @@ public abstract class WWD_Startup extend
      * Also set the selected "load" session to the last session
      * which was saved.
      */
-    private void fillLists() {
+    public void fillLists() {
         // fill the saved session list.
         ListModelBinder.fillList(lstLoadSettings, settings.cp_SavedSessions.items(), null);
 
@@ -530,7 +530,7 @@ public abstract class WWD_Startup extend
 
     }
 
-    protected void selectSession() {
+    public void selectSession() {
         int selectedSession = 0;
         if (settings.cp_LastSavedSession != null  && !settings.cp_LastSavedSession.equals("")) {
 
@@ -564,7 +564,7 @@ public abstract class WWD_Startup extend
      * textbox, no buttons though), a DataObject's JavaBean Property,
      * or class member.
      */
-    private void makeDataAware() {
+    public void makeDataAware() {
         //page 1
         new ListModelBinder(lstLoadSettings, settings.cp_SavedSessions);
 
@@ -641,7 +641,7 @@ public abstract class WWD_Startup extend
      * @param checkbox
      * @param textbox
      */
-    private void pubAware(String publish, Object checkbox, Object textbox, boolean isLabel) {
+    public void pubAware(String publish, Object checkbox, Object textbox, boolean isLabel) {
         Object p = settings.cp_DefaultSession.cp_Publishing.getElement(publish);
         UnoDataAware uda = UnoDataAware.attachCheckBox(p, "cp_Publish", checkbox, checkPublish, true);
         uda.setInverse(true);
@@ -671,7 +671,7 @@ public abstract class WWD_Startup extend
      * and ??? times for each document in the session.
      *
      */
-    protected void mount(CGSession session, Task task, boolean refreshStyle, XControl xC ) {
+    public void mount(CGSession session, Task task, boolean refreshStyle, XControl xC ) {
         /* This checks the documents. If the user
          * chooses to cancel, the session is not loaded.
          */
@@ -718,7 +718,7 @@ public abstract class WWD_Startup extend
      * @param data the CGPublish object
      * @param i the number of the object (0 = local, 1 = ftp, 2 = zip)
      */
-    private void mount(Object data, int i) {
+    public void mount(Object data, int i) {
         ((DataAware) pubAware.get(i * 2)).setDataObject(data, true);
         ((DataAware) pubAware.get(i * 2 + 1)).setDataObject(data, true);
     }
@@ -728,7 +728,7 @@ public abstract class WWD_Startup extend
      * @param root the CGContent object
      * that contains the documents (a ListModel)
      */
-    private void mount(CGContent root) {
+    public void mount(CGContent root) {
         ListModelBinder.fillList(lstDocuments, root.cp_Documents.items(), null);
         docsBinder.setListModel(root.cp_Documents);
         disableDocUpDown();
@@ -741,7 +741,7 @@ public abstract class WWD_Startup extend
      * @param data
      * @param list
      */
-    protected void mount(Object data, List list) {
+    public void mount(Object data, List list) {
         for (int i = 0; i < list.size(); i++)
              ((DataAware) list.get(i)).setDataObject(data, true);
     }
@@ -757,7 +757,7 @@ public abstract class WWD_Startup extend
      * displayed, using the Task object to monitor progress.
      * @return true if the document is ok (a file exists in the given url).
      */
-    protected boolean checkDocument(CGDocument doc, Task task, XControl xC) {
+    public boolean checkDocument(CGDocument doc, Task task, XControl xC) {
         try {
             doc.validate(xMSF, task);
             return true;
@@ -803,7 +803,7 @@ public abstract class WWD_Startup extend
      * @param content
      * @param task
      */
-    private void checkContent(CGContent content, Task task, XControl xC) {
+    public void checkContent(CGContent content, Task task, XControl xC) {
         for (int i = 0; i < content.cp_Documents.getSize(); i++)
             if (!checkDocument((CGDocument) content.cp_Documents.getElementAt(i), task, xC))
                 // I use here 'i--' since, when the document is removed
@@ -819,7 +819,7 @@ public abstract class WWD_Startup extend
      * changes the "create" button enable state accordingly.
      * @author rpiterman
      */
-    private class CheckPublish implements DataAware.Listener {
+    public class CheckPublish implements DataAware.Listener {
         public void eventPerformed(Object event) {
             checkPublish();
         }
@@ -832,7 +832,7 @@ public abstract class WWD_Startup extend
      * down disabled and so on...)
      *
      */
-    protected void disableDocUpDown() {
+    public void disableDocUpDown() {
         try {
             setEnabled(btnDocUp, selectedDoc.length == 0 ? Boolean.FALSE : (selectedDoc[0] == 0 ? Boolean.FALSE : Boolean.TRUE));
             setEnabled(btnDocDown, selectedDoc.length == 0 ? Boolean.FALSE : (selectedDoc[0] + 1 < settings.cp_DefaultSession.cp_Content.cp_Documents.getSize() ? Boolean.TRUE : Boolean.FALSE));
@@ -884,7 +884,7 @@ public abstract class WWD_Startup extend
     }
 
 
-    private class StylesComparator implements Comparator {
+    public class StylesComparator implements Comparator {
 
         /* (non-Javadoc)
          * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
