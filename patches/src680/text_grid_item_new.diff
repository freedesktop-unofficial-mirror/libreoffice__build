--- sw/inc/unomid.h.orig	2006-12-02 01:57:34.000000000 +0800
+++ sw/inc/unomid.h	2007-02-10 14:40:40.000000000 +0800
@@ -138,6 +138,9 @@
 #define MID_GRID_RUBY_BELOW     5
 #define MID_GRID_PRINT          6
 #define MID_GRID_DISPLAY        7
+#define MID_GRID_BASEWIDTH      8
+#define MID_GRID_SNAPTOCHARS    9
+#define MID_GRID_SQUARED_MODE    10
 
 //SwEnvItem
 #define MID_ENV_ADDR_TEXT       1
--- sw/inc/tgrditem.hxx.orig	2006-12-02 01:57:33.000000000 +0800
+++ sw/inc/tgrditem.hxx	2007-02-10 14:39:52.000000000 +0800
@@ -64,6 +64,11 @@ class SW_DLLPUBLIC SwTextGridItem : publ
 	BOOL bPrintGrid;
 	BOOL bDisplayGrid;
 
+	//for textgrid enhancement
+    sal_uInt16 nBaseWidth;
+    BOOL bSnapToChars;
+    BOOL bSquaredMode;
+
 public:
 	SwTextGridItem();
 	virtual ~SwTextGridItem();
@@ -107,6 +112,18 @@ public:
     BOOL IsDisplayGrid() const { return bDisplayGrid; }
     BOOL GetDisplayGrid() const { return bDisplayGrid; }
     void SetDisplayGrid( BOOL bNew ) { bDisplayGrid = bNew; }
+    
+    //for textgrid enhancement
+    sal_uInt16 GetBaseWidth() const { return bSquaredMode? nBaseHeight : nBaseWidth;}
+    void SetBaseWidth( sal_uInt16 nNew ) { nBaseWidth = nNew; }
+    
+    BOOL IsSnapToChars() const { return bSnapToChars; }
+    BOOL GetSnapToChars() const { return bSnapToChars; }
+    void SetSnapToChars( BOOL bNew ) { bSnapToChars = bNew; }
+    
+    BOOL IsSquaredMode() const { return bSquaredMode; }
+    BOOL GetSquaredMode() const { return bSquaredMode; }
+    void SetSquaredMode( BOOL bNew ) { bSquaredMode = bNew; }
 };
 
 inline const SwTextGridItem &SwAttrSet::GetTextGrid(BOOL bInP) const
--- sw/source/core/layout/atrfrm.cxx.orig	2006-12-02 01:57:36.000000000 +0800
+++ sw/source/core/layout/atrfrm.cxx	2007-02-10 14:46:20.000000000 +0800
@@ -274,6 +274,10 @@
 #endif
 // <--
 
+#ifndef _SVTOOLS_CJKOPTIONS_HXX
+#include <svtools/cjkoptions.hxx>
+#endif
+
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::text;
 using namespace ::com::sun::star::uno;
@@ -2381,10 +2385,16 @@ BOOL SwFmtLineNumber::PutValue( const un
  *************************************************************************/
 
 SwTextGridItem::SwTextGridItem()
-    : SfxPoolItem( RES_TEXTGRID ), aColor( COL_LIGHTGRAY ), nLines( 20 ),
-      nBaseHeight( 400 ), nRubyHeight( 200 ), eGridType( GRID_NONE ),
-      bRubyTextBelow( 0 ), bPrintGrid( 1 ), bDisplayGrid( 1 )
-{
+    : SfxPoolItem( RES_TEXTGRID ), aColor( COL_LIGHTGRAY ), nLines( 44 ),
+      nBaseHeight( 312 ), nRubyHeight( 0 ), eGridType( GRID_NONE ),
+      bRubyTextBelow( 0 ), bPrintGrid( 1 ), bDisplayGrid( 1 ),
+      nBaseWidth(210), bSnapToChars( 1 ), bSquaredMode(0)
+{
+     if (SvtCJKOptions().IsAnyEnabled())
+     {
+        bDisplayGrid = 0;
+        eGridType = GRID_LINES_ONLY;
+     }
 }
 
 SwTextGridItem::~SwTextGridItem()
@@ -2401,7 +2411,10 @@ int SwTextGridItem::operator==( const Sf
            bRubyTextBelow == ((SwTextGridItem&)rAttr).GetRubyTextBelow() &&
            bDisplayGrid == ((SwTextGridItem&)rAttr).GetDisplayGrid() &&
            bPrintGrid == ((SwTextGridItem&)rAttr).GetPrintGrid() &&
-           aColor == ((SwTextGridItem&)rAttr).GetColor();
+           aColor == ((SwTextGridItem&)rAttr).GetColor()    &&
+           nBaseWidth == ((SwTextGridItem&)rAttr).GetBaseWidth() &&
+           bSnapToChars == ((SwTextGridItem&)rAttr).GetSnapToChars() &&
+           bSquaredMode == ((SwTextGridItem&)rAttr).GetSquaredMode();
 }
 
 SfxPoolItem* SwTextGridItem::Clone( SfxItemPool* pPool ) const
@@ -2419,6 +2432,9 @@ SwTextGridItem& SwTextGridItem::operator
     bRubyTextBelow = rCpy.GetRubyTextBelow();
     bPrintGrid = rCpy.GetPrintGrid();
     bDisplayGrid = rCpy.GetDisplayGrid();
+    nBaseWidth = rCpy.GetBaseWidth();
+    bSnapToChars = rCpy.GetSnapToChars();
+    bSquaredMode = rCpy.GetSquaredMode();
 
 	return *this;
 }
@@ -2450,6 +2466,11 @@ BOOL SwTextGridItem::QueryValue( com::su
                         "This value needs TWIPS-MM100 conversion" );
             rVal <<= (sal_Int32) TWIP_TO_MM100(nBaseHeight);
             break;
+        case MID_GRID_BASEWIDTH:
+            DBG_ASSERT( (nMemberId & CONVERT_TWIPS) != 0,
+                        "This value needs TWIPS-MM100 conversion" );
+            rVal <<= (sal_Int32) TWIP_TO_MM100(nBaseWidth);
+            break;
         case MID_GRID_RUBYHEIGHT:
             DBG_ASSERT( (nMemberId & CONVERT_TWIPS) != 0,
                         "This value needs TWIPS-MM100 conversion" );
@@ -2473,6 +2494,12 @@ BOOL SwTextGridItem::QueryValue( com::su
                     break;
             }
             break;
+        case MID_GRID_SNAPTOCHARS:
+            rVal.setValue( &bSnapToChars, ::getBooleanCppuType() );
+            break;
+        case MID_GRID_SQUARED_MODE:
+            rVal.setValue( &bSquaredMode, ::getBooleanCppuType() );
+            break;
         default:
             DBG_ERROR("Unknown SwTextGridItem member");
             bRet = FALSE;
@@ -2516,6 +2543,7 @@ BOOL SwTextGridItem::PutValue( const com
             SetDisplayGrid( *(sal_Bool*)rVal.getValue() );
             break;
         case MID_GRID_BASEHEIGHT:
+        case MID_GRID_BASEWIDTH:
         case MID_GRID_RUBYHEIGHT:
         {
             DBG_ASSERT( (nMemberId & CONVERT_TWIPS) != 0,
@@ -2526,6 +2554,8 @@ BOOL SwTextGridItem::PutValue( const com
             if( bRet && (nTmp >= 0) && ( nTmp <= USHRT_MAX) )
                 if( (nMemberId & ~CONVERT_TWIPS) == MID_GRID_BASEHEIGHT )
                     SetBaseHeight( (USHORT)nTmp );
+                else if( (nMemberId & ~CONVERT_TWIPS) == MID_GRID_BASEWIDTH )
+                    SetBaseWidth( (USHORT)nTmp );
                 else
                     SetRubyHeight( (USHORT)nTmp );
             else
@@ -2554,6 +2584,12 @@ BOOL SwTextGridItem::PutValue( const com
                 }
             }
             break;
+        case MID_GRID_SNAPTOCHARS:
+            SetSnapToChars( *(sal_Bool*)rVal.getValue() );
+            break;
+        case MID_GRID_SQUARED_MODE:
+            SetSquaredMode( *(sal_Bool*)rVal.getValue() );
+            break;
         default:
             DBG_ERROR("Unknown SwTextGridItem member");
             bRet = FALSE;
@@ -2653,7 +2689,7 @@ SwRect SwFrmFmt::FindLayoutRect( const s
 			if( pFrm && pFrm->GetRegisteredIn() != this )
 			{
 				// die Section hat keinen eigenen ::com::sun::star::frame::Frame, also falls
-				// jemand die tatsaechliche Groeáe braucht, so muss das
+				// jemand die tatsaechliche Groeï¿½ braucht, so muss das
 				// noch implementier werden, in dem sich vom Ende noch
 				// der entsprechende ::com::sun::star::frame::Frame besorgt wird.
 				// PROBLEM: was passiert bei SectionFrames, die auf unter-
