Index: config_office/configure.in
===================================================================
RCS file: /shared/data/helm/cvs/repository/tools/config_office/configure.in,v
retrieving revision 1.98
retrieving revision 1.88.6.6
diff -u -r1.98 -r1.88.6.6
--- config_office/configure.in	21 Feb 2005 15:16:34 -0000	1.98
+++ config_office/configure.in	25 Feb 2005 01:37:47 -0000	1.88.6.6
@@ -167,6 +167,9 @@
 AC_ARG_WITH(system-freetype,
 [  --with-system-freetype  Use freetype already on system
 ],,)
+AC_ARG_WITH(system-libwpd,
+[  --with-system-libwpd   Use libwpd already on system
+],,)
 AC_ARG_WITH(system-libxml,
 [  --with-system-libxml    Use libxml already on system
 ],,)
@@ -2038,6 +2041,24 @@
 AC_SUBST(SYSTEM_FREETYPE)
 AC_SUBST(FREETYPE_CFLAGS)
 AC_SUBST(FREETYPE_LIBS)
+
+dnl ===================================================================
+dnl Check for system libwpd
+dnl ===================================================================
+AC_MSG_CHECKING([which libwpd to use])
+if test -n "$with_system_libwpd" -o -n "$with_system_libs" && \
+        test "$with_system_libwpd" != "no"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_LIBWPD=YES
+    PKG_CHECK_MODULES( LIBWPD, libwpd-0.8 )
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_LIBWPD=NO
+    BUILD_TYPE="$BUILD_TYPE LIBWPD"
+fi
+AC_SUBST(SYSTEM_LIBWPD)
+AC_SUBST(LIBWPD_CFLAGS)
+AC_SUBST(LIBWPD_LIBS)
 
 dnl ===================================================================
 dnl Check for system libxml
Index: config_office/set_soenv.in
===================================================================
RCS file: /shared/data/helm/cvs/repository/tools/config_office/set_soenv.in,v
retrieving revision 1.46
retrieving revision 1.39.10.3
diff -u -r1.46 -r1.39.10.3
--- config_office/set_soenv.in	21 Feb 2005 15:16:50 -0000	1.46
+++ config_office/set_soenv.in	25 Feb 2005 01:38:47 -0000	1.39.10.3
@@ -1763,6 +1763,9 @@
 ToFile( "SYSTEM_FREETYPE",   "@SYSTEM_FREETYPE@",  "e" );
 ToFile( "FREETYPE_CFLAGS",   "@FREETYPE_CFLAGS@",  "e" );
 ToFile( "FREETYPE_LIBS",     "@FREETYPE_LIBS@",    "e" );
+ToFile( "SYSTEM_LIBWPD",     "@SYSTEM_LIBWPD@",    "e" );
+ToFile( "LIBWPD_CFLAGS",     "@LIBWPD_CFLAGS@",    "e" );
+ToFile( "LIBWPD_LIBS",       "@LIBWPD_LIBS@",      "e" );
 ToFile( "SYSTEM_LIBXML",     "@SYSTEM_LIBXML@",    "e" );
 ToFile( "LIBXML_CFLAGS",     "@LIBXML_CFLAGS@",    "e" );
 ToFile( "LIBXML_LIBS",       "@LIBXML_LIBS@",      "e" );
Index: filter/source/config/fragments/types/writer_WordPerfect_Document.xcu
===================================================================
RCS file: /shared/data/helm/cvs/repository/framework/filter/source/config/fragments/types/writer_WordPerfect_Document.xcu,v
retrieving revision 1.2
retrieving revision 1.2.80.1
diff -u -r1.2 -r1.2.80.1
--- filter/source/config/fragments/types/writer_WordPerfect_Document.xcu	28 Oct 2004 13:41:31 -0000	1.2
+++ filter/source/config/fragments/types/writer_WordPerfect_Document.xcu	2 Feb 2005 20:44:48 -0000	1.2.80.1
@@ -1,5 +1,5 @@
 	<node oor:name="writer_WordPerfect_Document" oor:op="replace" oor:finalized="true" oor:mandatory="true">
-		<prop oor:name="DetectService"><value>com.sun.star.text.FormatDetector</value></prop>
+		<prop oor:name="DetectService"><value>com.sun.star.comp.Writer.WordPerfectImportFilter</value></prop>
 		<prop oor:name="URLPattern"/>
 		<prop oor:name="Extensions"><value>wpd</value></prop>
 		<prop oor:name="MediaType"/>
Index: libwpd/libwpd-snap-20040823.diff
===================================================================
RCS file: libwpd/libwpd-snap-20040823.diff
diff -N libwpd/libwpd-snap-20040823.diff
--- libwpd/libwpd-snap-20040823.diff	19 Oct 2004 13:45:01 -0000	1.3
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,122 +0,0 @@
-*** misc/libwpd-snap-20040823/src/lib/WP3MiscellaneousGroup.cpp	Thu Aug 12 16:32:50 2004
---- misc/build/libwpd-snap-20040823/src/lib/WP3MiscellaneousGroup.cpp	Tue Oct 19 14:49:36 2004
-***************
-*** 24,29 ****
---- 24,30 ----
-   * Corel Corporation or Corel Corporation Limited."
-   */
-  
-+ #include <math.h>
-  #include "WP3MiscellaneousGroup.h"
-  #include "WP3FileStructure.h"
-  #include "WP3LLListener.h"
-*** misc/libwpd-snap-20040823/src/lib/WP3PageFormatGroup.cpp	Thu Aug 12 16:32:50 2004
---- misc/build/libwpd-snap-20040823/src/lib/WP3PageFormatGroup.cpp	Tue Oct 19 14:49:36 2004
-***************
-*** 24,29 ****
---- 24,30 ----
-   * Corel Corporation or Corel Corporation Limited."
-   */
-  
-+ #include <math.h>
-  #include "WP3PageFormatGroup.h"
-  #include "WP3FileStructure.h"
-  #include "WP3LLListener.h"
-*** misc/libwpd-snap-20040823/src/lib/WP6PrefixData.cpp	Sun Aug  1 22:10:52 2004
---- misc/build/libwpd-snap-20040823/src/lib/WP6PrefixData.cpp	Tue Oct 19 14:49:36 2004
-***************
-*** 49,55 ****
-  			WP6PrefixDataPacket *prefixDataPacket = WP6PrefixDataPacket::constructPrefixDataPacket(input, prefixIndiceArray[(i-1)]);
-  			if (prefixDataPacket) {
-  				m_prefixDataPacketHash[i] = prefixDataPacket;
-! 				m_prefixDataPacketTypeHash.insert(pair<int, WP6PrefixDataPacket *>(prefixIndiceArray[i-1]->getType(), prefixDataPacket));
-  				if (dynamic_cast<WP6DefaultInitialFontPacket *>(prefixDataPacket))
-  					m_defaultInitialFontPID = i;
-  			}
---- 49,56 ----
-  			WP6PrefixDataPacket *prefixDataPacket = WP6PrefixDataPacket::constructPrefixDataPacket(input, prefixIndiceArray[(i-1)]);
-  			if (prefixDataPacket) {
-  				m_prefixDataPacketHash[i] = prefixDataPacket;
-! //				m_prefixDataPacketTypeHash.insert(pair<int, WP6PrefixDataPacket *>(prefixIndiceArray[i-1]->getType(), prefixDataPacket));
-!                 m_prefixDataPacketTypeHash.insert(::std::map<int, WP6PrefixDataPacket *>::value_type(prefixIndiceArray[i-1]->getType(), prefixDataPacket));
-  				if (dynamic_cast<WP6DefaultInitialFontPacket *>(prefixDataPacket))
-  					m_defaultInitialFontPID = i;
-  			}
-*** misc/libwpd-snap-20040823/src/lib/WPXHLListenerImpl.h	Thu Aug 19 11:57:34 2004
---- misc/build/libwpd-snap-20040823/src/lib/WPXHLListenerImpl.h	Tue Oct 19 14:49:36 2004
-***************
-*** 144,150 ****
-  	/**
-  	Called when a new table row is opened
-  	*/
-!  	virtual void openTableRow(bool isHeaderRow) = 0;
-  	/**
-  	Called when the current table row is closed
-  	*/
---- 144,150 ----
-  	/**
-  	Called when a new table row is opened
-  	*/
-!  	virtual void openTableRow(const bool isHeaderRow) = 0;
-  	/**
-  	Called when the current table row is closed
-  	*/
-*** misc/libwpd-snap-20040823/src/lib/WPXPageSpan.cpp	Thu Jul  8 01:08:08 2004
---- misc/build/libwpd-snap-20040823/src/lib/WPXPageSpan.cpp	Tue Oct 19 14:49:36 2004
-***************
-*** 23,31 ****
-   * Corel Corporation or Corel Corporation Limited."
-   */
-  
-  #include "WPXPageSpan.h"
-  #include "libwpd_internal.h"
-- #include <math.h>
-  
-  const float WP6_DEFAULT_PAGE_MARGIN_TOP = 1.0f;
-  const float WP6_DEFAULT_PAGE_MARGIN_BOTTOM = 1.0f;
---- 23,31 ----
-   * Corel Corporation or Corel Corporation Limited."
-   */
-  
-+ #include <math.h>
-  #include "WPXPageSpan.h"
-  #include "libwpd_internal.h"
-  
-  const float WP6_DEFAULT_PAGE_MARGIN_TOP = 1.0f;
-  const float WP6_DEFAULT_PAGE_MARGIN_BOTTOM = 1.0f;
-*** misc/libwpd-snap-20040823/src/lib/libwpd_support.cpp	Mon Aug 16 15:57:27 2004
---- misc/build/libwpd-snap-20040823/src/lib/libwpd_support.cpp	Tue Oct 19 14:49:37 2004
-***************
-*** 27,32 ****
---- 27,33 ----
-  #include "libwpd.h"
-  #include <stdarg.h>
-  #include <string.h>
-+ #include <stdio.h>
-  
-  const uint16_t asciiMap[] =
-  {
-*** misc/libwpd-snap-20040823/src/lib/libwpd_support.h	Mon Aug 16 15:57:27 2004
---- misc/build/libwpd-snap-20040823/src/lib/libwpd_support.h	Tue Oct 19 14:49:54 2004
-***************
-*** 28,36 ****
-  #include <string>
-  using namespace std;
-  
-! #ifndef _MSC_VER
-  #include <stdint.h>
-! #else
-  typedef signed char int8_t;
-  typedef unsigned char uint8_t;
-  typedef signed short int16_t;
---- 28,37 ----
-  #include <string>
-  using namespace std;
-  
-! #ifdef GCC
-  #include <stdint.h>
-! #endif
-! #ifdef _MSC_VER
-  typedef signed char int8_t;
-  typedef unsigned char uint8_t;
-  typedef signed short int16_t;
Index: libwpd/makefile.mk
===================================================================
RCS file: /shared/data/helm/cvs/repository/external/libwpd/makefile.mk,v
retrieving revision 1.4
retrieving revision 1.4.2.1
diff -u -r1.4 -r1.4.2.1
--- libwpd/makefile.mk	7 Oct 2004 14:49:05 -0000	1.4
+++ libwpd/makefile.mk	2 Feb 2005 20:44:47 -0000	1.4.2.1
@@ -71,8 +71,13 @@
 
 # --- Files --------------------------------------------------------
 
-TARFILE_NAME=libwpd-snap-20040823
-PATCH_FILE_NAME=$(TARFILE_NAME).diff
+.IF "$(SYSTEM_LIBWPD)" == "YES"
+@all:
+	@echo "Using system libwpd..."
+.ENDIF
+
+TARFILE_NAME=libwpd-0.8.0
+#PATCH_FILE_NAME=$(TARFILE_NAME).diff
 BUILD_ACTION=dmake
 BUILD_DIR=src/lib
 
Index: libwpd/download/README
===================================================================
RCS file: libwpd/download/README
diff -N libwpd/download/README
--- libwpd/download/README	5 Aug 2004 17:40:03 -0000	1.1
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1 +0,0 @@
-Insert a recent libwpd-0.8.0.tar.gz file here when we have a release.
Index: libwpd/prj/d.lst
===================================================================
RCS file: /shared/data/helm/cvs/repository/external/libwpd/prj/d.lst,v
retrieving revision 1.4
retrieving revision 1.4.2.2
diff -u -r1.4 -r1.4.2.2
--- libwpd/prj/d.lst	11 Oct 2004 14:43:38 -0000	1.4
+++ libwpd/prj/d.lst	7 Feb 2005 18:33:51 -0000	1.4.2.2
@@ -1,4 +1,12 @@
 mkdir: %_DEST%\inc%_EXT%\libwpd
-..\%__SRC%\misc\build\libwpd-snap-20040823\src\lib\*.h %_DEST%\inc%_EXT%\libwpd\*.h
+..\%__SRC%\misc\build\libwpd*\src\lib\libwpd.h %_DEST%\inc%_EXT%\libwpd\
+..\%__SRC%\misc\build\libwpd*\src\lib\libwpd_types.h %_DEST%\inc%_EXT%\libwpd\
+..\%__SRC%\misc\build\libwpd*\src\lib\WPXStream.h %_DEST%\inc%_EXT%\libwpd\
+..\%__SRC%\misc\build\libwpd*\src\lib\WPXProperty.h %_DEST%\inc%_EXT%\libwpd\
+..\%__SRC%\misc\build\libwpd*\src\lib\WPXPropertyList.h %_DEST%\inc%_EXT%\libwpd\
+..\%__SRC%\misc\build\libwpd*\src\lib\WPXString.h %_DEST%\inc%_EXT%\libwpd\
+..\%__SRC%\misc\build\libwpd*\src\lib\WPXPropertyListVector.h %_DEST%\inc%_EXT%\libwpd\
+..\%__SRC%\misc\build\libwpd*\src\lib\WPDocument.h %_DEST%\inc%_EXT%\libwpd\
+..\%__SRC%\misc\build\libwpd*\src\lib\WPXHLListenerImpl.h %_DEST%\inc%_EXT%\libwpd\
 ..\%__SRC%\lib\*.a %_DEST%\lib%_EXT%\*.a
 ..\%__SRC%\slb\*.lib %_DEST%\lib%_EXT%\*.lib
Index: scp2/source/ooo/file_library_ooo.scp
===================================================================
RCS file: /shared/data/helm/cvs/repository/installation/scp2/source/ooo/file_library_ooo.scp,v
retrieving revision 1.84
retrieving revision 1.83.4.2
diff -u -r1.84 -r1.83.4.2
--- scp2/source/ooo/file_library_ooo.scp	21 Feb 2005 15:25:19 -0000	1.84
+++ scp2/source/ooo/file_library_ooo.scp	25 Feb 2005 03:58:32 -0000	1.83.4.2
@@ -1119,7 +1119,7 @@
 
 #endif
 
-STD_UNO_LIB_FILE(GID_FILE_LIB_WPD,wpft)
+STD_UNO_LIB_FILE(gid_File_Lib_Wpft,wpft)
 
 #if !defined(MACOSX) && !defined(WITHOUT_MOZILLA)
 
Index: scp2/source/writer/module_writer.scp
===================================================================
RCS file: /shared/data/helm/cvs/repository/installation/scp2/source/writer/module_writer.scp,v
retrieving revision 1.11
retrieving revision 1.11.36.1
diff -u -r1.11 -r1.11.36.1
--- scp2/source/writer/module_writer.scp	21 Jan 2005 12:15:35 -0000	1.11
+++ scp2/source/writer/module_writer.scp	16 Feb 2005 08:45:35 -0000	1.11.36.1
@@ -77,6 +77,7 @@
     gid_File_Lib_Hwpreader, gid_File_Exe_Swriter, gid_File_Xdg_Writer,
     gid_File_Lib_Swd,
     gid_File_Lib_Swui,
+    gid_File_Lib_Wpft,
     gid_File_Share_Config_Sofficecfg_Writer_Menubar_Xml,
     gid_File_Share_Config_Sofficecfg_Writerweb_Menubar_Xml,
     gid_File_Share_Config_Sofficecfg_Writerglobal_Menubar_Xml,
Index: sw/inc/iodetect.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/sw/inc/iodetect.cxx,v
retrieving revision 1.20
retrieving revision 1.18.48.3
diff -u -r1.20 -r1.18.48.3
--- sw/inc/iodetect.cxx	21 Feb 2005 16:41:23 -0000	1.20
+++ sw/inc/iodetect.cxx	25 Feb 2005 01:44:21 -0000	1.18.48.3
@@ -199,7 +199,6 @@
 const sal_Char __FAR_DATA FILTER_XMLV[] 	= "CXMLV";
 const sal_Char __FAR_DATA FILTER_XMLVW[] 	= "CXMLVWEB";
 const sal_Char __FAR_DATA sSwDos[] 		= "SW6";
-const sal_Char __FAR_DATA sWPD[] 		= "WPD";
 
 #ifdef _DLL_
 const sal_Char* GetFILTER_XML()
@@ -237,8 +236,7 @@
 /* 16*/ SwIoEntry(sWW1,  			STRING_LEN,	0,				  	TRUE),
 /* 17*/ SwIoEntry(sWW5,				STRING_LEN,	0, 					FALSE),
 /* 18*/ SwIoEntry(sSwg1,            4,          0,  				FALSE),
-/* 19*/ SwIoEntry(sWPD,         	4,          0,  				TRUE),
-/* 20*/ SwIoEntry(FILTER_XML,       4,          &::GetXMLWriter,    TRUE)
+/* 19*/ SwIoEntry(FILTER_XML,       4,          &::GetXMLWriter,    TRUE)
 /* opt*/ DEB_SH_SwIoEntry(sW4W_Int, STRING_LEN, 0,                  TRUE),
 /*last*/ SwIoEntry(FILTER_TEXT, 	4,			&::GetASCWriter, 	TRUE)
 };
@@ -324,11 +322,6 @@
 		bRet = 0 == strncmp( sSw6_FormatStt, pHeader, 12 ) &&
 		   	   0 == strncmp( sSw6_FormatEnd, pHeader + 12 + 1, 4 );
 	}
-	else if( sWPD == pName )
-	{
-		sal_Char __READONLY_DATA aWPD_Magic[] = "WPC";
-		bRet = 0 == strncmp( aWPD_Magic, pHeader + 1, 3);
-	}
     else if (FILTER_TEXT == pName)
         bRet = SwIoSystem::IsDetectableText(pHeader, nLen_);
     else if (FILTER_W4W == pName)
@@ -358,9 +351,6 @@
 	if( rUserData.EqualsAscii(sExcel) || rUserData.EqualsAscii(sCExcel) )
 		return String::CreateFromAscii(
 				RTL_CONSTASCII_STRINGPARAM( "Book" ));
-	if( rUserData.EqualsAscii(sWPD) )
- 		return String::CreateFromAscii(
-				RTL_CONSTASCII_STRINGPARAM( "PerfectOffice_MAIN" ));
 	return String::CreateFromAscii( RTL_CONSTASCII_STRINGPARAM( "" ));
 }
 const SfxFilter* SwIoSystem::GetFilterOfFormat(const String& rFmtNm,
Index: sw/source/filter/basflt/fltini.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/sw/source/filter/basflt/fltini.cxx,v
retrieving revision 1.39
retrieving revision 1.39.18.2
diff -u -r1.39 -r1.39.18.2
--- sw/source/filter/basflt/fltini.cxx	27 Jan 2005 11:29:57 -0000	1.39
+++ sw/source/filter/basflt/fltini.cxx	7 Feb 2005 18:33:51 -0000	1.39.18.2
@@ -233,8 +233,7 @@
 	_SetFltPtr( nCnt, new WW1Reader, sWW1 );
 	_SetFltPtr( nCnt, pWW8Rd, sWW5 );
 	_SetFltPtr( nCnt, ReadSwg, sSwg1 );
-	_SetFltPtr( nCnt, (ReadXML = new XMLReader), sWPD );
-	_SetFltPtr( nCnt, ReadXML, FILTER_XML );
+	_SetFltPtr( nCnt, (ReadXML = new XMLReader), FILTER_XML );
 
 #ifdef NEW_WW97_EXPORT
     aReaderWriter[ 8-3 ].fnGetWriter =  &::GetWW8Writer;
Index: sysui/desktop/menus/writer.desktop
===================================================================
RCS file: /shared/data/helm/cvs/repository/gsl/sysui/desktop/menus/writer.desktop,v
retrieving revision 1.6
retrieving revision 1.6.10.2
diff -u -r1.6 -r1.6.10.2
--- sysui/desktop/menus/writer.desktop	21 Jan 2005 11:15:38 -0000	1.6
+++ sysui/desktop/menus/writer.desktop	16 Feb 2005 10:15:27 -0000	1.6.10.2
@@ -7,6 +7,6 @@
 InitialPreference=2
 Categories=Application;Office;X-Red-Hat-Base;
 Exec=openoffice -writer %U
-MimeType=application/vnd.oasis.opendocument.text;application/vnd.oasis.opendocument.text-template;application/vnd.oasis.opendocument.text-web;application/vnd.oasis.opendocument.text-master;application/vnd.sun.xml.writer;application/vnd.sun.xml.writer.template;application/vnd.sun.xml.writer.global;application/vnd.stardivision.writer;application/msword;application/vnd.ms-word;application/x-doc;text/rtf
+MimeType=application/vnd.oasis.opendocument.text;application/vnd.oasis.opendocument.text-template;application/vnd.oasis.opendocument.text-web;application/vnd.oasis.opendocument.text-master;application/vnd.sun.xml.writer;application/vnd.sun.xml.writer.template;application/vnd.sun.xml.writer.global;application/vnd.stardivision.writer;application/msword;application/vnd.ms-word;application/x-doc;text/rtf;application/vnd.wordperfect
 Name=%PRODUCTNAME Writer
 Comment=Create and edit text and graphics in letters, reports, documents and Web pages by using Writer.
Index: sysui/desktop/mimetypes/openoffice.applications
===================================================================
RCS file: /shared/data/helm/cvs/repository/gsl/sysui/desktop/mimetypes/openoffice.applications,v
retrieving revision 1.5
retrieving revision 1.5.10.2
diff -u -r1.5 -r1.5.10.2
--- sysui/desktop/mimetypes/openoffice.applications	21 Jan 2005 11:18:09 -0000	1.5
+++ sysui/desktop/mimetypes/openoffice.applications	16 Feb 2005 10:15:27 -0000	1.5.10.2
@@ -4,4 +4,4 @@
 	can_open_multiple_files=true
 	expects_uris=false
 	requires_terminal=false
-	mime_types=application/vnd.oasis.opendocument.text,application/vnd.oasis.opendocument.text-template,application/vnd.oasis.opendocument.text-web,application/vnd.oasis.opendocument.text-master,application/vnd.oasis.opendocument.graphics,application/vnd.oasis.opendocument.graphics-template,application/vnd.oasis.opendocument.presentation,application/vnd.oasis.opendocument.presentation-template,application/vnd.oasis.opendocument.spreadsheet,application/vnd.oasis.opendocument.spreadsheet-template,application/vnd.oasis.opendocument.formula,application/vnd.oasis.opendocument.database,application/vnd.ms-excel,application/rtf,application/msword,application/vnd.ms-powerpoint,application/vnd.stardivision.calc,application/vnd.stardivision.chart,application/vnd.stardivision.draw,application/vnd.stardivision.impress,application/vnd.stardivision.mail,application/vnd.stardivision.math,application/vnd.stardivision.writer,application/vnd.sun.xml.calc,application/vnd.sun.xml.calc.template,application/vnd.sun.xml.draw,application/vnd.sun.xml.draw.template,application/vnd.sun.xml.impress,application/vnd.sun.xml.impress.template,application/vnd.sun.xml.math,application/vnd.sun.xml.writer,application/vnd.sun.xml.writer.global,application/vnd.sun.xml.writer.template,image/x-emf,image/x-pcx,image/x-photo-cd,image/x-pict
+	mime_types=application/vnd.oasis.opendocument.text,application/vnd.oasis.opendocument.text-template,application/vnd.oasis.opendocument.text-web,application/vnd.oasis.opendocument.text-master,application/vnd.oasis.opendocument.graphics,application/vnd.oasis.opendocument.graphics-template,application/vnd.oasis.opendocument.presentation,application/vnd.oasis.opendocument.presentation-template,application/vnd.oasis.opendocument.spreadsheet,application/vnd.oasis.opendocument.spreadsheet-template,application/vnd.oasis.opendocument.formula,application/vnd.oasis.opendocument.database,application/vnd.ms-excel,application/rtf,application/msword,application/vnd.ms-powerpoint,application/vnd.stardivision.calc,application/vnd.stardivision.chart,application/vnd.stardivision.draw,application/vnd.stardivision.impress,application/vnd.stardivision.mail,application/vnd.stardivision.math,application/vnd.stardivision.writer,application/vnd.sun.xml.calc,application/vnd.sun.xml.calc.template,application/vnd.sun.xml.draw,application/vnd.sun.xml.draw.template,application/vnd.sun.xml.impress,application/vnd.sun.xml.impress.template,application/vnd.sun.xml.math,application/vnd.sun.xml.writer,application/vnd.sun.xml.writer.global,application/vnd.sun.xml.writer.template,image/x-emf,image/x-pcx,image/x-photo-cd,image/x-pict;application/vnd.wordperfect
Index: sysui/desktop/redhat/redhat-menus.spec
===================================================================
RCS file: /shared/data/helm/cvs/repository/gsl/sysui/desktop/redhat/redhat-menus.spec,v
retrieving revision 1.10
retrieving revision 1.10.4.3
diff -u -r1.10 -r1.10.4.3
--- sysui/desktop/redhat/redhat-menus.spec	7 Feb 2005 15:31:40 -0000	1.10
+++ sysui/desktop/redhat/redhat-menus.spec	16 Feb 2005 10:18:39 -0000	1.10.4.3
@@ -138,6 +138,11 @@
 application/vnd.stardivision.draw; %PREFIX -view %s
 application/x-stardraw; %PREFIX -view %s
 application/vnd.oasis.opendocument.database; %PREFIX -view %s
+application/vnd.writerperfect; %PREFIX -view %s
+application/wordperfect5.1; %PREFIX -view %s
+application/x-wordperfect; %PREFIX -view %s
+application/wordperfect; %PREFIX -view %s
+application/wpwin; %PREFIX -view %s
 END
 
   # and replace the original file
Index: sysui/desktop/solaris/mailcap
===================================================================
RCS file: /shared/data/helm/cvs/repository/gsl/sysui/desktop/solaris/mailcap,v
retrieving revision 1.2
retrieving revision 1.2.10.3
diff -u -r1.2 -r1.2.10.3
--- sysui/desktop/solaris/mailcap	21 Jan 2005 11:21:04 -0000	1.2
+++ sysui/desktop/solaris/mailcap	16 Feb 2005 10:18:40 -0000	1.2.10.3
@@ -62,6 +62,11 @@
 application/vnd.stardivision.draw; %PREFIX -view %s
 application/x-stardraw; %PREFIX -view %s
 application/vnd.oasis.opendocument.database; %PREFIX -view %s
+application/vnd.writerperfect; %PREFIX -view %s
+application/wordperfect5.1; %PREFIX -view %s
+application/x-wordperfect; %PREFIX -view %s
+application/wordperfect; %PREFIX -view %s
+application/wpwin; %PREFIX -view %s
 END
 else
 # backing all entries pointing to our binary
Index: sysui/desktop/suse/suse-menus.spec
===================================================================
RCS file: /shared/data/helm/cvs/repository/gsl/sysui/desktop/suse/suse-menus.spec,v
retrieving revision 1.11
retrieving revision 1.11.4.3
diff -u -r1.11 -r1.11.4.3
--- sysui/desktop/suse/suse-menus.spec	7 Feb 2005 15:32:12 -0000	1.11
+++ sysui/desktop/suse/suse-menus.spec	16 Feb 2005 10:18:40 -0000	1.11.4.3
@@ -137,6 +137,11 @@
 application/vnd.stardivision.draw; %PREFIX -view %s
 application/x-stardraw; %PREFIX -view %s
 application/vnd.oasis.opendocument.database; %PREFIX -view %s
+application/vnd.wordperfect; %PREFIX -view %s
+application/wordperfect5.1; %PREFIX -view %s
+application/x-wordperfect; %PREFIX -view %s
+application/wordperfect; %PREFIX -view %s
+application/wpwin; %PREFIX -view %s
 END
 
   # and replace the original file
Index: writerperfect/prj/build.lst
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/prj/build.lst,v
retrieving revision 1.4
retrieving revision 1.4.2.1
diff -u -r1.4 -r1.4.2.1
--- writerperfect/prj/build.lst	19 Oct 2004 14:17:15 -0000	1.4
+++ writerperfect/prj/build.lst	18 Feb 2005 14:23:33 -0000	1.4.2.1
@@ -1,4 +1,4 @@
-wp	writerperfect : sfx2 libwpd sot svx comphelper NULL
+wp	writerperfect : sfx2 LIBWPD:libwpd sot svx comphelper NULL
 wp	writerperfect			usr1	-	all	wp_mkout NULL
 wp	writerperfect\source\stream	nmake	-	all	wp_stream NULL
 wp	writerperfect\source\filter	nmake	-	all	wp_filter NULL
Index: writerperfect/source/filter/DocumentElement.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/DocumentElement.cxx,v
retrieving revision 1.1
retrieving revision 1.1.2.2
diff -u -r1.1 -r1.1.2.2
--- writerperfect/source/filter/DocumentElement.cxx	5 Aug 2004 17:44:42 -0000	1.1
+++ writerperfect/source/filter/DocumentElement.cxx	10 Feb 2005 09:31:59 -0000	1.1.2.2
@@ -26,34 +26,20 @@
  */
 
 #include "DocumentElement.hxx"
+#include "DocumentHandler.hxx"
 #include "FilterInternal.hxx"
 #include <string.h>
 
-#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
-#include <com/sun/star/xml/sax/XAttributeList.hpp>
-#endif
-
-using rtl::OUString;
-using namespace ::rtl;
-
-using com::sun::star::xml::sax::XAttributeList;
-
-#define UCS_SPACE 0x0020
+#define ASCII_SPACE 0x0020
 
 void TagElement::print() const
 {
-	WRITER_DEBUG_MSG(("%s\n", msTagName.getUTF8()));
+	WRITER_DEBUG_MSG(("%s\n", msTagName.cstr()));
 }
 
-void TagOpenElement::write(Reference < XDocumentHandler > &xHandler) const
+void TagOpenElement::write(DocumentHandler &xHandler) const
 {
-	WRITER_DEBUG_MSG(("Writing startElement (%s)\n", getTagName().getUTF8()));
-	
-	SvXMLAttributeList * paAttrList = new SvXMLAttributeList(maAttrList);
-	Reference < XAttributeList > xAttrList ( paAttrList );
-
-	xHandler->startElement(OUString::createFromAscii(getTagName().getUTF8()), xAttrList);
-	WRITER_DEBUG_MSG(("Done\n"));
+	xHandler.startElement(getTagName().cstr(), maAttrList);
 }
 
 void TagOpenElement::print() const
@@ -61,62 +47,57 @@
 	TagElement::print(); 	
 }
 
-void TagOpenElement::addAttribute(const char *szAttributeName, const char *szAttributeValue)
+void TagOpenElement::addAttribute(const char *szAttributeName, const WPXString &sAttributeValue)
 {
-	maAttrList.AddAttribute(OUString::createFromAscii(szAttributeName), 
-				 OUString::createFromAscii(szAttributeValue));
+        maAttrList.insert(szAttributeName, sAttributeValue);
 }
 
-void TagCloseElement::write(Reference < XDocumentHandler > &xHandler) const
+void TagCloseElement::write(DocumentHandler &xHandler) const
 {
-	WRITER_DEBUG_MSG(("TagCloseElement: write (%s)\n", getTagName().getUTF8()));
+	WRITER_DEBUG_MSG(("TagCloseElement: write (%s)\n", getTagName().cstr()));
 
-	xHandler->endElement(OUString::createFromAscii(getTagName().getUTF8()));
+	xHandler.endElement(getTagName().cstr());
 }
 
-void CharDataElement::write(Reference < XDocumentHandler > &xHandler) const
+void CharDataElement::write(DocumentHandler &xHandler) const
 {
 	WRITER_DEBUG_MSG(("TextElement: write\n"));
-	xHandler->characters(OUString::createFromAscii(msData.getUTF8()) );
+	xHandler.characters(msData);
 }
 
-TextElement::TextElement(const UCSString & sTextBuf) :
-	msTextBuf(sTextBuf)
+TextElement::TextElement(const WPXString & sTextBuf) :
+	msTextBuf(sTextBuf, false)
 {
 }
 
 // write: writes a text run, appropriately converting spaces to <text:s>
 // elements
-// FIXME: this function is appalling because OUString isn't rich enough.
-// probably should allocate some resizable buffer of UCS2 instead
-void TextElement::write(Reference < XDocumentHandler > &xHandler) const
+void TextElement::write(DocumentHandler &xHandler) const
 {
-	WRITER_DEBUG_MSG(("TextElement: write\n"));
-	SvXMLAttributeList * pAttrList = new SvXMLAttributeList;
-	Reference < XAttributeList > xBlankAttrList ( pAttrList );
+	WPXPropertyList xBlankAttrList;
+        
+	WPXString sTemp;
 
-	OUString sTempUCS2;
 	int iNumConsecutiveSpaces = 0;
-	for (int i=0; i<msTextBuf.getLen(); i++) {
-		if (msTextBuf.getUCS4()[i] == UCS_SPACE)
+        WPXString::Iter i(msTextBuf);
+	for (i.rewind(); i.next();) 
+        {
+		if (*(i()) == ASCII_SPACE)
 			iNumConsecutiveSpaces++;
 		else
 			iNumConsecutiveSpaces = 0;
 
 		if (iNumConsecutiveSpaces > 1) {
-			if (sTempUCS2.getLength() > 0) {
-				xHandler->characters(sTempUCS2);
-				sTempUCS2 = OUString::createFromAscii("");
+			if (sTemp.len() > 0) {
+				xHandler.characters(sTemp);
+				sTemp.clear();
 			}
-			xHandler->startElement(OUString::createFromAscii("text:s"), xBlankAttrList);
-			xHandler->endElement(OUString::createFromAscii("text:s"));
+			xHandler.startElement("text:s", xBlankAttrList);
+			xHandler.endElement("text:s");
 		}
 		else {
-			const uint32_t * ucs4 = msTextBuf.getUCS4();
-			sal_Unicode su = static_cast<sal_Unicode>(msTextBuf.getUCS4()[i]); 
-			OUString aStringPart(&su,1);
-			sTempUCS2 += aStringPart;
+                        sTemp.append(i());
 		}
 	}
-	xHandler->characters(sTempUCS2);
+	xHandler.characters(sTemp);
 }
Index: writerperfect/source/filter/DocumentElement.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/DocumentElement.hxx,v
retrieving revision 1.2
retrieving revision 1.2.2.2
diff -u -r1.2 -r1.2.2.2
--- writerperfect/source/filter/DocumentElement.hxx	24 Aug 2004 08:31:51 -0000	1.2
+++ writerperfect/source/filter/DocumentElement.hxx	8 Feb 2005 18:55:20 -0000	1.2.2.2
@@ -28,27 +28,17 @@
 #ifndef _DOCUMENTELEMENT_H
 #define _DOCUMENTELEMENT_H
 #include <libwpd/libwpd.h>
-#include <libwpd/libwpd_support.h>
+#include <libwpd/WPXProperty.h>
+#include <libwpd/WPXString.h>
 #include <vector>
 
-using namespace std;
-
-#include "WordPerfectCollector.hxx"
-#include "TextRunStyle.hxx"
-#include "SectionStyle.hxx"
-#include "TableStyle.hxx"
-
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-
-#include <xmloff/attrlist.hxx>
+#include "DocumentHandler.hxx"
 
 class DocumentElement
 {
 public:	
 	virtual ~DocumentElement() {}
-	virtual void write(Reference < XDocumentHandler > &xHandler) const = 0;
+	virtual void write(DocumentHandler &xHandler) const = 0;
 	virtual void print() const {}
 };
 
@@ -56,10 +46,10 @@
 {
 public:
 	TagElement(const char *szTagName) : msTagName(szTagName) {}
-	const UTF8String & getTagName() const { return msTagName; }
+	const WPXString & getTagName() const { return msTagName; }
 	virtual void print() const;
 private:
-	UTF8String msTagName;
+	WPXString msTagName;
 };
 
 class TagOpenElement : public TagElement
@@ -67,37 +57,37 @@
 public:
 	TagOpenElement(const char *szTagName) : TagElement(szTagName) {}
 	~TagOpenElement() {}
-	void addAttribute(const char *szAttributeName, const char *szAttributeValue);
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
+	void addAttribute(const char *szAttributeName, const WPXString &sAttributeValue);
+	virtual void write(DocumentHandler &xHandler) const;
 	virtual void print () const;
 private:
-	SvXMLAttributeList maAttrList;
+	WPXPropertyList maAttrList;
 };
 
 class TagCloseElement : public TagElement
 {
 public:
 	TagCloseElement(const char *szTagName) : TagElement(szTagName) {}
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
+	virtual void write(DocumentHandler &xHandler) const;
 };
 
 class CharDataElement : public DocumentElement
 {
 public:
 	CharDataElement(const char *sData) : DocumentElement(), msData(sData) {}
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
+	virtual void write(DocumentHandler &xHandler) const;
 private:
-	UTF8String msData;
+	WPXString msData;
 };
 
 class TextElement : public DocumentElement
 {
 public:
-	TextElement(const UCSString & sTextBuf);
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
+	TextElement(const WPXString & sTextBuf);
+	virtual void write(DocumentHandler &xHandler) const;
 
 private:
-	UCSString msTextBuf;
+	WPXString msTextBuf;
 };
  
 #endif
Index: writerperfect/source/filter/DocumentHandler.hxx
===================================================================
RCS file: writerperfect/source/filter/DocumentHandler.hxx
diff -N writerperfect/source/filter/DocumentHandler.hxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/filter/DocumentHandler.hxx	2 Feb 2005 20:44:41 -0000	1.1.2.1
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2004 William Lachance (wlach@interlog.com)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+ * 02111-1307, USA.
+ *
+ *  Contributor(s): Martin Gallwey (gallwey@sun.com)
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+#ifndef _DOCUMENTHANDLER_H
+#define _DOCUMENTHANDLER_H
+#include <libwpd/libwpd.h>
+#include <libwpd/WPXProperty.h>
+#include <libwpd/WPXString.h>
+
+class DocumentHandler
+{
+public:
+        virtual void startDocument() = 0;
+        virtual void endDocument() = 0;
+        virtual void startElement(const char *psName, const WPXPropertyList &xPropList) = 0;
+        virtual void endElement(const char *psName) = 0;
+        virtual void characters(const WPXString &sCharacters) = 0;
+};
+#endif
Index: writerperfect/source/filter/FilterInternal.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/FilterInternal.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/filter/FilterInternal.hxx	5 Aug 2004 17:44:42 -0000	1.1
+++ writerperfect/source/filter/FilterInternal.hxx	2 Feb 2005 20:44:42 -0000	1.1.2.1
@@ -26,9 +26,10 @@
 #define WRITER_DEBUG_MSG(M)
 #endif
 
+#if 0
 #include <rtl/string.hxx>
-
 inline rtl::OString utf8_itoa(int i)
 {
 	return rtl::OString::valueOf( (sal_Int32) i );
 }
+#endif
Index: writerperfect/source/filter/FontMap.cxx
===================================================================
RCS file: writerperfect/source/filter/FontMap.cxx
diff -N writerperfect/source/filter/FontMap.cxx
--- writerperfect/source/filter/FontMap.cxx	5 Aug 2004 17:44:43 -0000	1.1
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,20 +0,0 @@
-#include "FontMap.hxx"
-#include <string.h>
-
-#ifdef FONTMAPPING
-const char * mapFont(const char *font)
-{
-        for (int i = 0; fontConversionTable[i].pWordPerfectFont; i++) 
-	{
-                if (!strcmp(font, fontConversionTable[i].pWordPerfectFont)) {
-                        return fontConversionTable[i].pConvertedFont;
-                }
-        }
-	return font;
-}
-#else
-const char * mapFont(const char *font)
-{
-	return font;
-}
-#endif
Index: writerperfect/source/filter/FontMap.hxx
===================================================================
RCS file: writerperfect/source/filter/FontMap.hxx
diff -N writerperfect/source/filter/FontMap.hxx
--- writerperfect/source/filter/FontMap.hxx	19 Oct 2004 14:16:25 -0000	1.2
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,119 +0,0 @@
-#ifndef _FONTMAP_H
-#define _FONTMAP_H
-
-#include <stdio.h>
-#include <libwpd/libwpd_support.h>
-const char * mapFont(const char *font);
-
-#ifdef FONTMAPPING
-#define FONT_SERIF     "Times New Roman"
-#define FONT_SANSSERIF "Helvetica"
-#define FONT_MONOSPACE "Courier"
-
-typedef struct _FontMapping FontMapping;
-struct _FontMapping 
-{
-	char *pWordPerfectFont;
-	char *pConvertedFont; 
-};
-
-const FontMapping fontConversionTable[] = 
-{ 
-	{ "Allegro", FONT_SERIF },
-	{ "Amelia", "Goth" },
-	{ "Bank Gothic", FONT_SANSSERIF },
-	{ "Bernhard", FONT_MONOSPACE },
-	{ "Bernhard Fashion", "Goth" },
-	{ "Bernhard Modern", FONT_SERIF },
-	{ "Bitstream Arrus", FONT_SERIF },
-	{ "Bitstream Cooper", FONT_MONOSPACE },
-	{ "Bitstream Oz Handicraft", FONT_SANSSERIF },
-	{ "Bodoni", FONT_SERIF },
-	{ "Bremen", FONT_SERIF },
-	{ "Broadway", FONT_SANSSERIF },
-	{ "BroadwayEngraved", FONT_SANSSERIF },
-	{ "Brush", "Chancery L" },
-	{ "BrushScript", "Chancery L" },
-	{ "Caslon Openface", "ChevaraOutline" },
-	{ "Century", "Century Schoolbook" },
-	{ "Charlesworth", FONT_SERIF },
-	{ "ChelmsfordBook", FONT_SERIF },
-	{ "Classical Garamond", FONT_SERIF },
-	{ "CommercialScript", "Zapf Chancery" },
-	{ "CooperBlack", FONT_MONOSPACE },
-	{ "Copperplate Gothic", FONT_MONOSPACE },
-	{ "Courier", FONT_MONOSPACE },
-	{ "Dauphin Normal", FONT_SERIF },
-	{ "Engravers' Gothic", FONT_SANSSERIF },
-	{ "Engravers' Old English", FONT_SERIF },
-	{ "Enviro D", FONT_SANSSERIF },
-	{ "Eurostile", FONT_SANSSERIF },
-	{ "Flareserif", FONT_SERIF },
-	{ "Futura", FONT_MONOSPACE },
-	{ "Futura MdCn BT", FONT_MONOSPACE },
-	{ "Geometric Slabserif", FONT_MONOSPACE },
-	{ "GoldMine", FONT_MONOSPACE },
-	{ "Goudy Handtooled", FONT_SERIF },
-	{ "Goudy Old Style", FONT_SERIF },
-	{ "Helvetica", FONT_SANSSERIF },
-	{ "Helve", FONT_SANSSERIF },
-	{ "Hobo", FONT_SANSSERIF },
-	{ "Humanist", FONT_SANSSERIF },
-	{ "Informal", FONT_SANSSERIF },
-	{ "ITC American Typewriter", FONT_MONOSPACE },
-	{ "ITC Benguiat", FONT_SERIF },
-	{ "ITC Benguiat Book", FONT_SERIF },
-	{ "ITC Cheltenham", FONT_SERIF },
-	{ "ITC Cheltenham Book", FONT_SERIF },
-	{ "ITC Galliard", FONT_SERIF },
-	{ "ITC Goudy Sans", FONT_SANSSERIF },
-	{ "ITC Kabel Book", FONT_SANSSERIF },
-	{ "ITC Korinna", FONT_SANSSERIF },
-	{ "ITC Korinna Kursiv", "Zapf Chancery" },
-	{ "ITC Souvenir", FONT_SERIF },
-	{ "ITC Zapf Chancery", "Zapf Chancery" },
-	{ "Kabel Bd", FONT_SANSSERIF },
-	{ "Kids", FONT_SANSSERIF },
-	{ "Lapidary", FONT_SERIF },
-	{ "Latin Wide D", FONT_SERIF },
-	{ "Letter Gothic 12 Pitch", FONT_SERIF },
-	{ "Lithograph", FONT_SANSSERIF },
-	{ "Mister Earl", FONT_SANSSERIF },
-	{ "Mona Lisa Recut", "ChevaraOutline" },
-	{ "MurrayHill", "Zapf Chancery" },
-	{ "Nevison Casual D", "Zapf Chancery" },
-	{ "OCR-A", FONT_MONOSPACE },
-	{ "OldEnglish", FONT_SERIF },
-	{ "OldTown", FONT_MONOSPACE },
-	{ "Onyx", FONT_SERIF },
-	{ "Parisian", FONT_SERIF },
-	{ "Pipeline", FONT_SERIF },
-	{ "Poster Bodoni", FONT_SERIF },
-	{ "Ribbon", "Zapf Chancery" },
-	{ "Roman", FONT_SERIF },
-	{ "Serifa", FONT_MONOSPACE },
-	{ "Snell", "Zapf Chancery" },
-	{ "Staccato", "Zapf Chancery" },
-	{ "Stencil", FONT_MONOSPACE },
-	{ "Stop D", FONT_SANSSERIF },
-	{ "Swiss", FONT_SANSSERIF },
-	{ "Swiss Black", FONT_SANSSERIF },
-	{ "Symbol", "OpenSymbol" },
-	{ "Technical", FONT_SANSSERIF },
-	{ "Times New Roman", FONT_SERIF },
-	{ "Transitional", FONT_SERIF },
-	{ "Transitional Cursive", "Zapf Chancery" },
-	{ "Typo Upright", "Zapf Chancery" },
-	{ "Umbra", FONT_SANSSERIF },
-	{ "University Roman", FONT_SERIF },
-	{ "URW Wood Type D", FONT_MONOSPACE },
-	{ "Venetian", FONT_SERIF },
-	{ "WP BoxDrawing", "OpenSymbol" },
-	{ "Zapf Elliptical", FONT_SERIF },
-	{ "Zapf Humanist", FONT_SANSSERIF },
-	{ "Zurich", FONT_SANSSERIF },
-	{ "Zurich Black Extended", FONT_SANSSERIF },
-	{ NULL, NULL } 
-};
-#endif
-#endif
Index: writerperfect/source/filter/FontStyle.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/FontStyle.cxx,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/filter/FontStyle.cxx	5 Aug 2004 17:44:43 -0000	1.1
+++ writerperfect/source/filter/FontStyle.cxx	2 Feb 2005 20:44:42 -0000	1.1.2.1
@@ -25,14 +25,12 @@
  * Corel Corporation or Corel Corporation Limited."
  */
 #include "FontStyle.hxx"
-#include "FontMap.hxx"
 #include "WriterProperties.hxx"
 #include "DocumentElement.hxx"
 
 FontStyle::FontStyle(const char *psName, const char *psFontFamily) : Style(psName),
 	msFontFamily(psFontFamily),
 	msFontPitch(IMP_DEFAULT_FONT_PITCH)
-
 {
 }
 
@@ -40,11 +38,11 @@
 {
 }
 
-void FontStyle::write(Reference < XDocumentHandler > &xHandler) const
+void FontStyle::write(DocumentHandler &xHandler) const
 {        
 	TagOpenElement styleOpen("style:font-decl");
-	styleOpen.addAttribute("style:name", mapFont(getName()));
-	styleOpen.addAttribute("fo:font-family", mapFont(msFontFamily));
+	styleOpen.addAttribute("style:name", getName());
+	styleOpen.addAttribute("fo:font-family", msFontFamily);
 	styleOpen.addAttribute("style:font-pitch", msFontPitch);
 	styleOpen.write(xHandler);
 	TagCloseElement styleClose("style:font-decl");
Index: writerperfect/source/filter/FontStyle.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/FontStyle.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/filter/FontStyle.hxx	5 Aug 2004 17:44:43 -0000	1.1
+++ writerperfect/source/filter/FontStyle.hxx	2 Feb 2005 20:44:42 -0000	1.1.2.1
@@ -31,23 +31,16 @@
 #include "Style.hxx"
 #include "WriterProperties.hxx"
 
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
-
 class FontStyle : public Style
 {
 public:
 	FontStyle(const char *psName, const char *psFontFamily);
 	~FontStyle();
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
-	const UTF8String &getFontFamily() const { return msFontFamily; }
+	virtual void write(DocumentHandler &xHandler) const;
+	const WPXString &getFontFamily() const { return msFontFamily; }
 
 private:
-	UTF8String msFontFamily;
-	UTF8String msFontPitch;
+	WPXString msFontFamily;
+	WPXString msFontPitch;
 };
 #endif
Index: writerperfect/source/filter/ListStyle.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/ListStyle.cxx,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/filter/ListStyle.cxx	5 Aug 2004 17:44:43 -0000	1.1
+++ writerperfect/source/filter/ListStyle.cxx	2 Feb 2005 20:44:42 -0000	1.1.2.1
@@ -28,112 +28,77 @@
 #include "ListStyle.hxx"
 #include "DocumentElement.hxx"
 
-using namespace ::rtl;
-using rtl::OUString;
-
-OrderedListLevelStyle::OrderedListLevelStyle(const WPXNumberingType listType, const UCSString &sTextBeforeNumber, 
-					     const UCSString &sTextAfterNumber, const float fSpaceBefore, const int iStartingNumber) : 
-	mlistType(listType),
-	msTextBeforeNumber(sTextBeforeNumber),
-	msTextAfterNumber(sTextAfterNumber),
-	mfSpaceBefore(fSpaceBefore),
-	miStartingNumber(iStartingNumber)
+OrderedListLevelStyle::OrderedListLevelStyle(const WPXPropertyList &xPropList) : 
+        mPropList(xPropList)
 {
 }
 
-void OrderedListStyle::updateListLevel(const int iLevel, const WPXNumberingType listType, const UCSString &sTextBeforeNumber, const UCSString &sTextAfterNumber, const int iStartingNumber) 
+void OrderedListStyle::updateListLevel(const int iLevel, const WPXPropertyList &xPropList) 
 { 
 	if (!isListLevelDefined(iLevel))
-	    setListLevel(iLevel, new OrderedListLevelStyle(listType, sTextBeforeNumber, sTextAfterNumber, iLevel*0.5f, iStartingNumber));
+	    setListLevel(iLevel, new OrderedListLevelStyle(xPropList));
 }
 
-void OrderedListLevelStyle::write(Reference < XDocumentHandler > &xHandler, int iLevel) const
+void OrderedListLevelStyle::write(DocumentHandler &xHandler, int iLevel) const
 {
-	// then convert from ucs4 to utf8 and write it
-	//char *sBulletUTF8 = ucs2ArrayToUTF8String(msBullet);
-
-	//if (mfSpaceBefore != 0.0f)
-	UTF8String sListTypeSymbol("1");
-	switch (mlistType)
-	{
-	case ARABIC:
-		sListTypeSymbol.sprintf("1");
-		break;	
-	case LOWERCASE:
-		sListTypeSymbol.sprintf("a");
-		break;	
-	case UPPERCASE:
-		sListTypeSymbol.sprintf("A");
-		break;	
- 	case LOWERCASE_ROMAN:
-		sListTypeSymbol.sprintf("i");
-		break;	
- 	case UPPERCASE_ROMAN:
-		sListTypeSymbol.sprintf("I");
-		break;
-	}
-
-	UTF8String sTextBeforeNumber(msTextBeforeNumber, true);
-	UTF8String sTextAfterNumber(msTextAfterNumber, true);
-	UTF8String sLevel;
+	WPXString sLevel;
 	sLevel.sprintf("%i", (iLevel+1));
-	UTF8String sStartValue;
-	sStartValue.sprintf("%i", miStartingNumber);
 
 	TagOpenElement listLevelStyleOpen("text:list-level-style-number");
-	listLevelStyleOpen.addAttribute("text:level", sLevel.getUTF8());
+	listLevelStyleOpen.addAttribute("text:level", sLevel);
 	listLevelStyleOpen.addAttribute("text:style-name", "Numbering Symbols");
-	listLevelStyleOpen.addAttribute("style:num-prefix", sTextBeforeNumber.getUTF8());
-	listLevelStyleOpen.addAttribute("style:num-suffix", sTextAfterNumber.getUTF8());
-	listLevelStyleOpen.addAttribute("style:num-format", sListTypeSymbol.getUTF8());
-	listLevelStyleOpen.addAttribute("text:start-value", sStartValue.getUTF8());
+        if (mPropList["style:num-prefix"])
+                listLevelStyleOpen.addAttribute("style:num-prefix", mPropList["style:num-prefix"]->getStr());
+        if (mPropList["style:num-suffix"])
+                listLevelStyleOpen.addAttribute("style:num-suffix", mPropList["style:num-suffix"]->getStr());
+        if (mPropList["style:num-format"])
+                listLevelStyleOpen.addAttribute("style:num-format", mPropList["style:num-format"]->getStr());
+        if (mPropList["text:start-value"])
+                listLevelStyleOpen.addAttribute("text:start-value", mPropList["text:start-value"]->getStr());
 	listLevelStyleOpen.write(xHandler);
 
-	UTF8String sSpaceBefore;
-	sSpaceBefore.sprintf("%fcm", mfSpaceBefore);	
 	TagOpenElement stylePropertiesOpen("style:properties");
-	stylePropertiesOpen.addAttribute("text:space-before", sSpaceBefore.getUTF8());
+        if (mPropList["text:space-before"])
+                stylePropertiesOpen.addAttribute("text:space-before", mPropList["text:space-before"]->getStr());
 	stylePropertiesOpen.addAttribute("text:min-label-width", "0.499cm");
 	stylePropertiesOpen.write(xHandler);
 
-	xHandler->endElement(OUString::createFromAscii("style:properties"));
-	xHandler->endElement(OUString::createFromAscii("text:list-level-style-number"));
+	xHandler.endElement("style:properties");
+	xHandler.endElement("text:list-level-style-number");
 }
 
-UnorderedListLevelStyle::UnorderedListLevelStyle(const UCSString &sBullet, const float fSpaceBefore)
-	: msBullet(sBullet),
-	  mfSpaceBefore(fSpaceBefore)
+UnorderedListLevelStyle::UnorderedListLevelStyle(const WPXPropertyList &xPropList)
+	: mPropList(xPropList)
 {
 }
 
-void UnorderedListStyle::updateListLevel(const int iLevel, const UCSString &sBullet) 
+void UnorderedListStyle::updateListLevel(const int iLevel, const WPXPropertyList &xPropList) 
 { 
 	if (!isListLevelDefined(iLevel))
-		setListLevel(iLevel, new UnorderedListLevelStyle(sBullet, iLevel*0.5f));
+		setListLevel(iLevel, new UnorderedListLevelStyle(xPropList));
 }
 
-void UnorderedListLevelStyle::write(Reference < XDocumentHandler > &xHandler, int iLevel) const
+void UnorderedListLevelStyle::write(DocumentHandler &xHandler, int iLevel) const
 {
-	UTF8String sBulletUTF8(msBullet, true);
-	UTF8String sLevel;
+	WPXString sLevel;
 	sLevel.sprintf("%i", (iLevel+1));
 	TagOpenElement listLevelStyleOpen("text:list-level-style-bullet");
-	listLevelStyleOpen.addAttribute("text:level", sLevel.getUTF8());
+	listLevelStyleOpen.addAttribute("text:level", sLevel);
 	listLevelStyleOpen.addAttribute("text:style-name", "Bullet Symbols");
 	listLevelStyleOpen.addAttribute("style:num-suffice", ".");
-	listLevelStyleOpen.addAttribute("text:bullet-char", sBulletUTF8.getUTF8());
+        if (mPropList["text:bullet-char"])
+                listLevelStyleOpen.addAttribute("text:bullet-char", mPropList["text:bullet-char"]->getStr());
 	listLevelStyleOpen.write(xHandler);
 
-	UTF8String sSpaceBefore;
-	sSpaceBefore.sprintf("%fcm", mfSpaceBefore);
 	TagOpenElement stylePropertiesOpen("style:properties");
-	stylePropertiesOpen.addAttribute("text:space-before", sSpaceBefore.getUTF8());
+        if (mPropList["text:space-before"])
+                listLevelStyleOpen.addAttribute("text:space-before", mPropList["text:space-before"]->getStr());
 	stylePropertiesOpen.addAttribute("text:min-label-width", "0.499cm");
-	stylePropertiesOpen.addAttribute("style:font-name", "StarSymbol");	
+	stylePropertiesOpen.addAttribute("style:font-name", "StarSymbol");
 	stylePropertiesOpen.write(xHandler);
 
-	xHandler->endElement(OUString::createFromAscii("style:properties"));
-	xHandler->endElement(OUString::createFromAscii("text:list-level-style-bullet"));
+	xHandler.endElement("style:properties");
+	xHandler.endElement("text:list-level-style-bullet");
 }
 
 ListStyle::ListStyle(const char *psName, const int iListID) :
@@ -171,7 +136,7 @@
 		mppListLevels[iLevel] = iListLevelStyle;
 }
 
-void ListStyle::write(Reference < XDocumentHandler > &xHandler) const
+void ListStyle::write(DocumentHandler &xHandler) const
 {
 	TagOpenElement listStyleOpenElement("text:list-style");
 	listStyleOpenElement.addAttribute("style:name", getName());
@@ -182,5 +147,5 @@
 			mppListLevels[i]->write(xHandler, i);		
 	}
 
-	xHandler->endElement(OUString::createFromAscii("text:list-style"));
+	xHandler.endElement("text:list-style");
 }
Index: writerperfect/source/filter/ListStyle.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/ListStyle.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/filter/ListStyle.hxx	5 Aug 2004 17:44:43 -0000	1.1
+++ writerperfect/source/filter/ListStyle.hxx	2 Feb 2005 20:44:42 -0000	1.1.2.1
@@ -33,44 +33,30 @@
 #include "Style.hxx"
 #include "WriterProperties.hxx"
 
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
-
 class DocumentElement;
 
 class ListLevelStyle
 {
 public:
-	virtual void write(Reference < XDocumentHandler > &xHandler, int level) const = 0;
+	virtual void write(DocumentHandler &xHandler, int iLevel) const = 0;
 };
 
 class OrderedListLevelStyle : public ListLevelStyle
 {
 public:
-	OrderedListLevelStyle(const WPXNumberingType listType, 
-			      const UCSString &sTextBeforeNumber, const UCSString &sTextAfterNumber, 
-			      const float fSpaceBefore, const int iStartingNumber);
-	virtual void write(Reference < XDocumentHandler > &xHandler, int level) const;
+	OrderedListLevelStyle(const WPXPropertyList &xPropList);
+	virtual void write(DocumentHandler &xHandler, int iLevel) const;
 private:
-	UCSString msTextBeforeNumber;
-	UCSString msTextAfterNumber;
-	float mfSpaceBefore;
-	int miStartingNumber;
-	WPXNumberingType mlistType;
+        WPXPropertyList mPropList;
 };
 
 class UnorderedListLevelStyle : public ListLevelStyle
 {
 public:
-	UnorderedListLevelStyle(const UCSString &sBullet, const float fSpaceBefore);
-	virtual void write(Reference < XDocumentHandler > &xHandler, int iLevel) const;
+	UnorderedListLevelStyle(const WPXPropertyList &xPropList);
+	virtual void write(DocumentHandler &xHandler, int iLevel) const;
 private:
-	UCSString msBullet;
-	float mfSpaceBefore;
+        WPXPropertyList mPropList;
 };
 
 class ListStyle : public Style
@@ -78,7 +64,7 @@
 public:
 	ListStyle(const char *psName, const int iListID);
 	virtual ~ListStyle();
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
+	virtual void write(DocumentHandler &xHandler) const;
 	const int getListID() { return miListID; }
 	const bool isListLevelDefined(int iLevel) const;
 
@@ -95,15 +81,13 @@
 {
 public:
 	OrderedListStyle(const char *psName, const int iListID) : ListStyle(psName, iListID) {}
-	void updateListLevel(const int iLevel, const WPXNumberingType listType, 
-			     const UCSString &sTextBeforeNumber, const UCSString &sTextAfterNumber,
-			     const int iStartingNumber);
+	void updateListLevel(const int iLevel, const WPXPropertyList &xPropList);
 };
 
 class UnorderedListStyle : public ListStyle
 {
 public:
 	UnorderedListStyle(const char *psName, const int iListID) : ListStyle(psName, iListID) {}
-	void updateListLevel(const int iLevel, const UCSString &sBullet);
+	void updateListLevel(const int iLevel, const WPXPropertyList &xPropList);
 };
 #endif
Index: writerperfect/source/filter/OODocumentHandler.cxx
===================================================================
RCS file: writerperfect/source/filter/OODocumentHandler.cxx
diff -N writerperfect/source/filter/OODocumentHandler.cxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/filter/OODocumentHandler.cxx	24 Feb 2005 10:21:13 -0000	1.1.2.2
@@ -0,0 +1,83 @@
+/* 
+ * Copyright (C) 2004 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * 
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+  *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+#include "OODocumentHandler.hxx"
+
+#include <string.h>
+
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
+#include <com/sun/star/xml/sax/XAttributeList.hpp>
+#endif
+
+#ifndef _ATTRLIST_HPP_
+#include <xmloff/attrlist.hxx>
+#endif
+
+using namespace ::rtl;
+using rtl::OUString;
+
+using com::sun::star::xml::sax::XAttributeList;
+
+OODocumentHandler::OODocumentHandler(Reference < XDocumentHandler > &xHandler) :
+        mxHandler(xHandler)
+{
+}
+
+void OODocumentHandler::startDocument() 
+{
+	mxHandler->startDocument();
+}
+
+void OODocumentHandler::endDocument()
+{
+	mxHandler->endDocument();
+}
+
+void OODocumentHandler::startElement(const char *psName, const WPXPropertyList &xPropList)
+{
+        SvXMLAttributeList *pAttrList = new SvXMLAttributeList();
+	Reference < XAttributeList > xAttrList(pAttrList);
+	WPXPropertyList::Iter i(xPropList);
+	for (i.rewind(); i.next(); )
+	{
+                // filter out libwpd elements
+                if (strlen(i.key()) > 6 && strcmp(i.key(), "libwpd") != 0)
+                        pAttrList->AddAttribute(OUString::createFromAscii(i.key()),
+                                                OUString::createFromAscii(i()->getStr().cstr()));
+        }
+
+        mxHandler->startElement(OUString::createFromAscii(psName), xAttrList);
+}
+
+void OODocumentHandler::endElement(const char *psName)
+{
+        mxHandler->endElement(OUString::createFromAscii(psName));
+}
+
+void OODocumentHandler::characters(const WPXString &sCharacters)
+{
+        OUString sCharU16(sCharacters.cstr(), strlen(sCharacters.cstr()), RTL_TEXTENCODING_UTF8);
+        mxHandler->characters(sCharU16);
+}
Index: writerperfect/source/filter/OODocumentHandler.cxx.orig
===================================================================
RCS file: writerperfect/source/filter/OODocumentHandler.cxx.orig
diff -N writerperfect/source/filter/OODocumentHandler.cxx.orig
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/filter/OODocumentHandler.cxx.orig	17 Feb 2005 10:56:10 -0000	1.1.2.2
@@ -0,0 +1,81 @@
+/* 
+ * Copyright (C) 2004 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * 
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+  *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+#include "OODocumentHandler.hxx"
+
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
+#include <com/sun/star/xml/sax/XAttributeList.hpp>
+#endif
+
+#ifndef _ATTRLIST_HPP_
+#include <xmloff/attrlist.hxx>
+#endif
+
+using namespace ::rtl;
+using rtl::OUString;
+
+using com::sun::star::xml::sax::XAttributeList;
+
+OODocumentHandler::OODocumentHandler(Reference < XDocumentHandler > &xHandler) :
+        mxHandler(xHandler)
+{
+}
+
+void OODocumentHandler::startDocument() 
+{
+	mxHandler->startDocument();
+}
+
+void OODocumentHandler::endDocument()
+{
+	mxHandler->endDocument();
+}
+
+void OODocumentHandler::startElement(const char *psName, const WPXPropertyList &xPropList)
+{
+        SvXMLAttributeList *pAttrList = new SvXMLAttributeList();
+	Reference < XAttributeList > xAttrList(pAttrList);
+	WPXPropertyList::Iter i(xPropList);
+	for (i.rewind(); i.next(); )
+	{
+                // filter out libwpd elements
+                if (strlen(i.key().c_str()) > 6 && strcmp(i.key().c_str(), "libwpd") != 0)
+                        pAttrList->AddAttribute(OUString::createFromAscii(i.key().c_str()),
+                                                OUString::createFromAscii(i()->getStr().cstr()));
+        }
+
+        mxHandler->startElement(OUString::createFromAscii(psName), xAttrList);
+}
+
+void OODocumentHandler::endElement(const char *psName)
+{
+        mxHandler->endElement(OUString::createFromAscii(psName));
+}
+
+void OODocumentHandler::characters(const WPXString &sCharacters)
+{
+        OUString sCharU16(sCharacters.cstr(), strlen(sCharacters.cstr()), RTL_TEXTENCODING_UTF8);
+        mxHandler->characters(sCharU16);
+}
Index: writerperfect/source/filter/OODocumentHandler.hxx
===================================================================
RCS file: writerperfect/source/filter/OODocumentHandler.hxx
diff -N writerperfect/source/filter/OODocumentHandler.hxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/filter/OODocumentHandler.hxx	2 Feb 2005 20:44:43 -0000	1.1.2.1
@@ -0,0 +1,22 @@
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+
+#include "DocumentHandler.hxx"
+
+using com::sun::star::uno::Reference;
+using com::sun::star::xml::sax::XDocumentHandler;
+
+class OODocumentHandler : public DocumentHandler
+{ 
+public:
+        OODocumentHandler(Reference < XDocumentHandler > &xHandler);
+        virtual void startDocument();
+        virtual void endDocument();
+        virtual void startElement(const char *psName, const WPXPropertyList &xPropList);
+        virtual void endElement(const char *psName);
+        virtual void characters(const WPXString &sCharacters);
+
+private:
+        Reference < XDocumentHandler > mxHandler;
+};
Index: writerperfect/source/filter/PageSpan.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/PageSpan.cxx,v
retrieving revision 1.1
retrieving revision 1.1.2.2
diff -u -r1.1 -r1.1.2.2
--- writerperfect/source/filter/PageSpan.cxx	5 Aug 2004 17:44:44 -0000	1.1
+++ writerperfect/source/filter/PageSpan.cxx	8 Feb 2005 18:55:20 -0000	1.1.2.2
@@ -32,8 +32,10 @@
 const float fDefaultPageWidth = 8.5f; // inches (OOo required default: we will handle this later)
 const float fDefaultPageHeight = 11.0f; // inches
 
-PageSpan::PageSpan(const int iSpan, const float fFormLength, const float fFormWidth, const WPXFormOrientation fFormOrientation,
-			 const float fLeftMargin, const float fRightMargin, const float fTopMargin, const float fBottomMargin):
+PageSpan::PageSpan(const WPXPropertyList &xPropList) :
+#if 0
+const int iSpan, const float fFormLength, const float fFormWidth, const WPXFormOrientation fFormOrientation,
+                   const float fLeftMargin, const float fRightMargin, const float fTopMargin, const float fBottomMargin):
 	miSpan(iSpan),
 	mfFormLength(fFormLength),
 	mfFormWidth(fFormWidth),
@@ -42,6 +44,8 @@
 	mfMarginRight(fRightMargin),
 	mfMarginTop(fTopMargin),
 	mfMarginBottom(fBottomMargin),
+#endif
+        mxPropList(xPropList),
 	mpHeaderContent(NULL),
 	mpFooterContent(NULL),
 	mpHeaderLeftContent(NULL),
@@ -57,70 +61,70 @@
 	delete mpFooterLeftContent;
 }
 
-void PageSpan::writePageMaster(const int iNum, Reference < XDocumentHandler > &xHandler) const
+int PageSpan::getSpan() const
+{ 
+        if (mxPropList["libwpd:num-pages"]) 
+                return mxPropList["libwpd:num-pages"]->getInt(); 
+
+        return 0; // should never happen
+}
+
+float PageSpan::getMarginLeft() const
+{ 
+        if (mxPropList["fo:margin-left"])
+                return mxPropList["fo:margin-left"]->getFloat();
+
+         return 0.0f; 
+}
+
+float PageSpan::getMarginRight() const
+{ 
+        if (mxPropList["fo:margin-right"])
+                return mxPropList["fo:margin-right"]->getFloat();
+
+         return 0.0f; 
+}
+
+void PageSpan::writePageMaster(const int iNum, DocumentHandler &xHandler) const
 {
-	TagOpenElement pageMasterOpen("style:page-master");
-	UTF8String sPageMasterName;
-	sPageMasterName.sprintf("PM%i", iNum);
-	pageMasterOpen.addAttribute("style:name", sPageMasterName.getUTF8());
-	pageMasterOpen.write(xHandler);
-
-	TagOpenElement pageMasterPropertiesOpen("style:properties");
-	UTF8String sMarginTop;
-	sMarginTop.sprintf("%.4finch", mfMarginTop);
-	UTF8String sMarginBottom;
-	sMarginBottom.sprintf("%.4finch", mfMarginBottom);
-	UTF8String sMarginLeft;
-	sMarginLeft.sprintf("%.4finch", mfMarginLeft);
-	UTF8String sMarginRight;
-	sMarginRight.sprintf("%.4finch", mfMarginRight);
-	UTF8String sPageWidth;
-	sPageWidth.sprintf("%.4finch", mfFormWidth);
-	UTF8String sPageHeight;
-	sPageHeight.sprintf("%.4finch", mfFormLength);
-	if (mfFormOrientation == LANDSCAPE)
-	{
-		pageMasterPropertiesOpen.addAttribute("style:print-orientation", "landscape");
-	}
-	else
-	{
-		pageMasterPropertiesOpen.addAttribute("style:print-orientation", "portrait");
-	}
-	pageMasterPropertiesOpen.addAttribute("fo:page-width", sPageWidth.getUTF8());
-	pageMasterPropertiesOpen.addAttribute("fo:page-height", sPageHeight.getUTF8());
-	pageMasterPropertiesOpen.addAttribute("fo:margin-top", sMarginTop.getUTF8());
-	pageMasterPropertiesOpen.addAttribute("fo:margin-bottom", sMarginBottom.getUTF8());
-	pageMasterPropertiesOpen.addAttribute("fo:margin-left", sMarginLeft.getUTF8());
-	pageMasterPropertiesOpen.addAttribute("fo:margin-right", sMarginRight.getUTF8());
-	pageMasterPropertiesOpen.write(xHandler);
-	TagCloseElement pageMasterPropertiesClose("style:properties");
-	pageMasterPropertiesClose.write(xHandler);
+        WPXPropertyList propList;
+        
+	WPXString sPageMasterName; 
+        sPageMasterName.sprintf("PM%i", iNum);
+        propList.insert("style:name", sPageMasterName);
+	propList.insert("style:name", sPageMasterName);
+	xHandler.startElement("style:page-master", propList);
+
+        xHandler.startElement("style:properties", mxPropList);
 
-	TagCloseElement pageMasterClose("style:page-master");
-	pageMasterClose.write(xHandler);
+        xHandler.endElement("style:properties");
+        xHandler.endElement("style:page-master");
 }
 
-void PageSpan::writeMasterPages(const int iStartingNum, const int iPageMasterNum, const bool bLastPageSpan, Reference < XDocumentHandler > &xHandler) const
+void PageSpan::writeMasterPages(const int iStartingNum, const int iPageMasterNum, const bool bLastPageSpan, 
+                                DocumentHandler &xHandler) const
 {
+        WPXPropertyList propList; // scratch space
+
 	int iSpan = 0;
-	(bLastPageSpan) ? iSpan = 1 : iSpan = miSpan;
+	(bLastPageSpan) ? iSpan = 1 : iSpan = getSpan();
 
 	for (int i=iStartingNum; i<(iStartingNum+iSpan); i++)
 	{
 		TagOpenElement masterPageOpen("style:master-page");
-		UTF8String sMasterPageName;
+		WPXString sMasterPageName;
 		sMasterPageName.sprintf("Page Style %i", i);
-		UTF8String sPageMasterName;
+		WPXString sPageMasterName;
 		sPageMasterName.sprintf("PM%i", iPageMasterNum);
-		masterPageOpen.addAttribute("style:name", sMasterPageName.getUTF8());
-		masterPageOpen.addAttribute("style:page-master-name", sPageMasterName.getUTF8());
+                propList.insert("style:name", sMasterPageName);
+		propList.insert("style:page-master-name", sPageMasterName);
 		if (!bLastPageSpan)
 		{
-			UTF8String sNextMasterPageName;
+			WPXString sNextMasterPageName;
 			sNextMasterPageName.sprintf("Page Style %i", (i+1));
-			masterPageOpen.addAttribute("style:next-style-name", sNextMasterPageName.getUTF8());
+                        propList.insert("style:next-style-name", sNextMasterPageName);
 		}
-		masterPageOpen.write(xHandler);
+                xHandler.startElement("style:master-page", propList);
 
 		if (mpHeaderContent)
 			_writeHeaderFooter("style:header", *mpHeaderContent, xHandler);
@@ -131,19 +135,18 @@
 		if (mpFooterLeftContent)
 			_writeHeaderFooter("style:footer-left", *mpFooterLeftContent, xHandler);
 
-		TagCloseElement masterPageClose("style:master-page");
-		masterPageClose.write(xHandler);
+                xHandler.endElement("style:master-page");
 	}
 
 }
 
 void PageSpan::_writeHeaderFooter(const char *headerFooterTagName,
-				  const vector<DocumentElement *> & headerFooterContent,
-				  Reference < XDocumentHandler > &xHandler) const
+				  const std::vector<DocumentElement *> & headerFooterContent,
+				  DocumentHandler &xHandler) const
 {
 	TagOpenElement headerFooterOpen(headerFooterTagName);
 	headerFooterOpen.write(xHandler);
-	for (vector<DocumentElement *>::const_iterator iter = headerFooterContent.begin();
+	for (std::vector<DocumentElement *>::const_iterator iter = headerFooterContent.begin();
 	     iter != headerFooterContent.end();
 	     iter++) {
 		(*iter)->write(xHandler);
Index: writerperfect/source/filter/PageSpan.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/PageSpan.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.2
diff -u -r1.1 -r1.1.2.2
--- writerperfect/source/filter/PageSpan.hxx	5 Aug 2004 17:44:44 -0000	1.1
+++ writerperfect/source/filter/PageSpan.hxx	8 Feb 2005 18:55:21 -0000	1.1.2.2
@@ -1,7 +1,7 @@
 /* PageSpan: Stores (and writes) page-based information (e.g.: margins,
  * headers/footers)
  *
- * Copyright (C) 2002-2003 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -27,46 +27,40 @@
 #ifndef _PAGESPAN_H
 #define _PAGESPAN_H
 #include <libwpd/libwpd.h>
-
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
+#include <vector>
 
 class DocumentElement;
+class DocumentHandler;
 
 class PageSpan
 {
 public:
-	PageSpan(const int iSpan, const float fFormLength, const float fFormWidth, const WPXFormOrientation fFormOrientation,
-			 const float fLeftMargin, const float fRightMargin, const float fTopMargin, const float fBottomMargin);
+	PageSpan(const WPXPropertyList &xPropList);
 	virtual ~PageSpan();
-	void writePageMaster(const int iNum, Reference < XDocumentHandler > &xHandler) const;
-	void writeMasterPages(const int iStartingNum, const int iPageMasterNum, const bool bLastPageSpan, Reference < XDocumentHandler > &xHandler) const;
-	const int getSpan() const { return miSpan; }
+	void writePageMaster(const int iNum, DocumentHandler &xHandler) const;
+	void writeMasterPages(const int iStartingNum, const int iPageMasterNum, const bool bLastPageSpan, DocumentHandler &xHandler) const;
+	int getSpan() const;
+#if 0
 	float getFormLength() { return mfFormLength; }
 	float getFormWidth() { return mfFormWidth; }
 	WPXFormOrientation getFormOrientation() { return mfFormOrientation; }
-	float getMarginLeft() { return mfMarginLeft; }
-	float getMarginRight() { return mfMarginRight; }
+#endif
+	float getMarginLeft() const;
+	float getMarginRight() const;
 
-	const vector<DocumentElement *> * getHeaderContent() const { return mpHeaderContent; }
-	void setHeaderContent(vector<DocumentElement *> * pHeaderContent) { mpHeaderContent = pHeaderContent; }
-	void setFooterContent(vector<DocumentElement *> * pFooterContent) { mpFooterContent = pFooterContent; }
-	void setHeaderLeftContent(vector<DocumentElement *> * pHeaderContent) { mpHeaderLeftContent = pHeaderContent; }
-	void setFooterLeftContent(vector<DocumentElement *> * pFooterContent) { mpFooterLeftContent = pFooterContent; }
+	const std::vector<DocumentElement *> * getHeaderContent() const { return mpHeaderContent; }
+	void setHeaderContent(std::vector<DocumentElement *> * pHeaderContent) { mpHeaderContent = pHeaderContent; }
+	void setFooterContent(std::vector<DocumentElement *> * pFooterContent) { mpFooterContent = pFooterContent; }
+	void setHeaderLeftContent(std::vector<DocumentElement *> * pHeaderContent) { mpHeaderLeftContent = pHeaderContent; }
+	void setFooterLeftContent(std::vector<DocumentElement *> * pFooterContent) { mpFooterLeftContent = pFooterContent; }
 protected:
-	void _writeHeaderFooter(const char *headerFooterTagName, const vector<DocumentElement *> & headerFooterContent,
-				Reference < XDocumentHandler > &xHandler) const;
+	void _writeHeaderFooter(const char *headerFooterTagName, const std::vector<DocumentElement *> & headerFooterContent,
+				DocumentHandler &xHandler) const;
 private:
-	int miSpan;
-	float mfFormLength, mfFormWidth, mfMarginLeft, mfMarginRight, mfMarginTop, mfMarginBottom;
-	WPXFormOrientation mfFormOrientation;
-	vector<DocumentElement *> * mpHeaderContent;
-	vector<DocumentElement *> * mpFooterContent;
-	vector<DocumentElement *> * mpHeaderLeftContent;
-	vector<DocumentElement *> * mpFooterLeftContent;
+        WPXPropertyList mxPropList;
+	std::vector<DocumentElement *> * mpHeaderContent;
+	std::vector<DocumentElement *> * mpFooterContent;
+	std::vector<DocumentElement *> * mpHeaderLeftContent;
+	std::vector<DocumentElement *> * mpFooterLeftContent;
 };
 #endif
Index: writerperfect/source/filter/SectionStyle.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/SectionStyle.cxx,v
retrieving revision 1.1
retrieving revision 1.1.2.2
diff -u -r1.1 -r1.1.2.2
--- writerperfect/source/filter/SectionStyle.cxx	5 Aug 2004 17:44:44 -0000	1.1
+++ writerperfect/source/filter/SectionStyle.cxx	7 Feb 2005 18:33:52 -0000	1.1.2.2
@@ -3,6 +3,7 @@
  * is referenced throughout the entire document
  *
  * Copyright (C) 2002-2003 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (c) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
  * 
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -28,58 +29,53 @@
 #include "FilterInternal.hxx"
 #include "SectionStyle.hxx"
 #include "DocumentElement.hxx"
+#include <math.h>
 
-using namespace ::rtl;
-using rtl::OUString;
+#ifdef _MSC_VER
+double rint(double x);
+#endif /* _WIN32 */
 
-const float fDefaultSideMargin = 1.0f; // inches 
+const float fDefaultSideMargin = 1.0f; // inches
 const float fDefaultPageWidth = 8.5f; // inches (OOo required default: we will handle this later)
 const float fDefaultPageHeight = 11.0f; // inches
 
-SectionStyle::SectionStyle(const int iNumColumns, const char *psName) : Style(psName),
-	miNumColumns(iNumColumns)
+SectionStyle::SectionStyle(const WPXPropertyList &xPropList, 
+                           const WPXPropertyListVector &xColumns, 
+                           const char *psName) : 
+        Style(psName),
+        mPropList(xPropList),
+        mColumns(xColumns)
 {
-
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Created a new set of section props with this no. of columns: %i and this name: %s\n", 
-	       (int)miNumColumns, (const char *)getName()));	
 }
 
-void SectionStyle::write(Reference < XDocumentHandler > &xHandler) const
+void SectionStyle::write(DocumentHandler &xHandler) const
 {
 	TagOpenElement styleOpen("style:style");
 	styleOpen.addAttribute("style:name", getName());
 	styleOpen.addAttribute("style:family", "section");
 	styleOpen.write(xHandler);
 
-	// style properties
-	TagOpenElement stylePropertiesOpen("style:properties");
-	stylePropertiesOpen.addAttribute("text:dont-balance-text-columns", "false");
-	stylePropertiesOpen.write(xHandler);
-
-	// column properties
-	TagOpenElement columnsOpen("style:columns");
-	UTF8String sColumnCount;
-	sColumnCount.sprintf("%i", miNumColumns);
-	columnsOpen.addAttribute("fo:column-count", sColumnCount.getUTF8());
-	columnsOpen.addAttribute("fo:column-gap", "0inch");
-	columnsOpen.write(xHandler);
+	// if the number of columns is <= 1, we will never come here. This is only an additional check
+	if (mColumns.count() > 1)
+	{		
+		// style properties
+                xHandler.startElement("style:properties", mPropList);
+
+		// column properties
+                WPXPropertyList columnProps;
+                columnProps.insert("fo:column-count", (int)mColumns.count());
+                xHandler.startElement("style:columns", columnProps);
 	
-	if (miNumColumns > 1) {		
-		for (int i=0; i<miNumColumns; i++) {
-			// theoretically, we would put column widths in here, but that's currently unsupported.. 
-			// so we just allocate a size of "1" for each
-			TagOpenElement columnOpen("style:column");
-			columnOpen.addAttribute("style:rel-width", "1");
-			columnOpen.addAttribute("fo:margin-left", "0inch");
-			columnOpen.addAttribute("fo:margin-right", "0inch");
-			columnOpen.write(xHandler);
-			
-			TagCloseElement columnClose("style:column");
-			columnClose.write(xHandler);
+                WPXPropertyListVector::Iter i(mColumns);
+                for (i.rewind(); i.next();)
+		{
+                        xHandler.startElement("style:column", i());
+                        xHandler.endElement("style:column");
 		}
+
+                xHandler.endElement("style:columns");
+                xHandler.endElement("style:properties");
 	}
 
-	xHandler->endElement(OUString::createFromAscii("style:columns"));
-	xHandler->endElement(OUString::createFromAscii("style:properties"));
-	xHandler->endElement(OUString::createFromAscii("style:style"));
+	xHandler.endElement("style:style");
 }
Index: writerperfect/source/filter/SectionStyle.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/SectionStyle.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.2
diff -u -r1.1 -r1.1.2.2
--- writerperfect/source/filter/SectionStyle.hxx	5 Aug 2004 17:44:44 -0000	1.1
+++ writerperfect/source/filter/SectionStyle.hxx	7 Feb 2005 18:33:52 -0000	1.1.2.2
@@ -27,20 +27,20 @@
 #ifndef _SECTIONSTYLE_H
 #define _SECTIONSTYLE_H
 #include <libwpd/libwpd.h>
+#include <libwpd/WPXPropertyListVector.h>
 
 #include "Style.hxx"
 #include "WriterProperties.hxx"
 
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
 
 class SectionStyle : public Style
 {
 public:
-	SectionStyle(const int iNumColumns, const char *psName);
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
+	SectionStyle(const WPXPropertyList &xPropList, const WPXPropertyListVector &xColumns, const char *psName);
+	virtual void write(DocumentHandler &xHandler) const;
 
 private:
-	int miNumColumns;
+        WPXPropertyList mPropList;
+	WPXPropertyListVector mColumns;
 };
 #endif
Index: writerperfect/source/filter/Style.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/Style.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/filter/Style.hxx	5 Aug 2004 17:44:44 -0000	1.1
+++ writerperfect/source/filter/Style.hxx	2 Feb 2005 20:44:44 -0000	1.1.2.1
@@ -28,38 +28,30 @@
 #ifndef _STYLE_H
 #define _STYLE_H
 #include <libwpd/libwpd.h>
-
-class DocumentElement;
-
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
+#include "DocumentElement.hxx"
 
 class TopLevelElementStyle
 {
 public:
 	TopLevelElementStyle() : mpsMasterPageName(NULL) { }
 	virtual ~TopLevelElementStyle() { if (mpsMasterPageName) delete mpsMasterPageName; }
-	void setMasterPageName(UTF8String &sMasterPageName) { mpsMasterPageName = new UTF8String(sMasterPageName); }
-	const UTF8String * getMasterPageName() const { return mpsMasterPageName; }
+	void setMasterPageName(WPXString &sMasterPageName) { mpsMasterPageName = new WPXString(sMasterPageName); }
+	const WPXString * getMasterPageName() const { return mpsMasterPageName; }
 
 private:
-	UTF8String *mpsMasterPageName;
+	WPXString *mpsMasterPageName;
 };
 
 class Style
 {
  public:
-	Style(const UTF8String &psName) : msName(psName) {}
+	Style(const WPXString &psName) : msName(psName) {}
 	virtual ~Style() {}
 
-	virtual void write(Reference < XDocumentHandler > &xHandler) const {};
-	const UTF8String &getName() const { return msName; }
+	virtual void write(DocumentHandler &xHandler) const {};
+	const WPXString &getName() const { return msName; }
 
  private:
-	UTF8String msName;
+	WPXString msName;
 };
 #endif
Index: writerperfect/source/filter/TableStyle.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/TableStyle.cxx,v
retrieving revision 1.1
retrieving revision 1.1.2.3
diff -u -r1.1 -r1.1.2.3
--- writerperfect/source/filter/TableStyle.cxx	5 Aug 2004 17:44:44 -0000	1.1
+++ writerperfect/source/filter/TableStyle.cxx	8 Feb 2005 18:55:21 -0000	1.1.2.3
@@ -1,7 +1,9 @@
 /* TableStyle: Stores (and writes) table-based information that is 
  * needed at the head of an OO document.
  *
- * Copyright (C) 2002-2003 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2004 Net Integration Technologies, Inc. (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
  * 
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -33,202 +35,123 @@
 #include <minmax.h>
 #endif
 
-using namespace ::rtl;
-using rtl::OUString;
-
-TableCellStyle::TableCellStyle(const float fLeftBorderThickness, const float fRightBorderThickness, 
-			       const float fTopBorderThickness, const float fBottomBorderThickness, 
-			       const RGBSColor *pFgColor, const RGBSColor *pBgColor, const char *psName) :
+TableCellStyle::TableCellStyle(const WPXPropertyList &xPropList, const char *psName) :
 	Style(psName),
-	mfLeftBorderThickness(fLeftBorderThickness),
-	mfRightBorderThickness(fRightBorderThickness),
-	mfTopBorderThickness(fTopBorderThickness),
-	mfBottomBorderThickness(fBottomBorderThickness)
-{
-	if (pFgColor != NULL) {
-		m_fgColor.m_r = pFgColor->m_r;
-		m_fgColor.m_g = pFgColor->m_g;
-		m_fgColor.m_b = pFgColor->m_b;
-		m_fgColor.m_s = pFgColor->m_s;
-	}
-	else {
-		m_fgColor.m_r = m_fgColor.m_g = m_fgColor.m_b = 0xFF;
-		m_fgColor.m_s = 0x64; // 100%
-	}
-	if (pBgColor != NULL) {
-		m_bgColor.m_r = pBgColor->m_r;
-		m_bgColor.m_g = pBgColor->m_g;
-		m_bgColor.m_b = pBgColor->m_b;
-		m_bgColor.m_s = pBgColor->m_s;
-	}
-	else {
-		m_bgColor.m_r = m_bgColor.m_g = m_bgColor.m_b = 0xFF;
-		m_bgColor.m_s = 0x64; // 100%
-	}
+        mPropList(xPropList)
+{
 }
 
-void TableCellStyle::write(Reference < XDocumentHandler > &xHandler) const
+void TableCellStyle::write(DocumentHandler &xHandler) const
 {
 	TagOpenElement styleOpen("style:style");
 	styleOpen.addAttribute("style:name", getName());
 	styleOpen.addAttribute("style:family", "table-cell");
 	styleOpen.write(xHandler);
 
-	TagOpenElement stylePropertiesOpen("style:properties");
-	UTF8String sBackgroundColor;
-	float fgAmount = (float)m_fgColor.m_s/100.0f;
-	float bgAmount = max(((float)m_bgColor.m_s-(float)m_fgColor.m_s)/100.0f, 0.0f);
-
-	int bgRed = min((int)(((float)m_fgColor.m_r*fgAmount)+((float)m_bgColor.m_r*bgAmount)), 255);
-	int bgGreen = min((int)(((float)m_fgColor.m_g*fgAmount)+((float)m_bgColor.m_g*bgAmount)), 255);
-	int bgBlue = min((int)(((float)m_fgColor.m_b*fgAmount)+((float)m_bgColor.m_b*bgAmount)), 255);
-	sBackgroundColor.sprintf("#%.2x%.2x%.2x", bgRed, bgGreen, bgBlue);
-	stylePropertiesOpen.addAttribute("fo:background-color", sBackgroundColor.getUTF8());
-	stylePropertiesOpen.addAttribute("fo:padding", "0.0382inch");
-	UTF8String sBorderLeft;
-	sBorderLeft.sprintf("%finch solid #000000", mfLeftBorderThickness);
-	stylePropertiesOpen.addAttribute("fo:border-left", sBorderLeft.getUTF8());
-	UTF8String sBorderRight;
-	sBorderRight.sprintf("%finch solid #000000", mfRightBorderThickness);
-	stylePropertiesOpen.addAttribute("fo:border-right", sBorderRight.getUTF8());
-	UTF8String sBorderTop;
-	sBorderTop.sprintf("%finch solid #000000", mfTopBorderThickness);
-	stylePropertiesOpen.addAttribute("fo:border-top", sBorderTop.getUTF8());
-	UTF8String sBorderBottom;
-	sBorderBottom.sprintf("%finch solid #000000", mfBottomBorderThickness);
-	stylePropertiesOpen.addAttribute("fo:border-bottom", sBorderBottom.getUTF8());
-	stylePropertiesOpen.write(xHandler);
-	xHandler->endElement(OUString::createFromAscii("style:properties"));
+        // WLACH_REFACTORING: Only temporary.. a much better solution is to
+        // generalize this sort of thing into the "Style" superclass
+        WPXPropertyList stylePropList;
+        WPXPropertyList::Iter i(mPropList);
+        for (i.rewind(); i.next();)
+        {
+                if (strlen(i.key()) > 2 && strncmp(i.key(), "fo", 2) == 0)
+                        stylePropList.insert(i.key(), i()->clone());
+        }
+        stylePropList.insert("fo:padding", "0.0382inch");
+        xHandler.startElement("style:properties", stylePropList);
+	xHandler.endElement("style:properties");
 
-	xHandler->endElement(OUString::createFromAscii("style:style"));
-	
-//  	xHandler->endElement(OUString::createFromAscii("<style:style style:name=\"%s\" style:family=\"%s\"><style:properties fo:background-color=\"#%.2x%.2x%.2x\" fo:padding=\"0.0382inch\" fo:border-left=\"%finch solid #000000\" fo:border-right=\"%finch solid #000000\" fo:border-top=\"%finch solid #000000\" fo:border-bottom=\"%finch solid #000000\"/></style:style>\n", getName(), "table-cell", 
-// 			  m_fgColor.m_r, m_fgColor.m_g, m_fgColor.m_b,
-// 			  mfLeftBorderThickness, mfRightBorderThickness, 
-// 			  mfTopBorderThickness, mfBottomBorderThickness);
+	xHandler.endElement("style:style");	
 }
 
-
-TableStyle::TableStyle(const float fDocumentMarginLeft, const float fDocumentMarginRight, 
-		       const float fMarginLeftOffset, const float fMarginRightOffset,
-		       const uint8_t iTablePositionBits, const float fLeftOffset,
-		       const vector < WPXColumnDefinition > &columns, const char *psName) : 
+TableRowStyle::TableRowStyle(const WPXPropertyList &propList, const char *psName) :
 	Style(psName),
-	mfDocumentMarginLeft(fDocumentMarginLeft),
-	mfDocumentMarginRight(fDocumentMarginRight),
-	mfMarginLeftOffset(fMarginLeftOffset),
-	mfMarginRightOffset(fMarginRightOffset),
-	miTablePositionBits(iTablePositionBits),
-	mfLeftOffset(fLeftOffset),
-	miNumColumns(columns.size())
+        mPropList(propList)
+{
+}
 
+void TableRowStyle::write(DocumentHandler &xHandler) const
 {
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Created a new set of table props with this no. of columns repeated: %i and this name: %s\n",
-	       (int)miNumColumns, (const char *)getName()));
+	TagOpenElement styleOpen("style:style");
+	styleOpen.addAttribute("style:name", getName());
+	styleOpen.addAttribute("style:family", "table-row");
+	styleOpen.write(xHandler);
+	
+        TagOpenElement stylePropertiesOpen("style:properties");
+        if (mPropList["style:min-row-height"])
+                stylePropertiesOpen.addAttribute("style:min-row-height", mPropList["style:min-row-height"]->getStr());
+        else if (mPropList["style:row-height"])
+                stylePropertiesOpen.addAttribute("style:row-height", mPropList["style:row-height"]->getStr());
+        stylePropertiesOpen.write(xHandler);
+        xHandler.endElement("style:properties");
+	
+	xHandler.endElement("style:style");		
+}
+	
 
-	typedef vector<WPXColumnDefinition>::const_iterator CDVIter;
-	for (CDVIter iterColumns = columns.begin() ; iterColumns != columns.end(); iterColumns++)
-	{
-		mColumns.push_back((*iterColumns));
-	}
+TableStyle::TableStyle(const WPXPropertyList &xPropList, const WPXPropertyListVector &columns, const char *psName) : 
+	Style(psName),
+        mPropList(xPropList),
+        mColumns(columns)
+{
 }
 
 TableStyle::~TableStyle()
 {
-	typedef vector<TableCellStyle *>::iterator TCSVIter;
+	typedef std::vector<TableCellStyle *>::iterator TCSVIter;
 	for (TCSVIter iterTableCellStyles = mTableCellStyles.begin() ; iterTableCellStyles != mTableCellStyles.end(); iterTableCellStyles++)
 		delete(*iterTableCellStyles);
 
 }
 
-void TableStyle::write(Reference < XDocumentHandler > &xHandler) const
+void TableStyle::write(DocumentHandler &xHandler) const
 {
 	TagOpenElement styleOpen("style:style");
 	styleOpen.addAttribute("style:name", getName());
 	styleOpen.addAttribute("style:family", "table");
 	if (getMasterPageName())
-		styleOpen.addAttribute("style:master-page-name", getMasterPageName()->getUTF8());
+		styleOpen.addAttribute("style:master-page-name", getMasterPageName()->cstr());
 	styleOpen.write(xHandler);
 
 	TagOpenElement stylePropertiesOpen("style:properties");
-
-	UTF8String sTableMarginLeft;
-	UTF8String sTableMarginRight;
-	UTF8String sTableAlignment;
-	char *pTableAlignment = NULL;
-	if (miTablePositionBits == WPX_TABLE_POSITION_ALIGN_WITH_LEFT_MARGIN) {
-		sTableAlignment.sprintf("left");
-		sTableMarginLeft.sprintf("0inch");
-	}
-	else if (miTablePositionBits == WPX_TABLE_POSITION_ALIGN_WITH_RIGHT_MARGIN) {
-		sTableAlignment.sprintf("right");
-	}
-	else if (miTablePositionBits == WPX_TABLE_POSITION_CENTER_BETWEEN_MARGINS) {
-		sTableAlignment.sprintf("center");
-	}
- 	else if (miTablePositionBits == WPX_TABLE_POSITION_ABSOLUTE_FROM_LEFT_MARGIN) {
-		sTableAlignment.sprintf("left");
-		sTableMarginLeft.sprintf("%finch", (mfLeftOffset-mfDocumentMarginLeft+mfMarginLeftOffset));
- 	}
-	else if (miTablePositionBits == WPX_TABLE_POSITION_FULL) {
-		sTableAlignment.sprintf("margins");
-		sTableMarginLeft.sprintf("%finch", mfMarginLeftOffset);
-		sTableMarginRight.sprintf("%finch", mfMarginRightOffset);
-	}		
-	stylePropertiesOpen.addAttribute("table:align", sTableAlignment.getUTF8());
-	if (sTableMarginLeft.getUTF8())
-		stylePropertiesOpen.addAttribute("fo:margin-left", sTableMarginLeft.getUTF8());
-	if (sTableMarginRight.getUTF8())
-		stylePropertiesOpen.addAttribute("fo:margin-right", sTableMarginRight.getUTF8());
-
- 	float fTableWidth = 0;
- 	typedef vector<WPXColumnDefinition>::const_iterator CDVIter;
- 	for (CDVIter iterColumns2 = mColumns.begin() ; iterColumns2 != mColumns.end(); iterColumns2++)
- 	{
- 		fTableWidth += (*iterColumns2).m_width;
- 	}
-	UTF8String sTableWidth;
-	sTableWidth.sprintf("%finch", fTableWidth);
-	stylePropertiesOpen.addAttribute("style:width", sTableWidth.getUTF8());
+        if (mPropList["table:align"])
+                stylePropertiesOpen.addAttribute("table:align", mPropList["table:align"]->getStr());
+	if (mPropList["fo:margin-left"])
+		stylePropertiesOpen.addAttribute("fo:margin-left", mPropList["fo:margin-left"]->getStr());
+	if (mPropList["fo:margin-right"])
+		stylePropertiesOpen.addAttribute("fo:margin-right", mPropList["fo:margin-right"]->getStr());
+	if (mPropList["style:width"])
+		stylePropertiesOpen.addAttribute("style:width", mPropList["style:width"]->getStr());
 	stylePropertiesOpen.write(xHandler);
 
-	xHandler->endElement(OUString::createFromAscii("style:properties"));
-
-	xHandler->endElement(OUString::createFromAscii("style:style"));
-
-		 
-// 	if (getMasterPageName()) {
-// 		xHandler->endElement(OUString::createFromAscii("<style:style style:name=\"%s\" style:family=\"%s\" style:master-page-name=\"%s\"><style:properties table:align=\"%s\" %s %s style:width=\"%finch\"/></style:style>\n", getName(), "table", getMasterPageName()->getUTF8(), pTableAlignment, psTableMarginLeft, psTableMarginRight, fTableWidth);
-// 	}
-// 	else {
-// 		xHandler->endElement(OUString::createFromAscii("<style:style style:name=\"%s\" style:family=\"%s\"><style:properties table:align=\"%s\" %s %s style:width=\"%finch\"/></style:style>\n", getName(), "table", pTableAlignment, psTableMarginLeft, psTableMarginRight, fTableWidth);
-// 	}
+	xHandler.endElement("style:properties");
 
+	xHandler.endElement("style:style");
+		
 	int i=1;
-	typedef vector<WPXColumnDefinition>::const_iterator CDVIter;
-	for (CDVIter iterColumns = mColumns.begin() ; iterColumns != mColumns.end(); iterColumns++)
+        WPXPropertyListVector::Iter j(mColumns);
+	for (j.rewind(); j.next();)
 	{
 		TagOpenElement styleOpen("style:style");
-		UTF8String sColumnName;
-		sColumnName.sprintf("%s.Column%i", (const char *)getName(), i);
-		styleOpen.addAttribute("style:name", sColumnName.getUTF8());
+		WPXString sColumnName;
+		sColumnName.sprintf("%s.Column%i", getName().cstr(), i);
+		styleOpen.addAttribute("style:name", sColumnName);
 		styleOpen.addAttribute("style:family", "table-column");
 		styleOpen.write(xHandler);
 
-		TagOpenElement stylePropertiesOpen("style:properties");
-		UTF8String sColumnWidth;
-		sColumnWidth.sprintf("%finch", (*iterColumns).m_width);
-		stylePropertiesOpen.addAttribute("style:column-width", sColumnWidth.getUTF8());
-		stylePropertiesOpen.write(xHandler);
-		xHandler->endElement(OUString::createFromAscii("style:properties"));
+                xHandler.startElement("style:properties", j());
+		xHandler.endElement("style:properties");
 
-		xHandler->endElement(OUString::createFromAscii("style:style"));
+		xHandler.endElement("style:style");
 
-//xHandler->endElement(OUString::createFromAscii("<style:style style:name=\"%s.Column%i\" style:family=\"%s\"><style:properties style:column-width=\"%finch\"/></style:style>\n", getName(), i, "table-column", (*iter).m_width);
 		i++;
 	}
 
-	typedef vector<TableCellStyle *>::const_iterator TCSVIter;
+	typedef std::vector<TableRowStyle *>::const_iterator TRSVIter;
+	for (TRSVIter iterTableRow = mTableRowStyles.begin() ; iterTableRow != mTableRowStyles.end(); iterTableRow++)
+		(*iterTableRow)->write(xHandler);
+
+	typedef std::vector<TableCellStyle *>::const_iterator TCSVIter;
 	for (TCSVIter iterTableCell = mTableCellStyles.begin() ; iterTableCell != mTableCellStyles.end(); iterTableCell++)
 		(*iterTableCell)->write(xHandler);
 }
Index: writerperfect/source/filter/TableStyle.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/TableStyle.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.3
diff -u -r1.1 -r1.1.2.3
--- writerperfect/source/filter/TableStyle.hxx	5 Aug 2004 17:44:45 -0000	1.1
+++ writerperfect/source/filter/TableStyle.hxx	8 Feb 2005 18:55:21 -0000	1.1.2.3
@@ -2,6 +2,7 @@
  * needed at the head of an OO document.
  *
  * Copyright (C) 2002-2003 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
  * 
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -32,48 +33,42 @@
 #include "Style.hxx"
 #include "WriterProperties.hxx"
 
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
-
 class DocumentElement;
+class DocumentHandler;
 
 class TableCellStyle : public Style
 {
 public:
-	TableCellStyle(const float fLeftBorderThickness, const float fRightBorderThickness, 
-		       const float fTopBorderThickness, const float fBottomBorderThickness, 
-		       const RGBSColor *pFgColor, const RGBSColor *pBgColor, const char *psName);
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
+	TableCellStyle(const WPXPropertyList &xPropList, const char *psName);
+	virtual void write(DocumentHandler &xHandler) const;
+private:
+        WPXPropertyList mPropList;
+};
+
+class TableRowStyle : public Style
+{
+public:
+	TableRowStyle(const WPXPropertyList &propList, const char *psName);
+	virtual void write(DocumentHandler &xHandler) const;
 private:
-	float mfLeftBorderThickness;
-	float mfRightBorderThickness;
-	float mfTopBorderThickness;
-	float mfBottomBorderThickness;
-	RGBSColor m_fgColor;
-	RGBSColor m_bgColor;
+        WPXPropertyList mPropList;
 };
 
 class TableStyle : public Style, public TopLevelElementStyle
 {
- public:
-	TableStyle(const float fDocumentMarginLeft, const float fDocumentMarginRight, 
-		   const float fMarginLeftOffset, const float fMarginRightOffset,
-		   const uint8_t iTablePositionBits, const float fLeftOffset, 
-		   const vector < WPXColumnDefinition > &columns, 
-		   const char *psName);
+public:
+	TableStyle(const WPXPropertyList &xPropList, const WPXPropertyListVector &columns, const char *psName);
 	~TableStyle();
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
-	const int getNumColumns() const { return miNumColumns; }
+	virtual void write(DocumentHandler &xHandler) const;
+	const int getNumColumns() const { return mColumns.count(); }
 	void addTableCellStyle(TableCellStyle *pTableCellStyle) { mTableCellStyles.push_back(pTableCellStyle); }
 	int getNumTableCellStyles() { return mTableCellStyles.size(); }
+	void addTableRowStyle(TableRowStyle *pTableRowStyle) { mTableRowStyles.push_back(pTableRowStyle); }
+	int getNumTableRowStyles() { return mTableRowStyles.size(); }
 private:	
-	float mfDocumentMarginLeft, mfDocumentMarginRight;
-	float mfMarginLeftOffset, mfMarginRightOffset;
-	vector< WPXColumnDefinition > mColumns;
-	unsigned int miTablePositionBits;
-	float mfLeftOffset;
-	vector<TableCellStyle *> mTableCellStyles;
-	int miNumColumns;
+        WPXPropertyList mPropList;
+	WPXPropertyListVector mColumns;
+	std::vector<TableCellStyle *> mTableCellStyles;
+	std::vector<TableRowStyle *> mTableRowStyles;
 };
-
 #endif
Index: writerperfect/source/filter/TextRunStyle.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/TextRunStyle.cxx,v
retrieving revision 1.1
retrieving revision 1.1.2.2
diff -u -r1.1 -r1.1.2.2
--- writerperfect/source/filter/TextRunStyle.cxx	5 Aug 2004 17:44:45 -0000	1.1
+++ writerperfect/source/filter/TextRunStyle.cxx	7 Feb 2005 18:33:52 -0000	1.1.2.2
@@ -2,7 +2,9 @@
  * (e.g.: a paragraph might be bold) that is needed at the head of an OO
  * document.
  *
- * Copyright (C) 2002-2003 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2004 Net Integration Technologies, Inc. (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -29,220 +31,104 @@
 #include "TextRunStyle.hxx"
 #include "WriterProperties.hxx"
 #include "DocumentElement.hxx"
+
 #ifdef _MSC_VER
 #include <minmax.h>
 #endif
 
-using namespace ::rtl;
-using rtl::OUString;
-
-ParagraphStyle::ParagraphStyle(const uint8_t iParagraphJustification,
-			       const float fMarginLeft, const float fMarginRight, const float fTextIndent,
-			       const float fLineSpacing, const float fSpacingAfterParagraph,
-			       const bool bColumnBreak, const bool bPageBreak,
-			       const char *psName, const char *psParentName) :
-	Style(psName),
-	msParentName(psParentName),
-	mpsListStyleName(NULL),
-	mfMarginLeft(fMarginLeft),
-	mfMarginRight(fMarginRight),
-	mfTextIndent(fTextIndent),
-	mfLineSpacing(fLineSpacing),
-	mfSpacingAfterParagraph(fSpacingAfterParagraph),
-	miParagraphJustification(iParagraphJustification),
-	mbColumnBreak(bColumnBreak),
-	mbPageBreak(bPageBreak)
+ParagraphStyle::ParagraphStyle(WPXPropertyList *pPropList, const WPXPropertyListVector &xTabStops, const WPXString &sName) :
+	mpPropList(pPropList),
+	mxTabStops(xTabStops),
+	msName(sName)
 {
 }
 
 ParagraphStyle::~ParagraphStyle()
 {
-	if (mpsListStyleName)
-		delete mpsListStyleName;
+	delete mpPropList;
 }
 
-void ParagraphStyle::write(Reference < XDocumentHandler > &xHandler) const
+void ParagraphStyle::write(DocumentHandler &xHandler) const
 {
 	WRITER_DEBUG_MSG(("Writing a paragraph style..\n"));
-	TagOpenElement styleOpen("style:style");
-	styleOpen.addAttribute("style:name", getName());
-	styleOpen.addAttribute("style:family", "paragraph");
-	styleOpen.addAttribute("style:parent-style-name", msParentName);
-	if (getMasterPageName())
-		styleOpen.addAttribute("style:master-page-name", getMasterPageName()->getUTF8());
-	if (mpsListStyleName)
-		styleOpen.addAttribute("style:list-style-name", mpsListStyleName->getUTF8());
-	styleOpen.write(xHandler);
-
-	TagOpenElement stylePropertiesOpen("style:properties");
-	// margin properties
-	if (mfMarginLeft != 0.0f || mfMarginRight != 0.0f || mfTextIndent != 0.0f)
-	{
-		UTF8String sMarginLeft;
-		sMarginLeft.sprintf("%finch", mfMarginLeft);
-		UTF8String sMarginRight;
-		sMarginRight.sprintf("%finch", mfMarginRight);
-		UTF8String sTextIndent;
-		sTextIndent.sprintf("%finch", mfTextIndent);
-		stylePropertiesOpen.addAttribute("fo:margin-left", sMarginLeft.getUTF8());
-		stylePropertiesOpen.addAttribute("fo:margin-right", sMarginRight.getUTF8());
-		stylePropertiesOpen.addAttribute("fo:text-indent", sTextIndent.getUTF8());
-	}
-	// line spacing
-	if (mfLineSpacing != 1.0f) {
-		UTF8String sLineSpacing;
-		sLineSpacing.sprintf("%.2f%%", mfLineSpacing*100.0f);
-		stylePropertiesOpen.addAttribute("fo:line-height", sLineSpacing.getUTF8());
-	}
-	if (mfSpacingAfterParagraph != 0.0f) {
-		UTF8String sSpacingAfterParagraph;
-		sSpacingAfterParagraph.sprintf("%finch", mfSpacingAfterParagraph);
-		UTF8String sSpacingBeforeParagraph;
-		sSpacingBeforeParagraph.sprintf("%finch", 0.0f);
-		stylePropertiesOpen.addAttribute("fo:margin-top", sSpacingBeforeParagraph.getUTF8());
-		stylePropertiesOpen.addAttribute("fo:margin-bottom", sSpacingAfterParagraph.getUTF8());
-	}
-
-	// column break
-	if (mbColumnBreak) {
-		stylePropertiesOpen.addAttribute("fo:break-before", "column");
-	}
 
-	if (mbPageBreak) {
-		stylePropertiesOpen.addAttribute("fo:break-before", "page");
-	}
-
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Adding justification style props: %i\n", miParagraphJustification));
-	switch (miParagraphJustification)
-		{
-		case WPX_PARAGRAPH_JUSTIFICATION_LEFT:
-			// doesn't require a paragraph prop - it is the default, but, like, whatever
-			stylePropertiesOpen.addAttribute("fo:text-align", "left");
-			break;
-		case WPX_PARAGRAPH_JUSTIFICATION_CENTER:
-			stylePropertiesOpen.addAttribute("fo:text-align", "center");
-			break;
-		case WPX_PARAGRAPH_JUSTIFICATION_RIGHT:
-			stylePropertiesOpen.addAttribute("fo:text-align", "end");
-			break;
-		case WPX_PARAGRAPH_JUSTIFICATION_FULL:
-			stylePropertiesOpen.addAttribute("fo:text-align", "justify");
-			break;
-		case WPX_PARAGRAPH_JUSTIFICATION_FULL_ALL_LINES:
-			stylePropertiesOpen.addAttribute("fo:text-align", "justify");
-			stylePropertiesOpen.addAttribute("fo:text-align-last", "justify");
-			break;
-	}
-	stylePropertiesOpen.addAttribute("style:justify-single-word", "false");
-	stylePropertiesOpen.write(xHandler);
+        WPXPropertyList propList;
+	propList.insert("style:name", msName.cstr());
+	propList.insert("style:family", "paragraph");
+	propList.insert("style:parent-style-name", (*mpPropList)["style:parent-style-name"]->getStr());
+	if ((*mpPropList)["style:master-page-name"])
+		propList.insert("style:master-page-name", (*mpPropList)["style:master-page-name"]->getStr());
+        xHandler.startElement("style:style", propList);
+
+        propList.clear();
+	WPXPropertyList::Iter i((*mpPropList));
+	for (i.rewind(); i.next(); )
+	{
+                if (strcmp(i.key(), "style:list-style-name") == 0)
+                        propList.insert("style:list-style-name", i()->getStr());
+		if (strcmp(i.key(), "fo:margin-left") == 0)
+			propList.insert("fo:margin-left", i()->getStr());
+		if (strcmp(i.key(), "fo:margin-right") == 0)
+			propList.insert("fo:margin-right", i()->getStr());
+		if (strcmp(i.key(), "fo:text-indent") == 0)
+			propList.insert("fo:text-indent", i()->getStr());
+		if (strcmp(i.key(), "fo:margin-top") == 0)
+			propList.insert("fo:margin-top", i()->getStr());
+		if (strcmp(i.key(), "fo:margin-bottom") == 0)
+			propList.insert("fo:margin-bottom", i()->getStr());
+		if (strcmp(i.key(), "fo:line-height") == 0)
+			propList.insert("fo:line-height", i()->getStr());
+		if (strcmp(i.key(), "fo:break-before") == 0) 
+			propList.insert("fo:break-before", i()->getStr());
+		if (strcmp(i.key(), "fo:text-align") == 0) 
+			propList.insert("fo:text-align", i()->getStr());
+                if (strcmp(i.key(), "fo:text-align-last") == 0)
+                        propList.insert("fo:text-align-last", i()->getStr());
+	}
+	
+	propList.insert("style:justify-single-word", "false");
+	xHandler.startElement("style:properties", propList);
+
+        if (mxTabStops.count() > 0) 
+        {
+                TagOpenElement tabListOpen("style:tab-stops");
+                tabListOpen.write(xHandler);
+                WPXPropertyListVector::Iter i(mxTabStops);
+                for (i.rewind(); i.next();)
+                {
+                        TagOpenElement tabStopOpen("style:tab-stop");
+                        
+                        WPXPropertyList::Iter j(i());
+                        for (j.rewind(); j.next(); )
+                        {
+                                tabStopOpen.addAttribute(j.key(), j()->getStr().cstr());			
+                        }
+                        tabStopOpen.write(xHandler);
+                        xHandler.endElement("style:tab-stop");
+                }
+                xHandler.endElement("style:tab-stops");
+        }
 
-	xHandler->endElement(OUString::createFromAscii("style:properties"));
-	xHandler->endElement(OUString::createFromAscii("style:style"));
+	xHandler.endElement("style:properties");
+	xHandler.endElement("style:style");
 }
 
-SpanStyle::SpanStyle(const uint32_t iTextAttributeBits, const char *pFontName, const float fFontSize,
-					 const RGBSColor *pFontColor, const RGBSColor *pHighlightColor, const char *psName) :
+SpanStyle::SpanStyle(const char *psName, const WPXPropertyList &xPropList) :
 	Style(psName),
-	miTextAttributeBits(iTextAttributeBits),
-	msFontName(pFontName),
-	mfFontSize(fFontSize),
-	m_fontColor(pFontColor->m_r,pFontColor->m_g,pFontColor->m_b,pFontColor->m_s),
-	m_highlightColor((pHighlightColor?pHighlightColor->m_r:0xff), (pHighlightColor?pHighlightColor->m_g:0xff),
-					 (pHighlightColor?pHighlightColor->m_b:0xff), (pHighlightColor?pHighlightColor->m_s:0xff))
+        mPropList(xPropList)
 {
 }
 
-void SpanStyle::write(Reference < XDocumentHandler > &xHandler) const
+void SpanStyle::write(DocumentHandler &xHandler) const 
 {
 	WRITER_DEBUG_MSG(("Writing a span style..\n"));
-	TagOpenElement styleOpen("style:style");
-	styleOpen.addAttribute("style:name", getName());
-	styleOpen.addAttribute("style:family", "text");
-	styleOpen.write(xHandler);
-
-	TagOpenElement stylePropertiesOpen("style:properties");
- 	_addTextProperties(&stylePropertiesOpen);
-	stylePropertiesOpen.write(xHandler);
+        WPXPropertyList styleOpenList;    
+	styleOpenList.insert("style:name", getName());
+	styleOpenList.insert("style:family", "text");
+        xHandler.startElement("style:style", styleOpenList);
 
-	xHandler->endElement(OUString::createFromAscii("style:properties"));
-	xHandler->endElement(OUString::createFromAscii("style:style"));
-}
-
-void SpanStyle::_addTextProperties(TagOpenElement *pStylePropertiesOpenElement) const
-{
- 	if (miTextAttributeBits & WPX_SUPERSCRIPT_BIT) {
-		UTF8String sSuperScript;
-		sSuperScript.sprintf("super %s", IMP_DEFAULT_SUPER_SUB_SCRIPT);
-		pStylePropertiesOpenElement->addAttribute("style:text-position", sSuperScript.getUTF8());
-	}
- 	if (miTextAttributeBits & WPX_SUBSCRIPT_BIT) {
-		UTF8String sSubScript;
-		sSubScript.sprintf("sub %s", IMP_DEFAULT_SUPER_SUB_SCRIPT);
-		pStylePropertiesOpenElement->addAttribute("style:text-position", sSubScript.getUTF8());
-	}
-	if (miTextAttributeBits & WPX_ITALICS_BIT) {
-		pStylePropertiesOpenElement->addAttribute("fo:font-style", "italic");
-	}
-	if (miTextAttributeBits & WPX_BOLD_BIT) {
-		pStylePropertiesOpenElement->addAttribute("fo:font-weight", "bold");
-	}
-	if (miTextAttributeBits & WPX_STRIKEOUT_BIT) {
-		pStylePropertiesOpenElement->addAttribute("style:text-crossing-out", "single-line");
-	}
- 	if (miTextAttributeBits & WPX_UNDERLINE_BIT) {
-		pStylePropertiesOpenElement->addAttribute("style:text-underline", "single");
-	}
-	if (miTextAttributeBits & WPX_DOUBLE_UNDERLINE_BIT) {
-		pStylePropertiesOpenElement->addAttribute("style:text-underline", "double");
-	}
-	if (miTextAttributeBits & WPX_OUTLINE_BIT) {
-		pStylePropertiesOpenElement->addAttribute("style:text-outline", "true");
-	}
-	if (miTextAttributeBits & WPX_SMALL_CAPS_BIT) {
-		pStylePropertiesOpenElement->addAttribute("fo:font-variant", "small-caps");
-	}
-	if (miTextAttributeBits & WPX_BLINK_BIT) {
-		pStylePropertiesOpenElement->addAttribute("style:text-blinking", "true");
-	}
-	if (miTextAttributeBits & WPX_SHADOW_BIT) {
-		pStylePropertiesOpenElement->addAttribute("fo:text-shadow", "1pt 1pt");
-	}
-
-	pStylePropertiesOpenElement->addAttribute("style:font-name", msFontName.getUTF8());
-	UTF8String sFontSize;
-	sFontSize.sprintf("%ipt", (int)mfFontSize);
-	pStylePropertiesOpenElement->addAttribute("fo:font-size", sFontSize.getUTF8());
-
-	if (!(miTextAttributeBits & WPX_REDLINE_BIT))
-	// Here we give the priority to the redline bit over the font color. This is how WordPerfect behaves:
-	// redline overrides font color even if the color is changed when redline was already defined.
-	// When redline finishes, the color is back.
-	{
-		UTF8String sFontColor;
-		float fontShading = (float)((float)m_fontColor.m_s/100.0f); //convert the percents to float between 0 and 1
-		// Mix fontShading amount of given color with (1-fontShading) of White (#ffffff)
-		int fontRed = (int)0xFF + (int)((float)m_fontColor.m_r*fontShading) - (int)((float)0xFF*fontShading);
-		int fontGreen = (int)0xFF + (int)((float)m_fontColor.m_g*fontShading) - (int)((float)0xFF*fontShading);
-		int fontBlue = (int)0xFF + (int)((float)m_fontColor.m_b*fontShading) - (int)((float)0xFF*fontShading);
-		sFontColor.sprintf("#%.2x%.2x%.2x", fontRed, fontGreen, fontBlue);
-		pStylePropertiesOpenElement->addAttribute("fo:color", sFontColor.getUTF8());
-	}
-	else // redlining applies
-	{
-		pStylePropertiesOpenElement->addAttribute("fo:color", "#ff3333"); // #ff3333 = a nice bright red
-	}
-
-	if (m_highlightColor.m_s != 0xff)
-	{
-		UTF8String sHighlightColor;
-		float highlightShading = (float)((float)m_highlightColor.m_s/100.0f);
-		int highlightRed = (int)0xFF + (int)((float)m_highlightColor.m_r*highlightShading) - (int)((float)0xFF*highlightShading);
-		int highlightGreen = (int)0xFF + (int)((float)m_highlightColor.m_g*highlightShading) - (int)((float)0xFF*highlightShading);
-		int highlightBlue = (int)0xFF + (int)((float)m_highlightColor.m_b*highlightShading) - (int)((float)0xFF*highlightShading);
-		sHighlightColor.sprintf("#%.2x%.2x%.2x", highlightRed, highlightGreen, highlightBlue);
-		pStylePropertiesOpenElement->addAttribute("style:text-background-color", sHighlightColor.getUTF8());
-	}
-	else
-		pStylePropertiesOpenElement->addAttribute("style:text-background-color", "transparent");
+        xHandler.startElement("style:properties", mPropList);
 
+	xHandler.endElement("style:properties");
+	xHandler.endElement("style:style");
 }
Index: writerperfect/source/filter/TextRunStyle.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/TextRunStyle.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.2
diff -u -r1.1 -r1.1.2.2
--- writerperfect/source/filter/TextRunStyle.hxx	5 Aug 2004 17:44:45 -0000	1.1
+++ writerperfect/source/filter/TextRunStyle.hxx	7 Feb 2005 18:33:52 -0000	1.1.2.2
@@ -3,6 +3,7 @@
  * document.
  *
  * Copyright (C) 2002-2003 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -32,56 +33,31 @@
 
 #include "Style.hxx"
 
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
-
 class TagOpenElement;
 class DocumentElement;
+class DocumentHandler;
 
-class SpanStyle : public Style
+class ParagraphStyle
 {
 public:
-	SpanStyle(const uint32_t iTextAttributeBits, const char *pFontName, const float fFontSize, const RGBSColor *pFontColor,
-		  const RGBSColor *pHighlightColor, const char *psName);
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
-	const int getTextAttributeBits() const { return miTextAttributeBits; }
-	const UTF8String & getFontName() const { return msFontName; }
-	const float getFontSize() const { return mfFontSize; }
-
-	void _addTextProperties(TagOpenElement *pStylePropertiesOpenElement) const;
-
+	ParagraphStyle(WPXPropertyList *propList, const WPXPropertyListVector &tabStops, const WPXString &sName);
+	virtual ~ParagraphStyle();
+	virtual void write(DocumentHandler &xHandler) const;
+	WPXString getName() const { return msName; }
 private:
-	int miTextAttributeBits;
-	UTF8String msFontName;
-	float mfFontSize;
-	RGBSColor m_fontColor;
-	RGBSColor m_highlightColor;
+	WPXPropertyList *mpPropList;
+	WPXPropertyListVector mxTabStops;
+	WPXString msName;
 };
 
-class ParagraphStyle : public Style, public TopLevelElementStyle
+
+class SpanStyle : public Style
 {
 public:
-	ParagraphStyle(const uint8_t iParagraphJustification,
-		       const float fMarginLeft, const float fMarginRight, const float fTextIndent,
-		       const float fLineSpacing, const float fSpacingAfterParagraph,
-		       const bool bColumnBreak, const bool bPageBreak, const char *psName, const char *psParentName);
-
-	virtual ~ParagraphStyle();
-
-	void setListStyleName(UTF8String &sListStyleName) { delete mpsListStyleName ; mpsListStyleName = new UTF8String(sListStyleName); }
-	virtual void write(Reference < XDocumentHandler > &xHandler) const;
-	const virtual bool isParagraphStyle() const { return true; }
+	SpanStyle(const char *psName, const WPXPropertyList &xPropList);
+	virtual void write(DocumentHandler &xHandler) const;
 
 private:
-	UTF8String msParentName;
-	UTF8String *mpsListStyleName;
-	float mfMarginLeft;
-	float mfMarginRight;
-	float mfTextIndent;
-	float mfLineSpacing;
-	float mfSpacingAfterParagraph;
-	uint8_t miParagraphJustification;
-	bool mbColumnBreak;
-	bool mbPageBreak;
+        WPXPropertyList mPropList;
 };
 #endif
Index: writerperfect/source/filter/WordPerfectCollector.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/WordPerfectCollector.cxx,v
retrieving revision 1.3
retrieving revision 1.3.2.4
diff -u -r1.3 -r1.3.2.4
--- writerperfect/source/filter/WordPerfectCollector.cxx	7 Oct 2004 14:27:19 -0000	1.3
+++ writerperfect/source/filter/WordPerfectCollector.cxx	10 Feb 2005 09:31:59 -0000	1.3.2.4
@@ -4,6 +4,7 @@
  *
  * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
  * Copyright (C) 2003-2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -40,16 +41,6 @@
 #include "TableStyle.hxx"
 #include "FilterInternal.hxx"
 #include "WriterProperties.hxx"
-#include "FontMap.hxx"
-
-#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
-#include <com/sun/star/xml/sax/XAttributeList.hpp>
-#endif
-
-using namespace ::rtl;
-using rtl::OUString;
-
-using com::sun::star::xml::sax::XAttributeList;
 
 _WriterDocumentState::_WriterDocumentState() :
 	mbFirstElement(true),
@@ -60,13 +51,11 @@
 {
 }
 
-WordPerfectCollector::WordPerfectCollector() :
+WordPerfectCollector::WordPerfectCollector(WPXInputStream *pInput, DocumentHandler *pHandler) :
+        mpInput(pInput),
+        mpHandler(pHandler),
 	mbUsed(false),
-	miNumStyles(1),
-	miNumSections(0),
-	miCurrentNumColumns(1),
 	mfSectionSpaceAfter(0.0f),
-	miNumTables(0),
 	miNumListStyles(0),
 	mpCurrentContentElements(&mBodyElements),
 	mpCurrentPageSpan(NULL),
@@ -81,7 +70,11 @@
 {
 }
 
-bool WordPerfectCollector::filter(WPXInputStream &input, Reference < XDocumentHandler > &xHandler)
+WordPerfectCollector::~WordPerfectCollector()
+{
+}
+
+bool WordPerfectCollector::filter()
 {
 	// The contract for WordPerfectCollector is that it will only be used once after it is
 	// instantiated
@@ -91,75 +84,63 @@
 	mbUsed = true;
 
 	// parse & write
- 	if (!_parseSourceDocument(input))
+        // WLACH_REFACTORING: Remove these args..
+ 	if (!_parseSourceDocument(*mpInput))
 		return false;
-	if (!_writeTargetDocument(xHandler))
+	if (!_writeTargetDocument(*mpHandler))
 		return false;
 
  	// clean up the mess we made
  	WRITER_DEBUG_MSG(("WriterWordPerfect: Cleaning up our mess..\n"));
 
 	WRITER_DEBUG_MSG(("Destroying the body elements\n"));
-	for (vector<DocumentElement *>::iterator iterBody = mBodyElements.begin(); iterBody != mBodyElements.end(); iterBody++) {
+	for (std::vector<DocumentElement *>::iterator iterBody = mBodyElements.begin(); iterBody != mBodyElements.end(); iterBody++) {
 		delete((*iterBody));
 		(*iterBody) = NULL;
 	}
 
 	WRITER_DEBUG_MSG(("Destroying the styles elements\n"));
-	for (vector<DocumentElement *>::iterator iterStyles = mStylesElements.begin(); iterStyles != mStylesElements.end(); iterStyles++) {
- 		if (!(*iterStyles))
-			WRITER_DEBUG_MSG(("NULL\n"));
-		else
-			(*iterStyles)->print();
+	for (std::vector<DocumentElement *>::iterator iterStyles = mStylesElements.begin(); iterStyles != mStylesElements.end(); iterStyles++) {
  		delete (*iterStyles);
 		(*iterStyles) = NULL; // we may pass over the same element again (in the case of headers/footers spanning multiple pages)
-		                // so make sure we don't do a double del
+				      // so make sure we don't do a double del
 	}
 
 	WRITER_DEBUG_MSG(("Destroying the rest of the styles elements\n"));
-	for (map<UTF8String, Style *, ltstr>::iterator iterTextStyle = mTextStyleHash.begin(); iterTextStyle != mTextStyleHash.end(); iterTextStyle++) {
+	for (std::map<WPXString, ParagraphStyle *, ltstr>::iterator iterTextStyle = mTextStyleHash.begin(); iterTextStyle != mTextStyleHash.end(); iterTextStyle++) {
 		delete(iterTextStyle->second);
 	}
-	for (map<UTF8String, FontStyle *, ltstr>::iterator iterFont = mFontHash.begin(); iterFont != mFontHash.end(); iterFont++) {
+	for (std::map<WPXString, FontStyle *, ltstr>::iterator iterFont = mFontHash.begin(); iterFont != mFontHash.end(); iterFont++) {
 		delete(iterFont->second);
 	}
 
-	for (vector<ListStyle *>::iterator iterListStyles = mListStyles.begin(); iterListStyles != mListStyles.end(); iterListStyles++) {
+	for (std::vector<ListStyle *>::iterator iterListStyles = mListStyles.begin(); iterListStyles != mListStyles.end(); iterListStyles++) {
 		delete((*iterListStyles));
 	}
-	for (vector<SectionStyle *>::iterator iterSectionStyles = mSectionStyles.begin(); iterSectionStyles != mSectionStyles.end(); iterSectionStyles++) {
+	for (std::vector<SectionStyle *>::iterator iterSectionStyles = mSectionStyles.begin(); iterSectionStyles != mSectionStyles.end(); iterSectionStyles++) {
 		delete((*iterSectionStyles));
 	}
-	for (vector<TableStyle *>::iterator iterTableStyles = mTableStyles.begin(); iterTableStyles != mTableStyles.end(); iterTableStyles++) {
+	for (std::vector<TableStyle *>::iterator iterTableStyles = mTableStyles.begin(); iterTableStyles != mTableStyles.end(); iterTableStyles++) {
 		delete((*iterTableStyles));
 	}
 
-	for (vector<PageSpan *>::iterator iterPageSpans = mPageSpans.begin(); iterPageSpans != mPageSpans.end(); iterPageSpans++) {
+	for (std::vector<PageSpan *>::iterator iterPageSpans = mPageSpans.begin(); iterPageSpans != mPageSpans.end(); iterPageSpans++) {
 		delete((*iterPageSpans));
 	}
 
  	return true;
- }
+}
 
 bool WordPerfectCollector::_parseSourceDocument(WPXInputStream &input)
 {
-	// create a header for the preamble + add some default settings to it
+        WPDResult result = WPDocument::parse(&input, static_cast<WPXHLListenerImpl *>(this));
+        if (result != WPD_OK)
+                return false;
 
- 	WRITER_DEBUG_MSG(("WriterWordPerfect: Attempting to process state\n"));
-	bool bRetVal = true;
-	try {
-		WPDocument::parse(&input, static_cast<WPXHLListenerImpl *>(this));
-	}
-	catch (FileException)
-		{
-			WRITER_DEBUG_MSG(("Caught a file exception..\n"));
-			bRetVal = false;
-		}
-
-	return bRetVal;
+	return true;
 }
 
-void WordPerfectCollector::_writeDefaultStyles(Reference < XDocumentHandler > &xHandler)
+void WordPerfectCollector::_writeDefaultStyles(DocumentHandler &xHandler)
 {
 	TagOpenElement stylesOpenElement("office:styles");
 	stylesOpenElement.write(xHandler);
@@ -218,35 +199,16 @@
 
 }
 
-void WordPerfectCollector::_writeContentPreamble(Reference < XDocumentHandler > &xHandler)
+// writes everything up to the automatic styles declarations..
+void WordPerfectCollector::_writeBegin()
 {
-// the old content pre-amble: remove me after a few releases
-	TagOpenElement documentContentOpenElement("office:document-content");
-	documentContentOpenElement.addAttribute("xmlns:office", "http://openoffice.org/2000/office");
-	documentContentOpenElement.addAttribute("xmlns:style", "http://openoffice.org/2000/style");
-	documentContentOpenElement.addAttribute("xmlns:text", "http://openoffice.org/2000/text");
-	documentContentOpenElement.addAttribute("xmlns:table", "http://openoffice.org/2000/table");
-	documentContentOpenElement.addAttribute("xmlns:draw", "http://openoffice.org/2000/draw");
-	documentContentOpenElement.addAttribute("xmlns:fo", "http://www.w3.org/1999/XSL/Format");
-	documentContentOpenElement.addAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
-	documentContentOpenElement.addAttribute("xmlns:number", "http://openoffice.org/2000/datastyle");
-	documentContentOpenElement.addAttribute("xmlns:svg", "http://www.w3.org/2000/svg");
-	documentContentOpenElement.addAttribute("xmlns:chart", "http://openoffice.org/2000/chart");
-	documentContentOpenElement.addAttribute("xmlns:dr3d", "http://openoffice.org/2000/dr3d");
-	documentContentOpenElement.addAttribute("xmlns:math", "http://www.w3.org/1998/Math/MathML");
-	documentContentOpenElement.addAttribute("xmlns:form", "http://openoffice.org/2000/form");
-	documentContentOpenElement.addAttribute("xmlns:script", "http://openoffice.org/2000/script");
-	documentContentOpenElement.addAttribute("office:class", "text");
-	documentContentOpenElement.addAttribute("office:version", "1.0");
-	documentContentOpenElement.write(xHandler);
 }
 
-void WordPerfectCollector::_writeMasterPages(Reference < XDocumentHandler > &xHandler)
+void WordPerfectCollector::_writeMasterPages(DocumentHandler &xHandler)
 {
-	SvXMLAttributeList * pAttrList = new SvXMLAttributeList;
-	Reference < XAttributeList > xBlankAttrList ( pAttrList );
+        WPXPropertyList xBlankAttrList;
 
-	xHandler->startElement(OUString::createFromAscii("office:master-styles"), xBlankAttrList);
+	xHandler.startElement("office:master-styles", xBlankAttrList);
 	int pageNumber = 1;
 	for (int i=0; i<mPageSpans.size(); i++)
 	{
@@ -255,10 +217,10 @@
 		mPageSpans[i]->writeMasterPages(pageNumber, i, bLastPage, xHandler);
 		pageNumber += mPageSpans[i]->getSpan();
 	}
-	xHandler->endElement(OUString::createFromAscii("office:master-styles"));
+	xHandler.endElement("office:master-styles");
 }
 
-void WordPerfectCollector::_writePageMasters(Reference < XDocumentHandler > &xHandler)
+void WordPerfectCollector::_writePageMasters(DocumentHandler &xHandler)
 {
 	int pageNumber = 1;
 	for (int i=0; i<mPageSpans.size(); i++)
@@ -267,307 +229,216 @@
 	}
 }
 
-bool WordPerfectCollector::_writeTargetDocument(Reference < XDocumentHandler > &xHandler)
-{
+bool WordPerfectCollector::_writeTargetDocument(DocumentHandler &xHandler)
+{        
 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Printing out the header stuff..\n"));
- 	SvXMLAttributeList * pAttrList = new SvXMLAttributeList;
-	Reference < XAttributeList > xBlankAttrList ( pAttrList );
+	WPXPropertyList xBlankAttrList;
 
 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Start Document\n"));
-	xHandler->startDocument();
+	mpHandler->startDocument();
 
 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: preamble\n"));
-	_writeContentPreamble(xHandler);
-
- 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Writing out the styles..\n"));
+        WPXPropertyList docContentPropList;
+	docContentPropList.insert("xmlns:office", "http://openoffice.org/2000/office");
+	docContentPropList.insert("xmlns:style", "http://openoffice.org/2000/style");
+	docContentPropList.insert("xmlns:text", "http://openoffice.org/2000/text");
+	docContentPropList.insert("xmlns:table", "http://openoffice.org/2000/table");
+	docContentPropList.insert("xmlns:draw", "http://openoffice.org/2000/draw");
+	docContentPropList.insert("xmlns:fo", "http://www.w3.org/1999/XSL/Format");
+	docContentPropList.insert("xmlns:xlink", "http://www.w3.org/1999/xlink");
+	docContentPropList.insert("xmlns:number", "http://openoffice.org/2000/datastyle");
+	docContentPropList.insert("xmlns:svg", "http://www.w3.org/2000/svg");
+	docContentPropList.insert("xmlns:chart", "http://openoffice.org/2000/chart");
+	docContentPropList.insert("xmlns:dr3d", "http://openoffice.org/2000/dr3d");
+	docContentPropList.insert("xmlns:math", "http://www.w3.org/1998/Math/MathML");
+	docContentPropList.insert("xmlns:form", "http://openoffice.org/2000/form");
+	docContentPropList.insert("xmlns:script", "http://openoffice.org/2000/script");
+	docContentPropList.insert("office:class", "text");
+	docContentPropList.insert("office:version", "1.0");
+        mpHandler->startElement("office:document-content", docContentPropList);
 
 	// write out the font styles
-	xHandler->startElement(OUString::createFromAscii("office:font-decls"), xBlankAttrList);
-	for (map<UTF8String, FontStyle *, ltstr>::iterator iterFont = mFontHash.begin(); iterFont != mFontHash.end(); iterFont++) {
-		iterFont->second->write(xHandler);
+	mpHandler->startElement("office:font-decls", xBlankAttrList);
+	for (std::map<WPXString, FontStyle *, ltstr>::iterator iterFont = mFontHash.begin(); iterFont != mFontHash.end(); iterFont++) {
+		iterFont->second->write(*mpHandler);
 	}
 	TagOpenElement symbolFontOpen("style:font-decl");
 	symbolFontOpen.addAttribute("style:name", "StarSymbol");
 	symbolFontOpen.addAttribute("fo:font-family", "StarSymbol");
 	symbolFontOpen.addAttribute("style:font-charset", "x-symbol");
-	symbolFontOpen.write(xHandler);
-	TagCloseElement symbolFontClose("style:font-decl");
-	symbolFontClose.write(xHandler);
+	symbolFontOpen.write(*mpHandler);
+        mpHandler->endElement("style:font-decl");
 
-	xHandler->endElement(OUString::createFromAscii("office:font-decls"));
+	mpHandler->endElement("office:font-decls");
+
+
+ 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Writing out the styles..\n"));
 
 	// write default styles
-	_writeDefaultStyles(xHandler);
+	_writeDefaultStyles(*mpHandler);
+
+	mpHandler->startElement("office:automatic-styles", xBlankAttrList);
 
-	// write automatic styles: which encompasses quite a bit
-	xHandler->startElement(OUString::createFromAscii("office:automatic-styles"), xBlankAttrList);
-	for (map<UTF8String, Style *, ltstr>::iterator iterTextStyle = mTextStyleHash.begin(); iterTextStyle != mTextStyleHash.end(); iterTextStyle++) {
+	for (std::map<WPXString, ParagraphStyle *, ltstr>::iterator iterTextStyle = mTextStyleHash.begin(); 
+             iterTextStyle != mTextStyleHash.end(); iterTextStyle++) 
+        {
 		// writing out the paragraph styles
-		if (strcmp((iterTextStyle->second)->getName(), "Standard") ||
-		    !(dynamic_cast<ParagraphStyle *>(iterTextStyle->second))) {
+		if (strcmp((iterTextStyle->second)->getName().cstr(), "Standard")) 
+                {
 			// don't write standard paragraph "no styles" style
 			(iterTextStyle->second)->write(xHandler);
 		}
 	}
 
+        // span styles..
+	for (std::map<WPXString, SpanStyle *, ltstr>::iterator iterSpanStyle = mSpanStyleHash.begin(); 
+             iterSpanStyle != mSpanStyleHash.end(); iterSpanStyle++) 
+        {
+                (iterSpanStyle->second)->write(xHandler);
+	}
+
  	// writing out the sections styles
-	for (vector<SectionStyle *>::iterator iterSectionStyles = mSectionStyles.begin(); iterSectionStyles != mSectionStyles.end(); iterSectionStyles++) {
+	for (std::vector<SectionStyle *>::iterator iterSectionStyles = mSectionStyles.begin(); iterSectionStyles != mSectionStyles.end(); iterSectionStyles++) {
 		(*iterSectionStyles)->write(xHandler);
 	}
 
 	// writing out the lists styles
-	for (vector<ListStyle *>::iterator iterListStyles = mListStyles.begin(); iterListStyles != mListStyles.end(); iterListStyles++) {
+	for (std::vector<ListStyle *>::iterator iterListStyles = mListStyles.begin(); iterListStyles != mListStyles.end(); iterListStyles++) {
 		(*iterListStyles)->write(xHandler);
 	}
 
  	// writing out the table styles
-	for (vector<TableStyle *>::iterator iterTableStyles = mTableStyles.begin(); iterTableStyles != mTableStyles.end(); iterTableStyles++) {
+	for (std::vector<TableStyle *>::iterator iterTableStyles = mTableStyles.begin(); iterTableStyles != mTableStyles.end(); iterTableStyles++) {
 		(*iterTableStyles)->write(xHandler);
 	}
 
 	// writing out the page masters
 	_writePageMasters(xHandler);
 
-	xHandler->endElement(OUString::createFromAscii("office:automatic-styles"));
+
+	xHandler.endElement("office:automatic-styles");
 
 	_writeMasterPages(xHandler);
 
  	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Writing out the document..\n"));
  	// writing out the document
-	xHandler->startElement(OUString::createFromAscii("office:body"), xBlankAttrList);
+	xHandler.startElement("office:body", xBlankAttrList);
 
-	for (vector<DocumentElement *>::iterator iterBodyElements = mBodyElements.begin(); iterBodyElements != mBodyElements.end(); iterBodyElements++) {
+	for (std::vector<DocumentElement *>::iterator iterBodyElements = mBodyElements.begin(); iterBodyElements != mBodyElements.end(); iterBodyElements++) {
 		(*iterBodyElements)->write(xHandler);
 	}
  	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Finished writing all doc els..\n"));
 
-	xHandler->endElement(OUString::createFromAscii("office:body"));
-	xHandler->endElement(OUString::createFromAscii("office:document-content"));
+	xHandler.endElement("office:body");
+	xHandler.endElement("office:document-content");
 
-	xHandler->endDocument();
+	xHandler.endDocument();
 
 	return true;
 }
 
-// _requestParagraphRunStyle: returns a paragraph style, if it already exists. creates it, adds it
-// to the list of defined styles, and returns it otherwise.
-ParagraphStyle * WordPerfectCollector::_requestParagraphStyle(const uint8_t iParagraphJustification,
-							      const float fMarginLeft, const float fMarginRight, const float fTextIndent,
-							      const float fLineSpacing, const float fSpacingAfterParagraph,
-							      const bool bColumnBreak, const bool bPageBreak,
-							      const char *pParentName, const char *pName)
-{
-	if (mWriterDocumentState.mbFirstElement && mpCurrentContentElements == &mBodyElements)
-	{
-		WRITER_DEBUG_MSG(("WriterWordPerfect: If.. (mbFirstElement=%i)", mWriterDocumentState.mbFirstElement));
-		ParagraphStyle * pParagraphStyle = new ParagraphStyle(iParagraphJustification,
-								      fMarginLeft, fMarginRight, fTextIndent, fLineSpacing,
-								      fSpacingAfterParagraph, bColumnBreak, bPageBreak, "FS", pParentName);
-
-		UTF8String sParagraphHashKey("P|FS");
-		UTF8String sMasterPageName("Page Style 1");
-		pParagraphStyle->setMasterPageName(sMasterPageName);
-		mTextStyleHash[sParagraphHashKey] = pParagraphStyle;
-		mWriterDocumentState.mbFirstElement = false;
-
-		return pParagraphStyle;
- 	}
-
-	// else.. do the following:
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Else.. (mbFirstElement=%i)", mWriterDocumentState.mbFirstElement));
-
-	UTF8String sParagraphHashKey;
-	sParagraphHashKey.sprintf("P|%s|%i|%f|%f|%f|%f|%f|%i|%i",
-				      pParentName, iParagraphJustification, fMarginLeft, fMarginRight, fTextIndent,
-				      fLineSpacing, fSpacingAfterParagraph, bColumnBreak, bPageBreak);
-	WRITER_DEBUG_MSG(("WriterWordPerfect: P|%s|%i|%f|%f|%f|%f|%f|%i|%i\n",
-					  pParentName, iParagraphJustification, fMarginLeft, fMarginRight, fTextIndent,
-					  fLineSpacing, fSpacingAfterParagraph, bColumnBreak, bPageBreak));
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Paragraph Hash Key: %s\n", sParagraphHashKey.getUTF8()));
-
-	// Get the style
-	ParagraphStyle * pParagraphStyle = NULL;
-	if (mTextStyleHash.find(sParagraphHashKey) == mTextStyleHash.end()) {
-		// allocate a new paragraph style
-		const char *pFinalStyleName = NULL;
-		UTF8String sName;
-		sName.sprintf("S%i", miNumStyles); // have to define here so it doesn't go out of scope
-		if (pName != NULL)
-			pFinalStyleName = pName;
-		else {
-			pFinalStyleName = sName.getUTF8();
-		}
-		WRITER_DEBUG_MSG(("WriterWordPerfect: final paragraph style name: %s\n", pFinalStyleName));
-
-		pParagraphStyle = new ParagraphStyle(iParagraphJustification,
-						     fMarginLeft, fMarginRight, fTextIndent, fLineSpacing,
-						     fSpacingAfterParagraph, bColumnBreak, bPageBreak, pFinalStyleName, pParentName);
-
-		miNumStyles++;
-		mTextStyleHash[sParagraphHashKey] = pParagraphStyle;
-		WRITER_DEBUG_MSG(("WriterWordPerfect: Successfully added to hash, returning it\n"));
-	}
-	else
-	{
-		pParagraphStyle = static_cast<ParagraphStyle *>(mTextStyleHash.find(sParagraphHashKey)->second);
-	}
-
-	return pParagraphStyle;
-}
-
 
-// _requestParagraphRunStyle: returns a paragraph style, if it already exists. creates it, adds it
-// to the list of defined styles, and returns it otherwise.
-ParagraphStyle * WordPerfectCollector::_requestListParagraphStyle(const ListStyle * pListStyle, const uint8_t iParagraphJustification,
-									const float fMarginLeft, const float fMarginRight, const float fTextIndent,
-									const float fLineSpacing, const float fSpacingAfterParagraph)
+WPXString propListToStyleKey(const WPXPropertyList & xPropList)
 {
-	if (mWriterDocumentState.mbFirstElement && mpCurrentContentElements == &mBodyElements)
-	{
-		WRITER_DEBUG_MSG(("WriterWordPerfect: If.. (mbFirstElement=%i)", mWriterDocumentState.mbFirstElement));
-
-		ParagraphStyle * pListParagraphStyle = new ParagraphStyle(iParagraphJustification,
-									  fMarginLeft, fMarginRight, fTextIndent,
-									  fLineSpacing, fSpacingAfterParagraph, false, false,
-									  "FS1", "Standard");
-
-		UTF8String sParagraphHashKey("P|ListFS");
-		UTF8String sMasterPageName("Page Style 1");
-		pListParagraphStyle->setMasterPageName(sMasterPageName);
-		mTextStyleHash[sParagraphHashKey] = pListParagraphStyle;
-		mWriterDocumentState.mbFirstElement = false;
-
-		return pListParagraphStyle;
- 	}
-
-	UTF8String sParagraphHashKey;
-	sParagraphHashKey.sprintf("P|%s|%i|%f|%f|%f|%f|%f", (const char *)pListStyle->getName(),
-				     iParagraphJustification, fMarginLeft, fMarginRight, fTextIndent,
-				     fLineSpacing, fSpacingAfterParagraph);
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Paragraph Hash Key: %s\n", sParagraphHashKey.getUTF8()));
-
-	// Get the style
-	ParagraphStyle * pListParagraphStyle = NULL;
-	if (mTextStyleHash.find(sParagraphHashKey) == mTextStyleHash.end()) {
-		// allocate a new paragraph style
-		UTF8String sName;
-		sName.sprintf("S%i", miNumStyles);
-		UTF8String sListStyleName(pListStyle->getName());
-
-		pListParagraphStyle = new ParagraphStyle(iParagraphJustification,
-							 fMarginLeft, fMarginRight, fTextIndent,
-							 fLineSpacing, fSpacingAfterParagraph, false, false,
-							 sName.getUTF8(), "Standard");
-
-		pListParagraphStyle->setListStyleName(sListStyleName);
-		miNumStyles++;
-		mTextStyleHash[sParagraphHashKey] = pListParagraphStyle;
-	}
+        WPXString sKey;
+        WPXPropertyList::Iter i(xPropList);
+        for (i.rewind(); i.next(); )
+        {
+                WPXString sProp;
+                sProp.sprintf("[%s:%s]", i.key(), i()->getStr().cstr());
+                sKey.append(sProp);
+        }
+
+        return sKey;
+}
+
+WPXString getParagraphStyleKey(const WPXPropertyList & xPropList, const WPXPropertyListVector & xTabStops)
+{
+        WPXString sKey = propListToStyleKey(xPropList);
+        
+        WPXString sTabStops;
+        sTabStops.sprintf("[num-tab-stops:%i]", xTabStops.count());
+        WPXPropertyListVector::Iter i(xTabStops);
+        for (i.rewind(); i.next();)
+        {
+                sTabStops.append(propListToStyleKey(i()));
+        }
+        sKey.append(sTabStops);
 
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Successfully added to hash, returning it\n"));
-
-	return static_cast<ParagraphStyle *>(mTextStyleHash.find(sParagraphHashKey)->second);
+        return sKey;
 }
 
 // _allocateFontName: add a (potentially mapped) font style to the hash if it's not already there, do nothing otherwise
-void WordPerfectCollector::_allocateFontName(const UTF8String & sFontName)
+void WordPerfectCollector::_allocateFontName(const WPXString & sFontName)
 {
 	if (mFontHash.find(sFontName) == mFontHash.end())
 	{
-		FontStyle *pFontStyle = new FontStyle(sFontName.getUTF8(), sFontName.getUTF8());
+		FontStyle *pFontStyle = new FontStyle(sFontName.cstr(), sFontName.cstr());
 		mFontHash[sFontName] = pFontStyle;
 	}
 }
 
-void WordPerfectCollector::openPageSpan(const int span, const bool isLastPageSpan,
-					const float formLength, const float formWidth,
-					const WPXFormOrientation formOrientation,
-					const float marginLeft, const float marginRight,
-					const float marginTop, const float marginBottom)
+void WordPerfectCollector::openPageSpan(const WPXPropertyList &propList)
 {
-	PageSpan *pPageSpan = new PageSpan(span, formLength, formWidth, formOrientation, marginLeft, marginRight, marginTop, marginBottom);
+	PageSpan *pPageSpan = new PageSpan(propList);
 	mPageSpans.push_back(pPageSpan);
 	mpCurrentPageSpan = pPageSpan;
 }
 
-void WordPerfectCollector::openHeaderFooter(const WPXHeaderFooterType headerFooterType, const WPXHeaderFooterOccurence headerFooterOccurence)
+void WordPerfectCollector::openHeader(const WPXPropertyList &propList)
 {
-	vector<DocumentElement *> * pHeaderFooterContentElements = new vector<DocumentElement *>;
+	std::vector<DocumentElement *> * pHeaderFooterContentElements = new std::vector<DocumentElement *>;
 
-	if (headerFooterType == HEADER)
-	{
-		switch (headerFooterOccurence)
-		{
-		case ALL:
-		case ODD:
-			WRITER_DEBUG_MSG(("WriterWordPerfect: Opening h_all or h_odd\n"));
-			mpCurrentPageSpan->setHeaderContent(pHeaderFooterContentElements);
-			break;
-		case EVEN:
-			WRITER_DEBUG_MSG(("WriterWordPerfect: Opening h_even\n"));
-			mpCurrentPageSpan->setHeaderLeftContent(pHeaderFooterContentElements);
-			break;
-		}
-	}
-	else
-	{
-		switch (headerFooterOccurence)
-		{
-		case ALL:
-		case ODD:
-			WRITER_DEBUG_MSG(("WriterWordPerfect: Opening f_all or f_odd\n"));
-			mpCurrentPageSpan->setFooterContent(pHeaderFooterContentElements);
-			break;
-		case EVEN:
-			WRITER_DEBUG_MSG(("WriterWordPerfect: Opening f_even\n"));
-			mpCurrentPageSpan->setFooterLeftContent(pHeaderFooterContentElements);
-			break;
-		}
-	}
+	if (propList["libwpd:occurence"]->getStr() == "even")
+                mpCurrentPageSpan->setHeaderLeftContent(pHeaderFooterContentElements);
+        else
+                mpCurrentPageSpan->setHeaderContent(pHeaderFooterContentElements);
 
 	mpCurrentContentElements = pHeaderFooterContentElements;
 }
 
-void WordPerfectCollector::closeHeaderFooter(const WPXHeaderFooterType headerFooterType,
-					     const WPXHeaderFooterOccurence headerFooterOccurence)
+void WordPerfectCollector::closeHeader()
 {
 	mpCurrentContentElements = &mBodyElements;
 }
 
-void WordPerfectCollector::openSection(const unsigned int numColumns, const float spaceAfter)
+void WordPerfectCollector::openFooter(const WPXPropertyList &propList)
 {
-	// libwpd pushes a section unconditionally to the listener (us) when it starts
-	// sending the document message. this is primarily for AbiWord's convenience: its document
-	// model requires that we open a section before writing actual content (e.g.: paragraphs, tables).
-	// Since we don't actually want to start a new section unless the columns have changed in OOo,
-	// we just "fake" a section opening in that case
+	std::vector<DocumentElement *> * pHeaderFooterContentElements = new std::vector<DocumentElement *>;
 
-	if (miCurrentNumColumns != numColumns) {
-		miCurrentNumColumns = numColumns;
+	if (propList["libwpd:occurence"]->getStr() == "even")
+                mpCurrentPageSpan->setFooterLeftContent(pHeaderFooterContentElements);
+        else
+                mpCurrentPageSpan->setFooterContent(pHeaderFooterContentElements);
 
-		if (miCurrentNumColumns > 1)
-		{
-			miNumSections++;
-			mfSectionSpaceAfter = spaceAfter;
-			UTF8String sSectionName;
-			sSectionName.sprintf("Section%i", miNumSections);
-			WRITER_DEBUG_MSG(("WriterWordPerfect:  New Section: %s\n", sSectionName.getUTF8()));
-
-			SectionStyle *pSectionStyle = new SectionStyle(miCurrentNumColumns, sSectionName.getUTF8());
-			mSectionStyles.push_back(pSectionStyle);
-
-			TagOpenElement *pSectionOpenElement = new TagOpenElement("text:section");
-			pSectionOpenElement->addAttribute("text:style-name", pSectionStyle->getName());
-			pSectionOpenElement->addAttribute("text:name", pSectionStyle->getName());
-			mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pSectionOpenElement));
-		}
-		else
-			mWriterDocumentState.mbInFakeSection = true;
+	mpCurrentContentElements = pHeaderFooterContentElements;
+}
+
+void WordPerfectCollector::closeFooter()
+{
+	mpCurrentContentElements = &mBodyElements;
+}
+
+void WordPerfectCollector::openSection(const WPXPropertyList &propList, const WPXPropertyListVector &columns)
+{
+        int iNumColumns = columns.count();
+
+	if (iNumColumns > 1)
+	{
+		mfSectionSpaceAfter = propList["fo:margin-bottom"]->getFloat();
+		WPXString sSectionName;
+		sSectionName.sprintf("Section%i", mSectionStyles.size());
+		
+		SectionStyle *pSectionStyle = new SectionStyle(propList, columns, sSectionName.cstr());
+		mSectionStyles.push_back(pSectionStyle);
+		
+		TagOpenElement *pSectionOpenElement = new TagOpenElement("text:section");
+		pSectionOpenElement->addAttribute("text:style-name", pSectionStyle->getName());
+		pSectionOpenElement->addAttribute("text:name", pSectionStyle->getName());
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pSectionOpenElement));
 	}
-	else {
+	else
 		mWriterDocumentState.mbInFakeSection = true;
-	}
-
 }
 
 void WordPerfectCollector::closeSection()
@@ -578,40 +449,73 @@
 		mWriterDocumentState.mbInFakeSection = false;
 
 	// open as many paragraphs as needed to simulate section space after
+	// WLACH_REFACTORING: disable this for now..
+	#if 0
 	for (float f=0.0f; f<mfSectionSpaceAfter; f+=1.0f) {
-		openParagraph(WPX_PARAGRAPH_JUSTIFICATION_LEFT, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false);
+		vector<WPXTabStop> dummyTabStops;
+		openParagraph(WPX_PARAGRAPH_JUSTIFICATION_LEFT, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, dummyTabStops, false, false);
 		closeParagraph();
 	}
+	#endif
 	mfSectionSpaceAfter = 0.0f;
 }
 
-void WordPerfectCollector::openParagraph(const uint8_t paragraphJustification,
-					 const float marginLeftOffset, const float marginRightOffset, const float textIndent,
-					 const float lineSpacing, const float spacingAfterParagraph,
-					 const bool isColumnBreak, const bool isPageBreak)
+void WordPerfectCollector::openParagraph(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops)
 {
-	Style *pTextRunStyle;
-
 	// FIXMENOW: What happens if we open a footnote inside a table? do we then inherit the footnote's style
 	// from "Table Contents"
-	if (mWriterDocumentState.mbTableCellOpened)
-		if (mWriterDocumentState.mbHeaderRow)
-			pTextRunStyle = _requestParagraphStyle(paragraphJustification, 0.0f, 0.0f, 0.0f,
-						       lineSpacing, spacingAfterParagraph, false, false, "Table Heading");
-		else
-			pTextRunStyle = _requestParagraphStyle(paragraphJustification, 0.0f, 0.0f, 0.0f,
-						       lineSpacing, spacingAfterParagraph, false, false, "Table Contents");
-	else if (miCurrentNumColumns > 1)
-		pTextRunStyle = _requestParagraphStyle(paragraphJustification, 0.0f, 0.0f, 0.0f,
-								lineSpacing, spacingAfterParagraph, isColumnBreak, isPageBreak, "Standard");
+	
+	WPXPropertyList *pPersistPropList = new WPXPropertyList(propList);
+	ParagraphStyle *pStyle = NULL;
+
+	if (mWriterDocumentState.mbFirstElement && mpCurrentContentElements == &mBodyElements)
+	{
+		// we don't have to go through the fuss of determining if the paragraph style is 
+		// unique in this case, because if we are the first document element, then we
+		// are singular. Neither do we have to determine what our parent style is-- we can't
+		// be inside a table in this case (the table would be the first document element 
+		//in that case)
+		pPersistPropList->insert("style:parent-style-name", "Standard");
+		WPXString sName;
+		sName.sprintf("FS");
+
+		WPXString sParagraphHashKey("P|FS");
+		pPersistPropList->insert("style:master-page-name", "Page Style 1");
+                pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
+		mTextStyleHash[sParagraphHashKey] = pStyle;
+		mWriterDocumentState.mbFirstElement = false;
+ 	}
 	else
-		pTextRunStyle = _requestParagraphStyle(paragraphJustification, marginLeftOffset, marginRightOffset, textIndent,
-								lineSpacing, spacingAfterParagraph, isColumnBreak, isPageBreak, "Standard");
+	{
+		if (mWriterDocumentState.mbTableCellOpened)
+		{
+			if (mWriterDocumentState.mbHeaderRow)
+				pPersistPropList->insert("style:parent-style-name", "Table Heading");
+			else
+				pPersistPropList->insert("style:parent-style-name", "Table Contents");
+		}
+		else
+			pPersistPropList->insert("style:parent-style-name", "Standard");
 
+                WPXString sKey = getParagraphStyleKey(*pPersistPropList, tabStops);
 
+		if (mTextStyleHash.find(sKey) == mTextStyleHash.end()) {
+			WPXString sName;
+			sName.sprintf("S%i", mTextStyleHash.size()); 
+			
+			pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
+	
+			mTextStyleHash[sKey] = pStyle;
+		}
+		else
+		{
+			pStyle = mTextStyleHash[sKey];
+			delete pPersistPropList;
+		}
+	}
 	// create a document element corresponding to the paragraph, and append it to our list of document elements
 	TagOpenElement *pParagraphOpenElement = new TagOpenElement("text:p");
-	pParagraphOpenElement->addAttribute("text:style-name", pTextRunStyle->getName());
+	pParagraphOpenElement->addAttribute("text:style-name", pStyle->getName());
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pParagraphOpenElement));
 }
 
@@ -620,37 +524,31 @@
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:p")));
 }
 
-void WordPerfectCollector::openSpan(const uint32_t textAttributeBits, const char *fontName, const float fontSize,
-									const RGBSColor *fontColor, const RGBSColor *highlightColor)
+void WordPerfectCollector::openSpan(const WPXPropertyList &propList)
 {
-	UTF8String sMappedFontName(mapFont(fontName));
-	_allocateFontName(sMappedFontName);
-	UTF8String sSpanHashKey;
-	sSpanHashKey.sprintf("S|%i|%s|%f|%.2x%.2x%.2x%.2x|%.2x%.2x%.2x%.2x", textAttributeBits, sMappedFontName.getUTF8(),
-						fontSize, fontColor->m_r, fontColor->m_g, fontColor->m_b, fontColor->m_s,
-						(highlightColor?highlightColor->m_r:0xff), (highlightColor?highlightColor->m_g:0xff),
-						(highlightColor?highlightColor->m_b:0xff), (highlightColor?highlightColor->m_s:0xff));
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Span Hash Key: %s\n", sSpanHashKey.getUTF8()));
+        if (propList["style:font-name"])
+                _allocateFontName(propList["style:font-name"]->getStr());
+	WPXString sSpanHashKey = propListToStyleKey(propList);
+	WRITER_DEBUG_MSG(("WriterWordPerfect: Span Hash Key: %s\n", sSpanHashKey.cstr()));
 
 	// Get the style
-	Style * pTextRunStyle = NULL;
-	if (mTextStyleHash.find(sSpanHashKey) == mTextStyleHash.end()) {
+        WPXString sName;
+	if (mSpanStyleHash.find(sSpanHashKey) == mSpanStyleHash.end())
+        {
 		// allocate a new paragraph style
-		UTF8String sName;
-		sName.sprintf("S%i", miNumStyles);
-		pTextRunStyle = new SpanStyle(textAttributeBits, sMappedFontName.getUTF8(), fontSize, fontColor,
-									  highlightColor, sName.getUTF8());
+		sName.sprintf("Span%i", mSpanStyleHash.size());
+		SpanStyle *pStyle = new SpanStyle(sName.cstr(), propList);                
 
-		miNumStyles++;
-		mTextStyleHash[sSpanHashKey] = pTextRunStyle;
+		mSpanStyleHash[sSpanHashKey] = pStyle;
 	}
-	else {
-		pTextRunStyle = mTextStyleHash.find(sSpanHashKey)->second; // yes, this could be optimized (see dup call above)
+	else 
+        {
+		sName.sprintf("%s", mSpanStyleHash.find(sSpanHashKey)->second->getName().cstr());
 	}
 
 	// create a document element corresponding to the paragraph, and append it to our list of document elements
 	TagOpenElement *pSpanOpenElement = new TagOpenElement("text:span");
-	pSpanOpenElement->addAttribute("text:style-name", pTextRunStyle->getName());
+	pSpanOpenElement->addAttribute("text:style-name", sName.cstr());
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pSpanOpenElement));
 }
 
@@ -659,26 +557,28 @@
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:span")));
 }
 
-void WordPerfectCollector::defineOrderedListLevel(const int listID, const int listLevel, const WPXNumberingType listType,
-						  const UCSString &textBeforeNumber, const UCSString &textAfterNumber,
-						  int startingNumber)
+void WordPerfectCollector::defineOrderedListLevel(const WPXPropertyList &propList)
 {
-	WRITER_DEBUG_MSG(("Define ordered list level (listid: %i)\n", listID));
+        int id = 0;
+        if (propList["libwpd:id"])
+                id = propList["libwpd:id"]->getInt();
+
  	OrderedListStyle *pOrderedListStyle = NULL;
-	if (mpCurrentListStyle && mpCurrentListStyle->getListID() == listID)
+	if (mpCurrentListStyle && mpCurrentListStyle->getListID() == id)
 		pOrderedListStyle = static_cast<OrderedListStyle *>(mpCurrentListStyle); // FIXME: using a dynamic cast here causes oo to crash?!
 	// this rather appalling conditional makes sure we only start a new list (rather than continue an old
 	// one) iff: (1) we have no prior list OR (2) the prior list is actually definitively different
 	// from the list that is just being defined (listIDs differ) OR (3) we can tell that the user actually
 	// is starting a new list at level 1 (and only level 1)
-	if (pOrderedListStyle == NULL || pOrderedListStyle->getListID() != listID ||
-	    (listLevel==1 && (startingNumber != (miLastListNumber+1))))
+	if (pOrderedListStyle == NULL || pOrderedListStyle->getListID() != id ||
+	    (propList["libwpd:level"] && propList["libwpd:level"]->getInt()==1 && 
+             (propList["text:start-value"] && propList["text:start-value"]->getInt() != (miLastListNumber+1))))
 	{
-		WRITER_DEBUG_MSG(("Attempting to create a new ordered list style (listid: %i)\n"));
-		UTF8String sName;
+		WRITER_DEBUG_MSG(("Attempting to create a new ordered list style (listid: %i)\n", id));
+		WPXString sName;
 		sName.sprintf("OL%i", miNumListStyles);
 		miNumListStyles++;
-		pOrderedListStyle = new OrderedListStyle(sName.getUTF8(), listID);
+		pOrderedListStyle = new OrderedListStyle(sName.cstr(), propList["libwpd:id"]->getInt());
 		mListStyles.push_back(static_cast<ListStyle *>(pOrderedListStyle));
 		mpCurrentListStyle = static_cast<ListStyle *>(pOrderedListStyle);
 		mbListContinueNumbering = false;
@@ -687,31 +587,32 @@
 	else
 		mbListContinueNumbering = true;
 
-	pOrderedListStyle->updateListLevel(miCurrentListLevel, listType, textBeforeNumber, textAfterNumber, startingNumber);
+	pOrderedListStyle->updateListLevel(miCurrentListLevel, propList);
 }
 
-void WordPerfectCollector::defineUnorderedListLevel(const int listID, const int listLevel, const UCSString &bullet)
+void WordPerfectCollector::defineUnorderedListLevel(const WPXPropertyList &propList)
 {
-	WRITER_DEBUG_MSG(("Define unordered list level (listid: %i)\n", listID));
+        int id = 0;
+        if (propList["libwpd:id"])
+                id = propList["libwpd:id"]->getInt();
 
  	UnorderedListStyle *pUnorderedListStyle = NULL;
-	if (mpCurrentListStyle && mpCurrentListStyle->getListID() == listID)
+	if (mpCurrentListStyle && mpCurrentListStyle->getListID() == id)
 		pUnorderedListStyle = static_cast<UnorderedListStyle *>(mpCurrentListStyle); // FIXME: using a dynamic cast here causes oo to crash?!
 
 	if (pUnorderedListStyle == NULL) {
-		WRITER_DEBUG_MSG(("Attempting to create a new unordered list style (listid: %i)\n", listID));
-		UTF8String sName;
+		WRITER_DEBUG_MSG(("Attempting to create a new unordered list style (listid: %i)\n", id));
+		WPXString sName;
 		sName.sprintf("UL%i", miNumListStyles);
-		pUnorderedListStyle = new UnorderedListStyle(sName, listID);
+		pUnorderedListStyle = new UnorderedListStyle(sName.cstr(), id);
 		mListStyles.push_back(static_cast<ListStyle *>(pUnorderedListStyle));
 		mpCurrentListStyle = static_cast<ListStyle *>(pUnorderedListStyle);
 	}
-	pUnorderedListStyle->updateListLevel(miCurrentListLevel, bullet);
+	pUnorderedListStyle->updateListLevel(miCurrentListLevel, propList);
 }
 
-void WordPerfectCollector::openOrderedListLevel(const int listID)
+void WordPerfectCollector::openOrderedListLevel(const WPXPropertyList &propList)
 {
-	WRITER_DEBUG_MSG(("Open ordered list level (listid: %i)\n", listID));
 	miCurrentListLevel++;
 	TagOpenElement *pListLevelOpenElement = new TagOpenElement("text:ordered-list");
 	_openListLevel(pListLevelOpenElement);
@@ -723,9 +624,8 @@
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pListLevelOpenElement));
 }
 
-void WordPerfectCollector::openUnorderedListLevel(const int listID)
+void WordPerfectCollector::openUnorderedListLevel(const WPXPropertyList &propList)
 {
-	WRITER_DEBUG_MSG(("Open unordered list level (listid: %i)\n", listID));
 	miCurrentListLevel++;
 	TagOpenElement *pListLevelOpenElement = new TagOpenElement("text:unordered-list");
 	_openListLevel(pListLevelOpenElement);
@@ -754,13 +654,11 @@
 
 void WordPerfectCollector::closeOrderedListLevel()
 {
-	WRITER_DEBUG_MSG(("Close ordered list level)\n"));
 	_closeListLevel("ordered-list");
 }
 
 void WordPerfectCollector::closeUnorderedListLevel()
 {
-	WRITER_DEBUG_MSG(("Close unordered list level\n"));
 	_closeListLevel("unordered-list");
 }
 
@@ -771,18 +669,16 @@
 
 	miCurrentListLevel--;
 
-	UTF8String sCloseElement;
+	WPXString sCloseElement;
 	sCloseElement.sprintf("text:%s", szListType);
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement(sCloseElement.getUTF8())));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement(sCloseElement.cstr())));
 
 	if (miCurrentListLevel > 0)
 		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:list-item")));
 	mbListElementOpened = false;
 }
 
-void WordPerfectCollector::openListElement(const uint8_t paragraphJustification,
-					   const float marginLeftOffset, const float marginRightOffset, const float textIndent,
-					   const float lineSpacing, const float spacingAfterParagraph)
+void WordPerfectCollector::openListElement(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops)
 {
 	miLastListLevel = miCurrentListLevel;
 	if (miCurrentListLevel == 1)
@@ -791,18 +687,37 @@
 	if (mbListElementOpened)
 		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:list-item")));
 
- 	ParagraphStyle * pListParagraphStyle = _requestListParagraphStyle(mpCurrentListStyle, paragraphJustification,
-									  marginLeftOffset, marginRightOffset, textIndent, lineSpacing, spacingAfterParagraph);
+	ParagraphStyle *pStyle = NULL;
+
+	WPXPropertyList *pPersistPropList = new WPXPropertyList(propList);
+	pPersistPropList->insert("style:list-style-name", mpCurrentListStyle->getName());
+	pPersistPropList->insert("style:parent-style-name", "Standard");
+
+        WPXString sKey = getParagraphStyleKey(*pPersistPropList, tabStops);
+
+        if (mTextStyleHash.find(sKey) == mTextStyleHash.end()) 
+        {
+                WPXString sName;
+                sName.sprintf("S%i", mTextStyleHash.size()); 
+		
+                pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
+                
+                mTextStyleHash[sKey] = pStyle;
+        }
+        else
+        {
+                pStyle = mTextStyleHash[sKey];
+                delete pPersistPropList;
+        }
 
-	if (!pListParagraphStyle) {
-		throw ParseException();
-	}
 	TagOpenElement *pOpenListElement = new TagOpenElement("text:list-item");
 	TagOpenElement *pOpenListElementParagraph = new TagOpenElement("text:p");
-	pOpenListElementParagraph->addAttribute("text:style-name", pListParagraphStyle->getName());
+
+	pOpenListElementParagraph->addAttribute("text:style-name", pStyle->getName());
+
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pOpenListElement));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pOpenListElementParagraph));
-
+		
 	mbListElementOpened = true;
 	mbListElementParagraphOpened = true;
 	mbListContinueNumbering = false;
@@ -810,8 +725,6 @@
 
 void WordPerfectCollector::closeListElement()
 {
-	WRITER_DEBUG_MSG(("close list element\n"));
-
 	// this code is kind of tricky, because we don't actually close the list element (because this list element
 	// could contain another list level in OOo's implementation of lists). that is done in the closeListLevel
 	// code (or when we open another list element)
@@ -823,15 +736,13 @@
 	}
 }
 
-void WordPerfectCollector::openFootnote(int number)
+void WordPerfectCollector::openFootnote(const WPXPropertyList &propList)
 {
-	WRITER_DEBUG_MSG(("open footnote\n"));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:footnote")));
 
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:footnote-citation")));
-	UTF8String sFootnoteNumber;
-	sFootnoteNumber.sprintf("%i", number);
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new CharDataElement(sFootnoteNumber.getUTF8())));
+        if (propList["libwpd:number"])
+                mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new CharDataElement(propList["libwpd:number"]->getStr().cstr())));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote-citation")));
 
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:footnote-body")));
@@ -840,19 +751,17 @@
 
 void WordPerfectCollector::closeFootnote()
 {
-	WRITER_DEBUG_MSG(("close footnote\n"));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote-body")));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote")));
 }
 
-void WordPerfectCollector::openEndnote(int number)
+void WordPerfectCollector::openEndnote(const WPXPropertyList &propList)
 {
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:endnote")));
 
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:endnote-citation")));
-	UTF8String sEndnoteNumber;
-	sEndnoteNumber.sprintf("%i", number);
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new CharDataElement(sEndnoteNumber.getUTF8())));
+        if (propList["libwpd:number"])
+                mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new CharDataElement(propList["libwpd:number"]->getStr().cstr())));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote-citation")));
 
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:endnote-body")));
@@ -860,27 +769,23 @@
 }
 void WordPerfectCollector::closeEndnote()
 {
-	WRITER_DEBUG_MSG(("close endnote\n"));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote-body")));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote")));
 }
 
-void WordPerfectCollector::openTable(const uint8_t tablePositionBits, const float marginLeftOffset, const float marginRightOffset,
-				     const float leftOffset, const vector < WPXColumnDefinition > &columns)
+void WordPerfectCollector::openTable(const WPXPropertyList &propList, const WPXPropertyListVector &columns)
 {
-	miNumTables++;
-
-	UTF8String sTableName;
-	sTableName.sprintf("Table%i", miNumTables);
-	WRITER_DEBUG_MSG(("WriterWordPerfect:  New Table: %s\n", sTableName.getUTF8()));
+	WPXString sTableName;
+	sTableName.sprintf("Table%i", mTableStyles.size());
 
 	// FIXME: we base the table style off of the page's margin left, ignoring (potential) wordperfect margin
 	// state which is transmitted inside the page. could this lead to unacceptable behaviour?
-	TableStyle *pTableStyle = new TableStyle(mpCurrentPageSpan->getMarginLeft(), mpCurrentPageSpan->getMarginRight(), marginLeftOffset, marginRightOffset, tablePositionBits, leftOffset, columns, sTableName.getUTF8());
+        // WLACH_REFACTORING: characterize this behaviour, probably should nip it at the bud within libwpd
+	TableStyle *pTableStyle = new TableStyle(propList, columns, sTableName.cstr());
 
 	if (mWriterDocumentState.mbFirstElement && mpCurrentContentElements == &mBodyElements)
 	{
-		UTF8String sMasterPageName("Page Style 1");
+		WPXString sMasterPageName("Page Style 1");
 		pTableStyle->setMasterPageName(sMasterPageName);
 		mWriterDocumentState.mbFirstElement = false;
 	}
@@ -891,15 +796,16 @@
 
 	TagOpenElement *pTableOpenElement = new TagOpenElement("table:table");
 
-	pTableOpenElement->addAttribute("table:name", sTableName.getUTF8());
-	pTableOpenElement->addAttribute("table:style-name", sTableName.getUTF8());
+	pTableOpenElement->addAttribute("table:name", sTableName.cstr());
+	pTableOpenElement->addAttribute("table:style-name", sTableName.cstr());
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableOpenElement));
 
-	for (int i=0; i<pTableStyle->getNumColumns(); i++) {
+	for (int i=0; i<pTableStyle->getNumColumns(); i++) 
+        {
 		TagOpenElement *pTableColumnOpenElement = new TagOpenElement("table:table-column");
-		UTF8String sColumnStyleName;
-		sColumnStyleName.sprintf("%s.Column%i", sTableName.getUTF8(), (i+1));
-		pTableColumnOpenElement->addAttribute("table:style-name", sColumnStyleName.getUTF8());
+		WPXString sColumnStyleName;
+		sColumnStyleName.sprintf("%s.Column%i", sTableName.cstr(), (i+1));
+		pTableColumnOpenElement->addAttribute("table:style-name", sColumnStyleName.cstr());
 		mpCurrentContentElements->push_back(pTableColumnOpenElement);
 
 		TagCloseElement *pTableColumnCloseElement = new TagCloseElement("table:table-column");
@@ -907,14 +813,22 @@
 	}
 }
 
-void WordPerfectCollector::openTableRow(const bool isHeaderRow)
+void WordPerfectCollector::openTableRow(const WPXPropertyList &propList)
 {
-	if (isHeaderRow)
+	if (propList["libwpd:is-header-row"] && propList["libwpd:is-header-row"]->getInt())
 	{
 		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("table:table-header-rows")));
 		mWriterDocumentState.mbHeaderRow = true;
 	}
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("table:table-row")));
+
+	WPXString sTableRowStyleName;
+	sTableRowStyleName.sprintf("%s.Row%i", mpCurrentTableStyle->getName().cstr(), mpCurrentTableStyle->getNumTableRowStyles());
+	TableRowStyle *pTableRowStyle = new TableRowStyle(propList, sTableRowStyleName.cstr());
+	mpCurrentTableStyle->addTableRowStyle(pTableRowStyle);
+	
+	TagOpenElement *pTableRowOpenElement = new TagOpenElement("table:table-row");
+	pTableRowOpenElement->addAttribute("table:style-name", sTableRowStyleName);
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableRowOpenElement));
 }
 
 void WordPerfectCollector::closeTableRow()
@@ -927,31 +841,21 @@
 	}
 }
 
-void WordPerfectCollector::openTableCell(const uint32_t col, const uint32_t row, const uint32_t colSpan, const uint32_t rowSpan,
-					 const uint8_t borderBits, const RGBSColor * cellFgColor, const RGBSColor * cellBgColor)
+void WordPerfectCollector::openTableCell(const WPXPropertyList &propList)
 {
-	float fLeftBorderThickness = (borderBits & WPX_TABLE_CELL_LEFT_BORDER_OFF) ? 0.0f : 0.0007f;
-	float fRightBorderThickness = (borderBits & WPX_TABLE_CELL_RIGHT_BORDER_OFF) ? 0.0f : 0.0007f;
-	float fTopBorderThickness = (borderBits & WPX_TABLE_CELL_TOP_BORDER_OFF) ? 0.0f : 0.0007f;
-	float fBottomBorderThickness = (borderBits & WPX_TABLE_CELL_BOTTOM_BORDER_OFF) ? 0.0f : 0.0007f;
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Borderbits=%d\n", borderBits));
-
-	UTF8String sTableCellStyleName; 
-	sTableCellStyleName.sprintf( "%s.Cell%i",
-								 (const char *)mpCurrentTableStyle->getName(),
-								 mpCurrentTableStyle->getNumTableCellStyles());
-	TableCellStyle *pTableCellStyle = new TableCellStyle(fLeftBorderThickness, fRightBorderThickness,
-							     fTopBorderThickness, fBottomBorderThickness,
-							     cellFgColor, cellBgColor,
-							     sTableCellStyleName);
+	WPXString sTableCellStyleName;
+	sTableCellStyleName.sprintf( "%s.Cell%i", mpCurrentTableStyle->getName().cstr(), mpCurrentTableStyle->getNumTableCellStyles());
+	TableCellStyle *pTableCellStyle = new TableCellStyle(propList, sTableCellStyleName.cstr());
 	mpCurrentTableStyle->addTableCellStyle(pTableCellStyle);
 
 	TagOpenElement *pTableCellOpenElement = new TagOpenElement("table:table-cell");
-	rtl::OString sNumColsSpanned = utf8_itoa(colSpan);
-	rtl::OString sNumRowsSpanned = utf8_itoa(rowSpan);
 	pTableCellOpenElement->addAttribute("table:style-name", sTableCellStyleName);
-	pTableCellOpenElement->addAttribute("table:number-columns-spanned", sNumColsSpanned);
-	pTableCellOpenElement->addAttribute("table:number-rows-spanned", sNumRowsSpanned);
+	if (propList["table:number-columns-spanned"])
+                pTableCellOpenElement->addAttribute("table:number-columns-spanned", 
+                                                    propList["table:number-columns-spanned"]->getStr().cstr());
+        if (propList["table:number-rows-spanned"])
+                pTableCellOpenElement->addAttribute("table:number-rows-spanned",
+                                                    propList["table:number-rows-spanned"]->getStr().cstr());
 	pTableCellOpenElement->addAttribute("table:value-type", "string");
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableCellOpenElement));
 
@@ -964,7 +868,7 @@
 	mWriterDocumentState.mbTableCellOpened = false;
 }
 
-void WordPerfectCollector::insertCoveredTableCell(const uint32_t col, const uint32_t row)
+void WordPerfectCollector::insertCoveredTableCell(const WPXPropertyList &propList)
 {
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("table:covered-table-cell")));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:covered-table-cell")));
@@ -972,29 +876,24 @@
 
 void WordPerfectCollector::closeTable()
 {
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Closing Table\n"));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table")));
 }
 
 
 void WordPerfectCollector::insertTab()
 {
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Insert Tab\n"));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:tab-stop")));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:tab-stop")));
 }
 
 void WordPerfectCollector::insertLineBreak()
 {
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Insert Line Break\n"));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:line-break")));
 	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:line-break")));
 }
 
-void WordPerfectCollector::insertText(const UCSString &text)
+void WordPerfectCollector::insertText(const WPXString &text)
 {
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Insert Text\n"));
-
 	DocumentElement *pText = new TextElement(text);
 	mpCurrentContentElements->push_back(pText);
 }
Index: writerperfect/source/filter/WordPerfectCollector.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/WordPerfectCollector.hxx,v
retrieving revision 1.2
retrieving revision 1.2.2.3
diff -u -r1.2 -r1.2.2.3
--- writerperfect/source/filter/WordPerfectCollector.hxx	24 Aug 2004 08:31:52 -0000	1.2
+++ writerperfect/source/filter/WordPerfectCollector.hxx	8 Feb 2005 18:55:21 -0000	1.2.2.3
@@ -4,6 +4,7 @@
  *
  * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
  * Copyright (C) 2003-2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -36,24 +37,14 @@
 #include <map>
 #include <stack>
 
-#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_
-#include <com/sun/star/lang/XMultiServiceFactory.hpp>
-#endif
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
-
-using namespace std;
-
 class DocumentElement;
+class DocumentHandler;
 class TagOpenElement;
 class FontStyle;
 class ListStyle;
 
 class ParagraphStyle;
+class SpanStyle;
 class TableStyle;
 class PageSpan;
 
@@ -74,135 +65,115 @@
 
 struct ltstr
 {
-  bool operator()(const UTF8String & s1, const UTF8String & s2) const
+  bool operator()(const WPXString & s1, const WPXString & s2) const
   {
-    return strcmp(s1.getUTF8(), s2.getUTF8()) < 0;
+    return strcmp(s1.cstr(), s2.cstr()) < 0;
   }
 };
 
 class WordPerfectCollector : public WPXHLListenerImpl
 {
 public:
-	WordPerfectCollector();
-	virtual ~WordPerfectCollector() {}
-	bool filter(WPXInputStream &input, Reference < XDocumentHandler > &xHandler);
-
-        virtual void setDocumentMetaData(const UCSString &author, const UCSString &subject,
-                                         const UCSString &publisher, const UCSString &category,
-                                         const UCSString &keywords, const UCSString &language,
-                                         const UCSString &abstract, const UCSString &descriptiveName,
-                                         const UCSString &descriptiveType) {}
-
+	WordPerfectCollector(WPXInputStream *pInput, DocumentHandler *pHandler);
+	virtual ~WordPerfectCollector();
+	bool filter();
 
+ 	virtual void setDocumentMetaData(const WPXPropertyList &propList) {}
 	virtual void startDocument() {}
 	virtual void endDocument() {}
 
-	virtual void openPageSpan(const int span, const bool isLastPageSpan,
-				  const float formLength, const float formWidth,
-				  const WPXFormOrientation formOrientation,
-				  const float marginLeft, const float marginRight,
-				  const float marginTop, const float marginBottom);
+	virtual void openPageSpan(const WPXPropertyList &propList);
 	virtual void closePageSpan() {}
-	virtual void openHeaderFooter(const WPXHeaderFooterType headerFooterType, const WPXHeaderFooterOccurence headerFooterOccurence);
-	virtual void closeHeaderFooter(const WPXHeaderFooterType headerFooterType, const WPXHeaderFooterOccurence headerFooterOccurence);
 
-	virtual void openSection(const unsigned int numColumns, const float spaceAfter);
+	virtual void openSection(const WPXPropertyList &propList, const WPXPropertyListVector &columns);
 	virtual void closeSection();
-	virtual void openParagraph(const uint8_t paragraphJustification, const float marginLeftOffset, const float marginRightOffset,
-								const float textIndent, const float lineSpacing, const float spacingAfterParagraph,
-								const bool isColumnBreak, const bool isPageBreak);
+
+	virtual void openHeader(const WPXPropertyList &propList);
+	virtual void closeHeader();
+	virtual void openFooter(const WPXPropertyList &propList);
+	virtual void closeFooter();
+
+	virtual void openParagraph(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops);
 	virtual void closeParagraph();
-	virtual void openSpan(const uint32_t textAttributeBits, const char *fontName,
-				  const float fontSize, const RGBSColor *fontColor, const RGBSColor *highlightColor);
+	
+	virtual void openSpan(const WPXPropertyList &propList);
 	virtual void closeSpan();
 
+
 	virtual void insertTab();
-	virtual void insertText(const UCSString &text);
-	virtual void insertLineBreak();
+	virtual void insertText(const WPXString &text);
+ 	virtual void insertLineBreak();
 
-	virtual void defineOrderedListLevel(const int listID, const int listLevel, const WPXNumberingType listType,
-					    const UCSString &textBeforeNumber, const UCSString &textAfterNumber,
-					    const int startingNumber);
-	virtual void defineUnorderedListLevel(const int listID, const int listLevel, const UCSString &bullet);
-	virtual void openOrderedListLevel(const int listID);
-	virtual void openUnorderedListLevel(const int listID);
+	virtual void defineOrderedListLevel(const WPXPropertyList &propList);
+	virtual void defineUnorderedListLevel(const WPXPropertyList &propList);	
+	virtual void openOrderedListLevel(const WPXPropertyList &propList);
+	virtual void openUnorderedListLevel(const WPXPropertyList &propList);
 	virtual void closeOrderedListLevel();
 	virtual void closeUnorderedListLevel();
-	virtual void openListElement(const uint8_t paragraphJustification, const float marginLeftOffset, const float marginRightOffset,
-						const float textIndent, const float lineSpacing, const float spacingAfterParagraph);
-	virtual void closeListElement();
+	virtual void openListElement(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops);
+	virtual void closeListElement();       
 
-	virtual void openFootnote(int number);
+	virtual void openFootnote(const WPXPropertyList &propList);
 	virtual void closeFootnote();
-	virtual void openEndnote(int number);
+	virtual void openEndnote(const WPXPropertyList &propList);
 	virtual void closeEndnote();
 
- 	virtual void openTable(const uint8_t tablePositionBits, const float marginLeftOffset, const float marginRightOffset,
-			       const float leftOffset, const vector < WPXColumnDefinition > &columns);
-	virtual void openTableRow(const bool isHeaderRow);
+ 	virtual void openTable(const WPXPropertyList &propList, const WPXPropertyListVector &columns);
+ 	virtual void openTableRow(const WPXPropertyList &propList);
 	virtual void closeTableRow();
- 	virtual void openTableCell(const uint32_t col, const uint32_t row, const uint32_t colSpan, const uint32_t rowSpan,
-				   const uint8_t borderBits, const RGBSColor * cellFgColor, const RGBSColor * cellBgColor);
+ 	virtual void openTableCell(const WPXPropertyList &propList);
 	virtual void closeTableCell();
-	virtual void insertCoveredTableCell(const uint32_t col, const uint32_t row);
-	virtual void closeTable();
+	virtual void insertCoveredTableCell(const WPXPropertyList &propList);
+ 	virtual void closeTable();
 
 protected:
 	void _resetDocumentState();
 	bool _parseSourceDocument(WPXInputStream &input);
-	bool _writeTargetDocument(Reference < XDocumentHandler > &xHandler);
-	// _requestParagraphStyle: returns a text run style, if it already exists. creates it, adds it
-	// to the list of defined styles, and returns it otherwise.
-	ParagraphStyle * _requestParagraphStyle(const uint8_t iParagraphJustification,
-							const float fMarginLeftOffset, const float fMarginRightOffset, const float fTextIndent,
-							 const float fLineSpacing, const float fSpacingAfterParagraph, const bool bColumnBreak,
-							 const bool bPageBreak, const char *pParentName = NULL, const char *pName = NULL);
-	ParagraphStyle * _requestListParagraphStyle(const ListStyle * pListStyle, const uint8_t iParagraphJustification,
-						    const float fMarginLeftOffset, const float fMarginRightOffset, const float fTextIndent,
-						    const float fLineSpacing, const float fSpacingAfterParagraph);
-	void _writeContentPreamble(Reference < XDocumentHandler > &xHandler);
-	void _writeDefaultStyles(Reference < XDocumentHandler > &xHandler);
-	void _writeMasterPages(Reference < XDocumentHandler > &xHandler);
-	void _writePageMasters(Reference < XDocumentHandler > &xHandler);
-	void _allocateFontName(const UTF8String &);
+	bool _writeTargetDocument(DocumentHandler &xHandler);
+	void _writeBegin();
+	void _writeDefaultStyles(DocumentHandler &xHandler);
+	void _writeMasterPages(DocumentHandler &xHandler);
+	void _writePageMasters(DocumentHandler &xHandler);
+	void _allocateFontName(const WPXString &);
 
 private:
 	void _openListLevel(TagOpenElement *pListLevelOpenElement);
 	void _closeListLevel(const char *szListType);
 
+        WPXInputStream *mpInput;
+        DocumentHandler *mpHandler;
 	bool mbUsed; // whether or not it has been before (you can only use me once!)
 
 	WriterDocumentState mWriterDocumentState;
 
-	// paragraph + span styles
-	map<UTF8String, Style *, ltstr> mTextStyleHash;
-	unsigned int miNumStyles;
+	// paragraph styles
+	std::map<WPXString, ParagraphStyle *, ltstr> mTextStyleHash;
+
+        // span styles
+        std::map<WPXString, SpanStyle *, ltstr> mSpanStyleHash;
 
 	// font styles
-	map<UTF8String, FontStyle *, ltstr> mFontHash;
+	std::map<WPXString, FontStyle *, ltstr> mFontHash;
 
 	// section styles
-	unsigned int miNumSections;
-	vector<SectionStyle *> mSectionStyles;
-	int miCurrentNumColumns;
+	std::vector<SectionStyle *> mSectionStyles;
 	float mfSectionSpaceAfter;
 
 	// table styles
-	unsigned int miNumTables;
-	vector<TableStyle *> mTableStyles;
+	std::vector<TableStyle *> mTableStyles;
 
 	// list styles
 	unsigned int miNumListStyles;
 
 	// style elements
-	vector<DocumentElement *> mStylesElements;
+	std::vector<DocumentElement *> mStylesElements;
 	// content elements
-	vector<DocumentElement *> mBodyElements;
+	std::vector<DocumentElement *> mBodyElements;
 	// the current set of elements that we're writing to
-	vector<DocumentElement *> * mpCurrentContentElements;
+	std::vector<DocumentElement *> * mpCurrentContentElements;
 
 	// page state
-	vector<PageSpan *> mPageSpans;
+	std::vector<PageSpan *> mPageSpans;
 	PageSpan *mpCurrentPageSpan;
 	int miNumPageStyles;
 
@@ -211,7 +182,7 @@
 	unsigned int miCurrentListLevel;
 	unsigned int miLastListLevel;
 	unsigned int miLastListNumber;
-	vector<ListStyle *> mListStyles;
+	std::vector<ListStyle *> mListStyles;
 	bool mbListContinueNumbering;
 	bool mbListElementOpened;
 	bool mbListElementParagraphOpened;
Index: writerperfect/source/filter/WordPerfectImportFilter.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/WordPerfectImportFilter.cxx,v
retrieving revision 1.3
retrieving revision 1.3.2.1
diff -u -r1.3 -r1.3.2.1
--- writerperfect/source/filter/WordPerfectImportFilter.cxx	7 Oct 2004 14:27:19 -0000	1.3
+++ writerperfect/source/filter/WordPerfectImportFilter.cxx	2 Feb 2005 20:44:45 -0000	1.3.2.1
@@ -1,8 +1,10 @@
-/* WordPerfect6Filter: Sets up the filter, and calls WordPerfectRunCollector
+/* WordPerfectImportFilter: Sets up the filter, and calls WordPerfectCollector
  * to do the actual filtering
  *
- * Portions of this Copyright (C) 2000 by Sun Microsystems, Inc.
- * Rest is Copyright (C) 2002 William Lachance (wlach@interlog.com)
+ * Copyright (C) 2000 by Sun Microsystems, Inc.
+ * Copyright (C) 2002-2004 William Lachance (wlach@interlog.com)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba <fridrich.strba@bluewin.ch>
  * 
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -52,10 +54,9 @@
 #include <com/sun/star/xml/sax/XParser.hpp>
 #endif
 
-#include "stream/WPXSvStream.h"
-#include "FilterInternal.hxx" // for debugging
-#include "WordPerfectCollector.hxx"
-#include "WordPerfectImportFilter.hxx"
+#ifndef _COM_SUN_STAR_UCB_XCOMMANDENVIRONMENT_HPP
+#include <com/sun/star/ucb/XCommandEnvironment.hpp>
+#endif
 
 #ifndef _ATTRLIST_HPP_
 #include <xmloff/attrlist.hxx>
@@ -64,6 +65,17 @@
 #include <xmloff/xmlkywd.hxx>
 #endif
 
+#ifndef _UCBHELPER_CONTENT_HXX
+#include <ucbhelper/content.hxx>
+#endif
+
+#include <libwpd/WPDocument.h>
+#include "FilterInternal.hxx"
+#include "OODocumentHandler.hxx"
+#include "WordPerfectCollector.hxx"
+#include "WordPerfectImportFilter.hxx"
+#include "stream/WPXSvStream.h"
+
 using namespace ::rtl;
 using rtl::OString;
 using rtl::OUString;
@@ -77,6 +89,8 @@
 using com::sun::star::lang::XMultiServiceFactory;
 using com::sun::star::beans::PropertyValue;
 using com::sun::star::document::XFilter;
+using com::sun::star::document::XExtendedFilterDetection;
+using com::sun::star::ucb::XCommandEnvironment;
 
 using com::sun::star::io::XInputStream;
 using com::sun::star::document::XImporter;
@@ -94,41 +108,42 @@
 	
 	sal_Int32 nLength = aDescriptor.getLength();
 	const PropertyValue * pValue = aDescriptor.getConstArray();
-	OUString suFileName;
+	OUString sURL;
 	Reference < XInputStream > xInputStream;
 	for ( sal_Int32 i = 0 ; i < nLength; i++)
-	 	{
-	 		if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
-	 			pValue[i].Value >>= xInputStream;
-	 		else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "FileName" ) ) )
-	 			pValue[i].Value >>= suFileName;
-			rtl_TextEncoding encoding = RTL_TEXTENCODING_INFO_ASCII;
-	 	}
+	{
+	    if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
+		pValue[i].Value >>= xInputStream;
+	    else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "URL" ) ) )
+		pValue[i].Value >>= sURL;
+	    rtl_TextEncoding encoding = RTL_TEXTENCODING_INFO_ASCII;
+	}
 	if ( !xInputStream.is() )
-	 	{
-	 		OSL_ASSERT( 0 );
-	 		return sal_False;
-	 	}
+	{
+	    OSL_ASSERT( 0 );
+	    return sal_False;
+	}
 	OString sFileName;
-	sFileName = OUStringToOString(suFileName, RTL_TEXTENCODING_INFO_ASCII);
+	sFileName = OUStringToOString(sURL, RTL_TEXTENCODING_INFO_ASCII);
 	
-	// WL: an XML import service -- I assume that this is what we want to write to..
+	// An XML import service: what we push sax messages to..
 	OUString sXMLImportService ( RTL_CONSTASCII_USTRINGPARAM ( "com.sun.star.comp.Writer.XMLImporter" ) );
-	Reference < XDocumentHandler > xHandler( mxMSF->createInstance( sXMLImportService ), UNO_QUERY );
-	mxHandler = xHandler;
+	Reference < XDocumentHandler > xInternalHandler( mxMSF->createInstance( sXMLImportService ), UNO_QUERY );
 
-	// WL: the XImporter. according to the documentation at xml.openoffice.org, it's supposed to set up
-	// an empty target document for XDocumentHandler to write to.. 
-	Reference < XImporter > xImporter( xHandler, UNO_QUERY );
-	xImporter->setTargetDocument ( mxDoc );
+	// The XImporter sets up an empty target document for XDocumentHandler to write to.. 
+	Reference < XImporter > xImporter(xInternalHandler, UNO_QUERY);
+	xImporter->setTargetDocument(mxDoc);
+
+        // OO Document Handler: abstract class to handle document SAX messages, concrete implementation here
+        // writes to in-memory target doc
+        OODocumentHandler xHandler(xInternalHandler);
 
 	WPXSvInputStream input( xInputStream );
-	WordPerfectCollector collector;
-	collector.filter(input, xHandler);
 
-	//WRITER_DEBUG_MSG(("WordPerfectImportFilter::importImpl: Success: %i\n", (int) bRet));
-	
-	return true; //bRet;
+	WordPerfectCollector collector(&input, &xHandler);
+	collector.filter();
+
+	return true; 
 }
 
 sal_Bool SAL_CALL WordPerfectImportFilter::filter( const Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
@@ -152,6 +167,62 @@
 	mxDoc = xDoc;
 }
 
+// XExtendedFilterDetection
+OUString SAL_CALL WordPerfectImportFilter::detect( com::sun::star::uno::Sequence< PropertyValue >& Descriptor )
+	throw( com::sun::star::uno::RuntimeException )
+{
+	WRITER_DEBUG_MSG(("WordPerfectImportFilter::detect: Got here!\n"));
+	
+	WPDConfidence confidence = WPD_CONFIDENCE_NONE;
+	OUString sTypeName = OUString( RTL_CONSTASCII_USTRINGPARAM ( "" ) );
+	sal_Int32 nLength = Descriptor.getLength();
+	sal_Int32 location = nLength;
+	OUString sURL;
+	const PropertyValue * pValue = Descriptor.getConstArray();
+	Reference < XInputStream > xInputStream;
+	for ( sal_Int32 i = 0 ; i < nLength; i++)
+	{
+		if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "TypeName" ) ) )
+			location=i;
+		else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
+			pValue[i].Value >>= xInputStream;
+		else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "URL" ) ) )
+			pValue[i].Value >>= sURL;
+
+	    rtl_TextEncoding encoding = RTL_TEXTENCODING_INFO_ASCII;
+	}
+
+        Reference< com::sun::star::ucb::XCommandEnvironment > xEnv;
+        if (!xInputStream.is())
+        {
+		::ucb::Content aContent(sURL, xEnv);
+                xInputStream = aContent.openStream();
+                if (!xInputStream.is())
+                        return sTypeName;
+        }
+		
+	WPXSvInputStream input( xInputStream );
+
+	confidence = WPDocument::isFileFormatSupported(&input, false);
+
+	if (confidence == WPD_CONFIDENCE_EXCELLENT)
+		sTypeName = OUString( RTL_CONSTASCII_USTRINGPARAM ( "writer_WordPerfect_Document" ) );
+
+        if (!sTypeName.equalsAscii(""))
+	{
+		if ( location == Descriptor.getLength() )
+		{
+			Descriptor.realloc(nLength+1);
+			Descriptor[location].Name = ::rtl::OUString::createFromAscii( "TypeName" );
+		}
+
+        	Descriptor[location].Value <<=sTypeName;
+        }
+	return sTypeName;	
+	
+}
+
+
 // XInitialization
 void SAL_CALL WordPerfectImportFilter::initialize( const Sequence< Any >& aArguments ) 
 	throw (Exception, RuntimeException)
@@ -178,25 +249,27 @@
 {
 	return OUString ( RTL_CONSTASCII_USTRINGPARAM ( "com.sun.star.comp.Writer.WordPerfectImportFilter" ) );
 }
-// #define SERVICE_NAME1 "com.sun.star.document.ExportFilter"
-#define SERVICE_NAME2 "com.sun.star.document.ImportFilter"
+
+#define SERVICE_NAME1 "com.sun.star.document.ImportFilter"
+#define SERVICE_NAME2 "com.sun.star.document.ExtendedTypeDetection"
 sal_Bool SAL_CALL WordPerfectImportFilter_supportsService( const OUString& ServiceName ) 
 	throw (RuntimeException)
 {
-	return //ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME1 ) ) ||
-    	   ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME2 ) );
+	return (ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME1 ) ) ||
+		ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME2 ) ) );
 }
 Sequence< OUString > SAL_CALL WordPerfectImportFilter_getSupportedServiceNames(  ) 
 	throw (RuntimeException)
 {
-	Sequence < OUString > aRet(1);
-    OUString* pArray = aRet.getArray();
-    pArray[0] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME2 ) );
-//     pArray[1] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME2 ) );
-    return aRet;
+	Sequence < OUString > aRet(2);
+//	Sequence < OUString > aRet(1);
+        OUString* pArray = aRet.getArray();
+        pArray[0] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME1 ) );
+	pArray[1] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME2 ) ); 
+        return aRet;
 }
-//#undef SERVICE_NAME1
 #undef SERVICE_NAME2
+#undef SERVICE_NAME1
 
 Reference< XInterface > SAL_CALL WordPerfectImportFilter_createInstance( const Reference< XMultiServiceFactory > & rSMgr)
 	throw( Exception )
Index: writerperfect/source/filter/WordPerfectImportFilter.hxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/WordPerfectImportFilter.hxx,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/filter/WordPerfectImportFilter.hxx	5 Aug 2004 17:44:46 -0000	1.1
+++ writerperfect/source/filter/WordPerfectImportFilter.hxx	2 Feb 2005 20:44:45 -0000	1.1.2.1
@@ -1,8 +1,8 @@
-/* WordPerfect6Filter: Sets up the filter, and calls WordPerfectRunCollector
- * to do the actual filtering
- *
- * Portions of this Copyright (C) 2000 by Sun Microsystems, Inc.
- * Rest is Copyright (C) 2002 William Lachance (wlach@interlog.com)
+/* 
+ * Copyright (C) 2000 by Sun Microsystems, Inc.
+ * Copyright (C) 2002-2004 William Lachance (wlach@interlog.com)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba <fridrich.strba@bluewin.ch>
  * 
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -32,12 +32,12 @@
 #ifndef _COM_SUN_STAR_DOCUMENT_XFILTER_HPP_
 #include <com/sun/star/document/XFilter.hpp>
 #endif
-// #ifndef _COM_SUN_STAR_DOCUMENT_XEXPORTER_HPP_
-// #include <com/sun/star/document/XExporter.hpp>
-// #endif
 #ifndef _COM_SUN_STAR_DOCUMENT_XIMPORTER_HPP_
 #include <com/sun/star/document/XImporter.hpp>
 #endif
+#ifndef _COM_SUN_STAR_DOCUMENT_XEXTENDEDFILTERDETECTION_HPP_
+#include <com/sun/star/document/XExtendedFilterDetection.hpp>
+#endif
 #ifndef _COM_SUN_STAR_LANG_XINITIALIZATION_HPP_
 #include <com/sun/star/lang/XInitialization.hpp>
 #endif
@@ -48,7 +48,7 @@
 #include <com/sun/star/xml/sax/XDocumentHandler.hpp>
 #endif
 #ifndef _CPPUHELPER_IMPLBASE5_HXX_
-#include <cppuhelper/implbase4.hxx>
+#include <cppuhelper/implbase5.hxx>
 #endif
 
 enum FilterType 
@@ -59,10 +59,11 @@
 /* This component will be instantiated for both import or export. Whether it calls
  * setSourceDocument or setTargetDocument determines which Impl function the filter
  * member calls */
-class WordPerfectImportFilter : public cppu::WeakImplHelper4 
+class WordPerfectImportFilter : public cppu::WeakImplHelper5 
 < 
 	com::sun::star::document::XFilter,
 	com::sun::star::document::XImporter,
+	com::sun::star::document::XExtendedFilterDetection,
 	com::sun::star::lang::XInitialization,
 	com::sun::star::lang::XServiceInfo
 >
@@ -76,8 +77,6 @@
 
 	FilterType meType;
 
-// 	sal_Bool SAL_CALL exportImpl( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
-// 		throw (::com::sun::star::uno::RuntimeException);
 	sal_Bool SAL_CALL importImpl( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
 		throw (::com::sun::star::uno::RuntimeException);
 
@@ -87,29 +86,29 @@
 	virtual ~WordPerfectImportFilter() {}
 
 	// XFilter
-    virtual sal_Bool SAL_CALL filter( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
+        virtual sal_Bool SAL_CALL filter( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
 		throw (::com::sun::star::uno::RuntimeException);
-    virtual void SAL_CALL cancel(  ) 
+        virtual void SAL_CALL cancel(  ) 
 		throw (::com::sun::star::uno::RuntimeException);
 
-	// XExporter
-//     virtual void SAL_CALL setSourceDocument( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent >& xDoc ) 
-// 		throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
-
 	// XImporter
-    virtual void SAL_CALL setTargetDocument( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent >& xDoc ) 
+        virtual void SAL_CALL setTargetDocument( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent >& xDoc ) 
 		throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
 
+ 	//XExtendedFilterDetection
+	virtual ::rtl::OUString SAL_CALL detect( com::sun::star::uno::Sequence< com::sun::star::beans::PropertyValue >& Descriptor ) 
+		throw( com::sun::star::uno::RuntimeException );
+
 	// XInitialization
-    virtual void SAL_CALL initialize( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aArguments ) 
+        virtual void SAL_CALL initialize( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aArguments ) 
 		throw (::com::sun::star::uno::Exception, ::com::sun::star::uno::RuntimeException);
 
 	// XServiceInfo
-    virtual ::rtl::OUString SAL_CALL getImplementationName(  ) 
+        virtual ::rtl::OUString SAL_CALL getImplementationName(  ) 
 		throw (::com::sun::star::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) 
+        virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) 
 		throw (::com::sun::star::uno::RuntimeException);
-    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) 
+        virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) 
 		throw (::com::sun::star::uno::RuntimeException);
 
 };
Index: writerperfect/source/filter/makefile.mk
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/filter/makefile.mk,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/filter/makefile.mk	5 Aug 2004 17:44:46 -0000	1.1
+++ writerperfect/source/filter/makefile.mk	2 Feb 2005 20:44:45 -0000	1.1.2.1
@@ -6,14 +6,18 @@
 
 .INCLUDE :  settings.mk
 
+.IF "$(SYSTEM_LIBWPD)" == "YES"
+INCPRE+=$(LIBWPD_CFLAGS) -I..
+.ELSE
 # broken but ... necessary, internal include shafted ...
 INCPRE+=$(SOLARVER)$/$(UPD)$/$(INPATH)$/inc$/libwpd -I..
+.ENDIF
 
 SLOFILES= \
 	$(SLO)$/DocumentElement.obj		\
-	$(SLO)$/FontMap.obj			\
 	$(SLO)$/FontStyle.obj			\
 	$(SLO)$/ListStyle.obj			\
+	$(SLO)$/OODocumentHandler.obj		\
 	$(SLO)$/PageSpan.obj			\
 	$(SLO)$/SectionStyle.obj		\
 	$(SLO)$/TableStyle.obj			\
Index: writerperfect/source/stream/WPXSvStream.cxx
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/stream/WPXSvStream.cxx,v
retrieving revision 1.3
retrieving revision 1.3.2.2
diff -u -r1.3 -r1.3.2.2
--- writerperfect/source/stream/WPXSvStream.cxx	8 Oct 2004 08:46:50 -0000	1.3
+++ writerperfect/source/stream/WPXSvStream.cxx	8 Feb 2005 15:27:59 -0000	1.3.2.2
@@ -29,10 +29,12 @@
 {
 }
 
-const uint8_t * WPXSvInputStream::read(size_t numBytes)
+const uint8_t * WPXSvInputStream::read(size_t numBytes, size_t &numBytesRead)
 {
 	// FIXME: assume no short reads (?)
+	sal_Int64 oldMnOffset = mnOffset;
 	mnOffset += mxStream->readBytes (maData, numBytes);
+	numBytesRead = mnOffset - oldMnOffset;
 	return (const uint8_t *)maData.getConstArray();
 }
 
@@ -92,7 +94,7 @@
 			rtl::OUString::createFromAscii( "PerfectOffice_MAIN" ),
 			STREAM_STD_READ );
 
-	Reference < XInputStream > xContents = new utl::OInputStreamWrapper( mxChildStream );
+	Reference < XInputStream > xContents = new utl::OSeekableInputStreamWrapper( mxChildStream );
 	if (xContents.is())
 		return new WPXSvInputStream( xContents );
 	else
Index: writerperfect/source/stream/WPXSvStream.h
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/stream/WPXSvStream.h,v
retrieving revision 1.2
retrieving revision 1.2.2.1
diff -u -r1.2 -r1.2.2.1
--- writerperfect/source/stream/WPXSvStream.h	24 Aug 2004 08:31:54 -0000	1.2
+++ writerperfect/source/stream/WPXSvStream.h	2 Feb 2005 20:44:46 -0000	1.2.2.1
@@ -16,7 +16,7 @@
 	virtual bool isOLEStream();
 	virtual WPXInputStream * getDocumentOLEStream();
 
-	virtual const uint8_t *read(size_t numBytes);
+	virtual const uint8_t *read(size_t numBytes, size_t &numBytesRead);
 	virtual int seek(long offset, WPX_SEEK_TYPE seekType);
 	virtual long tell();
 	virtual bool atEOS();
Index: writerperfect/source/stream/makefile.mk
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/source/stream/makefile.mk,v
retrieving revision 1.1
retrieving revision 1.1.2.1
diff -u -r1.1 -r1.1.2.1
--- writerperfect/source/stream/makefile.mk	5 Aug 2004 17:44:49 -0000	1.1
+++ writerperfect/source/stream/makefile.mk	2 Feb 2005 20:44:46 -0000	1.1.2.1
@@ -6,8 +6,12 @@
 
 .INCLUDE :  settings.mk
 
+.IF "$(SYSTEM_LIBWPD)" == "YES"
+INCPRE+= $(LIBWPD_CFLAGS)
+.ELSE
 # broken but ... necessary, internal include shafted ...
 INCPRE+=$(SOLARVER)$/$(UPD)$/$(INPATH)$/inc$/libwpd
+.ENDIF
 
 SLOFILES= $(SLO)$/WPXSvStream.obj
 
Index: writerperfect/util/makefile.mk
===================================================================
RCS file: /shared/data/helm/cvs/repository/sw/writerperfect/util/makefile.mk,v
retrieving revision 1.3
retrieving revision 1.3.2.1
diff -u -r1.3 -r1.3.2.1
--- writerperfect/util/makefile.mk	24 Aug 2004 10:45:32 -0000	1.3
+++ writerperfect/util/makefile.mk	2 Feb 2005 20:44:47 -0000	1.3.2.1
@@ -6,9 +6,13 @@
 .INCLUDE :  settings.mk
 
 .IF "$(GUI)"=="UNX" || "$(GUI)"=="MAC"
-LIBWPDSTATIC=-lwpdlib
+.IF "$(SYSTEM_LIBWPD)" == "YES"
+LIBWPD=$(LIBWPD_LIBS)
 .ELSE
-LIBWPDSTATIC=$(LIBPRE) wpdlib.lib
+LIBWPD=-lwpdlib
+.ENDIF
+.ELSE
+LIBWPD=$(LIBPRE) wpdlib.lib
 .ENDIF
 
 LIB1TARGET= $(SLB)$/$(TARGET).lib
@@ -30,7 +34,7 @@
 	$(CPPULIB) \
 	$(SALLIB) \
 	$(XMLOFFLIB) \
-	$(LIBWPDSTATIC)
+	$(LIBWPD)
 
 SHL1TARGET = $(TARGET)$(UPD)$(DLLPOSTFIX)
 SHL1IMPLIB = i$(SHL1TARGET)
