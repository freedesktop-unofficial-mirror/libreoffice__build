--- canvas/source/tools/page.cxx.orig	2006-12-27 11:59:14.000000000 +0100
+++ canvas/source/tools/page.cxx	2006-12-27 11:59:03.000000000 +0100
@@ -36,8 +36,8 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_canvas.hxx"
 
-#include <boost/bind.hpp>
 #include "page.hxx"
+#include <boost/bind.hpp>
 
 namespace canvas
 {
--- canvas/source/tools/pagemanager.cxx.orig	2006-12-27 12:01:26.000000000 +0100
+++ canvas/source/tools/pagemanager.cxx	2006-12-27 12:01:36.000000000 +0100
@@ -36,8 +36,8 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_canvas.hxx"
 
-#include <boost/bind.hpp>
 #include "pagemanager.hxx"
+#include <boost/bind.hpp>
 
 namespace canvas
 {
--- canvas/source/tools/surfaceproxy.cxx.orig	2006-12-27 12:02:58.000000000 +0100
+++ canvas/source/tools/surfaceproxy.cxx	2006-12-27 12:03:13.000000000 +0100
@@ -36,11 +36,11 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_canvas.hxx"
 
-#include <boost/bind.hpp>
 #include <basegfx/polygon/b2dpolygoncutandtouch.hxx>
 #include <basegfx/polygon/b2dpolygontriangulator.hxx>
 #include <basegfx/polygon/b2dpolypolygontools.hxx>
 #include "surfaceproxy.hxx"
+#include <boost/bind.hpp>
 
 namespace canvas
 {
--- sc/inc/postit.hxx.orig	2006-12-28 01:31:34.000000000 +0100
+++ sc/inc/postit.hxx	2006-12-28 01:31:44.000000000 +0100
@@ -38,8 +38,6 @@
 #ifndef SC_POSTIT_HXX
 #define SC_POSTIT_HXX
 
-#include <boost/shared_ptr.hpp>
-
 #include <svtools/pathoptions.hxx>
 #include <svtools/useroptions.hxx>
 
@@ -71,6 +69,8 @@
 #include <com/sun/star/drawing/XShape.hpp>
 #endif
 
+#include <boost/shared_ptr.hpp>
+
 //	indicative text length for a note object
 #define SC_NOTE_SMALLTEXT	100
 
--- sc/source/filter/html/htmlpars.cxx.orig	2006-12-28 01:49:56.000000000 +0100
+++ sc/source/filter/html/htmlpars.cxx	2006-12-28 01:50:04.000000000 +0100
@@ -36,8 +36,6 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_sc.hxx"
 
-#include <boost/shared_ptr.hpp>
-
 #define SC_HTMLPARS_CXX
 #include "scitems.hxx"
 #include <svx/eeitem.hxx>
@@ -85,6 +83,8 @@
 #include "document.hxx"
 #include "rangelst.hxx"
 
+#include <boost/shared_ptr.hpp>
+
 
 SV_IMPL_VARARR_SORT( ScHTMLColOffset, ULONG );
 
--- sd/source/ui/slidesorter/inc/controller/SlideSorterController.hxx.orig	2006-12-28 12:50:04.000000000 +0100
+++ sd/source/ui/slidesorter/inc/controller/SlideSorterController.hxx	2006-12-28 13:03:30.000000000 +0100
@@ -36,6 +36,7 @@
 #ifndef SD_SLIDESORTER_SLIDE_SORTER_CONTROLLER_HXX
 #define SD_SLIDESORTER_SLIDE_SORTER_CONTROLLER_HXX
 
+#include <memory>
 #include "model/SlsSharedPageDescriptor.hxx"
 #include "ViewShell.hxx"
 
@@ -51,7 +52,6 @@
 #ifndef _SV_GEN_HXX
 #include <tools/gen.hxx>
 #endif
-#include <memory>
 #include <comphelper/implementationreference.hxx>
 
 class TabBar;
--- sd/source/ui/slidesorter/inc/controller/SlsFocusManager.hxx.orig	2006-12-28 13:07:29.000000000 +0100
+++ sd/source/ui/slidesorter/inc/controller/SlsFocusManager.hxx	2006-12-28 13:07:38.000000000 +0100
@@ -35,13 +35,13 @@
 #ifndef SD_SLIDESORTER_FOCUS_MANAGER_HXX
 #define SD_SLIDESORTER_FOCUS_MANAGER_HXX
 
+#include <vector>
 #include <model/SlsSharedPageDescriptor.hxx>
 
 #include <sal/types.h>
 #ifndef _LINK_HXX
 #include <tools/link.hxx>
 #endif
-#include <vector>
 
 namespace sd { namespace slidesorter { namespace controller {
 
--- sd/source/ui/slidesorter/controller/SlsPageObjectFactory.cxx.orig	2006-12-28 13:11:40.000000000 +0100
+++ sd/source/ui/slidesorter/controller/SlsPageObjectFactory.cxx	2006-12-28 13:11:46.000000000 +0100
@@ -36,12 +36,12 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_sd.hxx"
 
-#include "controller/SlsPageObjectFactory.hxx"
-
 #include "view/SlsPageObject.hxx"
 #include "view/SlsPageObjectViewContact.hxx"
 #include "view/SlsPageObjectViewObjectContact.hxx"
 
+#include "controller/SlsPageObjectFactory.hxx"
+
 #include "sdpage.hxx"
 
 
--- sd/source/ui/slidesorter/inc/controller/SlsPageSelector.hxx.orig	2006-12-28 13:14:01.000000000 +0100
+++ sd/source/ui/slidesorter/inc/controller/SlsPageSelector.hxx	2006-12-28 13:14:08.000000000 +0100
@@ -35,11 +35,11 @@
 #ifndef SD_SLIDESORTER_PAGE_SELECTOR_HXX
 #define SD_SLIDESORTER_PAGE_SELECTOR_HXX
 
-#include "model/SlsSharedPageDescriptor.hxx"
-
 #include <set>
 #include <memory>
 
+#include "model/SlsSharedPageDescriptor.hxx"
+
 class SdPage;
 
 namespace sd { namespace slidesorter { namespace model {
--- sd/source/ui/slidesorter/inc/view/SlsViewOverlay.hxx.orig	2006-12-28 13:21:53.000000000 +0100
+++ sd/source/ui/slidesorter/inc/view/SlsViewOverlay.hxx	2006-12-28 13:22:02.000000000 +0100
@@ -36,11 +36,11 @@
 #ifndef SD_SLIDESORTER_VIEW_OVERLAY_HXX
 #define SD_SLIDESORTER_VIEW_OVERLAY_HXX
 
+#include <vector>
 #include "model/SlsSharedPageDescriptor.hxx"
 
 #include <osl/mutex.hxx>
 #include <tools/gen.hxx>
-#include <vector>
 #include <boost/weak_ptr.hpp>
 
 class OutputDevice;
--- chart2/source/tools/ErrorBar.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/tools/ErrorBar.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -126,23 +126,23 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_STYLE ));
-    rOutMap[ PROP_ERROR_BAR_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_ERROR_BAR_STYLE' ));
+    rOutMap[ 'PROP_ERROR_BAR_STYLE' ] =
         uno::makeAny( chart2::ErrorBarStyle_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_POS_ERROR ));
-    rOutMap[ PROP_ERROR_BAR_POS_ERROR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_ERROR_BAR_POS_ERROR' ));
+    rOutMap[ 'PROP_ERROR_BAR_POS_ERROR' ] =
         uno::makeAny( 0.0 );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_NEG_ERROR ));
-    rOutMap[ PROP_ERROR_BAR_NEG_ERROR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_ERROR_BAR_NEG_ERROR' ));
+    rOutMap[ 'PROP_ERROR_BAR_NEG_ERROR' ] =
         uno::makeAny( 0.0 );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_WEIGHT ));
-    rOutMap[ PROP_ERROR_BAR_WEIGHT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_ERROR_BAR_WEIGHT' ));
+    rOutMap[ 'PROP_ERROR_BAR_WEIGHT' ] =
         uno::makeAny( 1.0 );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_SHOW_POS_ERROR ));
-    rOutMap[ PROP_ERROR_BAR_SHOW_POS_ERROR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_ERROR_BAR_SHOW_POS_ERROR' ));
+    rOutMap[ 'PROP_ERROR_BAR_SHOW_POS_ERROR' ] =
         uno::makeAny( sal_True );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_SHOW_NEG_ERROR ));
-    rOutMap[ PROP_ERROR_BAR_SHOW_NEG_ERROR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_ERROR_BAR_SHOW_NEG_ERROR' ));
+    rOutMap[ 'PROP_ERROR_BAR_SHOW_NEG_ERROR' ] =
         uno::makeAny( sal_True );
 }
 
--- chart2/source/tools/FillProperties.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/tools/FillProperties.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -245,20 +245,20 @@
 void lcl_AddDefaultsToMap_without_BitmapProperties(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_STYLE ));
-    rOutMap[ FillProperties::PROP_FILL_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_STYLE' ));
+    rOutMap[ 'FillProperties::PROP_FILL_STYLE' ] =
         uno::makeAny( drawing::FillStyle_SOLID );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_COLOR ));
-    rOutMap[ FillProperties::PROP_FILL_COLOR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_COLOR' ));
+    rOutMap[ 'FillProperties::PROP_FILL_COLOR' ] =
         uno::makeAny( sal_Int32( 0xd9d9d9 ) ); // gray85
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_TRANSPARENCE ));
-    rOutMap[ FillProperties::PROP_FILL_TRANSPARENCE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_TRANSPARENCE' ));
+    rOutMap[ 'FillProperties::PROP_FILL_TRANSPARENCE' ] =
         uno::makeAny( sal_Int16( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_GRADIENT_STEPCOUNT ));
-    rOutMap[ FillProperties::PROP_FILL_GRADIENT_STEPCOUNT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_GRADIENT_STEPCOUNT' ));
+    rOutMap[ 'FillProperties::PROP_FILL_GRADIENT_STEPCOUNT' ] =
         uno::makeAny( sal_Int16( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BACKGROUND ));
-    rOutMap[ FillProperties::PROP_FILL_BACKGROUND ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BACKGROUND' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BACKGROUND' ] =
         uno::makeAny( sal_Bool( sal_False ) );
 }
 
@@ -268,26 +268,26 @@
     uno::Any aSalInt16Zero = uno::makeAny( sal_Int16( 0 ));
     uno::Any aSalInt32SizeDefault = uno::makeAny( sal_Int32( 0 ));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_OFFSETX ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_OFFSETY ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_OFFSETX' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_OFFSETX' ] = aSalInt16Zero;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_OFFSETY' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_OFFSETY' ] = aSalInt16Zero;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX' ] = aSalInt16Zero;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY' ] = aSalInt16Zero;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT' ] =
         uno::makeAny( drawing::RectanglePoint_MIDDLE_MIDDLE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_LOGICALSIZE' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_LOGICALSIZE' ] =
         uno::makeAny( true );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_SIZEX ] = aSalInt32SizeDefault;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_SIZEY ] = aSalInt32SizeDefault;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_MODE ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_MODE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_SIZEX' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_SIZEX' ] = aSalInt32SizeDefault;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_SIZEY' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_SIZEY' ] = aSalInt32SizeDefault;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_MODE' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_MODE' ] =
         uno::makeAny( drawing::BitmapMode_REPEAT );
 }
 
--- chart2/source/tools/LineProperties.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/tools/LineProperties.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -118,20 +118,20 @@
 void LineProperties::AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_STYLE ));
-    rOutMap[ PROP_LINE_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINE_STYLE' ));
+    rOutMap[ 'PROP_LINE_STYLE' ] =
         uno::makeAny( drawing::LineStyle_SOLID );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_WIDTH ));
-    rOutMap[ PROP_LINE_WIDTH ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINE_WIDTH' ));
+    rOutMap[ 'PROP_LINE_WIDTH' ] =
         uno::makeAny( sal_Int32( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_COLOR ));
-    rOutMap[ PROP_LINE_COLOR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINE_COLOR' ));
+    rOutMap[ 'PROP_LINE_COLOR' ] =
         uno::makeAny( sal_Int32( 0x000000 ) );  // black
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_TRANSPARENCE ));
-    rOutMap[ PROP_LINE_TRANSPARENCE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINE_TRANSPARENCE' ));
+    rOutMap[ 'PROP_LINE_TRANSPARENCE' ] =
         uno::makeAny( sal_Int16( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_JOINT ));
-    rOutMap[ PROP_LINE_JOINT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINE_JOINT' ));
+    rOutMap[ 'PROP_LINE_JOINT' ] =
         uno::makeAny( drawing::LineJoint_NONE );
 }
 
--- chart2/source/model/main/Axis.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/main/Axis.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -215,49 +215,49 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_SHOW ));
-    rOutMap[ PROP_AXIS_SHOW ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_SHOW' ));
+    rOutMap[ 'PROP_AXIS_SHOW' ] =
         uno::makeAny( sal_True );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_POSITION ));
-    rOutMap[ PROP_AXIS_POSITION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_POSITION' ));
+    rOutMap[ 'PROP_AXIS_POSITION' ] =
         uno::makeAny( chart2::AxisPosition::MAIN );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_DISPLAY_LABELS ));
-    rOutMap[ PROP_AXIS_DISPLAY_LABELS ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_DISPLAY_LABELS' ));
+    rOutMap[ 'PROP_AXIS_DISPLAY_LABELS' ] =
         uno::makeAny( sal_Bool( sal_True ) );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_ROTATION ));
-    rOutMap[ PROP_AXIS_TEXT_ROTATION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_TEXT_ROTATION' ));
+    rOutMap[ 'PROP_AXIS_TEXT_ROTATION' ] =
         uno::makeAny( double( 0.0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_BREAK ));
-    rOutMap[ PROP_AXIS_TEXT_BREAK ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_TEXT_BREAK' ));
+    rOutMap[ 'PROP_AXIS_TEXT_BREAK' ] =
         uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_OVERLAP ));
-    rOutMap[ PROP_AXIS_TEXT_OVERLAP ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_TEXT_OVERLAP' ));
+    rOutMap[ 'PROP_AXIS_TEXT_OVERLAP' ] =
         uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_STACKED ));
-    rOutMap[ PROP_AXIS_TEXT_STACKED ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_TEXT_STACKED' ));
+    rOutMap[ 'PROP_AXIS_TEXT_STACKED' ] =
         uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_ARRANGE_ORDER ));
-    rOutMap[ PROP_AXIS_TEXT_ARRANGE_ORDER ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_TEXT_ARRANGE_ORDER' ));
+    rOutMap[ 'PROP_AXIS_TEXT_ARRANGE_ORDER' ] =
         uno::makeAny( ::com::sun::star::chart::ChartAxisArrangeOrderType_AUTO );
 
     float fDefaultCharHeight = 8.0;
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT ] =
+    rOutMap[ '::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultCharHeight );
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT ] =
+    rOutMap[ '::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultCharHeight );
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT ] =
+    rOutMap[ '::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultCharHeight );
 
     // for Testing only!
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_MAJOR_TICKMARKS ));
-    rOutMap[ PROP_AXIS_MAJOR_TICKMARKS ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_MAJOR_TICKMARKS' ));
+    rOutMap[ 'PROP_AXIS_MAJOR_TICKMARKS' ] =
         uno::makeAny( sal_Int32( 2 /* CHAXIS_MARK_OUTER */ ) );
     // for Testing only!
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_MINOR_TICKMARKS ));
-    rOutMap[ PROP_AXIS_MINOR_TICKMARKS ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AXIS_MINOR_TICKMARKS' ));
+    rOutMap[ 'PROP_AXIS_MINOR_TICKMARKS' ] =
         uno::makeAny( sal_Int32( 0 /* CHAXIS_MARK_NONE */ ) );
 }
 
--- chart2/source/model/main/DataPointProperties.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/main/DataPointProperties.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -369,70 +369,70 @@
 void DataPointProperties::AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_COLOR ));
-    rOutMap[ PROP_DATAPOINT_COLOR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_COLOR' ));
+    rOutMap[ 'PROP_DATAPOINT_COLOR' ] =
         uno::makeAny( sal_Int32( 0x0099ccff ));  // blue 8
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_TRANSPARENCY ));
-    rOutMap[ PROP_DATAPOINT_TRANSPARENCY ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_TRANSPARENCY' ));
+    rOutMap[ 'PROP_DATAPOINT_TRANSPARENCY' ] =
         uno::makeAny( sal_Int16( 0 ) );
 
     //fill
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_STYLE ));
-    rOutMap[ PROP_DATAPOINT_FILL_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_FILL_STYLE' ));
+    rOutMap[ 'PROP_DATAPOINT_FILL_STYLE' ] =
         uno::makeAny( drawing::FillStyle_SOLID );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_TRANSPARENCY_GRADIENT_NAME ));
-    rOutMap[ PROP_DATAPOINT_TRANSPARENCY_GRADIENT_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_TRANSPARENCY_GRADIENT_NAME' ));
+    rOutMap[ 'PROP_DATAPOINT_TRANSPARENCY_GRADIENT_NAME' ] =
         uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GRADIENT_NAME ));
-    rOutMap[ PROP_DATAPOINT_GRADIENT_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_GRADIENT_NAME' ));
+    rOutMap[ 'PROP_DATAPOINT_GRADIENT_NAME' ] =
         uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GRADIENT_STEPCOUNT ));
-    rOutMap[ PROP_DATAPOINT_GRADIENT_STEPCOUNT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_GRADIENT_STEPCOUNT' ));
+    rOutMap[ 'PROP_DATAPOINT_GRADIENT_STEPCOUNT' ] =
         uno::makeAny(sal_Int16(0));
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_HATCH_NAME ));
-    rOutMap[ PROP_DATAPOINT_HATCH_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_HATCH_NAME' ));
+    rOutMap[ 'PROP_DATAPOINT_HATCH_NAME' ] =
         uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_BITMAP_NAME ));
-    rOutMap[ PROP_DATAPOINT_FILL_BITMAP_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_FILL_BITMAP_NAME' ));
+    rOutMap[ 'PROP_DATAPOINT_FILL_BITMAP_NAME' ] =
         uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_BACKGROUND ));
-    rOutMap[ PROP_DATAPOINT_FILL_BACKGROUND ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_FILL_BACKGROUND' ));
+    rOutMap[ 'PROP_DATAPOINT_FILL_BACKGROUND' ] =
         uno::makeAny( false );
 
     //border
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_COLOR ));
-    rOutMap[ PROP_DATAPOINT_BORDER_COLOR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_BORDER_COLOR' ));
+    rOutMap[ 'PROP_DATAPOINT_BORDER_COLOR' ] =
         uno::makeAny( sal_Int32( 0x00000000 ));  // black
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_STYLE ));
-    rOutMap[ PROP_DATAPOINT_BORDER_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_BORDER_STYLE' ));
+    rOutMap[ 'PROP_DATAPOINT_BORDER_STYLE' ] =
         uno::makeAny( drawing::LineStyle_SOLID );
 //         uno::makeAny( drawing::LineStyle_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_WIDTH ));
-    rOutMap[ PROP_DATAPOINT_BORDER_WIDTH ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_BORDER_WIDTH' ));
+    rOutMap[ 'PROP_DATAPOINT_BORDER_WIDTH' ] =
         uno::makeAny( sal_Int32( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_DASH_NAME ));
-    rOutMap[ PROP_DATAPOINT_BORDER_DASH_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_BORDER_DASH_NAME' ));
+    rOutMap[ 'PROP_DATAPOINT_BORDER_DASH_NAME' ] =
         uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_TRANSPARENCY ));
-    rOutMap[ PROP_DATAPOINT_BORDER_TRANSPARENCY ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_BORDER_TRANSPARENCY' ));
+    rOutMap[ 'PROP_DATAPOINT_BORDER_TRANSPARENCY' ] =
         uno::makeAny( sal_Int16( 0 ) );
 
     //line
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_STYLE ));
-    rOutMap[ LineProperties::PROP_LINE_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'LineProperties::PROP_LINE_STYLE' ));
+    rOutMap[ 'LineProperties::PROP_LINE_STYLE' ] =
         uno::makeAny( drawing::LineStyle_SOLID );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_WIDTH ));
-    rOutMap[ LineProperties::PROP_LINE_WIDTH ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'LineProperties::PROP_LINE_WIDTH' ));
+    rOutMap[ 'LineProperties::PROP_LINE_WIDTH' ] =
         uno::makeAny( sal_Int32( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_DASH ));
-    rOutMap[ LineProperties::PROP_LINE_DASH ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'LineProperties::PROP_LINE_DASH' ));
+    rOutMap[ 'LineProperties::PROP_LINE_DASH' ] =
         uno::Any( drawing::LineDash() );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_DASH_NAME ));
-    rOutMap[ LineProperties::PROP_LINE_DASH_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'LineProperties::PROP_LINE_DASH_NAME' ));
+    rOutMap[ 'LineProperties::PROP_LINE_DASH_NAME' ] =
         uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
 
     //fill
@@ -440,26 +440,26 @@
     uno::Any aSalInt16Zero = uno::makeAny( sal_Int16( 0 ));
     uno::Any aSalInt32SizeDefault = uno::makeAny( sal_Int32( 0 ));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_OFFSETX ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_OFFSETY ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_OFFSETX' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_OFFSETX' ] = aSalInt16Zero;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_OFFSETY' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_OFFSETY' ] = aSalInt16Zero;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX' ] = aSalInt16Zero;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY' ] = aSalInt16Zero;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT' ] =
         uno::makeAny( drawing::RectanglePoint_MIDDLE_MIDDLE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_LOGICALSIZE' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_LOGICALSIZE' ] =
         uno::makeAny( true );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_SIZEX ] = aSalInt32SizeDefault;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_SIZEY ] = aSalInt32SizeDefault;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_MODE ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_MODE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_SIZEX' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_SIZEX' ] = aSalInt32SizeDefault;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_SIZEY' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_SIZEY' ] = aSalInt32SizeDefault;
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'FillProperties::PROP_FILL_BITMAP_MODE' ));
+    rOutMap[ 'FillProperties::PROP_FILL_BITMAP_MODE' ] =
         uno::makeAny( drawing::BitmapMode_REPEAT );
 
     //others
@@ -469,20 +469,20 @@
     aSymbProp.Size = awt::Size( 250, 250 ); // ca. 7pt x 7pt (7pt=246.94)
     aSymbProp.BorderColor = 0x000000;       // Black
     aSymbProp.FillColor = 0xee4000;         // OrangeRed2
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_SYMBOL_PROP ));
-    rOutMap[ PROP_DATAPOINT_SYMBOL_PROP ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_SYMBOL_PROP' ));
+    rOutMap[ 'PROP_DATAPOINT_SYMBOL_PROP' ] =
         uno::makeAny( aSymbProp );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_OFFSET ));
-    rOutMap[ PROP_DATAPOINT_OFFSET ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_OFFSET' ));
+    rOutMap[ 'PROP_DATAPOINT_OFFSET' ] =
         uno::makeAny( double( 0.0 ) );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GEOMETRY3D ));
-    rOutMap[ PROP_DATAPOINT_GEOMETRY3D ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_GEOMETRY3D' ));
+    rOutMap[ 'PROP_DATAPOINT_GEOMETRY3D' ] =
         uno::makeAny( chart2::DataPointGeometry3D::CUBOID );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_LABEL ));
-    rOutMap[ PROP_DATAPOINT_LABEL ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_LABEL' ));
+    rOutMap[ 'PROP_DATAPOINT_LABEL' ] =
         uno::makeAny( chart2::DataPointLabel(
                           sal_False, // ShowNumber
                           sal_False, // ShowNumberInPercent
@@ -490,20 +490,20 @@
                           sal_False // ShowLegendSymbol
                           ));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_NUMBER_FORMAT ));
-    rOutMap[ PROP_DATAPOINT_NUMBER_FORMAT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_NUMBER_FORMAT' ));
+    rOutMap[ 'PROP_DATAPOINT_NUMBER_FORMAT' ] =
         uno::makeAny( sal_Int32(0) ); //todo maybe choose a different one here -> should be dynamically that of the attached axis
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_ERROR_BAR_X ));
-    rOutMap[ PROP_DATAPOINT_ERROR_BAR_X ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_ERROR_BAR_X' ));
+    rOutMap[ 'PROP_DATAPOINT_ERROR_BAR_X' ] =
         uno::makeAny( uno::Reference< beans::XPropertySet >(0) );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_ERROR_BAR_Y ));
-    rOutMap[ PROP_DATAPOINT_ERROR_BAR_Y ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_ERROR_BAR_Y' ));
+    rOutMap[ 'PROP_DATAPOINT_ERROR_BAR_Y' ] =
         uno::makeAny( uno::Reference< beans::XPropertySet >(0) );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_PERCENT_DIAGONAL ));
-    rOutMap[ PROP_DATAPOINT_PERCENT_DIAGONAL ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATAPOINT_PERCENT_DIAGONAL' ));
+    rOutMap[ 'PROP_DATAPOINT_PERCENT_DIAGONAL' ] =
         uno::makeAny( static_cast< sal_Int16 >(5) );
 }
 
--- chart2/source/model/main/DataSeriesProperties.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/main/DataSeriesProperties.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -100,16 +100,16 @@
 void DataSeriesProperties::AddDefaultsToMap(
     tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_STACKING_DIRECTION ));
-    rOutMap[ PROP_DATASERIES_STACKING_DIRECTION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATASERIES_STACKING_DIRECTION' ));
+    rOutMap[ 'PROP_DATASERIES_STACKING_DIRECTION' ] =
         uno::makeAny( chart2::StackingDirection_NO_STACKING );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_VARY_COLORS_BY_POINT ));
-    rOutMap[ PROP_DATASERIES_VARY_COLORS_BY_POINT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATASERIES_VARY_COLORS_BY_POINT' ));
+    rOutMap[ 'PROP_DATASERIES_VARY_COLORS_BY_POINT' ] =
         uno::makeAny( false );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_ATTACHED_AXIS_INDEX ));
-    rOutMap[ PROP_DATASERIES_ATTACHED_AXIS_INDEX ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DATASERIES_ATTACHED_AXIS_INDEX' ));
+    rOutMap[ 'PROP_DATASERIES_ATTACHED_AXIS_INDEX' ] =
         uno::makeAny( sal_Int32(0) );
 
     // PROP_DATASERIES_ATTRIBUTED_DATA_POINTS has no default
--- chart2/source/model/main/Diagram.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/main/Diagram.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -126,12 +126,12 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DIAGRAM_SORT_BY_X_VALUES ));
-    rOutMap[ PROP_DIAGRAM_SORT_BY_X_VALUES ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DIAGRAM_SORT_BY_X_VALUES' ));
+    rOutMap[ 'PROP_DIAGRAM_SORT_BY_X_VALUES' ] =
         uno::makeAny( sal_False );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DIAGRAM_CONNECT_BARS ));
-    rOutMap[ PROP_DIAGRAM_CONNECT_BARS ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_DIAGRAM_CONNECT_BARS' ));
+    rOutMap[ 'PROP_DIAGRAM_CONNECT_BARS' ] =
         uno::makeAny( false );
 }
 
--- chart2/source/model/main/Legend.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/main/Legend.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -132,20 +132,20 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LEGEND_ANCHOR_POSITION ));
-    rOutMap[ PROP_LEGEND_ANCHOR_POSITION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LEGEND_ANCHOR_POSITION' ));
+    rOutMap[ 'PROP_LEGEND_ANCHOR_POSITION' ] =
         uno::makeAny( chart2::LegendPosition_LINE_END );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LEGEND_SHOW ));
-    rOutMap[ PROP_LEGEND_SHOW ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LEGEND_SHOW' ));
+    rOutMap[ 'PROP_LEGEND_SHOW' ] =
         uno::makeAny( sal_True );
 
     float fDefaultCharHeight = 8.0;
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT ] =
+    rOutMap[ '::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultCharHeight );
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT ] =
+    rOutMap[ '::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultCharHeight );
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT ] =
+    rOutMap[ '::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultCharHeight );
 }
 
--- chart2/source/model/main/PageBackground.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/main/PageBackground.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -72,11 +72,11 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    rOutMap[ ::chart::FillProperties::PROP_FILL_COLOR ] =
+    rOutMap[ '::chart::FillProperties::PROP_FILL_COLOR' ] =
         uno::makeAny( sal_Int32( 0xffffff ));
 
     // override other defaults
-    rOutMap[ ::chart::LineProperties::PROP_LINE_STYLE ] =
+    rOutMap[ '::chart::LineProperties::PROP_LINE_STYLE' ] =
         uno::makeAny( drawing::LineStyle_NONE );
 }
 
--- chart2/source/model/main/Title.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/main/Title.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -189,40 +189,40 @@
     ::chart::tPropertyValueMap & rOutMap )
 {
     // ParagraphProperties
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_ADJUST ));
-    rOutMap[ PROP_TITLE_PARA_ADJUST ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_TITLE_PARA_ADJUST' ));
+    rOutMap[ 'PROP_TITLE_PARA_ADJUST' ] =
         uno::makeAny( ::com::sun::star::style::ParagraphAdjust_CENTER );
     // PROP_TITLE_PARA_LAST_LINE_ADJUST
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_LEFT_MARGIN ));
-    rOutMap[ PROP_TITLE_PARA_LEFT_MARGIN ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_TITLE_PARA_LEFT_MARGIN' ));
+    rOutMap[ 'PROP_TITLE_PARA_LEFT_MARGIN' ] =
         uno::makeAny( sal_Int32( 0 ));
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_RIGHT_MARGIN ));
-    rOutMap[ PROP_TITLE_PARA_RIGHT_MARGIN ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_TITLE_PARA_RIGHT_MARGIN' ));
+    rOutMap[ 'PROP_TITLE_PARA_RIGHT_MARGIN' ] =
         uno::makeAny( sal_Int32( 0 ));
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_TOP_MARGIN ));
-    rOutMap[ PROP_TITLE_PARA_TOP_MARGIN ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_TITLE_PARA_TOP_MARGIN' ));
+    rOutMap[ 'PROP_TITLE_PARA_TOP_MARGIN' ] =
         uno::makeAny( sal_Int32( 0 ));
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_BOTTOM_MARGIN ));
-    rOutMap[ PROP_TITLE_PARA_BOTTOM_MARGIN ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_TITLE_PARA_BOTTOM_MARGIN' ));
+    rOutMap[ 'PROP_TITLE_PARA_BOTTOM_MARGIN' ] =
         uno::makeAny( sal_Int32( 0 ));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_IS_HYPHENATION ));
-    rOutMap[ PROP_TITLE_PARA_IS_HYPHENATION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_TITLE_PARA_IS_HYPHENATION' ));
+    rOutMap[ 'PROP_TITLE_PARA_IS_HYPHENATION' ] =
         uno::makeAny( sal_True );
 
     // own properties
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_TEXT_ROTATION ));
-    rOutMap[ PROP_TITLE_TEXT_ROTATION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_TITLE_TEXT_ROTATION' ));
+    rOutMap[ 'PROP_TITLE_TEXT_ROTATION' ] =
         uno::makeAny( double( 0.0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_TEXT_STACKED ));
-    rOutMap[ PROP_TITLE_TEXT_STACKED ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_TITLE_TEXT_STACKED' ));
+    rOutMap[ 'PROP_TITLE_TEXT_STACKED' ] =
         uno::makeAny( sal_Bool( sal_False ) );
 
     // override other defaults
-    rOutMap[ ::chart::FillProperties::PROP_FILL_STYLE ] =
+    rOutMap[ '::chart::FillProperties::PROP_FILL_STYLE' ] =
         uno::makeAny( drawing::FillStyle_NONE );
-    rOutMap[ ::chart::LineProperties::PROP_LINE_STYLE ] =
+    rOutMap[ '::chart::LineProperties::PROP_LINE_STYLE' ] =
         uno::makeAny( drawing::LineStyle_NONE );
 }
 
--- chart2/source/model/main/Wall.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/main/Wall.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -94,7 +94,7 @@
     ::chart::tPropertyValueMap & rOutMap )
 {
     // override other defaults
-    rOutMap[ ::chart::LineProperties::PROP_LINE_STYLE ] =
+    rOutMap[ '::chart::LineProperties::PROP_LINE_STYLE' ] =
         uno::makeAny( drawing::LineStyle_NONE );
 }
 
--- chart2/source/model/template/AreaChartTypeTemplate.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/AreaChartTypeTemplate.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -87,8 +87,8 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AREA_TEMPLATE_DIMENSION ));
-    rOutMap[ PROP_AREA_TEMPLATE_DIMENSION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_AREA_TEMPLATE_DIMENSION' ));
+    rOutMap[ 'PROP_AREA_TEMPLATE_DIMENSION' ] =
         uno::makeAny( sal_Int32( 2 ) );
 }
 
--- chart2/source/model/template/BarChartTypeTemplate.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/BarChartTypeTemplate.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -97,11 +97,11 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BAR_TEMPLATE_DIMENSION ));
-    rOutMap[ PROP_BAR_TEMPLATE_DIMENSION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_BAR_TEMPLATE_DIMENSION' ));
+    rOutMap[ 'PROP_BAR_TEMPLATE_DIMENSION' ] =
         uno::makeAny( sal_Int32( 2 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BAR_TEMPLATE_GEOMETRY3D ));
-    rOutMap[ PROP_BAR_TEMPLATE_GEOMETRY3D ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_BAR_TEMPLATE_GEOMETRY3D' ));
+    rOutMap[ 'PROP_BAR_TEMPLATE_GEOMETRY3D' ] =
         uno::makeAny( chart2::DataPointGeometry3D::CUBOID );
 }
 
--- chart2/source/model/template/ColumnLineChartTypeTemplate.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/ColumnLineChartTypeTemplate.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -95,8 +95,8 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_COL_LINE_NUMBER_OF_LINES ));
-    rOutMap[ PROP_COL_LINE_NUMBER_OF_LINES ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_COL_LINE_NUMBER_OF_LINES' ));
+    rOutMap[ 'PROP_COL_LINE_NUMBER_OF_LINES' ] =
         uno::makeAny( sal_Int32( 1 ) );
 }
 
--- chart2/source/model/template/LineChartType.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/LineChartType.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -94,18 +94,18 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_CURVE_STYLE ));
-    rOutMap[ PROP_LINECHARTTYPE_CURVE_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINECHARTTYPE_CURVE_STYLE' ));
+    rOutMap[ 'PROP_LINECHARTTYPE_CURVE_STYLE' ] =
         uno::makeAny( chart2::CurveStyle_LINES );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_CURVE_RESOLUTION ));
-    rOutMap[ PROP_LINECHARTTYPE_CURVE_RESOLUTION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINECHARTTYPE_CURVE_RESOLUTION' ));
+    rOutMap[ 'PROP_LINECHARTTYPE_CURVE_RESOLUTION' ] =
         uno::makeAny( sal_Int32( 20 ) );
 
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_SPLINE_ORDER ));
-    rOutMap[ PROP_LINECHARTTYPE_SPLINE_ORDER ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINECHARTTYPE_SPLINE_ORDER' ));
+    rOutMap[ 'PROP_LINECHARTTYPE_SPLINE_ORDER' ] =
         uno::makeAny( sal_Int32( 3 ) );
 }
 
--- chart2/source/model/template/LineChartTypeTemplate.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/LineChartTypeTemplate.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -111,18 +111,18 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_CURVE_STYLE ));
-    rOutMap[ PROP_LINECHARTTYPE_TEMPLATE_CURVE_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINECHARTTYPE_TEMPLATE_CURVE_STYLE' ));
+    rOutMap[ 'PROP_LINECHARTTYPE_TEMPLATE_CURVE_STYLE' ] =
         uno::makeAny( chart2::CurveStyle_LINES );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_CURVE_RESOLUTION ));
-    rOutMap[ PROP_LINECHARTTYPE_TEMPLATE_CURVE_RESOLUTION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINECHARTTYPE_TEMPLATE_CURVE_RESOLUTION' ));
+    rOutMap[ 'PROP_LINECHARTTYPE_TEMPLATE_CURVE_RESOLUTION' ] =
         uno::makeAny( sal_Int32( 20 ) );
 
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_SPLINE_ORDER ));
-    rOutMap[ PROP_LINECHARTTYPE_TEMPLATE_SPLINE_ORDER ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_LINECHARTTYPE_TEMPLATE_SPLINE_ORDER' ));
+    rOutMap[ 'PROP_LINECHARTTYPE_TEMPLATE_SPLINE_ORDER' ] =
         uno::makeAny( sal_Int32( 3 ) );
 }
 
--- chart2/source/model/template/PieChartType.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/PieChartType.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -84,8 +84,8 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIECHARTTYPE_USE_RINGS ));
-    rOutMap[ PROP_PIECHARTTYPE_USE_RINGS ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_PIECHARTTYPE_USE_RINGS' ));
+    rOutMap[ 'PROP_PIECHARTTYPE_USE_RINGS' ] =
         uno::makeAny( sal_False );
 }
 
--- chart2/source/model/template/PieChartTypeTemplate.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/PieChartTypeTemplate.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -126,17 +126,17 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_OFFSET_MODE ));
-    rOutMap[ PROP_PIE_TEMPLATE_OFFSET_MODE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_PIE_TEMPLATE_OFFSET_MODE' ));
+    rOutMap[ 'PROP_PIE_TEMPLATE_OFFSET_MODE' ] =
         uno::makeAny( chart2::PieChartOffsetMode_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_DEFAULT_OFFSET ));
-    rOutMap[ PROP_PIE_TEMPLATE_DEFAULT_OFFSET ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_PIE_TEMPLATE_DEFAULT_OFFSET' ));
+    rOutMap[ 'PROP_PIE_TEMPLATE_DEFAULT_OFFSET' ] =
         uno::makeAny( double( 0.5 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_DIMENSION ));
-    rOutMap[ PROP_PIE_TEMPLATE_DIMENSION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_PIE_TEMPLATE_DIMENSION' ));
+    rOutMap[ 'PROP_PIE_TEMPLATE_DIMENSION' ] =
         uno::makeAny( sal_Int32( 2 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_USE_RINGS ));
-    rOutMap[ PROP_PIE_TEMPLATE_USE_RINGS ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_PIE_TEMPLATE_USE_RINGS' ));
+    rOutMap[ 'PROP_PIE_TEMPLATE_USE_RINGS' ] =
         uno::makeAny( sal_False );
 }
 
--- chart2/source/model/template/ScatterChartType.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/ScatterChartType.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -100,18 +100,18 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_CURVE_STYLE ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_CURVE_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_SCATTERCHARTTYPE_CURVE_STYLE' ));
+    rOutMap[ 'PROP_SCATTERCHARTTYPE_CURVE_STYLE' ] =
         uno::makeAny( chart2::CurveStyle_LINES );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_CURVE_RESOLUTION ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_CURVE_RESOLUTION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_SCATTERCHARTTYPE_CURVE_RESOLUTION' ));
+    rOutMap[ 'PROP_SCATTERCHARTTYPE_CURVE_RESOLUTION' ] =
         uno::makeAny( sal_Int32( 20 ) );
 
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_SPLINE_ORDER ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_SPLINE_ORDER ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_SCATTERCHARTTYPE_SPLINE_ORDER' ));
+    rOutMap[ 'PROP_SCATTERCHARTTYPE_SPLINE_ORDER' ] =
         uno::makeAny( sal_Int32( 3 ) );
 }
 
--- chart2/source/model/template/ScatterChartTypeTemplate.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/ScatterChartTypeTemplate.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -114,18 +114,18 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_STYLE ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_STYLE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_STYLE' ));
+    rOutMap[ 'PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_STYLE' ] =
         uno::makeAny( chart2::CurveStyle_LINES );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_RESOLUTION ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_RESOLUTION ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_RESOLUTION' ));
+    rOutMap[ 'PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_RESOLUTION' ] =
         uno::makeAny( sal_Int32( 20 ) );
 
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_SPLINE_ORDER ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_TEMPLATE_SPLINE_ORDER ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_SCATTERCHARTTYPE_TEMPLATE_SPLINE_ORDER' ));
+    rOutMap[ 'PROP_SCATTERCHARTTYPE_TEMPLATE_SPLINE_ORDER' ] =
         uno::makeAny( sal_Int32( 3 ) );
 }
 
--- chart2/source/model/template/StockChartTypeTemplate.cxx.orig	2007-06-26 01:34:57.000000000 +0200
+++ chart2/source/model/template/StockChartTypeTemplate.cxx	2007-06-26 01:34:57.000000000 +0200
@@ -134,17 +134,17 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_VOLUME ));
-    rOutMap[ PROP_STOCKCHARTTYPE_TEMPLATE_VOLUME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_STOCKCHARTTYPE_TEMPLATE_VOLUME' ));
+    rOutMap[ 'PROP_STOCKCHARTTYPE_TEMPLATE_VOLUME' ] =
         uno::makeAny( false );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_OPEN ));
-    rOutMap[ PROP_STOCKCHARTTYPE_TEMPLATE_OPEN ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_STOCKCHARTTYPE_TEMPLATE_OPEN' ));
+    rOutMap[ 'PROP_STOCKCHARTTYPE_TEMPLATE_OPEN' ] =
         uno::makeAny( false );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_LOW_HIGH ));
-    rOutMap[ PROP_STOCKCHARTTYPE_TEMPLATE_LOW_HIGH ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_STOCKCHARTTYPE_TEMPLATE_LOW_HIGH' ));
+    rOutMap[ 'PROP_STOCKCHARTTYPE_TEMPLATE_LOW_HIGH' ] =
         uno::makeAny( true );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_JAPANESE ));
-    rOutMap[ PROP_STOCKCHARTTYPE_TEMPLATE_JAPANESE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_STOCKCHARTTYPE_TEMPLATE_JAPANESE' ));
+    rOutMap[ 'PROP_STOCKCHARTTYPE_TEMPLATE_JAPANESE' ] =
         uno::makeAny( false );
 }
 
--- chart2/source/tools/CharacterProperties.cxx.orig	2007-06-26 01:24:02.000000000 +0200
+++ chart2/source/tools/CharacterProperties.cxx	2007-06-26 01:31:52.000000000 +0200
@@ -452,175 +452,175 @@
 {
     const float fDefaultFontHeight = 13.0;
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_NAME ));
-    rOutMap[ PROP_CHAR_FONT_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_FONT_NAME' ));
+    rOutMap[ 'PROP_CHAR_FONT_NAME' ] =
         uno::makeAny( C2U( "Albany" ));
     //todo correct font default:
     //see static Font OutputDevice::GetDefaultFont( USHORT nType, LanguageType eLang, ULONG nFlags, const OutputDevice* pOutDev = NULL );
     //or  SvxFontItem ... (old chart source/core/chtmodel.cxx :Font aCJKFont )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_STYLE_NAME ));
-    rOutMap[ PROP_CHAR_FONT_STYLE_NAME ] = uno::Any();
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_FAMILY ));
-    rOutMap[ PROP_CHAR_FONT_FAMILY ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_FONT_STYLE_NAME' ));
+    rOutMap[ 'PROP_CHAR_FONT_STYLE_NAME' ] = uno::Any();
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_FONT_FAMILY' ));
+    rOutMap[ 'PROP_CHAR_FONT_FAMILY' ] =
         uno::makeAny( awt::FontFamily::SWISS );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_CHAR_SET ));
-    rOutMap[ PROP_CHAR_FONT_CHAR_SET ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_FONT_CHAR_SET' ));
+    rOutMap[ 'PROP_CHAR_FONT_CHAR_SET' ] =
         uno::makeAny( awt::CharSet::DONTKNOW );//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_PITCH ));
-    rOutMap[ PROP_CHAR_FONT_PITCH ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_FONT_PITCH' ));
+    rOutMap[ 'PROP_CHAR_FONT_PITCH' ] =
         uno::makeAny( awt::FontPitch::VARIABLE );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COLOR ));
-    rOutMap[ PROP_CHAR_COLOR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COLOR' ));
+    rOutMap[ 'PROP_CHAR_COLOR' ] =
         uno::makeAny( sal_Int32(-1) );//automatic color (COL_AUTO)
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ESCAPEMENT ));
-    rOutMap[ PROP_CHAR_ESCAPEMENT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ESCAPEMENT' ));
+    rOutMap[ 'PROP_CHAR_ESCAPEMENT' ] =
         uno::makeAny( sal_Int16(0) );
     
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CHAR_HEIGHT ));
-    rOutMap[ PROP_CHAR_CHAR_HEIGHT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_CHAR_HEIGHT' ));
+    rOutMap[ 'PROP_CHAR_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultFontHeight );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE ));
-    rOutMap[ PROP_CHAR_UNDERLINE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_UNDERLINE' ));
+    rOutMap[ 'PROP_CHAR_UNDERLINE' ] =
         uno::makeAny( awt::FontUnderline::NONE );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE_COLOR ));
-    rOutMap[ PROP_CHAR_UNDERLINE_COLOR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_UNDERLINE_COLOR' ));
+    rOutMap[ 'PROP_CHAR_UNDERLINE_COLOR' ] =
         uno::makeAny( sal_Int32(-1) );//automatic color (COL_AUTO)
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE_HAS_COLOR ));
-    rOutMap[ PROP_CHAR_UNDERLINE_HAS_COLOR ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_UNDERLINE_HAS_COLOR' ));
+    rOutMap[ 'PROP_CHAR_UNDERLINE_HAS_COLOR' ] =
         uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_WEIGHT ));
-    rOutMap[ PROP_CHAR_WEIGHT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_WEIGHT' ));
+    rOutMap[ 'PROP_CHAR_WEIGHT' ] =
         uno::makeAny( awt::FontWeight::NORMAL );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_POSTURE ));
-    rOutMap[ PROP_CHAR_POSTURE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_POSTURE' ));
+    rOutMap[ 'PROP_CHAR_POSTURE' ] =
         uno::makeAny( awt::FontSlant_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_AUTO_KERNING ));
-    rOutMap[ PROP_CHAR_AUTO_KERNING ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_AUTO_KERNING' ));
+    rOutMap[ 'PROP_CHAR_AUTO_KERNING' ] =
         uno::makeAny( sal_True );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_KERNING ));
-    rOutMap[ PROP_CHAR_KERNING ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_KERNING' ));
+    rOutMap[ 'PROP_CHAR_KERNING' ] =
         uno::makeAny( sal_Int16(0) );//todo correct default
 
 
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CASE_MAPPING ));
-//     rOutMap[ PROP_CHAR_CASE_MAPPING ] =
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_CASE_MAPPING' ));
+//     rOutMap[ 'PROP_CHAR_CASE_MAPPING' ] =
 //         uno::makeAny( style::CaseMap::NONE );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ROTATION ));
-//     rOutMap[ PROP_CHAR_ROTATION ] =
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ROTATION' ));
+//     rOutMap[ 'PROP_CHAR_ROTATION' ] =
 //         uno::makeAny( sal_Int16( 0 ) );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_SCALE_WIDTH ));
-//     rOutMap[ PROP_CHAR_SCALE_WIDTH ] =
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_SCALE_WIDTH' ));
+//     rOutMap[ 'PROP_CHAR_SCALE_WIDTH' ] =
 //         uno::makeAny( sal_Int16( 71 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ESCAPEMENT_HEIGHT ));
-    rOutMap[ PROP_CHAR_ESCAPEMENT_HEIGHT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ESCAPEMENT_HEIGHT' ));
+    rOutMap[ 'PROP_CHAR_ESCAPEMENT_HEIGHT' ] =
         uno::makeAny( sal_Int8( 0 ) );
 
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CROSSED_OUT ));
-//     rOutMap[ PROP_CHAR_CROSSED_OUT ] =
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_CROSSED_OUT' ));
+//     rOutMap[ 'PROP_CHAR_CROSSED_OUT' ] =
 //         uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_STRIKE_OUT ));
-    rOutMap[ PROP_CHAR_STRIKE_OUT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_STRIKE_OUT' ));
+    rOutMap[ 'PROP_CHAR_STRIKE_OUT' ] =
         uno::makeAny( sal_Int16( awt::FontStrikeout::NONE ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_WORD_MODE ));
-    rOutMap[ PROP_CHAR_WORD_MODE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_WORD_MODE' ));
+    rOutMap[ 'PROP_CHAR_WORD_MODE' ] =
         uno::makeAny( sal_Bool( sal_False ) );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FLASH ));
-//     rOutMap[ PROP_CHAR_FLASH ] =
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_FLASH' ));
+//     rOutMap[ 'PROP_CHAR_FLASH' ] =
 //         uno::makeAny( sal_Bool( sal_False ) );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_LOCALE ));
-    rOutMap[ PROP_CHAR_LOCALE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_LOCALE' ));
+    rOutMap[ 'PROP_CHAR_LOCALE' ] =
         uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_SHADOWED ));
-    rOutMap[ PROP_CHAR_SHADOWED ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_SHADOWED' ));
+    rOutMap[ 'PROP_CHAR_SHADOWED' ] =
         uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CONTOURED ));
-    rOutMap[ PROP_CHAR_CONTOURED ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_CONTOURED' ));
+    rOutMap[ 'PROP_CHAR_CONTOURED' ] =
         uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RELIEF ));
-    rOutMap[ PROP_CHAR_RELIEF ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_RELIEF' ));
+    rOutMap[ 'PROP_CHAR_RELIEF' ] =
         uno::makeAny( text::FontRelief::NONE );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_EMPHASIS ));
-    rOutMap[ PROP_CHAR_EMPHASIS ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_EMPHASIS' ));
+    rOutMap[ 'PROP_CHAR_EMPHASIS' ] =
         uno::makeAny( text::FontEmphasis::NONE );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_ADJUST ));
-//     rOutMap[ PROP_CHAR_RUBY_ADJUST ] =
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_RUBY_ADJUST' ));
+//     rOutMap[ 'PROP_CHAR_RUBY_ADJUST' ] =
 //         uno::makeAny( text::RubyAdjust_INDENT_BLOCK );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_STYLE_NAME ));
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_IS_ABOVE ));
-//     rOutMap[ PROP_CHAR_RUBY_IS_ABOVE ] =
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_RUBY_STYLE_NAME' ));
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_RUBY_IS_ABOVE' ));
+//     rOutMap[ 'PROP_CHAR_RUBY_IS_ABOVE' ] =
 //         uno::makeAny( sal_Bool( sal_True ) );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_INHIBIT_HYPHENATION ));
-//     rOutMap[ PROP_CHAR_INHIBIT_HYPHENATION ] =
+//     OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_INHIBIT_HYPHENATION' ));
+//     rOutMap[ 'PROP_CHAR_INHIBIT_HYPHENATION' ] =
 //         uno::makeAny( sal_Bool( sal_False ) );
 
     // Asian (com.sun.star.style.CharacterPropertiesAsian)
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_CHAR_HEIGHT ));
-    rOutMap[ PROP_CHAR_ASIAN_CHAR_HEIGHT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_CHAR_HEIGHT' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultFontHeight );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_WEIGHT ));
-    rOutMap[ PROP_CHAR_ASIAN_WEIGHT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_WEIGHT' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_WEIGHT' ] =
         uno::makeAny( awt::FontWeight::NORMAL );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_POSTURE ));
-    rOutMap[ PROP_CHAR_ASIAN_POSTURE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_POSTURE' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_POSTURE' ] =
         uno::makeAny( awt::FontSlant_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_LOCALE ));
-    rOutMap[ PROP_CHAR_ASIAN_LOCALE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_LOCALE' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_LOCALE' ] =
         uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_NAME ));
-    rOutMap[ PROP_CHAR_ASIAN_FONT_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_FONT_NAME' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_FONT_NAME' ] =
         uno::makeAny( C2U( "Andale Sans UI" ));
     //todo correct font default:
     //see static Font OutputDevice::GetDefaultFont( USHORT nType, LanguageType eLang, ULONG nFlags, const OutputDevice* pOutDev = NULL );
     //or  SvxFontItem ... (old chart source/core/chtmodel.cxx :Font aCJKFont )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_STYLE_NAME ));
-    rOutMap[ PROP_CHAR_ASIAN_FONT_STYLE_NAME ] = uno::Any();
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_FAMILY ));
-    rOutMap[ PROP_CHAR_ASIAN_FONT_FAMILY ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_FONT_STYLE_NAME' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_FONT_STYLE_NAME' ] = uno::Any();
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_FONT_FAMILY' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_FONT_FAMILY' ] =
         uno::makeAny( awt::FontFamily::SWISS );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_CHAR_SET ));
-    rOutMap[ PROP_CHAR_ASIAN_CHAR_SET ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_CHAR_SET' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_CHAR_SET' ] =
         uno::makeAny( awt::CharSet::DONTKNOW );//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_PITCH ));
-    rOutMap[ PROP_CHAR_ASIAN_FONT_PITCH ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_ASIAN_FONT_PITCH' ));
+    rOutMap[ 'PROP_CHAR_ASIAN_FONT_PITCH' ] =
         uno::makeAny( awt::FontPitch::VARIABLE );
 
     // Complex Text Layout (com.sun.star.style.CharacterPropertiesComplex)
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_CHAR_HEIGHT ));
-    rOutMap[ PROP_CHAR_COMPLEX_CHAR_HEIGHT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_CHAR_HEIGHT' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_CHAR_HEIGHT' ] =
         uno::makeAny( fDefaultFontHeight );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_WEIGHT ));
-    rOutMap[ PROP_CHAR_COMPLEX_WEIGHT ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_WEIGHT' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_WEIGHT' ] =
         uno::makeAny( awt::FontWeight::NORMAL );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_POSTURE ));
-    rOutMap[ PROP_CHAR_COMPLEX_POSTURE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_POSTURE' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_POSTURE' ] =
         uno::makeAny( awt::FontSlant_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_LOCALE ));
-    rOutMap[ PROP_CHAR_COMPLEX_LOCALE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_LOCALE' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_LOCALE' ] =
         uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_NAME ));
-    rOutMap[ PROP_CHAR_COMPLEX_FONT_NAME ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_FONT_NAME' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_FONT_NAME' ] =
         uno::makeAny( C2U( "Tahoma" ));//todo correct default
     //todo correct font default:
     //see static Font OutputDevice::GetDefaultFont( USHORT nType, LanguageType eLang, ULONG nFlags, const OutputDevice* pOutDev = NULL );
     //or  SvxFontItem ... (old chart source/core/chtmodel.cxx :Font aCJKFont )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_STYLE_NAME ));
-    rOutMap[ PROP_CHAR_COMPLEX_FONT_STYLE_NAME ] = uno::Any();
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_FAMILY ));
-    rOutMap[ PROP_CHAR_COMPLEX_FONT_FAMILY ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_FONT_STYLE_NAME' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_FONT_STYLE_NAME' ] = uno::Any();
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_FONT_FAMILY' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_FONT_FAMILY' ] =
         uno::makeAny( awt::FontFamily::SWISS );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_CHAR_SET ));
-    rOutMap[ PROP_CHAR_COMPLEX_CHAR_SET ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_CHAR_SET' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_CHAR_SET' ] =
         uno::makeAny( awt::CharSet::DONTKNOW );//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_PITCH ));
-    rOutMap[ PROP_CHAR_COMPLEX_FONT_PITCH ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CHAR_COMPLEX_FONT_PITCH' ));
+    rOutMap[ 'PROP_CHAR_COMPLEX_FONT_PITCH' ] =
         uno::makeAny( awt::FontPitch::VARIABLE );
 }
 
--- chart2/source/tools/SceneProperties.cxx.orig	2007-06-26 21:46:50.000000000 +0200
+++ chart2/source/tools/SceneProperties.cxx	2007-06-26 21:47:15.000000000 +0200
@@ -350,64 +350,64 @@
         aMtx.Line3.Column1 = aMtx.Line3.Column2 = aMtx.Line3.Column4 =
         aMtx.Line4.Column1 = aMtx.Line4.Column2 = aMtx.Line4.Column3 = 0.0;
 
-    rOutMap[ PROP_SCENE_TRANSF_MATRIX ] = uno::makeAny( aMtx );
+    rOutMap[ 'PROP_SCENE_TRANSF_MATRIX' ] = uno::makeAny( aMtx );
 
     sal_Int32 nDefaultDistance = 4200;
-    rOutMap[ PROP_SCENE_DISTANCE ] = uno::makeAny( nDefaultDistance );
+    rOutMap[ 'PROP_SCENE_DISTANCE' ] = uno::makeAny( nDefaultDistance );
 
     sal_Int32 nDefaultFocalLength = 8000;
-    rOutMap[ PROP_SCENE_FOCAL_LENGTH ] = uno::makeAny( nDefaultFocalLength );
+    rOutMap[ 'PROP_SCENE_FOCAL_LENGTH' ] = uno::makeAny( nDefaultFocalLength );
 
-//     rOutMap[ PROP_SCENE_SHADOW_SLANT ];
+//     rOutMap[ 'PROP_SCENE_SHADOW_SLANT' ];
 
-    rOutMap[ PROP_SCENE_SHADE_MODE ] = uno::makeAny( drawing::ShadeMode_SMOOTH );
+    rOutMap[ 'PROP_SCENE_SHADE_MODE' ] = uno::makeAny( drawing::ShadeMode_SMOOTH );
 
     sal_Int32 nDefaultAmbientColor = 0x666666;  // grey80
-    rOutMap[ PROP_SCENE_AMBIENT_COLOR ] = uno::makeAny( nDefaultAmbientColor );
+    rOutMap[ 'PROP_SCENE_AMBIENT_COLOR' ] = uno::makeAny( nDefaultAmbientColor );
 
-    rOutMap[ PROP_SCENE_TWO_SIDED_LIGHTING ] = aTrue;
+    rOutMap[ 'PROP_SCENE_TWO_SIDED_LIGHTING' ] = aTrue;
 
     drawing::Position3D vrp( 0.0, 0.0, 1.0 );
     drawing::Direction3D vpn( 0.0, 0.0, 1.0 );
     drawing::Direction3D vup( 0.0, 1.0, 0.0 );
     drawing::CameraGeometry aDefaultCameraGeometry( vrp, vpn, vup );
-    rOutMap[ PROP_SCENE_CAMERA_GEOMETRY ] = uno::makeAny( aDefaultCameraGeometry );
+    rOutMap[ 'PROP_SCENE_CAMERA_GEOMETRY' ] = uno::makeAny( aDefaultCameraGeometry );
 
-    rOutMap[ PROP_SCENE_PERSPECTIVE ] = uno::makeAny( drawing::ProjectionMode_PERSPECTIVE );
+    rOutMap[ 'PROP_SCENE_PERSPECTIVE' ] = uno::makeAny( drawing::ProjectionMode_PERSPECTIVE );
 
     // Light Sources
     // -------------
-    rOutMap[ PROP_SCENE_LIGHT_ON_1 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_2 ] = aTrue;
-    rOutMap[ PROP_SCENE_LIGHT_ON_3 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_4 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_5 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_6 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_7 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_8 ] = aFalse;
+    rOutMap[ 'PROP_SCENE_LIGHT_ON_1' ] = aFalse;
+    rOutMap[ 'PROP_SCENE_LIGHT_ON_2' ] = aTrue;
+    rOutMap[ 'PROP_SCENE_LIGHT_ON_3' ] = aFalse;
+    rOutMap[ 'PROP_SCENE_LIGHT_ON_4' ] = aFalse;
+    rOutMap[ 'PROP_SCENE_LIGHT_ON_5' ] = aFalse;
+    rOutMap[ 'PROP_SCENE_LIGHT_ON_6' ] = aFalse;
+    rOutMap[ 'PROP_SCENE_LIGHT_ON_7' ] = aFalse;
+    rOutMap[ 'PROP_SCENE_LIGHT_ON_8' ] = aFalse;
 
     uno::Any aDefaultLightDirection;
     aDefaultLightDirection <<= drawing::Direction3D(0.57735026918963, 0.57735026918963, 0.57735026918963);
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_1 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_2 ] = aDefaultLightDirection;
+    rOutMap[ 'PROP_SCENE_LIGHT_DIRECTION_1' ] = aDefaultLightDirection;
+    rOutMap[ 'PROP_SCENE_LIGHT_DIRECTION_2' ] = aDefaultLightDirection;
     aDefaultLightDirection <<= drawing::Direction3D( 0.0, 0.0, 1.0 );
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_3 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_4 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_5 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_6 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_7 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_8 ] = aDefaultLightDirection;
+    rOutMap[ 'PROP_SCENE_LIGHT_DIRECTION_3' ] = aDefaultLightDirection;
+    rOutMap[ 'PROP_SCENE_LIGHT_DIRECTION_4' ] = aDefaultLightDirection;
+    rOutMap[ 'PROP_SCENE_LIGHT_DIRECTION_5' ] = aDefaultLightDirection;
+    rOutMap[ 'PROP_SCENE_LIGHT_DIRECTION_6' ] = aDefaultLightDirection;
+    rOutMap[ 'PROP_SCENE_LIGHT_DIRECTION_7' ] = aDefaultLightDirection;
+    rOutMap[ 'PROP_SCENE_LIGHT_DIRECTION_8' ] = aDefaultLightDirection;
 
     uno::Any aDefaultLightColor;
     aDefaultLightColor <<= static_cast< sal_Int32 >( 0xcccccc ); // grey20
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_1 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_2 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_3 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_4 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_5 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_6 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_7 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_8 ] = aDefaultLightColor;
+    rOutMap[ 'PROP_SCENE_LIGHT_COLOR_1' ] = aDefaultLightColor;
+    rOutMap[ 'PROP_SCENE_LIGHT_COLOR_2' ] = aDefaultLightColor;
+    rOutMap[ 'PROP_SCENE_LIGHT_COLOR_3' ] = aDefaultLightColor;
+    rOutMap[ 'PROP_SCENE_LIGHT_COLOR_4' ] = aDefaultLightColor;
+    rOutMap[ 'PROP_SCENE_LIGHT_COLOR_5' ] = aDefaultLightColor;
+    rOutMap[ 'PROP_SCENE_LIGHT_COLOR_6' ] = aDefaultLightColor;
+    rOutMap[ 'PROP_SCENE_LIGHT_COLOR_7' ] = aDefaultLightColor;
+    rOutMap[ 'PROP_SCENE_LIGHT_COLOR_8' ] = aDefaultLightColor;
 }
 
 } //  namespace chart
--- chart2/source/model/main/BaseCoordinateSystem.cxx.orig	2007-06-26 21:56:31.000000000 +0200
+++ chart2/source/model/main/BaseCoordinateSystem.cxx	2007-06-26 21:56:49.000000000 +0200
@@ -86,8 +86,8 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_COORDINATESYSTEM_SWAPXANDYAXIS ));
-    rOutMap[ PROP_COORDINATESYSTEM_SWAPXANDYAXIS ] = uno::makeAny( false );
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_COORDINATESYSTEM_SWAPXANDYAXIS' ));
+    rOutMap[ 'PROP_COORDINATESYSTEM_SWAPXANDYAXIS' ] = uno::makeAny( false );
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/main/DataSeries.cxx.orig	2007-06-26 21:58:15.000000000 +0200
+++ chart2/source/model/main/DataSeries.cxx	2007-06-26 21:59:30.000000000 +0200
@@ -252,11 +252,11 @@
         CharacterProperties::AddDefaultsToMap( aStaticDefaults );
 
         float fDefaultCharHeight = 6.0;
-        aStaticDefaults[ ::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT ] =
+        aStaticDefaults[ '::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT' ] =
             uno::makeAny( fDefaultCharHeight );
-        aStaticDefaults[ ::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT ] =
+        aStaticDefaults[ '::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT' ] =
             uno::makeAny( fDefaultCharHeight );
-        aStaticDefaults[ ::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT ] =
+        aStaticDefaults[ '::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT' ] =
             uno::makeAny( fDefaultCharHeight );
     }
 
--- chart2/source/model/main/GridProperties.cxx.orig	2007-06-26 22:03:01.000000000 +0200
+++ chart2/source/model/main/GridProperties.cxx	2007-06-26 22:04:38.000000000 +0200
@@ -93,11 +93,11 @@
 {
     ::chart::LineProperties::AddDefaultsToMap( rOutMap );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_GRID_SHOW ));
-    rOutMap[ PROP_GRID_SHOW ] = uno::makeAny( sal_False );
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_GRID_SHOW' ));
+    rOutMap[ 'PROP_GRID_SHOW' ] = uno::makeAny( sal_False );
 
     // override other defaults
-    rOutMap[ ::chart::LineProperties::PROP_LINE_COLOR ] =
+    rOutMap[ '::chart::LineProperties::PROP_LINE_COLOR' ] =
         uno::makeAny( sal_Int32( 0xb3b3b3) ); // gray30
 }
 
--- chart2/source/model/main/StockBar.cxx.orig	2007-06-26 22:08:27.000000000 +0200
+++ chart2/source/model/main/StockBar.cxx	2007-06-26 22:08:48.000000000 +0200
@@ -103,7 +103,7 @@
     ::chart::tPropertyValueMap & rOutMap )
 {
     // override other defaults
-    rOutMap[ ::chart::FillProperties::PROP_FILL_COLOR ] =
+    rOutMap[ '::chart::FillProperties::PROP_FILL_COLOR' ] =
         uno::makeAny( sal_Int32( 0xffffff) ); // white
 }
 
--- chart2/source/model/template/CandleStickChartType.cxx.orig	2007-06-26 22:11:04.000000000 +0200
+++ chart2/source/model/template/CandleStickChartType.cxx	2007-06-26 22:11:31.000000000 +0200
@@ -111,15 +111,15 @@
     ::osl::Mutex & rMutex )
 {
     // must match default in CTOR!
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_JAPANESE ));
-    rOutMap[ PROP_CANDLESTICKCHARTTYPE_JAPANESE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CANDLESTICKCHARTTYPE_JAPANESE' ));
+    rOutMap[ 'PROP_CANDLESTICKCHARTTYPE_JAPANESE' ] =
         uno::makeAny( false );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_SHOW_FIRST ));
-    rOutMap[ PROP_CANDLESTICKCHARTTYPE_SHOW_FIRST ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CANDLESTICKCHARTTYPE_SHOW_FIRST' ));
+    rOutMap[ 'PROP_CANDLESTICKCHARTTYPE_SHOW_FIRST' ] =
         uno::makeAny( false );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_SHOW_HIGH_LOW ));
-    rOutMap[ PROP_CANDLESTICKCHARTTYPE_SHOW_HIGH_LOW ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_CANDLESTICKCHARTTYPE_SHOW_HIGH_LOW' ));
+    rOutMap[ 'PROP_CANDLESTICKCHARTTYPE_SHOW_HIGH_LOW' ] =
         uno::makeAny( true );
 }
 
--- chart2/source/model/template/ColumnChartType.cxx.orig	2007-06-26 22:14:25.000000000 +0200
+++ chart2/source/model/template/ColumnChartType.cxx	2007-06-26 22:14:44.000000000 +0200
@@ -84,13 +84,13 @@
     Sequence< sal_Int32 > aSeq(2);
 
     aSeq[0]=aSeq[1]=0;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BARCHARTTYPE_OVERLAP_SEQUENCE ));
-    rOutMap[ PROP_BARCHARTTYPE_OVERLAP_SEQUENCE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_BARCHARTTYPE_OVERLAP_SEQUENCE' ));
+    rOutMap[ 'PROP_BARCHARTTYPE_OVERLAP_SEQUENCE' ] =
         uno::makeAny( aSeq );
 
     aSeq[0]=aSeq[1]=100;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE ));
-    rOutMap[ PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE ] =
+    OSL_ASSERT( rOutMap.end() == rOutMap.find( 'PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE' ));
+    rOutMap[ 'PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE' ] =
         uno::makeAny( aSeq );
 }
 
--- chart2/source/view/main/ChartView.hxx.orig	2007-06-26 22:27:46.000000000 +0200
+++ chart2/source/view/main/ChartView.hxx	2007-06-26 22:26:18.000000000 +0200
@@ -35,6 +35,7 @@
 #ifndef _CHARTVIEWIMPL_HXX
 #define _CHARTVIEWIMPL_HXX
 
+#include <vector>
 #include "chartview/ExplicitValueProvider.hxx"
 #include "ServiceMacros.hxx"
 
@@ -82,7 +83,6 @@
 #include <com/sun/star/util/XUpdatable.hpp>
 #endif
 
-#include <vector>
 #include <boost/shared_ptr.hpp>
 
 class SdrPage;
