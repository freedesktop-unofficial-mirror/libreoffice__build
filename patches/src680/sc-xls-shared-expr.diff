Index: sc/source/filter/inc/namebuff.hxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/inc/namebuff.hxx,v
retrieving revision 1.9
diff -u -w -p -r1.9 namebuff.hxx
--- sc/source/filter/inc/namebuff.hxx	9 Nov 2004 15:06:47 -0000	1.9
+++ sc/source/filter/inc/namebuff.hxx	25 May 2005 20:41:02 -0000
@@ -78,6 +78,8 @@
 #endif
 
 #include "rangenam.hxx"
+#include <hash_map>
+#include <list>
 
 class ScDocument;
 class ScTokenArray;
@@ -212,15 +214,24 @@ inline void NameBuffer::SetBase( UINT16 
 
 
 
-class ShrfmlaBuffer : private List, public ExcRoot
+class ShrfmlaBuffer : public ExcRoot
 {
-private:
-	UINT16					nBase;			// Startwert Indizierung
+	struct ScAddressHashFunc : public std::unary_function< const ScAddress &, size_t >
+	{
+		size_t operator() (const ScAddress &addr) const;
+	};
+	typedef	std::hash_map <ScAddress, UINT16, ScAddressHashFunc> ShrfmlaHash;
+	typedef	std::list <ScRange>									 ShrfmlaList;
+
+	ShrfmlaHash	 index_hash;
+	ShrfmlaList	 index_list;
+	unsigned int cur_index;
+
 public:
 							ShrfmlaBuffer( RootData* pRD );
 	virtual					~ShrfmlaBuffer();
 	void					Store( const ScRange& rRange, const ScTokenArray& );
-	UINT16					Find( const ScAddress aAdress );
+	UINT16					Find (const ScAddress & aAdress ) const;
 
 	static String			CreateName( const ScRange& );
 	};
Index: sc/source/filter/excel/namebuff.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/excel/namebuff.cxx,v
retrieving revision 1.20
diff -u -w -p -r1.20 namebuff.cxx
--- sc/source/filter/excel/namebuff.cxx	21 Feb 2005 13:27:22 -0000	1.20
+++ sc/source/filter/excel/namebuff.cxx	7 Jun 2005 16:12:21 -0000
@@ -161,75 +161,56 @@ UINT16	nShrCnt;
 #endif
 
 
-ShrfmlaBuffer::ShrfmlaBuffer( RootData* pRD ) :
-	ExcRoot( pRD )
+size_t
+ShrfmlaBuffer::ScAddressHashFunc::operator() (const ScAddress &addr) const
 {
-	nBase = 16384;	// Range~ und Shared~ Dingens mit jeweils der Haelfte Ids
+	// Use something simple, it is just a hash.
+	return (static_cast <UINT16> (addr.Row()) << 0) |
+		   (static_cast <UINT8> (addr.Col()) << 16) |
+		   (static_cast <UINT8> (addr.Tab()) << 24);
+}
 
+static const UINT16 nBase = 16384;	// Range~ und Shared~ Dingens mit jeweils der Haelfte Ids
+ShrfmlaBuffer::ShrfmlaBuffer( RootData* pRD ) :
+	ExcRoot( pRD ),
+	cur_index (nBase)
+{
 #ifdef DBG_UTIL
 	nShrCnt = 0;
 #endif
 }
 
-
 ShrfmlaBuffer::~ShrfmlaBuffer()
 {
-	register ScAddress*	pDel = ( ScAddress* ) List::First();
-
-	while( pDel )
-	{
-		delete pDel;
-		pDel = ( ScAddress* ) List::Next();
-	}
 }
 
-
 void ShrfmlaBuffer::Store( const ScRange& rRange, const ScTokenArray& rToken )
 {
 	String			aName( CreateName( rRange.aStart ) );
 
-	DBG_ASSERT( List::Count() + nBase <= 0xFFFF, "*ShrfmlaBuffer::Store(): Gleich wird mir schlecht...!" );
+	DBG_ASSERT( cur_index <= 0xFFFF, "*ShrfmlaBuffer::Store(): Gleich wird mir schlecht...!" );
 
     ScRangeData* pData = new ScRangeData( pExcRoot->pIR->GetDocPtr(), aName, rToken, rRange.aStart, RT_SHARED );
-
-	pData->SetIndex( ( UINT16 ) ( List::Count() + nBase ) );
-
+	pData->SetIndex (cur_index);
     pExcRoot->pIR->GetNamedRanges().Insert( pData );
-
-	ScRange*		pNew = new ScRange( rRange );
-	Insert( pNew, LIST_APPEND );
+	index_hash[rRange.aStart] = cur_index;
+	index_list.push_front (rRange);
+	cur_index++;
 }
 
 
-UINT16 ShrfmlaBuffer::Find( const ScAddress aAddr )
+UINT16 ShrfmlaBuffer::Find( const ScAddress & aAddr ) const
 {
-	register ScRange*	pAkt = ( ScRange* ) List::First();
-	ScAddress			aSearchAddr( aAddr );
-
-	register UINT16		nPos = nBase;
-
-	while( pAkt )
-	{
-		if( pAkt->aStart == aSearchAddr )
-			return nPos;
-
-		nPos++;
-		pAkt = ( ScRange* ) List::Next();
-	}
-
-	nPos = nBase;
-	pAkt = ( ScRange* ) List::First();
-
-	while( pAkt )
-	{
-		if( pAkt->In( aSearchAddr ) )
-			return nPos;
-
-		nPos++;
-		pAkt = ( ScRange* ) List::Next();
-	}
+	ShrfmlaHash::const_iterator hash = index_hash.find (aAddr);
+	if (hash != index_hash.end())
+		return hash->second;
 
-	return nPos;
+	// It was not hashed on the top left corner ?  do a brute force search
+	unsigned int ind = nBase;
+	for (ShrfmlaList::const_iterator ptr = index_list.end(); ptr != index_list.begin() ; ind++)
+		if ((--ptr)->In (aAddr))
+			return ind;
+	return cur_index;
 }
 
 
