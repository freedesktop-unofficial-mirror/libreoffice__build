--- sd/source/filter/eppt/pptexanimations.hxx.old	2005-09-23 12:43:53.000000000 +0200
+++ sd/source/filter/eppt/pptexanimations.hxx	2005-11-25 11:47:43.000000000 +0100
@@ -133,7 +133,7 @@
 	bool hasAfterEffectNode( const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode, ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xAfterEffectNode ) const;
 	bool isEmptyNode( const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode ) const;
 
-	::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode > AnimationExporter::createAfterEffectNodeClone( const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode ) const;
+	::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode > createAfterEffectNodeClone( const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimationNode >& xNode ) const;
 
 	std::list< AfterEffectNodePtr > maAfterEffectNodes;
 
--- sd/source/ui/inc/pubdlg.hxx.old	2005-11-21 15:55:13.000000000 +0100
+++ sd/source/ui/inc/pubdlg.hxx	2005-11-25 11:21:00.000000000 +0100
@@ -242,7 +242,7 @@
 	SdPublishingDlg(Window* pWindow, DocumentType eDocType);
 	~SdPublishingDlg();
 
-	void SdPublishingDlg::GetParameterSequence( ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& rParams );
+	void GetParameterSequence( ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& rParams );
 };
 
 #endif // _SD_PUBDLG_HXX
--- sd/source/ui/slidesorter/cache/SlsBitmapCache.cxx.old	2005-10-24 09:39:05.000000000 +0200
+++ sd/source/ui/slidesorter/cache/SlsBitmapCache.cxx	2005-11-25 11:34:49.000000000 +0100
@@ -64,7 +64,7 @@
         sal_Int32 nLastAccessTime, bool bIsPrecious);
     CacheEntry(sal_Int32 nLastAccessTime, bool bIsPrecious);
     ~CacheEntry (void) {};
-    inline void CacheEntry::Recycle (const CacheEntry& rEntry);
+    inline void Recycle (const CacheEntry& rEntry);
     inline sal_Int32 GetMemorySize (void) const;
     void Compress (const ::boost::shared_ptr<BitmapCompressor>& rpCompressor);
     inline void Decompress (void);
