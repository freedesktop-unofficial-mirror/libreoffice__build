Only in sc: Debug
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/inc/compiler.hxx sc/inc/compiler.hxx
--- sc.clean/inc/compiler.hxx	2008-03-03 11:24:43.000000000 -0500
+++ sc/inc/compiler.hxx	2008-03-25 11:53:47.000000000 -0400
@@ -236,26 +236,6 @@ typedef ::std::hash_map< String, String,
 class SC_DLLPUBLIC ScCompiler
 {
 public:
-	struct Convention
-	{
-		const ScAddress::Convention meConv;
-		const ULONG*   				mpCharTable;
-
-
-		Convention( ScAddress::Convention eConvP );
-        virtual ~Convention();
-
-		virtual void MakeRefStr( rtl::OUStringBuffer&	rBuffer,
-								 const ScCompiler&		rCompiler,
-								 const ComplRefData&	rRef,
-								 BOOL bSingleRef ) const = 0;
-		virtual ::com::sun::star::i18n::ParseResult
-					parseAnyToken( const String& rFormula,
-								   xub_StrLen nSrcPos,
-								   const CharClass* pCharClass) const = 0;
-	};
-    friend struct Convention;
-
     /** Mappings from strings to OpCodes and vice versa. */
     class OpCodeMap
     {
@@ -362,6 +342,30 @@ private:
     typedef ::boost::shared_ptr< const OpCodeMap > OpCodeMapPtr;
     typedef ::boost::shared_ptr< OpCodeMap > NonConstOpCodeMapPtr;
 
+    struct Convention
+    {
+        const ScAddress::Convention meConv;
+        const ULONG*                mpCharTable;
+
+
+        Convention( ScAddress::Convention eConvP );
+        virtual ~Convention();
+
+        virtual void MakeRefStr( rtl::OUStringBuffer&   rBuffer,
+                                 const ScCompiler&      rCompiler,
+                                 const ComplRefData&    rRef,
+                                 BOOL bSingleRef ) const = 0;
+        virtual ::com::sun::star::i18n::ParseResult
+                    parseAnyToken( const String& rFormula,
+                                   xub_StrLen nSrcPos,
+                                   const CharClass* pCharClass) const = 0;
+
+        virtual const String& GetSymbol( const OpCodeMapPtr& rpMap, OpCode e ) const = 0;
+
+        virtual OpCode GetOpCode( const OpCodeMapPtr& rpMap, const String& rName, bool bInArray ) const = 0;
+    };
+    friend struct Convention;
+
 private:
 
     static NonConstOpCodeMapPtr  mxSymbolsODFF;                          // ODFF symbols
@@ -415,7 +419,7 @@ private:
     bool        mbCloseBrackets;            // whether to close open brackets automatically, default TRUE
 
 	BOOL   GetToken();
-	BOOL   NextNewToken(bool bAllowBooleans = false);
+	BOOL   NextNewToken(bool bInArray = false);
 	OpCode NextToken();
 	void PutCode( ScTokenRef& );
 	void Factor();
@@ -433,7 +437,7 @@ private:
 	void SetError(USHORT nError);
 	xub_StrLen NextSymbol();
 	BOOL IsValue( const String& );
-	BOOL IsOpCode( const String& );
+	BOOL IsOpCode( const String& rName, bool bInArray );
 	BOOL IsOpCode2( const String& );
 	BOOL IsString();
 	BOOL IsReference( const String& );
@@ -465,6 +469,7 @@ public:
     {
         return mxSymbolsNative.get() && mxSymbolsEnglish.get();
     }
+    static void InitConventions();      /// hack only for 2.4 codebase!
 	static void InitSymbolsNative();    /// only SymbolsNative, on first document creation
 	static void InitSymbolsEnglish();   /// only SymbolsEnglish, maybe later
 private:
@@ -539,7 +544,8 @@ public:
     const ScDocument* GetDoc() const { return pDoc; }
     const ScAddress& GetPos() const { return aPos; }
 
-    static const String& GetStringFromOpCode( OpCode eOpCode, bool bEnglish = false );
+    static const String& GetStringFromOpCode( OpCode eOpCode, bool bEnglish = false, 
+                                              ScAddress::Convention eConv = ScAddress::CONV_OOO );
 
 	ScToken* CreateStringFromToken( String& rFormula, ScToken* pToken,
 									BOOL bAllowArrAdvance = FALSE );
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/inc/docoptio.hxx sc/inc/docoptio.hxx
--- sc.clean/inc/docoptio.hxx	2008-03-03 11:24:44.000000000 -0500
+++ sc/inc/docoptio.hxx	2008-03-19 18:27:17.000000000 -0400
@@ -52,6 +52,8 @@
 #include "optutil.hxx"
 #endif
 
+#include "address.hxx"
+
 class SC_DLLPUBLIC ScDocOptions
 {
 	double fIterEps;				// Epsilon-Wert dazu
@@ -69,6 +71,7 @@ class SC_DLLPUBLIC ScDocOptions
 	BOOL   bDoAutoSpell;			// Auto-Spelling
 	BOOL   bLookUpColRowNames;		// Spalten-/Zeilenbeschriftungen automagisch suchen
     BOOL   bFormulaRegexEnabled;    // regular expressions in formulas enabled
+    ScAddress::Convention eFormulaConv; // formula address convention used to switch different formula syntax
 
 public:
 				ScDocOptions();
@@ -117,6 +120,9 @@ public:
 
     void    SetFormulaRegexEnabled( BOOL bVal ) { bFormulaRegexEnabled = bVal; }
     BOOL    IsFormulaRegexEnabled() const       { return bFormulaRegexEnabled; }
+
+    void SetFormulaSyntax( ScAddress::Convention eConv ) { eFormulaConv = eConv; }
+    ScAddress::Convention GetFormulaSyntax() const { return eFormulaConv; }
 };
 
 
@@ -137,6 +143,7 @@ inline void ScDocOptions::CopyTo(ScDocOp
 	rOpt.bDoAutoSpell			= bDoAutoSpell;
 	rOpt.bLookUpColRowNames		= bLookUpColRowNames;
     rOpt.bFormulaRegexEnabled   = bFormulaRegexEnabled;
+    rOpt.eFormulaConv           = eFormulaConv;
 }
 
 inline const ScDocOptions& ScDocOptions::operator=( const ScDocOptions& rCpy )
@@ -156,6 +163,7 @@ inline const ScDocOptions& ScDocOptions:
 	bDoAutoSpell		= rCpy.bDoAutoSpell;
 	bLookUpColRowNames	= rCpy.bLookUpColRowNames;
     bFormulaRegexEnabled= rCpy.bFormulaRegexEnabled;
+    eFormulaConv        = rCpy.eFormulaConv;
 
 	return *this;
 }
@@ -178,6 +186,7 @@ inline int ScDocOptions::operator==( con
 			&&	rOpt.bDoAutoSpell			== bDoAutoSpell
 			&&	rOpt.bLookUpColRowNames		== bLookUpColRowNames
             &&  rOpt.bFormulaRegexEnabled   == bFormulaRegexEnabled
+            &&  rOpt.eFormulaConv           == eFormulaConv
 			);
 }
 
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/inc/global.hxx sc/inc/global.hxx
--- sc.clean/inc/global.hxx	2008-03-03 11:24:43.000000000 -0500
+++ sc/inc/global.hxx	2008-03-03 11:33:34.000000000 -0500
@@ -712,11 +712,11 @@ public:
     void        InitArgumentInfo() const;
 
     /** Returns a semicolon separated list of all parameter names. */
-    String  GetParamList        () const;
+    String  GetParamList        ( ScAddress::Convention eConv = ScAddress::CONV_OOO ) const;
     /** Returns the full function siganture: "FUNCTIONNAME( parameter list )". */
-	String	GetSignature		() const;
+	String	GetSignature		( ScAddress::Convention eConv = ScAddress::CONV_OOO) const;
     /** Returns the function siganture with parameters from the passed string array. */
-	String	GetFormulaString	( String** aArgArr ) const;
+	String	GetFormulaString	( String** aArgArr, ScAddress::Convention eConv = ScAddress::CONV_OOO ) const;
 
 	USHORT		nFIndex;		// eindeutiger Funktionsindex
 	USHORT		nCategory;		// Kategorie
@@ -786,6 +786,7 @@ class ScFormulaUtil
 public:
 	static BOOL					GetNextFunc( const String&	rFormula,
 											 BOOL			bBack,
+                                             ScAddress::Convention eConv,
 											 xub_StrLen&	rFStart, // Ein- und Ausgabe
 											 xub_StrLen*	pFEnd = NULL,
 											 const ScFuncDesc**	ppFDesc = NULL,
@@ -794,21 +795,27 @@ public:
 	static const ScFuncDesc*	GetDefaultFuncDesc();
 
 	static xub_StrLen			GetFunctionStart( const String& rFormula, xub_StrLen nStart,
-													BOOL bBack, String* pFuncName = NULL );
+												  BOOL bBack, 
+                                                  ScAddress::Convention eConv,
+                                                  String* pFuncName = NULL );
 
-	static xub_StrLen			GetFunctionEnd	( const String& rFormula, xub_StrLen nStart );
+	static xub_StrLen			GetFunctionEnd	( const String& rFormula, xub_StrLen nStart,
+                                                  ScAddress::Convention eConv );
 
 	static xub_StrLen			GetArgStart		( const String& rFormula, xub_StrLen nStart,
-												  USHORT nArg );
+												  USHORT nArg,
+                                                  ScAddress::Convention eConv );
 
 	static String**				GetArgStrings	( const String&	rFormula,
 												  xub_StrLen	nFuncPos,
-												  USHORT		nArgs );
+												  USHORT		nArgs,
+                                                  ScAddress::Convention eConv );
 
 	static void					FillArgStrings	( const String&	rFormula,
 												  xub_StrLen	nFuncPos,
 												  USHORT		nArgs,
-												  String**		pArgs );
+												  String**		pArgs,
+                                                  ScAddress::Convention eConv );
 };
 
 //==================================================================
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/inc/rangenam.hxx sc/inc/rangenam.hxx
--- sc.clean/inc/rangenam.hxx	2008-03-03 11:24:43.000000000 -0500
+++ sc/inc/rangenam.hxx	2008-03-20 21:29:02.000000000 -0400
@@ -171,7 +171,8 @@ public:
 	BOOL			IsBeyond( SCROW nMaxRow ) const;
 
 	static void		MakeValidName( String& rName );
-	SC_DLLPUBLIC static BOOL		IsNameValid( const String& rName, ScDocument* pDoc );
+	SC_DLLPUBLIC static BOOL		IsNameValid( const String& rName, ScDocument* pDoc, 
+                                                 const ScAddress::Details& rDetails = ScAddress::detailsOOOa1 );
 };
 
 inline BOOL ScRangeData::HasType( RangeType nType ) const
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/data/documen3.cxx sc/source/core/data/documen3.cxx
--- sc.clean/source/core/data/documen3.cxx	2008-03-03 11:24:50.000000000 -0500
+++ sc/source/core/data/documen3.cxx	2008-03-20 22:19:01.000000000 -0400
@@ -1757,6 +1757,7 @@ void ScDocument::SetDocOptions( const Sc
 	pFormatter->ChangeNullDate( d,m,y );
 	pFormatter->ChangeStandardPrec( (USHORT)rOpt.GetStdPrecision() );
 	pFormatter->SetYear2000( rOpt.GetYear2000() );
+    SetAddressConvention( rOpt.GetFormulaSyntax() );
 }
 
 const ScViewOptions& ScDocument::GetViewOptions() const
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/data/global.cxx sc/source/core/data/global.cxx
--- sc.clean/source/core/data/global.cxx	2008-03-03 11:24:50.000000000 -0500
+++ sc/source/core/data/global.cxx	2008-03-04 00:34:14.000000000 -0500
@@ -1061,6 +1061,7 @@ const ScFuncDesc* ScFormulaUtil::GetDefa
 
 BOOL ScFormulaUtil::GetNextFunc( const String&	rFormula,
 								 BOOL			bBack,
+                                 ScAddress::Convention eConv,
 								 xub_StrLen&	rFStart,   // Ein- und Ausgabe
 								 xub_StrLen*	pFEnd, 	   // = NULL
 								 const ScFuncDesc**	ppFDesc,   // = NULL
@@ -1070,13 +1071,13 @@ BOOL ScFormulaUtil::GetNextFunc( const S
 	xub_StrLen	nOldStart = rFStart;
 	String		aFname;
 
-	rFStart = GetFunctionStart( rFormula, rFStart, bBack, ppFDesc ? &aFname : NULL );
+	rFStart = GetFunctionStart( rFormula, rFStart, bBack, eConv, ppFDesc ? &aFname : NULL );
 	bFound  = ( rFStart != FUNC_NOTFOUND );
 
 	if ( bFound )
 	{
 		if ( pFEnd )
-			*pFEnd = GetFunctionEnd( rFormula, rFStart );
+			*pFEnd = GetFunctionEnd( rFormula, rFStart, eConv );
 
 		if ( ppFDesc )
 		{
@@ -1085,7 +1086,7 @@ BOOL ScFormulaUtil::GetNextFunc( const S
 			if ( *ppFDesc )
 			{
 				if (pppArgs)
-					*pppArgs = GetArgStrings( rFormula, rFStart, (*ppFDesc)->nArgCount );
+					*pppArgs = GetArgStrings( rFormula, rFStart, (*ppFDesc)->nArgCount, eConv );
 			}
 			else
 			{
@@ -1104,7 +1105,8 @@ BOOL ScFormulaUtil::GetNextFunc( const S
 void ScFormulaUtil::FillArgStrings( const String&	rFormula,
 									xub_StrLen		nFuncPos,
 									USHORT			nArgs,
-									String**		aArgArr )
+									String**		aArgArr,
+                                    ScAddress::Convention eConv )
 {
 	if ( !aArgArr ) return;
 
@@ -1115,11 +1117,11 @@ void ScFormulaUtil::FillArgStrings( cons
 
 	for ( i=0; i<nArgs && !bLast; i++ )
 	{
-		nStart = GetArgStart( rFormula, nFuncPos, i );
+		nStart = GetArgStart( rFormula, nFuncPos, i, eConv );
 
 		if ( i+1<nArgs ) // letztes Argument?
 		{
-			nEnd = GetArgStart( rFormula, nFuncPos, i+1 );
+			nEnd = GetArgStart( rFormula, nFuncPos, i+1, eConv );
 
 			if ( nEnd != nStart )
 				aArgArr[i] = new String( rFormula.Copy( nStart, nEnd-1-nStart ) );
@@ -1128,7 +1130,7 @@ void ScFormulaUtil::FillArgStrings( cons
 		}
 		else
 		{
-			nEnd = GetFunctionEnd( rFormula, nFuncPos )-1;
+			nEnd = GetFunctionEnd( rFormula, nFuncPos, eConv )-1;
 			if ( nStart < nEnd )
 				aArgArr[i] = new String( rFormula.Copy( nStart, nEnd-nStart ) );
 			else
@@ -1145,13 +1147,14 @@ void ScFormulaUtil::FillArgStrings( cons
 
 String** ScFormulaUtil::GetArgStrings( const String& rFormula,
 									   xub_StrLen nFuncPos,
-									   USHORT nArgs )
+									   USHORT nArgs,
+                                       ScAddress::Convention eConv )
 {
 	String** aArgArr = NULL;
 	if (nArgs)
 	{
 		aArgArr = new String*[nArgs];
-		FillArgStrings( rFormula, nFuncPos, nArgs, aArgArr );
+		FillArgStrings( rFormula, nFuncPos, nArgs, aArgArr, eConv );
 	}
 	return aArgArr;
 }
@@ -1174,6 +1177,7 @@ inline BOOL IsFormulaText( const String&
 xub_StrLen ScFormulaUtil::GetFunctionStart( const String&	rFormula,
 										xub_StrLen		nStart,
 										BOOL			bBack,
+                                        ScAddress::Convention /*eConv*/,
 										String*			pFuncName )
 {
 	xub_StrLen nStrLen = rFormula.Len();
@@ -1265,14 +1269,23 @@ xub_StrLen ScFormulaUtil::GetFunctionSta
 
 //------------------------------------------------------------------------
 
-xub_StrLen	ScFormulaUtil::GetFunctionEnd( const String& rStr, xub_StrLen nStart )
+xub_StrLen	ScFormulaUtil::GetFunctionEnd( const String& rStr, xub_StrLen nStart,
+                                           ScAddress::Convention eConv )
 {
 	xub_StrLen nStrLen = rStr.Len();
 
 	if ( nStrLen < nStart )
 		return nStart;
 
+    // We assume the following tokens are single-character tokens.
+    const sal_Unicode open       = ScCompiler::GetStringFromOpCode(ocOpen,  false, eConv).GetChar(0);
+    const sal_Unicode close      = ScCompiler::GetStringFromOpCode(ocClose, false, eConv).GetChar(0);
+    const sal_Unicode sep        = ScCompiler::GetStringFromOpCode(ocSep, false, eConv).GetChar(0);
+    const sal_Unicode arrayOpen  = ScCompiler::GetStringFromOpCode(ocArrayOpen,  false, eConv).GetChar(0);
+    const sal_Unicode arrayClose = ScCompiler::GetStringFromOpCode(ocArrayClose, false, eConv).GetChar(0);
+
 	short	nParCount = 0;
+    bool    bInArray = false;
 	BOOL	bFound = FALSE;
 
 	while ( !bFound && (nStart < nStrLen) )
@@ -1285,9 +1298,9 @@ xub_StrLen	ScFormulaUtil::GetFunctionEnd
 			while ( (nStart < nStrLen) && rStr.GetChar(nStart) != '"' )
 				nStart++;
 		}
-		else if ( c == '(' )
+		else if ( c == open )
 			nParCount++;
-		else if ( c == ')' )
+		else if ( c == close )
 		{
 			nParCount--;
 			if ( nParCount == 0 )
@@ -1298,9 +1311,17 @@ xub_StrLen	ScFormulaUtil::GetFunctionEnd
 				nStart--;	// einen zu weit gelesen
 			}
 		}
-		else if ( c == ';' )
+        else if ( c == arrayOpen )
+        {
+            bInArray = true;
+        }
+        else if ( c == arrayClose )
+        {
+            bInArray = false;
+        }
+		else if ( c == sep )
 		{
-			if ( nParCount == 0 )
+			if ( !bInArray && nParCount == 0 )
 			{
 				bFound = TRUE;
 				nStart--;	// einen zu weit gelesen
@@ -1314,14 +1335,23 @@ xub_StrLen	ScFormulaUtil::GetFunctionEnd
 
 //------------------------------------------------------------------
 
-xub_StrLen ScFormulaUtil::GetArgStart( const String& rStr, xub_StrLen nStart, USHORT nArg )
+xub_StrLen ScFormulaUtil::GetArgStart( const String& rStr, xub_StrLen nStart, USHORT nArg,
+                                       ScAddress::Convention eConv )
 {
 	xub_StrLen nStrLen = rStr.Len();
 
 	if ( nStrLen < nStart )
 		return nStart;
 
+    // We assume the following tokens are single-character tokens.
+    const sal_Unicode open       = ScCompiler::GetStringFromOpCode(ocOpen,  false, eConv).GetChar(0);
+    const sal_Unicode close      = ScCompiler::GetStringFromOpCode(ocClose, false, eConv).GetChar(0);
+    const sal_Unicode sep        = ScCompiler::GetStringFromOpCode(ocSep, false, eConv).GetChar(0);
+    const sal_Unicode arrayOpen  = ScCompiler::GetStringFromOpCode(ocArrayOpen,  false, eConv).GetChar(0);
+    const sal_Unicode arrayClose = ScCompiler::GetStringFromOpCode(ocArrayClose, false, eConv).GetChar(0);
+
 	short	nParCount	= 0;
+    bool    bInArray    = false;
 	BOOL	bFound		= FALSE;
 
 	while ( !bFound && (nStart < nStrLen) )
@@ -1334,19 +1364,27 @@ xub_StrLen ScFormulaUtil::GetArgStart( c
 			while ( (nStart < nStrLen) && rStr.GetChar(nStart) != '"' )
 				nStart++;
 		}
-		else if ( c == '(' )
+		else if ( c == open )
 		{
 			bFound = ( nArg == 0 );
 			nParCount++;
 		}
-		else if ( c == ')' )
+		else if ( c == close )
 		{
 			nParCount--;
 			bFound = ( nParCount == 0 );
 		}
-		else if ( c == ';' )
+        else if ( c == arrayOpen )
+        {
+            bInArray = true;
+        }
+        else if ( c == arrayClose )
+        {
+            bInArray = false;
+        }
+		else if ( c == sep )
 		{
-			if ( nParCount == 1 )
+			if ( !bInArray && nParCount == 1 )
 			{
 				nArg--;
 				bFound = ( nArg == 0  );
@@ -1702,8 +1740,10 @@ void ScFuncDesc::InitArgumentInfo() cons
 
 //------------------------------------------------------------------------
 
-String ScFuncDesc::GetParamList() const
+String ScFuncDesc::GetParamList( ScAddress::Convention eConv ) const
 {
+    const String& sep = ScCompiler::GetStringFromOpCode(ocSep, false, eConv);
+
     String aSig;
 
     if ( nArgCount > 0 )
@@ -1714,7 +1754,10 @@ String ScFuncDesc::GetParamList() const
             {
                 aSig += *(aDefArgNames[i]);
                 if ( i != nArgCount-1 )
-                    aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( "; " ));
+                {
+                    aSig.Append(sep);
+                    aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( " " ));
+                }
             }
         }
         else
@@ -1723,14 +1766,17 @@ String ScFuncDesc::GetParamList() const
             for ( USHORT nArg = 0; nArg < nFix; nArg++ )
             {
                 aSig += *(aDefArgNames[nArg]);
-                aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( "; " ));
+                aSig.Append(sep);
+                aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( " " ));
             }
             aSig += *(aDefArgNames[nFix]);
             aSig += '1';
-            aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( "; " ));
+            aSig.Append(sep);
+            aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( " " ));
             aSig += *(aDefArgNames[nFix]);
             aSig += '2';
-            aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( "; ... " ));
+            aSig.Append(sep);
+            aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( " ... " ));
         }
     }
 
@@ -1739,7 +1785,7 @@ String ScFuncDesc::GetParamList() const
 
 //------------------------------------------------------------------------
 
-String ScFuncDesc::GetSignature() const
+String ScFuncDesc::GetSignature( ScAddress::Convention eConv ) const
 {
 	String aSig;
 
@@ -1747,7 +1793,7 @@ String ScFuncDesc::GetSignature() const
 	{
 		aSig = *pFuncName;
 
-        String aParamList( GetParamList() );
+        String aParamList( GetParamList(eConv) );
         if( aParamList.Len() )
         {
 			aSig.AppendAscii(RTL_CONSTASCII_STRINGPARAM( "( " ));
@@ -1763,8 +1809,10 @@ String ScFuncDesc::GetSignature() const
 
 //------------------------------------------------------------------------
 
-String ScFuncDesc::GetFormulaString( String** aArgArr ) const
+String ScFuncDesc::GetFormulaString( String** aArgArr, ScAddress::Convention eConv ) const
 {
+    const String& sep = ScCompiler::GetStringFromOpCode(ocSep, false, eConv);
+
 	String aFormula;
 
 	if(pFuncName)
@@ -1787,7 +1835,7 @@ String ScFuncDesc::GetFormulaString( Str
 					{
 						bLastArg = !( aArgArr[i+1]->Len() > 0 );
 						if ( !bLastArg )
-							aFormula += ';';
+							aFormula += sep;
 					}
 				}
 			}
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/tool/address.cxx sc/source/core/tool/address.cxx
--- sc.clean/source/core/tool/address.cxx	2008-03-03 11:24:50.000000000 -0500
+++ sc/source/core/tool/address.cxx	2008-03-25 13:07:48.000000000 -0400
@@ -623,10 +623,24 @@ lcl_ScRange_Parse_XL_A1( ScRange& r,
     // prepare as if it's a singleton, in case we want to fall back */
     r.aEnd.SetCol( r.aStart.Col() );
     r.aEnd.SetRow( r.aStart.Row() );    // don't overwrite sheet number as parsed in lcl_ScRange_Parse_XL_Header
+
+    if ( bOnlyAcceptSingle )
+    {
+        if ( *tmp2 == 0 )
+            return lcl_XL_LinkSheetRef( r, pDoc,
+                aExternDocName, aStartTabName, aEndTabName, nFlags );
+        else
+        {
+            // any trailing invalid character must invalidate the address.
+            nFlags &= ~(SCA_VALID | SCA_VALID_COL | SCA_VALID_ROW | SCA_VALID_TAB);
+            return nFlags;
+        }
+    }
+
     if( *tmp2 != ':' )
     {
-        if ( !bOnlyAcceptSingle )
-            nFlags &= ~SCA_VALID;   // when looking for a double ref, a single-cell ref must not be accepted
+        nFlags &= ~(SCA_VALID | SCA_VALID_COL | SCA_VALID_ROW | SCA_VALID_TAB |
+                    SCA_VALID_COL2 | SCA_VALID_ROW2 | SCA_VALID_TAB2);
         return nFlags;
     }
 
@@ -640,6 +654,14 @@ lcl_ScRange_Parse_XL_A1( ScRange& r,
         return lcl_XL_LinkSheetRef( r, pDoc,
             aExternDocName, aStartTabName, aEndTabName, nFlags );
 
+    if ( *tmp2 != 0 )
+    {
+        // any trailing invalid character must invalidate the range.
+        nFlags &= ~(SCA_VALID | SCA_VALID_COL | SCA_VALID_ROW | SCA_VALID_TAB |
+                    SCA_VALID_COL2 | SCA_VALID_ROW2 | SCA_VALID_TAB2);
+        return nFlags;
+    }
+
     nFlags |= (nFlags2 << 4);
     return lcl_XL_LinkSheetRef( r, pDoc,
         aExternDocName, aStartTabName, aEndTabName, nFlags );
@@ -1334,9 +1356,12 @@ void ScAddress::Format( String& r, USHOR
 
             case CONV_XL_A1:
             case CONV_XL_R1C1:
-                r += '[';
-                r += aDocName;
-                r += ']';
+                if (aDocName.Len() > 0)
+                {
+                    r += '[';
+                    r += aDocName;
+                    r += ']';
+                }
                 r += aTabName;
                 r += '!';
                 break;
@@ -1434,6 +1459,7 @@ lcl_ScRange_Format_XL_Header( String& r,
 void ScRange::Format( String& r, USHORT nFlags, ScDocument* pDoc,
                       const ScAddress::Details& rDetails ) const
 {
+    r.Erase();
     if( !( nFlags & SCA_VALID ) )
     {
         r = ScGlobal::GetRscString( STR_NOREF_STR );
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/tool/compiler.cxx sc/source/core/tool/compiler.cxx
--- sc.clean/source/core/tool/compiler.cxx	2008-03-03 11:24:50.000000000 -0500
+++ sc/source/core/tool/compiler.cxx	2008-03-25 13:20:18.000000000 -0400
@@ -305,6 +305,8 @@ void ScCompiler::InitSymbolsNative()
     if (mxSymbolsNative.get())
         return;
 
+    InitConventions();
+
     // Not English (even if localization is English), Core, no ODF
     mxSymbolsNative.reset( new OpCodeMap( SC_OPCODE_LAST_OPCODE_ID + 1, false, true, false));
     ScOpCodeList aOpCodeListNative( RID_SC_FUNCTION_NAMES, mxSymbolsNative);
@@ -439,6 +441,7 @@ void ScCompiler::SetCompileEnglish( BOOL
         if (!pCharClassEnglish)
             InitCharClassEnglish();
         pCharClass = pCharClassEnglish;
+        SetRefConvention(ScAddress::CONV_OOO); // hack!  when compiling English, it's most likely handling ODF formula syntax.
     }
     else
     {
@@ -928,7 +931,7 @@ for (i = 97; i < 123; i++)
 /* ) */     t[41] |=   SC_COMPILER_C_WORD;
 /* * */     t[42] |=   SC_COMPILER_C_WORD;
 /* + */     t[43] |=   SC_COMPILER_C_WORD;
-#if 0 /* this really needs to be locale specific. */
+#if 1 /* this really needs to be locale specific. */
 /* , */     t[44]  =   SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
 #else
 /* , */     t[44] |=   SC_COMPILER_C_WORD;
@@ -980,6 +983,20 @@ struct Convention_A1 : public ScCompiler
         return pCharClass->parseAnyToken( rFormula,
                 nSrcPos, nStartFlags, aAddAllowed, nContFlags, aAddAllowed );
     }
+
+    virtual const String& GetSymbol( const ScCompiler::OpCodeMapPtr& rpMap, OpCode e ) const
+    {
+        return rpMap->getSymbol(e);
+    }
+
+    virtual OpCode GetOpCode( const ScCompiler::OpCodeMapPtr& rpMap, const String& rName, bool bInArray ) const
+    {
+        const ScOpCodeHashMap* pHashMap = rpMap->getHashMap();
+        ScOpCodeHashMap::const_iterator itr = pHashMap->find(rName);
+        if (itr == pHashMap->end())
+            return ocNone;
+        return itr->second;
+    }
 };
 
 String Convention_A1::MakeColStr( SCCOL nCol )
@@ -1232,6 +1249,27 @@ static const ScCompiler::Convention *pCo
 
 struct ConventionXL
 {
+    static String maSep;
+    static String maArrayRowSep;
+    static String maArrayColSep;
+
+    static void Init()
+    {
+        const rtl::OUString& aDecSep = ScGlobal::pSysLocale->GetLocaleData().getLocaleItem().decimalSeparator;
+        if (aDecSep.equalsAscii(","))
+        {
+            maSep         = String::CreateFromAscii(";");
+            maArrayRowSep = String::CreateFromAscii("|");
+            maArrayColSep = String::CreateFromAscii(";");
+        }
+        else
+        {
+            maSep         = String::CreateFromAscii(",");
+            maArrayRowSep = String::CreateFromAscii(";");
+            maArrayColSep = String::CreateFromAscii(",");
+        }
+    }
+
     static bool GetDocAndTab( const ScCompiler& rComp,
                               const SingleRefData& rRef,
                               String& rDocName,
@@ -1314,8 +1352,50 @@ struct ConventionXL
             rBuf.append( sal_Unicode( '!' ) );
         }
     }
+
+    static OpCode GetOpCode( const ScCompiler::OpCodeMapPtr& rpMap, const String& rName, bool bInArray )
+    {
+        // TODO: switch to using a hash table for better string lookup performance.
+        if (bInArray)
+        {
+            if (rName.Equals(ConventionXL::maArrayRowSep))
+            {
+                return ocArrayRowSep;
+            }
+            else if (rName.Equals(ConventionXL::maArrayColSep))
+            {
+                return ocArrayColSep;
+            }       
+        }
+
+        if (rName.Equals(ConventionXL::maSep))
+        {
+            return ocSep;
+        }
+
+        const ScOpCodeHashMap* pHashMap = rpMap->getHashMap();
+        ScOpCodeHashMap::const_iterator itr = pHashMap->find(rName);
+        if (itr == pHashMap->end())
+        {
+            return ocNone;
+        }
+
+        switch (itr->second)
+        {
+            // opcode found, but the following opcodes must not be valid for XL_A1.
+            case ocSep:
+            case ocArrayColSep:
+            case ocArrayRowSep:
+                return ocNone;
+        }
+        return itr->second;
+    }
 };
 
+String ConventionXL::maSep = String::CreateFromAscii(",");
+String ConventionXL::maArrayRowSep = String::CreateFromAscii(";");
+String ConventionXL::maArrayColSep = String::CreateFromAscii(",");
+
 struct ConventionXL_A1 : public Convention_A1, public ConventionXL
 {
     ConventionXL_A1() : Convention_A1( ScAddress::CONV_XL_A1 ) { }
@@ -1326,11 +1406,12 @@ struct ConventionXL_A1 : public Conventi
     {
         ComplRefData aRef( rRef );
 
-        MakeDocStr( rBuf, rComp, aRef, bSingleRef );
-
         // Play fast and loose with invalid refs.  There is not much point in producing
         // Foo!A1:#REF! versus #REF! at this point
         aRef.Ref1.CalcAbsIfRel( rComp.GetPos() );
+
+        MakeDocStr( rBuf, rComp, aRef, bSingleRef );
+
         if( aRef.Ref1.IsColDeleted() || aRef.Ref1.IsRowDeleted() )
         {
             rBuf.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
@@ -1389,6 +1470,25 @@ struct ConventionXL_A1 : public Conventi
             MakeRowStr( rBuf, aRef.Ref2.nRow );
         }
     }
+
+    virtual const String& GetSymbol( const ScCompiler::OpCodeMapPtr& rpMap, OpCode e ) const
+    {
+        switch (e)
+        {
+            case ocSep:
+                return ConventionXL::maSep;
+            case ocArrayRowSep:
+                return ConventionXL::maArrayRowSep;
+            case ocArrayColSep:
+                return ConventionXL::maArrayColSep;
+        }
+        return rpMap->getSymbol(e);
+    }
+
+    virtual OpCode GetOpCode( const ScCompiler::OpCodeMapPtr& rpMap, const String& rName, bool bInArray ) const
+    {
+        return ConventionXL::GetOpCode(rpMap, rName, bInArray);
+    }
 };
 
 static const ConventionXL_A1 ConvXL_A1;
@@ -1508,11 +1608,36 @@ struct ConventionXL_R1C1 : public ScComp
         return pCharClass->parseAnyToken( rFormula,
                 nSrcPos, nStartFlags, aAddAllowed, nContFlags, aAddAllowed );
     }
+
+    virtual const String& GetSymbol( const ScCompiler::OpCodeMapPtr& rpMap, OpCode e ) const
+    {
+        switch (e)
+        {
+            case ocSep:
+                return ConventionXL::maSep;
+            case ocArrayRowSep:
+                return ConventionXL::maArrayRowSep;
+            case ocArrayColSep:
+                return ConventionXL::maArrayColSep;
+        }
+        return rpMap->getSymbol(e);
+    }
+
+    virtual OpCode GetOpCode( const ScCompiler::OpCodeMapPtr& rpMap, const String& rName, bool bInArray ) const
+    {
+        return ConventionXL::GetOpCode(rpMap, rName, bInArray);
+    }
 };
 
 static const ConventionXL_R1C1 ConvXL_R1C1;
 static const ScCompiler::Convention *pConvXL_R1C1 = &ConvXL_R1C1;
 
+// static
+void ScCompiler::InitConventions()
+{
+    ConventionXL::Init();
+}
+
 //-----------------------------------------------------------------------------
 ScCompiler::ScCompiler( ScDocument* pDocument, const ScAddress& rPos,
                         const ScTokenArray& rArr )
@@ -1626,7 +1751,8 @@ void ScCompiler::CheckTabQuotes( String&
 
 void ScCompiler::SetCompileXML( BOOL bVal )
 {
-    SetRefConvention( bVal ? pConvOOO_A1_XML : pConvOOO_A1 );
+    if (bVal)
+        SetRefConvention( pConvOOO_A1_XML );
 }
 void ScCompiler::SetRefConvention( ScAddress::Convention eConv )
 {
@@ -1968,15 +2094,16 @@ xub_StrLen ScCompiler::NextSymbol()
 // Convert symbol to token
 //---------------------------------------------------------------------------
 
-BOOL ScCompiler::IsOpCode( const String& rName )
+BOOL ScCompiler::IsOpCode( const String& rName, bool bInArray )
 {
-    ScOpCodeHashMap::const_iterator iLook( mxSymbols->getHashMap()->find( rName));
-    BOOL bFound = (iLook != mxSymbols->getHashMap()->end());
-    if (bFound)
+    bool bFound = false;
+    OpCode oc = pConv->GetOpCode(mxSymbols, rName, bInArray);
+    if (oc != ocNone)
     {
         ScRawToken aToken;
-        aToken.SetOpCode( (*iLook).second );
+        aToken.SetOpCode(oc);
         pRawToken = aToken.Clone();
+        bFound = true;
     }
     else
     {
@@ -2776,8 +2903,9 @@ void ScCompiler::AutoCorrectParsedSymbol
     }
 }
 
-BOOL ScCompiler::NextNewToken( bool bAllowBooleans )
+BOOL ScCompiler::NextNewToken( bool bInArray )
 {
+    bool bAllowBooleans = bInArray;
     xub_StrLen nSpaces = NextSymbol();
 
 #if 0
@@ -2836,7 +2964,7 @@ BOOL ScCompiler::NextNewToken( bool bAll
             // IsReference().
             // IsBoolean before isValue to catch inline bools without the kludge
             //    for inline arrays.
-            if ( !(bMayBeFuncName && IsOpCode( aUpper ))
+            if ( !(bMayBeFuncName && IsOpCode( aUpper, bInArray ))
               && !IsReference( aOrg )
               && !(bAllowBooleans && IsBoolean( aUpper ))
               && !IsValue( aUpper )
@@ -2988,7 +3116,7 @@ ScTokenArray* ScCompiler::CompileString(
                 SetError(errCodeOverflow);
             }
             else if ( bAutoCorrect )
-                aCorrectedFormula += mxSymbols->getSymbol(ocArrayClose);
+                aCorrectedFormula += pConv->GetSymbol(mxSymbols, ocArrayClose);
         }
 
         ScByteToken aToken( ocClose );
@@ -2999,7 +3127,7 @@ ScTokenArray* ScCompiler::CompileString(
                 SetError(errCodeOverflow); break;
             }
             if ( bAutoCorrect )
-                aCorrectedFormula += mxSymbols->getSymbol(ocClose);
+                aCorrectedFormula += pConv->GetSymbol(mxSymbols, ocClose);
         }
     }
     if ( nForced >= 2 )
@@ -5001,9 +5129,17 @@ ScRangeData* ScCompiler::UpdateMoveTab( 
 }
 
 
-const String& ScCompiler::GetStringFromOpCode( OpCode eOpCode, bool bEnglish )
+const String& ScCompiler::GetStringFromOpCode( OpCode eOpCode, bool bEnglish, ScAddress::Convention eConv )
 {
-    return bEnglish ? mxSymbolsEnglish->getSymbol( eOpCode ) : mxSymbolsNative->getSymbol( eOpCode );
+    const ScCompiler::Convention* pConv = pConvOOO_A1; // default
+    switch (eConv)
+    {
+        case ScAddress::CONV_XL_A1:     pConv = pConvXL_A1;     break;
+        case ScAddress::CONV_XL_R1C1:   pConv = pConvXL_R1C1;   break;
+        // more case likely to follow in the future....
+    }
+    OpCodeMapPtr mxSymbols = bEnglish ? mxSymbolsEnglish : mxSymbolsNative;
+    return pConv->GetSymbol( mxSymbols, eOpCode );
 }
 
 ScToken* ScCompiler::CreateStringFromToken( String& rFormula, ScToken* pTokenP,
@@ -5046,7 +5182,7 @@ ScToken* ScCompiler::CreateStringFromTok
     else if( eOp >= ocInternalBegin && eOp <= ocInternalEnd )
         rBuffer.appendAscii( pInternal[ eOp - ocInternalBegin ] );
     else if( (USHORT) eOp < mxSymbolsNative->getSymbolCount())        // Keyword:
-        rBuffer.append(mxSymbols->getSymbol(eOp));
+        rBuffer.append( pConv->GetSymbol(mxSymbols, eOp) );
     else
     {
         DBG_ERROR("Unbekannter OpCode");
@@ -5175,20 +5311,19 @@ void ScCompiler::CreateStringFromScMatri
     SCSIZE nC, nMaxC, nR, nMaxR;
 
     pMatrix->GetDimensions( nMaxC, nMaxR);
-
-    rBuffer.append( mxSymbols->getSymbol(ocArrayOpen) );
+    rBuffer.append( pConv->GetSymbol(mxSymbols, ocArrayOpen) );
     for( nR = 0 ; nR < nMaxR ; nR++)
     {
         if( nR > 0)
         {
-            rBuffer.append( mxSymbols->getSymbol(ocArrayRowSep) );
+            rBuffer.append( pConv->GetSymbol(mxSymbols, ocArrayRowSep) );
         }
 
         for( nC = 0 ; nC < nMaxC ; nC++)
         {
             if( nC > 0)
             {
-                rBuffer.append( mxSymbols->getSymbol(ocArrayColSep) );
+                rBuffer.append( pConv->GetSymbol(mxSymbols, ocArrayColSep) );
             }
 
             if( pMatrix->IsValue( nC, nR ) )
@@ -5213,7 +5348,7 @@ void ScCompiler::CreateStringFromScMatri
                 AppendString( rBuffer, pMatrix->GetString( nC, nR ) );
         }
     }
-    rBuffer.append( mxSymbols->getSymbol(ocArrayClose) );
+    rBuffer.append( pConv->GetSymbol(mxSymbols, ocArrayClose) );
 }
 
 void ScCompiler::AppendBoolean( rtl::OUStringBuffer& rBuffer, bool bVal )
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/tool/docoptio.cxx sc/source/core/tool/docoptio.cxx
--- sc.clean/source/core/tool/docoptio.cxx	2008-03-03 11:24:50.000000000 -0500
+++ sc/source/core/tool/docoptio.cxx	2008-03-19 20:37:44.000000000 -0400
@@ -50,6 +50,7 @@
 #include "scresid.hxx"
 #include "sc.hrc"
 #include "miscuno.hxx"
+#include "global.hxx"
 
 using namespace utl;
 using namespace rtl;
@@ -105,7 +106,8 @@ ScDocOptions::ScDocOptions( const ScDocO
 			bMatchWholeCell( rCpy.bMatchWholeCell ),
 			bDoAutoSpell( rCpy.bDoAutoSpell ),
             bLookUpColRowNames( rCpy.bLookUpColRowNames ),
-            bFormulaRegexEnabled( rCpy.bFormulaRegexEnabled )
+            bFormulaRegexEnabled( rCpy.bFormulaRegexEnabled ),
+            eFormulaConv( rCpy.eFormulaConv )
 {
 }
 
@@ -212,6 +214,7 @@ void ScDocOptions::ResetDocOptions()
 	bDoAutoSpell		= FALSE;
 	bLookUpColRowNames	= TRUE;
     bFormulaRegexEnabled= TRUE;
+    eFormulaConv        = ScAddress::CONV_OOO;
 }
 
 //========================================================================
@@ -287,7 +290,8 @@ SfxPoolItem* __EXPORT ScTpCalcItem::Clon
 #define SCCALCOPT_SEARCHCRIT		9
 #define SCCALCOPT_FINDLABEL			10
 #define SCCALCOPT_REGEX             11
-#define SCCALCOPT_COUNT             12
+#define SCCALCOPT_FORMULA_SYNTAX    12
+#define SCCALCOPT_COUNT             13
 
 #define CFGPATH_DOCLAYOUT	"Office.Calc/Layout/Other"
 
@@ -310,7 +314,8 @@ Sequence<OUString> ScDocCfg::GetCalcProp
 		"Other/Precision",					// SCCALCOPT_PRECISION
 		"Other/SearchCriteria",				// SCCALCOPT_SEARCHCRIT
         "Other/FindLabel",                  // SCCALCOPT_FINDLABEL
-        "Other/RegularExpressions"          // SCCALCOPT_REGEX
+        "Other/RegularExpressions",         // SCCALCOPT_REGEX
+        "Other/FormulaSyntax"               // SCCALCOPT_FORMULA_SYNTAX
 	};
 	Sequence<OUString> aNames(SCCALCOPT_COUNT);
 	OUString* pNames = aNames.getArray();
@@ -403,6 +408,14 @@ ScDocCfg::ScDocCfg() :
                     case SCCALCOPT_REGEX :
                         SetFormulaRegexEnabled( ScUnoHelpFunctions::GetBoolFromAny( pValues[nProp] ) );
                         break;
+                    case SCCALCOPT_FORMULA_SYNTAX:
+                    {
+                        if ((pValues[nProp] >>= nIntVal) && nIntVal > ScAddress::CONV_UNSPECIFIED && nIntVal < ScAddress::CONV_LAST)
+                            SetFormulaSyntax( static_cast<ScAddress::Convention>(nIntVal) );
+                        else
+                            SetFormulaSyntax(ScAddress::CONV_OOO);
+                    }
+                    break;
 				}
 			}
 		}
@@ -486,6 +499,10 @@ IMPL_LINK( ScDocCfg, CalcCommitHdl, void
 				break;
             case SCCALCOPT_REGEX :
                 ScUnoHelpFunctions::SetBoolInAny( pValues[nProp], IsFormulaRegexEnabled() );
+                break;
+            case SCCALCOPT_FORMULA_SYNTAX:
+                pValues[nProp] <<= static_cast<sal_Int32>(GetFormulaSyntax());
+                break;
 		}
 	}
 	aCalcItem.PutProperties(aNames, aValues);
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/core/tool/rangenam.cxx sc/source/core/tool/rangenam.cxx
--- sc.clean/source/core/tool/rangenam.cxx	2008-03-03 11:24:50.000000000 -0500
+++ sc/source/core/tool/rangenam.cxx	2008-03-20 21:29:41.000000000 -0400
@@ -596,7 +596,7 @@ void ScRangeData::MakeValidName( String&
 	}
 }
 
-BOOL ScRangeData::IsNameValid( const String& rName, ScDocument* pDoc )
+BOOL ScRangeData::IsNameValid( const String& rName, ScDocument* pDoc, const ScAddress::Details& rDetails )
 {
     /*  If changed, ScfTools::ConvertToScDefinedName (sc/source/filter/ftools/ftools.cxx)
         needs to be changed too. */
@@ -612,12 +612,12 @@ BOOL ScRangeData::IsNameValid( const Str
 	// Parse nicht auf VALID pruefen, es reicht, wenn irgendein Bestandteil
 	// erkannt wurde
 	ScRange aRange;
-	if( aRange.Parse( rName, pDoc ) )	// THIS IS WRONG
+	if( aRange.Parse( rName, pDoc, rDetails ) )
 		return FALSE;
 	else
 	{
 		ScAddress aAddr;
-		if ( aAddr.Parse( rName, pDoc ) )	// THIS IS WRONG
+		if ( aAddr.Parse( rName, pDoc, rDetails ) )
 			return FALSE;
 	}
 	return TRUE;
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/app/inputwin.cxx sc/source/ui/app/inputwin.cxx
--- sc.clean/source/ui/app/inputwin.cxx	2008-03-03 11:24:45.000000000 -0500
+++ sc/source/ui/app/inputwin.cxx	2008-03-20 22:13:16.000000000 -0400
@@ -1561,6 +1561,7 @@ ScNameInputType lcl_GetInputType( const 
         ScViewData* pViewData = pViewSh->GetViewData();
         ScDocument* pDoc = pViewData->GetDocument();
         SCTAB nTab = pViewData->GetTabNo();
+        ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
         // test in same order as in SID_CURRENTCELL execute
 
@@ -1570,20 +1571,20 @@ ScNameInputType lcl_GetInputType( const 
         SCTAB nNameTab;
         sal_Int32 nNumeric;
 
-        if ( aRange.Parse( rText, pDoc ) & SCA_VALID )
+        if ( aRange.Parse( rText, pDoc, eConv ) & SCA_VALID )
             eRet = SC_NAME_INPUT_NAMEDRANGE;
-        else if ( aAddress.Parse( rText, pDoc ) & SCA_VALID )
+        else if ( aAddress.Parse( rText, pDoc, eConv ) & SCA_VALID )
             eRet = SC_NAME_INPUT_CELL;
-        else if ( aRangeUtil.MakeRangeFromName( rText, pDoc, nTab, aRange, RUTL_NAMES ) )
+        else if ( aRangeUtil.MakeRangeFromName( rText, pDoc, nTab, aRange, RUTL_NAMES, eConv ) )
             eRet = SC_NAME_INPUT_NAMEDRANGE;
-        else if ( aRangeUtil.MakeRangeFromName( rText, pDoc, nTab, aRange, RUTL_DBASE ) )
+        else if ( aRangeUtil.MakeRangeFromName( rText, pDoc, nTab, aRange, RUTL_DBASE, eConv ) )
             eRet = SC_NAME_INPUT_DATABASE;
         else if ( ByteString( rText, RTL_TEXTENCODING_ASCII_US ).IsNumericAscii() &&
                   ( nNumeric = rText.ToInt32() ) > 0 && nNumeric <= MAXROW+1 )
             eRet = SC_NAME_INPUT_ROW;
         else if ( pDoc->GetTable( rText, nNameTab ) )
             eRet = SC_NAME_INPUT_SHEET;
-        else if ( ScRangeData::IsNameValid( rText, pDoc ) )     // nothing found, create new range?
+        else if ( ScRangeData::IsNameValid( rText, pDoc, eConv ) )     // nothing found, create new range?
         {
             if ( pViewData->GetSimpleArea( aRange ) )
                 eRet = SC_NAME_INPUT_DEFINE;
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/app/scmod.cxx sc/source/ui/app/scmod.cxx
--- sc.clean/source/ui/app/scmod.cxx	2008-03-03 11:24:45.000000000 -0500
+++ sc/source/ui/app/scmod.cxx	2008-03-19 17:38:48.000000000 -0400
@@ -1253,6 +1253,7 @@ void ScModule::ModifyOptions( const SfxI
 						 || rOldOpt.IsMatchWholeCell() != rNewOpt.IsMatchWholeCell()
 						 || rOldOpt.GetYear2000()	!= rNewOpt.GetYear2000()
                          || rOldOpt.IsFormulaRegexEnabled() != rNewOpt.IsFormulaRegexEnabled()
+                         || rOldOpt.GetFormulaSyntax() != rNewOpt.GetFormulaSyntax()
 						 );
 			pDoc->SetDocOptions( rNewOpt );
 			pDocSh->SetDocumentModified();
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/dbgui/consdlg.cxx sc/source/ui/dbgui/consdlg.cxx
--- sc.clean/source/ui/dbgui/consdlg.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/dbgui/consdlg.cxx	2008-03-21 01:18:40.000000000 -0400
@@ -198,6 +198,8 @@ void ScConsolidateDlg::Init()
 
 	aLbFunc.SelectEntryPos( FuncToLbPos( theConsData.eFunction ) );
 
+    const ScAddress::Convention eConv = pDoc->GetAddressConvention();
+
 	// Einlesen der Konsolidierungsbereiche
 	aLbConsAreas.Clear();
 	for ( i=0; i<theConsData.nDataAreaCount; i++ )
@@ -207,7 +209,7 @@ void ScConsolidateDlg::Init()
 		{
             ScRange( rArea.nColStart, rArea.nRowStart, rArea.nTab,
                     rArea.nColEnd, rArea.nRowEnd, rArea.nTab ).Format( aStr,
-                        SCR_ABS_3D, pDoc );
+                        SCR_ABS_3D, pDoc, eConv );
             aLbConsAreas.InsertEntry( aStr );
         }
     }
@@ -215,7 +217,7 @@ void ScConsolidateDlg::Init()
 	if ( theConsData.nTab < pDoc->GetTableCount() )
     {
         ScAddress( theConsData.nCol, theConsData.nRow, theConsData.nTab
-                ).Format( aStr, SCA_ABS_3D, pDoc );
+                ).Format( aStr, SCA_ABS_3D, pDoc, eConv );
         aEdDestArea.SetText( aStr );
     }
 	else
@@ -248,7 +250,7 @@ void ScConsolidateDlg::Init()
 		ScAreaNameIterator aIter( pDoc );
 		while ( aIter.Next( aStrName, aRange ) )
 		{
-			aRange.Format( aStrArea, SCA_ABS_3D, pDoc );
+			aRange.Format( aStrArea, SCA_ABS_3D, pDoc, eConv );
 			pAreaData[nAt++].Set( aStrName, aStrArea, aIter.WasDBName() );
 		}
 	}
@@ -305,14 +307,15 @@ void ScConsolidateDlg::SetReference( con
 
 		String		aStr;
 		USHORT	 	nFmt = SCR_ABS_3D;		 //!!! nCurTab fehlt noch
+        const ScAddress::Convention eConv = pDocP->GetAddressConvention();
 
 		if ( rRef.aStart.Tab() != rRef.aEnd.Tab() )
 			nFmt |= SCA_TAB2_3D;
 
 		if ( pRefInputEdit == &aEdDataArea)
-            rRef.Format( aStr, nFmt, pDocP );
+            rRef.Format( aStr, nFmt, pDocP, eConv );
 		else if ( pRefInputEdit == &aEdDestArea )
-            rRef.aStart.Format( aStr, nFmt, pDocP );
+            rRef.aStart.Format( aStr, nFmt, pDocP, eConv );
 
 		pRefInputEdit->SetRefString( aStr );
 	}
@@ -369,11 +372,12 @@ BOOL ScConsolidateDlg::VerifyEdit( ScRef
 	SCTAB	nTab	= pViewData->GetTabNo();
 	BOOL	bEditOk = FALSE;
 	String	theCompleteStr;
+    const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
 	if ( pEd == &aEdDataArea )
 	{
 		bEditOk = pRangeUtil->IsAbsArea( pEd->GetText(), pDoc,
-										 nTab, &theCompleteStr );
+										 nTab, &theCompleteStr, NULL, NULL, eConv );
 	}
 	else if ( pEd == &aEdDestArea )
 	{
@@ -381,7 +385,7 @@ BOOL ScConsolidateDlg::VerifyEdit( ScRef
 
 		pRangeUtil->CutPosString( pEd->GetText(), aPosStr );
 		bEditOk = pRangeUtil->IsAbsPos( aPosStr, pDoc,
-										nTab, &theCompleteStr );
+										nTab, &theCompleteStr, NULL, eConv );
 	}
 
 	if ( bEditOk )
@@ -425,8 +429,9 @@ IMPL_LINK( ScConsolidateDlg, OkHdl, void
 		ScRefAddress aDestAddress;
 		SCTAB		nTab = pViewData->GetTabNo();
 		String		aDestPosStr( aEdDestArea.GetText() );
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
-		if ( pRangeUtil->IsAbsPos( aDestPosStr, pDoc, nTab, NULL, &aDestAddress ) )
+		if ( pRangeUtil->IsAbsPos( aDestPosStr, pDoc, nTab, NULL, &aDestAddress, eConv ) )
 		{
 			ScConsolidateParam	theOutParam( theConsData );
 			ScArea**			ppDataAreas = new ScArea*[nDataAreaCount];
@@ -437,7 +442,7 @@ IMPL_LINK( ScConsolidateDlg, OkHdl, void
 			{
 				pArea = new ScArea;
 				pRangeUtil->MakeArea( aLbConsAreas.GetEntry( i ),
-									  *pArea, pDoc, nTab );
+									  *pArea, pDoc, nTab, eConv );
 				ppDataAreas[i] = pArea;
 			}
 
@@ -488,8 +493,9 @@ IMPL_LINK( ScConsolidateDlg, ClickHdl, P
 			String		aNewEntry( aEdDataArea.GetText() );
 			ScArea**	ppAreas = NULL;
 			USHORT		nAreaCount = 0;
+            const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
-			if ( pRangeUtil->IsAbsTabArea( aNewEntry, pDoc, &ppAreas, &nAreaCount, TRUE ) )
+			if ( pRangeUtil->IsAbsTabArea( aNewEntry, pDoc, &ppAreas, &nAreaCount, TRUE, eConv ) )
 			{
 				// IsAbsTabArea() legt ein Array von ScArea-Zeigern an,
 				// welche ebenfalls dynamisch erzeugt wurden.
@@ -504,7 +510,7 @@ IMPL_LINK( ScConsolidateDlg, ClickHdl, P
                         const ScArea& rArea = *(ppAreas[i]);
                         ScRange( rArea.nColStart, rArea.nRowStart, rArea.nTab,
                                 rArea.nColEnd, rArea.nRowEnd, rArea.nTab
-                                ).Format( aNewArea, SCR_ABS_3D, pDoc );
+                                ).Format( aNewArea, SCR_ABS_3D, pDoc, eConv );
 
 						if ( aLbConsAreas.GetEntryPos( aNewArea )
 							 == LISTBOX_ENTRY_NOTFOUND )
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/dbgui/dbnamdlg.cxx sc/source/ui/dbgui/dbnamdlg.cxx
--- sc.clean/source/ui/dbgui/dbnamdlg.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/dbgui/dbnamdlg.cxx	2008-03-20 23:08:31.000000000 -0400
@@ -263,7 +263,7 @@ void ScDbNameDlg::Init()
 		theCurArea = ScRange( ScAddress( nStartCol, nStartRow, nStartTab ),
 							  ScAddress( nEndCol,   nEndRow,   nEndTab ) );
 
-		theCurArea.Format( theAreaStr, ABS_DREF3D, pDoc );
+		theCurArea.Format( theAreaStr, ABS_DREF3D, pDoc, pDoc->GetAddressConvention() );
 
 		if ( pDBColl )
 		{
@@ -342,7 +342,7 @@ void ScDbNameDlg::SetReference( const Sc
 		theCurArea = rRef;
 
 		String aRefStr;
-        theCurArea.Format( aRefStr, ABS_DREF3D, pDocP );
+        theCurArea.Format( aRefStr, ABS_DREF3D, pDocP, pDocP->GetAddressConvention() );
 		aEdAssign.SetRefString( aRefStr );
 		aBtnHeader.Enable();
 		aBtnDoSize.Enable();
@@ -437,7 +437,7 @@ void ScDbNameDlg::UpdateDBData( const St
 		pData->GetArea( nTab, nColStart, nRowStart, nColEnd, nRowEnd );
 		theCurArea = ScRange( ScAddress( nColStart, nRowStart, nTab ),
 							  ScAddress( nColEnd,	nRowEnd,   nTab ) );
-		theCurArea.Format( theArea, ABS_DREF3D, pDoc );
+		theCurArea.Format( theArea, ABS_DREF3D, pDoc, pDoc->GetAddressConvention() );
 		aEdAssign.SetText( theArea );
 		aBtnAdd.SetText( aStrModify );
 		aBtnHeader.Check( pData->HasHeader() );
@@ -511,7 +511,7 @@ IMPL_LINK( ScDbNameDlg, AddBtnHdl, void 
 			//	weil jetzt editiert werden kann, muss erst geparst werden
 			ScRange aTmpRange;
 			String aText = aEdAssign.GetText();
-			if ( aTmpRange.ParseAny( aText, pDoc ) & SCA_VALID )
+			if ( aTmpRange.ParseAny( aText, pDoc, pDoc->GetAddressConvention() ) & SCA_VALID )
 			{
 				theCurArea = aTmpRange;
 				ScAddress aStart = theCurArea.aStart;
@@ -730,7 +730,7 @@ IMPL_LINK( ScDbNameDlg, AssModifyHdl, vo
 
 	ScRange aTmpRange;
 	String aText = aEdAssign.GetText();
-	if ( aTmpRange.ParseAny( aText, pDoc ) & SCA_VALID )
+	if ( aTmpRange.ParseAny( aText, pDoc, pDoc->GetAddressConvention() ) & SCA_VALID )
 		theCurArea = aTmpRange;
 
 	return 0;
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/dbgui/filtdlg.cxx sc/source/ui/dbgui/filtdlg.cxx
--- sc.clean/source/ui/dbgui/filtdlg.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/dbgui/filtdlg.cxx	2008-03-20 23:37:05.000000000 -0400
@@ -316,7 +316,7 @@ void ScFilterDlg::SetReference( const Sc
 		if ( rRef.aStart != rRef.aEnd )
 			RefInputStart( &aEdCopyArea );
 		String aRefStr;
-        rRef.aStart.Format( aRefStr, SCA_ABS_3D, pDocP );
+        rRef.aStart.Format( aRefStr, SCA_ABS_3D, pDocP, pDocP->GetAddressConvention() );
 		aEdCopyArea.SetRefString( aRefStr );
 	}
 }
@@ -545,7 +545,7 @@ ScQueryItem* ScFilterDlg::GetOutputItem(
 		if ( STRING_NOTFOUND != nColonPos )
 			theCopyStr.Erase( nColonPos );
 
-		USHORT nResult = theCopyPos.Parse( theCopyStr, pDoc );
+		USHORT nResult = theCopyPos.Parse( theCopyStr, pDoc, pDoc->GetAddressConvention() );
 		bCopyPosOk = ( SCA_VALID == (nResult & SCA_VALID) );
 	}
 
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/dbgui/foptmgr.cxx sc/source/ui/dbgui/foptmgr.cxx
--- sc.clean/source/ui/dbgui/foptmgr.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/dbgui/foptmgr.cxx	2008-03-20 23:42:36.000000000 -0400
@@ -153,8 +153,9 @@ void ScFilterOptionsMgr::Init()
 		ScDBCollection*	pDBColl		= pDoc->GetDBCollection();
 		String			theDbArea;
 		String			theDbName	= rStrNoName;
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
-		theCurArea.Format( theAreaStr, SCR_ABS_3D, pDoc );
+		theCurArea.Format( theAreaStr, SCR_ABS_3D, pDoc, eConv );
 
 		// Zielbereichsliste fuellen
 
@@ -169,7 +170,7 @@ void ScFilterOptionsMgr::Init()
 		{
 			USHORT nInsert = rLbCopyPos.InsertEntry( aName );
 
-			aRange.aStart.Format( aRefStr, SCA_ABS_3D, pDoc );
+			aRange.aStart.Format( aRefStr, SCA_ABS_3D, pDoc, eConv );
 			rLbCopyPos.SetEntryData( nInsert, new String( aRefStr ) );
 		}
 
@@ -218,7 +219,7 @@ void ScFilterOptionsMgr::Init()
 			ScAddress( rQueryData.nDestCol,
 					   rQueryData.nDestRow,
 					   rQueryData.nDestTab
-					 ).Format( aString, SCA_ABS_3D, pDoc );
+					 ).Format( aString, SCA_ABS_3D, pDoc, eConv );
 
 			rBtnCopyResult.Check( TRUE );
 			rEdCopyPos.SetText( aString );
@@ -253,7 +254,7 @@ BOOL ScFilterOptionsMgr::VerifyPosStr( c
 	if ( STRING_NOTFOUND != nColonPos )
 		aPosStr.Erase( nColonPos );
 
-	USHORT nResult = ScAddress().Parse( aPosStr, pDoc );
+	USHORT nResult = ScAddress().Parse( aPosStr, pDoc, pDoc->GetAddressConvention() );
 
 	return ( SCA_VALID == (nResult & SCA_VALID) );
 }
@@ -288,7 +289,7 @@ IMPL_LINK( ScFilterOptionsMgr, EdPosModi
 	if ( pEd == &rEdCopyPos )
 	{
 		String	theCurPosStr = pEd->GetText();
-		USHORT	nResult = ScAddress().Parse( theCurPosStr, pDoc );
+		USHORT	nResult = ScAddress().Parse( theCurPosStr, pDoc, pDoc->GetAddressConvention() );
 
 		if ( SCA_VALID == (nResult & SCA_VALID) )
 		{
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/dbgui/sfiltdlg.cxx sc/source/ui/dbgui/sfiltdlg.cxx
--- sc.clean/source/ui/dbgui/sfiltdlg.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/dbgui/sfiltdlg.cxx	2008-03-20 23:51:04.000000000 -0400
@@ -197,7 +197,7 @@ void __EXPORT ScSpecialFilterDlg::Init( 
 		if (rQueryItem.GetAdvancedQuerySource(aAdvSource))
 		{
 			String aRefStr;
-			aAdvSource.Format( aRefStr, SCR_ABS_3D, pDoc );
+			aAdvSource.Format( aRefStr, SCR_ABS_3D, pDoc, pDoc->GetAddressConvention() );
 			aEdFilterArea.SetRefString( aRefStr );
 		}
 	}
@@ -260,11 +260,12 @@ void ScSpecialFilterDlg::SetReference( c
 			RefInputStart( pRefInputEdit );
 
 		String aRefStr;
+        const ScAddress::Convention eConv = pDocP->GetAddressConvention();
 
 		if ( pRefInputEdit == &aEdCopyArea)
-			rRef.aStart.Format( aRefStr, SCA_ABS_3D, pDocP );
+			rRef.aStart.Format( aRefStr, SCA_ABS_3D, pDocP, eConv );
 		else if ( pRefInputEdit == &aEdFilterArea)
-			rRef.Format( aRefStr, SCR_ABS_3D, pDocP );
+			rRef.Format( aRefStr, SCR_ABS_3D, pDocP, eConv );
 
 		pRefInputEdit->SetRefString( aRefStr );
 	}
@@ -334,6 +335,7 @@ IMPL_LINK( ScSpecialFilterDlg, EndDlgHdl
 		BOOL			bEditInputOk	= TRUE;
 		BOOL			bQueryOk		= FALSE;
 		ScRange			theFilterArea;
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
 		if ( aBtnCopyResult.IsChecked() )
 		{
@@ -342,7 +344,7 @@ IMPL_LINK( ScSpecialFilterDlg, EndDlgHdl
 			if ( STRING_NOTFOUND != nColonPos )
 				theCopyStr.Erase( nColonPos );
 
-			USHORT nResult = theAdrCopy.Parse( theCopyStr, pDoc );
+			USHORT nResult = theAdrCopy.Parse( theCopyStr, pDoc, eConv );
 
 			if ( SCA_VALID != (nResult & SCA_VALID) )
 			{
@@ -357,7 +359,7 @@ IMPL_LINK( ScSpecialFilterDlg, EndDlgHdl
 
 		if ( bEditInputOk )
 		{
-			USHORT nResult = ScRange().Parse( theAreaStr, pDoc );
+			USHORT nResult = ScRange().Parse( theAreaStr, pDoc, eConv );
 
 			if ( SCA_VALID != (nResult & SCA_VALID) )
 			{
@@ -375,7 +377,7 @@ IMPL_LINK( ScSpecialFilterDlg, EndDlgHdl
 			 * ein ScQueryParam zu erzeugen:
 			 */
 
-			USHORT	nResult = theFilterArea.Parse( theAreaStr, pDoc );
+			USHORT	nResult = theFilterArea.Parse( theAreaStr, pDoc, eConv );
 
 			if ( SCA_VALID == (nResult & SCA_VALID) )
 			{
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/dbgui/tpsort.cxx sc/source/ui/dbgui/tpsort.cxx
--- sc.clean/source/ui/dbgui/tpsort.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/dbgui/tpsort.cxx	2008-03-20 23:33:16.000000000 -0400
@@ -633,6 +633,7 @@ void ScTabPageSortOptions::Init()
 		String			theDbArea;
 		String			theDbName	= aStrNoName;
 		const SCTAB	nCurTab		= pViewData->GetTabNo();
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
 		aLbOutPos.Clear();
 		aLbOutPos.InsertEntry( aStrUndefined, 0 );
@@ -646,7 +647,7 @@ void ScTabPageSortOptions::Init()
 		{
 			USHORT nInsert = aLbOutPos.InsertEntry( aName );
 
-			aRange.aStart.Format( aRefStr, SCA_ABS_3D, pDoc );
+			aRange.aStart.Format( aRefStr, SCA_ABS_3D, pDoc, eConv );
 			aLbOutPos.SetEntryData( nInsert, new String( aRefStr ) );
 		}
 
@@ -661,7 +662,7 @@ void ScTabPageSortOptions::Init()
 		ScAddress aScAddress( rSortData.nCol1, rSortData.nRow1, nCurTab );
 		ScRange( aScAddress,
 				 ScAddress( rSortData.nCol2, rSortData.nRow2, nCurTab )
-			   ).Format( theArea, SCR_ABS, pDoc );
+			   ).Format( theArea, SCR_ABS, pDoc, eConv );
 
 		if ( pDBColl )
 		{
@@ -762,7 +763,7 @@ void __EXPORT ScTabPageSortOptions::Rese
 					   rSortData.nDestRow,
 					   rSortData.nDestTab );
 
-		theOutPos.Format( aStr, nFormat, pDoc );
+		theOutPos.Format( aStr, nFormat, pDoc, pDoc->GetAddressConvention() );
 		aBtnCopyResult.Check();
 		aLbOutPos.Enable();
 		aEdOutPos.Enable();
@@ -874,7 +875,7 @@ int __EXPORT ScTabPageSortOptions::Deact
 			thePos.SetTab( pViewData->GetTabNo() );
 		}
 
-		USHORT nResult = thePos.Parse( thePosStr, pDoc );
+		USHORT nResult = thePos.Parse( thePosStr, pDoc, pDoc->GetAddressConvention() );
 
 		bPosInputOk = ( SCA_VALID == (nResult & SCA_VALID) );
 
@@ -993,7 +994,7 @@ void __EXPORT ScTabPageSortOptions::EdOu
 	if ( pEd == &aEdOutPos )
 	{
 		String	theCurPosStr = aEdOutPos.GetText();
-		USHORT	nResult = ScAddress().Parse( theCurPosStr, pDoc );
+		USHORT	nResult = ScAddress().Parse( theCurPosStr, pDoc, pDoc->GetAddressConvention() );
 
 		if ( SCA_VALID == (nResult & SCA_VALID) )
 		{
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/formdlg/formula.cxx sc/source/ui/formdlg/formula.cxx
--- sc.clean/source/ui/formdlg/formula.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/formdlg/formula.cxx	2008-03-20 16:17:02.000000000 -0400
@@ -306,7 +306,7 @@ ScFormulaDlg::ScFormulaDlg( SfxBindings*
 
 			xub_StrLen nFStart = 0;
 			xub_StrLen nFEnd   = 0;
-			if ( ScFormulaUtil::GetNextFunc( aFormula, FALSE, nFStart, &nFEnd) )
+			if ( ScFormulaUtil::GetNextFunc( aFormula, FALSE, pDoc->GetAddressConvention(), nFStart, &nFEnd, NULL, NULL ) )
 			{
 				pScMod->InputReplaceSelection( aFormula );
 				pScMod->InputSetSelection( nFStart, nFEnd );
@@ -523,7 +523,7 @@ void ScFormulaDlg::FillControls()
 	const ScFuncDesc*		pOldFuncDesc=pFuncDesc;
 	BOOL			bTestFlag=FALSE;
 
-	if ( ScFormulaUtil::GetNextFunc( aFormula, FALSE,
+	if ( ScFormulaUtil::GetNextFunc( aFormula, FALSE, pDoc->GetAddressConvention(),
 									 nNextFStart, &nNextFEnd, &pFuncDesc, &pArgArr ) )
 	{
 		bTestFlag=(pOldFuncDesc!=pFuncDesc);
@@ -564,7 +564,7 @@ void ScFormulaDlg::FillControls()
 
 		if(bTestFlag) aScParaWin.SetArgCount(nArgs,nOffset);
 		USHORT nActiv=0;
-		xub_StrLen nArgPos=ScFormulaUtil::GetArgStart( aFormula, nFStart, 0 );
+		xub_StrLen nArgPos=ScFormulaUtil::GetArgStart( aFormula, nFStart, 0, pDoc->GetAddressConvention() );
 		xub_StrLen nEditPos=(xub_StrLen) pMEdit->GetSelection().Min();
 		BOOL	bFlag=FALSE;
 
@@ -595,11 +595,11 @@ void ScFormulaDlg::FillControls()
 	}
 		//	Test, ob vorne/hinten noch mehr Funktionen sind
 
-	xub_StrLen nTempStart = ScFormulaUtil::GetArgStart( aFormula, nFStart, 0 );
-	BOOL bNext = ScFormulaUtil::GetNextFunc( aFormula, FALSE, nTempStart );
+	xub_StrLen nTempStart = ScFormulaUtil::GetArgStart( aFormula, nFStart, 0, pDoc->GetAddressConvention() );
+	BOOL bNext = ScFormulaUtil::GetNextFunc( aFormula, FALSE, pDoc->GetAddressConvention(), nTempStart );
 	nTempStart=(xub_StrLen)pMEdit->GetSelection().Min();
 	pData->SetFStart(nTempStart);
-	BOOL bPrev = ScFormulaUtil::GetNextFunc( aFormula, TRUE, nTempStart );
+	BOOL bPrev = ScFormulaUtil::GetNextFunc( aFormula, TRUE, pDoc->GetAddressConvention(), nTempStart );
 	aBtnBackward.Enable(bPrev);
 	aBtnForward.Enable(bNext);
 }
@@ -809,7 +809,7 @@ void ScFormulaDlg::UpdateFunctionDesc()
 		{
             pDesc->InitArgumentInfo();      // full argument info is needed
 
-			String aSig = pDesc->GetSignature();
+			String aSig = pDesc->GetSignature(pDoc->GetAddressConvention());
 
 			aFtFuncName.SetText( aSig );
 			if(pDesc->pFuncDesc)
@@ -819,7 +819,7 @@ void ScFormulaDlg::UpdateFunctionDesc()
 			ResizeArgArr( pDesc );
 
 			if ( pArgArr && pArgArr[0] && pArgArr[0]->Len() )		// noch Argumente da?
-				aSig = pDesc->GetFormulaString( pArgArr );			// fuer Eingabezeile
+				aSig = pDesc->GetFormulaString( pArgArr, pDoc->GetAddressConvention() );			// fuer Eingabezeile
 			//@ pScMod->InputReplaceSelection( aSig );
 		}
 	}
@@ -899,7 +899,7 @@ void ScFormulaDlg::EditThisFunc(xub_StrL
 
 	//@bFound = ScFormulaUtil::GetNextFunc( aFormula, FALSE, nNextFStart, &nNextFEnd, &pFuncDesc );
 
-	bFound = ScFormulaUtil::GetNextFunc( aFormula, FALSE, nNextFStart, &nNextFEnd);
+	bFound = ScFormulaUtil::GetNextFunc( aFormula, FALSE, pDoc->GetAddressConvention(), nNextFStart, &nNextFEnd);
 	if ( bFound )
 	{
 		xub_StrLen nFEnd;
@@ -959,15 +959,15 @@ void ScFormulaDlg::EditNextFunc( BOOL bF
 	BOOL bFound;
 	if ( bForward )
 	{
-		nNextFStart	= ScFormulaUtil::GetArgStart( aFormula, nFStart, 0 );
+		nNextFStart	= ScFormulaUtil::GetArgStart( aFormula, nFStart, 0, pDoc->GetAddressConvention() );
 		//@bFound = ScFormulaUtil::GetNextFunc( aFormula, FALSE, nNextFStart, &nNextFEnd, &pFuncDesc );
-		bFound = ScFormulaUtil::GetNextFunc( aFormula, FALSE, nNextFStart, &nNextFEnd);
+		bFound = ScFormulaUtil::GetNextFunc( aFormula, FALSE, pDoc->GetAddressConvention(), nNextFStart, &nNextFEnd);
 	}
 	else
 	{
 		nNextFStart	= nFStart;
 		//@bFound = ScFormulaUtil::GetNextFunc( aFormula, TRUE, nNextFStart, &nNextFEnd, &pFuncDesc );
-		bFound = ScFormulaUtil::GetNextFunc( aFormula, TRUE, nNextFStart, &nNextFEnd);
+		bFound = ScFormulaUtil::GetNextFunc( aFormula, TRUE, pDoc->GetAddressConvention(), nNextFStart, &nNextFEnd);
 	}
 
 	if ( bFound )
@@ -1012,8 +1012,8 @@ void ScFormulaDlg::EditFuncParas(xub_Str
 
 		nArgs = pFuncDesc->nArgCount;
 
-		xub_StrLen nArgPos=ScFormulaUtil::GetArgStart( aFormula, nFStart, 0 );
-		pArgArr = ScFormulaUtil::GetArgStrings( aFormula, nFStart, pFuncDesc->nArgCount );
+		xub_StrLen nArgPos=ScFormulaUtil::GetArgStart( aFormula, nFStart, 0, pDoc->GetAddressConvention() );
+		pArgArr = ScFormulaUtil::GetArgStrings( aFormula, nFStart, pFuncDesc->nArgCount, pDoc->GetAddressConvention() );
 
 		USHORT nActiv=aScParaWin.GetSliderPos();
 		BOOL	bFlag=FALSE;
@@ -1068,8 +1068,6 @@ BOOL ScFormulaDlg::CalcValue( const Stri
 		{
 			ScFormulaCell* pFCell = new ScFormulaCell( pDoc, aCursorPos, rStrExp );
 
-			ScCompiler*	pCompi=new ScCompiler( pDoc, aCursorPos, *(pFCell->GetCode()));
-
 			// #35521# HACK! um bei ColRowNames kein #REF! zu bekommen,
 			// wenn ein Name eigentlich als Bereich in die Gesamt-Formel
 			// eingefuegt wird, bei der Einzeldarstellung aber als
@@ -1129,7 +1127,6 @@ BOOL ScFormulaDlg::CalcValue( const Stri
 			}
 
 			delete pFCell;
-			delete pCompi;
 		}
 		else
 			bResult = FALSE;
@@ -1143,7 +1140,7 @@ void ScFormulaDlg::UpdateValues()
 	ScModule* pScMod = SC_MOD();
 	String aStrResult;
 
-	if ( CalcValue( pFuncDesc->GetFormulaString( pArgArr ), aStrResult ) )
+	if ( CalcValue( pFuncDesc->GetFormulaString( pArgArr, pDoc->GetAddressConvention() ), aStrResult ) )
 		aWndResult.SetValue( aStrResult );
 
 	aStrResult.Erase();
@@ -1206,7 +1203,7 @@ IMPL_LINK( ScFormulaDlg, FxHdl, ScParaWi
 		xub_StrLen nFormulaStrPos = pData->GetFStart();
 
 		String aFormula = pScMod->InputGetFormulaStr();
-		xub_StrLen n1 = ScFormulaUtil::GetArgStart( aFormula, nFormulaStrPos, nEdFocus+pData->GetOffset() );
+		xub_StrLen n1 = ScFormulaUtil::GetArgStart( aFormula, nFormulaStrPos, nEdFocus+pData->GetOffset(), pDoc->GetAddressConvention() );
 
 		pData->SetEdFocus( nEdFocus );
 		pData->SaveValues();
@@ -1335,7 +1332,7 @@ IMPL_LINK( ScFormulaDlg, FormulaCursorHd
 
 		if(nFStart<nPos)
 		{
-			xub_StrLen nPos1=ScFormulaUtil::GetFunctionEnd(aString,nFStart);
+			xub_StrLen nPos1=ScFormulaUtil::GetFunctionEnd(aString, nFStart, pDoc->GetAddressConvention());
 
 			if(nPos1>nPos || nPos1==STRING_NOTFOUND)
 			{
@@ -1356,7 +1353,7 @@ IMPL_LINK( ScFormulaDlg, FormulaCursorHd
 				}
 				if(nCount==0)
 				{
-					nFStart=ScFormulaUtil::GetFunctionStart(aString,n,TRUE);
+					nFStart = ScFormulaUtil::GetFunctionStart( aString, n, TRUE, pDoc->GetAddressConvention() );
 					EditThisFunc(nFStart);
 				}
 				else
@@ -1382,7 +1379,7 @@ void ScFormulaDlg::UpdateSelection()
 
 	pScMod->InputSetSelection((xub_StrLen)aFuncSel.Min(),(xub_StrLen)aFuncSel.Max());
 
-	pScMod->InputReplaceSelection( pFuncDesc->GetFormulaString( pArgArr ) );
+	pScMod->InputReplaceSelection( pFuncDesc->GetFormulaString( pArgArr, pDoc->GetAddressConvention() ) );
 	pMEdit->SetText(pScMod->InputGetFormulaStr());
 	xub_StrLen PrivStart, PrivEnd;
 	pScMod->InputGetSelection( PrivStart, PrivEnd);
@@ -1392,7 +1389,7 @@ void ScFormulaDlg::UpdateSelection()
 	nArgs = pFuncDesc->nArgCount;
 
 	String aFormula=pMEdit->GetText();
-	xub_StrLen nArgPos=ScFormulaUtil::GetArgStart( aFormula,PrivStart,0);
+	xub_StrLen nArgPos=ScFormulaUtil::GetArgStart( aFormula, PrivStart, 0, pDoc->GetAddressConvention() );
 
 	USHORT nPos=aScParaWin.GetActiveLine();
 
@@ -1500,6 +1497,8 @@ void ScFormulaDlg::SetReference( const S
 			RefInputStart(aScParaWin.GetActiveEdit());
 		}
 
+        ScAddress::Convention eConv = pRefDoc->GetAddressConvention();
+
 		BOOL bOtherDoc = ( pRefDoc != pDoc && pRefDoc->GetDocumentShell()->HasName() );
 		if ( bOtherDoc )
 		{
@@ -1508,7 +1507,7 @@ void ScFormulaDlg::SetReference( const S
 			DBG_ASSERT(rRef.aStart.Tab()==rRef.aEnd.Tab(), "nStartTab!=nEndTab");
 
 			String aTmp;
-			rRef.Format( aTmp, SCA_VALID|SCA_TAB_3D, pRefDoc );		// immer 3d
+			rRef.Format( aTmp, SCA_VALID|SCA_TAB_3D, pRefDoc, eConv );		// immer 3d
 
 			SfxObjectShell* pObjSh = pRefDoc->GetDocumentShell();
 
@@ -1526,7 +1525,7 @@ void ScFormulaDlg::SetReference( const S
 			USHORT nFmt = ( rRef.aStart.Tab() == aCursorPos.Tab() )
 								? SCA_VALID
 								: SCA_VALID | SCA_TAB_3D;
-			rRef.Format( aRefStr, nFmt, pRefDoc );
+			rRef.Format( aRefStr, nFmt, pRefDoc, eConv );
 		}
 
 		aEdRef.ReplaceSelected( aRefStr );
@@ -1648,6 +1647,8 @@ void ScFormulaDlg::UpdateTokenArray( con
 
 xub_StrLen ScFormulaDlg::GetFunctionPos(xub_StrLen nPos)
 {
+    const sal_Unicode sep = ScCompiler::GetStringFromOpCode(ocSep, false, pDoc->GetAddressConvention()).GetChar(0);
+
 	xub_StrLen nTokPos=1;
 	xub_StrLen nOldTokPos=1;
 	xub_StrLen nFuncPos=STRING_NOTFOUND;    //@ Testweise
@@ -1673,7 +1674,7 @@ xub_StrLen ScFormulaDlg::GetFunctionPos(
 
 			if(eOp==ocPush || eOp==ocSpaces)
 			{
-				xub_StrLen n1=aFormString.Search(';',nTokPos);
+				xub_StrLen n1=aFormString.Search(sep, nTokPos);
 				xub_StrLen n2=aFormString.Search(')',nTokPos);
 				xub_StrLen nXXX=nTokPos;
 				if(n1<n2)
@@ -1903,7 +1904,7 @@ IMPL_LINK( ScFormulaDlg, FuncSelHdl, ScF
 		{
             pDesc->InitArgumentInfo();      // full argument info is needed
 
-			String aSig = pDesc->GetSignature();
+			String aSig = pDesc->GetSignature(pDoc->GetAddressConvention());
 			if(pDesc->pFuncName)
 				aFtHeadLine.SetText( *(pDesc->pFuncName) );
 			else
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/inc/crnrdlg.hxx sc/source/ui/inc/crnrdlg.hxx
--- sc.clean/source/ui/inc/crnrdlg.hxx	2008-03-03 11:24:45.000000000 -0500
+++ sc/source/ui/inc/crnrdlg.hxx	2008-03-21 12:00:22.000000000 -0400
@@ -52,6 +52,7 @@
 #include <vcl/lstbox.hxx>
 #endif
 
+#include <hash_map>
 
 class ScViewData;
 class ScDocument;
@@ -96,6 +97,8 @@ private:
 	ScRangePairListRef	xColNameRanges;
 	ScRangePairListRef	xRowNameRanges;
 
+    typedef ::std::hash_map< String, ScRange, ScStringHashCode, ::std::equal_to<String> > NameRangeMap;
+    NameRangeMap    aRangeMap;
 	ScViewData*		pViewData;
 	ScDocument*		pDoc;
 	ScRefEdit*		pEdActive;
@@ -105,7 +108,7 @@ private:
 private:
 	void Init				();
 	void UpdateNames		();
-	void UpdateRangeData	( const String& rStrName, BOOL bColName );
+	void UpdateRangeData	( const ScRange& rRange, BOOL bColName );
 	void SetColRowData( const ScRange& rLabelRange,BOOL bRef=FALSE);
 	void AdjustColRowData( const ScRange& rDataRange,BOOL bRef=FALSE);
 	DECL_LINK( CancelBtnHdl, void * );
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/inc/optdlg.hrc sc/source/ui/inc/optdlg.hrc
--- sc.clean/source/ui/inc/optdlg.hrc	2008-03-03 11:24:45.000000000 -0500
+++ sc/source/ui/inc/optdlg.hrc	2008-03-19 16:21:34.000000000 -0400
@@ -78,6 +78,8 @@
 #define BTN_MATCH			18
 #define BTN_LOOKUP			19
 #define BTN_REGEX           20
+#define FT_FORMULA_SYNTAX   21
+#define LB_FORMULA_SYNTAX   22
 
 // TP_VIEW:
 #define BTN_VSCROLL			1
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/inc/tpcalc.hxx sc/source/ui/inc/tpcalc.hxx
--- sc.clean/source/ui/inc/tpcalc.hxx	2008-03-03 11:24:45.000000000 -0500
+++ sc/source/ui/inc/tpcalc.hxx	2008-03-19 18:34:51.000000000 -0400
@@ -61,6 +61,8 @@
 #include "editfield.hxx"
 #endif
 
+#include "vcl/lstbox.hxx"
+
 //===================================================================
 
 class ScDocOptions;
@@ -101,6 +103,8 @@ private:
 	CheckBox		aBtnMatch;
     CheckBox        aBtnRegex;
 	CheckBox		aBtnLookUp;
+    FixedText       aFtFormulaSyntax;
+    ListBox         aLBFormulaSyntax;
 
 	FixedText		aFtPrec;
 	NumericField	aEdPrec;
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/miscdlgs/crnrdlg.cxx sc/source/ui/miscdlgs/crnrdlg.cxx
--- sc.clean/source/ui/miscdlgs/crnrdlg.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/miscdlgs/crnrdlg.cxx	2008-03-21 12:17:41.000000000 -0400
@@ -289,8 +289,9 @@ void ScColRowNameRangesDlg::SetColRowDat
 	}
 	if ( bValid )
 	{
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 		String aStr;
-		theCurArea.Format( aStr, SCR_ABS_3D, pDoc );
+		theCurArea.Format( aStr, SCR_ABS_3D, pDoc, eConv );
 
 		if(bRef)
 			aEdAssign.SetRefString( aStr );
@@ -298,7 +299,7 @@ void ScColRowNameRangesDlg::SetColRowDat
 			aEdAssign.SetText( aStr );
 
 		aEdAssign.SetSelection( Selection( SELECTION_MAX, SELECTION_MAX ) );
-		theCurData.Format( aStr, SCR_ABS_3D, pDoc );
+		theCurData.Format( aStr, SCR_ABS_3D, pDoc, eConv );
 
 		if(bRef)
 			aEdAssign2.SetRefString( aStr );
@@ -393,7 +394,7 @@ void ScColRowNameRangesDlg::AdjustColRow
 		}
 	}
 	String aStr;
-	theCurData.Format( aStr, SCR_ABS_3D, pDoc );
+	theCurData.Format( aStr, SCR_ABS_3D, pDoc, pDoc->GetAddressConvention() );
 
 	if(bRef)
 		aEdAssign2.SetRefString( aStr );
@@ -514,6 +515,7 @@ void ScColRowNameRangesDlg::UpdateNames(
 	aLbRange.SetUpdateMode( FALSE );
 	//-----------------------------------------------------------
 	aLbRange.Clear();
+    aRangeMap.clear();
 	aEdAssign.SetText( EMPTY_STRING );
 
 	ULONG nCount, j;
@@ -527,6 +529,7 @@ void ScColRowNameRangesDlg::UpdateNames(
 	SCTAB nTab2;
 	String rString;
 	String strShow;
+    const ScAddress::Details aDetails(pDoc->GetAddressConvention());
 
 	String aString;
 	String strDelim = String::CreateFromAscii(RTL_CONSTASCII_STRINGPARAM( " --- " ));
@@ -541,7 +544,8 @@ void ScColRowNameRangesDlg::UpdateNames(
 			nCount, pDoc );
 		for ( j=0; j < nCount; j++ )
 		{
-			ppSortArray[j]->GetRange(0).Format( aString, SCR_ABS_3D, pDoc );
+            const ScRange aRange(ppSortArray[j]->GetRange(0));
+			aRange.Format( aString, SCR_ABS_3D, pDoc, aDetails );
 
 			//@008 Hole Bereichsparameter aus Dok
 			ppSortArray[j]->GetRange(0).GetVars( nCol1, nRow1, nTab1,
@@ -571,6 +575,7 @@ void ScColRowNameRangesDlg::UpdateNames(
 			String aInsStr = aString;
 			aInsStr += strShow;
 			nPos = aLbRange.InsertEntry( aInsStr );
+            aRangeMap.insert( NameRangeMap::value_type(aInsStr, aRange) );
 			aLbRange.SetEntryData( nPos, (void*)nEntryDataCol );
 		}
 		delete [] ppSortArray;
@@ -586,7 +591,8 @@ void ScColRowNameRangesDlg::UpdateNames(
 			nCount, pDoc );
 		for ( j=0; j < nCount; j++ )
 		{
-			ppSortArray[j]->GetRange(0).Format( aString, SCR_ABS_3D, pDoc );
+            const ScRange aRange(ppSortArray[j]->GetRange(0));
+			aRange.Format( aString, SCR_ABS_3D, pDoc, aDetails );
 
 			//@008 Ab hier baue String fuer Zeilen
 			ppSortArray[j]->GetRange(0).GetVars( nCol1, nRow1, nTab1,
@@ -614,6 +620,7 @@ void ScColRowNameRangesDlg::UpdateNames(
 			String aInsStr = aString;
 			aInsStr += strShow;
 			nPos = aLbRange.InsertEntry( aInsStr );
+            aRangeMap.insert( NameRangeMap::value_type(aInsStr, aRange) );
 			aLbRange.SetEntryData( nPos, (void*)nEntryDataRow );
 		}
 		delete [] ppSortArray;
@@ -639,40 +646,28 @@ void ScColRowNameRangesDlg::UpdateNames(
 #*
 #************************************************************************/
 
-void ScColRowNameRangesDlg::UpdateRangeData( const String& rRangeStr, BOOL bColName )
+void ScColRowNameRangesDlg::UpdateRangeData( const ScRange& rRange, BOOL bColName )
 {
-	ScRange aRange;
-	String aRefString=rRangeStr;
-
-	//@008 Suchen nach Erweiterung u. rausschmeissen
-	xub_StrLen nPosExt=rRangeStr.Search( '[',0 );
-
-	if(nPosExt!=STRING_NOTFOUND)
-	{
-		nPosExt--;
-		aRefString.Erase(nPosExt);
-	}
-	aRange.ParseAny( aRefString, pDoc );
-
     ScRangePair* pPair = NULL;
 	BOOL bFound = FALSE;
-    if ( bColName && (pPair = xColNameRanges->Find( aRange )) != NULL )
+    if ( bColName && (pPair = xColNameRanges->Find( rRange )) != NULL )
 		bFound = TRUE;
-    else if ( !bColName && (pPair = xRowNameRanges->Find( aRange )) != NULL )
+    else if ( !bColName && (pPair = xRowNameRanges->Find( rRange )) != NULL )
 		bFound = TRUE;
 
 	if ( bFound )
 	{
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 		String aStr;
-		theCurArea = aRange;
-		theCurArea.Format( aStr, SCR_ABS_3D, pDoc );
+		theCurArea = rRange;
+		theCurArea.Format( aStr, SCR_ABS_3D, pDoc, eConv );
 		aEdAssign.SetText( aStr );
 		aBtnAdd.Disable();
 		aBtnRemove.Enable();
 		aBtnColHead.Check( bColName );
 		aBtnRowHead.Check( !bColName );
 		theCurData = pPair->GetRange(1);
-		theCurData.Format( aStr, SCR_ABS_3D, pDoc );
+		theCurData.Format( aStr, SCR_ABS_3D, pDoc, eConv );
 		aEdAssign2.SetText( aStr );
 	}
 	else
@@ -790,10 +785,11 @@ IMPL_LINK( ScColRowNameRangesDlg, AddBtn
 
 	if ( aNewArea.Len() > 0 && aNewData.Len() > 0 )
 	{
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 		ScRange aRange1, aRange2;
 		BOOL bOk1;
-        if ( (bOk1 = ((aRange1.ParseAny( aNewArea, pDoc ) & SCA_VALID) == SCA_VALID)) != FALSE
-		  && ((aRange2.ParseAny( aNewData, pDoc ) & SCA_VALID) == SCA_VALID) )
+        if ( (bOk1 = ((aRange1.ParseAny( aNewArea, pDoc, eConv ) & SCA_VALID) == SCA_VALID)) != FALSE
+		  && ((aRange2.ParseAny( aNewData, pDoc, eConv ) & SCA_VALID) == SCA_VALID) )
 		{
 			theCurArea = aRange1;
 			AdjustColRowData( aRange2 );
@@ -860,26 +856,16 @@ IMPL_LINK( ScColRowNameRangesDlg, Remove
 	USHORT nSelectPos = aLbRange.GetSelectEntryPos();
 	BOOL bColName =
 		((ULONG)aLbRange.GetEntryData( nSelectPos ) == nEntryDataCol);
-	ScRange aRange;
-
-	//@008 Suchen nach Erweiterung u. rausschmeissen
-	String aRefString=aRangeStr;
-
-	xub_StrLen nPosExt=aRangeStr.Search( '[', 0 );
-
-	if(nPosExt!=STRING_NOTFOUND)
-	{
-		nPosExt--;
-		aRefString.Erase(nPosExt);
-	}
-
-	aRange.ParseAny( aRefString, pDoc );
+    NameRangeMap::const_iterator itr = aRangeMap.find(aRangeStr);
+    if (itr == aRangeMap.end())
+        return 0;
+    const ScRange& rRange = itr->second;
 
     ScRangePair* pPair = NULL;
 	BOOL bFound = FALSE;
-    if ( bColName && (pPair = xColNameRanges->Find( aRange )) != NULL )
+    if ( bColName && (pPair = xColNameRanges->Find( rRange )) != NULL )
 		bFound = TRUE;
-    else if ( !bColName && (pPair = xRowNameRanges->Find( aRange )) != NULL )
+    else if ( !bColName && (pPair = xRowNameRanges->Find( rRange )) != NULL )
 		bFound = TRUE;
 	if ( bFound )
 	{
@@ -971,11 +957,12 @@ IMPL_LINK( ScColRowNameRangesDlg, Range1
 			aRangeStr = aLbRange.GetSelectEntry();
 		}
 	}
-	if ( aRangeStr.Len() && aRangeStr.GetChar(0) == '$' )
+    NameRangeMap::const_iterator itr = aRangeMap.find(aRangeStr);
+    if ( itr != aRangeMap.end() )
 	{
 		BOOL bColName =
 			((ULONG)aLbRange.GetEntryData( nSelectPos ) == nEntryDataCol);
-		UpdateRangeData( aRangeStr, bColName );
+		UpdateRangeData( itr->second, bColName );
 		aBtnAdd.Disable();
 		aBtnRemove.Enable();
 	}
@@ -1035,7 +1022,7 @@ IMPL_LINK( ScColRowNameRangesDlg, Range1
 	if ( aNewArea.Len() > 0 )
 	{
 		ScRange aRange;
-		if ( (aRange.ParseAny( aNewArea, pDoc ) & SCA_VALID) == SCA_VALID )
+		if ( (aRange.ParseAny( aNewArea, pDoc, pDoc->GetAddressConvention() ) & SCA_VALID) == SCA_VALID )
 		{
 			SetColRowData( aRange );
 			bValid = TRUE;
@@ -1083,7 +1070,7 @@ IMPL_LINK( ScColRowNameRangesDlg, Range2
 	if ( aNewData.Len() > 0 )
 	{
 		ScRange aRange;
-		if ( (aRange.ParseAny( aNewData, pDoc ) & SCA_VALID) == SCA_VALID )
+		if ( (aRange.ParseAny( aNewData, pDoc, pDoc->GetAddressConvention() ) & SCA_VALID) == SCA_VALID )
 		{
 			AdjustColRowData( aRange );
 			aBtnAdd.Enable();
@@ -1125,7 +1112,7 @@ IMPL_LINK( ScColRowNameRangesDlg, ColCli
 		{
 			theCurArea.aEnd.SetRow( MAXROW - 1 );
 			String aStr;
-			theCurArea.Format( aStr, SCR_ABS_3D, pDoc );
+			theCurArea.Format( aStr, SCR_ABS_3D, pDoc, pDoc->GetAddressConvention() );
 			aEdAssign.SetText( aStr );
 		}
 		ScRange aRange( theCurData );
@@ -1163,7 +1150,7 @@ IMPL_LINK( ScColRowNameRangesDlg, RowCli
 		{
 			theCurArea.aEnd.SetCol( MAXCOL - 1 );
 			String aStr;
-			theCurArea.Format( aStr, SCR_ABS_3D, pDoc );
+			theCurArea.Format( aStr, SCR_ABS_3D, pDoc, pDoc->GetAddressConvention() );
 			aEdAssign.SetText( aStr );
 		}
 		ScRange aRange( theCurData );
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/miscdlgs/solvrdlg.cxx sc/source/ui/miscdlgs/solvrdlg.cxx
--- sc.clean/source/ui/miscdlgs/solvrdlg.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/miscdlgs/solvrdlg.cxx	2008-03-21 01:29:10.000000000 -0400
@@ -126,7 +126,7 @@ void __EXPORT ScSolverDlg::Init()
     aEdVariableCell.SetLoseFocusHdl ( aLink );
     aRBVariableCell.SetLoseFocusHdl ( aLink );
 
-	theFormulaCell.Format( aStr, SCA_ABS );
+	theFormulaCell.Format( aStr, SCA_ABS, pDoc, pDoc->GetAddressConvention() );
 
 	aEdFormulaCell.SetText( aStr );
 	aEdFormulaCell.GrabFocus();
@@ -172,7 +172,7 @@ void ScSolverDlg::SetReference( const Sc
 								? SCA_ABS
 								: SCA_ABS_3D;
 
-        aAdr.Format( aStr, nFmt, pDocP );
+        aAdr.Format( aStr, nFmt, pDocP, pDocP->GetAddressConvention() );
 		pEdActive->SetRefString( aStr );
 
 		if ( pEdActive == &aEdFormulaCell )
@@ -241,8 +241,9 @@ IMPL_LINK( ScSolverDlg, BtnHdl, PushButt
 		// 2. verweist die Formel-Koordinate wirklich auf eine Formelzelle?
 		// 3. wurde ein korrekter Zielwert eingegeben
 
-		USHORT	nRes1 = theFormulaCell .Parse( aEdFormulaCell.GetText(), pDoc );
-		USHORT	nRes2 = theVariableCell.Parse( aEdVariableCell.GetText(), pDoc );
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
+		USHORT	nRes1 = theFormulaCell .Parse( aEdFormulaCell.GetText(), pDoc, eConv );
+		USHORT	nRes2 = theVariableCell.Parse( aEdVariableCell.GetText(), pDoc, eConv );
 
 		if ( SCA_VALID == ( nRes1 & SCA_VALID ) )
 		{
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/miscdlgs/tabopdlg.cxx sc/source/ui/miscdlgs/tabopdlg.cxx
--- sc.clean/source/ui/miscdlgs/tabopdlg.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/miscdlgs/tabopdlg.cxx	2008-03-21 00:38:02.000000000 -0400
@@ -170,21 +170,22 @@ void ScTabOpDlg::SetReference( const ScR
 								? SCR_ABS
 								: SCR_ABS_3D;
 
+        const ScAddress::Convention eConv = pDocP->GetAddressConvention();
 		if ( pEdActive == &aEdFormulaRange )
 		{
 			theFormulaCell.Set( rRef.aStart, false, false, false);
 			theFormulaEnd.Set( rRef.aEnd, false, false, false);
-            rRef.Format( aStr, nFmt, pDocP );
+            rRef.Format( aStr, nFmt, pDocP, eConv );
 		}
 		else if ( pEdActive == &aEdRowCell )
 		{
 			theRowCell.Set( rRef.aStart, false, false, false);
-            rRef.aStart.Format( aStr, nFmt, pDocP );
+            rRef.aStart.Format( aStr, nFmt, pDocP, eConv );
 		}
 		else if ( pEdActive == &aEdColCell )
 		{
 			theColCell.Set( rRef.aStart, false, false, false);
-            rRef.aStart.Format( aStr, nFmt, pDocP );
+            rRef.aStart.Format( aStr, nFmt, pDocP, eConv );
 		}
 
 		pEdActive->SetRefString( aStr );
@@ -246,11 +247,12 @@ BOOL lcl_Parse( const String& rString, S
 				ScRefAddress& rStart, ScRefAddress& rEnd )
 {
 	BOOL bRet = FALSE;
+    const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 	if ( rString.Search(':') != STRING_NOTFOUND )
-		bRet = ConvertDoubleRef( pDoc, rString, nCurTab, rStart, rEnd );
+		bRet = ConvertDoubleRef( pDoc, rString, nCurTab, rStart, rEnd, eConv );
 	else
 	{
-		bRet = ConvertSingleRef( pDoc, rString, nCurTab, rStart );
+		bRet = ConvertSingleRef( pDoc, rString, nCurTab, rStart, eConv );
 		rEnd = rStart;
 	}
 	return bRet;
@@ -282,9 +284,10 @@ IMPL_LINK( ScTabOpDlg, BtnHdl, PushButto
 			nError = TABOPERR_WRONGFORMULA;
 		else
 		{
+            const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 			if (aEdRowCell.GetText().Len() > 0)
 			{
-				if (!ConvertSingleRef( pDoc, aEdRowCell.GetText(), nCurTab, theRowCell ))
+				if (!ConvertSingleRef( pDoc, aEdRowCell.GetText(), nCurTab, theRowCell, eConv ))
 					nError = TABOPERR_WRONGROW;
 				else
 				{
@@ -298,7 +301,7 @@ IMPL_LINK( ScTabOpDlg, BtnHdl, PushButto
 			if (aEdColCell.GetText().Len() > 0)
 			{
 				if (!ConvertSingleRef( pDoc, aEdColCell.GetText(), nCurTab,
-									   theColCell ))
+									   theColCell, eConv ))
 					nError = TABOPERR_WRONGCOL;
 				else
 				{
@@ -306,7 +309,7 @@ IMPL_LINK( ScTabOpDlg, BtnHdl, PushButto
 					{
 						nMode = 2;
 						ConvertSingleRef( pDoc, aEdFormulaRange.GetText(), nCurTab,
-										  theFormulaCell );
+										  theFormulaCell, eConv );
 					}
 					else if (theFormulaCell.Row() != theFormulaEnd.Row())
 						nError = TABOPERR_NOROWFORMULA;
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/namedlg/namedlg.cxx sc/source/ui/namedlg/namedlg.cxx
--- sc.clean/source/ui/namedlg/namedlg.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/namedlg/namedlg.cxx	2008-03-20 19:59:06.000000000 -0400
@@ -208,7 +208,7 @@ void __EXPORT ScNameDlg::Init()
 	UpdateNames();
 
 	pViewData->GetSimpleArea( aRange );
-	aRange.Format( aAreaStr, ABS_DREF3D, pDoc );
+	aRange.Format( aAreaStr, ABS_DREF3D, pDoc, pDoc->GetAddressConvention() );
 
 	theCurSel = Selection( 0, SELECTION_MAX );
 	aEdAssign.GrabFocus();
@@ -253,7 +253,7 @@ void ScNameDlg::SetReference( const ScRa
 		if ( rRef.aStart != rRef.aEnd )
 			RefInputStart(&aEdAssign);
 		String aRefStr;
-        rRef.Format( aRefStr, ABS_DREF3D, pDocP );
+        rRef.Format( aRefStr, ABS_DREF3D, pDocP, pDocP->GetAddressConvention() );
 		aEdAssign.SetRefString( aRefStr );
 	}
 }
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/optdlg/tpcalc.cxx sc/source/ui/optdlg/tpcalc.cxx
--- sc.clean/source/ui/optdlg/tpcalc.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/optdlg/tpcalc.cxx	2008-03-19 18:18:38.000000000 -0400
@@ -96,6 +96,8 @@ ScTpCalcOptions::ScTpCalcOptions( Window
 		aBtnMatch	 	( this, ScResId( BTN_MATCH ) ),
         aBtnRegex       ( this, ScResId( BTN_REGEX ) ),
 		aBtnLookUp   	( this, ScResId( BTN_LOOKUP ) ),
+        aFtFormulaSyntax( this, ScResId( FT_FORMULA_SYNTAX ) ),
+        aLBFormulaSyntax( this, ScResId( LB_FORMULA_SYNTAX ) ),
 		aFtPrec 		( this, ScResId( FT_PREC ) ),
 		aEdPrec 		( this, ScResId( ED_PREC ) ),
 		pOldOptions 	( new ScDocOptions(
@@ -161,6 +163,18 @@ void __EXPORT ScTpCalcOptions::Reset( co
 	aEdPrec    .SetValue( pLocalOptions->GetStdPrecision() );
     aEdEps     .SetValue( pLocalOptions->GetIterEps(), 6 );
 
+    ScAddress::Convention eConv = pLocalOptions->GetFormulaSyntax();
+    switch (eConv)
+    {
+        case ScAddress::CONV_OOO:
+        case ScAddress::CONV_XL_A1:
+        case ScAddress::CONV_XL_R1C1:
+            aLBFormulaSyntax.SelectEntryPos(static_cast<USHORT>(eConv));
+        break;
+        default:
+            aLBFormulaSyntax.SelectEntryPos(0);
+    }
+
 	pLocalOptions->GetDate( d, m, y );
 
 	switch ( y )
@@ -192,6 +206,8 @@ BOOL __EXPORT ScTpCalcOptions::FillItemS
 	pLocalOptions->SetMatchWholeCell( aBtnMatch.IsChecked() );
     pLocalOptions->SetFormulaRegexEnabled( aBtnRegex.IsChecked() );
 	pLocalOptions->SetLookUpColRowNames( aBtnLookUp.IsChecked() );
+    pLocalOptions->SetFormulaSyntax(
+        static_cast<ScAddress::Convention>(aLBFormulaSyntax.GetSelectEntryPos()) );
 
 	if ( *pLocalOptions != *pOldOptions )
 	{
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/pagedlg/areasdlg.cxx sc/source/ui/pagedlg/areasdlg.cxx
--- sc.clean/source/ui/pagedlg/areasdlg.cxx	2008-03-03 11:24:50.000000000 -0500
+++ sc/source/ui/pagedlg/areasdlg.cxx	2008-03-25 13:09:04.000000000 -0400
@@ -61,6 +61,7 @@
 #include "docsh.hxx"
 #include "globstr.hrc"
 #include "pagedlg.hrc"
+#include "compiler.hxx"
 
 // STATIC DATA ---------------------------------------------------------------
 
@@ -85,10 +86,32 @@ const USHORT SC_AREASDLG_RR_OFFSET  = 2;
 
 // globale Funktionen (->am Ende der Datei):
 
-BOOL	lcl_CheckRepeatString( const String& rStr, BOOL bIsRow, ScRange* pRange );
-void	lcl_GetRepeatRangeString( const ScRange* pRange, BOOL bIsRow, String& rStr );
-void	lcl_CheckEqual( String& rStr );
+bool    lcl_CheckRepeatString( const String& rStr, ScDocument* pDoc, bool bIsRow, ScRange* pRange );
+void	lcl_GetRepeatRangeString( const ScRange* pRange, ScDocument* pDoc, bool bIsRow, String& rStr );
 
+static void printAddressFlags(USHORT nFlag)
+{
+    if ((nFlag & SCA_COL_ABSOLUTE  ) == SCA_COL_ABSOLUTE  )  printf("SCA_COL_ABSOLUTE \n");
+    if ((nFlag & SCA_ROW_ABSOLUTE  ) == SCA_ROW_ABSOLUTE  )  printf("SCA_ROW_ABSOLUTE \n");
+    if ((nFlag & SCA_TAB_ABSOLUTE  ) == SCA_TAB_ABSOLUTE  )  printf("SCA_TAB_ABSOLUTE \n");
+    if ((nFlag & SCA_TAB_3D        ) == SCA_TAB_3D        )  printf("SCA_TAB_3D       \n");
+    if ((nFlag & SCA_COL2_ABSOLUTE ) == SCA_COL2_ABSOLUTE )  printf("SCA_COL2_ABSOLUTE\n");
+    if ((nFlag & SCA_ROW2_ABSOLUTE ) == SCA_ROW2_ABSOLUTE )  printf("SCA_ROW2_ABSOLUTE\n");
+    if ((nFlag & SCA_TAB2_ABSOLUTE ) == SCA_TAB2_ABSOLUTE )  printf("SCA_TAB2_ABSOLUTE\n");
+    if ((nFlag & SCA_TAB2_3D       ) == SCA_TAB2_3D       )  printf("SCA_TAB2_3D      \n");
+    if ((nFlag & SCA_VALID_ROW     ) == SCA_VALID_ROW     )  printf("SCA_VALID_ROW    \n");
+    if ((nFlag & SCA_VALID_COL     ) == SCA_VALID_COL     )  printf("SCA_VALID_COL    \n");
+    if ((nFlag & SCA_VALID_TAB     ) == SCA_VALID_TAB     )  printf("SCA_VALID_TAB    \n");
+    if ((nFlag & SCA_FORCE_DOC     ) == SCA_FORCE_DOC     )  printf("SCA_FORCE_DOC    \n");
+    if ((nFlag & SCA_VALID_ROW2    ) == SCA_VALID_ROW2    )  printf("SCA_VALID_ROW2   \n");
+    if ((nFlag & SCA_VALID_COL2    ) == SCA_VALID_COL2    )  printf("SCA_VALID_COL2   \n");
+    if ((nFlag & SCA_VALID_TAB2    ) == SCA_VALID_TAB2    )  printf("SCA_VALID_TAB2   \n");
+    if ((nFlag & SCA_VALID         ) == SCA_VALID         )  printf("SCA_VALID        \n");
+    if ((nFlag & SCA_ABS           ) == SCA_ABS           )  printf("SCA_ABS          \n");
+    if ((nFlag & SCR_ABS           ) == SCR_ABS           )  printf("SCR_ABS          \n");
+    if ((nFlag & SCA_ABS_3D        ) == SCA_ABS_3D        )  printf("SCA_ABS_3D       \n");
+    if ((nFlag & SCR_ABS_3D        ) == SCR_ABS_3D        )  printf("SCR_ABS_3D       \n");
+}
 
 //============================================================================
 //	class ScPrintAreasDlg
@@ -190,11 +213,11 @@ void ScPrintAreasDlg::SetReference( cons
 			RefInputStart( pRefInputEdit );
 
 		String	aStr;
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
 		if ( &aEdPrintArea == pRefInputEdit )
 		{
-			rRef.Format( aStr, SCR_ABS );
-			lcl_CheckEqual( aStr );
+			rRef.Format( aStr, SCR_ABS, pDoc, eConv );
 
 //			aEdPrintArea.ReplaceSelected( aStr );
 
@@ -210,7 +233,7 @@ void ScPrintAreasDlg::SetReference( cons
 		else
 		{
 			BOOL bRow = ( &aEdRepeatRow == pRefInputEdit );
-			lcl_GetRepeatRangeString( &rRef, bRow, aStr );
+            lcl_GetRepeatRangeString(&rRef, pDoc, bRow, aStr);
 			pRefInputEdit->SetRefString( aStr );
 		}
 	}
@@ -225,8 +248,9 @@ void ScPrintAreasDlg::AddRefEntry()
 {
 	if ( pRefInputEdit == &aEdPrintArea )
 	{
+        const sal_Unicode sep = ScCompiler::GetStringFromOpCode(ocSep, false, pDoc->GetAddressConvention()).GetChar(0);
 		String aVal = aEdPrintArea.GetText();
-		aVal += ';';
+		aVal += sep;
 		aEdPrintArea.SetText(aVal);
 
 		xub_StrLen nLen = aVal.Len();
@@ -296,6 +320,8 @@ void ScPrintAreasDlg::Impl_Reset()
 	//-------------------------
 	aStrRange.Erase();
     String aOne;
+    const ScAddress::Convention eConv = pDoc->GetAddressConvention();
+    const sal_Unicode sep = ScCompiler::GetStringFromOpCode(ocSep, false, eConv).GetChar(0);
     USHORT nRangeCount = pDoc->GetPrintRangeCount( nCurTab );
     for (USHORT i=0; i<nRangeCount; i++)
     {
@@ -303,9 +329,8 @@ void ScPrintAreasDlg::Impl_Reset()
         if (pPrintRange)
         {
             if ( aStrRange.Len() )
-                aStrRange += ';';
-            pPrintRange->Format( aOne, SCR_ABS );
-            lcl_CheckEqual( aOne );
+                aStrRange += sep;
+            pPrintRange->Format( aOne, SCR_ABS, pDoc, eConv );
             aStrRange += aOne;
         }
     }
@@ -314,13 +339,13 @@ void ScPrintAreasDlg::Impl_Reset()
 	//-------------------------------
 	// Wiederholungszeile
 	//-------------------------------
-	lcl_GetRepeatRangeString( pRepeatRowRange, TRUE, aStrRange );
+    lcl_GetRepeatRangeString(pRepeatRowRange, pDoc, true, aStrRange);
 	aEdRepeatRow.SetText( aStrRange );
 
 	//--------------------------------
 	// Wiederholungsspalte
 	//--------------------------------
-	lcl_GetRepeatRangeString( pRepeatColRange, FALSE, aStrRange );
+    lcl_GetRepeatRangeString(pRepeatColRange, pDoc, false, aStrRange);
 	aEdRepeatCol.SetText( aStrRange );
 
 	Impl_ModifyHdl( &aEdPrintArea );
@@ -345,9 +370,9 @@ BOOL ScPrintAreasDlg::Impl_GetItem( Edit
 	if ( (aRangeStr.Len() > 0) && &aEdPrintArea != pEd )
 	{
 		ScRange aRange;
-		lcl_CheckRepeatString( aRangeStr, &aEdRepeatRow == pEd, &aRange );
-		aRange.Format( aRangeStr, SCR_ABS );
-		lcl_CheckEqual( aRangeStr );
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
+        lcl_CheckRepeatString(aRangeStr, pDoc, &aEdRepeatRow == pEd, &aRange);
+		aRange.Format(aRangeStr, SCR_ABS, pDoc, eConv);
 	}
 
 	rItem.SetValue( aRangeStr );
@@ -368,25 +393,41 @@ BOOL ScPrintAreasDlg::Impl_CheckRefStrin
 	BOOL bPrintAreaOk = TRUE;
 	if ( aStrPrintArea.Len() )
 	{
+        const USHORT nValidAddr  = SCA_VALID | SCA_VALID_ROW | SCA_VALID_COL;
+        const USHORT nValidRange = nValidAddr | SCA_VALID_ROW2 | SCA_VALID_COL2;
+        const ScAddress::Convention eConv = pDoc->GetAddressConvention();
+        const sal_Unicode sep  = ScCompiler::GetStringFromOpCode(ocSep, false, eConv).GetChar(0);
+        const sal_Unicode rsep = ScCompiler::GetStringFromOpCode(ocRange, false, eConv).GetChar(0);
+
+        ScAddress aAddr;
 		ScRange aRange;
-		xub_StrLen nTCount = aStrPrintArea.GetTokenCount();
-		for ( xub_StrLen i=0; i<nTCount && bPrintAreaOk; i++ )
+		xub_StrLen nSepCount = aStrPrintArea.GetTokenCount(sep);
+		for ( xub_StrLen i = 0; i < nSepCount && bPrintAreaOk; ++i )
 		{
-			String aOne = aStrPrintArea.GetToken(i);
-			lcl_CheckEqual( aOne );
-			USHORT nResult = aRange.ParseAny( aOne, pDoc );
-			if (!(nResult & SCA_VALID))
-				bPrintAreaOk = FALSE;
+			String aOne = aStrPrintArea.GetToken(i, sep);
+            bool bIsRange = (aOne.Search(rsep, 0) != STRING_NOTFOUND);
+            if (bIsRange)
+            {
+                USHORT nResult = aRange.Parse( aOne, pDoc, eConv );
+                if ((nResult & nValidRange) != nValidRange)
+                    bPrintAreaOk = FALSE;
+            }
+            else
+            {
+                USHORT nResult = aAddr.Parse( aOne, pDoc, eConv );
+                if ((nResult & nValidAddr) != nValidAddr)
+                    bPrintAreaOk = FALSE;
+            }
 		}
 	}
 
 	BOOL bRepeatRowOk = (aStrRepeatRow.Len() == 0);
 	if ( !bRepeatRowOk )
-		bRepeatRowOk = lcl_CheckRepeatString( aStrRepeatRow, TRUE, NULL );
+        bRepeatRowOk = lcl_CheckRepeatString(aStrRepeatRow, pDoc, true, NULL);
 
 	BOOL bRepeatColOk = (aStrRepeatCol.Len() == 0);
 	if ( !bRepeatColOk )
-		bRepeatColOk = lcl_CheckRepeatString( aStrRepeatCol, FALSE, NULL );
+        bRepeatColOk = lcl_CheckRepeatString(aStrRepeatCol, pDoc, false, NULL);
 
 	// Fehlermeldungen
 
@@ -418,17 +459,18 @@ void ScPrintAreasDlg::Impl_FillLists()
 	ScRange	aRange;
 	String	aStrRange;
 	BOOL bSimple = TRUE;
+    const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
 	if ( pViewData )
 		bSimple = pViewData->GetSimpleArea( aRange );
 
 	if ( bSimple )
-		aRange.Format( aStrRange, SCR_ABS, pDoc );
+		aRange.Format( aStrRange, SCR_ABS, pDoc, eConv );
 	else
 	{
 		ScRangeListRef aList( new ScRangeList );
 		pViewData->GetMarkData().FillRangeListWithMarks( aList, FALSE );
-		aList->Format( aStrRange, SCR_ABS, pDoc );
+		aList->Format( aStrRange, SCR_ABS, pDoc, eConv );
 	}
 
     aLbPrintArea.SetEntryData( SC_AREASDLG_PR_SELECT, new String( aStrRange ) );
@@ -457,11 +499,11 @@ void ScPrintAreasDlg::Impl_FillLists()
 				{
 					pData->GetName( aName );
 					pData->GetSymbol( aSymbol );
-					if ( aRange.ParseAny( aSymbol, pDoc ) & SCA_VALID )
+					if ( aRange.ParseAny( aSymbol, pDoc, eConv ) & SCA_VALID )
 					{
 						if ( pData->HasType( RT_PRINTAREA ) )
 						{
-							aRange.Format( aSymbol, SCR_ABS, pDoc );
+							aRange.Format( aSymbol, SCR_ABS, pDoc, eConv );
 							aLbPrintArea.SetEntryData(
 								aLbPrintArea.InsertEntry( aName ),
 								new String( aSymbol ) );
@@ -469,7 +511,7 @@ void ScPrintAreasDlg::Impl_FillLists()
 
 						if ( pData->HasType( RT_ROWHEADER ) )
 						{
-							lcl_GetRepeatRangeString( &aRange, TRUE, aSymbol );
+                            lcl_GetRepeatRangeString(&aRange, pDoc, true, aSymbol);
 							aLbRepeatRow.SetEntryData(
 								aLbRepeatRow.InsertEntry( aName ),
 								new String( aSymbol ) );
@@ -477,7 +519,7 @@ void ScPrintAreasDlg::Impl_FillLists()
 
 						if ( pData->HasType( RT_COLHEADER ) )
 						{
-							lcl_GetRepeatRangeString( &aRange, FALSE, aSymbol );
+                            lcl_GetRepeatRangeString(&aRange, pDoc, false, aSymbol);
 							aLbRepeatCol.SetEntryData(
 								aLbRepeatCol.InsertEntry( aName ),
 								new String( aSymbol ) );
@@ -669,9 +711,11 @@ IMPL_LINK( ScPrintAreasDlg, Impl_ModifyH
 //============================================================================
 // globale Funktionen:
 
-//----------------------------------------------------------------------------
+// ----------------------------------------------------------------------------
 
-BOOL lcl_CheckRepeatOne( const String& rStr, BOOL bIsRow, SCCOLROW& rVal )
+// TODO: It might make sense to move these functions to address.?xx. -kohei
+
+bool lcl_CheckOne_OOO( const String& rStr, bool bIsRow, SCCOLROW& rVal )
 {
 	// Zulaessige Syntax fuer rStr:
 	// Row: [$]1-MAXTAB
@@ -713,115 +757,160 @@ BOOL lcl_CheckRepeatOne( const String& r
 	return bStrOk;
 }
 
+bool lcl_CheckOne_XL_A1( const String& rStr, bool bIsRow, SCCOLROW& rVal )
+{
+    // XL A1 style is identical to OOO one for print range formats.
+    return lcl_CheckOne_OOO(rStr, bIsRow, rVal);
+}
 
-//----------------------------------------------------------------------------
-//	doppelte Referenz testen
-
-
-BOOL lcl_CheckRepeatString( const String& rStr, BOOL bIsRow, ScRange* pRange )
+bool lcl_CheckOne_XL_R1C1( const String& rStr, bool bIsRow, SCCOLROW& rVal )
 {
-	// Zulaessige Syntax fuer rStr:
-	// Row: $1, $1:$2
-	// Col: $A, $A:$B
-	// und alles auch ohne $
+    xub_StrLen nLen = rStr.Len();
+    if (nLen <= 1)
+        // There must be at least two characters.
+        return false;
 
-	BOOL bOk = FALSE;
-	SCCOLROW nStart = 0;
-	SCCOLROW nEnd = 0;
-	xub_StrLen nCount = rStr.GetTokenCount(':');
-	if (nCount == 1)
-	{
-		bOk = lcl_CheckRepeatOne( rStr, bIsRow, nStart );
-		nEnd = nStart;
-	}
-	else if (nCount == 2)
-	{
-		String aFirst  = rStr.GetToken( 0, ':' );
-		String aSecond = rStr.GetToken( 1, ':' );
-		bOk = lcl_CheckRepeatOne( aFirst, bIsRow, nStart );
-		if (bOk)
-			bOk = lcl_CheckRepeatOne( aSecond, bIsRow, nEnd );
-	}
+    const sal_Unicode preUpper = bIsRow ? 'R' : 'C';
+    const sal_Unicode preLower = bIsRow ? 'r' : 'c';
+    if (rStr.GetChar(0) != preUpper && rStr.GetChar(0) != preLower)
+        return false;
 
+    String aNumStr = rStr.Copy(1);
+    if (!CharClass::isAsciiNumeric(aNumStr))
+        return false;
 
-	if ( bOk && pRange )
-	{
-		ScAddress& rStart = pRange->aStart;
-		ScAddress& rEnd	  = pRange->aEnd;
+    sal_Int32 nNum = aNumStr.ToInt32();
 
-		if ( bIsRow )
-		{
-			rStart.SetCol( 0 );
-			rEnd  .SetCol( 0 );
-			rStart.SetRow( nStart );
-			rEnd  .SetRow( nEnd );
-		}
-		else
-		{
-			rStart.SetCol( static_cast<SCCOL>(nStart) );
-			rEnd  .SetCol( static_cast<SCCOL>(nEnd) );
-			rStart.SetRow( 0 );
-			rEnd  .SetRow( 0 );
-		}
-	}
+    if (nNum <= 0)
+        return false;
 
-	return bOk;
-}
+    if ((bIsRow && nNum > MAXROWCOUNT) || (!bIsRow && nNum > MAXCOLCOUNT))
+        return false;
 
+    rVal = static_cast<SCCOLROW>(nNum-1);
+    return true;
+}
 
-//----------------------------------------------------------------------------
+bool lcl_CheckRepeatOne( const String& rStr, ScAddress::Convention eConv, bool bIsRow, SCCOLROW& rVal )
+{
+    switch (eConv)
+    {
+        case ScAddress::CONV_OOO:
+            return lcl_CheckOne_OOO(rStr, bIsRow, rVal);
+        case ScAddress::CONV_XL_A1:
+            return lcl_CheckOne_XL_A1(rStr, bIsRow, rVal);
+        case ScAddress::CONV_XL_R1C1:
+            return lcl_CheckOne_XL_R1C1(rStr, bIsRow, rVal);
+    }
+    return false;
+}
 
-void lcl_GetRepeatRangeString( const ScRange* pRange, BOOL bIsRow, String& rStr )
+bool lcl_CheckRepeatString( const String& rStr, ScDocument* pDoc, bool bIsRow, ScRange* pRange )
 {
-	if ( pRange )
-	{
-		// In rStr wird die pRange im folgenden Format ausgegeben
-		// Row: $1, $1:$2
-		// Col: $A, $A:$B
+    // Row: [valid row] rsep [valid row]
+    // Col: [valid col] rsep [valid col]
 
-		const ScAddress& rStart = pRange->aStart;
-		const ScAddress& rEnd = pRange->aEnd;
+    const ScAddress::Convention eConv = pDoc->GetAddressConvention();
+    const sal_Unicode rsep = ScCompiler::GetStringFromOpCode(ocRange, false, eConv).GetChar(0);
 
-		rStr  = '$';
-		if ( bIsRow )
-		{
-			rStr += String::CreateFromInt32( rStart.Row()+1 );
-			if ( rStart.Row() != rEnd.Row() )
-			{
-				rStr.AppendAscii(RTL_CONSTASCII_STRINGPARAM( ":$" ));
-				rStr += String::CreateFromInt32( rEnd.Row()+1 );
-			}
-		}
-		else
-		{
-            rStr += ::ColToAlpha( rStart.Col() );
-			if ( rStart.Col() != rEnd.Col() )
-			{
-				rStr.AppendAscii(RTL_CONSTASCII_STRINGPARAM( ":$" ));
-                rStr += ::ColToAlpha( rEnd.Col() );
-			}
-		}
-	}
-	else
-		rStr.Erase();
-}
+    if (pRange)
+    {
+        // initialize the range value.
+        pRange->aStart.SetCol(0);
+        pRange->aStart.SetRow(0);
+        pRange->aEnd.SetCol(0);
+        pRange->aEnd.SetRow(0);
+    }
 
+    String aBuf;
+    SCCOLROW nVal = 0;
+    xub_StrLen nLen = rStr.Len();
+    bool bEndPos = false;
+    for (xub_StrLen i = 0; i < nLen; ++i)
+    {
+        const sal_Unicode c = rStr.GetChar(i);
+        if (c == rsep)
+        {
+            if (bEndPos)
+                // We aren't supposed to have more than one range separator.
+                return false;
+
+            // range separator
+            if (aBuf.Len() == 0)
+                return false;
+
+            bool bRes = lcl_CheckRepeatOne(aBuf, eConv, bIsRow, nVal);
+            if (!bRes)
+                return false;
 
-//----------------------------------------------------------------------------
+            if (pRange)
+            {
+                if (bIsRow)
+                {
+                    pRange->aStart.SetRow(static_cast<SCROW>(nVal));
+                    pRange->aEnd.SetRow(static_cast<SCROW>(nVal));
+                }
+                else
+                {
+                    pRange->aStart.SetCol(static_cast<SCCOL>(nVal));
+                    pRange->aEnd.SetCol(static_cast<SCCOL>(nVal));
+                }
+            }
 
-void lcl_CheckEqual( String& rStr )
-{
-	if ( STRING_NOTFOUND == rStr.Search( ':' ) )
-	{
-		String aStrTmp = rStr;
-		rStr += ':';
-		rStr += aStrTmp;
-	}
-}
+            aBuf.Erase();
+            bEndPos = true;
+        }
+        else
+            aBuf.Append(c);
+    }
 
+    if (aBuf.Len() > 0)
+    {
+        bool bRes = lcl_CheckRepeatOne(aBuf, eConv, bIsRow, nVal);
+        if (!bRes)
+            return false;
 
+        if (pRange)
+        {
+            if (bIsRow)
+            {
+                if (!bEndPos)
+                    pRange->aStart.SetRow(static_cast<SCROW>(nVal));
+                pRange->aEnd.SetRow(static_cast<SCROW>(nVal));
+            }
+            else
+            {
+                if (!bEndPos)
+                    pRange->aStart.SetCol(static_cast<SCCOL>(nVal));
+                pRange->aEnd.SetCol(static_cast<SCCOL>(nVal));
+            }
+        }
+    }
 
+    return true;
+}
 
+// ----------------------------------------------------------------------------
 
+void lcl_GetRepeatRangeString( const ScRange* pRange, ScDocument* pDoc, bool bIsRow, String& rStr )
+{
+    rStr.Erase();
+    if (!pRange)
+        return;
 
+    const ScAddress::Convention eConv = pDoc->GetAddressConvention();
+    const ScAddress& rStart = pRange->aStart;
+    const ScAddress& rEnd   = pRange->aEnd;
+
+    const USHORT nFmt = bIsRow ? (SCA_VALID_ROW | SCA_ROW_ABSOLUTE) : (SCA_VALID_COL | SCA_COL_ABSOLUTE);
+    String aTmpStr;
+    rStart.Format(aTmpStr, nFmt, pDoc, eConv);
+    rStr += aTmpStr;
+    if ((bIsRow && rStart.Row() != rEnd.Row()) || (!bIsRow && rStart.Col() != rEnd.Col()))
+    {
+        rStr += ScCompiler::GetStringFromOpCode(ocRange, false, eConv);
+        rEnd.Format(aTmpStr, nFmt, pDoc, eConv);
+        rStr += aTmpStr;
+    }
+}
 
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/src/optdlg.src sc/source/ui/src/optdlg.src
--- sc.clean/source/ui/src/optdlg.src	2008-03-03 11:24:45.000000000 -0500
+++ sc/source/ui/src/optdlg.src	2008-03-19 16:40:53.000000000 -0400
@@ -173,6 +173,27 @@ TabPage RID_SCPAGE_CALC
         Size = MAP_APPFONT ( 239 , 10 ) ;
 		Text [ en-US ] = "~Automatically find column and row labels " ;
 	};
+
+    FixedText FT_FORMULA_SYNTAX
+    {
+        Pos = MAP_APPFONT ( 21, 147 ) ;
+        Size = MAP_APPFONT ( 80, 8 ) ;
+        Text [ en-US ] = "~Formula syntax" ;
+    };
+
+    ListBox LB_FORMULA_SYNTAX
+    {
+        Border = TRUE ;
+        Pos = MAP_APPFONT ( 85, 145 ) ;
+        Size = MAP_APPFONT ( 60, 46 ) ;
+        DropDown = TRUE ;
+        StringList [ en-US ] =
+        {
+            < "Calc A1" ; Default ; > ;
+            < "Excel A1" ; Default ; > ;
+            < "Excel R1C1" ; Default ; > ;
+        };
+    };
 };
 
 /**************************************************************************/
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/view/tabvwsh3.cxx sc/source/ui/view/tabvwsh3.cxx
--- sc.clean/source/ui/view/tabvwsh3.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/view/tabvwsh3.cxx	2008-03-20 22:11:39.000000000 -0400
@@ -318,8 +318,9 @@ void ScTabViewShell::Execute( SfxRequest
 				else
 				{
 					ScRangeUtil		aRangeUtil;
-					if(	aRangeUtil.MakeRangeFromName( aAddress, pDoc, nTab, aScRange, RUTL_NAMES ) ||
-						aRangeUtil.MakeRangeFromName( aAddress, pDoc, nTab, aScRange, RUTL_DBASE ) )
+                    ScAddress::Convention eConv = pDoc->GetAddressConvention();
+					if(	aRangeUtil.MakeRangeFromName( aAddress, pDoc, nTab, aScRange, RUTL_NAMES, eConv ) ||
+						aRangeUtil.MakeRangeFromName( aAddress, pDoc, nTab, aScRange, RUTL_DBASE, eConv ) )
 					{
 						nResult |= SCA_VALID;
 						if( aScRange.aStart.Tab() != nTab )
Only in sc/source/ui/view: tabvwshf.cxx.~1.13.~
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=sc.vpj sc.clean/source/ui/view/viewfun2.cxx sc/source/ui/view/viewfun2.cxx
--- sc.clean/source/ui/view/viewfun2.cxx	2008-03-03 11:24:49.000000000 -0500
+++ sc/source/ui/view/viewfun2.cxx	2008-03-22 02:33:28.000000000 -0400
@@ -962,6 +962,7 @@ void ScViewFunc::SetPrintRanges( BOOL bE
 	ScMarkData& rMark	= GetViewData()->GetMarkData();
 	SCTAB nTab;
 	BOOL bUndo (pDoc->IsUndoEnabled());
+    const ScAddress::Convention eConv = pDoc->GetAddressConvention();
 
 	ScPrintRangeSaver* pOldRanges = pDoc->CreatePrintRangeSaver();
 
@@ -983,11 +984,14 @@ void ScViewFunc::SetPrintRanges( BOOL bE
 			{
                 if ( pPrint->Len() )
 				{
-					USHORT nTCount = pPrint->GetTokenCount();
+                    const sal_Unicode sep = ScCompiler::GetStringFromOpCode(
+                        ocSep, false, eConv).GetChar(0);
+
+					USHORT nTCount = pPrint->GetTokenCount(sep);
 					for (USHORT i=0; i<nTCount; i++)
 					{
-						String aToken = pPrint->GetToken(i);
-						if ( aRange.ParseAny( aToken, pDoc ) & SCA_VALID )
+						String aToken = pPrint->GetToken(i, sep);
+						if ( aRange.ParseAny( aToken, pDoc, eConv ) & SCA_VALID )
                             pDoc->AddPrintRange( nTab, aRange );
 					}
 				}
@@ -1024,7 +1028,7 @@ void ScViewFunc::SetPrintRanges( BOOL bE
 				if ( !pRepCol->Len() )
 					pDoc->SetRepeatColRange( nTab, NULL );
 				else
-					if ( aRange.ParseAny( *pRepCol, pDoc ) & SCA_VALID )
+					if ( aRange.ParseAny( *pRepCol, pDoc, eConv ) & SCA_VALID )
 						pDoc->SetRepeatColRange( nTab, &aRange );
 			}
 
@@ -1035,7 +1039,7 @@ void ScViewFunc::SetPrintRanges( BOOL bE
 				if ( !pRepRow->Len() )
 					pDoc->SetRepeatRowRange( nTab, NULL );
 				else
-					if ( aRange.ParseAny( *pRepRow, pDoc ) & SCA_VALID )
+					if ( aRange.ParseAny( *pRepRow, pDoc, eConv ) & SCA_VALID )
 						pDoc->SetRepeatRowRange( nTab, &aRange );
 			}
 		}
Only in sc/util: makefile.mk.~1.45.~
Only in officecfg: officecfg.argsep
diff -urp --exclude=CVS --exclude=unxlngi6.pro --exclude=officecfg.vpj officecfg.clean/registry/schema/org/openoffice/Office/Calc.xcs officecfg/registry/schema/org/openoffice/Office/Calc.xcs
--- officecfg.clean/registry/schema/org/openoffice/Office/Calc.xcs	2008-03-03 11:28:58.000000000 -0500
+++ officecfg/registry/schema/org/openoffice/Office/Calc.xcs	2008-03-19 18:32:54.000000000 -0400
@@ -1134,6 +1134,30 @@
 					</info>
 					<value>true</value>
 				</prop>
+				<prop oor:name="FormulaSyntax" oor:type="xs:int">
+					<!-- UIHints: Tools - Options  Spreadsheet  Calculate -->
+					<info>
+						<author>kyoshida</author>
+						<desc>Specifies what formula syntax type to use.</desc>
+					</info>
+					<constraints>
+						<enumeration oor:value="0">
+							<info>
+								<desc>Calc A1</desc>
+							</info>
+						</enumeration>
+						<enumeration oor:value="1">
+							<info>
+								<desc>Excel A1</desc>
+							</info>
+						</enumeration>
+						<enumeration oor:value="2">
+							<info>
+								<desc>Excel R1C1</desc>
+							</info>
+						</enumeration>
+					</constraints>
+				</prop>
 				<node-ref oor:name="Date" oor:node-type="Date">
 					<info>
 						<desc>Specifies the date that is represented by the number 0.</desc>
