--- vcl/inc/button.hxx	13 Jan 2005 17:27:12 -0000	1.14
+++ vcl/inc/button.hxx	2 Feb 2005 20:45:54 -0000	1.14.10.1
@@ -347,6 +347,7 @@
                               bool bLayout = false );
     SAL_DLLPRIVATE void     ImplDrawRadioButton( bool bLayout = false );
     SAL_DLLPRIVATE void     ImplUncheckAllOther();
+    SAL_DLLPRIVATE Size     ImplGetRadioImageSize() const;
 
     // Copy assignment is forbidden and not implemented.
 	SAL_DLLPRIVATE          RadioButton(const RadioButton &);
@@ -441,6 +442,7 @@
                                     Rectangle& rStateRect,
                                     Rectangle& rMouseRect, bool bLayout );
     SAL_DLLPRIVATE void         ImplDrawCheckBox( bool bLayout = false );
+    SAL_DLLPRIVATE Size         ImplGetCheckImageSize() const;
 
     // Copy assignment is forbidden and not implemented.
 	SAL_DLLPRIVATE              CheckBox(const CheckBox &);
--- vcl/source/control/button.cxx	31 Jan 2005 09:17:00 -0000	1.35
+++ vcl/source/control/button.cxx	2 Feb 2005 20:45:54 -0000	1.35.2.1
@@ -2462,7 +2462,7 @@
 
     Size aImageSize;
     if ( !maImage )
-        aImageSize = GetRadioImage( GetSettings(), 0 ).GetSizePixel();
+        aImageSize = ImplGetRadioImageSize();
     else
         aImageSize  = maImage.GetSizePixel();
     aImageSize.Width()  = CalcZoom( aImageSize.Width() );
@@ -3026,6 +3026,32 @@
 
 // -----------------------------------------------------------------------
 
+Size RadioButton::ImplGetRadioImageSize() const
+{
+    Size aSize;
+    // why are IsNativeControlSupported and GetNativeControlRegion not const ?
+    RadioButton* pThis = const_cast<RadioButton*>(this);
+    if( pThis->IsNativeControlSupported( CTRL_RADIOBUTTON, PART_ENTIRE_CONTROL ) )
+    {
+        ImplControlValue aControlValue;
+        Region			 aCtrlRegion = Region( Rectangle( Point( 0, 0 ), GetSizePixel() ) );
+        ControlState	 nState = CTRL_STATE_DEFAULT|CTRL_STATE_ENABLED;
+        Region aBoundingRgn, aContentRgn;
+        
+        // get native size of a radio button
+        if( pThis->GetNativeControlRegion( CTRL_RADIOBUTTON, PART_ENTIRE_CONTROL, aCtrlRegion,
+                                           nState, aControlValue, rtl::OUString(),
+                                           aBoundingRgn, aContentRgn ) )
+        {
+            Rectangle aCont(aContentRgn.GetBoundRect());
+            aSize = aCont.GetSize();
+        }
+    }
+    else
+        aSize = GetRadioImage( GetSettings(), 0 ).GetSizePixel();
+    return aSize;
+}
+
 Image RadioButton::GetRadioImage( const AllSettings& rSettings, USHORT nFlags )
 {
     ImplSVData*             pSVData = ImplGetSVData();
@@ -3102,7 +3128,7 @@
 {
     Size aSize;
     if ( !maImage )
-        aSize = GetRadioImage( GetSettings(), 0 ).GetSizePixel();
+        aSize = ImplGetRadioImageSize();
     else
         aSize = maImage.GetSizePixel();
 
@@ -3344,7 +3370,7 @@
 
 void CheckBox::ImplDrawCheckBox( bool bLayout )
 {
-    Size aImageSize = GetCheckImage( GetSettings(), 0 ).GetSizePixel();
+    Size aImageSize = ImplGetCheckImageSize();
     aImageSize.Width()  = CalcZoom( aImageSize.Width() );
     aImageSize.Height() = CalcZoom( aImageSize.Height() );
 
@@ -3816,6 +3842,32 @@
 
 // -----------------------------------------------------------------------
 
+Size CheckBox::ImplGetCheckImageSize() const
+{
+    Size aSize;
+    // why are IsNativeControlSupported and GetNativeControlRegion not const ?
+    CheckBox* pThis = const_cast<CheckBox*>(this);
+    if( pThis->IsNativeControlSupported( CTRL_CHECKBOX, PART_ENTIRE_CONTROL ) )
+    {
+        ImplControlValue aControlValue;
+        Region			 aCtrlRegion = Region( Rectangle( Point( 0, 0 ), GetSizePixel() ) );
+        ControlState	 nState = CTRL_STATE_DEFAULT|CTRL_STATE_ENABLED;
+        Region aBoundingRgn, aContentRgn;
+        
+        // get native size of a check box
+        if( pThis->GetNativeControlRegion( CTRL_CHECKBOX, PART_ENTIRE_CONTROL, aCtrlRegion,
+                                           nState, aControlValue, rtl::OUString(),
+                                           aBoundingRgn, aContentRgn ) )
+        {
+            Rectangle aCont(aContentRgn.GetBoundRect());
+            aSize = aCont.GetSize();
+        }
+    }
+    else
+        aSize = GetCheckImage( GetSettings(), 0 ).GetSizePixel();
+    return aSize;
+}
+
 Image CheckBox::GetCheckImage( const AllSettings& rSettings, USHORT nFlags )
 {
     ImplSVData*             pSVData = ImplGetSVData();
@@ -3896,7 +3948,7 @@
 
 Size CheckBox::CalcMinimumSize( long nMaxWidth ) const
 {
-    Size aSize = GetCheckImage( GetSettings(), 0 ).GetSizePixel();
+    Size aSize = ImplGetCheckImageSize();
     nMaxWidth -= aSize.Width();
 
     XubString aText = GetText();
--- vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx	31 Jan 2005 09:20:23 -0000	1.10
+++ vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx	2 Feb 2005 20:45:55 -0000	1.10.2.1
@@ -897,6 +897,24 @@
             rNativeContentRegion = rNativeBoundingRegion;
             returnVal = TRUE;
         }
+        if( (nType == CTRL_RADIOBUTTON || nType == CTRL_CHECKBOX) )
+        {
+            NWEnsureGTKRadio();
+            NWEnsureGTKCheck();
+            GtkWidget* widget = (nType == CTRL_RADIOBUTTON) ? gRadioWidget : gCheckWidget;
+            gint indicator_size, indicator_spacing;
+            gtk_widget_style_get( widget,
+                                  "indicator_size", &indicator_size,
+                                  "indicator_spacing", &indicator_spacing,
+                                  NULL);
+            indicator_size += 2*indicator_spacing; // guess overpaint of theme
+            rNativeBoundingRegion = rControlRegion;
+            Rectangle aIndicatorRect( Point( 0,
+                                             (rControlRegion.GetBoundRect().GetHeight()-indicator_size)/2),
+                                      Size( indicator_size, indicator_size ) );
+            rNativeContentRegion = Region( aIndicatorRect );
+            returnVal = TRUE;
+        }
         
         pWidgetMutex->release();
 	}
@@ -1102,28 +1120,21 @@
                                       const ImplControlValue& aValue, SalControlHandle& rControlHandle, 
                                       OUString aCaption )
 {
-#define	RADIO_BUTTON_MINIMUMSIZE   14 // found by experiment, TODO: should be checked at runtime if possible 
-
 	GtkStateType	stateType;
 	GtkShadowType	shadowType;
 	BOOL			isChecked = (aValue.getTristateVal()==BUTTONVALUE_ON);
-    gint            x, y, w, h;
+    gint            x, y;
     GdkRectangle	clipRect;
    
 	NWEnsureGTKButton();
 	NWEnsureGTKRadio();
 	NWConvertVCLStateToGTKState( nState, &stateType, &shadowType );
 
+    gint indicator_size;
+    gtk_widget_style_get( gRadioWidget, "indicator_size", &indicator_size, NULL);
+
     x = rControlRectangle.Left();
     y = rControlRectangle.Top();
-    w = rControlRectangle.GetWidth();
-    h = rControlRectangle.GetHeight();
-    
-    // assure minimum button size required by gtk+ to avoid clipping
-    if( w < RADIO_BUTTON_MINIMUMSIZE )
-        w = RADIO_BUTTON_MINIMUMSIZE;
-    if( h < RADIO_BUTTON_MINIMUMSIZE )
-        h = RADIO_BUTTON_MINIMUMSIZE;
 
 	// Set the shadow based on if checked or not so we get a freakin checkmark.
 	shadowType = isChecked ? GTK_SHADOW_IN : GTK_SHADOW_OUT;
@@ -1146,7 +1157,7 @@
         // magic x+1: place for adornment, else radio button gets clipped
         gtk_paint_option( gRadioWidget->style, gdkDrawable, stateType, shadowType, 
                           &clipRect, gRadioWidget, "radiobutton",
-                          x+1, y, w, h );
+                          x+1, y+1, indicator_size, indicator_size );
     }
     
 	return( TRUE );
@@ -1162,28 +1173,21 @@
                                       const ImplControlValue& aValue,
                                       SalControlHandle& rControlHandle, OUString aCaption )
 {
-#define	CHECKBOX_MINIMUMSIZE   14 // found by experiment, TODO: should be checked at runtime if possible 
-    
 	GtkStateType	stateType;
 	GtkShadowType	shadowType;
 	BOOL			isChecked = (aValue.getTristateVal()==BUTTONVALUE_ON) ? TRUE : FALSE;
     GdkRectangle	clipRect;
-    gint			x,y,w,h;
+    gint			x,y;
 
 	NWEnsureGTKButton();
 	NWEnsureGTKCheck();
 	NWConvertVCLStateToGTKState( nState, &stateType, &shadowType );
 
+    gint indicator_size;
+    gtk_widget_style_get( gCheckWidget, "indicator_size", &indicator_size, NULL);
+
     x = rControlRectangle.Left();
     y = rControlRectangle.Top();
-    w = rControlRectangle.GetWidth();
-    h = rControlRectangle.GetHeight();
-    
-    // assure minimum button size required by gtk+ to avoid clipping
-    if( w < CHECKBOX_MINIMUMSIZE )
-        w = CHECKBOX_MINIMUMSIZE;
-    if( h < CHECKBOX_MINIMUMSIZE )
-        h = CHECKBOX_MINIMUMSIZE;
     
 	// Set the shadow based on if checked or not so we get a checkmark.
 	shadowType = isChecked ? GTK_SHADOW_IN : GTK_SHADOW_OUT;
@@ -1200,7 +1204,7 @@
         // magic x+1: place for adornment, else checkbox gets clipped
         gtk_paint_check( gCheckWidget->style, gdkDrawable, stateType, shadowType, 
                          &clipRect, gCheckWidget, "checkbutton",
-                         x+1, y, w, h );
+                         x+1, y+1, indicator_size, indicator_size );
     }
 
 	return( TRUE );
