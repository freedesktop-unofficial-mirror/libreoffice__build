diff -urN connectivity/source/drivers/kab/exports.dxp connectivity/source/drivers/kab/exports.dxp
--- connectivity/source/drivers/kab/exports.dxp	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/exports.dxp	2005-06-29 08:33:10.000000000 +0000
@@ -0,0 +1,3 @@
+component_getImplementationEnvironment
+component_writeInfo
+component_getFactory
diff -urN connectivity/source/drivers/kab/kab.map connectivity/source/drivers/kab/kab.map
--- connectivity/source/drivers/kab/kab.map	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/kab.map	2005-06-29 08:33:10.000000000 +0000
@@ -0,0 +1,8 @@
+KAB_1_0 {
+	global:
+		component_getImplementationEnvironment;
+		component_writeInfo;
+		component_getFactory;
+	local:
+		*;
+};
diff -urN connectivity/source/drivers/kab/kab.xml connectivity/source/drivers/kab/kab.xml
--- connectivity/source/drivers/kab/kab.xml	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/kab.xml	2005-07-31 12:32:14.000000000 +0000
@@ -0,0 +1,79 @@
+<?xml version='1.0' encoding="UTF-8"?>
+<!DOCTYPE COMPONENTDESCRIPTION PUBLIC "-//W3C//DTD HTML 3.2//EN" "module-description.dtd">
+<module-description xmlns:xlink="http://www.w3.org/1999/xlink">
+	<module-name>	kab1	</module-name>
+	<component-description>
+		<Author>Eric Bischoff</Author>
+		<Name>com.sun.star.comp.sdbc.kab.Driver</Name>
+		<description>This library implements the database driver for KDE address book formats.</description>
+		<loader-name>com.sun.star.loader.SharedLibrary</loader-name>
+		<language>c++</language>
+		<status value="final"/>
+		<supported-service>com.sun.star.sdbc.Driver</supported-service>
+		<service-dependency>	...	</service-dependency>
+	</component-description>	  
+	<project-build-dependency>	cppuhelper	</project-build-dependency>
+	<project-build-dependency>	cppu		</project-build-dependency>
+	<project-build-dependency>	sal			</project-build-dependency>
+	<project-build-dependency>	vos			</project-build-dependency>
+
+	<runtime-module-dependency>	cppuhelper	</runtime-module-dependency>
+	<runtime-module-dependency>	cppu1		</runtime-module-dependency>
+	<runtime-module-dependency>	sal1		</runtime-module-dependency>
+	<runtime-module-dependency>	vos			</runtime-module-dependency>
+
+	<type>	com.sun.star.registry.XRegistryKey			</type>
+	<type>	com.sun.star.util.XCancellable				</type>
+	<type>	com.sun.star.util.XNumberFormatter			</type>
+	<type>	com.sun.star.uno.TypeClass					</type>
+	<type>	com.sun.star.uno.XWeak						</type>
+	<type>	com.sun.star.uno.XAggregation				</type>
+	<type>	com.sun.star.uno.XComponentContext			</type>
+	<type>	com.sun.star.beans.PropertyAttribute		</type>
+	<type>	com.sun.star.beans.XPropertyState			</type>
+	<type>	com.sun.star.beans.XPropertySet				</type>
+	<type>	com.sun.star.beans.PropertyValue			</type>
+	<type>	com.sun.star.beans.XMultiPropertySet		</type>
+	<type>	com.sun.star.beans.XFastPropertySet			</type>
+	<type>	com.sun.star.lang.XSingleServiceFactory		</type>
+	<type>	com.sun.star.lang.XTypeProvider				</type>
+	<type>	com.sun.star.lang.XSingleComponentFactory	</type>
+	<type>	com.sun.star.lang.EventObject				</type>
+	<type>	com.sun.star.lang.XComponent				</type>
+	<type>	com.sun.star.lang.IllegalArgumentException	</type>
+	<type>	com.sun.star.lang.DisposedException			</type>
+	<type>	com.sun.star.lang.XMultiServiceFactory		</type>
+	<type>	com.sun.star.lang.XServiceInfo				</type>
+	<type>	com.sun.star.lang.XUnoTunnel				</type>
+	<type>	com.sun.star.java.XJavaThreadRegister_11	</type>
+	<type>	com.sun.star.java.XJavaVM					</type>	
+	<type>	com.sun.star.sdbc.FetchDirection			</type>
+	<type>	com.sun.star.sdbc.XConnection				</type>
+	<type>	com.sun.star.sdbc.XStatement				</type>
+	<type>	com.sun.star.sdbc.XResultSet				</type>
+	<type>	com.sun.star.sdbc.XResultSetMetaDataSupplier</type>
+	<type>	com.sun.star.sdbc.XColumnLocate				</type>
+	<type>	com.sun.star.sdbc.XResultSetUpdate			</type>
+	<type>	com.sun.star.sdbc.XWarningsSupplier			</type>
+	<type>	com.sun.star.sdbc.XRowUpdate				</type>
+	<type>	com.sun.star.sdbc.XMultipleResults			</type>
+	<type>	com.sun.star.sdbc.XBatchExecution			</type>
+	<type>	com.sun.star.sdbc.XPreparedBatchExecution	</type>
+	<type>	com.sun.star.sdbc.XParameters				</type>
+	<type>	com.sun.star.sdbc.XOutParameters			</type>
+	<type>	com.sun.star.sdbc.DriverPropertyInfo		</type>
+	<type>	com.sun.star.sdbc.SQLWarning				</type>
+	<type>	com.sun.star.sdbc.XRow						</type>
+	<type>	com.sun.star.sdbc.ColumnSearch				</type>
+	<type>	com.sun.star.sdbc.ColumnValue				</type>
+	<type>	com.sun.star.sdbc.DataType					</type>
+	<type>	com.sun.star.sdbc.XDriver					</type>
+	<type>	com.sun.star.sdbc.TransactionIsolation		</type>
+	<type>	com.sun.star.sdbc.ResultSetType				</type>
+	<type>	com.sun.star.sdbc.ResultSetConcurrency		</type>
+	<type>	com.sun.star.sdbcx.XRowLocate				</type>
+	<type>	com.sun.star.sdbcx.XDeleteRows				</type>
+	<type>	com.sun.star.sdbcx.CompareBookmark			</type>
+	<type>	com.sun.star.sdb.XColumnUpdate				</type>
+	<type>	com.sun.star.sdb.XColumn					</type>
+</module-description>
diff -urN connectivity/source/drivers/kab/KCatalog.cxx connectivity/source/drivers/kab/KCatalog.cxx
--- connectivity/source/drivers/kab/KCatalog.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KCatalog.cxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,159 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KCatalog.hxx"
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_TABLES_HXX_
+#include "KTables.hxx"
+#endif
+
+using namespace connectivity::kab;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::beans;
+using namespace ::com::sun::star::sdbcx;
+using namespace ::com::sun::star::sdbc;
+using namespace ::com::sun::star::container;
+using namespace ::com::sun::star::lang;
+using namespace ::cppu;
+
+// -------------------------------------------------------------------------
+KabCatalog::KabCatalog(KabConnection* _pCon)
+		: connectivity::sdbcx::OCatalog(_pCon),
+		  m_pConnection(_pCon),
+		  m_xMetaData(m_pConnection->getMetaData())
+{
+}
+// -------------------------------------------------------------------------
+void KabCatalog::refreshTables()
+{
+	TStringVector aVector;
+	Sequence< ::rtl::OUString > aTypes(1);
+	aTypes[0] = ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("%"));
+	Reference< XResultSet > xResult = m_xMetaData->getTables(
+		Any(),
+		::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("%")),
+		::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("%")),
+		aTypes);
+
+	if (xResult.is())
+	{
+		Reference< XRow > xRow(xResult,UNO_QUERY);
+		::rtl::OUString aName;
+		const ::rtl::OUString& sDot = KabCatalog::getDot();
+		
+		while (xResult->next())
+		{
+			// aName = xRow->getString(2);
+			// aName += sDot;
+			aName = xRow->getString(3);
+			aVector.push_back(aName);
+		}
+	}
+	if (m_pTables)
+		m_pTables->reFill(aVector);
+	else
+		m_pTables = new KabTables(m_xMetaData,*this,m_aMutex,aVector);
+}
+// -------------------------------------------------------------------------
+void KabCatalog::refreshViews()
+{
+}
+// -------------------------------------------------------------------------
+void KabCatalog::refreshGroups()
+{
+}
+// -------------------------------------------------------------------------
+void KabCatalog::refreshUsers()
+{
+}
+// -------------------------------------------------------------------------
+const ::rtl::OUString& KabCatalog::getDot()
+{
+	static const ::rtl::OUString sDot = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("."));
+	return sDot;
+}
+// -----------------------------------------------------------------------------
+
+// XTablesSupplier
+Reference< XNameAccess > SAL_CALL KabCatalog::getTables(  ) throw(RuntimeException)
+{
+	::osl::MutexGuard aGuard(m_aMutex);
+	checkDisposed(rBHelper.bDisposed);
+		
+	try
+	{
+		if (!m_pTables)
+			refreshTables();
+	}
+	catch( const RuntimeException& )
+	{
+		// allowed to leave this method
+		throw;
+	}
+	catch( const Exception& )
+	{
+		// allowed
+	}
+
+	return const_cast<KabCatalog*>(this)->m_pTables;
+}
diff -urN connectivity/source/drivers/kab/KCatalog.hxx connectivity/source/drivers/kab/KCatalog.hxx
--- connectivity/source/drivers/kab/KCatalog.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KCatalog.hxx	2005-07-28 11:59:44.000000000 +0000
@@ -0,0 +1,99 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_CATALOG_HXX_
+#define _CONNECTIVITY_KAB_CATALOG_HXX_
+
+#ifndef _CONNECTIVITY_SDBCX_CATALOG_HXX_
+#include "connectivity/sdbcx/VCatalog.hxx"
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+        class KabConnection;
+		class KabCatalog : public connectivity::sdbcx::OCatalog
+		{
+			KabConnection* m_pConnection;		// used to get the metadata
+            ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XDatabaseMetaData > m_xMetaData; // just to make things easier
+
+		public:
+			// implementation of the pure virtual methods
+			virtual void refreshTables();
+			virtual void refreshViews()	;
+			virtual void refreshGroups();
+			virtual void refreshUsers()	;
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess > SAL_CALL getTables(
+					) throw(::com::sun::star::uno::RuntimeException);
+
+		public:
+			KabCatalog(KabConnection* _pCon);
+
+			KabConnection*		    getConnection()		const { return m_pConnection; }
+			sdbcx::OCollection*		getPrivateTables()	const { return m_pTables;}
+			sdbcx::OCollection*		getPrivateViews()	const { return m_pViews; }
+
+			static const ::rtl::OUString& getDot();
+		};
+	}
+}
+#endif // _CONNECTIVITY_KAB_CATALOG_HXX_
diff -urN connectivity/source/drivers/kab/KColumns.cxx connectivity/source/drivers/kab/KColumns.cxx
--- connectivity/source/drivers/kab/KColumns.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KColumns.cxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,129 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KColumns.hxx"
+#ifndef _CONNECTIVITY_KAB_TABLE_HXX_
+#include "KTable.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_TABLES_HXX_
+#include "KTables.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_CATALOG_HXX_
+#include "KCatalog.hxx"
+#endif
+
+#ifndef _CONNECTIVITY_SDBCX_COLUMN_HXX_
+#include "connectivity/sdbcx/VColumn.hxx"
+#endif
+
+using namespace connectivity::kab;
+using namespace connectivity::sdbcx;
+using namespace connectivity;
+using namespace ::comphelper;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::beans;
+using namespace ::com::sun::star::sdbc;
+using namespace ::com::sun::star::container;
+using namespace ::com::sun::star::lang;
+
+// -------------------------------------------------------------------------
+sdbcx::ObjectType KabColumns::createObject(const ::rtl::OUString& _rName)
+{
+	Reference< XResultSet > xResult = m_pTable->getConnection()->getMetaData()->getColumns(
+		Any(),
+		m_pTable->getSchema(),
+		m_pTable->getTableName(),
+		_rName);
+
+	sdbcx::ObjectType xRet = NULL;
+	if (xResult.is())
+	{
+		Reference< XRow > xRow(xResult,UNO_QUERY);
+
+		while (xResult->next())
+		{
+			if (xRow->getString(4) == _rName)
+			{
+				OColumn* pRet = new OColumn(
+						_rName,
+						xRow->getString(6),
+						xRow->getString(13),
+						xRow->getInt(11),
+						xRow->getInt(7),
+						xRow->getInt(9),
+						xRow->getInt(5),
+						sal_False,
+						sal_False,
+						sal_False,
+						sal_True);
+				xRet = pRet;
+				break;
+			}
+		}
+	}
+
+	return xRet;
+}
+// -------------------------------------------------------------------------
+void KabColumns::impl_refresh() throw(RuntimeException)
+{
+	m_pTable->refreshColumns();
+}
diff -urN connectivity/source/drivers/kab/KColumns.hxx connectivity/source/drivers/kab/KColumns.hxx
--- connectivity/source/drivers/kab/KColumns.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KColumns.hxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,96 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_COLUMNS_HXX_
+#define _CONNECTIVITY_KAB_COLUMNS_HXX_
+
+#ifndef _CONNECTIVITY_KAB_TABLE_HXX_
+#include "KTable.hxx"
+#endif
+
+#ifndef _CONNECTIVITY_SDBCX_COLLECTION_HXX_
+#include "connectivity/sdbcx/VCollection.hxx"
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+		class KabColumns : public sdbcx::OCollection
+		{
+		protected:
+			KabTable*	m_pTable;
+
+			virtual sdbcx::ObjectType createObject(const ::rtl::OUString& _rName);
+			virtual void impl_refresh() throw(::com::sun::star::uno::RuntimeException);
+
+		public:
+			KabColumns(	KabTable* _pTable,
+						::osl::Mutex& _rMutex,
+						const TStringVector &_rVector
+						) : sdbcx::OCollection(*_pTable,sal_True,_rMutex,_rVector),
+							m_pTable(_pTable)
+			{ }
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_COLUMNS_HXX_
diff -urN connectivity/source/drivers/kab/KConnection.cxx connectivity/source/drivers/kab/KConnection.cxx
--- connectivity/source/drivers/kab/KConnection.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KConnection.cxx	2005-08-18 11:15:40.000000000 +0000
@@ -0,0 +1,413 @@
+/*************************************************************************
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KConnection.hxx"
+#ifndef _CONNECTIVITY_KAB_DATABASEMETADATA_HXX_
+#include "KDatabaseMetaData.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_STATEMENT_HXX_
+#include "KStatement.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_PREPAREDSTATEMENT_HXX_
+#include "KPreparedStatement.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_DRIVER_HXX_
+#include "KDriver.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_CATALOG_HXX_
+#include "KCatalog.hxx"
+#endif
+
+#ifndef _COM_SUN_STAR_SDBC_COLUMNVALUE_HPP_
+#include <com/sun/star/sdbc/ColumnValue.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_TRANSACTIONISOLATION_HPP_
+#include <com/sun/star/sdbc/TransactionIsolation.hpp>
+#endif
+
+using namespace connectivity::kab;
+
+//------------------------------------------------------------------------------
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::beans;
+using namespace com::sun::star::sdbc;
+using namespace com::sun::star::sdbcx;
+// --------------------------------------------------------------------------------
+KabConnection::KabConnection(KabDriver*	_pDriver) 
+		 : OSubComponent<KabConnection, KabConnection_BASE>((::cppu::OWeakObject*)_pDriver, this),
+		 OMetaConnection_BASE(m_aMutex),
+		 m_pAddressBook(NULL),
+		 m_pDriver(_pDriver),
+		 m_bClosed(sal_False),
+		 m_xMetaData(NULL),
+		 m_bUseCatalog(sal_False),
+		 m_bUseOldDateFormat(sal_False)
+{
+	m_pDriver->acquire();
+}
+//-----------------------------------------------------------------------------
+KabConnection::~KabConnection()
+{
+	if (!isClosed())
+		close();
+
+	m_pDriver->release();
+	m_pDriver = NULL;
+}
+//-----------------------------------------------------------------------------
+void SAL_CALL KabConnection::release() throw()
+{
+	relase_ChildImpl();
+}
+// -----------------------------------------------------------------------------
+void KabConnection::construct(const ::rtl::OUString& url, const Sequence< PropertyValue >& info) throw(SQLException)
+{
+	osl_incrementInterlockedCount( &m_refCount );
+
+	// create a KDE address book object
+	m_pAddressBook = KABC::StdAddressBook::self();
+	m_pAddressBook->setAutomaticSave(false);
+// perharps we should analyze the URL to know whether the addressbook is local, over LDAP, etc...
+// perharps we should get some user and password information from "info" properties
+
+	osl_decrementInterlockedCount( &m_refCount );
+}
+// XServiceInfo
+// --------------------------------------------------------------------------------
+IMPLEMENT_SERVICE_INFO(KabConnection, "com.sun.star.sdbc.drivers.kab.KabConnection", "com.sun.star.sdbc.Connection")
+
+// --------------------------------------------------------------------------------
+Reference< XStatement > SAL_CALL KabConnection::createStatement(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+	// create a statement
+	// the statement can only be executed once
+	Reference< XStatement > xReturn = new KabStatement(this);
+	m_aStatements.push_back(WeakReferenceHelper(xReturn));
+	return xReturn;
+}
+// --------------------------------------------------------------------------------
+Reference< XPreparedStatement > SAL_CALL KabConnection::prepareStatement( const ::rtl::OUString& _sSql ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+	// the pre
+	if (m_aTypeInfo.empty())
+		buildTypeInfo();
+
+	// create a statement
+	// the statement can only be executed more than once
+	Reference< XPreparedStatement > xReturn = new KabPreparedStatement(this, m_aTypeInfo, _sSql);
+	m_aStatements.push_back(WeakReferenceHelper(xReturn));
+	return xReturn;
+}
+// --------------------------------------------------------------------------------
+Reference< XPreparedStatement > SAL_CALL KabConnection::prepareCall( const ::rtl::OUString& _sSql ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+	// not implemented yet :-) a task to do 
+	return NULL;
+}
+// --------------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabConnection::nativeSQL( const ::rtl::OUString& _sSql ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	// when you need to transform SQL92 to you driver specific you can do it here
+	
+	return _sSql;
+}
+// --------------------------------------------------------------------------------
+void SAL_CALL KabConnection::setAutoCommit( sal_Bool autoCommit ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+	// here you  have to set your commit mode please have a look at the jdbc documentation to get a clear explanation
+}
+// --------------------------------------------------------------------------------
+sal_Bool SAL_CALL KabConnection::getAutoCommit(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+	// you have to distinguish which if you are in autocommit mode or not
+	// at normal case true should be fine here
+
+	return sal_True;
+}
+// --------------------------------------------------------------------------------
+void SAL_CALL KabConnection::commit(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+
+	// when you database does support transactions you should commit here
+}
+// --------------------------------------------------------------------------------
+void SAL_CALL KabConnection::rollback(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+
+	// same as commit but for the other case
+}
+// --------------------------------------------------------------------------------
+sal_Bool SAL_CALL KabConnection::isClosed(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	
+	// just simple -> we are close when we are disposed taht means someone called dispose(); (XComponent)
+	return KabConnection_BASE::rBHelper.bDisposed;
+}
+// --------------------------------------------------------------------------------
+Reference< XDatabaseMetaData > SAL_CALL KabConnection::getMetaData(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+	// here we have to create the class with biggest interface
+	// The answer is 42 :-)
+	Reference< XDatabaseMetaData > xMetaData = m_xMetaData;
+	if (!xMetaData.is())
+	{
+		xMetaData = new KabDatabaseMetaData(this); // need the connection because it can return it
+		m_xMetaData = xMetaData;
+	}
+
+	return xMetaData;
+}
+// --------------------------------------------------------------------------------
+void SAL_CALL KabConnection::setReadOnly( sal_Bool readOnly ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+	// set you connection to readonly
+}
+// --------------------------------------------------------------------------------
+sal_Bool SAL_CALL KabConnection::isReadOnly(  ) throw(SQLException, RuntimeException)
+{	
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+	// return if your connection to readonly
+	return sal_False;
+}
+// --------------------------------------------------------------------------------
+void SAL_CALL KabConnection::setCatalog( const ::rtl::OUString& catalog ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+
+	// if your database doesn't work with catalogs you go to next method otherwise you kjnow what to do
+}
+// --------------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabConnection::getCatalog(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+
+	// return your current catalog
+	return ::rtl::OUString();
+}
+// --------------------------------------------------------------------------------
+void SAL_CALL KabConnection::setTransactionIsolation( sal_Int32 level ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+
+	// set your isolation level
+	// please have a look at @see com.sun.star.sdbc.TransactionIsolation
+}
+// --------------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabConnection::getTransactionIsolation(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+
+	// please have a look at @see com.sun.star.sdbc.TransactionIsolation
+	return TransactionIsolation::NONE;
+}
+// --------------------------------------------------------------------------------
+Reference< ::com::sun::star::container::XNameAccess > SAL_CALL KabConnection::getTypeMap(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+		
+	// if your driver has special database types you can return it here
+
+	return NULL;
+}
+// --------------------------------------------------------------------------------
+void SAL_CALL KabConnection::setTypeMap( const Reference< ::com::sun::star::container::XNameAccess >& typeMap ) throw(SQLException, RuntimeException)
+{
+	// the other way around
+}
+// --------------------------------------------------------------------------------
+// XCloseable
+void SAL_CALL KabConnection::close(  ) throw(SQLException, RuntimeException)
+{
+	{
+		::osl::MutexGuard aGuard( m_aMutex );
+		checkDisposed(KabConnection_BASE::rBHelper.bDisposed);
+
+		if (m_pAddressBook != NULL)
+		{
+			m_pAddressBook->close();
+			m_pAddressBook = NULL;
+		}
+
+	}
+	dispose();
+}
+// --------------------------------------------------------------------------------
+// XWarningsSupplier
+Any SAL_CALL KabConnection::getWarnings(  ) throw(SQLException, RuntimeException)
+{
+	// when you collected some warnings -> return it
+	return Any();
+}
+// --------------------------------------------------------------------------------
+void SAL_CALL KabConnection::clearWarnings(  ) throw(SQLException, RuntimeException)
+{
+	// you should clear your collected warnings here
+}
+//--------------------------------------------------------------------
+void KabConnection::buildTypeInfo() throw(SQLException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+
+	Reference< XResultSet> xRs = getMetaData()->getTypeInfo();
+	Reference< XRow> xRow(xRs, UNO_QUERY);
+	// Information for a single SQL type
+
+	// Loop on the result set until we reach end of file
+
+	while (xRs->next()) 
+	{
+		OTypeInfo aInfo;
+		aInfo.aTypeName			= xRow->getString	(1);
+		aInfo.nType				= xRow->getShort	(2);
+		aInfo.nPrecision		= xRow->getInt		(3);
+		aInfo.aLiteralPrefix	= xRow->getString	(4);
+		aInfo.aLiteralSuffix	= xRow->getString	(5);
+		aInfo.aCreateParams		= xRow->getString	(6);
+		aInfo.bNullable			= xRow->getBoolean	(7) == ColumnValue::NULLABLE;
+		aInfo.bCaseSensitive	= xRow->getBoolean	(8);
+		aInfo.nSearchType		= xRow->getShort	(9);
+		aInfo.bUnsigned			= xRow->getBoolean	(10);
+		aInfo.bCurrency			= xRow->getBoolean	(11);
+		aInfo.bAutoIncrement	= xRow->getBoolean	(12);
+		aInfo.aLocalTypeName	= xRow->getString	(13);
+		aInfo.nMinimumScale		= xRow->getShort	(14);
+		aInfo.nMaximumScale		= xRow->getShort	(15);
+		aInfo.nNumPrecRadix		= (sal_Int16) xRow->getInt(18);
+
+		// Now that we have the type info, save it
+		// in the Hashtable if we don't already have an
+		// entry for this SQL type.
+
+		m_aTypeInfo.push_back(aInfo);
+	}
+
+	// Close the result set/statement.
+
+	Reference< XCloseable> xClose(xRs, UNO_QUERY);
+	xClose->close();
+}
+//------------------------------------------------------------------------------
+void KabConnection::disposing()
+{
+	// we noticed that we should be destroied in near future so we have to dispose our statements
+	::osl::MutexGuard aGuard(m_aMutex);
+
+	for (OWeakRefArray::iterator i = m_aStatements.begin(); m_aStatements.end() != i; ++i)
+	{
+		Reference< XComponent > xComp(i->get(), UNO_QUERY);
+		if (xComp.is())
+			xComp->dispose();
+	}
+	m_aStatements.clear();
+
+	m_bClosed	= sal_True;
+	m_xMetaData = ::com::sun::star::uno::WeakReference< ::com::sun::star::sdbc::XDatabaseMetaData>();
+
+	dispose_ChildImpl();
+	KabConnection_BASE::disposing();
+}
+// -----------------------------------------------------------------------------
+Reference< XTablesSupplier > SAL_CALL KabConnection::createCatalog()
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+
+	Reference< XTablesSupplier > xTab = m_xCatalog;
+	if (!m_xCatalog.is())
+	{
+		KabCatalog *pCat = new KabCatalog(this);
+		xTab = pCat;
+		m_xCatalog = xTab;
+	}
+	return xTab;
+}
diff -urN connectivity/source/drivers/kab/KConnection.hxx connectivity/source/drivers/kab/KConnection.hxx
--- connectivity/source/drivers/kab/KConnection.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KConnection.hxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,209 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#define _CONNECTIVITY_KAB_CONNECTION_HXX_
+
+#include <map>
+#include <kabc/stdaddressbook.h>
+
+#ifndef _COM_SUN_STAR_SDBC_SQLWARNING_HPP_
+#include <com/sun/star/sdbc/SQLWarning.hpp>
+#endif
+#ifndef _CONNECTIVITY_OSUBCOMPONENT_HXX_
+#include "OSubComponent.hxx"
+#endif
+#ifndef _CONNECTIVITY_OTYPEINFO_HXX_
+#include "OTypeInfo.hxx"
+#endif
+#ifndef _CONNECTIVITY_COMMONTOOLS_HXX_
+#include "connectivity/CommonTools.hxx"
+#endif
+#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XWARNINGSSUPPLIER_HPP_
+#include <com/sun/star/sdbc/XWarningsSupplier.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XCONNECTION_HPP_
+#include <com/sun/star/sdbc/XConnection.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBCX_XTABLESSUPPLIER_HPP_
+#include <com/sun/star/sdbcx/XTablesSupplier.hpp>
+#endif
+#ifndef _COMPHELPER_BROADCASTHELPER_HXX_
+#include <comphelper/broadcasthelper.hxx>
+#endif
+#ifndef _CPPUHELPER_COMPBASE3_HXX_
+#include <cppuhelper/compbase3.hxx>
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+
+		typedef ::cppu::WeakComponentImplHelper3<   ::com::sun::star::sdbc::XConnection,
+												::com::sun::star::sdbc::XWarningsSupplier,
+                                                ::com::sun::star::lang::XServiceInfo
+											> OMetaConnection_BASE;
+
+		class KabStatement_Base;
+		class KabDriver;
+		class KabDatabaseMetaData;
+
+		typedef OMetaConnection_BASE				KabConnection_BASE; // implements basics and text encoding
+		typedef ::std::vector< ::connectivity::OTypeInfo>	TTypeInfoVector;
+		typedef std::vector< ::com::sun::star::uno::WeakReferenceHelper > OWeakRefArray;
+
+		class KabConnection : public comphelper::OBaseMutex,
+							public KabConnection_BASE,
+							public OSubComponent<KabConnection, KabConnection_BASE>
+		{
+			friend class OSubComponent<KabConnection, KabConnection_BASE>;
+
+		protected:
+			
+			rtl_TextEncoding						m_nTextEncoding; // the encoding which is used for all text conversions		
+			//====================================================================
+			// Data attributes
+			//====================================================================
+			TTypeInfoVector							m_aTypeInfo;	//	vector containing an entry
+																	//  for each row returned by
+																	//  DatabaseMetaData.getTypeInfo.
+            ::com::sun::star::uno::WeakReference< ::com::sun::star::sdbc::XDatabaseMetaData > m_xMetaData;
+
+			OWeakRefArray							m_aStatements;	//	vector containing a list
+																	//  of all the Statement objects
+																	//  for this Connection
+
+			::KABC::StdAddressBook*					m_pAddressBook;	//  the address book
+            ::com::sun::star::sdbc::SQLWarning      m_aLastWarning; //  last SQLWarning generated by an operation
+// Some of these variables seem to be unnecessary.
+// After programming, check which ones can be safely removed.
+			KabDriver*								m_pDriver;		//	pointer to the owning driver object
+            ::com::sun::star::uno::Reference< ::com::sun::star::sdbcx::XTablesSupplier>
+													m_xCatalog;		// needed for the SQL interpreter
+
+			sal_Bool								m_bClosed;
+			sal_Bool								m_bUseCatalog;	// should we use the catalog on filebased databases
+			sal_Bool								m_bUseOldDateFormat;
+
+
+			void buildTypeInfo() throw( ::com::sun::star::sdbc::SQLException);
+
+		public:
+			virtual void construct( const ::rtl::OUString& url,const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& info) throw(::com::sun::star::sdbc::SQLException);
+
+			KabConnection(KabDriver* _pDriver);
+			virtual ~KabConnection();
+
+			void closeAllStatements () throw( ::com::sun::star::sdbc::SQLException);
+
+			// OComponentHelper
+			virtual void SAL_CALL disposing(void);
+
+			// XInterface
+			virtual void SAL_CALL release() throw();
+
+			// XServiceInfo
+			DECLARE_SERVICE_INFO();
+
+			// XConnection
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XStatement > SAL_CALL createStatement(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XPreparedStatement > SAL_CALL prepareStatement( const ::rtl::OUString& sql ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XPreparedStatement > SAL_CALL prepareCall( const ::rtl::OUString& sql ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL nativeSQL( const ::rtl::OUString& sql ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual void SAL_CALL setAutoCommit( sal_Bool autoCommit ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL getAutoCommit(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual void SAL_CALL commit(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual void SAL_CALL rollback(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL isClosed(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XDatabaseMetaData > SAL_CALL getMetaData(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual void SAL_CALL setReadOnly( sal_Bool readOnly ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL isReadOnly(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual void SAL_CALL setCatalog( const ::rtl::OUString& catalog ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getCatalog(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual void SAL_CALL setTransactionIsolation( sal_Int32 level ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getTransactionIsolation(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess > SAL_CALL getTypeMap(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual void SAL_CALL setTypeMap( const ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess >& typeMap ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XCloseable
+			virtual void SAL_CALL close(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XWarningsSupplier
+			virtual ::com::sun::star::uno::Any SAL_CALL getWarnings(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL clearWarnings(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// needed for the SQL interpreter
+			::com::sun::star::uno::Reference< ::com::sun::star::sdbcx::XTablesSupplier > SAL_CALL createCatalog();
+
+			// should we use the catalog on filebased databases
+			inline sal_Bool				isCatalogUsed()		const { return m_bUseCatalog; }
+			inline KabDriver*			getDriver()			const { return m_pDriver;}
+			inline rtl_TextEncoding		getTextEncoding()	const { return m_nTextEncoding; }
+			inline ::KABC::AddressBook*	getAddressBook()	const { return m_pAddressBook; }
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_CONNECTION_HXX_
diff -urN connectivity/source/drivers/kab/KDatabaseMetaData.cxx connectivity/source/drivers/kab/KDatabaseMetaData.cxx
--- connectivity/source/drivers/kab/KDatabaseMetaData.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KDatabaseMetaData.cxx	2005-08-06 11:29:35.000000000 +0000
@@ -0,0 +1,1063 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KDatabaseMetaData.hxx"
+#include <kabc/field.h>
+
+#ifndef _CONNECTIVITY_FDATABASEMETADATARESULTSET_HXX_
+#include "FDatabaseMetaDataResultSet.hxx"
+#endif
+
+#ifndef _COM_SUN_STAR_SDBC_COLUMNVALUE_HPP_
+#include <com/sun/star/sdbc/ColumnValue.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_TRANSACTIONISOLATION_HPP_
+#include <com/sun/star/sdbc/TransactionIsolation.hpp>
+#endif
+
+using namespace connectivity::kab;
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::beans;
+using namespace com::sun::star::sdbc;
+
+KabDatabaseMetaData::KabDatabaseMetaData(KabConnection* _pCon) 
+		: m_pConnection(_pCon),
+		  m_bUseCatalog(sal_True)
+{
+	OSL_ENSURE(m_pConnection,"KabDatabaseMetaData::KabDatabaseMetaData: No connection set!");
+	if (!m_pConnection->isCatalogUsed())
+	{
+		osl_incrementInterlockedCount( &m_refCount );
+		m_bUseCatalog	= !(usesLocalFiles() || usesLocalFilePerTable());
+		osl_decrementInterlockedCount( &m_refCount );
+	}
+}
+// -------------------------------------------------------------------------
+KabDatabaseMetaData::~KabDatabaseMetaData()
+{
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getCatalogSeparator(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aVal;
+	if (m_bUseCatalog)
+	{ // do some special here for you database
+	}
+
+	return aVal;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxBinaryLiteralLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxRowSize(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxCatalogNameLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxCharLiteralLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxColumnNameLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxColumnsInIndex(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxCursorNameLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxConnections(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxColumnsInTable(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxStatementLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxTableNameLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxTablesInSelect(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::doesMaxRowSizeIncludeBlobs(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::storesLowerCaseQuotedIdentifiers(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::storesLowerCaseIdentifiers(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::storesMixedCaseQuotedIdentifiers(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::storesMixedCaseIdentifiers(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::storesUpperCaseQuotedIdentifiers(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::storesUpperCaseIdentifiers(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsAlterTableWithAddColumn(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsAlterTableWithDropColumn(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxIndexLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsNonNullableColumns(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getCatalogTerm(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aVal;
+	if (m_bUseCatalog)
+	{
+	}
+	return aVal;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getIdentifierQuoteString(  ) throw(SQLException, RuntimeException)
+{
+	// normally this is "
+	::rtl::OUString aVal = ::rtl::OUString::createFromAscii("\"");
+	return aVal;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getExtraNameCharacters(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aVal;
+	return aVal;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsDifferentTableCorrelationNames(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::isCatalogAtStart(  ) throw(SQLException, RuntimeException)
+{
+	sal_Bool bValue = sal_False;
+	if (m_bUseCatalog)
+	{
+	}
+	return bValue;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::dataDefinitionIgnoredInTransactions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::dataDefinitionCausesTransactionCommit(  ) throw(SQLException, RuntimeException)
+{
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsDataManipulationTransactionsOnly(  ) throw(SQLException, RuntimeException)
+{
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsDataDefinitionAndDataManipulationTransactions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsPositionedDelete(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsPositionedUpdate(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsOpenStatementsAcrossRollback(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsOpenStatementsAcrossCommit(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsOpenCursorsAcrossCommit(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsOpenCursorsAcrossRollback(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsTransactionIsolationLevel( sal_Int32 level ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSchemasInDataManipulation(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsANSI92FullSQL(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsANSI92EntryLevelSQL(  ) throw(SQLException, RuntimeException)
+{
+	return sal_True; // should be supported at least
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsIntegrityEnhancementFacility(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSchemasInIndexDefinitions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSchemasInTableDefinitions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsCatalogsInTableDefinitions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsCatalogsInIndexDefinitions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsCatalogsInDataManipulation(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsOuterJoins(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxStatements(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxProcedureNameLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxSchemaNameLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsTransactions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::allProceduresAreCallable(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsStoredProcedures(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSelectForUpdate(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::allTablesAreSelectable(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::isReadOnly(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::usesLocalFiles(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::usesLocalFilePerTable(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsTypeConversion(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::nullPlusNonNullIsNull(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsColumnAliasing(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsTableCorrelationNames(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsConvert( sal_Int32 fromType, sal_Int32 toType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsExpressionsInOrderBy(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsGroupBy(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsGroupByBeyondSelect(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsGroupByUnrelated(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsMultipleTransactions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsMultipleResultSets(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsLikeEscapeClause(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsOrderByUnrelated(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsUnion(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsUnionAll(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsMixedCaseIdentifiers(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsMixedCaseQuotedIdentifiers(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::nullsAreSortedAtEnd(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::nullsAreSortedAtStart(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::nullsAreSortedHigh(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::nullsAreSortedLow(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSchemasInProcedureCalls(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSchemasInPrivilegeDefinitions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsCatalogsInProcedureCalls(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsCatalogsInPrivilegeDefinitions(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsCorrelatedSubqueries(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSubqueriesInComparisons(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSubqueriesInExists(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSubqueriesInIns(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsSubqueriesInQuantifieds(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsANSI92IntermediateSQL(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getURL(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue = ::rtl::OUString::createFromAscii("sdbc:address:kab:");
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getUserName(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue;
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getDriverName(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue = ::rtl::OUString::createFromAscii("kab");
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getDriverVersion() throw(SQLException, RuntimeException)
+{
+	// version 0.1
+	::rtl::OUString aValue = ::rtl::OUString::createFromAscii("0.1");
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getDatabaseProductVersion(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue;
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getDatabaseProductName(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue;
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getProcedureTerm(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue;
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getSchemaTerm(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue;
+	return aValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getDriverMajorVersion(  ) throw(RuntimeException)
+{
+	return 1;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getDefaultTransactionIsolation(  ) throw(SQLException, RuntimeException)
+{
+	return TransactionIsolation::NONE;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getDriverMinorVersion(  ) throw(RuntimeException)
+{
+	return 0;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getSQLKeywords(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue;
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getSearchStringEscape(  ) throw(SQLException, RuntimeException)
+{
+	::rtl::OUString aValue;
+	return aValue;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getStringFunctions(  ) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getTimeDateFunctions(  ) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getSystemFunctions(  ) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDatabaseMetaData::getNumericFunctions(  ) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsExtendedSQLGrammar(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsCoreSQLGrammar(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsMinimumSQLGrammar(  ) throw(SQLException, RuntimeException)
+{
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsFullOuterJoins(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsLimitedOuterJoins(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxColumnsInGroupBy(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxColumnsInOrderBy(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxColumnsInSelect(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDatabaseMetaData::getMaxUserNameLength(  ) throw(SQLException, RuntimeException)
+{
+	sal_Int32 nValue = 0; // 0 means no limit
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsResultSetType( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsResultSetConcurrency( sal_Int32 setType, sal_Int32 concurrency ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::ownUpdatesAreVisible( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::ownDeletesAreVisible( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::ownInsertsAreVisible( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::othersUpdatesAreVisible( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::othersDeletesAreVisible( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::othersInsertsAreVisible( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::updatesAreDetected( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::deletesAreDetected( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::insertsAreDetected( sal_Int32 setType ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDatabaseMetaData::supportsBatchUpdates(  ) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+Reference< XConnection > SAL_CALL KabDatabaseMetaData::getConnection(  ) throw(SQLException, RuntimeException)
+{
+	return (Reference< XConnection >) m_pConnection;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getTableTypes(  ) throw(SQLException, RuntimeException)
+{
+	::connectivity::ODatabaseMetaDataResultSet* pResult = new ::connectivity::ODatabaseMetaDataResultSet();
+	Reference< XResultSet > xRef = pResult;
+
+	pResult->setTableTypes();
+
+	static ODatabaseMetaDataResultSet::ORows aRows;
+	static const ::rtl::OUString aTable(::rtl::OUString::createFromAscii("TABLE"));
+
+	if (aRows.empty())
+	{
+		ODatabaseMetaDataResultSet::ORow aRow(2);
+		aRow[0] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[1] = new ORowSetValueDecorator(aTable);
+		aRows.push_back(aRow);
+	}
+	pResult->setRows(aRows);
+	return xRef;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getTypeInfo(  ) throw(SQLException, RuntimeException)
+{
+	ODatabaseMetaDataResultSet* pResult = new ODatabaseMetaDataResultSet();
+	Reference< XResultSet > xRef = pResult;
+
+	pResult->setTypeInfoMap();
+
+	static ODatabaseMetaDataResultSet::ORows aRows;
+	if (aRows.empty())
+	{
+		ODatabaseMetaDataResultSet::ORow aRow(19);
+
+		aRow[0] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[1] = new ORowSetValueDecorator(::rtl::OUString::createFromAscii("CHAR"));
+		aRow[2] = new ORowSetValueDecorator(DataType::CHAR);
+		aRow[3] = new ORowSetValueDecorator((sal_Int32) 254);
+		aRow[4] = ODatabaseMetaDataResultSet::getQuoteValue();
+		aRow[5] = ODatabaseMetaDataResultSet::getQuoteValue();
+		aRow[6] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[7] = new ORowSetValueDecorator((sal_Int32) ColumnValue::NULLABLE);
+		aRow[8] = ODatabaseMetaDataResultSet::get1Value();
+		aRow[9] = new ORowSetValueDecorator((sal_Int32) ColumnSearch::CHAR);
+		aRow[10] = ODatabaseMetaDataResultSet::get1Value();
+		aRow[11] = ODatabaseMetaDataResultSet::get0Value();
+		aRow[12] = ODatabaseMetaDataResultSet::get0Value();
+		aRow[13] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[14] = ODatabaseMetaDataResultSet::get0Value();
+		aRow[15] = ODatabaseMetaDataResultSet::get0Value();
+		aRow[16] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[17] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[18] = new ORowSetValueDecorator((sal_Int32) 10);
+		aRows.push_back(aRow);
+// Much more types might appear in KDE address books
+// To be completed
+	}
+	pResult->setRows(aRows);
+	return xRef;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getCatalogs(  ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -----------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getSchemas(  ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getColumnPrivileges( 
+	const Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, 
+	const ::rtl::OUString& columnNamePattern ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getColumns( 
+	const Any& catalog,
+	const ::rtl::OUString& schemaPattern,
+	const ::rtl::OUString& tableNamePattern, 
+	const ::rtl::OUString& columnNamePattern) throw(SQLException, RuntimeException)
+{
+	::connectivity::ODatabaseMetaDataResultSet* pResult = new ::connectivity::ODatabaseMetaDataResultSet();
+	Reference< XResultSet > xRef = pResult;
+
+	pResult->setColumnsMap();
+
+	ODatabaseMetaDataResultSet::ORows aRows;
+	static const ::rtl::OUString aAddresses(::rtl::OUString::createFromAscii("addresses"));
+
+	if (match(tableNamePattern, aAddresses, '\0'))
+	{
+		ODatabaseMetaDataResultSet::ORow aRow(19);
+
+		aRow[0] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[1] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[2] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[3] = new ORowSetValueDecorator(aAddresses);
+		aRow[5] = new ORowSetValueDecorator(DataType::CHAR);
+		aRow[6] = new ORowSetValueDecorator(::rtl::OUString::createFromAscii("CHAR"));
+		aRow[7] = new ORowSetValueDecorator((sal_Int32) 256);
+// Might be VARCHAR and not CHAR[256]...
+		aRow[8] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[9] = ODatabaseMetaDataResultSet::get0Value();
+		aRow[10] = new ORowSetValueDecorator((sal_Int32) 10);
+		aRow[11] = ODatabaseMetaDataResultSet::get1Value();
+		aRow[12] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[13] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[14] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[15] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[16] = new ORowSetValueDecorator((sal_Int32) 254);
+		aRow[18] = new ORowSetValueDecorator(::rtl::OUString::createFromAscii("YES"));
+
+		::KABC::Field::List aFields = ::KABC::Field::allFields();
+		::KABC::Field::List::iterator aField;
+		sal_Int32 nPosition;
+
+		for (	aField = aFields.begin(), nPosition = 1;
+				aField != aFields.end();
+				++aField, ++nPosition)
+		{
+			QString aQtName((*aField)->label());
+			::rtl::OUString aName((const sal_Unicode *) aQtName.ucs2());
+			if (match(columnNamePattern, aName, '\0'))
+			{
+				aRow[4] = new ORowSetValueDecorator(aName);
+				aRow[17] = new ORowSetValueDecorator(nPosition);
+				aRows.push_back(aRow);
+			}
+		}
+	}
+	pResult->setRows(aRows);
+	return xRef;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getTables( 
+	const Any& catalog,
+	const ::rtl::OUString& schemaPattern,
+	const ::rtl::OUString& tableNamePattern,
+	const Sequence< ::rtl::OUString >& types) throw(SQLException, RuntimeException)
+{
+	ODatabaseMetaDataResultSet* pResult = new ODatabaseMetaDataResultSet();
+	Reference< XResultSet > xRef = pResult;
+
+	pResult->setTablesMap();
+
+	// check whether we have tables in the requested types
+	// for the moment, we answer only the "TABLE" table type
+	// when no types are given at all, we return all the tables
+	static const ::rtl::OUString aTable(::rtl::OUString::createFromAscii("TABLE"));
+	sal_Bool bTableFound = sal_False;
+	const ::rtl::OUString* p = types.getConstArray(),
+	                     * pEnd = p + types.getLength();
+
+	if (p == pEnd)
+	{
+		bTableFound = sal_True;
+	}
+	else while (p < pEnd)
+	{
+		if (match(*p, aTable, '\0'))
+		{
+			bTableFound = sal_True;
+			break;
+		}
+		p++;
+	}
+	if (!bTableFound)
+		return xRef;
+
+	static ODatabaseMetaDataResultSet::ORows aRows;
+	static const ::rtl::OUString aAddresses(::rtl::OUString::createFromAscii("addresses"));
+
+	if (aRows.empty())
+	{
+		ODatabaseMetaDataResultSet::ORow aRow(6);
+
+		aRow[0] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[1] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[2] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRow[3] = new ORowSetValueDecorator(aAddresses);
+		aRow[4] = new ORowSetValueDecorator(aTable);
+		aRow[5] = ODatabaseMetaDataResultSet::getEmptyValue();
+		aRows.push_back(aRow);
+	}
+	pResult->setRows(aRows);
+	return xRef;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getProcedureColumns( 
+	const Any& catalog, const ::rtl::OUString& schemaPattern, 
+	const ::rtl::OUString& procedureNamePattern, const ::rtl::OUString& columnNamePattern ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getProcedures( 
+	const Any& catalog, const ::rtl::OUString& schemaPattern, 
+	const ::rtl::OUString& procedureNamePattern ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getVersionColumns( 
+	const Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getExportedKeys( 
+	const Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getImportedKeys( 
+	const Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getPrimaryKeys( 
+	const Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getIndexInfo( 
+	const Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, 
+	sal_Bool unique, sal_Bool approximate ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getBestRowIdentifier( 
+	const Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, sal_Int32 scope, 
+	sal_Bool nullable ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getTablePrivileges( 
+	const Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& tableNamePattern ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getCrossReference( 
+	const Any& primaryCatalog, const ::rtl::OUString& primarySchema, 
+	const ::rtl::OUString& primaryTable, const Any& foreignCatalog, 
+	const ::rtl::OUString& foreignSchema, const ::rtl::OUString& foreignTable ) throw(SQLException, RuntimeException)
+{
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabDatabaseMetaData::getUDTs( const Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& typeNamePattern, const Sequence< sal_Int32 >& types ) throw(SQLException, RuntimeException)
+{
+	OSL_ENSURE(0,"Not implemented yet!");
+	throw SQLException();
+	return NULL;
+}
+// -----------------------------------------------------------------------------
diff -urN connectivity/source/drivers/kab/KDatabaseMetaData.hxx connectivity/source/drivers/kab/KDatabaseMetaData.hxx
--- connectivity/source/drivers/kab/KDatabaseMetaData.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KDatabaseMetaData.hxx	2005-07-28 11:59:44.000000000 +0000
@@ -0,0 +1,251 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_DATABASEMETADATA_HXX_
+#define _CONNECTIVITY_KAB_DATABASEMETADATA_HXX_
+
+#include "KConnection.hxx"
+
+#ifndef _COM_SUN_STAR_SDBC_XDATABASEMETADATA_HPP_
+#include <com/sun/star/sdbc/XDatabaseMetaData.hpp>
+#endif
+#ifndef _CPPUHELPER_IMPLBASE1_HXX_
+#include <cppuhelper/implbase1.hxx>
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+		//**************************************************************
+		//************ Class: KabDatabaseMetaData
+		//**************************************************************
+
+		typedef ::cppu::WeakImplHelper1< ::com::sun::star::sdbc::XDatabaseMetaData> KabDatabaseMetaData_BASE;
+
+        class KabDatabaseMetaData : public KabDatabaseMetaData_BASE
+		{
+			KabConnection*	m_pConnection;
+			sal_Bool		m_bUseCatalog;
+
+		public:
+
+			inline KabConnection* getOwnConnection() const { return m_pConnection; }
+
+			KabDatabaseMetaData(KabConnection* _pCon);
+			virtual ~KabDatabaseMetaData();
+
+			// this interface is really BIG
+			// XDatabaseMetaData
+            virtual sal_Bool SAL_CALL allProceduresAreCallable(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL allTablesAreSelectable(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getURL(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getUserName(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL isReadOnly(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL nullsAreSortedHigh(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL nullsAreSortedLow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL nullsAreSortedAtStart(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL nullsAreSortedAtEnd(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getDatabaseProductName(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getDatabaseProductVersion(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getDriverName(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getDriverVersion(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getDriverMajorVersion(  ) throw(::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getDriverMinorVersion(  ) throw(::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL usesLocalFiles(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL usesLocalFilePerTable(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsMixedCaseIdentifiers(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL storesUpperCaseIdentifiers(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL storesLowerCaseIdentifiers(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL storesMixedCaseIdentifiers(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsMixedCaseQuotedIdentifiers(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL storesUpperCaseQuotedIdentifiers(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL storesLowerCaseQuotedIdentifiers(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL storesMixedCaseQuotedIdentifiers(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getIdentifierQuoteString(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getSQLKeywords(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getNumericFunctions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getStringFunctions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getSystemFunctions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getTimeDateFunctions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getSearchStringEscape(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getExtraNameCharacters(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsAlterTableWithAddColumn(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsAlterTableWithDropColumn(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsColumnAliasing(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL nullPlusNonNullIsNull(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsTypeConversion(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsConvert( sal_Int32 fromType, sal_Int32 toType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsTableCorrelationNames(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsDifferentTableCorrelationNames(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsExpressionsInOrderBy(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsOrderByUnrelated(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsGroupBy(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsGroupByUnrelated(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsGroupByBeyondSelect(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsLikeEscapeClause(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsMultipleResultSets(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsMultipleTransactions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsNonNullableColumns(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsMinimumSQLGrammar(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsCoreSQLGrammar(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsExtendedSQLGrammar(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsANSI92EntryLevelSQL(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsANSI92IntermediateSQL(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsANSI92FullSQL(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsIntegrityEnhancementFacility(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsOuterJoins(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsFullOuterJoins(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsLimitedOuterJoins(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getSchemaTerm(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getProcedureTerm(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getCatalogTerm(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL isCatalogAtStart(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::rtl::OUString SAL_CALL getCatalogSeparator(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSchemasInDataManipulation(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSchemasInProcedureCalls(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSchemasInTableDefinitions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSchemasInIndexDefinitions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSchemasInPrivilegeDefinitions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsCatalogsInDataManipulation(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsCatalogsInProcedureCalls(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsCatalogsInTableDefinitions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsCatalogsInIndexDefinitions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsCatalogsInPrivilegeDefinitions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsPositionedDelete(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsPositionedUpdate(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSelectForUpdate(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsStoredProcedures(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSubqueriesInComparisons(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSubqueriesInExists(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSubqueriesInIns(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsSubqueriesInQuantifieds(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsCorrelatedSubqueries(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsUnion(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsUnionAll(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsOpenCursorsAcrossCommit(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsOpenCursorsAcrossRollback(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsOpenStatementsAcrossCommit(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsOpenStatementsAcrossRollback(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxBinaryLiteralLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxCharLiteralLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxColumnNameLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxColumnsInGroupBy(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxColumnsInIndex(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxColumnsInOrderBy(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxColumnsInSelect(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxColumnsInTable(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxConnections(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxCursorNameLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxIndexLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxSchemaNameLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxProcedureNameLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxCatalogNameLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxRowSize(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL doesMaxRowSizeIncludeBlobs(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxStatementLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxStatements(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxTableNameLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxTablesInSelect(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getMaxUserNameLength(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Int32 SAL_CALL getDefaultTransactionIsolation(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsTransactions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsTransactionIsolationLevel( sal_Int32 level ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsDataDefinitionAndDataManipulationTransactions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsDataManipulationTransactionsOnly(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL dataDefinitionCausesTransactionCommit(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL dataDefinitionIgnoredInTransactions(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getProcedures( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& procedureNamePattern ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getProcedureColumns( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& procedureNamePattern, const ::rtl::OUString& columnNamePattern ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getTables( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& tableNamePattern, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& types ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getSchemas(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getCatalogs(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getTableTypes(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getColumns( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& tableNamePattern, const ::rtl::OUString& columnNamePattern ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getColumnPrivileges( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, const ::rtl::OUString& columnNamePattern ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getTablePrivileges( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& tableNamePattern ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getBestRowIdentifier( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, sal_Int32 scope, sal_Bool nullable ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getVersionColumns( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getPrimaryKeys( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getImportedKeys( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getExportedKeys( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getCrossReference( const ::com::sun::star::uno::Any& primaryCatalog, const ::rtl::OUString& primarySchema, const ::rtl::OUString& primaryTable, const ::com::sun::star::uno::Any& foreignCatalog, const ::rtl::OUString& foreignSchema, const ::rtl::OUString& foreignTable ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getTypeInfo(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getIndexInfo( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, sal_Bool unique, sal_Bool approximate ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsResultSetType( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsResultSetConcurrency( sal_Int32 setType, sal_Int32 concurrency ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL ownUpdatesAreVisible( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL ownDeletesAreVisible( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL ownInsertsAreVisible( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL othersUpdatesAreVisible( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL othersDeletesAreVisible( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL othersInsertsAreVisible( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL updatesAreDetected( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL deletesAreDetected( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL insertsAreDetected( sal_Int32 setType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual sal_Bool SAL_CALL supportsBatchUpdates(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getUDTs( const ::com::sun::star::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& typeNamePattern, const ::com::sun::star::uno::Sequence< sal_Int32 >& types ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+            virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XConnection > SAL_CALL getConnection(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_DATABASEMETADATA_HXX_
diff -urN connectivity/source/drivers/kab/KDriver.cxx connectivity/source/drivers/kab/KDriver.cxx
--- connectivity/source/drivers/kab/KDriver.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KDriver.cxx	2005-08-08 13:18:24.000000000 +0000
@@ -0,0 +1,267 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KDriver.hxx"
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+
+#include <kcmdlineargs.h>
+#include <kglobal.h>
+#include <klocale.h>
+
+#ifndef _OSL_PROCESS_H_
+#include <osl/process.h>
+#endif
+
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::beans;
+using namespace com::sun::star::sdbc;
+using namespace connectivity::kab;
+
+KabDriver::KabDriver(
+	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& _rxFactory) 
+	: KDriver_BASE(m_aMutex),
+	  m_xMSFactory(_rxFactory),
+	  m_pKApplication(NULL)
+{
+	// we create a KDE application only if it is not already done
+	if (KApplication::kApplication() == NULL)
+	{
+		// version 0.1
+		char *kabargs[1] = {"libkab1"};
+		KCmdLineArgs::init(1, kabargs, "KAddressBook", *kabargs, "Address Book driver", "0.1");
+
+		m_pKApplication = new KApplication(false, false);
+// It would be better to call this constructor with a "Display" argument
+// Especially if OOo is run on diplay :1...
+	}
+
+	// set language
+	rtl_Locale *pProcessLocale;
+	osl_getProcessLocale(&pProcessLocale);
+	QString aLanguage(
+		(const QChar *) pProcessLocale->Language->buffer,
+		(int) pProcessLocale->Language->length);
+	KGlobal::locale()->setLanguage(aLanguage);
+}
+// --------------------------------------------------------------------------------
+void KabDriver::disposing()
+{
+	::osl::MutexGuard aGuard(m_aMutex);
+
+	// when driver will be destroied so all our connections have to be destroied as well
+	for (OWeakRefArray::iterator i = m_xConnections.begin(); m_xConnections.end() != i; ++i)
+	{
+		Reference< XComponent > xComp(i->get(), UNO_QUERY);
+		if (xComp.is())
+			xComp->dispose();
+	}
+	m_xConnections.clear();
+
+	if (m_pKApplication != NULL)
+	{
+		delete m_pKApplication;
+		m_pKApplication = NULL;
+	}
+
+	KDriver_BASE::disposing();
+}
+// static ServiceInfo
+//------------------------------------------------------------------------------
+rtl::OUString KabDriver::getImplementationName_Static(  ) throw(RuntimeException)
+{
+	return rtl::OUString::createFromAscii("com.sun.star.comp.sdbc.kab.Driver");
+		// this name is referenced in the configuration and in the kab.xml
+		// Please be careful when changing it.
+}
+//------------------------------------------------------------------------------
+Sequence< ::rtl::OUString > KabDriver::getSupportedServiceNames_Static(  ) throw (RuntimeException)
+{
+	// which service is supported 
+	// for more information @see com.sun.star.sdbc.Driver
+	Sequence< ::rtl::OUString > aSNS( 1 );
+	aSNS[0] = ::rtl::OUString::createFromAscii("com.sun.star.sdbc.Driver");
+
+	return aSNS;
+}
+//------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabDriver::getImplementationName(  ) throw(RuntimeException)
+{
+	return getImplementationName_Static();
+}
+//------------------------------------------------------------------
+sal_Bool SAL_CALL KabDriver::supportsService( const ::rtl::OUString& _rServiceName ) throw(RuntimeException)
+{
+	Sequence< ::rtl::OUString > aSupported(getSupportedServiceNames());
+	const ::rtl::OUString* pSupported = aSupported.getConstArray();
+	const ::rtl::OUString* pEnd = pSupported + aSupported.getLength();
+
+	while (pSupported != pEnd && !pSupported->equals(_rServiceName))
+		++pSupported;
+	return pSupported != pEnd;
+}
+//------------------------------------------------------------------
+Sequence< ::rtl::OUString > SAL_CALL KabDriver::getSupportedServiceNames(  ) throw(RuntimeException)
+{
+	return getSupportedServiceNames_Static();
+}
+// --------------------------------------------------------------------------------
+Reference< XConnection > SAL_CALL KabDriver::connect( const ::rtl::OUString& url, const Sequence< PropertyValue >& info ) throw(SQLException, RuntimeException)
+{
+	// create a new connection with the given properties and append it to our vector
+	KabConnection* pCon = new KabConnection(this);
+	Reference< XConnection > xCon = pCon;	// important here because otherwise the connection could be deleted inside (refcount goes -> 0)
+	pCon->construct(url,info);				// late constructor call which can throw exception and allows a correct dtor call when so
+	m_xConnections.push_back(WeakReferenceHelper(*pCon));
+	
+	return xCon;
+}
+// --------------------------------------------------------------------------------
+sal_Bool SAL_CALL KabDriver::acceptsURL( const ::rtl::OUString& url ) 
+		throw(SQLException, RuntimeException)
+{
+	// here we have to look if we support this url format
+	return (!url.compareTo(::rtl::OUString::createFromAscii("sdbc:address:kab:"), 16));
+}
+// --------------------------------------------------------------------------------
+Sequence< DriverPropertyInfo > SAL_CALL KabDriver::getPropertyInfo( const ::rtl::OUString& url, const Sequence< PropertyValue >& info ) throw(SQLException, RuntimeException)
+{
+	// if you have somthing special to say, return it here :-)
+	return Sequence< DriverPropertyInfo >();
+}
+// --------------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDriver::getMajorVersion(  ) throw(RuntimeException)
+{
+	// version 0.1
+	return 0;
+}
+// --------------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabDriver::getMinorVersion(  ) throw(RuntimeException)
+{
+	// version 0.1
+	return 1;
+}
+// --------------------------------------------------------------------------------
+
+//.........................................................................
+namespace connectivity
+{
+	namespace kab
+	{
+//.........................................................................
+
+::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >  SAL_CALL KabDriver_CreateInstance(
+		const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& _rxFactory
+		) throw( ::com::sun::star::uno::Exception )
+{
+	return *(new KabDriver(_rxFactory));
+}
+
+void release(
+		oslInterlockedCount& _refCount,
+		::cppu::OBroadcastHelper& rBHelper,
+		::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& _xInterface,
+		::com::sun::star::lang::XComponent* _pObject)
+{
+	if (osl_decrementInterlockedCount( &_refCount ) == 0)
+	{
+		osl_incrementInterlockedCount( &_refCount );
+
+		if (!rBHelper.bDisposed && !rBHelper.bInDispose)
+		{
+			// remember the parent
+			::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > xParent;
+			{
+				::osl::MutexGuard aGuard( rBHelper.rMutex );
+				xParent = _xInterface;
+				_xInterface = NULL;
+			}
+
+			// First dispose
+			_pObject->dispose();
+
+			// only the alive ref holds the object
+			OSL_ASSERT( _refCount == 1 );
+
+			// release the parent in the ~
+			if (xParent.is())
+			{
+				::osl::MutexGuard aGuard( rBHelper.rMutex );
+				_xInterface = xParent;
+			}
+		}
+	}
+	else
+		osl_incrementInterlockedCount( &_refCount );
+}
+
+void checkDisposed(sal_Bool _bThrow) throw ( DisposedException )
+{
+	if (_bThrow)
+		throw DisposedException();
+}
+
+//.........................................................................
+	}
+}
+//.........................................................................
diff -urN connectivity/source/drivers/kab/KDriver.hxx connectivity/source/drivers/kab/KDriver.hxx
--- connectivity/source/drivers/kab/KDriver.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KDriver.hxx	2005-08-08 13:18:24.000000000 +0000
@@ -0,0 +1,127 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_DRIVER_HXX_
+#define _CONNECTIVITY_KAB_DRIVER_HXX_
+
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+
+#include <kapplication.h>
+
+#ifndef _COM_SUN_STAR_SDBC_XDRIVER_HPP_
+#include <com/sun/star/sdbc/XDriver.hpp>
+#endif
+#ifndef _CPPUHELPER_COMPBASE2_HXX_
+#include <cppuhelper/compbase2.hxx>
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+		::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > SAL_CALL KabDriver_CreateInstance(const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& _rxFactory) throw( ::com::sun::star::uno::Exception );
+
+		typedef ::cppu::WeakComponentImplHelper2<	::com::sun::star::sdbc::XDriver, 
+													::com::sun::star::lang::XServiceInfo > KDriver_BASE;
+
+		class KabDriver : public KDriver_BASE
+		{
+		protected:
+			KApplication*				m_pKApplication;	// KDE application if we own it
+			::osl::Mutex				m_aMutex;			// mutex is need to control member access
+			OWeakRefArray				m_xConnections;		// vector containing a list of all the
+															//  KabConnection objects for this Driver
+			::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >
+										m_xMSFactory;		// the multi-service factory
+
+		public:
+
+			KabDriver(const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& _rxFactory);
+
+			// OComponentHelper
+			virtual void SAL_CALL disposing(void);
+
+			// XInterface
+			static ::rtl::OUString getImplementationName_Static(  ) throw(::com::sun::star::uno::RuntimeException);
+			static ::com::sun::star::uno::Sequence< ::rtl::OUString > getSupportedServiceNames_Static(  ) throw (::com::sun::star::uno::RuntimeException);
+
+			// XServiceInfo
+			virtual ::rtl::OUString SAL_CALL getImplementationName(  ) throw(::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) throw(::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) throw(::com::sun::star::uno::RuntimeException);
+
+			// XDriver
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XConnection > SAL_CALL connect( const ::rtl::OUString& url, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& info ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL acceptsURL( const ::rtl::OUString& url ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sdbc::DriverPropertyInfo > SAL_CALL getPropertyInfo( const ::rtl::OUString& url, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& info ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getMajorVersion() throw(::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getMinorVersion() throw(::com::sun::star::uno::RuntimeException);
+
+			const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >&
+					getMSFactory() const { return m_xMSFactory; }
+		};
+	}
+
+}
+
+#endif // _CONNECTIVITY_KAB_DRIVER_HXX_
diff -urN connectivity/source/drivers/kab/KPreparedStatement.cxx connectivity/source/drivers/kab/KPreparedStatement.cxx
--- connectivity/source/drivers/kab/KPreparedStatement.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KPreparedStatement.cxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,387 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KPreparedStatement.hxx"
+
+#ifndef _CONNECTIVITY_KAB_RESULTSETMETADATA_HXX_
+#include "KResultSetMetaData.hxx"
+#endif
+
+#ifndef _CONNECTIVITY_PROPERTYIDS_HXX_
+#include "propertyids.hxx"
+#endif
+
+using namespace connectivity::kab;
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::beans;
+using namespace com::sun::star::sdbc;
+using namespace com::sun::star::container;
+using namespace com::sun::star::io;
+using namespace com::sun::star::util;
+
+IMPLEMENT_SERVICE_INFO(KabPreparedStatement,"com.sun.star.sdbcx.kab.PreparedStatement","com.sun.star.sdbc.PreparedStatement");
+
+
+KabPreparedStatement::KabPreparedStatement(
+	KabConnection* _pConnection,
+	const TTypeInfoVector& _TypeInfo,
+	const ::rtl::OUString& sql)
+	: KabStatement_BASE2(_pConnection),
+	  m_aTypeInfo(_TypeInfo),
+	  m_bPrepared(sal_False),
+	  m_sSqlStatement(sql),
+	  m_nNumParams(0)
+{
+printf("Prepared statement: ");
+short *p = (short *) sql.getStr();
+while (*p) putchar(*p++);
+putchar('\n');
+}
+// -----------------------------------------------------------------------------
+KabPreparedStatement::~KabPreparedStatement()
+{
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::acquire() throw()
+{
+	KabStatement_BASE2::acquire();
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::release() throw()
+{
+	KabStatement_BASE2::release();
+}
+// -----------------------------------------------------------------------------
+Any SAL_CALL KabPreparedStatement::queryInterface(const Type & rType) throw(RuntimeException)
+{
+	Any aRet = KabStatement_BASE2::queryInterface(rType);
+	if (!aRet.hasValue())
+		aRet = KabPreparedStatement_BASE::queryInterface(rType);
+	return aRet;
+}
+// -------------------------------------------------------------------------
+::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type > SAL_CALL KabPreparedStatement::getTypes() throw(::com::sun::star::uno::RuntimeException)
+{
+	return comphelper::concatSequences(
+		KabPreparedStatement_BASE::getTypes(),
+		KabStatement_BASE2::getTypes());
+}
+// -------------------------------------------------------------------------
+Reference< XResultSetMetaData > SAL_CALL KabPreparedStatement::getMetaData() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+	if (!m_xMetaData.is())
+		m_xMetaData = new KabResultSetMetaData(getOwnConnection());
+	return m_xMetaData;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::close() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+	// Reset last warning message
+	try {
+		clearWarnings ();
+		KabStatement_BASE2::close();
+	}
+	catch (SQLException &) {
+		// If we get an error, ignore
+	}
+
+	// Remove this Statement object from the Connection object's
+	// list
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabPreparedStatement::execute() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+
+	Reference< XResultSet> xRS = KabStatement_Base::executeQuery(m_sSqlStatement);
+
+	return xRS.is();
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabPreparedStatement::executeUpdate() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+	// same as in statement with the difference that this statement also can contain parameter
+	return 0;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setString(sal_Int32 parameterIndex, const ::rtl::OUString& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+Reference< XConnection > SAL_CALL KabPreparedStatement::getConnection() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+
+	return (Reference< XConnection >) m_pConnection;
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabPreparedStatement::executeQuery() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+
+	Reference< XResultSet > rs = KabStatement_Base::executeQuery(m_sSqlStatement);
+
+	return rs;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setBoolean(sal_Int32 parameterIndex, sal_Bool x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setByte(sal_Int32 parameterIndex, sal_Int8 x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setDate(sal_Int32 parameterIndex, const Date& aData) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setTime(sal_Int32 parameterIndex, const Time& aVal) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setTimestamp(sal_Int32 parameterIndex, const DateTime& aVal) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setDouble(sal_Int32 parameterIndex, double x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setFloat(sal_Int32 parameterIndex, float x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setInt(sal_Int32 parameterIndex, sal_Int32 x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setLong(sal_Int32 parameterIndex, sal_Int64 aVal) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setNull(sal_Int32 parameterIndex, sal_Int32 sqlType) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setClob(sal_Int32 parameterIndex, const Reference< XClob >& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setBlob(sal_Int32 parameterIndex, const Reference< XBlob >& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setArray(sal_Int32 parameterIndex, const Reference< XArray >& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+
+void SAL_CALL KabPreparedStatement::setRef(sal_Int32 parameterIndex, const Reference< XRef >& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setObjectWithInfo(sal_Int32 parameterIndex, const Any& x, sal_Int32 sqlType, sal_Int32 scale) throw(SQLException, RuntimeException)
+{
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+	::osl::MutexGuard aGuard( m_aMutex );	
+
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setObjectNull(sal_Int32 parameterIndex, sal_Int32 sqlType, const ::rtl::OUString& typeName) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setObject(sal_Int32 parameterIndex, const Any& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setShort(sal_Int32 parameterIndex, sal_Int16 x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setBytes(sal_Int32 parameterIndex, const Sequence< sal_Int8 >& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setCharacterStream(sal_Int32 parameterIndex, const Reference< ::com::sun::star::io::XInputStream >& x, sal_Int32 length) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::setBinaryStream(sal_Int32 parameterIndex, const Reference< ::com::sun::star::io::XInputStream >& x, sal_Int32 length) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::clearParameters() throw(SQLException, RuntimeException)
+{
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::clearBatch() throw(SQLException, RuntimeException)
+{
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabPreparedStatement::addBatch() throw(SQLException, RuntimeException)
+{
+}
+// -------------------------------------------------------------------------
+Sequence< sal_Int32 > SAL_CALL KabPreparedStatement::executeBatch() throw(SQLException, RuntimeException)
+{
+	return Sequence< sal_Int32 > ();
+}
+// -------------------------------------------------------------------------
+void KabPreparedStatement::setFastPropertyValue_NoBroadcast(sal_Int32 nHandle,const Any& rValue) throw (Exception)
+{
+	switch (nHandle)
+	{
+		case PROPERTY_ID_RESULTSETCONCURRENCY:
+			break;
+		case PROPERTY_ID_RESULTSETTYPE:
+			break;
+		case PROPERTY_ID_FETCHDIRECTION:
+			break;
+		case PROPERTY_ID_USEBOOKMARKS:
+			break;
+		default:
+			KabStatement_Base::setFastPropertyValue_NoBroadcast(nHandle,rValue);
+	}
+}
+// -----------------------------------------------------------------------------
+void KabPreparedStatement::checkParameterIndex(sal_Int32 _parameterIndex)
+{
+	if (!_parameterIndex || _parameterIndex > m_nNumParams)
+		throw SQLException();
+}
+// -----------------------------------------------------------------------------
diff -urN connectivity/source/drivers/kab/KPreparedStatement.hxx connectivity/source/drivers/kab/KPreparedStatement.hxx
--- connectivity/source/drivers/kab/KPreparedStatement.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KPreparedStatement.hxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,183 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_PREPAREDSTATEMENT_HXX_
+#define _CONNECTIVITY_KAB_PREPAREDSTATEMENT_HXX_
+
+#ifndef _CONNECTIVITY_KAB_STATEMENT_HXX_
+#include "KStatement.hxx"
+#endif
+
+#ifndef _COM_SUN_STAR_SDBC_XPARAMETERS_HPP_
+#include <com/sun/star/sdbc/XParameters.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XRESULTSETMETADATASUPPLIER_HPP_
+#include <com/sun/star/sdbc/XResultSetMetaDataSupplier.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XPREPAREDBATCHEXECUTION_HPP_
+#include <com/sun/star/sdbc/XPreparedBatchExecution.hpp>
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+
+		class OBoundParam;
+		typedef ::cppu::ImplHelper5<	::com::sun::star::sdbc::XPreparedStatement,
+										::com::sun::star::sdbc::XParameters,
+										::com::sun::star::sdbc::XPreparedBatchExecution,
+										::com::sun::star::sdbc::XResultSetMetaDataSupplier,
+										::com::sun::star::lang::XServiceInfo> KabPreparedStatement_BASE;
+
+		class KabPreparedStatement :	public	KabStatement_BASE2,
+                                    public  KabPreparedStatement_BASE
+		{
+		protected:
+			struct Parameter
+			{
+				::com::sun::star::uno::Any	aValue;
+				sal_Int32					nDataType;
+
+				Parameter(const ::com::sun::star::uno::Any&	rValue,
+						  sal_Int32							rDataType) : aValue(rValue),nDataType(rDataType)
+				{
+				}
+
+			};
+
+			::std::vector< Parameter>		m_aParameters;
+			//====================================================================
+			// Data attributes
+			//====================================================================
+			TTypeInfoVector					m_aTypeInfo;	// Hashtable containing an entry
+																		//  for each row returned by
+																		//  DatabaseMetaData.getTypeInfo.
+
+			sal_Int32						m_nNumParams;		// Number of parameter markers
+																//  for the prepared statement
+
+			::rtl::OUString																	m_sSqlStatement;
+			::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSetMetaData >	m_xMetaData;
+			sal_Bool																		m_bPrepared;
+
+			void checkParameterIndex(sal_Int32 _parameterIndex);
+
+		protected:
+			virtual void SAL_CALL setFastPropertyValue_NoBroadcast(sal_Int32 nHandle,
+																   const ::com::sun::star::uno::Any& rValue)
+																		throw (::com::sun::star::uno::Exception);
+			virtual ~KabPreparedStatement();
+		public:
+			DECLARE_SERVICE_INFO();
+			KabPreparedStatement( KabConnection* _pConnection,const TTypeInfoVector& _TypeInfo,const ::rtl::OUString& sql);
+
+			//XInterface
+            virtual ::com::sun::star::uno::Any SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL acquire() throw();
+            virtual void SAL_CALL release() throw();
+			//XTypeProvider
+            virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type > SAL_CALL getTypes(  ) throw(::com::sun::star::uno::RuntimeException);
+
+			// XPreparedStatement
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL executeQuery(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL executeUpdate(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL execute(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XConnection > SAL_CALL getConnection(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			// XParameters
+			virtual void SAL_CALL setNull( sal_Int32 parameterIndex, sal_Int32 sqlType ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setObjectNull( sal_Int32 parameterIndex, sal_Int32 sqlType, const ::rtl::OUString& typeName ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setBoolean( sal_Int32 parameterIndex, sal_Bool x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setByte( sal_Int32 parameterIndex, sal_Int8 x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setShort( sal_Int32 parameterIndex, sal_Int16 x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setInt( sal_Int32 parameterIndex, sal_Int32 x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setLong( sal_Int32 parameterIndex, sal_Int64 x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setFloat( sal_Int32 parameterIndex, float x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setDouble( sal_Int32 parameterIndex, double x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setString( sal_Int32 parameterIndex, const ::rtl::OUString& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setBytes( sal_Int32 parameterIndex, const ::com::sun::star::uno::Sequence< sal_Int8 >& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setDate( sal_Int32 parameterIndex, const ::com::sun::star::util::Date& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setTime( sal_Int32 parameterIndex, const ::com::sun::star::util::Time& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setTimestamp( sal_Int32 parameterIndex, const ::com::sun::star::util::DateTime& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setBinaryStream( sal_Int32 parameterIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& x, sal_Int32 length ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setCharacterStream( sal_Int32 parameterIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& x, sal_Int32 length ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setObject( sal_Int32 parameterIndex, const ::com::sun::star::uno::Any& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setObjectWithInfo( sal_Int32 parameterIndex, const ::com::sun::star::uno::Any& x, sal_Int32 targetSqlType, sal_Int32 scale ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setRef( sal_Int32 parameterIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XRef >& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setBlob( sal_Int32 parameterIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XBlob >& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setClob( sal_Int32 parameterIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XClob >& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL setArray( sal_Int32 parameterIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XArray >& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL clearParameters(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			// XPreparedBatchExecution
+			virtual void SAL_CALL addBatch(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL clearBatch(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Sequence< sal_Int32 > SAL_CALL executeBatch(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XCloseable
+            virtual void SAL_CALL close(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XResultSetMetaDataSupplier
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSetMetaData > SAL_CALL getMetaData(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_PREPAREDSTATEMENT_HXX_
diff -urN connectivity/source/drivers/kab/KResultSet.cxx connectivity/source/drivers/kab/KResultSet.cxx
--- connectivity/source/drivers/kab/KResultSet.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KResultSet.cxx	2005-08-20 10:31:20.000000000 +0000
@@ -0,0 +1,1004 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KResultSet.hxx"
+#ifndef _CONNECTIVITY_KAB_RESULTSETMETADATA_HXX_
+#include "KResultSetMetaData.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+#include <kabc/addressbook.h>
+
+#ifndef _COM_SUN_STAR_BEANS_PROPERTYATTRIBUTE_HPP_
+#include <com/sun/star/beans/PropertyAttribute.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBCX_COMPAREBOOKMARK_HPP_
+#include <com/sun/star/sdbcx/CompareBookmark.hpp>
+#endif
+#ifndef CONNECTIVITY_CONNECTION_HXX
+#include "TConnection.hxx"
+#endif
+#ifndef _DBHELPER_DBEXCEPTION_HXX_
+#include <connectivity/dbexception.hxx>
+#endif
+
+using namespace connectivity::kab;
+using namespace cppu;
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::beans;
+using namespace com::sun::star::sdbc;
+using namespace com::sun::star::sdbcx;
+using namespace com::sun::star::container;
+using namespace com::sun::star::io;
+using namespace com::sun::star::util;
+
+//------------------------------------------------------------------------------
+//	IMPLEMENT_SERVICE_INFO(KabResultSet,"com.sun.star.sdbcx.KabResultSet","com.sun.star.sdbc.ResultSet");
+::rtl::OUString SAL_CALL KabResultSet::getImplementationName(  ) throw ( RuntimeException)	\
+{
+	return ::rtl::OUString::createFromAscii("com.sun.star.sdbcx.kab.ResultSet");
+}
+// -------------------------------------------------------------------------
+Sequence< ::rtl::OUString > SAL_CALL KabResultSet::getSupportedServiceNames(  ) throw( RuntimeException)
+{
+	 Sequence< ::rtl::OUString > aSupported(2);
+	aSupported[0] = ::rtl::OUString::createFromAscii("com.sun.star.sdbc.ResultSet");
+	aSupported[1] = ::rtl::OUString::createFromAscii("com.sun.star.sdbcx.ResultSet");
+	return aSupported;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::supportsService( const ::rtl::OUString& _rServiceName ) throw( RuntimeException)
+{
+	Sequence< ::rtl::OUString > aSupported(getSupportedServiceNames());
+	const ::rtl::OUString* pSupported = aSupported.getConstArray();
+	const ::rtl::OUString* pEnd = pSupported + aSupported.getLength();
+	for (;pSupported != pEnd && !pSupported->equals(_rServiceName); ++pSupported)
+		;
+
+	return pSupported != pEnd;
+}
+// -------------------------------------------------------------------------
+KabResultSet::KabResultSet(KabStatement_Base* pStmt) 
+	: KabResultSet_BASE(m_aMutex),
+	  OPropertySetHelper(KabResultSet_BASE::rBHelper),
+	  m_aStatement((OWeakObject*) pStmt),
+	  m_xMetaData(NULL),
+	  m_pStatement(pStmt),
+	  m_aKabAddressees(),
+	  m_nRowPos(-1),
+	  m_bWasNull(sal_True)
+{
+}
+// -------------------------------------------------------------------------
+KabResultSet::~KabResultSet()
+{
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::allKabAddressees()
+{
+	KabConnection* pConnection = (KabConnection *) m_pStatement->getConnection().get();
+
+	m_aKabAddressees = pConnection->getAddressBook()->allAddressees();
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::nullKabAddressees(const ::rtl::OUString &columnName) throw(SQLException)
+{
+	::KABC::Field::List aFields = ::KABC::Field::allFields();
+	sal_Int32 nFieldNumber = KabResultSetMetaData::findKabField(columnName);
+
+	KabConnection *pConnection = (KabConnection *) m_pStatement->getConnection().get();
+	KABC::AddressBook *pAddressBook = pConnection->getAddressBook();
+	KABC::AddressBook::Iterator iterator;
+
+	for (iterator = pAddressBook->begin();
+	     iterator != pAddressBook->end();
+	     ++iterator)
+	{
+		QString aQtName(aFields[nFieldNumber]->value(*iterator));
+
+		if (aQtName.isNull())
+			m_aKabAddressees.push_back(*iterator);
+// KDE address book currently does not use NULL values.
+// But it might do it someday
+	}
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::notNullKabAddressees(const ::rtl::OUString &columnName) throw(SQLException)
+{
+	::KABC::Field::List aFields = ::KABC::Field::allFields();
+	sal_Int32 nFieldNumber = KabResultSetMetaData::findKabField(columnName);
+
+	KabConnection *pConnection = (KabConnection *) m_pStatement->getConnection().get();
+	KABC::AddressBook *pAddressBook = pConnection->getAddressBook();
+	KABC::AddressBook::Iterator iterator;
+
+	for (iterator = pAddressBook->begin();
+	     iterator != pAddressBook->end();
+	     ++iterator)
+	{
+		QString aQtName(aFields[nFieldNumber]->value(*iterator));
+
+		if (!aQtName.isNull())
+			m_aKabAddressees.push_back(*iterator);
+// KDE address book currently does not use NULL values.
+// But it might do it someday
+	}
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::equalKabAddressees(const ::rtl::OUString &columnName, const ::rtl::OUString &matchString) throw(SQLException)
+{
+	::KABC::Field::List aFields = ::KABC::Field::allFields();
+	sal_Int32 nFieldNumber = KabResultSetMetaData::findKabField(columnName);
+
+	KabConnection *pConnection = (KabConnection *) m_pStatement->getConnection().get();
+	KABC::AddressBook *pAddressBook = pConnection->getAddressBook();
+	KABC::AddressBook::Iterator iterator;
+
+	for (iterator = pAddressBook->begin();
+	     iterator != pAddressBook->end();
+	     ++iterator)
+	{
+		QString aQtName(aFields[nFieldNumber]->value(*iterator));
+
+		if (!aQtName.isNull())
+		{
+			::rtl::OUString aValue((const sal_Unicode *) aQtName.ucs2());
+			if (aValue == matchString)
+				m_aKabAddressees.push_back(*iterator);
+		}
+	}
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::similarKabAddressees(const ::rtl::OUString &columnName, const ::rtl::OUString &matchString) throw(SQLException)
+{
+	::KABC::Field::List aFields = ::KABC::Field::allFields();
+	sal_Int32 nFieldNumber = KabResultSetMetaData::findKabField(columnName);
+
+	KabConnection *pConnection = (KabConnection *) m_pStatement->getConnection().get();
+	KABC::AddressBook *pAddressBook = pConnection->getAddressBook();
+	KABC::AddressBook::Iterator iterator;
+
+	for (iterator = pAddressBook->begin();
+	     iterator != pAddressBook->end();
+	     ++iterator)
+	{
+		QString aQtName(aFields[nFieldNumber]->value(*iterator));
+
+		if (!aQtName.isNull())
+		{
+			::rtl::OUString aValue((const sal_Unicode *) aQtName.ucs2());
+			if (match(matchString, aValue, '\0'))
+				m_aKabAddressees.push_back(*iterator);
+		}
+	}
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::differentKabAddressees(const ::rtl::OUString &columnName, const ::rtl::OUString &matchString) throw(SQLException)
+{
+	::KABC::Field::List aFields = ::KABC::Field::allFields();
+	sal_Int32 nFieldNumber = KabResultSetMetaData::findKabField(columnName);
+
+	KabConnection *pConnection = (KabConnection *) m_pStatement->getConnection().get();
+	KABC::AddressBook *pAddressBook = pConnection->getAddressBook();
+	KABC::AddressBook::Iterator iterator;
+
+	for (iterator = pAddressBook->begin();
+	     iterator != pAddressBook->end();
+	     ++iterator)
+	{
+		QString aQtName(aFields[nFieldNumber]->value(*iterator));
+
+		if (aQtName.isNull())
+			m_aKabAddressees.push_back(*iterator);
+		else
+		{
+			::rtl::OUString aValue((const sal_Unicode *) aQtName.ucs2());
+			if (aValue != matchString)
+				m_aKabAddressees.push_back(*iterator);
+		}
+	}
+}
+// -------------------------------------------------------------------------
+void KabResultSet::disposing()
+{
+	OPropertySetHelper::disposing();
+
+	::osl::MutexGuard aGuard(m_aMutex);
+
+	m_aStatement	= NULL;
+	m_xMetaData		= NULL;
+}
+// -------------------------------------------------------------------------
+Any SAL_CALL KabResultSet::queryInterface(const Type & rType) throw(RuntimeException)
+{
+	Any aRet = OPropertySetHelper::queryInterface(rType);
+	if (!aRet.hasValue())
+		aRet = KabResultSet_BASE::queryInterface(rType);
+	return aRet;
+}
+// -------------------------------------------------------------------------
+Sequence<  Type > SAL_CALL KabResultSet::getTypes() throw(RuntimeException)
+{
+	OTypeCollection aTypes(
+		::getCppuType( (const Reference< ::com::sun::star::beans::XMultiPropertySet >*) 0),
+		::getCppuType( (const Reference< ::com::sun::star::beans::XFastPropertySet >*) 0),
+		::getCppuType( (const Reference< ::com::sun::star::beans::XPropertySet >*) 0));
+
+	return comphelper::concatSequences(aTypes.getTypes(), KabResultSet_BASE::getTypes());
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSet::findColumn(const ::rtl::OUString& columnName) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	// find the first column with the name columnName 
+	Reference< XResultSetMetaData > xMeta = getMetaData();
+	sal_Int32 nLen = xMeta->getColumnCount(),
+	          i;
+
+	for (i = 1; i <= nLen; ++i)
+		if (xMeta->isCaseSensitive(i) ?
+			columnName == xMeta->getColumnName(i) : 
+			columnName.equalsIgnoreAsciiCase(xMeta->getColumnName(i)))
+				return i;
+
+	::dbtools::throwGenericSQLException(
+		::rtl::OUString::createFromAscii("Invalid column name: ") + columnName,
+		NULL);
+}
+// -------------------------------------------------------------------------
+Reference< XInputStream > SAL_CALL KabResultSet::getBinaryStream(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XInputStream > SAL_CALL KabResultSet::getCharacterStream(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return NULL;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::getBoolean(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Int8 SAL_CALL KabResultSet::getByte(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	sal_Int8 nRet = 0;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+Sequence< sal_Int8 > SAL_CALL KabResultSet::getBytes(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+		
+	return Sequence< sal_Int8 >();
+}
+// -------------------------------------------------------------------------
+Date SAL_CALL KabResultSet::getDate(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	Date nRet;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+double SAL_CALL KabResultSet::getDouble(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	double nRet = 0;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+float SAL_CALL KabResultSet::getFloat(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	float nVal(0);
+	return nVal;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSet::getInt(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+		
+	sal_Int32 nRet=0;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSet::getRow() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	sal_Int32 nValue = 0;
+	return nValue;
+}
+// -------------------------------------------------------------------------
+sal_Int64 SAL_CALL KabResultSet::getLong(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+		
+	return sal_Int64();
+}
+// -------------------------------------------------------------------------
+Reference< XResultSetMetaData > SAL_CALL KabResultSet::getMetaData() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	if (!m_xMetaData.is())
+		m_xMetaData = new KabResultSetMetaData(m_pStatement->getOwnConnection());
+
+	return m_xMetaData;
+}
+// -------------------------------------------------------------------------
+Reference< XArray > SAL_CALL KabResultSet::getArray(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XClob > SAL_CALL KabResultSet::getClob(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XBlob > SAL_CALL KabResultSet::getBlob(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Reference< XRef > SAL_CALL KabResultSet::getRef(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return NULL;
+}
+// -------------------------------------------------------------------------
+Any SAL_CALL KabResultSet::getObject(sal_Int32 columnIndex, const Reference< ::com::sun::star::container::XNameAccess >& typeMap) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return Any();
+}
+// -------------------------------------------------------------------------
+sal_Int16 SAL_CALL KabResultSet::getShort(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	sal_Int16 nRet=0;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabResultSet::getString(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	::rtl::OUString aRet;
+	sal_Int32 nAddressees = m_aKabAddressees.size();
+	::KABC::Field::List aFields = ::KABC::Field::allFields();
+
+	if (m_nRowPos != -1 && m_nRowPos != nAddressees && m_xMetaData.is())
+	{
+		KabResultSetMetaData *pMeta = (KabResultSetMetaData *) m_xMetaData.get();
+		sal_Int32 nFieldNumber = pMeta->fieldAtColumn(columnIndex);
+		QString aQtName(aFields[nFieldNumber]->value(m_aKabAddressees[m_nRowPos]));
+
+		if (!aQtName.isNull())
+		{
+			m_bWasNull = false;
+			aRet = ::rtl::OUString((const sal_Unicode *) aQtName.ucs2());
+			return aRet;
+		}
+	}
+// KDE address book currently does not use NULL values.
+// But it might do it someday
+	m_bWasNull = true;
+	return aRet;
+}
+// -------------------------------------------------------------------------
+Time SAL_CALL KabResultSet::getTime(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	Time nRet;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+DateTime SAL_CALL KabResultSet::getTimestamp(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	DateTime nRet;
+	return nRet;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::isBeforeFirst() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	if (m_nRowPos == -1)
+		return sal_True;
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::isAfterLast() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	sal_Int32 nAddressees = m_aKabAddressees.size();
+	if (m_nRowPos == nAddressees)
+		return sal_True;
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::isFirst() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	if (m_nRowPos == 0)
+		return sal_True;
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::isLast() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	sal_Int32 nAddressees = m_aKabAddressees.size();
+	if (m_nRowPos == nAddressees - 1)
+		return sal_True;
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::beforeFirst() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+		
+	// move before the first row
+	m_nRowPos == -1;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::afterLast() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	// move after the last row
+	sal_Int32 nAddressees = m_aKabAddressees.size();
+	m_nRowPos = nAddressees;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::close() throw(SQLException, RuntimeException)
+{
+	{
+		::osl::MutexGuard aGuard( m_aMutex );
+		checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+	}
+	dispose();
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::first() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	sal_Int32 nAddressees = m_aKabAddressees.size();
+	if (nAddressees == 0)
+		return sal_False;
+
+	m_nRowPos = 0;
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::last() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	sal_Int32 nAddressees = m_aKabAddressees.size();
+	if (nAddressees == 0)
+		return sal_False;
+
+	m_nRowPos = nAddressees - 1;
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::absolute(sal_Int32 row) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	sal_Int32 nAddressees = m_aKabAddressees.size();
+	if (row <= -1 ||
+	    row >= nAddressees)
+		return sal_False;
+
+	m_nRowPos = row;
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::relative(sal_Int32 row) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return absolute(m_nRowPos + row);
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::next() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return absolute(m_nRowPos + 1);
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::previous() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return absolute(m_nRowPos - 1);
+}
+// -------------------------------------------------------------------------
+Reference< XInterface > SAL_CALL KabResultSet::getStatement() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return m_aStatement.get();
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::rowDeleted() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::rowInserted() throw(SQLException, RuntimeException)
+{	
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::rowUpdated() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::wasNull() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return m_bWasNull;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::cancel() throw(RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::clearWarnings() throw(SQLException, RuntimeException)
+{
+}
+// -------------------------------------------------------------------------
+Any SAL_CALL KabResultSet::getWarnings() throw(SQLException, RuntimeException)
+{
+	return Any();
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::insertRow() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	// you only have to implement this if you want to insert new rows
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateRow() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+		
+	// only when you allow updates
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::deleteRow() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::cancelRowUpdates() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::moveToInsertRow() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+		
+	// only when you allow inserts
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::moveToCurrentRow() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateNull(sal_Int32 columnIndex) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateBoolean(sal_Int32 columnIndex, sal_Bool x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateByte(sal_Int32 columnIndex, sal_Int8 x) throw(SQLException, RuntimeException)
+{
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+	::osl::MutexGuard aGuard( m_aMutex );
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateShort(sal_Int32 columnIndex, sal_Int16 x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateInt(sal_Int32 columnIndex, sal_Int32 x) throw(SQLException, RuntimeException)
+{
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+	::osl::MutexGuard aGuard( m_aMutex );
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateLong(sal_Int32 columnIndex, sal_Int64 x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -----------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateFloat(sal_Int32 columnIndex, float x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateDouble(sal_Int32 columnIndex, double x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateString(sal_Int32 columnIndex, const ::rtl::OUString& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateBytes(sal_Int32 columnIndex, const Sequence< sal_Int8 >& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateDate(sal_Int32 columnIndex, const Date& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateTime(sal_Int32 columnIndex, const Time& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateTimestamp(sal_Int32 columnIndex, const DateTime& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+		
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateBinaryStream(sal_Int32 columnIndex, const Reference< XInputStream >& x, sal_Int32 length) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateCharacterStream(sal_Int32 columnIndex, const Reference< XInputStream >& x, sal_Int32 length) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::refreshRow() throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateObject(sal_Int32 columnIndex, const Any& x) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSet::updateNumericObject(sal_Int32 columnIndex, const Any& x, sal_Int32 scale) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+}
+// -------------------------------------------------------------------------
+// XRowLocate
+Any SAL_CALL KabResultSet::getBookmark() throw( SQLException,  RuntimeException)
+{
+	 ::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	// if you don't want to support bookmark you must remove the XRowLocate interface
+
+	 return Any();
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::moveToBookmark(const  Any& bookmark) throw( SQLException,  RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::moveRelativeToBookmark(const  Any& bookmark, sal_Int32 rows) throw( SQLException,  RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSet::compareBookmarks(const  Any& first, const  Any& second) throw( SQLException,  RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+
+	return CompareBookmark::NOT_EQUAL;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSet::hasOrderedBookmarks() throw( SQLException,  RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSet::hashBookmark(const  Any& bookmark) throw( SQLException,  RuntimeException)
+{
+	throw SQLException();
+}
+// -------------------------------------------------------------------------
+// XDeleteRows
+Sequence< sal_Int32 > SAL_CALL KabResultSet::deleteRows(const  Sequence<  Any >& rows) throw( SQLException,  RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabResultSet_BASE::rBHelper.bDisposed);
+		
+	return Sequence< sal_Int32 >();
+}
+// -------------------------------------------------------------------------
+IPropertyArrayHelper* KabResultSet::createArrayHelper() const
+{
+	Sequence< Property > aProps(6);
+	Property* pProperties = aProps.getArray();
+	sal_Int32 nPos = 0;
+	DECL_PROP1IMPL(CURSORNAME,			::rtl::OUString) PropertyAttribute::READONLY);
+	DECL_PROP0(FETCHDIRECTION,			sal_Int32);
+	DECL_PROP0(FETCHSIZE,				sal_Int32);
+	DECL_BOOL_PROP1IMPL(ISBOOKMARKABLE) PropertyAttribute::READONLY);
+	DECL_PROP1IMPL(RESULTSETCONCURRENCY,sal_Int32) PropertyAttribute::READONLY);
+	DECL_PROP1IMPL(RESULTSETTYPE,		sal_Int32) PropertyAttribute::READONLY);
+
+	return new OPropertyArrayHelper(aProps);
+}
+// -------------------------------------------------------------------------
+IPropertyArrayHelper & KabResultSet::getInfoHelper()
+{
+	return *const_cast<KabResultSet*>(this)->getArrayHelper();
+}
+// -------------------------------------------------------------------------
+sal_Bool KabResultSet::convertFastPropertyValue(
+			Any & rConvertedValue,
+			Any & rOldValue,
+			sal_Int32 nHandle,
+			const Any& rValue )
+				throw (::com::sun::star::lang::IllegalArgumentException)
+{
+	switch (nHandle)
+	{
+		case PROPERTY_ID_ISBOOKMARKABLE:
+		case PROPERTY_ID_CURSORNAME:
+		case PROPERTY_ID_RESULTSETCONCURRENCY:
+		case PROPERTY_ID_RESULTSETTYPE:
+			throw ::com::sun::star::lang::IllegalArgumentException();
+			break;
+		case PROPERTY_ID_FETCHDIRECTION:
+		case PROPERTY_ID_FETCHSIZE:
+		default:
+			;
+	}
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+void KabResultSet::setFastPropertyValue_NoBroadcast(
+			sal_Int32 nHandle,
+			const Any& rValue )
+				 throw (Exception)
+{
+	switch (nHandle)
+	{
+		case PROPERTY_ID_ISBOOKMARKABLE:
+		case PROPERTY_ID_CURSORNAME:
+		case PROPERTY_ID_RESULTSETCONCURRENCY:
+		case PROPERTY_ID_RESULTSETTYPE:
+			throw Exception();
+			break;
+		case PROPERTY_ID_FETCHDIRECTION:
+			break;
+		case PROPERTY_ID_FETCHSIZE:
+			break;
+		default:
+			;
+	}
+}
+// -------------------------------------------------------------------------
+void KabResultSet::getFastPropertyValue(
+			Any& rValue,
+			sal_Int32 nHandle) const
+{
+	switch (nHandle)
+	{
+		case PROPERTY_ID_ISBOOKMARKABLE:
+		case PROPERTY_ID_CURSORNAME:
+		case PROPERTY_ID_RESULTSETCONCURRENCY:
+		case PROPERTY_ID_RESULTSETTYPE:
+		case PROPERTY_ID_FETCHDIRECTION:
+		case PROPERTY_ID_FETCHSIZE:
+			;
+	}
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL KabResultSet::acquire() throw()
+{
+	KabResultSet_BASE::acquire();
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL KabResultSet::release() throw()
+{
+	KabResultSet_BASE::release();
+}
+// -----------------------------------------------------------------------------
+::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL KabResultSet::getPropertySetInfo(  ) throw(::com::sun::star::uno::RuntimeException)
+{
+	return ::cppu::OPropertySetHelper::createPropertySetInfo(getInfoHelper());
+}
+// -----------------------------------------------------------------------------
diff -urN connectivity/source/drivers/kab/KResultSet.hxx connectivity/source/drivers/kab/KResultSet.hxx
--- connectivity/source/drivers/kab/KResultSet.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KResultSet.hxx	2005-08-20 10:31:20.000000000 +0000
@@ -0,0 +1,281 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_RESULTSET_HXX_
+#define _CONNECTIVITY_KAB_RESULTSET_HXX_
+
+#ifndef _CONNECTIVITY_KAB_STATEMENT_HXX_
+#include "KStatement.hxx"
+#endif
+#include <kabc/addressee.h>
+
+#ifndef _COM_SUN_STAR_SDBC_XROW_HPP_
+#include <com/sun/star/sdbc/XRow.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XRESULTSETMETADATASUPPLIER_HPP_
+#include <com/sun/star/sdbc/XResultSetMetaDataSupplier.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XCOLUMNLOCATE_HPP_
+#include <com/sun/star/sdbc/XColumnLocate.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XRESULTSETUPDATE_HPP_
+#include <com/sun/star/sdbc/XResultSetUpdate.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XROWUPDATE_HPP_
+#include <com/sun/star/sdbc/XRowUpdate.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBCX_XROWLOCATE_HPP_
+#include <com/sun/star/sdbcx/XRowLocate.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBCX_XDELETEROWS_HPP_
+#include <com/sun/star/sdbcx/XDeleteRows.hpp>
+#endif
+#ifndef _CPPUHELPER_COMPBASE12_HXX_
+#include <cppuhelper/compbase12.hxx>
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+		/*
+		**	KabResultSet
+		*/
+        typedef ::cppu::WeakComponentImplHelper12<      ::com::sun::star::sdbc::XResultSet,
+			                                            ::com::sun::star::sdbc::XRow,
+			                                            ::com::sun::star::sdbc::XResultSetMetaDataSupplier,
+			                                            ::com::sun::star::util::XCancellable,
+			                                            ::com::sun::star::sdbc::XWarningsSupplier,
+			                                            ::com::sun::star::sdbc::XResultSetUpdate,
+			                                            ::com::sun::star::sdbc::XRowUpdate,
+														::com::sun::star::sdbcx::XRowLocate,
+														::com::sun::star::sdbcx::XDeleteRows,
+			                                            ::com::sun::star::sdbc::XCloseable,
+			                                            ::com::sun::star::sdbc::XColumnLocate,
+			                                            ::com::sun::star::lang::XServiceInfo> KabResultSet_BASE;
+
+		class KabResultSet : public	comphelper::OBaseMutex,
+							 public	KabResultSet_BASE,
+							 public	::cppu::OPropertySetHelper,
+							 public	comphelper::OPropertyArrayUsageHelper<KabResultSet>
+		{
+		protected:
+			KabStatement_Base*							m_pStatement;
+			::com::sun::star::uno::WeakReferenceHelper	m_aStatement;
+			::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSetMetaData>
+														m_xMetaData;
+			::KABC::Addressee::List						m_aKabAddressees;	// address book entries matching the query
+			sal_Int32									m_nRowPos;
+			sal_Bool									m_bWasNull;
+
+			// OPropertyArrayUsageHelper
+			virtual ::cppu::IPropertyArrayHelper* createArrayHelper( ) const;
+
+			// OPropertySetHelper
+			virtual ::cppu::IPropertyArrayHelper & SAL_CALL getInfoHelper();
+
+			virtual sal_Bool SAL_CALL convertFastPropertyValue(
+			                    ::com::sun::star::uno::Any & rConvertedValue,
+			                    ::com::sun::star::uno::Any & rOldValue,
+								sal_Int32 nHandle,
+			                    const ::com::sun::star::uno::Any& rValue)
+									throw (::com::sun::star::lang::IllegalArgumentException);
+			virtual void SAL_CALL setFastPropertyValue_NoBroadcast(
+								sal_Int32 nHandle,
+			                    const ::com::sun::star::uno::Any& rValue)
+									throw (::com::sun::star::uno::Exception);
+			virtual void SAL_CALL getFastPropertyValue(
+								::com::sun::star::uno::Any& rValue,
+								sal_Int32 nHandle) const;
+
+			// you can't delete objects of this type
+			virtual ~KabResultSet();
+
+		public:
+			DECLARE_SERVICE_INFO();
+			
+			KabResultSet(KabStatement_Base *pStmt);
+
+			::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > operator *()
+			{
+				return ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >(*(KabResultSet_BASE*) this);
+			}
+
+			void SAL_CALL allKabAddressees();
+			void SAL_CALL nullKabAddressees(const ::rtl::OUString &columnName) throw(::com::sun::star::sdbc::SQLException);
+			void SAL_CALL notNullKabAddressees(const ::rtl::OUString &columnName) throw(::com::sun::star::sdbc::SQLException);
+			void SAL_CALL equalKabAddressees(const ::rtl::OUString &columnName, const ::rtl::OUString &matchString) throw(::com::sun::star::sdbc::SQLException);
+			void SAL_CALL differentKabAddressees(const ::rtl::OUString &columnName, const ::rtl::OUString &matchString) throw(::com::sun::star::sdbc::SQLException);
+			void SAL_CALL similarKabAddressees(const ::rtl::OUString &columnName, const ::rtl::OUString &matchString) throw(::com::sun::star::sdbc::SQLException);
+
+			// ::cppu::OComponentHelper
+			virtual void SAL_CALL disposing(void);
+
+			// XInterface
+			virtual ::com::sun::star::uno::Any SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL acquire() throw();
+			virtual void SAL_CALL release() throw();
+
+			// XTypeProvider
+			virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type > SAL_CALL getTypes(  ) throw(::com::sun::star::uno::RuntimeException);
+
+			// XPropertySet
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw(::com::sun::star::uno::RuntimeException);
+
+			// XResultSet
+			virtual sal_Bool SAL_CALL isBeforeFirst(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isAfterLast(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isFirst(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isLast(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL beforeFirst(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL afterLast(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL first(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL last(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL absolute( sal_Int32 row ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL relative( sal_Int32 rows ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL next(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL previous(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL refreshRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL rowUpdated(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL rowInserted(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL rowDeleted(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > SAL_CALL getStatement(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XRow
+			virtual sal_Bool SAL_CALL wasNull(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getString( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL getBoolean( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int8 SAL_CALL getByte( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int16 SAL_CALL getShort( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getInt( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int64 SAL_CALL getLong( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual float SAL_CALL getFloat( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual double SAL_CALL getDouble( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Sequence< sal_Int8 > SAL_CALL getBytes( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::util::Date SAL_CALL getDate( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::util::Time SAL_CALL getTime( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::util::DateTime SAL_CALL getTimestamp( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream > SAL_CALL getBinaryStream( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream > SAL_CALL getCharacterStream( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Any SAL_CALL getObject( sal_Int32 columnIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess >& typeMap ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XRef > SAL_CALL getRef( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XBlob > SAL_CALL getBlob( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XClob > SAL_CALL getClob( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XArray > SAL_CALL getArray( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XResultSetMetaDataSupplier
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSetMetaData > SAL_CALL getMetaData(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XCancellable
+			virtual void SAL_CALL cancel(  ) throw(::com::sun::star::uno::RuntimeException);
+
+			// XCloseable
+			virtual void SAL_CALL close(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XWarningsSupplier
+			virtual ::com::sun::star::uno::Any SAL_CALL getWarnings(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL clearWarnings(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XResultSetUpdate
+			virtual void SAL_CALL insertRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL deleteRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL cancelRowUpdates(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL moveToInsertRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL moveToCurrentRow(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			// XRowUpdate
+			virtual void SAL_CALL updateNull( sal_Int32 columnIndex ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateBoolean( sal_Int32 columnIndex, sal_Bool x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateByte( sal_Int32 columnIndex, sal_Int8 x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateShort( sal_Int32 columnIndex, sal_Int16 x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateInt( sal_Int32 columnIndex, sal_Int32 x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateLong( sal_Int32 columnIndex, sal_Int64 x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateFloat( sal_Int32 columnIndex, float x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateDouble( sal_Int32 columnIndex, double x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateString( sal_Int32 columnIndex, const ::rtl::OUString& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateBytes( sal_Int32 columnIndex, const ::com::sun::star::uno::Sequence< sal_Int8 >& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateDate( sal_Int32 columnIndex, const ::com::sun::star::util::Date& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateTime( sal_Int32 columnIndex, const ::com::sun::star::util::Time& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateTimestamp( sal_Int32 columnIndex, const ::com::sun::star::util::DateTime& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateBinaryStream( sal_Int32 columnIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& x, sal_Int32 length ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateCharacterStream( sal_Int32 columnIndex, const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& x, sal_Int32 length ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateObject( sal_Int32 columnIndex, const ::com::sun::star::uno::Any& x ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL updateNumericObject( sal_Int32 columnIndex, const ::com::sun::star::uno::Any& x, sal_Int32 scale ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XColumnLocate
+			virtual sal_Int32 SAL_CALL findColumn( const ::rtl::OUString& columnName ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XRowLocate
+			virtual ::com::sun::star::uno::Any SAL_CALL getBookmark(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL moveToBookmark( const ::com::sun::star::uno::Any& bookmark ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL moveRelativeToBookmark( const ::com::sun::star::uno::Any& bookmark, sal_Int32 rows ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL compareBookmarks( const ::com::sun::star::uno::Any& first, const ::com::sun::star::uno::Any& second ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL hasOrderedBookmarks(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL hashBookmark( const ::com::sun::star::uno::Any& bookmark ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XDeleteRows
+			virtual ::com::sun::star::uno::Sequence< sal_Int32 > SAL_CALL deleteRows( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& rows ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_RESULTSET_HXX_
diff -urN connectivity/source/drivers/kab/KResultSetMetaData.cxx connectivity/source/drivers/kab/KResultSetMetaData.cxx
--- connectivity/source/drivers/kab/KResultSetMetaData.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KResultSetMetaData.cxx	2005-08-17 16:13:47.000000000 +0000
@@ -0,0 +1,238 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KResultSetMetaData.hxx"
+#include <kabc/field.h>
+
+#ifndef _DBHELPER_DBEXCEPTION_HXX_
+#include <connectivity/dbexception.hxx>
+#endif
+
+using namespace connectivity::kab;
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::sdbc;
+
+KabResultSetMetaData::KabResultSetMetaData(KabConnection* _pConnection)
+	: m_pConnection(_pConnection),
+	  m_aKabFields()
+{
+}
+// -------------------------------------------------------------------------
+KabResultSetMetaData::~KabResultSetMetaData()
+{
+}
+// -------------------------------------------------------------------------
+sal_uInt32 SAL_CALL KabResultSetMetaData::findKabField(const ::rtl::OUString& columnName) throw(SQLException)
+{
+	// search the KDE address book field number of a given column name
+
+	::KABC::Field::List aFields = ::KABC::Field::allFields();
+	::KABC::Field::List::iterator aField;
+	sal_uInt32 nResult;
+
+	for (	aField = aFields.begin(), nResult = 0;
+			aField != aFields.end();
+			++aField, ++nResult)
+	{
+		QString aQtName((*aField)->label());
+		::rtl::OUString aName((const sal_Unicode *) aQtName.ucs2());
+
+		if (aName == columnName)
+			return nResult;
+	}
+
+	::dbtools::throwGenericSQLException(
+		::rtl::OUString::createFromAscii("Invalid column name: ") + columnName,
+		NULL);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabResultSetMetaData::setKabFields(const ::vos::ORef<connectivity::OSQLColumns> &xColumns) throw(SQLException)
+{
+	OSQLColumns::const_iterator aIter;
+	static const ::rtl::OUString aName(::rtl::OUString::createFromAscii("Name"));
+
+	for (aIter = xColumns->begin(); aIter != xColumns->end(); ++aIter)
+	{
+		::rtl::OUString aFieldName;
+		sal_uInt32 nFieldNumber;
+
+		(*aIter)->getPropertyValue(aName) >>= aFieldName;
+		nFieldNumber = findKabField(aFieldName);
+		m_aKabFields.push_back(nFieldNumber);
+	}
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSetMetaData::getColumnDisplaySize(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return 50;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSetMetaData::getColumnType(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return DataType::CHAR;
+// KDE address book might support other types
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSetMetaData::getColumnCount() throw(SQLException, RuntimeException)
+{
+	return m_aKabFields.size();
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSetMetaData::isCaseSensitive(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabResultSetMetaData::getSchemaName(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabResultSetMetaData::getColumnName(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	::KABC::Field::List aFields = ::KABC::Field::allFields();
+	sal_uInt32 nFieldNumber = m_aKabFields[column - 1];
+	QString aQtName(aFields[nFieldNumber]->label());
+	::rtl::OUString aName((const sal_Unicode *) aQtName.ucs2());
+
+	return aName;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabResultSetMetaData::getTableName(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	static const ::rtl::OUString aAddresses(::rtl::OUString::createFromAscii("addresses"));
+
+	return aAddresses;
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabResultSetMetaData::getCatalogName(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabResultSetMetaData::getColumnTypeName(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabResultSetMetaData::getColumnLabel(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+::rtl::OUString SAL_CALL KabResultSetMetaData::getColumnServiceName(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return ::rtl::OUString();
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSetMetaData::isCurrency(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSetMetaData::isAutoIncrement(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSetMetaData::isSigned(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSetMetaData::getPrecision(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return 0;
+}
+// -----------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSetMetaData::getScale(sal_Int32 column) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException)
+{
+	return 0;
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabResultSetMetaData::isNullable(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return (sal_Int32) sal_True;
+// KDE address book currently does not use NULL values.
+// But it might do it someday
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSetMetaData::isSearchable(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSetMetaData::isReadOnly(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return sal_True;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSetMetaData::isDefinitelyWritable(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabResultSetMetaData::isWritable(sal_Int32 column) throw(SQLException, RuntimeException)
+{
+	return sal_False;
+}
+// -------------------------------------------------------------------------
diff -urN connectivity/source/drivers/kab/KResultSetMetaData.hxx connectivity/source/drivers/kab/KResultSetMetaData.hxx
--- connectivity/source/drivers/kab/KResultSetMetaData.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KResultSetMetaData.hxx	2005-08-11 10:52:22.000000000 +0000
@@ -0,0 +1,136 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_RESULTSETMETADATA_HXX_
+#define _CONNECTIVITY_KAB_RESULTSETMETADATA_HXX_
+
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+
+#ifndef _CONNECTIVITY_PARSE_SQLITERATOR_HXX_
+#include "connectivity/sqliterator.hxx"
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XRESULTSETMETADATA_HPP_
+#include <com/sun/star/sdbc/XResultSetMetaData.hpp>
+#endif
+#ifndef _CPPUHELPER_IMPLBASE1_HXX_
+#include <cppuhelper/implbase1.hxx>
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+		/*
+		**	KabResultSetMetaData
+		*/
+		typedef ::cppu::WeakImplHelper1< ::com::sun::star::sdbc::XResultSetMetaData>   KabResultSetMetaData_BASE;
+
+		class KabResultSetMetaData : public KabResultSetMetaData_BASE
+		{
+			KabConnection*				m_pConnection;
+			::std::vector<sal_Int32>	m_aKabFields;	// for each selected column, contains the number
+														//  of the corresponding KAddressBook field
+
+		protected:
+			virtual ~KabResultSetMetaData();
+
+		public:
+			KabResultSetMetaData(KabConnection* _pConnection);
+
+			// avoid ambigous cast error from the compiler
+			inline operator ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSetMetaData > () throw()
+			{ return this; }
+
+			static sal_uInt32 SAL_CALL findKabField(
+					const ::rtl::OUString& columnName) throw(::com::sun::star::sdbc::SQLException);
+			void SAL_CALL setKabFields(
+				const ::vos::ORef<connectivity::OSQLColumns> &xColumns) throw(::com::sun::star::sdbc::SQLException);
+			inline sal_uInt32 fieldAtColumn(sal_Int32 columnIndex) const
+			{ return m_aKabFields[columnIndex - 1]; }
+
+			virtual sal_Int32 SAL_CALL getColumnCount(  ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isAutoIncrement( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isCaseSensitive( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isSearchable( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isCurrency( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL isNullable( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isSigned( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getColumnDisplaySize( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getColumnLabel( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getColumnName( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getSchemaName( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getPrecision( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getScale( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getTableName( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getCatalogName( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getColumnType( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getColumnTypeName( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isReadOnly( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isWritable( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL isDefinitelyWritable( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::rtl::OUString SAL_CALL getColumnServiceName( sal_Int32 column ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_RESULTSETMETADATA_HXX_
diff -urN connectivity/source/drivers/kab/KServices.cxx connectivity/source/drivers/kab/KServices.cxx
--- connectivity/source/drivers/kab/KServices.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KServices.cxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,213 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KDriver.hxx"
+
+#ifndef _CPPUHELPER_FACTORY_HXX_
+#include <cppuhelper/factory.hxx>
+#endif
+#ifndef _OSL_DIAGNOSE_H_
+#include <osl/diagnose.h>
+#endif
+
+using namespace connectivity::kab;
+using ::rtl::OUString;
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::uno::Sequence;
+using ::com::sun::star::registry::XRegistryKey;
+using ::com::sun::star::lang::XSingleServiceFactory;
+using ::com::sun::star::lang::XMultiServiceFactory;
+
+typedef Reference< XSingleServiceFactory > (SAL_CALL *createFactoryFunc)
+		(
+			const Reference< XMultiServiceFactory > & rServiceManager,
+			const OUString & rComponentName, 
+			::cppu::ComponentInstantiation pCreateFunction,
+			const Sequence< OUString > & rServiceNames,
+			rtl_ModuleCount* _pTemp
+		);
+
+//***************************************************************************************
+//
+// The following C Api must be provided!
+// It consists in three functions that must be exported by the module
+//
+
+//---------------------------------------------------------------------------------------
+void REGISTER_PROVIDER(
+		const OUString& aServiceImplName, 
+		const Sequence< OUString>& Services, 
+		const Reference< ::com::sun::star::registry::XRegistryKey > & xKey)
+{
+	OUString aMainKeyName;
+	aMainKeyName = OUString::createFromAscii("/");
+	aMainKeyName += aServiceImplName;
+	aMainKeyName += OUString::createFromAscii("/UNO/SERVICES");
+
+	Reference< ::com::sun::star::registry::XRegistryKey >  xNewKey( xKey->createKey(aMainKeyName) );
+	OSL_ENSURE(xNewKey.is(), "KAB::component_writeInfo : could not create a registry key !");
+
+	for (sal_uInt32 i=0; i<Services.getLength(); ++i)
+		xNewKey->createKey(Services[i]);
+}
+
+
+//---------------------------------------------------------------------------------------
+struct ProviderRequest
+{
+	Reference< XSingleServiceFactory > xRet;
+	Reference< XMultiServiceFactory > const xServiceManager;
+	OUString const sImplementationName;
+
+	ProviderRequest(
+		void* pServiceManager,
+		sal_Char const* pImplementationName
+	)
+	: xServiceManager(reinterpret_cast<XMultiServiceFactory*>(pServiceManager))
+	, sImplementationName(OUString::createFromAscii(pImplementationName))
+	{
+	}
+
+	inline
+	sal_Bool CREATE_PROVIDER(
+				const OUString& Implname, 
+				const Sequence< OUString > & Services, 
+				::cppu::ComponentInstantiation Factory,
+				createFactoryFunc creator
+			)
+	{
+		if (!xRet.is() && (Implname == sImplementationName))
+		try																							
+		{																								
+			xRet = creator( xServiceManager, sImplementationName,Factory, Services,0);	
+		}
+		catch(...)
+		{
+		}
+		return xRet.is();
+	}
+	
+	void* getProvider() const { return xRet.get(); }
+};
+
+//---------------------------------------------------------------------------------------
+
+extern "C" void SAL_CALL component_getImplementationEnvironment(
+				const sal_Char	**ppEnvTypeName,
+				uno_Environment	**ppEnv
+			)
+{
+	*ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;
+}
+
+//---------------------------------------------------------------------------------------
+extern "C" sal_Bool SAL_CALL component_writeInfo(
+				void* pServiceManager,
+				void* pRegistryKey
+			)
+{
+	if (pRegistryKey) 
+	try 
+	{
+		Reference< ::com::sun::star::registry::XRegistryKey > xKey(reinterpret_cast< ::com::sun::star::registry::XRegistryKey*>(pRegistryKey));
+
+		REGISTER_PROVIDER(
+			KabDriver::getImplementationName_Static(), 
+			KabDriver::getSupportedServiceNames_Static(), xKey);		
+
+		return sal_True;
+	}
+	catch (::com::sun::star::registry::InvalidRegistryException& )
+	{
+		OSL_ENSURE(sal_False, "KAB::component_writeInfo : could not create a registry key ! ## InvalidRegistryException !");
+	}
+
+	return sal_False;
+}
+
+//---------------------------------------------------------------------------------------
+extern "C" void* SAL_CALL component_getFactory(
+					const sal_Char* pImplementationName,
+					void* pServiceManager,
+					void* pRegistryKey)
+{
+	void* pRet = 0;
+	if (pServiceManager)
+	{
+		ProviderRequest aReq(pServiceManager,pImplementationName);
+
+		aReq.CREATE_PROVIDER(
+			KabDriver::getImplementationName_Static(), 
+			KabDriver::getSupportedServiceNames_Static(),
+			KabDriver_CreateInstance,
+			::cppu::createSingleFactory) 
+		;
+
+		if (aReq.xRet.is())
+			aReq.xRet->acquire();
+
+		pRet = aReq.getProvider();
+	}
+
+	return pRet;
+};
+
+
diff -urN connectivity/source/drivers/kab/KStatement.cxx connectivity/source/drivers/kab/KStatement.cxx
--- connectivity/source/drivers/kab/KStatement.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KStatement.cxx	2005-08-20 10:31:20.000000000 +0000
@@ -0,0 +1,579 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KStatement.hxx"
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_DRIVER_HXX_
+#include "KDriver.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_RESULTSET_HXX_
+#include "KResultSet.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_RESULTSETMETADATA_HXX_
+#include "KResultSetMetaData.hxx"
+#endif
+
+#ifndef CONNECTIVITY_CONNECTION_HXX
+#include "TConnection.hxx"
+#endif
+#ifndef _DBHELPER_DBEXCEPTION_HXX_
+#include <connectivity/dbexception.hxx>
+#endif
+
+using namespace connectivity::kab;
+using namespace com::sun::star::uno;
+using namespace com::sun::star::lang;
+using namespace com::sun::star::beans;
+using namespace com::sun::star::sdbc;
+using namespace com::sun::star::sdbcx;
+using namespace com::sun::star::container;
+using namespace com::sun::star::io;
+using namespace com::sun::star::util;
+
+//------------------------------------------------------------------------------
+KabStatement_Base::KabStatement_Base(KabConnection* _pConnection ) 
+	: KabStatement_BASE(m_aMutex),
+	OPropertySetHelper(KabStatement_BASE::rBHelper),
+	rBHelper(KabStatement_BASE::rBHelper),
+	m_pParseTree(NULL),
+	m_aSQLIterator(_pConnection->createCatalog()->getTables(), _pConnection->getMetaData(), NULL),
+	m_aParser(_pConnection->getDriver()->getMSFactory()),
+	m_pConnection(_pConnection)
+{
+	m_pConnection->acquire();
+}
+// -----------------------------------------------------------------------------
+KabStatement_Base::~KabStatement_Base()
+{
+}
+// -----------------------------------------------------------------------------
+void KabStatement_Base::analyseWhereClause(const OSQLParseNode *pParseNode, KabResultSet *pResult) const throw(SQLException)
+{
+	if (pParseNode->count() == 3)
+	{
+		const OSQLParseNode *pLeft = pParseNode->getChild(0),
+		                    *pMiddle = pParseNode->getChild(1),
+		                    *pRight = pParseNode->getChild(2);
+
+		// WHERE ( ... ) ?
+		if (SQL_ISPUNCTUATION(pLeft, "(") && SQL_ISPUNCTUATION(pRight, ")"))
+		{
+		  	analyseWhereClause(pMiddle, pResult);
+			return;
+		}
+		else if (SQL_ISRULE(pParseNode, comparison_predicate))
+		{
+			// if WHERE condition is always false, there is no row in the result
+			if (pLeft->isToken() && pRight->isToken())
+			{
+				switch (pMiddle->getNodeType())
+				{
+					// WHERE 0 = 1 ?
+					case SQL_NODE_EQUAL:
+						if (pLeft->getTokenValue() == pRight->getTokenValue())
+							pResult->allKabAddressees();
+						return;
+
+					// WHERE 0 <> 1 ?
+					// (might not be correct SQL... don't care, handling anyway)
+					case SQL_NODE_NOTEQUAL:
+						if (pLeft->getTokenValue() != pRight->getTokenValue())
+							pResult->allKabAddressees();
+						return;
+				}
+			}
+			else if (SQL_ISRULE(pLeft, column_ref) && pRight->isToken())
+			{
+				::rtl::OUString aColumnName,
+				                aTableRange,
+				                aMatchString;
+
+				m_aSQLIterator.getColumnRange(pLeft, aColumnName, aTableRange);
+				aMatchString = pRight->getTokenValue();
+
+				switch (pMiddle->getNodeType())
+				{
+					// WHERE Name = 'Smith' ?
+					case SQL_NODE_EQUAL:
+						pResult->equalKabAddressees(aColumnName, aMatchString);
+						return;
+
+					// WHERE Name <> 'Jones' ?
+		 			case SQL_NODE_NOTEQUAL:
+						pResult->differentKabAddressees(aColumnName, aMatchString);
+						return;
+				}
+			}
+		}
+// To be continued: WHERE Name = 'Smith' AND "Given Name" = 'Peter'
+//					    etc...
+
+	}
+	else if (pParseNode->count() == 4)
+	{
+		const OSQLParseNode *pLeft = pParseNode->getChild(0),
+		                    *pMiddleLeft = pParseNode->getChild(1),
+		                    *pMiddleRight = pParseNode->getChild(2),
+		                    *pRight = pParseNode->getChild(3);
+
+		if (SQL_ISRULE(pParseNode, test_for_null))
+		{
+			if (SQL_ISRULE(pLeft, column_ref) &&
+                            SQL_ISTOKEN(pMiddleLeft, IS) &&
+                            SQL_ISTOKEN(pRight, NULL))
+			{
+				::rtl::OUString aColumnName,
+				                aTableRange;
+
+				m_aSQLIterator.getColumnRange(pLeft, aColumnName, aTableRange);
+
+				if (SQL_ISTOKEN(pMiddleRight, NOT))
+				{
+					// WHERE "Mobile Phone" IS NOT NULL ?
+					pResult->notNullKabAddressees(aColumnName);
+					return;
+				}
+				else
+				{
+					// WHERE "Mobile Phone" IS NULL ?
+					pResult->nullKabAddressees(aColumnName);
+					return;
+				}
+			}
+		}
+		else if (SQL_ISRULE(pParseNode, like_predicate))
+		{
+			// WHERE Name LIKE 'Sm%' ?
+			if (SQL_ISRULE(pLeft, column_ref) && pMiddleRight->getNodeType() == SQL_NODE_STRING)
+			{
+				::rtl::OUString aColumnName,
+				                aTableRange,
+				                aMatchString;
+
+				m_aSQLIterator.getColumnRange(pLeft, aColumnName, aTableRange);
+				aMatchString = pMiddleRight->getTokenValue();
+
+				pResult->similarKabAddressees(aColumnName, aMatchString);
+			}
+		}
+	}
+}
+//------------------------------------------------------------------------------
+sal_Bool KabStatement_Base::isTableKnown(KabResultSet *pResult) const
+{
+	// can handle requests like        SELECT * FROM addresses addresses
+	// but cannot handle requests like SELECT * FROM addresses persons
+	if (m_aSQLIterator.getTables().size() != 1)
+		return sal_False;
+
+	if (m_aSQLIterator.getTables().begin()->first != pResult->getMetaData()->getTableName(0))
+		return sal_False;
+
+	return sal_True;
+}
+//------------------------------------------------------------------------------
+void KabStatement_Base::setKabFields(KabResultSet *pResult) const throw(SQLException)
+{
+	::vos::ORef<connectivity::OSQLColumns> xColumns;	// selected columns
+	KabResultSetMetaData *pMeta;				// meta information - holds the list of KAddressBook fields
+
+	xColumns = m_aSQLIterator.getSelectColumns();
+	if (!xColumns.isValid())
+	{
+		::dbtools::throwGenericSQLException(
+			::rtl::OUString::createFromAscii("Invalid selection of columns"),
+			NULL);
+	}
+	pMeta = (KabResultSetMetaData *) pResult->getMetaData().get();
+	pMeta->setKabFields(xColumns);
+}
+// -------------------------------------------------------------------------
+void KabStatement_Base::selectAddressees(KabResultSet *pResult) const throw(SQLException)
+{
+	const OSQLParseNode *pParseNode;
+
+	pParseNode = m_aSQLIterator.getWhereTree();
+	if (pParseNode != NULL)
+	{
+		if (SQL_ISRULE(pParseNode, where_clause))
+		{
+			pParseNode = pParseNode->getChild(1);
+			analyseWhereClause(pParseNode, pResult);
+			return;
+		}
+	}
+
+	// no where clause: get all rows
+	pResult->allKabAddressees();
+}
+// -------------------------------------------------------------------------
+void KabStatement_Base::disposeResultSet()
+{
+	// free the cursor if alive
+	Reference< XComponent > xComp(m_xResultSet.get(), UNO_QUERY);
+	if (xComp.is())
+		xComp->dispose();
+	m_xResultSet = Reference< XResultSet>();
+}
+//------------------------------------------------------------------------------
+void KabStatement_BASE2::disposing()
+{
+	::osl::MutexGuard aGuard(m_aMutex);
+
+	disposeResultSet();
+
+	if (m_pConnection)
+		m_pConnection->release();
+	m_pConnection = NULL;
+
+	dispose_ChildImpl();
+	KabStatement_Base::disposing();
+}
+//-----------------------------------------------------------------------------
+void SAL_CALL KabStatement_BASE2::release() throw()
+{
+	relase_ChildImpl();
+}
+//-----------------------------------------------------------------------------
+Any SAL_CALL KabStatement_Base::queryInterface( const Type & rType ) throw(RuntimeException)
+{
+	Any aRet = KabStatement_BASE::queryInterface(rType);
+	if (!aRet.hasValue())
+		aRet = OPropertySetHelper::queryInterface(rType);
+	return aRet;
+}
+// -------------------------------------------------------------------------
+Sequence< Type > SAL_CALL KabStatement_Base::getTypes(  ) throw(RuntimeException)
+{
+	::cppu::OTypeCollection aTypes(	::getCppuType( (const Reference< XMultiPropertySet > *)0 ),
+									::getCppuType( (const Reference< XFastPropertySet > *)0 ),
+									::getCppuType( (const Reference< XPropertySet > *)0 ));
+
+	return comphelper::concatSequences(aTypes.getTypes(),KabStatement_BASE::getTypes());
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabStatement_Base::cancel(  ) throw(RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+	// cancel the current sql statement
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabStatement_Base::close(  ) throw(SQLException, RuntimeException)
+{
+	{
+		::osl::MutexGuard aGuard( m_aMutex );
+		checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+			
+	}
+	dispose();
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabStatement::clearBatch(  ) throw(SQLException, RuntimeException)
+{
+	// if you support batches clear it here
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabStatement_Base::execute(
+		const ::rtl::OUString& sql ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+
+	Reference< XResultSet > xRS = executeQuery(sql);
+
+	return xRS.is();
+}
+// -------------------------------------------------------------------------
+Reference< XResultSet > SAL_CALL KabStatement_Base::executeQuery(
+		const ::rtl::OUString& sql ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+printf("Request: ");
+const unsigned short *p = sql.getStr();
+while (*p) putchar(*p++);
+putchar('\n');
+
+	KabResultSet* pResult = new KabResultSet(this);
+	Reference< XResultSet > xRS = pResult;
+	::rtl::OUString aErr;
+
+	m_pParseTree = m_aParser.parseTree(aErr, sql);
+// aErr is currently ignored
+	m_aSQLIterator.setParseTree(m_pParseTree);
+	m_aSQLIterator.traverseAll();
+	switch (m_aSQLIterator.getStatementType())
+	{
+		case SQL_STATEMENT_SELECT:
+			if (isTableKnown(pResult))		// FROM which table ?
+			{
+				setKabFields(pResult);		// SELECT which columns ?
+				selectAddressees(pResult);	// WHERE which condition ?
+// To be continued: ORDER BY "Name",
+//                  DISTINCT
+//				    etc...
+			}
+			break;
+
+		default:
+// To be continued: UPDATE
+//		    DELETE
+//		    etc...
+			::dbtools::throwGenericSQLException(
+				::rtl::OUString::createFromAscii("Unsupported SQL statement"),
+				NULL);
+	}
+
+	m_xResultSet = xRS; // we need a reference to it for later use
+	return xRS;
+}
+// -------------------------------------------------------------------------
+Reference< XConnection > SAL_CALL KabStatement_Base::getConnection(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+	// just return our connection here
+	return (Reference< XConnection >) m_pConnection;
+}
+// -----------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabStatement_Base::getUpdateCount(  ) throw(SQLException, RuntimeException)
+{
+	return 0;
+}
+// -------------------------------------------------------------------------
+Any SAL_CALL KabStatement::queryInterface( const Type & rType ) throw(RuntimeException)
+{
+	Any aRet = ::cppu::queryInterface(rType,static_cast< XBatchExecution*> (this));
+	if (!aRet.hasValue())
+		aRet = KabStatement_Base::queryInterface(rType);
+	return aRet;
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabStatement::addBatch( const ::rtl::OUString& sql ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+	m_aBatchList.push_back(sql);
+}
+// -------------------------------------------------------------------------
+Sequence< sal_Int32 > SAL_CALL KabStatement::executeBatch(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+	return Sequence< sal_Int32 >();
+}
+// -------------------------------------------------------------------------
+sal_Int32 SAL_CALL KabStatement_Base::executeUpdate( const ::rtl::OUString& sql ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+	// the return values gives information about how many rows are affected by executing the sql statement		
+	return 0;
+}
+// -------------------------------------------------------------------------
+
+Reference< XResultSet > SAL_CALL KabStatement_Base::getResultSet(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+	// return our saved result set
+	return m_xResultSet;
+}
+// -------------------------------------------------------------------------
+sal_Bool SAL_CALL KabStatement_Base::getMoreResults(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+
+	// this driver handles no more than one result set
+	return sal_False;
+}
+// -------------------------------------------------------------------------
+Any SAL_CALL KabStatement_Base::getWarnings(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+
+	return makeAny(m_aLastWarning);
+}
+// -------------------------------------------------------------------------
+void SAL_CALL KabStatement_Base::clearWarnings(  ) throw(SQLException, RuntimeException)
+{
+	::osl::MutexGuard aGuard( m_aMutex );
+	checkDisposed(KabStatement_BASE::rBHelper.bDisposed);
+		
+
+	m_aLastWarning = SQLWarning();
+}
+// -------------------------------------------------------------------------
+::cppu::IPropertyArrayHelper* KabStatement_Base::createArrayHelper( ) const
+{
+	// this properties are defined by the service statement
+	// they must be in alphabetic order
+	Sequence< Property > aProps(10);
+	Property* pProperties = aProps.getArray();
+	sal_Int32 nPos = 0;
+	DECL_PROP0(CURSORNAME,	::rtl::OUString);
+	DECL_BOOL_PROP0(ESCAPEPROCESSING);
+	DECL_PROP0(FETCHDIRECTION,sal_Int32);
+	DECL_PROP0(FETCHSIZE,	sal_Int32);
+	DECL_PROP0(MAXFIELDSIZE,sal_Int32);
+	DECL_PROP0(MAXROWS,		sal_Int32);
+	DECL_PROP0(QUERYTIMEOUT,sal_Int32);
+	DECL_PROP0(RESULTSETCONCURRENCY,sal_Int32);
+	DECL_PROP0(RESULTSETTYPE,sal_Int32);
+	DECL_BOOL_PROP0(USEBOOKMARKS);
+
+	return new ::cppu::OPropertyArrayHelper(aProps);
+}
+// -------------------------------------------------------------------------
+::cppu::IPropertyArrayHelper & KabStatement_Base::getInfoHelper()
+{
+	return *const_cast<KabStatement_Base*>(this)->getArrayHelper();
+}
+// -------------------------------------------------------------------------
+sal_Bool KabStatement_Base::convertFastPropertyValue(
+		Any & rConvertedValue,
+		Any & rOldValue,
+		sal_Int32 nHandle,
+		const Any& rValue) throw (::com::sun::star::lang::IllegalArgumentException)
+{
+	sal_Bool bConverted = sal_False;
+	// here we have to try to convert 
+	return bConverted;
+}
+// -------------------------------------------------------------------------
+void KabStatement_Base::setFastPropertyValue_NoBroadcast(sal_Int32 nHandle,const Any& rValue) throw (Exception)
+{
+	// set the value to whatever is nescessary
+	switch (nHandle)
+	{
+		case PROPERTY_ID_QUERYTIMEOUT:
+		case PROPERTY_ID_MAXFIELDSIZE:
+		case PROPERTY_ID_MAXROWS:
+		case PROPERTY_ID_CURSORNAME:
+		case PROPERTY_ID_RESULTSETCONCURRENCY:
+		case PROPERTY_ID_RESULTSETTYPE:
+		case PROPERTY_ID_FETCHDIRECTION:
+		case PROPERTY_ID_FETCHSIZE:
+		case PROPERTY_ID_ESCAPEPROCESSING:
+		case PROPERTY_ID_USEBOOKMARKS:
+		default:
+			;
+	}
+}
+// -------------------------------------------------------------------------
+void KabStatement_Base::getFastPropertyValue(Any& rValue,sal_Int32 nHandle) const
+{
+	switch (nHandle)
+	{
+		case PROPERTY_ID_QUERYTIMEOUT:
+		case PROPERTY_ID_MAXFIELDSIZE:
+		case PROPERTY_ID_MAXROWS:
+		case PROPERTY_ID_CURSORNAME:
+		case PROPERTY_ID_RESULTSETCONCURRENCY:
+		case PROPERTY_ID_RESULTSETTYPE:
+		case PROPERTY_ID_FETCHDIRECTION:
+		case PROPERTY_ID_FETCHSIZE:
+		case PROPERTY_ID_ESCAPEPROCESSING:
+		case PROPERTY_ID_USEBOOKMARKS:
+		default:
+			;
+	}
+}
+// -------------------------------------------------------------------------
+IMPLEMENT_SERVICE_INFO(KabStatement,"com.sun.star.sdbcx.KabStatement","com.sun.star.sdbc.Statement");
+// -----------------------------------------------------------------------------
+void SAL_CALL KabStatement_Base::acquire() throw()
+{
+	KabStatement_BASE::acquire();
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL KabStatement_Base::release() throw()
+{
+	KabStatement_BASE::release();
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL KabStatement::acquire() throw()
+{
+	KabStatement_BASE2::acquire();
+}
+// -----------------------------------------------------------------------------
+void SAL_CALL KabStatement::release() throw()
+{
+	KabStatement_BASE2::release();
+}
+// -----------------------------------------------------------------------------
+Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL KabStatement_Base::getPropertySetInfo(  ) throw(RuntimeException)
+{
+	return ::cppu::OPropertySetHelper::createPropertySetInfo(getInfoHelper());
+}
+// -----------------------------------------------------------------------------
diff -urN connectivity/source/drivers/kab/KStatement.hxx connectivity/source/drivers/kab/KStatement.hxx
--- connectivity/source/drivers/kab/KStatement.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KStatement.hxx	2005-08-12 07:27:43.000000000 +0000
@@ -0,0 +1,260 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_STATEMENT_HXX_
+#define _CONNECTIVITY_KAB_STATEMENT_HXX_
+
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+#include <list>
+
+#ifndef _CONNECTIVITY_PARSE_SQLITERATOR_HXX_
+#include "connectivity/sqliterator.hxx"
+#endif
+#ifndef _CONNECTIVITY_PARSE_SQLPARSE_HXX_
+#include "connectivity/sqlparse.hxx"
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XSTATEMENT_HPP_
+#include <com/sun/star/sdbc/XStatement.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XMULTIPLERESULTS_HPP_
+#include <com/sun/star/sdbc/XMultipleResults.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XBATCHEXECUTION_HPP_
+#include <com/sun/star/sdbc/XBatchExecution.hpp>
+#endif
+#ifndef _COM_SUN_STAR_UTIL_XCANCELLABLE_HPP_
+#include <com/sun/star/util/XCancellable.hpp>
+#endif
+#ifndef _CPPUHELPER_COMPBASE5_HXX_
+#include <cppuhelper/compbase5.hxx>
+#endif
+#ifndef _COMPHELPER_PROPERTY_ARRAY_HELPER_HXX_
+#include <comphelper/proparrhlp.hxx>
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+
+        typedef ::cppu::WeakComponentImplHelper5<	::com::sun::star::sdbc::XStatement,
+                                                    ::com::sun::star::sdbc::XWarningsSupplier,
+                                                    ::com::sun::star::util::XCancellable,
+                                                    ::com::sun::star::sdbc::XCloseable,
+                                                    ::com::sun::star::sdbc::XMultipleResults> KabStatement_BASE;
+
+		//**************************************************************
+		// Class KabStatement_Base
+		// is a base class for the normal statement and for the prepared statement
+		//**************************************************************
+		class KabStatement_Base		:	public comphelper::OBaseMutex,
+										public	KabStatement_BASE,
+										public	::cppu::OPropertySetHelper,
+										public	comphelper::OPropertyArrayUsageHelper<KabStatement_Base>
+
+		{
+			::com::sun::star::sdbc::SQLWarning	m_aLastWarning;
+
+		protected:
+			::com::sun::star::uno::WeakReference< ::com::sun::star::sdbc::XResultSet >
+												m_xResultSet;   // The last ResultSet created for this Statement
+			::std::list< ::rtl::OUString>		m_aBatchList;
+			connectivity::OSQLParser			m_aParser;
+			connectivity::OSQLParseTreeIterator	m_aSQLIterator;
+			connectivity::OSQLParseNode*		m_pParseTree;
+			KabConnection*						m_pConnection;	// The owning Connection object
+
+		protected:
+			void analyseWhereClause(
+				const OSQLParseNode *pParseNode,
+				class KabResultSet *pResult) const throw(::com::sun::star::sdbc::SQLException);
+			sal_Bool isTableKnown(class KabResultSet *pResult) const;
+			void setKabFields(class KabResultSet *pResult) const throw(::com::sun::star::sdbc::SQLException);
+			void selectAddressees(KabResultSet *pResult) const throw(::com::sun::star::sdbc::SQLException);
+			void disposeResultSet();
+
+			// OPropertyArrayUsageHelper
+			virtual ::cppu::IPropertyArrayHelper* createArrayHelper() const;
+
+			// OPropertySetHelper
+			virtual ::cppu::IPropertyArrayHelper & SAL_CALL getInfoHelper();
+			virtual sal_Bool SAL_CALL convertFastPropertyValue(
+					::com::sun::star::uno::Any & rConvertedValue,
+					::com::sun::star::uno::Any & rOldValue,
+					sal_Int32 nHandle,
+					const ::com::sun::star::uno::Any& rValue) throw (::com::sun::star::lang::IllegalArgumentException);
+			virtual void SAL_CALL setFastPropertyValue_NoBroadcast(
+					sal_Int32 nHandle,
+					const ::com::sun::star::uno::Any& rValue) throw (::com::sun::star::uno::Exception);
+			virtual void SAL_CALL getFastPropertyValue(
+					::com::sun::star::uno::Any& rValue,
+					sal_Int32 nHandle) const;
+			virtual ~KabStatement_Base();
+
+		public:
+			::cppu::OBroadcastHelper& rBHelper;
+
+			KabStatement_Base(KabConnection *_pConnection);
+			using KabStatement_BASE::operator ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >;
+
+			// OComponentHelper
+			virtual void SAL_CALL disposing(void){KabStatement_BASE::disposing();}
+
+			// XInterface
+			virtual void SAL_CALL release() throw();
+			virtual void SAL_CALL acquire() throw();
+			virtual ::com::sun::star::uno::Any SAL_CALL queryInterface(
+					const ::com::sun::star::uno::Type & rType
+					) throw(::com::sun::star::uno::RuntimeException);
+
+			// XTypeProvider
+			virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type > SAL_CALL getTypes(
+					) throw(::com::sun::star::uno::RuntimeException);
+
+			// XPropertySet
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(
+					) throw(::com::sun::star::uno::RuntimeException);
+
+			// XStatement
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL executeQuery(
+					const ::rtl::OUString& sql ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL executeUpdate(
+					 const ::rtl::OUString& sql ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL execute(
+					const ::rtl::OUString& sql ) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XConnection > SAL_CALL getConnection(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XWarningsSupplier
+			virtual ::com::sun::star::uno::Any SAL_CALL getWarnings(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL clearWarnings(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XCancellable
+			virtual void SAL_CALL cancel(
+					) throw(::com::sun::star::uno::RuntimeException);
+
+			// XCloseable
+			virtual void SAL_CALL close(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// XMultipleResults
+			virtual ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet > SAL_CALL getResultSet(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Int32 SAL_CALL getUpdateCount(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual sal_Bool SAL_CALL getMoreResults(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+
+			// other methods
+			inline KabConnection* getOwnConnection() const { return m_pConnection; }
+		};
+
+		class KabStatement_BASE2 : public KabStatement_Base,
+								   public OSubComponent<KabStatement_BASE2, KabStatement_BASE>
+
+		{
+			friend class OSubComponent<KabStatement_BASE2, KabStatement_BASE>;
+
+		public:
+			KabStatement_BASE2(KabConnection* _pConnection) :
+					KabStatement_Base(_pConnection ),
+					OSubComponent<KabStatement_BASE2, KabStatement_BASE>((::cppu::OWeakObject*) _pConnection, this)
+					{ }
+
+			// OComponentHelper
+			virtual void SAL_CALL disposing(void);
+
+			// XInterface
+			virtual void SAL_CALL release() throw();
+		};
+
+		class KabStatement : public KabStatement_BASE2,
+                             public ::com::sun::star::sdbc::XBatchExecution,
+                             public ::com::sun::star::lang::XServiceInfo
+		{
+		protected:
+			virtual ~KabStatement() { }
+
+		public:
+			KabStatement( KabConnection* _pConnection) : KabStatement_BASE2(_pConnection) { }
+			DECLARE_SERVICE_INFO();
+
+			virtual ::com::sun::star::uno::Any SAL_CALL queryInterface(
+					const ::com::sun::star::uno::Type& rType) throw(::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL acquire() throw();
+			virtual void SAL_CALL release() throw();
+
+			// XBatchExecution
+			virtual void SAL_CALL addBatch(
+					const ::rtl::OUString& sql) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual void SAL_CALL clearBatch(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+			virtual ::com::sun::star::uno::Sequence< sal_Int32 > SAL_CALL executeBatch(
+					) throw(::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException);
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_STATEMENT_HXX_
diff -urN connectivity/source/drivers/kab/KTable.cxx connectivity/source/drivers/kab/KTable.cxx
--- connectivity/source/drivers/kab/KTable.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KTable.cxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,161 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KTable.hxx"
+#ifndef _CONNECTIVITY_KAB_TABLES_HXX_
+#include "KTables.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_COLUMNS_HXX_
+#include "KColumns.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_CATALOG_HXX_
+#include "KCatalog.hxx"
+#endif
+
+using namespace connectivity::kab;
+using namespace connectivity;
+using namespace ::comphelper;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::beans;
+using namespace ::com::sun::star::sdbcx;
+using namespace ::com::sun::star::sdbc;
+using namespace ::com::sun::star::container;
+using namespace ::com::sun::star::lang;
+
+// -------------------------------------------------------------------------
+KabTable::KabTable( sdbcx::OCollection* _pTables, KabConnection* _pConnection) 
+	: KabTable_TYPEDEF(_pTables, sal_True),
+	m_pConnection(_pConnection)
+{
+	construct();
+}
+// -------------------------------------------------------------------------
+KabTable::KabTable( sdbcx::OCollection* _pTables,
+	            KabConnection* _pConnection,
+	            const ::rtl::OUString& _Name,
+	            const ::rtl::OUString& _Type,
+	            const ::rtl::OUString& _Description ,
+	            const ::rtl::OUString& _SchemaName,
+	            const ::rtl::OUString& _CatalogName
+	            ) : KabTable_TYPEDEF(_pTables,sal_True,
+	                              _Name,
+	                              _Type,
+	                              _Description,
+	                              _SchemaName,
+	                              _CatalogName),
+	                m_pConnection(_pConnection)
+{
+	construct();
+}
+// -------------------------------------------------------------------------
+void KabTable::refreshColumns()
+{
+	TStringVector aVector;
+
+	if (!isNew())
+	{
+	    Reference< XResultSet > xResult = m_pConnection->getMetaData()->getColumns(
+				Any(),
+				m_SchemaName,
+				m_Name,
+				::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("%")));
+
+	    if (xResult.is())
+	    {
+	        Reference< XRow > xRow(xResult, UNO_QUERY);
+	        while (xResult->next())
+				aVector.push_back(xRow->getString(4));
+	    }
+	}
+
+	if (m_pColumns)
+	    m_pColumns->reFill(aVector);
+	else
+	    m_pColumns  = new KabColumns(this,m_aMutex,aVector);
+}
+//--------------------------------------------------------------------------
+Sequence< sal_Int8 > KabTable::getUnoTunnelImplementationId()
+{
+	static ::cppu::OImplementationId * pId = 0;
+
+	if (! pId)
+	{
+	    ::osl::MutexGuard aGuard( ::osl::Mutex::getGlobalMutex() );
+	    if (! pId)
+	    {
+	        static ::cppu::OImplementationId aId;
+	        pId = &aId;
+	    }
+	}
+	return pId->getImplementationId();
+}
+
+// com::sun::star::lang::XUnoTunnel
+//------------------------------------------------------------------
+sal_Int64 KabTable::getSomething( const Sequence< sal_Int8 > & rId ) throw (RuntimeException)
+{
+	return
+		(rId.getLength() == 16 &&
+		 0 == rtl_compareMemory(getUnoTunnelImplementationId().getConstArray(),  rId.getConstArray(), 16)
+		) ?
+		(sal_Int64) this : 
+		KabTable_TYPEDEF::getSomething(rId);
+}
diff -urN connectivity/source/drivers/kab/KTable.hxx connectivity/source/drivers/kab/KTable.hxx
--- connectivity/source/drivers/kab/KTable.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KTable.hxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,112 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_TABLE_HXX_
+#define _CONNECTIVITY_KAB_TABLE_HXX_
+
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+
+#ifndef _CONNECTIVITY_SDBCX_TABLE_HXX_
+#include "connectivity/sdbcx/VTable.hxx"
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+		typedef connectivity::sdbcx::OTable KabTable_TYPEDEF;
+
+        ::rtl::OUString getTypeString(const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& xColProp);
+
+		class KabTable : public KabTable_TYPEDEF
+		{
+            ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XDatabaseMetaData > m_xMetaData;
+			KabConnection* m_pConnection;
+
+		public:
+			KabTable(	sdbcx::OCollection* _pTables, KabConnection* _pConnection);
+			KabTable(	sdbcx::OCollection* _pTables, 
+                    KabConnection* _pConnection,
+					const ::rtl::OUString& _Name,
+					const ::rtl::OUString& _Type,
+					const ::rtl::OUString& _Description = ::rtl::OUString(),
+					const ::rtl::OUString& _SchemaName = ::rtl::OUString(),
+					const ::rtl::OUString& _CatalogName = ::rtl::OUString()
+				);
+
+			KabConnection* getConnection() { return m_pConnection;}
+
+            sal_Bool isReadOnly() const { return sal_False; }
+			virtual void refreshColumns();
+
+			::rtl::OUString getTableName() const { return m_Name; }
+			::rtl::OUString getSchema() const { return m_SchemaName; }
+
+			// com::sun::star::lang::XUnoTunnel
+            virtual sal_Int64 SAL_CALL getSomething( const ::com::sun::star::uno::Sequence< sal_Int8 >& aIdentifier ) throw(::com::sun::star::uno::RuntimeException);
+            static ::com::sun::star::uno::Sequence< sal_Int8 > getUnoTunnelImplementationId();
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_TABLE_HXX_
diff -urN connectivity/source/drivers/kab/KTables.cxx connectivity/source/drivers/kab/KTables.cxx
--- connectivity/source/drivers/kab/KTables.cxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KTables.cxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,130 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "KTables.hxx"
+#ifndef _CONNECTIVITY_KAB_TABLE_HXX_
+#include "KTable.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_CATALOG_HXX_
+#include "KCatalog.hxx"
+#endif
+#ifndef _CONNECTIVITY_KAB_CONNECTION_HXX_
+#include "KConnection.hxx"
+#endif
+
+#ifndef _COMPHELPER_TYPES_HXX_
+#include <comphelper/types.hxx>
+#endif
+
+using namespace connectivity::kab;
+using namespace connectivity;
+using namespace ::comphelper;
+using namespace ::cppu;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::beans;
+using namespace ::com::sun::star::sdbcx;
+using namespace ::com::sun::star::sdbc;
+using namespace ::com::sun::star::container;
+using namespace ::com::sun::star::lang;
+
+sdbcx::ObjectType KabTables::createObject(const ::rtl::OUString& _rName)
+{
+	::rtl::OUString aName,aSchema;
+	aSchema = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("%"));
+	aName = _rName;
+
+	Sequence< ::rtl::OUString > aTypes(1);
+	aTypes[0] = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("%"));
+	::rtl::OUString sEmpty;
+
+	Reference< XResultSet > xResult = m_xMetaData->getTables(Any(), aSchema, aName, aTypes);
+
+	sdbcx::ObjectType xRet = NULL;
+	if (xResult.is())
+	{
+        Reference< XRow > xRow(xResult, UNO_QUERY);
+		if (xResult->next()) // there can be only one table with this name
+		{
+			KabTable* pRet = new KabTable(
+					this,
+					static_cast<KabCatalog&>(m_rParent).getConnection(),
+					aName,
+					xRow->getString(4),
+					xRow->getString(5),
+					sEmpty);
+			xRet = pRet;
+		}
+	}
+	::comphelper::disposeComponent(xResult);
+
+	return xRet;
+}
+// -------------------------------------------------------------------------
+void KabTables::impl_refresh(  ) throw(RuntimeException)
+{
+	static_cast<KabCatalog&>(m_rParent).refreshTables();
+}
+// -------------------------------------------------------------------------
+void KabTables::disposing(void)
+{
+	m_xMetaData = NULL;
+	OCollection::disposing();
+}
diff -urN connectivity/source/drivers/kab/KTables.hxx connectivity/source/drivers/kab/KTables.hxx
--- connectivity/source/drivers/kab/KTables.hxx	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/KTables.hxx	2005-08-04 18:18:10.000000000 +0000
@@ -0,0 +1,99 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., July, 2005
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2005 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2005 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _CONNECTIVITY_KAB_TABLES_HXX_
+#define _CONNECTIVITY_KAB_TABLES_HXX_
+
+#ifndef _CONNECTIVITY_SDBCX_COLLECTION_HXX_
+#include "connectivity/sdbcx/VCollection.hxx"
+#endif
+#ifndef _COM_SUN_STAR_SDBC_XDATABASEMETADATA_HPP_
+#include <com/sun/star/sdbc/XDatabaseMetaData.hpp>
+#endif
+
+namespace connectivity
+{
+	namespace kab
+	{
+		class KabTables : public sdbcx::OCollection
+		{
+            ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XDatabaseMetaData >       m_xMetaData;
+
+		protected:
+            virtual sdbcx::ObjectType createObject(const ::rtl::OUString& _rName);
+            virtual void impl_refresh() throw(::com::sun::star::uno::RuntimeException);
+
+		public:
+            KabTables(
+				const ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XDatabaseMetaData >& _rMetaData,
+				::cppu::OWeakObject& _rParent,
+				::osl::Mutex& _rMutex,
+				const TStringVector &_rVector)
+				: sdbcx::OCollection(_rParent,sal_True,_rMutex,_rVector),
+				  m_xMetaData(_rMetaData)
+				{ }
+
+			virtual void SAL_CALL disposing(void);
+		};
+	}
+}
+
+#endif // _CONNECTIVITY_KAB_TABLES_HXX_
diff -urN connectivity/source/drivers/kab/makefile.mk connectivity/source/drivers/kab/makefile.mk
--- connectivity/source/drivers/kab/makefile.mk	1970-01-01 00:00:00.000000000 +0000
+++ connectivity/source/drivers/kab/makefile.mk	2005-07-28 11:59:44.000000000 +0000
@@ -0,0 +1,142 @@
+#*************************************************************************
+#
+#   $RCSfile$
+#
+#   $Revision$
+#
+#   last change: $Author$ $Date$
+#
+#   The Contents of this file are made available subject to the terms of
+#   either of the following licenses
+#
+#          - GNU Lesser General Public License Version 2.1
+#          - Sun Industry Standards Source License Version 1.1
+#
+#   Sun Microsystems Inc., July, 2005
+#
+#   GNU Lesser General Public License Version 2.1
+#   =============================================
+#   Copyright 2005 by Sun Microsystems, Inc.
+#   901 San Antonio Road, Palo Alto, CA 94303, USA
+#
+#   This library is free software; you can redistribute it and/or
+#   modify it under the terms of the GNU Lesser General Public
+#   License version 2.1, as published by the Free Software Foundation.
+#
+#   This library is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#   Lesser General Public License for more details.
+#
+#   You should have received a copy of the GNU Lesser General Public
+#   License along with this library; if not, write to the Free Software
+#   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+#   MA  02111-1307  USA
+#
+#
+#   Sun Industry Standards Source License Version 1.1
+#   =================================================
+#   The contents of this file are subject to the Sun Industry Standards
+#   Source License Version 1.1 (the "License"); You may not use this file
+#   except in compliance with the License. You may obtain a copy of the
+#   License at http://www.openoffice.org/license.html.
+#
+#   Software provided under this License is provided on an "AS IS" basis,
+#   WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+#   WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+#   MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+#   See the License for the specific provisions governing your rights and
+#   obligations concerning the Software.
+#
+#   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+#
+#   Copyright: 2005 by Sun Microsystems, Inc.
+#
+#   All Rights Reserved.
+#
+#   Contributor(s): _______________________________________
+#
+#
+#
+#*************************************************************************
+
+PRJ=..$/..$/..
+PRJINC=..$/..
+PRJNAME=connectivity
+TARGET=kab
+
+# --- Settings ----------------------------------
+.IF "$(DBGUTIL_OJ)"!=""
+ENVCFLAGS+=/FR$(SLO)$/
+.ENDIF
+
+.INCLUDE : settings.mk
+.INCLUDE :  $(PRJ)$/version.mk
+
+.IF "$(GUI)"=="UNX"
+# --- Files -------------------------------------
+
+EXCEPTIONSFILES=\
+	$(SLO)$/KColumns.obj			\
+	$(SLO)$/KTable.obj				\
+	$(SLO)$/KTables.obj				\
+	$(SLO)$/KCatalog.obj			\
+	$(SLO)$/KResultSet.obj			\
+	$(SLO)$/KStatement.obj			\
+	$(SLO)$/KPreparedStatement.obj	\
+	$(SLO)$/KDatabaseMetaData.obj	\
+	$(SLO)$/KConnection.obj			\
+	$(SLO)$/KServices.obj			\
+	$(SLO)$/KResultSetMetaData.obj	\
+	$(SLO)$/KDriver.obj
+
+SLOFILES=\
+	$(EXCEPTIONSFILES)
+
+INCPRE=\
+	$(KDE_CFLAGS)
+
+KAB_LIB=$(KDE_LIBS) -lkabc
+
+SHL1VERSIONMAP=$(TARGET).map
+
+
+# --- Library -----------------------------------
+
+SHL1TARGET=	$(KAB_TARGET)$(KAB_MAJOR)
+SHL1OBJS=$(SLOFILES)
+SHL1STDLIBS=\
+	$(CPPULIB)					\
+	$(CPPUHELPERLIB)			\
+	$(VOSLIB)					\
+	$(OSLLIB)					\
+	$(SVLLIB)					\
+	$(SVLIB)					\
+	$(TOOLSLIB)					\
+	$(SVTOOLLIB)				\
+	$(SVTLIB)					\
+	$(UNOTOOLSLIB)				\
+	$(UCBHELPERLIB)				\
+	$(SALLIB)					\
+	$(DBTOOLSLIB)				\
+	$(DBFILELIB)				\
+	$(COMPHELPERLIB)			\
+	$(KAB_LIB)
+
+.IF "$(DBFILELIB)" == ""
+SHL1STDLIBS+= ifile$(UPD).lib
+.ENDIF
+
+SHL1DEPN=
+SHL1IMPLIB=	i$(TARGET)
+
+SHL1DEF=	$(MISC)$/$(SHL1TARGET).def
+
+DEF1NAME=	$(SHL1TARGET)
+
+.ENDIF
+# --- Targets ----------------------------------
+
+.INCLUDE : target.mk
+
+
