--- solenv/inc/unxlngi6.mk	12 Dec 2006 16:18:56 -0000	1.27
+++ solenv/inc/unxlngi6.mk	3 Jan 2007 18:13:23 -0000	1.26.16.2
@@ -150,7 +150,6 @@ MODULES_WITH_WARNINGS := \
     soldep \
     starmath \
     sw \
-    writerperfect \
     xmlsecurity
 
 # switches for dynamic and static linking
--- solenv/inc/unxsoli4.mk	12 Dec 2006 16:19:14 -0000	1.27
+++ solenv/inc/unxsoli4.mk	3 Jan 2007 18:13:29 -0000	1.26.18.2
@@ -120,7 +120,6 @@ MODULES_WITH_WARNINGS := \
     soldep \
     starmath \
     sw \
-    writerperfect \
     xmlsecurity
 
 STDOBJVCL=$(L)$/salmain.o
--- solenv/inc/unxsols4.mk	12 Dec 2006 16:19:50 -0000	1.34
+++ solenv/inc/unxsols4.mk	3 Jan 2007 18:12:51 -0000	1.33.18.2
@@ -126,7 +126,6 @@ MODULES_WITH_WARNINGS := \
     soldep \
     starmath \
     sw \
-    writerperfect \
     xmlsecurity
 
 STDOBJVCL=$(L)$/salmain.o
--- libwpd/libwpd-0.8.7.diff	4 Dec 2006 16:31:36 -0000	1.2
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,2428 +0,0 @@
-*** misc/libwpd-0.8.7/src/lib/makefile.mk	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/makefile.mk	2006-11-10 16:57:33.000000000 +0100
-***************
-*** 1,3 ****
---- 1,5 ----
-+ EXTERNAL_WARNINGS_NOT_ERRORS := TRUE
-+ 
-  PRJ=..$/..$/..$/..$/..$/..
-  
-  PRJNAME=libwpd
-*** misc/libwpd-0.8.7/src/lib/WP1ContentListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1ContentListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 318,324 ****
-  	}
-  }
-  
-! void WP1ContentListener::headerFooterGroup(const uint8_t headerFooterDefinition, WP1SubDocument *subDocument)
-  {
-  	if (subDocument)
-  		m_subDocuments.push_back(subDocument);			
---- 318,324 ----
-  	}
-  }
-  
-! void WP1ContentListener::headerFooterGroup(const uint8_t /* headerFooterDefinition */, WP1SubDocument *subDocument)
-  {
-  	if (subDocument)
-  		m_subDocuments.push_back(subDocument);			
-***************
-*** 361,367 ****
-  	}
-  }
-  
-! void WP1ContentListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	// save our old parsing state on our "stack"
-  	WP1ContentParsingState *oldParseState = m_parseState;
---- 361,368 ----
-  	}
-  }
-  
-! void WP1ContentListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool /* isHeaderFooter */,
-! 						WPXTableList /* tableList */, int /* nextTableIndice */)
-  {
-  	// save our old parsing state on our "stack"
-  	WP1ContentParsingState *oldParseState = m_parseState;
-*** misc/libwpd-0.8.7/src/lib/WP1ContentListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1ContentListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 58,71 ****
-  	void attributeChange(const bool isOn, const uint8_t attribute);
-  	void fontPointSize(const uint8_t pointSize);
-  	void marginReset(const uint16_t leftMargin, const uint16_t rightMargin);
-! 	void topMarginSet(const uint16_t topMargin) {}
-! 	void bottomMarginSet(const uint16_t bottomMargin) {}
-  	void leftIndent(const uint16_t leftMarginOffset);
-  	void leftRightIndent(const uint16_t leftRightMarginOffset);
-  	void leftMarginRelease(const uint16_t release);
-  	void setTabs(const std::vector<WPXTabStop> tabStops);
-  	void headerFooterGroup(const uint8_t headerFooterDefinition, WP1SubDocument *subDocument);
-! 	void suppressPageCharacteristics(const uint8_t suppressCode) {}
-  	void justificationChange(const uint8_t justification);
-  	void lineSpacingChange(const uint8_t spacing) { WPXContentListener::lineSpacingChange((float)((double)spacing/2.0f)); }
-  	void flushRightOn();
---- 58,71 ----
-  	void attributeChange(const bool isOn, const uint8_t attribute);
-  	void fontPointSize(const uint8_t pointSize);
-  	void marginReset(const uint16_t leftMargin, const uint16_t rightMargin);
-! 	void topMarginSet(const uint16_t /* topMargin */) {}
-! 	void bottomMarginSet(const uint16_t /* bottomMargin */) {}
-  	void leftIndent(const uint16_t leftMarginOffset);
-  	void leftRightIndent(const uint16_t leftRightMarginOffset);
-  	void leftMarginRelease(const uint16_t release);
-  	void setTabs(const std::vector<WPXTabStop> tabStops);
-  	void headerFooterGroup(const uint8_t headerFooterDefinition, WP1SubDocument *subDocument);
-! 	void suppressPageCharacteristics(const uint8_t /* suppressCode */) {}
-  	void justificationChange(const uint8_t justification);
-  	void lineSpacingChange(const uint8_t spacing) { WPXContentListener::lineSpacingChange((float)((double)spacing/2.0f)); }
-  	void flushRightOn();
-***************
-*** 75,80 ****
---- 75,81 ----
-  	void endDocument() { WPXContentListener::endDocument(); };
-  
-  protected:
-+ 	using WPXContentListener::lineSpacingChange;
-  	void _handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice = 0);
-  
-  	void _flushText();
-*** misc/libwpd-0.8.7/src/lib/WP1FixedLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1FixedLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 41,47 ****
-  
-   protected:
-  	void _read(WPXInputStream *input);
-!  	virtual void _readContents(WPXInputStream *input) {};
-  
-  	const uint8_t getGroup() const { return m_group; }
-  
---- 41,47 ----
-  
-   protected:
-  	void _read(WPXInputStream *input);
-!  	virtual void _readContents(WPXInputStream * /* input */) {};
-  
-  	const uint8_t getGroup() const { return m_group; }
-  
-*** misc/libwpd-0.8.7/src/lib/WP1FootnoteEndnoteGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1FootnoteEndnoteGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 37,42 ****
---- 37,44 ----
-  
-  WP1FootnoteEndnoteGroup::~WP1FootnoteEndnoteGroup()
-  {
-+ 	if (m_subDocument)
-+ 		delete m_subDocument;
-  }
-  
-  void WP1FootnoteEndnoteGroup::_readContents(WPXInputStream *input)
-*** misc/libwpd-0.8.7/src/lib/WP1SetTabsGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1SetTabsGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 49,55 ****
-  
-  	while ((tmpTabType = read8(input)) != (int8_t)0xff)
-  	{
-! 		float tmpTabPosition = (float)((double)readU16(input, true) / 72.0f);
-  
-  		if (tmpTabType < 0)
-  		{
---- 49,55 ----
-  
-  	while ((tmpTabType = read8(input)) != (int8_t)0xff)
-  	{
-! 		tmpTabPosition = (float)((double)readU16(input, true) / 72.0f);
-  
-  		if (tmpTabType < 0)
-  		{
-*** misc/libwpd-0.8.7/src/lib/WP1StylesListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1StylesListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 241,247 ****
-  	}
-  }
-  
-! void WP1StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	if (!isUndoOn()) 
-  	{
---- 241,248 ----
-  	}
-  }
-  
-! void WP1StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter,
-! 						WPXTableList /* tableList */, int /* nextTableIndice */)
-  {
-  	if (!isUndoOn()) 
-  	{
-*** misc/libwpd-0.8.7/src/lib/WP1StylesListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1StylesListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 40,64 ****
-  	WP1StylesListener(std::list<WPXPageSpan> &pageList, std::vector<WP1SubDocument *> &subDocuments);
-  
-  	void startDocument() {}
-! 	void insertCharacter(const uint16_t character) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void insertExtendedCharacter(const uint8_t extendedCharacter) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertTab() { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertEOL() { if (!isUndoOn()) m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void insertNote(const WPXNoteType noteType, WP1SubDocument *subDocument) {}
-! 	void attributeChange(const bool isOn, const uint8_t attribute) {}
-! 	void fontPointSize(const uint8_t pointSize) {}
-  	void marginReset(const uint16_t leftMargin, const uint16_t rightMargin);
-  	void topMarginSet(const uint16_t topMargin);
-  	void bottomMarginSet(const uint16_t bottomMargin);
-! 	void leftIndent(const uint16_t leftMarginOffset) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void leftRightIndent(const uint16_t leftRightMarginOffset) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void leftMarginRelease(const uint16_t release) {}
-! 	void setTabs(const std::vector<WPXTabStop> tabStops) {}
-  	void headerFooterGroup(const uint8_t headerFooterDefinition, WP1SubDocument *subDocument);
-  	void suppressPageCharacteristics(const uint8_t suppressCode);
-! 	void justificationChange(const uint8_t justification) {}
-! 	void lineSpacingChange(const uint8_t spacing) {}
-  	void flushRightOn() {}
-  	void flushRightOff() {}
-  	void centerOn() {}
---- 40,64 ----
-  	WP1StylesListener(std::list<WPXPageSpan> &pageList, std::vector<WP1SubDocument *> &subDocuments);
-  
-  	void startDocument() {}
-! 	void insertCharacter(const uint16_t /* character */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void insertExtendedCharacter(const uint8_t /* extendedCharacter */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertTab() { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertEOL() { if (!isUndoOn()) m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void insertNote(const WPXNoteType /* noteType */, WP1SubDocument * /* subDocument */) {}
-! 	void attributeChange(const bool /* isOn */, const uint8_t /* attribute */) {}
-! 	void fontPointSize(const uint8_t /* pointSize */) {}
-  	void marginReset(const uint16_t leftMargin, const uint16_t rightMargin);
-  	void topMarginSet(const uint16_t topMargin);
-  	void bottomMarginSet(const uint16_t bottomMargin);
-! 	void leftIndent(const uint16_t /* leftMarginOffset */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void leftRightIndent(const uint16_t /* leftRightMarginOffset */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void leftMarginRelease(const uint16_t /* release */) {}
-! 	void setTabs(const std::vector<WPXTabStop> /* tabStops */) {}
-  	void headerFooterGroup(const uint8_t headerFooterDefinition, WP1SubDocument *subDocument);
-  	void suppressPageCharacteristics(const uint8_t suppressCode);
-! 	void justificationChange(const uint8_t /* justification */) {}
-! 	void lineSpacingChange(const uint8_t /* spacing */) {}
-  	void flushRightOn() {}
-  	void flushRightOff() {}
-  	void centerOn() {}
-*** misc/libwpd-0.8.7/src/lib/WP1UnsupportedFixedLengthGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1UnsupportedFixedLengthGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 33,39 ****
-  	_read(input);
-  }
-  
-! void WP1UnsupportedFixedLengthGroup::_readContents(WPXInputStream *input)
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: Handling an unsupported fixed length group\n"));
-  };
---- 33,39 ----
-  	_read(input);
-  }
-  
-! void WP1UnsupportedFixedLengthGroup::_readContents(WPXInputStream * /* input */)
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: Handling an unsupported fixed length group\n"));
-  };
-*** misc/libwpd-0.8.7/src/lib/WP1UnsupportedFixedLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP1UnsupportedFixedLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 38,44 ****
-  	WP1UnsupportedFixedLengthGroup(WPXInputStream *input, uint8_t group);
-  
-  	void _readContents(WPXInputStream *input);
-! 	void parse(WP1Listener *listener) {}
-  };
-  
-  #endif /* WP1UNSUPPORTEDFIXEDLENGTHGROUP_H */
---- 38,44 ----
-  	WP1UnsupportedFixedLengthGroup(WPXInputStream *input, uint8_t group);
-  
-  	void _readContents(WPXInputStream *input);
-! 	void parse(WP1Listener * /* listener */) {}
-  };
-  
-  #endif /* WP1UNSUPPORTEDFIXEDLENGTHGROUP_H */
-*** misc/libwpd-0.8.7/src/lib/WP3ContentListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3ContentListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 74,80 ****
-  	}
-  }
-  
-! void WP3ContentListener::insertTab(const uint8_t tabType, float tabPosition)
-  {
-          if (!isUndoOn())
-  	{
---- 74,80 ----
-  	}
-  }
-  
-! void WP3ContentListener::insertTab(const uint8_t /* tabType */, float /* tabPosition */)
-  {
-          if (!isUndoOn())
-  	{
-***************
-*** 146,152 ****
-  	}
-  }
-  
-! void WP3ContentListener::addTableColumnDefinition(const uint32_t width, const uint32_t leftGutter, const uint32_t rightGutter, const uint32_t attributes, const uint8_t alignment)
-  {
-  	if (!isUndoOn())
-  	{
---- 146,153 ----
-  	}
-  }
-  
-! void WP3ContentListener::addTableColumnDefinition(const uint32_t width, const uint32_t /* leftGutter */,
-! 						const uint32_t /* rightGutter */, const uint32_t attributes, const uint8_t alignment)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 338,344 ****
-  	}
-  }
-  
-! void WP3ContentListener::undoChange(const uint8_t undoType, const uint16_t undoLevel)
-  {
-          if (undoType == 0x00) // begin invalid text
-                  setUndoOn(true);
---- 339,345 ----
-  	}
-  }
-  
-! void WP3ContentListener::undoChange(const uint8_t undoType, const uint16_t /* undoLevel */)
-  {
-          if (undoType == 0x00) // begin invalid text
-                  setUndoOn(true);
-***************
-*** 443,450 ****
-  	}
-  }
-  
-! void WP3ContentListener::columnChange(const WPXTextColumnType columnType, const uint8_t numColumns, const std::vector<float> &columnWidth,
-! 		const std::vector<bool> &isFixedWidth)
-  {
-  	if (!isUndoOn())
-  	{
---- 444,451 ----
-  	}
-  }
-  
-! void WP3ContentListener::columnChange(const WPXTextColumnType /* columnType */, const uint8_t numColumns,
-! 					const std::vector<float> &columnWidth, const std::vector<bool> &isFixedWidth)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 593,599 ****
-  	}
-  }
-  
-! void WP3ContentListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	// save our old parsing state on our "stack"
-  	WP3ContentParsingState *oldParseState = m_parseState;
---- 594,601 ----
-  	}
-  }
-  
-! void WP3ContentListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter,
-! 						WPXTableList /* tableList */, int /* nextTableIndice */)
-  {
-  	// save our old parsing state on our "stack"
-  	WP3ContentParsingState *oldParseState = m_parseState;
-***************
-*** 633,639 ****
-  	setUndoOn(oldIsUndoOn);
-  }
-  	
-! void WP3ContentListener::headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP3SubDocument *subDocument)
-  {
-  	if (subDocument)
-  		m_subDocuments.push_back(subDocument);			
---- 635,641 ----
-  	setUndoOn(oldIsUndoOn);
-  }
-  	
-! void WP3ContentListener::headerFooterGroup(const uint8_t /* headerFooterType */, const uint8_t /* occurenceBits */, WP3SubDocument *subDocument)
-  {
-  	if (subDocument)
-  		m_subDocuments.push_back(subDocument);			
-*** misc/libwpd-0.8.7/src/lib/WP3ContentListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3ContentListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 59,66 ****
-  	void insertEOL();
-  	void attributeChange(const bool isOn, const uint8_t attribute);
-  	void lineSpacingChange(const float lineSpacing) { WPXContentListener::lineSpacingChange(lineSpacing); };
-! 	void pageMarginChange(const uint8_t side, const uint16_t margin) {};
-! 	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent) {};
-  	void marginChange(const uint8_t side, const uint16_t margin);
-  	void indentFirstLineChange(const int16_t offset);
-  	void setTabs(const bool isRelative, const std::vector<WPXTabStop> tabStops);
---- 59,67 ----
-  	void insertEOL();
-  	void attributeChange(const bool isOn, const uint8_t attribute);
-  	void lineSpacingChange(const float lineSpacing) { WPXContentListener::lineSpacingChange(lineSpacing); };
-! 	void pageMarginChange(const uint8_t /* side */, const uint16_t /* margin */) {};
-! 	void pageFormChange(const uint16_t /* length */, const uint16_t /* width */, const WPXFormOrientation /* orientation */,
-! 				const bool /* isPersistent */) {};
-  	void marginChange(const uint8_t side, const uint16_t margin);
-  	void indentFirstLineChange(const int16_t offset);
-  	void setTabs(const bool isRelative, const std::vector<WPXTabStop> tabStops);
-***************
-*** 88,94 ****
-  	void insertNoteReference(const WPXString &noteReference);
-  	void insertNote(const WPXNoteType noteType, WP3SubDocument *subDocument);
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP3SubDocument *subDocument);
-! 	void suppressPage(const uint16_t suppressCode) {};
-  	
-  protected:
-  	void _handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice = 0);
---- 89,95 ----
-  	void insertNoteReference(const WPXString &noteReference);
-  	void insertNote(const WPXNoteType noteType, WP3SubDocument *subDocument);
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP3SubDocument *subDocument);
-! 	void suppressPage(const uint16_t /* suppressCode */) {};
-  	
-  protected:
-  	void _handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice = 0);
-*** misc/libwpd-0.8.7/src/lib/WP3EndOfLinePageGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3EndOfLinePageGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 56,66 ****
-  	_read(input);
-  }
-  
-- void WP3EndOfLinePageGroup::_readContents(WPXInputStream *input)
-- {
-- 	// nothing really to do here...
-- }
-- 
-  void WP3EndOfLinePageGroup::parse(WP3Listener *listener)
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: handling an End of Line/Page group\n"));
---- 56,61 ----
-*** misc/libwpd-0.8.7/src/lib/WP3EndOfLinePageGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3EndOfLinePageGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 33,41 ****
-  public:
-  	WP3EndOfLinePageGroup(WPXInputStream *input);	
-  	void parse(WP3Listener *listener);
-- 	
-- protected:
-- 	void _readContents(WPXInputStream *input);
-  };
-  
-  #endif /* WP3ENDOFLINEPAGEGROUP_H */
---- 33,38 ----
-*** misc/libwpd-0.8.7/src/lib/WP3PageFormatGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3PageFormatGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 92,98 ****
-  
-  		while ((tmpTabType = read8(input)) != (int8_t)0xff)
-  		{
-! 			float tmpTabPosition = fixedPointToFloat(readU32(input, true)) / 72.0f;
-  
-  			if (tmpTabType < 0)
-  			{
---- 92,98 ----
-  
-  		while ((tmpTabType = read8(input)) != (int8_t)0xff)
-  		{
-! 			tmpTabPosition = fixedPointToFloat(readU32(input, true)) / 72.0f;
-  
-  			if (tmpTabType < 0)
-  			{
-*** misc/libwpd-0.8.7/src/lib/WP3SingleByteFunction.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3SingleByteFunction.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 27,33 ****
-  #include "WP3SingleByteFunction.h"
-  #include "libwpd_internal.h"
-  
-! WP3SingleByteFunction * WP3SingleByteFunction::constructSingleByteFunction(WPXInputStream *input, uint8_t groupID)
-  {
-  
-  	switch (groupID) 
---- 27,33 ----
-  #include "WP3SingleByteFunction.h"
-  #include "libwpd_internal.h"
-  
-! WP3SingleByteFunction * WP3SingleByteFunction::constructSingleByteFunction(WPXInputStream * /* input */, uint8_t groupID)
-  {
-  
-  	switch (groupID) 
-*** misc/libwpd-0.8.7/src/lib/WP3StylesListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3StylesListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 90,96 ****
-  	}
-  }
-  
-! void WP3StylesListener::undoChange(const uint8_t undoType, const uint16_t undoLevel)
-  {
-  // enable when have understood the undo change functions in WP3 file-format
-  #if 0  
---- 90,96 ----
-  	}
-  }
-  
-! void WP3StylesListener::undoChange(const uint8_t /* undoType */, const uint16_t /* undoLevel */)
-  {
-  // enable when have understood the undo change functions in WP3 file-format
-  #if 0  
-***************
-*** 162,168 ****
-  	}
-  }
-  
-! void WP3StylesListener::pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent)
-  {
-  	if (!isUndoOn())
-  	{
---- 162,168 ----
-  	}
-  }
-  
-! void WP3StylesListener::pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool /* isPersistent */)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 263,269 ****
-  	}
-  }
-  
-! void WP3StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	bool oldIsSubDocument = m_isSubDocument;
-  	m_isSubDocument = true;
---- 263,270 ----
-  	}
-  }
-  
-! void WP3StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter,
-! 						WPXTableList tableList, int /* nextTableIndice */)
-  {
-  	bool oldIsSubDocument = m_isSubDocument;
-  	m_isSubDocument = true;
-*** misc/libwpd-0.8.7/src/lib/WP3StylesListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3StylesListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 39,78 ****
-  	WP3StylesListener(std::list<WPXPageSpan> &pageList, WPXTableList tableList, std::vector<WP3SubDocument *> &subDocuments);
-  
-  	void startDocument() {}
-! 	void insertCharacter(const uint16_t character) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void insertTab(const uint8_t tabType, float tabPosition) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertEOL() { if (!isUndoOn()) m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void attributeChange(const bool isOn, const uint8_t attribute) {}
-! 	void lineSpacingChange(const float lineSpacing) {}
-! 	void justificationChange(const uint8_t justification) {}
-  	void pageMarginChange(const uint8_t side, const uint16_t margin);
-  	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent);
-  	void marginChange(const uint8_t side, const uint16_t margin);
-! 	void indentFirstLineChange(const int16_t offset) {}
-! 	void setTabs(const bool isRelative, const std::vector<WPXTabStop> tabStops) {}
-! 	void columnChange(const WPXTextColumnType columnType, const uint8_t numColumns, const std::vector<float> &columnWidth,
-! 				  const std::vector<bool> &isFixedWidth) {}
-  	void endDocument();
-  
-! 	void defineTable(const uint8_t position, const uint16_t leftOffset){}
-! 	void addTableColumnDefinition(const uint32_t width, const uint32_t leftGutter, const uint32_t rightGutter, const uint32_t attributes,
-! 				const uint8_t alignment){}
-  	void startTable();
-   	void insertRow();
-   	void insertCell();
-   	void closeCell() {}
-  	void closeRow() {}
-! 	void setTableCellSpan(const uint16_t colSpan, const uint16_t rowSpan) {}
-! 	void setTableCellFillColor(const RGBSColor * cellFillColor) {}
-   	void endTable() {}
-  	void undoChange(const uint8_t undoType, const uint16_t undoLevel);
-! 	void setTextColor(const RGBSColor * fontColor) {}
-! 	void setTextFont(const WPXString fontName) {}
-! 	void setFontSize(const uint16_t fontSize) {}
-! 	void insertPageNumber(const WPXString &pageNumber) {}
-! 	void insertNoteReference(const WPXString &noteReference) {}
-! 	void insertNote(const WPXNoteType noteType, WP3SubDocument *subDocument) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP3SubDocument *subDocument);
-  	void suppressPage(const uint16_t suppressCode);
-  
---- 39,78 ----
-  	WP3StylesListener(std::list<WPXPageSpan> &pageList, WPXTableList tableList, std::vector<WP3SubDocument *> &subDocuments);
-  
-  	void startDocument() {}
-! 	void insertCharacter(const uint16_t /* character */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void insertTab(const uint8_t /* tabType */, float /* tabPosition */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertEOL() { if (!isUndoOn()) m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void attributeChange(const bool /* isOn */, const uint8_t /* attribute */) {}
-! 	void lineSpacingChange(const float /* lineSpacing */) {}
-! 	void justificationChange(const uint8_t /* justification */) {}
-  	void pageMarginChange(const uint8_t side, const uint16_t margin);
-  	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent);
-  	void marginChange(const uint8_t side, const uint16_t margin);
-! 	void indentFirstLineChange(const int16_t /* offset */) {}
-! 	void setTabs(const bool /* isRelative */, const std::vector<WPXTabStop> /* tabStops */) {}
-! 	void columnChange(const WPXTextColumnType /* columnType */, const uint8_t /* numColumns */,
-! 			const std::vector<float> & /* columnWidth */, const std::vector<bool> & /* isFixedWidth */) {}
-  	void endDocument();
-  
-! 	void defineTable(const uint8_t /* position */, const uint16_t /* leftOffset */) {}
-! 	void addTableColumnDefinition(const uint32_t /* width */, const uint32_t /* leftGutter */, const uint32_t /* rightGutter */,
-! 					const uint32_t /* attributes */, const uint8_t /* alignment */) {}
-  	void startTable();
-   	void insertRow();
-   	void insertCell();
-   	void closeCell() {}
-  	void closeRow() {}
-! 	void setTableCellSpan(const uint16_t /* colSpan */, const uint16_t /* rowSpan */) {}
-! 	void setTableCellFillColor(const RGBSColor * /* cellFillColor */) {}
-   	void endTable() {}
-  	void undoChange(const uint8_t undoType, const uint16_t undoLevel);
-! 	void setTextColor(const RGBSColor * /* fontColor */) {}
-! 	void setTextFont(const WPXString /* fontName */) {}
-! 	void setFontSize(const uint16_t /* fontSize */) {}
-! 	void insertPageNumber(const WPXString & /* pageNumber */) {}
-! 	void insertNoteReference(const WPXString & /* noteReference */) {}
-! 	void insertNote(const WPXNoteType /* noteType */, WP3SubDocument * /* subDocument */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP3SubDocument *subDocument);
-  	void suppressPage(const uint16_t suppressCode);
-  
-*** misc/libwpd-0.8.7/src/lib/WP3UnsupportedFixedLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3UnsupportedFixedLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 31,40 ****
-  {
-   public:
-  	WP3UnsupportedFixedLengthGroup(WPXInputStream *input, uint8_t groupID);	
-! 	void parse(WP3Listener *listener) {}
-  	
-   protected:
-! 	void _readContents(WPXInputStream *input) {}
-  };
-  
-  #endif /* WP3UNSUPPORTEDFIXEDLENGTHGROUP_H */
---- 31,40 ----
-  {
-   public:
-  	WP3UnsupportedFixedLengthGroup(WPXInputStream *input, uint8_t groupID);	
-! 	void parse(WP3Listener * /* listener */) {}
-  	
-   protected:
-! 	void _readContents(WPXInputStream * /* input */) {}
-  };
-  
-  #endif /* WP3UNSUPPORTEDFIXEDLENGTHGROUP_H */
-*** misc/libwpd-0.8.7/src/lib/WP3UnsupportedVariableLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3UnsupportedVariableLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 34,40 ****
-  {
-  public:
-  	WP3UnsupportedVariableLengthGroup(WPXInputStream *input);
-! 	void parse(WP3Listener *listener) {}
-  };
-  
-  #endif /* WP3UNSUPPORTEDVARIABLELENGTHGROUP_H */
---- 34,40 ----
-  {
-  public:
-  	WP3UnsupportedVariableLengthGroup(WPXInputStream *input);
-! 	void parse(WP3Listener * /* listener */) {}
-  };
-  
-  #endif /* WP3UNSUPPORTEDVARIABLELENGTHGROUP_H */
-*** misc/libwpd-0.8.7/src/lib/WP3VariableLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP3VariableLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 40,46 ****
-  
-   protected:
-  	void _read(WPXInputStream *input);
-!  	virtual void _readContents(WPXInputStream *input) {} // we don't always need more information than that provided generically
-  
-  	const uint8_t getSubGroup() const { return m_subGroup; }
-  	const uint16_t getSize() const { return m_size;}
---- 40,46 ----
-  
-   protected:
-  	void _read(WPXInputStream *input);
-!  	virtual void _readContents(WPXInputStream * /* input */) {} // we don't always need more information than that provided generically
-  
-  	const uint8_t getSubGroup() const { return m_subGroup; }
-  	const uint16_t getSize() const { return m_size;}
-*** misc/libwpd-0.8.7/src/lib/WP42ContentListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP42ContentListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 68,74 ****
-  	}
-  }
-  
-! void WP42ContentListener::insertTab(const uint8_t tabType, float tabPosition)
-  {
-  	if (!isUndoOn())
-  	{
---- 68,74 ----
-  	}
-  }
-  
-! void WP42ContentListener::insertTab(const uint8_t /* tabType */, float /* tabPosition */)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 142,148 ****
-  		m_ps->m_textAttributeBits ^= textAttributeBit;
-  }
-  
-! void WP42ContentListener::marginReset(const uint8_t leftMargin, const uint8_t rightMargin)
-  {
-  #if 0
-  	if (!isUndoOn())
---- 142,148 ----
-  		m_ps->m_textAttributeBits ^= textAttributeBit;
-  }
-  
-! void WP42ContentListener::marginReset(const uint8_t /* leftMargin */, const uint8_t /* rightMargin */)
-  {
-  #if 0
-  	if (!isUndoOn())
-***************
-*** 155,167 ****
-  #endif
-  }
-  
-! void WP42ContentListener::headerFooterGroup(const uint8_t headerFooterDefinition, WP42SubDocument *subDocument)
-  {
-  	if (subDocument)
-  		m_subDocuments.push_back(subDocument);			
-  }	
-  
-! void WP42ContentListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	// save our old parsing state on our "stack"
-  	WP42ContentParsingState *oldParseState = m_parseState;
---- 155,168 ----
-  #endif
-  }
-  
-! void WP42ContentListener::headerFooterGroup(const uint8_t /* headerFooterDefinition */, WP42SubDocument *subDocument)
-  {
-  	if (subDocument)
-  		m_subDocuments.push_back(subDocument);			
-  }	
-  
-! void WP42ContentListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool /* isHeaderFooter */,
-! 						WPXTableList /* tableList */, int /* nextTableIndice */)
-  {
-  	// save our old parsing state on our "stack"
-  	WP42ContentParsingState *oldParseState = m_parseState;
-*** misc/libwpd-0.8.7/src/lib/WP42ContentListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP42ContentListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 54,60 ****
-  	void attributeChange(const bool isOn, const uint8_t attribute);
-  	void marginReset(const uint8_t leftMargin, const uint8_t rightMargin);
-  	void headerFooterGroup(const uint8_t headerFooterDefinition, WP42SubDocument *subDocument);
-! 	void suppressPageCharacteristics(const uint8_t suppressCode) {}
-  	void endDocument() { WPXContentListener::endDocument(); };
-  
-  protected:
---- 54,60 ----
-  	void attributeChange(const bool isOn, const uint8_t attribute);
-  	void marginReset(const uint8_t leftMargin, const uint8_t rightMargin);
-  	void headerFooterGroup(const uint8_t headerFooterDefinition, WP42SubDocument *subDocument);
-! 	void suppressPageCharacteristics(const uint8_t /* suppressCode */) {}
-  	void endDocument() { WPXContentListener::endDocument(); };
-  
-  protected:
-*** misc/libwpd-0.8.7/src/lib/WP42StylesListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP42StylesListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 179,185 ****
-  	}
-  }
-  
-! void WP42StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	if (!isUndoOn()) 
-  	{
---- 179,186 ----
-  	}
-  }
-  
-! void WP42StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter,
-! 						WPXTableList /* tableList */, int /* nextTableIndice */)
-  {
-  	if (!isUndoOn()) 
-  	{
-*** misc/libwpd-0.8.7/src/lib/WP42StylesListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP42StylesListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 40,51 ****
-  	WP42StylesListener(std::list<WPXPageSpan> &pageList, std::vector<WP42SubDocument *> &subDocuments);
-  
-  	void startDocument() {}
-! 	void insertCharacter(const uint16_t character) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void insertTab(const uint8_t tabType, float tabPosition) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertEOL() { if (!isUndoOn()) m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void attributeChange(const bool isOn, const uint8_t attribute) {}
-! 	void marginReset(const uint8_t leftMargin, const uint8_t rightMargin) {}
-  	void headerFooterGroup(const uint8_t headerFooterDefinition, WP42SubDocument *subDocument);
-  	void suppressPageCharacteristics(const uint8_t suppressCode);
-  	void endDocument();
---- 40,51 ----
-  	WP42StylesListener(std::list<WPXPageSpan> &pageList, std::vector<WP42SubDocument *> &subDocuments);
-  
-  	void startDocument() {}
-! 	void insertCharacter(const uint16_t /* character */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void insertTab(const uint8_t /* tabType */, float /* tabPosition */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertEOL() { if (!isUndoOn()) m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void attributeChange(const bool /* isOn */, const uint8_t /* attribute */) {}
-! 	void marginReset(const uint8_t /* leftMargin */, const uint8_t /* rightMargin */) {}
-  	void headerFooterGroup(const uint8_t headerFooterDefinition, WP42SubDocument *subDocument);
-  	void suppressPageCharacteristics(const uint8_t suppressCode);
-  	void endDocument();
-*** misc/libwpd-0.8.7/src/lib/WP42UnsupportedMultiByteFunctionGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP42UnsupportedMultiByteFunctionGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 33,39 ****
-  	_read(input);
-  }
-  
-! void WP42UnsupportedMultiByteFunctionGroup::_readContents(WPXInputStream *input)
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: Handling an unsupported variable length group\n"));
-  };
---- 33,39 ----
-  	_read(input);
-  }
-  
-! void WP42UnsupportedMultiByteFunctionGroup::_readContents(WPXInputStream * /* input */)
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: Handling an unsupported variable length group\n"));
-  };
-*** misc/libwpd-0.8.7/src/lib/WP42UnsupportedMultiByteFunctionGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP42UnsupportedMultiByteFunctionGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 38,44 ****
-  	WP42UnsupportedMultiByteFunctionGroup(WPXInputStream *input, uint8_t group);
-  
-  	void _readContents(WPXInputStream *input);
-! 	void parse(WP42Listener *listener) {}
-  };
-  
-  #endif /* WP42UNSUPPORTEDMULTIBYTEFUNCTIONGROUP_H */
---- 38,44 ----
-  	WP42UnsupportedMultiByteFunctionGroup(WPXInputStream *input, uint8_t group);
-  
-  	void _readContents(WPXInputStream *input);
-! 	void parse(WP42Listener * /* listener */) {}
-  };
-  
-  #endif /* WP42UNSUPPORTEDMULTIBYTEFUNCTIONGROUP_H */
-*** misc/libwpd-0.8.7/src/lib/WP5ContentListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5ContentListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 69,75 ****
-  	appendUCS4(m_parseState->m_textBuffer, (uint32_t)character);
-  }
-  
-! void WP5ContentListener::insertTab(const uint8_t tabType, float tabPosition)
-  {
-  	if (!m_ps->m_isSpanOpened)
-  		_openSpan();
---- 69,75 ----
-  	appendUCS4(m_parseState->m_textBuffer, (uint32_t)character);
-  }
-  
-! void WP5ContentListener::insertTab(const uint8_t /* tabType */, float /* tabPosition */)
-  {
-  	if (!m_ps->m_isSpanOpened)
-  		_openSpan();
-***************
-*** 127,134 ****
-  	}
-  }
-  
-! void WP5ContentListener::addTableColumnDefinition(const uint32_t width, const uint32_t leftGutter, const uint32_t rightGutter,
-! 										   const uint32_t attributes, const uint8_t alignment)
-  {
-  	if (!isUndoOn())
-  	{
---- 127,134 ----
-  	}
-  }
-  
-! void WP5ContentListener::addTableColumnDefinition(const uint32_t width, const uint32_t /* leftGutter */,
-! 						const uint32_t /* rightGutter */, const uint32_t attributes, const uint8_t alignment)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 390,396 ****
-  	}
-  }
-  
-! void WP5ContentListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	// save our old parsing state on our "stack"
-  	WP5ContentParsingState *oldParseState = m_parseState;
---- 390,397 ----
-  	}
-  }
-  
-! void WP5ContentListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter,
-! 				WPXTableList /* tableList */, int /* nextTableIndice */)
-  {
-  	// save our old parsing state on our "stack"
-  	WP5ContentParsingState *oldParseState = m_parseState;
-***************
-*** 426,432 ****
-  	m_parseState = oldParseState;
-  }
-  
-! void WP5ContentListener::headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP5SubDocument *subDocument)
-  {
-  	if (subDocument)
-  		m_subDocuments.push_back(subDocument);
---- 427,434 ----
-  	m_parseState = oldParseState;
-  }
-  
-! void WP5ContentListener::headerFooterGroup(const uint8_t /* headerFooterType */, const uint8_t /* occurenceBits */,
-! 						WP5SubDocument *subDocument)
-  {
-  	if (subDocument)
-  		m_subDocuments.push_back(subDocument);
-*** misc/libwpd-0.8.7/src/lib/WP5ContentListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5ContentListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 63,72 ****
-  	void justificationChange(const uint8_t justification) { WPXContentListener::justificationChange(justification); };
-  	void characterColorChange(const uint8_t red, const uint8_t green, const uint8_t blue);
-  	void attributeChange(const bool isOn, const uint8_t attribute);
-! 	void pageMarginChange(const uint8_t side, const uint16_t margin) {};
-! 	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent) {};
-  	void marginChange(const uint8_t side, const uint16_t margin);
-! 	void paragraphMarginChange(const uint8_t side, const int16_t margin) {};
-  	void endDocument() { WPXContentListener::endDocument(); };
-  
-  	void defineTable(const uint8_t position, const uint16_t leftOffset);
---- 63,73 ----
-  	void justificationChange(const uint8_t justification) { WPXContentListener::justificationChange(justification); };
-  	void characterColorChange(const uint8_t red, const uint8_t green, const uint8_t blue);
-  	void attributeChange(const bool isOn, const uint8_t attribute);
-! 	void pageMarginChange(const uint8_t /* side */, const uint16_t /* margin */) {};
-! 	void pageFormChange(const uint16_t /* length */, const uint16_t /* width */,
-! 				const WPXFormOrientation /* orientation */, const bool /* isPersistent */) {};
-  	void marginChange(const uint8_t side, const uint16_t margin);
-! 	void paragraphMarginChange(const uint8_t /* side */, const int16_t /* margin */) {};
-  	void endDocument() { WPXContentListener::endDocument(); };
-  
-  	void defineTable(const uint8_t position, const uint16_t leftOffset);
-***************
-*** 83,89 ****
-  	void insertNoteReference(const WPXString noteReference);
-  	void insertNote(const WPXNoteType noteType, const WP5SubDocument *subDocument);
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP5SubDocument *subDocument);
-! 	void suppressPageCharacteristics(const uint8_t suppressCode) {};
-  	
-  	void setDefaultFont(const WPXString fontName, const float fontSize);
-  	
---- 84,90 ----
-  	void insertNoteReference(const WPXString noteReference);
-  	void insertNote(const WPXNoteType noteType, const WP5SubDocument *subDocument);
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP5SubDocument *subDocument);
-! 	void suppressPageCharacteristics(const uint8_t /* suppressCode */) {};
-  	
-  	void setDefaultFont(const WPXString fontName, const float fontSize);
-  	
-*** misc/libwpd-0.8.7/src/lib/WP5FontNameStringPoolPacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5FontNameStringPoolPacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 27,33 ****
-  #include "WP5Parser.h"
-  #include "libwpd_internal.h"
-  
-! WP5FontNameStringPoolPacket::WP5FontNameStringPoolPacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize) 
-  	: WP5GeneralPacketData(input)
-  {	
-  	_read(input, dataOffset, dataSize);
---- 27,33 ----
-  #include "WP5Parser.h"
-  #include "libwpd_internal.h"
-  
-! WP5FontNameStringPoolPacket::WP5FontNameStringPoolPacket(WPXInputStream *input, int /* id */, uint32_t dataOffset, uint32_t dataSize) 
-  	: WP5GeneralPacketData(input)
-  {	
-  	_read(input, dataOffset, dataSize);
-*** misc/libwpd-0.8.7/src/lib/WP5GeneralPacketData.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5GeneralPacketData.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 31,37 ****
-  #include "libwpd.h"
-  #include "libwpd_internal.h"
-  
-! WP5GeneralPacketData::WP5GeneralPacketData(WPXInputStream * input)
-  {
-  }
-  
---- 31,37 ----
-  #include "libwpd.h"
-  #include "libwpd_internal.h"
-  
-! WP5GeneralPacketData::WP5GeneralPacketData(WPXInputStream * /* input */)
-  {
-  }
-  
-*** misc/libwpd-0.8.7/src/lib/WP5ListFontsUsedPacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5ListFontsUsedPacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 28,34 ****
-  #include "WP5Parser.h"
-  #include "libwpd_internal.h"
-  
-! WP5ListFontsUsedPacket::WP5ListFontsUsedPacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize, uint16_t packetType) :
-  	WP5GeneralPacketData(input),
-  	m_packetType(packetType)
-  {	
---- 28,34 ----
-  #include "WP5Parser.h"
-  #include "libwpd_internal.h"
-  
-! WP5ListFontsUsedPacket::WP5ListFontsUsedPacket(WPXInputStream *input, int /* id */, uint32_t dataOffset, uint32_t dataSize, uint16_t packetType) :
-  	WP5GeneralPacketData(input),
-  	m_packetType(packetType)
-  {	
-*** misc/libwpd-0.8.7/src/lib/WP5SingleByteFunction.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5SingleByteFunction.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 27,33 ****
-  #include "WP5SingleByteFunction.h"
-  #include "libwpd_internal.h"
-  
-! WP5SingleByteFunction * WP5SingleByteFunction::constructSingleByteFunction(WPXInputStream *input, uint8_t groupID)
-  {
-  
-  	switch (groupID) 
---- 27,33 ----
-  #include "WP5SingleByteFunction.h"
-  #include "libwpd_internal.h"
-  
-! WP5SingleByteFunction * WP5SingleByteFunction::constructSingleByteFunction(WPXInputStream * /* input */, uint8_t groupID)
-  {
-  
-  	switch (groupID) 
-*** misc/libwpd-0.8.7/src/lib/WP5StylesListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5StylesListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 120,126 ****
-  	//}
-  }
-  
-! void WP5StylesListener::pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent)
-  {
-  	//if (!isUndoOn())
-  	//{
---- 120,126 ----
-  	//}
-  }
-  
-! void WP5StylesListener::pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool /* isPersistent */)
-  {
-  	//if (!isUndoOn())
-  	//{
-***************
-*** 250,256 ****
-  	}
-  }
-  
-! void WP5StylesListener::insertRow(const uint16_t rowHeight, const bool isMinimumHeight, const bool isHeaderRow)
-  {
-  	if (!isUndoOn()) 
-  	{
---- 250,256 ----
-  	}
-  }
-  
-! void WP5StylesListener::insertRow(const uint16_t /* rowHeight */, const bool /* isMinimumHeight */, const bool /* isHeaderRow */)
-  {
-  	if (!isUndoOn()) 
-  	{
-***************
-*** 260,268 ****
-  }
-  
-  void WP5StylesListener::insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits, 
-! 				  const RGBSColor * cellFgColor, const RGBSColor * cellBgColor,
-! 				  const RGBSColor * cellBorderColor, const WPXVerticalAlignment cellVerticalAlignment, 
-! 				  const bool useCellAttributes, const uint32_t cellAttributes)
-  {
-  	if (!isUndoOn())
-  	{
---- 260,268 ----
-  }
-  
-  void WP5StylesListener::insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits, 
-! 				  const RGBSColor * /* cellFgColor */, const RGBSColor * /* cellBgColor */,
-! 				  const RGBSColor * /* cellBorderColor */, const WPXVerticalAlignment /* cellVerticalAlignment */, 
-! 				  const bool /* useCellAttributes */, const uint32_t /* cellAttributes */)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 271,277 ****
-  	}
-  }
-  
-! void WP5StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	// We don't want to actual insert anything in the case of a sub-document, but we
-  	// do want to capture whatever table-related information is within it..
---- 271,278 ----
-  	}
-  }
-  
-! void WP5StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter,
-! 						WPXTableList tableList, int /* nextTableIndice */)
-  {
-  	// We don't want to actual insert anything in the case of a sub-document, but we
-  	// do want to capture whatever table-related information is within it..
-*** misc/libwpd-0.8.7/src/lib/WP5StylesListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5StylesListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 42,64 ****
-  	WP5StylesListener(std::list<WPXPageSpan> &pageList, WPXTableList tableList, std::vector<WP5SubDocument*> &subDocuments);
-  
-  	void startDocument() {}
-! 	void setFont(const WPXString fontName, const float fontSize) {}
-! 	void insertCharacter(const uint16_t character) { /*if (!isUndoOn())*/ m_currentPageHasContent = true; }
-! 	void insertTab(const uint8_t tabType, float tabPosition) { /*if (!isUndoOn())*/ m_currentPageHasContent = true; }
-! 	void characterColorChange(const uint8_t red, const uint8_t green, const uint8_t blue) {};
-  	void insertEOL() { /*if (!isUndoOn())*/ m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void attributeChange(const bool isOn, const uint8_t attribute) {}
-! 	void lineSpacingChange(const float lineSpacing) {}
-! 	void justificationChange(const uint8_t justification) {}
-  	void pageMarginChange(const uint8_t side, const uint16_t margin);
-  	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent);
-  	void marginChange(const uint8_t side, const uint16_t margin);
-  	void endDocument();
-  
-! 	void defineTable(const uint8_t position, const uint16_t leftOffset){}
-! 	void addTableColumnDefinition(const uint32_t width, const uint32_t leftGutter, const uint32_t rightGutter,
-! 				const uint32_t attributes, const uint8_t alignment){}
-  	void startTable();
-   	void insertRow(const uint16_t rowHeight, const bool isMinimumHeight, const bool isHeaderRow);
-   	void insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits,
---- 42,64 ----
-  	WP5StylesListener(std::list<WPXPageSpan> &pageList, WPXTableList tableList, std::vector<WP5SubDocument*> &subDocuments);
-  
-  	void startDocument() {}
-! 	void setFont(const WPXString /* fontName */, const float /* fontSize */) {}
-! 	void insertCharacter(const uint16_t /* character */) { /*if (!isUndoOn())*/ m_currentPageHasContent = true; }
-! 	void insertTab(const uint8_t /* tabType */, float /* tabPosition */) { /*if (!isUndoOn())*/ m_currentPageHasContent = true; }
-! 	void characterColorChange(const uint8_t /* red */, const uint8_t /* green */, const uint8_t /* blue */) {};
-  	void insertEOL() { /*if (!isUndoOn())*/ m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void attributeChange(const bool /* isOn */, const uint8_t /* attribute */) {}
-! 	void lineSpacingChange(const float /* lineSpacing */) {}
-! 	void justificationChange(const uint8_t /* justification */) {}
-  	void pageMarginChange(const uint8_t side, const uint16_t margin);
-  	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent);
-  	void marginChange(const uint8_t side, const uint16_t margin);
-  	void endDocument();
-  
-! 	void defineTable(const uint8_t /* position */, const uint16_t /* leftOffset */) {}
-! 	void addTableColumnDefinition(const uint32_t /* width */, const uint32_t /* leftGutter */, const uint32_t /* rightGutter */,
-! 				const uint32_t /* attributes */, const uint8_t /* alignment */) {}
-  	void startTable();
-   	void insertRow(const uint16_t rowHeight, const bool isMinimumHeight, const bool isHeaderRow);
-   	void insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits,
-***************
-*** 67,74 ****
-  				const bool useCellAttributes, const uint32_t cellAttributes);
-   	void endTable() {}
-  
-! 	void insertNoteReference(const WPXString noteReference) {};
-! 	void insertNote(const WPXNoteType noteType, const WP5SubDocument *subDocument) {};
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP5SubDocument *subDocument);
-  	void suppressPageCharacteristics(const uint8_t suppressCode);
-  
---- 67,74 ----
-  				const bool useCellAttributes, const uint32_t cellAttributes);
-   	void endTable() {}
-  
-! 	void insertNoteReference(const WPXString /* noteReference */) {};
-! 	void insertNote(const WPXNoteType /* noteType */, const WP5SubDocument * /* subDocument */) {};
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, WP5SubDocument *subDocument);
-  	void suppressPageCharacteristics(const uint8_t suppressCode);
-  
-*** misc/libwpd-0.8.7/src/lib/WP5TableEOPGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5TableEOPGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 38,44 ****
-  {
-  }
-  
-! void WP5TableEOPGroup::_readContents(WPXInputStream *input)
-  {
-  	switch (getSubGroup())
-  	{
---- 38,44 ----
-  {
-  }
-  
-! void WP5TableEOPGroup::_readContents(WPXInputStream * /* input */)
-  {
-  	switch (getSubGroup())
-  	{
-*** misc/libwpd-0.8.7/src/lib/WP5UnsupportedFixedLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5UnsupportedFixedLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 32,41 ****
-  {
-   public:
-  	WP5UnsupportedFixedLengthGroup(WPXInputStream *input, uint8_t groupID);	
-! 	void parse(WP5Listener *listener) {}
-  	
-   protected:
-! 	void _readContents(WPXInputStream *input) {}
-  };
-  
-  #endif /* WP5UNSUPPORTEDFIXEDLENGTHGROUP_H */
---- 32,41 ----
-  {
-   public:
-  	WP5UnsupportedFixedLengthGroup(WPXInputStream *input, uint8_t groupID);	
-! 	void parse(WP5Listener * /* listener */) {}
-  	
-   protected:
-! 	void _readContents(WPXInputStream * /* input */) {}
-  };
-  
-  #endif /* WP5UNSUPPORTEDFIXEDLENGTHGROUP_H */
-*** misc/libwpd-0.8.7/src/lib/WP5UnsupportedVariableLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5UnsupportedVariableLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 35,41 ****
-  {
-  public:
-  	WP5UnsupportedVariableLengthGroup(WPXInputStream *input);
-! 	void parse(WP5Listener *listener) {}
-  };
-  
-  #endif /* WP5UNSUPPORTEDVARIABLELENGTHGROUP_H */
---- 35,41 ----
-  {
-  public:
-  	WP5UnsupportedVariableLengthGroup(WPXInputStream *input);
-! 	void parse(WP5Listener * /* listener */) {}
-  };
-  
-  #endif /* WP5UNSUPPORTEDVARIABLELENGTHGROUP_H */
-*** misc/libwpd-0.8.7/src/lib/WP5VariableLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP5VariableLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 48,54 ****
-  
-  protected:
-  	void _read(WPXInputStream *input);
-!  	virtual void _readContents(WPXInputStream *input) {} // we don't always need more information than that provided generically
-  
-  	const uint8_t getSubGroup() const { return m_subGroup; }
-  	const uint16_t getSize() const { return m_size; }
---- 48,54 ----
-  
-  protected:
-  	void _read(WPXInputStream *input);
-!  	virtual void _readContents(WPXInputStream * /* input */) {} // we don't always need more information than that provided generically
-  
-  	const uint8_t getSubGroup() const { return m_subGroup; }
-  	const uint16_t getSize() const { return m_size; }
-*** misc/libwpd-0.8.7/src/lib/WP6CharacterGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6CharacterGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 40,46 ****
-  	m_character = (charWord & 0xFF);
-  }
-  
-! void WP6CharacterGroup_SetAlignmentCharacterSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	const uint16_t *chars;
-  	int len;
---- 40,47 ----
-  	m_character = (charWord & 0xFF);
-  }
-  
-! void WP6CharacterGroup_SetAlignmentCharacterSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 				uint16_t const * /* prefixIDs */) const
-  {
-  	const uint16_t *chars;
-  	int len;
-***************
-*** 61,67 ****
-  	WPD_DEBUG_MSG(("WordPerfect: Character Group Color subgroup info (red: %i, green: %i, blue: %i)\n", m_red, m_green, m_blue));
-  }
-  
-! void WP6CharacterGroup_ColorSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	listener->characterColorChange(m_red, m_green, m_blue);
-  }
---- 62,68 ----
-  	WPD_DEBUG_MSG(("WordPerfect: Character Group Color subgroup info (red: %i, green: %i, blue: %i)\n", m_red, m_green, m_blue));
-  }
-  
-! void WP6CharacterGroup_ColorSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */, uint16_t const * /* prefixIDs */) const
-  {
-  	listener->characterColorChange(m_red, m_green, m_blue);
-  }
-***************
-*** 76,82 ****
-  	WPD_DEBUG_MSG(("WordPerfect: Character Group Character Shading Change subgroup info (shading: %i)\n", m_shading));
-  }
-  
-! void WP6CharacterGroup_CharacterShadingChangeSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	listener->characterShadingChange(m_shading);
-  }
---- 77,84 ----
-  	WPD_DEBUG_MSG(("WordPerfect: Character Group Character Shading Change subgroup info (shading: %i)\n", m_shading));
-  }
-  
-! void WP6CharacterGroup_CharacterShadingChangeSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 								uint16_t const * /* prefixIDs */) const
-  {
-  	listener->characterShadingChange(m_shading);
-  }
-***************
-*** 94,100 ****
-  	WPD_DEBUG_MSG(("WordPerfect: Character Group Font Face Change subgroup info (old matched point size: %i, hash: %i, matched font index: %i, matched font point size: %i\n", m_oldMatchedPointSize, m_hash, m_matchedFontIndex, m_matchedFontPointSize));
-  }
-  
-! void WP6CharacterGroup_FontFaceChangeSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: FontFaceChangeSubGroup parsing\n"));
-  	// TODO: check that we have 1 prefix id
---- 96,102 ----
-  	WPD_DEBUG_MSG(("WordPerfect: Character Group Font Face Change subgroup info (old matched point size: %i, hash: %i, matched font index: %i, matched font point size: %i\n", m_oldMatchedPointSize, m_hash, m_matchedFontIndex, m_matchedFontPointSize));
-  }
-  
-! void WP6CharacterGroup_FontFaceChangeSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: FontFaceChangeSubGroup parsing\n"));
-  	// TODO: check that we have 1 prefix id
-***************
-*** 112,118 ****
-  	WPD_DEBUG_MSG(("WordPerfect: Character Group Font Size Change subgroup info (desired font point size: %i\n", m_desiredFontPointSize));
-  }
-  
-! void WP6CharacterGroup_FontSizeChangeSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: FontSizeChangeSubGroup parsing\n"));
-  	// TODO: check that we have 1 prefix id
---- 114,120 ----
-  	WPD_DEBUG_MSG(("WordPerfect: Character Group Font Size Change subgroup info (desired font point size: %i\n", m_desiredFontPointSize));
-  }
-  
-! void WP6CharacterGroup_FontSizeChangeSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: FontSizeChangeSubGroup parsing\n"));
-  	// TODO: check that we have 1 prefix id
-***************
-*** 135,141 ****
-  	m_numberOfSpaces = readU8(input);
-  }
-  
-! void WP6CharacterGroup_SetDotLeaderCharactersSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	const uint16_t *chars;
-  	int len;
---- 137,144 ----
-  	m_numberOfSpaces = readU8(input);
-  }
-  
-! void WP6CharacterGroup_SetDotLeaderCharactersSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 								uint16_t const * /* prefixIDs */) const
-  {
-  	const uint16_t *chars;
-  	int len;
-***************
-*** 156,162 ****
-  	m_flag = readU8(input);
-  }
-  
-! void WP6CharacterGroup_ParagraphNumberOnSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	listener->paragraphNumberOn(m_outlineHash, m_level, m_flag);
-  }
---- 159,166 ----
-  	m_flag = readU8(input);
-  }
-  
-! void WP6CharacterGroup_ParagraphNumberOnSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 							uint16_t const * /* prefixIDs */) const
-  {
-  	listener->paragraphNumberOn(m_outlineHash, m_level, m_flag);
-  }
-***************
-*** 173,179 ****
-  	// TODO: add the remaining table properties here
-  }
-  
-! void WP6CharacterGroup_TableDefinitionOnSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	listener->defineTable(m_position, m_leftOffset);
-  }
---- 177,184 ----
-  	// TODO: add the remaining table properties here
-  }
-  
-! void WP6CharacterGroup_TableDefinitionOnSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 							uint16_t const * /* prefixIDs */) const
-  {
-  	listener->defineTable(m_position, m_leftOffset);
-  }
-***************
-*** 182,192 ****
-   * WP6CharacterGroup_TableDefinitionOffSubGroup
-   *************************************************************************/
-  
-! WP6CharacterGroup_TableDefinitionOffSubGroup::WP6CharacterGroup_TableDefinitionOffSubGroup(WPXInputStream *input)
-  {
-  }
-  
-! void WP6CharacterGroup_TableDefinitionOffSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	// the table is degined now; start the table
-  	listener->startTable();
---- 187,198 ----
-   * WP6CharacterGroup_TableDefinitionOffSubGroup
-   *************************************************************************/
-  
-! WP6CharacterGroup_TableDefinitionOffSubGroup::WP6CharacterGroup_TableDefinitionOffSubGroup(WPXInputStream * /* input */)
-  {
-  }
-  
-! void WP6CharacterGroup_TableDefinitionOffSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 							uint16_t const * /* prefixIDs */) const
-  {
-  	// the table is degined now; start the table
-  	listener->startTable();
-***************
-*** 210,216 ****
-  	m_currencyIndex = readU8(input);
-  }
-  
-! void WP6CharacterGroup_TableColumnSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	listener->addTableColumnDefinition(m_width, m_leftGutter, m_rigthGutter, m_attributes, m_alignment);
-  }
---- 216,222 ----
-  	m_currencyIndex = readU8(input);
-  }
-  
-! void WP6CharacterGroup_TableColumnSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */, uint16_t const * /* prefixIDs */) const
-  {
-  	listener->addTableColumnDefinition(m_width, m_leftGutter, m_rigthGutter, m_attributes, m_alignment);
-  }
-*** misc/libwpd-0.8.7/src/lib/WP6ContentListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6ContentListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 43,49 ****
-  #define WP6_DEFAULT_FONT_SIZE 12.0f
-  #define WP6_DEFAULT_FONT_NAME "Times New Roman"
-  
-! WP6OutlineDefinition::WP6OutlineDefinition(const WP6OutlineLocation outlineLocation, const uint8_t *numberingMethods, const uint8_t tabBehaviourFlag)
-  {
-  	_updateNumberingMethods(outlineLocation, numberingMethods);
-  }
---- 43,50 ----
-  #define WP6_DEFAULT_FONT_SIZE 12.0f
-  #define WP6_DEFAULT_FONT_NAME "Times New Roman"
-  
-! WP6OutlineDefinition::WP6OutlineDefinition(const WP6OutlineLocation outlineLocation, const uint8_t *numberingMethods,
-! 						const uint8_t /* tabBehaviourFlag */)
-  {
-  	_updateNumberingMethods(outlineLocation, numberingMethods);
-  }
-***************
-*** 61,72 ****
-  // outline style is defined in a prefix packet, then you are given more information later
-  // in the document)
-  // FIXME: make sure this is in the right place
-! void WP6OutlineDefinition::update(const uint8_t *numberingMethods, const uint8_t tabBehaviourFlag)
-  {
-  	_updateNumberingMethods(paragraphGroup, numberingMethods);
-  }
-  
-! void WP6OutlineDefinition::_updateNumberingMethods(const WP6OutlineLocation outlineLocation, const uint8_t *numberingMethods)
-  {
-  	for (int i=0; i<WP6_NUM_LIST_LEVELS; i++)
-  	{
---- 62,73 ----
-  // outline style is defined in a prefix packet, then you are given more information later
-  // in the document)
-  // FIXME: make sure this is in the right place
-! void WP6OutlineDefinition::update(const uint8_t *numberingMethods, const uint8_t /* tabBehaviourFlag */)
-  {
-  	_updateNumberingMethods(paragraphGroup, numberingMethods);
-  }
-  
-! void WP6OutlineDefinition::_updateNumberingMethods(const WP6OutlineLocation /* outlineLocation */, const uint8_t *numberingMethods)
-  {
-  	for (int i=0; i<WP6_NUM_LIST_LEVELS; i++)
-  	{
-***************
-*** 709,716 ****
-  	}
-  }
-  
-! void WP6ContentListener::columnChange(const WPXTextColumnType columnType, const uint8_t numColumns, const std::vector<float> &columnWidth,
-! 		const std::vector<bool> &isFixedWidth)
-  {
-  	if (!isUndoOn())
-  	{
---- 710,717 ----
-  	}
-  }
-  
-! void WP6ContentListener::columnChange(const WPXTextColumnType /* columnType */, const uint8_t numColumns,
-! 					const std::vector<float> &columnWidth, const std::vector<bool> &isFixedWidth)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 800,806 ****
-  	}
-  }
-  
-! void WP6ContentListener::paragraphNumberOn(const uint16_t outlineHash, const uint8_t level, const uint8_t flag)
-  {
-  	if (!isUndoOn())
-  	{
---- 801,807 ----
-  	}
-  }
-  
-! void WP6ContentListener::paragraphNumberOn(const uint16_t outlineHash, const uint8_t level, const uint8_t /* flag */)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 822,828 ****
-  	}
-  }
-  
-! void WP6ContentListener::displayNumberReferenceGroupOn(const uint8_t subGroup, const uint8_t level)
-  {
-  	if (!isUndoOn())
-  	{
---- 823,829 ----
-  	}
-  }
-  
-! void WP6ContentListener::displayNumberReferenceGroupOn(const uint8_t subGroup, const uint8_t /* level */)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 1047,1054 ****
-  	}
-  }
-  
-! void WP6ContentListener::addTableColumnDefinition(const uint32_t width, const uint32_t leftGutter, const uint32_t rightGutter,
-! 												  const uint32_t attributes, const uint8_t alignment)
-  {
-  	if (!isUndoOn())
-  	{
---- 1048,1055 ----
-  	}
-  }
-  
-! void WP6ContentListener::addTableColumnDefinition(const uint32_t width, const uint32_t /* leftGutter */,
-! 						const uint32_t /* rightGutter */, const uint32_t attributes, const uint8_t alignment)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 1104,1110 ****
-  	}
-  }
-  
-! void WP6ContentListener::insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits, 
-  					const RGBSColor * cellFgColor, const RGBSColor * cellBgColor, 
-  					const RGBSColor * cellBorderColor, const WPXVerticalAlignment cellVerticalAlignment, 
-  					const bool useCellAttributes, const uint32_t cellAttributes)
---- 1105,1111 ----
-  	}
-  }
-  
-! void WP6ContentListener::insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t /* borderBits */, 
-  					const RGBSColor * cellFgColor, const RGBSColor * cellBgColor, 
-  					const RGBSColor * cellBorderColor, const WPXVerticalAlignment cellVerticalAlignment, 
-  					const bool useCellAttributes, const uint32_t cellAttributes)
-***************
-*** 1390,1396 ****
-  	_handleListChange(m_parseState->m_currentOutlineHash);
-  }
-  
-! void WP6ContentListener::undoChange(const uint8_t undoType, const uint16_t undoLevel)
-  {
-  	if (undoType == WP6_UNDO_GROUP_INVALID_TEXT_START)
-  		setUndoOn(true);
---- 1391,1397 ----
-  	_handleListChange(m_parseState->m_currentOutlineHash);
-  }
-  
-! void WP6ContentListener::undoChange(const uint8_t undoType, const uint16_t /* undoLevel */)
-  {
-  	if (undoType == WP6_UNDO_GROUP_INVALID_TEXT_START)
-  		setUndoOn(true);
-*** misc/libwpd-0.8.7/src/lib/WP6ContentListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6ContentListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 133,141 ****
-  	~WP6ContentListener();
-  
-  	void startDocument() { WPXContentListener::startDocument(); };
-! 	void setDate(const uint16_t year, const uint8_t month, const uint8_t day,
-! 						const uint8_t hour, const uint8_t minute, const uint8_t second,
-! 						const uint8_t dayOfWeek, const uint8_t timeZone, const uint8_t unused) {}
-  	void setExtendedInformation(const uint16_t type, const WPXString &data);
-  	void setAlignmentCharacter(const uint16_t character);
-  	void setLeaderCharacter(const uint16_t character, const uint8_t numSpaces);
---- 133,141 ----
-  	~WP6ContentListener();
-  
-  	void startDocument() { WPXContentListener::startDocument(); };
-! 	void setDate(const uint16_t /* year */, const uint8_t /* month */, const uint8_t /* day */,
-! 			const uint8_t /* hour */, const uint8_t /* minute */, const uint8_t /* second */,
-! 			const uint8_t /* dayOfWeek */, const uint8_t /* timeZone */, const uint8_t /* unused */) {}
-  	void setExtendedInformation(const uint16_t type, const WPXString &data);
-  	void setAlignmentCharacter(const uint16_t character);
-  	void setLeaderCharacter(const uint16_t character, const uint8_t numSpaces);
-***************
-*** 154,161 ****
-  	void fontChange(const uint16_t matchedFontPointSize, const uint16_t fontPID);
-   	void attributeChange(const bool isOn, const uint8_t attribute);
-  	void spacingAfterParagraphChange(const float spacingRelative, const float spacingAbsolute);
-! 	void pageMarginChange(const uint8_t side, const uint16_t margin) {}
-! 	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent) {}
-  	void marginChange(const uint8_t side, const uint16_t margin);
-  	void paragraphMarginChange(const uint8_t side, const int16_t margin);
-  	void indentFirstLineChange(const int16_t offset);
---- 154,162 ----
-  	void fontChange(const uint16_t matchedFontPointSize, const uint16_t fontPID);
-   	void attributeChange(const bool isOn, const uint8_t attribute);
-  	void spacingAfterParagraphChange(const float spacingRelative, const float spacingAbsolute);
-! 	void pageMarginChange(const uint8_t /* side */, const uint16_t /* margin */) {}
-! 	void pageFormChange(const uint16_t /* length */, const uint16_t /* width */, const WPXFormOrientation /* orientation */,
-! 				const bool /* isPersistent */) {}
-  	void marginChange(const uint8_t side, const uint16_t margin);
-  	void paragraphMarginChange(const uint8_t side, const int16_t margin);
-  	void indentFirstLineChange(const int16_t offset);
-***************
-*** 174,181 ****
-  	void globalOff();
-  	void noteOn(const uint16_t textPID);
-  	void noteOff(const WPXNoteType noteType);
-! 	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, const uint16_t textPID) {}
-! 	void suppressPageCharacteristics(const uint8_t suppressCode) {}
-  	void endDocument() { WPXContentListener::endDocument(); };
-  
-   	void defineTable(const uint8_t position, const uint16_t leftOffset);
---- 175,182 ----
-  	void globalOff();
-  	void noteOn(const uint16_t textPID);
-  	void noteOff(const WPXNoteType noteType);
-! 	void headerFooterGroup(const uint8_t /* headerFooterType */, const uint8_t /* occurenceBits */, const uint16_t /* textPID */) {}
-! 	void suppressPageCharacteristics(const uint8_t /* suppressCode */) {}
-  	void endDocument() { WPXContentListener::endDocument(); };
-  
-   	void defineTable(const uint8_t position, const uint16_t leftOffset);
-*** misc/libwpd-0.8.7/src/lib/WP6DefaultInitialFontPacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6DefaultInitialFontPacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 27,33 ****
-  #include "WP6DefaultInitialFontPacket.h"
-  #include "libwpd_internal.h"
-  
-! WP6DefaultInitialFontPacket::WP6DefaultInitialFontPacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize)
-  	: WP6PrefixDataPacket(input)
-  {
-  	_read(input, dataOffset, dataSize);
---- 27,33 ----
-  #include "WP6DefaultInitialFontPacket.h"
-  #include "libwpd_internal.h"
-  
-! WP6DefaultInitialFontPacket::WP6DefaultInitialFontPacket(WPXInputStream *input, int /* id */, uint32_t dataOffset, uint32_t dataSize)
-  	: WP6PrefixDataPacket(input)
-  {
-  	_read(input, dataOffset, dataSize);
-*** misc/libwpd-0.8.7/src/lib/WP6ExtendedDocumentSummaryPacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6ExtendedDocumentSummaryPacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 28,34 ****
-  #include "WP6ExtendedDocumentSummaryPacket.h"
-  #include "libwpd_internal.h"
-  
-! WP6ExtendedDocumentSummaryPacket::WP6ExtendedDocumentSummaryPacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize) :
-  	WP6PrefixDataPacket(input),
-  	m_dataSize(dataSize),
-  	m_stream(NULL)
---- 28,34 ----
-  #include "WP6ExtendedDocumentSummaryPacket.h"
-  #include "libwpd_internal.h"
-  
-! WP6ExtendedDocumentSummaryPacket::WP6ExtendedDocumentSummaryPacket(WPXInputStream *input, int /* id */, uint32_t dataOffset, uint32_t dataSize) :
-  	WP6PrefixDataPacket(input),
-  	m_dataSize(dataSize),
-  	m_stream(NULL)
-*** misc/libwpd-0.8.7/src/lib/WP6FillStylePacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6FillStylePacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 28,34 ****
-  #include "WP6Parser.h"
-  #include "libwpd_internal.h"
-  
-! WP6FillStylePacket::WP6FillStylePacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize) 
-  	: WP6PrefixDataPacket(input)
-  {	
-  	_read(input, dataOffset, dataSize);
---- 28,34 ----
-  #include "WP6Parser.h"
-  #include "libwpd_internal.h"
-  
-! WP6FillStylePacket::WP6FillStylePacket(WPXInputStream *input, int /* id */, uint32_t dataOffset, uint32_t dataSize) 
-  	: WP6PrefixDataPacket(input)
-  {	
-  	_read(input, dataOffset, dataSize);
-*** misc/libwpd-0.8.7/src/lib/WP6FillStylePacket.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6FillStylePacket.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 38,44 ****
-  	WP6FillStylePacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize);
-  	~WP6FillStylePacket();
-  	void _readContents(WPXInputStream *input);
-! 	void parse(WP6Listener *listener) const {}
-  	const RGBSColor * getFgColor() const { return &m_fgColor; }
-  	const RGBSColor * getBgColor() const { return &m_bgColor; }
-  private:              
---- 38,44 ----
-  	WP6FillStylePacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize);
-  	~WP6FillStylePacket();
-  	void _readContents(WPXInputStream *input);
-! 	void parse(WP6Listener * /* listener */) const {}
-  	const RGBSColor * getFgColor() const { return &m_fgColor; }
-  	const RGBSColor * getBgColor() const { return &m_bgColor; }
-  private:              
-*** misc/libwpd-0.8.7/src/lib/WP6FontDescriptorPacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6FontDescriptorPacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 34,40 ****
-  const char * USELESS_WP_POSTFIX = "-WP";
-  #define countElements(a) ((sizeof(a) / sizeof(a[0])))
-  
-! WP6FontDescriptorPacket::WP6FontDescriptorPacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize) 
-  	: WP6PrefixDataPacket(input)
-  {
-  	_read(input, dataOffset, dataSize);
---- 34,40 ----
-  const char * USELESS_WP_POSTFIX = "-WP";
-  #define countElements(a) ((sizeof(a) / sizeof(a[0])))
-  
-! WP6FontDescriptorPacket::WP6FontDescriptorPacket(WPXInputStream *input, int /* id */, uint32_t dataOffset, uint32_t dataSize) 
-  	: WP6PrefixDataPacket(input)
-  {
-  	_read(input, dataOffset, dataSize);
-*** misc/libwpd-0.8.7/src/lib/WP6FootnoteEndnoteGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6FootnoteEndnoteGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 32,38 ****
-  	_read(input);
-  }
-  
-! void WP6FootnoteEndnoteGroup::_readContents(WPXInputStream *input)
-  {
-  }
-  
---- 32,38 ----
-  	_read(input);
-  }
-  
-! void WP6FootnoteEndnoteGroup::_readContents(WPXInputStream * /* input */)
-  {
-  }
-  
-*** misc/libwpd-0.8.7/src/lib/WP6GeneralTextPacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6GeneralTextPacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 28,34 ****
-  #include "WP6Parser.h"
-  #include "libwpd_internal.h"
-  
-! WP6GeneralTextPacket::WP6GeneralTextPacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize): 
-  	WP6PrefixDataPacket(input),
-  	m_subDocument(NULL)
-  {	
---- 28,34 ----
-  #include "WP6Parser.h"
-  #include "libwpd_internal.h"
-  
-! WP6GeneralTextPacket::WP6GeneralTextPacket(WPXInputStream *input, int /* id */, uint32_t dataOffset, uint32_t dataSize): 
-  	WP6PrefixDataPacket(input),
-  	m_subDocument(NULL)
-  {	
-*** misc/libwpd-0.8.7/src/lib/WP6OutlineStylePacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6OutlineStylePacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 27,33 ****
-  #include "WP6OutlineStylePacket.h"
-  #include "libwpd_internal.h"
-  
-! WP6OutlineStylePacket::WP6OutlineStylePacket(WPXInputStream *input, int id, uint32_t dataOffset, uint32_t dataSize) 
-  	: WP6PrefixDataPacket(input)
-  {
-  	_read(input, dataOffset, dataSize);
---- 27,33 ----
-  #include "WP6OutlineStylePacket.h"
-  #include "libwpd_internal.h"
-  
-! WP6OutlineStylePacket::WP6OutlineStylePacket(WPXInputStream *input, int /* id */, uint32_t dataOffset, uint32_t dataSize) 
-  	: WP6PrefixDataPacket(input)
-  {
-  	_read(input, dataOffset, dataSize);
-*** misc/libwpd-0.8.7/src/lib/WP6ParagraphGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6ParagraphGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 90,96 ****
-  	m_lineSpacing = lineSpacingIntegerPart + lineSpacingFractionalPart;
-  }
-  
-! void WP6ParagraphGroup_LineSpacingSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing a line spacing change of: %f\n", m_lineSpacing));
-  	listener->lineSpacingChange(m_lineSpacing);
---- 90,97 ----
-  	m_lineSpacing = lineSpacingIntegerPart + lineSpacingFractionalPart;
-  }
-  
-! void WP6ParagraphGroup_LineSpacingSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 							const uint16_t * /* prefixIDs */) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing a line spacing change of: %f\n", m_lineSpacing));
-  	listener->lineSpacingChange(m_lineSpacing);
-***************
-*** 209,215 ****
-  {
-  }
-  
-! void WP6ParagraphGroup_TabSetSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  #ifdef DEBUG
-  	WPD_DEBUG_MSG(("Parsing Tab Set (isRelative: %s, positions: ", (m_isRelative?"true":"false")));
---- 210,217 ----
-  {
-  }
-  
-! void WP6ParagraphGroup_TabSetSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 						const uint16_t * /* prefixIDs */) const
-  {
-  #ifdef DEBUG
-  	WPD_DEBUG_MSG(("Parsing Tab Set (isRelative: %s, positions: ", (m_isRelative?"true":"false")));
-***************
-*** 228,234 ****
-  	WPD_DEBUG_MSG(("WordPerfect: indent first line: %i\n", m_firstLineOffset));
-  }
-  
-! void WP6ParagraphGroup_IndentFirstLineSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing first line indent change of: %i\n", m_firstLineOffset));
-  	listener->indentFirstLineChange(m_firstLineOffset);
---- 230,237 ----
-  	WPD_DEBUG_MSG(("WordPerfect: indent first line: %i\n", m_firstLineOffset));
-  }
-  
-! void WP6ParagraphGroup_IndentFirstLineSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 							const uint16_t * /* prefixIDs */) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing first line indent change of: %i\n", m_firstLineOffset));
-  	listener->indentFirstLineChange(m_firstLineOffset);
-***************
-*** 240,246 ****
-  	WPD_DEBUG_MSG(("WordPerfect: left margin adjustment: %i\n", m_leftMargin));
-  }
-  
-! void WP6ParagraphGroup_LeftMarginAdjustmentSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing left margin adjustment change of: %i\n", m_leftMargin));
-  	listener->paragraphMarginChange(WPX_LEFT, m_leftMargin);
---- 243,250 ----
-  	WPD_DEBUG_MSG(("WordPerfect: left margin adjustment: %i\n", m_leftMargin));
-  }
-  
-! void WP6ParagraphGroup_LeftMarginAdjustmentSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 							const uint16_t * /* prefixIDs */) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing left margin adjustment change of: %i\n", m_leftMargin));
-  	listener->paragraphMarginChange(WPX_LEFT, m_leftMargin);
-***************
-*** 252,258 ****
-  	WPD_DEBUG_MSG(("WordPerfect: right margin adjustment: %i\n", m_rightMargin));
-  }
-  
-! void WP6ParagraphGroup_RightMarginAdjustmentSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing right margin adjustment change of: %i\n", m_rightMargin));
-  	listener->paragraphMarginChange(WPX_RIGHT, m_rightMargin);
---- 256,263 ----
-  	WPD_DEBUG_MSG(("WordPerfect: right margin adjustment: %i\n", m_rightMargin));
-  }
-  
-! void WP6ParagraphGroup_RightMarginAdjustmentSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 								const uint16_t * /* prefixIDs */) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing right margin adjustment change of: %i\n", m_rightMargin));
-  	listener->paragraphMarginChange(WPX_RIGHT, m_rightMargin);
-***************
-*** 263,269 ****
-  	m_justification = readU8(input);
-  }
-  
-! void WP6ParagraphGroup_JustificationModeSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	listener->justificationChange(m_justification);
-  }
---- 268,275 ----
-  	m_justification = readU8(input);
-  }
-  
-! void WP6ParagraphGroup_JustificationModeSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 								const uint16_t * /* prefixIDs */) const
-  {
-  	listener->justificationChange(m_justification);
-  }
-***************
-*** 287,293 ****
-  	}
-  }
-  
-! void WP6ParagraphGroup_SpacingAfterParagraphSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing a change of spacing after paragraph: relative %f, absolute %f\n",
-  			m_spacingAfterParagraphRelative, m_spacingAfterParagraphAbsolute));
---- 293,300 ----
-  	}
-  }
-  
-! void WP6ParagraphGroup_SpacingAfterParagraphSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 								const uint16_t * /* prefixIDs */) const
-  {
-  	WPD_DEBUG_MSG(("WordPerfect: parsing a change of spacing after paragraph: relative %f, absolute %f\n",
-  			m_spacingAfterParagraphRelative, m_spacingAfterParagraphAbsolute));
-***************
-*** 308,314 ****
-  		       m_numberingMethods[4], m_numberingMethods[5], m_numberingMethods[6], m_numberingMethods[7]));
-  }
-  
-! void WP6ParagraphGroup_OutlineDefineSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	listener->updateOutlineDefinition(paragraphGroup, m_outlineHash, m_numberingMethods, m_tabBehaviourFlag);
-  }
---- 315,322 ----
-  		       m_numberingMethods[4], m_numberingMethods[5], m_numberingMethods[6], m_numberingMethods[7]));
-  }
-  
-! void WP6ParagraphGroup_OutlineDefineSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */,
-! 						const uint16_t * /* prefixIDs */) const
-  {
-  	listener->updateOutlineDefinition(paragraphGroup, m_outlineHash, m_numberingMethods, m_tabBehaviourFlag);
-  }
-*** misc/libwpd-0.8.7/src/lib/WP6PrefixDataPacket.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6PrefixDataPacket.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 35,41 ****
-  #include "libwpd.h"
-  #include "libwpd_internal.h"
-  
-! WP6PrefixDataPacket::WP6PrefixDataPacket(WPXInputStream * input)
-  {
-  }
-  
---- 35,41 ----
-  #include "libwpd.h"
-  #include "libwpd_internal.h"
-  
-! WP6PrefixDataPacket::WP6PrefixDataPacket(WPXInputStream * /* input */)
-  {
-  }
-  
-*** misc/libwpd-0.8.7/src/lib/WP6PrefixDataPacket.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6PrefixDataPacket.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 37,43 ****
-  public:
-  	WP6PrefixDataPacket(WPXInputStream * input);	
-  	virtual ~WP6PrefixDataPacket() {}
-! 	virtual void parse(WP6Listener *listener) const {}
-  	virtual WP6SubDocument * getSubDocument() const { return NULL; }
-  
-  	static WP6PrefixDataPacket * constructPrefixDataPacket(WPXInputStream * input, WP6PrefixIndice *prefixIndice);
---- 37,43 ----
-  public:
-  	WP6PrefixDataPacket(WPXInputStream * input);	
-  	virtual ~WP6PrefixDataPacket() {}
-! 	virtual void parse(WP6Listener * /* listener */) const {}
-  	virtual WP6SubDocument * getSubDocument() const { return NULL; }
-  
-  	static WP6PrefixDataPacket * constructPrefixDataPacket(WPXInputStream * input, WP6PrefixIndice *prefixIndice);
-*** misc/libwpd-0.8.7/src/lib/WP6SingleByteFunction.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6SingleByteFunction.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 27,33 ****
-  #include "WP6SingleByteFunction.h"
-  #include "libwpd_internal.h"
-  
-! WP6SingleByteFunction * WP6SingleByteFunction::constructSingleByteFunction(WPXInputStream *input, uint8_t groupID)
-  {
-  
-  	switch (groupID) 
---- 27,33 ----
-  #include "WP6SingleByteFunction.h"
-  #include "libwpd_internal.h"
-  
-! WP6SingleByteFunction * WP6SingleByteFunction::constructSingleByteFunction(WPXInputStream * /* input */, uint8_t groupID)
-  {
-  
-  	switch (groupID) 
-*** misc/libwpd-0.8.7/src/lib/WP6StyleGroup.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6StyleGroup.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 32,38 ****
-  	m_systemStyleNumber = readU8(input);
-  }
-  
-! void WP6StyleGroup_GlobalOnSubGroup::parse(WP6Listener *listener, const uint8_t numPrefixIDs, uint16_t const *prefixIDs) const
-  {
-  	listener->globalOn(m_systemStyleNumber);
-  }
---- 32,38 ----
-  	m_systemStyleNumber = readU8(input);
-  }
-  
-! void WP6StyleGroup_GlobalOnSubGroup::parse(WP6Listener *listener, const uint8_t /* numPrefixIDs */, uint16_t const * /* prefixIDs */) const
-  {
-  	listener->globalOn(m_systemStyleNumber);
-  }
-*** misc/libwpd-0.8.7/src/lib/WP6StylesListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6StylesListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 108,114 ****
-  	}
-  }
-  
-! void WP6StylesListener::pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent)
-  {
-  	if (!isUndoOn())
-  	{
---- 108,114 ----
-  	}
-  }
-  
-! void WP6StylesListener::pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool /* isPersistent */)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 212,218 ****
-  	}
-  }
-  
-! void WP6StylesListener::defineTable(const uint8_t position, const uint16_t leftOffset)
-  {
-  	if (!isUndoOn()) 
-  	{			
---- 212,218 ----
-  	}
-  }
-  
-! void WP6StylesListener::defineTable(const uint8_t /* position */, const uint16_t /* leftOffset */)
-  {
-  	if (!isUndoOn()) 
-  	{			
-***************
-*** 243,249 ****
-  	}
-  }
-  
-! void WP6StylesListener::insertRow(const uint16_t rowHeight, const bool isMinimumHeight, const bool isHeaderRow)
-  {
-  	if (!isUndoOn()) 
-  	{
---- 243,249 ----
-  	}
-  }
-  
-! void WP6StylesListener::insertRow(const uint16_t /* rowHeight */, const bool /* isMinimumHeight */, const bool /* isHeaderRow */)
-  {
-  	if (!isUndoOn()) 
-  	{
-***************
-*** 253,261 ****
-  }
-  
-  void WP6StylesListener::insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits, 
-! 				const RGBSColor * cellFgColor, const RGBSColor * cellBgColor,
-! 				const RGBSColor * cellBorderColor, const WPXVerticalAlignment cellVerticalAlignment, 
-! 				const bool useCellAttributes, const uint32_t cellAttributes)
-  {
-  	if (!isUndoOn())
-  	{
---- 253,261 ----
-  }
-  
-  void WP6StylesListener::insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits, 
-! 				const RGBSColor * /* cellFgColor */, const RGBSColor * /* cellBgColor */,
-! 				const RGBSColor * /* cellBorderColor */, const WPXVerticalAlignment /* cellVerticalAlignment */, 
-! 				const bool /* useCellAttributes */, const uint32_t /* cellAttributes */)
-  {
-  	if (!isUndoOn())
-  	{
-***************
-*** 273,279 ****
-  	}
-  }
-  
-! void WP6StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList, int nextTableIndice)
-  {
-  	// We don't want to actual insert anything in the case of a sub-document, but we
-  	// do want to capture whatever table-related information is within it..
---- 273,280 ----
-  	}
-  }
-  
-! void WP6StylesListener::_handleSubDocument(const WPXSubDocument *subDocument, const bool isHeaderFooter, WPXTableList tableList,
-! 						int /* nextTableIndice */)
-  {
-  	// We don't want to actual insert anything in the case of a sub-document, but we
-  	// do want to capture whatever table-related information is within it..
-***************
-*** 311,317 ****
-  	}
-  }
-  
-! void WP6StylesListener::undoChange(const uint8_t undoType, const uint16_t undoLevel)
-  {
-  	if (undoType == WP6_UNDO_GROUP_INVALID_TEXT_START)
-  		setUndoOn(true);
---- 312,318 ----
-  	}
-  }
-  
-! void WP6StylesListener::undoChange(const uint8_t undoType, const uint16_t /* undoLevel */)
-  {
-  	if (undoType == WP6_UNDO_GROUP_INVALID_TEXT_START)
-  		setUndoOn(true);
-*** misc/libwpd-0.8.7/src/lib/WP6StylesListener.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6StylesListener.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 44,98 ****
-  public:
-  	WP6StylesListener(std::list<WPXPageSpan> &pageList, WPXTableList tableList);
-  
-! 	void setDate(const uint16_t year, const uint8_t month, const uint8_t day,
-! 		const uint8_t hour, const uint8_t minute, const uint8_t second,
-! 		const uint8_t dayOfWeek, const uint8_t timeZone, const uint8_t unused) {}
-! 	void setExtendedInformation(const uint16_t type, const WPXString &data) {}
-  	void startDocument() {}
-! 	void setAlignmentCharacter(const uint16_t character) {}
-! 	void setLeaderCharacter(const uint16_t character, const uint8_t numberOfSpaces) {}
-! 	void defineTabStops(const bool isRelative, const std::vector<WPXTabStop> &tabStops, 
-! 				    const std::vector<bool> &usePreWP9LeaderMethods) {}
-! 	void insertCharacter(const uint16_t character) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void insertTab(const uint8_t tabType, float tabPosition) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void handleLineBreak()  { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertEOL() { if (!isUndoOn()) m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void characterColorChange(const uint8_t red, const uint8_t green, const uint8_t blue) {}
-! 	void characterShadingChange(const uint8_t shading) {}
-! 	void highlightChange(const bool isOn, const RGBSColor color) {}
-! 	void fontChange(const uint16_t matchedFontPointSize, const uint16_t fontPID) {}
-! 	void attributeChange(const bool isOn, const uint8_t attribute) {}
-! 	void lineSpacingChange(const float lineSpacing) {}
-! 	void spacingAfterParagraphChange(const float spacingRelative, const float spacingAbsolute) {}
-! 	void justificationChange(const uint8_t justification) {}
-  	void pageMarginChange(const uint8_t side, const uint16_t margin);
-  	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent);
-  	void marginChange(const uint8_t side, const uint16_t margin);
-! 	void paragraphMarginChange(const uint8_t side, const int16_t margin) {}
-! 	void indentFirstLineChange(const int16_t offset) {}
-! 	void columnChange(const WPXTextColumnType columnType, const uint8_t numColumns, const std::vector<float> &columnWidth,
-! 				  const std::vector<bool> &isFixedWidth) {}
-! 	void updateOutlineDefinition(const WP6OutlineLocation outlineLocation, const uint16_t outlineHash,
-! 					     const uint8_t *numberingMethods, const uint8_t tabBehaviourFlag) {}
-  
-! 	void paragraphNumberOn(const uint16_t outlineHash, const uint8_t level, const uint8_t flag) {}
-  	void paragraphNumberOff() { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void displayNumberReferenceGroupOn(const uint8_t subGroup, const uint8_t level) {}
-! 	void displayNumberReferenceGroupOff(const uint8_t subGroup) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void styleGroupOn(const uint8_t subGroup) {}
-! 	void styleGroupOff(const uint8_t subGroup) {}
-! 	void globalOn(const uint8_t systemStyle) {}
-  	void globalOff() {}
-  	void noteOn(const uint16_t textPID);
-! 	void noteOff(const WPXNoteType noteType) {}
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, const uint16_t textPID);
-  	void suppressPageCharacteristics(const uint8_t suppressCode);
-  	void endDocument();
-  
-   	void defineTable(const uint8_t position, const uint16_t leftOffset);
-! 	void addTableColumnDefinition(const uint32_t width, const uint32_t leftGutter, const uint32_t rightGutter,
-! 				const uint32_t attributes, const uint8_t alignment) {}
-  	void startTable();
-   	void insertRow(const uint16_t rowHeight, const bool isMinimumHeight, const bool isHeaderRow);
-   	void insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits, 
---- 44,98 ----
-  public:
-  	WP6StylesListener(std::list<WPXPageSpan> &pageList, WPXTableList tableList);
-  
-! 	void setDate(const uint16_t /* year */, const uint8_t /* month */, const uint8_t /* day */,
-! 		const uint8_t /* hour */, const uint8_t /* minute */, const uint8_t /* second */,
-! 		const uint8_t /* dayOfWeek */, const uint8_t /* timeZone */, const uint8_t /* unused */) {}
-! 	void setExtendedInformation(const uint16_t /* type */, const WPXString & /* data */) {}
-  	void startDocument() {}
-! 	void setAlignmentCharacter(const uint16_t /* character */) {}
-! 	void setLeaderCharacter(const uint16_t /* character */, const uint8_t /* numberOfSpaces */) {}
-! 	void defineTabStops(const bool /* isRelative */, const std::vector<WPXTabStop> & /* tabStops */, 
-! 				    const std::vector<bool> & /* usePreWP9LeaderMethods */) {}
-! 	void insertCharacter(const uint16_t /* character */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void insertTab(const uint8_t /* tabType */, float /* tabPosition */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void handleLineBreak()  { if (!isUndoOn()) m_currentPageHasContent = true; }
-  	void insertEOL() { if (!isUndoOn()) m_currentPageHasContent = true; }
-   	void insertBreak(const uint8_t breakType);
-! 	void characterColorChange(const uint8_t /* red */, const uint8_t /* green */, const uint8_t /* blue */) {}
-! 	void characterShadingChange(const uint8_t /* shading */) {}
-! 	void highlightChange(const bool /* isOn */, const RGBSColor /* color */) {}
-! 	void fontChange(const uint16_t /* matchedFontPointSize */, const uint16_t /* fontPID */) {}
-! 	void attributeChange(const bool /* isOn */, const uint8_t /* attribute */) {}
-! 	void lineSpacingChange(const float /* lineSpacing */) {}
-! 	void spacingAfterParagraphChange(const float /* spacingRelative */, const float /* spacingAbsolute */) {}
-! 	void justificationChange(const uint8_t /* justification */) {}
-  	void pageMarginChange(const uint8_t side, const uint16_t margin);
-  	void pageFormChange(const uint16_t length, const uint16_t width, const WPXFormOrientation orientation, const bool isPersistent);
-  	void marginChange(const uint8_t side, const uint16_t margin);
-! 	void paragraphMarginChange(const uint8_t /* side */, const int16_t /* margin */) {}
-! 	void indentFirstLineChange(const int16_t /* offset */) {}
-! 	void columnChange(const WPXTextColumnType /* columnType */, const uint8_t /* numColumns */,
-! 				const std::vector<float> & /* columnWidth */, const std::vector<bool> & /* isFixedWidth */) {}
-! 	void updateOutlineDefinition(const WP6OutlineLocation /* outlineLocation */, const uint16_t /* outlineHash */,
-! 					     const uint8_t * /* numberingMethods */, const uint8_t /* tabBehaviourFlag */) {}
-  
-! 	void paragraphNumberOn(const uint16_t /* outlineHash */, const uint8_t /* level */, const uint8_t /* flag */) {}
-  	void paragraphNumberOff() { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void displayNumberReferenceGroupOn(const uint8_t /* subGroup */, const uint8_t /* level */) {}
-! 	void displayNumberReferenceGroupOff(const uint8_t /* subGroup */) { if (!isUndoOn()) m_currentPageHasContent = true; }
-! 	void styleGroupOn(const uint8_t /* subGroup */) {}
-! 	void styleGroupOff(const uint8_t /* subGroup */) {}
-! 	void globalOn(const uint8_t /* systemStyle */) {}
-  	void globalOff() {}
-  	void noteOn(const uint16_t textPID);
-! 	void noteOff(const WPXNoteType /* noteType */) {}
-  	void headerFooterGroup(const uint8_t headerFooterType, const uint8_t occurenceBits, const uint16_t textPID);
-  	void suppressPageCharacteristics(const uint8_t suppressCode);
-  	void endDocument();
-  
-   	void defineTable(const uint8_t position, const uint16_t leftOffset);
-! 	void addTableColumnDefinition(const uint32_t /* width */, const uint32_t /* leftGutter */, const uint32_t /* rightGutter */,
-! 				const uint32_t /* attributes */, const uint8_t /* alignment */) {}
-  	void startTable();
-   	void insertRow(const uint16_t rowHeight, const bool isMinimumHeight, const bool isHeaderRow);
-   	void insertCell(const uint8_t colSpan, const uint8_t rowSpan, const uint8_t borderBits, 
-*** misc/libwpd-0.8.7/src/lib/WP6UnsupportedFixedLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6UnsupportedFixedLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 32,41 ****
-  {
-   public:
-  	WP6UnsupportedFixedLengthGroup(WPXInputStream *input, uint8_t groupID);	
-! 	void parse(WP6Listener *listener) {}
-  	
-   protected:
-! 	void _readContents(WPXInputStream *input) {}
-  };
-  
-  #endif /* WP6UNSUPPORTEDFIXEDLENGTHGROUP_H */
---- 32,41 ----
-  {
-   public:
-  	WP6UnsupportedFixedLengthGroup(WPXInputStream *input, uint8_t groupID);	
-! 	void parse(WP6Listener * /* listener */) {}
-  	
-   protected:
-! 	void _readContents(WPXInputStream * /* input */) {}
-  };
-  
-  #endif /* WP6UNSUPPORTEDFIXEDLENGTHGROUP_H */
-*** misc/libwpd-0.8.7/src/lib/WP6UnsupportedVariableLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6UnsupportedVariableLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 35,41 ****
-  {
-   public:
-  	WP6UnsupportedVariableLengthGroup(WPXInputStream *input);	
-! 	void parse(WP6Listener *listener) {}
-  };
-  
-  #endif /* WP6UNSUPPORTEDVARIABLELENGTHGROUP_H */
---- 35,41 ----
-  {
-   public:
-  	WP6UnsupportedVariableLengthGroup(WPXInputStream *input);	
-! 	void parse(WP6Listener * /* listener */) {}
-  };
-  
-  #endif /* WP6UNSUPPORTEDVARIABLELENGTHGROUP_H */
-*** misc/libwpd-0.8.7/src/lib/WP6VariableLengthGroup.h	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WP6VariableLengthGroup.h	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 48,54 ****
-  
-  protected:
-  	void _read(WPXInputStream *input);
-! 	virtual void _readContents(WPXInputStream *input) {} // we don't always need more information than that provided generically
-  
-  	const uint8_t getSubGroup() const { return m_subGroup; }
-  	const uint16_t getSize() const { return m_size; }
---- 48,54 ----
-  
-  protected:
-  	void _read(WPXInputStream *input);
-! 	virtual void _readContents(WPXInputStream * /* input */) {} // we don't always need more information than that provided generically
-  
-  	const uint8_t getSubGroup() const { return m_subGroup; }
-  	const uint16_t getSize() const { return m_size; }
-*** misc/libwpd-0.8.7/src/lib/WPDocument.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WPDocument.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 167,174 ****
-  
-  		return WPD_CONFIDENCE_NONE;
-  	}
-- 
-- 	return WPD_CONFIDENCE_NONE;
-  }
-  
-  /**
---- 167,172 ----
-***************
-*** 263,269 ****
-  			{
-  				WPD_DEBUG_MSG(("WordPerfect: Mostly likely the file format is WP Mac 1.x.\n\n"));
-  				WPD_DEBUG_MSG(("WordPerfect: Using the WP Mac 1.x parser.\n\n"));
-! 				WP1Parser *parser = new WP1Parser(document);
-  				parser->parse(listenerImpl);
-  				DELETEP(parser);
-  			}
---- 261,267 ----
-  			{
-  				WPD_DEBUG_MSG(("WordPerfect: Mostly likely the file format is WP Mac 1.x.\n\n"));
-  				WPD_DEBUG_MSG(("WordPerfect: Using the WP Mac 1.x parser.\n\n"));
-! 				parser = new WP1Parser(document);
-  				parser->parse(listenerImpl);
-  				DELETEP(parser);
-  			}
-***************
-*** 271,277 ****
-  			{
-  				WPD_DEBUG_MSG(("WordPerfect: Mostly likely the file format is WP4.2.\n\n"));
-  				WPD_DEBUG_MSG(("WordPerfect: Using the WP4.2 parser.\n\n"));
-! 				WP42Parser *parser = new WP42Parser(document);
-  				parser->parse(listenerImpl);
-  				DELETEP(parser);
-  			}
---- 269,275 ----
-  			{
-  				WPD_DEBUG_MSG(("WordPerfect: Mostly likely the file format is WP4.2.\n\n"));
-  				WPD_DEBUG_MSG(("WordPerfect: Using the WP4.2 parser.\n\n"));
-! 				parser = new WP42Parser(document);
-  				parser->parse(listenerImpl);
-  				DELETEP(parser);
-  			}
-*** misc/libwpd-0.8.7/src/lib/WPXContentListener.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WPXContentListener.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 290,296 ****
-  	{
-  		if (!currentPage.getHeaderFooterSuppression((*iter).getInternalType()))
-  		{
-! 			WPXPropertyList propList;
-  			switch ((*iter).getOccurence())
-  			{
-  			case ODD:
---- 290,296 ----
-  	{
-  		if (!currentPage.getHeaderFooterSuppression((*iter).getInternalType()))
-  		{
-! 			propList.clear();
-  			switch ((*iter).getOccurence())
-  			{
-  			case ODD:
-*** misc/libwpd-0.8.7/src/lib/WPXHeader.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WPXHeader.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 35,41 ****
-  #include "libwpd.h"
-  #include "libwpd_internal.h"
-  	
-! WPXHeader::WPXHeader(WPXInputStream *input, uint32_t documentOffset, uint8_t productType, uint8_t fileType, uint8_t majorVersion, uint8_t minorVersion, uint16_t documentEncryption) :
-  	m_documentOffset(documentOffset),
-  	m_productType(productType),
-  	m_fileType(fileType),
---- 35,42 ----
-  #include "libwpd.h"
-  #include "libwpd_internal.h"
-  	
-! WPXHeader::WPXHeader(WPXInputStream * /* input */, uint32_t documentOffset, uint8_t productType,
-! 			uint8_t fileType, uint8_t majorVersion, uint8_t minorVersion, uint16_t documentEncryption) :
-  	m_documentOffset(documentOffset),
-  	m_productType(productType),
-  	m_fileType(fileType),
-*** misc/libwpd-0.8.7/src/lib/WPXPart.cpp	2006-10-09 05:42:27.000000000 +0200
---- misc/build/libwpd-0.8.7/src/lib/WPXPart.cpp	2006-11-10 16:53:32.000000000 +0100
-***************
-*** 25,30 ****
-  
-  #include "WPXPart.h"
-  
-! WPXPart::WPXPart(WPXInputStream *input)
-  {
-  }
---- 25,30 ----
-  
-  #include "WPXPart.h"
-  
-! WPXPart::WPXPart(WPXInputStream * /* input */)
-  {
-  }
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libwpd/libwpd-0.8.8.diff	15 Jan 2007 13:49:31 -0000	1.1.2.6
@@ -0,0 +1,690 @@
+*** misc/libwpd-0.8.8/src/lib/WP1Part.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP1Part.cpp	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 46,51 ****
+--- 46,58 ----
+  	}
+  	else if (WP1_FUNCTION_GROUP_SIZE[readVal-0xC0] == -1)
+  	{
++ 		// Should not happen because the heuristics would not recognize this file as a well formed WP1 file,
++ 		// Nonetheless if we ever change the parts using the heuristics, this will be a check useful to have
++ 		if (!WP1VariableLengthGroup::isGroupConsistent(input, readVal))
++ 		{
++ 			WPD_DEBUG_MSG(("WordPerfect: Consistency Check (variable length) failed; ignoring this byte\n"));
++ 			return 0;
++ 		}
+  		WPD_DEBUG_MSG(("WordPerfect: constructVariableLengthGroup\n"));
+  		return WP1VariableLengthGroup::constructVariableLengthGroup(input, readVal);
+  	}
+*** misc/libwpd-0.8.8/src/lib/WP1SetTabsGroup.cpp	2007-01-05 11:21:16.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP1SetTabsGroup.cpp	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 39,45 ****
+  void WP1SetTabsGroup::_readContents(WPXInputStream *input)
+  {
+  	// Skip first the old condensed tab table
+! 	while (readU8(input) != 0xff)
+  		input->seek(2, WPX_SEEK_CUR);
+  
+  	// Now read the new condensed tab table
+--- 39,45 ----
+  void WP1SetTabsGroup::_readContents(WPXInputStream *input)
+  {
+  	// Skip first the old condensed tab table
+! 	while (readU8(input) != 0xff && !input->atEOS())
+  		input->seek(2, WPX_SEEK_CUR);
+  
+  	// Now read the new condensed tab table
+***************
+*** 47,54 ****
+  	float tmpTabPosition = 0.0f;
+  	WPXTabStop tmpTabStop = WPXTabStop();
+  
+! 	while ((tmpTabType = read8(input)) & 0xff != 0xff)
+  	{
+  		tmpTabPosition = (float)((double)readU16(input, true) / 72.0f);
+  
+  		if (tmpTabType < 0)
+--- 47,56 ----
+  	float tmpTabPosition = 0.0f;
+  	WPXTabStop tmpTabStop = WPXTabStop();
+  
+! 	while (((tmpTabType = read8(input)) & 0xff) != 0xff)
+  	{
++ 		if (input->atEOS())
++ 			throw FileException();
+  		tmpTabPosition = (float)((double)readU16(input, true) / 72.0f);
+  
+  		if (tmpTabType < 0)
+*** misc/libwpd-0.8.8/src/lib/WP1SubDocument.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP1SubDocument.cpp	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 26,32 ****
+  #include "WP1Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP1SubDocument::WP1SubDocument(WPXInputStream *input, const int dataSize) :
+  	WPXSubDocument(input, dataSize)
+  {
+  }
+--- 26,32 ----
+  #include "WP1Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP1SubDocument::WP1SubDocument(WPXInputStream *input, const unsigned dataSize) :
+  	WPXSubDocument(input, dataSize)
+  {
+  }
+*** misc/libwpd-0.8.8/src/lib/WP1SubDocument.h	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP1SubDocument.h	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 32,38 ****
+  class WP1SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP1SubDocument(WPXInputStream *input, const int dataSize);
+  	void parse(WP1Listener *listener) const;
+  
+  };
+--- 32,38 ----
+  class WP1SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP1SubDocument(WPXInputStream *input, const unsigned dataSize);
+  	void parse(WP1Listener *listener) const;
+  
+  };
+*** misc/libwpd-0.8.8/src/lib/WP3PageFormatGroup.cpp	2007-01-05 11:21:13.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP3PageFormatGroup.cpp	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 91,98 ****
+  
+  		m_isRelative = (readU8(input) & 0x01);
+  
+! 		while ((tmpTabType = read8(input)) & 0xff != 0xff)
+  		{
+  			tmpTabPosition = fixedPointToFloat(readU32(input, true)) / 72.0f;
+  
+  			if (tmpTabType < 0)
+--- 91,100 ----
+  
+  		m_isRelative = (readU8(input) & 0x01);
+  
+! 		while (((tmpTabType = read8(input)) & 0xff) != 0xff)
+  		{
++ 			if (input->atEOS())
++ 				throw FileException();
+  			tmpTabPosition = fixedPointToFloat(readU32(input, true)) / 72.0f;
+  
+  			if (tmpTabType < 0)
+*** misc/libwpd-0.8.8/src/lib/WP3SubDocument.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP3SubDocument.cpp	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 26,32 ****
+  #include "WP3Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP3SubDocument::WP3SubDocument(WPXInputStream *input, const int dataSize) :
+  	WPXSubDocument(input, dataSize)
+  {
+  }
+--- 26,32 ----
+  #include "WP3Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP3SubDocument::WP3SubDocument(WPXInputStream *input, const unsigned dataSize) :
+  	WPXSubDocument(input, dataSize)
+  {
+  }
+*** misc/libwpd-0.8.8/src/lib/WP3SubDocument.h	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP3SubDocument.h	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 32,38 ****
+  class WP3SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP3SubDocument(WPXInputStream *input, const int dataSize);
+  	void parse(WP3Listener *listener) const;
+  
+  };
+--- 32,38 ----
+  class WP3SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP3SubDocument(WPXInputStream *input, const unsigned dataSize);
+  	void parse(WP3Listener *listener) const;
+  
+  };
+*** misc/libwpd-0.8.8/src/lib/WP3TablesGroup.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP3TablesGroup.cpp	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 50,59 ****
+  {
+  	// this group can contain different kinds of data, thus we need to read
+  	// the contents accordingly
+! 	uint8_t i;
+  	switch (getSubGroup())
+  	{
+  	case WP3_TABLES_GROUP_TABLE_FUNCTION:
+  		input->seek(71, WPX_SEEK_CUR);
+  		m_tableMode = readU8(input);
+  		m_offsetFromLeftEdge = readU32(input, true);
+--- 50,61 ----
+  {
+  	// this group can contain different kinds of data, thus we need to read
+  	// the contents accordingly
+! 	uint8_t i=0;
+! 	long startPosition = 0;
+  	switch (getSubGroup())
+  	{
+  	case WP3_TABLES_GROUP_TABLE_FUNCTION:
++ 		startPosition = input->tell();
+  		input->seek(71, WPX_SEEK_CUR);
+  		m_tableMode = readU8(input);
+  		m_offsetFromLeftEdge = readU32(input, true);
+***************
+*** 63,70 ****
+--- 65,76 ----
+  		m_rightGutterSpacing = readU32(input, true);
+  		input->seek(3, WPX_SEEK_CUR);
+  		m_numColumns = readU8(input);
++ 		if ((m_numColumns > 32) || ((input->tell() - startPosition + m_numColumns*10) > (getSize() - 4)))
++ 			throw FileException();
+  		for (i=0; i<m_numColumns; i++)
+  		{
++ 			if (input->atEOS())
++ 				throw FileException();
+  			m_columnMode[i] = readU8(input);
+  			m_numberFormat[i] = readU8(input);
+  			m_columnWidth[i] = readU32(input, true);
+***************
+*** 120,126 ****
+  	{
+  	case WP3_TABLES_GROUP_TABLE_FUNCTION:
+  		listener->defineTable(m_tableMode, fixedPointToWPUs(m_offsetFromLeftEdge));
+! 		for (i=0; i<m_numColumns; i++)
+  			listener->addTableColumnDefinition(fixedPointToWPUs(m_columnWidth[i]), fixedPointToWPUs(m_leftGutterSpacing),
+  								fixedPointToWPUs(m_rightGutterSpacing), 0, LEFT);
+  		listener->startTable();
+--- 126,132 ----
+  	{
+  	case WP3_TABLES_GROUP_TABLE_FUNCTION:
+  		listener->defineTable(m_tableMode, fixedPointToWPUs(m_offsetFromLeftEdge));
+! 		for (i=0; i<m_numColumns && i <= 32; i++)
+  			listener->addTableColumnDefinition(fixedPointToWPUs(m_columnWidth[i]), fixedPointToWPUs(m_leftGutterSpacing),
+  								fixedPointToWPUs(m_rightGutterSpacing), 0, LEFT);
+  		listener->startTable();
+*** misc/libwpd-0.8.8/src/lib/WP42SubDocument.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP42SubDocument.cpp	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 26,37 ****
+  #include "WP42Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP42SubDocument::WP42SubDocument(uint8_t * streamData, const int dataSize) :
+  	WPXSubDocument(streamData, dataSize)
+  {
+  }
+  
+! WP42SubDocument::WP42SubDocument(WPXInputStream *input, const int dataSize) :
+  	WPXSubDocument(input, dataSize)
+  {
+  }
+--- 26,37 ----
+  #include "WP42Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP42SubDocument::WP42SubDocument(uint8_t * streamData, const unsigned dataSize) :
+  	WPXSubDocument(streamData, dataSize)
+  {
+  }
+  
+! WP42SubDocument::WP42SubDocument(WPXInputStream *input, const unsigned dataSize) :
+  	WPXSubDocument(input, dataSize)
+  {
+  }
+*** misc/libwpd-0.8.8/src/lib/WP42SubDocument.h	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP42SubDocument.h	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 32,39 ****
+  class WP42SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP42SubDocument(uint8_t * streamData, const int dataSize);
+! 	WP42SubDocument(WPXInputStream *input, const int dataSize);
+  	void parse(WP42Listener *listener) const;
+  
+  };
+--- 32,39 ----
+  class WP42SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP42SubDocument(uint8_t * streamData, const unsigned dataSize);
+! 	WP42SubDocument(WPXInputStream *input, const unsigned dataSize);
+  	void parse(WP42Listener *listener) const;
+  
+  };
+*** misc/libwpd-0.8.8/src/lib/WP5DefinitionGroup.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP5DefinitionGroup.cpp	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 26,32 ****
+  #include "WP5Listener.h"
+  #include "libwpd_internal.h"
+  
+! WP5DefinitionGroup_DefineTablesSubGroup::WP5DefinitionGroup_DefineTablesSubGroup(WPXInputStream *input) :
+  	WP5VariableLengthGroup_SubGroup(),
+  	m_position(0),
+  	m_numColumns(0),
+--- 26,32 ----
+  #include "WP5Listener.h"
+  #include "libwpd_internal.h"
+  
+! WP5DefinitionGroup_DefineTablesSubGroup::WP5DefinitionGroup_DefineTablesSubGroup(WPXInputStream *input, uint16_t subGroupSize) :
+  	WP5VariableLengthGroup_SubGroup(),
+  	m_position(0),
+  	m_numColumns(0),
+***************
+*** 34,39 ****
+--- 34,40 ----
+  	m_leftGutter(0),
+  	m_rightGutter(0)
+  {
++ 	long startPosition = input->tell();
+  	// Skip useless old values to read the old column number
+  	input->seek(2, WPX_SEEK_CUR);
+  	m_numColumns = readU16(input);
+***************
+*** 50,61 ****
+--- 51,76 ----
+  	input->seek(10, WPX_SEEK_CUR);
+  	m_leftOffset = readU16(input);
+  	int i;
++ 	if ((m_numColumns > 32) || ((input->tell() - startPosition + m_numColumns*5) > (subGroupSize - 4)))
++ 		throw FileException();
+  	for (i=0; i < m_numColumns; i++)
++ 	{
++ 		if (input->atEOS())
++ 			throw FileException();
+  		m_columnWidth[i] = readU16(input);
++ 	}
+  	for (i=0; i < m_numColumns; i++)
++ 	{
++ 		if (input->atEOS())
++ 			throw FileException();
+  		m_attributeBits[i] = readU16(input);
++ 	}
+  	for (i=0; i < m_numColumns; i++)
++ 	{
++ 		if (input->atEOS())
++ 			throw FileException();
+  		m_columnAlignment[i] = readU8(input);
++ 	}
+  }
+  
+  void WP5DefinitionGroup_DefineTablesSubGroup::parse(WP5Listener *listener)
+***************
+*** 88,94 ****
+  	switch(getSubGroup())
+  	{
+  		case WP5_TOP_DEFINITION_GROUP_DEFINE_TABLES:
+! 			m_subGroupData = new WP5DefinitionGroup_DefineTablesSubGroup(input);
+  			break;
+  		default:
+  			break;
+--- 103,109 ----
+  	switch(getSubGroup())
+  	{
+  		case WP5_TOP_DEFINITION_GROUP_DEFINE_TABLES:
+! 			m_subGroupData = new WP5DefinitionGroup_DefineTablesSubGroup(input, getSize());
+  			break;
+  		default:
+  			break;
+*** misc/libwpd-0.8.8/src/lib/WP5DefinitionGroup.h	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP5DefinitionGroup.h	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 31,37 ****
+  class WP5DefinitionGroup_DefineTablesSubGroup : public WP5VariableLengthGroup_SubGroup
+  {
+  public:
+! 	WP5DefinitionGroup_DefineTablesSubGroup(WPXInputStream *input);
+  	void parse(WP5Listener *listener);
+  
+  private:
+--- 31,37 ----
+  class WP5DefinitionGroup_DefineTablesSubGroup : public WP5VariableLengthGroup_SubGroup
+  {
+  public:
+! 	WP5DefinitionGroup_DefineTablesSubGroup(WPXInputStream *input, uint16_t subGroupSize);
+  	void parse(WP5Listener *listener);
+  
+  private:
+***************
+*** 58,64 ****
+  
+  private:
+  	WP5VariableLengthGroup_SubGroup * m_subGroupData;
+- 
+  };
+  
+  #endif /* WP5DEFINITIONGROUP_H */
+--- 58,63 ----
+*** misc/libwpd-0.8.8/src/lib/WP5SubDocument.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP5SubDocument.cpp	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 26,32 ****
+  #include "WP5Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP5SubDocument::WP5SubDocument(WPXInputStream *input, const int dataSize) :
+  	WPXSubDocument(input, dataSize)
+  {
+  }
+--- 26,32 ----
+  #include "WP5Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP5SubDocument::WP5SubDocument(WPXInputStream *input, const unsigned dataSize) :
+  	WPXSubDocument(input, dataSize)
+  {
+  }
+*** misc/libwpd-0.8.8/src/lib/WP5SubDocument.h	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP5SubDocument.h	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 32,38 ****
+  class WP5SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP5SubDocument(WPXInputStream *input, const int dataSize);
+  	void parse(WP5Listener *listener) const;
+  
+  };
+--- 32,38 ----
+  class WP5SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP5SubDocument(WPXInputStream *input, const unsigned dataSize);
+  	void parse(WP5Listener *listener) const;
+  
+  };
+*** misc/libwpd-0.8.8/src/lib/WP6ExtendedDocumentSummaryPacket.cpp	2007-01-05 11:30:07.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP6ExtendedDocumentSummaryPacket.cpp	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 24,29 ****
+--- 24,30 ----
+   * Corel Corporation or Corel Corporation Limited."
+   */
+  #include <string.h>
++ #include <limits>
+  
+  #include "WP6ExtendedDocumentSummaryPacket.h"
+  #include "libwpd_internal.h"
+***************
+*** 47,52 ****
+--- 48,55 ----
+  {
+  	if (m_dataSize <= 0)
+  		return;
++ 	if (m_dataSize > ((std::numeric_limits<uint32_t>::max)() / 2))
++ 		m_dataSize = ((std::numeric_limits<uint32_t>::max)() / 2);
+  	uint8_t *streamData = new uint8_t[m_dataSize];
+  	for(unsigned i=0; i<(unsigned)m_dataSize; i++)
+  		streamData[i] = readU8(input);
+*** misc/libwpd-0.8.8/src/lib/WP6FontDescriptorPacket.cpp	2007-01-04 12:52:35.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP6FontDescriptorPacket.cpp	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 23,29 ****
+   * Corel Corporation or Corel Corporation Limited."
+   */
+  #include <string.h>
+! 
+  #include "WP6FontDescriptorPacket.h"
+  #include "libwpd_internal.h"
+  
+--- 23,29 ----
+   * Corel Corporation or Corel Corporation Limited."
+   */
+  #include <string.h>
+! #include <limits>
+  #include "WP6FontDescriptorPacket.h"
+  #include "libwpd_internal.h"
+  
+***************
+*** 69,77 ****
+  
+     m_fontNameLength = readU16(input); 
+  
+!    // TODO: re-do sanity checking
+!    //if(m_fontNameLength < WP_FONT_NAME_MAX_LENGTH)
+!    //{	
+     if (m_fontNameLength == 0) 
+  	   {
+  		   m_fontName = new char[1];
+--- 69,77 ----
+  
+     m_fontNameLength = readU16(input); 
+  
+! 
+!    if (m_fontNameLength > ((std::numeric_limits<uint16_t>::max)() / 2))
+!        m_fontNameLength = ((std::numeric_limits<uint16_t>::max)() / 2);
+     if (m_fontNameLength == 0) 
+  	   {
+  		   m_fontName = new char[1];
+*** misc/libwpd-0.8.8/src/lib/WP6GeneralTextPacket.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP6GeneralTextPacket.cpp	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 43,48 ****
+--- 43,49 ----
+  
+  void WP6GeneralTextPacket::_readContents(WPXInputStream *input)
+  {
++ 	long startPosition = input->tell();
+  	uint16_t numTextBlocks = readU16(input);
+  	input->seek(4, WPX_SEEK_CUR);
+  
+***************
+*** 53,65 ****
+  	}
+  	
+  	uint32_t *blockSizes = new uint32_t[numTextBlocks];
+! 	int totalSize = 0;
+! 	unsigned int i;
+  
+  	for(i=0; i<numTextBlocks; i++)
+  	{
+  		blockSizes[i] = readU32(input);
+! 		totalSize += blockSizes[i];
+  	}	
+  
+  	if (totalSize <= 0)
+--- 54,71 ----
+  	}
+  	
+  	uint32_t *blockSizes = new uint32_t[numTextBlocks];
+! 	unsigned int totalSize = 0;
+! 	unsigned int i = 0;
+  
+  	for(i=0; i<numTextBlocks; i++)
+  	{
++ 		if ((input->tell() - startPosition + 4) > getDataSize() || input->atEOS())
++ 			throw FileException();
+  		blockSizes[i] = readU32(input);
+! 		unsigned int newTotalSize = totalSize + blockSizes[i];
+! 		if (newTotalSize < totalSize)
+! 			throw FileException();
+! 		totalSize = newTotalSize;
+  	}	
+  
+  	if (totalSize <= 0)
+***************
+*** 73,78 ****
+--- 79,86 ----
+  	int streamPos = 0;
+  	for(i=0; i<numTextBlocks; i++) 
+  	{
++ 		if ((input->tell() - startPosition + blockSizes[i]) > getDataSize() || input->atEOS())
++ 			throw FileException();
+  		for (unsigned int j=0; j<blockSizes[i]; j++)
+  		{
+  			streamData[streamPos] = readU8(input);
+*** misc/libwpd-0.8.8/src/lib/WP6PrefixDataPacket.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP6PrefixDataPacket.cpp	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 35,41 ****
+  #include "libwpd.h"
+  #include "libwpd_internal.h"
+  
+! WP6PrefixDataPacket::WP6PrefixDataPacket(WPXInputStream * /* input */)
+  {
+  }
+  
+--- 35,42 ----
+  #include "libwpd.h"
+  #include "libwpd_internal.h"
+  
+! WP6PrefixDataPacket::WP6PrefixDataPacket(WPXInputStream * /* input */) :
+! 	m_dataSize(0)
+  {
+  }
+  
+***************
+*** 74,80 ****
+  
+  void WP6PrefixDataPacket::_read(WPXInputStream *input, uint32_t dataOffset, uint32_t dataSize)
+  {
+! 	if (!dataSize)
+  		return;
+  
+  	input->seek(dataOffset, WPX_SEEK_SET);
+--- 75,83 ----
+  
+  void WP6PrefixDataPacket::_read(WPXInputStream *input, uint32_t dataOffset, uint32_t dataSize)
+  {
+! 	m_dataSize = dataSize;
+! 
+! 	if (!m_dataSize)
+  		return;
+  
+  	input->seek(dataOffset, WPX_SEEK_SET);
+*** misc/libwpd-0.8.8/src/lib/WP6PrefixDataPacket.h	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP6PrefixDataPacket.h	2007-01-13 00:18:52.000000000 +0100
+***************
+*** 39,50 ****
+--- 39,54 ----
+  	virtual ~WP6PrefixDataPacket() {}
+  	virtual void parse(WP6Listener * /* listener */) const {}
+  	virtual WP6SubDocument * getSubDocument() const { return 0; }
++ 	const uint32_t getDataSize() const { return m_dataSize; }
+  
+  	static WP6PrefixDataPacket * constructPrefixDataPacket(WPXInputStream * input, WP6PrefixIndice *prefixIndice);
+  
+  protected:
+  	virtual void _readContents(WPXInputStream *input) = 0;
+   	void _read(WPXInputStream *input, uint32_t dataOffset, uint32_t dataSize);
++ 
++ private:
++ 	uint32_t m_dataSize;
+  };
+  
+  #endif /* WP6PREFIXDATAPACKET_H */
+*** misc/libwpd-0.8.8/src/lib/WP6SubDocument.cpp	2007-01-03 14:07:55.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP6SubDocument.cpp	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 26,32 ****
+  #include "WP6Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP6SubDocument::WP6SubDocument(uint8_t * streamData, const int dataSize) :
+  	WPXSubDocument(streamData, dataSize)
+  {
+  }
+--- 26,32 ----
+  #include "WP6Parser.h"
+  #include "libwpd_internal.h"
+  
+! WP6SubDocument::WP6SubDocument(uint8_t * streamData, const unsigned dataSize) :
+  	WPXSubDocument(streamData, dataSize)
+  {
+  }
+*** misc/libwpd-0.8.8/src/lib/WP6SubDocument.h	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WP6SubDocument.h	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 32,38 ****
+  class WP6SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP6SubDocument(uint8_t * streamData, const int dataSize);
+  	void parse(WP6Listener *listener) const;
+  };
+  #endif /* WP6SUBDOCUMENT_H */
+--- 32,38 ----
+  class WP6SubDocument : public WPXSubDocument
+  {
+  public:
+! 	WP6SubDocument(uint8_t * streamData, const unsigned dataSize);
+  	void parse(WP6Listener *listener) const;
+  };
+  #endif /* WP6SUBDOCUMENT_H */
+*** misc/libwpd-0.8.8/src/lib/WPXSubDocument.cpp	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WPXSubDocument.cpp	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 32,49 ****
+  {
+  }
+  
+! WPXSubDocument::WPXSubDocument(WPXInputStream *input, const int dataSize) :
+  	m_stream(0)
+  {
+  	uint8_t *streamData = new uint8_t[dataSize];
+  	for (int i=0; i<dataSize; i++)
+  	{
+  		streamData[i] = readU8(input);
+  	}
+  	m_stream = new WPXMemoryInputStream(streamData, dataSize);
+  }
+  
+! WPXSubDocument::WPXSubDocument(uint8_t * streamData, const int dataSize) :
+  	m_stream(0)
+  {
+  	m_stream = new WPXMemoryInputStream(streamData, dataSize);
+--- 32,51 ----
+  {
+  }
+  
+! WPXSubDocument::WPXSubDocument(WPXInputStream *input, const unsigned dataSize) :
+  	m_stream(0)
+  {
+  	uint8_t *streamData = new uint8_t[dataSize];
+  	for (int i=0; i<dataSize; i++)
+  	{
++ 		if (input->atEOS())
++ 			throw FileException();
+  		streamData[i] = readU8(input);
+  	}
+  	m_stream = new WPXMemoryInputStream(streamData, dataSize);
+  }
+  
+! WPXSubDocument::WPXSubDocument(uint8_t * streamData, const unsigned dataSize) :
+  	m_stream(0)
+  {
+  	m_stream = new WPXMemoryInputStream(streamData, dataSize);
+*** misc/libwpd-0.8.8/src/lib/WPXSubDocument.h	2007-01-03 14:07:56.000000000 +0100
+--- misc/build/libwpd-0.8.8/src/lib/WPXSubDocument.h	2007-01-15 11:03:37.000000000 +0100
+***************
+*** 33,40 ****
+  {
+  public:
+  	WPXSubDocument();
+! 	WPXSubDocument(WPXInputStream *input, const int dataSize);
+! 	WPXSubDocument(uint8_t * streamData, const int dataSize);
+  	virtual ~WPXSubDocument();
+  	WPXMemoryInputStream *getStream() const { return m_stream;}
+  
+--- 33,40 ----
+  {
+  public:
+  	WPXSubDocument();
+! 	WPXSubDocument(WPXInputStream *input, const unsigned dataSize);
+! 	WPXSubDocument(uint8_t * streamData, const unsigned dataSize);
+  	virtual ~WPXSubDocument();
+  	WPXMemoryInputStream *getStream() const { return m_stream;}
+  
--- libwpd/makefile.mk	4 Dec 2006 16:31:52 -0000	1.13
+++ libwpd/makefile.mk	9 Jan 2007 15:37:59 -0000	1.13.2.4
@@ -49,7 +49,7 @@ TARGET=wpd
 	@echo "Using system libwpd..."
 .ENDIF
 
-TARFILE_NAME=libwpd-0.8.7
+TARFILE_NAME=libwpd-0.8.8
 PATCH_FILE_NAME=$(TARFILE_NAME).diff
 BUILD_ACTION=dmake $(MFLAGS) $(CALLMACROS)
 BUILD_DIR=src/lib
--- writerperfect/prj/build.lst	20 Jun 2006 17:06:24 -0000	1.8
+++ writerperfect/prj/build.lst	18 Dec 2006 09:27:16 -0000	1.8.10.1
@@ -2,4 +2,5 @@ wp      writerperfect : LIBWPD:libwpd so
 wp	writerperfect			usr1	-	all	wp_mkout NULL
 wp	writerperfect\source\stream	nmake	-	all	wp_stream NULL
 wp	writerperfect\source\filter	nmake	-	all	wp_filter NULL
-wp	writerperfect\util		nmake	-	all	wp_util wp_filter wp_stream NULL
+wp	writerperfect\source\wpdimp	nmake	-	all	wp_wpdimp NULL
+wp	writerperfect\util		nmake	-	all	wp_util wp_wpdimp wp_filter wp_stream NULL
cvs server: Diffing writerperfect/source
cvs server: Diffing writerperfect/source/filter
Index: writerperfect/source/filter/DocumentCollector.cxx
===================================================================
RCS file: writerperfect/source/filter/DocumentCollector.cxx
diff -N writerperfect/source/filter/DocumentCollector.cxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/filter/DocumentCollector.cxx	19 Dec 2006 10:09:04 -0000	1.1.2.2
@@ -0,0 +1,930 @@
+/* DocumentCollector: Collects sections and runs of text from a
+ * file (and styles to go along with them) and writes them
+ * to a Writer target document
+ *
+ * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2003-2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+
+#include <libwpd/libwpd.h>
+#include <string.h> // for strcmp
+
+#include "DocumentCollector.hxx"
+#include "DocumentElement.hxx"
+#include "TextRunStyle.hxx"
+#include "FontStyle.hxx"
+#include "ListStyle.hxx"
+#include "PageSpan.hxx"
+#include "SectionStyle.hxx"
+#include "TableStyle.hxx"
+#include "FilterInternal.hxx"
+#include "WriterProperties.hxx"
+
+_WriterDocumentState::_WriterDocumentState() :
+	mbFirstElement(true),
+	mbInFakeSection(false),
+	mbListElementOpenedAtCurrentLevel(false),
+	mbTableCellOpened(false),
+	mbHeaderRow(false),
+	mbInNote(false)
+{
+}
+
+DocumentCollector::DocumentCollector(WPXInputStream *pInput, DocumentHandler *pHandler) :
+        mpInput(pInput),
+        mpHandler(pHandler),
+	mbUsed(false),
+	mfSectionSpaceAfter(0.0f),
+	miNumListStyles(0),
+	mpCurrentContentElements(&mBodyElements),
+	mpCurrentPageSpan(NULL),
+	miNumPageStyles(0),
+	mpCurrentListStyle(NULL),
+	miCurrentListLevel(0),
+	miLastListLevel(0),
+	miLastListNumber(0),
+	mbListContinueNumbering(false),
+	mbListElementOpened(false),
+	mbListElementParagraphOpened(false)
+{
+}
+
+DocumentCollector::~DocumentCollector()
+{
+}
+
+bool DocumentCollector::filter()
+{
+	// The contract for DocumentCollector is that it will only be used once after it is
+	// instantiated
+	if (mbUsed)
+		return false;
+
+	mbUsed = true;
+
+	// parse & write
+        // WLACH_REFACTORING: Remove these args..
+ 	if (!parseSourceDocument(*mpInput))
+		return false;
+	if (!_writeTargetDocument(mpHandler))
+		return false;
+
+ 	// clean up the mess we made
+ 	WRITER_DEBUG_MSG(("WriterWordPerfect: Cleaning up our mess..\n"));
+
+	WRITER_DEBUG_MSG(("Destroying the body elements\n"));
+	for (std::vector<DocumentElement *>::iterator iterBody = mBodyElements.begin(); iterBody != mBodyElements.end(); iterBody++) {
+		delete((*iterBody));
+		(*iterBody) = NULL;
+	}
+
+	WRITER_DEBUG_MSG(("Destroying the styles elements\n"));
+	for (std::vector<DocumentElement *>::iterator iterStyles = mStylesElements.begin(); iterStyles != mStylesElements.end(); iterStyles++) {
+ 		delete (*iterStyles);
+		(*iterStyles) = NULL; // we may pass over the same element again (in the case of headers/footers spanning multiple pages)
+				      // so make sure we don't do a double del
+	}
+
+	WRITER_DEBUG_MSG(("Destroying the rest of the styles elements\n"));
+	for (std::map<WPXString, ParagraphStyle *, ltstr>::iterator iterTextStyle = mTextStyleHash.begin(); iterTextStyle != mTextStyleHash.end(); iterTextStyle++) {
+		delete iterTextStyle->second;
+	}
+	for (std::map<WPXString, SpanStyle *, ltstr>::iterator iterSpanStyle = mSpanStyleHash.begin(); iterSpanStyle != mSpanStyleHash.end(); iterSpanStyle++) {
+		delete iterSpanStyle->second;
+	}
+	
+	for (std::map<WPXString, FontStyle *, ltstr>::iterator iterFont = mFontHash.begin(); iterFont != mFontHash.end(); iterFont++) {
+		delete iterFont->second;
+	}
+
+	for (std::vector<ListStyle *>::iterator iterListStyles = mListStyles.begin(); iterListStyles != mListStyles.end(); iterListStyles++) {
+		delete (*iterListStyles);
+	}
+	for (std::vector<SectionStyle *>::iterator iterSectionStyles = mSectionStyles.begin(); iterSectionStyles != mSectionStyles.end(); iterSectionStyles++) {
+		delete (*iterSectionStyles);
+	}
+	for (std::vector<TableStyle *>::iterator iterTableStyles = mTableStyles.begin(); iterTableStyles != mTableStyles.end(); iterTableStyles++) {
+		delete (*iterTableStyles);
+	}
+
+	for (std::vector<PageSpan *>::iterator iterPageSpans = mPageSpans.begin(); iterPageSpans != mPageSpans.end(); iterPageSpans++) {
+		delete (*iterPageSpans);
+	}
+
+ 	return true;
+}
+
+void DocumentCollector::_writeDefaultStyles(DocumentHandler *pHandler)
+{
+	TagOpenElement stylesOpenElement("office:styles");
+	stylesOpenElement.write(pHandler);
+
+	TagOpenElement defaultParagraphStyleOpenElement("style:default-style");
+	defaultParagraphStyleOpenElement.addAttribute("style:family", "paragraph");
+	defaultParagraphStyleOpenElement.write(pHandler);
+
+	TagOpenElement defaultParagraphStylePropertiesOpenElement("style:properties");
+	defaultParagraphStylePropertiesOpenElement.addAttribute("style:family", "paragraph");
+	defaultParagraphStylePropertiesOpenElement.addAttribute("style:tab-stop-distance", "0.5inch");
+	defaultParagraphStylePropertiesOpenElement.write(pHandler);
+	TagCloseElement defaultParagraphStylePropertiesCloseElement("style:properties");
+	defaultParagraphStylePropertiesCloseElement.write(pHandler);
+
+	TagCloseElement defaultParagraphStyleCloseElement("style:default-style");
+	defaultParagraphStyleCloseElement.write(pHandler);
+	
+	TagOpenElement standardStyleOpenElement("style:style");
+        standardStyleOpenElement.addAttribute("style:name", "Standard");
+        standardStyleOpenElement.addAttribute("style:family", "paragraph");
+        standardStyleOpenElement.addAttribute("style:class", "text");
+        standardStyleOpenElement.write(pHandler);
+        TagCloseElement standardStyleCloseElement("style:style");
+        standardStyleCloseElement.write(pHandler);
+
+        TagOpenElement textBodyStyleOpenElement("style:style");
+        textBodyStyleOpenElement.addAttribute("style:name", "Text Body");
+        textBodyStyleOpenElement.addAttribute("style:family", "paragraph");
+        textBodyStyleOpenElement.addAttribute("style:parent-style-name", "Standard");
+        textBodyStyleOpenElement.addAttribute("style:class", "text");
+        textBodyStyleOpenElement.write(pHandler);
+        TagCloseElement textBodyStyleCloseElement("style:style");
+        textBodyStyleCloseElement.write(pHandler);
+
+        TagOpenElement tableContentsStyleOpenElement("style:style");
+        tableContentsStyleOpenElement.addAttribute("style:name", "Table Contents");
+        tableContentsStyleOpenElement.addAttribute("style:family", "paragraph");
+        tableContentsStyleOpenElement.addAttribute("style:parent-style-name", "Text Body");
+        tableContentsStyleOpenElement.addAttribute("style:class", "extra");
+        tableContentsStyleOpenElement.write(pHandler);
+        TagCloseElement tableContentsStyleCloseElement("style:style");
+        tableContentsStyleCloseElement.write(pHandler);
+
+        TagOpenElement tableHeadingStyleOpenElement("style:style");
+        tableHeadingStyleOpenElement.addAttribute("style:name", "Table Heading");
+        tableHeadingStyleOpenElement.addAttribute("style:family", "paragraph");
+        tableHeadingStyleOpenElement.addAttribute("style:parent-style-name", "Table Contents");
+        tableHeadingStyleOpenElement.addAttribute("style:class", "extra");
+        tableHeadingStyleOpenElement.write(pHandler);
+        TagCloseElement tableHeadingStyleCloseElement("style:style");
+        tableHeadingStyleCloseElement.write(pHandler);
+
+	TagCloseElement stylesCloseElement("office:styles");
+	stylesCloseElement.write(pHandler);
+
+}
+
+// writes everything up to the automatic styles declarations..
+void DocumentCollector::_writeBegin()
+{
+}
+
+void DocumentCollector::_writeMasterPages(DocumentHandler *pHandler)
+{
+        WPXPropertyList xBlankAttrList;
+
+	pHandler->startElement("office:master-styles", xBlankAttrList);
+	int pageNumber = 1;
+	for (unsigned int i=0; i<mPageSpans.size(); i++)
+	{
+		bool bLastPage;
+		(i == (mPageSpans.size() - 1)) ? bLastPage = true : bLastPage = false;
+		mPageSpans[i]->writeMasterPages(pageNumber, i, bLastPage, pHandler);
+		pageNumber += mPageSpans[i]->getSpan();
+	}
+	pHandler->endElement("office:master-styles");
+}
+
+void DocumentCollector::_writePageMasters(DocumentHandler *pHandler)
+{
+	for (unsigned int i=0; i<mPageSpans.size(); i++)
+	{
+		mPageSpans[i]->writePageMaster(i, pHandler);
+	}
+}
+
+bool DocumentCollector::_writeTargetDocument(DocumentHandler *pHandler)
+{        
+	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Printing out the header stuff..\n"));
+	WPXPropertyList xBlankAttrList;
+
+	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Start Document\n"));
+	mpHandler->startDocument();
+
+	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: preamble\n"));
+        WPXPropertyList docContentPropList;
+	docContentPropList.insert("xmlns:office", "http://openoffice.org/2000/office");
+	docContentPropList.insert("xmlns:style", "http://openoffice.org/2000/style");
+	docContentPropList.insert("xmlns:text", "http://openoffice.org/2000/text");
+	docContentPropList.insert("xmlns:table", "http://openoffice.org/2000/table");
+	docContentPropList.insert("xmlns:draw", "http://openoffice.org/2000/draw");
+	docContentPropList.insert("xmlns:fo", "http://www.w3.org/1999/XSL/Format");
+	docContentPropList.insert("xmlns:xlink", "http://www.w3.org/1999/xlink");
+	docContentPropList.insert("xmlns:number", "http://openoffice.org/2000/datastyle");
+	docContentPropList.insert("xmlns:svg", "http://www.w3.org/2000/svg");
+	docContentPropList.insert("xmlns:chart", "http://openoffice.org/2000/chart");
+	docContentPropList.insert("xmlns:dr3d", "http://openoffice.org/2000/dr3d");
+	docContentPropList.insert("xmlns:math", "http://www.w3.org/1998/Math/MathML");
+	docContentPropList.insert("xmlns:form", "http://openoffice.org/2000/form");
+	docContentPropList.insert("xmlns:script", "http://openoffice.org/2000/script");
+	docContentPropList.insert("office:class", "text");
+	docContentPropList.insert("office:version", "1.0");
+        mpHandler->startElement("office:document-content", docContentPropList);
+
+	// write out the font styles
+	mpHandler->startElement("office:font-decls", xBlankAttrList);
+	for (std::map<WPXString, FontStyle *, ltstr>::iterator iterFont = mFontHash.begin(); iterFont != mFontHash.end(); iterFont++) {
+		iterFont->second->write(mpHandler);
+	}
+	TagOpenElement symbolFontOpen("style:font-decl");
+	symbolFontOpen.addAttribute("style:name", "StarSymbol");
+	symbolFontOpen.addAttribute("fo:font-family", "StarSymbol");
+	symbolFontOpen.addAttribute("style:font-charset", "x-symbol");
+	symbolFontOpen.write(mpHandler);
+        mpHandler->endElement("style:font-decl");
+
+	mpHandler->endElement("office:font-decls");
+
+
+ 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Writing out the styles..\n"));
+
+	// write default styles
+	_writeDefaultStyles(mpHandler);
+
+	mpHandler->startElement("office:automatic-styles", xBlankAttrList);
+
+	for (std::map<WPXString, ParagraphStyle *, ltstr>::iterator iterTextStyle = mTextStyleHash.begin(); 
+             iterTextStyle != mTextStyleHash.end(); iterTextStyle++) 
+        {
+		// writing out the paragraph styles
+		if (strcmp((iterTextStyle->second)->getName().cstr(), "Standard")) 
+                {
+			// don't write standard paragraph "no styles" style
+			(iterTextStyle->second)->write(pHandler);
+		}
+	}
+
+        // span styles..
+	for (std::map<WPXString, SpanStyle *, ltstr>::iterator iterSpanStyle = mSpanStyleHash.begin(); 
+             iterSpanStyle != mSpanStyleHash.end(); iterSpanStyle++) 
+        {
+                (iterSpanStyle->second)->write(pHandler);
+	}
+
+ 	// writing out the sections styles
+	for (std::vector<SectionStyle *>::iterator iterSectionStyles = mSectionStyles.begin(); iterSectionStyles != mSectionStyles.end(); iterSectionStyles++) {
+		(*iterSectionStyles)->write(pHandler);
+	}
+
+	// writing out the lists styles
+	for (std::vector<ListStyle *>::iterator iterListStyles = mListStyles.begin(); iterListStyles != mListStyles.end(); iterListStyles++) {
+		(*iterListStyles)->write(pHandler);
+	}
+
+ 	// writing out the table styles
+	for (std::vector<TableStyle *>::iterator iterTableStyles = mTableStyles.begin(); iterTableStyles != mTableStyles.end(); iterTableStyles++) {
+		(*iterTableStyles)->write(pHandler);
+	}
+
+	// writing out the page masters
+	_writePageMasters(pHandler);
+
+
+	pHandler->endElement("office:automatic-styles");
+
+	_writeMasterPages(pHandler);
+
+ 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Writing out the document..\n"));
+ 	// writing out the document
+	pHandler->startElement("office:body", xBlankAttrList);
+
+	for (std::vector<DocumentElement *>::iterator iterBodyElements = mBodyElements.begin(); iterBodyElements != mBodyElements.end(); iterBodyElements++) {
+		(*iterBodyElements)->write(pHandler);
+	}
+ 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Finished writing all doc els..\n"));
+
+	pHandler->endElement("office:body");
+	pHandler->endElement("office:document-content");
+
+	pHandler->endDocument();
+
+	return true;
+}
+
+
+WPXString propListToStyleKey(const WPXPropertyList & xPropList)
+{
+        WPXString sKey;
+        WPXPropertyList::Iter i(xPropList);
+        for (i.rewind(); i.next(); )
+        {
+                WPXString sProp;
+                sProp.sprintf("[%s:%s]", i.key(), i()->getStr().cstr());
+                sKey.append(sProp);
+        }
+
+        return sKey;
+}
+
+WPXString getParagraphStyleKey(const WPXPropertyList & xPropList, const WPXPropertyListVector & xTabStops)
+{
+        WPXString sKey = propListToStyleKey(xPropList);
+        
+        WPXString sTabStops;
+        sTabStops.sprintf("[num-tab-stops:%i]", xTabStops.count());
+        WPXPropertyListVector::Iter i(xTabStops);
+        for (i.rewind(); i.next();)
+        {
+                sTabStops.append(propListToStyleKey(i()));
+        }
+        sKey.append(sTabStops);
+
+        return sKey;
+}
+
+// _allocateFontName: add a (potentially mapped) font style to the hash if it's not already there, do nothing otherwise
+void DocumentCollector::_allocateFontName(const WPXString & sFontName)
+{
+	if (mFontHash.find(sFontName) == mFontHash.end())
+	{
+		FontStyle *pFontStyle = new FontStyle(sFontName.cstr(), sFontName.cstr());
+		mFontHash[sFontName] = pFontStyle;
+	}
+}
+
+void DocumentCollector::openPageSpan(const WPXPropertyList &propList)
+{
+	PageSpan *pPageSpan = new PageSpan(propList);
+	mPageSpans.push_back(pPageSpan);
+	mpCurrentPageSpan = pPageSpan;
+}
+
+void DocumentCollector::openHeader(const WPXPropertyList &propList)
+{
+	std::vector<DocumentElement *> * pHeaderFooterContentElements = new std::vector<DocumentElement *>;
+
+	if (propList["libwpd:occurence"]->getStr() == "even")
+                mpCurrentPageSpan->setHeaderLeftContent(pHeaderFooterContentElements);
+        else
+                mpCurrentPageSpan->setHeaderContent(pHeaderFooterContentElements);
+
+	mpCurrentContentElements = pHeaderFooterContentElements;
+}
+
+void DocumentCollector::closeHeader()
+{
+	mpCurrentContentElements = &mBodyElements;
+}
+
+void DocumentCollector::openFooter(const WPXPropertyList &propList)
+{
+	std::vector<DocumentElement *> * pHeaderFooterContentElements = new std::vector<DocumentElement *>;
+
+	if (propList["libwpd:occurence"]->getStr() == "even")
+                mpCurrentPageSpan->setFooterLeftContent(pHeaderFooterContentElements);
+        else
+                mpCurrentPageSpan->setFooterContent(pHeaderFooterContentElements);
+
+	mpCurrentContentElements = pHeaderFooterContentElements;
+}
+
+void DocumentCollector::closeFooter()
+{
+	mpCurrentContentElements = &mBodyElements;
+}
+
+void DocumentCollector::openSection(const WPXPropertyList &propList, const WPXPropertyListVector &columns)
+{
+        int iNumColumns = columns.count();
+	float fSectionMarginLeft = 0.0f;
+	float fSectionMarginRight = 0.0f;
+	if (propList["fo:margin-left"])
+		fSectionMarginLeft = propList["fo:margin-left"]->getFloat();
+	if (propList["fo:margin-right"])
+		fSectionMarginRight = propList["fo:margin-right"]->getFloat();
+
+	if (iNumColumns > 1 || fSectionMarginLeft != 0 || fSectionMarginRight != 0)
+	{
+		mfSectionSpaceAfter = propList["fo:margin-bottom"]->getFloat();
+		WPXString sSectionName;
+		sSectionName.sprintf("Section%i", mSectionStyles.size());
+		
+		SectionStyle *pSectionStyle = new SectionStyle(propList, columns, sSectionName.cstr());
+		mSectionStyles.push_back(pSectionStyle);
+		
+		TagOpenElement *pSectionOpenElement = new TagOpenElement("text:section");
+		pSectionOpenElement->addAttribute("text:style-name", pSectionStyle->getName());
+		pSectionOpenElement->addAttribute("text:name", pSectionStyle->getName());
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pSectionOpenElement));
+	}
+	else
+		mWriterDocumentState.mbInFakeSection = true;
+}
+
+void DocumentCollector::closeSection()
+{
+	if (!mWriterDocumentState.mbInFakeSection)
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:section")));
+	else
+		mWriterDocumentState.mbInFakeSection = false;
+
+	// open as many paragraphs as needed to simulate section space after
+	// WLACH_REFACTORING: disable this for now..
+	#if 0
+	for (float f=0.0f; f<mfSectionSpaceAfter; f+=1.0f) {
+		vector<WPXTabStop> dummyTabStops;
+		openParagraph(WPX_PARAGRAPH_JUSTIFICATION_LEFT, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, dummyTabStops, false, false);
+		closeParagraph();
+	}
+	#endif
+	mfSectionSpaceAfter = 0.0f;
+}
+
+void DocumentCollector::openParagraph(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops)
+{
+	// FIXMENOW: What happens if we open a footnote inside a table? do we then inherit the footnote's style
+	// from "Table Contents"
+	
+	WPXPropertyList *pPersistPropList = new WPXPropertyList(propList);
+	ParagraphStyle *pStyle = NULL;
+
+	if (mWriterDocumentState.mbFirstElement && mpCurrentContentElements == &mBodyElements)
+	{
+		// we don't have to go through the fuss of determining if the paragraph style is 
+		// unique in this case, because if we are the first document element, then we
+		// are singular. Neither do we have to determine what our parent style is-- we can't
+		// be inside a table in this case (the table would be the first document element 
+		//in that case)
+		pPersistPropList->insert("style:parent-style-name", "Standard");
+		WPXString sName;
+		sName.sprintf("FS");
+
+		WPXString sParagraphHashKey("P|FS");
+		pPersistPropList->insert("style:master-page-name", "Page Style 1");
+                pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
+		mTextStyleHash[sParagraphHashKey] = pStyle;
+		mWriterDocumentState.mbFirstElement = false;
+ 	}
+	else
+	{
+		if (mWriterDocumentState.mbTableCellOpened)
+		{
+			if (mWriterDocumentState.mbHeaderRow)
+				pPersistPropList->insert("style:parent-style-name", "Table Heading");
+			else
+				pPersistPropList->insert("style:parent-style-name", "Table Contents");
+		}
+		else
+			pPersistPropList->insert("style:parent-style-name", "Standard");
+
+                WPXString sKey = getParagraphStyleKey(*pPersistPropList, tabStops);
+
+		if (mTextStyleHash.find(sKey) == mTextStyleHash.end()) {
+			WPXString sName;
+			sName.sprintf("S%i", mTextStyleHash.size()); 
+			
+			pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
+	
+			mTextStyleHash[sKey] = pStyle;
+		}
+		else
+		{
+			pStyle = mTextStyleHash[sKey];
+			delete pPersistPropList;
+		}
+	}
+	// create a document element corresponding to the paragraph, and append it to our list of document elements
+	TagOpenElement *pParagraphOpenElement = new TagOpenElement("text:p");
+	pParagraphOpenElement->addAttribute("text:style-name", pStyle->getName());
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pParagraphOpenElement));
+}
+
+void DocumentCollector::closeParagraph()
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:p")));
+}
+
+void DocumentCollector::openSpan(const WPXPropertyList &propList)
+{
+        if (propList["style:font-name"])
+                _allocateFontName(propList["style:font-name"]->getStr());
+	WPXString sSpanHashKey = propListToStyleKey(propList);
+	WRITER_DEBUG_MSG(("WriterWordPerfect: Span Hash Key: %s\n", sSpanHashKey.cstr()));
+
+	// Get the style
+        WPXString sName;
+	if (mSpanStyleHash.find(sSpanHashKey) == mSpanStyleHash.end())
+        {
+		// allocate a new paragraph style
+		sName.sprintf("Span%i", mSpanStyleHash.size());
+		SpanStyle *pStyle = new SpanStyle(sName.cstr(), propList);                
+
+		mSpanStyleHash[sSpanHashKey] = pStyle;
+	}
+	else 
+        {
+		sName.sprintf("%s", mSpanStyleHash.find(sSpanHashKey)->second->getName().cstr());
+	}
+
+	// create a document element corresponding to the paragraph, and append it to our list of document elements
+	TagOpenElement *pSpanOpenElement = new TagOpenElement("text:span");
+	pSpanOpenElement->addAttribute("text:style-name", sName.cstr());
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pSpanOpenElement));
+}
+
+void DocumentCollector::closeSpan()
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:span")));
+}
+
+void DocumentCollector::defineOrderedListLevel(const WPXPropertyList &propList)
+{
+        int id = 0;
+        if (propList["libwpd:id"])
+                id = propList["libwpd:id"]->getInt();
+
+ 	OrderedListStyle *pOrderedListStyle = NULL;
+	if (mpCurrentListStyle && mpCurrentListStyle->getListID() == id)
+		pOrderedListStyle = static_cast<OrderedListStyle *>(mpCurrentListStyle); // FIXME: using a dynamic cast here causes oo to crash?!
+
+	// this rather appalling conditional makes sure we only start a new list (rather than continue an old
+	// one) if: (1) we have no prior list OR (2) the prior list is actually definitively different
+	// from the list that is just being defined (listIDs differ) OR (3) we can tell that the user actually
+	// is starting a new list at level 1 (and only level 1)
+	if (pOrderedListStyle == NULL || pOrderedListStyle->getListID() != id  ||
+	    (propList["libwpd:level"] && propList["libwpd:level"]->getInt()==1 && 
+             (propList["text:start-value"] && (unsigned int)(propList["text:start-value"]->getInt()) != (miLastListNumber+1))))
+	{
+		WRITER_DEBUG_MSG(("Attempting to create a new ordered list style (listid: %i)\n", id));
+		WPXString sName;
+		sName.sprintf("OL%i", miNumListStyles);
+		miNumListStyles++;
+		pOrderedListStyle = new OrderedListStyle(sName.cstr(), propList["libwpd:id"]->getInt());
+		mListStyles.push_back(static_cast<ListStyle *>(pOrderedListStyle));
+		mpCurrentListStyle = static_cast<ListStyle *>(pOrderedListStyle);
+		mbListContinueNumbering = false;
+		miLastListNumber = 0;
+	}
+	else
+		mbListContinueNumbering = true;
+
+	// Iterate through ALL list styles with the same WordPerfect list id and define a level if it is not already defined
+	// This solves certain problems with lists that start and finish without reaching certain levels and then begin again
+	// and reach those levels. See gradguide0405_PC.wpd in the regression suite
+	for (std::vector<ListStyle *>::iterator iterOrderedListStyles = mListStyles.begin(); iterOrderedListStyles != mListStyles.end(); iterOrderedListStyles++)
+	{
+		if ((* iterOrderedListStyles)->getListID() == propList["libwpd:id"]->getInt())
+			(* iterOrderedListStyles)->updateListLevel((propList["libwpd:level"]->getInt() - 1), propList);
+	}
+}
+
+void DocumentCollector::defineUnorderedListLevel(const WPXPropertyList &propList)
+{
+        int id = 0;
+        if (propList["libwpd:id"])
+                id = propList["libwpd:id"]->getInt();
+
+ 	UnorderedListStyle *pUnorderedListStyle = NULL;
+	if (mpCurrentListStyle && mpCurrentListStyle->getListID() == id)
+		pUnorderedListStyle = static_cast<UnorderedListStyle *>(mpCurrentListStyle); // FIXME: using a dynamic cast here causes oo to crash?!
+
+	if (pUnorderedListStyle == NULL) {
+		WRITER_DEBUG_MSG(("Attempting to create a new unordered list style (listid: %i)\n", id));
+		WPXString sName;
+		sName.sprintf("UL%i", miNumListStyles);
+		pUnorderedListStyle = new UnorderedListStyle(sName.cstr(), id);
+		mListStyles.push_back(static_cast<ListStyle *>(pUnorderedListStyle));
+		mpCurrentListStyle = static_cast<ListStyle *>(pUnorderedListStyle);
+	}
+
+	// See comment in DocumentCollector::defineOrderedListLevel
+	for (std::vector<ListStyle *>::iterator iterUnorderedListStyles = mListStyles.begin(); iterUnorderedListStyles != mListStyles.end(); iterUnorderedListStyles++)
+	{
+		if ((* iterUnorderedListStyles)->getListID() == propList["libwpd:id"]->getInt())
+			(* iterUnorderedListStyles)->updateListLevel((propList["libwpd:level"]->getInt() - 1), propList);
+	}
+}
+
+void DocumentCollector::openOrderedListLevel(const WPXPropertyList & /* propList */)
+{
+	miCurrentListLevel++;
+	TagOpenElement *pListLevelOpenElement = new TagOpenElement("text:ordered-list");
+	_openListLevel(pListLevelOpenElement);
+
+	if (mbListContinueNumbering) {
+		pListLevelOpenElement->addAttribute("text:continue-numbering", "true");
+	}
+
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pListLevelOpenElement));
+}
+
+void DocumentCollector::openUnorderedListLevel(const WPXPropertyList & /* propList */)
+{
+	miCurrentListLevel++;
+	TagOpenElement *pListLevelOpenElement = new TagOpenElement("text:unordered-list");
+	_openListLevel(pListLevelOpenElement);
+
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pListLevelOpenElement));
+}
+
+void DocumentCollector::_openListLevel(TagOpenElement *pListLevelOpenElement)
+{
+  	if (!mbListElementOpened && miCurrentListLevel > 1)
+  	{
+  		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:list-item")));
+  	}
+	else if (mbListElementParagraphOpened)
+	{
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:p")));
+		mbListElementParagraphOpened = false;
+	}
+
+	if (miCurrentListLevel==1) {
+		pListLevelOpenElement->addAttribute("text:style-name", mpCurrentListStyle->getName());
+	}
+
+	mbListElementOpened = false;
+}
+
+void DocumentCollector::closeOrderedListLevel()
+{
+	_closeListLevel("ordered-list");
+}
+
+void DocumentCollector::closeUnorderedListLevel()
+{
+	_closeListLevel("unordered-list");
+}
+
+void DocumentCollector::_closeListLevel(const char *szListType)
+{
+	if (mbListElementOpened)
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:list-item")));
+
+	miCurrentListLevel--;
+
+	WPXString sCloseElement;
+	sCloseElement.sprintf("text:%s", szListType);
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement(sCloseElement.cstr())));
+
+	if (miCurrentListLevel > 0)
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:list-item")));
+	mbListElementOpened = false;
+}
+
+void DocumentCollector::openListElement(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops)
+{
+	miLastListLevel = miCurrentListLevel;
+	if (miCurrentListLevel == 1)
+		miLastListNumber++;
+
+	if (mbListElementOpened)
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:list-item")));
+
+	ParagraphStyle *pStyle = NULL;
+
+	WPXPropertyList *pPersistPropList = new WPXPropertyList(propList);
+	pPersistPropList->insert("style:list-style-name", mpCurrentListStyle->getName());
+	pPersistPropList->insert("style:parent-style-name", "Standard");
+
+        WPXString sKey = getParagraphStyleKey(*pPersistPropList, tabStops);
+
+        if (mTextStyleHash.find(sKey) == mTextStyleHash.end()) 
+        {
+                WPXString sName;
+                sName.sprintf("S%i", mTextStyleHash.size()); 
+		
+                pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
+                
+                mTextStyleHash[sKey] = pStyle;
+        }
+        else
+        {
+                pStyle = mTextStyleHash[sKey];
+                delete pPersistPropList;
+        }
+
+	TagOpenElement *pOpenListElement = new TagOpenElement("text:list-item");
+	TagOpenElement *pOpenListElementParagraph = new TagOpenElement("text:p");
+
+	pOpenListElementParagraph->addAttribute("text:style-name", pStyle->getName());
+
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pOpenListElement));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pOpenListElementParagraph));
+		
+	mbListElementOpened = true;
+	mbListElementParagraphOpened = true;
+	mbListContinueNumbering = false;
+}
+
+void DocumentCollector::closeListElement()
+{
+	// this code is kind of tricky, because we don't actually close the list element (because this list element
+	// could contain another list level in OOo's implementation of lists). that is done in the closeListLevel
+	// code (or when we open another list element)
+
+	if (mbListElementParagraphOpened)
+	{
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:p")));
+		mbListElementParagraphOpened = false;
+	}
+}
+
+void DocumentCollector::openFootnote(const WPXPropertyList &propList)
+{
+	TagOpenElement *pOpenFootNote = new TagOpenElement("text:footnote");
+	if (propList["libwpd:number"])
+	{
+		WPXString tmpString("ftn");
+		tmpString.append(propList["libwpd:number"]->getStr());
+		pOpenFootNote->addAttribute("text:id", tmpString);
+	}
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pOpenFootNote));
+
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:footnote-citation")));
+        if (propList["libwpd:number"])
+                mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new CharDataElement(propList["libwpd:number"]->getStr().cstr())));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote-citation")));
+
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:footnote-body")));
+	
+	mWriterDocumentState.mbInNote = true;
+}
+
+void DocumentCollector::closeFootnote()
+{
+	mWriterDocumentState.mbInNote = false;
+
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote-body")));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote")));
+}
+
+void DocumentCollector::openEndnote(const WPXPropertyList &propList)
+{
+	TagOpenElement *pOpenEndNote = new TagOpenElement("text:endnote");
+	if (propList["libwpd:number"])
+	{
+		WPXString tmpString("edn");
+		tmpString.append(propList["libwpd:number"]->getStr());
+		pOpenEndNote->addAttribute("text:id", tmpString);
+	}
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pOpenEndNote));
+
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:endnote-citation")));
+        if (propList["libwpd:number"])
+                mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new CharDataElement(propList["libwpd:number"]->getStr().cstr())));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote-citation")));
+
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:endnote-body")));
+
+}
+void DocumentCollector::closeEndnote()
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote-body")));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote")));
+}
+
+void DocumentCollector::openTable(const WPXPropertyList &propList, const WPXPropertyListVector &columns)
+{
+	WPXString sTableName;
+	sTableName.sprintf("Table%i", mTableStyles.size());
+
+	// FIXME: we base the table style off of the page's margin left, ignoring (potential) wordperfect margin
+	// state which is transmitted inside the page. could this lead to unacceptable behaviour?
+        // WLACH_REFACTORING: characterize this behaviour, probably should nip it at the bud within libwpd
+	TableStyle *pTableStyle = new TableStyle(propList, columns, sTableName.cstr());
+
+	if (mWriterDocumentState.mbFirstElement && mpCurrentContentElements == &mBodyElements)
+	{
+		WPXString sMasterPageName("Page Style 1");
+		pTableStyle->setMasterPageName(sMasterPageName);
+		mWriterDocumentState.mbFirstElement = false;
+	}
+
+	mTableStyles.push_back(pTableStyle);
+
+	mpCurrentTableStyle = pTableStyle;
+
+	TagOpenElement *pTableOpenElement = new TagOpenElement("table:table");
+
+	pTableOpenElement->addAttribute("table:name", sTableName.cstr());
+	pTableOpenElement->addAttribute("table:style-name", sTableName.cstr());
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableOpenElement));
+
+	for (int i=0; i<pTableStyle->getNumColumns(); i++) 
+        {
+		TagOpenElement *pTableColumnOpenElement = new TagOpenElement("table:table-column");
+		WPXString sColumnStyleName;
+		sColumnStyleName.sprintf("%s.Column%i", sTableName.cstr(), (i+1));
+		pTableColumnOpenElement->addAttribute("table:style-name", sColumnStyleName.cstr());
+		mpCurrentContentElements->push_back(pTableColumnOpenElement);
+
+		TagCloseElement *pTableColumnCloseElement = new TagCloseElement("table:table-column");
+		mpCurrentContentElements->push_back(pTableColumnCloseElement);
+	}
+}
+
+void DocumentCollector::openTableRow(const WPXPropertyList &propList)
+{
+	if (propList["libwpd:is-header-row"] && (propList["libwpd:is-header-row"]->getInt()))
+	{
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("table:table-header-rows")));
+		mWriterDocumentState.mbHeaderRow = true;
+	}
+
+	WPXString sTableRowStyleName;
+	sTableRowStyleName.sprintf("%s.Row%i", mpCurrentTableStyle->getName().cstr(), mpCurrentTableStyle->getNumTableRowStyles());
+	TableRowStyle *pTableRowStyle = new TableRowStyle(propList, sTableRowStyleName.cstr());
+	mpCurrentTableStyle->addTableRowStyle(pTableRowStyle);
+	
+	TagOpenElement *pTableRowOpenElement = new TagOpenElement("table:table-row");
+	pTableRowOpenElement->addAttribute("table:style-name", sTableRowStyleName);
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableRowOpenElement));
+}
+
+void DocumentCollector::closeTableRow()
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table-row")));
+	if (mWriterDocumentState.mbHeaderRow)
+	{
+		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table-header-rows")));
+		mWriterDocumentState.mbHeaderRow = false;
+	}
+}
+
+void DocumentCollector::openTableCell(const WPXPropertyList &propList)
+{
+	WPXString sTableCellStyleName;
+	sTableCellStyleName.sprintf( "%s.Cell%i", mpCurrentTableStyle->getName().cstr(), mpCurrentTableStyle->getNumTableCellStyles());
+	TableCellStyle *pTableCellStyle = new TableCellStyle(propList, sTableCellStyleName.cstr());
+	mpCurrentTableStyle->addTableCellStyle(pTableCellStyle);
+
+	TagOpenElement *pTableCellOpenElement = new TagOpenElement("table:table-cell");
+	pTableCellOpenElement->addAttribute("table:style-name", sTableCellStyleName);
+	if (propList["table:number-columns-spanned"])
+                pTableCellOpenElement->addAttribute("table:number-columns-spanned", 
+                                                    propList["table:number-columns-spanned"]->getStr().cstr());
+        if (propList["table:number-rows-spanned"])
+                pTableCellOpenElement->addAttribute("table:number-rows-spanned",
+                                                    propList["table:number-rows-spanned"]->getStr().cstr());
+	pTableCellOpenElement->addAttribute("table:value-type", "string");
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableCellOpenElement));
+
+	mWriterDocumentState.mbTableCellOpened = true;
+}
+
+void DocumentCollector::closeTableCell()
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table-cell")));
+	mWriterDocumentState.mbTableCellOpened = false;
+}
+
+void DocumentCollector::insertCoveredTableCell(const WPXPropertyList & /* propList */)
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("table:covered-table-cell")));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:covered-table-cell")));
+}
+
+void DocumentCollector::closeTable()
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table")));
+}
+
+void DocumentCollector::insertTab()
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:tab-stop")));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:tab-stop")));
+}
+
+void DocumentCollector::insertLineBreak()
+{
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:line-break")));
+	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:line-break")));
+}
+
+void DocumentCollector::insertText(const WPXString &text)
+{
+	DocumentElement *pText = new TextElement(text);
+	mpCurrentContentElements->push_back(pText);
+}
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/filter/DocumentCollector.hxx	19 Dec 2006 10:09:04 -0000	1.1.2.2
@@ -0,0 +1,195 @@
+/* DocumentCollector: Collects sections and runs of text from a
+ * file (and styles to go along with them) and writes them
+ * to a target file
+ *
+ * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2003-2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+
+#ifndef _DOCUMENTCOLLECTOR_HXX
+#define _DOCUMENTCOLLECTOR_HXX
+#include "SectionStyle.hxx"
+
+#include <libwpd/libwpd.h>
+#include <vector>
+#include <map>
+#include <stack>
+
+class DocumentElement;
+class DocumentHandler;
+class TagOpenElement;
+class FontStyle;
+class ListStyle;
+
+class ParagraphStyle;
+class SpanStyle;
+class TableStyle;
+class PageSpan;
+
+// the state we use for writing the final document
+typedef struct _WriterDocumentState WriterDocumentState;
+struct _WriterDocumentState
+{
+	_WriterDocumentState();
+		
+	bool mbFirstElement;
+	bool mbInFakeSection;
+	bool mbListElementOpenedAtCurrentLevel;
+	bool mbTableCellOpened;
+	bool mbHeaderRow;
+	bool mbInNote;
+};
+
+enum WriterListType { unordered, ordered };
+
+struct ltstr
+{
+  bool operator()(const WPXString & s1, const WPXString & s2) const
+  {
+    return strcmp(s1.cstr(), s2.cstr()) < 0;
+  }
+};
+
+class DocumentCollector : public WPXHLListenerImpl
+{
+public:
+	DocumentCollector(WPXInputStream *pInput, DocumentHandler *pHandler);
+	virtual ~DocumentCollector();
+	bool filter();
+
+ 	virtual void setDocumentMetaData(const WPXPropertyList & /* propList */) {}
+	virtual void startDocument() {}
+	virtual void endDocument() {}
+
+	virtual void openPageSpan(const WPXPropertyList &propList);
+	virtual void closePageSpan() {}
+
+	virtual void openSection(const WPXPropertyList &propList, const WPXPropertyListVector &columns);
+	virtual void closeSection();
+
+	virtual void openHeader(const WPXPropertyList &propList);
+	virtual void closeHeader();
+	virtual void openFooter(const WPXPropertyList &propList);
+	virtual void closeFooter();
+
+	virtual void openParagraph(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops);
+	virtual void closeParagraph();
+	
+	virtual void openSpan(const WPXPropertyList &propList);
+	virtual void closeSpan();
+
+
+	virtual void insertTab();
+	virtual void insertText(const WPXString &text);
+ 	virtual void insertLineBreak();
+
+	virtual void defineOrderedListLevel(const WPXPropertyList &propList);
+	virtual void defineUnorderedListLevel(const WPXPropertyList &propList);	
+	virtual void openOrderedListLevel(const WPXPropertyList &propList);
+	virtual void openUnorderedListLevel(const WPXPropertyList &propList);
+	virtual void closeOrderedListLevel();
+	virtual void closeUnorderedListLevel();
+	virtual void openListElement(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops);
+	virtual void closeListElement();       
+
+	virtual void openFootnote(const WPXPropertyList &propList);
+	virtual void closeFootnote();
+	virtual void openEndnote(const WPXPropertyList &propList);
+	virtual void closeEndnote();
+
+ 	virtual void openTable(const WPXPropertyList &propList, const WPXPropertyListVector &columns);
+ 	virtual void openTableRow(const WPXPropertyList &propList);
+	virtual void closeTableRow();
+ 	virtual void openTableCell(const WPXPropertyList &propList);
+	virtual void closeTableCell();
+	virtual void insertCoveredTableCell(const WPXPropertyList &propList);
+ 	virtual void closeTable();
+	virtual bool parseSourceDocument(WPXInputStream &input) = 0;
+
+protected:
+	void _resetDocumentState();
+	bool _writeTargetDocument(DocumentHandler *pHandler);
+	void _writeBegin();
+	void _writeDefaultStyles(DocumentHandler *pHandler);
+	void _writeMasterPages(DocumentHandler *pHandler);
+	void _writePageMasters(DocumentHandler *pHandler);
+	void _allocateFontName(const WPXString &);
+
+private:
+	void _openListLevel(TagOpenElement *pListLevelOpenElement);
+	void _closeListLevel(const char *szListType);
+
+        WPXInputStream *mpInput;
+        DocumentHandler *mpHandler;
+	bool mbUsed; // whether or not it has been before (you can only use me once!)
+
+	WriterDocumentState mWriterDocumentState;
+
+	// paragraph styles
+	std::map<WPXString, ParagraphStyle *, ltstr> mTextStyleHash;
+
+        // span styles
+        std::map<WPXString, SpanStyle *, ltstr> mSpanStyleHash;
+
+	// font styles
+	std::map<WPXString, FontStyle *, ltstr> mFontHash;
+
+	// section styles
+	std::vector<SectionStyle *> mSectionStyles;
+	float mfSectionSpaceAfter;
+
+	// table styles
+	std::vector<TableStyle *> mTableStyles;
+
+	// list styles
+	unsigned int miNumListStyles;
+
+	// style elements
+	std::vector<DocumentElement *> mStylesElements;
+	// content elements
+	std::vector<DocumentElement *> mBodyElements;
+	// the current set of elements that we're writing to
+	std::vector<DocumentElement *> * mpCurrentContentElements;
+
+	// page state
+	std::vector<PageSpan *> mPageSpans;
+	PageSpan *mpCurrentPageSpan;
+	int miNumPageStyles;
+
+	// list styles / state
+	ListStyle *mpCurrentListStyle;
+	unsigned int miCurrentListLevel;
+	unsigned int miLastListLevel;
+	unsigned int miLastListNumber;
+	std::vector<ListStyle *> mListStyles;
+	bool mbListContinueNumbering;
+	bool mbListElementOpened;
+	bool mbListElementParagraphOpened;
+
+	// table state
+	TableStyle *mpCurrentTableStyle;
+};
+
+#endif
--- writerperfect/source/filter/DocumentElement.cxx	1 Mar 2005 17:02:38 -0000	1.2
+++ writerperfect/source/filter/DocumentElement.cxx	19 Dec 2006 10:09:04 -0000	1.2.38.2
@@ -26,7 +26,6 @@
  */
 
 #include "DocumentElement.hxx"
-#include "DocumentHandler.hxx"
 #include "FilterInternal.hxx"
 #include <string.h>
 
@@ -37,9 +36,9 @@ void TagElement::print() const
 	WRITER_DEBUG_MSG(("%s\n", msTagName.cstr()));
 }
 
-void TagOpenElement::write(DocumentHandler &xHandler) const
+void TagOpenElement::write(DocumentHandler *pHandler) const
 {
-	xHandler.startElement(getTagName().cstr(), maAttrList);
+	pHandler->startElement(getTagName().cstr(), maAttrList);
 }
 
 void TagOpenElement::print() const
@@ -52,17 +51,17 @@ void TagOpenElement::addAttribute(const 
         maAttrList.insert(szAttributeName, sAttributeValue);
 }
 
-void TagCloseElement::write(DocumentHandler &xHandler) const
+void TagCloseElement::write(DocumentHandler *pHandler) const
 {
 	WRITER_DEBUG_MSG(("TagCloseElement: write (%s)\n", getTagName().cstr()));
 
-	xHandler.endElement(getTagName().cstr());
+	pHandler->endElement(getTagName().cstr());
 }
 
-void CharDataElement::write(DocumentHandler &xHandler) const
+void CharDataElement::write(DocumentHandler *pHandler) const
 {
 	WRITER_DEBUG_MSG(("TextElement: write\n"));
-	xHandler.characters(msData);
+	pHandler->characters(msData);
 }
 
 TextElement::TextElement(const WPXString & sTextBuf) :
@@ -72,7 +71,7 @@ TextElement::TextElement(const WPXString
 
 // write: writes a text run, appropriately converting spaces to <text:s>
 // elements
-void TextElement::write(DocumentHandler &xHandler) const
+void TextElement::write(DocumentHandler *pHandler) const
 {
 	WPXPropertyList xBlankAttrList;
         
@@ -89,15 +88,15 @@ void TextElement::write(DocumentHandler 
 
 		if (iNumConsecutiveSpaces > 1) {
 			if (sTemp.len() > 0) {
-				xHandler.characters(sTemp);
+				pHandler->characters(sTemp);
 				sTemp.clear();
 			}
-			xHandler.startElement("text:s", xBlankAttrList);
-			xHandler.endElement("text:s");
+			pHandler->startElement("text:s", xBlankAttrList);
+			pHandler->endElement("text:s");
 		}
 		else {
                         sTemp.append(i());
 		}
 	}
-	xHandler.characters(sTemp);
+	pHandler->characters(sTemp);
 }
--- writerperfect/source/filter/DocumentElement.hxx	1 Mar 2005 17:02:52 -0000	1.3
+++ writerperfect/source/filter/DocumentElement.hxx	19 Dec 2006 10:09:05 -0000	1.3.38.1
@@ -38,7 +38,7 @@ class DocumentElement
 {
 public:	
 	virtual ~DocumentElement() {}
-	virtual void write(DocumentHandler &xHandler) const = 0;
+	virtual void write(DocumentHandler *pHandler) const = 0;
 	virtual void print() const {}
 };
 
@@ -58,7 +58,7 @@ public:
 	TagOpenElement(const char *szTagName) : TagElement(szTagName) {}
 	~TagOpenElement() {}
 	void addAttribute(const char *szAttributeName, const WPXString &sAttributeValue);
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 	virtual void print () const;
 private:
 	WPXPropertyList maAttrList;
@@ -68,14 +68,14 @@ class TagCloseElement : public TagElemen
 {
 public:
 	TagCloseElement(const char *szTagName) : TagElement(szTagName) {}
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 };
 
 class CharDataElement : public DocumentElement
 {
 public:
 	CharDataElement(const char *sData) : DocumentElement(), msData(sData) {}
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 private:
 	WPXString msData;
 };
@@ -84,7 +84,7 @@ class TextElement : public DocumentEleme
 {
 public:
 	TextElement(const WPXString & sTextBuf);
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 
 private:
 	WPXString msTextBuf;
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/filter/DocumentHandler.cxx	22 Dec 2006 16:18:35 -0000	1.1.2.4
@@ -0,0 +1,89 @@
+/* 
+ * Copyright (C) 2004 William Lachance (william.lachance@sympatico.ca)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * 
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+  *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+#include "DocumentHandler.hxx"
+#include "FilterInternal.hxx"
+
+#include <string.h>
+
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
+#include <com/sun/star/xml/sax/XAttributeList.hpp>
+#endif
+
+#ifndef _ATTRLIST_HPP_
+#include <xmloff/attrlist.hxx>
+#endif
+
+using namespace ::rtl;
+using rtl::OUString;
+
+using com::sun::star::xml::sax::XAttributeList;
+
+DocumentHandler::DocumentHandler(Reference < XDocumentHandler > &xHandler) :
+        mxHandler(xHandler)
+{
+}
+
+void DocumentHandler::startDocument() 
+{
+	WRITER_DEBUG_MSG(("DocumentHandler::startDocument"));
+	mxHandler->startDocument();
+}
+
+void DocumentHandler::endDocument()
+{
+	WRITER_DEBUG_MSG(("DocumentHandler::endDocument"));
+	mxHandler->endDocument();
+}
+
+void DocumentHandler::startElement(const char *psName, const WPXPropertyList &xPropList)
+{
+	WRITER_DEBUG_MSG(("DocumentHandler::startElement"));
+        SvXMLAttributeList *pAttrList = new SvXMLAttributeList();
+	Reference < XAttributeList > xAttrList(pAttrList);
+	WPXPropertyList::Iter i(xPropList);
+	for (i.rewind(); i.next(); )
+	{
+                // filter out libwpd elements
+                if (strlen(i.key()) > 6 && strncmp(i.key(), "libwpd", 6) != 0)
+                        pAttrList->AddAttribute(OUString::createFromAscii(i.key()),
+                                                OUString::createFromAscii(i()->getStr().cstr()));
+        }
+
+        mxHandler->startElement(OUString::createFromAscii(psName), xAttrList);
+}
+
+void DocumentHandler::endElement(const char *psName)
+{
+	WRITER_DEBUG_MSG(("DocumentHandler::endElement"));
+        mxHandler->endElement(OUString::createFromAscii(psName));
+}
+
+void DocumentHandler::characters(const WPXString &sCharacters)
+{
+	WRITER_DEBUG_MSG(("DocumentHandler::characters"));
+        OUString sCharU16(sCharacters.cstr(), strlen(sCharacters.cstr()), RTL_TEXTENCODING_UTF8);
+        mxHandler->characters(sCharU16);
+}
--- writerperfect/source/filter/DocumentHandler.hxx	1 Mar 2005 17:03:08 -0000	1.2
+++ writerperfect/source/filter/DocumentHandler.hxx	18 Dec 2006 09:27:17 -0000	1.2.38.1
@@ -1,42 +1,27 @@
-/*
- * Copyright (C) 2004 William Lachance (wlach@interlog.com)
- * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- *
- *  Contributor(s): Martin Gallwey (gallwey@sun.com)
- *
- */
-
-/* "This product is not manufactured, approved, or supported by
- * Corel Corporation or Corel Corporation Limited."
- */
-#ifndef _DOCUMENTHANDLER_H
-#define _DOCUMENTHANDLER_H
+#ifndef _OODOCUMENTHANDLER_HXX_
+#define _OODOCUMENTHANDLER_HXX_
+
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+
 #include <libwpd/libwpd.h>
-#include <libwpd/WPXProperty.h>
-#include <libwpd/WPXString.h>
+
+using com::sun::star::uno::Reference;
+using com::sun::star::xml::sax::XDocumentHandler;
 
 class DocumentHandler
-{
+{ 
 public:
-        virtual void startDocument() = 0;
-        virtual void endDocument() = 0;
-        virtual void startElement(const char *psName, const WPXPropertyList &xPropList) = 0;
-        virtual void endElement(const char *psName) = 0;
-        virtual void characters(const WPXString &sCharacters) = 0;
+        DocumentHandler(Reference < XDocumentHandler > &xHandler);
+        void startDocument();
+        void endDocument();
+        void startElement(const char *psName, const WPXPropertyList &xPropList);
+        void endElement(const char *psName);
+        void characters(const WPXString &sCharacters);
+
+private:
+        Reference < XDocumentHandler > mxHandler;
 };
-#endif
+
+#endif // _OODOCUMENTHANDLER_HXX_
--- writerperfect/source/filter/FilterInternal.hxx	1 Mar 2005 17:03:21 -0000	1.2
+++ writerperfect/source/filter/FilterInternal.hxx	19 Dec 2006 10:09:05 -0000	1.2.38.1
@@ -26,10 +26,6 @@
 #define WRITER_DEBUG_MSG(M)
 #endif
 
-#if 0
-#include <rtl/string.hxx>
-inline rtl::OString utf8_itoa(int i)
-{
-	return rtl::OString::valueOf( (sal_Int32) i );
-}
-#endif
+const float fDefaultSideMargin = 1.0f; // inches
+const float fDefaultPageWidth = 8.5f; // inches (OOo required default: we will handle this later)
+const float fDefaultPageHeight = 11.0f; // inches
--- writerperfect/source/filter/FontStyle.cxx	1 Mar 2005 17:04:04 -0000	1.2
+++ writerperfect/source/filter/FontStyle.cxx	19 Dec 2006 10:09:05 -0000	1.2.38.1
@@ -38,13 +38,13 @@ FontStyle::~FontStyle() 
 {
 }
 
-void FontStyle::write(DocumentHandler &xHandler) const
+void FontStyle::write(DocumentHandler *pHandler) const
 {        
 	TagOpenElement styleOpen("style:font-decl");
 	styleOpen.addAttribute("style:name", getName());
 	styleOpen.addAttribute("fo:font-family", msFontFamily);
 	styleOpen.addAttribute("style:font-pitch", msFontPitch);
-	styleOpen.write(xHandler);
+	styleOpen.write(pHandler);
 	TagCloseElement styleClose("style:font-decl");
-	styleClose.write(xHandler);
+	styleClose.write(pHandler);
 }
--- writerperfect/source/filter/FontStyle.hxx	1 Mar 2005 17:04:17 -0000	1.2
+++ writerperfect/source/filter/FontStyle.hxx	19 Dec 2006 10:09:05 -0000	1.2.38.1
@@ -36,7 +36,7 @@ class FontStyle : public Style
 public:
 	FontStyle(const char *psName, const char *psFontFamily);
 	~FontStyle();
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 	const WPXString &getFontFamily() const { return msFontFamily; }
 
 private:
--- writerperfect/source/filter/ListStyle.cxx	1 Nov 2005 10:08:21 -0000	1.3
+++ writerperfect/source/filter/ListStyle.cxx	19 Dec 2006 10:09:05 -0000	1.3.20.1
@@ -41,7 +41,7 @@ void OrderedListStyle::updateListLevel(c
 	    setListLevel(iLevel, new OrderedListLevelStyle(xPropList));
 }
 
-void OrderedListLevelStyle::write(DocumentHandler &xHandler, int iLevel) const
+void OrderedListLevelStyle::write(DocumentHandler *pHandler, int iLevel) const
 {
 	WPXString sLevel;
 	sLevel.sprintf("%i", (iLevel+1));
@@ -57,7 +57,7 @@ void OrderedListLevelStyle::write(Docume
                 listLevelStyleOpen.addAttribute("style:num-format", mPropList["style:num-format"]->getStr());
         if (mPropList["text:start-value"])
                 listLevelStyleOpen.addAttribute("text:start-value", mPropList["text:start-value"]->getStr());
-	listLevelStyleOpen.write(xHandler);
+	listLevelStyleOpen.write(pHandler);
 
 	TagOpenElement stylePropertiesOpen("style:properties");
         if (mPropList["text:space-before"])
@@ -66,10 +66,10 @@ void OrderedListLevelStyle::write(Docume
 		stylePropertiesOpen.addAttribute("text:min-label-width", mPropList["text:min-label-width"]->getStr());
 	if (mPropList["text:min-label-distance"])
 		stylePropertiesOpen.addAttribute("text:min-label-distance", mPropList["text:min-label-distance"]->getStr());
-	stylePropertiesOpen.write(xHandler);
+	stylePropertiesOpen.write(pHandler);
 
-	xHandler.endElement("style:properties");
-	xHandler.endElement("text:list-level-style-number");
+	pHandler->endElement("style:properties");
+	pHandler->endElement("text:list-level-style-number");
 }
 
 UnorderedListLevelStyle::UnorderedListLevelStyle(const WPXPropertyList &xPropList)
@@ -85,7 +85,7 @@ void UnorderedListStyle::updateListLevel
 		setListLevel(iLevel, new UnorderedListLevelStyle(xPropList));
 }
 
-void UnorderedListLevelStyle::write(DocumentHandler &xHandler, int iLevel) const
+void UnorderedListLevelStyle::write(DocumentHandler *pHandler, int iLevel) const
 {
 	WPXString sLevel;
 	sLevel.sprintf("%i", (iLevel+1));
@@ -95,7 +95,7 @@ void UnorderedListLevelStyle::write(Docu
 	listLevelStyleOpen.addAttribute("style:num-suffice", ".");
         if (mPropList["text:bullet-char"])
                 listLevelStyleOpen.addAttribute("text:bullet-char", mPropList["text:bullet-char"]->getStr());
-	listLevelStyleOpen.write(xHandler);
+	listLevelStyleOpen.write(pHandler);
 
 	TagOpenElement stylePropertiesOpen("style:properties");
         if (mPropList["text:space-before"])
@@ -105,10 +105,10 @@ void UnorderedListLevelStyle::write(Docu
 	if (mPropList["text:min-label-distance"])
 		stylePropertiesOpen.addAttribute("text:min-label-distance", mPropList["text:min-label-distance"]->getStr());
 	stylePropertiesOpen.addAttribute("style:font-name", "OpenSymbol");
-	stylePropertiesOpen.write(xHandler);
+	stylePropertiesOpen.write(pHandler);
 
-	xHandler.endElement("style:properties");
-	xHandler.endElement("text:list-level-style-bullet");
+	pHandler->endElement("style:properties");
+	pHandler->endElement("text:list-level-style-bullet");
 }
 
 ListStyle::ListStyle(const char *psName, const int iListID) :
@@ -146,16 +146,16 @@ void ListStyle::setListLevel(int iLevel,
 		mppListLevels[iLevel] = iListLevelStyle;
 }
 
-void ListStyle::write(DocumentHandler &xHandler) const
+void ListStyle::write(DocumentHandler *pHandler) const
 {
 	TagOpenElement listStyleOpenElement("text:list-style");
 	listStyleOpenElement.addAttribute("style:name", getName());
-	listStyleOpenElement.write(xHandler);
+	listStyleOpenElement.write(pHandler);
 
 	for (int i=0; i<WP6_NUM_LIST_LEVELS; i++) {
 		if (mppListLevels[i] != NULL) 
-			mppListLevels[i]->write(xHandler, i);		
+			mppListLevels[i]->write(pHandler, i);		
 	}
 
-	xHandler.endElement("text:list-style");
+	pHandler->endElement("text:list-style");
 }
--- writerperfect/source/filter/ListStyle.hxx	1 Nov 2005 10:08:35 -0000	1.3
+++ writerperfect/source/filter/ListStyle.hxx	20 Dec 2006 16:06:40 -0000	1.3.20.2
@@ -38,14 +38,15 @@ class DocumentElement;
 class ListLevelStyle
 {
 public:
-	virtual void write(DocumentHandler &xHandler, int iLevel) const = 0;
+	virtual ~ListLevelStyle() {};
+	virtual void write(DocumentHandler *pHandler, int iLevel) const = 0;
 };
 
 class OrderedListLevelStyle : public ListLevelStyle
 {
 public:
 	OrderedListLevelStyle(const WPXPropertyList &xPropList);
-	virtual void write(DocumentHandler &xHandler, int iLevel) const;
+	void write(DocumentHandler *pHandler, int iLevel) const;
 private:
         WPXPropertyList mPropList;
 };
@@ -54,7 +55,7 @@ class UnorderedListLevelStyle : public L
 {
 public:
 	UnorderedListLevelStyle(const WPXPropertyList &xPropList);
-	virtual void write(DocumentHandler &xHandler, int iLevel) const;
+	void write(DocumentHandler *pHandler, int iLevel) const;
 private:
         WPXPropertyList mPropList;
 };
@@ -65,7 +66,7 @@ public:
 	ListStyle(const char *psName, const int iListID);
 	virtual ~ListStyle();
 	virtual void updateListLevel(const int iLevel, const WPXPropertyList &xPropList) = 0;
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 	const int getListID() { return miListID; }
 	const bool isListLevelDefined(int iLevel) const;
 
--- writerperfect/source/filter/OODocumentHandler.cxx	1 Mar 2005 17:05:02 -0000	1.2
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,83 +0,0 @@
-/* 
- * Copyright (C) 2004 William Lachance (william.lachance@sympatico.ca)
- * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
- * 
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Library General Public License for more details.
- *
- * You should have received a copy of the GNU Library General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
-  *
- * For further information visit http://libwpd.sourceforge.net
- *
- */
-#include "OODocumentHandler.hxx"
-
-#include <string.h>
-
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
-#include <com/sun/star/xml/sax/XAttributeList.hpp>
-#endif
-
-#ifndef _ATTRLIST_HPP_
-#include <xmloff/attrlist.hxx>
-#endif
-
-using namespace ::rtl;
-using rtl::OUString;
-
-using com::sun::star::xml::sax::XAttributeList;
-
-OODocumentHandler::OODocumentHandler(Reference < XDocumentHandler > &xHandler) :
-        mxHandler(xHandler)
-{
-}
-
-void OODocumentHandler::startDocument() 
-{
-	mxHandler->startDocument();
-}
-
-void OODocumentHandler::endDocument()
-{
-	mxHandler->endDocument();
-}
-
-void OODocumentHandler::startElement(const char *psName, const WPXPropertyList &xPropList)
-{
-        SvXMLAttributeList *pAttrList = new SvXMLAttributeList();
-	Reference < XAttributeList > xAttrList(pAttrList);
-	WPXPropertyList::Iter i(xPropList);
-	for (i.rewind(); i.next(); )
-	{
-                // filter out libwpd elements
-                if (strlen(i.key()) > 6 && strcmp(i.key(), "libwpd") != 0)
-                        pAttrList->AddAttribute(OUString::createFromAscii(i.key()),
-                                                OUString::createFromAscii(i()->getStr().cstr()));
-        }
-
-        mxHandler->startElement(OUString::createFromAscii(psName), xAttrList);
-}
-
-void OODocumentHandler::endElement(const char *psName)
-{
-        mxHandler->endElement(OUString::createFromAscii(psName));
-}
-
-void OODocumentHandler::characters(const WPXString &sCharacters)
-{
-        OUString sCharU16(sCharacters.cstr(), strlen(sCharacters.cstr()), RTL_TEXTENCODING_UTF8);
-        mxHandler->characters(sCharU16);
-}
--- writerperfect/source/filter/OODocumentHandler.hxx	1 Mar 2005 17:05:12 -0000	1.2
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,22 +0,0 @@
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-
-#include "DocumentHandler.hxx"
-
-using com::sun::star::uno::Reference;
-using com::sun::star::xml::sax::XDocumentHandler;
-
-class OODocumentHandler : public DocumentHandler
-{ 
-public:
-        OODocumentHandler(Reference < XDocumentHandler > &xHandler);
-        virtual void startDocument();
-        virtual void endDocument();
-        virtual void startElement(const char *psName, const WPXPropertyList &xPropList);
-        virtual void endElement(const char *psName);
-        virtual void characters(const WPXString &sCharacters);
-
-private:
-        Reference < XDocumentHandler > mxHandler;
-};
--- writerperfect/source/filter/PageSpan.cxx	1 Mar 2005 17:05:26 -0000	1.2
+++ writerperfect/source/filter/PageSpan.cxx	19 Dec 2006 10:09:05 -0000	1.2.38.1
@@ -29,22 +29,7 @@
 #include "PageSpan.hxx"
 #include "DocumentElement.hxx"
 
-const float fDefaultPageWidth = 8.5f; // inches (OOo required default: we will handle this later)
-const float fDefaultPageHeight = 11.0f; // inches
-
 PageSpan::PageSpan(const WPXPropertyList &xPropList) :
-#if 0
-const int iSpan, const float fFormLength, const float fFormWidth, const WPXFormOrientation fFormOrientation,
-                   const float fLeftMargin, const float fRightMargin, const float fTopMargin, const float fBottomMargin):
-	miSpan(iSpan),
-	mfFormLength(fFormLength),
-	mfFormWidth(fFormWidth),
-	mfFormOrientation(fFormOrientation),
-	mfMarginLeft(fLeftMargin),
-	mfMarginRight(fRightMargin),
-	mfMarginTop(fTopMargin),
-	mfMarginBottom(fBottomMargin),
-#endif
         mxPropList(xPropList),
 	mpHeaderContent(NULL),
 	mpFooterContent(NULL),
@@ -55,10 +40,43 @@ const int iSpan, const float fFormLength
 
 PageSpan::~PageSpan()
 {
-	delete mpHeaderContent;
-	delete mpHeaderLeftContent;
-	delete mpFooterContent;
-	delete mpFooterLeftContent;
+	typedef std::vector<DocumentElement *>::iterator DEVIter;
+
+	if (mpHeaderContent)
+	{
+		for (DEVIter iterHeaderContent = mpHeaderContent->begin();
+			iterHeaderContent != mpHeaderContent->end();
+			iterHeaderContent++)
+				delete(*iterHeaderContent);
+		delete mpHeaderContent;
+	}
+
+	if (mpHeaderLeftContent)
+	{
+		for (DEVIter iterHeaderLeftContent = mpHeaderLeftContent->begin();
+			iterHeaderLeftContent != mpHeaderLeftContent->end();
+			iterHeaderLeftContent++)
+				delete(*iterHeaderLeftContent);
+		delete mpHeaderLeftContent;
+	}
+
+	if (mpFooterContent)
+	{
+		for (DEVIter iterFooterContent = mpFooterContent->begin();
+			iterFooterContent != mpFooterContent->end();
+			iterFooterContent++)
+				delete(*iterFooterContent);
+		delete mpFooterContent;
+	}
+
+	if (mpFooterLeftContent)
+	{
+		for (DEVIter iterFooterLeftContent = mpFooterLeftContent->begin();
+			iterFooterLeftContent != mpFooterLeftContent->end();
+			iterFooterLeftContent++)
+				delete(*iterFooterLeftContent);
+		delete mpFooterLeftContent;
+	}
 }
 
 int PageSpan::getSpan() const
@@ -85,27 +103,40 @@ float PageSpan::getMarginRight() const
          return 0.0f; 
 }
 
-void PageSpan::writePageMaster(const int iNum, DocumentHandler &xHandler) const
+void PageSpan::writePageMaster(const int iNum, DocumentHandler *pHandler) const
 {
         WPXPropertyList propList;
         
 	WPXString sPageMasterName; 
-        sPageMasterName.sprintf("PM%i", iNum);
+        sPageMasterName.sprintf("PM%i", iNum /* +2 */);
         propList.insert("style:name", sPageMasterName);
-	propList.insert("style:name", sPageMasterName);
-	xHandler.startElement("style:page-master", propList);
 
-        xHandler.startElement("style:properties", mxPropList);
+	pHandler->startElement("style:page-master", propList);
 
-        xHandler.endElement("style:properties");
-        xHandler.endElement("style:page-master");
+	WPXPropertyList tempPropList = mxPropList;
+	if (!tempPropList["style:writing-mode"])
+		tempPropList.insert("style:writing-mode", WPXString("lr-tb"));
+	if (!tempPropList["style:footnote-max-height"])
+		tempPropList.insert("style:footnote-max-height", WPXString("0inch"));
+        pHandler->startElement("style:properties", tempPropList);
+	
+	WPXPropertyList footnoteSepPropList;
+	footnoteSepPropList.insert("style:width", WPXString("0.0071inch"));
+	footnoteSepPropList.insert("style:distance-before-sep", WPXString("0.0398inch"));
+	footnoteSepPropList.insert("style:distance-after-sep", WPXString("0.0398inch"));
+	footnoteSepPropList.insert("style:adjustment", WPXString("left"));
+	footnoteSepPropList.insert("style:rel-width", WPXString("25%"));
+	footnoteSepPropList.insert("style:color", WPXString("#000000"));
+	pHandler->startElement("style:footnote-sep", footnoteSepPropList);
+	
+	pHandler->endElement("style:footnote-sep");
+        pHandler->endElement("style:properties");
+        pHandler->endElement("style:page-master");
 }
 
 void PageSpan::writeMasterPages(const int iStartingNum, const int iPageMasterNum, const bool bLastPageSpan, 
-                                DocumentHandler &xHandler) const
+                                DocumentHandler *pHandler) const
 {
-        WPXPropertyList propList; // scratch space
-
 	int iSpan = 0;
 	(bLastPageSpan) ? iSpan = 1 : iSpan = getSpan();
 
@@ -115,7 +146,8 @@ void PageSpan::writeMasterPages(const in
 		WPXString sMasterPageName;
 		sMasterPageName.sprintf("Page Style %i", i);
 		WPXString sPageMasterName;
-		sPageMasterName.sprintf("PM%i", iPageMasterNum);
+		sPageMasterName.sprintf("PM%i", iPageMasterNum /* +2 */);
+		WPXPropertyList propList;
                 propList.insert("style:name", sMasterPageName);
 		propList.insert("style:page-master-name", sPageMasterName);
 		if (!bLastPageSpan)
@@ -124,34 +156,34 @@ void PageSpan::writeMasterPages(const in
 			sNextMasterPageName.sprintf("Page Style %i", (i+1));
                         propList.insert("style:next-style-name", sNextMasterPageName);
 		}
-                xHandler.startElement("style:master-page", propList);
+                pHandler->startElement("style:master-page", propList);
 
 		if (mpHeaderContent)
-			_writeHeaderFooter("style:header", *mpHeaderContent, xHandler);
+			_writeHeaderFooter("style:header", *mpHeaderContent, pHandler);
 		if (mpHeaderLeftContent)
-			_writeHeaderFooter("style:header-left", *mpHeaderLeftContent, xHandler);
+			_writeHeaderFooter("style:header-left", *mpHeaderLeftContent, pHandler);
 		if (mpFooterContent)
-			_writeHeaderFooter("style:footer", *mpFooterContent, xHandler);
+			_writeHeaderFooter("style:footer", *mpFooterContent, pHandler);
 		if (mpFooterLeftContent)
-			_writeHeaderFooter("style:footer-left", *mpFooterLeftContent, xHandler);
+			_writeHeaderFooter("style:footer-left", *mpFooterLeftContent, pHandler);
 
-                xHandler.endElement("style:master-page");
+                pHandler->endElement("style:master-page");
 	}
 
 }
 
 void PageSpan::_writeHeaderFooter(const char *headerFooterTagName,
 				  const std::vector<DocumentElement *> & headerFooterContent,
-				  DocumentHandler &xHandler) const
+				  DocumentHandler *pHandler) const
 {
 	TagOpenElement headerFooterOpen(headerFooterTagName);
-	headerFooterOpen.write(xHandler);
+	headerFooterOpen.write(pHandler);
 	for (std::vector<DocumentElement *>::const_iterator iter = headerFooterContent.begin();
 	     iter != headerFooterContent.end();
 	     iter++) {
-		(*iter)->write(xHandler);
+		(*iter)->write(pHandler);
 	}
 	TagCloseElement headerFooterClose(headerFooterTagName);
-	headerFooterClose.write(xHandler);
+	headerFooterClose.write(pHandler);
 }
 
--- writerperfect/source/filter/PageSpan.hxx	1 Mar 2005 17:05:41 -0000	1.2
+++ writerperfect/source/filter/PageSpan.hxx	19 Dec 2006 10:09:06 -0000	1.2.38.1
@@ -37,14 +37,9 @@ class PageSpan
 public:
 	PageSpan(const WPXPropertyList &xPropList);
 	virtual ~PageSpan();
-	void writePageMaster(const int iNum, DocumentHandler &xHandler) const;
-	void writeMasterPages(const int iStartingNum, const int iPageMasterNum, const bool bLastPageSpan, DocumentHandler &xHandler) const;
+	void writePageMaster(const int iNum, DocumentHandler *pHandler) const;
+	void writeMasterPages(const int iStartingNum, const int iPageMasterNum, const bool bLastPageSpan, DocumentHandler *pHandler) const;
 	int getSpan() const;
-#if 0
-	float getFormLength() { return mfFormLength; }
-	float getFormWidth() { return mfFormWidth; }
-	WPXFormOrientation getFormOrientation() { return mfFormOrientation; }
-#endif
 	float getMarginLeft() const;
 	float getMarginRight() const;
 
@@ -55,7 +50,7 @@ public:
 	void setFooterLeftContent(std::vector<DocumentElement *> * pFooterContent) { mpFooterLeftContent = pFooterContent; }
 protected:
 	void _writeHeaderFooter(const char *headerFooterTagName, const std::vector<DocumentElement *> & headerFooterContent,
-				DocumentHandler &xHandler) const;
+				DocumentHandler *pHandler) const;
 private:
         WPXPropertyList mxPropList;
 	std::vector<DocumentElement *> * mpHeaderContent;
--- writerperfect/source/filter/SectionStyle.cxx	1 Mar 2005 17:05:55 -0000	1.2
+++ writerperfect/source/filter/SectionStyle.cxx	4 Jan 2007 11:44:20 -0000	1.2.38.2
@@ -35,10 +35,6 @@
 double rint(double x);
 #endif /* _WIN32 */
 
-const float fDefaultSideMargin = 1.0f; // inches
-const float fDefaultPageWidth = 8.5f; // inches (OOo required default: we will handle this later)
-const float fDefaultPageHeight = 11.0f; // inches
-
 SectionStyle::SectionStyle(const WPXPropertyList &xPropList, 
                            const WPXPropertyListVector &xColumns, 
                            const char *psName) : 
@@ -48,34 +44,43 @@ SectionStyle::SectionStyle(const WPXProp
 {
 }
 
-void SectionStyle::write(DocumentHandler &xHandler) const
+void SectionStyle::write(DocumentHandler *pHandler) const
 {
 	TagOpenElement styleOpen("style:style");
 	styleOpen.addAttribute("style:name", getName());
 	styleOpen.addAttribute("style:family", "section");
-	styleOpen.write(xHandler);
+	styleOpen.write(pHandler);
 
 	// if the number of columns is <= 1, we will never come here. This is only an additional check
+	// style properties
+	pHandler->startElement("style:properties", mPropList);
+
+	// column properties
+	WPXPropertyList columnProps;
+
 	if (mColumns.count() > 1)
 	{		
-		// style properties
-                xHandler.startElement("style:properties", mPropList);
-
-		// column properties
-                WPXPropertyList columnProps;
                 columnProps.insert("fo:column-count", (int)mColumns.count());
-                xHandler.startElement("style:columns", columnProps);
+                pHandler->startElement("style:columns", columnProps);
 	
                 WPXPropertyListVector::Iter i(mColumns);
                 for (i.rewind(); i.next();)
 		{
-                        xHandler.startElement("style:column", i());
-                        xHandler.endElement("style:column");
+                        pHandler->startElement("style:column", i());
+                        pHandler->endElement("style:column");
 		}
-
-                xHandler.endElement("style:columns");
-                xHandler.endElement("style:properties");
 	}
+	else
+	{
+		columnProps.insert("fo:column-count", 0);
+		columnProps.insert("fo:column-gap", 0.0f);
+		pHandler->startElement("style:columns", columnProps);
+	}
+
+	pHandler->endElement("style:columns");
+
+		
+	pHandler->endElement("style:properties");
 
-	xHandler.endElement("style:style");
+	pHandler->endElement("style:style");
 }
--- writerperfect/source/filter/SectionStyle.hxx	1 Mar 2005 17:06:08 -0000	1.2
+++ writerperfect/source/filter/SectionStyle.hxx	19 Dec 2006 10:09:06 -0000	1.2.38.1
@@ -37,7 +37,7 @@ class SectionStyle : public Style
 {
 public:
 	SectionStyle(const WPXPropertyList &xPropList, const WPXPropertyListVector &xColumns, const char *psName);
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 
 private:
         WPXPropertyList mPropList;
--- writerperfect/source/filter/Style.hxx	1 Mar 2005 17:06:20 -0000	1.2
+++ writerperfect/source/filter/Style.hxx	19 Dec 2006 10:09:06 -0000	1.2.38.2
@@ -48,7 +48,7 @@ class Style
 	Style(const WPXString &psName) : msName(psName) {}
 	virtual ~Style() {}
 
-	virtual void write(DocumentHandler &xHandler) const {};
+	virtual void write(DocumentHandler * /* pHandler */) const {};
 	const WPXString &getName() const { return msName; }
 
  private:
--- writerperfect/source/filter/TableStyle.cxx	1 Nov 2005 10:08:48 -0000	1.3
+++ writerperfect/source/filter/TableStyle.cxx	19 Dec 2006 10:09:06 -0000	1.3.20.1
@@ -41,12 +41,12 @@ TableCellStyle::TableCellStyle(const WPX
 {
 }
 
-void TableCellStyle::write(DocumentHandler &xHandler) const
+void TableCellStyle::write(DocumentHandler *pHandler) const
 {
 	TagOpenElement styleOpen("style:style");
 	styleOpen.addAttribute("style:name", getName());
 	styleOpen.addAttribute("style:family", "table-cell");
-	styleOpen.write(xHandler);
+	styleOpen.write(pHandler);
 
         // WLACH_REFACTORING: Only temporary.. a much better solution is to
         // generalize this sort of thing into the "Style" superclass
@@ -58,10 +58,10 @@ void TableCellStyle::write(DocumentHandl
                         stylePropList.insert(i.key(), i()->clone());
         }
         stylePropList.insert("fo:padding", "0.0382inch");
-        xHandler.startElement("style:properties", stylePropList);
-	xHandler.endElement("style:properties");
+        pHandler->startElement("style:properties", stylePropList);
+	pHandler->endElement("style:properties");
 
-	xHandler.endElement("style:style");	
+	pHandler->endElement("style:style");	
 }
 
 TableRowStyle::TableRowStyle(const WPXPropertyList &propList, const char *psName) :
@@ -70,22 +70,22 @@ TableRowStyle::TableRowStyle(const WPXPr
 {
 }
 
-void TableRowStyle::write(DocumentHandler &xHandler) const
+void TableRowStyle::write(DocumentHandler *pHandler) const
 {
 	TagOpenElement styleOpen("style:style");
 	styleOpen.addAttribute("style:name", getName());
 	styleOpen.addAttribute("style:family", "table-row");
-	styleOpen.write(xHandler);
+	styleOpen.write(pHandler);
 	
         TagOpenElement stylePropertiesOpen("style:properties");
         if (mPropList["style:min-row-height"])
                 stylePropertiesOpen.addAttribute("style:min-row-height", mPropList["style:min-row-height"]->getStr());
         else if (mPropList["style:row-height"])
                 stylePropertiesOpen.addAttribute("style:row-height", mPropList["style:row-height"]->getStr());
-        stylePropertiesOpen.write(xHandler);
-        xHandler.endElement("style:properties");
+        stylePropertiesOpen.write(pHandler);
+        pHandler->endElement("style:properties");
 	
-	xHandler.endElement("style:style");		
+	pHandler->endElement("style:style");		
 }
 	
 
@@ -99,19 +99,22 @@ TableStyle::TableStyle(const WPXProperty
 TableStyle::~TableStyle()
 {
 	typedef std::vector<TableCellStyle *>::iterator TCSVIter;
+	typedef std::vector<TableRowStyle *>::iterator TRSVIter;
 	for (TCSVIter iterTableCellStyles = mTableCellStyles.begin() ; iterTableCellStyles != mTableCellStyles.end(); iterTableCellStyles++)
 		delete(*iterTableCellStyles);
+	for (TRSVIter iterTableRowStyles = mTableRowStyles.begin() ; iterTableRowStyles != mTableRowStyles.end(); iterTableRowStyles++)
+		delete(*iterTableRowStyles);
 
 }
 
-void TableStyle::write(DocumentHandler &xHandler) const
+void TableStyle::write(DocumentHandler *pHandler) const
 {
 	TagOpenElement styleOpen("style:style");
 	styleOpen.addAttribute("style:name", getName());
 	styleOpen.addAttribute("style:family", "table");
 	if (getMasterPageName())
 		styleOpen.addAttribute("style:master-page-name", getMasterPageName()->cstr());
-	styleOpen.write(xHandler);
+	styleOpen.write(pHandler);
 
 	TagOpenElement stylePropertiesOpen("style:properties");
         if (mPropList["table:align"])
@@ -124,36 +127,36 @@ void TableStyle::write(DocumentHandler &
 		stylePropertiesOpen.addAttribute("style:width", mPropList["style:width"]->getStr());
 	if (mPropList["fo:break-before"])
 		stylePropertiesOpen.addAttribute("fo:break-before", mPropList["fo:break-before"]->getStr());
-	stylePropertiesOpen.write(xHandler);
+	stylePropertiesOpen.write(pHandler);
 
-	xHandler.endElement("style:properties");
+	pHandler->endElement("style:properties");
 
-	xHandler.endElement("style:style");
+	pHandler->endElement("style:style");
 		
 	int i=1;
         WPXPropertyListVector::Iter j(mColumns);
 	for (j.rewind(); j.next();)
 	{
-		TagOpenElement styleOpen("style:style");
+		TagOpenElement styleNestedOpen("style:style");
 		WPXString sColumnName;
 		sColumnName.sprintf("%s.Column%i", getName().cstr(), i);
-		styleOpen.addAttribute("style:name", sColumnName);
-		styleOpen.addAttribute("style:family", "table-column");
-		styleOpen.write(xHandler);
+		styleNestedOpen.addAttribute("style:name", sColumnName);
+		styleNestedOpen.addAttribute("style:family", "table-column");
+		styleNestedOpen.write(pHandler);
 
-                xHandler.startElement("style:properties", j());
-		xHandler.endElement("style:properties");
+                pHandler->startElement("style:properties", j());
+		pHandler->endElement("style:properties");
 
-		xHandler.endElement("style:style");
+		pHandler->endElement("style:style");
 
 		i++;
 	}
 
 	typedef std::vector<TableRowStyle *>::const_iterator TRSVIter;
 	for (TRSVIter iterTableRow = mTableRowStyles.begin() ; iterTableRow != mTableRowStyles.end(); iterTableRow++)
-		(*iterTableRow)->write(xHandler);
+		(*iterTableRow)->write(pHandler);
 
 	typedef std::vector<TableCellStyle *>::const_iterator TCSVIter;
 	for (TCSVIter iterTableCell = mTableCellStyles.begin() ; iterTableCell != mTableCellStyles.end(); iterTableCell++)
-		(*iterTableCell)->write(xHandler);
+		(*iterTableCell)->write(pHandler);
 }
--- writerperfect/source/filter/TableStyle.hxx	1 Mar 2005 17:06:47 -0000	1.2
+++ writerperfect/source/filter/TableStyle.hxx	19 Dec 2006 10:09:06 -0000	1.2.38.1
@@ -40,7 +40,7 @@ class TableCellStyle : public Style
 {
 public:
 	TableCellStyle(const WPXPropertyList &xPropList, const char *psName);
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 private:
         WPXPropertyList mPropList;
 };
@@ -49,7 +49,7 @@ class TableRowStyle : public Style
 {
 public:
 	TableRowStyle(const WPXPropertyList &propList, const char *psName);
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 private:
         WPXPropertyList mPropList;
 };
@@ -59,7 +59,7 @@ class TableStyle : public Style, public 
 public:
 	TableStyle(const WPXPropertyList &xPropList, const WPXPropertyListVector &columns, const char *psName);
 	~TableStyle();
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 	const int getNumColumns() const { return mColumns.count(); }
 	void addTableCellStyle(TableCellStyle *pTableCellStyle) { mTableCellStyles.push_back(pTableCellStyle); }
 	int getNumTableCellStyles() { return mTableCellStyles.size(); }
--- writerperfect/source/filter/TextRunStyle.cxx	14 Jul 2005 14:05:44 -0000	1.3
+++ writerperfect/source/filter/TextRunStyle.cxx	19 Dec 2006 10:09:06 -0000	1.3.30.1
@@ -48,7 +48,7 @@ ParagraphStyle::~ParagraphStyle()
 	delete mpPropList;
 }
 
-void ParagraphStyle::write(DocumentHandler &xHandler) const
+void ParagraphStyle::write(DocumentHandler *pHandler) const
 {
 	WRITER_DEBUG_MSG(("Writing a paragraph style..\n"));
 
@@ -58,41 +58,41 @@ void ParagraphStyle::write(DocumentHandl
 	propList.insert("style:parent-style-name", (*mpPropList)["style:parent-style-name"]->getStr());
 	if ((*mpPropList)["style:master-page-name"])
 		propList.insert("style:master-page-name", (*mpPropList)["style:master-page-name"]->getStr());
-        xHandler.startElement("style:style", propList);
+        pHandler->startElement("style:style", propList);
 
         propList.clear();
-	WPXPropertyList::Iter i((*mpPropList));
-	for (i.rewind(); i.next(); )
+	WPXPropertyList::Iter k((*mpPropList));
+	for (k.rewind(); k.next(); )
 	{
-                if (strcmp(i.key(), "style:list-style-name") == 0)
-                        propList.insert("style:list-style-name", i()->getStr());
-		if (strcmp(i.key(), "fo:margin-left") == 0)
-			propList.insert("fo:margin-left", i()->getStr());
-		if (strcmp(i.key(), "fo:margin-right") == 0)
-			propList.insert("fo:margin-right", i()->getStr());
-		if (strcmp(i.key(), "fo:text-indent") == 0)
-			propList.insert("fo:text-indent", i()->getStr());
-		if (strcmp(i.key(), "fo:margin-top") == 0)
-			propList.insert("fo:margin-top", i()->getStr());
-		if (strcmp(i.key(), "fo:margin-bottom") == 0)
-			propList.insert("fo:margin-bottom", i()->getStr());
-		if (strcmp(i.key(), "fo:line-height") == 0)
-			propList.insert("fo:line-height", i()->getStr());
-		if (strcmp(i.key(), "fo:break-before") == 0) 
-			propList.insert("fo:break-before", i()->getStr());
-		if (strcmp(i.key(), "fo:text-align") == 0) 
-			propList.insert("fo:text-align", i()->getStr());
-                if (strcmp(i.key(), "fo:text-align-last") == 0)
-                        propList.insert("fo:text-align-last", i()->getStr());
+                if (strcmp(k.key(), "style:list-style-name") == 0)
+                        propList.insert("style:list-style-name", k()->getStr());
+		if (strcmp(k.key(), "fo:margin-left") == 0)
+			propList.insert("fo:margin-left", k()->getStr());
+		if (strcmp(k.key(), "fo:margin-right") == 0)
+			propList.insert("fo:margin-right", k()->getStr());
+		if (strcmp(k.key(), "fo:text-indent") == 0)
+			propList.insert("fo:text-indent", k()->getStr());
+		if (strcmp(k.key(), "fo:margin-top") == 0)
+			propList.insert("fo:margin-top", k()->getStr());
+		if (strcmp(k.key(), "fo:margin-bottom") == 0)
+			propList.insert("fo:margin-bottom", k()->getStr());
+		if (strcmp(k.key(), "fo:line-height") == 0)
+			propList.insert("fo:line-height", k()->getStr());
+		if (strcmp(k.key(), "fo:break-before") == 0) 
+			propList.insert("fo:break-before", k()->getStr());
+		if (strcmp(k.key(), "fo:text-align") == 0) 
+			propList.insert("fo:text-align", k()->getStr());
+                if (strcmp(k.key(), "fo:text-align-last") == 0)
+                        propList.insert("fo:text-align-last", k()->getStr());
 	}
 	
 	propList.insert("style:justify-single-word", "false");
-	xHandler.startElement("style:properties", propList);
+	pHandler->startElement("style:properties", propList);
 
         if (mxTabStops.count() > 0) 
         {
                 TagOpenElement tabListOpen("style:tab-stops");
-                tabListOpen.write(xHandler);
+                tabListOpen.write(pHandler);
                 WPXPropertyListVector::Iter i(mxTabStops);
                 for (i.rewind(); i.next();)
                 {
@@ -103,14 +103,14 @@ void ParagraphStyle::write(DocumentHandl
                         {
                                 tabStopOpen.addAttribute(j.key(), j()->getStr().cstr());			
                         }
-                        tabStopOpen.write(xHandler);
-                        xHandler.endElement("style:tab-stop");
+                        tabStopOpen.write(pHandler);
+                        pHandler->endElement("style:tab-stop");
                 }
-                xHandler.endElement("style:tab-stops");
+                pHandler->endElement("style:tab-stops");
         }
 
-	xHandler.endElement("style:properties");
-	xHandler.endElement("style:style");
+	pHandler->endElement("style:properties");
+	pHandler->endElement("style:style");
 }
 
 SpanStyle::SpanStyle(const char *psName, const WPXPropertyList &xPropList) :
@@ -119,13 +119,13 @@ SpanStyle::SpanStyle(const char *psName,
 {
 }
 
-void SpanStyle::write(DocumentHandler &xHandler) const 
+void SpanStyle::write(DocumentHandler *pHandler) const 
 {
 	WRITER_DEBUG_MSG(("Writing a span style..\n"));
         WPXPropertyList styleOpenList;    
 	styleOpenList.insert("style:name", getName());
 	styleOpenList.insert("style:family", "text");
-        xHandler.startElement("style:style", styleOpenList);
+        pHandler->startElement("style:style", styleOpenList);
 
         WPXPropertyList propList(mPropList);    
 
@@ -153,8 +153,8 @@ void SpanStyle::write(DocumentHandler &x
 		propList.insert("style:font-style-complex", mPropList["fo:font-style"]->getStr());
 	}
 
-        xHandler.startElement("style:properties", propList);
+        pHandler->startElement("style:properties", propList);
 
-	xHandler.endElement("style:properties");
-	xHandler.endElement("style:style");
+	pHandler->endElement("style:properties");
+	pHandler->endElement("style:style");
 }
--- writerperfect/source/filter/TextRunStyle.hxx	1 Mar 2005 17:07:15 -0000	1.2
+++ writerperfect/source/filter/TextRunStyle.hxx	19 Dec 2006 10:09:07 -0000	1.2.38.1
@@ -42,7 +42,7 @@ class ParagraphStyle
 public:
 	ParagraphStyle(WPXPropertyList *propList, const WPXPropertyListVector &tabStops, const WPXString &sName);
 	virtual ~ParagraphStyle();
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 	WPXString getName() const { return msName; }
 private:
 	WPXPropertyList *mpPropList;
@@ -55,7 +55,7 @@ class SpanStyle : public Style
 {
 public:
 	SpanStyle(const char *psName, const WPXPropertyList &xPropList);
-	virtual void write(DocumentHandler &xHandler) const;
+	virtual void write(DocumentHandler *pHandler) const;
 
 private:
         WPXPropertyList mPropList;
--- writerperfect/source/filter/WordPerfectCollector.cxx	1 Nov 2005 10:09:01 -0000	1.5
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,916 +0,0 @@
-/* WordPerfectCollector: Collects sections and runs of text from a
- * wordperfect file (and styles to go along with them) and writes them
- * to a Writer target document
- *
- * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
- * Copyright (C) 2003-2004 Net Integration Technologies (http://www.net-itech.com)
- * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Library General Public License for more details.
- *
- * You should have received a copy of the GNU Library General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
- *
- * For further information visit http://libwpd.sourceforge.net
- *
- */
-
-/* "This product is not manufactured, approved, or supported by
- * Corel Corporation or Corel Corporation Limited."
- */
-
-#include <libwpd/libwpd.h>
-#include <string.h> // for strcmp
-
-#include "WordPerfectCollector.hxx"
-#include "DocumentElement.hxx"
-#include "TextRunStyle.hxx"
-#include "FontStyle.hxx"
-#include "ListStyle.hxx"
-#include "PageSpan.hxx"
-#include "SectionStyle.hxx"
-#include "TableStyle.hxx"
-#include "FilterInternal.hxx"
-#include "WriterProperties.hxx"
-
-_WriterDocumentState::_WriterDocumentState() :
-	mbFirstElement(true),
-	mbInFakeSection(false),
-	mbListElementOpenedAtCurrentLevel(false),
-	mbTableCellOpened(false),
-	mbHeaderRow(false),
-	mbInNote(false)
-{
-}
-
-WordPerfectCollector::WordPerfectCollector(WPXInputStream *pInput, DocumentHandler *pHandler) :
-        mpInput(pInput),
-        mpHandler(pHandler),
-	mbUsed(false),
-	mfSectionSpaceAfter(0.0f),
-	miNumListStyles(0),
-	mpCurrentContentElements(&mBodyElements),
-	mpCurrentPageSpan(NULL),
-	miNumPageStyles(0),
-	mpCurrentListStyle(NULL),
-	miCurrentListLevel(0),
-	miLastListLevel(0),
-	miLastListNumber(0),
-	mbListContinueNumbering(false),
-	mbListElementParagraphOpened(false),
-	mbListElementOpened(false)
-{
-}
-
-WordPerfectCollector::~WordPerfectCollector()
-{
-}
-
-bool WordPerfectCollector::filter()
-{
-	// The contract for WordPerfectCollector is that it will only be used once after it is
-	// instantiated
-	if (mbUsed)
-		return false;
-
-	mbUsed = true;
-
-	// parse & write
-        // WLACH_REFACTORING: Remove these args..
- 	if (!_parseSourceDocument(*mpInput))
-		return false;
-	if (!_writeTargetDocument(*mpHandler))
-		return false;
-
- 	// clean up the mess we made
- 	WRITER_DEBUG_MSG(("WriterWordPerfect: Cleaning up our mess..\n"));
-
-	WRITER_DEBUG_MSG(("Destroying the body elements\n"));
-	for (std::vector<DocumentElement *>::iterator iterBody = mBodyElements.begin(); iterBody != mBodyElements.end(); iterBody++) {
-		delete((*iterBody));
-		(*iterBody) = NULL;
-	}
-
-	WRITER_DEBUG_MSG(("Destroying the styles elements\n"));
-	for (std::vector<DocumentElement *>::iterator iterStyles = mStylesElements.begin(); iterStyles != mStylesElements.end(); iterStyles++) {
- 		delete (*iterStyles);
-		(*iterStyles) = NULL; // we may pass over the same element again (in the case of headers/footers spanning multiple pages)
-				      // so make sure we don't do a double del
-	}
-
-	WRITER_DEBUG_MSG(("Destroying the rest of the styles elements\n"));
-	for (std::map<WPXString, ParagraphStyle *, ltstr>::iterator iterTextStyle = mTextStyleHash.begin(); iterTextStyle != mTextStyleHash.end(); iterTextStyle++) {
-		delete(iterTextStyle->second);
-	}
-	for (std::map<WPXString, FontStyle *, ltstr>::iterator iterFont = mFontHash.begin(); iterFont != mFontHash.end(); iterFont++) {
-		delete(iterFont->second);
-	}
-
-	for (std::vector<ListStyle *>::iterator iterListStyles = mListStyles.begin(); iterListStyles != mListStyles.end(); iterListStyles++) {
-		delete((*iterListStyles));
-	}
-	for (std::vector<SectionStyle *>::iterator iterSectionStyles = mSectionStyles.begin(); iterSectionStyles != mSectionStyles.end(); iterSectionStyles++) {
-		delete((*iterSectionStyles));
-	}
-	for (std::vector<TableStyle *>::iterator iterTableStyles = mTableStyles.begin(); iterTableStyles != mTableStyles.end(); iterTableStyles++) {
-		delete((*iterTableStyles));
-	}
-
-	for (std::vector<PageSpan *>::iterator iterPageSpans = mPageSpans.begin(); iterPageSpans != mPageSpans.end(); iterPageSpans++) {
-		delete((*iterPageSpans));
-	}
-
- 	return true;
-}
-
-bool WordPerfectCollector::_parseSourceDocument(WPXInputStream &input)
-{
-        WPDResult result = WPDocument::parse(&input, static_cast<WPXHLListenerImpl *>(this));
-        if (result != WPD_OK)
-                return false;
-
-	return true;
-}
-
-void WordPerfectCollector::_writeDefaultStyles(DocumentHandler &xHandler)
-{
-	TagOpenElement stylesOpenElement("office:styles");
-	stylesOpenElement.write(xHandler);
-
-	TagOpenElement defaultParagraphStyleOpenElement("style:default-style");
-	defaultParagraphStyleOpenElement.addAttribute("style:family", "paragraph");
-	defaultParagraphStyleOpenElement.write(xHandler);
-
-	TagOpenElement defaultParagraphStylePropertiesOpenElement("style:properties");
-	defaultParagraphStylePropertiesOpenElement.addAttribute("style:family", "paragraph");
-	defaultParagraphStylePropertiesOpenElement.addAttribute("style:tab-stop-distance", "0.5inch");
-	defaultParagraphStylePropertiesOpenElement.write(xHandler);
-	TagCloseElement defaultParagraphStylePropertiesCloseElement("style:properties");
-	defaultParagraphStylePropertiesCloseElement.write(xHandler);
-
-	TagCloseElement defaultParagraphStyleCloseElement("style:default-style");
-	defaultParagraphStyleCloseElement.write(xHandler);
-	
-	TagOpenElement standardStyleOpenElement("style:style");
-        standardStyleOpenElement.addAttribute("style:name", "Standard");
-        standardStyleOpenElement.addAttribute("style:family", "paragraph");
-        standardStyleOpenElement.addAttribute("style:class", "text");
-        standardStyleOpenElement.write(xHandler);
-        TagCloseElement standardStyleCloseElement("style:style");
-        standardStyleCloseElement.write(xHandler);
-
-        TagOpenElement textBodyStyleOpenElement("style:style");
-        textBodyStyleOpenElement.addAttribute("style:name", "Text Body");
-        textBodyStyleOpenElement.addAttribute("style:family", "paragraph");
-        textBodyStyleOpenElement.addAttribute("style:parent-style-name", "Standard");
-        textBodyStyleOpenElement.addAttribute("style:class", "text");
-        textBodyStyleOpenElement.write(xHandler);
-        TagCloseElement textBodyStyleCloseElement("style:style");
-        textBodyStyleCloseElement.write(xHandler);
-
-        TagOpenElement tableContentsStyleOpenElement("style:style");
-        tableContentsStyleOpenElement.addAttribute("style:name", "Table Contents");
-        tableContentsStyleOpenElement.addAttribute("style:family", "paragraph");
-        tableContentsStyleOpenElement.addAttribute("style:parent-style-name", "Text Body");
-        tableContentsStyleOpenElement.addAttribute("style:class", "extra");
-        tableContentsStyleOpenElement.write(xHandler);
-        TagCloseElement tableContentsStyleCloseElement("style:style");
-        tableContentsStyleCloseElement.write(xHandler);
-
-        TagOpenElement tableHeadingStyleOpenElement("style:style");
-        tableHeadingStyleOpenElement.addAttribute("style:name", "Table Heading");
-        tableHeadingStyleOpenElement.addAttribute("style:family", "paragraph");
-        tableHeadingStyleOpenElement.addAttribute("style:parent-style-name", "Table Contents");
-        tableHeadingStyleOpenElement.addAttribute("style:class", "extra");
-        tableHeadingStyleOpenElement.write(xHandler);
-        TagCloseElement tableHeadingStyleCloseElement("style:style");
-        tableHeadingStyleCloseElement.write(xHandler);
-
-	TagCloseElement stylesCloseElement("office:styles");
-	stylesCloseElement.write(xHandler);
-
-}
-
-// writes everything up to the automatic styles declarations..
-void WordPerfectCollector::_writeBegin()
-{
-}
-
-void WordPerfectCollector::_writeMasterPages(DocumentHandler &xHandler)
-{
-        WPXPropertyList xBlankAttrList;
-
-	xHandler.startElement("office:master-styles", xBlankAttrList);
-	int pageNumber = 1;
-	for (int i=0; i<mPageSpans.size(); i++)
-	{
-		bool bLastPage;
-		(i == (mPageSpans.size() - 1)) ? bLastPage = true : bLastPage = false;
-		mPageSpans[i]->writeMasterPages(pageNumber, i, bLastPage, xHandler);
-		pageNumber += mPageSpans[i]->getSpan();
-	}
-	xHandler.endElement("office:master-styles");
-}
-
-void WordPerfectCollector::_writePageMasters(DocumentHandler &xHandler)
-{
-	int pageNumber = 1;
-	for (int i=0; i<mPageSpans.size(); i++)
-	{
-		mPageSpans[i]->writePageMaster(i, xHandler);
-	}
-}
-
-bool WordPerfectCollector::_writeTargetDocument(DocumentHandler &xHandler)
-{        
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Printing out the header stuff..\n"));
-	WPXPropertyList xBlankAttrList;
-
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Start Document\n"));
-	mpHandler->startDocument();
-
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: preamble\n"));
-        WPXPropertyList docContentPropList;
-	docContentPropList.insert("xmlns:office", "http://openoffice.org/2000/office");
-	docContentPropList.insert("xmlns:style", "http://openoffice.org/2000/style");
-	docContentPropList.insert("xmlns:text", "http://openoffice.org/2000/text");
-	docContentPropList.insert("xmlns:table", "http://openoffice.org/2000/table");
-	docContentPropList.insert("xmlns:draw", "http://openoffice.org/2000/draw");
-	docContentPropList.insert("xmlns:fo", "http://www.w3.org/1999/XSL/Format");
-	docContentPropList.insert("xmlns:xlink", "http://www.w3.org/1999/xlink");
-	docContentPropList.insert("xmlns:number", "http://openoffice.org/2000/datastyle");
-	docContentPropList.insert("xmlns:svg", "http://www.w3.org/2000/svg");
-	docContentPropList.insert("xmlns:chart", "http://openoffice.org/2000/chart");
-	docContentPropList.insert("xmlns:dr3d", "http://openoffice.org/2000/dr3d");
-	docContentPropList.insert("xmlns:math", "http://www.w3.org/1998/Math/MathML");
-	docContentPropList.insert("xmlns:form", "http://openoffice.org/2000/form");
-	docContentPropList.insert("xmlns:script", "http://openoffice.org/2000/script");
-	docContentPropList.insert("office:class", "text");
-	docContentPropList.insert("office:version", "1.0");
-        mpHandler->startElement("office:document-content", docContentPropList);
-
-	// write out the font styles
-	mpHandler->startElement("office:font-decls", xBlankAttrList);
-	for (std::map<WPXString, FontStyle *, ltstr>::iterator iterFont = mFontHash.begin(); iterFont != mFontHash.end(); iterFont++) {
-		iterFont->second->write(*mpHandler);
-	}
-	TagOpenElement symbolFontOpen("style:font-decl");
-	symbolFontOpen.addAttribute("style:name", "StarSymbol");
-	symbolFontOpen.addAttribute("fo:font-family", "StarSymbol");
-	symbolFontOpen.addAttribute("style:font-charset", "x-symbol");
-	symbolFontOpen.write(*mpHandler);
-        mpHandler->endElement("style:font-decl");
-
-	mpHandler->endElement("office:font-decls");
-
-
- 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Writing out the styles..\n"));
-
-	// write default styles
-	_writeDefaultStyles(*mpHandler);
-
-	mpHandler->startElement("office:automatic-styles", xBlankAttrList);
-
-	for (std::map<WPXString, ParagraphStyle *, ltstr>::iterator iterTextStyle = mTextStyleHash.begin(); 
-             iterTextStyle != mTextStyleHash.end(); iterTextStyle++) 
-        {
-		// writing out the paragraph styles
-		if (strcmp((iterTextStyle->second)->getName().cstr(), "Standard")) 
-                {
-			// don't write standard paragraph "no styles" style
-			(iterTextStyle->second)->write(xHandler);
-		}
-	}
-
-        // span styles..
-	for (std::map<WPXString, SpanStyle *, ltstr>::iterator iterSpanStyle = mSpanStyleHash.begin(); 
-             iterSpanStyle != mSpanStyleHash.end(); iterSpanStyle++) 
-        {
-                (iterSpanStyle->second)->write(xHandler);
-	}
-
- 	// writing out the sections styles
-	for (std::vector<SectionStyle *>::iterator iterSectionStyles = mSectionStyles.begin(); iterSectionStyles != mSectionStyles.end(); iterSectionStyles++) {
-		(*iterSectionStyles)->write(xHandler);
-	}
-
-	// writing out the lists styles
-	for (std::vector<ListStyle *>::iterator iterListStyles = mListStyles.begin(); iterListStyles != mListStyles.end(); iterListStyles++) {
-		(*iterListStyles)->write(xHandler);
-	}
-
- 	// writing out the table styles
-	for (std::vector<TableStyle *>::iterator iterTableStyles = mTableStyles.begin(); iterTableStyles != mTableStyles.end(); iterTableStyles++) {
-		(*iterTableStyles)->write(xHandler);
-	}
-
-	// writing out the page masters
-	_writePageMasters(xHandler);
-
-
-	xHandler.endElement("office:automatic-styles");
-
-	_writeMasterPages(xHandler);
-
- 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Writing out the document..\n"));
- 	// writing out the document
-	xHandler.startElement("office:body", xBlankAttrList);
-
-	for (std::vector<DocumentElement *>::iterator iterBodyElements = mBodyElements.begin(); iterBodyElements != mBodyElements.end(); iterBodyElements++) {
-		(*iterBodyElements)->write(xHandler);
-	}
- 	WRITER_DEBUG_MSG(("WriterWordPerfect: Document Body: Finished writing all doc els..\n"));
-
-	xHandler.endElement("office:body");
-	xHandler.endElement("office:document-content");
-
-	xHandler.endDocument();
-
-	return true;
-}
-
-
-WPXString propListToStyleKey(const WPXPropertyList & xPropList)
-{
-        WPXString sKey;
-        WPXPropertyList::Iter i(xPropList);
-        for (i.rewind(); i.next(); )
-        {
-                WPXString sProp;
-                sProp.sprintf("[%s:%s]", i.key(), i()->getStr().cstr());
-                sKey.append(sProp);
-        }
-
-        return sKey;
-}
-
-WPXString getParagraphStyleKey(const WPXPropertyList & xPropList, const WPXPropertyListVector & xTabStops)
-{
-        WPXString sKey = propListToStyleKey(xPropList);
-        
-        WPXString sTabStops;
-        sTabStops.sprintf("[num-tab-stops:%i]", xTabStops.count());
-        WPXPropertyListVector::Iter i(xTabStops);
-        for (i.rewind(); i.next();)
-        {
-                sTabStops.append(propListToStyleKey(i()));
-        }
-        sKey.append(sTabStops);
-
-        return sKey;
-}
-
-// _allocateFontName: add a (potentially mapped) font style to the hash if it's not already there, do nothing otherwise
-void WordPerfectCollector::_allocateFontName(const WPXString & sFontName)
-{
-	if (mFontHash.find(sFontName) == mFontHash.end())
-	{
-		FontStyle *pFontStyle = new FontStyle(sFontName.cstr(), sFontName.cstr());
-		mFontHash[sFontName] = pFontStyle;
-	}
-}
-
-void WordPerfectCollector::openPageSpan(const WPXPropertyList &propList)
-{
-	PageSpan *pPageSpan = new PageSpan(propList);
-	mPageSpans.push_back(pPageSpan);
-	mpCurrentPageSpan = pPageSpan;
-}
-
-void WordPerfectCollector::openHeader(const WPXPropertyList &propList)
-{
-	std::vector<DocumentElement *> * pHeaderFooterContentElements = new std::vector<DocumentElement *>;
-
-	if (propList["libwpd:occurence"]->getStr() == "even")
-                mpCurrentPageSpan->setHeaderLeftContent(pHeaderFooterContentElements);
-        else
-                mpCurrentPageSpan->setHeaderContent(pHeaderFooterContentElements);
-
-	mpCurrentContentElements = pHeaderFooterContentElements;
-}
-
-void WordPerfectCollector::closeHeader()
-{
-	mpCurrentContentElements = &mBodyElements;
-}
-
-void WordPerfectCollector::openFooter(const WPXPropertyList &propList)
-{
-	std::vector<DocumentElement *> * pHeaderFooterContentElements = new std::vector<DocumentElement *>;
-
-	if (propList["libwpd:occurence"]->getStr() == "even")
-                mpCurrentPageSpan->setFooterLeftContent(pHeaderFooterContentElements);
-        else
-                mpCurrentPageSpan->setFooterContent(pHeaderFooterContentElements);
-
-	mpCurrentContentElements = pHeaderFooterContentElements;
-}
-
-void WordPerfectCollector::closeFooter()
-{
-	mpCurrentContentElements = &mBodyElements;
-}
-
-void WordPerfectCollector::openSection(const WPXPropertyList &propList, const WPXPropertyListVector &columns)
-{
-        int iNumColumns = columns.count();
-
-	if (iNumColumns > 1)
-	{
-		mfSectionSpaceAfter = propList["fo:margin-bottom"]->getFloat();
-		WPXString sSectionName;
-		sSectionName.sprintf("Section%i", mSectionStyles.size());
-		
-		SectionStyle *pSectionStyle = new SectionStyle(propList, columns, sSectionName.cstr());
-		mSectionStyles.push_back(pSectionStyle);
-		
-		TagOpenElement *pSectionOpenElement = new TagOpenElement("text:section");
-		pSectionOpenElement->addAttribute("text:style-name", pSectionStyle->getName());
-		pSectionOpenElement->addAttribute("text:name", pSectionStyle->getName());
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pSectionOpenElement));
-	}
-	else
-		mWriterDocumentState.mbInFakeSection = true;
-}
-
-void WordPerfectCollector::closeSection()
-{
-	if (!mWriterDocumentState.mbInFakeSection)
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:section")));
-	else
-		mWriterDocumentState.mbInFakeSection = false;
-
-	// open as many paragraphs as needed to simulate section space after
-	// WLACH_REFACTORING: disable this for now..
-	#if 0
-	for (float f=0.0f; f<mfSectionSpaceAfter; f+=1.0f) {
-		vector<WPXTabStop> dummyTabStops;
-		openParagraph(WPX_PARAGRAPH_JUSTIFICATION_LEFT, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, dummyTabStops, false, false);
-		closeParagraph();
-	}
-	#endif
-	mfSectionSpaceAfter = 0.0f;
-}
-
-void WordPerfectCollector::openParagraph(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops)
-{
-	// FIXMENOW: What happens if we open a footnote inside a table? do we then inherit the footnote's style
-	// from "Table Contents"
-	
-	WPXPropertyList *pPersistPropList = new WPXPropertyList(propList);
-	ParagraphStyle *pStyle = NULL;
-
-	if (mWriterDocumentState.mbFirstElement && mpCurrentContentElements == &mBodyElements)
-	{
-		// we don't have to go through the fuss of determining if the paragraph style is 
-		// unique in this case, because if we are the first document element, then we
-		// are singular. Neither do we have to determine what our parent style is-- we can't
-		// be inside a table in this case (the table would be the first document element 
-		//in that case)
-		pPersistPropList->insert("style:parent-style-name", "Standard");
-		WPXString sName;
-		sName.sprintf("FS");
-
-		WPXString sParagraphHashKey("P|FS");
-		pPersistPropList->insert("style:master-page-name", "Page Style 1");
-                pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
-		mTextStyleHash[sParagraphHashKey] = pStyle;
-		mWriterDocumentState.mbFirstElement = false;
- 	}
-	else
-	{
-		if (mWriterDocumentState.mbTableCellOpened)
-		{
-			if (mWriterDocumentState.mbHeaderRow)
-				pPersistPropList->insert("style:parent-style-name", "Table Heading");
-			else
-				pPersistPropList->insert("style:parent-style-name", "Table Contents");
-		}
-		else
-			pPersistPropList->insert("style:parent-style-name", "Standard");
-
-                WPXString sKey = getParagraphStyleKey(*pPersistPropList, tabStops);
-
-		if (mTextStyleHash.find(sKey) == mTextStyleHash.end()) {
-			WPXString sName;
-			sName.sprintf("S%i", mTextStyleHash.size()); 
-			
-			pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
-	
-			mTextStyleHash[sKey] = pStyle;
-		}
-		else
-		{
-			pStyle = mTextStyleHash[sKey];
-			delete pPersistPropList;
-		}
-	}
-	// create a document element corresponding to the paragraph, and append it to our list of document elements
-	TagOpenElement *pParagraphOpenElement = new TagOpenElement("text:p");
-	pParagraphOpenElement->addAttribute("text:style-name", pStyle->getName());
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pParagraphOpenElement));
-}
-
-void WordPerfectCollector::closeParagraph()
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:p")));
-}
-
-void WordPerfectCollector::openSpan(const WPXPropertyList &propList)
-{
-        if (propList["style:font-name"])
-                _allocateFontName(propList["style:font-name"]->getStr());
-	WPXString sSpanHashKey = propListToStyleKey(propList);
-	WRITER_DEBUG_MSG(("WriterWordPerfect: Span Hash Key: %s\n", sSpanHashKey.cstr()));
-
-	// Get the style
-        WPXString sName;
-	if (mSpanStyleHash.find(sSpanHashKey) == mSpanStyleHash.end())
-        {
-		// allocate a new paragraph style
-		sName.sprintf("Span%i", mSpanStyleHash.size());
-		SpanStyle *pStyle = new SpanStyle(sName.cstr(), propList);                
-
-		mSpanStyleHash[sSpanHashKey] = pStyle;
-	}
-	else 
-        {
-		sName.sprintf("%s", mSpanStyleHash.find(sSpanHashKey)->second->getName().cstr());
-	}
-
-	// create a document element corresponding to the paragraph, and append it to our list of document elements
-	TagOpenElement *pSpanOpenElement = new TagOpenElement("text:span");
-	pSpanOpenElement->addAttribute("text:style-name", sName.cstr());
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pSpanOpenElement));
-}
-
-void WordPerfectCollector::closeSpan()
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:span")));
-}
-
-void WordPerfectCollector::defineOrderedListLevel(const WPXPropertyList &propList)
-{
-        int id = 0;
-        if (propList["libwpd:id"])
-                id = propList["libwpd:id"]->getInt();
-
- 	OrderedListStyle *pOrderedListStyle = NULL;
-	if (mpCurrentListStyle && mpCurrentListStyle->getListID() == id)
-		pOrderedListStyle = static_cast<OrderedListStyle *>(mpCurrentListStyle); // FIXME: using a dynamic cast here causes oo to crash?!
-
-	// this rather appalling conditional makes sure we only start a new list (rather than continue an old
-	// one) if: (1) we have no prior list OR (2) the prior list is actually definitively different
-	// from the list that is just being defined (listIDs differ) OR (3) we can tell that the user actually
-	// is starting a new list at level 1 (and only level 1)
-	if (pOrderedListStyle == NULL || pOrderedListStyle->getListID() != id  ||
-	    (propList["libwpd:level"] && propList["libwpd:level"]->getInt()==1 && 
-             (propList["text:start-value"] && propList["text:start-value"]->getInt() != (miLastListNumber+1))))
-	{
-		WRITER_DEBUG_MSG(("Attempting to create a new ordered list style (listid: %i)\n", id));
-		WPXString sName;
-		sName.sprintf("OL%i", miNumListStyles);
-		miNumListStyles++;
-		pOrderedListStyle = new OrderedListStyle(sName.cstr(), propList["libwpd:id"]->getInt());
-		mListStyles.push_back(static_cast<ListStyle *>(pOrderedListStyle));
-		mpCurrentListStyle = static_cast<ListStyle *>(pOrderedListStyle);
-		mbListContinueNumbering = false;
-		miLastListNumber = 0;
-	}
-	else
-		mbListContinueNumbering = true;
-
-	// Iterate through ALL list styles with the same WordPerfect list id and define a level if it is not already defined
-	// This solves certain problems with lists that start and finish without reaching certain levels and then begin again
-	// and reach those levels. See gradguide0405_PC.wpd in the regression suite
-	for (std::vector<ListStyle *>::iterator iterOrderedListStyles = mListStyles.begin(); iterOrderedListStyles != mListStyles.end(); iterOrderedListStyles++)
-	{
-		if ((* iterOrderedListStyles)->getListID() == propList["libwpd:id"]->getInt())
-			(* iterOrderedListStyles)->updateListLevel((propList["libwpd:level"]->getInt() - 1), propList);
-	}
-}
-
-void WordPerfectCollector::defineUnorderedListLevel(const WPXPropertyList &propList)
-{
-        int id = 0;
-        if (propList["libwpd:id"])
-                id = propList["libwpd:id"]->getInt();
-
- 	UnorderedListStyle *pUnorderedListStyle = NULL;
-	if (mpCurrentListStyle && mpCurrentListStyle->getListID() == id)
-		pUnorderedListStyle = static_cast<UnorderedListStyle *>(mpCurrentListStyle); // FIXME: using a dynamic cast here causes oo to crash?!
-
-	if (pUnorderedListStyle == NULL) {
-		WRITER_DEBUG_MSG(("Attempting to create a new unordered list style (listid: %i)\n", id));
-		WPXString sName;
-		sName.sprintf("UL%i", miNumListStyles);
-		pUnorderedListStyle = new UnorderedListStyle(sName.cstr(), id);
-		mListStyles.push_back(static_cast<ListStyle *>(pUnorderedListStyle));
-		mpCurrentListStyle = static_cast<ListStyle *>(pUnorderedListStyle);
-	}
-
-	// See comment in WordPerfectCollector::defineOrderedListLevel
-	for (std::vector<ListStyle *>::iterator iterUnorderedListStyles = mListStyles.begin(); iterUnorderedListStyles != mListStyles.end(); iterUnorderedListStyles++)
-	{
-		if ((* iterUnorderedListStyles)->getListID() == propList["libwpd:id"]->getInt())
-			(* iterUnorderedListStyles)->updateListLevel((propList["libwpd:level"]->getInt() - 1), propList);
-	}
-}
-
-void WordPerfectCollector::openOrderedListLevel(const WPXPropertyList &propList)
-{
-	miCurrentListLevel++;
-	TagOpenElement *pListLevelOpenElement = new TagOpenElement("text:ordered-list");
-	_openListLevel(pListLevelOpenElement);
-
-	if (mbListContinueNumbering) {
-		pListLevelOpenElement->addAttribute("text:continue-numbering", "true");
-	}
-
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pListLevelOpenElement));
-}
-
-void WordPerfectCollector::openUnorderedListLevel(const WPXPropertyList &propList)
-{
-	miCurrentListLevel++;
-	TagOpenElement *pListLevelOpenElement = new TagOpenElement("text:unordered-list");
-	_openListLevel(pListLevelOpenElement);
-
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pListLevelOpenElement));
-}
-
-void WordPerfectCollector::_openListLevel(TagOpenElement *pListLevelOpenElement)
-{
-  	if (!mbListElementOpened && miCurrentListLevel > 1)
-  	{
-  		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:list-item")));
-  	}
-	else if (mbListElementParagraphOpened)
-	{
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:p")));
-		mbListElementParagraphOpened = false;
-	}
-
-	if (miCurrentListLevel==1) {
-		pListLevelOpenElement->addAttribute("text:style-name", mpCurrentListStyle->getName());
-	}
-
-	mbListElementOpened = false;
-}
-
-void WordPerfectCollector::closeOrderedListLevel()
-{
-	_closeListLevel("ordered-list");
-}
-
-void WordPerfectCollector::closeUnorderedListLevel()
-{
-	_closeListLevel("unordered-list");
-}
-
-void WordPerfectCollector::_closeListLevel(const char *szListType)
-{
-	if (mbListElementOpened)
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:list-item")));
-
-	miCurrentListLevel--;
-
-	WPXString sCloseElement;
-	sCloseElement.sprintf("text:%s", szListType);
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement(sCloseElement.cstr())));
-
-	if (miCurrentListLevel > 0)
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:list-item")));
-	mbListElementOpened = false;
-}
-
-void WordPerfectCollector::openListElement(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops)
-{
-	miLastListLevel = miCurrentListLevel;
-	if (miCurrentListLevel == 1)
-		miLastListNumber++;
-
-	if (mbListElementOpened)
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:list-item")));
-
-	ParagraphStyle *pStyle = NULL;
-
-	WPXPropertyList *pPersistPropList = new WPXPropertyList(propList);
-	pPersistPropList->insert("style:list-style-name", mpCurrentListStyle->getName());
-	pPersistPropList->insert("style:parent-style-name", "Standard");
-
-        WPXString sKey = getParagraphStyleKey(*pPersistPropList, tabStops);
-
-        if (mTextStyleHash.find(sKey) == mTextStyleHash.end()) 
-        {
-                WPXString sName;
-                sName.sprintf("S%i", mTextStyleHash.size()); 
-		
-                pStyle = new ParagraphStyle(pPersistPropList, tabStops, sName);
-                
-                mTextStyleHash[sKey] = pStyle;
-        }
-        else
-        {
-                pStyle = mTextStyleHash[sKey];
-                delete pPersistPropList;
-        }
-
-	TagOpenElement *pOpenListElement = new TagOpenElement("text:list-item");
-	TagOpenElement *pOpenListElementParagraph = new TagOpenElement("text:p");
-
-	pOpenListElementParagraph->addAttribute("text:style-name", pStyle->getName());
-
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pOpenListElement));
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pOpenListElementParagraph));
-		
-	mbListElementOpened = true;
-	mbListElementParagraphOpened = true;
-	mbListContinueNumbering = false;
-}
-
-void WordPerfectCollector::closeListElement()
-{
-	// this code is kind of tricky, because we don't actually close the list element (because this list element
-	// could contain another list level in OOo's implementation of lists). that is done in the closeListLevel
-	// code (or when we open another list element)
-
-	if (mbListElementParagraphOpened)
-	{
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:p")));
-		mbListElementParagraphOpened = false;
-	}
-}
-
-void WordPerfectCollector::openFootnote(const WPXPropertyList &propList)
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:footnote")));
-
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:footnote-citation")));
-        if (propList["libwpd:number"])
-                mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new CharDataElement(propList["libwpd:number"]->getStr().cstr())));
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote-citation")));
-
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:footnote-body")));
-	
-	mWriterDocumentState.mbInNote = true;
-}
-
-void WordPerfectCollector::closeFootnote()
-{
-	mWriterDocumentState.mbInNote = false;
-
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote-body")));
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:footnote")));
-}
-
-void WordPerfectCollector::openEndnote(const WPXPropertyList &propList)
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:endnote")));
-
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:endnote-citation")));
-        if (propList["libwpd:number"])
-                mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new CharDataElement(propList["libwpd:number"]->getStr().cstr())));
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote-citation")));
-
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:endnote-body")));
-
-}
-void WordPerfectCollector::closeEndnote()
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote-body")));
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:endnote")));
-}
-
-void WordPerfectCollector::openTable(const WPXPropertyList &propList, const WPXPropertyListVector &columns)
-{
-	WPXString sTableName;
-	sTableName.sprintf("Table%i", mTableStyles.size());
-
-	// FIXME: we base the table style off of the page's margin left, ignoring (potential) wordperfect margin
-	// state which is transmitted inside the page. could this lead to unacceptable behaviour?
-        // WLACH_REFACTORING: characterize this behaviour, probably should nip it at the bud within libwpd
-	TableStyle *pTableStyle = new TableStyle(propList, columns, sTableName.cstr());
-
-	if (mWriterDocumentState.mbFirstElement && mpCurrentContentElements == &mBodyElements)
-	{
-		WPXString sMasterPageName("Page Style 1");
-		pTableStyle->setMasterPageName(sMasterPageName);
-		mWriterDocumentState.mbFirstElement = false;
-	}
-
-	mTableStyles.push_back(pTableStyle);
-
-	mpCurrentTableStyle = pTableStyle;
-
-	TagOpenElement *pTableOpenElement = new TagOpenElement("table:table");
-
-	pTableOpenElement->addAttribute("table:name", sTableName.cstr());
-	pTableOpenElement->addAttribute("table:style-name", sTableName.cstr());
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableOpenElement));
-
-	for (int i=0; i<pTableStyle->getNumColumns(); i++) 
-        {
-		TagOpenElement *pTableColumnOpenElement = new TagOpenElement("table:table-column");
-		WPXString sColumnStyleName;
-		sColumnStyleName.sprintf("%s.Column%i", sTableName.cstr(), (i+1));
-		pTableColumnOpenElement->addAttribute("table:style-name", sColumnStyleName.cstr());
-		mpCurrentContentElements->push_back(pTableColumnOpenElement);
-
-		TagCloseElement *pTableColumnCloseElement = new TagCloseElement("table:table-column");
-		mpCurrentContentElements->push_back(pTableColumnCloseElement);
-	}
-}
-
-void WordPerfectCollector::openTableRow(const WPXPropertyList &propList)
-{
-	if (propList["libwpd:is-header-row"] && (propList["libwpd:is-header-row"]->getInt()))
-	{
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("table:table-header-rows")));
-		mWriterDocumentState.mbHeaderRow = true;
-	}
-
-	WPXString sTableRowStyleName;
-	sTableRowStyleName.sprintf("%s.Row%i", mpCurrentTableStyle->getName().cstr(), mpCurrentTableStyle->getNumTableRowStyles());
-	TableRowStyle *pTableRowStyle = new TableRowStyle(propList, sTableRowStyleName.cstr());
-	mpCurrentTableStyle->addTableRowStyle(pTableRowStyle);
-	
-	TagOpenElement *pTableRowOpenElement = new TagOpenElement("table:table-row");
-	pTableRowOpenElement->addAttribute("table:style-name", sTableRowStyleName);
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableRowOpenElement));
-}
-
-void WordPerfectCollector::closeTableRow()
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table-row")));
-	if (mWriterDocumentState.mbHeaderRow)
-	{
-		mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table-header-rows")));
-		mWriterDocumentState.mbHeaderRow = false;
-	}
-}
-
-void WordPerfectCollector::openTableCell(const WPXPropertyList &propList)
-{
-	WPXString sTableCellStyleName;
-	sTableCellStyleName.sprintf( "%s.Cell%i", mpCurrentTableStyle->getName().cstr(), mpCurrentTableStyle->getNumTableCellStyles());
-	TableCellStyle *pTableCellStyle = new TableCellStyle(propList, sTableCellStyleName.cstr());
-	mpCurrentTableStyle->addTableCellStyle(pTableCellStyle);
-
-	TagOpenElement *pTableCellOpenElement = new TagOpenElement("table:table-cell");
-	pTableCellOpenElement->addAttribute("table:style-name", sTableCellStyleName);
-	if (propList["table:number-columns-spanned"])
-                pTableCellOpenElement->addAttribute("table:number-columns-spanned", 
-                                                    propList["table:number-columns-spanned"]->getStr().cstr());
-        if (propList["table:number-rows-spanned"])
-                pTableCellOpenElement->addAttribute("table:number-rows-spanned",
-                                                    propList["table:number-rows-spanned"]->getStr().cstr());
-	pTableCellOpenElement->addAttribute("table:value-type", "string");
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(pTableCellOpenElement));
-
-	mWriterDocumentState.mbTableCellOpened = true;
-}
-
-void WordPerfectCollector::closeTableCell()
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table-cell")));
-	mWriterDocumentState.mbTableCellOpened = false;
-}
-
-void WordPerfectCollector::insertCoveredTableCell(const WPXPropertyList &propList)
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("table:covered-table-cell")));
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:covered-table-cell")));
-}
-
-void WordPerfectCollector::closeTable()
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("table:table")));
-}
-
-void WordPerfectCollector::insertTab()
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:tab-stop")));
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:tab-stop")));
-}
-
-void WordPerfectCollector::insertLineBreak()
-{
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagOpenElement("text:line-break")));
-	mpCurrentContentElements->push_back(static_cast<DocumentElement *>(new TagCloseElement("text:line-break")));
-}
-
-void WordPerfectCollector::insertText(const WPXString &text)
-{
-	DocumentElement *pText = new TextElement(text);
-	mpCurrentContentElements->push_back(pText);
-}
--- writerperfect/source/filter/WordPerfectCollector.hxx	1 Nov 2005 10:09:14 -0000	1.4
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,194 +0,0 @@
-/* WordPerfectCollector: Collects sections and runs of text from a
- * wordperfect file (and styles to go along with them) and writes them
- * to a target file
- *
- * Copyright (C) 2002-2004 William Lachance (william.lachance@sympatico.ca)
- * Copyright (C) 2003-2004 Net Integration Technologies (http://www.net-itech.com)
- * Copyright (C) 2004 Fridrich Strba (fridrich.strba@bluewin.ch)
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Library General Public License for more details.
- *
- * You should have received a copy of the GNU Library General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
- *
- * For further information visit http://libwpd.sourceforge.net
- *
- */
-
-/* "This product is not manufactured, approved, or supported by
- * Corel Corporation or Corel Corporation Limited."
- */
-
-#ifndef _WORDPERFECTCOLLECTOR_H
-#define _WORDPERFECTCOLLECTOR_H
-#include "SectionStyle.hxx"
-
-#include <libwpd/libwpd.h>
-#include <vector>
-#include <map>
-#include <stack>
-
-class DocumentElement;
-class DocumentHandler;
-class TagOpenElement;
-class FontStyle;
-class ListStyle;
-
-class ParagraphStyle;
-class SpanStyle;
-class TableStyle;
-class PageSpan;
-
-// the state we use for writing the final document
-typedef struct _WriterDocumentState WriterDocumentState;
-struct _WriterDocumentState
-{
-	_WriterDocumentState();
-		
-	bool mbFirstElement;
-	bool mbInFakeSection;
-	bool mbListElementOpenedAtCurrentLevel;
-	bool mbTableCellOpened;
-	bool mbHeaderRow;
-	bool mbInNote;
-};
-
-enum WriterListType { unordered, ordered };
-
-struct ltstr
-{
-  bool operator()(const WPXString & s1, const WPXString & s2) const
-  {
-    return strcmp(s1.cstr(), s2.cstr()) < 0;
-  }
-};
-
-class WordPerfectCollector : public WPXHLListenerImpl
-{
-public:
-	WordPerfectCollector(WPXInputStream *pInput, DocumentHandler *pHandler);
-	virtual ~WordPerfectCollector();
-	bool filter();
-
- 	virtual void setDocumentMetaData(const WPXPropertyList &propList) {}
-	virtual void startDocument() {}
-	virtual void endDocument() {}
-
-	virtual void openPageSpan(const WPXPropertyList &propList);
-	virtual void closePageSpan() {}
-
-	virtual void openSection(const WPXPropertyList &propList, const WPXPropertyListVector &columns);
-	virtual void closeSection();
-
-	virtual void openHeader(const WPXPropertyList &propList);
-	virtual void closeHeader();
-	virtual void openFooter(const WPXPropertyList &propList);
-	virtual void closeFooter();
-
-	virtual void openParagraph(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops);
-	virtual void closeParagraph();
-	
-	virtual void openSpan(const WPXPropertyList &propList);
-	virtual void closeSpan();
-
-
-	virtual void insertTab();
-	virtual void insertText(const WPXString &text);
- 	virtual void insertLineBreak();
-
-	virtual void defineOrderedListLevel(const WPXPropertyList &propList);
-	virtual void defineUnorderedListLevel(const WPXPropertyList &propList);	
-	virtual void openOrderedListLevel(const WPXPropertyList &propList);
-	virtual void openUnorderedListLevel(const WPXPropertyList &propList);
-	virtual void closeOrderedListLevel();
-	virtual void closeUnorderedListLevel();
-	virtual void openListElement(const WPXPropertyList &propList, const WPXPropertyListVector &tabStops);
-	virtual void closeListElement();       
-
-	virtual void openFootnote(const WPXPropertyList &propList);
-	virtual void closeFootnote();
-	virtual void openEndnote(const WPXPropertyList &propList);
-	virtual void closeEndnote();
-
- 	virtual void openTable(const WPXPropertyList &propList, const WPXPropertyListVector &columns);
- 	virtual void openTableRow(const WPXPropertyList &propList);
-	virtual void closeTableRow();
- 	virtual void openTableCell(const WPXPropertyList &propList);
-	virtual void closeTableCell();
-	virtual void insertCoveredTableCell(const WPXPropertyList &propList);
- 	virtual void closeTable();
-
-protected:
-	void _resetDocumentState();
-	bool _parseSourceDocument(WPXInputStream &input);
-	bool _writeTargetDocument(DocumentHandler &xHandler);
-	void _writeBegin();
-	void _writeDefaultStyles(DocumentHandler &xHandler);
-	void _writeMasterPages(DocumentHandler &xHandler);
-	void _writePageMasters(DocumentHandler &xHandler);
-	void _allocateFontName(const WPXString &);
-
-private:
-	void _openListLevel(TagOpenElement *pListLevelOpenElement);
-	void _closeListLevel(const char *szListType);
-
-        WPXInputStream *mpInput;
-        DocumentHandler *mpHandler;
-	bool mbUsed; // whether or not it has been before (you can only use me once!)
-
-	WriterDocumentState mWriterDocumentState;
-
-	// paragraph styles
-	std::map<WPXString, ParagraphStyle *, ltstr> mTextStyleHash;
-
-        // span styles
-        std::map<WPXString, SpanStyle *, ltstr> mSpanStyleHash;
-
-	// font styles
-	std::map<WPXString, FontStyle *, ltstr> mFontHash;
-
-	// section styles
-	std::vector<SectionStyle *> mSectionStyles;
-	float mfSectionSpaceAfter;
-
-	// table styles
-	std::vector<TableStyle *> mTableStyles;
-
-	// list styles
-	unsigned int miNumListStyles;
-
-	// style elements
-	std::vector<DocumentElement *> mStylesElements;
-	// content elements
-	std::vector<DocumentElement *> mBodyElements;
-	// the current set of elements that we're writing to
-	std::vector<DocumentElement *> * mpCurrentContentElements;
-
-	// page state
-	std::vector<PageSpan *> mPageSpans;
-	PageSpan *mpCurrentPageSpan;
-	int miNumPageStyles;
-
-	// list styles / state
-	ListStyle *mpCurrentListStyle;
-	unsigned int miCurrentListLevel;
-	unsigned int miLastListLevel;
-	unsigned int miLastListNumber;
-	std::vector<ListStyle *> mListStyles;
-	bool mbListContinueNumbering;
-	bool mbListElementOpened;
-	bool mbListElementParagraphOpened;
-
-	// table state
-	TableStyle *mpCurrentTableStyle;
-};
-#endif
--- writerperfect/source/filter/WordPerfectImportFilter.cxx	11 Apr 2005 12:53:39 -0000	1.6
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,305 +0,0 @@
-/* WordPerfectImportFilter: Sets up the filter, and calls WordPerfectCollector
- * to do the actual filtering
- *
- * Copyright (C) 2000 by Sun Microsystems, Inc.
- * Copyright (C) 2002-2004 William Lachance (wlach@interlog.com)
- * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
- * Copyright (C) 2004 Fridrich Strba <fridrich.strba@bluewin.ch>
- * 
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- * 
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
- * 02111-1307, USA.
- *
- *  Contributor(s): Martin Gallwey (gallwey@sun.com)
- *
- */
-/* "This product is not manufactured, approved, or supported by 
- * Corel Corporation or Corel Corporation Limited."
- */
-
-#ifndef _OSL_DIAGNOSE_H_
-#include <osl/diagnose.h>
-#endif
-#ifndef _RTL_TENCINFO_H_
-#include <rtl/tencinfo.h>
-#endif
-#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_
-#include <com/sun/star/lang/XMultiServiceFactory.hpp>
-#endif
-#ifndef _COM_SUN_STAR_IO_XINPUTSTREAM_HPP_
-#include <com/sun/star/io/XInputStream.hpp>
-#endif
-#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
-#include <com/sun/star/xml/sax/XAttributeList.hpp>
-#endif
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-#ifndef _COM_SUN_STAR_XML_SAX_INPUTSOURCE_HPP_
-#include <com/sun/star/xml/sax/InputSource.hpp>
-#endif
-#ifndef _COM_SUN_STAR_XML_SAX_XPARSER_HPP_
-#include <com/sun/star/xml/sax/XParser.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_UCB_XCOMMANDENVIRONMENT_HPP
-#include <com/sun/star/ucb/XCommandEnvironment.hpp>
-#endif
-
-#ifndef _ATTRLIST_HPP_
-#include <xmloff/attrlist.hxx>
-#endif
-#ifndef _XMLKYWD_HPP
-#include <xmloff/xmlkywd.hxx>
-#endif
-
-#ifndef _UCBHELPER_CONTENT_HXX
-#include <ucbhelper/content.hxx>
-#endif
-
-#include <libwpd/WPDocument.h>
-#include "FilterInternal.hxx"
-#include "OODocumentHandler.hxx"
-#include "WordPerfectCollector.hxx"
-#include "WordPerfectImportFilter.hxx"
-#include "stream/WPXSvStream.h"
-
-using namespace ::rtl;
-using rtl::OString;
-using rtl::OUString;
-using com::sun::star::uno::Sequence;
-using com::sun::star::uno::Reference;
-using com::sun::star::uno::Any;
-using com::sun::star::uno::UNO_QUERY;
-using com::sun::star::uno::XInterface;
-using com::sun::star::uno::Exception;
-using com::sun::star::uno::RuntimeException;
-using com::sun::star::lang::XMultiServiceFactory;
-using com::sun::star::beans::PropertyValue;
-using com::sun::star::document::XFilter;
-using com::sun::star::document::XExtendedFilterDetection;
-using com::sun::star::ucb::XCommandEnvironment;
-
-using com::sun::star::io::XInputStream;
-using com::sun::star::document::XImporter;
-using com::sun::star::xml::sax::InputSource;
-using com::sun::star::xml::sax::XAttributeList;
-using com::sun::star::xml::sax::XDocumentHandler;
-using com::sun::star::xml::sax::XParser;
-
-void callHandler(Reference < XDocumentHandler > xDocHandler);
-
-sal_Bool SAL_CALL WordPerfectImportFilter::importImpl( const Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor )
-	throw (RuntimeException)
-{
-	WRITER_DEBUG_MSG(("WordPerfectImportFilter::importImpl: Got here!\n"));
-	
-	sal_Int32 nLength = aDescriptor.getLength();
-	const PropertyValue * pValue = aDescriptor.getConstArray();
-	OUString sURL;
-	Reference < XInputStream > xInputStream;
-	for ( sal_Int32 i = 0 ; i < nLength; i++)
-	{
-	    if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
-		pValue[i].Value >>= xInputStream;
-	    else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "URL" ) ) )
-		pValue[i].Value >>= sURL;
-	    rtl_TextEncoding encoding = RTL_TEXTENCODING_INFO_ASCII;
-	}
-	if ( !xInputStream.is() )
-	{
-	    OSL_ASSERT( 0 );
-	    return sal_False;
-	}
-	OString sFileName;
-	sFileName = OUStringToOString(sURL, RTL_TEXTENCODING_INFO_ASCII);
-	
-	// An XML import service: what we push sax messages to..
-	OUString sXMLImportService ( RTL_CONSTASCII_USTRINGPARAM ( "com.sun.star.comp.Writer.XMLImporter" ) );
-	Reference < XDocumentHandler > xInternalHandler( mxMSF->createInstance( sXMLImportService ), UNO_QUERY );
-
-	// The XImporter sets up an empty target document for XDocumentHandler to write to.. 
-	Reference < XImporter > xImporter(xInternalHandler, UNO_QUERY);
-	xImporter->setTargetDocument(mxDoc);
-
-        // OO Document Handler: abstract class to handle document SAX messages, concrete implementation here
-        // writes to in-memory target doc
-        OODocumentHandler xHandler(xInternalHandler);
-
-	WPXSvInputStream input( xInputStream );
-
-	WordPerfectCollector collector(&input, &xHandler);
-	collector.filter();
-
-	return true; 
-}
-
-sal_Bool SAL_CALL WordPerfectImportFilter::filter( const Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
-	throw (RuntimeException)
-{
-	WRITER_DEBUG_MSG(("WordPerfectImportFilter::filter: Got here!\n"));
-	return importImpl ( aDescriptor );
-}
-void SAL_CALL WordPerfectImportFilter::cancel(  ) 
-	throw (RuntimeException)
-{
-	WRITER_DEBUG_MSG(("WordPerfectImportFilter::cancel: Got here!\n"));
-}
-
-// XImporter
-void SAL_CALL WordPerfectImportFilter::setTargetDocument( const Reference< ::com::sun::star::lang::XComponent >& xDoc )
-	throw (::com::sun::star::lang::IllegalArgumentException, RuntimeException)
-{
-	WRITER_DEBUG_MSG(("WordPerfectImportFilter::getTargetDocument: Got here!\n"));
-	meType = FILTER_IMPORT;
-	mxDoc = xDoc;
-}
-
-// XExtendedFilterDetection
-OUString SAL_CALL WordPerfectImportFilter::detect( com::sun::star::uno::Sequence< PropertyValue >& Descriptor )
-	throw( com::sun::star::uno::RuntimeException )
-{
-	WRITER_DEBUG_MSG(("WordPerfectImportFilter::detect: Got here!\n"));
-	
-	WPDConfidence confidence = WPD_CONFIDENCE_NONE;
-	OUString sTypeName = OUString( RTL_CONSTASCII_USTRINGPARAM ( "" ) );
-	sal_Int32 nLength = Descriptor.getLength();
-	sal_Int32 location = nLength;
-	OUString sURL;
-	const PropertyValue * pValue = Descriptor.getConstArray();
-	Reference < XInputStream > xInputStream;
-	for ( sal_Int32 i = 0 ; i < nLength; i++)
-	{
-		if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "TypeName" ) ) )
-			location=i;
-		else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
-			pValue[i].Value >>= xInputStream;
-		else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "URL" ) ) )
-			pValue[i].Value >>= sURL;
-
-	    rtl_TextEncoding encoding = RTL_TEXTENCODING_INFO_ASCII;
-	}
-
-        Reference< com::sun::star::ucb::XCommandEnvironment > xEnv;
-        if (!xInputStream.is())
-        {
-		try
-		{
-			::ucb::Content aContent(sURL, xEnv);
-	                xInputStream = aContent.openStream();
-		}
-		catch ( ... )
-		{
-			return ::rtl::OUString();
-		}
-		
-                if (!xInputStream.is())
-                    return ::rtl::OUString();
-        }
-		
-	WPXSvInputStream input( xInputStream );
-	
-	if (input.atEOS())
-        return ::rtl::OUString();
-
-	confidence = WPDocument::isFileFormatSupported(&input, false);
-
-	if (confidence == WPD_CONFIDENCE_EXCELLENT)
-		sTypeName = OUString( RTL_CONSTASCII_USTRINGPARAM ( "writer_WordPerfect_Document" ) );
-
-    if (sTypeName.getLength())
-	{
-		if ( location == Descriptor.getLength() )
-		{
-			Descriptor.realloc(nLength+1);
-			Descriptor[location].Name = ::rtl::OUString::createFromAscii( "TypeName" );
-		}
-
-       	Descriptor[location].Value <<=sTypeName;
-    }
-
-	return sTypeName;	
-}
-
-
-// XInitialization
-void SAL_CALL WordPerfectImportFilter::initialize( const Sequence< Any >& aArguments ) 
-	throw (Exception, RuntimeException)
-{
-	WRITER_DEBUG_MSG(("WordPerfectImportFilter::initialize: Got here!\n"));
-	Sequence < PropertyValue > aAnySeq;
-	sal_Int32 nLength = aArguments.getLength();
-	if ( nLength && ( aArguments[0] >>= aAnySeq ) )
-	{
-		const PropertyValue * pValue = aAnySeq.getConstArray();
-		nLength = aAnySeq.getLength();
-		for ( sal_Int32 i = 0 ; i < nLength; i++)
-		{
-			if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "Type" ) ) )
-			{
-				pValue[i].Value >>= msFilterName;
-				break;
-			}
-		}
-	}
-}
-OUString WordPerfectImportFilter_getImplementationName ()
-	throw (RuntimeException)
-{
-	return OUString ( RTL_CONSTASCII_USTRINGPARAM ( "com.sun.star.comp.Writer.WordPerfectImportFilter" ) );
-}
-
-#define SERVICE_NAME1 "com.sun.star.document.ImportFilter"
-#define SERVICE_NAME2 "com.sun.star.document.ExtendedTypeDetection"
-sal_Bool SAL_CALL WordPerfectImportFilter_supportsService( const OUString& ServiceName ) 
-	throw (RuntimeException)
-{
-	return (ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME1 ) ) ||
-		ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME2 ) ) );
-}
-Sequence< OUString > SAL_CALL WordPerfectImportFilter_getSupportedServiceNames(  ) 
-	throw (RuntimeException)
-{
-	Sequence < OUString > aRet(2);
-//	Sequence < OUString > aRet(1);
-        OUString* pArray = aRet.getArray();
-        pArray[0] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME1 ) );
-	pArray[1] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME2 ) ); 
-        return aRet;
-}
-#undef SERVICE_NAME2
-#undef SERVICE_NAME1
-
-Reference< XInterface > SAL_CALL WordPerfectImportFilter_createInstance( const Reference< XMultiServiceFactory > & rSMgr)
-	throw( Exception )
-{
-	return (cppu::OWeakObject*) new WordPerfectImportFilter( rSMgr );
-}
-
-// XServiceInfo
-OUString SAL_CALL WordPerfectImportFilter::getImplementationName(  ) 
-	throw (RuntimeException)
-{
-	return WordPerfectImportFilter_getImplementationName();
-}
-sal_Bool SAL_CALL WordPerfectImportFilter::supportsService( const OUString& rServiceName ) 
-	throw (RuntimeException)
-{
-    return WordPerfectImportFilter_supportsService( rServiceName );
-}
-Sequence< OUString > SAL_CALL WordPerfectImportFilter::getSupportedServiceNames(  ) 
-	throw (RuntimeException)
-{
-    return WordPerfectImportFilter_getSupportedServiceNames();
-}
--- writerperfect/source/filter/WordPerfectImportFilter.hxx	1 Mar 2005 17:08:49 -0000	1.2
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,129 +0,0 @@
-/* 
- * Copyright (C) 2000 by Sun Microsystems, Inc.
- * Copyright (C) 2002-2004 William Lachance (wlach@interlog.com)
- * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
- * Copyright (C) 2004 Fridrich Strba <fridrich.strba@bluewin.ch>
- * 
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- * 
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
- * 02111-1307, USA.
- *
- *  Contributor(s): Martin Gallwey (gallwey@sun.com)
- *
- */
-
-/* "This product is not manufactured, approved, or supported by 
- * Corel Corporation or Corel Corporation Limited."
- */
-#ifndef _WORDPERFECTIMPORTFILTER_HXX
-#define _WORDPERFECTIMPORTFILTER_HXX
-
-#ifndef _COM_SUN_STAR_DOCUMENT_XFILTER_HPP_
-#include <com/sun/star/document/XFilter.hpp>
-#endif
-#ifndef _COM_SUN_STAR_DOCUMENT_XIMPORTER_HPP_
-#include <com/sun/star/document/XImporter.hpp>
-#endif
-#ifndef _COM_SUN_STAR_DOCUMENT_XEXTENDEDFILTERDETECTION_HPP_
-#include <com/sun/star/document/XExtendedFilterDetection.hpp>
-#endif
-#ifndef _COM_SUN_STAR_LANG_XINITIALIZATION_HPP_
-#include <com/sun/star/lang/XInitialization.hpp>
-#endif
-#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_
-#include <com/sun/star/lang/XServiceInfo.hpp>
-#endif
-#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
-#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
-#endif
-#ifndef _CPPUHELPER_IMPLBASE5_HXX_
-#include <cppuhelper/implbase5.hxx>
-#endif
-
-enum FilterType 
-{
-	FILTER_IMPORT,
-	FILTER_EXPORT
-};
-/* This component will be instantiated for both import or export. Whether it calls
- * setSourceDocument or setTargetDocument determines which Impl function the filter
- * member calls */
-class WordPerfectImportFilter : public cppu::WeakImplHelper5 
-< 
-	com::sun::star::document::XFilter,
-	com::sun::star::document::XImporter,
-	com::sun::star::document::XExtendedFilterDetection,
-	com::sun::star::lang::XInitialization,
-	com::sun::star::lang::XServiceInfo
->
-{
-protected:
-	// oo.org declares
-	::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > mxMSF;
-	::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent > mxDoc;
-	::rtl::OUString msFilterName;
-	::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler > mxHandler;
-
-	FilterType meType;
-
-	sal_Bool SAL_CALL importImpl( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
-		throw (::com::sun::star::uno::RuntimeException);
-
-public:
-	WordPerfectImportFilter( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > &rxMSF)
-        : mxMSF( rxMSF ) {}
-	virtual ~WordPerfectImportFilter() {}
-
-	// XFilter
-        virtual sal_Bool SAL_CALL filter( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
-		throw (::com::sun::star::uno::RuntimeException);
-        virtual void SAL_CALL cancel(  ) 
-		throw (::com::sun::star::uno::RuntimeException);
-
-	// XImporter
-        virtual void SAL_CALL setTargetDocument( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent >& xDoc ) 
-		throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
-
- 	//XExtendedFilterDetection
-	virtual ::rtl::OUString SAL_CALL detect( com::sun::star::uno::Sequence< com::sun::star::beans::PropertyValue >& Descriptor ) 
-		throw( com::sun::star::uno::RuntimeException );
-
-	// XInitialization
-        virtual void SAL_CALL initialize( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aArguments ) 
-		throw (::com::sun::star::uno::Exception, ::com::sun::star::uno::RuntimeException);
-
-	// XServiceInfo
-        virtual ::rtl::OUString SAL_CALL getImplementationName(  ) 
-		throw (::com::sun::star::uno::RuntimeException);
-        virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) 
-		throw (::com::sun::star::uno::RuntimeException);
-        virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) 
-		throw (::com::sun::star::uno::RuntimeException);
-
-};
-
-::rtl::OUString WordPerfectImportFilter_getImplementationName()
-	throw ( ::com::sun::star::uno::RuntimeException );
-
-sal_Bool SAL_CALL WordPerfectImportFilter_supportsService( const ::rtl::OUString& ServiceName ) 
-	throw ( ::com::sun::star::uno::RuntimeException );
-
-::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL WordPerfectImportFilter_getSupportedServiceNames(  ) 
-	throw ( ::com::sun::star::uno::RuntimeException );
-
-::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >
-SAL_CALL WordPerfectImportFilter_createInstance( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > & rSMgr)
-	throw ( ::com::sun::star::uno::Exception );
-
-#endif
--- writerperfect/source/filter/genericfilter.cxx	7 Oct 2004 14:27:19 -0000	1.3
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,101 +0,0 @@
-/* genericfilter: mostly generic code for registering the filter
- *
- * Portions of this code Copyright 2000 by Sun Microsystems, Inc.
- * Rest is Copyright (C) 2002 William Lachance (wlach@interlog.com)
- * 
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- * 
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
- * 02111-1307, USA.
- */
-
-/* "This product is not manufactured, approved, or supported by 
- * Corel Corporation or Corel Corporation Limited."
- */
-#include <stdio.h>
-
-#include <osl/mutex.hxx>
-#include <osl/thread.h>
-#include <cppuhelper/factory.hxx>
-
-#ifndef _COM_SUN_STAR_LANG_XSINGLESERVICEFACTORY_HPP_
-#include <com/sun/star/lang/XSingleServiceFactory.hpp>
-#endif
-
-#include "WordPerfectImportFilter.hxx"
-
-using namespace ::rtl;
-using namespace ::cppu;
-using namespace ::com::sun::star::uno;
-using namespace ::com::sun::star::lang;
-using namespace ::com::sun::star::registry;
-
-extern "C"
-{
-//==================================================================================================
-void SAL_CALL component_getImplementationEnvironment(
-	const sal_Char ** ppEnvTypeName, uno_Environment ** ppEnv )
-{
-	*ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;
-}
-//==================================================================================================
-sal_Bool SAL_CALL component_writeInfo(
-	void * pServiceManager, void * pRegistryKey )
-{
-	if (pRegistryKey)
-	{
-		try
-		{
-            sal_Int32 nPos = 0;
-            Reference< XRegistryKey > xNewKey(
-				reinterpret_cast< XRegistryKey * >( pRegistryKey )->createKey( WordPerfectImportFilter_getImplementationName() ) ); 
-            xNewKey = xNewKey->createKey( OUString::createFromAscii( "/UNO/SERVICES" ) );
-			
-			const Sequence< OUString > & rSNL = WordPerfectImportFilter_getSupportedServiceNames();
-			const OUString * pArray = rSNL.getConstArray();
-			for ( nPos = rSNL.getLength(); nPos--; )
-				xNewKey->createKey( pArray[nPos] );
-
-			return sal_True;
-		}
-		catch (InvalidRegistryException &)
-		{
-			OSL_ENSURE( sal_False, "### InvalidRegistryException!" );
-		}
-	}
-	return sal_False;
-}
-//==================================================================================================
-void * SAL_CALL component_getFactory(
-	const sal_Char * pImplName, void * pServiceManager, void * pRegistryKey )
-{
-	void * pRet = 0;
-
-    OUString implName = OUString::createFromAscii( pImplName );
-	if ( pServiceManager && implName.equals(WordPerfectImportFilter_getImplementationName()) )
-	{
-		Reference< XSingleServiceFactory > xFactory( createSingleFactory(
-			reinterpret_cast< XMultiServiceFactory * >( pServiceManager ),
-			OUString::createFromAscii( pImplName ),
-			WordPerfectImportFilter_createInstance, WordPerfectImportFilter_getSupportedServiceNames() ) );
-		
-		if (xFactory.is())
-		{
-			xFactory->acquire();
-			pRet = xFactory.get();
-		}
-	}
-	
-	return pRet;
-}
-}
--- writerperfect/source/filter/makefile.mk	5 Dec 2006 10:36:41 -0000	1.3
+++ writerperfect/source/filter/makefile.mk	18 Dec 2006 09:27:18 -0000	1.3.4.1
@@ -17,13 +17,11 @@ SLOFILES= \
 	$(SLO)$/DocumentElement.obj		\
 	$(SLO)$/FontStyle.obj			\
 	$(SLO)$/ListStyle.obj			\
-	$(SLO)$/OODocumentHandler.obj		\
+	$(SLO)$/DocumentHandler.obj		\
 	$(SLO)$/PageSpan.obj			\
 	$(SLO)$/SectionStyle.obj		\
 	$(SLO)$/TableStyle.obj			\
 	$(SLO)$/TextRunStyle.obj 		\
-	$(SLO)$/WordPerfectCollector.obj 	\
-	$(SLO)$/WordPerfectImportFilter.obj 	\
-	$(SLO)$/genericfilter.obj		
+	$(SLO)$/DocumentCollector.obj
 
 .INCLUDE :  target.mk
--- writerperfect/source/stream/WPXSvStream.cxx	23 Mar 2005 14:01:16 -0000	1.5
+++ writerperfect/source/stream/WPXSvStream.cxx	4 Jan 2007 11:44:20 -0000	1.5.36.6
@@ -1,12 +1,9 @@
 #include "WPXSvStream.h"
+#include "filter/FilterInternal.hxx"
 #include <tools/stream.hxx>
 #include <unotools/streamwrap.hxx>
 #include <unotools/ucbstreamhelper.hxx>
 
-#ifndef _COM_SUN_STAR_IO_XINPUTSTREAM_H_
-#include <com/sun/star/io/XSeekable.hpp>
-#endif
-
 using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::io;
 
@@ -15,25 +12,24 @@ WPXSvInputStream::WPXSvInputStream( Refe
 		mxChildStorage(),
 		mxChildStream(),
 		mxStream(xStream),
-		mnOffset(0)
+		mxSeekable(xStream, UNO_QUERY),
+		maData(0)
 {
-	if (!xStream.is())
-	{
+	if (!xStream.is() || !mxStream.is())
 		mnLength = 0;
-	}
 	else
 	{
-		Reference < XSeekable> xSeekable = Reference < XSeekable > (xStream, UNO_QUERY);
-		if (!xSeekable.is())
+		if (!mxSeekable.is())
 			mnLength = 0;
 		else
 		{
 			try
 			{
-				mnLength = xSeekable->getLength(); // exception
+				mnLength = mxSeekable->getLength();
 			}
 			catch ( ... )
 			{
+				WRITER_DEBUG_MSG(("mnLength = mxSeekable->getLength() threw exception\n"));
 				mnLength = 0;
 			}
 		}
@@ -46,83 +42,123 @@ WPXSvInputStream::~WPXSvInputStream()
 
 const uint8_t * WPXSvInputStream::read(size_t numBytes, size_t &numBytesRead)
 {
-	// FIXME: assume no short reads (?)
-	sal_Int64 oldMnOffset = mnOffset;
-	mnOffset += mxStream->readBytes (maData, numBytes);
-	numBytesRead = mnOffset - oldMnOffset;
+	numBytesRead = 0;
+
+	if (numBytes == 0 || atEOS())
+		return 0;
+
+	numBytesRead = mxStream->readSomeBytes (maData, numBytes);
+	if (numBytesRead == 0)
+		return 0;
+
 	return (const uint8_t *)maData.getConstArray();
 }
 
+long WPXSvInputStream::tell()
+{
+	if ((mnLength == 0) || !mxStream.is() || !mxSeekable.is())
+		return -1L;
+	else
+		return (long)mxSeekable->getPosition();
+}
+
 int WPXSvInputStream::seek(long offset, WPX_SEEK_TYPE seekType) 
 {
-	if (seekType == WPX_SEEK_CUR && offset >= 0)
-	{
-			if (mnOffset + offset <= mnLength)
-			{
-				mxStream->skipBytes (offset); // exception ?
-				mnOffset += offset;
-				return FALSE;
-			}
-			else
-				return TRUE;
-	}
-	Reference < XSeekable> xSeekable = Reference < XSeekable >(mxStream, UNO_QUERY);
+	if ((mnLength == 0) || !mxStream.is() || !mxSeekable.is())
+		return -1;
 
-	if (!xSeekable.is())
-			return TRUE;
-	
+	sal_Int64 tmpPosition = mxSeekable->getPosition();
 	if (seekType == WPX_SEEK_CUR)
-			mnOffset += offset;
-	else
-			mnOffset = offset;
+		offset += tmpPosition;
 
-	if (mnOffset > mnLength)
-		return TRUE;
-
-	xSeekable->seek(mnOffset); // FIXME: catch exception!
-	
-	return FALSE;
-}
+	int retVal = 0;
+	if (offset < 0)
+	{	
+		offset = 0;
+		retVal = -1;
+	}
+	if (offset > mnLength)
+	{
+		offset = mnLength;
+		retVal = -1;
+	}
 
-long WPXSvInputStream::tell()
-{
-	return mnOffset;
+	try
+	{
+		mxSeekable->seek(offset);
+		return retVal;
+	}
+	catch (...)
+	{
+		WRITER_DEBUG_MSG(("mxSeekable->seek(offset) threw exception\n"));
+		return -1;
+	}
 }
 
 bool WPXSvInputStream::atEOS()
 {
-	return mnOffset >= mnLength;
+	if ((mnLength == 0) || !mxStream.is() || !mxSeekable.is())
+		return true;
+	return (mxSeekable->getPosition() >= mnLength);
 }
 
 bool WPXSvInputStream::isOLEStream()
 {
-	bool bAns;
+	if ((mnLength == 0) || !mxStream.is() || !mxSeekable.is())
+		return false;
+
+	sal_Int64 tmpPosition = mxSeekable->getPosition();
+	mxSeekable->seek(0);
 
 	SvStream *pStream = utl::UcbStreamHelper::CreateStream( mxStream );
-	bAns = pStream && SotStorage::IsOLEStorage( pStream );
-	delete pStream;
+	bool bAns = pStream && SotStorage::IsOLEStorage( pStream );
+	if (pStream)
+		delete pStream;
 
-	seek (0, WPX_SEEK_SET);
+	mxSeekable->seek(tmpPosition);
 
 	return bAns;
 }
 
-WPXInputStream * WPXSvInputStream::getDocumentOLEStream()
+WPXInputStream * WPXSvInputStream::getDocumentOLEStream(const char * name)
 {
+	if ((mnLength == 0) || !mxStream.is() || !mxSeekable.is())
+		return 0;
+
+	sal_Int64 tmpPosition = mxSeekable->getPosition();
+	mxSeekable->seek(0);
+
 	SvStream *pStream = utl::UcbStreamHelper::CreateStream( mxStream );
 
+	if (!pStream || !SotStorage::IsOLEStorage( pStream ))
+	{
+		mxSeekable->seek(tmpPosition);
+		return 0;
+	}
+
 	mxChildStorage = new SotStorage( pStream, TRUE );
 
 	mxChildStream = mxChildStorage->OpenSotStream(
-			rtl::OUString::createFromAscii( "PerfectOffice_MAIN" ),
+			rtl::OUString::createFromAscii( name ),
 			STREAM_STD_READ );
 
+	mxSeekable->seek(tmpPosition);
+
 	if ( !mxChildStream.Is() || mxChildStream->GetError() )
-		return NULL;
+	{
+		mxSeekable->seek(tmpPosition);
+		return 0;
+	}
 
-	Reference < XInputStream > xContents = new utl::OSeekableInputStreamWrapper( mxChildStream );
+	Reference < XInputStream > xContents(new utl::OSeekableInputStreamWrapper( mxChildStream ));
+	mxSeekable->seek(tmpPosition);
 	if (xContents.is())
 		return new WPXSvInputStream( xContents );
 	else
-		return NULL;
+		return 0;
+}
+
+WPXInputStream * WPXSvInputStream::getDocumentOLEStream()
+{
+	return getDocumentOLEStream( "PerfectOffice_MAIN" );
 }
--- writerperfect/source/stream/WPXSvStream.h	1 Mar 2005 17:09:31 -0000	1.3
+++ writerperfect/source/stream/WPXSvStream.h	3 Jan 2007 15:51:59 -0000	1.3.38.3
@@ -4,6 +4,11 @@
 #include <sot/storage.hxx>
 #include <com/sun/star/io/XInputStream.hpp>
 
+#ifndef _COM_SUN_STAR_IO_XINPUTSTREAM_H_
+#include <com/sun/star/io/XSeekable.hpp>
+#endif
+ 
+
 #include <libwpd/WPXStream.h>
 
 class WPXSvInputStream : public WPXInputStream
@@ -15,6 +20,7 @@ public:
 
 	virtual bool isOLEStream();
 	virtual WPXInputStream * getDocumentOLEStream();
+	virtual WPXInputStream * getDocumentOLEStream(const char *name);
 
 	virtual const uint8_t *read(size_t numBytes, size_t &numBytesRead);
 	virtual int seek(long offset, WPX_SEEK_TYPE seekType);
@@ -25,9 +31,10 @@ private:
 	SotStorageRef       mxChildStorage;
 	SotStorageStreamRef mxChildStream;
 	::com::sun::star::uno::Reference<
-			  ::com::sun::star::io::XInputStream > mxStream;
+			::com::sun::star::io::XInputStream > mxStream;
+	::com::sun::star::uno::Reference<
+			::com::sun::star::io::XSeekable > mxSeekable;
 	::com::sun::star::uno::Sequence< sal_Int8 > maData;
-	sal_Int64 mnOffset;
 	sal_Int64 mnLength;
 };
 
--- writerperfect/source/stream/makefile.mk	20 Jun 2006 00:19:14 -0000	1.3
+++ writerperfect/source/stream/makefile.mk	22 Dec 2006 16:18:36 -0000	1.3.10.1
@@ -7,11 +7,13 @@ ENABLE_EXCEPTIONS=true
 .INCLUDE :  settings.mk
 
 .IF "$(SYSTEM_LIBWPD)" == "YES"
-INCPRE+= $(LIBWPD_CFLAGS)
+INCPRE+=$(LIBWPD_CFLAGS)
 .ELSE
-# broken but ... necessary, internal include shafted ...
 INCPRE+=$(SOLARVER)$/$(UPD)$/$(INPATH)$/inc$/libwpd
 .ENDIF
+
+# broken but ... necessary, internal include shafted ...
+INCPRE+= -I..
 
 SLOFILES= $(SLO)$/WPXSvStream.obj
 
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/wpdimp/WordPerfectCollector.cxx	18 Dec 2006 09:27:19 -0000	1.1.2.1
@@ -0,0 +1,47 @@
+/* WordPerfectCollector: Collects sections and runs of text from a
+ * wordperfect file (and styles to go along with them) and writes them
+ * to a Writer target document
+ *
+ * Copyright (C) 2006 Fridrich Strba (fridrich.strba@bluewin.ch)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+
+#include "WordPerfectCollector.hxx"
+
+WordPerfectCollector::WordPerfectCollector(WPXInputStream *pInput, DocumentHandler *pHandler) :
+	DocumentCollector(pInput, pHandler)
+{
+}
+
+WordPerfectCollector::~WordPerfectCollector()
+{
+}
+
+bool WordPerfectCollector::parseSourceDocument(WPXInputStream &input)
+{
+        WPDResult result = WPDocument::parse(&input, static_cast<WPXHLListenerImpl *>(this));
+        if (result != WPD_OK)
+                return false;
+
+	return true;
+}
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/wpdimp/WordPerfectCollector.hxx	18 Dec 2006 09:27:19 -0000	1.1.2.1
@@ -0,0 +1,41 @@
+/* WordPerfectCollector: Collects sections and runs of text from a
+ * wordperfect file (and styles to go along with them) and writes them
+ * to a Writer target document
+ *
+ * Copyright (C) 2006 Fridrich Strba (fridrich.strba@bluewin.ch)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+ *
+ * For further information visit http://libwpd.sourceforge.net
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by
+ * Corel Corporation or Corel Corporation Limited."
+ */
+
+#ifndef _WORDPERFECTCOLLECTOR_HXX
+#define _WORDPERFECTCOLLECTOR_HXX
+
+#include "filter/DocumentCollector.hxx"
+
+class WordPerfectCollector : public DocumentCollector
+{
+public:
+	WordPerfectCollector(WPXInputStream *pInput, DocumentHandler *pHandler);
+	virtual ~WordPerfectCollector();
+	bool parseSourceDocument(WPXInputStream &pInput);
+};
+#endif
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/wpdimp/WordPerfectImportFilter.cxx	19 Dec 2006 10:09:07 -0000	1.1.2.2
@@ -0,0 +1,304 @@
+/* WordPerfectImportFilter: Sets up the filter, and calls DocumentCollector
+ * to do the actual filtering
+ *
+ * Copyright (C) 2000 by Sun Microsystems, Inc.
+ * Copyright (C) 2002-2004 William Lachance (wlach@interlog.com)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba <fridrich.strba@bluewin.ch>
+ * 
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
+ * 02111-1307, USA.
+ *
+ *  Contributor(s): Martin Gallwey (gallwey@sun.com)
+ *
+ */
+/* "This product is not manufactured, approved, or supported by 
+ * Corel Corporation or Corel Corporation Limited."
+ */
+
+#ifndef _OSL_DIAGNOSE_H_
+#include <osl/diagnose.h>
+#endif
+#ifndef _RTL_TENCINFO_H_
+#include <rtl/tencinfo.h>
+#endif
+#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#endif
+#ifndef _COM_SUN_STAR_IO_XINPUTSTREAM_HPP_
+#include <com/sun/star/io/XInputStream.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_XATTRIBUTELIST_HPP_
+#include <com/sun/star/xml/sax/XAttributeList.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_INPUTSOURCE_HPP_
+#include <com/sun/star/xml/sax/InputSource.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_XPARSER_HPP_
+#include <com/sun/star/xml/sax/XParser.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UCB_XCOMMANDENVIRONMENT_HPP
+#include <com/sun/star/ucb/XCommandEnvironment.hpp>
+#endif
+
+#ifndef _ATTRLIST_HPP_
+#include <xmloff/attrlist.hxx>
+#endif
+#ifndef _XMLKYWD_HPP
+#include <xmloff/xmlkywd.hxx>
+#endif
+
+#ifndef _UCBHELPER_CONTENT_HXX
+#include <ucbhelper/content.hxx>
+#endif
+
+#include "filter/FilterInternal.hxx"
+#include "filter/DocumentHandler.hxx"
+#include "filter/DocumentCollector.hxx"
+#include "stream/WPXSvStream.h"
+
+#include <libwpd/WPDocument.h>
+#include "WordPerfectCollector.hxx"
+#include "WordPerfectImportFilter.hxx"
+
+using namespace ::rtl;
+using rtl::OString;
+using rtl::OUString;
+using com::sun::star::uno::Sequence;
+using com::sun::star::uno::Reference;
+using com::sun::star::uno::Any;
+using com::sun::star::uno::UNO_QUERY;
+using com::sun::star::uno::XInterface;
+using com::sun::star::uno::Exception;
+using com::sun::star::uno::RuntimeException;
+using com::sun::star::lang::XMultiServiceFactory;
+using com::sun::star::beans::PropertyValue;
+using com::sun::star::document::XFilter;
+using com::sun::star::document::XExtendedFilterDetection;
+using com::sun::star::ucb::XCommandEnvironment;
+
+using com::sun::star::io::XInputStream;
+using com::sun::star::document::XImporter;
+using com::sun::star::xml::sax::InputSource;
+using com::sun::star::xml::sax::XAttributeList;
+using com::sun::star::xml::sax::XDocumentHandler;
+using com::sun::star::xml::sax::XParser;
+
+void callHandler(Reference < XDocumentHandler > xDocHandler);
+
+sal_Bool SAL_CALL WordPerfectImportFilter::importImpl( const Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor )
+	throw (RuntimeException)
+{
+	WRITER_DEBUG_MSG(("WordPerfectImportFilter::importImpl: Got here!\n"));
+	
+	sal_Int32 nLength = aDescriptor.getLength();
+	const PropertyValue * pValue = aDescriptor.getConstArray();
+	OUString sURL;
+	Reference < XInputStream > xInputStream;
+	for ( sal_Int32 i = 0 ; i < nLength; i++)
+	{
+	    if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
+		pValue[i].Value >>= xInputStream;
+	    else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "URL" ) ) )
+		pValue[i].Value >>= sURL;
+	}
+	if ( !xInputStream.is() )
+	{
+	    OSL_ASSERT( 0 );
+	    return sal_False;
+	}
+	OString sFileName;
+	sFileName = OUStringToOString(sURL, RTL_TEXTENCODING_INFO_ASCII);
+	
+	// An XML import service: what we push sax messages to..
+	OUString sXMLImportService ( RTL_CONSTASCII_USTRINGPARAM ( "com.sun.star.comp.Writer.XMLImporter" ) );
+	Reference < XDocumentHandler > xInternalHandler( mxMSF->createInstance( sXMLImportService ), UNO_QUERY );
+
+	// The XImporter sets up an empty target document for XDocumentHandler to write to.. 
+	Reference < XImporter > xImporter(xInternalHandler, UNO_QUERY);
+	xImporter->setTargetDocument(mxDoc);
+
+        // OO Document Handler: abstract class to handle document SAX messages, concrete implementation here
+        // writes to in-memory target doc
+        DocumentHandler xHandler(xInternalHandler);
+
+	WPXSvInputStream input( xInputStream );
+
+	WordPerfectCollector collector(&input, &xHandler);
+	collector.filter();
+
+	return true; 
+}
+
+sal_Bool SAL_CALL WordPerfectImportFilter::filter( const Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
+	throw (RuntimeException)
+{
+	WRITER_DEBUG_MSG(("WordPerfectImportFilter::filter: Got here!\n"));
+	return importImpl ( aDescriptor );
+}
+void SAL_CALL WordPerfectImportFilter::cancel(  ) 
+	throw (RuntimeException)
+{
+	WRITER_DEBUG_MSG(("WordPerfectImportFilter::cancel: Got here!\n"));
+}
+
+// XImporter
+void SAL_CALL WordPerfectImportFilter::setTargetDocument( const Reference< ::com::sun::star::lang::XComponent >& xDoc )
+	throw (::com::sun::star::lang::IllegalArgumentException, RuntimeException)
+{
+	WRITER_DEBUG_MSG(("WordPerfectImportFilter::getTargetDocument: Got here!\n"));
+	meType = FILTER_IMPORT;
+	mxDoc = xDoc;
+}
+
+// XExtendedFilterDetection
+OUString SAL_CALL WordPerfectImportFilter::detect( com::sun::star::uno::Sequence< PropertyValue >& Descriptor )
+	throw( com::sun::star::uno::RuntimeException )
+{
+	WRITER_DEBUG_MSG(("WordPerfectImportFilter::detect: Got here!\n"));
+	
+	WPDConfidence confidence = WPD_CONFIDENCE_NONE;
+	OUString sTypeName = OUString( RTL_CONSTASCII_USTRINGPARAM ( "" ) );
+	sal_Int32 nLength = Descriptor.getLength();
+	sal_Int32 location = nLength;
+	OUString sURL;
+	const PropertyValue * pValue = Descriptor.getConstArray();
+	Reference < XInputStream > xInputStream;
+	for ( sal_Int32 i = 0 ; i < nLength; i++)
+	{
+		if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "TypeName" ) ) )
+			location=i;
+		else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "InputStream" ) ) )
+			pValue[i].Value >>= xInputStream;
+		else if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "URL" ) ) )
+			pValue[i].Value >>= sURL;
+	}
+
+        Reference< com::sun::star::ucb::XCommandEnvironment > xEnv;
+        if (!xInputStream.is())
+        {
+		try
+		{
+			::ucb::Content aContent(sURL, xEnv);
+	                xInputStream = aContent.openStream();
+		}
+		catch ( ... )
+		{
+			return ::rtl::OUString();
+		}
+		
+                if (!xInputStream.is())
+                    return ::rtl::OUString();
+        }
+		
+	WPXSvInputStream input( xInputStream );
+	
+	if (input.atEOS())
+        return ::rtl::OUString();
+
+	confidence = WPDocument::isFileFormatSupported(&input, false);
+
+	if (confidence == WPD_CONFIDENCE_EXCELLENT)
+		sTypeName = OUString( RTL_CONSTASCII_USTRINGPARAM ( "writer_WordPerfect_Document" ) );
+
+    if (sTypeName.getLength())
+	{
+		if ( location == Descriptor.getLength() )
+		{
+			Descriptor.realloc(nLength+1);
+			Descriptor[location].Name = ::rtl::OUString::createFromAscii( "TypeName" );
+		}
+
+       	Descriptor[location].Value <<=sTypeName;
+    }
+
+	return sTypeName;	
+}
+
+
+// XInitialization
+void SAL_CALL WordPerfectImportFilter::initialize( const Sequence< Any >& aArguments ) 
+	throw (Exception, RuntimeException)
+{
+	WRITER_DEBUG_MSG(("WordPerfectImportFilter::initialize: Got here!\n"));
+	Sequence < PropertyValue > aAnySeq;
+	sal_Int32 nLength = aArguments.getLength();
+	if ( nLength && ( aArguments[0] >>= aAnySeq ) )
+	{
+		const PropertyValue * pValue = aAnySeq.getConstArray();
+		nLength = aAnySeq.getLength();
+		for ( sal_Int32 i = 0 ; i < nLength; i++)
+		{
+			if ( pValue[i].Name.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "Type" ) ) )
+			{
+				pValue[i].Value >>= msFilterName;
+				break;
+			}
+		}
+	}
+}
+OUString WordPerfectImportFilter_getImplementationName ()
+	throw (RuntimeException)
+{
+	return OUString ( RTL_CONSTASCII_USTRINGPARAM ( "com.sun.star.comp.Writer.WordPerfectImportFilter" ) );
+}
+
+#define SERVICE_NAME1 "com.sun.star.document.ImportFilter"
+#define SERVICE_NAME2 "com.sun.star.document.ExtendedTypeDetection"
+sal_Bool SAL_CALL WordPerfectImportFilter_supportsService( const OUString& ServiceName ) 
+	throw (RuntimeException)
+{
+	return (ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME1 ) ) ||
+		ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME2 ) ) );
+}
+Sequence< OUString > SAL_CALL WordPerfectImportFilter_getSupportedServiceNames(  ) 
+	throw (RuntimeException)
+{
+	Sequence < OUString > aRet(2);
+//	Sequence < OUString > aRet(1);
+        OUString* pArray = aRet.getArray();
+        pArray[0] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME1 ) );
+	pArray[1] =  OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME2 ) ); 
+        return aRet;
+}
+#undef SERVICE_NAME2
+#undef SERVICE_NAME1
+
+Reference< XInterface > SAL_CALL WordPerfectImportFilter_createInstance( const Reference< XMultiServiceFactory > & rSMgr)
+	throw( Exception )
+{
+	return (cppu::OWeakObject*) new WordPerfectImportFilter( rSMgr );
+}
+
+// XServiceInfo
+OUString SAL_CALL WordPerfectImportFilter::getImplementationName(  ) 
+	throw (RuntimeException)
+{
+	return WordPerfectImportFilter_getImplementationName();
+}
+sal_Bool SAL_CALL WordPerfectImportFilter::supportsService( const OUString& rServiceName ) 
+	throw (RuntimeException)
+{
+    return WordPerfectImportFilter_supportsService( rServiceName );
+}
+Sequence< OUString > SAL_CALL WordPerfectImportFilter::getSupportedServiceNames(  ) 
+	throw (RuntimeException)
+{
+    return WordPerfectImportFilter_getSupportedServiceNames();
+}
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/wpdimp/WordPerfectImportFilter.hxx	18 Dec 2006 09:27:20 -0000	1.1.2.1
@@ -0,0 +1,129 @@
+/* 
+ * Copyright (C) 2000 by Sun Microsystems, Inc.
+ * Copyright (C) 2002-2004 William Lachance (wlach@interlog.com)
+ * Copyright (C) 2004 Net Integration Technologies (http://www.net-itech.com)
+ * Copyright (C) 2004 Fridrich Strba <fridrich.strba@bluewin.ch>
+ * 
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
+ * 02111-1307, USA.
+ *
+ *  Contributor(s): Martin Gallwey (gallwey@sun.com)
+ *
+ */
+
+/* "This product is not manufactured, approved, or supported by 
+ * Corel Corporation or Corel Corporation Limited."
+ */
+#ifndef _WORDPERFECTIMPORTFILTER_HXX
+#define _WORDPERFECTIMPORTFILTER_HXX
+
+#ifndef _COM_SUN_STAR_DOCUMENT_XFILTER_HPP_
+#include <com/sun/star/document/XFilter.hpp>
+#endif
+#ifndef _COM_SUN_STAR_DOCUMENT_XIMPORTER_HPP_
+#include <com/sun/star/document/XImporter.hpp>
+#endif
+#ifndef _COM_SUN_STAR_DOCUMENT_XEXTENDEDFILTERDETECTION_HPP_
+#include <com/sun/star/document/XExtendedFilterDetection.hpp>
+#endif
+#ifndef _COM_SUN_STAR_LANG_XINITIALIZATION_HPP_
+#include <com/sun/star/lang/XInitialization.hpp>
+#endif
+#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#endif
+#ifndef _COM_SUN_STAR_XML_SAX_XDOCUMENTHANDLER_HPP_
+#include <com/sun/star/xml/sax/XDocumentHandler.hpp>
+#endif
+#ifndef _CPPUHELPER_IMPLBASE5_HXX_
+#include <cppuhelper/implbase5.hxx>
+#endif
+
+enum FilterType 
+{
+	FILTER_IMPORT,
+	FILTER_EXPORT
+};
+/* This component will be instantiated for both import or export. Whether it calls
+ * setSourceDocument or setTargetDocument determines which Impl function the filter
+ * member calls */
+class WordPerfectImportFilter : public cppu::WeakImplHelper5 
+< 
+	com::sun::star::document::XFilter,
+	com::sun::star::document::XImporter,
+	com::sun::star::document::XExtendedFilterDetection,
+	com::sun::star::lang::XInitialization,
+	com::sun::star::lang::XServiceInfo
+>
+{
+protected:
+	// oo.org declares
+	::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > mxMSF;
+	::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent > mxDoc;
+	::rtl::OUString msFilterName;
+	::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler > mxHandler;
+
+	FilterType meType;
+
+	sal_Bool SAL_CALL importImpl( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
+		throw (::com::sun::star::uno::RuntimeException);
+
+public:
+	WordPerfectImportFilter( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > &rxMSF)
+        : mxMSF( rxMSF ) {}
+	virtual ~WordPerfectImportFilter() {}
+
+	// XFilter
+        virtual sal_Bool SAL_CALL filter( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aDescriptor ) 
+		throw (::com::sun::star::uno::RuntimeException);
+        virtual void SAL_CALL cancel(  ) 
+		throw (::com::sun::star::uno::RuntimeException);
+
+	// XImporter
+        virtual void SAL_CALL setTargetDocument( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent >& xDoc ) 
+		throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
+
+ 	//XExtendedFilterDetection
+	virtual ::rtl::OUString SAL_CALL detect( com::sun::star::uno::Sequence< com::sun::star::beans::PropertyValue >& Descriptor ) 
+		throw( com::sun::star::uno::RuntimeException );
+
+	// XInitialization
+        virtual void SAL_CALL initialize( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aArguments ) 
+		throw (::com::sun::star::uno::Exception, ::com::sun::star::uno::RuntimeException);
+
+	// XServiceInfo
+        virtual ::rtl::OUString SAL_CALL getImplementationName(  ) 
+		throw (::com::sun::star::uno::RuntimeException);
+        virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) 
+		throw (::com::sun::star::uno::RuntimeException);
+        virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) 
+		throw (::com::sun::star::uno::RuntimeException);
+
+};
+
+::rtl::OUString WordPerfectImportFilter_getImplementationName()
+	throw ( ::com::sun::star::uno::RuntimeException );
+
+sal_Bool SAL_CALL WordPerfectImportFilter_supportsService( const ::rtl::OUString& ServiceName ) 
+	throw ( ::com::sun::star::uno::RuntimeException );
+
+::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL WordPerfectImportFilter_getSupportedServiceNames(  ) 
+	throw ( ::com::sun::star::uno::RuntimeException );
+
+::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >
+SAL_CALL WordPerfectImportFilter_createInstance( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > & rSMgr)
+	throw ( ::com::sun::star::uno::Exception );
+
+#endif
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/wpdimp/makefile.mk	18 Dec 2006 09:27:20 -0000	1.1.2.1
@@ -0,0 +1,21 @@
+PRJ=..$/..
+
+PRJNAME=writerperfect
+TARGET=wpdimp
+ENABLE_EXCEPTIONS=true
+
+.INCLUDE :  settings.mk
+
+.IF "$(SYSTEM_LIBWPD)" == "YES"
+INCPRE+=$(LIBWPD_CFLAGS) -I..
+.ELSE
+# broken but ... necessary, internal include shafted ...
+INCPRE+=$(SOLARVER)$/$(UPD)$/$(INPATH)$/inc$/libwpd -I..
+.ENDIF
+
+SLOFILES= \
+	$(SLO)$/WordPerfectCollector.obj  \
+	$(SLO)$/WordPerfectImportFilter.obj  \
+	$(SLO)$/wpft_genericfilter.obj		
+
+.INCLUDE :  target.mk
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ writerperfect/source/wpdimp/wpft_genericfilter.cxx	19 Dec 2006 10:09:07 -0000	1.1.2.2
@@ -0,0 +1,101 @@
+/* genericfilter: mostly generic code for registering the filter
+ *
+ * Portions of this code Copyright 2000 by Sun Microsystems, Inc.
+ * Rest is Copyright (C) 2002 William Lachance (wlach@interlog.com)
+ * 
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
+ * 02111-1307, USA.
+ */
+
+/* "This product is not manufactured, approved, or supported by 
+ * Corel Corporation or Corel Corporation Limited."
+ */
+#include <stdio.h>
+
+#include <osl/mutex.hxx>
+#include <osl/thread.h>
+#include <cppuhelper/factory.hxx>
+
+#ifndef _COM_SUN_STAR_LANG_XSINGLESERVICEFACTORY_HPP_
+#include <com/sun/star/lang/XSingleServiceFactory.hpp>
+#endif
+
+#include "WordPerfectImportFilter.hxx"
+
+using namespace ::rtl;
+using namespace ::cppu;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::lang;
+using namespace ::com::sun::star::registry;
+
+extern "C"
+{
+//==================================================================================================
+void SAL_CALL component_getImplementationEnvironment(
+	const sal_Char ** ppEnvTypeName, uno_Environment ** /* ppEnv */ )
+{
+	*ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;
+}
+//==================================================================================================
+sal_Bool SAL_CALL component_writeInfo(
+	void * /* pServiceManager */, void * pRegistryKey )
+{
+	if (pRegistryKey)
+	{
+		try
+		{
+            sal_Int32 nPos = 0;
+            Reference< XRegistryKey > xNewKey(
+				reinterpret_cast< XRegistryKey * >( pRegistryKey )->createKey( WordPerfectImportFilter_getImplementationName() ) ); 
+            xNewKey = xNewKey->createKey( OUString::createFromAscii( "/UNO/SERVICES" ) );
+			
+			const Sequence< OUString > & rSNL = WordPerfectImportFilter_getSupportedServiceNames();
+			const OUString * pArray = rSNL.getConstArray();
+			for ( nPos = rSNL.getLength(); nPos--; )
+				xNewKey->createKey( pArray[nPos] );
+
+			return sal_True;
+		}
+		catch (InvalidRegistryException &)
+		{
+			OSL_ENSURE( sal_False, "### InvalidRegistryException!" );
+		}
+	}
+	return sal_False;
+}
+//==================================================================================================
+void * SAL_CALL component_getFactory(
+	const sal_Char * pImplName, void * pServiceManager, void * /* pRegistryKey */ )
+{
+	void * pRet = 0;
+
+    OUString implName = OUString::createFromAscii( pImplName );
+	if ( pServiceManager && implName.equals(WordPerfectImportFilter_getImplementationName()) )
+	{
+		Reference< XSingleServiceFactory > xFactory( createSingleFactory(
+			reinterpret_cast< XMultiServiceFactory * >( pServiceManager ),
+			OUString::createFromAscii( pImplName ),
+			WordPerfectImportFilter_createInstance, WordPerfectImportFilter_getSupportedServiceNames() ) );
+		
+		if (xFactory.is())
+		{
+			xFactory->acquire();
+			pRet = xFactory.get();
+		}
+	}
+	
+	return pRet;
+}
+}
--- writerperfect/util/makefile.mk	5 Dec 2006 10:39:01 -0000	1.6
+++ writerperfect/util/makefile.mk	18 Dec 2006 09:27:21 -0000	1.6.4.1
@@ -1,6 +1,6 @@
 PRJ=..
 PRJNAME=writerperfect
-TARGET=wpft
+TARGET=writerperfect
 VERSION=$(UPD)
 
 .INCLUDE :  settings.mk
@@ -15,10 +15,11 @@ LIBWPD=-lwpdlib
 LIBWPD=$(LIBPRE) wpdlib.lib
 .ENDIF
 
-LIB1TARGET= $(SLB)$/$(TARGET).lib
+LIB1TARGET= $(SLB)$/wpft.lib
 LIB1FILES= \
 	$(SLB)$/stream.lib  \
-	$(SLB)$/filter.lib
+	$(SLB)$/filter.lib  \
+	$(SLB)$/wpdimp.lib
 SHL1LIBS=$(LIB1TARGET)
 SHL1STDLIBS+= \
 	$(SVLLIB)	\
@@ -35,10 +36,10 @@ SHL1STDLIBS+= \
 	$(XMLOFFLIB) \
 	$(LIBWPD)
 
-SHL1TARGET = $(TARGET)$(UPD)$(DLLPOSTFIX)
+SHL1TARGET = wpft$(UPD)$(DLLPOSTFIX)
 SHL1IMPLIB = i$(SHL1TARGET)
 SHL1LIBS = $(LIB1TARGET)
-SHL1VERSIONMAP=$(TARGET).map
+SHL1VERSIONMAP=wpft.map
 DEF1NAME=$(SHL1TARGET)
 
 .INCLUDE :  target.mk
