--- fpicker/source/unx/gnome/SalGtkFilePicker.cxx	2005-03-09 11:41:07.000000000 +0530
+++ fpicker/source/unx/gnome/SalGtkFilePicker.cxx	2005-03-09 18:09:09.479970016 +0530
@@ -202,6 +202,135 @@ SalGtkFilePicker::SalGtkFilePicker( cons
 		m_pListLabels[i] = NULL;
 		mbListVisibility[i] = false;
     }
+
+	CResourceProvider aResProvider;
+	OUString aFilePickerTitle;
+ 
+	aFilePickerTitle = aResProvider.getResString( FILE_PICKER_TITLE_OPEN );
+	    
+	m_pDialog = gtk_file_chooser_dialog_new(
+			OUStringToOString( aFilePickerTitle, RTL_TEXTENCODING_UTF8 ).getStr(),
+			NULL,
+			GTK_FILE_CHOOSER_ACTION_OPEN,
+			GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
+			GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
+			NULL );
+
+	gtk_dialog_set_default_response( GTK_DIALOG (m_pDialog), GTK_RESPONSE_ACCEPT );
+
+	gtk_file_chooser_set_local_only( GTK_FILE_CHOOSER( m_pDialog ), FALSE );
+
+	m_pVBox = gtk_vbox_new( FALSE, 0 );
+
+	OUString aLabel;
+
+	for( i = 0; i < TOGGLE_LAST; i++ )
+	{
+		m_pToggles[i] = gtk_check_button_new();
+
+#define LABEL_TOGGLE( elem ) \
+		case elem : \
+			aLabel = aResProvider.getResString( CHECKBOX_##elem ); \
+			setLabel( CHECKBOX_##elem, aLabel ); \
+			break
+
+  		switch( i ) {
+
+		LABEL_TOGGLE( AUTOEXTENSION );
+		LABEL_TOGGLE( PASSWORD );
+		LABEL_TOGGLE( FILTEROPTIONS );
+		LABEL_TOGGLE( READONLY );
+		LABEL_TOGGLE( LINK );
+		LABEL_TOGGLE( PREVIEW );
+		LABEL_TOGGLE( SELECTION );
+			default:
+				OSL_TRACE("Handle unknown control %d\n", i);
+				break;
+		}
+	       
+
+		gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pToggles[i], FALSE, TRUE, 0 );
+	}
+
+	for( i = 0; i < BUTTON_LAST; i++ )
+	{
+		m_pButtons[i] = gtk_button_new();
+
+#define LABEL_BUTTON( elem ) \
+		case elem : \
+			aLabel = aResProvider.getResString( PUSHBUTTON_##elem ); \
+			setLabel( PUSHBUTTON_##elem, aLabel ); \
+			break
+
+  		switch( i ) {
+
+		LABEL_BUTTON( PLAY );
+			default:
+				OSL_TRACE("Handle unknown control %d\n", i);
+				break;
+		}
+
+		gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pButtons[i], FALSE, TRUE, 0 );
+	}
+
+	for( i = 0; i < LIST_LAST; i++ )
+	{
+        m_pHBoxs[i] = gtk_hbox_new( FALSE, 0 );
+
+        m_pAligns[i] = gtk_alignment_new(0, 0, 0, 1);
+
+		m_pLists[i] = gtk_combo_box_new_text();
+
+		m_pListLabels[i] = gtk_label_new( "" );
+
+#define LABEL_LIST( elem ) \
+		case elem : \
+			aLabel = aResProvider.getResString( LISTBOX_##elem##_LABEL ); \
+			setLabel( LISTBOX_##elem##_LABEL, aLabel ); \
+			break
+
+  		switch( i ) 
+        {
+            LABEL_LIST( VERSION );
+            LABEL_LIST( TEMPLATE );
+            LABEL_LIST( IMAGE_TEMPLATE );
+			default:
+				OSL_TRACE("Handle unknown control %d\n", i);
+				break;
+		}
+
+        gtk_container_add( GTK_CONTAINER( m_pAligns[i]), m_pLists[i] );
+        gtk_box_pack_end( GTK_BOX( m_pHBoxs[i] ), m_pAligns[i], FALSE, FALSE, 0 );
+
+        gtk_box_pack_end( GTK_BOX( m_pHBoxs[i] ), m_pListLabels[i], FALSE, FALSE, 0 );
+
+        gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pHBoxs[i], FALSE, FALSE, 0 );
+	}
+
+	m_pFilterComboBox = gtk_combo_box_new_text();
+	m_pFilterComboAlign = gtk_alignment_new(0, 0, 0, 1);
+	m_pFilterComboHBox = gtk_hbox_new( FALSE, 0 );
+	m_pFilterComboLabel = gtk_label_new( "" );
+
+	aLabel = aResProvider.getResString( FILE_PICKER_FILE_TYPE );
+	aLabel += OUString::createFromAscii(": ");
+	g_object_set( m_pFilterComboLabel, "label",
+		OUStringToOString( aLabel, RTL_TEXTENCODING_UTF8 ).getStr(),
+		"use_underline", TRUE, NULL );
+
+	gtk_container_add( GTK_CONTAINER( m_pFilterComboAlign ), m_pFilterComboBox );
+	gtk_box_pack_end( GTK_BOX( m_pFilterComboHBox ), m_pFilterComboAlign, FALSE, FALSE, 0 );
+	gtk_box_pack_end( GTK_BOX( m_pFilterComboHBox ), m_pFilterComboLabel, FALSE, FALSE, 0 );
+	gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pFilterComboHBox, FALSE, FALSE, 0 );
+
+	gtk_widget_show( m_pFilterComboLabel );
+	gtk_widget_show( m_pFilterComboHBox );
+	gtk_widget_show( m_pFilterComboAlign );
+	gtk_widget_show( m_pFilterComboBox );
+
+	gtk_file_chooser_set_extra_widget( GTK_FILE_CHOOSER( m_pDialog ), m_pVBox );
+
+	gtk_widget_show( m_pVBox );
 }
 
 //------------------------------------------------------------------------------------
@@ -474,6 +603,20 @@ shrinkFilterName( const rtl::OUString &r
 	return aRealName;
 }
 
+static void
+dialog_remove_buttons( GtkDialog *pDialog )
+{
+	g_return_if_fail( GTK_IS_DIALOG( pDialog ) );
+
+	GList *pChildren =
+		gtk_container_get_children( GTK_CONTAINER( pDialog->action_area ) );
+
+	for( GList *p = pChildren; p; p = p->next )
+		gtk_widget_destroy( GTK_WIDGET( p->data ) );
+
+	g_list_free( pChildren );
+}
+
 //------------------------------------------------------------------------------------
 namespace {
 	//................................................................................
@@ -1531,138 +1674,23 @@ void SAL_CALL SalGtkFilePicker::initiali
 				1 );
 	}
 
-	CResourceProvider aResProvider;
-	OUString aLabel;
-
-	OUString aFilePickerTitle;
- 
-	if( GTK_FILE_CHOOSER_ACTION_OPEN == eAction )
-	    aFilePickerTitle = aResProvider.getResString( FILE_PICKER_TITLE_OPEN );
-	else
-	    aFilePickerTitle = aResProvider.getResString( FILE_PICKER_TITLE_SAVE );
-	    
-	m_pDialog = gtk_file_chooser_dialog_new(
-			OUStringToOString( aFilePickerTitle, RTL_TEXTENCODING_UTF8 ).getStr(),
-			NULL,
-			eAction,
-			GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
-			first_button_text, GTK_RESPONSE_ACCEPT,
-			NULL );
-
-	gtk_dialog_set_default_response( GTK_DIALOG (m_pDialog), GTK_RESPONSE_ACCEPT );
-
-	gtk_file_chooser_set_local_only( GTK_FILE_CHOOSER( m_pDialog ), FALSE );
-	gtk_file_chooser_set_select_multiple( GTK_FILE_CHOOSER( m_pDialog ), FALSE );
-
-	m_pVBox = gtk_vbox_new( FALSE, 0 );
-
-        int i;
-
-	for( i = 0; i < TOGGLE_LAST; i++ )
-	{
-		m_pToggles[i] = gtk_check_button_new();
-
-#define LABEL_TOGGLE( elem ) \
-		case elem : \
-			aLabel = aResProvider.getResString( CHECKBOX_##elem ); \
-			setLabel( CHECKBOX_##elem, aLabel ); \
-			break
-
-  		switch( i ) {
-
-		LABEL_TOGGLE( AUTOEXTENSION );
-		LABEL_TOGGLE( PASSWORD );
-		LABEL_TOGGLE( FILTEROPTIONS );
-		LABEL_TOGGLE( READONLY );
-		LABEL_TOGGLE( LINK );
-		LABEL_TOGGLE( PREVIEW );
-		LABEL_TOGGLE( SELECTION );
-			default:
-				OSL_TRACE("Handle unknown control %d\n", i);
-				break;
-		}
-	       
-
-		gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pToggles[i], FALSE, TRUE, 0 );
-	}
-
-	for( i = 0; i < BUTTON_LAST; i++ )
-	{
-		m_pButtons[i] = gtk_button_new();
-
-#define LABEL_BUTTON( elem ) \
-		case elem : \
-			aLabel = aResProvider.getResString( PUSHBUTTON_##elem ); \
-			setLabel( PUSHBUTTON_##elem, aLabel ); \
-			break
-
-  		switch( i ) {
-
-		LABEL_BUTTON( PLAY );
-			default:
-				OSL_TRACE("Handle unknown control %d\n", i);
-				break;
-		}
-
-		gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pButtons[i], FALSE, TRUE, 0 );
-	}
-
-	for( i = 0; i < LIST_LAST; i++ )
+	if( GTK_FILE_CHOOSER_ACTION_SAVE == eAction )
 	{
-        m_pHBoxs[i] = gtk_hbox_new( FALSE, 0 );
-
-        m_pAligns[i] = gtk_alignment_new(0, 0, 0, 1);
-
-		m_pLists[i] = gtk_combo_box_new_text();
-
-		m_pListLabels[i] = gtk_label_new( "" );
-
-#define LABEL_LIST( elem ) \
-		case elem : \
-			aLabel = aResProvider.getResString( LISTBOX_##elem##_LABEL ); \
-			setLabel( LISTBOX_##elem##_LABEL, aLabel ); \
-			break
-
-  		switch( i ) 
-        {
-            LABEL_LIST( VERSION );
-            LABEL_LIST( TEMPLATE );
-            LABEL_LIST( IMAGE_TEMPLATE );
-			default:
-				OSL_TRACE("Handle unknown control %d\n", i);
-				break;
-		}
-
-        gtk_container_add( GTK_CONTAINER( m_pAligns[i]), m_pLists[i] );
-        gtk_box_pack_end( GTK_BOX( m_pHBoxs[i] ), m_pAligns[i], FALSE, FALSE, 0 );
-
-        gtk_box_pack_end( GTK_BOX( m_pHBoxs[i] ), m_pListLabels[i], FALSE, FALSE, 0 );
-
-        gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pHBoxs[i], FALSE, FALSE, 0 );
+		CResourceProvider aResProvider;
+		OUString aFilePickerTitle;
+ 
+		aFilePickerTitle = aResProvider.getResString( FILE_PICKER_TITLE_SAVE );
+		gtk_window_set_title ( GTK_WINDOW( m_pDialog ),
+			OUStringToOString( aFilePickerTitle, RTL_TEXTENCODING_UTF8 ).getStr() );
 	}
 
-	m_pFilterComboBox = gtk_combo_box_new_text();
-	m_pFilterComboAlign = gtk_alignment_new(0, 0, 0, 1);
-	m_pFilterComboHBox = gtk_hbox_new( FALSE, 0 );
-	m_pFilterComboLabel = gtk_label_new( "" );
-
-	aLabel = aResProvider.getResString( FILE_PICKER_FILE_TYPE );
-	aLabel += OUString::createFromAscii(": ");
-	g_object_set( m_pFilterComboLabel, "label",
-		OUStringToOString( aLabel, RTL_TEXTENCODING_UTF8 ).getStr(),
-		"use_underline", TRUE, NULL );
-
-	gtk_container_add( GTK_CONTAINER( m_pFilterComboAlign ), m_pFilterComboBox );
-	gtk_box_pack_end( GTK_BOX( m_pFilterComboHBox ), m_pFilterComboAlign, FALSE, FALSE, 0 );
-	gtk_box_pack_end( GTK_BOX( m_pFilterComboHBox ), m_pFilterComboLabel, FALSE, FALSE, 0 );
-	gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pFilterComboHBox, FALSE, FALSE, 0 );
+	gtk_file_chooser_set_action( GTK_FILE_CHOOSER( m_pDialog ), eAction);
 
-	gtk_widget_show( m_pFilterComboLabel );
-	gtk_widget_show( m_pFilterComboHBox );
-	gtk_widget_show( m_pFilterComboAlign );
-	gtk_widget_show( m_pFilterComboBox );
+	dialog_remove_buttons( GTK_DIALOG( m_pDialog ) );
+	gtk_dialog_add_button( GTK_DIALOG( m_pDialog ), GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL );
+	gtk_dialog_add_button( GTK_DIALOG( m_pDialog ), first_button_text, GTK_RESPONSE_ACCEPT );
 
-	gtk_file_chooser_set_extra_widget( GTK_FILE_CHOOSER( m_pDialog ), m_pVBox );
+	gtk_dialog_set_default_response( GTK_DIALOG (m_pDialog), GTK_RESPONSE_ACCEPT );
 
 	// Setup special flags
 	for( int nTVIndex = 0; nTVIndex < TOGGLE_LAST; nTVIndex++ )
@@ -1683,8 +1711,6 @@ void SAL_CALL SalGtkFilePicker::initiali
         }
 	}
 
-	gtk_widget_show( m_pVBox );
-
 	// if Preview check is visible, connect the signal handler
 	if( mbToggleVisibility[PREVIEW] )
 		gtk_signal_connect( GTK_OBJECT( m_pToggles[PREVIEW] ), "toggled",
