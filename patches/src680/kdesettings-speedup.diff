--- /dev/null	2006-04-23 03:37:50.000000000 +0000
+++ shell/source/backends/desktopbe/desktopbecdef.cxx	2006-06-14 11:04:01.000000000 +0000
@@ -0,0 +1,211 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XSCHEMASUPPLIER_HPP_
+#include <com/sun/star/configuration/backend/XSingleLayerStratum.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_REGISTRY_XREGISTRYKEY_HPP_
+#include <com/sun/star/registry/XRegistryKey.hpp>
+#endif
+
+#ifndef _CPPUHELPER_IMPLEMENTATIONENTRY_HXX_
+#include <cppuhelper/implementationentry.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HPP_
+#include <com/sun/star/uno/XComponentContext.hpp>
+#endif
+
+#include "uno/current_context.hxx"
+
+namespace css = com::sun::star ;
+namespace uno = css::uno ;
+namespace lang = css::lang ;
+namespace backend = css::configuration::backend ;
+
+//==============================================================================
+
+static uno::Reference<uno::XInterface> SAL_CALL createDesktopBackend(const uno::Reference<uno::XComponentContext>& xContext)
+{
+    try {
+        uno::Reference< uno::XCurrentContext > xCurrentContext(uno::getCurrentContext());
+        
+        if (xCurrentContext.is())
+        {
+            uno::Any aValue = xCurrentContext->getValueByName(
+                rtl::OUString::createFromAscii( "system.desktop-environment" ) );
+        
+            rtl::OUString aDesktopEnvironment;
+            if ( aValue >>= aDesktopEnvironment )
+            {
+                rtl::OUString aDesktopService;
+                if ( aDesktopEnvironment.equalsIgnoreAsciiCaseAscii( "gnome" ) )
+                    aDesktopService = rtl::OUString::createFromAscii( "com.sun.star.configuration.backend.GconfBackend" );
+                else if ( aDesktopEnvironment.equalsIgnoreAsciiCaseAscii( "kde" ) )
+                    aDesktopService = rtl::OUString::createFromAscii( "com.sun.star.configuration.backend.KDEBackend" );
+                else
+                    return uno::Reference<uno::XInterface>(); 
+
+                uno::Reference< lang::XMultiComponentFactory > xServiceManager = xContext->getServiceManager();
+                if( xServiceManager.is() )
+                {
+                    return uno::Reference< backend::XSingleLayerStratum >::query(
+                            xServiceManager->createInstanceWithContext( aDesktopService, xContext) );
+                }
+            }
+        }
+    } catch (uno::RuntimeException e) {
+    }    
+
+    return uno::Reference<uno::XInterface>(); 
+}
+
+static rtl::OUString SAL_CALL getBackendName(void) {
+    return rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("com.sun.star.comp.configuration.backend.DesktopBackend") );
+}
+
+static uno::Sequence<rtl::OUString> SAL_CALL getBackendServiceNames(void) 
+{
+    uno::Sequence<rtl::OUString> aServices(2) ;
+    aServices[0] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("com.sun.star.configuration.backend.DesktopBackend")) ;
+    aServices[1] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("com.sun.star.configuration.backend.PlatformBackend")) ;
+
+    return aServices ;
+}
+
+static uno::Sequence<rtl::OUString> SAL_CALL getSupportedComponents(void)
+{
+    const sal_Int32 nComponents = 6;
+
+    uno::Sequence<rtl::OUString> aSupportedComponentsList(nComponents) ;
+
+    aSupportedComponentsList[0] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.VCL")) ;
+    aSupportedComponentsList[1] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Inet")) ;
+    aSupportedComponentsList[2] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Office.Common")) ;
+
+    aSupportedComponentsList[3] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.UserProfile")) ;
+    aSupportedComponentsList[4] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Office.Recovery")) ;
+    aSupportedComponentsList[5] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Setup")) ;
+
+    return aSupportedComponentsList ;
+}
+//==============================================================================
+
+static const cppu::ImplementationEntry kImplementations_entries[] = 
+{
+    {
+        createDesktopBackend,
+        getBackendName,
+        getBackendServiceNames,
+        cppu::createSingleComponentFactory,
+        NULL,
+        0
+    },
+	{ NULL }
+} ;
+//------------------------------------------------------------------------------
+
+extern "C" void SAL_CALL component_getImplementationEnvironment(
+                                            const sal_Char **aEnvTypeName,
+                                            uno_Environment **aEnvironment)
+{
+    *aEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME ;
+}
+
+//------------------------------------------------------------------------------
+
+extern "C" sal_Bool SAL_CALL component_writeInfo(void *pServiceManager,
+                                                 void *pRegistryKey)
+{
+    using namespace ::com::sun::star::registry;
+    if (pRegistryKey)
+    {
+        try
+        {
+            uno::Reference< XRegistryKey > xImplKey = static_cast< XRegistryKey* >( pRegistryKey )->createKey(
+                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("/") ) + getBackendName()
+            );
+            
+            // Register associated service names
+            uno::Reference< XRegistryKey > xServicesKey = xImplKey->createKey( 
+                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("/UNO/SERVICES") )
+            );
+            
+            uno::Sequence<rtl::OUString> sServiceNames = getBackendServiceNames();
+            for (sal_Int32 i = 0 ; i < sServiceNames.getLength() ; ++ i)
+                xServicesKey->createKey(sServiceNames[i]);
+
+            // Register supported components            
+            uno::Reference<XRegistryKey> xComponentKey = xImplKey->createKey(
+                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("/DATA/SupportedComponents") )
+            );
+        
+            xComponentKey->setAsciiListValue( getSupportedComponents() );
+
+            return sal_True;
+        }
+        
+        catch( InvalidRegistryException& )
+        {                       
+            OSL_ENSURE(sal_False, "InvalidRegistryException caught");           
+        }
+    }
+    
+    return sal_False;
+}
+
+//------------------------------------------------------------------------------
+
+extern "C" void *component_getFactory(const sal_Char *aImplementationName,
+                                      void *aServiceManager,
+                                      void *aRegistryKey)
+{
+    return cppu::component_getFactoryHelper(
+        aImplementationName,
+        aServiceManager,
+        aRegistryKey,
+        kImplementations_entries) ;
+}
+//------------------------------------------------------------------------------
--- /dev/null	2006-04-23 03:37:50.000000000 +0000
+++ shell/source/backends/desktopbe/desktopbe.xml	2006-06-13 17:17:48.000000000 +0000
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE module-description PUBLIC "-//StarOffice//DTD ComponentDescription 1.0//EN" "module-description.dtd">
+<module-description xmlns:xlink="http://www.w3.org/1999/xlink">
+    <module-name>desktopbe</module-name>
+    <component-description>
+        <author> Jan Holesovsky </author>
+        <name>com.sun.star.comp.configuration.backend.DesktopBackend</name>
+        <description> The shared gconf/KDE backend; will load GconfBackend or
+        KDEBackend depending on the desktop environment.</description>
+        <loader-name>com.sun.star.loader.SharedLibrary</loader-name>
+        <language>c++</language>
+        <status value="beta"/>        
+        <supported-service>com.sun.star.comp.configuration.backend.DesktopBackend</supported-service>		
+        <supported-service>com.sun.star.comp.configuration.backend.PlatformBackend</supported-service>		
+        <service-dependency>...</service-dependency>
+        <type>com.sun.star.configuration.backend.XBackendChangesListener</type>
+        <type>com.sun.star.configuration.backend.XBackendChangesNotifier</type>
+        <type>com.sun.star.configuration.backend.XLayerHandler</type>
+        <type>com.sun.star.configuration.backend.XSingleLayerStratum</type>
+        <type>com.sun.star.lang.XMultiComponentFactory</type>
+        <type>com.sun.star.lang.XServiceInfo</type>
+        <type>com.sun.star.lang.XSingleComponentFactory</type>
+        <type>com.sun.star.lang.XTypeProvider</type>
+        <type>com.sun.star.uno.TypeClass</type>
+        <type>com.sun.star.uno.XAggregation</type>
+        <type>com.sun.star.uno.XComponentContext</type>
+        <type>com.sun.star.uno.XCurrentContext</type>
+        <type>com.sun.star.uno.XWeak</type>
+        <type>com.sun.star.registry.XRegistryKey</type>
+    </component-description>
+    <project-build-dependency>cppuhelper</project-build-dependency>
+    <project-build-dependency>cppu</project-build-dependency>
+    <project-build-dependency>sal</project-build-dependency>
+    <runtime-module-dependency>cppuhelper3$(COM)</runtime-module-dependency>
+    <runtime-module-dependency>cppu3</runtime-module-dependency>
+    <runtime-module-dependency>sal3</runtime-module-dependency>
+</module-description>
--- /dev/null	2006-04-23 03:37:50.000000000 +0000
+++ shell/source/backends/desktopbe/desktopbe1-ucd.txt	2006-06-13 17:28:45.000000000 +0000
@@ -0,0 +1,9 @@
+[ComponentDescriptor]
+ImplementationName=com.sun.star.comp.configuration.backend.DesktopBackend
+ComponentName=desktopbe1.uno.so
+LoaderName=com.sun.star.loader.SharedLibrary
+[Data]
+SupportedComponents=org.openoffice.VCL;org.openoffice.Inet;org.openoffice.Office.Common;org.openoffice.UserProfile;org.openoffice.Office.Recovery;org.openoffice.Setup
+[SupportedServices]
+com.sun.star.configuration.backend.DesktopBackend
+com.sun.star.configuration.backend.PlatformBackend
--- /dev/null	2006-04-23 03:37:50.000000000 +0000
+++ shell/source/backends/desktopbe/exports.map	2006-06-13 15:57:33.000000000 +0000
@@ -0,0 +1,11 @@
+UDK_3_0_0 {
+	global:
+		GetVersionInfo;
+		component_getDescriptionFunc;
+		component_getImplementationEnvironment;
+		component_getFactory;
+		component_writeInfo;
+
+	local:
+		*;
+};
--- /dev/null	2006-04-23 03:37:50.000000000 +0000
+++ shell/source/backends/desktopbe/makefile.mk	2006-06-13 15:34:03.000000000 +0000
@@ -0,0 +1,79 @@
+#*************************************************************************
+#
+#   OpenOffice.org - a multi-platform office productivity suite
+#
+#   $RCSfile$
+#
+#   $Revision$
+#
+#   last change: $Author$ $Date$
+#
+#   The Contents of this file are made available subject to
+#   the terms of GNU Lesser General Public License Version 2.1.
+#
+#
+#     GNU Lesser General Public License Version 2.1
+#     =============================================
+#     Copyright 2005 by Sun Microsystems, Inc.
+#     901 San Antonio Road, Palo Alto, CA 94303, USA
+#
+#     This library is free software; you can redistribute it and/or
+#     modify it under the terms of the GNU Lesser General Public
+#     License version 2.1, as published by the Free Software Foundation.
+#
+#     This library is distributed in the hope that it will be useful,
+#     but WITHOUT ANY WARRANTY; without even the implied warranty of
+#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#     Lesser General Public License for more details.
+#
+#     You should have received a copy of the GNU Lesser General Public
+#     License along with this library; if not, write to the Free Software
+#     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+#     MA  02111-1307  USA
+#
+#*************************************************************************
+PRJ=..$/..$/..
+
+PRJNAME=shell
+TARGET=desktopbe
+
+LIBTARGET=NO
+ENABLE_EXCEPTIONS=TRUE
+
+COMP1TYPELIST=$(TARGET)
+COMPRDB=$(SOLARBINDIR)$/types.rdb
+UNOUCROUT=$(OUT)$/inc$/$(TARGET)
+INCPRE=$(UNOUCROUT)
+
+# --- Settings ---
+
+.INCLUDE : settings.mk
+
+UNIXTEXT=$(MISC)/$(TARGET)1-ucd.txt
+
+# no "lib" prefix
+DLLPRE =
+
+# --- Files ---
+
+SLOFILES=\
+	$(SLO)$/desktopbecdef.obj
+
+SHL1NOCHECK=TRUE
+SHL1TARGET=$(TARGET)1.uno   
+SHL1OBJS=$(SLOFILES)
+SHL1DEF=$(MISC)$/$(SHL1TARGET).def
+
+SHL1IMPLIB=i$(SHL1TARGET)
+SHL1STDLIBS=    \
+        $(CPPUHELPERLIB) \
+        $(CPPULIB) \
+        $(SALLIB)
+        
+SHL1VERSIONMAP=exports.map
+SHL1DEF=$(MISC)$/$(SHL1TARGET).def
+DEF1NAME=$(SHL1TARGET)
+
+# --- Targets ---
+
+.INCLUDE : target.mk
