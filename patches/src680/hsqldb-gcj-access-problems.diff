--- hsqldb/hsqldb_1_8_0.orig	2005-07-19 17:51:35.000000000 +0200
+++ hsqldb/hsqldb_1_8_0	2005-07-19 20:32:56.000000000 +0200
@@ -1,26 +1,21381 @@
-*** misc/build/hsqldb/build/build.xml	2005-06-26 19:20:30.000000000 +0200
---- misc/build/hsqldb/build/build.xml.patched	2005-07-16 17:00:34.000000000 +0200
+--- misc/build/hsqldb/build/build.xml.ark	2005-07-19 20:31:53.000000000 +0200
++++ misc/build/hsqldb/build/build.xml	2005-07-19 20:32:09.000000000 +0200
+@@ -16,13 +16,8 @@
+    <property file='build/build.properties'/>
+    <property name="hsqldb.version" value="1.8.0"/>
+ 
+-   <tstamp>
+-       <format property="_tmpstamp" pattern="yyyy/MM/dd-hh:mm:ss"
+-               locale="en"/>
+-   </tstamp>
+-
+-   <property name="build.label" value="private-${_tmpstamp}"/>
+-   <property name="build.vendor" value="${user.name}"/>
++   <property name="build.label" value="replace-me"/>
++   <property name="build.vendor" value="OpenOffice.org"/>
+    <property name="hsqldb.title" value="HSQLDB"/>
+    <property name="hsqldb.vendor" value="The HSQLDB Development Group"/>
+    <property name="src" value="${basedir}/src"/>
+diff -cr misc/hsqldb/src/org/hsqldb/BaseMemoryNode.java misc/build/hsqldb/src/org/hsqldb/BaseMemoryNode.java
+*** misc/hsqldb/src/org/hsqldb/BaseMemoryNode.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/BaseMemoryNode.java	2005-06-30 03:53:38.000000000 -0400
 ***************
-*** 16,28 ****
-     <property file='build/build.properties'/>
-     <property name="hsqldb.version" value="1.8.0"/>
-  
-!    <tstamp>
-!        <format property="_tmpstamp" pattern="yyyy/MM/dd-hh:mm:ss"
-!                locale="en"/>
-!    </tstamp>
-! 
-!    <property name="build.label" value="private-${_tmpstamp}"/>
-!    <property name="build.vendor" value="${user.name}"/>
-     <property name="hsqldb.title" value="HSQLDB"/>
-     <property name="hsqldb.vendor" value="The HSQLDB Development Group"/>
-     <property name="src" value="${basedir}/src"/>
---- 16,23 ----
-     <property file='build/build.properties'/>
-     <property name="hsqldb.version" value="1.8.0"/>
-  
-!    <property name="build.label" value="replace-me"/>
-!    <property name="build.vendor" value="OpenOffice.org"/>
-     <property name="hsqldb.title" value="HSQLDB"/>
-     <property name="hsqldb.vendor" value="The HSQLDB Development Group"/>
-     <property name="src" value="${basedir}/src"/>
+*** 83,91 ****
+   */
+  abstract class BaseMemoryNode extends Node {
+  
+!     protected Node nLeft;
+!     protected Node nRight;
+!     protected Node nParent;
+  
+      void delete() {
+          iBalance = -2;
+--- 83,91 ----
+   */
+  abstract class BaseMemoryNode extends Node {
+  
+!     public Node nLeft;
+!     public Node nRight;
+!     public Node nParent;
+  
+      void delete() {
+          iBalance = -2;
+diff -cr misc/hsqldb/src/org/hsqldb/CachedRow.java misc/build/hsqldb/src/org/hsqldb/CachedRow.java
+*** misc/hsqldb/src/org/hsqldb/CachedRow.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/CachedRow.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 99,111 ****
+      static final int NO_POS = -1;
+  
+      //
+!     protected Table tTable;
+      int             storageSize;
+  
+      /**
+       *  Flag indicating unwritten data.
+       */
+!     protected boolean hasDataChanged;
+  
+      /**
+       *  Flag indicating Node data has changed.
+--- 99,111 ----
+      static final int NO_POS = -1;
+  
+      //
+!     public Table tTable;
+      int             storageSize;
+  
+      /**
+       *  Flag indicating unwritten data.
+       */
+!     public boolean hasDataChanged;
+  
+      /**
+       *  Flag indicating Node data has changed.
+***************
+*** 173,179 ****
+          oData = in.readData(tTable.getColumnTypes());
+      }
+  
+!     private void readRowInfo(RowInputInterface in)
+      throws IOException, HsqlException {
+  
+          // for use when additional transaction info is attached to rows
+--- 173,179 ----
+          oData = in.readData(tTable.getColumnTypes());
+      }
+  
+!     public void readRowInfo(RowInputInterface in)
+      throws IOException, HsqlException {
+  
+          // for use when additional transaction info is attached to rows
+***************
+*** 316,322 ****
+          } catch (IOException e) {}
+      }
+  
+!     private void writeRowInfo(RowOutputInterface out) {
+  
+          // for use when additional transaction info is attached to rows
+      }
+--- 316,322 ----
+          } catch (IOException e) {}
+      }
+  
+!     public void writeRowInfo(RowOutputInterface out) {
+  
+          // for use when additional transaction info is attached to rows
+      }
+***************
+*** 345,351 ****
+       * @throws IOException
+       * @throws HsqlException
+       */
+!     private void writeNodes(RowOutputInterface out) throws IOException {
+  
+          out.writeSize(storageSize);
+  
+--- 345,351 ----
+       * @throws IOException
+       * @throws HsqlException
+       */
+!     public void writeNodes(RowOutputInterface out) throws IOException {
+  
+          out.writeSize(storageSize);
+  
+diff -cr misc/hsqldb/src/org/hsqldb/Column.java misc/build/hsqldb/src/org/hsqldb/Column.java
+*** misc/hsqldb/src/org/hsqldb/Column.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Column.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 125,137 ****
+      // most variables are final but not declared so because of a bug in
+      // JDK 1.1.8 compiler
+      public HsqlName         columnName;
+!     private int             colType;
+!     private int             colSize;
+!     private int             colScale;
+!     private boolean         isNullable;
+!     private boolean         isIdentity;
+!     private boolean         isPrimaryKey;
+!     private Expression      defaultExpression;
+      long                    identityStart;
+      long                    identityIncrement;
+      static final BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);
+--- 125,137 ----
+      // most variables are final but not declared so because of a bug in
+      // JDK 1.1.8 compiler
+      public HsqlName         columnName;
+!     public int             colType;
+!     public int             colSize;
+!     public int             colScale;
+!     public boolean         isNullable;
+!     public boolean         isIdentity;
+!     public boolean         isPrimaryKey;
+!     public Expression      defaultExpression;
+      long                    identityStart;
+      long                    identityIncrement;
+      static final BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);
+***************
+*** 186,192 ****
+          }
+      }
+  
+!     private Column() {}
+  
+      /**
+       * Used for primary key changes.
+--- 186,192 ----
+          }
+      }
+  
+!     public Column() {}
+  
+      /**
+       * Used for primary key changes.
+***************
+*** 1206,1212 ****
+       * @return
+       * @throws  HsqlException
+       */
+!     private static Object convertString(String s,
+                                          int type) throws HsqlException {
+  
+          switch (type) {
+--- 1206,1212 ----
+       * @return
+       * @throws  HsqlException
+       */
+!     public static Object convertString(String s,
+                                          int type) throws HsqlException {
+  
+          switch (type) {
+diff -cr misc/hsqldb/src/org/hsqldb/CompiledStatementExecutor.java misc/build/hsqldb/src/org/hsqldb/CompiledStatementExecutor.java
+*** misc/hsqldb/src/org/hsqldb/CompiledStatementExecutor.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/CompiledStatementExecutor.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 54,62 ****
+   */
+  final class CompiledStatementExecutor {
+  
+!     private Session session;
+!     private Result  updateResult;
+!     private Result  emptyResult;
+  
+      /**
+       * Creates a new instance of CompiledStatementExecutor.
+--- 54,62 ----
+   */
+  final class CompiledStatementExecutor {
+  
+!     public Session session;
+!     public Result  updateResult;
+!     public Result  emptyResult;
+  
+      /**
+       * Creates a new instance of CompiledStatementExecutor.
+***************
+*** 111,117 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     private Result executeImpl(CompiledStatement cs) throws HsqlException {
+  
+          switch (cs.type) {
+  
+--- 111,117 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     public Result executeImpl(CompiledStatement cs) throws HsqlException {
+  
+          switch (cs.type) {
+  
+***************
+*** 150,156 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     private Result executeCallStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Expression e = cs.expression;          // representing CALL
+--- 150,156 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     public Result executeCallStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Expression e = cs.expression;          // representing CALL
+***************
+*** 187,193 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     private Result executeDeleteStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Table       table  = cs.targetTable;
+--- 187,193 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     public Result executeDeleteStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Table       table  = cs.targetTable;
+***************
+*** 222,228 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     private Result executeInsertSelectStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Table     t   = cs.targetTable;
+--- 222,228 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     public Result executeInsertSelectStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Table     t   = cs.targetTable;
+***************
+*** 276,282 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     private Result executeInsertValuesStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Table        t    = cs.targetTable;
+--- 276,282 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     public Result executeInsertValuesStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Table        t    = cs.targetTable;
+***************
+*** 309,315 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     private Result executeSelectStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Select select = cs.select;
+--- 309,315 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     public Result executeSelectStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Select select = cs.select;
+***************
+*** 350,356 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     private Result executeUpdateStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Table       table  = cs.targetTable;
+--- 350,356 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     public Result executeUpdateStatement(CompiledStatement cs)
+      throws HsqlException {
+  
+          Table       table  = cs.targetTable;
+***************
+*** 412,418 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     private Result executeDDLStatement(CompiledStatement cs)
+      throws HsqlException {
+          return session.sqlExecuteDirectNoPreChecks(cs.sql);
+      }
+--- 412,418 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the result of executing the statement
+       */
+!     public Result executeDDLStatement(CompiledStatement cs)
+      throws HsqlException {
+          return session.sqlExecuteDirectNoPreChecks(cs.sql);
+      }
+diff -cr misc/hsqldb/src/org/hsqldb/CompiledStatement.java misc/build/hsqldb/src/org/hsqldb/CompiledStatement.java
+*** misc/hsqldb/src/org/hsqldb/CompiledStatement.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/CompiledStatement.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 345,351 ****
+      /**
+       * For parameters in INSERT_VALUES and INSERT_SELECT lists
+       */
+!     private void resolveInsertParameterTypes() {
+  
+          for (int i = 0; i < select.iResultLen; i++) {
+              Expression colexpr = select.exprColumns[i];
+--- 345,351 ----
+      /**
+       * For parameters in INSERT_VALUES and INSERT_SELECT lists
+       */
+!     public void resolveInsertParameterTypes() {
+  
+          for (int i = 0; i < select.iResultLen; i++) {
+              Expression colexpr = select.exprColumns[i];
+***************
+*** 358,364 ****
+          }
+      }
+  
+!     private void setParameters(Expression[] params) {
+  
+          this.parameters = params;
+  
+--- 358,364 ----
+          }
+      }
+  
+!     public void setParameters(Expression[] params) {
+  
+          this.parameters = params;
+  
+***************
+*** 418,424 ****
+          subqueries   = null;
+      }
+  
+!     private static final Result updateCountResult =
+          new Result(ResultConstants.UPDATECOUNT);
+  
+      Result describeResult() {
+--- 418,424 ----
+          subqueries   = null;
+      }
+  
+!     public static final Result updateCountResult =
+          new Result(ResultConstants.UPDATECOUNT);
+  
+      Result describeResult() {
+***************
+*** 552,558 ****
+       * @throws Exception if a database access or io error occurs
+       * @return the String representation of this object
+       */
+!     private String describeImpl(Session session) throws Exception {
+  
+          StringBuffer sb;
+  
+--- 552,558 ----
+       * @throws Exception if a database access or io error occurs
+       * @return the String representation of this object
+       */
+!     public String describeImpl(Session session) throws Exception {
+  
+          StringBuffer sb;
+  
+***************
+*** 626,632 ****
+          }
+      }
+  
+!     private StringBuffer appendSubqueries(StringBuffer sb) {
+  
+          sb.append("SUBQUERIES[");
+  
+--- 626,632 ----
+          }
+      }
+  
+!     public StringBuffer appendSubqueries(StringBuffer sb) {
+  
+          sb.append("SUBQUERIES[");
+  
+***************
+*** 644,657 ****
+          return sb;
+      }
+  
+!     private StringBuffer appendTable(StringBuffer sb) {
+  
+          sb.append("TABLE[").append(targetTable.getName().name).append(']');
+  
+          return sb;
+      }
+  
+!     private StringBuffer appendColumns(StringBuffer sb) {
+  
+          sb.append("COLUMNS=[");
+  
+--- 644,657 ----
+          return sb;
+      }
+  
+!     public StringBuffer appendTable(StringBuffer sb) {
+  
+          sb.append("TABLE[").append(targetTable.getName().name).append(']');
+  
+          return sb;
+      }
+  
+!     public StringBuffer appendColumns(StringBuffer sb) {
+  
+          sb.append("COLUMNS=[");
+  
+***************
+*** 667,673 ****
+          return sb;
+      }
+  
+!     private StringBuffer appendParms(StringBuffer sb) {
+  
+          sb.append("PARAMETERS=[");
+  
+--- 667,673 ----
+          return sb;
+      }
+  
+!     public StringBuffer appendParms(StringBuffer sb) {
+  
+          sb.append("PARAMETERS=[");
+  
+***************
+*** 681,687 ****
+          return sb;
+      }
+  
+!     private StringBuffer appendCondition(Session session, StringBuffer sb) {
+  
+          return condition == null ? sb.append("CONDITION[]\n")
+                                   : sb.append("CONDITION[").append(
+--- 681,687 ----
+          return sb;
+      }
+  
+!     public StringBuffer appendCondition(Session session, StringBuffer sb) {
+  
+          return condition == null ? sb.append("CONDITION[]\n")
+                                   : sb.append("CONDITION[").append(
+diff -cr misc/hsqldb/src/org/hsqldb/CompiledStatementManager.java misc/build/hsqldb/src/org/hsqldb/CompiledStatementManager.java
+*** misc/hsqldb/src/org/hsqldb/CompiledStatementManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/CompiledStatementManager.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 81,108 ****
+       * The Database for which this object is managing
+       * CompiledStatement objects.
+       */
+!     private Database database;
+  
+      /** Map:  SQL String => Compiled Statement id (int) */
+!     private IntKeyHashMap schemaMap;
+  
+      /** Map: Compiled Statement id (int) => SQL String */
+!     private IntKeyHashMap sqlLookup;
+  
+      /** Map: Compiled statment id (int) => CompiledStatement object. */
+!     private IntKeyHashMap csidMap;
+  
+      /** Map: Session id (int) => Map: compiled statement id (int) => use count in session; */
+!     private IntKeyHashMap sessionMap;
+  
+      /** Map: Compiled statment id (int) => total use count (all sessions) */
+!     private IntKeyIntValueHashMap useMap;
+  
+      /**
+       * Monotonically increasing counter used to assign unique ids to compiled
+       * statements.
+       */
+!     private int next_cs_id;
+  
+      /**
+       * Constructs a new instance of <code>CompiledStatementManager</code>.
+--- 81,108 ----
+       * The Database for which this object is managing
+       * CompiledStatement objects.
+       */
+!     public Database database;
+  
+      /** Map:  SQL String => Compiled Statement id (int) */
+!     public IntKeyHashMap schemaMap;
+  
+      /** Map: Compiled Statement id (int) => SQL String */
+!     public IntKeyHashMap sqlLookup;
+  
+      /** Map: Compiled statment id (int) => CompiledStatement object. */
+!     public IntKeyHashMap csidMap;
+  
+      /** Map: Session id (int) => Map: compiled statement id (int) => use count in session; */
+!     public IntKeyHashMap sessionMap;
+  
+      /** Map: Compiled statment id (int) => total use count (all sessions) */
+!     public IntKeyIntValueHashMap useMap;
+  
+      /**
+       * Monotonically increasing counter used to assign unique ids to compiled
+       * statements.
+       */
+!     public int next_cs_id;
+  
+      /**
+       * Constructs a new instance of <code>CompiledStatementManager</code>.
+***************
+*** 156,162 ****
+       *
+       * @return the next compiled statement identifier in the sequence.
+       */
+!     private int nextID() {
+  
+          next_cs_id++;
+  
+--- 156,162 ----
+       *
+       * @return the next compiled statement identifier in the sequence.
+       */
+!     public int nextID() {
+  
+          next_cs_id++;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/Constraint.java misc/build/hsqldb/src/org/hsqldb/Constraint.java
+*** misc/hsqldb/src/org/hsqldb/Constraint.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Constraint.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 193,199 ****
+          core.updateAction = updateAction;
+      }
+  
+!     private Constraint() {}
+  
+      /**
+       * Returns the HsqlName.
+--- 193,199 ----
+          core.updateAction = updateAction;
+      }
+  
+!     public Constraint() {}
+  
+      /**
+       * Returns the HsqlName.
+***************
+*** 205,211 ****
+      /**
+       * Changes constraint name.
+       */
+!     private void setName(String name, boolean isquoted) throws HsqlException {
+          constName.rename(name, isquoted);
+      }
+  
+--- 205,211 ----
+      /**
+       * Changes constraint name.
+       */
+!     public void setName(String name, boolean isquoted) throws HsqlException {
+          constName.rename(name, isquoted);
+      }
+  
+***************
+*** 573,579 ****
+       * table. Also returns true if any column covered by the foreign key
+       * constraint has a null value.
+       */
+!     private static boolean hasReferencedRow(Session session,
+              Object[] rowdata, int[] rowColArray,
+              Index mainIndex) throws HsqlException {
+  
+--- 573,579 ----
+       * table. Also returns true if any column covered by the foreign key
+       * constraint has a null value.
+       */
+!     public static boolean hasReferencedRow(Session session,
+              Object[] rowdata, int[] rowColArray,
+              Index mainIndex) throws HsqlException {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/DatabaseCommandInterpreter.java misc/build/hsqldb/src/org/hsqldb/DatabaseCommandInterpreter.java
+*** misc/hsqldb/src/org/hsqldb/DatabaseCommandInterpreter.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DatabaseCommandInterpreter.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 111,119 ****
+  // fredt@users 20041209 - patch by tytar@users to set default table type
+  class DatabaseCommandInterpreter {
+  
+!     private Tokenizer tokenizer = new Tokenizer();
+!     private Database  database;
+!     private Session   session;
+  
+      /**
+       * Constructs a new DatabaseCommandInterpreter for the given Session
+--- 111,119 ----
+  // fredt@users 20041209 - patch by tytar@users to set default table type
+  class DatabaseCommandInterpreter {
+  
+!     public Tokenizer tokenizer = new Tokenizer();
+!     public Database  database;
+!     public Session   session;
+  
+      /**
+       * Constructs a new DatabaseCommandInterpreter for the given Session
+***************
+*** 191,197 ****
+                                : result;
+      }
+  
+!     private Result executePart(int cmd, String token) throws Throwable {
+  
+          Result result   = Session.emptyUpdateCount;
+          int    brackets = 0;
+--- 191,197 ----
+                                : result;
+      }
+  
+!     public Result executePart(int cmd, String token) throws Throwable {
+  
+          Result result   = Session.emptyUpdateCount;
+          int    brackets = 0;
+***************
+*** 387,393 ****
+       * @throws IOException
+       * @throws HsqlException
+       */
+!     private Result processScript() throws IOException, HsqlException {
+  
+          String           token = tokenizer.getString();
+          ScriptWriterText dsw   = null;
+--- 387,393 ----
+       * @throws IOException
+       * @throws HsqlException
+       */
+!     public Result processScript() throws IOException, HsqlException {
+  
+          String           token = tokenizer.getString();
+          ScriptWriterText dsw   = null;
+***************
+*** 428,434 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void processCreate() throws HsqlException {
+  
+          boolean unique = false;
+          int     tableType;
+--- 428,434 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void processCreate() throws HsqlException {
+  
+          boolean unique = false;
+          int     tableType;
+***************
+*** 547,553 ****
+       * @return  column index map
+       * @throws  HsqlException if a column is not found or is duplicate
+       */
+!     private int[] processColumnList(Table t) throws HsqlException {
+  
+          HsqlArrayList list;
+          HashSet       set;
+--- 547,553 ----
+       * @return  column index map
+       * @throws  HsqlException if a column is not found or is duplicate
+       */
+!     public int[] processColumnList(Table t) throws HsqlException {
+  
+          HsqlArrayList list;
+          HashSet       set;
+***************
+*** 618,624 ****
+       * @param  unique is unique
+       * @throws  HsqlException
+       */
+!     private void addIndexOn(Table t, String indexName,
+                              boolean indexNameQuoted,
+                              boolean unique) throws HsqlException {
+  
+--- 618,624 ----
+       * @param  unique is unique
+       * @throws  HsqlException
+       */
+!     public void addIndexOn(Table t, String indexName,
+                              boolean indexNameQuoted,
+                              boolean unique) throws HsqlException {
+  
+***************
+*** 648,654 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processCreateTrigger() throws HsqlException {
+  
+          Table      t;
+          boolean    isForEach;
+--- 648,654 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processCreateTrigger() throws HsqlException {
+  
+          Table      t;
+          boolean    isForEach;
+***************
+*** 769,775 ****
+  // --
+      }
+  
+!     private Column processCreateColumn() throws HsqlException {
+  
+          String   token    = tokenizer.getSimpleName();
+          boolean  isQuoted = tokenizer.wasQuotedIdentifier();
+--- 769,775 ----
+  // --
+      }
+  
+!     public Column processCreateColumn() throws HsqlException {
+  
+          String   token    = tokenizer.getSimpleName();
+          boolean  isQuoted = tokenizer.wasQuotedIdentifier();
+***************
+*** 786,792 ****
+       *  @return a Column object with indicated attributes
+       *  @throws  HsqlException
+       */
+!     private Column processCreateColumn(HsqlName hsqlName)
+      throws HsqlException {
+  
+          boolean    isIdentity        = false;
+--- 786,792 ----
+       *  @return a Column object with indicated attributes
+       *  @throws  HsqlException
+       */
+!     public Column processCreateColumn(HsqlName hsqlName)
+      throws HsqlException {
+  
+          boolean    isIdentity        = false;
+***************
+*** 951,957 ****
+       * @throws HsqlException
+       * @return new Expression
+       */
+!     private Expression processCreateDefaultExpression(int type, int length,
+              int scale) throws HsqlException {
+  
+          if (type == Types.OTHER) {
+--- 951,957 ----
+       * @throws HsqlException
+       * @return new Expression
+       */
+!     public Expression processCreateDefaultExpression(int type, int length,
+              int scale) throws HsqlException {
+  
+          if (type == Types.OTHER) {
+***************
+*** 1019,1025 ****
+       * @throws HsqlException
+       * @return list of constraints
+       */
+!     private HsqlArrayList processCreateConstraints(Table t,
+              boolean constraint, int[] primarykeycolumn) throws HsqlException {
+  
+          String        token;
+--- 1019,1025 ----
+       * @throws HsqlException
+       * @return list of constraints
+       */
+!     public HsqlArrayList processCreateConstraints(Table t,
+              boolean constraint, int[] primarykeycolumn) throws HsqlException {
+  
+          String        token;
+***************
+*** 1173,1179 ****
+       * @param c check constraint
+       * @throws HsqlException
+       */
+!     private void processCreateCheckConstraintCondition(Constraint c)
+      throws HsqlException {
+  
+          tokenizer.getThis(Token.T_OPENBRACKET);
+--- 1173,1179 ----
+       * @param c check constraint
+       * @throws HsqlException
+       */
+!     public void processCreateCheckConstraintCondition(Constraint c)
+      throws HsqlException {
+  
+          tokenizer.getThis(Token.T_OPENBRACKET);
+***************
+*** 1192,1198 ****
+       * @param type Description of the Parameter
+       * @throws HsqlException
+       */
+!     private void processCreateTable(int type) throws HsqlException {
+  
+          String token = tokenizer.getName();
+          HsqlName schemaname =
+--- 1192,1198 ----
+       * @param type Description of the Parameter
+       * @throws HsqlException
+       */
+!     public void processCreateTable(int type) throws HsqlException {
+  
+          String token = tokenizer.getName();
+          HsqlName schemaname =
+***************
+*** 1348,1354 ****
+       * @throws HsqlException
+       * @return constraint
+       */
+!     private Constraint processCreateFK(Table t,
+                                         HsqlName cname) throws HsqlException {
+  
+          int[]  localcol;
+--- 1348,1354 ----
+       * @throws HsqlException
+       * @return constraint
+       */
+!     public Constraint processCreateFK(Table t,
+                                         HsqlName cname) throws HsqlException {
+  
+          int[]  localcol;
+***************
+*** 1490,1496 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processCreateView() throws HsqlException {
+  
+          String name = tokenizer.getName();
+          HsqlName schemaname =
+--- 1490,1496 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processCreateView() throws HsqlException {
+  
+          String name = tokenizer.getName();
+          HsqlName schemaname =
+***************
+*** 1551,1557 ****
+       * @param t table
+       * @throws HsqlException
+       */
+!     private void processAlterTableRename(Table t) throws HsqlException {
+  
+          String  name   = t.getName().name;
+          String  schema = t.getSchemaName();
+--- 1551,1557 ----
+       * @param t table
+       * @throws HsqlException
+       */
+!     public void processAlterTableRename(Table t) throws HsqlException {
+  
+          String  name   = t.getName().name;
+          String  schema = t.getSchemaName();
+***************
+*** 1598,1604 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processAlter() throws HsqlException {
+  
+          String token;
+  
+--- 1598,1604 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processAlter() throws HsqlException {
+  
+          String token;
+  
+***************
+*** 1646,1652 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processAlterTable() throws HsqlException {
+  
+          String tableName = tokenizer.getName();
+          String schema =
+--- 1646,1652 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processAlterTable() throws HsqlException {
+  
+          String tableName = tokenizer.getName();
+          String schema =
+***************
+*** 1807,1813 ****
+       * @param t table
+       * @throws HsqlException
+       */
+!     private void processAlterColumn(Table t) throws HsqlException {
+  
+          String columnName  = tokenizer.getSimpleName();
+          int    columnIndex = t.getColumnNr(columnName);
+--- 1807,1813 ----
+       * @param t table
+       * @throws HsqlException
+       */
+!     public void processAlterColumn(Table t) throws HsqlException {
+  
+          String columnName  = tokenizer.getSimpleName();
+          int    columnIndex = t.getColumnNr(columnName);
+***************
+*** 1862,1868 ****
+          }
+      }
+  
+!     private void processAlterColumnType(Table table,
+                                          Column oldCol) throws HsqlException {
+  
+          Column     newCol = processCreateColumn(oldCol.columnName);
+--- 1862,1868 ----
+          }
+      }
+  
+!     public void processAlterColumnType(Table table,
+                                          Column oldCol) throws HsqlException {
+  
+          Column     newCol = processCreateColumn(oldCol.columnName);
+***************
+*** 1877,1883 ****
+       * @param column column
+       * @throws HsqlException
+       */
+!     private void processAlterColumnRename(Table t,
+                                            Column column)
+                                            throws HsqlException {
+  
+--- 1877,1883 ----
+       * @param column column
+       * @throws HsqlException
+       */
+!     public void processAlterColumnRename(Table t,
+                                            Column column)
+                                            throws HsqlException {
+  
+***************
+*** 1898,1910 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processAlterIndex() throws HsqlException {
+  
+          // only the one supported operation, so far
+          processAlterIndexRename();
+      }
+  
+!     private void processAlterSchema() throws HsqlException {
+  
+          // only the one supported operation, so far
+          processAlterSequenceRename();
+--- 1898,1910 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processAlterIndex() throws HsqlException {
+  
+          // only the one supported operation, so far
+          processAlterIndexRename();
+      }
+  
+!     public void processAlterSchema() throws HsqlException {
+  
+          // only the one supported operation, so far
+          processAlterSequenceRename();
+***************
+*** 1915,1921 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void processDrop() throws HsqlException {
+  
+          String  token;
+          boolean isview;
+--- 1915,1921 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void processDrop() throws HsqlException {
+  
+          String  token;
+          boolean isview;
+***************
+*** 1981,1987 ****
+       * @param grant true if grant, false if revoke
+       * @throws HsqlException
+       */
+!     private void processGrantOrRevoke(boolean grant) throws HsqlException {
+  
+          int    right;
+          Object accessKey;
+--- 1981,1987 ----
+       * @param grant true if grant, false if revoke
+       * @throws HsqlException
+       */
+!     public void processGrantOrRevoke(boolean grant) throws HsqlException {
+  
+          int    right;
+          Object accessKey;
+***************
+*** 2048,2054 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processConnect() throws HsqlException {
+  
+          String userName;
+          String password;
+--- 2048,2054 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processConnect() throws HsqlException {
+  
+          String userName;
+          String password;
+***************
+*** 2084,2090 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void processSet() throws HsqlException {
+  
+          String token;
+  
+--- 2084,2090 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void processSet() throws HsqlException {
+  
+          String token;
+  
+***************
+*** 2343,2349 ****
+       * @return   true if next token is "TRUE"; false if next token is "FALSE"
+       * @throws  HsqlException if the next token is neither "TRUE" or "FALSE"
+       */
+!     private boolean processTrueOrFalse() throws HsqlException {
+  
+          String sToken = tokenizer.getSimpleToken();
+  
+--- 2343,2349 ----
+       * @return   true if next token is "TRUE"; false if next token is "FALSE"
+       * @throws  HsqlException if the next token is neither "TRUE" or "FALSE"
+       */
+!     public boolean processTrueOrFalse() throws HsqlException {
+  
+          String sToken = tokenizer.getSimpleToken();
+  
+***************
+*** 2361,2367 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void processCommit() throws HsqlException {
+          tokenizer.isGetThis(Token.T_WORK);
+          session.commit();
+      }
+--- 2361,2367 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void processCommit() throws HsqlException {
+          tokenizer.isGetThis(Token.T_WORK);
+          session.commit();
+      }
+***************
+*** 2371,2377 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void processRollback() throws HsqlException {
+  
+          String  token;
+          boolean toSavepoint;
+--- 2371,2377 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void processRollback() throws HsqlException {
+  
+          String  token;
+          boolean toSavepoint;
+***************
+*** 2403,2409 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void processSavepoint() throws HsqlException {
+  
+          String token;
+  
+--- 2403,2409 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void processSavepoint() throws HsqlException {
+  
+          String token;
+  
+***************
+*** 2417,2423 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void processShutdown() throws HsqlException {
+  
+          int    closemode;
+          String token;
+--- 2417,2423 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void processShutdown() throws HsqlException {
+  
+          int    closemode;
+          String token;
+***************
+*** 2452,2458 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void processCheckpoint() throws HsqlException {
+  
+          boolean defrag;
+          String  token;
+--- 2452,2458 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void processCheckpoint() throws HsqlException {
+  
+          boolean defrag;
+          String  token;
+***************
+*** 2476,2482 ****
+      }
+  
+  // --------------------- new methods / simplifications ------------------------
+!     private HsqlName newIndexHsqlName(String name,
+                                        boolean isQuoted) throws HsqlException {
+  
+          return HsqlName.isReservedIndexName(name)
+--- 2476,2482 ----
+      }
+  
+  // --------------------- new methods / simplifications ------------------------
+!     public HsqlName newIndexHsqlName(String name,
+                                        boolean isQuoted) throws HsqlException {
+  
+          return HsqlName.isReservedIndexName(name)
+***************
+*** 2484,2490 ****
+                 : database.nameManager.newHsqlName(name, isQuoted);
+      }
+  
+!     private Table newTable(int type, String name, boolean quoted,
+                             HsqlName schema) throws HsqlException {
+  
+          int sid = session.getId();
+--- 2484,2490 ----
+                 : database.nameManager.newHsqlName(name, isQuoted);
+      }
+  
+!     public Table newTable(int type, String name, boolean quoted,
+                             HsqlName schema) throws HsqlException {
+  
+          int sid = session.getId();
+***************
+*** 2514,2520 ****
+       * @throws HsqlException if the operation of adding the Column, c, to
+       *      the table t is not valid
+       */
+!     private void checkAddColumn(Table t, Column c) throws HsqlException {
+  
+          boolean canAdd = true;
+  
+--- 2514,2520 ----
+       * @throws HsqlException if the operation of adding the Column, c, to
+       *      the table t is not valid
+       */
+!     public void checkAddColumn(Table t, Column c) throws HsqlException {
+  
+          boolean canAdd = true;
+  
+***************
+*** 2540,2546 ****
+          }
+      }
+  
+!     private void checkFKColumnDefaults(Table t,
+                                         Constraint tc) throws HsqlException {
+  
+          boolean check = tc.core.updateAction == Constraint.SET_DEFAULT;
+--- 2540,2546 ----
+          }
+      }
+  
+!     public void checkFKColumnDefaults(Table t,
+                                         Constraint tc) throws HsqlException {
+  
+          boolean check = tc.core.updateAction == Constraint.SET_DEFAULT;
+***************
+*** 2565,2571 ****
+          }
+      }
+  
+!     private void processAlterSequence() throws HsqlException {
+  
+          long   start;
+          String name       = tokenizer.getName();
+--- 2565,2571 ----
+          }
+      }
+  
+!     public void processAlterSequence() throws HsqlException {
+  
+          long   start;
+          String name       = tokenizer.getName();
+***************
+*** 2589,2595 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processAlterIndexRename() throws HsqlException {
+  
+          String name = tokenizer.getName();
+          String schema =
+--- 2589,2595 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processAlterIndexRename() throws HsqlException {
+  
+          String name = tokenizer.getName();
+          String schema =
+***************
+*** 2640,2646 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processAlterSequenceRename() throws HsqlException {
+  
+          String name = tokenizer.getSimpleName();
+  
+--- 2640,2646 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processAlterSequenceRename() throws HsqlException {
+  
+          String name = tokenizer.getSimpleName();
+  
+***************
+*** 2658,2664 ****
+       * @param t table
+       * @throws HsqlException
+       */
+!     private void processAlterTableAddColumn(Table t) throws HsqlException {
+  
+          String token;
+          int    colindex = t.getColumnCount();
+--- 2658,2664 ----
+       * @param t table
+       * @throws HsqlException
+       */
+!     public void processAlterTableAddColumn(Table t) throws HsqlException {
+  
+          String token;
+          int    colindex = t.getColumnCount();
+***************
+*** 2686,2692 ****
+       * @param t table
+       * @throws HsqlException
+       */
+!     private void processAlterTableDropColumn(Table t) throws HsqlException {
+  
+          String token;
+          int    colindex;
+--- 2686,2692 ----
+       * @param t table
+       * @throws HsqlException
+       */
+!     public void processAlterTableDropColumn(Table t) throws HsqlException {
+  
+          String token;
+          int    colindex;
+***************
+*** 2707,2713 ****
+       * @param t table
+       * @throws HsqlException
+       */
+!     private void processAlterTableDropConstraint(Table t)
+      throws HsqlException {
+          processAlterTableDropConstraint(t, tokenizer.getName());
+      }
+--- 2707,2713 ----
+       * @param t table
+       * @throws HsqlException
+       */
+!     public void processAlterTableDropConstraint(Table t)
+      throws HsqlException {
+          processAlterTableDropConstraint(t, tokenizer.getName());
+      }
+***************
+*** 2719,2725 ****
+       * @param name
+       * @throws HsqlException
+       */
+!     private void processAlterTableDropConstraint(Table t,
+              String cname) throws HsqlException {
+  
+          session.commit();
+--- 2719,2725 ----
+       * @param name
+       * @throws HsqlException
+       */
+!     public void processAlterTableDropConstraint(Table t,
+              String cname) throws HsqlException {
+  
+          session.commit();
+***************
+*** 2731,2737 ****
+          return;
+      }
+  
+!     private void processCreateAlias() throws HsqlException {
+  
+          String alias;
+          String methodFQN;
+--- 2731,2737 ----
+          return;
+      }
+  
+!     public void processCreateAlias() throws HsqlException {
+  
+          String alias;
+          String methodFQN;
+***************
+*** 2745,2751 ****
+          database.getAliasMap().put(alias, methodFQN);
+      }
+  
+!     private void processCreateIndex(boolean unique) throws HsqlException {
+  
+          Table   t;
+          String  name     = tokenizer.getName();
+--- 2745,2751 ----
+          database.getAliasMap().put(alias, methodFQN);
+      }
+  
+!     public void processCreateIndex(boolean unique) throws HsqlException {
+  
+          Table   t;
+          String  name     = tokenizer.getName();
+***************
+*** 2778,2784 ****
+       * be positive
+       * @throws HsqlException
+       */
+!     private void processCreateSequence() throws HsqlException {
+  
+  /*
+          CREATE SEQUENCE <name>
+--- 2778,2784 ----
+       * be positive
+       * @throws HsqlException
+       */
+!     public void processCreateSequence() throws HsqlException {
+  
+  /*
+          CREATE SEQUENCE <name>
+***************
+*** 2827,2833 ****
+       * CREATE SCHEMA PUBLIC in scripts should pass this, so we do not throw
+       * if this schema is created a second time
+       */
+!     private void processCreateSchema() throws HsqlException {
+  
+          String  name     = tokenizer.getSimpleName();
+          boolean isquoted = tokenizer.wasQuotedIdentifier();
+--- 2827,2833 ----
+       * CREATE SCHEMA PUBLIC in scripts should pass this, so we do not throw
+       * if this schema is created a second time
+       */
+!     public void processCreateSchema() throws HsqlException {
+  
+          String  name     = tokenizer.getSimpleName();
+          boolean isquoted = tokenizer.wasQuotedIdentifier();
+***************
+*** 2852,2858 ****
+          session.loggedSchema = session.currentSchema;
+      }
+  
+!     private void processCreateUser() throws HsqlException {
+  
+          String  name;
+          String  password;
+--- 2852,2858 ----
+          session.loggedSchema = session.currentSchema;
+      }
+  
+!     public void processCreateUser() throws HsqlException {
+  
+          String  name;
+          String  password;
+***************
+*** 2873,2883 ****
+          }
+      }
+  
+!     private void processDisconnect() throws HsqlException {
+          session.close();
+      }
+  
+!     private void processDropTable(boolean isView) throws HsqlException {
+  
+          boolean ifexists = false;
+          boolean cascade  = false;
+--- 2873,2883 ----
+          }
+      }
+  
+!     public void processDisconnect() throws HsqlException {
+          session.close();
+      }
+  
+!     public void processDropTable(boolean isView) throws HsqlException {
+  
+          boolean ifexists = false;
+          boolean cascade  = false;
+***************
+*** 2914,2927 ****
+                                           isView, cascade);
+      }
+  
+!     private void processDropUser() throws HsqlException {
+  
+          session.checkAdmin();
+          session.checkDDLWrite();
+          database.getUserManager().dropUser(getPassword());
+      }
+  
+!     private void processDropSequence() throws HsqlException {
+  
+          boolean ifexists = false;
+  
+--- 2914,2927 ----
+                                           isView, cascade);
+      }
+  
+!     public void processDropUser() throws HsqlException {
+  
+          session.checkAdmin();
+          session.checkDDLWrite();
+          database.getUserManager().dropUser(getPassword());
+      }
+  
+!     public void processDropSequence() throws HsqlException {
+  
+          boolean ifexists = false;
+  
+***************
+*** 2959,2965 ****
+          database.schemaManager.dropSequence(sequence);
+      }
+  
+!     private void processDropTrigger() throws HsqlException {
+  
+          session.checkAdmin();
+          session.checkDDLWrite();
+--- 2959,2965 ----
+          database.schemaManager.dropSequence(sequence);
+      }
+  
+!     public void processDropTrigger() throws HsqlException {
+  
+          session.checkAdmin();
+          session.checkDDLWrite();
+***************
+*** 2971,2977 ****
+          database.schemaManager.dropTrigger(session, triggername, schemaname);
+      }
+  
+!     private void processDropIndex() throws HsqlException {
+  
+          String name = tokenizer.getName();
+          String schema =
+--- 2971,2977 ----
+          database.schemaManager.dropTrigger(session, triggername, schemaname);
+      }
+  
+!     public void processDropIndex() throws HsqlException {
+  
+          String name = tokenizer.getName();
+          String schema =
+***************
+*** 2994,3000 ****
+          database.schemaManager.dropIndex(session, name, schema, ifexists);
+      }
+  
+!     private void processDropSchema() throws HsqlException {
+  
+          String  name    = tokenizer.getSimpleName();
+          boolean cascade = tokenizer.isGetThis(Token.T_CASCADE);
+--- 2994,3000 ----
+          database.schemaManager.dropIndex(session, name, schema, ifexists);
+      }
+  
+!     public void processDropSchema() throws HsqlException {
+  
+          String  name    = tokenizer.getSimpleName();
+          boolean cascade = tokenizer.isGetThis(Token.T_CASCADE);
+***************
+*** 3014,3020 ****
+          }
+      }
+  
+!     private Result processExplainPlan() throws IOException, HsqlException {
+  
+          // PRE:  we assume only one DML or DQL has been submitted
+          //       and simply ignore anything following the first
+--- 3014,3020 ----
+          }
+      }
+  
+!     public Result processExplainPlan() throws IOException, HsqlException {
+  
+          // PRE:  we assume only one DML or DQL has been submitted
+          //       and simply ignore anything following the first
+***************
+*** 3089,3095 ****
+      static final int    oldLibLen = oldLib.length();
+      static final String newLib    = "org.hsqldb.Library.";
+  
+!     private static String upgradeMethodFQN(String fqn) {
+  
+          if (fqn.startsWith(oldLib)) {
+              fqn = newLib + fqn.substring(oldLibLen);
+--- 3089,3095 ----
+      static final int    oldLibLen = oldLib.length();
+      static final String newLib    = "org.hsqldb.Library.";
+  
+!     public static String upgradeMethodFQN(String fqn) {
+  
+          if (fqn.startsWith(oldLib)) {
+              fqn = newLib + fqn.substring(oldLibLen);
+***************
+*** 3163,3169 ****
+       * @param t table
+       * @throws  HsqlException
+       */
+!     private void logTableDDL(Table t) throws HsqlException {
+  
+          StringBuffer tableDDL;
+          String       sourceDDL;
+--- 3163,3169 ----
+       * @param t table
+       * @throws  HsqlException
+       */
+!     public void logTableDDL(Table t) throws HsqlException {
+  
+          StringBuffer tableDDL;
+          String       sourceDDL;
+***************
+*** 3181,3187 ****
+          }
+      }
+  
+!     private void processAlterTableAddUniqueConstraint(Table t,
+              HsqlName n) throws HsqlException {
+  
+          int[] col;
+--- 3181,3187 ----
+          }
+      }
+  
+!     public void processAlterTableAddUniqueConstraint(Table t,
+              HsqlName n) throws HsqlException {
+  
+          int[] col;
+***************
+*** 3199,3205 ****
+          tableWorks.createUniqueConstraint(col, n);
+      }
+  
+!     private void processAlterTableAddForeignKeyConstraint(Table t,
+              HsqlName n) throws HsqlException {
+  
+          Constraint tc;
+--- 3199,3205 ----
+          tableWorks.createUniqueConstraint(col, n);
+      }
+  
+!     public void processAlterTableAddForeignKeyConstraint(Table t,
+              HsqlName n) throws HsqlException {
+  
+          Constraint tc;
+***************
+*** 3222,3228 ****
+                                      tc.core.updateAction);
+      }
+  
+!     private void processAlterTableAddCheckConstraint(Table table,
+              HsqlName name) throws HsqlException {
+  
+          Constraint check;
+--- 3222,3228 ----
+                                      tc.core.updateAction);
+      }
+  
+!     public void processAlterTableAddCheckConstraint(Table table,
+              HsqlName name) throws HsqlException {
+  
+          Constraint check;
+***************
+*** 3242,3248 ****
+          tableWorks.createCheckConstraint(check, name);
+      }
+  
+!     private void processAlterTableAddPrimaryKey(Table t,
+              HsqlName n) throws HsqlException {
+  
+          int[] col;
+--- 3242,3248 ----
+          tableWorks.createCheckConstraint(check, name);
+      }
+  
+!     public void processAlterTableAddPrimaryKey(Table t,
+              HsqlName n) throws HsqlException {
+  
+          int[] col;
+***************
+*** 3256,3262 ****
+          tableWorks.addPrimaryKey(col, n);
+      }
+  
+!     private void processReleaseSavepoint() throws HsqlException {
+  
+          String token;
+  
+--- 3256,3262 ----
+          tableWorks.addPrimaryKey(col, n);
+      }
+  
+!     public void processReleaseSavepoint() throws HsqlException {
+  
+          String token;
+  
+***************
+*** 3267,3273 ****
+          session.releaseSavepoint(token);
+      }
+  
+!     private void processAlterUser() throws HsqlException {
+  
+          String userName;
+          String password;
+--- 3267,3273 ----
+          session.releaseSavepoint(token);
+      }
+  
+!     public void processAlterUser() throws HsqlException {
+  
+          String userName;
+          String password;
+***************
+*** 3288,3294 ****
+          session.setScripting(false);
+      }
+  
+!     private String getUserIdentifier() throws HsqlException {
+  
+          String    token = tokenizer.getString();
+          Tokenizer t     = new Tokenizer(token);
+--- 3288,3294 ----
+          session.setScripting(false);
+      }
+  
+!     public String getUserIdentifier() throws HsqlException {
+  
+          String    token = tokenizer.getString();
+          Tokenizer t     = new Tokenizer(token);
+***************
+*** 3296,3302 ****
+          return t.getSimpleName();
+      }
+  
+!     private String getPassword() throws HsqlException {
+  
+          String token = tokenizer.getString();
+  
+--- 3296,3302 ----
+          return t.getSimpleName();
+      }
+  
+!     public String getPassword() throws HsqlException {
+  
+          String token = tokenizer.getString();
+  
+***************
+*** 3309,3315 ****
+       *
+       * @throws HsqlException
+       */
+!     private void processRoleGrantOrRevoke(boolean grant)
+      throws HsqlException {
+  
+          String         token;
+--- 3309,3315 ----
+       *
+       * @throws HsqlException
+       */
+!     public void processRoleGrantOrRevoke(boolean grant)
+      throws HsqlException {
+  
+          String         token;
+diff -cr misc/hsqldb/src/org/hsqldb/DatabaseInformationFull.java misc/build/hsqldb/src/org/hsqldb/DatabaseInformationFull.java
+*** misc/hsqldb/src/org/hsqldb/DatabaseInformationFull.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DatabaseInformationFull.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 66,72 ****
+  extends org.hsqldb.DatabaseInformationMain {
+  
+      /** Provides SQL function/procedure reporting support. */
+!     protected DIProcedureInfo pi;
+  
+      /**
+       * Constructs a new DatabaseInformationFull instance. <p>
+--- 66,72 ----
+  extends org.hsqldb.DatabaseInformationMain {
+  
+      /** Provides SQL function/procedure reporting support. */
+!     public DIProcedureInfo pi;
+  
+      /**
+       * Constructs a new DatabaseInformationFull instance. <p>
+***************
+*** 88,94 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the system table corresponding to the specified index
+       */
+!     protected Table generateTable(int tableIndex) throws HsqlException {
+  
+          switch (tableIndex) {
+  
+--- 88,94 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the system table corresponding to the specified index
+       */
+!     public Table generateTable(int tableIndex) throws HsqlException {
+  
+          switch (tableIndex) {
+  
+***************
+*** 3248,3254 ****
+       *      in the table
+       *
+       */
+!     protected void addPColRows(Table t, HsqlArrayList l, String cat,
+                                 String schem, String pName, String cName,
+                                 Integer cType, Integer dType, String tName,
+                                 Integer prec, Integer len, Integer scale,
+--- 3248,3254 ----
+       *      in the table
+       *
+       */
+!     public void addPColRows(Table t, HsqlArrayList l, String cat,
+                                 String schem, String pName, String cName,
+                                 Integer cType, Integer dType, String tName,
+                                 Integer prec, Integer len, Integer scale,
+***************
+*** 3348,3354 ****
+       *      in the table
+       *
+       */
+!     protected void addProcRows(Table t, HsqlArrayList l, String cat,
+                                 String schem, String pName, Integer ip,
+                                 Integer op, Integer rs, String remark,
+                                 Integer pType, String origin,
+--- 3348,3354 ----
+       *      in the table
+       *
+       */
+!     public void addProcRows(Table t, HsqlArrayList l, String cat,
+                                 String schem, String pName, Integer ip,
+                                 Integer op, Integer rs, String remark,
+                                 Integer pType, String origin,
+diff -cr misc/hsqldb/src/org/hsqldb/DatabaseInformation.java misc/build/hsqldb/src/org/hsqldb/DatabaseInformation.java
+*** misc/hsqldb/src/org/hsqldb/DatabaseInformation.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DatabaseInformation.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 56,124 ****
+  class DatabaseInformation {
+  
+      // ids for system table names strictly in order of sysTableNames[]
+!     protected static final int SYSTEM_BESTROWIDENTIFIER = 0;
+!     protected static final int SYSTEM_CATALOGS          = 1;
+!     protected static final int SYSTEM_COLUMNPRIVILEGES  = 2;
+!     protected static final int SYSTEM_COLUMNS           = 3;
+!     protected static final int SYSTEM_CROSSREFERENCE    = 4;
+!     protected static final int SYSTEM_INDEXINFO         = 5;
+!     protected static final int SYSTEM_PRIMARYKEYS       = 6;
+!     protected static final int SYSTEM_PROCEDURECOLUMNS  = 7;
+!     protected static final int SYSTEM_PROCEDURES        = 8;
+!     protected static final int SYSTEM_SCHEMAS           = 9;
+!     protected static final int SYSTEM_SUPERTABLES       = 10;
+!     protected static final int SYSTEM_SUPERTYPES        = 11;
+!     protected static final int SYSTEM_TABLEPRIVILEGES   = 12;
+!     protected static final int SYSTEM_TABLES            = 13;
+!     protected static final int SYSTEM_TABLETYPES        = 14;
+!     protected static final int SYSTEM_TYPEINFO          = 15;
+!     protected static final int SYSTEM_UDTATTRIBUTES     = 16;
+!     protected static final int SYSTEM_UDTS              = 17;
+!     protected static final int SYSTEM_USERS             = 18;
+!     protected static final int SYSTEM_VERSIONCOLUMNS    = 19;
+  
+      // HSQLDB-specific
+!     protected static final int SYSTEM_ALIASES         = 20;
+!     protected static final int SYSTEM_BYTECODE        = 21;
+!     protected static final int SYSTEM_CACHEINFO       = 22;
+!     protected static final int SYSTEM_CLASSPRIVILEGES = 23;
+!     protected static final int SYSTEM_SESSIONINFO     = 24;
+!     protected static final int SYSTEM_PROPERTIES      = 25;
+!     protected static final int SYSTEM_SESSIONS        = 26;
+!     protected static final int SYSTEM_TRIGGERCOLUMNS  = 27;
+!     protected static final int SYSTEM_TRIGGERS        = 28;
+!     protected static final int SYSTEM_ALLTYPEINFO     = 29;
+  
+  // boucherb@users 20030305 - brought in line with SQL 200n
+!     protected static final int SYSTEM_VIEWS = 30;
+  
+  // boucherb@users 20030403 - isolated and improved text table reporting
+!     protected static final int SYSTEM_TEXTTABLES = 31;
+  
+  // boucherb@users 20040107 - metadata support for sequences
+!     protected static final int SYSTEM_SEQUENCES        = 32;
+!     protected static final int SYSTEM_USAGE_PRIVILEGES = 33;
+  
+  // boucherb@users 20040107 - metadata support for constraints
+!     protected static final int SYSTEM_CHECK_CONSTRAINTS = 34;
+!     protected static final int SYSTEM_TABLE_CONSTRAINTS = 35;
+  
+  // boucherb@users 20040107 - metadata support for view usage breakdown- SQL 200n
+!     protected static final int SYSTEM_CHECK_COLUMN_USAGE  = 36;
+!     protected static final int SYSTEM_CHECK_ROUTINE_USAGE = 37;
+!     protected static final int SYSTEM_CHECK_TABLE_USAGE   = 38;
+!     protected static final int SYSTEM_VIEW_COLUMN_USAGE   = 39;
+!     protected static final int SYSTEM_VIEW_TABLE_USAGE    = 40;
+!     protected static final int SYSTEM_VIEW_ROUTINE_USAGE  = 41;
+  
+  // boucherb@users 20050514 - further SQL 200n metdata support
+!     protected static final int SYSTEM_AUTHORIZATIONS                 = 42;
+!     protected static final int SYSTEM_COLLATIONS                     = 43;
+!     protected static final int SYSTEM_ROLE_AUTHORIZATION_DESCRIPTORS = 44;
+!     protected static final int SYSTEM_SCHEMATA                       = 45;
+  
+      /** system table names strictly in order of their ids */
+!     protected static final String[] sysTableNames = {
+          "SYSTEM_BESTROWIDENTIFIER",                 //
+          "SYSTEM_CATALOGS",                          //
+          "SYSTEM_COLUMNPRIVILEGES",                  //
+--- 56,124 ----
+  class DatabaseInformation {
+  
+      // ids for system table names strictly in order of sysTableNames[]
+!     public static final int SYSTEM_BESTROWIDENTIFIER = 0;
+!     public static final int SYSTEM_CATALOGS          = 1;
+!     public static final int SYSTEM_COLUMNPRIVILEGES  = 2;
+!     public static final int SYSTEM_COLUMNS           = 3;
+!     public static final int SYSTEM_CROSSREFERENCE    = 4;
+!     public static final int SYSTEM_INDEXINFO         = 5;
+!     public static final int SYSTEM_PRIMARYKEYS       = 6;
+!     public static final int SYSTEM_PROCEDURECOLUMNS  = 7;
+!     public static final int SYSTEM_PROCEDURES        = 8;
+!     public static final int SYSTEM_SCHEMAS           = 9;
+!     public static final int SYSTEM_SUPERTABLES       = 10;
+!     public static final int SYSTEM_SUPERTYPES        = 11;
+!     public static final int SYSTEM_TABLEPRIVILEGES   = 12;
+!     public static final int SYSTEM_TABLES            = 13;
+!     public static final int SYSTEM_TABLETYPES        = 14;
+!     public static final int SYSTEM_TYPEINFO          = 15;
+!     public static final int SYSTEM_UDTATTRIBUTES     = 16;
+!     public static final int SYSTEM_UDTS              = 17;
+!     public static final int SYSTEM_USERS             = 18;
+!     public static final int SYSTEM_VERSIONCOLUMNS    = 19;
+  
+      // HSQLDB-specific
+!     public static final int SYSTEM_ALIASES         = 20;
+!     public static final int SYSTEM_BYTECODE        = 21;
+!     public static final int SYSTEM_CACHEINFO       = 22;
+!     public static final int SYSTEM_CLASSPRIVILEGES = 23;
+!     public static final int SYSTEM_SESSIONINFO     = 24;
+!     public static final int SYSTEM_PROPERTIES      = 25;
+!     public static final int SYSTEM_SESSIONS        = 26;
+!     public static final int SYSTEM_TRIGGERCOLUMNS  = 27;
+!     public static final int SYSTEM_TRIGGERS        = 28;
+!     public static final int SYSTEM_ALLTYPEINFO     = 29;
+  
+  // boucherb@users 20030305 - brought in line with SQL 200n
+!     public static final int SYSTEM_VIEWS = 30;
+  
+  // boucherb@users 20030403 - isolated and improved text table reporting
+!     public static final int SYSTEM_TEXTTABLES = 31;
+  
+  // boucherb@users 20040107 - metadata support for sequences
+!     public static final int SYSTEM_SEQUENCES        = 32;
+!     public static final int SYSTEM_USAGE_PRIVILEGES = 33;
+  
+  // boucherb@users 20040107 - metadata support for constraints
+!     public static final int SYSTEM_CHECK_CONSTRAINTS = 34;
+!     public static final int SYSTEM_TABLE_CONSTRAINTS = 35;
+  
+  // boucherb@users 20040107 - metadata support for view usage breakdown- SQL 200n
+!     public static final int SYSTEM_CHECK_COLUMN_USAGE  = 36;
+!     public static final int SYSTEM_CHECK_ROUTINE_USAGE = 37;
+!     public static final int SYSTEM_CHECK_TABLE_USAGE   = 38;
+!     public static final int SYSTEM_VIEW_COLUMN_USAGE   = 39;
+!     public static final int SYSTEM_VIEW_TABLE_USAGE    = 40;
+!     public static final int SYSTEM_VIEW_ROUTINE_USAGE  = 41;
+  
+  // boucherb@users 20050514 - further SQL 200n metdata support
+!     public static final int SYSTEM_AUTHORIZATIONS                 = 42;
+!     public static final int SYSTEM_COLLATIONS                     = 43;
+!     public static final int SYSTEM_ROLE_AUTHORIZATION_DESCRIPTORS = 44;
+!     public static final int SYSTEM_SCHEMATA                       = 45;
+  
+      /** system table names strictly in order of their ids */
+!     public static final String[] sysTableNames = {
+          "SYSTEM_BESTROWIDENTIFIER",                 //
+          "SYSTEM_CATALOGS",                          //
+          "SYSTEM_COLUMNPRIVILEGES",                  //
+***************
+*** 266,272 ****
+      };
+  
+      /** Map: table name => table id */
+!     protected static final IntValueHashMap sysTableNamesMap;
+  
+      static {
+          sysTableNamesMap = new IntValueHashMap(47);
+--- 266,272 ----
+      };
+  
+      /** Map: table name => table id */
+!     public static final IntValueHashMap sysTableNamesMap;
+  
+      static {
+          sysTableNamesMap = new IntValueHashMap(47);
+***************
+*** 281,293 ****
+      }
+  
+      /** Database for which to produce tables */
+!     protected final Database database;
+  
+      /**
+       * Simple object-wide flag indicating that all of this object's cached
+       * data is dirty.
+       */
+!     protected boolean isDirty = true;
+  
+      /**
+       * state flag -- if true, contentful tables are to be produced, else
+--- 281,293 ----
+      }
+  
+      /** Database for which to produce tables */
+!     public final Database database;
+  
+      /**
+       * Simple object-wide flag indicating that all of this object's cached
+       * data is dirty.
+       */
+!     public boolean isDirty = true;
+  
+      /**
+       * state flag -- if true, contentful tables are to be produced, else
+***************
+*** 295,301 ****
+       * database startup where user views reference system tables and faster
+       * system table structural reflection for table metadata.
+       */
+!     protected boolean withContent = false;
+  
+      /**
+       * Factory method retuns the fullest system table producer
+--- 295,301 ----
+       * database startup where user views reference system tables and faster
+       * system table structural reflection for table metadata.
+       */
+!     public boolean withContent = false;
+  
+      /**
+       * Factory method retuns the fullest system table producer
+diff -cr misc/hsqldb/src/org/hsqldb/DatabaseInformationMain.java misc/build/hsqldb/src/org/hsqldb/DatabaseInformationMain.java
+*** misc/hsqldb/src/org/hsqldb/DatabaseInformationMain.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DatabaseInformationMain.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 118,157 ****
+      // HsqlName objects for the system tables
+  
+      /** The HsqlNames of the system tables. */
+!     protected static final HsqlName[] sysTableHsqlNames;
+  
+      /** Current user for each cached system table */
+!     protected final int[] sysTableSessions = new int[sysTableNames.length];
+  
+      /** true if the contents of a cached system table depends on the session */
+!     protected final boolean[] sysTableSessionDependent =
+          new boolean[sysTableNames.length];
+  
+      /** cache of system tables */
+!     protected final Table[] sysTables = new Table[sysTableNames.length];
+  
+      /** Set: { names of system tables that are not to be cached } */
+!     protected static final HashSet nonCachedTablesSet;
+  
+      /**
+       * Map: simple <code>Column</code> name <code>String</code> object =>
+       * <code>HsqlName</code> object.
+       */
+!     protected static final HashMap columnNameMap;
+  
+      /**
+       * The <code>Session</code> object under consideration in the current
+       * executution context.
+       */
+!     protected Session session;
+  
+      /** The table types HSQLDB supports. */
+!     protected static final String[] tableTypes = new String[] {
+          "GLOBAL TEMPORARY", "SYSTEM TABLE", "TABLE", "VIEW"
+      };
+  
+      /** Provides naming support. */
+!     protected DINameSpace ns;
+  
+      static {
+          columnNameMap      = new HashMap();
+--- 118,157 ----
+      // HsqlName objects for the system tables
+  
+      /** The HsqlNames of the system tables. */
+!     public static final HsqlName[] sysTableHsqlNames;
+  
+      /** Current user for each cached system table */
+!     public final int[] sysTableSessions = new int[sysTableNames.length];
+  
+      /** true if the contents of a cached system table depends on the session */
+!     public final boolean[] sysTableSessionDependent =
+          new boolean[sysTableNames.length];
+  
+      /** cache of system tables */
+!     public final Table[] sysTables = new Table[sysTableNames.length];
+  
+      /** Set: { names of system tables that are not to be cached } */
+!     public static final HashSet nonCachedTablesSet;
+  
+      /**
+       * Map: simple <code>Column</code> name <code>String</code> object =>
+       * <code>HsqlName</code> object.
+       */
+!     public static final HashMap columnNameMap;
+  
+      /**
+       * The <code>Session</code> object under consideration in the current
+       * executution context.
+       */
+!     public Session session;
+  
+      /** The table types HSQLDB supports. */
+!     public static final String[] tableTypes = new String[] {
+          "GLOBAL TEMPORARY", "SYSTEM TABLE", "TABLE", "VIEW"
+      };
+  
+      /** Provides naming support. */
+!     public DINameSpace ns;
+  
+      static {
+          columnNameMap      = new HashMap();
+***************
+*** 218,224 ****
+       * @throws HsqlException if a problem occurs when adding the
+       *      column (e.g. duplicate name)
+       */
+!     protected final void addColumn(Table t, String name, int type, int size,
+                                     boolean nullable) throws HsqlException {
+  
+          HsqlName cn;
+--- 218,224 ----
+       * @throws HsqlException if a problem occurs when adding the
+       *      column (e.g. duplicate name)
+       */
+!     public final void addColumn(Table t, String name, int type, int size,
+                                     boolean nullable) throws HsqlException {
+  
+          HsqlName cn;
+***************
+*** 249,255 ****
+       * @throws HsqlException if a problem occurs when adding the
+       *      column (e.g. duplicate name)
+       */
+!     protected final void addColumn(Table t, String name, int type,
+                                     boolean nullable) throws HsqlException {
+          addColumn(t, name, type, 0, nullable);
+      }
+--- 249,255 ----
+       * @throws HsqlException if a problem occurs when adding the
+       *      column (e.g. duplicate name)
+       */
+!     public final void addColumn(Table t, String name, int type,
+                                     boolean nullable) throws HsqlException {
+          addColumn(t, name, type, 0, nullable);
+      }
+***************
+*** 264,270 ****
+       * @throws HsqlException if a problem occurs when adding the
+       *      column (e.g. duplicate name)
+       */
+!     protected final void addColumn(Table t, String name,
+                                     int type) throws HsqlException {
+          addColumn(t, name, type, true);
+      }
+--- 264,270 ----
+       * @throws HsqlException if a problem occurs when adding the
+       *      column (e.g. duplicate name)
+       */
+!     public final void addColumn(Table t, String name,
+                                     int type) throws HsqlException {
+          addColumn(t, name, type, true);
+      }
+***************
+*** 276,282 ****
+       *
+       * @return an enumeration over all of the tables in this database
+       */
+!     protected final Iterator allTables() {
+          return new WrapperIterator(database.schemaManager.allTablesIterator(),
+                                     new WrapperIterator(sysTables, true));
+      }
+--- 276,282 ----
+       *
+       * @return an enumeration over all of the tables in this database
+       */
+!     public final Iterator allTables() {
+          return new WrapperIterator(database.schemaManager.allTablesIterator(),
+                                     new WrapperIterator(sysTables, true));
+      }
+***************
+*** 287,293 ****
+       *
+       * @throws HsqlException if a database access error occurs
+       */
+!     protected final void cacheClear() throws HsqlException {
+  
+          int i = sysTables.length;
+  
+--- 287,293 ----
+       *
+       * @throws HsqlException if a database access error occurs
+       */
+!     public final void cacheClear() throws HsqlException {
+  
+          int i = sysTables.length;
+  
+***************
+*** 312,318 ****
+       * @throws HsqlException if a database access error occurs
+       * @return the system table corresponding to the specified tableIndex value
+       */
+!     protected Table generateTable(int tableIndex) throws HsqlException {
+  
+          Table t = sysTables[tableIndex];
+  
+--- 312,318 ----
+       * @throws HsqlException if a database access error occurs
+       * @return the system table corresponding to the specified tableIndex value
+       */
+!     public Table generateTable(int tableIndex) throws HsqlException {
+  
+          Table t = sysTables[tableIndex];
+  
+***************
+*** 417,423 ****
+       *
+       * @throws HsqlException if a database access error occurs
+       */
+!     protected final void init() throws HsqlException {
+  
+          ns = new DINameSpace(database);
+  
+--- 417,423 ----
+       *
+       * @throws HsqlException if a database access error occurs
+       */
+!     public final void init() throws HsqlException {
+  
+          ns = new DINameSpace(database);
+  
+***************
+*** 488,494 ****
+       * @param table the table for which to check accessibility
+       * @throws HsqlException if a database access error occurs
+       */
+!     protected final boolean isAccessibleTable(Table table)
+      throws HsqlException {
+          return session.isAccessible(table.getName());
+      }
+--- 488,494 ----
+       * @param table the table for which to check accessibility
+       * @throws HsqlException if a database access error occurs
+       */
+!     public final boolean isAccessibleTable(Table table)
+      throws HsqlException {
+          return session.isAccessible(table.getName());
+      }
+***************
+*** 500,506 ****
+       * @param name of the table
+       * @throws HsqlException if a database access error occurs
+       */
+!     protected final Table createBlankTable(HsqlName name)
+      throws HsqlException {
+          return new Table(database, name, Table.SYSTEM_TABLE);
+      }
+--- 500,506 ----
+       * @param name of the table
+       * @throws HsqlException if a database access error occurs
+       */
+!     public final Table createBlankTable(HsqlName name)
+      throws HsqlException {
+          return new Table(database, name, Table.SYSTEM_TABLE);
+      }
+diff -cr misc/hsqldb/src/org/hsqldb/Database.java misc/build/hsqldb/src/org/hsqldb/Database.java
+*** misc/hsqldb/src/org/hsqldb/Database.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Database.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 119,135 ****
+  public class Database {
+  
+      int            databaseID;
+!     private String sType;
+!     private String sName;
+  
+  // loosecannon1@users 1.7.2 patch properties on the JDBC URL
+!     private HsqlProperties urlProperties;
+!     private String         sPath;
+      DatabaseInformation    dbInfo;
+      ClassLoader            classLoader;
+  
+      /** indicates the state of the database */
+!     private int   dbState;
+      public Logger logger;
+  
+      /** true means that all tables are readonly. */
+--- 119,135 ----
+  public class Database {
+  
+      int            databaseID;
+!     public String sType;
+!     public String sName;
+  
+  // loosecannon1@users 1.7.2 patch properties on the JDBC URL
+!     public HsqlProperties urlProperties;
+!     public String         sPath;
+      DatabaseInformation    dbInfo;
+      ClassLoader            classLoader;
+  
+      /** indicates the state of the database */
+!     public int   dbState;
+      public Logger logger;
+  
+      /** true means that all tables are readonly. */
+***************
+*** 139,159 ****
+       * true means that all CACHED and TEXT tables are readonly.
+       *  MEMORY tables are updatable but updates are not persisted.
+       */
+!     private boolean filesReadOnly;
+  
+      /** true means filesReadOnly but CACHED and TEXT tables are disallowed */
+!     private boolean                filesInJar;
+      public boolean                 sqlEnforceStrictSize;
+      public int                     firstIdentity;
+!     private boolean                bIgnoreCase;
+!     private boolean                bReferentialIntegrity;
+!     private HsqlDatabaseProperties databaseProperties;
+!     private boolean                shutdownOnNoConnection;
+  
+      // schema invarient objects
+!     private HashMap        hAlias;
+!     private UserManager    userManager;
+!     private GranteeManager granteeManager;
+      HsqlNameManager        nameManager;
+  
+      // session related objects
+--- 139,159 ----
+       * true means that all CACHED and TEXT tables are readonly.
+       *  MEMORY tables are updatable but updates are not persisted.
+       */
+!     public boolean filesReadOnly;
+  
+      /** true means filesReadOnly but CACHED and TEXT tables are disallowed */
+!     public boolean                filesInJar;
+      public boolean                 sqlEnforceStrictSize;
+      public int                     firstIdentity;
+!     public boolean                bIgnoreCase;
+!     public boolean                bReferentialIntegrity;
+!     public HsqlDatabaseProperties databaseProperties;
+!     public boolean                shutdownOnNoConnection;
+  
+      // schema invarient objects
+!     public HashMap        hAlias;
+!     public UserManager    userManager;
+!     public GranteeManager granteeManager;
+      HsqlNameManager        nameManager;
+  
+      // session related objects
+***************
+*** 516,522 ****
+       *  Called by the garbage collector on this Databases object when garbage
+       *  collection determines that there are no more references to it.
+       */
+!     protected void finalize() {
+  
+          if (getState() != DATABASE_ONLINE) {
+              return;
+--- 516,522 ----
+       *  Called by the garbage collector on this Databases object when garbage
+       *  collection determines that there are no more references to it.
+       */
+!     public void finalize() {
+  
+          if (getState() != DATABASE_ONLINE) {
+              return;
+***************
+*** 628,650 ****
+  // fredt@users - system change numbers utilised
+  
+      /** last statement level change number - not externally settable */
+!     private long dbSCN = 0;
+  
+      /** last statement level change number for DDL statements - unused */
+!     private long ddlSCN = 0;
+  
+      /** last statement level change number for DML statements - used for all statements */
+!     private long dmlSCN = 0;
+  
+      synchronized long getSCN() {
+          return dbSCN;
+      }
+  
+!     private synchronized void setSCN(long l) {
+          dbSCN = l;
+      }
+  
+!     private synchronized long nextSCN() {
+  
+          dbSCN++;
+  
+--- 628,650 ----
+  // fredt@users - system change numbers utilised
+  
+      /** last statement level change number - not externally settable */
+!     public long dbSCN = 0;
+  
+      /** last statement level change number for DDL statements - unused */
+!     public long ddlSCN = 0;
+  
+      /** last statement level change number for DML statements - used for all statements */
+!     public long dmlSCN = 0;
+  
+      synchronized long getSCN() {
+          return dbSCN;
+      }
+  
+!     public synchronized void setSCN(long l) {
+          dbSCN = l;
+      }
+  
+!     public synchronized long nextSCN() {
+  
+          dbSCN++;
+  
+***************
+*** 662,668 ****
+          return dmlSCN;
+      }
+  
+!     private synchronized void setState(int state) {
+          dbState = state;
+      }
+  
+--- 662,668 ----
+          return dmlSCN;
+      }
+  
+!     public synchronized void setState(int state) {
+          dbState = state;
+      }
+  
+***************
+*** 710,717 ****
+          return urlProperties;
+      }
+  
+!     private FileAccess fileaccess;
+!     private boolean    isStoredFileAccess;
+  
+      public synchronized FileAccess getFileAccess() {
+          return fileaccess;
+--- 710,717 ----
+          return urlProperties;
+      }
+  
+!     public FileAccess fileaccess;
+!     public boolean    isStoredFileAccess;
+  
+      public synchronized FileAccess getFileAccess() {
+          return fileaccess;
+diff -cr misc/hsqldb/src/org/hsqldb/DatabaseManager.java misc/build/hsqldb/src/org/hsqldb/DatabaseManager.java
+*** misc/hsqldb/src/org/hsqldb/DatabaseManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DatabaseManager.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 64,70 ****
+      // Database and Server registry
+  
+      /** provides unique ID's for the Databases currently in registry */
+!     private static int dbIDCounter;
+  
+      /** name to Database mapping for mem: databases */
+      static final HashMap memDatabaseMap = new HashMap();
+--- 64,70 ----
+      // Database and Server registry
+  
+      /** provides unique ID's for the Databases currently in registry */
+!     public static int dbIDCounter;
+  
+      /** name to Database mapping for mem: databases */
+      static final HashMap memDatabaseMap = new HashMap();
+***************
+*** 239,245 ****
+      }
+  
+  // loosecannon1@users 1.7.2 patch properties on the JDBC URL
+!     private static synchronized Database getDatabaseObject(String type,
+              String path, HsqlProperties props) throws HsqlException {
+  
+          Database db;
+--- 239,245 ----
+      }
+  
+  // loosecannon1@users 1.7.2 patch properties on the JDBC URL
+!     public static synchronized Database getDatabaseObject(String type,
+              String path, HsqlProperties props) throws HsqlException {
+  
+          Database db;
+***************
+*** 275,281 ****
+       * Looks up database of a given type and path in the registry. Returns
+       * null if there is none.
+       */
+!     private static synchronized Database lookupDatabaseObject(String type,
+              String path) throws HsqlException {
+  
+          Object  key = path;
+--- 275,281 ----
+       * Looks up database of a given type and path in the registry. Returns
+       * null if there is none.
+       */
+!     public static synchronized Database lookupDatabaseObject(String type,
+              String path) throws HsqlException {
+  
+          Object  key = path;
+***************
+*** 297,303 ****
+       * Adds a database to the registry. Returns
+       * null if there is none.
+       */
+!     private static synchronized void addDatabaseObject(String type,
+              String path, Database db) throws HsqlException {
+  
+          Object  key = path;
+--- 297,303 ----
+       * Adds a database to the registry. Returns
+       * null if there is none.
+       */
+!     public static synchronized void addDatabaseObject(String type,
+              String path, Database db) throws HsqlException {
+  
+          Object  key = path;
+***************
+*** 398,404 ****
+      /**
+       * Deregisters a server as serving a given database. Not yet used.
+       */
+!     private static void deRegisterServer(Server server, Database db) {
+  
+          Iterator it = serverMap.values().iterator();
+  
+--- 398,404 ----
+      /**
+       * Deregisters a server as serving a given database. Not yet used.
+       */
+!     public static void deRegisterServer(Server server, Database db) {
+  
+          Iterator it = serverMap.values().iterator();
+  
+***************
+*** 416,422 ****
+      /**
+       * Registers a server as serving a given database.
+       */
+!     private static void registerServer(Server server, Database db) {
+  
+          if (!serverMap.containsKey(server)) {
+              serverMap.put(server, new HashSet());
+--- 416,422 ----
+      /**
+       * Registers a server as serving a given database.
+       */
+!     public static void registerServer(Server server, Database db) {
+  
+          if (!serverMap.containsKey(server)) {
+              serverMap.put(server, new HashSet());
+***************
+*** 431,437 ****
+       * Notifies all servers that serve the database that the database has been
+       * shutdown.
+       */
+!     private static void notifyServers(Database db) {
+  
+          Iterator it = serverMap.keySet().iterator();
+  
+--- 431,437 ----
+       * Notifies all servers that serve the database that the database has been
+       * shutdown.
+       */
+!     public static void notifyServers(Database db) {
+  
+          Iterator it = serverMap.keySet().iterator();
+  
+***************
+*** 463,469 ****
+      }
+  
+      // Timer
+!     private static final HsqlTimer timer = new HsqlTimer();
+  
+      public static HsqlTimer getTimer() {
+          return timer;
+--- 463,469 ----
+      }
+  
+      // Timer
+!     public static final HsqlTimer timer = new HsqlTimer();
+  
+      public static HsqlTimer getTimer() {
+          return timer;
+***************
+*** 471,477 ****
+  
+      // converts file path to database lookup key, converting any
+      // any thrown exception to an HsqlException in the process
+!     private static Object filePathToKey(String path) throws HsqlException {
+  
+          try {
+              return FileUtil.canonicalFile(path);
+--- 471,477 ----
+  
+      // converts file path to database lookup key, converting any
+      // any thrown exception to an HsqlException in the process
+!     public static Object filePathToKey(String path) throws HsqlException {
+  
+          try {
+              return FileUtil.canonicalFile(path);
+diff -cr misc/hsqldb/src/org/hsqldb/DatabaseScript.java misc/build/hsqldb/src/org/hsqldb/DatabaseScript.java
+*** misc/hsqldb/src/org/hsqldb/DatabaseScript.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DatabaseScript.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 640,646 ****
+      /**
+       * Generates the column definitions for a table.
+       */
+!     private static void getColumnList(Table t, int[] col, int len,
+                                        StringBuffer a) {
+  
+          a.append('(');
+--- 640,646 ----
+      /**
+       * Generates the column definitions for a table.
+       */
+!     public static void getColumnList(Table t, int[] col, int len,
+                                        StringBuffer a) {
+  
+          a.append('(');
+***************
+*** 659,665 ****
+      /**
+       * Generates the foreign key declaration for a given Constraint object.
+       */
+!     private static void getFKStatement(Constraint c, StringBuffer a) {
+  
+          a.append(Token.T_CONSTRAINT).append(' ');
+          a.append(c.getName().statementName);
+--- 659,665 ----
+      /**
+       * Generates the foreign key declaration for a given Constraint object.
+       */
+!     public static void getFKStatement(Constraint c, StringBuffer a) {
+  
+          a.append(Token.T_CONSTRAINT).append(' ');
+          a.append(c.getName().statementName);
+***************
+*** 691,697 ****
+      /**
+       * Returns the foreign key action rule.
+       */
+!     private static String getFKAction(int action) {
+  
+          switch (action) {
+  
+--- 691,697 ----
+      /**
+       * Returns the foreign key action rule.
+       */
+!     public static String getFKAction(int action) {
+  
+          switch (action) {
+  
+***************
+*** 712,718 ****
+      /**
+       * Adds a script line to the result.
+       */
+!     private static void addRow(Result r, String sql) {
+  
+          String[] s = new String[1];
+  
+--- 712,718 ----
+      /**
+       * Adds a script line to the result.
+       */
+!     public static void addRow(Result r, String sql) {
+  
+          String[] s = new String[1];
+  
+***************
+*** 733,739 ****
+       * grant select on system tables
+       *
+       */
+!     private static void addRightsStatements(Database dDatabase, Result r) {
+  
+          StringBuffer   a;
+          HashMappedList userlist = dDatabase.getUserManager().getUsers();
+--- 733,739 ----
+       * grant select on system tables
+       *
+       */
+!     public static void addRightsStatements(Database dDatabase, Result r) {
+  
+          StringBuffer   a;
+          HashMappedList userlist = dDatabase.getUserManager().getUsers();
+diff -cr misc/hsqldb/src/org/hsqldb/DINameSpace.java misc/build/hsqldb/src/org/hsqldb/DINameSpace.java
+*** misc/hsqldb/src/org/hsqldb/DINameSpace.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DINameSpace.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 61,70 ****
+  final class DINameSpace {
+  
+      /** The Database for which the name space functionality is provided */
+!     private Database database;
+  
+      /** The catalog name reported by this namespace */
+!     private String catalogName;
+  
+      /**
+       * Set { <code>Class</code> FQN <code>String</code> objects }. <p>
+--- 61,70 ----
+  final class DINameSpace {
+  
+      /** The Database for which the name space functionality is provided */
+!     public Database database;
+  
+      /** The catalog name reported by this namespace */
+!     public String catalogName;
+  
+      /**
+       * Set { <code>Class</code> FQN <code>String</code> objects }. <p>
+***************
+*** 74,80 ****
+       * support of the expected SQL CLI scalar functions and other core
+       * HSQLDB SQL functions and stored procedures. <p>
+       */
+!     private static HashSet builtin = new HashSet();
+  
+      // procedure columns
+      // make temporary ad-hoc spec a little more "official"
+--- 74,80 ----
+       * support of the expected SQL CLI scalar functions and other core
+       * HSQLDB SQL functions and stored procedures. <p>
+       */
+!     public static HashSet builtin = new HashSet();
+  
+      // procedure columns
+      // make temporary ad-hoc spec a little more "official"
+diff -cr misc/hsqldb/src/org/hsqldb/DIProcedureInfo.java misc/build/hsqldb/src/org/hsqldb/DIProcedureInfo.java
+*** misc/hsqldb/src/org/hsqldb/DIProcedureInfo.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DIProcedureInfo.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 70,94 ****
+      static final int      procedureNoNulls         = 0;
+      static final int      procedureNullable        = 1;
+      static final int      procedureNullableUnknown = 2;
+!     private Class         clazz;
+!     private Class[]       colClasses;
+!     private int[]         colTypes;
+!     private int           colOffset;
+!     private int           colCount;
+!     private boolean       colsResolved;
+!     private String        fqn;
+!     private String        specificName;
+!     private int           hnd_remarks;
+!     private Method        method;
+!     private String        sig;
+!     private DINameSpace   nameSpace;
+!     private final HashMap typeMap = new HashMap();
+  
+      public DIProcedureInfo(DINameSpace ns) throws HsqlException {
+          setNameSpace(ns);
+      }
+  
+!     private int colOffset() {
+  
+          if (!colsResolved) {
+              resolveCols();
+--- 70,94 ----
+      static final int      procedureNoNulls         = 0;
+      static final int      procedureNullable        = 1;
+      static final int      procedureNullableUnknown = 2;
+!     public Class         clazz;
+!     public Class[]       colClasses;
+!     public int[]         colTypes;
+!     public int           colOffset;
+!     public int           colCount;
+!     public boolean       colsResolved;
+!     public String        fqn;
+!     public String        specificName;
+!     public int           hnd_remarks;
+!     public Method        method;
+!     public String        sig;
+!     public DINameSpace   nameSpace;
+!     public final HashMap typeMap = new HashMap();
+  
+      public DIProcedureInfo(DINameSpace ns) throws HsqlException {
+          setNameSpace(ns);
+      }
+  
+!     public int colOffset() {
+  
+          if (!colsResolved) {
+              resolveCols();
+***************
+*** 512,518 ****
+          } catch (Exception e) {}
+      }
+  
+!     private void resolveCols() {
+  
+          Class   rType;
+          Class[] pTypes;
+--- 512,518 ----
+          } catch (Exception e) {}
+      }
+  
+!     public void resolveCols() {
+  
+          Class   rType;
+          Class[] pTypes;
+diff -cr misc/hsqldb/src/org/hsqldb/DiskNode.java misc/build/hsqldb/src/org/hsqldb/DiskNode.java
+*** misc/hsqldb/src/org/hsqldb/DiskNode.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DiskNode.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 93,103 ****
+   */
+  class DiskNode extends Node {
+  
+!     protected Row    rData;
+!     private int      iLeft   = NO_POS;
+!     private int      iRight  = NO_POS;
+!     private int      iParent = NO_POS;
+!     private int      iId;    // id of Index object for this Node
+      static final int SIZE_IN_BYTE = 4 * 4;
+  
+      DiskNode(CachedRow r, RowInputInterface in,
+--- 93,103 ----
+   */
+  class DiskNode extends Node {
+  
+!     public Row    rData;
+!     public int      iLeft   = NO_POS;
+!     public int      iRight  = NO_POS;
+!     public int      iParent = NO_POS;
+!     public int      iId;    // id of Index object for this Node
+      static final int SIZE_IN_BYTE = 4 * 4;
+  
+      DiskNode(CachedRow r, RowInputInterface in,
+***************
+*** 161,167 ****
+          return rData;
+      }
+  
+!     private Node findNode(int pos) throws HsqlException {
+  
+          Node ret = null;
+          Row  r   = ((CachedRow) rData).getTable().getRow(pos, null);
+--- 161,167 ----
+          return rData;
+      }
+  
+!     public Node findNode(int pos) throws HsqlException {
+  
+          Node ret = null;
+          Row  r   = ((CachedRow) rData).getTable().getRow(pos, null);
+***************
+*** 372,378 ****
+          writeTranslatePointer(iParent, out, lookup);
+      }
+  
+!     private void writeTranslatePointer(int pointer, RowOutputInterface out,
+                                         IntLookup lookup) {
+  
+          int newPointer = 0;
+--- 372,378 ----
+          writeTranslatePointer(iParent, out, lookup);
+      }
+  
+!     public void writeTranslatePointer(int pointer, RowOutputInterface out,
+                                         IntLookup lookup) {
+  
+          int newPointer = 0;
+diff -cr misc/hsqldb/src/org/hsqldb/DITableInfo.java misc/build/hsqldb/src/org/hsqldb/DITableInfo.java
+*** misc/hsqldb/src/org/hsqldb/DITableInfo.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DITableInfo.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 55,73 ****
+      static final short tableIndexOther    = 3;
+  
+      /** Used in buffer size and character octet length determinations. */
+!     private static final int HALF_MAX_INT = Integer.MAX_VALUE >>> 1;
+  
+      /** BundleHandler id for column remarks resource bundle. */
+!     private int hnd_column_remarks = -1;
+  
+      /** BundleHandler id for table remarks resource bundle. */
+!     private int hnd_table_remarks = -1;
+  
+      /** The Table object upon which this object is reporting. */
+!     private Table table;
+  
+      /** Provides intrinsic type infformation support. */
+!     private static final DITypeInfo ti = new DITypeInfo();
+  
+      /**
+       * Creates a new DITableInfo object with the default Locale and reporting
+--- 55,73 ----
+      static final short tableIndexOther    = 3;
+  
+      /** Used in buffer size and character octet length determinations. */
+!     public static final int HALF_MAX_INT = Integer.MAX_VALUE >>> 1;
+  
+      /** BundleHandler id for column remarks resource bundle. */
+!     public int hnd_column_remarks = -1;
+  
+      /** BundleHandler id for table remarks resource bundle. */
+!     public int hnd_table_remarks = -1;
+  
+      /** The Table object upon which this object is reporting. */
+!     public Table table;
+  
+      /** Provides intrinsic type infformation support. */
+!     public static final DITypeInfo ti = new DITypeInfo();
+  
+      /**
+       * Creates a new DITableInfo object with the default Locale and reporting
+diff -cr misc/hsqldb/src/org/hsqldb/DITypeInfo.java misc/build/hsqldb/src/org/hsqldb/DITypeInfo.java
+*** misc/hsqldb/src/org/hsqldb/DITypeInfo.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/DITypeInfo.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 57,75 ****
+      static final int typeSearchable = 3;
+  
+      /** BundleHandler id for create params resource bundle. */
+!     private int hnd_create_params = -1;
+  
+      /** BundleHandler id for local names resource bundle. */
+!     private int hnd_local_names = -1;
+  
+      /** BundleHandler id for data type remarks resource bundle. */
+!     private int hnd_remarks = -1;
+  
+      /** The SQL type code on which this object is reporting. */
+!     private int type = Types.NULL;
+  
+      /** The HSQLDB subtype code on which this object is reporting. */
+!     private int typeSub = Types.TYPE_SUB_DEFAULT;
+      boolean     locale_set;
+  
+      /** Creates a new DITypeInfo object having the default Locale. */
+--- 57,75 ----
+      static final int typeSearchable = 3;
+  
+      /** BundleHandler id for create params resource bundle. */
+!     public int hnd_create_params = -1;
+  
+      /** BundleHandler id for local names resource bundle. */
+!     public int hnd_local_names = -1;
+  
+      /** BundleHandler id for data type remarks resource bundle. */
+!     public int hnd_remarks = -1;
+  
+      /** The SQL type code on which this object is reporting. */
+!     public int type = Types.NULL;
+  
+      /** The HSQLDB subtype code on which this object is reporting. */
+!     public int typeSub = Types.TYPE_SUB_DEFAULT;
+      boolean     locale_set;
+  
+      /** Creates a new DITypeInfo object having the default Locale. */
+diff -cr misc/hsqldb/src/org/hsqldb/Expression.java misc/build/hsqldb/src/org/hsqldb/Expression.java
+*** misc/hsqldb/src/org/hsqldb/Expression.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Expression.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 217,244 ****
+          });
+      }
+  
+!     private static final int AGGREGATE_SELF     = -1;
+!     private static final int AGGREGATE_NONE     = 0;
+!     private static final int AGGREGATE_LEFT     = 1;
+!     private static final int AGGREGATE_RIGHT    = 2;
+!     private static final int AGGREGATE_BOTH     = 3;
+!     private static final int AGGREGATE_FUNCTION = 4;
+  
+      // type
+      int         exprType;
+!     private int aggregateSpec = AGGREGATE_NONE;
+  
+      // nodes
+!     private Expression eArg, eArg2;
+  
+      // VALUE, VALUELIST
+      Object          valueData;
+!     private HashSet hList;
+!     private int     dataType;
+  
+      // VALUE LIST NEW
+      Expression[]    valueList;
+!     private boolean isFixedConstantValueList;
+  
+      // QUERY - in single value selects, IN or EXISTS predicates
+      SubQuery subQuery;
+--- 217,244 ----
+          });
+      }
+  
+!     public static final int AGGREGATE_SELF     = -1;
+!     public static final int AGGREGATE_NONE     = 0;
+!     public static final int AGGREGATE_LEFT     = 1;
+!     public static final int AGGREGATE_RIGHT    = 2;
+!     public static final int AGGREGATE_BOTH     = 3;
+!     public static final int AGGREGATE_FUNCTION = 4;
+  
+      // type
+      int         exprType;
+!     public int aggregateSpec = AGGREGATE_NONE;
+  
+      // nodes
+!     public Expression eArg, eArg2;
+  
+      // VALUE, VALUELIST
+      Object          valueData;
+!     public HashSet hList;
+!     public int     dataType;
+  
+      // VALUE LIST NEW
+      Expression[]    valueList;
+!     public boolean isFixedConstantValueList;
+  
+      // QUERY - in single value selects, IN or EXISTS predicates
+      SubQuery subQuery;
+***************
+*** 248,273 ****
+      Function function;
+  
+      // LIKE
+!     private Like likeObject;
+  
+      // COLUMN
+!     private String      catalog;
+!     private String      schema;
+!     private String      tableName;
+!     private String      columnName;
+!     private TableFilter tableFilter;                // null if not yet resolved
+      TableFilter         outerFilter;                // defined if this is part of an OUTER JOIN condition tree
+  
+      //
+!     private int     columnIndex;
+!     private boolean columnQuoted;
+!     private int     precision;
+!     private int     scale;
+!     private String  columnAlias;                    // if it is a column of a select column list
+!     private boolean aliasQuoted;
+  
+      //
+!     private boolean isDescending;                   // if it is a column in a order by
+      int             joinedTableColumnIndex = -1;    // >= 0 when it is used for order by
+  
+  // rougier@users 20020522 - patch 552830 - COUNT(DISTINCT)
+--- 248,273 ----
+      Function function;
+  
+      // LIKE
+!     public Like likeObject;
+  
+      // COLUMN
+!     public String      catalog;
+!     public String      schema;
+!     public String      tableName;
+!     public String      columnName;
+!     public TableFilter tableFilter;                // null if not yet resolved
+      TableFilter         outerFilter;                // defined if this is part of an OUTER JOIN condition tree
+  
+      //
+!     public int     columnIndex;
+!     public boolean columnQuoted;
+!     public int     precision;
+!     public int     scale;
+!     public String  columnAlias;                    // if it is a column of a select column list
+!     public boolean aliasQuoted;
+  
+      //
+!     public boolean isDescending;                   // if it is a column in a order by
+      int             joinedTableColumnIndex = -1;    // >= 0 when it is used for order by
+  
+  // rougier@users 20020522 - patch 552830 - COUNT(DISTINCT)
+***************
+*** 275,281 ****
+      boolean isDistinctAggregate;
+  
+      // PARAM
+!     private boolean isParam;
+  
+      // does Expression stem from a JOIN <table> ON <expression>
+      boolean isInJoin;
+--- 275,281 ----
+      boolean isDistinctAggregate;
+  
+      // PARAM
+!     public boolean isParam;
+  
+      // does Expression stem from a JOIN <table> ON <expression>
+      boolean isInJoin;
+***************
+*** 486,492 ****
+          }
+      }
+  
+!     private void checkAggregate() {
+  
+          if (isAggregate(exprType)) {
+              aggregateSpec = AGGREGATE_SELF;
+--- 486,492 ----
+          }
+      }
+  
+!     public void checkAggregate() {
+  
+          if (isAggregate(exprType)) {
+              aggregateSpec = AGGREGATE_SELF;
+***************
+*** 823,829 ****
+          throw Trace.error(Trace.EXPRESSION_NOT_SUPPORTED);
+      }
+  
+!     private String describe(Session session, int blanks) {
+  
+          int          lIType;
+          StringBuffer buf = new StringBuffer(64);
+--- 823,829 ----
+          throw Trace.error(Trace.EXPRESSION_NOT_SUPPORTED);
+      }
+  
+!     public String describe(Session session, int blanks) {
+  
+          int          lIType;
+          StringBuffer buf = new StringBuffer(64);
+***************
+*** 1203,1209 ****
+       *
+       * @return boolean
+       */
+!     private boolean isColumn() {
+  
+          switch (exprType) {
+  
+--- 1203,1209 ----
+       *
+       * @return boolean
+       */
+!     public boolean isColumn() {
+  
+          switch (exprType) {
+  
+***************
+*** 3423,3429 ****
+          return compareValues(session, o1, o2);
+      }
+  
+!     private Boolean compareValues(Session session, Object o1,
+                                    Object o2) throws HsqlException {
+  
+          int type = eArg.dataType;
+--- 3423,3429 ----
+          return compareValues(session, o1, o2);
+      }
+  
+!     public Boolean compareValues(Session session, Object o1,
+                                    Object o2) throws HsqlException {
+  
+          int type = eArg.dataType;
+***************
+*** 3481,3487 ****
+       * @return boolean
+       * @throws HsqlException
+       */
+!     private Boolean testInCondition(Session session,
+                                      Object o) throws HsqlException {
+  
+          if (o == null) {
+--- 3481,3487 ----
+       * @return boolean
+       * @throws HsqlException
+       */
+!     public Boolean testInCondition(Session session,
+                                      Object o) throws HsqlException {
+  
+          if (o == null) {
+***************
+*** 3545,3551 ****
+          throw Trace.error(Trace.WRONG_DATA_TYPE);
+      }
+  
+!     private Boolean testAnyAllCondition(Session session,
+                                          Object o) throws HsqlException {
+  
+          if (o == null) {
+--- 3545,3551 ----
+          throw Trace.error(Trace.WRONG_DATA_TYPE);
+      }
+  
+!     public Boolean testAnyAllCondition(Session session,
+                                          Object o) throws HsqlException {
+  
+          if (o == null) {
+***************
+*** 3568,3574 ****
+          return result;
+      }
+  
+!     private Boolean getAnyAllValue(Session session, Object o,
+                                     SubQuery subquery) throws HsqlException {
+  
+          boolean     empty    = subquery.table.isEmpty(session);
+--- 3568,3574 ----
+          return result;
+      }
+  
+!     public Boolean getAnyAllValue(Session session, Object o,
+                                     SubQuery subquery) throws HsqlException {
+  
+          boolean     empty    = subquery.table.isEmpty(session);
+diff -cr misc/hsqldb/src/org/hsqldb/Function.java misc/build/hsqldb/src/org/hsqldb/Function.java
+*** misc/hsqldb/src/org/hsqldb/Function.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Function.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 96,115 ****
+   */
+  class Function {
+  
+!     private String         sFunction;
+!     private Method         mMethod;
+!     private Class          cReturnClass;
+!     private Class[]        aArgClasses;
+!     private int            iReturnType;
+!     private int            iArgCount;
+!     private int            iSqlArgCount;
+!     private int            iSqlArgStart;
+!     private int[]          iArgType;
+!     private boolean[]      bArgNullable;
+      Expression[]           eArg;
+!     private boolean        bConnection;
+!     private static HashMap methodCache = new HashMap();
+!     private int            fID;
+      String                 name;        // name used to call function
+      boolean                isSimple;    //CURRENT_TIME, NOW etc.
+      boolean                hasAggregate;
+--- 96,115 ----
+   */
+  class Function {
+  
+!     public String         sFunction;
+!     public Method         mMethod;
+!     public Class          cReturnClass;
+!     public Class[]        aArgClasses;
+!     public int            iReturnType;
+!     public int            iArgCount;
+!     public int            iSqlArgCount;
+!     public int            iSqlArgStart;
+!     public int[]          iArgType;
+!     public boolean[]      bArgNullable;
+      Expression[]           eArg;
+!     public boolean        bConnection;
+!     public static HashMap methodCache = new HashMap();
+!     public int            fID;
+      String                 name;        // name used to call function
+      boolean                isSimple;    //CURRENT_TIME, NOW etc.
+      boolean                hasAggregate;
+***************
+*** 368,374 ****
+          // Library function throw HsqlException
+      }
+  
+!     private Object[] getArguments(Session session) throws HsqlException {
+  
+          int      i    = bConnection ? 1
+                                      : 0;
+--- 368,374 ----
+          // Library function throw HsqlException
+      }
+  
+!     public Object[] getArguments(Session session) throws HsqlException {
+  
+          int      i    = bConnection ? 1
+                                      : 0;
+***************
+*** 405,411 ****
+      /**
+       * returns null if any non-nullable element of values is null
+       */
+!     private Object[] getNotNull(Object[] values) throws HsqlException {
+  
+          int i = bConnection ? 1
+                              : 0;
+--- 405,411 ----
+      /**
+       * returns null if any non-nullable element of values is null
+       */
+!     public Object[] getNotNull(Object[] values) throws HsqlException {
+  
+          int i = bConnection ? 1
+                              : 0;
+diff -cr misc/hsqldb/src/org/hsqldb/Grantee.java misc/build/hsqldb/src/org/hsqldb/Grantee.java
+*** misc/hsqldb/src/org/hsqldb/Grantee.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Grantee.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 52,60 ****
+   * Method names ending in Direct indicate methods which do not recurse
+   * to look through Roles which "this" object is a member of.
+   *
+!  * We use the word "Admin" (e.g., in private variable "admin" and method
+   * "isAdmin()) to mean this Grantee has admin priv by any means.
+!  * We use the word "adminDirect" (e.g., in private variable "adminDirect"
+   * and method "isAdminDirect()) to mean this Grantee has admin priv
+   * directly.
+   *
+--- 52,60 ----
+   * Method names ending in Direct indicate methods which do not recurse
+   * to look through Roles which "this" object is a member of.
+   *
+!  * We use the word "Admin" (e.g., in public variable "admin" and method
+   * "isAdmin()) to mean this Grantee has admin priv by any means.
+!  * We use the word "adminDirect" (e.g., in public variable "adminDirect"
+   * and method "isAdminDirect()) to mean this Grantee has admin priv
+   * directly.
+   *
+***************
+*** 73,93 ****
+       * true if this grantee has database administrator priv directly
+       *  (ie., not by membership in any role)
+       */
+!     private boolean adminDirect = false;
+  
+      /** true if this grantee has database administrator priv by any means. */
+!     private boolean admin = false;
+  
+      /** contains righs granted direct, or via roles, expept those of PUBLIC */
+!     private IntValueHashMap fullRightsMap = new IntValueHashMap();
+  
+      /**
+       * Grantee name.
+       */
+!     private String granteeName;
+  
+      /** map with database object identifier keys and access privileges values */
+!     private IntValueHashMap rightsMap;
+  
+      /** These are the DIRECT roles.  Each of these may contain nested roles */
+      HashSet roles = new HashSet();
+--- 73,93 ----
+       * true if this grantee has database administrator priv directly
+       *  (ie., not by membership in any role)
+       */
+!     public boolean adminDirect = false;
+  
+      /** true if this grantee has database administrator priv by any means. */
+!     public boolean admin = false;
+  
+      /** contains righs granted direct, or via roles, expept those of PUBLIC */
+!     public IntValueHashMap fullRightsMap = new IntValueHashMap();
+  
+      /**
+       * Grantee name.
+       */
+!     public String granteeName;
+  
+      /** map with database object identifier keys and access privileges values */
+!     public IntValueHashMap rightsMap;
+  
+      /** These are the DIRECT roles.  Each of these may contain nested roles */
+      HashSet roles = new HashSet();
+***************
+*** 98,107 ****
+       * Note: All Grantee objects except the special
+       * SYS and PUBLIC Grantee objects contain a reference to this object
+       */
+!     private Grantee pubGrantee;
+  
+      /** Needed only to give access to the roles for this database */
+!     private GranteeManager granteeManager;
+  
+      /**
+       * Constructor, with a argument reference to the PUBLIC User Object which
+--- 98,107 ----
+       * Note: All Grantee objects except the special
+       * SYS and PUBLIC Grantee objects contain a reference to this object
+       */
+!     public Grantee pubGrantee;
+  
+      /** Needed only to give access to the roles for this database */
+!     public GranteeManager granteeManager;
+  
+      /**
+       * Constructor, with a argument reference to the PUBLIC User Object which
+***************
+*** 219,225 ****
+       *
+       * @return Given role with new elements added.
+       */
+!     private HashSet addGranteeAndRoles(HashSet set) {
+  
+          String candidateRole;
+  
+--- 219,225 ----
+       *
+       * @return Given role with new elements added.
+       */
+!     public HashSet addGranteeAndRoles(HashSet set) {
+  
+          String candidateRole;
+  
+***************
+*** 407,413 ****
+       * Considers none of pubGranee, nested roles, admin privs, globally
+       * available Class object.
+       */
+!     protected boolean isDirectlyAccessible(Object dbObject,
+                                             int rights) throws HsqlException {
+  
+          int n = rightsMap.get(dbObject, 0);
+--- 407,413 ----
+       * Considers none of pubGranee, nested roles, admin privs, globally
+       * available Class object.
+       */
+!     public boolean isDirectlyAccessible(Object dbObject,
+                                             int rights) throws HsqlException {
+  
+          int n = rightsMap.get(dbObject, 0);
+diff -cr misc/hsqldb/src/org/hsqldb/GranteeManager.java misc/build/hsqldb/src/org/hsqldb/GranteeManager.java
+*** misc/hsqldb/src/org/hsqldb/GranteeManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/GranteeManager.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 105,117 ****
+       * Map of String-to-Grantee-objects.<p>
+       * Primary object maintained by this class
+       */
+!     private HashMappedList map = new HashMappedList();
+  
+      /**
+       * This object's set of Role objects. <p>
+       * role-Strings-to-Grantee-object
+       */
+!     private HashMappedList roleMap = new HashMappedList();
+  
+      /**
+       * Construct the GranteeManager for a Database.
+--- 105,117 ----
+       * Map of String-to-Grantee-objects.<p>
+       * Primary object maintained by this class
+       */
+!     public HashMappedList map = new HashMappedList();
+  
+      /**
+       * This object's set of Role objects. <p>
+       * role-Strings-to-Grantee-object
+       */
+!     public HashMappedList roleMap = new HashMappedList();
+  
+      /**
+       * Construct the GranteeManager for a Database.
+***************
+*** 453,459 ****
+          return list;
+      }
+  
+!     private static String[] getRightsArraySub(int right) {
+  
+  //        checkValidFlags(right);
+          if (right == 0) {
+--- 453,459 ----
+          return list;
+      }
+  
+!     public static String[] getRightsArraySub(int right) {
+  
+  //        checkValidFlags(right);
+          if (right == 0) {
+diff -cr misc/hsqldb/src/org/hsqldb/GroupedResult.java misc/build/hsqldb/src/org/hsqldb/GroupedResult.java
+*** misc/hsqldb/src/org/hsqldb/GroupedResult.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/GroupedResult.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 68,80 ****
+  class GroupedResult {
+  
+  /** @todo fredt - initialise results on first use */
+!     private Result        result;
+      int                   groupBegin;
+      int                   groupEnd;
+!     private final boolean isGrouped;
+!     private final boolean isAggregated;
+!     private HashSet       groups;
+!     private ResultGroup   currGroup;
+  
+      GroupedResult(Select select, Result.ResultMetaData meta) {
+  
+--- 68,80 ----
+  class GroupedResult {
+  
+  /** @todo fredt - initialise results on first use */
+!     public Result        result;
+      int                   groupBegin;
+      int                   groupEnd;
+!     public final boolean isGrouped;
+!     public final boolean isAggregated;
+!     public HashSet       groups;
+!     public ResultGroup   currGroup;
+  
+      GroupedResult(Select select, Result.ResultMetaData meta) {
+  
+***************
+*** 152,158 ****
+          Object[] row;
+          int      hashCode;
+  
+!         private ResultGroup(Object[] row) {
+  
+              this.row = row;
+              hashCode = 0;
+--- 152,158 ----
+          Object[] row;
+          int      hashCode;
+  
+!         public ResultGroup(Object[] row) {
+  
+              this.row = row;
+              hashCode = 0;
+***************
+*** 189,195 ****
+              return true;
+          }
+  
+!         private boolean equals(Object o1, Object o2) {
+              return (o1 == null) ? o2 == null
+                                  : o1.equals(o2);
+          }
+--- 189,195 ----
+              return true;
+          }
+  
+!         public boolean equals(Object o1, Object o2) {
+              return (o1 == null) ? o2 == null
+                                  : o1.equals(o2);
+          }
+diff -cr misc/hsqldb/src/org/hsqldb/HSQLClientConnection.java misc/build/hsqldb/src/org/hsqldb/HSQLClientConnection.java
+*** misc/hsqldb/src/org/hsqldb/HSQLClientConnection.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/HSQLClientConnection.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 55,72 ****
+  
+      static final int          BUFFER_SIZE = 0x1000;
+      final byte[]              mainBuffer  = new byte[BUFFER_SIZE];
+!     private boolean           isClosed;
+!     private Socket            socket;
+!     protected OutputStream    dataOutput;
+!     protected DataInputStream dataInput;
+!     protected RowOutputBinary rowOut;
+!     protected RowInputBinary  rowIn;
+!     private Result            resultOut;
+!     private int               sessionID;
+  
+      //
+!     private boolean isReadOnly   = false;
+!     private boolean isAutoCommit = true;
+  
+      //
+      String  host;
+--- 55,72 ----
+  
+      static final int          BUFFER_SIZE = 0x1000;
+      final byte[]              mainBuffer  = new byte[BUFFER_SIZE];
+!     public boolean           isClosed;
+!     public Socket            socket;
+!     public OutputStream    dataOutput;
+!     public DataInputStream dataInput;
+!     public RowOutputBinary rowOut;
+!     public RowInputBinary  rowIn;
+!     public Result            resultOut;
+!     public int               sessionID;
+  
+      //
+!     public boolean isReadOnly   = false;
+!     public boolean isAutoCommit = true;
+  
+      //
+      String  host;
+***************
+*** 112,118 ****
+       * resultOut is reused to trasmit all remote calls for session management.
+       * Here the structure is preset for sending attributes.
+       */
+!     private void initStructures() {
+  
+          rowOut    = new RowOutputBinary(mainBuffer);
+          rowIn     = new RowInputBinary(rowOut);
+--- 112,118 ----
+       * resultOut is reused to trasmit all remote calls for session management.
+       * Here the structure is preset for sending attributes.
+       */
+!     public void initStructures() {
+  
+          rowOut    = new RowOutputBinary(mainBuffer);
+          rowIn     = new RowInputBinary(rowOut);
+***************
+*** 121,132 ****
+          resultOut.add(new Object[7]);
+      }
+  
+!     protected void initConnection(String host, int port,
+                                    boolean isTLS) throws HsqlException {
+          openConnection(host, port, isTLS);
+      }
+  
+!     protected void openConnection(String host, int port,
+                                    boolean isTLS) throws HsqlException {
+  
+          try {
+--- 121,132 ----
+          resultOut.add(new Object[7]);
+      }
+  
+!     public void initConnection(String host, int port,
+                                    boolean isTLS) throws HsqlException {
+          openConnection(host, port, isTLS);
+      }
+  
+!     public void openConnection(String host, int port,
+                                    boolean isTLS) throws HsqlException {
+  
+          try {
+***************
+*** 142,148 ****
+          }
+      }
+  
+!     protected void closeConnection() {
+  
+          try {
+              if (socket != null) {
+--- 142,148 ----
+          }
+      }
+  
+!     public void closeConnection() {
+  
+          try {
+              if (socket != null) {
+***************
+*** 185,191 ****
+          } catch (Exception e) {}
+      }
+  
+!     private Object getAttribute(int id) throws HsqlException {
+  
+          resultOut.setResultType(ResultConstants.GETSESSIONATTR);
+  
+--- 185,191 ----
+          } catch (Exception e) {}
+      }
+  
+!     public Object getAttribute(int id) throws HsqlException {
+  
+          resultOut.setResultType(ResultConstants.GETSESSIONATTR);
+  
+***************
+*** 198,204 ****
+          return in.rRoot.data[id];
+      }
+  
+!     private void setAttribute(Object property, int id) throws HsqlException {
+  
+          resultOut.setResultType(ResultConstants.SETSESSIONATTR);
+          ArrayUtil.fillArray(resultOut.rRoot.data, null);
+--- 198,204 ----
+          return in.rRoot.data[id];
+      }
+  
+!     public void setAttribute(Object property, int id) throws HsqlException {
+  
+          resultOut.setResultType(ResultConstants.SETSESSIONATTR);
+          ArrayUtil.fillArray(resultOut.rRoot.data, null);
+***************
+*** 319,329 ****
+          databaseID = resultIn.databaseID;
+      }
+  
+!     protected void write(Result r) throws IOException, HsqlException {
+          Result.write(r, rowOut, dataOutput);
+      }
+  
+!     protected Result read() throws IOException, HsqlException {
+  
+          Result r = Result.read(rowIn, dataInput);
+  
+--- 319,329 ----
+          databaseID = resultIn.databaseID;
+      }
+  
+!     public void write(Result r) throws IOException, HsqlException {
+          Result.write(r, rowOut, dataOutput);
+      }
+  
+!     public Result read() throws IOException, HsqlException {
+  
+          Result r = Result.read(rowIn, dataInput);
+  
+diff -cr misc/hsqldb/src/org/hsqldb/HsqlDateTime.java misc/build/hsqldb/src/org/hsqldb/HsqlDateTime.java
+*** misc/hsqldb/src/org/hsqldb/HsqlDateTime.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/HsqlDateTime.java	2005-06-30 04:01:30.000000000 -0400
+***************
+*** 74,86 ****
+       * A reusable static value for today's date. Should only be accessed
+       * by getToday()
+       */
+!     private static Calendar today          = new GregorianCalendar();
+!     private static Calendar tempCal        = new GregorianCalendar();
+!     private static Calendar tempCalDefault = new GregorianCalendar();
+!     private static Calendar tempCalGMT =
+          new GregorianCalendar(TimeZone.getTimeZone("GMT"));
+!     private static Date tempDate = new Date(0);
+!     private static Date currentDate;
+  
+      static {
+          resetToday(System.currentTimeMillis());
+--- 74,86 ----
+       * A reusable static value for today's date. Should only be accessed
+       * by getToday()
+       */
+!     public static Calendar today          = new GregorianCalendar();
+!     public static Calendar tempCal        = new GregorianCalendar();
+!     public static Calendar tempCalDefault = new GregorianCalendar();
+!     public static Calendar tempCalGMT =
+          new GregorianCalendar(TimeZone.getTimeZone("GMT"));
+!     public static Date tempDate = new Date(0);
+!     public static Date currentDate;
+  
+      static {
+          resetToday(System.currentTimeMillis());
+***************
+*** 229,238 ****
+          return new Timestamp(millis);
+      }
+  
+!     private static final String sdftPattern     = "HH:mm:ss";
+!     private static final String sdfdPattern     = "yyyy-MM-dd";
+!     private static final String sdftsPattern    = "yyyy-MM-dd HH:mm:ss.";
+!     private static final String sdftsSysPattern = "yyyy-MM-dd HH:mm:ss.SSS";
+      static SimpleDateFormat     sdfd = new SimpleDateFormat(sdfdPattern);
+      static SimpleDateFormat     sdft = new SimpleDateFormat(sdftPattern);
+      static SimpleDateFormat     sdfts = new SimpleDateFormat(sdftsPattern);
+--- 229,238 ----
+          return new Timestamp(millis);
+      }
+  
+!     public static final String sdftPattern     = "HH:mm:ss";
+!     public static final String sdfdPattern     = "yyyy-MM-dd";
+!     public static final String sdftsPattern    = "yyyy-MM-dd HH:mm:ss.";
+!     public static final String sdftsSysPattern = "yyyy-MM-dd HH:mm:ss.SSS";
+      static SimpleDateFormat     sdfd = new SimpleDateFormat(sdfdPattern);
+      static SimpleDateFormat     sdft = new SimpleDateFormat(sdftPattern);
+      static SimpleDateFormat     sdfts = new SimpleDateFormat(sdftsPattern);
+***************
+*** 266,272 ****
+          }
+      }
+  
+!     private static java.util.Date sysDate = new java.util.Date();
+  
+      public static String getSytemTimeString() {
+  
+--- 266,272 ----
+          }
+      }
+  
+!     public static java.util.Date sysDate = new java.util.Date();
+  
+      public static String getSytemTimeString() {
+  
+***************
+*** 338,344 ****
+      /**
+       * resets the static reusable value today
+       */
+!     private static synchronized void resetToday(long millis) {
+  
+  //#ifdef JDBC3
+          // Use method directly
+--- 338,344 ----
+      /**
+       * resets the static reusable value today
+       */
+!     public static synchronized void resetToday(long millis) {
+  
+  //#ifdef JDBC3
+          // Use method directly
+***************
+*** 359,370 ****
+  
+      /**
+       * Sets the time in the given Calendar using the given milliseconds value; wrapper method to
+!      * allow use of more efficient JDK1.4 method on JDK1.4 (was protected in earlier versions).
+       *
+       * @param       cal                             the Calendar
+       * @param       millis                  the time value in milliseconds
+       */
+!     private static void setTimeInMillis(Calendar cal, long millis) {
+  
+  //#ifdef JDBC3
+          // Use method directly
+--- 359,370 ----
+  
+      /**
+       * Sets the time in the given Calendar using the given milliseconds value; wrapper method to
+!      * allow use of more efficient JDK1.4 method on JDK1.4 (was public in earlier versions).
+       *
+       * @param       cal                             the Calendar
+       * @param       millis                  the time value in milliseconds
+       */
+!     public static void setTimeInMillis(Calendar cal, long millis) {
+  
+  //#ifdef JDBC3
+          // Use method directly
+***************
+*** 404,410 ****
+  
+      /**
+       * Gets the time from the given Calendar as a milliseconds value; wrapper method to
+!      * allow use of more efficient JDK1.4 method on JDK1.4 (was protected in earlier versions).
+       *
+       * @param       cal                             the Calendar
+       * @return      the time value in milliseconds
+--- 404,410 ----
+  
+      /**
+       * Gets the time from the given Calendar as a milliseconds value; wrapper method to
+!      * allow use of more efficient JDK1.4 method on JDK1.4 (was public in earlier versions).
+       *
+       * @param       cal                             the Calendar
+       * @return      the time value in milliseconds
+***************
+*** 515,521 ****
+          }
+      }
+  
+!     private final static char[][] dateTokens     = {
+          {
+              'R', 'R', 'R', 'R'
+          }, {
+--- 515,521 ----
+          }
+      }
+  
+!     public final static char[][] dateTokens     = {
+          {
+              'R', 'R', 'R', 'R'
+          }, {
+***************
+*** 564,570 ****
+              'P', '.', 'M', '.'
+          }
+      };
+!     private final static String[] javaDateTokens = {
+          "yyyy", "yyyy", "yyyy", "yy", "yy", "G", "G", "G", "G", "MMM",
+          "MMMMM", "E", "w", "dd", "D", "k", "K", "K", "mm", "ss", "aaa", "aaa",
+          "aaa", "aaa"
+--- 564,570 ----
+              'P', '.', 'M', '.'
+          }
+      };
+!     public final static String[] javaDateTokens = {
+          "yyyy", "yyyy", "yyyy", "yy", "yy", "G", "G", "G", "G", "MMM",
+          "MMMMM", "E", "w", "dd", "D", "k", "K", "K", "mm", "ss", "aaa", "aaa",
+          "aaa", "aaa"
+***************
+*** 615,624 ****
+       */
+      static class Tokenizer {
+  
+!         private int     last;
+!         private int     offset;
+!         private long    state;
+!         private boolean consumed;
+  
+          public Tokenizer() {
+              reset();
+--- 615,624 ----
+       */
+      static class Tokenizer {
+  
+!         public int     last;
+!         public int     offset;
+!         public long    state;
+!         public boolean consumed;
+  
+          public Tokenizer() {
+              reset();
+***************
+*** 664,678 ****
+           * @param bit
+           * @return
+           */
+!         private boolean isZeroBit(int bit) {
+!             return (state & (1L << bit)) == 0;
+          }
+  
+          /**
+           * Sets the specified bit.
+           * @param bit
+           */
+!         private void setBit(int bit) {
+              state |= (1L << bit);
+          }
+  
+--- 664,680 ----
+           * @param bit
+           * @return
+           */
+!         public boolean isZeroBit(int bit) {
+!             if ((state & (1L << bit)) == 0)
+! 		return true;
+!             return false;
+          }
+  
+          /**
+           * Sets the specified bit.
+           * @param bit
+           */
+!         public void setBit(int bit) {
+              state |= (1L << bit);
+          }
+  
+diff -cr misc/hsqldb/src/org/hsqldb/HsqlException.java misc/build/hsqldb/src/org/hsqldb/HsqlException.java
+*** misc/hsqldb/src/org/hsqldb/HsqlException.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/HsqlException.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 42,50 ****
+   */
+  public class HsqlException extends Exception {
+  
+!     private String message;
+!     private String state;
+!     private int    code;
+  
+      /**
+       * @param message String
+--- 42,50 ----
+   */
+  public class HsqlException extends Exception {
+  
+!     public String message;
+!     public String state;
+!     public int    code;
+  
+      /**
+       * @param message String
+diff -cr misc/hsqldb/src/org/hsqldb/HsqlNameManager.java misc/build/hsqldb/src/org/hsqldb/HsqlNameManager.java
+*** misc/hsqldb/src/org/hsqldb/HsqlNameManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/HsqlNameManager.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 61,74 ****
+   */
+  public class HsqlNameManager {
+  
+!     private static HsqlNameManager staticManager = new HsqlNameManager();
+  
+      static {
+          staticManager.serialNumber = Integer.MIN_VALUE;
+      }
+  
+!     private int serialNumber = 1;    // 0 is reserved in lookups
+!     private int sysNumber    = 0;
+  
+      static HsqlName newHsqlSystemObjectName(String name) {
+          return new HsqlName(staticManager, name);
+--- 61,74 ----
+   */
+  public class HsqlNameManager {
+  
+!     public static HsqlNameManager staticManager = new HsqlNameManager();
+  
+      static {
+          staticManager.serialNumber = Integer.MIN_VALUE;
+      }
+  
+!     public int serialNumber = 1;    // 0 is reserved in lookups
+!     public int sysNumber    = 0;
+  
+      static HsqlName newHsqlSystemObjectName(String name) {
+          return new HsqlName(staticManager, name);
+***************
+*** 133,153 ****
+          boolean           isNameQuoted;
+          public String     statementName;
+          public HsqlName   schema;
+!         private final int hashCode;
+  
+!         private HsqlName(HsqlNameManager man) {
+              manager  = man;
+              hashCode = manager.serialNumber++;
+          }
+  
+!         private HsqlName(HsqlNameManager man, String name, boolean isquoted) {
+  
+              this(man);
+  
+              rename(name, isquoted);
+          }
+  
+!         private HsqlName(HsqlNameManager man, String prefix, String name,
+                           boolean isquoted) {
+  
+              this(man);
+--- 133,153 ----
+          boolean           isNameQuoted;
+          public String     statementName;
+          public HsqlName   schema;
+!         public final int hashCode;
+  
+!         public HsqlName(HsqlNameManager man) {
+              manager  = man;
+              hashCode = manager.serialNumber++;
+          }
+  
+!         public HsqlName(HsqlNameManager man, String name, boolean isquoted) {
+  
+              this(man);
+  
+              rename(name, isquoted);
+          }
+  
+!         public HsqlName(HsqlNameManager man, String prefix, String name,
+                           boolean isquoted) {
+  
+              this(man);
+***************
+*** 155,161 ****
+              rename(prefix, name, isquoted);
+          }
+  
+!         private HsqlName(HsqlNameManager man, String name) {
+  
+              this(man);
+  
+--- 155,161 ----
+              rename(prefix, name, isquoted);
+          }
+  
+!         public HsqlName(HsqlNameManager man, String name) {
+  
+              this(man);
+  
+diff -cr misc/hsqldb/src/org/hsqldb/HsqlServerFactory.java misc/build/hsqldb/src/org/hsqldb/HsqlServerFactory.java
+*** misc/hsqldb/src/org/hsqldb/HsqlServerFactory.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/HsqlServerFactory.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 49,55 ****
+   */
+  public class HsqlServerFactory {
+  
+!     private HsqlServerFactory() {}
+  
+      public static HsqlSocketRequestHandler createHsqlServer(String dbFilePath,
+              boolean debugMessages, boolean silentMode) throws SQLException {
+--- 49,55 ----
+   */
+  public class HsqlServerFactory {
+  
+!     public HsqlServerFactory() {}
+  
+      public static HsqlSocketRequestHandler createHsqlServer(String dbFilePath,
+              boolean debugMessages, boolean silentMode) throws SQLException {
+diff -cr misc/hsqldb/src/org/hsqldb/HsqlSocketFactory.java misc/build/hsqldb/src/org/hsqldb/HsqlSocketFactory.java
+*** misc/hsqldb/src/org/hsqldb/HsqlSocketFactory.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/HsqlSocketFactory.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 48,55 ****
+  public class HsqlSocketFactory {
+  
+  // ----------------------------- static members ---------------------------------
+!     private static HsqlSocketFactory plainImpl;
+!     private static HsqlSocketFactory sslImpl;
+  
+  // ------------------------------ constructors ---------------------------------
+  
+--- 48,55 ----
+  public class HsqlSocketFactory {
+  
+  // ----------------------------- static members ---------------------------------
+!     public static HsqlSocketFactory plainImpl;
+!     public static HsqlSocketFactory sslImpl;
+  
+  // ------------------------------ constructors ---------------------------------
+  
+***************
+*** 57,63 ****
+       * External construction disabled.  New factory instances are retreived
+       * through the newHsqlSocketFactory method instead.
+       */
+!     protected HsqlSocketFactory() throws Exception {}
+  
+  // ------------------------- factory builder method ----------------------------
+  
+--- 57,63 ----
+       * External construction disabled.  New factory instances are retreived
+       * through the newHsqlSocketFactory method instead.
+       */
+!     public HsqlSocketFactory() throws Exception {}
+  
+  // ------------------------- factory builder method ----------------------------
+  
+***************
+*** 133,139 ****
+      }
+  
+  // ------------------------ static utility methods -----------------------------
+!     private static HsqlSocketFactory getPlainImpl() throws Exception {
+  
+          synchronized (HsqlSocketFactory.class) {
+              if (plainImpl == null) {
+--- 133,139 ----
+      }
+  
+  // ------------------------ static utility methods -----------------------------
+!     public static HsqlSocketFactory getPlainImpl() throws Exception {
+  
+          synchronized (HsqlSocketFactory.class) {
+              if (plainImpl == null) {
+***************
+*** 144,150 ****
+          return plainImpl;
+      }
+  
+!     private static HsqlSocketFactory getSSLImpl() throws Exception {
+  
+          synchronized (HsqlSocketFactory.class) {
+              if (sslImpl == null) {
+--- 144,150 ----
+          return plainImpl;
+      }
+  
+!     public static HsqlSocketFactory getSSLImpl() throws Exception {
+  
+          synchronized (HsqlSocketFactory.class) {
+              if (sslImpl == null) {
+***************
+*** 170,176 ****
+       * @throws Exception if a new secure socket factory cannot
+       *      be constructed
+       */
+!     private static HsqlSocketFactory newFactory(String implClass)
+      throws Exception {
+  
+          Class       clazz;
+--- 170,176 ----
+       * @throws Exception if a new secure socket factory cannot
+       *      be constructed
+       */
+!     public static HsqlSocketFactory newFactory(String implClass)
+      throws Exception {
+  
+          Class       clazz;
+***************
+*** 182,188 ****
+          clazz    = Class.forName(implClass);
+          ctorParm = new Class[0];
+  
+!         // protected constructor
+          ctor    = clazz.getDeclaredConstructor(ctorParm);
+          ctorArg = new Object[0];
+  
+--- 182,188 ----
+          clazz    = Class.forName(implClass);
+          ctorParm = new Class[0];
+  
+!         // public constructor
+          ctor    = clazz.getDeclaredConstructor(ctorParm);
+          ctorArg = new Object[0];
+  
+diff -cr misc/hsqldb/src/org/hsqldb/HsqlSocketFactorySecure.java misc/build/hsqldb/src/org/hsqldb/HsqlSocketFactorySecure.java
+*** misc/hsqldb/src/org/hsqldb/HsqlSocketFactorySecure.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/HsqlSocketFactorySecure.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 65,86 ****
+  // --------------------------------- members -----------------------------------
+  
+      /** The underlying socket factory implementation. */
+!     protected Object socketFactory;
+  
+      /** The underlying server socket factory implementation. */
+!     protected Object serverSocketFactory;
+  
+      /**
+       * Monitor object to guard against conncurrent modification
+       * of the underlying socket factory implementation member.
+       */
+!     protected final Object socket_factory_mutex = new Object();
+  
+      /**
+       * Monitor object to guard against concurrent modification of
+       * the underlying server socket factory implementation member.
+       */
+!     protected final Object server_socket_factory_mutex = new Object();
+  
+  // ------------------------------ constructors ---------------------------------
+  
+--- 65,86 ----
+  // --------------------------------- members -----------------------------------
+  
+      /** The underlying socket factory implementation. */
+!     public Object socketFactory;
+  
+      /** The underlying server socket factory implementation. */
+!     public Object serverSocketFactory;
+  
+      /**
+       * Monitor object to guard against conncurrent modification
+       * of the underlying socket factory implementation member.
+       */
+!     public final Object socket_factory_mutex = new Object();
+  
+      /**
+       * Monitor object to guard against concurrent modification of
+       * the underlying server socket factory implementation member.
+       */
+!     public final Object server_socket_factory_mutex = new Object();
+  
+  // ------------------------------ constructors ---------------------------------
+  
+***************
+*** 88,94 ****
+       * External construction disabled.  New factory instances are retreived
+       * through the newHsqlSocketFactory method instead.
+       */
+!     protected HsqlSocketFactorySecure() throws Exception {
+  
+          super();
+  
+--- 88,94 ----
+       * External construction disabled.  New factory instances are retreived
+       * through the newHsqlSocketFactory method instead.
+       */
+!     public HsqlSocketFactorySecure() throws Exception {
+  
+          super();
+  
+***************
+*** 174,180 ****
+          return ss;
+      }
+  
+!     private static void dump(String title, String[] as) {
+  
+          Trace.printSystemOut(title);
+          Trace.printSystemOut("----------------------------");
+--- 174,180 ----
+          return ss;
+      }
+  
+!     public static void dump(String title, String[] as) {
+  
+          Trace.printSystemOut(title);
+          Trace.printSystemOut("----------------------------");
+***************
+*** 263,269 ****
+       *      underlying factory
+       * @return the underlying javax.net.ssl.SSLServerSocketFactory
+       */
+!     protected SSLServerSocketFactory getServerSocketFactoryImpl()
+      throws Exception {
+  
+          Object factory;
+--- 263,269 ----
+       *      underlying factory
+       * @return the underlying javax.net.ssl.SSLServerSocketFactory
+       */
+!     public SSLServerSocketFactory getServerSocketFactoryImpl()
+      throws Exception {
+  
+          Object factory;
+***************
+*** 287,293 ****
+       *      underlying factory
+       * @return the underlying javax.net.ssl.SSLSocketFactory
+       */
+!     protected SSLSocketFactory getSocketFactoryImpl() throws Exception {
+  
+          Object factory;
+  
+--- 287,293 ----
+       *      underlying factory
+       * @return the underlying javax.net.ssl.SSLSocketFactory
+       */
+!     public SSLSocketFactory getSocketFactoryImpl() throws Exception {
+  
+          Object factory;
+  
+***************
+*** 313,319 ****
+       * @param session SSLSession used on the connection to host
+       * @throws Exception if the certificate chain cannot be verified
+       */
+!     protected void verify(String host, SSLSession session) throws Exception {
+  
+          X509Certificate[] chain;
+          X509Certificate   certificate;
+--- 313,319 ----
+       * @param session SSLSession used on the connection to host
+       * @throws Exception if the certificate chain cannot be verified
+       */
+!     public void verify(String host, SSLSession session) throws Exception {
+  
+          X509Certificate[] chain;
+          X509Certificate   certificate;
+diff -cr misc/hsqldb/src/org/hsqldb/HTTPClientConnection.java misc/build/hsqldb/src/org/hsqldb/HTTPClientConnection.java
+*** misc/hsqldb/src/org/hsqldb/HTTPClientConnection.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/HTTPClientConnection.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 53,59 ****
+          super(host, port, path, database, isTLS, user, password);
+      }
+  
+!     protected void initConnection(String host, int port,
+                                    boolean isTLS) throws HsqlException {}
+  
+      public synchronized Result execute(Result r) throws HsqlException {
+--- 53,59 ----
+          super(host, port, path, database, isTLS, user, password);
+      }
+  
+!     public void initConnection(String host, int port,
+                                    boolean isTLS) throws HsqlException {}
+  
+      public synchronized Result execute(Result r) throws HsqlException {
+***************
+*** 67,73 ****
+          return result;
+      }
+  
+!     protected void write(Result r) throws IOException, HsqlException {
+  
+          rowOut.reset();
+          r.write(rowOut);
+--- 67,73 ----
+          return result;
+      }
+  
+!     public void write(Result r) throws IOException, HsqlException {
+  
+          rowOut.reset();
+          r.write(rowOut);
+***************
+*** 84,90 ****
+          dataOutput.flush();
+      }
+  
+!     protected Result read() throws IOException, HsqlException {
+  
+          // fredt - for WebServer 4 lines should be skipped
+          // for Servlet, number of lines depends on Servlet container
+--- 84,90 ----
+          dataOutput.flush();
+      }
+  
+!     public Result read() throws IOException, HsqlException {
+  
+          // fredt - for WebServer 4 lines should be skipped
+          // for Servlet, number of lines depends on Servlet container
+diff -cr misc/hsqldb/src/org/hsqldb/Index.java misc/build/hsqldb/src/org/hsqldb/Index.java
+*** misc/hsqldb/src/org/hsqldb/Index.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Index.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 98,116 ****
+      static final int POINTER_INDEX = 2;
+  
+      // fields
+!     private final HsqlName indexName;
+      final boolean[]        colCheck;
+!     private final int[]    colIndex;
+!     private final int[]    colType;
+      final int[]            pkCols;
+      final int[]            pkTypes;
+!     private final boolean  isUnique;    // DDL uniqueness
+!     private final boolean  useRowId;
+      final boolean          isConstraint;
+      final boolean          isForward;
+      final boolean          isTemp;
+!     private Node           root;
+!     private int            depth;
+      final Collation        collation;
+      static IndexRowIterator emptyIterator = new IndexRowIterator(null, null,
+          null);
+--- 98,116 ----
+      static final int POINTER_INDEX = 2;
+  
+      // fields
+!     public final HsqlName indexName;
+      final boolean[]        colCheck;
+!     public final int[]    colIndex;
+!     public final int[]    colType;
+      final int[]            pkCols;
+      final int[]            pkTypes;
+!     public final boolean  isUnique;    // DDL uniqueness
+!     public final boolean  useRowId;
+      final boolean          isConstraint;
+      final boolean          isForward;
+      final boolean          isTemp;
+!     public Node           root;
+!     public int            depth;
+      final Collation        collation;
+      static IndexRowIterator emptyIterator = new IndexRowIterator(null, null,
+          null);
+***************
+*** 305,311 ****
+      /**
+       * Balances part of the tree after an alteration to the index.
+       */
+!     private void balance(Session session, Node x,
+                           boolean isleft) throws HsqlException {
+  
+          while (true) {
+--- 305,311 ----
+      /**
+       * Balances part of the tree after an alteration to the index.
+       */
+!     public void balance(Session session, Node x,
+                           boolean isleft) throws HsqlException {
+  
+          while (true) {
+***************
+*** 586,592 ****
+       * @return matching node or null
+       * @throws HsqlException
+       */
+!     private Node findNotNull(Session session, Object[] rowdata,
+                               int[] rowColMap,
+                               boolean first) throws HsqlException {
+  
+--- 586,592 ----
+       * @return matching node or null
+       * @throws HsqlException
+       */
+!     public Node findNotNull(Session session, Object[] rowdata,
+                               int[] rowColMap,
+                               boolean first) throws HsqlException {
+  
+***************
+*** 974,980 ****
+       *
+       * @throws HsqlException
+       */
+!     private Node child(Node x, boolean isleft) throws HsqlException {
+          return isleft ? x.getLeft()
+                        : x.getRight();
+      }
+--- 974,980 ----
+       *
+       * @throws HsqlException
+       */
+!     public Node child(Node x, boolean isleft) throws HsqlException {
+          return isleft ? x.getLeft()
+                        : x.getRight();
+      }
+***************
+*** 987,993 ****
+       *
+       * @throws HsqlException
+       */
+!     private void replace(Session session, Node x,
+                           Node n) throws HsqlException {
+  
+          if (x.equals(getRoot(session))) {
+--- 987,993 ----
+       *
+       * @throws HsqlException
+       */
+!     public void replace(Session session, Node x,
+                           Node n) throws HsqlException {
+  
+          if (x.equals(getRoot(session))) {
+***************
+*** 1010,1016 ****
+       *
+       * @throws HsqlException
+       */
+!     private void set(Node x, boolean isleft, Node n) throws HsqlException {
+  
+          if (isleft) {
+              x.setLeft(n);
+--- 1010,1016 ----
+       *
+       * @throws HsqlException
+       */
+!     public void set(Node x, boolean isleft, Node n) throws HsqlException {
+  
+          if (isleft) {
+              x.setLeft(n);
+***************
+*** 1127,1133 ****
+       *
+       * @throws HsqlException
+       */
+!     private int compareRowUnique(Session session, Row left,
+                                   Row right) throws HsqlException {
+  
+          Object[] a       = left.getData();
+--- 1127,1133 ----
+       *
+       * @throws HsqlException
+       */
+!     public int compareRowUnique(Session session, Row left,
+                                   Row right) throws HsqlException {
+  
+          Object[] a       = left.getData();
+***************
+*** 1214,1226 ****
+          Session                    session;
+          Index                      index;
+          Node                       nextnode;
+!         protected IndexRowIterator last;
+!         protected IndexRowIterator next;
+  
+          /**
+           * When session == null, rows from all sessions are returned
+           */
+!         private IndexRowIterator(Session session, Index index, Node node) {
+  
+              if (index == null) {
+                  return;
+--- 1214,1226 ----
+          Session                    session;
+          Index                      index;
+          Node                       nextnode;
+!         public IndexRowIterator last;
+!         public IndexRowIterator next;
+  
+          /**
+           * When session == null, rows from all sessions are returned
+           */
+!         public IndexRowIterator(Session session, Index index, Node node) {
+  
+              if (index == null) {
+                  return;
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcCallableStatement.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcCallableStatement.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcCallableStatement.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcCallableStatement.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 296,306 ****
+  implements CallableStatement {
+  
+      /** parameter name => parameter index */
+!     private IntValueHashMap parameterNameMap;
+  
+      /** parameter index => registered OUT type */
+  
+!     //    private IntKeyIntValueHashMap outRegistrationMap;
+  
+      /**
+       * Constructs a new jdbcCallableStatement with the specified connection and
+--- 296,306 ----
+  implements CallableStatement {
+  
+      /** parameter name => parameter index */
+!     public IntValueHashMap parameterNameMap;
+  
+      /** parameter index => registered OUT type */
+  
+!     //    public IntKeyIntValueHashMap outRegistrationMap;
+  
+      /**
+       * Constructs a new jdbcCallableStatement with the specified connection and
+***************
+*** 385,391 ****
+       * @param i the one-based column index to check
+       * @throws SQLException if there is no such OUT or IN OUT column
+       */
+!     private void checkGetParameterIndex(int i) throws SQLException {
+  
+          checkClosed();
+  
+--- 385,391 ----
+       * @param i the one-based column index to check
+       * @throws SQLException if there is no such OUT or IN OUT column
+       */
+!     public void checkGetParameterIndex(int i) throws SQLException {
+  
+          checkClosed();
+  
+***************
+*** 421,427 ****
+       * @throws SQLException if not registered
+       */
+      /*
+!     private void checkIsRegisteredParameterIndex(int parameterIndex)
+      throws SQLException {
+  
+          int    type;
+--- 421,427 ----
+       * @throws SQLException if not registered
+       */
+      /*
+!     public void checkIsRegisteredParameterIndex(int parameterIndex)
+      throws SQLException {
+  
+          int    type;
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcColumnMetaData.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcColumnMetaData.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcColumnMetaData.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcColumnMetaData.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 126,132 ****
+       *
+       * @return a Sring representation of this object
+       */
+!     private String toStringImpl() throws Exception {
+  
+          StringBuffer sb;
+          Field[]      fields;
+--- 126,132 ----
+       *
+       * @return a Sring representation of this object
+       */
+!     public String toStringImpl() throws Exception {
+  
+          StringBuffer sb;
+          Field[]      fields;
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcConnection.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcConnection.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcConnection.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcConnection.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 422,428 ****
+      boolean isInternal;
+  
+      /** Is this connection to a network server instance. */
+!     protected boolean isNetConn;
+  
+      /**
+       * Is this connection closed?
+--- 422,428 ----
+      boolean isInternal;
+  
+      /** Is this connection to a network server instance. */
+!     public boolean isNetConn;
+  
+      /**
+       * Is this connection closed?
+***************
+*** 430,439 ****
+      boolean isClosed;
+  
+      /** The first warning in the chain. Null if there are no warnings. */
+!     private SQLWarning rootWarning;
+  
+      /** Synchronizes concurrent modification of the warning chain */
+!     private Object rootWarning_mutex = new Object();
+  
+      /**
+       * The set of open Statement objects returned by this Connection from
+--- 430,439 ----
+      boolean isClosed;
+  
+      /** The first warning in the chain. Null if there are no warnings. */
+!     public SQLWarning rootWarning;
+  
+      /** Synchronizes concurrent modification of the warning chain */
+!     public Object rootWarning_mutex = new Object();
+  
+      /**
+       * The set of open Statement objects returned by this Connection from
+***************
+*** 441,447 ****
+       * used solely for closing the statements when this Connection is closed.
+       */
+      /*
+!     private org.hsqldb.lib.HashSet statementSet =
+          new org.hsqldb.lib.HashSet();
+       */
+  
+--- 441,447 ----
+       * used solely for closing the statements when this Connection is closed.
+       */
+      /*
+!     public org.hsqldb.lib.HashSet statementSet =
+          new org.hsqldb.lib.HashSet();
+       */
+  
+***************
+*** 2504,2510 ****
+       *  The default implementation simply attempts to silently {@link
+       *  #close() close()} this <code>Connection</code>
+       */
+!     protected void finalize() {
+  
+          try {
+              close();
+--- 2504,2510 ----
+       *  The default implementation simply attempts to silently {@link
+       *  #close() close()} this <code>Connection</code>
+       */
+!     public void finalize() {
+  
+          try {
+              close();
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java	2005-06-30 03:53:38.000000000 -0400
+***************
+*** 283,301 ****
+      static final Integer INT_COLUMNS_NO_NULLS = new Integer(columnNoNulls);
+  
+      // -----------------------------------------------------------------------
+!     // private attributes
+      // -----------------------------------------------------------------------
+  
+      /**
+       * The connection this object uses to retrieve database instance-specific
+       * metadata.
+       */
+!     private jdbcConnection connection;
+  
+      /**
+       * Connection property for schema reporting.
+       */
+!     private boolean useSchemaDefault;
+  
+      /**
+       * A CSV list representing the SQL IN list to use when generating
+--- 283,301 ----
+      static final Integer INT_COLUMNS_NO_NULLS = new Integer(columnNoNulls);
+  
+      // -----------------------------------------------------------------------
+!     // public attributes
+      // -----------------------------------------------------------------------
+  
+      /**
+       * The connection this object uses to retrieve database instance-specific
+       * metadata.
+       */
+!     public jdbcConnection connection;
+  
+      /**
+       * Connection property for schema reporting.
+       */
+!     public boolean useSchemaDefault;
+  
+      /**
+       * A CSV list representing the SQL IN list to use when generating
+***************
+*** 303,309 ****
+       * <code>scope</code> argument is <code>bestRowSession</code>.
+       * @since HSQLDB 1.7.2
+       */
+!     private static final String BRI_SESSION_SCOPE_IN_LIST = "("
+          + bestRowSession + ")";
+  
+      /**
+--- 303,309 ----
+       * <code>scope</code> argument is <code>bestRowSession</code>.
+       * @since HSQLDB 1.7.2
+       */
+!     public static final String BRI_SESSION_SCOPE_IN_LIST = "("
+          + bestRowSession + ")";
+  
+      /**
+***************
+*** 312,318 ****
+       * <code>scope</code> argument is <code>bestRowTemporary</code>.
+       * @since HSQLDB 1.7.2
+       */
+!     private static final String BRI_TEMPORARY_SCOPE_IN_LIST = "("
+          + bestRowTemporary + "," + bestRowTransaction + "," + bestRowSession
+          + ")";
+  
+--- 312,318 ----
+       * <code>scope</code> argument is <code>bestRowTemporary</code>.
+       * @since HSQLDB 1.7.2
+       */
+!     public static final String BRI_TEMPORARY_SCOPE_IN_LIST = "("
+          + bestRowTemporary + "," + bestRowTransaction + "," + bestRowSession
+          + ")";
+  
+***************
+*** 322,328 ****
+       * <code>scope</code> argument is <code>bestRowTransaction</code>.
+       * @since HSQLDB 1.7.2
+       */
+!     private static final String BRI_TRANSACTION_SCOPE_IN_LIST = "("
+          + bestRowTransaction + "," + bestRowSession + ")";
+  
+      /**
+--- 322,328 ----
+       * <code>scope</code> argument is <code>bestRowTransaction</code>.
+       * @since HSQLDB 1.7.2
+       */
+!     public static final String BRI_TRANSACTION_SCOPE_IN_LIST = "("
+          + bestRowTransaction + "," + bestRowSession + ")";
+  
+      /**
+***************
+*** 333,339 ****
+       *
+       * @since HSQLDB 1.7.2
+       */
+!     private static final String selstar = "SELECT * FROM INFORMATION_SCHEMA.";
+  
+      /**
+       * " WHERE 1=1 ". <p>
+--- 333,339 ----
+       *
+       * @since HSQLDB 1.7.2
+       */
+!     public static final String selstar = "SELECT * FROM INFORMATION_SCHEMA.";
+  
+      /**
+       * " WHERE 1=1 ". <p>
+***************
+*** 348,354 ****
+       * end of this and Presto! Everything works :-) <p>
+       * @since HSQLDB 1.7.2
+       */
+!     private static final String whereTrue = " WHERE 1=1";
+  
+      //----------------------------------------------------------------------
+      // First, a variety of minor information about the target database.
+--- 348,354 ----
+       * end of this and Presto! Everything works :-) <p>
+       * @since HSQLDB 1.7.2
+       */
+!     public static final String whereTrue = " WHERE 1=1";
+  
+      //----------------------------------------------------------------------
+      // First, a variety of minor information about the target database.
+***************
+*** 5471,5477 ****
+       *
+       *      </UL>
+       */
+!     private static String and(String id, String op, Object val) {
+  
+          // The JDBC standard for pattern arguments seems to be:
+          //
+--- 5471,5477 ----
+       *
+       *      </UL>
+       */
+!     public static String and(String id, String op, Object val) {
+  
+          // The JDBC standard for pattern arguments seems to be:
+          //
+***************
+*** 5547,5553 ****
+       * @return the result of issuing the statement
+       * @throws SQLException is a database error occurs
+       */
+!     private ResultSet execute(String sql) throws SQLException {
+  
+          // NOTE:
+          // Need to create a jdbcStatement here so jdbcResultSet can return
+--- 5547,5553 ----
+       * @return the result of issuing the statement
+       * @throws SQLException is a database error occurs
+       */
+!     public ResultSet execute(String sql) throws SQLException {
+  
+          // NOTE:
+          // Need to create a jdbcStatement here so jdbcResultSet can return
+***************
+*** 5583,5589 ****
+       * @param where the where condition for the select
+       * @throws SQLException if database error occurs
+       */
+!     private ResultSet executeSelect(String table,
+                                      String where) throws SQLException {
+  
+          String select = selstar + table;
+--- 5583,5589 ----
+       * @param where the where condition for the select
+       * @throws SQLException if database error occurs
+       */
+!     public ResultSet executeSelect(String table,
+                                      String where) throws SQLException {
+  
+          String select = selstar + table;
+***************
+*** 5607,5613 ****
+       *      "SELECT * FROM &lt;table&gt; WHERE 1=1"
+       * @param t the name of the table
+       */
+!     private StringBuffer toQueryPrefix(String t) {
+  
+          StringBuffer sb = new StringBuffer(255);
+  
+--- 5607,5613 ----
+       *      "SELECT * FROM &lt;table&gt; WHERE 1=1"
+       * @param t the name of the table
+       */
+!     public StringBuffer toQueryPrefix(String t) {
+  
+          StringBuffer sb = new StringBuffer(255);
+  
+***************
+*** 5623,5629 ****
+       * @return true if the argument, s, is filter paramter value that
+       *        requires a corresponding IS NULL predicate
+       */
+!     private static boolean wantsIsNull(String s) {
+          return (s != null && s.length() == 0);
+      }
+  
+--- 5623,5629 ----
+       * @return true if the argument, s, is filter paramter value that
+       *        requires a corresponding IS NULL predicate
+       */
+!     public static boolean wantsIsNull(String s) {
+          return (s != null && s.length() == 0);
+      }
+  
+***************
+*** 5632,5638 ****
+       * is present, any DatabaseMetaData call with an empty string as the
+       * schema parameter will use the default schema (noramlly "PUBLIC").
+       */
+!     private String translateSchema(String schemaName) throws SQLException {
+  
+          if (useSchemaDefault && schemaName != null
+                  && schemaName.length() == 0) {
+--- 5632,5638 ----
+       * is present, any DatabaseMetaData call with an empty string as the
+       * schema parameter will use the default schema (noramlly "PUBLIC").
+       */
+!     public String translateSchema(String schemaName) throws SQLException {
+  
+          if (useSchemaDefault && schemaName != null
+                  && schemaName.length() == 0) {
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcDataSource.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcDataSource.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcDataSource.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcDataSource.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 97,123 ****
+      /**
+       * Login timeout
+       */
+!     private int loginTimeout = 0;
+  
+      /**
+       * Log writer
+       */
+!     private transient PrintWriter logWriter;
+  
+      /**
+       * Default password to use for connections
+       */
+!     private String password = "";
+  
+      /**
+       * Default user to use for connections
+       */
+!     private String user = "";
+  
+      /**
+       * Database location
+       */
+!     private String database = "";
+  
+      /**
+       * Constructor
+--- 97,123 ----
+      /**
+       * Login timeout
+       */
+!     public int loginTimeout = 0;
+  
+      /**
+       * Log writer
+       */
+!     public transient PrintWriter logWriter;
+  
+      /**
+       * Default password to use for connections
+       */
+!     public String password = "";
+  
+      /**
+       * Default user to use for connections
+       */
+!     public String user = "";
+  
+      /**
+       * Database location
+       */
+!     public String database = "";
+  
+      /**
+       * Constructor
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcParameterMetaData.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcParameterMetaData.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcParameterMetaData.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcParameterMetaData.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 314,320 ****
+       * @return a String representation of this object
+       * @throws Exception if a reflection error occurs
+       */
+!     private String toStringImpl() throws Exception {
+  
+          StringBuffer sb;
+          Method[]     methods;
+--- 314,320 ----
+       * @return a String representation of this object
+       * @throws Exception if a reflection error occurs
+       */
+!     public String toStringImpl() throws Exception {
+  
+          StringBuffer sb;
+          Method[]     methods;
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcPreparedStatement.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcPreparedStatement.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcPreparedStatement.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcPreparedStatement.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 207,244 ****
+  implements PreparedStatement {
+  
+      /** The parameter values for the next non-batch execution. */
+!     protected Object[] parameterValues;
+  
+      /** The SQL types of the parameters. */
+!     protected int[] parameterTypes;
+  
+      /** The (IN, IN OUT, or OUT) modes of parameters */
+!     protected int[] parameterModes;
+  
+      /** Lengths for streams. */
+!     protected int[] streamLengths;
+  
+      /** Has a stream or CLOB / BLOB parameter value. */
+!     protected boolean hasStreams;
+  
+      /**
+       * Description of result set metadata. <p>
+       */
+!     protected Result rsmdDescriptor;
+  
+      /** Description of parameter metadata. */
+!     protected Result pmdDescriptor;
+  
+      /** This object's one and one ResultSetMetaData object. */
+!     protected jdbcResultSetMetaData rsmd;
+  
+  // NOTE:  pmd is declared as Object to avoid yet another #ifdef.
+  
+      /** This object's one and only ParameterMetaData object. */
+!     protected Object pmd;
+  
+      /** The SQL character sequence that this object represents. */
+!     protected String sql;
+  
+      /**
+       * The id with which this object's corresponding
+--- 207,244 ----
+  implements PreparedStatement {
+  
+      /** The parameter values for the next non-batch execution. */
+!     public Object[] parameterValues;
+  
+      /** The SQL types of the parameters. */
+!     public int[] parameterTypes;
+  
+      /** The (IN, IN OUT, or OUT) modes of parameters */
+!     public int[] parameterModes;
+  
+      /** Lengths for streams. */
+!     public int[] streamLengths;
+  
+      /** Has a stream or CLOB / BLOB parameter value. */
+!     public boolean hasStreams;
+  
+      /**
+       * Description of result set metadata. <p>
+       */
+!     public Result rsmdDescriptor;
+  
+      /** Description of parameter metadata. */
+!     public Result pmdDescriptor;
+  
+      /** This object's one and one ResultSetMetaData object. */
+!     public jdbcResultSetMetaData rsmd;
+  
+  // NOTE:  pmd is declared as Object to avoid yet another #ifdef.
+  
+      /** This object's one and only ParameterMetaData object. */
+!     public Object pmd;
+  
+      /** The SQL character sequence that this object represents. */
+!     public String sql;
+  
+      /**
+       * The id with which this object's corresponding
+***************
+*** 247,259 ****
+       * {@link org.hsqldb.CompiledStatementManager CompiledStatementManager}
+       * object.
+       */
+!     protected int statementID;
+  
+      /**
+       * Whether this statement generates only a single row update count in
+       * response to execution.
+       */
+!     protected boolean isRowCount;
+  
+  // fredt@users 20020215 - patch 517028 by peterhudson@users - method defined
+  // fredt@users 20020215 - patch 517028 by peterhudson@users - method defined
+--- 247,259 ----
+       * {@link org.hsqldb.CompiledStatementManager CompiledStatementManager}
+       * object.
+       */
+!     public int statementID;
+  
+      /**
+       * Whether this statement generates only a single row update count in
+       * response to execution.
+       */
+!     public boolean isRowCount;
+  
+  // fredt@users 20020215 - patch 517028 by peterhudson@users - method defined
+  // fredt@users 20020215 - patch 517028 by peterhudson@users - method defined
+***************
+*** 1885,1891 ****
+       *      something other than a single row update count.
+       * @throws SQLException if the argument, yes, does not match
+       */
+!     protected void checkIsRowCount(boolean yes) throws SQLException {
+  
+          if (yes != isRowCount) {
+              int msg = yes ? Trace.JDBC_STATEMENT_NOT_ROW_COUNT
+--- 1885,1891 ----
+       *      something other than a single row update count.
+       * @throws SQLException if the argument, yes, does not match
+       */
+!     public void checkIsRowCount(boolean yes) throws SQLException {
+  
+          if (yes != isRowCount) {
+              int msg = yes ? Trace.JDBC_STATEMENT_NOT_ROW_COUNT
+***************
+*** 1902,1908 ****
+       * @param i The parameter index to check
+       * @throws SQLException if the specified parameter index is invalid
+       */
+!     protected void checkSetParameterIndex(int i) throws SQLException {
+  
+          int    mode;
+          String msg;
+--- 1902,1908 ----
+       * @param i The parameter index to check
+       * @throws SQLException if the specified parameter index is invalid
+       */
+!     public void checkSetParameterIndex(int i) throws SQLException {
+  
+          int    mode;
+          String msg;
+***************
+*** 1941,1947 ****
+       * @param o object
+       * @throws SQLException if either argument is not acceptable.
+       */
+!     private void setParameter(int i, Object o) throws SQLException {
+  
+          checkSetParameterIndex(i);
+  
+--- 1941,1947 ----
+       * @param o object
+       * @throws SQLException if either argument is not acceptable.
+       */
+!     public void setParameter(int i, Object o) throws SQLException {
+  
+          checkSetParameterIndex(i);
+  
+***************
+*** 2023,2029 ****
+       * @param value object to set
+       * @throws SQLException if either argument is not acceptable
+       */
+!     private void setIntParameter(int i, int value) throws SQLException {
+  
+          checkSetParameterIndex(i);
+  
+--- 2023,2029 ----
+       * @param value object to set
+       * @throws SQLException if either argument is not acceptable
+       */
+!     public void setIntParameter(int i, int value) throws SQLException {
+  
+          checkSetParameterIndex(i);
+  
+***************
+*** 2052,2058 ****
+       * @param value object to set
+       * @throws SQLException if either argument is not acceptable
+       */
+!     private void setLongParameter(int i, long value) throws SQLException {
+  
+          checkSetParameterIndex(i);
+  
+--- 2052,2058 ----
+       * @param value object to set
+       * @throws SQLException if either argument is not acceptable
+       */
+!     public void setLongParameter(int i, long value) throws SQLException {
+  
+          checkSetParameterIndex(i);
+  
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcResultSet.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcResultSet.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcResultSet.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcResultSet.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 412,442 ****
+      /**
+       * The current record containing the data for the row
+       */
+!     private Record nCurrent;
+  
+      /** The row upon which this ResultSet is currently positioned. */
+!     private int iCurrentRow;
+  
+      /** When the result of updating the database, the number of updated rows. */
+!     private int iUpdateCount;
+  
+      /** Is current row before the first row? */
+!     private boolean bInit;    // false if before first row
+  
+      /** How many columns does this ResultSet have? */
+      int iColumnCount;
+  
+      /** Did the last getXXX method encounter a null value? */
+!     private boolean bWasNull;
+  
+      /** The ResultSetMetaData object for this ResultSet */
+!     private ResultSetMetaData rsmd;
+  
+      /** Properties of this ResultSet's parent Connection. */
+!     private HsqlProperties connProperties;
+  
+      /** is the connection via network */
+!     private boolean isNetConn;
+  
+      /**
+       * The Statement that generated this result. Null if the result is
+--- 412,442 ----
+      /**
+       * The current record containing the data for the row
+       */
+!     public Record nCurrent;
+  
+      /** The row upon which this ResultSet is currently positioned. */
+!     public int iCurrentRow;
+  
+      /** When the result of updating the database, the number of updated rows. */
+!     public int iUpdateCount;
+  
+      /** Is current row before the first row? */
+!     public boolean bInit;    // false if before first row
+  
+      /** How many columns does this ResultSet have? */
+      int iColumnCount;
+  
+      /** Did the last getXXX method encounter a null value? */
+!     public boolean bWasNull;
+  
+      /** The ResultSetMetaData object for this ResultSet */
+!     public ResultSetMetaData rsmd;
+  
+      /** Properties of this ResultSet's parent Connection. */
+!     public HsqlProperties connProperties;
+  
+      /** is the connection via network */
+!     public boolean isNetConn;
+  
+      /**
+       * The Statement that generated this result. Null if the result is
+***************
+*** 4862,4868 ****
+       *
+       * @throws  SQLException when no row data is available
+       */
+!     private void checkAvailable() throws SQLException {
+  
+          if (rResult == null ||!bInit || nCurrent == null) {
+              throw Util.sqlException(Trace.NO_DATA_IS_AVAILABLE);
+--- 4862,4868 ----
+       *
+       * @throws  SQLException when no row data is available
+       */
+!     public void checkAvailable() throws SQLException {
+  
+          if (rResult == null ||!bInit || nCurrent == null) {
+              throw Util.sqlException(Trace.NO_DATA_IS_AVAILABLE);
+***************
+*** 4874,4880 ****
+       *
+       * @throws SQLException when this result set is closed
+       */
+!     private void checkClosed() throws SQLException {
+  
+          if (rResult == null
+                  || (sqlStatement != null && sqlStatement.isClosed)) {
+--- 4874,4880 ----
+       *
+       * @throws SQLException when this result set is closed
+       */
+!     public void checkClosed() throws SQLException {
+  
+          if (rResult == null
+                  || (sqlStatement != null && sqlStatement.isClosed)) {
+***************
+*** 4901,4907 ****
+       *
+       * @param  o the Object to track
+       */
+!     private boolean checkNull(Object o) {
+  
+          if (o == null) {
+              bWasNull = true;
+--- 4901,4907 ----
+       *
+       * @param  o the Object to track
+       */
+!     public boolean checkNull(Object o) {
+  
+          if (o == null) {
+              bWasNull = true;
+***************
+*** 4929,4935 ****
+       * @throws SQLException when there is no data, the column index is
+       *    invalid, or the conversion cannot be performed
+       */
+!     private Object getColumnInType(int columnIndex,
+                                     int type) throws SQLException {
+  
+          checkAvailable();
+--- 4929,4935 ----
+       * @throws SQLException when there is no data, the column index is
+       *    invalid, or the conversion cannot be performed
+       */
+!     public Object getColumnInType(int columnIndex,
+                                     int type) throws SQLException {
+  
+          checkAvailable();
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 97,118 ****
+       * An array of objects, each of which represents the reported attributes
+       * for  a single column of this object's parent ResultSet.
+       */
+!     private jdbcColumnMetaData[] columnMetaData;
+  
+      /** The number of columns in this object's parent ResultSet. */
+!     private int columnCount;
+  
+      /**
+       * Whether to use the underlying column name or label when reporting
+       * getColumnName().
+       */
+!     private boolean useColumnName;
+  
+      /**
+       * If true, then timings for init() are printed
+       * to the console.
+       */
+!     private static final boolean TRACE = false;
+  
+      /**
+       * Constructs a new jdbcResultSetMetaData object from the specified
+--- 97,118 ----
+       * An array of objects, each of which represents the reported attributes
+       * for  a single column of this object's parent ResultSet.
+       */
+!     public jdbcColumnMetaData[] columnMetaData;
+  
+      /** The number of columns in this object's parent ResultSet. */
+!     public int columnCount;
+  
+      /**
+       * Whether to use the underlying column name or label when reporting
+       * getColumnName().
+       */
+!     public boolean useColumnName;
+  
+      /**
+       * If true, then timings for init() are printed
+       * to the console.
+       */
+!     public static final boolean TRACE = false;
+  
+      /**
+       * Constructs a new jdbcResultSetMetaData object from the specified
+***************
+*** 1137,1143 ****
+       * @throws SQLException when this object's parent ResultSet has
+       *      no such column
+       */
+!     private void checkColumn(int column) throws SQLException {
+  
+          if (column < 1 || column > columnCount) {
+              throw Util.sqlException(Trace.COLUMN_NOT_FOUND,
+--- 1137,1143 ----
+       * @throws SQLException when this object's parent ResultSet has
+       *      no such column
+       */
+!     public void checkColumn(int column) throws SQLException {
+  
+          if (column < 1 || column > columnCount) {
+              throw Util.sqlException(Trace.COLUMN_NOT_FOUND,
+diff -cr misc/hsqldb/src/org/hsqldb/jdbc/jdbcStatement.java misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcStatement.java
+*** misc/hsqldb/src/org/hsqldb/jdbc/jdbcStatement.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcStatement.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 136,160 ****
+      volatile boolean isClosed;
+  
+      /** Is escape processing enabled? */
+!     private boolean isEscapeProcessing = true;
+  
+      /** The connection used to execute this statement. */
+!     protected jdbcConnection connection;
+  
+      /** The maximum number of rows to generate when executing this statement. */
+!     protected int maxRows;
+  
+      /** The result of executing this statement. */
+!     protected Result resultIn;
+  
+      /** The result set type obtained by executing this statement. */
+!     protected int rsType = jdbcResultSet.TYPE_FORWARD_ONLY;
+  
+      /** Used by this statement to communicate non-batched requests. */
+!     protected Result resultOut = new Result(ResultConstants.SQLEXECDIRECT);
+  
+      /** Use by this statement to communicate batched execution requests */
+!     protected Result batchResultOut = null;
+  
+      // boucherb@users
+      // NOTE:
+--- 136,160 ----
+      volatile boolean isClosed;
+  
+      /** Is escape processing enabled? */
+!     public boolean isEscapeProcessing = true;
+  
+      /** The connection used to execute this statement. */
+!     public jdbcConnection connection;
+  
+      /** The maximum number of rows to generate when executing this statement. */
+!     public int maxRows;
+  
+      /** The result of executing this statement. */
+!     public Result resultIn;
+  
+      /** The result set type obtained by executing this statement. */
+!     public int rsType = jdbcResultSet.TYPE_FORWARD_ONLY;
+  
+      /** Used by this statement to communicate non-batched requests. */
+!     public Result resultOut = new Result(ResultConstants.SQLEXECDIRECT);
+  
+      /** Use by this statement to communicate batched execution requests */
+!     public Result batchResultOut = null;
+  
+      // boucherb@users
+      // NOTE:
+***************
+*** 1559,1565 ****
+       * @param sql a character sequence representing the SQL to be executed
+       * @throws SQLException when a database access error occurs
+       */
+!     private void fetchResult(String sql) throws SQLException {
+  
+          if (isEscapeProcessing) {
+              sql = connection.nativeSQL(sql);
+--- 1559,1565 ----
+       * @param sql a character sequence representing the SQL to be executed
+       * @throws SQLException when a database access error occurs
+       */
+!     public void fetchResult(String sql) throws SQLException {
+  
+          if (isEscapeProcessing) {
+              sql = connection.nativeSQL(sql);
+diff -cr misc/hsqldb/src/org/hsqldb/lib/ArrayUtil.java misc/build/hsqldb/src/org/hsqldb/lib/ArrayUtil.java
+*** misc/hsqldb/src/org/hsqldb/lib/ArrayUtil.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/ArrayUtil.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 51,57 ****
+      public static final int        CLASS_CODE_OBJECT  = 'L';
+      public static final int        CLASS_CODE_SHORT   = 'S';
+      public static final int        CLASS_CODE_BOOLEAN = 'Z';
+!     private static IntValueHashMap classCodeMap       = new IntValueHashMap();
+  
+      static {
+          classCodeMap.put(byte.class, ArrayUtil.CLASS_CODE_BYTE);
+--- 51,57 ----
+      public static final int        CLASS_CODE_OBJECT  = 'L';
+      public static final int        CLASS_CODE_SHORT   = 'S';
+      public static final int        CLASS_CODE_BOOLEAN = 'Z';
+!     public static IntValueHashMap classCodeMap       = new IntValueHashMap();
+  
+      static {
+          classCodeMap.put(byte.class, ArrayUtil.CLASS_CODE_BYTE);
+diff -cr misc/hsqldb/src/org/hsqldb/lib/BaseList.java misc/build/hsqldb/src/org/hsqldb/lib/BaseList.java
+*** misc/hsqldb/src/org/hsqldb/lib/BaseList.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/BaseList.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 42,48 ****
+   */
+  abstract class BaseList {
+  
+!     protected int elementCount;
+  
+      abstract Object get(int index);
+  
+--- 42,48 ----
+   */
+  abstract class BaseList {
+  
+!     public int elementCount;
+  
+      abstract Object get(int index);
+  
+***************
+*** 135,141 ****
+          return new BaseListIterator();
+      }
+  
+!     private class BaseListIterator implements Iterator {
+  
+          int     counter = 0;
+          boolean removed;
+--- 135,141 ----
+          return new BaseListIterator();
+      }
+  
+!     public class BaseListIterator implements Iterator {
+  
+          int     counter = 0;
+          boolean removed;
+diff -cr misc/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java misc/build/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java
+*** misc/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 52,68 ****
+   */
+  public class DoubleIntIndex implements IntLookup {
+  
+!     private int           count = 0;
+!     private int           capacity;
+!     private boolean       sorted       = true;
+!     private boolean       sortOnValues = true;
+!     private boolean       hasChanged;
+!     private final boolean fixedSize;
+!     private int[]         keys;
+!     private int[]         values;
+  
+  //
+!     private int targetSearchValue;
+  
+      public DoubleIntIndex(int capacity, boolean fixedSize) {
+  
+--- 52,68 ----
+   */
+  public class DoubleIntIndex implements IntLookup {
+  
+!     public int           count = 0;
+!     public int           capacity;
+!     public boolean       sorted       = true;
+!     public boolean       sortOnValues = true;
+!     public boolean       hasChanged;
+!     public final boolean fixedSize;
+!     public int[]         keys;
+!     public int[]         values;
+  
+  //
+!     public int targetSearchValue;
+  
+      public DoubleIntIndex(int capacity, boolean fixedSize) {
+  
+***************
+*** 395,401 ****
+       * or -1
+       * @return index or -1 if not found
+       */
+!     private int binaryFirstSearch() {
+  
+          int low     = 0;
+          int high    = count;
+--- 395,401 ----
+       * or -1
+       * @return index or -1 if not found
+       */
+!     public int binaryFirstSearch() {
+  
+          int low     = 0;
+          int high    = count;
+***************
+*** 425,431 ****
+       * Returns the index of the lowest element > the given search target
+       *     @return the index
+       */
+!     private int binaryGreaterSearch() {
+  
+          int low     = 0;
+          int high    = count;
+--- 425,431 ----
+       * Returns the index of the lowest element > the given search target
+       *     @return the index
+       */
+!     public int binaryGreaterSearch() {
+  
+          int low     = 0;
+          int high    = count;
+***************
+*** 452,458 ****
+       * or count
+       *     @return the index
+       */
+!     private int binarySlotSearch() {
+  
+          int low     = 0;
+          int high    = count;
+--- 452,458 ----
+       * or count
+       *     @return the index
+       */
+!     public int binarySlotSearch() {
+  
+          int low     = 0;
+          int high    = count;
+***************
+*** 478,484 ****
+       * or count or -1 if target is found
+       * @return the index
+       */
+!     private int binaryEmptySlotSearch() {
+  
+          int low     = 0;
+          int high    = count;
+--- 478,484 ----
+       * or count or -1 if target is found
+       * @return the index
+       */
+!     public int binaryEmptySlotSearch() {
+  
+          int low     = 0;
+          int high    = count;
+***************
+*** 501,507 ****
+          return low;
+      }
+  
+!     private synchronized void fastQuickSort() {
+  
+          quickSort(0, count - 1);
+          insertionSort(0, count - 1);
+--- 501,507 ----
+          return low;
+      }
+  
+!     public synchronized void fastQuickSort() {
+  
+          quickSort(0, count - 1);
+          insertionSort(0, count - 1);
+***************
+*** 509,515 ****
+          sorted = true;
+      }
+  
+!     private void quickSort(int l, int r) {
+  
+          int M = 4;
+          int i;
+--- 509,515 ----
+          sorted = true;
+      }
+  
+!     public void quickSort(int l, int r) {
+  
+          int M = 4;
+          int i;
+***************
+*** 556,562 ****
+          }
+      }
+  
+!     private void insertionSort(int lo0, int hi0) {
+  
+          int i;
+          int j;
+--- 556,562 ----
+          }
+      }
+  
+!     public void insertionSort(int lo0, int hi0) {
+  
+          int i;
+          int j;
+***************
+*** 574,580 ****
+          }
+      }
+  
+!     private void moveAndInsertRow(int i, int j) {
+  
+          int col1 = keys[i];
+          int col2 = values[i];
+--- 574,580 ----
+          }
+      }
+  
+!     public void moveAndInsertRow(int i, int j) {
+  
+          int col1 = keys[i];
+          int col2 = values[i];
+***************
+*** 585,598 ****
+          values[j] = col2;
+      }
+  
+!     private void doubleCapacity() {
+  
+          keys     = (int[]) ArrayUtil.resizeArray(keys, capacity * 2);
+          values   = (int[]) ArrayUtil.resizeArray(values, capacity * 2);
+          capacity *= 2;
+      }
+  
+!     private void swap(int i1, int i2) {
+  
+          int col1 = keys[i1];
+          int col2 = values[i1];
+--- 585,598 ----
+          values[j] = col2;
+      }
+  
+!     public void doubleCapacity() {
+  
+          keys     = (int[]) ArrayUtil.resizeArray(keys, capacity * 2);
+          values   = (int[]) ArrayUtil.resizeArray(values, capacity * 2);
+          capacity *= 2;
+      }
+  
+!     public void swap(int i1, int i2) {
+  
+          int col1 = keys[i1];
+          int col2 = values[i1];
+***************
+*** 603,609 ****
+          values[i2] = col2;
+      }
+  
+!     private void moveRows(int fromIndex, int toIndex, int rows) {
+          System.arraycopy(keys, fromIndex, keys, toIndex, rows);
+          System.arraycopy(values, fromIndex, values, toIndex, rows);
+      }
+--- 603,609 ----
+          values[i2] = col2;
+      }
+  
+!     public void moveRows(int fromIndex, int toIndex, int rows) {
+          System.arraycopy(keys, fromIndex, keys, toIndex, rows);
+          System.arraycopy(values, fromIndex, values, toIndex, rows);
+      }
+***************
+*** 631,637 ****
+       * @param i the index
+       * @return -1, 0 or +1
+       */
+!     private int compare(int i) {
+  
+          if (sortOnValues) {
+              if (targetSearchValue > values[i]) {
+--- 631,637 ----
+       * @param i the index
+       * @return -1, 0 or +1
+       */
+!     public int compare(int i) {
+  
+          if (sortOnValues) {
+              if (targetSearchValue > values[i]) {
+***************
+*** 668,674 ****
+       * @param j the second index
+       * @return true or false
+       */
+!     private boolean lessThan(int i, int j) {
+  
+          if (sortOnValues) {
+              if (values[i] < values[j]) {
+--- 668,674 ----
+       * @param j the second index
+       * @return true or false
+       */
+!     public boolean lessThan(int i, int j) {
+  
+          if (sortOnValues) {
+              if (values[i] < values[j]) {
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HashMappedList.java misc/build/hsqldb/src/org/hsqldb/lib/HashMappedList.java
+*** misc/hsqldb/src/org/hsqldb/lib/HashMappedList.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HashMappedList.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 182,188 ****
+          return getLookup(key, key.hashCode());
+      }
+  
+!     private void checkRange(int i) {
+  
+          if (i < 0 || i >= size()) {
+              throw new IndexOutOfBoundsException();
+--- 182,188 ----
+          return getLookup(key, key.hashCode());
+      }
+  
+!     public void checkRange(int i) {
+  
+          if (i < 0 || i >= size()) {
+              throw new IndexOutOfBoundsException();
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlArrayHeap.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlArrayHeap.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlArrayHeap.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlArrayHeap.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 43,51 ****
+  public class HsqlArrayHeap implements HsqlHeap {
+  
+  // --------------------------------- members -----------------------------------
+!     protected ObjectComparator oc;
+!     protected int              count;
+!     protected Object[]         heap;
+  
+  // ------------------------------ constructors ---------------------------------
+  
+--- 43,51 ----
+  public class HsqlArrayHeap implements HsqlHeap {
+  
+  // --------------------------------- members -----------------------------------
+!     public ObjectComparator oc;
+!     public int              count;
+!     public Object[]         heap;
+  
+  // ------------------------------ constructors ---------------------------------
+  
+***************
+*** 311,317 ****
+  //        System.arraycopy(oldheap, 0, heap, 0, count);
+  //    }
+  // -------------------- internal implementation methods ------------------------
+!     private void increaseCapacity() {
+  
+          Object[] oldheap;
+  
+--- 311,317 ----
+  //        System.arraycopy(oldheap, 0, heap, 0, count);
+  //    }
+  // -------------------- internal implementation methods ------------------------
+!     public void increaseCapacity() {
+  
+          Object[] oldheap;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 45,56 ****
+  
+  //fredt@users
+  /*
+!     private static Reporter reporter = new Reporter();
+  
+!     private static class Reporter {
+  
+!         private static int initCounter   = 0;
+!         private static int updateCounter = 0;
+  
+          Reporter() {
+  
+--- 45,56 ----
+  
+  //fredt@users
+  /*
+!     public static Reporter reporter = new Reporter();
+  
+!     public static class Reporter {
+  
+!         public static int initCounter   = 0;
+!         public static int updateCounter = 0;
+  
+          Reporter() {
+  
+***************
+*** 59,65 ****
+              } catch (SecurityException e) {}
+          }
+  
+!         protected void finalize() {
+  
+              System.out.println("HsqlArrayList init count: " + initCounter);
+              System.out.println("HsqlArrayList update count: "
+--- 59,65 ----
+              } catch (SecurityException e) {}
+          }
+  
+!         public void finalize() {
+  
+              System.out.println("HsqlArrayList init count: " + initCounter);
+              System.out.println("HsqlArrayList update count: "
+***************
+*** 67,76 ****
+          }
+      }
+  */
+!     private static final int   DEFAULT_INITIAL_CAPACITY = 10;
+!     private static final float DEFAULT_RESIZE_FACTOR    = 2.0f;
+!     private Object[]           elementData;
+!     private boolean            minimizeOnClear;
+  
+      /** Creates a new instance of HsqlArrayList */
+      public HsqlArrayList() {
+--- 67,76 ----
+          }
+      }
+  */
+!     public static final int   DEFAULT_INITIAL_CAPACITY = 10;
+!     public static final float DEFAULT_RESIZE_FACTOR    = 2.0f;
+!     public Object[]           elementData;
+!     public boolean            minimizeOnClear;
+  
+      /** Creates a new instance of HsqlArrayList */
+      public HsqlArrayList() {
+***************
+*** 220,226 ****
+          return elementCount;
+      }
+  
+!     private void increaseCapacity() {
+  
+          Object[] newArray =
+              new Object[(int) (elementData.length * DEFAULT_RESIZE_FACTOR)];
+--- 220,226 ----
+          return elementCount;
+      }
+  
+!     public void increaseCapacity() {
+  
+          Object[] newArray =
+              new Object[(int) (elementData.length * DEFAULT_RESIZE_FACTOR)];
+***************
+*** 241,247 ****
+  
+          Enumeration en = new Enumeration() {
+  
+!             private int pos = 0;
+  
+              public Object nextElement() {
+  
+--- 241,247 ----
+  
+          Enumeration en = new Enumeration() {
+  
+!             public int pos = 0;
+  
+              public Object nextElement() {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlByteArrayInputStream.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlByteArrayInputStream.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlByteArrayInputStream.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlByteArrayInputStream.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 47,56 ****
+  public class HsqlByteArrayInputStream extends InputStream
+  implements DataInput {
+  
+!     protected byte[] buf;
+!     protected int    pos;
+!     protected int    mark = 0;
+!     protected int    count;
+  
+      public HsqlByteArrayInputStream(byte[] buf) {
+  
+--- 47,56 ----
+  public class HsqlByteArrayInputStream extends InputStream
+  implements DataInput {
+  
+!     public byte[] buf;
+!     public int    pos;
+!     public int    mark = 0;
+!     public int    count;
+  
+      public HsqlByteArrayInputStream(byte[] buf) {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 48,55 ****
+  public class HsqlByteArrayOutputStream extends java.io.OutputStream
+  implements DataOutput {
+  
+!     protected byte[] buf;
+!     protected int    count;
+  
+      public HsqlByteArrayOutputStream() {
+          this(128);
+--- 48,55 ----
+  public class HsqlByteArrayOutputStream extends java.io.OutputStream
+  implements DataOutput {
+  
+!     public byte[] buf;
+!     public int    count;
+  
+      public HsqlByteArrayOutputStream() {
+          this(128);
+***************
+*** 253,259 ****
+          return this.buf;
+      }
+  
+!     protected void ensureRoom(int extra) {
+  
+          int newcount = count + extra;
+  
+--- 253,259 ----
+          return this.buf;
+      }
+  
+!     public void ensureRoom(int extra) {
+  
+          int newcount = count + extra;
+  
+***************
+*** 267,273 ****
+          }
+      }
+  
+!     protected void reset(int newSize) {
+  
+          count = 0;
+  
+--- 267,273 ----
+          }
+      }
+  
+!     public void reset(int newSize) {
+  
+          count = 0;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlDeque.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlDeque.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlDeque.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlDeque.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 47,59 ****
+   */
+  public class HsqlDeque extends BaseList implements HsqlList {
+  
+!     private Object[] list;
+!     private int      firstindex = 0;    // index of first list element
+!     private int      endindex   = 0;    // index of last list element + 1
+  
+      // can grow to fill list
+      // if elementCount == 0 then firstindex == endindex
+!     private static final int DEFAULT_INITIAL_CAPACITY = 10;
+  
+      public HsqlDeque() {
+          list = new Object[DEFAULT_INITIAL_CAPACITY];
+--- 47,59 ----
+   */
+  public class HsqlDeque extends BaseList implements HsqlList {
+  
+!     public Object[] list;
+!     public int      firstindex = 0;    // index of first list element
+!     public int      endindex   = 0;    // index of last list element + 1
+  
+      // can grow to fill list
+      // if elementCount == 0 then firstindex == endindex
+!     public static final int DEFAULT_INITIAL_CAPACITY = 10;
+  
+      public HsqlDeque() {
+          list = new Object[DEFAULT_INITIAL_CAPACITY];
+***************
+*** 210,216 ****
+          }
+      }
+  
+!     private int getInternalIndex(int i) throws IndexOutOfBoundsException {
+  
+          if (i < 0 || i >= elementCount) {
+              throw new IndexOutOfBoundsException();
+--- 210,216 ----
+          }
+      }
+  
+!     public int getInternalIndex(int i) throws IndexOutOfBoundsException {
+  
+          if (i < 0 || i >= elementCount) {
+              throw new IndexOutOfBoundsException();
+***************
+*** 225,231 ****
+          return index;
+      }
+  
+!     private void resetCapacity() {
+  
+          if (elementCount < list.length) {
+              return;
+--- 225,231 ----
+          return index;
+      }
+  
+!     public void resetCapacity() {
+  
+          if (elementCount < list.length) {
+              return;
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlLinkedList.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlLinkedList.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlLinkedList.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlLinkedList.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 46,55 ****
+       * A reference to the head of the list.  It is a dummy head (that is, the
+       * Node for index 0 is actually first.next).
+       */
+!     private Node first;
+  
+      /** A reference to the tail of the list */
+!     private Node last;
+  
+      /**
+       * Creates a new instance of HsqlLinkedList.
+--- 46,55 ----
+       * A reference to the head of the list.  It is a dummy head (that is, the
+       * Node for index 0 is actually first.next).
+       */
+!     public Node first;
+  
+      /** A reference to the tail of the list */
+!     public Node last;
+  
+      /**
+       * Creates a new instance of HsqlLinkedList.
+***************
+*** 197,203 ****
+       * index within the list (0 &lt;= <code>index</code> &lt;
+       * <code>size</code>).
+       */
+!     protected final Node getInternal(int index) {
+  
+          //Check preconditions for the index variable
+          if (index >= size()) {
+--- 197,203 ----
+       * index within the list (0 &lt;= <code>index</code> &lt;
+       * <code>size</code>).
+       */
+!     public final Node getInternal(int index) {
+  
+          //Check preconditions for the index variable
+          if (index >= size()) {
+***************
+*** 232,238 ****
+       * jcpeck@users
+       * @version 05/24/2002
+       */
+!     private static class Node {
+  
+          public Node   next;
+          public Object data;
+--- 232,238 ----
+       * jcpeck@users
+       * @version 05/24/2002
+       */
+!     public static class Node {
+  
+          public Node   next;
+          public Object data;
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlTaskQueue.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlTaskQueue.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlTaskQueue.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlTaskQueue.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 43,52 ****
+  public class HsqlTaskQueue {
+  
+      /** The thread used to process commands */
+!     protected Thread taskRunnerThread;
+  
+      /** Special queue element to signal termination */
+!     protected static final Runnable SHUTDOWNTASK = new Runnable() {
+          public void run() {}
+      };
+  
+--- 43,52 ----
+  public class HsqlTaskQueue {
+  
+      /** The thread used to process commands */
+!     public Thread taskRunnerThread;
+  
+      /** Special queue element to signal termination */
+!     public static final Runnable SHUTDOWNTASK = new Runnable() {
+          public void run() {}
+      };
+  
+***************
+*** 55,73 ****
+       *
+       * Once set true, stays true forever
+       */
+!     protected volatile boolean isShutdown;
+  
+      public synchronized Thread getTaskRunnerThread() {
+          return taskRunnerThread;
+      }
+  
+!     protected synchronized void clearThread() {
+          taskRunnerThread = null;
+      }
+  
+!     protected final HsqlDeque queue = new HsqlDeque();
+  
+!     protected class TaskRunner implements Runnable {
+  
+          public void run() {
+  
+--- 55,73 ----
+       *
+       * Once set true, stays true forever
+       */
+!     public volatile boolean isShutdown;
+  
+      public synchronized Thread getTaskRunnerThread() {
+          return taskRunnerThread;
+      }
+  
+!     public synchronized void clearThread() {
+          taskRunnerThread = null;
+      }
+  
+!     public final HsqlDeque queue = new HsqlDeque();
+  
+!     public class TaskRunner implements Runnable {
+  
+          public void run() {
+  
+***************
+*** 101,107 ****
+          }
+      }
+  
+!     protected final TaskRunner taskRunner = new TaskRunner();
+  
+      public HsqlTaskQueue() {}
+  
+--- 101,107 ----
+          }
+      }
+  
+!     public final TaskRunner taskRunner = new TaskRunner();
+  
+      public HsqlTaskQueue() {}
+  
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlThreadFactory.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlThreadFactory.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlThreadFactory.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlThreadFactory.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 47,53 ****
+       * The factory implementation.  Typically, this will be the
+       * HsqlThreadFactory object itself.
+       */
+!     protected ThreadFactory factory;
+  
+      /**
+       * Constructs a new HsqlThreadFactory that uses itself as the factory
+--- 47,53 ----
+       * The factory implementation.  Typically, this will be the
+       * HsqlThreadFactory object itself.
+       */
+!     public ThreadFactory factory;
+  
+      /**
+       * Constructs a new HsqlThreadFactory that uses itself as the factory
+diff -cr misc/hsqldb/src/org/hsqldb/lib/HsqlTimer.java misc/build/hsqldb/src/org/hsqldb/lib/HsqlTimer.java
+*** misc/hsqldb/src/org/hsqldb/lib/HsqlTimer.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/HsqlTimer.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 47,63 ****
+  public class HsqlTimer implements ObjectComparator {
+  
+      /** The priority queue for the scheduled tasks. */
+!     protected final TaskQueue taskQueue = new TaskQueue(16,
+          (ObjectComparator) this);
+  
+      /** The inner runnable that executes tasks in the background thread. */
+!     protected final TaskRunner taskRunner = new TaskRunner();
+  
+      /** The background thread. */
+!     protected Thread taskRunnerThread;
+  
+      /** The factory that procduces the background threads. */
+!     protected ThreadFactory threadFactory;
+  
+      /**
+       * Constructs a new HsqlTimer using the default thread factory
+--- 47,63 ----
+  public class HsqlTimer implements ObjectComparator {
+  
+      /** The priority queue for the scheduled tasks. */
+!     public final TaskQueue taskQueue = new TaskQueue(16,
+          (ObjectComparator) this);
+  
+      /** The inner runnable that executes tasks in the background thread. */
+!     public final TaskRunner taskRunner = new TaskRunner();
+  
+      /** The background thread. */
+!     public Thread taskRunnerThread;
+  
+      /** The factory that procduces the background threads. */
+!     public ThreadFactory threadFactory;
+  
+      /**
+       * Constructs a new HsqlTimer using the default thread factory
+***************
+*** 359,365 ****
+       * @param b if true, use fixed rate else use fixed period
+       * @return a reference to the scheduled task
+       */
+!     protected Task addTask(long n, Runnable r, long p, boolean b) {
+  
+          Task task;
+  
+--- 359,365 ----
+       * @param b if true, use fixed rate else use fixed period
+       * @return a reference to the scheduled task
+       */
+!     public Task addTask(long n, Runnable r, long p, boolean b) {
+  
+          Task task;
+  
+***************
+*** 375,381 ****
+      }
+  
+      /** Sets the background thread to null. */
+!     protected synchronized void clearThread() {
+          taskRunnerThread = null;
+      }
+  
+--- 375,381 ----
+      }
+  
+      /** Sets the background thread to null. */
+!     public synchronized void clearThread() {
+          taskRunnerThread = null;
+      }
+  
+***************
+*** 385,391 ****
+       *
+       * @return the next task to execute, or null
+       */
+!     protected synchronized Task nextTask() {
+  
+          Task    task;
+          long    now;
+--- 385,391 ----
+       *
+       * @return the next task to execute, or null
+       */
+!     public synchronized Task nextTask() {
+  
+          Task    task;
+          long    now;
+***************
+*** 452,458 ****
+       *
+       * @return System.currentTimeMillis()
+       */
+!     private static long now() {
+  
+          nowCount++;
+  
+--- 452,458 ----
+       *
+       * @return System.currentTimeMillis()
+       */
+!     public static long now() {
+  
+          nowCount++;
+  
+***************
+*** 467,473 ****
+       * but using an inner class protects the public run method
+       * from potential abuse.
+       */
+!     protected class TaskRunner implements Runnable {
+  
+          public void run() {
+  
+--- 467,473 ----
+       * but using an inner class protects the public run method
+       * from potential abuse.
+       */
+!     public class TaskRunner implements Runnable {
+  
+          public void run() {
+  
+***************
+*** 495,501 ****
+       * for execution by the enclosing HsqlTimer's TaskRunner in a
+       * background thread.
+       */
+!     protected class Task {
+  
+          /** What to run */
+          final Runnable runnable;
+--- 495,501 ----
+       * for execution by the enclosing HsqlTimer's TaskRunner in a
+       * background thread.
+       */
+!     public class Task {
+  
+          /** What to run */
+          final Runnable runnable;
+***************
+*** 504,523 ****
+          long period;
+  
+          /** The time this task was last executed, or 0 if never */
+!         private long last;
+  
+          /** The next time this task is scheduled to execute */
+!         private long next;
+  
+          /**
+           * Whether to remove this task instead of running it
+           * the next time it makes its way to the head of the
+           * timer queue.
+           */
+!         private boolean cancelled = false;
+  
+          /** protect the cancelled field under concurrent access */
+!         private Object cancel_mutex = new Object();
+  
+          /**
+           * Whether periodic task is sheduled using fixed delay or fixed rate.
+--- 504,523 ----
+          long period;
+  
+          /** The time this task was last executed, or 0 if never */
+!         public long last;
+  
+          /** The next time this task is scheduled to execute */
+!         public long next;
+  
+          /**
+           * Whether to remove this task instead of running it
+           * the next time it makes its way to the head of the
+           * timer queue.
+           */
+!         public boolean cancelled = false;
+  
+          /** protect the cancelled field under concurrent access */
+!         public Object cancel_mutex = new Object();
+  
+          /**
+           * Whether periodic task is sheduled using fixed delay or fixed rate.
+***************
+*** 628,634 ****
+       * only, as there is no public interface to reinsert Task objects after
+       * they have been removed.
+       */
+!     protected class TaskQueue extends HsqlArrayHeap {
+  
+          /**
+           * Constructs a new TaskQueue with the specified initial capacity and
+--- 628,634 ----
+       * only, as there is no public interface to reinsert Task objects after
+       * they have been removed.
+       */
+!     public class TaskQueue extends HsqlArrayHeap {
+  
+          /**
+           * Constructs a new TaskQueue with the specified initial capacity and
+***************
+*** 702,708 ****
+  //            return name;
+  //        }
+  //
+! //        protected void printstats() {
+  //            System.out.println(this + " avg. latency: " + (total/(runs-1)));
+  //        }
+  //    }
+--- 702,708 ----
+  //            return name;
+  //        }
+  //
+! //        public void printstats() {
+  //            System.out.println(this + " avg. latency: " + (total/(runs-1)));
+  //        }
+  //    }
+diff -cr misc/hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java misc/build/hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java
+*** misc/hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 42,49 ****
+   */
+  public class IntKeyIntValueHashMap extends BaseHashMap {
+  
+!     private Set        keySet;
+!     private Collection values;
+  
+      public IntKeyIntValueHashMap() {
+          this(16, 0.75f);
+--- 42,49 ----
+   */
+  public class IntKeyIntValueHashMap extends BaseHashMap {
+  
+!     public Set        keySet;
+!     public Collection values;
+  
+      public IntKeyIntValueHashMap() {
+          this(16, 0.75f);
+diff -cr misc/hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java misc/build/hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java
+*** misc/hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 42,49 ****
+   */
+  public class LongKeyIntValueHashMap extends BaseHashMap {
+  
+!     private Set        keySet;
+!     private Collection values;
+  
+      public LongKeyIntValueHashMap() {
+          this(16, 0.75f);
+--- 42,49 ----
+   */
+  public class LongKeyIntValueHashMap extends BaseHashMap {
+  
+!     public Set        keySet;
+!     public Collection values;
+  
+      public LongKeyIntValueHashMap() {
+          this(16, 0.75f);
+diff -cr misc/hsqldb/src/org/hsqldb/lib/MD5.java misc/build/hsqldb/src/org/hsqldb/lib/MD5.java
+*** misc/hsqldb/src/org/hsqldb/lib/MD5.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/MD5.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 83,89 ****
+      /**
+       * The jce MD5 message digest generator.
+       */
+!     private static MessageDigest md5;
+  
+      /**
+       * Retrieves a hexidecimal character sequence representing the MD5
+--- 83,89 ----
+      /**
+       * The jce MD5 message digest generator.
+       */
+!     public static MessageDigest md5;
+  
+      /**
+       * Retrieves a hexidecimal character sequence representing the MD5
+diff -cr misc/hsqldb/src/org/hsqldb/lib/SimpleLog.java misc/build/hsqldb/src/org/hsqldb/lib/SimpleLog.java
+*** misc/hsqldb/src/org/hsqldb/lib/SimpleLog.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/SimpleLog.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 45,52 ****
+   */
+  public class SimpleLog {
+  
+!     private PrintWriter writer;
+!     private int         level;
+  
+      public SimpleLog(String path, int level, boolean useFile) {
+  
+--- 45,52 ----
+   */
+  public class SimpleLog {
+  
+!     public PrintWriter writer;
+!     public int         level;
+  
+      public SimpleLog(String path, int level, boolean useFile) {
+  
+***************
+*** 63,69 ****
+          }
+      }
+  
+!     private void makeLog(File file) {
+  
+          try {
+              FileUtil.makeParentDirectories(file);
+--- 63,69 ----
+          }
+      }
+  
+!     public void makeLog(File file) {
+  
+          try {
+              FileUtil.makeParentDirectories(file);
+diff -cr misc/hsqldb/src/org/hsqldb/lib/Sort.java misc/build/hsqldb/src/org/hsqldb/lib/Sort.java
+*** misc/hsqldb/src/org/hsqldb/lib/Sort.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/Sort.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 146,152 ****
+      /**
+       * Swaps the a'th and b'th elements of the specified Row array.
+       */
+!     private static void swap(Object[] w, int a, int b) {
+  
+          Object t = w[a];
+  
+--- 146,152 ----
+      /**
+       * Swaps the a'th and b'th elements of the specified Row array.
+       */
+!     public static void swap(Object[] w, int a, int b) {
+  
+          Object t = w[a];
+  
+diff -cr misc/hsqldb/src/org/hsqldb/lib/StopWatch.java misc/build/hsqldb/src/org/hsqldb/lib/StopWatch.java
+*** misc/hsqldb/src/org/hsqldb/lib/StopWatch.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/StopWatch.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 51,64 ****
+       * from stopped to running state, as reported
+       * by System.currentTimeMillis().
+       */
+!     private long startTime;
+!     private long lastStart;
+  
+      /**
+       * The accumulated running time of this object since
+       * it was last zeroed.
+       */
+!     private long total;
+  
+      /** Flags if this object is started or stopped. */
+      boolean running = false;
+--- 51,64 ----
+       * from stopped to running state, as reported
+       * by System.currentTimeMillis().
+       */
+!     public long startTime;
+!     public long lastStart;
+  
+      /**
+       * The accumulated running time of this object since
+       * it was last zeroed.
+       */
+!     public long total;
+  
+      /** Flags if this object is started or stopped. */
+      boolean running = false;
+diff -cr misc/hsqldb/src/org/hsqldb/lib/StringConverter.java misc/build/hsqldb/src/org/hsqldb/lib/StringConverter.java
+*** misc/hsqldb/src/org/hsqldb/lib/StringConverter.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/StringConverter.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 87,98 ****
+  // fredt@users 20020328 - patch 1.7.0 by fredt - error trapping
+  public class StringConverter {
+  
+!     private static final byte[] HEXBYTES = {
+          (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4',
+          (byte) '5', (byte) '6', (byte) '7', (byte) '8', (byte) '9',
+          (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f'
+      };
+!     private static final String HEXINDEX = "0123456789abcdef0123456789ABCDEF";
+  
+      /**
+       * Converts a String into a byte array by using a big-endian two byte
+--- 87,98 ----
+  // fredt@users 20020328 - patch 1.7.0 by fredt - error trapping
+  public class StringConverter {
+  
+!     public static final byte[] HEXBYTES = {
+          (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4',
+          (byte) '5', (byte) '6', (byte) '7', (byte) '8', (byte) '9',
+          (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f'
+      };
+!     public static final String HEXINDEX = "0123456789abcdef0123456789ABCDEF";
+  
+      /**
+       * Converts a String into a byte array by using a big-endian two byte
+diff -cr misc/hsqldb/src/org/hsqldb/lib/StringInputStream.java misc/build/hsqldb/src/org/hsqldb/lib/StringInputStream.java
+*** misc/hsqldb/src/org/hsqldb/lib/StringInputStream.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/StringInputStream.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 42,51 ****
+   */
+  public class StringInputStream extends InputStream {
+  
+!     protected int    strOffset  = 0;
+!     protected int    charOffset = 0;
+!     protected int    available;
+!     protected String str;
+  
+      public StringInputStream(String s) {
+          str       = s;
+--- 42,51 ----
+   */
+  public class StringInputStream extends InputStream {
+  
+!     public int    strOffset  = 0;
+!     public int    charOffset = 0;
+!     public int    available;
+!     public String str;
+  
+      public StringInputStream(String s) {
+          str       = s;
+diff -cr misc/hsqldb/src/org/hsqldb/lib/WrapperIterator.java misc/build/hsqldb/src/org/hsqldb/lib/WrapperIterator.java
+*** misc/hsqldb/src/org/hsqldb/lib/WrapperIterator.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/WrapperIterator.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 46,62 ****
+   */
+  public class WrapperIterator implements Iterator {
+  
+!     private static final Object[] emptyelements = new Object[0];
+!     private Object[]              elements;
+!     private int                   i;
+  
+      // chained iterators
+!     private boolean  chained;
+!     private Iterator it1;
+!     private Iterator it2;
+  
+      /** return only not null elements */
+!     private boolean notNull;
+  
+      /**
+       * Constructor for an empty iterator. <p>
+--- 46,62 ----
+   */
+  public class WrapperIterator implements Iterator {
+  
+!     public static final Object[] emptyelements = new Object[0];
+!     public Object[]              elements;
+!     public int                   i;
+  
+      // chained iterators
+!     public boolean  chained;
+!     public Iterator it1;
+!     public Iterator it2;
+  
+      /** return only not null elements */
+!     public boolean notNull;
+  
+      /**
+       * Constructor for an empty iterator. <p>
+diff -cr misc/hsqldb/src/org/hsqldb/lib/ZipUnzipFile.java misc/build/hsqldb/src/org/hsqldb/lib/ZipUnzipFile.java
+*** misc/hsqldb/src/org/hsqldb/lib/ZipUnzipFile.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/lib/ZipUnzipFile.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 86,92 ****
+   */
+  public class ZipUnzipFile {
+  
+!     private static final int COPY_BLOCK_SIZE = 1 << 16;
+  
+      public static void compressFile(String infilename, String outfilename,
+                                      FileAccess storage) throws IOException {
+--- 86,92 ----
+   */
+  public class ZipUnzipFile {
+  
+!     public static final int COPY_BLOCK_SIZE = 1 << 16;
+  
+      public static void compressFile(String infilename, String outfilename,
+                                      FileAccess storage) throws IOException {
+diff -cr misc/hsqldb/src/org/hsqldb/Library.java misc/build/hsqldb/src/org/hsqldb/Library.java
+*** misc/hsqldb/src/org/hsqldb/Library.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Library.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 291,297 ****
+          }
+      };
+  
+!     private Library() {}
+  
+      static HashMap getAliasMap() {
+  
+--- 291,297 ----
+          }
+      };
+  
+!     public Library() {}
+  
+      static HashMap getAliasMap() {
+  
+***************
+*** 305,318 ****
+          return h;
+      }
+  
+!     private static void register(HashMap h, String[][] s) {
+  
+          for (int i = 0; i < s.length; i++) {
+              h.put(s[i][0], s[i][1]);
+          }
+      }
+  
+!     private static final Random rRandom = new Random();
+  
+      // NUMERIC FUNCTIONS
+  // fredt@users 20020220 - patch 489184 by xclayl@users - thread safety
+--- 305,318 ----
+          return h;
+      }
+  
+!     public static void register(HashMap h, String[][] s) {
+  
+          for (int i = 0; i < s.length; i++) {
+              h.put(s[i][0], s[i][1]);
+          }
+      }
+  
+!     public static final Random rRandom = new Random();
+  
+      // NUMERIC FUNCTIONS
+  // fredt@users 20020220 - patch 489184 by xclayl@users - thread safety
+***************
+*** 361,367 ****
+      }
+  
+      // this magic number works for 100000000000000; but not for 0.1 and 0.01
+!     private static final double LOG10_FACTOR = 0.43429448190325183;
+  
+      /**
+       * Returns the base 10 logarithm of the given <code>double</code> value.
+--- 361,367 ----
+      }
+  
+      // this magic number works for 100000000000000; but not for 0.1 and 0.01
+!     public static final double LOG10_FACTOR = 0.43429448190325183;
+  
+      /**
+       * Returns the base 10 logarithm of the given <code>double</code> value.
+***************
+*** 1652,1658 ****
+       *           from this value to return the number of date-parts
+       *           between the two arguments.
+       */
+!     private static long getElapsed(int field, java.util.Date d1,
+                                     java.util.Date d2) {
+  
+          // can we do this very simply?
+--- 1652,1658 ----
+       *           from this value to return the number of date-parts
+       *           between the two arguments.
+       */
+!     public static long getElapsed(int field, java.util.Date d1,
+                                     java.util.Date d2) {
+  
+          // can we do this very simply?
+***************
+*** 1932,1938 ****
+  /** @todo  see bitxor and datediff numbering */
+  
+      //
+!     private static final IntValueHashMap functionMap =
+          new IntValueHashMap(67);
+      static final Double piValue = new Double(Library.pi());
+  
+--- 1932,1938 ----
+  /** @todo  see bitxor and datediff numbering */
+  
+      //
+!     public static final IntValueHashMap functionMap =
+          new IntValueHashMap(67);
+      static final Double piValue = new Double(Library.pi());
+  
+diff -cr misc/hsqldb/src/org/hsqldb/Like.java misc/build/hsqldb/src/org/hsqldb/Like.java
+*** misc/hsqldb/src/org/hsqldb/Like.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Like.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 82,93 ****
+  // fredt@users 20031006 - patch 1.7.2 - reuse Like objects for all rows
+  class Like {
+  
+!     private char[]   cLike;
+!     private int[]    wildCardType;
+!     private int      iLen;
+!     private boolean  isIgnoreCase;
+!     private int      iFirstWildCard;
+!     private boolean  isNull;
+      Character        escapeChar;
+      boolean          hasCollation;
+      boolean          optimised;
+--- 82,93 ----
+  // fredt@users 20031006 - patch 1.7.2 - reuse Like objects for all rows
+  class Like {
+  
+!     public char[]   cLike;
+!     public int[]    wildCardType;
+!     public int      iLen;
+!     public boolean  isIgnoreCase;
+!     public int      iFirstWildCard;
+!     public boolean  isNull;
+      Character        escapeChar;
+      boolean          hasCollation;
+      boolean          optimised;
+***************
+*** 121,127 ****
+          normalize(session, s);
+      }
+  
+!     private String getStartsWith() {
+  
+          if (iLen == 0) {
+              return "";
+--- 121,127 ----
+          normalize(session, s);
+      }
+  
+!     public String getStartsWith() {
+  
+          if (iLen == 0) {
+              return "";
+***************
+*** 174,180 ****
+       *
+       * @return
+       */
+!     private boolean compareAt(String s, int i, int j, int jLen) {
+  
+          for (; i < iLen; i++) {
+              switch (wildCardType[i]) {
+--- 174,180 ----
+       *
+       * @return
+       */
+!     public boolean compareAt(String s, int i, int j, int jLen) {
+  
+          for (; i < iLen; i++) {
+              switch (wildCardType[i]) {
+***************
+*** 223,229 ****
+       * @param pattern
+       * @param b
+       */
+!     private void normalize(Session session, String pattern) {
+  
+          isNull = pattern == null;
+  
+--- 223,229 ----
+       * @param pattern
+       * @param b
+       */
+!     public void normalize(Session session, String pattern) {
+  
+          isNull = pattern == null;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/MemoryNode.java misc/build/hsqldb/src/org/hsqldb/MemoryNode.java
+*** misc/hsqldb/src/org/hsqldb/MemoryNode.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/MemoryNode.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 79,85 ****
+   */
+  class MemoryNode extends BaseMemoryNode {
+  
+!     protected Row rData;
+  
+      /**
+       *  A MemoreyNode is permenently linked with the row it refers to.
+--- 79,85 ----
+   */
+  class MemoryNode extends BaseMemoryNode {
+  
+!     public Row rData;
+  
+      /**
+       *  A MemoreyNode is permenently linked with the row it refers to.
+diff -cr misc/hsqldb/src/org/hsqldb/NumberSequence.java misc/build/hsqldb/src/org/hsqldb/NumberSequence.java
+*** misc/hsqldb/src/org/hsqldb/NumberSequence.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/NumberSequence.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 42,59 ****
+   */
+  public class NumberSequence {
+  
+!     private HsqlName name;
+  
+      // original start value - used in CREATE and ALTER commands
+!     private long startValue;
+  
+      // present value
+!     private long currValue;
+  
+      // last value
+!     private long lastValue;
+!     private long increment;
+!     private int  dataType;
+  
+      /**
+       * constructor with initial value and increment;
+--- 42,59 ----
+   */
+  public class NumberSequence {
+  
+!     public HsqlName name;
+  
+      // original start value - used in CREATE and ALTER commands
+!     public long startValue;
+  
+      // present value
+!     public long currValue;
+  
+      // last value
+!     public long lastValue;
+!     public long increment;
+!     public int  dataType;
+  
+      /**
+       * constructor with initial value and increment;
+diff -cr misc/hsqldb/src/org/hsqldb/Parser.java misc/build/hsqldb/src/org/hsqldb/Parser.java
+*** misc/hsqldb/src/org/hsqldb/Parser.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Parser.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 120,137 ****
+   */
+  class Parser {
+  
+!     private Database  database;
+!     private Tokenizer tokenizer;
+!     private Session   session;
+!     private String    sTable;
+!     private String    sToken;
+!     private Object    oData;
+!     private int       iType;
+!     private int       iToken;
+  
+      //
+!     private int           subQueryLevel;
+!     private HsqlArrayList subQueryList = new HsqlArrayList();
+  
+      /**
+       *  Constructs a new Parser object with the given context.
+--- 120,137 ----
+   */
+  class Parser {
+  
+!     public Database  database;
+!     public Tokenizer tokenizer;
+!     public Session   session;
+!     public String    sTable;
+!     public String    sToken;
+!     public Object    oData;
+!     public int       iType;
+!     public int       iToken;
+  
+      //
+!     public int           subQueryLevel;
+!     public HsqlArrayList subQueryList = new HsqlArrayList();
+  
+      /**
+       *  Constructs a new Parser object with the given context.
+***************
+*** 692,698 ****
+  // in other RDBMS's
+  // "SELECT LIMIT n 0" discards the first n rows and returns the remaining rows
+  // fredt@users 20020225 - patch 456679 by hiep256 - TOP keyword
+!     private void parseLimit(String token, Select select,
+                              boolean isEnd) throws HsqlException {
+  
+          if (select.limitCondition != null) {
+--- 692,698 ----
+  // in other RDBMS's
+  // "SELECT LIMIT n 0" discards the first n rows and returns the remaining rows
+  // fredt@users 20020225 - patch 456679 by hiep256 - TOP keyword
+!     public void parseLimit(String token, Select select,
+                              boolean isEnd) throws HsqlException {
+  
+          if (select.limitCondition != null) {
+***************
+*** 771,777 ****
+          throw Trace.error(Trace.WRONG_DATA_TYPE, messageid);
+      }
+  
+!     private void parseOrderBy(Select select,
+                                HsqlArrayList vcolumn) throws HsqlException {
+  
+          String token;
+--- 771,777 ----
+          throw Trace.error(Trace.WRONG_DATA_TYPE, messageid);
+      }
+  
+!     public void parseOrderBy(Select select,
+                                HsqlArrayList vcolumn) throws HsqlException {
+  
+          String token;
+***************
+*** 801,807 ****
+          select.iOrderLen = len;
+      }
+  
+!     private void resolveSelectTableFilter(Select select,
+                                            HsqlArrayList vcolumn,
+                                            HsqlArrayList vfilter)
+                                            throws HsqlException {
+--- 801,807 ----
+          select.iOrderLen = len;
+      }
+  
+!     public void resolveSelectTableFilter(Select select,
+                                            HsqlArrayList vcolumn,
+                                            HsqlArrayList vfilter)
+                                            throws HsqlException {
+***************
+*** 887,893 ****
+       * @throws HsqlException if an ambiguous reference to an alias or
+       *      non-integer column index is encountered
+       */
+!     private static Expression resolveOrderByExpression(Expression e,
+              Select select, HsqlArrayList vcolumn) throws HsqlException {
+  
+          int     visiblecols = select.iResultLen;
+--- 887,893 ----
+       * @throws HsqlException if an ambiguous reference to an alias or
+       *      non-integer column index is encountered
+       */
+!     public static Expression resolveOrderByExpression(Expression e,
+              Select select, HsqlArrayList vcolumn) throws HsqlException {
+  
+          int     visiblecols = select.iResultLen;
+***************
+*** 931,937 ****
+          return e;
+      }
+  
+!     private static Expression resolveOrderByColumnIndex(Expression e,
+              HsqlArrayList vcolumn, int visiblecols) throws HsqlException {
+  
+          // order by 1,2,3
+--- 931,937 ----
+          return e;
+      }
+  
+!     public static Expression resolveOrderByColumnIndex(Expression e,
+              HsqlArrayList vcolumn, int visiblecols) throws HsqlException {
+  
+          // order by 1,2,3
+***************
+*** 950,956 ****
+          throw Trace.error(Trace.INVALID_ORDER_BY);
+      }
+  
+!     private TableFilter parseSimpleTableFilter(int type)
+      throws HsqlException {
+  
+          String alias  = null;
+--- 950,956 ----
+          throw Trace.error(Trace.INVALID_ORDER_BY);
+      }
+  
+!     public TableFilter parseSimpleTableFilter(int type)
+      throws HsqlException {
+  
+          String alias  = null;
+***************
+*** 982,988 ****
+       * @return a newly constructed TableFilter object
+       * @throws  HsqlException if a parsing error occurs
+       */
+!     private TableFilter parseTableFilter(boolean outerjoin)
+      throws HsqlException {
+  
+          Table       t = null;
+--- 982,988 ----
+       * @return a newly constructed TableFilter object
+       * @throws  HsqlException if a parsing error occurs
+       */
+!     public TableFilter parseTableFilter(boolean outerjoin)
+      throws HsqlException {
+  
+          Table       t = null;
+***************
+*** 1050,1056 ****
+       * @param  e2
+       * @return
+       */
+!     private static Expression addCondition(Expression e1, Expression e2) {
+  
+          if (e1 == null) {
+              return e2;
+--- 1050,1056 ----
+       * @param  e2
+       * @return
+       */
+!     public static Expression addCondition(Expression e1, Expression e2) {
+  
+          if (e1 == null) {
+              return e2;
+***************
+*** 1074,1080 ****
+       *      in the join
+       * @return a new Expression object; the conjunction of e1 and e2
+       */
+!     private static Expression addJoinCondition(Expression e1, Expression e2,
+              TableFilter tf, boolean outer) throws HsqlException {
+  
+          if (!e2.setForJoin(tf, outer)) {
+--- 1074,1080 ----
+       *      in the join
+       * @return a new Expression object; the conjunction of e1 and e2
+       */
+!     public static Expression addJoinCondition(Expression e1, Expression e2,
+              TableFilter tf, boolean outer) throws HsqlException {
+  
+          if (!e2.setForJoin(tf, outer)) {
+***************
+*** 1101,1107 ****
+          return r;
+      }
+  
+!     private Expression readAggregate() throws HsqlException {
+  
+          boolean distinct = false;
+          boolean all      = false;
+--- 1101,1107 ----
+          return r;
+      }
+  
+!     public Expression readAggregate() throws HsqlException {
+  
+          boolean distinct = false;
+          boolean all      = false;
+***************
+*** 1146,1152 ****
+       * @return a disjuntion, possibly degenerate
+       * @throws  HsqlException
+       */
+!     private Expression readOr() throws HsqlException {
+  
+          Expression r = readAnd();
+  
+--- 1146,1152 ----
+       * @return a disjuntion, possibly degenerate
+       * @throws  HsqlException
+       */
+!     public Expression readOr() throws HsqlException {
+  
+          Expression r = readAnd();
+  
+***************
+*** 1168,1174 ****
+       * @return a conjunction, possibly degenerate
+       * @throws  HsqlException
+       */
+!     private Expression readAnd() throws HsqlException {
+  
+          Expression r = readCondition();
+  
+--- 1168,1174 ----
+       * @return a conjunction, possibly degenerate
+       * @throws  HsqlException
+       */
+!     public Expression readAnd() throws HsqlException {
+  
+          Expression r = readCondition();
+  
+***************
+*** 1190,1196 ****
+       * @return a predicate, possibly composite
+       * @throws  HsqlException
+       */
+!     private Expression readCondition() throws HsqlException {
+  
+          switch (iToken) {
+  
+--- 1190,1196 ----
+       * @return a predicate, possibly composite
+       * @throws  HsqlException
+       */
+!     public Expression readCondition() throws HsqlException {
+  
+          switch (iToken) {
+  
+***************
+*** 1307,1313 ****
+          }
+      }
+  
+!     private Expression parseLikePredicate(Expression a) throws HsqlException {
+  
+          read();
+  
+--- 1307,1313 ----
+          }
+      }
+  
+!     public Expression parseLikePredicate(Expression a) throws HsqlException {
+  
+          read();
+  
+***************
+*** 1345,1351 ****
+          return a;
+      }
+  
+!     private Expression parseBetweenPredicate(Expression a)
+      throws HsqlException {
+  
+          read();
+--- 1345,1351 ----
+          return a;
+      }
+  
+!     public Expression parseBetweenPredicate(Expression a)
+      throws HsqlException {
+  
+          read();
+***************
+*** 1371,1377 ****
+          return new Expression(Expression.AND, l, h);
+      }
+  
+!     private Expression parseInPredicate(Expression a) throws HsqlException {
+  
+          int type = iToken;
+  
+--- 1371,1377 ----
+          return new Expression(Expression.AND, l, h);
+      }
+  
+!     public Expression parseInPredicate(Expression a) throws HsqlException {
+  
+          int type = iToken;
+  
+***************
+*** 1429,1435 ****
+          return new Expression(type, a, b);
+      }
+  
+!     private Expression parseAllAnyPredicate() throws HsqlException {
+  
+          int type = iToken;
+  
+--- 1429,1435 ----
+          return new Expression(type, a, b);
+      }
+  
+!     public Expression parseAllAnyPredicate() throws HsqlException {
+  
+          int type = iToken;
+  
+***************
+*** 1469,1475 ****
+       * @param  type
+       * @throws  HsqlException
+       */
+!     private void readThis(int type) throws HsqlException {
+          Trace.check(iToken == type, Trace.UNEXPECTED_TOKEN);
+          read();
+      }
+--- 1469,1475 ----
+       * @param  type
+       * @throws  HsqlException
+       */
+!     public void readThis(int type) throws HsqlException {
+          Trace.check(iToken == type, Trace.UNEXPECTED_TOKEN);
+          read();
+      }
+***************
+*** 1480,1486 ****
+       * @return a concatenation, possibly degenerate
+       * @throws  HsqlException
+       */
+!     private Expression readConcat() throws HsqlException {
+  
+          Expression r = readSum();
+  
+--- 1480,1486 ----
+       * @return a concatenation, possibly degenerate
+       * @throws  HsqlException
+       */
+!     public Expression readConcat() throws HsqlException {
+  
+          Expression r = readSum();
+  
+***************
+*** 1517,1523 ****
+       * @return  a summation, possibly degenerate
+       * @throws  HsqlException
+       */
+!     private Expression readSum() throws HsqlException {
+  
+          Expression r = readFactor();
+  
+--- 1517,1523 ----
+       * @return  a summation, possibly degenerate
+       * @throws  HsqlException
+       */
+!     public Expression readSum() throws HsqlException {
+  
+          Expression r = readFactor();
+  
+***************
+*** 1548,1554 ****
+       * @return  a product, possibly degenerate
+       * @throws  HsqlException
+       */
+!     private Expression readFactor() throws HsqlException {
+  
+          Expression r = readTerm();
+  
+--- 1548,1554 ----
+       * @return  a product, possibly degenerate
+       * @throws  HsqlException
+       */
+!     public Expression readFactor() throws HsqlException {
+  
+          Expression r = readTerm();
+  
+***************
+*** 1570,1576 ****
+       * @return  a term, possibly composite
+       * @throws  HsqlException
+       */
+!     private Expression readTerm() throws HsqlException {
+  
+          Expression r = null;
+  
+--- 1570,1576 ----
+       * @return  a term, possibly composite
+       * @throws  HsqlException
+       */
+!     public Expression readTerm() throws HsqlException {
+  
+          Expression r = null;
+  
+***************
+*** 1756,1762 ****
+      /**
+       * Reads part of a CASE .. WHEN  expression
+       */
+!     private Expression parseCaseWhen(Expression r) throws HsqlException {
+  
+          readThis(Expression.WHEN);
+  
+--- 1756,1762 ----
+      /**
+       * Reads part of a CASE .. WHEN  expression
+       */
+!     public Expression parseCaseWhen(Expression r) throws HsqlException {
+  
+          readThis(Expression.WHEN);
+  
+***************
+*** 1782,1788 ****
+      /**
+       * reads a CASEWHEN expression
+       */
+!     private Expression readCaseWhenExpression() throws HsqlException {
+  
+          int        type = iToken;
+          Expression r    = null;
+--- 1782,1788 ----
+      /**
+       * reads a CASEWHEN expression
+       */
+!     public Expression readCaseWhenExpression() throws HsqlException {
+  
+          int        type = iToken;
+          Expression r    = null;
+***************
+*** 1810,1816 ****
+      /**
+       * Reads a CAST or CONVERT expression
+       */
+!     private Expression readCastExpression() throws HsqlException {
+  
+          boolean isConvert = iToken == Expression.CONVERT;
+  
+--- 1810,1816 ----
+      /**
+       * Reads a CAST or CONVERT expression
+       */
+!     public Expression readCastExpression() throws HsqlException {
+  
+          boolean isConvert = iToken == Expression.CONVERT;
+  
+***************
+*** 1870,1876 ****
+      /**
+       * reads a Column or Function expression
+       */
+!     private Expression readColumnExpression() throws HsqlException {
+  
+          String     name = sToken;
+          Expression r    = new Expression(sTable, name);
+--- 1870,1876 ----
+      /**
+       * reads a Column or Function expression
+       */
+!     public Expression readColumnExpression() throws HsqlException {
+  
+          String     name = sToken;
+          Expression r    = new Expression(sTable, name);
+***************
+*** 1920,1926 ****
+      /**
+       * reads a CONCAT expression
+       */
+!     private Expression readConcatExpression() throws HsqlException {
+  
+          int type = iToken;
+  
+--- 1920,1926 ----
+      /**
+       * reads a CONCAT expression
+       */
+!     public Expression readConcatExpression() throws HsqlException {
+  
+          int type = iToken;
+  
+***************
+*** 1941,1947 ****
+      /**
+       * Reads a NULLIF expression
+       */
+!     private Expression readNullIfExpression() throws HsqlException {
+  
+          // turn into a CASEWHEN
+          read();
+--- 1941,1947 ----
+      /**
+       * Reads a NULLIF expression
+       */
+!     public Expression readNullIfExpression() throws HsqlException {
+  
+          // turn into a CASEWHEN
+          read();
+***************
+*** 1966,1972 ****
+      /**
+       * Reads a COALESE or IFNULL expression
+       */
+!     private Expression readCoalesceExpression() throws HsqlException {
+  
+          Expression r = null;
+  
+--- 1966,1972 ----
+      /**
+       * Reads a COALESE or IFNULL expression
+       */
+!     public Expression readCoalesceExpression() throws HsqlException {
+  
+          Expression r = null;
+  
+***************
+*** 2008,2014 ****
+      /**
+       * Reads an EXTRACT expression
+       */
+!     private Expression readExtractExpression() throws HsqlException {
+  
+          read();
+          readThis(Expression.OPEN);
+--- 2008,2014 ----
+      /**
+       * Reads an EXTRACT expression
+       */
+!     public Expression readExtractExpression() throws HsqlException {
+  
+          read();
+          readThis(Expression.OPEN);
+***************
+*** 2035,2041 ****
+      /**
+       * Reads a POSITION expression
+       */
+!     private Expression readPositionExpression() throws HsqlException {
+  
+          read();
+          readThis(Expression.OPEN);
+--- 2035,2041 ----
+      /**
+       * Reads a POSITION expression
+       */
+!     public Expression readPositionExpression() throws HsqlException {
+  
+          read();
+          readThis(Expression.OPEN);
+***************
+*** 2054,2060 ****
+      /**
+       * Reads a SUBSTRING expression
+       */
+!     private Expression readSubstringExpression() throws HsqlException {
+  
+          boolean commas = false;
+  
+--- 2054,2060 ----
+      /**
+       * Reads a SUBSTRING expression
+       */
+!     public Expression readSubstringExpression() throws HsqlException {
+  
+          boolean commas = false;
+  
+***************
+*** 2095,2101 ****
+          return new Expression(f);
+      }
+  
+!     private Expression readSequenceExpression() throws HsqlException {
+  
+          tokenizer.getThis(Token.T_VALUE);
+          tokenizer.getThis(Token.T_FOR);
+--- 2095,2101 ----
+          return new Expression(f);
+      }
+  
+!     public Expression readSequenceExpression() throws HsqlException {
+  
+          tokenizer.getThis(Token.T_VALUE);
+          tokenizer.getThis(Token.T_FOR);
+***************
+*** 2119,2125 ****
+      /**
+       * Reads a TRIM expression
+       */
+!     private Expression readTrimExpression() throws HsqlException {
+  
+          read();
+          readThis(Expression.OPEN);
+--- 2119,2125 ----
+      /**
+       * Reads a TRIM expression
+       */
+!     public Expression readTrimExpression() throws HsqlException {
+  
+          read();
+          readThis(Expression.OPEN);
+***************
+*** 2233,2239 ****
+       *
+       * @throws  HsqlException
+       */
+!     private void read() throws HsqlException {
+  
+          sToken = tokenizer.getString();
+  
+--- 2233,2239 ----
+       *
+       * @throws  HsqlException
+       */
+!     public void read() throws HsqlException {
+  
+          sToken = tokenizer.getString();
+  
+***************
+*** 2342,2353 ****
+       *
+       * @throws HsqlException if a tokenization error occurs
+       */
+!     private void readToken() throws HsqlException {
+          sToken = tokenizer.getString();
+          iToken = tokenSet.get(sToken, -1);
+      }
+  
+!     private static IntValueHashMap tokenSet = new IntValueHashMap(37);
+  
+      static {
+          tokenSet.put(Token.T_COMMA, Expression.COMMA);
+--- 2342,2353 ----
+       *
+       * @throws HsqlException if a tokenization error occurs
+       */
+!     public void readToken() throws HsqlException {
+          sToken = tokenizer.getString();
+          iToken = tokenSet.get(sToken, -1);
+      }
+  
+!     public static IntValueHashMap tokenSet = new IntValueHashMap(37);
+  
+      static {
+          tokenSet.put(Token.T_COMMA, Expression.COMMA);
+***************
+*** 2414,2421 ****
+  // boucherb@users 20030411 - patch 1.7.2 - for prepared statements
+  // ---------------------------------------------------------------
+      HsqlArrayList                     parameters   = new HsqlArrayList();
+!     private static final Expression[] noParameters = new Expression[0];
+!     private static final SubQuery[]   noSubqueries = new SubQuery[0];
+  
+      /**
+       *  Destructive get method
+--- 2414,2421 ----
+  // boucherb@users 20030411 - patch 1.7.2 - for prepared statements
+  // ---------------------------------------------------------------
+      HsqlArrayList                     parameters   = new HsqlArrayList();
+!     public static final Expression[] noParameters = new Expression[0];
+!     public static final SubQuery[]   noSubqueries = new SubQuery[0];
+  
+      /**
+       *  Destructive get method
+***************
+*** 2516,2522 ****
+          return cs;
+      }
+  
+!     private void getInsertColumnValueExpressions(Table t, Expression[] acve,
+              int len) throws HsqlException {
+  
+          boolean    enclosed;
+--- 2516,2522 ----
+          return cs;
+      }
+  
+!     public void getInsertColumnValueExpressions(Table t, Expression[] acve,
+              int len) throws HsqlException {
+  
+          boolean    enclosed;
+diff -cr misc/hsqldb/src/org/hsqldb/persist/Cache.java misc/build/hsqldb/src/org/hsqldb/persist/Cache.java
+*** misc/hsqldb/src/org/hsqldb/persist/Cache.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/Cache.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 54,68 ****
+  public class Cache {
+  
+      final DataFileCache                  dataFileCache;
+!     private int                          capacity;         // number of Rows
+!     private long                         bytesCapacity;    // number of bytes
+!     private final CachedObjectComparator rowComparator;
+  
+  //
+!     private CachedObject[] rowTable;
+  
+  //
+!     private final ObjectCacheHashMap cacheMap;
+      long                             cacheBytesLength;
+  
+      // for testing
+--- 54,68 ----
+  public class Cache {
+  
+      final DataFileCache                  dataFileCache;
+!     public int                          capacity;         // number of Rows
+!     public long                         bytesCapacity;    // number of bytes
+!     public final CachedObjectComparator rowComparator;
+  
+  //
+!     public CachedObject[] rowTable;
+  
+  //
+!     public final ObjectCacheHashMap cacheMap;
+      long                             cacheBytesLength;
+  
+      // for testing
+***************
+*** 147,153 ****
+       * in the cache.
+       *
+       */
+!     private void cleanUp() throws IOException {
+  
+          int removeCount = cacheMap.size() / 2;
+          int accessTarget = cacheMap.getAccessCountCeiling(removeCount,
+--- 147,153 ----
+       * in the cache.
+       *
+       */
+!     public void cleanUp() throws IOException {
+  
+          int removeCount = cacheMap.size() / 2;
+          int accessTarget = cacheMap.getAccessCountCeiling(removeCount,
+***************
+*** 235,241 ****
+          static final int COMPARE_LAST_ACCESS = 0;
+          static final int COMPARE_POSITION    = 1;
+          static final int COMPARE_SIZE        = 2;
+!         private int      compareType;
+  
+          CachedObjectComparator() {}
+  
+--- 235,241 ----
+          static final int COMPARE_LAST_ACCESS = 0;
+          static final int COMPARE_POSITION    = 1;
+          static final int COMPARE_SIZE        = 2;
+!         public int      compareType;
+  
+          CachedObjectComparator() {}
+  
+diff -cr misc/hsqldb/src/org/hsqldb/persist/DataFileBlockManager.java misc/build/hsqldb/src/org/hsqldb/persist/DataFileBlockManager.java
+*** misc/hsqldb/src/org/hsqldb/persist/DataFileBlockManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/DataFileBlockManager.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 42,54 ****
+   */
+  public class DataFileBlockManager {
+  
+!     private DoubleIntIndex lookup;
+!     private final int      capacity;
+!     private int            midSize;
+!     private final int      scale;
+!     private long           releaseCount;
+!     private long           requestCount;
+!     private long           requestSize;
+  
+      // reporting vars
+      long lostFreeBlockSize;
+--- 42,54 ----
+   */
+  public class DataFileBlockManager {
+  
+!     public DoubleIntIndex lookup;
+!     public final int      capacity;
+!     public int            midSize;
+!     public final int      scale;
+!     public long           releaseCount;
+!     public long           requestCount;
+!     public long           requestSize;
+  
+      // reporting vars
+      long lostFreeBlockSize;
+***************
+*** 127,133 ****
+          return lostFreeBlockSize;
+      }
+  
+!     private void resetList() {
+  
+          if (requestCount != 0) {
+              midSize = (int) (requestSize / requestCount);
+--- 127,133 ----
+          return lostFreeBlockSize;
+      }
+  
+!     public void resetList() {
+  
+          if (requestCount != 0) {
+              midSize = (int) (requestSize / requestCount);
+***************
+*** 142,148 ****
+          removeBlocks(first);
+      }
+  
+!     private void removeBlocks(int blocks) {
+  
+          for (int i = 0; i < blocks; i++) {
+              lostFreeBlockSize += lookup.getValue(i);
+--- 142,148 ----
+          removeBlocks(first);
+      }
+  
+!     public void removeBlocks(int blocks) {
+  
+          for (int i = 0; i < blocks; i++) {
+              lostFreeBlockSize += lookup.getValue(i);
+***************
+*** 151,155 ****
+          lookup.removeRange(0, blocks);
+      }
+  
+!     private void checkIntegrity() throws NullPointerException {}
+  }
+--- 151,155 ----
+          lookup.removeRange(0, blocks);
+      }
+  
+!     public void checkIntegrity() throws NullPointerException {}
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/persist/DataFileCache.java misc/build/hsqldb/src/org/hsqldb/persist/DataFileCache.java
+*** misc/hsqldb/src/org/hsqldb/persist/DataFileCache.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/DataFileCache.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 62,68 ****
+   */
+  public class DataFileCache {
+  
+!     private FileAccess fa;
+  
+      // flags
+      public static final int FLAG_ISSAVED = 2;
+--- 62,68 ----
+   */
+  public class DataFileCache {
+  
+!     public FileAccess fa;
+  
+      // flags
+      public static final int FLAG_ISSAVED = 2;
+***************
+*** 76,115 ****
+  
+      //
+      DataFileBlockManager     freeBlocks;
+!     private static final int FREE_BLOCKS_COUNT = 512;
+  
+      //
+!     protected String   fileName;
+!     protected String   backupFileName;
+!     protected Database database;
+  
+      // this flag is used externally to determine if a backup is required
+!     protected boolean fileModified;
+!     protected int     cacheFileScale;
+  
+      // post openning constant fields
+!     protected boolean cacheReadonly;
+  
+      // cache operation mode
+!     protected boolean storeOnInsert;
+  
+      //
+!     protected int     cachedRowPadding = 8;
+!     protected boolean hasRowInfo       = false;
+  
+      // reusable input / output streams
+!     protected RowInputInterface  rowIn;
+!     protected RowOutputInterface rowOut;
+  
+      //
+      public long maxDataFileSize;
+  
+      //
+!     protected Storage dataFile;
+!     protected long    fileFreePosition;
+!     protected int     maxCacheSize;             // number of Rows
+!     protected long    maxCacheBytes;            // number of bytes
+!     protected Cache   cache;
+  
+      public DataFileCache(Database db, String fileName,
+                           String backupName) throws HsqlException {
+--- 76,115 ----
+  
+      //
+      DataFileBlockManager     freeBlocks;
+!     public static final int FREE_BLOCKS_COUNT = 512;
+  
+      //
+!     public String   fileName;
+!     public String   backupFileName;
+!     public Database database;
+  
+      // this flag is used externally to determine if a backup is required
+!     public boolean fileModified;
+!     public int     cacheFileScale;
+  
+      // post openning constant fields
+!     public boolean cacheReadonly;
+  
+      // cache operation mode
+!     public boolean storeOnInsert;
+  
+      //
+!     public int     cachedRowPadding = 8;
+!     public boolean hasRowInfo       = false;
+  
+      // reusable input / output streams
+!     public RowInputInterface  rowIn;
+!     public RowOutputInterface rowOut;
+  
+      //
+      public long maxDataFileSize;
+  
+      //
+!     public Storage dataFile;
+!     public long    fileFreePosition;
+!     public int     maxCacheSize;             // number of Rows
+!     public long    maxCacheBytes;            // number of bytes
+!     public Cache   cache;
+  
+      public DataFileCache(Database db, String fileName,
+                           String backupName) throws HsqlException {
+***************
+*** 127,133 ****
+      /**
+       * initial external parameters are set here.
+       */
+!     protected void initParams() throws HsqlException {
+  
+          int cacheScale = database.getProperties().getIntegerProperty(
+              HsqlDatabaseProperties.hsqldb_cache_scale, 14, 8, 18);
+--- 127,133 ----
+      /**
+       * initial external parameters are set here.
+       */
+!     public void initParams() throws HsqlException {
+  
+          int cacheScale = database.getProperties().getIntegerProperty(
+              HsqlDatabaseProperties.hsqldb_cache_scale, 14, 8, 18);
+***************
+*** 443,449 ****
+       * Free space is requested from the block manager if it exists.
+       * Otherwise the file is grown to accommodate it.
+       */
+!     private int setFilePos(CachedObject r) throws IOException {
+  
+          int rowSize = r.getStorageSize();
+          int i       = freeBlocks == null ? -1
+--- 443,449 ----
+       * Free space is requested from the block manager if it exists.
+       * Otherwise the file is grown to accommodate it.
+       */
+!     public int setFilePos(CachedObject r) throws IOException {
+  
+          int rowSize = r.getStorageSize();
+          int i       = freeBlocks == null ? -1
+***************
+*** 568,581 ****
+          return readObject(i);
+      }
+  
+!     protected int readSize(int pos) throws IOException {
+  
+          dataFile.seek((long) pos * cacheFileScale);
+  
+          return dataFile.readInt();
+      }
+  
+!     protected RowInputInterface readObject(int pos) throws IOException {
+  
+          dataFile.seek((long) pos * cacheFileScale);
+  
+--- 568,581 ----
+          return readObject(i);
+      }
+  
+!     public int readSize(int pos) throws IOException {
+  
+          dataFile.seek((long) pos * cacheFileScale);
+  
+          return dataFile.readInt();
+      }
+  
+!     public RowInputInterface readObject(int pos) throws IOException {
+  
+          dataFile.seek((long) pos * cacheFileScale);
+  
+***************
+*** 595,601 ****
+       * This is called internally when old rows need to be removed from the
+       * cache.
+       */
+!     protected void saveRows(CachedObject[] rows, int offset,
+                              int count) throws IOException {
+  
+          for (int i = offset; i < offset + count; i++) {
+--- 595,601 ----
+       * This is called internally when old rows need to be removed from the
+       * cache.
+       */
+!     public void saveRows(CachedObject[] rows, int offset,
+                              int count) throws IOException {
+  
+          for (int i = offset; i < offset + count; i++) {
+***************
+*** 739,745 ****
+          return fileModified;
+      }
+  
+!     protected void setFileModified() throws IOException {
+  
+          if (!fileModified) {
+  
+--- 739,745 ----
+          return fileModified;
+      }
+  
+!     public void setFileModified() throws IOException {
+  
+          if (!fileModified) {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java misc/build/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java
+*** misc/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 60,70 ****
+      public static final int FILES_NEW          = 2;
+  
+      // sets of properties
+!     private static HashSet fullyProtectedProperties = new HashSet();
+!     private static HashSet setProtectedProperties   = new HashSet();
+!     private static HashSet booleanProperties        = new HashSet();
+!     private static HashSet integralProperties       = new HashSet();
+!     private static HashSet stringProperties         = new HashSet();
+  
+      // versions
+      public static final String VERSION_STRING_1_7_0     = "1.7.0";
+--- 60,70 ----
+      public static final int FILES_NEW          = 2;
+  
+      // sets of properties
+!     public static HashSet fullyProtectedProperties = new HashSet();
+!     public static HashSet setProtectedProperties   = new HashSet();
+!     public static HashSet booleanProperties        = new HashSet();
+!     public static HashSet integralProperties       = new HashSet();
+!     public static HashSet stringProperties         = new HashSet();
+  
+      // versions
+      public static final String VERSION_STRING_1_7_0     = "1.7.0";
+***************
+*** 78,113 ****
+  
+      //
+      public static final String  db_version  = "version";
+!     private static final String db_readonly = "readonly";
+!     private static final String db_modified = "modified";
+  
+      //
+!     private static final String runtime_gc_interval  = "runtime.gc_interval";
+!     private static final String hsqldb_max_nio_scale = "hsqldb.max_nio_scale";
+      public static final String  hsqldb_cache_scale   = "hsqldb.cache_scale";
+      public static final String hsqldb_cache_file_scale =
+          "hsqldb.cache_file_scale";
+      public static final String hsqldb_cache_size_scale =
+          "hsqldb.cache_size_scale";
+      public static final String  hsqldb_cache_version = "hsqldb.cache_version";
+!     private static final String hsqldb_catalogs      = "hsqldb.catalogs";
+      public static final String hsqldb_compatible_version =
+          "hsqldb.compatible_version";
+      public static final String hsqldb_default_table_type =
+          "hsqldb.default_table_type";
+      public static final String hsqldb_defrag_limit = "hsqldb.defrag_limit";
+!     private static final String hsqldb_files_readonly =
+          "hsqldb.files_readonly";
+      public static final String hsqldb_log_size      = "hsqldb.log_size";
+      public static final String hsqldb_nio_data_file = "hsqldb.nio_data_file";
+!     private static final String hsqldb_original_version =
+          "hsqldb.original_version";
+      public static final String hsqldb_script_format = "hsqldb.script_format";
+  
+      //
+!     private static final String sql_compare_in_locale =
+          "sql.compare_in_locale";
+!     private static final String sql_enforce_strict_size =
+          "sql.enforce_strict_size";
+      public static final String sql_tx_no_multi_write =
+          "sql.tx_no_multi_rewrite";
+--- 78,113 ----
+  
+      //
+      public static final String  db_version  = "version";
+!     public static final String db_readonly = "readonly";
+!     public static final String db_modified = "modified";
+  
+      //
+!     public static final String runtime_gc_interval  = "runtime.gc_interval";
+!     public static final String hsqldb_max_nio_scale = "hsqldb.max_nio_scale";
+      public static final String  hsqldb_cache_scale   = "hsqldb.cache_scale";
+      public static final String hsqldb_cache_file_scale =
+          "hsqldb.cache_file_scale";
+      public static final String hsqldb_cache_size_scale =
+          "hsqldb.cache_size_scale";
+      public static final String  hsqldb_cache_version = "hsqldb.cache_version";
+!     public static final String hsqldb_catalogs      = "hsqldb.catalogs";
+      public static final String hsqldb_compatible_version =
+          "hsqldb.compatible_version";
+      public static final String hsqldb_default_table_type =
+          "hsqldb.default_table_type";
+      public static final String hsqldb_defrag_limit = "hsqldb.defrag_limit";
+!     public static final String hsqldb_files_readonly =
+          "hsqldb.files_readonly";
+      public static final String hsqldb_log_size      = "hsqldb.log_size";
+      public static final String hsqldb_nio_data_file = "hsqldb.nio_data_file";
+!     public static final String hsqldb_original_version =
+          "hsqldb.original_version";
+      public static final String hsqldb_script_format = "hsqldb.script_format";
+  
+      //
+!     public static final String sql_compare_in_locale =
+          "sql.compare_in_locale";
+!     public static final String sql_enforce_strict_size =
+          "sql.enforce_strict_size";
+      public static final String sql_tx_no_multi_write =
+          "sql.tx_no_multi_rewrite";
+***************
+*** 173,179 ****
+          stringProperties.addAll(stringPropertiesNames);
+      }
+  
+!     private Database database;
+  
+      public HsqlDatabaseProperties(Database db) {
+  
+--- 173,179 ----
+          stringProperties.addAll(stringPropertiesNames);
+      }
+  
+!     public Database database;
+  
+      public HsqlDatabaseProperties(Database db) {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/persist/HsqlProperties.java misc/build/hsqldb/src/org/hsqldb/persist/HsqlProperties.java
+*** misc/hsqldb/src/org/hsqldb/persist/HsqlProperties.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/HsqlProperties.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 57,68 ****
+  public class HsqlProperties {
+  
+      public static final int NO_VALUE_FOR_KEY = 1;
+!     protected String        fileName;
+!     protected Properties    stringProps;
+!     protected int[]         errorCodes = new int[0];
+!     protected String[]      errorKeys  = new String[0];
+!     protected boolean       resource   = false;
+!     protected FileAccess    fa;
+  
+      public HsqlProperties() {
+          stringProps = new Properties();
+--- 57,68 ----
+  public class HsqlProperties {
+  
+      public static final int NO_VALUE_FOR_KEY = 1;
+!     public String        fileName;
+!     public Properties    stringProps;
+!     public int[]         errorCodes = new int[0];
+!     public String[]      errorKeys  = new String[0];
+!     public boolean       resource   = false;
+!     public FileAccess    fa;
+  
+      public HsqlProperties() {
+          stringProps = new Properties();
+***************
+*** 279,285 ****
+       * is populated during construction or addition of elements and is used
+       * outside this class to act upon the errors.
+       */
+!     private void addError(int code, String key) {
+  
+          errorCodes = (int[]) ArrayUtil.resizeArray(errorCodes,
+                  errorCodes.length + 1);
+--- 279,285 ----
+       * is populated during construction or addition of elements and is used
+       * outside this class to act upon the errors.
+       */
+!     public void addError(int code, String key) {
+  
+          errorCodes = (int[]) ArrayUtil.resizeArray(errorCodes,
+                  errorCodes.length + 1);
+diff -cr misc/hsqldb/src/org/hsqldb/persist/LockFile.java misc/build/hsqldb/src/org/hsqldb/persist/LockFile.java
+*** misc/hsqldb/src/org/hsqldb/persist/LockFile.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/LockFile.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 101,107 ****
+   *    </ul>
+   * </ol> <p>
+   *
+!  * In addition to the generic lock and release rules, the protected methods
+   * {@link #lockImpl() lockImpl()} and {@link #releaseImpl() releaseImpl()}
+   * are called during lock and release attempts, respectively.  This allows
+   * transparent, JDK 1.1 compliant integration of extended strategies for
+--- 101,107 ----
+   *    </ul>
+   * </ol> <p>
+   *
+!  * In addition to the generic lock and release rules, the public methods
+   * {@link #lockImpl() lockImpl()} and {@link #releaseImpl() releaseImpl()}
+   * are called during lock and release attempts, respectively.  This allows
+   * transparent, JDK 1.1 compliant integration of extended strategies for
+***************
+*** 156,165 ****
+  public class LockFile {
+  
+      /** Canonical reference to this object's lock file. */
+!     protected File f;
+  
+      /** Cached value of the lock file's canonical path. */
+!     private String cpath = null;
+  
+      /**
+       * A RandomAccessFile constructed from this object's reference, f, to its
+--- 156,165 ----
+  public class LockFile {
+  
+      /** Canonical reference to this object's lock file. */
+!     public File f;
+  
+      /** Cached value of the lock file's canonical path. */
+!     public String cpath = null;
+  
+      /**
+       * A RandomAccessFile constructed from this object's reference, f, to its
+***************
+*** 168,174 ****
+       * This RandomAccessFile is used to periodically write out the heartbeat
+       * timestamp to this object's lock file.
+       */
+!     protected RandomAccessFile raf;
+  
+      /**
+       * The period, in milliseconds, at which heartbeat timestamps are written
+--- 168,174 ----
+       * This RandomAccessFile is used to periodically write out the heartbeat
+       * timestamp to this object's lock file.
+       */
+!     public RandomAccessFile raf;
+  
+      /**
+       * The period, in milliseconds, at which heartbeat timestamps are written
+***************
+*** 183,200 ****
+      public static final byte[] MAGIC = "HSQLLOCK".getBytes();
+  
+      /** Indicates whether this object has a lock condition on its lock file. */
+!     protected boolean locked;
+  
+      /**
+       * The timed scheduler with which to register this object's
+       * heartbeat task.
+       */
+!     protected static final HsqlTimer timer = DatabaseManager.getTimer();
+  
+      /**
+       * An opaque reference to this object's heatbeat task.
+       */
+!     private Object timerTask;
+  
+      /**
+       * Attempts to read the hearbeat timestamp from this object's lock file
+--- 183,200 ----
+      public static final byte[] MAGIC = "HSQLLOCK".getBytes();
+  
+      /** Indicates whether this object has a lock condition on its lock file. */
+!     public boolean locked;
+  
+      /**
+       * The timed scheduler with which to register this object's
+       * heartbeat task.
+       */
+!     public static final HsqlTimer timer = DatabaseManager.getTimer();
+  
+      /**
+       * An opaque reference to this object's heatbeat task.
+       */
+!     public Object timerTask;
+  
+      /**
+       * Attempts to read the hearbeat timestamp from this object's lock file
+***************
+*** 219,225 ****
+       *        or isolated class loader context currently has a
+       *        lock condition on this object's lock file
+       */
+!     private void checkHeartbeat() throws Exception {
+  
+          long   lastHeartbeat;
+          String mn;
+--- 219,225 ----
+       *        or isolated class loader context currently has a
+       *        lock condition on this object's lock file
+       */
+!     public void checkHeartbeat() throws Exception {
+  
+          long   lastHeartbeat;
+          String mn;
+***************
+*** 270,276 ****
+       *
+       * @throws Exception if an IOException occurs
+       */
+!     private void closeRAF() throws Exception {
+  
+          String mn;
+  
+--- 270,276 ----
+       *
+       * @throws Exception if an IOException occurs
+       */
+!     public void closeRAF() throws Exception {
+  
+          String mn;
+  
+***************
+*** 300,306 ****
+       * @param file a reference to the file this object is to use as its
+       *      lock file
+       */
+!     private void setFile(File file) throws Exception {
+  
+          if (isLocked()) {
+              try {
+--- 300,306 ----
+       * @param file a reference to the file this object is to use as its
+       *      lock file
+       */
+!     public void setFile(File file) throws Exception {
+  
+          if (isLocked()) {
+              try {
+***************
+*** 355,361 ****
+       *        actions are taken or the actions succeed,
+       *        else <code>false</code>.
+       */
+!     protected boolean lockImpl() throws Exception {
+  
+          String mn;
+  
+--- 355,361 ----
+       *        actions are taken or the actions succeed,
+       *        else <code>false</code>.
+       */
+!     public boolean lockImpl() throws Exception {
+  
+          String mn;
+  
+***************
+*** 372,378 ****
+       *
+       * @throws Exception if an IOException occurs
+       */
+!     private void openRAF() throws Exception {
+  
+          trace("openRAF(): entered.");
+  
+--- 372,378 ----
+       *
+       * @throws Exception if an IOException occurs
+       */
+!     public void openRAF() throws Exception {
+  
+          trace("openRAF(): entered.");
+  
+***************
+*** 394,400 ****
+       *      file does not exist, Long.MIN_VALUE, the earliest time
+       *      representable as a long in Java,
+       */
+!     private long readHeartbeat() throws Exception {
+  
+          DataInputStream dis;
+          long            heartbeat;
+--- 394,400 ----
+       *      file does not exist, Long.MIN_VALUE, the earliest time
+       *      representable as a long in Java,
+       */
+!     public long readHeartbeat() throws Exception {
+  
+          DataInputStream dis;
+          long            heartbeat;
+***************
+*** 447,453 ****
+       *        to be determined. (e.g. an IO exception
+       *        occurs here).
+       */
+!     protected boolean releaseImpl() throws Exception {
+  
+          trace("releaseImpl(): no action: returning true");
+  
+--- 447,453 ----
+       *        to be determined. (e.g. an IO exception
+       *        occurs here).
+       */
+!     public boolean releaseImpl() throws Exception {
+  
+          trace("releaseImpl(): no action: returning true");
+  
+***************
+*** 455,461 ****
+      }
+  
+      /** Schedules the lock heartbeat task. */
+!     private void startHeartbeat() {
+  
+          Runnable r;
+  
+--- 455,461 ----
+      }
+  
+      /** Schedules the lock heartbeat task. */
+!     public void startHeartbeat() {
+  
+          Runnable r;
+  
+***************
+*** 475,481 ****
+      }
+  
+      /** Cancels the lock heartbeat task. */
+!     private void stopHeartbeat() {
+  
+          String mn = "stopHeartbeat(): ";
+  
+--- 475,481 ----
+      }
+  
+      /** Cancels the lock heartbeat task. */
+!     public void stopHeartbeat() {
+  
+          String mn = "stopHeartbeat(): ";
+  
+***************
+*** 497,503 ****
+       * @throws Exception if the magic value cannot be written to
+       *      the lock file
+       */
+!     private void writeMagic() throws Exception {
+  
+          String mn   = "writeMagic(): ";
+          String path = "lock file [" + cpath + "]";
+--- 497,503 ----
+       * @throws Exception if the magic value cannot be written to
+       *      the lock file
+       */
+!     public void writeMagic() throws Exception {
+  
+          String mn   = "writeMagic(): ";
+          String path = "lock file [" + cpath + "]";
+***************
+*** 517,523 ****
+       * @throws Exception if the current heartbeat timestamp value
+       *      cannot be written
+       */
+!     private void writeHeartbeat() throws Exception {
+  
+          long   time;
+          String mn   = "writeHeartbeat(): ";
+--- 517,523 ----
+       * @throws Exception if the current heartbeat timestamp value
+       *      cannot be written
+       */
+!     public void writeHeartbeat() throws Exception {
+  
+          long   time;
+          String mn   = "writeHeartbeat(): ";
+***************
+*** 752,758 ****
+       * This Runnable class provides the implementation for the timed task
+       * that periodically writes out a heartbeat timestamp to the lock file.<p>
+       */
+!     protected class HeartbeatRunner implements Runnable {
+  
+          public void run() {
+  
+--- 752,758 ----
+       * This Runnable class provides the implementation for the timed task
+       * that periodically writes out a heartbeat timestamp to the lock file.<p>
+       */
+!     public class HeartbeatRunner implements Runnable {
+  
+          public void run() {
+  
+***************
+*** 797,803 ****
+       * @return an implementation-specific tail value for the toString() method
+       * @see #toString
+       */
+!     protected String toStringImpl() {
+          return "";
+      }
+  
+--- 797,803 ----
+       * @return an implementation-specific tail value for the toString() method
+       * @see #toString
+       */
+!     public String toStringImpl() {
+          return "";
+      }
+  
+***************
+*** 954,960 ****
+       *
+       * @param o the value to print
+       */
+!     protected void trace(Object o) {
+  
+          if (Trace.TRACE) {
+              Trace.printSystemOut("[" + super.toString() + "]: " + o);
+--- 954,960 ----
+       *
+       * @param o the value to print
+       */
+!     public void trace(Object o) {
+  
+          if (Trace.TRACE) {
+              Trace.printSystemOut("[" + super.toString() + "]: " + o);
+***************
+*** 969,975 ****
+       *        trying to release the lock condition,
+       *        if any, that it has on its lock file.
+       */
+!     protected void finalize() throws Throwable {
+          trace("finalize(): calling tryRelease()");
+          tryRelease();
+      }
+--- 969,975 ----
+       *        trying to release the lock condition,
+       *        if any, that it has on its lock file.
+       */
+!     public void finalize() throws Throwable {
+          trace("finalize(): calling tryRelease()");
+          tryRelease();
+      }
+diff -cr misc/hsqldb/src/org/hsqldb/persist/Log.java misc/build/hsqldb/src/org/hsqldb/persist/Log.java
+*** misc/hsqldb/src/org/hsqldb/persist/Log.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/Log.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 125,144 ****
+   */
+  public class Log {
+  
+!     private HsqlDatabaseProperties properties;
+!     private String                 fileName;
+!     private Database               database;
+!     private FileAccess             fa;
+!     private ScriptWriterBase       dbLogWriter;
+!     private String                 scriptFileName;
+!     private String                 cacheFileName;
+!     private String                 backupFileName;
+!     private String                 logFileName;
+!     private boolean                filesReadOnly;
+!     private long                   maxLogSize;
+!     private int                    writeDelay;
+!     private int                    scriptFormat;
+!     private DataFileCache          cache;
+  
+      Log(Database db) throws HsqlException {
+  
+--- 125,144 ----
+   */
+  public class Log {
+  
+!     public HsqlDatabaseProperties properties;
+!     public String                 fileName;
+!     public Database               database;
+!     public FileAccess             fa;
+!     public ScriptWriterBase       dbLogWriter;
+!     public String                 scriptFileName;
+!     public String                 cacheFileName;
+!     public String                 backupFileName;
+!     public String                 logFileName;
+!     public boolean                filesReadOnly;
+!     public long                   maxLogSize;
+!     public int                    writeDelay;
+!     public int                    scriptFormat;
+!     public DataFileCache          cache;
+  
+      Log(Database db) throws HsqlException {
+  
+***************
+*** 542,548 ****
+       * Wrappers for openning-starting / stoping-closing the log file and
+       * writer.
+       */
+!     private void openLog() throws HsqlException {
+  
+          if (filesReadOnly) {
+              return;
+--- 542,548 ----
+       * Wrappers for openning-starting / stoping-closing the log file and
+       * writer.
+       */
+!     public void openLog() throws HsqlException {
+  
+          if (filesReadOnly) {
+              return;
+***************
+*** 560,566 ****
+          }
+      }
+  
+!     private synchronized void closeLog() throws HsqlException {
+  
+          if (dbLogWriter != null) {
+              dbLogWriter.close();
+--- 560,566 ----
+          }
+      }
+  
+!     public synchronized void closeLog() throws HsqlException {
+  
+          if (dbLogWriter != null) {
+              dbLogWriter.close();
+***************
+*** 570,576 ****
+      /**
+       * Write the .script file as .script.new.
+       */
+!     private void writeScript(boolean full) throws HsqlException {
+  
+          String sNewName = scriptFileName + ".new";
+  
+--- 570,576 ----
+      /**
+       * Write the .script file as .script.new.
+       */
+!     public void writeScript(boolean full) throws HsqlException {
+  
+          String sNewName = scriptFileName + ".new";
+  
+***************
+*** 593,599 ****
+      /**
+       * Performs all the commands in the .script file.
+       */
+!     private void processScript() throws HsqlException {
+  
+          ScriptReaderBase scr = null;
+  
+--- 593,599 ----
+      /**
+       * Performs all the commands in the .script file.
+       */
+!     public void processScript() throws HsqlException {
+  
+          ScriptReaderBase scr = null;
+  
+***************
+*** 628,634 ****
+      /**
+       * Defrag large data files when the sum of .log and .data files is large.
+       */
+!     private void processDataFile() throws HsqlException {
+  
+          if (cache == null || filesReadOnly || database.isStoredFileAccess()
+                  ||!fa.isStreamElement(logFileName)) {
+--- 628,634 ----
+      /**
+       * Defrag large data files when the sum of .log and .data files is large.
+       */
+!     public void processDataFile() throws HsqlException {
+  
+          if (cache == null || filesReadOnly || database.isStoredFileAccess()
+                  ||!fa.isStreamElement(logFileName)) {
+***************
+*** 647,653 ****
+      /**
+       * Performs all the commands in the .log file.
+       */
+!     private void processLog() throws HsqlException {
+  
+          if (!database.isFilesInJar() && fa.isStreamElement(logFileName)) {
+              ScriptRunner.runScript(database, logFileName,
+--- 647,653 ----
+      /**
+       * Performs all the commands in the .log file.
+       */
+!     public void processLog() throws HsqlException {
+  
+          if (!database.isFilesInJar() && fa.isStreamElement(logFileName)) {
+              ScriptRunner.runScript(database, logFileName,
+***************
+*** 658,664 ****
+      /**
+       * Restores a compressed backup or the .data file.
+       */
+!     private void restoreBackup() throws HsqlException {
+  
+          // in case data file cannot be deleted, reset it
+          DataFileCache.deleteOrResetFreePos(database, cacheFileName);
+--- 658,664 ----
+      /**
+       * Restores a compressed backup or the .data file.
+       */
+!     public void restoreBackup() throws HsqlException {
+  
+          // in case data file cannot be deleted, reset it
+          DataFileCache.deleteOrResetFreePos(database, cacheFileName);
+***************
+*** 675,681 ****
+      }
+  
+  // fredt@users 20020221 - patch 513005 by sqlbob@users (RMP) - text tables
+!     private HashMap textCacheList = new HashMap();
+  
+      DataFileCache openTextCache(Table table, String source,
+                                  boolean readOnlyData,
+--- 675,681 ----
+      }
+  
+  // fredt@users 20020221 - patch 513005 by sqlbob@users (RMP) - text tables
+!     public HashMap textCacheList = new HashMap();
+  
+      DataFileCache openTextCache(Table table, String source,
+                                  boolean readOnlyData,
+***************
+*** 722,728 ****
+          }
+      }
+  
+!     private void closeAllTextCaches(boolean compact) throws HsqlException {
+  
+          Iterator it = textCacheList.values().iterator();
+  
+--- 722,728 ----
+          }
+      }
+  
+!     public void closeAllTextCaches(boolean compact) throws HsqlException {
+  
+          Iterator it = textCacheList.values().iterator();
+  
+***************
+*** 735,741 ****
+          }
+      }
+  
+!     private void reopenAllTextCaches() throws HsqlException {
+  
+          Iterator it = textCacheList.values().iterator();
+  
+--- 735,741 ----
+          }
+      }
+  
+!     public void reopenAllTextCaches() throws HsqlException {
+  
+          Iterator it = textCacheList.values().iterator();
+  
+***************
+*** 744,750 ****
+          }
+      }
+  
+!     private boolean isAnyTextCacheModified() {
+  
+          Iterator it = textCacheList.values().iterator();
+  
+--- 744,750 ----
+          }
+      }
+  
+!     public boolean isAnyTextCacheModified() {
+  
+          Iterator it = textCacheList.values().iterator();
+  
+diff -cr misc/hsqldb/src/org/hsqldb/persist/NIOLockFile.java misc/build/hsqldb/src/org/hsqldb/persist/NIOLockFile.java
+*** misc/hsqldb/src/org/hsqldb/persist/NIOLockFile.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/NIOLockFile.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 61,73 ****
+       * The <code>fc</code> attribute is used to obtain this object's
+       * {@link #fl FileLock} attribute.
+       */
+!     private FileChannel fc;
+  
+      /**
+       * The <code>FileLock</code> object used to lock this object's
+       * lock file.
+       */
+!     private FileLock fl;
+  
+      /**
+       * Tries to obtain a valid NIO lock upon this object's lock file using
+--- 61,73 ----
+       * The <code>fc</code> attribute is used to obtain this object's
+       * {@link #fl FileLock} attribute.
+       */
+!     public FileChannel fc;
+  
+      /**
+       * The <code>FileLock</code> object used to lock this object's
+       * lock file.
+       */
+!     public FileLock fl;
+  
+      /**
+       * Tries to obtain a valid NIO lock upon this object's lock file using
+***************
+*** 77,83 ****
+       * @throws Exception if an error occurs while attempting to obtain the lock
+       *
+       */
+!     protected boolean lockImpl() throws Exception {
+  
+          boolean isValid;
+  
+--- 77,83 ----
+       * @throws Exception if an error occurs while attempting to obtain the lock
+       *
+       */
+!     public boolean lockImpl() throws Exception {
+  
+          boolean isValid;
+  
+***************
+*** 154,160 ****
+       * @return true if a valid lock is released, else false
+       * @throws Exception if na error occurs while attempting to release the lock
+       */
+!     protected boolean releaseImpl() throws Exception {
+  
+          // PRE: we know that this method is only called
+          // if isLocked() is true.
+--- 154,160 ----
+       * @return true if a valid lock is released, else false
+       * @throws Exception if na error occurs while attempting to release the lock
+       */
+!     public boolean releaseImpl() throws Exception {
+  
+          // PRE: we know that this method is only called
+          // if isLocked() is true.
+***************
+*** 200,206 ****
+       * Retrieves the String value: "fl =" + fl
+       * @return the String value: "fl =" + fl
+       */
+!     protected String toStringImpl() {
+          return "fl =" + fl;
+      }
+  }
+--- 200,206 ----
+       * Retrieves the String value: "fl =" + fl
+       * @return the String value: "fl =" + fl
+       */
+!     public String toStringImpl() {
+          return "fl =" + fl;
+      }
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/persist/NIOScaledRAFile.java misc/build/hsqldb/src/org/hsqldb/persist/NIOScaledRAFile.java
+*** misc/hsqldb/src/org/hsqldb/persist/NIOScaledRAFile.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/NIOScaledRAFile.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 56,63 ****
+      MappedByteBuffer  buffer;
+      FileChannel       channel;
+      long              bufferLength;
+!     private boolean   wasNio;
+!     private boolean   bufferModified;
+      static final long MAX_NIO_LENGTH = (1L << 28);
+  
+      /**
+--- 56,63 ----
+      MappedByteBuffer  buffer;
+      FileChannel       channel;
+      long              bufferLength;
+!     public boolean   wasNio;
+!     public boolean   bufferModified;
+      static final long MAX_NIO_LENGTH = (1L << 28);
+  
+      /**
+***************
+*** 84,90 ****
+      }
+  
+      /** @todo fredt - better message */
+!     private long newBufferSize(long newsize) throws IOException {
+  
+          long bufsize;
+  
+--- 84,90 ----
+      }
+  
+      /** @todo fredt - better message */
+!     public long newBufferSize(long newsize) throws IOException {
+  
+          long bufsize;
+  
+***************
+*** 99,105 ****
+          return bufsize;
+      }
+  
+!     private void enlargeBuffer(long offset, int size) throws IOException {
+  
+          int position = 0;
+  
+--- 99,105 ----
+          return bufsize;
+      }
+  
+!     public void enlargeBuffer(long offset, int size) throws IOException {
+  
+          int position = 0;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/persist/ScaledRAFileInJar.java misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFileInJar.java
+*** misc/hsqldb/src/org/hsqldb/persist/ScaledRAFileInJar.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFileInJar.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 92,98 ****
+          return seekPosition;
+      }
+  
+!     private void readIntoBuffer() throws IOException {
+  
+          long filePos = seekPosition;
+  
+--- 92,98 ----
+          return seekPosition;
+      }
+  
+!     public void readIntoBuffer() throws IOException {
+  
+          long filePos = seekPosition;
+  
+***************
+*** 206,212 ****
+          return false;
+      }
+  
+!     private void resetStream() throws IOException {
+  
+          if (file != null) {
+              file.close();
+--- 206,212 ----
+          return false;
+      }
+  
+!     public void resetStream() throws IOException {
+  
+          if (file != null) {
+              file.close();
+***************
+*** 217,223 ****
+          file = new DataInputStream(fis);
+      }
+  
+!     private void fileSeek(long position) throws IOException {
+  
+          long skipPosition = realPosition;
+  
+--- 217,223 ----
+          file = new DataInputStream(fis);
+      }
+  
+!     public void fileSeek(long position) throws IOException {
+  
+          long skipPosition = realPosition;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/persist/ScaledRAFile.java misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFile.java
+*** misc/hsqldb/src/org/hsqldb/persist/ScaledRAFile.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFile.java	2005-06-30 03:53:39.000000000 -0400
+***************
+*** 57,63 ****
+      static final int         DATA_FILE_NIO = 1;
+      static final int         DATA_FILE_JAR = 2;
+      final RandomAccessFile   file;
+!     private final boolean    readOnly;
+      final String             fileName;
+      boolean                  isNio;
+      boolean                  bufferDirty = true;
+--- 57,63 ----
+      static final int         DATA_FILE_NIO = 1;
+      static final int         DATA_FILE_JAR = 2;
+      final RandomAccessFile   file;
+!     public final boolean    readOnly;
+      final String             fileName;
+      boolean                  isNio;
+      boolean                  bufferDirty = true;
+***************
+*** 159,165 ****
+          return seekPosition;
+      }
+  
+!     private void readIntoBuffer() throws IOException {
+  
+          long filePos = seekPosition;
+  
+--- 159,165 ----
+          return seekPosition;
+      }
+  
+!     public void readIntoBuffer() throws IOException {
+  
+          long filePos = seekPosition;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/persist/TextCache.java misc/build/hsqldb/src/org/hsqldb/persist/TextCache.java
+*** misc/hsqldb/src/org/hsqldb/persist/TextCache.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/persist/TextCache.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 74,82 ****
+      public boolean             isQuoted;
+      public boolean             isAllQuoted;
+      public boolean             ignoreFirst;
+!     protected String           header;
+!     protected Table            table;
+!     private ObjectCacheHashMap uncommittedCache;
+  
+      //
+  
+--- 74,82 ----
+      public boolean             isQuoted;
+      public boolean             isAllQuoted;
+      public boolean             ignoreFirst;
+!     public String           header;
+!     public Table            table;
+!     public ObjectCacheHashMap uncommittedCache;
+  
+      //
+  
+***************
+*** 96,102 ****
+          uncommittedCache = new ObjectCacheHashMap(5);
+      }
+  
+!     protected void initParams() throws HsqlException {
+  
+          // fredt - this used to write rows as soon as they are inserted
+          // but now this is subject to session autoCommit / or commit
+--- 96,102 ----
+          uncommittedCache = new ObjectCacheHashMap(5);
+      }
+  
+!     public void initParams() throws HsqlException {
+  
+          // fredt - this used to write rows as soon as they are inserted
+          // but now this is subject to session autoCommit / or commit
+***************
+*** 177,183 ****
+          initBuffers();
+      }
+  
+!     protected void initBuffers() {
+  
+          if (isQuoted || isAllQuoted) {
+              rowIn = new RowInputTextQuoted(fs, vs, lvs, isAllQuoted);
+--- 177,183 ----
+          initBuffers();
+      }
+  
+!     public void initBuffers() {
+  
+          if (isQuoted || isAllQuoted) {
+              rowIn = new RowInputTextQuoted(fs, vs, lvs, isAllQuoted);
+***************
+*** 189,195 ****
+          }
+      }
+  
+!     private String translateSep(String sep) {
+          return translateSep(sep, false);
+      }
+  
+--- 189,195 ----
+          }
+      }
+  
+!     public String translateSep(String sep) {
+          return translateSep(sep, false);
+      }
+  
+***************
+*** 197,203 ****
+       * Translates the escaped characters in a separator string and returns
+       * the non-escaped string.
+       */
+!     private String translateSep(String sep, boolean isProperty) {
+  
+          if (sep == null) {
+              return (null);
+--- 197,203 ----
+       * Translates the escaped characters in a separator string and returns
+       * the non-escaped string.
+       */
+!     public String translateSep(String sep, boolean isProperty) {
+  
+          if (sep == null) {
+              return (null);
+***************
+*** 406,412 ****
+      }
+  
+      // sqlbob -- Allow line breaks in quoted fields.
+!     protected RowInputInterface readObject(int pos) throws IOException {
+  
+          ByteArray    buffer    = new ByteArray(80);
+          boolean      blank     = true;
+--- 406,412 ----
+      }
+  
+      // sqlbob -- Allow line breaks in quoted fields.
+!     public RowInputInterface readObject(int pos) throws IOException {
+  
+          ByteArray    buffer    = new ByteArray(80);
+          boolean      blank     = true;
+***************
+*** 576,582 ****
+       * uncommitted cache until such time that they are committed or rolled
+       * back- fredt
+       */
+!     protected void saveRows(CachedObject[] rows, int offset,
+                              int count) throws IOException {
+  
+          if (count == 0) {
+--- 576,582 ----
+       * uncommitted cache until such time that they are committed or rolled
+       * back- fredt
+       */
+!     public void saveRows(CachedObject[] rows, int offset,
+                              int count) throws IOException {
+  
+          if (count == 0) {
+***************
+*** 624,630 ****
+          throw Trace.error(Trace.TEXT_TABLE_HEADER);
+      }
+  
+!     private void writeHeader(String header) throws IOException {
+  
+          byte[] buf       = null;
+          String firstLine = header + NL;
+--- 624,630 ----
+          throw Trace.error(Trace.TEXT_TABLE_HEADER);
+      }
+  
+!     public void writeHeader(String header) throws IOException {
+  
+          byte[] buf       = null;
+          String firstLine = header + NL;
+***************
+*** 640,649 ****
+          fileFreePosition = firstLine.length();
+      }
+  
+!     private class ByteArray {
+  
+!         private byte[] buffer;
+!         private int    buflen;
+  
+          public ByteArray(int n) {
+              buffer = new byte[n];
+--- 640,649 ----
+          fileFreePosition = firstLine.length();
+      }
+  
+!     public class ByteArray {
+  
+!         public byte[] buffer;
+!         public int    buflen;
+  
+          public ByteArray(int n) {
+              buffer = new byte[n];
+***************
+*** 687,693 ****
+          return ((RowInputText) rowIn).getLineNumber();
+      }
+  
+!     protected void setFileModified() throws IOException {
+          fileModified = true;
+      }
+  }
+--- 687,693 ----
+          return ((RowInputText) rowIn).getLineNumber();
+      }
+  
+!     public void setFileModified() throws IOException {
+          fileModified = true;
+      }
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/PointerNode.java misc/build/hsqldb/src/org/hsqldb/PointerNode.java
+*** misc/hsqldb/src/org/hsqldb/PointerNode.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/PointerNode.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 87,94 ****
+  class PointerNode extends BaseMemoryNode {
+  
+      int           iData = NO_POS;
+!     private Table tTable;
+!     private Node  nPrimary;    // node of key / primary index for this row
+  
+      PointerNode(CachedRow r, int id) {
+  
+--- 87,94 ----
+  class PointerNode extends BaseMemoryNode {
+  
+      int           iData = NO_POS;
+!     public Table tTable;
+!     public Node  nPrimary;    // node of key / primary index for this row
+  
+      PointerNode(CachedRow r, int id) {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/resources/BundleHandler.java misc/build/hsqldb/src/org/hsqldb/resources/BundleHandler.java
+*** misc/hsqldb/src/org/hsqldb/resources/BundleHandler.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/resources/BundleHandler.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 58,85 ****
+  public final class BundleHandler {
+  
+      /** Used to synchronize access */
+!     private static final Object mutex = new Object();
+  
+      /** The Locale used internally to fetch resource bundles. */
+!     private static Locale locale = Locale.getDefault();
+  
+      /** Map:  Integer object handle => <code>ResourceBundle</code> object. */
+!     private static HashMap bundleHandleMap = new HashMap();
+  
+      /** List whose elements are <code>ResourceBundle</code> objects */
+!     private static HsqlArrayList bundleList = new HsqlArrayList();
+  
+      /**
+       * The resource path prefix of the <code>ResourceBundle</code> objects
+       * handled by this class.
+       */
+!     private static final String prefix = "org/hsqldb/resources/";
+  
+      /** JDK 1.1 compliance */
+!     private static final Method newGetBundleMethod = getNewGetBundleMethod();
+  
+      /** Pure utility class: external construction disabled. */
+!     private BundleHandler() {}
+  
+      /**
+       * Getter for property locale. <p>
+--- 58,85 ----
+  public final class BundleHandler {
+  
+      /** Used to synchronize access */
+!     public static final Object mutex = new Object();
+  
+      /** The Locale used internally to fetch resource bundles. */
+!     public static Locale locale = Locale.getDefault();
+  
+      /** Map:  Integer object handle => <code>ResourceBundle</code> object. */
+!     public static HashMap bundleHandleMap = new HashMap();
+  
+      /** List whose elements are <code>ResourceBundle</code> objects */
+!     public static HsqlArrayList bundleList = new HsqlArrayList();
+  
+      /**
+       * The resource path prefix of the <code>ResourceBundle</code> objects
+       * handled by this class.
+       */
+!     public static final String prefix = "org/hsqldb/resources/";
+  
+      /** JDK 1.1 compliance */
+!     public static final Method newGetBundleMethod = getNewGetBundleMethod();
+  
+      /** Pure utility class: external construction disabled. */
+!     public BundleHandler() {}
+  
+      /**
+       * Getter for property locale. <p>
+***************
+*** 197,203 ****
+       * One-shot initialization of JDK 1.2+ ResourceBundle.getBundle() method
+       * having ClassLoader in the signature.
+       */
+!     private static Method getNewGetBundleMethod() {
+  
+          Class   clazz;
+          Class[] args;
+--- 197,203 ----
+       * One-shot initialization of JDK 1.2+ ResourceBundle.getBundle() method
+       * having ClassLoader in the signature.
+       */
+!     public static Method getNewGetBundleMethod() {
+  
+          Class   clazz;
+          Class[] args;
+diff -cr misc/hsqldb/src/org/hsqldb/ResultBase.java misc/build/hsqldb/src/org/hsqldb/ResultBase.java
+*** misc/hsqldb/src/org/hsqldb/ResultBase.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/ResultBase.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 41,48 ****
+  public class ResultBase {
+  
+      public Record    rRoot;
+!     protected Record rTail;
+!     protected int    iSize;
+  
+      public ResultBase() {}
+  
+--- 41,48 ----
+  public class ResultBase {
+  
+      public Record    rRoot;
+!     public Record rTail;
+!     public int    iSize;
+  
+      public ResultBase() {}
+  
+diff -cr misc/hsqldb/src/org/hsqldb/Result.java misc/build/hsqldb/src/org/hsqldb/Result.java
+*** misc/hsqldb/src/org/hsqldb/Result.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Result.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 102,112 ****
+  
+      // record list
+      public Record  rRoot;
+!     private Record rTail;
+!     private int    size;
+  
+      // transient - number of significant columns
+!     private int significantColumns;
+  
+      // type of result
+      public int mode;
+--- 102,112 ----
+  
+      // record list
+      public Record  rRoot;
+!     public Record rTail;
+!     public int    size;
+  
+      // transient - number of significant columns
+!     public int significantColumns;
+  
+      // type of result
+      public int mode;
+***************
+*** 126,132 ****
+      String subSubString;
+  
+      // the exception if this is an error
+!     private Throwable exception;
+  
+      // prepared statement id / error vendor code
+      int statementID;
+--- 126,132 ----
+      String subSubString;
+  
+      // the exception if this is an error
+!     public Throwable exception;
+  
+      // prepared statement id / error vendor code
+      int statementID;
+***************
+*** 174,180 ****
+           *
+           * @param  columns
+           */
+!         private void prepareData(int columns) {
+  
+              colLabels     = new String[columns];
+              tableNames    = new String[columns];
+--- 174,180 ----
+           *
+           * @param  columns
+           */
+!         public void prepareData(int columns) {
+  
+              colLabels     = new String[columns];
+              tableNames    = new String[columns];
+***************
+*** 200,213 ****
+                     && colNames[i] != null && colNames[i].length() > 0;
+          }
+  
+!         private void decodeTableColumnAttrs(int in, int i) {
+  
+              colNullable[i] = in & 0x0000000f;
+              isIdentity[i]  = (in & 0x00000010) != 0;
+              isWritable[i]  = (in & 0x00000020) != 0;
+          }
+  
+!         private void writeTableColumnAttrs(RowOutputBinary out,
+                                             int i)
+                                             throws IOException, HsqlException {
+  
+--- 200,213 ----
+                     && colNames[i] != null && colNames[i].length() > 0;
+          }
+  
+!         public void decodeTableColumnAttrs(int in, int i) {
+  
+              colNullable[i] = in & 0x0000000f;
+              isIdentity[i]  = (in & 0x00000010) != 0;
+              isWritable[i]  = (in & 0x00000020) != 0;
+          }
+  
+!         public void writeTableColumnAttrs(RowOutputBinary out,
+                                             int i)
+                                             throws IOException, HsqlException {
+  
+***************
+*** 255,261 ****
+                                                     : schemaNames[i]);
+          }
+  
+!         private int encodeTableColumnAttrs(int i) {
+  
+              int out = colNullable[i];    // always between 0x00 and 0x02
+  
+--- 255,261 ----
+                                                     : schemaNames[i]);
+          }
+  
+!         public int encodeTableColumnAttrs(int i) {
+  
+              int out = colNullable[i];    // always between 0x00 and 0x02
+  
+***************
+*** 270,276 ****
+              return out;
+          }
+  
+!         private void readTableColumnAttrs(RowInputBinary in,
+                                            int i)
+                                            throws IOException, HsqlException {
+  
+--- 270,276 ----
+              return out;
+          }
+  
+!         public void readTableColumnAttrs(RowInputBinary in,
+                                            int i)
+                                            throws IOException, HsqlException {
+  
+***************
+*** 1083,1089 ****
+       * @return -1, 0, +1
+       * @throws  HsqlException
+       */
+!     private int compareRecord(Session session, Object[] a, final Object[] b,
+                                final int[] order,
+                                int[] way) throws HsqlException {
+  
+--- 1083,1089 ----
+       * @return -1, 0, +1
+       * @throws  HsqlException
+       */
+!     public int compareRecord(Session session, Object[] a, final Object[] b,
+                                final int[] order,
+                                int[] way) throws HsqlException {
+  
+***************
+*** 1113,1119 ****
+       * @return -1, 0, +1
+       * @throws  HsqlException
+       */
+!     private int compareRecord(Session session, Object[] a, Object[] b,
+                                int len) throws HsqlException {
+  
+          for (int j = 0; j < len; j++) {
+--- 1113,1119 ----
+       * @return -1, 0, +1
+       * @throws  HsqlException
+       */
+!     public int compareRecord(Session session, Object[] a, Object[] b,
+                                int len) throws HsqlException {
+  
+          for (int j = 0; j < len; j++) {
+***************
+*** 1306,1312 ****
+          }
+      }
+  
+!     private void writeMulti(RowOutputBinary out)
+      throws IOException, HsqlException {
+  
+          int startPos = out.size();
+--- 1306,1312 ----
+          }
+      }
+  
+!     public void writeMulti(RowOutputBinary out)
+      throws IOException, HsqlException {
+  
+          int startPos = out.size();
+***************
+*** 1489,1495 ****
+          return new ResultIterator();
+      }
+  
+!     private class ResultIterator implements Iterator {
+  
+          boolean removed;
+          int     counter;
+--- 1489,1495 ----
+          return new ResultIterator();
+      }
+  
+!     public class ResultIterator implements Iterator {
+  
+          boolean removed;
+          int     counter;
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowInputBase.java misc/build/hsqldb/src/org/hsqldb/rowio/RowInputBase.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowInputBase.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowInputBase.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 58,65 ****
+      static final int NO_POS = -1;
+  
+      // fredt - initialisation may be unnecessary as it's done in resetRow()
+!     protected int filePos = NO_POS;
+!     protected int size;
+  
+      public RowInputBase() {
+          this(new byte[4]);
+--- 58,65 ----
+      static final int NO_POS = -1;
+  
+      // fredt - initialisation may be unnecessary as it's done in resetRow()
+!     public int filePos = NO_POS;
+!     public int size;
+  
+      public RowInputBase() {
+          this(new byte[4]);
+***************
+*** 99,135 ****
+      public abstract String readString() throws IOException;
+  
+  // fredt@users - comment - methods used for SQL types
+!     protected abstract boolean checkNull() throws IOException;
+  
+!     protected abstract String readChar(int type)
+      throws IOException, HsqlException;
+  
+!     protected abstract Integer readSmallint()
+      throws IOException, HsqlException;
+  
+!     protected abstract Integer readInteger()
+      throws IOException, HsqlException;
+  
+!     protected abstract Long readBigint() throws IOException, HsqlException;
+  
+!     protected abstract Double readReal(int type)
+      throws IOException, HsqlException;
+  
+!     protected abstract BigDecimal readDecimal()
+      throws IOException, HsqlException;
+  
+!     protected abstract Boolean readBit() throws IOException, HsqlException;
+  
+!     protected abstract Time readTime() throws IOException, HsqlException;
+  
+!     protected abstract Date readDate() throws IOException, HsqlException;
+  
+!     protected abstract Timestamp readTimestamp()
+      throws IOException, HsqlException;
+  
+!     protected abstract Object readOther() throws IOException, HsqlException;
+  
+!     protected abstract Binary readBinary(int type)
+      throws IOException, HsqlException;
+  
+      /**
+--- 99,135 ----
+      public abstract String readString() throws IOException;
+  
+  // fredt@users - comment - methods used for SQL types
+!     public abstract boolean checkNull() throws IOException;
+  
+!     public abstract String readChar(int type)
+      throws IOException, HsqlException;
+  
+!     public abstract Integer readSmallint()
+      throws IOException, HsqlException;
+  
+!     public abstract Integer readInteger()
+      throws IOException, HsqlException;
+  
+!     public abstract Long readBigint() throws IOException, HsqlException;
+  
+!     public abstract Double readReal(int type)
+      throws IOException, HsqlException;
+  
+!     public abstract BigDecimal readDecimal()
+      throws IOException, HsqlException;
+  
+!     public abstract Boolean readBit() throws IOException, HsqlException;
+  
+!     public abstract Time readTime() throws IOException, HsqlException;
+  
+!     public abstract Date readDate() throws IOException, HsqlException;
+  
+!     public abstract Timestamp readTimestamp()
+      throws IOException, HsqlException;
+  
+!     public abstract Object readOther() throws IOException, HsqlException;
+  
+!     public abstract Binary readBinary(int type)
+      throws IOException, HsqlException;
+  
+      /**
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowInputBinary.java misc/build/hsqldb/src/org/hsqldb/rowio/RowInputBinary.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowInputBinary.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowInputBinary.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 58,64 ****
+  public class RowInputBinary extends RowInputBase
+  implements org.hsqldb.rowio.RowInputInterface {
+  
+!     private RowOutputBinary out;
+  
+      public RowInputBinary() {
+          super();
+--- 58,64 ----
+  public class RowInputBinary extends RowInputBase
+  implements org.hsqldb.rowio.RowInputInterface {
+  
+!     public RowOutputBinary out;
+  
+      public RowInputBinary() {
+          super();
+***************
+*** 79,85 ****
+          this.out = out;
+      }
+  
+!     protected byte[] readByteArray() throws IOException {
+  
+          byte[] b = new byte[readInt()];
+  
+--- 79,85 ----
+          this.out = out;
+      }
+  
+!     public byte[] readByteArray() throws IOException {
+  
+          byte[] b = new byte[readInt()];
+  
+***************
+*** 115,121 ****
+          return s;
+      }
+  
+!     protected boolean checkNull() throws IOException {
+  
+          int b = readByte();
+  
+--- 115,121 ----
+          return s;
+      }
+  
+!     public boolean checkNull() throws IOException {
+  
+          int b = readByte();
+  
+***************
+*** 123,149 ****
+                        : false;
+      }
+  
+!     protected String readChar(int type) throws IOException {
+          return readString();
+      }
+  
+!     protected Integer readSmallint() throws IOException, HsqlException {
+          return ValuePool.getInt(readShort());
+      }
+  
+!     protected Integer readInteger() throws IOException, HsqlException {
+          return ValuePool.getInt(readInt());
+      }
+  
+!     protected Long readBigint() throws IOException, HsqlException {
+          return ValuePool.getLong(readLong());
+      }
+  
+!     protected Double readReal(int type) throws IOException, HsqlException {
+          return ValuePool.getDouble(readLong());
+      }
+  
+!     protected BigDecimal readDecimal() throws IOException, HsqlException {
+  
+          byte[]     bytes  = readByteArray();
+          int        scale  = readInt();
+--- 123,149 ----
+                        : false;
+      }
+  
+!     public String readChar(int type) throws IOException {
+          return readString();
+      }
+  
+!     public Integer readSmallint() throws IOException, HsqlException {
+          return ValuePool.getInt(readShort());
+      }
+  
+!     public Integer readInteger() throws IOException, HsqlException {
+          return ValuePool.getInt(readInt());
+      }
+  
+!     public Long readBigint() throws IOException, HsqlException {
+          return ValuePool.getLong(readLong());
+      }
+  
+!     public Double readReal(int type) throws IOException, HsqlException {
+          return ValuePool.getDouble(readLong());
+      }
+  
+!     public BigDecimal readDecimal() throws IOException, HsqlException {
+  
+          byte[]     bytes  = readByteArray();
+          int        scale  = readInt();
+***************
+*** 152,182 ****
+          return ValuePool.getBigDecimal(new BigDecimal(bigint, scale));
+      }
+  
+!     protected Boolean readBit() throws IOException, HsqlException {
+          return readBoolean() ? Boolean.TRUE
+                               : Boolean.FALSE;
+      }
+  
+!     protected Time readTime() throws IOException, HsqlException {
+          return new Time(HsqlDateTime.getNormalisedTime(readLong()));
+      }
+  
+!     protected Date readDate() throws IOException, HsqlException {
+  
+          long date = HsqlDateTime.getNormalisedDate(readLong());
+  
+          return ValuePool.getDate(date);
+      }
+  
+!     protected Timestamp readTimestamp() throws IOException, HsqlException {
+          return HsqlDateTime.timestampValue(readLong(), readInt());
+      }
+  
+!     protected Object readOther() throws IOException, HsqlException {
+          return new JavaObject(readByteArray());
+      }
+  
+!     protected Binary readBinary(int type) throws IOException, HsqlException {
+          return new Binary(readByteArray(), false);
+      }
+  
+--- 152,182 ----
+          return ValuePool.getBigDecimal(new BigDecimal(bigint, scale));
+      }
+  
+!     public Boolean readBit() throws IOException, HsqlException {
+          return readBoolean() ? Boolean.TRUE
+                               : Boolean.FALSE;
+      }
+  
+!     public Time readTime() throws IOException, HsqlException {
+          return new Time(HsqlDateTime.getNormalisedTime(readLong()));
+      }
+  
+!     public Date readDate() throws IOException, HsqlException {
+  
+          long date = HsqlDateTime.getNormalisedDate(readLong());
+  
+          return ValuePool.getDate(date);
+      }
+  
+!     public Timestamp readTimestamp() throws IOException, HsqlException {
+          return HsqlDateTime.timestampValue(readLong(), readInt());
+      }
+  
+!     public Object readOther() throws IOException, HsqlException {
+          return new JavaObject(readByteArray());
+      }
+  
+!     public Binary readBinary(int type) throws IOException, HsqlException {
+          return new Binary(readByteArray(), false);
+      }
+  
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowInputText.java misc/build/hsqldb/src/org/hsqldb/rowio/RowInputText.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowInputText.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowInputText.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 55,75 ****
+  public class RowInputText extends RowInputBase implements RowInputInterface {
+  
+      // text table specific
+!     private String    fieldSep;
+!     private String    varSep;
+!     private String    longvarSep;
+!     private int       fieldSepLen;
+!     private int       varSepLen;
+!     private int       longvarSepLen;
+!     private boolean   fieldSepEnd;
+!     private boolean   varSepEnd;
+!     private boolean   longvarSepEnd;
+!     private int       textLen;
+!     protected String  text;
+!     protected int     line;
+!     protected int     field;
+!     protected int     next = 0;
+!     protected boolean allQuoted;
+  
+      /**
+       * fredt@users - comment - in future may use a custom subclasse of
+--- 55,75 ----
+  public class RowInputText extends RowInputBase implements RowInputInterface {
+  
+      // text table specific
+!     public String    fieldSep;
+!     public String    varSep;
+!     public String    longvarSep;
+!     public int       fieldSepLen;
+!     public int       varSepLen;
+!     public int       longvarSepLen;
+!     public boolean   fieldSepEnd;
+!     public boolean   varSepEnd;
+!     public boolean   longvarSepEnd;
+!     public int       textLen;
+!     public String  text;
+!     public int     line;
+!     public int     field;
+!     public int     next = 0;
+!     public boolean allQuoted;
+  
+      /**
+       * fredt@users - comment - in future may use a custom subclasse of
+***************
+*** 120,126 ****
+          field = 0;
+      }
+  
+!     protected String getField(String sep, int sepLen,
+                                boolean isEnd) throws IOException {
+  
+          String s = null;
+--- 120,126 ----
+          field = 0;
+      }
+  
+!     public String getField(String sep, int sepLen,
+                                boolean isEnd) throws IOException {
+  
+          String s = null;
+***************
+*** 168,178 ****
+          return getField(fieldSep, fieldSepLen, fieldSepEnd);
+      }
+  
+!     private String readVarString() throws IOException {
+          return getField(varSep, varSepLen, varSepEnd);
+      }
+  
+!     private String readLongVarString() throws IOException {
+          return getField(longvarSep, longvarSepLen, longvarSepEnd);
+      }
+  
+--- 168,178 ----
+          return getField(fieldSep, fieldSepLen, fieldSepEnd);
+      }
+  
+!     public String readVarString() throws IOException {
+          return getField(varSep, varSepLen, varSepEnd);
+      }
+  
+!     public String readLongVarString() throws IOException {
+          return getField(longvarSep, longvarSepLen, longvarSepEnd);
+      }
+  
+***************
+*** 205,217 ****
+          return 0;
+      }
+  
+!     protected boolean checkNull() {
+  
+          // Return null on each column read instead.
+          return false;
+      }
+  
+!     protected String readChar(int type) throws IOException {
+  
+          switch (type) {
+  
+--- 205,217 ----
+          return 0;
+      }
+  
+!     public boolean checkNull() {
+  
+          // Return null on each column read instead.
+          return false;
+      }
+  
+!     public String readChar(int type) throws IOException {
+  
+          switch (type) {
+  
+***************
+*** 228,234 ****
+          }
+      }
+  
+!     protected Integer readSmallint() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 228,234 ----
+          }
+      }
+  
+!     public Integer readSmallint() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 245,251 ****
+          return Integer.valueOf(s);
+      }
+  
+!     protected Integer readInteger() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 245,251 ----
+          return Integer.valueOf(s);
+      }
+  
+!     public Integer readInteger() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 262,268 ****
+          return Integer.valueOf(s);
+      }
+  
+!     protected Long readBigint() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 262,268 ----
+          return Integer.valueOf(s);
+      }
+  
+!     public Long readBigint() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 279,285 ****
+          return Long.valueOf(s);
+      }
+  
+!     protected Double readReal(int type) throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 279,285 ----
+          return Long.valueOf(s);
+      }
+  
+!     public Double readReal(int type) throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 296,302 ****
+          return Double.valueOf(s);
+      }
+  
+!     protected BigDecimal readDecimal() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 296,302 ----
+          return Double.valueOf(s);
+      }
+  
+!     public BigDecimal readDecimal() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 313,319 ****
+          return new BigDecimal(s);
+      }
+  
+!     protected Time readTime() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 313,319 ----
+          return new BigDecimal(s);
+      }
+  
+!     public Time readTime() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 330,336 ****
+          return HsqlDateTime.timeValue(s);
+      }
+  
+!     protected Date readDate() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 330,336 ----
+          return HsqlDateTime.timeValue(s);
+      }
+  
+!     public Date readDate() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 347,353 ****
+          return HsqlDateTime.dateValue(s);
+      }
+  
+!     protected Timestamp readTimestamp() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 347,353 ----
+          return HsqlDateTime.dateValue(s);
+      }
+  
+!     public Timestamp readTimestamp() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 364,370 ****
+          return HsqlDateTime.timestampValue(s);
+      }
+  
+!     protected Boolean readBit() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 364,370 ----
+          return HsqlDateTime.timestampValue(s);
+      }
+  
+!     public Boolean readBit() throws IOException, HsqlException {
+  
+          String s = readString();
+  
+***************
+*** 382,388 ****
+                                            : Boolean.FALSE;
+      }
+  
+!     protected Object readOther() throws IOException, HsqlException {
+  
+          byte[] data;
+          String s = readString();
+--- 382,388 ----
+                                            : Boolean.FALSE;
+      }
+  
+!     public Object readOther() throws IOException, HsqlException {
+  
+          byte[] data;
+          String s = readString();
+***************
+*** 402,408 ****
+          return new JavaObject(data);
+      }
+  
+!     protected Binary readBinary(int type) throws IOException, HsqlException {
+  
+          String s = readString();
+  
+--- 402,408 ----
+          return new JavaObject(data);
+      }
+  
+!     public Binary readBinary(int type) throws IOException, HsqlException {
+  
+          String s = readString();
+  
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java misc/build/hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 114,120 ****
+          return schemaName;
+      }
+  
+!     protected String readField() throws IOException {
+  
+          try {
+              tokenizer.getString();
+--- 114,120 ----
+          return schemaName;
+      }
+  
+!     public String readField() throws IOException {
+  
+          try {
+              tokenizer.getString();
+***************
+*** 136,142 ****
+          }
+      }
+  
+!     protected String readNumberField() throws IOException {
+  
+          try {
+              tokenizer.getString();
+--- 136,142 ----
+          }
+      }
+  
+!     public String readNumberField() throws IOException {
+  
+          try {
+              tokenizer.getString();
+***************
+*** 204,220 ****
+          return 0;
+      }
+  
+!     protected boolean checkNull() {
+  
+          // Return null on each column read instead.
+          return false;
+      }
+  
+!     protected String readChar(int type) throws IOException {
+          return readString();
+      }
+  
+!     protected Integer readSmallint() throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+--- 204,220 ----
+          return 0;
+      }
+  
+!     public boolean checkNull() {
+  
+          // Return null on each column read instead.
+          return false;
+      }
+  
+!     public String readChar(int type) throws IOException {
+          return readString();
+      }
+  
+!     public Integer readSmallint() throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+***************
+*** 227,233 ****
+          return ValuePool.getInt(i);
+      }
+  
+!     protected Integer readInteger() throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+--- 227,233 ----
+          return ValuePool.getInt(i);
+      }
+  
+!     public Integer readInteger() throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+***************
+*** 240,246 ****
+          return ValuePool.getInt(i);
+      }
+  
+!     protected Long readBigint() throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+--- 240,246 ----
+          return ValuePool.getInt(i);
+      }
+  
+!     public Long readBigint() throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+***************
+*** 253,259 ****
+          return ValuePool.getLong(i);
+      }
+  
+!     protected Double readReal(int type) throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+--- 253,259 ----
+          return ValuePool.getLong(i);
+      }
+  
+!     public Double readReal(int type) throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+***************
+*** 295,301 ****
+          return ValuePool.getDouble(Double.doubleToLongBits(i));
+      }
+  
+!     protected BigDecimal readDecimal() throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+--- 295,301 ----
+          return ValuePool.getDouble(Double.doubleToLongBits(i));
+      }
+  
+!     public BigDecimal readDecimal() throws IOException, HsqlException {
+  
+          String s = readNumberField();
+  
+***************
+*** 308,314 ****
+          return ValuePool.getBigDecimal(i);
+      }
+  
+!     protected Time readTime() throws IOException, HsqlException {
+  
+          String s = readField();
+  
+--- 308,314 ----
+          return ValuePool.getBigDecimal(i);
+      }
+  
+!     public Time readTime() throws IOException, HsqlException {
+  
+          String s = readField();
+  
+***************
+*** 319,325 ****
+          return HsqlDateTime.timeValue(s);
+      }
+  
+!     protected Date readDate() throws IOException, HsqlException {
+  
+          String s = readField();
+  
+--- 319,325 ----
+          return HsqlDateTime.timeValue(s);
+      }
+  
+!     public Date readDate() throws IOException, HsqlException {
+  
+          String s = readField();
+  
+***************
+*** 330,336 ****
+          return HsqlDateTime.dateValue(s);
+      }
+  
+!     protected Timestamp readTimestamp() throws IOException, HsqlException {
+  
+          String s = readField();
+  
+--- 330,336 ----
+          return HsqlDateTime.dateValue(s);
+      }
+  
+!     public Timestamp readTimestamp() throws IOException, HsqlException {
+  
+          String s = readField();
+  
+***************
+*** 341,347 ****
+          return HsqlDateTime.timestampValue(s);
+      }
+  
+!     protected Boolean readBit() throws IOException, HsqlException {
+  
+          String s = readField();
+  
+--- 341,347 ----
+          return HsqlDateTime.timestampValue(s);
+      }
+  
+!     public Boolean readBit() throws IOException, HsqlException {
+  
+          String s = readField();
+  
+***************
+*** 353,359 ****
+                                            : Boolean.FALSE;
+      }
+  
+!     protected Object readOther() throws IOException, HsqlException {
+  
+          byte[] data;
+          String s = readField();
+--- 353,359 ----
+                                            : Boolean.FALSE;
+      }
+  
+!     public Object readOther() throws IOException, HsqlException {
+  
+          byte[] data;
+          String s = readField();
+***************
+*** 367,373 ****
+          return new JavaObject(data);
+      }
+  
+!     protected Binary readBinary(int type) throws IOException, HsqlException {
+  
+          String s = readField();
+  
+--- 367,373 ----
+          return new JavaObject(data);
+      }
+  
+!     public Binary readBinary(int type) throws IOException, HsqlException {
+  
+          String s = readField();
+  
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java misc/build/hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 46,55 ****
+   */
+  public class RowInputTextQuoted extends RowInputText {
+  
+!     private static final int NORMAL_FIELD   = 0;
+!     private static final int NEED_END_QUOTE = 1;
+!     private static final int FOUND_QUOTE    = 2;
+!     private char[]           qtext;
+  
+      public RowInputTextQuoted(String fieldSep, String varSep,
+                                String longvarSep, boolean allQuoted) {
+--- 46,55 ----
+   */
+  public class RowInputTextQuoted extends RowInputText {
+  
+!     public static final int NORMAL_FIELD   = 0;
+!     public static final int NEED_END_QUOTE = 1;
+!     public static final int FOUND_QUOTE    = 2;
+!     public char[]           qtext;
+  
+      public RowInputTextQuoted(String fieldSep, String varSep,
+                                String longvarSep, boolean allQuoted) {
+***************
+*** 63,69 ****
+          qtext = text.toCharArray();
+      }
+  
+!     protected String getField(String sep, int sepLen,
+                                boolean isEnd) throws IOException {
+  
+          //fredt - now the only supported behaviour is emptyIsNull
+--- 63,69 ----
+          qtext = text.toCharArray();
+      }
+  
+!     public String getField(String sep, int sepLen,
+                                boolean isEnd) throws IOException {
+  
+          //fredt - now the only supported behaviour is emptyIsNull
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowOutputBase.java misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputBase.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowOutputBase.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputBase.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 62,68 ****
+      public static final int CACHED_ROW_170 = 1;
+  
+      // the last column in a table is an ID that should not be written to file
+!     protected boolean skipSystemId = false;
+  
+      /**
+       *  Constructor used for persistent storage of a Table row
+--- 62,68 ----
+      public static final int CACHED_ROW_170 = 1;
+  
+      // the last column in a table is an ID that should not be written to file
+!     public boolean skipSystemId = false;
+  
+      /**
+       *  Constructor used for persistent storage of a Table row
+***************
+*** 107,141 ****
+      public abstract void writeString(String s);
+  
+  // fredt@users - comment - methods used for writing each SQL type
+!     protected void writeFieldPrefix() {}
+  
+!     protected abstract void writeFieldType(int type);
+  
+!     protected abstract void writeNull(int type);
+  
+!     protected abstract void writeChar(String s, int t);
+  
+!     protected abstract void writeSmallint(Number o);
+  
+!     protected abstract void writeInteger(Number o);
+  
+!     protected abstract void writeBigint(Number o);
+  
+!     protected abstract void writeReal(Double o, int type);
+  
+!     protected abstract void writeDecimal(BigDecimal o);
+  
+!     protected abstract void writeBit(Boolean o);
+  
+!     protected abstract void writeDate(Date o);
+  
+!     protected abstract void writeTime(Time o);
+  
+!     protected abstract void writeTimestamp(Timestamp o);
+  
+!     protected abstract void writeOther(JavaObject o);
+  
+!     protected abstract void writeBinary(Binary o, int t);
+  
+      public void writeRow(Object[] data, Table t) {
+  
+--- 107,141 ----
+      public abstract void writeString(String s);
+  
+  // fredt@users - comment - methods used for writing each SQL type
+!     public void writeFieldPrefix() {}
+  
+!     public abstract void writeFieldType(int type);
+  
+!     public abstract void writeNull(int type);
+  
+!     public abstract void writeChar(String s, int t);
+  
+!     public abstract void writeSmallint(Number o);
+  
+!     public abstract void writeInteger(Number o);
+  
+!     public abstract void writeBigint(Number o);
+  
+!     public abstract void writeReal(Double o, int type);
+  
+!     public abstract void writeDecimal(BigDecimal o);
+  
+!     public abstract void writeBit(Boolean o);
+  
+!     public abstract void writeDate(Date o);
+  
+!     public abstract void writeTime(Time o);
+  
+!     public abstract void writeTimestamp(Timestamp o);
+  
+!     public abstract void writeOther(JavaObject o);
+  
+!     public abstract void writeBinary(Binary o, int t);
+  
+      public void writeRow(Object[] data, Table t) {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowOutputBinary.java misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputBinary.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowOutputBinary.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputBinary.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 57,63 ****
+   */
+  public class RowOutputBinary extends RowOutputBase {
+  
+!     private static final int INT_STORE_SIZE = 4;
+      int                      storageSize;
+  
+      public RowOutputBinary() {
+--- 57,63 ----
+   */
+  public class RowOutputBinary extends RowOutputBase {
+  
+!     public static final int INT_STORE_SIZE = 4;
+      int                      storageSize;
+  
+      public RowOutputBinary() {
+***************
+*** 160,194 ****
+      }
+  
+  // fredt@users - comment - methods used for writing each SQL type
+!     protected void writeFieldType(int type) {
+          write(1);
+      }
+  
+!     protected void writeNull(int type) {
+          write(0);
+      }
+  
+!     protected void writeChar(String s, int t) {
+          writeString(s);
+      }
+  
+!     protected void writeSmallint(Number o) {
+          writeShort(o.intValue());
+      }
+  
+!     protected void writeInteger(Number o) {
+          writeInt(o.intValue());
+      }
+  
+!     protected void writeBigint(Number o) {
+          writeLong(o.longValue());
+      }
+  
+!     protected void writeReal(Double o, int type) {
+          writeLong(Double.doubleToLongBits((o.doubleValue())));
+      }
+  
+!     protected void writeDecimal(BigDecimal o) {
+  
+          int        scale   = o.scale();
+          BigInteger bigint  = JavaSystem.getUnscaledValue(o);
+--- 160,194 ----
+      }
+  
+  // fredt@users - comment - methods used for writing each SQL type
+!     public void writeFieldType(int type) {
+          write(1);
+      }
+  
+!     public void writeNull(int type) {
+          write(0);
+      }
+  
+!     public void writeChar(String s, int t) {
+          writeString(s);
+      }
+  
+!     public void writeSmallint(Number o) {
+          writeShort(o.intValue());
+      }
+  
+!     public void writeInteger(Number o) {
+          writeInt(o.intValue());
+      }
+  
+!     public void writeBigint(Number o) {
+          writeLong(o.longValue());
+      }
+  
+!     public void writeReal(Double o, int type) {
+          writeLong(Double.doubleToLongBits((o.doubleValue())));
+      }
+  
+!     public void writeDecimal(BigDecimal o) {
+  
+          int        scale   = o.scale();
+          BigInteger bigint  = JavaSystem.getUnscaledValue(o);
+***************
+*** 198,231 ****
+          writeInt(scale);
+      }
+  
+!     protected void writeBit(Boolean o) {
+          write(o.booleanValue() ? 1
+                                 : 0);
+      }
+  
+!     protected void writeDate(Date o) {
+          writeLong(o.getTime());
+      }
+  
+!     protected void writeTime(Time o) {
+          writeLong(o.getTime());
+      }
+  
+!     protected void writeTimestamp(Timestamp o) {
+          writeLong(o.getTime());
+          writeInt(o.getNanos());
+      }
+  
+!     protected void writeOther(JavaObject o) {
+          writeByteArray(o.getBytes());
+      }
+  
+!     protected void writeBinary(Binary o, int t) {
+          writeByteArray(o.getBytes());
+      }
+  
+  // fredt@users - comment - helper and conversion methods
+!     protected void writeByteArray(byte[] b) {
+          writeInt(b.length);
+          write(b, 0, b.length);
+      }
+--- 198,231 ----
+          writeInt(scale);
+      }
+  
+!     public void writeBit(Boolean o) {
+          write(o.booleanValue() ? 1
+                                 : 0);
+      }
+  
+!     public void writeDate(Date o) {
+          writeLong(o.getTime());
+      }
+  
+!     public void writeTime(Time o) {
+          writeLong(o.getTime());
+      }
+  
+!     public void writeTimestamp(Timestamp o) {
+          writeLong(o.getTime());
+          writeInt(o.getNanos());
+      }
+  
+!     public void writeOther(JavaObject o) {
+          writeByteArray(o.getBytes());
+      }
+  
+!     public void writeBinary(Binary o, int t) {
+          writeByteArray(o.getBytes());
+      }
+  
+  // fredt@users - comment - helper and conversion methods
+!     public void writeByteArray(byte[] b) {
+          writeInt(b.length);
+          write(b, 0, b.length);
+      }
+***************
+*** 239,245 ****
+       * @return size of byte array
+       * @exception  HsqlException when data is inconsistent
+       */
+!     private static int getSize(Object[] data, int l, int[] type) {
+  
+          int s = 0;
+  
+--- 239,245 ----
+       * @return size of byte array
+       * @exception  HsqlException when data is inconsistent
+       */
+!     public static int getSize(Object[] data, int l, int[] type) {
+  
+          int s = 0;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowOutputText.java misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputText.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowOutputText.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputText.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 54,69 ****
+   */
+  public class RowOutputText extends RowOutputBase {
+  
+!     protected String  fieldSep;
+!     protected String  varSep;
+!     protected String  longvarSep;
+!     private boolean   fieldSepEnd;
+!     private boolean   varSepEnd;
+!     private boolean   longvarSepEnd;
+!     private String    nextSep = "";
+!     private boolean   nextSepEnd;
+!     protected boolean allQuoted;
+!     private String    encoding;
+  
+      public RowOutputText(String fieldSep, String varSep, String longvarSep,
+                           boolean allQuoted, String encoding) {
+--- 54,69 ----
+   */
+  public class RowOutputText extends RowOutputBase {
+  
+!     public String  fieldSep;
+!     public String  varSep;
+!     public String  longvarSep;
+!     public boolean   fieldSepEnd;
+!     public boolean   varSepEnd;
+!     public boolean   longvarSepEnd;
+!     public String    nextSep = "";
+!     public boolean   nextSepEnd;
+!     public boolean allQuoted;
+!     public String    encoding;
+  
+      public RowOutputText(String fieldSep, String varSep, String longvarSep,
+                           boolean allQuoted, String encoding) {
+***************
+*** 74,80 ****
+                                    encoding);
+      }
+  
+!     private void initTextDatabaseRowOutput(String fieldSep, String varSep,
+                                             String longvarSep,
+                                             boolean allQuoted,
+                                             String encoding) {
+--- 74,80 ----
+                                    encoding);
+      }
+  
+!     public void initTextDatabaseRowOutput(String fieldSep, String varSep,
+                                             String longvarSep,
+                                             boolean allQuoted,
+                                             String encoding) {
+***************
+*** 142,148 ****
+          nextSepEnd = fieldSepEnd;
+      }
+  
+!     protected void writeVarString(String s) {
+  
+          s = checkConvertString(s, varSep);
+  
+--- 142,148 ----
+          nextSepEnd = fieldSepEnd;
+      }
+  
+!     public void writeVarString(String s) {
+  
+          s = checkConvertString(s, varSep);
+  
+***************
+*** 159,165 ****
+          nextSepEnd = varSepEnd;
+      }
+  
+!     protected void writeLongVarString(String s) {
+  
+          s = checkConvertString(s, longvarSep);
+  
+--- 159,165 ----
+          nextSepEnd = varSepEnd;
+      }
+  
+!     public void writeLongVarString(String s) {
+  
+          s = checkConvertString(s, longvarSep);
+  
+***************
+*** 176,182 ****
+          nextSepEnd = longvarSepEnd;
+      }
+  
+!     protected String checkConvertString(String s, String sep) {
+  
+          if (s.indexOf('\n') != -1 || s.indexOf('\r') != -1) {
+              throw new IllegalArgumentException(
+--- 176,182 ----
+          nextSepEnd = longvarSepEnd;
+      }
+  
+!     public String checkConvertString(String s, String sep) {
+  
+          if (s.indexOf('\n') != -1 || s.indexOf('\r') != -1) {
+              throw new IllegalArgumentException(
+***************
+*** 188,194 ****
+          return s;
+      }
+  
+!     private byte[] getBytes(String s) {
+  
+          byte[] bytes = null;
+  
+--- 188,194 ----
+          return s;
+      }
+  
+!     public byte[] getBytes(String s) {
+  
+          byte[] bytes = null;
+  
+***************
+*** 201,207 ****
+          return bytes;
+      }
+  
+!     protected void writeByteArray(byte[] b) {
+  
+          ensureRoom(b.length * 2);
+          StringConverter.writeHex(this.getBuffer(), count, b);
+--- 201,207 ----
+          return bytes;
+      }
+  
+!     public void writeByteArray(byte[] b) {
+  
+          ensureRoom(b.length * 2);
+          StringConverter.writeHex(this.getBuffer(), count, b);
+***************
+*** 231,237 ****
+      }
+  
+  // fredt@users - comment - methods used for writing each SQL type
+!     protected void writeFieldType(int type) {
+  
+          writeBytes(nextSep);
+  
+--- 231,237 ----
+      }
+  
+  // fredt@users - comment - methods used for writing each SQL type
+!     public void writeFieldType(int type) {
+  
+          writeBytes(nextSep);
+  
+***************
+*** 255,265 ****
+          }
+      }
+  
+!     protected void writeNull(int type) {
+          writeFieldType(type);
+      }
+  
+!     protected void writeChar(String s, int t) {
+  
+          switch (t) {
+  
+--- 255,265 ----
+          }
+      }
+  
+!     public void writeNull(int type) {
+          writeFieldType(type);
+      }
+  
+!     public void writeChar(String s, int t) {
+  
+          switch (t) {
+  
+***************
+*** 282,331 ****
+          }
+      }
+  
+!     protected void writeSmallint(Number o) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeInteger(Number o) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeBigint(Number o) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeReal(Double o, int type) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeDecimal(BigDecimal o) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeBit(Boolean o) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeDate(Date o) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeTime(Time o) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeTimestamp(Timestamp o) {
+          writeString(o.toString());
+      }
+  
+!     protected void writeOther(JavaObject o) {
+  
+          byte[] ba = o.getBytes();
+  
+          writeByteArray(ba);
+      }
+  
+!     protected void writeBinary(Binary o, int t) {
+          writeByteArray(o.getBytes());
+      }
+  
+--- 282,331 ----
+          }
+      }
+  
+!     public void writeSmallint(Number o) {
+          writeString(o.toString());
+      }
+  
+!     public void writeInteger(Number o) {
+          writeString(o.toString());
+      }
+  
+!     public void writeBigint(Number o) {
+          writeString(o.toString());
+      }
+  
+!     public void writeReal(Double o, int type) {
+          writeString(o.toString());
+      }
+  
+!     public void writeDecimal(BigDecimal o) {
+          writeString(o.toString());
+      }
+  
+!     public void writeBit(Boolean o) {
+          writeString(o.toString());
+      }
+  
+!     public void writeDate(Date o) {
+          writeString(o.toString());
+      }
+  
+!     public void writeTime(Time o) {
+          writeString(o.toString());
+      }
+  
+!     public void writeTimestamp(Timestamp o) {
+          writeString(o.toString());
+      }
+  
+!     public void writeOther(JavaObject o) {
+  
+          byte[] ba = o.getBytes();
+  
+          writeByteArray(ba);
+      }
+  
+!     public void writeBinary(Binary o, int t) {
+          writeByteArray(o.getBytes());
+      }
+  
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowOutputTextLog.java misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputTextLog.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowOutputTextLog.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputTextLog.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 57,101 ****
+      static final byte[]     BYTES_IS    = " IS ".getBytes();
+      public static final int MODE_DELETE = 1;
+      public static final int MODE_INSERT = 0;
+!     private boolean         isWritten;
+!     private int             logMode;
+  
+      public void setMode(int mode) {
+          logMode = mode;
+      }
+  
+!     protected void writeFieldPrefix() {
+  
+          if (logMode == MODE_DELETE && isWritten) {
+              write(BYTES_AND);
+          }
+      }
+  
+!     protected void writeChar(String s, int t) {
+  
+          write('\'');
+          StringConverter.unicodeToAscii(this, s, true);
+          write('\'');
+      }
+  
+!     protected void writeReal(Double o, int type) {
+          writeBytes(Column.createSQLString(((Number) o).doubleValue()));
+      }
+  
+!     protected void writeSmallint(Number o) {
+          this.writeBytes(o.toString());
+      }
+  
+      public void writeEnd() {}
+  
+!     protected void writeTime(Time o) {
+  
+          write('\'');
+          writeBytes(o.toString());
+          write('\'');
+      }
+  
+!     protected void writeBinary(Binary o, int t) {
+  
+          ensureRoom(o.getBytesLength() * 2 + 2);
+          write('\'');
+--- 57,101 ----
+      static final byte[]     BYTES_IS    = " IS ".getBytes();
+      public static final int MODE_DELETE = 1;
+      public static final int MODE_INSERT = 0;
+!     public boolean         isWritten;
+!     public int             logMode;
+  
+      public void setMode(int mode) {
+          logMode = mode;
+      }
+  
+!     public void writeFieldPrefix() {
+  
+          if (logMode == MODE_DELETE && isWritten) {
+              write(BYTES_AND);
+          }
+      }
+  
+!     public void writeChar(String s, int t) {
+  
+          write('\'');
+          StringConverter.unicodeToAscii(this, s, true);
+          write('\'');
+      }
+  
+!     public void writeReal(Double o, int type) {
+          writeBytes(Column.createSQLString(((Number) o).doubleValue()));
+      }
+  
+!     public void writeSmallint(Number o) {
+          this.writeBytes(o.toString());
+      }
+  
+      public void writeEnd() {}
+  
+!     public void writeTime(Time o) {
+  
+          write('\'');
+          writeBytes(o.toString());
+          write('\'');
+      }
+  
+!     public void writeBinary(Binary o, int t) {
+  
+          ensureRoom(o.getBytesLength() * 2 + 2);
+          write('\'');
+***************
+*** 110,116 ****
+  
+      public void writeSize(int size) {}
+  
+!     protected void writeDate(Date o) {
+  
+          write('\'');
+          this.writeBytes(o.toString());
+--- 110,116 ----
+  
+      public void writeSize(int size) {}
+  
+!     public void writeDate(Date o) {
+  
+          write('\'');
+          this.writeBytes(o.toString());
+***************
+*** 121,136 ****
+          return 0;
+      }
+  
+!     protected void writeInteger(Number o) {
+          this.writeBytes(o.toString());
+      }
+  
+!     protected void writeBigint(Number o) {
+          this.writeBytes(o.toString());
+      }
+  
+  //fredt@users - patch 1108647 by nkowalcz@users (NataliaK) fix for IS NULL
+!     protected void writeNull(int type) {
+  
+          if (logMode == MODE_DELETE) {
+              write(BYTES_IS);
+--- 121,136 ----
+          return 0;
+      }
+  
+!     public void writeInteger(Number o) {
+          this.writeBytes(o.toString());
+      }
+  
+!     public void writeBigint(Number o) {
+          this.writeBytes(o.toString());
+      }
+  
+  //fredt@users - patch 1108647 by nkowalcz@users (NataliaK) fix for IS NULL
+!     public void writeNull(int type) {
+  
+          if (logMode == MODE_DELETE) {
+              write(BYTES_IS);
+***************
+*** 143,149 ****
+          write(BYTES_NULL);
+      }
+  
+!     protected void writeOther(JavaObject o) {
+  
+          ensureRoom(o.getBytesLength() * 2 + 2);
+          write('\'');
+--- 143,149 ----
+          write(BYTES_NULL);
+      }
+  
+!     public void writeOther(JavaObject o) {
+  
+          ensureRoom(o.getBytesLength() * 2 + 2);
+          write('\'');
+***************
+*** 158,173 ****
+          StringConverter.unicodeToAscii(this, value, false);
+      }
+  
+!     protected void writeBit(Boolean o) {
+          write(o.booleanValue() ? BYTES_TRUE
+                                 : BYTES_FALSE);
+      }
+  
+!     protected void writeDecimal(BigDecimal o) {
+          this.writeBytes(o.toString());
+      }
+  
+!     protected void writeFieldType(int type) {
+  
+          if (logMode == MODE_DELETE) {
+              write('=');
+--- 158,173 ----
+          StringConverter.unicodeToAscii(this, value, false);
+      }
+  
+!     public void writeBit(Boolean o) {
+          write(o.booleanValue() ? BYTES_TRUE
+                                 : BYTES_FALSE);
+      }
+  
+!     public void writeDecimal(BigDecimal o) {
+          this.writeBytes(o.toString());
+      }
+  
+!     public void writeFieldType(int type) {
+  
+          if (logMode == MODE_DELETE) {
+              write('=');
+***************
+*** 184,190 ****
+  
+      public void writeIntData(int i, int position) {}
+  
+!     protected void writeTimestamp(Timestamp o) {
+  
+          write('\'');
+          this.writeBytes(HsqlDateTime.getTimestampString(o));
+--- 184,190 ----
+  
+      public void writeIntData(int i, int position) {}
+  
+!     public void writeTimestamp(Timestamp o) {
+  
+          write('\'');
+          this.writeBytes(HsqlDateTime.getTimestampString(o));
+diff -cr misc/hsqldb/src/org/hsqldb/rowio/RowOutputTextQuoted.java misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputTextQuoted.java
+*** misc/hsqldb/src/org/hsqldb/rowio/RowOutputTextQuoted.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputTextQuoted.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 49,55 ****
+          super(fieldSep, varSep, longvarSep, allQuoted, encoding);
+      }
+  
+!     protected String checkConvertString(String s, String sep) {
+  
+          if (allQuoted || s.length() == 0 || s.indexOf('\"') != -1
+                  || (sep.length() > 0 && s.indexOf(sep) != -1)
+--- 49,55 ----
+          super(fieldSep, varSep, longvarSep, allQuoted, encoding);
+      }
+  
+!     public String checkConvertString(String s, String sep) {
+  
+          if (allQuoted || s.length() == 0 || s.indexOf('\"') != -1
+                  || (sep.length() > 0 && s.indexOf(sep) != -1)
+***************
+*** 60,66 ****
+          return s;
+      }
+  
+!     private boolean hasUnprintable(String s) {
+  
+          for (int i = 0, len = s.length(); i < len; i++) {
+              if (Character.isISOControl(s.charAt(i))) {
+--- 60,66 ----
+          return s;
+      }
+  
+!     public boolean hasUnprintable(String s) {
+  
+          for (int i = 0, len = s.length(); i < len; i++) {
+              if (Character.isISOControl(s.charAt(i))) {
+diff -cr misc/hsqldb/src/org/hsqldb/Row.java misc/build/hsqldb/src/org/hsqldb/Row.java
+*** misc/hsqldb/src/org/hsqldb/Row.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Row.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 89,96 ****
+  
+      int                tableId;
+      int                iPos;
+!     protected Object[] oData;
+!     protected Node     nPrimaryNode;
+  
+      /**
+       *  Default constructor used only in subclasses.
+--- 89,96 ----
+  
+      int                tableId;
+      int                iPos;
+!     public Object[] oData;
+!     public Node     nPrimaryNode;
+  
+      /**
+       *  Default constructor used only in subclasses.
+diff -cr misc/hsqldb/src/org/hsqldb/sample/TriggerSample.java misc/build/hsqldb/src/org/hsqldb/sample/TriggerSample.java
+*** misc/hsqldb/src/org/hsqldb/sample/TriggerSample.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/sample/TriggerSample.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 211,217 ****
+          }
+      }
+  
+!     private static void doAssert(boolean b,
+                                   String msg) throws RuntimeException {
+  
+          if (b) {
+--- 211,217 ----
+          }
+      }
+  
+!     public static void doAssert(boolean b,
+                                   String msg) throws RuntimeException {
+  
+          if (b) {
+***************
+*** 224,230 ****
+          }
+      }
+  
+!     private static void doAuditStep(int typ, String tn, String ors,
+                                      String nrs) {
+  
+          Connection        conn;
+--- 224,230 ----
+          }
+      }
+  
+!     public static void doAuditStep(int typ, String tn, String ors,
+                                      String nrs) {
+  
+          Connection        conn;
+***************
+*** 373,379 ****
+          return sb.toString();
+      }
+  
+!     private static Connection getConnection() throws SQLException {
+  
+          try {
+              Class.forName(drv).newInstance();
+--- 373,379 ----
+          return sb.toString();
+      }
+  
+!     public static Connection getConnection() throws SQLException {
+  
+          try {
+              Class.forName(drv).newInstance();
+***************
+*** 386,397 ****
+          }
+      }
+  
+!     private static void createTrigger(Statement stmt, String trn,
+                                        int typ) throws SQLException {
+          stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));
+      }
+  
+!     private static void setup() throws SQLException {
+  
+          Connection conn = getConnection();
+          Statement  stmt = conn.createStatement();
+--- 386,397 ----
+          }
+      }
+  
+!     public static void createTrigger(Statement stmt, String trn,
+                                        int typ) throws SQLException {
+          stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));
+      }
+  
+!     public static void setup() throws SQLException {
+  
+          Connection conn = getConnection();
+          Statement  stmt = conn.createStatement();
+***************
+*** 416,422 ****
+          conn.close();
+      }
+  
+!     private static void doSomeWork() throws SQLException {
+  
+          Connection conn = getConnection();
+          Statement  stmt = conn.createStatement();
+--- 416,422 ----
+          conn.close();
+      }
+  
+!     public static void doSomeWork() throws SQLException {
+  
+          Connection conn = getConnection();
+          Statement  stmt = conn.createStatement();
+***************
+*** 448,454 ****
+          conn.close();
+      }
+  
+!     private static void dumpTable(String tn) throws SQLException {
+  
+          Connection        conn  = getConnection();
+          Statement         stmt  = conn.createStatement();
+--- 448,454 ----
+          conn.close();
+      }
+  
+!     public static void dumpTable(String tn) throws SQLException {
+  
+          Connection        conn  = getConnection();
+          Statement         stmt  = conn.createStatement();
+***************
+*** 483,489 ****
+          conn.close();
+      }
+  
+!     private static void runSample() throws SQLException {
+  
+          setup();
+          doSomeWork();
+--- 483,489 ----
+          conn.close();
+      }
+  
+!     public static void runSample() throws SQLException {
+  
+          setup();
+          doSomeWork();
+diff -cr misc/hsqldb/src/org/hsqldb/SchemaManager.java misc/build/hsqldb/src/org/hsqldb/SchemaManager.java
+*** misc/hsqldb/src/org/hsqldb/SchemaManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/SchemaManager.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 763,769 ****
+      /**
+       * Throws if the table is referenced in a foreign key constraint.
+       */
+!     private void checkCascadeDropReferenced(Table table,
+              boolean cascade) throws HsqlException {
+  
+          Constraint[] constraints       = table.getConstraints();
+--- 763,769 ----
+      /**
+       * Throws if the table is referenced in a foreign key constraint.
+       */
+!     public void checkCascadeDropReferenced(Table table,
+              boolean cascade) throws HsqlException {
+  
+          Constraint[] constraints       = table.getConstraints();
+***************
+*** 886,892 ****
+      /**
+       * Returns an array of views that reference another view.
+       */
+!     private View[] getViewsWithView(View view) {
+  
+          HsqlArrayList list   = null;
+          Schema        schema = (Schema) schemaMap.get(view.getSchemaName());
+--- 886,892 ----
+      /**
+       * Returns an array of views that reference another view.
+       */
+!     public View[] getViewsWithView(View view) {
+  
+          HsqlArrayList list   = null;
+          Schema        schema = (Schema) schemaMap.get(view.getSchemaName());
+***************
+*** 915,921 ****
+       * Returns an array of views that reference the specified table or
+       * the specified column if column parameter is not null.
+       */
+!     private View[] getViewsWithTable(Table table, String column) {
+  
+          HsqlArrayList list = null;
+          Iterator      it   = allTablesIterator();
+--- 915,921 ----
+       * Returns an array of views that reference the specified table or
+       * the specified column if column parameter is not null.
+       */
+!     public View[] getViewsWithTable(Table table, String column) {
+  
+          HsqlArrayList list = null;
+          Iterator      it   = allTablesIterator();
+diff -cr misc/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBase.java misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBase.java
+*** misc/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBase.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBase.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 82,98 ****
+          openFile();
+      }
+  
+!     protected abstract void openFile() throws IOException;
+  
+      public void readAll(Session session) throws IOException, HsqlException {
+          readDDL(session);
+          readExistingData(session);
+      }
+  
+!     protected abstract void readDDL(Session session)
+      throws IOException, HsqlException;
+  
+!     protected abstract void readExistingData(Session session)
+      throws IOException, HsqlException;
+  
+      public abstract boolean readLoggedStatement(Session session)
+--- 82,98 ----
+          openFile();
+      }
+  
+!     public abstract void openFile() throws IOException;
+  
+      public void readAll(Session session) throws IOException, HsqlException {
+          readDDL(session);
+          readExistingData(session);
+      }
+  
+!     public abstract void readDDL(Session session)
+      throws IOException, HsqlException;
+  
+!     public abstract void readExistingData(Session session)
+      throws IOException, HsqlException;
+  
+      public abstract boolean readLoggedStatement(Session session)
+diff -cr misc/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBinary.java misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBinary.java
+*** misc/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBinary.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBinary.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 56,63 ****
+   */
+  class ScriptReaderBinary extends ScriptReaderBase {
+  
+!     private RowInputBinary    rowIn;
+!     protected DataInputStream dataStreamIn;
+  
+      ScriptReaderBinary(Database db,
+                         String file) throws HsqlException, IOException {
+--- 56,63 ----
+   */
+  class ScriptReaderBinary extends ScriptReaderBase {
+  
+!     public RowInputBinary    rowIn;
+!     public DataInputStream dataStreamIn;
+  
+      ScriptReaderBinary(Database db,
+                         String file) throws HsqlException, IOException {
+***************
+*** 67,73 ****
+          rowIn = new RowInputBinary();
+      }
+  
+!     protected void openFile() throws IOException {
+  
+          InputStream d = db.isFilesInJar()
+                          ? getClass().getResourceAsStream(fileName)
+--- 67,73 ----
+          rowIn = new RowInputBinary();
+      }
+  
+!     public void openFile() throws IOException {
+  
+          InputStream d = db.isFilesInJar()
+                          ? getClass().getResourceAsStream(fileName)
+***************
+*** 77,83 ****
+                  1 << 13));
+      }
+  
+!     protected void readDDL(Session session)
+      throws IOException, HsqlException {
+  
+          Result   r  = Result.read(rowIn, dataStreamIn);
+--- 77,83 ----
+                  1 << 13));
+      }
+  
+!     public void readDDL(Session session)
+      throws IOException, HsqlException {
+  
+          Result   r  = Result.read(rowIn, dataStreamIn);
+***************
+*** 97,103 ****
+          }
+      }
+  
+!     protected void readExistingData(Session session)
+      throws IOException, HsqlException {
+  
+          for (;;) {
+--- 97,103 ----
+          }
+      }
+  
+!     public void readExistingData(Session session)
+      throws IOException, HsqlException {
+  
+          for (;;) {
+***************
+*** 131,137 ****
+  
+      // int : row size (0 if no more rows) ,
+      // BinaryServerRowInput : row (column values)
+!     protected boolean readRow(Table t) throws IOException, HsqlException {
+  
+          boolean more = readRow(rowIn, 0);
+  
+--- 131,137 ----
+  
+      // int : row size (0 if no more rows) ,
+      // BinaryServerRowInput : row (column values)
+!     public boolean readRow(Table t) throws IOException, HsqlException {
+  
+          boolean more = readRow(rowIn, 0);
+  
+***************
+*** 147,159 ****
+      }
+  
+      // int : rowcount
+!     protected int readTableTerm() throws IOException, HsqlException {
+          return dataStreamIn.readInt();
+      }
+  
+      // int : headersize (0 if no more tables), String : tablename, int : operation,
+      // String : schemaname
+!     protected String readTableInit() throws IOException, HsqlException {
+  
+          boolean more = readRow(rowIn, 0);
+  
+--- 147,159 ----
+      }
+  
+      // int : rowcount
+!     public int readTableTerm() throws IOException, HsqlException {
+          return dataStreamIn.readInt();
+      }
+  
+      // int : headersize (0 if no more tables), String : tablename, int : operation,
+      // String : schemaname
+!     public String readTableInit() throws IOException, HsqlException {
+  
+          boolean more = readRow(rowIn, 0);
+  
+diff -cr misc/hsqldb/src/org/hsqldb/scriptio/ScriptReaderText.java misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderText.java
+*** misc/hsqldb/src/org/hsqldb/scriptio/ScriptReaderText.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderText.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 70,76 ****
+          rowIn = new RowInputTextLog();
+      }
+  
+!     protected void openFile() throws IOException {
+  
+          InputStream d = db.isFilesInJar()
+                          ? getClass().getResourceAsStream(fileName)
+--- 70,76 ----
+          rowIn = new RowInputTextLog();
+      }
+  
+!     public void openFile() throws IOException {
+  
+          InputStream d = db.isFilesInJar()
+                          ? getClass().getResourceAsStream(fileName)
+***************
+*** 80,86 ****
+              new InputStreamReader(new BufferedInputStream(d)));
+      }
+  
+!     protected void readDDL(Session session)
+      throws IOException, HsqlException {
+  
+          for (; readLoggedStatement(session); ) {
+--- 80,86 ----
+              new InputStreamReader(new BufferedInputStream(d)));
+      }
+  
+!     public void readDDL(Session session)
+      throws IOException, HsqlException {
+  
+          for (; readLoggedStatement(session); ) {
+***************
+*** 105,111 ****
+          }
+      }
+  
+!     protected void readExistingData(Session session)
+      throws IOException, HsqlException {
+  
+          try {
+--- 105,111 ----
+          }
+      }
+  
+!     public void readExistingData(Session session)
+      throws IOException, HsqlException {
+  
+          try {
+***************
+*** 165,171 ****
+          return true;
+      }
+  
+!     private void processStatement(Session session) throws IOException {
+  
+          try {
+              if (statement.startsWith("/*C")) {
+--- 165,171 ----
+          return true;
+      }
+  
+!     public void processStatement(Session session) throws IOException {
+  
+          try {
+              if (statement.startsWith("/*C")) {
+diff -cr misc/hsqldb/src/org/hsqldb/scriptio/ScriptReaderZipped.java misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderZipped.java
+*** misc/hsqldb/src/org/hsqldb/scriptio/ScriptReaderZipped.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderZipped.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 54,60 ****
+          super(db, file);
+      }
+  
+!     protected void openFile() throws IOException {
+  
+          InputStream d = db.isFilesInJar()
+                          ? getClass().getResourceAsStream(fileName)
+--- 54,60 ----
+          super(db, file);
+      }
+  
+!     public void openFile() throws IOException {
+  
+          InputStream d = db.isFilesInJar()
+                          ? getClass().getResourceAsStream(fileName)
+diff -cr misc/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java
+*** misc/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 101,107 ****
+      volatile boolean needsSync;
+      volatile boolean forceSync;
+      volatile boolean busyWriting;
+!     private int      syncCount;
+      static final int INSERT             = 0;
+      static final int INSERT_WITH_SCHEMA = 1;
+  
+--- 101,107 ----
+      volatile boolean needsSync;
+      volatile boolean forceSync;
+      volatile boolean busyWriting;
+!     public int      syncCount;
+      static final int INSERT             = 0;
+      static final int INSERT_WITH_SCHEMA = 1;
+  
+***************
+*** 167,173 ****
+          openFile();
+      }
+  
+!     protected abstract void initBuffers();
+  
+      /**
+       *  Called internally or externally in write delay intervals.
+--- 167,173 ----
+          openFile();
+      }
+  
+!     public abstract void initBuffers();
+  
+      /**
+       *  Called internally or externally in write delay intervals.
+***************
+*** 231,237 ****
+       *  File is opened in append mode although in current usage the file
+       *  never pre-exists
+       */
+!     protected void openFile() throws HsqlException {
+  
+          try {
+              FileAccess   fa  = isDump ? new FileUtil()
+--- 231,237 ----
+       *  File is opened in append mode although in current usage the file
+       *  never pre-exists
+       */
+!     public void openFile() throws HsqlException {
+  
+          try {
+              FileAccess   fa  = isDump ? new FileUtil()
+***************
+*** 252,260 ****
+       * This is not really useful in the current usage but may be if this
+       * class is used in a different way.
+       */
+!     protected void finishStream() throws IOException {}
+  
+!     protected void writeDDL() throws IOException, HsqlException {
+  
+          Result ddlPart = DatabaseScript.getScript(database,
+              !includeCachedData);
+--- 252,260 ----
+       * This is not really useful in the current usage but may be if this
+       * class is used in a different way.
+       */
+!     public void finishStream() throws IOException {}
+  
+!     public void writeDDL() throws IOException, HsqlException {
+  
+          Result ddlPart = DatabaseScript.getScript(database,
+              !includeCachedData);
+***************
+*** 262,268 ****
+          writeSingleColumnResult(ddlPart);
+      }
+  
+!     protected void writeExistingData() throws HsqlException, IOException {
+  
+          // start with blank schema - SET SCHEMA to log
+          currentSession.loggedSchema = null;
+--- 262,268 ----
+          writeSingleColumnResult(ddlPart);
+      }
+  
+!     public void writeExistingData() throws HsqlException, IOException {
+  
+          // start with blank schema - SET SCHEMA to log
+          currentSession.loggedSchema = null;
+***************
+*** 320,329 ****
+          writeDataTerm();
+      }
+  
+!     protected void writeTableInit(Table t)
+      throws HsqlException, IOException {}
+  
+!     protected void writeTableTerm(Table t) throws HsqlException, IOException {
+  
+          if (t.isDataReadOnly() &&!t.isTemp() &&!t.isText()) {
+              StringBuffer a = new StringBuffer("SET TABLE ");
+--- 320,329 ----
+          writeDataTerm();
+      }
+  
+!     public void writeTableInit(Table t)
+      throws HsqlException, IOException {}
+  
+!     public void writeTableTerm(Table t) throws HsqlException, IOException {
+  
+          if (t.isDataReadOnly() &&!t.isTemp() &&!t.isText()) {
+              StringBuffer a = new StringBuffer("SET TABLE ");
+***************
+*** 334,340 ****
+          }
+      }
+  
+!     protected void writeSingleColumnResult(Result r)
+      throws HsqlException, IOException {
+  
+          Iterator it = r.iterator();
+--- 334,340 ----
+          }
+      }
+  
+!     public void writeSingleColumnResult(Result r)
+      throws HsqlException, IOException {
+  
+          Iterator it = r.iterator();
+***************
+*** 349,357 ****
+      abstract void writeRow(Session session, Table table,
+                             Object[] data) throws HsqlException, IOException;
+  
+!     protected abstract void writeDataTerm() throws IOException;
+  
+!     protected abstract void addSessionId(Session session) throws IOException;
+  
+      public abstract void writeLogStatement(Session session,
+                                             String s)
+--- 349,357 ----
+      abstract void writeRow(Session session, Table table,
+                             Object[] data) throws HsqlException, IOException;
+  
+!     public abstract void writeDataTerm() throws IOException;
+  
+!     public abstract void addSessionId(Session session) throws IOException;
+  
+      public abstract void writeLogStatement(Session session,
+                                             String s)
+***************
+*** 370,379 ****
+      throws HsqlException, IOException;
+  
+      //
+!     private Object timerTask;
+  
+      // long write delay for scripts : 60s
+!     protected volatile int writeDelay = 60000;
+  
+      public void run() {
+  
+--- 370,379 ----
+      throws HsqlException, IOException;
+  
+      //
+!     public Object timerTask;
+  
+      // long write delay for scripts : 60s
+!     public volatile int writeDelay = 60000;
+  
+      public void run() {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBinary.java misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBinary.java
+*** misc/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBinary.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBinary.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 55,72 ****
+          super(db, file, includeCached, newFile, false);
+      }
+  
+!     protected void initBuffers() {
+          rowOut = new RowOutputBinary();
+      }
+  
+!     protected void writeSingleColumnResult(Result r)
+      throws IOException, HsqlException {
+          Result.write(r, rowOut, fileStreamOut);
+      }
+  
+      // int : row size (0 if no more rows) ,
+      // RowInput/OutputBinary : row (column values)
+!     protected void writeRow(Session session, Table t,
+                              Object[] data) throws IOException, HsqlException {
+  
+          rowOut.reset();
+--- 55,72 ----
+          super(db, file, includeCached, newFile, false);
+      }
+  
+!     public void initBuffers() {
+          rowOut = new RowOutputBinary();
+      }
+  
+!     public void writeSingleColumnResult(Result r)
+      throws IOException, HsqlException {
+          Result.write(r, rowOut, fileStreamOut);
+      }
+  
+      // int : row size (0 if no more rows) ,
+      // RowInput/OutputBinary : row (column values)
+!     public void writeRow(Session session, Table t,
+                              Object[] data) throws IOException, HsqlException {
+  
+          rowOut.reset();
+***************
+*** 77,83 ****
+      }
+  
+      // int : headersize (0 if no more tables), String : tablename, int : operation,
+!     protected void writeTableInit(Table t) throws HsqlException, IOException {
+  
+          tableRowCount = 0;
+  
+--- 77,83 ----
+      }
+  
+      // int : headersize (0 if no more tables), String : tablename, int : operation,
+!     public void writeTableInit(Table t) throws HsqlException, IOException {
+  
+          tableRowCount = 0;
+  
+***************
+*** 90,96 ****
+          fileStreamOut.write(rowOut.getBuffer(), 0, rowOut.size());
+      }
+  
+!     protected void writeTableTerm(Table t) throws IOException {
+  
+          rowOut.reset();
+          rowOut.writeSize(0);
+--- 90,96 ----
+          fileStreamOut.write(rowOut.getBuffer(), 0, rowOut.size());
+      }
+  
+!     public void writeTableTerm(Table t) throws IOException {
+  
+          rowOut.reset();
+          rowOut.writeSize(0);
+***************
+*** 98,104 ****
+          fileStreamOut.write(rowOut.getBuffer(), 0, rowOut.size());
+      }
+  
+!     protected void writeDataTerm() throws IOException {
+  
+          rowOut.reset();
+          rowOut.writeSize(0);
+--- 98,104 ----
+          fileStreamOut.write(rowOut.getBuffer(), 0, rowOut.size());
+      }
+  
+!     public void writeDataTerm() throws IOException {
+  
+          rowOut.reset();
+          rowOut.writeSize(0);
+***************
+*** 109,115 ****
+                                    String s)
+                                    throws IOException, HsqlException {}
+  
+!     protected void addSessionId(Session session) throws IOException {}
+  
+      public void writeDeleteStatement(Session session, Table table,
+                                       Object[] ddata)
+--- 109,115 ----
+                                    String s)
+                                    throws IOException, HsqlException {}
+  
+!     public void addSessionId(Session session) throws IOException {}
+  
+      public void writeDeleteStatement(Session session, Table table,
+                                       Object[] ddata)
+diff -cr misc/hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java
+*** misc/hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 96,108 ****
+          super(db, file, includeCachedData, newFile, isDump);
+      }
+  
+!     protected void initBuffers() {
+          rowOut = new RowOutputTextLog();
+      }
+  
+!     protected void writeDataTerm() throws IOException {}
+  
+!     protected void addSessionId(Session session) throws IOException {
+  
+          if (session == null) {
+              return;
+--- 96,108 ----
+          super(db, file, includeCachedData, newFile, isDump);
+      }
+  
+!     public void initBuffers() {
+          rowOut = new RowOutputTextLog();
+      }
+  
+!     public void writeDataTerm() throws IOException {}
+  
+!     public void addSessionId(Session session) throws IOException {
+  
+          if (session == null) {
+              return;
+***************
+*** 123,129 ****
+          }
+      }
+  
+!     private void writeSchemaStatement(HsqlName schema) {
+  
+          rowOut.write(BYTES_SCHEMA);
+          rowOut.writeString(schema.statementName);
+--- 123,129 ----
+          }
+      }
+  
+!     public void writeSchemaStatement(HsqlName schema) {
+  
+          rowOut.write(BYTES_SCHEMA);
+          rowOut.writeString(schema.statementName);
+***************
+*** 152,158 ****
+          }
+      }
+  
+!     protected void writeRow(Session session, Table table,
+                              Object[] data) throws HsqlException, IOException {
+  
+          busyWriting = true;
+--- 152,158 ----
+          }
+      }
+  
+!     public void writeRow(Session session, Table table,
+                              Object[] data) throws HsqlException, IOException {
+  
+          busyWriting = true;
+***************
+*** 177,183 ****
+          }
+      }
+  
+!     protected void writeTableInit(Table t) throws HsqlException, IOException {
+  
+          if (t.isEmpty(currentSession)) {
+              return;
+--- 177,183 ----
+          }
+      }
+  
+!     public void writeTableInit(Table t) throws HsqlException, IOException {
+  
+          if (t.isEmpty(currentSession)) {
+              return;
+***************
+*** 275,281 ****
+          }
+      }
+  
+!     protected void finalize() {
+          sync();
+      }
+  }
+--- 275,281 ----
+          }
+      }
+  
+!     public void finalize() {
+          sync();
+      }
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/scriptio/ScriptWriterZipped.java misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterZipped.java
+*** misc/hsqldb/src/org/hsqldb/scriptio/ScriptWriterZipped.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterZipped.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 48,54 ****
+   */
+  class ScriptWriterZipped extends ScriptWriterBinary {
+  
+!     private static final int bufferSize = 1 << 15;
+  
+      ScriptWriterZipped(Database db, String file, boolean includeCached,
+                         boolean newFile) throws HsqlException {
+--- 48,54 ----
+   */
+  class ScriptWriterZipped extends ScriptWriterBinary {
+  
+!     public static final int bufferSize = 1 << 15;
+  
+      ScriptWriterZipped(Database db, String file, boolean includeCached,
+                         boolean newFile) throws HsqlException {
+***************
+*** 60,66 ****
+       */
+      public void sync() {}
+  
+!     protected void openFile() throws HsqlException {
+  
+          try {
+              FileAccess           fa  = database.getFileAccess();
+--- 60,66 ----
+       */
+      public void sync() {}
+  
+!     public void openFile() throws HsqlException {
+  
+          try {
+              FileAccess           fa  = database.getFileAccess();
+***************
+*** 81,87 ****
+       * This may not really be necessary, unless we add implementations where
+       * non-compressed data is added to the end of the copressed part.
+       */
+!     protected void finishStream() throws IOException {
+          ((DeflaterOutputStream) fileStreamOut).finish();
+          fileStreamOut.flush();
+      }
+--- 81,87 ----
+       * This may not really be necessary, unless we add implementations where
+       * non-compressed data is added to the end of the copressed part.
+       */
+!     public void finishStream() throws IOException {
+          ((DeflaterOutputStream) fileStreamOut).finish();
+          fileStreamOut.flush();
+      }
+diff -cr misc/hsqldb/src/org/hsqldb/Select.java misc/build/hsqldb/src/org/hsqldb/Select.java
+*** misc/hsqldb/src/org/hsqldb/Select.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Select.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 101,108 ****
+  
+      boolean               isDistinctSelect;
+      boolean               isAggregated;
+!     private boolean       isGrouped;
+!     private HashSet       groupColumnNames;
+      TableFilter[]         tFilter;
+      Expression            limitCondition;
+      Expression            queryCondition;     // null means no condition
+--- 101,108 ----
+  
+      boolean               isDistinctSelect;
+      boolean               isAggregated;
+!     public boolean       isGrouped;
+!     public HashSet       groupColumnNames;
+      TableFilter[]         tFilter;
+      Expression            limitCondition;
+      Expression            queryCondition;     // null means no condition
+***************
+*** 127,133 ****
+                            UNIONALL  = 2,
+                            INTERSECT = 3,
+                            EXCEPT    = 4;
+!     private boolean       simpleLimit;        // true if maxrows can be uses as is
+      Result.ResultMetaData resultMetaData;
+  
+      /**
+--- 127,133 ----
+                            UNIONALL  = 2,
+                            INTERSECT = 3,
+                            EXCEPT    = 4;
+!     public boolean       simpleLimit;        // true if maxrows can be uses as is
+      Result.ResultMetaData resultMetaData;
+  
+      /**
+***************
+*** 236,242 ****
+          }
+      }
+  
+!     private void setFilterConditions(Session session) throws HsqlException {
+  
+          if (queryCondition == null) {
+              return;
+--- 236,242 ----
+          }
+      }
+  
+!     public void setFilterConditions(Session session) throws HsqlException {
+  
+          if (queryCondition == null) {
+              return;
+***************
+*** 481,487 ****
+          return r;
+      }
+  
+!     private Result getResultMain(Session session) throws HsqlException {
+  
+          Result[] unionResults = new Result[unionArray.length];
+  
+--- 481,487 ----
+          return r;
+      }
+  
+!     public Result getResultMain(Session session) throws HsqlException {
+  
+          Result[] unionResults = new Result[unionArray.length];
+  
+***************
+*** 536,542 ****
+       * Merges the second result into the first using the unionMode
+       * set operation.
+       */
+!     private void mergeResults(Session session, Result first,
+                                Result second) throws HsqlException {
+  
+          switch (unionType) {
+--- 536,542 ----
+       * Merges the second result into the first using the unionMode
+       * set operation.
+       */
+!     public void mergeResults(Session session, Result first,
+                                Result second) throws HsqlException {
+  
+          switch (unionType) {
+***************
+*** 623,629 ****
+          return rowCount;
+      }
+  
+!     private Result getSingleResult(Session session,
+                                     int rowCount) throws HsqlException {
+  
+          if (resultMetaData == null) {
+--- 623,629 ----
+          return rowCount;
+      }
+  
+!     public Result getSingleResult(Session session,
+                                     int rowCount) throws HsqlException {
+  
+          if (resultMetaData == null) {
+***************
+*** 646,652 ****
+          return r;
+      }
+  
+!     private void prepareSort() {
+  
+          if (iOrderLen == 0) {
+              return;
+--- 646,652 ----
+          return r;
+      }
+  
+!     public void prepareSort() {
+  
+          if (iOrderLen == 0) {
+              return;
+***************
+*** 672,678 ****
+          }
+      }
+  
+!     private void sortResult(Session session, Result r) throws HsqlException {
+  
+          if (iOrderLen == 0) {
+              return;
+--- 672,678 ----
+          }
+      }
+  
+!     public void sortResult(Session session, Result r) throws HsqlException {
+  
+          if (iOrderLen == 0) {
+              return;
+***************
+*** 686,692 ****
+       * If any result column is aggregated, then all result columns need to be
+       * aggregated, unless it is included in the group by clause.
+       */
+!     private void checkAggregateOrGroupByColumns(int start,
+              int end) throws HsqlException {
+  
+          if (start < end) {
+--- 686,692 ----
+       * If any result column is aggregated, then all result columns need to be
+       * aggregated, unless it is included in the group by clause.
+       */
+!     public void checkAggregateOrGroupByColumns(int start,
+              int end) throws HsqlException {
+  
+          if (start < end) {
+***************
+*** 726,732 ****
+       * <LI>All the columns in the expression are defined in the group by clause;
+       * </UL)
+       */
+!     private boolean inAggregateOrGroupByClause(Expression exp) {
+  
+          if (isGrouped) {
+              return isSimilarIn(exp, iResultLen, iResultLen + iGroupLen)
+--- 726,732 ----
+       * <LI>All the columns in the expression are defined in the group by clause;
+       * </UL)
+       */
+!     public boolean inAggregateOrGroupByClause(Expression exp) {
+  
+          if (isGrouped) {
+              return isSimilarIn(exp, iResultLen, iResultLen + iGroupLen)
+***************
+*** 744,750 ****
+       * Check if the given expression is similar to any of the eColumn
+       * expressions within the given range.
+       */
+!     private boolean isSimilarIn(Expression exp, int start, int end) {
+  
+          for (int i = start; i < end; i++) {
+              if (exp.similarTo(exprColumns[i])) {
+--- 744,750 ----
+       * Check if the given expression is similar to any of the eColumn
+       * expressions within the given range.
+       */
+!     public boolean isSimilarIn(Expression exp, int start, int end) {
+  
+          for (int i = start; i < end; i++) {
+              if (exp.similarTo(exprColumns[i])) {
+***************
+*** 782,788 ****
+      }
+  
+  // fredt@users 20030810 - patch 1.7.2 - OUTER JOIN rewrite
+!     private Result buildResult(Session session,
+                                 int limitcount) throws HsqlException {
+  
+          GroupedResult gResult   = new GroupedResult(this, resultMetaData);
+--- 782,788 ----
+      }
+  
+  // fredt@users 20030810 - patch 1.7.2 - OUTER JOIN rewrite
+!     public Result buildResult(Session session,
+                                 int limitcount) throws HsqlException {
+  
+          GroupedResult gResult   = new GroupedResult(this, resultMetaData);
+diff -cr misc/hsqldb/src/org/hsqldb/ServerConfiguration.java misc/build/hsqldb/src/org/hsqldb/ServerConfiguration.java
+*** misc/hsqldb/src/org/hsqldb/ServerConfiguration.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/ServerConfiguration.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 49,55 ****
+   */
+  public final class ServerConfiguration implements ServerConstants {
+  
+!     private ServerConfiguration() {}
+  
+      /**
+       * Retrieves the default port that a Server will try to use in the
+--- 49,55 ----
+   */
+  public final class ServerConfiguration implements ServerConstants {
+  
+!     public ServerConfiguration() {}
+  
+      /**
+       * Retrieves the default port that a Server will try to use in the
+diff -cr misc/hsqldb/src/org/hsqldb/ServerConnection.java misc/build/hsqldb/src/org/hsqldb/ServerConnection.java
+*** misc/hsqldb/src/org/hsqldb/ServerConnection.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/ServerConnection.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 102,117 ****
+  class ServerConnection implements Runnable {
+  
+      boolean                      keepAlive;
+!     private String               user;
+!     private String               password;
+      int                          dbID;
+!     private volatile Session     session;
+!     private Socket               socket;
+!     private Server               server;
+!     private DataInputStream      dataInput;
+!     private BufferedOutputStream dataOutput;
+!     private static int           mCurrentThread = 0;
+!     private int                  mThread;
+      static final int             BUFFER_SIZE = 0x1000;
+      final byte[]                 mainBuffer  = new byte[BUFFER_SIZE];
+      RowOutputBinary              rowOut = new RowOutputBinary(BUFFER_SIZE);
+--- 102,117 ----
+  class ServerConnection implements Runnable {
+  
+      boolean                      keepAlive;
+!     public String               user;
+!     public String               password;
+      int                          dbID;
+!     public volatile Session     session;
+!     public Socket               socket;
+!     public Server               server;
+!     public DataInputStream      dataInput;
+!     public BufferedOutputStream dataOutput;
+!     public static int           mCurrentThread = 0;
+!     public int                  mThread;
+      static final int             BUFFER_SIZE = 0x1000;
+      final byte[]                 mainBuffer  = new byte[BUFFER_SIZE];
+      RowOutputBinary              rowOut = new RowOutputBinary(BUFFER_SIZE);
+***************
+*** 157,163 ****
+      /**
+       * Closes this connection.
+       */
+!     private void close() {
+  
+          if (session != null) {
+              session.close();
+--- 157,163 ----
+      /**
+       * Closes this connection.
+       */
+!     public void close() {
+  
+          if (session != null) {
+              session.close();
+***************
+*** 178,184 ****
+      /**
+       * Initializes this connection.
+       */
+!     private void init() {
+  
+          runnerThread = Thread.currentThread();
+          keepAlive    = true;
+--- 178,184 ----
+      /**
+       * Initializes this connection.
+       */
+!     public void init() {
+  
+          runnerThread = Thread.currentThread();
+          keepAlive    = true;
+***************
+*** 276,282 ****
+       * Used by pooled connections to close the existing SQL session and open
+       * a new one.
+       */
+!     private Result resetSession() {
+  
+          Result resultOut;
+  
+--- 276,282 ----
+       * Used by pooled connections to close the existing SQL session and open
+       * a new one.
+       */
+!     public Result resetSession() {
+  
+          Result resultOut;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/Server.java misc/build/hsqldb/src/org/hsqldb/Server.java
+*** misc/hsqldb/src/org/hsqldb/Server.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Server.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 212,218 ****
+  public class Server implements HsqlSocketRequestHandler {
+  
+  //
+!     protected static final int serverBundleHandle =
+          BundleHandler.getBundleHandle("org_hsqldb_Server_messages", null);
+  
+  //
+--- 212,218 ----
+  public class Server implements HsqlSocketRequestHandler {
+  
+  //
+!     public static final int serverBundleHandle =
+          BundleHandler.getBundleHandle("org_hsqldb_Server_messages", null);
+  
+  //
+***************
+*** 229,250 ****
+      int[]            dbID;
+  
+  //  Currently unused
+!     private int maxConnections;
+  
+  //
+!     protected String            serverId;
+!     protected int               serverProtocol;
+!     protected ThreadGroup       serverConnectionThreadGroup;
+!     protected HsqlSocketFactory socketFactory;
+!     protected ServerSocket      socket;
+  
+  //
+!     private Thread           serverThread;
+!     private Throwable        serverError;
+!     private volatile int     serverState;
+!     private volatile boolean isSilent;
+!     private PrintWriter      logWriter;
+!     private PrintWriter      errWriter;
+  
+  //
+  
+--- 229,250 ----
+      int[]            dbID;
+  
+  //  Currently unused
+!     public int maxConnections;
+  
+  //
+!     public String            serverId;
+!     public int               serverProtocol;
+!     public ThreadGroup       serverConnectionThreadGroup;
+!     public HsqlSocketFactory socketFactory;
+!     public ServerSocket      socket;
+  
+  //
+!     public Thread           serverThread;
+!     public Throwable        serverError;
+!     public volatile int     serverState;
+!     public volatile boolean isSilent;
+!     public PrintWriter      logWriter;
+!     public PrintWriter      errWriter;
+  
+  //
+  
+***************
+*** 252,258 ****
+       * A specialized Thread inner class in which the run() method of this
+       * server executes.
+       */
+!     private class ServerThread extends Thread {
+  
+          /**
+           * Constructs a new thread in which to execute the run method
+--- 252,258 ----
+       * A specialized Thread inner class in which the run() method of this
+       * server executes.
+       */
+!     public class ServerThread extends Thread {
+  
+          /**
+           * Constructs a new thread in which to execute the run method
+***************
+*** 296,302 ****
+       * @param protocol the ServerConstants code indicating which
+       *      connection protocol to handle
+       */
+!     protected Server(int protocol) {
+          init(protocol);
+      }
+  
+--- 296,302 ----
+       * @param protocol the ServerConstants code indicating which
+       *      connection protocol to handle
+       */
+!     public Server(int protocol) {
+          init(protocol);
+      }
+  
+***************
+*** 416,422 ****
+          printWithThread("signalCloseAllServerConnections() exited");
+      }
+  
+!     protected void finalize() throws Throwable {
+  
+          if (serverThread != null) {
+              releaseServerSocket();
+--- 416,422 ----
+          printWithThread("signalCloseAllServerConnections() exited");
+      }
+  
+!     public void finalize() throws Throwable {
+  
+          if (serverThread != null) {
+              releaseServerSocket();
+***************
+*** 1284,1290 ****
+       *
+       * @param socket the socket to test.
+       */
+!     protected boolean allowConnection(Socket socket) {
+          return true;
+      }
+  
+--- 1284,1290 ----
+       *
+       * @param socket the socket to test.
+       */
+!     public boolean allowConnection(Socket socket) {
+          return true;
+      }
+  
+***************
+*** 1293,1299 ****
+       *
+       * @param protocol typically either SC_PROTOCOL_HTTP or SC_PROTOCOL_HSQL
+       */
+!     protected void init(int protocol) {
+  
+          // PRE:  This method is only called from the constructor
+          serverState      = ServerConstants.SERVER_STATE_SHUTDOWN;
+--- 1293,1299 ----
+       *
+       * @param protocol typically either SC_PROTOCOL_HTTP or SC_PROTOCOL_HSQL
+       */
+!     public void init(int protocol) {
+  
+          // PRE:  This method is only called from the constructor
+          serverState      = ServerConstants.SERVER_STATE_SHUTDOWN;
+***************
+*** 1313,1319 ****
+       *
+       * @param state the new value
+       */
+!     protected synchronized void setState(int state) {
+          serverState = state;
+      }
+  
+--- 1313,1319 ----
+       *
+       * @param state the new value
+       */
+!     public synchronized void setState(int state) {
+          serverState = state;
+      }
+  
+***************
+*** 1389,1395 ****
+       *
+       * @param msg The message to print
+       */
+!     protected synchronized void print(String msg) {
+  
+          PrintWriter writer = logWriter;
+  
+--- 1389,1395 ----
+       *
+       * @param msg The message to print
+       */
+!     public synchronized void print(String msg) {
+  
+          PrintWriter writer = logWriter;
+  
+***************
+*** 1434,1440 ****
+       *
+       * @param t the Throwable whose stack trace is to be printed
+       */
+!     protected synchronized void printStackTrace(Throwable t) {
+  
+          if (errWriter != null) {
+              t.printStackTrace(errWriter);
+--- 1434,1440 ----
+       *
+       * @param t the Throwable whose stack trace is to be printed
+       */
+!     public synchronized void printStackTrace(Throwable t) {
+  
+          if (errWriter != null) {
+              t.printStackTrace(errWriter);
+***************
+*** 1460,1466 ****
+       *
+       * @param msg the message to print
+       */
+!     protected void printWithThread(String msg) {
+  
+          if (!isSilent()) {
+              print("[" + Thread.currentThread() + "]: " + msg);
+--- 1460,1466 ----
+       *
+       * @param msg the message to print
+       */
+!     public void printWithThread(String msg) {
+  
+          if (!isSilent()) {
+              print("[" + Thread.currentThread() + "]: " + msg);
+***************
+*** 1474,1480 ****
+       *
+       * @param msg the message to print
+       */
+!     protected synchronized void printError(String msg) {
+  
+          PrintWriter writer = errWriter;
+  
+--- 1474,1480 ----
+       *
+       * @param msg the message to print
+       */
+!     public synchronized void printError(String msg) {
+  
+          PrintWriter writer = errWriter;
+  
+***************
+*** 1722,1728 ****
+      /**
+       * Initialises the database attributes lists from the server properties object.
+       */
+!     private void setDBInfoArrays() {
+  
+          dbAlias = getDBNameArray();
+          dbPath  = new String[dbAlias.length];
+--- 1722,1728 ----
+      /**
+       * Initialises the database attributes lists from the server properties object.
+       */
+!     public void setDBInfoArrays() {
+  
+          dbAlias = getDBNameArray();
+          dbPath  = new String[dbAlias.length];
+***************
+*** 1761,1767 ****
+       * Returns a possibly sparse array of all server.dbname.n values
+       * from the properties object.
+       */
+!     private String[] getDBNameArray() {
+  
+          final String prefix    = ServerConstants.SC_KEY_DBNAME + ".";
+          final int    prefixLen = prefix.length();
+--- 1761,1767 ----
+       * Returns a possibly sparse array of all server.dbname.n values
+       * from the properties object.
+       */
+!     public String[] getDBNameArray() {
+  
+          final String prefix    = ServerConstants.SC_KEY_DBNAME + ".";
+          final int    prefixLen = prefix.length();
+***************
+*** 1802,1808 ****
+       * @throws Exception if it is not possible to construct and install
+       *      a new ServerSocket
+       */
+!     private void openServerSocket() throws Exception {
+  
+          String    address;
+          int       port;
+--- 1802,1808 ----
+       * @throws Exception if it is not possible to construct and install
+       *      a new ServerSocket
+       */
+!     public void openServerSocket() throws Exception {
+  
+          String    address;
+          int       port;
+***************
+*** 1866,1872 ****
+      }
+  
+      /** Prints a timestamped message indicating that this server is online */
+!     private void printServerOnlineMessage() {
+  
+          String s = getProductName() + " " + getProductVersion()
+                     + " is online";
+--- 1866,1872 ----
+      }
+  
+      /** Prints a timestamped message indicating that this server is online */
+!     public void printServerOnlineMessage() {
+  
+          String s = getProductName() + " " + getProductVersion()
+                     + " is online";
+***************
+*** 1878,1884 ****
+      /**
+       * Prints a description of the server properties iff !isSilent().
+       */
+!     protected void printProperties() {
+  
+          Enumeration e;
+          String      key;
+--- 1878,1884 ----
+      /**
+       * Prints a description of the server properties iff !isSilent().
+       */
+!     public void printProperties() {
+  
+          Enumeration e;
+          String      key;
+***************
+*** 1906,1912 ****
+       * this method exists immediately, otherwise, the result is to fully
+       * shut down the server.
+       */
+!     private void releaseServerSocket() {
+  
+          printWithThread("releaseServerSocket() entered");
+  
+--- 1906,1912 ----
+       * this method exists immediately, otherwise, the result is to fully
+       * shut down the server.
+       */
+!     public void releaseServerSocket() {
+  
+          printWithThread("releaseServerSocket() entered");
+  
+***************
+*** 1935,1941 ****
+       * If any part of the process fails, then this server enters
+       * its shutdown sequence.
+       */
+!     private void run() {
+  
+          StopWatch   sw;
+          ThreadGroup tg;
+--- 1935,1941 ----
+       * If any part of the process fails, then this server enters
+       * its shutdown sequence.
+       */
+!     public void run() {
+  
+          StopWatch   sw;
+          ThreadGroup tg;
+***************
+*** 2019,2025 ****
+       *
+       * @param t The new value for the server error
+       */
+!     protected void setServerError(Throwable t) {
+          serverError = t;
+      }
+  
+--- 2019,2025 ----
+       *
+       * @param t The new value for the server error
+       */
+!     public void setServerError(Throwable t) {
+          serverError = t;
+      }
+  
+***************
+*** 2036,2042 ****
+       * @param error true if shutdown is in response to an error
+       *      state, else false
+       */
+!     protected void shutdown(boolean error) {
+  
+          StopWatch sw;
+  
+--- 2036,2042 ----
+       * @param error true if shutdown is in response to an error
+       *      state, else false
+       */
+!     public void shutdown(boolean error) {
+  
+          StopWatch sw;
+  
+***************
+*** 2115,2121 ****
+       *
+       * @param key for message
+       */
+!     protected static void printHelp(String key) {
+          System.out.print(BundleHandler.getString(serverBundleHandle, key));
+      }
+  }
+--- 2115,2121 ----
+       *
+       * @param key for message
+       */
+!     public static void printHelp(String key) {
+          System.out.print(BundleHandler.getString(serverBundleHandle, key));
+      }
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/Servlet.java misc/build/hsqldb/src/org/hsqldb/Servlet.java
+*** misc/hsqldb/src/org/hsqldb/Servlet.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Servlet.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 127,139 ****
+   */
+  public class Servlet extends javax.servlet.http.HttpServlet {
+  
+!     private static final int BUFFER_SIZE = 256;
+!     private String           dbType;
+!     private String           dbPath;
+!     private String           errorStr;
+!     private RowOutputBinary  rowOut;
+!     private RowInputBinary   rowIn;
+!     private int              iQueries;
+  
+      /**
+       * Method declaration
+--- 127,139 ----
+   */
+  public class Servlet extends javax.servlet.http.HttpServlet {
+  
+!     public static final int BUFFER_SIZE = 256;
+!     public String           dbType;
+!     public String           dbPath;
+!     public String           errorStr;
+!     public RowOutputBinary  rowOut;
+!     public RowInputBinary   rowIn;
+!     public int              iQueries;
+  
+      /**
+       * Method declaration
+***************
+*** 190,196 ****
+          log("Initialization completed.");
+      }
+  
+!     private static long lModified = 0;
+  
+      /**
+       * Method declaration
+--- 190,196 ----
+          log("Initialization completed.");
+      }
+  
+!     public static long lModified = 0;
+  
+      /**
+       * Method declaration
+***************
+*** 200,206 ****
+       *
+       * @return
+       */
+!     protected long getLastModified(HttpServletRequest req) {
+  
+          // this is made so that the cache of the http server is not used
+          // maybe there is some other way
+--- 200,206 ----
+       *
+       * @return
+       */
+!     public long getLastModified(HttpServletRequest req) {
+  
+          // this is made so that the cache of the http server is not used
+          // maybe there is some other way
+diff -cr misc/hsqldb/src/org/hsqldb/Session.java misc/build/hsqldb/src/org/hsqldb/Session.java
+*** misc/hsqldb/src/org/hsqldb/Session.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Session.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 112,155 ****
+  public class Session implements SessionInterface {
+  
+      //
+!     private volatile boolean isAutoCommit;
+!     private volatile boolean isReadOnly;
+!     private volatile boolean isClosed;
+      int                      isolation;
+  
+      //
+      Database          database;
+!     private User      user;
+      HsqlArrayList     transactionList;
+!     private boolean   isNestedTransaction;
+!     private int       nestedOldTransIndex;
+!     private int       currentMaxRows;
+!     private int       sessionMaxRows;
+!     private Number    lastIdentity = ValuePool.getInt(0);
+!     private final int sessionId;
+      HashMappedList    savepoints;
+!     private boolean   script;
+!     private Tokenizer tokenizer;
+!     private Parser    parser;
+!     private long      sessionSCN;
+      static final Result emptyUpdateCount =
+          new Result(ResultConstants.UPDATECOUNT);
+  
+      //
+!     private jdbcConnection intConnection;
+  
+      // schema
+      public HsqlName  currentSchema;
+      public HsqlName  loggedSchema;
+!     private HsqlName oldSchema;
+  
+      // query processing
+      boolean isProcessingScript;
+      boolean isProcessingLog;
+  
+      // two types of temp tables
+!     private IntKeyHashMap indexArrayMap;
+!     private IntKeyHashMap indexArrayKeepMap;
+  
+      /** @todo fredt - clarify in which circumstances Session has to disconnect */
+      Session getSession() {
+--- 112,155 ----
+  public class Session implements SessionInterface {
+  
+      //
+!     public volatile boolean isAutoCommit;
+!     public volatile boolean isReadOnly;
+!     public volatile boolean isClosed;
+      int                      isolation;
+  
+      //
+      Database          database;
+!     public User      user;
+      HsqlArrayList     transactionList;
+!     public boolean   isNestedTransaction;
+!     public int       nestedOldTransIndex;
+!     public int       currentMaxRows;
+!     public int       sessionMaxRows;
+!     public Number    lastIdentity = ValuePool.getInt(0);
+!     public final int sessionId;
+      HashMappedList    savepoints;
+!     public boolean   script;
+!     public Tokenizer tokenizer;
+!     public Parser    parser;
+!     public long      sessionSCN;
+      static final Result emptyUpdateCount =
+          new Result(ResultConstants.UPDATECOUNT);
+  
+      //
+!     public jdbcConnection intConnection;
+  
+      // schema
+      public HsqlName  currentSchema;
+      public HsqlName  loggedSchema;
+!     public HsqlName oldSchema;
+  
+      // query processing
+      boolean isProcessingScript;
+      boolean isProcessingLog;
+  
+      // two types of temp tables
+!     public IntKeyHashMap indexArrayMap;
+!     public IntKeyHashMap indexArrayKeepMap;
+  
+      /** @todo fredt - clarify in which circumstances Session has to disconnect */
+      Session getSession() {
+***************
+*** 691,697 ****
+  
+  // boucherb@users 20020810 metadata 1.7.2
+  //----------------------------------------------------------------
+!     private final long connectTime = System.currentTimeMillis();
+  
+  // more effecient for MetaData concerns than checkAdmin
+  
+--- 691,697 ----
+  
+  // boucherb@users 20020810 metadata 1.7.2
+  //----------------------------------------------------------------
+!     public final long connectTime = System.currentTimeMillis();
+  
+  // more effecient for MetaData concerns than checkAdmin
+  
+***************
+*** 738,744 ****
+      CompiledStatementExecutor  compiledStatementExecutor;
+      CompiledStatementManager   compiledStatementManager;
+  
+!     private CompiledStatement sqlCompileStatement(String sql)
+      throws HsqlException {
+  
+          parser.reset(sql);
+--- 738,744 ----
+      CompiledStatementExecutor  compiledStatementExecutor;
+      CompiledStatementManager   compiledStatementManager;
+  
+!     public CompiledStatement sqlCompileStatement(String sql)
+      throws HsqlException {
+  
+          parser.reset(sql);
+***************
+*** 949,955 ****
+          }
+      }
+  
+!     private Result performPostExecute(Result r) {
+  
+          try {
+              if (database != null) {
+--- 949,955 ----
+          }
+      }
+  
+!     public Result performPostExecute(Result r) {
+  
+          try {
+              if (database != null) {
+***************
+*** 1001,1007 ****
+       * @throws HsqlException is a database access error occurs
+       * @return a MULTI Result describing the compiled statement.
+       */
+!     private Result sqlPrepare(String sql) {
+  
+          int csid = compiledStatementManager.getStatementID(currentSchema,
+              sql);
+--- 1001,1007 ----
+       * @throws HsqlException is a database access error occurs
+       * @return a MULTI Result describing the compiled statement.
+       */
+!     public Result sqlPrepare(String sql) {
+  
+          int csid = compiledStatementManager.getStatementID(currentSchema,
+              sql);
+***************
+*** 1048,1054 ****
+          return Result.newPrepareResponse(csid, rmd, pmd);
+      }
+  
+!     private Result sqlExecuteBatch(Result cmd) {
+  
+          int               csid;
+          Record            record;
+--- 1048,1054 ----
+          return Result.newPrepareResponse(csid, rmd, pmd);
+      }
+  
+!     public Result sqlExecuteBatch(Result cmd) {
+  
+          int               csid;
+          Record            record;
+***************
+*** 1128,1134 ****
+          return out;
+      }
+  
+!     private Result sqlExecuteBatchDirect(Result cmd) {
+  
+          Record record;
+          Result out;
+--- 1128,1134 ----
+          return out;
+      }
+  
+!     public Result sqlExecuteBatchDirect(Result cmd) {
+  
+          Record record;
+          Result out;
+***************
+*** 1189,1195 ****
+       *
+       * @return the result of executing the statement
+       */
+!     private Result sqlExecute(Result cmd) {
+  
+          int               csid  = cmd.getStatementID();
+          Object[]          pvals = cmd.getParameterData();
+--- 1189,1195 ----
+       *
+       * @return the result of executing the statement
+       */
+!     public Result sqlExecute(Result cmd) {
+  
+          int               csid  = cmd.getStatementID();
+          Object[]          pvals = cmd.getParameterData();
+***************
+*** 1228,1234 ****
+      /**
+       * Recompile a prepard statement or free it if no longer valid
+       */
+!     private CompiledStatement recompileStatement(CompiledStatement cs,
+              int csid) {
+  
+          String sql = compiledStatementManager.getSql(csid);
+--- 1228,1234 ----
+      /**
+       * Recompile a prepard statement or free it if no longer valid
+       */
+!     public CompiledStatement recompileStatement(CompiledStatement cs,
+              int csid) {
+  
+          String sql = compiledStatementManager.getSql(csid);
+***************
+*** 1257,1263 ****
+       *
+       * @param csid the numeric identifier of the statement
+       */
+!     private Result sqlFreeStatement(int csid) {
+  
+          Result result;
+  
+--- 1257,1263 ----
+       *
+       * @param csid the numeric identifier of the statement
+       */
+!     public Result sqlFreeStatement(int csid) {
+  
+          Result result;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/SessionManager.java misc/build/hsqldb/src/org/hsqldb/SessionManager.java
+*** misc/hsqldb/src/org/hsqldb/SessionManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/SessionManager.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 45,52 ****
+  public class SessionManager {
+  
+      int                   sessionIdCount = 1;
+!     private IntKeyHashMap sessionMap     = new IntKeyHashMap();
+!     private Session       sysSession;
+  
+  // TODO:
+  //
+--- 45,52 ----
+  public class SessionManager {
+  
+      int                   sessionIdCount = 1;
+!     public IntKeyHashMap sessionMap     = new IntKeyHashMap();
+!     public Session       sysSession;
+  
+  // TODO:
+  //
+diff -cr misc/hsqldb/src/org/hsqldb/SetFunction.java misc/build/hsqldb/src/org/hsqldb/SetFunction.java
+*** misc/hsqldb/src/org/hsqldb/SetFunction.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/SetFunction.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 51,72 ****
+   */
+  public class SetFunction {
+  
+!     private HashSet distinctValues;
+!     private boolean isDistinct;
+  
+      //
+!     private int setType;
+!     private int type;
+  
+      //
+!     private int count;
+  
+      //
+!     private boolean    hasNull;
+!     private long       currentLong;
+!     private double     currentDouble;
+!     private BigDecimal currentBigDecimal;
+!     private Object     currentValue;
+  
+      SetFunction(int setType, int type, boolean isDistinct) {
+  
+--- 51,72 ----
+   */
+  public class SetFunction {
+  
+!     public HashSet distinctValues;
+!     public boolean isDistinct;
+  
+      //
+!     public int setType;
+!     public int type;
+  
+      //
+!     public int count;
+  
+      //
+!     public boolean    hasNull;
+!     public long       currentLong;
+!     public double     currentDouble;
+!     public BigDecimal currentBigDecimal;
+!     public Object     currentValue;
+  
+      SetFunction(int setType, int type, boolean isDistinct) {
+  
+***************
+*** 403,415 ****
+      // end long sum
+      // statistics support - written by Campbell
+      // this section was orginally an independent class
+!     private double  sk;
+!     private double  vk;
+!     private long    n;
+!     private boolean initialized;
+!     private boolean sample;
+  
+!     private void addDataPoint(Number x) {
+  
+          double xi;
+  
+--- 403,415 ----
+      // end long sum
+      // statistics support - written by Campbell
+      // this section was orginally an independent class
+!     public double  sk;
+!     public double  vk;
+!     public long    n;
+!     public boolean initialized;
+!     public boolean sample;
+  
+!     public void addDataPoint(Number x) {
+  
+          double xi;
+  
+***************
+*** 435,441 ****
+          sk += xi;
+      }
+  
+!     private Number getVariance() {
+  
+          if (!initialized) {
+              return null;
+--- 435,441 ----
+          sk += xi;
+      }
+  
+!     public Number getVariance() {
+  
+          if (!initialized) {
+              return null;
+***************
+*** 446,452 ****
+                        : new Double(vk / (double) (n));
+      }
+  
+!     private Number getStdDev() {
+  
+          if (!initialized) {
+              return null;
+--- 446,452 ----
+                        : new Double(vk / (double) (n));
+      }
+  
+!     public Number getStdDev() {
+  
+          if (!initialized) {
+              return null;
+diff -cr misc/hsqldb/src/org/hsqldb/store/BaseHashMap.java misc/build/hsqldb/src/org/hsqldb/store/BaseHashMap.java
+*** misc/hsqldb/src/org/hsqldb/store/BaseHashMap.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/store/BaseHashMap.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 88,104 ****
+      boolean isObjectValue;
+  
+      //
+!     protected HashIndex hashIndex;
+  
+      //
+!     protected int[]    intKeyTable;
+!     protected Object[] objectKeyTable;
+!     protected long[]   longKeyTable;
+  
+      //
+!     protected int[]    intValueTable;
+!     protected Object[] objectValueTable;
+!     protected long[]   longValueTable;
+  
+      //
+      int   accessMin;
+--- 88,104 ----
+      boolean isObjectValue;
+  
+      //
+!     public HashIndex hashIndex;
+  
+      //
+!     public int[]    intKeyTable;
+!     public Object[] objectKeyTable;
+!     public long[]   longKeyTable;
+  
+      //
+!     public int[]    intValueTable;
+!     public Object[] objectValueTable;
+!     public long[]   longValueTable;
+  
+      //
+      int   accessMin;
+***************
+*** 109,134 ****
+      final int         initialCapacity;
+      int               threshold;
+      int               maxCapacity;
+!     protected int     purgePolicy = NO_PURGE;
+!     protected boolean minimizeOnEmpty;
+  
+      //
+      boolean hasZeroKey;
+      int     zeroKeyIndex = -1;
+  
+      // keyOrValueTypes
+!     protected static final int noKeyOrValue     = 0;
+!     protected static final int intKeyOrValue    = 1;
+!     protected static final int longKeyOrValue   = 2;
+!     protected static final int objectKeyOrValue = 3;
+  
+      // purgePolicy
+!     protected static final int NO_PURGE      = 0;
+!     protected static final int PURGE_ALL     = 1;
+!     protected static final int PURGE_HALF    = 2;
+!     protected static final int PURGE_QUARTER = 3;
+  
+!     protected BaseHashMap(int initialCapacity, float loadFactor, int keyType,
+                            int valueType,
+                            boolean hasAccessCount)
+                            throws IllegalArgumentException {
+--- 109,134 ----
+      final int      initialCapacity;
+      int            threshold;
+      int            maxCapacity;
+!     public int     purgePolicy = NO_PURGE;
+!     public boolean minimizeOnEmpty;
+  
+      //
+      boolean hasZeroKey;
+      int     zeroKeyIndex = -1;
+  
+      // keyOrValueTypes
+!     public static final int noKeyOrValue     = 0;
+!     public static final int intKeyOrValue    = 1;
+!     public static final int longKeyOrValue   = 2;
+!     public static final int objectKeyOrValue = 3;
+  
+      // purgePolicy
+!     public static final int NO_PURGE      = 0;
+!     public static final int PURGE_ALL     = 1;
+!     public static final int PURGE_HALF    = 2;
+!     public static final int PURGE_QUARTER = 3;
+  
+!     public BaseHashMap(int initialCapacity, float loadFactor, int keyType,
+                            int valueType,
+                            boolean hasAccessCount)
+                            throws IllegalArgumentException {
+***************
+*** 182,188 ****
+          }
+      }
+  
+!     protected int getLookup(Object key, int hash) {
+  
+          int    lookup = hashIndex.getLookup(hash);
+          Object tempKey;
+--- 182,188 ----
+          }
+      }
+  
+!     public int getLookup(Object key, int hash) {
+  
+          int    lookup = hashIndex.getLookup(hash);
+          Object tempKey;
+***************
+*** 198,204 ****
+          return lookup;
+      }
+  
+!     protected int getLookup(int key) {
+  
+          int lookup = hashIndex.getLookup(key);
+          int tempKey;
+--- 198,204 ----
+          return lookup;
+      }
+  
+!     public int getLookup(int key) {
+  
+          int lookup = hashIndex.getLookup(key);
+          int tempKey;
+***************
+*** 214,220 ****
+          return lookup;
+      }
+  
+!     protected int getLookup(long key) {
+  
+          int  lookup = hashIndex.getLookup((int) key);
+          long tempKey;
+--- 214,220 ----
+          return lookup;
+      }
+  
+!     public int getLookup(long key) {
+  
+          int  lookup = hashIndex.getLookup((int) key);
+          long tempKey;
+***************
+*** 233,239 ****
+      /**
+       * generic method for adding or removing keys
+       */
+!     protected Object addOrRemove(long longKey, long longValue,
+                                   Object objectKey, Object objectValue,
+                                   boolean remove) {
+  
+--- 233,239 ----
+      /**
+       * generic method for adding or removing keys
+       */
+!     public Object addOrRemove(long longKey, long longValue,
+                                   Object objectKey, Object objectValue,
+                                   boolean remove) {
+  
+***************
+*** 377,383 ****
+      /**
+       * type-specific method for adding or removing keys in int->Object maps
+       */
+!     protected Object addOrRemove(int intKey, Object objectValue,
+                                   boolean remove) {
+  
+          int    hash        = intKey;
+--- 377,383 ----
+      /**
+       * type-specific method for adding or removing keys in int->Object maps
+       */
+!     public Object addOrRemove(int intKey, Object objectValue,
+                                   boolean remove) {
+  
+          int    hash        = intKey;
+***************
+*** 459,465 ****
+      /**
+       * type specific method for Object sets or Object->Object maps
+       */
+!     protected Object removeObject(Object objectKey) {
+  
+          if (objectKey == null) {
+              return null;
+--- 459,465 ----
+      /**
+       * type specific method for Object sets or Object->Object maps
+       */
+!     public Object removeObject(Object objectKey) {
+  
+          if (objectKey == null) {
+              return null;
+***************
+*** 492,498 ****
+          return returnValue;
+      }
+  
+!     protected boolean reset() {
+  
+          if (maxCapacity == 0 || maxCapacity > threshold) {
+              rehash(hashIndex.hashTable.length * 2);
+--- 492,498 ----
+          return returnValue;
+      }
+  
+!     public boolean reset() {
+  
+          if (maxCapacity == 0 || maxCapacity > threshold) {
+              rehash(hashIndex.hashTable.length * 2);
+***************
+*** 524,530 ****
+       *
+       * newCapacity must be larger or equal to existing number of elements.
+       */
+!     protected void rehash(int newCapacity) {
+  
+          int     limitLookup     = hashIndex.newNodePointer;
+          boolean oldZeroKey      = hasZeroKey;
+--- 524,530 ----
+       *
+       * newCapacity must be larger or equal to existing number of elements.
+       */
+!     public void rehash(int newCapacity) {
+  
+          int     limitLookup     = hashIndex.newNodePointer;
+          boolean oldZeroKey      = hasZeroKey;
+***************
+*** 577,583 ****
+      /**
+       * resize the arrays contianing the key / value data
+       */
+!     private void resizeElementArrays(int dataLength, int newLength) {
+  
+          Object temp;
+          int    usedLength = newLength > dataLength ? dataLength
+--- 577,583 ----
+      /**
+       * resize the arrays contianing the key / value data
+       */
+!     public void resizeElementArrays(int dataLength, int newLength) {
+  
+          Object temp;
+          int    usedLength = newLength > dataLength ? dataLength
+***************
+*** 636,642 ****
+      /**
+       * clear all the key / value data in a range.
+       */
+!     private void clearElementArrays(final int from, final int to) {
+  
+          if (isIntKey) {
+              int counter = to;
+--- 636,642 ----
+      /**
+       * clear all the key / value data in a range.
+       */
+!     public void clearElementArrays(final int from, final int to) {
+  
+          if (isIntKey) {
+              int counter = to;
+***************
+*** 819,830 ****
+      /**
+       * row must already been freed of key / element
+       */
+!     protected void removeRow(int lookup) {
+          hashIndex.removeEmptyNode(lookup);
+          removeFromElementArrays(lookup);
+      }
+  
+!     protected Object removeLookup(int lookup) {
+  
+          if (isObjectKey) {
+              return addOrRemove(0, 0, objectKeyTable[lookup], null, true);
+--- 819,830 ----
+      /**
+       * row must already been freed of key / element
+       */
+!     public void removeRow(int lookup) {
+          hashIndex.removeEmptyNode(lookup);
+          removeFromElementArrays(lookup);
+      }
+  
+!     public Object removeLookup(int lookup) {
+  
+          if (isObjectKey) {
+              return addOrRemove(0, 0, objectKeyTable[lookup], null, true);
+***************
+*** 851,857 ****
+       * Return the max accessCount value for count elements with the lowest
+       * access count. Always return at least accessMin + 1
+       */
+!     protected int getAccessCountCeiling(int count, int margin) {
+          return ArrayCounter.rank(accessTable, hashIndex.newNodePointer,
+                                   count, accessMin + 1, accessCount, margin);
+      }
+--- 851,857 ----
+       * Return the max accessCount value for count elements with the lowest
+       * access count. Always return at least accessMin + 1
+       */
+!     public int getAccessCountCeiling(int count, int margin) {
+          return ArrayCounter.rank(accessTable, hashIndex.newNodePointer,
+                                   count, accessMin + 1, accessCount, margin);
+      }
+***************
+*** 862,868 ****
+       *
+       * Only for maps with Object key table
+       */
+!     protected void clear(int count, int margin) {
+  
+          if (margin < 64) {
+              margin = 64;
+--- 862,868 ----
+       *
+       * Only for maps with Object key table
+       */
+!     public void clear(int count, int margin) {
+  
+          if (margin < 64) {
+              margin = 64;
+***************
+*** 906,912 ****
+          return hashIndex.elementCount == 0;
+      }
+  
+!     protected boolean containsKey(Object key) {
+  
+          if (key == null) {
+              return false;
+--- 906,912 ----
+          return hashIndex.elementCount == 0;
+      }
+  
+!     public boolean containsKey(Object key) {
+  
+          if (key == null) {
+              return false;
+***************
+*** 918,924 ****
+                              : true;
+      }
+  
+!     protected boolean containsKey(int key) {
+  
+          int lookup = getLookup(key);
+  
+--- 918,924 ----
+                              : true;
+      }
+  
+!     public boolean containsKey(int key) {
+  
+          int lookup = getLookup(key);
+  
+***************
+*** 926,932 ****
+                              : true;
+      }
+  
+!     protected boolean containsKey(long key) {
+  
+          int lookup = getLookup(key);
+  
+--- 926,932 ----
+                              : true;
+      }
+  
+!     public boolean containsKey(long key) {
+  
+          int lookup = getLookup(key);
+  
+***************
+*** 934,940 ****
+                              : true;
+      }
+  
+!     protected boolean containsValue(Object value) {
+  
+          int lookup = 0;
+  
+--- 934,940 ----
+                              : true;
+      }
+  
+!     public boolean containsValue(Object value) {
+  
+          int lookup = 0;
+  
+***************
+*** 975,981 ****
+       * Iterator returns Object, int or long and is used both for keys and
+       * values
+       */
+!     protected class BaseHashIterator implements org.hsqldb.lib.Iterator {
+  
+          boolean keys;
+          int     lookup = -1;
+--- 975,981 ----
+       * Iterator returns Object, int or long and is used both for keys and
+       * values
+       */
+!     public class BaseHashIterator implements org.hsqldb.lib.Iterator {
+  
+          boolean keys;
+          int     lookup = -1;
+diff -cr misc/hsqldb/src/org/hsqldb/store/BitMap.java misc/build/hsqldb/src/org/hsqldb/store/BitMap.java
+*** misc/hsqldb/src/org/hsqldb/store/BitMap.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/store/BitMap.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 141,147 ****
+                                   : true;
+      }
+  
+!     private void doubleCapacity() {
+  
+          int[] newmap = new int[capacity * 2];
+  
+--- 141,147 ----
+                                   : true;
+      }
+  
+!     public void doubleCapacity() {
+  
+          int[] newmap = new int[capacity * 2];
+  
+diff -cr misc/hsqldb/src/org/hsqldb/store/ValuePoolHashMap.java misc/build/hsqldb/src/org/hsqldb/store/ValuePoolHashMap.java
+*** misc/hsqldb/src/org/hsqldb/store/ValuePoolHashMap.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/store/ValuePoolHashMap.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 98,104 ****
+          this.purgePolicy = newPolicy;
+      }
+  
+!     protected Integer getOrAddInteger(int intKey) {
+  
+          Integer testValue;
+          int     index      = hashIndex.getHashIndex(intKey);
+--- 98,104 ----
+          this.purgePolicy = newPolicy;
+      }
+  
+!     public Integer getOrAddInteger(int intKey) {
+  
+          Integer testValue;
+          int     index      = hashIndex.getHashIndex(intKey);
+***************
+*** 140,146 ****
+          return testValue;
+      }
+  
+!     protected Long getOrAddLong(long longKey) {
+  
+          Long testValue;
+          int index = hashIndex.getHashIndex((int) (longKey
+--- 140,146 ----
+          return testValue;
+      }
+  
+!     public Long getOrAddLong(long longKey) {
+  
+          Long testValue;
+          int index = hashIndex.getHashIndex((int) (longKey
+***************
+*** 199,205 ****
+       * and hashCode().
+       * @return String from map or a new String
+       */
+!     protected String getOrAddString(Object key) {
+  
+          String testValue;
+          int    index      = hashIndex.getHashIndex(key.hashCode());
+--- 199,205 ----
+       * and hashCode().
+       * @return String from map or a new String
+       */
+!     public String getOrAddString(Object key) {
+  
+          String testValue;
+          int    index      = hashIndex.getHashIndex(key.hashCode());
+***************
+*** 241,247 ****
+          return testValue;
+      }
+  
+!     protected Date getOrAddDate(long longKey) {
+  
+          Date testValue;
+          int  hash       = (int) longKey ^ (int) (longKey >>> 32);
+--- 241,247 ----
+          return testValue;
+      }
+  
+!     public Date getOrAddDate(long longKey) {
+  
+          Date testValue;
+          int  hash       = (int) longKey ^ (int) (longKey >>> 32);
+***************
+*** 284,290 ****
+          return testValue;
+      }
+  
+!     protected Double getOrAddDouble(long longKey) {
+  
+          Double testValue;
+          int index = hashIndex.getHashIndex((int) (longKey
+--- 284,290 ----
+          return testValue;
+      }
+  
+!     public Double getOrAddDouble(long longKey) {
+  
+          Double testValue;
+          int index = hashIndex.getHashIndex((int) (longKey
+***************
+*** 327,333 ****
+          return testValue;
+      }
+  
+!     protected Object getOrAddObject(Object key) {
+  
+          Object testValue;
+          int    index      = hashIndex.getHashIndex(key.hashCode());
+--- 327,333 ----
+          return testValue;
+      }
+  
+!     public Object getOrAddObject(Object key) {
+  
+          Object testValue;
+          int    index      = hashIndex.getHashIndex(key.hashCode());
+diff -cr misc/hsqldb/src/org/hsqldb/store/ValuePool.java misc/build/hsqldb/src/org/hsqldb/store/ValuePool.java
+*** misc/hsqldb/src/org/hsqldb/store/ValuePool.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/store/ValuePool.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 77,83 ****
+          initPool();
+      }
+  
+!     private static void initPool() {
+  
+          int[] sizeArray  = defaultPoolLookupSize;
+          int   sizeFactor = defaultSizeFactor;
+--- 77,83 ----
+          initPool();
+      }
+  
+!     public static void initPool() {
+  
+          int[] sizeArray  = defaultPoolLookupSize;
+          int   sizeFactor = defaultSizeFactor;
+diff -cr misc/hsqldb/src/org/hsqldb/TableFilter.java misc/build/hsqldb/src/org/hsqldb/TableFilter.java
+*** misc/hsqldb/src/org/hsqldb/TableFilter.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/TableFilter.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 93,103 ****
+      static final int   CONDITION_END       = 3;    // candidate for eEnd
+      static final int   CONDITION_OUTER     = 4;    // add to this
+      Table              filterTable;
+!     private String     tableAlias;
+      Index              filterIndex;
+!     private Object[]   emptyData;
+      boolean[]          usedColumns;
+!     private Expression eStart, eEnd;
+  
+      //
+      Expression eAnd;
+--- 93,103 ----
+      static final int   CONDITION_END       = 3;    // candidate for eEnd
+      static final int   CONDITION_OUTER     = 4;    // add to this
+      Table              filterTable;
+!     public String     tableAlias;
+      Index              filterIndex;
+!     public Object[]   emptyData;
+      boolean[]          usedColumns;
+!     public Expression eStart, eEnd;
+  
+      //
+      Expression eAnd;
+***************
+*** 109,115 ****
+      Expression[] findFirstExpressions;             // expressions for column values
+  
+      //
+!     private RowIterator it;
+      Object[]            currentData;
+      Row                 currentRow;
+  
+--- 109,115 ----
+      Expression[] findFirstExpressions;             // expressions for column values
+  
+      //
+!     public RowIterator it;
+      Object[]            currentData;
+      Row                 currentRow;
+  
+***************
+*** 326,332 ****
+          }
+      }
+  
+!     private void setCondition(Session session,
+                                Expression e) throws HsqlException {
+  
+          int        type = e.getType();
+--- 326,332 ----
+          }
+      }
+  
+!     public void setCondition(Session session,
+                                Expression e) throws HsqlException {
+  
+          int        type = e.getType();
+***************
+*** 647,653 ****
+       *
+       * @param e the condition to add
+       */
+!     private void addAndCondition(Expression e) {
+  
+          Expression e2 = new Expression(e);
+  
+--- 647,653 ----
+       *
+       * @param e the condition to add
+       */
+!     public void addAndCondition(Expression e) {
+  
+          Expression e2 = new Expression(e);
+  
+diff -cr misc/hsqldb/src/org/hsqldb/Table.java misc/build/hsqldb/src/org/hsqldb/Table.java
+*** misc/hsqldb/src/org/hsqldb/Table.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Table.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 134,142 ****
+      // main properties
+  // boucherb@users - access changed in support of metadata 1.7.2
+      public HashMappedList columnList;                 // columns in table
+!     private int[]         primaryKeyCols;             // column numbers for primary key
+!     private int[]         primaryKeyTypes;            // types for primary key
+!     private int[]         primaryKeyColsSequence;     // {0,1,2,...}
+      int[]                 bestRowIdentifierCols;      // column set for best index
+      boolean               bestRowIdentifierStrict;    // true if it has no nullable column
+      int[]                 bestIndexForColumn;         // index of the 'best' index for each column
+--- 134,142 ----
+      // main properties
+  // boucherb@users - access changed in support of metadata 1.7.2
+      public HashMappedList columnList;                 // columns in table
+!     public int[]         primaryKeyCols;             // column numbers for primary key
+!     public int[]         primaryKeyTypes;            // types for primary key
+!     public int[]         primaryKeyColsSequence;     // {0,1,2,...}
+      int[]                 bestRowIdentifierCols;      // column set for best index
+      boolean               bestRowIdentifierStrict;    // true if it has no nullable column
+      int[]                 bestIndexForColumn;         // index of the 'best' index for each column
+***************
+*** 148,176 ****
+  // -----------------------------------------------------------------------
+      Constraint[]      constraintList;                 // constrainst for the table
+      HsqlArrayList[]   triggerLists;                   // array of trigger lists
+!     private int[]     colTypes;                       // fredt - types of columns
+!     private int[]     colSizes;                       // fredt - copy of SIZE values for columns
+!     private int[]     colScales;                      // fredt - copy of SCALE values for columns
+!     private boolean[] colNullable;                    // fredt - modified copy of isNullable() values
+!     private Expression[] colDefaults;                 // fredt - expressions of DEFAULT values
+!     private int[]        defaultColumnMap;            // fred - holding 0,1,2,3,...
+!     private boolean      hasDefaultValues;            //fredt - shortcut for above
+!     private boolean      isText;
+!     private boolean      isView;
+      boolean              sqlEnforceSize;              // inherited for the database -
+  
+      // properties for subclasses
+!     protected int           columnCount;              // inclusive the hidden primary key
+      public Database         database;
+!     protected DataFileCache cache;
+!     protected HsqlName      tableName;                // SQL name
+!     private int             tableType;
+!     protected boolean       isReadOnly;
+!     protected boolean       isTemp;
+!     protected boolean       isCached;
+!     protected boolean       isLogged;
+!     protected int           indexType;                // fredt - type of index used
+!     protected boolean       onCommitPreserve;         // for temp tables
+  
+      //
+      PersistentStore rowStore;
+--- 148,176 ----
+  // -----------------------------------------------------------------------
+      Constraint[]      constraintList;                 // constrainst for the table
+      HsqlArrayList[]   triggerLists;                   // array of trigger lists
+!     public int[]     colTypes;                       // fredt - types of columns
+!     public int[]     colSizes;                       // fredt - copy of SIZE values for columns
+!     public int[]     colScales;                      // fredt - copy of SCALE values for columns
+!     public boolean[] colNullable;                    // fredt - modified copy of isNullable() values
+!     public Expression[] colDefaults;                 // fredt - expressions of DEFAULT values
+!     public int[]        defaultColumnMap;            // fred - holding 0,1,2,3,...
+!     public boolean      hasDefaultValues;            //fredt - shortcut for above
+!     public boolean      isText;
+!     public boolean      isView;
+      boolean              sqlEnforceSize;              // inherited for the database -
+  
+      // properties for subclasses
+!     public int           columnCount;              // inclusive the hidden primary key
+      public Database         database;
+!     public DataFileCache cache;
+!     public HsqlName      tableName;                // SQL name
+!     public int             tableType;
+!     public boolean       isReadOnly;
+!     public boolean       isTemp;
+!     public boolean       isCached;
+!     public boolean       isLogged;
+!     public int           indexType;                // fredt - type of index used
+!     public boolean       onCommitPreserve;         // for temp tables
+  
+      //
+      PersistentStore rowStore;
+***************
+*** 350,356 ****
+      /**
+       * For text tables
+       */
+!     protected void setDataSource(Session s, String source, boolean isDesc,
+                                   boolean newFile) throws HsqlException {
+          throw (Trace.error(Trace.TABLE_NOT_FOUND));
+      }
+--- 350,356 ----
+      /**
+       * For text tables
+       */
+!     public void setDataSource(Session s, String source, boolean isDesc,
+                                   boolean newFile) throws HsqlException {
+          throw (Trace.error(Trace.TABLE_NOT_FOUND));
+      }
+***************
+*** 358,371 ****
+      /**
+       * For text tables
+       */
+!     protected String getDataSource() {
+          return null;
+      }
+  
+      /**
+       * For text tables.
+       */
+!     protected boolean isDescDataSource() {
+          return false;
+      }
+  
+--- 358,371 ----
+      /**
+       * For text tables
+       */
+!     public String getDataSource() {
+          return null;
+      }
+  
+      /**
+       * For text tables.
+       */
+!     public boolean isDescDataSource() {
+          return false;
+      }
+  
+***************
+*** 610,616 ****
+      /**
+       * returns a basic duplicate of the table without the data structures.
+       */
+!     protected Table duplicate() throws HsqlException {
+  
+          Table t = (new Table(database, tableName, tableType));
+  
+--- 610,616 ----
+      /**
+       * returns a basic duplicate of the table without the data structures.
+       */
+!     public Table duplicate() throws HsqlException {
+  
+          Table t = (new Table(database, tableName, tableType));
+  
+***************
+*** 745,751 ****
+          return null;
+      }
+  
+!     private Table newDuplicate() throws HsqlException {
+  
+          Table tn = duplicate();
+  
+--- 745,751 ----
+          return null;
+      }
+  
+!     public Table newDuplicate() throws HsqlException {
+  
+          Table tn = duplicate();
+  
+***************
+*** 762,768 ****
+          return tn;
+      }
+  
+!     private void copyIndexes(Table tn, int removeIndex, int colIndex,
+                               int adjust) throws HsqlException {
+  
+          for (int i = 1; i < getIndexCount(); i++) {
+--- 762,768 ----
+          return tn;
+      }
+  
+!     public void copyIndexes(Table tn, int removeIndex, int colIndex,
+                               int adjust) throws HsqlException {
+  
+          for (int i = 1; i < getIndexCount(); i++) {
+***************
+*** 872,878 ****
+          }
+      }
+  
+!     private void recompileCheckConstraints(Session session)
+      throws HsqlException {
+  
+          for (int i = 0, size = constraintList.length; i < size; i++) {
+--- 872,878 ----
+          }
+      }
+  
+!     public void recompileCheckConstraints(Session session)
+      throws HsqlException {
+  
+          for (int i = 0, size = constraintList.length; i < size; i++) {
+***************
+*** 887,893 ****
+      /**
+       * Used after adding columns or indexes to the table.
+       */
+!     private void recompileCheckConstraint(Session session,
+                                            Constraint c) throws HsqlException {
+  
+          String     ddl       = c.core.check.getDDL();
+--- 887,893 ----
+      /**
+       * Used after adding columns or indexes to the table.
+       */
+!     public void recompileCheckConstraint(Session session,
+                                            Constraint c) throws HsqlException {
+  
+          String     ddl       = c.core.check.getDDL();
+***************
+*** 948,954 ****
+      /**
+       * Used for rename column.
+       */
+!     private void renameColumnInCheckConstraints(String oldname,
+              String newname, boolean isquoted) throws HsqlException {
+  
+          for (int i = 0, size = constraintList.length; i < size; i++) {
+--- 948,954 ----
+      /**
+       * Used for rename column.
+       */
+!     public void renameColumnInCheckConstraints(String oldname,
+              String newname, boolean isquoted) throws HsqlException {
+  
+          for (int i = 0, size = constraintList.length; i < size; i++) {
+***************
+*** 975,981 ****
+      /**
+       * Used for drop column.
+       */
+!     private void renameTableInCheckConstraints(Session session,
+              String oldname, String newname) throws HsqlException {
+  
+          for (int i = 0, size = constraintList.length; i < size; i++) {
+--- 975,981 ----
+      /**
+       * Used for drop column.
+       */
+!     public void renameTableInCheckConstraints(Session session,
+              String oldname, String newname) throws HsqlException {
+  
+          for (int i = 0, size = constraintList.length; i < size; i++) {
+***************
+*** 1094,1100 ****
+       * the first non-unique index. NULL if there is no user-defined index.
+       *
+       */
+!     private void setBestRowIdentifiers() {
+  
+          int[]   briCols      = null;
+          int     briColsCount = 0;
+--- 1094,1100 ----
+       * the first non-unique index. NULL if there is no user-defined index.
+       *
+       */
+!     public void setBestRowIdentifiers() {
+  
+          int[]   briCols      = null;
+          int     briColsCount = 0;
+***************
+*** 1484,1490 ****
+       *  Create new index taking into account removal or addition of a column
+       *  to the table.
+       */
+!     private Index createAdjustedIndex(Index index, int colindex,
+                                        int adjust) throws HsqlException {
+  
+          int[] indexcolumns = (int[]) ArrayUtil.resizeArray(index.getColumns(),
+--- 1484,1490 ----
+       *  Create new index taking into account removal or addition of a column
+       *  to the table.
+       */
+!     public Index createAdjustedIndex(Index index, int colindex,
+                                        int adjust) throws HsqlException {
+  
+          int[] indexcolumns = (int[]) ArrayUtil.resizeArray(index.getColumns(),
+***************
+*** 1605,1611 ****
+          return indexNo;
+      }
+  
+!     private int addIndex(Index index) {
+  
+          int i = 0;
+  
+--- 1605,1611 ----
+          return indexNo;
+      }
+  
+!     public int addIndex(Index index) {
+  
+          int i = 0;
+  
+***************
+*** 1852,1858 ****
+       *  Mid level method for inserting rows. Performs constraint checks and
+       *  fires row level triggers.
+       */
+!     private void insertRow(Session session,
+                             Object[] data) throws HsqlException {
+  
+          if (triggerLists[Trigger.INSERT_BEFORE_ROW] != null) {
+--- 1852,1858 ----
+       *  Mid level method for inserting rows. Performs constraint checks and
+       *  fires row level triggers.
+       */
+!     public void insertRow(Session session,
+                             Object[] data) throws HsqlException {
+  
+          if (triggerLists[Trigger.INSERT_BEFORE_ROW] != null) {
+***************
+*** 1899,1905 ****
+       *  UNIQUE or PRIMARY constraints are enforced by attempting to
+       *  add the row to the indexes.
+       */
+!     private Row insertNoCheck(Session session,
+                                Object[] data) throws HsqlException {
+  
+          Row r = newRow(data);
+--- 1899,1905 ----
+       *  UNIQUE or PRIMARY constraints are enforced by attempting to
+       *  add the row to the indexes.
+       */
+!     public Row insertNoCheck(Session session,
+                                Object[] data) throws HsqlException {
+  
+          Row r = newRow(data);
+***************
+*** 2028,2034 ****
+       * Used by TextCache to insert a row into the indexes when the source
+       * file is first read.
+       */
+!     protected void insertFromTextSource(CachedRow row) throws HsqlException {
+  
+          Object[] data = row.getData();
+  
+--- 2028,2034 ----
+       * Used by TextCache to insert a row into the indexes when the source
+       * file is first read.
+       */
+!     public void insertFromTextSource(CachedRow row) throws HsqlException {
+  
+          Object[] data = row.getData();
+  
+***************
+*** 2058,2064 ****
+      /**
+       * Checks a row against NOT NULL constraints on columns.
+       */
+!     protected void enforceNullConstraints(Object[] data)
+      throws HsqlException {
+  
+          for (int i = 0; i < columnCount; i++) {
+--- 2058,2064 ----
+      /**
+       * Checks a row against NOT NULL constraints on columns.
+       */
+!     public void enforceNullConstraints(Object[] data)
+      throws HsqlException {
+  
+          for (int i = 0; i < columnCount; i++) {
+***************
+*** 2074,2080 ****
+       * If there is an identity column (visible or hidden) on the table, sets
+       * the value and/or adjusts the iIdentiy value for the table.
+       */
+!     protected void setIdentityColumn(Session session,
+                                       Object[] data) throws HsqlException {
+  
+          if (identityColumn != -1) {
+--- 2074,2080 ----
+       * If there is an identity column (visible or hidden) on the table, sets
+       * the value and/or adjusts the iIdentiy value for the table.
+       */
+!     public void setIdentityColumn(Session session,
+                                       Object[] data) throws HsqlException {
+  
+          if (identityColumn != -1) {
+***************
+*** 2102,2108 ****
+       * If there is an identity column (visible or hidden) on the table, sets
+       * the max identity value.
+       */
+!     protected void updateIdentityValue(Object[] data) throws HsqlException {
+  
+          if (identityColumn != -1) {
+              Number id = (Number) data[identityColumn];
+--- 2102,2108 ----
+       * If there is an identity column (visible or hidden) on the table, sets
+       * the max identity value.
+       */
+!     public void updateIdentityValue(Object[] data) throws HsqlException {
+  
+          if (identityColumn != -1) {
+              Number id = (Number) data[identityColumn];
+***************
+*** 2771,2777 ****
+       *  Mid level row delete method. Fires triggers but no integrity
+       *  constraint checks.
+       */
+!     private void deleteNoRefCheck(Session session,
+                                    Row row) throws HsqlException {
+  
+          Object[] data = row.getData();
+--- 2771,2777 ----
+       *  Mid level row delete method. Fires triggers but no integrity
+       *  constraint checks.
+       */
+!     public void deleteNoRefCheck(Session session,
+                                    Row row) throws HsqlException {
+  
+          Object[] data = row.getData();
+***************
+*** 2787,2793 ****
+       * Low level row delete method. Removes the row from the indexes and
+       * from the Cache.
+       */
+!     private void deleteNoCheck(Session session, Row row,
+                                 boolean log) throws HsqlException {
+  
+          if (row.isDeleted()) {
+--- 2787,2793 ----
+       * Low level row delete method. Removes the row from the indexes and
+       * from the Cache.
+       */
+!     public void deleteNoCheck(Session session, Row row,
+                                 boolean log) throws HsqlException {
+  
+          if (row.isDeleted()) {
+diff -cr misc/hsqldb/src/org/hsqldb/TableWorks.java misc/build/hsqldb/src/org/hsqldb/TableWorks.java
+*** misc/hsqldb/src/org/hsqldb/TableWorks.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/TableWorks.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 46,53 ****
+   */
+  class TableWorks {
+  
+!     private Table   table;
+!     private Session session;
+  
+      TableWorks(Session session, Table table) {
+          this.table   = table;
+--- 46,53 ----
+   */
+  class TableWorks {
+  
+!     public Table   table;
+!     public Session session;
+  
+      TableWorks(Session session, Table table) {
+          this.table   = table;
+diff -cr misc/hsqldb/src/org/hsqldb/test/ExecHarness.java misc/build/hsqldb/src/org/hsqldb/test/ExecHarness.java
+*** misc/hsqldb/src/org/hsqldb/test/ExecHarness.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/ExecHarness.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 78,86 ****
+       * target program by a file, so that's all I'm implementing for stdin
+       * right now.
+       */
+!     private static final String SYNTAX_MSG =
+          "SYNTAX:  java org.hsqldb.test.ExecHarness targetprogram [args...]";
+!     private static final int MAX_PROG_OUTPUT = 10240;
+  
+      /**
+       * To test the ExecHarness class itself.
+--- 78,86 ----
+       * target program by a file, so that's all I'm implementing for stdin
+       * right now.
+       */
+!     public static final String SYNTAX_MSG =
+          "SYNTAX:  java org.hsqldb.test.ExecHarness targetprogram [args...]";
+!     public static final int MAX_PROG_OUTPUT = 10240;
+  
+      /**
+       * To test the ExecHarness class itself.
+***************
+*** 155,164 ****
+  
+      // The extra 1 is so we can request 1 more byte than we want.
+      // If that read is satisfied, we know that we read > MAX_PROG_OUTPUT.
+!     private byte[]              ba = new byte[MAX_PROG_OUTPUT + 1];
+!     private String              stdout          = null;
+!     private String              errout          = null;
+!     private static final String DEFAULT_CHARSET = "US-ASCII";
+  
+      /*
+       * Execute associated program synchronously, but in a separate process.
+--- 155,164 ----
+  
+      // The extra 1 is so we can request 1 more byte than we want.
+      // If that read is satisfied, we know that we read > MAX_PROG_OUTPUT.
+!     public byte[]              ba = new byte[MAX_PROG_OUTPUT + 1];
+!     public String              stdout          = null;
+!     public String              errout          = null;
+!     public static final String DEFAULT_CHARSET = "US-ASCII";
+  
+      /*
+       * Execute associated program synchronously, but in a separate process.
+diff -cr misc/hsqldb/src/org/hsqldb/test/SqlToolHarness.java misc/build/hsqldb/src/org/hsqldb/test/SqlToolHarness.java
+*** misc/hsqldb/src/org/hsqldb/test/SqlToolHarness.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/SqlToolHarness.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 47,54 ****
+   */
+  public class SqlToolHarness {
+  
+!     private static final int MAX_SQLFILE_LEN = 10240;
+!     private static final String SYNTAX_MSG =
+          "SYNTAX:  java org.hsqldb.test.SqlToolHarness file1.sql [file2.sq...]";
+  
+      /**
+--- 47,54 ----
+   */
+  public class SqlToolHarness {
+  
+!     public static final int MAX_SQLFILE_LEN = 10240;
+!     public static final String SYNTAX_MSG =
+          "SYNTAX:  java org.hsqldb.test.SqlToolHarness file1.sql [file2.sq...]";
+  
+      /**
+***************
+*** 97,103 ****
+          Verbose = (tmp != null) && (tmp.trim().length() > 0);
+      }
+  
+!     private boolean Verbose = false;
+  
+      /**
+       * Run SqlTool according to metacommands embedded in given SQL file.
+--- 97,103 ----
+          Verbose = (tmp != null) && (tmp.trim().length() > 0);
+      }
+  
+!     public boolean Verbose = false;
+  
+      /**
+       * Run SqlTool according to metacommands embedded in given SQL file.
+***************
+*** 219,230 ****
+          return true;
+      }
+  
+!     private static String[]  mtString  = {};
+!     private static Pattern[] mtPattern = {};
+  
+!     private class Metadata {
+  
+!         private byte[] ba = new byte[MAX_SQLFILE_LEN + 1];
+  
+          public Metadata(File inFile)
+          throws FileNotFoundException, IOException {
+--- 219,230 ----
+          return true;
+      }
+  
+!     public static String[]  mtString  = {};
+!     public static Pattern[] mtPattern = {};
+  
+!     public class Metadata {
+  
+!         public byte[] ba = new byte[MAX_SQLFILE_LEN + 1];
+  
+          public Metadata(File inFile)
+          throws FileNotFoundException, IOException {
+***************
+*** 284,297 ****
+              }
+          }
+  
+!         private String[]  toolargs              = mtString;
+!         private String[]  jvmargs               = mtString;
+!         private Pattern[] requireStdoutPatterns = mtPattern;
+!         private Pattern[] rejectStdoutPatterns  = mtPattern;
+!         private Pattern[] requireErroutPatterns = mtPattern;
+!         private Pattern[] rejectErroutPatterns  = mtPattern;
+!         private boolean   inputAsFile           = false;
+!         private Integer   exitValue             = new Integer(0);
+  
+          public String toString() {
+  
+--- 284,297 ----
+              }
+          }
+  
+!         public String[]  toolargs              = mtString;
+!         public String[]  jvmargs               = mtString;
+!         public Pattern[] requireStdoutPatterns = mtPattern;
+!         public Pattern[] rejectStdoutPatterns  = mtPattern;
+!         public Pattern[] requireErroutPatterns = mtPattern;
+!         public Pattern[] rejectErroutPatterns  = mtPattern;
+!         public boolean   inputAsFile           = false;
+!         public Integer   exitValue             = new Integer(0);
+  
+          public String toString() {
+  
+***************
+*** 315,321 ****
+              return sb.toString();
+          }
+  
+!         private String getHarnessMetaBlock(File inFile)
+          throws FileNotFoundException, IOException {
+  
+              // The extra 1 is so we can request 1 more byte than we want.
+--- 315,321 ----
+              return sb.toString();
+          }
+  
+!         public String getHarnessMetaBlock(File inFile)
+          throws FileNotFoundException, IOException {
+  
+              // The extra 1 is so we can request 1 more byte than we want.
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestAllTypes.java misc/build/hsqldb/src/org/hsqldb/test/TestAllTypes.java
+*** misc/hsqldb/src/org/hsqldb/test/TestAllTypes.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestAllTypes.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 48,59 ****
+   */
+  public class TestAllTypes {
+  
+!     protected String url = "jdbc:hsqldb:";
+  
+! //    protected String filepath = ".";
+!     protected String filepath = "/hsql/testalltypes/test";
+  
+! //    protected String filepath = "hsql://localhost/yourtest";
+      boolean    network = true;
+      String     user;
+      String     password;
+--- 48,59 ----
+   */
+  public class TestAllTypes {
+  
+!     public String url = "jdbc:hsqldb:";
+  
+! //    public String filepath = ".";
+!     public String filepath = "/hsql/testalltypes/test";
+  
+! //    public String filepath = "hsql://localhost/yourtest";
+      boolean    network = true;
+      String     user;
+      String     password;
+***************
+*** 79,85 ****
+      //
+      int bigrows = 1000;
+  
+!     protected void setUp() {
+  
+          user     = "sa";
+          password = "";
+--- 79,85 ----
+      //
+      int bigrows = 1000;
+  
+!     public void setUp() {
+  
+          user     = "sa";
+          password = "";
+***************
+*** 266,274 ****
+          }
+      }
+  
+!     protected void tearDown() {}
+  
+!     protected void checkResults() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+--- 266,274 ----
+          }
+      }
+  
+!     public void tearDown() {}
+  
+!     public void checkResults() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+***************
+*** 313,319 ****
+          }
+      }
+  
+!     private void checkSelects() {
+  
+          StopWatch        sw        = new StopWatch();
+          int              smallrows = 0xfff;
+--- 313,319 ----
+          }
+      }
+  
+!     public void checkSelects() {
+  
+          StopWatch        sw        = new StopWatch();
+          int              smallrows = 0xfff;
+***************
+*** 368,374 ****
+                             + (i * 1000 / sw.elapsedTime()));
+      }
+  
+!     private void checkUpdates() {
+  
+          StopWatch        sw        = new StopWatch();
+          int              smallrows = 0xfff;
+--- 368,374 ----
+                             + (i * 1000 / sw.elapsedTime()));
+      }
+  
+!     public void checkUpdates() {
+  
+          StopWatch        sw        = new StopWatch();
+          int              smallrows = 0xfff;
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestBase.java misc/build/hsqldb/src/org/hsqldb/test/TestBase.java
+*** misc/hsqldb/src/org/hsqldb/test/TestBase.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestBase.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 59,65 ****
+          super(name);
+      }
+  
+!     protected void setUp() {
+  
+          if (isNetwork) {
+              serverProps = "database.0=mem:test;sql.enforce_strict_size=true";
+--- 59,65 ----
+          super(name);
+      }
+  
+!     public void setUp() {
+  
+          if (isNetwork) {
+              serverProps = "database.0=mem:test;sql.enforce_strict_size=true";
+***************
+*** 82,88 ****
+          }
+      }
+  
+!     protected void tearDown() {
+  
+          if (isNetwork) {
+              server.stop();
+--- 82,88 ----
+          }
+      }
+  
+!     public void tearDown() {
+  
+          if (isNetwork) {
+              server.stop();
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestBugBase.java misc/build/hsqldb/src/org/hsqldb/test/TestBugBase.java
+*** misc/hsqldb/src/org/hsqldb/test/TestBugBase.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestBugBase.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 59,65 ****
+          super(name);
+      }
+  
+!     protected void setUp() {
+  
+          server = new Server();
+  
+--- 59,65 ----
+          super(name);
+      }
+  
+!     public void setUp() {
+  
+          server = new Server();
+  
+***************
+*** 76,82 ****
+          }
+      }
+  
+!     protected void tearDown() {
+  
+          server.stop();
+  
+--- 76,82 ----
+          }
+      }
+  
+!     public void tearDown() {
+  
+          server.stop();
+  
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestCacheSize.java misc/build/hsqldb/src/org/hsqldb/test/TestCacheSize.java
+*** misc/hsqldb/src/org/hsqldb/test/TestCacheSize.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestCacheSize.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 70,86 ****
+  public class TestCacheSize {
+  
+      // program can edit the *.properties file to set cache_size, old files are deleted
+!     protected boolean filedb = true;
+  
+      // shutdown performed mid operation - not for mem: or hsql: URL's
+!     protected boolean shutdown = true;
+  
+      // fixed
+!     protected String url = "jdbc:hsqldb:";
+  
+! //    protected String  filepath = "hsql://localhost/mytest";
+! //    protected String filepath = "mem:test";
+!     protected String filepath = "/hsql/testcache/test";
+  
+      // frequent reporting of progress
+      boolean reportProgress = false;
+--- 70,86 ----
+  public class TestCacheSize {
+  
+      // program can edit the *.properties file to set cache_size, old files are deleted
+!     public boolean filedb = true;
+  
+      // shutdown performed mid operation - not for mem: or hsql: URL's
+!     public boolean shutdown = true;
+  
+      // fixed
+!     public String url = "jdbc:hsqldb:";
+  
+! //    public String  filepath = "hsql://localhost/mytest";
+! //    public String filepath = "mem:test";
+!     public String filepath = "/hsql/testcache/test";
+  
+      // frequent reporting of progress
+      boolean reportProgress = false;
+***************
+*** 124,137 ****
+      Connection cConnection;
+      FileWriter writer;
+  
+!     private void checkSelects() {
+  
+          countTestID();
+          selectID();
+          selectZipTable();
+      }
+  
+!     private void checkUpdates() {
+  
+          updateIDLinear();
+          updateID();
+--- 124,137 ----
+      Connection cConnection;
+      FileWriter writer;
+  
+!     public void checkSelects() {
+  
+          countTestID();
+          selectID();
+          selectZipTable();
+      }
+  
+!     public void checkUpdates() {
+  
+          updateIDLinear();
+          updateID();
+***************
+*** 141,147 ****
+          countZip();
+      }
+  
+!     protected void setUp() {
+  
+          try {
+              writer = new FileWriter("speedtests.html", true);
+--- 141,147 ----
+          countZip();
+      }
+  
+!     public void setUp() {
+  
+          try {
+              writer = new FileWriter("speedtests.html", true);
+***************
+*** 313,319 ****
+          }
+      }
+  
+!     private void fillUpBigTable(String filler,
+                                  Random randomgen) throws SQLException {
+  
+          StopWatch sw = new StopWatch();
+--- 313,319 ----
+          }
+      }
+  
+!     public void fillUpBigTable(String filler,
+                                  Random randomgen) throws SQLException {
+  
+          StopWatch sw = new StopWatch();
+***************
+*** 415,421 ****
+                             + " ms -- " + rate + " tps");
+      }
+  
+!     private void fillUpMultiTable(String filler,
+                                    Random randomgen) throws SQLException {
+  
+          StopWatch sw = new StopWatch();
+--- 415,421 ----
+                             + " ms -- " + rate + " tps");
+      }
+  
+!     public void fillUpMultiTable(String filler,
+                                    Random randomgen) throws SQLException {
+  
+          StopWatch sw = new StopWatch();
+***************
+*** 468,474 ****
+                             + (i * 1000 / (sw.elapsedTime() + 1)));
+      }
+  
+!     protected void tearDown() {
+  
+          try {
+              writer.write("\n</table>\n");
+--- 468,474 ----
+                             + (i * 1000 / (sw.elapsedTime() + 1)));
+      }
+  
+!     public void tearDown() {
+  
+          try {
+              writer.write("\n</table>\n");
+***************
+*** 476,482 ****
+          } catch (Exception e) {}
+      }
+  
+!     protected void checkResults() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+--- 476,482 ----
+          } catch (Exception e) {}
+      }
+  
+!     public void checkResults() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+***************
+*** 623,629 ****
+                             + " rows  -- " + time + " ms -- " + rate + " tps");
+      }
+  
+!     private void countTestID() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+--- 623,629 ----
+                             + " rows  -- " + time + " ms -- " + rate + " tps");
+      }
+  
+!     public void countTestID() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+***************
+*** 646,652 ****
+          } catch (SQLException e) {}
+      }
+  
+!     private void countTestZip() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+--- 646,652 ----
+          } catch (SQLException e) {}
+      }
+  
+!     public void countTestZip() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+***************
+*** 667,673 ****
+          } catch (SQLException e) {}
+      }
+  
+!     private void countZip() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+--- 667,673 ----
+          } catch (SQLException e) {}
+      }
+  
+!     public void countZip() {
+  
+          try {
+              StopWatch sw = new StopWatch();
+***************
+*** 682,688 ****
+          } catch (SQLException e) {}
+      }
+  
+!     private void updateZip() {
+  
+          StopWatch        sw        = new StopWatch();
+          java.util.Random randomgen = new java.util.Random();
+--- 682,688 ----
+          } catch (SQLException e) {}
+      }
+  
+!     public void updateZip() {
+  
+          StopWatch        sw        = new StopWatch();
+          java.util.Random randomgen = new java.util.Random();
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestCascade.java misc/build/hsqldb/src/org/hsqldb/test/TestCascade.java
+*** misc/hsqldb/src/org/hsqldb/test/TestCascade.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestCascade.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 75,81 ****
+          }
+      }    // main
+  
+!     private static void createDatabase() throws SQLException {
+  
+          new File("testdb.backup").delete();
+          new File("testdb.data").delete();
+--- 75,81 ----
+          }
+      }    // main
+  
+!     public static void createDatabase() throws SQLException {
+  
+          new File("testdb.backup").delete();
+          new File("testdb.data").delete();
+***************
+*** 107,113 ****
+       * the CA table has 12 records. After, it should have 9, but instead it has
+       * 0.
+       */
+!     private static void deleteXBRecord(Connection con) throws SQLException {
+  
+          Statement stmt = con.createStatement();
+  
+--- 107,113 ----
+       * the CA table has 12 records. After, it should have 9, but instead it has
+       * 0.
+       */
+!     public static void deleteXBRecord(Connection con) throws SQLException {
+  
+          Statement stmt = con.createStatement();
+  
+***************
+*** 116,122 ****
+          stmt.close();
+      }    // deleteXBRecord
+  
+!     private static void insertData(Connection con) throws SQLException {
+  
+          String[] saData = {
+              "INSERT INTO XB VALUES('T850','LEAA','00','P',NULL,'LCN NAME','sa',NOW)",
+--- 116,122 ----
+          stmt.close();
+      }    // deleteXBRecord
+  
+!     public static void insertData(Connection con) throws SQLException {
+  
+          String[] saData = {
+              "INSERT INTO XB VALUES('T850','LEAA','00','P',NULL,'LCN NAME','sa',NOW)",
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestCollation.java misc/build/hsqldb/src/org/hsqldb/test/TestCollation.java
+*** misc/hsqldb/src/org/hsqldb/test/TestCollation.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestCollation.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 54,60 ****
+          super.isNetwork = false;
+      }
+  
+!     protected void setUp() {
+  
+          super.setUp();
+  
+--- 54,60 ----
+          super.isNetwork = false;
+      }
+  
+!     public void setUp() {
+  
+          super.setUp();
+  
+***************
+*** 68,74 ****
+          localeIterator = collation.getLocalesIterator();
+      }
+  
+!     protected void tearDown() {
+  
+          try {
+              statement = connection.createStatement();
+--- 68,74 ----
+          localeIterator = collation.getLocalesIterator();
+      }
+  
+!     public void tearDown() {
+  
+          try {
+              statement = connection.createStatement();
+***************
+*** 192,198 ****
+      /**
+       * returns an SQL statement to set the database collation
+       */
+!     protected final String getSetCollationStmt(String collationName) {
+  
+          final String setCollationStmtPre  = "SET DATABASE COLLATION \"";
+          final String setCollationStmtPost = "\"";
+--- 192,198 ----
+      /**
+       * returns an SQL statement to set the database collation
+       */
+!     public final String getSetCollationStmt(String collationName) {
+  
+          final String setCollationStmtPre  = "SET DATABASE COLLATION \"";
+          final String setCollationStmtPost = "\"";
+***************
+*** 203,209 ****
+      /**
+       * checks sorting a table with according to a given collation
+       */
+!     protected String checkSorting(String collationName) {
+  
+          String prepareStmt =
+              "DROP TABLE WORDLIST IF EXISTS;"
+--- 203,209 ----
+      /**
+       * checks sorting a table with according to a given collation
+       */
+!     public String checkSorting(String collationName) {
+  
+          String prepareStmt =
+              "DROP TABLE WORDLIST IF EXISTS;"
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestDataStructures.java misc/build/hsqldb/src/org/hsqldb/test/TestDataStructures.java
+*** misc/hsqldb/src/org/hsqldb/test/TestDataStructures.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestDataStructures.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 51,69 ****
+   */
+  public class TestDataStructures extends TestCase {
+  
+!     private static final int NUMBER_OF_TEST_RUNS          = 100000;
+!     private static final int NUMBER_OF_ITERATIONS_PER_RUN = 80;
+!     private Random           randomGenerator;
+  
+      //Commands
+!     private static final int ADD        = 1;
+!     private static final int ADD_AT     = 2;
+!     private static final int GET        = 3;
+!     private static final int REMOVE     = 4;
+!     private static final int SET        = 5;
+!     private static final int OPTIMIZE   = 6;
+!     private static final int REMOVE_ALL = 7;
+!     private Vector           listCommandsCalled;
+  
+      /** Creates a new instance of TestDataStructures */
+      public TestDataStructures(String s) {
+--- 51,69 ----
+   */
+  public class TestDataStructures extends TestCase {
+  
+!     public static final int NUMBER_OF_TEST_RUNS          = 100000;
+!     public static final int NUMBER_OF_ITERATIONS_PER_RUN = 80;
+!     public Random           randomGenerator;
+  
+      //Commands
+!     public static final int ADD        = 1;
+!     public static final int ADD_AT     = 2;
+!     public static final int GET        = 3;
+!     public static final int REMOVE     = 4;
+!     public static final int SET        = 5;
+!     public static final int OPTIMIZE   = 6;
+!     public static final int REMOVE_ALL = 7;
+!     public Vector           listCommandsCalled;
+  
+      /** Creates a new instance of TestDataStructures */
+      public TestDataStructures(String s) {
+***************
+*** 323,329 ****
+      }
+  
+      /** Returns whether three objects are equal */
+!     private boolean objectEquals(Object lObject, Object aObject,
+                                   Object vObject) {
+  
+          if (lObject == null && aObject == null && vObject == null) {
+--- 323,329 ----
+      }
+  
+      /** Returns whether three objects are equal */
+!     public boolean objectEquals(Object lObject, Object aObject,
+                                   Object vObject) {
+  
+          if (lObject == null && aObject == null && vObject == null) {
+***************
+*** 348,354 ****
+      }
+  
+      /** Returns a random integer in the range of the lowBound and highBound */
+!     private int getRandomInt(int lowBound, int highBound) {
+  
+          double random = randomGenerator.nextDouble();
+  
+--- 348,354 ----
+      }
+  
+      /** Returns a random integer in the range of the lowBound and highBound */
+!     public int getRandomInt(int lowBound, int highBound) {
+  
+          double random = randomGenerator.nextDouble();
+  
+***************
+*** 359,371 ****
+       * Returns an Integer object with a value between Integer.MIN_VALUE and
+       * Integer.MAX_VALUE
+       */
+!     private Integer getRandomInteger() {
+          return new Integer(getRandomInt(0, (int) (Integer.MAX_VALUE
+                  / 100.0)));
+      }
+  
+      /** Tells whether the given list contains the same data as the vector */
+!     private boolean equalsVector(HsqlList list, Vector vector) {
+  
+          if (list.size() != vector.size()) {
+              return false;
+--- 359,371 ----
+       * Returns an Integer object with a value between Integer.MIN_VALUE and
+       * Integer.MAX_VALUE
+       */
+!     public Integer getRandomInteger() {
+          return new Integer(getRandomInt(0, (int) (Integer.MAX_VALUE
+                  / 100.0)));
+      }
+  
+      /** Tells whether the given list contains the same data as the vector */
+!     public boolean equalsVector(HsqlList list, Vector vector) {
+  
+          if (list.size() != vector.size()) {
+              return false;
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestDateTime.java misc/build/hsqldb/src/org/hsqldb/test/TestDateTime.java
+*** misc/hsqldb/src/org/hsqldb/test/TestDateTime.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestDateTime.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 51,57 ****
+          super(s);
+      }
+  
+!     protected void setUp() {
+  
+          super.setUp();
+  
+--- 51,57 ----
+          super(s);
+      }
+  
+!     public void setUp() {
+  
+          super.setUp();
+  
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestGroupByHaving.java misc/build/hsqldb/src/org/hsqldb/test/TestGroupByHaving.java
+*** misc/hsqldb/src/org/hsqldb/test/TestGroupByHaving.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestGroupByHaving.java	2005-06-30 03:53:40.000000000 -0400
+***************
+*** 54,70 ****
+      //------------------------------------------------------------
+      // Class variables
+      //------------------------------------------------------------
+!     private static final String databaseDriver = "org.hsqldb.jdbcDriver";
+!     private static final String databaseURL =
+          "jdbc:hsqldb:file:test/GroupByHaving";
+!     private static final String databaseUser     = "sa";
+!     private static final String databasePassword = "";
+  
+      //------------------------------------------------------------
+      // Instance variables
+      //------------------------------------------------------------
+!     private Connection conn;
+!     private Statement  stmt;
+  
+      //------------------------------------------------------------
+      // Constructors
+--- 54,70 ----
+      //------------------------------------------------------------
+      // Class variables
+      //------------------------------------------------------------
+!     public static final String databaseDriver = "org.hsqldb.jdbcDriver";
+!     public static final String databaseURL =
+          "jdbc:hsqldb:file:test/GroupByHaving";
+!     public static final String databaseUser     = "sa";
+!     public static final String databasePassword = "";
+  
+      //------------------------------------------------------------
+      // Instance variables
+      //------------------------------------------------------------
+!     public Connection conn;
+!     public Statement  stmt;
+  
+      //------------------------------------------------------------
+      // Constructors
+***************
+*** 80,91 ****
+      //------------------------------------------------------------
+      // Class methods
+      //------------------------------------------------------------
+!     protected static Connection getJDBCConnection() throws SQLException {
+          return DriverManager.getConnection(databaseURL, databaseUser,
+                                             databasePassword);
+      }
+  
+!     protected void setUp() throws Exception {
+  
+          super.setUp();
+  
+--- 80,91 ----
+      //------------------------------------------------------------
+      // Class methods
+      //------------------------------------------------------------
+!     public static Connection getJDBCConnection() throws SQLException {
+          return DriverManager.getConnection(databaseURL, databaseUser,
+                                             databasePassword);
+      }
+  
+!     public void setUp() throws Exception {
+  
+          super.setUp();
+  
+***************
+*** 128,134 ****
+          addEmployee(23, "Barbara", "Hood", 30000, 2);
+      }
+  
+!     protected void tearDown() throws Exception {
+  
+          super.tearDown();
+  
+--- 128,134 ----
+          addEmployee(23, "Barbara", "Hood", 30000, 2);
+      }
+  
+!     public void tearDown() throws Exception {
+  
+          super.tearDown();
+  
+***************
+*** 153,159 ****
+          }
+      }
+  
+!     private void addEmployee(int id, String firstName, String lastName,
+                               double salary, int superiorId) throws Exception {
+  
+          stmt.execute("insert into employee values(" + id + ", '" + firstName
+--- 153,159 ----
+          }
+      }
+  
+!     public void addEmployee(int id, String firstName, String lastName,
+                               double salary, int superiorId) throws Exception {
+  
+          stmt.execute("insert into employee values(" + id + ", '" + firstName
+***************
+*** 295,301 ****
+      //------------------------------------------------------------
+      // Helper methods
+      //------------------------------------------------------------
+!     private void compareResults(String sql, Object[][] rows,
+                                  int errorCode) throws SQLException {
+  
+          ResultSet rs = null;
+--- 295,301 ----
+      //------------------------------------------------------------
+      // Helper methods
+      //------------------------------------------------------------
+!     public void compareResults(String sql, Object[][] rows,
+                                  int errorCode) throws SQLException {
+  
+          ResultSet rs = null;
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java misc/build/hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java
+*** misc/hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 75,81 ****
+          super(name);
+      }
+  
+!     protected void setUp() {
+  
+          user     = "sa";
+          password = "";
+--- 75,81 ----
+          super(name);
+      }
+  
+!     public void setUp() {
+  
+          user     = "sa";
+          password = "";
+***************
+*** 103,109 ****
+          }
+      }
+  
+!     protected void tearDown() {
+  
+          try {
+              conn1.close();
+--- 103,109 ----
+          }
+      }
+  
+!     public void tearDown() {
+  
+          try {
+              conn1.close();
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestMultipleConnections.java misc/build/hsqldb/src/org/hsqldb/test/TestMultipleConnections.java
+*** misc/hsqldb/src/org/hsqldb/test/TestMultipleConnections.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestMultipleConnections.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 85,91 ****
+      /**
+       * create a connection and wait
+       */
+!     protected Connection createObject() {
+  
+          try {
+              Class.forName("org.hsqldb.jdbcDriver");
+--- 85,91 ----
+      /**
+       * create a connection and wait
+       */
+!     public Connection createObject() {
+  
+          try {
+              Class.forName("org.hsqldb.jdbcDriver");
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java misc/build/hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java
+*** misc/hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 40,48 ****
+   */
+  class TestPreparedSubQueries {
+  
+!     private Connection con = null;
+  
+!     private class sqlStmt {
+  
+          boolean prepare;
+          boolean update;
+--- 40,48 ----
+   */
+  class TestPreparedSubQueries {
+  
+!     public Connection con = null;
+  
+!     public class sqlStmt {
+  
+          boolean prepare;
+          boolean update;
+***************
+*** 57,63 ****
+      }
+      ;
+  
+!     private sqlStmt[] stmtArray = {
+          new sqlStmt("drop table a if exists", false, false),
+          new sqlStmt("create cached table a (a int identity,b int)", false,
+                      false),
+--- 57,63 ----
+      }
+      ;
+  
+!     public sqlStmt[] stmtArray = {
+          new sqlStmt("drop table a if exists", false, false),
+          new sqlStmt("create cached table a (a int identity,b int)", false,
+                      false),
+***************
+*** 77,83 ****
+              "update a set b=300 where b>(select b from a X where X.a=?)",
+              true, true)
+      };
+!     private Object[][] stmtArgs = {
+          {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, { new Integer(2) },
+          { new Integer(2) }
+      };
+--- 77,83 ----
+              "update a set b=300 where b>(select b from a X where X.a=?)",
+              true, true)
+      };
+!     public Object[][] stmtArgs = {
+          {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, { new Integer(2) },
+          { new Integer(2) }
+      };
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestQuotes.java misc/build/hsqldb/src/org/hsqldb/test/TestQuotes.java
+*** misc/hsqldb/src/org/hsqldb/test/TestQuotes.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestQuotes.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 50,63 ****
+   */
+  public class TestQuotes extends TestCase {
+  
+!     private static final String CREATETABLE =
+          "create table quotetest (test varchar)";
+!     private static final String DELETE = "delete from quotetest";
+!     private static final String TESTSTRING =
+          "insert into quotetest (test) values (?)";
+!     private static final String NOQUOTES = "the house of the dog of kevin";
+!     private static final String QUOTES   = "kevin's dog's house";
+!     private static final String RESULT   = "select * from quotetest";
+  
+      public TestQuotes(String testName) {
+          super(testName);
+--- 50,63 ----
+   */
+  public class TestQuotes extends TestCase {
+  
+!     public static final String CREATETABLE =
+          "create table quotetest (test varchar)";
+!     public static final String DELETE = "delete from quotetest";
+!     public static final String TESTSTRING =
+          "insert into quotetest (test) values (?)";
+!     public static final String NOQUOTES = "the house of the dog of kevin";
+!     public static final String QUOTES   = "kevin's dog's house";
+!     public static final String RESULT   = "select * from quotetest";
+  
+      public TestQuotes(String testName) {
+          super(testName);
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestSchemaParse.java misc/build/hsqldb/src/org/hsqldb/test/TestSchemaParse.java
+*** misc/hsqldb/src/org/hsqldb/test/TestSchemaParse.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestSchemaParse.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 42,50 ****
+  
+      Connection                  con = null;
+      Statement                   statement;
+!     private static final String ipref = "INFORMATION_SCHEMA.";
+  
+!     protected void setUp() throws Exception {
+  
+          org.hsqldb.jdbcDriver.class.getName();
+  
+--- 42,50 ----
+  
+      Connection                  con = null;
+      Statement                   statement;
+!     public static final String ipref = "INFORMATION_SCHEMA.";
+  
+!     public void setUp() throws Exception {
+  
+          org.hsqldb.jdbcDriver.class.getName();
+  
+***************
+*** 96,104 ****
+  
+      // Want to permit the SHUTDOWN SQL command in tearDown() to fail iff
+      // the test method run has tested SHUTDOWN.
+!     private boolean shutdownTested = false;
+  
+!     protected void tearDown() throws Exception {
+  
+          // Shut down to destroy all of the DB objects (only works because
+          // it's an in-memory instance.
+--- 96,104 ----
+  
+      // Want to permit the SHUTDOWN SQL command in tearDown() to fail iff
+      // the test method run has tested SHUTDOWN.
+!     public boolean shutdownTested = false;
+  
+!     public void tearDown() throws Exception {
+  
+          // Shut down to destroy all of the DB objects (only works because
+          // it's an in-memory instance.
+***************
+*** 931,941 ****
+      }
+  
+  /** @todo fredt - need to define additional identifiers to use for all cases of expect */
+!     private static final int SQL_ABORT   = -1234;
+!     private static final int SQL_INITIAL = -1233;
+!     private static final int SQL_FAIL    = -1;
+  
+!     private void execSQL(String s, boolean ignoreError) throws SQLException {
+  
+          try {
+              statement.execute(s);
+--- 931,941 ----
+      }
+  
+  /** @todo fredt - need to define additional identifiers to use for all cases of expect */
+!     public static final int SQL_ABORT   = -1234;
+!     public static final int SQL_INITIAL = -1233;
+!     public static final int SQL_FAIL    = -1;
+  
+!     public void execSQL(String s, boolean ignoreError) throws SQLException {
+  
+          try {
+              statement.execute(s);
+***************
+*** 949,955 ****
+          }
+      }
+  
+!     private void execSQL(String m, String s, int expect) {
+  
+          int retval = SQL_INITIAL;
+  
+--- 949,955 ----
+          }
+      }
+  
+!     public void execSQL(String m, String s, int expect) {
+  
+          int retval = SQL_INITIAL;
+  
+***************
+*** 965,975 ****
+      }
+  
+  /** @todo fredt - this method body seems to be incorrect */
+!     private void execSQL(String s, int expect) {
+          execSQL(s, s, expect);
+      }
+  
+!     private int queryRowCount(String query) throws SQLException {
+  
+          int count = 0;
+  
+--- 965,975 ----
+      }
+  
+  /** @todo fredt - this method body seems to be incorrect */
+!     public void execSQL(String s, int expect) {
+          execSQL(s, s, expect);
+      }
+  
+!     public int queryRowCount(String query) throws SQLException {
+  
+          int count = 0;
+  
+***************
+*** 990,996 ****
+          return count;
+      }
+  
+!     private int tableRowCount(String tableName) throws SQLException {
+  
+          String query = "SELECT count(*) FROM " + tableName;
+  
+--- 990,996 ----
+          return count;
+      }
+  
+!     public int tableRowCount(String tableName) throws SQLException {
+  
+          String query = "SELECT count(*) FROM " + tableName;
+  
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestSql.java misc/build/hsqldb/src/org/hsqldb/test/TestSql.java
+*** misc/hsqldb/src/org/hsqldb/test/TestSql.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestSql.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 58,64 ****
+          super(name);
+      }
+  
+!     protected void setUp() {
+  
+          super.setUp();
+  
+--- 58,64 ----
+          super(name);
+      }
+  
+!     public void setUp() {
+  
+          super.setUp();
+  
+***************
+*** 623,629 ****
+          }
+      }
+  
+!     protected void tearDown() {
+  
+          try {
+              connection.close();
+--- 623,629 ----
+          }
+      }
+  
+!     public void tearDown() {
+  
+          try {
+              connection.close();
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java misc/build/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java
+*** misc/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 63,69 ****
+          super(name);
+      }
+  
+!     protected void setUp() {
+  
+          user        = "sa";
+          password    = "";
+--- 63,69 ----
+          super(name);
+      }
+  
+!     public void setUp() {
+  
+          user        = "sa";
+          password    = "";
+***************
+*** 387,393 ****
+          assertEquals(true, success);
+      }
+  
+!     protected void tearDown() {
+  
+          try {
+              cConnection.close();
+--- 387,393 ----
+          assertEquals(true, success);
+      }
+  
+!     public void tearDown() {
+  
+          try {
+              cConnection.close();
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestSqlTool.java misc/build/hsqldb/src/org/hsqldb/test/TestSqlTool.java
+*** misc/hsqldb/src/org/hsqldb/test/TestSqlTool.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestSqlTool.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 45,51 ****
+       * Does not have getters/setters.  No purpose would be served by
+       * getters and setters, other than over-engineering.
+       */
+!     private class TestSqlFile {
+  
+          public File   file;
+          public String description;
+--- 45,51 ----
+       * Does not have getters/setters.  No purpose would be served by
+       * getters and setters, other than over-engineering.
+       */
+!     public class TestSqlFile {
+  
+          public File   file;
+          public String description;
+***************
+*** 66,72 ****
+      /**
+       * List of SQL files, with a description of the purpose.
+       */
+!     private class SqlFileList extends ArrayList {
+  
+          /**
+           * Loads a list of SQL files and descriptions for the specified
+--- 66,72 ----
+      /**
+       * List of SQL files, with a description of the purpose.
+       */
+!     public class SqlFileList extends ArrayList {
+  
+          /**
+           * Loads a list of SQL files and descriptions for the specified
+***************
+*** 109,115 ****
+  
+      SqlToolHarness harness = new SqlToolHarness();
+  
+!     private void runTestsInList(String testList) throws Exception {
+  
+          SqlFileList fileList = new SqlFileList(testList);
+          TestSqlFile sqlFile;
+--- 109,115 ----
+  
+      SqlToolHarness harness = new SqlToolHarness();
+  
+!     public void runTestsInList(String testList) throws Exception {
+  
+          SqlFileList fileList = new SqlFileList(testList);
+          TestSqlFile sqlFile;
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestSubselect.java misc/build/hsqldb/src/org/hsqldb/test/TestSubselect.java
+*** misc/hsqldb/src/org/hsqldb/test/TestSubselect.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestSubselect.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 52,67 ****
+      //------------------------------------------------------------
+      // Class variables
+      //------------------------------------------------------------
+!     private static final String databaseDriver = "org.hsqldb.jdbcDriver";
+!     private static final String databaseURL =
+          "jdbc:hsqldb:/hsql/test/subselect";
+!     private static final String databaseUser     = "sa";
+!     private static final String databasePassword = "";
+  
+      //------------------------------------------------------------
+      // Instance variables
+      //------------------------------------------------------------
+!     private Connection jdbcConnection;
+  
+      //------------------------------------------------------------
+      // Constructors
+--- 52,67 ----
+      //------------------------------------------------------------
+      // Class variables
+      //------------------------------------------------------------
+!     public static final String databaseDriver = "org.hsqldb.jdbcDriver";
+!     public static final String databaseURL =
+          "jdbc:hsqldb:/hsql/test/subselect";
+!     public static final String databaseUser     = "sa";
+!     public static final String databasePassword = "";
+  
+      //------------------------------------------------------------
+      // Instance variables
+      //------------------------------------------------------------
+!     public Connection jdbcConnection;
+  
+      //------------------------------------------------------------
+      // Constructors
+***************
+*** 77,88 ****
+      //------------------------------------------------------------
+      // Class methods
+      //------------------------------------------------------------
+!     protected static Connection getJDBCConnection() throws SQLException {
+          return DriverManager.getConnection(databaseURL, databaseUser,
+                                             databasePassword);
+      }
+  
+!     protected void setUp() throws Exception {
+  
+          super.setUp();
+          Class.forName(databaseDriver);
+--- 77,88 ----
+      //------------------------------------------------------------
+      // Class methods
+      //------------------------------------------------------------
+!     public static Connection getJDBCConnection() throws SQLException {
+          return DriverManager.getConnection(databaseURL, databaseUser,
+                                             databasePassword);
+      }
+  
+!     public void setUp() throws Exception {
+  
+          super.setUp();
+          Class.forName(databaseDriver);
+***************
+*** 92,98 ****
+          createDataset();
+      }
+  
+!     protected void tearDown() throws Exception {
+  
+          super.tearDown();
+          jdbcConnection.close();
+--- 92,98 ----
+          createDataset();
+      }
+  
+!     public void tearDown() throws Exception {
+  
+          super.tearDown();
+          jdbcConnection.close();
+***************
+*** 137,143 ****
+      //------------------------------------------------------------
+      // Helper methods
+      //------------------------------------------------------------
+!     private static void compareResults(String sql, String[] expected,
+                                         Connection jdbcConnection)
+                                         throws SQLException {
+  
+--- 137,143 ----
+      //------------------------------------------------------------
+      // Helper methods
+      //------------------------------------------------------------
+!     public static void compareResults(String sql, String[] expected,
+                                         Connection jdbcConnection)
+                                         throws SQLException {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestTimestamp.java misc/build/hsqldb/src/org/hsqldb/test/TestTimestamp.java
+*** misc/hsqldb/src/org/hsqldb/test/TestTimestamp.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestTimestamp.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 57,63 ****
+          super(testName);
+      }
+  
+!     private void initOracle() throws Exception {
+  
+          Class.forName("oracle.jdbc.driver.OracleDriver");
+  
+--- 57,63 ----
+          super(testName);
+      }
+  
+!     public void initOracle() throws Exception {
+  
+          Class.forName("oracle.jdbc.driver.OracleDriver");
+  
+***************
+*** 67,73 ****
+          conn.setAutoCommit(false);
+      }
+  
+!     private void initHypersonic() throws Exception {
+  
+          Class.forName("org.hsqldb.jdbcDriver");
+  
+--- 67,73 ----
+          conn.setAutoCommit(false);
+      }
+  
+!     public void initHypersonic() throws Exception {
+  
+          Class.forName("org.hsqldb.jdbcDriver");
+  
+***************
+*** 102,110 ****
+  //        dropTestTable();
+      }
+  */
+!     private void checkExceptionTableExistsOracle(SQLException e) {}
+  
+!     private void checkExceptionTableExistsHsql(SQLException e) {
+  
+          Assert.assertTrue("Error code of SQLException is wrong",
+                            e.getErrorCode()
+--- 102,110 ----
+  //        dropTestTable();
+      }
+  */
+!     public void checkExceptionTableExistsOracle(SQLException e) {}
+  
+!     public void checkExceptionTableExistsHsql(SQLException e) {
+  
+          Assert.assertTrue("Error code of SQLException is wrong",
+                            e.getErrorCode()
+***************
+*** 151,157 ****
+  //        dropTestTable();
+      }
+  
+!     private void dropAllTables() throws Exception {
+  
+          dropTestTable(nameTable);
+          dropTestTable("\"SITE_LIST_SITE\"");
+--- 151,157 ----
+  //        dropTestTable();
+      }
+  
+!     public void dropAllTables() throws Exception {
+  
+          dropTestTable(nameTable);
+          dropTestTable("\"SITE_LIST_SITE\"");
+***************
+*** 161,169 ****
+          dropTestTable("\"CASH_CURR_VALUE\"");
+      }
+  
+!     private String nameTable = null;
+  
+!     private void doTest() throws Exception {
+  
+          PreparedStatement ps = conn.prepareStatement("select max(T) T1 from "
+              + nameTable + " where ID=?");
+--- 161,169 ----
+          dropTestTable("\"CASH_CURR_VALUE\"");
+      }
+  
+!     public String nameTable = null;
+  
+!     public void doTest() throws Exception {
+  
+          PreparedStatement ps = conn.prepareStatement("select max(T) T1 from "
+              + nameTable + " where ID=?");
+***************
+*** 217,226 ****
+          }
+      }
+  
+!     private static Timestamp testTS =
+          new Timestamp(System.currentTimeMillis());
+  
+!     private void insertTestData() throws Exception {
+  
+  //        conn.createStatement().executeUpdate("INSERT INTO \"SITE_LIST_SITE\" VALUES(23,1,'ru','RU',NULL,'\u041f\u0440\u043e\u0431\u043d\u044b\u0439 \u0441\u0430\u0439\u0442',NULL,0,'''/front_styles.css''',1,NULL,0)");
+  //        conn.createStatement().executeUpdate("INSERT INTO \"SITE_VIRTUAL_HOST\" VALUES(36,23,'test-host')");
+--- 217,226 ----
+          }
+      }
+  
+!     public static Timestamp testTS =
+          new Timestamp(System.currentTimeMillis());
+  
+!     public void insertTestData() throws Exception {
+  
+  //        conn.createStatement().executeUpdate("INSERT INTO \"SITE_LIST_SITE\" VALUES(23,1,'ru','RU',NULL,'\u041f\u0440\u043e\u0431\u043d\u044b\u0439 \u0441\u0430\u0439\u0442',NULL,0,'''/front_styles.css''',1,NULL,0)");
+  //        conn.createStatement().executeUpdate("INSERT INTO \"SITE_VIRTUAL_HOST\" VALUES(36,23,'test-host')");
+***************
+*** 245,251 ****
+          conn.commit();
+      }
+  
+!     private void createTestTable(String sql) throws Exception {
+  
+          Statement ps = conn.createStatement();
+  
+--- 245,251 ----
+          conn.commit();
+      }
+  
+!     public void createTestTable(String sql) throws Exception {
+  
+          Statement ps = conn.createStatement();
+  
+***************
+*** 255,261 ****
+          ps = null;
+      }
+  
+!     private void dropTestTable(String nameTableDrop) throws Exception {
+  
+          String    sql = "drop table " + nameTableDrop;
+          Statement ps  = conn.createStatement();
+--- 255,261 ----
+          ps = null;
+      }
+  
+!     public void dropTestTable(String nameTableDrop) throws Exception {
+  
+          String    sql = "drop table " + nameTableDrop;
+          Statement ps  = conn.createStatement();
+***************
+*** 269,282 ****
+          ps = null;
+      }
+  
+!     private void setTimeZone() {
+  
+          timeZone = TimeZone.getTimeZone("Asia/Irkutsk");
+  
+          TimeZone.setDefault(timeZone);
+      }
+  
+!     private Timestamp getCurrentCurs() throws Exception {
+  
+          long idCurrency = 134;
+          long idSite     = 23;
+--- 269,282 ----
+          ps = null;
+      }
+  
+!     public void setTimeZone() {
+  
+          timeZone = TimeZone.getTimeZone("Asia/Irkutsk");
+  
+          TimeZone.setDefault(timeZone);
+      }
+  
+!     public Timestamp getCurrentCurs() throws Exception {
+  
+          long idCurrency = 134;
+          long idSite     = 23;
+diff -cr misc/hsqldb/src/org/hsqldb/test/TestUtil.java misc/build/hsqldb/src/org/hsqldb/test/TestUtil.java
+*** misc/hsqldb/src/org/hsqldb/test/TestUtil.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/test/TestUtil.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 174,180 ****
+       * SQL for the statement).
+       * @param line line of the script file where this section started
+       */
+!     private static void testSection(Statement stat, HsqlArrayList section,
+                                      int line) {
+  
+          //create an appropriate instance of ParsedSection
+--- 174,180 ----
+       * SQL for the statement).
+       * @param line line of the script file where this section started
+       */
+!     public static void testSection(Statement stat, HsqlArrayList section,
+                                      int line) {
+  
+          //create an appropriate instance of ParsedSection
+***************
+*** 198,204 ****
+       * @param aSection Vector containing the section of script
+       * @return a ParesedSection object
+       */
+!     private static ParsedSection parsedSectionFactory(
+              HsqlArrayList aSection) {
+  
+          //type of the section
+--- 198,204 ----
+       * @param aSection Vector containing the section of script
+       * @return a ParesedSection object
+       */
+!     public static ParsedSection parsedSectionFactory(
+              HsqlArrayList aSection) {
+  
+          //type of the section
+***************
+*** 292,317 ****
+       * Type of this test.
+       * @see isValidCase() for allowed values
+       */
+!     protected char type = ' ';
+  
+      /** error message for this section */
+      String message = null;
+  
+      /** contents of the section as an array of Strings, one for each line in the section. */
+!     protected String[] lines = null;
+  
+      /** number of the last row containing results in sectionLines */
+!     protected int resEndRow = 0;
+  
+      /** SQL query to be submitted to the database. */
+!     protected String sqlString = null;
+  
+      /**
+       * Common constructor functions for this family.
+       * @param aLines Array of the script lines containing the section of script.
+       * database
+       */
+!     protected ParsedSection(String[] aLines) {
+  
+          lines = aLines;
+  
+--- 292,317 ----
+       * Type of this test.
+       * @see isValidCase() for allowed values
+       */
+!     public char type = ' ';
+  
+      /** error message for this section */
+      String message = null;
+  
+      /** contents of the section as an array of Strings, one for each line in the section. */
+!     public String[] lines = null;
+  
+      /** number of the last row containing results in sectionLines */
+!     public int resEndRow = 0;
+  
+      /** SQL query to be submitted to the database. */
+!     public String sqlString = null;
+  
+      /**
+       * Common constructor functions for this family.
+       * @param aLines Array of the script lines containing the section of script.
+       * database
+       */
+!     public ParsedSection(String[] aLines) {
+  
+          lines = aLines;
+  
+***************
+*** 388,401 ****
+       * returns a String representation of the expected result for the test
+       * @return The expected result(s) for the test
+       */
+!     protected abstract String getResultString();
+  
+      /**
+       *  returns the error message for the section
+       *
+       * @return message
+       */
+!     protected String getMessage() {
+          return message;
+      }
+  
+--- 388,401 ----
+       * returns a String representation of the expected result for the test
+       * @return The expected result(s) for the test
+       */
+!     public abstract String getResultString();
+  
+      /**
+       *  returns the error message for the section
+       *
+       * @return message
+       */
+!     public String getMessage() {
+          return message;
+      }
+  
+***************
+*** 403,409 ****
+       * returns the type of this section
+       * @return type of this section
+       */
+!     protected char getType() {
+          return type;
+      }
+  
+--- 403,409 ----
+       * returns the type of this section
+       * @return type of this section
+       */
+!     public char getType() {
+          return type;
+      }
+  
+***************
+*** 411,417 ****
+       * returns the SQL statement for this section
+       * @return SQL statement for this section
+       */
+!     protected String getSql() {
+          return sqlString;
+      }
+  
+--- 411,417 ----
+       * returns the SQL statement for this section
+       * @return SQL statement for this section
+       */
+!     public String getSql() {
+          return sqlString;
+      }
+  
+***************
+*** 420,426 ****
+       * @param aStatement Statement object
+       * @return true if the result(s) are as expected, otherwise false
+       */
+!     protected boolean test(Statement aStatement) {
+  
+          try {
+              aStatement.execute(getSql());
+--- 420,426 ----
+       * @param aStatement Statement object
+       * @return true if the result(s) are as expected, otherwise false
+       */
+!     public boolean test(Statement aStatement) {
+  
+          try {
+              aStatement.execute(getSql());
+***************
+*** 438,444 ****
+       * @param aCode type code to validate.
+       * @return true if the type code is valid, otherwise false.
+       */
+!     protected static boolean isValidCode(char aCode) {
+  
+          /* Allowed values for test codes are:
+           * (note that UPPERCASE codes, while valid are only processed if the
+--- 438,444 ----
+       * @param aCode type code to validate.
+       * @return true if the type code is valid, otherwise false.
+       */
+!     public static boolean isValidCode(char aCode) {
+  
+          /* Allowed values for test codes are:
+           * (note that UPPERCASE codes, while valid are only processed if the
+***************
+*** 471,485 ****
+  /** Represents a ParsedSection for a ResultSet test */
+  class ResultSetParsedSection extends ParsedSection {
+  
+!     private String delim = System.getProperty("TestUtilFieldDelimiter", ",");
+!     private String[] expectedRows = null;
+  
+      /**
+       * constructs a new instance of ResultSetParsedSection, interpreting
+       * the supplied results as one or more lines of delimited field values
+       * @param lines String[]
+       */
+!     protected ResultSetParsedSection(String[] lines) {
+  
+          super(lines);
+  
+--- 471,485 ----
+  /** Represents a ParsedSection for a ResultSet test */
+  class ResultSetParsedSection extends ParsedSection {
+  
+!     public String delim = System.getProperty("TestUtilFieldDelimiter", ",");
+!     public String[] expectedRows = null;
+  
+      /**
+       * constructs a new instance of ResultSetParsedSection, interpreting
+       * the supplied results as one or more lines of delimited field values
+       * @param lines String[]
+       */
+!     public ResultSetParsedSection(String[] lines) {
+  
+          super(lines);
+  
+***************
+*** 495,501 ****
+          }
+      }
+  
+!     protected String getResultString() {
+  
+          StringBuffer printVal = new StringBuffer();
+  
+--- 495,501 ----
+          }
+      }
+  
+!     public String getResultString() {
+  
+          StringBuffer printVal = new StringBuffer();
+  
+***************
+*** 506,512 ****
+          return printVal.toString();
+      }
+  
+!     protected boolean test(Statement aStatement) {
+  
+          try {
+              try {
+--- 506,512 ----
+          return printVal.toString();
+      }
+  
+!     public boolean test(Statement aStatement) {
+  
+          try {
+              try {
+***************
+*** 606,612 ****
+          return true;
+      }
+  
+!     private String[] getExpectedRows() {
+          return expectedRows;
+      }
+  }
+--- 606,612 ----
+          return true;
+      }
+  
+!     public String[] getExpectedRows() {
+          return expectedRows;
+      }
+  }
+***************
+*** 617,623 ****
+      //expected update count
+      int countWeWant;
+  
+!     protected UpdateParsedSection(String[] lines) {
+  
+          super(lines);
+  
+--- 617,623 ----
+      //expected update count
+      int countWeWant;
+  
+!     public UpdateParsedSection(String[] lines) {
+  
+          super(lines);
+  
+***************
+*** 625,639 ****
+          countWeWant = Integer.parseInt(lines[0]);
+      }
+  
+!     protected String getResultString() {
+          return Integer.toString(getCountWeWant());
+      }
+  
+!     private int getCountWeWant() {
+          return countWeWant;
+      }
+  
+!     protected boolean test(Statement aStatement) {
+  
+          try {
+              try {
+--- 625,639 ----
+          countWeWant = Integer.parseInt(lines[0]);
+      }
+  
+!     public String getResultString() {
+          return Integer.toString(getCountWeWant());
+      }
+  
+!     public int getCountWeWant() {
+          return countWeWant;
+      }
+  
+!     public boolean test(Statement aStatement) {
+  
+          try {
+              try {
+***************
+*** 666,683 ****
+  /** Represents a ParsedSection for silent execution */
+  class SilentParsedSection extends ParsedSection {
+  
+!     protected SilentParsedSection(String[] lines) {
+  
+          super(lines);
+  
+          type = 's';
+      }
+  
+!     protected String getResultString() {
+          return null;
+      }
+  
+!     protected boolean test(Statement aStatement) {
+  
+          try {
+              aStatement.execute(getSql());
+--- 666,683 ----
+  /** Represents a ParsedSection for silent execution */
+  class SilentParsedSection extends ParsedSection {
+  
+!     public SilentParsedSection(String[] lines) {
+  
+          super(lines);
+  
+          type = 's';
+      }
+  
+!     public String getResultString() {
+          return null;
+      }
+  
+!     public boolean test(Statement aStatement) {
+  
+          try {
+              aStatement.execute(getSql());
+***************
+*** 691,699 ****
+  class CountParsedSection extends ParsedSection {
+  
+      //expected row count
+!     private int countWeWant;
+  
+!     protected CountParsedSection(String[] lines) {
+  
+          super(lines);
+  
+--- 691,699 ----
+  class CountParsedSection extends ParsedSection {
+  
+      //expected row count
+!     public int countWeWant;
+  
+!     public CountParsedSection(String[] lines) {
+  
+          super(lines);
+  
+***************
+*** 701,715 ****
+          countWeWant = Integer.parseInt(lines[0]);
+      }
+  
+!     protected String getResultString() {
+          return Integer.toString(getCountWeWant());
+      }
+  
+!     private int getCountWeWant() {
+          return countWeWant;
+      }
+  
+!     protected boolean test(Statement aStatement) {
+  
+          try {
+  
+--- 701,715 ----
+          countWeWant = Integer.parseInt(lines[0]);
+      }
+  
+!     public String getResultString() {
+          return Integer.toString(getCountWeWant());
+      }
+  
+!     public int getCountWeWant() {
+          return countWeWant;
+      }
+  
+!     public boolean test(Statement aStatement) {
+  
+          try {
+  
+***************
+*** 760,777 ****
+  /** Represents a ParsedSection for an Exception test */
+  class ExceptionParsedSection extends ParsedSection {
+  
+!     protected ExceptionParsedSection(String[] lines) {
+  
+          super(lines);
+  
+          type = 'e';
+      }
+  
+!     protected String getResultString() {
+          return "SQLException";
+      }
+  
+!     protected boolean test(Statement aStatement) {
+  
+          try {
+              aStatement.execute(getSql());
+--- 760,777 ----
+  /** Represents a ParsedSection for an Exception test */
+  class ExceptionParsedSection extends ParsedSection {
+  
+!     public ExceptionParsedSection(String[] lines) {
+  
+          super(lines);
+  
+          type = 'e';
+      }
+  
+!     public String getResultString() {
+          return "SQLException";
+      }
+  
+!     public boolean test(Statement aStatement) {
+  
+          try {
+              aStatement.execute(getSql());
+***************
+*** 790,803 ****
+  /** Represents a ParsedSection for a section with blank type */
+  class BlankParsedSection extends ParsedSection {
+  
+!     protected BlankParsedSection(String[] lines) {
+  
+          super(lines);
+  
+          type = ' ';
+      }
+  
+!     protected String getResultString() {
+          return "No result specified for this section";
+      }
+  }
+--- 790,803 ----
+  /** Represents a ParsedSection for a section with blank type */
+  class BlankParsedSection extends ParsedSection {
+  
+!     public BlankParsedSection(String[] lines) {
+  
+          super(lines);
+  
+          type = ' ';
+      }
+  
+!     public String getResultString() {
+          return "No result specified for this section";
+      }
+  }
+***************
+*** 805,818 ****
+  /** Represents a ParsedSection that is to be ignored */
+  class IgnoreParsedSection extends ParsedSection {
+  
+!     protected IgnoreParsedSection(String[] lines, char aType) {
+  
+          super(lines);
+  
+          type = aType;
+      }
+  
+!     protected String getResultString() {
+          return "This section, of type '" + getType() + "' was ignored";
+      }
+  }
+--- 805,818 ----
+  /** Represents a ParsedSection that is to be ignored */
+  class IgnoreParsedSection extends ParsedSection {
+  
+!     public IgnoreParsedSection(String[] lines, char aType) {
+  
+          super(lines);
+  
+          type = aType;
+      }
+  
+!     public String getResultString() {
+          return "This section, of type '" + getType() + "' was ignored";
+      }
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/TextTable.java misc/build/hsqldb/src/org/hsqldb/TextTable.java
+*** misc/hsqldb/src/org/hsqldb/TextTable.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/TextTable.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 48,55 ****
+   */
+  class TextTable extends org.hsqldb.Table {
+  
+!     private String  dataSource = "";
+!     private boolean isReversed = false;
+  
+      /**
+       *  Constructs a new TextTable from the given arguments.
+--- 48,55 ----
+   */
+  class TextTable extends org.hsqldb.Table {
+  
+!     public String  dataSource = "";
+!     public boolean isReversed = false;
+  
+      /**
+       *  Constructs a new TextTable from the given arguments.
+***************
+*** 72,78 ****
+       *
+       * Better clarification of the role of the methods is needed.
+       */
+!     private void openCache(String dataSourceNew, boolean isReversedNew,
+                             boolean isReadOnlyNew) throws HsqlException {
+  
+          if (dataSourceNew == null) {
+--- 72,78 ----
+       *
+       * Better clarification of the role of the methods is needed.
+       */
+!     public void openCache(String dataSourceNew, boolean isReversedNew,
+                             boolean isReadOnlyNew) throws HsqlException {
+  
+          if (dataSourceNew == null) {
+***************
+*** 149,155 ****
+       * High level command to assign a data source to the table definition.
+       * Reassigns only if the data source or direction has changed.
+       */
+!     protected void setDataSource(Session s, String dataSourceNew,
+                                   boolean isReversedNew,
+                                   boolean newFile) throws HsqlException {
+  
+--- 149,155 ----
+       * High level command to assign a data source to the table definition.
+       * Reassigns only if the data source or direction has changed.
+       */
+!     public void setDataSource(Session s, String dataSourceNew,
+                                   boolean isReversedNew,
+                                   boolean newFile) throws HsqlException {
+  
+***************
+*** 176,186 ****
+          }
+      }
+  
+!     protected String getDataSource() {
+          return dataSource;
+      }
+  
+!     protected boolean isDescDataSource() {
+          return isReversed;
+      }
+  
+--- 176,186 ----
+          }
+      }
+  
+!     public String getDataSource() {
+          return dataSource;
+      }
+  
+!     public boolean isDescDataSource() {
+          return isReversed;
+      }
+  
+***************
+*** 235,241 ****
+          return false;
+      }
+  
+!     protected Table duplicate() throws HsqlException {
+          return new TextTable(database, tableName, getTableType());
+      }
+  
+--- 235,241 ----
+          return false;
+      }
+  
+!     public Table duplicate() throws HsqlException {
+          return new TextTable(database, tableName, getTableType());
+      }
+  
+diff -cr misc/hsqldb/src/org/hsqldb/Tokenizer.java misc/build/hsqldb/src/org/hsqldb/Tokenizer.java
+*** misc/hsqldb/src/org/hsqldb/Tokenizer.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Tokenizer.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 97,103 ****
+   */
+  public class Tokenizer {
+  
+!     private static final int NO_TYPE   = 0,
+                               NAME      = 1,
+                               LONG_NAME = 2,
+                               SPECIAL   = 3,
+--- 97,103 ----
+   */
+  public class Tokenizer {
+  
+!     public static final int NO_TYPE   = 0,
+                               NAME      = 1,
+                               LONG_NAME = 2,
+                               SPECIAL   = 3,
+***************
+*** 113,140 ****
+                               NULL      = 13;
+  
+      // used only internally
+!     private static final int QUOTED_IDENTIFIER = 14,
+                               REMARK_LINE       = 15,
+                               REMARK            = 16;
+!     private String           sCommand;
+!     private int              iLength;
+!     private int              iIndex;
+!     private int              tokenIndex;
+!     private int              nextTokenIndex;
+!     private int              beginIndex;
+!     private int              iType;
+!     private String           sToken;
+!     private String           sLongNameFirst = null;
+!     private int              typeLongNameFirst;
+  
+      // getToken() will clear LongNameFirst unless retainFirst is set.
+!     private boolean retainFirst = false;
+  
+! //    private String           sLongNameLast;
+      // WAIT.  Don't do anything before popping another Token (because the
+      // state variables aren't set properly due to a call of wait()).
+!     private boolean bWait;
+!     private boolean lastTokenQuotedID;
+  
+      // literals that are values
+      static IntValueHashMap valueTokens;
+--- 113,140 ----
+                               NULL      = 13;
+  
+      // used only internally
+!     public static final int QUOTED_IDENTIFIER = 14,
+                               REMARK_LINE       = 15,
+                               REMARK            = 16;
+!     public String           sCommand;
+!     public int              iLength;
+!     public int              iIndex;
+!     public int              tokenIndex;
+!     public int              nextTokenIndex;
+!     public int              beginIndex;
+!     public int              iType;
+!     public String           sToken;
+!     public String           sLongNameFirst = null;
+!     public int              typeLongNameFirst;
+  
+      // getToken() will clear LongNameFirst unless retainFirst is set.
+!     public boolean retainFirst = false;
+  
+! //    public String           sLongNameLast;
+      // WAIT.  Don't do anything before popping another Token (because the
+      // state variables aren't set properly due to a call of wait()).
+!     public boolean bWait;
+!     public boolean lastTokenQuotedID;
+  
+      // literals that are values
+      static IntValueHashMap valueTokens;
+***************
+*** 739,745 ****
+       *
+       * @throws HsqlException
+       */
+!     private void getToken() throws HsqlException {
+  
+          if (bWait) {
+              bWait  = false;
+--- 739,745 ----
+       *
+       * @throws HsqlException
+       */
+!     public void getToken() throws HsqlException {
+  
+          if (bWait) {
+              bWait  = false;
+***************
+*** 1101,1107 ****
+  // because these strings might end up as part of internal data structures
+  // or table elements.
+  // we may consider using pools to avoid recreating the strings
+!     private String getString(char quoteChar) throws HsqlException {
+  
+          try {
+              int     nextIndex   = iIndex;
+--- 1101,1107 ----
+  // because these strings might end up as part of internal data structures
+  // or table elements.
+  // we may consider using pools to avoid recreating the strings
+!     public String getString(char quoteChar) throws HsqlException {
+  
+          try {
+              int     nextIndex   = iIndex;
+diff -cr misc/hsqldb/src/org/hsqldb/Token.java misc/build/hsqldb/src/org/hsqldb/Token.java
+*** misc/hsqldb/src/org/hsqldb/Token.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Token.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 45,51 ****
+   */
+  public class Token {
+  
+!     private static IntValueHashMap commandSet;
+  
+      //
+      static final String        T_ASTERISK     = "*";
+--- 45,51 ----
+   */
+  public class Token {
+  
+!     public static IntValueHashMap commandSet;
+  
+      //
+      static final String        T_ASTERISK     = "*";
+***************
+*** 712,718 ****
+       *
+       * @return a new map for the database command token set
+       */
+!     private static IntValueHashMap newCommandSet() {
+  
+          IntValueHashMap commandSet;
+  
+--- 712,718 ----
+       *
+       * @return a new map for the database command token set
+       */
+!     public static IntValueHashMap newCommandSet() {
+  
+          IntValueHashMap commandSet;
+  
+***************
+*** 793,799 ****
+          return commandSet.get(token, -1);
+      }
+  
+!     private static HashSet keywords;
+      static IntValueHashMap valueTokens;
+  
+      static {
+--- 793,799 ----
+          return commandSet.get(token, -1);
+      }
+  
+!     public static HashSet keywords;
+      static IntValueHashMap valueTokens;
+  
+      static {
+diff -cr misc/hsqldb/src/org/hsqldb/Trace.java misc/build/hsqldb/src/org/hsqldb/Trace.java
+*** misc/hsqldb/src/org/hsqldb/Trace.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Trace.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 703,709 ****
+      /**
+       * Returns the stack trace for doAssert()
+       */
+!     private static String getStackTrace() {
+  
+          try {
+              Exception e = new Exception();
+--- 703,709 ----
+      /**
+       * Returns the stack trace for doAssert()
+       */
+!     public static String getStackTrace() {
+  
+          try {
+              Exception e = new Exception();
+diff -cr misc/hsqldb/src/org/hsqldb/TriggerDef.java misc/build/hsqldb/src/org/hsqldb/TriggerDef.java
+*** misc/hsqldb/src/org/hsqldb/TriggerDef.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/TriggerDef.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 84,100 ****
+          return defaultQueueSize;
+      }
+  
+!     protected static int defaultQueueSize = 1024;
+      Table                table;
+      Trigger              trigger;
+      String               triggerClassName;
+      int                  vectorIndex;               // index into HsqlArrayList[]
+  
+!     //protected boolean busy;               // firing trigger in progress
+!     protected HsqlDeque        pendingQueue;        // row triggers pending
+!     protected int              rowsQueued;          // rows in pendingQueue
+!     protected boolean          valid     = true;    // parsing valid
+!     protected volatile boolean keepGoing = true;
+  
+      /**
+       *  Constructs a new TriggerDef object to represent an HSQLDB trigger
+--- 84,100 ----
+          return defaultQueueSize;
+      }
+  
+!     public static int defaultQueueSize = 1024;
+      Table                table;
+      Trigger              trigger;
+      String               triggerClassName;
+      int                  vectorIndex;               // index into HsqlArrayList[]
+  
+!     //public boolean busy;               // firing trigger in progress
+!     public HsqlDeque        pendingQueue;        // row triggers pending
+!     public int              rowsQueued;          // rows in pendingQueue
+!     public boolean          valid     = true;    // parsing valid
+!     public volatile boolean keepGoing = true;
+  
+      /**
+       *  Constructs a new TriggerDef object to represent an HSQLDB trigger
+diff -cr misc/hsqldb/src/org/hsqldb/types/Binary.java misc/build/hsqldb/src/org/hsqldb/types/Binary.java
+*** misc/hsqldb/src/org/hsqldb/types/Binary.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/types/Binary.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 46,52 ****
+   */
+  public class Binary {
+  
+!     private byte[] data;
+      int            hash;
+  
+      /**
+--- 46,52 ----
+   */
+  public class Binary {
+  
+!     public byte[] data;
+      int            hash;
+  
+      /**
+diff -cr misc/hsqldb/src/org/hsqldb/types/JavaObject.java misc/build/hsqldb/src/org/hsqldb/types/JavaObject.java
+*** misc/hsqldb/src/org/hsqldb/types/JavaObject.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/types/JavaObject.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 65,71 ****
+   */
+  public class JavaObject {
+  
+!     private byte[] data;
+  
+      /**
+       * Constructor used inside the engine when an already serialized
+--- 65,71 ----
+   */
+  public class JavaObject {
+  
+!     public byte[] data;
+  
+      /**
+       * Constructor used inside the engine when an already serialized
+diff -cr misc/hsqldb/src/org/hsqldb/Types.java misc/build/hsqldb/src/org/hsqldb/Types.java
+*** misc/hsqldb/src/org/hsqldb/Types.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/Types.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 461,467 ****
+  //                   Function.java whose number class is
+  //                   narrower than the corresponding internal
+  //                   wrapper
+!     private static org.hsqldb.lib.HashSet illegalParameterClasses;
+  
+      static {
+          typeAliases = new IntValueHashMap(67, 1);
+--- 461,467 ----
+  //                   Function.java whose number class is
+  //                   narrower than the corresponding internal
+  //                   wrapper
+!     public static org.hsqldb.lib.HashSet illegalParameterClasses;
+  
+      static {
+          typeAliases = new IntValueHashMap(67, 1);
+***************
+*** 1073,1079 ****
+      //
+      // 1.) refusing to directly display such columns in graphical query results
+      // 2.) providing other means to retrieve and display such values
+!     private static int MAX_CHAR_OR_VARCHAR_DISPLAY_SIZE() {
+  
+          try {
+              return Integer.getInteger(
+--- 1073,1079 ----
+      //
+      // 1.) refusing to directly display such columns in graphical query results
+      // 2.) providing other means to retrieve and display such values
+!     public static int MAX_CHAR_OR_VARCHAR_DISPLAY_SIZE() {
+  
+          try {
+              return Integer.getInteger(
+diff -cr misc/hsqldb/src/org/hsqldb/User.java misc/build/hsqldb/src/org/hsqldb/User.java
+*** misc/hsqldb/src/org/hsqldb/User.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/User.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 91,109 ****
+  public class User {
+  
+      /** true if this user is the sys user. */
+!     private boolean isSys;
+  
+      /** true if this user is the public user. */
+!     private boolean isPublic;
+  
+      /** user name. */
+!     private String sName;
+  
+      /** password. */
+!     private String sPassword;
+  
+      /** grantee object. */
+!     private Grantee grantee;
+  
+      /**
+       * Constructor
+--- 91,109 ----
+  public class User {
+  
+      /** true if this user is the sys user. */
+!     public boolean isSys;
+  
+      /** true if this user is the public user. */
+!     public boolean isPublic;
+  
+      /** user name. */
+!     public String sName;
+  
+      /** password. */
+!     public String sPassword;
+  
+      /** grantee object. */
+!     public Grantee grantee;
+  
+      /**
+       * Constructor
+diff -cr misc/hsqldb/src/org/hsqldb/UserManager.java misc/build/hsqldb/src/org/hsqldb/UserManager.java
+*** misc/hsqldb/src/org/hsqldb/UserManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/UserManager.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 110,116 ****
+       * User object is kept in the list because it's needed by MetaData
+       * routines via "listVisibleUsers(x, true)".
+       */
+!     private HashMappedList uUser;
+  
+      /**
+       * Construction happens once for each Database object.
+--- 110,116 ----
+       * User object is kept in the list because it's needed by MetaData
+       * routines via "listVisibleUsers(x, true)".
+       */
+!     public HashMappedList uUser;
+  
+      /**
+       * Construction happens once for each Database object.
+***************
+*** 133,139 ****
+          sysUser.getGrantee().setAdminDirect();
+      }
+  
+!     private GranteeManager granteeManager;
+  
+      /**
+       * Creates a new User object under management of this object. <p>
+--- 133,139 ----
+          sysUser.getGrantee().setAdminDirect();
+      }
+  
+!     public GranteeManager granteeManager;
+  
+      /**
+       * Creates a new User object under management of this object. <p>
+diff -cr misc/hsqldb/src/org/hsqldb/util/CodeSwitcher.java misc/build/hsqldb/src/org/hsqldb/util/CodeSwitcher.java
+*** misc/hsqldb/src/org/hsqldb/util/CodeSwitcher.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/CodeSwitcher.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 109,121 ****
+   */
+  public class CodeSwitcher {
+  
+!     private static final String ls = System.getProperty("line.separator",
+          "\n");
+!     private Vector           vList;
+!     private Vector           vSwitchOn;
+!     private Vector           vSwitchOff;
+!     private Vector           vSwitches;
+!     private static final int MAX_LINELENGTH = 82;
+  
+      /**
+       * Method declaration
+--- 109,121 ----
+   */
+  public class CodeSwitcher {
+  
+!     public static final String ls = System.getProperty("line.separator",
+          "\n");
+!     public Vector           vList;
+!     public Vector           vSwitchOn;
+!     public Vector           vSwitchOff;
+!     public Vector           vSwitches;
+!     public static final int MAX_LINELENGTH = 82;
+  
+      /**
+       * Method declaration
+diff -cr misc/hsqldb/src/org/hsqldb/util/CommonSwing.java misc/build/hsqldb/src/org/hsqldb/util/CommonSwing.java
+*** misc/hsqldb/src/org/hsqldb/util/CommonSwing.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/CommonSwing.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 86,97 ****
+   */
+  class CommonSwing {
+  
+!     protected static String messagerHeader = "Database Manager Swing Error";
+!     protected static String Native         = "Native";
+!     protected static String Java           = "Java";
+!     protected static String Motif          = "Motif";
+!     protected static String plaf           = "plaf";
+!     protected static String GTK            = "GTK";
+  
+      // (ulrivo): An actual Image.
+      static Image getIcon(String target) {
+--- 86,97 ----
+   */
+  class CommonSwing {
+  
+!     public static String messagerHeader = "Database Manager Swing Error";
+!     public static String Native         = "Native";
+!     public static String Java           = "Java";
+!     public static String Motif          = "Motif";
+!     public static String plaf           = "plaf";
+!     public static String GTK            = "GTK";
+  
+      // (ulrivo): An actual Image.
+      static Image getIcon(String target) {
+***************
+*** 135,141 ****
+      }
+  
+      // (weconsultants@users: Callable errorMessage method
+!     protected static void errorMessage(String errorMessage) {
+  
+          /**
+           * Display Jpanel Error messages any text Errors. Overloads
+--- 135,141 ----
+      }
+  
+      // (weconsultants@users: Callable errorMessage method
+!     public static void errorMessage(String errorMessage) {
+  
+          /**
+           * Display Jpanel Error messages any text Errors. Overloads
+diff -cr misc/hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java
+*** misc/hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 59,66 ****
+   */
+  class ConnectionDialogCommon {
+  
+!     private static String[][]       connTypes;
+!     private static final String[][] sJDBCTypes = {
+          {
+              "HSQL Database Engine In-Memory", "org.hsqldb.jdbcDriver",
+              "jdbc:hsqldb:mem:."
+--- 59,66 ----
+   */
+  class ConnectionDialogCommon {
+  
+!     public static String[][]       connTypes;
+!     public static final String[][] sJDBCTypes = {
+          {
+              "HSQL Database Engine In-Memory", "org.hsqldb.jdbcDriver",
+              "jdbc:hsqldb:mem:."
+***************
+*** 160,167 ****
+   */
+      }
+  
+!     private static final String fileName       = "hsqlprefs.dat";
+!     private static File         recentSettings = null;
+  
+      static Hashtable loadRecentConnectionSettings() throws IOException {
+  
+--- 160,167 ----
+   */
+      }
+  
+!     public static final String fileName       = "hsqlprefs.dat";
+!     public static File         recentSettings = null;
+  
+      static Hashtable loadRecentConnectionSettings() throws IOException {
+  
+***************
+*** 246,252 ****
+       * @param settings ConnectionSetting[]
+       * @throw IOException if something goes wrong while writing
+       */
+!     private static void storeRecentConnectionSettings(Hashtable settings) {
+  
+          try {
+              if (recentSettings == null) {
+--- 246,252 ----
+       * @param settings ConnectionSetting[]
+       * @throw IOException if something goes wrong while writing
+       */
+!     public static void storeRecentConnectionSettings(Hashtable settings) {
+  
+          try {
+              if (recentSettings == null) {
+***************
+*** 311,317 ****
+          } catch (Throwable t) {}
+      }
+  
+!     private static String homedir = null;
+  
+      public static void setHomeDir() {
+  
+--- 311,317 ----
+          } catch (Throwable t) {}
+      }
+  
+!     public static String homedir = null;
+  
+      public static void setHomeDir() {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/ConnectionDialog.java misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialog.java
+*** misc/hsqldb/src/org/hsqldb/util/ConnectionDialog.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialog.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 67,78 ****
+  class ConnectionDialog extends Dialog
+  implements ActionListener, ItemListener {
+  
+!     protected Connection mConnection;
+!     protected TextField  mName, mDriver, mURL, mUser, mPassword;
+!     protected Label      mError;
+!     private String[][]   connTypes;
+!     private Hashtable    settings;
+!     private Choice       types, recent;
+  
+      /**
+       * Method declaration
+--- 67,78 ----
+  class ConnectionDialog extends Dialog
+  implements ActionListener, ItemListener {
+  
+!     public Connection mConnection;
+!     public TextField  mName, mDriver, mURL, mUser, mPassword;
+!     public Label      mError;
+!     public String[][]   connTypes;
+!     public Hashtable    settings;
+!     public Choice       types, recent;
+  
+      /**
+       * Method declaration
+***************
+*** 110,116 ****
+       * Method declaration
+       *
+       */
+!     private void create() {
+  
+          Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
+  
+--- 110,116 ----
+       * Method declaration
+       *
+       */
+!     public void create() {
+  
+          Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
+  
+***************
+*** 305,311 ****
+       *
+       * @return
+       */
+!     protected static Label createLabel(String s) {
+  
+          Label l = new Label(s);
+  
+--- 305,311 ----
+       *
+       * @return
+       */
+!     public static Label createLabel(String s) {
+  
+          Label l = new Label(s);
+  
+***************
+*** 322,328 ****
+       *
+       * @return
+       */
+!     protected static Panel createBorderPanel(Component center) {
+  
+          Panel p = new Panel();
+  
+--- 322,328 ----
+       *
+       * @return
+       */
+!     public static Panel createBorderPanel(Component center) {
+  
+          Panel p = new Panel();
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java
+*** misc/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 82,95 ****
+      /**
+       * Comment for <code>serialVersionUID</code>
+       */
+!     private static final long serialVersionUID = 1L;
+!     private Connection        mConnection;
+!     private JTextField        mName, mDriver, mURL, mUser;
+!     private JPasswordField    mPassword;
+!     private String[][]        connTypes;
+!     private Hashtable         settings;
+!     private JButton           okCancel, clear;
+!     private JComboBox mSettingName =
+          new JComboBox(loadRecentConnectionSettings());
+  
+      public static Connection createConnection(String driver, String url,
+--- 82,95 ----
+      /**
+       * Comment for <code>serialVersionUID</code>
+       */
+!     public static final long serialVersionUID = 1L;
+!     public Connection        mConnection;
+!     public JTextField        mName, mDriver, mURL, mUser;
+!     public JPasswordField    mPassword;
+!     public String[][]        connTypes;
+!     public Hashtable         settings;
+!     public JButton           okCancel, clear;
+!     public JComboBox mSettingName =
+          new JComboBox(loadRecentConnectionSettings());
+  
+      public static Connection createConnection(String driver, String url,
+***************
+*** 104,110 ****
+          super(owner, title, true);
+      }
+  
+!     private void create() {
+  
+          Box main     = Box.createHorizontalBox();
+          Box labels   = Box.createVerticalBox();
+--- 104,110 ----
+          super(owner, title, true);
+      }
+  
+!     public void create() {
+  
+          Box main     = Box.createHorizontalBox();
+          Box labels   = Box.createVerticalBox();
+***************
+*** 271,277 ****
+          return dialog.mConnection;
+      }
+  
+!     private static JLabel createLabel(String s) {
+  
+          JLabel l = new JLabel(s);
+  
+--- 271,277 ----
+          return dialog.mConnection;
+      }
+  
+!     public static JLabel createLabel(String s) {
+  
+          JLabel l = new JLabel(s);
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/ConnectionSetting.java misc/build/hsqldb/src/org/hsqldb/util/ConnectionSetting.java
+*** misc/hsqldb/src/org/hsqldb/util/ConnectionSetting.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ConnectionSetting.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 39,45 ****
+   */
+  public class ConnectionSetting implements java.io.Serializable {
+  
+!     private String name, driver, url, user, pw;
+  
+      String getName() {
+          return name;
+--- 39,45 ----
+   */
+  public class ConnectionSetting implements java.io.Serializable {
+  
+!     public String name, driver, url, user, pw;
+  
+      String getName() {
+          return name;
+***************
+*** 62,68 ****
+      }
+  
+      // Constructors
+!     private ConnectionSetting() {}
+      ;
+  
+      ConnectionSetting(String name, String driver, String url, String user,
+--- 62,68 ----
+      }
+  
+      // Constructors
+!     public ConnectionSetting() {}
+      ;
+  
+      ConnectionSetting(String name, String driver, String url, String user,
+diff -cr misc/hsqldb/src/org/hsqldb/util/CSVWriter.java misc/build/hsqldb/src/org/hsqldb/util/CSVWriter.java
+*** misc/hsqldb/src/org/hsqldb/util/CSVWriter.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/CSVWriter.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 49,58 ****
+   */
+  public class CSVWriter {
+  
+!     private String             newline = System.getProperty("line.separator");
+!     private OutputStreamWriter writer  = null;
+!     private int                nbrCols = 0;
+!     private int                nbrRows = 0;
+  
+      /**
+       * constructor.
+--- 49,58 ----
+   */
+  public class CSVWriter {
+  
+!     public String             newline = System.getProperty("line.separator");
+!     public OutputStreamWriter writer  = null;
+!     public int                nbrCols = 0;
+!     public int                nbrRows = 0;
+  
+      /**
+       * constructor.
+***************
+*** 100,106 ****
+          this.writer.close();
+      }
+  
+!     private void doWriteData(String[] values) throws IOException {
+  
+          for (int i = 0; i < values.length; i++) {
+              if (i > 0) {
+--- 100,106 ----
+          this.writer.close();
+      }
+  
+!     public void doWriteData(String[] values) throws IOException {
+  
+          for (int i = 0; i < values.length; i++) {
+              if (i > 0) {
+***************
+*** 119,125 ****
+          this.nbrRows++;
+      }
+  
+!     private String toCsvValue(String str) {
+  
+          StringBuffer sb = new StringBuffer();
+  
+--- 119,125 ----
+          this.nbrRows++;
+      }
+  
+!     public String toCsvValue(String str) {
+  
+          StringBuffer sb = new StringBuffer();
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/DatabaseManagerCommon.java misc/build/hsqldb/src/org/hsqldb/util/DatabaseManagerCommon.java
+*** misc/hsqldb/src/org/hsqldb/util/DatabaseManagerCommon.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/DatabaseManagerCommon.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 92,98 ****
+   */
+  class DatabaseManagerCommon {
+  
+!     private static Random rRandom    = new Random(100);
+      static String[]       selectHelp = {
+          "SELECT * FROM ",
+          "SELECT [LIMIT n m] [DISTINCT] \n"
+--- 92,98 ----
+   */
+  class DatabaseManagerCommon {
+  
+!     public static Random rRandom    = new Random(100);
+      static String[]       selectHelp = {
+          "SELECT * FROM ",
+          "SELECT [LIMIT n m] [DISTINCT] \n"
+***************
+*** 405,409 ****
+          return (System.currentTimeMillis() - start);
+      }
+  
+!     private DatabaseManagerCommon() {}
+  }
+--- 405,409 ----
+          return (System.currentTimeMillis() - start);
+      }
+  
+!     public DatabaseManagerCommon() {}
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/util/DatabaseManager.java misc/build/hsqldb/src/org/hsqldb/util/DatabaseManager.java
+*** misc/hsqldb/src/org/hsqldb/util/DatabaseManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/DatabaseManager.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 98,104 ****
+  public class DatabaseManager extends Applet
+  implements ActionListener, WindowListener, KeyListener {
+  
+!     private static final String DEFAULT_RCFILE =
+          System.getProperty("user.home") + "/dbmanager.rc";
+      static final String NL         = System.getProperty("line.separator");
+      static final int    iMaxRecent = 24;
+--- 98,104 ----
+  public class DatabaseManager extends Applet
+  implements ActionListener, WindowListener, KeyListener {
+  
+!     public static final String DEFAULT_RCFILE =
+          System.getProperty("user.home") + "/dbmanager.rc";
+      static final String NL         = System.getProperty("line.separator");
+      static final int    iMaxRecent = 24;
+***************
+*** 289,295 ****
+          m.connect(c);
+      }
+  
+!     private static void showUsage() {
+  
+          System.out.println(
+              "Usage: java DatabaseManager [--options]\n"
+--- 289,295 ----
+          m.connect(c);
+      }
+  
+!     public static void showUsage() {
+  
+          System.out.println(
+              "Usage: java DatabaseManager [--options]\n"
+***************
+*** 1149,1155 ****
+       *
+       * @param s
+       */
+!     private void addToRecent(String s) {
+  
+          for (int i = 0; i < iMaxRecent; i++) {
+              if (s.equals(sRecent[i])) {
+--- 1149,1155 ----
+       *
+       * @param s
+       */
+!     public void addToRecent(String s) {
+  
+          for (int i = 0; i < iMaxRecent; i++) {
+              if (s.equals(sRecent[i])) {
+***************
+*** 1180,1186 ****
+       * Method declaration
+       *
+       */
+!     private void initGUI() {
+  
+          Panel pQuery   = new Panel();
+          Panel pCommand = new Panel();
+--- 1180,1186 ----
+       * Method declaration
+       *
+       */
+!     public void initGUI() {
+  
+          Panel pQuery   = new Panel();
+          Panel pCommand = new Panel();
+***************
+*** 1240,1246 ****
+       * Method declaration
+       *
+       */
+!     protected void refreshTree() {
+  
+          tTree.removeAll();
+  
+--- 1240,1246 ----
+       * Method declaration
+       *
+       */
+!     public void refreshTree() {
+  
+          tTree.removeAll();
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java misc/build/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java
+*** misc/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 188,201 ****
+       * be reserved for single-letter switches which can be mixed like
+       * "-u -r -l" = "-url".  -blaine
+       */
+!     private static final String DEFAULT_RCFILE =
+          System.getProperty("user.home") + "/dbmanager.rc";
+!     private static final String HELP_TEXT =
+          "See the forums, mailing lists, and HSQLDB User Guide\n"
+          + "at http://hsqldb.org.\n\n"
+          + "Please paste the following version identifier with any\n"
+          + "problem reports or help requests:  $Revision: 1.57 $";
+!     private static final String ABOUT_TEXT =
+          "$Revision: 1.57 $ of DatabaseManagerSwing\n\n"
+          + "Copyright (c) 1995-2000, The Hypersonic SQL Group.\n"
+          + "Copyright (c) 2001-2005, The HSQL Development Group.\n"
+--- 188,201 ----
+       * be reserved for single-letter switches which can be mixed like
+       * "-u -r -l" = "-url".  -blaine
+       */
+!     public static final String DEFAULT_RCFILE =
+          System.getProperty("user.home") + "/dbmanager.rc";
+!     public static final String HELP_TEXT =
+          "See the forums, mailing lists, and HSQLDB User Guide\n"
+          + "at http://hsqldb.org.\n\n"
+          + "Please paste the following version identifier with any\n"
+          + "problem reports or help requests:  $Revision: 1.57-OOo $";
+!     public static final String ABOUT_TEXT =
+          "$Revision: 1.57-OOo $ of DatabaseManagerSwing\n\n"
+          + "Copyright (c) 1995-2000, The Hypersonic SQL Group.\n"
+          + "Copyright (c) 2001-2005, The HSQL Development Group.\n"
+***************
+*** 235,244 ****
+      static boolean         bMustExit;
+      String                 ifHuge = "";
+      JToolBar               jtoolbar;
+!     private boolean        showSchemas  = true;
+!     private boolean        showTooltips = true;
+!     private boolean        autoRefresh  = true;
+!     private boolean        gridFormat   = true;
+  
+      // Added: (weconsultants@users)
+      static DatabaseManagerSwing refForFontDialogSwing;
+--- 235,244 ----
+      static boolean         bMustExit;
+      String                 ifHuge = "";
+      JToolBar               jtoolbar;
+!     public boolean        showSchemas  = true;
+!     public boolean        showTooltips = true;
+!     public boolean        autoRefresh  = true;
+!     public boolean        gridFormat   = true;
+  
+      // Added: (weconsultants@users)
+      static DatabaseManagerSwing refForFontDialogSwing;
+***************
+*** 274,287 ****
+          new JRadioButtonMenuItem("Motif Look & Feel");
+      JLabel                      jStatusLine;
+      static String               READY_STATUS         = "Ready";
+!     private static final String AUTOCOMMIT_BOX_TEXT  = "Autocommit mode";
+!     private static final String LOGGING_BOX_TEXT     = "Logging mode";
+!     private static final String SHOWSCHEMAS_BOX_TEXT = "Show schemas";
+!     private static final String AUTOREFRESH_BOX_TEXT = "Auto-refresh tree";
+!     private static final String SHOWTIPS_BOX_TEXT    = "Show Tooltips";
+!     private static final String ROWCOUNTS_BOX_TEXT   = "Show row counts";
+!     private static final String SHOWSYS_BOX_TEXT     = "Show system tables";
+!     private static final String GRID_BOX_TEXT =
+          "Show results in Grid (a.o.t. Text)";
+  
+      // variables to hold the default cursors for these top level swing objects
+--- 274,287 ----
+          new JRadioButtonMenuItem("Motif Look & Feel");
+      JLabel                      jStatusLine;
+      static String               READY_STATUS         = "Ready";
+!     public static final String AUTOCOMMIT_BOX_TEXT  = "Autocommit mode";
+!     public static final String LOGGING_BOX_TEXT     = "Logging mode";
+!     public static final String SHOWSCHEMAS_BOX_TEXT = "Show schemas";
+!     public static final String AUTOREFRESH_BOX_TEXT = "Auto-refresh tree";
+!     public static final String SHOWTIPS_BOX_TEXT    = "Show Tooltips";
+!     public static final String ROWCOUNTS_BOX_TEXT   = "Show row counts";
+!     public static final String SHOWSYS_BOX_TEXT     = "Show system tables";
+!     public static final String GRID_BOX_TEXT =
+          "Show results in Grid (a.o.t. Text)";
+  
+      // variables to hold the default cursors for these top level swing objects
+***************
+*** 290,303 ****
+      Cursor        txtCommandCursor;
+      Cursor        txtResultCursor;
+      HashMap       tipMap     = new HashMap();
+!     private JMenu mnuSchemas = new JMenu("Schemas");
+  
+      /**
+       * Wait Cursor
+       */
+  
+      // Changed: (weconsultants@users): commonted out the, out of the box, cursor to use a custom cursor
+!     private final Cursor waitCursor = new Cursor(Cursor.WAIT_CURSOR);
+  
+      //getToolkit().createCustomCursor(CommonSwing.getIcon("SystemCursor"),
+      //                                new Point(4, 4), "HourGlass cursor");
+--- 290,303 ----
+      Cursor        txtCommandCursor;
+      Cursor        txtResultCursor;
+      HashMap       tipMap     = new HashMap();
+!     public JMenu mnuSchemas = new JMenu("Schemas");
+  
+      /**
+       * Wait Cursor
+       */
+  
+      // Changed: (weconsultants@users): commonted out the, out of the box, cursor to use a custom cursor
+!     public final Cursor waitCursor = new Cursor(Cursor.WAIT_CURSOR);
+  
+      //getToolkit().createCustomCursor(CommonSwing.getIcon("SystemCursor"),
+      //                                new Point(4, 4), "HourGlass cursor");
+***************
+*** 308,314 ****
+      static String  defPassword = "";
+      static String  defScript;
+      static String  defDirectory;
+!     private String schemaFilter = null;
+  
+      public void init() {
+  
+--- 308,314 ----
+      static String  defPassword = "";
+      static String  defScript;
+      static String  defDirectory;
+!     public String schemaFilter = null;
+  
+      public void init() {
+  
+***************
+*** 491,497 ****
+          }
+      }
+  
+!     private static void showUsage() {
+  
+          System.out.println(
+              "Usage: java DatabaseManagerSwing [--options]\n"
+--- 491,497 ----
+          }
+      }
+  
+!     public static void showUsage() {
+  
+          System.out.println(
+              "Usage: java DatabaseManagerSwing [--options]\n"
+***************
+*** 508,514 ****
+              + "(Single-hypen switches like '-driver' are also supported)");
+      }
+  
+!     private void insertTestData() {
+  
+          try {
+              DatabaseManagerCommon.createTestTables(sStatement);
+--- 508,514 ----
+              + "(Single-hypen switches like '-driver' are also supported)");
+      }
+  
+!     public void insertTestData() {
+  
+          try {
+              DatabaseManagerCommon.createTestTables(sStatement);
+***************
+*** 533,539 ****
+          this.bMustExit = b;
+      }
+  
+!     private DBMPrefs prefs = null;
+  
+      public void main() {
+  
+--- 533,539 ----
+          this.bMustExit = b;
+      }
+  
+!     public DBMPrefs prefs = null;
+  
+      public void main() {
+  
+***************
+*** 749,755 ****
+          txtCommand.requestFocus();
+      }
+  
+!     private void addMenu(JMenuBar b, String name, Object[] items) {
+  
+          JMenu menu = new JMenu(name);
+  
+--- 749,755 ----
+          txtCommand.requestFocus();
+      }
+  
+!     public void addMenu(JMenuBar b, String name, Object[] items) {
+  
+          JMenu menu = new JMenu(name);
+  
+***************
+*** 758,764 ****
+          b.add(menu);
+      }
+  
+!     private void addMenuItems(JMenu f, Object[] m) {
+  
+          /*
+           * This method needs to be completely written or just
+--- 758,764 ----
+          b.add(menu);
+      }
+  
+!     public void addMenuItems(JMenu f, Object[] m) {
+  
+          /*
+           * This method needs to be completely written or just
+***************
+*** 1049,1055 ****
+          }
+      }
+  
+!     private void displayResults() {
+  
+          if (gridFormat) {
+              setResultsInGrid();
+--- 1049,1055 ----
+          }
+      }
+  
+!     public void displayResults() {
+  
+          if (gridFormat) {
+              setResultsInGrid();
+***************
+*** 1058,1064 ****
+          }
+      }
+  
+!     private void setResultsInGrid() {
+  
+          pResult.removeAll();
+          pResult.add(gScrollPane, BorderLayout.CENTER);
+--- 1058,1064 ----
+          }
+      }
+  
+!     public void setResultsInGrid() {
+  
+          pResult.removeAll();
+          pResult.add(gScrollPane, BorderLayout.CENTER);
+***************
+*** 1067,1073 ****
+          pResult.repaint();
+      }
+  
+!     private void setResultsInText() {
+  
+          pResult.removeAll();
+          pResult.add(txtResultScroll, BorderLayout.CENTER);
+--- 1067,1073 ----
+          pResult.repaint();
+      }
+  
+!     public void setResultsInText() {
+  
+          pResult.removeAll();
+          pResult.add(txtResultScroll, BorderLayout.CENTER);
+***************
+*** 1076,1082 ****
+          pResult.repaint();
+      }
+  
+!     private void showHelp(String[] help) {
+  
+          txtCommand.setText(help[0]);
+  
+--- 1076,1082 ----
+          pResult.repaint();
+      }
+  
+!     public void showHelp(String[] help) {
+  
+          txtCommand.setText(help[0]);
+  
+***************
+*** 1134,1149 ****
+          }
+      }
+  
+!     private void clear() {
+  
+          ifHuge = "";
+  
+          txtCommand.setText(ifHuge);
+      }
+  
+!     private String busyText = null;
+  
+!     private void backgroundIt(Runnable r, String description) {
+  
+          if (busyText != null) {
+              Toolkit.getDefaultToolkit().beep();
+--- 1134,1149 ----
+          }
+      }
+  
+!     public void clear() {
+  
+          ifHuge = "";
+  
+          txtCommand.setText(ifHuge);
+      }
+  
+!     public String busyText = null;
+  
+!     public void backgroundIt(Runnable r, String description) {
+  
+          if (busyText != null) {
+              Toolkit.getDefaultToolkit().beep();
+***************
+*** 1189,1195 ****
+          setStatusLine(busyText);
+      }
+  
+!     private Runnable treeRefreshRunnable = new Runnable() {
+  
+          public void run() {
+  
+--- 1189,1195 ----
+          setStatusLine(busyText);
+      }
+  
+!     public Runnable treeRefreshRunnable = new Runnable() {
+  
+          public void run() {
+  
+***************
+*** 1208,1222 ****
+      /**
+       * Schedules to run in a Gui-safe thread
+       */
+!     protected void executeCurrentSQL() {
+          backgroundIt(new StatementExecRunnable(), "Executing SQL");
+      }
+  
+!     protected class StatementExecRunnable implements Runnable {
+  
+!         private String sCmd;
+  
+!         protected StatementExecRunnable() {
+  
+              if (4096 <= ifHuge.length()) {
+                  sCmd = ifHuge;
+--- 1208,1222 ----
+      /**
+       * Schedules to run in a Gui-safe thread
+       */
+!     public void executeCurrentSQL() {
+          backgroundIt(new StatementExecRunnable(), "Executing SQL");
+      }
+  
+!     public class StatementExecRunnable implements Runnable {
+  
+!         public String sCmd;
+  
+!         public StatementExecRunnable() {
+  
+              if (4096 <= ifHuge.length()) {
+                  sCmd = ifHuge;
+***************
+*** 1255,1261 ****
+      }
+      ;
+  
+!     private void executeSQL() {
+  
+          String[] g   = new String[1];
+          String   sql = txtCommand.getText();
+--- 1255,1261 ----
+      }
+      ;
+  
+!     public void executeSQL() {
+  
+          String[] g   = new String[1];
+          String   sql = txtCommand.getText();
+***************
+*** 1320,1326 ****
+          }
+      }
+  
+!     private void updateResult() {
+  
+          if (gridFormat) {
+  
+--- 1320,1326 ----
+          }
+      }
+  
+!     public void updateResult() {
+  
+          if (gridFormat) {
+  
+***************
+*** 1348,1354 ****
+       * VARCHARs, because this is the only class where there is any
+       * ambiguity about where there is a null stored or not.
+       */
+!     private void formatResultSet(ResultSet r) {
+  
+          if (r == null) {
+              String[] g = new String[1];
+--- 1348,1354 ----
+       * VARCHARs, because this is the only class where there is any
+       * ambiguity about where there is a null stored or not.
+       */
+!     public void formatResultSet(ResultSet r) {
+  
+          if (r == null) {
+              String[] g = new String[1];
+***************
+*** 1401,1407 ****
+          }
+      }
+  
+!     private void testPerformance() {
+  
+          String       all   = txtCommand.getText();
+          StringBuffer b     = new StringBuffer();
+--- 1401,1407 ----
+          }
+      }
+  
+!     public void testPerformance() {
+  
+          String       all   = txtCommand.getText();
+          StringBuffer b     = new StringBuffer();
+***************
+*** 1485,1491 ****
+       * Method declaration
+       *
+       */
+!     private void showResultInText() {
+  
+          Object[] col   = gResult.getHead();
+          int      width = col.length;
+--- 1485,1491 ----
+       * Method declaration
+       *
+       */
+!     public void showResultInText() {
+  
+          Object[] col   = gResult.getHead();
+          int      width = col.length;
+***************
+*** 1555,1561 ****
+          txtResult.setText(b.toString());
+      }
+  
+!     private void addToRecent(String s) {
+  
+          for (int i = 0; i < iMaxRecent; i++) {
+              if (s.equals(sRecent[i])) {
+--- 1555,1561 ----
+          txtResult.setText(b.toString());
+      }
+  
+!     public void addToRecent(String s) {
+  
+          for (int i = 0; i < iMaxRecent; i++) {
+              if (s.equals(sRecent[i])) {
+***************
+*** 1582,1588 ****
+          iRecent = (iRecent + 1) % iMaxRecent;
+      }
+  
+!     private void initGUI() {
+  
+          JPanel pCommand = new JPanel();
+  
+--- 1582,1588 ----
+          iRecent = (iRecent + 1) % iMaxRecent;
+      }
+  
+!     public void initGUI() {
+  
+          JPanel pCommand = new JPanel();
+  
+***************
+*** 1676,1682 ****
+  
+      /* Simple tree node factory method - set's parent and user object.
+       */
+!     private DefaultMutableTreeNode makeNode(Object userObject,
+              MutableTreeNode parent) {
+  
+          DefaultMutableTreeNode node = new DefaultMutableTreeNode(userObject);
+--- 1676,1682 ----
+  
+      /* Simple tree node factory method - set's parent and user object.
+       */
+!     public DefaultMutableTreeNode makeNode(Object userObject,
+              MutableTreeNode parent) {
+  
+          DefaultMutableTreeNode node = new DefaultMutableTreeNode(userObject);
+***************
+*** 1688,1701 ****
+          return node;
+      }
+  
+!     private static final String[] usertables       = {
+          "TABLE", "GLOBAL TEMPORARY", "VIEW", "SYSTEM TABLE"
+      };
+!     private static final String[] nonSystables     = {
+          "TABLE", "GLOBAL TEMPORARY", "VIEW"
+      };
+!     private static final HashSet  oracleSysUsers   = new HashSet();
+!     private static final String[] oracleSysSchemas = {
+          "SYS", "SYSTEM", "OUTLN", "DBSNMP", "OUTLN", "MDSYS", "ORDSYS",
+          "ORDPLUGINS", "CTXSYS", "DSSYS", "PERFSTAT", "WKPROXY", "WKSYS",
+          "WMSYS", "XDB", "ANONYMOUS", "ODM", "ODM_MTR", "OLAPSYS", "TRACESVR",
+--- 1688,1701 ----
+          return node;
+      }
+  
+!     public static final String[] usertables       = {
+          "TABLE", "GLOBAL TEMPORARY", "VIEW", "SYSTEM TABLE"
+      };
+!     public static final String[] nonSystables     = {
+          "TABLE", "GLOBAL TEMPORARY", "VIEW"
+      };
+!     public static final HashSet  oracleSysUsers   = new HashSet();
+!     public static final String[] oracleSysSchemas = {
+          "SYS", "SYSTEM", "OUTLN", "DBSNMP", "OUTLN", "MDSYS", "ORDSYS",
+          "ORDPLUGINS", "CTXSYS", "DSSYS", "PERFSTAT", "WKPROXY", "WKSYS",
+          "WMSYS", "XDB", "ANONYMOUS", "ODM", "ODM_MTR", "OLAPSYS", "TRACESVR",
+***************
+*** 1711,1717 ****
+      /**
+       * Schedules to run in a Gui-safe thread
+       */
+!     protected void refreshTree() {
+          backgroundIt(treeRefreshRunnable, "Refreshing object tree");
+      }
+  
+--- 1711,1717 ----
+      /**
+       * Schedules to run in a Gui-safe thread
+       */
+!     public void refreshTree() {
+          backgroundIt(treeRefreshRunnable, "Refreshing object tree");
+      }
+  
+***************
+*** 1720,1726 ****
+       *
+       * This method executes in current thread
+       */
+!     protected void directRefreshTree() {
+  
+          int[]                  rowCounts;
+          DefaultMutableTreeNode propertiesNode;
+--- 1720,1726 ----
+       *
+       * This method executes in current thread
+       */
+!     public void directRefreshTree() {
+  
+          int[]                  rowCounts;
+          DefaultMutableTreeNode propertiesNode;
+***************
+*** 1941,1947 ****
+      }
+  
+      // Added: (weconsultants@users) Needed to aggragate counts per table in jTree
+!     protected int[] getRowCounts(Vector inTable,
+                                   Vector inSchema) throws Exception {
+  
+          if (!displayRowCounts) {
+--- 1941,1947 ----
+      }
+  
+      // Added: (weconsultants@users) Needed to aggragate counts per table in jTree
+!     public int[] getRowCounts(Vector inTable,
+                                   Vector inSchema) throws Exception {
+  
+          if (!displayRowCounts) {
+***************
+*** 1978,1984 ****
+          return (counts);
+      }
+  
+!     protected JToolBar createToolBar() {
+  
+          // Build jtoolbar and jtoolbar Buttons
+          JToolBar jtoolbar = new JToolBar();
+--- 1978,1984 ----
+          return (counts);
+      }
+  
+!     public JToolBar createToolBar() {
+  
+          // Build jtoolbar and jtoolbar Buttons
+          JToolBar jtoolbar = new JToolBar();
+***************
+*** 2035,2041 ****
+          }
+      }
+  
+!     private void setLF(String newLAF) {
+  
+          if (currentLAF != null && currentLAF == newLAF) {    // No change
+              return;
+--- 2035,2041 ----
+          }
+      }
+  
+!     public void setLF(String newLAF) {
+  
+          if (currentLAF != null && currentLAF == newLAF) {    // No change
+              return;
+***************
+*** 2076,2082 ****
+          }
+      }
+  
+!     private void updateSchemaList() {
+  
+          ButtonGroup group = new ButtonGroup();
+          ArrayList   list  = new ArrayList();
+--- 2076,2082 ----
+          }
+      }
+  
+!     public void updateSchemaList() {
+  
+          ButtonGroup group = new ButtonGroup();
+          ArrayList   list  = new ArrayList();
+***************
+*** 2144,2150 ****
+       */
+      public static class DBMPrefs {
+  
+!         private File prefsFile = null;
+  
+          // Set defaults from Data
+          boolean autoRefresh   = true;
+--- 2144,2150 ----
+       */
+      public static class DBMPrefs {
+  
+!         public File prefsFile = null;
+  
+          // Set defaults from Data
+          boolean autoRefresh   = true;
+***************
+*** 2218,2225 ****
+              load();
+          }
+  
+!         private static final String tString = Boolean.TRUE.toString();
+!         private static final String fString = Boolean.FALSE.toString();
+  
+          public void load() {
+  
+--- 2218,2225 ----
+              load();
+          }
+  
+!         public static final String tString = Boolean.TRUE.toString();
+!         public static final String fString = Boolean.FALSE.toString();
+  
+          public void load() {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/FontDialogSwing.java misc/build/hsqldb/src/org/hsqldb/util/FontDialogSwing.java
+*** misc/hsqldb/src/org/hsqldb/util/FontDialogSwing.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/FontDialogSwing.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 56,84 ****
+  //        for JComboBox fontSizesComboBox and String fontSizes[];
+  public class FontDialogSwing extends JDialog {
+  
+!     private static boolean      isRunning   = false;
+!     private static final String BACKGROUND  = "Background";
+!     private static String       defaultFont = "Dialog";
+!     private static final String FOREGROUND  = "Foreground";
+!     private static JButton      bgColorButton;
+!     private static JCheckBox    ckbbold;
+!     private static JButton      closeButton;
+!     private static JButton      fgColorButton;
+!     private static JComboBox    fontsComboBox;
+  
+      //  weconsultants@users 20050215 - Added for Compatbilty fix for JDK 1.3
+!     private static JComboBox      fontSizesComboBox;
+!     private static final String[] fontSizes = {
+          "8", "9", "10", "11", "12", "13", "14", "16", "18", "24", "36"
+      };
+  
+      // weconsultants@users 20050215 - Commented out for Compatbilty fix for JDK 1.3
+!     //  private static JSpinner           spinnerFontSizes;
+!     //  private static SpinnerNumberModel spinnerModelSizes;
+!     private static DatabaseManagerSwing fOwner;
+!     private static JFrame frame =
+          new JFrame("DataBaseManagerSwing Font Selection Dialog");
+!     private static JCheckBox ckbitalic;
+  
+      /**
+       * Create and display FontDialogSwing Dialog.
+--- 56,84 ----
+  //        for JComboBox fontSizesComboBox and String fontSizes[];
+  public class FontDialogSwing extends JDialog {
+  
+!     public static boolean      isRunning   = false;
+!     public static final String BACKGROUND  = "Background";
+!     public static String       defaultFont = "Dialog";
+!     public static final String FOREGROUND  = "Foreground";
+!     public static JButton      bgColorButton;
+!     public static JCheckBox    ckbbold;
+!     public static JButton      closeButton;
+!     public static JButton      fgColorButton;
+!     public static JComboBox    fontsComboBox;
+  
+      //  weconsultants@users 20050215 - Added for Compatbilty fix for JDK 1.3
+!     public static JComboBox      fontSizesComboBox;
+!     public static final String[] fontSizes = {
+          "8", "9", "10", "11", "12", "13", "14", "16", "18", "24", "36"
+      };
+  
+      // weconsultants@users 20050215 - Commented out for Compatbilty fix for JDK 1.3
+!     //  public static JSpinner           spinnerFontSizes;
+!     //  public static SpinnerNumberModel spinnerModelSizes;
+!     public static DatabaseManagerSwing fOwner;
+!     public static JFrame frame =
+          new JFrame("DataBaseManagerSwing Font Selection Dialog");
+!     public static JCheckBox ckbitalic;
+  
+      /**
+       * Create and display FontDialogSwing Dialog.
+diff -cr misc/hsqldb/src/org/hsqldb/util/Grid.java misc/build/hsqldb/src/org/hsqldb/util/Grid.java
+*** misc/hsqldb/src/org/hsqldb/util/Grid.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/Grid.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 90,129 ****
+  class Grid extends Panel {
+  
+      // drawing
+!     private Dimension dMinimum;
+  
+  // boucherb@users changed access for databasemanager2
+!     protected Font fFont;
+  
+  // --------------------------------------------------
+!     private FontMetrics fMetrics;
+!     private Graphics    gImage;
+!     private Image       iImage;
+  
+      // height / width
+!     private int iWidth, iHeight;
+!     private int iRowHeight, iFirstRow;
+!     private int iGridWidth, iGridHeight;
+!     private int iX, iY;
+  
+      // data
+  // boucherb@users changed access for databasemanager2
+!     protected String[] sColHead = new String[0];
+!     protected Vector   vData    = new Vector();
+  
+  // --------------------------------------------------
+!     private int[] iColWidth;
+!     private int   iColCount;
+  
+  // boucherb@users changed access for databasemanager2
+!     protected int iRowCount;
+  
+  // --------------------------------------------------
+      // scrolling
+!     private Scrollbar sbHoriz, sbVert;
+!     private int       iSbWidth, iSbHeight;
+!     private boolean   bDrag;
+!     private int       iXDrag, iColDrag;
+  
+      /**
+       * Constructor declaration
+--- 90,129 ----
+  class Grid extends Panel {
+  
+      // drawing
+!     public Dimension dMinimum;
+  
+  // boucherb@users changed access for databasemanager2
+!     public Font fFont;
+  
+  // --------------------------------------------------
+!     public FontMetrics fMetrics;
+!     public Graphics    gImage;
+!     public Image       iImage;
+  
+      // height / width
+!     public int iWidth, iHeight;
+!     public int iRowHeight, iFirstRow;
+!     public int iGridWidth, iGridHeight;
+!     public int iX, iY;
+  
+      // data
+  // boucherb@users changed access for databasemanager2
+!     public String[] sColHead = new String[0];
+!     public Vector   vData    = new Vector();
+  
+  // --------------------------------------------------
+!     public int[] iColWidth;
+!     public int   iColCount;
+  
+  // boucherb@users changed access for databasemanager2
+!     public int iRowCount;
+  
+  // --------------------------------------------------
+      // scrolling
+!     public Scrollbar sbHoriz, sbVert;
+!     public int       iSbWidth, iSbHeight;
+!     public boolean   bDrag;
+!     public int       iXDrag, iColDrag;
+  
+      /**
+       * Constructor declaration
+***************
+*** 587,593 ****
+       *
+       * @param i
+       */
+!     private void calcAutoWidth(int i) {
+  
+          int w = 10;
+  
+--- 587,593 ----
+       *
+       * @param i
+       */
+!     public void calcAutoWidth(int i) {
+  
+          int w = 10;
+  
+***************
+*** 611,617 ****
+       *
+       * @return
+       */
+!     private String getDisplay(int x, int y) {
+          return (((String[]) (vData.elementAt(y)))[x]);
+      }
+  
+--- 611,617 ----
+       *
+       * @return
+       */
+!     public String getDisplay(int x, int y) {
+          return (((String[]) (vData.elementAt(y)))[x]);
+      }
+  
+***************
+*** 624,630 ****
+       *
+       * @return
+       */
+!     private String get(int x, int y) {
+          return (((String[]) (vData.elementAt(y)))[x]);
+      }
+  
+--- 624,630 ----
+       *
+       * @return
+       */
+!     public String get(int x, int y) {
+          return (((String[]) (vData.elementAt(y)))[x]);
+      }
+  
+***************
+*** 636,642 ****
+       *
+       * @return
+       */
+!     private static int getMaxHeight(FontMetrics f) {
+          return f.getHeight() + 4;
+      }
+  }
+--- 636,642 ----
+       *
+       * @return
+       */
+!     public static int getMaxHeight(FontMetrics f) {
+          return f.getHeight() + 4;
+      }
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/util/JDBCTypes.java misc/build/hsqldb/src/org/hsqldb/util/JDBCTypes.java
+*** misc/hsqldb/src/org/hsqldb/util/JDBCTypes.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/JDBCTypes.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 48,55 ****
+      public static final int BLOB        = 2004;
+      public static final int CLOB        = 2005;
+      public static final int REF         = 2006;
+!     private Hashtable       hStringJDBCtypes;
+!     private Hashtable       hIntJDBCtypes;
+  
+      JDBCTypes() {
+  
+--- 48,55 ----
+      public static final int BLOB        = 2004;
+      public static final int CLOB        = 2005;
+      public static final int REF         = 2006;
+!     public Hashtable       hStringJDBCtypes;
+!     public Hashtable       hIntJDBCtypes;
+  
+      JDBCTypes() {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/MainInvoker.java misc/build/hsqldb/src/org/hsqldb/util/MainInvoker.java
+*** misc/hsqldb/src/org/hsqldb/util/MainInvoker.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/MainInvoker.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 51,59 ****
+       * It may or may not make sense to make this into a class with real
+       * instances that can keep track of status of stuff invoked by it.
+       */
+!     private static String[] emptyStringArray = new String[0];
+  
+!     private static void syntaxFailure() {
+          System.err.println(SYNTAX_MSG);
+          System.exit(2);
+      }
+--- 51,59 ----
+       * It may or may not make sense to make this into a class with real
+       * instances that can keep track of status of stuff invoked by it.
+       */
+!     public static String[] emptyStringArray = new String[0];
+  
+!     public static void syntaxFailure() {
+          System.err.println(SYNTAX_MSG);
+          System.exit(2);
+      }
+***************
+*** 108,114 ****
+          }
+      }
+  
+!     private static final String SYNTAX_MSG =
+          "    java org.hsqldb.util.MainInvoker "
+          + "[package1.Class1 [arg1a arg1b...] \"\"]... \\\n"
+          + "    packageX.ClassX [argXa argXb...]\nOR\n"
+--- 108,114 ----
+          }
+      }
+  
+!     public static final String SYNTAX_MSG =
+          "    java org.hsqldb.util.MainInvoker "
+          + "[package1.Class1 [arg1a arg1b...] \"\"]... \\\n"
+          + "    packageX.ClassX [argXa argXb...]\nOR\n"
+diff -cr misc/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java misc/build/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java
+*** misc/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 46,53 ****
+   */
+  class OracleTransferHelper extends TransferHelper {
+  
+!     private final int ORACLE = 0;
+!     private final int HSQLDB = 1;
+      String[][]        Funcs  = {
+          {
+              "now()", "\'now\'"
+--- 46,53 ----
+   */
+  class OracleTransferHelper extends TransferHelper {
+  
+!     public final int ORACLE = 0;
+!     public final int HSQLDB = 1;
+      String[][]        Funcs  = {
+          {
+              "now()", "\'now\'"
+diff -cr misc/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java misc/build/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java
+*** misc/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 47,54 ****
+   */
+  class PostgresTransferHelper extends TransferHelper {
+  
+!     private final int PostgreSQL = 0;
+!     private final int HSQLDB     = 1;
+      String[][]        Funcs      = {
+          {
+              "now()", "\'now\'"
+--- 47,54 ----
+   */
+  class PostgresTransferHelper extends TransferHelper {
+  
+!     public final int PostgreSQL = 0;
+!     public final int HSQLDB     = 1;
+      String[][]        Funcs      = {
+          {
+              "now()", "\'now\'"
+diff -cr misc/hsqldb/src/org/hsqldb/util/QueryTool.java misc/build/hsqldb/src/org/hsqldb/util/QueryTool.java
+*** misc/hsqldb/src/org/hsqldb/util/QueryTool.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/QueryTool.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 410,416 ****
+      /**
+       * Adds a String to the Listbox of recent commands.
+       */
+!     private void setRecent(String s) {
+  
+          for (int i = 0; i < iMaxRecent; i++) {
+              if (s.equals(sRecent[i])) {
+--- 410,416 ----
+      /**
+       * Adds a String to the Listbox of recent commands.
+       */
+!     public void setRecent(String s) {
+  
+          for (int i = 0; i < iMaxRecent; i++) {
+              if (s.equals(sRecent[i])) {
+***************
+*** 440,446 ****
+      /**
+       * Create the graphical user interface. This is AWT code.
+       */
+!     private void initGUI() {
+  
+          // all panels
+          Panel pQuery       = new Panel();
+--- 440,446 ----
+      /**
+       * Create the graphical user interface. This is AWT code.
+       */
+!     public void initGUI() {
+  
+          // all panels
+          Panel pQuery       = new Panel();
+diff -cr misc/hsqldb/src/org/hsqldb/util/ScriptTool.java misc/build/hsqldb/src/org/hsqldb/util/ScriptTool.java
+*** misc/hsqldb/src/org/hsqldb/util/ScriptTool.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ScriptTool.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 54,66 ****
+   */
+  public class ScriptTool {
+  
+!     private static Properties pProperties = new Properties();
+!     private Connection        cConn;
+!     private Statement         sStatement;
+!     private boolean           BATCH = true;
+!     private String            EKW   = new String("go");
+!     private boolean           EOF   = false;
+!     private int               ln    = 0;
+  
+      /**
+       * Main method
+--- 54,66 ----
+   */
+  public class ScriptTool {
+  
+!     public static Properties pProperties = new Properties();
+!     public Connection        cConn;
+!     public Statement         sStatement;
+!     public boolean           BATCH = true;
+!     public String            EKW   = new String("go");
+!     public boolean           EOF   = false;
+!     public int               ln    = 0;
+  
+      /**
+       * Main method
+***************
+*** 180,186 ****
+       * Translate ResultSet to String representation
+       * @param r
+       */
+!     private String toString(ResultSet r) {
+  
+          try {
+              if (r == null) {
+--- 180,186 ----
+       * Translate ResultSet to String representation
+       * @param r
+       */
+!     public String toString(ResultSet r) {
+  
+          try {
+              if (r == null) {
+***************
+*** 218,224 ****
+      /**
+       * Read file and convert it to string.
+       */
+!     private String fileToString(BufferedReader in) {
+  
+          if (EOF) {
+              return null;
+--- 218,224 ----
+      /**
+       * Read file and convert it to string.
+       */
+!     public String fileToString(BufferedReader in) {
+  
+          if (EOF) {
+              return null;
+***************
+*** 268,274 ****
+       *
+       * @param s
+       */
+!     private void trace(String s) {
+          System.out.println(s);
+      }
+  
+--- 268,274 ----
+       *
+       * @param s
+       */
+!     public void trace(String s) {
+          System.out.println(s);
+      }
+  
+***************
+*** 276,282 ****
+       * Method declaration
+       *
+       */
+!     private static void printHelp() {
+  
+          System.out.println(
+              "Usage: java ScriptTool [-options]\n"
+--- 276,282 ----
+       * Method declaration
+       *
+       */
+!     public static void printHelp() {
+  
+          System.out.println(
+              "Usage: java ScriptTool [-options]\n"
+diff -cr misc/hsqldb/src/org/hsqldb/util/SqlFile.java misc/build/hsqldb/src/org/hsqldb/util/SqlFile.java
+*** misc/hsqldb/src/org/hsqldb/util/SqlFile.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/SqlFile.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 98,122 ****
+   */
+  public class SqlFile {
+  
+!     private static final int DEFAULT_HISTORY_SIZE = 20;
+!     private File             file;
+!     private boolean          interactive;
+!     private String           primaryPrompt    = "sql> ";
+!     private String           chunkPrompt      = "raw> ";
+!     private String           contPrompt       = "  +> ";
+!     private Connection       curConn          = null;
+!     private boolean          htmlMode         = false;
+!     private HashMap          userVars         = null;
+!     private String[]         statementHistory = null;
+!     private boolean          chunking         = false;
+  
+      /**
+       * Private class to "share" a variable among a family of SqlFile
+       * instances.
+       */
+!     private static class BooleanBucket {
+  
+!         private boolean bPriv = false;
+  
+          public void set(boolean bIn) {
+              bPriv = bIn;
+--- 98,122 ----
+   */
+  public class SqlFile {
+  
+!     public static final int DEFAULT_HISTORY_SIZE = 20;
+!     public File             file;
+!     public boolean          interactive;
+!     public String           primaryPrompt    = "sql> ";
+!     public String           chunkPrompt      = "raw> ";
+!     public String           contPrompt       = "  +> ";
+!     public Connection       curConn          = null;
+!     public boolean          htmlMode         = false;
+!     public HashMap          userVars         = null;
+!     public String[]         statementHistory = null;
+!     public boolean          chunking         = false;
+  
+      /**
+       * Private class to "share" a variable among a family of SqlFile
+       * instances.
+       */
+!     public static class BooleanBucket {
+  
+!         public boolean bPriv = false;
+  
+          public void set(boolean bIn) {
+              bPriv = bIn;
+***************
+*** 133,153 ****
+      BooleanBucket possiblyUncommitteds = new BooleanBucket();
+  
+      // Ascii field separator blanks
+!     private static final int SEP_LEN = 2;
+!     private static final String DIVIDER =
+          "-----------------------------------------------------------------"
+          + "-----------------------------------------------------------------";
+!     private static final String SPACES =
+          "                                                                 "
+          + "                                                                 ";
+!     private static String revnum = null;
+  
+      static {
+          revnum = "$Revision: 1.121 $".substring("$Revision: ".length(),
+                  "$Revision: 1.121 $".length() - 2);
+      }
+  
+!     private static String BANNER =
+          "(SqlFile processor v. " + revnum + ")\n"
+          + "Distribution is permitted under the terms of the HSQLDB license.\n"
+          + "(c) 2004-2005 Blaine Simpson and the HSQLDB Development Group.\n\n"
+--- 133,153 ----
+      BooleanBucket possiblyUncommitteds = new BooleanBucket();
+  
+      // Ascii field separator blanks
+!     public static final int SEP_LEN = 2;
+!     public static final String DIVIDER =
+          "-----------------------------------------------------------------"
+          + "-----------------------------------------------------------------";
+!     public static final String SPACES =
+          "                                                                 "
+          + "                                                                 ";
+!     public static String revnum = null;
+  
+      static {
+          revnum = "$Revision: 1.121-OOo $".substring("$Revision: ".length(),
+                  "$Revision: 1.121-OOo $".length() - 2);
+      }
+  
+!     public static String BANNER =
+          "(SqlFile processor v. " + revnum + ")\n"
+          + "Distribution is permitted under the terms of the HSQLDB license.\n"
+          + "(c) 2004-2005 Blaine Simpson and the HSQLDB Development Group.\n\n"
+***************
+*** 163,169 ****
+          + "  statement into the buffer without executing) or a line ending with ';'\n"
+          + "  (which executes the statement).\n"
+          + "  SQL Statements may begin with '/PLVARNAME' and/or contain *{PLVARNAME}s.\n";
+!     private static final String BUFFER_HELP_TEXT =
+          "BUFFER Commands (only \":;\" is available for non-interactive use).\n"
+          + "    :?                Help\n"
+          + "    :;                Execute current buffer as an SQL Statement\n"
+--- 163,169 ----
+          + "  statement into the buffer without executing) or a line ending with ';'\n"
+          + "  (which executes the statement).\n"
+          + "  SQL Statements may begin with '/PLVARNAME' and/or contain *{PLVARNAME}s.\n";
+!     public static final String BUFFER_HELP_TEXT =
+          "BUFFER Commands (only \":;\" is available for non-interactive use).\n"
+          + "    :?                Help\n"
+          + "    :;                Execute current buffer as an SQL Statement\n"
+***************
+*** 185,191 ****
+          + "                       2:  Narrows substitution to specified buffer line number\n"
+          + "                           (Use any line number in place of '2').\n"
+      ;
+!     private static final String HELP_TEXT = "SPECIAL Commands.\n"
+          + "* commands only available for interactive use.\n"
+          + "In place of \"3\" below, you can use nothing for the previous command, or\n"
+          + "an integer \"X\" to indicate the Xth previous command.\n"
+--- 185,191 ----
+          + "                       2:  Narrows substitution to specified buffer line number\n"
+          + "                           (Use any line number in place of '2').\n"
+      ;
+!     public static final String HELP_TEXT = "SPECIAL Commands.\n"
+          + "* commands only available for interactive use.\n"
+          + "In place of \"3\" below, you can use nothing for the previous command, or\n"
+          + "an integer \"X\" to indicate the Xth previous command.\n"
+***************
+*** 212,218 ****
+          + "    \\-[3];               * reload command and execute (via \":;\")\n"
+          + "    \\q [abort message]   Quit (or end input like Ctrl-Z or Ctrl-D)\n"
+      ;
+!     private static final String PL_HELP_TEXT = "PROCEDURAL LANGUAGE Commands.\n"
+          + "    *?                            Help\n"
+          + "    *                             Expand PL variables from now on.\n"
+          + "                                  (this is also implied by all the following).\n"
+--- 212,218 ----
+          + "    \\-[3];               * reload command and execute (via \":;\")\n"
+          + "    \\q [abort message]   Quit (or end input like Ctrl-Z or Ctrl-D)\n"
+      ;
+!     public static final String PL_HELP_TEXT = "PROCEDURAL LANGUAGE Commands.\n"
+          + "    *?                            Help\n"
+          + "    *                             Expand PL variables from now on.\n"
+          + "                                  (this is also implied by all the following).\n"
+***************
+*** 314,334 ****
+  
+      // So we can tell how to handle quit and break commands.
+      public boolean      recursed     = false;
+!     private String      curCommand   = null;
+!     private int         curLinenum   = -1;
+!     private int         curHist      = -1;
+!     private PrintStream psStd        = null;
+!     private PrintStream psErr        = null;
+!     private PrintWriter pwQuery      = null;
+      StringBuffer        stringBuffer = new StringBuffer();
+      /*
+       * This is reset upon each execute() invocation (to true if interactive,
+       * false otherwise).
+       */
+!     private boolean             continueOnError = false;
+!     private static final String DEFAULT_CHARSET = "US-ASCII";
+!     private BufferedReader      br              = null;
+!     private String              charset         = null;
+  
+      /**
+       * Process all the commands in the file (or stdin) associated with
+--- 314,334 ----
+  
+      // So we can tell how to handle quit and break commands.
+      public boolean      recursed     = false;
+!     public String      curCommand   = null;
+!     public int         curLinenum   = -1;
+!     public int         curHist      = -1;
+!     public PrintStream psStd        = null;
+!     public PrintStream psErr        = null;
+!     public PrintWriter pwQuery      = null;
+      StringBuffer        stringBuffer = new StringBuffer();
+      /*
+       * This is reset upon each execute() invocation (to true if interactive,
+       * false otherwise).
+       */
+!     public boolean             continueOnError = false;
+!     public static final String DEFAULT_CHARSET = "US-ASCII";
+!     public BufferedReader      br              = null;
+!     public String              charset         = null;
+  
+      /**
+       * Process all the commands in the file (or stdin) associated with
+***************
+*** 721,727 ****
+       * @param inString Base String, which will not be modified (because
+       *                 a "copy" will be returned).
+       */
+!     private static String deTerminated(String inString) {
+  
+          int index = inString.lastIndexOf(';');
+  
+--- 721,727 ----
+       * @param inString Base String, which will not be modified (because
+       *                 a "copy" will be returned).
+       */
+!     public static String deTerminated(String inString) {
+  
+          int index = inString.lastIndexOf(';');
+  
+***************
+*** 741,749 ****
+      /**
+       * Utility nested Exception class for internal use.
+       */
+!     private class BadSpecial extends Exception {
+  
+!         private BadSpecial(String s) {
+              super(s);
+          }
+      }
+--- 741,749 ----
+      /**
+       * Utility nested Exception class for internal use.
+       */
+!     public class BadSpecial extends Exception {
+  
+!         public BadSpecial(String s) {
+              super(s);
+          }
+      }
+***************
+*** 756,762 ****
+       * thrown.
+       * SqlTool.execute() on throws a QuitNow if it is in a recursive call.
+       */
+!     private class QuitNow extends SqlToolError {
+  
+          public QuitNow(String s) {
+              super(s);
+--- 756,762 ----
+       * thrown.
+       * SqlTool.execute() on throws a QuitNow if it is in a recursive call.
+       */
+!     public class QuitNow extends SqlToolError {
+  
+          public QuitNow(String s) {
+              super(s);
+***************
+*** 771,777 ****
+       * Utility nested Exception class for internal use.
+       * Very similar to QuitNow.
+       */
+!     private class BreakException extends SqlToolError {
+  
+          public BreakException() {
+              super();
+--- 771,777 ----
+       * Utility nested Exception class for internal use.
+       * Very similar to QuitNow.
+       */
+!     public class BreakException extends SqlToolError {
+  
+          public BreakException() {
+              super();
+***************
+*** 786,792 ****
+       * Utility nested Exception class for internal use.
+       * Very similar to QuitNow.
+       */
+!     private class ContinueException extends SqlToolError {
+  
+          public ContinueException() {
+              super();
+--- 786,792 ----
+       * Utility nested Exception class for internal use.
+       * Very similar to QuitNow.
+       */
+!     public class ContinueException extends SqlToolError {
+  
+          public ContinueException() {
+              super();
+***************
+*** 800,808 ****
+      /**
+       * Utility nested Exception class for internal use.
+       */
+!     private class BadSwitch extends Exception {
+  
+!         private BadSwitch(int i) {
+              super(Integer.toString(i));
+          }
+      }
+--- 800,808 ----
+      /**
+       * Utility nested Exception class for internal use.
+       */
+!     public class BadSwitch extends Exception {
+  
+!         public BadSwitch(int i) {
+              super(Integer.toString(i));
+          }
+      }
+***************
+*** 817,823 ****
+       * @throws SQLException Passed through from processSQL()
+       * @throws BadSpecial Runtime error()
+       */
+!     private void processBuffer(String inString)
+      throws BadSpecial, SQLException {
+  
+          int    index = 0;
+--- 817,823 ----
+       * @throws SQLException Passed through from processSQL()
+       * @throws BadSpecial Runtime error()
+       */
+!     public void processBuffer(String inString)
+      throws BadSpecial, SQLException {
+  
+          int    index = 0;
+***************
+*** 1046,1053 ****
+          throw new BadSpecial("Unknown Buffer Command");
+      }
+  
+!     private boolean doPrepare  = false;
+!     private String  prepareVar = null;
+  
+      /**
+       * Process a Special Command.
+--- 1046,1053 ----
+          throw new BadSpecial("Unknown Buffer Command");
+      }
+  
+!     public boolean doPrepare  = false;
+!     public String  prepareVar = null;
+  
+      /**
+       * Process a Special Command.
+***************
+*** 1057,1063 ****
+       * @throws BadSpecial Runtime error()
+       * @throws QuitNot Command execution (but not the JVM!) should stop
+       */
+!     private void processSpecial(String inString)
+      throws BadSpecial, QuitNow, SQLException, SqlToolError {
+  
+          int    index = 0;
+--- 1057,1063 ----
+       * @throws BadSpecial Runtime error()
+       * @throws QuitNot Command execution (but not the JVM!) should stop
+       */
+!     public void processSpecial(String inString)
+      throws BadSpecial, QuitNow, SQLException, SqlToolError {
+  
+          int    index = 0;
+***************
+*** 1391,1397 ****
+          throw new BadSpecial("Unknown Special Command");
+      }
+  
+!     static private final char[] nonVarChars = {
+          ' ', '\t', '=', '}', '\n', '\r'
+      };
+  
+--- 1391,1397 ----
+          throw new BadSpecial("Unknown Special Command");
+      }
+  
+!     static public final char[] nonVarChars = {
+          ' ', '\t', '=', '}', '\n', '\r'
+      };
+  
+***************
+*** 1425,1431 ****
+       * @throws SQLException  This is really an inappropriate exception
+       * type.  Only using it because I don't have time to do things properly.
+       */
+!     private String dereference(String inString,
+                                 boolean permitAlias) throws SQLException {
+  
+          String       varName, varValue;
+--- 1425,1431 ----
+       * @throws SQLException  This is really an inappropriate exception
+       * type.  Only using it because I don't have time to do things properly.
+       */
+!     public String dereference(String inString,
+                                 boolean permitAlias) throws SQLException {
+  
+          String       varName, varValue;
+***************
+*** 1492,1500 ****
+      public boolean plMode = false;
+  
+      //  PL variable name currently awaiting query output.
+!     private String  fetchingVar = null;
+!     private boolean silentFetch = false;
+!     private boolean fetchBinary = false;
+  
+      /**
+       * Process a Process Language Command.
+--- 1492,1500 ----
+      public boolean plMode = false;
+  
+      //  PL variable name currently awaiting query output.
+!     public String  fetchingVar = null;
+!     public boolean silentFetch = false;
+!     public boolean fetchBinary = false;
+  
+      /**
+       * Process a Process Language Command.
+***************
+*** 1503,1509 ****
+       * @param inString Complete command, less the leading '\' character.
+       * @throws BadSpecial Runtime error()
+       */
+!     private void processPL(String inString)
+      throws BadSpecial, SqlToolError, SQLException {
+  
+          if (inString.length() < 1) {
+--- 1503,1509 ----
+       * @param inString Complete command, less the leading '\' character.
+       * @throws BadSpecial Runtime error()
+       */
+!     public void processPL(String inString)
+      throws BadSpecial, SqlToolError, SQLException {
+  
+          if (inString.length() < 1) {
+***************
+*** 1926,1932 ****
+       * new SqlFile.execute() with a mode whereby commands are written
+       * to a separate history but not executed.
+       */
+!     private File plBlockFile(String type) throws IOException, SqlToolError {
+  
+          String          s;
+          StringTokenizer toker;
+--- 1926,1932 ----
+       * new SqlFile.execute() with a mode whereby commands are written
+       * to a separate history but not executed.
+       */
+!     public File plBlockFile(String type) throws IOException, SqlToolError {
+  
+          String          s;
+          StringTokenizer toker;
+***************
+*** 2015,2029 ****
+      /**
+       * Wrapper methods so don't need to call x(..., false) in most cases.
+       */
+!     private void stdprintln() {
+          stdprintln(false);
+      }
+  
+!     private void stdprint(String s) {
+          stdprint(s, false);
+      }
+  
+!     private void stdprintln(String s) {
+          stdprintln(s, false);
+      }
+  
+--- 2015,2029 ----
+      /**
+       * Wrapper methods so don't need to call x(..., false) in most cases.
+       */
+!     public void stdprintln() {
+          stdprintln(false);
+      }
+  
+!     public void stdprint(String s) {
+          stdprint(s, false);
+      }
+  
+!     public void stdprintln(String s) {
+          stdprintln(s, false);
+      }
+  
+***************
+*** 2032,2038 ****
+       *
+       * Conditionally HTML-ifies output.
+       */
+!     private void stdprintln(boolean queryOutput) {
+  
+          if (htmlMode) {
+              psStd.println("<BR>");
+--- 2032,2038 ----
+       *
+       * Conditionally HTML-ifies output.
+       */
+!     public void stdprintln(boolean queryOutput) {
+  
+          if (htmlMode) {
+              psStd.println("<BR>");
+***************
+*** 2056,2062 ****
+       *
+       * Conditionally HTML-ifies error output.
+       */
+!     private void errprint(String s) {
+  
+          psErr.print(htmlMode
+                      ? ("<DIV style='color:white; background: red; "
+--- 2056,2062 ----
+       *
+       * Conditionally HTML-ifies error output.
+       */
+!     public void errprint(String s) {
+  
+          psErr.print(htmlMode
+                      ? ("<DIV style='color:white; background: red; "
+***************
+*** 2069,2075 ****
+       *
+       * Conditionally HTML-ifies error output.
+       */
+!     private void errprintln(String s) {
+  
+          psErr.println(htmlMode
+                        ? ("<DIV style='color:white; background: red; "
+--- 2069,2075 ----
+       *
+       * Conditionally HTML-ifies error output.
+       */
+!     public void errprintln(String s) {
+  
+          psErr.println(htmlMode
+                        ? ("<DIV style='color:white; background: red; "
+***************
+*** 2082,2088 ****
+       *
+       * Conditionally HTML-ifies output.
+       */
+!     private void stdprint(String s, boolean queryOutput) {
+  
+          psStd.print(htmlMode ? ("<P>" + s + "</P>")
+                               : s);
+--- 2082,2088 ----
+       *
+       * Conditionally HTML-ifies output.
+       */
+!     public void stdprint(String s, boolean queryOutput) {
+  
+          psStd.print(htmlMode ? ("<P>" + s + "</P>")
+                               : s);
+***************
+*** 2099,2105 ****
+       *
+       * Conditionally HTML-ifies output.
+       */
+!     private void stdprintln(String s, boolean queryOutput) {
+  
+          psStd.println(htmlMode ? ("<P>" + s + "</P>")
+                                 : s);
+--- 2099,2105 ----
+       *
+       * Conditionally HTML-ifies output.
+       */
+!     public void stdprintln(String s, boolean queryOutput) {
+  
+          psStd.println(htmlMode ? ("<P>" + s + "</P>")
+                                 : s);
+***************
+*** 2111,2129 ****
+          }
+      }
+  
+!     private static final int DEFAULT_ELEMENT = 0,
+                               HSQLDB_ELEMENT  = 1,
+                               ORACLE_ELEMENT  = 2
+      ;
+  
+      // These do not specify order listed, just inclusion.
+!     private static final int[] listMDSchemaCols = { 1 };
+!     private static final int[] listMDIndexCols  = {
+          2, 6, 3, 9, 4, 10, 11
+      };
+  
+      /** Column numbering starting at 1. */
+!     private static final int[][] listMDTableCols = {
+          {
+              2, 3
+          },    // Default
+--- 2111,2129 ----
+          }
+      }
+  
+!     public static final int DEFAULT_ELEMENT = 0,
+                               HSQLDB_ELEMENT  = 1,
+                               ORACLE_ELEMENT  = 2
+      ;
+  
+      // These do not specify order listed, just inclusion.
+!     public static final int[] listMDSchemaCols = { 1 };
+!     public static final int[] listMDIndexCols  = {
+          2, 6, 3, 9, 4, 10, 11
+      };
+  
+      /** Column numbering starting at 1. */
+!     public static final int[][] listMDTableCols = {
+          {
+              2, 3
+          },    // Default
+***************
+*** 2156,2162 ****
+       * SCOTT, ADAMS, JONES, CLARK, BLAKE, OE, PM, SH, QS, QS_*, these
+       * contain sample data and the schemas can safely be removed.
+       */
+!     private static final String[] oracleSysSchemas = {
+          "SYS", "SYSTEM", "OUTLN", "DBSNMP", "OUTLN", "MDSYS", "ORDSYS",
+          "ORDPLUGINS", "CTXSYS", "DSSYS", "PERFSTAT", "WKPROXY", "WKSYS",
+          "WMSYS", "XDB", "ANONYMOUS", "ODM", "ODM_MTR", "OLAPSYS", "TRACESVR",
+--- 2156,2162 ----
+       * SCOTT, ADAMS, JONES, CLARK, BLAKE, OE, PM, SH, QS, QS_*, these
+       * contain sample data and the schemas can safely be removed.
+       */
+!     public static final String[] oracleSysSchemas = {
+          "SYS", "SYSTEM", "OUTLN", "DBSNMP", "OUTLN", "MDSYS", "ORDSYS",
+          "ORDPLUGINS", "CTXSYS", "DSSYS", "PERFSTAT", "WKPROXY", "WKSYS",
+          "WMSYS", "XDB", "ANONYMOUS", "ODM", "ODM_MTR", "OLAPSYS", "TRACESVR",
+***************
+*** 2172,2178 ****
+       *
+       * @throws BadSpecial
+       */
+!     private void listTables(char c, String inFilter) throws BadSpecial {
+  
+          String   schema  = null;
+          int[]    listSet = null;
+--- 2172,2178 ----
+       *
+       * @throws BadSpecial
+       */
+!     public void listTables(char c, String inFilter) throws BadSpecial {
+  
+          String   schema  = null;
+          int[]    listSet = null;
+***************
+*** 2452,2463 ****
+          }
+      }
+  
+!     private boolean excludeSysSchemas = false;
+  
+      /**
+       * Process the current command as an SQL Statement
+       */
+!     private void processSQL() throws SQLException {
+  
+          // Really don't know whether to take the network latency hit here
+          // in order to check autoCommit in order to set
+--- 2452,2463 ----
+          }
+      }
+  
+!     public boolean excludeSysSchemas = false;
+  
+      /**
+       * Process the current command as an SQL Statement
+       */
+!     public void processSQL() throws SQLException {
+  
+          // Really don't know whether to take the network latency hit here
+          // in order to check autoCommit in order to set
+***************
+*** 2534,2540 ****
+       * @param incFilter Optional case-insensitive substring.
+       *                  Rows are skipped which to not contain this substring.
+       */
+!     private void displayResultSet(Statement statement, ResultSet r,
+                                    int[] incCols,
+                                    String filter) throws SQLException {
+  
+--- 2534,2540 ----
+       * @param incFilter Optional case-insensitive substring.
+       *                  Rows are skipped which to not contain this substring.
+       */
+!     public void displayResultSet(Statement statement, ResultSet r,
+                                    int[] incCols,
+                                    String filter) throws SQLException {
+  
+***************
+*** 2847,2858 ****
+          }
+      }
+  
+!     private static final int    COL_HEAD = 0,
+                                  COL_ODD  = 1,
+                                  COL_EVEN = 2
+      ;
+!     private static final String PRE_TR   = spaces(4);
+!     private static final String PRE_TD   = spaces(8);
+  
+      /**
+       * Print a properly formatted HTML &lt;TR&gt; command for the given
+--- 2847,2858 ----
+          }
+      }
+  
+!     public static final int    COL_HEAD = 0,
+                                  COL_ODD  = 1,
+                                  COL_EVEN = 2
+      ;
+!     public static final String PRE_TR   = spaces(4);
+!     public static final String PRE_TD   = spaces(8);
+  
+      /**
+       * Print a properly formatted HTML &lt;TR&gt; command for the given
+***************
+*** 2860,2866 ****
+       *
+       * @param colType Column type:  COL_HEAD, COL_ODD or COL_EVEN.
+       */
+!     private static String htmlRow(int colType) {
+  
+          switch (colType) {
+  
+--- 2860,2866 ----
+       *
+       * @param colType Column type:  COL_HEAD, COL_ODD or COL_EVEN.
+       */
+!     public static String htmlRow(int colType) {
+  
+          switch (colType) {
+  
+***************
+*** 2886,2892 ****
+       *
+       * @param len Length of output String.
+       */
+!     private static String divider(int len) {
+          return (len > DIVIDER.length()) ? DIVIDER
+                                          : DIVIDER.substring(0, len);
+      }
+--- 2886,2892 ----
+       *
+       * @param len Length of output String.
+       */
+!     public static String divider(int len) {
+          return (len > DIVIDER.length()) ? DIVIDER
+                                          : DIVIDER.substring(0, len);
+      }
+***************
+*** 2896,2902 ****
+       *
+       * @param len Length of output String.
+       */
+!     private static String spaces(int len) {
+          return (len > SPACES.length()) ? SPACES
+                                         : SPACES.substring(0, len);
+      }
+--- 2896,2902 ----
+       *
+       * @param len Length of output String.
+       */
+!     public static String spaces(int len) {
+          return (len > SPACES.length()) ? SPACES
+                                         : SPACES.substring(0, len);
+      }
+***************
+*** 2909,2915 ****
+       * @param fulllen  Output String length.
+       * @param rightJustify  True to right justify, false to left justify.
+       */
+!     private static String pad(String inString, int fulllen,
+                                boolean rightJustify, boolean doPad) {
+  
+          if (!doPad) {
+--- 2909,2915 ----
+       * @param fulllen  Output String length.
+       * @param rightJustify  True to right justify, false to left justify.
+       */
+!     public static String pad(String inString, int fulllen,
+                                boolean rightJustify, boolean doPad) {
+  
+          if (!doPad) {
+***************
+*** 2933,2939 ****
+       * Display command history, which consists of complete or incomplete SQL
+       * commands.
+       */
+!     private void showHistory() {
+  
+          int      ctr = -1;
+          String   s;
+--- 2933,2939 ----
+       * Display command history, which consists of complete or incomplete SQL
+       * commands.
+       */
+!     public void showHistory() {
+  
+          int      ctr = -1;
+          String   s;
+***************
+*** 2981,2987 ****
+      /**
+       * Return a SQL Command from command history.
+       */
+!     private String commandFromHistory(int commandsAgo) throws BadSpecial {
+  
+          if (commandsAgo >= statementHistory.length) {
+              throw new BadSpecial("History can only hold up to "
+--- 2981,2987 ----
+      /**
+       * Return a SQL Command from command history.
+       */
+!     public String commandFromHistory(int commandsAgo) throws BadSpecial {
+  
+          if (commandsAgo >= statementHistory.length) {
+              throw new BadSpecial("History can only hold up to "
+***************
+*** 3002,3008 ****
+       * Push a command onto the history array (the first element of which
+       * is the "Buffer").
+       */
+!     private void setBuf(String inString) {
+  
+          curHist++;
+  
+--- 3002,3008 ----
+       * Push a command onto the history array (the first element of which
+       * is the "Buffer").
+       */
+!     public void setBuf(String inString) {
+  
+          curHist++;
+  
+***************
+*** 3019,3025 ****
+       * @param tableName  Table that will be described.
+       * @param filter  Substring to filter by
+       */
+!     private void describe(String tableName,
+                            String inFilter) throws SQLException {
+  
+          /*
+--- 3019,3025 ----
+       * @param tableName  Table that will be described.
+       * @param filter  Substring to filter by
+       */
+!     public void describe(String tableName,
+                            String inFilter) throws SQLException {
+  
+          /*
+***************
+*** 3168,3174 ****
+          return sa;
+      }
+  
+!     private boolean eval(String[] inTokens) throws BadSpecial {
+  
+          // dereference *VARNAME variables.
+          // N.b. we work with a "copy" of the tokens.
+--- 3168,3174 ----
+          return sa;
+      }
+  
+!     public boolean eval(String[] inTokens) throws BadSpecial {
+  
+          // dereference *VARNAME variables.
+          // N.b. we work with a "copy" of the tokens.
+***************
+*** 3221,3227 ****
+          throw new BadSpecial("Unrecognized logical operation");
+      }
+  
+!     private void closeQueryOutputStream() {
+  
+          if (pwQuery == null) {
+              return;
+--- 3221,3227 ----
+          throw new BadSpecial("Unrecognized logical operation");
+      }
+  
+!     public void closeQueryOutputStream() {
+  
+          if (pwQuery == null) {
+              return;
+***************
+*** 3241,3247 ****
+       * Print to psStd and possibly pwQuery iff current HTML mode matches
+       * supplied printHtml.
+       */
+!     private void condlPrintln(String s, boolean printHtml) {
+  
+          if ((printHtml &&!htmlMode) || (htmlMode &&!printHtml)) {
+              return;
+--- 3241,3247 ----
+       * Print to psStd and possibly pwQuery iff current HTML mode matches
+       * supplied printHtml.
+       */
+!     public void condlPrintln(String s, boolean printHtml) {
+  
+          if ((printHtml &&!htmlMode) || (htmlMode &&!printHtml)) {
+              return;
+***************
+*** 3259,3265 ****
+       * Print to psStd and possibly pwQuery iff current HTML mode matches
+       * supplied printHtml.
+       */
+!     private void condlPrint(String s, boolean printHtml) {
+  
+          if ((printHtml &&!htmlMode) || (htmlMode &&!printHtml)) {
+              return;
+--- 3259,3265 ----
+       * Print to psStd and possibly pwQuery iff current HTML mode matches
+       * supplied printHtml.
+       */
+!     public void condlPrint(String s, boolean printHtml) {
+  
+          if ((printHtml &&!htmlMode) || (htmlMode &&!printHtml)) {
+              return;
+***************
+*** 3273,3279 ****
+          }
+      }
+  
+!     private static String formatNicely(Map map, boolean withValues) {
+  
+          String       key;
+          StringBuffer sb = new StringBuffer();
+--- 3273,3279 ----
+          }
+      }
+  
+!     public static String formatNicely(Map map, boolean withValues) {
+  
+          String       key;
+          StringBuffer sb = new StringBuffer();
+***************
+*** 3303,3309 ****
+      /**
+       * Ascii file dump.
+       */
+!     private void dump(String varName,
+                        File dumpFile) throws IOException, BadSpecial {
+  
+          String val = (String) userVars.get(varName);
+--- 3303,3309 ----
+      /**
+       * Ascii file dump.
+       */
+!     public void dump(String varName,
+                        File dumpFile) throws IOException, BadSpecial {
+  
+          String val = (String) userVars.get(varName);
+***************
+*** 3344,3350 ****
+      /**
+       * Binary file dump
+       */
+!     private void dump(File dumpFile) throws IOException, BadSpecial {
+  
+          if (binBuffer == null) {
+              throw new BadSpecial("Binary SqlFile buffer is currently empty");
+--- 3344,3350 ----
+      /**
+       * Binary file dump
+       */
+!     public void dump(File dumpFile) throws IOException, BadSpecial {
+  
+          if (binBuffer == null) {
+              throw new BadSpecial("Binary SqlFile buffer is currently empty");
+***************
+*** 3363,3369 ****
+          stdprintln("Saved " + len + " bytes to '" + dumpFile + "'");
+      }
+  
+!     private String streamToString(InputStream is) throws IOException {
+  
+          char[]            xferBuffer   = new char[10240];
+          StringWriter      stringWriter = new StringWriter();
+--- 3363,3369 ----
+          stdprintln("Saved " + len + " bytes to '" + dumpFile + "'");
+      }
+  
+!     public String streamToString(InputStream is) throws IOException {
+  
+          char[]            xferBuffer   = new char[10240];
+          StringWriter      stringWriter = new StringWriter();
+***************
+*** 3377,3383 ****
+          return stringWriter.toString();
+      }
+  
+!     private byte[] streamToBytes(InputStream is) throws IOException {
+  
+          byte[]                xferBuffer = new byte[10240];
+          ByteArrayOutputStream baos       = new ByteArrayOutputStream();
+--- 3377,3383 ----
+          return stringWriter.toString();
+      }
+  
+!     public byte[] streamToBytes(InputStream is) throws IOException {
+  
+          byte[]                xferBuffer = new byte[10240];
+          ByteArrayOutputStream baos       = new ByteArrayOutputStream();
+***************
+*** 3393,3399 ****
+      /**
+       * Ascii file load.
+       */
+!     private void load(String varName, File asciiFile) throws IOException {
+  
+          char[]       xferBuffer   = new char[10240];
+          StringWriter stringWriter = new StringWriter();
+--- 3393,3399 ----
+      /**
+       * Ascii file load.
+       */
+!     public void load(String varName, File asciiFile) throws IOException {
+  
+          char[]       xferBuffer   = new char[10240];
+          StringWriter stringWriter = new StringWriter();
+***************
+*** 3412,3418 ****
+      /**
+       * Binary file load
+       */
+!     private void load(File binFile) throws IOException {
+  
+          byte[]                xferBuffer = new byte[10240];
+          ByteArrayOutputStream baos       = new ByteArrayOutputStream();
+--- 3412,3418 ----
+      /**
+       * Binary file load
+       */
+!     public void load(File binFile) throws IOException {
+  
+          byte[]                xferBuffer = new byte[10240];
+          ByteArrayOutputStream baos       = new ByteArrayOutputStream();
+***************
+*** 3472,3479 ****
+      }
+  
+      // won't compile with JDK 1.3 without these
+!     private static final int JDBC3_BOOLEAN  = 16;
+!     private static final int JDBC3_DATALINK = 70;
+  
+      public static String sqlTypeToString(int i) {
+  
+--- 3472,3479 ----
+      }
+  
+      // won't compile with JDK 1.3 without these
+!     public static final int JDBC3_BOOLEAN  = 16;
+!     public static final int JDBC3_DATALINK = 70;
+  
+      public static String sqlTypeToString(int i) {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/SqlServerTransferHelper.java misc/build/hsqldb/src/org/hsqldb/util/SqlServerTransferHelper.java
+*** misc/hsqldb/src/org/hsqldb/util/SqlServerTransferHelper.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/SqlServerTransferHelper.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 42,49 ****
+   */
+  class SqlServerTransferHelper extends TransferHelper {
+  
+!     private boolean firstTinyintRow;
+!     private boolean firstSmallintRow;
+  
+      SqlServerTransferHelper() {
+          super();
+--- 42,49 ----
+   */
+  class SqlServerTransferHelper extends TransferHelper {
+  
+!     public boolean firstTinyintRow;
+!     public boolean firstSmallintRow;
+  
+      SqlServerTransferHelper() {
+          super();
+diff -cr misc/hsqldb/src/org/hsqldb/util/SqlTool.java misc/build/hsqldb/src/org/hsqldb/util/SqlTool.java
+*** misc/hsqldb/src/org/hsqldb/util/SqlTool.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/SqlTool.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 55,67 ****
+   */
+  public class SqlTool {
+  
+!     private static final String DEFAULT_RCFILE =
+          System.getProperty("user.home") + "/sqltool.rc";
+!     private static Connection conn;
+  
+      // N.b. the following is static!
+!     private static boolean noexit;    // Whether System.exit() may be called.
+!     private static String  revnum = null;
+  
+      static {
+          revnum = "$Revision: 1.1 $".substring("$Revision: ".length(),
+--- 55,67 ----
+   */
+  public class SqlTool {
+  
+!     public static final String DEFAULT_RCFILE =
+          System.getProperty("user.home") + "/sqltool.rc";
+!     public static Connection conn;
+  
+      // N.b. the following is static!
+!     public static boolean noexit;    // Whether System.exit() may be called.
+!     public static String  revnum = null;
+  
+      static {
+          revnum = "$Revision: 1.1 $".substring("$Revision: ".length(),
+***************
+*** 69,75 ****
+                                                 - 2);
+      }
+  
+!     private static final String SYNTAX_MESSAGE =
+          "Usage: java [-Dsqlfile.X=Y...] org.hsqldb.util.SqlTool \\\n"
+          + "    [--optname [optval...]] urlid [file1.sql...]\n"
+          + "where arguments are:\n"
+--- 69,75 ----
+                                                 - 2);
+      }
+  
+!     public static final String SYNTAX_MESSAGE =
+          "Usage: java [-Dsqlfile.X=Y...] org.hsqldb.util.SqlTool \\\n"
+          + "    [--optname [optval...]] urlid [file1.sql...]\n"
+          + "where arguments are:\n"
+***************
+*** 98,108 ****
+          + "SqlTool v. " + revnum + ".";
+  
+      /** Utility nested class for internal use. */
+!     private static class BadCmdline extends Exception {}
+      ;
+  
+      /** Utility object for internal use. */
+!     private static BadCmdline bcl = new BadCmdline();
+  
+      /** Nested class for external callers of SqlTool.main() */
+      public static class SqlToolException extends Exception {
+--- 98,108 ----
+          + "SqlTool v. " + revnum + ".";
+  
+      /** Utility nested class for internal use. */
+!     public static class BadCmdline extends Exception {}
+      ;
+  
+      /** Utility object for internal use. */
+!     public static BadCmdline bcl = new BadCmdline();
+  
+      /** Nested class for external callers of SqlTool.main() */
+      public static class SqlToolException extends Exception {
+***************
+*** 122,128 ****
+       * Call return() right after you call this method, because this method
+       * will not exit if (noexit is true && retval == 0).
+       */
+!     private static void exitMain(int retval) throws SqlToolException {
+          exitMain(retval, null);
+      }
+  
+--- 122,128 ----
+       * Call return() right after you call this method, because this method
+       * will not exit if (noexit is true && retval == 0).
+       */
+!     public static void exitMain(int retval) throws SqlToolException {
+          exitMain(retval, null);
+      }
+  
+***************
+*** 132,138 ****
+       * Call return() right after you call this method, because this method
+       * will not exit if (noexit is true && retval == 0).
+       */
+!     private static void exitMain(int retval,
+                                   String msg) throws SqlToolException {
+  
+          if (noexit) {
+--- 132,138 ----
+       * Call return() right after you call this method, because this method
+       * will not exit if (noexit is true && retval == 0).
+       */
+!     public static void exitMain(int retval,
+                                   String msg) throws SqlToolException {
+  
+          if (noexit) {
+diff -cr misc/hsqldb/src/org/hsqldb/util/SqlToolSprayer.java misc/build/hsqldb/src/org/hsqldb/util/SqlToolSprayer.java
+*** misc/hsqldb/src/org/hsqldb/util/SqlToolSprayer.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/SqlToolSprayer.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 59,65 ****
+   */
+  public class SqlToolSprayer {
+  
+!     private static final String SYNTAX_MSG =
+          "SYNTAX:  java [-D...] SqlToolSprayer 'SQL;' [urlid1 urlid2...]\n"
+          + "System properties you may use [default values]:\n"
+          + "    sqltoolsprayer.period (in ms.) [500]\n"
+--- 59,65 ----
+   */
+  public class SqlToolSprayer {
+  
+!     public static final String SYNTAX_MSG =
+          "SYNTAX:  java [-D...] SqlToolSprayer 'SQL;' [urlid1 urlid2...]\n"
+          + "System properties you may use [default values]:\n"
+          + "    sqltoolsprayer.period (in ms.) [500]\n"
+***************
+*** 184,190 ****
+          System.exit(0);
+      }
+  
+!     private static void getUrlsFromPropFile(String fileName,
+              ArrayList al) throws Exception {
+  
+          Properties p = new Properties();
+--- 184,190 ----
+          System.exit(0);
+      }
+  
+!     public static void getUrlsFromPropFile(String fileName,
+              ArrayList al) throws Exception {
+  
+          Properties p = new Properties();
+diff -cr misc/hsqldb/src/org/hsqldb/util/TableSorter.java misc/build/hsqldb/src/org/hsqldb/util/TableSorter.java
+*** misc/hsqldb/src/org/hsqldb/util/TableSorter.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/TableSorter.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 78,88 ****
+   */
+  public class TableSorter extends AbstractTableModel {
+  
+!     protected TableModel           tableModel;
+      public static final int        DESCENDING            = -1;
+      public static final int        NOT_SORTED            = 0;
+      public static final int        ASCENDING             = 1;
+!     private static Directive EMPTY_DIRECTIVE = new Directive(-1, NOT_SORTED);
+      public static final Comparator COMPARABLE_COMPARATOR = new Comparator() {
+  
+          public int compare(Object o1, Object o2) {
+--- 78,88 ----
+   */
+  public class TableSorter extends AbstractTableModel {
+  
+!     public TableModel           tableModel;
+      public static final int        DESCENDING            = -1;
+      public static final int        NOT_SORTED            = 0;
+      public static final int        ASCENDING             = 1;
+!     public static Directive EMPTY_DIRECTIVE = new Directive(-1, NOT_SORTED);
+      public static final Comparator COMPARABLE_COMPARATOR = new Comparator() {
+  
+          public int compare(Object o1, Object o2) {
+***************
+*** 112,124 ****
+              return o1.toString().compareTo(o2.toString());
+          }
+      };
+!     private Row[]              viewToModel;
+!     private int[]              modelToView;
+!     private JTableHeader       tableHeader;
+!     private MouseListener      mouseListener;
+!     private TableModelListener tableModelListener;
+!     private Map                columnComparators = new HashMap();
+!     private List               sortingColumns    = new ArrayList();
+  
+      public TableSorter() {
+          this.mouseListener      = new MouseHandler();
+--- 112,124 ----
+              return o1.toString().compareTo(o2.toString());
+          }
+      };
+!     public Row[]              viewToModel;
+!     public int[]              modelToView;
+!     public JTableHeader       tableHeader;
+!     public MouseListener      mouseListener;
+!     public TableModelListener tableModelListener;
+!     public Map                columnComparators = new HashMap();
+!     public List               sortingColumns    = new ArrayList();
+  
+      public TableSorter() {
+          this.mouseListener      = new MouseHandler();
+***************
+*** 140,146 ****
+          setTableModel(tableModel);
+      }
+  
+!     private void clearSortingState() {
+          viewToModel = null;
+          modelToView = null;
+      }
+--- 140,146 ----
+          setTableModel(tableModel);
+      }
+  
+!     public void clearSortingState() {
+          viewToModel = null;
+          modelToView = null;
+      }
+***************
+*** 198,204 ****
+          return sortingColumns.size() != 0;
+      }
+  
+!     private Directive getDirective(int column) {
+  
+          for (int i = 0; i < sortingColumns.size(); i++) {
+              Directive directive = (Directive) sortingColumns.get(i);
+--- 198,204 ----
+          return sortingColumns.size() != 0;
+      }
+  
+!     public Directive getDirective(int column) {
+  
+          for (int i = 0; i < sortingColumns.size(); i++) {
+              Directive directive = (Directive) sortingColumns.get(i);
+***************
+*** 215,221 ****
+          return getDirective(column).direction;
+      }
+  
+!     private void sortingStatusChanged() {
+  
+          clearSortingState();
+          fireTableDataChanged();
+--- 215,221 ----
+          return getDirective(column).direction;
+      }
+  
+!     public void sortingStatusChanged() {
+  
+          clearSortingState();
+          fireTableDataChanged();
+***************
+*** 240,246 ****
+          sortingStatusChanged();
+      }
+  
+!     protected Icon getHeaderRendererIcon(int column, int size) {
+  
+          Directive directive = getDirective(column);
+  
+--- 240,246 ----
+          sortingStatusChanged();
+      }
+  
+!     public Icon getHeaderRendererIcon(int column, int size) {
+  
+          Directive directive = getDirective(column);
+  
+***************
+*** 252,258 ****
+                           sortingColumns.indexOf(directive));
+      }
+  
+!     private void cancelSorting() {
+          sortingColumns.clear();
+          sortingStatusChanged();
+      }
+--- 252,258 ----
+                           sortingColumns.indexOf(directive));
+      }
+  
+!     public void cancelSorting() {
+          sortingColumns.clear();
+          sortingStatusChanged();
+      }
+***************
+*** 266,272 ****
+          }
+      }
+  
+!     protected Comparator getComparator(int column) {
+  
+          Class columnType = tableModel.getColumnClass(column);
+          Comparator comparator =
+--- 266,272 ----
+          }
+      }
+  
+!     public Comparator getComparator(int column) {
+  
+          Class columnType = tableModel.getColumnClass(column);
+          Comparator comparator =
+***************
+*** 283,289 ****
+          return LEXICAL_COMPARATOR;
+      }
+  
+!     private Row[] getViewToModel() {
+  
+          if (viewToModel == null) {
+              int tableModelRowCount = tableModel.getRowCount();
+--- 283,289 ----
+          return LEXICAL_COMPARATOR;
+      }
+  
+!     public Row[] getViewToModel() {
+  
+          if (viewToModel == null) {
+              int tableModelRowCount = tableModel.getRowCount();
+***************
+*** 306,312 ****
+          return getViewToModel()[viewIndex].modelIndex;
+      }
+  
+!     private int[] getModelToView() {
+  
+          if (modelToView == null) {
+              int n = getViewToModel().length;
+--- 306,312 ----
+          return getViewToModel()[viewIndex].modelIndex;
+      }
+  
+!     public int[] getModelToView() {
+  
+          if (modelToView == null) {
+              int n = getViewToModel().length;
+***************
+*** 353,361 ****
+      }
+  
+      // Helper classes
+!     private class Row implements Comparable {
+  
+!         private int modelIndex;
+  
+          public Row(int index) {
+              this.modelIndex = index;
+--- 353,361 ----
+      }
+  
+      // Helper classes
+!     public class Row implements Comparable {
+  
+!         public int modelIndex;
+  
+          public Row(int index) {
+              this.modelIndex = index;
+***************
+*** 394,400 ****
+          }
+      }
+  
+!     private class TableModelHandler implements TableModelListener {
+  
+          public void tableChanged(TableModelEvent e) {
+  
+--- 394,400 ----
+          }
+      }
+  
+!     public class TableModelHandler implements TableModelListener {
+  
+          public void tableChanged(TableModelEvent e) {
+  
+***************
+*** 457,463 ****
+          }
+      }
+  
+!     private class MouseHandler extends MouseAdapter {
+  
+          public void mouseClicked(MouseEvent e) {
+  
+--- 457,463 ----
+          }
+      }
+  
+!     public class MouseHandler extends MouseAdapter {
+  
+          public void mouseClicked(MouseEvent e) {
+  
+***************
+*** 484,494 ****
+          }
+      }
+  
+!     private static class Arrow implements Icon {
+  
+!         private boolean descending;
+!         private int     size;
+!         private int     priority;
+  
+          public Arrow(boolean descending, int size, int priority) {
+  
+--- 484,494 ----
+          }
+      }
+  
+!     public static class Arrow implements Icon {
+  
+!         public boolean descending;
+!         public int     size;
+!         public int     priority;
+  
+          public Arrow(boolean descending, int size, int priority) {
+  
+***************
+*** 548,556 ****
+          }
+      }
+  
+!     private class SortableHeaderRenderer implements TableCellRenderer {
+  
+!         private TableCellRenderer tableCellRenderer;
+  
+          public SortableHeaderRenderer(TableCellRenderer tableCellRenderer) {
+              this.tableCellRenderer = tableCellRenderer;
+--- 548,556 ----
+          }
+      }
+  
+!     public class SortableHeaderRenderer implements TableCellRenderer {
+  
+!         public TableCellRenderer tableCellRenderer;
+  
+          public SortableHeaderRenderer(TableCellRenderer tableCellRenderer) {
+              this.tableCellRenderer = tableCellRenderer;
+***************
+*** 579,588 ****
+          }
+      }
+  
+!     private static class Directive {
+  
+!         private int column;
+!         private int direction;
+  
+          public Directive(int column, int direction) {
+              this.column    = column;
+--- 579,588 ----
+          }
+      }
+  
+!     public static class Directive {
+  
+!         public int column;
+!         public int direction;
+  
+          public Directive(int column, int direction) {
+              this.column    = column;
+diff -cr misc/hsqldb/src/org/hsqldb/util/TransferCommon.java misc/build/hsqldb/src/org/hsqldb/util/TransferCommon.java
+*** misc/hsqldb/src/org/hsqldb/util/TransferCommon.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/TransferCommon.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 148,152 ****
+          return (tTable);
+      }
+  
+!     private TransferCommon() {}
+  }
+--- 148,152 ----
+          return (tTable);
+      }
+  
+!     public TransferCommon() {}
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/util/TransferDb.java misc/build/hsqldb/src/org/hsqldb/util/TransferDb.java
+*** misc/hsqldb/src/org/hsqldb/util/TransferDb.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/TransferDb.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 55,61 ****
+  
+      Connection          conn;
+      DatabaseMetaData    meta;
+!     protected Statement srcStatement = null;
+  
+      TransferDb(Connection c, Traceable t) throws DataAccessPointException {
+  
+--- 55,61 ----
+  
+      Connection          conn;
+      DatabaseMetaData    meta;
+!     public Statement srcStatement = null;
+  
+      TransferDb(Connection c, Traceable t) throws DataAccessPointException {
+  
+***************
+*** 243,249 ****
+      }
+  
+  /*
+!     private void transferRow(TransferResultSet r,
+                               PreparedStatement p)
+                               throws DataAccessPointException, SQLException {
+          // TODO
+--- 243,249 ----
+      }
+  
+  /*
+!     public void transferRow(TransferResultSet r,
+                               PreparedStatement p)
+                               throws DataAccessPointException, SQLException {
+          // TODO
+***************
+*** 904,910 ****
+       *
+       * @throws SQLException
+       */
+!     private void transferRow(TransferResultSet r, PreparedStatement p,
+                               int len,
+                               int[] types)
+                               throws DataAccessPointException, SQLException {
+--- 904,910 ----
+       *
+       * @throws SQLException
+       */
+!     public void transferRow(TransferResultSet r, PreparedStatement p,
+                               int len,
+                               int[] types)
+                               throws DataAccessPointException, SQLException {
+diff -cr misc/hsqldb/src/org/hsqldb/util/TransferHelper.java misc/build/hsqldb/src/org/hsqldb/util/TransferHelper.java
+*** misc/hsqldb/src/org/hsqldb/util/TransferHelper.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/TransferHelper.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 44,54 ****
+   */
+  class TransferHelper {
+  
+!     protected TransferDb db;
+!     protected Traceable  tracer;
+!     protected String     sSchema;
+!     protected JDBCTypes  JDBCT;
+!     private String       quote;
+  
+      TransferHelper() {
+  
+--- 44,54 ----
+   */
+  class TransferHelper {
+  
+!     public TransferDb db;
+!     public Traceable  tracer;
+!     public String     sSchema;
+!     public JDBCTypes  JDBCT;
+!     public String       quote;
+  
+      TransferHelper() {
+  
+diff -cr misc/hsqldb/src/org/hsqldb/util/Transfer.java misc/build/hsqldb/src/org/hsqldb/util/Transfer.java
+*** misc/hsqldb/src/org/hsqldb/util/Transfer.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/Transfer.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 203,209 ****
+          work(arg);
+      }
+  
+!     private boolean CatalogToSelect() {
+  
+          Vector result = null;
+  
+--- 203,209 ----
+          work(arg);
+      }
+  
+!     public boolean CatalogToSelect() {
+  
+          Vector result = null;
+  
+***************
+*** 283,289 ****
+          return (lTable.getItemCount() > 0);
+      }
+  
+!     private boolean SchemaToSelect() {
+  
+          Vector result = null;
+  
+--- 283,289 ----
+          return (lTable.getItemCount() > 0);
+      }
+  
+!     public boolean SchemaToSelect() {
+  
+          Vector result = null;
+  
+***************
+*** 490,496 ****
+          return;
+      }
+  
+!     private void RefreshMainDisplay() {
+  
+          lTable.removeAll();
+          lTable.repaint();
+--- 490,496 ----
+          return;
+      }
+  
+!     public void RefreshMainDisplay() {
+  
+          lTable.removeAll();
+          lTable.repaint();
+***************
+*** 530,536 ****
+       * @param f
+       * @param m
+       */
+!     private void addMenuItems(Menu f, String[] m) {
+  
+          for (int i = 0; i < m.length; i++) {
+              if (m[i].equals("-")) {
+--- 530,536 ----
+       * @param f
+       * @param m
+       */
+!     public void addMenuItems(Menu f, String[] m) {
+  
+          for (int i = 0; i < m.length; i++) {
+              if (m[i].equals("-")) {
+***************
+*** 585,591 ****
+       * Method declaration
+       *
+       */
+!     private void saveTable() {
+  
+          if (tCurrent == null) {
+              return;
+--- 585,591 ----
+       * Method declaration
+       *
+       */
+!     public void saveTable() {
+  
+          if (tCurrent == null) {
+              return;
+***************
+*** 643,649 ****
+       *
+       * @param t
+       */
+!     private void displayTable(TransferTable t) {
+  
+          tCurrent = t;
+  
+--- 643,649 ----
+       *
+       * @param t
+       */
+!     public void displayTable(TransferTable t) {
+  
+          tCurrent = t;
+  
+***************
+*** 679,685 ****
+       *
+       * @param and
+       */
+!     private void updateEnabled(boolean and) {
+  
+          boolean b = cTransfer.getState();
+  
+--- 679,685 ----
+       *
+       * @param and
+       */
+!     public void updateEnabled(boolean and) {
+  
+          boolean b = cTransfer.getState();
+  
+***************
+*** 711,717 ****
+      /**
+       * Method ProcessNextStep
+       */
+!     private void ProcessNextStep() {
+  
+          switch (iSelectionStep) {
+  
+--- 711,717 ----
+      /**
+       * Method ProcessNextStep
+       */
+!     public void ProcessNextStep() {
+  
+          switch (iSelectionStep) {
+  
+***************
+*** 901,907 ****
+       */
+      public void windowClosed(WindowEvent e) {}
+  
+!     private void cleanup() {
+  
+          try {
+              if (sourceDb != null) {
+--- 901,907 ----
+       */
+      public void windowClosed(WindowEvent e) {}
+  
+!     public void cleanup() {
+  
+          try {
+              if (sourceDb != null) {
+***************
+*** 957,963 ****
+       * Method declaration
+       *
+       */
+!     private void initGUI() {
+  
+          Font fFont = new Font("Dialog", Font.PLAIN, 12);
+  
+--- 957,963 ----
+       * Method declaration
+       *
+       */
+!     public void initGUI() {
+  
+          Font fFont = new Font("Dialog", Font.PLAIN, 12);
+  
+***************
+*** 1119,1125 ****
+       *
+       * @return
+       */
+!     private Panel createBorderPanel(Component center) {
+  
+          Panel p = new Panel();
+  
+--- 1119,1125 ----
+       *
+       * @return
+       */
+!     public Panel createBorderPanel(Component center) {
+  
+          Panel p = new Panel();
+  
+***************
+*** 1142,1148 ****
+       *
+       * @return
+       */
+!     private Label createLabel(String s) {
+  
+          Label l = new Label(s);
+  
+--- 1142,1148 ----
+       *
+       * @return
+       */
+!     public Label createLabel(String s) {
+  
+          Label l = new Label(s);
+  
+***************
+*** 1151,1162 ****
+          return l;
+      }
+  
+!     private void SavePrefs(String f) {
+          saveTable();
+          TransferCommon.savePrefs(f, sourceDb, targetDb, this, tTable);
+      }
+  
+!     private void LoadPrefs(String f) {
+  
+          TransferTable t;
+  
+--- 1151,1162 ----
+          return l;
+      }
+  
+!     public void SavePrefs(String f) {
+          saveTable();
+          TransferCommon.savePrefs(f, sourceDb, targetDb, this, tTable);
+      }
+  
+!     public void LoadPrefs(String f) {
+  
+          TransferTable t;
+  
+***************
+*** 1207,1213 ****
+       * Method declaration
+       *
+       */
+!     private void transfer() {
+  
+          saveTable();
+          updateEnabled(false);
+--- 1207,1213 ----
+       * Method declaration
+       *
+       */
+!     public void transfer() {
+  
+          saveTable();
+          updateEnabled(false);
+***************
+*** 1270,1276 ****
+          System.gc();
+      }
+  
+!     protected void Exit() {
+  
+          cleanup();
+          fMain.dispose();
+--- 1270,1276 ----
+          System.gc();
+      }
+  
+!     public void Exit() {
+  
+          cleanup();
+          fMain.dispose();
+diff -cr misc/hsqldb/src/org/hsqldb/util/TransferSQLText.java misc/build/hsqldb/src/org/hsqldb/util/TransferSQLText.java
+*** misc/hsqldb/src/org/hsqldb/util/TransferSQLText.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/TransferSQLText.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 52,60 ****
+      String              sFileName              = null;
+      BufferedWriter      WTextWrite             = null;
+      BufferedReader      WTextRead              = null;
+!     protected boolean   StructureAlreadyParsed = false;
+      Hashtable           DbStmts                = null;
+!     protected JDBCTypes JDBCT                  = null;
+  
+      TransferSQLText(String _FileName,
+                      Traceable t) throws DataAccessPointException {
+--- 52,60 ----
+      String              sFileName              = null;
+      BufferedWriter      WTextWrite             = null;
+      BufferedReader      WTextRead              = null;
+!     public boolean   StructureAlreadyParsed = false;
+      Hashtable           DbStmts                = null;
+!     public JDBCTypes JDBCT                  = null;
+  
+      TransferSQLText(String _FileName,
+                      Traceable t) throws DataAccessPointException {
+***************
+*** 159,165 ****
+       *
+       * @throws SQLException
+       */
+!     private void transferRow(TransferResultSet r) throws Exception {
+  
+          String sLast = "";
+          int    len   = r.getColumnCount();
+--- 159,165 ----
+       *
+       * @throws SQLException
+       */
+!     public void transferRow(TransferResultSet r) throws Exception {
+  
+          String sLast = "";
+          int    len   = r.getColumnCount();
+diff -cr misc/hsqldb/src/org/hsqldb/util/TransferTable.java misc/build/hsqldb/src/org/hsqldb/util/TransferTable.java
+*** misc/hsqldb/src/org/hsqldb/util/TransferTable.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/TransferTable.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 471,477 ****
+          }
+      }
+  
+!     private void initTypes() throws SQLException {
+  
+          if (hTypes != null) {
+              return;
+--- 471,477 ----
+          }
+      }
+  
+!     public void initTypes() throws SQLException {
+  
+          if (hTypes != null) {
+              return;
+diff -cr misc/hsqldb/src/org/hsqldb/util/Tree.java misc/build/hsqldb/src/org/hsqldb/util/Tree.java
+*** misc/hsqldb/src/org/hsqldb/util/Tree.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/Tree.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 88,117 ****
+  class Tree extends Panel {
+  
+      // static
+!     private static Font        fFont;
+!     private static FontMetrics fMetrics;
+!     private static int         iRowHeight;
+!     private static int         iIndentWidth;
+!     private int                iMaxTextLength;
+  
+      // drawing
+!     private Dimension dMinimum;
+!     private Graphics  gImage;
+!     private Image     iImage;
+  
+      // height / width
+!     private int iWidth, iHeight;
+!     private int iFirstRow;
+!     private int iTreeWidth, iTreeHeight;
+!     private int iX, iY;
+  
+      // data
+!     private Vector vData;
+!     private int    iRowCount;
+  
+      // scrolling
+!     private Scrollbar sbHoriz, sbVert;
+!     private int       iSbWidth, iSbHeight;
+  
+      static {
+          fFont        = new Font("Dialog", Font.PLAIN, 12);
+--- 88,117 ----
+  class Tree extends Panel {
+  
+      // static
+!     public static Font        fFont;
+!     public static FontMetrics fMetrics;
+!     public static int         iRowHeight;
+!     public static int         iIndentWidth;
+!     public int                iMaxTextLength;
+  
+      // drawing
+!     public Dimension dMinimum;
+!     public Graphics  gImage;
+!     public Image     iImage;
+  
+      // height / width
+!     public int iWidth, iHeight;
+!     public int iFirstRow;
+!     public int iTreeWidth, iTreeHeight;
+!     public int iX, iY;
+  
+      // data
+!     public Vector vData;
+!     public int    iRowCount;
+  
+      // scrolling
+!     public Scrollbar sbHoriz, sbVert;
+!     public int       iSbWidth, iSbHeight;
+  
+      static {
+          fFont        = new Font("Dialog", Font.PLAIN, 12);
+***************
+*** 543,549 ****
+       *
+       * @return
+       */
+!     private static int getMaxHeight(FontMetrics f) {
+          return f.getHeight() + 2;
+      }
+  }
+--- 543,549 ----
+       *
+       * @return
+       */
+!     public static int getMaxHeight(FontMetrics f) {
+          return f.getHeight() + 2;
+      }
+  }
+diff -cr misc/hsqldb/src/org/hsqldb/util/ZaurusChoice.java misc/build/hsqldb/src/org/hsqldb/util/ZaurusChoice.java
+*** misc/hsqldb/src/org/hsqldb/util/ZaurusChoice.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ZaurusChoice.java	2005-06-30 03:53:41.000000000 -0400
+***************
+*** 52,58 ****
+  // getContent() answers the value !!
+  public class ZaurusChoice extends Choice implements ZaurusComponent {
+  
+!     private static final int MaxLenInZChoice = 15;
+      Vector                   values;
+      int                      countChanges;
+  
+--- 52,58 ----
+  // getContent() answers the value !!
+  public class ZaurusChoice extends Choice implements ZaurusComponent {
+  
+!     public static final int MaxLenInZChoice = 15;
+      Vector                   values;
+      int                      countChanges;
+  
+***************
+*** 118,124 ****
+      }
+  
+      // find for a given value the index in values
+!     private int findValue(String s) {
+  
+          for (int i = 0; i < values.size(); i++) {
+              if (s.equals(values.elementAt(i))) {
+--- 118,124 ----
+      }
+  
+      // find for a given value the index in values
+!     public int findValue(String s) {
+  
+          for (int i = 0; i < values.size(); i++) {
+              if (s.equals(values.elementAt(i))) {
+diff -cr misc/hsqldb/src/org/hsqldb/util/ZaurusConnectionDialog.java misc/build/hsqldb/src/org/hsqldb/util/ZaurusConnectionDialog.java
+*** misc/hsqldb/src/org/hsqldb/util/ZaurusConnectionDialog.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ZaurusConnectionDialog.java	2005-06-30 03:53:42.000000000 -0400
+***************
+*** 251,257 ****
+       *
+       *
+       */
+!     protected void finishCreate() {
+  
+          try {
+              mConnection = createConnection(mDriver.getText(), mURL.getText(),
+--- 251,257 ----
+       *
+       *
+       */
+!     public void finishCreate() {
+  
+          try {
+              mConnection = createConnection(mDriver.getText(), mURL.getText(),
+diff -cr misc/hsqldb/src/org/hsqldb/util/ZaurusDatabaseManager.java misc/build/hsqldb/src/org/hsqldb/util/ZaurusDatabaseManager.java
+*** misc/hsqldb/src/org/hsqldb/util/ZaurusDatabaseManager.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ZaurusDatabaseManager.java	2005-06-30 03:53:42.000000000 -0400
+***************
+*** 247,253 ****
+          m.connect(c);
+      }
+  
+!     private static void showUsage() {
+  
+          System.out.println(
+              "Usage: java org.hsqldb.util.ZaurusDatabaseManager [options]");
+--- 247,253 ----
+          m.connect(c);
+      }
+  
+!     public static void showUsage() {
+  
+          System.out.println(
+              "Usage: java org.hsqldb.util.ZaurusDatabaseManager [options]");
+***************
+*** 587,593 ****
+       * Method declaration
+       *
+       */
+!     private void initGUI() {
+  
+          Panel pQuery   = new Panel();
+          Panel pCommand = new Panel();
+--- 587,593 ----
+       * Method declaration
+       *
+       */
+!     public void initGUI() {
+  
+          Panel pQuery   = new Panel();
+          Panel pCommand = new Panel();
+***************
+*** 663,669 ****
+          fMain.pack();
+      }
+  
+!     protected void refreshTree() {
+          super.refreshTree();
+          eEditor.refresh(cConn);
+      }
+--- 663,669 ----
+          fMain.pack();
+      }
+  
+!     public void refreshTree() {
+          super.refreshTree();
+          eEditor.refresh(cConn);
+      }
+diff -cr misc/hsqldb/src/org/hsqldb/util/ZaurusEditor.java misc/build/hsqldb/src/org/hsqldb/util/ZaurusEditor.java
+*** misc/hsqldb/src/org/hsqldb/util/ZaurusEditor.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ZaurusEditor.java	2005-06-30 03:53:42.000000000 -0400
+***************
+*** 401,407 ****
+          }
+      }
+  
+!     private void initGUI() {
+  
+          // without connection there are no tables
+          // vAllTables is a local variable with all table names in the database
+--- 401,407 ----
+          }
+      }
+  
+!     public void initGUI() {
+  
+          // without connection there are no tables
+          // vAllTables is a local variable with all table names in the database
+***************
+*** 565,575 ****
+  
+      // process the buttons events
+      // *******************************************************
+!     // private methods
+      // *******************************************************
+      // read all table names over the current database connection
+      // exclude tables without primary key
+!     private Vector getAllTables() {
+  
+          Vector result = new Vector(20);
+  
+--- 565,575 ----
+  
+      // process the buttons events
+      // *******************************************************
+!     // public methods
+      // *******************************************************
+      // read all table names over the current database connection
+      // exclude tables without primary key
+!     public Vector getAllTables() {
+  
+          Vector result = new Vector(20);
+  
+***************
+*** 608,614 ****
+  
+      // determine the index of the choosen table in Vector vHoldTableNames
+      // if the table name is not in vHoldTableNames, create a ZaurusTableForm for it
+!     private int getChoosenTableIndex() {
+  
+          String tableName = cTables.getSelectedItem();
+  
+--- 608,614 ----
+  
+      // determine the index of the choosen table in Vector vHoldTableNames
+      // if the table name is not in vHoldTableNames, create a ZaurusTableForm for it
+!     public int getChoosenTableIndex() {
+  
+          String tableName = cTables.getSelectedItem();
+  
+***************
+*** 633,639 ****
+  
+      // determine the index of the given tableName in Vector vHoldTableNames
+      // if the name is not in vHoldTableNames, answer -1
+!     private int getTableIndex(String tableName) {
+  
+          int index;
+  
+--- 633,639 ----
+  
+      // determine the index of the given tableName in Vector vHoldTableNames
+      // if the name is not in vHoldTableNames, answer -1
+!     public int getTableIndex(String tableName) {
+  
+          int index;
+  
+***************
+*** 650,656 ****
+      }
+  
+      // convert the search words in the textfield to an array of words
+!     private String[] getWords() {
+  
+          StringTokenizer tokenizer =
+              new StringTokenizer(fSearchWords.getText());
+--- 650,656 ----
+      }
+  
+      // convert the search words in the textfield to an array of words
+!     public String[] getWords() {
+  
+          StringTokenizer tokenizer =
+              new StringTokenizer(fSearchWords.getText());
+***************
+*** 665,671 ****
+      }
+  
+      // init the three boxes for buttons
+!     private void initButtons() {
+  
+          // the buttons for the search form
+          bSearchRow = new Button("Search Rows");
+--- 665,671 ----
+      }
+  
+      // init the three boxes for buttons
+!     public void initButtons() {
+  
+          // the buttons for the search form
+          bSearchRow = new Button("Search Rows");
+***************
+*** 722,728 ****
+  
+      // check whether the last button pressed was delete
+      // if so, clear status line and reset the flag
+!     private void resetLastButtonDelete() {
+  
+          if (lastButtonDelete) {
+              ZaurusEditor.printStatus("");
+--- 722,728 ----
+  
+      // check whether the last button pressed was delete
+      // if so, clear status line and reset the flag
+!     public void resetLastButtonDelete() {
+  
+          if (lastButtonDelete) {
+              ZaurusEditor.printStatus("");
+***************
+*** 732,738 ****
+      }
+  
+      // reset  everything after changes in the database
+!     private void resetTableForms() {
+  
+          lForm.show(pForm, "search");
+          lButton.show(pButton, "search");
+--- 732,738 ----
+      }
+  
+      // reset  everything after changes in the database
+!     public void resetTableForms() {
+  
+          lForm.show(pForm, "search");
+          lButton.show(pButton, "search");
+diff -cr misc/hsqldb/src/org/hsqldb/util/ZaurusTableForm.java misc/build/hsqldb/src/org/hsqldb/util/ZaurusTableForm.java
+*** misc/hsqldb/src/org/hsqldb/util/ZaurusTableForm.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/util/ZaurusTableForm.java	2005-06-30 03:53:42.000000000 -0400
+***************
+*** 542,551 ****
+      }
+  
+      // ******************************************************
+!     // private methods
+      // ******************************************************
+      // set all fields for primary keys to not editable
+!     private void disablePKFields() {
+  
+          for (int i = 0; i < primaryKeys.length; i++) {
+              komponente[pkColIndex[i]].setEditable(false);
+--- 542,551 ----
+      }
+  
+      // ******************************************************
+!     // public methods
+      // ******************************************************
+      // set all fields for primary keys to not editable
+!     public void disablePKFields() {
+  
+          for (int i = 0; i < primaryKeys.length; i++) {
+              komponente[pkColIndex[i]].setEditable(false);
+***************
+*** 555,561 ****
+      // fetch all values from a table and a column
+      // fill the ZaurusChoice zc with the row values for the Choice
+      // and the column values as values
+!     private void fillZChoice(ZaurusChoice zc, String tab, String col) {
+  
+          try {
+              if (cConn == null) {
+--- 555,561 ----
+      // fetch all values from a table and a column
+      // fill the ZaurusChoice zc with the row values for the Choice
+      // and the column values as values
+!     public void fillZChoice(ZaurusChoice zc, String tab, String col) {
+  
+          try {
+              if (cConn == null) {
+***************
+*** 590,596 ****
+      }
+  
+      // fetch all column names
+!     private void fetchColumns() {
+  
+          Vector temp     = new Vector(20);
+          Vector tempType = new Vector(20);
+--- 590,596 ----
+      }
+  
+      // fetch all column names
+!     public void fetchColumns() {
+  
+          Vector temp     = new Vector(20);
+          Vector tempType = new Vector(20);
+***************
+*** 628,634 ****
+      }
+  
+      // fetch the imported keys i.e. columns which reference to foreign keys in other tables
+!     private void fetchImportedKeys() {
+  
+          Vector imKeys      = new Vector(20);
+          Vector imKeyNames  = null;
+--- 628,634 ----
+      }
+  
+      // fetch the imported keys i.e. columns which reference to foreign keys in other tables
+!     public void fetchImportedKeys() {
+  
+          Vector imKeys      = new Vector(20);
+          Vector imKeyNames  = null;
+***************
+*** 714,720 ****
+          }
+      }
+  
+!     private void fetchPrimaryKeys() {
+  
+          Vector temp = new Vector(20);
+  
+--- 714,720 ----
+          }
+      }
+  
+!     public void fetchPrimaryKeys() {
+  
+          Vector temp = new Vector(20);
+  
+***************
+*** 749,755 ****
+          }    // end of for (int i=0; i<primaryKeys.length; i++)
+      }
+  
+!     private String generatePKWhere() {
+  
+          String stmtString = " WHERE ";
+  
+--- 749,755 ----
+          }    // end of for (int i=0; i<primaryKeys.length; i++)
+      }
+  
+!     public String generatePKWhere() {
+  
+          String stmtString = " WHERE ";
+  
+***************
+*** 765,771 ****
+      }
+  
+      // generate the Where-condition for the words
+!     private String generateWhere(String[] words, boolean allWords,
+                                   boolean ignoreCase, boolean noMatchWhole) {
+  
+          String result = "";
+--- 765,771 ----
+      }
+  
+      // generate the Where-condition for the words
+!     public String generateWhere(String[] words, boolean allWords,
+                                   boolean ignoreCase, boolean noMatchWhole) {
+  
+          String result = "";
+***************
+*** 822,828 ****
+      }
+  
+      // answer the index of the column named name in the actual table
+!     private int getColIndex(String name) {
+  
+          for (int i = 0; i < columns.length; i++) {
+              if (name.equals(columns[i])) {
+--- 822,828 ----
+      }
+  
+      // answer the index of the column named name in the actual table
+!     public int getColIndex(String name) {
+  
+          for (int i = 0; i < columns.length; i++) {
+              if (name.equals(columns[i])) {
+***************
+*** 834,840 ****
+      }
+  
+      // answer the index of the column named colName in the table tabName
+!     private int getColIndex(String colName, String tabName) {
+  
+          int ordPos = 0;
+  
+--- 834,840 ----
+      }
+  
+      // answer the index of the column named colName in the table tabName
+!     public int getColIndex(String colName, String tabName) {
+  
+          int ordPos = 0;
+  
+***************
+*** 864,870 ****
+  
+      // answer the index of the constraint for the column index
+      // answer -1, if the column is not part of any constraint
+!     private int getConstraintIndex(int colIndex) {
+  
+          for (int i = 0; i < imColIndex.length; i++) {
+              for (int j = 0; j < imColIndex[i].length; j++) {
+--- 864,870 ----
+  
+      // answer the index of the constraint for the column index
+      // answer -1, if the column is not part of any constraint
+!     public int getConstraintIndex(int colIndex) {
+  
+          for (int i = 0; i < imColIndex.length; i++) {
+              for (int j = 0; j < imColIndex[i].length; j++) {
+***************
+*** 877,883 ****
+          return -1;
+      }
+  
+!     private void initGUI() {
+  
+          Panel pEntry = new Panel();
+  
+--- 877,883 ----
+          return -1;
+      }
+  
+!     public void initGUI() {
+  
+          Panel pEntry = new Panel();
+  
+***************
+*** 940,946 ****
+      }
+  
+      // get and show the values of the actual row in the GUI
+!     private void showAktRow() {
+  
+          try {
+              pStmt.clearParameters();
+--- 940,946 ----
+      }
+  
+      // get and show the values of the actual row in the GUI
+!     public void showAktRow() {
+  
+          try {
+              pStmt.clearParameters();
+diff -cr misc/hsqldb/src/org/hsqldb/View.java misc/build/hsqldb/src/org/hsqldb/View.java
+*** misc/hsqldb/src/org/hsqldb/View.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/View.java	2005-06-30 03:53:42.000000000 -0400
+***************
+*** 51,58 ****
+      Table              workingTable;
+      Select             viewSelect;
+      SubQuery           viewSubQuery;
+!     private String     statement;
+!     private HsqlName[] colList;
+  
+      /** schema at the time of compilation */
+      HsqlName compileTimeSchema;
+--- 51,58 ----
+      Table              workingTable;
+      Select             viewSelect;
+      SubQuery           viewSubQuery;
+!     public String     statement;
+!     public HsqlName[] colList;
+  
+      /** schema at the time of compilation */
+      HsqlName compileTimeSchema;
+diff -cr misc/hsqldb/src/org/hsqldb/WebServerConnection.java misc/build/hsqldb/src/org/hsqldb/WebServerConnection.java
+*** misc/hsqldb/src/org/hsqldb/WebServerConnection.java	2005-06-30 03:50:39.000000000 -0400
+--- misc/build/hsqldb/src/org/hsqldb/WebServerConnection.java	2005-06-30 03:53:42.000000000 -0400
+***************
+*** 76,95 ****
+  class WebServerConnection implements Runnable {
+  
+      static final String         ENCODING = "8859_1";
+!     private Socket              socket;
+!     private WebServer           server;
+!     private static final int    REQUEST_TYPE_BAD  = 0;
+!     private static final int    REQUEST_TYPE_GET  = 1;
+!     private static final int    REQUEST_TYPE_HEAD = 2;
+!     private static final int    REQUEST_TYPE_POST = 3;
+!     private static final String HEADER_OK         = "HTTP/1.0 200 OK";
+!     private static final String HEADER_BAD_REQUEST =
+          "HTTP/1.0 400 Bad Request";
+!     private static final String HEADER_NOT_FOUND = "HTTP/1.0 404 Not Found";
+!     private static final String HEADER_FORBIDDEN = "HTTP/1.0 403 Forbidden";
+      static final int            BUFFER_SIZE      = 256;
+!     private RowOutputBinary     rowOut = new RowOutputBinary(BUFFER_SIZE);
+!     private RowInputBinary      rowIn            = new RowInputBinary(rowOut);
+  
+      //
+      static final byte[] BYTES_GET        = "GET".getBytes();
+--- 76,95 ----
+  class WebServerConnection implements Runnable {
+  
+      static final String         ENCODING = "8859_1";
+!     public Socket              socket;
+!     public WebServer           server;
+!     public static final int    REQUEST_TYPE_BAD  = 0;
+!     public static final int    REQUEST_TYPE_GET  = 1;
+!     public static final int    REQUEST_TYPE_HEAD = 2;
+!     public static final int    REQUEST_TYPE_POST = 3;
+!     public static final String HEADER_OK         = "HTTP/1.0 200 OK";
+!     public static final String HEADER_BAD_REQUEST =
+          "HTTP/1.0 400 Bad Request";
+!     public static final String HEADER_NOT_FOUND = "HTTP/1.0 404 Not Found";
+!     public static final String HEADER_FORBIDDEN = "HTTP/1.0 403 Forbidden";
+      static final int            BUFFER_SIZE      = 256;
+!     public RowOutputBinary     rowOut = new RowOutputBinary(BUFFER_SIZE);
+!     public RowInputBinary      rowIn            = new RowInputBinary(rowOut);
+  
+      //
+      static final byte[] BYTES_GET        = "GET".getBytes();
+***************
+*** 101,107 ****
+      };
+  
+      // default mime type mappings
+!     private static final int hnd_content_types =
+          BundleHandler.getBundleHandle("content_types", null);
+  
+      /**
+--- 101,107 ----
+      };
+  
+      // default mime type mappings
+!     public static final int hnd_content_types =
+          BundleHandler.getBundleHandle("content_types", null);
+  
+      /**
+***************
+*** 125,131 ****
+       * @return a best-guess mime-type string using the file extention
+       *      of the name argument.
+       */
+!     private String getMimeTypeString(String name) {
+  
+          int    pos;
+          String key;
+--- 125,131 ----
+       * @return a best-guess mime-type string using the file extention
+       *      of the name argument.
+       */
+!     public String getMimeTypeString(String name) {
+  
+          int    pos;
+          String key;
+***************
+*** 240,246 ****
+       * POST is used only for database access. So we can assume the strings
+       * are those generated by HTTPClientConnection
+       */
+!     private void processPost(InputStream inStream,
+                               String name) throws HsqlException, IOException {
+  
+          // fredt - parsing in this block is not actually necessary
+--- 240,246 ----
+       * POST is used only for database access. So we can assume the strings
+       * are those generated by HTTPClientConnection
+       */
+!     public void processPost(InputStream inStream,
+                               String name) throws HsqlException, IOException {
+  
+          // fredt - parsing in this block is not actually necessary
+***************
+*** 350,356 ****
+       * @param  name the name of the content to get
+       * @param  send whether to send the content as well, or just the header
+       */
+!     private void processGet(String name, boolean send) {
+  
+          try {
+              String       hdr;
+--- 350,356 ----
+       * @param  name the name of the content to get
+       * @param  send whether to send the content as well, or just the header
+       */
+!     public void processGet(String name, boolean send) {
+  
+          try {
+              String       hdr;
+***************
+*** 452,458 ****
+       *
+       * @param code the error condition code
+       */
+!     private void processError(int code) {
+  
+          String msg;
+  
+--- 452,458 ----
+       *
+       * @param code the error condition code
+       */
+!     public void processError(int code) {
+  
+          String msg;
+  
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/build/build.xml.orig	2005-06-26 19:20:30.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/build/build.xml	2005-07-19 20:32:09.000000000 +0200
@@ -16,13 +16,8 @@
    <property file='build/build.properties'/>
    <property name="hsqldb.version" value="1.8.0"/>
 
-   <tstamp>
-       <format property="_tmpstamp" pattern="yyyy/MM/dd-hh:mm:ss"
-               locale="en"/>
-   </tstamp>
-
-   <property name="build.label" value="private-${_tmpstamp}"/>
-   <property name="build.vendor" value="${user.name}"/>
+   <property name="build.label" value="replace-me"/>
+   <property name="build.vendor" value="OpenOffice.org"/>
    <property name="hsqldb.title" value="HSQLDB"/>
    <property name="hsqldb.vendor" value="The HSQLDB Development Group"/>
    <property name="src" value="${basedir}/src"/>
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcCallableStatement.java.orig	2005-03-02 14:50:49.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcCallableStatement.java	2005-07-19 19:41:44.000000000 +0200
@@ -296,11 +296,11 @@
 implements CallableStatement {
 
     /** parameter name => parameter index */
-    private IntValueHashMap parameterNameMap;
+    public IntValueHashMap parameterNameMap;
 
     /** parameter index => registered OUT type */
 
-    //    private IntKeyIntValueHashMap outRegistrationMap;
+    //    public IntKeyIntValueHashMap outRegistrationMap;
 
     /**
      * Constructs a new jdbcCallableStatement with the specified connection and
@@ -385,7 +385,7 @@
      * @param i the one-based column index to check
      * @throws SQLException if there is no such OUT or IN OUT column
      */
-    private void checkGetParameterIndex(int i) throws SQLException {
+    public void checkGetParameterIndex(int i) throws SQLException {
 
         checkClosed();
 
@@ -421,7 +421,7 @@
      * @throws SQLException if not registered
      */
     /*
-    private void checkIsRegisteredParameterIndex(int parameterIndex)
+    public void checkIsRegisteredParameterIndex(int parameterIndex)
     throws SQLException {
 
         int    type;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcColumnMetaData.java.orig	2005-03-02 14:50:49.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcColumnMetaData.java	2005-07-19 19:41:44.000000000 +0200
@@ -126,7 +126,7 @@
      *
      * @return a Sring representation of this object
      */
-    private String toStringImpl() throws Exception {
+    public String toStringImpl() throws Exception {
 
         StringBuffer sb;
         Field[]      fields;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcConnection.java.orig	2005-06-08 00:24:18.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcConnection.java	2005-07-19 19:41:44.000000000 +0200
@@ -422,7 +422,7 @@
     boolean isInternal;
 
     /** Is this connection to a network server instance. */
-    protected boolean isNetConn;
+    public boolean isNetConn;
 
     /**
      * Is this connection closed?
@@ -430,10 +430,10 @@
     boolean isClosed;
 
     /** The first warning in the chain. Null if there are no warnings. */
-    private SQLWarning rootWarning;
+    public SQLWarning rootWarning;
 
     /** Synchronizes concurrent modification of the warning chain */
-    private Object rootWarning_mutex = new Object();
+    public Object rootWarning_mutex = new Object();
 
     /**
      * The set of open Statement objects returned by this Connection from
@@ -441,7 +441,7 @@
      * used solely for closing the statements when this Connection is closed.
      */
     /*
-    private org.hsqldb.lib.HashSet statementSet =
+    public org.hsqldb.lib.HashSet statementSet =
         new org.hsqldb.lib.HashSet();
      */
 
@@ -2504,7 +2504,7 @@
      *  The default implementation simply attempts to silently {@link
      *  #close() close()} this <code>Connection</code>
      */
-    protected void finalize() {
+    public void finalize() {
 
         try {
             close();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java.orig	2005-06-14 19:58:08.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java	2005-07-19 19:41:44.000000000 +0200
@@ -283,19 +283,19 @@
     static final Integer INT_COLUMNS_NO_NULLS = new Integer(columnNoNulls);
 
     // -----------------------------------------------------------------------
-    // private attributes
+    // public attributes
     // -----------------------------------------------------------------------
 
     /**
      * The connection this object uses to retrieve database instance-specific
      * metadata.
      */
-    private jdbcConnection connection;
+    public jdbcConnection connection;
 
     /**
      * Connection property for schema reporting.
      */
-    private boolean useSchemaDefault;
+    public boolean useSchemaDefault;
 
     /**
      * A CSV list representing the SQL IN list to use when generating
@@ -303,7 +303,7 @@
      * <code>scope</code> argument is <code>bestRowSession</code>.
      * @since HSQLDB 1.7.2
      */
-    private static final String BRI_SESSION_SCOPE_IN_LIST = "("
+    public static final String BRI_SESSION_SCOPE_IN_LIST = "("
         + bestRowSession + ")";
 
     /**
@@ -312,7 +312,7 @@
      * <code>scope</code> argument is <code>bestRowTemporary</code>.
      * @since HSQLDB 1.7.2
      */
-    private static final String BRI_TEMPORARY_SCOPE_IN_LIST = "("
+    public static final String BRI_TEMPORARY_SCOPE_IN_LIST = "("
         + bestRowTemporary + "," + bestRowTransaction + "," + bestRowSession
         + ")";
 
@@ -322,7 +322,7 @@
      * <code>scope</code> argument is <code>bestRowTransaction</code>.
      * @since HSQLDB 1.7.2
      */
-    private static final String BRI_TRANSACTION_SCOPE_IN_LIST = "("
+    public static final String BRI_TRANSACTION_SCOPE_IN_LIST = "("
         + bestRowTransaction + "," + bestRowSession + ")";
 
     /**
@@ -333,7 +333,7 @@
      *
      * @since HSQLDB 1.7.2
      */
-    private static final String selstar = "SELECT * FROM INFORMATION_SCHEMA.";
+    public static final String selstar = "SELECT * FROM INFORMATION_SCHEMA.";
 
     /**
      * " WHERE 1=1 ". <p>
@@ -348,7 +348,7 @@
      * end of this and Presto! Everything works :-) <p>
      * @since HSQLDB 1.7.2
      */
-    private static final String whereTrue = " WHERE 1=1";
+    public static final String whereTrue = " WHERE 1=1";
 
     //----------------------------------------------------------------------
     // First, a variety of minor information about the target database.
@@ -5471,7 +5471,7 @@
      *
      *      </UL>
      */
-    private static String and(String id, String op, Object val) {
+    public static String and(String id, String op, Object val) {
 
         // The JDBC standard for pattern arguments seems to be:
         //
@@ -5547,7 +5547,7 @@
      * @return the result of issuing the statement
      * @throws SQLException is a database error occurs
      */
-    private ResultSet execute(String sql) throws SQLException {
+    public ResultSet execute(String sql) throws SQLException {
 
         // NOTE:
         // Need to create a jdbcStatement here so jdbcResultSet can return
@@ -5583,7 +5583,7 @@
      * @param where the where condition for the select
      * @throws SQLException if database error occurs
      */
-    private ResultSet executeSelect(String table,
+    public ResultSet executeSelect(String table,
                                     String where) throws SQLException {
 
         String select = selstar + table;
@@ -5607,7 +5607,7 @@
      *      "SELECT * FROM &lt;table&gt; WHERE 1=1"
      * @param t the name of the table
      */
-    private StringBuffer toQueryPrefix(String t) {
+    public StringBuffer toQueryPrefix(String t) {
 
         StringBuffer sb = new StringBuffer(255);
 
@@ -5623,7 +5623,7 @@
      * @return true if the argument, s, is filter paramter value that
      *        requires a corresponding IS NULL predicate
      */
-    private static boolean wantsIsNull(String s) {
+    public static boolean wantsIsNull(String s) {
         return (s != null && s.length() == 0);
     }
 
@@ -5632,7 +5632,7 @@
      * is present, any DatabaseMetaData call with an empty string as the
      * schema parameter will use the default schema (noramlly "PUBLIC").
      */
-    private String translateSchema(String schemaName) throws SQLException {
+    public String translateSchema(String schemaName) throws SQLException {
 
         if (useSchemaDefault && schemaName != null
                 && schemaName.length() == 0) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcDataSource.java.orig	2005-03-02 14:50:50.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcDataSource.java	2005-07-19 19:41:44.000000000 +0200
@@ -97,27 +97,27 @@
     /**
      * Login timeout
      */
-    private int loginTimeout = 0;
+    public int loginTimeout = 0;
 
     /**
      * Log writer
      */
-    private transient PrintWriter logWriter;
+    public transient PrintWriter logWriter;
 
     /**
      * Default password to use for connections
      */
-    private String password = "";
+    public String password = "";
 
     /**
      * Default user to use for connections
      */
-    private String user = "";
+    public String user = "";
 
     /**
      * Database location
      */
-    private String database = "";
+    public String database = "";
 
     /**
      * Constructor
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcParameterMetaData.java.orig	2005-03-02 14:50:50.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcParameterMetaData.java	2005-07-19 19:41:44.000000000 +0200
@@ -314,7 +314,7 @@
      * @return a String representation of this object
      * @throws Exception if a reflection error occurs
      */
-    private String toStringImpl() throws Exception {
+    public String toStringImpl() throws Exception {
 
         StringBuffer sb;
         Method[]     methods;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcPreparedStatement.java.orig	2005-05-16 03:30:18.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcPreparedStatement.java	2005-07-19 19:41:44.000000000 +0200
@@ -207,38 +207,38 @@
 implements PreparedStatement {
 
     /** The parameter values for the next non-batch execution. */
-    protected Object[] parameterValues;
+    public Object[] parameterValues;
 
     /** The SQL types of the parameters. */
-    protected int[] parameterTypes;
+    public int[] parameterTypes;
 
     /** The (IN, IN OUT, or OUT) modes of parameters */
-    protected int[] parameterModes;
+    public int[] parameterModes;
 
     /** Lengths for streams. */
-    protected int[] streamLengths;
+    public int[] streamLengths;
 
     /** Has a stream or CLOB / BLOB parameter value. */
-    protected boolean hasStreams;
+    public boolean hasStreams;
 
     /**
      * Description of result set metadata. <p>
      */
-    protected Result rsmdDescriptor;
+    public Result rsmdDescriptor;
 
     /** Description of parameter metadata. */
-    protected Result pmdDescriptor;
+    public Result pmdDescriptor;
 
     /** This object's one and one ResultSetMetaData object. */
-    protected jdbcResultSetMetaData rsmd;
+    public jdbcResultSetMetaData rsmd;
 
 // NOTE:  pmd is declared as Object to avoid yet another #ifdef.
 
     /** This object's one and only ParameterMetaData object. */
-    protected Object pmd;
+    public Object pmd;
 
     /** The SQL character sequence that this object represents. */
-    protected String sql;
+    public String sql;
 
     /**
      * The id with which this object's corresponding
@@ -247,13 +247,13 @@
      * {@link org.hsqldb.CompiledStatementManager CompiledStatementManager}
      * object.
      */
-    protected int statementID;
+    public int statementID;
 
     /**
      * Whether this statement generates only a single row update count in
      * response to execution.
      */
-    protected boolean isRowCount;
+    public boolean isRowCount;
 
 // fredt@users 20020215 - patch 517028 by peterhudson@users - method defined
 // fredt@users 20020215 - patch 517028 by peterhudson@users - method defined
@@ -1885,7 +1885,7 @@
      *      something other than a single row update count.
      * @throws SQLException if the argument, yes, does not match
      */
-    protected void checkIsRowCount(boolean yes) throws SQLException {
+    public void checkIsRowCount(boolean yes) throws SQLException {
 
         if (yes != isRowCount) {
             int msg = yes ? Trace.JDBC_STATEMENT_NOT_ROW_COUNT
@@ -1902,7 +1902,7 @@
      * @param i The parameter index to check
      * @throws SQLException if the specified parameter index is invalid
      */
-    protected void checkSetParameterIndex(int i) throws SQLException {
+    public void checkSetParameterIndex(int i) throws SQLException {
 
         int    mode;
         String msg;
@@ -1941,7 +1941,7 @@
      * @param o object
      * @throws SQLException if either argument is not acceptable.
      */
-    private void setParameter(int i, Object o) throws SQLException {
+    public void setParameter(int i, Object o) throws SQLException {
 
         checkSetParameterIndex(i);
 
@@ -2023,7 +2023,7 @@
      * @param value object to set
      * @throws SQLException if either argument is not acceptable
      */
-    private void setIntParameter(int i, int value) throws SQLException {
+    public void setIntParameter(int i, int value) throws SQLException {
 
         checkSetParameterIndex(i);
 
@@ -2052,7 +2052,7 @@
      * @param value object to set
      * @throws SQLException if either argument is not acceptable
      */
-    private void setLongParameter(int i, long value) throws SQLException {
+    public void setLongParameter(int i, long value) throws SQLException {
 
         checkSetParameterIndex(i);
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcResultSet.java.orig	2005-06-08 00:24:20.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcResultSet.java	2005-07-19 19:41:44.000000000 +0200
@@ -412,31 +412,31 @@
     /**
      * The current record containing the data for the row
      */
-    private Record nCurrent;
+    public Record nCurrent;
 
     /** The row upon which this ResultSet is currently positioned. */
-    private int iCurrentRow;
+    public int iCurrentRow;
 
     /** When the result of updating the database, the number of updated rows. */
-    private int iUpdateCount;
+    public int iUpdateCount;
 
     /** Is current row before the first row? */
-    private boolean bInit;    // false if before first row
+    public boolean bInit;    // false if before first row
 
     /** How many columns does this ResultSet have? */
     int iColumnCount;
 
     /** Did the last getXXX method encounter a null value? */
-    private boolean bWasNull;
+    public boolean bWasNull;
 
     /** The ResultSetMetaData object for this ResultSet */
-    private ResultSetMetaData rsmd;
+    public ResultSetMetaData rsmd;
 
     /** Properties of this ResultSet's parent Connection. */
-    private HsqlProperties connProperties;
+    public HsqlProperties connProperties;
 
     /** is the connection via network */
-    private boolean isNetConn;
+    public boolean isNetConn;
 
     /**
      * The Statement that generated this result. Null if the result is
@@ -4862,7 +4862,7 @@
      *
      * @throws  SQLException when no row data is available
      */
-    private void checkAvailable() throws SQLException {
+    public void checkAvailable() throws SQLException {
 
         if (rResult == null ||!bInit || nCurrent == null) {
             throw Util.sqlException(Trace.NO_DATA_IS_AVAILABLE);
@@ -4874,7 +4874,7 @@
      *
      * @throws SQLException when this result set is closed
      */
-    private void checkClosed() throws SQLException {
+    public void checkClosed() throws SQLException {
 
         if (rResult == null
                 || (sqlStatement != null && sqlStatement.isClosed)) {
@@ -4901,7 +4901,7 @@
      *
      * @param  o the Object to track
      */
-    private boolean checkNull(Object o) {
+    public boolean checkNull(Object o) {
 
         if (o == null) {
             bWasNull = true;
@@ -4929,7 +4929,7 @@
      * @throws SQLException when there is no data, the column index is
      *    invalid, or the conversion cannot be performed
      */
-    private Object getColumnInType(int columnIndex,
+    public Object getColumnInType(int columnIndex,
                                    int type) throws SQLException {
 
         checkAvailable();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java.orig	2005-05-20 23:53:23.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java	2005-07-19 19:41:44.000000000 +0200
@@ -97,22 +97,22 @@
      * An array of objects, each of which represents the reported attributes
      * for  a single column of this object's parent ResultSet.
      */
-    private jdbcColumnMetaData[] columnMetaData;
+    public jdbcColumnMetaData[] columnMetaData;
 
     /** The number of columns in this object's parent ResultSet. */
-    private int columnCount;
+    public int columnCount;
 
     /**
      * Whether to use the underlying column name or label when reporting
      * getColumnName().
      */
-    private boolean useColumnName;
+    public boolean useColumnName;
 
     /**
      * If true, then timings for init() are printed
      * to the console.
      */
-    private static final boolean TRACE = false;
+    public static final boolean TRACE = false;
 
     /**
      * Constructs a new jdbcResultSetMetaData object from the specified
@@ -1137,7 +1137,7 @@
      * @throws SQLException when this object's parent ResultSet has
      *      no such column
      */
-    private void checkColumn(int column) throws SQLException {
+    public void checkColumn(int column) throws SQLException {
 
         if (column < 1 || column > columnCount) {
             throw Util.sqlException(Trace.COLUMN_NOT_FOUND,
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcStatement.java.orig	2005-03-07 14:34:48.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/jdbc/jdbcStatement.java	2005-07-19 19:41:44.000000000 +0200
@@ -136,25 +136,25 @@
     volatile boolean isClosed;
 
     /** Is escape processing enabled? */
-    private boolean isEscapeProcessing = true;
+    public boolean isEscapeProcessing = true;
 
     /** The connection used to execute this statement. */
-    protected jdbcConnection connection;
+    public jdbcConnection connection;
 
     /** The maximum number of rows to generate when executing this statement. */
-    protected int maxRows;
+    public int maxRows;
 
     /** The result of executing this statement. */
-    protected Result resultIn;
+    public Result resultIn;
 
     /** The result set type obtained by executing this statement. */
-    protected int rsType = jdbcResultSet.TYPE_FORWARD_ONLY;
+    public int rsType = jdbcResultSet.TYPE_FORWARD_ONLY;
 
     /** Used by this statement to communicate non-batched requests. */
-    protected Result resultOut = new Result(ResultConstants.SQLEXECDIRECT);
+    public Result resultOut = new Result(ResultConstants.SQLEXECDIRECT);
 
     /** Use by this statement to communicate batched execution requests */
-    protected Result batchResultOut = null;
+    public Result batchResultOut = null;
 
     // boucherb@users
     // NOTE:
@@ -1559,7 +1559,7 @@
      * @param sql a character sequence representing the SQL to be executed
      * @throws SQLException when a database access error occurs
      */
-    private void fetchResult(String sql) throws SQLException {
+    public void fetchResult(String sql) throws SQLException {
 
         if (isEscapeProcessing) {
             sql = connection.nativeSQL(sql);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/ArrayUtil.java.orig	2005-06-08 18:33:13.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/ArrayUtil.java	2005-07-19 19:41:44.000000000 +0200
@@ -51,7 +51,7 @@
     public static final int        CLASS_CODE_OBJECT  = 'L';
     public static final int        CLASS_CODE_SHORT   = 'S';
     public static final int        CLASS_CODE_BOOLEAN = 'Z';
-    private static IntValueHashMap classCodeMap       = new IntValueHashMap();
+    public static IntValueHashMap classCodeMap       = new IntValueHashMap();
 
     static {
         classCodeMap.put(byte.class, ArrayUtil.CLASS_CODE_BYTE);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/BaseList.java.orig	2005-05-11 15:39:02.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/BaseList.java	2005-07-19 19:41:44.000000000 +0200
@@ -42,7 +42,7 @@
  */
 abstract class BaseList {
 
-    protected int elementCount;
+    public int elementCount;
 
     abstract Object get(int index);
 
@@ -135,7 +135,7 @@
         return new BaseListIterator();
     }
 
-    private class BaseListIterator implements Iterator {
+    public class BaseListIterator implements Iterator {
 
         int     counter = 0;
         boolean removed;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java.orig	2005-03-02 14:50:52.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java	2005-07-19 19:41:44.000000000 +0200
@@ -52,17 +52,17 @@
  */
 public class DoubleIntIndex implements IntLookup {
 
-    private int           count = 0;
-    private int           capacity;
-    private boolean       sorted       = true;
-    private boolean       sortOnValues = true;
-    private boolean       hasChanged;
-    private final boolean fixedSize;
-    private int[]         keys;
-    private int[]         values;
+    public int           count = 0;
+    public int           capacity;
+    public boolean       sorted       = true;
+    public boolean       sortOnValues = true;
+    public boolean       hasChanged;
+    public final boolean fixedSize;
+    public int[]         keys;
+    public int[]         values;
 
 //
-    private int targetSearchValue;
+    public int targetSearchValue;
 
     public DoubleIntIndex(int capacity, boolean fixedSize) {
 
@@ -395,7 +395,7 @@
      * or -1
      * @return index or -1 if not found
      */
-    private int binaryFirstSearch() {
+    public int binaryFirstSearch() {
 
         int low     = 0;
         int high    = count;
@@ -425,7 +425,7 @@
      * Returns the index of the lowest element > the given search target
      *     @return the index
      */
-    private int binaryGreaterSearch() {
+    public int binaryGreaterSearch() {
 
         int low     = 0;
         int high    = count;
@@ -452,7 +452,7 @@
      * or count
      *     @return the index
      */
-    private int binarySlotSearch() {
+    public int binarySlotSearch() {
 
         int low     = 0;
         int high    = count;
@@ -478,7 +478,7 @@
      * or count or -1 if target is found
      * @return the index
      */
-    private int binaryEmptySlotSearch() {
+    public int binaryEmptySlotSearch() {
 
         int low     = 0;
         int high    = count;
@@ -501,7 +501,7 @@
         return low;
     }
 
-    private synchronized void fastQuickSort() {
+    public synchronized void fastQuickSort() {
 
         quickSort(0, count - 1);
         insertionSort(0, count - 1);
@@ -509,7 +509,7 @@
         sorted = true;
     }
 
-    private void quickSort(int l, int r) {
+    public void quickSort(int l, int r) {
 
         int M = 4;
         int i;
@@ -556,7 +556,7 @@
         }
     }
 
-    private void insertionSort(int lo0, int hi0) {
+    public void insertionSort(int lo0, int hi0) {
 
         int i;
         int j;
@@ -574,7 +574,7 @@
         }
     }
 
-    private void moveAndInsertRow(int i, int j) {
+    public void moveAndInsertRow(int i, int j) {
 
         int col1 = keys[i];
         int col2 = values[i];
@@ -585,14 +585,14 @@
         values[j] = col2;
     }
 
-    private void doubleCapacity() {
+    public void doubleCapacity() {
 
         keys     = (int[]) ArrayUtil.resizeArray(keys, capacity * 2);
         values   = (int[]) ArrayUtil.resizeArray(values, capacity * 2);
         capacity *= 2;
     }
 
-    private void swap(int i1, int i2) {
+    public void swap(int i1, int i2) {
 
         int col1 = keys[i1];
         int col2 = values[i1];
@@ -603,7 +603,7 @@
         values[i2] = col2;
     }
 
-    private void moveRows(int fromIndex, int toIndex, int rows) {
+    public void moveRows(int fromIndex, int toIndex, int rows) {
         System.arraycopy(keys, fromIndex, keys, toIndex, rows);
         System.arraycopy(values, fromIndex, values, toIndex, rows);
     }
@@ -631,7 +631,7 @@
      * @param i the index
      * @return -1, 0 or +1
      */
-    private int compare(int i) {
+    public int compare(int i) {
 
         if (sortOnValues) {
             if (targetSearchValue > values[i]) {
@@ -668,7 +668,7 @@
      * @param j the second index
      * @return true or false
      */
-    private boolean lessThan(int i, int j) {
+    public boolean lessThan(int i, int j) {
 
         if (sortOnValues) {
             if (values[i] < values[j]) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HashMappedList.java.orig	2005-05-11 15:39:02.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HashMappedList.java	2005-07-19 19:41:44.000000000 +0200
@@ -182,7 +182,7 @@
         return getLookup(key, key.hashCode());
     }
 
-    private void checkRange(int i) {
+    public void checkRange(int i) {
 
         if (i < 0 || i >= size()) {
             throw new IndexOutOfBoundsException();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlArrayHeap.java.orig	2005-03-02 14:50:52.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlArrayHeap.java	2005-07-19 19:41:44.000000000 +0200
@@ -43,9 +43,9 @@
 public class HsqlArrayHeap implements HsqlHeap {
 
 // --------------------------------- members -----------------------------------
-    protected ObjectComparator oc;
-    protected int              count;
-    protected Object[]         heap;
+    public ObjectComparator oc;
+    public int              count;
+    public Object[]         heap;
 
 // ------------------------------ constructors ---------------------------------
 
@@ -311,7 +311,7 @@
 //        System.arraycopy(oldheap, 0, heap, 0, count);
 //    }
 // -------------------- internal implementation methods ------------------------
-    private void increaseCapacity() {
+    public void increaseCapacity() {
 
         Object[] oldheap;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java.orig	2005-06-26 18:28:52.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java	2005-07-19 19:41:44.000000000 +0200
@@ -47,12 +47,12 @@
 
 //fredt@users
 /*
-    private static Reporter reporter = new Reporter();
+    public static Reporter reporter = new Reporter();
 
-    private static class Reporter {
+    public static class Reporter {
 
-        private static int initCounter   = 0;
-        private static int updateCounter = 0;
+        public static int initCounter   = 0;
+        public static int updateCounter = 0;
 
         Reporter() {
 
@@ -61,7 +61,7 @@
             } catch (SecurityException e) {}
         }
 
-        protected void finalize() {
+        public void finalize() {
 
             System.out.println("HsqlArrayList init count: " + initCounter);
             System.out.println("HsqlArrayList update count: "
@@ -69,10 +69,10 @@
         }
     }
 */
-    private static final int   DEFAULT_INITIAL_CAPACITY = 10;
-    private static final float DEFAULT_RESIZE_FACTOR    = 2.0f;
-    private Object[]           elementData;
-    private boolean            minimizeOnClear;
+    public static final int   DEFAULT_INITIAL_CAPACITY = 10;
+    public static final float DEFAULT_RESIZE_FACTOR    = 2.0f;
+    public Object[]           elementData;
+    public boolean            minimizeOnClear;
 
     /** Creates a new instance of HsqlArrayList */
     public HsqlArrayList() {
@@ -236,7 +236,7 @@
         return elementCount;
     }
 
-    private void increaseCapacity() {
+    public void increaseCapacity() {
 
         Object[] newArray =
             new Object[(int) (elementData.length * DEFAULT_RESIZE_FACTOR)];
@@ -257,7 +257,7 @@
 
         Enumeration en = new Enumeration() {
 
-            private int pos = 0;
+            public int pos = 0;
 
             public Object nextElement() {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlByteArrayInputStream.java.orig	2005-03-02 14:50:52.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlByteArrayInputStream.java	2005-07-19 19:41:44.000000000 +0200
@@ -47,10 +47,10 @@
 public class HsqlByteArrayInputStream extends InputStream
 implements DataInput {
 
-    protected byte[] buf;
-    protected int    pos;
-    protected int    mark = 0;
-    protected int    count;
+    public byte[] buf;
+    public int    pos;
+    public int    mark = 0;
+    public int    count;
 
     public HsqlByteArrayInputStream(byte[] buf) {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java.orig	2005-06-08 19:44:38.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java	2005-07-19 19:41:44.000000000 +0200
@@ -48,8 +48,8 @@
 public class HsqlByteArrayOutputStream extends java.io.OutputStream
 implements DataOutput {
 
-    protected byte[] buf;
-    protected int    count;
+    public byte[] buf;
+    public int    count;
 
     public HsqlByteArrayOutputStream() {
         this(128);
@@ -253,7 +253,7 @@
         return this.buf;
     }
 
-    protected void ensureRoom(int extra) {
+    public void ensureRoom(int extra) {
 
         int newcount = count + extra;
 
@@ -267,7 +267,7 @@
         }
     }
 
-    protected void reset(int newSize) {
+    public void reset(int newSize) {
 
         count = 0;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlDeque.java.orig	2005-03-02 14:50:52.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlDeque.java	2005-07-19 19:41:44.000000000 +0200
@@ -47,13 +47,13 @@
  */
 public class HsqlDeque extends BaseList implements HsqlList {
 
-    private Object[] list;
-    private int      firstindex = 0;    // index of first list element
-    private int      endindex   = 0;    // index of last list element + 1
+    public Object[] list;
+    public int      firstindex = 0;    // index of first list element
+    public int      endindex   = 0;    // index of last list element + 1
 
     // can grow to fill list
     // if elementCount == 0 then firstindex == endindex
-    private static final int DEFAULT_INITIAL_CAPACITY = 10;
+    public static final int DEFAULT_INITIAL_CAPACITY = 10;
 
     public HsqlDeque() {
         list = new Object[DEFAULT_INITIAL_CAPACITY];
@@ -210,7 +210,7 @@
         }
     }
 
-    private int getInternalIndex(int i) throws IndexOutOfBoundsException {
+    public int getInternalIndex(int i) throws IndexOutOfBoundsException {
 
         if (i < 0 || i >= elementCount) {
             throw new IndexOutOfBoundsException();
@@ -225,7 +225,7 @@
         return index;
     }
 
-    private void resetCapacity() {
+    public void resetCapacity() {
 
         if (elementCount < list.length) {
             return;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlLinkedList.java.orig	2005-06-08 19:44:38.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlLinkedList.java	2005-07-19 19:41:44.000000000 +0200
@@ -46,10 +46,10 @@
      * A reference to the head of the list.  It is a dummy head (that is, the
      * Node for index 0 is actually first.next).
      */
-    private Node first;
+    public Node first;
 
     /** A reference to the tail of the list */
-    private Node last;
+    public Node last;
 
     /**
      * Creates a new instance of HsqlLinkedList.
@@ -197,7 +197,7 @@
      * index within the list (0 &lt;= <code>index</code> &lt;
      * <code>size</code>).
      */
-    protected final Node getInternal(int index) {
+    public final Node getInternal(int index) {
 
         //Check preconditions for the index variable
         if (index >= size()) {
@@ -232,7 +232,7 @@
      * jcpeck@users
      * @version 05/24/2002
      */
-    private static class Node {
+    public static class Node {
 
         public Node   next;
         public Object data;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlTaskQueue.java.orig	2005-03-02 14:50:52.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlTaskQueue.java	2005-07-19 19:41:44.000000000 +0200
@@ -43,10 +43,10 @@
 public class HsqlTaskQueue {
 
     /** The thread used to process commands */
-    protected Thread taskRunnerThread;
+    public Thread taskRunnerThread;
 
     /** Special queue element to signal termination */
-    protected static final Runnable SHUTDOWNTASK = new Runnable() {
+    public static final Runnable SHUTDOWNTASK = new Runnable() {
         public void run() {}
     };
 
@@ -55,19 +55,19 @@
      *
      * Once set true, stays true forever
      */
-    protected volatile boolean isShutdown;
+    public volatile boolean isShutdown;
 
     public synchronized Thread getTaskRunnerThread() {
         return taskRunnerThread;
     }
 
-    protected synchronized void clearThread() {
+    public synchronized void clearThread() {
         taskRunnerThread = null;
     }
 
-    protected final HsqlDeque queue = new HsqlDeque();
+    public final HsqlDeque queue = new HsqlDeque();
 
-    protected class TaskRunner implements Runnable {
+    public class TaskRunner implements Runnable {
 
         public void run() {
 
@@ -101,7 +101,7 @@
         }
     }
 
-    protected final TaskRunner taskRunner = new TaskRunner();
+    public final TaskRunner taskRunner = new TaskRunner();
 
     public HsqlTaskQueue() {}
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlThreadFactory.java.orig	2005-06-08 09:47:40.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlThreadFactory.java	2005-07-19 19:41:44.000000000 +0200
@@ -47,7 +47,7 @@
      * The factory implementation.  Typically, this will be the
      * HsqlThreadFactory object itself.
      */
-    protected ThreadFactory factory;
+    public ThreadFactory factory;
 
     /**
      * Constructs a new HsqlThreadFactory that uses itself as the factory
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlTimer.java.orig	2005-06-10 14:48:34.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/HsqlTimer.java	2005-07-19 19:41:44.000000000 +0200
@@ -47,17 +47,17 @@
 public class HsqlTimer implements ObjectComparator {
 
     /** The priority queue for the scheduled tasks. */
-    protected final TaskQueue taskQueue = new TaskQueue(16,
+    public final TaskQueue taskQueue = new TaskQueue(16,
         (ObjectComparator) this);
 
     /** The inner runnable that executes tasks in the background thread. */
-    protected final TaskRunner taskRunner = new TaskRunner();
+    public final TaskRunner taskRunner = new TaskRunner();
 
     /** The background thread. */
-    protected Thread taskRunnerThread;
+    public Thread taskRunnerThread;
 
     /** The factory that procduces the background threads. */
-    protected ThreadFactory threadFactory;
+    public ThreadFactory threadFactory;
 
     /**
      * Constructs a new HsqlTimer using the default thread factory
@@ -359,7 +359,7 @@
      * @param b if true, use fixed rate else use fixed period
      * @return a reference to the scheduled task
      */
-    protected Task addTask(long n, Runnable r, long p, boolean b) {
+    public Task addTask(long n, Runnable r, long p, boolean b) {
 
         Task task;
 
@@ -375,7 +375,7 @@
     }
 
     /** Sets the background thread to null. */
-    protected synchronized void clearThread() {
+    public synchronized void clearThread() {
         taskRunnerThread = null;
     }
 
@@ -385,7 +385,7 @@
      *
      * @return the next task to execute, or null
      */
-    protected synchronized Task nextTask() {
+    public synchronized Task nextTask() {
 
         Task    task;
         long    now;
@@ -452,7 +452,7 @@
      *
      * @return System.currentTimeMillis()
      */
-    private static long now() {
+    public static long now() {
 
         nowCount++;
 
@@ -467,7 +467,7 @@
      * but using an inner class protects the public run method
      * from potential abuse.
      */
-    protected class TaskRunner implements Runnable {
+    public class TaskRunner implements Runnable {
 
         public void run() {
 
@@ -495,7 +495,7 @@
      * for execution by the enclosing HsqlTimer's TaskRunner in a
      * background thread.
      */
-    protected class Task {
+    public class Task {
 
         /** What to run */
         final Runnable runnable;
@@ -504,20 +504,20 @@
         long period;
 
         /** The time this task was last executed, or 0 if never */
-        private long last;
+        public long last;
 
         /** The next time this task is scheduled to execute */
-        private long next;
+        public long next;
 
         /**
          * Whether to remove this task instead of running it
          * the next time it makes its way to the head of the
          * timer queue.
          */
-        private boolean cancelled = false;
+        public boolean cancelled = false;
 
         /** protect the cancelled field under concurrent access */
-        private Object cancel_mutex = new Object();
+        public Object cancel_mutex = new Object();
 
         /**
          * Whether periodic task is sheduled using fixed delay or fixed rate.
@@ -628,7 +628,7 @@
      * only, as there is no public interface to reinsert Task objects after
      * they have been removed.
      */
-    protected class TaskQueue extends HsqlArrayHeap {
+    public class TaskQueue extends HsqlArrayHeap {
 
         /**
          * Constructs a new TaskQueue with the specified initial capacity and
@@ -702,7 +702,7 @@
 //            return name;
 //        }
 //
-//        protected void printstats() {
+//        public void printstats() {
 //            System.out.println(this + " avg. latency: " + (total/(runs-1)));
 //        }
 //    }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java.orig	2005-05-11 15:39:03.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java	2005-07-19 19:41:44.000000000 +0200
@@ -42,8 +42,8 @@
  */
 public class IntKeyIntValueHashMap extends BaseHashMap {
 
-    private Set        keySet;
-    private Collection values;
+    public Set        keySet;
+    public Collection values;
 
     public IntKeyIntValueHashMap() {
         this(16, 0.75f);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java.orig	2005-06-20 12:03:53.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java	2005-07-19 19:41:44.000000000 +0200
@@ -42,8 +42,8 @@
  */
 public class LongKeyIntValueHashMap extends BaseHashMap {
 
-    private Set        keySet;
-    private Collection values;
+    public Set        keySet;
+    public Collection values;
 
     public LongKeyIntValueHashMap() {
         this(16, 0.75f);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/MD5.java.orig	2004-01-12 20:30:40.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/MD5.java	2005-07-19 19:41:44.000000000 +0200
@@ -83,7 +83,7 @@
     /**
      * The jce MD5 message digest generator.
      */
-    private static MessageDigest md5;
+    public static MessageDigest md5;
 
     /**
      * Retrieves a hexidecimal character sequence representing the MD5
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/SimpleLog.java.orig	2005-07-01 20:54:49.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/SimpleLog.java	2005-07-19 19:41:44.000000000 +0200
@@ -45,8 +45,8 @@
  */
 public class SimpleLog {
 
-    private PrintWriter writer;
-    private int         level;
+    public PrintWriter writer;
+    public int         level;
 
     public SimpleLog(String path, int level, boolean useFile) {
 
@@ -63,7 +63,7 @@
         }
     }
 
-    private void makeLog(File file) {
+    public void makeLog(File file) {
 
         try {
             FileUtil.makeParentDirectories(file);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/Sort.java.orig	2005-06-08 00:24:22.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/Sort.java	2005-07-19 19:41:44.000000000 +0200
@@ -146,7 +146,7 @@
     /**
      * Swaps the a'th and b'th elements of the specified Row array.
      */
-    private static void swap(Object[] w, int a, int b) {
+    public static void swap(Object[] w, int a, int b) {
 
         Object t = w[a];
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/StopWatch.java.orig	2005-03-02 14:50:52.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/StopWatch.java	2005-07-19 19:41:44.000000000 +0200
@@ -51,14 +51,14 @@
      * from stopped to running state, as reported
      * by System.currentTimeMillis().
      */
-    private long startTime;
-    private long lastStart;
+    public long startTime;
+    public long lastStart;
 
     /**
      * The accumulated running time of this object since
      * it was last zeroed.
      */
-    private long total;
+    public long total;
 
     /** Flags if this object is started or stopped. */
     boolean running = false;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/StringConverter.java.orig	2005-06-08 19:55:02.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/StringConverter.java	2005-07-19 19:41:44.000000000 +0200
@@ -87,12 +87,12 @@
 // fredt@users 20020328 - patch 1.7.0 by fredt - error trapping
 public class StringConverter {
 
-    private static final byte[] HEXBYTES = {
+    public static final byte[] HEXBYTES = {
         (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4',
         (byte) '5', (byte) '6', (byte) '7', (byte) '8', (byte) '9',
         (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f'
     };
-    private static final String HEXINDEX = "0123456789abcdef0123456789ABCDEF";
+    public static final String HEXINDEX = "0123456789abcdef0123456789ABCDEF";
 
     /**
      * Converts a String into a byte array by using a big-endian two byte
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/StringInputStream.java.orig	2005-03-02 14:50:52.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/StringInputStream.java	2005-07-19 19:41:44.000000000 +0200
@@ -42,10 +42,10 @@
  */
 public class StringInputStream extends InputStream {
 
-    protected int    strOffset  = 0;
-    protected int    charOffset = 0;
-    protected int    available;
-    protected String str;
+    public int    strOffset  = 0;
+    public int    charOffset = 0;
+    public int    available;
+    public String str;
 
     public StringInputStream(String s) {
         str       = s;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/WrapperIterator.java.orig	2005-03-02 14:50:53.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/WrapperIterator.java	2005-07-19 19:41:44.000000000 +0200
@@ -46,17 +46,17 @@
  */
 public class WrapperIterator implements Iterator {
 
-    private static final Object[] emptyelements = new Object[0];
-    private Object[]              elements;
-    private int                   i;
+    public static final Object[] emptyelements = new Object[0];
+    public Object[]              elements;
+    public int                   i;
 
     // chained iterators
-    private boolean  chained;
-    private Iterator it1;
-    private Iterator it2;
+    public boolean  chained;
+    public Iterator it1;
+    public Iterator it2;
 
     /** return only not null elements */
-    private boolean notNull;
+    public boolean notNull;
 
     /**
      * Constructor for an empty iterator. <p>
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/ZipUnzipFile.java.orig	2005-06-08 20:43:06.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/lib/ZipUnzipFile.java	2005-07-19 19:41:44.000000000 +0200
@@ -86,7 +86,7 @@
  */
 public class ZipUnzipFile {
 
-    private static final int COPY_BLOCK_SIZE = 1 << 16;
+    public static final int COPY_BLOCK_SIZE = 1 << 16;
 
     public static void compressFile(String infilename, String outfilename,
                                     FileAccess storage) throws IOException {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/Cache.java.orig	2005-06-26 18:29:37.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/Cache.java	2005-07-19 19:41:44.000000000 +0200
@@ -54,15 +54,15 @@
 public class Cache {
 
     final DataFileCache                  dataFileCache;
-    private int                          capacity;         // number of Rows
-    private long                         bytesCapacity;    // number of bytes
-    private final CachedObjectComparator rowComparator;
+    public int                          capacity;         // number of Rows
+    public long                         bytesCapacity;    // number of bytes
+    public final CachedObjectComparator rowComparator;
 
 //
-    private CachedObject[] rowTable;
+    public CachedObject[] rowTable;
 
 //
-    private final ObjectCacheHashMap cacheMap;
+    public final ObjectCacheHashMap cacheMap;
     long                             cacheBytesLength;
 
     // for testing
@@ -147,7 +147,7 @@
      * in the cache.
      *
      */
-    private void cleanUp() throws IOException {
+    public void cleanUp() throws IOException {
 
         int removeCount = cacheMap.size() / 2;
         int accessTarget = cacheMap.getAccessCountCeiling(removeCount,
@@ -245,7 +245,7 @@
         static final int COMPARE_LAST_ACCESS = 0;
         static final int COMPARE_POSITION    = 1;
         static final int COMPARE_SIZE        = 2;
-        private int      compareType;
+        public int      compareType;
 
         CachedObjectComparator() {}
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/DataFileBlockManager.java.orig	2005-03-02 14:50:53.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/DataFileBlockManager.java	2005-07-19 19:41:44.000000000 +0200
@@ -42,13 +42,13 @@
  */
 public class DataFileBlockManager {
 
-    private DoubleIntIndex lookup;
-    private final int      capacity;
-    private int            midSize;
-    private final int      scale;
-    private long           releaseCount;
-    private long           requestCount;
-    private long           requestSize;
+    public DoubleIntIndex lookup;
+    public final int      capacity;
+    public int            midSize;
+    public final int      scale;
+    public long           releaseCount;
+    public long           requestCount;
+    public long           requestSize;
 
     // reporting vars
     long lostFreeBlockSize;
@@ -127,7 +127,7 @@
         return lostFreeBlockSize;
     }
 
-    private void resetList() {
+    public void resetList() {
 
         if (requestCount != 0) {
             midSize = (int) (requestSize / requestCount);
@@ -142,7 +142,7 @@
         removeBlocks(first);
     }
 
-    private void removeBlocks(int blocks) {
+    public void removeBlocks(int blocks) {
 
         for (int i = 0; i < blocks; i++) {
             lostFreeBlockSize += lookup.getValue(i);
@@ -151,5 +151,5 @@
         lookup.removeRange(0, blocks);
     }
 
-    private void checkIntegrity() throws NullPointerException {}
+    public void checkIntegrity() throws NullPointerException {}
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/DataFileCache.java.orig	2005-07-01 00:04:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/DataFileCache.java	2005-07-19 19:41:44.000000000 +0200
@@ -62,7 +62,7 @@
  */
 public class DataFileCache {
 
-    private FileAccess fa;
+    public FileAccess fa;
 
     // flags
     public static final int FLAG_ISSAVED = 2;
@@ -76,40 +76,40 @@
 
     //
     DataFileBlockManager     freeBlocks;
-    private static final int FREE_BLOCKS_COUNT = 512;
+    public static final int FREE_BLOCKS_COUNT = 512;
 
     //
-    protected String   fileName;
-    protected String   backupFileName;
-    protected Database database;
+    public String   fileName;
+    public String   backupFileName;
+    public Database database;
 
     // this flag is used externally to determine if a backup is required
-    protected boolean fileModified;
-    protected int     cacheFileScale;
+    public boolean fileModified;
+    public int     cacheFileScale;
 
     // post openning constant fields
-    protected boolean cacheReadonly;
+    public boolean cacheReadonly;
 
     // cache operation mode
-    protected boolean storeOnInsert;
+    public boolean storeOnInsert;
 
     //
-    protected int     cachedRowPadding = 8;
-    protected boolean hasRowInfo       = false;
+    public int     cachedRowPadding = 8;
+    public boolean hasRowInfo       = false;
 
     // reusable input / output streams
-    protected RowInputInterface  rowIn;
-    protected RowOutputInterface rowOut;
+    public RowInputInterface  rowIn;
+    public RowOutputInterface rowOut;
 
     //
     public long maxDataFileSize;
 
     //
-    protected Storage dataFile;
-    protected long    fileFreePosition;
-    protected int     maxCacheSize;             // number of Rows
-    protected long    maxCacheBytes;            // number of bytes
-    protected Cache   cache;
+    public Storage dataFile;
+    public long    fileFreePosition;
+    public int     maxCacheSize;             // number of Rows
+    public long    maxCacheBytes;            // number of bytes
+    public Cache   cache;
 
     public DataFileCache(Database db, String fileName,
                          String backupName) throws HsqlException {
@@ -127,7 +127,7 @@
     /**
      * initial external parameters are set here.
      */
-    protected void initParams() throws HsqlException {
+    public void initParams() throws HsqlException {
 
         int cacheScale = database.getProperties().getIntegerProperty(
             HsqlDatabaseProperties.hsqldb_cache_scale, 14, 8, 18);
@@ -447,7 +447,7 @@
      * Free space is requested from the block manager if it exists.
      * Otherwise the file is grown to accommodate it.
      */
-    private int setFilePos(CachedObject r) throws IOException {
+    public int setFilePos(CachedObject r) throws IOException {
 
         int rowSize = r.getStorageSize();
         int i       = freeBlocks == null ? -1
@@ -572,14 +572,14 @@
         return readObject(i);
     }
 
-    protected int readSize(int pos) throws IOException {
+    public int readSize(int pos) throws IOException {
 
         dataFile.seek((long) pos * cacheFileScale);
 
         return dataFile.readInt();
     }
 
-    protected RowInputInterface readObject(int pos) throws IOException {
+    public RowInputInterface readObject(int pos) throws IOException {
 
         dataFile.seek((long) pos * cacheFileScale);
 
@@ -599,7 +599,7 @@
      * This is called internally when old rows need to be removed from the
      * cache.
      */
-    protected void saveRows(CachedObject[] rows, int offset,
+    public void saveRows(CachedObject[] rows, int offset,
                             int count) throws IOException {
 
         for (int i = offset; i < offset + count; i++) {
@@ -745,7 +745,7 @@
         return fileModified;
     }
 
-    protected void setFileModified() throws IOException {
+    public void setFileModified() throws IOException {
 
         if (!fileModified) {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java.orig	2005-06-22 22:06:15.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java	2005-07-19 19:41:44.000000000 +0200
@@ -60,11 +60,11 @@
     public static final int FILES_NEW          = 2;
 
     // sets of properties
-    private static HashSet fullyProtectedProperties = new HashSet();
-    private static HashSet setProtectedProperties   = new HashSet();
-    private static HashSet booleanProperties        = new HashSet();
-    private static HashSet integralProperties       = new HashSet();
-    private static HashSet stringProperties         = new HashSet();
+    public static HashSet fullyProtectedProperties = new HashSet();
+    public static HashSet setProtectedProperties   = new HashSet();
+    public static HashSet booleanProperties        = new HashSet();
+    public static HashSet integralProperties       = new HashSet();
+    public static HashSet stringProperties         = new HashSet();
 
     // versions
     public static final String VERSION_STRING_1_7_0     = "1.7.0";
@@ -78,36 +78,36 @@
 
     //
     public static final String  db_version  = "version";
-    private static final String db_readonly = "readonly";
-    private static final String db_modified = "modified";
+    public static final String db_readonly = "readonly";
+    public static final String db_modified = "modified";
 
     //
-    private static final String runtime_gc_interval  = "runtime.gc_interval";
-    private static final String hsqldb_max_nio_scale = "hsqldb.max_nio_scale";
+    public static final String runtime_gc_interval  = "runtime.gc_interval";
+    public static final String hsqldb_max_nio_scale = "hsqldb.max_nio_scale";
     public static final String  hsqldb_cache_scale   = "hsqldb.cache_scale";
     public static final String hsqldb_cache_file_scale =
         "hsqldb.cache_file_scale";
     public static final String hsqldb_cache_size_scale =
         "hsqldb.cache_size_scale";
     public static final String  hsqldb_cache_version = "hsqldb.cache_version";
-    private static final String hsqldb_catalogs      = "hsqldb.catalogs";
+    public static final String hsqldb_catalogs      = "hsqldb.catalogs";
     public static final String hsqldb_compatible_version =
         "hsqldb.compatible_version";
     public static final String hsqldb_default_table_type =
         "hsqldb.default_table_type";
     public static final String hsqldb_defrag_limit = "hsqldb.defrag_limit";
-    private static final String hsqldb_files_readonly =
+    public static final String hsqldb_files_readonly =
         "hsqldb.files_readonly";
     public static final String hsqldb_log_size      = "hsqldb.log_size";
     public static final String hsqldb_nio_data_file = "hsqldb.nio_data_file";
-    private static final String hsqldb_original_version =
+    public static final String hsqldb_original_version =
         "hsqldb.original_version";
     public static final String hsqldb_script_format = "hsqldb.script_format";
 
     //
-    private static final String sql_compare_in_locale =
+    public static final String sql_compare_in_locale =
         "sql.compare_in_locale";
-    private static final String sql_enforce_strict_size =
+    public static final String sql_enforce_strict_size =
         "sql.enforce_strict_size";
     public static final String sql_tx_no_multi_write =
         "sql.tx_no_multi_rewrite";
@@ -173,7 +173,7 @@
         stringProperties.addAll(stringPropertiesNames);
     }
 
-    private Database database;
+    public Database database;
 
     public HsqlDatabaseProperties(Database db) {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/HsqlProperties.java.orig	2005-06-08 13:27:59.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/HsqlProperties.java	2005-07-19 19:41:44.000000000 +0200
@@ -57,12 +57,12 @@
 public class HsqlProperties {
 
     public static final int NO_VALUE_FOR_KEY = 1;
-    protected String        fileName;
-    protected Properties    stringProps;
-    protected int[]         errorCodes = new int[0];
-    protected String[]      errorKeys  = new String[0];
-    protected boolean       resource   = false;
-    protected FileAccess    fa;
+    public String        fileName;
+    public Properties    stringProps;
+    public int[]         errorCodes = new int[0];
+    public String[]      errorKeys  = new String[0];
+    public boolean       resource   = false;
+    public FileAccess    fa;
 
     public HsqlProperties() {
         stringProps = new Properties();
@@ -279,7 +279,7 @@
      * is populated during construction or addition of elements and is used
      * outside this class to act upon the errors.
      */
-    private void addError(int code, String key) {
+    public void addError(int code, String key) {
 
         errorCodes = (int[]) ArrayUtil.resizeArray(errorCodes,
                 errorCodes.length + 1);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/LockFile.java.orig	2005-06-08 13:28:29.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/LockFile.java	2005-07-19 19:41:44.000000000 +0200
@@ -101,7 +101,7 @@
  *    </ul>
  * </ol> <p>
  *
- * In addition to the generic lock and release rules, the protected methods
+ * In addition to the generic lock and release rules, the public methods
  * {@link #lockImpl() lockImpl()} and {@link #releaseImpl() releaseImpl()}
  * are called during lock and release attempts, respectively.  This allows
  * transparent, JDK 1.1 compliant integration of extended strategies for
@@ -156,10 +156,10 @@
 public class LockFile {
 
     /** Canonical reference to this object's lock file. */
-    protected File f;
+    public File f;
 
     /** Cached value of the lock file's canonical path. */
-    private String cpath = null;
+    public String cpath = null;
 
     /**
      * A RandomAccessFile constructed from this object's reference, f, to its
@@ -168,7 +168,7 @@
      * This RandomAccessFile is used to periodically write out the heartbeat
      * timestamp to this object's lock file.
      */
-    protected RandomAccessFile raf;
+    public RandomAccessFile raf;
 
     /**
      * The period, in milliseconds, at which heartbeat timestamps are written
@@ -183,18 +183,18 @@
     public static final byte[] MAGIC = "HSQLLOCK".getBytes();
 
     /** Indicates whether this object has a lock condition on its lock file. */
-    protected boolean locked;
+    public boolean locked;
 
     /**
      * The timed scheduler with which to register this object's
      * heartbeat task.
      */
-    protected static final HsqlTimer timer = DatabaseManager.getTimer();
+    public static final HsqlTimer timer = DatabaseManager.getTimer();
 
     /**
      * An opaque reference to this object's heatbeat task.
      */
-    private Object timerTask;
+    public Object timerTask;
 
     /**
      * Attempts to read the hearbeat timestamp from this object's lock file
@@ -219,7 +219,7 @@
      *        or isolated class loader context currently has a
      *        lock condition on this object's lock file
      */
-    private void checkHeartbeat() throws Exception {
+    public void checkHeartbeat() throws Exception {
 
         long   lastHeartbeat;
         String mn;
@@ -270,7 +270,7 @@
      *
      * @throws Exception if an IOException occurs
      */
-    private void closeRAF() throws Exception {
+    public void closeRAF() throws Exception {
 
         String mn;
 
@@ -300,7 +300,7 @@
      * @param file a reference to the file this object is to use as its
      *      lock file
      */
-    private void setFile(File file) throws Exception {
+    public void setFile(File file) throws Exception {
 
         if (isLocked()) {
             try {
@@ -355,7 +355,7 @@
      *        actions are taken or the actions succeed,
      *        else <code>false</code>.
      */
-    protected boolean lockImpl() throws Exception {
+    public boolean lockImpl() throws Exception {
 
         String mn;
 
@@ -372,7 +372,7 @@
      *
      * @throws Exception if an IOException occurs
      */
-    private void openRAF() throws Exception {
+    public void openRAF() throws Exception {
 
         trace("openRAF(): entered.");
 
@@ -394,7 +394,7 @@
      *      file does not exist, Long.MIN_VALUE, the earliest time
      *      representable as a long in Java,
      */
-    private long readHeartbeat() throws Exception {
+    public long readHeartbeat() throws Exception {
 
         DataInputStream dis;
         long            heartbeat;
@@ -447,7 +447,7 @@
      *        to be determined. (e.g. an IO exception
      *        occurs here).
      */
-    protected boolean releaseImpl() throws Exception {
+    public boolean releaseImpl() throws Exception {
 
         trace("releaseImpl(): no action: returning true");
 
@@ -455,7 +455,7 @@
     }
 
     /** Schedules the lock heartbeat task. */
-    private void startHeartbeat() {
+    public void startHeartbeat() {
 
         Runnable r;
 
@@ -475,7 +475,7 @@
     }
 
     /** Cancels the lock heartbeat task. */
-    private void stopHeartbeat() {
+    public void stopHeartbeat() {
 
         String mn = "stopHeartbeat(): ";
 
@@ -497,7 +497,7 @@
      * @throws Exception if the magic value cannot be written to
      *      the lock file
      */
-    private void writeMagic() throws Exception {
+    public void writeMagic() throws Exception {
 
         String mn   = "writeMagic(): ";
         String path = "lock file [" + cpath + "]";
@@ -517,7 +517,7 @@
      * @throws Exception if the current heartbeat timestamp value
      *      cannot be written
      */
-    private void writeHeartbeat() throws Exception {
+    public void writeHeartbeat() throws Exception {
 
         long   time;
         String mn   = "writeHeartbeat(): ";
@@ -752,7 +752,7 @@
      * This Runnable class provides the implementation for the timed task
      * that periodically writes out a heartbeat timestamp to the lock file.<p>
      */
-    protected class HeartbeatRunner implements Runnable {
+    public class HeartbeatRunner implements Runnable {
 
         public void run() {
 
@@ -797,7 +797,7 @@
      * @return an implementation-specific tail value for the toString() method
      * @see #toString
      */
-    protected String toStringImpl() {
+    public String toStringImpl() {
         return "";
     }
 
@@ -954,7 +954,7 @@
      *
      * @param o the value to print
      */
-    protected void trace(Object o) {
+    public void trace(Object o) {
 
         if (Trace.TRACE) {
             Trace.printSystemOut("[" + super.toString() + "]: " + o);
@@ -969,7 +969,7 @@
      *        trying to release the lock condition,
      *        if any, that it has on its lock file.
      */
-    protected void finalize() throws Throwable {
+    public void finalize() throws Throwable {
         trace("finalize(): calling tryRelease()");
         tryRelease();
     }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/Log.java.orig	2005-06-29 23:34:51.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/Log.java	2005-07-19 19:41:44.000000000 +0200
@@ -125,20 +125,20 @@
  */
 public class Log {
 
-    private HsqlDatabaseProperties properties;
-    private String                 fileName;
-    private Database               database;
-    private FileAccess             fa;
-    private ScriptWriterBase       dbLogWriter;
-    private String                 scriptFileName;
-    private String                 cacheFileName;
-    private String                 backupFileName;
-    private String                 logFileName;
-    private boolean                filesReadOnly;
-    private long                   maxLogSize;
-    private int                    writeDelay;
-    private int                    scriptFormat;
-    private DataFileCache          cache;
+    public HsqlDatabaseProperties properties;
+    public String                 fileName;
+    public Database               database;
+    public FileAccess             fa;
+    public ScriptWriterBase       dbLogWriter;
+    public String                 scriptFileName;
+    public String                 cacheFileName;
+    public String                 backupFileName;
+    public String                 logFileName;
+    public boolean                filesReadOnly;
+    public long                   maxLogSize;
+    public int                    writeDelay;
+    public int                    scriptFormat;
+    public DataFileCache          cache;
 
     Log(Database db) throws HsqlException {
 
@@ -550,7 +550,7 @@
      * Wrappers for openning-starting / stoping-closing the log file and
      * writer.
      */
-    private void openLog() throws HsqlException {
+    public void openLog() throws HsqlException {
 
         if (filesReadOnly) {
             return;
@@ -568,7 +568,7 @@
         }
     }
 
-    private synchronized void closeLog() throws HsqlException {
+    public synchronized void closeLog() throws HsqlException {
 
         if (dbLogWriter != null) {
             dbLogWriter.close();
@@ -578,7 +578,7 @@
     /**
      * Write the .script file as .script.new.
      */
-    private void writeScript(boolean full) throws HsqlException {
+    public void writeScript(boolean full) throws HsqlException {
 
         String sNewName = scriptFileName + ".new";
 
@@ -601,7 +601,7 @@
     /**
      * Performs all the commands in the .script file.
      */
-    private void processScript() throws HsqlException {
+    public void processScript() throws HsqlException {
 
         ScriptReaderBase scr = null;
 
@@ -636,7 +636,7 @@
     /**
      * Defrag large data files when the sum of .log and .data files is large.
      */
-    private void processDataFile() throws HsqlException {
+    public void processDataFile() throws HsqlException {
 
         if (cache == null || filesReadOnly || database.isStoredFileAccess()
                 ||!fa.isStreamElement(logFileName)) {
@@ -655,7 +655,7 @@
     /**
      * Performs all the commands in the .log file.
      */
-    private void processLog() throws HsqlException {
+    public void processLog() throws HsqlException {
 
         if (!database.isFilesInJar() && fa.isStreamElement(logFileName)) {
             ScriptRunner.runScript(database, logFileName,
@@ -666,7 +666,7 @@
     /**
      * Restores a compressed backup or the .data file.
      */
-    private void restoreBackup() throws HsqlException {
+    public void restoreBackup() throws HsqlException {
 
         // in case data file cannot be deleted, reset it
         DataFileCache.deleteOrResetFreePos(database, cacheFileName);
@@ -683,7 +683,7 @@
     }
 
 // fredt@users 20020221 - patch 513005 by sqlbob@users (RMP) - text tables
-    private HashMap textCacheList = new HashMap();
+    public HashMap textCacheList = new HashMap();
 
     DataFileCache openTextCache(Table table, String source,
                                 boolean readOnlyData,
@@ -730,7 +730,7 @@
         }
     }
 
-    private void closeAllTextCaches(boolean compact) throws HsqlException {
+    public void closeAllTextCaches(boolean compact) throws HsqlException {
 
         Iterator it = textCacheList.values().iterator();
 
@@ -743,7 +743,7 @@
         }
     }
 
-    private void reopenAllTextCaches() throws HsqlException {
+    public void reopenAllTextCaches() throws HsqlException {
 
         Iterator it = textCacheList.values().iterator();
 
@@ -752,7 +752,7 @@
         }
     }
 
-    private boolean isAnyTextCacheModified() {
+    public boolean isAnyTextCacheModified() {
 
         Iterator it = textCacheList.values().iterator();
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/NIOLockFile.java.orig	2005-06-08 13:40:55.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/NIOLockFile.java	2005-07-19 19:41:44.000000000 +0200
@@ -61,13 +61,13 @@
      * The <code>fc</code> attribute is used to obtain this object's
      * {@link #fl FileLock} attribute.
      */
-    private FileChannel fc;
+    public FileChannel fc;
 
     /**
      * The <code>FileLock</code> object used to lock this object's
      * lock file.
      */
-    private FileLock fl;
+    public FileLock fl;
 
     /**
      * Tries to obtain a valid NIO lock upon this object's lock file using
@@ -77,7 +77,7 @@
      * @throws Exception if an error occurs while attempting to obtain the lock
      *
      */
-    protected boolean lockImpl() throws Exception {
+    public boolean lockImpl() throws Exception {
 
         boolean isValid;
 
@@ -154,7 +154,7 @@
      * @return true if a valid lock is released, else false
      * @throws Exception if na error occurs while attempting to release the lock
      */
-    protected boolean releaseImpl() throws Exception {
+    public boolean releaseImpl() throws Exception {
 
         // PRE: we know that this method is only called
         // if isLocked() is true.
@@ -200,7 +200,7 @@
      * Retrieves the String value: "fl =" + fl
      * @return the String value: "fl =" + fl
      */
-    protected String toStringImpl() {
+    public String toStringImpl() {
         return "fl =" + fl;
     }
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/NIOScaledRAFile.java.orig	2005-03-02 14:50:54.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/NIOScaledRAFile.java	2005-07-19 19:41:44.000000000 +0200
@@ -56,8 +56,8 @@
     MappedByteBuffer  buffer;
     FileChannel       channel;
     long              bufferLength;
-    private boolean   wasNio;
-    private boolean   bufferModified;
+    public boolean   wasNio;
+    public boolean   bufferModified;
     static final long MAX_NIO_LENGTH = (1L << 28);
 
     /**
@@ -84,7 +84,7 @@
     }
 
     /** @todo fredt - better message */
-    private long newBufferSize(long newsize) throws IOException {
+    public long newBufferSize(long newsize) throws IOException {
 
         long bufsize;
 
@@ -99,7 +99,7 @@
         return bufsize;
     }
 
-    private void enlargeBuffer(long offset, int size) throws IOException {
+    public void enlargeBuffer(long offset, int size) throws IOException {
 
         int position = 0;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFileInJar.java.orig	2005-04-11 00:50:15.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFileInJar.java	2005-07-19 19:41:44.000000000 +0200
@@ -92,7 +92,7 @@
         return seekPosition;
     }
 
-    private void readIntoBuffer() throws IOException {
+    public void readIntoBuffer() throws IOException {
 
         long filePos = seekPosition;
 
@@ -206,7 +206,7 @@
         return false;
     }
 
-    private void resetStream() throws IOException {
+    public void resetStream() throws IOException {
 
         if (file != null) {
             file.close();
@@ -217,7 +217,7 @@
         file = new DataInputStream(fis);
     }
 
-    private void fileSeek(long position) throws IOException {
+    public void fileSeek(long position) throws IOException {
 
         long skipPosition = realPosition;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFile.java.orig	2005-03-05 01:41:32.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFile.java	2005-07-19 19:41:44.000000000 +0200
@@ -57,7 +57,7 @@
     static final int         DATA_FILE_NIO = 1;
     static final int         DATA_FILE_JAR = 2;
     final RandomAccessFile   file;
-    private final boolean    readOnly;
+    public final boolean    readOnly;
     final String             fileName;
     boolean                  isNio;
     boolean                  bufferDirty = true;
@@ -159,7 +159,7 @@
         return seekPosition;
     }
 
-    private void readIntoBuffer() throws IOException {
+    public void readIntoBuffer() throws IOException {
 
         long filePos = seekPosition;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/TextCache.java.orig	2005-06-29 23:35:12.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/persist/TextCache.java	2005-07-19 19:41:44.000000000 +0200
@@ -74,9 +74,9 @@
     public boolean             isQuoted;
     public boolean             isAllQuoted;
     public boolean             ignoreFirst;
-    protected String           header;
-    protected Table            table;
-    private ObjectCacheHashMap uncommittedCache;
+    public String           header;
+    public Table            table;
+    public ObjectCacheHashMap uncommittedCache;
 
     //
 
@@ -96,7 +96,7 @@
         uncommittedCache = new ObjectCacheHashMap(5);
     }
 
-    protected void initParams() throws HsqlException {
+    public void initParams() throws HsqlException {
 
         // fredt - this used to write rows as soon as they are inserted
         // but now this is subject to session autoCommit / or commit
@@ -177,7 +177,7 @@
         initBuffers();
     }
 
-    protected void initBuffers() {
+    public void initBuffers() {
 
         if (isQuoted || isAllQuoted) {
             rowIn = new RowInputTextQuoted(fs, vs, lvs, isAllQuoted);
@@ -189,7 +189,7 @@
         }
     }
 
-    private String translateSep(String sep) {
+    public String translateSep(String sep) {
         return translateSep(sep, false);
     }
 
@@ -197,7 +197,7 @@
      * Translates the escaped characters in a separator string and returns
      * the non-escaped string.
      */
-    private String translateSep(String sep, boolean isProperty) {
+    public String translateSep(String sep, boolean isProperty) {
 
         if (sep == null) {
             return (null);
@@ -406,7 +406,7 @@
     }
 
     // sqlbob -- Allow line breaks in quoted fields.
-    protected RowInputInterface readObject(int pos) throws IOException {
+    public RowInputInterface readObject(int pos) throws IOException {
 
         ByteArray    buffer    = new ByteArray(80);
         boolean      blank     = true;
@@ -576,7 +576,7 @@
      * uncommitted cache until such time that they are committed or rolled
      * back- fredt
      */
-    protected void saveRows(CachedObject[] rows, int offset,
+    public void saveRows(CachedObject[] rows, int offset,
                             int count) throws IOException {
 
         if (count == 0) {
@@ -624,7 +624,7 @@
         throw Trace.error(Trace.TEXT_TABLE_HEADER);
     }
 
-    private void writeHeader(String header) throws IOException {
+    public void writeHeader(String header) throws IOException {
 
         byte[] buf       = null;
         String firstLine = header + NL;
@@ -640,10 +640,10 @@
         fileFreePosition = firstLine.length();
     }
 
-    private class ByteArray {
+    public class ByteArray {
 
-        private byte[] buffer;
-        private int    buflen;
+        public byte[] buffer;
+        public int    buflen;
 
         public ByteArray(int n) {
             buffer = new byte[n];
@@ -687,7 +687,7 @@
         return ((RowInputText) rowIn).getLineNumber();
     }
 
-    protected void setFileModified() throws IOException {
+    public void setFileModified() throws IOException {
         fileModified = true;
     }
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/resources/BundleHandler.java.orig	2005-06-08 13:37:01.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/resources/BundleHandler.java	2005-07-19 19:41:44.000000000 +0200
@@ -58,28 +58,28 @@
 public final class BundleHandler {
 
     /** Used to synchronize access */
-    private static final Object mutex = new Object();
+    public static final Object mutex = new Object();
 
     /** The Locale used internally to fetch resource bundles. */
-    private static Locale locale = Locale.getDefault();
+    public static Locale locale = Locale.getDefault();
 
     /** Map:  Integer object handle => <code>ResourceBundle</code> object. */
-    private static HashMap bundleHandleMap = new HashMap();
+    public static HashMap bundleHandleMap = new HashMap();
 
     /** List whose elements are <code>ResourceBundle</code> objects */
-    private static HsqlArrayList bundleList = new HsqlArrayList();
+    public static HsqlArrayList bundleList = new HsqlArrayList();
 
     /**
      * The resource path prefix of the <code>ResourceBundle</code> objects
      * handled by this class.
      */
-    private static final String prefix = "org/hsqldb/resources/";
+    public static final String prefix = "org/hsqldb/resources/";
 
     /** JDK 1.1 compliance */
-    private static final Method newGetBundleMethod = getNewGetBundleMethod();
+    public static final Method newGetBundleMethod = getNewGetBundleMethod();
 
     /** Pure utility class: external construction disabled. */
-    private BundleHandler() {}
+    public BundleHandler() {}
 
     /**
      * Getter for property locale. <p>
@@ -197,7 +197,7 @@
      * One-shot initialization of JDK 1.2+ ResourceBundle.getBundle() method
      * having ClassLoader in the signature.
      */
-    private static Method getNewGetBundleMethod() {
+    public static Method getNewGetBundleMethod() {
 
         Class   clazz;
         Class[] args;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputBase.java.orig	2005-04-11 00:50:36.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputBase.java	2005-07-19 19:41:44.000000000 +0200
@@ -58,8 +58,8 @@
     static final int NO_POS = -1;
 
     // fredt - initialisation may be unnecessary as it's done in resetRow()
-    protected int filePos = NO_POS;
-    protected int size;
+    public int filePos = NO_POS;
+    public int size;
 
     public RowInputBase() {
         this(new byte[4]);
@@ -99,37 +99,37 @@
     public abstract String readString() throws IOException;
 
 // fredt@users - comment - methods used for SQL types
-    protected abstract boolean checkNull() throws IOException;
+    public abstract boolean checkNull() throws IOException;
 
-    protected abstract String readChar(int type)
+    public abstract String readChar(int type)
     throws IOException, HsqlException;
 
-    protected abstract Integer readSmallint()
+    public abstract Integer readSmallint()
     throws IOException, HsqlException;
 
-    protected abstract Integer readInteger()
+    public abstract Integer readInteger()
     throws IOException, HsqlException;
 
-    protected abstract Long readBigint() throws IOException, HsqlException;
+    public abstract Long readBigint() throws IOException, HsqlException;
 
-    protected abstract Double readReal(int type)
+    public abstract Double readReal(int type)
     throws IOException, HsqlException;
 
-    protected abstract BigDecimal readDecimal()
+    public abstract BigDecimal readDecimal()
     throws IOException, HsqlException;
 
-    protected abstract Boolean readBit() throws IOException, HsqlException;
+    public abstract Boolean readBit() throws IOException, HsqlException;
 
-    protected abstract Time readTime() throws IOException, HsqlException;
+    public abstract Time readTime() throws IOException, HsqlException;
 
-    protected abstract Date readDate() throws IOException, HsqlException;
+    public abstract Date readDate() throws IOException, HsqlException;
 
-    protected abstract Timestamp readTimestamp()
+    public abstract Timestamp readTimestamp()
     throws IOException, HsqlException;
 
-    protected abstract Object readOther() throws IOException, HsqlException;
+    public abstract Object readOther() throws IOException, HsqlException;
 
-    protected abstract Binary readBinary(int type)
+    public abstract Binary readBinary(int type)
     throws IOException, HsqlException;
 
     /**
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputBinary.java.orig	2005-04-11 00:50:43.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputBinary.java	2005-07-19 19:41:44.000000000 +0200
@@ -58,7 +58,7 @@
 public class RowInputBinary extends RowInputBase
 implements org.hsqldb.rowio.RowInputInterface {
 
-    private RowOutputBinary out;
+    public RowOutputBinary out;
 
     public RowInputBinary() {
         super();
@@ -79,7 +79,7 @@
         this.out = out;
     }
 
-    protected byte[] readByteArray() throws IOException {
+    public byte[] readByteArray() throws IOException {
 
         byte[] b = new byte[readInt()];
 
@@ -115,7 +115,7 @@
         return s;
     }
 
-    protected boolean checkNull() throws IOException {
+    public boolean checkNull() throws IOException {
 
         int b = readByte();
 
@@ -123,27 +123,27 @@
                       : false;
     }
 
-    protected String readChar(int type) throws IOException {
+    public String readChar(int type) throws IOException {
         return readString();
     }
 
-    protected Integer readSmallint() throws IOException, HsqlException {
+    public Integer readSmallint() throws IOException, HsqlException {
         return ValuePool.getInt(readShort());
     }
 
-    protected Integer readInteger() throws IOException, HsqlException {
+    public Integer readInteger() throws IOException, HsqlException {
         return ValuePool.getInt(readInt());
     }
 
-    protected Long readBigint() throws IOException, HsqlException {
+    public Long readBigint() throws IOException, HsqlException {
         return ValuePool.getLong(readLong());
     }
 
-    protected Double readReal(int type) throws IOException, HsqlException {
+    public Double readReal(int type) throws IOException, HsqlException {
         return ValuePool.getDouble(readLong());
     }
 
-    protected BigDecimal readDecimal() throws IOException, HsqlException {
+    public BigDecimal readDecimal() throws IOException, HsqlException {
 
         byte[]     bytes  = readByteArray();
         int        scale  = readInt();
@@ -152,31 +152,31 @@
         return ValuePool.getBigDecimal(new BigDecimal(bigint, scale));
     }
 
-    protected Boolean readBit() throws IOException, HsqlException {
+    public Boolean readBit() throws IOException, HsqlException {
         return readBoolean() ? Boolean.TRUE
                              : Boolean.FALSE;
     }
 
-    protected Time readTime() throws IOException, HsqlException {
+    public Time readTime() throws IOException, HsqlException {
         return new Time(HsqlDateTime.getNormalisedTime(readLong()));
     }
 
-    protected Date readDate() throws IOException, HsqlException {
+    public Date readDate() throws IOException, HsqlException {
 
         long date = HsqlDateTime.getNormalisedDate(readLong());
 
         return ValuePool.getDate(date);
     }
 
-    protected Timestamp readTimestamp() throws IOException, HsqlException {
+    public Timestamp readTimestamp() throws IOException, HsqlException {
         return HsqlDateTime.timestampValue(readLong(), readInt());
     }
 
-    protected Object readOther() throws IOException, HsqlException {
+    public Object readOther() throws IOException, HsqlException {
         return new JavaObject(readByteArray());
     }
 
-    protected Binary readBinary(int type) throws IOException, HsqlException {
+    public Binary readBinary(int type) throws IOException, HsqlException {
         return new Binary(readByteArray(), false);
     }
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputText.java.orig	2005-06-08 21:09:51.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputText.java	2005-07-19 19:41:44.000000000 +0200
@@ -55,21 +55,21 @@
 public class RowInputText extends RowInputBase implements RowInputInterface {
 
     // text table specific
-    private String    fieldSep;
-    private String    varSep;
-    private String    longvarSep;
-    private int       fieldSepLen;
-    private int       varSepLen;
-    private int       longvarSepLen;
-    private boolean   fieldSepEnd;
-    private boolean   varSepEnd;
-    private boolean   longvarSepEnd;
-    private int       textLen;
-    protected String  text;
-    protected int     line;
-    protected int     field;
-    protected int     next = 0;
-    protected boolean allQuoted;
+    public String    fieldSep;
+    public String    varSep;
+    public String    longvarSep;
+    public int       fieldSepLen;
+    public int       varSepLen;
+    public int       longvarSepLen;
+    public boolean   fieldSepEnd;
+    public boolean   varSepEnd;
+    public boolean   longvarSepEnd;
+    public int       textLen;
+    public String  text;
+    public int     line;
+    public int     field;
+    public int     next = 0;
+    public boolean allQuoted;
 
     /**
      * fredt@users - comment - in future may use a custom subclasse of
@@ -120,7 +120,7 @@
         field = 0;
     }
 
-    protected String getField(String sep, int sepLen,
+    public String getField(String sep, int sepLen,
                               boolean isEnd) throws IOException {
 
         String s = null;
@@ -168,11 +168,11 @@
         return getField(fieldSep, fieldSepLen, fieldSepEnd);
     }
 
-    private String readVarString() throws IOException {
+    public String readVarString() throws IOException {
         return getField(varSep, varSepLen, varSepEnd);
     }
 
-    private String readLongVarString() throws IOException {
+    public String readLongVarString() throws IOException {
         return getField(longvarSep, longvarSepLen, longvarSepEnd);
     }
 
@@ -205,13 +205,13 @@
         return 0;
     }
 
-    protected boolean checkNull() {
+    public boolean checkNull() {
 
         // Return null on each column read instead.
         return false;
     }
 
-    protected String readChar(int type) throws IOException {
+    public String readChar(int type) throws IOException {
 
         switch (type) {
 
@@ -228,7 +228,7 @@
         }
     }
 
-    protected Integer readSmallint() throws IOException, HsqlException {
+    public Integer readSmallint() throws IOException, HsqlException {
 
         String s = readString();
 
@@ -245,7 +245,7 @@
         return Integer.valueOf(s);
     }
 
-    protected Integer readInteger() throws IOException, HsqlException {
+    public Integer readInteger() throws IOException, HsqlException {
 
         String s = readString();
 
@@ -262,7 +262,7 @@
         return Integer.valueOf(s);
     }
 
-    protected Long readBigint() throws IOException, HsqlException {
+    public Long readBigint() throws IOException, HsqlException {
 
         String s = readString();
 
@@ -279,7 +279,7 @@
         return Long.valueOf(s);
     }
 
-    protected Double readReal(int type) throws IOException, HsqlException {
+    public Double readReal(int type) throws IOException, HsqlException {
 
         String s = readString();
 
@@ -296,7 +296,7 @@
         return Double.valueOf(s);
     }
 
-    protected BigDecimal readDecimal() throws IOException, HsqlException {
+    public BigDecimal readDecimal() throws IOException, HsqlException {
 
         String s = readString();
 
@@ -313,7 +313,7 @@
         return new BigDecimal(s);
     }
 
-    protected Time readTime() throws IOException, HsqlException {
+    public Time readTime() throws IOException, HsqlException {
 
         String s = readString();
 
@@ -330,7 +330,7 @@
         return HsqlDateTime.timeValue(s);
     }
 
-    protected Date readDate() throws IOException, HsqlException {
+    public Date readDate() throws IOException, HsqlException {
 
         String s = readString();
 
@@ -347,7 +347,7 @@
         return HsqlDateTime.dateValue(s);
     }
 
-    protected Timestamp readTimestamp() throws IOException, HsqlException {
+    public Timestamp readTimestamp() throws IOException, HsqlException {
 
         String s = readString();
 
@@ -364,7 +364,7 @@
         return HsqlDateTime.timestampValue(s);
     }
 
-    protected Boolean readBit() throws IOException, HsqlException {
+    public Boolean readBit() throws IOException, HsqlException {
 
         String s = readString();
 
@@ -382,7 +382,7 @@
                                           : Boolean.FALSE;
     }
 
-    protected Object readOther() throws IOException, HsqlException {
+    public Object readOther() throws IOException, HsqlException {
 
         byte[] data;
         String s = readString();
@@ -402,7 +402,7 @@
         return new JavaObject(data);
     }
 
-    protected Binary readBinary(int type) throws IOException, HsqlException {
+    public Binary readBinary(int type) throws IOException, HsqlException {
 
         String s = readString();
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java.orig	2005-06-08 21:09:51.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java	2005-07-19 19:41:44.000000000 +0200
@@ -114,7 +114,7 @@
         return schemaName;
     }
 
-    protected String readField() throws IOException {
+    public String readField() throws IOException {
 
         try {
             tokenizer.getString();
@@ -136,7 +136,7 @@
         }
     }
 
-    protected String readNumberField() throws IOException {
+    public String readNumberField() throws IOException {
 
         try {
             tokenizer.getString();
@@ -204,17 +204,17 @@
         return 0;
     }
 
-    protected boolean checkNull() {
+    public boolean checkNull() {
 
         // Return null on each column read instead.
         return false;
     }
 
-    protected String readChar(int type) throws IOException {
+    public String readChar(int type) throws IOException {
         return readString();
     }
 
-    protected Integer readSmallint() throws IOException, HsqlException {
+    public Integer readSmallint() throws IOException, HsqlException {
 
         String s = readNumberField();
 
@@ -227,7 +227,7 @@
         return ValuePool.getInt(i);
     }
 
-    protected Integer readInteger() throws IOException, HsqlException {
+    public Integer readInteger() throws IOException, HsqlException {
 
         String s = readNumberField();
 
@@ -240,7 +240,7 @@
         return ValuePool.getInt(i);
     }
 
-    protected Long readBigint() throws IOException, HsqlException {
+    public Long readBigint() throws IOException, HsqlException {
 
         String s = readNumberField();
 
@@ -253,7 +253,7 @@
         return ValuePool.getLong(i);
     }
 
-    protected Double readReal(int type) throws IOException, HsqlException {
+    public Double readReal(int type) throws IOException, HsqlException {
 
         String s = readNumberField();
 
@@ -295,7 +295,7 @@
         return ValuePool.getDouble(Double.doubleToLongBits(i));
     }
 
-    protected BigDecimal readDecimal() throws IOException, HsqlException {
+    public BigDecimal readDecimal() throws IOException, HsqlException {
 
         String s = readNumberField();
 
@@ -308,7 +308,7 @@
         return ValuePool.getBigDecimal(i);
     }
 
-    protected Time readTime() throws IOException, HsqlException {
+    public Time readTime() throws IOException, HsqlException {
 
         String s = readField();
 
@@ -319,7 +319,7 @@
         return HsqlDateTime.timeValue(s);
     }
 
-    protected Date readDate() throws IOException, HsqlException {
+    public Date readDate() throws IOException, HsqlException {
 
         String s = readField();
 
@@ -330,7 +330,7 @@
         return HsqlDateTime.dateValue(s);
     }
 
-    protected Timestamp readTimestamp() throws IOException, HsqlException {
+    public Timestamp readTimestamp() throws IOException, HsqlException {
 
         String s = readField();
 
@@ -341,7 +341,7 @@
         return HsqlDateTime.timestampValue(s);
     }
 
-    protected Boolean readBit() throws IOException, HsqlException {
+    public Boolean readBit() throws IOException, HsqlException {
 
         String s = readField();
 
@@ -353,7 +353,7 @@
                                           : Boolean.FALSE;
     }
 
-    protected Object readOther() throws IOException, HsqlException {
+    public Object readOther() throws IOException, HsqlException {
 
         byte[] data;
         String s = readField();
@@ -367,7 +367,7 @@
         return new JavaObject(data);
     }
 
-    protected Binary readBinary(int type) throws IOException, HsqlException {
+    public Binary readBinary(int type) throws IOException, HsqlException {
 
         String s = readField();
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java.orig	2005-05-15 16:12:42.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java	2005-07-19 19:41:44.000000000 +0200
@@ -46,10 +46,10 @@
  */
 public class RowInputTextQuoted extends RowInputText {
 
-    private static final int NORMAL_FIELD   = 0;
-    private static final int NEED_END_QUOTE = 1;
-    private static final int FOUND_QUOTE    = 2;
-    private char[]           qtext;
+    public static final int NORMAL_FIELD   = 0;
+    public static final int NEED_END_QUOTE = 1;
+    public static final int FOUND_QUOTE    = 2;
+    public char[]           qtext;
 
     public RowInputTextQuoted(String fieldSep, String varSep,
                               String longvarSep, boolean allQuoted) {
@@ -63,7 +63,7 @@
         qtext = text.toCharArray();
     }
 
-    protected String getField(String sep, int sepLen,
+    public String getField(String sep, int sepLen,
                               boolean isEnd) throws IOException {
 
         //fredt - now the only supported behaviour is emptyIsNull
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputBase.java.orig	2005-04-11 00:51:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputBase.java	2005-07-19 19:41:44.000000000 +0200
@@ -62,7 +62,7 @@
     public static final int CACHED_ROW_170 = 1;
 
     // the last column in a table is an ID that should not be written to file
-    protected boolean skipSystemId = false;
+    public boolean skipSystemId = false;
 
     /**
      *  Constructor used for persistent storage of a Table row
@@ -107,35 +107,35 @@
     public abstract void writeString(String s);
 
 // fredt@users - comment - methods used for writing each SQL type
-    protected void writeFieldPrefix() {}
+    public void writeFieldPrefix() {}
 
-    protected abstract void writeFieldType(int type);
+    public abstract void writeFieldType(int type);
 
-    protected abstract void writeNull(int type);
+    public abstract void writeNull(int type);
 
-    protected abstract void writeChar(String s, int t);
+    public abstract void writeChar(String s, int t);
 
-    protected abstract void writeSmallint(Number o);
+    public abstract void writeSmallint(Number o);
 
-    protected abstract void writeInteger(Number o);
+    public abstract void writeInteger(Number o);
 
-    protected abstract void writeBigint(Number o);
+    public abstract void writeBigint(Number o);
 
-    protected abstract void writeReal(Double o, int type);
+    public abstract void writeReal(Double o, int type);
 
-    protected abstract void writeDecimal(BigDecimal o);
+    public abstract void writeDecimal(BigDecimal o);
 
-    protected abstract void writeBit(Boolean o);
+    public abstract void writeBit(Boolean o);
 
-    protected abstract void writeDate(Date o);
+    public abstract void writeDate(Date o);
 
-    protected abstract void writeTime(Time o);
+    public abstract void writeTime(Time o);
 
-    protected abstract void writeTimestamp(Timestamp o);
+    public abstract void writeTimestamp(Timestamp o);
 
-    protected abstract void writeOther(JavaObject o);
+    public abstract void writeOther(JavaObject o);
 
-    protected abstract void writeBinary(Binary o, int t);
+    public abstract void writeBinary(Binary o, int t);
 
     public void writeRow(Object[] data, Table t) {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputBinary.java.orig	2005-04-11 00:52:15.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputBinary.java	2005-07-19 19:41:44.000000000 +0200
@@ -57,7 +57,7 @@
  */
 public class RowOutputBinary extends RowOutputBase {
 
-    private static final int INT_STORE_SIZE = 4;
+    public static final int INT_STORE_SIZE = 4;
     int                      storageSize;
 
     public RowOutputBinary() {
@@ -160,35 +160,35 @@
     }
 
 // fredt@users - comment - methods used for writing each SQL type
-    protected void writeFieldType(int type) {
+    public void writeFieldType(int type) {
         write(1);
     }
 
-    protected void writeNull(int type) {
+    public void writeNull(int type) {
         write(0);
     }
 
-    protected void writeChar(String s, int t) {
+    public void writeChar(String s, int t) {
         writeString(s);
     }
 
-    protected void writeSmallint(Number o) {
+    public void writeSmallint(Number o) {
         writeShort(o.intValue());
     }
 
-    protected void writeInteger(Number o) {
+    public void writeInteger(Number o) {
         writeInt(o.intValue());
     }
 
-    protected void writeBigint(Number o) {
+    public void writeBigint(Number o) {
         writeLong(o.longValue());
     }
 
-    protected void writeReal(Double o, int type) {
+    public void writeReal(Double o, int type) {
         writeLong(Double.doubleToLongBits((o.doubleValue())));
     }
 
-    protected void writeDecimal(BigDecimal o) {
+    public void writeDecimal(BigDecimal o) {
 
         int        scale   = o.scale();
         BigInteger bigint  = JavaSystem.getUnscaledValue(o);
@@ -198,34 +198,34 @@
         writeInt(scale);
     }
 
-    protected void writeBit(Boolean o) {
+    public void writeBit(Boolean o) {
         write(o.booleanValue() ? 1
                                : 0);
     }
 
-    protected void writeDate(Date o) {
+    public void writeDate(Date o) {
         writeLong(o.getTime());
     }
 
-    protected void writeTime(Time o) {
+    public void writeTime(Time o) {
         writeLong(o.getTime());
     }
 
-    protected void writeTimestamp(Timestamp o) {
+    public void writeTimestamp(Timestamp o) {
         writeLong(o.getTime());
         writeInt(o.getNanos());
     }
 
-    protected void writeOther(JavaObject o) {
+    public void writeOther(JavaObject o) {
         writeByteArray(o.getBytes());
     }
 
-    protected void writeBinary(Binary o, int t) {
+    public void writeBinary(Binary o, int t) {
         writeByteArray(o.getBytes());
     }
 
 // fredt@users - comment - helper and conversion methods
-    protected void writeByteArray(byte[] b) {
+    public void writeByteArray(byte[] b) {
         writeInt(b.length);
         write(b, 0, b.length);
     }
@@ -239,7 +239,7 @@
      * @return size of byte array
      * @exception  HsqlException when data is inconsistent
      */
-    private static int getSize(Object[] data, int l, int[] type) {
+    public static int getSize(Object[] data, int l, int[] type) {
 
         int s = 0;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputText.java.orig	2005-04-11 00:52:43.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputText.java	2005-07-19 19:41:44.000000000 +0200
@@ -54,16 +54,16 @@
  */
 public class RowOutputText extends RowOutputBase {
 
-    protected String  fieldSep;
-    protected String  varSep;
-    protected String  longvarSep;
-    private boolean   fieldSepEnd;
-    private boolean   varSepEnd;
-    private boolean   longvarSepEnd;
-    private String    nextSep = "";
-    private boolean   nextSepEnd;
-    protected boolean allQuoted;
-    private String    encoding;
+    public String  fieldSep;
+    public String  varSep;
+    public String  longvarSep;
+    public boolean   fieldSepEnd;
+    public boolean   varSepEnd;
+    public boolean   longvarSepEnd;
+    public String    nextSep = "";
+    public boolean   nextSepEnd;
+    public boolean allQuoted;
+    public String    encoding;
 
     public RowOutputText(String fieldSep, String varSep, String longvarSep,
                          boolean allQuoted, String encoding) {
@@ -74,7 +74,7 @@
                                   encoding);
     }
 
-    private void initTextDatabaseRowOutput(String fieldSep, String varSep,
+    public void initTextDatabaseRowOutput(String fieldSep, String varSep,
                                            String longvarSep,
                                            boolean allQuoted,
                                            String encoding) {
@@ -142,7 +142,7 @@
         nextSepEnd = fieldSepEnd;
     }
 
-    protected void writeVarString(String s) {
+    public void writeVarString(String s) {
 
         s = checkConvertString(s, varSep);
 
@@ -159,7 +159,7 @@
         nextSepEnd = varSepEnd;
     }
 
-    protected void writeLongVarString(String s) {
+    public void writeLongVarString(String s) {
 
         s = checkConvertString(s, longvarSep);
 
@@ -176,7 +176,7 @@
         nextSepEnd = longvarSepEnd;
     }
 
-    protected String checkConvertString(String s, String sep) {
+    public String checkConvertString(String s, String sep) {
 
         if (s.indexOf('\n') != -1 || s.indexOf('\r') != -1) {
             throw new IllegalArgumentException(
@@ -188,7 +188,7 @@
         return s;
     }
 
-    private byte[] getBytes(String s) {
+    public byte[] getBytes(String s) {
 
         byte[] bytes = null;
 
@@ -201,7 +201,7 @@
         return bytes;
     }
 
-    protected void writeByteArray(byte[] b) {
+    public void writeByteArray(byte[] b) {
 
         ensureRoom(b.length * 2);
         StringConverter.writeHex(this.getBuffer(), count, b);
@@ -231,7 +231,7 @@
     }
 
 // fredt@users - comment - methods used for writing each SQL type
-    protected void writeFieldType(int type) {
+    public void writeFieldType(int type) {
 
         writeBytes(nextSep);
 
@@ -255,11 +255,11 @@
         }
     }
 
-    protected void writeNull(int type) {
+    public void writeNull(int type) {
         writeFieldType(type);
     }
 
-    protected void writeChar(String s, int t) {
+    public void writeChar(String s, int t) {
 
         switch (t) {
 
@@ -282,50 +282,50 @@
         }
     }
 
-    protected void writeSmallint(Number o) {
+    public void writeSmallint(Number o) {
         writeString(o.toString());
     }
 
-    protected void writeInteger(Number o) {
+    public void writeInteger(Number o) {
         writeString(o.toString());
     }
 
-    protected void writeBigint(Number o) {
+    public void writeBigint(Number o) {
         writeString(o.toString());
     }
 
-    protected void writeReal(Double o, int type) {
+    public void writeReal(Double o, int type) {
         writeString(o.toString());
     }
 
-    protected void writeDecimal(BigDecimal o) {
+    public void writeDecimal(BigDecimal o) {
         writeString(o.toString());
     }
 
-    protected void writeBit(Boolean o) {
+    public void writeBit(Boolean o) {
         writeString(o.toString());
     }
 
-    protected void writeDate(Date o) {
+    public void writeDate(Date o) {
         writeString(o.toString());
     }
 
-    protected void writeTime(Time o) {
+    public void writeTime(Time o) {
         writeString(o.toString());
     }
 
-    protected void writeTimestamp(Timestamp o) {
+    public void writeTimestamp(Timestamp o) {
         writeString(o.toString());
     }
 
-    protected void writeOther(JavaObject o) {
+    public void writeOther(JavaObject o) {
 
         byte[] ba = o.getBytes();
 
         writeByteArray(ba);
     }
 
-    protected void writeBinary(Binary o, int t) {
+    public void writeBinary(Binary o, int t) {
         writeByteArray(o.getBytes());
     }
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputTextLog.java.orig	2005-04-11 00:52:59.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputTextLog.java	2005-07-19 19:41:44.000000000 +0200
@@ -57,45 +57,45 @@
     static final byte[]     BYTES_IS    = " IS ".getBytes();
     public static final int MODE_DELETE = 1;
     public static final int MODE_INSERT = 0;
-    private boolean         isWritten;
-    private int             logMode;
+    public boolean         isWritten;
+    public int             logMode;
 
     public void setMode(int mode) {
         logMode = mode;
     }
 
-    protected void writeFieldPrefix() {
+    public void writeFieldPrefix() {
 
         if (logMode == MODE_DELETE && isWritten) {
             write(BYTES_AND);
         }
     }
 
-    protected void writeChar(String s, int t) {
+    public void writeChar(String s, int t) {
 
         write('\'');
         StringConverter.unicodeToAscii(this, s, true);
         write('\'');
     }
 
-    protected void writeReal(Double o, int type) {
+    public void writeReal(Double o, int type) {
         writeBytes(Column.createSQLString(((Number) o).doubleValue()));
     }
 
-    protected void writeSmallint(Number o) {
+    public void writeSmallint(Number o) {
         this.writeBytes(o.toString());
     }
 
     public void writeEnd() {}
 
-    protected void writeTime(Time o) {
+    public void writeTime(Time o) {
 
         write('\'');
         writeBytes(o.toString());
         write('\'');
     }
 
-    protected void writeBinary(Binary o, int t) {
+    public void writeBinary(Binary o, int t) {
 
         ensureRoom(o.getBytesLength() * 2 + 2);
         write('\'');
@@ -110,7 +110,7 @@
 
     public void writeSize(int size) {}
 
-    protected void writeDate(Date o) {
+    public void writeDate(Date o) {
 
         write('\'');
         this.writeBytes(o.toString());
@@ -121,16 +121,16 @@
         return 0;
     }
 
-    protected void writeInteger(Number o) {
+    public void writeInteger(Number o) {
         this.writeBytes(o.toString());
     }
 
-    protected void writeBigint(Number o) {
+    public void writeBigint(Number o) {
         this.writeBytes(o.toString());
     }
 
 //fredt@users - patch 1108647 by nkowalcz@users (NataliaK) fix for IS NULL
-    protected void writeNull(int type) {
+    public void writeNull(int type) {
 
         if (logMode == MODE_DELETE) {
             write(BYTES_IS);
@@ -143,7 +143,7 @@
         write(BYTES_NULL);
     }
 
-    protected void writeOther(JavaObject o) {
+    public void writeOther(JavaObject o) {
 
         ensureRoom(o.getBytesLength() * 2 + 2);
         write('\'');
@@ -158,16 +158,16 @@
         StringConverter.unicodeToAscii(this, value, false);
     }
 
-    protected void writeBit(Boolean o) {
+    public void writeBit(Boolean o) {
         write(o.booleanValue() ? BYTES_TRUE
                                : BYTES_FALSE);
     }
 
-    protected void writeDecimal(BigDecimal o) {
+    public void writeDecimal(BigDecimal o) {
         this.writeBytes(o.toString());
     }
 
-    protected void writeFieldType(int type) {
+    public void writeFieldType(int type) {
 
         if (logMode == MODE_DELETE) {
             write('=');
@@ -184,7 +184,7 @@
 
     public void writeIntData(int i, int position) {}
 
-    protected void writeTimestamp(Timestamp o) {
+    public void writeTimestamp(Timestamp o) {
 
         write('\'');
         this.writeBytes(HsqlDateTime.getTimestampString(o));
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputTextQuoted.java.orig	2005-04-11 00:53:05.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/rowio/RowOutputTextQuoted.java	2005-07-19 19:41:44.000000000 +0200
@@ -49,7 +49,7 @@
         super(fieldSep, varSep, longvarSep, allQuoted, encoding);
     }
 
-    protected String checkConvertString(String s, String sep) {
+    public String checkConvertString(String s, String sep) {
 
         if (allQuoted || s.length() == 0 || s.indexOf('\"') != -1
                 || (sep.length() > 0 && s.indexOf(sep) != -1)
@@ -60,7 +60,7 @@
         return s;
     }
 
-    private boolean hasUnprintable(String s) {
+    public boolean hasUnprintable(String s) {
 
         for (int i = 0, len = s.length(); i < len; i++) {
             if (Character.isISOControl(s.charAt(i))) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/sample/TriggerSample.java.orig	2005-03-02 14:50:54.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/sample/TriggerSample.java	2005-07-19 19:41:44.000000000 +0200
@@ -211,7 +211,7 @@
         }
     }
 
-    private static void doAssert(boolean b,
+    public static void doAssert(boolean b,
                                  String msg) throws RuntimeException {
 
         if (b) {
@@ -224,7 +224,7 @@
         }
     }
 
-    private static void doAuditStep(int typ, String tn, String ors,
+    public static void doAuditStep(int typ, String tn, String ors,
                                     String nrs) {
 
         Connection        conn;
@@ -373,7 +373,7 @@
         return sb.toString();
     }
 
-    private static Connection getConnection() throws SQLException {
+    public static Connection getConnection() throws SQLException {
 
         try {
             Class.forName(drv).newInstance();
@@ -386,12 +386,12 @@
         }
     }
 
-    private static void createTrigger(Statement stmt, String trn,
+    public static void createTrigger(Statement stmt, String trn,
                                       int typ) throws SQLException {
         stmt.execute(getTriggerDDL(trn, typ, tn, 0, impl));
     }
 
-    private static void setup() throws SQLException {
+    public static void setup() throws SQLException {
 
         Connection conn = getConnection();
         Statement  stmt = conn.createStatement();
@@ -416,7 +416,7 @@
         conn.close();
     }
 
-    private static void doSomeWork() throws SQLException {
+    public static void doSomeWork() throws SQLException {
 
         Connection conn = getConnection();
         Statement  stmt = conn.createStatement();
@@ -448,7 +448,7 @@
         conn.close();
     }
 
-    private static void dumpTable(String tn) throws SQLException {
+    public static void dumpTable(String tn) throws SQLException {
 
         Connection        conn  = getConnection();
         Statement         stmt  = conn.createStatement();
@@ -483,7 +483,7 @@
         conn.close();
     }
 
-    private static void runSample() throws SQLException {
+    public static void runSample() throws SQLException {
 
         setup();
         doSomeWork();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBase.java.orig	2005-06-08 14:01:34.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBase.java	2005-07-19 19:41:44.000000000 +0200
@@ -82,17 +82,17 @@
         openFile();
     }
 
-    protected abstract void openFile() throws IOException;
+    public abstract void openFile() throws IOException;
 
     public void readAll(Session session) throws IOException, HsqlException {
         readDDL(session);
         readExistingData(session);
     }
 
-    protected abstract void readDDL(Session session)
+    public abstract void readDDL(Session session)
     throws IOException, HsqlException;
 
-    protected abstract void readExistingData(Session session)
+    public abstract void readExistingData(Session session)
     throws IOException, HsqlException;
 
     public abstract boolean readLoggedStatement(Session session)
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBinary.java.orig	2005-05-11 15:39:05.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderBinary.java	2005-07-19 19:41:44.000000000 +0200
@@ -56,8 +56,8 @@
  */
 class ScriptReaderBinary extends ScriptReaderBase {
 
-    private RowInputBinary    rowIn;
-    protected DataInputStream dataStreamIn;
+    public RowInputBinary    rowIn;
+    public DataInputStream dataStreamIn;
 
     ScriptReaderBinary(Database db,
                        String file) throws HsqlException, IOException {
@@ -67,7 +67,7 @@
         rowIn = new RowInputBinary();
     }
 
-    protected void openFile() throws IOException {
+    public void openFile() throws IOException {
 
         InputStream d = db.isFilesInJar()
                         ? getClass().getResourceAsStream(fileName)
@@ -77,7 +77,7 @@
                 1 << 13));
     }
 
-    protected void readDDL(Session session)
+    public void readDDL(Session session)
     throws IOException, HsqlException {
 
         Result   r  = Result.read(rowIn, dataStreamIn);
@@ -97,7 +97,7 @@
         }
     }
 
-    protected void readExistingData(Session session)
+    public void readExistingData(Session session)
     throws IOException, HsqlException {
 
         for (;;) {
@@ -131,7 +131,7 @@
 
     // int : row size (0 if no more rows) ,
     // BinaryServerRowInput : row (column values)
-    protected boolean readRow(Table t) throws IOException, HsqlException {
+    public boolean readRow(Table t) throws IOException, HsqlException {
 
         boolean more = readRow(rowIn, 0);
 
@@ -147,13 +147,13 @@
     }
 
     // int : rowcount
-    protected int readTableTerm() throws IOException, HsqlException {
+    public int readTableTerm() throws IOException, HsqlException {
         return dataStreamIn.readInt();
     }
 
     // int : headersize (0 if no more tables), String : tablename, int : operation,
     // String : schemaname
-    protected String readTableInit() throws IOException, HsqlException {
+    public String readTableInit() throws IOException, HsqlException {
 
         boolean more = readRow(rowIn, 0);
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderText.java.orig	2005-05-11 15:39:05.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderText.java	2005-07-19 19:41:44.000000000 +0200
@@ -70,7 +70,7 @@
         rowIn = new RowInputTextLog();
     }
 
-    protected void openFile() throws IOException {
+    public void openFile() throws IOException {
 
         InputStream d = db.isFilesInJar()
                         ? getClass().getResourceAsStream(fileName)
@@ -80,7 +80,7 @@
             new InputStreamReader(new BufferedInputStream(d)));
     }
 
-    protected void readDDL(Session session)
+    public void readDDL(Session session)
     throws IOException, HsqlException {
 
         for (; readLoggedStatement(session); ) {
@@ -105,7 +105,7 @@
         }
     }
 
-    protected void readExistingData(Session session)
+    public void readExistingData(Session session)
     throws IOException, HsqlException {
 
         try {
@@ -165,7 +165,7 @@
         return true;
     }
 
-    private void processStatement(Session session) throws IOException {
+    public void processStatement(Session session) throws IOException {
 
         try {
             if (statement.startsWith("/*C")) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderZipped.java.orig	2005-04-11 00:55:08.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptReaderZipped.java	2005-07-19 19:41:44.000000000 +0200
@@ -54,7 +54,7 @@
         super(db, file);
     }
 
-    protected void openFile() throws IOException {
+    public void openFile() throws IOException {
 
         InputStream d = db.isFilesInJar()
                         ? getClass().getResourceAsStream(fileName)
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java.orig	2005-06-26 18:30:15.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java	2005-07-19 19:41:44.000000000 +0200
@@ -101,7 +101,7 @@
     volatile boolean needsSync;
     volatile boolean forceSync;
     volatile boolean busyWriting;
-    private int      syncCount;
+    public int      syncCount;
     static final int INSERT             = 0;
     static final int INSERT_WITH_SCHEMA = 1;
 
@@ -167,7 +167,7 @@
         openFile();
     }
 
-    protected abstract void initBuffers();
+    public abstract void initBuffers();
 
     /**
      *  Called internally or externally in write delay intervals.
@@ -233,7 +233,7 @@
      *  File is opened in append mode although in current usage the file
      *  never pre-exists
      */
-    protected void openFile() throws HsqlException {
+    public void openFile() throws HsqlException {
 
         try {
             FileAccess   fa  = isDump ? new FileUtil()
@@ -254,9 +254,9 @@
      * This is not really useful in the current usage but may be if this
      * class is used in a different way.
      */
-    protected void finishStream() throws IOException {}
+    public void finishStream() throws IOException {}
 
-    protected void writeDDL() throws IOException, HsqlException {
+    public void writeDDL() throws IOException, HsqlException {
 
         Result ddlPart = DatabaseScript.getScript(database,
             !includeCachedData);
@@ -264,7 +264,7 @@
         writeSingleColumnResult(ddlPart);
     }
 
-    protected void writeExistingData() throws HsqlException, IOException {
+    public void writeExistingData() throws HsqlException, IOException {
 
         // start with blank schema - SET SCHEMA to log
         currentSession.loggedSchema = null;
@@ -322,10 +322,10 @@
         writeDataTerm();
     }
 
-    protected void writeTableInit(Table t)
+    public void writeTableInit(Table t)
     throws HsqlException, IOException {}
 
-    protected void writeTableTerm(Table t) throws HsqlException, IOException {
+    public void writeTableTerm(Table t) throws HsqlException, IOException {
 
         if (t.isDataReadOnly() &&!t.isTemp() &&!t.isText()) {
             StringBuffer a = new StringBuffer("SET TABLE ");
@@ -336,7 +336,7 @@
         }
     }
 
-    protected void writeSingleColumnResult(Result r)
+    public void writeSingleColumnResult(Result r)
     throws HsqlException, IOException {
 
         Iterator it = r.iterator();
@@ -351,9 +351,9 @@
     abstract void writeRow(Session session, Table table,
                            Object[] data) throws HsqlException, IOException;
 
-    protected abstract void writeDataTerm() throws IOException;
+    public abstract void writeDataTerm() throws IOException;
 
-    protected abstract void addSessionId(Session session) throws IOException;
+    public abstract void addSessionId(Session session) throws IOException;
 
     public abstract void writeLogStatement(Session session,
                                            String s)
@@ -372,10 +372,10 @@
     throws HsqlException, IOException;
 
     //
-    private Object timerTask;
+    public Object timerTask;
 
     // long write delay for scripts : 60s
-    protected volatile int writeDelay = 60000;
+    public volatile int writeDelay = 60000;
 
     public void run() {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBinary.java.orig	2005-06-08 14:01:34.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBinary.java	2005-07-19 19:41:44.000000000 +0200
@@ -55,18 +55,18 @@
         super(db, file, includeCached, newFile, false);
     }
 
-    protected void initBuffers() {
+    public void initBuffers() {
         rowOut = new RowOutputBinary();
     }
 
-    protected void writeSingleColumnResult(Result r)
+    public void writeSingleColumnResult(Result r)
     throws IOException, HsqlException {
         Result.write(r, rowOut, fileStreamOut);
     }
 
     // int : row size (0 if no more rows) ,
     // RowInput/OutputBinary : row (column values)
-    protected void writeRow(Session session, Table t,
+    public void writeRow(Session session, Table t,
                             Object[] data) throws IOException, HsqlException {
 
         rowOut.reset();
@@ -77,7 +77,7 @@
     }
 
     // int : headersize (0 if no more tables), String : tablename, int : operation,
-    protected void writeTableInit(Table t) throws HsqlException, IOException {
+    public void writeTableInit(Table t) throws HsqlException, IOException {
 
         tableRowCount = 0;
 
@@ -90,7 +90,7 @@
         fileStreamOut.write(rowOut.getBuffer(), 0, rowOut.size());
     }
 
-    protected void writeTableTerm(Table t) throws IOException {
+    public void writeTableTerm(Table t) throws IOException {
 
         rowOut.reset();
         rowOut.writeSize(0);
@@ -98,7 +98,7 @@
         fileStreamOut.write(rowOut.getBuffer(), 0, rowOut.size());
     }
 
-    protected void writeDataTerm() throws IOException {
+    public void writeDataTerm() throws IOException {
 
         rowOut.reset();
         rowOut.writeSize(0);
@@ -109,7 +109,7 @@
                                   String s)
                                   throws IOException, HsqlException {}
 
-    protected void addSessionId(Session session) throws IOException {}
+    public void addSessionId(Session session) throws IOException {}
 
     public void writeDeleteStatement(Session session, Table table,
                                      Object[] ddata)
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java.orig	2005-06-10 14:49:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java	2005-07-19 19:41:44.000000000 +0200
@@ -96,13 +96,13 @@
         super(db, file, includeCachedData, newFile, isDump);
     }
 
-    protected void initBuffers() {
+    public void initBuffers() {
         rowOut = new RowOutputTextLog();
     }
 
-    protected void writeDataTerm() throws IOException {}
+    public void writeDataTerm() throws IOException {}
 
-    protected void addSessionId(Session session) throws IOException {
+    public void addSessionId(Session session) throws IOException {
 
         if (session == null) {
             return;
@@ -123,7 +123,7 @@
         }
     }
 
-    private void writeSchemaStatement(HsqlName schema) {
+    public void writeSchemaStatement(HsqlName schema) {
 
         rowOut.write(BYTES_SCHEMA);
         rowOut.writeString(schema.statementName);
@@ -152,7 +152,7 @@
         }
     }
 
-    protected void writeRow(Session session, Table table,
+    public void writeRow(Session session, Table table,
                             Object[] data) throws HsqlException, IOException {
 
         busyWriting = true;
@@ -177,7 +177,7 @@
         }
     }
 
-    protected void writeTableInit(Table t) throws HsqlException, IOException {
+    public void writeTableInit(Table t) throws HsqlException, IOException {
 
         if (t.isEmpty(currentSession)) {
             return;
@@ -275,7 +275,7 @@
         }
     }
 
-    protected void finalize() {
+    public void finalize() {
         sync();
     }
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterZipped.java.orig	2005-03-18 21:07:37.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/scriptio/ScriptWriterZipped.java	2005-07-19 19:41:44.000000000 +0200
@@ -48,7 +48,7 @@
  */
 class ScriptWriterZipped extends ScriptWriterBinary {
 
-    private static final int bufferSize = 1 << 15;
+    public static final int bufferSize = 1 << 15;
 
     ScriptWriterZipped(Database db, String file, boolean includeCached,
                        boolean newFile) throws HsqlException {
@@ -60,7 +60,7 @@
      */
     public void sync() {}
 
-    protected void openFile() throws HsqlException {
+    public void openFile() throws HsqlException {
 
         try {
             FileAccess           fa  = database.getFileAccess();
@@ -81,7 +81,7 @@
      * This may not really be necessary, unless we add implementations where
      * non-compressed data is added to the end of the copressed part.
      */
-    protected void finishStream() throws IOException {
+    public void finishStream() throws IOException {
         ((DeflaterOutputStream) fileStreamOut).finish();
         fileStreamOut.flush();
     }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/store/BaseHashMap.java.orig	2005-06-20 12:17:14.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/store/BaseHashMap.java	2005-07-19 19:41:44.000000000 +0200
@@ -88,17 +88,17 @@
     boolean isObjectValue;
 
     //
-    protected HashIndex hashIndex;
+    public HashIndex hashIndex;
 
     //
-    protected int[]    intKeyTable;
-    protected Object[] objectKeyTable;
-    protected long[]   longKeyTable;
+    public int[]    intKeyTable;
+    public Object[] objectKeyTable;
+    public long[]   longKeyTable;
 
     //
-    protected int[]    intValueTable;
-    protected Object[] objectValueTable;
-    protected long[]   longValueTable;
+    public int[]    intValueTable;
+    public Object[] objectValueTable;
+    public long[]   longValueTable;
 
     //
     int   accessMin;
@@ -110,26 +110,26 @@
     final int         initialCapacity;
     int               threshold;
     int               maxCapacity;
-    protected int     purgePolicy = NO_PURGE;
-    protected boolean minimizeOnEmpty;
+    public int     purgePolicy = NO_PURGE;
+    public boolean minimizeOnEmpty;
 
     //
     boolean hasZeroKey;
     int     zeroKeyIndex = -1;
 
     // keyOrValueTypes
-    protected static final int noKeyOrValue     = 0;
-    protected static final int intKeyOrValue    = 1;
-    protected static final int longKeyOrValue   = 2;
-    protected static final int objectKeyOrValue = 3;
+    public static final int noKeyOrValue     = 0;
+    public static final int intKeyOrValue    = 1;
+    public static final int longKeyOrValue   = 2;
+    public static final int objectKeyOrValue = 3;
 
     // purgePolicy
-    protected static final int NO_PURGE      = 0;
-    protected static final int PURGE_ALL     = 1;
-    protected static final int PURGE_HALF    = 2;
-    protected static final int PURGE_QUARTER = 3;
+    public static final int NO_PURGE      = 0;
+    public static final int PURGE_ALL     = 1;
+    public static final int PURGE_HALF    = 2;
+    public static final int PURGE_QUARTER = 3;
 
-    protected BaseHashMap(int initialCapacity, float loadFactor, int keyType,
+    public BaseHashMap(int initialCapacity, float loadFactor, int keyType,
                           int valueType,
                           boolean hasAccessCount)
                           throws IllegalArgumentException {
@@ -185,7 +185,7 @@
         }
     }
 
-    protected int getLookup(Object key, int hash) {
+    public int getLookup(Object key, int hash) {
 
         int    lookup = hashIndex.getLookup(hash);
         Object tempKey;
@@ -201,7 +201,7 @@
         return lookup;
     }
 
-    protected int getLookup(int key) {
+    public int getLookup(int key) {
 
         int lookup = hashIndex.getLookup(key);
         int tempKey;
@@ -217,7 +217,7 @@
         return lookup;
     }
 
-    protected int getLookup(long key) {
+    public int getLookup(long key) {
 
         int  lookup = hashIndex.getLookup((int) key);
         long tempKey;
@@ -236,7 +236,7 @@
     /**
      * generic method for adding or removing keys
      */
-    protected Object addOrRemove(long longKey, long longValue,
+    public Object addOrRemove(long longKey, long longValue,
                                  Object objectKey, Object objectValue,
                                  boolean remove) {
 
@@ -384,7 +384,7 @@
     /**
      * type-specific method for adding or removing keys in int->Object maps
      */
-    protected Object addOrRemove(int intKey, Object objectValue,
+    public Object addOrRemove(int intKey, Object objectValue,
                                  boolean remove) {
 
         int    hash        = intKey;
@@ -466,7 +466,7 @@
     /**
      * type specific method for Object sets or Object->Object maps
      */
-    protected Object removeObject(Object objectKey) {
+    public Object removeObject(Object objectKey) {
 
         if (objectKey == null) {
             return null;
@@ -499,7 +499,7 @@
         return returnValue;
     }
 
-    protected boolean reset() {
+    public boolean reset() {
 
         if (maxCapacity == 0 || maxCapacity > threshold) {
             rehash(hashIndex.hashTable.length * 2);
@@ -531,7 +531,7 @@
      *
      * newCapacity must be larger or equal to existing number of elements.
      */
-    protected void rehash(int newCapacity) {
+    public void rehash(int newCapacity) {
 
         int     limitLookup     = hashIndex.newNodePointer;
         boolean oldZeroKey      = hasZeroKey;
@@ -584,7 +584,7 @@
     /**
      * resize the arrays contianing the key / value data
      */
-    private void resizeElementArrays(int dataLength, int newLength) {
+    public void resizeElementArrays(int dataLength, int newLength) {
 
         Object temp;
         int    usedLength = newLength > dataLength ? dataLength
@@ -643,7 +643,7 @@
     /**
      * clear all the key / value data in a range.
      */
-    private void clearElementArrays(final int from, final int to) {
+    public void clearElementArrays(final int from, final int to) {
 
         if (isIntKey) {
             int counter = to;
@@ -826,12 +826,12 @@
     /**
      * row must already been freed of key / element
      */
-    protected void removeRow(int lookup) {
+    public void removeRow(int lookup) {
         hashIndex.removeEmptyNode(lookup);
         removeFromElementArrays(lookup);
     }
 
-    protected Object removeLookup(int lookup) {
+    public Object removeLookup(int lookup) {
 
         if (isObjectKey) {
             return addOrRemove(0, 0, objectKeyTable[lookup], null, true);
@@ -862,7 +862,7 @@
      * Return the max accessCount value for count elements with the lowest
      * access count. Always return at least accessMin + 1
      */
-    protected int getAccessCountCeiling(int count, int margin) {
+    public int getAccessCountCeiling(int count, int margin) {
         return ArrayCounter.rank(accessTable, hashIndex.newNodePointer,
                                  count, accessMin + 1, accessCount, margin);
     }
@@ -873,7 +873,7 @@
      *
      * Only for maps with Object key table
      */
-    protected void clear(int count, int margin) {
+    public void clear(int count, int margin) {
 
         if (margin < 64) {
             margin = 64;
@@ -917,7 +917,7 @@
         return hashIndex.elementCount == 0;
     }
 
-    protected boolean containsKey(Object key) {
+    public boolean containsKey(Object key) {
 
         if (key == null) {
             return false;
@@ -929,7 +929,7 @@
                             : true;
     }
 
-    protected boolean containsKey(int key) {
+    public boolean containsKey(int key) {
 
         int lookup = getLookup(key);
 
@@ -937,7 +937,7 @@
                             : true;
     }
 
-    protected boolean containsKey(long key) {
+    public boolean containsKey(long key) {
 
         int lookup = getLookup(key);
 
@@ -945,7 +945,7 @@
                             : true;
     }
 
-    protected boolean containsValue(Object value) {
+    public boolean containsValue(Object value) {
 
         int lookup = 0;
 
@@ -986,7 +986,7 @@
      * Iterator returns Object, int or long and is used both for keys and
      * values
      */
-    protected class BaseHashIterator implements org.hsqldb.lib.Iterator {
+    public class BaseHashIterator implements org.hsqldb.lib.Iterator {
 
         boolean keys;
         int     lookup = -1;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/store/BitMap.java.orig	2005-03-02 14:50:55.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/store/BitMap.java	2005-07-19 19:41:44.000000000 +0200
@@ -141,7 +141,7 @@
                                  : true;
     }
 
-    private void doubleCapacity() {
+    public void doubleCapacity() {
 
         int[] newmap = new int[capacity * 2];
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/store/ValuePoolHashMap.java.orig	2005-06-08 21:09:52.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/store/ValuePoolHashMap.java	2005-07-19 19:41:44.000000000 +0200
@@ -98,7 +98,7 @@
         this.purgePolicy = newPolicy;
     }
 
-    protected Integer getOrAddInteger(int intKey) {
+    public Integer getOrAddInteger(int intKey) {
 
         Integer testValue;
         int     index      = hashIndex.getHashIndex(intKey);
@@ -140,7 +140,7 @@
         return testValue;
     }
 
-    protected Long getOrAddLong(long longKey) {
+    public Long getOrAddLong(long longKey) {
 
         Long testValue;
         int index = hashIndex.getHashIndex((int) (longKey
@@ -199,7 +199,7 @@
      * and hashCode().
      * @return String from map or a new String
      */
-    protected String getOrAddString(Object key) {
+    public String getOrAddString(Object key) {
 
         String testValue;
         int    index      = hashIndex.getHashIndex(key.hashCode());
@@ -241,7 +241,7 @@
         return testValue;
     }
 
-    protected Date getOrAddDate(long longKey) {
+    public Date getOrAddDate(long longKey) {
 
         Date testValue;
         int  hash       = (int) longKey ^ (int) (longKey >>> 32);
@@ -284,7 +284,7 @@
         return testValue;
     }
 
-    protected Double getOrAddDouble(long longKey) {
+    public Double getOrAddDouble(long longKey) {
 
         Double testValue;
         int index = hashIndex.getHashIndex((int) (longKey
@@ -327,7 +327,7 @@
         return testValue;
     }
 
-    protected Object getOrAddObject(Object key) {
+    public Object getOrAddObject(Object key) {
 
         Object testValue;
         int    index      = hashIndex.getHashIndex(key.hashCode());
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/store/ValuePool.java.orig	2005-06-08 21:09:52.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/store/ValuePool.java	2005-07-19 19:41:44.000000000 +0200
@@ -77,7 +77,7 @@
         initPool();
     }
 
-    private static void initPool() {
+    public static void initPool() {
 
         int[] sizeArray  = defaultPoolLookupSize;
         int   sizeFactor = defaultSizeFactor;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/ExecHarness.java.orig	2005-05-11 16:03:19.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/ExecHarness.java	2005-07-19 19:41:45.000000000 +0200
@@ -78,9 +78,9 @@
      * target program by a file, so that's all I'm implementing for stdin
      * right now.
      */
-    private static final String SYNTAX_MSG =
+    public static final String SYNTAX_MSG =
         "SYNTAX:  java org.hsqldb.test.ExecHarness targetprogram [args...]";
-    private static final int MAX_PROG_OUTPUT = 10240;
+    public static final int MAX_PROG_OUTPUT = 10240;
 
     /**
      * To test the ExecHarness class itself.
@@ -155,10 +155,10 @@
 
     // The extra 1 is so we can request 1 more byte than we want.
     // If that read is satisfied, we know that we read > MAX_PROG_OUTPUT.
-    private byte[]              ba = new byte[MAX_PROG_OUTPUT + 1];
-    private String              stdout          = null;
-    private String              errout          = null;
-    private static final String DEFAULT_CHARSET = "US-ASCII";
+    public byte[]              ba = new byte[MAX_PROG_OUTPUT + 1];
+    public String              stdout          = null;
+    public String              errout          = null;
+    public static final String DEFAULT_CHARSET = "US-ASCII";
 
     /*
      * Execute associated program synchronously, but in a separate process.
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/SqlToolHarness.java.orig	2005-05-11 16:03:19.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/SqlToolHarness.java	2005-07-19 19:41:45.000000000 +0200
@@ -47,8 +47,8 @@
  */
 public class SqlToolHarness {
 
-    private static final int MAX_SQLFILE_LEN = 10240;
-    private static final String SYNTAX_MSG =
+    public static final int MAX_SQLFILE_LEN = 10240;
+    public static final String SYNTAX_MSG =
         "SYNTAX:  java org.hsqldb.test.SqlToolHarness file1.sql [file2.sq...]";
 
     /**
@@ -97,7 +97,7 @@
         Verbose = (tmp != null) && (tmp.trim().length() > 0);
     }
 
-    private boolean Verbose = false;
+    public boolean Verbose = false;
 
     /**
      * Run SqlTool according to metacommands embedded in given SQL file.
@@ -219,12 +219,12 @@
         return true;
     }
 
-    private static String[]  mtString  = {};
-    private static Pattern[] mtPattern = {};
+    public static String[]  mtString  = {};
+    public static Pattern[] mtPattern = {};
 
-    private class Metadata {
+    public class Metadata {
 
-        private byte[] ba = new byte[MAX_SQLFILE_LEN + 1];
+        public byte[] ba = new byte[MAX_SQLFILE_LEN + 1];
 
         public Metadata(File inFile)
         throws FileNotFoundException, IOException {
@@ -284,14 +284,14 @@
             }
         }
 
-        private String[]  toolargs              = mtString;
-        private String[]  jvmargs               = mtString;
-        private Pattern[] requireStdoutPatterns = mtPattern;
-        private Pattern[] rejectStdoutPatterns  = mtPattern;
-        private Pattern[] requireErroutPatterns = mtPattern;
-        private Pattern[] rejectErroutPatterns  = mtPattern;
-        private boolean   inputAsFile           = false;
-        private Integer   exitValue             = new Integer(0);
+        public String[]  toolargs              = mtString;
+        public String[]  jvmargs               = mtString;
+        public Pattern[] requireStdoutPatterns = mtPattern;
+        public Pattern[] rejectStdoutPatterns  = mtPattern;
+        public Pattern[] requireErroutPatterns = mtPattern;
+        public Pattern[] rejectErroutPatterns  = mtPattern;
+        public boolean   inputAsFile           = false;
+        public Integer   exitValue             = new Integer(0);
 
         public String toString() {
 
@@ -315,7 +315,7 @@
             return sb.toString();
         }
 
-        private String getHarnessMetaBlock(File inFile)
+        public String getHarnessMetaBlock(File inFile)
         throws FileNotFoundException, IOException {
 
             // The extra 1 is so we can request 1 more byte than we want.
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestAllTypes.java.orig	2005-03-02 14:50:56.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestAllTypes.java	2005-07-19 19:41:45.000000000 +0200
@@ -48,12 +48,12 @@
  */
 public class TestAllTypes {
 
-    protected String url = "jdbc:hsqldb:";
+    public String url = "jdbc:hsqldb:";
 
-//    protected String filepath = ".";
-    protected String filepath = "/hsql/testalltypes/test";
+//    public String filepath = ".";
+    public String filepath = "/hsql/testalltypes/test";
 
-//    protected String filepath = "hsql://localhost/yourtest";
+//    public String filepath = "hsql://localhost/yourtest";
     boolean    network = true;
     String     user;
     String     password;
@@ -79,7 +79,7 @@
     //
     int bigrows = 1000;
 
-    protected void setUp() {
+    public void setUp() {
 
         user     = "sa";
         password = "";
@@ -266,9 +266,9 @@
         }
     }
 
-    protected void tearDown() {}
+    public void tearDown() {}
 
-    protected void checkResults() {
+    public void checkResults() {
 
         try {
             StopWatch sw = new StopWatch();
@@ -313,7 +313,7 @@
         }
     }
 
-    private void checkSelects() {
+    public void checkSelects() {
 
         StopWatch        sw        = new StopWatch();
         int              smallrows = 0xfff;
@@ -368,7 +368,7 @@
                            + (i * 1000 / sw.elapsedTime()));
     }
 
-    private void checkUpdates() {
+    public void checkUpdates() {
 
         StopWatch        sw        = new StopWatch();
         int              smallrows = 0xfff;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestBase.java.orig	2005-03-28 19:22:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestBase.java	2005-07-19 19:41:45.000000000 +0200
@@ -59,7 +59,7 @@
         super(name);
     }
 
-    protected void setUp() {
+    public void setUp() {
 
         if (isNetwork) {
             serverProps = "database.0=mem:test;sql.enforce_strict_size=true";
@@ -82,7 +82,7 @@
         }
     }
 
-    protected void tearDown() {
+    public void tearDown() {
 
         if (isNetwork) {
             server.stop();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestBugBase.java.orig	2005-06-08 21:09:53.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestBugBase.java	2005-07-19 19:41:45.000000000 +0200
@@ -59,7 +59,7 @@
         super(name);
     }
 
-    protected void setUp() {
+    public void setUp() {
 
         server = new Server();
 
@@ -76,7 +76,7 @@
         }
     }
 
-    protected void tearDown() {
+    public void tearDown() {
 
         server.stop();
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestCacheSize.java.orig	2005-06-14 19:58:26.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestCacheSize.java	2005-07-19 19:41:45.000000000 +0200
@@ -70,17 +70,17 @@
 public class TestCacheSize {
 
     // program can edit the *.properties file to set cache_size, old files are deleted
-    protected boolean filedb = true;
+    public boolean filedb = true;
 
     // shutdown performed mid operation - not for mem: or hsql: URL's
-    protected boolean shutdown = true;
+    public boolean shutdown = true;
 
     // fixed
-    protected String url = "jdbc:hsqldb:";
+    public String url = "jdbc:hsqldb:";
 
-//    protected String  filepath = "hsql://localhost/mytest";
-//    protected String filepath = "mem:test";
-    protected String filepath = "/hsql/testcache/test";
+//    public String  filepath = "hsql://localhost/mytest";
+//    public String filepath = "mem:test";
+    public String filepath = "/hsql/testcache/test";
 
     // frequent reporting of progress
     boolean reportProgress = false;
@@ -124,14 +124,14 @@
     Connection cConnection;
     FileWriter writer;
 
-    private void checkSelects() {
+    public void checkSelects() {
 
         countTestID();
         selectID();
         selectZipTable();
     }
 
-    private void checkUpdates() {
+    public void checkUpdates() {
 
         updateIDLinear();
         updateID();
@@ -141,7 +141,7 @@
         countZip();
     }
 
-    protected void setUp() {
+    public void setUp() {
 
         try {
             writer = new FileWriter("speedtests.html", true);
@@ -313,7 +313,7 @@
         }
     }
 
-    private void fillUpBigTable(String filler,
+    public void fillUpBigTable(String filler,
                                 Random randomgen) throws SQLException {
 
         StopWatch sw = new StopWatch();
@@ -415,7 +415,7 @@
                            + " ms -- " + rate + " tps");
     }
 
-    private void fillUpMultiTable(String filler,
+    public void fillUpMultiTable(String filler,
                                   Random randomgen) throws SQLException {
 
         StopWatch sw = new StopWatch();
@@ -468,7 +468,7 @@
                            + (i * 1000 / (sw.elapsedTime() + 1)));
     }
 
-    protected void tearDown() {
+    public void tearDown() {
 
         try {
             writer.write("\n</table>\n");
@@ -476,7 +476,7 @@
         } catch (Exception e) {}
     }
 
-    protected void checkResults() {
+    public void checkResults() {
 
         try {
             StopWatch sw = new StopWatch();
@@ -623,7 +623,7 @@
                            + " rows  -- " + time + " ms -- " + rate + " tps");
     }
 
-    private void countTestID() {
+    public void countTestID() {
 
         try {
             StopWatch sw = new StopWatch();
@@ -646,7 +646,7 @@
         } catch (SQLException e) {}
     }
 
-    private void countTestZip() {
+    public void countTestZip() {
 
         try {
             StopWatch sw = new StopWatch();
@@ -667,7 +667,7 @@
         } catch (SQLException e) {}
     }
 
-    private void countZip() {
+    public void countZip() {
 
         try {
             StopWatch sw = new StopWatch();
@@ -682,7 +682,7 @@
         } catch (SQLException e) {}
     }
 
-    private void updateZip() {
+    public void updateZip() {
 
         StopWatch        sw        = new StopWatch();
         java.util.Random randomgen = new java.util.Random();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestCascade.java.orig	2005-06-26 18:30:43.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestCascade.java	2005-07-19 19:41:45.000000000 +0200
@@ -110,7 +110,7 @@
         }
     }
 
-    private static void createDatabase() throws SQLException {
+    public static void createDatabase() throws SQLException {
 
         new File("testdb.backup").delete();
         new File("testdb.data").delete();
@@ -142,7 +142,7 @@
      * the CA table has 12 records. After, it should have 9, but instead it has
      * 0.
      */
-    private static void deleteXBRecord(Connection con) throws SQLException {
+    public static void deleteXBRecord(Connection con) throws SQLException {
 
         Statement stmt = con.createStatement();
 
@@ -151,7 +151,7 @@
         stmt.close();
     }    // deleteXBRecord
 
-    private static void insertData(Connection con) throws SQLException {
+    public static void insertData(Connection con) throws SQLException {
 
         String[] saData = {
             "INSERT INTO XB VALUES('T850','LEAA','00','P',NULL,'LCN NAME','sa',NOW)",
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestCollation.java.orig	2005-06-04 14:05:54.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestCollation.java	2005-07-19 19:41:45.000000000 +0200
@@ -54,7 +54,7 @@
         super.isNetwork = false;
     }
 
-    protected void setUp() {
+    public void setUp() {
 
         super.setUp();
 
@@ -68,7 +68,7 @@
         localeIterator = collation.getLocalesIterator();
     }
 
-    protected void tearDown() {
+    public void tearDown() {
 
         try {
             statement = connection.createStatement();
@@ -192,7 +192,7 @@
     /**
      * returns an SQL statement to set the database collation
      */
-    protected final String getSetCollationStmt(String collationName) {
+    public final String getSetCollationStmt(String collationName) {
 
         final String setCollationStmtPre  = "SET DATABASE COLLATION \"";
         final String setCollationStmtPost = "\"";
@@ -203,7 +203,7 @@
     /**
      * checks sorting a table with according to a given collation
      */
-    protected String checkSorting(String collationName) {
+    public String checkSorting(String collationName) {
 
         String prepareStmt =
             "DROP TABLE WORDLIST IF EXISTS;"
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestDataStructures.java.orig	2005-03-02 14:50:56.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestDataStructures.java	2005-07-19 19:41:45.000000000 +0200
@@ -51,19 +51,19 @@
  */
 public class TestDataStructures extends TestCase {
 
-    private static final int NUMBER_OF_TEST_RUNS          = 100000;
-    private static final int NUMBER_OF_ITERATIONS_PER_RUN = 80;
-    private Random           randomGenerator;
+    public static final int NUMBER_OF_TEST_RUNS          = 100000;
+    public static final int NUMBER_OF_ITERATIONS_PER_RUN = 80;
+    public Random           randomGenerator;
 
     //Commands
-    private static final int ADD        = 1;
-    private static final int ADD_AT     = 2;
-    private static final int GET        = 3;
-    private static final int REMOVE     = 4;
-    private static final int SET        = 5;
-    private static final int OPTIMIZE   = 6;
-    private static final int REMOVE_ALL = 7;
-    private Vector           listCommandsCalled;
+    public static final int ADD        = 1;
+    public static final int ADD_AT     = 2;
+    public static final int GET        = 3;
+    public static final int REMOVE     = 4;
+    public static final int SET        = 5;
+    public static final int OPTIMIZE   = 6;
+    public static final int REMOVE_ALL = 7;
+    public Vector           listCommandsCalled;
 
     /** Creates a new instance of TestDataStructures */
     public TestDataStructures(String s) {
@@ -323,7 +323,7 @@
     }
 
     /** Returns whether three objects are equal */
-    private boolean objectEquals(Object lObject, Object aObject,
+    public boolean objectEquals(Object lObject, Object aObject,
                                  Object vObject) {
 
         if (lObject == null && aObject == null && vObject == null) {
@@ -348,7 +348,7 @@
     }
 
     /** Returns a random integer in the range of the lowBound and highBound */
-    private int getRandomInt(int lowBound, int highBound) {
+    public int getRandomInt(int lowBound, int highBound) {
 
         double random = randomGenerator.nextDouble();
 
@@ -359,13 +359,13 @@
      * Returns an Integer object with a value between Integer.MIN_VALUE and
      * Integer.MAX_VALUE
      */
-    private Integer getRandomInteger() {
+    public Integer getRandomInteger() {
         return new Integer(getRandomInt(0, (int) (Integer.MAX_VALUE
                 / 100.0)));
     }
 
     /** Tells whether the given list contains the same data as the vector */
-    private boolean equalsVector(HsqlList list, Vector vector) {
+    public boolean equalsVector(HsqlList list, Vector vector) {
 
         if (list.size() != vector.size()) {
             return false;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestDateTime.java.orig	2005-03-02 14:50:56.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestDateTime.java	2005-07-19 19:41:45.000000000 +0200
@@ -51,7 +51,7 @@
         super(s);
     }
 
-    protected void setUp() {
+    public void setUp() {
 
         super.setUp();
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestGroupByHaving.java.orig	2005-03-02 14:50:56.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestGroupByHaving.java	2005-07-19 19:41:45.000000000 +0200
@@ -54,17 +54,17 @@
     //------------------------------------------------------------
     // Class variables
     //------------------------------------------------------------
-    private static final String databaseDriver = "org.hsqldb.jdbcDriver";
-    private static final String databaseURL =
+    public static final String databaseDriver = "org.hsqldb.jdbcDriver";
+    public static final String databaseURL =
         "jdbc:hsqldb:file:test/GroupByHaving";
-    private static final String databaseUser     = "sa";
-    private static final String databasePassword = "";
+    public static final String databaseUser     = "sa";
+    public static final String databasePassword = "";
 
     //------------------------------------------------------------
     // Instance variables
     //------------------------------------------------------------
-    private Connection conn;
-    private Statement  stmt;
+    public Connection conn;
+    public Statement  stmt;
 
     //------------------------------------------------------------
     // Constructors
@@ -80,12 +80,12 @@
     //------------------------------------------------------------
     // Class methods
     //------------------------------------------------------------
-    protected static Connection getJDBCConnection() throws SQLException {
+    public static Connection getJDBCConnection() throws SQLException {
         return DriverManager.getConnection(databaseURL, databaseUser,
                                            databasePassword);
     }
 
-    protected void setUp() throws Exception {
+    public void setUp() throws Exception {
 
         super.setUp();
 
@@ -128,7 +128,7 @@
         addEmployee(23, "Barbara", "Hood", 30000, 2);
     }
 
-    protected void tearDown() throws Exception {
+    public void tearDown() throws Exception {
 
         super.tearDown();
 
@@ -153,7 +153,7 @@
         }
     }
 
-    private void addEmployee(int id, String firstName, String lastName,
+    public void addEmployee(int id, String firstName, String lastName,
                              double salary, int superiorId) throws Exception {
 
         stmt.execute("insert into employee values(" + id + ", '" + firstName
@@ -295,7 +295,7 @@
     //------------------------------------------------------------
     // Helper methods
     //------------------------------------------------------------
-    private void compareResults(String sql, Object[][] rows,
+    public void compareResults(String sql, Object[][] rows,
                                 int errorCode) throws SQLException {
 
         ResultSet rs = null;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java.orig	2005-06-08 21:09:53.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java	2005-07-19 19:41:45.000000000 +0200
@@ -75,7 +75,7 @@
         super(name);
     }
 
-    protected void setUp() {
+    public void setUp() {
 
         user     = "sa";
         password = "";
@@ -103,7 +103,7 @@
         }
     }
 
-    protected void tearDown() {
+    public void tearDown() {
 
         try {
             conn1.close();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestMultipleConnections.java.orig	2005-03-02 14:50:57.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestMultipleConnections.java	2005-07-19 19:41:45.000000000 +0200
@@ -85,7 +85,7 @@
     /**
      * create a connection and wait
      */
-    protected Connection createObject() {
+    public Connection createObject() {
 
         try {
             Class.forName("org.hsqldb.jdbcDriver");
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java.orig	2005-03-02 14:50:57.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java	2005-07-19 19:41:45.000000000 +0200
@@ -40,9 +40,9 @@
  */
 class TestPreparedSubQueries {
 
-    private Connection con = null;
+    public Connection con = null;
 
-    private class sqlStmt {
+    public class sqlStmt {
 
         boolean prepare;
         boolean update;
@@ -57,7 +57,7 @@
     }
     ;
 
-    private sqlStmt[] stmtArray = {
+    public sqlStmt[] stmtArray = {
         new sqlStmt("drop table a if exists", false, false),
         new sqlStmt("create cached table a (a int identity,b int)", false,
                     false),
@@ -77,7 +77,7 @@
             "update a set b=300 where b>(select b from a X where X.a=?)",
             true, true)
     };
-    private Object[][] stmtArgs = {
+    public Object[][] stmtArgs = {
         {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, { new Integer(2) },
         { new Integer(2) }
     };
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestQuotes.java.orig	2005-03-02 14:50:57.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestQuotes.java	2005-07-19 19:41:45.000000000 +0200
@@ -50,14 +50,14 @@
  */
 public class TestQuotes extends TestCase {
 
-    private static final String CREATETABLE =
+    public static final String CREATETABLE =
         "create table quotetest (test varchar)";
-    private static final String DELETE = "delete from quotetest";
-    private static final String TESTSTRING =
+    public static final String DELETE = "delete from quotetest";
+    public static final String TESTSTRING =
         "insert into quotetest (test) values (?)";
-    private static final String NOQUOTES = "the house of the dog of kevin";
-    private static final String QUOTES   = "kevin's dog's house";
-    private static final String RESULT   = "select * from quotetest";
+    public static final String NOQUOTES = "the house of the dog of kevin";
+    public static final String QUOTES   = "kevin's dog's house";
+    public static final String RESULT   = "select * from quotetest";
 
     public TestQuotes(String testName) {
         super(testName);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSchemaParse.java.orig	2005-06-04 14:06:27.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSchemaParse.java	2005-07-19 19:41:45.000000000 +0200
@@ -42,9 +42,9 @@
 
     Connection                  con = null;
     Statement                   statement;
-    private static final String ipref = "INFORMATION_SCHEMA.";
+    public static final String ipref = "INFORMATION_SCHEMA.";
 
-    protected void setUp() throws Exception {
+    public void setUp() throws Exception {
 
         org.hsqldb.jdbcDriver.class.getName();
 
@@ -96,9 +96,9 @@
 
     // Want to permit the SHUTDOWN SQL command in tearDown() to fail iff
     // the test method run has tested SHUTDOWN.
-    private boolean shutdownTested = false;
+    public boolean shutdownTested = false;
 
-    protected void tearDown() throws Exception {
+    public void tearDown() throws Exception {
 
         // Shut down to destroy all of the DB objects (only works because
         // it's an in-memory instance.
@@ -931,11 +931,11 @@
     }
 
 /** @todo fredt - need to define additional identifiers to use for all cases of expect */
-    private static final int SQL_ABORT   = -1234;
-    private static final int SQL_INITIAL = -1233;
-    private static final int SQL_FAIL    = -1;
+    public static final int SQL_ABORT   = -1234;
+    public static final int SQL_INITIAL = -1233;
+    public static final int SQL_FAIL    = -1;
 
-    private void execSQL(String s, boolean ignoreError) throws SQLException {
+    public void execSQL(String s, boolean ignoreError) throws SQLException {
 
         try {
             statement.execute(s);
@@ -949,7 +949,7 @@
         }
     }
 
-    private void execSQL(String m, String s, int expect) {
+    public void execSQL(String m, String s, int expect) {
 
         int retval = SQL_INITIAL;
 
@@ -965,11 +965,11 @@
     }
 
 /** @todo fredt - this method body seems to be incorrect */
-    private void execSQL(String s, int expect) {
+    public void execSQL(String s, int expect) {
         execSQL(s, s, expect);
     }
 
-    private int queryRowCount(String query) throws SQLException {
+    public int queryRowCount(String query) throws SQLException {
 
         int count = 0;
 
@@ -990,7 +990,7 @@
         return count;
     }
 
-    private int tableRowCount(String tableName) throws SQLException {
+    public int tableRowCount(String tableName) throws SQLException {
 
         String query = "SELECT count(*) FROM " + tableName;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSql.java.orig	2005-06-12 20:48:38.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSql.java	2005-07-19 19:41:45.000000000 +0200
@@ -58,7 +58,7 @@
         super(name);
     }
 
-    protected void setUp() {
+    public void setUp() {
 
         super.setUp();
 
@@ -623,7 +623,7 @@
         }
     }
 
-    protected void tearDown() {
+    public void tearDown() {
 
         try {
             connection.close();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java.orig	2005-03-02 14:50:57.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java	2005-07-19 19:41:45.000000000 +0200
@@ -63,7 +63,7 @@
         super(name);
     }
 
-    protected void setUp() {
+    public void setUp() {
 
         user        = "sa";
         password    = "";
@@ -387,7 +387,7 @@
         assertEquals(true, success);
     }
 
-    protected void tearDown() {
+    public void tearDown() {
 
         try {
             cConnection.close();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSqlTool.java.orig	2005-03-02 14:50:57.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSqlTool.java	2005-07-19 19:41:45.000000000 +0200
@@ -45,7 +45,7 @@
      * Does not have getters/setters.  No purpose would be served by
      * getters and setters, other than over-engineering.
      */
-    private class TestSqlFile {
+    public class TestSqlFile {
 
         public File   file;
         public String description;
@@ -66,7 +66,7 @@
     /**
      * List of SQL files, with a description of the purpose.
      */
-    private class SqlFileList extends ArrayList {
+    public class SqlFileList extends ArrayList {
 
         /**
          * Loads a list of SQL files and descriptions for the specified
@@ -109,7 +109,7 @@
 
     SqlToolHarness harness = new SqlToolHarness();
 
-    private void runTestsInList(String testList) throws Exception {
+    public void runTestsInList(String testList) throws Exception {
 
         SqlFileList fileList = new SqlFileList(testList);
         TestSqlFile sqlFile;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSubselect.java.orig	2005-03-02 14:50:57.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestSubselect.java	2005-07-19 19:41:45.000000000 +0200
@@ -52,16 +52,16 @@
     //------------------------------------------------------------
     // Class variables
     //------------------------------------------------------------
-    private static final String databaseDriver = "org.hsqldb.jdbcDriver";
-    private static final String databaseURL =
+    public static final String databaseDriver = "org.hsqldb.jdbcDriver";
+    public static final String databaseURL =
         "jdbc:hsqldb:/hsql/test/subselect";
-    private static final String databaseUser     = "sa";
-    private static final String databasePassword = "";
+    public static final String databaseUser     = "sa";
+    public static final String databasePassword = "";
 
     //------------------------------------------------------------
     // Instance variables
     //------------------------------------------------------------
-    private Connection jdbcConnection;
+    public Connection jdbcConnection;
 
     //------------------------------------------------------------
     // Constructors
@@ -77,12 +77,12 @@
     //------------------------------------------------------------
     // Class methods
     //------------------------------------------------------------
-    protected static Connection getJDBCConnection() throws SQLException {
+    public static Connection getJDBCConnection() throws SQLException {
         return DriverManager.getConnection(databaseURL, databaseUser,
                                            databasePassword);
     }
 
-    protected void setUp() throws Exception {
+    public void setUp() throws Exception {
 
         super.setUp();
         Class.forName(databaseDriver);
@@ -92,7 +92,7 @@
         createDataset();
     }
 
-    protected void tearDown() throws Exception {
+    public void tearDown() throws Exception {
 
         super.tearDown();
         jdbcConnection.close();
@@ -137,7 +137,7 @@
     //------------------------------------------------------------
     // Helper methods
     //------------------------------------------------------------
-    private static void compareResults(String sql, String[] expected,
+    public static void compareResults(String sql, String[] expected,
                                        Connection jdbcConnection)
                                        throws SQLException {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestTimestamp.java.orig	2005-03-02 14:50:57.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestTimestamp.java	2005-07-19 19:41:45.000000000 +0200
@@ -57,7 +57,7 @@
         super(testName);
     }
 
-    private void initOracle() throws Exception {
+    public void initOracle() throws Exception {
 
         Class.forName("oracle.jdbc.driver.OracleDriver");
 
@@ -67,7 +67,7 @@
         conn.setAutoCommit(false);
     }
 
-    private void initHypersonic() throws Exception {
+    public void initHypersonic() throws Exception {
 
         Class.forName("org.hsqldb.jdbcDriver");
 
@@ -102,9 +102,9 @@
 //        dropTestTable();
     }
 */
-    private void checkExceptionTableExistsOracle(SQLException e) {}
+    public void checkExceptionTableExistsOracle(SQLException e) {}
 
-    private void checkExceptionTableExistsHsql(SQLException e) {
+    public void checkExceptionTableExistsHsql(SQLException e) {
 
         Assert.assertTrue("Error code of SQLException is wrong",
                           e.getErrorCode()
@@ -151,7 +151,7 @@
 //        dropTestTable();
     }
 
-    private void dropAllTables() throws Exception {
+    public void dropAllTables() throws Exception {
 
         dropTestTable(nameTable);
         dropTestTable("\"SITE_LIST_SITE\"");
@@ -161,9 +161,9 @@
         dropTestTable("\"CASH_CURR_VALUE\"");
     }
 
-    private String nameTable = null;
+    public String nameTable = null;
 
-    private void doTest() throws Exception {
+    public void doTest() throws Exception {
 
         PreparedStatement ps = conn.prepareStatement("select max(T) T1 from "
             + nameTable + " where ID=?");
@@ -217,10 +217,10 @@
         }
     }
 
-    private static Timestamp testTS =
+    public static Timestamp testTS =
         new Timestamp(System.currentTimeMillis());
 
-    private void insertTestData() throws Exception {
+    public void insertTestData() throws Exception {
 
 //        conn.createStatement().executeUpdate("INSERT INTO \"SITE_LIST_SITE\" VALUES(23,1,'ru','RU',NULL,'\u041f\u0440\u043e\u0431\u043d\u044b\u0439 \u0441\u0430\u0439\u0442',NULL,0,'''/front_styles.css''',1,NULL,0)");
 //        conn.createStatement().executeUpdate("INSERT INTO \"SITE_VIRTUAL_HOST\" VALUES(36,23,'test-host')");
@@ -245,7 +245,7 @@
         conn.commit();
     }
 
-    private void createTestTable(String sql) throws Exception {
+    public void createTestTable(String sql) throws Exception {
 
         Statement ps = conn.createStatement();
 
@@ -255,7 +255,7 @@
         ps = null;
     }
 
-    private void dropTestTable(String nameTableDrop) throws Exception {
+    public void dropTestTable(String nameTableDrop) throws Exception {
 
         String    sql = "drop table " + nameTableDrop;
         Statement ps  = conn.createStatement();
@@ -269,14 +269,14 @@
         ps = null;
     }
 
-    private void setTimeZone() {
+    public void setTimeZone() {
 
         timeZone = TimeZone.getTimeZone("Asia/Irkutsk");
 
         TimeZone.setDefault(timeZone);
     }
 
-    private Timestamp getCurrentCurs() throws Exception {
+    public Timestamp getCurrentCurs() throws Exception {
 
         long idCurrency = 134;
         long idSite     = 23;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestUtil.java.orig	2005-05-11 15:39:08.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/test/TestUtil.java	2005-07-19 19:41:45.000000000 +0200
@@ -174,7 +174,7 @@
      * SQL for the statement).
      * @param line line of the script file where this section started
      */
-    private static void testSection(Statement stat, HsqlArrayList section,
+    public static void testSection(Statement stat, HsqlArrayList section,
                                     int line) {
 
         //create an appropriate instance of ParsedSection
@@ -198,7 +198,7 @@
      * @param aSection Vector containing the section of script
      * @return a ParesedSection object
      */
-    private static ParsedSection parsedSectionFactory(
+    public static ParsedSection parsedSectionFactory(
             HsqlArrayList aSection) {
 
         //type of the section
@@ -292,26 +292,26 @@
      * Type of this test.
      * @see isValidCase() for allowed values
      */
-    protected char type = ' ';
+    public char type = ' ';
 
     /** error message for this section */
     String message = null;
 
     /** contents of the section as an array of Strings, one for each line in the section. */
-    protected String[] lines = null;
+    public String[] lines = null;
 
     /** number of the last row containing results in sectionLines */
-    protected int resEndRow = 0;
+    public int resEndRow = 0;
 
     /** SQL query to be submitted to the database. */
-    protected String sqlString = null;
+    public String sqlString = null;
 
     /**
      * Common constructor functions for this family.
      * @param aLines Array of the script lines containing the section of script.
      * database
      */
-    protected ParsedSection(String[] aLines) {
+    public ParsedSection(String[] aLines) {
 
         lines = aLines;
 
@@ -388,14 +388,14 @@
      * returns a String representation of the expected result for the test
      * @return The expected result(s) for the test
      */
-    protected abstract String getResultString();
+    public abstract String getResultString();
 
     /**
      *  returns the error message for the section
      *
      * @return message
      */
-    protected String getMessage() {
+    public String getMessage() {
         return message;
     }
 
@@ -403,7 +403,7 @@
      * returns the type of this section
      * @return type of this section
      */
-    protected char getType() {
+    public char getType() {
         return type;
     }
 
@@ -411,7 +411,7 @@
      * returns the SQL statement for this section
      * @return SQL statement for this section
      */
-    protected String getSql() {
+    public String getSql() {
         return sqlString;
     }
 
@@ -420,7 +420,7 @@
      * @param aStatement Statement object
      * @return true if the result(s) are as expected, otherwise false
      */
-    protected boolean test(Statement aStatement) {
+    public boolean test(Statement aStatement) {
 
         try {
             aStatement.execute(getSql());
@@ -438,7 +438,7 @@
      * @param aCode type code to validate.
      * @return true if the type code is valid, otherwise false.
      */
-    protected static boolean isValidCode(char aCode) {
+    public static boolean isValidCode(char aCode) {
 
         /* Allowed values for test codes are:
          * (note that UPPERCASE codes, while valid are only processed if the
@@ -471,15 +471,15 @@
 /** Represents a ParsedSection for a ResultSet test */
 class ResultSetParsedSection extends ParsedSection {
 
-    private String delim = System.getProperty("TestUtilFieldDelimiter", ",");
-    private String[] expectedRows = null;
+    public String delim = System.getProperty("TestUtilFieldDelimiter", ",");
+    public String[] expectedRows = null;
 
     /**
      * constructs a new instance of ResultSetParsedSection, interpreting
      * the supplied results as one or more lines of delimited field values
      * @param lines String[]
      */
-    protected ResultSetParsedSection(String[] lines) {
+    public ResultSetParsedSection(String[] lines) {
 
         super(lines);
 
@@ -495,7 +495,7 @@
         }
     }
 
-    protected String getResultString() {
+    public String getResultString() {
 
         StringBuffer printVal = new StringBuffer();
 
@@ -506,7 +506,7 @@
         return printVal.toString();
     }
 
-    protected boolean test(Statement aStatement) {
+    public boolean test(Statement aStatement) {
 
         try {
             try {
@@ -606,7 +606,7 @@
         return true;
     }
 
-    private String[] getExpectedRows() {
+    public String[] getExpectedRows() {
         return expectedRows;
     }
 }
@@ -617,7 +617,7 @@
     //expected update count
     int countWeWant;
 
-    protected UpdateParsedSection(String[] lines) {
+    public UpdateParsedSection(String[] lines) {
 
         super(lines);
 
@@ -625,15 +625,15 @@
         countWeWant = Integer.parseInt(lines[0]);
     }
 
-    protected String getResultString() {
+    public String getResultString() {
         return Integer.toString(getCountWeWant());
     }
 
-    private int getCountWeWant() {
+    public int getCountWeWant() {
         return countWeWant;
     }
 
-    protected boolean test(Statement aStatement) {
+    public boolean test(Statement aStatement) {
 
         try {
             try {
@@ -666,18 +666,18 @@
 /** Represents a ParsedSection for silent execution */
 class SilentParsedSection extends ParsedSection {
 
-    protected SilentParsedSection(String[] lines) {
+    public SilentParsedSection(String[] lines) {
 
         super(lines);
 
         type = 's';
     }
 
-    protected String getResultString() {
+    public String getResultString() {
         return null;
     }
 
-    protected boolean test(Statement aStatement) {
+    public boolean test(Statement aStatement) {
 
         try {
             aStatement.execute(getSql());
@@ -691,9 +691,9 @@
 class CountParsedSection extends ParsedSection {
 
     //expected row count
-    private int countWeWant;
+    public int countWeWant;
 
-    protected CountParsedSection(String[] lines) {
+    public CountParsedSection(String[] lines) {
 
         super(lines);
 
@@ -701,15 +701,15 @@
         countWeWant = Integer.parseInt(lines[0]);
     }
 
-    protected String getResultString() {
+    public String getResultString() {
         return Integer.toString(getCountWeWant());
     }
 
-    private int getCountWeWant() {
+    public int getCountWeWant() {
         return countWeWant;
     }
 
-    protected boolean test(Statement aStatement) {
+    public boolean test(Statement aStatement) {
 
         try {
 
@@ -760,18 +760,18 @@
 /** Represents a ParsedSection for an Exception test */
 class ExceptionParsedSection extends ParsedSection {
 
-    protected ExceptionParsedSection(String[] lines) {
+    public ExceptionParsedSection(String[] lines) {
 
         super(lines);
 
         type = 'e';
     }
 
-    protected String getResultString() {
+    public String getResultString() {
         return "SQLException";
     }
 
-    protected boolean test(Statement aStatement) {
+    public boolean test(Statement aStatement) {
 
         try {
             aStatement.execute(getSql());
@@ -790,14 +790,14 @@
 /** Represents a ParsedSection for a section with blank type */
 class BlankParsedSection extends ParsedSection {
 
-    protected BlankParsedSection(String[] lines) {
+    public BlankParsedSection(String[] lines) {
 
         super(lines);
 
         type = ' ';
     }
 
-    protected String getResultString() {
+    public String getResultString() {
         return "No result specified for this section";
     }
 }
@@ -805,14 +805,14 @@
 /** Represents a ParsedSection that is to be ignored */
 class IgnoreParsedSection extends ParsedSection {
 
-    protected IgnoreParsedSection(String[] lines, char aType) {
+    public IgnoreParsedSection(String[] lines, char aType) {
 
         super(lines);
 
         type = aType;
     }
 
-    protected String getResultString() {
+    public String getResultString() {
         return "This section, of type '" + getType() + "' was ignored";
     }
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/types/Binary.java.orig	2005-03-02 14:50:58.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/types/Binary.java	2005-07-19 19:41:45.000000000 +0200
@@ -46,7 +46,7 @@
  */
 public class Binary {
 
-    private byte[] data;
+    public byte[] data;
     int            hash;
 
     /**
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/types/JavaObject.java.orig	2005-03-02 14:50:58.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/types/JavaObject.java	2005-07-19 19:41:45.000000000 +0200
@@ -65,7 +65,7 @@
  */
 public class JavaObject {
 
-    private byte[] data;
+    public byte[] data;
 
     /**
      * Constructor used inside the engine when an already serialized
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/CodeSwitcher.java.orig	2005-06-08 00:24:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/CodeSwitcher.java	2005-07-19 19:41:45.000000000 +0200
@@ -109,13 +109,13 @@
  */
 public class CodeSwitcher {
 
-    private static final String ls = System.getProperty("line.separator",
+    public static final String ls = System.getProperty("line.separator",
         "\n");
-    private Vector           vList;
-    private Vector           vSwitchOn;
-    private Vector           vSwitchOff;
-    private Vector           vSwitches;
-    private static final int MAX_LINELENGTH = 82;
+    public Vector           vList;
+    public Vector           vSwitchOn;
+    public Vector           vSwitchOff;
+    public Vector           vSwitches;
+    public static final int MAX_LINELENGTH = 82;
 
     /**
      * Method declaration
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/CommonSwing.java.orig	2005-06-08 00:24:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/CommonSwing.java	2005-07-19 19:41:45.000000000 +0200
@@ -86,12 +86,12 @@
  */
 class CommonSwing {
 
-    protected static String messagerHeader = "Database Manager Swing Error";
-    protected static String Native         = "Native";
-    protected static String Java           = "Java";
-    protected static String Motif          = "Motif";
-    protected static String plaf           = "plaf";
-    protected static String GTK            = "GTK";
+    public static String messagerHeader = "Database Manager Swing Error";
+    public static String Native         = "Native";
+    public static String Java           = "Java";
+    public static String Motif          = "Motif";
+    public static String plaf           = "plaf";
+    public static String GTK            = "GTK";
 
     // (ulrivo): An actual Image.
     static Image getIcon(String target) {
@@ -135,7 +135,7 @@
     }
 
     // (weconsultants@users: Callable errorMessage method
-    protected static void errorMessage(String errorMessage) {
+    public static void errorMessage(String errorMessage) {
 
         /**
          * Display Jpanel Error messages any text Errors. Overloads
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java.orig	2005-06-08 00:24:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java	2005-07-19 19:41:45.000000000 +0200
@@ -59,8 +59,8 @@
  */
 class ConnectionDialogCommon {
 
-    private static String[][]       connTypes;
-    private static final String[][] sJDBCTypes = {
+    public static String[][]       connTypes;
+    public static final String[][] sJDBCTypes = {
         {
             "HSQL Database Engine In-Memory", "org.hsqldb.jdbcDriver",
             "jdbc:hsqldb:mem:."
@@ -160,8 +160,8 @@
  */
     }
 
-    private static final String fileName       = "hsqlprefs.dat";
-    private static File         recentSettings = null;
+    public static final String fileName       = "hsqlprefs.dat";
+    public static File         recentSettings = null;
 
     static Hashtable loadRecentConnectionSettings() throws IOException {
 
@@ -246,7 +246,7 @@
      * @param settings ConnectionSetting[]
      * @throw IOException if something goes wrong while writing
      */
-    private static void storeRecentConnectionSettings(Hashtable settings) {
+    public static void storeRecentConnectionSettings(Hashtable settings) {
 
         try {
             if (recentSettings == null) {
@@ -311,7 +311,7 @@
         } catch (Throwable t) {}
     }
 
-    private static String homedir = null;
+    public static String homedir = null;
 
     public static void setHomeDir() {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialog.java.orig	2005-06-08 00:24:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialog.java	2005-07-19 19:41:45.000000000 +0200
@@ -67,12 +67,12 @@
 class ConnectionDialog extends Dialog
 implements ActionListener, ItemListener {
 
-    protected Connection mConnection;
-    protected TextField  mName, mDriver, mURL, mUser, mPassword;
-    protected Label      mError;
-    private String[][]   connTypes;
-    private Hashtable    settings;
-    private Choice       types, recent;
+    public Connection mConnection;
+    public TextField  mName, mDriver, mURL, mUser, mPassword;
+    public Label      mError;
+    public String[][]   connTypes;
+    public Hashtable    settings;
+    public Choice       types, recent;
 
     /**
      * Method declaration
@@ -110,7 +110,7 @@
      * Method declaration
      *
      */
-    private void create() {
+    public void create() {
 
         Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
 
@@ -305,7 +305,7 @@
      *
      * @return
      */
-    protected static Label createLabel(String s) {
+    public static Label createLabel(String s) {
 
         Label l = new Label(s);
 
@@ -322,7 +322,7 @@
      *
      * @return
      */
-    protected static Panel createBorderPanel(Component center) {
+    public static Panel createBorderPanel(Component center) {
 
         Panel p = new Panel();
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java.orig	2005-06-08 00:24:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java	2005-07-19 19:41:45.000000000 +0200
@@ -82,14 +82,14 @@
     /**
      * Comment for <code>serialVersionUID</code>
      */
-    private static final long serialVersionUID = 1L;
-    private Connection        mConnection;
-    private JTextField        mName, mDriver, mURL, mUser;
-    private JPasswordField    mPassword;
-    private String[][]        connTypes;
-    private Hashtable         settings;
-    private JButton           okCancel, clear;
-    private JComboBox mSettingName =
+    public static final long serialVersionUID = 1L;
+    public Connection        mConnection;
+    public JTextField        mName, mDriver, mURL, mUser;
+    public JPasswordField    mPassword;
+    public String[][]        connTypes;
+    public Hashtable         settings;
+    public JButton           okCancel, clear;
+    public JComboBox mSettingName =
         new JComboBox(loadRecentConnectionSettings());
 
     public static Connection createConnection(String driver, String url,
@@ -104,7 +104,7 @@
         super(owner, title, true);
     }
 
-    private void create() {
+    public void create() {
 
         Box main     = Box.createHorizontalBox();
         Box labels   = Box.createVerticalBox();
@@ -271,7 +271,7 @@
         return dialog.mConnection;
     }
 
-    private static JLabel createLabel(String s) {
+    public static JLabel createLabel(String s) {
 
         JLabel l = new JLabel(s);
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ConnectionSetting.java.orig	2005-03-02 14:50:58.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ConnectionSetting.java	2005-07-19 19:41:45.000000000 +0200
@@ -39,7 +39,7 @@
  */
 public class ConnectionSetting implements java.io.Serializable {
 
-    private String name, driver, url, user, pw;
+    public String name, driver, url, user, pw;
 
     String getName() {
         return name;
@@ -62,7 +62,7 @@
     }
 
     // Constructors
-    private ConnectionSetting() {}
+    public ConnectionSetting() {}
     ;
 
     ConnectionSetting(String name, String driver, String url, String user,
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/CSVWriter.java.orig	2005-03-02 14:50:58.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/CSVWriter.java	2005-07-19 19:41:45.000000000 +0200
@@ -49,10 +49,10 @@
  */
 public class CSVWriter {
 
-    private String             newline = System.getProperty("line.separator");
-    private OutputStreamWriter writer  = null;
-    private int                nbrCols = 0;
-    private int                nbrRows = 0;
+    public String             newline = System.getProperty("line.separator");
+    public OutputStreamWriter writer  = null;
+    public int                nbrCols = 0;
+    public int                nbrRows = 0;
 
     /**
      * constructor.
@@ -100,7 +100,7 @@
         this.writer.close();
     }
 
-    private void doWriteData(String[] values) throws IOException {
+    public void doWriteData(String[] values) throws IOException {
 
         for (int i = 0; i < values.length; i++) {
             if (i > 0) {
@@ -119,7 +119,7 @@
         this.nbrRows++;
     }
 
-    private String toCsvValue(String str) {
+    public String toCsvValue(String str) {
 
         StringBuffer sb = new StringBuffer();
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/DatabaseManagerCommon.java.orig	2005-06-08 00:24:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/DatabaseManagerCommon.java	2005-07-19 19:41:45.000000000 +0200
@@ -92,7 +92,7 @@
  */
 class DatabaseManagerCommon {
 
-    private static Random rRandom    = new Random(100);
+    public static Random rRandom    = new Random(100);
     static String[]       selectHelp = {
         "SELECT * FROM ",
         "SELECT [LIMIT n m] [DISTINCT] \n"
@@ -405,5 +405,5 @@
         return (System.currentTimeMillis() - start);
     }
 
-    private DatabaseManagerCommon() {}
+    public DatabaseManagerCommon() {}
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/DatabaseManager.java.orig	2005-06-08 00:24:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/DatabaseManager.java	2005-07-19 19:41:45.000000000 +0200
@@ -98,7 +98,7 @@
 public class DatabaseManager extends Applet
 implements ActionListener, WindowListener, KeyListener {
 
-    private static final String DEFAULT_RCFILE =
+    public static final String DEFAULT_RCFILE =
         System.getProperty("user.home") + "/dbmanager.rc";
     static final String NL         = System.getProperty("line.separator");
     static final int    iMaxRecent = 24;
@@ -289,7 +289,7 @@
         m.connect(c);
     }
 
-    private static void showUsage() {
+    public static void showUsage() {
 
         System.out.println(
             "Usage: java DatabaseManager [--options]\n"
@@ -1149,7 +1149,7 @@
      *
      * @param s
      */
-    private void addToRecent(String s) {
+    public void addToRecent(String s) {
 
         for (int i = 0; i < iMaxRecent; i++) {
             if (s.equals(sRecent[i])) {
@@ -1180,7 +1180,7 @@
      * Method declaration
      *
      */
-    private void initGUI() {
+    public void initGUI() {
 
         Panel pQuery   = new Panel();
         Panel pCommand = new Panel();
@@ -1240,7 +1240,7 @@
      * Method declaration
      *
      */
-    protected void refreshTree() {
+    public void refreshTree() {
 
         tTree.removeAll();
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java.orig	2005-06-30 01:15:14.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java	2005-07-19 19:41:45.000000000 +0200
@@ -188,14 +188,14 @@
      * be reserved for single-letter switches which can be mixed like
      * "-u -r -l" = "-url".  -blaine
      */
-    private static final String DEFAULT_RCFILE =
+    public static final String DEFAULT_RCFILE =
         System.getProperty("user.home") + "/dbmanager.rc";
-    private static final String HELP_TEXT =
+    public static final String HELP_TEXT =
         "See the forums, mailing lists, and HSQLDB User Guide\n"
         + "at http://hsqldb.org.\n\n"
         + "Please paste the following version identifier with any\n"
         + "problem reports or help requests:  $Revision: 1.57 $";
-    private static final String ABOUT_TEXT =
+    public static final String ABOUT_TEXT =
         "$Revision: 1.57 $ of DatabaseManagerSwing\n\n"
         + "Copyright (c) 1995-2000, The Hypersonic SQL Group.\n"
         + "Copyright (c) 2001-2005, The HSQL Development Group.\n"
@@ -235,10 +235,10 @@
     static boolean         bMustExit;
     String                 ifHuge = "";
     JToolBar               jtoolbar;
-    private boolean        showSchemas  = true;
-    private boolean        showTooltips = true;
-    private boolean        autoRefresh  = true;
-    private boolean        gridFormat   = true;
+    public boolean        showSchemas  = true;
+    public boolean        showTooltips = true;
+    public boolean        autoRefresh  = true;
+    public boolean        gridFormat   = true;
 
     // Added: (weconsultants@users)
     static DatabaseManagerSwing refForFontDialogSwing;
@@ -274,14 +274,14 @@
         new JRadioButtonMenuItem("Motif Look & Feel");
     JLabel                      jStatusLine;
     static String               READY_STATUS         = "Ready";
-    private static final String AUTOCOMMIT_BOX_TEXT  = "Autocommit mode";
-    private static final String LOGGING_BOX_TEXT     = "Logging mode";
-    private static final String SHOWSCHEMAS_BOX_TEXT = "Show schemas";
-    private static final String AUTOREFRESH_BOX_TEXT = "Auto-refresh tree";
-    private static final String SHOWTIPS_BOX_TEXT    = "Show Tooltips";
-    private static final String ROWCOUNTS_BOX_TEXT   = "Show row counts";
-    private static final String SHOWSYS_BOX_TEXT     = "Show system tables";
-    private static final String GRID_BOX_TEXT =
+    public static final String AUTOCOMMIT_BOX_TEXT  = "Autocommit mode";
+    public static final String LOGGING_BOX_TEXT     = "Logging mode";
+    public static final String SHOWSCHEMAS_BOX_TEXT = "Show schemas";
+    public static final String AUTOREFRESH_BOX_TEXT = "Auto-refresh tree";
+    public static final String SHOWTIPS_BOX_TEXT    = "Show Tooltips";
+    public static final String ROWCOUNTS_BOX_TEXT   = "Show row counts";
+    public static final String SHOWSYS_BOX_TEXT     = "Show system tables";
+    public static final String GRID_BOX_TEXT =
         "Show results in Grid (a.o.t. Text)";
 
     // variables to hold the default cursors for these top level swing objects
@@ -290,14 +290,14 @@
     Cursor        txtCommandCursor;
     Cursor        txtResultCursor;
     HashMap       tipMap     = new HashMap();
-    private JMenu mnuSchemas = new JMenu("Schemas");
+    public JMenu mnuSchemas = new JMenu("Schemas");
 
     /**
      * Wait Cursor
      */
 
     // Changed: (weconsultants@users): commonted out the, out of the box, cursor to use a custom cursor
-    private final Cursor waitCursor = new Cursor(Cursor.WAIT_CURSOR);
+    public final Cursor waitCursor = new Cursor(Cursor.WAIT_CURSOR);
 
     //getToolkit().createCustomCursor(CommonSwing.getIcon("SystemCursor"),
     //                                new Point(4, 4), "HourGlass cursor");
@@ -308,7 +308,7 @@
     static String  defPassword = "";
     static String  defScript;
     static String  defDirectory;
-    private String schemaFilter = null;
+    public String schemaFilter = null;
 
     public void init() {
 
@@ -491,7 +491,7 @@
         }
     }
 
-    private static void showUsage() {
+    public static void showUsage() {
 
         System.out.println(
             "Usage: java DatabaseManagerSwing [--options]\n"
@@ -508,7 +508,7 @@
             + "(Single-hypen switches like '-driver' are also supported)");
     }
 
-    private void insertTestData() {
+    public void insertTestData() {
 
         try {
             DatabaseManagerCommon.createTestTables(sStatement);
@@ -533,7 +533,7 @@
         this.bMustExit = b;
     }
 
-    private DBMPrefs prefs = null;
+    public DBMPrefs prefs = null;
 
     public void main() {
 
@@ -749,7 +749,7 @@
         txtCommand.requestFocus();
     }
 
-    private void addMenu(JMenuBar b, String name, Object[] items) {
+    public void addMenu(JMenuBar b, String name, Object[] items) {
 
         JMenu menu = new JMenu(name);
 
@@ -758,7 +758,7 @@
         b.add(menu);
     }
 
-    private void addMenuItems(JMenu f, Object[] m) {
+    public void addMenuItems(JMenu f, Object[] m) {
 
         /*
          * This method needs to be completely written or just
@@ -1049,7 +1049,7 @@
         }
     }
 
-    private void displayResults() {
+    public void displayResults() {
 
         if (gridFormat) {
             setResultsInGrid();
@@ -1058,7 +1058,7 @@
         }
     }
 
-    private void setResultsInGrid() {
+    public void setResultsInGrid() {
 
         pResult.removeAll();
         pResult.add(gScrollPane, BorderLayout.CENTER);
@@ -1067,7 +1067,7 @@
         pResult.repaint();
     }
 
-    private void setResultsInText() {
+    public void setResultsInText() {
 
         pResult.removeAll();
         pResult.add(txtResultScroll, BorderLayout.CENTER);
@@ -1076,7 +1076,7 @@
         pResult.repaint();
     }
 
-    private void showHelp(String[] help) {
+    public void showHelp(String[] help) {
 
         txtCommand.setText(help[0]);
 
@@ -1134,16 +1134,16 @@
         }
     }
 
-    private void clear() {
+    public void clear() {
 
         ifHuge = "";
 
         txtCommand.setText(ifHuge);
     }
 
-    private String busyText = null;
+    public String busyText = null;
 
-    private void backgroundIt(Runnable r, String description) {
+    public void backgroundIt(Runnable r, String description) {
 
         if (busyText != null) {
             Toolkit.getDefaultToolkit().beep();
@@ -1189,7 +1189,7 @@
         setStatusLine(busyText);
     }
 
-    private Runnable treeRefreshRunnable = new Runnable() {
+    public Runnable treeRefreshRunnable = new Runnable() {
 
         public void run() {
 
@@ -1208,15 +1208,15 @@
     /**
      * Schedules to run in a Gui-safe thread
      */
-    protected void executeCurrentSQL() {
+    public void executeCurrentSQL() {
         backgroundIt(new StatementExecRunnable(), "Executing SQL");
     }
 
-    protected class StatementExecRunnable implements Runnable {
+    public class StatementExecRunnable implements Runnable {
 
-        private String sCmd;
+        public String sCmd;
 
-        protected StatementExecRunnable() {
+        public StatementExecRunnable() {
 
             if (4096 <= ifHuge.length()) {
                 sCmd = ifHuge;
@@ -1255,7 +1255,7 @@
     }
     ;
 
-    private void executeSQL() {
+    public void executeSQL() {
 
         String[] g   = new String[1];
         String   sql = txtCommand.getText();
@@ -1320,7 +1320,7 @@
         }
     }
 
-    private void updateResult() {
+    public void updateResult() {
 
         if (gridFormat) {
 
@@ -1348,7 +1348,7 @@
      * VARCHARs, because this is the only class where there is any
      * ambiguity about where there is a null stored or not.
      */
-    private void formatResultSet(ResultSet r) {
+    public void formatResultSet(ResultSet r) {
 
         if (r == null) {
             String[] g = new String[1];
@@ -1401,7 +1401,7 @@
         }
     }
 
-    private void testPerformance() {
+    public void testPerformance() {
 
         String       all   = txtCommand.getText();
         StringBuffer b     = new StringBuffer();
@@ -1485,7 +1485,7 @@
      * Method declaration
      *
      */
-    private void showResultInText() {
+    public void showResultInText() {
 
         Object[] col   = gResult.getHead();
         int      width = col.length;
@@ -1555,7 +1555,7 @@
         txtResult.setText(b.toString());
     }
 
-    private void addToRecent(String s) {
+    public void addToRecent(String s) {
 
         for (int i = 0; i < iMaxRecent; i++) {
             if (s.equals(sRecent[i])) {
@@ -1582,7 +1582,7 @@
         iRecent = (iRecent + 1) % iMaxRecent;
     }
 
-    private void initGUI() {
+    public void initGUI() {
 
         JPanel pCommand = new JPanel();
 
@@ -1676,7 +1676,7 @@
 
     /* Simple tree node factory method - set's parent and user object.
      */
-    private DefaultMutableTreeNode makeNode(Object userObject,
+    public DefaultMutableTreeNode makeNode(Object userObject,
             MutableTreeNode parent) {
 
         DefaultMutableTreeNode node = new DefaultMutableTreeNode(userObject);
@@ -1688,14 +1688,14 @@
         return node;
     }
 
-    private static final String[] usertables       = {
+    public static final String[] usertables       = {
         "TABLE", "GLOBAL TEMPORARY", "VIEW", "SYSTEM TABLE"
     };
-    private static final String[] nonSystables     = {
+    public static final String[] nonSystables     = {
         "TABLE", "GLOBAL TEMPORARY", "VIEW"
     };
-    private static final HashSet  oracleSysUsers   = new HashSet();
-    private static final String[] oracleSysSchemas = {
+    public static final HashSet  oracleSysUsers   = new HashSet();
+    public static final String[] oracleSysSchemas = {
         "SYS", "SYSTEM", "OUTLN", "DBSNMP", "OUTLN", "MDSYS", "ORDSYS",
         "ORDPLUGINS", "CTXSYS", "DSSYS", "PERFSTAT", "WKPROXY", "WKSYS",
         "WMSYS", "XDB", "ANONYMOUS", "ODM", "ODM_MTR", "OLAPSYS", "TRACESVR",
@@ -1711,7 +1711,7 @@
     /**
      * Schedules to run in a Gui-safe thread
      */
-    protected void refreshTree() {
+    public void refreshTree() {
         backgroundIt(treeRefreshRunnable, "Refreshing object tree");
     }
 
@@ -1720,7 +1720,7 @@
      *
      * This method executes in current thread
      */
-    protected void directRefreshTree() {
+    public void directRefreshTree() {
 
         int[]                  rowCounts;
         DefaultMutableTreeNode propertiesNode;
@@ -1941,7 +1941,7 @@
     }
 
     // Added: (weconsultants@users) Needed to aggragate counts per table in jTree
-    protected int[] getRowCounts(Vector inTable,
+    public int[] getRowCounts(Vector inTable,
                                  Vector inSchema) throws Exception {
 
         if (!displayRowCounts) {
@@ -1986,7 +1986,7 @@
         return (counts);
     }
 
-    protected JToolBar createToolBar() {
+    public JToolBar createToolBar() {
 
         // Build jtoolbar and jtoolbar Buttons
         JToolBar jtoolbar = new JToolBar();
@@ -2043,7 +2043,7 @@
         }
     }
 
-    private void setLF(String newLAF) {
+    public void setLF(String newLAF) {
 
         if (currentLAF != null && currentLAF == newLAF) {    // No change
             return;
@@ -2084,7 +2084,7 @@
         }
     }
 
-    private void updateSchemaList() {
+    public void updateSchemaList() {
 
         ButtonGroup group = new ButtonGroup();
         ArrayList   list  = new ArrayList();
@@ -2152,7 +2152,7 @@
      */
     public static class DBMPrefs {
 
-        private File prefsFile = null;
+        public File prefsFile = null;
 
         // Set defaults from Data
         boolean autoRefresh   = true;
@@ -2226,8 +2226,8 @@
             load();
         }
 
-        private static final String tString = Boolean.TRUE.toString();
-        private static final String fString = Boolean.FALSE.toString();
+        public static final String tString = Boolean.TRUE.toString();
+        public static final String fString = Boolean.FALSE.toString();
 
         public void load() {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/FontDialogSwing.java.orig	2005-06-04 14:07:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/FontDialogSwing.java	2005-07-19 19:41:45.000000000 +0200
@@ -56,29 +56,29 @@
 //        for JComboBox fontSizesComboBox and String fontSizes[];
 public class FontDialogSwing extends JDialog {
 
-    private static boolean      isRunning   = false;
-    private static final String BACKGROUND  = "Background";
-    private static String       defaultFont = "Dialog";
-    private static final String FOREGROUND  = "Foreground";
-    private static JButton      bgColorButton;
-    private static JCheckBox    ckbbold;
-    private static JButton      closeButton;
-    private static JButton      fgColorButton;
-    private static JComboBox    fontsComboBox;
+    public static boolean      isRunning   = false;
+    public static final String BACKGROUND  = "Background";
+    public static String       defaultFont = "Dialog";
+    public static final String FOREGROUND  = "Foreground";
+    public static JButton      bgColorButton;
+    public static JCheckBox    ckbbold;
+    public static JButton      closeButton;
+    public static JButton      fgColorButton;
+    public static JComboBox    fontsComboBox;
 
     //  weconsultants@users 20050215 - Added for Compatbilty fix for JDK 1.3
-    private static JComboBox      fontSizesComboBox;
-    private static final String[] fontSizes = {
+    public static JComboBox      fontSizesComboBox;
+    public static final String[] fontSizes = {
         "8", "9", "10", "11", "12", "13", "14", "16", "18", "24", "36"
     };
 
     // weconsultants@users 20050215 - Commented out for Compatbilty fix for JDK 1.3
-    //  private static JSpinner           spinnerFontSizes;
-    //  private static SpinnerNumberModel spinnerModelSizes;
-    private static DatabaseManagerSwing fOwner;
-    private static JFrame frame =
+    //  public static JSpinner           spinnerFontSizes;
+    //  public static SpinnerNumberModel spinnerModelSizes;
+    public static DatabaseManagerSwing fOwner;
+    public static JFrame frame =
         new JFrame("DataBaseManagerSwing Font Selection Dialog");
-    private static JCheckBox ckbitalic;
+    public static JCheckBox ckbitalic;
 
     /**
      * Create and display FontDialogSwing Dialog.
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/Grid.java.orig	2005-06-08 00:24:29.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/Grid.java	2005-07-19 19:41:45.000000000 +0200
@@ -90,40 +90,40 @@
 class Grid extends Panel {
 
     // drawing
-    private Dimension dMinimum;
+    public Dimension dMinimum;
 
 // boucherb@users changed access for databasemanager2
-    protected Font fFont;
+    public Font fFont;
 
 // --------------------------------------------------
-    private FontMetrics fMetrics;
-    private Graphics    gImage;
-    private Image       iImage;
+    public FontMetrics fMetrics;
+    public Graphics    gImage;
+    public Image       iImage;
 
     // height / width
-    private int iWidth, iHeight;
-    private int iRowHeight, iFirstRow;
-    private int iGridWidth, iGridHeight;
-    private int iX, iY;
+    public int iWidth, iHeight;
+    public int iRowHeight, iFirstRow;
+    public int iGridWidth, iGridHeight;
+    public int iX, iY;
 
     // data
 // boucherb@users changed access for databasemanager2
-    protected String[] sColHead = new String[0];
-    protected Vector   vData    = new Vector();
+    public String[] sColHead = new String[0];
+    public Vector   vData    = new Vector();
 
 // --------------------------------------------------
-    private int[] iColWidth;
-    private int   iColCount;
+    public int[] iColWidth;
+    public int   iColCount;
 
 // boucherb@users changed access for databasemanager2
-    protected int iRowCount;
+    public int iRowCount;
 
 // --------------------------------------------------
     // scrolling
-    private Scrollbar sbHoriz, sbVert;
-    private int       iSbWidth, iSbHeight;
-    private boolean   bDrag;
-    private int       iXDrag, iColDrag;
+    public Scrollbar sbHoriz, sbVert;
+    public int       iSbWidth, iSbHeight;
+    public boolean   bDrag;
+    public int       iXDrag, iColDrag;
 
     /**
      * Constructor declaration
@@ -587,7 +587,7 @@
      *
      * @param i
      */
-    private void calcAutoWidth(int i) {
+    public void calcAutoWidth(int i) {
 
         int w = 10;
 
@@ -611,7 +611,7 @@
      *
      * @return
      */
-    private String getDisplay(int x, int y) {
+    public String getDisplay(int x, int y) {
         return (((String[]) (vData.elementAt(y)))[x]);
     }
 
@@ -624,7 +624,7 @@
      *
      * @return
      */
-    private String get(int x, int y) {
+    public String get(int x, int y) {
         return (((String[]) (vData.elementAt(y)))[x]);
     }
 
@@ -636,7 +636,7 @@
      *
      * @return
      */
-    private static int getMaxHeight(FontMetrics f) {
+    public static int getMaxHeight(FontMetrics f) {
         return f.getHeight() + 4;
     }
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/JDBCTypes.java.orig	2005-03-02 14:50:59.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/JDBCTypes.java	2005-07-19 19:41:45.000000000 +0200
@@ -48,8 +48,8 @@
     public static final int BLOB        = 2004;
     public static final int CLOB        = 2005;
     public static final int REF         = 2006;
-    private Hashtable       hStringJDBCtypes;
-    private Hashtable       hIntJDBCtypes;
+    public Hashtable       hStringJDBCtypes;
+    public Hashtable       hIntJDBCtypes;
 
     JDBCTypes() {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/MainInvoker.java.orig	2005-06-08 21:52:37.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/MainInvoker.java	2005-07-19 19:41:45.000000000 +0200
@@ -51,9 +51,9 @@
      * It may or may not make sense to make this into a class with real
      * instances that can keep track of status of stuff invoked by it.
      */
-    private static String[] emptyStringArray = new String[0];
+    public static String[] emptyStringArray = new String[0];
 
-    private static void syntaxFailure() {
+    public static void syntaxFailure() {
         System.err.println(SYNTAX_MSG);
         System.exit(2);
     }
@@ -108,7 +108,7 @@
         }
     }
 
-    private static final String SYNTAX_MSG =
+    public static final String SYNTAX_MSG =
         "    java org.hsqldb.util.MainInvoker "
         + "[package1.Class1 [arg1a arg1b...] \"\"]... \\\n"
         + "    packageX.ClassX [argXa argXb...]\nOR\n"
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java.orig	2005-03-02 14:50:59.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java	2005-07-19 19:41:45.000000000 +0200
@@ -46,8 +46,8 @@
  */
 class OracleTransferHelper extends TransferHelper {
 
-    private final int ORACLE = 0;
-    private final int HSQLDB = 1;
+    public final int ORACLE = 0;
+    public final int HSQLDB = 1;
     String[][]        Funcs  = {
         {
             "now()", "\'now\'"
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java.orig	2005-03-02 14:50:59.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java	2005-07-19 19:41:45.000000000 +0200
@@ -47,8 +47,8 @@
  */
 class PostgresTransferHelper extends TransferHelper {
 
-    private final int PostgreSQL = 0;
-    private final int HSQLDB     = 1;
+    public final int PostgreSQL = 0;
+    public final int HSQLDB     = 1;
     String[][]        Funcs      = {
         {
             "now()", "\'now\'"
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/QueryTool.java.orig	2005-06-08 00:24:29.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/QueryTool.java	2005-07-19 19:41:45.000000000 +0200
@@ -410,7 +410,7 @@
     /**
      * Adds a String to the Listbox of recent commands.
      */
-    private void setRecent(String s) {
+    public void setRecent(String s) {
 
         for (int i = 0; i < iMaxRecent; i++) {
             if (s.equals(sRecent[i])) {
@@ -440,7 +440,7 @@
     /**
      * Create the graphical user interface. This is AWT code.
      */
-    private void initGUI() {
+    public void initGUI() {
 
         // all panels
         Panel pQuery       = new Panel();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ScriptTool.java.orig	2005-03-02 14:50:59.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ScriptTool.java	2005-07-19 19:41:45.000000000 +0200
@@ -54,13 +54,13 @@
  */
 public class ScriptTool {
 
-    private static Properties pProperties = new Properties();
-    private Connection        cConn;
-    private Statement         sStatement;
-    private boolean           BATCH = true;
-    private String            EKW   = new String("go");
-    private boolean           EOF   = false;
-    private int               ln    = 0;
+    public static Properties pProperties = new Properties();
+    public Connection        cConn;
+    public Statement         sStatement;
+    public boolean           BATCH = true;
+    public String            EKW   = new String("go");
+    public boolean           EOF   = false;
+    public int               ln    = 0;
 
     /**
      * Main method
@@ -180,7 +180,7 @@
      * Translate ResultSet to String representation
      * @param r
      */
-    private String toString(ResultSet r) {
+    public String toString(ResultSet r) {
 
         try {
             if (r == null) {
@@ -218,7 +218,7 @@
     /**
      * Read file and convert it to string.
      */
-    private String fileToString(BufferedReader in) {
+    public String fileToString(BufferedReader in) {
 
         if (EOF) {
             return null;
@@ -268,7 +268,7 @@
      *
      * @param s
      */
-    private void trace(String s) {
+    public void trace(String s) {
         System.out.println(s);
     }
 
@@ -276,7 +276,7 @@
      * Method declaration
      *
      */
-    private static void printHelp() {
+    public static void printHelp() {
 
         System.out.println(
             "Usage: java ScriptTool [-options]\n"
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/SqlFile.java.orig	2005-07-01 00:28:04.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/SqlFile.java	2005-07-19 19:41:45.000000000 +0200
@@ -98,25 +98,25 @@
  */
 public class SqlFile {
 
-    private static final int DEFAULT_HISTORY_SIZE = 20;
-    private File             file;
-    private boolean          interactive;
-    private String           primaryPrompt    = "sql> ";
-    private String           chunkPrompt      = "raw> ";
-    private String           contPrompt       = "  +> ";
-    private Connection       curConn          = null;
-    private boolean          htmlMode         = false;
-    private HashMap          userVars         = null;
-    private String[]         statementHistory = null;
-    private boolean          chunking         = false;
+    public static final int DEFAULT_HISTORY_SIZE = 20;
+    public File             file;
+    public boolean          interactive;
+    public String           primaryPrompt    = "sql> ";
+    public String           chunkPrompt      = "raw> ";
+    public String           contPrompt       = "  +> ";
+    public Connection       curConn          = null;
+    public boolean          htmlMode         = false;
+    public HashMap          userVars         = null;
+    public String[]         statementHistory = null;
+    public boolean          chunking         = false;
 
     /**
      * Private class to "share" a variable among a family of SqlFile
      * instances.
      */
-    private static class BooleanBucket {
+    public static class BooleanBucket {
 
-        private boolean bPriv = false;
+        public boolean bPriv = false;
 
         public void set(boolean bIn) {
             bPriv = bIn;
@@ -133,21 +133,21 @@
     BooleanBucket possiblyUncommitteds = new BooleanBucket();
 
     // Ascii field separator blanks
-    private static final int SEP_LEN = 2;
-    private static final String DIVIDER =
+    public static final int SEP_LEN = 2;
+    public static final String DIVIDER =
         "-----------------------------------------------------------------"
         + "-----------------------------------------------------------------";
-    private static final String SPACES =
+    public static final String SPACES =
         "                                                                 "
         + "                                                                 ";
-    private static String revnum = null;
+    public static String revnum = null;
 
     static {
         revnum = "$Revision: 1.121 $".substring("$Revision: ".length(),
                 "$Revision: 1.121 $".length() - 2);
     }
 
-    private static String BANNER =
+    public static String BANNER =
         "(SqlFile processor v. " + revnum + ")\n"
         + "Distribution is permitted under the terms of the HSQLDB license.\n"
         + "(c) 2004-2005 Blaine Simpson and the HSQLDB Development Group.\n\n"
@@ -163,7 +163,7 @@
         + "  statement into the buffer without executing) or a line ending with ';'\n"
         + "  (which executes the statement).\n"
         + "  SQL Statements may begin with '/PLVARNAME' and/or contain *{PLVARNAME}s.\n";
-    private static final String BUFFER_HELP_TEXT =
+    public static final String BUFFER_HELP_TEXT =
         "BUFFER Commands (only \":;\" is available for non-interactive use).\n"
         + "    :?                Help\n"
         + "    :;                Execute current buffer as an SQL Statement\n"
@@ -185,7 +185,7 @@
         + "                       2:  Narrows substitution to specified buffer line number\n"
         + "                           (Use any line number in place of '2').\n"
     ;
-    private static final String HELP_TEXT = "SPECIAL Commands.\n"
+    public static final String HELP_TEXT = "SPECIAL Commands.\n"
         + "* commands only available for interactive use.\n"
         + "In place of \"3\" below, you can use nothing for the previous command, or\n"
         + "an integer \"X\" to indicate the Xth previous command.\n"
@@ -212,7 +212,7 @@
         + "    \\-[3];               * reload command and execute (via \":;\")\n"
         + "    \\q [abort message]   Quit (or end input like Ctrl-Z or Ctrl-D)\n"
     ;
-    private static final String PL_HELP_TEXT = "PROCEDURAL LANGUAGE Commands.\n"
+    public static final String PL_HELP_TEXT = "PROCEDURAL LANGUAGE Commands.\n"
         + "    *?                            Help\n"
         + "    *                             Expand PL variables from now on.\n"
         + "                                  (this is also implied by all the following).\n"
@@ -314,21 +314,21 @@
 
     // So we can tell how to handle quit and break commands.
     public boolean      recursed     = false;
-    private String      curCommand   = null;
-    private int         curLinenum   = -1;
-    private int         curHist      = -1;
-    private PrintStream psStd        = null;
-    private PrintStream psErr        = null;
-    private PrintWriter pwQuery      = null;
+    public String      curCommand   = null;
+    public int         curLinenum   = -1;
+    public int         curHist      = -1;
+    public PrintStream psStd        = null;
+    public PrintStream psErr        = null;
+    public PrintWriter pwQuery      = null;
     StringBuffer        stringBuffer = new StringBuffer();
     /*
      * This is reset upon each execute() invocation (to true if interactive,
      * false otherwise).
      */
-    private boolean             continueOnError = false;
-    private static final String DEFAULT_CHARSET = "US-ASCII";
-    private BufferedReader      br              = null;
-    private String              charset         = null;
+    public boolean             continueOnError = false;
+    public static final String DEFAULT_CHARSET = "US-ASCII";
+    public BufferedReader      br              = null;
+    public String              charset         = null;
 
     /**
      * Process all the commands in the file (or stdin) associated with
@@ -721,7 +721,7 @@
      * @param inString Base String, which will not be modified (because
      *                 a "copy" will be returned).
      */
-    private static String deTerminated(String inString) {
+    public static String deTerminated(String inString) {
 
         int index = inString.lastIndexOf(';');
 
@@ -741,9 +741,9 @@
     /**
      * Utility nested Exception class for internal use.
      */
-    private class BadSpecial extends Exception {
+    public class BadSpecial extends Exception {
 
-        private BadSpecial(String s) {
+        public BadSpecial(String s) {
             super(s);
         }
     }
@@ -756,7 +756,7 @@
      * thrown.
      * SqlTool.execute() on throws a QuitNow if it is in a recursive call.
      */
-    private class QuitNow extends SqlToolError {
+    public class QuitNow extends SqlToolError {
 
         public QuitNow(String s) {
             super(s);
@@ -771,7 +771,7 @@
      * Utility nested Exception class for internal use.
      * Very similar to QuitNow.
      */
-    private class BreakException extends SqlToolError {
+    public class BreakException extends SqlToolError {
 
         public BreakException() {
             super();
@@ -786,7 +786,7 @@
      * Utility nested Exception class for internal use.
      * Very similar to QuitNow.
      */
-    private class ContinueException extends SqlToolError {
+    public class ContinueException extends SqlToolError {
 
         public ContinueException() {
             super();
@@ -800,9 +800,9 @@
     /**
      * Utility nested Exception class for internal use.
      */
-    private class BadSwitch extends Exception {
+    public class BadSwitch extends Exception {
 
-        private BadSwitch(int i) {
+        public BadSwitch(int i) {
             super(Integer.toString(i));
         }
     }
@@ -817,7 +817,7 @@
      * @throws SQLException Passed through from processSQL()
      * @throws BadSpecial Runtime error()
      */
-    private void processBuffer(String inString)
+    public void processBuffer(String inString)
     throws BadSpecial, SQLException {
 
         int    index = 0;
@@ -1046,8 +1046,8 @@
         throw new BadSpecial("Unknown Buffer Command");
     }
 
-    private boolean doPrepare  = false;
-    private String  prepareVar = null;
+    public boolean doPrepare  = false;
+    public String  prepareVar = null;
 
     /**
      * Process a Special Command.
@@ -1057,7 +1057,7 @@
      * @throws BadSpecial Runtime error()
      * @throws QuitNot Command execution (but not the JVM!) should stop
      */
-    private void processSpecial(String inString)
+    public void processSpecial(String inString)
     throws BadSpecial, QuitNow, SQLException, SqlToolError {
 
         int    index = 0;
@@ -1391,7 +1391,7 @@
         throw new BadSpecial("Unknown Special Command");
     }
 
-    static private final char[] nonVarChars = {
+    static public final char[] nonVarChars = {
         ' ', '\t', '=', '}', '\n', '\r'
     };
 
@@ -1425,7 +1425,7 @@
      * @throws SQLException  This is really an inappropriate exception
      * type.  Only using it because I don't have time to do things properly.
      */
-    private String dereference(String inString,
+    public String dereference(String inString,
                                boolean permitAlias) throws SQLException {
 
         String       varName, varValue;
@@ -1492,9 +1492,9 @@
     public boolean plMode = false;
 
     //  PL variable name currently awaiting query output.
-    private String  fetchingVar = null;
-    private boolean silentFetch = false;
-    private boolean fetchBinary = false;
+    public String  fetchingVar = null;
+    public boolean silentFetch = false;
+    public boolean fetchBinary = false;
 
     /**
      * Process a Process Language Command.
@@ -1503,7 +1503,7 @@
      * @param inString Complete command, less the leading '\' character.
      * @throws BadSpecial Runtime error()
      */
-    private void processPL(String inString)
+    public void processPL(String inString)
     throws BadSpecial, SqlToolError, SQLException {
 
         if (inString.length() < 1) {
@@ -1926,7 +1926,7 @@
      * new SqlFile.execute() with a mode whereby commands are written
      * to a separate history but not executed.
      */
-    private File plBlockFile(String type) throws IOException, SqlToolError {
+    public File plBlockFile(String type) throws IOException, SqlToolError {
 
         String          s;
         StringTokenizer toker;
@@ -2015,15 +2015,15 @@
     /**
      * Wrapper methods so don't need to call x(..., false) in most cases.
      */
-    private void stdprintln() {
+    public void stdprintln() {
         stdprintln(false);
     }
 
-    private void stdprint(String s) {
+    public void stdprint(String s) {
         stdprint(s, false);
     }
 
-    private void stdprintln(String s) {
+    public void stdprintln(String s) {
         stdprintln(s, false);
     }
 
@@ -2032,7 +2032,7 @@
      *
      * Conditionally HTML-ifies output.
      */
-    private void stdprintln(boolean queryOutput) {
+    public void stdprintln(boolean queryOutput) {
 
         if (htmlMode) {
             psStd.println("<BR>");
@@ -2056,7 +2056,7 @@
      *
      * Conditionally HTML-ifies error output.
      */
-    private void errprint(String s) {
+    public void errprint(String s) {
 
         psErr.print(htmlMode
                     ? ("<DIV style='color:white; background: red; "
@@ -2069,7 +2069,7 @@
      *
      * Conditionally HTML-ifies error output.
      */
-    private void errprintln(String s) {
+    public void errprintln(String s) {
 
         psErr.println(htmlMode
                       ? ("<DIV style='color:white; background: red; "
@@ -2082,7 +2082,7 @@
      *
      * Conditionally HTML-ifies output.
      */
-    private void stdprint(String s, boolean queryOutput) {
+    public void stdprint(String s, boolean queryOutput) {
 
         psStd.print(htmlMode ? ("<P>" + s + "</P>")
                              : s);
@@ -2099,7 +2099,7 @@
      *
      * Conditionally HTML-ifies output.
      */
-    private void stdprintln(String s, boolean queryOutput) {
+    public void stdprintln(String s, boolean queryOutput) {
 
         psStd.println(htmlMode ? ("<P>" + s + "</P>")
                                : s);
@@ -2111,19 +2111,19 @@
         }
     }
 
-    private static final int DEFAULT_ELEMENT = 0,
+    public static final int DEFAULT_ELEMENT = 0,
                              HSQLDB_ELEMENT  = 1,
                              ORACLE_ELEMENT  = 2
     ;
 
     // These do not specify order listed, just inclusion.
-    private static final int[] listMDSchemaCols = { 1 };
-    private static final int[] listMDIndexCols  = {
+    public static final int[] listMDSchemaCols = { 1 };
+    public static final int[] listMDIndexCols  = {
         2, 6, 3, 9, 4, 10, 11
     };
 
     /** Column numbering starting at 1. */
-    private static final int[][] listMDTableCols = {
+    public static final int[][] listMDTableCols = {
         {
             2, 3
         },    // Default
@@ -2156,7 +2156,7 @@
      * SCOTT, ADAMS, JONES, CLARK, BLAKE, OE, PM, SH, QS, QS_*, these
      * contain sample data and the schemas can safely be removed.
      */
-    private static final String[] oracleSysSchemas = {
+    public static final String[] oracleSysSchemas = {
         "SYS", "SYSTEM", "OUTLN", "DBSNMP", "OUTLN", "MDSYS", "ORDSYS",
         "ORDPLUGINS", "CTXSYS", "DSSYS", "PERFSTAT", "WKPROXY", "WKSYS",
         "WMSYS", "XDB", "ANONYMOUS", "ODM", "ODM_MTR", "OLAPSYS", "TRACESVR",
@@ -2172,7 +2172,7 @@
      *
      * @throws BadSpecial
      */
-    private void listTables(char c, String inFilter) throws BadSpecial {
+    public void listTables(char c, String inFilter) throws BadSpecial {
 
         String   schema  = null;
         int[]    listSet = null;
@@ -2452,12 +2452,12 @@
         }
     }
 
-    private boolean excludeSysSchemas = false;
+    public boolean excludeSysSchemas = false;
 
     /**
      * Process the current command as an SQL Statement
      */
-    private void processSQL() throws SQLException {
+    public void processSQL() throws SQLException {
 
         // Really don't know whether to take the network latency hit here
         // in order to check autoCommit in order to set
@@ -2534,7 +2534,7 @@
      * @param incFilter Optional case-insensitive substring.
      *                  Rows are skipped which to not contain this substring.
      */
-    private void displayResultSet(Statement statement, ResultSet r,
+    public void displayResultSet(Statement statement, ResultSet r,
                                   int[] incCols,
                                   String filter) throws SQLException {
 
@@ -2847,12 +2847,12 @@
         }
     }
 
-    private static final int    COL_HEAD = 0,
+    public static final int    COL_HEAD = 0,
                                 COL_ODD  = 1,
                                 COL_EVEN = 2
     ;
-    private static final String PRE_TR   = spaces(4);
-    private static final String PRE_TD   = spaces(8);
+    public static final String PRE_TR   = spaces(4);
+    public static final String PRE_TD   = spaces(8);
 
     /**
      * Print a properly formatted HTML &lt;TR&gt; command for the given
@@ -2860,7 +2860,7 @@
      *
      * @param colType Column type:  COL_HEAD, COL_ODD or COL_EVEN.
      */
-    private static String htmlRow(int colType) {
+    public static String htmlRow(int colType) {
 
         switch (colType) {
 
@@ -2886,7 +2886,7 @@
      *
      * @param len Length of output String.
      */
-    private static String divider(int len) {
+    public static String divider(int len) {
         return (len > DIVIDER.length()) ? DIVIDER
                                         : DIVIDER.substring(0, len);
     }
@@ -2896,7 +2896,7 @@
      *
      * @param len Length of output String.
      */
-    private static String spaces(int len) {
+    public static String spaces(int len) {
         return (len > SPACES.length()) ? SPACES
                                        : SPACES.substring(0, len);
     }
@@ -2909,7 +2909,7 @@
      * @param fulllen  Output String length.
      * @param rightJustify  True to right justify, false to left justify.
      */
-    private static String pad(String inString, int fulllen,
+    public static String pad(String inString, int fulllen,
                               boolean rightJustify, boolean doPad) {
 
         if (!doPad) {
@@ -2933,7 +2933,7 @@
      * Display command history, which consists of complete or incomplete SQL
      * commands.
      */
-    private void showHistory() {
+    public void showHistory() {
 
         int      ctr = -1;
         String   s;
@@ -2981,7 +2981,7 @@
     /**
      * Return a SQL Command from command history.
      */
-    private String commandFromHistory(int commandsAgo) throws BadSpecial {
+    public String commandFromHistory(int commandsAgo) throws BadSpecial {
 
         if (commandsAgo >= statementHistory.length) {
             throw new BadSpecial("History can only hold up to "
@@ -3002,7 +3002,7 @@
      * Push a command onto the history array (the first element of which
      * is the "Buffer").
      */
-    private void setBuf(String inString) {
+    public void setBuf(String inString) {
 
         curHist++;
 
@@ -3019,7 +3019,7 @@
      * @param tableName  Table that will be described.
      * @param filter  Substring to filter by
      */
-    private void describe(String tableName,
+    public void describe(String tableName,
                           String inFilter) throws SQLException {
 
         /*
@@ -3168,7 +3168,7 @@
         return sa;
     }
 
-    private boolean eval(String[] inTokens) throws BadSpecial {
+    public boolean eval(String[] inTokens) throws BadSpecial {
 
         // dereference *VARNAME variables.
         // N.b. we work with a "copy" of the tokens.
@@ -3221,7 +3221,7 @@
         throw new BadSpecial("Unrecognized logical operation");
     }
 
-    private void closeQueryOutputStream() {
+    public void closeQueryOutputStream() {
 
         if (pwQuery == null) {
             return;
@@ -3241,7 +3241,7 @@
      * Print to psStd and possibly pwQuery iff current HTML mode matches
      * supplied printHtml.
      */
-    private void condlPrintln(String s, boolean printHtml) {
+    public void condlPrintln(String s, boolean printHtml) {
 
         if ((printHtml &&!htmlMode) || (htmlMode &&!printHtml)) {
             return;
@@ -3259,7 +3259,7 @@
      * Print to psStd and possibly pwQuery iff current HTML mode matches
      * supplied printHtml.
      */
-    private void condlPrint(String s, boolean printHtml) {
+    public void condlPrint(String s, boolean printHtml) {
 
         if ((printHtml &&!htmlMode) || (htmlMode &&!printHtml)) {
             return;
@@ -3273,7 +3273,7 @@
         }
     }
 
-    private static String formatNicely(Map map, boolean withValues) {
+    public static String formatNicely(Map map, boolean withValues) {
 
         String       key;
         StringBuffer sb = new StringBuffer();
@@ -3303,7 +3303,7 @@
     /**
      * Ascii file dump.
      */
-    private void dump(String varName,
+    public void dump(String varName,
                       File dumpFile) throws IOException, BadSpecial {
 
         String val = (String) userVars.get(varName);
@@ -3344,7 +3344,7 @@
     /**
      * Binary file dump
      */
-    private void dump(File dumpFile) throws IOException, BadSpecial {
+    public void dump(File dumpFile) throws IOException, BadSpecial {
 
         if (binBuffer == null) {
             throw new BadSpecial("Binary SqlFile buffer is currently empty");
@@ -3363,7 +3363,7 @@
         stdprintln("Saved " + len + " bytes to '" + dumpFile + "'");
     }
 
-    private String streamToString(InputStream is) throws IOException {
+    public String streamToString(InputStream is) throws IOException {
 
         char[]            xferBuffer   = new char[10240];
         StringWriter      stringWriter = new StringWriter();
@@ -3377,7 +3377,7 @@
         return stringWriter.toString();
     }
 
-    private byte[] streamToBytes(InputStream is) throws IOException {
+    public byte[] streamToBytes(InputStream is) throws IOException {
 
         byte[]                xferBuffer = new byte[10240];
         ByteArrayOutputStream baos       = new ByteArrayOutputStream();
@@ -3393,7 +3393,7 @@
     /**
      * Ascii file load.
      */
-    private void load(String varName, File asciiFile) throws IOException {
+    public void load(String varName, File asciiFile) throws IOException {
 
         char[]       xferBuffer   = new char[10240];
         StringWriter stringWriter = new StringWriter();
@@ -3412,7 +3412,7 @@
     /**
      * Binary file load
      */
-    private void load(File binFile) throws IOException {
+    public void load(File binFile) throws IOException {
 
         byte[]                xferBuffer = new byte[10240];
         ByteArrayOutputStream baos       = new ByteArrayOutputStream();
@@ -3472,8 +3472,8 @@
     }
 
     // won't compile with JDK 1.3 without these
-    private static final int JDBC3_BOOLEAN  = 16;
-    private static final int JDBC3_DATALINK = 70;
+    public static final int JDBC3_BOOLEAN  = 16;
+    public static final int JDBC3_DATALINK = 70;
 
     public static String sqlTypeToString(int i) {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/SqlServerTransferHelper.java.orig	2005-03-02 14:50:59.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/SqlServerTransferHelper.java	2005-07-19 19:41:45.000000000 +0200
@@ -42,8 +42,8 @@
  */
 class SqlServerTransferHelper extends TransferHelper {
 
-    private boolean firstTinyintRow;
-    private boolean firstSmallintRow;
+    public boolean firstTinyintRow;
+    public boolean firstSmallintRow;
 
     SqlServerTransferHelper() {
         super();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/SqlTool.java.orig	2005-06-08 21:52:38.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/SqlTool.java	2005-07-19 19:41:45.000000000 +0200
@@ -55,13 +55,13 @@
  */
 public class SqlTool {
 
-    private static final String DEFAULT_RCFILE =
+    public static final String DEFAULT_RCFILE =
         System.getProperty("user.home") + "/sqltool.rc";
-    private static Connection conn;
+    public static Connection conn;
 
     // N.b. the following is static!
-    private static boolean noexit;    // Whether System.exit() may be called.
-    private static String  revnum = null;
+    public static boolean noexit;    // Whether System.exit() may be called.
+    public static String  revnum = null;
 
     static {
         revnum = "$Revision: 1.49 $".substring("$Revision: ".length(),
@@ -69,7 +69,7 @@
                                                - 2);
     }
 
-    private static final String SYNTAX_MESSAGE =
+    public static final String SYNTAX_MESSAGE =
         "Usage: java [-Dsqlfile.X=Y...] org.hsqldb.util.SqlTool \\\n"
         + "    [--optname [optval...]] urlid [file1.sql...]\n"
         + "where arguments are:\n"
@@ -98,11 +98,11 @@
         + "SqlTool v. " + revnum + ".";
 
     /** Utility nested class for internal use. */
-    private static class BadCmdline extends Exception {}
+    public static class BadCmdline extends Exception {}
     ;
 
     /** Utility object for internal use. */
-    private static BadCmdline bcl = new BadCmdline();
+    public static BadCmdline bcl = new BadCmdline();
 
     /** Nested class for external callers of SqlTool.main() */
     public static class SqlToolException extends Exception {
@@ -122,7 +122,7 @@
      * Call return() right after you call this method, because this method
      * will not exit if (noexit is true && retval == 0).
      */
-    private static void exitMain(int retval) throws SqlToolException {
+    public static void exitMain(int retval) throws SqlToolException {
         exitMain(retval, null);
     }
 
@@ -132,7 +132,7 @@
      * Call return() right after you call this method, because this method
      * will not exit if (noexit is true && retval == 0).
      */
-    private static void exitMain(int retval,
+    public static void exitMain(int retval,
                                  String msg) throws SqlToolException {
 
         if (noexit) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/SqlToolSprayer.java.orig	2005-06-08 21:52:38.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/SqlToolSprayer.java	2005-07-19 19:41:45.000000000 +0200
@@ -59,7 +59,7 @@
  */
 public class SqlToolSprayer {
 
-    private static final String SYNTAX_MSG =
+    public static final String SYNTAX_MSG =
         "SYNTAX:  java [-D...] SqlToolSprayer 'SQL;' [urlid1 urlid2...]\n"
         + "System properties you may use [default values]:\n"
         + "    sqltoolsprayer.period (in ms.) [500]\n"
@@ -184,7 +184,7 @@
         System.exit(0);
     }
 
-    private static void getUrlsFromPropFile(String fileName,
+    public static void getUrlsFromPropFile(String fileName,
             ArrayList al) throws Exception {
 
         Properties p = new Properties();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TableSorter.java.orig	2004-11-24 22:50:54.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TableSorter.java	2005-07-19 19:41:45.000000000 +0200
@@ -78,11 +78,11 @@
  */
 public class TableSorter extends AbstractTableModel {
 
-    protected TableModel           tableModel;
+    public TableModel           tableModel;
     public static final int        DESCENDING            = -1;
     public static final int        NOT_SORTED            = 0;
     public static final int        ASCENDING             = 1;
-    private static Directive EMPTY_DIRECTIVE = new Directive(-1, NOT_SORTED);
+    public static Directive EMPTY_DIRECTIVE = new Directive(-1, NOT_SORTED);
     public static final Comparator COMPARABLE_COMPARATOR = new Comparator() {
 
         public int compare(Object o1, Object o2) {
@@ -112,13 +112,13 @@
             return o1.toString().compareTo(o2.toString());
         }
     };
-    private Row[]              viewToModel;
-    private int[]              modelToView;
-    private JTableHeader       tableHeader;
-    private MouseListener      mouseListener;
-    private TableModelListener tableModelListener;
-    private Map                columnComparators = new HashMap();
-    private List               sortingColumns    = new ArrayList();
+    public Row[]              viewToModel;
+    public int[]              modelToView;
+    public JTableHeader       tableHeader;
+    public MouseListener      mouseListener;
+    public TableModelListener tableModelListener;
+    public Map                columnComparators = new HashMap();
+    public List               sortingColumns    = new ArrayList();
 
     public TableSorter() {
         this.mouseListener      = new MouseHandler();
@@ -140,7 +140,7 @@
         setTableModel(tableModel);
     }
 
-    private void clearSortingState() {
+    public void clearSortingState() {
         viewToModel = null;
         modelToView = null;
     }
@@ -198,7 +198,7 @@
         return sortingColumns.size() != 0;
     }
 
-    private Directive getDirective(int column) {
+    public Directive getDirective(int column) {
 
         for (int i = 0; i < sortingColumns.size(); i++) {
             Directive directive = (Directive) sortingColumns.get(i);
@@ -215,7 +215,7 @@
         return getDirective(column).direction;
     }
 
-    private void sortingStatusChanged() {
+    public void sortingStatusChanged() {
 
         clearSortingState();
         fireTableDataChanged();
@@ -240,7 +240,7 @@
         sortingStatusChanged();
     }
 
-    protected Icon getHeaderRendererIcon(int column, int size) {
+    public Icon getHeaderRendererIcon(int column, int size) {
 
         Directive directive = getDirective(column);
 
@@ -252,7 +252,7 @@
                          sortingColumns.indexOf(directive));
     }
 
-    private void cancelSorting() {
+    public void cancelSorting() {
         sortingColumns.clear();
         sortingStatusChanged();
     }
@@ -266,7 +266,7 @@
         }
     }
 
-    protected Comparator getComparator(int column) {
+    public Comparator getComparator(int column) {
 
         Class columnType = tableModel.getColumnClass(column);
         Comparator comparator =
@@ -283,7 +283,7 @@
         return LEXICAL_COMPARATOR;
     }
 
-    private Row[] getViewToModel() {
+    public Row[] getViewToModel() {
 
         if (viewToModel == null) {
             int tableModelRowCount = tableModel.getRowCount();
@@ -306,7 +306,7 @@
         return getViewToModel()[viewIndex].modelIndex;
     }
 
-    private int[] getModelToView() {
+    public int[] getModelToView() {
 
         if (modelToView == null) {
             int n = getViewToModel().length;
@@ -353,9 +353,9 @@
     }
 
     // Helper classes
-    private class Row implements Comparable {
+    public class Row implements Comparable {
 
-        private int modelIndex;
+        public int modelIndex;
 
         public Row(int index) {
             this.modelIndex = index;
@@ -394,7 +394,7 @@
         }
     }
 
-    private class TableModelHandler implements TableModelListener {
+    public class TableModelHandler implements TableModelListener {
 
         public void tableChanged(TableModelEvent e) {
 
@@ -457,7 +457,7 @@
         }
     }
 
-    private class MouseHandler extends MouseAdapter {
+    public class MouseHandler extends MouseAdapter {
 
         public void mouseClicked(MouseEvent e) {
 
@@ -484,11 +484,11 @@
         }
     }
 
-    private static class Arrow implements Icon {
+    public static class Arrow implements Icon {
 
-        private boolean descending;
-        private int     size;
-        private int     priority;
+        public boolean descending;
+        public int     size;
+        public int     priority;
 
         public Arrow(boolean descending, int size, int priority) {
 
@@ -548,9 +548,9 @@
         }
     }
 
-    private class SortableHeaderRenderer implements TableCellRenderer {
+    public class SortableHeaderRenderer implements TableCellRenderer {
 
-        private TableCellRenderer tableCellRenderer;
+        public TableCellRenderer tableCellRenderer;
 
         public SortableHeaderRenderer(TableCellRenderer tableCellRenderer) {
             this.tableCellRenderer = tableCellRenderer;
@@ -579,10 +579,10 @@
         }
     }
 
-    private static class Directive {
+    public static class Directive {
 
-        private int column;
-        private int direction;
+        public int column;
+        public int direction;
 
         public Directive(int column, int direction) {
             this.column    = column;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferCommon.java.orig	2005-06-08 00:24:30.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferCommon.java	2005-07-19 19:41:45.000000000 +0200
@@ -148,5 +148,5 @@
         return (tTable);
     }
 
-    private TransferCommon() {}
+    public TransferCommon() {}
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferDb.java.orig	2005-03-27 00:01:45.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferDb.java	2005-07-19 19:41:45.000000000 +0200
@@ -55,7 +55,7 @@
 
     Connection          conn;
     DatabaseMetaData    meta;
-    protected Statement srcStatement = null;
+    public Statement srcStatement = null;
 
     TransferDb(Connection c, Traceable t) throws DataAccessPointException {
 
@@ -243,7 +243,7 @@
     }
 
 /*
-    private void transferRow(TransferResultSet r,
+    public void transferRow(TransferResultSet r,
                              PreparedStatement p)
                              throws DataAccessPointException, SQLException {
         // TODO
@@ -904,7 +904,7 @@
      *
      * @throws SQLException
      */
-    private void transferRow(TransferResultSet r, PreparedStatement p,
+    public void transferRow(TransferResultSet r, PreparedStatement p,
                              int len,
                              int[] types)
                              throws DataAccessPointException, SQLException {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferHelper.java.orig	2005-03-02 14:51:00.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferHelper.java	2005-07-19 19:41:45.000000000 +0200
@@ -44,11 +44,11 @@
  */
 class TransferHelper {
 
-    protected TransferDb db;
-    protected Traceable  tracer;
-    protected String     sSchema;
-    protected JDBCTypes  JDBCT;
-    private String       quote;
+    public TransferDb db;
+    public Traceable  tracer;
+    public String     sSchema;
+    public JDBCTypes  JDBCT;
+    public String       quote;
 
     TransferHelper() {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/Transfer.java.orig	2005-06-08 00:24:30.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/Transfer.java	2005-07-19 19:41:45.000000000 +0200
@@ -203,7 +203,7 @@
         work(arg);
     }
 
-    private boolean CatalogToSelect() {
+    public boolean CatalogToSelect() {
 
         Vector result = null;
 
@@ -283,7 +283,7 @@
         return (lTable.getItemCount() > 0);
     }
 
-    private boolean SchemaToSelect() {
+    public boolean SchemaToSelect() {
 
         Vector result = null;
 
@@ -490,7 +490,7 @@
         return;
     }
 
-    private void RefreshMainDisplay() {
+    public void RefreshMainDisplay() {
 
         lTable.removeAll();
         lTable.repaint();
@@ -530,7 +530,7 @@
      * @param f
      * @param m
      */
-    private void addMenuItems(Menu f, String[] m) {
+    public void addMenuItems(Menu f, String[] m) {
 
         for (int i = 0; i < m.length; i++) {
             if (m[i].equals("-")) {
@@ -585,7 +585,7 @@
      * Method declaration
      *
      */
-    private void saveTable() {
+    public void saveTable() {
 
         if (tCurrent == null) {
             return;
@@ -643,7 +643,7 @@
      *
      * @param t
      */
-    private void displayTable(TransferTable t) {
+    public void displayTable(TransferTable t) {
 
         tCurrent = t;
 
@@ -679,7 +679,7 @@
      *
      * @param and
      */
-    private void updateEnabled(boolean and) {
+    public void updateEnabled(boolean and) {
 
         boolean b = cTransfer.getState();
 
@@ -711,7 +711,7 @@
     /**
      * Method ProcessNextStep
      */
-    private void ProcessNextStep() {
+    public void ProcessNextStep() {
 
         switch (iSelectionStep) {
 
@@ -901,7 +901,7 @@
      */
     public void windowClosed(WindowEvent e) {}
 
-    private void cleanup() {
+    public void cleanup() {
 
         try {
             if (sourceDb != null) {
@@ -957,7 +957,7 @@
      * Method declaration
      *
      */
-    private void initGUI() {
+    public void initGUI() {
 
         Font fFont = new Font("Dialog", Font.PLAIN, 12);
 
@@ -1119,7 +1119,7 @@
      *
      * @return
      */
-    private Panel createBorderPanel(Component center) {
+    public Panel createBorderPanel(Component center) {
 
         Panel p = new Panel();
 
@@ -1142,7 +1142,7 @@
      *
      * @return
      */
-    private Label createLabel(String s) {
+    public Label createLabel(String s) {
 
         Label l = new Label(s);
 
@@ -1151,12 +1151,12 @@
         return l;
     }
 
-    private void SavePrefs(String f) {
+    public void SavePrefs(String f) {
         saveTable();
         TransferCommon.savePrefs(f, sourceDb, targetDb, this, tTable);
     }
 
-    private void LoadPrefs(String f) {
+    public void LoadPrefs(String f) {
 
         TransferTable t;
 
@@ -1207,7 +1207,7 @@
      * Method declaration
      *
      */
-    private void transfer() {
+    public void transfer() {
 
         saveTable();
         updateEnabled(false);
@@ -1270,7 +1270,7 @@
         System.gc();
     }
 
-    protected void Exit() {
+    public void Exit() {
 
         cleanup();
         fMain.dispose();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferSQLText.java.orig	2005-04-14 01:56:59.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferSQLText.java	2005-07-19 19:41:45.000000000 +0200
@@ -52,9 +52,9 @@
     String              sFileName              = null;
     BufferedWriter      WTextWrite             = null;
     BufferedReader      WTextRead              = null;
-    protected boolean   StructureAlreadyParsed = false;
+    public boolean   StructureAlreadyParsed = false;
     Hashtable           DbStmts                = null;
-    protected JDBCTypes JDBCT                  = null;
+    public JDBCTypes JDBCT                  = null;
 
     TransferSQLText(String _FileName,
                     Traceable t) throws DataAccessPointException {
@@ -159,7 +159,7 @@
      *
      * @throws SQLException
      */
-    private void transferRow(TransferResultSet r) throws Exception {
+    public void transferRow(TransferResultSet r) throws Exception {
 
         String sLast = "";
         int    len   = r.getColumnCount();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferTable.java.orig	2005-06-08 00:24:30.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/TransferTable.java	2005-07-19 19:41:45.000000000 +0200
@@ -471,7 +471,7 @@
         }
     }
 
-    private void initTypes() throws SQLException {
+    public void initTypes() throws SQLException {
 
         if (hTypes != null) {
             return;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/Tree.java.orig	2005-06-08 00:24:30.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/Tree.java	2005-07-19 19:41:45.000000000 +0200
@@ -88,30 +88,30 @@
 class Tree extends Panel {
 
     // static
-    private static Font        fFont;
-    private static FontMetrics fMetrics;
-    private static int         iRowHeight;
-    private static int         iIndentWidth;
-    private int                iMaxTextLength;
+    public static Font        fFont;
+    public static FontMetrics fMetrics;
+    public static int         iRowHeight;
+    public static int         iIndentWidth;
+    public int                iMaxTextLength;
 
     // drawing
-    private Dimension dMinimum;
-    private Graphics  gImage;
-    private Image     iImage;
+    public Dimension dMinimum;
+    public Graphics  gImage;
+    public Image     iImage;
 
     // height / width
-    private int iWidth, iHeight;
-    private int iFirstRow;
-    private int iTreeWidth, iTreeHeight;
-    private int iX, iY;
+    public int iWidth, iHeight;
+    public int iFirstRow;
+    public int iTreeWidth, iTreeHeight;
+    public int iX, iY;
 
     // data
-    private Vector vData;
-    private int    iRowCount;
+    public Vector vData;
+    public int    iRowCount;
 
     // scrolling
-    private Scrollbar sbHoriz, sbVert;
-    private int       iSbWidth, iSbHeight;
+    public Scrollbar sbHoriz, sbVert;
+    public int       iSbWidth, iSbHeight;
 
     static {
         fFont        = new Font("Dialog", Font.PLAIN, 12);
@@ -543,7 +543,7 @@
      *
      * @return
      */
-    private static int getMaxHeight(FontMetrics f) {
+    public static int getMaxHeight(FontMetrics f) {
         return f.getHeight() + 2;
     }
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusChoice.java.orig	2005-03-02 14:51:00.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusChoice.java	2005-07-19 19:41:45.000000000 +0200
@@ -52,7 +52,7 @@
 // getContent() answers the value !!
 public class ZaurusChoice extends Choice implements ZaurusComponent {
 
-    private static final int MaxLenInZChoice = 15;
+    public static final int MaxLenInZChoice = 15;
     Vector                   values;
     int                      countChanges;
 
@@ -118,7 +118,7 @@
     }
 
     // find for a given value the index in values
-    private int findValue(String s) {
+    public int findValue(String s) {
 
         for (int i = 0; i < values.size(); i++) {
             if (s.equals(values.elementAt(i))) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusConnectionDialog.java.orig	2005-03-02 14:51:00.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusConnectionDialog.java	2005-07-19 19:41:45.000000000 +0200
@@ -251,7 +251,7 @@
      *
      *
      */
-    protected void finishCreate() {
+    public void finishCreate() {
 
         try {
             mConnection = createConnection(mDriver.getText(), mURL.getText(),
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusDatabaseManager.java.orig	2005-03-02 14:51:00.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusDatabaseManager.java	2005-07-19 19:41:45.000000000 +0200
@@ -247,7 +247,7 @@
         m.connect(c);
     }
 
-    private static void showUsage() {
+    public static void showUsage() {
 
         System.out.println(
             "Usage: java org.hsqldb.util.ZaurusDatabaseManager [options]");
@@ -587,7 +587,7 @@
      * Method declaration
      *
      */
-    private void initGUI() {
+    public void initGUI() {
 
         Panel pQuery   = new Panel();
         Panel pCommand = new Panel();
@@ -663,7 +663,7 @@
         fMain.pack();
     }
 
-    protected void refreshTree() {
+    public void refreshTree() {
         super.refreshTree();
         eEditor.refresh(cConn);
     }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusEditor.java.orig	2005-03-02 14:51:00.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusEditor.java	2005-07-19 19:41:45.000000000 +0200
@@ -401,7 +401,7 @@
         }
     }
 
-    private void initGUI() {
+    public void initGUI() {
 
         // without connection there are no tables
         // vAllTables is a local variable with all table names in the database
@@ -565,11 +565,11 @@
 
     // process the buttons events
     // *******************************************************
-    // private methods
+    // public methods
     // *******************************************************
     // read all table names over the current database connection
     // exclude tables without primary key
-    private Vector getAllTables() {
+    public Vector getAllTables() {
 
         Vector result = new Vector(20);
 
@@ -608,7 +608,7 @@
 
     // determine the index of the choosen table in Vector vHoldTableNames
     // if the table name is not in vHoldTableNames, create a ZaurusTableForm for it
-    private int getChoosenTableIndex() {
+    public int getChoosenTableIndex() {
 
         String tableName = cTables.getSelectedItem();
 
@@ -633,7 +633,7 @@
 
     // determine the index of the given tableName in Vector vHoldTableNames
     // if the name is not in vHoldTableNames, answer -1
-    private int getTableIndex(String tableName) {
+    public int getTableIndex(String tableName) {
 
         int index;
 
@@ -650,7 +650,7 @@
     }
 
     // convert the search words in the textfield to an array of words
-    private String[] getWords() {
+    public String[] getWords() {
 
         StringTokenizer tokenizer =
             new StringTokenizer(fSearchWords.getText());
@@ -665,7 +665,7 @@
     }
 
     // init the three boxes for buttons
-    private void initButtons() {
+    public void initButtons() {
 
         // the buttons for the search form
         bSearchRow = new Button("Search Rows");
@@ -722,7 +722,7 @@
 
     // check whether the last button pressed was delete
     // if so, clear status line and reset the flag
-    private void resetLastButtonDelete() {
+    public void resetLastButtonDelete() {
 
         if (lastButtonDelete) {
             ZaurusEditor.printStatus("");
@@ -732,7 +732,7 @@
     }
 
     // reset  everything after changes in the database
-    private void resetTableForms() {
+    public void resetTableForms() {
 
         lForm.show(pForm, "search");
         lButton.show(pButton, "search");
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusTableForm.java.orig	2005-03-02 14:51:00.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/util/ZaurusTableForm.java	2005-07-19 19:41:45.000000000 +0200
@@ -542,10 +542,10 @@
     }
 
     // ******************************************************
-    // private methods
+    // public methods
     // ******************************************************
     // set all fields for primary keys to not editable
-    private void disablePKFields() {
+    public void disablePKFields() {
 
         for (int i = 0; i < primaryKeys.length; i++) {
             komponente[pkColIndex[i]].setEditable(false);
@@ -555,7 +555,7 @@
     // fetch all values from a table and a column
     // fill the ZaurusChoice zc with the row values for the Choice
     // and the column values as values
-    private void fillZChoice(ZaurusChoice zc, String tab, String col) {
+    public void fillZChoice(ZaurusChoice zc, String tab, String col) {
 
         try {
             if (cConn == null) {
@@ -590,7 +590,7 @@
     }
 
     // fetch all column names
-    private void fetchColumns() {
+    public void fetchColumns() {
 
         Vector temp     = new Vector(20);
         Vector tempType = new Vector(20);
@@ -628,7 +628,7 @@
     }
 
     // fetch the imported keys i.e. columns which reference to foreign keys in other tables
-    private void fetchImportedKeys() {
+    public void fetchImportedKeys() {
 
         Vector imKeys      = new Vector(20);
         Vector imKeyNames  = null;
@@ -714,7 +714,7 @@
         }
     }
 
-    private void fetchPrimaryKeys() {
+    public void fetchPrimaryKeys() {
 
         Vector temp = new Vector(20);
 
@@ -749,7 +749,7 @@
         }    // end of for (int i=0; i<primaryKeys.length; i++)
     }
 
-    private String generatePKWhere() {
+    public String generatePKWhere() {
 
         String stmtString = " WHERE ";
 
@@ -765,7 +765,7 @@
     }
 
     // generate the Where-condition for the words
-    private String generateWhere(String[] words, boolean allWords,
+    public String generateWhere(String[] words, boolean allWords,
                                  boolean ignoreCase, boolean noMatchWhole) {
 
         String result = "";
@@ -822,7 +822,7 @@
     }
 
     // answer the index of the column named name in the actual table
-    private int getColIndex(String name) {
+    public int getColIndex(String name) {
 
         for (int i = 0; i < columns.length; i++) {
             if (name.equals(columns[i])) {
@@ -834,7 +834,7 @@
     }
 
     // answer the index of the column named colName in the table tabName
-    private int getColIndex(String colName, String tabName) {
+    public int getColIndex(String colName, String tabName) {
 
         int ordPos = 0;
 
@@ -864,7 +864,7 @@
 
     // answer the index of the constraint for the column index
     // answer -1, if the column is not part of any constraint
-    private int getConstraintIndex(int colIndex) {
+    public int getConstraintIndex(int colIndex) {
 
         for (int i = 0; i < imColIndex.length; i++) {
             for (int j = 0; j < imColIndex[i].length; j++) {
@@ -877,7 +877,7 @@
         return -1;
     }
 
-    private void initGUI() {
+    public void initGUI() {
 
         Panel pEntry = new Panel();
 
@@ -940,7 +940,7 @@
     }
 
     // get and show the values of the actual row in the GUI
-    private void showAktRow() {
+    public void showAktRow() {
 
         try {
             pStmt.clearParameters();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/BaseMemoryNode.java.orig	2005-06-08 00:24:13.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/BaseMemoryNode.java	2005-07-19 19:41:44.000000000 +0200
@@ -83,9 +83,9 @@
  */
 abstract class BaseMemoryNode extends Node {
 
-    protected Node nLeft;
-    protected Node nRight;
-    protected Node nParent;
+    public Node nLeft;
+    public Node nRight;
+    public Node nParent;
 
     void delete() {
         iBalance = -2;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/CachedRow.java.orig	2005-06-26 18:32:55.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/CachedRow.java	2005-07-19 19:41:44.000000000 +0200
@@ -99,13 +99,13 @@
     static final int NO_POS = -1;
 
     //
-    protected Table tTable;
+    public Table tTable;
     int             storageSize;
 
     /**
      *  Flag indicating unwritten data.
      */
-    protected boolean hasDataChanged;
+    public boolean hasDataChanged;
 
     /**
      *  Flag indicating Node data has changed.
@@ -173,7 +173,7 @@
         oData = in.readData(tTable.getColumnTypes());
     }
 
-    private void readRowInfo(RowInputInterface in)
+    public void readRowInfo(RowInputInterface in)
     throws IOException, HsqlException {
 
         // for use when additional transaction info is attached to rows
@@ -313,7 +313,7 @@
         } catch (IOException e) {}
     }
 
-    private void writeRowInfo(RowOutputInterface out) {
+    public void writeRowInfo(RowOutputInterface out) {
 
         // for use when additional transaction info is attached to rows
     }
@@ -342,7 +342,7 @@
      * @throws IOException
      * @throws HsqlException
      */
-    private void writeNodes(RowOutputInterface out) throws IOException {
+    public void writeNodes(RowOutputInterface out) throws IOException {
 
         out.writeSize(storageSize);
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Column.java.orig	2005-06-08 21:09:41.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Column.java	2005-07-19 19:41:44.000000000 +0200
@@ -125,13 +125,13 @@
     // most variables are final but not declared so because of a bug in
     // JDK 1.1.8 compiler
     public HsqlName         columnName;
-    private int             colType;
-    private int             colSize;
-    private int             colScale;
-    private boolean         isNullable;
-    private boolean         isIdentity;
-    private boolean         isPrimaryKey;
-    private Expression      defaultExpression;
+    public int             colType;
+    public int             colSize;
+    public int             colScale;
+    public boolean         isNullable;
+    public boolean         isIdentity;
+    public boolean         isPrimaryKey;
+    public Expression      defaultExpression;
     long                    identityStart;
     long                    identityIncrement;
     static final BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);
@@ -186,7 +186,7 @@
         }
     }
 
-    private Column() {}
+    public Column() {}
 
     /**
      * Used for primary key changes.
@@ -1206,7 +1206,7 @@
      * @return
      * @throws  HsqlException
      */
-    private static Object convertString(String s,
+    public static Object convertString(String s,
                                         int type) throws HsqlException {
 
         switch (type) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/CompiledStatementExecutor.java.orig	2005-06-09 13:45:44.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/CompiledStatementExecutor.java	2005-07-19 19:41:44.000000000 +0200
@@ -54,9 +54,9 @@
  */
 final class CompiledStatementExecutor {
 
-    private Session session;
-    private Result  updateResult;
-    private Result  emptyResult;
+    public Session session;
+    public Result  updateResult;
+    public Result  emptyResult;
 
     /**
      * Creates a new instance of CompiledStatementExecutor.
@@ -111,7 +111,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the result of executing the statement
      */
-    private Result executeImpl(CompiledStatement cs) throws HsqlException {
+    public Result executeImpl(CompiledStatement cs) throws HsqlException {
 
         switch (cs.type) {
 
@@ -150,7 +150,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the result of executing the statement
      */
-    private Result executeCallStatement(CompiledStatement cs)
+    public Result executeCallStatement(CompiledStatement cs)
     throws HsqlException {
 
         Expression e = cs.expression;          // representing CALL
@@ -187,7 +187,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the result of executing the statement
      */
-    private Result executeDeleteStatement(CompiledStatement cs)
+    public Result executeDeleteStatement(CompiledStatement cs)
     throws HsqlException {
 
         Table       table  = cs.targetTable;
@@ -222,7 +222,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the result of executing the statement
      */
-    private Result executeInsertSelectStatement(CompiledStatement cs)
+    public Result executeInsertSelectStatement(CompiledStatement cs)
     throws HsqlException {
 
         Table     t   = cs.targetTable;
@@ -276,7 +276,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the result of executing the statement
      */
-    private Result executeInsertValuesStatement(CompiledStatement cs)
+    public Result executeInsertValuesStatement(CompiledStatement cs)
     throws HsqlException {
 
         Table        t    = cs.targetTable;
@@ -309,7 +309,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the result of executing the statement
      */
-    private Result executeSelectStatement(CompiledStatement cs)
+    public Result executeSelectStatement(CompiledStatement cs)
     throws HsqlException {
 
         Select select = cs.select;
@@ -350,7 +350,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the result of executing the statement
      */
-    private Result executeUpdateStatement(CompiledStatement cs)
+    public Result executeUpdateStatement(CompiledStatement cs)
     throws HsqlException {
 
         Table       table  = cs.targetTable;
@@ -412,7 +412,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the result of executing the statement
      */
-    private Result executeDDLStatement(CompiledStatement cs)
+    public Result executeDDLStatement(CompiledStatement cs)
     throws HsqlException {
         return session.sqlExecuteDirectNoPreChecks(cs.sql);
     }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/CompiledStatement.java.orig	2005-06-09 16:10:54.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/CompiledStatement.java	2005-07-19 19:41:44.000000000 +0200
@@ -345,7 +345,7 @@
     /**
      * For parameters in INSERT_VALUES and INSERT_SELECT lists
      */
-    private void resolveInsertParameterTypes() {
+    public void resolveInsertParameterTypes() {
 
         for (int i = 0; i < select.iResultLen; i++) {
             Expression colexpr = select.exprColumns[i];
@@ -358,7 +358,7 @@
         }
     }
 
-    private void setParameters(Expression[] params) {
+    public void setParameters(Expression[] params) {
 
         this.parameters = params;
 
@@ -418,7 +418,7 @@
         subqueries   = null;
     }
 
-    private static final Result updateCountResult =
+    public static final Result updateCountResult =
         new Result(ResultConstants.UPDATECOUNT);
 
     Result describeResult() {
@@ -552,7 +552,7 @@
      * @throws Exception if a database access or io error occurs
      * @return the String representation of this object
      */
-    private String describeImpl(Session session) throws Exception {
+    public String describeImpl(Session session) throws Exception {
 
         StringBuffer sb;
 
@@ -626,7 +626,7 @@
         }
     }
 
-    private StringBuffer appendSubqueries(StringBuffer sb) {
+    public StringBuffer appendSubqueries(StringBuffer sb) {
 
         sb.append("SUBQUERIES[");
 
@@ -644,14 +644,14 @@
         return sb;
     }
 
-    private StringBuffer appendTable(StringBuffer sb) {
+    public StringBuffer appendTable(StringBuffer sb) {
 
         sb.append("TABLE[").append(targetTable.getName().name).append(']');
 
         return sb;
     }
 
-    private StringBuffer appendColumns(StringBuffer sb) {
+    public StringBuffer appendColumns(StringBuffer sb) {
 
         sb.append("COLUMNS=[");
 
@@ -667,7 +667,7 @@
         return sb;
     }
 
-    private StringBuffer appendParms(StringBuffer sb) {
+    public StringBuffer appendParms(StringBuffer sb) {
 
         sb.append("PARAMETERS=[");
 
@@ -681,7 +681,7 @@
         return sb;
     }
 
-    private StringBuffer appendCondition(Session session, StringBuffer sb) {
+    public StringBuffer appendCondition(Session session, StringBuffer sb) {
 
         return condition == null ? sb.append("CONDITION[]\n")
                                  : sb.append("CONDITION[").append(
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/CompiledStatementManager.java.orig	2005-05-11 15:38:55.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/CompiledStatementManager.java	2005-07-19 19:41:44.000000000 +0200
@@ -81,28 +81,28 @@
      * The Database for which this object is managing
      * CompiledStatement objects.
      */
-    private Database database;
+    public Database database;
 
     /** Map:  SQL String => Compiled Statement id (int) */
-    private IntKeyHashMap schemaMap;
+    public IntKeyHashMap schemaMap;
 
     /** Map: Compiled Statement id (int) => SQL String */
-    private IntKeyHashMap sqlLookup;
+    public IntKeyHashMap sqlLookup;
 
     /** Map: Compiled statment id (int) => CompiledStatement object. */
-    private IntKeyHashMap csidMap;
+    public IntKeyHashMap csidMap;
 
     /** Map: Session id (int) => Map: compiled statement id (int) => use count in session; */
-    private IntKeyHashMap sessionMap;
+    public IntKeyHashMap sessionMap;
 
     /** Map: Compiled statment id (int) => total use count (all sessions) */
-    private IntKeyIntValueHashMap useMap;
+    public IntKeyIntValueHashMap useMap;
 
     /**
      * Monotonically increasing counter used to assign unique ids to compiled
      * statements.
      */
-    private int next_cs_id;
+    public int next_cs_id;
 
     /**
      * Constructs a new instance of <code>CompiledStatementManager</code>.
@@ -156,7 +156,7 @@
      *
      * @return the next compiled statement identifier in the sequence.
      */
-    private int nextID() {
+    public int nextID() {
 
         next_cs_id++;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Constraint.java.orig	2005-06-08 00:24:14.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Constraint.java	2005-07-19 19:41:44.000000000 +0200
@@ -193,7 +193,7 @@
         core.updateAction = updateAction;
     }
 
-    private Constraint() {}
+    public Constraint() {}
 
     /**
      * Returns the HsqlName.
@@ -205,7 +205,7 @@
     /**
      * Changes constraint name.
      */
-    private void setName(String name, boolean isquoted) throws HsqlException {
+    public void setName(String name, boolean isquoted) throws HsqlException {
         constName.rename(name, isquoted);
     }
 
@@ -573,7 +573,7 @@
      * table. Also returns true if any column covered by the foreign key
      * constraint has a null value.
      */
-    private static boolean hasReferencedRow(Session session,
+    public static boolean hasReferencedRow(Session session,
             Object[] rowdata, int[] rowColArray,
             Index mainIndex) throws HsqlException {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseCommandInterpreter.java.orig	2005-06-26 18:34:22.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseCommandInterpreter.java	2005-07-19 19:41:44.000000000 +0200
@@ -111,9 +111,9 @@
 // fredt@users 20041209 - patch by tytar@users to set default table type
 class DatabaseCommandInterpreter {
 
-    private Tokenizer tokenizer = new Tokenizer();
-    private Database  database;
-    private Session   session;
+    public Tokenizer tokenizer = new Tokenizer();
+    public Database  database;
+    public Session   session;
 
     /**
      * Constructs a new DatabaseCommandInterpreter for the given Session
@@ -191,7 +191,7 @@
                               : result;
     }
 
-    private Result executePart(int cmd, String token) throws Throwable {
+    public Result executePart(int cmd, String token) throws Throwable {
 
         Result result   = Session.emptyUpdateCount;
         int    brackets = 0;
@@ -387,7 +387,7 @@
      * @throws IOException
      * @throws HsqlException
      */
-    private Result processScript() throws IOException, HsqlException {
+    public Result processScript() throws IOException, HsqlException {
 
         String           token = tokenizer.getString();
         ScriptWriterText dsw   = null;
@@ -428,7 +428,7 @@
      *
      * @throws  HsqlException
      */
-    private void processCreate() throws HsqlException {
+    public void processCreate() throws HsqlException {
 
         boolean unique = false;
         int     tableType;
@@ -547,7 +547,7 @@
      * @return  column index map
      * @throws  HsqlException if a column is not found or is duplicate
      */
-    private int[] processColumnList(Table t) throws HsqlException {
+    public int[] processColumnList(Table t) throws HsqlException {
 
         HsqlArrayList list;
         HashSet       set;
@@ -618,7 +618,7 @@
      * @param  unique is unique
      * @throws  HsqlException
      */
-    private void addIndexOn(Table t, String indexName,
+    public void addIndexOn(Table t, String indexName,
                             boolean indexNameQuoted,
                             boolean unique) throws HsqlException {
 
@@ -648,7 +648,7 @@
      *
      * @throws HsqlException
      */
-    private void processCreateTrigger() throws HsqlException {
+    public void processCreateTrigger() throws HsqlException {
 
         Table      t;
         boolean    isForEach;
@@ -769,7 +769,7 @@
 // --
     }
 
-    private Column processCreateColumn() throws HsqlException {
+    public Column processCreateColumn() throws HsqlException {
 
         String   token    = tokenizer.getSimpleName();
         boolean  isQuoted = tokenizer.wasQuotedIdentifier();
@@ -786,7 +786,7 @@
      *  @return a Column object with indicated attributes
      *  @throws  HsqlException
      */
-    private Column processCreateColumn(HsqlName hsqlName)
+    public Column processCreateColumn(HsqlName hsqlName)
     throws HsqlException {
 
         boolean    isIdentity        = false;
@@ -951,7 +951,7 @@
      * @throws HsqlException
      * @return new Expression
      */
-    private Expression processCreateDefaultExpression(int type, int length,
+    public Expression processCreateDefaultExpression(int type, int length,
             int scale) throws HsqlException {
 
         if (type == Types.OTHER) {
@@ -1019,7 +1019,7 @@
      * @throws HsqlException
      * @return list of constraints
      */
-    private HsqlArrayList processCreateConstraints(Table t,
+    public HsqlArrayList processCreateConstraints(Table t,
             boolean constraint, int[] primarykeycolumn) throws HsqlException {
 
         String        token;
@@ -1173,7 +1173,7 @@
      * @param c check constraint
      * @throws HsqlException
      */
-    private void processCreateCheckConstraintCondition(Constraint c)
+    public void processCreateCheckConstraintCondition(Constraint c)
     throws HsqlException {
 
         tokenizer.getThis(Token.T_OPENBRACKET);
@@ -1192,7 +1192,7 @@
      * @param type Description of the Parameter
      * @throws HsqlException
      */
-    private void processCreateTable(int type) throws HsqlException {
+    public void processCreateTable(int type) throws HsqlException {
 
         String token = tokenizer.getName();
         HsqlName schemaname =
@@ -1348,7 +1348,7 @@
      * @throws HsqlException
      * @return constraint
      */
-    private Constraint processCreateFK(Table t,
+    public Constraint processCreateFK(Table t,
                                        HsqlName cname) throws HsqlException {
 
         int[]  localcol;
@@ -1490,7 +1490,7 @@
      *
      * @throws HsqlException
      */
-    private void processCreateView() throws HsqlException {
+    public void processCreateView() throws HsqlException {
 
         String name = tokenizer.getName();
         HsqlName schemaname =
@@ -1551,7 +1551,7 @@
      * @param t table
      * @throws HsqlException
      */
-    private void processAlterTableRename(Table t) throws HsqlException {
+    public void processAlterTableRename(Table t) throws HsqlException {
 
         String  name   = t.getName().name;
         String  schema = t.getSchemaName();
@@ -1598,7 +1598,7 @@
      *
      * @throws HsqlException
      */
-    private void processAlter() throws HsqlException {
+    public void processAlter() throws HsqlException {
 
         String token;
 
@@ -1646,7 +1646,7 @@
      *
      * @throws HsqlException
      */
-    private void processAlterTable() throws HsqlException {
+    public void processAlterTable() throws HsqlException {
 
         String tableName = tokenizer.getName();
         String schema =
@@ -1807,7 +1807,7 @@
      * @param t table
      * @throws HsqlException
      */
-    private void processAlterColumn(Table t) throws HsqlException {
+    public void processAlterColumn(Table t) throws HsqlException {
 
         String columnName  = tokenizer.getSimpleName();
         int    columnIndex = t.getColumnNr(columnName);
@@ -1862,7 +1862,7 @@
         }
     }
 
-    private void processAlterColumnType(Table table,
+    public void processAlterColumnType(Table table,
                                         Column oldCol) throws HsqlException {
 
         Column     newCol = processCreateColumn(oldCol.columnName);
@@ -1877,7 +1877,7 @@
      * @param column column
      * @throws HsqlException
      */
-    private void processAlterColumnRename(Table t,
+    public void processAlterColumnRename(Table t,
                                           Column column)
                                           throws HsqlException {
 
@@ -1898,13 +1898,13 @@
      *
      * @throws HsqlException
      */
-    private void processAlterIndex() throws HsqlException {
+    public void processAlterIndex() throws HsqlException {
 
         // only the one supported operation, so far
         processAlterIndexRename();
     }
 
-    private void processAlterSchema() throws HsqlException {
+    public void processAlterSchema() throws HsqlException {
 
         // only the one supported operation, so far
         processAlterSequenceRename();
@@ -1915,7 +1915,7 @@
      *
      * @throws  HsqlException
      */
-    private void processDrop() throws HsqlException {
+    public void processDrop() throws HsqlException {
 
         String  token;
         boolean isview;
@@ -1981,7 +1981,7 @@
      * @param grant true if grant, false if revoke
      * @throws HsqlException
      */
-    private void processGrantOrRevoke(boolean grant) throws HsqlException {
+    public void processGrantOrRevoke(boolean grant) throws HsqlException {
 
         int    right;
         Object accessKey;
@@ -2048,7 +2048,7 @@
      *
      * @throws HsqlException
      */
-    private void processConnect() throws HsqlException {
+    public void processConnect() throws HsqlException {
 
         String userName;
         String password;
@@ -2084,7 +2084,7 @@
      *
      * @throws  HsqlException
      */
-    private void processSet() throws HsqlException {
+    public void processSet() throws HsqlException {
 
         String token;
 
@@ -2346,7 +2346,7 @@
      * @return   true if next token is "TRUE"; false if next token is "FALSE"
      * @throws  HsqlException if the next token is neither "TRUE" or "FALSE"
      */
-    private boolean processTrueOrFalse() throws HsqlException {
+    public boolean processTrueOrFalse() throws HsqlException {
 
         String sToken = tokenizer.getSimpleToken();
 
@@ -2364,7 +2364,7 @@
      *
      * @throws  HsqlException
      */
-    private void processCommit() throws HsqlException {
+    public void processCommit() throws HsqlException {
         tokenizer.isGetThis(Token.T_WORK);
         session.commit();
     }
@@ -2374,7 +2374,7 @@
      *
      * @throws  HsqlException
      */
-    private void processRollback() throws HsqlException {
+    public void processRollback() throws HsqlException {
 
         String  token;
         boolean toSavepoint;
@@ -2406,7 +2406,7 @@
      *
      * @throws  HsqlException
      */
-    private void processSavepoint() throws HsqlException {
+    public void processSavepoint() throws HsqlException {
 
         String token;
 
@@ -2420,7 +2420,7 @@
      *
      * @throws  HsqlException
      */
-    private void processShutdown() throws HsqlException {
+    public void processShutdown() throws HsqlException {
 
         int    closemode;
         String token;
@@ -2455,7 +2455,7 @@
      *
      * @throws  HsqlException
      */
-    private void processCheckpoint() throws HsqlException {
+    public void processCheckpoint() throws HsqlException {
 
         boolean defrag;
         String  token;
@@ -2479,7 +2479,7 @@
     }
 
 // --------------------- new methods / simplifications ------------------------
-    private HsqlName newIndexHsqlName(String name,
+    public HsqlName newIndexHsqlName(String name,
                                       boolean isQuoted) throws HsqlException {
 
         return HsqlName.isReservedIndexName(name)
@@ -2487,7 +2487,7 @@
                : database.nameManager.newHsqlName(name, isQuoted);
     }
 
-    private Table newTable(int type, String name, boolean quoted,
+    public Table newTable(int type, String name, boolean quoted,
                            HsqlName schema) throws HsqlException {
 
         int sid = session.getId();
@@ -2517,7 +2517,7 @@
      * @throws HsqlException if the operation of adding the Column, c, to
      *      the table t is not valid
      */
-    private void checkAddColumn(Table t, Column c) throws HsqlException {
+    public void checkAddColumn(Table t, Column c) throws HsqlException {
 
         boolean canAdd = true;
 
@@ -2543,7 +2543,7 @@
         }
     }
 
-    private void checkFKColumnDefaults(Table t,
+    public void checkFKColumnDefaults(Table t,
                                        Constraint tc) throws HsqlException {
 
         boolean check = tc.core.updateAction == Constraint.SET_DEFAULT;
@@ -2568,7 +2568,7 @@
         }
     }
 
-    private void processAlterSequence() throws HsqlException {
+    public void processAlterSequence() throws HsqlException {
 
         long   start;
         String name       = tokenizer.getName();
@@ -2592,7 +2592,7 @@
      *
      * @throws HsqlException
      */
-    private void processAlterIndexRename() throws HsqlException {
+    public void processAlterIndexRename() throws HsqlException {
 
         String name = tokenizer.getName();
         String schema =
@@ -2643,7 +2643,7 @@
      *
      * @throws HsqlException
      */
-    private void processAlterSequenceRename() throws HsqlException {
+    public void processAlterSequenceRename() throws HsqlException {
 
         String name = tokenizer.getSimpleName();
 
@@ -2661,7 +2661,7 @@
      * @param t table
      * @throws HsqlException
      */
-    private void processAlterTableAddColumn(Table t) throws HsqlException {
+    public void processAlterTableAddColumn(Table t) throws HsqlException {
 
         String token;
         int    colindex = t.getColumnCount();
@@ -2689,7 +2689,7 @@
      * @param t table
      * @throws HsqlException
      */
-    private void processAlterTableDropColumn(Table t) throws HsqlException {
+    public void processAlterTableDropColumn(Table t) throws HsqlException {
 
         String token;
         int    colindex;
@@ -2710,7 +2710,7 @@
      * @param t table
      * @throws HsqlException
      */
-    private void processAlterTableDropConstraint(Table t)
+    public void processAlterTableDropConstraint(Table t)
     throws HsqlException {
         processAlterTableDropConstraint(t, tokenizer.getName());
     }
@@ -2722,7 +2722,7 @@
      * @param name
      * @throws HsqlException
      */
-    private void processAlterTableDropConstraint(Table t,
+    public void processAlterTableDropConstraint(Table t,
             String cname) throws HsqlException {
 
         session.commit();
@@ -2734,7 +2734,7 @@
         return;
     }
 
-    private void processCreateAlias() throws HsqlException {
+    public void processCreateAlias() throws HsqlException {
 
         String alias;
         String methodFQN;
@@ -2748,7 +2748,7 @@
         database.getAliasMap().put(alias, methodFQN);
     }
 
-    private void processCreateIndex(boolean unique) throws HsqlException {
+    public void processCreateIndex(boolean unique) throws HsqlException {
 
         Table   t;
         String  name     = tokenizer.getName();
@@ -2781,7 +2781,7 @@
      * be positive
      * @throws HsqlException
      */
-    private void processCreateSequence() throws HsqlException {
+    public void processCreateSequence() throws HsqlException {
 
 /*
         CREATE SEQUENCE <name>
@@ -2830,7 +2830,7 @@
      * CREATE SCHEMA PUBLIC in scripts should pass this, so we do not throw
      * if this schema is created a second time
      */
-    private void processCreateSchema() throws HsqlException {
+    public void processCreateSchema() throws HsqlException {
 
         String  name     = tokenizer.getSimpleName();
         boolean isquoted = tokenizer.wasQuotedIdentifier();
@@ -2855,7 +2855,7 @@
         session.loggedSchema = session.currentSchema;
     }
 
-    private void processCreateUser() throws HsqlException {
+    public void processCreateUser() throws HsqlException {
 
         String  name;
         String  password;
@@ -2876,11 +2876,11 @@
         }
     }
 
-    private void processDisconnect() throws HsqlException {
+    public void processDisconnect() throws HsqlException {
         session.close();
     }
 
-    private void processDropTable(boolean isView) throws HsqlException {
+    public void processDropTable(boolean isView) throws HsqlException {
 
         boolean ifexists = false;
         boolean cascade  = false;
@@ -2917,14 +2917,14 @@
                                          isView, cascade);
     }
 
-    private void processDropUser() throws HsqlException {
+    public void processDropUser() throws HsqlException {
 
         session.checkAdmin();
         session.checkDDLWrite();
         database.getUserManager().dropUser(getPassword());
     }
 
-    private void processDropSequence() throws HsqlException {
+    public void processDropSequence() throws HsqlException {
 
         boolean ifexists = false;
 
@@ -2962,7 +2962,7 @@
         database.schemaManager.dropSequence(sequence);
     }
 
-    private void processDropTrigger() throws HsqlException {
+    public void processDropTrigger() throws HsqlException {
 
         session.checkAdmin();
         session.checkDDLWrite();
@@ -2974,7 +2974,7 @@
         database.schemaManager.dropTrigger(session, triggername, schemaname);
     }
 
-    private void processDropIndex() throws HsqlException {
+    public void processDropIndex() throws HsqlException {
 
         String name = tokenizer.getName();
         String schema =
@@ -2997,7 +2997,7 @@
         database.schemaManager.dropIndex(session, name, schema, ifexists);
     }
 
-    private void processDropSchema() throws HsqlException {
+    public void processDropSchema() throws HsqlException {
 
         String  name    = tokenizer.getSimpleName();
         boolean cascade = tokenizer.isGetThis(Token.T_CASCADE);
@@ -3017,7 +3017,7 @@
         }
     }
 
-    private Result processExplainPlan() throws IOException, HsqlException {
+    public Result processExplainPlan() throws IOException, HsqlException {
 
         // PRE:  we assume only one DML or DQL has been submitted
         //       and simply ignore anything following the first
@@ -3092,7 +3092,7 @@
     static final int    oldLibLen = oldLib.length();
     static final String newLib    = "org.hsqldb.Library.";
 
-    private static String upgradeMethodFQN(String fqn) {
+    public static String upgradeMethodFQN(String fqn) {
 
         if (fqn.startsWith(oldLib)) {
             fqn = newLib + fqn.substring(oldLibLen);
@@ -3166,7 +3166,7 @@
      * @param t table
      * @throws  HsqlException
      */
-    private void logTableDDL(Table t) throws HsqlException {
+    public void logTableDDL(Table t) throws HsqlException {
 
         StringBuffer tableDDL;
         String       sourceDDL;
@@ -3184,7 +3184,7 @@
         }
     }
 
-    private void processAlterTableAddUniqueConstraint(Table t,
+    public void processAlterTableAddUniqueConstraint(Table t,
             HsqlName n) throws HsqlException {
 
         int[] col;
@@ -3202,7 +3202,7 @@
         tableWorks.createUniqueConstraint(col, n);
     }
 
-    private void processAlterTableAddForeignKeyConstraint(Table t,
+    public void processAlterTableAddForeignKeyConstraint(Table t,
             HsqlName n) throws HsqlException {
 
         Constraint tc;
@@ -3225,7 +3225,7 @@
                                     tc.core.updateAction);
     }
 
-    private void processAlterTableAddCheckConstraint(Table table,
+    public void processAlterTableAddCheckConstraint(Table table,
             HsqlName name) throws HsqlException {
 
         Constraint check;
@@ -3245,7 +3245,7 @@
         tableWorks.createCheckConstraint(check, name);
     }
 
-    private void processAlterTableAddPrimaryKey(Table t,
+    public void processAlterTableAddPrimaryKey(Table t,
             HsqlName n) throws HsqlException {
 
         int[] col;
@@ -3259,7 +3259,7 @@
         tableWorks.addPrimaryKey(col, n);
     }
 
-    private void processReleaseSavepoint() throws HsqlException {
+    public void processReleaseSavepoint() throws HsqlException {
 
         String token;
 
@@ -3270,7 +3270,7 @@
         session.releaseSavepoint(token);
     }
 
-    private void processAlterUser() throws HsqlException {
+    public void processAlterUser() throws HsqlException {
 
         String userName;
         String password;
@@ -3291,7 +3291,7 @@
         session.setScripting(false);
     }
 
-    private String getUserIdentifier() throws HsqlException {
+    public String getUserIdentifier() throws HsqlException {
 
         String    token = tokenizer.getString();
         Tokenizer t     = new Tokenizer(token);
@@ -3299,7 +3299,7 @@
         return t.getSimpleName();
     }
 
-    private String getPassword() throws HsqlException {
+    public String getPassword() throws HsqlException {
 
         String token = tokenizer.getString();
 
@@ -3312,7 +3312,7 @@
      *
      * @throws HsqlException
      */
-    private void processRoleGrantOrRevoke(boolean grant)
+    public void processRoleGrantOrRevoke(boolean grant)
     throws HsqlException {
 
         String         token;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseInformationFull.java.orig	2005-06-08 21:09:43.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseInformationFull.java	2005-07-19 19:41:44.000000000 +0200
@@ -66,7 +66,7 @@
 extends org.hsqldb.DatabaseInformationMain {
 
     /** Provides SQL function/procedure reporting support. */
-    protected DIProcedureInfo pi;
+    public DIProcedureInfo pi;
 
     /**
      * Constructs a new DatabaseInformationFull instance. <p>
@@ -88,7 +88,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the system table corresponding to the specified index
      */
-    protected Table generateTable(int tableIndex) throws HsqlException {
+    public Table generateTable(int tableIndex) throws HsqlException {
 
         switch (tableIndex) {
 
@@ -3248,7 +3248,7 @@
      *      in the table
      *
      */
-    protected void addPColRows(Table t, HsqlArrayList l, String cat,
+    public void addPColRows(Table t, HsqlArrayList l, String cat,
                                String schem, String pName, String cName,
                                Integer cType, Integer dType, String tName,
                                Integer prec, Integer len, Integer scale,
@@ -3348,7 +3348,7 @@
      *      in the table
      *
      */
-    protected void addProcRows(Table t, HsqlArrayList l, String cat,
+    public void addProcRows(Table t, HsqlArrayList l, String cat,
                                String schem, String pName, Integer ip,
                                Integer op, Integer rs, String remark,
                                Integer pType, String origin,
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseInformation.java.orig	2005-05-16 18:49:35.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseInformation.java	2005-07-19 19:41:44.000000000 +0200
@@ -56,69 +56,69 @@
 class DatabaseInformation {
 
     // ids for system table names strictly in order of sysTableNames[]
-    protected static final int SYSTEM_BESTROWIDENTIFIER = 0;
-    protected static final int SYSTEM_CATALOGS          = 1;
-    protected static final int SYSTEM_COLUMNPRIVILEGES  = 2;
-    protected static final int SYSTEM_COLUMNS           = 3;
-    protected static final int SYSTEM_CROSSREFERENCE    = 4;
-    protected static final int SYSTEM_INDEXINFO         = 5;
-    protected static final int SYSTEM_PRIMARYKEYS       = 6;
-    protected static final int SYSTEM_PROCEDURECOLUMNS  = 7;
-    protected static final int SYSTEM_PROCEDURES        = 8;
-    protected static final int SYSTEM_SCHEMAS           = 9;
-    protected static final int SYSTEM_SUPERTABLES       = 10;
-    protected static final int SYSTEM_SUPERTYPES        = 11;
-    protected static final int SYSTEM_TABLEPRIVILEGES   = 12;
-    protected static final int SYSTEM_TABLES            = 13;
-    protected static final int SYSTEM_TABLETYPES        = 14;
-    protected static final int SYSTEM_TYPEINFO          = 15;
-    protected static final int SYSTEM_UDTATTRIBUTES     = 16;
-    protected static final int SYSTEM_UDTS              = 17;
-    protected static final int SYSTEM_USERS             = 18;
-    protected static final int SYSTEM_VERSIONCOLUMNS    = 19;
+    public static final int SYSTEM_BESTROWIDENTIFIER = 0;
+    public static final int SYSTEM_CATALOGS          = 1;
+    public static final int SYSTEM_COLUMNPRIVILEGES  = 2;
+    public static final int SYSTEM_COLUMNS           = 3;
+    public static final int SYSTEM_CROSSREFERENCE    = 4;
+    public static final int SYSTEM_INDEXINFO         = 5;
+    public static final int SYSTEM_PRIMARYKEYS       = 6;
+    public static final int SYSTEM_PROCEDURECOLUMNS  = 7;
+    public static final int SYSTEM_PROCEDURES        = 8;
+    public static final int SYSTEM_SCHEMAS           = 9;
+    public static final int SYSTEM_SUPERTABLES       = 10;
+    public static final int SYSTEM_SUPERTYPES        = 11;
+    public static final int SYSTEM_TABLEPRIVILEGES   = 12;
+    public static final int SYSTEM_TABLES            = 13;
+    public static final int SYSTEM_TABLETYPES        = 14;
+    public static final int SYSTEM_TYPEINFO          = 15;
+    public static final int SYSTEM_UDTATTRIBUTES     = 16;
+    public static final int SYSTEM_UDTS              = 17;
+    public static final int SYSTEM_USERS             = 18;
+    public static final int SYSTEM_VERSIONCOLUMNS    = 19;
 
     // HSQLDB-specific
-    protected static final int SYSTEM_ALIASES         = 20;
-    protected static final int SYSTEM_BYTECODE        = 21;
-    protected static final int SYSTEM_CACHEINFO       = 22;
-    protected static final int SYSTEM_CLASSPRIVILEGES = 23;
-    protected static final int SYSTEM_SESSIONINFO     = 24;
-    protected static final int SYSTEM_PROPERTIES      = 25;
-    protected static final int SYSTEM_SESSIONS        = 26;
-    protected static final int SYSTEM_TRIGGERCOLUMNS  = 27;
-    protected static final int SYSTEM_TRIGGERS        = 28;
-    protected static final int SYSTEM_ALLTYPEINFO     = 29;
+    public static final int SYSTEM_ALIASES         = 20;
+    public static final int SYSTEM_BYTECODE        = 21;
+    public static final int SYSTEM_CACHEINFO       = 22;
+    public static final int SYSTEM_CLASSPRIVILEGES = 23;
+    public static final int SYSTEM_SESSIONINFO     = 24;
+    public static final int SYSTEM_PROPERTIES      = 25;
+    public static final int SYSTEM_SESSIONS        = 26;
+    public static final int SYSTEM_TRIGGERCOLUMNS  = 27;
+    public static final int SYSTEM_TRIGGERS        = 28;
+    public static final int SYSTEM_ALLTYPEINFO     = 29;
 
 // boucherb@users 20030305 - brought in line with SQL 200n
-    protected static final int SYSTEM_VIEWS = 30;
+    public static final int SYSTEM_VIEWS = 30;
 
 // boucherb@users 20030403 - isolated and improved text table reporting
-    protected static final int SYSTEM_TEXTTABLES = 31;
+    public static final int SYSTEM_TEXTTABLES = 31;
 
 // boucherb@users 20040107 - metadata support for sequences
-    protected static final int SYSTEM_SEQUENCES        = 32;
-    protected static final int SYSTEM_USAGE_PRIVILEGES = 33;
+    public static final int SYSTEM_SEQUENCES        = 32;
+    public static final int SYSTEM_USAGE_PRIVILEGES = 33;
 
 // boucherb@users 20040107 - metadata support for constraints
-    protected static final int SYSTEM_CHECK_CONSTRAINTS = 34;
-    protected static final int SYSTEM_TABLE_CONSTRAINTS = 35;
+    public static final int SYSTEM_CHECK_CONSTRAINTS = 34;
+    public static final int SYSTEM_TABLE_CONSTRAINTS = 35;
 
 // boucherb@users 20040107 - metadata support for view usage breakdown- SQL 200n
-    protected static final int SYSTEM_CHECK_COLUMN_USAGE  = 36;
-    protected static final int SYSTEM_CHECK_ROUTINE_USAGE = 37;
-    protected static final int SYSTEM_CHECK_TABLE_USAGE   = 38;
-    protected static final int SYSTEM_VIEW_COLUMN_USAGE   = 39;
-    protected static final int SYSTEM_VIEW_TABLE_USAGE    = 40;
-    protected static final int SYSTEM_VIEW_ROUTINE_USAGE  = 41;
+    public static final int SYSTEM_CHECK_COLUMN_USAGE  = 36;
+    public static final int SYSTEM_CHECK_ROUTINE_USAGE = 37;
+    public static final int SYSTEM_CHECK_TABLE_USAGE   = 38;
+    public static final int SYSTEM_VIEW_COLUMN_USAGE   = 39;
+    public static final int SYSTEM_VIEW_TABLE_USAGE    = 40;
+    public static final int SYSTEM_VIEW_ROUTINE_USAGE  = 41;
 
 // boucherb@users 20050514 - further SQL 200n metdata support
-    protected static final int SYSTEM_AUTHORIZATIONS                 = 42;
-    protected static final int SYSTEM_COLLATIONS                     = 43;
-    protected static final int SYSTEM_ROLE_AUTHORIZATION_DESCRIPTORS = 44;
-    protected static final int SYSTEM_SCHEMATA                       = 45;
+    public static final int SYSTEM_AUTHORIZATIONS                 = 42;
+    public static final int SYSTEM_COLLATIONS                     = 43;
+    public static final int SYSTEM_ROLE_AUTHORIZATION_DESCRIPTORS = 44;
+    public static final int SYSTEM_SCHEMATA                       = 45;
 
     /** system table names strictly in order of their ids */
-    protected static final String[] sysTableNames = {
+    public static final String[] sysTableNames = {
         "SYSTEM_BESTROWIDENTIFIER",                 //
         "SYSTEM_CATALOGS",                          //
         "SYSTEM_COLUMNPRIVILEGES",                  //
@@ -266,7 +266,7 @@
     };
 
     /** Map: table name => table id */
-    protected static final IntValueHashMap sysTableNamesMap;
+    public static final IntValueHashMap sysTableNamesMap;
 
     static {
         sysTableNamesMap = new IntValueHashMap(47);
@@ -281,13 +281,13 @@
     }
 
     /** Database for which to produce tables */
-    protected final Database database;
+    public final Database database;
 
     /**
      * Simple object-wide flag indicating that all of this object's cached
      * data is dirty.
      */
-    protected boolean isDirty = true;
+    public boolean isDirty = true;
 
     /**
      * state flag -- if true, contentful tables are to be produced, else
@@ -295,7 +295,7 @@
      * database startup where user views reference system tables and faster
      * system table structural reflection for table metadata.
      */
-    protected boolean withContent = false;
+    public boolean withContent = false;
 
     /**
      * Factory method retuns the fullest system table producer
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseInformationMain.java.orig	2005-06-08 21:09:43.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseInformationMain.java	2005-07-19 19:41:44.000000000 +0200
@@ -118,40 +118,40 @@
     // HsqlName objects for the system tables
 
     /** The HsqlNames of the system tables. */
-    protected static final HsqlName[] sysTableHsqlNames;
+    public static final HsqlName[] sysTableHsqlNames;
 
     /** Current user for each cached system table */
-    protected final int[] sysTableSessions = new int[sysTableNames.length];
+    public final int[] sysTableSessions = new int[sysTableNames.length];
 
     /** true if the contents of a cached system table depends on the session */
-    protected final boolean[] sysTableSessionDependent =
+    public final boolean[] sysTableSessionDependent =
         new boolean[sysTableNames.length];
 
     /** cache of system tables */
-    protected final Table[] sysTables = new Table[sysTableNames.length];
+    public final Table[] sysTables = new Table[sysTableNames.length];
 
     /** Set: { names of system tables that are not to be cached } */
-    protected static final HashSet nonCachedTablesSet;
+    public static final HashSet nonCachedTablesSet;
 
     /**
      * Map: simple <code>Column</code> name <code>String</code> object =>
      * <code>HsqlName</code> object.
      */
-    protected static final HashMap columnNameMap;
+    public static final HashMap columnNameMap;
 
     /**
      * The <code>Session</code> object under consideration in the current
      * executution context.
      */
-    protected Session session;
+    public Session session;
 
     /** The table types HSQLDB supports. */
-    protected static final String[] tableTypes = new String[] {
+    public static final String[] tableTypes = new String[] {
         "GLOBAL TEMPORARY", "SYSTEM TABLE", "TABLE", "VIEW"
     };
 
     /** Provides naming support. */
-    protected DINameSpace ns;
+    public DINameSpace ns;
 
     static {
         columnNameMap      = new HashMap();
@@ -218,7 +218,7 @@
      * @throws HsqlException if a problem occurs when adding the
      *      column (e.g. duplicate name)
      */
-    protected final void addColumn(Table t, String name, int type, int size,
+    public final void addColumn(Table t, String name, int type, int size,
                                    boolean nullable) throws HsqlException {
 
         HsqlName cn;
@@ -249,7 +249,7 @@
      * @throws HsqlException if a problem occurs when adding the
      *      column (e.g. duplicate name)
      */
-    protected final void addColumn(Table t, String name, int type,
+    public final void addColumn(Table t, String name, int type,
                                    boolean nullable) throws HsqlException {
         addColumn(t, name, type, 0, nullable);
     }
@@ -264,7 +264,7 @@
      * @throws HsqlException if a problem occurs when adding the
      *      column (e.g. duplicate name)
      */
-    protected final void addColumn(Table t, String name,
+    public final void addColumn(Table t, String name,
                                    int type) throws HsqlException {
         addColumn(t, name, type, true);
     }
@@ -276,7 +276,7 @@
      *
      * @return an enumeration over all of the tables in this database
      */
-    protected final Iterator allTables() {
+    public final Iterator allTables() {
         return new WrapperIterator(database.schemaManager.allTablesIterator(),
                                    new WrapperIterator(sysTables, true));
     }
@@ -287,7 +287,7 @@
      *
      * @throws HsqlException if a database access error occurs
      */
-    protected final void cacheClear() throws HsqlException {
+    public final void cacheClear() throws HsqlException {
 
         int i = sysTables.length;
 
@@ -312,7 +312,7 @@
      * @throws HsqlException if a database access error occurs
      * @return the system table corresponding to the specified tableIndex value
      */
-    protected Table generateTable(int tableIndex) throws HsqlException {
+    public Table generateTable(int tableIndex) throws HsqlException {
 
         Table t = sysTables[tableIndex];
 
@@ -417,7 +417,7 @@
      *
      * @throws HsqlException if a database access error occurs
      */
-    protected final void init() throws HsqlException {
+    public final void init() throws HsqlException {
 
         ns = new DINameSpace(database);
 
@@ -488,7 +488,7 @@
      * @param table the table for which to check accessibility
      * @throws HsqlException if a database access error occurs
      */
-    protected final boolean isAccessibleTable(Table table)
+    public final boolean isAccessibleTable(Table table)
     throws HsqlException {
         return session.isAccessible(table.getName());
     }
@@ -500,7 +500,7 @@
      * @param name of the table
      * @throws HsqlException if a database access error occurs
      */
-    protected final Table createBlankTable(HsqlName name)
+    public final Table createBlankTable(HsqlName name)
     throws HsqlException {
         return new Table(database, name, Table.SYSTEM_TABLE);
     }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Database.java.orig	2005-07-01 20:56:47.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Database.java	2005-07-19 19:41:44.000000000 +0200
@@ -119,17 +119,17 @@
 public class Database {
 
     int            databaseID;
-    private String sType;
-    private String sName;
+    public String sType;
+    public String sName;
 
 // loosecannon1@users 1.7.2 patch properties on the JDBC URL
-    private HsqlProperties urlProperties;
-    private String         sPath;
+    public HsqlProperties urlProperties;
+    public String         sPath;
     DatabaseInformation    dbInfo;
     ClassLoader            classLoader;
 
     /** indicates the state of the database */
-    private int   dbState;
+    public int   dbState;
     public Logger logger;
 
     /** true means that all tables are readonly. */
@@ -139,21 +139,21 @@
      * true means that all CACHED and TEXT tables are readonly.
      *  MEMORY tables are updatable but updates are not persisted.
      */
-    private boolean filesReadOnly;
+    public boolean filesReadOnly;
 
     /** true means filesReadOnly but CACHED and TEXT tables are disallowed */
-    private boolean                filesInJar;
+    public boolean                filesInJar;
     public boolean                 sqlEnforceStrictSize;
     public int                     firstIdentity;
-    private boolean                bIgnoreCase;
-    private boolean                bReferentialIntegrity;
-    private HsqlDatabaseProperties databaseProperties;
-    private boolean                shutdownOnNoConnection;
+    public boolean                bIgnoreCase;
+    public boolean                bReferentialIntegrity;
+    public HsqlDatabaseProperties databaseProperties;
+    public boolean                shutdownOnNoConnection;
 
     // schema invarient objects
-    private HashMap        hAlias;
-    private UserManager    userManager;
-    private GranteeManager granteeManager;
+    public HashMap        hAlias;
+    public UserManager    userManager;
+    public GranteeManager granteeManager;
     HsqlNameManager        nameManager;
 
     // session related objects
@@ -516,7 +516,7 @@
      *  Called by the garbage collector on this Databases object when garbage
      *  collection determines that there are no more references to it.
      */
-    protected void finalize() {
+    public void finalize() {
 
         if (getState() != DATABASE_ONLINE) {
             return;
@@ -633,23 +633,23 @@
 // fredt@users - system change numbers utilised
 
     /** last statement level change number - not externally settable */
-    private long dbSCN = 0;
+    public long dbSCN = 0;
 
     /** last statement level change number for DDL statements - unused */
-    private long ddlSCN = 0;
+    public long ddlSCN = 0;
 
     /** last statement level change number for DML statements - used for all statements */
-    private long dmlSCN = 0;
+    public long dmlSCN = 0;
 
     synchronized long getSCN() {
         return dbSCN;
     }
 
-    private synchronized void setSCN(long l) {
+    public synchronized void setSCN(long l) {
         dbSCN = l;
     }
 
-    private synchronized long nextSCN() {
+    public synchronized long nextSCN() {
 
         dbSCN++;
 
@@ -667,7 +667,7 @@
         return dmlSCN;
     }
 
-    private synchronized void setState(int state) {
+    public synchronized void setState(int state) {
         dbState = state;
     }
 
@@ -715,8 +715,8 @@
         return urlProperties;
     }
 
-    private FileAccess fileaccess;
-    private boolean    isStoredFileAccess;
+    public FileAccess fileaccess;
+    public boolean    isStoredFileAccess;
 
     public synchronized FileAccess getFileAccess() {
         return fileaccess;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseManager.java.orig	2005-06-26 18:34:33.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseManager.java	2005-07-19 19:41:44.000000000 +0200
@@ -62,7 +62,7 @@
     // Database and Server registry
 
     /** provides unique ID's for the Databases currently in registry */
-    private static int dbIDCounter;
+    public static int dbIDCounter;
 
     /** name to Database mapping for mem: databases */
     static final HashMap memDatabaseMap = new HashMap();
@@ -237,7 +237,7 @@
     }
 
 // loosecannon1@users 1.7.2 patch properties on the JDBC URL
-    private static synchronized Database getDatabaseObject(String type,
+    public static synchronized Database getDatabaseObject(String type,
             String path, HsqlProperties props) throws HsqlException {
 
         Database db;
@@ -273,7 +273,7 @@
      * Looks up database of a given type and path in the registry. Returns
      * null if there is none.
      */
-    private static synchronized Database lookupDatabaseObject(String type,
+    public static synchronized Database lookupDatabaseObject(String type,
             String path) throws HsqlException {
 
         Object  key = path;
@@ -295,7 +295,7 @@
      * Adds a database to the registry. Returns
      * null if there is none.
      */
-    private static synchronized void addDatabaseObject(String type,
+    public static synchronized void addDatabaseObject(String type,
             String path, Database db) throws HsqlException {
 
         Object  key = path;
@@ -396,7 +396,7 @@
     /**
      * Deregisters a server as serving a given database. Not yet used.
      */
-    private static void deRegisterServer(Server server, Database db) {
+    public static void deRegisterServer(Server server, Database db) {
 
         Iterator it = serverMap.values().iterator();
 
@@ -414,7 +414,7 @@
     /**
      * Registers a server as serving a given database.
      */
-    private static void registerServer(Server server, Database db) {
+    public static void registerServer(Server server, Database db) {
 
         if (!serverMap.containsKey(server)) {
             serverMap.put(server, new HashSet());
@@ -429,7 +429,7 @@
      * Notifies all servers that serve the database that the database has been
      * shutdown.
      */
-    private static void notifyServers(Database db) {
+    public static void notifyServers(Database db) {
 
         Iterator it = serverMap.keySet().iterator();
 
@@ -461,7 +461,7 @@
     }
 
     // Timer
-    private static final HsqlTimer timer = new HsqlTimer();
+    public static final HsqlTimer timer = new HsqlTimer();
 
     public static HsqlTimer getTimer() {
         return timer;
@@ -469,7 +469,7 @@
 
     // converts file path to database lookup key, converting any
     // any thrown exception to an HsqlException in the process
-    private static Object filePathToKey(String path) throws HsqlException {
+    public static Object filePathToKey(String path) throws HsqlException {
 
         try {
             return FileUtil.canonicalFile(path);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseScript.java.orig	2005-06-10 14:50:41.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DatabaseScript.java	2005-07-19 19:41:44.000000000 +0200
@@ -640,7 +640,7 @@
     /**
      * Generates the column definitions for a table.
      */
-    private static void getColumnList(Table t, int[] col, int len,
+    public static void getColumnList(Table t, int[] col, int len,
                                       StringBuffer a) {
 
         a.append('(');
@@ -659,7 +659,7 @@
     /**
      * Generates the foreign key declaration for a given Constraint object.
      */
-    private static void getFKStatement(Constraint c, StringBuffer a) {
+    public static void getFKStatement(Constraint c, StringBuffer a) {
 
         a.append(Token.T_CONSTRAINT).append(' ');
         a.append(c.getName().statementName);
@@ -691,7 +691,7 @@
     /**
      * Returns the foreign key action rule.
      */
-    private static String getFKAction(int action) {
+    public static String getFKAction(int action) {
 
         switch (action) {
 
@@ -712,7 +712,7 @@
     /**
      * Adds a script line to the result.
      */
-    private static void addRow(Result r, String sql) {
+    public static void addRow(Result r, String sql) {
 
         String[] s = new String[1];
 
@@ -733,7 +733,7 @@
      * grant select on system tables
      *
      */
-    private static void addRightsStatements(Database dDatabase, Result r) {
+    public static void addRightsStatements(Database dDatabase, Result r) {
 
         StringBuffer   a;
         HashMappedList userlist = dDatabase.getUserManager().getUsers();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DINameSpace.java.orig	2005-06-08 21:09:44.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DINameSpace.java	2005-07-19 19:41:44.000000000 +0200
@@ -61,10 +61,10 @@
 final class DINameSpace {
 
     /** The Database for which the name space functionality is provided */
-    private Database database;
+    public Database database;
 
     /** The catalog name reported by this namespace */
-    private String catalogName;
+    public String catalogName;
 
     /**
      * Set { <code>Class</code> FQN <code>String</code> objects }. <p>
@@ -74,7 +74,7 @@
      * support of the expected SQL CLI scalar functions and other core
      * HSQLDB SQL functions and stored procedures. <p>
      */
-    private static HashSet builtin = new HashSet();
+    public static HashSet builtin = new HashSet();
 
     // procedure columns
     // make temporary ad-hoc spec a little more "official"
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DIProcedureInfo.java.orig	2005-06-08 21:09:44.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DIProcedureInfo.java	2005-07-19 19:41:44.000000000 +0200
@@ -70,25 +70,25 @@
     static final int      procedureNoNulls         = 0;
     static final int      procedureNullable        = 1;
     static final int      procedureNullableUnknown = 2;
-    private Class         clazz;
-    private Class[]       colClasses;
-    private int[]         colTypes;
-    private int           colOffset;
-    private int           colCount;
-    private boolean       colsResolved;
-    private String        fqn;
-    private String        specificName;
-    private int           hnd_remarks;
-    private Method        method;
-    private String        sig;
-    private DINameSpace   nameSpace;
-    private final HashMap typeMap = new HashMap();
+    public Class         clazz;
+    public Class[]       colClasses;
+    public int[]         colTypes;
+    public int           colOffset;
+    public int           colCount;
+    public boolean       colsResolved;
+    public String        fqn;
+    public String        specificName;
+    public int           hnd_remarks;
+    public Method        method;
+    public String        sig;
+    public DINameSpace   nameSpace;
+    public final HashMap typeMap = new HashMap();
 
     public DIProcedureInfo(DINameSpace ns) throws HsqlException {
         setNameSpace(ns);
     }
 
-    private int colOffset() {
+    public int colOffset() {
 
         if (!colsResolved) {
             resolveCols();
@@ -512,7 +512,7 @@
         } catch (Exception e) {}
     }
 
-    private void resolveCols() {
+    public void resolveCols() {
 
         Class   rType;
         Class[] pTypes;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DiskNode.java.orig	2005-06-26 18:34:55.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DiskNode.java	2005-07-19 19:41:44.000000000 +0200
@@ -93,11 +93,11 @@
  */
 class DiskNode extends Node {
 
-    protected Row    rData;
-    private int      iLeft   = NO_POS;
-    private int      iRight  = NO_POS;
-    private int      iParent = NO_POS;
-    private int      iId;    // id of Index object for this Node
+    public Row    rData;
+    public int      iLeft   = NO_POS;
+    public int      iRight  = NO_POS;
+    public int      iParent = NO_POS;
+    public int      iId;    // id of Index object for this Node
     static final int SIZE_IN_BYTE = 4 * 4;
 
     DiskNode(CachedRow r, RowInputInterface in,
@@ -162,7 +162,7 @@
         return rData;
     }
 
-    private Node findNode(int pos) throws HsqlException {
+    public Node findNode(int pos) throws HsqlException {
 
         Node ret = null;
         Row  r   = ((CachedRow) rData).getTable().getRow(pos, null);
@@ -373,7 +373,7 @@
         writeTranslatePointer(iParent, out, lookup);
     }
 
-    private void writeTranslatePointer(int pointer, RowOutputInterface out,
+    public void writeTranslatePointer(int pointer, RowOutputInterface out,
                                        IntLookup lookup) {
 
         int newPointer = 0;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DITableInfo.java.orig	2005-06-08 00:35:24.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DITableInfo.java	2005-07-19 19:41:44.000000000 +0200
@@ -55,19 +55,19 @@
     static final short tableIndexOther    = 3;
 
     /** Used in buffer size and character octet length determinations. */
-    private static final int HALF_MAX_INT = Integer.MAX_VALUE >>> 1;
+    public static final int HALF_MAX_INT = Integer.MAX_VALUE >>> 1;
 
     /** BundleHandler id for column remarks resource bundle. */
-    private int hnd_column_remarks = -1;
+    public int hnd_column_remarks = -1;
 
     /** BundleHandler id for table remarks resource bundle. */
-    private int hnd_table_remarks = -1;
+    public int hnd_table_remarks = -1;
 
     /** The Table object upon which this object is reporting. */
-    private Table table;
+    public Table table;
 
     /** Provides intrinsic type infformation support. */
-    private static final DITypeInfo ti = new DITypeInfo();
+    public static final DITypeInfo ti = new DITypeInfo();
 
     /**
      * Creates a new DITableInfo object with the default Locale and reporting
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DITypeInfo.java.orig	2005-06-08 00:35:24.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/DITypeInfo.java	2005-07-19 19:41:44.000000000 +0200
@@ -57,19 +57,19 @@
     static final int typeSearchable = 3;
 
     /** BundleHandler id for create params resource bundle. */
-    private int hnd_create_params = -1;
+    public int hnd_create_params = -1;
 
     /** BundleHandler id for local names resource bundle. */
-    private int hnd_local_names = -1;
+    public int hnd_local_names = -1;
 
     /** BundleHandler id for data type remarks resource bundle. */
-    private int hnd_remarks = -1;
+    public int hnd_remarks = -1;
 
     /** The SQL type code on which this object is reporting. */
-    private int type = Types.NULL;
+    public int type = Types.NULL;
 
     /** The HSQLDB subtype code on which this object is reporting. */
-    private int typeSub = Types.TYPE_SUB_DEFAULT;
+    public int typeSub = Types.TYPE_SUB_DEFAULT;
     boolean     locale_set;
 
     /** Creates a new DITypeInfo object having the default Locale. */
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Expression.java.orig	2005-06-14 19:59:13.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Expression.java	2005-07-19 19:41:44.000000000 +0200
@@ -217,28 +217,28 @@
         });
     }
 
-    private static final int AGGREGATE_SELF     = -1;
-    private static final int AGGREGATE_NONE     = 0;
-    private static final int AGGREGATE_LEFT     = 1;
-    private static final int AGGREGATE_RIGHT    = 2;
-    private static final int AGGREGATE_BOTH     = 3;
-    private static final int AGGREGATE_FUNCTION = 4;
+    public static final int AGGREGATE_SELF     = -1;
+    public static final int AGGREGATE_NONE     = 0;
+    public static final int AGGREGATE_LEFT     = 1;
+    public static final int AGGREGATE_RIGHT    = 2;
+    public static final int AGGREGATE_BOTH     = 3;
+    public static final int AGGREGATE_FUNCTION = 4;
 
     // type
     int         exprType;
-    private int aggregateSpec = AGGREGATE_NONE;
+    public int aggregateSpec = AGGREGATE_NONE;
 
     // nodes
-    private Expression eArg, eArg2;
+    public Expression eArg, eArg2;
 
     // VALUE, VALUELIST
     Object          valueData;
-    private HashSet hList;
-    private int     dataType;
+    public HashSet hList;
+    public int     dataType;
 
     // VALUE LIST NEW
     Expression[]    valueList;
-    private boolean isFixedConstantValueList;
+    public boolean isFixedConstantValueList;
 
     // QUERY - in single value selects, IN or EXISTS predicates
     SubQuery subQuery;
@@ -248,26 +248,26 @@
     Function function;
 
     // LIKE
-    private Like likeObject;
+    public Like likeObject;
 
     // COLUMN
-    private String      catalog;
-    private String      schema;
-    private String      tableName;
-    private String      columnName;
-    private TableFilter tableFilter;                // null if not yet resolved
+    public String      catalog;
+    public String      schema;
+    public String      tableName;
+    public String      columnName;
+    public TableFilter tableFilter;                // null if not yet resolved
     TableFilter         outerFilter;                // defined if this is part of an OUTER JOIN condition tree
 
     //
-    private int     columnIndex;
-    private boolean columnQuoted;
-    private int     precision;
-    private int     scale;
-    private String  columnAlias;                    // if it is a column of a select column list
-    private boolean aliasQuoted;
+    public int     columnIndex;
+    public boolean columnQuoted;
+    public int     precision;
+    public int     scale;
+    public String  columnAlias;                    // if it is a column of a select column list
+    public boolean aliasQuoted;
 
     //
-    private boolean isDescending;                   // if it is a column in a order by
+    public boolean isDescending;                   // if it is a column in a order by
     int             joinedTableColumnIndex = -1;    // >= 0 when it is used for order by
 
 // rougier@users 20020522 - patch 552830 - COUNT(DISTINCT)
@@ -275,7 +275,7 @@
     boolean isDistinctAggregate;
 
     // PARAM
-    private boolean isParam;
+    public boolean isParam;
 
     // does Expression stem from a JOIN <table> ON <expression>
     boolean isInJoin;
@@ -486,7 +486,7 @@
         }
     }
 
-    private void checkAggregate() {
+    public void checkAggregate() {
 
         if (isAggregate(exprType)) {
             aggregateSpec = AGGREGATE_SELF;
@@ -823,7 +823,7 @@
         throw Trace.error(Trace.EXPRESSION_NOT_SUPPORTED);
     }
 
-    private String describe(Session session, int blanks) {
+    public String describe(Session session, int blanks) {
 
         int          lIType;
         StringBuffer buf = new StringBuffer(64);
@@ -1203,7 +1203,7 @@
      *
      * @return boolean
      */
-    private boolean isColumn() {
+    public boolean isColumn() {
 
         switch (exprType) {
 
@@ -3423,7 +3423,7 @@
         return compareValues(session, o1, o2);
     }
 
-    private Boolean compareValues(Session session, Object o1,
+    public Boolean compareValues(Session session, Object o1,
                                   Object o2) throws HsqlException {
 
         int type = eArg.dataType;
@@ -3481,7 +3481,7 @@
      * @return boolean
      * @throws HsqlException
      */
-    private Boolean testInCondition(Session session,
+    public Boolean testInCondition(Session session,
                                     Object o) throws HsqlException {
 
         if (o == null) {
@@ -3545,7 +3545,7 @@
         throw Trace.error(Trace.WRONG_DATA_TYPE);
     }
 
-    private Boolean testAnyAllCondition(Session session,
+    public Boolean testAnyAllCondition(Session session,
                                         Object o) throws HsqlException {
 
         if (o == null) {
@@ -3568,7 +3568,7 @@
         return result;
     }
 
-    private Boolean getAnyAllValue(Session session, Object o,
+    public Boolean getAnyAllValue(Session session, Object o,
                                    SubQuery subquery) throws HsqlException {
 
         boolean     empty    = subquery.table.isEmpty(session);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Function.java.orig	2005-06-09 15:07:52.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Function.java	2005-07-19 19:41:44.000000000 +0200
@@ -96,20 +96,20 @@
  */
 class Function {
 
-    private String         sFunction;
-    private Method         mMethod;
-    private Class          cReturnClass;
-    private Class[]        aArgClasses;
-    private int            iReturnType;
-    private int            iArgCount;
-    private int            iSqlArgCount;
-    private int            iSqlArgStart;
-    private int[]          iArgType;
-    private boolean[]      bArgNullable;
+    public String         sFunction;
+    public Method         mMethod;
+    public Class          cReturnClass;
+    public Class[]        aArgClasses;
+    public int            iReturnType;
+    public int            iArgCount;
+    public int            iSqlArgCount;
+    public int            iSqlArgStart;
+    public int[]          iArgType;
+    public boolean[]      bArgNullable;
     Expression[]           eArg;
-    private boolean        bConnection;
-    private static HashMap methodCache = new HashMap();
-    private int            fID;
+    public boolean        bConnection;
+    public static HashMap methodCache = new HashMap();
+    public int            fID;
     String                 name;        // name used to call function
     boolean                isSimple;    //CURRENT_TIME, NOW etc.
     boolean                hasAggregate;
@@ -368,7 +368,7 @@
         // Library function throw HsqlException
     }
 
-    private Object[] getArguments(Session session) throws HsqlException {
+    public Object[] getArguments(Session session) throws HsqlException {
 
         int      i    = bConnection ? 1
                                     : 0;
@@ -405,7 +405,7 @@
     /**
      * returns null if any non-nullable element of values is null
      */
-    private Object[] getNotNull(Object[] values) throws HsqlException {
+    public Object[] getNotNull(Object[] values) throws HsqlException {
 
         int i = bConnection ? 1
                             : 0;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Grantee.java.orig	2005-06-08 21:09:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Grantee.java	2005-07-19 19:41:44.000000000 +0200
@@ -52,9 +52,9 @@
  * Method names ending in Direct indicate methods which do not recurse
  * to look through Roles which "this" object is a member of.
  *
- * We use the word "Admin" (e.g., in private variable "admin" and method
+ * We use the word "Admin" (e.g., in public variable "admin" and method
  * "isAdmin()) to mean this Grantee has admin priv by any means.
- * We use the word "adminDirect" (e.g., in private variable "adminDirect"
+ * We use the word "adminDirect" (e.g., in public variable "adminDirect"
  * and method "isAdminDirect()) to mean this Grantee has admin priv
  * directly.
  *
@@ -73,21 +73,21 @@
      * true if this grantee has database administrator priv directly
      *  (ie., not by membership in any role)
      */
-    private boolean adminDirect = false;
+    public boolean adminDirect = false;
 
     /** true if this grantee has database administrator priv by any means. */
-    private boolean admin = false;
+    public boolean admin = false;
 
     /** contains righs granted direct, or via roles, expept those of PUBLIC */
-    private IntValueHashMap fullRightsMap = new IntValueHashMap();
+    public IntValueHashMap fullRightsMap = new IntValueHashMap();
 
     /**
      * Grantee name.
      */
-    private String granteeName;
+    public String granteeName;
 
     /** map with database object identifier keys and access privileges values */
-    private IntValueHashMap rightsMap;
+    public IntValueHashMap rightsMap;
 
     /** These are the DIRECT roles.  Each of these may contain nested roles */
     HashSet roles = new HashSet();
@@ -98,10 +98,10 @@
      * Note: All Grantee objects except the special
      * SYS and PUBLIC Grantee objects contain a reference to this object
      */
-    private Grantee pubGrantee;
+    public Grantee pubGrantee;
 
     /** Needed only to give access to the roles for this database */
-    private GranteeManager granteeManager;
+    public GranteeManager granteeManager;
 
     /**
      * Constructor, with a argument reference to the PUBLIC User Object which
@@ -219,7 +219,7 @@
      *
      * @return Given role with new elements added.
      */
-    private HashSet addGranteeAndRoles(HashSet set) {
+    public HashSet addGranteeAndRoles(HashSet set) {
 
         String candidateRole;
 
@@ -407,7 +407,7 @@
      * Considers none of pubGranee, nested roles, admin privs, globally
      * available Class object.
      */
-    protected boolean isDirectlyAccessible(Object dbObject,
+    public boolean isDirectlyAccessible(Object dbObject,
                                            int rights) throws HsqlException {
 
         int n = rightsMap.get(dbObject, 0);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/GranteeManager.java.orig	2005-06-08 00:24:17.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/GranteeManager.java	2005-07-19 19:41:44.000000000 +0200
@@ -105,13 +105,13 @@
      * Map of String-to-Grantee-objects.<p>
      * Primary object maintained by this class
      */
-    private HashMappedList map = new HashMappedList();
+    public HashMappedList map = new HashMappedList();
 
     /**
      * This object's set of Role objects. <p>
      * role-Strings-to-Grantee-object
      */
-    private HashMappedList roleMap = new HashMappedList();
+    public HashMappedList roleMap = new HashMappedList();
 
     /**
      * Construct the GranteeManager for a Database.
@@ -453,7 +453,7 @@
         return list;
     }
 
-    private static String[] getRightsArraySub(int right) {
+    public static String[] getRightsArraySub(int right) {
 
 //        checkValidFlags(right);
         if (right == 0) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/GroupedResult.java.orig	2005-06-08 21:09:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/GroupedResult.java	2005-07-19 19:41:44.000000000 +0200
@@ -68,13 +68,13 @@
 class GroupedResult {
 
 /** @todo fredt - initialise results on first use */
-    private Result        result;
+    public Result        result;
     int                   groupBegin;
     int                   groupEnd;
-    private final boolean isGrouped;
-    private final boolean isAggregated;
-    private HashSet       groups;
-    private ResultGroup   currGroup;
+    public final boolean isGrouped;
+    public final boolean isAggregated;
+    public HashSet       groups;
+    public ResultGroup   currGroup;
 
     GroupedResult(Select select, Result.ResultMetaData meta) {
 
@@ -152,7 +152,7 @@
         Object[] row;
         int      hashCode;
 
-        private ResultGroup(Object[] row) {
+        public ResultGroup(Object[] row) {
 
             this.row = row;
             hashCode = 0;
@@ -189,7 +189,7 @@
             return true;
         }
 
-        private boolean equals(Object o1, Object o2) {
+        public boolean equals(Object o1, Object o2) {
             return (o1 == null) ? o2 == null
                                 : o1.equals(o2);
         }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HSQLClientConnection.java.orig	2005-06-08 09:42:31.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HSQLClientConnection.java	2005-07-19 19:41:44.000000000 +0200
@@ -55,18 +55,18 @@
 
     static final int          BUFFER_SIZE = 0x1000;
     final byte[]              mainBuffer  = new byte[BUFFER_SIZE];
-    private boolean           isClosed;
-    private Socket            socket;
-    protected OutputStream    dataOutput;
-    protected DataInputStream dataInput;
-    protected RowOutputBinary rowOut;
-    protected RowInputBinary  rowIn;
-    private Result            resultOut;
-    private int               sessionID;
+    public boolean           isClosed;
+    public Socket            socket;
+    public OutputStream    dataOutput;
+    public DataInputStream dataInput;
+    public RowOutputBinary rowOut;
+    public RowInputBinary  rowIn;
+    public Result            resultOut;
+    public int               sessionID;
 
     //
-    private boolean isReadOnly   = false;
-    private boolean isAutoCommit = true;
+    public boolean isReadOnly   = false;
+    public boolean isAutoCommit = true;
 
     //
     String  host;
@@ -112,7 +112,7 @@
      * resultOut is reused to trasmit all remote calls for session management.
      * Here the structure is preset for sending attributes.
      */
-    private void initStructures() {
+    public void initStructures() {
 
         rowOut    = new RowOutputBinary(mainBuffer);
         rowIn     = new RowInputBinary(rowOut);
@@ -121,12 +121,12 @@
         resultOut.add(new Object[7]);
     }
 
-    protected void initConnection(String host, int port,
+    public void initConnection(String host, int port,
                                   boolean isTLS) throws HsqlException {
         openConnection(host, port, isTLS);
     }
 
-    protected void openConnection(String host, int port,
+    public void openConnection(String host, int port,
                                   boolean isTLS) throws HsqlException {
 
         try {
@@ -142,7 +142,7 @@
         }
     }
 
-    protected void closeConnection() {
+    public void closeConnection() {
 
         try {
             if (socket != null) {
@@ -185,7 +185,7 @@
         } catch (Exception e) {}
     }
 
-    private Object getAttribute(int id) throws HsqlException {
+    public Object getAttribute(int id) throws HsqlException {
 
         resultOut.setResultType(ResultConstants.GETSESSIONATTR);
 
@@ -198,7 +198,7 @@
         return in.rRoot.data[id];
     }
 
-    private void setAttribute(Object property, int id) throws HsqlException {
+    public void setAttribute(Object property, int id) throws HsqlException {
 
         resultOut.setResultType(ResultConstants.SETSESSIONATTR);
         ArrayUtil.fillArray(resultOut.rRoot.data, null);
@@ -319,11 +319,11 @@
         databaseID = resultIn.databaseID;
     }
 
-    protected void write(Result r) throws IOException, HsqlException {
+    public void write(Result r) throws IOException, HsqlException {
         Result.write(r, rowOut, dataOutput);
     }
 
-    protected Result read() throws IOException, HsqlException {
+    public Result read() throws IOException, HsqlException {
 
         Result r = Result.read(rowIn, dataInput);
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlDateTime.java.orig	2005-06-09 13:46:49.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlDateTime.java	2005-07-19 19:41:44.000000000 +0200
@@ -74,13 +74,13 @@
      * A reusable static value for today's date. Should only be accessed
      * by getToday()
      */
-    private static Calendar today          = new GregorianCalendar();
-    private static Calendar tempCal        = new GregorianCalendar();
-    private static Calendar tempCalDefault = new GregorianCalendar();
-    private static Calendar tempCalGMT =
+    public static Calendar today          = new GregorianCalendar();
+    public static Calendar tempCal        = new GregorianCalendar();
+    public static Calendar tempCalDefault = new GregorianCalendar();
+    public static Calendar tempCalGMT =
         new GregorianCalendar(TimeZone.getTimeZone("GMT"));
-    private static Date tempDate = new Date(0);
-    private static Date currentDate;
+    public static Date tempDate = new Date(0);
+    public static Date currentDate;
 
     static {
         resetToday(System.currentTimeMillis());
@@ -229,10 +229,10 @@
         return new Timestamp(millis);
     }
 
-    private static final String sdftPattern     = "HH:mm:ss";
-    private static final String sdfdPattern     = "yyyy-MM-dd";
-    private static final String sdftsPattern    = "yyyy-MM-dd HH:mm:ss.";
-    private static final String sdftsSysPattern = "yyyy-MM-dd HH:mm:ss.SSS";
+    public static final String sdftPattern     = "HH:mm:ss";
+    public static final String sdfdPattern     = "yyyy-MM-dd";
+    public static final String sdftsPattern    = "yyyy-MM-dd HH:mm:ss.";
+    public static final String sdftsSysPattern = "yyyy-MM-dd HH:mm:ss.SSS";
     static SimpleDateFormat     sdfd = new SimpleDateFormat(sdfdPattern);
     static SimpleDateFormat     sdft = new SimpleDateFormat(sdftPattern);
     static SimpleDateFormat     sdfts = new SimpleDateFormat(sdftsPattern);
@@ -266,7 +266,7 @@
         }
     }
 
-    private static java.util.Date sysDate = new java.util.Date();
+    public static java.util.Date sysDate = new java.util.Date();
 
     public static String getSytemTimeString() {
 
@@ -338,7 +338,7 @@
     /**
      * resets the static reusable value today
      */
-    private static synchronized void resetToday(long millis) {
+    public static synchronized void resetToday(long millis) {
 
 //#ifdef JDBC3
         // Use method directly
@@ -359,12 +359,12 @@
 
     /**
      * Sets the time in the given Calendar using the given milliseconds value; wrapper method to
-     * allow use of more efficient JDK1.4 method on JDK1.4 (was protected in earlier versions).
+     * allow use of more efficient JDK1.4 method on JDK1.4 (was public in earlier versions).
      *
      * @param       cal                             the Calendar
      * @param       millis                  the time value in milliseconds
      */
-    private static void setTimeInMillis(Calendar cal, long millis) {
+    public static void setTimeInMillis(Calendar cal, long millis) {
 
 //#ifdef JDBC3
         // Use method directly
@@ -404,7 +404,7 @@
 
     /**
      * Gets the time from the given Calendar as a milliseconds value; wrapper method to
-     * allow use of more efficient JDK1.4 method on JDK1.4 (was protected in earlier versions).
+     * allow use of more efficient JDK1.4 method on JDK1.4 (was public in earlier versions).
      *
      * @param       cal                             the Calendar
      * @return      the time value in milliseconds
@@ -515,7 +515,7 @@
         }
     }
 
-    private final static char[][] dateTokens     = {
+    public final static char[][] dateTokens     = {
         {
             'R', 'R', 'R', 'R'
         }, {
@@ -564,7 +564,7 @@
             'P', '.', 'M', '.'
         }
     };
-    private final static String[] javaDateTokens = {
+    public final static String[] javaDateTokens = {
         "yyyy", "yyyy", "yyyy", "yy", "yy", "G", "G", "G", "G", "MMM",
         "MMMMM", "E", "w", "dd", "D", "k", "K", "K", "mm", "ss", "aaa", "aaa",
         "aaa", "aaa"
@@ -615,10 +615,10 @@
      */
     static class Tokenizer {
 
-        private int     last;
-        private int     offset;
-        private long    state;
-        private boolean consumed;
+        public int     last;
+        public int     offset;
+        public long    state;
+        public boolean consumed;
 
         public Tokenizer() {
             reset();
@@ -664,15 +664,17 @@
          * @param bit
          * @return
          */
-        private boolean isZeroBit(int bit) {
-            return (state & (1L << bit)) == 0;
+        public boolean isZeroBit(int bit) {
+            if ((state & (1L << bit)) == 0)
+		return true;
+            return false;
         }
 
         /**
          * Sets the specified bit.
          * @param bit
          */
-        private void setBit(int bit) {
+        public void setBit(int bit) {
             state |= (1L << bit);
         }
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlException.java.orig	2005-03-02 14:50:48.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlException.java	2005-07-19 19:41:44.000000000 +0200
@@ -42,9 +42,9 @@
  */
 public class HsqlException extends Exception {
 
-    private String message;
-    private String state;
-    private int    code;
+    public String message;
+    public String state;
+    public int    code;
 
     /**
      * @param message String
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlNameManager.java.orig	2005-05-11 15:38:58.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlNameManager.java	2005-07-19 19:41:44.000000000 +0200
@@ -61,14 +61,14 @@
  */
 public class HsqlNameManager {
 
-    private static HsqlNameManager staticManager = new HsqlNameManager();
+    public static HsqlNameManager staticManager = new HsqlNameManager();
 
     static {
         staticManager.serialNumber = Integer.MIN_VALUE;
     }
 
-    private int serialNumber = 1;    // 0 is reserved in lookups
-    private int sysNumber    = 0;
+    public int serialNumber = 1;    // 0 is reserved in lookups
+    public int sysNumber    = 0;
 
     static HsqlName newHsqlSystemObjectName(String name) {
         return new HsqlName(staticManager, name);
@@ -133,21 +133,21 @@
         boolean           isNameQuoted;
         public String     statementName;
         public HsqlName   schema;
-        private final int hashCode;
+        public final int hashCode;
 
-        private HsqlName(HsqlNameManager man) {
+        public HsqlName(HsqlNameManager man) {
             manager  = man;
             hashCode = manager.serialNumber++;
         }
 
-        private HsqlName(HsqlNameManager man, String name, boolean isquoted) {
+        public HsqlName(HsqlNameManager man, String name, boolean isquoted) {
 
             this(man);
 
             rename(name, isquoted);
         }
 
-        private HsqlName(HsqlNameManager man, String prefix, String name,
+        public HsqlName(HsqlNameManager man, String prefix, String name,
                          boolean isquoted) {
 
             this(man);
@@ -155,7 +155,7 @@
             rename(prefix, name, isquoted);
         }
 
-        private HsqlName(HsqlNameManager man, String name) {
+        public HsqlName(HsqlNameManager man, String name) {
 
             this(man);
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlServerFactory.java.orig	2005-06-08 21:09:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlServerFactory.java	2005-07-19 19:41:44.000000000 +0200
@@ -49,7 +49,7 @@
  */
 public class HsqlServerFactory {
 
-    private HsqlServerFactory() {}
+    public HsqlServerFactory() {}
 
     public static HsqlSocketRequestHandler createHsqlServer(String dbFilePath,
             boolean debugMessages, boolean silentMode) throws SQLException {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlSocketFactory.java.orig	2005-06-08 21:09:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlSocketFactory.java	2005-07-19 19:41:44.000000000 +0200
@@ -48,8 +48,8 @@
 public class HsqlSocketFactory {
 
 // ----------------------------- static members ---------------------------------
-    private static HsqlSocketFactory plainImpl;
-    private static HsqlSocketFactory sslImpl;
+    public static HsqlSocketFactory plainImpl;
+    public static HsqlSocketFactory sslImpl;
 
 // ------------------------------ constructors ---------------------------------
 
@@ -57,7 +57,7 @@
      * External construction disabled.  New factory instances are retreived
      * through the newHsqlSocketFactory method instead.
      */
-    protected HsqlSocketFactory() throws Exception {}
+    public HsqlSocketFactory() throws Exception {}
 
 // ------------------------- factory builder method ----------------------------
 
@@ -133,7 +133,7 @@
     }
 
 // ------------------------ static utility methods -----------------------------
-    private static HsqlSocketFactory getPlainImpl() throws Exception {
+    public static HsqlSocketFactory getPlainImpl() throws Exception {
 
         synchronized (HsqlSocketFactory.class) {
             if (plainImpl == null) {
@@ -144,7 +144,7 @@
         return plainImpl;
     }
 
-    private static HsqlSocketFactory getSSLImpl() throws Exception {
+    public static HsqlSocketFactory getSSLImpl() throws Exception {
 
         synchronized (HsqlSocketFactory.class) {
             if (sslImpl == null) {
@@ -170,7 +170,7 @@
      * @throws Exception if a new secure socket factory cannot
      *      be constructed
      */
-    private static HsqlSocketFactory newFactory(String implClass)
+    public static HsqlSocketFactory newFactory(String implClass)
     throws Exception {
 
         Class       clazz;
@@ -182,7 +182,7 @@
         clazz    = Class.forName(implClass);
         ctorParm = new Class[0];
 
-        // protected constructor
+        // public constructor
         ctor    = clazz.getDeclaredConstructor(ctorParm);
         ctorArg = new Object[0];
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlSocketFactorySecure.java.orig	2005-06-08 21:09:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HsqlSocketFactorySecure.java	2005-07-19 19:41:44.000000000 +0200
@@ -65,22 +65,22 @@
 // --------------------------------- members -----------------------------------
 
     /** The underlying socket factory implementation. */
-    protected Object socketFactory;
+    public Object socketFactory;
 
     /** The underlying server socket factory implementation. */
-    protected Object serverSocketFactory;
+    public Object serverSocketFactory;
 
     /**
      * Monitor object to guard against conncurrent modification
      * of the underlying socket factory implementation member.
      */
-    protected final Object socket_factory_mutex = new Object();
+    public final Object socket_factory_mutex = new Object();
 
     /**
      * Monitor object to guard against concurrent modification of
      * the underlying server socket factory implementation member.
      */
-    protected final Object server_socket_factory_mutex = new Object();
+    public final Object server_socket_factory_mutex = new Object();
 
 // ------------------------------ constructors ---------------------------------
 
@@ -88,7 +88,7 @@
      * External construction disabled.  New factory instances are retreived
      * through the newHsqlSocketFactory method instead.
      */
-    protected HsqlSocketFactorySecure() throws Exception {
+    public HsqlSocketFactorySecure() throws Exception {
 
         super();
 
@@ -174,7 +174,7 @@
         return ss;
     }
 
-    private static void dump(String title, String[] as) {
+    public static void dump(String title, String[] as) {
 
         Trace.printSystemOut(title);
         Trace.printSystemOut("----------------------------");
@@ -263,7 +263,7 @@
      *      underlying factory
      * @return the underlying javax.net.ssl.SSLServerSocketFactory
      */
-    protected SSLServerSocketFactory getServerSocketFactoryImpl()
+    public SSLServerSocketFactory getServerSocketFactoryImpl()
     throws Exception {
 
         Object factory;
@@ -287,7 +287,7 @@
      *      underlying factory
      * @return the underlying javax.net.ssl.SSLSocketFactory
      */
-    protected SSLSocketFactory getSocketFactoryImpl() throws Exception {
+    public SSLSocketFactory getSocketFactoryImpl() throws Exception {
 
         Object factory;
 
@@ -313,7 +313,7 @@
      * @param session SSLSession used on the connection to host
      * @throws Exception if the certificate chain cannot be verified
      */
-    protected void verify(String host, SSLSession session) throws Exception {
+    public void verify(String host, SSLSession session) throws Exception {
 
         X509Certificate[] chain;
         X509Certificate   certificate;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HTTPClientConnection.java.orig	2005-03-02 14:50:48.000000000 +0100
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/HTTPClientConnection.java	2005-07-19 19:41:44.000000000 +0200
@@ -53,7 +53,7 @@
         super(host, port, path, database, isTLS, user, password);
     }
 
-    protected void initConnection(String host, int port,
+    public void initConnection(String host, int port,
                                   boolean isTLS) throws HsqlException {}
 
     public synchronized Result execute(Result r) throws HsqlException {
@@ -67,7 +67,7 @@
         return result;
     }
 
-    protected void write(Result r) throws IOException, HsqlException {
+    public void write(Result r) throws IOException, HsqlException {
 
         rowOut.reset();
         r.write(rowOut);
@@ -84,7 +84,7 @@
         dataOutput.flush();
     }
 
-    protected Result read() throws IOException, HsqlException {
+    public Result read() throws IOException, HsqlException {
 
         // fredt - for WebServer 4 lines should be skipped
         // for Servlet, number of lines depends on Servlet container
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Index.java.orig	2005-06-26 18:35:40.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Index.java	2005-07-19 19:41:44.000000000 +0200
@@ -98,19 +98,19 @@
     static final int POINTER_INDEX = 2;
 
     // fields
-    private final HsqlName indexName;
+    public final HsqlName indexName;
     final boolean[]        colCheck;
-    private final int[]    colIndex;
-    private final int[]    colType;
+    public final int[]    colIndex;
+    public final int[]    colType;
     final int[]            pkCols;
     final int[]            pkTypes;
-    private final boolean  isUnique;    // DDL uniqueness
-    private final boolean  useRowId;
+    public final boolean  isUnique;    // DDL uniqueness
+    public final boolean  useRowId;
     final boolean          isConstraint;
     final boolean          isForward;
     final boolean          isTemp;
-    private Node           root;
-    private int            depth;
+    public Node           root;
+    public int            depth;
     final Collation        collation;
     static IndexRowIterator emptyIterator = new IndexRowIterator(null, null,
         null);
@@ -307,7 +307,7 @@
     /**
      * Balances part of the tree after an alteration to the index.
      */
-    private void balance(Session session, Node x,
+    public void balance(Session session, Node x,
                          boolean isleft) throws HsqlException {
 
         while (true) {
@@ -588,7 +588,7 @@
      * @return matching node or null
      * @throws HsqlException
      */
-    private Node findNotNull(Session session, Object[] rowdata,
+    public Node findNotNull(Session session, Object[] rowdata,
                              int[] rowColMap,
                              boolean first) throws HsqlException {
 
@@ -976,7 +976,7 @@
      *
      * @throws HsqlException
      */
-    private Node child(Node x, boolean isleft) throws HsqlException {
+    public Node child(Node x, boolean isleft) throws HsqlException {
         return isleft ? x.getLeft()
                       : x.getRight();
     }
@@ -989,7 +989,7 @@
      *
      * @throws HsqlException
      */
-    private void replace(Session session, Node x,
+    public void replace(Session session, Node x,
                          Node n) throws HsqlException {
 
         if (x.equals(getRoot(session))) {
@@ -1012,7 +1012,7 @@
      *
      * @throws HsqlException
      */
-    private void set(Node x, boolean isleft, Node n) throws HsqlException {
+    public void set(Node x, boolean isleft, Node n) throws HsqlException {
 
         if (isleft) {
             x.setLeft(n);
@@ -1129,7 +1129,7 @@
      *
      * @throws HsqlException
      */
-    private int compareRowUnique(Session session, Row left,
+    public int compareRowUnique(Session session, Row left,
                                  Row right) throws HsqlException {
 
         Object[] a       = left.getData();
@@ -1216,13 +1216,13 @@
         Session                    session;
         Index                      index;
         Node                       nextnode;
-        protected IndexRowIterator last;
-        protected IndexRowIterator next;
+        public IndexRowIterator last;
+        public IndexRowIterator next;
 
         /**
          * When session == null, rows from all sessions are returned
          */
-        private IndexRowIterator(Session session, Index index, Node node) {
+        public IndexRowIterator(Session session, Index index, Node node) {
 
             if (index == null) {
                 return;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Library.java.orig	2005-06-08 21:09:49.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Library.java	2005-07-19 19:41:44.000000000 +0200
@@ -291,7 +291,7 @@
         }
     };
 
-    private Library() {}
+    public Library() {}
 
     static HashMap getAliasMap() {
 
@@ -305,14 +305,14 @@
         return h;
     }
 
-    private static void register(HashMap h, String[][] s) {
+    public static void register(HashMap h, String[][] s) {
 
         for (int i = 0; i < s.length; i++) {
             h.put(s[i][0], s[i][1]);
         }
     }
 
-    private static final Random rRandom = new Random();
+    public static final Random rRandom = new Random();
 
     // NUMERIC FUNCTIONS
 // fredt@users 20020220 - patch 489184 by xclayl@users - thread safety
@@ -361,7 +361,7 @@
     }
 
     // this magic number works for 100000000000000; but not for 0.1 and 0.01
-    private static final double LOG10_FACTOR = 0.43429448190325183;
+    public static final double LOG10_FACTOR = 0.43429448190325183;
 
     /**
      * Returns the base 10 logarithm of the given <code>double</code> value.
@@ -1652,7 +1652,7 @@
      *           from this value to return the number of date-parts
      *           between the two arguments.
      */
-    private static long getElapsed(int field, java.util.Date d1,
+    public static long getElapsed(int field, java.util.Date d1,
                                    java.util.Date d2) {
 
         // can we do this very simply?
@@ -1932,7 +1932,7 @@
 /** @todo  see bitxor and datediff numbering */
 
     //
-    private static final IntValueHashMap functionMap =
+    public static final IntValueHashMap functionMap =
         new IntValueHashMap(67);
     static final Double piValue = new Double(Library.pi());
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Like.java.orig	2005-06-09 16:07:49.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Like.java	2005-07-19 19:41:44.000000000 +0200
@@ -82,12 +82,12 @@
 // fredt@users 20031006 - patch 1.7.2 - reuse Like objects for all rows
 class Like {
 
-    private char[]   cLike;
-    private int[]    wildCardType;
-    private int      iLen;
-    private boolean  isIgnoreCase;
-    private int      iFirstWildCard;
-    private boolean  isNull;
+    public char[]   cLike;
+    public int[]    wildCardType;
+    public int      iLen;
+    public boolean  isIgnoreCase;
+    public int      iFirstWildCard;
+    public boolean  isNull;
     Character        escapeChar;
     boolean          hasCollation;
     boolean          optimised;
@@ -121,7 +121,7 @@
         normalize(session, s);
     }
 
-    private String getStartsWith() {
+    public String getStartsWith() {
 
         if (iLen == 0) {
             return "";
@@ -174,7 +174,7 @@
      *
      * @return
      */
-    private boolean compareAt(String s, int i, int j, int jLen) {
+    public boolean compareAt(String s, int i, int j, int jLen) {
 
         for (; i < iLen; i++) {
             switch (wildCardType[i]) {
@@ -223,7 +223,7 @@
      * @param pattern
      * @param b
      */
-    private void normalize(Session session, String pattern) {
+    public void normalize(Session session, String pattern) {
 
         isNull = pattern == null;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/MemoryNode.java.orig	2005-06-26 18:35:45.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/MemoryNode.java	2005-07-19 19:41:44.000000000 +0200
@@ -79,7 +79,7 @@
  */
 class MemoryNode extends BaseMemoryNode {
 
-    protected Row rData;
+    public Row rData;
 
     /**
      *  A MemoreyNode is permenently linked with the row it refers to.
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/NumberSequence.java.orig	2005-05-11 15:39:03.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/NumberSequence.java	2005-07-19 19:41:44.000000000 +0200
@@ -42,18 +42,18 @@
  */
 public class NumberSequence {
 
-    private HsqlName name;
+    public HsqlName name;
 
     // original start value - used in CREATE and ALTER commands
-    private long startValue;
+    public long startValue;
 
     // present value
-    private long currValue;
+    public long currValue;
 
     // last value
-    private long lastValue;
-    private long increment;
-    private int  dataType;
+    public long lastValue;
+    public long increment;
+    public int  dataType;
 
     /**
      * constructor with initial value and increment;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Parser.java.orig	2005-06-26 18:36:05.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Parser.java	2005-07-19 19:41:44.000000000 +0200
@@ -120,18 +120,18 @@
  */
 class Parser {
 
-    private Database  database;
-    private Tokenizer tokenizer;
-    private Session   session;
-    private String    sTable;
-    private String    sToken;
-    private Object    oData;
-    private int       iType;
-    private int       iToken;
+    public Database  database;
+    public Tokenizer tokenizer;
+    public Session   session;
+    public String    sTable;
+    public String    sToken;
+    public Object    oData;
+    public int       iType;
+    public int       iToken;
 
     //
-    private int           subQueryLevel;
-    private HsqlArrayList subQueryList = new HsqlArrayList();
+    public int           subQueryLevel;
+    public HsqlArrayList subQueryList = new HsqlArrayList();
 
     /**
      *  Constructs a new Parser object with the given context.
@@ -694,7 +694,7 @@
 // in other RDBMS's
 // "SELECT LIMIT n 0" discards the first n rows and returns the remaining rows
 // fredt@users 20020225 - patch 456679 by hiep256 - TOP keyword
-    private void parseLimit(String token, Select select,
+    public void parseLimit(String token, Select select,
                             boolean isEnd) throws HsqlException {
 
         if (select.limitCondition != null) {
@@ -773,7 +773,7 @@
         throw Trace.error(Trace.WRONG_DATA_TYPE, messageid);
     }
 
-    private void parseOrderBy(Select select,
+    public void parseOrderBy(Select select,
                               HsqlArrayList vcolumn) throws HsqlException {
 
         String token;
@@ -803,7 +803,7 @@
         select.iOrderLen = len;
     }
 
-    private void resolveSelectTableFilter(Select select,
+    public void resolveSelectTableFilter(Select select,
                                           HsqlArrayList vcolumn,
                                           HsqlArrayList vfilter)
                                           throws HsqlException {
@@ -889,7 +889,7 @@
      * @throws HsqlException if an ambiguous reference to an alias or
      *      non-integer column index is encountered
      */
-    private static Expression resolveOrderByExpression(Expression e,
+    public static Expression resolveOrderByExpression(Expression e,
             Select select, HsqlArrayList vcolumn) throws HsqlException {
 
         int     visiblecols = select.iResultLen;
@@ -933,7 +933,7 @@
         return e;
     }
 
-    private static Expression resolveOrderByColumnIndex(Expression e,
+    public static Expression resolveOrderByColumnIndex(Expression e,
             HsqlArrayList vcolumn, int visiblecols) throws HsqlException {
 
         // order by 1,2,3
@@ -952,7 +952,7 @@
         throw Trace.error(Trace.INVALID_ORDER_BY);
     }
 
-    private TableFilter parseSimpleTableFilter(int type)
+    public TableFilter parseSimpleTableFilter(int type)
     throws HsqlException {
 
         String alias  = null;
@@ -984,7 +984,7 @@
      * @return a newly constructed TableFilter object
      * @throws  HsqlException if a parsing error occurs
      */
-    private TableFilter parseTableFilter(boolean outerjoin)
+    public TableFilter parseTableFilter(boolean outerjoin)
     throws HsqlException {
 
         Table       t = null;
@@ -1052,7 +1052,7 @@
      * @param  e2
      * @return
      */
-    private static Expression addCondition(Expression e1, Expression e2) {
+    public static Expression addCondition(Expression e1, Expression e2) {
 
         if (e1 == null) {
             return e2;
@@ -1076,7 +1076,7 @@
      *      in the join
      * @return a new Expression object; the conjunction of e1 and e2
      */
-    private static Expression addJoinCondition(Expression e1, Expression e2,
+    public static Expression addJoinCondition(Expression e1, Expression e2,
             TableFilter tf, boolean outer) throws HsqlException {
 
         if (!e2.setForJoin(tf, outer)) {
@@ -1103,7 +1103,7 @@
         return r;
     }
 
-    private Expression readAggregate() throws HsqlException {
+    public Expression readAggregate() throws HsqlException {
 
         boolean distinct = false;
         boolean all      = false;
@@ -1148,7 +1148,7 @@
      * @return a disjuntion, possibly degenerate
      * @throws  HsqlException
      */
-    private Expression readOr() throws HsqlException {
+    public Expression readOr() throws HsqlException {
 
         Expression r = readAnd();
 
@@ -1170,7 +1170,7 @@
      * @return a conjunction, possibly degenerate
      * @throws  HsqlException
      */
-    private Expression readAnd() throws HsqlException {
+    public Expression readAnd() throws HsqlException {
 
         Expression r = readCondition();
 
@@ -1192,7 +1192,7 @@
      * @return a predicate, possibly composite
      * @throws  HsqlException
      */
-    private Expression readCondition() throws HsqlException {
+    public Expression readCondition() throws HsqlException {
 
         switch (iToken) {
 
@@ -1309,7 +1309,7 @@
         }
     }
 
-    private Expression parseLikePredicate(Expression a) throws HsqlException {
+    public Expression parseLikePredicate(Expression a) throws HsqlException {
 
         read();
 
@@ -1347,7 +1347,7 @@
         return a;
     }
 
-    private Expression parseBetweenPredicate(Expression a)
+    public Expression parseBetweenPredicate(Expression a)
     throws HsqlException {
 
         read();
@@ -1373,7 +1373,7 @@
         return new Expression(Expression.AND, l, h);
     }
 
-    private Expression parseInPredicate(Expression a) throws HsqlException {
+    public Expression parseInPredicate(Expression a) throws HsqlException {
 
         int type = iToken;
 
@@ -1431,7 +1431,7 @@
         return new Expression(type, a, b);
     }
 
-    private Expression parseAllAnyPredicate() throws HsqlException {
+    public Expression parseAllAnyPredicate() throws HsqlException {
 
         int type = iToken;
 
@@ -1471,7 +1471,7 @@
      * @param  type
      * @throws  HsqlException
      */
-    private void readThis(int type) throws HsqlException {
+    public void readThis(int type) throws HsqlException {
         Trace.check(iToken == type, Trace.UNEXPECTED_TOKEN);
         read();
     }
@@ -1482,7 +1482,7 @@
      * @return a concatenation, possibly degenerate
      * @throws  HsqlException
      */
-    private Expression readConcat() throws HsqlException {
+    public Expression readConcat() throws HsqlException {
 
         Expression r = readSum();
 
@@ -1519,7 +1519,7 @@
      * @return  a summation, possibly degenerate
      * @throws  HsqlException
      */
-    private Expression readSum() throws HsqlException {
+    public Expression readSum() throws HsqlException {
 
         Expression r = readFactor();
 
@@ -1550,7 +1550,7 @@
      * @return  a product, possibly degenerate
      * @throws  HsqlException
      */
-    private Expression readFactor() throws HsqlException {
+    public Expression readFactor() throws HsqlException {
 
         Expression r = readTerm();
 
@@ -1572,7 +1572,7 @@
      * @return  a term, possibly composite
      * @throws  HsqlException
      */
-    private Expression readTerm() throws HsqlException {
+    public Expression readTerm() throws HsqlException {
 
         Expression r = null;
 
@@ -1758,7 +1758,7 @@
     /**
      * Reads part of a CASE .. WHEN  expression
      */
-    private Expression parseCaseWhen(Expression r) throws HsqlException {
+    public Expression parseCaseWhen(Expression r) throws HsqlException {
 
         readThis(Expression.WHEN);
 
@@ -1784,7 +1784,7 @@
     /**
      * reads a CASEWHEN expression
      */
-    private Expression readCaseWhenExpression() throws HsqlException {
+    public Expression readCaseWhenExpression() throws HsqlException {
 
         int        type = iToken;
         Expression r    = null;
@@ -1812,7 +1812,7 @@
     /**
      * Reads a CAST or CONVERT expression
      */
-    private Expression readCastExpression() throws HsqlException {
+    public Expression readCastExpression() throws HsqlException {
 
         boolean isConvert = iToken == Expression.CONVERT;
 
@@ -1872,7 +1872,7 @@
     /**
      * reads a Column or Function expression
      */
-    private Expression readColumnExpression() throws HsqlException {
+    public Expression readColumnExpression() throws HsqlException {
 
         String     name = sToken;
         Expression r    = new Expression(sTable, name);
@@ -1922,7 +1922,7 @@
     /**
      * reads a CONCAT expression
      */
-    private Expression readConcatExpression() throws HsqlException {
+    public Expression readConcatExpression() throws HsqlException {
 
         int type = iToken;
 
@@ -1943,7 +1943,7 @@
     /**
      * Reads a NULLIF expression
      */
-    private Expression readNullIfExpression() throws HsqlException {
+    public Expression readNullIfExpression() throws HsqlException {
 
         // turn into a CASEWHEN
         read();
@@ -1968,7 +1968,7 @@
     /**
      * Reads a COALESE or IFNULL expression
      */
-    private Expression readCoalesceExpression() throws HsqlException {
+    public Expression readCoalesceExpression() throws HsqlException {
 
         Expression r = null;
 
@@ -2010,7 +2010,7 @@
     /**
      * Reads an EXTRACT expression
      */
-    private Expression readExtractExpression() throws HsqlException {
+    public Expression readExtractExpression() throws HsqlException {
 
         read();
         readThis(Expression.OPEN);
@@ -2037,7 +2037,7 @@
     /**
      * Reads a POSITION expression
      */
-    private Expression readPositionExpression() throws HsqlException {
+    public Expression readPositionExpression() throws HsqlException {
 
         read();
         readThis(Expression.OPEN);
@@ -2056,7 +2056,7 @@
     /**
      * Reads a SUBSTRING expression
      */
-    private Expression readSubstringExpression() throws HsqlException {
+    public Expression readSubstringExpression() throws HsqlException {
 
         boolean commas = false;
 
@@ -2097,7 +2097,7 @@
         return new Expression(f);
     }
 
-    private Expression readSequenceExpression() throws HsqlException {
+    public Expression readSequenceExpression() throws HsqlException {
 
         tokenizer.getThis(Token.T_VALUE);
         tokenizer.getThis(Token.T_FOR);
@@ -2121,7 +2121,7 @@
     /**
      * Reads a TRIM expression
      */
-    private Expression readTrimExpression() throws HsqlException {
+    public Expression readTrimExpression() throws HsqlException {
 
         read();
         readThis(Expression.OPEN);
@@ -2235,7 +2235,7 @@
      *
      * @throws  HsqlException
      */
-    private void read() throws HsqlException {
+    public void read() throws HsqlException {
 
         sToken = tokenizer.getString();
 
@@ -2344,12 +2344,12 @@
      *
      * @throws HsqlException if a tokenization error occurs
      */
-    private void readToken() throws HsqlException {
+    public void readToken() throws HsqlException {
         sToken = tokenizer.getString();
         iToken = tokenSet.get(sToken, -1);
     }
 
-    private static IntValueHashMap tokenSet = new IntValueHashMap(37);
+    public static IntValueHashMap tokenSet = new IntValueHashMap(37);
 
     static {
         tokenSet.put(Token.T_COMMA, Expression.COMMA);
@@ -2416,8 +2416,8 @@
 // boucherb@users 20030411 - patch 1.7.2 - for prepared statements
 // ---------------------------------------------------------------
     HsqlArrayList                     parameters   = new HsqlArrayList();
-    private static final Expression[] noParameters = new Expression[0];
-    private static final SubQuery[]   noSubqueries = new SubQuery[0];
+    public static final Expression[] noParameters = new Expression[0];
+    public static final SubQuery[]   noSubqueries = new SubQuery[0];
 
     /**
      *  Destructive get method
@@ -2518,7 +2518,7 @@
         return cs;
     }
 
-    private void getInsertColumnValueExpressions(Table t, Expression[] acve,
+    public void getInsertColumnValueExpressions(Table t, Expression[] acve,
             int len) throws HsqlException {
 
         boolean    enclosed;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/PointerNode.java.orig	2005-06-08 00:24:23.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/PointerNode.java	2005-07-19 19:41:44.000000000 +0200
@@ -87,8 +87,8 @@
 class PointerNode extends BaseMemoryNode {
 
     int           iData = NO_POS;
-    private Table tTable;
-    private Node  nPrimary;    // node of key / primary index for this row
+    public Table tTable;
+    public Node  nPrimary;    // node of key / primary index for this row
 
     PointerNode(CachedRow r, int id) {
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/ResultBase.java.orig	2005-06-08 00:24:23.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/ResultBase.java	2005-07-19 19:41:44.000000000 +0200
@@ -41,8 +41,8 @@
 public class ResultBase {
 
     public Record    rRoot;
-    protected Record rTail;
-    protected int    iSize;
+    public Record rTail;
+    public int    iSize;
 
     public ResultBase() {}
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Result.java.orig	2005-06-08 00:24:23.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Result.java	2005-07-19 19:41:44.000000000 +0200
@@ -102,11 +102,11 @@
 
     // record list
     public Record  rRoot;
-    private Record rTail;
-    private int    size;
+    public Record rTail;
+    public int    size;
 
     // transient - number of significant columns
-    private int significantColumns;
+    public int significantColumns;
 
     // type of result
     public int mode;
@@ -126,7 +126,7 @@
     String subSubString;
 
     // the exception if this is an error
-    private Throwable exception;
+    public Throwable exception;
 
     // prepared statement id / error vendor code
     int statementID;
@@ -174,7 +174,7 @@
          *
          * @param  columns
          */
-        private void prepareData(int columns) {
+        public void prepareData(int columns) {
 
             colLabels     = new String[columns];
             tableNames    = new String[columns];
@@ -200,14 +200,14 @@
                    && colNames[i] != null && colNames[i].length() > 0;
         }
 
-        private void decodeTableColumnAttrs(int in, int i) {
+        public void decodeTableColumnAttrs(int in, int i) {
 
             colNullable[i] = in & 0x0000000f;
             isIdentity[i]  = (in & 0x00000010) != 0;
             isWritable[i]  = (in & 0x00000020) != 0;
         }
 
-        private void writeTableColumnAttrs(RowOutputBinary out,
+        public void writeTableColumnAttrs(RowOutputBinary out,
                                            int i)
                                            throws IOException, HsqlException {
 
@@ -255,7 +255,7 @@
                                                    : schemaNames[i]);
         }
 
-        private int encodeTableColumnAttrs(int i) {
+        public int encodeTableColumnAttrs(int i) {
 
             int out = colNullable[i];    // always between 0x00 and 0x02
 
@@ -270,7 +270,7 @@
             return out;
         }
 
-        private void readTableColumnAttrs(RowInputBinary in,
+        public void readTableColumnAttrs(RowInputBinary in,
                                           int i)
                                           throws IOException, HsqlException {
 
@@ -1083,7 +1083,7 @@
      * @return -1, 0, +1
      * @throws  HsqlException
      */
-    private int compareRecord(Session session, Object[] a, final Object[] b,
+    public int compareRecord(Session session, Object[] a, final Object[] b,
                               final int[] order,
                               int[] way) throws HsqlException {
 
@@ -1113,7 +1113,7 @@
      * @return -1, 0, +1
      * @throws  HsqlException
      */
-    private int compareRecord(Session session, Object[] a, Object[] b,
+    public int compareRecord(Session session, Object[] a, Object[] b,
                               int len) throws HsqlException {
 
         for (int j = 0; j < len; j++) {
@@ -1306,7 +1306,7 @@
         }
     }
 
-    private void writeMulti(RowOutputBinary out)
+    public void writeMulti(RowOutputBinary out)
     throws IOException, HsqlException {
 
         int startPos = out.size();
@@ -1489,7 +1489,7 @@
         return new ResultIterator();
     }
 
-    private class ResultIterator implements Iterator {
+    public class ResultIterator implements Iterator {
 
         boolean removed;
         int     counter;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Row.java.orig	2005-06-26 18:36:14.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Row.java	2005-07-19 19:41:44.000000000 +0200
@@ -89,8 +89,8 @@
 
     int                tableId;
     int                iPos;
-    protected Object[] oData;
-    protected Node     nPrimaryNode;
+    public Object[] oData;
+    public Node     nPrimaryNode;
 
     /**
      *  Default constructor used only in subclasses.
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/SchemaManager.java.orig	2005-07-02 00:01:47.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/SchemaManager.java	2005-07-19 19:41:44.000000000 +0200
@@ -759,7 +759,7 @@
     /**
      * Throws if the table is referenced in a foreign key constraint.
      */
-    private void checkCascadeDropReferenced(Table table,
+    public void checkCascadeDropReferenced(Table table,
             boolean cascade) throws HsqlException {
 
         Constraint[] constraints       = table.getConstraints();
@@ -882,7 +882,7 @@
     /**
      * Returns an array of views that reference another view.
      */
-    private View[] getViewsWithView(View view) {
+    public View[] getViewsWithView(View view) {
 
         HsqlArrayList list   = null;
         Schema        schema = (Schema) schemaMap.get(view.getSchemaName());
@@ -911,7 +911,7 @@
      * Returns an array of views that reference the specified table or
      * the specified column if column parameter is not null.
      */
-    private View[] getViewsWithTable(Table table, String column) {
+    public View[] getViewsWithTable(Table table, String column) {
 
         HsqlArrayList list = null;
         Iterator      it   = allTablesIterator();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Select.java.orig	2005-06-09 15:52:06.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Select.java	2005-07-19 19:41:44.000000000 +0200
@@ -101,8 +101,8 @@
 
     boolean               isDistinctSelect;
     boolean               isAggregated;
-    private boolean       isGrouped;
-    private HashSet       groupColumnNames;
+    public boolean       isGrouped;
+    public HashSet       groupColumnNames;
     TableFilter[]         tFilter;
     Expression            limitCondition;
     Expression            queryCondition;     // null means no condition
@@ -127,7 +127,7 @@
                           UNIONALL  = 2,
                           INTERSECT = 3,
                           EXCEPT    = 4;
-    private boolean       simpleLimit;        // true if maxrows can be uses as is
+    public boolean       simpleLimit;        // true if maxrows can be uses as is
     Result.ResultMetaData resultMetaData;
 
     /**
@@ -236,7 +236,7 @@
         }
     }
 
-    private void setFilterConditions(Session session) throws HsqlException {
+    public void setFilterConditions(Session session) throws HsqlException {
 
         if (queryCondition == null) {
             return;
@@ -481,7 +481,7 @@
         return r;
     }
 
-    private Result getResultMain(Session session) throws HsqlException {
+    public Result getResultMain(Session session) throws HsqlException {
 
         Result[] unionResults = new Result[unionArray.length];
 
@@ -536,7 +536,7 @@
      * Merges the second result into the first using the unionMode
      * set operation.
      */
-    private void mergeResults(Session session, Result first,
+    public void mergeResults(Session session, Result first,
                               Result second) throws HsqlException {
 
         switch (unionType) {
@@ -623,7 +623,7 @@
         return rowCount;
     }
 
-    private Result getSingleResult(Session session,
+    public Result getSingleResult(Session session,
                                    int rowCount) throws HsqlException {
 
         if (resultMetaData == null) {
@@ -646,7 +646,7 @@
         return r;
     }
 
-    private void prepareSort() {
+    public void prepareSort() {
 
         if (iOrderLen == 0) {
             return;
@@ -672,7 +672,7 @@
         }
     }
 
-    private void sortResult(Session session, Result r) throws HsqlException {
+    public void sortResult(Session session, Result r) throws HsqlException {
 
         if (iOrderLen == 0) {
             return;
@@ -686,7 +686,7 @@
      * If any result column is aggregated, then all result columns need to be
      * aggregated, unless it is included in the group by clause.
      */
-    private void checkAggregateOrGroupByColumns(int start,
+    public void checkAggregateOrGroupByColumns(int start,
             int end) throws HsqlException {
 
         if (start < end) {
@@ -726,7 +726,7 @@
      * <LI>All the columns in the expression are defined in the group by clause;
      * </UL)
      */
-    private boolean inAggregateOrGroupByClause(Expression exp) {
+    public boolean inAggregateOrGroupByClause(Expression exp) {
 
         if (isGrouped) {
             return isSimilarIn(exp, iResultLen, iResultLen + iGroupLen)
@@ -744,7 +744,7 @@
      * Check if the given expression is similar to any of the eColumn
      * expressions within the given range.
      */
-    private boolean isSimilarIn(Expression exp, int start, int end) {
+    public boolean isSimilarIn(Expression exp, int start, int end) {
 
         for (int i = start; i < end; i++) {
             if (exp.similarTo(exprColumns[i])) {
@@ -782,7 +782,7 @@
     }
 
 // fredt@users 20030810 - patch 1.7.2 - OUTER JOIN rewrite
-    private Result buildResult(Session session,
+    public Result buildResult(Session session,
                                int limitcount) throws HsqlException {
 
         GroupedResult gResult   = new GroupedResult(this, resultMetaData);
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/ServerConfiguration.java.orig	2005-05-14 22:49:11.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/ServerConfiguration.java	2005-07-19 19:41:44.000000000 +0200
@@ -49,7 +49,7 @@
  */
 public final class ServerConfiguration implements ServerConstants {
 
-    private ServerConfiguration() {}
+    public ServerConfiguration() {}
 
     /**
      * Retrieves the default port that a Server will try to use in the
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/ServerConnection.java.orig	2005-06-08 21:09:51.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/ServerConnection.java	2005-07-19 19:41:44.000000000 +0200
@@ -102,16 +102,16 @@
 class ServerConnection implements Runnable {
 
     boolean                      keepAlive;
-    private String               user;
-    private String               password;
+    public String               user;
+    public String               password;
     int                          dbID;
-    private volatile Session     session;
-    private Socket               socket;
-    private Server               server;
-    private DataInputStream      dataInput;
-    private BufferedOutputStream dataOutput;
-    private static int           mCurrentThread = 0;
-    private int                  mThread;
+    public volatile Session     session;
+    public Socket               socket;
+    public Server               server;
+    public DataInputStream      dataInput;
+    public BufferedOutputStream dataOutput;
+    public static int           mCurrentThread = 0;
+    public int                  mThread;
     static final int             BUFFER_SIZE = 0x1000;
     final byte[]                 mainBuffer  = new byte[BUFFER_SIZE];
     RowOutputBinary              rowOut = new RowOutputBinary(BUFFER_SIZE);
@@ -157,7 +157,7 @@
     /**
      * Closes this connection.
      */
-    private void close() {
+    public void close() {
 
         if (session != null) {
             session.close();
@@ -178,7 +178,7 @@
     /**
      * Initializes this connection.
      */
-    private void init() {
+    public void init() {
 
         runnerThread = Thread.currentThread();
         keepAlive    = true;
@@ -276,7 +276,7 @@
      * Used by pooled connections to close the existing SQL session and open
      * a new one.
      */
-    private Result resetSession() {
+    public Result resetSession() {
 
         Result resultOut;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Server.java.orig	2005-06-12 20:42:26.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Server.java	2005-07-19 19:41:44.000000000 +0200
@@ -212,7 +212,7 @@
 public class Server implements HsqlSocketRequestHandler {
 
 //
-    protected static final int serverBundleHandle =
+    public static final int serverBundleHandle =
         BundleHandler.getBundleHandle("org_hsqldb_Server_messages", null);
 
 //
@@ -229,22 +229,22 @@
     int[]            dbID;
 
 //  Currently unused
-    private int maxConnections;
+    public int maxConnections;
 
 //
-    protected String            serverId;
-    protected int               serverProtocol;
-    protected ThreadGroup       serverConnectionThreadGroup;
-    protected HsqlSocketFactory socketFactory;
-    protected ServerSocket      socket;
+    public String            serverId;
+    public int               serverProtocol;
+    public ThreadGroup       serverConnectionThreadGroup;
+    public HsqlSocketFactory socketFactory;
+    public ServerSocket      socket;
 
 //
-    private Thread           serverThread;
-    private Throwable        serverError;
-    private volatile int     serverState;
-    private volatile boolean isSilent;
-    private PrintWriter      logWriter;
-    private PrintWriter      errWriter;
+    public Thread           serverThread;
+    public Throwable        serverError;
+    public volatile int     serverState;
+    public volatile boolean isSilent;
+    public PrintWriter      logWriter;
+    public PrintWriter      errWriter;
 
 //
 
@@ -252,7 +252,7 @@
      * A specialized Thread inner class in which the run() method of this
      * server executes.
      */
-    private class ServerThread extends Thread {
+    public class ServerThread extends Thread {
 
         /**
          * Constructs a new thread in which to execute the run method
@@ -296,7 +296,7 @@
      * @param protocol the ServerConstants code indicating which
      *      connection protocol to handle
      */
-    protected Server(int protocol) {
+    public Server(int protocol) {
         init(protocol);
     }
 
@@ -416,7 +416,7 @@
         printWithThread("signalCloseAllServerConnections() exited");
     }
 
-    protected void finalize() throws Throwable {
+    public void finalize() throws Throwable {
 
         if (serverThread != null) {
             releaseServerSocket();
@@ -1284,7 +1284,7 @@
      *
      * @param socket the socket to test.
      */
-    protected boolean allowConnection(Socket socket) {
+    public boolean allowConnection(Socket socket) {
         return true;
     }
 
@@ -1293,7 +1293,7 @@
      *
      * @param protocol typically either SC_PROTOCOL_HTTP or SC_PROTOCOL_HSQL
      */
-    protected void init(int protocol) {
+    public void init(int protocol) {
 
         // PRE:  This method is only called from the constructor
         serverState      = ServerConstants.SERVER_STATE_SHUTDOWN;
@@ -1313,7 +1313,7 @@
      *
      * @param state the new value
      */
-    protected synchronized void setState(int state) {
+    public synchronized void setState(int state) {
         serverState = state;
     }
 
@@ -1389,7 +1389,7 @@
      *
      * @param msg The message to print
      */
-    protected synchronized void print(String msg) {
+    public synchronized void print(String msg) {
 
         PrintWriter writer = logWriter;
 
@@ -1434,7 +1434,7 @@
      *
      * @param t the Throwable whose stack trace is to be printed
      */
-    protected synchronized void printStackTrace(Throwable t) {
+    public synchronized void printStackTrace(Throwable t) {
 
         if (errWriter != null) {
             t.printStackTrace(errWriter);
@@ -1460,7 +1460,7 @@
      *
      * @param msg the message to print
      */
-    protected void printWithThread(String msg) {
+    public void printWithThread(String msg) {
 
         if (!isSilent()) {
             print("[" + Thread.currentThread() + "]: " + msg);
@@ -1474,7 +1474,7 @@
      *
      * @param msg the message to print
      */
-    protected synchronized void printError(String msg) {
+    public synchronized void printError(String msg) {
 
         PrintWriter writer = errWriter;
 
@@ -1722,7 +1722,7 @@
     /**
      * Initialises the database attributes lists from the server properties object.
      */
-    private void setDBInfoArrays() {
+    public void setDBInfoArrays() {
 
         dbAlias = getDBNameArray();
         dbPath  = new String[dbAlias.length];
@@ -1761,7 +1761,7 @@
      * Returns a possibly sparse array of all server.dbname.n values
      * from the properties object.
      */
-    private String[] getDBNameArray() {
+    public String[] getDBNameArray() {
 
         final String prefix    = ServerConstants.SC_KEY_DBNAME + ".";
         final int    prefixLen = prefix.length();
@@ -1802,7 +1802,7 @@
      * @throws Exception if it is not possible to construct and install
      *      a new ServerSocket
      */
-    private void openServerSocket() throws Exception {
+    public void openServerSocket() throws Exception {
 
         String    address;
         int       port;
@@ -1866,7 +1866,7 @@
     }
 
     /** Prints a timestamped message indicating that this server is online */
-    private void printServerOnlineMessage() {
+    public void printServerOnlineMessage() {
 
         String s = getProductName() + " " + getProductVersion()
                    + " is online";
@@ -1878,7 +1878,7 @@
     /**
      * Prints a description of the server properties iff !isSilent().
      */
-    protected void printProperties() {
+    public void printProperties() {
 
         Enumeration e;
         String      key;
@@ -1906,7 +1906,7 @@
      * this method exists immediately, otherwise, the result is to fully
      * shut down the server.
      */
-    private void releaseServerSocket() {
+    public void releaseServerSocket() {
 
         printWithThread("releaseServerSocket() entered");
 
@@ -1935,7 +1935,7 @@
      * If any part of the process fails, then this server enters
      * its shutdown sequence.
      */
-    private void run() {
+    public void run() {
 
         StopWatch   sw;
         ThreadGroup tg;
@@ -2019,7 +2019,7 @@
      *
      * @param t The new value for the server error
      */
-    protected void setServerError(Throwable t) {
+    public void setServerError(Throwable t) {
         serverError = t;
     }
 
@@ -2036,7 +2036,7 @@
      * @param error true if shutdown is in response to an error
      *      state, else false
      */
-    protected void shutdown(boolean error) {
+    public void shutdown(boolean error) {
 
         StopWatch sw;
 
@@ -2115,7 +2115,7 @@
      *
      * @param key for message
      */
-    protected static void printHelp(String key) {
+    public static void printHelp(String key) {
         System.out.print(BundleHandler.getString(serverBundleHandle, key));
     }
 }
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Servlet.java.orig	2005-06-08 21:09:52.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Servlet.java	2005-07-19 19:41:44.000000000 +0200
@@ -127,13 +127,13 @@
  */
 public class Servlet extends javax.servlet.http.HttpServlet {
 
-    private static final int BUFFER_SIZE = 256;
-    private String           dbType;
-    private String           dbPath;
-    private String           errorStr;
-    private RowOutputBinary  rowOut;
-    private RowInputBinary   rowIn;
-    private int              iQueries;
+    public static final int BUFFER_SIZE = 256;
+    public String           dbType;
+    public String           dbPath;
+    public String           errorStr;
+    public RowOutputBinary  rowOut;
+    public RowInputBinary   rowIn;
+    public int              iQueries;
 
     /**
      * Method declaration
@@ -190,7 +190,7 @@
         log("Initialization completed.");
     }
 
-    private static long lModified = 0;
+    public static long lModified = 0;
 
     /**
      * Method declaration
@@ -200,7 +200,7 @@
      *
      * @return
      */
-    protected long getLastModified(HttpServletRequest req) {
+    public long getLastModified(HttpServletRequest req) {
 
         // this is made so that the cache of the http server is not used
         // maybe there is some other way
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Session.java.orig	2005-06-26 23:28:03.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Session.java	2005-07-19 19:41:44.000000000 +0200
@@ -112,44 +112,44 @@
 public class Session implements SessionInterface {
 
     //
-    private volatile boolean isAutoCommit;
-    private volatile boolean isReadOnly;
-    private volatile boolean isClosed;
+    public volatile boolean isAutoCommit;
+    public volatile boolean isReadOnly;
+    public volatile boolean isClosed;
     int                      isolation;
 
     //
     Database          database;
-    private User      user;
+    public User      user;
     HsqlArrayList     transactionList;
-    private boolean   isNestedTransaction;
-    private int       nestedOldTransIndex;
-    private int       currentMaxRows;
-    private int       sessionMaxRows;
-    private Number    lastIdentity = ValuePool.getInt(0);
-    private final int sessionId;
+    public boolean   isNestedTransaction;
+    public int       nestedOldTransIndex;
+    public int       currentMaxRows;
+    public int       sessionMaxRows;
+    public Number    lastIdentity = ValuePool.getInt(0);
+    public final int sessionId;
     HashMappedList    savepoints;
-    private boolean   script;
-    private Tokenizer tokenizer;
-    private Parser    parser;
-    private long      sessionSCN;
+    public boolean   script;
+    public Tokenizer tokenizer;
+    public Parser    parser;
+    public long      sessionSCN;
     static final Result emptyUpdateCount =
         new Result(ResultConstants.UPDATECOUNT);
 
     //
-    private jdbcConnection intConnection;
+    public jdbcConnection intConnection;
 
     // schema
     public HsqlName  currentSchema;
     public HsqlName  loggedSchema;
-    private HsqlName oldSchema;
+    public HsqlName oldSchema;
 
     // query processing
     boolean isProcessingScript;
     boolean isProcessingLog;
 
     // two types of temp tables
-    private IntKeyHashMap indexArrayMap;
-    private IntKeyHashMap indexArrayKeepMap;
+    public IntKeyHashMap indexArrayMap;
+    public IntKeyHashMap indexArrayKeepMap;
 
     /** @todo fredt - clarify in which circumstances Session has to disconnect */
     Session getSession() {
@@ -691,7 +691,7 @@
 
 // boucherb@users 20020810 metadata 1.7.2
 //----------------------------------------------------------------
-    private final long connectTime = System.currentTimeMillis();
+    public final long connectTime = System.currentTimeMillis();
 
 // more effecient for MetaData concerns than checkAdmin
 
@@ -738,7 +738,7 @@
     CompiledStatementExecutor  compiledStatementExecutor;
     CompiledStatementManager   compiledStatementManager;
 
-    private CompiledStatement sqlCompileStatement(String sql)
+    public CompiledStatement sqlCompileStatement(String sql)
     throws HsqlException {
 
         parser.reset(sql);
@@ -951,7 +951,7 @@
         }
     }
 
-    private Result performPostExecute(Result r) {
+    public Result performPostExecute(Result r) {
 
         try {
             if (database != null) {
@@ -1003,7 +1003,7 @@
      * @throws HsqlException is a database access error occurs
      * @return a MULTI Result describing the compiled statement.
      */
-    private Result sqlPrepare(String sql) {
+    public Result sqlPrepare(String sql) {
 
         int csid = compiledStatementManager.getStatementID(currentSchema,
             sql);
@@ -1050,7 +1050,7 @@
         return Result.newPrepareResponse(csid, rmd, pmd);
     }
 
-    private Result sqlExecuteBatch(Result cmd) {
+    public Result sqlExecuteBatch(Result cmd) {
 
         int               csid;
         Record            record;
@@ -1130,7 +1130,7 @@
         return out;
     }
 
-    private Result sqlExecuteBatchDirect(Result cmd) {
+    public Result sqlExecuteBatchDirect(Result cmd) {
 
         Record record;
         Result out;
@@ -1191,7 +1191,7 @@
      *
      * @return the result of executing the statement
      */
-    private Result sqlExecute(Result cmd) {
+    public Result sqlExecute(Result cmd) {
 
         int               csid  = cmd.getStatementID();
         Object[]          pvals = cmd.getParameterData();
@@ -1230,7 +1230,7 @@
     /**
      * Recompile a prepard statement or free it if no longer valid
      */
-    private CompiledStatement recompileStatement(CompiledStatement cs,
+    public CompiledStatement recompileStatement(CompiledStatement cs,
             int csid) {
 
         String sql = compiledStatementManager.getSql(csid);
@@ -1259,7 +1259,7 @@
      *
      * @param csid the numeric identifier of the statement
      */
-    private Result sqlFreeStatement(int csid) {
+    public Result sqlFreeStatement(int csid) {
 
         Result result;
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/SessionManager.java.orig	2005-06-16 21:35:46.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/SessionManager.java	2005-07-19 19:41:44.000000000 +0200
@@ -45,8 +45,8 @@
 public class SessionManager {
 
     int                   sessionIdCount = 1;
-    private IntKeyHashMap sessionMap     = new IntKeyHashMap();
-    private Session       sysSession;
+    public IntKeyHashMap sessionMap     = new IntKeyHashMap();
+    public Session       sysSession;
 
 // TODO:
 //
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/SetFunction.java.orig	2005-06-14 19:59:31.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/SetFunction.java	2005-07-19 19:41:44.000000000 +0200
@@ -51,22 +51,22 @@
  */
 public class SetFunction {
 
-    private HashSet distinctValues;
-    private boolean isDistinct;
+    public HashSet distinctValues;
+    public boolean isDistinct;
 
     //
-    private int setType;
-    private int type;
+    public int setType;
+    public int type;
 
     //
-    private int count;
+    public int count;
 
     //
-    private boolean    hasNull;
-    private long       currentLong;
-    private double     currentDouble;
-    private BigDecimal currentBigDecimal;
-    private Object     currentValue;
+    public boolean    hasNull;
+    public long       currentLong;
+    public double     currentDouble;
+    public BigDecimal currentBigDecimal;
+    public Object     currentValue;
 
     SetFunction(int setType, int type, boolean isDistinct) {
 
@@ -403,13 +403,13 @@
     // end long sum
     // statistics support - written by Campbell
     // this section was orginally an independent class
-    private double  sk;
-    private double  vk;
-    private long    n;
-    private boolean initialized;
-    private boolean sample;
+    public double  sk;
+    public double  vk;
+    public long    n;
+    public boolean initialized;
+    public boolean sample;
 
-    private void addDataPoint(Number x) {
+    public void addDataPoint(Number x) {
 
         double xi;
 
@@ -435,7 +435,7 @@
         sk += xi;
     }
 
-    private Number getVariance() {
+    public Number getVariance() {
 
         if (!initialized) {
             return null;
@@ -446,7 +446,7 @@
                       : new Double(vk / (double) (n));
     }
 
-    private Number getStdDev() {
+    public Number getStdDev() {
 
         if (!initialized) {
             return null;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/TableFilter.java.orig	2005-06-09 16:20:06.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/TableFilter.java	2005-07-19 19:41:44.000000000 +0200
@@ -93,11 +93,11 @@
     static final int   CONDITION_END       = 3;    // candidate for eEnd
     static final int   CONDITION_OUTER     = 4;    // add to this
     Table              filterTable;
-    private String     tableAlias;
+    public String     tableAlias;
     Index              filterIndex;
-    private Object[]   emptyData;
+    public Object[]   emptyData;
     boolean[]          usedColumns;
-    private Expression eStart, eEnd;
+    public Expression eStart, eEnd;
 
     //
     Expression eAnd;
@@ -109,7 +109,7 @@
     Expression[] findFirstExpressions;             // expressions for column values
 
     //
-    private RowIterator it;
+    public RowIterator it;
     Object[]            currentData;
     Row                 currentRow;
 
@@ -326,7 +326,7 @@
         }
     }
 
-    private void setCondition(Session session,
+    public void setCondition(Session session,
                               Expression e) throws HsqlException {
 
         int        type = e.getType();
@@ -647,7 +647,7 @@
      *
      * @param e the condition to add
      */
-    private void addAndCondition(Expression e) {
+    public void addAndCondition(Expression e) {
 
         Expression e2 = new Expression(e);
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Table.java.orig	2005-06-26 18:36:40.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Table.java	2005-07-19 19:41:45.000000000 +0200
@@ -134,9 +134,9 @@
     // main properties
 // boucherb@users - access changed in support of metadata 1.7.2
     public HashMappedList columnList;                 // columns in table
-    private int[]         primaryKeyCols;             // column numbers for primary key
-    private int[]         primaryKeyTypes;            // types for primary key
-    private int[]         primaryKeyColsSequence;     // {0,1,2,...}
+    public int[]         primaryKeyCols;             // column numbers for primary key
+    public int[]         primaryKeyTypes;            // types for primary key
+    public int[]         primaryKeyColsSequence;     // {0,1,2,...}
     int[]                 bestRowIdentifierCols;      // column set for best index
     boolean               bestRowIdentifierStrict;    // true if it has no nullable column
     int[]                 bestIndexForColumn;         // index of the 'best' index for each column
@@ -148,29 +148,29 @@
 // -----------------------------------------------------------------------
     Constraint[]      constraintList;                 // constrainst for the table
     HsqlArrayList[]   triggerLists;                   // array of trigger lists
-    private int[]     colTypes;                       // fredt - types of columns
-    private int[]     colSizes;                       // fredt - copy of SIZE values for columns
-    private int[]     colScales;                      // fredt - copy of SCALE values for columns
-    private boolean[] colNullable;                    // fredt - modified copy of isNullable() values
-    private Expression[] colDefaults;                 // fredt - expressions of DEFAULT values
-    private int[]        defaultColumnMap;            // fred - holding 0,1,2,3,...
-    private boolean      hasDefaultValues;            //fredt - shortcut for above
-    private boolean      isText;
-    private boolean      isView;
+    public int[]     colTypes;                       // fredt - types of columns
+    public int[]     colSizes;                       // fredt - copy of SIZE values for columns
+    public int[]     colScales;                      // fredt - copy of SCALE values for columns
+    public boolean[] colNullable;                    // fredt - modified copy of isNullable() values
+    public Expression[] colDefaults;                 // fredt - expressions of DEFAULT values
+    public int[]        defaultColumnMap;            // fred - holding 0,1,2,3,...
+    public boolean      hasDefaultValues;            //fredt - shortcut for above
+    public boolean      isText;
+    public boolean      isView;
     boolean              sqlEnforceSize;              // inherited for the database -
 
     // properties for subclasses
-    protected int           columnCount;              // inclusive the hidden primary key
+    public int           columnCount;              // inclusive the hidden primary key
     public Database         database;
-    protected DataFileCache cache;
-    protected HsqlName      tableName;                // SQL name
-    private int             tableType;
-    protected boolean       isReadOnly;
-    protected boolean       isTemp;
-    protected boolean       isCached;
-    protected boolean       isLogged;
-    protected int           indexType;                // fredt - type of index used
-    protected boolean       onCommitPreserve;         // for temp tables
+    public DataFileCache cache;
+    public HsqlName      tableName;                // SQL name
+    public int             tableType;
+    public boolean       isReadOnly;
+    public boolean       isTemp;
+    public boolean       isCached;
+    public boolean       isLogged;
+    public int           indexType;                // fredt - type of index used
+    public boolean       onCommitPreserve;         // for temp tables
 
     //
     PersistentStore rowStore;
@@ -350,7 +350,7 @@
     /**
      * For text tables
      */
-    protected void setDataSource(Session s, String source, boolean isDesc,
+    public void setDataSource(Session s, String source, boolean isDesc,
                                  boolean newFile) throws HsqlException {
         throw (Trace.error(Trace.TABLE_NOT_FOUND));
     }
@@ -358,14 +358,14 @@
     /**
      * For text tables
      */
-    protected String getDataSource() {
+    public String getDataSource() {
         return null;
     }
 
     /**
      * For text tables.
      */
-    protected boolean isDescDataSource() {
+    public boolean isDescDataSource() {
         return false;
     }
 
@@ -610,7 +610,7 @@
     /**
      * returns a basic duplicate of the table without the data structures.
      */
-    protected Table duplicate() throws HsqlException {
+    public Table duplicate() throws HsqlException {
 
         Table t = (new Table(database, tableName, tableType));
 
@@ -745,7 +745,7 @@
         return null;
     }
 
-    private Table newDuplicate() throws HsqlException {
+    public Table newDuplicate() throws HsqlException {
 
         Table tn = duplicate();
 
@@ -762,7 +762,7 @@
         return tn;
     }
 
-    private void copyIndexes(Table tn, int removeIndex, int colIndex,
+    public void copyIndexes(Table tn, int removeIndex, int colIndex,
                              int adjust) throws HsqlException {
 
         for (int i = 1; i < getIndexCount(); i++) {
@@ -872,7 +872,7 @@
         }
     }
 
-    private void recompileCheckConstraints(Session session)
+    public void recompileCheckConstraints(Session session)
     throws HsqlException {
 
         for (int i = 0, size = constraintList.length; i < size; i++) {
@@ -887,7 +887,7 @@
     /**
      * Used after adding columns or indexes to the table.
      */
-    private void recompileCheckConstraint(Session session,
+    public void recompileCheckConstraint(Session session,
                                           Constraint c) throws HsqlException {
 
         String     ddl       = c.core.check.getDDL();
@@ -948,7 +948,7 @@
     /**
      * Used for rename column.
      */
-    private void renameColumnInCheckConstraints(String oldname,
+    public void renameColumnInCheckConstraints(String oldname,
             String newname, boolean isquoted) throws HsqlException {
 
         for (int i = 0, size = constraintList.length; i < size; i++) {
@@ -975,7 +975,7 @@
     /**
      * Used for drop column.
      */
-    private void renameTableInCheckConstraints(Session session,
+    public void renameTableInCheckConstraints(Session session,
             String oldname, String newname) throws HsqlException {
 
         for (int i = 0, size = constraintList.length; i < size; i++) {
@@ -1094,7 +1094,7 @@
      * the first non-unique index. NULL if there is no user-defined index.
      *
      */
-    private void setBestRowIdentifiers() {
+    public void setBestRowIdentifiers() {
 
         int[]   briCols      = null;
         int     briColsCount = 0;
@@ -1484,7 +1484,7 @@
      *  Create new index taking into account removal or addition of a column
      *  to the table.
      */
-    private Index createAdjustedIndex(Index index, int colindex,
+    public Index createAdjustedIndex(Index index, int colindex,
                                       int adjust) throws HsqlException {
 
         int[] indexcolumns = (int[]) ArrayUtil.resizeArray(index.getColumns(),
@@ -1605,7 +1605,7 @@
         return indexNo;
     }
 
-    private int addIndex(Index index) {
+    public int addIndex(Index index) {
 
         int i = 0;
 
@@ -1852,7 +1852,7 @@
      *  Mid level method for inserting rows. Performs constraint checks and
      *  fires row level triggers.
      */
-    private void insertRow(Session session,
+    public void insertRow(Session session,
                            Object[] data) throws HsqlException {
 
         if (triggerLists[Trigger.INSERT_BEFORE_ROW] != null) {
@@ -1899,7 +1899,7 @@
      *  UNIQUE or PRIMARY constraints are enforced by attempting to
      *  add the row to the indexes.
      */
-    private Row insertNoCheck(Session session,
+    public Row insertNoCheck(Session session,
                               Object[] data) throws HsqlException {
 
         Row r = newRow(data);
@@ -2028,7 +2028,7 @@
      * Used by TextCache to insert a row into the indexes when the source
      * file is first read.
      */
-    protected void insertFromTextSource(CachedRow row) throws HsqlException {
+    public void insertFromTextSource(CachedRow row) throws HsqlException {
 
         Object[] data = row.getData();
 
@@ -2058,7 +2058,7 @@
     /**
      * Checks a row against NOT NULL constraints on columns.
      */
-    protected void enforceNullConstraints(Object[] data)
+    public void enforceNullConstraints(Object[] data)
     throws HsqlException {
 
         for (int i = 0; i < columnCount; i++) {
@@ -2074,7 +2074,7 @@
      * If there is an identity column (visible or hidden) on the table, sets
      * the value and/or adjusts the iIdentiy value for the table.
      */
-    protected void setIdentityColumn(Session session,
+    public void setIdentityColumn(Session session,
                                      Object[] data) throws HsqlException {
 
         if (identityColumn != -1) {
@@ -2102,7 +2102,7 @@
      * If there is an identity column (visible or hidden) on the table, sets
      * the max identity value.
      */
-    protected void updateIdentityValue(Object[] data) throws HsqlException {
+    public void updateIdentityValue(Object[] data) throws HsqlException {
 
         if (identityColumn != -1) {
             Number id = (Number) data[identityColumn];
@@ -2774,7 +2774,7 @@
      *  Mid level row delete method. Fires triggers but no integrity
      *  constraint checks.
      */
-    private void deleteNoRefCheck(Session session,
+    public void deleteNoRefCheck(Session session,
                                   Row row) throws HsqlException {
 
         Object[] data = row.getData();
@@ -2790,7 +2790,7 @@
      * Low level row delete method. Removes the row from the indexes and
      * from the Cache.
      */
-    private void deleteNoCheck(Session session, Row row,
+    public void deleteNoCheck(Session session, Row row,
                                boolean log) throws HsqlException {
 
         if (row.isDeleted()) {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/TableWorks.java.orig	2005-06-13 00:57:05.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/TableWorks.java	2005-07-19 19:41:45.000000000 +0200
@@ -46,8 +46,8 @@
  */
 class TableWorks {
 
-    private Table   table;
-    private Session session;
+    public Table   table;
+    public Session session;
 
     TableWorks(Session session, Table table) {
         this.table   = table;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/TextTable.java.orig	2005-06-04 04:16:05.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/TextTable.java	2005-07-19 19:41:45.000000000 +0200
@@ -48,8 +48,8 @@
  */
 class TextTable extends org.hsqldb.Table {
 
-    private String  dataSource = "";
-    private boolean isReversed = false;
+    public String  dataSource = "";
+    public boolean isReversed = false;
 
     /**
      *  Constructs a new TextTable from the given arguments.
@@ -72,7 +72,7 @@
      *
      * Better clarification of the role of the methods is needed.
      */
-    private void openCache(String dataSourceNew, boolean isReversedNew,
+    public void openCache(String dataSourceNew, boolean isReversedNew,
                            boolean isReadOnlyNew) throws HsqlException {
 
         if (dataSourceNew == null) {
@@ -149,7 +149,7 @@
      * High level command to assign a data source to the table definition.
      * Reassigns only if the data source or direction has changed.
      */
-    protected void setDataSource(Session s, String dataSourceNew,
+    public void setDataSource(Session s, String dataSourceNew,
                                  boolean isReversedNew,
                                  boolean newFile) throws HsqlException {
 
@@ -176,11 +176,11 @@
         }
     }
 
-    protected String getDataSource() {
+    public String getDataSource() {
         return dataSource;
     }
 
-    protected boolean isDescDataSource() {
+    public boolean isDescDataSource() {
         return isReversed;
     }
 
@@ -235,7 +235,7 @@
         return false;
     }
 
-    protected Table duplicate() throws HsqlException {
+    public Table duplicate() throws HsqlException {
         return new TextTable(database, tableName, getTableType());
     }
 
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Tokenizer.java.orig	2005-06-08 21:09:54.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Tokenizer.java	2005-07-19 19:41:45.000000000 +0200
@@ -97,7 +97,7 @@
  */
 public class Tokenizer {
 
-    private static final int NO_TYPE   = 0,
+    public static final int NO_TYPE   = 0,
                              NAME      = 1,
                              LONG_NAME = 2,
                              SPECIAL   = 3,
@@ -113,28 +113,28 @@
                              NULL      = 13;
 
     // used only internally
-    private static final int QUOTED_IDENTIFIER = 14,
+    public static final int QUOTED_IDENTIFIER = 14,
                              REMARK_LINE       = 15,
                              REMARK            = 16;
-    private String           sCommand;
-    private int              iLength;
-    private int              iIndex;
-    private int              tokenIndex;
-    private int              nextTokenIndex;
-    private int              beginIndex;
-    private int              iType;
-    private String           sToken;
-    private String           sLongNameFirst = null;
-    private int              typeLongNameFirst;
+    public String           sCommand;
+    public int              iLength;
+    public int              iIndex;
+    public int              tokenIndex;
+    public int              nextTokenIndex;
+    public int              beginIndex;
+    public int              iType;
+    public String           sToken;
+    public String           sLongNameFirst = null;
+    public int              typeLongNameFirst;
 
     // getToken() will clear LongNameFirst unless retainFirst is set.
-    private boolean retainFirst = false;
+    public boolean retainFirst = false;
 
-//    private String           sLongNameLast;
+//    public String           sLongNameLast;
     // WAIT.  Don't do anything before popping another Token (because the
     // state variables aren't set properly due to a call of wait()).
-    private boolean bWait;
-    private boolean lastTokenQuotedID;
+    public boolean bWait;
+    public boolean lastTokenQuotedID;
 
     // literals that are values
     static IntValueHashMap valueTokens;
@@ -739,7 +739,7 @@
      *
      * @throws HsqlException
      */
-    private void getToken() throws HsqlException {
+    public void getToken() throws HsqlException {
 
         if (bWait) {
             bWait  = false;
@@ -1101,7 +1101,7 @@
 // because these strings might end up as part of internal data structures
 // or table elements.
 // we may consider using pools to avoid recreating the strings
-    private String getString(char quoteChar) throws HsqlException {
+    public String getString(char quoteChar) throws HsqlException {
 
         try {
             int     nextIndex   = iIndex;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Token.java.orig	2005-06-08 21:09:54.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Token.java	2005-07-19 19:41:45.000000000 +0200
@@ -45,7 +45,7 @@
  */
 public class Token {
 
-    private static IntValueHashMap commandSet;
+    public static IntValueHashMap commandSet;
 
     //
     static final String        T_ASTERISK     = "*";
@@ -712,7 +712,7 @@
      *
      * @return a new map for the database command token set
      */
-    private static IntValueHashMap newCommandSet() {
+    public static IntValueHashMap newCommandSet() {
 
         IntValueHashMap commandSet;
 
@@ -793,7 +793,7 @@
         return commandSet.get(token, -1);
     }
 
-    private static HashSet keywords;
+    public static HashSet keywords;
     static IntValueHashMap valueTokens;
 
     static {
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Trace.java.orig	2005-06-08 00:24:28.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Trace.java	2005-07-19 19:41:45.000000000 +0200
@@ -703,7 +703,7 @@
     /**
      * Returns the stack trace for doAssert()
      */
-    private static String getStackTrace() {
+    public static String getStackTrace() {
 
         try {
             Exception e = new Exception();
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/TriggerDef.java.orig	2005-06-08 21:09:54.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/TriggerDef.java	2005-07-19 19:41:45.000000000 +0200
@@ -84,17 +84,17 @@
         return defaultQueueSize;
     }
 
-    protected static int defaultQueueSize = 1024;
+    public static int defaultQueueSize = 1024;
     Table                table;
     Trigger              trigger;
     String               triggerClassName;
     int                  vectorIndex;               // index into HsqlArrayList[]
 
-    //protected boolean busy;               // firing trigger in progress
-    protected HsqlDeque        pendingQueue;        // row triggers pending
-    protected int              rowsQueued;          // rows in pendingQueue
-    protected boolean          valid     = true;    // parsing valid
-    protected volatile boolean keepGoing = true;
+    //public boolean busy;               // firing trigger in progress
+    public HsqlDeque        pendingQueue;        // row triggers pending
+    public int              rowsQueued;          // rows in pendingQueue
+    public boolean          valid     = true;    // parsing valid
+    public volatile boolean keepGoing = true;
 
     /**
      *  Constructs a new TriggerDef object to represent an HSQLDB trigger
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Types.java.orig	2005-06-08 21:09:54.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/Types.java	2005-07-19 19:41:45.000000000 +0200
@@ -461,7 +461,7 @@
 //                   Function.java whose number class is
 //                   narrower than the corresponding internal
 //                   wrapper
-    private static org.hsqldb.lib.HashSet illegalParameterClasses;
+    public static org.hsqldb.lib.HashSet illegalParameterClasses;
 
     static {
         typeAliases = new IntValueHashMap(67, 1);
@@ -1073,7 +1073,7 @@
     //
     // 1.) refusing to directly display such columns in graphical query results
     // 2.) providing other means to retrieve and display such values
-    private static int MAX_CHAR_OR_VARCHAR_DISPLAY_SIZE() {
+    public static int MAX_CHAR_OR_VARCHAR_DISPLAY_SIZE() {
 
         try {
             return Integer.getInteger(
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/User.java.orig	2005-06-08 21:09:54.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/User.java	2005-07-19 19:41:45.000000000 +0200
@@ -91,19 +91,19 @@
 public class User {
 
     /** true if this user is the sys user. */
-    private boolean isSys;
+    public boolean isSys;
 
     /** true if this user is the public user. */
-    private boolean isPublic;
+    public boolean isPublic;
 
     /** user name. */
-    private String sName;
+    public String sName;
 
     /** password. */
-    private String sPassword;
+    public String sPassword;
 
     /** grantee object. */
-    private Grantee grantee;
+    public Grantee grantee;
 
     /**
      * Constructor
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/UserManager.java.orig	2005-06-12 20:35:11.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/UserManager.java	2005-07-19 19:41:45.000000000 +0200
@@ -110,7 +110,7 @@
      * User object is kept in the list because it's needed by MetaData
      * routines via "listVisibleUsers(x, true)".
      */
-    private HashMappedList uUser;
+    public HashMappedList uUser;
 
     /**
      * Construction happens once for each Database object.
@@ -133,7 +133,7 @@
         sysUser.getGrantee().setAdminDirect();
     }
 
-    private GranteeManager granteeManager;
+    public GranteeManager granteeManager;
 
     /**
      * Creates a new User object under management of this object. <p>
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/View.java.orig	2005-05-11 15:39:11.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/View.java	2005-07-19 19:41:45.000000000 +0200
@@ -51,8 +51,8 @@
     Table              workingTable;
     Select             viewSelect;
     SubQuery           viewSubQuery;
-    private String     statement;
-    private HsqlName[] colList;
+    public String     statement;
+    public HsqlName[] colList;
 
     /** schema at the time of compilation */
     HsqlName compileTimeSchema;
--- hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/WebServerConnection.java.orig	2005-06-08 21:09:57.000000000 +0200
+++ hsqldb/unxlngi6.pro/misc/build/hsqldb/src/org/hsqldb/WebServerConnection.java	2005-07-19 19:41:45.000000000 +0200
@@ -76,20 +76,20 @@
 class WebServerConnection implements Runnable {
 
     static final String         ENCODING = "8859_1";
-    private Socket              socket;
-    private WebServer           server;
-    private static final int    REQUEST_TYPE_BAD  = 0;
-    private static final int    REQUEST_TYPE_GET  = 1;
-    private static final int    REQUEST_TYPE_HEAD = 2;
-    private static final int    REQUEST_TYPE_POST = 3;
-    private static final String HEADER_OK         = "HTTP/1.0 200 OK";
-    private static final String HEADER_BAD_REQUEST =
+    public Socket              socket;
+    public WebServer           server;
+    public static final int    REQUEST_TYPE_BAD  = 0;
+    public static final int    REQUEST_TYPE_GET  = 1;
+    public static final int    REQUEST_TYPE_HEAD = 2;
+    public static final int    REQUEST_TYPE_POST = 3;
+    public static final String HEADER_OK         = "HTTP/1.0 200 OK";
+    public static final String HEADER_BAD_REQUEST =
         "HTTP/1.0 400 Bad Request";
-    private static final String HEADER_NOT_FOUND = "HTTP/1.0 404 Not Found";
-    private static final String HEADER_FORBIDDEN = "HTTP/1.0 403 Forbidden";
+    public static final String HEADER_NOT_FOUND = "HTTP/1.0 404 Not Found";
+    public static final String HEADER_FORBIDDEN = "HTTP/1.0 403 Forbidden";
     static final int            BUFFER_SIZE      = 256;
-    private RowOutputBinary     rowOut = new RowOutputBinary(BUFFER_SIZE);
-    private RowInputBinary      rowIn            = new RowInputBinary(rowOut);
+    public RowOutputBinary     rowOut = new RowOutputBinary(BUFFER_SIZE);
+    public RowInputBinary      rowIn            = new RowInputBinary(rowOut);
 
     //
     static final byte[] BYTES_GET        = "GET".getBytes();
@@ -101,7 +101,7 @@
     };
 
     // default mime type mappings
-    private static final int hnd_content_types =
+    public static final int hnd_content_types =
         BundleHandler.getBundleHandle("content_types", null);
 
     /**
@@ -125,7 +125,7 @@
      * @return a best-guess mime-type string using the file extention
      *      of the name argument.
      */
-    private String getMimeTypeString(String name) {
+    public String getMimeTypeString(String name) {
 
         int    pos;
         String key;
@@ -240,7 +240,7 @@
      * POST is used only for database access. So we can assume the strings
      * are those generated by HTTPClientConnection
      */
-    private void processPost(InputStream inStream,
+    public void processPost(InputStream inStream,
                              String name) throws HsqlException, IOException {
 
         // fredt - parsing in this block is not actually necessary
@@ -350,7 +350,7 @@
      * @param  name the name of the content to get
      * @param  send whether to send the content as well, or just the header
      */
-    private void processGet(String name, boolean send) {
+    public void processGet(String name, boolean send) {
 
         try {
             String       hdr;
@@ -452,7 +452,7 @@
      *
      * @param code the error condition code
      */
-    private void processError(int code) {
+    public void processError(int code) {
 
         String msg;
 
