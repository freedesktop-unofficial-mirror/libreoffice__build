--- sc/source/core/tool/interpr1.cxx	2005-04-22 10:38:28.000000000 +0530
+++ sc/source/core/tool/interpr1.cxx	2005-05-12 15:18:15.874307739 +0530
@@ -2912,7 +2912,12 @@ double ScInterpreter::IterateParameters(
 	switch( eFunc )
 	{
 		case ifSUM:		fRes = ::rtl::math::approxAdd( fRes, fMem ); break;
-		case ifAVERAGE:	fRes = ::rtl::math::approxAdd( fRes, fMem ) / nCount; break;
+		case ifAVERAGE:	
+					if( nCount == 0 ) 
+						SetError( errDivisionByZero );
+					else
+						fRes = ::rtl::math::approxAdd( fRes, fMem ) / nCount; 
+					break;
 		case ifCOUNT2:
 		case ifCOUNT:	fRes  = nCount; break;
 		case ifPRODUCT:	if ( !nCount ) fRes = 0.0; break;
@@ -3084,7 +3089,11 @@ void ScInterpreter::ScVar( BOOL bTextAsZ
 	double nVal;
 	double nValCount;
 	GetStVarParams( nVal, nValCount, bTextAsZero );
-	PushDouble(nVal / (nValCount - 1.0));
+
+	if( nValCount <= 1.0 )
+		SetError( errDivisionByZero );
+	else
+		PushDouble(nVal / (nValCount - 1.0));
 }
 
 
@@ -3093,7 +3102,11 @@ void ScInterpreter::ScVarP( BOOL bTextAs
 	double nVal;
 	double nValCount;
 	GetStVarParams( nVal, nValCount, bTextAsZero );
-	PushDouble(nVal / nValCount);
+
+	if( nValCount == 0.0 )
+		SetError( errDivisionByZero );
+	else
+		PushDouble(nVal / nValCount);
 }
 
 
@@ -3102,7 +3115,10 @@ void ScInterpreter::ScStDev( BOOL bTextA
 	double nVal;
 	double nValCount;
 	GetStVarParams( nVal, nValCount, bTextAsZero );
-	PushDouble(sqrt(nVal / (nValCount - 1.0)));
+	if( nValCount <= 1.0 )
+		SetError( errDivisionByZero );
+	else
+		PushDouble(sqrt(nVal / (nValCount - 1.0)));
 }
 
 
@@ -3111,7 +3127,10 @@ void ScInterpreter::ScStDevP( BOOL bText
 	double nVal;
 	double nValCount;
 	GetStVarParams( nVal, nValCount, bTextAsZero );
-	PushDouble(sqrt(nVal / nValCount));
+	if( nValCount == 0.0 )
+		SetError( errDivisionByZero );
+	else
+		PushDouble(sqrt(nVal / nValCount));
 }
 
 
--- sc/source/core/tool/interpr2.cxx	2005-04-14 09:50:06.000000000 +0530
+++ sc/source/core/tool/interpr2.cxx	2005-05-11 09:22:39.259936459 +0530
@@ -1460,6 +1460,8 @@ void ScInterpreter::ScMod()
 	{
 		double nVal2 = GetDouble();
 		double nVal1 = GetDouble();
+		if( nVal2 == 0.0 )
+			SetError( errDivisionByZero );
 		PushDouble(nVal1 - (::rtl::math::approxFloor(nVal1 / nVal2) * nVal2));
 	}
 }
--- sc/source/core/tool/interpr3.cxx	2005-04-14 09:50:06.000000000 +0530
+++ sc/source/core/tool/interpr3.cxx	2005-05-12 15:05:29.387715566 +0530
@@ -950,7 +950,9 @@ void ScInterpreter::ScNormDist()
 		double sigma = GetDouble();					// Stdabw
 		double mue = GetDouble();					// Mittelwert
 		double x = GetDouble();						// x
-		if (sigma <= 0.0)
+		if (sigma == 0.0)
+			SetError( errDivisionByZero );
+		else if (sigma < 0.0)
 			SetIllegalArgument();
 		else if (kum == 0.0)						// Dichte
 			PushDouble(phi((x-mue)/sigma)/sigma);
@@ -966,7 +968,9 @@ void ScInterpreter::ScLogNormDist()
 		double sigma = GetDouble();					// Stdabw
 		double mue = GetDouble();					// Mittelwert
 		double x = GetDouble();						// x
-		if (sigma <= 0.0 || x <= 0.0)
+		if (sigma == 0.0 )
+			SetError( errDivisionByZero );
+		else if (sigma < 0.0 || x <= 0.0)
 			SetIllegalArgument();
 		else
 			PushDouble(0.5 + gauss((log(x)-mue)/sigma));
@@ -1409,7 +1413,9 @@ void ScInterpreter::ScConfidence()
 		double n     = ::rtl::math::approxFloor(GetDouble());
 		double sigma = GetDouble();
 		double alpha = GetDouble();
-		if (sigma <= 0.0 || alpha <= 0.0 || alpha >= 1.0 || n < 1.0)
+		if (sigma == 0.0 )
+			SetError( errDivisionByZero );
+		else if (sigma < 0.0 || alpha <= 0.0 || alpha >= 1.0 || n < 1.0)
 			SetIllegalArgument();
 		else
 			PushDouble( gaussinv(1.0-alpha/2.0) * sigma/sqrt(n) );
@@ -1515,7 +1521,7 @@ void ScInterpreter::ScZTest()
 		default : SetError(errIllegalParameter); break;
 	}
 	if (rValCount <= 1.0)
-		SetNoValue();
+		SetError( errDivisionByZero );
 	else
 	{
 		mue = fSum/rValCount;
@@ -1951,6 +1957,9 @@ void ScInterpreter::ScKurt()
 		}
 	}
 
+	if (fCount == 0)
+		SetError( errDivisionByZero );
+
 	if (nGlobalError)
 	{
 		PushInt(0);
@@ -2227,7 +2236,9 @@ void ScInterpreter::ScStandard()
 		double sigma = GetDouble();
 		double mue   = GetDouble();
 		double x     = GetDouble();
-		if (sigma <= 0.0)
+		if (sigma == 0.0)
+			SetError( errDivisionByZero );
+		else if (sigma < 0.0)
 			SetIllegalArgument();
 		else
 			PushDouble((x-mue)/sigma);
