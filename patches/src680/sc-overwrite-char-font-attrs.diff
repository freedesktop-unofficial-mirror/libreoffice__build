diff --git sc/inc/attarray.hxx sc/inc/attarray.hxx
index 69b50e7..1378b0d 100644
--- sc/inc/attarray.hxx
+++ sc/inc/attarray.hxx
@@ -45,6 +45,7 @@
 #endif
 
 class ScDocument;
+class ScEditDataArray;
 class ScMarkArray;
 class ScPatternAttr;
 class ScStyleSheet;
@@ -114,6 +115,9 @@ friend void lcl_IterGetNumberFormat( ULONG& nFormat,
 							SCROW nStartRow, SCROW nEndRow,
 							BOOL bLeft, SCCOL nDistRight, BOOL bTop, SCROW nDistBottom );
 
+    void RemoveCellCharAttribs( SCROW nStartRow, SCROW nEndRow, 
+                              const ScPatternAttr* pPattern, ScEditDataArray* pDataArray );
+
 public:
 			ScAttrArray( SCCOL nNewCol, SCTAB nNewTab, ScDocument* pDoc );
 			~ScAttrArray();
@@ -135,9 +139,11 @@ public:
 							SCROW nStartRow, SCROW nEndRow, BOOL bLeft, SCCOL nDistRight );
 
 	void	SetPattern( SCROW nRow, const ScPatternAttr* pPattern, BOOL bPutToPool = FALSE );
-	void	SetPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr* pPattern, BOOL bPutToPool = FALSE);
+	void	SetPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr* pPattern, 
+                            BOOL bPutToPool = FALSE, ScEditDataArray* pDataArray = NULL );
 	void	ApplyStyleArea( SCROW nStartRow, SCROW nEndRow, ScStyleSheet* pStyle );
-	void	ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCache* pCache );
+	void	ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCache* pCache, 
+                            ScEditDataArray* pDataArray = NULL );
 	void	ApplyLineStyleArea( SCROW nStartRow, SCROW nEndRow,
 								const SvxBorderLine* pLine, BOOL bColorOnly );
 
diff --git sc/inc/cell.hxx sc/inc/cell.hxx
index ce293fe..a737251 100644
--- sc/inc/cell.hxx
+++ sc/inc/cell.hxx
@@ -39,6 +39,8 @@
 #include <stddef.h>
 
 #include <set>
+#include <vector>
+#include <boost/shared_ptr.hpp>
 
 #ifndef _SVMEMPOOL_HXX //autogen
 #include <tools/mempool.hxx>
@@ -76,6 +78,7 @@ class ScCodeArray;
 class ScTokenArray;
 class ScProgress;
 class ScPostIt;
+class ScPatternAttr;
 
 class ScMultipleReadHeader;
 class ScMultipleWriteHeader;
@@ -230,8 +233,57 @@ public:
 	const EditTextObject* GetData() const	{ return pData; }
 
 	void			Save( SvStream& rStream ) const;
+
+    /** Removes character attribute based on new pattern attributes. */
+    void            RemoveCharAttribs( const ScPatternAttr& rAttr );
 };
 
+// ----------------------------------------------------------------------------
+
+class ScEditDataArray
+{
+public:
+    class Item
+    {
+    public:
+        explicit Item(SCTAB nTab, SCCOL nCol, SCROW nRow, 
+                      EditTextObject* pOldData, EditTextObject* pNewData);
+        ~Item();
+    
+        const EditTextObject* GetOldData() const;
+        const EditTextObject* GetNewData() const;
+        SCTAB GetTab() const;
+        SCCOL GetCol() const;
+        SCROW GetRow() const;
+    
+    private:
+        Item(); // disabled
+    
+    private:
+        ::boost::shared_ptr<EditTextObject> mpOldData;
+        ::boost::shared_ptr<EditTextObject> mpNewData;
+        SCTAB mnTab;
+        SCCOL mnCol;
+        SCROW mnRow;
+
+    };
+
+    ScEditDataArray();
+    ~ScEditDataArray();
+
+    void AddItem(SCTAB nTab, SCCOL nCol, SCROW nRow, 
+                 EditTextObject* pOldData, EditTextObject* pNewData);
+
+    const Item* First();
+    const Item* Next();
+
+private:
+    ::std::vector<Item>::const_iterator maIter;
+    ::std::vector<Item> maArray;
+};
+
+// ----------------------------------------------------------------------------
+
 enum ScMatrixMode {
 	MM_NONE		 = 0,					// keine Matrixformel
 	MM_FORMULA	 = 1,					// Matrixformel
diff --git sc/inc/column.hxx sc/inc/column.hxx
index cf3ff76..6b1efa7 100644
--- sc/inc/column.hxx
+++ sc/inc/column.hxx
@@ -73,6 +73,7 @@ class ScAttrIterator;
 class ScAttrArray;
 class ScBaseCell;
 class ScDocument;
+class ScEditDataArray;
 class ScFormulaCell;
 class ScMarkData;
 class ScMultipleReadHeader;
@@ -333,7 +334,8 @@ public:
 
 	void		ApplyAttr( SCROW nRow, const SfxPoolItem& rAttr );
 	void		ApplyPattern( SCROW nRow, const ScPatternAttr& rPatAttr );
-	void		ApplyPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr& rPatAttr );
+	void		ApplyPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr& rPatAttr, 
+                                  ScEditDataArray* pDataArray = NULL );
 	void		SetPattern( SCROW nRow, const ScPatternAttr& rPatAttr, BOOL bPutToPool = FALSE );
 	void		SetPatternArea( SCROW nStartRow, SCROW nEndRow,
 								const ScPatternAttr& rPatAttr, BOOL bPutToPool = FALSE );
@@ -365,7 +367,7 @@ public:
 
 	void		RemoveProtected( SCROW nStartRow, SCROW nEndRow );
 
-	SCsROW		ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark );
+	SCsROW		ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark, ScEditDataArray* pDataArray = NULL );
 	void		DeleteSelection( USHORT nDelFlag, const ScMarkData& rMark );
 
 	void		ClearSelectionItems( const USHORT* pWhich, const ScMarkData& rMark );
diff --git sc/inc/document.hxx sc/inc/document.hxx
index f079d7a..98a6d71 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -382,6 +382,7 @@ private:
 	// kein Broadcast, keine Listener aufbauen waehrend aus einem anderen
 	// Doc (per Filter o.ae.) inserted wird, erst bei CompileAll / CalcAfterLoad
 	BOOL				bInsertingFromOtherDoc;
+    bool                bLoadingMedium;
 	BOOL				bImportingXML;		// special handling of formula text
     BOOL                bXMLFromWrapper;    // distinguish ScXMLImportWrapper from external component
 	BOOL				bCalcingAfterLoad;				// in CalcAfterLoad TRUE
@@ -1130,7 +1131,8 @@ SC_DLLPUBLIC	ScDBCollection*	GetDBCollection() const;
 									const ScPatternAttr& rAttr );
 	void			ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow,
 										SCCOL nEndCol, SCROW nEndRow,
-										const ScMarkData& rMark, const ScPatternAttr& rAttr );
+										const ScMarkData& rMark, const ScPatternAttr& rAttr,
+                                      ScEditDataArray* pDataArray = NULL );
 	void			ApplyPatternAreaTab( SCCOL nStartCol, SCROW nStartRow,
 											SCCOL nEndCol, SCROW nEndRow, SCTAB nTab,
 											const ScPatternAttr& rAttr );
@@ -1197,7 +1199,8 @@ SC_DLLPUBLIC	ScDBCollection*	GetDBCollection() const;
 							SCCOL nVCol, SCROW nVRow, SCTAB nVTab,
 							const String& sValStr, double& nX);
 
-	void			ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMarkData& rMark );
+	void			ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMarkData& rMark, 
+                                           ScEditDataArray* pDataArray = NULL );
 	void			DeleteSelection( USHORT nDelFlag, const ScMarkData& rMark );
 	void			DeleteSelectionTab( SCTAB nTab, USHORT nDelFlag, const ScMarkData& rMark );
 
@@ -1467,6 +1470,8 @@ SC_DLLPUBLIC	SvNumberFormatter*	GetFormatTable() const;
 	BOOL			GetNoSetDirty() const { return bNoSetDirty; }
 	void			SetInsertingFromOtherDoc( BOOL bVal ) { bInsertingFromOtherDoc = bVal; }
 	BOOL			IsInsertingFromOtherDoc() const { return bInsertingFromOtherDoc; }
+    void            SetLoadingMedium( bool bVal );
+    bool            IsLoadingMedium() const;
 	void			SetImportingXML( BOOL bVal );
 	BOOL			IsImportingXML() const { return bImportingXML; }
 	void			SetXMLFromWrapper( BOOL bVal );
diff --git sc/inc/table.hxx sc/inc/table.hxx
index a698737..2563eb1 100644
--- sc/inc/table.hxx
+++ sc/inc/table.hxx
@@ -77,6 +77,7 @@ class ScAutoFormatData;
 class ScBaseCell;
 class ScDocument;
 class ScDrawLayer;
+class ScEditDataArray;
 class ScFormulaCell;
 class ScOutlineTable;
 class ScPostIt;
@@ -472,7 +473,8 @@ public:
 
 	void		ApplyAttr( SCCOL nCol, SCROW nRow, const SfxPoolItem& rAttr );
 	void		ApplyPattern( SCCOL nCol, SCROW nRow, const ScPatternAttr& rAttr );
-	void		ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow, const ScPatternAttr& rAttr );
+	void		ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow, 
+                                  const ScPatternAttr& rAttr, ScEditDataArray* pDataArray = NULL );
 	void		SetPattern( const ScAddress& rPos, const ScPatternAttr& rAttr, BOOL bPutToPool = FALSE )
 					{ aCol[rPos.Col()].SetPattern( rPos.Row(), rAttr, bPutToPool ); }
 	void		SetPattern( SCCOL nCol, SCROW nRow, const ScPatternAttr& rAttr, BOOL bPutToPool = FALSE );
@@ -500,7 +502,7 @@ public:
 	BOOL		ApplyFlags( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow, INT16 nFlags );
 	BOOL		RemoveFlags( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow, INT16 nFlags );
 
-	void		ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark );
+	void		ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark, ScEditDataArray* pDataArray = NULL );
 	void		DeleteSelection( USHORT nDelFlag, const ScMarkData& rMark );
 
 	void		ClearSelectionItems( const USHORT* pWhich, const ScMarkData& rMark );
diff --git sc/source/core/data/attarray.cxx sc/source/core/data/attarray.cxx
index d48df06..479aee2 100644
--- sc/source/core/data/attarray.cxx
+++ sc/source/core/data/attarray.cxx
@@ -46,6 +46,7 @@
 #include <svx/bolnitem.hxx>
 #include <svx/frmdiritem.hxx>
 #include <svx/shaditem.hxx>
+#include <svx/editobj.hxx>
 #include <svtools/poolcach.hxx>
 
 #ifndef _SVX_FONTITEM_HXX
@@ -65,7 +66,7 @@
 #include "markarr.hxx"
 #include "rechead.hxx"
 #include "globstr.hrc"
-
+#include "cell.hxx"
 
 #undef DBG_INVALIDATE
 #define DBGOUTPUT(s) \
@@ -309,8 +310,31 @@ void ScAttrArray::SetPattern( SCROW nRow, const ScPatternAttr* pPattern, BOOL bP
 	SetPatternArea( nRow, nRow, pPattern, bPutToPool );
 }
 
+void ScAttrArray::RemoveCellCharAttribs( SCROW nStartRow, SCROW nEndRow, 
+                                       const ScPatternAttr* pPattern, ScEditDataArray* pDataArray )
+{
+    for (SCROW nRow = nStartRow; nRow <= nEndRow; ++nRow)
+    {
+        ScBaseCell* pCell;
+        pDocument->GetCell(nCol, nRow, nTab, pCell);
+        if (pCell && pCell->GetCellType() == CELLTYPE_EDIT)
+        {
+            EditTextObject* pOldData = NULL;
+            ScEditCell* pEditCell = static_cast<ScEditCell*>(pCell);
+            if (pDataArray)
+                pOldData = pEditCell->GetData()->Clone();
+            pEditCell->RemoveCharAttribs(*pPattern);
+            if (pDataArray)
+            {
+                EditTextObject* pNewData = pEditCell->GetData()->Clone();
+                pDataArray->AddItem(nTab, nCol, nRow, pOldData, pNewData);
+            }
+        }
+    }
+}
 
-void ScAttrArray::SetPatternArea(SCROW nStartRow, SCROW nEndRow, const ScPatternAttr *pPattern, BOOL bPutToPool )
+void ScAttrArray::SetPatternArea(SCROW nStartRow, SCROW nEndRow, const ScPatternAttr *pPattern, 
+                                 BOOL bPutToPool, ScEditDataArray* pDataArray )
 {
 	if (ValidRow(nStartRow) && ValidRow(nEndRow))
 	{
@@ -480,6 +504,13 @@ void ScAttrArray::SetPatternArea(SCROW nStartRow, SCROW nEndRow, const ScPattern
                     pData[nInsert-1].nRow = nStartRow - 1;
                 pData[nInsert].nRow = nEndRow;
                 pData[nInsert].pPattern = pPattern;
+
+                // Remove character attributes from these cells if the pattern
+                // is applied during normal session.  We don't want to do this
+                // while importing document.
+                if (!pDocument->IsLoadingMedium())
+                    RemoveCellCharAttribs(nStartRow, nEndRow, pPattern ,pDataArray);
+
                 nCount++;
             }
 		}
@@ -715,7 +746,7 @@ void ScAttrArray::ApplyLineStyleArea( SCROW nStartRow, SCROW nEndRow,
 #undef SET_LINE
 
 
-void ScAttrArray::ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCache* pCache )
+void ScAttrArray::ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCache* pCache, ScEditDataArray* pDataArray )
 {
 #ifdef DBG_UTIL
 	TestData();
@@ -750,7 +781,7 @@ void ScAttrArray::ApplyCacheArea( SCROW nStartRow, SCROW nEndRow, SfxItemPoolCac
 				{
 					if (nY1 < nStartRow) nY1=nStartRow;
 					if (nY2 > nEndRow) nY2=nEndRow;
-					SetPatternArea( nY1, nY2, pNewPattern );
+					SetPatternArea( nY1, nY2, pNewPattern, false, pDataArray );
 					Search( nStart, nPos );
 				}
 				else
diff --git sc/source/core/data/cell2.cxx sc/source/core/data/cell2.cxx
index cd2622a..4acf571 100644
--- sc/source/core/data/cell2.cxx
+++ sc/source/core/data/cell2.cxx
@@ -61,7 +61,8 @@
 #include "editutil.hxx"
 #include "chgtrack.hxx"
 #include "indexmap.hxx"
-
+#include "scitems.hxx"
+#include "patattr.hxx"
 
 // STATIC DATA -----------------------------------------------------------
 
@@ -201,6 +202,27 @@ void ScEditCell::Save( SvStream& rStream ) const
         pData->Store( rStream );
 }
 
+void ScEditCell::RemoveCharAttribs( const ScPatternAttr& rAttr )
+{
+    const struct {
+        USHORT nAttrType; 
+        USHORT nCharType;
+    } AttrTypeMap[] = {
+        { ATTR_FONT,        EE_CHAR_FONTINFO },
+        { ATTR_FONT_HEIGHT, EE_CHAR_FONTHEIGHT },
+        { ATTR_FONT_COLOR,  EE_CHAR_COLOR }
+    };
+    USHORT nMapCount = sizeof(AttrTypeMap) / sizeof(AttrTypeMap[0]);
+
+    const SfxItemSet& rSet = rAttr.GetItemSet();
+    const SfxPoolItem* pItem;
+    for (USHORT i = 0; i < nMapCount; ++i)
+    {
+        if ( rSet.GetItemState(AttrTypeMap[i].nAttrType, false, &pItem) == SFX_ITEM_SET )
+            pData->RemoveCharAttribs(AttrTypeMap[i].nCharType);
+    }
+}
+
 void ScEditCell::SetTextObject( const EditTextObject* pObject,
             const SfxItemPool* pFromPool )
 {
@@ -236,6 +258,76 @@ void ScEditCell::SetTextObject( const EditTextObject* pObject,
         pData = NULL;
 }
 
+ScEditDataArray::ScEditDataArray()
+{
+}
+
+ScEditDataArray::~ScEditDataArray()
+{
+}
+
+void ScEditDataArray::AddItem(SCTAB nTab, SCCOL nCol, SCROW nRow, 
+                              EditTextObject* pOldData, EditTextObject* pNewData)
+{
+    maArray.push_back(Item(nTab, nCol, nRow, pOldData, pNewData));
+}
+
+const ScEditDataArray::Item* ScEditDataArray::First()
+{
+    maIter = maArray.begin();
+    if (maIter == maArray.end())
+        return NULL;
+    return &(*maIter++);
+}
+
+const ScEditDataArray::Item* ScEditDataArray::Next()
+{
+    if (maIter == maArray.end())
+        return NULL;
+    return &(*maIter++);
+}
+
+//---------------------------------------------------------------------
+
+ScEditDataArray::Item::Item(SCTAB nTab, SCCOL nCol, SCROW nRow, 
+                            EditTextObject* pOldData, EditTextObject* pNewData) :
+    mnTab(nTab),
+    mnCol(nCol),
+    mnRow(nRow)
+{
+    mpOldData.reset(pOldData);
+    mpNewData.reset(pNewData);
+}
+
+ScEditDataArray::Item::~Item()
+{
+}
+
+const EditTextObject* ScEditDataArray::Item::GetOldData() const
+{
+    return mpOldData.get();
+}
+
+const EditTextObject* ScEditDataArray::Item::GetNewData() const
+{
+    return mpNewData.get();
+}
+
+SCTAB ScEditDataArray::Item::GetTab() const
+{
+    return mnTab;
+}
+
+SCCOL ScEditDataArray::Item::GetCol() const
+{
+    return mnCol;
+}
+
+SCROW ScEditDataArray::Item::GetRow() const
+{
+    return mnRow;
+}
+
 //---------------------------------------------------------------------
 
 void ScFormulaCell::GetEnglishFormula( String& rFormula, BOOL bCompileXML,
diff --git sc/source/core/data/column.cxx sc/source/core/data/column.cxx
index 900fc42..f41d5d1 100644
--- sc/source/core/data/column.cxx
+++ sc/source/core/data/column.cxx
@@ -370,7 +370,7 @@ ULONG ScColumn::GetNumberFormat( SCROW nRow ) const
 }
 
 
-SCsROW ScColumn::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark )
+SCsROW ScColumn::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark, ScEditDataArray* pDataArray )
 {
     SCROW nTop = 0;
     SCROW nBottom = 0;
@@ -381,7 +381,7 @@ SCsROW ScColumn::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData
 		ScMarkArrayIter aMarkIter( rMark.GetArray() + nCol );
 		while (aMarkIter.Next( nTop, nBottom ))
 		{
-			pAttrArray->ApplyCacheArea( nTop, nBottom, pCache );
+			pAttrArray->ApplyCacheArea( nTop, nBottom, pCache, pDataArray );
 			bFound = TRUE;
 		}
 	}
@@ -455,11 +455,12 @@ void ScColumn::ApplyPattern( SCROW nRow, const ScPatternAttr& rPatAttr )
 }
 
 
-void ScColumn::ApplyPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr& rPatAttr )
+void ScColumn::ApplyPatternArea( SCROW nStartRow, SCROW nEndRow, const ScPatternAttr& rPatAttr, 
+                                 ScEditDataArray* pDataArray )
 {
 	const SfxItemSet* pSet = &rPatAttr.GetItemSet();
 	SfxItemPoolCache aCache( pDocument->GetPool(), pSet );
-	pAttrArray->ApplyCacheArea( nStartRow, nEndRow, &aCache );
+	pAttrArray->ApplyCacheArea( nStartRow, nEndRow, &aCache, pDataArray );
 }
 
 
diff --git sc/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
index bb42d4b..a876419 100644
--- sc/source/core/data/documen2.cxx
+++ sc/source/core/data/documen2.cxx
@@ -187,6 +187,7 @@ ScDocument::ScDocument( ScDocumentMode	eMode,
 //		bNoSetDirty( TRUE ),
 		bNoSetDirty( FALSE ),
 		bInsertingFromOtherDoc( FALSE ),
+        bLoadingMedium(false),
 		bImportingXML( FALSE ),
         bXMLFromWrapper( FALSE ),
 		bCalcingAfterLoad( FALSE ),
diff --git sc/source/core/data/documen9.cxx sc/source/core/data/documen9.cxx
index 2e3b096..063eb49 100644
--- sc/source/core/data/documen9.cxx
+++ sc/source/core/data/documen9.cxx
@@ -884,6 +884,16 @@ void ScDocument::UpdateFontCharSet()
 	}
 }
 
+void ScDocument::SetLoadingMedium( bool bVal )
+{
+    bLoadingMedium = bVal;
+}
+
+bool ScDocument::IsLoadingMedium() const
+{
+    return bLoadingMedium;
+}
+
 void ScDocument::SetImportingXML( BOOL bVal )
 {
 	bImportingXML = bVal;
diff --git sc/source/core/data/document.cxx sc/source/core/data/document.cxx
index 7272794..0d35712 100644
--- sc/source/core/data/document.cxx
+++ sc/source/core/data/document.cxx
@@ -3066,12 +3066,13 @@ void ScDocument::ApplyPattern( SCCOL nCol, SCROW nRow, SCTAB nTab, const ScPatte
 void ScDocument::ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow,
 						SCCOL nEndCol, SCROW nEndRow,
 						const ScMarkData& rMark,
-						const ScPatternAttr& rAttr )
+						const ScPatternAttr& rAttr,
+                        ScEditDataArray* pDataArray )
 {
 	for (SCTAB i=0; i <= MAXTAB; i++)
 		if (pTab[i])
 			if (rMark.GetTableSelect(i))
-				pTab[i]->ApplyPatternArea( nStartCol, nStartRow, nEndCol, nEndRow, rAttr );
+				pTab[i]->ApplyPatternArea( nStartCol, nStartRow, nEndCol, nEndRow, rAttr, pDataArray );
 }
 
 
@@ -4160,7 +4161,7 @@ void ScDocument::ApplyFrameAreaTab( const ScRange& rRange,
 }
 
 
-void ScDocument::ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMarkData& rMark )
+void ScDocument::ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMarkData& rMark, ScEditDataArray* pDataArray )
 {
 	const SfxItemSet* pSet = &rAttr.GetItemSet();
 	BOOL bSet = FALSE;
@@ -4177,7 +4178,7 @@ void ScDocument::ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMark
 			ScRange aRange;
 			rMark.GetMarkArea( aRange );
 			ApplyPatternArea( aRange.aStart.Col(), aRange.aStart.Row(),
-							  aRange.aEnd.Col(), aRange.aEnd.Row(), rMark, rAttr );
+							  aRange.aEnd.Col(), aRange.aEnd.Row(), rMark, rAttr, pDataArray );
 		}
 		else
 		{
@@ -4185,7 +4186,7 @@ void ScDocument::ApplySelectionPattern( const ScPatternAttr& rAttr, const ScMark
             for (SCTAB nTab=0; nTab<=MAXTAB; nTab++)
                 if (pTab[nTab])
                     if (rMark.GetTableSelect(nTab))
-                        pTab[nTab]->ApplySelectionCache( &aCache, rMark );
+                        pTab[nTab]->ApplySelectionCache( &aCache, rMark, pDataArray );
 		}
 	}
 }
diff --git sc/source/core/data/table2.cxx sc/source/core/data/table2.cxx
index a274aeb..87c17c7 100644
--- sc/source/core/data/table2.cxx
+++ sc/source/core/data/table2.cxx
@@ -1657,14 +1657,14 @@ void ScTable::ApplyPattern( SCCOL nCol, SCROW nRow, const ScPatternAttr& rAttr )
 
 
 void ScTable::ApplyPatternArea( SCCOL nStartCol, SCROW nStartRow, SCCOL nEndCol, SCROW nEndRow,
-									 const ScPatternAttr& rAttr )
+									 const ScPatternAttr& rAttr, ScEditDataArray* pDataArray )
 {
 	if (ValidColRow(nStartCol, nStartRow) && ValidColRow(nEndCol, nEndRow))
 	{
 		PutInOrder(nStartCol, nEndCol);
 		PutInOrder(nStartRow, nEndRow);
 		for (SCCOL i = nStartCol; i <= nEndCol; i++)
-			aCol[i].ApplyPatternArea(nStartRow, nEndRow, rAttr);
+			aCol[i].ApplyPatternArea(nStartRow, nEndRow, rAttr, pDataArray);
 	}
 }
 
@@ -1872,10 +1872,11 @@ void ScTable::ApplyAttr( SCCOL nCol, SCROW nRow, const SfxPoolItem& rAttr )
 }
 
 
-void ScTable::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark )
+void ScTable::ApplySelectionCache( SfxItemPoolCache* pCache, const ScMarkData& rMark,
+                                   ScEditDataArray* pDataArray )
 {
 	for (SCCOL i=0; i<=MAXCOL; i++)
-		aCol[i].ApplySelectionCache( pCache, rMark );
+		aCol[i].ApplySelectionCache( pCache, rMark, pDataArray );
 }
 
 
diff --git sc/source/ui/docshell/docsh.cxx sc/source/ui/docshell/docsh.cxx
index a5f964d..f3419d8 100644
--- sc/source/ui/docshell/docsh.cxx
+++ sc/source/ui/docshell/docsh.cxx
@@ -837,6 +837,27 @@ void ScDocShell::AfterXMLLoading(sal_Bool bRet)
     aDocument.DisableIdle( FALSE );
 }
 
+namespace {
+
+class DocLoadChecker
+{
+public:
+    explicit DocLoadChecker(ScDocument* pDoc) :
+        mpDoc(pDoc)
+    {
+        mpDoc->SetLoadingMedium(true);
+    }
+
+    ~DocLoadChecker()
+    {
+        mpDoc->SetLoadingMedium(false);
+    }
+private:
+    ScDocument* mpDoc;
+};
+
+}
+
 BOOL ScDocShell::LoadXML( SfxMedium* pLoadMedium, const ::com::sun::star::uno::Reference< ::com::sun::star::embed::XStorage >& xStor )
 {
     RTL_LOGFILE_CONTEXT_AUTHOR ( aLog, "sc", "sb99857", "ScDocShell::LoadXML" );
@@ -893,7 +914,7 @@ BOOL ScDocShell::SaveXML( SfxMedium* pSaveMedium, const ::com::sun::star::uno::R
 BOOL __EXPORT ScDocShell::Load( SfxMedium& rMedium )
 {
 	RTL_LOGFILE_CONTEXT_AUTHOR ( aLog, "sc", "nn93723", "ScDocShell::Load" );
-
+    DocLoadChecker aChecker(&aDocument);
 	ScRefreshTimerProtector( aDocument.GetRefreshTimerControlAddress() );
 
 	//	only the latin script language is loaded
@@ -986,7 +1008,7 @@ void __EXPORT ScDocShell::Notify( SfxBroadcaster&, const SfxHint& rHint )
 BOOL __EXPORT ScDocShell::LoadFrom( SfxMedium& rMedium )
 {
 	RTL_LOGFILE_CONTEXT_AUTHOR ( aLog, "sc", "nn93723", "ScDocShell::LoadFrom" );
-
+    DocLoadChecker aChecker(&aDocument);
 	ScRefreshTimerProtector( aDocument.GetRefreshTimerControlAddress() );
 
 	WaitObject aWait( GetActiveDialogParent() );
@@ -1013,6 +1035,7 @@ BOOL __EXPORT ScDocShell::LoadFrom( SfxMedium& rMedium )
 BOOL __EXPORT ScDocShell::ConvertFrom( SfxMedium& rMedium )
 {
 	RTL_LOGFILE_CONTEXT_AUTHOR ( aLog, "sc", "nn93723", "ScDocShell::ConvertFrom" );
+    DocLoadChecker aChecker(&aDocument);
 
 	BOOL bRet = FALSE;				// FALSE heisst Benutzerabbruch !!
 									// bei Fehler: Fehler am Stream setzen!!
diff --git sc/source/ui/inc/undoblk.hxx sc/source/ui/inc/undoblk.hxx
index b1fdf37..06c1feb 100644
--- sc/source/ui/inc/undoblk.hxx
+++ sc/source/ui/inc/undoblk.hxx
@@ -48,6 +48,10 @@
 #include "spellparam.hxx"
 #endif
 
+#include "cell.hxx"
+
+#include <boost/shared_ptr.hpp>
+
 class ScDocShell;
 class ScDocument;
 class ScOutlineTable;
@@ -360,9 +364,11 @@ public:
 
 	virtual String	GetComment() const;
 
+    ScEditDataArray*    GetDataArray();
 private:
 	ScMarkData		aMarkData;
 	ScRange			aRange;
+    ScEditDataArray aDataArray; 
 	ScDocument*		pUndoDoc;
 	BOOL			bMulti;
 	ScPatternAttr*	pApplyPattern;
@@ -370,6 +376,7 @@ private:
 	SvxBoxInfoItem*	pLineInner;
 
 	void			DoChange( const BOOL bUndo );
+    void            ChangeEditData( const bool bUndo );
 };
 
 
diff --git sc/source/ui/inc/undocell.hxx sc/source/ui/inc/undocell.hxx
index 76bf55b..1da1bb3 100644
--- sc/source/ui/inc/undocell.hxx
+++ sc/source/ui/inc/undocell.hxx
@@ -43,6 +43,8 @@
 #include "postit.hxx"
 #endif
 
+#include <boost/shared_ptr.hpp>
+
 class ScDocShell;
 class ScBaseCell;
 class ScPatternAttr;
@@ -71,6 +73,11 @@ public:
 
 	virtual String	GetComment() const;
 
+    /** once the objects are passed to this class, their life-cycle is
+        managed by this class; the calling function must pass new'ed
+        objects to this method. */
+    void            SetEditData( EditTextObject* pOld, EditTextObject* pNew );
+
 private:
 	SCCOL			nCol;
 	SCROW			nRow;
@@ -78,9 +85,11 @@ private:
 	ScPatternAttr*	pOldPattern;
 	ScPatternAttr*	pNewPattern;
 	ScPatternAttr*	pApplyPattern;
+    ::boost::shared_ptr<EditTextObject> pOldEditData;
+    ::boost::shared_ptr<EditTextObject> pNewEditData;
 	BOOL			bIsAutomatic;
 
-	void			DoChange( const ScPatternAttr* pWhichPattern ) const;
+	void			DoChange( const ScPatternAttr* pWhichPattern, const ::boost::shared_ptr<EditTextObject>& pEditData ) const;
 };
 
 
diff --git sc/source/ui/undo/makefile.mk sc/source/ui/undo/makefile.mk
index 2b4b4af..2e83724 100644
--- sc/source/ui/undo/makefile.mk
+++ sc/source/ui/undo/makefile.mk
@@ -89,6 +89,7 @@ SLOFILES =  \
 		$(SLO)$/undotab.obj
 
 EXCEPTIONSFILES= \
+    $(SLO)$/undocell.obj \
     $(SLO)$/undostyl.obj
 
 # --- Tagets -------------------------------------------------------
diff --git sc/source/ui/undo/undoblk3.cxx sc/source/ui/undo/undoblk3.cxx
index 2afbc4a..8e35362 100644
--- sc/source/ui/undo/undoblk3.cxx
+++ sc/source/ui/undo/undoblk3.cxx
@@ -487,6 +487,12 @@ String __EXPORT ScUndoSelectionAttr::GetComment() const
 	return ScGlobal::GetRscString( pLineOuter ? STR_UNDO_SELATTRLINES : STR_UNDO_SELATTR );
 }
 
+//----------------------------------------------------------------------------
+
+ScEditDataArray* ScUndoSelectionAttr::GetDataArray()
+{
+    return &aDataArray;
+}
 
 //----------------------------------------------------------------------------
 
@@ -509,6 +515,8 @@ void ScUndoSelectionAttr::DoChange( const BOOL bUndo )
 	USHORT nExtFlags = 0;
 	pDocShell->UpdatePaintExt( nExtFlags, aEffRange );
 
+    ChangeEditData(bUndo);
+
 	if (bUndo)	// nur bei Undo
 	{
 		ScRange aCopyRange = aRange;
@@ -533,6 +541,24 @@ void ScUndoSelectionAttr::DoChange( const BOOL bUndo )
 	ShowTable( aRange );
 }
 
+void ScUndoSelectionAttr::ChangeEditData( const bool bUndo )
+{
+    ScDocument* pDoc = pDocShell->GetDocument();
+    for (const ScEditDataArray::Item* pItem = aDataArray.First(); pItem; pItem = aDataArray.Next())
+    {
+        ScBaseCell* pCell;
+        pDoc->GetCell(pItem->GetCol(), pItem->GetRow(), pItem->GetTab(), pCell);
+        if (!pCell || pCell->GetCellType() != CELLTYPE_EDIT)
+            continue;
+
+        ScEditCell* pEditCell = static_cast<ScEditCell*>(pCell);
+        if (bUndo)
+            pEditCell->SetData(pItem->GetOldData(), NULL);
+        else
+            pEditCell->SetData(pItem->GetNewData(), NULL);
+    }
+}
+
 
 //----------------------------------------------------------------------------
 
diff --git sc/source/ui/undo/undocell.cxx sc/source/ui/undo/undocell.cxx
index 78de4df..f8fa2e2 100644
--- sc/source/ui/undo/undocell.cxx
+++ sc/source/ui/undo/undocell.cxx
@@ -66,6 +66,8 @@
 #include "chgtrack.hxx"
 #include "sc.hrc"
 
+using ::boost::shared_ptr;
+
 // STATIC DATA -----------------------------------------------------------
 
 TYPEINIT1(ScUndoCursorAttr, ScSimpleUndo);
@@ -94,6 +96,8 @@ ScUndoCursorAttr::ScUndoCursorAttr( ScDocShell* pNewDocShell,
 	nCol( nNewCol ),
 	nRow( nNewRow ),
 	nTab( nNewTab ),
+    pOldEditData( static_cast<EditTextObject*>(NULL) ),
+    pNewEditData( static_cast<EditTextObject*>(NULL) ),
 	bIsAutomatic( bAutomatic )
 {
 	ScDocumentPool* pPool = pDocShell->GetDocument()->GetPool();
@@ -118,9 +122,21 @@ String __EXPORT ScUndoCursorAttr::GetComment() const
 	return ScGlobal::GetRscString( nId );
 }
 
-void ScUndoCursorAttr::DoChange( const ScPatternAttr* pWhichPattern ) const
+void ScUndoCursorAttr::SetEditData( EditTextObject* pOld, EditTextObject* pNew )
 {
-	pDocShell->GetDocument()->SetPattern( nCol, nRow, nTab, *pWhichPattern, TRUE );
+    pOldEditData.reset(pOld);
+    pNewEditData.reset(pNew);
+}
+
+void ScUndoCursorAttr::DoChange( const ScPatternAttr* pWhichPattern, const shared_ptr<EditTextObject>& pEditData ) const
+{
+    ScDocument* pDoc = pDocShell->GetDocument();
+	pDoc->SetPattern( nCol, nRow, nTab, *pWhichPattern, TRUE );
+
+    ScBaseCell* pCell;
+    pDoc->GetCell(nCol, nRow, nTab, pCell);
+    if (pCell && pCell->GetCellType() == CELLTYPE_EDIT && pEditData.get())
+        static_cast<ScEditCell*>(pCell)->SetData(pEditData.get(), NULL);
 
 	ScTabViewShell* pViewShell = ScTabViewShell::GetActiveViewShell();
 	if (pViewShell)
@@ -146,7 +162,7 @@ void ScUndoCursorAttr::DoChange( const ScPatternAttr* pWhichPattern ) const
 void __EXPORT ScUndoCursorAttr::Undo()
 {
 	BeginUndo();
-	DoChange(pOldPattern);
+	DoChange(pOldPattern, pOldEditData);
 
 	if ( bIsAutomatic )
 	{
@@ -164,7 +180,7 @@ void __EXPORT ScUndoCursorAttr::Undo()
 void __EXPORT ScUndoCursorAttr::Redo()
 {
 	BeginRedo();
-	DoChange(pNewPattern);
+	DoChange(pNewPattern, pNewEditData);
 	EndRedo();
 }
 
diff --git sc/source/ui/view/viewfunc.cxx sc/source/ui/view/viewfunc.cxx
index 10394d8..0c882c6 100644
--- sc/source/ui/view/viewfunc.cxx
+++ sc/source/ui/view/viewfunc.cxx
@@ -1294,6 +1294,8 @@ void ScViewFunc::ApplySelectionPattern( const ScPatternAttr& rAttr,
 		SCROW nEndRow = aMarkRange.aEnd.Row();
 		SCTAB nEndTab = aMarkRange.aEnd.Tab();
 
+        ScUndoSelectionAttr* pUndoAttr = NULL;
+        ScEditDataArray* pEditDataArray = NULL;
 		if (bRecord)
 		{
 			ScRange aCopyRange = aMarkRange;
@@ -1310,15 +1312,14 @@ void ScViewFunc::ApplySelectionPattern( const ScPatternAttr& rAttr,
 
 			aFuncMark.MarkToMulti();
 
-			pDocSh->GetUndoManager()->AddUndoAction(
-				new ScUndoSelectionAttr(
-							pDocSh, aFuncMark,
-							nStartCol, nStartRow, nStartTab,
-							nEndCol, nEndRow, nEndTab,
-							pUndoDoc, bMulti, &rAttr ) );
+            pUndoAttr = new ScUndoSelectionAttr(
+                pDocSh, aFuncMark, nStartCol, nStartRow, nStartTab,
+                nEndCol, nEndRow, nEndTab, pUndoDoc, bMulti, &rAttr );
+			pDocSh->GetUndoManager()->AddUndoAction(pUndoAttr);
+            pEditDataArray = pUndoAttr->GetDataArray();
 		}
 
-		pDoc->ApplySelectionPattern( rAttr, aFuncMark );
+		pDoc->ApplySelectionPattern( rAttr, aFuncMark, pEditDataArray );
 
 		pDocSh->PostPaint( nStartCol, nStartRow, nStartTab,
 						   nEndCol,   nEndRow,   nEndTab,
@@ -1332,6 +1333,19 @@ void ScViewFunc::ApplySelectionPattern( const ScPatternAttr& rAttr,
 		SCCOL nCol = pViewData->GetCurX();
 		SCROW nRow = pViewData->GetCurY();
 		SCTAB nTab = pViewData->GetTabNo();
+
+        ScBaseCell* pCell;
+        pDoc->GetCell(nCol, nRow, nTab, pCell);
+        EditTextObject* pOldEditData = NULL;
+        EditTextObject* pNewEditData = NULL;
+        if (pCell && pCell->GetCellType() == CELLTYPE_EDIT)
+        {
+            ScEditCell* pEditCell = static_cast<ScEditCell*>(pCell);
+            pOldEditData = pEditCell->GetData()->Clone();
+            pEditCell->RemoveCharAttribs(rAttr);
+            pNewEditData = pEditCell->GetData()->Clone();
+        }
+
 		ScPatternAttr* pOldPat = new ScPatternAttr(*pDoc->GetPattern( nCol, nRow, nTab ));
 
 		if (!bCursorOnly)
@@ -1341,11 +1355,10 @@ void ScViewFunc::ApplySelectionPattern( const ScPatternAttr& rAttr,
 
 		if (bRecord)
 		{
-			pDocSh->GetUndoManager()->AddUndoAction(
-						new ScUndoCursorAttr( pDocSh,
-											  nCol, nRow, nTab,
-											  pOldPat, pNewPat, &rAttr,
-											  FALSE ) );	// FALSE = nicht automatisch
+            ScUndoCursorAttr* pUndo = new ScUndoCursorAttr( 
+                pDocSh, nCol, nRow, nTab, pOldPat, pNewPat, &rAttr, false );
+            pUndo->SetEditData(pOldEditData, pNewEditData);
+			pDocSh->GetUndoManager()->AddUndoAction(pUndo);
 		}
 		delete pOldPat;		// wird im Undo kopiert (Pool)
 
