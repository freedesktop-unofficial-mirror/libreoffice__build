--- sw/source/ui/inc/pggrid.hxx.orig	2006-12-02 01:57:43.000000000 +0800
+++ sw/source/ui/inc/pggrid.hxx	2007-02-10 14:49:31.000000000 +0800
@@ -60,6 +60,7 @@ class SwTextGridPage: public SfxTabPage
     RadioButton     aNoGridRB;
     RadioButton     aLinesGridRB;
     RadioButton     aCharsGridRB;
+    CheckBox        aSnapToCharsCB;
 
     SwPageGridExample   aExampleWN;
 
@@ -74,10 +75,14 @@ class SwTextGridPage: public SfxTabPage
     FixedText       aCharsPerLineFT;
     NumericField    aCharsPerLineNF;
 
+    FixedText       aCharWidthFT;
+    MetricField     aCharWidthMF;    
+    
     FixedText       aRubySizeFT;
     MetricField     aRubySizeMF;
 
     CheckBox        aRubyBelowCB;
+    CheckBox        aSquaredCB;
 
     FixedLine       aDisplayFL;
 
@@ -86,7 +91,7 @@ class SwTextGridPage: public SfxTabPage
     FixedText       aColorFT;
     ColorListBox    aColorLB;
 
-    Window*         aControls[16];
+    Window*         aControls[19];
 
     sal_Int32       m_nRubyUserValue;
     sal_Bool        m_bRubyUserValue;
@@ -100,9 +105,11 @@ class SwTextGridPage: public SfxTabPage
     void PutGridItem(SfxItemSet& rSet);
 
     DECL_LINK(GridTypeHdl, RadioButton*);
-    DECL_LINK(CharSizeChangedHdl, SpinField*);
+    DECL_LINK(CharorLineChangedHdl, SpinField*);
+    DECL_LINK(TextSizeChangedHdl, SpinField*);
     DECL_LINK(GridModifyHdl, void*);
     DECL_LINK(DisplayGridHdl, CheckBox*);
+    DECL_LINK(SquaredModeHdl, CheckBox*);
 public:
 	static SfxTabPage *Create(Window *pParent, const SfxItemSet &rSet);
     static USHORT* GetRanges();
--- sw/source/ui/misc/pggrid.cxx.orig	2006-12-02 01:57:44.000000000 +0800
+++ sw/source/ui/misc/pggrid.cxx	2007-02-10 14:54:18.000000000 +0800
@@ -72,6 +72,9 @@
 #ifndef _SVX_LRSPITEM_HXX
 #include <svx/lrspitem.hxx>
 #endif
+#ifndef _SVX_ULSPITEM_HXX
+#include <svx/ulspitem.hxx>
+#endif
 #ifndef _SVX_BOXITEM_HXX
 #include <svx/boxitem.hxx>
 #endif
@@ -95,6 +98,7 @@ SwTextGridPage::SwTextGridPage(Window *p
     aNoGridRB               (this, ResId(RB_NOGRID          )),
     aLinesGridRB            (this, ResId(RB_LINESGRID       )),
     aCharsGridRB            (this, ResId(RB_CHARSGRID       )),
+    aSnapToCharsCB          (this, ResId(CB_SNAPTOCHARS     )),
     aExampleWN              (this, ResId(WN_EXAMPLE         )),
     aLayoutFL               (this, ResId(FL_LAYOUT          )),
     aLinesPerPageFT         (this, ResId(FT_LINESPERPAGE    )),
@@ -103,9 +107,12 @@ SwTextGridPage::SwTextGridPage(Window *p
     aTextSizeMF             (this, ResId(MF_TEXTSIZE        )),
     aCharsPerLineFT         (this, ResId(FT_CHARSPERLINE    )),
     aCharsPerLineNF         (this, ResId(NF_CHARSPERLINE    )),
+    aCharWidthFT            (this, ResId(FT_CHARWIDTH       )),
+    aCharWidthMF            (this, ResId(MF_CHARWIDTH       )),
     aRubySizeFT             (this, ResId(FT_RUBYSIZE        )),
     aRubySizeMF             (this, ResId(MF_RUBYSIZE        )),
     aRubyBelowCB            (this, ResId(CB_RUBYBELOW       )),
+    aSquaredCB              (this, ResId(CB_SQUARED         )),
     aDisplayFL              (this, ResId(FL_DISPLAY         )),
     aDisplayCB              (this, ResId(CB_DISPLAY         )),
     aPrintCB                (this, ResId(CB_PRINT           )),
@@ -125,24 +132,38 @@ SwTextGridPage::SwTextGridPage(Window *p
     aControls[4] =&aTextSizeMF;
     aControls[5] =&aCharsPerLineFT;
     aControls[6] =&aCharsPerLineNF;
-    aControls[7] =&aRubySizeFT;
-    aControls[8] =&aRubySizeMF;
-    aControls[9] =&aRubyBelowCB;
-    aControls[10] =&aDisplayFL;
-    aControls[11] =&aDisplayCB;
-    aControls[12] =&aPrintCB;
-    aControls[13] =&aColorFT;
-    aControls[14] =&aColorLB;
-    aControls[15] =0;
+    aControls[7] =&aCharWidthFT;
+    aControls[8] =&aCharWidthMF;
+    aControls[9] =&aRubySizeFT;
+    aControls[10] =&aRubySizeMF;    
+    aControls[11] =&aRubyBelowCB;
+    aControls[12] =&aSquaredCB;
+    aControls[13] =&aDisplayFL;
+    aControls[14] =&aDisplayCB;
+    aControls[15] =&aPrintCB;
+    aControls[16] =&aColorFT;
+    aControls[17] =&aColorLB;
+    aControls[18] =0;
 
-    Link aLink = LINK(this, SwTextGridPage, CharSizeChangedHdl);
+    Link aLink = LINK(this, SwTextGridPage, CharorLineChangedHdl);
     aCharsPerLineNF.SetUpHdl(aLink);
-    aTextSizeMF.SetUpHdl(aLink);
     aCharsPerLineNF.SetDownHdl(aLink);
-    aTextSizeMF.SetDownHdl(aLink);
     aCharsPerLineNF.SetLoseFocusHdl(aLink);
-    aTextSizeMF.SetLoseFocusHdl(aLink);
-
+    aLinesPerPageNF.SetUpHdl(aLink);
+    aLinesPerPageNF.SetDownHdl(aLink);
+    aLinesPerPageNF.SetLoseFocusHdl(aLink);
+    
+    Link aSizeLink = LINK(this, SwTextGridPage, TextSizeChangedHdl);
+    aTextSizeMF.SetUpHdl(aSizeLink);
+    aTextSizeMF.SetDownHdl(aSizeLink);
+    aTextSizeMF.SetLoseFocusHdl(aSizeLink);
+    aRubySizeMF.SetUpHdl(aSizeLink);
+    aRubySizeMF.SetDownHdl(aSizeLink);
+    aRubySizeMF.SetLoseFocusHdl(aSizeLink); 
+    aCharWidthMF.SetUpHdl(aSizeLink);
+    aCharWidthMF.SetDownHdl(aSizeLink);
+    aCharWidthMF.SetLoseFocusHdl(aSizeLink);
+    
     Link aGridTypeHdl = LINK(this, SwTextGridPage, GridTypeHdl);
     aNoGridRB   .SetClickHdl(aGridTypeHdl);
     aLinesGridRB.SetClickHdl(aGridTypeHdl);
@@ -151,16 +172,10 @@ SwTextGridPage::SwTextGridPage(Window *p
     Link aModifyLk = LINK(this, SwTextGridPage, GridModifyHdl);
     aColorLB.SetSelectHdl(aModifyLk);
     aPrintCB.SetClickHdl(aModifyLk);
-    aRubyBelowCB.SetClickHdl(aModifyLk);
-
-    aLinesPerPageNF.SetUpHdl(aModifyLk);
-    aRubySizeMF.SetUpHdl(aModifyLk);
-    aLinesPerPageNF.SetDownHdl(aModifyLk);
-    aRubySizeMF.SetDownHdl(aModifyLk);
-    aLinesPerPageNF.SetLoseFocusHdl(aModifyLk);
-    aRubySizeMF.SetLoseFocusHdl(aModifyLk);
+    aRubyBelowCB.SetClickHdl(aModifyLk);   
 
     aDisplayCB.SetClickHdl(LINK(this, SwTextGridPage, DisplayGridHdl));
+    aSquaredCB.SetClickHdl(LINK(this, SwTextGridPage, SquaredModeHdl));
 
     XColorTable* pColorTbl = XColorTable::GetStdColorTable();
     aColorLB.InsertAutomaticEntry();
@@ -199,8 +214,11 @@ BOOL    SwTextGridPage::FillItemSet(SfxI
         aTextSizeMF.GetSavedValue().ToInt32() != aTextSizeMF.GetValue()||
         aCharsPerLineNF.GetSavedValue().ToInt32()
            != aCharsPerLineNF.GetValue()||
+        aSnapToCharsCB.GetSavedValue() != aSnapToCharsCB.IsChecked() ||
         aRubySizeMF.GetSavedValue().ToInt32() != aRubySizeMF.GetValue()||
+        aCharWidthMF.GetSavedValue().ToInt32() != aCharWidthMF.GetValue()||
         aRubyBelowCB.GetSavedValue() != aRubyBelowCB.IsChecked()||
+        aSquaredCB.GetSavedValue() != aSquaredCB.IsChecked()||
         aDisplayCB.GetSavedValue() != aDisplayCB.IsChecked()||
         aPrintCB.GetSavedValue() != aPrintCB.IsChecked()||
         aColorLB.GetSavedValue() != aColorLB.GetSelectEntryPos())
@@ -227,12 +245,15 @@ void    SwTextGridPage::Reset(const SfxI
             default:                pButton = &aCharsGridRB;
         }
         pButton->Check();
+        aSquaredCB.Check(rGridItem.IsSquaredMode());
         GridTypeHdl(pButton);
+        aSnapToCharsCB.Check(rGridItem.IsSnapToChars());
         aLinesPerPageNF.SetValue(rGridItem.GetLines());
         m_nRubyUserValue = rGridItem.GetBaseHeight();
         m_bRubyUserValue = sal_True;
         aTextSizeMF.SetValue(aTextSizeMF.Normalize(m_nRubyUserValue), FUNIT_TWIP);
         aRubySizeMF.SetValue(aRubySizeMF.Normalize(rGridItem.GetRubyHeight()), FUNIT_TWIP);
+        aCharWidthMF.SetValue(aRubySizeMF.Normalize(rGridItem.GetBaseWidth()), FUNIT_TWIP);
         aRubyBelowCB.Check(rGridItem.IsRubyTextBelow());
         aDisplayCB.Check(rGridItem.IsDisplayGrid());
         aPrintCB.Check(rGridItem.IsPrintGrid());
@@ -242,11 +263,13 @@ void    SwTextGridPage::Reset(const SfxI
 
     aNoGridRB.SaveValue();
     aLinesGridRB.SaveValue();
+    aSnapToCharsCB.SaveValue();
     aLinesPerPageNF.SaveValue();
     aTextSizeMF.SaveValue();
-    aCharsPerLineNF.SaveValue();
     aRubySizeMF.SaveValue();
+    aCharWidthMF.SaveValue();
     aRubyBelowCB.SaveValue();
+    aSquaredCB.SaveValue();
     aDisplayCB.SaveValue();
     aPrintCB.SaveValue();
     aColorLB.SaveValue();
@@ -278,12 +301,15 @@ void SwTextGridPage::PutGridItem(SfxItem
         SwTextGridItem aGridItem;
         aGridItem.SetGridType(aNoGridRB.IsChecked() ? GRID_NONE :
             aLinesGridRB.IsChecked() ? GRID_LINES_ONLY : GRID_LINES_CHARS );
+        aGridItem.SetSnapToChars(aSnapToCharsCB.IsChecked());
         aGridItem.SetLines(aLinesPerPageNF.GetValue());
         aGridItem.SetBaseHeight(
             m_bRubyUserValue ? m_nRubyUserValue :
                 aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP)));
         aGridItem.SetRubyHeight(aRubySizeMF.Denormalize(aRubySizeMF.GetValue(FUNIT_TWIP)));
+        aGridItem.SetBaseWidth(aCharWidthMF.Denormalize(aCharWidthMF.GetValue(FUNIT_TWIP)));
         aGridItem.SetRubyTextBelow(aRubyBelowCB.IsChecked());
+        aGridItem.SetSquaredMode(aSquaredCB.IsChecked());
         aGridItem.SetDisplayGrid(aDisplayCB.IsChecked());
         aGridItem.SetPrintGrid(aPrintCB.IsChecked());
         aGridItem.SetColor(aColorLB.GetSelectEntryColor());
@@ -295,7 +321,7 @@ void SwTextGridPage::PutGridItem(SfxItem
 void SwTextGridPage::UpdatePageSize(const SfxItemSet& rSet)
 {
     if( SFX_ITEM_UNKNOWN !=  rSet.GetItemState( RES_FRAMEDIR, TRUE ))
-	{
+    {
         const SvxFrameDirectionItem& rDirItem =
                     (const SvxFrameDirectionItem&)rSet.Get(RES_FRAMEDIR);
         m_bVertical = rDirItem.GetValue() == FRMDIR_VERT_TOP_RIGHT||
@@ -308,13 +334,16 @@ void SwTextGridPage::UpdatePageSize(cons
                                             SID_ATTR_PAGE_SIZE);
         const SvxLRSpaceItem& rLRSpace = (const SvxLRSpaceItem&)rSet.Get(
                                                             RES_LR_SPACE );
+        const SvxULSpaceItem& rULSpace = (const SvxULSpaceItem&)rSet.Get(
+                                                            RES_UL_SPACE );                                                    
         const SvxBoxItem& rBox = (const SvxBoxItem&) rSet.Get(RES_BOX);
-        sal_Int32 nDistance = rLRSpace.GetLeft() + rLRSpace.GetRight();
+        sal_Int32 nDistanceLR = rLRSpace.GetLeft() + rLRSpace.GetRight();
+        sal_Int32 nDistanceUL = rULSpace.GetUpper() + rULSpace.GetLower();
 
-        sal_Int32 nValue1 = rSize.GetSize().Height() - nDistance -
+        sal_Int32 nValue1 = rSize.GetSize().Height() - nDistanceUL -
                 rBox.GetDistance(BOX_LINE_TOP) -
                                     rBox.GetDistance(BOX_LINE_BOTTOM);
-        sal_Int32 nValue2 = rSize.GetSize().Width() - nDistance -
+        sal_Int32 nValue2 = rSize.GetSize().Width() - nDistanceLR -
                 rBox.GetDistance(BOX_LINE_LEFT) -
                                     rBox.GetDistance(BOX_LINE_RIGHT);
         if(m_bVertical)
@@ -331,7 +360,20 @@ void SwTextGridPage::UpdatePageSize(cons
         sal_Int32 nTextSize = m_bRubyUserValue ?
                     m_nRubyUserValue :
                         aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP));
-        aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextSize);
+        
+        if ( aSquaredCB.IsChecked() )
+        {
+            aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextSize);
+        }
+        else
+        {
+            sal_Int32 nTextWidth = aCharWidthMF.Denormalize(aCharWidthMF.GetValue(FUNIT_TWIP));
+            aLinesPerPageNF.SetValue(m_aPageSize.Height() / nTextSize);
+            if (nTextWidth)
+                aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextWidth); 
+            else
+                aCharsPerLineNF.SetValue( 45 );
+        }
     }
 }
 /* -----------------------------06.02.2002 15:24------------------------------
@@ -347,25 +389,93 @@ USHORT* SwTextGridPage::GetRanges()
 /* -----------------------------08.02.2002 10:56------------------------------
 
  ---------------------------------------------------------------------------*/
-IMPL_LINK(SwTextGridPage, CharSizeChangedHdl, SpinField*, pField)
+IMPL_LINK(SwTextGridPage, CharorLineChangedHdl, SpinField*, pField)
 {
-    if(&aCharsPerLineNF == pField)
+    //if in squared mode
+    if (aSquaredCB.IsChecked())
     {
-        long nWidth = m_aPageSize.Width() / aCharsPerLineNF.GetValue();
-        aTextSizeMF.SetValue(aTextSizeMF.Normalize(nWidth), FUNIT_TWIP);
-        //prevent rounding errors in the MetricField by saving the used value
-        m_nRubyUserValue = nWidth;
-        m_bRubyUserValue = sal_True;
+        if(&aCharsPerLineNF == pField)
+        {
+            long nWidth = m_aPageSize.Width() / aCharsPerLineNF.GetValue();
+            aTextSizeMF.SetValue(aTextSizeMF.Normalize(nWidth), FUNIT_TWIP);
+            //prevent rounding errors in the MetricField by saving the used value
+            m_nRubyUserValue = nWidth;
+            m_bRubyUserValue = sal_True;
+            
+            //rubySize or textSize changed
+            {
+                sal_Int32 nMaxLines = m_aPageSize.Height() /
+                    (   aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP)) +
+                        aRubySizeMF.Denormalize(aRubySizeMF.GetValue(FUNIT_TWIP)));
+                aLinesPerPageNF.SetMax(nMaxLines);
+            }
+        }
+    }
+    else//in normal mode
+    {
+        if(&aLinesPerPageNF == pField)
+        {
+            long nHeight = m_aPageSize.Height() / aLinesPerPageNF.GetValue();
+            aTextSizeMF.SetValue(aTextSizeMF.Normalize(nHeight), FUNIT_TWIP);
+            aRubySizeMF.SetValue(0, FUNIT_TWIP);
+            
+            m_nRubyUserValue = nHeight;
+            m_bRubyUserValue = sal_True;
+        }
+        else if (&aCharsPerLineNF == pField)
+        {
+            long nWidth = m_aPageSize.Width() / aCharsPerLineNF.GetValue();
+            aCharWidthMF.SetValue(aCharWidthMF.Normalize(nWidth), FUNIT_TWIP);
+        }
+    }
+    GridModifyHdl(0);
+    return 0;
+}
+
+/* -----------------------------04.09.2006 15:46------------------------------
+
+ ---------------------------------------------------------------------------*/
+IMPL_LINK(SwTextGridPage, TextSizeChangedHdl, SpinField*, pField)
+{
+    //if in squared mode
+    if (aSquaredCB.IsChecked())
+    {
+        if (&aTextSizeMF == pField)
+        {
+            sal_Int32 nTextSize = aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP));
+            aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextSize);
+            m_bRubyUserValue = sal_False;
+        }
+        //rubySize or textSize changed
+        {
+            sal_Int32 nMaxLines = m_aPageSize.Height() /
+                (   aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP)) +
+                    aRubySizeMF.Denormalize(aRubySizeMF.GetValue(FUNIT_TWIP)));
+            aLinesPerPageNF.SetMax(nMaxLines);
+        }
     }
     else
     {
-        sal_Int32 nTextSize = aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP));
-        aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextSize);
-        m_bRubyUserValue = sal_False;
+        if (&aTextSizeMF == pField)
+        {
+            sal_Int32 nTextSize = aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP));
+            aLinesPerPageNF.SetValue(m_aPageSize.Height() / nTextSize);
+            m_bRubyUserValue = sal_False;
+        }
+        else if (&aCharWidthMF == pField)
+        {
+            sal_Int32 nTextWidth = aCharWidthMF.Denormalize(aCharWidthMF.GetValue(FUNIT_TWIP));
+            if (nTextWidth)
+                aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextWidth); 
+            else
+                aCharsPerLineNF.SetValue( 45 );
+        }
+        //rubySize is disabled
     }
     GridModifyHdl(0);
     return 0;
 }
+
 /* -----------------------------22.04.2002 14:53------------------------------
 
  ---------------------------------------------------------------------------*/
@@ -379,6 +489,31 @@ IMPL_LINK(SwTextGridPage, GridTypeHdl, R
     if(bEnable)
         DisplayGridHdl(&aDisplayCB);
 
+    //disable chars setting and ruby size for lines only
+    sal_Bool bCharsEnable = &aCharsGridRB == pButton;
+    aSnapToCharsCB.Enable(bCharsEnable);
+    aCharsPerLineNF.Enable(bEnable && (bCharsEnable || aSquaredCB.IsChecked()));
+    aCharsPerLineFT.Enable(bEnable && (bCharsEnable || aSquaredCB.IsChecked()));
+    aCharWidthMF.Enable(bEnable && (bCharsEnable || aSquaredCB.IsChecked()));
+    aCharWidthFT.Enable(bEnable && (bCharsEnable || aSquaredCB.IsChecked()));
+    aRubySizeMF.Enable(bEnable && (bCharsEnable || aSquaredCB.IsChecked()));
+    aRubySizeFT.Enable(bEnable && (bCharsEnable || aSquaredCB.IsChecked()));
+    aRubyBelowCB.Enable(aSquaredCB.IsChecked());
+    if (aSquaredCB.IsChecked())
+    {
+        aRubySizeMF.Show();
+        aRubySizeFT.Show();
+        aCharWidthMF.Hide();
+        aCharWidthFT.Hide();
+    }
+    else
+    {
+        aRubySizeMF.Hide();
+        aRubySizeFT.Hide();
+        aCharWidthMF.Show();
+        aCharWidthFT.Show();
+    }
+    
     GridModifyHdl(0);
     return 0;
 }
@@ -390,16 +525,81 @@ IMPL_LINK(SwTextGridPage, DisplayGridHdl
     aPrintCB.Enable(aDisplayCB.IsChecked());
     return 0;
 }
+
+/* -----------------------------31.08.2006 15:46------------------------------
+
+ ---------------------------------------------------------------------------*/
+IMPL_LINK(SwTextGridPage, SquaredModeHdl, CheckBox*, EMPTYARG)
+{
+    //change control status
+    //if lines only
+    if (aLinesGridRB.IsChecked())
+    {
+        aCharsPerLineNF.Enable(aSquaredCB.IsChecked());
+        aCharsPerLineFT.Enable(aSquaredCB.IsChecked());
+        aCharWidthMF.Enable(aSquaredCB.IsChecked());
+        aCharWidthFT.Enable(aSquaredCB.IsChecked());
+    }
+    else if (aCharsGridRB.IsChecked())
+    {
+        aCharsPerLineNF.Enable(sal_True);
+        aCharsPerLineFT.Enable(sal_True);
+        aCharWidthMF.Enable(sal_True);
+        aCharWidthFT.Enable(sal_True);
+    }
+    //if from clear to checked
+    if (aSquaredCB.IsChecked())
+    {
+        sal_Int32 nTextSize = aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP));
+        sal_Int32 nRubySize = nTextSize / 3;
+        sal_Int32 nBaseSize = nTextSize - nRubySize;
+        aRubySizeMF.SetValue(aRubySizeMF.Normalize(nRubySize), FUNIT_TWIP);
+        aTextSizeMF.SetValue(aTextSizeMF.Normalize(nBaseSize), FUNIT_TWIP);
+        aCharsPerLineNF.SetValue(m_aPageSize.Width() / nBaseSize);
+        aLinesPerPageNF.SetMax(m_aPageSize.Height() / nTextSize);
+        
+        m_bRubyUserValue = sal_False;
+        
+        aRubySizeMF.Show();
+        aRubySizeFT.Show();
+        aCharWidthMF.Hide();
+        aCharWidthFT.Hide();
+    }
+    else//from checked to clear
+    {
+        sal_Int32 nBaseSize = aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP));
+        sal_Int32 nRubySize = aRubySizeMF.Denormalize(aRubySizeMF.GetValue(FUNIT_TWIP));
+        sal_Int32 nTextSize = nBaseSize + nRubySize;
+        aRubySizeMF.SetValue(0, FUNIT_TWIP);
+        aTextSizeMF.SetValue(aTextSizeMF.Normalize(nTextSize), FUNIT_TWIP);
+        aLinesPerPageNF.SetValue(m_aPageSize.Height() / nTextSize);
+        aLinesPerPageNF.SetMax( 154 );
+        sal_Int32 nTextWidth = aCharWidthMF.Denormalize(aCharWidthMF.GetValue(FUNIT_TWIP));
+        if (nTextWidth)
+                aCharsPerLineNF.SetValue(m_aPageSize.Width() / nTextWidth); 
+            else
+                aCharsPerLineNF.SetValue( 45 );
+        
+        m_bRubyUserValue = sal_False;
+        
+        aRubySizeMF.Hide();
+        aRubySizeFT.Hide();
+        aCharWidthMF.Show();
+        aCharWidthFT.Show();
+    }
+    aRubySizeMF.Enable(aSquaredCB.IsChecked());
+    aRubySizeFT.Enable(aSquaredCB.IsChecked());
+    aRubyBelowCB.Enable(aSquaredCB.IsChecked());
+    GridModifyHdl(0);
+    return 0;
+}
+
+
 /* -----------------------------08.02.2002 11:54------------------------------
 
  ---------------------------------------------------------------------------*/
 IMPL_LINK(SwTextGridPage, GridModifyHdl, void*, EMPTYARG)
 {
-    //set maximum for Lines per page
-    sal_Int32 nMaxLines = m_aPageSize.Height() /
-                (   aTextSizeMF.Denormalize(aTextSizeMF.GetValue(FUNIT_TWIP)) +
-                    aRubySizeMF.Denormalize(aRubySizeMF.GetValue(FUNIT_TWIP)));
-    aLinesPerPageNF.SetMax(nMaxLines);
     const SfxItemSet& rOldSet = GetItemSet();
     SfxItemSet aSet(rOldSet);
     const SfxItemSet* pExSet = GetTabDialog()->GetExampleSet();
--- sw/source/ui/misc/pggrid.hrc.orig	2006-12-02 01:57:44.000000000 +0800
+++ sw/source/ui/misc/pggrid.hrc	2007-02-10 14:55:13.000000000 +0800
@@ -55,3 +55,7 @@
 #define CB_PRINT            20
 #define FT_COLOR            21
 #define LB_COLOR            22
+#define CB_SNAPTOCHARS      23
+#define FT_CHARWIDTH        24
+#define MF_CHARWIDTH        25
+#define CB_SQUARED          26
--- sw/source/ui/misc/pggrid.src.orig	2006-12-02 01:57:44.000000000 +0800
+++ sw/source/ui/misc/pggrid.src	2007-02-10 14:56:06.000000000 +0800
@@ -69,6 +69,12 @@ TabPage TP_TEXTGRID_PAGE
         Text [ de ] = "Raster (Linien und Zeichen)" ;
         Text [ en-US ] = "Grid (lines and characters)" ;
 	};
+    CheckBox        CB_SNAPTOCHARS
+    {
+        Pos = MAP_APPFONT ( 14 , 53 ) ;
+        Size = MAP_APPFONT ( 158 , 10 ) ;
+        Text [ en-US ] = "~Snap to characters" ;
+    };
     Window          WN_EXAMPLE
     {
         Pos = MAP_APPFONT ( 176 , 6 ) ;
@@ -76,7 +82,7 @@ TabPage TP_TEXTGRID_PAGE
     };
     FixedLine       FL_LAYOUT
     {
-        Pos = MAP_APPFONT ( 6 , 56 ) ;
+        Pos = MAP_APPFONT ( 6 , 69 ) ;
         Size = MAP_APPFONT ( 248 , 8 ) ;
         Text [ de ] = "Rasterlayout" ;
         Text [ en-US ] = "Grid layout" ;
@@ -84,14 +90,14 @@ TabPage TP_TEXTGRID_PAGE
 	};
     FixedText       FT_LINESPERPAGE
     {
-        Pos = MAP_APPFONT ( 12 , 69 ) ;
+        Pos = MAP_APPFONT ( 12 , 82 ) ;
         Size = MAP_APPFONT ( 59 , 8 ) ;
         Text [ de ] = "Zeilen pro Seite" ;
         Text [ en-US ] = "Lines per page" ;
 	};
     NumericField    NF_LINESPERPAGE
     {
-        Pos = MAP_APPFONT ( 74 , 67 ) ;
+        Pos = MAP_APPFONT ( 74 , 80 ) ;
         Size = MAP_APPFONT ( 25 , 12 ) ;
         Border = TRUE ;
         TabStop = TRUE ;
@@ -107,14 +113,14 @@ TabPage TP_TEXTGRID_PAGE
     };
     FixedText       FT_TEXTSIZE
     {
-        Pos = MAP_APPFONT ( 133 , 69 ) ;
+        Pos = MAP_APPFONT ( 133 , 82 ) ;
         Size = MAP_APPFONT ( 80 , 8 ) ;
         Text [ de ] = "Max. Basistextgröße" ;
         Text [ en-US ] = "Max. base text size" ;
 	};
     MetricField     MF_TEXTSIZE
     {
-        Pos = MAP_APPFONT ( 216 , 67 ) ;
+        Pos = MAP_APPFONT ( 216 , 80 ) ;
         Size = MAP_APPFONT ( 35 , 12 ) ;
         Border = TRUE ;
         TabStop = TRUE ;
@@ -131,14 +137,14 @@ TabPage TP_TEXTGRID_PAGE
     };
     FixedText       FT_CHARSPERLINE
     {
-        Pos = MAP_APPFONT ( 12 , 85 ) ;
+        Pos = MAP_APPFONT ( 12 , 98 ) ;
         Size = MAP_APPFONT ( 59 , 8 ) ;
         Text [ de ] = "Zeichen pro Zeile" ;
         Text [ en-US ] = "Characters per line" ;
 	};
     NumericField    NF_CHARSPERLINE
     {
-        Pos = MAP_APPFONT ( 74 , 83 ) ;
+        Pos = MAP_APPFONT ( 74 , 96 ) ;
         Size = MAP_APPFONT ( 25 , 12 ) ;
         Border = TRUE ;
         TabStop = TRUE ;
@@ -152,47 +158,76 @@ TabPage TP_TEXTGRID_PAGE
         Last = 233 ;
 		SpinSize = 1 ;
     };
-    FixedText       FT_RUBYSIZE
+    FixedText       FT_CHARWIDTH
     {
-        Pos = MAP_APPFONT ( 133 , 85 ) ;
+        Pos = MAP_APPFONT ( 133 , 98 ) ;
         Size = MAP_APPFONT ( 80 , 8 ) ;
-        Text [ de ] = "Max. Ruby-Textgröße" ;
-        Text [ en-US ] = "Max. Ruby text size" ;
+        Text [ en-US ] = "Character ~width" ;
 	};
-    MetricField     MF_RUBYSIZE
+    MetricField     MF_CHARWIDTH
     {
-        Pos = MAP_APPFONT ( 216 , 83 ) ;
+        Pos = MAP_APPFONT ( 216 , 96 ) ;
         Size = MAP_APPFONT ( 35 , 12 ) ;
         Border = TRUE ;
         TabStop = TRUE ;
 		Left = TRUE ;
 		Repeat = TRUE ;
 		Spin = TRUE ;
-		Minimum = 1 ;
+		Minimum = 0 ;
 		Maximum = 5600 ;
         DecimalDigits = 1 ;
         Unit = FUNIT_POINT;
-		First = 10 ;
+		First = 0 ;
 		Last = 5600 ;
         SpinSize = 5 ;
     };
+    FixedText       FT_RUBYSIZE
+    {
+        Pos = MAP_APPFONT ( 133 , 98 ) ;
+        Size = MAP_APPFONT ( 80 , 8 ) ;
+        Text [ de ] = "Max. Ruby-Textgröße" ;
+        Text [ en-US ] = "Max. Ruby text size" ;
+    };
+    MetricField     MF_RUBYSIZE
+    {
+        Pos = MAP_APPFONT ( 216 , 96 ) ;
+        Size = MAP_APPFONT ( 35 , 12 ) ;
+        Border = TRUE ;
+        TabStop = TRUE ;
+        Left = TRUE ;
+        Repeat = TRUE ;
+        Spin = TRUE ;
+        Minimum = 0 ;
+        Maximum = 5600 ;
+        DecimalDigits = 1 ;
+        Unit = FUNIT_POINT;
+        First = 0 ;
+        Last = 5600 ;
+        SpinSize = 5 ;
+    };
     CheckBox        CB_RUBYBELOW
     {
-        Pos = MAP_APPFONT ( 14 , 99 ) ;
-        Size = MAP_APPFONT ( 242 , 10 ) ;
+        Pos = MAP_APPFONT ( 14 , 112 ) ;
+        Size = MAP_APPFONT ( 110 , 10 ) ;
         Text [ de ] = "Ruby-Text unter/links vom Basistext" ;
         Text [ en-US ] = "Ruby text below/left from base text" ;
 	};
+    CheckBox        CB_SQUARED
+    {
+        Pos = MAP_APPFONT ( 133 , 112 ) ;
+        Size = MAP_APPFONT ( 110 , 10 ) ;
+        Text [ en-US ] = "S~quared Paper Mode" ;
+    };
     FixedLine       FL_DISPLAY
     {
-        Pos = MAP_APPFONT ( 6 , 115 ) ;
+        Pos = MAP_APPFONT ( 6 , 128 ) ;
         Size = MAP_APPFONT ( 248 , 8 ) ;
         Text [ de ] = "Rasterdarstellung" ;
         Text [ en-US ] = "Grid display" ;
 	};
     CheckBox        CB_DISPLAY
     {
-        Pos = MAP_APPFONT ( 12 , 126 ) ;
+        Pos = MAP_APPFONT ( 12 , 139 ) ;
         Size = MAP_APPFONT ( 112 , 10 ) ;
         Text [ de ] = "Raster anzeigen" ;
         Text [ en-US ] = "Display grid" ;
@@ -200,7 +235,7 @@ TabPage TP_TEXTGRID_PAGE
 	};
     CheckBox        CB_PRINT
     {
-        Pos = MAP_APPFONT ( 18 , 141 ) ;
+        Pos = MAP_APPFONT ( 18 , 154 ) ;
         Size = MAP_APPFONT ( 106 , 10 ) ;
         Text [ de ] = "Raster ausdrucken" ;
         Text [ en-US ] = "Print grid" ;
@@ -208,14 +243,14 @@ TabPage TP_TEXTGRID_PAGE
 	};
     FixedText       FT_COLOR
     {
-        Pos = MAP_APPFONT ( 133 , 126 ) ;
+        Pos = MAP_APPFONT ( 133 , 139 ) ;
         Size = MAP_APPFONT ( 55 , 8 ) ;
         Text [ de ] = "Rasterfarbe" ;
         Text [ en-US ] = "Grid color" ;
 	};
     ListBox         LB_COLOR
     {
-        Pos = MAP_APPFONT ( 191 , 124 ) ;
+        Pos = MAP_APPFONT ( 191 , 137 ) ;
         Size = MAP_APPFONT ( 60 , 50 ) ;
         TabStop = TRUE;
         Border = TRUE;
