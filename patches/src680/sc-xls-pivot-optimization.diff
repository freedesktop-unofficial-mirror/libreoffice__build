diff -rupw sc/inc/dpsave.hxx sc/inc/dpsave.hxx
--- sc/inc/dpsave.hxx	2006-11-29 13:12:41.000000000 -0500
+++ sc/inc/dpsave.hxx	2006-12-01 10:56:52.000000000 -0500
@@ -51,6 +51,8 @@
 #ifndef INCLUDED_SCDLLAPI_H
 #include "scdllapi.h"
 #endif
+#include <hash_map>
+#include <list>
 
 namespace com { namespace sun { namespace star { namespace sheet {
     struct DataPilotFieldReference;
@@ -119,8 +121,17 @@ private:
     ::com::sun::star::sheet::DataPilotFieldSortInfo*  pSortInfo;            // (level)
     ::com::sun::star::sheet::DataPilotFieldAutoShowInfo* pAutoShowInfo;     // (level)
     ::com::sun::star::sheet::DataPilotFieldLayoutInfo* pLayoutInfo;         // (level)
-	List		aMemberList;
 
+	struct MemberHashFunc : public std::unary_function< const String &, size_t >
+	{
+		size_t operator() (const String &member_name) const;
+	};
+public :
+	typedef	std::hash_map <String, ScDPSaveMember *, MemberHashFunc> MemberHash;
+	typedef	std::list <ScDPSaveMember *>							 MemberList;
+private :
+	MemberHash maMemberHash;
+	MemberList maMemberList;
 public:
 							ScDPSaveDimension(const String& rName, BOOL bDataLayout);
 							ScDPSaveDimension(const ScDPSaveDimension& r);
@@ -129,8 +140,8 @@ public:
 
 	BOOL		 			operator== ( const ScDPSaveDimension& r ) const;
 
-    const List&             GetMembers() const { return aMemberList; }
-	void					AddMember(ScDPSaveMember* pMember) { aMemberList.Insert(pMember, LIST_APPEND); };
+    const MemberList&       GetMembers() const { return maMemberList; }
+	void					AddMember(ScDPSaveMember* pMember);
 
 	void					SetDupFlag(BOOL bSet)	{ bDupFlag = bSet; }
 	BOOL					GetDupFlag() const		{ return bDupFlag; }
diff -rupw sc/source/core/data/dpsave.cxx sc/source/core/data/dpsave.cxx
--- sc/source/core/data/dpsave.cxx	2006-11-29 13:12:41.000000000 -0500
+++ sc/source/core/data/dpsave.cxx	2006-12-01 10:52:43.000000000 -0500
@@ -213,23 +213,28 @@ void ScDPSaveMember::WriteToSource( cons
 
 // -----------------------------------------------------------------------
 
+size_t ScDPSaveDimension::MemberHashFunc::operator()(const String & member_name) const
+{
+    return rtl_ustr_hashCode_WithLength( member_name.GetBuffer(), member_name.Len() );
+}
+
 ScDPSaveDimension::ScDPSaveDimension(const String& rName, BOOL bDataLayout) :
 	aName( rName ),
+	pLayoutName( NULL ),
+	pSelectedPage( NULL ),
 	bIsDataLayout( bDataLayout ),
 	bDupFlag( FALSE ),
 	nOrientation( sheet::DataPilotFieldOrientation_HIDDEN ),
+	nFunction( sheet::GeneralFunction_AUTO ),
+	nUsedHierarchy( -1 ),
+	nShowEmptyMode( SC_DPSAVEMODE_DONTKNOW ),
 	bSubTotalDefault( TRUE ),
 	nSubTotalCount( 0 ),
 	pSubTotalFuncs( NULL ),
-	nShowEmptyMode( SC_DPSAVEMODE_DONTKNOW ),
-	nFunction( sheet::GeneralFunction_AUTO ),
-	nUsedHierarchy( -1 ),
 	pReferenceValue( NULL ),
 	pSortInfo( NULL ),
 	pAutoShowInfo( NULL ),
-	pLayoutInfo( NULL ),
-	pLayoutName( NULL ),
-	pSelectedPage( NULL )
+	pLayoutInfo( NULL )
 {
 }
 
@@ -238,12 +243,12 @@ ScDPSaveDimension::ScDPSaveDimension(con
 	bIsDataLayout( r.bIsDataLayout ),
 	bDupFlag( r.bDupFlag ),
 	nOrientation( r.nOrientation ),
+	nFunction( r.nFunction ),
+	nUsedHierarchy( r.nUsedHierarchy ),
+	nShowEmptyMode( r.nShowEmptyMode ),
 	bSubTotalDefault( r.bSubTotalDefault ),
 	nSubTotalCount( r.nSubTotalCount ),
-	pSubTotalFuncs( NULL ),
-	nShowEmptyMode( r.nShowEmptyMode ),
-	nFunction( r.nFunction ),
-	nUsedHierarchy( r.nUsedHierarchy )
+	pSubTotalFuncs( NULL )
 {
 	if ( nSubTotalCount && r.pSubTotalFuncs )
 	{
@@ -252,11 +257,12 @@ ScDPSaveDimension::ScDPSaveDimension(con
 			pSubTotalFuncs[nSub] = r.pSubTotalFuncs[nSub];
 	}
 
-	long nCount = r.aMemberList.Count();
-	for (long i=0; i<nCount; i++)
+	for (MemberList::const_iterator i=r.maMemberList.begin(); i != r.maMemberList.end() ; i++)
 	{
-		ScDPSaveMember* pNew = new ScDPSaveMember( *(ScDPSaveMember*)r.aMemberList.GetObject(i) );
-		aMemberList.Insert( pNew, LIST_APPEND );
+		const String& rName =  (*i)->GetName();
+		ScDPSaveMember* pNew = new ScDPSaveMember( rName );
+		maMemberHash[rName] = pNew;
+		maMemberList.push_back( pNew );
 	}
 	if (r.pReferenceValue)
 		pReferenceValue = new sheet::DataPilotFieldReference( *(r.pReferenceValue) );
@@ -317,7 +323,8 @@ ScDPSaveDimension::ScDPSaveDimension(SvS
 	for (i=0; i<nNewCount; i++)
 	{
 		ScDPSaveMember* pNew = new ScDPSaveMember( rStream );
-		aMemberList.Insert( pNew, LIST_APPEND );
+		maMemberHash[pNew->GetName()] = pNew;
+		maMemberList.push_back( pNew );
 	}
 	pReferenceValue = NULL;
     pSortInfo = NULL;
@@ -351,21 +358,16 @@ void ScDPSaveDimension::Store( SvStream&
 
 	rStream << (USHORT) 0;	// nExtra
 
-	long nCount = aMemberList.Count();
+	long nCount = maMemberHash.size();
 	rStream << nCount;
-	for (i=0; i<nCount; i++)
-	{
-		const ScDPSaveMember* pMember = (const ScDPSaveMember*)aMemberList.GetObject(i);
-		pMember->Store( rStream );
-	}
+	for (MemberList::const_iterator iter=maMemberList.begin(); iter != maMemberList.end() ; iter++)
+		(*iter)->Store( rStream );
 }
 
 ScDPSaveDimension::~ScDPSaveDimension()
 {
-	long nCount = aMemberList.Count();
-	for (long i=0; i<nCount; i++)
-		delete (ScDPSaveMember*)aMemberList.GetObject(i);
-	aMemberList.Clear();
+	for (MemberHash::const_iterator i=maMemberHash.begin(); i != maMemberHash.end() ; i++)
+		delete i->second;
 	delete pReferenceValue;
     delete pSortInfo;
     delete pAutoShowInfo;
@@ -396,18 +398,38 @@ BOOL ScDPSaveDimension::operator== ( con
 		if ( pSubTotalFuncs[i] != r.pSubTotalFuncs[i] )
 			return FALSE;
 
-	long nCount = aMemberList.Count();
-	if ( nCount != r.aMemberList.Count() )
+	if (maMemberHash.size() != r.maMemberHash.size() )
 		return FALSE;
 
-	for (i=0; i<nCount; i++)
-		if ( !( *(ScDPSaveMember*)aMemberList.GetObject(i) ==
-				*(ScDPSaveMember*)r.aMemberList.GetObject(i) ) )
+	MemberList::const_iterator a=maMemberList.begin();
+	MemberList::const_iterator b=r.maMemberList.begin();
+	for (; a != maMemberList.end() ; ++a, ++b)
+		if (!(*a == *b))
 			return FALSE;
 
 	return TRUE;
 }
 
+void ScDPSaveDimension::AddMember(ScDPSaveMember* pMember)
+{
+	const String & rName =  pMember->GetName();
+	MemberHash::iterator aExisting = maMemberHash.find( rName );
+	if ( aExisting == maMemberHash.end() )
+	{
+		std::pair< String, ScDPSaveMember *> key;
+		key.first  = rName;
+		key.second = pMember;
+		maMemberHash.insert ( key );
+	}
+	else
+	{
+		maMemberList.remove( aExisting->second );
+		delete aExisting->second;
+		aExisting->second = pMember;
+	}
+	maMemberList.push_front( pMember );
+}
+
 void ScDPSaveDimension::SetName( const String& rNew )
 {
     // Used only if the source dim was renamed (groups).
@@ -550,26 +572,22 @@ const String& ScDPSaveDimension::GetCurr
 
 ScDPSaveMember* ScDPSaveDimension::GetExistingMemberByName(const String& rName)
 {
-	long nCount = aMemberList.Count();
-	for (long i=0; i<nCount; i++)
-	{
-		ScDPSaveMember* pMember = (ScDPSaveMember*)aMemberList.GetObject(i);
-		if ( pMember->GetName() == rName )
-			return pMember;
-	}
+	MemberHash::const_iterator res = maMemberHash.find (rName);
+    if (res != maMemberHash.end())
+		return res->second;
     return NULL;
 }
 
 
 ScDPSaveMember* ScDPSaveDimension::GetMemberByName(const String& rName)
 {
-	long nCount = aMemberList.Count();
-    ScDPSaveMember* pMember = GetExistingMemberByName(rName);
-    if (pMember)
-        return pMember;
+	MemberHash::const_iterator res = maMemberHash.find (rName);
+    if (res != maMemberHash.end())
+		return res->second;
 
 	ScDPSaveMember* pNew = new ScDPSaveMember( rName );
-	aMemberList.Insert( pNew, LIST_APPEND );
+	maMemberHash[rName] = pNew;
+	maMemberList.push_front( pNew );
 	return pNew;
 }
 
@@ -623,10 +641,10 @@ void ScDPSaveDimension::WriteToSource( c
 		}
 	}
 
-	//	Level loop outside of aMemberList loop
+	//	Level loop outside of maMemberList loop
 	//	because SubTotals have to be set independently of known members
 
-	long nCount = aMemberList.Count();
+	long nCount = maMemberHash.size();
 
 	long nHierCount = 0;
 	uno::Reference<container::XIndexAccess> xHiers;
@@ -724,15 +742,14 @@ void ScDPSaveDimension::WriteToSource( c
 					uno::Reference<container::XNameAccess> xMembers = xMembSupp->getMembers();
 					if ( xMembers.is() )
 					{
-						for (long i=0; i<nCount; i++)
+						for (MemberList::const_iterator i=maMemberList.begin(); i != maMemberList.end() ; i++)
 						{
-							ScDPSaveMember* pMember = (ScDPSaveMember*)aMemberList.GetObject(i);
-							rtl::OUString aName = pMember->GetName();
-							if ( xMembers->hasByName( aName ) )
+							rtl::OUString laName = (*i)->GetName();
+							if ( xMembers->hasByName( laName ) )
 							{
 								uno::Reference<uno::XInterface> xMemberInt = ScUnoHelpFunctions::AnyToInterface(
-									xMembers->getByName( aName ) );
-								pMember->WriteToSource( xMemberInt );
+									xMembers->getByName( laName ) );
+								(*i)->WriteToSource( xMemberInt );
 							}
 							// missing member is no error
 						}
@@ -829,11 +846,11 @@ BOOL ScDPSaveData::operator== ( const Sc
         if ( !pDimensionData || !r.pDimensionData || !( *pDimensionData == *r.pDimensionData ) )
             return FALSE;
 
-	long nCount = aDimList.Count();
+	ULONG nCount = aDimList.Count();
 	if ( nCount != r.aDimList.Count() )
 		return FALSE;
 
-	for (long i=0; i<nCount; i++)
+	for (ULONG i=0; i<nCount; i++)
 		if ( !( *(ScDPSaveDimension*)aDimList.GetObject(i) ==
 				*(ScDPSaveDimension*)r.aDimList.GetObject(i) ) )
 			return FALSE;
diff -rupw sc/source/core/data/dpsave.cxx.orig sc/source/core/data/dpsave.cxx.orig
--- sc/source/core/data/dpsave.cxx.orig	2006-11-14 23:36:20.000000000 -0500
+++ sc/source/core/data/dpsave.cxx.orig	2006-11-29 13:12:31.000000000 -0500
@@ -213,11 +213,6 @@ void ScDPSaveMember::WriteToSource( cons
 
 // -----------------------------------------------------------------------
 
-size_t ScDPSaveDimension::MemberHashFunc::operator()(const String & member_name) const
-{
-    return rtl_ustr_hashCode_WithLength( member_name.GetBuffer(), member_name.Len() );
-}
-
 ScDPSaveDimension::ScDPSaveDimension(const String& rName, BOOL bDataLayout) :
 	aName( rName ),
 	bIsDataLayout( bDataLayout ),
@@ -257,10 +252,11 @@ ScDPSaveDimension::ScDPSaveDimension(con
 			pSubTotalFuncs[nSub] = r.pSubTotalFuncs[nSub];
 	}
 
-	for (MemberHash::const_iterator i=r.aMembers.begin(); i != r.aMembers.end() ; i++)
+	long nCount = r.aMemberList.Count();
+	for (long i=0; i<nCount; i++)
 	{
-		ScDPSaveMember* pNew = new ScDPSaveMember( *i->second );
-		aMembers[pNew->GetName()] = pNew;
+		ScDPSaveMember* pNew = new ScDPSaveMember( *(ScDPSaveMember*)r.aMemberList.GetObject(i) );
+		aMemberList.Insert( pNew, LIST_APPEND );
 	}
 	if (r.pReferenceValue)
 		pReferenceValue = new sheet::DataPilotFieldReference( *(r.pReferenceValue) );
@@ -321,7 +317,7 @@ ScDPSaveDimension::ScDPSaveDimension(SvS
 	for (i=0; i<nNewCount; i++)
 	{
 		ScDPSaveMember* pNew = new ScDPSaveMember( rStream );
-		aMembers[pNew->GetName()] = pNew;
+		aMemberList.Insert( pNew, LIST_APPEND );
 	}
 	pReferenceValue = NULL;
     pSortInfo = NULL;
@@ -355,16 +351,21 @@ void ScDPSaveDimension::Store( SvStream&
 
 	rStream << (USHORT) 0;	// nExtra
 
-	long nCount = aMembers.size();
+	long nCount = aMemberList.Count();
 	rStream << nCount;
-	for (MemberHash::const_iterator i=aMembers.begin(); i != aMembers.end() ; i++)
-		i->second->Store( rStream );
+	for (i=0; i<nCount; i++)
+	{
+		const ScDPSaveMember* pMember = (const ScDPSaveMember*)aMemberList.GetObject(i);
+		pMember->Store( rStream );
+	}
 }
 
 ScDPSaveDimension::~ScDPSaveDimension()
 {
-	for (MemberHash::const_iterator i=aMembers.begin(); i != aMembers.end() ; i++)
-		delete i->second;
+	long nCount = aMemberList.Count();
+	for (long i=0; i<nCount; i++)
+		delete (ScDPSaveMember*)aMemberList.GetObject(i);
+	aMemberList.Clear();
 	delete pReferenceValue;
     delete pSortInfo;
     delete pAutoShowInfo;
@@ -395,13 +396,13 @@ BOOL ScDPSaveDimension::operator== ( con
 		if ( pSubTotalFuncs[i] != r.pSubTotalFuncs[i] )
 			return FALSE;
 
-	if (aMembers.size() != r.aMembers.size() )
+	long nCount = aMemberList.Count();
+	if ( nCount != r.aMemberList.Count() )
 		return FALSE;
 
-	MemberHash::const_iterator a=aMembers.begin();
-	MemberHash::const_iterator b=r.aMembers.begin();
-	for (; a != aMembers.end() ; ++a, ++b)
-		if (!(*(a->second) == *(b->second)))
+	for (i=0; i<nCount; i++)
+		if ( !( *(ScDPSaveMember*)aMemberList.GetObject(i) ==
+				*(ScDPSaveMember*)r.aMemberList.GetObject(i) ) )
 			return FALSE;
 
 	return TRUE;
@@ -549,21 +550,26 @@ const String& ScDPSaveDimension::GetCurr
 
 ScDPSaveMember* ScDPSaveDimension::GetExistingMemberByName(const String& rName)
 {
-	MemberHash::const_iterator res = aMembers.find (rName);
-    if (res != aMembers.end())
-		return res->second;
+	long nCount = aMemberList.Count();
+	for (long i=0; i<nCount; i++)
+	{
+		ScDPSaveMember* pMember = (ScDPSaveMember*)aMemberList.GetObject(i);
+		if ( pMember->GetName() == rName )
+			return pMember;
+	}
     return NULL;
 }
 
 
 ScDPSaveMember* ScDPSaveDimension::GetMemberByName(const String& rName)
 {
+	long nCount = aMemberList.Count();
     ScDPSaveMember* pMember = GetExistingMemberByName(rName);
     if (pMember)
         return pMember;
 
 	ScDPSaveMember* pNew = new ScDPSaveMember( rName );
-	aMembers[rName] = pNew;
+	aMemberList.Insert( pNew, LIST_APPEND );
 	return pNew;
 }
 
@@ -617,10 +623,10 @@ void ScDPSaveDimension::WriteToSource( c
 		}
 	}
 
-	//	Level loop outside of aMembers loop
+	//	Level loop outside of aMemberList loop
 	//	because SubTotals have to be set independently of known members
 
-	long nCount = aMembers.size();
+	long nCount = aMemberList.Count();
 
 	long nHierCount = 0;
 	uno::Reference<container::XIndexAccess> xHiers;
@@ -718,14 +724,15 @@ void ScDPSaveDimension::WriteToSource( c
 					uno::Reference<container::XNameAccess> xMembers = xMembSupp->getMembers();
 					if ( xMembers.is() )
 					{
-						for (MemberHash::const_iterator i=aMembers.begin(); i != aMembers.end() ; i++)
+						for (long i=0; i<nCount; i++)
 						{
-							rtl::OUString aName = i->second->GetName();
+							ScDPSaveMember* pMember = (ScDPSaveMember*)aMemberList.GetObject(i);
+							rtl::OUString aName = pMember->GetName();
 							if ( xMembers->hasByName( aName ) )
 							{
 								uno::Reference<uno::XInterface> xMemberInt = ScUnoHelpFunctions::AnyToInterface(
 									xMembers->getByName( aName ) );
-								i->second->WriteToSource( xMemberInt );
+								pMember->WriteToSource( xMemberInt );
 							}
 							// missing member is no error
 						}
diff -rupw sc/source/filter/excel/xepivot.cxx sc/source/filter/excel/xepivot.cxx
--- sc/source/filter/excel/xepivot.cxx	2006-11-29 13:12:41.000000000 -0500
+++ sc/source/filter/excel/xepivot.cxx	2006-12-01 11:10:01.000000000 -0500
@@ -1128,16 +1128,10 @@ void XclExpPTField::SetPropertiesFromDim
     }
 
     // item properties
-    const List& rMemList = rSaveDim.GetMembers();
-    for( ULONG nMemIdx = 0, nMemCount = rMemList.Count(); nMemIdx < nMemCount; ++nMemIdx )
-    {
-        if( const ScDPSaveMember* pSaveMem = static_cast< const ScDPSaveMember* >( rMemList.GetObject( nMemIdx ) ) )
-        {
-
-            if( XclExpPTItem* pItem = GetItemAcc( pSaveMem->GetName() ) )
-                pItem->SetPropertiesFromMember( *pSaveMem );
-        }
-    }
+    const ScDPSaveDimension::MemberList &rMembers = rSaveDim.GetMembers();
+    for (ScDPSaveDimension::MemberList::const_iterator i=rMembers.begin(); i != rMembers.end() ; i++)
+		if( XclExpPTItem* pItem = GetItemAcc( (*i)->GetName() ) )
+			pItem->SetPropertiesFromMember( **i );
 }
 
 void XclExpPTField::SetDataPropertiesFromDim( const ScDPSaveDimension& rSaveDim )
diff -rupw sc/source/filter/excel/xepivot.cxx.orig sc/source/filter/excel/xepivot.cxx.orig
--- sc/source/filter/excel/xepivot.cxx.orig	2006-11-14 23:36:20.000000000 -0500
+++ sc/source/filter/excel/xepivot.cxx.orig	2006-11-29 13:12:31.000000000 -0500
@@ -1128,10 +1128,16 @@ void XclExpPTField::SetPropertiesFromDim
     }
 
     // item properties
-    const ScDPSaveDimension::MemberHash &rMembers = rSaveDim.GetMembers();
-    for (ScDPSaveDimension::MemberHash::const_iterator i=rMembers.begin(); i != rMembers.end() ; i++)
-		if( XclExpPTItem* pItem = GetItemAcc( i->second->GetName() ) )
-			pItem->SetPropertiesFromMember( *(i->second) );
+    const List& rMemList = rSaveDim.GetMembers();
+    for( ULONG nMemIdx = 0, nMemCount = rMemList.Count(); nMemIdx < nMemCount; ++nMemIdx )
+    {
+        if( const ScDPSaveMember* pSaveMem = static_cast< const ScDPSaveMember* >( rMemList.GetObject( nMemIdx ) ) )
+        {
+
+            if( XclExpPTItem* pItem = GetItemAcc( pSaveMem->GetName() ) )
+                pItem->SetPropertiesFromMember( *pSaveMem );
+        }
+    }
 }
 
 void XclExpPTField::SetDataPropertiesFromDim( const ScDPSaveDimension& rSaveDim )
diff -rupw sc/source/filter/xml/XMLExportDataPilot.cxx sc/source/filter/xml/XMLExportDataPilot.cxx
--- sc/source/filter/xml/XMLExportDataPilot.cxx	2006-11-29 13:12:41.000000000 -0500
+++ sc/source/filter/xml/XMLExportDataPilot.cxx	2006-12-01 11:13:00.000000000 -0500
@@ -543,19 +543,18 @@ void ScXMLExportDataPilot::WriteSubTotal
 
 void ScXMLExportDataPilot::WriteMembers(ScDPSaveDimension* pDim)
 {
-	List aMembers = pDim->GetMembers();
-	sal_Int32 nMemberCount = aMembers.Count();
-	if (nMemberCount > 0)
+    const ScDPSaveDimension::MemberList &rMembers = pDim->GetMembers();
+	if (rMembers.begin() != rMembers.end())
 	{
 		SvXMLElementExport aElemDPMs(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_MEMBERS, sal_True, sal_True);
 		rExport.CheckAttrList();
-		for (sal_Int32 nMember = 0; nMember < nMemberCount; nMember++)
+		for (ScDPSaveDimension::MemberList::const_iterator i=rMembers.begin(); i != rMembers.end() ; i++)
 		{
-			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rtl::OUString(((ScDPSaveMember*)aMembers.GetObject(nMember))->GetName()));
+			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rtl::OUString((*i)->GetName()));
 			rtl::OUStringBuffer sBuffer;
-			SvXMLUnitConverter::convertBool(sBuffer, ((ScDPSaveMember*)aMembers.GetObject(nMember))->GetIsVisible());
+			SvXMLUnitConverter::convertBool(sBuffer, (*i)->GetIsVisible());
 			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, sBuffer.makeStringAndClear());
-			SvXMLUnitConverter::convertBool(sBuffer, ((ScDPSaveMember*)aMembers.GetObject(nMember))->GetShowDetails());
+			SvXMLUnitConverter::convertBool(sBuffer, (*i)->GetShowDetails());
 			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SHOW_DETAILS, sBuffer.makeStringAndClear());
 			SvXMLElementExport aElemDPM(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_MEMBER, sal_True, sal_True);
 			rExport.CheckAttrList();
diff -rupw sc/source/filter/xml/XMLExportDataPilot.cxx.orig sc/source/filter/xml/XMLExportDataPilot.cxx.orig
--- sc/source/filter/xml/XMLExportDataPilot.cxx.orig	2006-11-14 23:36:20.000000000 -0500
+++ sc/source/filter/xml/XMLExportDataPilot.cxx.orig	2006-11-29 13:12:31.000000000 -0500
@@ -543,18 +543,19 @@ void ScXMLExportDataPilot::WriteSubTotal
 
 void ScXMLExportDataPilot::WriteMembers(ScDPSaveDimension* pDim)
 {
-    const ScDPSaveDimension::MemberHash &rMembers = pDim->GetMembers();
-	if (rMembers.size() > 0)
+	List aMembers = pDim->GetMembers();
+	sal_Int32 nMemberCount = aMembers.Count();
+	if (nMemberCount > 0)
 	{
 		SvXMLElementExport aElemDPMs(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_MEMBERS, sal_True, sal_True);
 		rExport.CheckAttrList();
-		for (ScDPSaveDimension::MemberHash::const_iterator i=rMembers.begin(); i != rMembers.end() ; i++)
+		for (sal_Int32 nMember = 0; nMember < nMemberCount; nMember++)
 		{
-			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rtl::OUString(i->second->GetName()));
+			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rtl::OUString(((ScDPSaveMember*)aMembers.GetObject(nMember))->GetName()));
 			rtl::OUStringBuffer sBuffer;
-			SvXMLUnitConverter::convertBool(sBuffer, i->second->GetIsVisible());
+			SvXMLUnitConverter::convertBool(sBuffer, ((ScDPSaveMember*)aMembers.GetObject(nMember))->GetIsVisible());
 			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, sBuffer.makeStringAndClear());
-			SvXMLUnitConverter::convertBool(sBuffer, i->second->GetShowDetails());
+			SvXMLUnitConverter::convertBool(sBuffer, ((ScDPSaveMember*)aMembers.GetObject(nMember))->GetShowDetails());
 			rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SHOW_DETAILS, sBuffer.makeStringAndClear());
 			SvXMLElementExport aElemDPM(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_MEMBER, sal_True, sal_True);
 			rExport.CheckAttrList();
