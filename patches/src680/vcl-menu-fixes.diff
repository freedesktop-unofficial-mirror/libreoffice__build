Index: framework/source/uielement/toolbarmanager.cxx
===================================================================
RCS file: /cvs/framework/framework/source/uielement/toolbarmanager.cxx,v
retrieving revision 1.12
diff -u -r1.12 toolbarmanager.cxx
--- framework/source/uielement/toolbarmanager.cxx	21 Jan 2005 12:42:13 -0000	1.12
+++ framework/source/uielement/toolbarmanager.cxx	1 Feb 2005 14:41:35 -0000
@@ -1580,6 +1580,9 @@
             aPopupMenu.EnableItem( MENUITEM_TOOLBAR_CUSTOMIZETOOLBAR, sal_False );
         }
 
+		pItemMenu->SetMenuFlags (pItemMenu->GetMenuFlags () | 
+								 MENU_FLAG_SHOWCHECKIMAGES);
+
         for ( nPos = 0; nPos < m_pToolBar->GetItemCount(); ++nPos )
 	    {
 		    if ( m_pToolBar->GetItemType(nPos) == TOOLBOXITEM_BUTTON )
Index: vcl/inc/menu.hxx
===================================================================
RCS file: /cvs/gsl/vcl/inc/menu.hxx,v
retrieving revision 1.37
diff -u -p -u -r1.37 menu.hxx
--- vcl/inc/menu.hxx	5 May 2006 10:49:56 -0000	1.37
+++ vcl/inc/menu.hxx	7 Jul 2006 14:29:12 -0000
@@ -126,6 +126,9 @@ typedef USHORT MenuItemBits;
 // overrides default hiding of disabled entries in popup menus
 #define MENU_FLAG_ALWAYSSHOWDISABLEDENTRIES	0x0004
 
+// forces images & toggle visibility for toolbar config popup
+#define MENU_FLAG_SHOWCHECKIMAGES     0x0008
+
 // --------
 // - Menu -
 // --------
@@ -207,7 +210,7 @@ protected:
     
     // returns native check and option menu symbol height;
     // return value is Max( rCheckHeight, rRadioHeight ) 
-    SAL_DLLPRIVATE long             ImplGetNativeCheckAndRadioHeight( Window*, long& rCheckHeight, long& rRadioHeight ) const;
+    SAL_DLLPRIVATE long             ImplGetNativeCheckAndRadioSize( Window*, long& rCheckHeight, long& rRadioHeight, long &rMaxWidth ) const;
 
 #if _SOLAR__PRIVATE
 public:

Index: vcl/source/window/menu.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/window/menu.cxx,v
retrieving revision 1.135.22.2
diff -u -p -u -r1.135.22.2 menu.cxx
--- vcl/source/window/menu.cxx	15 Jun 2006 12:55:37 -0000	1.135.22.2
+++ vcl/source/window/menu.cxx	7 Jul 2006 14:29:14 -0000
@@ -230,6 +230,10 @@ struct MenuItemData
                         pSalMenuItem ( NULL )
                     {}
                     ~MenuItemData();
+		bool HasCheck()
+		{
+			return bChecked || ( nBits & ( MIB_RADIOCHECK | MIB_CHECKABLE | MIB_AUTOCHECK ) );
+		}
 };
                     
 MenuItemData::~MenuItemData()
@@ -953,7 +957,7 @@ void Menu::ImplInit()
 {
     mnHighlightedItemPos = ITEMPOS_INVALID;
     mpSalMenu       = NULL;
-    nMenuFlags      = 0;
+    nMenuFlags      = getenv ("UGLYCHECK") ? MENU_FLAG_SHOWCHECKIMAGES : 0;
     nDefaultItem    = 0;
     //bIsMenuBar      = FALSE;  // this is now set in the ctor, must not be changed here!!!
     nSelectedId     = 0;
@@ -2165,9 +2169,9 @@ void Menu::SetAccessible( const ::com::s
 	mxAccessible = rxAccessible;
 }
 
-long Menu::ImplGetNativeCheckAndRadioHeight( Window* pWin, long& rCheckHeight, long& rRadioHeight ) const
+long Menu::ImplGetNativeCheckAndRadioSize( Window* pWin, long& rCheckHeight, long& rRadioHeight, long &rMaxWidth ) const
 {
-    rCheckHeight = rRadioHeight = 0;
+    rMaxWidth = rCheckHeight = rRadioHeight = 0;
     
     if( ! bIsMenuBar )
     {
@@ -2189,6 +2193,7 @@ long Menu::ImplGetNativeCheckAndRadioHei
             )
             {
                 rCheckHeight = aNativeBounds.GetBoundRect().GetHeight();
+				rMaxWidth = aNativeContent.GetBoundRect().GetWidth();
             }
         }
         if( pWin->IsNativeControlSupported( CTRL_MENU_POPUP, PART_MENU_ITEM_RADIO_MARK ) )
@@ -2204,6 +2209,7 @@ long Menu::ImplGetNativeCheckAndRadioHei
             )
             {
                 rRadioHeight = aNativeBounds.GetBoundRect().GetHeight();
+				rMaxWidth = Max (rMaxWidth, aNativeContent.GetBoundRect().GetWidth());
             }
         }
     }
@@ -2224,7 +2230,8 @@ Size Menu::ImplCalcSize( Window* pWin )
     long nMaxWidth = 0;
     long nMinMenuItemHeight = nFontHeight;
     long nCheckHeight = 0, nRadioHeight = 0;
-    long nMax = ImplGetNativeCheckAndRadioHeight( pWin, nCheckHeight, nRadioHeight );
+	long nCheckWidth = 0, nMaxCheckWidth = 0;
+    long nMax = ImplGetNativeCheckAndRadioSize( pWin, nCheckHeight, nRadioHeight, nMaxCheckWidth );
     if( nMax > nMinMenuItemHeight )
         nMinMenuItemHeight = nMax;
 
@@ -2277,6 +2284,14 @@ Size Menu::ImplCalcSize( Window* pWin )
                     pData->aSz.Height() = aImgSz.Height();
             }
 
+			// Check Buttons:
+			if ( !bIsMenuBar && pData->HasCheck() )
+			{
+				nCheckWidth = nMaxCheckWidth;
+				if (nMenuFlags & MENU_FLAG_SHOWCHECKIMAGES) 
+					nWidth += nCheckWidth + nExtra * 2;
+			}
+
             // Text:
             if ( (pData->eType == MENUITEM_STRING) || (pData->eType == MENUITEM_STRINGIMAGE) )
             {
@@ -2333,19 +2348,20 @@ Size Menu::ImplCalcSize( Window* pWin )
     {
         USHORT gfxExtra = (USHORT) Max( nExtra, 7L ); // #107710# increase space between checkmarks/images/text
         nCheckPos = (USHORT)nExtra;
-        // non-NWF case has an implicit little extra space around
-        // the symbol; NWF case has not, so image pos needs to
-        // be distinct in this case
-        if( nMax > 0 ) // NWF case
-            nImagePos = (USHORT)(nCheckPos + nMax + nExtra );
-        else // non NWF case
-            nImagePos = (USHORT)(nCheckPos + nFontHeight/2 + gfxExtra );
-        nTextPos = (USHORT)(nImagePos+aMaxImgSz.Width());
-        if ( aMaxImgSz.Width() )
-            nTextPos = nTextPos + gfxExtra;
+		if (nMenuFlags & MENU_FLAG_SHOWCHECKIMAGES)
+		{
+	        nImagePos = (USHORT)(nCheckPos + nCheckWidth + nExtra*2);
+			nTextPos = (USHORT)(nImagePos+aMaxImgSz.Width());
+		}
+		else
+		{
+			nImagePos = nCheckPos;
+			nTextPos = (USHORT)(nImagePos + Max( aMaxImgSz.Width(), nCheckWidth ));
+		}
+		nTextPos += gfxExtra;
 
         aSz.Width() = nTextPos + nMaxWidth + nExtra;
-        aSz.Width() += 8*nExtra;   // a _little_ more ...
+        aSz.Width() += 4*nExtra;   // a _little_ more ...
 
         int nOuterSpace = ImplGetSVData()->maNWFData.mnMenuFormatExtraBorder;
         aSz.Width() += 2*nOuterSpace;
@@ -2469,10 +2485,14 @@ void Menu::ImplPaint( Window* pWin, USHO
                 // Image:
                 if ( !bLayout && !bIsMenuBar && ( ( pData->eType == MENUITEM_IMAGE ) || ( pData->eType == MENUITEM_STRINGIMAGE ) ) )
                 {
-                    aTmpPos.Y() = aPos.Y();
-                    aTmpPos.X() = aPos.X() + nImagePos;
-                    aTmpPos.Y() += (pData->aSz.Height()-pData->aImage.GetSizePixel().Height())/2;
-                    pWin->DrawImage( aTmpPos, pData->aImage, nImageStyle );
+					// Don't render an image for a check thing
+					if ((nMenuFlags & MENU_FLAG_SHOWCHECKIMAGES) || !pData->HasCheck() )
+					{
+	                    aTmpPos.Y() = aPos.Y();
+	                    aTmpPos.X() = aPos.X() + nImagePos;
+	                    aTmpPos.Y() += (pData->aSz.Height()-pData->aImage.GetSizePixel().Height())/2;
+	                    pWin->DrawImage( aTmpPos, pData->aImage, nImageStyle );
+					}
                 }
 
                 // Text:
@@ -2524,8 +2544,7 @@ void Menu::ImplPaint( Window* pWin, USHO
                 }
 
                 // CheckMark
-                if ( !bLayout && !bIsMenuBar &&
-                     ( pData->bChecked  || ( pData->nBits & ( MIB_RADIOCHECK | MIB_CHECKABLE | MIB_AUTOCHECK ) ) ) )
+                if ( !bLayout && !bIsMenuBar && pData->HasCheck() )
                 {
                     if ( pWin->IsNativeControlSupported( CTRL_MENU_POPUP,
                                                          (pData->nBits & MIB_RADIOCHECK)





Index: framework/source/uielement/toolbarmanager.cxx
===================================================================
RCS file: /cvs/framework/framework/source/uielement/toolbarmanager.cxx,v
retrieving revision 1.28
diff -u -p -u -r1.28 toolbarmanager.cxx
--- framework/source/uielement/toolbarmanager.cxx	5 May 2006 08:11:12 -0000	1.28
+++ framework/source/uielement/toolbarmanager.cxx	7 Jul 2006 15:05:39 -0000
@@ -1712,5 +1732,9 @@ IMPL_LINK( ToolBarManager, MenuButton, T
     {
         // create an own submenu to avoid auto-delete when resource menu is deleted
         PopupMenu *pItemMenu = new PopupMenu();
+
+		pItemMenu->SetMenuFlags (pItemMenu->GetMenuFlags () | 
+								 MENU_FLAG_SHOWCHECKIMAGES);
+
         for( i=0; i< aPopupMenu.GetPopupMenu( 1 )->GetItemCount(); i++)
             pItemMenu->CopyItem( *aPopupMenu.GetPopupMenu( 1 ), i, MENU_APPEND );

 
