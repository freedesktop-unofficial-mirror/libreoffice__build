--- shell/source/unix/exec/shellexec.cxx	2004-11-23 13:33:32.834157888 +0100
+++ shell/source/unix/exec/shellexec.cxx	2004-11-23 15:25:32.337638088 +0100
@@ -180,7 +180,10 @@ ShellExec::ShellExec( const Reference< X
 void SAL_CALL ShellExec::execute( const OUString& aCommand, const OUString& aParameter, sal_Int32 nFlags ) 
     throw (IllegalArgumentException, SystemShellExecuteException, RuntimeException)
 {
-    OStringBuffer aBuffer;
+    OStringBuffer aBuffer, aLaunchBuffer;
+
+    // DESKTOP_LAUNCH, see http://freedesktop.org/pipermail/xdg/2004-August/004489.html
+    static const char *pDesktopLaunch = getenv( "DESKTOP_LAUNCH" );
     
     // Check wether aCommand contains a document url or not
     sal_Int32 nIndex = aCommand.indexOf( OUString( RTL_CONSTASCII_USTRINGPARAM(":/") ) );
@@ -259,12 +262,31 @@ void SAL_CALL ShellExec::execute( const 
         aBuffer.append(" ");
         aBuffer.append(OUStringToOString(aURL, osl_getThreadTextEncoding()));
         
+        if ( pDesktopLaunch && *pDesktopLaunch )
+        {
+            aLaunchBuffer.append( pDesktopLaunch );
+            aLaunchBuffer.append( " " );
+            aLaunchBuffer.append(OUStringToOString(aURL, osl_getThreadTextEncoding()));
+        }
     } else {
         aBuffer.append(OUStringToOString(aCommand, osl_getThreadTextEncoding()));
         aBuffer.append(" ");
         aBuffer.append(OUStringToOString(aParameter, osl_getThreadTextEncoding()));
     }
     
+    // Prefer DESKTOP_LAUNCH when available
+    if ( aLaunchBuffer.getLength() > 0 )
+    {
+        FILE *pLaunch = popen( aLaunchBuffer.makeStringAndClear().getStr(), "w" );
+        if ( pLaunch != NULL )
+        {
+            if ( 0 == pclose( pLaunch ) )
+                return;
+        }
+        // Failed, do not try DESKTOP_LAUNCH any more
+        pDesktopLaunch = NULL;
+    }
+
     OString cmd = aBuffer.makeStringAndClear();
     if ( 0 != pclose(popen(cmd.getStr(), "w")) )
     {
