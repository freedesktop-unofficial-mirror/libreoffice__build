+++ instsetoo_native/inc_ooolangpack/windows/msi_templates/codes.txt
--- instsetoo_native/inc_ooolangpack/windows/msi_templates/codes.txt
@@ -1,10 +1,13 @@
 [PRODUCTCODE]
 en-US = "{302DAE3A-2CD6-46DF-A25B-ED0B59FBA771}"
+bs = "{9DF5D8E3-239F-4672-8CBB-64F35914D8FC}"
 pt = "{FC10CE94-41C6-43AE-AC97-4F4AE45B1BCC}"
+pt-PT = "{B4191495-6B61-4C9E-8E64-BD6B10E7F784}"
 ru = "{C0C43007-C203-4722-916E-7A4E915E4F8D}"
 el = "{FC4188CE-C087-4109-A904-0687A76ACEDA}"
 nl = "{1C7DD608-C8AC-4B5B-81BE-E4ED3753541D}"
 fr = "{D334E645-4240-467E-9049-8EDA0DF62DD8}"
+fr-CA = "{1779C34A-84B1-4D43-B745-067E82A62052}"
 es = "{28F03675-F28C-460D-8C2E-800EA7A551A0}"
 fi = "{5FE3A584-4297-4199-BF98-2BD36628B6C7}"
 hu = "{91F443E7-DE34-46FC-B02E-F5628399603C}"
@@ -13,55 +13,210 @@
 cs = "{7C4C496A-2087-4AE3-8620-84FFD736F2BF}"
 sk = "{73D7DA04-45CD-494E-9B78-1EFDFDBF5600}"
 en-GB = "{80F13A63-A0C3-4C6D-A0B3-28F106730674}"
+en-ZA = "{36488CF6-0AA7-4106-8ED5-573C15307DDD}"
 da = "{387DC3B5-4CF9-48A2-8292-3BB725BF654A}"
 sv = "{72B0A3D4-B9E4-454C-9A45-52D2DC433A58}"
+nb = "{8372057C-007A-4C31-9E63-F62553829587}"
+nn = "{A144BF58-9C8B-44B7-82D4-33A8EA2B5EF1}"
 no = "{8FDD7F7B-104C-4CB6-B7BD-F67FCF42F3CD}"
 pl = "{7CA9656A-7DB4-48EB-8E18-456256C05E92}"
 de = "{300FFDA6-0C64-406D-B09B-CB5C91ABEBBA}"
 pt-BR = "{E49BD84D-625C-4BEB-AE0E-349D0DD6FFB7}"
 th = "{B0E54B09-14B1-4440-BCB8-E036CCD332DF}"
 et = "{0A773C83-9633-4EAD-BE4F-C015568870BD}"
 ja = "{DAF0244B-3B71-4EC8-8246-C58401AE5E01}"
 ko = "{AAFFA871-4921-4D14-9767-E302020DD8BE}"
+km = "{6E84D360-B0B6-405E-8134-5737FCAE19C2}"
+cy = "{1B4EE7DB-FA7F-42AC-8695-58A5D358452E}"
 zh-CN = "{5B52E76A-647C-4F18-BC52-6293FDE98C5D}"
 zh-TW = "{03293AD0-38E2-4399-BE6E-EC696138E39A}"
 tr = "{5F926003-A07A-4812-A6AD-6C466C053F53}"
 hi = "{264BD610-28F9-42C0-AFBF-60870763B038}"
+hi-IN = "{2ECD0724-FA4C-4C23-93C2-5801E04B9A00}"
+pa-IN = "{490D7BE1-66E2-4FF0-ADBF-560F90066CA9}"
+ta-IN = "{4C52426D-EF4A-449F-B05A-C2B0EFE5C359}"
+ta = "{68B6D35D-2C65-4995-B899-287F8EEBD0FF}"
+as-IN = "{1C234926-2FE1-4223-BB9C-86FB9ACFDC67}"
 ar = "{76854B27-9B89-4C7D-AB32-69E1F60CDA6F}"
+ar-SA = "{6171B484-B0C4-403C-A1CA-50B4879DF076}"
 he = "{10C228EF-576B-466C-B863-955EC6A9340C}"
+af = "{538C837C-7A6B-4CC4-9FD8-FB99B459B5FD}"
+sq = "{848F9F66-A02C-4E12-85F2-D13DC02F0942}"
+hy = "{43705B68-3DBD-4013-BE81-EB1D454E851A}"
+eu = "{CD145A56-9FA5-4FD6-8BF3-80551AC7076B}"
+be-BY = "{96527E6D-7840-4175-8BE8-93DA3706E6F1}"
+bn = "{90B27463-E51E-48BB-B21F-D81E0F738FBE}"
+bn-BD = "{6F47AED5-49DE-4D3D-8804-88C33FD41918}"
+bn-IN = "{52649A81-A02C-4E44-A1E1-846FD635D60D}"
+bg = "{E72472AF-C781-4F90-BC90-3621D3051416}"
+is = "{ED539F5E-63F4-4366-B88C-4B78A1D85102}"
+id = "{F1837E2E-6E6D-41E0-AFB4-519D666E05B1}"
+lo = "{9572F7D7-FD00-443F-B77F-F49ABE718488}"
+lv = "{D6D3626E-DAA7-4735-9B06-BCD3EB39542B}"
+lt = "{4BB4B6E7-DD02-4A82-9F10-5D0D305CBE22}"
+mt = "{A4686668-EC2F-49C8-ADED-B6BDA2FCFD78}"
+mr = "{9ABBA360-AACA-4F22-AC20-42F1803B163E}"
+rm = "{B41046A6-CEF6-45FF-A8D7-5CDCE4C2E500}"
+ro = "{09ABF8A7-2A8B-4067-813E-A59F39BF199D}"
+rw = "{E9B6A2E1-DF76-48BA-9A97-398F3CE2EA34}"
+sa = "{E6D25E8C-3594-4EC2-8F26-5E07AEEAD305}"
+sr-SP = "{9359B34C-4153-4D06-B3E3-B66215383E92}"
+tn = "{0B48531D-0704-49F8-81AA-49088E27663B}"
+hr = "{7509D7E9-6302-427E-88C0-42E4D81EC389}"
+fa = "{4667356A-537B-4A30-BF99-C1A11EC6093A}"
+fo = "{372E1C06-9EDE-470E-A154-2C94B1214FF5}"
+sl = "{B1B6F2FF-5074-4D8B-B6E7-758C097E89F3}"
+sb = "{23635FCA-F0EF-47F8-97D8-E7D65B834235}"
+st = "{9E74E8F6-615E-4B02-8808-041A43D3B6A8}"
+sw = "{EDD3461D-E7FE-4752-BEC8-8161FCA04619}"
+sw-TZ = "{F139048C-2DE1-4889-BF47-B91B5D41E938}"
+ta = "{9B6976A0-B9F1-462C-9B34-482D685EF006}"
+tt = "{A5A0A068-3B2F-49B4-8EED-415FF06C4AB0}"
+ts = "{9DC49678-1C01-487A-A2CA-2A2B8716610B}"
+uk = "{22DCDF5F-8D27-42D7-945C-EB1F190E38B1}"
+ur = "{1DA1B844-1807-43B5-A122-453FF57EE820}"
+vi = "{084244C8-1887-4BC3-8E85-7DAD99D698D4}"
+xh = "{6528B6C0-DD9F-4CB4-AE2D-A14DF74DDE7C}"
+ns = "{80D26526-29C5-4795-8DBE-DFB8F7CCB1E5}"
+yi = "{D340AAF8-8572-4874-A064-9D45DDB871C4}"
+zu = "{ED5667CD-9B2A-401E-8ECA-9560CC475C41}"
+gu-IN = "{EB5113B8-2AA8-4CE4-B02A-72E33D2E5143}"
+gu = "{280B3D0B-36AD-462A-9C04-3686F183554D}"
+br = "{84D7B232-2196-4CD0-A36F-949B7DB83AF2}"
+or = "{12E38217-141E-484E-A6C9-47C5850B4903}"
+ne = "{740B3E9E-7590-4E96-8497-3E231BAFFB7E}"
+sh-YU = "{1EECD5C1-31E2-4C18-A57E-4FE79FDBE826}"
+sr-CS = "{A7EA8FF4-A2CC-409F-8260-403442365FA8}"
+nr = "{171E9D9F-58F0-49E0-84E4-E76352C2FF0F}"
+ss = "{5E084FCA-3032-4833-B414-2E6777ECCFE9}"
+st = "{895F4477-4E71-4158-93DC-14CB4114CC9A}"
+ve = "{44411748-2FC8-4D70-BF25-AB6ABDE69D3A}"
+ga = "{499D9641-2B98-4D59-974C-09199761F62C}"
+mk = "{DBA9A11D-F600-42AD-8D99-06061102A517}"
+te-IN = "{A340DAB6-ACD6-48BB-9F35-B7D087EA7625}"
+ml-IN = "{741168B7-19D4-41D7-9A96-DF725DA44904}"
+mr-IN = "{C60698D5-76E9-4AA4-92DE-89E38129E06E}"
+ur-IN = "{1DEDD828-FA9B-4B86-8F00-3E90157B76D7}"
+or-IN = "{0238EEF6-23ED-4065-989D-C95F1C8DCBEE}"
+ku = "{490A29B0-D3F8-4C3F-B6D7-7BF5A791A746}"
+tg = "{996FB6B4-5532-415F-9622-73E7C867F42D}"
+ti-ER = "{E4FE8DE0-D5DB-4CA8-8BBD-2771822EFC6A}"
+gl = "{B4E79B50-ADE3-49EE-AB75-D0B4AD676B3F}"
+kn = "{08708716-FFC8-4717-AD92-9B60F4761119}"
+ms = "{459A2CDA-7915-41FB-8965-7CF19A02F186}"
+tg = "{707373D8-F32A-4A02-AA04-9D726F90AB41}"
 multiwestern = "{D53F8583-419E-440E-AC00-40E9AB31EEBF}"
 multiasia = "{C0D08A10-A266-46DC-8EF4-BE0E5928129D}"
 
 [UPGRADECODE]
 en-US = "{8B909084-2220-49AC-A421-142180519088}"
+bs = "{997C6313-8DFC-42F5-BA83-7433C46FD10C}"
 pt = "{CBFA6A61-D310-4A90-8F49-C7BE2735D58D}"
+pt-PT = "{C66D6B75-5808-44E2-AF7A-4023E3847300}"
 ru = "{DF67ADAA-4755-4184-9E32-1020F40DDA81}"
 el = "{39772F91-1D37-4866-BBA4-900AB53590B0}"
 nl = "{7D14314D-DAF7-4A97-A6EE-97C475080A73}"
 fr = "{B0FDE9B8-D066-4FB2-885D-615A6D58E02F}"
+fr-CA = "{5D4EA72D-E97F-4135-8BEC-ECA8E5A4DA30}"
 es = "{01588DD5-C6C5-4C9D-A1BD-1A63E779DA1A}"
 fi = "{481B0FE0-8313-442E-8A53-7C5139ADA3DC}"
 hu = "{5981EE94-6763-40AD-A8A0-EEB01CCA153C}"
 ca = "{8EEC9A45-3BD3-431F-81D0-394F41185BD9}"
 it = "{50087605-A504-441B-B514-67F13A284C10}"
 cs = "{DBA607B3-0805-4A18-A45D-769C70D90AB7}"
 sk = "{19B49960-B58C-48A7-9761-F0B325E00C31}"
 en-GB = "{E60BC5AC-2513-40AF-A41B-64118A287662}"
+en-ZA = "{7BE3ACA1-3791-47A8-96D6-E284D82B07BC}"
 da = "{4E7025EF-909F-4609-97BA-304684C4833D}"
 sv = "{5E751B0D-FE96-4D0E-BAC1-5E7501294940}"
+nb = "{A9DAD90A-13F9-40DB-BAF7-039D0192CCBE}"
+nn = "{BF0595DA-9F14-4DEA-A56A-1E5E20641AF3}"
 no = "{00C1656C-6386-42ED-BE8C-5D6C553EF125}"
 pl = "{9C92258E-9A41-4A03-AA5C-FD8EF15189BA}"
 de = "{481E648E-D8AD-478A-A3F6-68FC563FFD8F}"
 pt-BR = "{7364F154-089D-400B-B275-751AAB9A6122}"
 th = "{1F9BC074-55AA-496A-9EC5-05E65CF64AE6}"
 et = "{34FBD5D3-3F88-4C91-8B9B-A10AE833250F}"
 ja = "{74F683CC-8356-4BF7-9098-B85AAB7C1A0C}"
 ko = "{1D068BF9-FBCF-4A3B-B9A4-4B2DD3DE8CFB}"
+km = "{D395C065-A13B-4AD1-A283-978E03D56422}"
+cy = "{7417DE83-77C8-41D0-A6DB-D8440BA14BC5}"
 zh-CN = "{5B45DC72-0755-4EC2-BB12-65A1FEADDDE7}"
 zh-TW = "{08B2CED3-CFB5-491F-ADC4-FD0CD2366C60}"
 tr = "{46AB3EE6-FD98-460D-AE0B-6AE68ED6204D}"
 hi = "{2C70F320-6771-42D6-B3F5-97678C822B20}"
+hi-IN = "{4F098A99-D6A2-4286-9442-9871404D4A46}"
+pa-IN = "{0FDD36BA-D1EE-4F8E-AD8B-BD55459EC790}"
+ta-IN = "{F9817B26-6ED7-452A-8AB8-91341BF1D103}"
+ta = "{130152CC-41E4-4780-8559-21C40587EAFB}"
+as-IN = "{F93D27C8-4A21-4569-AF35-7EC77B70B402}"
 ar = "{DF297699-3040-48E0-B0E6-B54385D76018}"
+ar-SA = "{6C5D341D-96E3-44FF-961F-9FD50D66AB57}"
 he = "{13484272-CE60-4867-B494-D56F9049B95A}"
+af = "{FF27D70C-0C5B-4E4E-8883-8F375CA9C468}"
+sq = "{E9B56A18-156C-4936-9CFB-146CA7174B41}"
+hy = "{681C6683-8D75-4284-AE77-DCF3C6E870DE}"
+eu = "{F7141DC1-1538-4FF9-919A-FE1FF0E89503}"
+be-BY = "{CDC2F130-3E02-430F-A5B5-05067BC9336F}"
+bn = "{0B5D5885-3192-48D9-8C8D-706E0DB403DF}"
+bn-BD = "{0535AF67-E56A-4ED8-8A1E-578E549D30AD}"
+bn-IN = "{6F0D3ACA-DCE7-4E0A-87E2-CBD0F8A5B33B}"
+bg = "{50E0988D-23C4-44CA-B66A-A4E427A7F038}"
+is = "{6DD324DE-DFA9-41B8-BADF-D037AD3B7A88}"
+id = "{70886F70-BFB7-4E45-A05D-3294A91FEB3E}"
+lo = "{588DACBD-89FA-45EC-B3B5-ACE2759664CC}"
+lv = "{09F6F2FC-F7A3-4C56-B4B6-A1D1483BAF55}"
+lt = "{001E86DD-C817-4076-981B-D35253B6910B}"
+mt = "{B07B5F49-C4B6-4A9E-A46F-5565E64C4CC0}"
+mr = "{F2EFAC72-0CFD-4121-A995-1062E6CE4CA0}"
+rm = "{A608FC91-CFD9-44E7-9813-22777911489A}"
+ro = "{6CD33E91-55A4-4A9F-8A27-0069DF389BDC}"
+rw = "{0C88E37B-36CB-4DE0-8332-6A294E342B28}"
+sa = "{6BA9DC90-6F8E-407A-982D-E01A4FF72443}"
+sr-SP = "{4FBE4F81-E634-4A58-9B23-598706996376}"
+tn = "{38219093-AB4D-4060-9456-EFB10DADC897}"
+hr = "{E96AE6FB-521A-44A8-AA91-8A7EE15D704B}"
+fa = "{F09DEEB5-1185-4DF2-B9C0-0C295858F966}"
+fo = "{92F1FA59-3A7D-482D-823A-1A2734FEFB59}"
+sl = "{6B1F1226-EBC6-4FED-AD37-E01DA6C5089A}"
+sb = "{5B574AAD-B8B2-4683-A806-BF92D80F914D}"
+st = "{10D5A692-629B-41AB-A74C-2D8E93A8B99A}"
+sw = "{50A48005-42C8-44D8-A12E-936D539E4AB0}"
+sw-TZ = "{53C0207E-0AE7-489F-8B56-DC09E873D3CD}"
+ta = "{538254E7-DCA7-4CD9-8CCE-3E09CD29C508}"
+tt = "{88D194B3-C099-4D80-AD3D-7A26E082D3C8}"
+ts = "{C2A6002F-C719-4E82-BDAD-74313D50442F}"
+uk = "{71F2B27E-DAD2-4B21-9488-8571B7E8C81F}"
+ur = "{A97E507B-875E-465C-933F-A33755EE8898}"
+vi = "{EE359E05-9385-4E70-B63A-39045A7C1285}"
+xh = "{BDBDB347-A3BC-42AB-A315-3AAEF9A533BA}"
+ns = "{875DF331-64DC-4CF1-B835-4D0A7D3D9BB4}"
+yi = "{382C63FC-2CC9-4C7D-877B-AA779CEA0479}"
+zu = "{AAD0E34A-99D5-4C5F-AC7A-5180377E9A60}"
+gu-IN = "{6AD46A4D-CE47-4C88-83CE-C1F475A2E4A3}"
+gu = "{27983EB1-C0D6-43A4-BD3E-E6B6CECAE8D6}"
+br = "{6FE542FD-D054-4F33-BC9C-76E9426240C8}"
+or = "{76B5E11A-3741-46FC-BD84-4673C770755A}"
+ne = "{2AC2E0AD-44DB-482B-B57C-D33B312C556D}"
+sh-YU = "{2C15F81E-ABDC-4036-9C1A-4B1D5F9D2A1B}"
+sr-CS = "{CF7835AD-75B4-4EB2-B0DE-F9E38AB720ED}"
+nr = "{01FC6CDA-80A7-421A-96A7-126DC9416B4C}"
+ss = "{C826B91A-C667-4960-89F1-FDFBC0470FA7}"
+st = "{430448C7-5E21-43A9-87FF-8123C5D31DF7}"
+ve = "{09D0356B-C800-474A-ACFD-A4F3B8C1A20D}"
+ga = "{7605EA0F-8D6C-41DB-8D78-6919C7B07809}"
+mk = "{FF8AC100-490B-4F21-AEEC-51A830D0FF00}"
+te-IN = "{06A44CB4-8BC0-4526-BB93-DB0BE5BF3D57}"
+ml-IN = "{6306670C-8496-43BD-80D8-6840A1B93594}"
+mr-IN = "{89A9DFB9-17C7-4C59-AF7F-620165DE19DD}"
+ur-IN = "{AF887C48-DB5D-4146-9D60-C20BA348D057}"
+or-IN = "{DE221F90-27CB-497C-AE61-F158527C5265}"
+ku = "{325DC0A7-E6CD-40E7-BC9C-EE7D90F0D3DE}"
+tg = "{8E7D7847-D4E3-4709-80EB-345B9F314E98}"
+ti-ER = "{B09DCB13-DBB8-4F6C-8CE5-AE153B8A6699}"
+gl = "{2856F4CC-18CC-492C-AA5B-52C90F2431F1}"
+kn = "{0EF96046-D3E4-4ECA-A691-951A90838ACF}"
+ms = "{0590E9C9-8F5D-446B-883F-7C52963D788B}"
+tg = "{C5C00559-A17F-4ED2-B475-82D94A5BB1B4}"
 multiwestern = "{385A1970-0257-4C57-9383-DD2D668B23CE}"
 multiasia = "{74543111-6ABF-4A12-AC11-D315E2939D2A}"
dummy line to avoid confusing diff-mode
+++ solenv/bin/modules/installer/globals.pm
--- solenv/bin/modules/installer/globals.pm
@@ -208,7 +208,7 @@
 	$fix_number_of_cab_files = 1;
 	$cab_file_per_component = 0;
 	$cabfilecompressionlevel = 2;
-	$number_of_cabfiles = 4;	# only for $fix_number_of_cab_files = 1 
+	$number_of_cabfiles = 1;	# only for $fix_number_of_cab_files = 1 
 	$include_cab_in_msi = 0;
 	$msidatabasename = "";
 	
dummy line to avoid confusing diff-mode
+++ solenv/bin/modules/installer/windows/file.pm
--- solenv/bin/modules/installer/windows/file.pm
@@ -35,6 +35,11 @@
 
 package installer::windows::file;
 
+use Win32::API;
+require Filesys::CygwinPaths if $^O =~ /cygwin/i;
+
+$Win32::API::DEBUG = 0;
+
 use installer::existence;
 use installer::exiter;
 use installer::files;
@@ -285,7 +285,16 @@
 	if ( $allvariables->{'USE_FILEVERSION'} )
 	{
 		if ( ! $allvariables->{'LIBRARYVERSION'} ) { installer::exiter::exit_program("ERROR: USE_FILEVERSION is set, but not LIBRARYVERSION", "get_fileversion"); } 
-		$fileversion = $allvariables->{'LIBRARYVERSION'} . "\." . $installer::globals::buildid;
+		my @libversion = ($allvariables->{'LIBRARYVERSION'} =~ /^(\d+)\.(\d+)\.(\d+)$/);
+		$fileversion = $libversion[0] . '.' . ($libversion[1]*100 + $libversion[2]) . '.' . $installer::globals::buildid;
+		if ( $fileref->{'patchlevel'} )
+		{
+			$fileversion .= '.' . $fileref->{'patchlevel'};
+		}
+		else
+		{
+			$fileversion .= '.0';
+		}
 	}
 		
 	return $fileversion;
@@ -340,6 +340,9 @@
 
 	installer::logger::include_timestamp_into_logfile("Performance Info: File Table start");
 	
+	my $msigetfilehash = Win32::API->new ('msi', 'MsiGetFileHashA', 'PIP', 'I');
+	my $hashinfo = pack ("l5", 20);
+
 	# Structure of the files table:
 	# File Component_ FileName FileSize Version Language Attributes Sequence
 	# In this function, all components are created.
@@ -350,6 +350,7 @@
 
 	my @allfiles = ();
 	my @filetable = ();
+	my @filehashtable = ();
 	my %allfilecomponents = ();
 	my $counter = 0;
 	
@@ -358,6 +358,7 @@
 	my %shortnames = ();	
 
 	installer::windows::idtglobal::write_idt_header(\@filetable, "file");
+	installer::windows::idtglobal::write_idt_header(\@filehashtable, "filehash");
 	
 	for ( my $i = 0; $i <= $#{$filesref}; $i++ )
 	{
@@ -411,6 +411,27 @@
 
 		push(@allfiles, $onefile);
 		
+		if ($file{'File'} !~ /\.(dll|exe)$/i)
+		{
+			my $path = Filesys::CygwinPaths::win32path ($onefile->{'sourcepath'});
+			my $rc = $msigetfilehash->Call ($path, 0, $hashinfo);
+			if ($rc == 0)
+			{
+				my @i = unpack ('x[l]l4', $hashinfo);
+				$oneline = $file{'File'} . "\t" .
+					"0" . "\t" .
+					$i[0] . "\t" .
+					$i[1] . "\t" .
+					$i[2] . "\t" .
+					$i[3] . "\n";
+				push (@filehashtable, $oneline);
+			}
+			else
+			{
+				$infoline = 'MsiGetFileHashA failed on ' . $path . "\n";
+				push(@installer::globals::logfileinfo, $infoline);
+			}
+		}
 		# Saving the sequence number in a hash with uniquefilename as key.
 		# This is used for better performance in "save_packorder"
 		$installer::globals::uniquefilenamesequence{$onefile->{'uniquename'}} = $onefile->{'sequencenumber'};
@@ -424,6 +424,11 @@
 
 	installer::logger::include_timestamp_into_logfile("Performance Info: File Table end");
 	
+	my $filehashtablename = $basedir . $installer::globals::separator . "MsiFileHash.idt";
+	installer::files::save_file($filehashtablename ,\@filehashtable);
+	$infoline = "\nCreated idt file: $filehashtablename\n"; 
+	push(@installer::globals::logfileinfo, $infoline);
+
 	return \@allfiles;
 }
 
dummy line to avoid confusing diff-mode
+++ solenv/bin/modules/installer/windows/idtglobal.pm
--- solenv/bin/modules/installer/windows/idtglobal.pm
@@ -359,6 +359,16 @@
 		push(@{$idtref}, $oneline);
 	}
 
+	if ( $definestring eq "filehash" )
+	{
+		$oneline = "File_\tOptions\tHashPart1\tHashPart2\tHashPart3\tHashPart4\n";
+		push(@{$idtref}, $oneline);
+		$oneline = "s72\ti2\ti4\ti4\ti4\ti4\n";
+		push(@{$idtref}, $oneline);
+		$oneline = "MsiFileHash\tFile_\n";
+		push(@{$idtref}, $oneline);
+	}
+
 	if ( $definestring eq "directory" )
 	{
 		$oneline = "Directory\tDirectory_Parent\tDefaultDir\n";
dummy line to avoid confusing diff-mode
+++ solenv/bin/modules/installer/windows/msiglobal.pm
--- solenv/bin/modules/installer/windows/msiglobal.pm
@@ -47,6 +47,9 @@
 use installer::systemactions;
 use installer::windows::idtglobal;
 use installer::windows::language;
+
+require Filesys::CygwinPaths if $^O =~ /cygwin/i;
+require Win32::Guidgen if $^O =~ /cygwin/i;
 
 ###########################################################################
 # Generating the header of the ddf file.
@@ -161,7 +161,7 @@
 			if ( $onefile->{'Styles'} ) { $styles = $onefile->{'Styles'}; };
 			if ( $styles =~ /\bDONT_PACK\b/ ) { $doinclude = 0; }
 			
-			if ( $^O =~ /cygwin/i ) { chomp( $sourcepath = qx{cygpath -w "$sourcepath"} ); }
+			if ( $^O =~ /cygwin/i ) { $sourcepath = Filesys::CygwinPaths::win32path( $sourcepath ); }
 
 			# to avoid lines with more than 256 characters, it can be useful to use relative pathes
 			if ( $allvariables->{'RELATIVE_PATHES_IN_DDF'} ) { $sourcepath = make_relative_ddf_path($sourcepath); }
@@ -190,7 +190,7 @@
 			while ( $nextcabinetfile eq $cabinetfile )
 			{
 				$sourcepath =  $nextfile->{'sourcepath'};
-				if ( $^O =~ /cygwin/i ) { chomp( $sourcepath = qx{cygpath -w "$sourcepath"} ); }
+				if ( $^O =~ /cygwin/i ) { $sourcepath = Filesys::CygwinPaths::win32path( $sourcepath ); }
 				# to avoid lines with more than 256 characters, it can be useful to use relative pathes
 				if ( $allvariables->{'RELATIVE_PATHES_IN_DDF'} ) { $sourcepath = make_relative_ddf_path($sourcepath); }
 				$uniquename =  $nextfile->{'uniquename'};
@@ -234,7 +234,7 @@
 			my $onefile = ${$filesref}[$i];
 			$cabinetfile = $onefile->{'cabinet'};
 			my $sourcepath =  $onefile->{'sourcepath'};
-			if ( $^O =~ /cygwin/i ) { chomp( $sourcepath = qx{cygpath -w "$sourcepath"} ); }
+			if ( $^O =~ /cygwin/i ) { $sourcepath = Filesys::CygwinPaths::win32path( $sourcepath ); }
 			my $uniquename =  $onefile->{'uniquename'};
 
 			# to avoid lines with more than 256 characters, it can be useful to use relative pathes
@@ -1073,35 +1073,9 @@
 
 	if ( $log ) { installer::logger::include_header_into_logfile("Generating $number GUID"); }
 	
-	my $uuidgen = "uuidgen.exe";		# Has to be in the path
-	
-	# "-c" for uppercase output
-	
-	# my $systemcall = "$uuidgen -n$number -c |";
-	my $systemcall = "$uuidgen -n$number |";
-	open (UUIDGEN, "$systemcall" ) or die("uuidgen is missing.");
-	my @uuidlist = <UUIDGEN>;
-	close (UUIDGEN);
-
-	my $infoline = "Systemcall: $systemcall\n";
-	if ( $log ) { push( @installer::globals::logfileinfo, $infoline); }
-	
-	my $comparenumber = $#uuidlist + 1;	
-	
-	if ( $comparenumber == $number )
-	{
-		$infoline = "Success: Executed $uuidgen successfully!\n";
-		if ( $log ) { push( @installer::globals::logfileinfo, $infoline); }
-	}
-	else
-	{
-		$infoline = "ERROR: Could not execute $uuidgen successfully!\n";
-		if ( $log ) { push( @installer::globals::logfileinfo, $infoline); }
-	}	
-
-	# uppercase, no longer "-c", because this is only supported in uuidgen.exe v.1.01
-	for ( my $i = 0; $i <= $#uuidlist; $i++ ) { $uuidlist[$i] = uc($uuidlist[$i]); }
+	my @uuidlist;
+	for ( my  $i = 0; $i < $number; $i++ ) { push( @uuidlist, substr(Win32::Guidgen::gen(), 1, 36) ); }
 
 	return \@uuidlist;
 }
 
@@ -1479,9 +1479,9 @@
 	
 	# ProductCode has to be specified in each language
 
-	# my $searchstring = "PRODUCTCODE";
-	# my $codeblock = installer::windows::idtglobal::get_language_block_from_language_file($searchstring, $codefile);
-	# $installer::globals::productcode = installer::windows::idtglobal::get_code_from_code_block($codeblock, $onelanguage);
+	my $searchstring = "PRODUCTCODE";
+	my $codeblock = installer::windows::idtglobal::get_language_block_from_language_file($searchstring, $codefile);
+	$installer::globals::productcode = installer::windows::idtglobal::get_code_from_code_block($codeblock, $onelanguage);
 
 	if ( $installer::globals::patch ) # patch upgrade codes are defined in soffice.lst
 	{
@@ -1505,18 +1505,11 @@
 	# if (( $installer::globals::productcode eq "" ) && ( ! $isopensource )) { installer::exiter::exit_program("ERROR: ProductCode for language $onelanguage not defined in $installer::globals::codefilename !", "set_global_code_variables"); }
 	if ( $installer::globals::upgradecode eq "" ) { installer::exiter::exit_program("ERROR: UpgradeCode not defined in $installer::globals::codefilename !", "set_global_code_variables"); }	
 
-	# $infoline = "Setting ProductCode to: $installer::globals::productcode \n";
-	# push( @installer::globals::logfileinfo, $infoline);
+	$infoline = "Setting ProductCode to: $installer::globals::productcode \n";
+	push( @installer::globals::logfileinfo, $infoline);
 	$infoline = "Setting UpgradeCode to: $installer::globals::upgradecode \n";
 	push( @installer::globals::logfileinfo, $infoline);
 	
-	my $guidref = get_guid_list(1, 1);	# only one GUID shall be generated
-
-	${$guidref}[0] =~ s/\s*$//;		# removing ending spaces
-
-	$installer::globals::productcode = "\{" . ${$guidref}[0] . "\}";
-	$infoline = "Setting ProductCode to: $installer::globals::productcode \n";
-	push( @installer::globals::logfileinfo, $infoline);
 
 	# Adding both variables into the variables array 
 
dummy line to avoid confusing diff-mode
