--- svtools/prj/d.lst	2005-02-02 19:31:35.000000000 +0530
+++ svtools/prj/d.lst	2005-02-24 20:53:25.000000000 +0530
@@ -272,6 +272,7 @@ hedabu: ..\inc\custritm.hxx %_DEST%\inc%
 hedabu: ..\inc\sfxecode.hxx %_DEST%\inc%_EXT%\svtools\sfxecode.hxx
 hedabu: ..\inc\ehdl.hxx %_DEST%\inc%_EXT%\svtools\ehdl.hxx
 hedabu: ..\inc\svtools.hrc %_DEST%\inc%_EXT%\svtools\svtools.hrc
+hedabu: ..\source\dialogs\filedlg2.hrc %_DEST%\inc%_EXT%\svtools\filedlg2.hrc
 
 hedabu: ..\source\xmlfilt\attrlist.hxx %_DEST%\inc%_EXT%\svtools\attrlist.hxx
 hedabu: ..\source\xmlfilt\i18nmap.hxx %_DEST%\inc%_EXT%\svtools\i18nmap.hxx
--- fpicker/source/unx/gnome/resourceprovider.cxx	2004-09-08 22:40:22.000000000 +0530
+++ fpicker/source/unx/gnome/resourceprovider.cxx	2005-02-25 12:17:01.000000000 +0530
@@ -96,6 +96,7 @@
 #endif
 
 #include <svtools/svtools.hrc>
+#include <svtools/filedlg2.hrc>
 
 //------------------------------------------------------------
 // namespace directives
@@ -111,9 +112,6 @@ using namespace ::com::sun::star::ui::di
 
 #define RES_NAME svt
 
-#define FOLDERPICKER_TITLE            500
-#define FOLDER_PICKER_DEF_DESCRIPTION 501
-
 //------------------------------------------------------------
 // we have to translate control ids to resource ids 
 //------------------------------------------------------------
@@ -137,7 +135,11 @@ _Entry CtrlIdToResIdTable[] = {
     { LISTBOX_IMAGE_TEMPLATE_LABEL,             STR_SVT_FILEPICKER_IMAGE_TEMPLATE },
     { CHECKBOX_SELECTION,                       STR_SVT_FILEPICKER_SELECTION },
     { FOLDERPICKER_TITLE,                       STR_SVT_FOLDERPICKER_DEFAULT_TITLE },
-    { FOLDER_PICKER_DEF_DESCRIPTION,            STR_SVT_FOLDERPICKER_DEFAULT_DESCRIPTION }
+    { FOLDER_PICKER_DEF_DESCRIPTION,            STR_SVT_FOLDERPICKER_DEFAULT_DESCRIPTION },
+    { FILE_PICKER_TITLE_OPEN,                   STR_FILEDLG_OPEN },
+    { FILE_PICKER_TITLE_SAVE,                   STR_FILEDLG_SAVE },
+    { FILE_PICKER_FILE_TYPE,                    STR_FILEDLG_TYPE },
+    { FILE_PICKER_OVERWRITE,                    STR_SVT_ALREADYEXISTOVERWRITE }
 };
 
 const sal_Int32 SIZE_TABLE = sizeof( CtrlIdToResIdTable ) / sizeof( _Entry );
--- fpicker/source/unx/gnome/resourceprovider.hxx	2004-09-08 22:40:48.000000000 +0530
+++ fpicker/source/unx/gnome/resourceprovider.hxx	2005-02-25 12:17:01.000000000 +0530
@@ -79,6 +79,13 @@
 // deklarations
 //------------------------------------------------------------------------
 
+#define FOLDERPICKER_TITLE             500
+#define FOLDER_PICKER_DEF_DESCRIPTION  501
+#define FILE_PICKER_TITLE_OPEN         502
+#define FILE_PICKER_TITLE_SAVE         503
+#define FILE_PICKER_FILE_TYPE          504
+#define FILE_PICKER_OVERWRITE          505
+
 class CResourceProvider_Impl;
 
 class CResourceProvider
--- fpicker/source/unx/gnome/SalGtkFilePicker.cxx	2005-02-25 11:45:15.000000000 +0530
+++ fpicker/source/unx/gnome/SalGtkFilePicker.cxx	2005-02-28 13:43:49.515957013 +0530
@@ -169,6 +169,10 @@ SalGtkFilePicker::SalGtkFilePicker( cons
 		lang::XServiceInfo>( m_rbHelperMtx ),
 	m_xServiceMgr( xServiceMgr ),
 	m_aAsyncEventNotifier( rBHelper ),
+	m_pFilterComboBox( NULL ),
+	m_pFilterComboHBox( NULL ),
+	m_pFilterComboAlign( NULL ),
+	m_pFilterComboLabel( NULL ),
 	m_pVBox ( NULL ),
 	m_pFilterList( NULL ),
     bVersionWidthUnset( false ),
@@ -618,6 +622,8 @@ rtl::OUString SAL_CALL SalGtkFilePicker:
 
 	OSL_TRACE( "GetCURRENTfilter\n" );
 
+	GtkFileChooserAction eAction = gtk_file_chooser_get_action( GTK_FILE_CHOOSER( m_pDialog ) );
+
 	// Update the filtername from the users selection if they have had a chance to do so.
 	if( GtkFileFilter *filter = gtk_file_chooser_get_filter( GTK_FILE_CHOOSER( m_pDialog ) ) )
 	{
@@ -626,6 +632,26 @@ rtl::OUString SAL_CALL SalGtkFilePicker:
 							RTL_TEXTENCODING_UTF8 );
 	}
 
+	if( GTK_FILE_CHOOSER_ACTION_SAVE == eAction ||
+		( GTK_FILE_CHOOSER_ACTION_OPEN == eAction && 
+		  m_aCurrentFilter.equals( shrinkFilterName( m_pFilterList->begin()->getTitle() ) ) ) )
+	{
+		gint nFilterChoice = gtk_combo_box_get_active( GTK_COMBO_BOX( m_pFilterComboBox ) );
+
+		gint nFilterPos = 0;
+		for     (       FilterList::iterator aListIter = m_pFilterList->begin();
+				aListIter != m_pFilterList->end();
+				++aListIter, ++nFilterPos
+			)
+		{
+			if ( nFilterPos == nFilterChoice )
+			{
+				m_aCurrentFilter = OUString( aListIter->getTitle() );
+				break;
+			}
+		}
+	}
+
 	OSL_TRACE( "Returning current filter of %s\n", 
 		OUStringToOString( m_aCurrentFilter, RTL_TEXTENCODING_UTF8 ).getStr() );
 	
@@ -746,18 +772,22 @@ uno::Sequence<rtl::OUString> SAL_CALL Sa
 
 		if( GTK_FILE_CHOOSER_ACTION_SAVE == eAction )
 		{
-			const gchar* filtername = 
-				gtk_file_filter_get_name( gtk_file_chooser_get_filter( GTK_FILE_CHOOSER( m_pDialog ) ) );
-
-			OSL_TRACE( "2: current filter is %s\n", filtername );
-
+			OUString aFilter;
 
-			FilterList::iterator aListIter = ::std::find_if( 
-			       			m_pFilterList->begin(), m_pFilterList->end(), 
-						FilterTitleMatch( OUString( filtername,
-							strlen( filtername ), RTL_TEXTENCODING_UTF8 ) ) );
+			gint nFilterChoice = gtk_combo_box_get_active( GTK_COMBO_BOX( m_pFilterComboBox ) );
 
-			OUString aFilter = aListIter->getFilter();
+               		gint nFilterPos = 0;
+		        for     (       FilterList::iterator aListIter = m_pFilterList->begin();
+					aListIter != m_pFilterList->end();
+					++aListIter, ++nFilterPos
+				)
+			{
+				if ( nFilterPos == nFilterChoice )
+				{
+					aFilter = OUString( aListIter->getFilter() );
+					break;
+				}
+			}
 
 			OSL_TRACE( "turned into %s\n", 
 				OUStringToOString( aFilter, RTL_TEXTENCODING_UTF8 ).getStr() );
@@ -856,15 +886,20 @@ sal_Int16 SAL_CALL SalGtkFilePicker::exe
 						OString sFileName = rtl::OUStringToOString( aPathSeq[0], RTL_TEXTENCODING_UTF8 );
 						if( g_file_test( g_filename_from_uri( sFileName.getStr(), NULL, NULL ), G_FILE_TEST_IS_REGULAR ) )
 						{
+							CResourceProvider aResProvider;
 							GtkWidget *dlg;
 			
 							dlg = gtk_message_dialog_new( GTK_WINDOW( m_pDialog ), GTK_DIALOG_MODAL,
 								GTK_MESSAGE_QUESTION,
 								GTK_BUTTONS_YES_NO,
-								"The file already exists. Overwrite?" );
-
-							gtk_window_set_title( GTK_WINDOW( dlg ), "Overwrite file?" );
-							gtk_dialog_set_has_separator( GTK_DIALOG( dlg ), FALSE );
+								OUStringToOString( 
+									aResProvider.getResString( FILE_PICKER_OVERWRITE ),
+									RTL_TEXTENCODING_UTF8 ).getStr() );
+
+							gtk_window_set_title( GTK_WINDOW( dlg ),
+								OUStringToOString( 
+									aResProvider.getResString( FILE_PICKER_TITLE_SAVE ),
+									RTL_TEXTENCODING_UTF8 ).getStr() );
 
 							btn = gtk_dialog_run( GTK_DIALOG( dlg ) );
 							gtk_widget_destroy( dlg );
@@ -1495,7 +1530,16 @@ void SAL_CALL SalGtkFilePicker::initiali
 	CResourceProvider aResProvider;
 	OUString aLabel;
 
-	m_pDialog = gtk_file_chooser_dialog_new( "File Selection", NULL, 
+	OUString aFilePickerTitle;
+ 
+	if( GTK_FILE_CHOOSER_ACTION_OPEN == eAction )
+	    aFilePickerTitle = aResProvider.getResString( FILE_PICKER_TITLE_OPEN );
+	else
+	    aFilePickerTitle = aResProvider.getResString( FILE_PICKER_TITLE_SAVE );
+	    
+	m_pDialog = gtk_file_chooser_dialog_new(
+			OUStringToOString( aFilePickerTitle, RTL_TEXTENCODING_UTF8 ).getStr(),
+			NULL,
 			eAction,
 			GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
 			first_button_text, GTK_RESPONSE_ACCEPT,
@@ -1593,6 +1637,27 @@ void SAL_CALL SalGtkFilePicker::initiali
         gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pHBoxs[i], FALSE, FALSE, 0 );
 	}
 
+	m_pFilterComboBox = gtk_combo_box_new_text();
+	m_pFilterComboAlign = gtk_alignment_new(0, 0, 0, 1);
+	m_pFilterComboHBox = gtk_hbox_new( FALSE, 0 );
+	m_pFilterComboLabel = gtk_label_new( "" );
+
+	aLabel = aResProvider.getResString( FILE_PICKER_FILE_TYPE );
+	aLabel += OUString::createFromAscii(": ");
+	g_object_set( m_pFilterComboLabel, "label",
+		OUStringToOString( aLabel, RTL_TEXTENCODING_UTF8 ).getStr(),
+		"use_underline", TRUE, NULL );
+
+	gtk_container_add( GTK_CONTAINER( m_pFilterComboAlign ), m_pFilterComboBox );
+	gtk_box_pack_end( GTK_BOX( m_pFilterComboHBox ), m_pFilterComboAlign, FALSE, FALSE, 0 );
+	gtk_box_pack_end( GTK_BOX( m_pFilterComboHBox ), m_pFilterComboLabel, FALSE, FALSE, 0 );
+	gtk_box_pack_end( GTK_BOX( m_pVBox ), m_pFilterComboHBox, FALSE, FALSE, 0 );
+
+	gtk_widget_show( m_pFilterComboLabel );
+	gtk_widget_show( m_pFilterComboHBox );
+	gtk_widget_show( m_pFilterComboAlign );
+	gtk_widget_show( m_pFilterComboBox );
+
 	gtk_file_chooser_set_extra_widget( GTK_FILE_CHOOSER( m_pDialog ), m_pVBox );
 
 	// Setup special flags
@@ -1685,33 +1750,38 @@ uno::Sequence<rtl::OUString> SAL_CALL Sa
 //-------------------------------------------------
 void SalGtkFilePicker::SetCurFilter( const OUString& rFilter )
 {
+	OUString aShrunkName = shrinkFilterName( rFilter );
+
+	gint nFilterPos = 0;
+	for     (       FilterList::iterator aListIter = m_pFilterList->begin();
+			aListIter != m_pFilterList->end();
+			++aListIter, ++nFilterPos
+		)
+	{
+		if ( aShrunkName.equals( aListIter->getTitle() ) )
+		{
+			gtk_combo_box_set_active( GTK_COMBO_BOX( m_pFilterComboBox ), nFilterPos );
+			break;
+		}
+	}
+
 	// Get all the filters already added
 	GSList *filters = gtk_file_chooser_list_filters ( GTK_FILE_CHOOSER( m_pDialog ) );
 	bool bFound = false;
 
-	while( ( !bFound ) && ( NULL != filters ) )
+	for( GSList *iter = filters; !bFound && iter; iter = iter->next )
 	{
-		GtkFileFilter* pFilter = reinterpret_cast<GtkFileFilter *>( filters->data );
+		GtkFileFilter* pFilter = reinterpret_cast<GtkFileFilter *>( iter->data );
 		G_CONST_RETURN gchar * filtername = gtk_file_filter_get_name( pFilter );
 		OUString sFilterName( filtername, strlen( filtername ), RTL_TEXTENCODING_UTF8 );
 
-		OUString aShrunkName = shrinkFilterName( rFilter );
 		if( aShrunkName.equals( sFilterName) )
 		{
 			OSL_TRACE( "actually setting %s\n", filtername );
 			gtk_file_chooser_set_filter( GTK_FILE_CHOOSER( m_pDialog ), pFilter );
 			bFound = true;
 		}
-
-		// Free the node
-		g_object_ref( pFilter ); 
-		gtk_object_sink( GTK_OBJECT( pFilter ) );
-		g_object_unref( pFilter );
-
-		//    g_free(filters->data); 
-		filters = g_slist_next( filters );
 	}
-
 	g_slist_free( filters );
 }
 
@@ -1741,6 +1811,8 @@ void SalGtkFilePicker::implAddFilter( co
 		while( nIndex >= 0 );
 	}
 
+	gtk_combo_box_append_text( GTK_COMBO_BOX( m_pFilterComboBox ), aFilterName );
+
 	gtk_file_chooser_add_filter( GTK_FILE_CHOOSER( m_pDialog ), filter );
 }
 
@@ -1782,6 +1854,7 @@ void SalGtkFilePicker::SetFilters()
 		}
 	}
 
+	gtk_combo_box_set_active( GTK_COMBO_BOX( m_pFilterComboBox ), 0 );
 
 	// set the default filter
 	if( m_aCurrentFilter && (m_aCurrentFilter.getLength() > 0) )
@@ -1814,6 +1887,11 @@ SalGtkFilePicker::~SalGtkFilePicker()
 
 	delete m_pFilterList;
 
+	gtk_widget_destroy( m_pFilterComboBox );
+	gtk_widget_destroy( m_pFilterComboAlign );
+	gtk_widget_destroy( m_pFilterComboLabel );
+	gtk_widget_destroy( m_pFilterComboHBox );
+
 	gtk_widget_destroy( m_pVBox );
 }
 
--- fpicker/source/unx/gnome/SalGtkFilePicker.hxx	2005-02-25 11:45:15.000000000 +0530
+++ fpicker/source/unx/gnome/SalGtkFilePicker.hxx	2005-02-25 12:17:01.000000000 +0530
@@ -324,6 +324,10 @@ class SalGtkFilePicker : 
 		SalGtkAsyncEventNotifier m_aAsyncEventNotifier;
 		FilterList *m_pFilterList;
 		GtkWidget  *m_pVBox;
+		GtkWidget  *m_pFilterComboBox;
+		GtkWidget  *m_pFilterComboLabel;
+		GtkWidget  *m_pFilterComboHBox;
+		GtkWidget  *m_pFilterComboAlign;
 
 		enum { 
 			AUTOEXTENSION,
--- fpicker/source/unx/gnome/SalGtkFolderPicker.cxx	2005-01-18 18:55:10.000000000 +0530
+++ fpicker/source/unx/gnome/SalGtkFolderPicker.cxx	2005-02-25 12:17:01.000000000 +0530
@@ -147,8 +147,10 @@ namespace
 SalGtkFolderPicker::SalGtkFolderPicker( const uno::Reference<lang::XMultiServiceFactory>& xServiceMgr ) : 
 	m_xServiceMgr( xServiceMgr )
 {
-	m_pDialog = gtk_file_chooser_dialog_new( "Folder Selection", NULL, 
-		GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER, GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL, 
+	CResourceProvider aResProvider;
+	m_pDialog = gtk_file_chooser_dialog_new(
+		OUStringToOString( aResProvider.getResString( FOLDERPICKER_TITLE ), RTL_TEXTENCODING_UTF8 ).getStr(),
+		NULL, GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER, GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL, 
 		GTK_STOCK_OK, GTK_RESPONSE_ACCEPT, NULL );
 
 	gtk_dialog_set_default_response( GTK_DIALOG (m_pDialog), GTK_RESPONSE_ACCEPT );
