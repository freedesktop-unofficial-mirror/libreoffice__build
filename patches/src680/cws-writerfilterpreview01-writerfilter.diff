--- writerfilter/inc/ooxml/OOXMLDocument.hxx	4 Jun 2007 08:15:11 -0000	1.9
+++ writerfilter/inc/ooxml/OOXMLDocument.hxx	2 Jul 2007 17:16:28 -0000	1.9.2.1
@@ -54,6 +54,39 @@
 #include <com/sun/star/xml/sax/XParser.hpp>
 #endif
 
+/**
+   @file OOXMLDocument.hxx
+
+   <h1>Import of OOXML WordprocessingML Documents</h1>
+
+   The following picture shows the classes involved in importing OOXML
+   WordprocessingML documents.
+
+   @image html ooxmlimportchain.png
+
+   The DOCX consists of parts. Each part is an XML document.  The
+   OOXMLDocument opens the DOCX and creates a SAX parser for the part
+   containing the main document content. The OOXMLDocument creates a
+   SAX handler, too. This handler is set as the handler for the events
+   created by the parser. Finally the OOXMLDocument initiates the
+   parsing process.
+
+   The SAX handler hosts a stack of contexts. Each context is an
+   instance of a class derived from OOXMLContext. There is a context
+   class for each <define> in the model.xml.
+
+   For a detailed information about how the contexts are handled see
+   the documentation for OOXMLContext.
+
+   The contexts know how to convert an element in OOXML to the
+   intermediate format that the domain mapper understands. They
+   enumerate the according entity in OOXML by sending the according
+   events to the domain mapper.
+
+   The domain mapper knows how to convert the intermediate format to
+   API calls. It takes the events sent by the contexts and uses the
+   core API to insert the according elements to the core.
+ */
 
 namespace ooxml
 {
@@ -69,8 +102,19 @@ public:
 
     virtual ~OOXMLStream() {}
 
+    /**
+       Returns parser for this stream.
+     */
     virtual uno::Reference<xml::sax::XParser> getParser() = 0;
+
+    /**
+       Returns input stream for this stream.
+     */
     virtual uno::Reference<io::XInputStream> getInputStream() = 0;
+
+    /**
+       Returns component context for this stream.
+     */
     virtual uno::Reference<uno::XComponentContext> getContext() = 0;
 };
 
@@ -84,19 +128,73 @@ public:
 
     virtual ~OOXMLDocument() {}
 
-    virtual void resolve(Stream &) = 0;
+    /**
+       Resolves this document to a stream handler.
+
+       @param rStream     stream handler to resolve this document to
+     */
+    virtual void resolve(Stream & rStream) = 0;
     
+    /**
+       Returns string representation of the type of this reference.
+
+       DEBUGGING PURPOSE ONLY.
+     */
     virtual string getType() const = 0;
+    
+    /**
+       Resolves a footnote to a stream handler.
 
+       @param rStream       stream handler to resolve to
+       @param rNoteId       id of the footnote to resolve
+     */
     virtual void resolveFootnote(Stream & rStream, 
                                  const rtl::OUString & rNoteId) = 0;
+
+    /**
+       Resolves an endnote to a stream handler.
+
+       @param rStream       stream handler to resolve to
+       @param rNoteId       id of the endnote to resolve
+     */
     virtual void resolveEndnote(Stream & rStream, 
                                 const rtl::OUString & rNoteId) = 0;
+
+    /**
+       Resolves a comment to a stream handler.
+
+       @param rStream       stream handler to resolve to
+       @param rComment      id of the comment to resolve
+     */
     virtual void resolveComment(Stream & rStream, 
-                                const rtl::OUString & rNoteId) = 0;
+                                const rtl::OUString & rCommentId) = 0;
+
+    /**
+       Resolves a header to a stream handler.
+
+       @param rStream       stream handler to resolve to
+       @param type          type of header to resolve:
+                            NS_ooxml::LN_Value_ST_HrdFtr_even     header on even page
+                            NS_ooxml::LN_Value_ST_HrdFtr_default  header on right page
+                            NS_ooxml::LN_Value_ST_HrdFtr_first    header on first page
+       
+       @param rId           id of the header
+     */
     virtual void resolveHeader(Stream & rStream,
                                const sal_Int32 type,
                                const rtl::OUString & rId) = 0;
+
+    /**
+       Resolves a footer to a stream handler.
+
+       @param rStream       stream handler to resolve to
+       @param type          type of footer to resolve:
+                            NS_ooxml::LN_Value_ST_HrdFtr_even     header on even page
+                            NS_ooxml::LN_Value_ST_HrdFtr_default  header on right page
+                            NS_ooxml::LN_Value_ST_HrdFtr_first    header on first page
+                            
+       @param rId           id of the header
+    */
     virtual void resolveFooter(Stream & rStream,
                                const sal_Int32 type,
                                const rtl::OUString & rId) = 0;
--- writerfilter/inc/ooxml/resourceids.hxx	27 Jun 2007 08:42:39 -0000	1.59
+++ writerfilter/inc/ooxml/resourceids.hxx	2 Jul 2007 17:16:28 -0000	1.59.2.1
@@ -159,385 +159,390 @@ namespace NS_ooxml
     const QName_t LN_CT_PPr_sectPr = 90442;
     const QName_t LN_CT_PPr_pPrChange = 90443;
     const QName_t LN_CT_Rel_id = 90444;
-    const QName_t LN_Value_ST_NumberFormat_decimal = 90450;
-    const QName_t LN_Value_ST_NumberFormat_upperRoman = 90451;
-    const QName_t LN_Value_ST_NumberFormat_lowerRoman = 90452;
-    const QName_t LN_Value_ST_NumberFormat_upperLetter = 90453;
-    const QName_t LN_Value_ST_NumberFormat_lowerLetter = 90454;
-    const QName_t LN_Value_ST_NumberFormat_ordinal = 90455;
-    const QName_t LN_Value_ST_NumberFormat_cardinalText = 90456;
-    const QName_t LN_Value_ST_NumberFormat_ordinalText = 90457;
-    const QName_t LN_Value_ST_NumberFormat_hex = 90458;
-    const QName_t LN_Value_ST_NumberFormat_chicago = 90459;
-    const QName_t LN_Value_ST_NumberFormat_ideographDigital = 90460;
-    const QName_t LN_Value_ST_NumberFormat_japaneseCounting = 90461;
-    const QName_t LN_Value_ST_NumberFormat_aiueo = 90462;
-    const QName_t LN_Value_ST_NumberFormat_iroha = 90463;
-    const QName_t LN_Value_ST_NumberFormat_decimalFullWidth = 90464;
-    const QName_t LN_Value_ST_NumberFormat_decimalHalfWidth = 90465;
-    const QName_t LN_Value_ST_NumberFormat_japaneseLegal = 90466;
-    const QName_t LN_Value_ST_NumberFormat_japaneseDigitalTenThousand = 90467;
-    const QName_t LN_Value_ST_NumberFormat_decimalEnclosedCircle = 90468;
-    const QName_t LN_Value_ST_NumberFormat_decimalFullWidth2 = 90469;
-    const QName_t LN_Value_ST_NumberFormat_aiueoFullWidth = 90470;
-    const QName_t LN_Value_ST_NumberFormat_irohaFullWidth = 90471;
-    const QName_t LN_Value_ST_NumberFormat_decimalZero = 90472;
-    const QName_t LN_Value_ST_NumberFormat_bullet = 90473;
-    const QName_t LN_Value_ST_NumberFormat_ganada = 90474;
-    const QName_t LN_Value_ST_NumberFormat_chosung = 90475;
-    const QName_t LN_Value_ST_NumberFormat_decimalEnclosedFullstop = 90476;
-    const QName_t LN_Value_ST_NumberFormat_decimalEnclosedParen = 90477;
-    const QName_t LN_Value_ST_NumberFormat_decimalEnclosedCircleChinese = 90478;
-    const QName_t LN_Value_ST_NumberFormat_ideographEnclosedCircle = 90479;
-    const QName_t LN_Value_ST_NumberFormat_ideographTraditional = 90480;
-    const QName_t LN_Value_ST_NumberFormat_ideographZodiac = 90481;
-    const QName_t LN_Value_ST_NumberFormat_ideographZodiacTraditional = 90482;
-    const QName_t LN_Value_ST_NumberFormat_taiwaneseCounting = 90483;
-    const QName_t LN_Value_ST_NumberFormat_ideographLegalTraditional = 90484;
-    const QName_t LN_Value_ST_NumberFormat_taiwaneseCountingThousand = 90485;
-    const QName_t LN_Value_ST_NumberFormat_taiwaneseDigital = 90486;
-    const QName_t LN_Value_ST_NumberFormat_chineseCounting = 90487;
-    const QName_t LN_Value_ST_NumberFormat_chineseLegalSimplified = 90488;
-    const QName_t LN_Value_ST_NumberFormat_chineseCountingThousand = 90489;
-    const QName_t LN_Value_ST_NumberFormat_koreanDigital = 90490;
-    const QName_t LN_Value_ST_NumberFormat_koreanCounting = 90491;
-    const QName_t LN_Value_ST_NumberFormat_koreanLegal = 90492;
-    const QName_t LN_Value_ST_NumberFormat_koreanDigital2 = 90493;
-    const QName_t LN_Value_ST_NumberFormat_vietnameseCounting = 90494;
-    const QName_t LN_Value_ST_NumberFormat_russianLower = 90495;
-    const QName_t LN_Value_ST_NumberFormat_russianUpper = 90496;
-    const QName_t LN_Value_ST_NumberFormat_none = 90497;
-    const QName_t LN_Value_ST_NumberFormat_numberInDash = 90498;
-    const QName_t LN_Value_ST_NumberFormat_hebrew1 = 90499;
-    const QName_t LN_Value_ST_NumberFormat_hebrew2 = 90500;
-    const QName_t LN_Value_ST_NumberFormat_arabicAlpha = 90501;
-    const QName_t LN_Value_ST_NumberFormat_arabicAbjad = 90502;
-    const QName_t LN_Value_ST_NumberFormat_hindiVowels = 90503;
-    const QName_t LN_Value_ST_NumberFormat_hindiConsonants = 90504;
-    const QName_t LN_Value_ST_NumberFormat_hindiNumbers = 90505;
-    const QName_t LN_Value_ST_NumberFormat_hindiCounting = 90506;
-    const QName_t LN_Value_ST_NumberFormat_thaiLetters = 90507;
-    const QName_t LN_Value_ST_NumberFormat_thaiNumbers = 90508;
-    const QName_t LN_Value_ST_NumberFormat_thaiCounting = 90509;
-    const QName_t LN_CT_PageSz_w = 90512;
-    const QName_t LN_CT_PageSz_h = 90513;
-    const QName_t LN_CT_PageSz_orient = 90514;
-    const QName_t LN_CT_PageSz_code = 90515;
-    const QName_t LN_CT_PageMar_top = 90516;
-    const QName_t LN_CT_PageMar_right = 90517;
-    const QName_t LN_CT_PageMar_bottom = 90518;
-    const QName_t LN_CT_PageMar_left = 90519;
-    const QName_t LN_CT_PageMar_header = 90520;
-    const QName_t LN_CT_PageMar_footer = 90521;
-    const QName_t LN_CT_PageMar_gutter = 90522;
-    const QName_t LN_Value_ST_ChapterSep_hyphen = 90523;
-    const QName_t LN_Value_ST_ChapterSep_period = 90524;
-    const QName_t LN_Value_ST_ChapterSep_colon = 90525;
-    const QName_t LN_Value_ST_ChapterSep_emDash = 90526;
-    const QName_t LN_Value_ST_ChapterSep_enDash = 90527;
-    const QName_t LN_CT_LineNumber_countBy = 90531;
-    const QName_t LN_CT_LineNumber_start = 90532;
-    const QName_t LN_CT_LineNumber_distance = 90533;
-    const QName_t LN_CT_LineNumber_restart = 90534;
-    const QName_t LN_CT_PageNumber_fmt = 90535;
-    const QName_t LN_CT_PageNumber_start = 90536;
-    const QName_t LN_CT_PageNumber_chapStyle = 90537;
-    const QName_t LN_CT_PageNumber_chapSep = 90538;
-    const QName_t LN_CT_Column_space = 90539;
-    const QName_t LN_CT_Column_w = 90540;
-    const QName_t LN_CT_Columns_equalWidth = 90541;
-    const QName_t LN_CT_Columns_space = 90542;
-    const QName_t LN_CT_Columns_num = 90543;
-    const QName_t LN_CT_Columns_sep = 90544;
-    const QName_t LN_CT_Columns_col = 90545;
-    const QName_t LN_Value_ST_HrdFtr_even = 90550;
-    const QName_t LN_Value_ST_HrdFtr_default = 90551;
-    const QName_t LN_Value_ST_HrdFtr_first = 90552;
-    const QName_t LN_CT_HdrFtrRef_type = 90553;
-    const QName_t LN_CT_HdrFtrRef_id = 90554;
-    const QName_t LN_EG_HdrFtrReferences_headerReference = 90555;
-    const QName_t LN_EG_HdrFtrReferences_footerReference = 90556;
-    const QName_t LN_EG_SectPrContents_bidi = 90557;
-    const QName_t LN_EG_SectPrContents_cols = 90558;
-    const QName_t LN_EG_SectPrContents_docGrid = 90559;
-    const QName_t LN_EG_SectPrContents_endnotePr = 90560;
-    const QName_t LN_EG_SectPrContents_footnotePr = 90561;
-    const QName_t LN_EG_SectPrContents_formProt = 90562;
-    const QName_t LN_EG_SectPrContents_lnNumType = 90563;
-    const QName_t LN_EG_SectPrContents_noEndnote = 90564;
-    const QName_t LN_EG_SectPrContents_paperSrc = 90565;
-    const QName_t LN_EG_SectPrContents_pgBorders = 90566;
-    const QName_t LN_EG_SectPrContents_pgMar = 90567;
-    const QName_t LN_EG_SectPrContents_pgNumType = 90568;
-    const QName_t LN_EG_SectPrContents_pgSz = 90569;
-    const QName_t LN_EG_SectPrContents_printerSettings = 90570;
-    const QName_t LN_EG_SectPrContents_rtlGutter = 90571;
-    const QName_t LN_EG_SectPrContents_textDirection = 90572;
-    const QName_t LN_EG_SectPrContents_titlePg = 90573;
-    const QName_t LN_EG_SectPrContents_vAlign = 90575;
-    const QName_t LN_CT_SectPr_sectPrChange = 90576;
-    const QName_t LN_Value_ST_BrType_column = 90577;
-    const QName_t LN_Value_ST_BrType_page = 90578;
-    const QName_t LN_Value_ST_BrType_textWrapping = 90579;
-    const QName_t LN_Value_ST_BrClear_none = 90580;
-    const QName_t LN_Value_ST_BrClear_left = 90581;
-    const QName_t LN_Value_ST_BrClear_right = 90582;
-    const QName_t LN_Value_ST_BrClear_all = 90583;
-    const QName_t LN_CT_Br_type = 90584;
-    const QName_t LN_CT_Br_clear = 90585;
-    const QName_t LN_Value_ST_PTabAlignment_left = 90586;
-    const QName_t LN_Value_ST_PTabAlignment_center = 90587;
-    const QName_t LN_Value_ST_PTabAlignment_right = 90588;
-    const QName_t LN_Value_ST_PTabRelativeTo_margin = 90589;
-    const QName_t LN_Value_ST_PTabRelativeTo_indent = 90590;
-    const QName_t LN_Value_ST_PTabLeader_none = 90591;
-    const QName_t LN_Value_ST_PTabLeader_dot = 90592;
-    const QName_t LN_Value_ST_PTabLeader_hyphen = 90593;
-    const QName_t LN_Value_ST_PTabLeader_underscore = 90594;
-    const QName_t LN_Value_ST_PTabLeader_middleDot = 90595;
-    const QName_t LN_CT_PTab_alignment = 90596;
-    const QName_t LN_CT_PTab_relativeTo = 90597;
-    const QName_t LN_CT_PTab_leader = 90598;
-    const QName_t LN_CT_Sym_font = 90599;
-    const QName_t LN_CT_Sym_char = 90600;
-    const QName_t LN_Value_ST_Hint_default = 90601;
-    const QName_t LN_Value_ST_Hint_eastAsia = 90602;
-    const QName_t LN_Value_ST_Hint_cs = 90603;
-    const QName_t LN_Value_ST_Theme_majorEastAsia = 90604;
-    const QName_t LN_Value_ST_Theme_majorBidi = 90605;
-    const QName_t LN_Value_ST_Theme_majorAscii = 90606;
-    const QName_t LN_Value_ST_Theme_majorHAnsi = 90607;
-    const QName_t LN_Value_ST_Theme_minorEastAsia = 90608;
-    const QName_t LN_Value_ST_Theme_minorBidi = 90609;
-    const QName_t LN_Value_ST_Theme_minorAscii = 90610;
-    const QName_t LN_Value_ST_Theme_minorHAnsi = 90611;
-    const QName_t LN_CT_Fonts_hint = 90612;
-    const QName_t LN_CT_Fonts_ascii = 90613;
-    const QName_t LN_CT_Fonts_hAnsi = 90614;
-    const QName_t LN_CT_Fonts_eastAsia = 90615;
-    const QName_t LN_CT_Fonts_cs = 90616;
-    const QName_t LN_CT_Fonts_asciiTheme = 90617;
-    const QName_t LN_CT_Fonts_hAnsiTheme = 90618;
-    const QName_t LN_CT_Fonts_eastAsiaTheme = 90619;
-    const QName_t LN_CT_Fonts_cstheme = 90620;
-    const QName_t LN_EG_RPrBase_rStyle = 90621;
-    const QName_t LN_EG_RPrBase_rFonts = 90622;
-    const QName_t LN_EG_RPrBase_snapToGrid = 90636;
-    const QName_t LN_EG_RPrBase_color = 90639;
-    const QName_t LN_EG_RPrBase_u = 90647;
-    const QName_t LN_EG_RPrBase_bdr = 90649;
-    const QName_t LN_EG_RPrBase_shd = 90650;
-    const QName_t LN_EG_RPrBase_fitText = 90651;
-    const QName_t LN_EG_RPrBase_vertAlign = 90652;
-    const QName_t LN_EG_RPrBase_rtl = 90653;
-    const QName_t LN_EG_RPrBase_lang = 90656;
-    const QName_t LN_EG_RPrBase_eastAsianLayout = 90657;
-    const QName_t LN_EG_RPrBase_oMath = 90659;
-    const QName_t LN_CT_ParaRPr_rPrChange = 90660;
-    const QName_t LN_Value_ST_TblWidth_nil = 90661;
-    const QName_t LN_Value_ST_TblWidth_pct = 90662;
-    const QName_t LN_Value_ST_TblWidth_dxa = 90663;
-    const QName_t LN_Value_ST_TblWidth_auto = 90664;
-    const QName_t LN_CT_Height_val = 90665;
-    const QName_t LN_CT_Height_hRule = 90666;
-    const QName_t LN_CT_TblWidth_w = 90667;
-    const QName_t LN_CT_TblWidth_type = 90668;
-    const QName_t LN_CT_TblGridBase_gridCol = 90669;
-    const QName_t LN_CT_TblGrid_tblGridChange = 90670;
-    const QName_t LN_CT_TcBorders_top = 90671;
-    const QName_t LN_CT_TcBorders_left = 90672;
-    const QName_t LN_CT_TcBorders_bottom = 90673;
-    const QName_t LN_CT_TcBorders_right = 90674;
-    const QName_t LN_CT_TcBorders_insideH = 90675;
-    const QName_t LN_CT_TcBorders_insideV = 90676;
-    const QName_t LN_CT_TcBorders_tl2br = 90677;
-    const QName_t LN_CT_TcBorders_tr2bl = 90678;
-    const QName_t LN_CT_TcMar_top = 90679;
-    const QName_t LN_CT_TcMar_left = 90680;
-    const QName_t LN_CT_TcMar_bottom = 90681;
-    const QName_t LN_CT_TcMar_right = 90682;
-    const QName_t LN_Value_ST_Merge_continue = 90683;
-    const QName_t LN_Value_ST_Merge_restart = 90684;
-    const QName_t LN_CT_TcPrBase_cnfStyle = 90685;
-    const QName_t LN_CT_TcPrBase_tcW = 90686;
-    const QName_t LN_CT_TcPrBase_gridSpan = 90687;
-    const QName_t LN_CT_TcPrBase_hMerge = 90688;
-    const QName_t LN_CT_TcPrBase_vMerge = 90689;
-    const QName_t LN_CT_TcPrBase_tcBorders = 90690;
-    const QName_t LN_CT_TcPrBase_shd = 90691;
-    const QName_t LN_CT_TcPrBase_noWrap = 90692;
-    const QName_t LN_CT_TcPrBase_tcMar = 90693;
-    const QName_t LN_CT_TcPrBase_textDirection = 90694;
-    const QName_t LN_CT_TcPrBase_tcFitText = 90695;
-    const QName_t LN_CT_TcPrBase_vAlign = 90696;
-    const QName_t LN_CT_TcPrBase_hideMark = 90697;
-    const QName_t LN_CT_TrPrBase_cnfStyle = 90698;
-    const QName_t LN_CT_TrPrBase_divId = 90699;
-    const QName_t LN_CT_TrPrBase_gridBefore = 90700;
-    const QName_t LN_CT_TrPrBase_gridAfter = 90701;
-    const QName_t LN_CT_TrPrBase_wBefore = 90702;
-    const QName_t LN_CT_TrPrBase_wAfter = 90703;
-    const QName_t LN_CT_TrPrBase_trHeight = 90705;
-    const QName_t LN_CT_TrPrBase_tblHeader = 90706;
-    const QName_t LN_CT_TrPrBase_tblCellSpacing = 90707;
-    const QName_t LN_CT_TrPrBase_jc = 90708;
-    const QName_t LN_CT_TrPrBase_hidden = 90709;
-    const QName_t LN_Value_ST_TblOverlap_never = 90710;
-    const QName_t LN_Value_ST_TblOverlap_overlap = 90711;
-    const QName_t LN_CT_TblBorders_top = 90712;
-    const QName_t LN_CT_TblBorders_left = 90713;
-    const QName_t LN_CT_TblBorders_bottom = 90714;
-    const QName_t LN_CT_TblBorders_right = 90715;
-    const QName_t LN_CT_TblBorders_insideH = 90716;
-    const QName_t LN_CT_TblBorders_insideV = 90717;
-    const QName_t LN_CT_TblPrBase_tblStyle = 90718;
-    const QName_t LN_CT_TblPrBase_tblpPr = 90719;
-    const QName_t LN_CT_TblPrBase_tblOverlap = 90720;
-    const QName_t LN_CT_TblPrBase_bidiVisual = 90721;
-    const QName_t LN_CT_TblPrBase_tblStyleRowBandSize = 90722;
-    const QName_t LN_CT_TblPrBase_tblStyleColBandSize = 90723;
-    const QName_t LN_CT_TblPrBase_tblW = 90724;
-    const QName_t LN_CT_TblPrBase_jc = 90725;
-    const QName_t LN_CT_TblPrBase_tblCellSpacing = 90726;
-    const QName_t LN_CT_TblPrBase_tblInd = 90727;
-    const QName_t LN_CT_TblPrBase_tblBorders = 90728;
-    const QName_t LN_CT_TblPrBase_shd = 90729;
-    const QName_t LN_CT_TblPrBase_tblLayout = 90730;
-    const QName_t LN_CT_TblPrBase_tblCellMar = 90731;
-    const QName_t LN_CT_TblPrBase_tblLook = 90732;
-    const QName_t LN_CT_TblPr_tblPrChange = 90733;
-    const QName_t LN_Value_ST_FtnPos_pageBottom = 90734;
-    const QName_t LN_Value_ST_FtnPos_beneathText = 90735;
-    const QName_t LN_Value_ST_FtnPos_sectEnd = 90736;
-    const QName_t LN_Value_ST_FtnPos_docEnd = 90737;
-    const QName_t LN_CT_FtnPos_val = 90738;
-    const QName_t LN_Value_ST_EdnPos_sectEnd = 90739;
-    const QName_t LN_Value_ST_EdnPos_docEnd = 90740;
-    const QName_t LN_CT_EdnPos_val = 90741;
-    const QName_t LN_CT_NumFmt_val = 90742;
-    const QName_t LN_Value_ST_RestartNumber_continuous = 90743;
-    const QName_t LN_Value_ST_RestartNumber_eachSect = 90744;
-    const QName_t LN_Value_ST_RestartNumber_eachPage = 90745;
-    const QName_t LN_CT_NumRestart_val = 90746;
-    const QName_t LN_CT_FtnEdnRef_customMarkFollows = 90747;
-    const QName_t LN_CT_FtnEdnRef_id = 90748;
-    const QName_t LN_EG_FtnEdnNumProps_numStart = 90750;
-    const QName_t LN_EG_FtnEdnNumProps_numRestart = 90751;
-    const QName_t LN_CT_FtnProps_pos = 90752;
-    const QName_t LN_CT_FtnProps_numFmt = 90753;
-    const QName_t LN_CT_EdnProps_pos = 90754;
-    const QName_t LN_CT_EdnProps_numFmt = 90755;
-    const QName_t LN_CT_RPrDefault_rPr = 90756;
-    const QName_t LN_CT_PPrDefault_pPr = 90757;
-    const QName_t LN_CT_DocDefaults_pPrDefault = 90758;
-    const QName_t LN_CT_DocDefaults_rPrDefault = 90759;
-    const QName_t LN_CT_LevelText_val = 90760;
-    const QName_t LN_CT_LevelText_null = 90761;
-    const QName_t LN_CT_LvlLegacy_legacy = 90762;
-    const QName_t LN_CT_LvlLegacy_legacySpace = 90763;
-    const QName_t LN_CT_LvlLegacy_legacyIndent = 90764;
-    const QName_t LN_CT_Lvl_lvlRestart = 90767;
-    const QName_t LN_CT_Lvl_pStyle = 90768;
-    const QName_t LN_CT_Lvl_suff = 90770;
-    const QName_t LN_CT_Lvl_lvlText = 90771;
-    const QName_t LN_CT_Lvl_lvlPicBulletId = 90772;
-    const QName_t LN_CT_Lvl_lvlJc = 90774;
-    const QName_t LN_CT_Lvl_pPr = 90775;
-    const QName_t LN_CT_Lvl_rPr = 90776;
-    const QName_t LN_CT_Lvl_ilvl = 90777;
-    const QName_t LN_CT_Lvl_tplc = 90778;
-    const QName_t LN_CT_Lvl_tentative = 90779;
-    const QName_t LN_Value_ST_MultiLevelType_singleLevel = 90780;
-    const QName_t LN_Value_ST_MultiLevelType_multilevel = 90781;
-    const QName_t LN_Value_ST_MultiLevelType_hybridMultilevel = 90782;
-    const QName_t LN_CT_AbstractNum_multiLevelType = 90784;
-    const QName_t LN_CT_AbstractNum_name = 90786;
-    const QName_t LN_CT_AbstractNum_styleLink = 90787;
-    const QName_t LN_CT_AbstractNum_numStyleLink = 90788;
-    const QName_t LN_CT_AbstractNum_lvl = 90789;
-    const QName_t LN_CT_AbstractNum_abstractNumId = 90790;
-    const QName_t LN_CT_NumLvl_startOverride = 90791;
-    const QName_t LN_CT_NumLvl_lvl = 90792;
-    const QName_t LN_CT_NumLvl_ilvl = 90793;
-    const QName_t LN_CT_Num_abstractNumId = 90794;
-    const QName_t LN_CT_Num_lvlOverride = 90795;
-    const QName_t LN_CT_Num_numId = 90796;
-    const QName_t LN_CT_Numbering_numPicBullet = 90797;
-    const QName_t LN_CT_Numbering_abstractNum = 90798;
-    const QName_t LN_CT_Numbering_num = 90799;
-    const QName_t LN_CT_Numbering_numIdMacAtCleanup = 90800;
-    const QName_t LN_CT_Style_name = 90805;
-    const QName_t LN_CT_Style_aliases = 90806;
-    const QName_t LN_CT_Style_basedOn = 90807;
-    const QName_t LN_CT_Style_next = 90808;
-    const QName_t LN_CT_Style_link = 90809;
-    const QName_t LN_CT_Style_autoRedefine = 90810;
-    const QName_t LN_CT_Style_hidden = 90811;
-    const QName_t LN_CT_Style_uiPriority = 90812;
-    const QName_t LN_CT_Style_semiHidden = 90813;
-    const QName_t LN_CT_Style_unhideWhenUsed = 90814;
-    const QName_t LN_CT_Style_qFormat = 90815;
-    const QName_t LN_CT_Style_locked = 90816;
-    const QName_t LN_CT_Style_personal = 90817;
-    const QName_t LN_CT_Style_personalCompose = 90818;
-    const QName_t LN_CT_Style_personalReply = 90819;
-    const QName_t LN_CT_Style_rsid = 90820;
-    const QName_t LN_CT_Style_pPr = 90821;
-    const QName_t LN_CT_Style_rPr = 90822;
-    const QName_t LN_CT_Style_tblPr = 90823;
-    const QName_t LN_CT_Style_trPr = 90824;
-    const QName_t LN_CT_Style_tcPr = 90825;
-    const QName_t LN_CT_Style_tblStylePr = 90826;
-    const QName_t LN_CT_Style_type = 90827;
-    const QName_t LN_CT_Style_styleId = 90828;
-    const QName_t LN_CT_Style_default = 90829;
-    const QName_t LN_CT_Style_customStyle = 90830;
-    const QName_t LN_Value_ST_FontFamily_decorative = 90831;
-    const QName_t LN_Value_ST_FontFamily_modern = 90832;
-    const QName_t LN_Value_ST_FontFamily_roman = 90833;
-    const QName_t LN_Value_ST_FontFamily_script = 90834;
-    const QName_t LN_Value_ST_FontFamily_swiss = 90835;
-    const QName_t LN_Value_ST_FontFamily_auto = 90836;
-    const QName_t LN_Value_ST_Pitch_fixed = 90837;
-    const QName_t LN_Value_ST_Pitch_variable = 90838;
-    const QName_t LN_Value_ST_Pitch_default = 90839;
-    const QName_t LN_CT_FontSig_usb0 = 90840;
-    const QName_t LN_CT_FontSig_usb1 = 90841;
-    const QName_t LN_CT_FontSig_usb2 = 90842;
-    const QName_t LN_CT_FontSig_usb3 = 90843;
-    const QName_t LN_CT_FontSig_csb0 = 90844;
-    const QName_t LN_CT_FontSig_csb1 = 90845;
-    const QName_t LN_CT_FontRel_fontKey = 90846;
-    const QName_t LN_CT_FontRel_subsetted = 90847;
-    const QName_t LN_CT_Font_altName = 90848;
-    const QName_t LN_CT_Font_panose1 = 90849;
-    const QName_t LN_CT_Font_charset = 90850;
-    const QName_t LN_CT_Font_family = 90851;
-    const QName_t LN_CT_Font_notTrueType = 90852;
-    const QName_t LN_CT_Font_pitch = 90853;
-    const QName_t LN_CT_Font_sig = 90854;
-    const QName_t LN_CT_Font_embedRegular = 90855;
-    const QName_t LN_CT_Font_embedBold = 90856;
-    const QName_t LN_CT_Font_embedItalic = 90857;
-    const QName_t LN_CT_Font_embedBoldItalic = 90858;
-    const QName_t LN_CT_Font_name = 90859;
-    const QName_t LN_Value_St_ThemeColor_dark1 = 90860;
-    const QName_t LN_Value_St_ThemeColor_light1 = 90861;
-    const QName_t LN_Value_St_ThemeColor_dark2 = 90862;
-    const QName_t LN_Value_St_ThemeColor_light2 = 90863;
-    const QName_t LN_Value_St_ThemeColor_accent1 = 90864;
-    const QName_t LN_Value_St_ThemeColor_accent2 = 90865;
-    const QName_t LN_Value_St_ThemeColor_accent3 = 90866;
-    const QName_t LN_Value_St_ThemeColor_accent4 = 90867;
-    const QName_t LN_Value_St_ThemeColor_accent5 = 90868;
-    const QName_t LN_Value_St_ThemeColor_accent6 = 90869;
-    const QName_t LN_Value_St_ThemeColor_hyperlink = 90870;
-    const QName_t LN_Value_St_ThemeColor_followedHyperlink = 90871;
-    const QName_t LN_Value_St_ThemeColor_none = 90872;
-    const QName_t LN_Value_St_ThemeColor_background1 = 90873;
-    const QName_t LN_Value_St_ThemeColor_text1 = 90874;
-    const QName_t LN_Value_St_ThemeColor_background2 = 90875;
-    const QName_t LN_Value_St_ThemeColor_text2 = 90876;
+    const QName_t LN_CT_SimpleField_fldData = 90445;
+    const QName_t LN_CT_SimpleField_instr = 90446;
+    const QName_t LN_CT_SimpleField_fldLock = 90447;
+    const QName_t LN_CT_SimpleField_dirty = 90448;
+    const QName_t LN_Value_ST_NumberFormat_decimal = 90454;
+    const QName_t LN_Value_ST_NumberFormat_upperRoman = 90455;
+    const QName_t LN_Value_ST_NumberFormat_lowerRoman = 90456;
+    const QName_t LN_Value_ST_NumberFormat_upperLetter = 90457;
+    const QName_t LN_Value_ST_NumberFormat_lowerLetter = 90458;
+    const QName_t LN_Value_ST_NumberFormat_ordinal = 90459;
+    const QName_t LN_Value_ST_NumberFormat_cardinalText = 90460;
+    const QName_t LN_Value_ST_NumberFormat_ordinalText = 90461;
+    const QName_t LN_Value_ST_NumberFormat_hex = 90462;
+    const QName_t LN_Value_ST_NumberFormat_chicago = 90463;
+    const QName_t LN_Value_ST_NumberFormat_ideographDigital = 90464;
+    const QName_t LN_Value_ST_NumberFormat_japaneseCounting = 90465;
+    const QName_t LN_Value_ST_NumberFormat_aiueo = 90466;
+    const QName_t LN_Value_ST_NumberFormat_iroha = 90467;
+    const QName_t LN_Value_ST_NumberFormat_decimalFullWidth = 90468;
+    const QName_t LN_Value_ST_NumberFormat_decimalHalfWidth = 90469;
+    const QName_t LN_Value_ST_NumberFormat_japaneseLegal = 90470;
+    const QName_t LN_Value_ST_NumberFormat_japaneseDigitalTenThousand = 90471;
+    const QName_t LN_Value_ST_NumberFormat_decimalEnclosedCircle = 90472;
+    const QName_t LN_Value_ST_NumberFormat_decimalFullWidth2 = 90473;
+    const QName_t LN_Value_ST_NumberFormat_aiueoFullWidth = 90474;
+    const QName_t LN_Value_ST_NumberFormat_irohaFullWidth = 90475;
+    const QName_t LN_Value_ST_NumberFormat_decimalZero = 90476;
+    const QName_t LN_Value_ST_NumberFormat_bullet = 90477;
+    const QName_t LN_Value_ST_NumberFormat_ganada = 90478;
+    const QName_t LN_Value_ST_NumberFormat_chosung = 90479;
+    const QName_t LN_Value_ST_NumberFormat_decimalEnclosedFullstop = 90480;
+    const QName_t LN_Value_ST_NumberFormat_decimalEnclosedParen = 90481;
+    const QName_t LN_Value_ST_NumberFormat_decimalEnclosedCircleChinese = 90482;
+    const QName_t LN_Value_ST_NumberFormat_ideographEnclosedCircle = 90483;
+    const QName_t LN_Value_ST_NumberFormat_ideographTraditional = 90484;
+    const QName_t LN_Value_ST_NumberFormat_ideographZodiac = 90485;
+    const QName_t LN_Value_ST_NumberFormat_ideographZodiacTraditional = 90486;
+    const QName_t LN_Value_ST_NumberFormat_taiwaneseCounting = 90487;
+    const QName_t LN_Value_ST_NumberFormat_ideographLegalTraditional = 90488;
+    const QName_t LN_Value_ST_NumberFormat_taiwaneseCountingThousand = 90489;
+    const QName_t LN_Value_ST_NumberFormat_taiwaneseDigital = 90490;
+    const QName_t LN_Value_ST_NumberFormat_chineseCounting = 90491;
+    const QName_t LN_Value_ST_NumberFormat_chineseLegalSimplified = 90492;
+    const QName_t LN_Value_ST_NumberFormat_chineseCountingThousand = 90493;
+    const QName_t LN_Value_ST_NumberFormat_koreanDigital = 90494;
+    const QName_t LN_Value_ST_NumberFormat_koreanCounting = 90495;
+    const QName_t LN_Value_ST_NumberFormat_koreanLegal = 90496;
+    const QName_t LN_Value_ST_NumberFormat_koreanDigital2 = 90497;
+    const QName_t LN_Value_ST_NumberFormat_vietnameseCounting = 90498;
+    const QName_t LN_Value_ST_NumberFormat_russianLower = 90499;
+    const QName_t LN_Value_ST_NumberFormat_russianUpper = 90500;
+    const QName_t LN_Value_ST_NumberFormat_none = 90501;
+    const QName_t LN_Value_ST_NumberFormat_numberInDash = 90502;
+    const QName_t LN_Value_ST_NumberFormat_hebrew1 = 90503;
+    const QName_t LN_Value_ST_NumberFormat_hebrew2 = 90504;
+    const QName_t LN_Value_ST_NumberFormat_arabicAlpha = 90505;
+    const QName_t LN_Value_ST_NumberFormat_arabicAbjad = 90506;
+    const QName_t LN_Value_ST_NumberFormat_hindiVowels = 90507;
+    const QName_t LN_Value_ST_NumberFormat_hindiConsonants = 90508;
+    const QName_t LN_Value_ST_NumberFormat_hindiNumbers = 90509;
+    const QName_t LN_Value_ST_NumberFormat_hindiCounting = 90510;
+    const QName_t LN_Value_ST_NumberFormat_thaiLetters = 90511;
+    const QName_t LN_Value_ST_NumberFormat_thaiNumbers = 90512;
+    const QName_t LN_Value_ST_NumberFormat_thaiCounting = 90513;
+    const QName_t LN_CT_PageSz_w = 90516;
+    const QName_t LN_CT_PageSz_h = 90517;
+    const QName_t LN_CT_PageSz_orient = 90518;
+    const QName_t LN_CT_PageSz_code = 90519;
+    const QName_t LN_CT_PageMar_top = 90520;
+    const QName_t LN_CT_PageMar_right = 90521;
+    const QName_t LN_CT_PageMar_bottom = 90522;
+    const QName_t LN_CT_PageMar_left = 90523;
+    const QName_t LN_CT_PageMar_header = 90524;
+    const QName_t LN_CT_PageMar_footer = 90525;
+    const QName_t LN_CT_PageMar_gutter = 90526;
+    const QName_t LN_Value_ST_ChapterSep_hyphen = 90527;
+    const QName_t LN_Value_ST_ChapterSep_period = 90528;
+    const QName_t LN_Value_ST_ChapterSep_colon = 90529;
+    const QName_t LN_Value_ST_ChapterSep_emDash = 90530;
+    const QName_t LN_Value_ST_ChapterSep_enDash = 90531;
+    const QName_t LN_CT_LineNumber_countBy = 90535;
+    const QName_t LN_CT_LineNumber_start = 90536;
+    const QName_t LN_CT_LineNumber_distance = 90537;
+    const QName_t LN_CT_LineNumber_restart = 90538;
+    const QName_t LN_CT_PageNumber_fmt = 90539;
+    const QName_t LN_CT_PageNumber_start = 90540;
+    const QName_t LN_CT_PageNumber_chapStyle = 90541;
+    const QName_t LN_CT_PageNumber_chapSep = 90542;
+    const QName_t LN_CT_Column_space = 90543;
+    const QName_t LN_CT_Column_w = 90544;
+    const QName_t LN_CT_Columns_equalWidth = 90545;
+    const QName_t LN_CT_Columns_space = 90546;
+    const QName_t LN_CT_Columns_num = 90547;
+    const QName_t LN_CT_Columns_sep = 90548;
+    const QName_t LN_CT_Columns_col = 90549;
+    const QName_t LN_Value_ST_HrdFtr_even = 90554;
+    const QName_t LN_Value_ST_HrdFtr_default = 90555;
+    const QName_t LN_Value_ST_HrdFtr_first = 90556;
+    const QName_t LN_CT_HdrFtrRef_type = 90557;
+    const QName_t LN_CT_HdrFtrRef_id = 90558;
+    const QName_t LN_EG_HdrFtrReferences_headerReference = 90559;
+    const QName_t LN_EG_HdrFtrReferences_footerReference = 90560;
+    const QName_t LN_EG_SectPrContents_bidi = 90561;
+    const QName_t LN_EG_SectPrContents_cols = 90562;
+    const QName_t LN_EG_SectPrContents_docGrid = 90563;
+    const QName_t LN_EG_SectPrContents_endnotePr = 90564;
+    const QName_t LN_EG_SectPrContents_footnotePr = 90565;
+    const QName_t LN_EG_SectPrContents_formProt = 90566;
+    const QName_t LN_EG_SectPrContents_lnNumType = 90567;
+    const QName_t LN_EG_SectPrContents_noEndnote = 90568;
+    const QName_t LN_EG_SectPrContents_paperSrc = 90569;
+    const QName_t LN_EG_SectPrContents_pgBorders = 90570;
+    const QName_t LN_EG_SectPrContents_pgMar = 90571;
+    const QName_t LN_EG_SectPrContents_pgNumType = 90572;
+    const QName_t LN_EG_SectPrContents_pgSz = 90573;
+    const QName_t LN_EG_SectPrContents_printerSettings = 90574;
+    const QName_t LN_EG_SectPrContents_rtlGutter = 90575;
+    const QName_t LN_EG_SectPrContents_textDirection = 90576;
+    const QName_t LN_EG_SectPrContents_titlePg = 90577;
+    const QName_t LN_EG_SectPrContents_vAlign = 90579;
+    const QName_t LN_CT_SectPr_sectPrChange = 90580;
+    const QName_t LN_Value_ST_BrType_column = 90581;
+    const QName_t LN_Value_ST_BrType_page = 90582;
+    const QName_t LN_Value_ST_BrType_textWrapping = 90583;
+    const QName_t LN_Value_ST_BrClear_none = 90584;
+    const QName_t LN_Value_ST_BrClear_left = 90585;
+    const QName_t LN_Value_ST_BrClear_right = 90586;
+    const QName_t LN_Value_ST_BrClear_all = 90587;
+    const QName_t LN_CT_Br_type = 90588;
+    const QName_t LN_CT_Br_clear = 90589;
+    const QName_t LN_Value_ST_PTabAlignment_left = 90590;
+    const QName_t LN_Value_ST_PTabAlignment_center = 90591;
+    const QName_t LN_Value_ST_PTabAlignment_right = 90592;
+    const QName_t LN_Value_ST_PTabRelativeTo_margin = 90593;
+    const QName_t LN_Value_ST_PTabRelativeTo_indent = 90594;
+    const QName_t LN_Value_ST_PTabLeader_none = 90595;
+    const QName_t LN_Value_ST_PTabLeader_dot = 90596;
+    const QName_t LN_Value_ST_PTabLeader_hyphen = 90597;
+    const QName_t LN_Value_ST_PTabLeader_underscore = 90598;
+    const QName_t LN_Value_ST_PTabLeader_middleDot = 90599;
+    const QName_t LN_CT_PTab_alignment = 90600;
+    const QName_t LN_CT_PTab_relativeTo = 90601;
+    const QName_t LN_CT_PTab_leader = 90602;
+    const QName_t LN_CT_Sym_font = 90603;
+    const QName_t LN_CT_Sym_char = 90604;
+    const QName_t LN_CT_Text_space = 90605;
+    const QName_t LN_Value_ST_Hint_default = 90606;
+    const QName_t LN_Value_ST_Hint_eastAsia = 90607;
+    const QName_t LN_Value_ST_Hint_cs = 90608;
+    const QName_t LN_Value_ST_Theme_majorEastAsia = 90609;
+    const QName_t LN_Value_ST_Theme_majorBidi = 90610;
+    const QName_t LN_Value_ST_Theme_majorAscii = 90611;
+    const QName_t LN_Value_ST_Theme_majorHAnsi = 90612;
+    const QName_t LN_Value_ST_Theme_minorEastAsia = 90613;
+    const QName_t LN_Value_ST_Theme_minorBidi = 90614;
+    const QName_t LN_Value_ST_Theme_minorAscii = 90615;
+    const QName_t LN_Value_ST_Theme_minorHAnsi = 90616;
+    const QName_t LN_CT_Fonts_hint = 90617;
+    const QName_t LN_CT_Fonts_ascii = 90618;
+    const QName_t LN_CT_Fonts_hAnsi = 90619;
+    const QName_t LN_CT_Fonts_eastAsia = 90620;
+    const QName_t LN_CT_Fonts_cs = 90621;
+    const QName_t LN_CT_Fonts_asciiTheme = 90622;
+    const QName_t LN_CT_Fonts_hAnsiTheme = 90623;
+    const QName_t LN_CT_Fonts_eastAsiaTheme = 90624;
+    const QName_t LN_CT_Fonts_cstheme = 90625;
+    const QName_t LN_EG_RPrBase_rStyle = 90626;
+    const QName_t LN_EG_RPrBase_rFonts = 90627;
+    const QName_t LN_EG_RPrBase_snapToGrid = 90641;
+    const QName_t LN_EG_RPrBase_color = 90644;
+    const QName_t LN_EG_RPrBase_u = 90652;
+    const QName_t LN_EG_RPrBase_bdr = 90654;
+    const QName_t LN_EG_RPrBase_shd = 90655;
+    const QName_t LN_EG_RPrBase_fitText = 90656;
+    const QName_t LN_EG_RPrBase_vertAlign = 90657;
+    const QName_t LN_EG_RPrBase_rtl = 90658;
+    const QName_t LN_EG_RPrBase_lang = 90661;
+    const QName_t LN_EG_RPrBase_eastAsianLayout = 90662;
+    const QName_t LN_EG_RPrBase_oMath = 90664;
+    const QName_t LN_CT_ParaRPr_rPrChange = 90665;
+    const QName_t LN_Value_ST_TblWidth_nil = 90666;
+    const QName_t LN_Value_ST_TblWidth_pct = 90667;
+    const QName_t LN_Value_ST_TblWidth_dxa = 90668;
+    const QName_t LN_Value_ST_TblWidth_auto = 90669;
+    const QName_t LN_CT_Height_val = 90670;
+    const QName_t LN_CT_Height_hRule = 90671;
+    const QName_t LN_CT_TblWidth_w = 90672;
+    const QName_t LN_CT_TblWidth_type = 90673;
+    const QName_t LN_CT_TblGridBase_gridCol = 90674;
+    const QName_t LN_CT_TblGrid_tblGridChange = 90675;
+    const QName_t LN_CT_TcBorders_top = 90676;
+    const QName_t LN_CT_TcBorders_left = 90677;
+    const QName_t LN_CT_TcBorders_bottom = 90678;
+    const QName_t LN_CT_TcBorders_right = 90679;
+    const QName_t LN_CT_TcBorders_insideH = 90680;
+    const QName_t LN_CT_TcBorders_insideV = 90681;
+    const QName_t LN_CT_TcBorders_tl2br = 90682;
+    const QName_t LN_CT_TcBorders_tr2bl = 90683;
+    const QName_t LN_CT_TcMar_top = 90684;
+    const QName_t LN_CT_TcMar_left = 90685;
+    const QName_t LN_CT_TcMar_bottom = 90686;
+    const QName_t LN_CT_TcMar_right = 90687;
+    const QName_t LN_Value_ST_Merge_continue = 90688;
+    const QName_t LN_Value_ST_Merge_restart = 90689;
+    const QName_t LN_CT_TcPrBase_cnfStyle = 90690;
+    const QName_t LN_CT_TcPrBase_tcW = 90691;
+    const QName_t LN_CT_TcPrBase_gridSpan = 90692;
+    const QName_t LN_CT_TcPrBase_hMerge = 90693;
+    const QName_t LN_CT_TcPrBase_vMerge = 90694;
+    const QName_t LN_CT_TcPrBase_tcBorders = 90695;
+    const QName_t LN_CT_TcPrBase_shd = 90696;
+    const QName_t LN_CT_TcPrBase_noWrap = 90697;
+    const QName_t LN_CT_TcPrBase_tcMar = 90698;
+    const QName_t LN_CT_TcPrBase_textDirection = 90699;
+    const QName_t LN_CT_TcPrBase_tcFitText = 90700;
+    const QName_t LN_CT_TcPrBase_vAlign = 90701;
+    const QName_t LN_CT_TcPrBase_hideMark = 90702;
+    const QName_t LN_CT_TrPrBase_cnfStyle = 90703;
+    const QName_t LN_CT_TrPrBase_divId = 90704;
+    const QName_t LN_CT_TrPrBase_gridBefore = 90705;
+    const QName_t LN_CT_TrPrBase_gridAfter = 90706;
+    const QName_t LN_CT_TrPrBase_wBefore = 90707;
+    const QName_t LN_CT_TrPrBase_wAfter = 90708;
+    const QName_t LN_CT_TrPrBase_trHeight = 90710;
+    const QName_t LN_CT_TrPrBase_tblHeader = 90711;
+    const QName_t LN_CT_TrPrBase_tblCellSpacing = 90712;
+    const QName_t LN_CT_TrPrBase_jc = 90713;
+    const QName_t LN_CT_TrPrBase_hidden = 90714;
+    const QName_t LN_Value_ST_TblOverlap_never = 90715;
+    const QName_t LN_Value_ST_TblOverlap_overlap = 90716;
+    const QName_t LN_CT_TblBorders_top = 90717;
+    const QName_t LN_CT_TblBorders_left = 90718;
+    const QName_t LN_CT_TblBorders_bottom = 90719;
+    const QName_t LN_CT_TblBorders_right = 90720;
+    const QName_t LN_CT_TblBorders_insideH = 90721;
+    const QName_t LN_CT_TblBorders_insideV = 90722;
+    const QName_t LN_CT_TblPrBase_tblStyle = 90723;
+    const QName_t LN_CT_TblPrBase_tblpPr = 90724;
+    const QName_t LN_CT_TblPrBase_tblOverlap = 90725;
+    const QName_t LN_CT_TblPrBase_bidiVisual = 90726;
+    const QName_t LN_CT_TblPrBase_tblStyleRowBandSize = 90727;
+    const QName_t LN_CT_TblPrBase_tblStyleColBandSize = 90728;
+    const QName_t LN_CT_TblPrBase_tblW = 90729;
+    const QName_t LN_CT_TblPrBase_jc = 90730;
+    const QName_t LN_CT_TblPrBase_tblCellSpacing = 90731;
+    const QName_t LN_CT_TblPrBase_tblInd = 90732;
+    const QName_t LN_CT_TblPrBase_tblBorders = 90733;
+    const QName_t LN_CT_TblPrBase_shd = 90734;
+    const QName_t LN_CT_TblPrBase_tblLayout = 90735;
+    const QName_t LN_CT_TblPrBase_tblCellMar = 90736;
+    const QName_t LN_CT_TblPrBase_tblLook = 90737;
+    const QName_t LN_CT_TblPr_tblPrChange = 90738;
+    const QName_t LN_Value_ST_FtnPos_pageBottom = 90739;
+    const QName_t LN_Value_ST_FtnPos_beneathText = 90740;
+    const QName_t LN_Value_ST_FtnPos_sectEnd = 90741;
+    const QName_t LN_Value_ST_FtnPos_docEnd = 90742;
+    const QName_t LN_CT_FtnPos_val = 90743;
+    const QName_t LN_Value_ST_EdnPos_sectEnd = 90744;
+    const QName_t LN_Value_ST_EdnPos_docEnd = 90745;
+    const QName_t LN_CT_EdnPos_val = 90746;
+    const QName_t LN_CT_NumFmt_val = 90747;
+    const QName_t LN_Value_ST_RestartNumber_continuous = 90748;
+    const QName_t LN_Value_ST_RestartNumber_eachSect = 90749;
+    const QName_t LN_Value_ST_RestartNumber_eachPage = 90750;
+    const QName_t LN_CT_NumRestart_val = 90751;
+    const QName_t LN_CT_FtnEdnRef_customMarkFollows = 90752;
+    const QName_t LN_CT_FtnEdnRef_id = 90753;
+    const QName_t LN_EG_FtnEdnNumProps_numStart = 90755;
+    const QName_t LN_EG_FtnEdnNumProps_numRestart = 90756;
+    const QName_t LN_CT_FtnProps_pos = 90757;
+    const QName_t LN_CT_FtnProps_numFmt = 90758;
+    const QName_t LN_CT_EdnProps_pos = 90759;
+    const QName_t LN_CT_EdnProps_numFmt = 90760;
+    const QName_t LN_CT_RPrDefault_rPr = 90761;
+    const QName_t LN_CT_PPrDefault_pPr = 90762;
+    const QName_t LN_CT_DocDefaults_pPrDefault = 90763;
+    const QName_t LN_CT_DocDefaults_rPrDefault = 90764;
+    const QName_t LN_CT_LevelText_val = 90765;
+    const QName_t LN_CT_LevelText_null = 90766;
+    const QName_t LN_CT_LvlLegacy_legacy = 90767;
+    const QName_t LN_CT_LvlLegacy_legacySpace = 90768;
+    const QName_t LN_CT_LvlLegacy_legacyIndent = 90769;
+    const QName_t LN_CT_Lvl_lvlRestart = 90772;
+    const QName_t LN_CT_Lvl_pStyle = 90773;
+    const QName_t LN_CT_Lvl_suff = 90775;
+    const QName_t LN_CT_Lvl_lvlText = 90776;
+    const QName_t LN_CT_Lvl_lvlPicBulletId = 90777;
+    const QName_t LN_CT_Lvl_lvlJc = 90779;
+    const QName_t LN_CT_Lvl_pPr = 90780;
+    const QName_t LN_CT_Lvl_rPr = 90781;
+    const QName_t LN_CT_Lvl_ilvl = 90782;
+    const QName_t LN_CT_Lvl_tplc = 90783;
+    const QName_t LN_CT_Lvl_tentative = 90784;
+    const QName_t LN_Value_ST_MultiLevelType_singleLevel = 90785;
+    const QName_t LN_Value_ST_MultiLevelType_multilevel = 90786;
+    const QName_t LN_Value_ST_MultiLevelType_hybridMultilevel = 90787;
+    const QName_t LN_CT_AbstractNum_multiLevelType = 90789;
+    const QName_t LN_CT_AbstractNum_name = 90791;
+    const QName_t LN_CT_AbstractNum_styleLink = 90792;
+    const QName_t LN_CT_AbstractNum_numStyleLink = 90793;
+    const QName_t LN_CT_AbstractNum_lvl = 90794;
+    const QName_t LN_CT_AbstractNum_abstractNumId = 90795;
+    const QName_t LN_CT_NumLvl_startOverride = 90796;
+    const QName_t LN_CT_NumLvl_lvl = 90797;
+    const QName_t LN_CT_NumLvl_ilvl = 90798;
+    const QName_t LN_CT_Num_abstractNumId = 90799;
+    const QName_t LN_CT_Num_lvlOverride = 90800;
+    const QName_t LN_CT_Num_numId = 90801;
+    const QName_t LN_CT_Numbering_numPicBullet = 90802;
+    const QName_t LN_CT_Numbering_abstractNum = 90803;
+    const QName_t LN_CT_Numbering_num = 90804;
+    const QName_t LN_CT_Numbering_numIdMacAtCleanup = 90805;
+    const QName_t LN_CT_Style_name = 90810;
+    const QName_t LN_CT_Style_aliases = 90811;
+    const QName_t LN_CT_Style_basedOn = 90812;
+    const QName_t LN_CT_Style_next = 90813;
+    const QName_t LN_CT_Style_link = 90814;
+    const QName_t LN_CT_Style_autoRedefine = 90815;
+    const QName_t LN_CT_Style_hidden = 90816;
+    const QName_t LN_CT_Style_uiPriority = 90817;
+    const QName_t LN_CT_Style_semiHidden = 90818;
+    const QName_t LN_CT_Style_unhideWhenUsed = 90819;
+    const QName_t LN_CT_Style_qFormat = 90820;
+    const QName_t LN_CT_Style_locked = 90821;
+    const QName_t LN_CT_Style_personal = 90822;
+    const QName_t LN_CT_Style_personalCompose = 90823;
+    const QName_t LN_CT_Style_personalReply = 90824;
+    const QName_t LN_CT_Style_rsid = 90825;
+    const QName_t LN_CT_Style_pPr = 90826;
+    const QName_t LN_CT_Style_rPr = 90827;
+    const QName_t LN_CT_Style_tblPr = 90828;
+    const QName_t LN_CT_Style_trPr = 90829;
+    const QName_t LN_CT_Style_tcPr = 90830;
+    const QName_t LN_CT_Style_tblStylePr = 90831;
+    const QName_t LN_CT_Style_type = 90832;
+    const QName_t LN_CT_Style_styleId = 90833;
+    const QName_t LN_CT_Style_default = 90834;
+    const QName_t LN_CT_Style_customStyle = 90835;
+    const QName_t LN_Value_ST_FontFamily_decorative = 90836;
+    const QName_t LN_Value_ST_FontFamily_modern = 90837;
+    const QName_t LN_Value_ST_FontFamily_roman = 90838;
+    const QName_t LN_Value_ST_FontFamily_script = 90839;
+    const QName_t LN_Value_ST_FontFamily_swiss = 90840;
+    const QName_t LN_Value_ST_FontFamily_auto = 90841;
+    const QName_t LN_Value_ST_Pitch_fixed = 90842;
+    const QName_t LN_Value_ST_Pitch_variable = 90843;
+    const QName_t LN_Value_ST_Pitch_default = 90844;
+    const QName_t LN_CT_FontSig_usb0 = 90845;
+    const QName_t LN_CT_FontSig_usb1 = 90846;
+    const QName_t LN_CT_FontSig_usb2 = 90847;
+    const QName_t LN_CT_FontSig_usb3 = 90848;
+    const QName_t LN_CT_FontSig_csb0 = 90849;
+    const QName_t LN_CT_FontSig_csb1 = 90850;
+    const QName_t LN_CT_FontRel_fontKey = 90851;
+    const QName_t LN_CT_FontRel_subsetted = 90852;
+    const QName_t LN_CT_Font_altName = 90853;
+    const QName_t LN_CT_Font_panose1 = 90854;
+    const QName_t LN_CT_Font_charset = 90855;
+    const QName_t LN_CT_Font_family = 90856;
+    const QName_t LN_CT_Font_notTrueType = 90857;
+    const QName_t LN_CT_Font_pitch = 90858;
+    const QName_t LN_CT_Font_sig = 90859;
+    const QName_t LN_CT_Font_embedRegular = 90860;
+    const QName_t LN_CT_Font_embedBold = 90861;
+    const QName_t LN_CT_Font_embedItalic = 90862;
+    const QName_t LN_CT_Font_embedBoldItalic = 90863;
+    const QName_t LN_CT_Font_name = 90864;
+    const QName_t LN_Value_St_ThemeColor_dark1 = 90865;
+    const QName_t LN_Value_St_ThemeColor_light1 = 90866;
+    const QName_t LN_Value_St_ThemeColor_dark2 = 90867;
+    const QName_t LN_Value_St_ThemeColor_light2 = 90868;
+    const QName_t LN_Value_St_ThemeColor_accent1 = 90869;
+    const QName_t LN_Value_St_ThemeColor_accent2 = 90870;
+    const QName_t LN_Value_St_ThemeColor_accent3 = 90871;
+    const QName_t LN_Value_St_ThemeColor_accent4 = 90872;
+    const QName_t LN_Value_St_ThemeColor_accent5 = 90873;
+    const QName_t LN_Value_St_ThemeColor_accent6 = 90874;
+    const QName_t LN_Value_St_ThemeColor_hyperlink = 90875;
+    const QName_t LN_Value_St_ThemeColor_followedHyperlink = 90876;
+    const QName_t LN_Value_St_ThemeColor_none = 90877;
+    const QName_t LN_Value_St_ThemeColor_background1 = 90878;
+    const QName_t LN_Value_St_ThemeColor_text1 = 90879;
+    const QName_t LN_Value_St_ThemeColor_background2 = 90880;
+    const QName_t LN_Value_St_ThemeColor_text2 = 90881;
 }
   
 
--- writerfilter/source/dmapper/ConversionHelper.cxx	25 Apr 2007 11:30:51 -0000	1.7
+++ writerfilter/source/dmapper/ConversionHelper.cxx	2 Jul 2007 17:16:29 -0000	1.7.2.1
@@ -35,12 +35,9 @@
 #ifndef INCLUDED_DMAPPER_CONVERSIONHELPER_HXX
 #include <ConversionHelper.hxx>
 #endif
-#ifndef _COM_SUN_STAR_TABLE_BORDERLINE_HPP_
 #include <com/sun/star/table/BorderLine.hpp>
-#endif
-#ifndef _COM_SUN_STAR_LANG_LOCALE_HPP_
 #include <com/sun/star/lang/Locale.hpp>
-#endif
+#include <com/sun/star/text/HoriOrientation.hpp>
 #ifndef _TOOLS_COLOR_HXX
 #include <tools/color.hxx>
 #endif
@@ -528,6 +525,22 @@ sal_Int32 SnapPageDimension( sal_Int32 n
 
     return nVal;
 }
+/*-- 27.06.2007 13:42:32---------------------------------------------------
+
+  -----------------------------------------------------------------------*/
+sal_Int16 convertTableJustification( sal_Int32 nIntValue )
+{
+    sal_Int16 nOrient = text::HoriOrientation::LEFT_AND_WIDTH;
+    switch( nIntValue )
+    {
+        case 1 : nOrient = text::HoriOrientation::CENTER; break;
+        case 2 : nOrient = text::HoriOrientation::RIGHT; break;
+        case 0 :
+        //no break
+        default:;
 
+    }
+    return nOrient;
+}
 } // namespace ConversionHelper
 } //namespace dmapper
--- writerfilter/source/dmapper/ConversionHelper.hxx	25 Apr 2007 11:30:51 -0000	1.7
+++ writerfilter/source/dmapper/ConversionHelper.hxx	2 Jul 2007 17:16:29 -0000	1.7.2.1
@@ -65,6 +65,7 @@ namespace ConversionHelper{
     sal_Int32 convertToMM100(sal_Int32 _t);
     sal_Int32 ConvertColor(sal_Int32 nWordColor );
     sal_Int32 SnapPageDimension( sal_Int32 nVal );
+    sal_Int16 convertTableJustification( sal_Int32 nIntValue );
 
 } // namespace ConversionHelper
 } //namespace dmapper
--- writerfilter/source/dmapper/DomainMapper.cxx	27 Jun 2007 08:54:24 -0000	1.61
+++ writerfilter/source/dmapper/DomainMapper.cxx	2 Jul 2007 17:16:29 -0000	1.61.2.1
@@ -3349,6 +3349,7 @@ void DomainMapper::PopStyleSheetProperti
 /*-- 09.06.2006 09:52:14---------------------------------------------------
 
 -----------------------------------------------------------------------*/
+
 void DomainMapper::startCharacterGroup()
 {
     m_pImpl->PushProperties(CONTEXT_CHARACTER);
@@ -3356,17 +3357,7 @@ void DomainMapper::startCharacterGroup()
     if( rTableManager.getTableStyleName().getLength() )
     {
         PropertyMapPtr pTopContext = m_pImpl->GetTopContext();
-        const StyleSheetEntry* pStyleSheetEntry = m_pImpl->GetStyleSheetTable()->FindStyleSheetByISTD(
-                                                        rTableManager.getTableStyleName());
-        OSL_ENSURE( pStyleSheetEntry, "table style not found" );
-        PropertyMap::const_iterator aPropIter = pStyleSheetEntry->pProperties->begin();
-        while(aPropIter != pStyleSheetEntry->pProperties->end())
-        {
-            //copy all text properties form the table style to the current run attributes
-            if( aPropIter->first.bIsTextProperty )
-                pTopContext->insert(*aPropIter);
-            ++aPropIter;
-        }    
+        rTableManager.CopyTextProperties(pTopContext, m_pImpl->GetStyleSheetTable());
     }    
 }
 /*-- 09.06.2006 09:52:14---------------------------------------------------
@@ -3458,17 +3449,18 @@ void DomainMapper::utext(const sal_uInt8
 		{
             
             PropertyMapPtr pContext = m_pImpl->GetTopContext();
-
-            //-->debug
-            uno::Reference<text::XFootnote> xTest = pContext->GetFootnote();
-            //<--debug
-            if( xTest.is() )
-//            if( pContext->GetFootnote().is() )
+            if( pContext->GetFootnote().is() )
             {
                 if( !pContext->GetFootnoteSymbol() )
                     pContext->GetFootnote()->setLabel( sText );
                 //otherwise ignore sText
             }
+            else if( m_pImpl->IsOpenFieldCommand() )
+                m_pImpl->AppendFieldCommand(sText);
+            else if( m_pImpl->IsOpenField() && m_pImpl->IsFieldResultAsString())
+                /*depending on the success of the field insert operation this result will be
+                  set at the field or directly inserted into the text*/
+                m_pImpl->SetFieldResult( sText );
             else
                 m_pImpl->appendTextPortion( sText, pContext );
 		}
--- writerfilter/source/dmapper/DomainMapperTableManager.cxx	27 Jun 2007 13:22:01 -0000	1.15
+++ writerfilter/source/dmapper/DomainMapperTableManager.cxx	2 Jul 2007 17:16:29 -0000	1.15.2.1
@@ -92,16 +92,7 @@ bool DomainMapperTableManager::sprm(doct
             {
                 /* WRITERFILTERSTATUS: done: 0, planned: 2, spent: 0 */
                 //table justification 0: left, 1: center, 2: right
-                sal_Int16 nOrient = text::HoriOrientation::LEFT_AND_WIDTH;
-                switch( nIntValue )
-                {
-                    case 1 : nOrient = text::HoriOrientation::CENTER; break;
-                    case 2 : nOrient = text::HoriOrientation::RIGHT; break;
-                    case 0 :
-                    //no break
-                    default:;
-
-                }
+                sal_Int16 nOrient = ConversionHelper::convertTableJustification( nIntValue );
                 PropertyMapPtr pTableMap( new PropertyMap );
                 pTableMap->Insert( PROP_HORI_ORIENT, false, uno::makeAny( nOrient ) );
                 insertTableProps( pTableMap );
@@ -379,6 +370,42 @@ void DomainMapperTableManager::clearData
     m_bFullWidth = false;
     m_aCellWidths.clear();
     m_sTableStyleName = ::rtl::OUString();
+    m_pTableStyleTextProperies.reset();
 }
+/*-- 27.06.2007 14:19:50---------------------------------------------------
 
+  -----------------------------------------------------------------------*/
+void lcl_CopyTextProperties(PropertyMapPtr pToFill,
+            const StyleSheetEntry* pStyleSheetEntry, StyleSheetTablePtr pStyleSheetTable)
+{
+    //fill base style properties first, recursively
+    if( pStyleSheetEntry->sBaseStyleIdentifier.getLength())
+    {
+        const StyleSheetEntry* pParentStyleSheet = 
+            pStyleSheetTable->FindStyleSheetByISTD(pStyleSheetEntry->sBaseStyleIdentifier);
+        OSL_ENSURE( pParentStyleSheet, "table style not found" );
+        lcl_CopyTextProperties( pToFill, pParentStyleSheet, pStyleSheetTable);
+    }
+
+    PropertyMap::const_iterator aPropIter = pStyleSheetEntry->pProperties->begin();
+    while(aPropIter != pStyleSheetEntry->pProperties->end())
+    {
+        //copy all text properties form the table style to the current run attributes
+        if( aPropIter->first.bIsTextProperty )
+            pToFill->insert(*aPropIter);
+        ++aPropIter;
+    }    
+}
+void DomainMapperTableManager::CopyTextProperties(PropertyMapPtr pContext, StyleSheetTablePtr pStyleSheetTable)
+{
+    if( !m_pTableStyleTextProperies.get())
+    {
+        m_pTableStyleTextProperies.reset( new PropertyMap );
+        const StyleSheetEntry* pStyleSheetEntry = pStyleSheetTable->FindStyleSheetByISTD(
+                                                        m_sTableStyleName);
+        OSL_ENSURE( pStyleSheetEntry, "table style not found" );
+        lcl_CopyTextProperties(m_pTableStyleTextProperies, pStyleSheetEntry, pStyleSheetTable);
+    }
+    pContext->insert( m_pTableStyleTextProperies );
+}
 }
--- writerfilter/source/dmapper/DomainMapperTableManager.hxx	27 Jun 2007 08:54:24 -0000	1.7
+++ writerfilter/source/dmapper/DomainMapperTableManager.hxx	2 Jul 2007 17:16:29 -0000	1.7.2.1
@@ -35,16 +35,10 @@
 #ifndef INCLUDED_DOMAIN_MAPPER_TABLE_MANAGER_HXX
 #define INCLUDED_DOMAIN_MAPPER_TABLE_MANAGER_HXX
 
-#ifndef INCLUDED_TABLE_MANAGER_HXX
 #include <doctok/TableManager.hxx>
-#endif
-#ifndef INCLUDED_DMAPPER_PROPERTYMAP_HXX
-#include "PropertyMap.hxx"
-#endif
-
-#ifndef _COM_SUN_STAR_TEXT_XTEXTRANGE_HPP_
+#include <PropertyMap.hxx>
+#include <StyleSheetTable.hxx>
 #include <com/sun/star/text/XTextRange.hpp>
-#endif
 #include <vector>
 
 namespace dmapper {
@@ -61,6 +55,8 @@ class DomainMapperTableManager : public 
     sal_Int32       m_nTableWidth; //might be set directly or has to be calculated from the column positions
     bool            m_bFullWidth; //width is set to full, disable setting of different orientation values
     ::rtl::OUString m_sTableStyleName;    
+    PropertyMapPtr  m_pTableStyleTextProperies;
+
     ::std::vector<sal_Int32>  m_aCellWidths;
     
     virtual void clearData();
@@ -76,6 +72,9 @@ public:
     virtual void endOfRowAction();
 
     const ::rtl::OUString& getTableStyleName() const { return m_sTableStyleName; }
+    /// copy the text properties of the table style and its parent into pContext
+    void    CopyTextProperties(PropertyMapPtr pContext, StyleSheetTablePtr pStyleSheetTable);
+
 };
 
 }
--- writerfilter/source/dmapper/DomainMapper_Impl.cxx	27 Jun 2007 08:54:24 -0000	1.19
+++ writerfilter/source/dmapper/DomainMapper_Impl.cxx	2 Jul 2007 17:16:29 -0000	1.19.2.1
@@ -314,6 +314,15 @@ enum FieldId
      example: TOC "EntryText \f \l 2 \n
      */
     ,FIELD_TC
+    /* document statistic - number of characters
+     */
+    ,FIELD_NUMCHARS
+    /* document statistic - number of words
+     */
+    ,FIELD_NUMWORDS
+    /* document statistic - number of pages
+     */
+    ,FIELD_NUMPAGES
 };
 struct FieldConversion
 {
@@ -1999,6 +2008,9 @@ void DomainMapper_Impl::CloseFieldComman
     //            {::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("USERNAME")),      "ExtendedUser",             "", FIELD_USERNAME     }
                 {::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("TOC")), "com.sun.star.text.ContentIndex", "", FIELD_TOC},
                 {::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("TC")), "com.sun.star.text.ContentIndexMark", "", FIELD_TC},
+                {::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("NUMCHARS")), "CharacterCount", "", FIELD_NUMCHARS},
+                {::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("NUMWORDS")), "WordCount", "", FIELD_NUMWORDS},
+                {::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("NUMPAGES")), "PageCount", "", FIELD_NUMPAGES},
 
     //            {::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("")), "", "", FIELD_},
 
@@ -2565,6 +2577,14 @@ void DomainMapper_Impl::CloseFieldComman
                         pContext->SetTC( xTC );
                     }
                     break;
+                    case  FIELD_NUMCHARS:
+                    case  FIELD_NUMWORDS:
+                    case  FIELD_NUMPAGES:
+                        xFieldProperties->setPropertyValue(
+                            rPropNameSupplier.GetName(PROP_NUMBERING_TYPE),
+                            uno::makeAny( lcl_ParseNumberingType(pContext->GetCommand()) ));
+                        break;
+                        
                 }
             }
             //set the text field if there is any
--- writerfilter/source/dmapper/DomainMapper_Impl.hxx	27 Jun 2007 08:54:25 -0000	1.18
+++ writerfilter/source/dmapper/DomainMapper_Impl.hxx	2 Jul 2007 17:16:29 -0000	1.18.2.1
@@ -150,7 +150,6 @@ typedef boost::shared_ptr<FieldContext> 
 
 typedef std::stack<ContextType>                 ContextStack;
 typedef std::stack<PropertyMapPtr>              PropertyStack;
-typedef boost::shared_ptr< StyleSheetTable >    StyleSheetTablePtr;
 typedef std::stack< ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextAppendAndConvert > >
                                                 TextAppendStack;
 typedef std::stack<FieldContextPtr>                FieldStack;
--- writerfilter/source/dmapper/StyleSheetTable.cxx	27 Jun 2007 08:54:25 -0000	1.27
+++ writerfilter/source/dmapper/StyleSheetTable.cxx	2 Jul 2007 17:16:29 -0000	1.27.2.1
@@ -32,41 +32,20 @@
  *    MA  02111-1307  USA
  *
  ************************************************************************/
-#ifndef INCLUDED_STYLESHEETTABLE_HXX
 #include <StyleSheetTable.hxx>
-#endif
-#ifndef INCLUDED_DOMAINMAPPER_HXX
 #include <dmapper/DomainMapper.hxx>
-#endif
-#ifndef INCLUDED_RESOURCESIDS
+#include <ConversionHelper.hxx>
 #include <doctok/resourceids.hxx>
 #include <ooxml/resourceids.hxx>
-#endif
 #include <vector>
-#ifndef _COM_SUN_STAR_BEANS_XMULTIPROPERTYSET_HPP_
 #include <com/sun/star/beans/XMultiPropertySet.hpp>
-#endif
-#ifndef _COM_SUN_STAR_BEANS_XPROPERTYVALUE_HPP_
 #include <com/sun/star/beans/PropertyValue.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CONTAINER_XNAMECONTAINER_HPP_
 #include <com/sun/star/container/XNameContainer.hpp>
-#endif
-#ifndef _COM_SUN_STAR_TEXT_XTEXTDOCUMENT_HPP_
 #include <com/sun/star/text/XTextDocument.hpp>
-#endif
-#ifndef _COM_SUN_STAR_STYLE_XSTYLEFAMILIESSUPPLIER_HPP_
 #include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
-#endif
-#ifndef _COM_SUN_STAR_STYLE_XSTYLE_HPP_
 #include <com/sun/star/style/XStyle.hpp>
-#endif
-#ifndef _COM_SUN_STAR_TEXT_WRITINGMODE_HPP_
 #include <com/sun/star/text/WritingMode.hpp>
-#endif
-#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_
 #include <com/sun/star/lang/XMultiServiceFactory.hpp>
-#endif
 #include <map>
 #include <stdio.h>
 #include <rtl/ustrbuf.hxx>
@@ -680,7 +659,11 @@ void StyleSheetTable::sprm(doctok::Sprm 
         m_pImpl->m_rDMapper.sprm( rSprm );
         m_pImpl->m_rDMapper.PopStyleSheetProperties();
     break;
-    case NS_ooxml::LN_CT_TrPrBase_jc:     //table alignment
+    case NS_ooxml::LN_CT_TblPrBase_jc:     //table alignment - row properties!
+         m_pImpl->m_pCurrentEntry->pProperties->Insert( PROP_HORI_ORIENT, false, 
+            uno::makeAny( ConversionHelper::convertTableJustification( nIntValue )));
+    break;
+    case NS_ooxml::LN_CT_TrPrBase_jc:     //table alignment - row properties!
             dynamic_cast< StyleSheetPropertyMap* >( m_pImpl->m_pCurrentEntry->pProperties.get() )->SetCT_TrPrBase_jc(nIntValue);
         break;
     case NS_ooxml::LN_CT_Style_pPr:
--- writerfilter/source/dmapper/StyleSheetTable.hxx	30 May 2007 10:43:21 -0000	1.11
+++ writerfilter/source/dmapper/StyleSheetTable.hxx	2 Jul 2007 17:16:29 -0000	1.11.2.1
@@ -110,6 +110,8 @@ private:
     void resolveAttributeProperties(doctok::Value & val);
     void resolveSprmProps(doctok::Sprm & sprm_);
 };
+typedef boost::shared_ptr< StyleSheetTable >    StyleSheetTablePtr;
+
 }
 
 #endif //
--- writerfilter/source/filter/WriterFilterDetection.cxx	8 Mar 2007 09:18:02 -0000	1.2
+++ writerfilter/source/filter/WriterFilterDetection.cxx	2 Jul 2007 17:16:30 -0000	1.2.2.1
@@ -46,18 +46,6 @@
 #ifndef _COM_SUN_STAR_EMBED_ELEMENTMODES_HPP_
 #include <com/sun/star/embed/ElementModes.HPP>
 #endif
-#ifndef _COM_SUN_STAR_IO_XINPUTSTREAM_HPP_
-#include <com/sun/star/io/XInputStream.hpp>
-#endif
-#ifndef _SOT_STORAGE_HXX
-#include <sot/storage.hxx>
-#endif
-//#ifndef _SFXDOCFILE_HXX //todo: remove sfx2!
-//#include <sfx2/docfile.hxx>
-//#endif
-#ifndef _UNOTOOLS_STREAMHELPER_HXX_
-#include <unotools/ucbstreamhelper.hxx>
-#endif
 using namespace ::rtl;
 using namespace ::cppu;
 using namespace ::com::sun::star;
@@ -92,68 +80,36 @@ OUString WriterFilterDetection::detect( 
    throw( uno::RuntimeException )
 {
     OUString sTypeName;
+    bool bContent_Types = false;
     bool bWord = false;
     sal_Int32 nPropertyCount = rDescriptor.getLength();
     const beans::PropertyValue* pValues = rDescriptor.getConstArray();
     rtl::OUString sURL;
-    uno::Reference < io::XStream > xStream;
-    uno::Reference < io::XInputStream > xInputStream;
     for( sal_Int32 nProperty = 0; nProperty < nPropertyCount; ++nProperty )
     {
         if( pValues[nProperty].Name == OUString(RTL_CONSTASCII_USTRINGPARAM("TypeName")) )
+        {
             rDescriptor[nProperty].Value >>= sTypeName;
+        }
         else if( pValues[nProperty].Name.equalsAsciiL(RTL_CONSTASCII_STRINGPARAM ( "URL" )) )
+        {
             pValues[nProperty].Value >>= sURL;
-        else if( pValues[nProperty].Name.equalsAsciiL(RTL_CONSTASCII_STRINGPARAM ( "Stream" )) )
-            pValues[nProperty].Value >>= xStream;
-        else if( pValues[nProperty].Name.equalsAsciiL(RTL_CONSTASCII_STRINGPARAM ( "InputStream" )) )
-            pValues[nProperty].Value >>= xInputStream;
+        }
     }
-    bool bBinary = sTypeName.equalsAsciiL ( RTL_CONSTASCII_STRINGPARAM ( "writer_MS_Word_97" ));
-
     try
     {
-        if(bBinary)
-        {
-            SvStream* pStream = ::utl::UcbStreamHelper::CreateStream( xInputStream );
-            if ( pStream && SotStorage::IsStorageFile(pStream) )
-
-            {
-                SotStorageRef xStg = new SotStorage( pStream, FALSE );
-
-                bool bTable2 = xStg->IsContained( rtl::OUString::createFromAscii("1Table" ));
-                SotStorageStreamRef xRef =
-
-                    xStg->OpenSotStream(rtl::OUString::createFromAscii("WordDocument"),
-
-                            STREAM_STD_READ | STREAM_NOCREATE );
-
-                if(bTable2 && xStg.Is())
-                {
-                    xRef->Seek(2);
-                    sal_Int16 nWord;
-                    *xRef >> nWord;
-                    //version detection
-                    bWord = nWord >= 0x6a && nWord <= 0xc1;
-                }
-            }
-        }
-        else
+        uno::Reference< embed::XStorage > xDocStorage = comphelper::OStorageHelper::GetStorageFromURL(
+                                        sURL, embed::ElementModes::READ );
+        if( xDocStorage.is() )
         {
-            uno::Reference< embed::XStorage > xDocStorage = comphelper::OStorageHelper::GetStorageFromURL(
-                                            sURL, embed::ElementModes::READ );
-            if( xDocStorage.is() )
+            uno::Sequence< ::rtl::OUString > aNames = xDocStorage->getElementNames();
+            const ::rtl::OUString* pNames = aNames.getConstArray();
+            for(sal_Int32 nName = 0; nName < aNames.getLength(); ++nName)
             {
-                uno::Sequence< ::rtl::OUString > aNames = xDocStorage->getElementNames();
-                const ::rtl::OUString* pNames = aNames.getConstArray();
-                for(sal_Int32 nName = 0; nName < aNames.getLength(); ++nName)
-                {
-                    if(pNames[nName].equalsAsciiL(RTL_CONSTASCII_STRINGPARAM ( "word" )))
-                    {
-                        bWord = true;
-                        break;
-                    }
-                }
+                if( pNames[nName].equalsAsciiL(RTL_CONSTASCII_STRINGPARAM ( "[Content_Types].xml" )))
+                    bContent_Types = true;
+                else if(pNames[nName].equalsAsciiL(RTL_CONSTASCII_STRINGPARAM ( "word" )))
+                    bWord = true;
             }
         }
     }
@@ -161,7 +117,7 @@ OUString WriterFilterDetection::detect( 
     {
         OSL_ASSERT("exception while opening storage");
     }
-    if( !bWord )
+    if( !bContent_Types || !bWord )
         sTypeName = ::rtl::OUString();
    return sTypeName;
 }
--- writerfilter/source/ooxml/OOXMLContext.cxx	27 Jun 2007 13:18:19 -0000	1.36
+++ writerfilter/source/ooxml/OOXMLContext.cxx	2 Jul 2007 17:16:30 -0000	1.36.2.1
@@ -377,6 +377,8 @@ void OOXMLContext::sendTableDepth() cons
 
 void OOXMLContext::startCharacterGroup()
 {
+    endCharacterGroup();
+
     if (isForwardEvents() && ! mpParserState->isInCharacterGroup())
     {
         mrStream.startCharacterGroup();    
@@ -395,7 +397,7 @@ void OOXMLContext::endCharacterGroup()
 
 void OOXMLContext::startParagraphGroup()
 {
-    endCharacterGroup();
+    endParagraphGroup();
 
     if (isForwardEvents() && ! mpParserState->isInParagraphGroup())
     {
@@ -427,7 +429,7 @@ void OOXMLContext::endParagraphGroup()
 
 void OOXMLContext::startSectionGroup()
 {
-    endParagraphGroup();
+    endSectionGroup();
 
     if (isForwardEvents() && ! mpParserState->isInSectionGroup())
     {
@@ -503,7 +505,7 @@ void OOXMLContext::resolveHeader(const s
 void OOXMLContext::resolveFooter(const sal_Int32 type, const rtl::OUString & rId)
 {
     mpParserState->getDocument()->resolveFooter(mrStream, type, rId);
-}
+ }
 
 void OOXMLContext::setToken(TokenEnum_t eToken)
 {
@@ -539,9 +541,12 @@ void OOXMLContextStream::newProperty(Tok
 {
     doctok::Id nId = this->getId(nToken);
     
-    OOXMLPropertyImpl::Pointer_t pProperty
-        (new OOXMLPropertyImpl(nId, pVal, OOXMLPropertyImpl::ATTRIBUTE));
-    mpPropertySetAttrs->add(pProperty);    
+    if (nId != 0x0)
+    {
+        OOXMLPropertyImpl::Pointer_t pProperty
+            (new OOXMLPropertyImpl(nId, pVal, OOXMLPropertyImpl::ATTRIBUTE));
+        mpPropertySetAttrs->add(pProperty);    
+    }
 }
 
 void OOXMLContextStream::lcl_characters(const rtl::OUString & sText) 
@@ -617,9 +622,12 @@ void OOXMLContextProperties::newProperty
 {
     doctok::Id nId = this->getId(nToken);
     
-    OOXMLPropertyImpl::Pointer_t pProperty
-        (new OOXMLPropertyImpl(nId, pVal, OOXMLPropertyImpl::ATTRIBUTE));
-    mpPropertySet->add(pProperty);    
+    if (nId != 0x0)
+    {
+        OOXMLPropertyImpl::Pointer_t pProperty
+            (new OOXMLPropertyImpl(nId, pVal, OOXMLPropertyImpl::ATTRIBUTE));
+        mpPropertySet->add(pProperty);    
+    }
 }
 
 void OOXMLContextProperties::setPropertySet(OOXMLPropertySet::Pointer_t 
@@ -1026,8 +1034,6 @@ void OOXMLContextTextTableCell::startCel
 
 void OOXMLContextTextTableCell::endCell()
 {
-    startCharacterGroup();
-
     OOXMLPropertySet * pProps = new OOXMLPropertySetImpl();
     {
         OOXMLValue::Pointer_t pVal
@@ -1054,7 +1060,6 @@ void OOXMLContextTextTableCell::endCell(
     if (isForwardEvents())
         mrStream.props(doctok::Reference<Properties>::Pointer_t(pProps));
 
-    // no endCharacterGroup here
 }
 
 /*
--- writerfilter/source/ooxml/OOXMLPropertySetImpl.cxx	10 May 2007 14:37:38 -0000	1.18
+++ writerfilter/source/ooxml/OOXMLPropertySetImpl.cxx	2 Jul 2007 17:16:30 -0000	1.18.2.1
@@ -561,4 +561,33 @@ OOXMLTable * OOXMLTableImpl::clone() con
     return new OOXMLTableImpl(*this);
 }
 
+/*
+  class: OOXMLPropertySetEntryToString
+*/
+
+OOXMLPropertySetEntryToString::OOXMLPropertySetEntryToString(Id nId)
+: mnId(nId)
+{
+}
+
+OOXMLPropertySetEntryToString::~OOXMLPropertySetEntryToString()
+{
+}
+
+void OOXMLPropertySetEntryToString::sprm(Sprm & /*rSprm*/)
+{
+}
+
+void OOXMLPropertySetEntryToString::attribute(Id nId, Value & rValue)
+{
+    clog << "OOXMLPropertySetEntryToString::attribute: " << nId << endl;
+
+    if (nId == mnId)
+        mStr = rValue.getString();
+}
+
+const ::rtl::OUString & OOXMLPropertySetEntryToString::getString() const
+{
+    return mStr;
+}
 }
--- writerfilter/source/ooxml/OOXMLPropertySetImpl.hxx	10 May 2007 14:37:38 -0000	1.17
+++ writerfilter/source/ooxml/OOXMLPropertySetImpl.hxx	2 Jul 2007 17:16:30 -0000	1.17.2.1
@@ -212,6 +212,21 @@ public:
     virtual OOXMLTable * clone() const;
 };
 
+class OOXMLPropertySetEntryToString : public Properties
+{
+    Id mnId;
+    ::rtl::OUString mStr;
+
+public:
+    OOXMLPropertySetEntryToString(Id nId);
+    virtual ~OOXMLPropertySetEntryToString();
+
+    virtual void sprm(Sprm & rSprm);
+    virtual void attribute(Id nId, Value & rValue);
+
+    const ::rtl::OUString & getString() const;
+};
+
 Sprm::Kind SprmKind(sal_uInt32 nSprmCode);
 
 }  // namespace ooxml
--- writerfilter/source/ooxml/OOXMLSaxHandler.cxx	27 Jun 2007 09:16:33 -0000	1.22
+++ writerfilter/source/ooxml/OOXMLSaxHandler.cxx	2 Jul 2007 17:16:30 -0000	1.22.2.1
@@ -162,8 +162,8 @@ void OOXMLSaxHandler::startElement
     {
         pContext->setParentResource(pTopContext->getResource());
         handleAttributes(pContext, attriblist);
-        pContext->resolvePropertySetAttrs();
         pContext->startAction();
+        pContext->resolvePropertySetAttrs();
         pContext->setToken(nToken);
     }
 }
--- writerfilter/source/ooxml/OOXMLresources.cxx	27 Jun 2007 13:19:22 -0000	1.73
+++ writerfilter/source/ooxml/OOXMLresources.cxx	2 Jul 2007 17:16:30 -0000	1.73.2.1
@@ -48,6 +48,8 @@
 #include "OOXMLPropertySetImpl.hxx"
 #include "TokenMap.hxx"
 
+/// @cond GENERATED
+
 namespace ooxml {
 using namespace ::std;
 
@@ -57,6 +59,9 @@ static const sal_uInt8 sFtnEdnSep[] = { 
 static const sal_uInt8 sFtnEdnCont[] = { 0x4, 0x0 }; 
 static const sal_uInt8 sTab[] = { 0x9, 0x0 }; 
 static const sal_uInt8 sPgNum[] = { 0x0, 0x0 }; 
+static const sal_uInt8 sFieldStart[] = { 0x13, 0x0 }; 
+static const sal_uInt8 sFieldSep[] = { 0x14, 0x0 }; 
+static const sal_uInt8 sFieldEnd[] = { 0x15, 0x0 }; 
 
       
       
@@ -26998,7 +27003,7 @@ void OOXMLContext_wordprocessingml_CT_Dr
 /* 
     class: OOXMLContext_wordprocessingml_CT_SimpleField*/
 OOXMLContext_wordprocessingml_CT_SimpleField::OOXMLContext_wordprocessingml_CT_SimpleField(const OOXMLContext & rContext)
-: OOXMLContext(rContext)
+: OOXMLContextStream(rContext)
 {
 }
 OOXMLContext_wordprocessingml_CT_SimpleField::~OOXMLContext_wordprocessingml_CT_SimpleField()
@@ -27048,9 +27053,32 @@ OOXMLContext_wordprocessingml_CT_SimpleF
     return pResult;
 }
      
-bool OOXMLContext_wordprocessingml_CT_SimpleField::lcl_attribute(TokenEnum_t /*nToken*/, const rtl::OUString & /*rValue*/)
+bool OOXMLContext_wordprocessingml_CT_SimpleField::lcl_attribute(TokenEnum_t nToken, const rtl::OUString & rValue)
 {
     bool bResult = false;
+    switch (nToken)
+    {
+     case OOXML_ATTRIBUTE_wordprocessingml_instr:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+     case OOXML_ATTRIBUTE_wordprocessingml_fldLock:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+     case OOXML_ATTRIBUTE_wordprocessingml_dirty:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+    default:
+      ;
+    }
     
     return bResult;
 }
@@ -27059,7 +27087,30 @@ OOXMLContext_wordprocessingml_CT_SimpleF
 {
     doctok::Id nResult = 0x0;
     
-    nResult = getIdFromRefs(nToken);
+    switch (nToken)
+    {
+        // CT_SimpleField : fldData
+     case OOXML_ELEMENT_wordprocessingml_fldData:
+        nResult = NS_ooxml::LN_CT_SimpleField_fldData;
+        break;
+        // CT_SimpleField : instr
+     case OOXML_ATTRIBUTE_wordprocessingml_instr:
+        nResult = NS_ooxml::LN_CT_SimpleField_instr;
+        break;
+        // CT_SimpleField : fldLock
+     case OOXML_ATTRIBUTE_wordprocessingml_fldLock:
+        nResult = NS_ooxml::LN_CT_SimpleField_fldLock;
+        break;
+        // CT_SimpleField : dirty
+     case OOXML_ATTRIBUTE_wordprocessingml_dirty:
+        nResult = NS_ooxml::LN_CT_SimpleField_dirty;
+        break;
+    case OOXML_TOKENS_END: // prevent warning
+        break;
+    default:
+        nResult = getIdFromRefs(nToken);
+        break;
+    }
     return nResult;  
 }
     
@@ -27081,13 +27132,38 @@ doctok::Id OOXMLContext_wordprocessingml
     
 void OOXMLContext_wordprocessingml_CT_SimpleField::lcl_characters(const rtl::OUString & sText) 
 {
-OOXMLContext::lcl_characters(sText);
+OOXMLContextStream::lcl_characters(sText);
 }
 void OOXMLContext_wordprocessingml_CT_SimpleField::startAction()
 {
+    startCharacterGroup();
+    if (isForwardEvents())        
+        mrStream.utext(sFieldStart, 1);
+    endCharacterGroup();
+      
+    startCharacterGroup();
+    {
+        OOXMLPropertySetEntryToString aHandler(NS_ooxml::LN_CT_SimpleField_instr);
+        getPropertySetAttrs()->resolve(aHandler);
+        const ::rtl::OUString & sText = aHandler.getString();
+        mrStream.utext(reinterpret_cast < const sal_uInt8 * > 
+                   (sText.getStr()), 
+                   sText.getLength());        
+    }
+    endCharacterGroup();
+    startCharacterGroup();
+    if (isForwardEvents())        
+        mrStream.utext(sFieldSep, 1);
+    endCharacterGroup();
+      
 }
 void OOXMLContext_wordprocessingml_CT_SimpleField::endAction()
 {
+    startCharacterGroup();
+    if (isForwardEvents())        
+        mrStream.utext(sFieldEnd, 1);
+    endCharacterGroup();
+      
 }
 /* 
     class: OOXMLContext_wordprocessingml_CT_FFTextType*/
@@ -30441,9 +30517,20 @@ OOXMLContext_wordprocessingml_CT_Text::e
     return pResult;
 }
      
-bool OOXMLContext_wordprocessingml_CT_Text::lcl_attribute(TokenEnum_t /*nToken*/, const rtl::OUString & /*rValue*/)
+bool OOXMLContext_wordprocessingml_CT_Text::lcl_attribute(TokenEnum_t nToken, const rtl::OUString & rValue)
 {
     bool bResult = false;
+    switch (nToken)
+    {
+     case OOXML_ATTRIBUTE_www_w3_org_XML_1998_namespace_space:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+    default:
+      ;
+    }
     
     return bResult;
 }
@@ -30452,7 +30539,18 @@ OOXMLContext_wordprocessingml_CT_Text::g
 {
     doctok::Id nResult = 0x0;
     
-    nResult = getIdFromRefs(nToken);
+    switch (nToken)
+    {
+        // CT_Text : xml:space
+     case OOXML_ATTRIBUTE_www_w3_org_XML_1998_namespace_space:
+        nResult = NS_ooxml::LN_CT_Text_space;
+        break;
+    case OOXML_TOKENS_END: // prevent warning
+        break;
+    default:
+        nResult = getIdFromRefs(nToken);
+        break;
+    }
     return nResult;  
 }
     
@@ -30798,6 +30896,8 @@ void OOXMLContext_wordprocessingml_CT_Cr
 }
 void OOXMLContext_wordprocessingml_CT_Cr::endAction()
 {
+    if (! mpParserState->isInCharacterGroup())
+       startCharacterGroup();
     if (isForwardEvents())        
         mrStream.utext(sCR, 1);
 }
@@ -31177,9 +31277,32 @@ OOXMLContext_wordprocessingml_CT_R::elem
     return pResult;
 }
      
-bool OOXMLContext_wordprocessingml_CT_R::lcl_attribute(TokenEnum_t /*nToken*/, const rtl::OUString & /*rValue*/)
+bool OOXMLContext_wordprocessingml_CT_R::lcl_attribute(TokenEnum_t nToken, const rtl::OUString & rValue)
 {
     bool bResult = false;
+    switch (nToken)
+    {
+     case OOXML_ATTRIBUTE_wordprocessingml_rsidRPr:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+     case OOXML_ATTRIBUTE_wordprocessingml_rsidDel:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+     case OOXML_ATTRIBUTE_wordprocessingml_rsidR:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+    default:
+      ;
+    }
     
     return bResult;
 }
@@ -36285,9 +36408,44 @@ OOXMLContext_wordprocessingml_CT_P::elem
     return pResult;
 }
      
-bool OOXMLContext_wordprocessingml_CT_P::lcl_attribute(TokenEnum_t /*nToken*/, const rtl::OUString & /*rValue*/)
+bool OOXMLContext_wordprocessingml_CT_P::lcl_attribute(TokenEnum_t nToken, const rtl::OUString & rValue)
 {
     bool bResult = false;
+    switch (nToken)
+    {
+     case OOXML_ATTRIBUTE_wordprocessingml_rsidRPr:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+     case OOXML_ATTRIBUTE_wordprocessingml_rsidR:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+     case OOXML_ATTRIBUTE_wordprocessingml_rsidDel:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+     case OOXML_ATTRIBUTE_wordprocessingml_rsidP:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+     case OOXML_ATTRIBUTE_wordprocessingml_rsidRDefault:
+        {
+            OOXMLValue::Pointer_t pVal(new OOXMLStringValue(rValue));
+            newProperty(nToken, pVal);
+        }
+      break;
+    default:
+      ;
+    }
     
     return bResult;
 }
@@ -36327,6 +36485,8 @@ void OOXMLContext_wordprocessingml_CT_P:
 }
 void OOXMLContext_wordprocessingml_CT_P::endAction()
 {
+    if (! mpParserState->isInCharacterGroup())
+       startCharacterGroup();
     if (isForwardEvents())        
         mrStream.utext(sCR, 1);
 }
@@ -37727,7 +37887,6 @@ OOXMLContextTextTableCell::lcl_character
 }
 void OOXMLContext_wordprocessingml_CT_Tc::startAction()
 {
-    startParagraphGroup();
     startCell();
 }
 void OOXMLContext_wordprocessingml_CT_Tc::endAction()
@@ -50064,3 +50223,5 @@ void OOXMLContext_wordprocessingml_gloss
 }
       
 }
+/// @endcond GENERATED
+
--- writerfilter/source/ooxml/OOXMLresources.hxx	27 Jun 2007 09:19:54 -0000	1.71
+++ writerfilter/source/ooxml/OOXMLresources.hxx	2 Jul 2007 17:16:32 -0000	1.71.2.1
@@ -53,6 +53,8 @@ namespace ooxml {
 using namespace ::std;
 using namespace ::com::sun::star;
 using namespace doctok;
+
+/// @cond GENERATED
       
       
 class OOXMLContext_drawingml_CT_AlphaBiLevelEffect : public OOXMLContext
@@ -6988,7 +6990,7 @@ public:
     virtual string getType() const { return "OOXMLContext_wordprocessingml_CT_Drawing"; }
 };
     
-class OOXMLContext_wordprocessingml_CT_SimpleField : public OOXMLContext
+class OOXMLContext_wordprocessingml_CT_SimpleField : public OOXMLContextStream
 {
 public:
     OOXMLContext_wordprocessingml_CT_SimpleField(const OOXMLContext & rContext);
@@ -13089,5 +13091,6 @@ extern rtl::OUString OOXMLValueString_cu
 extern rtl::OUString OOXMLValueString_above;
 extern rtl::OUString OOXMLValueString_below;
       
+/// @endcond
 }
 #endif //INCLUDED_OOXML_RESOURCES_HXX
--- writerfilter/source/ooxml/makefile.mk	15 Jun 2007 09:26:53 -0000	1.6
+++ writerfilter/source/ooxml/makefile.mk	2 Jul 2007 17:16:32 -0000	1.6.2.1
@@ -98,6 +98,7 @@ WRITERFILTERINCDIR=..$/..$/inc
 
 OOXMLMODEL=model.xml
 OOXMLPREPROCESSXSL=modelpreprocess.xsl
+OOXMLRESOURCESTOOLSXSL=resourcestools.xsl
 OOXMLRESORUCETOKENSXSL=resourcestokens.xsl
 OOXMLRESOURCESXSL=resources.xsl
 OOXMLRESOURCESIMPLXSL=resourcesimpl.xsl
@@ -123,7 +124,7 @@ OOXMLGENHEADERS=$(OOXMLRESOURCESHXX) $(O
 XALANJAR=$(SOLARVER)$/$(INPATH)$/bin$(UPDMINOREXT)$/xalan.jar
 XALAN=$(JAVA) -jar $(XALANJAR)
 
-$(MODELPROCESSED): $(OOXMLPREPROCESSXSL) $(OOXMLMODEL)
+$(MODELPROCESSED): $(OOXMLPREPROCESSXSL) $(OOXMLMODEL) $(OOXMLRESOURCESTOOLSXSL)
 	$(XALAN) -xsl $(OOXMLPREPROCESSXSL) -in $(OOXMLMODEL) > $(MODELPROCESSED)
 
 $(OOXMLTOKENSHXX): $(OOXMLRESORUCETOKENSXSL) $(MODELPROCESSED)
--- writerfilter/source/ooxml/model.xml	27 Jun 2007 13:16:27 -0000	1.64
+++ writerfilter/source/ooxml/model.xml	2 Jul 2007 17:16:32 -0000	1.64.2.1
@@ -4395,7 +4395,9 @@
       <define name="CT_Text">
         <ref name="ST_String"/>
         <optional>
-          <attribute name="xml:space"/>
+          <attribute name="xml:space">
+            <text/>
+          </attribute>
         </optional>
       </define>
       <define name="CT_R">
@@ -9220,7 +9222,9 @@
       <define name="CT_Text">
         <ref name="ST_String"/>
         <optional>
-          <attribute name="xml:space"/>
+          <attribute name="xml:space">
+            <text/>
+          </attribute>
         </optional>
       </define>
       <define name="CT_FtnEdnRefChar">
@@ -14661,6 +14665,18 @@
     <resource xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" name="CT_Rel" resource="Properties">
       <attribute name="r:id" tokenid="ooxml:CT_Rel_id"/>
     </resource>
+    <resource name="CT_SimpleField" resource="Stream">
+      <sprm name="fldData" tokenid="ooxml:CT_SimpleField_fldData"/>
+      <attribute name="instr" tokenid="ooxml:CT_SimpleField_instr"/>
+      <attribute name="fldLock" tokenid="ooxml:CT_SimpleField_fldLock"/>
+      <attribute name="dirty" tokenid="ooxml:CT_SimpleField_dirty"/>
+      <action name="start" action="fieldstart"/>
+      <action name="start" action="startCharacterGroup"/>
+      <action name="start" action="printproperty" tokenid="ooxml:CT_SimpleField_instr"/>
+      <action name="start" action="endCharacterGroup"/>
+      <action name="start" action="fieldsep"/>
+      <action name="end" action="fieldend"/>
+    </resource>
     <resource name="CT_FFTextType" resource="StringValue" generated="yes"/>
     <resource name="CT_FFName" resource="StringValue" generated="yes"/>
     <resource name="CT_FFHelpText" resource="StringValue" generated="yes"/>
@@ -14877,6 +14893,7 @@
       <attribute name="char" tokenid="ooxml:CT_Sym_char"/>
     </resource>
     <resource name="CT_Text" resource="Stream">
+      <attribute name="xml:space" tokenid="ooxml:CT_Text_space"/>
       <action name="characters" action="text"/>
     </resource>
     <resource name="CT_FtnEdnRefChar" resource="Stream">
@@ -14984,7 +15001,6 @@
     <resource name="CT_P" resource="Stream">
       <action name="start" action="startParagraphGroup"/>
       <action name="start" action="sendTableDepth"/>
-      <action name="end" action="endOfCharacterGroup"/>
       <action name="end" action="endOfParagraph"/>
     </resource>
     <resource name="ST_TblWidth" resource="List">
@@ -15051,7 +15067,6 @@
     <resource name="CT_TcPr" resource="Properties"/>
     <resource name="CT_TcPrInner" resource="Properties"/>
     <resource name="CT_Tc" resource="TextTableCell">
-      <action name="start" action="startParagraphGroup"/>
       <action name="start" action="startCell"/>
       <action name="end" action="endCell"/>
       <action name="end" action="endParagraphGroup"/>
--- writerfilter/source/ooxml/resources.xsl	16 May 2007 14:35:31 -0000	1.5
+++ writerfilter/source/ooxml/resources.xsl	2 Jul 2007 17:16:33 -0000	1.5.2.1
@@ -127,10 +127,13 @@ namespace ooxml {
 using namespace ::std;
 using namespace ::com::sun::star;
 using namespace doctok;
+
+/// @cond GENERATED
       </xsl:text>
       <xsl:call-template name="contextdecls"><xsl:with-param name="prefix">w</xsl:with-param></xsl:call-template>
       <xsl:call-template name="valueconstantdecls"/>
       <xsl:text>
+/// @endcond
 }
 #endif //INCLUDED_OOXML_RESOURCES_HXX&#xa;</xsl:text></out></xsl:template>
 
--- writerfilter/source/ooxml/resourcesimpl.xsl	29 May 2007 15:38:47 -0000	1.14
+++ writerfilter/source/ooxml/resourcesimpl.xsl	2 Jul 2007 17:16:33 -0000	1.14.2.1
@@ -122,6 +122,8 @@
 #include "OOXMLPropertySetImpl.hxx"
 #include "TokenMap.hxx"
 
+/// @cond GENERATED
+
 namespace ooxml {
 using namespace ::std;
 
@@ -131,12 +133,17 @@ static const sal_uInt8 sFtnEdnSep[] = { 
 static const sal_uInt8 sFtnEdnCont[] = { 0x4, 0x0 }; 
 static const sal_uInt8 sTab[] = { 0x9, 0x0 }; 
 static const sal_uInt8 sPgNum[] = { 0x0, 0x0 }; 
+static const sal_uInt8 sFieldStart[] = { 0x13, 0x0 }; 
+static const sal_uInt8 sFieldSep[] = { 0x14, 0x0 }; 
+static const sal_uInt8 sFieldEnd[] = { 0x15, 0x0 }; 
 
       </xsl:text>
       <xsl:call-template name="sprmkind"/>
       <xsl:call-template name="contextimpls"><xsl:with-param name="prefix">w</xsl:with-param></xsl:call-template>
       <xsl:text>
-}&#xa;</xsl:text></out></xsl:template>
+}
+/// @endcond GENERATED
+&#xa;</xsl:text></out></xsl:template>
 
   <xsl:template match="*"/>
 </xsl:stylesheet>
--- writerfilter/source/ooxml/resourcestools.xsl	27 Jun 2007 09:21:44 -0000	1.41
+++ writerfilter/source/ooxml/resourcestools.xsl	2 Jul 2007 17:16:33 -0000	1.41.2.1
@@ -885,11 +885,12 @@ OOXMLContext::Pointer_t
       <xsl:call-template name="contextresource"/>
     </xsl:variable>
     <xsl:variable name="mydefine" select="@name"/>
+    <xsl:variable name="mynsid" select="generate-id(ancestor::namespace)"/>
     <xsl:variable name="switchbody">
       <!--
           Generates the body for the switch over the token id.
       -->
-      <xsl:if test="$resource = 'Properties' or $resource = 'Property' or $resource = 'SingleElement'">
+      <xsl:if test="$resource = 'Properties' or $resource = 'Property' or $resource = 'SingleElement' or $resource='Stream'">
         <xsl:for-each select="//resource[@name=$mydefine]">
           <xsl:for-each select="attribute|sprm">
             <xsl:variable name="sprmname" select="@name"/>
@@ -898,7 +899,9 @@ OOXMLContext::Pointer_t
               <xsl:call-template name="caselabelelement"/>
             </xsl:for-each>
             <xsl:for-each select="key('defines-with-name', $mydefine)//rng:attribute[@name=$sprmname]">
-              <xsl:call-template name="caselabelattribute"/>
+              <xsl:if test="$mynsid=generate-id(ancestor::namespace)">
+                <xsl:call-template name="caselabelattribute"/>
+              </xsl:if>
             </xsl:for-each>
             <xsl:text>
         nResult = </xsl:text>
@@ -1121,6 +1124,13 @@ doctok::Id
       break;</xsl:text>
   </xsl:template>
 
+  <xsl:template name="contextattributeimplstream">
+    <xsl:call-template name="caselabelattribute"/>
+    <xsl:call-template name="contextattributeimplpropcaseinner"/>
+    <xsl:text>
+      break;</xsl:text>
+  </xsl:template>
+
   <!--
       Generates the inner of the switch over the given token id in the
       ::attribute method of the class for the current <define>.
@@ -1160,6 +1170,9 @@ doctok::Id
         <xsl:when test="$resource = 'XNote'">
           <xsl:call-template name="contextattributeimplxnote"/>
         </xsl:when>
+        <xsl:when test="$resource = 'Stream'">
+          <xsl:call-template name="contextattributeimplstream"/>
+        </xsl:when>
         <xsl:otherwise/>
       </xsl:choose>
     </xsl:for-each>
@@ -1346,6 +1359,27 @@ bool </xsl:text>
         <xsl:text>
     startSectionGroup();</xsl:text>
       </xsl:when>
+      <xsl:when test="@action='fieldstart'">
+        <xsl:text>
+    startCharacterGroup();
+    if (isForwardEvents())        
+        mrStream.utext(sFieldStart, 1);</xsl:text>
+    endCharacterGroup();
+      </xsl:when>
+      <xsl:when test="@action='fieldsep'">
+        <xsl:text>
+    startCharacterGroup();
+    if (isForwardEvents())        
+        mrStream.utext(sFieldSep, 1);</xsl:text>
+    endCharacterGroup();
+      </xsl:when>
+      <xsl:when test="@action='fieldend'">
+        <xsl:text>
+    startCharacterGroup();
+    if (isForwardEvents())        
+        mrStream.utext(sFieldEnd, 1);</xsl:text>
+    endCharacterGroup();
+      </xsl:when>
       <xsl:when test="@action='ftnednref'">
         <xsl:text>
     if (isForwardEvents())        
@@ -1373,6 +1407,8 @@ bool </xsl:text>
       </xsl:when>
       <xsl:when test="@action='endOfParagraph'">
         <xsl:text>
+    if (! mpParserState->isInCharacterGroup())
+       startCharacterGroup();
     if (isForwardEvents())        
         mrStream.utext(sCR, 1);</xsl:text>
       </xsl:when>
@@ -1442,6 +1478,21 @@ bool </xsl:text>
         mpPropertySet->resolve(aCommentHandler);
     }
         </xsl:when>
+        <xsl:when test="@action='printproperty'">
+          <xsl:text>
+    {
+        OOXMLPropertySetEntryToString aHandler(</xsl:text>
+        <xsl:call-template name="idtoqname">
+          <xsl:with-param name="id" select="@tokenid"/>
+        </xsl:call-template>
+        <xsl:text>);
+        getPropertySetAttrs()->resolve(aHandler);
+        const ::rtl::OUString &amp; sText = aHandler.getString();
+        mrStream.utext(reinterpret_cast &lt; const sal_uInt8 * &gt; 
+                   (sText.getStr()), 
+                   sText.getLength());        
+    }</xsl:text>
+        </xsl:when>
     </xsl:choose>
   </xsl:template>
 
--- writerfilter/source/resourcemodel/qnametostr.cxx	27 Jun 2007 09:22:14 -0000	1.29
+++ writerfilter/source/resourcemodel/qnametostr.cxx	2 Jul 2007 17:16:33 -0000	1.29.2.1
@@ -150,6 +150,10 @@ QNameToString::QNameToString()
     mMap[NS_ooxml::LN_CT_PPr_sectPr] = "ooxml:CT_PPr_sectPr";
     mMap[NS_ooxml::LN_CT_PPr_pPrChange] = "ooxml:CT_PPr_pPrChange";
     mMap[NS_ooxml::LN_CT_Rel_id] = "ooxml:CT_Rel_id";
+    mMap[NS_ooxml::LN_CT_SimpleField_fldData] = "ooxml:CT_SimpleField_fldData";
+    mMap[NS_ooxml::LN_CT_SimpleField_instr] = "ooxml:CT_SimpleField_instr";
+    mMap[NS_ooxml::LN_CT_SimpleField_fldLock] = "ooxml:CT_SimpleField_fldLock";
+    mMap[NS_ooxml::LN_CT_SimpleField_dirty] = "ooxml:CT_SimpleField_dirty";
     mMap[NS_ooxml::LN_CT_PageSz_w] = "ooxml:CT_PageSz_w";
     mMap[NS_ooxml::LN_CT_PageSz_h] = "ooxml:CT_PageSz_h";
     mMap[NS_ooxml::LN_CT_PageSz_orient] = "ooxml:CT_PageSz_orient";
@@ -206,6 +210,7 @@ QNameToString::QNameToString()
     mMap[NS_ooxml::LN_CT_PTab_leader] = "ooxml:CT_PTab_leader";
     mMap[NS_ooxml::LN_CT_Sym_font] = "ooxml:CT_Sym_font";
     mMap[NS_ooxml::LN_CT_Sym_char] = "ooxml:CT_Sym_char";
+    mMap[NS_ooxml::LN_CT_Text_space] = "ooxml:CT_Text_space";
     mMap[NS_ooxml::LN_CT_Fonts_hint] = "ooxml:CT_Fonts_hint";
     mMap[NS_ooxml::LN_CT_Fonts_ascii] = "ooxml:CT_Fonts_ascii";
     mMap[NS_ooxml::LN_CT_Fonts_hAnsi] = "ooxml:CT_Fonts_hAnsi";
