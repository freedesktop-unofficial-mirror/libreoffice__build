Index: plugins/sunmajor/pluginlib/gnujre.hxx
===================================================================
RCS file: /cvs/udk/jvmfwk/plugins/sunmajor/pluginlib/gnujre.hxx,v
retrieving revision 1.4
diff -u -r1.4 gnujre.hxx
--- jvmfwk/plugins/sunmajor/pluginlib/gnujre.hxx	28 Feb 2006 10:31:12 -0000	1.4
+++ jvmfwk/plugins/sunmajor/pluginlib/gnujre.hxx	16 Aug 2006 09:24:29 -0000
@@ -44,6 +44,8 @@
 
 class GnuInfo: public VendorBase
 {
+private:
+    rtl::OUString m_sJavaHome;
 public:
     static char const* const* getJavaExePaths(int * size);
 
Index: plugins/sunmajor/pluginlib/gnujre.cxx
===================================================================
RCS file: /cvs/udk/jvmfwk/plugins/sunmajor/pluginlib/gnujre.cxx,v
retrieving revision 1.9.14.1
diff -u -r1.9.14.1 gnujre.cxx
--- jvmfwk/plugins/sunmajor/pluginlib/gnujre.cxx	11 Aug 2006 10:44:52 -0000	1.9.14.1
+++ jvmfwk/plugins/sunmajor/pluginlib/gnujre.cxx	16 Aug 2006 09:24:35 -0000
@@ -83,7 +83,9 @@
         RTL_CONSTASCII_USTRINGPARAM("java.vendor"));
     OUString sVersionProperty(
         RTL_CONSTASCII_USTRINGPARAM("java.version"));
-    OUString sHomeProperty(
+    OUString sJavaHomeProperty(
+        RTL_CONSTASCII_USTRINGPARAM("java.home"));
+    OUString sGNUHomeProperty(
         RTL_CONSTASCII_USTRINGPARAM("gnu.classpath.home.url"));
     OUString sAccessProperty(
         RTL_CONSTASCII_USTRINGPARAM("javax.accessibility.assistive_technologies"));
@@ -91,6 +93,7 @@
     bool bVersion = false;
     bool bVendor = false;
     bool bHome = false;
+    bool bJavaHome = false;
     bool bAccess = false;
     
     typedef vector<pair<OUString, OUString> >::const_iterator it_prop;
@@ -106,11 +109,27 @@
             m_sVersion = i->second;
             bVersion = true;
         }
-        else if (!bHome && sHomeProperty.equals(i->first))
+        else if (!bHome && sGNUHomeProperty.equals(i->first))
         {
             m_sHome = i->second;
             bHome = true;
         }
+        else if (!bJavaHome && sJavaHomeProperty.equals(i->first))
+        {
+           OUString fileURL;
+           if (osl_getFileURLFromSystemPath(i->second.pData,& fileURL.pData) ==
+               osl_File_E_None)
+           {
+               //make sure that the drive letter have all the same case
+               //otherwise file:///c:/jre and file:///C:/jre produce two
+               //different objects!!!
+               if (makeDriveLetterSame( & fileURL))
+               {
+                   m_sJavaHome = fileURL;
+                   bJavaHome = true;
+               }
+           }
+        }
         else if (!bAccess && sAccessProperty.equals(i->first))
         {
             if (i->second.getLength() > 0)
@@ -125,7 +144,10 @@
     }
     if (!bVersion || !bVendor || !bHome)
         return false;
-    
+
+    if (!m_sJavaHome.getLength())
+        m_sJavaHome = rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("file:///usr/lib"));
+
     // init m_sRuntimeLibrary
     OSL_ASSERT(m_sHome.getLength());
     //call virtual function to get the possible paths to the runtime library.
@@ -152,7 +174,7 @@
 
     if (!bRt)
     {
-        m_sHome = rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("file:///usr/lib"));
+        m_sHome = m_sJavaHome;
         for(i_path ip = libpaths.begin(); ip != libpaths.end(); ip++)
         {
             //Construct an absolute path to the possible runtime
