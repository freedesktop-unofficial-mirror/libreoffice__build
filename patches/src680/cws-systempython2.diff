--- pyuno/source/loader/pyuno_loader.cxx	2005-02-03 16:41:46.644973400 +0000
+++ pyuno/source/loader/pyuno_loader.cxx	2005-02-03 16:50:45.792010592 +0000
@@ -220,9 +220,9 @@
                 OUString systemPath;
                 osl_getSystemPathFromFileURL( fileUrl.pData, &(systemPath.pData) );
                 bufPYTHONPATH.append( systemPath );
-                bufPYTHONPATH.append( (sal_Unicode) SAL_PATHSEPARATOR );
                 if( nNew == -1 )
                     break;
+                bufPYTHONPATH.append( (sal_Unicode) SAL_PATHSEPARATOR );
                 nIndex = nNew + 1;
             }
         }
--- pyuno/source/module/pyuno_module.cxx	2005-02-03 16:41:46.748957592 +0000
+++ pyuno/source/module/pyuno_module.cxx	2005-02-03 16:43:05.302015712 +0000
@@ -597,8 +597,6 @@
 
 static PyObject * absolutize( PyObject *self, PyObject * args )
 {
-    Py_UNICODE * path = 0;
-    Py_UNICODE * rel = 0;
     if( PyTuple_Check( args ) && PyTuple_Size( args ) == 2 )
     {
         OUString ouPath = pyString2ustring( PyTuple_GetItem( args , 0 ) );
@@ -621,7 +619,7 @@
                 OUStringToOString(buf.makeStringAndClear(),osl_getThreadTextEncoding()));
             return 0;
         }
-        return PyUnicode_FromUnicode( (const Py_UNICODE * ) ret.pData->buffer, ret.pData->length );
+        return ustring2PyUnicode( ret ).getAcquired();
     }
     return 0;
 }
--- pyuno/source/module/pyuno_runtime.cxx	2005-02-03 16:41:46.741958656 +0000
+++ pyuno/source/module/pyuno_runtime.cxx	2005-02-03 16:45:17.378936968 +0000
@@ -654,44 +654,9 @@
         a <<= d;
     }
     else if (PyString_Check (o))
-    {
-        // needed, if ByteSequence becomes a string
-//         Runtime runtime;
-//         if( PyObject_IsInstance( o, getByteSequenceClass( runtime ).get() ) )
-//         {
-//             // is it the byte sequence ?
-//             Sequence< sal_Int8 > seq;
-//             seq = Sequence<sal_Int8 > ((sal_Int8*) PyString_AsString(o) , PyString_Size(o));
-//             a <<= seq;
-//         }
-//         else
-//         {
-        a <<= OUString(PyString_AsString (o), strlen( PyString_AsString(o)),
-                       osl_getThreadTextEncoding());
-//         }
-    }
+	a <<= pyString2ustring(o);
     else if( PyUnicode_Check( o ) )
-    {
-        OUString s;
-        if( sizeof( Py_UNICODE ) == 2 )
-        {
-            s = OUString( (sal_Unicode *) PyUnicode_AsUnicode( o ), PyUnicode_GetSize( o ) );
-        }
-        else if( sizeof( Py_UNICODE ) == 4 )
-        {
-            // fixed for 0.9.2: OUString ctor expects the length of the byte array !
-            s = OUString( (sal_Char * ) PyUnicode_AsUnicode( o ),
-                          PyUnicode_GetSize( o ) * sizeof(Py_UNICODE), RTL_TEXTENCODING_UCS4 ); 
-        }
-        else
-        {
-            OUStringBuffer buf;
-            buf.appendAscii( "pyuno string conversion routines can't deal with sizeof(Py_UNICODE) ==" );
-            buf.append( (sal_Int32) sizeof( Py_UNICODE ) );
-            throw RuntimeException( buf.makeStringAndClear(), Reference< XInterface > ( ) );
-        }
-        a <<= s;
-    }
+	a <<= pyString2ustring(o);
     else if (PyTuple_Check (o))
     {
         Sequence<Any> s (PyTuple_Size (o));
--- pyuno/source/module/pyuno_util.cxx	2005-02-03 16:41:46.752956984 +0000
+++ pyuno/source/module/pyuno_util.cxx	2005-02-03 16:46:52.222518552 +0000
@@ -100,16 +100,8 @@
 #if Py_UNICODE_SIZE == 2
     ret = PyRef( PyUnicode_FromUnicode( str.getStr(), str.getLength() ), SAL_NO_ACQUIRE );
 #else
-#if Py_UNICODE_SIZE == 4
-    OString o = OUStringToOString( str, RTL_TEXTENCODING_UCS4 );
-    ret = PyRef( PyUnicode_FromUnicode( (Py_UNICODE*)o.getStr(), o.getLength() ), SAL_NO_ACQUIRE );
-#else
-#error Py_UNICODE_SIZE
-    OUStringBuffer buf;
-    buf.appendAscii( "pyuno string conversion routines can't deal with sizeof(Py_UNICODE) ==" );
-    buf.append( (sal_Int32) sizeof( Py_UNICODE ) );
-    throw RuntimeException( buf.makeStringAndClear(), Reference< XInterface > ( ) );
-#endif
+    OString sUtf8(OUStringToOString(str, RTL_TEXTENCODING_UTF8));
+    ret = PyRef( PyUnicode_DecodeUTF8( sUtf8.getStr(), sUtf8.getLength(), NULL) , SAL_NO_ACQUIRE );
 #endif
     return ret;
 }
@@ -125,7 +117,12 @@
     OUString ret;
     if( PyUnicode_Check( pystr ) )
     {
-        ret = OUString( (sal_Unicode * ) PyUnicode_AS_UNICODE( pystr ) );
+#if Py_UNICODE_SIZE == 2
+	ret = OUString( (sal_Unicode * ) PyUnicode_AS_UNICODE( pystr ) );
+#else
+	PyObject* pUtf8 = PyUnicode_AsUTF8String(pystr);
+	ret = OUString(PyString_AsString(pUtf8), PyString_Size(pUtf8), RTL_TEXTENCODING_UTF8);
+#endif
     }
     else
     {
--- scp2/source/python/profileitem_python.scp	2005-02-03 16:47:03.981730880 +0000
+++ scp2/source/python/profileitem_python.scp	2005-02-03 16:49:29.847555904 +0000
@@ -73,6 +73,7 @@
     Styles = (NETWORK);
 End
 
+#ifndef SYSTEM_PYTHON
 ProfileItem gid_Profileitem_Pythonloader_Pythonhome
     ProfileID = gid_Profile_Pythonloader_Uno_Ini;
     ModuleID = gid_Module_Optional_Pyuno;
@@ -81,6 +82,7 @@
     Key = "PYTHONHOME";
     Value = "$ORIGIN/python-core";
 End
+#endif
 
 ProfileItem gid_Profileitem_Pythonloader_Pythonpath
     ProfileID = gid_Profile_Pythonloader_Uno_Ini;
@@ -88,9 +90,13 @@
     Section = "Bootstrap";
     Order = 1;
     Key = "PYTHONPATH";
+#ifdef SYSTEM_PYTHON
+    Value = "$ORIGIN";
+#else
   #ifdef UNX
     Value = "$ORIGIN/python-core/lib $ORIGIN/python-core/lib/lib-dynload $ORIGIN/python-core/lib/lib-tk $ORIGIN";
   #else
     Value = STRING(CONCAT3($ORIGIN/python-core-,PYVERSION,/lib $ORIGIN));
   #endif
+#endif
 End
