--- oox/source/ppt/animationspersist.cxx.orig	2007-07-24 19:57:08.000000000 +0200
+++ oox/source/ppt/animationspersist.cxx	2007-07-24 19:57:08.000000000 +0200
@@ -110,7 +110,7 @@
 			// TODO
 			break;
 		case XML_sndTgt:
-			aProperties[ NP_TARGET ] = makeAny(msValue);
+			aProperties[ int(NP_TARGET) ] = makeAny(msValue);
 			break;
 		case XML_spTgt:
 		{
@@ -126,8 +126,8 @@
 				{
 					rTarget <<= xShape;
 					maShapeTarget.convert(rTarget, nSubType);
-					aProperties[ NP_SUBITEM ] = makeAny( nSubType );
-					aProperties[ NP_TARGET ] = rTarget;
+					aProperties[ int(NP_SUBITEM) ] = makeAny( nSubType );
+					aProperties[ int(NP_TARGET) ] = rTarget;
 				}
 			}
 			break;
--- oox/source/ppt/timenodelistcontext.cxx.orig	2007-07-24 19:57:08.000000000 +0200
+++ oox/source/ppt/timenodelistcontext.cxx	2007-07-24 19:57:08.000000000 +0200
@@ -511,8 +511,8 @@
 				if( aElement == mnElement )
 				{
 					NodePropertyMap & pProps(mpNode->getNodeProperties());
-					pProps[ NP_DIRECTION ] = makeAny( mnDir == XML_cw );
-					pProps[ NP_COLORINTERPOLATION ] = makeAny( mnColorSpace == XML_hsl ? AnimationColorSpace::HSL : AnimationColorSpace::RGB );
+					pProps[ int(NP_DIRECTION) ] = makeAny( mnDir == XML_cw );
+					pProps[ int(NP_COLORINTERPOLATION) ] = makeAny( mnColorSpace == XML_hsl ? AnimationColorSpace::HSL : AnimationColorSpace::RGB );
 					if( mbHasToClr )
 					{
 						mpNode->setTo( Any( mnToClr ) );
@@ -633,7 +633,7 @@
 						nEnum = AnimationCalcMode::DISCRETE;
 						break;
 					}
-					aProps[ NP_CALCMODE ] = makeAny(nEnum);
+					aProps[ int(NP_CALCMODE) ] = makeAny(nEnum);
 				}
 				OUString aStr;
 				aStr = xAttribs->getOptionalValue( XML_from );				
--- oox/source/ppt/commontimenodecontext.cxx.orig	2007-07-24 19:57:08.000000000 +0200
+++ oox/source/ppt/commontimenodecontext.cxx	2007-07-24 19:57:08.000000000 +0200
@@ -85,14 +85,14 @@
 		PropertyMap & aUserData = pNode->getUserData();
 
 		nInt = attribs.getInteger( XML_accel, 0 );
-		aProps[ NP_ACCELERATION ] = makeAny( ( static_cast<double>(nInt) / 100000.0 ) );
+		aProps[ int(NP_ACCELERATION) ] = makeAny( ( static_cast<double>(nInt) / 100000.0 ) );
 		
 		if( attribs.hasAttribute( XML_afterEffect ) ) 
 		{
 			aUserData[ CREATE_OUSTRING( "after-effect" ) ] 
 				= makeAny( attribs.getBool( XML_afterEffect, false ) );
 		}
-		aProps[ NP_AUTOREVERSE ] = makeAny( attribs.getBool( XML_autoRev, false ) );
+		aProps[ int(NP_AUTOREVERSE) ] = makeAny( attribs.getBool( XML_autoRev, false ) );
 		
 		// TODO
 		if( attribs.hasAttribute( XML_bldLvl ) ) 
@@ -100,7 +100,7 @@
 			attribs.getInteger( XML_bldLvl, 0 );
 		}
 		nInt = attribs.getInteger( XML_decel, 0 );
-		aProps[ NP_DECELERATE ] <<= ( static_cast<double>(nInt) / 100000.0 );
+		aProps[ int(NP_DECELERATE) ] <<= ( static_cast<double>(nInt) / 100000.0 );
 		// TODO
 		if( attribs.hasAttribute( XML_display ) ) 
 		{
@@ -110,7 +110,7 @@
 		{
 			// ST_TLTime
 			double fDuration = static_cast<double>(attribs.getUnsignedInteger(  XML_dur, 0 ) ) / 1000.0;
-			aProps[ NP_DURATION ] <<= makeAny( fDuration );
+			aProps[ int(NP_DURATION) ] <<= makeAny( fDuration );
 		}
 		// TODO
 		if( attribs.hasAttribute( XML_evtFilter ) )
@@ -142,7 +142,7 @@
 					nEnum = AnimationFill::DEFAULT;
 					break;
 				}
-				aProps[ NP_FILL ] <<=  (sal_Int16)nEnum;
+				aProps[ int(NP_FILL) ] <<=  (sal_Int16)nEnum;
 			}
 		}
 		if( attribs.hasAttribute( XML_grpId ) )
@@ -244,13 +244,13 @@
 			// ST_TLTime
 			double fCount = (double)attribs.getUnsignedInteger( XML_repeatCount, 1000 ) / 1000.0;
 			/* see pptinanimation */
-			aProps[ NP_REPEATCOUNT ] <<= (fCount < ((float)3.40282346638528860e+38)) ? makeAny( (double)fCount ) : makeAny( Timing_INDEFINITE );
+			aProps[ int(NP_REPEATCOUNT) ] <<= (fCount < ((float)3.40282346638528860e+38)) ? makeAny( (double)fCount ) : makeAny( Timing_INDEFINITE );
 		}
 		if( attribs.hasAttribute(  XML_repeatDur ) ) 
 		{
 			// ST_TLTime
 			double fDuration = (double)attribs.getUnsignedInteger( XML_repeatDur, 0 ) / 1000.0;
-			aProps[ NP_REPEATDURATION ] <<= makeAny( fDuration );
+			aProps[ int(NP_REPEATDURATION) ] <<= makeAny( fDuration );
 		}
 		// ST_TLTimeNodeRestartType
 		nInt = xAttribs->getOptionalValueToken( XML_restart, 0 );
@@ -273,7 +273,7 @@
 				nEnum =	AnimationRestart::DEFAULT;
 				break;
 			}
-			aProps[ NP_RESTART ] <<= (sal_Int16)nEnum;
+			aProps[ int(NP_RESTART) ] <<= (sal_Int16)nEnum;
 		}
 		// ST_Percentage TODO
 		xAttribs->getOptionalValue( XML_spd /*"10000" */ );
--- oox/source/ppt/timenode.cxx.orig	2007-07-24 19:57:08.000000000 +0200
+++ oox/source/ppt/timenode.cxx	2007-07-24 19:57:08.000000000 +0200
@@ -143,7 +143,7 @@
 				maUserData.makeSequence(aUserDataSeq);
 				if( aUserDataSeq.getLength() )
 				{
-					maNodeProperties[ NP_USERDATA ] = makeAny(aUserDataSeq);
+					maNodeProperties[ int(NP_USERDATA) ] = makeAny(aUserDataSeq);
 				}
 
 				Reference< XAnimate > xAnimate( xNode, UNO_QUERY );
@@ -343,18 +343,18 @@
 
 	void TimeNode::setTo( const Any & aTo )
 	{
-		maNodeProperties[ NP_TO ] = aTo;
+		maNodeProperties[ int(NP_TO) ] = aTo;
 	}
 
 
 	void TimeNode::setFrom( const Any & aFrom )
 	{
-		maNodeProperties[ NP_FROM ] = aFrom;
+		maNodeProperties[ int(NP_FROM) ] = aFrom;
 	}
 
 	void TimeNode::setBy( const Any & aBy )
 	{
-		maNodeProperties[ NP_BY ] = aBy;
+		maNodeProperties[ int(NP_BY) ] = aBy;
 	}
 
 
--- oox/source/ppt/commonbehaviorcontext.cxx.orig	2007-07-24 19:57:08.000000000 +0200
+++ oox/source/ppt/commonbehaviorcontext.cxx	2007-07-24 19:57:08.000000000 +0200
@@ -97,7 +97,7 @@
 					}
 					sAttributes.append( *iter );
 				}
-				mpNode->getNodeProperties()[ NP_ATTRIBUTENAME ]
+				mpNode->getNodeProperties()[ int(NP_ATTRIBUTENAME) ]
 					= makeAny( sAttributes.makeStringAndClear() );
 			}
 			break;
--- oox/source/ppt/timenodelistcontext.cxx.orig	2007-07-24 19:57:08.000000000 +0200
+++ oox/source/ppt/timenodelistcontext.cxx	2007-07-24 19:57:08.000000000 +0200
@@ -328,7 +328,7 @@
 							}
 							break;
 						}
-						mpNode->getNodeProperties()[ NP_COMMAND ] = makeAny((sal_Int16)nCommand);
+						mpNode->getNodeProperties()[ int(NP_COMMAND) ] = makeAny((sal_Int16)nCommand);
 						if( nCommand == EffectCommands::CUSTOM )
 						{
 							OSL_TRACE("OOX: CmdTimeNodeContext::endFastElement(), unknown command!");
@@ -338,7 +338,7 @@
 						if( aParamValue.Value.hasValue() )
 						{
 							Sequence< NamedValue > aParamSeq( &aParamValue, 1 );
-							mpNode->getNodeProperties()[ NP_PARAMETER ] = makeAny( aParamSeq );
+							mpNode->getNodeProperties()[ int(NP_PARAMETER) ] = makeAny( aParamSeq );
 						}
 					}
 					catch( RuntimeException& )
@@ -701,7 +701,7 @@
 				AttributeList attribs( xAttribs );
 				// TODO what to do with mbZoomContents
 				mbZoomContents = attribs.getBool( XML_zoomContents, false );
-				pNode->getNodeProperties()[ NP_TRANSFORMTYPE ] 
+				pNode->getNodeProperties()[ int(NP_TRANSFORMTYPE) ] 
 					= makeAny((sal_Int16)AnimationTransformType::SCALE);
 			}
 
@@ -792,7 +792,7 @@
 			{
 				AttributeList attribs( xAttribs );
 
-				pNode->getNodeProperties()[ NP_TRANSFORMTYPE ] 
+				pNode->getNodeProperties()[ int(NP_TRANSFORMTYPE) ] 
 					= makeAny((sal_Int16)AnimationTransformType::ROTATE);
 				// TODO make sure the units are OK
 				if(attribs.hasAttribute( XML_by ) ) 
@@ -848,7 +848,7 @@
 											  const TimeNodePtr & pNode ) throw()
 			: TimeNodeContext( xHandler, aElement, xAttribs, pNode )
 			{
-				pNode->getNodeProperties()[ NP_TRANSFORMTYPE ] 
+				pNode->getNodeProperties()[ int(NP_TRANSFORMTYPE) ] 
 					= makeAny((sal_Int16)AnimationTransformType::TRANSLATE);
 				
 				AttributeList attribs( xAttribs );
@@ -868,7 +868,7 @@
 				OUString aStr = xAttribs->getOptionalValue( XML_path );
 				aStr = aStr.replace( 'E', ' ' );
 				aStr = aStr.trim();
-				pNode->getNodeProperties()[ NP_PATH ] = makeAny(aStr);
+				pNode->getNodeProperties()[ int(NP_PATH) ] = makeAny(aStr);
 
 				// ST_TLAnimateMotionPathEditMode{ fixed, relative }
 				mnPathEditMode = xAttribs->getOptionalValueToken( XML_pathEditMode, 0 );
--- oox/source/ppt/commontimenodecontext.cxx.orig	2007-07-24 19:57:08.000000000 +0200
+++ oox/source/ppt/commontimenodecontext.cxx	2007-07-24 19:57:08.000000000 +0200
@@ -296,7 +296,7 @@
 			// TODO I don't know what to do with the other types...
 			if( maEndSyncValue.mnCondition == ( NMSP_PPT|XML_rtn ) )
 			{
-				mpNode->getNodeProperties()[ NP_ENDSYNC ] <<= maEndSyncValue.maValue;
+				mpNode->getNodeProperties()[ int(NP_ENDSYNC) ] <<= maEndSyncValue.maValue;
 			}
 			// TODO push maStCondList and maEndCondList
 		}
@@ -352,7 +352,7 @@
 					nEnum = TextAnimationType::BY_WORD;
 					break;
 				}
-				mpNode->getNodeProperties()[ NP_ITERATETYPE ] <<= nEnum;
+				mpNode->getNodeProperties()[ int(NP_ITERATETYPE) ] <<= nEnum;
 			}
 			// in case of exception we ignore the whole tag.
 			AttributeList attribs( xAttribs );		
@@ -367,7 +367,7 @@
 				AttributeList attribs( xAttribs );			
 				double fTime = attribs.getUnsignedInteger( XML_val, 0 );
 				// time in ms. property is in % TODO
-				mpNode->getNodeProperties()[ NP_ITERATEINTERVAL ] <<= fTime;
+				mpNode->getNodeProperties()[ int(NP_ITERATEINTERVAL) ] <<= fTime;
 			}
 			break;
 		case NMSP_PPT|XML_tmPct:
@@ -375,7 +375,7 @@
 			{
 				AttributeList attribs( xAttribs );			
 				double fPercent = (double)attribs.getUnsignedInteger( XML_val, 0 ) / 100000.0;
-				mpNode->getNodeProperties()[ NP_ITERATEINTERVAL ] <<= fPercent;
+				mpNode->getNodeProperties()[ int(NP_ITERATEINTERVAL) ] <<= fPercent;
 			}
 			break;
 		default:
