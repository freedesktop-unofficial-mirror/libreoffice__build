--- oox/source/ppt/animationspersist.cxx.orig	2007-07-16 17:33:39.000000000 +0200
+++ oox/source/ppt/animationspersist.cxx	2007-07-16 17:33:39.000000000 +0200
@@ -110,7 +110,7 @@
 			// TODO
 			break;
 		case XML_sndTgt:
-			aProperties[ NP_TARGET ] = makeAny(msValue);
+			aProperties.insert(::oox::ppt::NodePropertyMap::value_type(NP_TARGET, makeAny(msValue)));
 			break;
 		case XML_spTgt:
 		{
@@ -126,8 +126,8 @@
 				{
 					rTarget <<= xShape;
 					maShapeTarget.convert(rTarget, nSubType);
-					aProperties[ NP_SUBITEM ] = makeAny( nSubType );
-					aProperties[ NP_TARGET ] = rTarget;
+					aProperties.insert(::oox::ppt::NodePropertyMap::value_type(NP_SUBITEM, makeAny( nSubType )));
+					aProperties.insert(::oox::ppt::NodePropertyMap::value_type(NP_TARGET, rTarget));
 				}
 			}
 			break;
--- oox/source/ppt/commonbehaviorcontext.cxx.orig	2007-07-16 17:43:06.000000000 +0200
+++ oox/source/ppt/commonbehaviorcontext.cxx	2007-07-16 17:43:06.000000000 +0200
@@ -97,8 +97,8 @@
 					}
 					sAttributes.append( *iter );
 				}
-				mpNode->getNodeProperties()[ NP_ATTRIBUTENAME ]
-					= makeAny( sAttributes.makeStringAndClear() );
+				mpNode->getNodeProperties().insert(::oox::ppt::NodePropertyMap::value_type(NP_ATTRIBUTENAME,
+					makeAny( sAttributes.makeStringAndClear() )));
 			}
 			break;
 		}
--- oox/source/ppt/timenode.cxx.orig	2007-07-16 18:49:15.000000000 +0200
+++ oox/source/ppt/timenode.cxx	2007-07-16 18:49:15.000000000 +0200
@@ -143,7 +143,7 @@
 				maUserData.makeSequence(aUserDataSeq);
 				if( aUserDataSeq.getLength() )
 				{
-					maNodeProperties[ NP_USERDATA ] = makeAny(aUserDataSeq);
+					maNodeProperties.insert(::oox::ppt::NodePropertyMap::value_type(NP_USERDATA, makeAny(aUserDataSeq)));
 				}
 
 				Reference< XAnimate > xAnimate( xNode, UNO_QUERY );
@@ -343,18 +343,18 @@
 
 	void TimeNode::setTo( const Any & aTo )
 	{
-		maNodeProperties[ NP_TO ] = aTo;
+		maNodeProperties.insert(::oox::ppt::NodePropertyMap::value_type(NP_TO, aTo));
 	}
 
 
 	void TimeNode::setFrom( const Any & aFrom )
 	{
-		maNodeProperties[ NP_FROM ] = aFrom;
+		maNodeProperties.insert(::oox::ppt::NodePropertyMap::value_type(NP_FROM, aFrom));
 	}
 
 	void TimeNode::setBy( const Any & aBy )
 	{
-		maNodeProperties[ NP_BY ] = aBy;
+		maNodeProperties.insert(::oox::ppt::NodePropertyMap::value_type(NP_BY, aBy));
 	}
 
 
--- oox/source/ppt/timenodelistcontext.cxx.orig	2007-07-16 19:03:37.000000000 +0200
+++ oox/source/ppt/timenodelistcontext.cxx	2007-07-16 19:03:37.000000000 +0200
@@ -511,8 +511,8 @@
 				if( aElement == mnElement )
 				{
 					NodePropertyMap & pProps(mpNode->getNodeProperties());
-					pProps[ NP_DIRECTION ] = makeAny( mnDir == XML_cw );
-					pProps[ NP_COLORINTERPOLATION ] = makeAny( mnColorSpace == XML_hsl ? AnimationColorSpace::HSL : AnimationColorSpace::RGB );
+					pProps.insert(::oox::ppt::NodePropertyMap::value_type(NP_DIRECTION, makeAny( mnDir == XML_cw )));
+					pProps.insert(::oox::ppt::NodePropertyMap::value_type(NP_COLORINTERPOLATION, makeAny( mnColorSpace == XML_hsl ? AnimationColorSpace::HSL : AnimationColorSpace::RGB )));
 					if( mbHasToClr )
 					{
 						mpNode->setTo( Any( mnToClr ) );
@@ -633,7 +633,7 @@
 						nEnum = AnimationCalcMode::DISCRETE;
 						break;
 					}
-					aProps[ NP_CALCMODE ] = makeAny(nEnum);
+					aProps.insert(::oox::ppt::NodePropertyMap::value_type(NP_CALCMODE, makeAny(nEnum)));
 				}
 				OUString aStr;
 				aStr = xAttribs->getOptionalValue( XML_from );				
--- oox/source/ppt/timenodelistcontext.cxx.orig	2007-07-16 19:04:17.000000000 +0200
+++ oox/source/ppt/timenodelistcontext.cxx	2007-07-16 19:04:17.000000000 +0200
@@ -328,7 +328,7 @@
 							}
 							break;
 						}
-						mpNode->getNodeProperties()[ NP_COMMAND ] = makeAny((sal_Int16)nCommand);
+						mpNode->getNodeProperties().insert(::oox::ppt::NodePropertyMap::value_type(NP_COMMAND, makeAny((sal_Int16)nCommand)));
 						if( nCommand == EffectCommands::CUSTOM )
 						{
 							OSL_TRACE("OOX: CmdTimeNodeContext::endFastElement(), unknown command!");
@@ -338,7 +338,7 @@
 						if( aParamValue.Value.hasValue() )
 						{
 							Sequence< NamedValue > aParamSeq( &aParamValue, 1 );
-							mpNode->getNodeProperties()[ NP_PARAMETER ] = makeAny( aParamSeq );
+							mpNode->getNodeProperties().insert(::oox::ppt::NodePropertyMap::value_type(NP_PARAMETER, makeAny( aParamSeq )));
 						}
 					}
 					catch( RuntimeException& )
@@ -701,8 +701,8 @@
 				AttributeList attribs( xAttribs );
 				// TODO what to do with mbZoomContents
 				mbZoomContents = attribs.getBool( XML_zoomContents, false );
-				pNode->getNodeProperties()[ NP_TRANSFORMTYPE ] 
-					= makeAny((sal_Int16)AnimationTransformType::SCALE);
+				pNode->getNodeProperties().insert(::oox::ppt::NodePropertyMap::value_type(NP_TRANSFORMTYPE, 
+					makeAny((sal_Int16)AnimationTransformType::SCALE)));
 			}
 
 		~AnimScaleContext( ) throw( )
@@ -792,8 +792,8 @@
 			{
 				AttributeList attribs( xAttribs );
 
-				pNode->getNodeProperties()[ NP_TRANSFORMTYPE ] 
-					= makeAny((sal_Int16)AnimationTransformType::ROTATE);
+				pNode->getNodeProperties().insert(::oox::ppt::NodePropertyMap::value_type(NP_TRANSFORMTYPE, 
+					makeAny((sal_Int16)AnimationTransformType::ROTATE)));
 				// TODO make sure the units are OK
 				if(attribs.hasAttribute( XML_by ) ) 
 				{
@@ -848,8 +848,8 @@
 											  const TimeNodePtr & pNode ) throw()
 			: TimeNodeContext( xHandler, aElement, xAttribs, pNode )
 			{
-				pNode->getNodeProperties()[ NP_TRANSFORMTYPE ] 
-					= makeAny((sal_Int16)AnimationTransformType::TRANSLATE);
+				pNode->getNodeProperties().insert(::oox::ppt::NodePropertyMap::value_type(NP_TRANSFORMTYPE, 
+					makeAny((sal_Int16)AnimationTransformType::TRANSLATE)));
 				
 				AttributeList attribs( xAttribs );
 				// ST_TLAnimateMotionBehaviorOrigin { parent, layour }
@@ -868,7 +868,7 @@
 				OUString aStr = xAttribs->getOptionalValue( XML_path );
 				aStr = aStr.replace( 'E', ' ' );
 				aStr = aStr.trim();
-				pNode->getNodeProperties()[ NP_PATH ] = makeAny(aStr);
+				pNode->getNodeProperties().insert(::oox::ppt::NodePropertyMap::value_type(NP_PATH, makeAny(aStr)));
 
 				// ST_TLAnimateMotionPathEditMode{ fixed, relative }
 				mnPathEditMode = xAttribs->getOptionalValueToken( XML_pathEditMode, 0 );
