--- /dev/null	2005-03-20 01:06:14.000000000 +0530
+++ connectivity/source/drivers/mdb/mdb_resultsetmetadata.cxx	2005-06-29 11:18:53.000000000 +0530
@@ -0,0 +1,296 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Joerg Budischewski
+ *
+ *   Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *   All Rights Reserved.
+ *
+ *   Contributor(s): Joerg Budischewski
+ *
+ *
+ ************************************************************************/
+#include <rtl/ustrbuf.hxx>
+
+#include "mdb_resultsetmetadata.hxx"
+
+
+using osl::Mutex;
+using osl::MutexGuard;
+
+using rtl::OUString;
+using rtl::OUStringBuffer;
+using rtl::OString;
+
+using com::sun::star::uno::Any;
+using com::sun::star::uno::RuntimeException;
+using com::sun::star::uno::Exception;
+using com::sun::star::uno::Reference;
+using com::sun::star::uno::XInterface;
+
+using com::sun::star::lang::IllegalArgumentException;
+
+using com::sun::star::sdbc::SQLException;
+
+#define ASCII_STR(x) OUString( RTL_CONSTASCII_USTRINGPARAM( x ) )
+
+namespace mdb_sdbc_driver
+{
+
+ResultSetMetaData::ResultSetMetaData(
+    const ::rtl::Reference< RefCountedMutex > & refMutex,
+    const ::com::sun::star::uno::Reference< com::sun::star::sdbc::XResultSet >  & origin,
+    const Sequence< OUString > &colNames ) :
+    m_refMutex( refMutex ),
+    m_origin( origin ),
+    m_colNames(colNames)
+{
+  	m_ppResult = 0;
+	m_colCount = colNames.getLength();
+	
+}
+
+ResultSetMetaData::ResultSetMetaData(
+    int afieldCount )
+{
+	m_colCount = afieldCount;
+	
+}
+
+
+// Methods
+sal_Int32 ResultSetMetaData::getColumnCount(  )
+    throw (SQLException, RuntimeException)
+{
+    return m_colCount;
+}
+
+sal_Bool ResultSetMetaData::isAutoIncrement( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+	return sal_False;
+//     MutexGuard guard( m_refMutex->mutex );
+    throw SQLException(
+        ASCII_STR( "mdb_resultsetmetadata.isAutoIncrement(): don't know" ),
+        *this, OUString(), 1, Any() );
+}
+
+sal_Bool ResultSetMetaData::isCaseSensitive( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+	return sal_False;
+	    throw SQLException(
+        ASCII_STR( "mdb_resultsetmetadata.isCaseSensitive(): don't know" ),
+        *this, OUString(), 1, Any() );
+}
+
+sal_Bool ResultSetMetaData::isSearchable( sal_Int32 column ) throw (SQLException, RuntimeException)
+{
+	return sal_False;
+	    throw SQLException(
+        ASCII_STR( "mdb_resultsetmetadata.isSearchable(): don't know" ),
+        *this, OUString(), 1, Any() );
+}
+
+sal_Bool ResultSetMetaData::isCurrency( sal_Int32 column ) throw (SQLException, RuntimeException)
+{
+	return sal_False;
+    throw SQLException(
+        ASCII_STR( "mdb_resultsetmetadata.isCurrency(): don't know" ),
+        *this, OUString(), 1, Any() );
+}
+
+sal_Int32 ResultSetMetaData::isNullable( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+	return sal_True;
+    throw SQLException(
+        ASCII_STR( "mdb_resultsetmetadata.isNullable(): don't know" ),
+        *this, OUString(), 1, Any() );
+}
+
+sal_Bool ResultSetMetaData::isSigned( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+	return sal_False;
+    throw SQLException(
+        ASCII_STR( "mdb_resultsetmetadata.isSigned(): don't know" ),
+        *this, OUString(), 1, Any() );
+}
+    
+sal_Int32 ResultSetMetaData::getColumnDisplaySize( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    MutexGuard guard( m_refMutex->mutex );
+    checkClosed();
+    checkColumnIndex( column );
+
+    sal_Int32 size = -1;//PQfsize( *m_ppResult, column -1 );
+    if( size == -1 )
+        size = 25;
+
+    // improvement needed !, possible solution is to iterate once over all
+    // rows !
+    
+    return size;
+}
+
+::rtl::OUString ResultSetMetaData::getColumnLabel( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    return getColumnName( column);
+}
+
+::rtl::OUString ResultSetMetaData::getColumnName( sal_Int32 column ) throw (SQLException, RuntimeException)
+{
+    MutexGuard guard( m_refMutex->mutex );
+    checkClosed();
+    checkColumnIndex( column );
+
+    return m_colNames[column-1];
+}
+    
+::rtl::OUString ResultSetMetaData::getSchemaName( sal_Int32 column ) throw (SQLException, RuntimeException)
+{
+    // Need meta data therefor
+    return OUString();
+}
+
+sal_Int32 ResultSetMetaData::getPrecision( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+
+    return 0;
+}
+
+sal_Int32 ResultSetMetaData::getScale( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    return 0;
+}
+
+::rtl::OUString ResultSetMetaData::getTableName( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    return rtl::OUString();
+}
+
+::rtl::OUString ResultSetMetaData::getCatalogName( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    // can do this through XConnection.getCatalog() !
+    return OUString();
+}
+sal_Int32 ResultSetMetaData::getColumnType( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    return -1;
+}
+
+::rtl::OUString ResultSetMetaData::getColumnTypeName( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    return OUString();
+}
+
+
+sal_Bool ResultSetMetaData::isReadOnly( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    // Hey, that's correct !
+    return sal_True;
+}
+
+sal_Bool ResultSetMetaData::isWritable( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    return ! isReadOnly( column ); // what's the sense if this method ?
+}
+
+sal_Bool ResultSetMetaData::isDefinitelyWritable( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    return isWritable(column); // uhh, now it becomes really esoteric ....
+}
+::rtl::OUString ResultSetMetaData::getColumnServiceName( sal_Int32 column )
+    throw (SQLException, RuntimeException)
+{
+    return OUString();
+}
+
+void ResultSetMetaData::checkClosed()
+    throw (::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException)
+{
+//    if( ! *m_ppResult )
+//    {
+//        throw SQLException(
+//            ASCII_STR( "mdb_resultsetmetadata: resultset is closed already" ),
+//            *this, OUString(), 1, Any() );
+//    }
+}
+
+void ResultSetMetaData::checkColumnIndex(sal_Int32 columnIndex)
+    throw (::com::sun::star::sdbc::SQLException, ::com::sun::star::uno::RuntimeException)
+{
+    if( columnIndex < 1 || columnIndex > m_colCount )
+    {
+        OUStringBuffer buf(128);
+
+        buf.appendAscii( "mdb_resultsetmetadata: index out of range (expected 1 to " );
+        buf.append( m_colCount );
+        buf.appendAscii( ", got " );
+        buf.append( columnIndex );
+        throw SQLException(
+            buf.makeStringAndClear(), *this, OUString(), 1, Any() );
+    }
+}
+
+}
