? bridges/source/mono_uno
Index: bridges/source/cpp_uno/gcc3_linux_intel/call.s
===================================================================
RCS file: /cvs/udk/bridges/source/cpp_uno/gcc3_linux_intel/call.s,v
retrieving revision 1.2
retrieving revision 1.2.14.1
diff -u -p -u -r1.2 -r1.2.14.1
--- bridges/source/cpp_uno/gcc3_linux_intel/call.s	21 Feb 2005 12:13:12 -0000	1.2
+++ bridges/source/cpp_uno/gcc3_linux_intel/call.s	15 Apr 2005 10:14:22 -0000	1.2.14.1
@@ -9,12 +9,14 @@ privateSnippetExecutorGeneral:
 .LCFIg0:
     movl    %esp,%ebp
 .LCFIg1:
-    subl    $0x8,%esp         # 64bit nRegReturn
+    subl    $0x4,%esp         # 32bit lower half of 64bit nRegReturn
+                              #   (upper half unused)
+    pushl   %esp              # 32bit &nRegReturn
     pushl   %ecx              # 32bit pCallStack
     pushl   %edx              # 32bit nVtableOffset
     pushl   %eax              # 32bit nFunctionIndex
     call    cpp_vtable_call
-    movl    12(%esp),%eax     # 64 bit nRegReturn, lower half
+    movl    16(%esp),%eax     # 64 bit nRegReturn, lower half
     leave
     ret
 .LFEg:
@@ -29,7 +31,7 @@ privateSnippetExecutorVoid:
 .LCFIv0:
     movl    %esp,%ebp
 .LCFIv1:
-    subl    $0x8,%esp         # 64bit nRegReturn
+    pushl   $0                # 32bit &nRegReturn (unused)
     pushl   %ecx              # 32bit pCallStack
     pushl   %edx              # 32bit nVtableOffset
     pushl   %eax              # 32bit nFunctionIndex
@@ -49,12 +51,13 @@ privateSnippetExecutorHyper:
     movl    %esp,%ebp
 .LCFIh1:
     subl    $0x8,%esp         # 64bit nRegReturn
+    pushl   %esp              # 32bit &nRegReturn
     pushl   %ecx              # 32bit pCallStack
     pushl   %edx              # 32bit nVtableOffset
     pushl   %eax              # 32bit nFunctionIndex
     call    cpp_vtable_call
-    movl    12(%esp),%eax     # 64 bit nRegReturn, lower half
-    movl    16(%esp),%edx     # 64 bit nRegReturn, upper half
+    movl    16(%esp),%eax     # 64 bit nRegReturn, lower half
+    movl    20(%esp),%edx     # 64 bit nRegReturn, upper half
     leave
     ret
 .LFEh:
@@ -69,12 +72,14 @@ privateSnippetExecutorFloat:
 .LCFIf0:
     movl    %esp,%ebp
 .LCFIf1:
-    subl    $0x8,%esp         # 64bit nRegReturn
+    subl    $0x4,%esp         # 32bit lower half of 64bit nRegReturn
+                              #   (upper half unused)
+    pushl   %esp              # 32bit &nRegReturn
     pushl   %ecx              # 32bit pCallStack
     pushl   %edx              # 32bit nVtableOffset
     pushl   %eax              # 32bit nFunctionIndex
     call    cpp_vtable_call
-    flds    12(%esp)          # 64 bit nRegReturn, lower half
+    flds    16(%esp)          # 64 bit nRegReturn, lower half
     leave
     ret
 .LFEf:
@@ -90,11 +95,12 @@ privateSnippetExecutorDouble:
     movl    %esp,%ebp
 .LCFId1:
     subl    $0x8,%esp         # 64bit nRegReturn
+    pushl   %esp              # 32bit &nRegReturn
     pushl   %ecx              # 32bit pCallStack
     pushl   %edx              # 32bit nVtableOffset
     pushl   %eax              # 32bit nFunctionIndex
     call    cpp_vtable_call
-    fldl    12(%esp)          # 64 bit nRegReturn
+    fldl    16(%esp)          # 64 bit nRegReturn
     leave
     ret
 .LFEd:
@@ -109,12 +115,14 @@ privateSnippetExecutorClass:
 .LCFIc0:
     movl    %esp,%ebp
 .LCFIc1:
-    subl    $0x8,%esp         # 64bit nRegReturn
+    subl    $0x4,%esp         # 32bit lower half of 64bit nRegReturn
+                              #   (upper half unused)
+    pushl   %esp              # 32bit &nRegReturn
     pushl   %ecx              # 32bit pCallStack
     pushl   %edx              # 32bit nVtableOffset
     pushl   %eax              # 32bit nFunctionIndex
     call    cpp_vtable_call
-    movl    12(%esp),%eax     # 64 bit nRegReturn, lower half
+    movl    16(%esp),%eax     # 64 bit nRegReturn, lower half
     leave
     ret     $4
 .LFEc:
Index: bridges/source/cpp_uno/gcc3_linux_intel/cpp2uno.cxx
===================================================================
RCS file: /cvs/udk/bridges/source/cpp_uno/gcc3_linux_intel/cpp2uno.cxx,v
retrieving revision 1.7
retrieving revision 1.7.14.1
diff -u -p -u -r1.7 -r1.7.14.1
--- bridges/source/cpp_uno/gcc3_linux_intel/cpp2uno.cxx	21 Feb 2005 12:13:28 -0000	1.7
+++ bridges/source/cpp_uno/gcc3_linux_intel/cpp2uno.cxx	15 Apr 2005 10:14:22 -0000	1.7.14.1
@@ -2,9 +2,9 @@
  *
  *  $RCSfile$
  *
- *  $Revision$
+ *  $Revision$
  *
- *  last change: $Author$ $Date$
+ *  last change: $Author$ $Date$
  *
  *  The Contents of this file are made available subject to the terms of
  *  either of the following licenses
@@ -254,7 +254,7 @@ void cpp2uno_call(
 //==================================================================================================
 extern "C" void cpp_vtable_call(
     int nFunctionIndex, int nVtableOffset, void** pCallStack,
-    sal_Int64 nRegReturn )
+    sal_Int64 * pRegReturn )
 {
 	OSL_ENSURE( sizeof(sal_Int32)==sizeof(void *), "### unexpected!" );
 	
@@ -301,7 +301,7 @@ extern "C" void cpp_vtable_call(
 				pCppI, aMemberDescr.get(),
 				((typelib_InterfaceAttributeTypeDescription *)aMemberDescr.get())->pAttributeTypeRef,
 				0, 0, // no params
-				pCallStack, &nRegReturn );
+				pCallStack, pRegReturn );
 		}
 		else
 		{
@@ -316,7 +316,7 @@ extern "C" void cpp_vtable_call(
 				pCppI, aMemberDescr.get(),
 				0, // indicates void return
 				1, &aParam,
-				pCallStack, &nRegReturn );
+				pCallStack, pRegReturn );
 		}
 		break;
 	}
@@ -350,7 +350,7 @@ extern "C" void cpp_vtable_call(
                         &pInterface, pTD, cpp_acquire );
                     pInterface->release();
                     TYPELIB_DANGER_RELEASE( pTD );
-                    *(void **)&nRegReturn = pCallStack[1];
+                    *(void **)pRegReturn = pCallStack[1];
                     break;
                 }
                 TYPELIB_DANGER_RELEASE( pTD );
@@ -362,7 +362,7 @@ extern "C" void cpp_vtable_call(
 				((typelib_InterfaceMethodTypeDescription *)aMemberDescr.get())->pReturnTypeRef,
 				((typelib_InterfaceMethodTypeDescription *)aMemberDescr.get())->nParams,
 				((typelib_InterfaceMethodTypeDescription *)aMemberDescr.get())->pParams,
-				pCallStack, &nRegReturn );
+				pCallStack, pRegReturn );
 		}
 		break;
 	}
