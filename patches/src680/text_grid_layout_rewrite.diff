--- sw/source/core/layout/pagechg.cxx.orig	2006-12-02 01:57:36.000000000 +0800
+++ sw/source/core/layout/pagechg.cxx	2007-02-13 16:48:10.000000000 +0800
@@ -176,7 +176,8 @@ void SwBodyFrm::Format( const SwBorderAt
             long nBorder = 0;
             if( GRID_LINES_CHARS == pGrid->GetGridType() )
             {
-                nBorder = nSize % pGrid->GetBaseHeight();
+                //for textgrid refactor
+                nBorder = nSize % pGrid->GetBaseWidth();
                 nSize -= nBorder;
                 nBorder /= 2;
             }
--- sw/source/core/layout/paintfrm.cxx.orig	2006-12-02 01:57:36.000000000 +0800
+++ sw/source/core/layout/paintfrm.cxx	2007-02-13 16:50:21.000000000 +0800
@@ -4737,6 +4737,7 @@ void SwPageFrm::PaintGrid( OutputDevice*
                 BOOL bGrid = pGrid->GetRubyTextBelow();
                 BOOL bCell = GRID_LINES_CHARS == pGrid->GetGridType();
                 long nGrid = pGrid->GetBaseHeight();
+                long nGridWidth = pGrid->GetBaseWidth(); //for textgrid refactor
                 long nRuby = pGrid->GetRubyHeight();
                 long nSum = nGrid + nRuby;
                 const Color *pCol = &pGrid->GetColor();
@@ -4880,10 +4881,11 @@ void SwPageFrm::PaintGrid( OutputDevice*
                     SwTwips nY = nOrig + nSum *( (aInter.Top()-nOrig)/nSum );
                     SwRect aTmp( Point( aInter.Left(), nY ),
                                 Size( aInter.Width(), 1 ) );
-                    SwTwips nX = aGrid.Left() + nGrid *
-                                ( ( aInter.Left() - aGrid.Left() )/ nGrid );
+                    //for textgrid refactor
+                    SwTwips nX = aGrid.Left() + nGridWidth *
+                        ( ( aInter.Left() - aGrid.Left() )/ nGridWidth );
                     if( nX < aInter.Left() )
-                        nX += nGrid;
+                        nX += nGridWidth;
                     SwTwips nGridRight = aGrid.Left() + aGrid.Width();
                     BOOL bLeft = aGrid.Left() >= aInter.Left();
                     BOOL bRight = nGridRight <= nRight;
@@ -4905,7 +4907,7 @@ void SwPageFrm::PaintGrid( OutputDevice*
                                     while( aVert.Left() <= nRight )
                                     {
                                         PaintBorderLine(rRect,aVert,this,pCol);
-                                        aVert.Pos().X() += nGrid;
+                                        aVert.Pos().X() += nGridWidth;	//for textgrid refactor
                                     }
                                 }
                                 else if ( bBorder )
@@ -4962,7 +4964,7 @@ void SwPageFrm::PaintGrid( OutputDevice*
                                     while( aVert.Left() <= nRight )
                                     {
                                         PaintBorderLine( rRect, aVert, this, pCol);
-                                        aVert.Pos().X() += nGrid;
+                                        aVert.Pos().X() += nGridWidth;	//for textgrid refactor
                                     }
                                 }
                                 else if( bBorder )
--- sw/source/core/text/itrform2.cxx.orig	2006-12-02 01:57:37.000000000 +0800
+++ sw/source/core/text/itrform2.cxx	2007-02-13 16:53:45.000000000 +0800
@@ -474,7 +474,7 @@ void SwTxtFormatter::BuildPortions( SwTx
                               GRID_LINES_CHARS == pGrid->GetGridType();
 
     const USHORT nGridWidth = bHasGrid ?
-                              pGrid->GetBaseHeight() : 0;
+                                pGrid->GetBaseWidth() : 0;	//for textgrid refactor
 
     // used for grid mode only:
     // the pointer is stored, because after formatting of non-asian text,
--- sw/source/core/text/itrtxt.cxx.orig	2006-12-02 01:57:37.000000000 +0800
+++ sw/source/core/text/itrtxt.cxx	2007-02-13 16:54:47.000000000 +0800
@@ -359,9 +359,12 @@ USHORT SwTxtCursor::AdjustBaseLine( cons
             {
                 // Portions which are bigger than on grid distance are
                 // centered inside the whole line.
-                const USHORT nLineNetto = ( nPorHeight > nGridWidth ) ?
-                                            rLine.Height() - nRubyHeight :
-                                            nGridWidth;
+                
+                //for text refactor
+                const USHORT nLineNetto =  rLine.Height() - nRubyHeight;
+                //const USHORT nLineNetto = ( nPorHeight > nGridWidth ) ?
+                 //                           rLine.Height() - nRubyHeight :
+                 //                           nGridWidth;
                 nOfst += ( nLineNetto - nPorHeight ) / 2;
                 if ( bRubyTop )
                     nOfst += nRubyHeight;
--- sw/source/core/text/txtfly.cxx.orig	2006-12-02 01:57:37.000000000 +0800
+++ sw/source/core/text/txtfly.cxx	2007-02-13 16:56:40.000000000 +0800
@@ -661,7 +661,7 @@ void SwTxtFormatter::CalcFlyWidth( SwTxt
                                     (pBody->*fnRect->fnGetPrtLeft)() :
                                     (pPageFrm->*fnRect->fnGetPrtLeft)();
 
-            const USHORT nGridWidth = pGrid->GetBaseHeight();
+            const USHORT nGridWidth = pGrid->GetBaseWidth();	//for textgrid refactor
 
             SwTwips nStartX = GetLeftMargin();
             if ( bVert )
--- sw/source/core/txtnode/fntcache.cxx.orig	2006-12-02 01:57:37.000000000 +0800
+++ sw/source/core/txtnode/fntcache.cxx	2007-02-13 17:20:51.000000000 +0800
@@ -1006,7 +1006,9 @@ void SwFntObj::DrawText( SwDrawTextInfo 
         GETGRID( rInf.GetFrm()->FindPageFrm() )
         if ( pGrid && GRID_LINES_CHARS == pGrid->GetGridType() )
         {
-            const USHORT nGridWidth = pGrid->GetBaseHeight();
+            //for textgrid refactor
+            //const USHORT nGridWidth = pGrid->GetBaseHeight();
+            const USHORT nGridWidth = pGrid->GetBaseWidth();
             sal_Int32* pKernArray = new sal_Int32[rInf.GetLen()];
 
             if ( pPrinter )
@@ -1031,43 +1033,58 @@ void SwFntObj::DrawText( SwDrawTextInfo 
             long nNextFix;
 
             // punctuation characters are not centered
-            xub_Unicode cChar = rInf.GetText().GetChar( rInf.GetIdx() );
-            BYTE nType = lcl_WhichPunctuation( cChar );
-            switch ( nType )
-            {
-            case SwScriptInfo::NONE :
-                aPos.X() += ( nWidthPerChar - nCharWidth ) / 2;
-                nNextFix = nCharWidth / 2;
-                break;
-            case SwScriptInfo::SPECIAL_RIGHT :
-                nNextFix = nHalfWidth;
-                break;
-            default:
-                aPos.X() += nWidthPerChar - nCharWidth;
-                nNextFix = nCharWidth - nHalfWidth;
-            }
-
-            // calculate offsets
-            for ( xub_StrLen j = 1; j < rInf.GetLen(); ++j )
+            if( pGrid->IsSnapToChars() )
             {
-                long nScr = pKernArray[ j ] - pKernArray[ j - 1 ];
-                nNextFix += nWidthPerChar;
-
-                // punctuation characters are not centered
-                cChar = rInf.GetText().GetChar( rInf.GetIdx() + j );
-                nType = lcl_WhichPunctuation( cChar );
+                xub_Unicode cChar = rInf.GetText().GetChar( rInf.GetIdx() );
+                BYTE nType = lcl_WhichPunctuation( cChar );
                 switch ( nType )
                 {
                 case SwScriptInfo::NONE :
-                    pKernArray[ j - 1 ] = nNextFix - ( nScr / 2 );
+                    aPos.X() += ( nWidthPerChar - nCharWidth ) / 2;
+                    nNextFix = nCharWidth / 2;                    
                     break;
                 case SwScriptInfo::SPECIAL_RIGHT :
-                    pKernArray[ j - 1 ] = nNextFix - nHalfWidth;
+                    nNextFix = nHalfWidth;
                     break;
                 default:
+                    aPos.X() += nWidthPerChar - nCharWidth;
+                    nNextFix = nCharWidth - nHalfWidth;
+                }
+    
+                // calculate offsets
+                for ( xub_StrLen j = 1; j < rInf.GetLen(); ++j )
+                {
+                    long nScr = pKernArray[ j ] - pKernArray[ j - 1 ];
+                    nNextFix += nWidthPerChar;
+    
+                    // punctuation characters are not centered
+                    cChar = rInf.GetText().GetChar( rInf.GetIdx() + j );
+                    nType = lcl_WhichPunctuation( cChar );
+                    switch ( nType )
+                    {
+                    case SwScriptInfo::NONE :
+                        pKernArray[ j - 1 ] = nNextFix - ( nScr / 2 );
+                        break;
+                    case SwScriptInfo::SPECIAL_RIGHT :
+                        pKernArray[ j - 1 ] = nNextFix - nHalfWidth;
+                        break;
+                    default:
+                        pKernArray[ j - 1 ] = nNextFix + nHalfWidth - nScr;
+                    }
+                }
+            }
+            else
+            {
+                //not snap to grid
+                nNextFix = nCharWidth - nHalfWidth;
+                for ( xub_StrLen j = 1; j < rInf.GetLen(); ++j )
+                {
+                    long nScr = pKernArray[ j ] - pKernArray[ j - 1 ];
+                    nNextFix += nWidthPerChar;
                     pKernArray[ j - 1 ] = nNextFix + nHalfWidth - nScr;
                 }
             }
+            
 
             // the layout engine requires the total width of the output
             pKernArray[ rInf.GetLen() - 1 ] = rInf.GetWidth() -
@@ -1846,7 +1863,7 @@ Size SwFntObj::GetTextSize( SwDrawTextIn
         GETGRID( rInf.GetFrm()->FindPageFrm() )
         if ( pGrid && GRID_LINES_CHARS == pGrid->GetGridType() )
         {
-            const USHORT nGridWidth = pGrid->GetBaseHeight();
+            const USHORT nGridWidth = pGrid->GetBaseWidth();	//for textgrid refactor
 
             OutputDevice* pOutDev;
 
@@ -2099,7 +2116,7 @@ xub_StrLen SwFntObj::GetCrsrOfst( SwDraw
         GETGRID( rInf.GetFrm()->FindPageFrm() )
         if ( pGrid && GRID_LINES_CHARS == pGrid->GetGridType() )
         {
-            const USHORT nGridWidth = pGrid->GetBaseHeight();
+            const USHORT nGridWidth = pGrid->GetBaseWidth();	//for textgrid refactor
 
             long nWidthPerChar = pKernArray[ rInf.GetLen() - 1 ] / rInf.GetLen();
 
@@ -2326,7 +2343,7 @@ xub_StrLen SwFont::GetTxtBreak( SwDrawTe
         GETGRID( rInf.GetFrm()->FindPageFrm() )
         if ( pGrid && GRID_LINES_CHARS == pGrid->GetGridType() )
         {
-            const USHORT nGridWidth = pGrid->GetBaseHeight();
+            const USHORT nGridWidth = pGrid->GetBaseWidth();	//for textgrid refactor
 
             sal_Int32* pKernArray = new sal_Int32[rInf.GetLen()];
             rInf.GetOut().GetTextArray( rInf.GetText(), pKernArray,
