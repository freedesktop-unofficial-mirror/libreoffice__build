cvs diff: cannot open CVS/Entries for reading: No such file or directory
cvs [diff aborted]: no repository
cvs diff: cannot open CVS/Entries for reading: No such file or directory
cvs [diff aborted]: no repository
Index: scripting/source/dlgprov/dlgevtatt.cxx
===================================================================
RCS file: /cvs/framework/scripting/source/dlgprov/dlgevtatt.cxx,v
retrieving revision 1.13
retrieving revision 1.13.22.2
diff -u -p -u -p -b -w -B -r1.13 -r1.13.22.2
--- scripting/source/dlgprov/dlgevtatt.cxx	20 Jun 2007 10:27:38 -0000	1.13
+++ scripting/source/dlgprov/dlgevtatt.cxx	15 Jan 2008 17:08:46 -0000	1.13.22.2
@@ -92,7 +92,9 @@
 #ifndef _COM_SUN_STAR_BEANS_XMATERIALHOLDER_HPP_
 #include <com/sun/star/beans/XMaterialHolder.hpp>
 #endif
-
+#ifdef FAKE_VBA_EVENT_SUPPORT
+#include <org/openoffice/vba/XVBAToOOEventDescGen.hpp>
+#endif
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::awt;
@@ -107,15 +109,111 @@ using namespace ::com::sun::star::reflec
 //.........................................................................
 namespace dlgprov
 {
+
+  class DialogSFScriptListenerImpl : public DialogScriptListenerImpl
+    {
+        protected:
+        Reference< frame::XModel >  m_xModel;
+        virtual void firing_impl( const script::ScriptEvent& aScriptEvent, uno::Any* pRet );
+        public:
+        DialogSFScriptListenerImpl( const Reference< XComponentContext >& rxContext, const Reference< frame::XModel >& rxModel ) : DialogScriptListenerImpl( rxContext ), m_xModel( rxModel ) {}
+    };
+
+  class DialogLegacyScriptListenerImpl : public DialogSFScriptListenerImpl
+    {
+        protected:
+        virtual void firing_impl( const script::ScriptEvent& aScriptEvent, uno::Any* pRet );
+        public:
+        DialogLegacyScriptListenerImpl( const Reference< XComponentContext >& rxContext, const Reference< frame::XModel >& rxModel ) : DialogSFScriptListenerImpl( rxContext, rxModel ){}
+    };
+
+  class DialogUnoScriptListenerImpl : public DialogSFScriptListenerImpl
+    {
+	Reference< awt::XControl > m_xControl;
+        Reference< XInterface >	m_xHandler;
+	Reference< beans::XIntrospectionAccess > m_xIntrospectionAccess;
+	bool m_bDialogProviderMode;
+
+        virtual void firing_impl( const script::ScriptEvent& aScriptEvent, uno::Any* pRet );
+
+    public:
+        DialogUnoScriptListenerImpl( const Reference< XComponentContext >& rxContext,            
+            const Reference< frame::XModel >& rxModel,
+			const Reference< awt::XControl >& rxControl,
+			const Reference< XInterface >& rxHandler,
+			const Reference< beans::XIntrospectionAccess >& rxIntrospectionAccess,
+			bool bDialogProviderMode );		// false: ContainerWindowProvider mode
+
+    };
+
+#ifdef FAKE_VBA_EVENT_SUPPORT
+  class DialogVBAScriptListenerImpl : public DialogScriptListenerImpl
+    {
+        protected:
+        rtl::OUString msDialogCodeName;
+        Reference<  script::XScriptListener > mxListener;
+        virtual void firing_impl( const script::ScriptEvent& aScriptEvent, uno::Any* pRet );
+        public:
+        DialogVBAScriptListenerImpl( const Reference< XComponentContext >& rxContext, const Reference< awt::XControl >& rxControl, const Reference< frame::XModel >& xModel );
+    };
+
+    DialogVBAScriptListenerImpl::DialogVBAScriptListenerImpl( const Reference< XComponentContext >& rxContext, const Reference< awt::XControl >& rxControl, const Reference< frame::XModel >& xModel ) : DialogScriptListenerImpl( rxContext )
+    {
+        Reference< XMultiComponentFactory > xSMgr( m_xContext->getServiceManager() );
+        if ( xSMgr.is() )
+        {
+            Sequence< Any > args(1);
+            args[0] <<= xModel;
+            mxListener = Reference< XScriptListener >( xSMgr->createInstanceWithArgumentsAndContext( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.vba.EventListener" ) ), args, m_xContext ), UNO_QUERY );
+        }
+        if ( rxControl.is() )
+        {
+            Reference< XPropertySet > xProps( rxControl->getModel(), UNO_QUERY );
+            try
+            {
+                xProps->getPropertyValue( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("Name") ) ) >>= msDialogCodeName;
+            } 
+            catch ( Exception&  ) {}
+        }
+            
+    }
+
+    void DialogVBAScriptListenerImpl::firing_impl( const script::ScriptEvent& aScriptEvent, uno::Any* )
+    {
+        if ( aScriptEvent.ScriptType.equals( rtl::OUString::createFromAscii("VBAInterop") ) && mxListener.is() )
+        {
+            ScriptEvent aScriptEventCopy( aScriptEvent );
+            aScriptEventCopy.ScriptCode = msDialogCodeName;
+            try
+            {
+                mxListener->firing( aScriptEventCopy );
+            }
+            catch( Exception& ) {}
+        }
+    }
+#endif
+
 //.........................................................................
 
     // =============================================================================
     // DialogEventsAttacherImpl
     // =============================================================================
 
-    DialogEventsAttacherImpl::DialogEventsAttacherImpl( const Reference< XComponentContext >& rxContext )
+    DialogEventsAttacherImpl::DialogEventsAttacherImpl( const Reference< XComponentContext >& rxContext, const Reference< frame::XModel >& rxModel, const Reference< awt::XControl >& rxControl, const Reference< XInterface >& rxHandler, const Reference< beans::XIntrospectionAccess >& rxIntrospect, bool bProviderMode, const Reference< script::XScriptListener >& rxRTLListener   )
         :m_xContext( rxContext )
     {
+        // key listeners by protocol when ScriptType = 'Script'
+        // otherwise key is the ScriptType e.g. StarBasic
+        if ( rxRTLListener.is() ) // set up handler for RTL_BASIC
+            listernersForTypes[ rtl::OUString::createFromAscii("StarBasic") ] = rxRTLListener;
+        else
+            listernersForTypes[ rtl::OUString::createFromAscii("StarBasic") ] = new DialogLegacyScriptListenerImpl( rxContext, rxModel );
+        // handler for Script & ::rtl::OUString::createFromAscii( "vnd.sun.star.UNO:" )
+        listernersForTypes[ rtl::OUString::createFromAscii("vnd.sun.star.UNO") ] = new DialogUnoScriptListenerImpl( rxContext, rxModel, rxControl, rxHandler, rxIntrospect, bProviderMode );
+        listernersForTypes[ rtl::OUString::createFromAscii("vnd.sun.star.script") ] = new DialogSFScriptListenerImpl( rxContext, rxModel );
+#ifdef FAKE_VBA_EVENT_SUPPORT
+        listernersForTypes[ rtl::OUString::createFromAscii("VBAInterop") ] = new DialogVBAScriptListenerImpl( rxContext, rxControl, rxModel );
+#endif
     }
 
     // -----------------------------------------------------------------------------
@@ -125,55 +223,38 @@ namespace dlgprov
     }
 
     // -----------------------------------------------------------------------------
-    // XScriptEventsAttacher
-    // -----------------------------------------------------------------------------
-
-    void SAL_CALL DialogEventsAttacherImpl::attachEvents( const Sequence< Reference< XInterface > >& Objects,
-        const Reference< XScriptListener >& xListener, const Any& Helper ) 
-        throw (IllegalArgumentException, IntrospectionException, CannotCreateAdapterException, 
-               ServiceNotRegisteredException, RuntimeException)
+    Reference< script::XScriptListener > 
+    DialogEventsAttacherImpl::getScriptListenerForKey( const rtl::OUString& sKey ) throw ( RuntimeException )
     {
-        // get EventAttacher
-        {
-            ::osl::MutexGuard aGuard( getMutex() );
-
-            if ( !m_xEventAttacher.is() )
+        ListenerHash::iterator it = listernersForTypes.find( sKey );
+        if ( it == listernersForTypes.end() )
+            throw RuntimeException(); // more text info here please
+        return it->second; 
+    }
+#ifdef FAKE_VBA_EVENT_SUPPORT
+    Reference< XScriptEventsSupplier > DialogEventsAttacherImpl::getFakeVbaEventsSupplier( const Reference< XControl >& xControl )
             {
+        Reference< XScriptEventsSupplier > xEventsSupplier;
                 Reference< XMultiComponentFactory > xSMgr( m_xContext->getServiceManager() );
                 if ( xSMgr.is() )
                 {
-                    m_xEventAttacher = Reference< XEventAttacher >( xSMgr->createInstanceWithContext(
-                        ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.script.EventAttacher" ) ), m_xContext ), UNO_QUERY );
-
-                    if ( !m_xEventAttacher.is() )
-                        throw ServiceNotRegisteredException();
-                }
-                else
-                {
-                    throw RuntimeException();
-                }
+            Reference< org::openoffice::vba::XVBAToOOEventDescGen > xVBAToOOEvtDesc( xSMgr->createInstanceWithContext( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.vba.VBAToOOEventDesc" ) ), m_xContext ), UNO_QUERY );
+            if ( xVBAToOOEvtDesc.is() )
+                xEventsSupplier.set( xVBAToOOEvtDesc->getEventSupplier( xControl ), UNO_QUERY );
 
             }
+        return xEventsSupplier;
         }
+#endif
 
-        // go over all objects
-        const Reference< XInterface >* pObjects = Objects.getConstArray();
-        sal_Int32 nObjCount = Objects.getLength();
-        for ( sal_Int32 i = 0; i < nObjCount; ++i )
+    // -----------------------------------------------------------------------------
+    void SAL_CALL DialogEventsAttacherImpl::attachEventsToControl( const Reference< XControl>& xControl, const Reference< XScriptEventsSupplier >& xEventsSupplier, const Any& Helper )
         {
-            // We know that we have to do with instances of XControl.
-            // Otherwise this is not the right implementation for
-            // XScriptEventsAttacher and we have to give up.
-            Reference< XControl > xControl( pObjects[ i ], UNO_QUERY );
-            if ( !xControl.is() )
-                throw IllegalArgumentException();
-
-            // get XEventsSupplier from control model
-            Reference< XControlModel > xControlModel = xControl->getModel();
-            Reference< XScriptEventsSupplier > xEventsSupplier( xControlModel, UNO_QUERY );
             if ( xEventsSupplier.is() )
             {
                 Reference< container::XNameContainer > xEventCont = xEventsSupplier->getEvents();
+
+            Reference< XControlModel > xControlModel = xControl->getModel();
                 if ( xEventCont.is() )
                 {
                     Sequence< ::rtl::OUString > aNames = xEventCont->getElementNames();
@@ -186,8 +267,14 @@ namespace dlgprov
 
                         Any aElement = xEventCont->getByName( pNames[ j ] );
                         aElement >>= aDesc;
+                    rtl::OUString sKey = aDesc.ScriptType;
+                    if ( aDesc.ScriptType.equals( rtl::OUString::createFromAscii("Script" ) ) || aDesc.ScriptType.equals( rtl::OUString::createFromAscii("UNO" ) ) )
+                    {
+                        sal_Int32 nIndex = aDesc.ScriptCode.indexOf( ':' );
+                        sKey = aDesc.ScriptCode.copy( 0, nIndex );	
+                    }
                         Reference< XAllListener > xAllListener =
-                            new DialogAllListenerImpl( xListener, aDesc.ScriptType, aDesc.ScriptCode );
+                        new DialogAllListenerImpl( getScriptListenerForKey( sKey ), aDesc.ScriptType, aDesc.ScriptCode );
 
                         // try first to attach event to the ControlModel
                         bool bSuccess = false;
@@ -239,6 +326,61 @@ namespace dlgprov
                 }
             }
         }
+
+    // -----------------------------------------------------------------------------
+    // XScriptEventsAttacher
+    // -----------------------------------------------------------------------------
+
+    void SAL_CALL DialogEventsAttacherImpl::attachEvents( const Sequence< Reference< XInterface > >& Objects,
+        const com::sun::star::uno::Reference<com::sun::star::script::XScriptListener>&,
+        const Any& Helper ) 
+        throw (IllegalArgumentException, IntrospectionException, CannotCreateAdapterException, 
+               ServiceNotRegisteredException, RuntimeException)
+    {
+        // get EventAttacher
+        {
+            ::osl::MutexGuard aGuard( getMutex() );
+
+            if ( !m_xEventAttacher.is() )
+            {
+                Reference< XMultiComponentFactory > xSMgr( m_xContext->getServiceManager() );
+                if ( xSMgr.is() )
+                {
+                    m_xEventAttacher = Reference< XEventAttacher >( xSMgr->createInstanceWithContext(
+                        ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.script.EventAttacher" ) ), m_xContext ), UNO_QUERY );
+
+                    if ( !m_xEventAttacher.is() )
+                        throw ServiceNotRegisteredException();
+                }
+                else
+                {
+                    throw RuntimeException();
+                }
+
+            }
+        }
+
+        // go over all objects
+        const Reference< XInterface >* pObjects = Objects.getConstArray();
+        sal_Int32 nObjCount = Objects.getLength();
+        for ( sal_Int32 i = 0; i < nObjCount; ++i )
+        {
+            // We know that we have to do with instances of XControl.
+            // Otherwise this is not the right implementation for
+            // XScriptEventsAttacher and we have to give up.
+            Reference< XControl > xControl( pObjects[ i ], UNO_QUERY );
+            if ( !xControl.is() )
+                throw IllegalArgumentException();
+
+            // get XEventsSupplier from control model
+            Reference< XControlModel > xControlModel = xControl->getModel();
+            Reference< XScriptEventsSupplier > xEventsSupplier( xControlModel, UNO_QUERY );
+            attachEventsToControl( xControl, xEventsSupplier, Helper );
+#ifdef FAKE_VBA_EVENT_SUPPORT
+            xEventsSupplier.set( getFakeVbaEventsSupplier( xControl ) );
+            attachEventsToControl( xControl, xEventsSupplier, Helper );
+#endif
+        }
     }
 
 
@@ -318,14 +460,13 @@ namespace dlgprov
     // DialogScriptListenerImpl
     // =============================================================================
 
-    DialogScriptListenerImpl::DialogScriptListenerImpl( const Reference< XComponentContext >& rxContext, 
+    DialogUnoScriptListenerImpl::DialogUnoScriptListenerImpl( const Reference< XComponentContext >& rxContext, 
             const Reference< ::com::sun::star::frame::XModel >& rxModel,
 			const Reference< ::com::sun::star::awt::XControl >& rxControl,
 			const Reference< ::com::sun::star::uno::XInterface >& rxHandler,
 			const Reference< ::com::sun::star::beans::XIntrospectionAccess >& rxIntrospectionAccess,
 			bool bDialogProviderMode )
-        :m_xContext( rxContext ) 
-        ,m_xModel( rxModel )
+        : DialogSFScriptListenerImpl( rxContext, rxModel )
         ,m_xControl( rxControl )
         ,m_xHandler( rxHandler )
         ,m_xIntrospectionAccess( rxIntrospectionAccess )
@@ -340,42 +481,8 @@ namespace dlgprov
     }
 
     // -----------------------------------------------------------------------------
-
-    void DialogScriptListenerImpl::firing_impl( const ScriptEvent& aScriptEvent, Any* pRet )
-    {            
-		static ::rtl::OUString aVndSunStarUNO = 
-			::rtl::OUString::createFromAscii( "vnd.sun.star.UNO:" );
-
-        ::rtl::OUString sScriptURL;
-        ::rtl::OUString sScriptCode( aScriptEvent.ScriptCode );
-
-		bool bUNO = (sScriptCode.indexOf( aVndSunStarUNO ) == 0);
-		if( bUNO )
-		{
-			handleUnoScript( aScriptEvent, pRet );
-			return;
-		}
-		else
-		{
-			if ( aScriptEvent.ScriptType.compareToAscii( "StarBasic" ) == 0 )
-			{
-				// StarBasic script: convert ScriptCode to scriptURL
-				sal_Int32 nIndex = sScriptCode.indexOf( ':' );
-				if ( nIndex >= 0 && nIndex < sScriptCode.getLength() )
-				{
-					sScriptURL = ::rtl::OUString::createFromAscii( "vnd.sun.star.script:" );
-					sScriptURL += sScriptCode.copy( nIndex + 1 );
-					sScriptURL += ::rtl::OUString::createFromAscii( "?language=Basic&location=" );
-					sScriptURL += sScriptCode.copy( 0, nIndex );
-				}
-			}
-			else
+    void DialogSFScriptListenerImpl::firing_impl( const ScriptEvent& aScriptEvent, Any* pRet )
 			{
-				// scripting framework script: ScriptCode contains scriptURL
-				sScriptURL = sScriptCode;            
-			}
-		}
-
         try
         {
             Reference< provider::XScriptProvider > xScriptProvider;
@@ -409,7 +516,7 @@ namespace dlgprov
 
             if ( xScriptProvider.is() )
             {                    
-                Reference< provider::XScript > xScript = xScriptProvider->getScript( sScriptURL );
+                Reference< provider::XScript > xScript = xScriptProvider->getScript( aScriptEvent.ScriptCode );
                 OSL_ENSURE( xScript.is(), "DialogScriptListenerImpl::firing_impl: failed to get script" );
 
                 if ( xScript.is() )
@@ -439,7 +546,29 @@ namespace dlgprov
         }
     }
 
-	void DialogScriptListenerImpl::handleUnoScript( const ScriptEvent& aScriptEvent, Any* pRet )
+    void DialogLegacyScriptListenerImpl::firing_impl( const ScriptEvent& aScriptEvent, Any* pRet )
+    {            
+        ::rtl::OUString sScriptURL;
+        ::rtl::OUString sScriptCode( aScriptEvent.ScriptCode );
+
+	if ( aScriptEvent.ScriptType.compareToAscii( "StarBasic" ) == 0 )
+	{
+		// StarBasic script: convert ScriptCode to scriptURL
+		sal_Int32 nIndex = sScriptCode.indexOf( ':' );
+		if ( nIndex >= 0 && nIndex < sScriptCode.getLength() )
+		{
+			sScriptURL = ::rtl::OUString::createFromAscii( "vnd.sun.star.script:" );
+			sScriptURL += sScriptCode.copy( nIndex + 1 );
+			sScriptURL += ::rtl::OUString::createFromAscii( "?language=Basic&location=" );
+			sScriptURL += sScriptCode.copy( 0, nIndex );
+		}
+		ScriptEvent aSFScriptEvent( aScriptEvent );
+		aSFScriptEvent.ScriptCode = sScriptURL;
+		DialogSFScriptListenerImpl::firing_impl( aSFScriptEvent, pRet );
+	}
+    }
+
+	void DialogUnoScriptListenerImpl::firing_impl( const ScriptEvent& aScriptEvent, Any* pRet )
 	{
 		static ::rtl::OUString sUnoURLScheme = ::rtl::OUString::createFromAscii( "vnd.sun.star.UNO:" );
 
Index: scripting/source/dlgprov/dlgevtatt.hxx
===================================================================
RCS file: /cvs/framework/scripting/source/dlgprov/dlgevtatt.hxx,v
retrieving revision 1.6
retrieving revision 1.6.22.3
diff -u -p -u -p -b -w -B -r1.6 -r1.6.22.3
--- scripting/source/dlgprov/dlgevtatt.hxx	20 Jun 2007 10:28:01 -0000	1.6
+++ scripting/source/dlgprov/dlgevtatt.hxx	30 Jan 2008 16:27:06 -0000	1.6.22.3
@@ -65,7 +65,9 @@
 #include <cppuhelper/implbase1.hxx>
 #endif
 
+#include <com/sun/star/script/XScriptEventsSupplier.hpp>
 
+#include <hash_map>
 //.........................................................................
 namespace dlgprov
 {
@@ -74,6 +76,10 @@ namespace dlgprov
     // =============================================================================
     // class DialogEventsAttacherImpl
     // =============================================================================
+    typedef std::hash_map< rtl::OUString, 
+        ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >, 
+        ::rtl::OUStringHash, 
+        ::std::equal_to< ::rtl::OUString > > ListenerHash;
 
     typedef ::cppu::WeakImplHelper1<
         ::com::sun::star::script::XScriptEventsAttacher > DialogEventsAttacherImpl_BASE;
@@ -82,17 +88,28 @@ namespace dlgprov
     class DialogEventsAttacherImpl : public DialogEventsAttacherImpl_BASE
     {
     private:
+        ListenerHash listernersForTypes;
         ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext > m_xContext;
         ::com::sun::star::uno::Reference< ::com::sun::star::script::XEventAttacher > m_xEventAttacher;
-
+        ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener > getScriptListenerForKey( const rtl::OUString& sScriptName ) throw ( ::com::sun::star::uno::RuntimeException );
+#ifdef FAKE_VBA_EVENT_SUPPORT
+        ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptEventsSupplier > getFakeVbaEventsSupplier( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl>& xControl );
+#endif
+        void  SAL_CALL attachEventsToControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl>& xControl, const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptEventsSupplier >& events, const ::com::sun::star::uno::Any& Helper  );
     public:
-        DialogEventsAttacherImpl( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >& rxContext );
+        DialogEventsAttacherImpl( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >& rxContext, 
+        	 const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& xModel, 
+        	 const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& xControl, 
+        	 const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& xHandler, 
+        	 const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XIntrospectionAccess >& xIntrospect, 
+             bool bProviderMode, 
+        	 const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xRTLListener );
         virtual ~DialogEventsAttacherImpl();
 
         // XScriptEventsAttacher
         virtual void SAL_CALL attachEvents( const ::com::sun::star::uno::Sequence< 
             ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& Objects, 
-            const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xListener, 
+			const com::sun::star::uno::Reference<com::sun::star::script::XScriptListener>&,
             const ::com::sun::star::uno::Any& Helper ) 
             throw (::com::sun::star::lang::IllegalArgumentException, 
                    ::com::sun::star::beans::IntrospectionException, 
@@ -146,24 +163,11 @@ namespace dlgprov
 
     class DialogScriptListenerImpl : public DialogScriptListenerImpl_BASE
     {
+    protected:
         ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >		m_xContext;
-        ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >				    m_xModel;
-		::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >					m_xControl;
-        ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >				m_xHandler;
-		::com::sun::star::uno::Reference< ::com::sun::star::beans::XIntrospectionAccess >	m_xIntrospectionAccess;
-		bool																				m_bDialogProviderMode;
-
-        virtual void firing_impl( const ::com::sun::star::script::ScriptEvent& aScriptEvent, ::com::sun::star::uno::Any* pRet );
-
-		void handleUnoScript( const ::com::sun::star::script::ScriptEvent& aScriptEvent, ::com::sun::star::uno::Any* pRet );
-
+        virtual void firing_impl( const ::com::sun::star::script::ScriptEvent& aScriptEvent, ::com::sun::star::uno::Any* pRet ) = 0;
     public:
-        DialogScriptListenerImpl( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >& rxContext,            
-            const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& rxModel,
-			const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& rxControl,
-			const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& rxHandler,
-			const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XIntrospectionAccess >& rxIntrospectionAccess,
-			bool bDialogProviderMode );		// false: ContainerWindowProvider mode
+        DialogScriptListenerImpl( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >& rxContext ) : m_xContext( rxContext ) {}
         virtual ~DialogScriptListenerImpl();
 
         // XEventListener
Index: scripting/source/dlgprov/dlgprov.cxx
===================================================================
RCS file: /cvs/framework/scripting/source/dlgprov/dlgprov.cxx,v
retrieving revision 1.13
retrieving revision 1.12.8.4
diff -u -p -u -p -b -w -B -r1.13 -r1.12.8.4
--- scripting/source/dlgprov/dlgprov.cxx	28 Jan 2008 13:57:53 -0000	1.13
+++ scripting/source/dlgprov/dlgprov.cxx	25 Feb 2008 11:12:21 -0000	1.12.8.4
@@ -113,6 +113,7 @@ namespace dlgprov
 {
 //.........................................................................
 
+static ::rtl::OUString aResourceResolverPropName = ::rtl::OUString::createFromAscii( "ResourceResolver" );
     // =============================================================================
     // component operations
     // =============================================================================
@@ -210,9 +211,41 @@ namespace dlgprov
 		return xStringResourceManager;
 	}
 
+    Reference< container::XNameContainer > DialogProviderImpl::createControlModel() throw ( Exception )
+    {
+        Reference< XMultiComponentFactory > xSMgr_( m_xContext->getServiceManager(), UNO_QUERY_THROW );
+        Reference< container::XNameContainer > xControlModel( xSMgr_->createInstanceWithContext( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.UnoControlDialogModel" ) ), m_xContext ), UNO_QUERY_THROW );
+        return xControlModel;
+    }
+
+    Reference< container::XNameContainer > DialogProviderImpl::createDialogModel( const Reference< io::XInputStream >& xInput, const Reference< resource::XStringResourceManager >& xStringResourceManager ) throw ( Exception )
+    {
+        Reference< container::XNameContainer > xDialogModel(  createControlModel() );
+        ::xmlscript::importDialogModel( xInput, xDialogModel, m_xContext );
+        // Set resource property
+        if( xStringResourceManager.is() )
+        {
+            Reference< beans::XPropertySet > xDlgPSet( xDialogModel, UNO_QUERY );
+            Any aStringResourceManagerAny;
+            aStringResourceManagerAny <<= xStringResourceManager;
+            xDlgPSet->setPropertyValue( aResourceResolverPropName, aStringResourceManagerAny );
+        }
+	
+        return xDialogModel; 
+    }
+
+    Reference< XControlModel > DialogProviderImpl::createDialogModelForBasic() throw ( Exception )
+    {
+        if ( !m_BasicInfo.get() ) 
+            // shouln't get here 
+            throw RuntimeException( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("No information to create dialog" ) ), Reference< XInterface >() );
+        Reference< resource::XStringResourceManager > xStringResourceManager = getStringResourceFromDialogLibrary( m_BasicInfo->mxDlgLib );
+        Reference< XControlModel > xCtrlModel( createDialogModel( m_BasicInfo->mxInput, xStringResourceManager ), UNO_QUERY_THROW );
+        return xCtrlModel;
+    }
+
     Reference< XControlModel > DialogProviderImpl::createDialogModel( const ::rtl::OUString& sURL )
     {
-		static ::rtl::OUString aResourceResolverPropName = ::rtl::OUString::createFromAscii( "ResourceResolver" );
 
 		::rtl::OUString aURL( sURL );
 
@@ -408,24 +441,6 @@ namespace dlgprov
         Reference< XControlModel > xCtrlModel;
         if ( xInput.is() && m_xContext.is() )
         {
-            Reference< XMultiComponentFactory > xSMgr_( m_xContext->getServiceManager() );
-            if ( xSMgr_.is() )
-            {
-                Reference< container::XNameContainer > xDialogModel( xSMgr_->createInstanceWithContext(
-                    ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.UnoControlDialogModel" ) ), m_xContext ), UNO_QUERY );
-
-                if ( xDialogModel.is() )
-                {
-					Any aDialogSourceURLAny;
-					aDialogSourceURLAny <<= aURL;
-					::rtl::OUString aDlgSrcUrlPropName( RTL_CONSTASCII_USTRINGPARAM( "DialogSourceURL" ) );
-					Reference< beans::XPropertySet > xDlgPropSet( xDialogModel, UNO_QUERY );
-					xDlgPropSet->setPropertyValue( aDlgSrcUrlPropName, aDialogSourceURLAny );
-					
-					::xmlscript::importDialogModel( xInput, xDialogModel, m_xContext );
-
-					xCtrlModel = Reference< XControlModel >( xDialogModel, UNO_QUERY );                    
-
 					Reference< resource::XStringResourceManager > xStringResourceManager;
 					if( bSingleDialog )
 					{
@@ -446,7 +461,7 @@ namespace dlgprov
 
 						Reference< task::XInteractionHandler > xDummyHandler;
 						aArgs[5] <<= xDummyHandler;
-
+				Reference< XMultiComponentFactory > xSMgr_( m_xContext->getServiceManager(), UNO_QUERY_THROW );
 						// TODO: Ctor
 						xStringResourceManager = Reference< resource::XStringResourceManager >( xSMgr_->createInstanceWithContext
 							( ::rtl::OUString::createFromAscii( "com.sun.star.resource.StringResourceWithLocation" ), 
@@ -463,16 +478,15 @@ namespace dlgprov
 						xStringResourceManager = getStringResourceFromDialogLibrary( xDialogLib );
 					}
 
-					// Set resource property
-					if( xStringResourceManager.is() )
-					{
-						Reference< beans::XPropertySet > xDlgPSet( xDialogModel, UNO_QUERY );
-						Any aStringResourceManagerAny;
-						aStringResourceManagerAny <<= xStringResourceManager;
-						xDlgPSet->setPropertyValue( aResourceResolverPropName, aStringResourceManagerAny );
-					}
-                }
-            }
+            Reference< container::XNameContainer > xDialogModel( createDialogModel( xInput , xStringResourceManager ), UNO_QUERY_THROW );
+			Any aDialogSourceURLAny;
+			aDialogSourceURLAny <<= aURL;
+			::rtl::OUString aDlgSrcUrlPropName( RTL_CONSTASCII_USTRINGPARAM( "DialogSourceURL" ) );
+			Reference< beans::XPropertySet > xDlgPropSet( xDialogModel, UNO_QUERY );
+			xDlgPropSet->setPropertyValue( aDlgSrcUrlPropName, aDialogSourceURLAny );
+					
+
+			xCtrlModel = Reference< XControlModel >( xDialogModel, UNO_QUERY );
         }
         return xCtrlModel;
     }
@@ -563,19 +577,13 @@ namespace dlgprov
                 // also add the dialog control itself to the sequence
                 pObjects[nControlCount] = Reference< XInterface >( rxControl, UNO_QUERY );
 
-                Reference< XScriptListener > xScriptListener = new DialogScriptListenerImpl
-					( m_xContext, m_xModel, rxControl, rxHandler, rxIntrospectionAccess, bDialogProviderMode );
-
-                if ( xScriptListener.is() )
-                {
                     if ( !m_xScriptEventsAttacher.is() )
-                        m_xScriptEventsAttacher = new DialogEventsAttacherImpl( m_xContext );
+                    m_xScriptEventsAttacher = new DialogEventsAttacherImpl( m_xContext, m_xModel, rxControl, rxHandler, rxIntrospectionAccess, bDialogProviderMode, ( m_BasicInfo.get() ? m_BasicInfo->mxBasicRTLListener : NULL ) );
 
                     if ( m_xScriptEventsAttacher.is() )
                     {
                         Any aHelper;
-                        m_xScriptEventsAttacher->attachEvents( aObjects, xScriptListener, aHelper );
-                    }
+                    m_xScriptEventsAttacher->attachEvents( aObjects, Reference< XScriptListener >(), aHelper );
                 }
             }
         }
@@ -672,7 +680,19 @@ namespace dlgprov
                     Reference< XInterface >() );
             }
         }
-        else if ( aArguments.getLength() > 1 )
+        else if ( aArguments.getLength() == 4 )
+        {
+            // call from RTL_Impl_CreateUnoDialog
+            aArguments[0] >>= m_xModel;
+            m_BasicInfo.reset( new BasicRTLParams() );
+            m_BasicInfo->mxInput.set( aArguments[ 1 ], UNO_QUERY_THROW );
+            m_BasicInfo->mxDlgLib.set( aArguments[ 2 ], UNO_QUERY_THROW );
+            // leave the possibility to optionally allow the old dialog creation
+            // to use the new XScriptListener ( which converts the old style macro
+            // to a SF url )
+            m_BasicInfo->mxBasicRTLListener.set( aArguments[ 3 ], UNO_QUERY);
+        }
+        else if ( aArguments.getLength() > 4 )
         {
             throw RuntimeException(
                 ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DialogProviderImpl::initialize: invalid number of arguments!" ) ),
@@ -698,13 +718,20 @@ namespace dlgprov
 
         ::osl::MutexGuard aGuard( getMutex() );
 
-        OSL_ENSURE( URL.getLength(), "DialogProviderImpl::getDialog: no URL!" );
 
 		// m_xHandler = xHandler;
 
         //Reference< XDialog > xDialog;
 		Reference< XControl > xCtrl;
-        Reference< XControlModel > xCtrlMod( createDialogModel( URL ) );
+        Reference< XControlModel > xCtrlMod;
+        // add support for basic RTL_FUNCTION
+        if ( m_BasicInfo.get() )
+            xCtrlMod = createDialogModelForBasic();
+        else
+        {
+            OSL_ENSURE( URL.getLength(), "DialogProviderImpl::getDialog: no URL!" );
+            xCtrlMod = createDialogModel( URL );
+        }
         if ( xCtrlMod.is() )
         {
 			// i83963 Force decoration
Index: scripting/source/dlgprov/dlgprov.hxx
===================================================================
RCS file: /cvs/framework/scripting/source/dlgprov/dlgprov.hxx,v
retrieving revision 1.6
retrieving revision 1.6.22.2
diff -u -p -u -p -b -w -B -r1.6 -r1.6.22.2
--- scripting/source/dlgprov/dlgprov.hxx	20 Jun 2007 10:28:40 -0000	1.6
+++ scripting/source/dlgprov/dlgprov.hxx	15 Jan 2008 12:57:32 -0000	1.6.22.2
@@ -66,6 +66,9 @@
 #ifndef _COM_SUN_STAR_BEANS_XINTROSPECTION_HPP_
 #include <com/sun/star/beans/XIntrospectionAccess.hpp>
 #endif
+#include <com/sun/star/container/XNameContainer.hpp>
+#include <com/sun/star/io/XInputStream.hpp>
+#include <com/sun/star/resource/XStringResourceManager.hpp>
 
 #ifndef _CPPUHELPER_IMPLBASE3_HXX_
 #include <cppuhelper/implbase4.hxx>
@@ -73,7 +76,7 @@
 #ifndef _OSL_MUTEX_HXX_
 #include <osl/mutex.hxx>
 #endif
-
+#include <memory>
 
 //.........................................................................
 namespace dlgprov
@@ -101,6 +103,13 @@ namespace dlgprov
     class DialogProviderImpl : public DialogProviderImpl_BASE
     {
     private:
+        struct BasicRTLParams
+        {
+             ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream > mxInput;
+             ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameContainer > mxDlgLib;
+             ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener > mxBasicRTLListener;
+        };
+        std::auto_ptr< BasicRTLParams > m_BasicInfo;
         ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >        m_xContext;
         ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >                 m_xModel;
         ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptEventsAttacher > m_xScriptEventsAttacher;
@@ -118,6 +127,10 @@ namespace dlgprov
 			bool bDialogProviderMode );
 		::com::sun::star::uno::Reference< ::com::sun::star::beans::XIntrospectionAccess > inspectHandler( 
 			const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& rxHandler );
+	// helper methods
+			::com::sun::star::uno::Reference< ::com::sun::star::container::XNameContainer > createControlModel() throw ( ::com::sun::star::uno::Exception );
+			::com::sun::star::uno::Reference< ::com::sun::star::container::XNameContainer > createDialogModel( const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& xInput, const ::com::sun::star::uno::Reference< ::com::sun::star::resource::XStringResourceManager >& xStringResourceManager ) throw ( ::com::sun::star::uno::Exception );
+			::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel > createDialogModelForBasic() throw ( ::com::sun::star::uno::Exception );
 
         // XDialogProvider / XDialogProvider2 impl method
 	    virtual ::com::sun::star::uno::Reference < ::com::sun::star::awt::XControl > SAL_CALL createDialogImpl(
Index: basic/source/classes/eventatt.cxx
===================================================================
RCS file: /cvs/script/basic/source/classes/eventatt.cxx,v
retrieving revision 1.31
retrieving revision 1.30.30.3
diff -u -p -u -p -b -w -B -r1.31 -r1.30.30.3
--- basic/source/classes/eventatt.cxx	28 Jan 2008 13:59:47 -0000	1.31
+++ basic/source/classes/eventatt.cxx	15 Apr 2008 15:21:04 -0000	1.30.30.3
@@ -96,6 +96,7 @@
 
 #include <com/sun/star/script/provider/XScriptProviderSupplier.hpp>
 #include <com/sun/star/script/provider/XScriptProvider.hpp>
+#include <com/sun/star/awt/XDialogProvider.hpp>
 
 #include <com/sun/star/frame/XModel.hpp>
 
@@ -115,36 +116,6 @@ using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::script;
 using namespace ::com::sun::star::resource;
 
-typedef ::cppu::WeakImplHelper1< ::com::sun::star::script::XScriptEventsAttacher > ScriptEventsAttacherHelper;
-
-
-// Attaches dialogs
-class DialogEventAttacher : public ScriptEventsAttacherHelper
-{
-    friend class DialogAllListener_Impl;
-
-    ::com::sun::star::uno::Reference< ::com::sun::star::script::XEventAttacher > mxEventAttacher;
-	::osl::Mutex maMutex;
-
-public:
-	DialogEventAttacher( void ) {}
-
-    // Methods
-    virtual void SAL_CALL attachEvents( const ::com::sun::star::uno::Sequence< 
-		::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& Objects, 
-		const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xListener, 
-		const ::com::sun::star::uno::Any& Helper ) 
-			throw(::com::sun::star::lang::IllegalArgumentException, 
-				  ::com::sun::star::beans::IntrospectionException, 
-				  ::com::sun::star::script::CannotCreateAdapterException, 
-				  ::com::sun::star::lang::ServiceNotRegisteredException, 
-				  ::com::sun::star::uno::RuntimeException);
-};
-
-
-
-//===================================================================
-
 using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::lang;
 using namespace ::com::sun::star::beans;
@@ -477,264 +448,6 @@ void BasicScriptListener_Impl::firing_im
         }
 }
 
-
-//===================================================================
-
-// Function to map from NameContainer to sequence needed 
-// to call XScriptEventsAttacher::attachEvents
-//void SAL_CALL attachDialogEvents( StarBASIC* pBasic, 
-void SAL_CALL attachDialogEvents( StarBASIC* pBasic, const Reference< frame::XModel >& xModel, 
-	const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& xDialogControl )
-	//const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xListener )
-{
-	static Reference< XScriptEventsAttacher > xEventsAttacher;
-	Guard< Mutex > aGuard( Mutex::getGlobalMutex() );
-	{
-		if( !xEventsAttacher.is() )
-			xEventsAttacher = new DialogEventAttacher();
-	}
-
-	if( !xDialogControl.is() )
-		return;
-
-	Reference< XControlContainer > xControlContainer( xDialogControl, UNO_QUERY );
-	if( !xControlContainer.is() )
-		return;
-	Sequence< Reference< XControl > > aControls = xControlContainer->getControls();
-	const Reference< XControl >* pControls = aControls.getConstArray();
-	sal_Int32 nControlCount = aControls.getLength();
-	sal_Int32 nObjectCount = nControlCount + 1;
-
-	Sequence< Reference< XInterface > > aObjectSeq( nObjectCount );
-	Reference< XInterface >* pObjects = aObjectSeq.getArray();
-	for( sal_Int32 i = 0 ; i < nControlCount ; i++ )
-	{
-		Reference< XInterface > xIface( pControls[i], UNO_QUERY );
-		pObjects[i] = xIface;
-	}
-
-	// Also take the DialogControl itself into the sequence
-	Reference< XInterface > xDialogIface( xDialogControl, UNO_QUERY );
-	pObjects[ nControlCount ] = xDialogIface;
-
-	Reference< XScriptListener > xScriptListener = new BasicScriptListener_Impl( pBasic, xModel );
-	Any Helper;
-	xEventsAttacher->attachEvents( aObjectSeq, xScriptListener, Helper );
-}
-
-
-//===================================================================
-
-class DialogAllListener_Impl : public WeakImplHelper1< XAllListener >
-{
-	Reference< XScriptListener >	mxScriptListener;
-    OUString						maScriptType;
-    OUString						maScriptCode;
-	Mutex							maMutex;
-
-	virtual void firing_impl(const AllEventObject& Event, Any* pRet);
-
-public:
-    DialogAllListener_Impl( const Reference< XScriptListener >& xListener, 
-		const OUString &rScriptType, const OUString & rScriptCode );
-
-    // Methoden von XAllListener
-    virtual void SAL_CALL firing(const AllEventObject& Event) 
-		throw( RuntimeException );
-    virtual Any SAL_CALL approveFiring(const AllEventObject& Event) 
-		throw( InvocationTargetException, RuntimeException );
-
-    // Methoden von XEventListener
-    virtual void SAL_CALL disposing(const EventObject& Source) 
-		throw( RuntimeException );
-};
-
-//========================================================================
-
-DialogAllListener_Impl::DialogAllListener_Impl( const Reference< XScriptListener >& xListener, 
-	const OUString &rScriptType, const OUString & rScriptCode )
-		: mxScriptListener( xListener )
-		, maScriptType( rScriptType )
-		, maScriptCode( rScriptCode )
-{
-}
-
-// Methods XAllListener
-void DialogAllListener_Impl::firing( const AllEventObject& Event ) throw ( RuntimeException )
-{
-	firing_impl( Event, NULL );
-}
-
-Any DialogAllListener_Impl::approveFiring( const AllEventObject& Event ) 
-	throw ( InvocationTargetException, RuntimeException )
-{
-	Any aRetAny;
-	firing_impl( Event, &aRetAny );
-	return aRetAny;
-}
-
-// Methods XEventListener
-void DialogAllListener_Impl::disposing(const EventObject& ) throw ( RuntimeException )
-{
-	// TODO: ???
-	//NAMESPACE_VOS(OGuard) guard( Application::GetSolarMutex() );
-	//xSbxObj.Clear();
-}
-
-void DialogAllListener_Impl::firing_impl( const AllEventObject& Event, Any* pRet )
-{
-	Guard< Mutex > aGuard( maMutex );
-
-    ScriptEvent aScriptEvent;
-    aScriptEvent.Source         = (OWeakObject *)this;	// get correct XInterface
-    aScriptEvent.ListenerType   = Event.ListenerType;
-    aScriptEvent.MethodName     = Event.MethodName;
-    aScriptEvent.Arguments      = Event.Arguments;
-    aScriptEvent.Helper         = Event.Helper;
-    aScriptEvent.Arguments      = Event.Arguments;
-    aScriptEvent.ScriptType     = maScriptType;
-    aScriptEvent.ScriptCode     = maScriptCode;
-
-	if( pRet )
-		*pRet = mxScriptListener->approveFiring( aScriptEvent );
-	else
-		mxScriptListener->firing( aScriptEvent );
-}
-
-
-//===================================================================
-
-
-
-void SAL_CALL DialogEventAttacher::attachEvents
-(
-	const Sequence< Reference< XInterface > >& Objects,
-	const Reference< XScriptListener >& xListener, 
-	const Any& Helper 
-) 
-	throw(	IllegalArgumentException, 
-			IntrospectionException, 
-			CannotCreateAdapterException, 
-			ServiceNotRegisteredException, 
-			RuntimeException )
-{
-	// Get EventAttacher and Introspection (Introspection???)
-	{
-		Guard< Mutex > aGuard( maMutex );
-		if( !mxEventAttacher.is() )
-		{
-			// AllListenerAdapterService holen
-			Reference< XMultiServiceFactory > xSMgr( comphelper::getProcessServiceFactory() );
-			if( !xSMgr.is() )
-				throw RuntimeException();
-
-			Reference< XInterface > xIFace( xSMgr->createInstance( 
-				OUString::createFromAscii("com.sun.star.script.EventAttacher") ) );
-			if ( xIFace.is() )
-			{
-				mxEventAttacher = Reference< XEventAttacher >::query( xIFace );
-			}
-			if( !mxEventAttacher.is() )
-				throw ServiceNotRegisteredException();
-		}
-	}
-
-	// Go over all objects
-	const Reference< XInterface >* pObjects = Objects.getConstArray();
-	sal_Int32 i, nObjCount = Objects.getLength();
-	for( i = 0 ; i < nObjCount ; i++ )
-	{
-		// We know that we have to do with instances of XControl
-		// Otherwise this is not the right implementation for
-		// XScriptEventsAttacher and we have to give up
-		Reference< XControl > xControl( pObjects[ i ], UNO_QUERY );
-		if( !xControl.is() )
-			throw IllegalArgumentException();
-
-		// Get XEventsSupplier from ControlModel
-		Reference< XControlModel > xControlModel = xControl->getModel();
-		Reference< XScriptEventsSupplier > xEventsSupplier( xControlModel, UNO_QUERY );
-		if( xEventsSupplier.is() )
-		{
-			Reference< XNameContainer > xEventCont = xEventsSupplier->getEvents();
-			Sequence< OUString > aNames = xEventCont->getElementNames();
-			const OUString* pNames = aNames.getConstArray();
-			sal_Int32 j, nNameCount = aNames.getLength();
-
-			for( j = 0 ; j < nNameCount ; j++ )
-			{
-				ScriptEventDescriptor aDesc;
-
-				Any aElement = xEventCont->getByName( pNames[ j ] );
-				aElement >>= aDesc;
-				Reference< XAllListener > xAllListener =
-					new DialogAllListener_Impl( xListener, aDesc.ScriptType, aDesc.ScriptCode );
-
-				// Try first to attach event to the ControlModel
-				sal_Bool bSuccess = sal_False;
-				try
-				{
-					Reference< XEventListener > xListener_ = mxEventAttacher->
-						attachSingleEventListener( xControlModel, xAllListener, Helper, 
-						aDesc.ListenerType, aDesc.AddListenerParam, aDesc.EventMethod );
-
-					if( xListener_.is() )
-						bSuccess = sal_True;
-				}
-				catch( IllegalArgumentException& ) 
-				{}
-				catch( IntrospectionException& ) 
-				{}
-				catch( CannotCreateAdapterException& ) 
-				{}
-				catch( ServiceNotRegisteredException& ) 
-				{}
-				//{
-					//throw IntrospectionException();
-				//}
-
-				try
-				{
-				// If we had no success, try to attach to the Control
-				if( !bSuccess )
-				{
-					Reference< XEventListener > xListener_;	// Do we need that?!?
-					xListener_ = mxEventAttacher->attachSingleEventListener
-						( xControl, xAllListener, Helper, aDesc.ListenerType,
-						  aDesc.AddListenerParam, aDesc.EventMethod );
-				}
-				}
-				catch( IllegalArgumentException& ) 
-				{}
-				catch( IntrospectionException& ) 
-				{}
-				catch( CannotCreateAdapterException& ) 
-				{}
-				catch( ServiceNotRegisteredException& ) 
-				{}
-			}
-		}
-	}
-
-}
-
-Reference< XStringResourceManager > getStringResourceFromDialogLibrary( const Any& aDlgLibAny )
-{
-	Reference< resource::XStringResourceManager > xStringResourceManager;
-
-	Reference< resource::XStringResourceSupplier > xStringResourceSupplier;
-	aDlgLibAny >>= xStringResourceSupplier;
-	if( xStringResourceSupplier.is() )
-	{
-		Reference< resource::XStringResourceResolver >
-			xStringResourceResolver = xStringResourceSupplier->getStringResource();
-
-		xStringResourceManager = 
-			Reference< resource::XStringResourceManager >( xStringResourceResolver, UNO_QUERY );
-	}
-	return xStringResourceManager;
-}
-
 Any implFindDialogLibForDialog( const Any& rDlgAny, SbxObject* pBasic )
 {
 	Any aRetDlgLibAny;
@@ -842,7 +555,6 @@ void RTL_Impl_CreateUnoDialog( StarBASIC
 
 	// Import the DialogModel
 	Reference< XInputStream > xInput( xISP->createInputStream() );
-    xmlscript::importDialogModel( xInput, xDialogModel, xContext );
 
 	// i83963 Force decoration
 	uno::Reference< beans::XPropertySet > xDlgModPropSet( xDialogModel, uno::UNO_QUERY );
@@ -889,39 +601,38 @@ void RTL_Impl_CreateUnoDialog( StarBASIC
 			aDlgLibAny = implFindDialogLibForDialog( aAnyISP, pSearchBasic2 );
 	}
 
-	// Get resource from dialog library and set at dialog
-	Reference< XStringResourceManager > xStringResourceManager
-		= getStringResourceFromDialogLibrary( aDlgLibAny );
-	if( xStringResourceManager.is() )
-	{
-		Reference< beans::XPropertySet > xDlgPSet( xDialogModel, UNO_QUERY );
-		Any aStringResourceManagerAny;
-		aStringResourceManagerAny <<= xStringResourceManager;
-		xDlgPSet->setPropertyValue( aResourceResolverPropName, aStringResourceManagerAny );
-	}
 
-    // Add dialog model to dispose vector
-	Reference< XComponent > xDlgComponent( xDialogModel, UNO_QUERY );
-    pINST->getComponentVector().push_back( xDlgComponent );
+    OSL_TRACE("About to try get a hold of ThisComponent");
+    Reference< frame::XModel > xModel = getModelFromBasic( pStartedBasic ) ;            
+	Reference< XScriptListener > xScriptListener = new BasicScriptListener_Impl( pBasic, xModel );
 
+	Sequence< Any > aArgs( 4 );
+	aArgs[ 0 ] <<= xModel;
+	aArgs[ 1 ] <<= xInput;
+	aArgs[ 2 ] = aDlgLibAny;
+	aArgs[ 3 ] <<= xScriptListener;
 	// Create a "living" Dialog
-	Reference< XControl > xDlg( xMSF->createInstance( OUString(RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.UnoControlDialog" ) ) ), UNO_QUERY );
-	Reference< XControlModel > xDlgMod( xDialogModel, UNO_QUERY );
-	xDlg->setModel( xDlgMod );
-	Reference< XWindow > xW( xDlg, UNO_QUERY );
-	xW->setVisible( sal_False );
-	Reference< XToolkit > xToolkit( xMSF->createInstance( 
-	OUString(RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.ExtToolkit" ) ) ), UNO_QUERY );
-	xDlg->createPeer( xToolkit, NULL );
+        Reference< XControl > xCntrl;
+        try
+        {
+	    Reference< XDialogProvider >  xDlgProv( xMSF->createInstanceWithArguments( OUString(RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.comp.scripting.DialogProvider" ) ), aArgs ), UNO_QUERY );
+            xCntrl.set( xDlgProv->createDialog( rtl::OUString() ), UNO_QUERY_THROW );
+           // Add dialog model to dispose vector
+           Reference< XComponent > xDlgComponent( xCntrl->getModel(), UNO_QUERY );
+           pINST->getComponentVector().push_back( xDlgComponent );
     // need ThisCompoent from calling script
-
-    OSL_TRACE("About to try get a hold of ThisComponent");
-    Reference< frame::XModel > xModel = getModelFromBasic( pStartedBasic ) ;            
-	attachDialogEvents( pStartedBasic, xModel, xDlg );
+        }
+        // preserve existing bad behaviour, it's possible... but probably
+        // illegal to open 2 dialogs ( they ARE modal ) when this happens, sometimes 
+        // create dialog fails.  So, in this case let's not throw, just leave basic 
+        // detect the unset object.
+        catch( uno::Exception& )
+        {
+        }
     
 	// Return dialog
 	Any aRetVal;
-	aRetVal <<= xDlg;
+	aRetVal <<= xCntrl;
 	SbxVariableRef refVar = rPar.Get(0);
 	unoToSbxValue( (SbxVariable*)refVar, aRetVal );
 }
