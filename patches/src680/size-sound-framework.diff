Index: framework/inc/dispatch/soundhandler.hxx
===================================================================
RCS file: /cvs/framework/framework/inc/dispatch/soundhandler.hxx,v
retrieving revision 1.4
diff -u -r1.4 soundhandler.hxx
--- framework/inc/dispatch/soundhandler.hxx	9 Sep 2005 00:14:47 -0000	1.4
+++ framework/inc/dispatch/soundhandler.hxx	1 Nov 2005 12:07:58 -0000
@@ -120,10 +120,6 @@
 #include <cppuhelper/weak.hxx>
 #endif
 
-#ifndef _SV_SOUND_HXX
-#include <vcl/sound.hxx>
-#endif
-
 //_________________________________________________________________________________________________________________
 //	namespace
 //_________________________________________________________________________________________________________________
@@ -209,7 +205,9 @@
 	//	private methods
 	//-------------------------------------------------------------------------------------------------------------
 	private:
+#if 0
         DECL_LINK( implts_PlayerNotify, void* );
+#endif
 
 	//-------------------------------------------------------------------------------------------------------------
 	//	variables
@@ -219,7 +217,9 @@
 
         css::uno::Reference< css::lang::XMultiServiceFactory >     m_xFactory          ;   /// global uno service factory to create new services
         css::uno::Reference< css::uno::XInterface >                m_xSelfHold         ;   /// we must protect us against dieing during async(!) dispatch() call!
+#if 0
         Sound                                                      m_aPlayer           ;   /// used vcl player to play sounds ... works asynchron ... That's why "self hold" and "request count" ...
+#endif
         css::uno::Reference< css::frame::XDispatchResultListener > m_xListener         ;
 
 };      //  class SoundHandler
Index: framework/source/dispatch/soundhandler.cxx
===================================================================
RCS file: /cvs/framework/framework/source/dispatch/soundhandler.cxx,v
retrieving revision 1.12
diff -u -r1.12 soundhandler.cxx
--- framework/source/dispatch/soundhandler.cxx	9 Sep 2005 01:22:06 -0000	1.12
+++ framework/source/dispatch/soundhandler.cxx	1 Nov 2005 12:07:59 -0000
@@ -159,9 +159,13 @@
         ,   ::cppu::OWeakObject (          )
         // Init member
         ,   m_xFactory          ( xFactory )
+#if 0
         ,   m_aPlayer           (          )
+#endif
 {
+#if 0
     m_aPlayer.SetNotifyHdl( LINK( this, SoundHandler, implts_PlayerNotify ) );
+#endif
 }
 
 /*-************************************************************************************************************//**
@@ -216,6 +220,7 @@
     // SAFE {
     ResetableGuard aLock( m_aLock );
 
+#if 0
     // If player currently used for other dispatch() requests ...
     // cancel it by calling stop()!
     if (m_aPlayer.IsPlaying())
@@ -234,6 +239,7 @@
         m_xSelfHold = css::uno::Reference< css::uno::XInterface >(static_cast< ::cppu::OWeakObject* >(this), css::uno::UNO_QUERY);
         m_aPlayer.Play();
     }
+#endif
 
     // } SAFE
     aLock.unlock();
@@ -242,7 +248,9 @@
 void SAL_CALL SoundHandler::dispatch( const css::util::URL&                                  aURL       ,
                                       const css::uno::Sequence< css::beans::PropertyValue >& lArguments ) throw( css::uno::RuntimeException )
 {
+#if 0
     dispatchWithNotification(aURL, lArguments, css::uno::Reference< css::frame::XDispatchResultListener >());
+#endif
 }
 
 /*-************************************************************************************************************//**
@@ -274,6 +282,7 @@
     // Our default is "nothing". So we can return it, if detection failed or fily type is realy unknown.
     ::rtl::OUString sTypeName;
 
+#if 0
     // Analyze given descriptor to find filename or input stream or ...
     ::comphelper::MediaDescriptor aDescriptor(lDescriptor);
     ::rtl::OUString               sURL       = aDescriptor.getUnpackedValueOrDefault(::comphelper::MediaDescriptor::PROP_URL(), ::rtl::OUString());
@@ -293,7 +302,7 @@
         aDescriptor[::comphelper::MediaDescriptor::PROP_TYPENAME()] <<= sTypeName;
         aDescriptor >> lDescriptor;
     }
-
+#endif
     // Return our decision.
     return sTypeName;
 }
@@ -311,6 +320,7 @@
     @onerror    -
     @threadsafe yes
 *//*-*************************************************************************************************************/
+#if 0
 IMPL_LINK( SoundHandler, implts_PlayerNotify, void*, pVoid )
 {
     // SAFE {
@@ -344,5 +354,6 @@
 
     return 0;
 }
+#endif
 
 } // namespace framework
