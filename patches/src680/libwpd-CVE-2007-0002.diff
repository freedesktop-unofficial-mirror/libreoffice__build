--- libwpd/libwpd-0.8.6.diff-old	2007-03-08 11:59:50.000000000 +0000
+++ libwpd/libwpd-0.8.6.diff	2007-03-08 12:00:42.000000000 +0000
@@ -8,3 +8,486 @@
  
  .INCLUDE :  svpre.mk
  .INCLUDE :  settings.mk
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP1Part.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP1Part.cpp
+@@ -47,6 +47,13 @@
+ 	}
+ 	else if (WP1_FUNCTION_GROUP_SIZE[readVal-0xC0] == -1)
+ 	{
++		// Should not happen because the heuristics would not recognize this file as a well-formed WP1 file.
++		// Nonetheless if we ever change the parts using the heuristics, this will be a check useful to have
++		if (!WP1VariableLengthGroup::isGroupConsistent(input, readVal))
++		{
++			WPD_DEBUG_MSG(("WordPerfect: Consistency Check (variable length) failed; ignoring this byte\n"));
++			return 0;
++		}
+ 		WPD_DEBUG_MSG(("WordPerfect: constructVariableLengthGroup\n"));
+ 		return WP1VariableLengthGroup::constructVariableLengthGroup(input, readVal);
+ 	}
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP1SetTabsGroup.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP1SetTabsGroup.cpp
+@@ -39,7 +39,7 @@
+ void WP1SetTabsGroup::_readContents(WPXInputStream *input)
+ {
+ 	// Skip first the old condensed tab table
+-	while (readU8(input) != 0xff)
++	while (readU8(input) != 0xff && !input->atEOS())
+ 		input->seek(2, WPX_SEEK_CUR);
+ 
+ 	// Now read the new condensed tab table
+@@ -47,8 +47,10 @@
+ 	float tmpTabPosition = 0.0f;
+ 	WPXTabStop tmpTabStop = WPXTabStop();
+ 
+-	while ((tmpTabType = read8(input)) != (int8_t)0xff)
++	while (((tmpTabType = read8(input)) & 0xff) != 0xff)
+ 	{
++		if (input->atEOS())
++			throw FileException();
+ 		float tmpTabPosition = (float)((double)readU16(input, true) / 72.0f);
+ 
+ 		if (tmpTabType < 0)
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP1SubDocument.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP1SubDocument.cpp
+@@ -26,7 +26,7 @@
+ #include "WP1Parser.h"
+ #include "libwpd_internal.h"
+ 
+-WP1SubDocument::WP1SubDocument(WPXInputStream *input, const int dataSize) :
++WP1SubDocument::WP1SubDocument(WPXInputStream *input, const unsigned dataSize) :
+ 	WPXSubDocument(input, dataSize)
+ {
+ }
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP3PageFormatGroup.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP3PageFormatGroup.cpp
+@@ -90,8 +90,10 @@
+ 
+ 		m_isRelative = (readU8(input) & 0x01);
+ 
+-		while ((tmpTabType = read8(input)) != (int8_t)0xff)
++		while (((tmpTabType = read8(input)) & 0xff) != 0xff)
+ 		{
++			if (input->atEOS())
++				throw FileException();
+ 			float tmpTabPosition = fixedPointToFloat(readU32(input, true)) / 72.0f;
+ 
+ 			if (tmpTabType < 0)
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP3SubDocument.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP3SubDocument.cpp
+@@ -26,7 +26,7 @@
+ #include "WP3Parser.h"
+ #include "libwpd_internal.h"
+ 
+-WP3SubDocument::WP3SubDocument(WPXInputStream *input, const int dataSize) :
++WP3SubDocument::WP3SubDocument(WPXInputStream *input, const unsigned dataSize) :
+ 	WPXSubDocument(input, dataSize)
+ {
+ }
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP3TablesGroup.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP3TablesGroup.cpp
+@@ -50,10 +50,12 @@
+ {
+ 	// this group can contain different kinds of data, thus we need to read
+ 	// the contents accordingly
+-	uint8_t i;
++	uint8_t i=0;
++	long startPosition = 0;
+ 	switch (getSubGroup())
+ 	{
+ 	case WP3_TABLES_GROUP_TABLE_FUNCTION:
++		startPosition = input->tell();
+ 		input->seek(71, WPX_SEEK_CUR);
+ 		m_tableMode = readU8(input);
+ 		m_offsetFromLeftEdge = readU32(input, true);
+@@ -63,8 +65,12 @@
+ 		m_rightGutterSpacing = readU32(input, true);
+ 		input->seek(3, WPX_SEEK_CUR);
+ 		m_numColumns = readU8(input);
++		if ((m_numColumns > 32) || ((input->tell() - startPosition + m_numColumns*10) > (getSize() - 4)))
++			throw FileException();
+ 		for (i=0; i<m_numColumns; i++)
+ 		{
++			if (input->atEOS())
++				throw FileException();
+ 			m_columnMode[i] = readU8(input);
+ 			m_numberFormat[i] = readU8(input);
+ 			m_columnWidth[i] = readU32(input, true);
+@@ -120,7 +126,7 @@
+ 	{
+ 	case WP3_TABLES_GROUP_TABLE_FUNCTION:
+ 		listener->defineTable(m_tableMode, fixedPointToWPUs(m_offsetFromLeftEdge));
+-		for (i=0; i<m_numColumns; i++)
++		for (i=0; i<m_numColumns && i <= 32; i++)
+ 			listener->addTableColumnDefinition(fixedPointToWPUs(m_columnWidth[i]), fixedPointToWPUs(m_leftGutterSpacing),
+ 								fixedPointToWPUs(m_rightGutterSpacing), 0, LEFT);
+ 		listener->startTable();
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP42SubDocument.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP42SubDocument.cpp
+@@ -26,12 +26,12 @@
+ #include "WP42Parser.h"
+ #include "libwpd_internal.h"
+ 
+-WP42SubDocument::WP42SubDocument(uint8_t * streamData, const int dataSize) :
++WP42SubDocument::WP42SubDocument(uint8_t * streamData, const unsigned dataSize) :
+ 	WPXSubDocument(streamData, dataSize)
+ {
+ }
+ 
+-WP42SubDocument::WP42SubDocument(WPXInputStream *input, const int dataSize) :
++WP42SubDocument::WP42SubDocument(WPXInputStream *input, const unsigned dataSize) :
+ 	WPXSubDocument(input, dataSize)
+ {
+ }
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP5DefinitionGroup.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP5DefinitionGroup.cpp
+@@ -26,7 +26,7 @@
+ #include "WPXListener.h"
+ #include "libwpd_internal.h"
+ 
+-WP5DefinitionGroup_DefineTablesSubGroup::WP5DefinitionGroup_DefineTablesSubGroup(WPXInputStream *input) :
++WP5DefinitionGroup_DefineTablesSubGroup::WP5DefinitionGroup_DefineTablesSubGroup(WPXInputStream *input, uint16_t subGroupSize) :
+ 	WP5VariableLengthGroup_SubGroup(),
+ 	m_position(0),
+ 	m_numColumns(0),
+@@ -34,6 +34,7 @@
+ 	m_leftGutter(0),
+ 	m_rightGutter(0)
+ {
++	long startPosition = input->tell();
+ 	// Skip useless old values to read the old column number
+ 	input->seek(2, WPX_SEEK_CUR);
+ 	m_numColumns = readU16(input);
+@@ -50,12 +51,26 @@
+ 	input->seek(10, WPX_SEEK_CUR);
+ 	m_leftOffset = readU16(input);
+ 	int i;
++	if ((m_numColumns > 32) || ((input->tell() - startPosition + m_numColumns*5) > (subGroupSize - 4)))
++		throw FileException();
+ 	for (i=0; i < m_numColumns; i++)
++	{
++		if (input->atEOS())
++			throw FileException();
+ 		m_columnWidth[i] = readU16(input);
++	}
+ 	for (i=0; i < m_numColumns; i++)
++	{
++		if (input->atEOS())
++			throw FileException();
+ 		m_attributeBits[i] = readU16(input);
++	}
+ 	for (i=0; i < m_numColumns; i++)
++	{
++		if (input->atEOS())
++			throw FileException();
+ 		m_columnAlignment[i] = readU8(input);
++	}
+ }
+ 
+ void WP5DefinitionGroup_DefineTablesSubGroup::parse(WP5Listener *listener)
+@@ -88,7 +103,7 @@
+ 	switch(getSubGroup())
+ 	{
+ 		case WP5_TOP_DEFINITION_GROUP_DEFINE_TABLES:
+-			m_subGroupData = new WP5DefinitionGroup_DefineTablesSubGroup(input);
++			m_subGroupData = new WP5DefinitionGroup_DefineTablesSubGroup(input, getSize());
+ 			break;
+ 		default:
+ 			break;
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP5SubDocument.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP5SubDocument.cpp
+@@ -26,7 +26,7 @@
+ #include "WP5Parser.h"
+ #include "libwpd_internal.h"
+ 
+-WP5SubDocument::WP5SubDocument(WPXInputStream *input, const int dataSize) :
++WP5SubDocument::WP5SubDocument(WPXInputStream *input, const unsigned dataSize) :
+ 	WPXSubDocument(input, dataSize)
+ {
+ }
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP6ExtendedDocumentSummaryPacket.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP6ExtendedDocumentSummaryPacket.cpp
+@@ -24,6 +24,7 @@
+  * Corel Corporation or Corel Corporation Limited."
+  */
+ #include <string.h>
++#include <limits>
+ 
+ #include "WP6ExtendedDocumentSummaryPacket.h"
+ #include "libwpd_internal.h"
+@@ -47,6 +48,8 @@
+ {
+ 	if (m_dataSize <= 0)
+ 		return;
++	if (m_dataSize > ((std::numeric_limits<uint32_t>::max)() / 2))
++		m_dataSize = ((std::numeric_limits<uint32_t>::max)() / 2);
+ 	uint8_t *streamData = new uint8_t[m_dataSize];
+ 	for(int i=0; i<m_dataSize; i++)
+ 		streamData[i] = readU8(input);
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP6FontDescriptorPacket.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP6FontDescriptorPacket.cpp
+@@ -23,7 +23,7 @@
+  * Corel Corporation or Corel Corporation Limited."
+  */
+ #include <string.h>
+-
++#include <limits>
+ #include "WP6FontDescriptorPacket.h"
+ #include "libwpd_internal.h"
+ 
+@@ -69,9 +69,8 @@
+ 
+    m_fontNameLength = readU16(input); 
+ 
+-   // TODO: re-do sanity checking
+-   //if(m_fontNameLength < WP_FONT_NAME_MAX_LENGTH)
+-   //{	
++   if (m_fontNameLength > ((std::numeric_limits<uint16_t>::max)() / 2))
++	m_fontNameLength = ((std::numeric_limits<uint16_t>::max)() / 2);
+    if (m_fontNameLength == 0) 
+ 	   {
+ 		   m_fontName = new char[1];
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP6GeneralTextPacket.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP6GeneralTextPacket.cpp
+@@ -43,6 +43,7 @@
+ 
+ void WP6GeneralTextPacket::_readContents(WPXInputStream *input)
+ {
++	long startPosition = input->tell();
+ 	uint16_t numTextBlocks = readU16(input);
+ 	uint32_t firstTextBlockOffset = readU32(input);
+ 
+@@ -53,13 +54,18 @@
+ 	}
+ 	
+ 	uint32_t *blockSizes = new uint32_t[numTextBlocks];
+-	int totalSize = 0;
++	unsigned int totalSize = 0;
+ 	unsigned int i;
+ 
+ 	for(i=0; i<numTextBlocks; i++)
+ 	{
++		if ((input->tell() - startPosition + 4) > getDataSize() || input->atEOS())
++			throw FileException();
+ 		blockSizes[i] = readU32(input);
+-		totalSize += blockSizes[i];
++		unsigned int newTotalSize = totalSize + blockSizes[i];
++		if (newTotalSize < totalSize)
++			throw FileException();
++		totalSize += newTotalSize;
+ 	}	
+ 
+ //	input->seek(firstTextBlockOffset, WPX_SEEK_SET);
+@@ -74,6 +80,8 @@
+ 	int streamPos = 0;
+ 	for(i=0; i<numTextBlocks; i++) 
+ 	{
++		if ((input->tell() - startPosition + blockSizes[i]) > getDataSize() || input->atEOS())
++			throw FileException();
+ 		for (unsigned int j=0; j<blockSizes[i]; j++)
+ 		{
+ 			streamData[streamPos] = readU8(input);
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP6PrefixDataPacket.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP6PrefixDataPacket.cpp
+@@ -35,7 +35,8 @@
+ #include "libwpd.h"
+ #include "libwpd_internal.h"
+ 
+-WP6PrefixDataPacket::WP6PrefixDataPacket(WPXInputStream * input)
++WP6PrefixDataPacket::WP6PrefixDataPacket(WPXInputStream * input) :
++	m_dataSize(0)
+ {
+ }
+ 
+@@ -74,7 +75,9 @@
+ 
+ void WP6PrefixDataPacket::_read(WPXInputStream *input, uint32_t dataOffset, uint32_t dataSize)
+ {
+-	if (!dataSize)
++	m_dataSize = dataSize;
++
++	if (!m_dataSize)
+ 		return;
+ 
+ 	input->seek(dataOffset, WPX_SEEK_SET);
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP6SubDocument.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WP6SubDocument.cpp
+@@ -26,7 +26,7 @@
+ #include "WP6Parser.h"
+ #include "libwpd_internal.h"
+ 
+-WP6SubDocument::WP6SubDocument(uint8_t * streamData, const int dataSize) :
++WP6SubDocument::WP6SubDocument(uint8_t * streamData, const unsigned dataSize) :
+ 	WPXSubDocument(streamData, dataSize)
+ {
+ }
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WPXSubDocument.cpp
++++ misc/build/libwpd-0.8.7/src/lib/WPXSubDocument.cpp
+@@ -32,18 +32,20 @@
+ {
+ }
+ 
+-WPXSubDocument::WPXSubDocument(WPXInputStream *input, const int dataSize) :
++WPXSubDocument::WPXSubDocument(WPXInputStream *input, const unsigned dataSize) :
+ 	m_stream(NULL)
+ {
+ 	uint8_t *streamData = new uint8_t[dataSize];
+ 	for (int i=0; i<dataSize; i++)
+ 	{
++		if (input->atEOS())
++			throw FileException();
+ 		streamData[i] = readU8(input);
+ 	}
+ 	m_stream = new WPXMemoryInputStream(streamData, dataSize);
+ }
+ 
+-WPXSubDocument::WPXSubDocument(uint8_t * streamData, const int dataSize) :
++WPXSubDocument::WPXSubDocument(uint8_t * streamData, const unsigned dataSize) :
+ 	m_stream(NULL)
+ {
+ 	m_stream = new WPXMemoryInputStream(streamData, dataSize);
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP1SubDocument.h
++++ misc/build/libwpd-0.8.7/src/lib/WP1SubDocument.h
+@@ -32,7 +32,7 @@
+ class WP1SubDocument : public WPXSubDocument
+ {
+ public:
+-	WP1SubDocument(WPXInputStream *input, const int dataSize);
++	WP1SubDocument(WPXInputStream *input, const unsigned dataSize);
+ 	void parse(WP1Listener *listener) const;
+ 
+ };
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP3SubDocument.h
++++ misc/build/libwpd-0.8.7/src/lib/WP3SubDocument.h
+@@ -32,7 +32,7 @@
+ class WP3SubDocument : public WPXSubDocument
+ {
+ public:
+-	WP3SubDocument(WPXInputStream *input, const int dataSize);
++	WP3SubDocument(WPXInputStream *input, const unsigned dataSize);
+ 	void parse(WP3Listener *listener) const;
+ 
+ };
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP42SubDocument.h
++++ misc/build/libwpd-0.8.7/src/lib/WP42SubDocument.h
+@@ -32,8 +32,8 @@
+ class WP42SubDocument : public WPXSubDocument
+ {
+ public:
+-	WP42SubDocument(uint8_t * streamData, const int dataSize);
+-	WP42SubDocument(WPXInputStream *input, const int dataSize);
++	WP42SubDocument(uint8_t * streamData, const unsigned dataSize);
++	WP42SubDocument(WPXInputStream *input, const unsigned dataSize);
+ 	void parse(WP42Listener *listener) const;
+ 
+ };
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP5DefinitionGroup.h
++++ misc/build/libwpd-0.8.7/src/lib/WP5DefinitionGroup.h
+@@ -31,7 +31,7 @@
+ class WP5DefinitionGroup_DefineTablesSubGroup : public WP5VariableLengthGroup_SubGroup
+ {
+ public:
+-	WP5DefinitionGroup_DefineTablesSubGroup(WPXInputStream *input);
++	WP5DefinitionGroup_DefineTablesSubGroup(WPXInputStream *input, uint16_t subGroupSize);
+ 	void parse(WP5Listener *listener);
+ 
+ private:
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP5SubDocument.h
++++ misc/build/libwpd-0.8.7/src/lib/WP5SubDocument.h
+@@ -32,7 +32,7 @@
+ class WP5SubDocument : public WPXSubDocument
+ {
+ public:
+-	WP5SubDocument(WPXInputStream *input, const int dataSize);
++	WP5SubDocument(WPXInputStream *input, const unsigned dataSize);
+ 	void parse(WP5Listener *listener) const;
+ 
+ };
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP6PrefixDataPacket.h
++++ misc/build/libwpd-0.8.7/src/lib/WP6PrefixDataPacket.h
+@@ -39,12 +39,16 @@
+ 	virtual ~WP6PrefixDataPacket() {}
+ 	virtual void parse(WP6Listener *listener) const {}
+ 	virtual WP6SubDocument * getSubDocument() const { return NULL; }
++	const uint32_t getDataSize() const { return m_dataSize; }
+ 
+ 	static WP6PrefixDataPacket * constructPrefixDataPacket(WPXInputStream * input, WP6PrefixIndice *prefixIndice);
+ 
+ protected:
+ 	virtual void _readContents(WPXInputStream *input) = 0;
+  	void _read(WPXInputStream *input, uint32_t dataOffset, uint32_t dataSize);
++
++private:
++	uint32_t m_dataSize;
+ };
+ 
+ #endif /* WP6PREFIXDATAPACKET_H */
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WP6SubDocument.h
++++ misc/build/libwpd-0.8.7/src/lib/WP6SubDocument.h
+@@ -32,7 +32,7 @@
+ class WP6SubDocument : public WPXSubDocument
+ {
+ public:
+-	WP6SubDocument(uint8_t * streamData, const int dataSize);
++	WP6SubDocument(uint8_t * streamData, const unsigned dataSize);
+ 	void parse(WP6Listener *listener) const;
+ };
+ #endif /* WP6SUBDOCUMENT_H */
+only in patch2:
+unchanged:
+--- misc/build/libwpd-0.8.7.orig/src/lib/WPXSubDocument.h
++++ misc/build/libwpd-0.8.7/src/lib/WPXSubDocument.h
+@@ -33,8 +33,8 @@
+ {
+ public:
+ 	WPXSubDocument();
+-	WPXSubDocument(WPXInputStream *input, const int dataSize);
+-	WPXSubDocument(uint8_t * streamData, const int dataSize);
++	WPXSubDocument(WPXInputStream *input, const unsigned dataSize);
++	WPXSubDocument(uint8_t * streamData, const unsigned dataSize);
+ 	virtual ~WPXSubDocument();
+ 	WPXMemoryInputStream *getStream() const { return m_stream;}
+ 
