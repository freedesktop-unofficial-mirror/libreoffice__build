Index: solenv/bin/build.pl
===================================================================
RCS file: /cvs/tools/solenv/bin/build.pl,v
retrieving revision 1.124
diff -u -p -u -r1.124 build.pl
--- solenv/bin/build.pl	1 Nov 2004 15:32:15 -0000	1.124
+++ solenv/bin/build.pl	15 Nov 2004 15:03:44 -0000
@@ -440,7 +440,32 @@ sub store_build_list_content {
         $build_lists_hash{$module} = $xml_list;
     } else {
         if (open (BUILD_LST, $build_list_path)) {
-            my @build_lst = <BUILD_LST>;
+            my @build_lst = ();
+	    my $lastline = '';
+	    while (<BUILD_LST>) {
+		# comments
+		if ($_ =~ /#/) {
+		    if ($`) {
+			$_ = $`;
+		    } else {
+			next;
+		    };
+		};
+
+		# Eliminate newlines
+		s/[\r\n]*//g;
+
+		# continuation
+		$_ = $lastline . $_;
+		$lastline = '';
+		if (m/\\\s*$/) {
+		    s/\\//g;
+		    $lastline = $_;
+		    chomp $lastline;
+		    next;
+		}
+		push @build_lst, $_;
+	    }
             $build_lists_hash{$module} = \@build_lst;
             close BUILD_LST;
             return;
@@ -461,14 +486,6 @@ sub get_parents_array {
         return $build_list_ref->getModuleDependencies(\@modes_array);
     };
     foreach (@$build_list_ref) {
-        if ($_ =~ /#/) {
-            if ($`) {
-                $_ = $`;
-            } else {
-                next;
-            };
-        };
-        s/\r\n//;
         if ($_ =~ /\:+\s+/) {
             return pick_for_build_type($');
         };
@@ -547,11 +564,6 @@ sub get_deps_hash {
     } else {
         get_prj_platform($build_list_ref);
         foreach (@$build_list_ref) {
-            if ($_ =~ /#/o) {
-                next if (!$`);
-                $_ = $`;
-            };
-            s/\r\n//;
             if ($_ =~ /nmake/o) {
                 my ($Platform, $Dependencies, $Dir, $DirAlias);
                 my %deps_hash = ();
@@ -2019,22 +2031,60 @@ sub get_build_modes {
 };
 
 #
+# Extract a boolean value from an environment variable
+#
+sub get_env_boolean($$) {
+    my $var_key = shift;
+    my $default = shift;
+    my $var = $ENV{$var_key};
+    
+    defined $var || return $default;
+    $var eq '' && return $default;
+
+    if ($var =~ m/yes/i || $var =~ m/true/i ||
+	$var =~ m/enabled/i || $var =~ m/^[1-9]+$/) {
+	return '1';
+    }
+    elsif ($var =~ m/no/i || $var =~ m/false/i ||
+	   $var =~ m/disabled/i || $var =~ m/^0+$/) {
+	return '';
+    }
+
+    return $default;
+}
+
+#
 # pick only the modules, that should be built for
 # build types from %build_modes
 #
 sub pick_for_build_type {
     my $modules = shift;
+    $modules =~ s/\!/ \! /g;
     my @mod_array = split(/\s+/, $modules);
     print_error("Wrongly written dependencies string:\n $modules\n") if ($mod_array[$#mod_array] ne 'NULL');
     pop @mod_array;
     my @modules_to_build;
 #my $new_modules = '';
+    my $negate = 0;
     foreach (@mod_array) {
-        if (/(\w+):(\S+)/o) {
+	if ($_ eq '!') {
+	    $negate = !$negate;
+	    next;
+	}
+	if (/\$\((\w+)\):(\S+)/o) {
+	    my $env = get_env_boolean($1,1);
+	    if (($negate && !$env) ||
+		(!$negate && $env)) {
+		push(@modules_to_build, $2);
+	    }
+	    $negate = 0;
+	    next;
+	} elsif (/(\w+):(\S+)/o) {
             push(@modules_to_build, $2) if (defined $build_modes{$1});
             next;
         };
 #next if (/^NULL$/);
+	die "Can't negate unconditional builds" if $negate;
         push(@modules_to_build, $_);
     };
     return @modules_to_build;

