diff -rup ../src680-m237.orig/slideshow/source/engine/OGLTrans/OGLTrans_TransitionerImpl.cxx slideshow/source/engine/OGLTrans/OGLTrans_TransitionerImpl.cxx
--- ../src680-m237.orig/slideshow/source/engine/OGLTrans/OGLTrans_TransitionerImpl.cxx	2007-12-05 15:02:57.000000000 +0100
+++ slideshow/source/engine/OGLTrans/OGLTrans_TransitionerImpl.cxx	2007-12-05 15:11:51.000000000 +0100
@@ -289,9 +289,12 @@ void OGLTransitionerImpl::initWindowFrom
     glMaterialfv(GL_FRONT,GL_DIFFUSE,materialDiffuse);
     glEnable(GL_LIGHT0);
     glEnable(GL_NORMALIZE);
-        
-    if( EnteringBytes.hasElements() && EnteringBytes.hasElements())
+
+    if( LeavingBytes.hasElements() && EnteringBytes.hasElements())
        GLInitSlides();//we already have uninitialized slides, let's initialize 
+
+    if (pTransition)
+        pTransition->prepare ();
 }
 
 void OGLTransitionerImpl::setSlides( const uno::Reference< rendering::XBitmap >& xLeavingSlide, 
@@ -333,8 +336,8 @@ void OGLTransitionerImpl::GLInitSlides()
     glMatrixMode(GL_PROJECTION);
     glLoadIdentity();
     double EyePos(10.0);
-    double RealF(-1.0);
-    double RealN(1.0);
+    double RealF(1.0);
+    double RealN(-1.0);
     double RealL(-1.0);
     double RealR(1.0);
     double RealB(-1.0);
@@ -346,7 +349,9 @@ void OGLTransitionerImpl::GLInitSlides()
     double ClipB(RealB*8.0);
     double ClipT(RealT*8.0);
     //This scaling is to take the plane with BottomLeftCorner(-1,-1,0) and TopRightCorner(1,1,0) and map it to the screen after the perspective division.
-    glScaled( 1.0 / ( ( ( RealR * 2.0 * ClipN ) / ( EyePos * ( ClipR - ClipL ) ) ) - ( ( ClipR + ClipL ) / ( ClipR - ClipL ) ) ), 1 / ( ( ( RealT * 2.0 * ClipN ) / ( EyePos * ( ClipT - ClipB ) ) ) - ( ( ClipT + ClipB ) / ( ClipT - ClipB ) ) ) , 1.0 );
+    glScaled( 1.0 / ( ( ( RealR * 2.0 * ClipN ) / ( EyePos * ( ClipR - ClipL ) ) ) - ( ( ClipR + ClipL ) / ( ClipR - ClipL ) ) ),
+              1.0 / ( ( ( RealT * 2.0 * ClipN ) / ( EyePos * ( ClipT - ClipB ) ) ) - ( ( ClipT + ClipB ) / ( ClipT - ClipB ) ) ),
+              1.0 );
 	glFrustum(ClipL,ClipR,ClipB,ClipT,ClipN,ClipF);
     glMatrixMode(GL_MODELVIEW);
     glLoadIdentity();
@@ -449,11 +454,12 @@ void SAL_CALL OGLTransitionerImpl::updat
         
     glEnable(GL_DEPTH_TEST);
 	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
-	//glLoadIdentity();
+
 	if(pTransition)
 	    pTransition->display( nTime , GLleavingSlide , GLenteringSlide , 
-                              SlideSize.Width/static_cast<double>(GLWin.Width),
-                              SlideSize.Height/static_cast<double>(GLWin.Height) );
+                              SlideSize.Width, SlideSize.Height,
+                              static_cast<double>(GLWin.Width),
+                              static_cast<double>(GLWin.Height) );
 	unx::glXSwapBuffers(GLWin.dpy, GLWin.win);
 	if( pWindow )
         pWindow->Show();
@@ -465,6 +471,10 @@ void OGLTransitionerImpl::disposing()
     osl::MutexGuard const guard( m_aMutex );
     glDeleteTextures(1,&GLleavingSlide);
     glDeleteTextures(1,&GLenteringSlide);
+
+    if (pTransition)
+        pTransition->finish();
+
     if(GLWin.ctx)
 	{
 	    OSL_ENSURE( glXMakeCurrent(GLWin.dpy, None, NULL) , "Error releasing glX context" );
@@ -539,10 +549,22 @@ public:
             case animations::TransitionSubType::CORNERSIN :  
                 pTransition->makeInsideCubeFaceToLeft();
                 break;
+            case animations::TransitionSubType::LEFTTORIGHT :
+                pTransition->makeFallLeaving();
+                break;
+            case animations::TransitionSubType::TOPTOBOTTOM :
+                pTransition->makeTurnAround();
+                break;
+            case animations::TransitionSubType::TOPRIGHT :
+                pTransition->makeTurnDown();
+                break;
+            case animations::TransitionSubType::TOPLEFT :
+                pTransition->makeIris();
+                break;
             default:
                 return uno::Reference< presentation::XTransition >();
         }
-        
+
         rtl::Reference<OGLTransitionerImpl> xRes(
             new OGLTransitionerImpl(pTransition) );
         if( view.is () ) {
Only in slideshow/source/engine/OGLTrans/: OGLTrans_TransitionerImpl.cxx.orig
Only in slideshow/source/engine/OGLTrans/: OGLTrans_TransitionerImpl.cxx.rej
diff -rup ../src680-m237.orig/slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx
--- ../src680-m237.orig/slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx	2007-11-09 11:17:00.000000000 +0100
+++ slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.cxx	2007-12-05 15:11:51.000000000 +0100
@@ -42,6 +42,9 @@ void OGLTransitionImpl::clear()
     OverallOperations.clear();
     maLeavingSlidePrimitives.clear();
     maEnteringSlidePrimitives.clear();
+    for(unsigned int i(0); i < maSceneObjects.size(); ++i)
+        delete maSceneObjects[i];
+    maSceneObjects.clear();
 }
 
 OGLTransitionImpl::~OGLTransitionImpl()
@@ -49,8 +52,28 @@ OGLTransitionImpl::~OGLTransitionImpl()
     clear();
 }
 
-void OGLTransitionImpl::display( double nTime, ::sal_Int32 glLeavingSlideTex, ::sal_Int32 glEnteringSlideTex , double SlideWidthScale, double SlideHeightScale)
+void OGLTransitionImpl::prepare()
 {
+    for(unsigned int i(0); i < maSceneObjects.size(); ++i) {
+        maSceneObjects[i]->prepare();
+    }
+}
+
+void OGLTransitionImpl::finish()
+{
+    for(unsigned int i(0); i < maSceneObjects.size(); ++i) {
+        maSceneObjects[i]->finish();
+    }
+}
+
+void OGLTransitionImpl::display( double nTime, ::sal_Int32 glLeavingSlideTex, ::sal_Int32 glEnteringSlideTex,
+                                 double SlideWidth, double SlideHeight, double DispWidth, double DispHeight )
+{
+    double SlideWidthScale, SlideHeightScale;
+
+    SlideWidthScale = SlideWidth/DispWidth;
+    SlideHeightScale = SlideHeight/DispHeight;
+
     glPushMatrix();
     glEnable(GL_TEXTURE_2D);
     //TODO change to foreach
@@ -62,17 +85,21 @@ void OGLTransitionImpl::display( double 
     glBindTexture(GL_TEXTURE_2D, glEnteringSlideTex);
     for(unsigned int i(0); i < maEnteringSlidePrimitives.size(); ++i)
         maEnteringSlidePrimitives[i].display(nTime,SlideWidthScale,SlideHeightScale);
+
+    for(unsigned int i(0); i < maSceneObjects.size(); ++i)
+        maSceneObjects[i]->display(nTime, SlideWidth, SlideHeight, DispWidth, DispHeight);
+    
+
     glPopMatrix();
 }
 
-void Primitive::display(double nTime, double SlideWidthScale, double SlideHeightScale)
+void Primitive::display(double nTime, double WidthScale, double HeightScale)
 {
     glPushMatrix();
-    glEnable(GL_TEXTURE_2D);
     for(unsigned int i(0); i < Operations.size(); ++i)
-        Operations[i]->interpolate( nTime ,SlideWidthScale,SlideHeightScale);
-    glScaled(SlideWidthScale,SlideHeightScale,1);
-    
+        Operations[i]->interpolate( nTime ,WidthScale,HeightScale);
+    glScaled(WidthScale,HeightScale,1);
+
     glEnableClientState( GL_VERTEX_ARRAY );
     if(!Normals.empty())
     {
@@ -80,9 +107,9 @@ void Primitive::display(double nTime, do
         glEnableClientState( GL_NORMAL_ARRAY );
     }
     glEnableClientState( GL_TEXTURE_COORD_ARRAY );
-    glTexCoordPointer( 2 , GL_DOUBLE , 0 , &TexCoords[0] );
-    glVertexPointer( 3 , GL_DOUBLE , 0 , &Vertices[0] );
-    glDrawArrays( GL_TRIANGLES , 0 , Vertices.size() );
+    glTexCoordPointer( 2, GL_DOUBLE, 0, &TexCoords[0] );
+    glVertexPointer( 3, GL_DOUBLE, 0, &Vertices[0] );
+    glDrawArrays( GL_TRIANGLES, 0, Vertices.size() );
     glPopMatrix();
 }
 
@@ -92,6 +119,60 @@ Primitive::~Primitive()
         delete Operations[i];
 }
 
+void SceneObject::display(double nTime, double /* SlideWidth */, double /* SlideHeight */, double DispWidth, double DispHeight )
+{
+    for(unsigned int i(0); i < maPrimitives.size(); ++i) {
+        // fixme: allow various model spaces, now we make it so that
+        // it is regular -1,-1 to 1,1, where the whole display fits in
+        glPushMatrix();
+        if (DispHeight > DispWidth)
+            glScaled(DispHeight/DispWidth, 1, 1);
+        else
+            glScaled(1, DispWidth/DispHeight, 1);
+        maPrimitives[i].display(nTime, 1, 1);
+        glPopMatrix();
+    }
+}
+
+void SceneObject::pushPrimitive(Primitive p)
+{
+    maPrimitives.push_back(p);
+}
+
+SceneObject::SceneObject()
+    : maPrimitives()
+{
+}
+
+Iris::Iris()
+    : SceneObject ()
+{
+}
+
+void Iris::display(double nTime, double SlideWidth, double SlideHeight, double DispWidth, double DispHeight )
+{
+    glBindTexture(GL_TEXTURE_2D, maTexture);
+    SceneObject::display(nTime, SlideWidth, SlideHeight, DispWidth, DispHeight);
+}
+
+void Iris::prepare()
+{
+    static GLubyte img[3] = { 80, 80, 80 };
+    
+    glGenTextures(1, &maTexture);
+    glBindTexture(GL_TEXTURE_2D, maTexture);
+    glTexImage2D(GL_TEXTURE_2D, 0, 3, 1, 1, 0, GL_RGB, GL_UNSIGNED_BYTE, img);
+    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT);
+    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT);
+    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
+}
+
+void Iris::finish()
+{
+    glDeleteTextures(1, &maTexture);
+}
+
 void OGLTransitionImpl::makeOutsideCubeFaceToLeft()
 {
     clear();
@@ -102,11 +183,11 @@ void OGLTransitionImpl::makeOutsideCubeF
 
     maLeavingSlidePrimitives.push_back(Slide);
 
-    Slide.Operations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,-1),-90,false,0.0,1.0));
+    Slide.Operations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,-1),90,false,0.0,1.0));
 
     maEnteringSlidePrimitives.push_back(Slide);
 
-    OverallOperations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,-1),90,true,0.0,1.0));
+    OverallOperations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,-1),-90,true,0.0,1.0));
 }
 
 void OGLTransitionImpl::makeInsideCubeFaceToLeft()
@@ -119,11 +200,121 @@ void OGLTransitionImpl::makeInsideCubeFa
 
     maLeavingSlidePrimitives.push_back(Slide);
 
-    Slide.Operations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,1),90,false,0.0,1.0));
+    Slide.Operations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,1),-90,false,0.0,1.0));
 
     maEnteringSlidePrimitives.push_back(Slide);
     
-    OverallOperations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,1),-90,true,0.0,1.0));
+    OverallOperations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,1),90,true,0.0,1.0));
+}
+
+void OGLTransitionImpl::makeFallLeaving()
+{
+    clear();
+    Primitive Slide;
+    
+    Slide.pushTriangle(basegfx::B2DVector(0,0),basegfx::B2DVector(1,0),basegfx::B2DVector(0,1));
+    Slide.pushTriangle(basegfx::B2DVector(1,0),basegfx::B2DVector(0,1),basegfx::B2DVector(1,1));
+    maEnteringSlidePrimitives.push_back(Slide);
+
+    Slide.Operations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(1,0,0),basegfx::B3DVector(0,-1,0), 90,true,0.0,1.0));
+    maLeavingSlidePrimitives.push_back(Slide);
+}
+
+void OGLTransitionImpl::makeTurnAround()
+{
+    clear();
+    Primitive Slide;
+    
+    Slide.pushTriangle(basegfx::B2DVector(0,0),basegfx::B2DVector(1,0),basegfx::B2DVector(0,1));
+    Slide.pushTriangle(basegfx::B2DVector(1,0),basegfx::B2DVector(0,1),basegfx::B2DVector(1,1));
+    maLeavingSlidePrimitives.push_back(Slide);
+
+    Slide.Operations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0,1,0),basegfx::B3DVector(0,0,0),-180,false,0.0,1.0));
+    maEnteringSlidePrimitives.push_back(Slide);
+
+    OverallOperations.push_back(new STranslate(basegfx::B3DVector(0, 0, -1.5),true, 0, 0.5));
+    OverallOperations.push_back(new STranslate(basegfx::B3DVector(0, 0, 1.5), true, 0.5, 1));
+    OverallOperations.push_back(new RotateAndScaleDepthByWidth(basegfx::B3DVector(0, 1, 0),basegfx::B3DVector(0, 0, 0), -180, true, 0.0, 1.0));
+}
+
+void OGLTransitionImpl::makeTurnDown()
+{
+    clear();
+    Primitive Slide;
+    
+    Slide.pushTriangle(basegfx::B2DVector(0,0),basegfx::B2DVector(1,0),basegfx::B2DVector(0,1));
+    Slide.pushTriangle(basegfx::B2DVector(1,0),basegfx::B2DVector(0,1),basegfx::B2DVector(1,1));
+    maLeavingSlidePrimitives.push_back(Slide);
+
+    Slide.Operations.push_back(new STranslate(basegfx::B3DVector(0, 0, 0.0001), false, -1.0, 0.0));
+    Slide.Operations.push_back(new SRotate (basegfx::B3DVector(0, 0, 1), basegfx::B3DVector(-1, 1, 0), -90, true, 0.0, 1.0));
+    Slide.Operations.push_back(new SRotate (basegfx::B3DVector(0, 0, 1), basegfx::B3DVector(-1, 1, 0), 90, false, -1.0, 0.0));
+    maEnteringSlidePrimitives.push_back(Slide);
+}
+
+void OGLTransitionImpl::makeIris()
+{
+    clear();
+    Primitive Slide;
+    
+    Slide.pushTriangle (basegfx::B2DVector (0,0), basegfx::B2DVector (1,0), basegfx::B2DVector (0,1));
+    Slide.pushTriangle (basegfx::B2DVector (1,0), basegfx::B2DVector (0,1), basegfx::B2DVector (1,1));
+    maEnteringSlidePrimitives.push_back (Slide);
+
+    Slide.Operations.push_back (new STranslate (basegfx::B3DVector (0, 0, 0.0001), false, -1, 0));
+    Slide.Operations.push_back (new STranslate (basegfx::B3DVector (0, 0, -0.0002), false, 0.5, 1));
+    maLeavingSlidePrimitives.push_back (Slide);
+
+
+    Primitive irisPart, part;
+    int i, nSteps = 24, nParts = 7;
+    double lt = 0, t = 1.0/nSteps, cx, cy, lcx, lcy, lx = 1, ly = 0, x, y, cxo, cyo, lcxo, lcyo, of=2.2, f=1.42;
+
+    for (i=1; i<=nSteps; i++) {
+        x = cos ((3*2*M_PI*t)/nParts);
+        y = -sin ((3*2*M_PI*t)/nParts);
+        cx = (f*x + 1)/2;
+        cy = (f*y + 1)/2;
+        lcx = (f*lx + 1)/2;
+        lcy = (f*ly + 1)/2;
+        cxo = (of*x + 1)/2;
+        cyo = (of*y + 1)/2;
+        lcxo = (of*lx + 1)/2;
+        lcyo = (of*ly + 1)/2;
+        irisPart.pushTriangle (basegfx::B2DVector (lcx, lcy),
+                               basegfx::B2DVector (lcxo, lcyo),
+                               basegfx::B2DVector (cx, cy));
+        irisPart.pushTriangle (basegfx::B2DVector (cx, cy),
+                               basegfx::B2DVector (lcxo, lcyo),
+                               basegfx::B2DVector (cxo, cyo));
+        lx = x;
+        ly = y;
+        lt = t;
+        t += 1.0/nSteps;
+    }
+
+    Iris* pIris = new Iris();
+    double angle = 87;
+
+    for (i = 0; i < nParts; i++) {
+        irisPart.Operations.clear ();
+        double rx, ry;
+
+        rx = cos ((2*M_PI*i)/nParts);
+        ry = sin ((2*M_PI*i)/nParts);
+        irisPart.Operations.push_back (new SRotate (basegfx::B3DVector(0, 0, 1), basegfx::B3DVector(rx, ry, 0),  angle, true, 0.0, 0.5));
+        irisPart.Operations.push_back (new SRotate (basegfx::B3DVector(0, 0, 1), basegfx::B3DVector(rx, ry, 0), -angle, true, 0.5, 1));
+        if (i > 0) {
+            irisPart.Operations.push_back (new STranslate (basegfx::B3DVector(rx, ry, 0),  false, -1, 0));
+            irisPart.Operations.push_back (new SRotate (basegfx::B3DVector(0, 0, 1), basegfx::B3DVector(0, 0, 0), i*360.0/nParts, false, -1, 0));
+            irisPart.Operations.push_back (new STranslate (basegfx::B3DVector(-1, 0, 0),  false, -1, 0));
+        }
+        irisPart.Operations.push_back(new STranslate(basegfx::B3DVector(0, 0, 1), false, -2, 0.0));
+        irisPart.Operations.push_back (new SRotate (basegfx::B3DVector(1, .5, 0), basegfx::B3DVector(1, 0, 0), -30, false, -1, 0));
+        pIris->pushPrimitive (irisPart);
+    }
+
+    maSceneObjects.push_back (pIris);
 }
 
 // TODO(Q3): extract to basegfx
@@ -408,6 +599,27 @@ void RotateAndScaleDepthByWidth::interpo
     glTranslated(-SlideWidthScale*origin.getX(),-SlideHeightScale*origin.getY(),-SlideWidthScale*origin.getZ());
 }
 
+SEllipseTranslate::SEllipseTranslate(double dWidth, double dHeight, const basegfx::B3DVector& vOrigin, double dStartPosition, double dEndPosition, bool bInter, double T0, double T1) : origin(vOrigin)
+{
+    nT0 = T0;
+    nT1 = T1;
+    bInterpolate = bInter;
+    width = dWidth;
+    height = dHeight;
+    startPosition = dStartPosition;
+    endPosition = dEndPosition;
+}
+
+void SEllipseTranslate::interpolate(double t,double SlideWidthScale,double SlideHeightScale)
+{
+    if(t <= nT0)
+        return;
+    if(!bInterpolate || t > nT1)
+        t = nT1;
+    t = intervalInter(t,nT0,nT1);
+    glTranslated(SlideWidthScale*t*origin.getX(),SlideHeightScale*t*origin.getY(),t*origin.getZ());
+}
+
 STranslate* STranslate::clone()
 {
     return new STranslate(*this);
@@ -422,6 +634,11 @@ SScale* SScale::clone()
     return new SScale(*this);
 }
 
+SEllipseTranslate* SEllipseTranslate::clone()
+{
+    return new SEllipseTranslate(*this);
+}
+
 RotateAndScaleDepthByWidth* RotateAndScaleDepthByWidth::clone()
 {
     return new RotateAndScaleDepthByWidth(*this);
@@ -494,4 +711,3 @@ void Primitive::pushTriangle(const baseg
     Normals.push_back(basegfx::B3DVector(0,0,1));//all normals always face the screen when untransformed.
     Normals.push_back(basegfx::B3DVector(0,0,1));//all normals always face the screen when untransformed.
 }
-
diff -rup ../src680-m237.orig/slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx
--- ../src680-m237.orig/slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx	2007-12-05 15:02:49.000000000 +0100
+++ slideshow/source/engine/OGLTrans/OGLTrans_TransitionImpl.hxx	2007-12-05 14:43:55.000000000 +0100
@@ -39,9 +39,11 @@
 #include <basegfx/vector/b3dvector.hxx>
 
 #include <vector>
+#include <GL/gl.h>
 
 class Primitive;
 class Operation;
+class SceneObject;
 
 /** OpenGL 3D Transition class. It implicitly is constructed from XOGLTransition
 
@@ -52,17 +54,25 @@ class OGLTransitionImpl
 public:
     OGLTransitionImpl() :
         maLeavingSlidePrimitives(),
-        maEnteringSlidePrimitives()
+        maEnteringSlidePrimitives(),
+        maSceneObjects()
     {}
 
     ~OGLTransitionImpl();
     
-    void display( double nTime, ::sal_Int32 glLeavingSlideTex, ::sal_Int32 glEnteringSlideTex , double SlideWidthScale, double SlideHeightScale);
+    void prepare();
+    void display( double nTime, ::sal_Int32 glLeavingSlideTex, ::sal_Int32 glEnteringSlideTex, double SlideWidth, double SlideHeight, double DispWidth, double DispHeight);
+    void finish();
+
     void makeOutsideCubeFaceToLeft();
     void makeInsideCubeFaceToLeft();
     void makeNByMTileFlip( ::sal_uInt16 n, ::sal_uInt16 m );
     void makeRevolvingCircles( ::sal_uInt16 nCircles , ::sal_uInt16 nPointsOnCircles );
     void makeHelix( ::sal_uInt16 nRows );
+    void makeFallLeaving();
+    void makeTurnAround();
+    void makeTurnDown();
+    void makeIris();
 
 private:
     /** clears all the primitives and operations
@@ -77,11 +87,46 @@ private:
 	*/
     std::vector<Primitive> maEnteringSlidePrimitives;
     
+    /** All the surrounding scene objects
+	*/
+    std::vector<SceneObject*> maSceneObjects;
+
     /** All the operations that should be applied to both leaving and entering slide primitives. These operations will be called in the order they were pushed back in. In OpenGL this effectively uses the operations in the opposite order they were pushed back.
 	*/
 	std::vector<Operation*> OverallOperations;
 };
 
+class SceneObject
+{
+public:
+    SceneObject();
+
+    virtual void prepare() {};
+    virtual void display(double nTime, double SlideWidth, double SlideHeight, double DispWidth, double DispHeight);
+    virtual void finish() {};
+
+    void pushPrimitive (Primitive p);
+
+protected:
+    /** All the surrounding scene primitives
+	*/
+    std::vector<Primitive> maPrimitives;
+};
+
+class Iris : public SceneObject
+{
+public:
+    Iris ();
+
+    virtual void prepare();
+    virtual void display(double nTime, double SlideWidth, double SlideHeight, double DispWidth, double DispHeight);
+    virtual void finish();
+
+private:
+
+    GLuint maTexture;
+};
+
 /** This class is a list of Triangles that will share Operations, and could possibly share  
 */
 class Primitive
@@ -301,6 +346,46 @@ private:
 	basegfx::B3DVector vector;
 };
 
+/** translation transformation
+*/
+class SEllipseTranslate: public Operation
+{
+public:
+	void interpolate(double t,double SlideWidthScale,double SlideHeightScale);
+    SEllipseTranslate* clone();
+	
+	/** Constructor
+	    
+	    @param Vector
+	    vector to translate
+	    
+	    @param bInter
+	    see Operation
+	    
+	    @param T0
+	    transformation starting time
+	    
+	    @param T1
+	    transformation ending time
+	
+	*/
+	SEllipseTranslate(double dWidth, double dHeight, const basegfx::B3DVector& Origin, double dStartPosition, double dEndPosition, bool bInter, double T0, double T1);
+	~SEllipseTranslate(){}
+private:
+    /** width and length of the ellipse
+     */
+    double width, height;
+
+    /** start origin
+    */
+	basegfx::B3DVector origin;
+
+    /** start and end position on the ellipse <0,1>
+     */
+    double startPosition;
+    double endPosition;
+};
+
 /** Same as SRotate, except the depth is scaled by the width of the slide divided by the width of the window.
 */
 class RotateAndScaleDepthByWidth: public Operation
