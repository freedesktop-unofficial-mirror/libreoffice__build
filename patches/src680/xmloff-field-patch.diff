Index: xmloff/inc/xmlnmspe.hxx
===================================================================
RCS file: /cvs/xml/xmloff/inc/xmlnmspe.hxx,v
retrieving revision 1.18
diff -c -r1.18 xmlnmspe.hxx
*** xmloff/inc/xmlnmspe.hxx	6 Jul 2007 10:08:59 -0000	1.18
--- xmloff/inc/xmlnmspe.hxx	21 Jan 2008 08:29:19 -0000
***************
*** 98,101 ****
--- 98,105 ----
  XML_OLD_NAMESPACE( TABLE,	5U )
  XML_OLD_NAMESPACE( META,	6U )
  
+ // experimental namespaces
+ XML_NAMESPACE( FIELD,			100U )
+ 
+ 
  #endif	//  _XMLOFF_XMLNMSPE_HXX
Index: xmloff/inc/xmloff/txtimp.hxx
===================================================================
RCS file: /cvs/xml/xmloff/inc/xmloff/txtimp.hxx,v
retrieving revision 1.6.6.1
diff -c -r1.6.6.1 txtimp.hxx
*** xmloff/inc/xmloff/txtimp.hxx	24 Aug 2007 12:12:15 -0000	1.6.6.1
--- xmloff/inc/xmloff/txtimp.hxx	21 Jan 2008 08:29:19 -0000
***************
*** 78,83 ****
--- 78,88 ----
  #include <xmloff/uniref.hxx>
  #endif
  
+ #ifndef _COM_SUN_STAR_TEXT_XFORMFIELD_HPP_
+ #include <com/sun/star/text/XFormField.hpp>
+ #endif
+ 
+ 
  class SvXMLImport;
  class SvXMLStylesContext;
  class XMLTextListBlockContext;
***************
*** 265,270 ****
--- 270,280 ----
  	XML_TOK_DRAW_DATE_TIME,
  	XML_TOK_TEXT_PAGE_CONTINUATION,
  
+ 
+ 	XML_TOK_TEXT_FIELDMARK,
+ 	XML_TOK_TEXT_FIELDMARK_START,
+ 	XML_TOK_TEXT_FIELDMARK_END,
+ 
  	XML_TOK_TEXT_P_ELEM_END=XML_TOK_UNKNOWN
  };
  
***************
*** 418,423 ****
--- 428,435 ----
  				::com::sun::star::uno::Reference<
  					::com::sun::star::text::XTextRange>,
                  ::comphelper::UStringLess> aBookmarkStartRanges;
+ 	typedef ::std::vector< ::rtl::OUString> BookmarkVector_t;
+ 	BookmarkVector_t aBookmarkVector;
  
  	/// backpatcher for references to footnotes and endnotes
  	XMLPropertyBackpatcher<sal_Int16> * pFootnoteBackpatcher;
***************
*** 484,489 ****
--- 496,509 ----
  	// Code is implemented in XMLPropertyBackpatcher.cxx
  	SAL_DLLPRIVATE void _FinitBackpatcher();
  
+ 	typedef ::std::pair< ::rtl::OUString, ::rtl::OUString> field_name_type_t;
+ 	typedef ::std::pair< ::rtl::OUString, ::rtl::OUString > field_param_t;
+ 	typedef ::std::vector< field_param_t > field_params_t;
+ 	typedef ::std::pair< field_name_type_t, field_params_t > field_stack_item_t;
+ 	typedef ::std::stack< field_stack_item_t > field_stack_t;
+ 
+ 	field_stack_t aFieldStack;
+ 
  protected:
  	virtual SvXMLImportContext *CreateTableChildContext(
  				SvXMLImport& rImport,
***************
*** 754,759 ****
--- 774,791 ----
  				::com::sun::star::text::XTextRange> & rRange,
  		const ::rtl::OUString sName);
  
+ 	::rtl::OUString FindActiveBookmarkName();
+ 	::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > GetRangeFor(::rtl::OUString &sName);
+ 
+ 	void pushFieldCtx( ::rtl::OUString name, ::rtl::OUString type );
+ 	void popFieldCtx();
+ 	void addFieldParam( ::rtl::OUString name, ::rtl::OUString value );
+ 	void setCurrentFieldParamsTo(::com::sun::star::uno::Reference< ::com::sun::star::text::XFormField> &xFormField);
+ 	::rtl::OUString getCurrentFieldName();
+ 	::rtl::OUString getCurrentFieldType();
+ 	bool hasCurrentFieldCtx();
+ 
+ 
  	/// insert new footnote ID.
  	/// Also fixup open references from the backpatch list to this ID.
  	// Code is implemented in XMLPropertyBackpatcher.cxx
Index: xmloff/inc/xmloff/txtparae.hxx
===================================================================
RCS file: /cvs/xml/xmloff/inc/xmloff/txtparae.hxx,v
retrieving revision 1.3
diff -c -r1.3 txtparae.hxx
*** xmloff/inc/xmloff/txtparae.hxx	6 Jul 2007 12:09:12 -0000	1.3
--- xmloff/inc/xmloff/txtparae.hxx	21 Jan 2008 08:29:19 -0000
***************
*** 231,237 ****
  	const ::rtl::OUString sVisitedCharStyleName;
  	const ::rtl::OUString sWidth;
  	const ::rtl::OUString sWidthType;
! 
  
  	SinglePropertySetInfoCache aCharStyleNamesPropInfoCache;
  
--- 231,239 ----
  	const ::rtl::OUString sVisitedCharStyleName;
  	const ::rtl::OUString sWidth;
  	const ::rtl::OUString sWidthType;
! 	const ::rtl::OUString sTextFieldStart;
! 	const ::rtl::OUString sTextFieldEnd;
! 	const ::rtl::OUString sTextFieldStartEnd;
  
  	SinglePropertySetInfoCache aCharStyleNamesPropInfoCache;
  
Index: xmloff/inc/xmloff/xmltoken.hxx
===================================================================
RCS file: /cvs/xml/xmloff/inc/xmloff/xmltoken.hxx,v
retrieving revision 1.7
diff -c -r1.7 xmltoken.hxx
*** xmloff/inc/xmloff/xmltoken.hxx	3 Aug 2007 12:52:56 -0000	1.7
--- xmloff/inc/xmloff/xmltoken.hxx	21 Jan 2008 08:29:20 -0000
***************
*** 2994,2999 ****
--- 2994,3006 ----
          XML_CHARACTER_SET,
          XML_APPLICATION_CONNECTION_SETTINGS,
          XML_TABLE_INCLUDE_FILTER,
+ 
+         XML_FIELDMARK, 
+         XML_FIELDMARK_START, 
+         XML_FIELDMARK_END, 
+         XML_N_FIELD, 
+         XML_NP_FIELD, 
+ 	
  		XML_TOKEN_END
      };
  
Index: xmloff/source/core/xmlexp.cxx
===================================================================
RCS file: /cvs/xml/xmloff/source/core/xmlexp.cxx,v
retrieving revision 1.132
diff -c -r1.132 xmlexp.cxx
*** xmloff/source/core/xmlexp.cxx	3 Aug 2007 12:53:22 -0000	1.132
--- xmloff/source/core/xmlexp.cxx	21 Jan 2008 08:29:20 -0000
***************
*** 216,221 ****
--- 216,223 ----
  #include "xformsexport.hxx"
  #endif
  
+ #include <assert.h>
+ 
  using namespace ::rtl;
  using namespace ::osl;
  using namespace ::com::sun::star;
***************
*** 400,405 ****
--- 402,408 ----
  		mpNamespaceMap->Add( GetXMLToken(XML_NP_XFORMS_1_0), GetXMLToken(XML_N_XFORMS_1_0), XML_NAMESPACE_XFORMS );
  		mpNamespaceMap->Add( GetXMLToken(XML_NP_XSD), GetXMLToken(XML_N_XSD), XML_NAMESPACE_XSD );
  		mpNamespaceMap->Add( GetXMLToken(XML_NP_XSI), GetXMLToken(XML_N_XSI), XML_NAMESPACE_XSI );
+ 		mpNamespaceMap->Add( GetXMLToken(XML_NP_FIELD), GetXMLToken(XML_N_FIELD), XML_NAMESPACE_FIELD );
  	}
  
  	mxAttrList = (xml::sax::XAttributeList*)mpAttrList;
Index: xmloff/source/core/xmlimp.cxx
===================================================================
RCS file: /cvs/xml/xmloff/source/core/xmlimp.cxx,v
retrieving revision 1.99
diff -c -r1.99 xmlimp.cxx
*** xmloff/source/core/xmlimp.cxx	6 Jul 2007 09:43:26 -0000	1.99
--- xmloff/source/core/xmlimp.cxx	21 Jan 2008 08:29:21 -0000
***************
*** 191,196 ****
--- 191,197 ----
  sal_Char __READONLY_DATA sXML_np__xforms[] = "_xforms";
  sal_Char __READONLY_DATA sXML_np__xsd[] = "_xsd";
  sal_Char __READONLY_DATA sXML_np__xsi[] = "_xsi";
+ sal_Char __READONLY_DATA sXML_np__field[] = "_field";
  
  sal_Char __READONLY_DATA sXML_np__fo_old[] = "__fo";
  sal_Char __READONLY_DATA sXML_np__xlink_old[] = "__xlink";
***************
*** 354,359 ****
--- 355,361 ----
                              XML_NAMESPACE_XFORMS );
  		mpNamespaceMap->Add( OUString( RTL_CONSTASCII_USTRINGPARAM ( sXML_np__ooow ) ), GetXMLToken(XML_N_OOOW), XML_NAMESPACE_OOOW );
  		mpNamespaceMap->Add( OUString( RTL_CONSTASCII_USTRINGPARAM ( sXML_np__oooc ) ), GetXMLToken(XML_N_OOOC), XML_NAMESPACE_OOOC );
+ 		mpNamespaceMap->Add( OUString( RTL_CONSTASCII_USTRINGPARAM ( sXML_np__field ) ), GetXMLToken(XML_N_FIELD), XML_NAMESPACE_FIELD );
  	}
  
  	msPackageProtocol = OUString( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.Package:" ) );
Index: xmloff/source/core/xmltoken.cxx
===================================================================
RCS file: /cvs/xml/xmloff/source/core/xmltoken.cxx,v
retrieving revision 1.110
diff -c -r1.110 xmltoken.cxx
*** xmloff/source/core/xmltoken.cxx	3 Aug 2007 12:53:36 -0000	1.110
--- xmloff/source/core/xmltoken.cxx	21 Jan 2008 08:29:22 -0000
***************
*** 2951,2956 ****
--- 2951,2963 ----
          TOKEN( "soft-page-break",                 XML_SOFT_PAGE_BREAK ),
          TOKEN( "use-soft-page-breaks",            XML_USE_SOFT_PAGE_BREAKS ),
  
+         TOKEN( "fieldmark",                        XML_FIELDMARK ),
+         TOKEN( "fieldmark-start",                    XML_FIELDMARK_START ),
+         TOKEN( "fieldmark-end",                    XML_FIELDMARK_END ),
+ 		TOKEN( "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:field:1.0",   XML_N_FIELD ),
+ 		TOKEN( "field",                     XML_NP_FIELD ),
+ 
+ 
  #if OSL_DEBUG_LEVEL > 0
          { 0, NULL, NULL,                       XML_TOKEN_END }
  #else
Index: xmloff/source/text/XMLTextMarkImportContext.cxx
===================================================================
RCS file: /cvs/xml/xmloff/source/text/XMLTextMarkImportContext.cxx,v
retrieving revision 1.11
diff -c -r1.11 XMLTextMarkImportContext.cxx
*** xmloff/source/text/XMLTextMarkImportContext.cxx	31 Jul 2007 17:35:27 -0000	1.11
--- xmloff/source/text/XMLTextMarkImportContext.cxx	21 Jan 2008 08:29:23 -0000
***************
*** 88,93 ****
--- 88,97 ----
  #include <com/sun/star/container/XNamed.hpp>
  #endif
  
+ #ifndef _COM_SUN_STAR_TEXT_XFORMFIELD_HPP_
+ #include <com/sun/star/text/XFormField.hpp>
+ #endif
+ 
  
  using namespace ::rtl;
  using namespace ::com::sun::star::text;
***************
*** 97,103 ****
  using namespace ::com::sun::star::container;
  using namespace ::com::sun::star::xml::sax;
  using namespace ::xmloff::token;
! 	
  TYPEINIT1( XMLTextMarkImportContext, SvXMLImportContext);
  
  XMLTextMarkImportContext::XMLTextMarkImportContext(
--- 101,150 ----
  using namespace ::com::sun::star::container;
  using namespace ::com::sun::star::xml::sax;
  using namespace ::xmloff::token;
! 
! 
! XMLFieldParamImportContext::XMLFieldParamImportContext(
! 	SvXMLImport& rImport, 
! 	XMLTextImportHelper& rHlp,
! 	sal_uInt16 nPrefix,
! 	const OUString& rLocalName ) :
! 		SvXMLImportContext(rImport, nPrefix, rLocalName),
! 		rHelper(rHlp)
! {
! }
! 
! 
! void XMLFieldParamImportContext::StartElement(const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList> & xAttrList)
! {
! 	SvXMLImport& rImport = GetImport();
! 	::rtl::OUString sName;
! 	::rtl::OUString sValue;
! 
! 	sal_Int16 nLength = xAttrList->getLength();
! 	for(sal_Int16 nAttr = 0; nAttr < nLength; nAttr++)
! 	{
! 		OUString sLocalName;
! 		sal_uInt16 nPrefix = rImport.GetNamespaceMap().
! 			GetKeyByAttrName( xAttrList->getNameByIndex(nAttr), 
! 							  &sLocalName );
! 
! 		if ( (XML_NAMESPACE_FIELD == nPrefix) &&
! 			 IsXMLToken(sLocalName, XML_NAME)   )
! 		{
! 			sName = xAttrList->getValueByIndex(nAttr);
! 		}
! 		if ( (XML_NAMESPACE_FIELD == nPrefix) &&
! 			 IsXMLToken(sLocalName, XML_VALUE)   )
! 		{
! 			sValue = xAttrList->getValueByIndex(nAttr);
! 		}
! 	}
! 	if (rHelper.hasCurrentFieldCtx() && sName.getLength()>0) {
! 		rHelper.addFieldParam(sName, sValue);
! 	}
! }
! 
! 
  TYPEINIT1( XMLTextMarkImportContext, SvXMLImportContext);
  
  XMLTextMarkImportContext::XMLTextMarkImportContext(
***************
*** 111,117 ****
  }
  
  enum lcl_MarkType { TypeReference, TypeReferenceStart, TypeReferenceEnd,
! 					TypeBookmark, TypeBookmarkStart, TypeBookmarkEnd };
  
  static SvXMLEnumMapEntry __READONLY_DATA lcl_aMarkTypeMap[] =
  {
--- 158,166 ----
  }
  
  enum lcl_MarkType { TypeReference, TypeReferenceStart, TypeReferenceEnd,
! 					TypeBookmark, TypeBookmarkStart, TypeBookmarkEnd,
! 					TypeFieldmark, TypeFieldmarkStart, TypeFieldmarkEnd,
! 				  };
  
  static SvXMLEnumMapEntry __READONLY_DATA lcl_aMarkTypeMap[] =
  {
***************
*** 121,141 ****
  	{ XML_BOOKMARK,				    TypeBookmark },
  	{ XML_BOOKMARK_START,			TypeBookmarkStart },
  	{ XML_BOOKMARK_END,			    TypeBookmarkEnd },
  	{ XML_TOKEN_INVALID,    		0 },
  };
  
  void XMLTextMarkImportContext::StartElement(
  	const Reference<XAttributeList> & xAttrList)
  {
  	const OUString sAPI_reference_mark(
  		RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.ReferenceMark"));
  	const OUString sAPI_bookmark(
  		RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.Bookmark"));
  
! 
! 	OUString sName;
! 
! 	if (FindName(GetImport(), xAttrList, sName))
  	{
  		sal_uInt16 nTmp;
  		if (SvXMLUnitConverter::convertEnum(nTmp, GetLocalName(), 
--- 170,214 ----
  	{ XML_BOOKMARK,				    TypeBookmark },
  	{ XML_BOOKMARK_START,			TypeBookmarkStart },
  	{ XML_BOOKMARK_END,			    TypeBookmarkEnd },
+ 	{ XML_FIELDMARK,				TypeFieldmark },
+ 	{ XML_FIELDMARK_START,			TypeFieldmarkStart },
+ 	{ XML_FIELDMARK_END,			 TypeFieldmarkEnd },
  	{ XML_TOKEN_INVALID,    		0 },
  };
  
  void XMLTextMarkImportContext::StartElement(
  	const Reference<XAttributeList> & xAttrList)
  {
+ 	if (!FindName(GetImport(), xAttrList, sBookmarkName, &sFieldName)) {
+ 		sBookmarkName=OUString();
+ 	}
+ 
+ 	if (IsXMLToken(GetLocalName(), XML_FIELDMARK_END)) {
+ 		sBookmarkName=rHelper.FindActiveBookmarkName();
+ 	} 
+ 	if (IsXMLToken(GetLocalName(), XML_FIELDMARK_START) || IsXMLToken(GetLocalName(), XML_FIELDMARK)) {
+ 		if (sBookmarkName.getLength()==0) {
+ 			sBookmarkName=::rtl::OUString::createFromAscii("Unknown");
+ 		}
+ 		rHelper.pushFieldCtx( sBookmarkName, sFieldName );
+ 	}
+ 
+ }
+ 
+ void XMLTextMarkImportContext::EndElement()
+ {
+ 	SvXMLImportContext::EndElement();
+ 
  	const OUString sAPI_reference_mark(
  		RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.ReferenceMark"));
  	const OUString sAPI_bookmark(
  		RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.Bookmark"));
+ 	const OUString sAPI_fieldmark(
+ 		RTL_CONSTASCII_USTRINGPARAM("org.go-oo.text.Fieldmark"));
+ 	const OUString sAPI_formfieldmark(
+ 		RTL_CONSTASCII_USTRINGPARAM("org.go-oo.text.FormFieldmark"));
  
! 	if (sBookmarkName.getLength()>0) 
  	{
  		sal_uInt16 nTmp;
  		if (SvXMLUnitConverter::convertEnum(nTmp, GetLocalName(), 
***************
*** 147,176 ****
  					// export point reference mark
  					CreateAndInsertMark(GetImport(),
  										sAPI_reference_mark,
! 										sName,
  									   rHelper.GetCursorAsRange()->getStart());
  					break;
  
  				case TypeBookmark:
! 					// export point bookmark
! 					CreateAndInsertMark(GetImport(),
! 										sAPI_bookmark,
! 										sName,
  									   rHelper.GetCursorAsRange()->getStart());
  					break;
  
  				case TypeBookmarkStart:
  					// save XTextRange for later construction of bookmark
  					rHelper.InsertBookmarkStartRange(
! 						sName, rHelper.GetCursorAsRange()->getStart());
  					break;
  
  				case TypeBookmarkEnd:
  				{
  					// get old range, and construct
  					Reference<XTextRange> xStartRange;
  					if (rHelper.FindAndRemoveBookmarkStartRange(xStartRange, 
! 																sName))
  					{
  						Reference<XTextRange> xEndRange(
  							rHelper.GetCursorAsRange()->getStart());
--- 220,268 ----
  					// export point reference mark
  					CreateAndInsertMark(GetImport(),
  										sAPI_reference_mark,
! 										sBookmarkName,
  									   rHelper.GetCursorAsRange()->getStart());
  					break;
  
+ 				case TypeFieldmark:
  				case TypeBookmark:
! 					{
! 						bool bImportAsField=((lcl_MarkType)nTmp==TypeFieldmark && sFieldName.compareToAscii("ecma.office-open-xml.field.FORMCHECKBOX")==0); // for now only import FORMCHECKBOX boxes
! 						// export point bookmark
! 						Reference<XInterface> xIfc=CreateAndInsertMark(GetImport(),
! 										(bImportAsField?sAPI_formfieldmark:sAPI_bookmark),
! 										sBookmarkName,
  									   rHelper.GetCursorAsRange()->getStart());
+ 						if ((lcl_MarkType)nTmp==TypeFieldmark) {
+ 							if (xIfc.is() && bImportAsField) {
+ 								// setup fieldmark...
+ 								Reference< ::com::sun::star::text::XFormField> xFormField(xIfc, UNO_QUERY);
+ 								xFormField->setType(1); // Checkbox...
+ 								if (xFormField.is() && rHelper.hasCurrentFieldCtx()) {
+ //									xFormField->setDescription(::rtl::OUString::createFromAscii("HELLO CHECKBOX"));
+ //									xFormField->setRes(1); 
+ 									rHelper.setCurrentFieldParamsTo(xFormField);
+ 								}
+ 							}
+ 							rHelper.popFieldCtx();
+ 						}
+ 					}
  					break;
  
+ 				case TypeFieldmarkStart:
  				case TypeBookmarkStart:
  					// save XTextRange for later construction of bookmark
  					rHelper.InsertBookmarkStartRange(
! 						sBookmarkName, rHelper.GetCursorAsRange()->getStart());
  					break;
  
+ 				case TypeFieldmarkEnd:
  				case TypeBookmarkEnd:
  				{
  					// get old range, and construct
  					Reference<XTextRange> xStartRange;
  					if (rHelper.FindAndRemoveBookmarkStartRange(xStartRange, 
! 																sBookmarkName))
  					{
  						Reference<XTextRange> xEndRange(
  							rHelper.GetCursorAsRange()->getStart());
***************
*** 192,203 ****
  
  							Reference<XTextRange> xInsertionRange(
  								xInsertionCursor, UNO_QUERY);
  
  							// insert reference
! 							CreateAndInsertMark(GetImport(),
! 												sAPI_bookmark,
! 												sName, 
  												xInsertionRange);
  						}
  						// else: beginning/end in different XText -> ignore!
  					}
--- 284,314 ----
  
  							Reference<XTextRange> xInsertionRange(
  								xInsertionCursor, UNO_QUERY);
+ 							
+ 							bool bImportAsField=((lcl_MarkType)nTmp==TypeFieldmarkEnd && rHelper.hasCurrentFieldCtx());
+ 							if (bImportAsField) {
+ 								::rtl::OUString currentFieldType=rHelper.getCurrentFieldType();
+ 								bImportAsField=currentFieldType.compareToAscii("ecma.office-open-xml.field.FORMTEXT")==0; // for now only import FORMTEXT boxes
+ 							}
  
  							// insert reference
! 							Reference<XInterface> xIfc=CreateAndInsertMark(GetImport(),
! 												(bImportAsField?sAPI_fieldmark:sAPI_bookmark),
! 												sBookmarkName, 
  												xInsertionRange);
+ 
+ 							if ((lcl_MarkType)nTmp==TypeFieldmarkEnd) {
+ 								if (xIfc.is() && bImportAsField) {
+ 									// setup fieldmark...
+ 									Reference< ::com::sun::star::text::XFormField> xFormField(xIfc, UNO_QUERY);
+ 									xFormField->setType(0); // Text
+ 									if (xFormField.is() && rHelper.hasCurrentFieldCtx()) {
+ 										rHelper.setCurrentFieldParamsTo(xFormField);
+ //									xFormField->setDescription(::rtl::OUString::createFromAscii("HELLO"));
+ 									}
+ 								}
+ 								rHelper.popFieldCtx();
+ 							}
  						}
  						// else: beginning/end in different XText -> ignore!
  					}
***************
*** 218,225 ****
  	}
  }
  
  
! void XMLTextMarkImportContext::CreateAndInsertMark(
  	SvXMLImport& rImport,
  	const OUString& sServiceName,
  	const OUString& sMarkName,
--- 329,343 ----
  	}
  }
  
+ SvXMLImportContext *XMLTextMarkImportContext::CreateChildContext( USHORT nPrefix,
+                                         const ::rtl::OUString& rLocalName,
+                                         const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList )
+ {
+ 	return new XMLFieldParamImportContext(GetImport(), rHelper, nPrefix, rLocalName);
+ }
  
! 
! Reference<XInterface> XMLTextMarkImportContext::CreateAndInsertMark(
  	SvXMLImport& rImport,
  	const OUString& sServiceName,
  	const OUString& sMarkName,
***************
*** 254,266 ****
  				}
  			}
  		}
! 	}
  }
  
  sal_Bool XMLTextMarkImportContext::FindName(
  	SvXMLImport& rImport,
  	const Reference<XAttributeList> & xAttrList,
! 	OUString& sName)
  {
  	sal_Bool bNameOK = sal_False;
  
--- 372,385 ----
  				}
  			}
  		}
! 		return xIfc;
! 	} else return NULL;
  }
  
  sal_Bool XMLTextMarkImportContext::FindName(
  	SvXMLImport& rImport,
  	const Reference<XAttributeList> & xAttrList,
! 	OUString& sName, ::rtl::OUString *pFieldName)
  {
  	sal_Bool bNameOK = sal_False;
  
***************
*** 279,285 ****
--- 398,411 ----
  			sName = xAttrList->getValueByIndex(nAttr);
  			bNameOK = sal_True;
  		}
+ 		if ( pFieldName!=NULL &&
+ 			(XML_NAMESPACE_FIELD == nPrefix) &&
+ 			 IsXMLToken(sLocalName, XML_TYPE)   )
+ 		{
+ 			*pFieldName = xAttrList->getValueByIndex(nAttr);
+ 		}
  	}
  
  	return bNameOK;
  }
+ 
Index: xmloff/source/text/XMLTextMarkImportContext.hxx
===================================================================
RCS file: /cvs/xml/xmloff/source/text/XMLTextMarkImportContext.hxx,v
retrieving revision 1.5
diff -c -r1.5 XMLTextMarkImportContext.hxx
*** xmloff/source/text/XMLTextMarkImportContext.hxx	27 Jun 2007 16:10:49 -0000	1.5
--- xmloff/source/text/XMLTextMarkImportContext.hxx	21 Jan 2008 08:29:23 -0000
***************
*** 59,64 ****
--- 59,79 ----
  }
  class XMLTextImportHelper;
  
+ class XMLFieldParamImportContext : public SvXMLImportContext
+ {
+ 	XMLTextImportHelper& rHelper;
+ public:
+ 	XMLFieldParamImportContext(
+ 		SvXMLImport& rImport, 
+ 		XMLTextImportHelper& rHlp,
+ 		sal_uInt16 nPrfx,
+ 		const ::rtl::OUString& rLocalName );
+ 
+ 	virtual void StartElement(
+ 		const ::com::sun::star::uno::Reference< 
+ 			::com::sun::star::xml::sax::XAttributeList> & xAttrList);
+ };
+ 
  
  /**
   * import bookmarks and reference marks
***************
*** 71,76 ****
--- 86,93 ----
  {
  	
  	XMLTextImportHelper& rHelper;
+ 	::rtl::OUString sBookmarkName;
+ 	::rtl::OUString sFieldName;
  
  public:
  	
***************
*** 82,95 ****
  		sal_uInt16 nPrfx,
  		const ::rtl::OUString& rLocalName );
  
  protected:
  
  	virtual void StartElement(
  		const ::com::sun::star::uno::Reference< 
  			::com::sun::star::xml::sax::XAttributeList> & xAttrList);
  
  public:
! 	static void CreateAndInsertMark(
  		SvXMLImport& rImport,
  		const ::rtl::OUString& sServiceName,
  		const ::rtl::OUString& sMarkName,
--- 99,118 ----
  		sal_uInt16 nPrfx,
  		const ::rtl::OUString& rLocalName );
  
+ 
  protected:
  
  	virtual void StartElement(
  		const ::com::sun::star::uno::Reference< 
  			::com::sun::star::xml::sax::XAttributeList> & xAttrList);
+ 	virtual void EndElement();
+ 
+     virtual SvXMLImportContext *CreateChildContext( USHORT nPrefix,
+                                                     const ::rtl::OUString& rLocalName,
+                                                     const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
  
  public:
! 	static ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > CreateAndInsertMark(
  		SvXMLImport& rImport,
  		const ::rtl::OUString& sServiceName,
  		const ::rtl::OUString& sMarkName,
***************
*** 100,106 ****
  		SvXMLImport& rImport,
  		const ::com::sun::star::uno::Reference<
  			::com::sun::star::xml::sax::XAttributeList> & xAttrList,
! 		::rtl::OUString& sName);
  };
  
  #endif
--- 123,129 ----
  		SvXMLImport& rImport,
  		const ::com::sun::star::uno::Reference<
  			::com::sun::star::xml::sax::XAttributeList> & xAttrList,
! 			::rtl::OUString& sName, ::rtl::OUString *pFieldName=NULL);
  };
  
  #endif
Index: xmloff/source/text/txtimp.cxx
===================================================================
RCS file: /cvs/xml/xmloff/source/text/txtimp.cxx,v
retrieving revision 1.131.6.1
diff -c -r1.131.6.1 txtimp.cxx
*** xmloff/source/text/txtimp.cxx	24 Aug 2007 12:12:30 -0000	1.131.6.1
--- xmloff/source/text/txtimp.cxx	21 Jan 2008 08:29:23 -0000
***************
*** 425,430 ****
--- 425,435 ----
  	{ XML_NAMESPACE_PRESENTATION, XML_DATE_TIME, XML_TOK_DRAW_DATE_TIME },
  	{ XML_NAMESPACE_TEXT, XML_PAGE_CONTINUATION, XML_TOK_TEXT_PAGE_CONTINUATION },
  
+ 	{ XML_NAMESPACE_FIELD, XML_FIELDMARK, XML_TOK_TEXT_FIELDMARK },
+ 	{ XML_NAMESPACE_FIELD, XML_FIELDMARK_START, XML_TOK_TEXT_FIELDMARK_START },
+ 	{ XML_NAMESPACE_FIELD, XML_FIELDMARK_END, XML_TOK_TEXT_FIELDMARK_END },
+ 
+ 
  	XML_TOKEN_MAP_END
  };
  
***************
*** 689,694 ****
--- 694,701 ----
      delete [] mpOutlineStylesCandidates;
      // <--
  
+ 	aBookmarkVector.clear(); 
+ 		
  	_FinitBackpatcher();
  }
  
***************
*** 2112,2117 ****
--- 2119,2125 ----
  	const Reference<XTextRange> & rRange)
  {
  	aBookmarkStartRanges[sName].set(rRange);
+ 	aBookmarkVector.push_back(sName);
  }
  
  sal_Bool XMLTextImportHelper::FindAndRemoveBookmarkStartRange(
***************
*** 2122,2127 ****
--- 2130,2142 ----
  	{
  		rRange.set(aBookmarkStartRanges[sName]);
  		aBookmarkStartRanges.erase(sName);
+ 		BookmarkVector_t::iterator it=aBookmarkVector.begin();
+ 		while(it!=aBookmarkVector.end() && it->compareTo(sName)!=0) {
+ 			it++;
+ 		}
+ 		if (it!=aBookmarkVector.end()) {
+ 			aBookmarkVector.erase(it);
+ 		}
  		return sal_True;
  	}
  	else
***************
*** 2130,2135 ****
--- 2145,2220 ----
  	}
  }
  
+ ::rtl::OUString XMLTextImportHelper::FindActiveBookmarkName()
+ {
+ 	if (aBookmarkVector.size()>0) {
+ 		return aBookmarkVector.back();
+ 	} else return ::rtl::OUString(); // return the empty string on error...
+ }
+ 
+ ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > XMLTextImportHelper::GetRangeFor(::rtl::OUString &sName)
+ {
+ 	return aBookmarkStartRanges[sName];
+ }
+ 
+ 
+ void XMLTextImportHelper::pushFieldCtx( ::rtl::OUString name, ::rtl::OUString type )
+ {
+ 	aFieldStack.push(field_stack_item_t(field_name_type_t(name, type), field_params_t()));
+ }
+ 
+ void XMLTextImportHelper::popFieldCtx()
+ {
+ 	aFieldStack.pop();
+ }
+ 
+ void XMLTextImportHelper::addFieldParam( ::rtl::OUString name, ::rtl::OUString value )
+ {
+ 	DBG_ASSERT(!aFieldStack.empty(), "stack is empty: not good! Do a pushFieldCtx before...");
+ 	if (!aFieldStack.empty()) {
+ 		field_stack_item_t &aFieldStackItem=aFieldStack.top();
+ 		aFieldStackItem.second.push_back(field_param_t( name, value ));
+ 	}
+ }
+ ::rtl::OUString XMLTextImportHelper::getCurrentFieldName()
+ {
+ 	DBG_ASSERT(!aFieldStack.empty(), "stack is empty: not good! Do a pushFieldCtx before...");
+ 	if (!aFieldStack.empty()) {
+ 		return aFieldStack.top().first.first;
+ 	} else  ::rtl::OUString();
+ }
+ 
+ ::rtl::OUString XMLTextImportHelper::getCurrentFieldType()
+ {
+ 	DBG_ASSERT(!aFieldStack.empty(), "stack is empty: not good! Do a pushFieldCtx before...");
+ 	if (!aFieldStack.empty()) {
+ 		return aFieldStack.top().first.second;
+ 	} else  ::rtl::OUString();
+ }
+ 
+ bool XMLTextImportHelper::hasCurrentFieldCtx()
+ {
+ 	return !aFieldStack.empty();
+ }
+ 
+ void XMLTextImportHelper::setCurrentFieldParamsTo(::com::sun::star::uno::Reference< ::com::sun::star::text::XFormField> &xFormField)
+ {
+ 	DBG_ASSERT(!aFieldStack.empty(), "stack is empty: not good! Do a pushFieldCtx before...");
+ 	if (!aFieldStack.empty() && xFormField.is()) {
+ 		field_params_t &params=aFieldStack.top().second;
+ 		for (field_params_t::iterator i=params.begin();i!=params.end();i++) {
+ 			rtl::OUString name=i->first;
+ 			rtl::OUString value=i->second;
+ 			if (name.compareToAscii("Description")==0){
+ 				xFormField->setDescription(value);
+ 			} else if (name.compareToAscii("Result")==0){
+ 				xFormField->setRes(value.toInt32());
+ 			}
+ 
+ 		}
+ 	}
+ }
+ 
  
  void XMLTextImportHelper::ConnectFrameChains(
  		const OUString& rFrmName,
Index: xmloff/source/text/txtparae.cxx
===================================================================
RCS file: /cvs/xml/xmloff/source/text/txtparae.cxx,v
retrieving revision 1.138
diff -c -r1.138 txtparae.cxx
*** xmloff/source/text/txtparae.cxx	6 Jul 2007 12:10:23 -0000	1.138
--- xmloff/source/text/txtparae.cxx	21 Jan 2008 08:29:24 -0000
***************
*** 158,163 ****
--- 158,168 ----
  #include <com/sun/star/document/XRedlinesSupplier.hpp>
  #endif
  
+ #include <com/sun/star/text/XBookmarksSupplier.hpp>
+ #include <com/sun/star/text/XFormField.hpp>
+ 
+ #include <stdio.h>
+ 
  #ifndef _COM_SUN_STAR_TEXT_XTEXTSECTION_HPP_
  #include <com/sun/star/text/XTextSection.hpp>
  #endif
***************
*** 991,997 ****
  	sVisitedCharStyleName(RTL_CONSTASCII_USTRINGPARAM("VisitedCharStyleName")),
  	sWidth(RTL_CONSTASCII_USTRINGPARAM("Width")),
  	sWidthType( RTL_CONSTASCII_USTRINGPARAM( "WidthType" ) ),
! 
  	aCharStyleNamesPropInfoCache( sCharStyleNames )
  {
  	UniReference < XMLPropertySetMapper > xPropMapper(new XMLTextPropertySetMapper( TEXT_PROP_MAP_PARA ));
--- 996,1004 ----
  	sVisitedCharStyleName(RTL_CONSTASCII_USTRINGPARAM("VisitedCharStyleName")),
  	sWidth(RTL_CONSTASCII_USTRINGPARAM("Width")),
  	sWidthType( RTL_CONSTASCII_USTRINGPARAM( "WidthType" ) ),
! 	sTextFieldStart( RTL_CONSTASCII_USTRINGPARAM( "TextFieldStart" ) ),
! 	sTextFieldEnd( RTL_CONSTASCII_USTRINGPARAM( "TextFieldEnd" ) ),
! 	sTextFieldStartEnd( RTL_CONSTASCII_USTRINGPARAM( "TextFieldStartEnd" ) ),
  	aCharStyleNamesPropInfoCache( sCharStyleNames )
  {
  	UniReference < XMLPropertySetMapper > xPropMapper(new XMLTextPropertySetMapper( TEXT_PROP_MAP_PARA ));
***************
*** 2186,2191 ****
--- 2193,2254 ----
  			{
  				exportRuby(xPropSet, bAutoStyles);
  			}
+ 			else if (sType.equals(sTextFieldStart)) 
+ 			{
+ 				Reference<XNamed> xBookmark(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
+ 				if (xBookmark.is()) {
+ 					GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xBookmark->getName());
+ 				}
+ 				Reference< ::com::sun::star::text::XFormField > xFormField(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
+ 				if (xFormField.is()) {
+ 					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, ::rtl::OUString::createFromAscii("ecma.office-open-xml.field.FORMTEXT"));
+ 				}
+ 				GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_START, sal_False);
+ 				if (xFormField.is()) {
+ 					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Description"));
+ 					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, xFormField->getDescription());
+ 					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+ 					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+ 				}
+ 				GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_START, sal_False);
+ 			}
+ 			else if (sType.equals(sTextFieldEnd))
+ 			{
+ 				GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_END, sal_False);
+ 				GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_END, sal_False);
+ 			}
+ 			else if (sType.equals(sTextFieldStartEnd))
+ 			{
+ 				Reference<XNamed> xBookmark(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
+ 				if (xBookmark.is()) {
+ 					GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xBookmark->getName());
+ 				}
+ 				Reference< ::com::sun::star::text::XFormField > xFormField(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
+ 				if (xFormField.is()) {
+ 					sal_Int16 fftype=xFormField->getType();
+ 					switch (fftype) {
+ 						case 1:
+ 							GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, ::rtl::OUString::createFromAscii("ecma.office-open-xml.field.FORMCHECKBOX"));
+ 						break;
+ 						default:
+ 							DBG_ASSERT(false, "hey ---- add your export stuff here!!");
+ 						break;
+ 					}
+ 				}
+ 				GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK, sal_False);
+ 				if (xFormField.is()) {
+ 					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Description"));
+ 					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, xFormField->getDescription());
+ 					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+ 					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+ 
+ 					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Result"));
+ 					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, ::rtl::OUString::valueOf((sal_Int32 )xFormField->getRes()));
+ 					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+ 					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+ 				}
+ 				GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK, sal_False);
+ 			}
  			else if (sType.equals(sSoftPageBreak))
  			{
  				exportSoftPageBreak(xPropSet,	bAutoStyles);
Index: xmloff/source/text/txtparai.cxx
===================================================================
RCS file: /cvs/xml/xmloff/source/text/txtparai.cxx,v
retrieving revision 1.63.6.1
diff -c -r1.63.6.1 txtparai.cxx
*** xmloff/source/text/txtparai.cxx	24 Aug 2007 12:12:42 -0000	1.63.6.1
--- xmloff/source/text/txtparai.cxx	21 Jan 2008 08:29:24 -0000
***************
*** 1419,1424 ****
--- 1419,1432 ----
  												 nPrefix, rLocalName );
  		break;
  
+ 	case XML_TOK_TEXT_FIELDMARK:
+ 	case XML_TOK_TEXT_FIELDMARK_START:
+ 	case XML_TOK_TEXT_FIELDMARK_END:
+ 		pContext = new XMLTextMarkImportContext( rImport,
+ 												 *rImport.GetTextImport().get(),
+ 												 nPrefix, rLocalName );
+ 		break;
+ 
  	case XML_TOK_TEXT_REFERENCE_START:
  		pContext = new XMLStartReferenceContext_Impl( rImport,
  													  nPrefix, rLocalName,
