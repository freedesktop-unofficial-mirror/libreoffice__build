diff --git a/xmloff/inc/xmlnmspe.hxx b/xmloff/inc/xmlnmspe.hxx
index 2a8a556..f50a123 100644
--- xmloff/inc/xmlnmspe.hxx
+++ xmloff/inc/xmlnmspe.hxx
@@ -98,4 +98,8 @@ XML_OLD_NAMESPACE( TEXT,	4U )
 XML_OLD_NAMESPACE( TABLE,	5U )
 XML_OLD_NAMESPACE( META,	6U )
 
+// experimental namespaces
+XML_NAMESPACE( FIELD,			100U )
+
+
 #endif	//  _XMLOFF_XMLNMSPE_HXX
diff --git a/xmloff/inc/xmloff/txtimp.hxx b/xmloff/inc/xmloff/txtimp.hxx
index e11a34b..97e8b6b 100644
--- xmloff/inc/xmloff/txtimp.hxx
+++ xmloff/inc/xmloff/txtimp.hxx
@@ -78,6 +78,11 @@
 #include <xmloff/uniref.hxx>
 #endif
 
+#ifndef _COM_SUN_STAR_TEXT_XFORMFIELD_HPP_
+#include <com/sun/star/text/XFormField.hpp>
+#endif
+
+
 class SvXMLImport;
 class SvXMLStylesContext;
 class XMLTextListBlockContext;
@@ -265,6 +270,11 @@ enum XMLTextPElemTokens
 	XML_TOK_DRAW_DATE_TIME,
 	XML_TOK_TEXT_PAGE_CONTINUATION,
 
+
+	XML_TOK_TEXT_FIELDMARK,
+	XML_TOK_TEXT_FIELDMARK_START,
+	XML_TOK_TEXT_FIELDMARK_END,
+
 	XML_TOK_TEXT_P_ELEM_END=XML_TOK_UNKNOWN
 };
 
@@ -418,6 +428,8 @@ class XMLOFF_DLLPUBLIC XMLTextImportHelper : public UniRefBase
 				::com::sun::star::uno::Reference<
 					::com::sun::star::text::XTextRange>,
                 ::comphelper::UStringLess> aBookmarkStartRanges;
+	typedef ::std::vector< ::rtl::OUString> BookmarkVector_t;
+	BookmarkVector_t aBookmarkVector;
 
 	/// backpatcher for references to footnotes and endnotes
 	XMLPropertyBackpatcher<sal_Int16> * pFootnoteBackpatcher;
@@ -484,6 +496,14 @@ class XMLOFF_DLLPUBLIC XMLTextImportHelper : public UniRefBase
 	// Code is implemented in XMLPropertyBackpatcher.cxx
 	SAL_DLLPRIVATE void _FinitBackpatcher();
 
+	typedef ::std::pair< ::rtl::OUString, ::rtl::OUString> field_name_type_t;
+	typedef ::std::pair< ::rtl::OUString, ::rtl::OUString > field_param_t;
+	typedef ::std::vector< field_param_t > field_params_t;
+	typedef ::std::pair< field_name_type_t, field_params_t > field_stack_item_t;
+	typedef ::std::stack< field_stack_item_t > field_stack_t;
+
+	field_stack_t aFieldStack;
+
 protected:
 	virtual SvXMLImportContext *CreateTableChildContext(
 				SvXMLImport& rImport,
@@ -754,6 +774,18 @@ public:
 				::com::sun::star::text::XTextRange> & rRange,
 		const ::rtl::OUString sName);
 
+	::rtl::OUString FindActiveBookmarkName();
+	::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > GetRangeFor(::rtl::OUString &sName);
+
+	void pushFieldCtx( ::rtl::OUString name, ::rtl::OUString type );
+	void popFieldCtx();
+	void addFieldParam( ::rtl::OUString name, ::rtl::OUString value );
+	void setCurrentFieldParamsTo(::com::sun::star::uno::Reference< ::com::sun::star::text::XFormField> &xFormField);
+	::rtl::OUString getCurrentFieldName();
+	::rtl::OUString getCurrentFieldType();
+	bool hasCurrentFieldCtx();
+
+
 	/// insert new footnote ID.
 	/// Also fixup open references from the backpatch list to this ID.
 	// Code is implemented in XMLPropertyBackpatcher.cxx
diff --git a/xmloff/inc/xmloff/txtparae.hxx b/xmloff/inc/xmloff/txtparae.hxx
index cf4e870..04b01f6 100644
--- xmloff/inc/xmloff/txtparae.hxx
+++ xmloff/inc/xmloff/txtparae.hxx
@@ -231,7 +231,9 @@ protected:
 	const ::rtl::OUString sVisitedCharStyleName;
 	const ::rtl::OUString sWidth;
 	const ::rtl::OUString sWidthType;
-
+	const ::rtl::OUString sTextFieldStart;
+	const ::rtl::OUString sTextFieldEnd;
+	const ::rtl::OUString sTextFieldStartEnd;
 
 	SinglePropertySetInfoCache aCharStyleNamesPropInfoCache;
 
diff --git a/xmloff/inc/xmloff/xmltoken.hxx b/xmloff/inc/xmloff/xmltoken.hxx
index 3b131f7..574a984 100644
--- xmloff/inc/xmloff/xmltoken.hxx
+++ xmloff/inc/xmloff/xmltoken.hxx
@@ -2994,6 +2994,13 @@ namespace xmloff { namespace token {
         XML_CHARACTER_SET,
         XML_APPLICATION_CONNECTION_SETTINGS,
         XML_TABLE_INCLUDE_FILTER,
+
+        XML_FIELDMARK, 
+        XML_FIELDMARK_START, 
+        XML_FIELDMARK_END, 
+        XML_N_FIELD, 
+        XML_NP_FIELD, 
+	
 		XML_TOKEN_END
     };
 
diff --git a/xmloff/source/core/xmlexp.cxx b/xmloff/source/core/xmlexp.cxx
index 8870e3a..bacaf3b 100644
--- xmloff/source/core/xmlexp.cxx
+++ xmloff/source/core/xmlexp.cxx
@@ -216,6 +216,8 @@
 #include "xformsexport.hxx"
 #endif
 
+#include <assert.h>
+
 using namespace ::rtl;
 using namespace ::osl;
 using namespace ::com::sun::star;
@@ -400,6 +402,7 @@ void SvXMLExport::_InitCtor()
 		mpNamespaceMap->Add( GetXMLToken(XML_NP_XFORMS_1_0), GetXMLToken(XML_N_XFORMS_1_0), XML_NAMESPACE_XFORMS );
 		mpNamespaceMap->Add( GetXMLToken(XML_NP_XSD), GetXMLToken(XML_N_XSD), XML_NAMESPACE_XSD );
 		mpNamespaceMap->Add( GetXMLToken(XML_NP_XSI), GetXMLToken(XML_N_XSI), XML_NAMESPACE_XSI );
+		mpNamespaceMap->Add( GetXMLToken(XML_NP_FIELD), GetXMLToken(XML_N_FIELD), XML_NAMESPACE_FIELD );
 	}
 
 	mxAttrList = (xml::sax::XAttributeList*)mpAttrList;
diff --git a/xmloff/source/core/xmlimp.cxx b/xmloff/source/core/xmlimp.cxx
index 1f20a76..1750977 100644
--- xmloff/source/core/xmlimp.cxx
+++ xmloff/source/core/xmlimp.cxx
@@ -191,6 +191,7 @@ sal_Char __READONLY_DATA sXML_np__db[] = "_db";
 sal_Char __READONLY_DATA sXML_np__xforms[] = "_xforms";
 sal_Char __READONLY_DATA sXML_np__xsd[] = "_xsd";
 sal_Char __READONLY_DATA sXML_np__xsi[] = "_xsi";
+sal_Char __READONLY_DATA sXML_np__field[] = "_field";
 
 sal_Char __READONLY_DATA sXML_np__fo_old[] = "__fo";
 sal_Char __READONLY_DATA sXML_np__xlink_old[] = "__xlink";
@@ -357,6 +358,7 @@ void SvXMLImport::_InitCtor()
                             XML_NAMESPACE_XFORMS );
 		mpNamespaceMap->Add( OUString( RTL_CONSTASCII_USTRINGPARAM ( sXML_np__ooow ) ), GetXMLToken(XML_N_OOOW), XML_NAMESPACE_OOOW );
 		mpNamespaceMap->Add( OUString( RTL_CONSTASCII_USTRINGPARAM ( sXML_np__oooc ) ), GetXMLToken(XML_N_OOOC), XML_NAMESPACE_OOOC );
+		mpNamespaceMap->Add( OUString( RTL_CONSTASCII_USTRINGPARAM ( sXML_np__field ) ), GetXMLToken(XML_N_FIELD), XML_NAMESPACE_FIELD );
 	}
 
 	msPackageProtocol = OUString( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.Package:" ) );
diff --git a/xmloff/source/core/xmltoken.cxx b/xmloff/source/core/xmltoken.cxx
index 94fca7a..b30f6cf 100644
--- xmloff/source/core/xmltoken.cxx
+++ xmloff/source/core/xmltoken.cxx
@@ -2994,6 +2994,11 @@ namespace xmloff { namespace token {
         TOKEN( "character-set",         XML_CHARACTER_SET ),
         TOKEN( "application-connection-settings",         XML_APPLICATION_CONNECTION_SETTINGS ),
         TOKEN( "table-include-filter",         XML_TABLE_INCLUDE_FILTER ),
+        TOKEN( "fieldmark",             XML_FIELDMARK ),
+        TOKEN( "fieldmark-start",       XML_FIELDMARK_START ),
+        TOKEN( "fieldmark-end",         XML_FIELDMARK_END ),
+        TOKEN( "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:field:1.0",   XML_N_FIELD ),
+        TOKEN( "field",         XML_NP_FIELD ),
 #if OSL_DEBUG_LEVEL > 0
         { 0, NULL, NULL,                       XML_TOKEN_END }
 #else
diff --git a/xmloff/source/text/XMLTextMarkImportContext.cxx b/xmloff/source/text/XMLTextMarkImportContext.cxx
index 8a7add5..c34071f 100644
--- xmloff/source/text/XMLTextMarkImportContext.cxx
+++ xmloff/source/text/XMLTextMarkImportContext.cxx
@@ -88,6 +88,10 @@
 #include <com/sun/star/container/XNamed.hpp>
 #endif
 
+#ifndef _COM_SUN_STAR_TEXT_XFORMFIELD_HPP_
+#include <com/sun/star/text/XFormField.hpp>
+#endif
+
 
 using namespace ::rtl;
 using namespace ::com::sun::star::text;
@@ -97,7 +101,50 @@ using namespace ::com::sun::star::lang;
 using namespace ::com::sun::star::container;
 using namespace ::com::sun::star::xml::sax;
 using namespace ::xmloff::token;
-	
+
+
+XMLFieldParamImportContext::XMLFieldParamImportContext(
+	SvXMLImport& rImport, 
+	XMLTextImportHelper& rHlp,
+	sal_uInt16 nPrefix,
+	const OUString& rLocalName ) :
+		SvXMLImportContext(rImport, nPrefix, rLocalName),
+		rHelper(rHlp)
+{
+}
+
+
+void XMLFieldParamImportContext::StartElement(const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList> & xAttrList)
+{
+	SvXMLImport& rImport = GetImport();
+	::rtl::OUString sName;
+	::rtl::OUString sValue;
+
+	sal_Int16 nLength = xAttrList->getLength();
+	for(sal_Int16 nAttr = 0; nAttr < nLength; nAttr++)
+	{
+		OUString sLocalName;
+		sal_uInt16 nPrefix = rImport.GetNamespaceMap().
+			GetKeyByAttrName( xAttrList->getNameByIndex(nAttr), 
+							  &sLocalName );
+
+		if ( (XML_NAMESPACE_FIELD == nPrefix) &&
+			 IsXMLToken(sLocalName, XML_NAME)   )
+		{
+			sName = xAttrList->getValueByIndex(nAttr);
+		}
+		if ( (XML_NAMESPACE_FIELD == nPrefix) &&
+			 IsXMLToken(sLocalName, XML_VALUE)   )
+		{
+			sValue = xAttrList->getValueByIndex(nAttr);
+		}
+	}
+	if (rHelper.hasCurrentFieldCtx() && sName.getLength()>0) {
+		rHelper.addFieldParam(sName, sValue);
+	}
+}
+
+
 TYPEINIT1( XMLTextMarkImportContext, SvXMLImportContext);
 
 XMLTextMarkImportContext::XMLTextMarkImportContext(
@@ -111,7 +158,9 @@ XMLTextMarkImportContext::XMLTextMarkImportContext(
 }
 
 enum lcl_MarkType { TypeReference, TypeReferenceStart, TypeReferenceEnd,
-					TypeBookmark, TypeBookmarkStart, TypeBookmarkEnd };
+					TypeBookmark, TypeBookmarkStart, TypeBookmarkEnd,
+					TypeFieldmark, TypeFieldmarkStart, TypeFieldmarkEnd,
+				  };
 
 static SvXMLEnumMapEntry __READONLY_DATA lcl_aMarkTypeMap[] =
 {
@@ -121,21 +170,45 @@ static SvXMLEnumMapEntry __READONLY_DATA lcl_aMarkTypeMap[] =
 	{ XML_BOOKMARK,				    TypeBookmark },
 	{ XML_BOOKMARK_START,			TypeBookmarkStart },
 	{ XML_BOOKMARK_END,			    TypeBookmarkEnd },
+	{ XML_FIELDMARK,				TypeFieldmark },
+	{ XML_FIELDMARK_START,			TypeFieldmarkStart },
+	{ XML_FIELDMARK_END,			 TypeFieldmarkEnd },
 	{ XML_TOKEN_INVALID,    		0 },
 };
 
 void XMLTextMarkImportContext::StartElement(
 	const Reference<XAttributeList> & xAttrList)
 {
+	if (!FindName(GetImport(), xAttrList, sBookmarkName, &sFieldName)) {
+		sBookmarkName=OUString();
+	}
+
+	if (IsXMLToken(GetLocalName(), XML_FIELDMARK_END)) {
+		sBookmarkName=rHelper.FindActiveBookmarkName();
+	} 
+	if (IsXMLToken(GetLocalName(), XML_FIELDMARK_START) || IsXMLToken(GetLocalName(), XML_FIELDMARK)) {
+		if (sBookmarkName.getLength()==0) {
+			sBookmarkName=::rtl::OUString::createFromAscii("Unknown");
+		}
+		rHelper.pushFieldCtx( sBookmarkName, sFieldName );
+	}
+
+}
+
+void XMLTextMarkImportContext::EndElement()
+{
+	SvXMLImportContext::EndElement();
+
 	const OUString sAPI_reference_mark(
 		RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.ReferenceMark"));
 	const OUString sAPI_bookmark(
 		RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.Bookmark"));
+	const OUString sAPI_fieldmark(
+		RTL_CONSTASCII_USTRINGPARAM("org.go-oo.text.Fieldmark"));
+	const OUString sAPI_formfieldmark(
+		RTL_CONSTASCII_USTRINGPARAM("org.go-oo.text.FormFieldmark"));
 
-
-	OUString sName;
-
-	if (FindName(GetImport(), xAttrList, sName))
+	if (sBookmarkName.getLength()>0) 
 	{
 		sal_uInt16 nTmp;
 		if (SvXMLUnitConverter::convertEnum(nTmp, GetLocalName(), 
@@ -147,30 +220,49 @@ void XMLTextMarkImportContext::StartElement(
 					// export point reference mark
 					CreateAndInsertMark(GetImport(),
 										sAPI_reference_mark,
-										sName,
+										sBookmarkName,
 									   rHelper.GetCursorAsRange()->getStart());
 					break;
 
+				case TypeFieldmark:
 				case TypeBookmark:
-					// export point bookmark
-					CreateAndInsertMark(GetImport(),
-										sAPI_bookmark,
-										sName,
+					{
+						bool bImportAsField=((lcl_MarkType)nTmp==TypeFieldmark && sFieldName.compareToAscii("ecma.office-open-xml.field.FORMCHECKBOX")==0); // for now only import FORMCHECKBOX boxes
+						// export point bookmark
+						Reference<XInterface> xIfc=CreateAndInsertMark(GetImport(),
+										(bImportAsField?sAPI_formfieldmark:sAPI_bookmark),
+										sBookmarkName,
 									   rHelper.GetCursorAsRange()->getStart());
+						if ((lcl_MarkType)nTmp==TypeFieldmark) {
+							if (xIfc.is() && bImportAsField) {
+								// setup fieldmark...
+								Reference< ::com::sun::star::text::XFormField> xFormField(xIfc, UNO_QUERY);
+								xFormField->setType(1); // Checkbox...
+								if (xFormField.is() && rHelper.hasCurrentFieldCtx()) {
+//									xFormField->setDescription(::rtl::OUString::createFromAscii("HELLO CHECKBOX"));
+//									xFormField->setRes(1); 
+									rHelper.setCurrentFieldParamsTo(xFormField);
+								}
+							}
+							rHelper.popFieldCtx();
+						}
+					}
 					break;
 
+				case TypeFieldmarkStart:
 				case TypeBookmarkStart:
 					// save XTextRange for later construction of bookmark
 					rHelper.InsertBookmarkStartRange(
-						sName, rHelper.GetCursorAsRange()->getStart());
+						sBookmarkName, rHelper.GetCursorAsRange()->getStart());
 					break;
 
+				case TypeFieldmarkEnd:
 				case TypeBookmarkEnd:
 				{
 					// get old range, and construct
 					Reference<XTextRange> xStartRange;
 					if (rHelper.FindAndRemoveBookmarkStartRange(xStartRange, 
-																sName))
+																sBookmarkName))
 					{
 						Reference<XTextRange> xEndRange(
 							rHelper.GetCursorAsRange()->getStart());
@@ -192,12 +284,31 @@ void XMLTextMarkImportContext::StartElement(
 
 							Reference<XTextRange> xInsertionRange(
 								xInsertionCursor, UNO_QUERY);
+							
+							bool bImportAsField=((lcl_MarkType)nTmp==TypeFieldmarkEnd && rHelper.hasCurrentFieldCtx());
+							if (bImportAsField) {
+								::rtl::OUString currentFieldType=rHelper.getCurrentFieldType();
+								bImportAsField=currentFieldType.compareToAscii("ecma.office-open-xml.field.FORMTEXT")==0; // for now only import FORMTEXT boxes
+							}
 
 							// insert reference
-							CreateAndInsertMark(GetImport(),
-												sAPI_bookmark,
-												sName, 
+							Reference<XInterface> xIfc=CreateAndInsertMark(GetImport(),
+												(bImportAsField?sAPI_fieldmark:sAPI_bookmark),
+												sBookmarkName, 
 												xInsertionRange);
+
+							if ((lcl_MarkType)nTmp==TypeFieldmarkEnd) {
+								if (xIfc.is() && bImportAsField) {
+									// setup fieldmark...
+									Reference< ::com::sun::star::text::XFormField> xFormField(xIfc, UNO_QUERY);
+									xFormField->setType(0); // Text
+									if (xFormField.is() && rHelper.hasCurrentFieldCtx()) {
+										rHelper.setCurrentFieldParamsTo(xFormField);
+//									xFormField->setDescription(::rtl::OUString::createFromAscii("HELLO"));
+									}
+								}
+								rHelper.popFieldCtx();
+							}
 						}
 						// else: beginning/end in different XText -> ignore!
 					}
@@ -218,8 +329,15 @@ void XMLTextMarkImportContext::StartElement(
 	}
 }
 
+SvXMLImportContext *XMLTextMarkImportContext::CreateChildContext( USHORT nPrefix,
+                                        const ::rtl::OUString& rLocalName,
+                                        const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList )
+{
+	return new XMLFieldParamImportContext(GetImport(), rHelper, nPrefix, rLocalName);
+}
 
-void XMLTextMarkImportContext::CreateAndInsertMark(
+
+Reference<XInterface> XMLTextMarkImportContext::CreateAndInsertMark(
 	SvXMLImport& rImport,
 	const OUString& sServiceName,
 	const OUString& sMarkName,
@@ -254,13 +372,14 @@ void XMLTextMarkImportContext::CreateAndInsertMark(
 				}
 			}
 		}
-	}
+		return xIfc;
+	} else return NULL;
 }
 
 sal_Bool XMLTextMarkImportContext::FindName(
 	SvXMLImport& rImport,
 	const Reference<XAttributeList> & xAttrList,
-	OUString& sName)
+	OUString& sName, ::rtl::OUString *pFieldName)
 {
 	sal_Bool bNameOK = sal_False;
 
@@ -279,7 +398,14 @@ sal_Bool XMLTextMarkImportContext::FindName(
 			sName = xAttrList->getValueByIndex(nAttr);
 			bNameOK = sal_True;
 		}
+		if ( pFieldName!=NULL &&
+			(XML_NAMESPACE_FIELD == nPrefix) &&
+			 IsXMLToken(sLocalName, XML_TYPE)   )
+		{
+			*pFieldName = xAttrList->getValueByIndex(nAttr);
+		}
 	}
 
 	return bNameOK;
 }
+
diff --git a/xmloff/source/text/XMLTextMarkImportContext.hxx b/xmloff/source/text/XMLTextMarkImportContext.hxx
index 79e3f35..5554255 100644
--- xmloff/source/text/XMLTextMarkImportContext.hxx
+++ xmloff/source/text/XMLTextMarkImportContext.hxx
@@ -59,6 +59,21 @@ namespace rtl {
 }
 class XMLTextImportHelper;
 
+class XMLFieldParamImportContext : public SvXMLImportContext
+{
+	XMLTextImportHelper& rHelper;
+public:
+	XMLFieldParamImportContext(
+		SvXMLImport& rImport, 
+		XMLTextImportHelper& rHlp,
+		sal_uInt16 nPrfx,
+		const ::rtl::OUString& rLocalName );
+
+	virtual void StartElement(
+		const ::com::sun::star::uno::Reference< 
+			::com::sun::star::xml::sax::XAttributeList> & xAttrList);
+};
+
 
 /**
  * import bookmarks and reference marks
@@ -71,6 +86,8 @@ class XMLTextMarkImportContext : public SvXMLImportContext
 {
 	
 	XMLTextImportHelper& rHelper;
+	::rtl::OUString sBookmarkName;
+	::rtl::OUString sFieldName;
 
 public:
 	
@@ -82,14 +99,20 @@ public:
 		sal_uInt16 nPrfx,
 		const ::rtl::OUString& rLocalName );
 
+
 protected:
 
 	virtual void StartElement(
 		const ::com::sun::star::uno::Reference< 
 			::com::sun::star::xml::sax::XAttributeList> & xAttrList);
+	virtual void EndElement();
+
+    virtual SvXMLImportContext *CreateChildContext( USHORT nPrefix,
+                                                    const ::rtl::OUString& rLocalName,
+                                                    const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
 
 public:
-	static void CreateAndInsertMark(
+	static ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > CreateAndInsertMark(
 		SvXMLImport& rImport,
 		const ::rtl::OUString& sServiceName,
 		const ::rtl::OUString& sMarkName,
@@ -100,7 +123,7 @@ public:
 		SvXMLImport& rImport,
 		const ::com::sun::star::uno::Reference<
 			::com::sun::star::xml::sax::XAttributeList> & xAttrList,
-		::rtl::OUString& sName);
+			::rtl::OUString& sName, ::rtl::OUString *pFieldName=NULL);
 };
 
 #endif
diff --git a/xmloff/source/text/txtimp.cxx b/xmloff/source/text/txtimp.cxx
index 197d31d..b69c0d6 100644
--- xmloff/source/text/txtimp.cxx
+++ xmloff/source/text/txtimp.cxx
@@ -425,6 +425,11 @@ static __FAR_DATA SvXMLTokenMapEntry aTextPElemTokenMap[] =
 	{ XML_NAMESPACE_PRESENTATION, XML_DATE_TIME, XML_TOK_DRAW_DATE_TIME },
 	{ XML_NAMESPACE_TEXT, XML_PAGE_CONTINUATION, XML_TOK_TEXT_PAGE_CONTINUATION },
 
+	{ XML_NAMESPACE_FIELD, XML_FIELDMARK, XML_TOK_TEXT_FIELDMARK },
+	{ XML_NAMESPACE_FIELD, XML_FIELDMARK_START, XML_TOK_TEXT_FIELDMARK_START },
+	{ XML_NAMESPACE_FIELD, XML_FIELDMARK_END, XML_TOK_TEXT_FIELDMARK_END },
+
+
 	XML_TOKEN_MAP_END
 };
 
@@ -689,6 +694,8 @@ XMLTextImportHelper::~XMLTextImportHelper()
     delete [] mpOutlineStylesCandidates;
     // <--
 
+	aBookmarkVector.clear(); 
+		
 	_FinitBackpatcher();
 }
 
@@ -2126,6 +2133,7 @@ void XMLTextImportHelper::InsertBookmarkStartRange(
 	const Reference<XTextRange> & rRange)
 {
 	aBookmarkStartRanges[sName].set(rRange);
+	aBookmarkVector.push_back(sName);
 }
 
 sal_Bool XMLTextImportHelper::FindAndRemoveBookmarkStartRange(
@@ -2136,6 +2144,13 @@ sal_Bool XMLTextImportHelper::FindAndRemoveBookmarkStartRange(
 	{
 		rRange.set(aBookmarkStartRanges[sName]);
 		aBookmarkStartRanges.erase(sName);
+		BookmarkVector_t::iterator it=aBookmarkVector.begin();
+		while(it!=aBookmarkVector.end() && it->compareTo(sName)!=0) {
+			it++;
+		}
+		if (it!=aBookmarkVector.end()) {
+			aBookmarkVector.erase(it);
+		}
 		return sal_True;
 	}
 	else
@@ -2144,6 +2159,76 @@ sal_Bool XMLTextImportHelper::FindAndRemoveBookmarkStartRange(
 	}
 }
 
+::rtl::OUString XMLTextImportHelper::FindActiveBookmarkName()
+{
+	if (aBookmarkVector.size()>0) {
+		return aBookmarkVector.back();
+	} else return ::rtl::OUString(); // return the empty string on error...
+}
+
+::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > XMLTextImportHelper::GetRangeFor(::rtl::OUString &sName)
+{
+	return aBookmarkStartRanges[sName];
+}
+
+
+void XMLTextImportHelper::pushFieldCtx( ::rtl::OUString name, ::rtl::OUString type )
+{
+	aFieldStack.push(field_stack_item_t(field_name_type_t(name, type), field_params_t()));
+}
+
+void XMLTextImportHelper::popFieldCtx()
+{
+	aFieldStack.pop();
+}
+
+void XMLTextImportHelper::addFieldParam( ::rtl::OUString name, ::rtl::OUString value )
+{
+	DBG_ASSERT(!aFieldStack.empty(), "stack is empty: not good! Do a pushFieldCtx before...");
+	if (!aFieldStack.empty()) {
+		field_stack_item_t &aFieldStackItem=aFieldStack.top();
+		aFieldStackItem.second.push_back(field_param_t( name, value ));
+	}
+}
+::rtl::OUString XMLTextImportHelper::getCurrentFieldName()
+{
+	DBG_ASSERT(!aFieldStack.empty(), "stack is empty: not good! Do a pushFieldCtx before...");
+	if (!aFieldStack.empty()) {
+		return aFieldStack.top().first.first;
+	} else  ::rtl::OUString();
+}
+
+::rtl::OUString XMLTextImportHelper::getCurrentFieldType()
+{
+	DBG_ASSERT(!aFieldStack.empty(), "stack is empty: not good! Do a pushFieldCtx before...");
+	if (!aFieldStack.empty()) {
+		return aFieldStack.top().first.second;
+	} else  ::rtl::OUString();
+}
+
+bool XMLTextImportHelper::hasCurrentFieldCtx()
+{
+	return !aFieldStack.empty();
+}
+
+void XMLTextImportHelper::setCurrentFieldParamsTo(::com::sun::star::uno::Reference< ::com::sun::star::text::XFormField> &xFormField)
+{
+	DBG_ASSERT(!aFieldStack.empty(), "stack is empty: not good! Do a pushFieldCtx before...");
+	if (!aFieldStack.empty() && xFormField.is()) {
+		field_params_t &params=aFieldStack.top().second;
+		for (field_params_t::iterator i=params.begin();i!=params.end();i++) {
+			rtl::OUString name=i->first;
+			rtl::OUString value=i->second;
+			if (name.compareToAscii("Description")==0){
+				xFormField->setDescription(value);
+			} else if (name.compareToAscii("Result")==0){
+				xFormField->setRes(value.toInt32());
+			}
+
+		}
+	}
+}
+
 
 void XMLTextImportHelper::ConnectFrameChains(
 		const OUString& rFrmName,
diff --git a/xmloff/source/text/txtparae.cxx b/xmloff/source/text/txtparae.cxx
index fa56e38..de91769 100644
--- xmloff/source/text/txtparae.cxx
+++ xmloff/source/text/txtparae.cxx
@@ -158,6 +158,11 @@
 #include <com/sun/star/document/XRedlinesSupplier.hpp>
 #endif
 
+#include <com/sun/star/text/XBookmarksSupplier.hpp>
+#include <com/sun/star/text/XFormField.hpp>
+
+#include <stdio.h>
+
 #ifndef _COM_SUN_STAR_TEXT_XTEXTSECTION_HPP_
 #include <com/sun/star/text/XTextSection.hpp>
 #endif
@@ -990,7 +995,9 @@ XMLTextParagraphExport::XMLTextParagraphExport(
 	sVisitedCharStyleName(RTL_CONSTASCII_USTRINGPARAM("VisitedCharStyleName")),
 	sWidth(RTL_CONSTASCII_USTRINGPARAM("Width")),
 	sWidthType( RTL_CONSTASCII_USTRINGPARAM( "WidthType" ) ),
-
+	sTextFieldStart( RTL_CONSTASCII_USTRINGPARAM( "TextFieldStart" ) ),
+	sTextFieldEnd( RTL_CONSTASCII_USTRINGPARAM( "TextFieldEnd" ) ),
+	sTextFieldStartEnd( RTL_CONSTASCII_USTRINGPARAM( "TextFieldStartEnd" ) ),
 	aCharStyleNamesPropInfoCache( sCharStyleNames )
 {
 	UniReference < XMLPropertySetMapper > xPropMapper(new XMLTextPropertySetMapper( TEXT_PROP_MAP_PARA ));
@@ -2185,6 +2192,62 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
 			{
 				exportRuby(xPropSet, bAutoStyles);
 			}
+			else if (sType.equals(sTextFieldStart)) 
+			{
+				Reference<XNamed> xBookmark(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
+				if (xBookmark.is()) {
+					GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xBookmark->getName());
+				}
+				Reference< ::com::sun::star::text::XFormField > xFormField(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
+				if (xFormField.is()) {
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, ::rtl::OUString::createFromAscii("ecma.office-open-xml.field.FORMTEXT"));
+				}
+				GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_START, sal_False);
+				if (xFormField.is()) {
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Description"));
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, xFormField->getDescription());
+					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+				}
+				GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_START, sal_False);
+			}
+			else if (sType.equals(sTextFieldEnd))
+			{
+				GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_END, sal_False);
+				GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_END, sal_False);
+			}
+			else if (sType.equals(sTextFieldStartEnd))
+			{
+				Reference<XNamed> xBookmark(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
+				if (xBookmark.is()) {
+					GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xBookmark->getName());
+				}
+				Reference< ::com::sun::star::text::XFormField > xFormField(xPropSet->getPropertyValue(sBookmark), UNO_QUERY);
+				if (xFormField.is()) {
+					sal_Int16 fftype=xFormField->getType();
+					switch (fftype) {
+						case 1:
+							GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, ::rtl::OUString::createFromAscii("ecma.office-open-xml.field.FORMCHECKBOX"));
+						break;
+						default:
+							DBG_ASSERT(false, "hey ---- add your export stuff here!!");
+						break;
+					}
+				}
+				GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK, sal_False);
+				if (xFormField.is()) {
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Description"));
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, xFormField->getDescription());
+					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, ::rtl::OUString::createFromAscii("Result"));
+					GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, ::rtl::OUString::valueOf((sal_Int32 )xFormField->getRes()));
+					GetExport().StartElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+					GetExport().EndElement(XML_NAMESPACE_FIELD, XML_PARAM, sal_False);
+				}
+				GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK, sal_False);
+			}
 			else if (sType.equals(sSoftPageBreak))
 			{
 				exportSoftPageBreak(xPropSet,	bAutoStyles);
diff --git a/xmloff/source/text/txtparai.cxx b/xmloff/source/text/txtparai.cxx
index a5bf136..91d27e6 100644
--- xmloff/source/text/txtparai.cxx
+++ xmloff/source/text/txtparai.cxx
@@ -1419,6 +1419,14 @@ SvXMLImportContext *XMLImpSpanContext_Impl::CreateChildContext(
 												 nPrefix, rLocalName );
 		break;
 
+	case XML_TOK_TEXT_FIELDMARK:
+	case XML_TOK_TEXT_FIELDMARK_START:
+	case XML_TOK_TEXT_FIELDMARK_END:
+		pContext = new XMLTextMarkImportContext( rImport,
+												 *rImport.GetTextImport().get(),
+												 nPrefix, rLocalName );
+		break;
+
 	case XML_TOK_TEXT_REFERENCE_START:
 		pContext = new XMLStartReferenceContext_Impl( rImport,
 													  nPrefix, rLocalName,
