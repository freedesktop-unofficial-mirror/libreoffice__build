--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/exports.map	2006-03-28 09:53:56.000000000 +0200
@@ -0,0 +1,11 @@
+UDK_3_0_0 {
+	global:
+		GetVersionInfo;
+		component_getDescriptionFunc;
+		component_getImplementationEnvironment;
+		component_getFactory;
+		component_writeInfo;
+
+	local:
+		*;
+};
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdebackend.cxx	2006-03-28 16:42:13.000000000 +0200
@@ -0,0 +1,179 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#include "kdebackend.hxx"
+
+#ifndef KDECOMMONLAYER_HXX_
+#include "kdecommonlayer.hxx"
+#endif 
+#ifndef KDEINETLAYER_HXX_
+#include "kdeinetlayer.hxx"
+#endif 
+#ifndef KDEVCLLAYER_HXX_
+#include "kdevcllayer.hxx"
+#endif 
+
+//------------------------------------------------------------------------------
+
+KDEBackend* KDEBackend::mInstance= 0;
+
+KDEBackend* KDEBackend::createInstance(const uno::Reference<uno::XComponentContext>& xContext)
+{
+    if (mInstance == 0)
+    {
+        mInstance = new KDEBackend (xContext);
+    }
+    
+    return mInstance;
+}
+
+//------------------------------------------------------------------------------
+
+KDEBackend::KDEBackend(const uno::Reference<uno::XComponentContext>& xContext)
+        throw (backend::BackendAccessException)
+    : BackendBase(mMutex), m_xContext(xContext)
+{
+}
+
+//------------------------------------------------------------------------------
+
+KDEBackend::~KDEBackend(void)
+{
+}
+
+//------------------------------------------------------------------------------
+
+uno::Reference<backend::XLayer> SAL_CALL KDEBackend::getLayer(
+    const rtl::OUString& aComponent, const rtl::OUString& aTimestamp)
+    throw (backend::BackendAccessException, lang::IllegalArgumentException)
+{
+    uno::Reference<backend::XLayer> xLayer;
+    
+    if( aComponent.equalsAscii("org.openoffice.Office.Common" ) )
+    {
+        xLayer = new KDECommonLayer(m_xContext);
+    }
+    else if( aComponent.equalsAscii("org.openoffice.Inet" ) )
+    {
+        xLayer = new KDEInetLayer(m_xContext);
+    }
+    else if( aComponent.equalsAscii("org.openoffice.VCL" ) )
+    {
+        xLayer = new KDEVCLLayer(m_xContext);
+    }
+    
+    return xLayer;
+}
+
+//------------------------------------------------------------------------------
+
+uno::Reference<backend::XUpdatableLayer> SAL_CALL
+KDEBackend::getUpdatableLayer(const rtl::OUString& aComponent) 
+    throw (backend::BackendAccessException,lang::NoSupportException,	   
+		   lang::IllegalArgumentException)
+{
+    throw lang::NoSupportException( rtl::OUString(
+        RTL_CONSTASCII_USTRINGPARAM("KDEBackend: No Update Operation allowed, Read Only access") ),
+        *this) ; 
+}
+
+//------------------------------------------------------------------------------
+
+rtl::OUString SAL_CALL KDEBackend::getBackendName(void)
+{
+    return rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("com.sun.star.comp.configuration.backend.KDEBackend") );
+}
+
+//------------------------------------------------------------------------------
+
+rtl::OUString SAL_CALL KDEBackend::getImplementationName(void) 
+    throw (uno::RuntimeException) 
+{
+    return getBackendName() ;
+}
+
+//------------------------------------------------------------------------------
+
+uno::Sequence<rtl::OUString> SAL_CALL KDEBackend::getBackendServiceNames(void) 
+{
+    uno::Sequence<rtl::OUString> aServices(2) ;
+    aServices[0] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("com.sun.star.configuration.backend.KDEBackend")) ;
+    aServices[1] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("com.sun.star.configuration.backend.PlatformBackend")) ;
+            
+    return aServices ;
+}
+
+//------------------------------------------------------------------------------
+
+uno::Sequence<rtl::OUString> SAL_CALL KDEBackend::getSupportedComponents(void)
+{
+    uno::Sequence<rtl::OUString> aSupportedComponentsList(3) ;
+    aSupportedComponentsList[0] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.VCL")) ;
+    aSupportedComponentsList[1] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Inet")) ;
+    aSupportedComponentsList[2] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Office.Common")) ;
+            
+    return aSupportedComponentsList ;
+}
+
+//------------------------------------------------------------------------------
+
+sal_Bool SAL_CALL KDEBackend::supportsService(const rtl::OUString& aServiceName) 
+    throw (uno::RuntimeException) 
+{
+    uno::Sequence< rtl::OUString > const svc = getBackendServiceNames();
+
+    for(sal_Int32 i = 0; i < svc.getLength(); ++i )
+        if(svc[i] == aServiceName)
+            return true;
+
+    return false;
+}
+
+//------------------------------------------------------------------------------
+
+uno::Sequence<rtl::OUString> 
+SAL_CALL KDEBackend::getSupportedServiceNames(void) 
+    throw (uno::RuntimeException) 
+{
+    return getBackendServiceNames() ;
+}
+
+// ---------------------------------------------------------------------------------------
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdebackend.hxx	2006-03-28 10:04:20.000000000 +0200
@@ -0,0 +1,155 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef KDEBACKEND_HXX_
+#define KDEBACKEND_HXX_
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XSCHEMASUPPLIER_HPP_
+#include <com/sun/star/configuration/backend/XSingleLayerStratum.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_LANG_XINITIALIZATION_HPP_
+#include <com/sun/star/lang/XInitialization.hpp>
+#endif
+#ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HPP_
+#include <com/sun/star/uno/XComponentContext.hpp>
+#endif
+#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_INVALIDBOOTSTRAPFILEEXCEPTION_HPP_
+#include <com/sun/star/configuration/InvalidBootstrapFileException.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_CANNOTCONNECTEXCEPTION_HPP_
+#include <com/sun/star/configuration/backend/CannotConnectException.hpp>
+#endif
+
+#ifndef _CPPUHELPER_COMPBASE2_HXX_
+#include <cppuhelper/compbase2.hxx>
+#endif
+
+#ifndef INCLUDED_MAP
+#include <map>
+#define INCLUDED_MAP
+#endif
+
+namespace css = com::sun::star ;
+namespace uno = css::uno ;
+namespace lang = css::lang ;
+namespace backend = css::configuration::backend ;
+
+
+//------------------------------------------------------------------------------
+typedef cppu::WeakComponentImplHelper2<backend::XSingleLayerStratum,
+				       lang::XServiceInfo> BackendBase ;
+
+/**
+  Implements the SingleLayerStratum service for KDE access.
+  */
+class KDEBackend : public BackendBase {
+    public :
+        
+	static KDEBackend* createInstance(const uno::Reference<uno::XComponentContext>& xContext);
+
+        // XServiceInfo
+        virtual rtl::OUString SAL_CALL getImplementationName(  ) 
+            throw (uno::RuntimeException) ;
+        
+        virtual sal_Bool SAL_CALL supportsService( const rtl::OUString& aServiceName ) 
+            throw (uno::RuntimeException) ;
+
+        virtual uno::Sequence<rtl::OUString> SAL_CALL getSupportedServiceNames(  ) 
+            throw (uno::RuntimeException) ;
+
+        /**
+          Provides the implementation name.
+
+          @return   implementation name
+          */
+        static rtl::OUString SAL_CALL getBackendName(void) ;
+
+        /**
+          Provides the supported services names
+
+          @return   service names
+          */
+        static uno::Sequence<rtl::OUString> SAL_CALL getBackendServiceNames(void) ;
+
+        /**
+          Provides the supported component nodes
+
+          @return supported component nodes
+        */
+        static uno::Sequence<rtl::OUString> SAL_CALL getSupportedComponents(void) ;
+        
+        //XSingleLayerStratum
+        virtual uno::Reference<backend::XLayer> SAL_CALL 
+            getLayer( const rtl::OUString& aLayerId, const rtl::OUString& aTimestamp )
+                throw (backend::BackendAccessException, lang::IllegalArgumentException) ;
+
+        virtual uno::Reference<backend::XUpdatableLayer> SAL_CALL
+            getUpdatableLayer( const rtl::OUString& aLayerId ) 
+                throw (backend::BackendAccessException, lang::NoSupportException,	   
+                       lang::IllegalArgumentException) ;
+
+    protected:
+        /**
+          Service constructor from a service factory.
+
+          @param xContext   component context
+          */
+         KDEBackend(const uno::Reference<uno::XComponentContext>& xContext) 
+            throw (backend::BackendAccessException);
+                        
+        /** Destructor */
+        ~KDEBackend(void) ;
+
+    private:
+     
+        /** Build KDE/OO mapping table */ 
+		void initializeMappingTable ();
+
+        
+        /** The component context */		
+        uno::Reference<uno::XComponentContext> m_xContext;
+		
+        /** Mutex for reOOurces protection */
+        osl::Mutex mMutex ;
+
+        static KDEBackend* mInstance;
+};
+
+#endif // CONFIGMGR_LOCALBE_LOCALSINGLESTRATUM_HXX_
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdebecdef.cxx	2006-03-29 16:19:07.000000000 +0200
@@ -0,0 +1,160 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef KDEBACKEND_HXX_
+#include "kdebackend.hxx"
+#endif
+
+#ifndef _COM_SUN_STAR_REGISTRY_XREGISTRYKEY_HPP_
+#include <com/sun/star/registry/XRegistryKey.hpp>
+#endif
+
+#ifndef _CPPUHELPER_IMPLEMENTATIONENTRY_HXX_
+#include <cppuhelper/implementationentry.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HPP_
+#include <com/sun/star/uno/XComponentContext.hpp>
+#endif
+
+#include "uno/current_context.hxx"
+
+namespace css = com::sun::star ;
+namespace uno = css::uno ;
+namespace lang = css::lang ;
+namespace backend = css::configuration::backend ;
+
+//==============================================================================
+
+static uno::Reference<uno::XInterface> SAL_CALL createKDEBackend(const uno::Reference<uno::XComponentContext>& xContext)
+{
+    try {
+        uno::Reference< uno::XCurrentContext > xCurrentContext(uno::getCurrentContext());
+        
+        if (xCurrentContext.is())
+        {
+            uno::Any aValue = xCurrentContext->getValueByName(
+                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "system.desktop-environment" ) ) );
+        
+            rtl::OUString aDesktopEnvironment;
+            if ( (aValue >>= aDesktopEnvironment) && (aDesktopEnvironment.equalsAscii("KDE")) )
+                return * KDEBackend::createInstance(xContext);
+        }
+        
+        return uno::Reference<uno::XInterface>(); 
+        
+    } catch (uno::RuntimeException e) {
+        return uno::Reference<uno::XInterface>();    
+    }    
+    
+}
+
+//==============================================================================
+
+static const cppu::ImplementationEntry kImplementations_entries[] = 
+{
+    {
+        createKDEBackend,
+        KDEBackend::getBackendName,
+        KDEBackend::getBackendServiceNames,
+        cppu::createSingleComponentFactory,
+        NULL,
+        0
+    },
+	{ NULL }
+} ;
+//------------------------------------------------------------------------------
+
+extern "C" void SAL_CALL component_getImplementationEnvironment(
+                                            const sal_Char **aEnvTypeName,
+                                            uno_Environment **aEnvironment) {
+    *aEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME ;
+}
+
+//------------------------------------------------------------------------------
+
+extern "C" sal_Bool SAL_CALL component_writeInfo(void *pServiceManager,
+                                                 void *pRegistryKey) {
+    
+    using namespace ::com::sun::star::registry;
+    if (pRegistryKey)
+    {
+        try
+        {
+            uno::Reference< XRegistryKey > xImplKey = static_cast< XRegistryKey* >( pRegistryKey )->createKey(
+                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("/") ) + KDEBackend::getBackendName()
+            );
+            
+	    // Register associated service names
+            uno::Reference< XRegistryKey > xServicesKey = xImplKey->createKey( 
+                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("/UNO/SERVICES") )
+            );
+            
+            uno::Sequence<rtl::OUString> sServiceNames = KDEBackend::getBackendServiceNames();
+            for (sal_Int32 i = 0 ; i < sServiceNames.getLength() ; ++ i)
+                xServicesKey->createKey(sServiceNames[i]);
+
+            // Register supported components            
+            uno::Reference<XRegistryKey> xComponentKey = xImplKey->createKey(
+                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("/DATA/SupportedComponents") )
+            );
+        
+            xComponentKey->setAsciiListValue( KDEBackend::getSupportedComponents() );
+
+            return sal_True;
+        }
+        
+        catch( InvalidRegistryException& )
+        {                       
+            OSL_ENSURE(sal_False, "InvalidRegistryException caught");           
+        }
+    }
+    
+    return sal_False;
+}
+
+//------------------------------------------------------------------------------
+
+extern "C" void *component_getFactory(const sal_Char *aImplementationName,
+                                      void *aServiceManager,
+                                      void *aRegistryKey) {
+                                      
+    return cppu::component_getFactoryHelper(
+        aImplementationName,
+        aServiceManager,
+        aRegistryKey,
+        kImplementations_entries) ;
+}
+//------------------------------------------------------------------------------
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdebe.xml	2006-03-28 09:53:57.000000000 +0200
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE module-description PUBLIC "-//StarOffice//DTD ComponentDescription 1.0//EN" "module-description.dtd">
+<module-description xmlns:xlink="http://www.w3.org/1999/xlink">
+    <module-name>kdebe</module-name>
+    <component-description>
+        <author> Éric Bischoff </author>
+        <name>com.sun.star.comp.configuration.backend.KDEBackend</name>
+        <description> The KDE configuration backend </description>
+        <loader-name>com.sun.star.loader.SharedLibrary</loader-name>
+        <language>c++</language>
+        <status value="beta"/>        
+        <supported-service>com.sun.star.comp.configuration.backend.KDEBackend</supported-service>		
+        <supported-service>com.sun.star.comp.configuration.backend.PlatformBackend</supported-service>		
+        <service-dependency>...</service-dependency>
+        <type>com.sun.star.configuration.backend.XBackendChangesListener</type>
+        <type>com.sun.star.configuration.backend.XBackendChangesNotifier</type>
+        <type>com.sun.star.configuration.backend.XLayerHandler</type>
+        <type>com.sun.star.configuration.backend.XSingleLayerStratum</type>
+        <type>com.sun.star.lang.XMultiComponentFactory</type>
+        <type>com.sun.star.lang.XServiceInfo</type>
+        <type>com.sun.star.lang.XSingleComponentFactory</type>
+        <type>com.sun.star.lang.XTypeProvider</type>
+        <type>com.sun.star.uno.TypeClass</type>
+        <type>com.sun.star.uno.XAggregation</type>
+        <type>com.sun.star.uno.XComponentContext</type>
+        <type>com.sun.star.uno.XCurrentContext</type>
+        <type>com.sun.star.uno.XWeak</type>
+        <type>com.sun.star.registry.XRegistryKey</type>
+    </component-description>
+    <project-build-dependency>cppuhelper</project-build-dependency>
+    <project-build-dependency>cppu</project-build-dependency>
+    <project-build-dependency>sal</project-build-dependency>
+    <runtime-module-dependency>cppuhelper3$(COM)</runtime-module-dependency>
+    <runtime-module-dependency>cppu3</runtime-module-dependency>
+    <runtime-module-dependency>sal3</runtime-module-dependency>
+</module-description>
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdebe1-ucd.txt	2006-03-29 09:57:12.000000000 +0200
@@ -0,0 +1,9 @@
+[ComponentDescriptor]
+ImplementationName=com.sun.star.comp.configuration.backend.KDEBackend
+ComponentName=kdebe1.uno.so
+LoaderName=com.sun.star.loader.SharedLibrary
+[Data]
+SupportedComponents=org.openoffice.VCL;org.openoffice.Inet;org.openoffice.Office.Common
+[SupportedServices]
+com.sun.star.configuration.backend.KDEBackend
+com.sun.star.configuration.backend.PlatformBackend
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdecommonlayer.cxx	2006-04-04 16:12:17.000000000 +0200
@@ -0,0 +1,169 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef KDECOMMONLAYER_HXX_
+#include "kdecommonlayer.hxx"
+#endif 
+
+#ifndef _KEMAILSETTINGS_H
+#include "kemailsettings.h"
+#endif
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_PROPERTYINFO_HPP_
+#include <com/sun/star/configuration/backend/PropertyInfo.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif
+
+#ifndef _OSL_SECURITY_HXX_
+#include <osl/security.hxx>
+#endif
+#ifndef _OSL_FILE_HXX_
+#include <osl/file.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_SEQUENCE_HXX_
+#include <com/sun/star/uno/Sequence.hxx>
+#endif
+
+#define SPACE      ' '
+
+//==============================================================================
+
+KDECommonLayer::KDECommonLayer(const uno::Reference<uno::XComponentContext>& xContext)
+{
+    //Create instance of LayerContentDescriber Service
+    rtl::OUString const k_sLayerDescriberService(RTL_CONSTASCII_USTRINGPARAM(
+        "com.sun.star.comp.configuration.backend.LayerDescriber"));
+
+    typedef uno::Reference<backend::XLayerContentDescriber> LayerDescriber; 
+    uno::Reference< lang::XMultiComponentFactory > xServiceManager = xContext->getServiceManager();
+    if( xServiceManager.is() )
+    {
+        m_xLayerContentDescriber = LayerDescriber::query(
+            xServiceManager->createInstanceWithContext(k_sLayerDescriberService, xContext));
+    }
+    else
+    {
+        OSL_TRACE("Could not retrieve ServiceManager");
+    }
+}
+
+//------------------------------------------------------------------------------
+
+void SAL_CALL KDECommonLayer::readData( const uno::Reference<backend::XLayerHandler>& xHandler) 
+    throw ( backend::MalformedDataException, lang::NullPointerException, 
+            lang::WrappedTargetException, uno::RuntimeException)
+{
+    if( ! m_xLayerContentDescriber.is() )
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+            "Could not create com.sun.star.configuration.backend.LayerContentDescriber Service"
+        ) ), static_cast < backend::XLayer * > (this) );
+    }
+    
+    uno::Sequence<backend::PropertyInfo> aPropInfoList(2);
+    sal_Int32 nProperties = 0;
+
+    KEMailSettings aEmailSettings;
+    QString aClientProgram;
+    ::rtl::OUString sClientProgram;
+
+    aClientProgram = aEmailSettings.getSetting( KEMailSettings::ClientProgram );
+    if ( aClientProgram.isEmpty() )
+        aClientProgram = "kmail";
+    else
+        aClientProgram = aClientProgram.section(SPACE, 0, 0);
+    sClientProgram = (const sal_Unicode *) aClientProgram.ucs2();
+
+    aPropInfoList[nProperties].Name = rtl::OUString(
+        RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Office.Common/ExternalMailer/Program") );
+    aPropInfoList[nProperties].Type = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM( "string" ) );
+    aPropInfoList[nProperties].Protected = sal_False;
+    aPropInfoList[nProperties++].Value = uno::makeAny( sClientProgram );
+
+    osl::Security aSecurity;
+    rtl::OUString aDocumentsDirURL;
+    if ( aSecurity.getHomeDir(aDocumentsDirURL) )
+    {
+	    aDocumentsDirURL += rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "/Documents" ));
+	    osl::Directory aDocumentsDir(aDocumentsDirURL);
+
+        if( osl::FileBase::E_None == aDocumentsDir.open() )
+        {
+            aDocumentsDir.close();
+
+            // Set default document directory to ~/Documents
+            aPropInfoList[nProperties].Name = rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Office.Common/Path/Current/Work") );
+            aPropInfoList[nProperties].Type = rtl::OUString( 
+                RTL_CONSTASCII_USTRINGPARAM( "string" ) );
+            aPropInfoList[nProperties].Protected = sal_False;
+            aPropInfoList[nProperties++].Value = uno::makeAny( rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM( "$(work)/Documents" ) ) );
+        }
+    }
+
+    if( nProperties > 0 )
+    {
+        aPropInfoList.realloc(nProperties);
+        m_xLayerContentDescriber->describeLayer(xHandler, aPropInfoList);
+    }
+}
+
+//------------------------------------------------------------------------------
+
+rtl::OUString SAL_CALL KDECommonLayer::getTimestamp(void) 
+    throw (uno::RuntimeException)
+{
+    // Return the value as timestamp to avoid regenerating the binary cache
+    // on each office launch.
+
+    ::rtl::OUString sTimeStamp,
+                    sep( RTL_CONSTASCII_USTRINGPARAM( "$" ) );
+
+    KEMailSettings aEmailSettings;
+    QString aClientProgram = aEmailSettings.getSetting( KEMailSettings::ClientProgram );
+    aClientProgram = aClientProgram.section(SPACE, 0, 0);
+
+    sTimeStamp = (const sal_Unicode *) aClientProgram.ucs2();
+    sTimeStamp += sep;
+    sTimeStamp += rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM( "Documents" ) );
+
+    return sTimeStamp;
+}
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdecommonlayer.hxx	2006-03-29 21:19:29.000000000 +0200
@@ -0,0 +1,72 @@
+#ifndef KDECOMMONLAYER_HXX_
+#define KDECOMMONLAYER_HXX_
+
+#ifndef KDEBACKEND_HXX_
+#include "kdebackend.hxx"
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HPP_
+#include <com/sun/star/uno/XComponentContext.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYER_HPP_
+#include <com/sun/star/configuration/backend/XLayer.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_BACKENDACCESSEXCEPTION_HPP_
+#include <com/sun/star/configuration/backend/BackendAccessException.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UTIL_XTIMESTAMPED_HPP_
+#include <com/sun/star/util/XTimeStamped.hpp>
+#endif
+
+#ifndef _CPPUHELPER_IMPLBASE2_HXX_
+#include <cppuhelper/implbase2.hxx>
+#endif
+
+namespace css = com::sun::star ;
+namespace uno = css::uno ;
+namespace lang = css::lang ;
+namespace backend = css::configuration::backend ;
+namespace util = css::util ;
+
+/**
+  Implementation of the XLayer interface for the KDE values mapped into
+  the org.openoffice.Office.Common configuration component.
+  */
+class KDECommonLayer : public cppu::WeakImplHelper2<backend::XLayer, util::XTimeStamped> 
+{
+public :
+    /**
+      Constructor given the component context
+
+      @param xContext       The component context
+    */
+    
+    KDECommonLayer(const uno::Reference<uno::XComponentContext>& xContext);
+
+    // XLayer
+    virtual void SAL_CALL readData(
+        const uno::Reference<backend::XLayerHandler>& xHandler) 
+        throw ( backend::MalformedDataException,
+            lang::NullPointerException, 
+            lang::WrappedTargetException, 
+            uno::RuntimeException) ;
+
+    // XTimeStamped
+    virtual rtl::OUString SAL_CALL getTimestamp(void) 
+        throw (uno::RuntimeException);
+
+    protected:
+
+    /** Destructor */
+    ~KDECommonLayer(void) {}
+              
+    private :
+        uno::Reference<backend::XLayerContentDescriber> m_xLayerContentDescriber ;
+  } ;
+
+#endif // KDECOMMONLAYER
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdeinetlayer.cxx	2006-03-29 21:19:29.000000000 +0200
@@ -0,0 +1,237 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef KDEINETLAYER_HXX_
+#include "kdeinetlayer.hxx"
+#endif 
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_PROPERTYINFO_HPP_
+#include <com/sun/star/configuration/backend/PropertyInfo.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_SEQUENCE_HXX_
+#include <com/sun/star/uno/Sequence.hxx>
+#endif
+
+#include <kprotocolmanager.h>
+
+#define COLON      ':'
+#define COMMA      ','
+#define SEMI_COLON ';'
+
+//==============================================================================
+
+KDEInetLayer::KDEInetLayer(const uno::Reference<uno::XComponentContext>& xContext)
+{
+    //Create instance of LayerContentDescriber Service
+    rtl::OUString const k_sLayerDescriberService(RTL_CONSTASCII_USTRINGPARAM(
+        "com.sun.star.comp.configuration.backend.LayerDescriber"));
+
+    typedef uno::Reference<backend::XLayerContentDescriber> LayerDescriber; 
+    uno::Reference< lang::XMultiComponentFactory > xServiceManager = xContext->getServiceManager();
+    if( xServiceManager.is() )
+    {
+        m_xLayerContentDescriber = LayerDescriber::query(
+            xServiceManager->createInstanceWithContext(k_sLayerDescriberService, xContext));
+    }
+    else
+    {
+        OSL_TRACE("Could not retrieve ServiceManager");
+    }
+}
+
+//------------------------------------------------------------------------------
+
+void SAL_CALL KDEInetLayer::readData( const uno::Reference<backend::XLayerHandler>& xHandler) 
+    throw ( backend::MalformedDataException, lang::NullPointerException, 
+            lang::WrappedTargetException, uno::RuntimeException)
+{
+    if( ! m_xLayerContentDescriber.is() )
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+            "Could not create com.sun.star.configuration.backend.LayerContentDescriber Service"
+        ) ), static_cast < backend::XLayer * > (this) );
+    }
+
+    uno::Sequence<backend::PropertyInfo> aPropInfoList(6);
+    sal_Int32 nProperties = 0;
+
+    KProtocolManager::ProxyType aProxyType = KProtocolManager::proxyType();
+
+    switch ( KProtocolManager::proxyType() )
+    {
+        case KProtocolManager::ManualProxy: // Proxies are manually configured
+        {
+            QString aNoProxyFor, aProxy, aPort;
+            ::rtl::OUString sNoProxyFor, sProxy;
+            sal_Int32 nPort;
+
+            aPropInfoList[nProperties].Name = rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Inet/Settings/ooInetProxyType") );
+            aPropInfoList[nProperties].Type = rtl::OUString( 
+                RTL_CONSTASCII_USTRINGPARAM( "int" ) );
+            aPropInfoList[nProperties].Protected = sal_False;
+            aPropInfoList[nProperties++].Value = uno::makeAny( (sal_Int32) 1 );
+
+            aNoProxyFor = KProtocolManager::noProxyFor();
+
+            if ( !aNoProxyFor.isEmpty() )
+            {
+                aNoProxyFor = aNoProxyFor.replace( COMMA, SEMI_COLON );
+                sNoProxyFor = (const sal_Unicode *) aNoProxyFor.ucs2();
+
+                aPropInfoList[nProperties].Name = rtl::OUString( 
+                    RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Inet/Settings/ooInetNoProxy") );
+                aPropInfoList[nProperties].Type = rtl::OUString( 
+                    RTL_CONSTASCII_USTRINGPARAM( "string" ) );
+                aPropInfoList[nProperties].Protected = sal_False;
+                aPropInfoList[nProperties++].Value = uno::makeAny( sNoProxyFor );
+            }
+
+            aProxy = KProtocolManager::proxyFor( "HTTP" );
+
+            if ( !aProxy.isEmpty() )
+            {
+                aPort = "";
+                if (aProxy.startsWith( "http://" ))
+                    aProxy = aProxy.remove(0, 7);
+                if (aProxy.contains( COLON ))
+                {
+                    aPort = aProxy.section(COLON, 1, 1);
+                    aProxy = aProxy.section(COLON, 0, 0);
+                }
+                sProxy = (const sal_Unicode *) aProxy.ucs2();
+                nPort = aPort.toUInt();
+
+                aPropInfoList[nProperties].Name = rtl::OUString(
+                    RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Inet/Settings/ooInetHTTPProxyName") );
+                aPropInfoList[nProperties].Type = rtl::OUString( 
+                    RTL_CONSTASCII_USTRINGPARAM( "string" ) );
+                aPropInfoList[nProperties].Protected = sal_False;
+                aPropInfoList[nProperties++].Value = uno::makeAny( sProxy );
+
+                aPropInfoList[nProperties].Name = rtl::OUString(
+                    RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Inet/Settings/ooInetHTTPProxyPort") );
+                aPropInfoList[nProperties].Type = rtl::OUString( 
+                    RTL_CONSTASCII_USTRINGPARAM( "int" ) );
+                aPropInfoList[nProperties].Protected = sal_False;
+                aPropInfoList[nProperties++].Value = uno::makeAny( nPort );
+            }
+
+            aProxy = KProtocolManager::proxyFor( "FTP" );
+
+            if ( !aProxy.isEmpty() )
+            {
+                aPort = "";
+                if (aProxy.startsWith( "ftp://" ))
+                    aProxy = aProxy.remove(0, 6);
+                if (aProxy.contains( COLON ))
+                {
+                    aPort = aProxy.section(COLON, 1, 1);
+                    aProxy = aProxy.section(COLON, 0, 0);
+                }
+                sProxy = (const sal_Unicode *) aProxy.ucs2();
+                nPort = aPort.toUInt();
+
+                aPropInfoList[nProperties].Name = rtl::OUString(
+                    RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Inet/Settings/ooInetFTPProxyName") );
+                aPropInfoList[nProperties].Type = rtl::OUString( 
+                    RTL_CONSTASCII_USTRINGPARAM( "string" ) );
+                aPropInfoList[nProperties].Protected = sal_False;
+                aPropInfoList[nProperties++].Value = uno::makeAny( sProxy );
+
+                aPropInfoList[nProperties].Name = rtl::OUString(
+                    RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Inet/Settings/ooInetFTPProxyPort") );
+                aPropInfoList[nProperties].Type = rtl::OUString( 
+                    RTL_CONSTASCII_USTRINGPARAM( "int" ) );
+                aPropInfoList[nProperties].Protected = sal_False;
+                aPropInfoList[nProperties++].Value = uno::makeAny( nPort );
+            }
+        }
+            break;
+
+        case KProtocolManager::NoProxy:     // No proxy is used
+
+        case KProtocolManager::PACProxy:    // A proxy configuration URL has been given
+        case KProtocolManager::WPADProxy:   // A proxy should be automatically discovered
+        case KProtocolManager::EnvVarProxy: // Use the proxy values set through environment variables
+// TODO: last three cases are not handled correctly yet!
+        {
+            aPropInfoList[nProperties].Name = rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Inet/Settings/ooInetProxyType") );
+            aPropInfoList[nProperties].Type = rtl::OUString( 
+                RTL_CONSTASCII_USTRINGPARAM( "int" ) );
+            aPropInfoList[nProperties].Protected = sal_False;
+            aPropInfoList[nProperties++].Value = uno::makeAny( (sal_Int32) 0 );
+        }
+    }
+
+    if( nProperties > 0 )
+    {
+      aPropInfoList.realloc(nProperties);
+      m_xLayerContentDescriber->describeLayer(xHandler, aPropInfoList);
+    }
+}
+
+//------------------------------------------------------------------------------
+
+rtl::OUString SAL_CALL KDEInetLayer::getTimestamp(void) 
+    throw (uno::RuntimeException)
+{
+    // Return the value as timestamp to avoid regenerating the binary cache
+    // on each office launch.
+
+    ::rtl::OUString sTimeStamp,
+                    sep( RTL_CONSTASCII_USTRINGPARAM( "$" ) );
+
+    QString aProxyType, aNoProxyFor, aHTTPProxy, aFTPProxy;
+    aProxyType = '0' + (int) KProtocolManager::proxyType();
+    aNoProxyFor = KProtocolManager::noProxyFor();
+    aHTTPProxy = KProtocolManager::proxyFor( "HTTP" );
+    aFTPProxy = KProtocolManager::proxyFor( "FTP" );
+
+    sTimeStamp = (const sal_Unicode *) aProxyType.ucs2();
+    sTimeStamp += sep;
+    sTimeStamp += (const sal_Unicode *) aNoProxyFor.ucs2();
+    sTimeStamp += sep;
+    sTimeStamp += (const sal_Unicode *) aHTTPProxy.ucs2();
+    sTimeStamp += sep;
+    sTimeStamp += (const sal_Unicode *) aFTPProxy.ucs2();
+
+    return sTimeStamp;
+}
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdeinetlayer.hxx	2006-03-29 21:19:29.000000000 +0200
@@ -0,0 +1,72 @@
+#ifndef KDEINETLAYER_HXX_
+#define KDEINETLAYER_HXX_
+
+#ifndef KDEBACKEND_HXX_
+#include "kdebackend.hxx"
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HPP_
+#include <com/sun/star/uno/XComponentContext.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYER_HPP_
+#include <com/sun/star/configuration/backend/XLayer.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_BACKENDACCESSEXCEPTION_HPP_
+#include <com/sun/star/configuration/backend/BackendAccessException.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UTIL_XTIMESTAMPED_HPP_
+#include <com/sun/star/util/XTimeStamped.hpp>
+#endif
+
+#ifndef _CPPUHELPER_IMPLBASE2_HXX_
+#include <cppuhelper/implbase2.hxx>
+#endif
+
+namespace css = com::sun::star ;
+namespace uno = css::uno ;
+namespace lang = css::lang ;
+namespace backend = css::configuration::backend ;
+namespace util = css::util ;
+
+/**
+  Implementation of the XLayer interface for the KDE values mapped into
+  the org.openoffice.Inet configuration component.
+  */
+class KDEInetLayer : public cppu::WeakImplHelper2<backend::XLayer, util::XTimeStamped> 
+{
+public :
+    /**
+      Constructor given the component context
+
+      @param xContext       The component context
+    */
+
+    KDEInetLayer(const uno::Reference<uno::XComponentContext>& xContext);
+
+    // XLayer
+    virtual void SAL_CALL readData(
+        const uno::Reference<backend::XLayerHandler>& xHandler) 
+        throw ( backend::MalformedDataException,
+                lang::NullPointerException, 
+                lang::WrappedTargetException, 
+                uno::RuntimeException) ;
+    
+    // XTimeStamped
+    virtual rtl::OUString SAL_CALL getTimestamp(void) 
+        throw (uno::RuntimeException);
+
+    protected:
+
+    /** Destructor */
+    ~KDEInetLayer(void) {}
+              
+private :
+    uno::Reference<backend::XLayerContentDescriber> m_xLayerContentDescriber ;
+  } ;
+
+#endif // KDEINETLAYER
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdevcllayer.cxx	2006-04-04 11:43:58.000000000 +0200
@@ -0,0 +1,117 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef KDEVCLLAYER_HXX_
+#include "kdevcllayer.hxx"
+#endif 
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_PROPERTYINFO_HPP_
+#include <com/sun/star/configuration/backend/PropertyInfo.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_SEQUENCE_HXX_
+#include <com/sun/star/uno/Sequence.hxx>
+#endif
+
+// Depends on QT_ACCESSIBILITY_SUPPORT compile-time flag
+// #ifndef QACCESSIBLE_H
+// #include "qaccessible.h"
+// #endif
+
+//==============================================================================
+
+KDEVCLLayer::KDEVCLLayer(const uno::Reference<uno::XComponentContext>& xContext)
+{
+    //Create instance of LayerContentDescriber Service
+    rtl::OUString const k_sLayerDescriberService(RTL_CONSTASCII_USTRINGPARAM(
+        "com.sun.star.comp.configuration.backend.LayerDescriber"));
+
+    typedef uno::Reference<backend::XLayerContentDescriber> LayerDescriber; 
+    uno::Reference< lang::XMultiComponentFactory > xServiceManager = xContext->getServiceManager();
+    if( xServiceManager.is() )
+    {
+        m_xLayerContentDescriber = LayerDescriber::query(
+            xServiceManager->createInstanceWithContext(k_sLayerDescriberService, xContext));
+    }
+    else
+    {
+        OSL_TRACE("Could not retrieve ServiceManager");
+    }
+}
+
+//------------------------------------------------------------------------------
+
+void SAL_CALL KDEVCLLayer::readData( const uno::Reference<backend::XLayerHandler>& xHandler) 
+    throw ( backend::MalformedDataException, lang::NullPointerException, 
+            lang::WrappedTargetException, uno::RuntimeException)
+{
+    if( ! m_xLayerContentDescriber.is() )
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+            "Could not create com.sun.star.configuration.backend.LayerContentDescriber Service"
+        ) ), static_cast < backend::XLayer * > (this) );
+    }
+    
+    uno::Sequence<backend::PropertyInfo> aPropInfoList(1);
+    
+    aPropInfoList[0].Name = rtl::OUString(
+        RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.VCL/Settings/Accessibility/EnableATToolSupport") );
+    aPropInfoList[0].Type = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM( "string" ) );
+    aPropInfoList[0].Protected = sal_False;
+    aPropInfoList[0].Value = uno::makeAny(
+//    rtl::OUString::valueOf( (sal_Bool) QAccessible::isActive() ) );
+    rtl::OUString::valueOf( (sal_Bool) false ) );
+//  TODO: to be fixed
+
+    m_xLayerContentDescriber->describeLayer(xHandler, aPropInfoList);
+}
+
+//------------------------------------------------------------------------------
+
+rtl::OUString SAL_CALL KDEVCLLayer::getTimestamp(void) 
+    throw (uno::RuntimeException)
+{
+    // Return the value as timestamp to avoid regenerating the binary cache
+    // on each office launch.
+
+    ::rtl::OUString sTimeStamp(
+                RTL_CONSTASCII_USTRINGPARAM( "FALSE" ) );
+
+    return sTimeStamp;
+}
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/kdevcllayer.hxx	2006-03-29 21:19:29.000000000 +0200
@@ -0,0 +1,72 @@
+#ifndef KDEVCLLAYER_HXX_
+#define KDEVCLLAYER_HXX_
+
+#ifndef KDEBACKEND_HXX_
+#include "kdebackend.hxx"
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HPP_
+#include <com/sun/star/uno/XComponentContext.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYER_HPP_
+#include <com/sun/star/configuration/backend/XLayer.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_BACKENDACCESSEXCEPTION_HPP_
+#include <com/sun/star/configuration/backend/BackendAccessException.hpp>
+#endif
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UTIL_XTIMESTAMPED_HPP_
+#include <com/sun/star/util/XTimeStamped.hpp>
+#endif
+
+#ifndef _CPPUHELPER_IMPLBASE2_HXX_
+#include <cppuhelper/implbase2.hxx>
+#endif
+
+namespace css = com::sun::star ;
+namespace uno = css::uno ;
+namespace lang = css::lang ;
+namespace backend = css::configuration::backend ;
+namespace util = css::util ;
+
+/**
+  Implementation of the XLayer interface for the KDE values mapped into
+  the org.openoffice.VCL configuration component.
+  */
+class KDEVCLLayer : public cppu::WeakImplHelper2<backend::XLayer, util::XTimeStamped> 
+{
+public :
+    /**
+      Constructor given the component context
+
+      @param xContext       The component context
+    */
+    
+    KDEVCLLayer(const uno::Reference<uno::XComponentContext>& xContext);
+
+    // XLayer
+    virtual void SAL_CALL readData(
+        const uno::Reference<backend::XLayerHandler>& xHandler) 
+        throw ( backend::MalformedDataException,
+            lang::NullPointerException, 
+            lang::WrappedTargetException, 
+            uno::RuntimeException) ;
+
+    // XTimeStamped
+    virtual rtl::OUString SAL_CALL getTimestamp(void) 
+        throw (uno::RuntimeException);
+
+    protected:
+
+    /** Destructor */
+    ~KDEVCLLayer(void) {}
+              
+    private :
+        uno::Reference<backend::XLayerContentDescriber> m_xLayerContentDescriber ;
+  } ;
+
+#endif // KDEVCLLAYER
--- /dev/null	2006-01-31 01:27:56.000000000 +0100
+++ shell/source/backends/kdebe/makefile.mk	2006-03-29 16:19:08.000000000 +0200
@@ -0,0 +1,90 @@
+#*************************************************************************
+#
+#   OpenOffice.org - a multi-platform office productivity suite
+#
+#   $RCSfile$
+#
+#   $Revision$
+#
+#   last change: $Author$ $Date$
+#
+#   The Contents of this file are made available subject to
+#   the terms of GNU Lesser General Public License Version 2.1.
+#
+#
+#     GNU Lesser General Public License Version 2.1
+#     =============================================
+#     Copyright 2005 by Sun Microsystems, Inc.
+#     901 San Antonio Road, Palo Alto, CA 94303, USA
+#
+#     This library is free software; you can redistribute it and/or
+#     modify it under the terms of the GNU Lesser General Public
+#     License version 2.1, as published by the Free Software Foundation.
+#
+#     This library is distributed in the hope that it will be useful,
+#     but WITHOUT ANY WARRANTY; without even the implied warranty of
+#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#     Lesser General Public License for more details.
+#
+#     You should have received a copy of the GNU Lesser General Public
+#     License along with this library; if not, write to the Free Software
+#     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+#     MA  02111-1307  USA
+#
+#*************************************************************************
+PRJ=..$/..$/..
+
+PRJNAME=shell
+TARGET=kdebe
+
+LIBTARGET=NO
+ENABLE_EXCEPTIONS=TRUE
+
+COMP1TYPELIST=$(TARGET)
+COMPRDB=$(SOLARBINDIR)$/types.rdb
+UNOUCROUT=$(OUT)$/inc$/$(TARGET)
+INCPRE=$(UNOUCROUT)
+
+# --- Settings ---
+
+.INCLUDE : settings.mk
+
+UNIXTEXT=$(MISC)/$(TARGET)1-ucd.txt
+
+# no "lib" prefix
+DLLPRE =
+
+.IF "$(ENABLE_KAB)" == "TRUE"
+
+CFLAGS+=$(KDE_CFLAGS)
+
+# --- Files ---
+
+SLOFILES=\
+	$(SLO)$/kdebackend.obj \
+	$(SLO)$/kdecommonlayer.obj \
+	$(SLO)$/kdeinetlayer.obj \
+	$(SLO)$/kdevcllayer.obj \
+	$(SLO)$/kdebecdef.obj
+
+SHL1NOCHECK=TRUE
+SHL1TARGET=$(TARGET)1.uno   
+SHL1OBJS=$(SLOFILES)
+SHL1DEF=$(MISC)$/$(SHL1TARGET).def
+
+SHL1IMPLIB=i$(SHL1TARGET)
+SHL1STDLIBS=    \
+        $(CPPUHELPERLIB) \
+        $(CPPULIB) \
+        $(SALLIB) \
+        $(KDE_LIBS) -lkio
+        
+SHL1VERSIONMAP=exports.map
+SHL1DEF=$(MISC)$/$(SHL1TARGET).def
+DEF1NAME=$(SHL1TARGET)
+
+.ENDIF          # "$(ENABLE_KDE)" == "TRUE"
+
+# --- Targets ---
+
+.INCLUDE : target.mk
