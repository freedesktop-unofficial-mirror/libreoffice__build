--- vcl/source/glyphs/gcach_ftyp.cxx.ark	2006-05-17 20:01:52.000000000 +0200
+++ vcl/source/glyphs/gcach_ftyp.cxx	2006-05-17 23:13:07.000000000 +0200
@@ -90,21 +90,25 @@
     #define strncasecmp strnicmp
 #endif
 
-#include "freetype/internal/ftobjs.h"
-#include "freetype/internal/sfnt.h"
-#include "freetype/internal/ftstream.h"
-
 #include <svapp.hxx>
 #include <settings.hxx>
 #include <i18npool/lang.h>
 
-#if defined( FT_NEXT_SHORT ) && !defined( NEXT_Short )
-// Account for differing versions of freetype...
-#define NEXT_Short( x )  FT_NEXT_SHORT( x )
-#define NEXT_UShort( x ) FT_NEXT_USHORT( x )
-#define NEXT_Long( x )   FT_NEXT_LONG( x )
-#define NEXT_ULong( x )  FT_NEXT_ULONG( x )
-#endif
+#define NEXT_Short( x )					\
+	( x += 2,					\
+	  ( (short)( (signed   char)x[-2] << 8 ) |	\
+	             (unsigned char)x[-1]        ) )
+
+#define NEXT_UShort( x ) ( (unsigned short)NEXT_Short( x ) )
+
+#define NEXT_Long( x )					\
+	( x += 4,					\
+	  ( ( (long)(signed   char)x[-4] << 24 ) |	\
+	    ( (long)(unsigned char)x[-3] << 16 ) |	\
+	    ( (long)(unsigned char)x[-2] <<  8 ) |	\
+	      (long)(unsigned char)x[-1]         ) )
+
+#define NEXT_ULong( x )  ( (unsigned long)NEXT_Long( x ) )
 
 // -----------------------------------------------------------------------
 
@@ -2074,7 +2078,16 @@
 // TODO: wait till all compilers accept that calling conventions
 // for functions are the same independent of implementation constness,
 // then uncomment the const-tokens in the function interfaces below
-static int FT_move_to( FT_Vector* /*const*/ p0, void* vpPolyArgs )
+// 
+// Starting with FreeType 2.2, the const-ness is actually needed - it has
+// been added to the function definitions and a cast from const to non-const
+// is never explicit.
+#if FTVERSION >= 2200
+#define FT_CONST const
+#else
+#define FT_CONST
+#endif
+static int FT_move_to( FT_Vector FT_CONST* p0, void* vpPolyArgs )
 {
     PolyArgs& rA = *reinterpret_cast<PolyArgs*>(vpPolyArgs);
 
@@ -2085,14 +2098,14 @@
     return 0;
 }
 
-static int FT_line_to( FT_Vector* /*const*/ p1, void* vpPolyArgs )
+static int FT_line_to( FT_Vector FT_CONST* p1, void* vpPolyArgs )
 {
     PolyArgs& rA = *reinterpret_cast<PolyArgs*>(vpPolyArgs);
     rA.AddPoint( p1->x, p1->y, POLY_NORMAL );
     return 0;
 }
 
-static int FT_conic_to( FT_Vector* /*const*/ p1, FT_Vector* /*const*/ p2, void* vpPolyArgs )
+static int FT_conic_to( FT_Vector FT_CONST* p1, FT_Vector FT_CONST* p2, void* vpPolyArgs )
 {
     PolyArgs& rA = *reinterpret_cast<PolyArgs*>(vpPolyArgs);
 
@@ -2109,7 +2122,7 @@
     return 0;
 }
 
-static int FT_cubic_to( FT_Vector* /*const*/ p1, FT_Vector* /*const*/ p2, FT_Vector* /*const*/ p3, void* vpPolyArgs )
+static int FT_cubic_to( FT_Vector FT_CONST* p1, FT_Vector FT_CONST* p2, FT_Vector FT_CONST* p3, void* vpPolyArgs )
 {
     PolyArgs& rA = *reinterpret_cast<PolyArgs*>(vpPolyArgs);
     rA.AddPoint( p1->x, p1->y, POLY_CONTROL );
