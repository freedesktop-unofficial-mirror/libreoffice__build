Index: fpicker/source/unx/gnome/SalGtkFilePicker.cxx
===================================================================
RCS file: /cvs/gsl/fpicker/source/unx/gnome/SalGtkFilePicker.cxx,v
retrieving revision 1.4
diff -u -p -u -r1.4 SalGtkFilePicker.cxx
--- fpicker/source/unx/gnome/SalGtkFilePicker.cxx	18 Jan 2005 13:24:41 -0000	1.4
+++ fpicker/source/unx/gnome/SalGtkFilePicker.cxx	8 Mar 2005 21:31:58 -0000
@@ -113,6 +113,7 @@
 
 #include <tools/urlobj.hxx>
 
+#include <string.h>
 #include <iostream>
 #include "resourceprovider.hxx"
 #ifndef _SV_RC_H
@@ -1685,14 +1755,45 @@ uno::Sequence<rtl::OUString> SAL_CALL Sa
 	g_slist_free( filters );
 }
 
+static gboolean
+case_insensitive_filter (const GtkFileFilterInfo *filter_info,
+						 gpointer                 data)
+{
+	gboolean bRetval = FALSE;
+	const char *pFilter = (const char *) data;
+
+	g_return_val_if_fail( data != NULL, FALSE );
+	g_return_val_if_fail( filter_info != NULL, FALSE );
+
+	if( !filter_info->filename )
+		return FALSE;
+
+	const char *pExtn = strrchr( filter_info->filename, '.' );
+	if( !pExtn )
+		return FALSE;
+	pExtn++;
+
+	if( !g_ascii_strcasecmp( pFilter, pExtn ) )
+		bRetval = TRUE;
+
+#ifdef DEBUG
+	fprintf( stderr, "'%s' match extn '%s' vs '%s' yeilds %d\n",
+			 filter_info->filename, pExtn, pFilter, bRetval );
+#endif
+
+	return bRetval;
+}
+
 void SalGtkFilePicker::implAddFilter( const OUString& rFilter, const OUString& rType )
 {
 	GtkFileFilter *filter = gtk_file_filter_new();
 
 	OUString aShrunkName = shrinkFilterName( rFilter );
-	OString aFilterName = rtl::OUStringToOString( aShrunkName, RTL_TEXTENCODING_UTF8 );
+	OString aFilterName = OUStringToOString( aShrunkName, RTL_TEXTENCODING_UTF8 );
 	gtk_file_filter_set_name( filter, aFilterName );
 
+	static const OUString aStarDot = OUString::createFromAscii( "*." );
+
 	if( !rType.compareToAscii( "*.*" ) )
 		gtk_file_filter_add_pattern( filter, "*" );
 	else
@@ -1732,12 +1838,20 @@ void SalGtkFilePicker::implAddFilter( co
 		do
 		{
 			aToken = rType.getToken( 0, ';', nIndex );
+			// Assume all have the "*.<extn>" syntax
+			aToken = aToken.copy( aToken.lastIndexOf( aStarDot ) + 2 );
 			if( aToken.getLength() )
-			{
-				OString aStr = rtl::OUStringToOString( aToken, RTL_TEXTENCODING_UTF8 );
-				gtk_file_filter_add_pattern( filter, aStr );
-			}
+				gtk_file_filter_add_custom (
+						filter, GTK_FILE_FILTER_FILENAME,
+						case_insensitive_filter,
+						g_strdup( rtl::OUStringToOString( aToken, RTL_TEXTENCODING_UTF8 ) ),
+						(GDestroyNotify) g_free );
+#ifdef DEBUG
+			else
+				g_warning( "Duff filter token '%s'\n",
+						   (const sal_Char *) rtl::OUStringToOString( rType.getToken( 0, ';', nIndex ), RTL_TEXTENCODING_UTF8 ) );
+#endif
 		}
 		while( nIndex >= 0 );
 	}
 
