--- vcl/source/window/menu.cxx	2005-07-13 11:52:56.939826578 +0530
+++ vcl/source/window/menu.cxx	2005-07-13 12:06:21.297320513 +0530
@@ -2197,7 +2197,7 @@ Size Menu::ImplCalcSize( Window* pWin )
     {
 		int nCheckWidth = 0;
 		if ((nMenuFlags & MENU_FLAG_SHOWCHECKIMAGES) || aMaxImgSz.Width() <= 0)
-			nCheckWidth = nFontHeight/2 + nExtra;
+			nCheckWidth = nFontHeight + nExtra; // native checkmarks + no images need more width
         USHORT gfxExtra = (USHORT) Max( nExtra, 7L ); // #107710# increase space between checkmarks/images/text
         nCheckPos = (USHORT)nExtra;
         nImagePos = (USHORT)(nCheckPos + nCheckWidth );
@@ -2372,7 +2372,42 @@ void Menu::ImplPaint( Window* pWin, USHO
                 }
 
                 // CheckMark
-                if ( !bLayout && !bIsMenuBar && pData->bChecked )
+                if ( !bLayout && !bIsMenuBar &&
+                     ( pData->bChecked  || ( pData->nBits & ( MIB_RADIOCHECK | MIB_CHECKABLE | MIB_AUTOCHECK ) ) ) )
+                {
+                    if ( pWin->IsNativeControlSupported( CTRL_MENU_POPUP,
+                                                         (pData->nBits & MIB_RADIOCHECK)
+                                                         ? PART_MENU_ITEM_CHECK_MARK
+                                                         : PART_MENU_ITEM_RADIO_MARK ) )
+                    {
+                        ControlPart nPart = ((pData->nBits & MIB_RADIOCHECK)
+                                             ? PART_MENU_ITEM_RADIO_MARK
+                                             : PART_MENU_ITEM_CHECK_MARK);
+
+                        ControlState nState = 0;
+
+                        if ( pData->bChecked )
+                            nState |= CTRL_STATE_PRESSED;
+
+                        if ( pData->bEnabled )
+                            nState |= CTRL_STATE_ENABLED;
+
+                        if ( bHighlighted )
+                            nState |= CTRL_STATE_SELECTED;
+
+                        // FIXME use native values
+                        aTmpPos.X() = aPos.X() + nCheckPos;
+                        aTmpPos.Y() = aPos.Y() + nCheckPos;
+                        
+                        Rectangle aCheckRect( aTmpPos, Size( nFontHeight, nFontHeight ) );
+                            
+                        pWin->DrawNativeControl( CTRL_MENU_POPUP, nPart,
+                                                 Region( aCheckRect ),
+                                                 nState,
+                                                 ImplControlValue(),
+                                                 OUString() );
+                    }
+                    else if ( pData->bChecked ) // by default do nothing for unchecked items
                 {
                     Rectangle aRect;
                     SymbolType eSymbol;
@@ -2395,6 +2430,7 @@ void Menu::ImplPaint( Window* pWin, USHO
                     }
                     aDecoView.DrawSymbol( aRect, eSymbol, pWin->GetTextColor(), nSymbolStyle );
                 }
+                }
 
                 // SubMenu?
                 if ( !bLayout && !bIsMenuBar && pData->pSubMenu )
--- vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx	2005-07-13 11:52:56.943825924 +0530
+++ vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx	2005-07-13 11:52:25.127028825 +0530
@@ -122,6 +122,7 @@ static GtkWidget *  gMenubarWidget      
 static GtkWidget *  gMenuItemMenubarWidget  = NULL;
 static GtkWidget *  gMenuWidget             = NULL;
 static GtkWidget *  gMenuItemMenuWidget     = NULL;
+static GtkWidget *  gMenuItemCheckMenuWidget    = NULL;
 static GtkWidget *  gTooltipPopup           = NULL;
 
 osl::Mutex	* pWidgetMutex;
@@ -511,6 +512,8 @@ BOOL GtkSalGraphics::IsNativeControlSupp
         ((nType == CTRL_MENU_POPUP) &&
                 (   (nPart==PART_ENTIRE_CONTROL) )
                 ||  (nPart==PART_MENU_ITEM)
+                ||  (nPart==PART_MENU_ITEM_CHECK_MARK)
+                ||  (nPart==PART_MENU_ITEM_RADIO_MARK)
                 )
         )
 		return( TRUE );
@@ -767,6 +770,8 @@ BOOL GtkSalGraphics::drawNativeControl(	
         else if(    (nType == CTRL_MENU_POPUP)
             && (  (nPart == PART_ENTIRE_CONTROL)
         || (nPart == PART_MENU_ITEM)
+        || (nPart == PART_MENU_ITEM_CHECK_MARK)
+        || (nPart == PART_MENU_ITEM_RADIO_MARK)
         )
         )
         {
@@ -2586,6 +2591,50 @@ BOOL GtkSalGraphics::NWPaintGTKPopupMenu
                 x, y, w, h);
             }
         }
+        else if( nPart == PART_MENU_ITEM_CHECK_MARK || nPart == PART_MENU_ITEM_RADIO_MARK )
+        {
+            gint nIndicatorSize;
+
+            gtk_widget_style_get( gMenuItemCheckMenuWidget,
+                                  "indicator_size", &nIndicatorSize,
+                                  NULL );
+
+            GtkStateType nStateType = GTK_STATE_NORMAL;
+            GtkShadowType nShadowType;
+
+            if ( nState & CTRL_STATE_SELECTED )
+                nStateType = GTK_STATE_PRELIGHT;
+
+            NWSetWidgetState( gMenuItemCheckMenuWidget, nState, nStateType );
+
+            if ( nState & CTRL_STATE_PRESSED )
+                nShadowType = GTK_SHADOW_IN;
+            else
+                nShadowType = GTK_SHADOW_OUT;
+
+            if ( nPart == PART_MENU_ITEM_CHECK_MARK )
+            {
+                gtk_paint_check( gMenuItemCheckMenuWidget->style,
+                                 gdkDrawable,
+                                 nStateType,
+                                 nShadowType,
+                                 &clipRect,
+                                 gMenuItemMenuWidget,
+                                 "check",
+                                 x, y, MIN( w, nIndicatorSize ), MIN( h, nIndicatorSize ) );
+            }
+            else
+            {
+                gtk_paint_option( gMenuItemCheckMenuWidget->style,
+                                  gdkDrawable,
+                                  nStateType,
+                                  nShadowType,
+                                  &clipRect,
+                                  gMenuItemMenuWidget,
+                                  "option",
+                                  x, y, MIN( w, nIndicatorSize ), MIN( h, nIndicatorSize ) );
+            }
+        }
     }
     
 	return( TRUE );
@@ -2876,8 +2925,6 @@ void GtkSalGraphics::updateSettings( All
     aStyleSet.SetHighlightTextColor( aHighlightTextColor );
 
     // menu colors
-    gtk_widget_ensure_style( gMenuWidget );
-    gtk_widget_ensure_style( gMenuItemMenuWidget );
     GtkStyle* pMenuStyle = gtk_widget_get_style( gMenuWidget );
     GtkStyle* pMenuItemStyle = gtk_rc_get_style( gMenuItemMenuWidget );
     GtkStyle* pMenubarStyle = gtk_rc_get_style( gMenubarWidget );
@@ -3347,7 +3394,9 @@ static void NWEnsureGTKMenu(void)
     {
         gMenuWidget         = gtk_menu_new();
         gMenuItemMenuWidget = gtk_menu_item_new_with_label( "b" );
+        gMenuItemCheckMenuWidget = gtk_check_menu_item_new_with_label( "b" );
         gtk_menu_shell_append( GTK_MENU_SHELL( gMenuWidget ), gMenuItemMenuWidget );
+        gtk_menu_shell_append( GTK_MENU_SHELL( gMenuWidget ), gMenuItemCheckMenuWidget );
         
         // do what NWAddWidgetToCacheWindow does except adding to def container
         gtk_widget_realize( gMenuWidget );
@@ -3356,8 +3405,12 @@ static void NWEnsureGTKMenu(void)
         gtk_widget_realize( gMenuItemMenuWidget );
         gtk_widget_ensure_style( gMenuItemMenuWidget );
 
+        gtk_widget_realize( gMenuItemCheckMenuWidget );
+        gtk_widget_ensure_style( gMenuItemCheckMenuWidget );
+
         gWidgetDefaultFlags[ (long)gMenuWidget ] = GTK_WIDGET_FLAGS( gMenuWidget );
         gWidgetDefaultFlags[ (long)gMenuItemMenuWidget ] = GTK_WIDGET_FLAGS( gMenuItemMenuWidget );
+        gWidgetDefaultFlags[ (long)gMenuItemCheckMenuWidget ] = GTK_WIDGET_FLAGS( gMenuItemCheckMenuWidget );
     }
 }
 
--- vcl/inc/salnativewidgets.hxx	2005-07-13 11:52:56.945825597 +0530
+++ vcl/inc/salnativewidgets.hxx	2005-07-13 10:15:41.000000000 +0530
@@ -183,6 +183,8 @@ typedef sal_uInt32		ControlPart;
 #define PART_THUMB_HORZ			210 // Also used as toolbar grip
 #define PART_THUMB_VERT			211 // Also used as toolbar grip
 #define PART_MENU_ITEM              250
+#define PART_MENU_ITEM_CHECK_MARK   251
+#define PART_MENU_ITEM_RADIO_MARK   252
 
 /** The edit field part of a control, e.g. of the combo box.
 
