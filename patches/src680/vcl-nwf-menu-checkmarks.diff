Index: vcl/source/window/menu.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/window/menu.cxx,v
retrieving revision 1.120
diff -u -u -p -r1.120 vcl/source/window/menu.cxx
--- vcl/source/window/menu.cxx	31 Jan 2005 13:25:29 -0000	1.120
+++ vcl/source/window/menu.cxx	1 Mar 2005 13:31:50 -0000
@@ -2364,26 +2372,60 @@ void Menu::ImplPaint( Window* pWin, USHO
                 // CheckMark
                 if ( !bLayout && !bIsMenuBar && pData->bChecked )
                 {
-                    Rectangle aRect;
-                    SymbolType eSymbol;
-                    aTmpPos.Y() = aPos.Y();
-                    aTmpPos.Y() += nExtra/2;
-                    aTmpPos.Y() += pData->aSz.Height() / 2;
-                    if ( pData->nBits & MIB_RADIOCHECK )
+                    if ( pWin->IsNativeControlSupported( CTRL_MENU_POPUP,
+                                                         (pData->nBits & MIB_RADIOCHECK)
+                                                         ? PART_MENU_ITEM_CHECK_MARK
+                                                         : PART_MENU_ITEM_RADIO_MARK ) )
                     {
+                        ControlPart nPart = ((pData->nBits & MIB_RADIOCHECK)
+                                             ? PART_MENU_ITEM_RADIO_MARK
+                                             : PART_MENU_ITEM_CHECK_MARK);
+
+                        /* FIXME once we can recognize unchecked check
+                         * menu items, don't hardcode CTRL_STATE_PRESSED */
+                        ControlState nState = CTRL_STATE_PRESSED;
+
+                        if ( pData->bEnabled )
+                            nState |= CTRL_STATE_ENABLED;
+
+                        if ( bHighlighted )
+                            nState |= CTRL_STATE_SELECTED;
+
+                        // FIXME use native values
                         aTmpPos.X() = aPos.X() + nCheckPos;
-                        eSymbol = SYMBOL_RADIOCHECKMARK;
-                        aTmpPos.Y() -= nFontHeight/4;
-                        aRect = Rectangle( aTmpPos, Size( nFontHeight/2, nFontHeight/2 ) );
+                        aTmpPos.Y() = aPos.Y() + nCheckPos;
+                        
+                        Rectangle aCheckRect( aTmpPos, Size( nFontHeight * 0.7, nFontHeight * 0.7 ) );
+                            
+                        pWin->DrawNativeControl( CTRL_MENU_POPUP, nPart,
+                                                 Region( aCheckRect ),
+                                                 nState,
+                                                 ImplControlValue(),
+                                                 OUString() );
                     }
                     else
                     {
-                        aTmpPos.X() = aPos.X() + nCheckPos;
-                        eSymbol = SYMBOL_CHECKMARK;
-                        aTmpPos.Y() -= nFontHeight/4;
-                        aRect = Rectangle( aTmpPos, Size( (nFontHeight*25)/40, nFontHeight/2 ) );
+                        Rectangle aRect;
+                        SymbolType eSymbol;
+                        aTmpPos.Y() = aPos.Y();
+                        aTmpPos.Y() += nExtra/2;
+                        aTmpPos.Y() += pData->aSz.Height() / 2;
+                        if ( pData->nBits & MIB_RADIOCHECK )
+                        {
+                            aTmpPos.X() = aPos.X() + nCheckPos;
+                            eSymbol = SYMBOL_RADIOCHECKMARK;
+                            aTmpPos.Y() -= nFontHeight/4;
+                            aRect = Rectangle( aTmpPos, Size( nFontHeight/2, nFontHeight/2 ) );
+                        }
+                        else
+                        {
+                            aTmpPos.X() = aPos.X() + nCheckPos;
+                            eSymbol = SYMBOL_CHECKMARK;
+                            aTmpPos.Y() -= nFontHeight/4;
+                            aRect = Rectangle( aTmpPos, Size( (nFontHeight*25)/40, nFontHeight/2 ) );
+                        }
+                        aDecoView.DrawSymbol( aRect, eSymbol, pWin->GetTextColor(), nSymbolStyle );
                     }
-                    aDecoView.DrawSymbol( aRect, eSymbol, pWin->GetTextColor(), nSymbolStyle );
                 }
 
                 // SubMenu?

Index: vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx
===================================================================
RCS file: /cvs/gsl/vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx,v
retrieving revision 1.10
diff -u -u -p -r1.10 vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx
--- vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx	31 Jan 2005 09:20:23 -0000	1.10
+++ vcl/unx/gtk/gdi/salnativewidgets-gtk.cxx	1 Mar 2005 13:36:13 -0000
@@ -100,28 +100,29 @@ using namespace rtl;
 static GtkWidget *	gCacheWindow = NULL;
 static GtkWidget *	gDumbContainer = NULL;
 
-static GtkWidget *	gBtnWidget 				= NULL;
-static GtkWidget *	gRadioWidget			= NULL;
-static GtkWidget *	gRadioWidgetSibling		= NULL;
-static GtkWidget *	gCheckWidget			= NULL;
-static GtkWidget *	gScrollHorizWidget		= NULL;
-static GtkWidget *	gScrollVertWidget		= NULL;
-static GtkWidget *	gArrowWidget			= NULL;
-static GtkWidget *	gDropdownWidget			= NULL;
-static GtkWidget *	gEditBoxWidget			= NULL;
-static GtkWidget *	gSpinButtonWidget		= NULL;
-static GtkWidget *	gNotebookWidget			= NULL;
-static GtkWidget *	gOptionMenuWidget		= NULL;
-static GtkWidget *	gComboWidget			= NULL;
-static GtkWidget *	gScrolledWindowWidget	= NULL;
-static GtkWidget *  gToolbarWidget			= NULL;
-static GtkWidget *  gToolbarButtonWidget    = NULL;
-static GtkWidget *  gToolbarToggleWidget    = NULL;
-static GtkWidget *  gHandleBoxWidget		= NULL;
-static GtkWidget *  gMenubarWidget          = NULL;
-static GtkWidget *  gMenuItemMenubarWidget  = NULL;
-static GtkWidget *  gMenuWidget             = NULL;
-static GtkWidget *  gMenuItemMenuWidget     = NULL;
+static GtkWidget *	gBtnWidget                  = NULL;
+static GtkWidget *	gRadioWidget                = NULL;
+static GtkWidget *	gRadioWidgetSibling         = NULL;
+static GtkWidget *	gCheckWidget                = NULL;
+static GtkWidget *	gScrollHorizWidget          = NULL;
+static GtkWidget *	gScrollVertWidget           = NULL;
+static GtkWidget *	gArrowWidget                = NULL;
+static GtkWidget *	gDropdownWidget             = NULL;
+static GtkWidget *	gEditBoxWidget              = NULL;
+static GtkWidget *	gSpinButtonWidget           = NULL;
+static GtkWidget *	gNotebookWidget             = NULL;
+static GtkWidget *	gOptionMenuWidget           = NULL;
+static GtkWidget *	gComboWidget                = NULL;
+static GtkWidget *	gScrolledWindowWidget       = NULL;
+static GtkWidget *  gToolbarWidget              = NULL;
+static GtkWidget *  gToolbarButtonWidget        = NULL;
+static GtkWidget *  gToolbarToggleWidget        = NULL;
+static GtkWidget *  gHandleBoxWidget            = NULL;
+static GtkWidget *  gMenubarWidget              = NULL;
+static GtkWidget *  gMenuItemMenubarWidget      = NULL;
+static GtkWidget *  gMenuWidget                 = NULL;
+static GtkWidget *  gMenuItemMenuWidget         = NULL;
+static GtkWidget *  gMenuItemCheckMenuWidget    = NULL;
 
 osl::Mutex	* pWidgetMutex;
 
@@ -500,6 +501,8 @@ BOOL GtkSalGraphics::IsNativeControlSupp
         ((nType == CTRL_MENU_POPUP) &&
                 (   (nPart==PART_ENTIRE_CONTROL) )
                 ||  (nPart==PART_MENU_ITEM)
+                ||  (nPart==PART_MENU_ITEM_CHECK_MARK)
+                ||  (nPart==PART_MENU_ITEM_RADIO_MARK)
                 )
         )
 		return( TRUE );
@@ -753,6 +756,8 @@ BOOL GtkSalGraphics::drawNativeControl(	
         else if(    (nType == CTRL_MENU_POPUP)
             && (  (nPart == PART_ENTIRE_CONTROL)
         || (nPart == PART_MENU_ITEM)
+        || (nPart == PART_MENU_ITEM_CHECK_MARK)
+        || (nPart == PART_MENU_ITEM_RADIO_MARK)
         )
         )
         {
@@ -2559,6 +2572,44 @@ BOOL GtkSalGraphics::NWPaintGTKPopupMenu
                 x, y, w, h);
             }
         }
+        else if( nPart == PART_MENU_ITEM_CHECK_MARK || nPart == PART_MENU_ITEM_RADIO_MARK )
+        {
+            GtkStateType nStateType = GTK_STATE_NORMAL;
+            GtkShadowType nShadowType;
+
+            if ( nState & CTRL_STATE_SELECTED )
+                nStateType = GTK_STATE_PRELIGHT;
+
+            NWSetWidgetState( gMenuItemCheckMenuWidget, nState, nStateType );
+
+            if ( nState & CTRL_STATE_PRESSED )
+                nShadowType = GTK_SHADOW_IN;
+            else
+                nShadowType = GTK_SHADOW_OUT;
+
+            if ( nPart == PART_MENU_ITEM_CHECK_MARK )
+            {
+                gtk_paint_check( gMenuItemCheckMenuWidget->style,
+                                 gdkDrawable,
+                                 nStateType,
+                                 nShadowType,
+                                 &clipRect,
+                                 gMenuItemMenuWidget,
+                                 "check",
+                                 x, y, w, h);
+            }
+            else
+            {
+                gtk_paint_option( gMenuItemCheckMenuWidget->style,
+                                  gdkDrawable,
+                                  nStateType,
+                                  nShadowType,
+                                  &clipRect,
+                                  gMenuItemMenuWidget,
+                                  "option",
+                                  x, y, w, h);
+            }
+        }
     }
     
 	return( TRUE );
@@ -2808,8 +2859,6 @@ void GtkSalGraphics::updateSettings( All
     aStyleSet.SetHighlightTextColor( aHighlightTextColor );
 
     // menu colors
-    gtk_widget_ensure_style( gMenuWidget );
-    gtk_widget_ensure_style( gMenuItemMenuWidget );
     GtkStyle* pMenuStyle = gtk_widget_get_style( gMenuWidget );
     GtkStyle* pMenuItemStyle = gtk_rc_get_style( gMenuItemMenuWidget );
     GtkStyle* pMenubarStyle = gtk_rc_get_style( gMenubarWidget );
@@ -3277,9 +3326,11 @@ static void NWEnsureGTKMenu(void)
 {
     if( !gMenuWidget )
     {
-        gMenuWidget         = gtk_menu_new();
-        gMenuItemMenuWidget = gtk_menu_item_new_with_label( "b" );
+        gMenuWidget              = gtk_menu_new();
+        gMenuItemMenuWidget      = gtk_menu_item_new_with_label( "b" );
+        gMenuItemCheckMenuWidget = gtk_check_menu_item_new_with_label( "b" );
         gtk_menu_shell_append( GTK_MENU_SHELL( gMenuWidget ), gMenuItemMenuWidget );
+        gtk_menu_shell_append( GTK_MENU_SHELL( gMenuWidget ), gMenuItemCheckMenuWidget );
         
         // do what NWAddWidgetToCacheWindow does except adding to def container
         gtk_widget_realize( gMenuWidget );
@@ -3288,7 +3339,11 @@ static void NWEnsureGTKMenu(void)
         gtk_widget_realize( gMenuItemMenuWidget );
         gtk_widget_ensure_style( gMenuItemMenuWidget );
 
+        gtk_widget_realize( gMenuItemCheckMenuWidget );
+        gtk_widget_ensure_style( gMenuItemCheckMenuWidget );
+
         gWidgetDefaultFlags[ (long)gMenuWidget ] = GTK_WIDGET_FLAGS( gMenuWidget );
         gWidgetDefaultFlags[ (long)gMenuItemMenuWidget ] = GTK_WIDGET_FLAGS( gMenuItemMenuWidget );
+        gWidgetDefaultFlags[ (long)gMenuItemCheckMenuWidget ] = GTK_WIDGET_FLAGS( gMenuItemCheckMenuWidget );
     }
 }

--- vcl/inc/salnativewidgets.hxx	2005-01-13 18:46:54.000000000 +0100
+++ vcl/inc/salnativewidgets.hxx	2005-03-01 12:01:50.000000000 +0100
@@ -180,6 +180,8 @@
 #define PART_THUMB_HORZ			210 // Also used as toolbar grip
 #define PART_THUMB_VERT			211 // Also used as toolbar grip
 #define PART_MENU_ITEM              250
+#define PART_MENU_ITEM_CHECK_MARK   251
+#define PART_MENU_ITEM_RADIO_MARK   252
 
 /** The edit field part of a control, e.g. of the combo box.
 
