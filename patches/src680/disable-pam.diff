--- config_office/configure.in.orig	2006-04-30 13:19:54.000000000 +0200
+++ config_office/configure.in	2006-04-30 13:45:32.000000000 +0200
@@ -223,6 +223,9 @@
 AC_ARG_ENABLE(pasf,
 [  --disable-pasf          disable support for sound using portaudio/sndfile
 ],,enable_pasf=yes)
+AC_ARG_ENABLE(pam,
+[  --disable-pam           Disable pam support.
+],,)
 AC_ARG_ENABLE(pam-link,
 [  --enable-pam-link       link with libpam instead of dynamically open it
 ],,)
@@ -1560,6 +1563,19 @@
 fi
 
 dnl ===================================================================
+dnl Check if PAM is available
+dnl ===================================================================
+AC_MSG_CHECKING([whether to disable pam support])
+if test -n "$enable_pam" && test "$enable_pam" = "no"; then
+    AC_MSG_RESULT([yes])
+    PAM_LINK=NO
+    NOPAM=TRUE
+    dnl TODO: check getspnam_r for needed args (4 or 5)
+    dnl       and set NEW_SHADOW_API
+else
+    AC_MSG_RESULT([no])
+    NOPAM=FALSE
+dnl ===================================================================
 dnl Check if PAM/pam_appl.h is available on Linux or FreeBSD
 dnl ===================================================================
 if test "$_os" = "Linux" -o "$_os" = "FreeBSD" -o "$_os" = "GNU"; then
@@ -1576,6 +1592,8 @@
       PAM_LINK=NO
     fi
 fi
+fi
+AC_SUBST(NOPAM)
 AC_SUBST(PAM_LINK)
 
 if test "$_os" = "Linux"; then
--- config_office/set_soenv.in.orig	2006-04-30 13:45:44.000000000 +0200
+++ config_office/set_soenv.in	2006-04-30 13:46:11.000000000 +0200
@@ -1823,6 +1823,7 @@
 ToFile( "HUNSPELL_CFLAGS",   "@HUNSPELL_CFLAGS@",  "e" );
 ToFile( "SYSTEM_HYPH",       "@SYSTEM_HYPH@",      "e" );
 ToFile( "SYSTEM_MYTHES",     "@SYSTEM_MYTHES@",    "e" );
+ToFile( "NOPAM",             "@NOPAM@",            "e" );
 ToFile( "PAM_LINK",          "@PAM_LINK@",         "e" );
 ToFile( "CRYPT_LINK",        "@CRYPT_LINK@",       "e" );
 ToFile( "GXX_INCLUDE_PATH",  "@GXX_INCLUDE_PATH@", "e" );
--- sal/osl/unx/makefile.mk.orig	2006-04-30 13:47:44.000000000 +0200
+++ sal/osl/unx/makefile.mk	2006-04-30 15:37:51.000000000 +0200
@@ -122,6 +122,12 @@
 .ENDIF
 
 .IF "$(OS)" == "LINUX"
+.IF "$(NOPAM)" == "TRUE"
+CFLAGS+=-DNOPAM
+.ENDIF
+.IF "$(NEW_SHADOW_API)" == "YES"
+CFLAGS+=-DNEW_SHADOW_API
+.ENDIF
 .IF "$(PAM_LINK)" == "YES"
 CFLAGS+=-DPAM_LINK
 .ENDIF
--- sal/osl/unx/security.c.orig	2006-04-30 13:09:11.000000000 +0200
+++ sal/osl/unx/security.c	2006-04-30 15:25:52.000000000 +0200
@@ -53,9 +53,11 @@
 
 #include "secimpl.h"
 
+#ifndef NOPAM
 #ifndef PAM_BINARY_MSG
 #define PAM_BINARY_MSG 6
 #endif
+#endif
 
 extern oslModule SAL_CALL osl_psz_loadModule(const sal_Char *pszModuleName, sal_Int32 nRtldMode);
 extern void* SAL_CALL osl_psz_getSymbol(oslModule hModule, const sal_Char* pszSymbolName);
@@ -100,7 +102,7 @@
 }
 
 
-#ifdef LINUX
+#if defined LINUX && !defined NOPAM
 
 /*
  *
@@ -402,7 +404,7 @@
 	return success;
 }
 
-#endif
+#endif /* defined LINUX && !defined NOPAM */
 oslSecurityError SAL_CALL osl_loginUser(
     rtl_uString *ustrUserName,
 	rtl_uString *ustrPassword,
@@ -482,7 +484,7 @@
                 if (found == NULL) {
                     nError = osl_Security_E_UserUnknown;
                 } else {
-#if defined LINUX
+#if defined LINUX && !defined NOPAM
                     /* only root is able to read the /etc/shadow passwd, a
                        normal user even can't read his own encrypted passwd */
                     if (osl_equalPasswords(p->m_pPasswd.pw_passwd, pszPasswd) ||
@@ -537,9 +539,11 @@
                     char buffer[1024];
                     struct spwd spwdStruct;
                     buffer[0] = '\0';
-                    if (getspnam_r(
-                            pszUserName, &spwdStruct, buffer, sizeof buffer) !=
-                        NULL)
+#ifndef NEW_SHADOW_API
+                    if (getspnam_r(pszUserName, &spwdStruct, buffer, sizeof buffer) != NULL)
+#else
+                    if (getspnam_r(pszUserName, &spwdStruct, buffer, sizeof buffer, NULL) == 0)
+#endif
                     {
                         char salt[3];
                         char * cryptPasswd;
@@ -549,10 +553,11 @@
                         if (strcmp(spwdStruct.sp_pwdp, cryptPasswd) == 0) {
                             nError = osl_Security_E_None;
                         } else if (getuid() == 0 &&
-                                   (getspnam_r(
-                                       "root", &spwdStruct, buffer,
-                                       sizeof buffer)
-                                    != NULL))
+#ifndef NEW_SHADOW_API
+                                   (getspnam_r("root", &spwdStruct, buffer, sizeof buffer) != NULL))
+#else
+                                   (getspnam_r("root", &spwdStruct, buffer, sizeof buffer, NULL) == 0))
+#endif
                         {
                             /* if current process is running as root, allow to
                                logon as any other user */
