diff -u -r /share/solenv/bin/make_installer.pl solenv/bin/make_installer.pl
--- solenv/bin/make_installer.pl	2004-10-18 14:51:13.000000000 +0100
+++ solenv/bin/make_installer.pl	2004-11-10 22:52:24.000000000 +0000
@@ -117,6 +117,48 @@
 use installer::windows::upgrade;
 use installer::ziplist;
 
+sub install_simple ($$$)
+{
+    my ($directoriesarray, $filesarray, $linksarray) = @_;
+
+    # Create Directories
+    for ( my $i = 0; $i <= $#{$directoriesarray}; $i++ )
+    {
+	my $onedir = ${$directoriesarray}[$i];
+	my $dir = "";
+	
+	if ( $onedir->{'Dir'} ) { $dir = $onedir->{'Dir'}; }
+	
+	if ((!($dir =~ /\bPREDEFINED_/ )) || ( $dir =~ /\bPREDEFINED_PROGDIR\b/ ))
+	{
+#	    printf "mkdir $onedir->{'HostName'}\n";
+	    mkdir $onedir->{'HostName'};
+	} 
+    }
+
+    for ( my $i = 0; $i <= $#{$filesarray}; $i++ )
+    {
+	my $onefile = ${$filesarray}[$i];
+	my $unixrights = $onefile->{'UnixRights'};
+	my $destination = $onefile->{'destination'};
+	my $sourcepath = $onefile->{'sourcepath'};
+	
+#        printf "mv $sourcepath $destination\n";
+	`cp -af '$sourcepath' '$destination'`;
+	`chmod $unixrights '$destination'`;
+    }
+    
+    for ( my $i = 0; $i <= $#{$linksarray}; $i++ )
+    {
+	my $onelink = ${$linksarray}[$i];
+	my $destination = $onelink->{'destination'};
+	my $destinationfile = $onelink->{'destinationfile'};
+	
+	print "link $destinationfile -> $destination\n";
+	`ln -sf '$destinationfile' '$destination'`;
+    }
+}
+
 #################################################
 # Main program
 #################################################
@@ -1059,37 +1102,45 @@
 			# Example for a link: l 000 root sys /usr/bin/linkname filename
 			# The source field specifies the file to link to
 
-			my $epmfilename = "epm_" . $installer::globals::product . "_" . $onepackagename . "_" . $installer::globals::compiler . "_" . $installer::globals::build . "_" . $installer::globals::minor . "_" . $$languagestringref . ".lst";
+			if ( $installer::globals::simple )
+			{
+				print "... installing module $onepackagename ... \n";
+				install_simple ($dirsinpackage, $filesinpackage, $linksinpackage);
+			}
+			else # use EPM to package
+			{
+				my $epmfilename = "epm_" . $installer::globals::product . "_" . $onepackagename . "_" . $installer::globals::compiler . "_" . $installer::globals::build . "_" . $installer::globals::minor . "_" . $$languagestringref . ".lst";
 
-			print "... creating epm list file $epmfilename ... \n";
+				print "... creating epm list file $epmfilename ... \n";
 
-			my $completeepmfilename = $listfiledir . $installer::globals::separator . $epmfilename;
+				my $completeepmfilename = $listfiledir . $installer::globals::separator . $epmfilename;
 
-			my @epmfile = ();
+				my @epmfile = ();
 
-			my $epmheaderref = installer::epmfile::create_epm_header($allvariableshashref, $filesinproductlanguageresolvedarrayref, $languagesarrayref, $onepackage);
-			installer::epmfile::adding_header_to_epm_file(\@epmfile, $epmheaderref);
+				my $epmheaderref = installer::epmfile::create_epm_header($allvariableshashref, $filesinproductlanguageresolvedarrayref, $languagesarrayref, $onepackage);
+				installer::epmfile::adding_header_to_epm_file(\@epmfile, $epmheaderref);
 
-			# adding directories, files and links into epm file
+				# adding directories, files and links into epm file
 			
-			installer::epmfile::put_directories_into_epmfile($dirsinpackage, \@epmfile );
-			installer::epmfile::put_files_into_epmfile($filesinpackage, \@epmfile );
-			installer::epmfile::put_links_into_epmfile($linksinpackage, \@epmfile );
-
-			if ((!( $shellscriptsfilename eq "" )) && (!($installer::globals::iswindowsbuild))) { installer::epmfile::adding_shellscripts_to_epm_file(\@epmfile, $shellscriptsfilename, $packagerootpath, $allvariableshashref); }
+				installer::epmfile::put_directories_into_epmfile($dirsinpackage, \@epmfile );
+				installer::epmfile::put_files_into_epmfile($filesinpackage, \@epmfile );
+				installer::epmfile::put_links_into_epmfile($linksinpackage, \@epmfile );
+				
+				if ((!( $shellscriptsfilename eq "" )) && (!($installer::globals::iswindowsbuild))) { installer::epmfile::adding_shellscripts_to_epm_file(\@epmfile, $shellscriptsfilename, $packagerootpath, $allvariableshashref); }
 
-			installer::files::save_file($completeepmfilename ,\@epmfile);
+				installer::files::save_file($completeepmfilename ,\@epmfile);
 
-			# ... splitting the rootpath into a relocatable part and a static part, if possible
+				# ... splitting the rootpath into a relocatable part and a static part, if possible
 
-			my $staticpath = "";
-			my $relocatablepath = "";
-			installer::epmfile::analyze_rootpath($packagerootpath, \$staticpath, \$relocatablepath);
+				my $staticpath = "";
+				my $relocatablepath = "";
+				installer::epmfile::analyze_rootpath($packagerootpath, \$staticpath, \$relocatablepath);
 
-			# ... replacing the variable PRODUCTDIRECTORYNAME in the shellscriptfile by $staticpath
+				# ... replacing the variable PRODUCTDIRECTORYNAME in the shellscriptfile by $staticpath
 
-			installer::epmfile::resolve_path_in_epm_list_before_packaging(\@epmfile, $completeepmfilename, "PRODUCTDIRECTORYNAME", $staticpath);
-			installer::files::save_file($completeepmfilename ,\@epmfile);
+				installer::epmfile::resolve_path_in_epm_list_before_packaging(\@epmfile, $completeepmfilename, "PRODUCTDIRECTORYNAME", $staticpath);
+				installer::files::save_file($completeepmfilename ,\@epmfile);
+			}
 	
 			# changing into the "install" directory to create installation sets
 	
@@ -1168,8 +1219,11 @@
 			}
 			else	# this is the standard epm (not relocatable) or ( nonlinux and nonsolaris )
 			{			
-				installer::epmfile::resolve_path_in_epm_list_before_packaging(\@epmfile, $completeepmfilename, "\$\$PRODUCTINSTALLLOCATION", $relocatablepath);
-				installer::files::save_file($completeepmfilename ,\@epmfile);
+			        if ( !$installer::globals::simple )
+				{
+					installer::epmfile::resolve_path_in_epm_list_before_packaging(\@epmfile, $completeepmfilename, "\$\$PRODUCTINSTALLLOCATION", $relocatablepath);
+					installer::files::save_file($completeepmfilename ,\@epmfile);
+				}
 
 				if ( $installer::globals::call_epm )
 				{
diff -u -r /share/solenv/bin/modules/installer/globals.pm solenv/bin/modules/installer/globals.pm
--- solenv/bin/modules/installer/globals.pm
+++ solenv/bin/modules/installer/globals.pm
@@ -129,6 +129,7 @@
 	$is_special_epm = 0;
 	$epm_in_path = 0;
 	$epm_path = "";
+	$simple = 0;
 	$call_epm = 1;
 	$packageformat = "";
 	$packagename = "";
Only in solenv/bin/modules/installer: globals.pm~
diff -u -r /share/solenv/bin/modules/installer/parameter.pm solenv/bin/modules/installer/parameter.pm
--- solenv/bin/modules/installer/parameter.pm	2004-10-18 14:53:07.000000000 +0100
+++ solenv/bin/modules/installer/parameter.pm	2004-11-10 22:18:48.548540352 +0000
@@ -88,6 +88,7 @@
 -l: Language of the product (comma and hash) (optional, defined in productlist)
 -b: Build, e.g. srx645 (optional)
 -m: Minor, e.g. m10 (optional)
+-simple: Path to do a simple install to
 -c: Compiler, e.g. wntmsci8, unxlngi5, unxsols4, ... (optional) 
 -u: Path, in which zipfiles are unpacked (optional)
 -msitemplate: Source of the msi file templates (Windows compiler only)
@@ -190,6 +191,12 @@
 		elsif ($param eq "-copyproject") { $installer::globals::is_copy_only_project = 1; }
 		elsif ($param eq "-languagepack") { $installer::globals::languagepack = 1; }
 		elsif ($param eq "-addchildprojects") { $installer::globals::addchildprojects = 1; }
+		elsif ($param eq "-simple")
+		{
+		    $installer::globals::simple = 1;
+		    $installer::globals::call_epm = 0;
+		    $installer::globals::rootpath = shift(@ARGV);
+		}
 		else
 		{
 			print("\n*************************************\n");
