--- UnoControls/source/controls/progressbar.cxx.gcc43~	2006-06-20 01:09:34.000000000 +0200
+++ UnoControls/source/controls/progressbar.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -69,6 +69,7 @@
 #endif
 
 #include <math.h>
+#include <limits.h>
 
 //____________________________________________________________________________________________________________
 //	includes of my project
--- basic/source/basmgr/basmgr.cxx.gcc43~	2007-11-06 00:25:18.000000000 +0100
+++ basic/source/basmgr/basmgr.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -208,9 +208,9 @@
         : mpMgr( pMgr )
         , maLibName( aLibName ) {}
 
-	static void insertLibraryImpl( const Reference< XLibraryContainer >& xScriptCont, BasicManager* pMgr,
+	static void insertLibraryImpl( const::com::sun::star::uno::Reference< XLibraryContainer >& xScriptCont, BasicManager* pMgr,
 		Any aLibAny, OUString aLibName );
-	static void addLibraryModulesImpl( BasicManager* pMgr, Reference< XNameAccess > xLibNameAccess,
+	static void addLibraryModulesImpl( BasicManager* pMgr,::com::sun::star::uno::Reference< XNameAccess > xLibNameAccess,
 		OUString aLibName );
 
 
@@ -232,10 +232,10 @@
 // BasMgrContainerListenerImpl
 //============================================================================
 
-void BasMgrContainerListenerImpl::insertLibraryImpl( const Reference< XLibraryContainer >& xScriptCont,
+void BasMgrContainerListenerImpl::insertLibraryImpl( const::com::sun::star::uno::Reference< XLibraryContainer >& xScriptCont,
 	BasicManager* pMgr, Any aLibAny, OUString aLibName )
 {
-	Reference< XNameAccess > xLibNameAccess;
+	::com::sun::star::uno::Reference< XNameAccess > xLibNameAccess;
 	aLibAny >>= xLibNameAccess;
 
 	if( !pMgr->GetLib( aLibName ) )
@@ -248,11 +248,11 @@
 		DBG_ASSERT( pLib, "XML Import: Basic library could not be created");
 	}
 
-	Reference< XContainer> xLibContainer( xLibNameAccess, UNO_QUERY );
+	::com::sun::star::uno::Reference< XContainer> xLibContainer( xLibNameAccess, UNO_QUERY );
 	if( xLibContainer.is() )
 	{
 		// Register listener for library
-		Reference< XContainerListener > xLibraryListener
+		::com::sun::star::uno::Reference< XContainerListener > xLibraryListener
 			= static_cast< XContainerListener* >
 				( new BasMgrContainerListenerImpl( pMgr, aLibName ) );
 		xLibContainer->addContainerListener( xLibraryListener );
@@ -266,7 +266,7 @@
 
 
 void BasMgrContainerListenerImpl::addLibraryModulesImpl( BasicManager* pMgr,
-	Reference< XNameAccess > xLibNameAccess, OUString aLibName )
+	::com::sun::star::uno::Reference< XNameAccess > xLibNameAccess, OUString aLibName )
 {
 	Sequence< OUString > aModuleNames = xLibNameAccess->getElementNames();
 	sal_Int32 nModuleCount = aModuleNames.getLength();
@@ -314,7 +314,7 @@
 
 	if( bLibContainer )
 	{
-        Reference< XLibraryContainer > xScriptCont( Event.Source, UNO_QUERY );
+       ::com::sun::star::uno::Reference< XLibraryContainer > xScriptCont( Event.Source, UNO_QUERY );
 		insertLibraryImpl( xScriptCont, mpMgr, Event.Element, aName );
 	}
 	else
@@ -477,7 +477,7 @@
 	BOOL			bFoundInPath;	// Darf dann nicht neu relativiert werden!
 
     // Lib represents library in new UNO library container
-    Reference< XLibraryContainer > mxScriptCont;
+   ::com::sun::star::uno::Reference< XLibraryContainer > mxScriptCont;
 
 public:
 	BasicLibInfo();
@@ -524,9 +524,9 @@
 	void 					Store( SotStorageStream& rSStream, const String& rBasMgrStorageName, BOOL bUseOldReloadInfo );
 	static BasicLibInfo*	Create( SotStorageStream& rSStream );
 
-    Reference< XLibraryContainer > GetLibraryContainer( void )
+   ::com::sun::star::uno::Reference< XLibraryContainer > GetLibraryContainer( void )
         { return mxScriptCont; }
-    void SetLibraryContainer( const Reference< XLibraryContainer >& xScriptCont )
+    void SetLibraryContainer( const::com::sun::star::uno::Reference< XLibraryContainer >& xScriptCont )
         { mxScriptCont = xScriptCont; }
 };
 
@@ -781,7 +781,7 @@
 
 void copyToLibraryContainer( StarBASIC* pBasic, const LibraryContainerInfo& rInfo )
 {
-    Reference< XLibraryContainer > xScriptCont( rInfo.mxScriptCont.get() );
+   ::com::sun::star::uno::Reference< XLibraryContainer > xScriptCont( rInfo.mxScriptCont.get() );
     if ( !xScriptCont.is() )
         return;
 
@@ -790,7 +790,7 @@
 		xScriptCont->createLibrary( aLibName );
 
 	Any aLibAny = xScriptCont->getByName( aLibName );
-	Reference< XNameContainer > xLib;
+	::com::sun::star::uno::Reference< XNameContainer > xLib;
 	aLibAny >>= xLib;
     if ( !xLib.is() )
         return;
@@ -812,12 +812,12 @@
 	}
 }
 
-const Reference< XPersistentLibraryContainer >& BasicManager::GetDialogLibraryContainer()  const
+const::com::sun::star::uno::Reference< XPersistentLibraryContainer >& BasicManager::GetDialogLibraryContainer()  const
 {
     return mpImpl->maContainerInfo.mxDialogCont;
 }
 
-const Reference< XPersistentLibraryContainer >& BasicManager::GetScriptLibraryContainer()  const
+const::com::sun::star::uno::Reference< XPersistentLibraryContainer >& BasicManager::GetScriptLibraryContainer()  const
 {
     return mpImpl->maContainerInfo.mxScriptCont;
 }
@@ -826,18 +826,18 @@
 {
 	mpImpl->maContainerInfo = rInfo;
 
-	Reference< XLibraryContainer > xScriptCont( mpImpl->maContainerInfo.mxScriptCont.get() );
+	::com::sun::star::uno::Reference< XLibraryContainer > xScriptCont( mpImpl->maContainerInfo.mxScriptCont.get() );
 	StarBASIC* pStdLib = GetStdLib();
 	String aLibName = pStdLib->GetName();
 	if( xScriptCont.is() )
 	{
 		// Register listener for lib container
 		OUString aEmptyLibName;
-		Reference< XContainerListener > xLibContainerListener
+		::com::sun::star::uno::Reference< XContainerListener > xLibContainerListener
 			= static_cast< XContainerListener* >
 				( new BasMgrContainerListenerImpl( this, aEmptyLibName ) );
 
-    	Reference< XContainer> xLibContainer( xScriptCont, UNO_QUERY );
+    	::com::sun::star::uno::Reference< XContainer> xLibContainer( xScriptCont, UNO_QUERY );
 		xLibContainer->addContainerListener( xLibContainerListener );
 
 		Sequence< OUString > aScriptLibNames = xScriptCont->getElementNames();
@@ -1361,7 +1361,7 @@
 	// Libraries sollte nicht zu modified fuehren
 	if( !bModified && bReference )
 	{
-		DBG_ERROR( "Per Reference eingebundene Basic-Library ist nicht compiliert!" );
+		DBG_ERROR( "Per::com::sun::star::uno::Reference eingebundene Basic-Library ist nicht compiliert!" );
 		pLib->SetModified( FALSE );
 	}
 }
@@ -1625,7 +1625,7 @@
 	DBG_ASSERT( pLibInfo, "Lib?!" );
 	if ( pLibInfo )
 	{
-        Reference< XLibraryContainer > xLibContainer = pLibInfo->GetLibraryContainer();
+       ::com::sun::star::uno::Reference< XLibraryContainer > xLibContainer = pLibInfo->GetLibraryContainer();
         if( xLibContainer.is() )
         {
             String aLibName = pLibInfo->GetLibName();
@@ -1712,7 +1712,7 @@
 }
 
 StarBASIC* BasicManager::CreateLibForLibContainer( const String& rLibName,
-    const Reference< XLibraryContainer >& xScriptCont )
+    const::com::sun::star::uno::Reference< XLibraryContainer >& xScriptCont )
 {
 	DBG_CHKTHIS( BasicManager, 0 );
 	if ( GetLib( rLibName ) )
@@ -1833,8 +1833,8 @@
 {
     try
     {
-        Reference< XNameAccess > xScripts( GetScriptLibraryContainer(), UNO_QUERY_THROW );
-        Reference< XLibraryContainerPassword > xPassword( GetScriptLibraryContainer(), UNO_QUERY_THROW );
+       ::com::sun::star::uno::Reference< XNameAccess > xScripts( GetScriptLibraryContainer(), UNO_QUERY_THROW );
+       ::com::sun::star::uno::Reference< XLibraryContainerPassword > xPassword( GetScriptLibraryContainer(), UNO_QUERY_THROW );
 
         Sequence< OUString > aNames( xScripts->getElementNames() );
         const OUString* pNames = aNames.getConstArray();
@@ -1848,7 +1848,7 @@
             if ( !pBasicLib )
                 continue;
 
-            Reference< XNameAccess > xScriptLibrary( xScripts->getByName( *pNames ), UNO_QUERY_THROW );
+           ::com::sun::star::uno::Reference< XNameAccess > xScriptLibrary( xScripts->getByName( *pNames ), UNO_QUERY_THROW );
             Sequence< OUString > aElementNames( xScriptLibrary->getElementNames() );
             sal_Int32 nLen = aElementNames.getLength();
 
@@ -1925,8 +1925,8 @@
 class LibraryInfo_Impl : public LibraryInfoHelper
 {
 	OUString maName;
-	Reference< XNameContainer > mxModuleContainer;
-	Reference< XNameContainer > mxDialogContainer;
+	::com::sun::star::uno::Reference< XNameContainer > mxModuleContainer;
+	::com::sun::star::uno::Reference< XNameContainer > mxDialogContainer;
 	OUString maPassword;
 	OUString maExternaleSourceURL;
 	OUString maLinkTargetURL;
@@ -1935,8 +1935,8 @@
 	LibraryInfo_Impl
 	(
 		const OUString& aName,
-		Reference< XNameContainer > xModuleContainer,
-		Reference< XNameContainer > xDialogContainer,
+		::com::sun::star::uno::Reference< XNameContainer > xModuleContainer,
+		::com::sun::star::uno::Reference< XNameContainer > xDialogContainer,
 		const OUString& aPassword,
 		const OUString& aExternaleSourceURL,
 		const OUString& aLinkTargetURL
@@ -1952,9 +1952,9 @@
     // Methods XStarBasicLibraryInfo
     virtual OUString SAL_CALL getName() throw(RuntimeException)
 		{ return maName; }
-    virtual Reference< XNameContainer > SAL_CALL getModuleContainer() throw(RuntimeException)
+    virtual::com::sun::star::uno::Reference< XNameContainer > SAL_CALL getModuleContainer() throw(RuntimeException)
 		{ return mxModuleContainer; }
-    virtual Reference< XNameContainer > SAL_CALL getDialogContainer() throw(RuntimeException)
+    virtual::com::sun::star::uno::Reference< XNameContainer > SAL_CALL getDialogContainer() throw(RuntimeException)
 		{ return mxDialogContainer; }
     virtual OUString SAL_CALL getPassword() throw(RuntimeException)
 		{ return maPassword; }
@@ -2003,7 +2003,7 @@
 Type ModuleContainer_Impl::getElementType()
 	throw(RuntimeException)
 {
-	Type aModuleType = ::getCppuType( (const Reference< XStarBasicModuleInfo > *)0 );
+	Type aModuleType = ::getCppuType( (const::com::sun::star::uno::Reference< XStarBasicModuleInfo > *)0 );
 	return aModuleType;
 }
 
@@ -2021,7 +2021,7 @@
     SbModule* pMod = mpLib ? mpLib->FindModule( aName ) : NULL;
 	if( !pMod )
 		throw NoSuchElementException();
-	Reference< XStarBasicModuleInfo > xMod = (XStarBasicModuleInfo*)new ModuleInfo_Impl
+	::com::sun::star::uno::Reference< XStarBasicModuleInfo > xMod = (XStarBasicModuleInfo*)new ModuleInfo_Impl
 		( aName, OUString::createFromAscii( szScriptLanguage ), pMod->GetSource32() );
 	Any aRetAny;
 	aRetAny <<= xMod;
@@ -2065,11 +2065,11 @@
 void ModuleContainer_Impl::insertByName( const OUString& aName, const Any& aElement )
 	throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
 {
-	Type aModuleType = ::getCppuType( (const Reference< XStarBasicModuleInfo > *)0 );
+	Type aModuleType = ::getCppuType( (const::com::sun::star::uno::Reference< XStarBasicModuleInfo > *)0 );
 	Type aAnyType = aElement.getValueType();
 	if( aModuleType != aAnyType )
 		throw IllegalArgumentException();
-	Reference< XStarBasicModuleInfo > xMod;
+	::com::sun::star::uno::Reference< XStarBasicModuleInfo > xMod;
 	aElement >>= xMod;
 	mpLib->MakeModule32( aName, xMod->getSource() );
 }
@@ -2148,7 +2148,7 @@
 Type DialogContainer_Impl::getElementType()
 	throw(RuntimeException)
 {
-	Type aModuleType = ::getCppuType( (const Reference< XStarBasicDialogInfo > *)0 );
+	Type aModuleType = ::getCppuType( (const::com::sun::star::uno::Reference< XStarBasicDialogInfo > *)0 );
 	return aModuleType;
 }
 
@@ -2182,7 +2182,7 @@
 		throw NoSuchElementException();
 	}
 
-	Reference< XStarBasicDialogInfo > xDialog =
+	::com::sun::star::uno::Reference< XStarBasicDialogInfo > xDialog =
 		(XStarBasicDialogInfo*)new DialogInfo_Impl
 			( aName, implGetDialogData( (SbxObject*)pVar ) );
 
@@ -2241,11 +2241,11 @@
 	throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
 {
     (void)aName;
-	Type aModuleType = ::getCppuType( (const Reference< XStarBasicDialogInfo > *)0 );
+	Type aModuleType = ::getCppuType( (const::com::sun::star::uno::Reference< XStarBasicDialogInfo > *)0 );
 	Type aAnyType = aElement.getValueType();
 	if( aModuleType != aAnyType )
 		throw IllegalArgumentException();
-	Reference< XStarBasicDialogInfo > xMod;
+	::com::sun::star::uno::Reference< XStarBasicDialogInfo > xMod;
 	aElement >>= xMod;
 	SbxObjectRef xDialog = implCreateDialog( xMod->getData() );
 	mpLib->Insert( xDialog );
@@ -2306,7 +2306,7 @@
 Type LibraryContainer_Impl::getElementType()
 	throw(RuntimeException)
 {
-	Type aType = ::getCppuType( (const Reference< XStarBasicLibraryInfo > *)0 );
+	Type aType = ::getCppuType( (const::com::sun::star::uno::Reference< XStarBasicLibraryInfo > *)0 );
 	return aType;
 }
 
@@ -2327,10 +2327,10 @@
 		throw NoSuchElementException();
 	StarBASIC* pLib = mpMgr->GetLib( aName );
 
-	Reference< XNameContainer > xModuleContainer =
+	::com::sun::star::uno::Reference< XNameContainer > xModuleContainer =
 		(XNameContainer*)new ModuleContainer_Impl( pLib );
 
-	Reference< XNameContainer > xDialogContainer;
+	::com::sun::star::uno::Reference< XNameContainer > xDialogContainer;
 		(XNameContainer*)new DialogContainer_Impl( pLib );
 
 	BasicLibInfo* pLibInfo = mpMgr->FindLibInfo( pLib );
@@ -2345,7 +2345,7 @@
 	else if( pLibInfo->IsExtern() )
 		aExternaleSourceURL = pLibInfo->GetStorageName();
 
-	Reference< XStarBasicLibraryInfo > xLibInfo = new LibraryInfo_Impl
+	::com::sun::star::uno::Reference< XStarBasicLibraryInfo > xLibInfo = new LibraryInfo_Impl
 	(
 		aName,
 		xModuleContainer,
@@ -2414,7 +2414,7 @@
 class StarBasicAccess_Impl : public StarBasicAccessHelper
 {
 	BasicManager* mpMgr;
-	Reference< XNameContainer > mxLibContainer;
+	::com::sun::star::uno::Reference< XNameContainer > mxLibContainer;
 
 public:
 	StarBasicAccess_Impl( BasicManager* pMgr )
@@ -2423,7 +2423,7 @@
 public:
 
     // Methods
-    virtual Reference< XNameContainer > SAL_CALL getLibraryContainer()
+    virtual::com::sun::star::uno::Reference< XNameContainer > SAL_CALL getLibraryContainer()
 		throw(RuntimeException);
     virtual void SAL_CALL createLibrary( const OUString& LibName, const OUString& Password,
 		const OUString& ExternalSourceURL, const OUString& LinkTargetURL )
@@ -2437,7 +2437,7 @@
 
 };
 
-Reference< XNameContainer > SAL_CALL StarBasicAccess_Impl::getLibraryContainer()
+::com::sun::star::uno::Reference< XNameContainer > SAL_CALL StarBasicAccess_Impl::getLibraryContainer()
 	throw(RuntimeException)
 {
 	if( !mxLibContainer.is() )
@@ -2492,9 +2492,9 @@
 }
 
 // Basic XML Import/Export
-Reference< XStarBasicAccess > getStarBasicAccess( BasicManager* pMgr )
+::com::sun::star::uno::Reference< XStarBasicAccess > getStarBasicAccess( BasicManager* pMgr )
 {
-	Reference< XStarBasicAccess > xRet =
+	::com::sun::star::uno::Reference< XStarBasicAccess > xRet =
 		new StarBasicAccess_Impl( (BasicManager*)pMgr );
 	return xRet;
 }
--- basic/source/classes/eventatt.cxx.gcc43~	2007-06-27 16:17:52.000000000 +0200
+++ basic/source/classes/eventatt.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -164,9 +164,9 @@
 Any sbxToUnoValue( SbxVariable* pVar );
 
 
-Reference< frame::XModel >  getModelFromBasic( SbxObject* pBasic )
+::com::sun::star::uno::Reference< frame::XModel >  getModelFromBasic( SbxObject* pBasic )
 {
-    Reference< frame::XModel > xModel;            
+    ::com::sun::star::uno::Reference< frame::XModel > xModel;            
 
     SbxObject* basicChosen = pBasic;
 
@@ -216,30 +216,30 @@
     return xModel;
 }
 
-void SFURL_firing_impl( const ScriptEvent& aScriptEvent, Any* pRet, const Reference< frame::XModel >& xModel )
+void SFURL_firing_impl( const ScriptEvent& aScriptEvent, Any* pRet, const ::com::sun::star::uno::Reference< frame::XModel >& xModel )
 {
         OSL_TRACE("SFURL_firing_impl() processing script url %s",
             ::rtl::OUStringToOString( aScriptEvent.ScriptCode,
                 RTL_TEXTENCODING_ASCII_US ).pData->buffer );
         try
         {
-            Reference< provider::XScriptProvider > xScriptProvider;
+            ::com::sun::star::uno::Reference< provider::XScriptProvider > xScriptProvider;
             if ( xModel.is() )
             {
-                Reference< provider::XScriptProviderSupplier > xSupplier( xModel, UNO_QUERY );
+                ::com::sun::star::uno::Reference< provider::XScriptProviderSupplier > xSupplier( xModel, UNO_QUERY );
                 OSL_ENSURE( xSupplier.is(), "SFURL_firing_impl: failed to get script provider supplier" );
                 if ( xSupplier.is() )
                     xScriptProvider.set( xSupplier->getScriptProvider() );
             }
             else
             {
-                Reference< XComponentContext > xContext;
-                Reference< XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< XComponentContext > xContext;
+                ::com::sun::star::uno::Reference< XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
                 OSL_ASSERT( xProps.is() );
                 OSL_VERIFY( xProps->getPropertyValue( ::rtl::OUString::createFromAscii( "DefaultContext" ) ) >>= xContext );
                 if ( xContext.is() )
                 {
-                    Reference< provider::XScriptProviderFactory > xFactory(
+                    ::com::sun::star::uno::Reference< provider::XScriptProviderFactory > xFactory(
                         xContext->getValueByName(
                         ::rtl::OUString::createFromAscii( "/singletons/com.sun.star.script.provider.theMasterScriptProviderFactory" ) ), 
                         UNO_QUERY );
@@ -265,7 +265,7 @@
             // get Arguments for script
             inArgs = aScriptEvent.Arguments; 
          
-            Reference< provider::XScript > xScript = xScriptProvider->getScript( aScriptEvent.ScriptCode );
+            ::com::sun::star::uno::Reference< provider::XScript > xScript = xScriptProvider->getScript( aScriptEvent.ScriptCode );
 
             if ( !xScript.is() )
             {
@@ -298,12 +298,12 @@
 class BasicScriptListener_Impl : public WeakImplHelper1< XScriptListener >
 {
 	StarBASICRef maBasicRef;
-        Reference< frame::XModel > m_xModel;
+        ::com::sun::star::uno::Reference< frame::XModel > m_xModel;
 
 	virtual void firing_impl(const ScriptEvent& aScriptEvent, Any* pRet);
 
 public:
-    BasicScriptListener_Impl( StarBASIC* pBasic, const Reference< frame::XModel >& xModel )
+    BasicScriptListener_Impl( StarBASIC* pBasic, const ::com::sun::star::uno::Reference< frame::XModel >& xModel )
 		: maBasicRef( pBasic ), m_xModel( xModel ) {}
     
     // Methoden von XAllListener
@@ -483,11 +483,11 @@
 // Function to map from NameContainer to sequence needed 
 // to call XScriptEventsAttacher::attachEvents
 //void SAL_CALL attachDialogEvents( StarBASIC* pBasic, 
-void SAL_CALL attachDialogEvents( StarBASIC* pBasic, const Reference< frame::XModel >& xModel, 
+void SAL_CALL attachDialogEvents( StarBASIC* pBasic, const ::com::sun::star::uno::Reference< frame::XModel >& xModel, 
 	const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& xDialogControl )
 	//const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener >& xListener )
 {
-	static Reference< XScriptEventsAttacher > xEventsAttacher;
+	static ::com::sun::star::uno::Reference< XScriptEventsAttacher > xEventsAttacher;
 	Guard< Mutex > aGuard( Mutex::getGlobalMutex() );
 	{
 		if( !xEventsAttacher.is() )
@@ -497,27 +497,27 @@
 	if( !xDialogControl.is() )
 		return;
 
-	Reference< XControlContainer > xControlContainer( xDialogControl, UNO_QUERY );
+	::com::sun::star::uno::Reference< XControlContainer > xControlContainer( xDialogControl, UNO_QUERY );
 	if( !xControlContainer.is() )
 		return;
-	Sequence< Reference< XControl > > aControls = xControlContainer->getControls();
-	const Reference< XControl >* pControls = aControls.getConstArray();
+	Sequence< ::com::sun::star::uno::Reference< XControl > > aControls = xControlContainer->getControls();
+	const ::com::sun::star::uno::Reference< XControl >* pControls = aControls.getConstArray();
 	sal_Int32 nControlCount = aControls.getLength();
 	sal_Int32 nObjectCount = nControlCount + 1;
 
-	Sequence< Reference< XInterface > > aObjectSeq( nObjectCount );
-	Reference< XInterface >* pObjects = aObjectSeq.getArray();
+	Sequence< ::com::sun::star::uno::Reference< XInterface > > aObjectSeq( nObjectCount );
+	::com::sun::star::uno::Reference< XInterface >* pObjects = aObjectSeq.getArray();
 	for( sal_Int32 i = 0 ; i < nControlCount ; i++ )
 	{
-		Reference< XInterface > xIface( pControls[i], UNO_QUERY );
+		::com::sun::star::uno::Reference< XInterface > xIface( pControls[i], UNO_QUERY );
 		pObjects[i] = xIface;
 	}
 
 	// Also take the DialogControl itself into the sequence
-	Reference< XInterface > xDialogIface( xDialogControl, UNO_QUERY );
+	::com::sun::star::uno::Reference< XInterface > xDialogIface( xDialogControl, UNO_QUERY );
 	pObjects[ nControlCount ] = xDialogIface;
 
-	Reference< XScriptListener > xScriptListener = new BasicScriptListener_Impl( pBasic, xModel );
+	::com::sun::star::uno::Reference< XScriptListener > xScriptListener = new BasicScriptListener_Impl( pBasic, xModel );
 	Any Helper;
 	xEventsAttacher->attachEvents( aObjectSeq, xScriptListener, Helper );
 }
@@ -527,7 +527,7 @@
 
 class DialogAllListener_Impl : public WeakImplHelper1< XAllListener >
 {
-	Reference< XScriptListener >	mxScriptListener;
+	::com::sun::star::uno::Reference< XScriptListener >	mxScriptListener;
     OUString						maScriptType;
     OUString						maScriptCode;
 	Mutex							maMutex;
@@ -535,7 +535,7 @@
 	virtual void firing_impl(const AllEventObject& Event, Any* pRet);
 
 public:
-    DialogAllListener_Impl( const Reference< XScriptListener >& xListener, 
+    DialogAllListener_Impl( const ::com::sun::star::uno::Reference< XScriptListener >& xListener, 
 		const OUString &rScriptType, const OUString & rScriptCode );
 
     // Methoden von XAllListener
@@ -551,7 +551,7 @@
 
 //========================================================================
 
-DialogAllListener_Impl::DialogAllListener_Impl( const Reference< XScriptListener >& xListener, 
+DialogAllListener_Impl::DialogAllListener_Impl( const ::com::sun::star::uno::Reference< XScriptListener >& xListener, 
 	const OUString &rScriptType, const OUString & rScriptCode )
 		: mxScriptListener( xListener )
 		, maScriptType( rScriptType )
@@ -608,8 +608,8 @@
 
 void SAL_CALL DialogEventAttacher::attachEvents
 (
-	const Sequence< Reference< XInterface > >& Objects,
-	const Reference< XScriptListener >& xListener, 
+	const Sequence< ::com::sun::star::uno::Reference< XInterface > >& Objects,
+	const ::com::sun::star::uno::Reference< XScriptListener >& xListener, 
 	const Any& Helper 
 ) 
 	throw(	IllegalArgumentException, 
@@ -624,15 +624,15 @@
 		if( !mxEventAttacher.is() )
 		{
 			// AllListenerAdapterService holen
-			Reference< XMultiServiceFactory > xSMgr( comphelper::getProcessServiceFactory() );
+			::com::sun::star::uno::Reference< XMultiServiceFactory > xSMgr( comphelper::getProcessServiceFactory() );
 			if( !xSMgr.is() )
 				throw RuntimeException();
 
-			Reference< XInterface > xIFace( xSMgr->createInstance( 
+			::com::sun::star::uno::Reference< XInterface > xIFace( xSMgr->createInstance( 
 				OUString::createFromAscii("com.sun.star.script.EventAttacher") ) );
 			if ( xIFace.is() )
 			{
-				mxEventAttacher = Reference< XEventAttacher >::query( xIFace );
+				mxEventAttacher = ::com::sun::star::uno::Reference< XEventAttacher >::query( xIFace );
 			}
 			if( !mxEventAttacher.is() )
 				throw ServiceNotRegisteredException();
@@ -640,23 +640,23 @@
 	}
 
 	// Go over all objects
-	const Reference< XInterface >* pObjects = Objects.getConstArray();
+	const ::com::sun::star::uno::Reference< XInterface >* pObjects = Objects.getConstArray();
 	sal_Int32 i, nObjCount = Objects.getLength();
 	for( i = 0 ; i < nObjCount ; i++ )
 	{
 		// We know that we have to do with instances of XControl
 		// Otherwise this is not the right implementation for
 		// XScriptEventsAttacher and we have to give up
-		Reference< XControl > xControl( pObjects[ i ], UNO_QUERY );
+		::com::sun::star::uno::Reference< XControl > xControl( pObjects[ i ], UNO_QUERY );
 		if( !xControl.is() )
 			throw IllegalArgumentException();
 
 		// Get XEventsSupplier from ControlModel
-		Reference< XControlModel > xControlModel = xControl->getModel();
-		Reference< XScriptEventsSupplier > xEventsSupplier( xControlModel, UNO_QUERY );
+		::com::sun::star::uno::Reference< XControlModel > xControlModel = xControl->getModel();
+		::com::sun::star::uno::Reference< XScriptEventsSupplier > xEventsSupplier( xControlModel, UNO_QUERY );
 		if( xEventsSupplier.is() )
 		{
-			Reference< XNameContainer > xEventCont = xEventsSupplier->getEvents();
+			::com::sun::star::uno::Reference< XNameContainer > xEventCont = xEventsSupplier->getEvents();
 			Sequence< OUString > aNames = xEventCont->getElementNames();
 			const OUString* pNames = aNames.getConstArray();
 			sal_Int32 j, nNameCount = aNames.getLength();
@@ -667,14 +667,14 @@
 
 				Any aElement = xEventCont->getByName( pNames[ j ] );
 				aElement >>= aDesc;
-				Reference< XAllListener > xAllListener =
+				::com::sun::star::uno::Reference< XAllListener > xAllListener =
 					new DialogAllListener_Impl( xListener, aDesc.ScriptType, aDesc.ScriptCode );
 
 				// Try first to attach event to the ControlModel
 				sal_Bool bSuccess = sal_False;
 				try
 				{
-					Reference< XEventListener > xListener_ = mxEventAttacher->
+					::com::sun::star::uno::Reference< XEventListener > xListener_ = mxEventAttacher->
 						attachSingleEventListener( xControlModel, xAllListener, Helper, 
 						aDesc.ListenerType, aDesc.AddListenerParam, aDesc.EventMethod );
 
@@ -698,7 +698,7 @@
 				// If we had no success, try to attach to the Control
 				if( !bSuccess )
 				{
-					Reference< XEventListener > xListener_;	// Do we need that?!?
+					::com::sun::star::uno::Reference< XEventListener > xListener_;	// Do we need that?!?
 					xListener_ = mxEventAttacher->attachSingleEventListener
 						( xControl, xAllListener, Helper, aDesc.ListenerType,
 						  aDesc.AddListenerParam, aDesc.EventMethod );
@@ -718,19 +718,19 @@
 
 }
 
-Reference< XStringResourceManager > getStringResourceFromDialogLibrary( const Any& aDlgLibAny )
+::com::sun::star::uno::Reference< XStringResourceManager > getStringResourceFromDialogLibrary( const Any& aDlgLibAny )
 {
-	Reference< resource::XStringResourceManager > xStringResourceManager;
+	::com::sun::star::uno::Reference< resource::XStringResourceManager > xStringResourceManager;
 
-	Reference< resource::XStringResourceSupplier > xStringResourceSupplier;
+	::com::sun::star::uno::Reference< resource::XStringResourceSupplier > xStringResourceSupplier;
 	aDlgLibAny >>= xStringResourceSupplier;
 	if( xStringResourceSupplier.is() )
 	{
-		Reference< resource::XStringResourceResolver >
+		::com::sun::star::uno::Reference< resource::XStringResourceResolver >
 			xStringResourceResolver = xStringResourceSupplier->getStringResource();
 
 		xStringResourceManager = 
-			Reference< resource::XStringResourceManager >( xStringResourceResolver, UNO_QUERY );
+			::com::sun::star::uno::Reference< resource::XStringResourceManager >( xStringResourceResolver, UNO_QUERY );
 	}
 	return xStringResourceManager;
 }
@@ -746,7 +746,7 @@
 		SbUnoObject* pDlgLibContUnoObj = (SbUnoObject*)(SbxBase*)pDlgLibContVar;
 		Any aDlgLibContAny = pDlgLibContUnoObj->getUnoAny();
 
-		Reference< XNameAccess > xDlgLibContNameAccess;
+		::com::sun::star::uno::Reference< XNameAccess > xDlgLibContNameAccess;
 		aDlgLibContAny >>= xDlgLibContNameAccess;
 		if( xDlgLibContNameAccess.is() )
 		{
@@ -758,7 +758,7 @@
 			{
 				Any aDlgLibAny = xDlgLibContNameAccess->getByName( pLibNames[ iLib ] );
 
-				Reference< XNameAccess > xDlgLibNameAccess;
+				::com::sun::star::uno::Reference< XNameAccess > xDlgLibNameAccess;
 				aDlgLibAny >>= xDlgLibNameAccess;
 				if( xDlgLibNameAccess.is() )
 				{
@@ -794,7 +794,7 @@
     if (0 == s_xmlscript)
         s_xmlscript = ::xmlscript::getXmlScript();
 
-	Reference< XMultiServiceFactory > xMSF( comphelper::getProcessServiceFactory() );
+	::com::sun::star::uno::Reference< XMultiServiceFactory > xMSF( comphelper::getProcessServiceFactory() );
 	if( !xMSF.is() )
 		return;
 
@@ -823,24 +823,24 @@
 	}
 
 	// Create new uno dialog
-	Reference< XNameContainer > xDialogModel( xMSF->createInstance
+	::com::sun::star::uno::Reference< XNameContainer > xDialogModel( xMSF->createInstance
 		( OUString(RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.UnoControlDialogModel" ) ) ), 
 			UNO_QUERY );
 	if( !xDialogModel.is() )
 		return;
 
-	Reference< XInputStreamProvider > xISP;
+	::com::sun::star::uno::Reference< XInputStreamProvider > xISP;
 	aAnyISP >>= xISP;
 	if( !xISP.is() )
 		return;
 
-    Reference< XComponentContext > xContext;
-    Reference< XPropertySet > xProps( xMSF, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponentContext > xContext;
+    ::com::sun::star::uno::Reference< XPropertySet > xProps( xMSF, UNO_QUERY );
     OSL_ASSERT( xProps.is() );
     OSL_VERIFY( xProps->getPropertyValue( ::rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext );
 
 	// Import the DialogModel
-	Reference< XInputStream > xInput( xISP->createInputStream() );
+	::com::sun::star::uno::Reference< XInputStream > xInput( xISP->createInputStream() );
     s_xmlscript->importDialogModel( xInput, xDialogModel, xContext );
 
 	// Find dialog library for dialog, direct access is not possible here
@@ -870,33 +870,33 @@
 	}
 
 	// Get resource from dialog library and set at dialog
-	Reference< XStringResourceManager > xStringResourceManager
+	::com::sun::star::uno::Reference< XStringResourceManager > xStringResourceManager
 		= getStringResourceFromDialogLibrary( aDlgLibAny );
 	if( xStringResourceManager.is() )
 	{
-		Reference< beans::XPropertySet > xDlgPSet( xDialogModel, UNO_QUERY );
+		::com::sun::star::uno::Reference< beans::XPropertySet > xDlgPSet( xDialogModel, UNO_QUERY );
 		Any aStringResourceManagerAny;
 		aStringResourceManagerAny <<= xStringResourceManager;
 		xDlgPSet->setPropertyValue( aResourceResolverPropName, aStringResourceManagerAny );
 	}
 
     // Add dialog model to dispose vector
-	Reference< XComponent > xDlgComponent( xDialogModel, UNO_QUERY );
+	::com::sun::star::uno::Reference< XComponent > xDlgComponent( xDialogModel, UNO_QUERY );
     pINST->getComponentVector().push_back( xDlgComponent );
 
 	// Create a "living" Dialog
-	Reference< XControl > xDlg( xMSF->createInstance( OUString(RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.UnoControlDialog" ) ) ), UNO_QUERY );
-	Reference< XControlModel > xDlgMod( xDialogModel, UNO_QUERY );
+	::com::sun::star::uno::Reference< XControl > xDlg( xMSF->createInstance( OUString(RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.UnoControlDialog" ) ) ), UNO_QUERY );
+	::com::sun::star::uno::Reference< XControlModel > xDlgMod( xDialogModel, UNO_QUERY );
 	xDlg->setModel( xDlgMod );
-	Reference< XWindow > xW( xDlg, UNO_QUERY );
+	::com::sun::star::uno::Reference< XWindow > xW( xDlg, UNO_QUERY );
 	xW->setVisible( sal_False );
-	Reference< XToolkit > xToolkit( xMSF->createInstance( 
+	::com::sun::star::uno::Reference< XToolkit > xToolkit( xMSF->createInstance( 
 	OUString(RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.ExtToolkit" ) ) ), UNO_QUERY );
 	xDlg->createPeer( xToolkit, NULL );
     // need ThisCompoent from calling script
 
     OSL_TRACE("About to try get a hold of ThisComponent");
-    Reference< frame::XModel > xModel = getModelFromBasic( pStartedBasic ) ;            
+    ::com::sun::star::uno::Reference< frame::XModel > xModel = getModelFromBasic( pStartedBasic ) ;            
 	attachDialogEvents( pStartedBasic, xModel, xDlg );
     
 	// Return dialog
--- basic/source/classes/propacc.cxx.gcc43~	2007-06-27 16:18:20.000000000 +0200
+++ basic/source/classes/propacc.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -100,7 +100,7 @@
 
 SbPropertyValues::~SbPropertyValues()
 {
-	_xInfo = Reference< XPropertySetInfo >();
+	_xInfo =::com::sun::star::uno::Reference< XPropertySetInfo >();
 
 	for ( USHORT n = 0; n < _aPropVals.Count(); ++n )
 		delete _aPropVals.GetObject( n );
@@ -108,7 +108,7 @@
 
 //----------------------------------------------------------------------------
 
-Reference< XPropertySetInfo > SbPropertyValues::getPropertySetInfo(void) throw( RuntimeException )
+::com::sun::star::uno::Reference< XPropertySetInfo > SbPropertyValues::getPropertySetInfo(void) throw( RuntimeException )
 {
 	// create on demand?
 	if ( !_xInfo.is() )
@@ -167,7 +167,7 @@
 
 void SbPropertyValues::addPropertyChangeListener(
 					const OUString& aPropertyName,
-					const Reference< XPropertyChangeListener >& )
+					const::com::sun::star::uno::Reference< XPropertyChangeListener >& )
                     throw ()
 {
     (void)aPropertyName;
@@ -177,7 +177,7 @@
 
 void SbPropertyValues::removePropertyChangeListener(
 					const OUString& aPropertyName,
-					const Reference< XPropertyChangeListener >& )
+					const::com::sun::star::uno::Reference< XPropertyChangeListener >& )
                     throw ()
 {
     (void)aPropertyName;
@@ -187,7 +187,7 @@
 
 void SbPropertyValues::addVetoableChangeListener(
 					const OUString& aPropertyName,
-					const Reference< XVetoableChangeListener >& )
+					const::com::sun::star::uno::Reference< XVetoableChangeListener >& )
                     throw()
 {
     (void)aPropertyName;
@@ -197,7 +197,7 @@
 
 void SbPropertyValues::removeVetoableChangeListener(
 					const OUString& aPropertyName,
-					const Reference< XVetoableChangeListener >& )
+					const::com::sun::star::uno::Reference< XVetoableChangeListener >& )
                     throw()
 {
     (void)aPropertyName;
@@ -401,12 +401,12 @@
 
 #if 0
 	// Service suchen und instanzieren
-	Reference< XMultiServiceFactory > xServiceManager = getProcessServiceFactory();
-	Reference< XInterface > xInterface;
+	::com::sun::star::uno::Reference< XMultiServiceFactory > xServiceManager = getProcessServiceFactory();
+	::com::sun::star::uno::Reference< XInterface > xInterface;
 	if( xProv.is() )
 		xInterface = xProv->newInstance();
 #else
-	Reference< XInterface > xInterface = (OWeakObject*) new SbPropertyValues();
+	::com::sun::star::uno::Reference< XInterface > xInterface = (OWeakObject*) new SbPropertyValues();
 #endif
 
 	SbxVariableRef refVar = rPar.Get(0);
@@ -417,7 +417,7 @@
 				getCppuType( (Sequence<PropertyValue>*)0 ) );
 		Sequence<PropertyValue> *pArg =
 				(Sequence<PropertyValue>*) aArgAsAny.getValue();
-		Reference< XPropertyAccess > xPropAcc = Reference< XPropertyAccess >::query( xInterface );
+		::com::sun::star::uno::Reference< XPropertyAccess > xPropAcc =::com::sun::star::uno::Reference< XPropertyAccess >::query( xInterface );
 		xPropAcc->setPropertyValues( *pArg );
 
 		// SbUnoObject daraus basteln und zurueckliefern
--- basic/source/classes/sbunoobj.cxx.gcc43~	2007-11-06 00:26:17.000000000 +0100
+++ basic/source/classes/sbunoobj.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -143,7 +143,7 @@
 bool SbUnoObject::getDefaultPropName( SbUnoObject* pUnoObj, String& sDfltProp )
 {
 	bool result = false;
-	Reference< XDefaultProperty> xDefaultProp( pUnoObj->maTmpUnoObj, UNO_QUERY );
+	::com::sun::star::uno::Reference< XDefaultProperty> xDefaultProp( pUnoObj->maTmpUnoObj, UNO_QUERY );
 	if ( xDefaultProp.is() )
 	{
 		sDfltProp = xDefaultProp->getDefaultPropertyName();
@@ -185,15 +185,15 @@
 	}
 }
 
-Reference< XComponentContext > getComponentContext_Impl( void )
+::com::sun::star::uno::Reference< XComponentContext > getComponentContext_Impl( void )
 {
-    static Reference< XComponentContext > xContext;
+    static::com::sun::star::uno::Reference< XComponentContext > xContext;
 
 	// Haben wir schon CoreReflection, sonst besorgen
 	if( !xContext.is() )
 	{
-		Reference< XMultiServiceFactory > xFactory = comphelper::getProcessServiceFactory();
-        Reference< XPropertySet > xProps( xFactory, UNO_QUERY );
+		::com::sun::star::uno::Reference< XMultiServiceFactory > xFactory = comphelper::getProcessServiceFactory();
+       ::com::sun::star::uno::Reference< XPropertySet > xProps( xFactory, UNO_QUERY );
         OSL_ASSERT( xProps.is() );
         if (xProps.is())
         {
@@ -206,14 +206,14 @@
 }
 
 // CoreReflection statisch speichern
-Reference< XIdlReflection > getCoreReflection_Impl( void )
+::com::sun::star::uno::Reference< XIdlReflection > getCoreReflection_Impl( void )
 {
-	static Reference< XIdlReflection > xCoreReflection;
+	static::com::sun::star::uno::Reference< XIdlReflection > xCoreReflection;
 
 	// Haben wir schon CoreReflection, sonst besorgen
 	if( !xCoreReflection.is() )
 	{
-        Reference< XComponentContext > xContext = getComponentContext_Impl();
+       ::com::sun::star::uno::Reference< XComponentContext > xContext = getComponentContext_Impl();
         if( xContext.is() )
         {
             xContext->getValueByName(
@@ -225,38 +225,38 @@
         {
             throw DeploymentException(
                 OUString( RTL_CONSTASCII_USTRINGPARAM("/singletons/com.sun.star.reflection.theCoreReflection singleton not accessable") ),
-                Reference< XInterface >() );
+               ::com::sun::star::uno::Reference< XInterface >() );
         }
 	}
 	return xCoreReflection;
 }
 
 // CoreReflection statisch speichern
-Reference< XHierarchicalNameAccess > getCoreReflection_HierarchicalNameAccess_Impl( void )
+::com::sun::star::uno::Reference< XHierarchicalNameAccess > getCoreReflection_HierarchicalNameAccess_Impl( void )
 {
-	static Reference< XHierarchicalNameAccess > xCoreReflection_HierarchicalNameAccess;
+	static::com::sun::star::uno::Reference< XHierarchicalNameAccess > xCoreReflection_HierarchicalNameAccess;
 
 	if( !xCoreReflection_HierarchicalNameAccess.is() )
 	{
-		Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
+		::com::sun::star::uno::Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
 		if( xCoreReflection.is() )
 		{
 			xCoreReflection_HierarchicalNameAccess = 
-				Reference< XHierarchicalNameAccess >( xCoreReflection, UNO_QUERY );
+				::com::sun::star::uno::Reference< XHierarchicalNameAccess >( xCoreReflection, UNO_QUERY );
 		}
 	}
 	return xCoreReflection_HierarchicalNameAccess;
 }
 
 // Hold TypeProvider statically
-Reference< XHierarchicalNameAccess > getTypeProvider_Impl( void )
+::com::sun::star::uno::Reference< XHierarchicalNameAccess > getTypeProvider_Impl( void )
 {
-	static Reference< XHierarchicalNameAccess > xAccess;
+	static::com::sun::star::uno::Reference< XHierarchicalNameAccess > xAccess;
 
 	// Haben wir schon CoreReflection, sonst besorgen
 	if( !xAccess.is() )
 	{
-        Reference< XComponentContext > xContext = getComponentContext_Impl();
+       ::com::sun::star::uno::Reference< XComponentContext > xContext = getComponentContext_Impl();
         if( xContext.is() )
         {
             xContext->getValueByName(
@@ -269,25 +269,25 @@
             throw DeploymentException(
                 OUString( RTL_CONSTASCII_USTRINGPARAM
                     ("/singletons/com.sun.star.reflection.theTypeDescriptionManager singleton not accessable") ),
-                Reference< XInterface >() );
+               ::com::sun::star::uno::Reference< XInterface >() );
         }
 	}
 	return xAccess;
 }
 
 // Hold TypeConverter statically
-Reference< XTypeConverter > getTypeConverter_Impl( void )
+::com::sun::star::uno::Reference< XTypeConverter > getTypeConverter_Impl( void )
 {
-	static Reference< XTypeConverter > xTypeConverter;
+	static::com::sun::star::uno::Reference< XTypeConverter > xTypeConverter;
 
 	// Haben wir schon CoreReflection, sonst besorgen
 	if( !xTypeConverter.is() )
 	{
-        Reference< XComponentContext > xContext = getComponentContext_Impl();
+       ::com::sun::star::uno::Reference< XComponentContext > xContext = getComponentContext_Impl();
         if( xContext.is() )
         {
-            Reference<XMultiComponentFactory> xSMgr = xContext->getServiceManager();
-	        xTypeConverter = Reference<XTypeConverter>(
+           ::com::sun::star::uno::Reference<XMultiComponentFactory> xSMgr = xContext->getServiceManager();
+	        xTypeConverter =::com::sun::star::uno::Reference<XTypeConverter>(
 		        xSMgr->createInstanceWithContext(
 			        OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.script.Converter")),
 			            xContext ), UNO_QUERY );
@@ -297,7 +297,7 @@
             throw DeploymentException(
                 OUString( RTL_CONSTASCII_USTRINGPARAM
                     ("com.sun.star.script.Converter service not accessable") ),
-                Reference< XInterface >() );
+               ::com::sun::star::uno::Reference< XInterface >() );
         }
 	}
 	return xTypeConverter;
@@ -307,18 +307,18 @@
 // #111851 factory function to create an OLE object
 SbUnoObject* createOLEObject_Impl( const String& aType )
 {
-	static Reference< XMultiServiceFactory > xOLEFactory;
+	static::com::sun::star::uno::Reference< XMultiServiceFactory > xOLEFactory;
 	static bool bNeedsInit = true;
 
 	if( bNeedsInit )
 	{
 		bNeedsInit = false;
 
-        Reference< XComponentContext > xContext = getComponentContext_Impl();
+       ::com::sun::star::uno::Reference< XComponentContext > xContext = getComponentContext_Impl();
         if( xContext.is() )
         {
-            Reference<XMultiComponentFactory> xSMgr = xContext->getServiceManager();
-	        xOLEFactory = Reference<XMultiServiceFactory>(
+           ::com::sun::star::uno::Reference<XMultiComponentFactory> xSMgr = xContext->getServiceManager();
+	        xOLEFactory =::com::sun::star::uno::Reference<XMultiServiceFactory>(
 		        xSMgr->createInstanceWithContext(
 			        OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.bridge.OleObjectFactory")),
 			            xContext ), UNO_QUERY );
@@ -328,7 +328,7 @@
 	SbUnoObject* pUnoObj = NULL;
 	if( xOLEFactory.is() )
 	{
-		Reference< XInterface > xOLEObject = xOLEFactory->createInstance( aType );
+		::com::sun::star::uno::Reference< XInterface > xOLEObject = xOLEFactory->createInstance( aType );
 		if( xOLEObject.is() )
 		{
 			Any aAny;
@@ -345,7 +345,7 @@
 Any convertAny( const Any& rVal, const Type& aDestType )
 {
     Any aConvertedVal;
-    Reference< XTypeConverter > xConverter = getTypeConverter_Impl();
+   ::com::sun::star::uno::Reference< XTypeConverter > xConverter = getTypeConverter_Impl();
 	try
 	{
         aConvertedVal = xConverter->convertTo( rVal, aDestType );
@@ -373,17 +373,17 @@
 
 
 // TODO: Spaeter auslagern
-Reference<XIdlClass> TypeToIdlClass( const Type& rType )
+::com::sun::star::uno::Reference<XIdlClass> TypeToIdlClass( const Type& rType )
 {
 	// void als Default-Klasse eintragen
-	Reference<XIdlClass> xRetClass;
+	::com::sun::star::uno::Reference<XIdlClass> xRetClass;
 	typelib_TypeDescription * pTD = 0;
 	rType.getDescription( &pTD );
 
 	if( pTD )
 	{
 		OUString sOWName( pTD->pTypeName );
-		Reference< XIdlReflection > xRefl = getCoreReflection_Impl();
+		::com::sun::star::uno::Reference< XIdlReflection > xRefl = getCoreReflection_Impl();
 		xRetClass = xRefl->forName( sOWName );
 	}
 	return xRetClass;
@@ -513,7 +513,7 @@
 	return eRetType;
 }
 
-SbxDataType unoToSbxType( const Reference< XIdlClass >& xIdlClass )
+SbxDataType unoToSbxType( const::com::sun::star::uno::Reference< XIdlClass >& xIdlClass )
 {
 	SbxDataType eRetType = SbxVOID;
 	if( xIdlClass.is() )
@@ -534,8 +534,8 @@
 
 	if ( eTypeClass == TypeClass_SEQUENCE )
 	{
-		Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( aType );
-		Reference< XIdlArray > xIdlArray = xIdlTargetClass->getArray();
+		::com::sun::star::uno::Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( aType );
+		::com::sun::star::uno::Reference< XIdlArray > xIdlArray = xIdlTargetClass->getArray();
 		typelib_TypeDescription * pTD = 0;
         aType.getDescription( &pTD );
 		Type aElementType( ((typelib_IndirectTypeDescription *)pTD)->pType );
@@ -619,7 +619,7 @@
 			// Map Type to IdlClass
 			Type aType_;
 			aValue >>= aType_;
-			Reference<XIdlClass> xClass = TypeToIdlClass( aType_ );
+			::com::sun::star::uno::Reference<XIdlClass> xClass = TypeToIdlClass( aType_ );
 			Any aClassAny;
 			aClassAny <<= xClass;
 
@@ -747,8 +747,8 @@
 
 		case TypeClass_SEQUENCE:
 		{
-			Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( aType );
-			Reference< XIdlArray > xIdlArray = xIdlTargetClass->getArray();
+			::com::sun::star::uno::Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( aType );
+			::com::sun::star::uno::Reference< XIdlArray > xIdlArray = xIdlTargetClass->getArray();
 			sal_Int32 i, nLen = xIdlArray->getLen( aValue );
 
             typelib_TypeDescription * pTD = 0;
@@ -839,7 +839,7 @@
 	switch( eType )
 	{
 		//case SbxEMPTY:		eRet = TypeClass_VOID; break;
-		case SbxNULL:		aRetType = ::getCppuType( (const Reference< XInterface > *)0 ); break;
+		case SbxNULL:		aRetType = ::getCppuType( (const::com::sun::star::uno::Reference< XInterface > *)0 ); break;
 		case SbxINTEGER:	aRetType = ::getCppuType( (sal_Int16*)0 ); break;
 		case SbxLONG:		aRetType = ::getCppuType( (sal_Int32*)0 ); break;
 		case SbxSINGLE:		aRetType = ::getCppuType( (float*)0 ); break;
@@ -900,7 +900,7 @@
 		{
 			// #109936 No error any more
 			// StarBASIC::Error( SbERR_INVALID_OBJECT );
-			aRetType = getCppuType( static_cast<Reference<XInterface> *>(0) );
+			aRetType = getCppuType( static_cast<com::sun::star::uno::Reference<XInterface> *>(0) );
 			return aRetType;
 		}
 
@@ -1111,14 +1111,14 @@
 
 	// Create Sequence instance
 	Any aRetVal;
-	Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( aSeqType );
+	::com::sun::star::uno::Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( aSeqType );
 	xIdlTargetClass->createObject( aRetVal );
 
 	// Alloc sequence according to array bounds
 	sal_Int32 nUpper = pUpperBounds[nActualDim];
 	sal_Int32 nLower = pLowerBounds[nActualDim];
 	sal_Int32 nSeqSize = nUpper - nLower + 1;
-	Reference< XIdlArray > xArray = xIdlTargetClass->getArray();
+	::com::sun::star::uno::Reference< XIdlArray > xArray = xIdlTargetClass->getArray();
 	xArray->realloc( aRetVal, nSeqSize );
 
 	sal_Int32& ri = pActualIndices[nActualDim];
@@ -1191,12 +1191,12 @@
 		case TypeClass_STRUCT:
 		case TypeClass_EXCEPTION:
 		{
-			Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( rType );
+			::com::sun::star::uno::Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( rType );
 
 			// Null-Referenz?
 			if( pVar->IsNull() && eType == TypeClass_INTERFACE )
 			{
-				Reference< XInterface > xRef;
+				::com::sun::star::uno::Reference< XInterface > xRef;
 				OUString aClassName = xIdlTargetClass->getName();
 				Type aClassType( xIdlTargetClass->getTypeClass(), aClassName.getStr() );
 				aRetVal.setValue( &xRef, aClassType );
@@ -1245,7 +1245,7 @@
 				else
 				{
 					// #109936 NULL object -> NULL XInterface
-					Reference<XInterface> xInt;
+					::com::sun::star::uno::Reference<XInterface> xInt;
 					aRetVal <<= xInt;
 				}
 			}
@@ -1285,9 +1285,9 @@
 					sal_Int32 nSeqSize = nUpper - nLower + 1;
 
 					// Instanz der geforderten Sequence erzeugen
-					Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( rType );
+					::com::sun::star::uno::Reference< XIdlClass > xIdlTargetClass = TypeToIdlClass( rType );
 					xIdlTargetClass->createObject( aRetVal );
-					Reference< XIdlArray > xArray = xIdlTargetClass->getArray();
+					::com::sun::star::uno::Reference< XIdlArray > xArray = xIdlTargetClass->getArray();
 					xArray->realloc( aRetVal, nSeqSize );
 
 					// Element-Type
@@ -1296,7 +1296,7 @@
 					typelib_typedescription_getByName( &pSeqTD, aClassName.pData );
 					OSL_ASSERT( pSeqTD );
 					Type aElemType( ((typelib_IndirectTypeDescription *)pSeqTD)->pType );
-					// Reference< XIdlClass > xElementClass = TypeToIdlClass( aElemType );
+					//::com::sun::star::uno::Reference< XIdlClass > xElementClass = TypeToIdlClass( aElemType );
 
 					// Alle Array-Member umwandeln und eintragen
 					sal_Int32 nIdx = nLower;
@@ -1443,10 +1443,10 @@
 }
 
 // Dbg-Hilfsmethode zum Auslesen der in einem Object implementierten Interfaces
-String Impl_GetInterfaceInfo( const Reference< XInterface >& x, const Reference< XIdlClass >& xClass, USHORT nRekLevel )
+String Impl_GetInterfaceInfo( const::com::sun::star::uno::Reference< XInterface >& x, const::com::sun::star::uno::Reference< XIdlClass >& xClass, USHORT nRekLevel )
 {
-	Type aIfaceType = ::getCppuType( (const Reference< XInterface > *)0 );
-	static Reference< XIdlClass > xIfaceClass = TypeToIdlClass( aIfaceType );
+	Type aIfaceType = ::getCppuType( (const::com::sun::star::uno::Reference< XInterface > *)0 );
+	static::com::sun::star::uno::Reference< XIdlClass > xIfaceClass = TypeToIdlClass( aIfaceType );
 
 	String aRetStr;
 	for( USHORT i = 0 ; i < nRekLevel ; i++ )
@@ -1466,12 +1466,12 @@
 		aRetStr.AppendAscii( "\n" );
 
 		// Super-Interfaces holen
-		Sequence< Reference< XIdlClass > > aSuperClassSeq = xClass->getSuperclasses();
-		const Reference< XIdlClass >* pClasses = aSuperClassSeq.getConstArray();
+		Sequence<com::sun::star::uno::Reference< XIdlClass > > aSuperClassSeq = xClass->getSuperclasses();
+		const::com::sun::star::uno::Reference< XIdlClass >* pClasses = aSuperClassSeq.getConstArray();
 		UINT32 nSuperIfaceCount = aSuperClassSeq.getLength();
 		for( UINT32 j = 0 ; j < nSuperIfaceCount ; j++ )
 		{
-			const Reference< XIdlClass >& rxIfaceClass = pClasses[j];
+			const::com::sun::star::uno::Reference< XIdlClass >& rxIfaceClass = pClasses[j];
 			if( !rxIfaceClass->equals( xIfaceClass ) )
 				aRetStr += Impl_GetInterfaceInfo( x, rxIfaceClass, nRekLevel + 1 );
 		}
@@ -1489,12 +1489,12 @@
 		{
 			Any aToInspectObj = pUnoObj->getUnoAny();
 			TypeClass eType = aToInspectObj.getValueType().getTypeClass();
-			Reference< XInterface > xObj;
+			::com::sun::star::uno::Reference< XInterface > xObj;
 			if( eType == TypeClass_INTERFACE )
-				xObj = *(Reference< XInterface >*)aToInspectObj.getValue();
+				xObj = *(::com::sun::star::uno::Reference< XInterface >*)aToInspectObj.getValue();
 			if( xObj.is() )
 			{
-				Reference< XServiceInfo > xServiceInfo( xObj, UNO_QUERY );
+				::com::sun::star::uno::Reference< XServiceInfo > xServiceInfo( xObj, UNO_QUERY );
 				if( xServiceInfo.is() )
 					aName = xServiceInfo->getImplementationName();
 			}
@@ -1538,8 +1538,8 @@
 	TypeClass eType = aToInspectObj.getValueType().getTypeClass();
 	if( eType != TypeClass_INTERFACE )
 		return false;
-	const Reference< XInterface > x = *(Reference< XInterface >*)aToInspectObj.getValue();
-	Reference< XTypeProvider > xTypeProvider( x, UNO_QUERY );
+	const::com::sun::star::uno::Reference< XInterface > x = *(::com::sun::star::uno::Reference< XInterface >*)aToInspectObj.getValue();
+	::com::sun::star::uno::Reference< XTypeProvider > xTypeProvider( x, UNO_QUERY );
 	if( xTypeProvider.is() )
 	{
 		Sequence< Type > aTypeSeq = xTypeProvider->getTypes();
@@ -1549,7 +1549,7 @@
 		{
 			const Type& rType = pTypeArray[j];
 
-			Reference<XIdlClass> xClass = TypeToIdlClass( rType );
+			::com::sun::star::uno::Reference<XIdlClass> xClass = TypeToIdlClass( rType );
 			if( !xClass.is() )
 			{
 				DBG_ERROR("failed to get XIdlClass for type");
@@ -1591,11 +1591,11 @@
 	else
 	{
 		// Interface aus dem Any besorgen
-		const Reference< XInterface > x = *(Reference< XInterface >*)aToInspectObj.getValue();
+		const::com::sun::star::uno::Reference< XInterface > x = *(::com::sun::star::uno::Reference< XInterface >*)aToInspectObj.getValue();
 
 		// XIdlClassProvider-Interface ansprechen
-		Reference< XIdlClassProvider > xClassProvider( x, UNO_QUERY );
-		Reference< XTypeProvider > xTypeProvider( x, UNO_QUERY );
+		::com::sun::star::uno::Reference< XIdlClassProvider > xClassProvider( x, UNO_QUERY );
+		::com::sun::star::uno::Reference< XTypeProvider > xTypeProvider( x, UNO_QUERY );
 
 		aRet.AssignAscii( "Supported interfaces by object " );
 		String aObjName = getDbgObjectName( pUnoObj );
@@ -1611,7 +1611,7 @@
 			{
 				const Type& rType = pTypeArray[j];
 
-                Reference<XIdlClass> xClass = TypeToIdlClass( rType );
+               ::com::sun::star::uno::Reference<XIdlClass> xClass = TypeToIdlClass( rType );
                 if( xClass.is() )
                 {
 				    aRet += Impl_GetInterfaceInfo( x, xClass, 1 );
@@ -1693,10 +1693,10 @@
 	aRet += aObjName;
 
 	// Uno-Infos auswerten, um Arrays zu erkennen
-	Reference< XIntrospectionAccess > xAccess = pUnoObj->getIntrospectionAccess();
+	::com::sun::star::uno::Reference< XIntrospectionAccess > xAccess = pUnoObj->getIntrospectionAccess();
 	if( !xAccess.is() )
 	{
-		Reference< XInvocation > xInvok = pUnoObj->getInvocation();
+		::com::sun::star::uno::Reference< XInvocation > xInvok = pUnoObj->getInvocation();
 		if( xInvok.is() )
 			xAccess = xInvok->getIntrospection();
 	}
@@ -1770,10 +1770,10 @@
 	aRet += aObjName;
 
 	// XIntrospectionAccess, um die Typen der Parameter auch ausgeben zu koennen
-	Reference< XIntrospectionAccess > xAccess = pUnoObj->getIntrospectionAccess();
+	::com::sun::star::uno::Reference< XIntrospectionAccess > xAccess = pUnoObj->getIntrospectionAccess();
 	if( !xAccess.is() )
 	{
-		Reference< XInvocation > xInvok = pUnoObj->getInvocation();
+		::com::sun::star::uno::Reference< XInvocation > xInvok = pUnoObj->getInvocation();
 		if( xInvok.is() )
 			xAccess = xInvok->getIntrospection();
 	}
@@ -1782,9 +1782,9 @@
 		aRet.AppendAscii( "\nUnknown, no introspection available\n" );
 		return aRet;
 	}
-	Sequence< Reference< XIdlMethod > > methods = xAccess->getMethods
+	Sequence<com::sun::star::uno::Reference< XIdlMethod > > methods = xAccess->getMethods
 		( MethodConcept::ALL - MethodConcept::DANGEROUS );
-	const Reference< XIdlMethod >* pUnoMethods = methods.getConstArray();
+	const::com::sun::star::uno::Reference< XIdlMethod >* pUnoMethods = methods.getConstArray();
 
 	SbxArray* pMethods = pUnoObj->GetMethods();
 	USHORT nMethodCount = pMethods->Count();
@@ -1804,13 +1804,13 @@
 				aPropStr.AppendAscii( "\n" );
 
 			// Methode ansprechen
-			const Reference< XIdlMethod >& rxMethod = pUnoMethods[i];
+			const::com::sun::star::uno::Reference< XIdlMethod >& rxMethod = pUnoMethods[i];
 
 			// Ist es in Uno eine Sequence?
 			SbxDataType eType = pVar->GetFullType();
 			if( eType == SbxOBJECT )
 			{
-				Reference< XIdlClass > xClass = rxMethod->getReturnType();
+				::com::sun::star::uno::Reference< XIdlClass > xClass = rxMethod->getReturnType();
 				if( xClass.is() && xClass->getTypeClass() == TypeClass_SEQUENCE )
 					eType = (SbxDataType) ( SbxOBJECT | SbxARRAY );
 			}
@@ -1821,9 +1821,9 @@
 			aPropStr.AppendAscii( " ( " );
 
 			// get-Methode darf keinen Parameter haben
-			Sequence< Reference< XIdlClass > > aParamsSeq = rxMethod->getParameterTypes();
+			Sequence<com::sun::star::uno::Reference< XIdlClass > > aParamsSeq = rxMethod->getParameterTypes();
 			UINT32 nParamCount = aParamsSeq.getLength();
-			const Reference< XIdlClass >* pParams = aParamsSeq.getConstArray();
+			const::com::sun::star::uno::Reference< XIdlClass >* pParams = aParamsSeq.getConstArray();
 
 			if( nParamCount > 0 )
 			{
@@ -1907,7 +1907,7 @@
 					try
 					{
 						// Wert holen
-						Reference< XPropertySet > xPropSet( mxUnoAccess->queryAdapter( ::getCppuType( (const Reference< XPropertySet > *)0 ) ), UNO_QUERY );
+						::com::sun::star::uno::Reference< XPropertySet > xPropSet( mxUnoAccess->queryAdapter( ::getCppuType( (const::com::sun::star::uno::Reference< XPropertySet > *)0 ) ), UNO_QUERY );
 						Any aRetAny = xPropSet->getPropertyValue( pProp->GetName() );
 						// Die Nutzung von getPropertyValue (statt ueber den Index zu gehen) ist
 						// nicht optimal, aber die Umstellung auf XInvocation steht ja ohnehin an
@@ -1976,7 +1976,7 @@
 					try
 					{
 						// Wert setzen
-						Reference< XPropertySet > xPropSet( mxUnoAccess->queryAdapter( ::getCppuType( (const Reference< XPropertySet > *)0 ) ), UNO_QUERY );
+						::com::sun::star::uno::Reference< XPropertySet > xPropSet( mxUnoAccess->queryAdapter( ::getCppuType( (const::com::sun::star::uno::Reference< XPropertySet > *)0 ) ), UNO_QUERY );
 						xPropSet->setPropertyValue( pProp->GetName(), aAnyValue );
 						// Die Nutzung von getPropertyValue (statt ueber den Index zu gehen) ist
 						// nicht optimal, aber die Umstellung auf XInvocation steht ja ohnehin an
@@ -2067,7 +2067,7 @@
 							for( i = nParamCount ; i < nUnoParamCount ; i++ )
 							{
 								const ParamInfo& rInfo = pParamInfos[i];
-								const Reference< XIdlClass >& rxClass = rInfo.aType;
+								const::com::sun::star::uno::Reference< XIdlClass >& rxClass = rInfo.aType;
 								if( rxClass->getTypeClass() != TypeClass_ANY )
 								{
 									bError = true;
@@ -2086,7 +2086,7 @@
 						for( i = 0 ; i < nParamCount ; i++ )
 						{
 							const ParamInfo& rInfo = pParamInfos[i];
-							const Reference< XIdlClass >& rxClass = rInfo.aType;
+							const::com::sun::star::uno::Reference< XIdlClass >& rxClass = rInfo.aType;
 							//const XIdlClassRef& rxClass = pUnoParams[i];
 
 							com::sun::star::uno::Type aType( rxClass->getTypeClass(), rxClass->getName() );
@@ -2254,13 +2254,13 @@
 
 #ifdef INVOCATION_ONLY
 // Aus USR
-Reference< XInvocation > createDynamicInvocationFor( const Any& aAny );
+::com::sun::star::uno::Reference< XInvocation > createDynamicInvocationFor( const Any& aAny );
 #endif
 
 SbUnoObject::SbUnoObject( const String& aName_, const Any& aUnoObj_ )
 	: SbxObject( aName_ )
 {
-	static Reference< XIntrospection > xIntrospection;
+	static::com::sun::star::uno::Reference< XIntrospection > xIntrospection;
 
 	// Default-Properties von Sbx wieder rauspruegeln
 	Remove( XubString( RTL_CONSTASCII_USTRINGPARAM("Name") ), SbxCLASS_DONTCARE );
@@ -2268,24 +2268,24 @@
 
 	// Typ des Objekts pruefen
 	TypeClass eType = aUnoObj_.getValueType().getTypeClass();
-	Reference< XInterface > x;
+	::com::sun::star::uno::Reference< XInterface > x;
 	if( eType == TypeClass_INTERFACE )
 	{
 		// Interface aus dem Any besorgen
-		x = *(Reference< XInterface >*)aUnoObj_.getValue();
+		x = *(::com::sun::star::uno::Reference< XInterface >*)aUnoObj_.getValue();
 		if( !x.is() )
 			return;
 	}
 
-	Reference< XTypeProvider > xTypeProvider;
+	::com::sun::star::uno::Reference< XTypeProvider > xTypeProvider;
 #ifdef INVOCATION_ONLY
 	// Invocation besorgen
 	mxInvocation = createDynamicInvocationFor( aUnoObj_ );
 #else
 	// Hat das Object selbst eine Invocation?
-	mxInvocation = Reference< XInvocation >( x, UNO_QUERY );
+	mxInvocation =::com::sun::star::uno::Reference< XInvocation >( x, UNO_QUERY );
 
-	xTypeProvider = Reference< XTypeProvider >( x, UNO_QUERY );
+	xTypeProvider =::com::sun::star::uno::Reference< XTypeProvider >( x, UNO_QUERY );
 #endif
 
 	if( mxInvocation.is() )
@@ -2293,10 +2293,10 @@
 		// #94670: This is WRONG because then the MaterialHolder doesn't refer
 		// to the object implementing XInvocation but to the object passed to
 		// the invocation service!!!
-		// mxMaterialHolder = Reference< XMaterialHolder >::query( mxInvocation );
+		// mxMaterialHolder =::com::sun::star::uno::Reference< XMaterialHolder >::query( mxInvocation );
 
 		// ExactName holen
-		mxExactNameInvocation = Reference< XExactName >::query( mxInvocation );
+		mxExactNameInvocation =::com::sun::star::uno::Reference< XExactName >::query( mxInvocation );
 
 		// Rest bezieht sich nur auf Introspection
 		if( !xTypeProvider.is() )
@@ -2335,17 +2335,17 @@
 		bFatalError = FALSE;
 
 		// Nach XIdlClassProvider-Interface fragen
-		Reference< XIdlClassProvider > xClassProvider( x, UNO_QUERY );
+		::com::sun::star::uno::Reference< XIdlClassProvider > xClassProvider( x, UNO_QUERY );
 		if( xClassProvider.is() )
 		{
 			// #67173 Echten Klassen-Namen eintragen
 			if( aName_.Len() == 0 )
 			{
-				Sequence< Reference< XIdlClass > > szClasses = xClassProvider->getIdlClasses();
+				Sequence<com::sun::star::uno::Reference< XIdlClass > > szClasses = xClassProvider->getIdlClasses();
 				UINT32 nLen = szClasses.getLength();
 				if( nLen )
 				{
-					const Reference< XIdlClass > xImplClass = szClasses.getConstArray()[ 0 ];
+					const::com::sun::star::uno::Reference< XIdlClass > xImplClass = szClasses.getConstArray()[ 0 ];
 					if( xImplClass.is() )
 					{
 						aClassName_ = String( xImplClass->getName() );
@@ -2376,7 +2376,7 @@
 // #76470 Introspection on Demand durchfuehren
 void SbUnoObject::doIntrospection( void )
 {
-	static Reference< XIntrospection > xIntrospection;
+	static::com::sun::star::uno::Reference< XIntrospection > xIntrospection;
 
 	if( !bNeedIntrospection )
 		return;
@@ -2385,13 +2385,13 @@
 	if( !xIntrospection.is() )
 	{
 		// Introspection-Service holen
-		Reference< XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory() );
+		::com::sun::star::uno::Reference< XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory() );
 		if ( xFactory.is() )
 		{
-			Reference< XInterface > xI = xFactory->createInstance( rtl::OUString::createFromAscii("com.sun.star.beans.Introspection") );
+			::com::sun::star::uno::Reference< XInterface > xI = xFactory->createInstance( rtl::OUString::createFromAscii("com.sun.star.beans.Introspection") );
 			if (xI.is())
-				xIntrospection = Reference< XIntrospection >::query( xI );
-				//xI->queryInterface( ::getCppuType( (const Reference< XIntrospection > *)0 ), xIntrospection );
+				xIntrospection =::com::sun::star::uno::Reference< XIntrospection >::query( xI );
+				//xI->queryInterface( ::getCppuType( (const::com::sun::star::uno::Reference< XIntrospection > *)0 ), xIntrospection );
 		}
 	}
 	if( !xIntrospection.is() )
@@ -2417,10 +2417,10 @@
 	}
 
 	// MaterialHolder vom Access holen
-	mxMaterialHolder = Reference< XMaterialHolder >::query( mxUnoAccess );
+	mxMaterialHolder =::com::sun::star::uno::Reference< XMaterialHolder >::query( mxUnoAccess );
 
 	// ExactName vom Access holen
-	mxExactName = Reference< XExactName >::query( mxUnoAccess );
+	mxExactName =::com::sun::star::uno::Reference< XExactName >::query( mxUnoAccess );
 }
 
 
@@ -2444,7 +2444,7 @@
 (
 	const String& aName_,
 	SbxDataType eSbxType,
-	Reference< XIdlMethod > xUnoMethod_,
+	::com::sun::star::uno::Reference< XIdlMethod > xUnoMethod_,
 	bool bInvocation
 )
 	: SbxMethod( aName_, eSbxType )
@@ -2491,7 +2491,7 @@
 				const ParamInfo& rInfo = pParamInfos[i];
 				OUString aParamName = rInfo.aName;
 
-				// const Reference< XIdlClass >& rxClass = rInfo.aType;
+				// const::com::sun::star::uno::Reference< XIdlClass >& rxClass = rInfo.aType;
 				SbxDataType t = SbxVARIANT;
 				USHORT nFlags_ = SBX_READ;
 				pInfo->AddParam( aParamName, t, nFlags_ );
@@ -2564,7 +2564,7 @@
 
 SbxVariable* SbUnoObject::Find( const XubString& rName, SbxClassType t )
 {
-	static Reference< XIdlMethod > xDummyMethod;
+	static::com::sun::star::uno::Reference< XIdlMethod > xDummyMethod;
 	static Property aDummyProp;
 
 	SbxVariable* pRes = SbxObject::Find( rName, t );
@@ -2606,7 +2606,7 @@
 				MethodConcept::ALL - MethodConcept::DANGEROUS ) )
 			{
 				// Methode ansprechen
-				const Reference< XIdlMethod >& rxMethod = mxUnoAccess->
+				const::com::sun::star::uno::Reference< XIdlMethod >& rxMethod = mxUnoAccess->
 					getMethod( aUName, MethodConcept::ALL - MethodConcept::DANGEROUS );
 
 				// SbUnoMethode anlegen und reinbraten
@@ -2621,7 +2621,7 @@
 			{
 				try
 				{
-					Reference< XNameAccess > xNameAccess( mxUnoAccess->queryAdapter( ::getCppuType( (const Reference< XPropertySet > *)0 ) ), UNO_QUERY );
+					::com::sun::star::uno::Reference< XNameAccess > xNameAccess( mxUnoAccess->queryAdapter( ::getCppuType( (const::com::sun::star::uno::Reference< XPropertySet > *)0 ) ), UNO_QUERY );
 					OUString aUName2( rName );
 
 					if( xNameAccess.is() && xNameAccess->hasByName( aUName2 ) )
@@ -2752,7 +2752,7 @@
 	if( bNeedIntrospection ) doIntrospection();
 
 	// Instrospection besorgen
-	Reference< XIntrospectionAccess > xAccess = mxUnoAccess;
+	::com::sun::star::uno::Reference< XIntrospectionAccess > xAccess = mxUnoAccess;
 	if( !xAccess.is() )
 	{
 		if( mxInvocation.is() )
@@ -2787,14 +2787,14 @@
 	implCreateDbgProperties();
 
 	// Methoden anlegen
-	Sequence< Reference< XIdlMethod > > aMethodSeq = xAccess->getMethods
+	Sequence<com::sun::star::uno::Reference< XIdlMethod > > aMethodSeq = xAccess->getMethods
 		( MethodConcept::ALL - MethodConcept::DANGEROUS );
 	UINT32 nMethCount = aMethodSeq.getLength();
-	const Reference< XIdlMethod >* pMethods_ = aMethodSeq.getConstArray();
+	const::com::sun::star::uno::Reference< XIdlMethod >* pMethods_ = aMethodSeq.getConstArray();
 	for( i = 0 ; i < nMethCount ; i++ )
 	{
 		// Methode ansprechen
-		const Reference< XIdlMethod >& rxMethod = pMethods_[i];
+		const::com::sun::star::uno::Reference< XIdlMethod >& rxMethod = pMethods_[i];
 
 		// SbUnoMethode anlegen und reinbraten
 		SbxVariableRef xMethRef = new SbUnoMethod
@@ -2820,13 +2820,13 @@
 SbUnoObject* Impl_CreateUnoStruct( const String& aClassName )
 {
 	// CoreReflection holen
-	Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
+	::com::sun::star::uno::Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
 	if( !xCoreReflection.is() )
 		return NULL;
 
 	// Klasse suchen
-	Reference< XIdlClass > xClass;
-	Reference< XHierarchicalNameAccess > xHarryName =
+	::com::sun::star::uno::Reference< XIdlClass > xClass;
+	::com::sun::star::uno::Reference< XHierarchicalNameAccess > xHarryName =
 		getCoreReflection_HierarchicalNameAccess_Impl();
 	if( xHarryName.is() && xHarryName->hasByHierarchicalName( aClassName ) )
 		xClass = xCoreReflection->forName( aClassName );
@@ -2923,8 +2923,8 @@
 	String aServiceName = rPar.Get(1)->GetString();
 
 	// Service suchen und instanzieren
-	Reference< XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory() );
-	Reference< XInterface > xInterface;
+	::com::sun::star::uno::Reference< XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory() );
+	::com::sun::star::uno::Reference< XInterface > xInterface;
 	if ( xFactory.is() )
 	{
 		try
@@ -2981,7 +2981,7 @@
 	SbxVariableRef refVar = rPar.Get(0);
 
 	// Globalen Service-Manager holen
-	Reference< XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory() );
+	::com::sun::star::uno::Reference< XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory() );
 	if( xFactory.is() )
 	{
 		Any aAny;
@@ -3024,10 +3024,10 @@
 		return;
 
 	// Interface aus dem Any besorgen
-	Reference< XInterface > x = *(Reference< XInterface >*)aAny.getValue();
+	::com::sun::star::uno::Reference< XInterface > x = *(::com::sun::star::uno::Reference< XInterface >*)aAny.getValue();
 
 	// CoreReflection holen
-	Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
+	::com::sun::star::uno::Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
 	if( !xCoreReflection.is() )
 		return;
 
@@ -3037,7 +3037,7 @@
 		String aIfaceName = rPar.Get( i )->GetString();
 
 		// Klasse suchen
-		Reference< XIdlClass > xClass = xCoreReflection->forName( aIfaceName );
+		::com::sun::star::uno::Reference< XIdlClass > xClass = xCoreReflection->forName( aIfaceName );
 		if( !xClass.is() )
 			return;
 
@@ -3108,7 +3108,7 @@
 	TypeClass eType1 = aAny1.getValueType().getTypeClass();
 	if( eType1 != TypeClass_INTERFACE )
 		return;
-	Reference< XInterface > x1;
+	::com::sun::star::uno::Reference< XInterface > x1;
 	aAny1 >>= x1;
 	//XInterfaceRef x1 = *(XInterfaceRef*)aAny1.get();
 
@@ -3122,7 +3122,7 @@
 	TypeClass eType2 = aAny2.getValueType().getTypeClass();
 	if( eType2 != TypeClass_INTERFACE )
 		return;
-	Reference< XInterface > x2;
+	::com::sun::star::uno::Reference< XInterface > x2;
 	aAny2 >>= x2;
 	//XInterfaceRef x2 = *(XInterfaceRef*)aAny2.get();
 
@@ -3136,14 +3136,14 @@
 // helper wrapper function to interact with TypeProvider and
 // XTypeDescriptionEnumerationAccess.
 // if it fails for whatever reason 
-// returned Reference<> be null e.g. .is() will be false
+// returned::com::sun::star::uno::Reference<> be null e.g. .is() will be false
 
-Reference< XTypeDescriptionEnumeration > 
+::com::sun::star::uno::Reference< XTypeDescriptionEnumeration > 
 getTypeDescriptorEnumeration( const OUString& sSearchRoot,
 	const Sequence< TypeClass >& types, TypeDescriptionSearchDepth depth )
 {
-	Reference< XTypeDescriptionEnumeration > xEnum;
-	Reference< XTypeDescriptionEnumerationAccess> xTypeEnumAccess( getTypeProvider_Impl(), UNO_QUERY );
+	::com::sun::star::uno::Reference< XTypeDescriptionEnumeration > xEnum;
+	::com::sun::star::uno::Reference< XTypeDescriptionEnumerationAccess> xTypeEnumAccess( getTypeProvider_Impl(), UNO_QUERY );
 	if ( xTypeEnumAccess.is() )
 	{
 		try
@@ -3168,22 +3168,22 @@
 	{
 		Sequence< TypeClass > types(1);
 		types[ 0 ] = TypeClass_CONSTANTS;
-		Reference< XTypeDescriptionEnumeration > xEnum = getTypeDescriptorEnumeration( defaultNameSpace, types, TypeDescriptionSearchDepth_INFINITE  );
+		::com::sun::star::uno::Reference< XTypeDescriptionEnumeration > xEnum = getTypeDescriptorEnumeration( defaultNameSpace, types, TypeDescriptionSearchDepth_INFINITE  );
 
 		if ( !xEnum.is() )
 			return NULL;	
 
 		while ( xEnum->hasMoreElements() )
 		{
-			Reference< XConstantsTypeDescription > xConstants( xEnum->nextElement(), UNO_QUERY );
+			::com::sun::star::uno::Reference< XConstantsTypeDescription > xConstants( xEnum->nextElement(), UNO_QUERY );
 			if ( xConstants.is() )
 			{
-				Sequence< Reference< XConstantTypeDescription > > aConsts = xConstants->getConstants();
-				Reference< XConstantTypeDescription >* pSrc = aConsts.getArray();
+				Sequence<com::sun::star::uno::Reference< XConstantTypeDescription > > aConsts = xConstants->getConstants();
+				::com::sun::star::uno::Reference< XConstantTypeDescription >* pSrc = aConsts.getArray();
 				sal_Int32 nLen = aConsts.getLength();
 				for ( sal_Int32 index =0;  index<nLen; ++pSrc, ++index )
 				{
-					Reference< XConstantTypeDescription >& rXConst =
+					::com::sun::star::uno::Reference< XConstantTypeDescription >& rXConst =
 						*pSrc;
 					OUString sFullName = rXConst->getName();
 					sal_Int32 indexLastDot = sFullName.lastIndexOf('.');
@@ -3214,8 +3214,8 @@
     // #105550 Check if module exists
 	SbUnoClass* pUnoClass = NULL;
 
-    Reference< XHierarchicalNameAccess > xTypeAccess = getTypeProvider_Impl();
-    Reference< XTypeDescription > xTypeDesc;
+   ::com::sun::star::uno::Reference< XHierarchicalNameAccess > xTypeAccess = getTypeProvider_Impl();
+   ::com::sun::star::uno::Reference< XTypeDescription > xTypeDesc;
     if( xTypeAccess->hasByHierarchicalName( rName ) )
     {
         Any aRet = xTypeAccess->getByHierarchicalName( rName );
@@ -3245,8 +3245,8 @@
 		{
 			// Ist es ein Field
 			OUString aUStr( rName );
-			Reference< XIdlField > xField = m_xClass->getField( aUStr );
-			Reference< XIdlClass > xClass;
+			::com::sun::star::uno::Reference< XIdlField > xField = m_xClass->getField( aUStr );
+			::com::sun::star::uno::Reference< XIdlClass > xClass;
 			if( xField.is() )
 			{
 				try
@@ -3286,11 +3286,11 @@
 			aNewName += rName;
 
 			// CoreReflection holen
-			Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
+			::com::sun::star::uno::Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
 			if( xCoreReflection.is() )
 			{
 				// Ist es eine Konstante?
-				Reference< XHierarchicalNameAccess > xHarryName( xCoreReflection, UNO_QUERY );
+				::com::sun::star::uno::Reference< XHierarchicalNameAccess > xHarryName( xCoreReflection, UNO_QUERY );
 				if( xHarryName.is() )
 				{
 					try
@@ -3301,8 +3301,8 @@
 						// Interface gefunden? Dann ist es eine Klasse
 						if( eType == TypeClass_INTERFACE )
 						{
-							Reference< XInterface > xIface = *(Reference< XInterface >*)aValue.getValue();
-							Reference< XIdlClass > xClass( xIface, UNO_QUERY );
+							::com::sun::star::uno::Reference< XInterface > xIface = *(::com::sun::star::uno::Reference< XInterface >*)aValue.getValue();
+							::com::sun::star::uno::Reference< XIdlClass > xClass( xIface, UNO_QUERY );
 							if( xClass.is() )
 							{
 								pRes = new SbxVariable( SbxVARIANT );
@@ -3329,7 +3329,7 @@
                     SbxVariable* pNewClass = findUnoClass( aNewName );
 					if( pNewClass )
 					{
-						Reference< XIdlClass > xClass;
+						::com::sun::star::uno::Reference< XIdlClass > xClass;
 						pRes = new SbxVariable( SbxVARIANT );
 						SbxObjectRef xWrapper = (SbxObject*)pNewClass;
 						pRes->PutObject( xWrapper );
@@ -3373,7 +3373,7 @@
 	~BasicAllListener_Impl();
 
 	// Methoden von XInterface
-	//virtual BOOL queryInterface( Uik aUik, Reference< XInterface > & rOut );
+	//virtual BOOL queryInterface( Uik aUik,::com::sun::star::uno::Reference< XInterface > & rOut );
 
 	// Methoden von XAllListener
 	virtual void SAL_CALL firing(const AllEventObject& Event) throw ( RuntimeException );
@@ -3481,11 +3481,11 @@
 class InvocationToAllListenerMapper : public WeakImplHelper1< XInvocation >
 {
 public:
-	InvocationToAllListenerMapper( const Reference< XIdlClass >& ListenerType,
-		const Reference< XAllListener >& AllListener, const Any& Helper );
+	InvocationToAllListenerMapper( const::com::sun::star::uno::Reference< XIdlClass >& ListenerType,
+		const::com::sun::star::uno::Reference< XAllListener >& AllListener, const Any& Helper );
 
 	// XInvocation
-    virtual Reference< XIntrospectionAccess > SAL_CALL getIntrospection(void) throw( RuntimeException );
+    virtual::com::sun::star::uno::Reference< XIntrospectionAccess > SAL_CALL getIntrospection(void) throw( RuntimeException );
     virtual Any SAL_CALL invoke(const OUString& FunctionName, const Sequence< Any >& Params, Sequence< sal_Int16 >& OutParamIndex, Sequence< Any >& OutParam)
 		throw( IllegalArgumentException, CannotConvertException, InvocationTargetException, RuntimeException );
     virtual void SAL_CALL setValue(const OUString& PropertyName, const Any& Value)
@@ -3495,26 +3495,26 @@
     virtual sal_Bool SAL_CALL hasProperty(const OUString& Name) throw( RuntimeException );
 
 private:
-	Reference< XIdlReflection >  m_xCoreReflection;
-	Reference< XAllListener >	 m_xAllListener;
-	Reference< XIdlClass >  	 m_xListenerType;
+	::com::sun::star::uno::Reference< XIdlReflection >  m_xCoreReflection;
+	::com::sun::star::uno::Reference< XAllListener >	 m_xAllListener;
+	::com::sun::star::uno::Reference< XIdlClass >  	 m_xListenerType;
 	Any 						 m_Helper;
 };
 
 
 // Function to replace AllListenerAdapterService::createAllListerAdapter
-Reference< XInterface > createAllListenerAdapter
+::com::sun::star::uno::Reference< XInterface > createAllListenerAdapter
 (
-	const Reference< XInvocationAdapterFactory >& xInvocationAdapterFactory,
-	const Reference< XIdlClass >& xListenerType,
-	const Reference< XAllListener >& xListener,
+	const::com::sun::star::uno::Reference< XInvocationAdapterFactory >& xInvocationAdapterFactory,
+	const::com::sun::star::uno::Reference< XIdlClass >& xListenerType,
+	const::com::sun::star::uno::Reference< XAllListener >& xListener,
 	const Any& Helper
 )
 {
-	Reference< XInterface > xAdapter;
+	::com::sun::star::uno::Reference< XInterface > xAdapter;
 	if( xInvocationAdapterFactory.is() && xListenerType.is() && xListener.is() )
 	{
-	   Reference< XInvocation >	xInvocationToAllListenerMapper =
+	  ::com::sun::star::uno::Reference< XInvocation >	xInvocationToAllListenerMapper =
 			(XInvocation*)new InvocationToAllListenerMapper( xListenerType, xListener, Helper );
 		Type aListenerType( xListenerType->getTypeClass(), xListenerType->getName() );
 		xAdapter = xInvocationAdapterFactory->createAdapter( xInvocationToAllListenerMapper, aListenerType );
@@ -3526,7 +3526,7 @@
 //--------------------------------------------------------------------------------------------------
 // InvocationToAllListenerMapper
 InvocationToAllListenerMapper::InvocationToAllListenerMapper
-	( const Reference< XIdlClass >& ListenerType, const Reference< XAllListener >& AllListener, const Any& Helper )
+	( const::com::sun::star::uno::Reference< XIdlClass >& ListenerType, const::com::sun::star::uno::Reference< XAllListener >& AllListener, const Any& Helper )
 		: m_xAllListener( AllListener )
 		, m_xListenerType( ListenerType )
 		, m_Helper( Helper )
@@ -3534,10 +3534,10 @@
 }
 
 //*************************************************************************
-Reference< XIntrospectionAccess > SAL_CALL InvocationToAllListenerMapper::getIntrospection(void)
+::com::sun::star::uno::Reference< XIntrospectionAccess > SAL_CALL InvocationToAllListenerMapper::getIntrospection(void)
 	throw( RuntimeException )
 {
-	return Reference< XIntrospectionAccess >();
+	return::com::sun::star::uno::Reference< XIntrospectionAccess >();
 }
 
 //*************************************************************************
@@ -3552,12 +3552,12 @@
 	Any aRet;
 
 	// Check if to firing or approveFiring has to be called
-	Reference< XIdlMethod > xMethod = m_xListenerType->getMethod( FunctionName );
+	::com::sun::star::uno::Reference< XIdlMethod > xMethod = m_xListenerType->getMethod( FunctionName );
 	sal_Bool bApproveFiring = sal_False;
 	if( !xMethod.is() )
 		return aRet;
-    Reference< XIdlClass > xReturnType = xMethod->getReturnType();
-    Sequence< Reference< XIdlClass > > aExceptionSeq = xMethod->getExceptionTypes();
+   ::com::sun::star::uno::Reference< XIdlClass > xReturnType = xMethod->getReturnType();
+    Sequence<com::sun::star::uno::Reference< XIdlClass > > aExceptionSeq = xMethod->getExceptionTypes();
 	if( ( xReturnType.is() && xReturnType->getTypeClass() != TypeClass_VOID ) ||
 		aExceptionSeq.getLength() > 0 )
 	{
@@ -3616,7 +3616,7 @@
 sal_Bool SAL_CALL InvocationToAllListenerMapper::hasMethod(const OUString& Name)
 	throw( RuntimeException )
 {
-	Reference< XIdlMethod > xMethod = m_xListenerType->getMethod( Name );
+	::com::sun::star::uno::Reference< XIdlMethod > xMethod = m_xListenerType->getMethod( Name );
 	return xMethod.is();
 }
 
@@ -3624,7 +3624,7 @@
 sal_Bool SAL_CALL InvocationToAllListenerMapper::hasProperty(const OUString& Name)
 	throw( RuntimeException )
 {
-	Reference< XIdlField > xField = m_xListenerType->getField( Name );
+	::com::sun::star::uno::Reference< XIdlField > xField = m_xListenerType->getField( Name );
 	return xField.is();
 }
 
@@ -3649,28 +3649,28 @@
 	String aListenerClassName = rPar.Get(2)->GetString();
 
 	// CoreReflection holen
-	Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
+	::com::sun::star::uno::Reference< XIdlReflection > xCoreReflection = getCoreReflection_Impl();
 	if( !xCoreReflection.is() )
 		return;
 
 	// AllListenerAdapterService holen
-	Reference< XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory() );
+	::com::sun::star::uno::Reference< XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory() );
 	if( !xFactory.is() )
 		return;
 
 	// Klasse suchen
-	Reference< XIdlClass > xClass = xCoreReflection->forName( aListenerClassName );
+	::com::sun::star::uno::Reference< XIdlClass > xClass = xCoreReflection->forName( aListenerClassName );
 	if( !xClass.is() )
 		return;
 
 	// AB, 30.11.1999 InvocationAdapterFactory holen
-	Reference< XInvocationAdapterFactory > xInvocationAdapterFactory = Reference< XInvocationAdapterFactory >(
+	::com::sun::star::uno::Reference< XInvocationAdapterFactory > xInvocationAdapterFactory =::com::sun::star::uno::Reference< XInvocationAdapterFactory >(
 		xFactory->createInstance( rtl::OUString::createFromAscii("com.sun.star.script.InvocationAdapterFactory") ), UNO_QUERY );
 
 	BasicAllListener_Impl * p;
-	Reference< XAllListener > xAllLst = p = new BasicAllListener_Impl( aPrefixName );
+	::com::sun::star::uno::Reference< XAllListener > xAllLst = p = new BasicAllListener_Impl( aPrefixName );
 	Any aTmp;
-	Reference< XInterface > xLst = createAllListenerAdapter( xInvocationAdapterFactory, xClass, xAllLst, aTmp );
+	::com::sun::star::uno::Reference< XInterface > xLst = createAllListenerAdapter( xInvocationAdapterFactory, xClass, xAllLst, aTmp );
 	if( !xLst.is() )
 		return;
 
@@ -3703,8 +3703,8 @@
     
 	SbxVariableRef refVar = rPar.Get(0);
 
-	Reference< XMultiServiceFactory > xFactory = comphelper::getProcessServiceFactory();
-	Reference< XPropertySet> xPSMPropertySet( xFactory, UNO_QUERY );
+	::com::sun::star::uno::Reference< XMultiServiceFactory > xFactory = comphelper::getProcessServiceFactory();
+	::com::sun::star::uno::Reference< XPropertySet> xPSMPropertySet( xFactory, UNO_QUERY );
 	if( xPSMPropertySet.is() )
 	{
 		Any aContextAny = xPSMPropertySet->getPropertyValue(
@@ -3742,7 +3742,7 @@
     SbxVariable* pVal = rPar.Get(2);
 
     // Check the type
-    Reference< XHierarchicalNameAccess > xTypeAccess = getTypeProvider_Impl();
+   ::com::sun::star::uno::Reference< XHierarchicalNameAccess > xTypeAccess = getTypeProvider_Impl();
     Any aRet;
 	try
 	{
@@ -3756,7 +3756,7 @@
             implGetExceptionMsg( e1, aNoSuchElementExceptionName ) );
 		return;
 	}
-    Reference< XTypeDescription > xTypeDesc;
+   ::com::sun::star::uno::Reference< XTypeDescription > xTypeDesc;
     aRet >>= xTypeDesc;
     TypeClass eTypeClass = xTypeDesc->getTypeClass();
 	Type aDestType( eTypeClass, aTypeName );
@@ -3768,7 +3768,7 @@
 
     /*
     // Convert
-    Reference< XTypeConverter > xConverter = getTypeConverter_Impl();
+   ::com::sun::star::uno::Reference< XTypeConverter > xConverter = getTypeConverter_Impl();
 	try
 	{
         aConvertedVal = xConverter->convertTo( aVal, aDestType );
--- basic/source/inc/runtime.hxx.gcc43~	2007-11-06 00:26:17.000000000 +0100
+++ basic/source/inc/runtime.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -136,7 +136,7 @@
 	INT32*			pArrayCurIndices;
 	INT32*			pArrayLowerBounds;
 	INT32*			pArrayUpperBounds;
-	Reference< XEnumeration > xEnumeration;
+	com::sun::star::uno::Reference< XEnumeration > xEnumeration;
 
 	SbiForStack( void )
 		: pArrayCurIndices( NULL )
--- basic/source/runtime/iosys.cxx.gcc43~	2006-10-12 16:29:28.000000000 +0200
+++ basic/source/runtime/iosys.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -280,13 +280,13 @@
 			return TRUE;
 		}
 
-		Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
+		::com::sun::star::uno::Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
 		if( !xSMgr.is() )
 			return TRUE;
-		Reference< XBridgeFactory > xBridgeFac( xSMgr->createInstance
+		::com::sun::star::uno::Reference< XBridgeFactory > xBridgeFac( xSMgr->createInstance
 			( OUString::createFromAscii( "com.sun.star.bridge.BridgeFactory" ) ), UNO_QUERY );
 
-		Sequence< Reference< XBridge > > aBridgeSeq;
+		Sequence<com::sun::star::uno::Reference< XBridge > > aBridgeSeq;
 		sal_Int32 nBridgeCount = 0;
 		if( xBridgeFac.is() )
 		{
@@ -302,12 +302,12 @@
 		}
 
 		// Iterate through all bridges to find (portal) user property
-		const Reference< XBridge >* pBridges = aBridgeSeq.getConstArray();
+		const::com::sun::star::uno::Reference< XBridge >* pBridges = aBridgeSeq.getConstArray();
 		bRetVal = FALSE;	// Now only TRUE if user different from portal user is found
 		sal_Int32 i;
 		for( i = 0 ; i < nBridgeCount ; i++ )
 		{
-			const Reference< XBridge >& rxBridge = pBridges[ i ];
+			const::com::sun::star::uno::Reference< XBridge >& rxBridge = pBridges[ i ];
 			OUString aDescription = rxBridge->getDescription();
 			OUString aPortalUser = findUserInDescription( aDescription );
 			if( aPortalUser.getLength() > 0 )
@@ -347,7 +347,7 @@
 	if( bNeedInit )
 	{
 		bNeedInit = FALSE;
-		Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
+		::com::sun::star::uno::Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
 		if( !xSMgr.is() )
         {
             // No service manager at all
@@ -355,7 +355,7 @@
         }
         else
         {
-	        Reference< XContentProviderManager > xManager( xSMgr->createInstance( ::rtl::OUString::createFromAscii
+	       ::com::sun::star::uno::Reference< XContentProviderManager > xManager( xSMgr->createInstance( ::rtl::OUString::createFromAscii
                     ( "com.sun.star.ucb.UniversalContentBroker" ) ), UNO_QUERY );
 
 	        if ( !( xManager.is() && xManager->queryContentProvider( ::rtl::OUString::createFromAscii( "file:///" ) ).is() ) )
@@ -477,14 +477,14 @@
 
 class UCBStream : public SvStream
 {
-	Reference< XInputStream >	xIS;
-	Reference< XOutputStream >	xOS;
-	Reference< XStream >		xS;
-	Reference< XSeekable >		xSeek;
+	::com::sun::star::uno::Reference< XInputStream >	xIS;
+	::com::sun::star::uno::Reference< XOutputStream >	xOS;
+	::com::sun::star::uno::Reference< XStream >		xS;
+	::com::sun::star::uno::Reference< XSeekable >		xSeek;
 public:
-					UCBStream( Reference< XInputStream > & xIS );
-					UCBStream( Reference< XOutputStream > & xOS );
-					UCBStream( Reference< XStream > & xS );
+					UCBStream(::com::sun::star::uno::Reference< XInputStream > & xIS );
+					UCBStream(::com::sun::star::uno::Reference< XOutputStream > & xOS );
+					UCBStream(::com::sun::star::uno::Reference< XStream > & xS );
 					~UCBStream();
 	virtual ULONG	GetData( void* pData, ULONG nSize );
 	virtual ULONG	PutData( const void* pData, ULONG nSize );
@@ -527,19 +527,19 @@
 }
 */
 
-UCBStream::UCBStream( Reference< XInputStream > & rStm )
+UCBStream::UCBStream(::com::sun::star::uno::Reference< XInputStream > & rStm )
 	: xIS( rStm )
 	, xSeek( rStm, UNO_QUERY )
 {
 }
 
-UCBStream::UCBStream( Reference< XOutputStream > & rStm )
+UCBStream::UCBStream(::com::sun::star::uno::Reference< XOutputStream > & rStm )
 	: xOS( rStm )
 	, xSeek( rStm, UNO_QUERY )
 {
 }
 
-UCBStream::UCBStream( Reference< XStream > & rStm )
+UCBStream::UCBStream(::com::sun::star::uno::Reference< XStream > & rStm )
 	: xS( rStm )
 	, xSeek( rStm, UNO_QUERY )
 {
@@ -556,7 +556,7 @@
 			xOS->closeOutput();
 		else if( xS.is() )
 		{
-			Reference< XInputStream > xIS_ = xS->getInputStream();
+			::com::sun::star::uno::Reference< XInputStream > xIS_ = xS->getInputStream();
 			if( xIS_.is() )
 				xIS_->closeInput();
 		}
@@ -571,7 +571,7 @@
 {
 	try
 	{
-		Reference< XInputStream > xISFromS;
+		::com::sun::star::uno::Reference< XInputStream > xISFromS;
 		if( xIS.is() )
 		{
 			Sequence<sal_Int8> aData;
@@ -600,7 +600,7 @@
 {
 	try
 	{
-		Reference< XOutputStream > xOSFromS;
+		::com::sun::star::uno::Reference< XOutputStream > xOSFromS;
 		if( xOS.is() )
 		{
 			Sequence<sal_Int8> aData( (const sal_Int8 *)pData, nSize );
@@ -649,7 +649,7 @@
 {
 	try
 	{
-		Reference< XOutputStream > xOSFromS;
+		::com::sun::star::uno::Reference< XOutputStream > xOSFromS;
 		if( xOS.is() )
 			xOS->flush();
 		else if( xS.is() && (xOSFromS = xS->getOutputStream()).is() )
@@ -690,10 +690,10 @@
 #ifdef _USE_UNO
 	if( hasUno() )
 	{
-		Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
+		::com::sun::star::uno::Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
 		if( xSMgr.is() )
 		{
-			Reference< XSimpleFileAccess > 
+			::com::sun::star::uno::Reference< XSimpleFileAccess > 
 				xSFI( xSMgr->createInstance( OUString::createFromAscii( "com.sun.star.ucb.SimpleFileAccess" ) ), UNO_QUERY );
 			if( xSFI.is() )
 			{
@@ -709,12 +709,12 @@
 
 				if( (nStrmMode & (STREAM_READ | STREAM_WRITE)) == (STREAM_READ | STREAM_WRITE) )
 				{
-					Reference< XStream > xIS = xSFI->openFileReadWrite( aNameStr );
+					::com::sun::star::uno::Reference< XStream > xIS = xSFI->openFileReadWrite( aNameStr );
 					pStrm = new UCBStream( xIS );
 				}
 				else if( nStrmMode & STREAM_WRITE )
 				{
-					Reference< XStream > xIS = xSFI->openFileReadWrite( aNameStr );
+					::com::sun::star::uno::Reference< XStream > xIS = xSFI->openFileReadWrite( aNameStr );
 					pStrm = new UCBStream( xIS );
 					// Open for writing is not implemented in ucb yet!!!
 					//Reference< XOutputStream > xIS = xSFI->openFileWrite( aNameStr );
@@ -722,7 +722,7 @@
 				}
 				else //if( nStrmMode & STREAM_READ )
 				{
-					Reference< XInputStream > xIS = xSFI->openFileRead( aNameStr );
+					::com::sun::star::uno::Reference< XInputStream > xIS = xSFI->openFileRead( aNameStr );
 					pStrm = new UCBStream( xIS );
 				}
 
--- basic/source/runtime/methods.cxx.gcc43~	2007-06-27 16:25:56.000000000 +0200
+++ basic/source/runtime/methods.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -237,15 +237,15 @@
 }
 
 // TODO: -> SbiGlobals
-static Reference< XSimpleFileAccess3 > getFileAccess( void )
+static::com::sun::star::uno::Reference< XSimpleFileAccess3 > getFileAccess( void )
 {
-	static Reference< XSimpleFileAccess3 > xSFI;
+	static::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI;
 	if( !xSFI.is() )
 	{
-		Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
+		::com::sun::star::uno::Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
 		if( xSMgr.is() )
 		{
-			xSFI = Reference< XSimpleFileAccess3 >( xSMgr->createInstance
+			xSFI =::com::sun::star::uno::Reference< XSimpleFileAccess3 >( xSMgr->createInstance
 				( OUString::createFromAscii( "com.sun.star.ucb.SimpleFileAccess" ) ), UNO_QUERY );
 		}
 	}
@@ -559,7 +559,7 @@
 // Implementation of StepRENAME with UCB
 void implStepRenameUCB( const String& aSource, const String& aDest )
 {
-	Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+	::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 	if( xSFI.is() )
 	{
 		try
@@ -607,7 +607,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				try
@@ -658,7 +658,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 			    String aFullPath = getFullPath( aFileSpec );
@@ -705,7 +705,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				try
@@ -806,7 +806,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				try
@@ -893,7 +893,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				try
@@ -1553,7 +1553,7 @@
         ::utl::TransliterationWrapper* pTransliterationWrapper = GetSbData()->pTransliterationWrapper;
         if( !pTransliterationWrapper )
         {
-		    Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
+		   ::com::sun::star::uno::Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
             pTransliterationWrapper = GetSbData()->pTransliterationWrapper =
     	        new ::utl::TransliterationWrapper( xSMgr,
                     ::com::sun::star::i18n::TransliterationModules_IGNORE_CASE |
@@ -2497,7 +2497,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				if ( nParCount >= 2 )
@@ -2834,7 +2834,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				try
@@ -2943,7 +2943,7 @@
 		Date aDate;
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				try
@@ -4106,7 +4106,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				try
@@ -4202,7 +4202,7 @@
 		// <-- UCB
 		if( hasUno() )
 		{
-			Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
+			::com::sun::star::uno::Reference< XSimpleFileAccess3 > xSFI = getFileAccess();
 			if( xSFI.is() )
 			{
 				try
--- basic/source/runtime/methods1.cxx.gcc43~	2007-08-03 11:55:57.000000000 +0200
+++ basic/source/runtime/methods1.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -106,15 +106,15 @@
 using namespace com::sun::star::i18n;
 
 
-static Reference< XCalendar > getLocaleCalendar( void )
+static::com::sun::star::uno::Reference< XCalendar > getLocaleCalendar( void )
 {
-	static Reference< XCalendar > xCalendar;
+	static::com::sun::star::uno::Reference< XCalendar > xCalendar;
 	if( !xCalendar.is() )
 	{
-		Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
+		::com::sun::star::uno::Reference< XMultiServiceFactory > xSMgr = getProcessServiceFactory();
 		if( xSMgr.is() )
 		{
-			xCalendar = Reference< XCalendar >( xSMgr->createInstance
+			xCalendar =::com::sun::star::uno::Reference< XCalendar >( xSMgr->createInstance
 				( OUString::createFromAscii( "com.sun.star.i18n.LocaleCalendar" ) ), UNO_QUERY );
 		}
 	}
@@ -1682,7 +1682,7 @@
 		return;
 	}
 
-	Reference< XCalendar > xCalendar = getLocaleCalendar();
+	::com::sun::star::uno::Reference< XCalendar > xCalendar = getLocaleCalendar();
 	if( !xCalendar.is() )
 	{
 		StarBASIC::Error( SbERR_INTERNAL_ERROR );
@@ -1722,7 +1722,7 @@
 		return;
 	}
 
-	Reference< XCalendar > xCalendar = getLocaleCalendar();
+	::com::sun::star::uno::Reference< XCalendar > xCalendar = getLocaleCalendar();
 	if( !xCalendar.is() )
 	{
 		StarBASIC::Error( SbERR_INTERNAL_ERROR );
@@ -1790,7 +1790,7 @@
 		}
 		if( nFirstDay == 0 )
 		{
-			Reference< XCalendar > xCalendar = getLocaleCalendar();
+			::com::sun::star::uno::Reference< XCalendar > xCalendar = getLocaleCalendar();
 			if( !xCalendar.is() )
 			{
 				StarBASIC::Error( SbERR_INTERNAL_ERROR );
@@ -2119,7 +2119,7 @@
 					}
 					if( nFirstDay == 0 )
 					{
-						Reference< XCalendar > xCalendar = getLocaleCalendar();
+						::com::sun::star::uno::Reference< XCalendar > xCalendar = getLocaleCalendar();
 						if( !xCalendar.is() )
 						{
 							StarBASIC::Error( SbERR_INTERNAL_ERROR );
@@ -2179,7 +2179,7 @@
 	if( nFirstWeek < 0 || nFirstWeek > 3 )
 		nError = SbERR_BAD_ARGUMENT;
 
-	Reference< XCalendar > xCalendar;
+	::com::sun::star::uno::Reference< XCalendar > xCalendar;
 	if( nFirstDay == 0 || nFirstWeek == 0 )
 	{
 		xCalendar = getLocaleCalendar();
@@ -2383,7 +2383,7 @@
 		}
 	}
 
-	Reference< XCalendar > xCalendar = getLocaleCalendar();
+	::com::sun::star::uno::Reference< XCalendar > xCalendar = getLocaleCalendar();
 	if( !xCalendar.is() )
 	{
 		StarBASIC::Error( SbERR_INTERNAL_ERROR );
--- basic/source/runtime/runtime.cxx.gcc43~	2007-11-06 00:26:17.000000000 +0100
+++ basic/source/runtime/runtime.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -313,7 +313,7 @@
 		{
 			for( int i = nSize - 1 ; i >= 0 ; --i )
 			{
-				Reference< XComponent > xDlgComponent = ComponentVector[i];
+				::com::sun::star::uno::Reference< XComponent > xDlgComponent = ComponentVector[i];
 				if( xDlgComponent.is() )
 					xDlgComponent->dispose();
 			}
@@ -1095,7 +1095,7 @@
 	{
 		// XEnumerationAccess?
 		Any aAny = pUnoObj->getUnoAny();
-		Reference< XEnumerationAccess > xEnumerationAccess;
+		::com::sun::star::uno::Reference< XEnumerationAccess > xEnumerationAccess;
 		if( (aAny >>= xEnumerationAccess) )
 		{
 			p->xEnumeration = xEnumerationAccess->createEnumeration();
--- basic/source/runtime/step2.cxx.gcc43~	2007-11-06 00:26:17.000000000 +0100
+++ basic/source/runtime/step2.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -70,8 +70,8 @@
 	static bool isInitialised = false;
 	if ( isInitialised )
 		return pArray;
-	Reference < XComponentContext > xCtx;
-	Reference < XPropertySet > xProps(
+	::com::sun::star::uno::Reference < XComponentContext > xCtx;
+	::com::sun::star::uno::Reference < XPropertySet > xProps(
 	::comphelper::getProcessServiceFactory(), UNO_QUERY_THROW );
 	xCtx.set( xProps->getPropertyValue( rtl::OUString( 
 		RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), 
@@ -441,7 +441,7 @@
 					if( pParentUnoObj )
 					{
 						Any aUnoAny = pParentUnoObj->getUnoAny();
-						Reference< XInvocation > xInvocation;
+						::com::sun::star::uno::Reference< XInvocation > xInvocation;
 						aUnoAny >>= xInvocation;
 						if( xInvocation.is() )	// TODO: if( xOLEAutomation.is() )
 						{
@@ -561,8 +561,8 @@
 
                     if( aAny.getValueType().getTypeClass() == TypeClass_INTERFACE )
                     {
-                        Reference< XInterface > x = *(Reference< XInterface >*)aAny.getValue();
-                        Reference< XIndexAccess > xIndexAccess( x, UNO_QUERY );
+                       ::com::sun::star::uno::Reference< XInterface > x = *(::com::sun::star::uno::Reference< XInterface >*)aAny.getValue();
+                       ::com::sun::star::uno::Reference< XIndexAccess > xIndexAccess( x, UNO_QUERY );
                         if ( !bVBAEnabled )
                         {
                             // Haben wir Index-Access?
@@ -577,13 +577,13 @@
 
                                 // Index holen
                                 INT32 nIndex = pPar->Get( 1 )->GetLong();
-                                Reference< XInterface > xRet;
+                               ::com::sun::star::uno::Reference< XInterface > xRet;
                                 try
                                 {
                                     Any aAny2 = xIndexAccess->getByIndex( nIndex );
                                     TypeClass eType = aAny2.getValueType().getTypeClass();
                                     if( eType == TypeClass_INTERFACE )
-                                        xRet = *(Reference< XInterface >*)aAny2.getValue();
+                                        xRet = *(::com::sun::star::uno::Reference< XInterface >*)aAny2.getValue();
                                 }
                                 catch (IndexOutOfBoundsException&)
                                 {
@@ -613,7 +613,7 @@
                         {
                             rtl::OUString sDefaultMethod;
 
-                            Reference< XDefaultMethod > xDfltMethod( x, UNO_QUERY );
+                           ::com::sun::star::uno::Reference< XDefaultMethod > xDfltMethod( x, UNO_QUERY );
 
                             if ( xDfltMethod.is() )
                                 sDefaultMethod = xDfltMethod->getDefaultMethodName();
--- bridges/source/cpp_uno/gcc3_linux_intel/except.cxx.gcc43~	2006-09-16 17:47:40.000000000 +0200
+++ bridges/source/cpp_uno/gcc3_linux_intel/except.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -40,6 +40,7 @@
 #include <dlfcn.h>
 #include <cxxabi.h>
 #include <hash_map>
+#include <cstring>
 
 #include <rtl/strbuf.hxx>
 #include <rtl/ustrbuf.hxx>
--- bridges/source/remote/context/context.cxx.gcc43~	2006-09-16 17:58:56.000000000 +0200
+++ bridges/source/remote/context/context.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -39,6 +39,7 @@
 #include <list>
 #include <hash_map>
 #include <utility>
+#include <cstring>
 
 #include <osl/diagnose.h>
 #include <osl/interlck.h>
--- bridges/source/remote/urp/urp_marshal.hxx.gcc43~	2005-09-08 00:47:30.000000000 +0200
+++ bridges/source/remote/urp/urp_marshal.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -54,6 +54,8 @@
 #include "urp_marshal_decl.hxx"
 #endif
 
+#include <cstring>
+
 struct remote_Interface;
 
 namespace bridges_urp
--- connectivity/source/drivers/adabas/BConnection.cxx.gcc43~	2007-07-24 13:50:10.000000000 +0200
+++ connectivity/source/drivers/adabas/BConnection.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -76,6 +76,8 @@
 #include <connectivity/sqlparse.hxx>
 #endif
 
+#include <cstring>
+
 using namespace connectivity::adabas;
 using namespace connectivity;
 using namespace ::com::sun::star::uno;
--- connectivity/source/drivers/evoab2/NDatabaseMetaData.cxx.gcc43~	2006-09-17 04:29:13.000000000 +0200
+++ connectivity/source/drivers/evoab2/NDatabaseMetaData.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -68,6 +68,8 @@
 #include "EApi.h"
 #endif
 
+#include <cstring>
+
 #if OSL_DEBUG_LEVEL > 0
 # define OUtoCStr( x ) ( ::rtl::OUStringToOString ( (x), RTL_TEXTENCODING_ASCII_US).getStr())
 #else /* OSL_DEBUG_LEVEL */
--- connectivity/source/drivers/hsqldb/HStorageAccess.cxx.gcc43~	2006-09-17 04:40:38.000000000 +0200
+++ connectivity/source/drivers/hsqldb/HStorageAccess.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -60,6 +60,7 @@
 #include "diagnose_ex.h"
 #endif
 
+#include <cstring>
 
 using namespace ::com::sun::star::container;
 using namespace ::com::sun::star::uno;
--- connectivity/source/drivers/jdbc/Blob.cxx.gcc43~	2006-09-17 04:44:18.000000000 +0200
+++ connectivity/source/drivers/jdbc/Blob.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -52,6 +52,8 @@
 #include <connectivity/dbexception.hxx>
 #endif
 
+#include <cstring>
+
 using namespace connectivity;
 //**************************************************************
 //************ Class: java.sql.Blob
--- connectivity/source/drivers/jdbc/CallableStatement.cxx.gcc43~	2007-06-27 16:35:19.000000000 +0200
+++ connectivity/source/drivers/jdbc/CallableStatement.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -64,6 +64,8 @@
 #include <comphelper/sequence.hxx>
 #endif
 
+#include <cstring>
+
 using namespace connectivity;
 using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::beans;
--- connectivity/source/drivers/jdbc/InputStream.cxx.gcc43~	2006-09-17 04:47:00.000000000 +0200
+++ connectivity/source/drivers/jdbc/InputStream.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -42,6 +42,8 @@
 #include "java/tools.hxx"
 #endif
 
+#include <cstring>
+
 using namespace connectivity;
 //**************************************************************
 //************ Class: java.io.InputStream
--- connectivity/source/drivers/jdbc/JStatement.cxx.gcc43~	2007-06-27 16:36:28.000000000 +0200
+++ connectivity/source/drivers/jdbc/JStatement.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -82,6 +82,7 @@
 #include "resource/jdbc_log.hrc"
 
 #include <algorithm>
+#include <cstring>
 
 using namespace ::comphelper;
 using namespace connectivity;
--- connectivity/source/drivers/jdbc/PreparedStatement.cxx.gcc43~	2007-06-27 16:36:57.000000000 +0200
+++ connectivity/source/drivers/jdbc/PreparedStatement.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -67,6 +67,8 @@
 #endif
 #include "resource/jdbc_log.hrc"
 
+#include <cstring>
+
 using namespace connectivity;
 using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::beans;
--- connectivity/source/drivers/jdbc/Reader.cxx.gcc43~	2006-09-17 04:48:02.000000000 +0200
+++ connectivity/source/drivers/jdbc/Reader.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -42,6 +42,7 @@
 #ifndef _INC_MEMORY
 //#include <memory.h>
 #endif
+#include <cstring>
 using namespace connectivity;
 //**************************************************************
 //************ Class: java.io.Reader
--- connectivity/source/drivers/jdbc/ResultSet.cxx.gcc43~	2007-06-27 16:37:11.000000000 +0200
+++ connectivity/source/drivers/jdbc/ResultSet.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -96,6 +96,8 @@
 #include "connectivity/dbexception.hxx"
 #endif
 
+#include <cstring>
+
 using namespace ::comphelper;
 
 using namespace connectivity;
--- connectivity/source/drivers/odbc/OConnection.cxx.gcc43~	2007-07-24 13:50:49.000000000 +0200
+++ connectivity/source/drivers/odbc/OConnection.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -81,6 +81,8 @@
 #include <connectivity/dbexception.hxx>
 #endif
 
+#include <cstring>
+
 using namespace connectivity::odbc;
 using namespace connectivity;
 using namespace dbtools;
--- connectivity/source/drivers/odbc/OPreparedStatement.cxx.gcc43~	2006-12-13 17:22:16.000000000 +0100
+++ connectivity/source/drivers/odbc/OPreparedStatement.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -81,6 +81,8 @@
 #include "connectivity/sqlparse.hxx"
 #endif
 
+#include <cstring>
+
 using namespace ::comphelper;
 using namespace connectivity;
 using namespace connectivity::odbc;
--- connectivity/source/parse/sqlbison.y.gcc43~	2007-07-31 15:38:53.000000000 +0200
+++ connectivity/source/parse/sqlbison.y	2007-11-06 00:27:51.000000000 +0100
@@ -76,6 +76,8 @@
 #include "connectivity/dbconversion.hxx"
 #endif
 
+#include <cstring>
+
 #if defined __GNUC__
     #pragma GCC system_header
 #elif defined __SUNPRO_CC
--- connectivity/source/parse/sqlnode.cxx.gcc43~	2007-07-06 08:48:59.000000000 +0200
+++ connectivity/source/parse/sqlnode.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -135,6 +135,7 @@
 #include <tools/diagnose_ex.h>
 #endif
 
+#include <cstring>
 
 using namespace ::com::sun::star::sdbc;
 using namespace ::com::sun::star::util;
--- dbaccess/source/core/api/KeySet.cxx.gcc43~	2006-11-21 18:15:22.000000000 +0100
+++ dbaccess/source/core/api/KeySet.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -117,6 +117,8 @@
 #include <tools/debug.hxx>
 #endif
 
+#include <cstring>
+
 using namespace dbaccess;
 using namespace ::connectivity;
 using namespace ::dbtools;
--- dbaccess/source/core/misc/services.cxx.gcc43~	2006-10-12 15:32:41.000000000 +0200
+++ dbaccess/source/core/misc/services.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -123,7 +123,7 @@
 					void* pServiceManager,
 					void* /*pRegistryKey*/)
 {
-	Reference< XInterface > xRet;
+	com::sun::star::uno::Reference< XInterface > xRet;
 	if (pServiceManager && pImplementationName)
 	{
 		xRet = ::dbaccess::OModuleRegistration::getComponentFactory(
--- dbaccess/source/filter/migration/cfgservices.cxx.gcc43~	2006-10-12 15:33:20.000000000 +0200
+++ dbaccess/source/filter/migration/cfgservices.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -109,7 +109,7 @@
 					void* pServiceManager,
 					void* /*pRegistryKey*/)
 {
-	Reference< XInterface > xRet;
+	com::sun::star::uno::Reference< XInterface > xRet;
 	if (pServiceManager && pImplementationName)
 	{
 		xRet = ::dbacfg::OModuleRegistration::getComponentFactory(
--- dbaccess/source/filter/xml/xmlColumn.cxx.gcc43~	2006-09-17 08:45:11.000000000 +0200
+++ dbaccess/source/filter/xml/xmlColumn.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -91,8 +91,8 @@
 OXMLColumn::OXMLColumn( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				,const OUString& _sLocalName
-				,const Reference< XAttributeList > & _xAttrList
-				,const Reference< XNameAccess >& _xParentContainer
+				,const com::sun::star::uno::Reference< XAttributeList > & _xAttrList
+				,const com::sun::star::uno::Reference< XNameAccess >& _xParentContainer
 				) :
 	SvXMLImportContext( rImport, nPrfx, _sLocalName )
 	,m_xParentContainer(_xParentContainer)
@@ -149,10 +149,10 @@
 // -----------------------------------------------------------------------------
 void OXMLColumn::EndElement()
 {
-	Reference<XDataDescriptorFactory> xFac(m_xParentContainer,UNO_QUERY);
+	com::sun::star::uno::Reference<XDataDescriptorFactory> xFac(m_xParentContainer,UNO_QUERY);
 	if ( xFac.is() && m_sName.getLength() )
 	{
-		Reference<XPropertySet> xProp(xFac->createDataDescriptor());
+		com::sun::star::uno::Reference<XPropertySet> xProp(xFac->createDataDescriptor());
 		if ( xProp.is() )
 		{
 			xProp->setPropertyValue(PROPERTY_NAME,makeAny(m_sName));
@@ -175,7 +175,7 @@
 					}
 				}
 			}
-			Reference<XAppend> xAppend(m_xParentContainer,UNO_QUERY);
+			com::sun::star::uno::Reference<XAppend> xAppend(m_xParentContainer,UNO_QUERY);
 			if ( xAppend.is() )
 				xAppend->appendByDescriptor(xProp);
 		}
--- dbaccess/source/filter/xml/xmlComponent.cxx.gcc43~	2007-05-10 12:15:06.000000000 +0200
+++ dbaccess/source/filter/xml/xmlComponent.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -81,8 +81,8 @@
 OXMLComponent::OXMLComponent( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				,const OUString& _sLocalName
-				,const Reference< XAttributeList > & _xAttrList
-				,const Reference< XNameAccess >& _xParentContainer
+				,const com::sun::star::uno::Reference< XAttributeList > & _xAttrList
+				,const com::sun::star::uno::Reference< XNameAccess >& _xParentContainer
 				,const ::rtl::OUString& _sComponentServiceName
 				) :
 	SvXMLImportContext( rImport, nPrfx, _sLocalName )
@@ -140,9 +140,9 @@
 
 		try
 		{
-			Reference< XMultiServiceFactory > xORB( _xParentContainer, UNO_QUERY_THROW );
-			Reference< XInterface > xComponent( xORB->createInstanceWithArguments( _sComponentServiceName, aArguments ) );
-			Reference< XNameContainer > xNameContainer( _xParentContainer, UNO_QUERY_THROW );
+			com::sun::star::uno::Reference< XMultiServiceFactory > xORB( _xParentContainer, UNO_QUERY_THROW );
+			com::sun::star::uno::Reference< XInterface > xComponent( xORB->createInstanceWithArguments( _sComponentServiceName, aArguments ) );
+			com::sun::star::uno::Reference< XNameContainer > xNameContainer( _xParentContainer, UNO_QUERY_THROW );
 			xNameContainer->insertByName( m_sName, makeAny( xComponent ) );
 		}
 		catch(Exception&)
--- dbaccess/source/filter/xml/xmlDataSource.cxx.gcc43~	2007-07-24 14:05:57.000000000 +0200
+++ dbaccess/source/filter/xml/xmlDataSource.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -87,7 +87,7 @@
 
 OXMLDataSource::OXMLDataSource( ODBFilter& rImport,
 				sal_uInt16 nPrfx, const OUString& _sLocalName,
-				const Reference< XAttributeList > & _xAttrList ) :
+				const com::sun::star::uno::Reference< XAttributeList > & _xAttrList ) :
 	SvXMLImportContext( rImport, nPrfx, _sLocalName )
 {
     DBG_CTOR(OXMLDataSource,NULL);
@@ -96,7 +96,7 @@
 	const SvXMLNamespaceMap& rMap = rImport.GetNamespaceMap();
 	const SvXMLTokenMap& rTokenMap = rImport.GetDataSourceElemTokenMap();
 
-	Reference<XPropertySet> xDataSource = rImport.getDataSource();
+	com::sun::star::uno::Reference<XPropertySet> xDataSource = rImport.getDataSource();
 
 	PropertyValue aProperty;
 
@@ -214,7 +214,7 @@
 SvXMLImportContext* OXMLDataSource::CreateChildContext(
 		sal_uInt16 nPrefix,
 		const OUString& rLocalName,
-		const Reference< XAttributeList > & xAttrList )
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList )
 {
 	SvXMLImportContext *pContext = 0;
 	const SvXMLTokenMap&	rTokenMap	= GetOwnImport().GetDataSourceElemTokenMap();
@@ -256,7 +256,7 @@
 // -----------------------------------------------------------------------------
 void OXMLDataSource::EndElement()
 {
-	Reference<XPropertySet> xDataSource(GetOwnImport().getDataSource());
+	com::sun::star::uno::Reference<XPropertySet> xDataSource(GetOwnImport().getDataSource());
 	if ( !m_aInfoSequence.empty() && xDataSource.is() )
 	{
 		try
--- dbaccess/source/filter/xml/xmlDataSourceInfo.cxx.gcc43~	2006-09-17 08:45:52.000000000 +0200
+++ dbaccess/source/filter/xml/xmlDataSourceInfo.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -77,7 +77,7 @@
 OXMLDataSourceInfo::OXMLDataSourceInfo( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				,const OUString& _sLocalName
-				,const Reference< XAttributeList > & _xAttrList 
+				,const com::sun::star::uno::Reference< XAttributeList > & _xAttrList 
 				,OXMLDataSource& _rParent) :
 	SvXMLImportContext( rImport, nPrfx, _sLocalName )
 	,m_rParent(_rParent)
--- dbaccess/source/filter/xml/xmlDataSourceSetting.cxx.gcc43~	2006-09-17 08:46:07.000000000 +0200
+++ dbaccess/source/filter/xml/xmlDataSourceSetting.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -76,7 +76,7 @@
 OXMLDataSourceSetting::OXMLDataSourceSetting( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				,const OUString& _sLocalName
-				,const Reference< XAttributeList > & _xAttrList 
+				,const com::sun::star::uno::Reference< XAttributeList > & _xAttrList 
 				,OXMLDataSource& _rParent
 				,OXMLDataSourceSetting* _pContainer) :
 	SvXMLImportContext( rImport, nPrfx, _sLocalName )
@@ -144,7 +144,7 @@
 SvXMLImportContext* OXMLDataSourceSetting::CreateChildContext(
 		sal_uInt16 nPrefix,
 		const OUString& rLocalName,
-		const Reference< XAttributeList > & xAttrList )
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList )
 {
 	SvXMLImportContext *pContext = 0;
 	const SvXMLTokenMap&	rTokenMap	= GetOwnImport().GetDataSourceInfoElemTokenMap();
--- dbaccess/source/filter/xml/xmlDataSourceSettings.cxx.gcc43~	2006-09-17 08:46:21.000000000 +0200
+++ dbaccess/source/filter/xml/xmlDataSourceSettings.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -96,7 +96,7 @@
 SvXMLImportContext* OXMLDataSourceSettings::CreateChildContext(
 		sal_uInt16 nPrefix,
 		const OUString& rLocalName,
-		const Reference< XAttributeList > & xAttrList )
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList )
 {
 	SvXMLImportContext *pContext = 0;
 	const SvXMLTokenMap&	rTokenMap	= GetOwnImport().GetDataSourceInfoElemTokenMap();
--- dbaccess/source/filter/xml/xmlDatabase.cxx.gcc43~	2006-09-17 08:46:35.000000000 +0200
+++ dbaccess/source/filter/xml/xmlDatabase.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -103,7 +103,7 @@
 SvXMLImportContext* OXMLDatabase::CreateChildContext(
 		sal_uInt16 nPrefix,
 		const OUString& rLocalName,
-		const Reference< XAttributeList > & xAttrList )
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList )
 {
 	SvXMLImportContext *pContext = 0;
 	const SvXMLTokenMap&	rTokenMap	= GetOwnImport().GetDatabaseElemTokenMap();
@@ -117,7 +117,7 @@
 		case XML_TOK_FORMS:
 			{
 				GetOwnImport().GetProgressBarHelper()->Increment( PROGRESS_BAR_STEP );
-				Reference<XFormDocumentsSupplier> xSup(GetOwnImport().GetModel(),UNO_QUERY);
+				com::sun::star::uno::Reference<XFormDocumentsSupplier> xSup(GetOwnImport().GetModel(),UNO_QUERY);
 				if ( xSup.is() )
 					pContext = new OXMLDocuments( GetOwnImport(), nPrefix, rLocalName,xSup->getFormDocuments(),SERVICE_NAME_FORM_COLLECTION,SERVICE_SDB_DOCUMENTDEFINITION);
 			}
@@ -125,7 +125,7 @@
 		case XML_TOK_REPORTS:
 			{
 				GetOwnImport().GetProgressBarHelper()->Increment( PROGRESS_BAR_STEP );
-				Reference<XReportDocumentsSupplier> xSup(GetOwnImport().GetModel(),UNO_QUERY);
+				com::sun::star::uno::Reference<XReportDocumentsSupplier> xSup(GetOwnImport().GetModel(),UNO_QUERY);
 				if ( xSup.is() )
 					pContext = new OXMLDocuments( GetOwnImport(), nPrefix, rLocalName,xSup->getReportDocuments(),SERVICE_NAME_REPORT_COLLECTION,SERVICE_SDB_DOCUMENTDEFINITION);
 			}
@@ -133,7 +133,7 @@
 		case XML_TOK_QUERIES:
 			{
 				GetOwnImport().GetProgressBarHelper()->Increment( PROGRESS_BAR_STEP );
-				Reference<XQueryDefinitionsSupplier> xSup(GetOwnImport().getDataSource(),UNO_QUERY);
+				com::sun::star::uno::Reference<XQueryDefinitionsSupplier> xSup(GetOwnImport().getDataSource(),UNO_QUERY);
 				if ( xSup.is() )
 					pContext = new OXMLDocuments( GetOwnImport(), nPrefix, rLocalName,xSup->getQueryDefinitions(),SERVICE_NAME_QUERY_COLLECTION);
 			}
@@ -141,7 +141,7 @@
 		case XML_TOK_TABLES:
 			{
 				GetOwnImport().GetProgressBarHelper()->Increment( PROGRESS_BAR_STEP );
-				Reference<XTablesSupplier> xSup(GetOwnImport().getDataSource(),UNO_QUERY);
+				com::sun::star::uno::Reference<XTablesSupplier> xSup(GetOwnImport().getDataSource(),UNO_QUERY);
 				if ( xSup.is() )
 					pContext = new OXMLDocuments( GetOwnImport(), nPrefix, rLocalName,xSup->getTables());
 			}
--- dbaccess/source/filter/xml/xmlDocuments.cxx.gcc43~	2007-05-10 12:15:20.000000000 +0200
+++ dbaccess/source/filter/xml/xmlDocuments.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -80,7 +80,7 @@
 OXMLDocuments::OXMLDocuments( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				, const OUString& rLName
-				,const Reference< XNameAccess >& _xContainer
+				,const com::sun::star::uno::Reference< XNameAccess >& _xContainer
 				,const ::rtl::OUString& _sCollectionServiceName
 				,const ::rtl::OUString& _sComponentServiceName) :
 	SvXMLImportContext( rImport, nPrfx, rLName )
@@ -95,7 +95,7 @@
 OXMLDocuments::OXMLDocuments( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				, const OUString& rLName
-				,const Reference< XNameAccess >& _xContainer
+				,const com::sun::star::uno::Reference< XNameAccess >& _xContainer
 				,const ::rtl::OUString& _sCollectionServiceName
 				) :
 	SvXMLImportContext( rImport, nPrfx, rLName )
@@ -116,7 +116,7 @@
 SvXMLImportContext* OXMLDocuments::CreateChildContext(
 		sal_uInt16 nPrefix,
 		const OUString& rLocalName,
-		const Reference< XAttributeList > & xAttrList )
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList )
 {
 	SvXMLImportContext *pContext = 0;
 	const SvXMLTokenMap&	rTokenMap	= GetOwnImport().GetDocumentsElemTokenMap();
--- dbaccess/source/filter/xml/xmlExport.cxx.gcc43~	2007-07-06 09:56:15.000000000 +0200
+++ dbaccess/source/filter/xml/xmlExport.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -122,14 +122,14 @@
 	public:
 		static ::rtl::OUString SAL_CALL getImplementationName_Static(  ) throw (RuntimeException);
 		static Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames_Static(  ) throw(RuntimeException);
-		static Reference< XInterface > SAL_CALL Create(const Reference< ::com::sun::star::lang::XMultiServiceFactory >&);
+		static com::sun::star::uno::Reference< XInterface > SAL_CALL Create(const com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >&);
 	};
 	class ODBFullExportHelper
 	{
 	public:
 		static ::rtl::OUString SAL_CALL getImplementationName_Static(  ) throw (RuntimeException);
 		static Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames_Static(  ) throw(RuntimeException);
-		static Reference< XInterface > SAL_CALL Create(const Reference< ::com::sun::star::lang::XMultiServiceFactory >&);
+		static com::sun::star::uno::Reference< XInterface > SAL_CALL Create(const com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >&);
 	};
 }
 // -----------------------------------------------------------------------------
@@ -156,7 +156,7 @@
 	using namespace ::com::sun::star::util;
 
 	//---------------------------------------------------------------------
-	Reference< XInterface > SAL_CALL ODBExportHelper::Create(const Reference< XMultiServiceFactory >& _rxORB)
+	com::sun::star::uno::Reference< XInterface > SAL_CALL ODBExportHelper::Create(const com::sun::star::uno::Reference< XMultiServiceFactory >& _rxORB)
 	{
 		return static_cast< XServiceInfo* >(new ODBExport(_rxORB,EXPORT_SETTINGS | EXPORT_PRETTY ));
 	}
@@ -175,7 +175,7 @@
 
 	
 	//---------------------------------------------------------------------
-	Reference< XInterface > SAL_CALL ODBFullExportHelper::Create(const Reference< XMultiServiceFactory >& _rxORB)
+	com::sun::star::uno::Reference< XInterface > SAL_CALL ODBFullExportHelper::Create(const com::sun::star::uno::Reference< XMultiServiceFactory >& _rxORB)
 	{
 		return static_cast< XServiceInfo* >(new ODBExport(_rxORB,EXPORT_ALL));
 	}
@@ -248,7 +248,7 @@
 		}
 	};
 // -----------------------------------------------------------------------------
-ODBExport::ODBExport(const Reference< XMultiServiceFactory >& _rxMSF,sal_uInt16 nExportFlag)
+ODBExport::ODBExport(const com::sun::star::uno::Reference< XMultiServiceFactory >& _rxMSF,sal_uInt16 nExportFlag)
 : SvXMLExport( _rxMSF,MAP_10TH_MM,XML_DATABASE, EXPORT_OASIS)
 ,m_bAllreadyFilled(sal_False)
 {
@@ -302,7 +302,7 @@
 // -----------------------------------------------------------------------------	
 void ODBExport::exportDataSource()
 {
-	Reference<XPropertySet> xProp(getDataSource());
+	com::sun::star::uno::Reference<XPropertySet> xProp(getDataSource());
 	if ( xProp.is() )
 	{
 		::rtl::OUString sValue;
@@ -317,10 +317,10 @@
 		sal_Bool bAutoIncrementEnabled = sal_True;
 		TStringPair aAutoIncrement;
 
-        Reference< XPropertySet > xDataSourceSettings;
+        com::sun::star::uno::Reference< XPropertySet > xDataSourceSettings;
 		OSL_VERIFY( xProp->getPropertyValue( PROPERTY_SETTINGS ) >>= xDataSourceSettings );
-        Reference< XPropertyState > xSettingsState( xDataSourceSettings, UNO_QUERY );
-        Reference< XPropertySetInfo > xSettingsInfo;
+        com::sun::star::uno::Reference< XPropertyState > xSettingsState( xDataSourceSettings, UNO_QUERY );
+        com::sun::star::uno::Reference< XPropertySetInfo > xSettingsInfo;
         if ( xDataSourceSettings.is() )
             xSettingsInfo = xDataSourceSettings->getPropertySetInfo();
         OSL_ENSURE( xSettingsState.is() && xSettingsInfo.is(), "ODBExport::exportDataSource: invalid Setting property of the data source!" );
@@ -609,7 +609,7 @@
 							,::xmloff::token::XMLTokenEnum _eTokenFilter
 							,::xmloff::token::XMLTokenEnum _eTokenType)
 {
-	Reference<XPropertySet> xProp(getDataSource());
+	com::sun::star::uno::Reference<XPropertySet> xProp(getDataSource());
 	Sequence< ::rtl::OUString> aValue;
 	if ( _aValue.getLength() )
 	{
@@ -627,7 +627,7 @@
 // -----------------------------------------------------------------------------
 void ODBExport::exportLogin()
 {
-	Reference<XPropertySet> xProp(getDataSource());
+	com::sun::star::uno::Reference<XPropertySet> xProp(getDataSource());
 	::rtl::OUString sValue;
 	xProp->getPropertyValue(PROPERTY_USER) >>= sValue;
     sal_Bool bAddLogin = sValue.getLength() > 0;
@@ -643,7 +643,7 @@
 	    SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_LOGIN, sal_True, sal_True);
 }
 // -----------------------------------------------------------------------------
-void ODBExport::exportCollection(const Reference< XNameAccess >& _xCollection
+void ODBExport::exportCollection(const com::sun::star::uno::Reference< XNameAccess >& _xCollection
 								,enum ::xmloff::token::XMLTokenEnum _eComponents
 								,enum ::xmloff::token::XMLTokenEnum _eSubComponents
 								,sal_Bool _bExportContext
@@ -659,10 +659,10 @@
 		const ::rtl::OUString* pEnd	  = pIter + aSeq.getLength();
 		for(;pIter != pEnd;++pIter)
 		{
-			Reference<XPropertySet> xProp(_xCollection->getByName(*pIter),UNO_QUERY);
+			com::sun::star::uno::Reference<XPropertySet> xProp(_xCollection->getByName(*pIter),UNO_QUERY);
 			if ( _bExportContext && XML_TABLES != _eComponents )
 				AddAttribute(XML_NAMESPACE_DB, XML_NAME,*pIter);
-			Reference< XNameAccess > xSub(xProp,UNO_QUERY);
+			com::sun::star::uno::Reference< XNameAccess > xSub(xProp,UNO_QUERY);
 			if ( xSub.is() )
 			{
 				exportCollection(xSub,_eSubComponents,_eSubComponents,_bExportContext,_aMemFunc);
@@ -708,7 +708,7 @@
 	exportStyleName(_xProp,GetAttrList());
 
 	SvXMLElementExport aComponents(*this,XML_NAMESPACE_DB, XML_QUERY, sal_True, sal_True);
-	Reference<XColumnsSupplier> xCol(_xProp,UNO_QUERY);
+	com::sun::star::uno::Reference<XColumnsSupplier> xCol(_xProp,UNO_QUERY);
 	exportColumns(xCol);
 	exportFilter(_xProp,PROPERTY_FILTER,XML_FILTER_STATEMENT);
 	exportFilter(_xProp,PROPERTY_ORDER,XML_ORDER_STATEMENT);
@@ -732,7 +732,7 @@
 	exportStyleName(_xProp,GetAttrList());
 
 	SvXMLElementExport aComponents(*this,XML_NAMESPACE_DB, XML_TABLE, sal_True, sal_True);
-	Reference<XColumnsSupplier> xCol(_xProp,UNO_QUERY);
+	com::sun::star::uno::Reference<XColumnsSupplier> xCol(_xProp,UNO_QUERY);
 	exportColumns(xCol);
 	exportFilter(_xProp,PROPERTY_FILTER,XML_FILTER_STATEMENT);
 	exportFilter(_xProp,PROPERTY_ORDER,XML_ORDER_STATEMENT);	
@@ -740,7 +740,7 @@
 // -----------------------------------------------------------------------------
 void ODBExport::exportStyleName(XPropertySet* _xProp,SvXMLAttributeList& _rAtt)
 {
-	Reference<XPropertySet> xFind(_xProp);
+	com::sun::star::uno::Reference<XPropertySet> xFind(_xProp);
 	TPropertyStyleMap::iterator aFind = m_aAutoStyleNames.find(xFind);
 	if ( aFind != m_aAutoStyleNames.end() )
 	{
@@ -786,11 +786,11 @@
 	OSL_POSTCOND(!GetAttrList().getLength(),"Invalid attribute length!");
 }
 // -----------------------------------------------------------------------------
-void ODBExport::exportColumns(const Reference<XColumnsSupplier>& _xColSup)
+void ODBExport::exportColumns(const com::sun::star::uno::Reference<XColumnsSupplier>& _xColSup)
 {
 	if ( _xColSup.is() )
 	{
-		Reference<XNameAccess> xNameAccess = _xColSup->getColumns();
+		com::sun::star::uno::Reference<XNameAccess> xNameAccess = _xColSup->getColumns();
 		if ( xNameAccess.is() && xNameAccess->hasElements() )
 		{
 			SvXMLElementExport aColumns(*this,XML_NAMESPACE_DB, XML_COLUMNS, sal_True, sal_True);
@@ -799,11 +799,11 @@
 			const ::rtl::OUString* pEnd	  = pIter + aSeq.getLength();
 			for( ; pIter != pEnd ; ++pIter)
 			{
-				Reference<XPropertySet> xProp(xNameAccess->getByName(*pIter),UNO_QUERY);
+				com::sun::star::uno::Reference<XPropertySet> xProp(xNameAccess->getByName(*pIter),UNO_QUERY);
 				if ( xProp.is() )
 				{
 					SvXMLAttributeList* pAtt = new SvXMLAttributeList;
-					Reference<XAttributeList> xAtt = pAtt;
+					com::sun::star::uno::Reference<XAttributeList> xAtt = pAtt;
 					exportStyleName(xProp.get(),*pAtt);
 
 					sal_Bool bHidden = getBOOL(xProp->getPropertyValue(PROPERTY_HIDDEN));
@@ -846,10 +846,10 @@
 // -----------------------------------------------------------------------------
 void ODBExport::exportForms()
 {
-	Reference<XFormDocumentsSupplier> xSup(GetModel(),UNO_QUERY);
+	com::sun::star::uno::Reference<XFormDocumentsSupplier> xSup(GetModel(),UNO_QUERY);
 	if ( xSup.is() )
 	{
-		Reference< XNameAccess > xCollection = xSup->getFormDocuments();
+		com::sun::star::uno::Reference< XNameAccess > xCollection = xSup->getFormDocuments();
 		if ( xCollection.is() && xCollection->hasElements() )
 		{
 			::comphelper::mem_fun1_t<ODBExport,XPropertySet* > aMemFunc(&ODBExport::exportComponent);
@@ -860,10 +860,10 @@
 // -----------------------------------------------------------------------------
 void ODBExport::exportReports()
 {
-	Reference<XReportDocumentsSupplier> xSup(GetModel(),UNO_QUERY);
+	com::sun::star::uno::Reference<XReportDocumentsSupplier> xSup(GetModel(),UNO_QUERY);
 	if ( xSup.is() )
 	{
-		Reference< XNameAccess > xCollection = xSup->getReportDocuments();
+		com::sun::star::uno::Reference< XNameAccess > xCollection = xSup->getReportDocuments();
 		if ( xCollection.is() && xCollection->hasElements() )
 		{
 			::comphelper::mem_fun1_t<ODBExport,XPropertySet* > aMemFunc(&ODBExport::exportComponent);
@@ -874,10 +874,10 @@
 // -----------------------------------------------------------------------------
 void ODBExport::exportQueries(sal_Bool _bExportContext)
 {
-	Reference<XQueryDefinitionsSupplier> xSup(getDataSource(),UNO_QUERY);
+	com::sun::star::uno::Reference<XQueryDefinitionsSupplier> xSup(getDataSource(),UNO_QUERY);
 	if ( xSup.is() )
 	{
-		Reference< XNameAccess > xCollection = xSup->getQueryDefinitions();
+		com::sun::star::uno::Reference< XNameAccess > xCollection = xSup->getQueryDefinitions();
 		if ( xCollection.is() && xCollection->hasElements() )
 		{
 			::std::auto_ptr< ::comphelper::mem_fun1_t<ODBExport,XPropertySet* > > pMemFunc; 
@@ -893,10 +893,10 @@
 // -----------------------------------------------------------------------------
 void ODBExport::exportTables(sal_Bool _bExportContext)
 {
-	Reference<XTablesSupplier> xSup(getDataSource(),UNO_QUERY);
+	com::sun::star::uno::Reference<XTablesSupplier> xSup(getDataSource(),UNO_QUERY);
 	if ( xSup.is() )
 	{
-		Reference< XNameAccess > xCollection = xSup->getTables();
+		com::sun::star::uno::Reference< XNameAccess > xCollection = xSup->getTables();
 		if ( xCollection.is() && xCollection->hasElements() )
 		{
 			::std::auto_ptr< ::comphelper::mem_fun1_t<ODBExport,XPropertySet* > > pMemFunc; 
@@ -913,7 +913,7 @@
 {
 	::std::vector< XMLPropertyState > aPropertyStates = m_xExportHelper->Filter(_xProp);
 	
-	Reference<XColumnsSupplier> xSup(_xProp,UNO_QUERY);
+	com::sun::star::uno::Reference<XColumnsSupplier> xSup(_xProp,UNO_QUERY);
 	if ( xSup.is() )
 	{
 		if ( !aPropertyStates.empty() )
@@ -928,7 +928,7 @@
         {
             // not interested in
         }
-		Reference< XNameAccess > xCollection = xSup->getColumns();
+		com::sun::star::uno::Reference< XNameAccess > xCollection = xSup->getColumns();
         try
         {
             awt::FontDescriptor aFont;
@@ -1023,10 +1023,10 @@
 // -----------------------------------------------------------------------------
 void ODBExport::GetViewSettings(Sequence<PropertyValue>& aProps)
 {
-	Reference<XQueryDefinitionsSupplier> xSup(getDataSource(),UNO_QUERY);
+	com::sun::star::uno::Reference<XQueryDefinitionsSupplier> xSup(getDataSource(),UNO_QUERY);
 	if ( xSup.is() )
 	{
-		Reference< XNameAccess > xCollection = xSup->getQueryDefinitions();
+		com::sun::star::uno::Reference< XNameAccess > xCollection = xSup->getQueryDefinitions();
 		if ( xCollection.is() && xCollection->hasElements() )
 		{
 			try
@@ -1041,7 +1041,7 @@
 				Sequence<PropertyValue> aQueries(aSeq.getLength());
 				for(sal_Int32 i = 0;pIter != pEnd;++pIter,++i)
 				{
-					Reference<XPropertySet> xProp(xCollection->getByName(*pIter),UNO_QUERY);
+					com::sun::star::uno::Reference<XPropertySet> xProp(xCollection->getByName(*pIter),UNO_QUERY);
 					if ( xProp.is() )
 					{
 						aQueries[i].Name = *pIter;
@@ -1061,7 +1061,7 @@
 // -----------------------------------------------------------------------------
 void ODBExport::GetConfigurationSettings(Sequence<PropertyValue>& aProps)
 {
-	Reference<XPropertySet> xProp(getDataSource());
+	com::sun::star::uno::Reference<XPropertySet> xProp(getDataSource());
 	if ( xProp.is() )
 	{
 		sal_Int32 nLength = aProps.getLength();
@@ -1139,12 +1139,12 @@
 	return new OXMLAutoStylePoolP(*this);
 }
 // -----------------------------------------------------------------------------
-void SAL_CALL ODBExport::setSourceDocument( const Reference< XComponent >& xDoc ) throw(IllegalArgumentException, RuntimeException)
+void SAL_CALL ODBExport::setSourceDocument( const com::sun::star::uno::Reference< XComponent >& xDoc ) throw(IllegalArgumentException, RuntimeException)
 {
-	Reference<XOfficeDatabaseDocument> xOfficeDoc(xDoc,UNO_QUERY_THROW);
+	com::sun::star::uno::Reference<XOfficeDatabaseDocument> xOfficeDoc(xDoc,UNO_QUERY_THROW);
 	m_xDataSource.set(xOfficeDoc->getDataSource(),UNO_QUERY_THROW);
 	OSL_ENSURE(m_xDataSource.is(),"DataSource is NULL!");
-	Reference< XNumberFormatsSupplier > xNum(m_xDataSource->getPropertyValue(PROPERTY_NUMBERFORMATSSUPPLIER),UNO_QUERY);
+	com::sun::star::uno::Reference< XNumberFormatsSupplier > xNum(m_xDataSource->getPropertyValue(PROPERTY_NUMBERFORMATSSUPPLIER),UNO_QUERY);
 	SetNumberFormatsSupplier(xNum);
 	SvXMLExport::setSourceDocument(xDoc);
 }
--- dbaccess/source/filter/xml/xmlExport.hxx.gcc43~	2006-08-15 12:48:21.000000000 +0200
+++ dbaccess/source/filter/xml/xmlExport.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -133,7 +133,7 @@
 
         TDelimiter() : bUsed( false ) { }
 	};
-	typedef ::std::map< Reference<XPropertySet> ,::rtl::OUString > TPropertyStyleMap;
+	typedef ::std::map< com::sun::star::uno::Reference<XPropertySet> ,::rtl::OUString > TPropertyStyleMap;
 
 	::std::auto_ptr< TStringPair >					m_aAutoIncrement;
 	::std::auto_ptr< TDelimiter >					m_aDelimiter;
@@ -145,7 +145,7 @@
 
 	mutable UniReference < XMLPropertySetMapper >	m_xTableStylesPropertySetMapper;
 	mutable UniReference < XMLPropertySetMapper >	m_xColumnStylesPropertySetMapper;
-	Reference<XPropertySet>							m_xDataSource;
+	com::sun::star::uno::Reference<XPropertySet>							m_xDataSource;
     sal_Bool                                        m_bAllreadyFilled;
 
 	void					exportDataSource();
@@ -162,7 +162,7 @@
 	void					exportQueries(sal_Bool _bExportContext);
 	void					exportTables(sal_Bool _bExportContext);
 	void					exportStyleName(XPropertySet* _xProp,SvXMLAttributeList& _rAtt);
-	void					exportCollection(const Reference< XNameAccess >& _xCollection
+	void					exportCollection(const com::sun::star::uno::Reference< XNameAccess >& _xCollection
 											,enum ::xmloff::token::XMLTokenEnum _eComponents
 											,enum ::xmloff::token::XMLTokenEnum _eSubComponents
 											,sal_Bool _bExportContext
@@ -175,7 +175,7 @@
 										,enum ::xmloff::token::XMLTokenEnum _eStatementType);
 	void					exportTableName(XPropertySet* _xProp,sal_Bool _bUpdate);
 	void					exportAutoStyle(XPropertySet* _xProp);
-	void					exportColumns(const Reference<XColumnsSupplier>& _xColSup);
+	void					exportColumns(const com::sun::star::uno::Reference<XColumnsSupplier>& _xColSup);
     void                    collectComponentStyles();
 
 	::rtl::OUString			implConvertAny(const Any& _rValue);
@@ -200,7 +200,7 @@
 	virtual					~ODBExport(){};
 public:						
 							
-	ODBExport(const Reference< XMultiServiceFactory >& _rxMSF, sal_uInt16 nExportFlag = EXPORT_CONTENT | EXPORT_AUTOSTYLES | EXPORT_PRETTY|EXPORT_FONTDECLS);
+	ODBExport(const com::sun::star::uno::Reference< XMultiServiceFactory >& _rxMSF, sal_uInt16 nExportFlag = EXPORT_CONTENT | EXPORT_AUTOSTYLES | EXPORT_PRETTY|EXPORT_FONTDECLS);
 	// XServiceInfo
 	DECLARE_SERVICE_INFO_STATIC( );
 
@@ -209,7 +209,7 @@
 	// XExporter
 	virtual void SAL_CALL setSourceDocument( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent >& xDoc ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
 
-	inline Reference<XPropertySet> getDataSource() const { return m_xDataSource; }
+	inline com::sun::star::uno::Reference<XPropertySet> getDataSource() const { return m_xDataSource; }
 };
 
 // -----------------------------------------------------------------------------
--- dbaccess/source/filter/xml/xmlHierarchyCollection.cxx.gcc43~	2006-09-17 08:47:28.000000000 +0200
+++ dbaccess/source/filter/xml/xmlHierarchyCollection.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -88,8 +88,8 @@
 OXMLHierarchyCollection::OXMLHierarchyCollection( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				,const OUString& _sLocalName
-				,const Reference< XAttributeList > & _xAttrList 
-				,const Reference< XNameAccess >& _xParentContainer
+				,const com::sun::star::uno::Reference< XAttributeList > & _xAttrList 
+				,const com::sun::star::uno::Reference< XNameAccess >& _xParentContainer
 				,const ::rtl::OUString& _sCollectionServiceName
 				,const ::rtl::OUString& _sComponentServiceName) :
 	SvXMLImportContext( rImport, nPrfx, _sLocalName )
@@ -132,11 +132,11 @@
 			aValue.Value <<= _xParentContainer;
 			aArguments[1] <<= aValue;
 
-			Reference<XMultiServiceFactory> xORB(_xParentContainer,UNO_QUERY);
+			com::sun::star::uno::Reference<XMultiServiceFactory> xORB(_xParentContainer,UNO_QUERY);
 			if ( xORB.is() )
 			{
 				m_xContainer.set(xORB->createInstanceWithArguments(_sCollectionServiceName,aArguments),UNO_QUERY);
-				Reference<XNameContainer> xNameContainer(_xParentContainer,UNO_QUERY);
+				com::sun::star::uno::Reference<XNameContainer> xNameContainer(_xParentContainer,UNO_QUERY);
 				if ( xNameContainer.is() && !xNameContainer->hasByName(m_sName) )
 					xNameContainer->insertByName(m_sName,makeAny(m_xContainer));
 			}
@@ -151,7 +151,7 @@
 OXMLHierarchyCollection::OXMLHierarchyCollection( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				,const OUString& _sLocalName
-				,const Reference< XNameAccess >& _xContainer
+				,const com::sun::star::uno::Reference< XNameAccess >& _xContainer
 			) :
 	SvXMLImportContext( rImport, nPrfx, _sLocalName )
 	,m_xContainer(_xContainer)
@@ -169,7 +169,7 @@
 SvXMLImportContext* OXMLHierarchyCollection::CreateChildContext(
 		sal_uInt16 nPrefix,
 		const OUString& rLocalName,
-		const Reference< XAttributeList > & xAttrList )
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList )
 {
 	SvXMLImportContext *pContext = 0;
 	const SvXMLTokenMap&	rTokenMap	= GetOwnImport().GetDocumentsElemTokenMap();
--- dbaccess/source/filter/xml/xmlLogin.cxx.gcc43~	2007-07-24 14:06:10.000000000 +0200
+++ dbaccess/source/filter/xml/xmlLogin.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -74,7 +74,7 @@
 
 OXMLLogin::OXMLLogin( ODBFilter& rImport,
 				sal_uInt16 nPrfx, const OUString& _sLocalName,
-				const Reference< XAttributeList > & _xAttrList ) :
+				const com::sun::star::uno::Reference< XAttributeList > & _xAttrList ) :
 	SvXMLImportContext( rImport, nPrfx, _sLocalName )
 {
     DBG_CTOR(OXMLLogin,NULL);
@@ -83,7 +83,7 @@
 	const SvXMLNamespaceMap& rMap = rImport.GetNamespaceMap();
 	const SvXMLTokenMap& rTokenMap = rImport.GetLoginElemTokenMap();
 
-	Reference<XPropertySet> xDataSource(rImport.getDataSource());
+	com::sun::star::uno::Reference<XPropertySet> xDataSource(rImport.getDataSource());
 
 	sal_Int16 nLength = (xDataSource.is() && _xAttrList.is()) ? _xAttrList->getLength() : 0;
 	static const ::rtl::OUString s_sTRUE = ::xmloff::token::GetXMLToken(XML_TRUE);
--- dbaccess/source/filter/xml/xmlQuery.cxx.gcc43~	2006-09-17 08:47:55.000000000 +0200
+++ dbaccess/source/filter/xml/xmlQuery.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -82,7 +82,7 @@
 OXMLQuery::OXMLQuery( ODBFilter& rImport
 				,sal_uInt16 nPrfx
 				,const OUString& _sLocalName
-				,const Reference< XAttributeList > & _xAttrList 
+				,const com::sun::star::uno::Reference< XAttributeList > & _xAttrList 
 				,const ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess >& _xParentContainer
 				) :
 	OXMLTable( rImport, nPrfx, _sLocalName,_xAttrList,_xParentContainer,SERVICE_SDB_COMMAND_DEFINITION )
@@ -124,7 +124,7 @@
 SvXMLImportContext* OXMLQuery::CreateChildContext(
 		sal_uInt16 nPrefix,
 		const OUString& rLocalName,
-		const Reference< XAttributeList > & xAttrList )
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList )
 {
 	SvXMLImportContext* pContext = OXMLTable::CreateChildContext(nPrefix, rLocalName,xAttrList );
 	if ( !pContext )
@@ -149,7 +149,7 @@
 	return pContext;
 }
 // -----------------------------------------------------------------------------
-void OXMLQuery::setProperties(Reference< XPropertySet > & _xProp )
+void OXMLQuery::setProperties(com::sun::star::uno::Reference< XPropertySet > & _xProp )
 {
 	try
 	{
--- dbaccess/source/filter/xml/xmlStyleImport.cxx.gcc43~	2006-09-17 08:48:09.000000000 +0200
+++ dbaccess/source/filter/xml/xmlStyleImport.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -115,7 +115,7 @@
 
 OTableStyleContext::OTableStyleContext( ODBFilter& rImport,
 		sal_uInt16 nPrfx, const OUString& rLName,
-		const Reference< XAttributeList > & xAttrList,
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList,
 		SvXMLStylesContext& rStyles, sal_uInt16 nFamily, sal_Bool bDefaultStyle )
     :XMLPropStyleContext( rImport, nPrfx, rLName, xAttrList, rStyles, nFamily, bDefaultStyle )
     ,sNumberFormat(rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("NumberFormat")))
@@ -137,7 +137,7 @@
 // -----------------------------------------------------------------------------
 
 void OTableStyleContext::FillPropertySet(
-			const Reference< XPropertySet > & rPropSet )
+			const com::sun::star::uno::Reference< XPropertySet > & rPropSet )
 {
 	if ( !IsDefaultStyle() )
 	{
@@ -216,7 +216,7 @@
 OTableStylesContext::OTableStylesContext( SvXMLImport& rImport,
 		sal_uInt16 nPrfx ,
 		const OUString& rLName ,
-		const Reference< XAttributeList > & xAttrList,
+		const com::sun::star::uno::Reference< XAttributeList > & xAttrList,
 		const sal_Bool bTempAutoStyles ) :
 	SvXMLStylesContext( rImport, nPrfx, rLName, xAttrList ),
 	sColumnStyleServiceName( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( XML_STYLE_FAMILY_TABLE_COLUMN_STYLES_NAME ))),
@@ -278,7 +278,7 @@
 // ----------------------------------------------------------------------------
 SvXMLStyleContext *OTableStylesContext::CreateStyleStyleChildContext(
 		sal_uInt16 nFamily, sal_uInt16 nPrefix, const OUString& rLocalName,
-		const Reference< xml::sax::XAttributeList > & xAttrList )
+		const com::sun::star::uno::Reference< xml::sax::XAttributeList > & xAttrList )
 {
 	SvXMLStyleContext *pStyle = SvXMLStylesContext::CreateStyleStyleChildContext( nFamily, nPrefix,
 															rLocalName,
@@ -298,10 +298,10 @@
 	return pStyle;
 }
 // -----------------------------------------------------------------------------
-Reference < XNameContainer >
+com::sun::star::uno::Reference < XNameContainer >
 		OTableStylesContext::GetStylesContainer( sal_uInt16 nFamily ) const
 {
-	Reference < XNameContainer > xStyles = SvXMLStylesContext::GetStylesContainer(nFamily);
+	com::sun::star::uno::Reference < XNameContainer > xStyles = SvXMLStylesContext::GetStylesContainer(nFamily);
 	return xStyles;
 }
 // -----------------------------------------------------------------------------
--- dbaccess/source/filter/xml/xmlTableFilterList.cxx.gcc43~	2006-09-17 08:48:36.000000000 +0200
+++ dbaccess/source/filter/xml/xmlTableFilterList.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -98,7 +98,7 @@
 SvXMLImportContext* OXMLTableFilterList::CreateChildContext(
 		sal_uInt16 nPrefix,
 		const OUString& rLocalName,
-		const Reference< XAttributeList > & /*xAttrList*/ )
+		const com::sun::star::uno::Reference< XAttributeList > & /*xAttrList*/ )
 {
 	SvXMLImportContext *pContext = 0;
 
@@ -125,7 +125,7 @@
 // -----------------------------------------------------------------------------
 void OXMLTableFilterList::EndElement()
 {
-	Reference<XPropertySet> xDataSource(GetOwnImport().getDataSource());
+	com::sun::star::uno::Reference<XPropertySet> xDataSource(GetOwnImport().getDataSource());
 	if ( xDataSource.is() )
 	{
 		if ( !m_aPatterns.empty() )
--- dbaccess/source/filter/xml/xmlfilter.hxx.gcc43~	2005-09-08 16:11:36.000000000 +0200
+++ dbaccess/source/filter/xml/xmlfilter.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -120,7 +120,7 @@
 private:
 	TPropertyNameMap								m_aQuerySettings;
 	TPropertyNameMap								m_aTablesSettings;
-	Reference< XComponent >							m_xSrcDoc;
+	com::sun::star::uno::Reference< XComponent >							m_xSrcDoc;
 	mutable ::std::auto_ptr<SvXMLTokenMap>			m_pDocElemTokenMap;
 	mutable ::std::auto_ptr<SvXMLTokenMap>			m_pDatabaseElemTokenMap;
 	mutable ::std::auto_ptr<SvXMLTokenMap>			m_pDataSourceElemTokenMap;
@@ -133,7 +133,7 @@
 
 	mutable UniReference < XMLPropertySetMapper >	m_xTableStylesPropertySetMapper;
 	mutable UniReference < XMLPropertySetMapper >	m_xColumnStylesPropertySetMapper;
-	Reference<XPropertySet>							m_xDataSource;
+	com::sun::star::uno::Reference<XPropertySet>							m_xDataSource;
 	sal_Int32										m_nPreviewMode;
 
 	sal_Bool							implImport( const Sequence< PropertyValue >& rDescriptor ) throw (RuntimeException);
@@ -148,7 +148,7 @@
 	void fillPropertyMap(const Any& _rValue,TPropertyNameMap& _rMap);
 
 	SvXMLImportContext* CreateStylesContext(const ::rtl::OUString& rLocalName,
-									 const Reference< XAttributeList>& xAttrList, sal_Bool bIsAutoStyle );
+									 const com::sun::star::uno::Reference< XAttributeList>& xAttrList, sal_Bool bIsAutoStyle );
 protected:
 	// SvXMLImport
 	virtual SvXMLImportContext *CreateContext( sal_uInt16 nPrefix,
@@ -158,7 +158,7 @@
 	virtual	~ODBFilter()  throw();
 public:
 	
-	ODBFilter( const Reference< XMultiServiceFactory >& _rxMSF );
+	ODBFilter( const com::sun::star::uno::Reference< XMultiServiceFactory >& _rxMSF );
 
 	// XFilter
     virtual sal_Bool SAL_CALL filter( const Sequence< PropertyValue >& rDescriptor ) throw(RuntimeException);
@@ -170,8 +170,8 @@
 	virtual void SetViewSettings(const com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue>& aViewProps);
 	virtual void SetConfigurationSettings(const com::sun::star::uno::Sequence<com::sun::star::beans::PropertyValue>& aConfigProps);
 
-	inline Reference< XMultiServiceFactory > getORB() { return getServiceFactory(); }
-	inline Reference<XPropertySet> getDataSource() const { return m_xDataSource; }
+	inline com::sun::star::uno::Reference< XMultiServiceFactory > getORB() { return getServiceFactory(); }
+	inline com::sun::star::uno::Reference<XPropertySet> getDataSource() const { return m_xDataSource; }
 
 	inline const TPropertyNameMap& getQuerySettings() const { return m_aQuerySettings;}
 	inline const TPropertyNameMap& getTableSettings() const { return m_aTablesSettings;}
--- dbaccess/source/filter/xml/xmlservices.cxx.gcc43~	2006-10-12 15:33:48.000000000 +0200
+++ dbaccess/source/filter/xml/xmlservices.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -120,7 +120,7 @@
 					void* pServiceManager,
 					void* /*pRegistryKey*/)
 {
-	Reference< XInterface > xRet;
+	com::sun::star::uno::Reference< XInterface > xRet;
 	if (pServiceManager && pImplementationName)
 	{
 		xRet = ::dbaxml::OModuleRegistration::getComponentFactory(
--- desktop/source/so_comp/services.cxx.gcc43~	2006-10-12 16:17:43.000000000 +0200
+++ desktop/source/so_comp/services.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -61,6 +61,7 @@
 #include "oemjob.hxx"
 #include "evaluation.hxx"
 
+#include <cstring>
 
 using namespace rtl;
 using namespace ::com::sun::star::uno;
--- desktop/unx/splash/services_unxsplash.cxx.gcc43~	2007-11-06 00:25:45.000000000 +0100
+++ desktop/unx/splash/services_unxsplash.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -55,6 +55,8 @@
 
 #include "unxsplash.hxx"
 
+#include <cstring>
+
 using namespace rtl;
 using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::lang;
--- extensions/source/plugin/inc/plugin/unx/plugcon.hxx.gcc43~	2006-12-01 15:18:46.000000000 +0100
+++ extensions/source/plugin/inc/plugin/unx/plugcon.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -80,7 +80,9 @@
 #define MOZ_X11
 #include <stdio.h>
 #ifdef SYSTEM_MOZILLA
+#ifndef OJI
 #define OJI
+#endif
 #define MOZ_X11
 #include <npupp.h>
 #include <npapi.h>
--- filter/source/flash/swffilter.cxx.gcc43~	2007-01-18 15:09:46.000000000 +0100
+++ filter/source/flash/swffilter.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -86,6 +86,8 @@
 
 #include "swfexporter.hxx"
 
+#include <cstring>
+
 //#include <stdlib.h>
 //#include <windows.h>
 
--- forms/inc/makefile.mk.gcc43~	2006-10-30 09:27:55.000000000 +0100
+++ forms/inc/makefile.mk	2007-11-06 00:27:51.000000000 +0100
@@ -53,3 +53,4 @@
 	
 .ENDIF			# "$(ENABLE_PCH)"!=""
 
+ARCH_FLAGS += -I/usr/include/libxml2
--- fpicker/source/unx/kde_unx/UnxCommandThread.cxx.gcc43~	2007-11-06 00:26:10.000000000 +0100
+++ fpicker/source/unx/kde_unx/UnxCommandThread.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -78,6 +78,7 @@
 #include <unistd.h>
 
 #include <iostream>
+#include <cstring>
 
 using namespace ::com::sun::star;
 
--- framework/source/classes/actiontriggercontainer.cxx.gcc43~	2006-09-16 15:43:15.000000000 +0200
+++ framework/source/classes/actiontriggercontainer.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -56,7 +56,7 @@
 namespace framework
 {
 
-ActionTriggerContainer::ActionTriggerContainer( const Reference< XMultiServiceFactory >& rServiceManager ) :
+ActionTriggerContainer::ActionTriggerContainer( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager ) :
 	PropertySetContainer( rServiceManager )
 {
 }
@@ -95,7 +95,7 @@
 
 
 // XMultiServiceFactory
-Reference< XInterface > SAL_CALL ActionTriggerContainer::createInstance( const ::rtl::OUString& aServiceSpecifier ) 
+::com::sun::star::uno::Reference< XInterface > SAL_CALL ActionTriggerContainer::createInstance( const ::rtl::OUString& aServiceSpecifier ) 
 throw ( ::com::sun::star::uno::Exception, RuntimeException)
 {
 	if ( aServiceSpecifier.equalsAscii( SERVICENAME_ACTIONTRIGGER ))
@@ -109,7 +109,7 @@
 }
 
 
-Reference< XInterface > SAL_CALL ActionTriggerContainer::createInstanceWithArguments( const ::rtl::OUString& ServiceSpecifier, const Sequence< Any >& /*Arguments*/ ) 
+::com::sun::star::uno::Reference< XInterface > SAL_CALL ActionTriggerContainer::createInstanceWithArguments( const ::rtl::OUString& ServiceSpecifier, const Sequence< Any >& /*Arguments*/ ) 
 throw ( Exception, RuntimeException)
 {
 	return createInstance( ServiceSpecifier );
@@ -171,12 +171,12 @@
 		{
 			// Create a static typecollection ...
 			static ::cppu::OTypeCollection aTypeCollection(	
-						::getCppuType(( const Reference< XMultiServiceFactory	>*)NULL ) ,
-						::getCppuType(( const Reference< XIndexContainer		>*)NULL ) ,
-						::getCppuType(( const Reference< XIndexAccess			>*)NULL ) ,
-						::getCppuType(( const Reference< XIndexReplace			>*)NULL ) ,
-						::getCppuType(( const Reference< XServiceInfo			>*)NULL ) ,
-						::getCppuType(( const Reference< XTypeProvider			>*)NULL ) ) ;
+						::getCppuType(( const ::com::sun::star::uno::Reference< XMultiServiceFactory	>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XIndexContainer		>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XIndexAccess			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XIndexReplace			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XServiceInfo			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XTypeProvider			>*)NULL ) ) ;
 
 			// ... and set his address to static pointer!
 			pTypeCollection = &aTypeCollection ;
--- framework/source/classes/actiontriggerpropertyset.cxx.gcc43~	2006-09-16 15:43:30.000000000 +0200
+++ framework/source/classes/actiontriggerpropertyset.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -80,7 +80,7 @@
 namespace framework
 {
 
-ActionTriggerPropertySet::ActionTriggerPropertySet( const Reference< XMultiServiceFactory >& /*xServiceManager*/ )
+ActionTriggerPropertySet::ActionTriggerPropertySet( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& /*xServiceManager*/ )
     : ThreadHelpBase           ( &Application::GetSolarMutex()               )
     , OBroadcastHelper         ( m_aLock.getShareableOslMutex()              )
     ,	OPropertySetHelper       ( *SAL_STATIC_CAST( OBroadcastHelper *, this ))
@@ -168,11 +168,11 @@
 		{
 			// Create a static typecollection ...
 			static ::cppu::OTypeCollection aTypeCollection(	
-						::getCppuType(( const Reference< XPropertySet			>*)NULL ) ,
-						::getCppuType(( const Reference< XFastPropertySet		>*)NULL	) ,
-						::getCppuType(( const Reference< XMultiPropertySet		>*)NULL	) ,
-						::getCppuType(( const Reference< XServiceInfo			>*)NULL ) ,
-						::getCppuType(( const Reference< XTypeProvider			>*)NULL ) ) ;
+						::getCppuType(( const ::com::sun::star::uno::Reference< XPropertySet			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XFastPropertySet		>*)NULL	) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XMultiPropertySet		>*)NULL	) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XServiceInfo			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XTypeProvider			>*)NULL ) ) ;
 
 			// ... and set his address to static pointer!
 			pTypeCollection = &aTypeCollection ;
@@ -342,13 +342,13 @@
 	return (*pInfoHelper);
 }
 
-Reference< XPropertySetInfo > SAL_CALL ActionTriggerPropertySet::getPropertySetInfo() 
+::com::sun::star::uno::Reference< XPropertySetInfo > SAL_CALL ActionTriggerPropertySet::getPropertySetInfo() 
 throw ( RuntimeException )
 {
 	// Optimize this method !
 	// We initialize a static variable only one time. And we don't must use a mutex at every call!
 	// For the first call; pInfo is NULL - for the second call pInfo is different from NULL!
-	static Reference< XPropertySetInfo >* pInfo = NULL ;
+	static ::com::sun::star::uno::Reference< XPropertySetInfo >* pInfo = NULL ;
 
 	if( pInfo == NULL )
 	{
@@ -359,7 +359,7 @@
 		{
 			// Create structure of propertysetinfo for baseclass "OPropertySetHelper".
 			// (Use method "getInfoHelper()".)
-			static Reference< XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+			static ::com::sun::star::uno::Reference< XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
 			pInfo = &xInfo;
 		}
 	}
@@ -373,9 +373,9 @@
 	{
 		Property( OUString( RTL_CONSTASCII_USTRINGPARAM( "CommandURL"	)), HANDLE_COMMANDURL	, ::getCppuType((OUString*)0)				, PropertyAttribute::TRANSIENT	),
 		Property( OUString( RTL_CONSTASCII_USTRINGPARAM( "HelpURL"		)), HANDLE_HELPURL		, ::getCppuType((OUString*)0)				, PropertyAttribute::TRANSIENT	),
-		Property( OUString( RTL_CONSTASCII_USTRINGPARAM( "Image"        )), HANDLE_IMAGE		, ::getCppuType((Reference<XBitmap>*)0)		, PropertyAttribute::TRANSIENT	),
+		Property( OUString( RTL_CONSTASCII_USTRINGPARAM( "Image"        )), HANDLE_IMAGE		, ::getCppuType((::com::sun::star::uno::Reference<XBitmap>*)0)		, PropertyAttribute::TRANSIENT	),
 		Property( OUString( RTL_CONSTASCII_USTRINGPARAM( "SubContainer"	)), HANDLE_SUBCONTAINER	, ::getCppuType((OUString*)0)				, PropertyAttribute::TRANSIENT	),
-		Property( OUString( RTL_CONSTASCII_USTRINGPARAM( "Text"       	)), HANDLE_TEXT			, ::getCppuType((Reference<XInterface>*)0)	, PropertyAttribute::TRANSIENT	)
+		Property( OUString( RTL_CONSTASCII_USTRINGPARAM( "Text"       	)), HANDLE_TEXT			, ::getCppuType((::com::sun::star::uno::Reference<XInterface>*)0)	, PropertyAttribute::TRANSIENT	)
 	};
 
 	// Use it to initialize sequence!
@@ -426,7 +426,7 @@
 
 
 sal_Bool ActionTriggerPropertySet::impl_tryToChangeProperty(	
-	const Reference< XBitmap >	aCurrentValue	,
+	const ::com::sun::star::uno::Reference< XBitmap >	aCurrentValue	,
 	const Any&					aNewValue		,
 	Any&						aOldValue		,
 	Any&						aConvertedValue	) 
@@ -436,7 +436,7 @@
 	sal_Bool bReturn = sal_False;
 	// Get new value from any.
 	// IllegalArgumentException() can be thrown!
-	Reference< XBitmap > aValue ;
+	::com::sun::star::uno::Reference< XBitmap > aValue ;
 	convertPropertyValue( aValue, aNewValue );
 
 	// If value change ...
@@ -461,7 +461,7 @@
 }
 
 sal_Bool ActionTriggerPropertySet::impl_tryToChangeProperty(	
-	const Reference< XInterface >	aCurrentValue	,
+	const ::com::sun::star::uno::Reference< XInterface >	aCurrentValue	,
 	const Any&						aNewValue		,
 	Any&							aOldValue		,
 	Any&							aConvertedValue	) 
@@ -471,7 +471,7 @@
 	sal_Bool bReturn = sal_False;
 	// Get new value from any.
 	// IllegalArgumentException() can be thrown!
-	Reference< XInterface > aValue ;
+	::com::sun::star::uno::Reference< XInterface > aValue ;
 	convertPropertyValue( aValue, aNewValue );
 
 	// If value change ...
--- framework/source/classes/actiontriggerseparatorpropertyset.cxx.gcc43~	2006-09-16 15:43:44.000000000 +0200
+++ framework/source/classes/actiontriggerseparatorpropertyset.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -76,7 +76,7 @@
 namespace framework
 {
 
-ActionTriggerSeparatorPropertySet::ActionTriggerSeparatorPropertySet( const Reference< XMultiServiceFactory >& /*ServiceManager*/ )
+ActionTriggerSeparatorPropertySet::ActionTriggerSeparatorPropertySet( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& /*ServiceManager*/ )
         :   ThreadHelpBase          ( &Application::GetSolarMutex()                     )
         ,   OBroadcastHelper        ( m_aLock.getShareableOslMutex()                    )
 		,	OPropertySetHelper		( *SAL_STATIC_CAST( OBroadcastHelper *, this )		)
@@ -162,11 +162,11 @@
 		{
 			// Create a static typecollection ...
 			static ::cppu::OTypeCollection aTypeCollection(	
-						::getCppuType(( const Reference< XPropertySet			>*)NULL ) ,
-						::getCppuType(( const Reference< XFastPropertySet		>*)NULL	) ,
-						::getCppuType(( const Reference< XMultiPropertySet		>*)NULL	) ,
-						::getCppuType(( const Reference< XServiceInfo			>*)NULL ) ,
-						::getCppuType(( const Reference< XTypeProvider			>*)NULL ) ) ;
+						::getCppuType(( const ::com::sun::star::uno::Reference< XPropertySet			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XFastPropertySet		>*)NULL	) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XMultiPropertySet		>*)NULL	) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XServiceInfo			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XTypeProvider			>*)NULL ) ) ;
 
 			// ... and set his address to static pointer!
 			pTypeCollection = &aTypeCollection ;
@@ -288,13 +288,13 @@
 	return (*pInfoHelper);
 }
 
-Reference< XPropertySetInfo > SAL_CALL ActionTriggerSeparatorPropertySet::getPropertySetInfo() 
+::com::sun::star::uno::Reference< XPropertySetInfo > SAL_CALL ActionTriggerSeparatorPropertySet::getPropertySetInfo() 
 throw ( RuntimeException )
 {
 	// Optimize this method !
 	// We initialize a static variable only one time. And we don't must use a mutex at every call!
 	// For the first call; pInfo is NULL - for the second call pInfo is different from NULL!
-	static Reference< XPropertySetInfo >* pInfo = NULL ;
+	static ::com::sun::star::uno::Reference< XPropertySetInfo >* pInfo = NULL ;
 
 	if( pInfo == NULL )
 	{
@@ -305,7 +305,7 @@
 		{
 			// Create structure of propertysetinfo for baseclass "OPropertySetHelper".
 			// (Use method "getInfoHelper()".)
-			static Reference< XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+			static ::com::sun::star::uno::Reference< XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
 			pInfo = &xInfo;
 		}
 	}
--- framework/source/classes/addonmenu.cxx.gcc43~	2007-10-15 17:42:56.000000000 +0200
+++ framework/source/classes/addonmenu.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -163,13 +163,13 @@
 
 // ------------------------------------------------------------------------
 
-static Reference< XModel > GetModelFromFrame( const Reference< XFrame >& rFrame )
+static ::com::sun::star::uno::Reference< XModel > GetModelFromFrame( const ::com::sun::star::uno::Reference< XFrame >& rFrame )
 {
     // Query for the model to get check the context information
-    Reference< XModel > xModel;
+    ::com::sun::star::uno::Reference< XModel > xModel;
 	if ( rFrame.is() )
 	{
-	    Reference< XController > xController( rFrame->getController(), UNO_QUERY );
+	    ::com::sun::star::uno::Reference< XController > xController( rFrame->getController(), UNO_QUERY );
 	    if ( xController.is() )
 	        xModel = xController->getModel();
 	}       
@@ -190,7 +190,7 @@
 }
     
 // Factory method to create different Add-On menu types
-PopupMenu* AddonMenuManager::CreatePopupMenuType( MenuType eMenuType, const Reference< XFrame >& rFrame )
+PopupMenu* AddonMenuManager::CreatePopupMenuType( MenuType eMenuType, const ::com::sun::star::uno::Reference< XFrame >& rFrame )
 {
     if ( eMenuType == ADDON_MENU )
         return new AddonMenu( rFrame );
@@ -201,7 +201,7 @@
 }
 
 // Create the Add-Ons menu
-AddonMenu* AddonMenuManager::CreateAddonMenu( const Reference< XFrame >& rFrame )
+AddonMenu* AddonMenuManager::CreateAddonMenu( const ::com::sun::star::uno::Reference< XFrame >& rFrame )
 {
     AddonsOptions aOptions;
     AddonMenu*  pAddonMenu      = NULL;
@@ -211,7 +211,7 @@
 	if ( rAddonMenuEntries.getLength() > 0 )
 	{
         pAddonMenu = (AddonMenu *)AddonMenuManager::CreatePopupMenuType( ADDON_MENU, rFrame );
-		Reference< XModel > xModel = GetModelFromFrame( rFrame );
+		::com::sun::star::uno::Reference< XModel > xModel = GetModelFromFrame( rFrame );
         AddonMenuManager::BuildMenu( pAddonMenu, ADDON_MENU, MENU_APPEND, nUniqueMenuId, rAddonMenuEntries, rFrame, xModel );
         
         // Don't return an empty Add-On menu
@@ -249,7 +249,7 @@
 
 
 // Merge the Add-Ons help menu items into the given menu bar at a defined pos
-void AddonMenuManager::MergeAddonHelpMenu( const Reference< XFrame >& rFrame, MenuBar* pMergeMenuBar )
+void AddonMenuManager::MergeAddonHelpMenu( const ::com::sun::star::uno::Reference< XFrame >& rFrame, MenuBar* pMergeMenuBar )
 {
     if ( pMergeMenuBar )
     {
@@ -300,7 +300,7 @@
 	        if ( nInsPos < nItemCount && pHelpMenu->GetItemType( nInsPos ) != MENUITEM_SEPARATOR )
 	            nInsSepAfterPos = nInsPos;
 	        
-			Reference< XModel > xModel = GetModelFromFrame( rFrame );
+			::com::sun::star::uno::Reference< XModel > xModel = GetModelFromFrame( rFrame );
 	        AddonMenuManager::BuildMenu( pHelpMenu, ADDON_MENU, nInsPos, nUniqueMenuId, rAddonHelpMenuEntries, rFrame, xModel );
 	        
 	        if ( pHelpMenu->GetItemCount() > nItemCount )
@@ -321,8 +321,8 @@
 }
 
 // Merge the addon popup menus into the given menu bar at the provided pos.
-void AddonMenuManager::MergeAddonPopupMenus( const Reference< XFrame >& rFrame,
-											 const Reference< XModel >& rModel,
+void AddonMenuManager::MergeAddonPopupMenus( const ::com::sun::star::uno::Reference< XFrame >& rFrame,
+											 const ::com::sun::star::uno::Reference< XModel >& rModel,
 										     USHORT	              nMergeAtPos,
 											 MenuBar*             pMergeMenuBar )
 {
@@ -381,8 +381,8 @@
                                   USHORT                                nInsPos,
                                   USHORT&                               nUniqueMenuId,
                                   Sequence< Sequence< PropertyValue > > aAddonMenuDefinition, 
-                                  const Reference< XFrame >&            rFrame,
-                                  const Reference< XModel >&            rModel )
+                                  const ::com::sun::star::uno::Reference< XFrame >&            rFrame,
+                                  const ::com::sun::star::uno::Reference< XModel >&            rModel )
 {
 	Sequence< Sequence< PropertyValue > >	aAddonSubMenu;
 	BOOL                                    bInsertSeparator    = FALSE;
@@ -481,11 +481,11 @@
 }
 
 // Check if the context string matches the provided xModel context
-sal_Bool AddonMenuManager::IsCorrectContext( const Reference< XModel >& rModel, const OUString& aContext )
+sal_Bool AddonMenuManager::IsCorrectContext( const ::com::sun::star::uno::Reference< XModel >& rModel, const OUString& aContext )
 {
 	if ( rModel.is() )
 	{
-		Reference< com::sun::star::lang::XServiceInfo > xServiceInfo( rModel, UNO_QUERY );
+		::com::sun::star::uno::Reference< com::sun::star::lang::XServiceInfo > xServiceInfo( rModel, UNO_QUERY );
 		if ( xServiceInfo.is() )
 		{
 			sal_Int32 nIndex = 0;
--- framework/source/classes/addonsoptions.cxx.gcc43~	2007-07-10 17:09:05.000000000 +0200
+++ framework/source/classes/addonsoptions.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -419,7 +419,7 @@
         AddonToolBars                                     m_aCachedToolBarPartProperties;
         std::vector< rtl::OUString >                      m_aCachedToolBarPartResourceNames;
 		Sequence< Sequence< PropertyValue > >             m_aCachedHelpMenuProperties;
-		Reference< com::sun::star::util::XMacroExpander > m_xMacroExpander;
+		::com::sun::star::uno::Reference< com::sun::star::util::XMacroExpander > m_xMacroExpander;
 		ImageManager                                      m_aImageManager;
         Sequence< Sequence< PropertyValue > >             m_aEmptyAddonToolBar;
         MergeMenuInstructionContainer                     m_aCachedMergeMenuInsContainer;
@@ -478,12 +478,12 @@
     m_aPropMergeToolbarNames[ OFFSET_MERGETOOLBAR_MERGECONTEXT          ] = PROPERTYNAME_MERGETOOLBAR_MERGECONTEXT;
     m_aPropMergeToolbarNames[ OFFSET_MERGETOOLBAR_TOOLBARITEMS          ] = PROPERTYNAME_MERGETOOLBAR_TOOLBARITEMS;
 
-    Reference< XComponentContext > xContext;
-    Reference< com::sun::star::beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponentContext > xContext;
+    ::com::sun::star::uno::Reference< com::sun::star::beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
     xProps->getPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))) >>= xContext;
     if ( xContext.is() )
     {
-        m_xMacroExpander =  Reference< com::sun::star::util::XMacroExpander >( xContext->getValueByName(
+        m_xMacroExpander =  ::com::sun::star::uno::Reference< com::sun::star::util::XMacroExpander >( xContext->getValueByName(
                                 OUString( RTL_CONSTASCII_USTRINGPARAM( "/singletons/com.sun.star.util.theMacroExpander"))),
                                 UNO_QUERY );
     }
--- framework/source/classes/bmkmenu.cxx.gcc43~	2006-10-12 12:39:42.000000000 +0200
+++ framework/source/classes/bmkmenu.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -169,14 +169,14 @@
 
 // ------------------------------------------------------------------------
 
-BmkMenu::BmkMenu( Reference< XFrame >& xFrame, BmkMenu::BmkMenuType nType, BmkMenu* pRoot ) :
+BmkMenu::BmkMenu( ::com::sun::star::uno::Reference< XFrame >& xFrame, BmkMenu::BmkMenuType nType, BmkMenu* pRoot ) :
     m_nType( nType ), m_xFrame( xFrame )
 {
     _pImp = new BmkMenu_Impl( pRoot );
     Initialize();
 }
 
-BmkMenu::BmkMenu( Reference< XFrame >& xFrame, BmkMenu::BmkMenuType nType ) :
+BmkMenu::BmkMenu( ::com::sun::star::uno::Reference< XFrame >& xFrame, BmkMenu::BmkMenuType nType ) :
     m_nType( nType ), m_xFrame( xFrame )
 {
     _pImp = new BmkMenu_Impl();
--- framework/source/classes/imagewrapper.cxx.gcc43~	2006-09-16 15:47:43.000000000 +0200
+++ framework/source/classes/imagewrapper.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -189,9 +189,9 @@
 		{
 			// Create a static typecollection ...
 			static ::cppu::OTypeCollection aTypeCollection(	
-						::getCppuType(( const Reference< XTypeProvider					>*)NULL ) ,
-						::getCppuType(( const Reference< XUnoTunnel						>*)NULL ) ,
-						::getCppuType(( const Reference< com::sun::star::awt::XBitmap	>*)NULL )	) ;
+						::getCppuType(( const ::com::sun::star::uno::Reference< XTypeProvider					>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XUnoTunnel						>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< com::sun::star::awt::XBitmap	>*)NULL )	) ;
 
 			// ... and set his address to static pointer!
 			pTypeCollection = &aTypeCollection ;
--- framework/source/classes/rootactiontriggercontainer.cxx.gcc43~	2006-09-16 15:49:04.000000000 +0200
+++ framework/source/classes/rootactiontriggercontainer.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -75,7 +75,7 @@
 }
 
 
-RootActionTriggerContainer::RootActionTriggerContainer( const Menu* pMenu, const Reference< XMultiServiceFactory >& rServiceManager ) :
+RootActionTriggerContainer::RootActionTriggerContainer( const Menu* pMenu, const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager ) :
 	PropertySetContainer( rServiceManager )
 	,	m_bContainerCreated( sal_False )
 	,	m_bContainerChanged( sal_False )
@@ -142,7 +142,7 @@
 }
 
 // XMultiServiceFactory
-Reference< XInterface > SAL_CALL RootActionTriggerContainer::createInstance( const ::rtl::OUString& aServiceSpecifier ) 
+::com::sun::star::uno::Reference< XInterface > SAL_CALL RootActionTriggerContainer::createInstance( const ::rtl::OUString& aServiceSpecifier ) 
 throw ( Exception,  RuntimeException )
 {
 	if ( aServiceSpecifier.equalsAscii( SERVICENAME_ACTIONTRIGGER ))
@@ -155,7 +155,7 @@
 		throw com::sun::star::uno::RuntimeException( OUString( RTL_CONSTASCII_USTRINGPARAM( "Unknown service specifier!" )), (OWeakObject *)this );
 }
 
-Reference< XInterface > SAL_CALL RootActionTriggerContainer::createInstanceWithArguments( const ::rtl::OUString& ServiceSpecifier, const Sequence< Any >& /*Arguments*/ ) 
+::com::sun::star::uno::Reference< XInterface > SAL_CALL RootActionTriggerContainer::createInstanceWithArguments( const ::rtl::OUString& ServiceSpecifier, const Sequence< Any >& /*Arguments*/ ) 
 throw ( Exception, RuntimeException )
 {
 	return createInstance( ServiceSpecifier );
@@ -255,7 +255,7 @@
 Type SAL_CALL RootActionTriggerContainer::getElementType() 
 	throw (::com::sun::star::uno::RuntimeException)
 {
-	return ::getCppuType(( Reference< XPropertySet >*)0);
+	return ::getCppuType(( ::com::sun::star::uno::Reference< XPropertySet >*)0);
 }
 
 sal_Bool SAL_CALL RootActionTriggerContainer::hasElements() 
@@ -323,13 +323,13 @@
 		{
 			// Create a static typecollection ...
 			static ::cppu::OTypeCollection aTypeCollection(	
-						::getCppuType(( const Reference< XMultiServiceFactory	>*)NULL ) ,
-						::getCppuType(( const Reference< XIndexContainer		>*)NULL ) ,
-						::getCppuType(( const Reference< XIndexAccess			>*)NULL ) ,
-						::getCppuType(( const Reference< XIndexReplace			>*)NULL ) ,
-						::getCppuType(( const Reference< XServiceInfo			>*)NULL ) ,
-						::getCppuType(( const Reference< XTypeProvider			>*)NULL ) ,
-						::getCppuType(( const Reference< XUnoTunnel				>*)NULL ) ) ;
+						::getCppuType(( const ::com::sun::star::uno::Reference< XMultiServiceFactory	>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XIndexContainer		>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XIndexAccess			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XIndexReplace			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XServiceInfo			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XTypeProvider			>*)NULL ) ,
+						::getCppuType(( const ::com::sun::star::uno::Reference< XUnoTunnel				>*)NULL ) ) ;
 
 			// ... and set his address to static pointer!
 			pTypeCollection = &aTypeCollection ;
@@ -372,7 +372,7 @@
 {
 	m_bContainerCreated = sal_True;
 	m_bInContainerCreation = sal_True;
-    Reference<XIndexContainer> xXIndexContainer( (OWeakObject *)this, UNO_QUERY );
+    ::com::sun::star::uno::Reference<XIndexContainer> xXIndexContainer( (OWeakObject *)this, UNO_QUERY );
 	ActionTriggerHelper::FillActionTriggerContainerFromMenu( 
 		xXIndexContainer,
 		m_pMenu );
--- framework/source/layoutmanager/layoutmanager.cxx.gcc43~	2007-08-02 19:03:44.000000000 +0200
+++ framework/source/layoutmanager/layoutmanager.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -329,13 +329,13 @@
     }
 }
 
-static Reference< XModel > impl_getModelFromFrame( const Reference< XFrame >& rFrame )
+static ::com::sun::star::uno::Reference< XModel > impl_getModelFromFrame( const ::com::sun::star::uno::Reference< XFrame >& rFrame )
 {
     // Query for the model to get check the context information
-    Reference< XModel > xModel;
+    ::com::sun::star::uno::Reference< XModel > xModel;
 	if ( rFrame.is() )
 	{
-	    Reference< XController > xController( rFrame->getController(), UNO_QUERY );
+	    ::com::sun::star::uno::Reference< XController > xController( rFrame->getController(), UNO_QUERY );
 	    if ( xController.is() )
 	        xModel = xController->getModel();
 	}
@@ -343,7 +343,7 @@
     return xModel;
 }
 
-static sal_Bool implts_isPreviewModel( const Reference< XModel >& xModel )
+static sal_Bool implts_isPreviewModel( const ::com::sun::star::uno::Reference< XModel >& xModel )
 {
     if ( xModel.is() )
     {
@@ -420,13 +420,13 @@
 DEFINE_INIT_SERVICE                     (   LayoutManager, {} )
 
 
-LayoutManager::LayoutManager( const Reference< XMultiServiceFactory >& xServiceManager ) :
+LayoutManager::LayoutManager( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceManager ) :
         ThreadHelpBase( &Application::GetSolarMutex() )
         ,   ::cppu::OBroadcastHelperVar< ::cppu::OMultiTypeInterfaceContainerHelper, ::cppu::OMultiTypeInterfaceContainerHelper::keyType >( m_aLock.getShareableOslMutex()         )
         ,   ::cppu::OPropertySetHelper  ( *(static_cast< ::cppu::OBroadcastHelper* >(this)) )
         ,   ::cppu::OWeakObject         (                                                   )
         ,   m_xSMGR( xServiceManager )
-        ,   m_xURLTransformer( Reference< XURLTransformer >( xServiceManager->createInstance(
+        ,   m_xURLTransformer( ::com::sun::star::uno::Reference< XURLTransformer >( xServiceManager->createInstance(
                                                                 OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))),
                                                              UNO_QUERY ))
         ,   m_nLockCount( 0 )
@@ -444,12 +444,12 @@
         ,   m_bGlobalSettings( sal_False )
         ,   m_eDockOperation( DOCKOP_ON_COLROW )
         ,   m_pInplaceMenuBar( NULL )
-        ,   m_xModuleManager( Reference< XModuleManager >(
+        ,   m_xModuleManager( ::com::sun::star::uno::Reference< XModuleManager >(
                 xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ), UNO_QUERY ))
-        ,   m_xUIElementFactoryManager( Reference< ::com::sun::star::ui::XUIElementFactory >(
+        ,   m_xUIElementFactoryManager( ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElementFactory >(
                 xServiceManager->createInstance( SERVICENAME_UIELEMENTFACTORYMANAGER ), UNO_QUERY ))
         ,   m_bMenuBarCloser( sal_False )
-        ,   m_xPersistentWindowStateSupplier( Reference< XNameAccess >(
+        ,   m_xPersistentWindowStateSupplier( ::com::sun::star::uno::Reference< XNameAccess >(
                 xServiceManager->createInstance( SERVICENAME_WINDOWSTATECONFIGURATION ), UNO_QUERY ))
         ,   m_pGlobalSettings( 0 )
         ,   m_aCustomTbxPrefix( RTL_CONSTASCII_USTRINGPARAM( "custom_" ))
@@ -511,9 +511,9 @@
                 pSetMenuBar = (MenuBar *)m_pInplaceMenuBar->GetMenuBar();
             else
             {
-                Reference< css::awt::XMenuBar > xMenuBar;
+                ::com::sun::star::uno::Reference< css::awt::XMenuBar > xMenuBar;
 
-                Reference< XPropertySet > xPropSet( m_xMenuBar, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XPropertySet > xPropSet( m_xMenuBar, UNO_QUERY );
                 if ( xPropSet.is() )
                 {
                     try
@@ -548,7 +548,7 @@
         m_xInplaceMenuBar.clear();
     }
 
-    Reference< XComponent > xComp( m_xMenuBar, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xComp( m_xMenuBar, UNO_QUERY );
     if ( xComp.is() )
         xComp->dispose();
     m_xMenuBar.clear();
@@ -600,17 +600,17 @@
 {
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     ReadGuard aReadLock( m_aLock );
-    Reference< XFrame > xFrame = m_xFrame;
-    Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
-    Reference< css::awt::XWindow > xTopDockingWindow    = m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP];
-    Reference< css::awt::XWindow > xLeftDockingWindow   = m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT];
-    Reference< css::awt::XWindow > xRightDockingWindow  = m_xDockAreaWindows[DockingArea_DOCKINGAREA_RIGHT];
-    Reference< css::awt::XWindow > xBottomDockingWindow = m_xDockAreaWindows[DockingArea_DOCKINGAREA_BOTTOM];
-    Reference< XUIConfiguration > xModuleCfgMgr( m_xModuleCfgMgr, UNO_QUERY );
-    Reference< XUIConfiguration > xDocCfgMgr( m_xDocCfgMgr, UNO_QUERY );
-    Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
-    Reference< XMultiServiceFactory > xServiceManager( m_xSMGR );
-    Reference< XNameAccess > xPersistentWindowStateSupplier( m_xPersistentWindowStateSupplier );
+    ::com::sun::star::uno::Reference< XFrame > xFrame = m_xFrame;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xTopDockingWindow    = m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP];
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xLeftDockingWindow   = m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT];
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xRightDockingWindow  = m_xDockAreaWindows[DockingArea_DOCKINGAREA_RIGHT];
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xBottomDockingWindow = m_xDockAreaWindows[DockingArea_DOCKINGAREA_BOTTOM];
+    ::com::sun::star::uno::Reference< XUIConfiguration > xModuleCfgMgr( m_xModuleCfgMgr, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XUIConfiguration > xDocCfgMgr( m_xDocCfgMgr, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
+    ::com::sun::star::uno::Reference< XMultiServiceFactory > xServiceManager( m_xSMGR );
+    ::com::sun::star::uno::Reference< XNameAccess > xPersistentWindowStateSupplier( m_xPersistentWindowStateSupplier );
     OUString aModuleIdentifier( m_aModuleIdentifier );
     sal_Bool bAutomaticToolbars( m_bAutomaticToolbars );
     aReadLock.unlock();
@@ -618,7 +618,7 @@
 
     implts_lock();
 
-    Reference< XModel > xModel;
+    ::com::sun::star::uno::Reference< XModel > xModel;
     if ( xFrame.is() )
     {
         if ( bAttached )
@@ -626,7 +626,7 @@
             OUString aOldModuleIdentifier( aModuleIdentifier );
             try
             {
-                aModuleIdentifier = m_xModuleManager->identify( Reference< XInterface >( xFrame, UNO_QUERY ) );
+                aModuleIdentifier = m_xModuleManager->identify( ::com::sun::star::uno::Reference< XInterface >( xFrame, UNO_QUERY ) );
             }
             catch( Exception& )
             {
@@ -634,9 +634,9 @@
 
             if ( aModuleIdentifier.getLength() && aOldModuleIdentifier != aModuleIdentifier )
             {
-                Reference< XModuleUIConfigurationManagerSupplier > xModuleCfgSupplier;
+                ::com::sun::star::uno::Reference< XModuleUIConfigurationManagerSupplier > xModuleCfgSupplier;
                 if ( xServiceManager.is() )
-                    xModuleCfgSupplier = Reference< XModuleUIConfigurationManagerSupplier >(
+                    xModuleCfgSupplier = ::com::sun::star::uno::Reference< XModuleUIConfigurationManagerSupplier >(
                         xServiceManager->createInstance( SERVICENAME_MODULEUICONFIGURATIONMANAGERSUPPLIER ), UNO_QUERY );
 
                 if ( xModuleCfgMgr.is() )
@@ -644,7 +644,7 @@
                     try
                     {
                         // Remove listener to old module ui configuration manager
-                        xModuleCfgMgr->removeConfigurationListener( Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+                        xModuleCfgMgr->removeConfigurationListener( ::com::sun::star::uno::Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
                     }
                     catch ( Exception& )
                     {
@@ -654,9 +654,9 @@
                 try
                 {
                     // Add listener to new module ui configuration manager
-                    xModuleCfgMgr = Reference< XUIConfiguration >( xModuleCfgSupplier->getUIConfigurationManager( aModuleIdentifier ), UNO_QUERY );
+                    xModuleCfgMgr = ::com::sun::star::uno::Reference< XUIConfiguration >( xModuleCfgSupplier->getUIConfigurationManager( aModuleIdentifier ), UNO_QUERY );
                     if ( xModuleCfgMgr.is() )
-                        xModuleCfgMgr->addConfigurationListener( Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+                        xModuleCfgMgr->addConfigurationListener( ::com::sun::star::uno::Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
                 }
                 catch ( Exception& )
                 {
@@ -679,7 +679,7 @@
             xModel = impl_getModelFromFrame( xFrame );
             if ( xModel.is() )
             {
-                Reference< XUIConfigurationManagerSupplier > xUIConfigurationManagerSupplier( xModel, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XUIConfigurationManagerSupplier > xUIConfigurationManagerSupplier( xModel, UNO_QUERY );
                 if ( xUIConfigurationManagerSupplier.is() )
                 {
                     if ( xDocCfgMgr.is() )
@@ -687,7 +687,7 @@
                         try
                         {
                             // Remove listener to old ui configuration manager
-                            xDocCfgMgr->removeConfigurationListener( Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+                            xDocCfgMgr->removeConfigurationListener( ::com::sun::star::uno::Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
                         }
                         catch ( Exception& )
                         {
@@ -696,9 +696,9 @@
 
                     try
                     {
-                        xDocCfgMgr = Reference< XUIConfiguration >( xUIConfigurationManagerSupplier->getUIConfigurationManager(), UNO_QUERY );
+                        xDocCfgMgr = ::com::sun::star::uno::Reference< XUIConfiguration >( xUIConfigurationManagerSupplier->getUIConfigurationManager(), UNO_QUERY );
                         if ( xDocCfgMgr.is() )
-                            xDocCfgMgr->addConfigurationListener( Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+                            xDocCfgMgr->addConfigurationListener( ::com::sun::star::uno::Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
                     }
                     catch ( Exception& )
                     {
@@ -714,7 +714,7 @@
                 try
                 {
                     xModuleCfgMgr->removeConfigurationListener(
-                        Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+                        ::com::sun::star::uno::Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
                 }
                 catch ( Exception& )
                 {
@@ -726,7 +726,7 @@
                 try
                 {
                     xDocCfgMgr->removeConfigurationListener(
-                        Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+                        ::com::sun::star::uno::Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
                 }
                 catch ( Exception& )
                 {
@@ -747,8 +747,8 @@
         m_aDockingArea = css::awt::Rectangle();
         m_bComponentAttached = bAttached;
         m_aModuleIdentifier = aModuleIdentifier;
-        m_xModuleCfgMgr = Reference< XUIConfigurationManager >( xModuleCfgMgr, UNO_QUERY );
-        m_xDocCfgMgr = Reference< XUIConfigurationManager >( xDocCfgMgr, UNO_QUERY );
+        m_xModuleCfgMgr = ::com::sun::star::uno::Reference< XUIConfigurationManager >( xModuleCfgMgr, UNO_QUERY );
+        m_xDocCfgMgr = ::com::sun::star::uno::Reference< XUIConfigurationManager >( xDocCfgMgr, UNO_QUERY );
         m_xPersistentWindowState = xPersistentWindowState;
         m_aStatusBarElement.m_bStateRead = sal_False; // reset state to read data again!
         aWriteLock.unlock();
@@ -792,12 +792,12 @@
     // check if this layout manager is currently using the embedded feature
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     ReadGuard aReadLock( m_aLock );
-    Reference< XFrame > xFrame = m_xFrame;
-    Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< XFrame > xFrame = m_xFrame;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
     aReadLock.unlock();
 	/* SAFE AREA ----------------------------------------------------------------------------------------------- */
 
-    Reference< css::awt::XWindow > xFrameContainerWindow = xFrame->getContainerWindow();
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xFrameContainerWindow = xFrame->getContainerWindow();
     if ( xFrameContainerWindow == xContainerWindow )
         return sal_False;
     else
@@ -816,7 +816,7 @@
     UIElementVector::iterator pIter;
     for ( pIter = aUIElementVector.begin(); pIter != aUIElementVector.end(); pIter++ )
     {
-        Reference< XComponent > xComponent( pIter->m_xUIElement, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XComponent > xComponent( pIter->m_xUIElement, UNO_QUERY );
         if ( xComponent.is() )
             xComponent->dispose();
     }
@@ -830,7 +830,7 @@
 
 void LayoutManager::implts_destroyDockingAreaWindows()
 {
-	std::vector< Reference< css::awt::XWindow > > oldDockingAreaWindows;
+	std::vector< ::com::sun::star::uno::Reference< css::awt::XWindow > > oldDockingAreaWindows;
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
@@ -868,12 +868,12 @@
         createElement( aTbxResName );
         if ( aTitle )
         {
-            Reference< XUIElement > xUIElement = getElement( aTbxResName );
+            ::com::sun::star::uno::Reference< XUIElement > xUIElement = getElement( aTbxResName );
             if ( xUIElement.is() )
             {
                 vos::OGuard	aGuard( Application::GetSolarMutex() );
 
-                Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
                 Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
                 if ( pWindow  )
                     pWindow->SetText( aTitle );
@@ -911,11 +911,11 @@
     if ( !m_bComponentAttached )
         return;
 
-    Reference< XUIElementFactory > xUIElementFactory( m_xUIElementFactoryManager );
-    Reference< XFrame > xFrame( m_xFrame );
-    Reference< XModel > xModel;
-    Reference< XUIConfigurationManager > xModuleCfgMgr( m_xModuleCfgMgr, UNO_QUERY );
-    Reference< XUIConfigurationManager > xDocCfgMgr( m_xDocCfgMgr, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XUIElementFactory > xUIElementFactory( m_xUIElementFactoryManager );
+    ::com::sun::star::uno::Reference< XFrame > xFrame( m_xFrame );
+    ::com::sun::star::uno::Reference< XModel > xModel;
+    ::com::sun::star::uno::Reference< XUIConfigurationManager > xModuleCfgMgr( m_xModuleCfgMgr, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XUIConfigurationManager > xDocCfgMgr( m_xDocCfgMgr, UNO_QUERY );
     aReadLock.unlock();
 
     if ( xFrame.is() )
@@ -957,15 +957,15 @@
     if ( !m_bComponentAttached )
         return;
 
-    Reference< XModel > xModel;
-    Reference< XFrame > xFrame( m_xFrame );
+    ::com::sun::star::uno::Reference< XModel > xModel;
+    ::com::sun::star::uno::Reference< XFrame > xFrame( m_xFrame );
     if ( !xFrame.is() )
         return;
 
     if ( !m_pAddonOptions )
         m_pAddonOptions = new AddonsOptions;
 
-    Reference< XUIElementFactory > xUIElementFactory( m_xUIElementFactoryManager );
+    ::com::sun::star::uno::Reference< XUIElementFactory > xUIElementFactory( m_xUIElementFactoryManager );
     aWriteLock.unlock();
 
     xModel = impl_getModelFromFrame( xFrame );
@@ -974,7 +974,7 @@
 
     UIElementVector aUIElementVector;
     Sequence< Sequence< PropertyValue > > aAddonToolBarData;
-    Reference< XUIElement >               xUIElement;
+    ::com::sun::star::uno::Reference< XUIElement >               xUIElement;
 
     sal_uInt32 nCount = m_pAddonOptions->GetAddonsToolBarCount();
     OUString aAddonsToolBarStaticName( m_aFullAddonTbxPrefix );
@@ -1005,16 +1005,16 @@
             xUIElement = xUIElementFactory->createUIElement( aAddonToolBarName, aPropSeq );
             if ( xUIElement.is() )
             {
-                Reference< css::awt::XDockableWindow > xDockWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xUIElement->getRealInterface(), UNO_QUERY );
                 if ( xDockWindow.is() )
                 {
                     try
                     {
-                        xDockWindow->addDockableWindowListener( Reference< css::awt::XDockableWindowListener >( static_cast< OWeakObject * >( this ), UNO_QUERY ));
+                        xDockWindow->addDockableWindowListener( ::com::sun::star::uno::Reference< css::awt::XDockableWindowListener >( static_cast< OWeakObject * >( this ), UNO_QUERY ));
                         xDockWindow->enableDocking( sal_True );
-                        Reference< css::awt::XWindow > xWindow( xDockWindow, UNO_QUERY );
+                        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xDockWindow, UNO_QUERY );
                         if ( xWindow.is() )
-                            xWindow->addWindowListener( Reference< css::awt::XWindowListener >( static_cast< OWeakObject * >( this ), UNO_QUERY ));
+                            xWindow->addWindowListener( ::com::sun::star::uno::Reference< css::awt::XWindowListener >( static_cast< OWeakObject * >( this ), UNO_QUERY ));
                     }
                     catch ( Exception& )
                     {
@@ -1050,7 +1050,7 @@
                     m_aUIElements.push_back( aNewToolbar );
                 }
 
-                Reference< css::awt::XWindow > xWindow( xDockWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xDockWindow, UNO_QUERY );
                 if ( xWindow.is() )
                 {
                     // Set generic title for add-on toolbar
@@ -1084,10 +1084,10 @@
          !m_bComponentAttached )
         return;
 
-    Reference< XFrame > xFrame( m_xFrame );
+    ::com::sun::star::uno::Reference< XFrame > xFrame( m_xFrame );
 
-    Reference< XUIElementFactory > xUIElementFactory( m_xUIElementFactoryManager );
-    Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
+    ::com::sun::star::uno::Reference< XUIElementFactory > xUIElementFactory( m_xUIElementFactoryManager );
+    ::com::sun::star::uno::Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
     aReadLock.unlock();
 
     if ( implts_isPreviewModel( impl_getModelFromFrame( xFrame )))
@@ -1101,7 +1101,7 @@
         rtl::OUString aElementName;
         rtl::OUString aName;
 
-        Reference< ::com::sun::star::ui::XUIElement > xUIElement;
+        ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > xUIElement;
         Sequence< rtl::OUString > aToolbarNames = xPersistentWindowState->getElementNames();
 
         if ( aToolbarNames.getLength() > 0 )
@@ -1163,8 +1163,8 @@
     {
         if ( pIter->m_xUIElement.is() )
         {
-            Reference< css::awt::XDockableWindow > xDockWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
-            Reference< css::awt::XWindow > xWindow( xDockWindow, UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xDockWindow, UNO_QUERY );
             if ( xDockWindow.is() && xWindow.is() )
             {
                 sal_Bool bVisible( sal_True );
@@ -1200,7 +1200,7 @@
     }
 }
 
-sal_Bool LayoutManager::implts_findElement( const rtl::OUString& aName, rtl::OUString& aElementType, rtl::OUString& aElementName, Reference< XUIElement >& xUIElement )
+sal_Bool LayoutManager::implts_findElement( const rtl::OUString& aName, rtl::OUString& aElementType, rtl::OUString& aElementName, ::com::sun::star::uno::Reference< XUIElement >& xUIElement )
 {
     if ( impl_parseResourceURL( aName, aElementType, aElementName ))
     {
@@ -1245,7 +1245,7 @@
     return sal_False;
 }
 
-sal_Bool LayoutManager::implts_findElement( const Reference< XInterface >& xUIElement, UIElement& aElementData )
+sal_Bool LayoutManager::implts_findElement( const ::com::sun::star::uno::Reference< XInterface >& xUIElement, UIElement& aElementData )
 {
     UIElementVector::const_iterator pIter;
 
@@ -1254,7 +1254,7 @@
     {
         if ( pIter->m_xUIElement.is() )
         {
-            Reference< XInterface > xIfac( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< XInterface > xIfac( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
             if ( xIfac == xUIElement )
             {
                 aElementData = *pIter;
@@ -1299,7 +1299,7 @@
     return aEmptyElement;
 }
 
-void LayoutManager::implts_writeNewStateData( const rtl::OUString aName, const Reference< css::awt::XWindow >& xWindow )
+void LayoutManager::implts_writeNewStateData( const rtl::OUString aName, const ::com::sun::star::uno::Reference< css::awt::XWindow >& xWindow )
 {
     css::awt::Rectangle aPos;
     css::awt::Size      aSize;
@@ -1308,11 +1308,11 @@
 
     if ( xWindow.is() )
     {
-        Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+        ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
         if ( xDockWindow.is() )
             bFloating = xDockWindow->isFloating();
 
-        Reference< css::awt::XWindow2 > xWindow2( xWindow, UNO_QUERY );
+        ::com::sun::star::uno::Reference< css::awt::XWindow2 > xWindow2( xWindow, UNO_QUERY );
         if( xWindow2.is() )
         {
             aPos     = xWindow2->getPosSize();
@@ -1389,7 +1389,7 @@
     sal_Bool bGetSettingsState( sal_False );
 
     WriteGuard aWriteLock( m_aLock );
-    Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
+    ::com::sun::star::uno::Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
     aWriteLock.unlock();
 
     if ( xPersistentWindowState.is() )
@@ -1532,14 +1532,14 @@
 void LayoutManager::implts_writeWindowStateData( const rtl::OUString& aName, const UIElement& rElementData )
 {
     WriteGuard aWriteLock( m_aLock );
-    Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
+    ::com::sun::star::uno::Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
 
     // set flag to determine that we triggered the notification
     m_bStoreWindowState = sal_True;
     aWriteLock.unlock();
 
     sal_Bool bPersistent( sal_False );
-    Reference< XPropertySet > xPropSet( rElementData.m_xUIElement, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XPropertySet > xPropSet( rElementData.m_xUIElement, UNO_QUERY );
     if ( xPropSet.is() )
     {
         try
@@ -1594,12 +1594,12 @@
 
             if ( xPersistentWindowState->hasByName( aName ))
             {
-                Reference< XNameReplace > xReplace( xPersistentWindowState, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XNameReplace > xReplace( xPersistentWindowState, UNO_QUERY );
                 xReplace->replaceByName( aName, makeAny( aWindowState ));
             }
             else
             {
-                Reference< XNameContainer > xInsert( xPersistentWindowState, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XNameContainer > xInsert( xPersistentWindowState, UNO_QUERY );
                 xInsert->insertByName( aName, makeAny( aWindowState ));
             }
         }
@@ -1614,14 +1614,14 @@
     aWriteLock.unlock();
 }
 
-void LayoutManager::implts_setElementData( UIElement& rElement, const Reference< css::awt::XDockableWindow >& rDockWindow )
+void LayoutManager::implts_setElementData( UIElement& rElement, const ::com::sun::star::uno::Reference< css::awt::XDockableWindow >& rDockWindow )
 {
     ReadGuard aReadLock( m_aLock );
     sal_Bool bShowElement( rElement.m_bVisible && !rElement.m_bMasterHide && m_bParentWindowVisible );
     aReadLock.unlock();
 
-    Reference< css::awt::XDockableWindow > xDockWindow( rDockWindow );
-    Reference< css::awt::XWindow2 >        xWindow( xDockWindow, UNO_QUERY );
+    ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( rDockWindow );
+    ::com::sun::star::uno::Reference< css::awt::XWindow2 >        xWindow( xDockWindow, UNO_QUERY );
 
     Window*     pWindow( 0 );
     ToolBox*    pToolBox( 0 );
@@ -1761,9 +1761,9 @@
     const sal_Int32 nCascadeIndentY = 15;
 
     ReadGuard aReadLock( m_aLock );
-    Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
-    Reference< css::awt::XWindow > xTopDockingWindow = m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP];
-    Reference< css::awt::XWindow > xLeftDockingWindow = m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT];
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xTopDockingWindow = m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP];
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xLeftDockingWindow = m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT];
     aReadLock.unlock();
 
     ::Point aStartPos( nCascadeIndentX, nCascadeIndentY );
@@ -1793,8 +1793,8 @@
     {
         if ( pIter->m_xUIElement.is() )
         {
-            Reference< css::awt::XDockableWindow > xDockWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
-            Reference< css::awt::XWindow > xWindow( xDockWindow, UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xDockWindow, UNO_QUERY );
             if ( xDockWindow.is() && xWindow.is() && xDockWindow->isFloating() )
             {
                 vos::OGuard	aGuard( Application::GetSolarMutex() );
@@ -1821,7 +1821,7 @@
 void LayoutManager::implts_findNextDockingPos( DockingArea DockingArea, const ::Size& aUIElementSize, ::Point& rVirtualPos, ::Point& rPixelPos )
 {
     ReadGuard aReadLock( m_aLock );
-    Reference< css::awt::XWindow > xDockingWindow = m_xDockAreaWindows[DockingArea];
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xDockingWindow = m_xDockAreaWindows[DockingArea];
     ::Size                         aDockingWinSize;
     Window*                        pDockingWindow( 0 );
     aReadLock.unlock();
@@ -1968,7 +1968,7 @@
 ::Size LayoutManager::implts_getContainerWindowOutputSize()
 {
     ReadGuard aReadLock( m_aLock );
-    Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
     ::Size                         aContainerWinSize;
     Window* pContainerWindow( 0 );
     aReadLock.unlock();
@@ -2009,7 +2009,7 @@
         ( eDockingArea > DockingArea_DOCKINGAREA_RIGHT ))
         eDockingArea = DockingArea_DOCKINGAREA_TOP;
 
-    Reference< css::awt::XWindow > xDockAreaWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xDockAreaWindow;
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     ReadGuard aReadLock( m_aLock );
@@ -2019,13 +2019,13 @@
     {
         if ( pIter->m_aDockedData.m_nDockedArea == eDockingArea )
         {
-            Reference< XUIElement > xUIElement( pIter->m_xUIElement );
+            ::com::sun::star::uno::Reference< XUIElement > xUIElement( pIter->m_xUIElement );
             if ( xUIElement.is() )
             {
-                Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
                 if ( xWindow.is() )
                 {
-                    Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                     if ( xDockWindow.is() && pIter->m_bVisible && !pIter->m_bFloating )
                     {
                         // docked windows
@@ -2060,13 +2060,13 @@
     for ( j = 0; j < sal_Int32( aWindowVector.size()); j++ )
     {
         const UIElement& rElement = aWindowVector[j];
-        Reference< css::awt::XWindow > xWindow;
-        Reference< XUIElement > xUIElement( rElement.m_xUIElement );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow;
+        ::com::sun::star::uno::Reference< XUIElement > xUIElement( rElement.m_xUIElement );
         css::awt::Rectangle aPosSize;
         if ( xUIElement.is() )
         {
             vos::OGuard	aGuard( Application::GetSolarMutex() );
-            xWindow = Reference< css::awt::XWindow >( xUIElement->getRealInterface(), UNO_QUERY );
+            xWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( xUIElement->getRealInterface(), UNO_QUERY );
             aPosSize = xWindow->getPosSize();
 
             Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
@@ -2221,16 +2221,16 @@
             sal_Bool                bSameRowCol = bHorzDockArea ?
                                                    ( pIter->m_aDockedData.m_aPos.Y() == nRowCol ) :
                                                    ( pIter->m_aDockedData.m_aPos.X() == nRowCol );
-            Reference< XUIElement > xUIElement( pIter->m_xUIElement );
+            ::com::sun::star::uno::Reference< XUIElement > xUIElement( pIter->m_xUIElement );
 
             if ( bSameRowCol && xUIElement.is() )
             {
-                Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
                 if ( xWindow.is() )
                 {
                     vos::OGuard	aGuard( Application::GetSolarMutex() );
                     Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
-                    Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                     if ( pWindow && pIter->m_bVisible && xDockWindow.is() && !pIter->m_bFloating )
                     {
                         // docked windows
@@ -2260,13 +2260,13 @@
     for ( j = 0; j < sal_Int32( aWindowVector.size()); j++ )
     {
         const UIElement& rElement = aWindowVector[j];
-        Reference< css::awt::XWindow > xWindow;
-        Reference< XUIElement > xUIElement( rElement.m_xUIElement );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow;
+        ::com::sun::star::uno::Reference< XUIElement > xUIElement( rElement.m_xUIElement );
         css::awt::Rectangle aPosSize;
         if ( xUIElement.is() )
         {
             vos::OGuard	aGuard( Application::GetSolarMutex() );
-            xWindow = Reference< css::awt::XWindow >( xUIElement->getRealInterface(), UNO_QUERY );
+            xWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( xUIElement->getRealInterface(), UNO_QUERY );
             aPosSize = xWindow->getPosSize();
 
             Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
@@ -2409,8 +2409,8 @@
     else
     {
         ReadGuard aReadLock( m_aLock );
-        Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
-        Reference< css::awt::XWindow > xDockingAreaWindow = m_xDockAreaWindows[DockingArea];
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xDockingAreaWindow = m_xDockAreaWindows[DockingArea];
         aReadLock.unlock();
 
         // Calc correct position of the column/row rectangle to be able to compare it with mouse pos/tracking rect
@@ -2540,8 +2540,8 @@
         aTrackingRect.setHeight( nSize );
 
         ReadGuard aReadLock( m_aLock );
-        Reference< css::awt::XWindow > xDockingAreaWindow = m_xDockAreaWindows[eDockingArea];
-        Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xDockingAreaWindow = m_xDockAreaWindows[eDockingArea];
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
         aReadLock.unlock();
 
         sal_Int32 nDockPosY( 0 );
@@ -2583,7 +2583,7 @@
     const Point&        rMousePos )
 {
     ReadGuard aReadLock( m_aLock );
-    Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow = m_xContainerWindow;
     ::Size                         aContainerWinSize;
     Window* pContainerWindow( 0 );
     aReadLock.unlock();
@@ -2604,8 +2604,8 @@
     Window*                                 pDockWindow( 0 );
     Window*                                 pDockingAreaWindow( 0 );
     ToolBox*                                pToolBox( 0 );
-    Reference< css::awt::XWindow >          xWindow( rUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-    Reference< css::awt::XWindow >          xDockingAreaWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow >          xWindow( rUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+    ::com::sun::star::uno::Reference< css::awt::XWindow >          xDockingAreaWindow;
     ::Rectangle                             aTrackingRect( rTrackingRect );
     ::com::sun::star::ui::DockingArea eDockedArea( (::com::sun::star::ui::DockingArea)rUIElement.m_aDockedData.m_nDockedArea );
     sal_Int32                               nTopDockingAreaSize( implts_getTopBottomDockingAreaSizes().Width() );
@@ -2962,7 +2962,7 @@
     const UIElement& rUIElement )
 {
     ReadGuard aReadLock( m_aLock );
-    Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
+    ::com::sun::star::uno::Reference< XNameAccess > xPersistentWindowState( m_xPersistentWindowState );
     aReadLock.unlock();
 
     sal_Bool  bHorzDockingArea(( eDockingArea == DockingArea_DOCKINGAREA_TOP    ) ||
@@ -3032,7 +3032,7 @@
                             else
                                 aDockedPos.X += 1;
 
-                            Reference< XNameReplace > xReplace( xPersistentWindowState, UNO_QUERY );
+                            ::com::sun::star::uno::Reference< XNameReplace > xReplace( xPersistentWindowState, UNO_QUERY );
                             xReplace->replaceByName( aWindowElements[i], makeAny( aPropValueSeq ));
                         }
                     }
@@ -3051,8 +3051,8 @@
 ::Size LayoutManager::implts_getTopBottomDockingAreaSizes()
 {
     ::Size                         aSize;
-    Reference< css::awt::XWindow > xTopDockingAreaWindow;
-    Reference< css::awt::XWindow > xBottomDockingAreaWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xTopDockingAreaWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xBottomDockingAreaWindow;
 
     ReadGuard aReadLock( m_aLock );
     xTopDockingAreaWindow       = m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP];
@@ -3072,9 +3072,9 @@
     implts_sortUIElements();
 }
 
-Reference< XUIElement > LayoutManager::implts_createElement( const rtl::OUString& aName )
+::com::sun::star::uno::Reference< XUIElement > LayoutManager::implts_createElement( const rtl::OUString& aName )
 {
-    Reference< ::com::sun::star::ui::XUIElement > xUIElement;
+    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > xUIElement;
 
     ReadGuard   aReadLock( m_aLock );
     Sequence< PropertyValue > aPropSeq( 2 );
@@ -3097,9 +3097,9 @@
     return xUIElement;
 }
 
-Reference< css::awt::XWindowPeer > LayoutManager::implts_createToolkitWindow( const Reference< css::awt::XWindowPeer >& rParent )
+::com::sun::star::uno::Reference< css::awt::XWindowPeer > LayoutManager::implts_createToolkitWindow( const ::com::sun::star::uno::Reference< css::awt::XWindowPeer >& rParent )
 {
-    Reference< css::awt::XWindowPeer > xPeer;
+    ::com::sun::star::uno::Reference< css::awt::XWindowPeer > xPeer;
     css::uno::Reference< css::awt::XToolkit > xToolkit( m_xSMGR->createInstance( SERVICENAME_VCLTOOLKIT ), css::uno::UNO_QUERY );
     if ( xToolkit.is() )
     {
@@ -3142,7 +3142,7 @@
         implts_notifyListeners( css::frame::LayoutManagerEvents::VISIBLE, a );
     else
         implts_notifyListeners( css::frame::LayoutManagerEvents::INVISIBLE, a );
-    std::vector< Reference< css::awt::XWindow > > aWinVector;
+    std::vector< ::com::sun::star::uno::Reference< css::awt::XWindow > > aWinVector;
     sal_Bool bOld;
 
     {
@@ -3157,7 +3157,7 @@
     {
         if ( pIter->m_xUIElement.is() )
         {
-            Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
             if ( xWindow.is() )
             {
                 if ( bSetVisible )
@@ -3178,7 +3178,7 @@
         vos::OGuard	aGuard( Application::GetSolarMutex() );
         for ( sal_uInt32 i = 0; i < aWinVector.size(); i++ )
         {
-            Reference< css::awt::XWindow > xWindow( aWinVector[i] );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( aWinVector[i] );
             if ( xWindow.is() )
             {
                 // we need VCL here to pass special flags to Show()
@@ -3194,9 +3194,9 @@
 
     // Hide/show menubar according to bSetVisible
     aReadLock.lock();
-    Reference< XUIElement > xMenuBar( m_xMenuBar, UNO_QUERY );
-    Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
-    Reference< XComponent > xInplaceMenuBar( m_xInplaceMenuBar );
+    ::com::sun::star::uno::Reference< XUIElement > xMenuBar( m_xMenuBar, UNO_QUERY );
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< XComponent > xInplaceMenuBar( m_xInplaceMenuBar );
     MenuBarManager*	pInplaceMenuBar( m_pInplaceMenuBar );
     aReadLock.unlock();
 
@@ -3248,10 +3248,10 @@
     {
         // Set docking area window size to zero
         ReadGuard aReadLock2( m_aLock );
-        Reference< css::awt::XWindow > xTopDockingWindow    = m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP];
-        Reference< css::awt::XWindow > xLeftDockingWindow   = m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT];
-        Reference< css::awt::XWindow > xRightDockingWindow  = m_xDockAreaWindows[DockingArea_DOCKINGAREA_RIGHT];
-        Reference< css::awt::XWindow > xBottomDockingWindow = m_xDockAreaWindows[DockingArea_DOCKINGAREA_BOTTOM];
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xTopDockingWindow    = m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP];
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xLeftDockingWindow   = m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT];
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xRightDockingWindow  = m_xDockAreaWindows[DockingArea_DOCKINGAREA_RIGHT];
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xBottomDockingWindow = m_xDockAreaWindows[DockingArea_DOCKINGAREA_BOTTOM];
         aReadLock2.unlock();
 
         try
@@ -3277,12 +3277,12 @@
 
 void LayoutManager::implts_destroyStatusBar()
 {
- 	Reference< XComponent > xCompStatusBar;
+ 	::com::sun::star::uno::Reference< XComponent > xCompStatusBar;
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
     m_aStatusBarElement.m_aName = rtl::OUString();
-    xCompStatusBar = Reference< XComponent >( m_aStatusBarElement.m_xUIElement, UNO_QUERY );
+    xCompStatusBar = ::com::sun::star::uno::Reference< XComponent >( m_aStatusBarElement.m_xUIElement, UNO_QUERY );
     m_aStatusBarElement.m_xUIElement.clear();
     aWriteLock.unlock();
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
@@ -3323,15 +3323,15 @@
 
 void LayoutManager::implts_createProgressBar()
 {
- 	Reference< XUIElement > xStatusBar;
-    Reference< XUIElement > xProgressBar;
-    Reference< XUIElement > xProgressBarBackup;
-    Reference< css::awt::XWindow > xContainerWindow;
+ 	::com::sun::star::uno::Reference< XUIElement > xStatusBar;
+    ::com::sun::star::uno::Reference< XUIElement > xProgressBar;
+    ::com::sun::star::uno::Reference< XUIElement > xProgressBarBackup;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow;
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
-    xStatusBar = Reference< XUIElement >( m_aStatusBarElement.m_xUIElement, UNO_QUERY );
-    xProgressBar = Reference< XUIElement >( m_aProgressBarElement.m_xUIElement, UNO_QUERY );
+    xStatusBar = ::com::sun::star::uno::Reference< XUIElement >( m_aStatusBarElement.m_xUIElement, UNO_QUERY );
+    xProgressBar = ::com::sun::star::uno::Reference< XUIElement >( m_aProgressBarElement.m_xUIElement, UNO_QUERY );
     xProgressBarBackup = m_xProgressBarBackup;
     m_xProgressBarBackup.clear();
     xContainerWindow = m_xContainerWindow;
@@ -3349,12 +3349,12 @@
 
     if ( xStatusBar.is() )
     {
-        Reference< css::awt::XWindow > xWindow( xStatusBar->getRealInterface(), UNO_QUERY );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xStatusBar->getRealInterface(), UNO_QUERY );
         pWrapper->setStatusBar( xWindow );
     }
     else
     {
-        Reference< css::awt::XWindow > xStatusBarWindow = pWrapper->getStatusBar();
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xStatusBarWindow = pWrapper->getStatusBar();
 
         vos::OGuard	aGuard( Application::GetSolarMutex() );
         Window* pStatusBarWnd = VCLUnoHelper::GetWindow( xStatusBarWindow );
@@ -3364,7 +3364,7 @@
             if ( pWindow )
             {
                 StatusBar* pStatusBar = new StatusBar( pWindow, WinBits( WB_LEFT | WB_3DLOOK ) );
-                Reference< css::awt::XWindow > xStatusBarWindow2( VCLUnoHelper::GetInterface( pStatusBar ));
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xStatusBarWindow2( VCLUnoHelper::GetInterface( pStatusBar ));
                 pWrapper->setStatusBar( xStatusBarWindow2, sal_True );
             }
         }
@@ -3372,7 +3372,7 @@
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     aWriteLock.lock();
-    m_aProgressBarElement.m_xUIElement = Reference< XUIElement >(
+    m_aProgressBarElement.m_xUIElement = ::com::sun::star::uno::Reference< XUIElement >(
         static_cast< cppu::OWeakObject* >( pWrapper ), UNO_QUERY );
     aWriteLock.unlock();
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
@@ -3401,7 +3401,7 @@
     {
         ProgressBarWrapper* pWrapper = (ProgressBarWrapper*)m_xProgressBarBackup.get();
         if ( pWrapper )
-            pWrapper->setStatusBar( Reference< css::awt::XWindow >(), sal_False );
+            pWrapper->setStatusBar( ::com::sun::star::uno::Reference< css::awt::XWindow >(), sal_False );
     }
 
     // prevent us from dispose() the m_aProgressBarElement.m_xUIElement inside implts_reset()
@@ -3422,19 +3422,19 @@
 
 void LayoutManager::implts_setStatusBarPosSize( const ::Point& rPos, const ::Size& rSize )
 {
- 	Reference< XUIElement > xStatusBar;
-    Reference< XUIElement > xProgressBar;
-    Reference< css::awt::XWindow > xContainerWindow;
+ 	::com::sun::star::uno::Reference< XUIElement > xStatusBar;
+    ::com::sun::star::uno::Reference< XUIElement > xProgressBar;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow;
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     ReadGuard aReadLock( m_aLock );
-    xStatusBar = Reference< XUIElement >( m_aStatusBarElement.m_xUIElement, UNO_QUERY );
-    xProgressBar = Reference< XUIElement >( m_aProgressBarElement.m_xUIElement, UNO_QUERY );
+    xStatusBar = ::com::sun::star::uno::Reference< XUIElement >( m_aStatusBarElement.m_xUIElement, UNO_QUERY );
+    xProgressBar = ::com::sun::star::uno::Reference< XUIElement >( m_aProgressBarElement.m_xUIElement, UNO_QUERY );
     xContainerWindow = m_xContainerWindow;
 
-    Reference< css::awt::XWindow > xWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow;
     if ( xStatusBar.is() )
-        xWindow = Reference< css::awt::XWindow >( xStatusBar->getRealInterface(), UNO_QUERY );
+        xWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( xStatusBar->getRealInterface(), UNO_QUERY );
     else if ( xProgressBar.is() )
     {
         ProgressBarWrapper* pWrapper = (ProgressBarWrapper*)xProgressBar.get();
@@ -3461,14 +3461,14 @@
 
 sal_Bool LayoutManager::implts_showProgressBar()
 {
- 	Reference< XUIElement > xStatusBar;
-    Reference< XUIElement > xProgressBar;
-    Reference< css::awt::XWindow > xWindow;
+ 	::com::sun::star::uno::Reference< XUIElement > xStatusBar;
+    ::com::sun::star::uno::Reference< XUIElement > xProgressBar;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow;
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
-    xStatusBar = Reference< XUIElement >( m_aStatusBarElement.m_xUIElement, UNO_QUERY );
-    xProgressBar = Reference< XUIElement >( m_aProgressBarElement.m_xUIElement, UNO_QUERY );
+    xStatusBar = ::com::sun::star::uno::Reference< XUIElement >( m_aStatusBarElement.m_xUIElement, UNO_QUERY );
+    xProgressBar = ::com::sun::star::uno::Reference< XUIElement >( m_aProgressBarElement.m_xUIElement, UNO_QUERY );
     sal_Bool bVisible( m_bVisible );
 
     m_aProgressBarElement.m_bVisible = sal_True;
@@ -3476,7 +3476,7 @@
     {
         if ( xStatusBar.is() && !m_aStatusBarElement.m_bMasterHide )
         {
-            xWindow = Reference< css::awt::XWindow >( xStatusBar->getRealInterface(), UNO_QUERY );
+            xWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( xStatusBar->getRealInterface(), UNO_QUERY );
         }
         else if ( xProgressBar.is() )
         {
@@ -3504,24 +3504,24 @@
 
 sal_Bool LayoutManager::implts_hideProgressBar()
 {
-    Reference< XUIElement > xProgressBar;
-    Reference< css::awt::XWindow > xWindow;
+    ::com::sun::star::uno::Reference< XUIElement > xProgressBar;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow;
     sal_Bool bHideStatusBar( sal_False );
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
-    xProgressBar = Reference< XUIElement >( m_aProgressBarElement.m_xUIElement, UNO_QUERY );
+    xProgressBar = ::com::sun::star::uno::Reference< XUIElement >( m_aProgressBarElement.m_xUIElement, UNO_QUERY );
 
     sal_Bool bInternalStatusBar( sal_False );
     if ( xProgressBar.is() )
     {
-        Reference< css::awt::XWindow > xStatusBar;
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xStatusBar;
         ProgressBarWrapper* pWrapper = (ProgressBarWrapper*)xProgressBar.get();
         if ( pWrapper )
             xWindow = pWrapper->getStatusBar();
-        Reference< css::ui::XUIElement > xStatusBarElement = m_aStatusBarElement.m_xUIElement;
+        ::com::sun::star::uno::Reference< css::ui::XUIElement > xStatusBarElement = m_aStatusBarElement.m_xUIElement;
         if ( xStatusBarElement.is() )
-            xStatusBar = Reference< css::awt::XWindow >( xStatusBarElement->getRealInterface(), UNO_QUERY );
+            xStatusBar = ::com::sun::star::uno::Reference< css::awt::XWindow >( xStatusBarElement->getRealInterface(), UNO_QUERY );
         bInternalStatusBar = xStatusBar != xWindow;
     }
     m_aProgressBarElement.m_bVisible = sal_False;
@@ -3546,7 +3546,7 @@
 {
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
-    Reference< css::ui::XUIElement > xStatusBar = m_aStatusBarElement.m_xUIElement;
+    ::com::sun::star::uno::Reference< css::ui::XUIElement > xStatusBar = m_aStatusBarElement.m_xUIElement;
     if ( bStoreState )
         m_aStatusBarElement.m_bVisible = sal_True;
     aWriteLock.unlock();
@@ -3554,7 +3554,7 @@
 
     if ( xStatusBar.is() )
     {
-        Reference< css::awt::XWindow > xWindow( xStatusBar->getRealInterface(), UNO_QUERY );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xStatusBar->getRealInterface(), UNO_QUERY );
 
         vos::OGuard	aGuard( Application::GetSolarMutex() );
         Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
@@ -3572,7 +3572,7 @@
 {
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
-    Reference< css::ui::XUIElement > xStatusBar = m_aStatusBarElement.m_xUIElement;
+    ::com::sun::star::uno::Reference< css::ui::XUIElement > xStatusBar = m_aStatusBarElement.m_xUIElement;
     if ( bStoreState )
         m_aStatusBarElement.m_bVisible = sal_False;
     aWriteLock.unlock();
@@ -3580,7 +3580,7 @@
 
     if ( xStatusBar.is() )
     {
-        Reference< css::awt::XWindow > xWindow( xStatusBar->getRealInterface(), UNO_QUERY );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xStatusBar->getRealInterface(), UNO_QUERY );
 
         vos::OGuard	aGuard( Application::GetSolarMutex() );
         Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
@@ -3594,7 +3594,7 @@
     return sal_False;
 }
 
-void LayoutManager::implts_setInplaceMenuBar( const Reference< XIndexAccess >& xMergedMenuBar )
+void LayoutManager::implts_setInplaceMenuBar( const ::com::sun::star::uno::Reference< XIndexAccess >& xMergedMenuBar )
 throw (::com::sun::star::uno::RuntimeException)
 {
  	/* SAFE AREA ----------------------------------------------------------------------------------------------- */
@@ -3615,7 +3615,7 @@
              m_xContainerWindow.is() )
         {
             rtl::OUString aModuleIdentifier;
-            Reference< XDispatchProvider > xDispatchProvider;
+            ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider;
 
             MenuBar* pMenuBar = new MenuBar;
             m_pInplaceMenuBar = new MenuBarManager( m_xSMGR, m_xFrame, xDispatchProvider, aModuleIdentifier, pMenuBar, sal_True, sal_True );
@@ -3632,7 +3632,7 @@
             }
 
  	        m_bInplaceMenuSet = sal_True;
-            m_xInplaceMenuBar = Reference< XComponent >( (OWeakObject *)m_pInplaceMenuBar, UNO_QUERY );
+            m_xInplaceMenuBar = ::com::sun::star::uno::Reference< XComponent >( (OWeakObject *)m_pInplaceMenuBar, UNO_QUERY );
         }
 
         aWriteLock.unlock();
@@ -3678,7 +3678,7 @@
 	/* SAFE AREA ----------------------------------------------------------------------------------------------- */
 }
 
-void SAL_CALL LayoutManager::attachFrame( const Reference< XFrame >& xFrame )
+void SAL_CALL LayoutManager::attachFrame( const ::com::sun::star::uno::Reference< XFrame >& xFrame )
 throw (::com::sun::star::uno::RuntimeException)
 {
  	/* SAFE AREA ----------------------------------------------------------------------------------------------- */
@@ -3687,7 +3687,7 @@
     aWriteLock.unlock();
 	/* SAFE AREA ----------------------------------------------------------------------------------------------- */
     // if ( xFrame.is() )
-    //    xFrame->getContainerWindow()->addWindowListener( Reference< css::awt::XWindowListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+    //    xFrame->getContainerWindow()->addWindowListener( ::com::sun::star::uno::Reference< css::awt::XWindowListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
 }
 
 void SAL_CALL LayoutManager::reset()
@@ -3719,7 +3719,7 @@
 // XMenuBarMergingAcceptor
 //---------------------------------------------------------------------------------------------------------
 sal_Bool SAL_CALL LayoutManager::setMergedMenuBar(
-    const Reference< XIndexAccess >& xMergedMenuBar )
+    const ::com::sun::star::uno::Reference< XIndexAccess >& xMergedMenuBar )
 throw (::com::sun::star::uno::RuntimeException)
 {
 	implts_setInplaceMenuBar( xMergedMenuBar );
@@ -3743,7 +3743,7 @@
     return m_aDockingArea;
 }
 
-Reference< XDockingAreaAcceptor > SAL_CALL LayoutManager::getDockingAreaAcceptor()
+::com::sun::star::uno::Reference< XDockingAreaAcceptor > SAL_CALL LayoutManager::getDockingAreaAcceptor()
 throw (::com::sun::star::uno::RuntimeException)
 {
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
@@ -3751,7 +3751,7 @@
     return m_xDockingAreaAcceptor;
 }
 
-void SAL_CALL LayoutManager::setDockingAreaAcceptor( const Reference< ::com::sun::star::ui::XDockingAreaAcceptor >& xDockingAreaAcceptor )
+void SAL_CALL LayoutManager::setDockingAreaAcceptor( const ::com::sun::star::uno::Reference< ::com::sun::star::ui::XDockingAreaAcceptor >& xDockingAreaAcceptor )
 throw ( RuntimeException )
 {
  	/* SAFE AREA ----------------------------------------------------------------------------------------------- */
@@ -3766,7 +3766,7 @@
         m_aAsyncLayoutTimer.Stop();
 
     sal_Bool bAutomaticToolbars( m_bAutomaticToolbars );
-    std::vector< Reference< css::awt::XWindow > > oldDockingAreaWindows;
+    std::vector< ::com::sun::star::uno::Reference< css::awt::XWindow > > oldDockingAreaWindows;
 
     if ( !xDockingAreaAcceptor.is() )
         m_aAsyncLayoutTimer.Stop();
@@ -3774,9 +3774,9 @@
 	// Remove listener from old docking area acceptor
     if ( m_xDockingAreaAcceptor.is() )
     {
-        Reference< css::awt::XWindow > xWindow( m_xDockingAreaAcceptor->getContainerWindow() );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( m_xDockingAreaAcceptor->getContainerWindow() );
         if ( xWindow.is() && ( m_xFrame->getContainerWindow() != m_xContainerWindow || !xDockingAreaAcceptor.is() ) )
-            xWindow->removeWindowListener( Reference< css::awt::XWindowListener >( static_cast< OWeakObject * >( this ), UNO_QUERY ));
+            xWindow->removeWindowListener( ::com::sun::star::uno::Reference< css::awt::XWindowListener >( static_cast< OWeakObject * >( this ), UNO_QUERY ));
 
         oldDockingAreaWindows.push_back( m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP] );
         oldDockingAreaWindows.push_back( m_xDockAreaWindows[DockingArea_DOCKINGAREA_BOTTOM] );
@@ -3801,17 +3801,17 @@
     css::uno::Reference< css::awt::XWindow > xLeftDockWindow;
     css::uno::Reference< css::awt::XWindow > xRightDockWindow;
 
-    Reference< ::com::sun::star::ui::XDockingAreaAcceptor > xOldDockingAreaAcceptor( m_xDockingAreaAcceptor );
+    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XDockingAreaAcceptor > xOldDockingAreaAcceptor( m_xDockingAreaAcceptor );
     m_xDockingAreaAcceptor = xDockingAreaAcceptor;
     if ( m_xDockingAreaAcceptor.is() )
     {
         m_aDockingArea     = css::awt::Rectangle();
         m_xContainerWindow = m_xDockingAreaAcceptor->getContainerWindow();
-        m_xContainerWindow->addWindowListener( Reference< css::awt::XWindowListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+        m_xContainerWindow->addWindowListener( ::com::sun::star::uno::Reference< css::awt::XWindowListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
 
 		// we always must keep a connection to the window of our frame for resize events
 		if ( m_xContainerWindow != m_xFrame->getContainerWindow() )
-			m_xFrame->getContainerWindow()->addWindowListener( Reference< css::awt::XWindowListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+			m_xFrame->getContainerWindow()->addWindowListener( ::com::sun::star::uno::Reference< css::awt::XWindowListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
 
         // #i37884# set initial visibility state - in the plugin case the container window is already shown
         // and we get no notification anymore
@@ -3823,10 +3823,10 @@
         }
 
         css::uno::Reference< css::awt::XWindowPeer > xParent( m_xContainerWindow, UNO_QUERY );
-        xTopDockWindow = Reference< css::awt::XWindow >( implts_createToolkitWindow( xParent ), UNO_QUERY );
-        xBottomDockWindow = Reference< css::awt::XWindow >( implts_createToolkitWindow( xParent ), UNO_QUERY );
-        xLeftDockWindow = Reference< css::awt::XWindow >( implts_createToolkitWindow( xParent ), UNO_QUERY );
-        xRightDockWindow = Reference< css::awt::XWindow >( implts_createToolkitWindow( xParent ), UNO_QUERY );
+        xTopDockWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( implts_createToolkitWindow( xParent ), UNO_QUERY );
+        xBottomDockWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( implts_createToolkitWindow( xParent ), UNO_QUERY );
+        xLeftDockWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( implts_createToolkitWindow( xParent ), UNO_QUERY );
+        xRightDockWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( implts_createToolkitWindow( xParent ), UNO_QUERY );
         m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP]    = xTopDockWindow;
         m_xDockAreaWindows[DockingArea_DOCKINGAREA_BOTTOM] = xBottomDockWindow;
         m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT]   = xLeftDockWindow;
@@ -3919,7 +3919,7 @@
     {
         try
         {
-            xStatusBarWindow = Reference< css::awt::XWindow >(
+            xStatusBarWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >(
                                     aStatusBarElement.m_xUIElement->getRealInterface(),
                                UNO_QUERY );
         }
@@ -3943,15 +3943,15 @@
         UIElementVector::iterator pIter;
         for ( pIter = aUIElementVector.begin(); pIter != aUIElementVector.end(); pIter++ )
         {
-            Reference< XUIElement > xUIElement( pIter->m_xUIElement );
+            ::com::sun::star::uno::Reference< XUIElement > xUIElement( pIter->m_xUIElement );
             if ( xUIElement.is() )
             {
-                Reference< css::awt::XWindow > xWindow;
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow;
                 try
                 {
                     // We have to retreive the window reference with try/catch as it is
                     // possible that all elements has been disposed!
-                    xWindow = Reference< css::awt::XWindow >( xUIElement->getRealInterface(), UNO_QUERY );
+                    xWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( xUIElement->getRealInterface(), UNO_QUERY );
                 }
                 catch ( RuntimeException& )
                 {
@@ -4088,9 +4088,9 @@
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     ReadGuard aReadLock( m_aLock );
-    Reference< XFrame > xFrame = m_xFrame;
-    Reference< XURLTransformer > xURLTransformer = m_xURLTransformer;
-    Reference< XModel >          xModel;
+    ::com::sun::star::uno::Reference< XFrame > xFrame = m_xFrame;
+    ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer = m_xURLTransformer;
+    ::com::sun::star::uno::Reference< XModel >          xModel;
     sal_Bool    bInPlaceMenu = m_bInplaceMenuSet;
     aReadLock.unlock();
 	/* SAFE AREA ----------------------------------------------------------------------------------------------- */
@@ -4107,7 +4107,7 @@
     sal_Bool                                      bNotify( sal_False );
     OUString                                      aElementType;
     OUString                                      aElementName;
-    Reference< ::com::sun::star::ui::XUIElement > xUIElement;
+    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > xUIElement;
 
     implts_findElement( aName, aElementType, aElementName, xUIElement );
     bFound = xUIElement.is();
@@ -4124,15 +4124,15 @@
                 sal_Bool bVisible( sal_False );
                 if ( xUIElement.is() )
                 {
-                    Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
-                    Reference< css::awt::XDockableWindow > xDockWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xUIElement->getRealInterface(), UNO_QUERY );
                     if ( xDockWindow.is() && xWindow.is() )
                     {
                         try
                         {
-                            xDockWindow->addDockableWindowListener( Reference< css::awt::XDockableWindowListener >(
+                            xDockWindow->addDockableWindowListener( ::com::sun::star::uno::Reference< css::awt::XDockableWindowListener >(
                                 static_cast< OWeakObject * >( this ), UNO_QUERY ));
-                            xWindow->addWindowListener( Reference< css::awt::XWindowListener >(
+                            xWindow->addWindowListener( ::com::sun::star::uno::Reference< css::awt::XWindowListener >(
                                 static_cast< OWeakObject * >( this ), UNO_QUERY ));
                             xDockWindow->enableDocking( sal_True );
                         }
@@ -4201,9 +4201,9 @@
 		            if ( pWindow )
 		            {
 			            SystemWindow* pSysWindow = (SystemWindow *)pWindow;
-                        Reference< css::awt::XMenuBar > xMenuBar;
+                        ::com::sun::star::uno::Reference< css::awt::XMenuBar > xMenuBar;
 
-                        Reference< XPropertySet > xPropSet( m_xMenuBar, UNO_QUERY );
+                        ::com::sun::star::uno::Reference< XPropertySet > xPropSet( m_xMenuBar, UNO_QUERY );
                         if ( xPropSet.is() )
                         {
                             try
@@ -4282,7 +4282,7 @@
     OUString    aElementType;
     OUString    aElementName;
 
-    Reference< XComponent > xComponent;
+    ::com::sun::star::uno::Reference< XComponent > xComponent;
     if ( impl_parseResourceURL( aName, aElementType, aElementName ))
     {
         if ( aElementType.equalsIgnoreAsciiCaseAscii( "menubar" ) &&
@@ -4320,12 +4320,12 @@
             {
                 if ( pIter->m_aName == aName )
                 {
-                    xComponent = Reference< XComponent >( pIter->m_xUIElement, UNO_QUERY );
-                    Reference< XUIElement > xUIElement( pIter->m_xUIElement );
+                    xComponent = ::com::sun::star::uno::Reference< XComponent >( pIter->m_xUIElement, UNO_QUERY );
+                    ::com::sun::star::uno::Reference< XUIElement > xUIElement( pIter->m_xUIElement );
                     if ( xUIElement.is() )
                     {
-                        Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
-                        Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                        ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
 
                         rtl::OUString aAddonTbResourceName( RTL_CONSTASCII_USTRINGPARAM( "private:resource/toolbar/addon_" ));
                         if ( aName.indexOf( aAddonTbResourceName ) != 0 )
@@ -4333,7 +4333,7 @@
                             try
                             {
                                 if ( xWindow.is() )
-                                    xWindow->removeWindowListener( Reference< css::awt::XWindowListener >(
+                                    xWindow->removeWindowListener( ::com::sun::star::uno::Reference< css::awt::XWindowListener >(
                                         static_cast< OWeakObject * >( this ), UNO_QUERY ));
                             }
                             catch( Exception& )
@@ -4343,7 +4343,7 @@
                             try
                             {
                                 if ( xDockWindow.is() )
-                                    xDockWindow->removeDockableWindowListener( Reference< css::awt::XDockableWindowListener >(
+                                    xDockWindow->removeDockableWindowListener( ::com::sun::star::uno::Reference< css::awt::XDockableWindowListener >(
                                         static_cast< OWeakObject * >( this ), UNO_QUERY ));
                             }
                             catch ( Exception& )
@@ -4431,7 +4431,7 @@
                 {
                     // we need VCL here to pass special flags to Show()
                     vos::OGuard	aGuard( Application::GetSolarMutex() );
-                    Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
                     Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
                     if ( pWindow )
                     {
@@ -4463,9 +4463,9 @@
                     {
                         if ( pIter->m_xUIElement.is() )
                         {
-                            Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
-                            Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
-                            Reference< css::awt::XWindow2 > xContainerWindow( m_xContainerWindow, UNO_QUERY );
+                            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+                            ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                            ::com::sun::star::uno::Reference< css::awt::XWindow2 > xContainerWindow( m_xContainerWindow, UNO_QUERY );
 
                             sal_Bool bShowElement( pIter->m_bVisible &&
                                                    !pIter->m_bMasterHide &&
@@ -4506,7 +4506,7 @@
                 // Create toolbar on demand when it's visible
                 if ( !bResult )
                 {
-                    Reference< ::com::sun::star::ui::XUIElement > xUIElement;
+                    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > xUIElement;
                     if ( !bFound )
                     {
                         UIElement aNewToolbar( aElementName, aElementType, xUIElement );
@@ -4544,18 +4544,18 @@
     return bResult;
 }
 
-Reference< XUIElement > SAL_CALL LayoutManager::getElement( const ::rtl::OUString& aName )
+::com::sun::star::uno::Reference< XUIElement > SAL_CALL LayoutManager::getElement( const ::rtl::OUString& aName )
 throw (RuntimeException)
 {
     OUString                aElementType;
     OUString                aElementName;
-    Reference< XUIElement > xElement;
+    ::com::sun::star::uno::Reference< XUIElement > xElement;
 
     implts_findElement( aName, aElementType, aElementName, xElement );
     return xElement;
 }
 
-Sequence< Reference< ::com::sun::star::ui::XUIElement > > SAL_CALL LayoutManager::getElements()
+Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > > SAL_CALL LayoutManager::getElements()
 throw (::com::sun::star::uno::RuntimeException)
 {
     ReadGuard   aReadLock( m_aLock );
@@ -4575,7 +4575,7 @@
         bStatusBar = sal_True;
     }
 
-    Sequence< Reference< ::com::sun::star::ui::XUIElement > > aSeq( nSize );
+    Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > > aSeq( nSize );
 
     sal_Int32 nIndex = 0;
     UIElementVector::const_iterator pIter;
@@ -4652,8 +4652,8 @@
                 if ( pIter->m_aName == aName && pIter->m_xUIElement.is() )
                 {
                     UIElement aUIElement = *pIter;
-                    Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
-                    Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
 
                     sal_Bool bShowElement( !pIter->m_bMasterHide && m_bParentWindowVisible );
 
@@ -4767,8 +4767,8 @@
             {
                 if ( pIter->m_aName == aName && pIter->m_xUIElement.is() )
                 {
-                    Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
-                    Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
 
                     if ( xWindow.is() && xDockWindow.is() )
                     {
@@ -4810,8 +4810,8 @@
         {
             try
             {
-                Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                 if ( xWindow.is() &&  xDockWindow.is() )
                 {
                     if ( DockingArea != DockingArea_DOCKINGAREA_DEFAULT )
@@ -4944,8 +4944,8 @@
         {
             try
             {
-                Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                 if ( xWindow.is() &&  xDockWindow.is() )
                 {
                     if ( !xDockWindow->isFloating() )
@@ -4975,8 +4975,8 @@
         {
             try
             {
-                Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                 Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
                 if ( pWindow &&
                      pWindow->IsVisible() &&
@@ -5018,8 +5018,8 @@
         {
             try
             {
-                Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                 Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
                 if ( pWindow &&
                      pWindow->IsVisible() &&
@@ -5061,9 +5061,9 @@
         {
             try
             {
-                Reference< css::awt::XWindow >  xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XWindow2 > xWindow2( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow >  xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow2 > xWindow2( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
 
                 if ( xWindow.is() && xWindow2.is() && xDockWindow.is() )
                 {
@@ -5092,8 +5092,8 @@
         {
             try
             {
-                Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
 
                 if ( xWindow.is() && xDockWindow.is() )
                 {
@@ -5137,9 +5137,9 @@
         {
             try
             {
-                Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XWindow2 > xWindow2( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow2 > xWindow2( aUIElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
 
                 if ( xWindow.is() && xWindow2.is() && xDockWindow.is() )
                 {
@@ -5213,7 +5213,7 @@
         {
             if ( m_aStatusBarElement.m_xUIElement.is() )
             {
-                Reference< css::awt::XWindow > xWindow(
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow(
                     m_aStatusBarElement.m_xUIElement->getRealInterface(), UNO_QUERY );
                 if ( xWindow.is() )
                 {
@@ -5240,7 +5240,7 @@
             {
                 if ( pIter->m_aName == aName && pIter->m_xUIElement.is() )
                 {
-                    Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+                    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
                     if ( xWindow.is() )
                     {
                         Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
@@ -5267,10 +5267,10 @@
     {
         if ( pIter->m_aName == aName && pIter->m_xUIElement.is() )
         {
-            Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
             if ( xWindow.is() )
             {
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                 if ( xDockWindow.is() )
                     return xDockWindow->isFloating();
             }
@@ -5290,10 +5290,10 @@
     {
         if ( pIter->m_aName == aName && pIter->m_xUIElement.is() )
         {
-            Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
             if ( xWindow.is() )
             {
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                 if ( xDockWindow.is() )
                     return !xDockWindow->isFloating();
             }
@@ -5314,10 +5314,10 @@
         if (( pIter->m_aName == ResourceURL ) &&
             ( pIter->m_xUIElement.is() ))
         {
-            Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
             if ( xWindow.is() )
             {
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                 if ( xDockWindow.is() )
                     return xDockWindow->isLocked();
             }
@@ -5337,7 +5337,7 @@
     {
         if ( pIter->m_aName == aName && pIter->m_xUIElement.is() )
         {
-            Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
             if ( xWindow.is() )
             {
                 Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
@@ -5368,8 +5368,8 @@
     {
         if ( pIter->m_aName == aName && pIter->m_xUIElement.is() )
         {
-            Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
-            Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( pIter->m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
             if ( xWindow.is() && xDockWindow.is() )
             {
                 css::awt::Point aPos;
@@ -5462,8 +5462,8 @@
 
     sal_Bool bNoLock( sal_False );
     css::awt::Rectangle aCurrBorderSpace;
-    Reference< css::awt::XWindow > xContainerWindow;
-    Reference< XDockingAreaAcceptor > xDockingAreaAcceptor;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow;
+    ::com::sun::star::uno::Reference< XDockingAreaAcceptor > xDockingAreaAcceptor;
 
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     ReadGuard aReadLock( m_aLock );
@@ -5677,7 +5677,7 @@
 
             vos::OGuard	aGuard( Application::GetSolarMutex() );
             {
-                Reference< css::awt::XWindow > xWindow = rRowColumnWindowData.aRowColumnWindows[i];
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow = rRowColumnWindowData.aRowColumnWindows[i];
                 Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
                 if ( pWindow && pWindow->GetType() == WINDOW_TOOLBOX )
                     aMinSize = ((ToolBox *)pWindow)->CalcMinimumWindowSizePixel();
@@ -5747,7 +5747,7 @@
     vos::OGuard	aGuard( Application::GetSolarMutex() );
     for ( sal_Int32 i = 0; i < sal_Int32( rRowColumnWindowData.aRowColumnWindows.size() ); i++ )
     {
-        Reference< css::awt::XWindow > xWindow = rRowColumnWindowData.aRowColumnWindows[i];
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow = rRowColumnWindowData.aRowColumnWindows[i];
         Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
         Window* pOldParentWindow = pWindow->GetParent();
 
@@ -5796,12 +5796,12 @@
     sal_Bool bStatusBarVisible( isElementVisible( m_aStatusBarAlias ));
     sal_Bool bProgressBarVisible( isElementVisible( m_aProgressBarAlias ));
     sal_Bool bVisible = m_bVisible;
-    Reference< XUIElement > xStatusBar = m_aStatusBarElement.m_xUIElement;
-    Reference< XUIElement > xProgressBar = m_aProgressBarElement.m_xUIElement;
+    ::com::sun::star::uno::Reference< XUIElement > xStatusBar = m_aStatusBarElement.m_xUIElement;
+    ::com::sun::star::uno::Reference< XUIElement > xProgressBar = m_aProgressBarElement.m_xUIElement;
 
-    Reference< css::awt::XWindow > xWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow;
     if ( bStatusBarVisible && bVisible && xStatusBar.is() )
-        xWindow = Reference< css::awt::XWindow >( xStatusBar->getRealInterface(), UNO_QUERY );
+        xWindow = ::com::sun::star::uno::Reference< css::awt::XWindow >( xStatusBar->getRealInterface(), UNO_QUERY );
     else if ( xProgressBar.is() && !xStatusBar.is() && bProgressBarVisible )
     {
         ProgressBarWrapper* pWrapper = (ProgressBarWrapper*)xProgressBar.get();
@@ -5821,8 +5821,8 @@
 
 css::awt::Rectangle LayoutManager::implts_calcDockingAreaSizes()
 {
-    Reference< css::awt::XWindow > xContainerWindow;
-    Reference< XDockingAreaAcceptor > xDockingAreaAcceptor;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow;
+    ::com::sun::star::uno::Reference< XDockingAreaAcceptor > xDockingAreaAcceptor;
 
     ReadGuard aReadLock( m_aLock );
     xContainerWindow = m_xContainerWindow;
@@ -5844,11 +5844,11 @@
 
         for ( pConstIter = aWindowVector.begin(); pConstIter != aWindowVector.end(); pConstIter++ )
         {
-            Reference< XUIElement > xUIElement( pConstIter->m_xUIElement, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XUIElement > xUIElement( pConstIter->m_xUIElement, UNO_QUERY );
             if ( xUIElement.is() )
             {
-                Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
-                Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
                 if ( xWindow.is() && xDockWindow.is() )
                 {
                     vos::OGuard	aGuard( Application::GetSolarMutex() );
@@ -5928,7 +5928,7 @@
 
 void LayoutManager::implts_setDockingAreaWindowSizes( const css::awt::Rectangle& rBorderSpace )
 {
-    Reference< css::awt::XWindow > xContainerWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow;
 
     ReadGuard aReadLock( m_aLock );
     xContainerWindow = m_xContainerWindow;
@@ -5947,7 +5947,7 @@
     {
         // Top docking area window
         aReadLock.lock();
-        Reference< css::awt::XWindow > xDockAreaWindow( m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP] );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xDockAreaWindow( m_xDockAreaWindows[DockingArea_DOCKINGAREA_TOP] );
         aReadLock.unlock();
 
         xDockAreaWindow->setPosSize( 0, 0, aContainerClientSize.Width, rBorderSpace.Y, css::awt::PosSize::POSSIZE );
@@ -5962,7 +5962,7 @@
         sal_Int32 nHeight = ( nBottomPos == 0 ) ? 0 : rBorderSpace.Height;
 
         aReadLock.lock();
-        Reference< css::awt::XWindow > xDockAreaWindow( m_xDockAreaWindows[DockingArea_DOCKINGAREA_BOTTOM] );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xDockAreaWindow( m_xDockAreaWindows[DockingArea_DOCKINGAREA_BOTTOM] );
         aReadLock.unlock();
 
         xDockAreaWindow->setPosSize( 0, nBottomPos, aContainerClientSize.Width, nHeight, css::awt::PosSize::POSSIZE );
@@ -5975,7 +5975,7 @@
     {
         // Left docking area window
         aReadLock.lock();
-        Reference< css::awt::XWindow > xDockAreaWindow( m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT] );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xDockAreaWindow( m_xDockAreaWindows[DockingArea_DOCKINGAREA_LEFT] );
         aReadLock.unlock();
 
         // We also have to change our right docking area window if the top or bottom area has changed. They have a higher priority!
@@ -5988,7 +5988,7 @@
     {
         // Right docking area window
         aReadLock.lock();
-        Reference< css::awt::XWindow > xDockAreaWindow( m_xDockAreaWindows[DockingArea_DOCKINGAREA_RIGHT] );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xDockAreaWindow( m_xDockAreaWindows[DockingArea_DOCKINGAREA_RIGHT] );
         aReadLock.unlock();
 
         // We also have to change our right docking area window if the top or bottom area has changed. They have a higher priority!
@@ -6016,7 +6016,7 @@
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
     sal_Bool bShowCloser = m_bMenuBarCloser;
-    Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
     aWriteLock.unlock();
 
     if ( xContainerWindow.is() )
@@ -6054,7 +6054,7 @@
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
     sal_Bool bMenuVisible( m_bMenuVisible );
-    Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
 
     MenuBar* pSetMenuBar = 0;
     if ( m_xInplaceMenuBar.is() )
@@ -6161,7 +6161,7 @@
         m_eSymbolsStyle = eSymbolsStyle;
         aWriteLock.unlock();
 
-        std::vector< Reference< XUpdatable > > aToolBarVector;
+        std::vector< ::com::sun::star::uno::Reference< XUpdatable > > aToolBarVector;
 
         aReadLock.lock();
         {
@@ -6169,14 +6169,14 @@
             for ( pIter = m_aUIElements.begin(); pIter != m_aUIElements.end(); pIter++ )
             {
                 if ( pIter->m_xUIElement.is() )
-                    aToolBarVector.push_back( Reference< XUpdatable >( pIter->m_xUIElement, UNO_QUERY ));
+                    aToolBarVector.push_back( ::com::sun::star::uno::Reference< XUpdatable >( pIter->m_xUIElement, UNO_QUERY ));
             }
         }
         aReadLock.unlock();
 
         lock();
         {
-            std::vector< Reference< XUpdatable > >::iterator pIter;
+            std::vector< ::com::sun::star::uno::Reference< XUpdatable > >::iterator pIter;
             for ( pIter = aToolBarVector.begin(); pIter != aToolBarVector.end(); pIter++ )
             {
                 if ( (*pIter).is() )
@@ -6204,8 +6204,8 @@
     UIElement   aUIElement;
 
     ReadGuard aReadGuard( m_aLock );
-    Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
-    Reference< css::awt::XWindow2 > xWindow( e.Source, UNO_QUERY );
+    ::com::sun::star::uno::Reference< css::awt::XWindow > xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< css::awt::XWindow2 > xWindow( e.Source, UNO_QUERY );
     aReadGuard.unlock();
 
     Window* pContainerWindow( 0 );
@@ -6222,7 +6222,7 @@
     if ( bWinFound && xWindow.is() )
     {
         css::awt::Rectangle aRect;
-        Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+        ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
         if ( xDockWindow->isFloating() )
         {
             css::awt::Rectangle aPos  = xWindow->getPosSize();
@@ -6269,13 +6269,13 @@
     const sal_Int32 MAGNETIC_DISTANCE_DOCK   = 20;
 
     css::awt::DockingData                  aDockingData;
-    Reference< css::awt::XDockableWindow > xDockWindow( e.Source, UNO_QUERY );
-    Reference< css::awt::XWindow >         xWindow( e.Source, UNO_QUERY );
-    Reference< css::awt::XWindow >         xTopDockingWindow;
-    Reference< css::awt::XWindow >         xLeftDockingWindow;
-    Reference< css::awt::XWindow >         xRightDockingWindow;
-    Reference< css::awt::XWindow >         xBottomDockingWindow;
-    Reference< css::awt::XWindow >         xContainerWindow;
+    ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( e.Source, UNO_QUERY );
+    ::com::sun::star::uno::Reference< css::awt::XWindow >         xWindow( e.Source, UNO_QUERY );
+    ::com::sun::star::uno::Reference< css::awt::XWindow >         xTopDockingWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow >         xLeftDockingWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow >         xRightDockingWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow >         xBottomDockingWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow >         xContainerWindow;
     UIElement                              aUIDockingElement;
     DockingOperation                       eDockingOperation( DOCKOP_ON_COLROW );
     ::Size                                 aStatusBarSize;
@@ -6480,7 +6480,7 @@
         if ( aUIDockingElement.m_bFloating )
         {
             // Write last position into position data
-            Reference< css::awt::XWindow > xWindow( aUIDockingElement.m_xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( aUIDockingElement.m_xUIElement->getRealInterface(), UNO_QUERY );
             rUIElement.m_aFloatingData = aUIDockingElement.m_aFloatingData;
             css::awt::Rectangle aTmpRect = xWindow->getPosSize();
             rUIElement.m_aFloatingData.m_aPos = ::Point( aTmpRect.X, aTmpRect.Y );
@@ -6516,7 +6516,7 @@
     if ( bDockingInProgress )
     {
         vos::OGuard	aGuard( Application::GetSolarMutex() );
-        Window*  pWindow = VCLUnoHelper::GetWindow( Reference< css::awt::XWindow >( e.Source, UNO_QUERY ));
+        Window*  pWindow = VCLUnoHelper::GetWindow( ::com::sun::star::uno::Reference< css::awt::XWindow >( e.Source, UNO_QUERY ));
         ToolBox* pToolBox = 0;
         if ( pWindow && pWindow->GetType() == WINDOW_TOOLBOX )
             pToolBox = (ToolBox *)pWindow;
@@ -6569,14 +6569,14 @@
 
     UIElement                         aUIDockingElement;
     sal_Bool                          bWinFound( implts_findElement( e.Source, aUIDockingElement ) );
-    Reference< css::awt::XWindow >    xWindow( e.Source, UNO_QUERY );
+    ::com::sun::star::uno::Reference< css::awt::XWindow >    xWindow( e.Source, UNO_QUERY );
 
     if ( bWinFound && xWindow.is() )
     {
         if ( !bDockingInProgress )
         {
             css::awt::Rectangle aRect;
-            Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
+            ::com::sun::star::uno::Reference< css::awt::XDockableWindow > xDockWindow( xWindow, UNO_QUERY );
             if ( xDockWindow->isFloating() )
             {
                 {
@@ -6622,11 +6622,11 @@
 
     Window*  pWindow( 0 );
     ToolBox* pToolBox( 0 );
-    Reference< css::awt::XWindow2 > xWindow;
+    ::com::sun::star::uno::Reference< css::awt::XWindow2 > xWindow;
 
     {
         vos::OGuard	aGuard( Application::GetSolarMutex() );
-        xWindow = Reference< css::awt::XWindow2 >( e.Source, UNO_QUERY );
+        xWindow = ::com::sun::star::uno::Reference< css::awt::XWindow2 >( e.Source, UNO_QUERY );
         pWindow = VCLUnoHelper::GetWindow( xWindow );
 
         if ( pWindow && pWindow->GetType() == WINDOW_TOOLBOX )
@@ -6758,10 +6758,10 @@
     WriteGuard aWriteLock( m_aLock );
     for ( pIter = m_aUIElements.begin(); pIter != m_aUIElements.end(); pIter++ )
     {
-        Reference< XUIElement > xUIElement( pIter->m_xUIElement );
+        ::com::sun::star::uno::Reference< XUIElement > xUIElement( pIter->m_xUIElement );
         if ( xUIElement.is() )
         {
-            Reference< XInterface > xIfac( xUIElement->getRealInterface(), UNO_QUERY );
+            ::com::sun::star::uno::Reference< XInterface > xIfac( xUIElement->getRealInterface(), UNO_QUERY );
             if ( xIfac == e.Source )
             {
                 aName = pIter->m_aName;
@@ -6844,10 +6844,10 @@
 
     // Request to set docking area space again.
     css::awt::Rectangle               aDockingArea( m_aDockingArea );
-    Reference< XDockingAreaAcceptor > xDockingAreaAcceptor( m_xDockingAreaAcceptor );
-    Reference< css::awt::XWindow >    xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< XDockingAreaAcceptor > xDockingAreaAcceptor( m_xDockingAreaAcceptor );
+    ::com::sun::star::uno::Reference< css::awt::XWindow >    xContainerWindow( m_xContainerWindow );
 
-    Reference< XInterface > xIfac( xContainerWindow, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac( xContainerWindow, UNO_QUERY );
     if ( xIfac == aEvent.Source && m_bVisible )
     {
         // We have to call our resize handler at least once synchronously, as some
@@ -6867,7 +6867,7 @@
     {
 		// the container window of my DockingAreaAcceptor is not the same as of my frame
 		// I still have to resize my frames' window as nobody else will do it
-        Reference< css::awt::XWindow > xComponentWindow( m_xFrame->getComponentWindow() );
+        ::com::sun::star::uno::Reference< css::awt::XWindow > xComponentWindow( m_xFrame->getComponentWindow() );
         if( xComponentWindow.is() == sal_True )
         {
             css::uno::Reference< css::awt::XDevice > xDevice( m_xFrame->getContainerWindow(), css::uno::UNO_QUERY );
@@ -6901,7 +6901,7 @@
             {
                 if ( aUIElement.m_bFloating )
                     implts_writeNewStateData( aUIElement.m_aName,
-                                            Reference< css::awt::XWindow >( aEvent.Source, UNO_QUERY ));
+                                            ::com::sun::star::uno::Reference< css::awt::XWindow >( aEvent.Source, UNO_QUERY ));
                 else
                     doLayout();
             }
@@ -6919,12 +6919,12 @@
     ReadGuard aReadLock( m_aLock );
 
     // Request to set docking area space again.
-    Reference< css::awt::XWindow >  xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< css::awt::XWindow >  xContainerWindow( m_xContainerWindow );
     bool                        bParentWindowVisible( m_bParentWindowVisible );
     aReadLock.unlock();
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
 
-    Reference< XInterface > xIfac( xContainerWindow, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac( xContainerWindow, UNO_QUERY );
     if ( xIfac == aEvent.Source )
     {
         bool bSetVisible = false;
@@ -6950,12 +6950,12 @@
     ReadGuard aReadLock( m_aLock );
 
     // Request to set docking area space again.
-    Reference< css::awt::XWindow >  xContainerWindow( m_xContainerWindow );
+    ::com::sun::star::uno::Reference< css::awt::XWindow >  xContainerWindow( m_xContainerWindow );
     bool                        bParentWindowVisible( m_bParentWindowVisible );
     aReadLock.unlock();
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
 
-    Reference< XInterface > xIfac( xContainerWindow, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac( xContainerWindow, UNO_QUERY );
     if ( xIfac == aEvent.Source )
     {
         bool bSetInvisible = false;
@@ -7056,7 +7056,7 @@
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
     WriteGuard aWriteLock( m_aLock );
 
-    if ( rEvent.Source == Reference< XInterface >( m_xFrame, UNO_QUERY ))
+    if ( rEvent.Source == ::com::sun::star::uno::Reference< XInterface >( m_xFrame, UNO_QUERY ))
     {
         // Our frame gets disposed, release all our references that depends on a working
         // frame reference.
@@ -7090,9 +7090,9 @@
         {
             try
             {
-                Reference< XUIConfiguration > xModuleCfgMgr( m_xModuleCfgMgr, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XUIConfiguration > xModuleCfgMgr( m_xModuleCfgMgr, UNO_QUERY );
                 xModuleCfgMgr->removeConfigurationListener(
-                    Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+                    ::com::sun::star::uno::Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
             }
             catch ( Exception& )
             {
@@ -7103,9 +7103,9 @@
         {
             try
             {
-                Reference< XUIConfiguration > xDocCfgMgr( m_xDocCfgMgr, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XUIConfiguration > xDocCfgMgr( m_xDocCfgMgr, UNO_QUERY );
                 xDocCfgMgr->removeConfigurationListener(
-                    Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
+                    ::com::sun::star::uno::Reference< XUIConfigurationListener >( static_cast< OWeakObject* >( this ), UNO_QUERY ));
             }
             catch ( Exception& )
             {
@@ -7117,11 +7117,11 @@
         m_xFrame.clear();
         delete m_pGlobalSettings;
         m_pGlobalSettings = 0;
-		m_xDockingAreaAcceptor = Reference< ::com::sun::star::ui::XDockingAreaAcceptor >();
+		m_xDockingAreaAcceptor = ::com::sun::star::uno::Reference< ::com::sun::star::ui::XDockingAreaAcceptor >();
 
         bDisposeAndClear = sal_True;
     }
-    else if ( rEvent.Source == Reference< XInterface >( m_xContainerWindow, UNO_QUERY ))
+    else if ( rEvent.Source == ::com::sun::star::uno::Reference< XInterface >( m_xContainerWindow, UNO_QUERY ))
     {
         // Our container window gets disposed. Remove all user interface elements.
         m_aUIElements.clear();
@@ -7135,11 +7135,11 @@
         m_xInplaceMenuBar.clear();
         m_xContainerWindow.clear();
     }
-    else if ( rEvent.Source == Reference< XInterface >( m_xDocCfgMgr, UNO_QUERY ))
+    else if ( rEvent.Source == ::com::sun::star::uno::Reference< XInterface >( m_xDocCfgMgr, UNO_QUERY ))
     {
         m_xDocCfgMgr.clear();
     }
-    else if ( rEvent.Source == Reference< XInterface >( m_xModuleCfgMgr , UNO_QUERY ))
+    else if ( rEvent.Source == ::com::sun::star::uno::Reference< XInterface >( m_xModuleCfgMgr , UNO_QUERY ))
     {
         m_xModuleCfgMgr.clear();
     }
@@ -7163,21 +7163,21 @@
 
     OUString                aElementType;
     OUString                aElementName;
-    Reference< XUIElement > xElement;
-    Reference< XFrame >     xFrame( m_xFrame );
+    ::com::sun::star::uno::Reference< XUIElement > xElement;
+    ::com::sun::star::uno::Reference< XFrame >     xFrame( m_xFrame );
 
     if ( m_xFrame.is() )
     {
         implts_findElement( Event.ResourceURL, aElementType, aElementName, xElement );
 
-        Reference< XUIElementSettings > xElementSettings( xElement, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XUIElementSettings > xElementSettings( xElement, UNO_QUERY );
         if ( xElementSettings.is() )
         {
             OUString aConfigSourcePropName( RTL_CONSTASCII_USTRINGPARAM( "ConfigurationSource" ));
-            Reference< XPropertySet > xPropSet( xElementSettings, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XPropertySet > xPropSet( xElementSettings, UNO_QUERY );
             if ( xPropSet.is() )
             {
-                if ( Event.Source == Reference< XInterface >( m_xDocCfgMgr, UNO_QUERY ))
+                if ( Event.Source == ::com::sun::star::uno::Reference< XInterface >( m_xDocCfgMgr, UNO_QUERY ))
                     xPropSet->setPropertyValue( aConfigSourcePropName, makeAny( m_xDocCfgMgr ));
             }
             xElementSettings->updateSettings();
@@ -7189,17 +7189,17 @@
             {
                 // custom toolbar must be directly created, shown and layouted!
                 createElement( Event.ResourceURL );
-                Reference< XUIElement > xUIElement = getElement( Event.ResourceURL );
+                ::com::sun::star::uno::Reference< XUIElement > xUIElement = getElement( Event.ResourceURL );
                 if ( xUIElement.is() )
                 {
-                    Reference< XUIConfigurationManager > xCfgMgr;
-                    Reference< XPropertySet >            xPropSet;
+                    ::com::sun::star::uno::Reference< XUIConfigurationManager > xCfgMgr;
+                    ::com::sun::star::uno::Reference< XPropertySet >            xPropSet;
                     OUString                             aUIName;
 
                     try
                     {
-                        xCfgMgr  = Reference< XUIConfigurationManager >( Event.Source, UNO_QUERY );
-                        xPropSet = Reference< XPropertySet >( xCfgMgr->getSettings( Event.ResourceURL, sal_False ), UNO_QUERY );
+                        xCfgMgr  = ::com::sun::star::uno::Reference< XUIConfigurationManager >( Event.Source, UNO_QUERY );
+                        xPropSet = ::com::sun::star::uno::Reference< XPropertySet >( xCfgMgr->getSettings( Event.ResourceURL, sal_False ), UNO_QUERY );
 
                         if ( xPropSet.is() )
                             xPropSet->getPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM( "UIName" ))) >>= aUIName;
@@ -7216,7 +7216,7 @@
 
                     {
                         vos::OGuard	aGuard( Application::GetSolarMutex() );
-                        Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
+                        ::com::sun::star::uno::Reference< css::awt::XWindow > xWindow( xUIElement->getRealInterface(), UNO_QUERY );
                         Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
                         if ( pWindow  )
                             pWindow->SetText( aUIName );
@@ -7236,20 +7236,20 @@
 
     OUString                aElementType;
     OUString                aElementName;
-    Reference< XUIElement > xUIElement;
-    Reference< XFrame >     xFrame( m_xFrame );
+    ::com::sun::star::uno::Reference< XUIElement > xUIElement;
+    ::com::sun::star::uno::Reference< XFrame >     xFrame( m_xFrame );
 
     if ( m_xFrame.is() )
     {
         implts_findElement( Event.ResourceURL, aElementType, aElementName, xUIElement );
 
-        Reference< XUIElementSettings > xElementSettings( xUIElement, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XUIElementSettings > xElementSettings( xUIElement, UNO_QUERY );
         if ( xElementSettings.is() )
         {
             bool                        bNoSettings( false );
             OUString                    aConfigSourcePropName( RTL_CONSTASCII_USTRINGPARAM( "ConfigurationSource" ));
-            Reference< XInterface >     xElementCfgMgr;
-            Reference< XPropertySet >   xPropSet( xElementSettings, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XInterface >     xElementCfgMgr;
+            ::com::sun::star::uno::Reference< XPropertySet >   xPropSet( xElementSettings, UNO_QUERY );
 
             if ( xPropSet.is() )
                 xPropSet->getPropertyValue( aConfigSourcePropName ) >>= xElementCfgMgr;
@@ -7261,7 +7261,7 @@
             if ( Event.Source == xElementCfgMgr )
             {
                 // Same UI configuration manager where our element has its settings
-                if ( Event.Source == Reference< XInterface >( m_xDocCfgMgr, UNO_QUERY ))
+                if ( Event.Source == ::com::sun::star::uno::Reference< XInterface >( m_xDocCfgMgr, UNO_QUERY ))
                 {
                     // document settings removed
                     if ( m_xModuleCfgMgr->hasSettings( Event.ResourceURL ))
@@ -7288,7 +7288,7 @@
                     if ( pWindow && !m_bInplaceMenuSet )
                         ((SystemWindow *)pWindow)->SetMenuBar( 0 );
 
-                    Reference< XComponent > xComp( m_xMenuBar, UNO_QUERY );
+                    ::com::sun::star::uno::Reference< XComponent > xComp( m_xMenuBar, UNO_QUERY );
                     if ( xComp.is() )
                         xComp->dispose();
                     m_xMenuBar.clear();
@@ -7308,19 +7308,19 @@
 
     OUString                aElementType;
     OUString                aElementName;
-    Reference< XUIElement > xUIElement;
-    Reference< XFrame >     xFrame( m_xFrame );
+    ::com::sun::star::uno::Reference< XUIElement > xUIElement;
+    ::com::sun::star::uno::Reference< XFrame >     xFrame( m_xFrame );
 
     if ( m_xFrame.is() )
     {
         implts_findElement( Event.ResourceURL, aElementType, aElementName, xUIElement );
 
-        Reference< XUIElementSettings > xElementSettings( xUIElement, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XUIElementSettings > xElementSettings( xUIElement, UNO_QUERY );
         if ( xElementSettings.is() )
         {
             OUString                    aConfigSourcePropName( RTL_CONSTASCII_USTRINGPARAM( "ConfigurationSource" ));
-            Reference< XInterface >     xElementCfgMgr;
-            Reference< XPropertySet >   xPropSet( xElementSettings, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XInterface >     xElementCfgMgr;
+            ::com::sun::star::uno::Reference< XPropertySet >   xPropSet( xElementSettings, UNO_QUERY );
 
             if ( xPropSet.is() )
                 xPropSet->getPropertyValue( aConfigSourcePropName ) >>= xElementCfgMgr;
@@ -7489,7 +7489,7 @@
     static const com::sun::star::beans::Property pProperties[] =
 	{
         com::sun::star::beans::Property( LAYOUTMANAGER_PROPNAME_AUTOMATICTOOLBARS, LAYOUTMANAGER_PROPHANDLE_AUTOMATICTOOLBARS, ::getCppuType((const sal_Bool*)NULL), com::sun::star::beans::PropertyAttribute::TRANSIENT  ),
-        com::sun::star::beans::Property( LAYOUTMANAGER_PROPNAME_MENUBARCLOSER, LAYOUTMANAGER_PROPHANDLE_MENUBARCLOSER, ::getCppuType((const Reference< XStatusListener >*)NULL), com::sun::star::beans::PropertyAttribute::TRANSIENT  ),
+        com::sun::star::beans::Property( LAYOUTMANAGER_PROPNAME_MENUBARCLOSER, LAYOUTMANAGER_PROPHANDLE_MENUBARCLOSER, ::getCppuType((const ::com::sun::star::uno::Reference< XStatusListener >*)NULL), com::sun::star::beans::PropertyAttribute::TRANSIENT  ),
         com::sun::star::beans::Property( LAYOUTMANAGER_PROPNAME_REFRESHVISIBILITY, LAYOUTMANAGER_PROPHANDLE_REFRESHVISIBILITY, ::getCppuType((const sal_Bool*)NULL), com::sun::star::beans::PropertyAttribute::TRANSIENT  )
 	};
 	// Use it to initialize sequence!
--- framework/source/services/license.cxx.gcc43~	2007-04-26 10:16:26.000000000 +0200
+++ framework/source/services/license.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -132,7 +132,7 @@
 //*****************************************************************************************************************
 //	constructor
 //*****************************************************************************************************************
-License::License( const Reference< XMultiServiceFactory >& xFactory )
+License::License( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xFactory )
 		//	Init baseclasses first
 		//	Attention:
 		//		Don't change order of initialization!
@@ -189,8 +189,8 @@
 IMPL_STATIC_LINK_NOINSTANCE( License, Terminate, void*, EMPTYARG )
 {
     /*
-    Reference< XMultiServiceFactory > xFactory = comphelper::getProcessServiceFactory();
-    Reference< XDesktop > xDesktop(xFactory->createInstance(
+    ::com::sun::star::uno::Reference< XMultiServiceFactory > xFactory = comphelper::getProcessServiceFactory();
+    ::com::sun::star::uno::Reference< XDesktop > xDesktop(xFactory->createInstance(
         OUString::createFromAscii("com.sun.star.frame.Desktop")), UNO_QUERY);
     if (xDesktop.is())
         xDesktop->terminate();    
@@ -341,14 +341,14 @@
         OUString sReadSrvc   = OUString::createFromAscii("com.sun.star.configuration.ConfigurationAccess");
         
         // get configuration provider
-        Reference< XMultiServiceFactory > theConfigProvider = Reference< XMultiServiceFactory >(
+        ::com::sun::star::uno::Reference< XMultiServiceFactory > theConfigProvider = ::com::sun::star::uno::Reference< XMultiServiceFactory >(
         m_xFactory->createInstance(sConfigSrvc), UNO_QUERY_THROW);
         Sequence< Any > theArgs(1);
         NamedValue v;
         v.Name = OUString::createFromAscii("NodePath");
         v.Value <<= OUString::createFromAscii("org.openoffice.Setup/Office");
         theArgs[0] <<= v;
-        Reference< XPropertySet > pset = Reference< XPropertySet >(
+        ::com::sun::star::uno::Reference< XPropertySet > pset = ::com::sun::star::uno::Reference< XPropertySet >(
             theConfigProvider->createInstanceWithArguments(sAccessSrvc, theArgs), UNO_QUERY_THROW);
         Any result = pset->getPropertyValue(OUString::createFromAscii("ooLicenseAcceptDate"));
         
@@ -393,7 +393,7 @@
             // write org.openoffice.Setup/ooLicenseAcceptDate
             aAcceptDate = _getCurrentDateString();
             pset->setPropertyValue(OUString::createFromAscii("ooLicenseAcceptDate"), makeAny(aAcceptDate));
-            Reference< XChangesBatch >(pset, UNO_QUERY_THROW)->commitChanges();
+            ::com::sun::star::uno::Reference< XChangesBatch >(pset, UNO_QUERY_THROW)->commitChanges();
 
             // enable quickstarter
             sal_Bool bQuickstart( sal_True );
@@ -402,7 +402,7 @@
             aSeq[0] <<= bQuickstart;
             aSeq[1] <<= bAutostart;
 
-            Reference < XInitialization > xQuickstart( ::comphelper::getProcessServiceFactory()->createInstance(
+            ::com::sun::star::uno::Reference < XInitialization > xQuickstart( ::comphelper::getProcessServiceFactory()->createInstance(
                 OUString::createFromAscii( "com.sun.star.office.Quickstart" )),UNO_QUERY );
             if ( xQuickstart.is() )
                 xQuickstart->initialize( aSeq );
--- framework/source/services/sessionlistener.cxx.gcc43~	2007-11-06 00:26:02.000000000 +0100
+++ framework/source/services/sessionlistener.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -321,12 +321,12 @@
 
 void SessionListener::_requestInteraction()
 {
-    m_rSessionManager->queryInteraction(Reference<XSessionManagerListener>(this));
+    m_rSessionManager->queryInteraction(::com::sun::star::uno::Reference<XSessionManagerListener>(this));
 }
   
 void SessionListener::_finishInteraction( sal_Bool bCancelShutdown )
 {
-    m_rSessionManager->interactionDone(Reference< XSessionManagerListener >(this), bCancelShutdown );
+    m_rSessionManager->interactionDone(::com::sun::star::uno::Reference< XSessionManagerListener >(this), bCancelShutdown );
 }
 
 }
--- framework/source/services/substitutepathvars.cxx.gcc43~	2006-09-16 16:12:15.000000000 +0200
+++ framework/source/services/substitutepathvars.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -130,6 +130,8 @@
 
 #include <comphelper/configurationhelper.hxx>
 
+#include <cstring>
+
 //_________________________________________________________________________________________________________________
 //	Defines
 //_________________________________________________________________________________________________________________
--- framework/source/services/urltransformer.cxx.gcc43~	2007-04-03 15:50:24.000000000 +0200
+++ framework/source/services/urltransformer.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -104,7 +104,7 @@
 //*****************************************************************************************************************
 //	constructor
 //*****************************************************************************************************************
-URLTransformer::URLTransformer( const Reference< XMultiServiceFactory >& xFactory )
+URLTransformer::URLTransformer( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xFactory )
 		//	Init baseclasses first
 		//	Attention:
 		//		Don't change order of initialization!
--- framework/source/uiconfiguration/moduleuicfgsupplier.cxx.gcc43~	2006-09-16 16:16:00.000000000 +0200
+++ framework/source/uiconfiguration/moduleuicfgsupplier.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -116,7 +116,7 @@
         FWK_DECLARE_XINTERFACE
 	  FWK_DECLARE_XTYPEPROVIDER
 
-        RootStorageWrapper( const Reference< XTransactedObject >& xRootCommit ) : m_xRootCommit( xRootCommit ) {}
+        RootStorageWrapper( const ::com::sun::star::uno::Reference< XTransactedObject >& xRootCommit ) : m_xRootCommit( xRootCommit ) {}
         virtual ~RootStorageWrapper() {}
 
         // XTransactedObject
@@ -131,7 +131,7 @@
         }
             
     private:
-        Reference< XTransactedObject > m_xRootCommit;
+        ::com::sun::star::uno::Reference< XTransactedObject > m_xRootCommit;
 };
     
 DEFINE_XINTERFACE_2                    (    RootStorageWrapper                                          ,
@@ -186,7 +186,7 @@
         rtl::OUString aConfigSubFolder( RTL_CONSTASCII_USTRINGPARAM( "soffice.cfg/soffice.cfg" ));
         rtl::OUString aConfigFileName( RTL_CONSTASCII_USTRINGPARAM( "soffice.cfg/uiconfig.zip" ));
      
-        Reference< XPropertySet > xPathSettings( m_xServiceManager->createInstance( 
+        ::com::sun::star::uno::Reference< XPropertySet > xPathSettings( m_xServiceManager->createInstance( 
                                                         OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.PathSettings" ))),
                                                   UNO_QUERY_THROW );
         
@@ -216,7 +216,7 @@
 //        aDefaultConfigFolderURL += aConfigRootFolder;
 
         // Create root storages for user interface configuration data (default and customizable)
-        Reference< XSingleServiceFactory > xStorageFactory( m_xServiceManager->createInstance( 
+        ::com::sun::star::uno::Reference< XSingleServiceFactory > xStorageFactory( m_xServiceManager->createInstance( 
                                                                 OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.embed.StorageFactory" ))),
                                                             UNO_QUERY_THROW );
 
@@ -225,13 +225,13 @@
         // Default root storage (READ-ACCESS)
         aArgs[0] <<= m_aDefaultConfigURL + aConfigFileName; //aConfigSubFolder;
         aArgs[1] <<= ElementModes::READ;
-        m_xDefaultCfgRootStorage = Reference< XStorage >( xStorageFactory->createInstanceWithArguments( aArgs ), UNO_QUERY_THROW );
+        m_xDefaultCfgRootStorage = ::com::sun::star::uno::Reference< XStorage >( xStorageFactory->createInstanceWithArguments( aArgs ), UNO_QUERY_THROW );
         
-	    Reference < XOutputStream > xTempOut( m_xServiceManager->createInstance ( 
+	    ::com::sun::star::uno::Reference < XOutputStream > xTempOut( m_xServiceManager->createInstance ( 
                                                 ::rtl::OUString::createFromAscii( "com.sun.star.io.TempFile" ) ),
 						                      UNO_QUERY );
 
-        Reference< XPackageStructureCreator > xPackageStructCreator( m_xServiceManager->createInstance( 
+        ::com::sun::star::uno::Reference< XPackageStructureCreator > xPackageStructCreator( m_xServiceManager->createInstance( 
                                                                         OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.embed.PackageStructureCreator" ))),
                                                                      UNO_QUERY_THROW );
                
@@ -240,25 +240,25 @@
         RTL_LOGFILE_CONTEXT_TRACE( aLog, "} convertToPackage" );
         
         xTempOut->closeOutput();
-        Reference< XInputStream > xTempIn( xTempOut, UNO_QUERY );
-        Reference< XSeekable > xTempSeek( xTempOut, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XInputStream > xTempIn( xTempOut, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XSeekable > xTempSeek( xTempOut, UNO_QUERY );
 
         // Default root storage (READ-ACCESS)
         xTempSeek->seek( 0 );
 
         aArgs[0] <<= xTempIn;
         aArgs[1] <<= ElementModes::READ;
-        m_xDefaultCfgRootStorage = Reference< XStorage >( xStorageFactory->createInstanceWithArguments( aArgs ), UNO_QUERY_THROW );
+        m_xDefaultCfgRootStorage = ::com::sun::star::uno::Reference< XStorage >( xStorageFactory->createInstanceWithArguments( aArgs ), UNO_QUERY_THROW );
 
         // Customizable root storage (READWRITE-ACCESS)
         aArgs[0] <<= m_aUserConfigURL + aConfigSubFolder;
         aArgs[1] <<= ElementModes::READWRITE;
-        m_xUserCfgRootStorage = Reference< XStorage >( xStorageFactory->createInstanceWithArguments( aArgs ), UNO_QUERY );
+        m_xUserCfgRootStorage = ::com::sun::star::uno::Reference< XStorage >( xStorageFactory->createInstanceWithArguments( aArgs ), UNO_QUERY );
 
         // Create wrapper object for module user interface configuration managers, so they are able to call commit/revert on
         // root storage and nothing more (saftey)!
-        RootStorageWrapper* pUserRootStorageWrapper = new RootStorageWrapper( Reference< XTransactedObject >( m_xUserCfgRootStorage, UNO_QUERY ));
-        m_xUserRootCommit = Reference< XTransactedObject>( static_cast< OWeakObject *>( pUserRootStorageWrapper ), UNO_QUERY );
+        RootStorageWrapper* pUserRootStorageWrapper = new RootStorageWrapper( ::com::sun::star::uno::Reference< XTransactedObject >( m_xUserCfgRootStorage, UNO_QUERY ));
+        m_xUserRootCommit = ::com::sun::star::uno::Reference< XTransactedObject>( static_cast< OWeakObject *>( pUserRootStorageWrapper ), UNO_QUERY );
     }
     
     m_bInit = true;
@@ -266,20 +266,20 @@
 */    
 
 
-ModuleUIConfigurationManagerSupplier::ModuleUIConfigurationManagerSupplier( const Reference< XMultiServiceFactory >& xServiceManager ) :
+ModuleUIConfigurationManagerSupplier::ModuleUIConfigurationManagerSupplier( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceManager ) :
     ThreadHelpBase( &Application::GetSolarMutex() )
     , m_bDisposed( false )
 //TODO_AS    , m_bInit( false )
-    , m_xModuleMgr( Reference< XModuleManager >( xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ), UNO_QUERY ))
+    , m_xModuleMgr( ::com::sun::star::uno::Reference< XModuleManager >( xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ), UNO_QUERY ))
     , m_xServiceManager( xServiceManager )
     , m_aListenerContainer( m_aLock.getShareableOslMutex() )
 {
     // Retrieve known modules and insert them into our hash_map to speed-up access time.
-    Reference< XNameAccess > xNameAccess( m_xModuleMgr, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XNameAccess > xNameAccess( m_xModuleMgr, UNO_QUERY );
     const Sequence< OUString >     aNameSeq   = xNameAccess->getElementNames();
     const OUString*                pNameSeq   = aNameSeq.getConstArray();    
     for ( sal_Int32 n = 0; n < aNameSeq.getLength(); n++ )
-        m_aModuleToModuleUICfgMgrMap.insert( ModuleToModuleCfgMgr::value_type(  pNameSeq[n], Reference< XUIConfigurationManager >() ));
+        m_aModuleToModuleUICfgMgrMap.insert( ModuleToModuleCfgMgr::value_type(  pNameSeq[n], ::com::sun::star::uno::Reference< XUIConfigurationManager >() ));
 }
 
 ModuleUIConfigurationManagerSupplier::~ModuleUIConfigurationManagerSupplier()
@@ -290,7 +290,7 @@
     ModuleToModuleCfgMgr::iterator pIter = m_aModuleToModuleUICfgMgrMap.begin();
     while ( pIter != m_aModuleToModuleUICfgMgrMap.end() )
     {
-        Reference< XComponent > xComponent( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XComponent > xComponent( pIter->second, UNO_QUERY );
         if ( xComponent.is() )
             xComponent->dispose();
         ++pIter;
@@ -299,13 +299,13 @@
     // Dispose our root configuration storages
     if ( m_xDefaultCfgRootStorage.is() )
     {
-        Reference< XComponent > xComponent( m_xDefaultCfgRootStorage, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XComponent > xComponent( m_xDefaultCfgRootStorage, UNO_QUERY );
         xComponent->dispose();
     }
     
     if ( m_xUserCfgRootStorage.is() )
     {
-        Reference< XComponent > xComponent( m_xUserCfgRootStorage, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XComponent > xComponent( m_xUserCfgRootStorage, UNO_QUERY );
         xComponent->dispose();
     }
 */    
@@ -315,7 +315,7 @@
 void SAL_CALL ModuleUIConfigurationManagerSupplier::dispose() 
 throw ( RuntimeException )
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     css::lang::EventObject aEvent( xThis );
     m_aListenerContainer.disposeAndClear( aEvent );
@@ -326,7 +326,7 @@
     }
 }
 
-void SAL_CALL ModuleUIConfigurationManagerSupplier::addEventListener( const Reference< XEventListener >& xListener ) 
+void SAL_CALL ModuleUIConfigurationManagerSupplier::addEventListener( const ::com::sun::star::uno::Reference< XEventListener >& xListener ) 
 throw ( RuntimeException )
 {
     {
@@ -337,18 +337,18 @@
             throw DisposedException();
     }
         
-    m_aListenerContainer.addInterface( ::getCppuType( ( const Reference< XEventListener >* ) NULL ), xListener );
+    m_aListenerContainer.addInterface( ::getCppuType( ( const ::com::sun::star::uno::Reference< XEventListener >* ) NULL ), xListener );
 }
 
-void SAL_CALL ModuleUIConfigurationManagerSupplier::removeEventListener( const Reference< XEventListener >& xListener ) 
+void SAL_CALL ModuleUIConfigurationManagerSupplier::removeEventListener( const ::com::sun::star::uno::Reference< XEventListener >& xListener ) 
 throw ( RuntimeException )
 {
     /* SAFE AREA ----------------------------------------------------------------------------------------------- */
-    m_aListenerContainer.removeInterface( ::getCppuType( ( const Reference< XEventListener >* ) NULL ), xListener );
+    m_aListenerContainer.removeInterface( ::getCppuType( ( const ::com::sun::star::uno::Reference< XEventListener >* ) NULL ), xListener );
 }
 
 // XModuleUIConfigurationManagerSupplier
-Reference< XUIConfigurationManager > SAL_CALL ModuleUIConfigurationManagerSupplier::getUIConfigurationManager( const ::rtl::OUString& ModuleIdentifier ) 
+::com::sun::star::uno::Reference< XUIConfigurationManager > SAL_CALL ModuleUIConfigurationManagerSupplier::getUIConfigurationManager( const ::rtl::OUString& ModuleIdentifier ) 
 throw ( NoSuchElementException, RuntimeException)
 {
     ResetableGuard aGuard( m_aLock );
@@ -365,7 +365,7 @@
     try
     {
         Sequence< PropertyValue > lProps;
-        Reference< XNameAccess > xCont(m_xModuleMgr, UNO_QUERY);
+        ::com::sun::star::uno::Reference< XNameAccess > xCont(m_xModuleMgr, UNO_QUERY);
         xCont->getByName(ModuleIdentifier) >>= lProps;
         for (sal_Int32 i=0; i<lProps.getLength(); ++i)
         {
@@ -390,26 +390,26 @@
     if ( !pIter->second.is() )
     {
         /*TODO_AS
-        Reference< XStorage > xDefaultConfigModuleStorage;
-        Reference< XStorage > xUserConfigModuleStorage;
+        ::com::sun::star::uno::Reference< XStorage > xDefaultConfigModuleStorage;
+        ::com::sun::star::uno::Reference< XStorage > xUserConfigModuleStorage;
         
         try
         {
-            xDefaultConfigModuleStorage = Reference< XStorage >( m_xDefaultCfgRootStorage->openStorageElement( 
+            xDefaultConfigModuleStorage = ::com::sun::star::uno::Reference< XStorage >( m_xDefaultCfgRootStorage->openStorageElement( 
                                                                     sShort, ElementModes::READ ), UNO_QUERY_THROW );
 
             if ( m_xUserCfgRootStorage.is() )
             {
                 try
                 {
-                    xUserConfigModuleStorage = Reference< XStorage >( m_xUserCfgRootStorage->openStorageElement(
+                    xUserConfigModuleStorage = ::com::sun::star::uno::Reference< XStorage >( m_xUserCfgRootStorage->openStorageElement(
                                                                         sShort, ElementModes::READWRITE ), UNO_QUERY );
                 }
                 catch( ::com::sun::star::io::IOException& )
                 {
                     try
                     {
-                        xUserConfigModuleStorage = Reference< XStorage >( m_xUserCfgRootStorage->openStorageElement(
+                        xUserConfigModuleStorage = ::com::sun::star::uno::Reference< XStorage >( m_xUserCfgRootStorage->openStorageElement(
                                                                             sShort, ElementModes::READ ), UNO_QUERY );
                     }
                     catch( com::sun::star::uno::Exception& )
@@ -445,7 +445,7 @@
         aArg.Value <<= ModuleIdentifier;
         aArgs[1] <<= aArg;
 
-        pIter->second = Reference< XUIConfigurationManager >( m_xServiceManager->createInstanceWithArguments( 
+        pIter->second = ::com::sun::star::uno::Reference< XUIConfigurationManager >( m_xServiceManager->createInstanceWithArguments( 
                                                                 SERVICENAME_MODULEUICONFIGURATIONMANAGER, aArgs ),
                                                               UNO_QUERY );
     }
--- framework/source/uiconfiguration/uicategorydescription.cxx.gcc43~	2006-09-16 16:16:32.000000000 +0200
+++ framework/source/uiconfiguration/uicategorydescription.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -156,7 +156,7 @@
                                         public  ::cppu::OWeakObject
 {
     public:
-                                  ConfigurationAccess_UICategory( const ::rtl::OUString& aModuleName, const Reference< XNameAccess >& xGenericUICommands, const Reference< XMultiServiceFactory >& rServiceManager );
+                                  ConfigurationAccess_UICategory( const ::rtl::OUString& aModuleName, const ::com::sun::star::uno::Reference< XNameAccess >& xGenericUICommands, const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager );
         virtual                   ~ConfigurationAccess_UICategory();
 
         //  XInterface, XTypeProvider
@@ -205,10 +205,10 @@
 
         rtl::OUString                     m_aConfigCategoryAccess;
         rtl::OUString                     m_aPropUIName;
-        Reference< XNameAccess >          m_xGenericUICategories;
-        Reference< XMultiServiceFactory > m_xServiceManager;
-        Reference< XMultiServiceFactory > m_xConfigProvider;
-        Reference< XNameAccess >          m_xConfigAccess;
+        ::com::sun::star::uno::Reference< XNameAccess >          m_xGenericUICategories;
+        ::com::sun::star::uno::Reference< XMultiServiceFactory > m_xServiceManager;
+        ::com::sun::star::uno::Reference< XMultiServiceFactory > m_xConfigProvider;
+        ::com::sun::star::uno::Reference< XNameAccess >          m_xConfigAccess;
         sal_Bool                          m_bConfigAccessInitialized;
         sal_Bool                          m_bCacheFilled;
         IdToInfoCache                     m_aIdCache;
@@ -234,7 +234,7 @@
                             css::lang::XEventListener
 						)
 
-ConfigurationAccess_UICategory::ConfigurationAccess_UICategory( const rtl::OUString& aModuleName, const Reference< XNameAccess >& rGenericUICategories, const Reference< XMultiServiceFactory >& rServiceManager ) :
+ConfigurationAccess_UICategory::ConfigurationAccess_UICategory( const rtl::OUString& aModuleName, const ::com::sun::star::uno::Reference< XNameAccess >& rGenericUICategories, const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager ) :
     ThreadHelpBase(),
     m_aConfigCategoryAccess( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_ROOT_ACCESS )),
     m_aPropUIName( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_PROPERTY_NAME )),
@@ -247,7 +247,7 @@
     m_aConfigCategoryAccess += aModuleName;
     m_aConfigCategoryAccess += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_CATEGORY_ELEMENT_ACCESS ));
 
-    m_xConfigProvider = Reference< XMultiServiceFactory >( rServiceManager->createInstance(
+    m_xConfigProvider = ::com::sun::star::uno::Reference< XMultiServiceFactory >( rServiceManager->createInstance(
                                                                 rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                                     "com.sun.star.configuration.ConfigurationProvider" ))),
                                                            UNO_QUERY );
@@ -257,7 +257,7 @@
 {
     // SAFE
     ResetableGuard aLock( m_aLock );
-    Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
     if ( xContainer.is() )
         xContainer->removeContainerListener( this );
 }
@@ -335,7 +335,7 @@
     {
         try
         {
-            Reference< XNameAccess > xNameAccess;
+            ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
             a = m_xConfigAccess->getByName( aNameSeq[i] );
             if ( a >>= xNameAccess )
             {
@@ -419,7 +419,7 @@
     if ( m_xConfigAccess.is() )
     {
         Any                      a;
-        Reference< XNameAccess > xNameAccess;
+        ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
 
         try
         {
@@ -463,7 +463,7 @@
         aPropValue.Value = makeAny( m_aConfigCategoryAccess );
         aArgs[0] <<= aPropValue;
 
-        m_xConfigAccess = Reference< XNameAccess >( m_xConfigProvider->createInstanceWithArguments(
+        m_xConfigAccess = ::com::sun::star::uno::Reference< XNameAccess >( m_xConfigProvider->createInstanceWithArguments(
                                                                             rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                                                 "com.sun.star.configuration.ConfigurationAccess" )),
                                                                             aArgs ),
@@ -471,7 +471,7 @@
         if ( m_xConfigAccess.is() )
         {
             // Add as container listener
-            Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
             if ( xContainer.is() )
                 xContainer->addContainerListener( this );
         }
@@ -508,8 +508,8 @@
     // remove our reference to the config access
     ResetableGuard aLock( m_aLock );
 
-    Reference< XInterface > xIfac1( aEvent.Source, UNO_QUERY );
-    Reference< XInterface > xIfac2( m_xConfigAccess, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac1( aEvent.Source, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac2( m_xConfigAccess, UNO_QUERY );
     if ( xIfac1 == xIfac2 )
         m_xConfigAccess.clear();
 }
@@ -540,17 +540,17 @@
 
 DEFINE_INIT_SERVICE                     (   UICategoryDescription, {} )
 
-UICategoryDescription::UICategoryDescription( const Reference< XMultiServiceFactory >& xServiceManager ) :
+UICategoryDescription::UICategoryDescription( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceManager ) :
     ThreadHelpBase(),
     m_xServiceManager( xServiceManager )
 {
-    Reference< XNameAccess > xEmpty;
+    ::com::sun::star::uno::Reference< XNameAccess > xEmpty;
     rtl::OUString aGenericCategories( OUString::createFromAscii( "GenericCategories" ));
     m_xGenericCategories = new ConfigurationAccess_UICategory( aGenericCategories, xEmpty, xServiceManager );
 
-    m_xModuleManager = Reference< XModuleManager >( m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ),
+    m_xModuleManager = ::com::sun::star::uno::Reference< XModuleManager >( m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ),
                                                     UNO_QUERY );
-    Reference< XNameAccess > xNameAccess( m_xModuleManager, UNO_QUERY_THROW );
+    ::com::sun::star::uno::Reference< XNameAccess > xNameAccess( m_xModuleManager, UNO_QUERY_THROW );
     Sequence< rtl::OUString > aElementNames = xNameAccess->getElementNames();
     Sequence< PropertyValue > aSeq;
     OUString                  aModuleIdentifier;
@@ -617,11 +617,11 @@
                 a <<= pIter->second;
             else
             {
-                Reference< XNameAccess > xUICategory;
+                ::com::sun::star::uno::Reference< XNameAccess > xUICategory;
                 ConfigurationAccess_UICategory* pUICategory = new ConfigurationAccess_UICategory( aCommandFile,
                                                                                                   m_xGenericCategories,
                                                                                                   m_xServiceManager );
-                xUICategory = Reference< XNameAccess >( static_cast< cppu::OWeakObject* >( pUICategory ),UNO_QUERY );
+                xUICategory = ::com::sun::star::uno::Reference< XNameAccess >( static_cast< cppu::OWeakObject* >( pUICategory ),UNO_QUERY );
                 pIter->second = xUICategory;
                 a <<= xUICategory;
             }
@@ -666,7 +666,7 @@
 Type SAL_CALL UICategoryDescription::getElementType()
 throw (::com::sun::star::uno::RuntimeException)
 {
-    return( ::getCppuType( (const Reference< XNameAccess >*)NULL ) );
+    return( ::getCppuType( (const ::com::sun::star::uno::Reference< XNameAccess >*)NULL ) );
 }
 
 sal_Bool SAL_CALL UICategoryDescription::hasElements()
--- framework/source/uiconfiguration/windowstateconfiguration.cxx.gcc43~	2006-12-19 15:02:07.000000000 +0100
+++ framework/source/uiconfiguration/windowstateconfiguration.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -204,7 +204,7 @@
                                         public  ::cppu::OWeakObject
 {
     public:
-                                  ConfigurationAccess_WindowState( const ::rtl::OUString& aWindowStateConfigFile, const Reference< XMultiServiceFactory >& rServiceManager );
+                                  ConfigurationAccess_WindowState( const ::rtl::OUString& aWindowStateConfigFile, const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager );
         virtual                   ~ConfigurationAccess_WindowState();
 
         //  XInterface, XTypeProvider
@@ -299,9 +299,9 @@
             sal_uInt32                              nMask; // see WindowStateMask
         };
 
-        void                      impl_putPropertiesFromStruct( const WindowStateInfo& rWinStateInfo, Reference< XPropertySet >& xPropSet );
-        Any                       impl_insertCacheAndReturnSequence( const rtl::OUString& rResourceURL, Reference< XNameAccess >& rNameAccess );
-        WindowStateInfo&          impl_insertCacheAndReturnWinState( const rtl::OUString& rResourceURL, Reference< XNameAccess >& rNameAccess );
+        void                      impl_putPropertiesFromStruct( const WindowStateInfo& rWinStateInfo, ::com::sun::star::uno::Reference< XPropertySet >& xPropSet );
+        Any                       impl_insertCacheAndReturnSequence( const rtl::OUString& rResourceURL, ::com::sun::star::uno::Reference< XNameAccess >& rNameAccess );
+        WindowStateInfo&          impl_insertCacheAndReturnWinState( const rtl::OUString& rResourceURL, ::com::sun::star::uno::Reference< XNameAccess >& rNameAccess );
         Any                       impl_getSequenceFromStruct( const WindowStateInfo& rWinStateInfo );
         void                      impl_fillStructFromSequence( WindowStateInfo& rWinStateInfo, const Sequence< PropertyValue >& rSeq );
         Any                       impl_getWindowStateFromResourceURL( const rtl::OUString& rResourceURL );
@@ -314,9 +314,9 @@
                                  ::std::equal_to< ::rtl::OUString > > ResourceURLToInfoCache;
 
         rtl::OUString                     m_aConfigWindowAccess;
-        Reference< XMultiServiceFactory > m_xServiceManager;
-        Reference< XMultiServiceFactory > m_xConfigProvider;
-        Reference< XNameAccess >          m_xConfigAccess;
+        ::com::sun::star::uno::Reference< XMultiServiceFactory > m_xServiceManager;
+        ::com::sun::star::uno::Reference< XMultiServiceFactory > m_xConfigProvider;
+        ::com::sun::star::uno::Reference< XNameAccess >          m_xConfigAccess;
         ResourceURLToInfoCache            m_aResourceURLToInfoCache;
         sal_Bool                          m_bConfigAccessInitialized : 1,
                                           m_bModified : 1;
@@ -347,7 +347,7 @@
                             css::lang::XTypeProvider
 						)
 
-ConfigurationAccess_WindowState::ConfigurationAccess_WindowState( const rtl::OUString& aModuleName, const Reference< XMultiServiceFactory >& rServiceManager ) :
+ConfigurationAccess_WindowState::ConfigurationAccess_WindowState( const rtl::OUString& aModuleName, const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager ) :
     ThreadHelpBase(),
     m_aConfigWindowAccess( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_ROOT_ACCESS )),
     m_xServiceManager( rServiceManager ),
@@ -357,7 +357,7 @@
     // Create configuration hierachical access name
     m_aConfigWindowAccess += aModuleName;
     m_aConfigWindowAccess += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_WINDOWSTATE_ACCESS ));
-    m_xConfigProvider = Reference< XMultiServiceFactory >( rServiceManager->createInstance( SERVICENAME_CFGPROVIDER ), UNO_QUERY );
+    m_xConfigProvider = ::com::sun::star::uno::Reference< XMultiServiceFactory >( rServiceManager->createInstance( SERVICENAME_CFGPROVIDER ), UNO_QUERY );
     
     // Initialize access array with property names.
     sal_Int32 n = 0;
@@ -372,7 +372,7 @@
 {
     // SAFE
     ResetableGuard aLock( m_aLock );
-    Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
     if ( xContainer.is() )
         xContainer->removeContainerListener( this );
 }
@@ -475,13 +475,13 @@
     try
     {
         // Remove must be write-through => remove element from configuration
-        Reference< XNameContainer > xNameContainer( m_xConfigAccess, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XNameContainer > xNameContainer( m_xConfigAccess, UNO_QUERY );
         if ( xNameContainer.is() )
         {
             aLock.unlock();
 
             xNameContainer->removeByName( rResourceURL );
-            Reference< XChangesBatch > xFlush( m_xConfigAccess, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XChangesBatch > xFlush( m_xConfigAccess, UNO_QUERY );
             if ( xFlush.is() )
                 xFlush->commitChanges();
         }
@@ -523,22 +523,22 @@
                     m_aResourceURLToInfoCache.insert( ResourceURLToInfoCache::value_type( rResourceURL, aWinStateInfo ));
 
                     // insert must be write-through => insert element into configuration
-                    Reference< XNameContainer > xNameContainer( m_xConfigAccess, UNO_QUERY );
+                    ::com::sun::star::uno::Reference< XNameContainer > xNameContainer( m_xConfigAccess, UNO_QUERY );
                     if ( xNameContainer.is() )
                     {
-                        Reference< XSingleServiceFactory > xFactory( m_xConfigAccess, UNO_QUERY );
+                        ::com::sun::star::uno::Reference< XSingleServiceFactory > xFactory( m_xConfigAccess, UNO_QUERY );
                         aLock.unlock();
                         
                         try
                         {
-                            Reference< XPropertySet > xPropSet( xFactory->createInstance(), UNO_QUERY );
+                            ::com::sun::star::uno::Reference< XPropertySet > xPropSet( xFactory->createInstance(), UNO_QUERY );
                             if ( xPropSet.is() )
                             {
                                 Any a;
                                 impl_putPropertiesFromStruct( aWinStateInfo, xPropSet );
                                 a <<= xPropSet;
                                 xNameContainer->insertByName( rResourceURL, a );
-                                Reference< XChangesBatch > xFlush( xFactory, UNO_QUERY );
+                                ::com::sun::star::uno::Reference< XChangesBatch > xFlush( xFactory, UNO_QUERY );
                                 if ( xFlush.is() )
                                     xFlush->commitChanges();
                             }
@@ -581,7 +581,7 @@
             }
 
             // Try to ask our configuration access
-            Reference< XNameAccess > xNameAccess;            
+            ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;            
             Any a( m_xConfigAccess->getByName( rResourceURL ));
 
             if ( a >>= xNameAccess )
@@ -597,7 +597,7 @@
 
         if ( m_bModified && pIter != m_aResourceURLToInfoCache.end() )
         {
-            Reference< XNameContainer > xNameContainer( m_xConfigAccess, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XNameContainer > xNameContainer( m_xConfigAccess, UNO_QUERY );
             if ( xNameContainer.is() )
             {
                 WindowStateInfo aWinStateInfo( pIter->second );
@@ -607,12 +607,12 @@
                 
                 try
                 {
-                    Reference< XPropertySet > xPropSet;
+                    ::com::sun::star::uno::Reference< XPropertySet > xPropSet;
                     if ( xNameContainer->getByName( aResourceURL ) >>= xPropSet )
                     {
                         impl_putPropertiesFromStruct( aWinStateInfo, xPropSet );
                         
-                        Reference< XChangesBatch > xFlush( m_xConfigAccess, UNO_QUERY );
+                        ::com::sun::star::uno::Reference< XChangesBatch > xFlush( m_xConfigAccess, UNO_QUERY );
                         if ( xFlush.is() )
                             xFlush->commitChanges();
                     }
@@ -650,8 +650,8 @@
     // remove our reference to the config access
     ResetableGuard aLock( m_aLock );
 
-    Reference< XInterface > xIfac1( aEvent.Source, UNO_QUERY );
-    Reference< XInterface > xIfac2( m_xConfigAccess, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac1( aEvent.Source, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac2( m_xConfigAccess, UNO_QUERY );
     if ( xIfac1 == xIfac2 )
         m_xConfigAccess.clear();
 }
@@ -715,7 +715,7 @@
     return makeAny( aPropSeq );
 }
 
-Any ConfigurationAccess_WindowState::impl_insertCacheAndReturnSequence( const rtl::OUString& rResourceURL, Reference< XNameAccess >& xNameAccess )
+Any ConfigurationAccess_WindowState::impl_insertCacheAndReturnSequence( const rtl::OUString& rResourceURL, ::com::sun::star::uno::Reference< XNameAccess >& xNameAccess )
 {
     sal_Int32                 nMask( 0 );
     sal_Int32                 nCount( m_aPropArray.size() );
@@ -912,7 +912,7 @@
     return makeAny( aPropSeq );
 }
 
-ConfigurationAccess_WindowState::WindowStateInfo& ConfigurationAccess_WindowState::impl_insertCacheAndReturnWinState( const rtl::OUString& rResourceURL, Reference< XNameAccess >& rNameAccess )
+ConfigurationAccess_WindowState::WindowStateInfo& ConfigurationAccess_WindowState::impl_insertCacheAndReturnWinState( const rtl::OUString& rResourceURL, ::com::sun::star::uno::Reference< XNameAccess >& rNameAccess )
 {
     sal_Int32                 nMask( 0 );
     sal_Int32                 nCount( m_aPropArray.size() );
@@ -1100,7 +1100,7 @@
         // Try to ask our configuration access
         if ( m_xConfigAccess.is() )
         {
-            Reference< XNameAccess > xNameAccess;
+            ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
             Any a( m_xConfigAccess->getByName( rResourceURL ));
 
             if ( a >>= xNameAccess )
@@ -1272,7 +1272,7 @@
     }
 }
 
-void ConfigurationAccess_WindowState::impl_putPropertiesFromStruct( const WindowStateInfo& rWinStateInfo, Reference< XPropertySet >& xPropSet )
+void ConfigurationAccess_WindowState::impl_putPropertiesFromStruct( const WindowStateInfo& rWinStateInfo, ::com::sun::star::uno::Reference< XPropertySet >& xPropSet )
 {
     sal_Int32                 i( 0 );
     sal_Int32                 nCount( m_aPropArray.size() );
@@ -1369,13 +1369,13 @@
         aPropValue.Value = makeAny( sal_True );
         aArgs[1] = makeAny( aPropValue );
     
-        m_xConfigAccess = Reference< XNameAccess >( m_xConfigProvider->createInstanceWithArguments( 
+        m_xConfigAccess = ::com::sun::star::uno::Reference< XNameAccess >( m_xConfigProvider->createInstanceWithArguments( 
                                                         SERVICENAME_CFGUPDATEACCESS, aArgs ), 
                                                     UNO_QUERY );
         if ( m_xConfigAccess.is() )
         {
             // Add as container listener
-            Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
             if ( xContainer.is() )
                 xContainer->addContainerListener( this );            
         }
@@ -1419,14 +1419,14 @@
 
 DEFINE_INIT_SERVICE                     (   WindowStateConfiguration, {} )
 
-WindowStateConfiguration::WindowStateConfiguration( const Reference< XMultiServiceFactory >& xServiceManager ) :
+WindowStateConfiguration::WindowStateConfiguration( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceManager ) :
     ThreadHelpBase(),
     m_xServiceManager( xServiceManager )
 {
-    m_xModuleManager = Reference< XModuleManager >( m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ),
+    m_xModuleManager = ::com::sun::star::uno::Reference< XModuleManager >( m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ),
                                                     UNO_QUERY );
-    Reference< XNameAccess > xEmptyNameAccess;    
-    Reference< XNameAccess > xNameAccess( m_xModuleManager, UNO_QUERY_THROW );
+    ::com::sun::star::uno::Reference< XNameAccess > xEmptyNameAccess;    
+    ::com::sun::star::uno::Reference< XNameAccess > xNameAccess( m_xModuleManager, UNO_QUERY_THROW );
     Sequence< rtl::OUString > aElementNames = xNameAccess->getElementNames();
     Sequence< PropertyValue > aSeq;
     OUString                  aModuleIdentifier;
@@ -1486,9 +1486,9 @@
                 a = makeAny( pModuleIter->second );
             else
             {
-                Reference< XNameAccess > xResourceURLWindowState;
+                ::com::sun::star::uno::Reference< XNameAccess > xResourceURLWindowState;
                 ConfigurationAccess_WindowState* pModuleWindowState = new ConfigurationAccess_WindowState( aWindowStateConfigFile, m_xServiceManager );
-                xResourceURLWindowState = Reference< XNameAccess >( static_cast< cppu::OWeakObject* >( pModuleWindowState ),UNO_QUERY );
+                xResourceURLWindowState = ::com::sun::star::uno::Reference< XNameAccess >( static_cast< cppu::OWeakObject* >( pModuleWindowState ),UNO_QUERY );
                 pModuleIter->second = xResourceURLWindowState;
                 a = makeAny( xResourceURLWindowState );
             }
@@ -1531,7 +1531,7 @@
 Type SAL_CALL WindowStateConfiguration::getElementType() 
 throw (::com::sun::star::uno::RuntimeException)
 {
-    return( ::getCppuType( (const Reference< XNameAccess >*)NULL ) );
+    return( ::getCppuType( (const ::com::sun::star::uno::Reference< XNameAccess >*)NULL ) );
 }
 
 sal_Bool SAL_CALL WindowStateConfiguration::hasElements() 
--- framework/source/uielement/addonstoolbarmanager.cxx.gcc43~	2007-08-17 09:46:09.000000000 +0200
+++ framework/source/uielement/addonstoolbarmanager.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -167,8 +167,8 @@
 static const char   TOOLBOXITEM_SEPARATOR_STR[] = "private:separator";
 static const USHORT TOOLBOXITEM_SEPARATOR_STR_LEN = sizeof( TOOLBOXITEM_SEPARATOR_STR )-1;
 
-AddonsToolBarManager::AddonsToolBarManager( const Reference< XMultiServiceFactory >& rServiceManager, 
-                                const Reference< XFrame >& rFrame, 
+AddonsToolBarManager::AddonsToolBarManager( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager, 
+                                const ::com::sun::star::uno::Reference< XFrame >& rFrame, 
                                 const rtl::OUString& rResourceName,
                                 ToolBar* pToolBar ) :
     ToolBarManager( rServiceManager, rFrame, rResourceName, pToolBar )
@@ -206,7 +206,7 @@
 	return sal_False;
 }
 
-static Image RetrieveImage( Reference< com::sun::star::frame::XFrame >& rFrame,
+static Image RetrieveImage( ::com::sun::star::uno::Reference< com::sun::star::frame::XFrame >& rFrame,
 						    const rtl::OUString& aImageId,
 							const rtl::OUString& aURL,
 							BOOL bBigImage,
@@ -235,7 +235,7 @@
 // XComponent
 void SAL_CALL AddonsToolBarManager::dispose() throw( RuntimeException )
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
     
     {
         // Remove addon specific data from toolbar items.
@@ -308,7 +308,7 @@
     ::rtl::OUString aModuleIdentifier;
     try
     {
-        Reference< XModuleManager > xModuleManager(
+        ::com::sun::star::uno::Reference< XModuleManager > xModuleManager(
             m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ), UNO_QUERY_THROW );
         aModuleIdentifier = xModuleManager->identify( m_xFrame );
     }
@@ -316,16 +316,16 @@
     {
     }
 
-    Reference< XMultiComponentFactory > xToolbarControllerFactory( m_xToolbarControllerRegistration, UNO_QUERY );
-    Reference< XComponentContext > xComponentContext;
-    Reference< XPropertySet > xProps( m_xServiceManager, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XMultiComponentFactory > xToolbarControllerFactory( m_xToolbarControllerRegistration, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponentContext > xComponentContext;
+    ::com::sun::star::uno::Reference< XPropertySet > xProps( m_xServiceManager, UNO_QUERY );
 
     if ( xProps.is() )
         xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))) >>= xComponentContext;
     
     sal_uInt32  nElements( 0 );
     sal_Bool    bAppendSeparator( sal_False );
-    Reference< XWindow > xToolbarWindow = VCLUnoHelper::GetInterface( m_pToolBar );
+    ::com::sun::star::uno::Reference< XWindow > xToolbarWindow = VCLUnoHelper::GetInterface( m_pToolBar );
 	for ( sal_uInt32 n = 0; n < (sal_uInt32)rAddonToolbar.getLength(); n++ )
 	{
 		rtl::OUString	aValueName;
@@ -376,7 +376,7 @@
 				m_pToolBar->SetItemData( nId, pRuntimeItemData );
 				m_pToolBar->SetItemCommand( nId, aURL );
 
-                Reference< XStatusListener > xController;
+                ::com::sun::star::uno::Reference< XStatusListener > xController;
                 
                 sal_Bool bMustBeInit( sal_True );
 
@@ -407,7 +407,7 @@
                         
                         try
                         {
-                            xController = Reference< XStatusListener >( xToolbarControllerFactory->createInstanceWithArgumentsAndContext(
+                            xController = ::com::sun::star::uno::Reference< XStatusListener >( xToolbarControllerFactory->createInstanceWithArgumentsAndContext(
                                                                             aURL, aArgs, xComponentContext ),
                                                                         UNO_QUERY );
                         }
@@ -422,13 +422,13 @@
                     ::cppu::OWeakObject* pController = 0;
                     
                     pController = ToolBarMerger::CreateController( m_xServiceManager, m_xFrame, m_pToolBar, aURL, nId, nWidth, aControlType );
-                    xController = Reference< XStatusListener >( pController, UNO_QUERY );
+                    xController = ::com::sun::star::uno::Reference< XStatusListener >( pController, UNO_QUERY );
                 }
 
                 // insert controller to the map
                 m_aControllerMap[nId] = xController;
                 
-                Reference< XInitialization > xInit( xController, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XInitialization > xInit( xController, UNO_QUERY );
                 if ( xInit.is() && bMustBeInit )
                 {
                     PropertyValue aPropValue;
@@ -452,10 +452,10 @@
                 }
 
                 // Request a item window from the toolbar controller and set it at the VCL toolbar
-                Reference< XToolbarController > xTbxController( xController, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XToolbarController > xTbxController( xController, UNO_QUERY );
                 if ( xTbxController.is() && xToolbarWindow.is() )
                 {
-                    Reference< XWindow > xWindow = xTbxController->createItemWindow( xToolbarWindow );
+                    ::com::sun::star::uno::Reference< XWindow > xWindow = xTbxController->createItemWindow( xToolbarWindow );
                     if ( xWindow.is() )
                     {
                         Window* pItemWin = VCLUnoHelper::GetWindow( xWindow );
@@ -470,7 +470,7 @@
                 }
                 
                 // Notify controller implementation to its listeners. Controller is now useable from outside.
-                Reference< XUpdatable > xUpdatable( xController, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XUpdatable > xUpdatable( xController, UNO_QUERY );
                 if ( xUpdatable.is() )
                 {
                     try
@@ -500,7 +500,7 @@
     ToolBarControllerMap::const_iterator pIter = m_aControllerMap.find( nId );
     if ( pIter != m_aControllerMap.end() )
     {
-        Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
 
         if ( xController.is() )
             xController->click();
@@ -518,7 +518,7 @@
     ToolBarControllerMap::const_iterator pIter = m_aControllerMap.find( nId );
     if ( pIter != m_aControllerMap.end() )
     {
-        Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
 
         if ( xController.is() )
             xController->doubleClick();
@@ -547,7 +547,7 @@
     ToolBarControllerMap::const_iterator pIter = m_aControllerMap.find( nId );
     if ( pIter != m_aControllerMap.end() )
     {
-        Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
 
         if ( xController.is() )
             xController->execute( nKeyModifier );
--- framework/source/uielement/addonstoolbarwrapper.cxx.gcc43~	2006-09-16 16:17:29.000000000 +0200
+++ framework/source/uielement/addonstoolbarwrapper.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -132,7 +132,7 @@
 namespace framework
 {
 
-AddonsToolBarWrapper::AddonsToolBarWrapper( const Reference< XMultiServiceFactory >& xServiceManager ) :
+AddonsToolBarWrapper::AddonsToolBarWrapper( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceManager ) :
     UIElementWrapperBase( UIElementType::TOOLBAR ),
     m_xServiceManager( xServiceManager )
 {
@@ -145,7 +145,7 @@
 // XComponent
 void SAL_CALL AddonsToolBarWrapper::dispose() throw ( RuntimeException )
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     com::sun::star::lang::EventObject aEvent( xThis );
     m_aListenerContainer.disposeAndClear( aEvent );
@@ -182,7 +182,7 @@
             }
         }
 
-        Reference< XFrame > xFrame( m_xWeakFrame );
+        ::com::sun::star::uno::Reference< XFrame > xFrame( m_xWeakFrame );
         if ( xFrame.is() && m_aConfigData.getLength() > 0 )
         {
             // Create VCL based toolbar which will be filled with settings data
@@ -199,7 +199,7 @@
                     m_xToolBarWindow = VCLUnoHelper::GetInterface( pToolBar );
                     pToolBarManager = new AddonsToolBarManager( m_xServiceManager, xFrame, m_aResourceURL, pToolBar );
                     pToolBar->SetToolBarManager( pToolBarManager );
-                    m_xToolBarManager = Reference< XComponent >( static_cast< OWeakObject *>( pToolBarManager ), UNO_QUERY );
+                    m_xToolBarManager = ::com::sun::star::uno::Reference< XComponent >( static_cast< OWeakObject *>( pToolBarManager ), UNO_QUERY );
                 }
             }
 
@@ -225,7 +225,7 @@
 }
 
 // XUIElement interface
-Reference< XInterface > SAL_CALL AddonsToolBarWrapper::getRealInterface() throw (::com::sun::star::uno::RuntimeException)
+::com::sun::star::uno::Reference< XInterface > SAL_CALL AddonsToolBarWrapper::getRealInterface() throw (::com::sun::star::uno::RuntimeException)
 {
     ResetableGuard aLock( m_aLock );
     
@@ -235,11 +235,11 @@
         if ( pToolBarManager )
         {
             Window* pWindow = (Window *)pToolBarManager->GetToolBar();
-            return Reference< XInterface >( VCLUnoHelper::GetInterface( pWindow ), UNO_QUERY );
+            return ::com::sun::star::uno::Reference< XInterface >( VCLUnoHelper::GetInterface( pWindow ), UNO_QUERY );
         }
     }
 
-    return Reference< XInterface >();
+    return ::com::sun::star::uno::Reference< XInterface >();
 }
 
 } // namespace framework
--- framework/source/uielement/buttontoolbarcontroller.cxx.gcc43~	2007-07-10 17:09:53.000000000 +0200
+++ framework/source/uielement/buttontoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -192,7 +192,7 @@
 // XComponent
 void SAL_CALL ButtonToolbarController::dispose() throw (::com::sun::star::uno::RuntimeException)
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     {
         vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
--- framework/source/uielement/comboboxtoolbarcontroller.cxx.gcc43~	2007-07-10 17:10:07.000000000 +0200
+++ framework/source/uielement/comboboxtoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -203,8 +203,8 @@
 // ------------------------------------------------------------------
 
 ComboboxToolbarController::ComboboxToolbarController( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >&               rFrame,
+    const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const ::com::sun::star::uno::Reference< XFrame >&               rFrame,
     ToolBox*                                 pToolbar,
     USHORT                                   nID,
     sal_Int32                                nWidth,
@@ -250,8 +250,8 @@
 void SAL_CALL ComboboxToolbarController::execute( sal_Int16 KeyModifier )
 throw ( RuntimeException )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+    ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+    ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     OUString                     aCommandURL;
     OUString                     aSelectedText;
     ::com::sun::star::util::URL  aTargetURL;
--- framework/source/uielement/complextoolbarcontroller.cxx.gcc43~	2007-07-10 17:10:23.000000000 +0200
+++ framework/source/uielement/complextoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -111,8 +111,8 @@
 // ------------------------------------------------------------------
 
 ComplexToolbarController::ComplexToolbarController( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >&               rFrame,
+    const::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const::com::sun::star::uno::Reference< XFrame >&               rFrame,
     ToolBox*                                 pToolbar,
     USHORT                                   nID,
     const OUString&                          aCommand ) :
@@ -121,7 +121,7 @@
     ,   m_nID( nID )
     ,   m_bMadeInvisible( sal_False )
 {
-    m_xURLTransformer = Reference< XURLTransformer >( m_xServiceManager->createInstance(
+    m_xURLTransformer =::com::sun::star::uno::Reference< XURLTransformer >( m_xServiceManager->createInstance(
                                                         rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))),
                                                       UNO_QUERY_THROW );
 }
@@ -152,8 +152,8 @@
 void SAL_CALL ComplexToolbarController::execute( sal_Int16 KeyModifier )
 throw ( RuntimeException )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+   ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+   ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     OUString                     aCommandURL;
     ::com::sun::star::util::URL  aTargetURL;
 
--- framework/source/uielement/constitemcontainer.cxx.gcc43~	2006-09-16 16:18:37.000000000 +0200
+++ framework/source/uielement/constitemcontainer.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -204,12 +204,12 @@
     copyItemContainer( rItemContainer.m_aItemVector );
 }
 
-ConstItemContainer::ConstItemContainer( const Reference< XIndexAccess >& rSourceContainer, sal_Bool bFastCopy )
+ConstItemContainer::ConstItemContainer( const ::com::sun::star::uno::Reference< XIndexAccess >& rSourceContainer, sal_Bool bFastCopy )
 {
     // We also have to copy the UIName property
     try
     {
-        Reference< XPropertySet > xPropSet( rSourceContainer, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XPropertySet > xPropSet( rSourceContainer, UNO_QUERY );
         if ( xPropSet.is() )
         {
             rtl::OUString aUIName;
@@ -244,7 +244,7 @@
                     if ( a >>= aPropSeq )
                     {
                         sal_Int32 nContainerIndex = -1;
-                        Reference< XIndexAccess > xIndexAccess;
+                        ::com::sun::star::uno::Reference< XIndexAccess > xIndexAccess;
                         for ( sal_Int32 j = 0; j < aPropSeq.getLength(); j++ )
                         {
                             if ( aPropSeq[j].Name.equalsAscii( "ItemDescriptorContainer" ))
@@ -280,7 +280,7 @@
     {
         sal_Int32 nContainerIndex = -1;
         Sequence< PropertyValue > aPropSeq( rSourceVector[i] );
-        Reference< XIndexAccess > xIndexAccess;
+        ::com::sun::star::uno::Reference< XIndexAccess > xIndexAccess;
         for ( sal_Int32 j = 0; j < aPropSeq.getLength(); j++ )
         {
             if ( aPropSeq[j].Name.equalsAscii( "ItemDescriptorContainer" ))
@@ -298,9 +298,9 @@
     }
 }
 
-Reference< XIndexAccess > ConstItemContainer::deepCopyContainer( const Reference< XIndexAccess >& rSubContainer )
+::com::sun::star::uno::Reference< XIndexAccess > ConstItemContainer::deepCopyContainer( const ::com::sun::star::uno::Reference< XIndexAccess >& rSubContainer )
 {
-    Reference< XIndexAccess > xReturn;
+    ::com::sun::star::uno::Reference< XIndexAccess > xReturn;
     if ( rSubContainer.is() )
     {
         ItemContainer*      pSource = ItemContainer::GetImplementation( rSubContainer );
@@ -309,7 +309,7 @@
             pSubContainer = new ConstItemContainer( *pSource );
         else
             pSubContainer = new ConstItemContainer( rSubContainer );
-        xReturn = Reference< XIndexAccess >( static_cast< OWeakObject* >( pSubContainer ), UNO_QUERY );
+        xReturn = ::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject* >( pSubContainer ), UNO_QUERY );
     }
 
     return xReturn;
@@ -372,13 +372,13 @@
 }
 
 // XPropertySet
-Reference< XPropertySetInfo > SAL_CALL ConstItemContainer::getPropertySetInfo() 
+::com::sun::star::uno::Reference< XPropertySetInfo > SAL_CALL ConstItemContainer::getPropertySetInfo() 
 throw (::com::sun::star::uno::RuntimeException)
 {
 	// Optimize this method !
 	// We initialize a static variable only one time. And we don't must use a mutex at every call!
 	// For the first call; pInfo is NULL - for the second call pInfo is different from NULL!
-    static Reference< XPropertySetInfo >* pInfo = NULL;
+    static ::com::sun::star::uno::Reference< XPropertySetInfo >* pInfo = NULL;
 
     if( pInfo == NULL )
 	{
@@ -389,7 +389,7 @@
 		{
 			// Create structure of propertysetinfo for baseclass "OPropertySetHelper".
 			// (Use method "getInfoHelper()".)
-            static Reference< XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+            static ::com::sun::star::uno::Reference< XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
 			pInfo = &xInfo;
 		}
 	}
@@ -496,7 +496,7 @@
     return lPropertyDescriptor;
 }
 
-Reference < XPropertySetInfo > ConstItemContainer::createPropertySetInfo(
+::com::sun::star::uno::Reference < XPropertySetInfo > ConstItemContainer::createPropertySetInfo(
 	IPropertyArrayHelper & rProperties ) SAL_THROW( () )
 {
 	return static_cast< XPropertySetInfo * >( new OPropertySetHelperInfo_Impl( rProperties ) );
--- framework/source/uielement/dropdownboxtoolbarcontroller.cxx.gcc43~	2007-07-10 17:10:38.000000000 +0200
+++ framework/source/uielement/dropdownboxtoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -183,8 +183,8 @@
 // ------------------------------------------------------------------
 
 DropdownToolbarController::DropdownToolbarController( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >&               rFrame,
+    const::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const::com::sun::star::uno::Reference< XFrame >&               rFrame,
     ToolBox*                                 pToolbar,
     USHORT                                   nID,
     sal_Int32                                nWidth,
@@ -231,8 +231,8 @@
 void SAL_CALL DropdownToolbarController::execute( sal_Int16 KeyModifier )
 throw ( RuntimeException )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+   ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+   ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     OUString                     aCommandURL;
     OUString                     aSelectedText;
     ::com::sun::star::util::URL  aTargetURL;
--- framework/source/uielement/edittoolbarcontroller.cxx.gcc43~	2007-07-10 17:10:53.000000000 +0200
+++ framework/source/uielement/edittoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -182,8 +182,8 @@
 // ------------------------------------------------------------------
 
 EditToolbarController::EditToolbarController( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >&               rFrame,
+    const::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const::com::sun::star::uno::Reference< XFrame >&               rFrame,
     ToolBox*                                 pToolbar,
     USHORT                                   nID,
     sal_Int32                                nWidth,
@@ -228,8 +228,8 @@
 void SAL_CALL EditToolbarController::execute( sal_Int16 KeyModifier )
 throw ( RuntimeException )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+   ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+   ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     OUString                     aCommandURL;
     OUString                     aSelectedText;
     ::com::sun::star::util::URL  aTargetURL;
--- framework/source/uielement/generictoolbarcontroller.cxx.gcc43~	2007-07-10 17:11:20.000000000 +0200
+++ framework/source/uielement/generictoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -151,8 +151,8 @@
     ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >  aArgs;
 };
 
-GenericToolbarController::GenericToolbarController( const Reference< XMultiServiceFactory >& rServiceManager,
-                                                    const Reference< XFrame >&               rFrame,
+GenericToolbarController::GenericToolbarController( const::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+                                                    const::com::sun::star::uno::Reference< XFrame >&               rFrame,
                                                     ToolBox*                                 pToolbar,
                                                     USHORT                                   nID,
                                                     const OUString&                          aCommand ) :
@@ -185,8 +185,8 @@
 void SAL_CALL GenericToolbarController::execute( sal_Int16 KeyModifier )
 throw ( RuntimeException )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+   ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+   ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     OUString                     aCommandURL;
 
     {
@@ -200,7 +200,7 @@
              m_xServiceManager.is() &&
              m_aCommandURL.getLength() )
         {
-            xURLTransformer = Reference< XURLTransformer >( m_xServiceManager->createInstance(
+            xURLTransformer =::com::sun::star::uno::Reference< XURLTransformer >( m_xServiceManager->createInstance(
                                                                 rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))),
                                                             UNO_QUERY );
 
--- framework/source/uielement/imagebuttontoolbarcontroller.cxx.gcc43~	2007-07-10 17:11:45.000000000 +0200
+++ framework/source/uielement/imagebuttontoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -132,7 +132,7 @@
             xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))) >>= xContext;
             if ( xContext.is() )
             {
-                m_xMacroExpander =  Reference< com::sun::star::util::XMacroExpander >( xContext->getValueByName( 
+                m_xMacroExpander = ::com::sun::star::uno::Reference< com::sun::star::util::XMacroExpander >( xContext->getValueByName( 
                                         OUString( RTL_CONSTASCII_USTRINGPARAM( "/singletons/com.sun.star.util.theMacroExpander"))),
                                         UNO_QUERY );
                 xMacroExpander = m_xMacroExpander;
@@ -161,8 +161,8 @@
 // ------------------------------------------------------------------
 
 ImageButtonToolbarController::ImageButtonToolbarController( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >&               rFrame,
+    const::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const::com::sun::star::uno::Reference< XFrame >&               rFrame,
     ToolBox*                                 pToolbar,
     USHORT                                   nID,
     const OUString&                          aCommand ) :
--- framework/source/uielement/itemcontainer.cxx.gcc43~	2006-09-16 16:21:06.000000000 +0200
+++ framework/source/uielement/itemcontainer.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -101,7 +101,7 @@
     copyItemContainer( rConstItemContainer.m_aItemVector, rMutex );
 }
 
-ItemContainer::ItemContainer( const Reference< XIndexAccess >& rSourceContainer, const ShareableMutex& rMutex ) : ::cppu::OWeakObject()
+ItemContainer::ItemContainer( const::com::sun::star::uno::Reference< XIndexAccess >& rSourceContainer, const ShareableMutex& rMutex ) : ::cppu::OWeakObject()
     ,   m_aShareMutex( rMutex )
 {
     if ( rSourceContainer.is() )
@@ -116,7 +116,7 @@
                 if ( a >>= aPropSeq )
                 {
                     sal_Int32 nContainerIndex = -1;
-                    Reference< XIndexAccess > xIndexAccess;
+                   ::com::sun::star::uno::Reference< XIndexAccess > xIndexAccess;
                     for ( sal_Int32 j = 0; j < aPropSeq.getLength(); j++ )
                     {
                         if ( aPropSeq[j].Name.equalsAscii( "ItemDescriptorContainer" ))
@@ -151,7 +151,7 @@
     {
         sal_Int32 nContainerIndex = -1;
         Sequence< PropertyValue > aPropSeq( rSourceVector[i] );
-        Reference< XIndexAccess > xIndexAccess;
+       ::com::sun::star::uno::Reference< XIndexAccess > xIndexAccess;
         for ( sal_Int32 j = 0; j < aPropSeq.getLength(); j++ )
         {
             if ( aPropSeq[j].Name.equalsAscii( "ItemDescriptorContainer" ))
@@ -169,9 +169,9 @@
     }
 }
 
-Reference< XIndexAccess > ItemContainer::deepCopyContainer( const Reference< XIndexAccess >& rSubContainer, const ShareableMutex& rMutex )
+::com::sun::star::uno::Reference< XIndexAccess > ItemContainer::deepCopyContainer( const::com::sun::star::uno::Reference< XIndexAccess >& rSubContainer, const ShareableMutex& rMutex )
 {
-    Reference< XIndexAccess > xReturn;
+   ::com::sun::star::uno::Reference< XIndexAccess > xReturn;
     if ( rSubContainer.is() )
     {
         ConstItemContainer* pSource = ConstItemContainer::GetImplementation( rSubContainer );
@@ -180,7 +180,7 @@
             pSubContainer = new ItemContainer( *pSource, rMutex );
         else
             pSubContainer = new ItemContainer( rSubContainer, rMutex );
-        xReturn = Reference< XIndexAccess >( static_cast< OWeakObject* >( pSubContainer ), UNO_QUERY );
+        xReturn =::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject* >( pSubContainer ), UNO_QUERY );
     }
 
     return xReturn;
--- framework/source/uielement/menubarwrapper.cxx.gcc43~	2007-07-10 17:12:46.000000000 +0200
+++ framework/source/uielement/menubarwrapper.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -164,7 +164,7 @@
 
 void SAL_CALL MenuBarWrapper::dispose() throw (::com::sun::star::uno::RuntimeException)
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+   ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     com::sun::star::lang::EventObject aEvent( xThis );
     m_aListenerContainer.disposeAndClear( aEvent );
@@ -195,7 +195,7 @@
         rtl::OUString aModuleIdentifier;
         UIConfigElementWrapperBase::initialize( aArguments );
 
-        Reference< XFrame > xFrame( m_xWeakFrame );
+       ::com::sun::star::uno::Reference< XFrame > xFrame( m_xWeakFrame );
         if ( xFrame.is() && m_xConfigSource.is() )
         {
             // Create VCL menubar which will be filled with settings data
@@ -206,8 +206,8 @@
                 pVCLMenuBar = new MenuBar();
             }
                 
-            Reference< XModuleManager > xModuleManager;
-            xModuleManager = Reference< XModuleManager >( 
+           ::com::sun::star::uno::Reference< XModuleManager > xModuleManager;
+            xModuleManager =::com::sun::star::uno::Reference< XModuleManager >( 
                 getServiceFactory()->createInstance( 
                     SERVICENAME_MODULEMANAGER ), UNO_QUERY_THROW );
 
@@ -225,7 +225,7 @@
                 if ( m_xConfigData.is() )
                 {
                     // Fill menubar with container contents
-	                Reference< XURLTransformer > xTrans( getServiceFactory()->createInstance( 
+	               ::com::sun::star::uno::Reference< XURLTransformer > xTrans( getServiceFactory()->createInstance( 
                                                     rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 
                                                     "com.sun.star.util.URLTransformer" ))), UNO_QUERY );
                     USHORT nId = 1;
@@ -253,7 +253,7 @@
                 // interaction which is done by the menu bar manager. This must be requested by a special property called "MenuOnly". Be careful
                 // a menu bar created with this property is not fully supported. It must be attached to a real menu bar manager to have full 
                 // support. This feature is currently used for "Inplace editing"!
-                Reference< XDispatchProvider > xDispatchProvider;
+               ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider;
                 
                 // #110897# 
                 MenuBarManager* pMenuBarManager = new MenuBarManager( getServiceFactory(), 
@@ -264,13 +264,13 @@
                                                                       sal_False, 
                                                                       sal_True );
                 
-				m_xMenuBarManager = Reference< XComponent >( static_cast< OWeakObject *>( pMenuBarManager ), UNO_QUERY );
+				m_xMenuBarManager =::com::sun::star::uno::Reference< XComponent >( static_cast< OWeakObject *>( pMenuBarManager ), UNO_QUERY );
             }
             
             // Initialize toolkit menu bar implementation to have awt::XMenuBar for data exchange.
             // Don't use this toolkit menu bar or one of its functions. It is only used as a data container!
             pAwtMenuBar = new VCLXMenuBar( pVCLMenuBar );
-            m_xMenuBar = Reference< XMenuBar >( static_cast< OWeakObject *>( pAwtMenuBar ), UNO_QUERY );
+            m_xMenuBar =::com::sun::star::uno::Reference< XMenuBar >( static_cast< OWeakObject *>( pAwtMenuBar ), UNO_QUERY );
         }
     }
 }
@@ -306,7 +306,7 @@
     }
 }
 
-void SAL_CALL MenuBarWrapper::setSettings( const Reference< XIndexAccess >& xSettings ) throw ( RuntimeException )
+void SAL_CALL MenuBarWrapper::setSettings( const::com::sun::star::uno::Reference< XIndexAccess >& xSettings ) throw ( RuntimeException )
 {
     ResetableGuard aLock( m_aLock );
     
@@ -316,16 +316,16 @@
     if ( xSettings.is() )
     {
         // Create a copy of the data if the container is not const
-        Reference< XIndexReplace > xReplace( xSettings, UNO_QUERY );
+       ::com::sun::star::uno::Reference< XIndexReplace > xReplace( xSettings, UNO_QUERY );
         if ( xReplace.is() )
-            m_xConfigData = Reference< XIndexAccess >( static_cast< OWeakObject * >( new ConstItemContainer( xSettings ) ), UNO_QUERY );
+            m_xConfigData =::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject * >( new ConstItemContainer( xSettings ) ), UNO_QUERY );
         else
             m_xConfigData = xSettings;
 
         if ( m_xConfigSource.is() && m_bPersistent )
         {
             OUString aResourceURL( m_aResourceURL );
-            Reference< XUIConfigurationManager > xUICfgMgr( m_xConfigSource );
+           ::com::sun::star::uno::Reference< XUIConfigurationManager > xUICfgMgr( m_xConfigSource );
             
             aLock.unlock();
             
@@ -348,7 +348,7 @@
     }    
 }
 
-Reference< XIndexAccess > SAL_CALL MenuBarWrapper::getSettings( sal_Bool bWriteable ) throw ( RuntimeException )
+::com::sun::star::uno::Reference< XIndexAccess > SAL_CALL MenuBarWrapper::getSettings( sal_Bool bWriteable ) throw ( RuntimeException )
 {
     ResetableGuard aLock( m_aLock );
     
@@ -356,7 +356,7 @@
         throw DisposedException();
 
     if ( bWriteable )
-        return Reference< XIndexAccess >( static_cast< OWeakObject * >( new RootItemContainer( m_xConfigData ) ), UNO_QUERY );
+        return::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject * >( new RootItemContainer( m_xConfigData ) ), UNO_QUERY );
     else
         return m_xConfigData;
 }
@@ -377,7 +377,7 @@
 Type SAL_CALL MenuBarWrapper::getElementType() 
 throw (::com::sun::star::uno::RuntimeException)
 {
-    return ::getCppuType(( Reference< XDispatchProvider >*)0);
+    return ::getCppuType((::com::sun::star::uno::Reference< XDispatchProvider >*)0);
 }
 
 ::sal_Bool SAL_CALL MenuBarWrapper::hasElements() 
@@ -462,12 +462,12 @@
 }
 
 // XUIElement
-Reference< XInterface > SAL_CALL MenuBarWrapper::getRealInterface() throw ( RuntimeException )
+::com::sun::star::uno::Reference< XInterface > SAL_CALL MenuBarWrapper::getRealInterface() throw ( RuntimeException )
 {
     if ( m_bDisposed )
         throw DisposedException();
 
-    return Reference< XInterface >( m_xMenuBarManager, UNO_QUERY );
+    return::com::sun::star::uno::Reference< XInterface >( m_xMenuBarManager, UNO_QUERY );
 }
 
 } // namespace framework
--- framework/source/uielement/rootitemcontainer.cxx.gcc43~	2006-09-16 16:23:30.000000000 +0200
+++ framework/source/uielement/rootitemcontainer.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -139,7 +139,7 @@
     copyItemContainer( rConstItemContainer.m_aItemVector );
 }
 
-RootItemContainer::RootItemContainer( const Reference< XIndexAccess >& rSourceContainer )
+RootItemContainer::RootItemContainer( const::com::sun::star::uno::Reference< XIndexAccess >& rSourceContainer )
     :   ThreadHelpBase              ( )
     ,   ::cppu::OBroadcastHelperVar< ::cppu::OMultiTypeInterfaceContainerHelper, ::cppu::OMultiTypeInterfaceContainerHelper::keyType >( m_aLock.getShareableOslMutex() )
     ,   ::cppu::OPropertySetHelper  ( *(static_cast< ::cppu::OBroadcastHelper* >(this)) )
@@ -148,7 +148,7 @@
     // We also have to copy the UIName property
     try
     {
-        Reference< XPropertySet > xPropSet( rSourceContainer, UNO_QUERY );
+       ::com::sun::star::uno::Reference< XPropertySet > xPropSet( rSourceContainer, UNO_QUERY );
         if ( xPropSet.is() )
         {
             rtl::OUString aUIName;
@@ -171,7 +171,7 @@
                 if ( a >>= aPropSeq )
                 {
                     sal_Int32 nContainerIndex = -1;
-                    Reference< XIndexAccess > xIndexAccess;
+                   ::com::sun::star::uno::Reference< XIndexAccess > xIndexAccess;
                     for ( sal_Int32 j = 0; j < aPropSeq.getLength(); j++ )
                     {
                         if ( aPropSeq[j].Name.equalsAscii( "ItemDescriptorContainer" ))
@@ -206,7 +206,7 @@
     {
         sal_Int32 nContainerIndex = -1;
         Sequence< PropertyValue > aPropSeq( rSourceVector[i] );
-        Reference< XIndexAccess > xIndexAccess;
+       ::com::sun::star::uno::Reference< XIndexAccess > xIndexAccess;
         for ( sal_Int32 j = 0; j < aPropSeq.getLength(); j++ )
         {
             if ( aPropSeq[j].Name.equalsAscii( "ItemDescriptorContainer" ))
@@ -224,9 +224,9 @@
     }
 }
 
-Reference< XIndexAccess > RootItemContainer::deepCopyContainer( const Reference< XIndexAccess >& rSubContainer )
+::com::sun::star::uno::Reference< XIndexAccess > RootItemContainer::deepCopyContainer( const::com::sun::star::uno::Reference< XIndexAccess >& rSubContainer )
 {
-    Reference< XIndexAccess > xReturn;
+   ::com::sun::star::uno::Reference< XIndexAccess > xReturn;
     if ( rSubContainer.is() )
     {
         ConstItemContainer* pSource = ConstItemContainer::GetImplementation( rSubContainer );
@@ -235,7 +235,7 @@
             pSubContainer = new ItemContainer( *pSource, m_aShareMutex );
         else
             pSubContainer = new ItemContainer( rSubContainer, m_aShareMutex );
-        xReturn = Reference< XIndexAccess >( static_cast< OWeakObject* >( pSubContainer ), UNO_QUERY );
+        xReturn =::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject* >( pSubContainer ), UNO_QUERY );
     }
 
     return xReturn;
@@ -353,13 +353,13 @@
 				                        (OWeakObject *)this, 2 );
 }
 
-Reference< XInterface > SAL_CALL RootItemContainer::createInstanceWithContext( const Reference< XComponentContext >& ) 
+::com::sun::star::uno::Reference< XInterface > SAL_CALL RootItemContainer::createInstanceWithContext( const::com::sun::star::uno::Reference< XComponentContext >& ) 
 throw ( Exception, RuntimeException)
 {
     return (OWeakObject *)(new ItemContainer( m_aShareMutex ));
 }
 
-Reference< XInterface > SAL_CALL RootItemContainer::createInstanceWithArgumentsAndContext( const Sequence< Any >&, const Reference< XComponentContext >& )
+::com::sun::star::uno::Reference< XInterface > SAL_CALL RootItemContainer::createInstanceWithArgumentsAndContext( const Sequence< Any >&, const::com::sun::star::uno::Reference< XComponentContext >& )
 throw (Exception, RuntimeException)
 {
     return (OWeakObject *)(new ItemContainer( m_aShareMutex ));
--- framework/source/uielement/spinfieldtoolbarcontroller.cxx.gcc43~	2007-07-10 17:13:01.000000000 +0200
+++ framework/source/uielement/spinfieldtoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -236,8 +236,8 @@
 // ------------------------------------------------------------------
 
 SpinfieldToolbarController::SpinfieldToolbarController( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >&               rFrame,
+    const::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const::com::sun::star::uno::Reference< XFrame >&               rFrame,
     ToolBox*                                 pToolbar,
     USHORT                                   nID,
     sal_Int32                                nWidth,
@@ -289,8 +289,8 @@
 void SAL_CALL SpinfieldToolbarController::execute( sal_Int16 KeyModifier )
 throw ( RuntimeException )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+   ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+   ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     OUString                     aCommandURL;
     OUString                     aSpinfieldText;
     ::com::sun::star::util::URL  aTargetURL;
--- framework/source/uielement/statusbarwrapper.cxx.gcc43~	2006-09-16 16:24:44.000000000 +0200
+++ framework/source/uielement/statusbarwrapper.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -141,7 +141,7 @@
 
 void SAL_CALL StatusBarWrapper::dispose() throw (::com::sun::star::uno::RuntimeException)
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     com::sun::star::lang::EventObject aEvent( xThis );
     m_aListenerContainer.disposeAndClear( aEvent );
@@ -174,7 +174,7 @@
     {
         UIConfigElementWrapperBase::initialize( aArguments );
 
-        Reference< XFrame > xFrame( m_xWeakFrame );
+        ::com::sun::star::uno::Reference< XFrame > xFrame( m_xWeakFrame );
         if ( xFrame.is() && m_xConfigSource.is() )
         {
             // Create VCL based toolbar which will be filled with settings data
@@ -190,7 +190,7 @@
                     pStatusBar = new FrameworkStatusBar( pWindow, nStyles );
                     pStatusBarManager = new StatusBarManager( m_xServiceFactory, xFrame, m_aResourceURL, pStatusBar );
                     ((FrameworkStatusBar*)pStatusBar)->SetStatusBarManager( pStatusBarManager );
-                    m_xStatusBarManager = Reference< XComponent >( static_cast< OWeakObject *>( pStatusBarManager ), UNO_QUERY );
+                    m_xStatusBarManager = ::com::sun::star::uno::Reference< XComponent >( static_cast< OWeakObject *>( pStatusBarManager ), UNO_QUERY );
                     pStatusBar->SetUniqueId( HID_STATUSBAR );
                 }
             }
@@ -237,7 +237,7 @@
     }
 }
 
-void SAL_CALL StatusBarWrapper::setSettings( const Reference< XIndexAccess >& xSettings ) throw ( RuntimeException )
+void SAL_CALL StatusBarWrapper::setSettings( const ::com::sun::star::uno::Reference< XIndexAccess >& xSettings ) throw ( RuntimeException )
 {
     ResetableGuard aLock( m_aLock );
     
@@ -247,16 +247,16 @@
     if ( xSettings.is() )
     {
         // Create a copy of the data if the container is not const
-        Reference< XIndexReplace > xReplace( xSettings, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XIndexReplace > xReplace( xSettings, UNO_QUERY );
         if ( xReplace.is() )
-            m_xConfigData = Reference< XIndexAccess >( static_cast< OWeakObject * >( new ConstItemContainer( xSettings ) ), UNO_QUERY );
+            m_xConfigData = ::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject * >( new ConstItemContainer( xSettings ) ), UNO_QUERY );
         else
             m_xConfigData = xSettings;
 
         if ( m_xConfigSource.is() && m_bPersistent )
         {
             OUString aResourceURL( m_aResourceURL );
-            Reference< XUIConfigurationManager > xUICfgMgr( m_xConfigSource );
+            ::com::sun::star::uno::Reference< XUIConfigurationManager > xUICfgMgr( m_xConfigSource );
             
             aLock.unlock();
             
@@ -271,7 +271,7 @@
     }    
 }
 
-Reference< XIndexAccess > SAL_CALL StatusBarWrapper::getSettings( sal_Bool bWriteable ) throw ( RuntimeException )
+::com::sun::star::uno::Reference< XIndexAccess > SAL_CALL StatusBarWrapper::getSettings( sal_Bool bWriteable ) throw ( RuntimeException )
 {
     ResetableGuard aLock( m_aLock );
     
@@ -279,12 +279,12 @@
         throw DisposedException();
 
     if ( bWriteable )
-        return Reference< XIndexAccess >( static_cast< OWeakObject * >( new RootItemContainer( m_xConfigData ) ), UNO_QUERY );
+        return ::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject * >( new RootItemContainer( m_xConfigData ) ), UNO_QUERY );
     else
         return m_xConfigData;
 }
 
-Reference< XInterface > SAL_CALL StatusBarWrapper::getRealInterface() throw ( RuntimeException )
+::com::sun::star::uno::Reference< XInterface > SAL_CALL StatusBarWrapper::getRealInterface() throw ( RuntimeException )
 {
     ResetableGuard aLock( m_aLock );
     
@@ -295,11 +295,11 @@
         {
             Window* pWindow = (Window *)pStatusBarManager->GetStatusBar();
             if ( pWindow )
-                return Reference< XInterface >( VCLUnoHelper::GetInterface( pWindow ), UNO_QUERY );
+                return ::com::sun::star::uno::Reference< XInterface >( VCLUnoHelper::GetInterface( pWindow ), UNO_QUERY );
         }
     }
 
-    return Reference< XInterface >();
+    return ::com::sun::star::uno::Reference< XInterface >();
 }
 
 } // namespace framework
--- framework/source/uielement/statusindicatorinterfacewrapper.cxx.gcc43~	2006-09-16 16:24:59.000000000 +0200
+++ framework/source/uielement/statusindicatorinterfacewrapper.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -99,7 +99,7 @@
     sal_Int32              nRange ) 
 throw( ::com::sun::star::uno::RuntimeException )
 {
-    Reference< XComponent > xComp( m_xStatusIndicatorImpl );
+    ::com::sun::star::uno::Reference< XComponent > xComp( m_xStatusIndicatorImpl );
     if ( xComp.is() )
     {
         ProgressBarWrapper* pProgressBar = (ProgressBarWrapper*)xComp.get();
@@ -111,7 +111,7 @@
 void SAL_CALL StatusIndicatorInterfaceWrapper::end() 
 throw( ::com::sun::star::uno::RuntimeException )
 {
-    Reference< XComponent > xComp( m_xStatusIndicatorImpl );
+    ::com::sun::star::uno::Reference< XComponent > xComp( m_xStatusIndicatorImpl );
     if ( xComp.is() )
     {
         ProgressBarWrapper* pProgressBar = (ProgressBarWrapper*)xComp.get();
@@ -123,7 +123,7 @@
 void SAL_CALL StatusIndicatorInterfaceWrapper::reset() 
 throw( ::com::sun::star::uno::RuntimeException )
 {
-    Reference< XComponent > xComp( m_xStatusIndicatorImpl );
+    ::com::sun::star::uno::Reference< XComponent > xComp( m_xStatusIndicatorImpl );
     if ( xComp.is() )
     {
         ProgressBarWrapper* pProgressBar = (ProgressBarWrapper*)xComp.get();
@@ -136,7 +136,7 @@
     const ::rtl::OUString& sText ) 
 throw( ::com::sun::star::uno::RuntimeException )
 {
-    Reference< XComponent > xComp( m_xStatusIndicatorImpl );
+    ::com::sun::star::uno::Reference< XComponent > xComp( m_xStatusIndicatorImpl );
     if ( xComp.is() )
     {
         ProgressBarWrapper* pProgressBar = (ProgressBarWrapper*)xComp.get();
@@ -149,7 +149,7 @@
     sal_Int32 nValue ) 
 throw( ::com::sun::star::uno::RuntimeException )
 {
-    Reference< XComponent > xComp( m_xStatusIndicatorImpl );
+    ::com::sun::star::uno::Reference< XComponent > xComp( m_xStatusIndicatorImpl );
     if ( xComp.is() )
     {
         ProgressBarWrapper* pProgressBar = (ProgressBarWrapper*)xComp.get();
--- framework/source/uielement/togglebuttontoolbarcontroller.cxx.gcc43~	2007-07-10 17:13:16.000000000 +0200
+++ framework/source/uielement/togglebuttontoolbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -112,8 +112,8 @@
 // ------------------------------------------------------------------
 
 ToggleButtonToolbarController::ToggleButtonToolbarController( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >&               rFrame,
+    const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const ::com::sun::star::uno::Reference< XFrame >&               rFrame,
     ToolBox*                                 pToolbar,
     USHORT                                   nID,
     Style                                    eStyle,
@@ -147,8 +147,8 @@
 void SAL_CALL ToggleButtonToolbarController::execute( sal_Int16 KeyModifier )
 throw ( RuntimeException )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+    ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+    ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     OUString                     aCommandURL;
     OUString                     aSelectedText;
     ::com::sun::star::util::URL  aTargetURL;
--- framework/source/uielement/toolbarmanager.cxx.gcc43~	2007-08-01 13:09:39.000000000 +0200
+++ framework/source/uielement/toolbarmanager.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -220,21 +220,21 @@
 class ImageOrientationListener : public svt::FrameStatusListener
 {
     public:
-        ImageOrientationListener( const Reference< XStatusListener > rReceiver,
-                                  const Reference< XMultiServiceFactory > rServiceManager,
-                                  const Reference< XFrame > rFrame );
+        ImageOrientationListener( const ::com::sun::star::uno::Reference< XStatusListener > rReceiver,
+                                  const ::com::sun::star::uno::Reference< XMultiServiceFactory > rServiceManager,
+                                  const ::com::sun::star::uno::Reference< XFrame > rFrame );
         virtual ~ImageOrientationListener();
 
 		virtual void SAL_CALL statusChanged( const ::com::sun::star::frame::FeatureStateEvent& Event ) throw ( ::com::sun::star::uno::RuntimeException );
 
     private:
-        Reference< XStatusListener > m_xReceiver;
+        ::com::sun::star::uno::Reference< XStatusListener > m_xReceiver;
 };
 
 ImageOrientationListener::ImageOrientationListener(
-    const Reference< XStatusListener > rReceiver,
-    const Reference< XMultiServiceFactory > rServiceManager,
-    const Reference< XFrame > rFrame ) :
+    const ::com::sun::star::uno::Reference< XStatusListener > rReceiver,
+    const ::com::sun::star::uno::Reference< XMultiServiceFactory > rServiceManager,
+    const ::com::sun::star::uno::Reference< XFrame > rFrame ) :
     FrameStatusListener( rServiceManager, rFrame ),
     m_xReceiver( rReceiver )
 {
@@ -268,7 +268,7 @@
 {
     ::com::sun::star::uno::Reference< ::com::sun::star::frame::XLayoutManager > xLayoutManager;
 
-    Reference< XPropertySet > xPropSet( rFrame, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XPropertySet > xPropSet( rFrame, UNO_QUERY );
     if ( xPropSet.is() )
     {
         try
@@ -310,8 +310,8 @@
 											::com::sun::star::lang::XEventListener
 										)
 
-ToolBarManager::ToolBarManager( const Reference< XMultiServiceFactory >& rServiceManager,
-                                const Reference< XFrame >& rFrame,
+ToolBarManager::ToolBarManager( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+                                const ::com::sun::star::uno::Reference< XFrame >& rFrame,
                                 const rtl::OUString& rResourceName,
                                 ToolBar* pToolBar ) :
     ThreadHelpBase( &Application::GetSolarMutex() ),
@@ -342,7 +342,7 @@
         ((SystemWindow *)pWindow)->GetTaskPaneList()->AddWindow( m_pToolBar );
 
     if ( m_xServiceManager.is() )
-        m_xToolbarControllerRegistration = Reference< XUIControllerRegistration >(
+        m_xToolbarControllerRegistration = ::com::sun::star::uno::Reference< XUIControllerRegistration >(
                                                     m_xServiceManager->createInstance( SERVICENAME_TOOLBARCONTROLLERFACTORY ),
                                                 UNO_QUERY );
 
@@ -548,7 +548,7 @@
         {
             try
             {
-                Reference< XUpdatable > xUpdatable( pIter->second, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XUpdatable > xUpdatable( pIter->second, UNO_QUERY );
                 if ( xUpdatable.is() )
                     xUpdatable->update();
             }
@@ -604,7 +604,7 @@
 			try
 			{
 				m_xDocImageManager->removeConfigurationListener(
-					Reference< XUIConfigurationListener >(
+					::com::sun::star::uno::Reference< XUIConfigurationListener >(
 						static_cast< OWeakObject* >( this ), UNO_QUERY ));
 			}
 			catch ( Exception& )
@@ -617,7 +617,7 @@
             try
             {
                 m_xModuleImageManager->removeConfigurationListener(
-                    Reference< XUIConfigurationListener >(
+                    ::com::sun::star::uno::Reference< XUIConfigurationListener >(
                         static_cast< OWeakObject* >( this ), UNO_QUERY ));
             }
             catch ( Exception& )
@@ -636,7 +636,7 @@
         m_xDocImageManager.clear();
         m_xModuleImageManager.clear();
 
-        if ( Source.Source == Reference< XInterface >( m_xFrame, UNO_QUERY ))
+        if ( Source.Source == ::com::sun::star::uno::Reference< XInterface >( m_xFrame, UNO_QUERY ))
             m_xFrame.clear();
 
         m_xServiceManager.clear();
@@ -646,7 +646,7 @@
 // XComponent
 void SAL_CALL ToolBarManager::dispose() throw( RuntimeException )
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     EventObject aEvent( xThis );
     m_aListenerContainer.disposeAndClear( aEvent );
@@ -664,7 +664,7 @@
             try
             {
                 m_xDocImageManager->removeConfigurationListener(
-                    Reference< XUIConfigurationListener >(
+                    ::com::sun::star::uno::Reference< XUIConfigurationListener >(
                         static_cast< OWeakObject* >( this ), UNO_QUERY ));
             }
             catch ( Exception& )
@@ -677,7 +677,7 @@
             try
             {
                 m_xModuleImageManager->removeConfigurationListener(
-                    Reference< XUIConfigurationListener >(
+                    ::com::sun::star::uno::Reference< XUIConfigurationListener >(
                         static_cast< OWeakObject* >( this ), UNO_QUERY ));
             }
             catch ( Exception& )
@@ -695,7 +695,7 @@
         {
             try
             {
-                m_xFrame->removeFrameActionListener( Reference< XFrameActionListener >(
+                m_xFrame->removeFrameActionListener( ::com::sun::star::uno::Reference< XFrameActionListener >(
                                                         static_cast< ::cppu::OWeakObject *>( this ), UNO_QUERY ));
             }
             catch ( Exception& )
@@ -718,7 +718,7 @@
     }
 }
 
-void SAL_CALL ToolBarManager::addEventListener( const Reference< XEventListener >& xListener ) throw( RuntimeException )
+void SAL_CALL ToolBarManager::addEventListener( const ::com::sun::star::uno::Reference< XEventListener >& xListener ) throw( RuntimeException )
 {
     ResetableGuard aGuard( m_aLock );
 
@@ -726,12 +726,12 @@
     if ( m_bDisposed )
         throw DisposedException();
 
-    m_aListenerContainer.addInterface( ::getCppuType( ( const Reference< XEventListener >* ) NULL ), xListener );
+    m_aListenerContainer.addInterface( ::getCppuType( ( const ::com::sun::star::uno::Reference< XEventListener >* ) NULL ), xListener );
 }
 
-void SAL_CALL ToolBarManager::removeEventListener( const Reference< XEventListener >& xListener ) throw( RuntimeException )
+void SAL_CALL ToolBarManager::removeEventListener( const ::com::sun::star::uno::Reference< XEventListener >& xListener ) throw( RuntimeException )
 {
-    m_aListenerContainer.removeInterface( ::getCppuType( ( const Reference< XEventListener >* ) NULL ), xListener );
+    m_aListenerContainer.removeInterface( ::getCppuType( ( const ::com::sun::star::uno::Reference< XEventListener >* ) NULL ), xListener );
 }
 
 // XUIConfigurationListener
@@ -743,7 +743,7 @@
     if ( m_bDisposed )
         return;
 
-    Reference< XNameAccess > xNameAccess;
+    ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
     sal_Int16                nImageType = sal_Int16();
     sal_Int16                nCurrentImageType = getImageTypeFromBools(
                                                     SvtMiscOptions().AreCurrentSymbolsLarge(),
@@ -754,7 +754,7 @@
         ( Event.Element >>= xNameAccess ))
     {
         sal_Int16 nImageInfo( 1 );
-        Reference< XInterface > xIfacDocImgMgr( m_xDocImageManager, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XInterface > xIfacDocImgMgr( m_xDocImageManager, UNO_QUERY );
         if ( xIfacDocImgMgr == Event.Source )
             nImageInfo = 0;
 
@@ -768,7 +768,7 @@
             CommandToInfoMap::iterator pIter = m_aCommandMap.find( aCommandURL );
             if ( pIter != m_aCommandMap.end() && ( pIter->second.nImageInfo >= nImageInfo ))
             {
-                Reference< XGraphic > xGraphic;
+                ::com::sun::star::uno::Reference< XGraphic > xGraphic;
                 if ( xNameAccess->getByName( aSeq[i] ) >>= xGraphic )
                 {
                     Image aImage( xGraphic );
@@ -793,7 +793,7 @@
     if ( m_bDisposed )
         return;
 
-    Reference< XNameAccess > xNameAccess;
+    ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
     sal_Int16                nImageType = sal_Int16();
     sal_Int16                nCurrentImageType = getImageTypeFromBools(
                                                     SvtMiscOptions().AreCurrentSymbolsLarge(),
@@ -804,7 +804,7 @@
         ( Event.Element >>= xNameAccess ))
     {
         sal_Int16 nImageInfo( 1 );
-        Reference< XInterface > xIfacDocImgMgr( m_xDocImageManager, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XInterface > xIfacDocImgMgr( m_xDocImageManager, UNO_QUERY );
         if ( xIfacDocImgMgr == Event.Source )
             nImageInfo = 0;
 
@@ -821,7 +821,7 @@
                     // It is possible that we have a image at our module image manager. Before
                     // we can remove our image we have to ask our module image manager.
                     Sequence< rtl::OUString > aCmdURLSeq( 1 );
-                    Sequence< Reference< XGraphic > > aGraphicSeq;
+                    Sequence< ::com::sun::star::uno::Reference< XGraphic > > aGraphicSeq;
                     aCmdURLSeq[0] = pIter->first;
                     aGraphicSeq = m_xModuleImageManager->getImages( nImageType, aCmdURLSeq );
                     aImage = Image( aGraphicSeq[0] );
@@ -846,7 +846,7 @@
     if ( m_bDisposed )
         return;
 
-    Reference< XNameAccess > xNameAccess;
+    ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
     sal_Int16                nImageType = sal_Int16();
     sal_Int16                nCurrentImageType = getImageTypeFromBools(
                                                     SvtMiscOptions().AreCurrentSymbolsLarge(),
@@ -857,7 +857,7 @@
         ( Event.Element >>= xNameAccess ))
     {
         sal_Int16 nImageInfo( 1 );
-        Reference< XInterface > xIfacDocImgMgr( m_xDocImageManager, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XInterface > xIfacDocImgMgr( m_xDocImageManager, UNO_QUERY );
         if ( xIfacDocImgMgr == Event.Source )
             nImageInfo = 0;
 
@@ -870,7 +870,7 @@
             CommandToInfoMap::iterator pIter = m_aCommandMap.find( aSeq[i] );
             if ( pIter != m_aCommandMap.end() && ( pIter->second.nImageInfo >= nImageInfo ))
             {
-                Reference< XGraphic > xGraphic;
+                ::com::sun::star::uno::Reference< XGraphic > xGraphic;
                 if ( xNameAccess->getByName( aSeq[i] ) >>= xGraphic )
                 {
                     Image aImage( xGraphic );
@@ -901,7 +901,7 @@
     {
         try
         {
-            Reference< XComponent > xComponent( pIter->second, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XComponent > xComponent( pIter->second, UNO_QUERY );
             if ( xComponent.is() )
                 xComponent->dispose();
         }
@@ -920,8 +920,8 @@
     // Retrieve popup menu labels
     if ( !m_bModuleIdentified )
     {
-        Reference< XModuleManager > xModuleManager( m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ), UNO_QUERY_THROW );
-        Reference< XInterface > xIfac( m_xFrame, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XModuleManager > xModuleManager( m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ), UNO_QUERY_THROW );
+        ::com::sun::star::uno::Reference< XInterface > xIfac( m_xFrame, UNO_QUERY );
         try
         {
             m_bModuleIdentified = sal_True;
@@ -929,11 +929,11 @@
 
             if ( m_aModuleIdentifier.getLength() > 0 )
             {
-                Reference< XNameAccess > xNameAccess( m_xServiceManager->createInstance( SERVICENAME_UICOMMANDDESCRIPTION ), UNO_QUERY );
+                ::com::sun::star::uno::Reference< XNameAccess > xNameAccess( m_xServiceManager->createInstance( SERVICENAME_UICOMMANDDESCRIPTION ), UNO_QUERY );
                 if ( xNameAccess.is() )
                 {
                     Any a = xNameAccess->getByName( m_aModuleIdentifier );
-                    Reference< XNameAccess > xUICommands;
+                    ::com::sun::star::uno::Reference< XNameAccess > xUICommands;
                     a >>= m_xUICommandLabels;
                 }
             }
@@ -978,11 +978,11 @@
 {
     RTL_LOGFILE_CONTEXT( aLog, "framework (cd100003) ::ToolBarManager::CreateControllers" );
 
-    Reference< XMultiComponentFactory > xToolbarControllerFactory( m_xToolbarControllerRegistration, UNO_QUERY );
-    Reference< XComponentContext > xComponentContext;
-    Reference< XPropertySet > xProps( m_xServiceManager, UNO_QUERY );
-    Reference< XWindow > xToolbarWindow = VCLUnoHelper::GetInterface( m_pToolBar );
-    Reference< css::util::XURLTransformer > xTrans( m_xServiceManager->createInstance(
+    ::com::sun::star::uno::Reference< XMultiComponentFactory > xToolbarControllerFactory( m_xToolbarControllerRegistration, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponentContext > xComponentContext;
+    ::com::sun::star::uno::Reference< XPropertySet > xProps( m_xServiceManager, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XWindow > xToolbarWindow = VCLUnoHelper::GetInterface( m_pToolBar );
+    ::com::sun::star::uno::Reference< css::util::XURLTransformer > xTrans( m_xServiceManager->createInstance(
         rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))), css::uno::UNO_QUERY );
 
     css::util::URL	    aURL;
@@ -1003,7 +1003,7 @@
         rtl::OUString                aCommandURL( m_pToolBar->GetItemCommand( nId ));
         sal_Bool                     bInit( sal_True );
         sal_Bool                     bCreate( sal_True );
-        Reference< XStatusListener > xController;
+        ::com::sun::star::uno::Reference< XStatusListener > xController;
 
         svt::ToolboxController* pController( 0 );
 
@@ -1049,7 +1049,7 @@
                 }
 
                 Sequence< Any > aArgs( comphelper::containerToSequence( aPropertyVector ));
-                xController = Reference< XStatusListener >( xToolbarControllerFactory->createInstanceWithArgumentsAndContext(
+                xController = ::com::sun::star::uno::Reference< XStatusListener >( xToolbarControllerFactory->createInstanceWithArgumentsAndContext(
                                                                 aCommandURL, aArgs, xComponentContext ),
                                                             UNO_QUERY );
                 bInit = sal_False; // Initialization is done through the factory service
@@ -1069,7 +1069,7 @@
                     // retrieve additional parameters
                     ::rtl::OUString aControlType = static_cast< AddonsParams* >( m_pToolBar->GetItemData( nId ))->aControlType;
 
-                    Reference< XStatusListener > xStatusListener(
+                    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener(
                         ToolBarMerger::CreateController( m_xServiceManager,
                                                          m_xFrame,
                                                          m_pToolBar,
@@ -1082,13 +1082,13 @@
                 }
                 else
                 {
-                    xController = Reference< XStatusListener >(
+                    xController = ::com::sun::star::uno::Reference< XStatusListener >(
                         new GenericToolbarController( m_xServiceManager, m_xFrame, m_pToolBar, nId, aCommandURL ));
                 }
             }
             else if ( pController )
             {
-                xController = Reference< XStatusListener >( static_cast< ::cppu::OWeakObject *>( pController ), UNO_QUERY );
+                xController = ::com::sun::star::uno::Reference< XStatusListener >( static_cast< ::cppu::OWeakObject *>( pController ), UNO_QUERY );
             }
         }
 
@@ -1097,7 +1097,7 @@
         m_aControllerMap[ nId ] = xController;
 
         // Fill sub-toolbars into our hash-map
-        Reference< XSubToolbarController > xSubToolBar( xController, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XSubToolbarController > xSubToolBar( xController, UNO_QUERY );
         if ( xSubToolBar.is() && xSubToolBar->opensSubToolbar() )
         {
             rtl::OUString aSubToolBarName = xSubToolBar->getSubToolbarName();
@@ -1118,7 +1118,7 @@
             }
         }
 
-        Reference< XInitialization > xInit( xController, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XInitialization > xInit( xController, UNO_QUERY );
         if ( xInit.is() )
         {
             if ( bInit )
@@ -1150,10 +1150,10 @@
             }
 
             // Request a item window from the toolbar controller and set it at the VCL toolbar
-            Reference< XToolbarController > xTbxController( xController, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XToolbarController > xTbxController( xController, UNO_QUERY );
             if ( xTbxController.is() && xToolbarWindow.is() )
             {
-                Reference< XWindow > xWindow = xTbxController->createItemWindow( xToolbarWindow );
+                ::com::sun::star::uno::Reference< XWindow > xWindow = xTbxController->createItemWindow( xToolbarWindow );
                 if ( xWindow.is() )
                 {
                     Window* pItemWin = VCLUnoHelper::GetWindow( xWindow );
@@ -1178,7 +1178,7 @@
     if ( !m_bFrameActionRegistered && m_xFrame.is() )
     {
         m_bFrameActionRegistered = sal_True;
-        m_xFrame->addFrameActionListener( Reference< XFrameActionListener >(
+        m_xFrame->addFrameActionListener( ::com::sun::star::uno::Reference< XFrameActionListener >(
                                             static_cast< ::cppu::OWeakObject *>( this ), UNO_QUERY ));
     }
 }
@@ -1189,10 +1189,10 @@
     {
         m_bImageOrientationRegistered = sal_True;
         ImageOrientationListener* pImageOrientation = new ImageOrientationListener(
-            Reference< XStatusListener >( static_cast< ::cppu::OWeakObject *>( this ), UNO_QUERY ),
+            ::com::sun::star::uno::Reference< XStatusListener >( static_cast< ::cppu::OWeakObject *>( this ), UNO_QUERY ),
             m_xServiceManager,
             m_xFrame );
-        m_xImageOrientationListener = Reference< XComponent >( static_cast< ::cppu::OWeakObject *>(
+        m_xImageOrientationListener = ::com::sun::star::uno::Reference< XComponent >( static_cast< ::cppu::OWeakObject *>(
                                         pImageOrientation ), UNO_QUERY );
         pImageOrientation->addStatusListener(
             rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:ImageOrientation" )));
@@ -1219,7 +1219,7 @@
     return nItemBits;
 }
 
-void ToolBarManager::FillToolbar( const Reference< XIndexAccess >& rItemContainer )
+void ToolBarManager::FillToolbar( const ::com::sun::star::uno::Reference< XIndexAccess >& rItemContainer )
 {
     OString aTbxName = rtl::OUStringToOString( m_aResourceName, RTL_TEXTENCODING_ASCII_US );
 
@@ -1234,20 +1234,20 @@
     USHORT    nId( 1 );
     OUString  aHelpIdPrefix( RTL_CONSTASCII_USTRINGPARAM( HELPID_PREFIX ));
 
-    Reference< XModuleManager > xModuleManager( Reference< XModuleManager >(
+    ::com::sun::star::uno::Reference< XModuleManager > xModuleManager( ::com::sun::star::uno::Reference< XModuleManager >(
                                                     m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ), UNO_QUERY ));
     if ( !m_xDocImageManager.is() )
     {
-        Reference< XModel > xModel( GetModelFromFrame() );
+        ::com::sun::star::uno::Reference< XModel > xModel( GetModelFromFrame() );
         if ( xModel.is() )
         {
-            Reference< XUIConfigurationManagerSupplier > xSupplier( xModel, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XUIConfigurationManagerSupplier > xSupplier( xModel, UNO_QUERY );
             if ( xSupplier.is() )
             {
-                Reference< XUIConfigurationManager > xDocUICfgMgr( xSupplier->getUIConfigurationManager(), UNO_QUERY );
-                m_xDocImageManager = Reference< XImageManager >( xDocUICfgMgr->getImageManager(), UNO_QUERY );
+                ::com::sun::star::uno::Reference< XUIConfigurationManager > xDocUICfgMgr( xSupplier->getUIConfigurationManager(), UNO_QUERY );
+                m_xDocImageManager = ::com::sun::star::uno::Reference< XImageManager >( xDocUICfgMgr->getImageManager(), UNO_QUERY );
                 m_xDocImageManager->addConfigurationListener(
-                                        Reference< XUIConfigurationListener >(
+                                        ::com::sun::star::uno::Reference< XUIConfigurationListener >(
                                             static_cast< OWeakObject* >( this ), UNO_QUERY ));
             }
         }
@@ -1256,7 +1256,7 @@
     try
     {
         if ( xModuleManager.is() )
-            m_aModuleIdentifier = xModuleManager->identify( Reference< XInterface >( m_xFrame, UNO_QUERY ) );
+            m_aModuleIdentifier = xModuleManager->identify( ::com::sun::star::uno::Reference< XInterface >( m_xFrame, UNO_QUERY ) );
     }
     catch( Exception& )
     {
@@ -1264,12 +1264,12 @@
 
     if ( !m_xModuleImageManager.is() )
     {
-        Reference< XModuleUIConfigurationManagerSupplier > xModuleCfgMgrSupplier( m_xServiceManager->createInstance(
+        ::com::sun::star::uno::Reference< XModuleUIConfigurationManagerSupplier > xModuleCfgMgrSupplier( m_xServiceManager->createInstance(
                                                                                     SERVICENAME_MODULEUICONFIGURATIONMANAGERSUPPLIER ),
                                                                                   UNO_QUERY );
-        Reference< XUIConfigurationManager > xUICfgMgr = xModuleCfgMgrSupplier->getUIConfigurationManager( m_aModuleIdentifier );
-        m_xModuleImageManager = Reference< XImageManager >( xUICfgMgr->getImageManager(), UNO_QUERY );
-        m_xModuleImageManager->addConfigurationListener( Reference< XUIConfigurationListener >(
+        ::com::sun::star::uno::Reference< XUIConfigurationManager > xUICfgMgr = xModuleCfgMgrSupplier->getUIConfigurationManager( m_aModuleIdentifier );
+        m_xModuleImageManager = ::com::sun::star::uno::Reference< XImageManager >( xUICfgMgr->getImageManager(), UNO_QUERY );
+        m_xModuleImageManager->addConfigurationListener( ::com::sun::star::uno::Reference< XUIConfigurationListener >(
                                                             static_cast< OWeakObject* >( this ), UNO_QUERY ));
     }
 
@@ -1443,7 +1443,7 @@
 
     // Try to retrieve UIName from the container property set and set it as the title
     // if it is not empty.
-    Reference< XPropertySet > xPropSet( rItemContainer, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XPropertySet > xPropSet( rItemContainer, UNO_QUERY );
     if ( xPropSet.is() )
     {
         Any a;
@@ -1466,8 +1466,8 @@
 
     // Request images from image manager
     Sequence< rtl::OUString > aCmdURLSeq( m_aCommandMap.size() );
-    Sequence< Reference< XGraphic > > aDocGraphicSeq;
-    Sequence< Reference< XGraphic > > aModGraphicSeq;
+    Sequence< ::com::sun::star::uno::Reference< XGraphic > > aDocGraphicSeq;
+    Sequence< ::com::sun::star::uno::Reference< XGraphic > > aModGraphicSeq;
 
     sal_uInt32 i = 0;
     CommandToInfoMap::iterator pIter = m_aCommandMap.begin();
@@ -1542,7 +1542,7 @@
                 {
                     try
                     {
-                        Reference< XSubToolbarController > xController = aNotifyVector[i];
+                        ::com::sun::star::uno::Reference< XSubToolbarController > xController = aNotifyVector[i];
                         if ( xController.is() )
                             xController->functionSelected( aCommand );
                     }
@@ -1570,7 +1570,7 @@
     ToolBarControllerMap::const_iterator pIter = m_aControllerMap.find( nId );
     if ( pIter != m_aControllerMap.end() )
     {
-        Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
 
         if ( xController.is() )
             xController->click();
@@ -1590,7 +1590,7 @@
     ToolBarControllerMap::const_iterator pIter = m_aControllerMap.find( nId );
     if ( pIter != m_aControllerMap.end() )
     {
-        Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
 
         if ( xController.is() )
             xController->createPopupWindow();
@@ -1610,7 +1610,7 @@
     ToolBarControllerMap::const_iterator pIter = m_aControllerMap.find( nId );
     if ( pIter != m_aControllerMap.end() )
     {
-        Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
 
         if ( xController.is() )
             xController->doubleClick();
@@ -1663,10 +1663,10 @@
     return 0;
 }
 
-Reference< XModel > ToolBarManager::GetModelFromFrame() const
+::com::sun::star::uno::Reference< XModel > ToolBarManager::GetModelFromFrame() const
 {
-    Reference< XController > xController = m_xFrame->getController();
-    Reference< XModel > xModel;
+    ::com::sun::star::uno::Reference< XController > xController = m_xFrame->getController();
+    ::com::sun::star::uno::Reference< XModel > xModel;
     if ( xController.is() )
         xModel = xController->getModel();
 
@@ -1679,7 +1679,7 @@
 
     if ( m_xFrame.is() )
     {
-        Reference< XModel > xModel = GetModelFromFrame();
+        ::com::sun::star::uno::Reference< XModel > xModel = GetModelFromFrame();
         if ( xModel.is() )
         {
             Sequence< PropertyValue > aSeq = xModel->getArgs();
@@ -1710,12 +1710,12 @@
     ImplClearPopupMenu( pToolBar );
 
     // No config menu entries if command ".uno:ConfigureDialog" is not enabled
-    Reference< XDispatch > xDisp;
+    ::com::sun::star::uno::Reference< XDispatch > xDisp;
     com::sun::star::util::URL aURL;
     if ( m_xFrame.is() )
     {
-        Reference< XDispatchProvider > xProv( m_xFrame, UNO_QUERY );
-        Reference< XURLTransformer > xTrans( m_xServiceManager->createInstance(
+        ::com::sun::star::uno::Reference< XDispatchProvider > xProv( m_xFrame, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XURLTransformer > xTrans( m_xServiceManager->createInstance(
                                                 OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                 "com.sun.star.util.URLTransformer" ))), UNO_QUERY );
         aURL.Complete = OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:ConfigureDialog" ));
@@ -1746,7 +1746,7 @@
         {
             aPopupMenu.EnableItem( MENUITEM_TOOLBAR_DOCKTOOLBAR, sal_False );
             aPopupMenu.EnableItem( MENUITEM_TOOLBAR_DOCKALLTOOLBAR, sal_False );
-            Reference< XDockableWindow > xDockable( VCLUnoHelper::GetInterface( m_pToolBar ), UNO_QUERY );
+            ::com::sun::star::uno::Reference< XDockableWindow > xDockable( VCLUnoHelper::GetInterface( m_pToolBar ), UNO_QUERY );
             if( xDockable.is() )
                 aPopupMenu.CheckItem( MENUITEM_TOOLBAR_LOCKTOOLBARPOSITION, xDockable->isLocked() );
         }
@@ -1828,7 +1828,7 @@
 {
     // We have to hold a reference to ourself as it is possible that we will be disposed and
     // our refcount could be zero (destruction) otherwise.
-    Reference< XInterface > xInterface( static_cast< OWeakObject* >( this ), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xInterface( static_cast< OWeakObject* >( this ), UNO_QUERY );
 
     {
         // The guard must be in its own context as the we can get destroyed when our
@@ -1842,12 +1842,12 @@
         {
             case MENUITEM_TOOLBAR_CUSTOMIZETOOLBAR:
             {
-                Reference< XDispatch > xDisp;
+                ::com::sun::star::uno::Reference< XDispatch > xDisp;
                 com::sun::star::util::URL aURL;
                 if ( m_xFrame.is() )
                 {
-                    Reference< XDispatchProvider > xProv( m_xFrame, UNO_QUERY );
-                    Reference< XURLTransformer > xTrans( m_xServiceManager->createInstance(
+                    ::com::sun::star::uno::Reference< XDispatchProvider > xProv( m_xFrame, UNO_QUERY );
+                    ::com::sun::star::uno::Reference< XURLTransformer > xTrans( m_xServiceManager->createInstance(
                                                             OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                             "com.sun.star.util.URLTransformer" ))), UNO_QUERY );
                     aURL.Complete = OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:ConfigureDialog" ));
@@ -1871,7 +1871,7 @@
 
             case MENUITEM_TOOLBAR_DOCKTOOLBAR:
             {
-                Reference< XLayoutManager > xLayoutManager = getLayoutManagerFromFrame( m_xFrame );
+                ::com::sun::star::uno::Reference< XLayoutManager > xLayoutManager = getLayoutManagerFromFrame( m_xFrame );
                 if ( xLayoutManager.is() )
                 {
                     ::com::sun::star::awt::Point aPoint;
@@ -1885,7 +1885,7 @@
 
             case MENUITEM_TOOLBAR_DOCKALLTOOLBAR:
             {
-                Reference< XLayoutManager > xLayoutManager = getLayoutManagerFromFrame( m_xFrame );
+                ::com::sun::star::uno::Reference< XLayoutManager > xLayoutManager = getLayoutManagerFromFrame( m_xFrame );
                 if ( xLayoutManager.is() )
                 {
                     ::com::sun::star::awt::Point aPoint;
@@ -1897,10 +1897,10 @@
 
             case MENUITEM_TOOLBAR_LOCKTOOLBARPOSITION:
             {
-                Reference< XLayoutManager > xLayoutManager = getLayoutManagerFromFrame( m_xFrame );
+                ::com::sun::star::uno::Reference< XLayoutManager > xLayoutManager = getLayoutManagerFromFrame( m_xFrame );
                 if ( xLayoutManager.is() )
                 {
-                    Reference< XDockableWindow > xDockable( VCLUnoHelper::GetInterface( m_pToolBar ), UNO_QUERY );
+                    ::com::sun::star::uno::Reference< XDockableWindow > xDockable( VCLUnoHelper::GetInterface( m_pToolBar ), UNO_QUERY );
 
                     if( xDockable->isLocked() )
                         xLayoutManager->unlockWindow( m_aResourceName );
@@ -1930,13 +1930,13 @@
                     // toggle toolbar button visibility
                     rtl::OUString aCommand = pMenu->GetItemCommand( nId );
 
-                    Reference< XLayoutManager > xLayoutManager = getLayoutManagerFromFrame( m_xFrame );
+                    ::com::sun::star::uno::Reference< XLayoutManager > xLayoutManager = getLayoutManagerFromFrame( m_xFrame );
                     if ( xLayoutManager.is() )
                     {
-                        Reference< XUIElementSettings > xUIElementSettings( xLayoutManager->getElement( m_aResourceName ), UNO_QUERY );
+                        ::com::sun::star::uno::Reference< XUIElementSettings > xUIElementSettings( xLayoutManager->getElement( m_aResourceName ), UNO_QUERY );
                         if ( xUIElementSettings.is() )
                         {
-                            Reference< XIndexContainer > xItemContainer( xUIElementSettings->getSettings( sal_True ), UNO_QUERY );
+                            ::com::sun::star::uno::Reference< XIndexContainer > xItemContainer( xUIElementSettings->getSettings( sal_True ), UNO_QUERY );
                             sal_Int32 nCount = xItemContainer->getCount();
                             for ( sal_Int32 i = 0; i < nCount; i++ )
                             {
@@ -1968,11 +1968,11 @@
                                         try
                                         {
                                             xItemContainer->replaceByIndex( i, makeAny( aProp ));
-                                            xUIElementSettings->setSettings( Reference< XIndexAccess >( xItemContainer, UNO_QUERY ));
-                                            Reference< XPropertySet > xPropSet( xUIElementSettings, UNO_QUERY );
+                                            xUIElementSettings->setSettings( ::com::sun::star::uno::Reference< XIndexAccess >( xItemContainer, UNO_QUERY ));
+                                            ::com::sun::star::uno::Reference< XPropertySet > xPropSet( xUIElementSettings, UNO_QUERY );
                                             if ( xPropSet.is() )
                                             {
-                                                Reference< XUIConfigurationPersistence > xUICfgMgr;
+                                                ::com::sun::star::uno::Reference< XUIConfigurationPersistence > xUICfgMgr;
                                                 Any a = xPropSet->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                                                         "ConfigurationSource" )));
                                                 if (( a >>= xUICfgMgr ) && ( xUICfgMgr.is() ))
@@ -2013,7 +2013,7 @@
     ToolBarControllerMap::const_iterator pIter = m_aControllerMap.find( nId );
     if ( pIter != m_aControllerMap.end() )
     {
-        Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XToolbarController > xController( pIter->second, UNO_QUERY );
 
         if ( xController.is() )
             xController->execute( nKeyModifier );
@@ -2096,7 +2096,7 @@
 {
     // The guard must be in its own context as the we can get destroyed when our
     // own xInterface reference get destroyed!
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     ResetableGuard aGuard( m_aLock );
 
--- framework/source/uielement/toolbarwrapper.cxx.gcc43~	2006-09-16 16:26:22.000000000 +0200
+++ framework/source/uielement/toolbarwrapper.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -132,7 +132,7 @@
 namespace framework
 {
 
-ToolBarWrapper::ToolBarWrapper( const Reference< XMultiServiceFactory >& xServiceManager ) :
+ToolBarWrapper::ToolBarWrapper( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceManager ) :
     UIConfigElementWrapperBase( UIElementType::TOOLBAR ),
     m_xServiceManager( xServiceManager )
 {
@@ -169,7 +169,7 @@
 // XComponent
 void SAL_CALL ToolBarWrapper::dispose() throw ( RuntimeException )
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
 	{
 		ResetableGuard aLock( m_aLock );
@@ -218,7 +218,7 @@
             }
         }
 
-        Reference< XFrame > xFrame( m_xWeakFrame );
+        ::com::sun::star::uno::Reference< XFrame > xFrame( m_xWeakFrame );
         if ( xFrame.is() && m_xConfigSource.is() )
         {
             // Create VCL based toolbar which will be filled with settings data
@@ -235,7 +235,7 @@
                     m_xToolBarWindow = VCLUnoHelper::GetInterface( pToolBar );
                     pToolBarManager = new ToolBarManager( m_xServiceManager, xFrame, m_aResourceURL, pToolBar );
                     pToolBar->SetToolBarManager( pToolBarManager );
-                    m_xToolBarManager = Reference< XComponent >( static_cast< OWeakObject *>( pToolBarManager ), UNO_QUERY );
+                    m_xToolBarManager = ::com::sun::star::uno::Reference< XComponent >( static_cast< OWeakObject *>( pToolBarManager ), UNO_QUERY );
                     pToolBar->WillUsePopupMode( bPopupMode );
                 }
             }
@@ -324,7 +324,7 @@
     }
 }
 
-Reference< XIndexAccess > SAL_CALL ToolBarWrapper::getSettings( sal_Bool bWriteable ) throw (::com::sun::star::uno::RuntimeException)
+::com::sun::star::uno::Reference< XIndexAccess > SAL_CALL ToolBarWrapper::getSettings( sal_Bool bWriteable ) throw (::com::sun::star::uno::RuntimeException)
 {
     ResetableGuard aLock( m_aLock );
     
@@ -332,7 +332,7 @@
         throw DisposedException();
 
     if ( bWriteable )
-        return Reference< XIndexAccess >( static_cast< OWeakObject * >( new RootItemContainer( m_xConfigData ) ), UNO_QUERY );
+        return ::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject * >( new RootItemContainer( m_xConfigData ) ), UNO_QUERY );
     else
         return m_xConfigData;
 }
@@ -347,16 +347,16 @@
     if ( xSettings.is() )
     {
         // Create a copy of the data if the container is not const
-        Reference< XIndexReplace > xReplace( xSettings, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XIndexReplace > xReplace( xSettings, UNO_QUERY );
         if ( xReplace.is() )
-            m_xConfigData = Reference< XIndexAccess >( static_cast< OWeakObject * >( new ConstItemContainer( xSettings ) ), UNO_QUERY );
+            m_xConfigData = ::com::sun::star::uno::Reference< XIndexAccess >( static_cast< OWeakObject * >( new ConstItemContainer( xSettings ) ), UNO_QUERY );
         else
             m_xConfigData = xSettings;
 
         if ( m_xConfigSource.is() && m_bPersistent )
         {
             OUString aResourceURL( m_aResourceURL );
-            Reference< XUIConfigurationManager > xUICfgMgr( m_xConfigSource );
+            ::com::sun::star::uno::Reference< XUIConfigurationManager > xUICfgMgr( m_xConfigSource );
             
             aLock.unlock();
             
@@ -392,7 +392,7 @@
 }
 
 // XUIElement interface
-Reference< XInterface > SAL_CALL ToolBarWrapper::getRealInterface(  ) throw (::com::sun::star::uno::RuntimeException)
+::com::sun::star::uno::Reference< XInterface > SAL_CALL ToolBarWrapper::getRealInterface(  ) throw (::com::sun::star::uno::RuntimeException)
 {
     ResetableGuard aLock( m_aLock );
     
@@ -402,11 +402,11 @@
         if ( pToolBarManager )
         {
             Window* pWindow = (Window *)pToolBarManager->GetToolBar();
-            return Reference< XInterface >( VCLUnoHelper::GetInterface( pWindow ), UNO_QUERY );
+            return ::com::sun::star::uno::Reference< XInterface >( VCLUnoHelper::GetInterface( pWindow ), UNO_QUERY );
         }
     }
 
-    return Reference< XInterface >();
+    return ::com::sun::star::uno::Reference< XInterface >();
 }
 
 //XUIFunctionExecute
--- framework/source/uielement/uicommanddescription.cxx.gcc43~	2007-08-01 12:53:23.000000000 +0200
+++ framework/source/uielement/uicommanddescription.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -171,7 +171,7 @@
                                         public  ::cppu::OWeakObject
 {
     public:
-                                  ConfigurationAccess_UICommand( const ::rtl::OUString& aModuleName, const Reference< XNameAccess >& xGenericUICommands, const Reference< XMultiServiceFactory >& rServiceManager );
+                                  ConfigurationAccess_UICommand( const ::rtl::OUString& aModuleName, const ::com::sun::star::uno::Reference< XNameAccess >& xGenericUICommands, const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager );
         virtual                   ~ConfigurationAccess_UICommand();
 
         //  XInterface, XTypeProvider
@@ -248,12 +248,12 @@
         rtl::OUString                     m_aVersion;
         rtl::OUString                     m_aExtension;
         rtl::OUString                     m_aPrivateResourceURL;
-        Reference< XNameAccess >          m_xGenericUICommands;
-        Reference< XMultiServiceFactory > m_xServiceManager;
-        Reference< XMultiServiceFactory > m_xConfigProvider;
-        Reference< XMultiServiceFactory > m_xConfigProviderPopups;
-        Reference< XNameAccess >          m_xConfigAccess;
-        Reference< XNameAccess >          m_xConfigAccessPopups;
+        ::com::sun::star::uno::Reference< XNameAccess >          m_xGenericUICommands;
+        ::com::sun::star::uno::Reference< XMultiServiceFactory > m_xServiceManager;
+        ::com::sun::star::uno::Reference< XMultiServiceFactory > m_xConfigProvider;
+        ::com::sun::star::uno::Reference< XMultiServiceFactory > m_xConfigProviderPopups;
+        ::com::sun::star::uno::Reference< XNameAccess >          m_xConfigAccess;
+        ::com::sun::star::uno::Reference< XNameAccess >          m_xConfigAccessPopups;
         Sequence< rtl::OUString >         m_aCommandImageList;
         Sequence< rtl::OUString >         m_aCommandRotateImageList;
         Sequence< rtl::OUString >         m_aCommandMirrorImageList;
@@ -283,7 +283,7 @@
                             css::lang::XEventListener
 						)
 
-ConfigurationAccess_UICommand::ConfigurationAccess_UICommand( const rtl::OUString& aModuleName, const Reference< XNameAccess >& rGenericUICommands, const Reference< XMultiServiceFactory >& rServiceManager ) :
+ConfigurationAccess_UICommand::ConfigurationAccess_UICommand( const rtl::OUString& aModuleName, const ::com::sun::star::uno::Reference< XNameAccess >& rGenericUICommands, const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager ) :
     ThreadHelpBase(),
     m_aConfigCmdAccess( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_ROOT_ACCESS )),
     m_aConfigPopupAccess( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_ROOT_ACCESS )),
@@ -304,14 +304,14 @@
     m_aConfigCmdAccess += aModuleName;
     m_aConfigCmdAccess += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_CMD_ELEMENT_ACCESS ));
 
-    m_xConfigProvider = Reference< XMultiServiceFactory >( rServiceManager->createInstance(
+    m_xConfigProvider = ::com::sun::star::uno::Reference< XMultiServiceFactory >( rServiceManager->createInstance(
                                                                 rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                                     "com.sun.star.configuration.ConfigurationProvider" ))),
                                                            UNO_QUERY );
 
     m_aConfigPopupAccess += aModuleName;
     m_aConfigPopupAccess += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( CONFIGURATION_POP_ELEMENT_ACCESS ));
-    m_xConfigProviderPopups = Reference< XMultiServiceFactory >( rServiceManager->createInstance(
+    m_xConfigProviderPopups = ::com::sun::star::uno::Reference< XMultiServiceFactory >( rServiceManager->createInstance(
                                                                 rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                                     "com.sun.star.configuration.ConfigurationProvider" ))),
                                                            UNO_QUERY );
@@ -326,10 +326,10 @@
 {
     // SAFE
     ResetableGuard aLock( m_aLock );
-    Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
     if ( xContainer.is() )
         xContainer->removeContainerListener( this );
-    xContainer = Reference< XContainer >( m_xConfigAccessPopups, UNO_QUERY );
+    xContainer = ::com::sun::star::uno::Reference< XContainer >( m_xConfigAccessPopups, UNO_QUERY );
     if ( xContainer.is() )
         xContainer->removeContainerListener( this );
 }
@@ -467,7 +467,7 @@
         {
             try
             {
-                Reference< XNameAccess > xNameAccess;
+                ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
                 a = m_xConfigAccess->getByName( aNameSeq[i] );
                 if ( a >>= xNameAccess )
                 {
@@ -506,7 +506,7 @@
         {
             try
             {
-                Reference< XNameAccess > xNameAccess;
+                ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
                 a = m_xConfigAccessPopups->getByName( aNameSeq[i] );
                 if ( a >>= xNameAccess )
                 {
@@ -639,7 +639,7 @@
     if ( m_xConfigAccess.is() )
     {
         Any                      a;
-        Reference< XNameAccess > xNameAccess;
+        ::com::sun::star::uno::Reference< XNameAccess > xNameAccess;
 
         try
         {
@@ -683,7 +683,7 @@
         aPropValue.Value = makeAny( m_aConfigCmdAccess );
         aArgs[0] <<= aPropValue;
 
-        m_xConfigAccess = Reference< XNameAccess >( m_xConfigProvider->createInstanceWithArguments(
+        m_xConfigAccess = ::com::sun::star::uno::Reference< XNameAccess >( m_xConfigProvider->createInstanceWithArguments(
                                                                             rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                                                 "com.sun.star.configuration.ConfigurationAccess" )),
                                                                             aArgs ),
@@ -691,14 +691,14 @@
         if ( m_xConfigAccess.is() )
         {
             // Add as container listener
-            Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XContainer > xContainer( m_xConfigAccess, UNO_QUERY );
             if ( xContainer.is() )
                 xContainer->addContainerListener( this );
         }
 
         aPropValue.Value = makeAny( m_aConfigPopupAccess );
         aArgs[0] <<= aPropValue;
-        m_xConfigAccessPopups = Reference< XNameAccess >( m_xConfigProvider->createInstanceWithArguments(
+        m_xConfigAccessPopups = ::com::sun::star::uno::Reference< XNameAccess >( m_xConfigProvider->createInstanceWithArguments(
                                                                             rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
                                                                                 "com.sun.star.configuration.ConfigurationAccess" )),
                                                                             aArgs ),
@@ -706,7 +706,7 @@
         if ( m_xConfigAccessPopups.is() )
         {
             // Add as container listener
-            Reference< XContainer > xContainer( m_xConfigAccessPopups, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XContainer > xContainer( m_xConfigAccessPopups, UNO_QUERY );
             if ( xContainer.is() )
                 xContainer->addContainerListener( this );
         }
@@ -752,13 +752,13 @@
     // remove our reference to the config access
     ResetableGuard aLock( m_aLock );
 
-    Reference< XInterface > xIfac1( aEvent.Source, UNO_QUERY );
-    Reference< XInterface > xIfac2( m_xConfigAccess, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac1( aEvent.Source, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac2( m_xConfigAccess, UNO_QUERY );
     if ( xIfac1 == xIfac2 )
         m_xConfigAccess.clear();
     else
     {
-        xIfac2 = Reference< XInterface >( m_xConfigAccessPopups, UNO_QUERY );
+        xIfac2 = ::com::sun::star::uno::Reference< XInterface >( m_xConfigAccessPopups, UNO_QUERY );
         if ( xIfac1 == xIfac2 )
             m_xConfigAccessPopups.clear();
     }
@@ -790,18 +790,18 @@
 
 DEFINE_INIT_SERVICE                     (   UICommandDescription, {} )
 
-UICommandDescription::UICommandDescription( const Reference< XMultiServiceFactory >& xServiceManager ) :
+UICommandDescription::UICommandDescription( const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceManager ) :
     ThreadHelpBase(),
     m_aPrivateResourceURL( RTL_CONSTASCII_USTRINGPARAM( PRIVATE_RESOURCE_URL )),
     m_xServiceManager( xServiceManager )
 {
-    Reference< XNameAccess > xEmpty;
+    ::com::sun::star::uno::Reference< XNameAccess > xEmpty;
     rtl::OUString aGenericUICommand( OUString::createFromAscii( "GenericCommands" ));
     m_xGenericUICommands = new ConfigurationAccess_UICommand( aGenericUICommand, xEmpty, xServiceManager );
 
-    m_xModuleManager = Reference< XModuleManager >( m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ),
+    m_xModuleManager = ::com::sun::star::uno::Reference< XModuleManager >( m_xServiceManager->createInstance( SERVICENAME_MODULEMANAGER ),
                                                     UNO_QUERY );
-    Reference< XNameAccess > xNameAccess( m_xModuleManager, UNO_QUERY_THROW );
+    ::com::sun::star::uno::Reference< XNameAccess > xNameAccess( m_xModuleManager, UNO_QUERY_THROW );
     Sequence< rtl::OUString > aElementNames = xNameAccess->getElementNames();
     Sequence< PropertyValue > aSeq;
     OUString                  aModuleIdentifier;
@@ -828,7 +828,7 @@
             // Create second mapping Command File ==> commands instance
             UICommandsHashMap::iterator pIter = m_aUICommandsHashMap.find( aCommandStr );
             if ( pIter == m_aUICommandsHashMap.end() )
-                m_aUICommandsHashMap.insert( UICommandsHashMap::value_type( aCommandStr, Reference< XNameAccess >() ));
+                m_aUICommandsHashMap.insert( UICommandsHashMap::value_type( aCommandStr, ::com::sun::star::uno::Reference< XNameAccess >() ));
         }
     }
 
@@ -864,11 +864,11 @@
                 a <<= pIter->second;
             else
             {
-                Reference< XNameAccess > xUICommands;
+                ::com::sun::star::uno::Reference< XNameAccess > xUICommands;
                 ConfigurationAccess_UICommand* pUICommands = new ConfigurationAccess_UICommand( aCommandFile,
                                                                                                m_xGenericUICommands,
                                                                                                m_xServiceManager );
-                xUICommands = Reference< XNameAccess >( static_cast< cppu::OWeakObject* >( pUICommands ),UNO_QUERY );
+                xUICommands = ::com::sun::star::uno::Reference< XNameAccess >( static_cast< cppu::OWeakObject* >( pUICommands ),UNO_QUERY );
                 pIter->second = xUICommands;
                 a <<= xUICommands;
             }
@@ -918,7 +918,7 @@
 Type SAL_CALL UICommandDescription::getElementType()
 throw (::com::sun::star::uno::RuntimeException)
 {
-    return( ::getCppuType( (const Reference< XNameAccess >*)NULL ) );
+    return( ::getCppuType( (const ::com::sun::star::uno::Reference< XNameAccess >*)NULL ) );
 }
 
 sal_Bool SAL_CALL UICommandDescription::hasElements()
--- framework/source/uifactory/addonstoolboxfactory.cxx.gcc43~	2007-08-17 09:46:21.000000000 +0200
+++ framework/source/uifactory/addonstoolboxfactory.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -164,7 +164,7 @@
 
 sal_Bool AddonsToolBoxFactory::hasButtonsInContext( 
     const Sequence< Sequence< PropertyValue > >& rPropSeqSeq, 
-    const Reference< XFrame >& rFrame )
+    const ::com::sun::star::uno::Reference< XFrame >& rFrame )
 {
     ::rtl::OUString aModuleIdentifier;
     try
@@ -217,7 +217,7 @@
 }
 
 // XUIElementFactory
-Reference< XUIElement > SAL_CALL AddonsToolBoxFactory::createUIElement( 
+::com::sun::star::uno::Reference< XUIElement > SAL_CALL AddonsToolBoxFactory::createUIElement( 
     const ::rtl::OUString& ResourceURL, 
     const Sequence< PropertyValue >& Args )
 throw ( ::com::sun::star::container::NoSuchElementException, 
@@ -228,7 +228,7 @@
     ResetableGuard aLock( m_aLock );
 
     Sequence< Sequence< PropertyValue > >   aConfigData;
-    Reference< XFrame >                     xFrame;
+    ::com::sun::star::uno::Reference< XFrame >                     xFrame;
     rtl::OUString                           aResourceURL( ResourceURL );
 
     for ( sal_Int32 n = 0; n < Args.getLength(); n++ )
@@ -245,7 +245,7 @@
         throw IllegalArgumentException();
 
     // Identify frame and determine module identifier to look for context based buttons
-    Reference< ::com::sun::star::ui::XUIElement > xToolBar;
+    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > xToolBar;
     if ( xFrame.is() && 
          ( aConfigData.getLength()> 0 ) &&
          hasButtonsInContext( aConfigData, xFrame ))
@@ -264,8 +264,8 @@
         
         vos::OGuard	aGuard( Application::GetSolarMutex() );
         AddonsToolBarWrapper* pToolBarWrapper = new AddonsToolBarWrapper( m_xServiceManager );
-        xToolBar = Reference< ::com::sun::star::ui::XUIElement >( (OWeakObject *)pToolBarWrapper, UNO_QUERY );
-        Reference< XInitialization > xInit( xToolBar, UNO_QUERY );
+        xToolBar = ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement >( (OWeakObject *)pToolBarWrapper, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XInitialization > xInit( xToolBar, UNO_QUERY );
         xInit->initialize( aPropSeq );
     }
     
--- framework/source/uifactory/statusbarfactory.cxx.gcc43~	2006-09-16 16:27:54.000000000 +0200
+++ framework/source/uifactory/statusbarfactory.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -148,7 +148,7 @@
 }
 
 // XUIElementFactory
-Reference< XUIElement > SAL_CALL StatusBarFactory::createUIElement( 
+::com::sun::star::uno::Reference< XUIElement > SAL_CALL StatusBarFactory::createUIElement( 
     const ::rtl::OUString& ResourceURL, 
     const Sequence< PropertyValue >& Args )
 throw ( ::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException )
@@ -156,8 +156,8 @@
     // SAFE
     ResetableGuard aLock( m_aLock );
 
-    Reference< XUIConfigurationManager > xConfigSource;
-    Reference< XFrame >                  xFrame;
+    ::com::sun::star::uno::Reference< XUIConfigurationManager > xConfigSource;
+    ::com::sun::star::uno::Reference< XFrame >                  xFrame;
     rtl::OUString                        aResourceURL( ResourceURL );
     sal_Bool                             bPersistent( sal_True );
 
@@ -173,7 +173,7 @@
             Args[n].Value >>= bPersistent;
     }
 
-    Reference< XUIConfigurationManager > xCfgMgr;    
+    ::com::sun::star::uno::Reference< XUIConfigurationManager > xCfgMgr;    
     if ( aResourceURL.indexOf( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "private:resource/statusbar/" ))) != 0 )
         throw IllegalArgumentException();
     else
@@ -182,15 +182,15 @@
         if ( xFrame.is() && !xConfigSource.is() )
         {
             bool bHasSettings( false );
-            Reference< XModel > xModel;
+            ::com::sun::star::uno::Reference< XModel > xModel;
 
-            Reference< XController > xController = xFrame->getController();
+            ::com::sun::star::uno::Reference< XController > xController = xFrame->getController();
             if ( xController.is() )
                 xModel = xController->getModel();
 
             if ( xModel.is() )
             {
-                Reference< XUIConfigurationManagerSupplier > xUIConfigurationManagerSupplier( xModel, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XUIConfigurationManagerSupplier > xUIConfigurationManagerSupplier( xModel, UNO_QUERY );
                 if ( xUIConfigurationManagerSupplier.is() )
                 {
                     xCfgMgr = xUIConfigurationManagerSupplier->getUIConfigurationManager();
@@ -200,10 +200,10 @@
 
             if ( !bHasSettings )
             {
-                rtl::OUString aModuleIdentifier = m_xModuleManager->identify( Reference< XInterface >( xFrame, UNO_QUERY ));
+                rtl::OUString aModuleIdentifier = m_xModuleManager->identify( ::com::sun::star::uno::Reference< XInterface >( xFrame, UNO_QUERY ));
                 if ( aModuleIdentifier.getLength() )
                 {
-                    Reference< ::com::sun::star::ui::XModuleUIConfigurationManagerSupplier > xModuleCfgSupplier(
+                    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XModuleUIConfigurationManagerSupplier > xModuleCfgSupplier(
                         m_xServiceManager->createInstance( OUString( RTL_CONSTASCII_USTRINGPARAM( 
                             "com.sun.star.ui.ModuleUIConfigurationManagerSupplier" ))), 
                         UNO_QUERY );
@@ -231,8 +231,8 @@
     
     vos::OGuard	aGuard( Application::GetSolarMutex() );
     StatusBarWrapper* pStatusBarWrapper = new StatusBarWrapper( m_xServiceManager );
-    Reference< ::com::sun::star::ui::XUIElement > xStatusBar( (OWeakObject *)pStatusBarWrapper, UNO_QUERY );
-    Reference< XInitialization > xInit( xStatusBar, UNO_QUERY );
+    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > xStatusBar( (OWeakObject *)pStatusBarWrapper, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInitialization > xInit( xStatusBar, UNO_QUERY );
     xInit->initialize( aPropSeq );
     return xStatusBar;
 }
--- framework/source/uifactory/toolboxfactory.cxx.gcc43~	2006-09-16 16:28:23.000000000 +0200
+++ framework/source/uifactory/toolboxfactory.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -148,7 +148,7 @@
 }
 
 // XUIElementFactory
-Reference< XUIElement > SAL_CALL ToolBoxFactory::createUIElement( 
+com::sun::star::uno::Reference< XUIElement > SAL_CALL ToolBoxFactory::createUIElement( 
     const ::rtl::OUString& ResourceURL, 
     const Sequence< PropertyValue >& Args )
 throw ( ::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException )
@@ -156,8 +156,8 @@
     // SAFE
     ResetableGuard aLock( m_aLock );
 
-    Reference< XUIConfigurationManager > xConfigSource;
-    Reference< XFrame >                  xFrame;
+    ::com::sun::star::uno::Reference< XUIConfigurationManager > xConfigSource;
+    ::com::sun::star::uno::Reference< XFrame >                  xFrame;
     rtl::OUString                        aResourceURL( ResourceURL );
     sal_Bool                             bPersistent( sal_True );
     sal_Bool                             bPopupMode( sal_False );
@@ -176,7 +176,7 @@
             Args[n].Value >>= bPopupMode;
     }
 
-    Reference< XUIConfigurationManager > xCfgMgr;    
+    ::com::sun::star::uno::Reference< XUIConfigurationManager > xCfgMgr;    
     if ( aResourceURL.indexOf( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "private:resource/toolbar/" ))) != 0 )
         throw IllegalArgumentException();
     else
@@ -185,15 +185,15 @@
         if ( xFrame.is() && !xConfigSource.is() )
         {
             bool bHasSettings( false );
-            Reference< XModel > xModel;
+            ::com::sun::star::uno::Reference< XModel > xModel;
 
-            Reference< XController > xController = xFrame->getController();
+            ::com::sun::star::uno::Reference< XController > xController = xFrame->getController();
             if ( xController.is() )
                 xModel = xController->getModel();
 
             if ( xModel.is() )
             {
-                Reference< XUIConfigurationManagerSupplier > xUIConfigurationManagerSupplier( xModel, UNO_QUERY );
+                ::com::sun::star::uno::Reference< XUIConfigurationManagerSupplier > xUIConfigurationManagerSupplier( xModel, UNO_QUERY );
                 if ( xUIConfigurationManagerSupplier.is() )
                 {
                     xCfgMgr = xUIConfigurationManagerSupplier->getUIConfigurationManager();
@@ -203,10 +203,10 @@
 
             if ( !bHasSettings )
             {
-                rtl::OUString aModuleIdentifier = m_xModuleManager->identify( Reference< XInterface >( xFrame, UNO_QUERY ));
+                rtl::OUString aModuleIdentifier = m_xModuleManager->identify( ::com::sun::star::uno::Reference< XInterface >( xFrame, UNO_QUERY ));
                 if ( aModuleIdentifier.getLength() )
                 {
-                    Reference< ::com::sun::star::ui::XModuleUIConfigurationManagerSupplier > xModuleCfgSupplier(
+                    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XModuleUIConfigurationManagerSupplier > xModuleCfgSupplier(
                         m_xServiceManager->createInstance( OUString( RTL_CONSTASCII_USTRINGPARAM( 
                             "com.sun.star.ui.ModuleUIConfigurationManagerSupplier" ))), 
                         UNO_QUERY );
@@ -237,8 +237,8 @@
     
     vos::OGuard	aGuard( Application::GetSolarMutex() );
     ToolBarWrapper* pToolBarWrapper = new ToolBarWrapper( m_xServiceManager );
-    Reference< ::com::sun::star::ui::XUIElement > xToolBar( (OWeakObject *)pToolBarWrapper, UNO_QUERY );
-    Reference< XInitialization > xInit( xToolBar, UNO_QUERY );
+    ::com::sun::star::uno::Reference< ::com::sun::star::ui::XUIElement > xToolBar( (OWeakObject *)pToolBarWrapper, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInitialization > xInit( xToolBar, UNO_QUERY );
     xInit->initialize( aPropSeq );
     return xToolBar;
 }
--- framework/source/xml/eventsconfiguration.cxx.gcc43~	2006-09-16 16:29:36.000000000 +0200
+++ framework/source/xml/eventsconfiguration.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -98,24 +98,24 @@
 namespace framework
 {
 
-static Reference< XParser > GetSaxParser(
+static ::com::sun::star::uno::Reference< XParser > GetSaxParser(
 	// #110897#
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory
 	)
 {
 	//Reference< XMultiServiceFactory > xServiceManager = ::comphelper::getProcessServiceFactory();
-	//return Reference< XParser >( xServiceManager->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
-	return Reference< XParser >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
+	//return ::com::sun::star::uno::Reference< XParser >( xServiceManager->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
+	return ::com::sun::star::uno::Reference< XParser >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
 }
 
-static Reference< XDocumentHandler > GetSaxWriter(
+static ::com::sun::star::uno::Reference< XDocumentHandler > GetSaxWriter(
 	// #110897#
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory
 	)
 {
 	//Reference< XMultiServiceFactory > xServiceManager = ::comphelper::getProcessServiceFactory();
-	//return Reference< XDocumentHandler >( xServiceManager->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
-	return Reference< XDocumentHandler >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
+	//return ::com::sun::star::uno::Reference< XDocumentHandler >( xServiceManager->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
+	return ::com::sun::star::uno::Reference< XDocumentHandler >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
 }
 
 // #110897#
@@ -123,8 +123,8 @@
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory,
 	SvStream& rInStream, EventsConfig& aItems )
 {
-	Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
-	Reference< XInputStream > xInputStream( 
+	::com::sun::star::uno::Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XInputStream > xInputStream( 
 								(::cppu::OWeakObject *)new utl::OInputStreamWrapper( rInStream ), 
 								UNO_QUERY );
 
@@ -134,8 +134,8 @@
 	aInputSource.aInputStream = xInputStream;
 
 	// create namespace filter and set events document handler inside to support xml namespaces
-	Reference< XDocumentHandler > xDocHandler( new OReadEventsDocumentHandler( aItems ));
-	Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xDocHandler( new OReadEventsDocumentHandler( aItems ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
 
 	// connect parser and filter
 	xParser->setDocumentHandler( xFilter );
@@ -164,13 +164,13 @@
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory,
 	SvStream& rOutStream, const EventsConfig& aItems )
 {
-	Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
 
-	Reference< XOutputStream > xOutputStream( 
+	::com::sun::star::uno::Reference< XOutputStream > xOutputStream( 
 								(::cppu::OWeakObject *)new utl::OOutputStreamWrapper( rOutStream ), 
 								UNO_QUERY );
 
-	Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
+	::com::sun::star::uno::Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
 	xDataSource->setOutputStream( xOutputStream );
 
 	try
--- framework/source/xml/eventsdocumenthandler.cxx.gcc43~	2006-10-12 12:44:00.000000000 +0200
+++ framework/source/xml/eventsdocumenthandler.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -202,12 +202,12 @@
 	{
 		OUString aErrorMessage = getErrorLineString();
 		aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "No matching start or end element 'event:events' found!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
 void SAL_CALL OReadEventsDocumentHandler::startElement(
-	const OUString& aName, const Reference< XAttributeList > &xAttribs )
+	const OUString& aName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttribs )
 throw(	SAXException, RuntimeException )
 {
 	ResetableGuard aGuard( m_aLock );
@@ -223,7 +223,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'event:events' cannot be embeded into 'event:events'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bEventsStartFound = sal_True;
@@ -236,14 +236,14 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'event:event' must be embeded into element 'event:events'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				if ( m_bEventStartFound )
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element event:event is not a container!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				OUString aLanguage;
@@ -316,7 +316,7 @@
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Required attribute "));
 					aErrorMessage += aRequiredAttributeName;
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( " must have a value!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				Any a;
@@ -379,7 +379,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'event:events' found, but no start element" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bEventsStartFound = sal_False;
@@ -392,7 +392,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'event:event' found, but no start element" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bEventStartFound = sal_False;
@@ -422,7 +422,7 @@
 }
 
 void SAL_CALL OReadEventsDocumentHandler::setDocumentLocator(
-	const Reference< XLocator > &xLocator)
+	const ::com::sun::star::uno::Reference< XLocator > &xLocator)
 throw(	SAXException, RuntimeException )
 {
 	ResetableGuard aGuard( m_aLock );
@@ -452,12 +452,12 @@
 
 OWriteEventsDocumentHandler::OWriteEventsDocumentHandler(
 	const EventsConfig& aItems,
-	Reference< XDocumentHandler > rWriteDocumentHandler ) :
+	::com::sun::star::uno::Reference< XDocumentHandler > rWriteDocumentHandler ) :
     ThreadHelpBase( &Application::GetSolarMutex() ),
 	m_aItems( aItems ),
 	m_xWriteDocumentHandler( rWriteDocumentHandler )
 {
-	m_xEmptyList		= Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
+	m_xEmptyList		= ::com::sun::star::uno::Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
 	m_aAttributeType	= OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_TYPE_CDATA ));
 	m_aXMLXlinkNS		= OUString( RTL_CONSTASCII_USTRINGPARAM( XMLNS_XLINK_PREFIX ));
 	m_aXMLEventNS		= OUString( RTL_CONSTASCII_USTRINGPARAM( XMLNS_EVENT_PREFIX ));
@@ -475,7 +475,7 @@
 	m_xWriteDocumentHandler->startDocument();
 
 	// write DOCTYPE line!
-	Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
+	::com::sun::star::uno::Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
 	if ( xExtendedDocHandler.is() )
 	{
 		xExtendedDocHandler->unknown( OUString( RTL_CONSTASCII_USTRINGPARAM( EVENTS_DOCTYPE )) );
@@ -483,7 +483,7 @@
 	}
 
 	AttributeListImpl* pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
 	pList->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_XMLNS_EVENT )),
 						 m_aAttributeType,
@@ -520,7 +520,7 @@
 	if ( aPropertyValues.getLength() > 0 )
 	{
 		AttributeListImpl* pList = new AttributeListImpl;
-		Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+		::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
 		if ( m_aAttributeURL.getLength() == 0 )
 		{
--- framework/source/xml/imagesconfiguration.cxx.gcc43~	2006-09-16 16:30:04.000000000 +0200
+++ framework/source/xml/imagesconfiguration.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -102,24 +102,24 @@
 SV_IMPL_PTRARR( ExternalImageItemListDescriptor, ExternalImageItemDescriptorPtr ); 
 SV_IMPL_PTRARR( ImageListDescriptor, ImageListItemDescriptorPtr );
 
-static Reference< XParser > GetSaxParser(
+static ::com::sun::star::uno::Reference< XParser > GetSaxParser(
 	// #110897#
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory
 	)
 {
 	//Reference< XMultiServiceFactory > xServiceManager = ::comphelper::getProcessServiceFactory();
-	//return Reference< XParser >( xServiceManager->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
-	return Reference< XParser >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
+	//return ::com::sun::star::uno::Reference< XParser >( xServiceManager->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
+	return ::com::sun::star::uno::Reference< XParser >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
 }
 
-static Reference< XDocumentHandler > GetSaxWriter(
+static ::com::sun::star::uno::Reference< XDocumentHandler > GetSaxWriter(
 	// #110897#
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory
 	)
 {
 	//Reference< XMultiServiceFactory > xServiceManager = ::comphelper::getProcessServiceFactory();
-	//return Reference< XDocumentHandler >( xServiceManager->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
-	return Reference< XDocumentHandler >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
+	//return ::com::sun::star::uno::Reference< XDocumentHandler >( xServiceManager->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
+	return ::com::sun::star::uno::Reference< XDocumentHandler >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
 }
 
 // #110897#
@@ -127,8 +127,8 @@
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory,
 	SvStream& rInStream, ImageListsDescriptor& aItems )
 {
-	Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
-	Reference< XInputStream > xInputStream( 
+	::com::sun::star::uno::Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XInputStream > xInputStream( 
 								(::cppu::OWeakObject *)new utl::OInputStreamWrapper( rInStream ), 
 								UNO_QUERY );
 
@@ -138,8 +138,8 @@
 	aInputSource.aInputStream = xInputStream;
 
 	// create namespace filter and set document handler inside to support xml namespaces
-	Reference< XDocumentHandler > xDocHandler( new OReadImagesDocumentHandler( aItems ));
-	Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xDocHandler( new OReadImagesDocumentHandler( aItems ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
 
 	// connect parser and filter
 	xParser->setDocumentHandler( xFilter );
@@ -169,13 +169,13 @@
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory,
 	SvStream& rOutStream, const ImageListsDescriptor& aItems )
 {
-	Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
 
-	Reference< XOutputStream > xOutputStream( 
+	::com::sun::star::uno::Reference< XOutputStream > xOutputStream( 
 								(::cppu::OWeakObject *)new utl::OOutputStreamWrapper( rOutStream ), 
 								UNO_QUERY );
 
-	Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
+	::com::sun::star::uno::Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
 	xDataSource->setOutputStream( xOutputStream );
 
 	try
@@ -203,7 +203,7 @@
     const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& rInputStream,
     ImageListsDescriptor& rItems )
 {
-	Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
 	
     // connect stream to input stream to the parser
 	InputSource aInputSource;
@@ -211,8 +211,8 @@
 	aInputSource.aInputStream = rInputStream;
 
 	// create namespace filter and set document handler inside to support xml namespaces
-	Reference< XDocumentHandler > xDocHandler( new OReadImagesDocumentHandler( rItems ));
-	Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xDocHandler( new OReadImagesDocumentHandler( rItems ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
 
 	// connect parser and filter
 	xParser->setDocumentHandler( xFilter );
@@ -241,9 +241,9 @@
     const ::com::sun::star::uno::Reference< ::com::sun::star::io::XOutputStream >& rOutputStream,
     const ImageListsDescriptor& rItems )
 {
-	Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
 
-	Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
+	::com::sun::star::uno::Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
 	xDataSource->setOutputStream( rOutputStream );
 
 	try
--- framework/source/xml/imagesdocumenthandler.cxx.gcc43~	2006-10-12 12:44:13.000000000 +0200
+++ framework/source/xml/imagesdocumenthandler.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -217,12 +217,12 @@
 	{
 		OUString aErrorMessage = getErrorLineString();
 		aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "No matching start or end element 'image:imagecontainer' found!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
 void SAL_CALL OReadImagesDocumentHandler::startElement(
-	const OUString& aName, const Reference< XAttributeList > &xAttribs )
+	const OUString& aName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttribs )
 throw(	SAXException, RuntimeException )
 {
 	ResetableGuard aGuard( m_aLock );
@@ -239,7 +239,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'image:imagecontainer' cannot be embeded into 'image:imagecontainer'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bImageContainerStartFound = sal_True;
@@ -252,14 +252,14 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'image:images' must be embeded into element 'image:imagecontainer'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				if ( m_bImagesStartFound )
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'image:images' cannot be embeded into 'image:images'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				if ( !m_aImageList.pImageList )
@@ -318,7 +318,7 @@
 
 									OUString aErrorMessage = getErrorLineString();
 									aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Attribute image:maskmode must be 'maskcolor' or 'maskbitmap'!" ));
-									throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+									throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 								}
 							}
 							break;
@@ -348,7 +348,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Required attribute xlink:href must have a value!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 			}
 			break;
@@ -363,7 +363,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'image:entry' must be embeded into element 'image:images'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				if ( !m_pImages->pImageItemList )
@@ -410,7 +410,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Required attribute 'image:bitmap-index' must have a value >= 0!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				// Check required attribute "command"
@@ -422,7 +422,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Required attribute 'image:command' must have a value!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				if ( m_pImages )
@@ -440,7 +440,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'image:externalimages' must be embeded into element 'image:imagecontainer'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				// Check that image:externalentry is NOT embeded into image:externalentry
@@ -451,7 +451,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'image:externalimages' cannot be embeded into 'image:externalimages'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				// Create unique external image container
@@ -471,7 +471,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'image:externalentry' must be embeded into 'image:externalimages'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				if ( m_bExternalImageStartFound )
@@ -483,7 +483,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'image:externalentry' cannot be embeded into 'image:externalentry'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bExternalImageStartFound = sal_True;
@@ -527,7 +527,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Required attribute 'image:command' must have a value!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				// Check required attribute "href"
@@ -541,7 +541,7 @@
 
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Required attribute 'xlink:href' must have a value!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				if ( m_pExternalImages )
@@ -631,7 +631,7 @@
 }
 
 void SAL_CALL OReadImagesDocumentHandler::setDocumentLocator(
-	const Reference< XLocator > &xLocator)
+	const ::com::sun::star::uno::Reference< XLocator > &xLocator)
 throw(	SAXException, RuntimeException )
 {
 	ResetableGuard aGuard( m_aLock );
@@ -661,12 +661,12 @@
 
 OWriteImagesDocumentHandler::OWriteImagesDocumentHandler(
 	const ImageListsDescriptor& aItems,
-	Reference< XDocumentHandler > rWriteDocumentHandler ) :
+	::com::sun::star::uno::Reference< XDocumentHandler > rWriteDocumentHandler ) :
     ThreadHelpBase( &Application::GetSolarMutex() ),
 	m_aImageListsItems( aItems ),
 	m_xWriteDocumentHandler( rWriteDocumentHandler )
 {
-	m_xEmptyList			= Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
+	m_xEmptyList			= ::com::sun::star::uno::Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
 	m_aAttributeType		= OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_TYPE_CDATA ));
 	m_aXMLImageNS			= OUString( RTL_CONSTASCII_USTRINGPARAM( XMLNS_IMAGE_PREFIX ));
 	m_aXMLXlinkNS			= OUString( RTL_CONSTASCII_USTRINGPARAM( XMLNS_XLINK_PREFIX ));
@@ -686,7 +686,7 @@
 	m_xWriteDocumentHandler->startDocument();
 
 	// write DOCTYPE line!
-	Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
+	::com::sun::star::uno::Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
 	if ( xExtendedDocHandler.is() )
 	{
 		xExtendedDocHandler->unknown( OUString( RTL_CONSTASCII_USTRINGPARAM( IMAGES_DOCTYPE )) );
@@ -694,7 +694,7 @@
 	}
 
 	AttributeListImpl* pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
 	pList->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_XMLNS_IMAGE )),
 						 m_aAttributeType,
@@ -737,7 +737,7 @@
 ( SAXException, RuntimeException )
 {
 	AttributeListImpl*			pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
     // save required attributes
 	pList->addAttribute( m_aAttributeXlinkType,
@@ -807,7 +807,7 @@
 ( SAXException, RuntimeException )
 {
 	AttributeListImpl*			pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
 	pList->addAttribute( m_aXMLImageNS + OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_BITMAPINDEX )),
 						 m_aAttributeType,
@@ -845,7 +845,7 @@
 ( SAXException, RuntimeException )
 {
 	AttributeListImpl*			pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
     // save required attributes
 	pList->addAttribute( m_aAttributeXlinkType,
--- framework/source/xml/menuconfiguration.cxx.gcc43~	2006-09-16 16:30:29.000000000 +0200
+++ framework/source/xml/menuconfiguration.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -122,11 +122,11 @@
 }
 
 
-Reference< XIndexAccess > MenuConfiguration::CreateMenuBarConfigurationFromXML(
-    Reference< XInputStream >& rInputStream )
+::com::sun::star::uno::Reference< XIndexAccess > MenuConfiguration::CreateMenuBarConfigurationFromXML(
+    ::com::sun::star::uno::Reference< XInputStream >& rInputStream )
 throw ( WrappedTargetException )
 {
-	Reference< XParser > xParser( m_rxServiceManager->createInstance(
+	::com::sun::star::uno::Reference< XParser > xParser( m_rxServiceManager->createInstance(
 									::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.xml.sax.Parser" ))),
 								  UNO_QUERY);
 
@@ -137,14 +137,14 @@
 
 
 	// create menu bar
-    Reference< XIndexContainer > xItemContainer( static_cast< cppu::OWeakObject *>( new RootItemContainer()), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XIndexContainer > xItemContainer( static_cast< cppu::OWeakObject *>( new RootItemContainer()), UNO_QUERY );
 
 	// create namespace filter and set menudocument handler inside to support xml namespaces
 
-	// #110897# Reference< XDocumentHandler > xDocHandler( new OReadMenuDocumentHandler( xItemContainer ));
-	Reference< XDocumentHandler > xDocHandler( new OReadMenuDocumentHandler( m_rxServiceManager, xItemContainer ));
+	// #110897# ::com::sun::star::uno::Reference< XDocumentHandler > xDocHandler( new OReadMenuDocumentHandler( xItemContainer ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xDocHandler( new OReadMenuDocumentHandler( m_rxServiceManager, xItemContainer ));
 
-	Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
 
 	// connect parser and filter
 	xParser->setDocumentHandler( xFilter );
@@ -152,24 +152,24 @@
 	try
 	{
 		xParser->parseStream( aInputSource );
-		return Reference< XIndexAccess >( xItemContainer, UNO_QUERY );
+		return ::com::sun::star::uno::Reference< XIndexAccess >( xItemContainer, UNO_QUERY );
 	}
 	catch ( RuntimeException& e )
 	{
-		throw WrappedTargetException( e.Message, Reference< XInterface >(), Any() );
+		throw WrappedTargetException( e.Message, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 	catch( SAXException& e )
 	{
 		SAXException aWrappedSAXException;
 
 		if ( !( e.WrappedException >>= aWrappedSAXException ))
-			throw WrappedTargetException( e.Message, Reference< XInterface >(), Any() );
+			throw WrappedTargetException( e.Message, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 		else
-			throw WrappedTargetException( aWrappedSAXException.Message, Reference< XInterface >(), Any() );
+			throw WrappedTargetException( aWrappedSAXException.Message, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 	catch( ::com::sun::star::io::IOException& e )
 	{
-		throw WrappedTargetException( e.Message, Reference< XInterface >(), Any() );
+		throw WrappedTargetException( e.Message, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
@@ -187,16 +187,16 @@
 }
 
 void MenuConfiguration::StoreMenuBarConfigurationToXML( 
-    Reference< XIndexAccess >& rMenuBarConfiguration,
-    Reference< XOutputStream >& rOutputStream )
+    ::com::sun::star::uno::Reference< XIndexAccess >& rMenuBarConfiguration,
+    ::com::sun::star::uno::Reference< XOutputStream >& rOutputStream )
 throw ( WrappedTargetException )
 {
-	Reference< XDocumentHandler > xWriter;
+	::com::sun::star::uno::Reference< XDocumentHandler > xWriter;
 
-	xWriter = Reference< XDocumentHandler >( m_rxServiceManager->createInstance(
+	xWriter = ::com::sun::star::uno::Reference< XDocumentHandler >( m_rxServiceManager->createInstance(
 			::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
 
-	Reference< XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
+	::com::sun::star::uno::Reference< XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
 	xDataSource->setOutputStream( rOutputStream );
 
 	try
@@ -206,15 +206,15 @@
 	}
 	catch ( RuntimeException& e )
 	{
-		throw WrappedTargetException( e.Message, Reference< XInterface >(), Any() );
+		throw WrappedTargetException( e.Message, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 	catch ( SAXException& e )
 	{
-		throw WrappedTargetException( e.Message, Reference< XInterface >(), Any() );
+		throw WrappedTargetException( e.Message, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 	catch ( ::com::sun::star::io::IOException& e )
 	{
-		throw WrappedTargetException( e.Message, Reference< XInterface >(), Any() );
+		throw WrappedTargetException( e.Message, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
--- framework/source/xml/menudocumenthandler.cxx.gcc43~	2007-04-03 15:50:50.000000000 +0200
+++ framework/source/xml/menudocumenthandler.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -155,7 +155,7 @@
                                    OUString&                       rCommandURL,
                                    OUString&                       rLabel,
                                    OUString&                       rHelpURL,
-                                   Reference< XIndexAccess >&      rSubMenu,
+                                   ::com::sun::star::uno::Reference< XIndexAccess >&      rSubMenu,
                                    sal_Int16&                      rType )
 {
     for ( sal_Int32 i = 0; i < rProp.getLength(); i++ )
@@ -229,7 +229,7 @@
 }
 
 void SAL_CALL ReadMenuDocumentHandlerBase::setDocumentLocator(
-	const Reference< XLocator > &xLocator)
+	const ::com::sun::star::uno::Reference< XLocator > &xLocator)
 throw(	SAXException, RuntimeException )
 {
 	m_xLocator = xLocator;
@@ -261,7 +261,7 @@
 	// Common values
 	rProps[0].Value <<= rCommandURL.intern();
 	rProps[1].Value <<= rHelpId;
-	rProps[2].Value <<= Reference< XIndexContainer >();
+	rProps[2].Value <<= ::com::sun::star::uno::Reference< XIndexContainer >();
 	rProps[3].Value <<= rLabel;
 	rProps[4].Value <<= ::com::sun::star::ui::ItemType::DEFAULT;
 }
@@ -270,7 +270,7 @@
 
 OReadMenuDocumentHandler::OReadMenuDocumentHandler(
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory,
-	const Reference< XIndexContainer >& rMenuBarContainer )
+	const ::com::sun::star::uno::Reference< XIndexContainer >& rMenuBarContainer )
 :	m_nElementDepth( 0 ),
 	m_bMenuBarMode( sal_False ),
 	m_xMenuBarContainer( rMenuBarContainer ),
@@ -304,13 +304,13 @@
 	{
 		OUString aErrorMessage = getErrorLineString();
 		aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "A closing element is missing!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
 
 void SAL_CALL OReadMenuDocumentHandler::startElement(
-	const OUString& aName, const Reference< XAttributeList > &xAttrList )
+	const OUString& aName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttrList )
 throw( SAXException, RuntimeException )
 {
 	if ( m_bMenuBarMode )
@@ -323,8 +323,8 @@
 		++m_nElementDepth;
 		m_bMenuBarMode = sal_True;
 
-		// #110897# m_xReader = Reference< XDocumentHandler >( new OReadMenuBarHandler( m_xMenuBarContainer, m_xContainerFactory ));
-		m_xReader = Reference< XDocumentHandler >( new OReadMenuBarHandler( getServiceFactory(), m_xMenuBarContainer, m_xContainerFactory ));
+		// #110897# m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >( new OReadMenuBarHandler( m_xMenuBarContainer, m_xContainerFactory ));
+		m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >( new OReadMenuBarHandler( getServiceFactory(), m_xMenuBarContainer, m_xContainerFactory ));
 
 		m_xReader->startDocument();
 	}
@@ -347,13 +347,13 @@
 		if ( 0 == m_nElementDepth )
 		{
 			m_xReader->endDocument();
-			m_xReader = Reference< XDocumentHandler >();
+			m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >();
 			m_bMenuBarMode = sal_False;
 			if ( !aName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( ELEMENT_MENUBAR )))
 			{
 				OUString aErrorMessage = getErrorLineString();
 				aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "closing element menubar expected!" ));
-				throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+				throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 			}
 		}
 	}
@@ -366,8 +366,8 @@
 // #110897#
 OReadMenuBarHandler::OReadMenuBarHandler( 
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory,
-    const Reference< XIndexContainer >& rMenuBarContainer, 
-    const Reference< XSingleComponentFactory >& rFactory          )
+    const ::com::sun::star::uno::Reference< XIndexContainer >& rMenuBarContainer, 
+    const ::com::sun::star::uno::Reference< XSingleComponentFactory >& rFactory          )
 :	m_nElementDepth( 0 ),
 	m_bMenuMode( sal_False ),
 	m_xMenuBarContainer( rMenuBarContainer ),
@@ -401,7 +401,7 @@
 
 
 void SAL_CALL OReadMenuBarHandler::startElement(
-	const OUString& rName, const Reference< XAttributeList > &xAttrList )
+	const OUString& rName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttrList )
 throw( SAXException, RuntimeException )
 {
 	if ( m_bMenuMode )
@@ -420,14 +420,14 @@
 		m_bMenuMode = sal_True;
 
         // Container must be factory to create sub container
-        Reference< XComponentContext > xComponentContext;
-        Reference< XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
+        ::com::sun::star::uno::Reference< XComponentContext > xComponentContext;
+        ::com::sun::star::uno::Reference< XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
         xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))) >>=
             xComponentContext;
 
-        Reference< XIndexContainer > xSubItemContainer;
+        ::com::sun::star::uno::Reference< XIndexContainer > xSubItemContainer;
         if ( m_xContainerFactory.is() )
-            xSubItemContainer = Reference< XIndexContainer >( m_xContainerFactory->createInstanceWithContext( xComponentContext ), UNO_QUERY );
+            xSubItemContainer = ::com::sun::star::uno::Reference< XIndexContainer >( m_xContainerFactory->createInstanceWithContext( xComponentContext ), UNO_QUERY );
 
 		if ( xSubItemContainer.is() )
         {
@@ -456,10 +456,10 @@
 		    {
 			    OUString aErrorMessage = getErrorLineString();
 			    aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "attribute id for element menu required!" ));
-			    throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+			    throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 		    }
 
-		    m_xReader = Reference< XDocumentHandler >( new OReadMenuHandler( xSubItemContainer, m_xContainerFactory ));
+		    m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >( new OReadMenuHandler( xSubItemContainer, m_xContainerFactory ));
 		    m_xReader->startDocument();
         }
 	}
@@ -467,7 +467,7 @@
 	{
 		OUString aErrorMessage = getErrorLineString();
 		aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "element menu expected!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
@@ -487,13 +487,13 @@
 		if ( 0 == m_nElementDepth )
 		{
 			m_xReader->endDocument();
-			m_xReader = Reference< XDocumentHandler >();
+			m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >();
 			m_bMenuMode = sal_False;
 			if ( !aName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( ELEMENT_MENU )))
 			{
 				OUString aErrorMessage = getErrorLineString();
 				aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "closing element menu expected!" ));
-				throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+				throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 			}
 		}
 		else
@@ -506,8 +506,8 @@
 
 
 OReadMenuHandler::OReadMenuHandler(
-    const Reference< XIndexContainer >& rMenuContainer, 
-    const Reference< XSingleComponentFactory >& rFactory          ) :
+    const ::com::sun::star::uno::Reference< XIndexContainer >& rMenuContainer, 
+    const ::com::sun::star::uno::Reference< XSingleComponentFactory >& rFactory          ) :
     m_nElementDepth( 0 ),
     m_bMenuPopupMode( sal_False ),
     m_xMenuContainer( rMenuContainer ),
@@ -534,7 +534,7 @@
 
 
 void SAL_CALL OReadMenuHandler::startElement(
-	const OUString& aName, const Reference< XAttributeList > &xAttrList )
+	const OUString& aName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttrList )
 throw( SAXException, RuntimeException )
 {
 	if ( m_bMenuPopupMode )
@@ -546,14 +546,14 @@
 	{
 		++m_nElementDepth;
 		m_bMenuPopupMode = sal_True;
-		m_xReader = Reference< XDocumentHandler >( new OReadMenuPopupHandler( m_xMenuContainer, m_xContainerFactory ));
+		m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >( new OReadMenuPopupHandler( m_xMenuContainer, m_xContainerFactory ));
 		m_xReader->startDocument();
 	}
 	else
 	{
 		OUString aErrorMessage = getErrorLineString();
 		aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "unknown element found!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
@@ -573,13 +573,13 @@
 		if ( 0 == m_nElementDepth )
 		{
 			m_xReader->endDocument();
-			m_xReader = Reference< XDocumentHandler >();
+			m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >();
 			m_bMenuPopupMode = sal_False;
 			if ( !aName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( ELEMENT_MENUPOPUP )))
 			{
 				OUString aErrorMessage = getErrorLineString();
 				aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "closing element menupopup expected!" ));
-				throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+				throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 			}
 		}
 		else
@@ -592,8 +592,8 @@
 
 
 OReadMenuPopupHandler::OReadMenuPopupHandler(     
-    const Reference< XIndexContainer >& rMenuContainer, 
-    const Reference< XSingleComponentFactory >& rFactory          ) :
+    const ::com::sun::star::uno::Reference< XIndexContainer >& rMenuContainer, 
+    const ::com::sun::star::uno::Reference< XSingleComponentFactory >& rFactory          ) :
     m_nElementDepth( 0 ),
     m_bMenuMode( sal_False ),
     m_xMenuContainer( rMenuContainer ),
@@ -620,7 +620,7 @@
 }
 
 void SAL_CALL OReadMenuPopupHandler::startElement(
-	const OUString& rName, const Reference< XAttributeList > &xAttrList )
+	const OUString& rName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttrList )
 throw( SAXException, RuntimeException )
 {
 	++m_nElementDepth;
@@ -636,14 +636,14 @@
 		m_bMenuMode = sal_True;
 
         // Container must be factory to create sub container
-        Reference< XComponentContext > xComponentContext;
-        Reference< XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
+        ::com::sun::star::uno::Reference< XComponentContext > xComponentContext;
+        ::com::sun::star::uno::Reference< XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), UNO_QUERY );
         xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))) >>=
             xComponentContext;
 
-        Reference< XIndexContainer > xSubItemContainer;
+        ::com::sun::star::uno::Reference< XIndexContainer > xSubItemContainer;
         if ( m_xContainerFactory.is() )
-            xSubItemContainer = Reference< XIndexContainer >( m_xContainerFactory->createInstanceWithContext( xComponentContext ), UNO_QUERY );
+            xSubItemContainer = ::com::sun::star::uno::Reference< XIndexContainer >( m_xContainerFactory->createInstanceWithContext( xComponentContext ), UNO_QUERY );
 		
         // read attributes for menu
 		for ( sal_Int16 i=0; i< xAttrList->getLength(); i++ )
@@ -670,10 +670,10 @@
 		{
 			OUString aErrorMessage = getErrorLineString();
 			aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "attribute id for element menu required!" ));
-			throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+			throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 		}
 
-		m_xReader = Reference< XDocumentHandler >( new OReadMenuHandler( xSubItemContainer, m_xContainerFactory ));
+		m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >( new OReadMenuHandler( xSubItemContainer, m_xContainerFactory ));
 		m_xReader->startDocument();
 	}
 	else if ( rName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( ELEMENT_MENUITEM )))
@@ -699,7 +699,7 @@
 		{
             Sequence< PropertyValue > aMenuItem( 5 );
 			initPropertyCommon( aMenuItem, aCommandId, aHelpId, aLabel );
-			aMenuItem[2].Value <<= Reference< XIndexContainer >();
+			aMenuItem[2].Value <<= ::com::sun::star::uno::Reference< XIndexContainer >();
 
             m_xMenuContainer->insertByIndex( m_xMenuContainer->getCount(), makeAny( aMenuItem ) );
 		}
@@ -720,7 +720,7 @@
 	{
 		OUString aErrorMessage = getErrorLineString();
 		aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "unknown element found!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
@@ -740,13 +740,13 @@
 		if ( 0 == m_nElementDepth )
 		{
 			m_xReader->endDocument();
-			m_xReader = Reference< XDocumentHandler >();
+			m_xReader = ::com::sun::star::uno::Reference< XDocumentHandler >();
 			m_bMenuMode = sal_False;
 			if ( !aName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( ELEMENT_MENU )))
 			{
 				OUString aErrorMessage = getErrorLineString();
 				aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "closing element menu expected!" ));
-				throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+				throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 			}
 		}
 		else
@@ -760,7 +760,7 @@
 			{
 				OUString aErrorMessage = getErrorLineString();
 				aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "closing element menuitem expected!" ));
-				throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+				throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 			}
 		}
 		else if ( m_nNextElementExpected == ELEM_CLOSE_MENUSEPARATOR )
@@ -769,7 +769,7 @@
 			{
 				OUString aErrorMessage = getErrorLineString();
 				aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "closing element menuseparator expected!" ));
-				throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+				throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 			}
 		}
 
@@ -782,12 +782,12 @@
 
 
 OWriteMenuDocumentHandler::OWriteMenuDocumentHandler( 
-    const Reference< XIndexAccess >& rMenuBarContainer,
-    const Reference< XDocumentHandler >& rDocumentHandler ) :
+    const ::com::sun::star::uno::Reference< XIndexAccess >& rMenuBarContainer,
+    const ::com::sun::star::uno::Reference< XDocumentHandler >& rDocumentHandler ) :
 	m_xMenuBarContainer( rMenuBarContainer ),
 	m_xWriteDocumentHandler( rDocumentHandler )
 {
-	m_xEmptyList = Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
+	m_xEmptyList = ::com::sun::star::uno::Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
 	m_aAttributeType = 	OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_TYPE_CDATA ));
 }
 
@@ -801,12 +801,12 @@
 throw ( SAXException, RuntimeException )
 {
 	AttributeListImpl* pList = new AttributeListImpl;
-	Reference< XAttributeList > rList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > rList( (XAttributeList *) pList , UNO_QUERY );
 
 	m_xWriteDocumentHandler->startDocument();
 
 	// write DOCTYPE line!
-	Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
+	::com::sun::star::uno::Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
 	if ( xExtendedDocHandler.is() )
 	{
 		xExtendedDocHandler->unknown( OUString( RTL_CONSTASCII_USTRINGPARAM( MENUBAR_DOCTYPE )) );
@@ -833,7 +833,7 @@
 }
 
 
-void OWriteMenuDocumentHandler::WriteMenu( const Reference< XIndexAccess >& rMenuContainer )
+void OWriteMenuDocumentHandler::WriteMenu( const ::com::sun::star::uno::Reference< XIndexAccess >& rMenuContainer )
 throw ( SAXException, RuntimeException )
 {
 	sal_Int32  nItemCount = rMenuContainer->getCount();
@@ -850,7 +850,7 @@
             OUString    aLabel;
             OUString    aHelpURL;
             sal_Int16   nType( ::com::sun::star::ui::ItemType::DEFAULT );
-            Reference< XIndexAccess > xSubMenu;
+            ::com::sun::star::uno::Reference< XIndexAccess > xSubMenu;
             
             ExtractMenuParameters( aProps, aCommandURL, aLabel, aHelpURL, xSubMenu, nType );
             if ( xSubMenu.is() )
@@ -864,7 +864,7 @@
 			    else if (( aCommandURL.getLength() > 0 ) && !AddonPopupMenu::IsCommandURLPrefix ( aCommandURL ))
 			    {
 				    AttributeListImpl* pListMenu = new AttributeListImpl;
-				    Reference< XAttributeList > xListMenu( (XAttributeList *)pListMenu , UNO_QUERY );
+				    ::com::sun::star::uno::Reference< XAttributeList > xListMenu( (XAttributeList *)pListMenu , UNO_QUERY );
 
                     pListMenu->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_NS_ID )),
                                             m_aAttributeType,
@@ -916,7 +916,7 @@
 void OWriteMenuDocumentHandler::WriteMenuItem( const OUString& aCommandURL, const OUString& aLabel, const OUString& aHelpURL)
 {
 	AttributeListImpl* pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
     pList->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_NS_ID )),
                                 m_aAttributeType,
--- framework/source/xml/saxnamespacefilter.cxx.gcc43~	2006-10-12 12:44:43.000000000 +0200
+++ framework/source/xml/saxnamespacefilter.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -60,7 +60,7 @@
 namespace framework{
 
 
-SaxNamespaceFilter::SaxNamespaceFilter( Reference< XDocumentHandler >& rSax1DocumentHandler ) :
+SaxNamespaceFilter::SaxNamespaceFilter( ::com::sun::star::uno::Reference< XDocumentHandler >& rSax1DocumentHandler ) :
     ThreadHelpBase( &Application::GetSolarMutex() ), OWeakObject(),
      m_xLocator( 0 ),
      xDocumentHandler( rSax1DocumentHandler ),
@@ -95,7 +95,7 @@
 }
 
 void SAL_CALL SaxNamespaceFilter::startElement(
-	const rtl::OUString& rName, const Reference< XAttributeList > &xAttribs )
+	const rtl::OUString& rName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttribs )
 	throw(	SAXException, RuntimeException )
 {
 	XMLNamespaces aXMLNamespaces;
@@ -194,7 +194,7 @@
 }
 
 void SAL_CALL SaxNamespaceFilter::setDocumentLocator(
-	const Reference< XLocator > &xLocator)
+	const ::com::sun::star::uno::Reference< XLocator > &xLocator)
 	throw(	SAXException, RuntimeException )
 {
 	m_xLocator = xLocator;
--- framework/source/xml/statusbarconfiguration.cxx.gcc43~	2006-09-16 16:31:12.000000000 +0200
+++ framework/source/xml/statusbarconfiguration.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -102,18 +102,18 @@
 
 SV_IMPL_PTRARR( StatusBarDescriptor, StatusBarItemDescriptorPtr);
 
-static Reference< XParser > GetSaxParser(
+static ::com::sun::star::uno::Reference< XParser > GetSaxParser(
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory
 	)
 {
-	return Reference< XParser >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
+	return ::com::sun::star::uno::Reference< XParser >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
 }
 
-static Reference< XDocumentHandler > GetSaxWriter(
+static ::com::sun::star::uno::Reference< XDocumentHandler > GetSaxWriter(
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory
 	)
 {
-	return Reference< XDocumentHandler >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
+	return ::com::sun::star::uno::Reference< XDocumentHandler >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
 }
 
 sal_Bool StatusBarConfiguration::LoadStatusBar( 
@@ -133,19 +133,19 @@
 }
 
 sal_Bool StatusBarConfiguration::LoadStatusBar( 
-	const Reference< XMultiServiceFactory >& xServiceFactory,
-    const Reference< XInputStream >& xInputStream,
-    const Reference< XIndexContainer >& rStatusbarConfiguration )
+	const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceFactory,
+    const ::com::sun::star::uno::Reference< XInputStream >& xInputStream,
+    const ::com::sun::star::uno::Reference< XIndexContainer >& rStatusbarConfiguration )
 {
-	Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
 
 	// connect stream to input stream to the parser
 	InputSource aInputSource;
 	aInputSource.aInputStream = xInputStream;
 
 	// create namespace filter and set menudocument handler inside to support xml namespaces
-	Reference< XDocumentHandler > xDocHandler( new OReadStatusBarDocumentHandler( rStatusbarConfiguration ));
-	Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xDocHandler( new OReadStatusBarDocumentHandler( rStatusbarConfiguration ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
 
 	// connect parser and filter
 	xParser->setDocumentHandler( xFilter );
@@ -170,12 +170,12 @@
 }
 
 sal_Bool StatusBarConfiguration::StoreStatusBar( 
-	const Reference< XMultiServiceFactory >& xServiceFactory,
-    const Reference< XOutputStream >& xOutputStream,
-    const Reference< XIndexAccess >& rStatusbarConfiguration )
+	const ::com::sun::star::uno::Reference< XMultiServiceFactory >& xServiceFactory,
+    const ::com::sun::star::uno::Reference< XOutputStream >& xOutputStream,
+    const ::com::sun::star::uno::Reference< XIndexAccess >& rStatusbarConfiguration )
 {
-	Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
-	Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
+	::com::sun::star::uno::Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
+	::com::sun::star::uno::Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
 	xDataSource->setOutputStream( xOutputStream );
 
 	try
--- framework/source/xml/statusbardocumenthandler.cxx.gcc43~	2007-04-03 15:51:03.000000000 +0200
+++ framework/source/xml/statusbardocumenthandler.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -194,7 +194,7 @@
 
 
 OReadStatusBarDocumentHandler::OReadStatusBarDocumentHandler( 
-    const Reference< XIndexContainer >& rStatusBarItems ) : 
+    const ::com::sun::star::uno::Reference< XIndexContainer >& rStatusBarItems ) : 
 	ThreadHelpBase( &Application::GetSolarMutex() ), 
     ::cppu::OWeakObject(), 	
     m_aStatusBarItems( rStatusBarItems )
@@ -259,12 +259,12 @@
 	{
 		OUString aErrorMessage = getErrorLineString();
 		aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "No matching start or end element 'statusbar' found!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
 void SAL_CALL OReadStatusBarDocumentHandler::startElement(
-	const OUString& aName, const Reference< XAttributeList > &xAttribs )
+	const OUString& aName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttribs )
 throw(	SAXException, RuntimeException )
 {
 	ResetableGuard aGuard( m_aLock );
@@ -280,7 +280,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'statusbar:statusbar' cannot be embeded into 'statusbar:statusbar'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bStatusBarStartFound = sal_True;
@@ -293,14 +293,14 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'statusbar:statusbaritem' must be embeded into element 'statusbar:statusbar'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 				
 				if ( m_bStatusBarItemStartFound )
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element statusbar:statusbaritem is not a container!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				OUString    aCommandURL;
@@ -345,7 +345,7 @@
 								{
 									OUString aErrorMessage = getErrorLineString();
 									aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Attribute statusbar:align must have one value of 'left','right' or 'center'!" ));
-									throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+									throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 								}
 							}
 							break;
@@ -370,7 +370,7 @@
 								{
 									OUString aErrorMessage = getErrorLineString();
 									aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Attribute statusbar:autosize must have value 'true' or 'false'!" ));
-									throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+									throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 								}
 							}
 							break;
@@ -385,7 +385,7 @@
 								{
 									OUString aErrorMessage = getErrorLineString();
 									aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Attribute statusbar:autosize must have value 'true' or 'false'!" ));
-									throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+									throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 								}
 							}
 							break;
@@ -400,7 +400,7 @@
 								{
 									OUString aErrorMessage = getErrorLineString();
 									aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Attribute statusbar:ownerdraw must have value 'true' or 'false'!" ));
-									throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+									throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 								}
 							}
 							break;
@@ -433,7 +433,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Required attribute statusbar:url must have a value!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
                         else
                         {
@@ -479,7 +479,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'statusbar' found, but no start element 'statusbar'" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 				
 				m_bStatusBarStartFound = sal_False;
@@ -492,7 +492,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'statusbar:statusbaritem' found, but no start element 'statusbar:statusbaritem'" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bStatusBarItemStartFound = sal_False;
@@ -522,7 +522,7 @@
 }
 
 void SAL_CALL OReadStatusBarDocumentHandler::setDocumentLocator(
-	const Reference< XLocator > &xLocator)
+	const ::com::sun::star::uno::Reference< XLocator > &xLocator)
 throw(	SAXException, RuntimeException )
 {
 	ResetableGuard aGuard( m_aLock );
@@ -551,13 +551,13 @@
 //_________________________________________________________________________________________________________________
 
 OWriteStatusBarDocumentHandler::OWriteStatusBarDocumentHandler(
-    const Reference< XIndexAccess >& aStatusBarItems,
-    const Reference< XDocumentHandler >& rWriteDocumentHandler ) :
+    const ::com::sun::star::uno::Reference< XIndexAccess >& aStatusBarItems,
+    const ::com::sun::star::uno::Reference< XDocumentHandler >& rWriteDocumentHandler ) :
     ThreadHelpBase( &Application::GetSolarMutex() ),
 	m_aStatusBarItems( aStatusBarItems ),
 	m_xWriteDocumentHandler( rWriteDocumentHandler )
 {
-	m_xEmptyList		= Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
+	m_xEmptyList		= ::com::sun::star::uno::Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
 	m_aAttributeType	= OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_TYPE_CDATA ));
 	m_aXMLXlinkNS		= OUString( RTL_CONSTASCII_USTRINGPARAM( XMLNS_XLINK_PREFIX ));
 	m_aXMLStatusBarNS	= OUString( RTL_CONSTASCII_USTRINGPARAM( XMLNS_STATUSBAR_PREFIX ));
@@ -575,7 +575,7 @@
 	m_xWriteDocumentHandler->startDocument();
 
 	// write DOCTYPE line!
-	Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
+	::com::sun::star::uno::Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
 	if ( xExtendedDocHandler.is() )
 	{
 		xExtendedDocHandler->unknown( OUString( RTL_CONSTASCII_USTRINGPARAM( STATUSBAR_DOCTYPE )) );
@@ -583,7 +583,7 @@
 	}
 
 	AttributeListImpl* pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
 	pList->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_XMLNS_STATUSBAR )),
 						 m_aAttributeType,
@@ -643,7 +643,7 @@
 throw ( SAXException, RuntimeException )
 {
 	AttributeListImpl* pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
 	if ( m_aAttributeURL.getLength() == 0 )
 	{
--- framework/source/xml/toolboxconfiguration.cxx.gcc43~	2006-09-16 16:31:39.000000000 +0200
+++ framework/source/xml/toolboxconfiguration.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -104,20 +104,20 @@
 namespace framework
 {
 
-static Reference< XParser > GetSaxParser(
+static ::com::sun::star::uno::Reference< XParser > GetSaxParser(
 	// #110897#
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory
 	)
 {
-	return Reference< XParser >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
+	return ::com::sun::star::uno::Reference< XParser >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Parser" )), UNO_QUERY);
 }
 
-static Reference< XDocumentHandler > GetSaxWriter(
+static ::com::sun::star::uno::Reference< XDocumentHandler > GetSaxWriter(
 	// #110897#
 	const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceFactory
 	)
 {
-	return Reference< XDocumentHandler >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
+	return ::com::sun::star::uno::Reference< XDocumentHandler >( xServiceFactory->createInstance( ::rtl::OUString::createFromAscii( "com.sun.star.xml.sax.Writer" )), UNO_QUERY) ;
 }
 
 // #110897#
@@ -126,7 +126,7 @@
 	const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& rInputStream,
 	const ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexContainer >& rToolbarConfiguration )
 {
-	Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XParser > xParser( GetSaxParser( xServiceFactory ) );
 
 	// connect stream to input stream to the parser
 	InputSource aInputSource;
@@ -134,8 +134,8 @@
 	aInputSource.aInputStream = rInputStream;
 
 	// create namespace filter and set menudocument handler inside to support xml namespaces
-	Reference< XDocumentHandler > xDocHandler( new OReadToolBoxDocumentHandler( rToolbarConfiguration ));
-	Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xDocHandler( new OReadToolBoxDocumentHandler( rToolbarConfiguration ));
+	::com::sun::star::uno::Reference< XDocumentHandler > xFilter( new SaxNamespaceFilter( xDocHandler ));
 
 	// connect parser and filter
 	xParser->setDocumentHandler( xFilter );
@@ -166,9 +166,9 @@
 	const ::com::sun::star::uno::Reference< ::com::sun::star::io::XOutputStream >& rOutputStream,
 	const ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexAccess >& rToolbarConfiguration )
 {
-	Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
+	::com::sun::star::uno::Reference< XDocumentHandler > xWriter( GetSaxWriter( xServiceFactory ) );
 
-	Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
+	::com::sun::star::uno::Reference< ::com::sun::star::io::XActiveDataSource> xDataSource( xWriter , UNO_QUERY );
 	xDataSource->setOutputStream( rOutputStream );
 
 	try
--- framework/source/xml/toolboxdocumenthandler.cxx.gcc43~	2007-04-03 15:51:15.000000000 +0200
+++ framework/source/xml/toolboxdocumenthandler.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -164,7 +164,7 @@
     { OReadToolBoxDocumentHandler::TB_NS_TOOLBAR,   ATTRIBUTE_UINAME            }
 };
 
-OReadToolBoxDocumentHandler::OReadToolBoxDocumentHandler( const Reference< XIndexContainer >& rItemContainer ) :
+OReadToolBoxDocumentHandler::OReadToolBoxDocumentHandler( const ::com::sun::star::uno::Reference< XIndexContainer >& rItemContainer ) :
 	ThreadHelpBase( &Application::GetSolarMutex() ), 
     ::cppu::OWeakObject(), 	
     m_rItemContainer( rItemContainer ),
@@ -247,12 +247,12 @@
 	{
 		OUString aErrorMessage = getErrorLineString();
 		aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "No matching start or end element 'toolbar' found!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 }
 
 void SAL_CALL OReadToolBoxDocumentHandler::startElement(
-	const OUString& aName, const Reference< XAttributeList > &xAttribs )
+	const OUString& aName, const ::com::sun::star::uno::Reference< XAttributeList > &xAttribs )
 throw(	SAXException, RuntimeException )
 {
 	ResetableGuard aGuard( m_aLock );
@@ -268,7 +268,7 @@
 				{
 				    OUString aErrorMessage = getErrorLineString();
 				    aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'toolbar:toolbar' cannot be embeded into 'toolbar:toolbar'!" ));
-				    throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+				    throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
                         else
                         {
@@ -293,7 +293,7 @@
                             if ( aUIName.getLength() > 0 )
                             {
                                 // Try to set UI name as a container property
-                                Reference< XPropertySet > xPropSet( m_rItemContainer, UNO_QUERY );
+                                ::com::sun::star::uno::Reference< XPropertySet > xPropSet( m_rItemContainer, UNO_QUERY );
                                 if ( xPropSet.is() )
                                 {
                                     try
@@ -317,7 +317,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element 'toolbar:toolbaritem' must be embeded into element 'toolbar:toolbar'!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				if ( m_bToolBarSeparatorStartFound ||
@@ -327,7 +327,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element toolbar:toolbaritem is not a container!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				OUString aAttribute;
@@ -385,7 +385,7 @@
 								{
 									OUString aErrorMessage = getErrorLineString();
 									aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Attribute toolbar:visible must have value 'true' or 'false'!" ));
-									throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+									throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 								}
 							}
 							break;
@@ -448,7 +448,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Required attribute toolbar:url must have a value!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 		        if ( aCommandURL.getLength() > 0 )
@@ -482,7 +482,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element toolbar:toolbarspace is not a container!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bToolBarSpaceStartFound = sal_True;
@@ -507,7 +507,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element toolbar:toolbarbreak is not a container!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bToolBarBreakStartFound = sal_True;
@@ -532,7 +532,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "Element toolbar:toolbarseparator is not a container!" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bToolBarSeparatorStartFound = sal_True;
@@ -570,7 +570,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'toolbar' found, but no start element 'toolbar'" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bToolBarStartFound = sal_False;
@@ -583,7 +583,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'toolbar:toolbaritem' found, but no start element 'toolbar:toolbaritem'" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bToolBarItemStartFound = sal_False;
@@ -596,7 +596,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'toolbar:toolbarbreak' found, but no start element 'toolbar:toolbarbreak'" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bToolBarBreakStartFound = sal_False;
@@ -609,7 +609,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'toolbar:toolbarspace' found, but no start element 'toolbar:toolbarspace'" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bToolBarSpaceStartFound = sal_False;
@@ -622,7 +622,7 @@
 				{
 					OUString aErrorMessage = getErrorLineString();
 					aErrorMessage += OUString( RTL_CONSTASCII_USTRINGPARAM( "End element 'toolbar:toolbarseparator' found, but no start element 'toolbar:toolbarseparator'" ));
-					throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+					throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 				}
 
 				m_bToolBarSeparatorStartFound = sal_False;
@@ -652,7 +652,7 @@
 }
 
 void SAL_CALL OReadToolBoxDocumentHandler::setDocumentLocator(
-	const Reference< XLocator > &xLocator)
+	const ::com::sun::star::uno::Reference< XLocator > &xLocator)
 throw(	SAXException, RuntimeException )
 {
 	ResetableGuard aGuard( m_aLock );
@@ -681,13 +681,13 @@
 //_________________________________________________________________________________________________________________
 
 OWriteToolBoxDocumentHandler::OWriteToolBoxDocumentHandler( 
-    const Reference< XIndexAccess >& rItemAccess,
-    Reference< XDocumentHandler >& rWriteDocumentHandler ) :
+    const ::com::sun::star::uno::Reference< XIndexAccess >& rItemAccess,
+    ::com::sun::star::uno::Reference< XDocumentHandler >& rWriteDocumentHandler ) :
 	ThreadHelpBase( &Application::GetSolarMutex() ), 
 	m_xWriteDocumentHandler( rWriteDocumentHandler ),
 	m_rItemAccess( rItemAccess )
 {
-	m_xEmptyList		= Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
+	m_xEmptyList		= ::com::sun::star::uno::Reference< XAttributeList >( (XAttributeList *)new AttributeListImpl, UNO_QUERY );
 	m_aAttributeType	= OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_TYPE_CDATA ));
 	m_aXMLXlinkNS		= OUString( RTL_CONSTASCII_USTRINGPARAM( XMLNS_XLINK_PREFIX ));
 	m_aXMLToolbarNS		= OUString( RTL_CONSTASCII_USTRINGPARAM( XMLNS_TOOLBAR_PREFIX ));
@@ -705,7 +705,7 @@
 	m_xWriteDocumentHandler->startDocument();
 
 	// write DOCTYPE line!
-	Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
+	::com::sun::star::uno::Reference< XExtendedDocumentHandler > xExtendedDocHandler( m_xWriteDocumentHandler, UNO_QUERY );
 	if ( xExtendedDocHandler.is() )
 	{
 		xExtendedDocHandler->unknown( OUString( RTL_CONSTASCII_USTRINGPARAM( TOOLBAR_DOCTYPE )) );
@@ -713,7 +713,7 @@
 	}
 
     OUString aUIName;
-    Reference< XPropertySet > xPropSet( m_rItemAccess, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XPropertySet > xPropSet( m_rItemAccess, UNO_QUERY );
     if ( xPropSet.is() )
     {
         try
@@ -727,7 +727,7 @@
     }
     
     AttributeListImpl* pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
 	pList->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM( ATTRIBUTE_XMLNS_TOOLBAR )),
 						 m_aAttributeType,
@@ -792,7 +792,7 @@
 throw ( SAXException, RuntimeException )
 {
     AttributeListImpl* pList = new AttributeListImpl;
-	Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
+	::com::sun::star::uno::Reference< XAttributeList > xList( (XAttributeList *) pList , UNO_QUERY );
 
 	if ( m_aAttributeURL.getLength() == 0 )
 	{
--- framework/source/xml/xmlnamespaces.cxx.gcc43~	2006-09-16 16:32:20.000000000 +0200
+++ framework/source/xml/xmlnamespaces.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -82,7 +82,7 @@
 		{
 			// a xml namespace without name is not allowed (e.g. "xmlns:" )
 			OUString aErrorMessage( RTL_CONSTASCII_USTRINGPARAM( "A xml namespace without name is not allowed!" ));
-			throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+			throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 		}
 	}
 
@@ -91,7 +91,7 @@
 		// namespace should be reseted - as xml draft states this is only allowed
 		// for the default namespace - check and throw exception if check fails
 		OUString aErrorMessage( RTL_CONSTASCII_USTRINGPARAM( "Clearing xml namespace only allowed for default namespace!" ));
-		throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+		throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 	}
 	else
 	{
@@ -132,7 +132,7 @@
 		{
 			// attribute with namespace but without name "namespace:" is not allowed!!
 			OUString aErrorMessage( RTL_CONSTASCII_USTRINGPARAM( "Attribute has no name only preceding namespace!" ));
-			throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+			throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 		}
 	}
 
@@ -168,7 +168,7 @@
 		{
 			// attribute with namespace but without a name is not allowed (e.g. "cfg:" )
 			OUString aErrorMessage( RTL_CONSTASCII_USTRINGPARAM( "Attribute has no name only preceding namespace!" ));
-			throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+			throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 		}
 	}
 	else
@@ -191,7 +191,7 @@
 		{
 			// namespace not defined => throw exception!
 			OUString aErrorMessage( RTL_CONSTASCII_USTRINGPARAM( "XML namespace used but not defined!" ));
-			throw SAXException( aErrorMessage, Reference< XInterface >(), Any() );
+			throw SAXException( aErrorMessage, ::com::sun::star::uno::Reference< XInterface >(), Any() );
 		}
 	}
 }
--- i18npool/source/defaultnumberingprovider/defaultnumberingprovider.cxx.gcc43~	2006-12-12 17:15:52.000000000 +0100
+++ i18npool/source/defaultnumberingprovider/defaultnumberingprovider.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -51,6 +51,7 @@
 #include <localedata.hxx>
 #include <nativenumbersupplier.hxx>
 #include <stdio.h>
+#include <cstring>
 
 #if OSL_DEBUG_LEVEL == 0 && !defined(NDEBUG)
 #define NDEBUG
--- i18npool/source/localedata/saxparser.cxx.gcc43~	2006-09-17 11:22:14.000000000 +0200
+++ i18npool/source/localedata/saxparser.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -37,6 +37,7 @@
 #include "precompiled_i18npool.hxx"
 
 #include <stdio.h>
+#include <cstring>
 #include <stack>
 
 #include "sal/main.h"
--- i18npool/source/search/textsearch.cxx.gcc43~	2006-09-17 11:23:23.000000000 +0200
+++ i18npool/source/search/textsearch.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -78,6 +78,8 @@
 #include <cppuhelper/weak.hxx>
 #endif
 
+#include <cstring>
+
 #ifdef _MSC_VER
 // get rid of that dumb compiler warning
 // identifier was truncated to '255' characters in the debug information
--- idlc/source/idlccompile.cxx.gcc43~	2006-09-17 10:14:30.000000000 +0200
+++ idlc/source/idlccompile.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -71,6 +71,8 @@
 #endif
 #endif
 
+#include <cstring>
+
 using namespace ::rtl;
 using namespace ::osl;
 
--- idlc/source/idlcproduce.cxx.gcc43~	2006-09-17 10:14:57.000000000 +0200
+++ idlc/source/idlcproduce.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -63,6 +63,8 @@
 #include <errno.h>
 #endif
 
+#include <cstring>
+
 using namespace ::rtl;
 using namespace ::osl;
 
--- jvmfwk/plugins/sunmajor/pluginlib/sunjavaplugin.cxx.gcc43~	2007-06-13 09:57:06.000000000 +0200
+++ jvmfwk/plugins/sunmajor/pluginlib/sunjavaplugin.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -38,6 +38,7 @@
 #if OSL_DEBUG_LEVEL > 0
 #include <stdio.h>
 #endif
+#include <cstring>
 
 #include "boost/scoped_array.hpp"
 #include "osl/diagnose.h"
--- jvmfwk/plugins/sunmajor/pluginlib/util.cxx.gcc43~	2007-11-06 00:25:31.000000000 +0100
+++ jvmfwk/plugins/sunmajor/pluginlib/util.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -51,6 +51,7 @@
 #include <utility>
 #include <algorithm>
 #include <map>
+#include <cstring>
 
 #if defined WNT
 #if defined _MSC_VER
--- jvmfwk/source/elements.cxx.gcc43~	2007-06-20 19:13:59.000000000 +0200
+++ jvmfwk/source/elements.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -45,6 +45,7 @@
 #include "libxmlutil.hxx"
 #include "osl/thread.hxx"
 #include <algorithm>
+#include <cstring>
 #include "libxml/parser.h"
 #include "libxml/xpath.h"
 #include "libxml/xpathInternals.h"
--- jvmfwk/source/fwkutil.cxx.gcc43~	2007-06-13 09:58:23.000000000 +0200
+++ jvmfwk/source/fwkutil.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -47,6 +47,7 @@
 #endif
 
 #include <string>
+#include <cstring>
 #include "osl/mutex.hxx"
 #include "osl/module.hxx"
 #include "osl/thread.hxx"
--- lingucomponent/source/languageguessing/guess.cxx.gcc43~	2007-06-22 10:32:42.000000000 +0200
+++ lingucomponent/source/languageguessing/guess.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -42,6 +42,8 @@
 #include <altstrfunc.hxx>
 #include <guess.hxx>
 
+#include <cstring>
+
 using namespace std;
 
 Guess::Guess()
--- oox/inc/oox/core/helper.hxx.gcc43~	2007-09-06 06:19:26.000000000 +0200
+++ oox/inc/oox/core/helper.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -40,6 +40,7 @@
 #include <osl/endian.h>
 #include <rtl/string.hxx>
 #include <rtl/ustring.hxx>
+#include <cstring>
 
 // Helper macros ==============================================================
 
--- oox/source/core/binarycodec.cxx.gcc43~	2007-09-06 06:19:27.000000000 +0200
+++ oox/source/core/binarycodec.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -35,6 +35,7 @@
 
 #include "oox/core/binarycodec.hxx"
 #include <algorithm>
+#include <cstring>
 #include <osl/diagnose.h>
 
 namespace oox {
--- oox/source/core/binaryinputstream.cxx.gcc43~	2007-09-06 06:19:27.000000000 +0200
+++ oox/source/core/binaryinputstream.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -37,6 +37,7 @@
 #include <osl/diagnose.h>
 #include <com/sun/star/io/XInputStream.hpp>
 #include <com/sun/star/io/XSeekable.hpp>
+#include <cstring>
 
 using ::rtl::OUString;
 using ::com::sun::star::uno::Reference;
--- oox/source/core/binaryoutputstream.cxx.gcc43~	2007-09-06 06:19:27.000000000 +0200
+++ oox/source/core/binaryoutputstream.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -40,6 +40,8 @@
 #include "oox/core/binaryinputstream.hxx"
 #include "oox/core/helper.hxx"
 
+#include <cstring>
+
 using ::rtl::OUString;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::Sequence;
--- oox/source/xls/biffcodec.cxx.gcc43~	2007-09-06 06:19:27.000000000 +0200
+++ oox/source/xls/biffcodec.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -35,6 +35,8 @@
 
 #include "oox/xls/biffcodec.hxx"
 
+#include <cstring>
+
 using ::rtl::OString;
 using ::rtl::OUString;
 using ::rtl::OStringToOUString;
--- package/source/zipapi/MemoryByteGrabber.hxx.gcc43~	2006-06-20 08:13:19.000000000 +0200
+++ package/source/zipapi/MemoryByteGrabber.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -42,6 +42,8 @@
 #include <com/sun/star/io/XSeekable.hpp>
 #endif
 
+#include <cstring>
+
 class MemoryByteGrabber 
 {
 protected:
--- package/source/zipapi/XUnbufferedStream.cxx.gcc43~	2006-09-17 19:27:48.000000000 +0200
+++ package/source/zipapi/XUnbufferedStream.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -60,6 +60,7 @@
 #include <EncryptedDataHeader.hxx>
 #endif
 #include <algorithm>
+#include <cstring>
 
 #if 0
 // for debugging purposes here
--- psprint/source/fontmanager/fontconfig.cxx.gcc43~	2007-11-06 00:26:29.000000000 +0100
+++ psprint/source/fontmanager/fontconfig.cxx	2007-11-06 00:28:40.000000000 +0100
@@ -58,6 +58,7 @@
 
 #include <cstdio>
 #include <cstdarg>
+#include <cstring>
 #ifndef _UTL_ATOM_HXX_
 #include <unotools/atom.hxx>
 #endif
--- psprint/source/helper/helper.cxx.gcc43~	2006-09-16 14:34:47.000000000 +0200
+++ psprint/source/helper/helper.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -39,6 +39,7 @@
 #include <cstring>
 #include <sys/stat.h>
 #include <unistd.h>
+#include <limits.h>
 
 #include <psprint/helper.hxx>
 #include <tools/string.hxx>
--- rdbmaker/source/rdbmaker/rdboptions.cxx.gcc43~	2006-06-20 06:10:27.000000000 +0200
+++ rdbmaker/source/rdbmaker/rdboptions.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -33,6 +33,7 @@
  *
  ************************************************************************/
 #include 	<stdio.h>
+#include	<cstring>
 
 #include	"rdboptions.hxx"
 
--- registry/tools/checksingleton.cxx.gcc43~	2007-03-26 15:54:18.000000000 +0200
+++ registry/tools/checksingleton.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -38,6 +38,7 @@
 #include <stdio.h>
 
 #include <set>
+#include <cstring>
 
 #ifndef _REGISTRY_REGISTRY_HXX_
 #include "registry/registry.hxx"
--- sax/source/expatwrap/sax_expat.cxx.gcc43~	2006-06-20 01:07:26.000000000 +0200
+++ sax/source/expatwrap/sax_expat.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -35,6 +35,7 @@
 #include <stdlib.h>
 #include <sal/alloca.h>
 #include <vector>
+#include <cstring>
 
 #include <osl/diagnose.h>
 
--- sax/source/fastparser/fastparser.cxx.gcc43~	2007-11-06 00:26:26.000000000 +0100
+++ sax/source/fastparser/fastparser.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -39,6 +39,7 @@
 #include <stack>
 #include <vector>
 #include <hash_map>
+#include <cstring>
 #include <boost/scoped_ptr.hpp>
 #include <boost/shared_ptr.hpp>
 
--- sd/source/ui/inc/framework/FrameworkHelper.hxx.gcc43~	2007-10-26 16:59:01.000000000 +0200
+++ sd/source/ui/inc/framework/FrameworkHelper.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -368,10 +368,8 @@
 
 
 
-namespace {
-
 template<class T>
-    class CallbackAdapter : public sd::framework::FrameworkHelper::Callback
+    class __attribute__((visibility("hidden"))) CallbackAdapter : public sd::framework::FrameworkHelper::Callback
     {
     public:
         CallbackAdapter<T> (const CallbackAdapter<T>& rCA) : mT(rCA.mT) {}
@@ -384,10 +382,6 @@
 
 
 
-} // end of anonymous namespace
-
-
-
 namespace sd { namespace framework {
 
 template<class C>
--- shell/source/unix/sysshell/recently_used_file_handler.cxx.gcc43~	2007-06-19 18:12:29.000000000 +0200
+++ shell/source/unix/sysshell/recently_used_file_handler.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -69,6 +69,7 @@
 #include <vector>
 #include <algorithm>
 #include <functional>
+#include <cstring>
 
 namespace /* private */ {
     
--- svtools/source/java/javacontext.cxx.gcc43~	2007-06-27 23:47:11.000000000 +0200
+++ svtools/source/java/javacontext.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -60,7 +60,7 @@
 namespace svt
 {
 
-JavaContext::JavaContext( const Reference< XCurrentContext > & ctx )
+JavaContext::JavaContext( const com::sun::star::uno::Reference< XCurrentContext > & ctx )
     :
     m_aRefCount(0),
     m_xNextContext( ctx ),
@@ -68,7 +68,7 @@
 {
 }
 
-JavaContext::JavaContext( const Reference< XCurrentContext > & ctx,
+JavaContext::JavaContext( const com::sun::star::uno::Reference< XCurrentContext > & ctx,
                           bool bShowErrorsOnce)
     : m_aRefCount(0),
       m_xNextContext( ctx ),
@@ -83,10 +83,10 @@
 Any SAL_CALL JavaContext::queryInterface(const Type& aType )
     throw (RuntimeException)
 {
-    if (aType == getCppuType(reinterpret_cast<Reference<XInterface>*>(0)))
-        return Any(Reference<XInterface>(static_cast<XInterface*>(this)));
-    else if (aType == getCppuType(reinterpret_cast<Reference<XCurrentContext>*>(0)))
-        return Any(Reference<XCurrentContext>( static_cast<XCurrentContext*>(this)));
+    if (aType == getCppuType(reinterpret_cast<com::sun::star::uno::Reference<XInterface>*>(0)))
+        return Any(com::sun::star::uno::Reference<XInterface>(static_cast<XInterface*>(this)));
+    else if (aType == getCppuType(reinterpret_cast<com::sun::star::uno::Reference<XCurrentContext>*>(0)))
+        return Any(com::sun::star::uno::Reference<XCurrentContext>( static_cast<XCurrentContext*>(this)));
     return Any();
 }
 
@@ -110,7 +110,7 @@
         {
             osl::MutexGuard aGuard(osl::Mutex::getGlobalMutex());
             if (!m_xHandler.is())
-                m_xHandler = Reference< XInteractionHandler >(
+                m_xHandler = com::sun::star::uno::Reference< XInteractionHandler >(
                     new JavaInteractionHandler(m_bShowErrorsOnce));
         }
         retVal = makeAny(m_xHandler);
--- svtools/source/java/javainteractionhandler.cxx.gcc43~	2007-06-27 23:47:35.000000000 +0200
+++ svtools/source/java/javainteractionhandler.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -106,9 +106,9 @@
 Any SAL_CALL JavaInteractionHandler::queryInterface(const Type& aType )
     throw (RuntimeException)
 {
-    if (aType == getCppuType(reinterpret_cast<Reference<XInterface>*>(0)))
+    if (aType == getCppuType(reinterpret_cast<com::sun::star::uno::Reference<XInterface>*>(0)))
         return Any( static_cast<XInterface*>(this), aType);
-    else if (aType == getCppuType(reinterpret_cast<Reference<XInteractionHandler>*>(0)))
+    else if (aType == getCppuType(reinterpret_cast<com::sun::star::uno::Reference<XInteractionHandler>*>(0)))
         return Any( static_cast<XInteractionHandler*>(this), aType);
     return Any();
 }
@@ -125,25 +125,25 @@
 }
 
 
-void SAL_CALL JavaInteractionHandler::handle( const Reference< XInteractionRequest >& Request ) throw (RuntimeException)
+void SAL_CALL JavaInteractionHandler::handle( const com::sun::star::uno::Reference< XInteractionRequest >& Request ) throw (RuntimeException)
 {
     Any anyExc = Request->getRequest();
-    Sequence< Reference< XInteractionContinuation > > aSeqCont = Request->getContinuations();
+    Sequence< com::sun::star::uno::Reference< XInteractionContinuation > > aSeqCont = Request->getContinuations();
 
-    Reference< XInteractionAbort > abort;
-    Reference< XInteractionRetry > retry;
+    com::sun::star::uno::Reference< XInteractionAbort > abort;
+    com::sun::star::uno::Reference< XInteractionRetry > retry;
     sal_Int32 i;
 
     for ( i = 0; i < aSeqCont.getLength(); i++ )
     {
-        abort = Reference< XInteractionAbort>::query( aSeqCont[i]);
+        abort = com::sun::star::uno::Reference< XInteractionAbort>::query( aSeqCont[i]);
         if ( abort.is() )
             break;
     }
     
 	for ( i= 0; i < aSeqCont.getLength(); i++)
     {
-        retry= Reference<XInteractionRetry>::query( aSeqCont[i]);
+        retry= com::sun::star::uno::Reference<XInteractionRetry>::query( aSeqCont[i]);
         if ( retry.is() )
             break;
     }
--- svtools/source/uno/framestatuslistener.cxx.gcc43~	2006-09-17 17:29:03.000000000 +0200
+++ svtools/source/uno/framestatuslistener.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -69,8 +69,8 @@
 {
 
 FrameStatusListener::FrameStatusListener( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >& xFrame ) : 
+    const com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const com::sun::star::uno::Reference< XFrame >& xFrame ) : 
     OWeakObject()
     ,   m_bInitialized( sal_True )
     ,   m_bDisposed( sal_False )
@@ -83,13 +83,13 @@
 {
 }
 
-Reference< XFrame > FrameStatusListener::getFrameInterface() const
+com::sun::star::uno::Reference< XFrame > FrameStatusListener::getFrameInterface() const
 {
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
     return m_xFrame;
 }
 
-Reference< XMultiServiceFactory > FrameStatusListener::getServiceManager() const
+com::sun::star::uno::Reference< XMultiServiceFactory > FrameStatusListener::getServiceManager() const
 {
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
     return m_xServiceManager;
@@ -127,20 +127,20 @@
 void SAL_CALL FrameStatusListener::dispose() 
 throw (::com::sun::star::uno::RuntimeException)
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
     if ( m_bDisposed )
         throw DisposedException();
     
-    Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+    com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
     URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
     while ( pIter != m_aListenerMap.end() )
     {
         try
         {
-            Reference< XDispatch > xDispatch( pIter->second );
-            Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
+            com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
+            com::sun::star::uno::Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
                                                             rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 
                                                                 "com.sun.star.util.URLTransformer" ))), 
                                                           UNO_QUERY );
@@ -161,13 +161,13 @@
     m_bDisposed = sal_True;
 }
 
-void SAL_CALL FrameStatusListener::addEventListener( const Reference< XEventListener >& )
+void SAL_CALL FrameStatusListener::addEventListener( const com::sun::star::uno::Reference< XEventListener >& )
 throw ( RuntimeException )
 {
     // helper class for status updates - no need to support listener
 }
 
-void SAL_CALL FrameStatusListener::removeEventListener( const Reference< XEventListener >& )
+void SAL_CALL FrameStatusListener::removeEventListener( const com::sun::star::uno::Reference< XEventListener >& )
 throw ( RuntimeException )
 {
     // helper class for status updates - no need to support listener
@@ -177,7 +177,7 @@
 void SAL_CALL FrameStatusListener::disposing( const EventObject& Source ) 
 throw ( RuntimeException )
 {
-    Reference< XInterface > xSource( Source.Source );
+    com::sun::star::uno::Reference< XInterface > xSource( Source.Source );
 
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
 
@@ -185,12 +185,12 @@
     while ( pIter != m_aListenerMap.end() )
     {
         // Compare references and release dispatch references if they are equal.
-        Reference< XInterface > xIfac( pIter->second, UNO_QUERY );
+        com::sun::star::uno::Reference< XInterface > xIfac( pIter->second, UNO_QUERY );
         if ( xSource == xIfac )
             pIter->second.clear();
     }
 
-    Reference< XInterface > xIfac( m_xFrame, UNO_QUERY );
+    com::sun::star::uno::Reference< XInterface > xIfac( m_xFrame, UNO_QUERY );
     if ( xIfac == xSource )
         m_xFrame.clear();
 }
@@ -211,8 +211,8 @@
 
 void FrameStatusListener::addStatusListener( const rtl::OUString& aCommandURL )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XStatusListener > xStatusListener;
+    com::sun::star::uno::Reference< XDispatch >       xDispatch;
+    com::sun::star::uno::Reference< XStatusListener > xStatusListener;
     com::sun::star::util::URL    aTargetURL;
 
     {
@@ -228,27 +228,27 @@
         if ( !m_bInitialized )
         {
             // Put into the hash_map of status listener. Will be activated when initialized is called
-            m_aListenerMap.insert( URLToDispatchMap::value_type( aCommandURL, Reference< XDispatch >() ));
+            m_aListenerMap.insert( URLToDispatchMap::value_type( aCommandURL, com::sun::star::uno::Reference< XDispatch >() ));
             return;
         }
         else
         {
             // Add status listener directly as intialize has already been called.
-            Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+            com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
             if ( m_xServiceManager.is() && xDispatchProvider.is() )
             {
-                Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
+                com::sun::star::uno::Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
                                                                 rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))), 
                                                             UNO_QUERY );
                 aTargetURL.Complete = aCommandURL;
                 xURLTransformer->parseStrict( aTargetURL );
                 xDispatch = xDispatchProvider->queryDispatch( aTargetURL, ::rtl::OUString(), 0 );
             
-                xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+                xStatusListener = com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
                 URLToDispatchMap::iterator aIter = m_aListenerMap.find( aCommandURL );
                 if ( aIter != m_aListenerMap.end() )
                 {
-                    Reference< XDispatch > xOldDispatch( aIter->second );
+                    com::sun::star::uno::Reference< XDispatch > xOldDispatch( aIter->second );
                     aIter->second = xDispatch;
 
                     try
@@ -284,13 +284,13 @@
     URLToDispatchMap::iterator pIter = m_aListenerMap.find( aCommandURL );
     if ( pIter != m_aListenerMap.end() )
     {
-        Reference< XDispatch > xDispatch( pIter->second );
-        Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
+        com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
         m_aListenerMap.erase( pIter );
 
         try
         {
-            Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
+            com::sun::star::uno::Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
                                                             rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))), 
                                                         UNO_QUERY );
             com::sun::star::util::URL aTargetURL;
@@ -309,7 +309,7 @@
 void FrameStatusListener::bindListener()
 {
     std::vector< Listener > aDispatchVector;
-    Reference< XStatusListener > xStatusListener;
+    com::sun::star::uno::Reference< XStatusListener > xStatusListener;
 
     {
         vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
@@ -318,21 +318,21 @@
             return;
         
         // Collect all registered command URL's and store them temporary
-        Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+        com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
         if ( m_xServiceManager.is() && xDispatchProvider.is() )
         {
-            xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+            xStatusListener = com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
             URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
             while ( pIter != m_aListenerMap.end() )
             {
-                Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
+                com::sun::star::uno::Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
                                                                 rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))), 
                                                             UNO_QUERY );
                 com::sun::star::util::URL aTargetURL;
                 aTargetURL.Complete = pIter->first;
                 xURLTransformer->parseStrict( aTargetURL );
                 
-                Reference< XDispatch > xDispatch( pIter->second );
+                com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
                 if ( xDispatch.is() )
                 {
                     // We already have a dispatch object => we have to requery.
@@ -389,21 +389,21 @@
         return;
     
     // Collect all registered command URL's and store them temporary
-    Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+    com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
     if ( m_xServiceManager.is() && xDispatchProvider.is() )
     {
-        Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
         URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
         while ( pIter != m_aListenerMap.end() )
         {
-            Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
+            com::sun::star::uno::Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
                                                             rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))), 
                                                         UNO_QUERY );
             com::sun::star::util::URL aTargetURL;
             aTargetURL.Complete = pIter->first;
             xURLTransformer->parseStrict( aTargetURL );
             
-            Reference< XDispatch > xDispatch( pIter->second );
+            com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
             if ( xDispatch.is() )
             {
                 // We already have a dispatch object => we have to requery.
@@ -424,8 +424,8 @@
 
 void FrameStatusListener::updateStatus( const rtl::OUString aCommandURL )
 {
-    Reference< XDispatch > xDispatch;
-    Reference< XStatusListener > xStatusListener;
+    com::sun::star::uno::Reference< XDispatch > xDispatch;
+    com::sun::star::uno::Reference< XStatusListener > xStatusListener;
     com::sun::star::util::URL aTargetURL;
     
     {
@@ -435,11 +435,11 @@
             return;
         
         // Try to find a dispatch object for the requested command URL
-        Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
-        xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+        xStatusListener = com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
         if ( m_xServiceManager.is() && xDispatchProvider.is() )
         {
-            Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
+            com::sun::star::uno::Reference< XURLTransformer > xURLTransformer( m_xServiceManager->createInstance( 
                                                             rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))), 
                                                         UNO_QUERY );
             aTargetURL.Complete = aCommandURL;
--- svtools/source/uno/generictoolboxcontroller.cxx.gcc43~	2007-06-28 00:02:10.000000000 +0200
+++ svtools/source/uno/generictoolboxcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -97,8 +97,8 @@
     ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >  aArgs;
 };
 
-GenericToolboxController::GenericToolboxController( const Reference< XMultiServiceFactory >& rServiceManager, 
-                                                    const Reference< XFrame >&               rFrame,                                                    
+GenericToolboxController::GenericToolboxController( const com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager, 
+                                                    const com::sun::star::uno::Reference< XFrame >&               rFrame,                                                    
                                                     ToolBox*                                 pToolbox, 
                                                     USHORT                                   nID,
                                                     const OUString&                          aCommand ) :
@@ -111,7 +111,7 @@
     
     // insert main command to our listener map
     if ( m_aCommandURL.getLength() )
-        m_aListenerMap.insert( URLToDispatchMap::value_type( aCommand, Reference< XDispatch >() ));
+        m_aListenerMap.insert( URLToDispatchMap::value_type( aCommand, com::sun::star::uno::Reference< XDispatch >() ));
 }
 
 GenericToolboxController::~GenericToolboxController()
@@ -132,8 +132,8 @@
 void SAL_CALL GenericToolboxController::execute( sal_Int16 /*KeyModifier*/ ) 
 throw ( RuntimeException )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+    com::sun::star::uno::Reference< XDispatch >       xDispatch;
+    com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     OUString                     aCommandURL;
     
     {
@@ -147,7 +147,7 @@
              m_xServiceManager.is() &&
              m_aCommandURL.getLength() )
         {
-            xURLTransformer = Reference< XURLTransformer >( m_xServiceManager->createInstance( 
+            xURLTransformer = com::sun::star::uno::Reference< XURLTransformer >( m_xServiceManager->createInstance( 
                                                                 rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))), 
                                                             UNO_QUERY );
             
--- svtools/source/uno/statusbarcontroller.cxx.gcc43~	2007-06-28 00:02:21.000000000 +0200
+++ svtools/source/uno/statusbarcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -92,8 +92,8 @@
 {
 
 StatusbarController::StatusbarController(
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >& xFrame,
+    const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const ::com::sun::star::uno::Reference< XFrame >& xFrame,
     const OUString& aCommandURL,
     unsigned short nID ) :
     OWeakObject()
@@ -120,23 +120,23 @@
 {
 }
 
-Reference< XFrame > StatusbarController::getFrameInterface() const
+::com::sun::star::uno::Reference< XFrame > StatusbarController::getFrameInterface() const
 {
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
     return m_xFrame;
 }
 
-Reference< XMultiServiceFactory > StatusbarController::getServiceManager() const
+::com::sun::star::uno::Reference< XMultiServiceFactory > StatusbarController::getServiceManager() const
 {
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
     return m_xServiceManager;
 }
 
-Reference< XLayoutManager > StatusbarController::getLayoutManager() const
+::com::sun::star::uno::Reference< XLayoutManager > StatusbarController::getLayoutManager() const
 {
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
-    Reference< XLayoutManager > xLayoutManager;
-    Reference< XPropertySet > xPropSet( m_xFrame, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XLayoutManager > xLayoutManager;
+    ::com::sun::star::uno::Reference< XPropertySet > xPropSet( m_xFrame, UNO_QUERY );
     if ( xPropSet.is() )
     {
         try
@@ -153,12 +153,12 @@
     return xLayoutManager;
 }
 
-Reference< XURLTransformer > StatusbarController::getURLTransformer() const
+::com::sun::star::uno::Reference< XURLTransformer > StatusbarController::getURLTransformer() const
 {
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
     if ( !m_xURLTransformer.is() && m_xServiceManager.is() )
     {
-        m_xURLTransformer = Reference< XURLTransformer >(
+        m_xURLTransformer = ::com::sun::star::uno::Reference< XURLTransformer >(
                                 m_xServiceManager->createInstance(
                                     rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ))),
                                 UNO_QUERY );
@@ -240,7 +240,7 @@
         }
 
         if ( m_aCommandURL.getLength() )
-            m_aListenerMap.insert( URLToDispatchMap::value_type( m_aCommandURL, Reference< XDispatch >() ));
+            m_aListenerMap.insert( URLToDispatchMap::value_type( m_aCommandURL, ::com::sun::star::uno::Reference< XDispatch >() ));
     }
 }
 
@@ -261,7 +261,7 @@
 void SAL_CALL StatusbarController::dispose()
 throw (::com::sun::star::uno::RuntimeException)
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     {
         vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
@@ -273,15 +273,15 @@
     m_aListenerContainer.disposeAndClear( aEvent );
 
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
-    Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
-    Reference< XURLTransformer > xURLTransformer = getURLTransformer();
+    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer = getURLTransformer();
     URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
     com::sun::star::util::URL aTargetURL;
     while ( pIter != m_aListenerMap.end() )
     {
         try
         {
-            Reference< XDispatch > xDispatch( pIter->second );
+            ::com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
             aTargetURL.Complete = pIter->first;
             xURLTransformer->parseStrict( aTargetURL );
 
@@ -307,23 +307,23 @@
     m_bDisposed = sal_True;
 }
 
-void SAL_CALL StatusbarController::addEventListener( const Reference< XEventListener >& xListener )
+void SAL_CALL StatusbarController::addEventListener( const ::com::sun::star::uno::Reference< XEventListener >& xListener )
 throw ( RuntimeException )
 {
-    m_aListenerContainer.addInterface( ::getCppuType( ( const Reference< XEventListener >* ) NULL ), xListener );
+    m_aListenerContainer.addInterface( ::getCppuType( ( const ::com::sun::star::uno::Reference< XEventListener >* ) NULL ), xListener );
 }
 
-void SAL_CALL StatusbarController::removeEventListener( const Reference< XEventListener >& aListener )
+void SAL_CALL StatusbarController::removeEventListener( const ::com::sun::star::uno::Reference< XEventListener >& aListener )
 throw ( RuntimeException )
 {
-    m_aListenerContainer.removeInterface( ::getCppuType( ( const Reference< XEventListener >* ) NULL ), aListener );
+    m_aListenerContainer.removeInterface( ::getCppuType( ( const ::com::sun::star::uno::Reference< XEventListener >* ) NULL ), aListener );
 }
 
 // XEventListener
 void SAL_CALL StatusbarController::disposing( const EventObject& Source )
 throw ( RuntimeException )
 {
-    Reference< XInterface > xSource( Source.Source );
+    ::com::sun::star::uno::Reference< XInterface > xSource( Source.Source );
 
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
 
@@ -334,13 +334,13 @@
     while ( pIter != m_aListenerMap.end() )
     {
         // Compare references and release dispatch references if they are equal.
-        Reference< XInterface > xIfac( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XInterface > xIfac( pIter->second, UNO_QUERY );
         if ( xSource == xIfac )
             pIter->second.clear();
         pIter++;
     }
 
-    Reference< XInterface > xIfac( m_xFrame, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac( m_xFrame, UNO_QUERY );
     if ( xIfac == xSource )
         m_xFrame.clear();
 }
@@ -425,8 +425,8 @@
 
 void StatusbarController::addStatusListener( const rtl::OUString& aCommandURL )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XStatusListener > xStatusListener;
+    ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener;
     com::sun::star::util::URL    aTargetURL;
 
     {
@@ -442,25 +442,25 @@
         if ( !m_bInitialized )
         {
             // Put into the hash_map of status listener. Will be activated when initialized is called
-            m_aListenerMap.insert( URLToDispatchMap::value_type( aCommandURL, Reference< XDispatch >() ));
+            m_aListenerMap.insert( URLToDispatchMap::value_type( aCommandURL, ::com::sun::star::uno::Reference< XDispatch >() ));
             return;
         }
         else
         {
             // Add status listener directly as intialize has already been called.
-            Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
             if ( m_xServiceManager.is() && xDispatchProvider.is() )
             {
-                Reference< XURLTransformer > xURLTransformer = getURLTransformer();
+                ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer = getURLTransformer();
                 aTargetURL.Complete = aCommandURL;
                 xURLTransformer->parseStrict( aTargetURL );
                 xDispatch = xDispatchProvider->queryDispatch( aTargetURL, ::rtl::OUString(), 0 );
 
-                xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+                xStatusListener = ::com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
                 URLToDispatchMap::iterator aIter = m_aListenerMap.find( aCommandURL );
                 if ( aIter != m_aListenerMap.end() )
                 {
-                    Reference< XDispatch > xOldDispatch( aIter->second );
+                    ::com::sun::star::uno::Reference< XDispatch > xOldDispatch( aIter->second );
                     aIter->second = xDispatch;
 
                     try
@@ -496,13 +496,13 @@
     URLToDispatchMap::iterator pIter = m_aListenerMap.find( aCommandURL );
     if ( pIter != m_aListenerMap.end() )
     {
-        Reference< XDispatch > xDispatch( pIter->second );
-        Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        ::com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
+        ::com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
         m_aListenerMap.erase( pIter );
 
         try
         {
-            Reference< XURLTransformer > xURLTransformer = getURLTransformer();
+            ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer = getURLTransformer();
             com::sun::star::util::URL aTargetURL;
             aTargetURL.Complete = aCommandURL;
             xURLTransformer->parseStrict( aTargetURL );
@@ -519,7 +519,7 @@
 void StatusbarController::bindListener()
 {
     std::vector< Listener > aDispatchVector;
-    Reference< XStatusListener > xStatusListener;
+    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener;
 
     {
         vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
@@ -528,19 +528,19 @@
             return;
 
         // Collect all registered command URL's and store them temporary
-        Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
         if ( m_xServiceManager.is() && xDispatchProvider.is() )
         {
-            xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+            xStatusListener = ::com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
             URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
             while ( pIter != m_aListenerMap.end() )
             {
-                Reference< XURLTransformer > xURLTransformer = getURLTransformer();
+                ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer = getURLTransformer();
                 com::sun::star::util::URL aTargetURL;
                 aTargetURL.Complete = pIter->first;
                 xURLTransformer->parseStrict( aTargetURL );
 
-                Reference< XDispatch > xDispatch( pIter->second );
+                ::com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
                 if ( xDispatch.is() )
                 {
                     // We already have a dispatch object => we have to requery.
@@ -617,19 +617,19 @@
         return;
 
     // Collect all registered command URL's and store them temporary
-    Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
     if ( m_xServiceManager.is() && xDispatchProvider.is() )
     {
-        Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        ::com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
         URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
         while ( pIter != m_aListenerMap.end() )
         {
-            Reference< XURLTransformer > xURLTransformer = getURLTransformer();
+            ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer = getURLTransformer();
             com::sun::star::util::URL aTargetURL;
             aTargetURL.Complete = pIter->first;
             xURLTransformer->parseStrict( aTargetURL );
 
-            Reference< XDispatch > xDispatch( pIter->second );
+            ::com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
             if ( xDispatch.is() )
             {
                 // We already have a dispatch object => we have to requery.
@@ -669,8 +669,8 @@
 
 void StatusbarController::updateStatus( const rtl::OUString aCommandURL )
 {
-    Reference< XDispatch > xDispatch;
-    Reference< XStatusListener > xStatusListener;
+    ::com::sun::star::uno::Reference< XDispatch > xDispatch;
+    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener;
     com::sun::star::util::URL aTargetURL;
 
     {
@@ -680,11 +680,11 @@
             return;
         
         // Try to find a dispatch object for the requested command URL
-        Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
-        xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+        xStatusListener = ::com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
         if ( m_xServiceManager.is() && xDispatchProvider.is() )
         {
-            Reference< XURLTransformer > xURLTransformer = getURLTransformer();
+            ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer = getURLTransformer();
             aTargetURL.Complete = aCommandURL;
             xURLTransformer->parseStrict( aTargetURL );
             xDispatch = xDispatchProvider->queryDispatch( aTargetURL, rtl::OUString(), 0 );
@@ -710,8 +710,8 @@
 
 void StatusbarController::execute( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aArgs )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XURLTransformer > xURLTransformer;
+    ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+    ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer;
     rtl::OUString                aCommandURL;
 
     {
@@ -753,7 +753,7 @@
     const rtl::OUString& aCommandURL, 
     const Sequence< ::com::sun::star::beans::PropertyValue >& aArgs )
 {
-    Reference< XDispatch >      xDispatch;
+    ::com::sun::star::uno::Reference< XDispatch >      xDispatch;
     com::sun::star::util::URL   aTargetURL;
 
     {
@@ -767,7 +767,7 @@
              m_xServiceManager.is() &&
              m_aCommandURL.getLength() )
         {
-            Reference< XURLTransformer > xURLTransformer( getURLTransformer() );
+            ::com::sun::star::uno::Reference< XURLTransformer > xURLTransformer( getURLTransformer() );
             aTargetURL.Complete = aCommandURL;
             xURLTransformer->parseStrict( aTargetURL );
             
@@ -776,7 +776,7 @@
                 xDispatch = pIter->second;
             else
             {
-                Reference< ::com::sun::star::frame::XDispatchProvider > xDispatchProvider( 
+                ::com::sun::star::uno::Reference< ::com::sun::star::frame::XDispatchProvider > xDispatchProvider( 
                     m_xFrame->getController(), UNO_QUERY );
                 if ( xDispatchProvider.is() )
                     xDispatch = xDispatchProvider->queryDispatch( aTargetURL, ::rtl::OUString(), 0 );
--- svtools/source/uno/toolboxcontroller.cxx.gcc43~	2007-06-28 00:02:33.000000000 +0200
+++ svtools/source/uno/toolboxcontroller.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -102,8 +102,8 @@
 };
 
 ToolboxController::ToolboxController( 
-    const Reference< XMultiServiceFactory >& rServiceManager,
-    const Reference< XFrame >& xFrame,
+    const ::com::sun::star::uno::Reference< XMultiServiceFactory >& rServiceManager,
+    const ::com::sun::star::uno::Reference< XFrame >& xFrame,
     const OUString& aCommandURL ) : 
     OWeakObject()
     ,   m_bInitialized( sal_False )
@@ -140,25 +140,25 @@
 	delete m_pImpl;
 }
 
-Reference< XFrame > ToolboxController::getFrameInterface() const
+::com::sun::star::uno::Reference< XFrame > ToolboxController::getFrameInterface() const
 {
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
     return m_xFrame;
 }
 
-Reference< XMultiServiceFactory > ToolboxController::getServiceManager() const
+::com::sun::star::uno::Reference< XMultiServiceFactory > ToolboxController::getServiceManager() const
 {
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
     return m_xServiceManager;
 }
 
-Reference< XLayoutManager > ToolboxController::getLayoutManager() const
+::com::sun::star::uno::Reference< XLayoutManager > ToolboxController::getLayoutManager() const
 {
-    Reference< XLayoutManager > xLayoutManager;
-    Reference< XPropertySet > xPropSet; 
+    ::com::sun::star::uno::Reference< XLayoutManager > xLayoutManager;
+    ::com::sun::star::uno::Reference< XPropertySet > xPropSet; 
     {
         vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
-        xPropSet = Reference< XPropertySet >( m_xFrame, UNO_QUERY );
+        xPropSet = ::com::sun::star::uno::Reference< XPropertySet >( m_xFrame, UNO_QUERY );
     }
 
     if ( xPropSet.is() )
@@ -256,7 +256,7 @@
 		}
 
         if ( m_aCommandURL.getLength() )
-            m_aListenerMap.insert( URLToDispatchMap::value_type( m_aCommandURL, Reference< XDispatch >() ));
+            m_aListenerMap.insert( URLToDispatchMap::value_type( m_aCommandURL, ::com::sun::star::uno::Reference< XDispatch >() ));
     }
 } 
             
@@ -277,7 +277,7 @@
 void SAL_CALL ToolboxController::dispose() 
 throw (::com::sun::star::uno::RuntimeException)
 {
-    Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XComponent > xThis( static_cast< OWeakObject* >(this), UNO_QUERY );
 
     {
         vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
@@ -289,13 +289,13 @@
     m_aListenerContainer.disposeAndClear( aEvent );
 
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
-    Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
     URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
     while ( pIter != m_aListenerMap.end() )
     {
         try
         {
-            Reference< XDispatch > xDispatch( pIter->second );
+            ::com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
             
             com::sun::star::util::URL aTargetURL;
             aTargetURL.Complete = pIter->first;
@@ -315,23 +315,23 @@
     m_bDisposed = sal_True;
 }
 
-void SAL_CALL ToolboxController::addEventListener( const Reference< XEventListener >& xListener )
+void SAL_CALL ToolboxController::addEventListener( const ::com::sun::star::uno::Reference< XEventListener >& xListener )
 throw ( RuntimeException )
 {
-    m_aListenerContainer.addInterface( ::getCppuType( ( const Reference< XEventListener >* ) NULL ), xListener );
+    m_aListenerContainer.addInterface( ::getCppuType( ( const ::com::sun::star::uno::Reference< XEventListener >* ) NULL ), xListener );
 }
 
-void SAL_CALL ToolboxController::removeEventListener( const Reference< XEventListener >& aListener )
+void SAL_CALL ToolboxController::removeEventListener( const ::com::sun::star::uno::Reference< XEventListener >& aListener )
 throw ( RuntimeException )
 {
-    m_aListenerContainer.removeInterface( ::getCppuType( ( const Reference< XEventListener >* ) NULL ), aListener );
+    m_aListenerContainer.removeInterface( ::getCppuType( ( const ::com::sun::star::uno::Reference< XEventListener >* ) NULL ), aListener );
 }
 
 // XEventListener
 void SAL_CALL ToolboxController::disposing( const EventObject& Source ) 
 throw ( RuntimeException )
 {
-    Reference< XInterface > xSource( Source.Source );
+    ::com::sun::star::uno::Reference< XInterface > xSource( Source.Source );
 
     vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
 
@@ -342,13 +342,13 @@
     while ( pIter != m_aListenerMap.end() )
     {
         // Compare references and release dispatch references if they are equal.
-        Reference< XInterface > xIfac( pIter->second, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XInterface > xIfac( pIter->second, UNO_QUERY );
         if ( xSource == xIfac )
             pIter->second.clear();
 		++pIter;
     }
 
-    Reference< XInterface > xIfac( m_xFrame, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XInterface > xIfac( m_xFrame, UNO_QUERY );
     if ( xIfac == xSource )
         m_xFrame.clear();
 }
@@ -364,7 +364,7 @@
 void SAL_CALL ToolboxController::execute( sal_Int16 KeyModifier ) 
 throw (::com::sun::star::uno::RuntimeException)
 {
-    Reference< XDispatch >       xDispatch;
+    ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
     OUString                     aCommandURL;
     
     {
@@ -418,22 +418,22 @@
 {
 }
 
-Reference< XWindow > SAL_CALL ToolboxController::createPopupWindow() 
+::com::sun::star::uno::Reference< XWindow > SAL_CALL ToolboxController::createPopupWindow() 
 throw (::com::sun::star::uno::RuntimeException)
 {
-    return Reference< XWindow >();
+    return ::com::sun::star::uno::Reference< XWindow >();
 }
 
-Reference< XWindow > SAL_CALL ToolboxController::createItemWindow( const Reference< XWindow >& ) 
+::com::sun::star::uno::Reference< XWindow > SAL_CALL ToolboxController::createItemWindow( const ::com::sun::star::uno::Reference< XWindow >& ) 
 throw (::com::sun::star::uno::RuntimeException)
 {
-    return Reference< XWindow >();
+    return ::com::sun::star::uno::Reference< XWindow >();
 }
 
 void ToolboxController::addStatusListener( const rtl::OUString& aCommandURL )
 {
-    Reference< XDispatch >       xDispatch;
-    Reference< XStatusListener > xStatusListener;
+    ::com::sun::star::uno::Reference< XDispatch >       xDispatch;
+    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener;
     com::sun::star::util::URL    aTargetURL;
 
     {
@@ -449,13 +449,13 @@
         if ( !m_bInitialized )
         {
             // Put into the hash_map of status listener. Will be activated when initialized is called
-            m_aListenerMap.insert( URLToDispatchMap::value_type( aCommandURL, Reference< XDispatch >() ));
+            m_aListenerMap.insert( URLToDispatchMap::value_type( aCommandURL, ::com::sun::star::uno::Reference< XDispatch >() ));
             return;
         }
         else
         {
             // Add status listener directly as intialize has already been called.
-            Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+            ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
             if ( m_xServiceManager.is() && xDispatchProvider.is() )
             {
                 aTargetURL.Complete = aCommandURL;
@@ -463,11 +463,11 @@
 					m_pImpl->m_xUrlTransformer->parseStrict( aTargetURL );
                 xDispatch = xDispatchProvider->queryDispatch( aTargetURL, ::rtl::OUString(), 0 );
             
-                xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+                xStatusListener = ::com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
                 URLToDispatchMap::iterator aIter = m_aListenerMap.find( aCommandURL );
                 if ( aIter != m_aListenerMap.end() )
                 {
-                    Reference< XDispatch > xOldDispatch( aIter->second );
+                    ::com::sun::star::uno::Reference< XDispatch > xOldDispatch( aIter->second );
                     aIter->second = xDispatch;
 
                     try
@@ -503,8 +503,8 @@
     URLToDispatchMap::iterator pIter = m_aListenerMap.find( aCommandURL );
     if ( pIter != m_aListenerMap.end() )
     {
-        Reference< XDispatch > xDispatch( pIter->second );
-        Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        ::com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
+        ::com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
         m_aListenerMap.erase( pIter );
 
         try
@@ -526,7 +526,7 @@
 void ToolboxController::bindListener()
 {
     std::vector< Listener > aDispatchVector;
-    Reference< XStatusListener > xStatusListener;
+    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener;
 
     {
         vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
@@ -535,10 +535,10 @@
             return;
         
         // Collect all registered command URL's and store them temporary
-        Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+        ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
         if ( m_xServiceManager.is() && xDispatchProvider.is() )
         {
-            xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+            xStatusListener = ::com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
             URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
             while ( pIter != m_aListenerMap.end() )
             {
@@ -547,7 +547,7 @@
                 if ( m_pImpl->m_xUrlTransformer.is() )
 					m_pImpl->m_xUrlTransformer->parseStrict( aTargetURL );
                 
-                Reference< XDispatch > xDispatch( pIter->second );
+                ::com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
                 if ( xDispatch.is() )
                 {
                     // We already have a dispatch object => we have to requery.
@@ -624,10 +624,10 @@
         return;
     
     // Collect all registered command URL's and store them temporary
-    Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+    ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
     if ( m_xServiceManager.is() && xDispatchProvider.is() )
     {
-        Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        ::com::sun::star::uno::Reference< XStatusListener > xStatusListener( static_cast< OWeakObject* >( this ), UNO_QUERY );
         URLToDispatchMap::iterator pIter = m_aListenerMap.begin();
         while ( pIter != m_aListenerMap.end() )
         {
@@ -636,7 +636,7 @@
             if ( m_pImpl->m_xUrlTransformer.is() )
 				m_pImpl->m_xUrlTransformer->parseStrict( aTargetURL );
             
-            Reference< XDispatch > xDispatch( pIter->second );
+            ::com::sun::star::uno::Reference< XDispatch > xDispatch( pIter->second );
             if ( xDispatch.is() )
             {
                 // We already have a dispatch object => we have to requery.
@@ -678,7 +678,7 @@
 {
     sal_Bool bHighContrast( sal_False );
 
-    Reference< XWindow > xWindow = m_pImpl->m_xParentWindow;
+    ::com::sun::star::uno::Reference< XWindow > xWindow = m_pImpl->m_xParentWindow;
     if ( xWindow.is() )
     {
         vos::OGuard aSolarMutexGuard( Application::GetSolarMutex() );
@@ -697,8 +697,8 @@
 
 void ToolboxController::updateStatus( const rtl::OUString aCommandURL )
 {
-    Reference< XDispatch > xDispatch;
-    Reference< XStatusListener > xStatusListener;
+    ::com::sun::star::uno::Reference< XDispatch > xDispatch;
+    ::com::sun::star::uno::Reference< XStatusListener > xStatusListener;
     com::sun::star::util::URL aTargetURL;
     
     {
@@ -708,8 +708,8 @@
             return;
         
         // Try to find a dispatch object for the requested command URL
-        Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
-        xStatusListener = Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
+        ::com::sun::star::uno::Reference< XDispatchProvider > xDispatchProvider( m_xFrame, UNO_QUERY );
+        xStatusListener = ::com::sun::star::uno::Reference< XStatusListener >( static_cast< OWeakObject* >( this ), UNO_QUERY );
         if ( m_xServiceManager.is() && xDispatchProvider.is() )
         {
             aTargetURL.Complete = aCommandURL;
@@ -736,12 +736,12 @@
     }
 }
 
-Reference< XURLTransformer > ToolboxController::getURLTransformer() const
+::com::sun::star::uno::Reference< XURLTransformer > ToolboxController::getURLTransformer() const
 {
 	return m_pImpl->m_xUrlTransformer;
 }
 
-Reference< ::com::sun::star::awt::XWindow > ToolboxController::getParent() const
+::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow > ToolboxController::getParent() const
 {
 	return m_pImpl->m_xParentWindow;
 }
--- svtools/source/uno/unoimap.cxx.gcc43~	2007-07-10 17:20:01.000000000 +0200
+++ svtools/source/uno/unoimap.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -168,7 +168,7 @@
     virtual Sequence< sal_Int8 > SAL_CALL getImplementationId(  ) throw(RuntimeException);
 
     // XEventsSupplier
-    virtual Reference< ::com::sun::star::container::XNameReplace > SAL_CALL getEvents(  ) throw(RuntimeException);
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameReplace > SAL_CALL getEvents(  ) throw(RuntimeException);
 
     // XServiceInfo
     virtual OUString SAL_CALL getImplementationName(  ) throw( RuntimeException );
@@ -384,18 +384,18 @@
 {
 	Any aAny;
 
-	if( rType == ::getCppuType((const Reference< XServiceInfo >*)0) )
-		aAny <<= Reference< XServiceInfo >(this);
-	else if( rType == ::getCppuType((const Reference< XTypeProvider >*)0) )
-		aAny <<= Reference< XTypeProvider >(this);
-	else if( rType == ::getCppuType((const Reference< XPropertySet >*)0) )
-		aAny <<= Reference< XPropertySet >(this);
-	else if( rType == ::getCppuType((const Reference< XEventsSupplier >*)0) )
-		aAny <<= Reference< XEventsSupplier >(this);
-	else if( rType == ::getCppuType((const Reference< XMultiPropertySet >*)0) )
-		aAny <<= Reference< XMultiPropertySet >(this);
-	else if( rType == ::getCppuType((const Reference< XUnoTunnel >*)0) )
-		aAny <<= Reference< XUnoTunnel >(this);
+	if( rType == ::getCppuType((const ::com::sun::star::uno::Reference< XServiceInfo >*)0) )
+		aAny <<= ::com::sun::star::uno::Reference< XServiceInfo >(this);
+	else if( rType == ::getCppuType((const ::com::sun::star::uno::Reference< XTypeProvider >*)0) )
+		aAny <<= ::com::sun::star::uno::Reference< XTypeProvider >(this);
+	else if( rType == ::getCppuType((const ::com::sun::star::uno::Reference< XPropertySet >*)0) )
+		aAny <<= ::com::sun::star::uno::Reference< XPropertySet >(this);
+	else if( rType == ::getCppuType((const ::com::sun::star::uno::Reference< XEventsSupplier >*)0) )
+		aAny <<= ::com::sun::star::uno::Reference< XEventsSupplier >(this);
+	else if( rType == ::getCppuType((const ::com::sun::star::uno::Reference< XMultiPropertySet >*)0) )
+		aAny <<= ::com::sun::star::uno::Reference< XMultiPropertySet >(this);
+	else if( rType == ::getCppuType((const ::com::sun::star::uno::Reference< XUnoTunnel >*)0) )
+		aAny <<= ::com::sun::star::uno::Reference< XUnoTunnel >(this);
 	else
 		aAny <<= OWeakAggObject::queryAggregation( rType );
 
@@ -594,11 +594,11 @@
 }
 
 
-Reference< XNameReplace > SAL_CALL SvUnoImageMapObject::getEvents()
+::com::sun::star::uno::Reference< XNameReplace > SAL_CALL SvUnoImageMapObject::getEvents()
 	throw( RuntimeException )
 {
 	// try weak reference first
-	Reference< XNameReplace > xEvents( mpEvents );
+	com::sun::star::uno::Reference< XNameReplace > xEvents( mpEvents );
 	return xEvents;
 }
 
@@ -675,7 +675,7 @@
 SvUnoImageMapObject* SvUnoImageMap::getObject( const Any& aElement ) const
 	throw( IllegalArgumentException )
 {
-	Reference< XInterface > xObject;
+	::com::sun::star::uno::Reference< XInterface > xObject;
 	aElement >>= xObject;
 
 	SvUnoImageMapObject* pObject = SvUnoImageMapObject::getImplementation( xObject );
@@ -763,14 +763,14 @@
 	for( sal_Int32 n = 0; n < Index; n++ )
 		aIter++;
 
-	Reference< XPropertySet > xObj( *aIter );
+	::com::sun::star::uno::Reference< XPropertySet > xObj( *aIter );
 	return makeAny( xObj );
 }
 
 // XElementAccess
 Type SAL_CALL SvUnoImageMap::getElementType(  ) throw(RuntimeException)
 {
-	return ::getCppuType((const Reference< XPropertySet >*)0);
+	return ::getCppuType((const ::com::sun::star::uno::Reference< XPropertySet >*)0);
 }
 
 sal_Bool SAL_CALL SvUnoImageMap::hasElements(  ) throw(RuntimeException)
@@ -830,32 +830,32 @@
 // factory helper methods
 // -------------------------------------------------------------------
 
-Reference< XInterface > SvUnoImageMapRectangleObject_createInstance( const SvEventDescription* pSupportedMacroItems )
+::com::sun::star::uno::Reference< XInterface > SvUnoImageMapRectangleObject_createInstance( const SvEventDescription* pSupportedMacroItems )
 {
 	return (XWeak*)new SvUnoImageMapObject( IMAP_OBJ_RECTANGLE, pSupportedMacroItems );
 }
 
-Reference< XInterface > SvUnoImageMapCircleObject_createInstance( const SvEventDescription* pSupportedMacroItems )
+::com::sun::star::uno::Reference< XInterface > SvUnoImageMapCircleObject_createInstance( const SvEventDescription* pSupportedMacroItems )
 {
 	return (XWeak*)new SvUnoImageMapObject( IMAP_OBJ_CIRCLE, pSupportedMacroItems );
 }
 
-Reference< XInterface > SvUnoImageMapPolygonObject_createInstance( const SvEventDescription* pSupportedMacroItems )
+::com::sun::star::uno::Reference< XInterface > SvUnoImageMapPolygonObject_createInstance( const SvEventDescription* pSupportedMacroItems )
 {
 	return (XWeak*)new SvUnoImageMapObject( IMAP_OBJ_POLYGON, pSupportedMacroItems );
 }
 
-Reference< XInterface > SvUnoImageMap_createInstance( const SvEventDescription* pSupportedMacroItems )
+::com::sun::star::uno::Reference< XInterface > SvUnoImageMap_createInstance( const SvEventDescription* pSupportedMacroItems )
 {
 	return (XWeak*)new SvUnoImageMap( pSupportedMacroItems );
 }
 
-Reference< XInterface > SvUnoImageMap_createInstance( const ImageMap& rMap, const SvEventDescription* pSupportedMacroItems )
+::com::sun::star::uno::Reference< XInterface > SvUnoImageMap_createInstance( const ImageMap& rMap, const SvEventDescription* pSupportedMacroItems )
 {
 	return (XWeak*)new SvUnoImageMap( rMap, pSupportedMacroItems );
 }
 
-sal_Bool SvUnoImageMap_fillImageMap( Reference< XInterface > xImageMap, ImageMap& rMap )
+sal_Bool SvUnoImageMap_fillImageMap( ::com::sun::star::uno::Reference< XInterface > xImageMap, ImageMap& rMap )
 {
 	SvUnoImageMap* pUnoImageMap = SvUnoImageMap::getImplementation( xImageMap );
 	if( NULL == pUnoImageMap )
--- svx/inc/pch/precompiled_svx.hxx.gcc43~	2007-05-10 16:21:44.000000000 +0200
+++ svx/inc/pch/precompiled_svx.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -753,10 +753,17 @@
 #include "sot/exchange.hxx"
 #include "sot/factory.hxx"
 #include "sot/formats.hxx"
+#if 0
 #include "stl/map"
 #include "stl/set"
 #include "stl/slist"
 #include "stl/vector"
+#else
+#include <map>
+#include <set>
+#include <slist>
+#include <vector>
+#endif
 #include "svtools/FilterConfigItem.hxx"
 #include "svtools/accessibilityoptions.hxx"
 #include "svtools/adrparse.hxx"
--- svx/source/accessibility/AccessibleOLEShape.cxx.gcc43~	2007-06-27 18:38:25.000000000 +0200
+++ svx/source/accessibility/AccessibleOLEShape.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -100,7 +100,7 @@
 
 
 
-Reference<XAccessibleKeyBinding> SAL_CALL AccessibleOLEShape::getAccessibleActionKeyBinding (sal_Int32 /*nIndex*/)
+com::sun::star::uno::Reference<XAccessibleKeyBinding> SAL_CALL AccessibleOLEShape::getAccessibleActionKeyBinding (sal_Int32 /*nIndex*/)
     throw (::com::sun::star::lang::IndexOutOfBoundsException,
         ::com::sun::star::uno::RuntimeException)
 {
--- svx/source/accessibility/AccessibleShape.cxx.gcc43~	2007-06-27 18:38:53.000000000 +0200
+++ svx/source/accessibility/AccessibleShape.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -160,7 +160,7 @@
     UpdateStates ();
 
     // Create a children manager when this shape has children of its own.
-    Reference<drawing::XShapes> xShapes (mxShape, uno::UNO_QUERY);
+    com::sun::star::uno::Reference<drawing::XShapes> xShapes (mxShape, uno::UNO_QUERY);
     if (xShapes.is() && xShapes->getCount() > 0)
         mpChildrenManager = new ChildrenManager (
             this, xShapes, maShapeTreeInfo, *this);
@@ -175,7 +175,7 @@
     // Beware! Here we leave the paths of the UNO API and descend into the
     // depths of the core.  Necessary for makeing the edit engine
     // accessible.
-    Reference<text::XText> xText (mxShape, uno::UNO_QUERY);
+    com::sun::star::uno::Reference<text::XText> xText (mxShape, uno::UNO_QUERY);
     if (xText.is())
     {
         SdrView* pView = maShapeTreeInfo.GetSdrView ();
@@ -264,17 +264,17 @@
 	}
 
 
-//	Reference<view::XSelectionSupplier> xSelectionSupplier ( maShapeTreeInfo.GetController(), uno::UNO_QUERY);
+//	com::sun::star::uno::Reference<view::XSelectionSupplier> xSelectionSupplier ( maShapeTreeInfo.GetController(), uno::UNO_QUERY);
 //    if ( xSelectionSupplier.is() )
 //    {
 //		uno::Any aSelection(xSelectionSupplier->getSelection());
-//        Reference<drawing::XShape> xSelectedShape;
+//        com::sun::star::uno::Reference<drawing::XShape> xSelectedShape;
 //		aSelection >>= xSelectedShape;
 //        if ( xSelectedShape.is() && xSelectedShape.get() == mxShape.get() )
 //            bShapeIsSelected = true;
 //        else
 //        {
-//            Reference<container::XIndexAccess> xSelectedShapes;
+//            com::sun::star::uno::Reference<container::XIndexAccess> xSelectedShapes;
 //			aSelection >>= xSelectedShapes;
 //			if ( xSelectedShapes.is() )
 //			{
@@ -435,7 +435,7 @@
     throw (::com::sun::star::uno::RuntimeException)
 {
     ::osl::MutexGuard aGuard (maMutex);
-    Reference<XAccessibleStateSet> xStateSet;
+    com::sun::star::uno::Reference<XAccessibleStateSet> xStateSet;
 
 	if (rBHelper.bDisposed || mpText == NULL)
         // Return a minimal state set that only contains the DEFUNC state.
@@ -456,7 +456,7 @@
 
             // Create a copy of the state set that may be modified by the
             // caller without affecting the current state set.
-            xStateSet = Reference<XAccessibleStateSet>(
+            xStateSet = com::sun::star::uno::Reference<XAccessibleStateSet>(
                 new ::utl::AccessibleStateSetHelper (*pStateSet));
         }
     }
@@ -487,10 +487,10 @@
     sal_Int32 nChildCount = getAccessibleChildCount ();
     for (sal_Int32 i=0; i<nChildCount; ++i)
     {
-        Reference<XAccessible> xChild (getAccessibleChild (i));
+        com::sun::star::uno::Reference<XAccessible> xChild (getAccessibleChild (i));
         if (xChild.is())
         {
-            Reference<XAccessibleComponent> xChildComponent (
+            com::sun::star::uno::Reference<XAccessibleComponent> xChildComponent (
                 xChild->getAccessibleContext(), uno::UNO_QUERY);
             if (xChildComponent.is())
             {
@@ -531,8 +531,8 @@
 		// Get the shape's bounding box in internal coordinates (in 100th of
 		// mm).  Use the property BoundRect.  Only if that is not supported ask
 		// the shape for its position and size directly.
-		Reference<beans::XPropertySet> xSet (mxShape, uno::UNO_QUERY);
-		Reference<beans::XPropertySetInfo> xSetInfo;
+		com::sun::star::uno::Reference<beans::XPropertySet> xSet (mxShape, uno::UNO_QUERY);
+		com::sun::star::uno::Reference<beans::XPropertySetInfo> xSetInfo;
 		bool bFoundBoundRect = false;
 		if (xSet.is())
 		{
@@ -594,7 +594,7 @@
 			::Point (aBoundingBox.X, aBoundingBox.Y));
 
 		// Clip the shape's bounding box with the bounding box of its parent.
-		Reference<XAccessibleComponent> xParentComponent (
+		com::sun::star::uno::Reference<XAccessibleComponent> xParentComponent (
 			getAccessibleParent(), uno::UNO_QUERY);
 		if (xParentComponent.is())
 		{
@@ -753,7 +753,7 @@
 //=====  XAccessibleEventBroadcaster  =========================================
 
 void SAL_CALL AccessibleShape::addEventListener (
-    const Reference<XAccessibleEventListener >& rxListener)
+    const com::sun::star::uno::Reference<XAccessibleEventListener >& rxListener)
     throw (uno::RuntimeException)
 {
 	if (rBHelper.bDisposed || rBHelper.bInDispose)
@@ -774,7 +774,7 @@
 
 
 void SAL_CALL AccessibleShape::removeEventListener (
-    const Reference<XAccessibleEventListener >& rxListener)
+    const com::sun::star::uno::Reference<XAccessibleEventListener >& rxListener)
     throw (uno::RuntimeException)
 {
     AccessibleContextBase::removeEventListener (rxListener);
@@ -1184,7 +1184,7 @@
         pStateSet->RemoveState (AccessibleStateType::FOCUSED);
 
     // Unregister from broadcasters.
-    Reference<lang::XComponent> xComponent (mxShape, uno::UNO_QUERY);
+    com::sun::star::uno::Reference<lang::XComponent> xComponent (mxShape, uno::UNO_QUERY);
     if (xComponent.is())
         xComponent->removeEventListener (this);
 
--- svx/source/accessibility/ChildrenManager.cxx.gcc43~	2007-10-30 15:07:29.000000000 +0100
+++ svx/source/accessibility/ChildrenManager.cxx	2007-11-06 00:29:31.000000000 +0100
@@ -57,8 +57,8 @@
 //=====  AccessibleChildrenManager  ===========================================
 
 ChildrenManager::ChildrenManager (
-    const Reference<XAccessible>& rxParent,
-    const Reference<drawing::XShapes>& rxShapeList,
+    const com::sun::star::uno::Reference<XAccessible>& rxParent,
+    const com::sun::star::uno::Reference<drawing::XShapes>& rxShapeList,
     const AccessibleShapeTreeInfo& rShapeTreeInfo,
     AccessibleContextBase& rContext)
     : mpImpl (NULL)
@@ -96,7 +96,7 @@
 
 
 
-Reference<XAccessible> ChildrenManager::GetChild (long nIndex)
+com::sun::star::uno::Reference<XAccessible> ChildrenManager::GetChild (long nIndex)
     throw (::com::sun::star::uno::RuntimeException,
            ::com::sun::star::lang::IndexOutOfBoundsException)
 {
--- svx/source/accessibility/ChildrenManagerImpl.cxx.gcc43~	2007-10-30 15:07:47.000000000 +0100
+++ svx/source/accessibility/ChildrenManagerImpl.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -115,7 +115,7 @@
 void ChildrenManagerImpl::Init (void)
 {
     // Register as view::XSelectionChangeListener.
-    Reference<view::XSelectionSupplier> xSelectionSupplier (
+    com::sun::star::uno::Reference<view::XSelectionSupplier> xSelectionSupplier (
         maShapeTreeInfo.GetController(), uno::UNO_QUERY);
     if (xSelectionSupplier.is())
         xSelectionSupplier->addSelectionChangeListener (
@@ -440,7 +440,7 @@
 
 
 
-void ChildrenManagerImpl::AddShape (const Reference<drawing::XShape>& rxShape)
+void ChildrenManagerImpl::AddShape (const com::sun::star::uno::Reference<drawing::XShape>& rxShape)
 {
     if (rxShape.is())
     {
@@ -459,10 +459,10 @@
 
         // Add the shape only when it belongs to the list of shapes stored
         // in mxShapeList (which is either a page or a group shape).
-        Reference<container::XChild> xChild (rxShape, uno::UNO_QUERY);
+        com::sun::star::uno::Reference<container::XChild> xChild (rxShape, uno::UNO_QUERY);
         if (xChild.is())
         {
-            Reference<drawing::XShapes> xParent (xChild->getParent(), uno::UNO_QUERY);
+            com::sun::star::uno::Reference<drawing::XShapes> xParent (xChild->getParent(), uno::UNO_QUERY);
             if (xParent == mxShapeList)
                 if (aBoundingBox.IsOver (aVisibleArea))
                 {
@@ -490,7 +490,7 @@
 
 
 
-void ChildrenManagerImpl::RemoveShape (const Reference<drawing::XShape>& rxShape)
+void ChildrenManagerImpl::RemoveShape (const com::sun::star::uno::Reference<drawing::XShape>& rxShape)
 {
     if (rxShape.is())
     {
@@ -503,7 +503,7 @@
         if (I != maVisibleChildren.end())
         {
             // Remove descriptor from that list.
-			Reference<XAccessible> xAccessibleShape (I->mxAccessibleShape);
+			com::sun::star::uno::Reference<XAccessible> xAccessibleShape (I->mxAccessibleShape);
 
             UnregisterAsDisposeListener (I->mxShape);
             // Dispose the accessible object.
@@ -591,12 +591,12 @@
 void ChildrenManagerImpl::SetInfo (const AccessibleShapeTreeInfo& rShapeTreeInfo)
 {
     // Remember the current broadcasters and exchange the shape tree info.
-    Reference<document::XEventBroadcaster> xCurrentBroadcaster;
-    Reference<view::XSelectionSupplier> xCurrentSelectionSupplier;
+    com::sun::star::uno::Reference<document::XEventBroadcaster> xCurrentBroadcaster;
+    com::sun::star::uno::Reference<view::XSelectionSupplier> xCurrentSelectionSupplier;
     {
         ::osl::MutexGuard aGuard (maMutex);
         xCurrentBroadcaster = maShapeTreeInfo.GetModelBroadcaster();
-        xCurrentSelectionSupplier = Reference<view::XSelectionSupplier> (
+        xCurrentSelectionSupplier = com::sun::star::uno::Reference<view::XSelectionSupplier> (
             maShapeTreeInfo.GetController(), uno::UNO_QUERY);
         maShapeTreeInfo = rShapeTreeInfo;
     }
@@ -616,7 +616,7 @@
     }
 
     // Move registration to new selection supplier.
-    Reference<view::XSelectionSupplier> xNewSelectionSupplier (
+    com::sun::star::uno::Reference<view::XSelectionSupplier> xNewSelectionSupplier (
             maShapeTreeInfo.GetController(), uno::UNO_QUERY);
     if (xNewSelectionSupplier != xCurrentSelectionSupplier)
     {
@@ -651,7 +651,7 @@
     }
 
     else if (rEventObject.Source
-        == Reference<view::XSelectionSupplier> (
+        == com::sun::star::uno::Reference<view::XSelectionSupplier> (
             maShapeTreeInfo.GetController(), uno::UNO_QUERY))
     {
         maShapeTreeInfo.SetController (NULL);
@@ -660,7 +660,7 @@
     // Handle disposing UNO shapes.
     else
     {
-        Reference<drawing::XShape> xShape (rEventObject.Source, uno::UNO_QUERY);
+        com::sun::star::uno::Reference<drawing::XShape> xShape (rEventObject.Source, uno::UNO_QUERY);
 
         // Find the descriptor for the given shape.
         ChildDescriptorListType::iterator I (
@@ -694,9 +694,9 @@
 
 
     if (rEventObject.EventName.equals (sShapeInserted))
-        AddShape (Reference<drawing::XShape>(rEventObject.Source, uno::UNO_QUERY));
+        AddShape (com::sun::star::uno::Reference<drawing::XShape>(rEventObject.Source, uno::UNO_QUERY));
     else if (rEventObject.EventName.equals (sShapeRemoved))
-        RemoveShape (Reference<drawing::XShape>(rEventObject.Source, uno::UNO_QUERY));
+        RemoveShape (com::sun::star::uno::Reference<drawing::XShape>(rEventObject.Source, uno::UNO_QUERY));
     // else ignore unknown event.
 }
 
@@ -720,7 +720,7 @@
 	try
 	{
 	    // Remove from broadcasters.
-		Reference<view::XSelectionSupplier> xSelectionSupplier (
+		com::sun::star::uno::Reference<view::XSelectionSupplier> xSelectionSupplier (
 			maShapeTreeInfo.GetController(), uno::UNO_QUERY);
 		if (xSelectionSupplier.is())
 			xSelectionSupplier->removeSelectionChangeListener (
@@ -799,7 +799,7 @@
         aShapeInfo,
 		_rShapeTreeInfo
 	);
-	Reference< XAccessible > xNewChild( pNewChild );	// keep this alive (do this before calling Init!)
+	com::sun::star::uno::Reference< XAccessible > xNewChild( pNewChild );	// keep this alive (do this before calling Init!)
 	if ( pNewChild )
 		pNewChild->Init();
 
@@ -855,19 +855,19 @@
 */
 void ChildrenManagerImpl::UpdateSelection (void)
 {
-    Reference<frame::XController> xController(maShapeTreeInfo.GetController());
-    Reference<view::XSelectionSupplier> xSelectionSupplier (
+    com::sun::star::uno::Reference<frame::XController> xController(maShapeTreeInfo.GetController());
+    com::sun::star::uno::Reference<view::XSelectionSupplier> xSelectionSupplier (
         xController, uno::UNO_QUERY);
 
     // Try to cast the selection both to a multi selection and to a single
     // selection.
-    Reference<container::XIndexAccess> xSelectedShapeAccess;
-    Reference<drawing::XShape> xSelectedShape;
+    com::sun::star::uno::Reference<container::XIndexAccess> xSelectedShapeAccess;
+    com::sun::star::uno::Reference<drawing::XShape> xSelectedShape;
     if (xSelectionSupplier.is())
     {
-        xSelectedShapeAccess = Reference<container::XIndexAccess> (
+        xSelectedShapeAccess = com::sun::star::uno::Reference<container::XIndexAccess> (
             xSelectionSupplier->getSelection(), uno::UNO_QUERY);
-        xSelectedShape = Reference<drawing::XShape> (
+        xSelectedShape = com::sun::star::uno::Reference<drawing::XShape> (
             xSelectionSupplier->getSelection(), uno::UNO_QUERY);
     }
 
@@ -921,7 +921,7 @@
     // sure to not send a FOCUSED state change.
     if (xController.is())
     {
-        Reference<frame::XFrame> xFrame (xController->getFrame());
+        com::sun::star::uno::Reference<frame::XFrame> xFrame (xController->getFrame());
         if (xFrame.is())
             if ( ! xFrame->isActive())
                 pNewFocusedShape = NULL;
@@ -963,9 +963,9 @@
 
 
 void ChildrenManagerImpl::RegisterAsDisposeListener (
-    const Reference<drawing::XShape>& xShape)
+    const com::sun::star::uno::Reference<drawing::XShape>& xShape)
 {
-    Reference<lang::XComponent> xComponent (xShape, uno::UNO_QUERY);
+    com::sun::star::uno::Reference<lang::XComponent> xComponent (xShape, uno::UNO_QUERY);
     if (xComponent.is())
         xComponent->addEventListener (
             static_cast<document::XEventListener*>(this));
@@ -975,9 +975,9 @@
 
 
 void ChildrenManagerImpl::UnregisterAsDisposeListener (
-    const Reference<drawing::XShape>& xShape)
+    const com::sun::star::uno::Reference<drawing::XShape>& xShape)
 {
-    Reference<lang::XComponent> xComponent (xShape, uno::UNO_QUERY);
+    com::sun::star::uno::Reference<lang::XComponent> xComponent (xShape, uno::UNO_QUERY);
     if (xComponent.is())
         xComponent->removeEventListener (
             static_cast<document::XEventListener*>(this));
@@ -988,7 +988,7 @@
 
 //=====  AccessibleChildDescriptor  ===========================================
 
-ChildDescriptor::ChildDescriptor (const Reference<drawing::XShape>& xShape)
+ChildDescriptor::ChildDescriptor (const com::sun::star::uno::Reference<drawing::XShape>& xShape)
     : mxShape (xShape),
       mxAccessibleShape (NULL),
       mbCreateEventPending (true)
@@ -999,7 +999,7 @@
 
 
 
-ChildDescriptor::ChildDescriptor (const Reference<XAccessible>& rxAccessibleShape)
+ChildDescriptor::ChildDescriptor (const com::sun::star::uno::Reference<XAccessible>& rxAccessibleShape)
     : mxShape (NULL),
       mxAccessibleShape (rxAccessibleShape),
       mbCreateEventPending (true)
@@ -1049,7 +1049,7 @@
             aOldValue);
 
         // Dispose and remove the object.
-        Reference<lang::XComponent> xComponent (mxAccessibleShape, uno::UNO_QUERY);
+        com::sun::star::uno::Reference<lang::XComponent> xComponent (mxAccessibleShape, uno::UNO_QUERY);
         if (xComponent.is())
             xComponent->dispose ();
 
--- svx/source/accessibility/GraphCtlAccessibleContext.cxx.gcc43~	2007-06-27 18:41:37.000000000 +0200
+++ svx/source/accessibility/GraphCtlAccessibleContext.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -142,7 +142,7 @@
 
 /** initialize this component and set default values */
 SvxGraphCtrlAccessibleContext::SvxGraphCtrlAccessibleContext(
-	const Reference< XAccessible >&	rxParent,
+	const com::sun::star::uno::Reference< XAccessible >&	rxParent,
 	GraphCtrl&								rRepr,
 	const OUString*							pName,
 	const OUString*							pDesc ) :
@@ -213,9 +213,9 @@
 /** returns the XAccessible interface for a given SdrObject.
 	Multiple calls for the same SdrObject return the same XAccessible.
 */
-Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessible( const SdrObject* pObj )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessible( const SdrObject* pObj )
 {
-	Reference<XAccessible> xAccessibleShape;
+	com::sun::star::uno::Reference<XAccessible> xAccessibleShape;
 
 	if( pObj )
 	{
@@ -230,7 +230,7 @@
 		else
 		{
 			// create a new one and remember in our internal map
-			Reference< XShape > xShape( Reference< XShape >::query( (const_cast<SdrObject*>(pObj))->getUnoShape() ) );
+			com::sun::star::uno::Reference< XShape > xShape( com::sun::star::uno::Reference< XShape >::query( (const_cast<SdrObject*>(pObj))->getUnoShape() ) );
 
             AccessibleShapeInfo aShapeInfo (xShape,mxParent);
 			// Create accessible object that corresponds to the descriptor's shape.
@@ -247,7 +247,7 @@
 			mxShapes[pObj] = pAcc;
 
 			// Create event and inform listeners of the object creation.
-			CommitChange( AccessibleEventId::CHILD, makeAny( xAccessibleShape ), makeAny( Reference<XAccessible>() ) );
+			CommitChange( AccessibleEventId::CHILD, makeAny( xAccessibleShape ), makeAny( com::sun::star::uno::Reference<XAccessible>() ) );
 		}
 	}
 
@@ -256,7 +256,7 @@
 
 //=====  XAccessible  =========================================================
 
-Reference< XAccessibleContext > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleContext( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessibleContext > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleContext( void ) throw( RuntimeException )
 {
 	return this;
 }
@@ -275,11 +275,11 @@
 
 //-----------------------------------------------------------------------------
 
-Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleAtPoint( const awt::Point& rPoint ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleAtPoint( const awt::Point& rPoint ) throw( RuntimeException )
 {
 	::osl::MutexGuard	aGuard( m_aMutex );
 
-	Reference< XAccessible > xAccessible;
+	com::sun::star::uno::Reference< XAccessible > xAccessible;
 
 	if( mpControl )
 	{
@@ -394,7 +394,7 @@
 
 //-----------------------------------------------------------------------------
 
-Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleChild( sal_Int32 nIndex )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleChild( sal_Int32 nIndex )
 	throw( RuntimeException, lang::IndexOutOfBoundsException )
 {
 	OGuard aGuard( Application::GetSolarMutex() );
@@ -404,7 +404,7 @@
 
 //-----------------------------------------------------------------------------
 
-Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleParent( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleParent( void ) throw( RuntimeException )
 {
 	return mxParent;
 }
@@ -419,16 +419,16 @@
     //	Iterate over all the parent's children and search for this object.
     if( mxParent.is() )
     {
-    	Reference< XAccessibleContext >	xParentContext( mxParent->getAccessibleContext() );
+    	com::sun::star::uno::Reference< XAccessibleContext >	xParentContext( mxParent->getAccessibleContext() );
         if( xParentContext.is() )
         {
         	sal_Int32 nChildCount = xParentContext->getAccessibleChildCount();
             for( sal_Int32 i = 0 ; i < nChildCount ; ++i )
             {
-            	Reference< XAccessible > xChild( xParentContext->getAccessibleChild( i ) );
+            	com::sun::star::uno::Reference< XAccessible > xChild( xParentContext->getAccessibleChild( i ) );
                 if( xChild.is() )
                 {
-                	Reference< XAccessibleContext >	xChildContext = xChild->getAccessibleContext();
+                	com::sun::star::uno::Reference< XAccessibleContext >	xChildContext = xChild->getAccessibleContext();
 	            	if( xChildContext == ( XAccessibleContext* ) this )
                     	return i;
                 }
@@ -469,14 +469,14 @@
 /**	Return empty reference to indicate that the relation set is not
 	supported.
 */
-Reference< XAccessibleRelationSet > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleRelationSet( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessibleRelationSet > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleRelationSet( void ) throw( RuntimeException )
 {
-	return Reference< XAccessibleRelationSet >();
+	return com::sun::star::uno::Reference< XAccessibleRelationSet >();
 }
 
 //-----------------------------------------------------------------------------
 
-Reference< XAccessibleStateSet > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleStateSet( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessibleStateSet > SAL_CALL SvxGraphCtrlAccessibleContext::getAccessibleStateSet( void ) throw( RuntimeException )
 {
 	OGuard aGuard( Application::GetSolarMutex() );
 
@@ -509,7 +509,7 @@
 
 	if( mxParent.is() )
     {
-    	Reference< XAccessibleContext >	xParentContext( mxParent->getAccessibleContext() );
+    	com::sun::star::uno::Reference< XAccessibleContext >	xParentContext( mxParent->getAccessibleContext() );
         if( xParentContext.is() )
 	    	return xParentContext->getLocale();
     }
@@ -520,7 +520,7 @@
 
 //=====  XAccessibleEventListener  ============================================
 
-void SAL_CALL SvxGraphCtrlAccessibleContext::addEventListener( const Reference< XAccessibleEventListener >& xListener )
+void SAL_CALL SvxGraphCtrlAccessibleContext::addEventListener( const com::sun::star::uno::Reference< XAccessibleEventListener >& xListener )
     throw( RuntimeException )
 {
 	if (xListener.is())
@@ -534,7 +534,7 @@
 
 //-----------------------------------------------------------------------------
 
-void SAL_CALL SvxGraphCtrlAccessibleContext::removeEventListener( const Reference< XAccessibleEventListener >& xListener )
+void SAL_CALL SvxGraphCtrlAccessibleContext::removeEventListener( const com::sun::star::uno::Reference< XAccessibleEventListener >& xListener )
     throw( RuntimeException )
 {
 	if (xListener.is())
@@ -556,14 +556,14 @@
 
 //-----------------------------------------------------------------------------
 
-void SAL_CALL SvxGraphCtrlAccessibleContext::addFocusListener( const Reference< awt::XFocusListener >& xListener )
+void SAL_CALL SvxGraphCtrlAccessibleContext::addFocusListener( const com::sun::star::uno::Reference< awt::XFocusListener >& xListener )
 	throw( RuntimeException )
 {
 	OGuard aGuard( Application::GetSolarMutex() );
 
 	if( xListener.is() )
     {
-		Reference< ::com::sun::star::awt::XWindow >	xWindow( VCLUnoHelper::GetInterface( mpControl ) );
+		com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow >	xWindow( VCLUnoHelper::GetInterface( mpControl ) );
 		if( xWindow.is() )
 			xWindow->addFocusListener( xListener );
     }
@@ -571,14 +571,14 @@
 
 //-----------------------------------------------------------------------------
 
-void SAL_CALL SvxGraphCtrlAccessibleContext::removeFocusListener( const Reference< awt::XFocusListener >& xListener )
+void SAL_CALL SvxGraphCtrlAccessibleContext::removeFocusListener( const com::sun::star::uno::Reference< awt::XFocusListener >& xListener )
 	throw (RuntimeException)
 {
 	OGuard aGuard( Application::GetSolarMutex() );
 
 	if( xListener.is() )
     {
-		Reference< ::com::sun::star::awt::XWindow >	xWindow = VCLUnoHelper::GetInterface( mpControl );
+		com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow >	xWindow = VCLUnoHelper::GetInterface( mpControl );
 		if( xWindow.is() )
 			xWindow->removeFocusListener( xListener );
     }
@@ -747,14 +747,14 @@
 
 //-----------------------------------------------------------------------------
 
-Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getSelectedAccessibleChild( sal_Int32 nIndex )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxGraphCtrlAccessibleContext::getSelectedAccessibleChild( sal_Int32 nIndex )
 	throw( lang::IndexOutOfBoundsException, RuntimeException )
 {
 	OGuard aGuard( Application::GetSolarMutex() );
 
 	checkChildIndexOnSelection( nIndex );
 
-	Reference< XAccessible > xAccessible;
+	com::sun::star::uno::Reference< XAccessible > xAccessible;
 
 	const SdrMarkList& rList = mpView->GetMarkedObjectList();
 	SdrObject* pObj = rList.GetMark(nIndex)->GetMarkedSdrObj();
@@ -883,7 +883,7 @@
 		for (I=mxShapes.begin(); I!=mxShapes.end(); I++)
 		{
 			XAccessible* pAcc = (*I).second;
-			Reference< XComponent > xComp( pAcc, UNO_QUERY );
+			com::sun::star::uno::Reference< XComponent > xComp( pAcc, UNO_QUERY );
 			if( xComp.is() )
 				xComp->dispose();
 
--- svx/source/accessibility/svxrectctaccessiblecontext.cxx.gcc43~	2007-06-27 18:42:32.000000000 +0200
+++ svx/source/accessibility/svxrectctaccessiblecontext.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -196,7 +196,7 @@
 
 
 SvxRectCtlAccessibleContext::SvxRectCtlAccessibleContext(
-	const Reference< XAccessible >&		rxParent,
+	const com::sun::star::uno::Reference< XAccessible >&		rxParent,
 	SvxRectCtl&							rRepr,
 	const OUString*						pName,
 	const OUString*						pDesc ) :
@@ -248,7 +248,7 @@
 
 //=====  XAccessible  =========================================================
 
-Reference< XAccessibleContext > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleContext( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessibleContext > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleContext( void ) throw( RuntimeException )
 {
 	return this;
 }
@@ -262,13 +262,13 @@
 	return Rectangle( Point( 0, 0 ), GetBoundingBox().GetSize() ).IsInside( VCLPoint( rPoint ) );
 }
 
-Reference< XAccessible > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleAtPoint( const awt::Point& rPoint ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleAtPoint( const awt::Point& rPoint ) throw( RuntimeException )
 {
 	::osl::MutexGuard			aGuard( m_aMutex );
 
 	ThrowExceptionIfNotAlive();
 
-	Reference< XAccessible >	xRet;
+	com::sun::star::uno::Reference< XAccessible >	xRet;
 
 	long						nChild = PointToIndex( mpRepr->GetApproxRPFromPixPt( rPoint ), mbAngleMode );
 
@@ -332,12 +332,12 @@
 	return mpRepr->GetNumOfChilds();
 }
 
-Reference< XAccessible > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleChild( sal_Int32 nIndex )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleChild( sal_Int32 nIndex )
 	throw( RuntimeException, lang::IndexOutOfBoundsException )
 {
 	checkChildIndex( nIndex );
 
-	Reference< XAccessible >	xChild = mpChilds[ nIndex ];
+	com::sun::star::uno::Reference< XAccessible >	xChild = mpChilds[ nIndex ];
 	if( !xChild.is() )
 	{
 		::vos::OGuard		aSolarGuard( Application::GetSolarMutex() );
@@ -374,7 +374,7 @@
 	return xChild;
 }
 
-Reference< XAccessible > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleParent( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleParent( void ) throw( RuntimeException )
 {
 	return mxParent;
 }
@@ -387,13 +387,13 @@
     //	Iterate over all the parent's children and search for this object.
     if( mxParent.is() )
     {
-    	Reference< XAccessibleContext >		xParentContext( mxParent->getAccessibleContext() );
+    	com::sun::star::uno::Reference< XAccessibleContext >		xParentContext( mxParent->getAccessibleContext() );
         if( xParentContext.is() )
         {
         	sal_Int32						nChildCount = xParentContext->getAccessibleChildCount();
             for( sal_Int32 i = 0 ; i < nChildCount ; ++i )
             {
-            	Reference< XAccessible >	xChild( xParentContext->getAccessibleChild( i ) );
+            	com::sun::star::uno::Reference< XAccessible >	xChild( xParentContext->getAccessibleChild( i ) );
 				if( xChild.get() == ( XAccessible* ) this )
                     return i;
             }
@@ -425,12 +425,12 @@
 /**	Return empty reference to indicate that the relation set is not
 	supported.
 */
-Reference< XAccessibleRelationSet > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleRelationSet( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessibleRelationSet > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleRelationSet( void ) throw( RuntimeException )
 {
-	return Reference< XAccessibleRelationSet >();
+	return com::sun::star::uno::Reference< XAccessibleRelationSet >();
 }
 
-Reference< XAccessibleStateSet > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleStateSet( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessibleStateSet > SAL_CALL SvxRectCtlAccessibleContext::getAccessibleStateSet( void ) throw( RuntimeException )
 {
 	::osl::MutexGuard						aGuard( m_aMutex );
 	utl::AccessibleStateSetHelper*			pStateSetHelper = new utl::AccessibleStateSetHelper;
@@ -461,7 +461,7 @@
 	::osl::MutexGuard							aGuard( m_aMutex );
 	if( mxParent.is() )
     {
-    	Reference< XAccessibleContext >	xParentContext( mxParent->getAccessibleContext() );
+    	com::sun::star::uno::Reference< XAccessibleContext >	xParentContext( mxParent->getAccessibleContext() );
         if( xParentContext.is() )
 	    	return xParentContext->getLocale();
     }
@@ -470,7 +470,7 @@
     throw IllegalAccessibleComponentStateException();
 }
 
-void SAL_CALL SvxRectCtlAccessibleContext::addEventListener( const Reference< XAccessibleEventListener >& xListener )
+void SAL_CALL SvxRectCtlAccessibleContext::addEventListener( const com::sun::star::uno::Reference< XAccessibleEventListener >& xListener )
     throw( RuntimeException )
 {
 	if (xListener.is())
@@ -482,7 +482,7 @@
     }
 }
 
-void SAL_CALL SvxRectCtlAccessibleContext::removeEventListener( const Reference< XAccessibleEventListener >& xListener )
+void SAL_CALL SvxRectCtlAccessibleContext::removeEventListener( const com::sun::star::uno::Reference< XAccessibleEventListener >& xListener )
     throw( RuntimeException )
 {
 	if (xListener.is())
@@ -502,7 +502,7 @@
 	}
 }
 
-void SAL_CALL SvxRectCtlAccessibleContext::addFocusListener( const Reference< awt::XFocusListener >& xListener )
+void SAL_CALL SvxRectCtlAccessibleContext::addFocusListener( const com::sun::star::uno::Reference< awt::XFocusListener >& xListener )
 	throw( RuntimeException )
 {
 	if( xListener.is() )
@@ -511,13 +511,13 @@
 
 		ThrowExceptionIfNotAlive();
 
-		Reference< awt::XWindow >	xWindow = VCLUnoHelper::GetInterface( mpRepr );
+		com::sun::star::uno::Reference< awt::XWindow >	xWindow = VCLUnoHelper::GetInterface( mpRepr );
 		if( xWindow.is() )
 			xWindow->addFocusListener( xListener );
     }
 }
 
-void SAL_CALL SvxRectCtlAccessibleContext::removeFocusListener( const Reference< awt::XFocusListener >& xListener )
+void SAL_CALL SvxRectCtlAccessibleContext::removeFocusListener( const com::sun::star::uno::Reference< awt::XFocusListener >& xListener )
 	throw (RuntimeException)
 {
 	if( xListener.is() )
@@ -526,7 +526,7 @@
 
 		ThrowExceptionIfNotAlive();
 
-		Reference< awt::XWindow >	xWindow = VCLUnoHelper::GetInterface( mpRepr );
+		com::sun::star::uno::Reference< awt::XWindow >	xWindow = VCLUnoHelper::GetInterface( mpRepr );
 		if( xWindow.is() )
 			xWindow->removeFocusListener( xListener );
     }
@@ -654,7 +654,7 @@
 	return mnSelectedChild == NOCHILDSELECTED? 0 : 1;
 }
 
-Reference< XAccessible > SAL_CALL SvxRectCtlAccessibleContext::getSelectedAccessibleChild( sal_Int32 nIndex )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxRectCtlAccessibleContext::getSelectedAccessibleChild( sal_Int32 nIndex )
 	throw( lang::IndexOutOfBoundsException, RuntimeException )
 {
 	::osl::MutexGuard	aGuard( m_aMutex );
@@ -737,7 +737,7 @@
 		msName = rName;
 	}
 
-	const Reference< XInterface >	xSource( *this );
+	const com::sun::star::uno::Reference< XInterface >	xSource( *this );
 	CommitChange( AccessibleEventObject( xSource, AccessibleEventId::NAME_CHANGED, aPreVal, aPostVal ) );
 }
 
@@ -753,7 +753,7 @@
 		msDescription = rDescr;
 	}
 
-	const Reference< XInterface >	xSource( *this );
+	const com::sun::star::uno::Reference< XInterface >	xSource( *this );
 	CommitChange( AccessibleEventObject( xSource, AccessibleEventId::DESCRIPTION_CHANGED, aPreVal, aPostVal ) );
 }
 
@@ -797,7 +797,7 @@
 		        mnClientId =  0;
 	        }
 
-			mxParent = Reference< XAccessible >();
+			mxParent = com::sun::star::uno::Reference< XAccessible >();
 		}
 	}
 }
@@ -850,7 +850,7 @@
 
 
 SvxRectCtlChildAccessibleContext::SvxRectCtlChildAccessibleContext(
-	const Reference<XAccessible>&	rxParent,
+	const com::sun::star::uno::Reference<XAccessible>&	rxParent,
 	const Window&						rParentWindow,
 	const ::rtl::OUString&				rName,
 	const ::rtl::OUString&				rDescription,
@@ -884,7 +884,7 @@
 
 //=====  XAccessible  =========================================================
 
-Reference< XAccessibleContext> SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleContext( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessibleContext> SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleContext( void ) throw( RuntimeException )
 {
 	return this;
 }
@@ -898,9 +898,9 @@
 	return Rectangle( Point( 0, 0 ), GetBoundingBox().GetSize() ).IsInside( VCLPoint( rPoint ) );
 }
 
-Reference< XAccessible > SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleAtPoint( const awt::Point& /*rPoint*/ ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleAtPoint( const awt::Point& /*rPoint*/ ) throw( RuntimeException )
 {
-	return Reference< XAccessible >();
+	return com::sun::star::uno::Reference< XAccessible >();
 }
 
 awt::Rectangle SAL_CALL SvxRectCtlChildAccessibleContext::getBounds() throw( RuntimeException )
@@ -946,13 +946,13 @@
 	return sal_False;
 }
 
-void SAL_CALL SvxRectCtlChildAccessibleContext::addFocusListener( const Reference< awt::XFocusListener >& /*xListener*/ )
+void SAL_CALL SvxRectCtlChildAccessibleContext::addFocusListener( const com::sun::star::uno::Reference< awt::XFocusListener >& /*xListener*/ )
 	throw( RuntimeException )
 {
     OSL_ENSURE( false, "SvxRectCtlChildAccessibleContext::addFocusListener: not implemented" );
 }
 
-void SAL_CALL SvxRectCtlChildAccessibleContext::removeFocusListener( const Reference< awt::XFocusListener >& /*xListener*/ )
+void SAL_CALL SvxRectCtlChildAccessibleContext::removeFocusListener( const com::sun::star::uno::Reference< awt::XFocusListener >& /*xListener*/ )
 	throw (RuntimeException)
 {
     OSL_ENSURE( false, "SvxRectCtlChildAccessibleContext::removeFocusListener: not implemented" );
@@ -992,12 +992,12 @@
 	return 0;
 }
 
-Reference< XAccessible > SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleChild( sal_Int32 /*nIndex*/ ) throw ( RuntimeException, lang::IndexOutOfBoundsException )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleChild( sal_Int32 /*nIndex*/ ) throw ( RuntimeException, lang::IndexOutOfBoundsException )
 {
 	throw lang::IndexOutOfBoundsException();
 }
 
-Reference< XAccessible > SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleParent( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessible > SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleParent( void ) throw( RuntimeException )
 {
 	return mxParent;
 }
@@ -1027,12 +1027,12 @@
 /**	Return empty reference to indicate that the relation set is not
 	supported.
 */
-Reference<XAccessibleRelationSet> SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleRelationSet( void ) throw( RuntimeException )
+com::sun::star::uno::Reference<XAccessibleRelationSet> SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleRelationSet( void ) throw( RuntimeException )
 {
-	return Reference< XAccessibleRelationSet >();
+	return com::sun::star::uno::Reference< XAccessibleRelationSet >();
 }
 
-Reference< XAccessibleStateSet > SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleStateSet( void ) throw( RuntimeException )
+com::sun::star::uno::Reference< XAccessibleStateSet > SAL_CALL SvxRectCtlChildAccessibleContext::getAccessibleStateSet( void ) throw( RuntimeException )
 {
 	::osl::MutexGuard						aGuard( maMutex );
 	utl::AccessibleStateSetHelper*			pStateSetHelper = new utl::AccessibleStateSetHelper;
@@ -1063,7 +1063,7 @@
 	::osl::MutexGuard						aGuard( maMutex );
 	if( mxParent.is() )
     {
-    	Reference< XAccessibleContext >		xParentContext( mxParent->getAccessibleContext() );
+    	com::sun::star::uno::Reference< XAccessibleContext >		xParentContext( mxParent->getAccessibleContext() );
         if( xParentContext.is() )
 	    	return xParentContext->getLocale();
     }
@@ -1073,7 +1073,7 @@
     throw IllegalAccessibleComponentStateException();
 }
 
-void SAL_CALL SvxRectCtlChildAccessibleContext::addEventListener( const Reference< XAccessibleEventListener >& xListener )
+void SAL_CALL SvxRectCtlChildAccessibleContext::addEventListener( const com::sun::star::uno::Reference< XAccessibleEventListener >& xListener )
     throw( RuntimeException )
 {
 	if (xListener.is())
@@ -1088,7 +1088,7 @@
 
 
 
-void SAL_CALL SvxRectCtlChildAccessibleContext::removeEventListener( const Reference< XAccessibleEventListener >& xListener )
+void SAL_CALL SvxRectCtlChildAccessibleContext::removeEventListener( const com::sun::star::uno::Reference< XAccessibleEventListener >& xListener )
     throw( RuntimeException )
 {
 	if (xListener.is())
@@ -1205,7 +1205,7 @@
 		    mnClientId =  0;
 	    }
 
-		mxParent = Reference< XAccessible >();
+		mxParent = com::sun::star::uno::Reference< XAccessible >();
 
 	    delete mpBoundingBox;
 	}
@@ -1241,7 +1241,7 @@
 	{
 		mbIsChecked = bChecked;
 
-		const Reference< XInterface >	xSource( *this );
+		const com::sun::star::uno::Reference< XInterface >	xSource( *this );
 
 		Any								aOld;
 		Any								aNew;
--- svx/source/editeng/editview.cxx.gcc43~	2007-06-27 19:57:00.000000000 +0200
+++ svx/source/editeng/editview.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -195,8 +195,8 @@
 // From SW => Create common method
 LanguageType lcl_CheckLanguage(
     const OUString &rText,
-    Reference< XSpellChecker1 > xSpell,
-    Reference< linguistic2::XLanguageGuessing > xLangGuess,
+    com::sun::star::uno::Reference< XSpellChecker1 > xSpell,
+    com::sun::star::uno::Reference< linguistic2::XLanguageGuessing > xLangGuess,
     sal_Bool bIsParaText )
 {
     LanguageType nLang = LANGUAGE_NONE;
@@ -703,7 +703,7 @@
 void EditView::Cut()
 {
 	DBG_CHKTHIS( EditView, 0 );
-    Reference<com::sun::star::datatransfer::clipboard::XClipboard> aClipBoard(GetWindow()->GetClipboard());
+    com::sun::star::uno::Reference<com::sun::star::datatransfer::clipboard::XClipboard> aClipBoard(GetWindow()->GetClipboard());
 	pImpEditView->CutCopy( aClipBoard, sal_True );
 }
 
@@ -716,21 +716,21 @@
 void EditView::Copy()
 {
 	DBG_CHKTHIS( EditView, 0 );
-    Reference<com::sun::star::datatransfer::clipboard::XClipboard> aClipBoard(GetWindow()->GetClipboard());
+    com::sun::star::uno::Reference<com::sun::star::datatransfer::clipboard::XClipboard> aClipBoard(GetWindow()->GetClipboard());
 	pImpEditView->CutCopy( aClipBoard, sal_False );
 }
 
 void EditView::Paste()
 {
 	DBG_CHKTHIS( EditView, 0 );
-    Reference<com::sun::star::datatransfer::clipboard::XClipboard> aClipBoard(GetWindow()->GetClipboard());
+    com::sun::star::uno::Reference<com::sun::star::datatransfer::clipboard::XClipboard> aClipBoard(GetWindow()->GetClipboard());
     pImpEditView->Paste( aClipBoard, sal_False );
 }
 
 void EditView::PasteSpecial()
 {
 	DBG_CHKTHIS( EditView, 0 );
-    Reference<com::sun::star::datatransfer::clipboard::XClipboard> aClipBoard(GetWindow()->GetClipboard());
+    com::sun::star::uno::Reference<com::sun::star::datatransfer::clipboard::XClipboard> aClipBoard(GetWindow()->GetClipboard());
     pImpEditView->Paste(aClipBoard, sal_True );
 }
 
@@ -1103,7 +1103,7 @@
 	Point aPos ( pImpEditView->GetWindow()->PixelToLogic( rPosPixel ) );
 	aPos = pImpEditView->GetDocPos( aPos );
 	EditPaM aPaM = pImpEditView->pEditEngine->pImpEditEngine->GetPaM( aPos, sal_False );
-	Reference< XSpellChecker1 >  xSpeller( PIMPEE->GetSpeller() );
+	com::sun::star::uno::Reference< XSpellChecker1 >  xSpeller( PIMPEE->GetSpeller() );
     ESelection aOldSel = GetSelection();
 	if ( xSpeller.is() && pImpEditView->IsWrongSpelledWord( aPaM, sal_True ) )
 	{
@@ -1133,10 +1133,10 @@
         rVal.Value <<= (INT16) 7;
         //
         // Gibt es Replace-Vorschlaege?
-        Reference< XSpellAlternatives >  xSpellAlt =
+        com::sun::star::uno::Reference< XSpellAlternatives >  xSpellAlt =
                 xSpeller->spell( aSelected, PIMPEE->GetLanguage( aPaM2 ), aPropVals );
 
-        Reference< XLanguageGuessing >  xLangGuesser( EE_DLL()->GetGlobalData()->GetLanguageGuesser() );
+        com::sun::star::uno::Reference< XLanguageGuessing >  xLangGuesser( EE_DLL()->GetGlobalData()->GetLanguageGuesser() );
 
         // check if text might belong to a different language...
         LanguageType nGuessLangWord = LANGUAGE_NONE;
@@ -1200,17 +1200,17 @@
 		else
 			aPopupMenu.RemoveItem( MN_AUTOCORR );	// Loeschen?
 
-		Reference< XDictionaryList >  xDicList( SvxGetDictionaryList() );
+		com::sun::star::uno::Reference< XDictionaryList >  xDicList( SvxGetDictionaryList() );
 
-		Sequence< Reference< XDictionary >  > aDics;
+		Sequence< com::sun::star::uno::Reference< XDictionary >  > aDics;
 		if (xDicList.is())
 			aDics = xDicList->getDictionaries();
-		const Reference< XDictionary >  *pDic = aDics.getConstArray();
+		const com::sun::star::uno::Reference< XDictionary >  *pDic = aDics.getConstArray();
 		sal_uInt16 nLanguage = PIMPEE->GetLanguage( aPaM2 );
 		sal_uInt16 nDicCount = (USHORT)aDics.getLength();
 		for ( sal_uInt16 i = 0; i < nDicCount; i++ )
 		{
-			Reference< XDictionary1 >  xDic( pDic[i], UNO_QUERY );
+			com::sun::star::uno::Reference< XDictionary1 >  xDic( pDic[i], UNO_QUERY );
 			if (xDic.is())
 			{
 				sal_uInt16 nActLanguage = xDic->getLanguage();
@@ -1293,11 +1293,11 @@
 		}
 		else if ( nId >= MN_DICTSTART )
 		{
-			Reference< XDictionary1 >  xDic( pDic[nId - MN_DICTSTART], UNO_QUERY );
+			com::sun::star::uno::Reference< XDictionary1 >  xDic( pDic[nId - MN_DICTSTART], UNO_QUERY );
 			if (xDic.is())
 				xDic->add( aSelected, sal_False, String() );
             // save modified user-dictionary if it is persistent
-            Reference< frame::XStorable >  xSavDic( xDic, UNO_QUERY );
+            com::sun::star::uno::Reference< frame::XStorable >  xSavDic( xDic, UNO_QUERY );
             if (xSavDic.is())
                 xSavDic->store();
 
--- svx/source/editeng/edtspell.cxx.gcc43~	2007-06-27 19:57:14.000000000 +0200
+++ svx/source/editeng/edtspell.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -63,7 +63,7 @@
 
 
 EditSpellWrapper::EditSpellWrapper( Window* _pWin,
-		Reference< XSpellChecker1 >  &xChecker,
+		com::sun::star::uno::Reference< XSpellChecker1 >  &xChecker,
 		sal_Bool bIsStart, sal_Bool bIsAllRight, EditView* pView ) :
 	SvxSpellWrapper( _pWin, xChecker, bIsStart, bIsAllRight )
 {
@@ -159,7 +159,7 @@
 		{
 			// Der Text wurde in diese Engine getreten, bei Rueckwaerts
 			// muss die Selektion hinten sein.
-			Reference< XPropertySet >  xProp( SvxGetLinguPropertySet() );
+			com::sun::star::uno::Reference< XPropertySet >  xProp( SvxGetLinguPropertySet() );
             pEditView->GetImpEditView()->SetEditSelection(
 						pImpEE->GetEditDoc().GetStartPaM() );
 		}
--- svx/source/editeng/impedit3.cxx.gcc43~	2007-08-02 15:59:22.000000000 +0200
+++ svx/source/editeng/impedit3.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -1760,9 +1760,9 @@
 
 	    lang::Locale aLocale = GetLocale( EditPaM( pNode, nMaxBreakPos ) );
 
-	    Reference < i18n::XBreakIterator > _xBI( ImplGetBreakIterator() );
+	    com::sun::star::uno::Reference < i18n::XBreakIterator > _xBI( ImplGetBreakIterator() );
 	    OUString aText( *pNode );
-	    Reference< XHyphenator > xHyph;
+	    com::sun::star::uno::Reference< XHyphenator > xHyph;
 	    if ( bCanHyphenate )
 		    xHyph = GetHyphenator();
 	    i18n::LineBreakHyphenationOptions aHyphOptions( xHyph, Sequence< PropertyValue >(), 1 );
@@ -1828,7 +1828,7 @@
 			    // DBG_ASSERT( nWordEnd >= nMaxBreakPos, "Hyph: Break?" );
 		        String aWord( *pNode, nWordStart, nWordLen );
 			    sal_uInt16 nMinTrail = nWordEnd-nMaxBreakPos+1; 	//+1: Vor dem angeknacksten Buchstaben
-			    Reference< XHyphenatedWord > xHyphWord;
+			    com::sun::star::uno::Reference< XHyphenatedWord > xHyphWord;
 			    if (xHyphenator.is())
 				    xHyphWord = xHyphenator->hyphenate( aWord, aLocale, aWord.Len() - nMinTrail, Sequence< PropertyValue >() );
 			    if (xHyphWord.is())
@@ -4199,25 +4199,25 @@
     pOutDev->SetDigitLanguage( eLang );
 }
 
-Reference < i18n::XBreakIterator > ImpEditEngine::ImplGetBreakIterator() const
+com::sun::star::uno::Reference < i18n::XBreakIterator > ImpEditEngine::ImplGetBreakIterator() const
 {
 	if ( !xBI.is() )
 	{
-		Reference< lang::XMultiServiceFactory > xMSF( ::comphelper::getProcessServiceFactory() );
+		com::sun::star::uno::Reference< lang::XMultiServiceFactory > xMSF( ::comphelper::getProcessServiceFactory() );
 		xBI.set( xMSF->createInstance( OUString::createFromAscii( "com.sun.star.i18n.BreakIterator" ) ), UNO_QUERY );
 	}
 	return xBI;
 }
 
-Reference < i18n::XExtendedInputSequenceChecker > ImpEditEngine::ImplGetInputSequenceChecker() const
+com::sun::star::uno::Reference < i18n::XExtendedInputSequenceChecker > ImpEditEngine::ImplGetInputSequenceChecker() const
 {
     if ( !xISC.is() )
     {
-        Reference< lang::XMultiServiceFactory > xMSF = ::comphelper::getProcessServiceFactory();
-        Reference < XInterface > xI = xMSF->createInstance( OUString::createFromAscii( "com.sun.star.i18n.InputSequenceChecker" ) );
+        com::sun::star::uno::Reference< lang::XMultiServiceFactory > xMSF = ::comphelper::getProcessServiceFactory();
+        com::sun::star::uno::Reference < XInterface > xI = xMSF->createInstance( OUString::createFromAscii( "com.sun.star.i18n.InputSequenceChecker" ) );
         if ( xI.is() )
         {
-            Any x = xI->queryInterface( ::getCppuType((const Reference< i18n::XExtendedInputSequenceChecker >*)0) );
+            Any x = xI->queryInterface( ::getCppuType((const com::sun::star::uno::Reference< i18n::XExtendedInputSequenceChecker >*)0) );
             x >>= xISC;
         }
     }
@@ -4440,7 +4440,7 @@
 
     // determine relevant logical text elements for the just-rendered
     // string of characters.
-    Reference< i18n::XBreakIterator > _xBI( ImplGetBreakIterator() );
+    com::sun::star::uno::Reference< i18n::XBreakIterator > _xBI( ImplGetBreakIterator() );
 
     if( _xBI.is() )
     {
--- svx/source/editeng/textconv.cxx.gcc43~	2007-06-27 20:00:49.000000000 +0200
+++ svx/source/editeng/textconv.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -75,7 +75,7 @@
 //////////////////////////////////////////////////////////////////////
 
 TextConvWrapper::TextConvWrapper( Window* pWindow,
-        const Reference< XMultiServiceFactory >& rxMSF,
+        const com::sun::star::uno::Reference< XMultiServiceFactory >& rxMSF,
         const Locale& rSourceLocale,
         const Locale& rTargetLocale,
         const Font* pTargetFont,
--- svx/source/items/numitem.cxx.gcc43~	2007-06-27 20:29:19.000000000 +0200
+++ svx/source/items/numitem.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -107,12 +107,12 @@
    	{
 		try
 		{
-			Reference< XMultiServiceFactory > xMSF = ::comphelper::getProcessServiceFactory();
-			Reference < XInterface > xI = xMSF->createInstance(
+			com::sun::star::uno::Reference< XMultiServiceFactory > xMSF = ::comphelper::getProcessServiceFactory();
+			com::sun::star::uno::Reference < XInterface > xI = xMSF->createInstance(
 				::rtl::OUString::createFromAscii( "com.sun.star.text.DefaultNumberingProvider" ) );
-			Reference<XDefaultNumberingProvider> xRet(xI, UNO_QUERY);
+			com::sun::star::uno::Reference<XDefaultNumberingProvider> xRet(xI, UNO_QUERY);
 			DBG_ASSERT(xRet.is(), "service missing: \"com.sun.star.text.DefaultNumberingProvider\"")
-			xFormatter = Reference<XNumberingFormatter> (xRet, UNO_QUERY);
+			xFormatter = com::sun::star::uno::Reference<XNumberingFormatter> (xRet, UNO_QUERY);
 		}
 		catch(Exception& )
 		{
--- svx/source/items/xmlcnitm.cxx.gcc43~	2006-10-12 14:56:25.000000000 +0200
+++ svx/source/items/xmlcnitm.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -111,21 +111,21 @@
 
 BOOL  SvXMLAttrContainerItem::QueryValue( com::sun::star::uno::Any& rVal, BYTE /*nMemberId*/ ) const
 {
-	Reference<XNameContainer> xContainer =
+	com::sun::star::uno::Reference<XNameContainer> xContainer =
 		new SvUnoAttributeContainer( new SvXMLAttrContainerData( *pImpl ) );
 
-	rVal.setValue( &xContainer, ::getCppuType((Reference<XNameContainer>*)0) );
+	rVal.setValue( &xContainer, ::getCppuType((com::sun::star::uno::Reference<XNameContainer>*)0) );
 	return TRUE;
 }
 BOOL SvXMLAttrContainerItem::PutValue( const com::sun::star::uno::Any& rVal, BYTE /*nMemberId*/ )
 {
-	Reference<XInterface> xRef;
+	com::sun::star::uno::Reference<XInterface> xRef;
 	SvUnoAttributeContainer* pContainer = NULL;
 
 	if( rVal.getValue() != NULL && rVal.getValueType().getTypeClass() == TypeClass_INTERFACE )
 	{
-		xRef = *(Reference<XInterface>*)rVal.getValue();
-		Reference<XUnoTunnel> xTunnel(xRef, UNO_QUERY);
+		xRef = *(com::sun::star::uno::Reference<XInterface>*)rVal.getValue();
+		com::sun::star::uno::Reference<XUnoTunnel> xTunnel(xRef, UNO_QUERY);
 		if( xTunnel.is() )
             pContainer = (SvUnoAttributeContainer*)(ULONG)xTunnel->getSomething(SvUnoAttributeContainer::getUnoTunnelId());
 	}
@@ -141,7 +141,7 @@
 
 		try
 		{
-			Reference<XNameContainer> xContainer( xRef, UNO_QUERY );
+			com::sun::star::uno::Reference<XNameContainer> xContainer( xRef, UNO_QUERY );
 			if( !xContainer.is() )
 				return FALSE;
 
--- svx/source/msfilter/mscodec.cxx.gcc43~	2006-10-12 14:58:20.000000000 +0200
+++ svx/source/msfilter/mscodec.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -42,6 +42,7 @@
 
 #include <osl/diagnose.h>
 #include <algorithm>
+#include <cstring>
 #include <tools/solar.h>
 
 namespace svx {
--- svx/source/unodraw/UnoGraphicExporter.cxx.gcc43~	2007-07-25 10:23:14.000000000 +0200
+++ svx/source/unodraw/UnoGraphicExporter.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -329,7 +329,7 @@
 		virtual void SAL_CALL cancel(  ) throw(RuntimeException);
 
 		// XExporter
-		virtual void SAL_CALL setSourceDocument( const Reference< lang::XComponent >& xDoc ) throw(IllegalArgumentException, RuntimeException);
+		virtual void SAL_CALL setSourceDocument( const com::sun::star::uno::Reference< lang::XComponent >& xDoc ) throw(IllegalArgumentException, RuntimeException);
 
 		// XServiceInfo
 		virtual OUString SAL_CALL getImplementationName(  ) throw(RuntimeException);
@@ -345,9 +345,9 @@
 		DECL_LINK( CalcFieldValueHdl, EditFieldInfo* );
 
 	private:
-		Reference< XShape >		mxShape;
-		Reference< XDrawPage >	mxPage;
-		Reference< XShapes >	mxShapes;
+		com::sun::star::uno::Reference< XShape >		mxShape;
+		com::sun::star::uno::Reference< XDrawPage >	mxPage;
+		com::sun::star::uno::Reference< XShapes >	mxShapes;
 
 		SvxDrawPage*		mpUnoPage;
 
@@ -357,7 +357,7 @@
 		SdrModel*			mpDoc;
 	};
 
-	Reference< XInterface > SAL_CALL GraphicExporter_createInstance(const Reference< XMultiServiceFactory > & )
+	com::sun::star::uno::Reference< XInterface > SAL_CALL GraphicExporter_createInstance(const com::sun::star::uno::Reference< XMultiServiceFactory > & )
 		throw( Exception )
 	{
 		return (XWeak*)new GraphicExporter();
@@ -759,7 +759,7 @@
 					}
 					else if( pDataValues->Name.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "CurrentPage" ) ) )
 					{
-						Reference< XDrawPage >	xPage;
+						com::sun::star::uno::Reference< XDrawPage >	xPage;
 						pDataValues->Value >>= xPage;
 						if( xPage.is() )
 						{
@@ -992,7 +992,7 @@
 		// build list of SdrObject
 		if( mxShapes.is() )
 		{
-			Reference< XShape > xShape;
+			com::sun::star::uno::Reference< XShape > xShape;
 			const sal_Int32 nCount = mxShapes->getCount();
 
 			for( sal_Int32 nIndex = 0; nIndex < nCount; nIndex++ )
@@ -1232,13 +1232,13 @@
         Any aInteraction;
         Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionContinuation > > lContinuations(1);
         ::framework::ContinuationApprove* pApprove = new ::framework::ContinuationApprove();
-        lContinuations[0] = Reference< XInteractionContinuation >(static_cast< XInteractionContinuation* >(pApprove), UNO_QUERY);
+        lContinuations[0] = com::sun::star::uno::Reference< XInteractionContinuation >(static_cast< XInteractionContinuation* >(pApprove), UNO_QUERY);
 
 		GraphicFilterRequest aErrorCode;
 		aErrorCode.ErrCode = nStatus;
 		aInteraction <<= aErrorCode;
 		framework::InteractionRequest* pRequest = new framework::InteractionRequest( aInteraction, lContinuations );
-        Reference< XInteractionRequest >xRequest( static_cast< XInteractionRequest* >(pRequest), UNO_QUERY );
+        com::sun::star::uno::Reference< XInteractionRequest >xRequest( static_cast< XInteractionRequest* >(pRequest), UNO_QUERY );
         xInteractionHandler->handle( xRequest ); 
 	}
 	return nStatus == GRFILTER_OK;
@@ -1252,7 +1252,7 @@
 // XExporter
 
 /** the source 'document' could be a XDrawPage, a XShape or a generic XShapes */
-void SAL_CALL GraphicExporter::setSourceDocument( const Reference< lang::XComponent >& xComponent )
+void SAL_CALL GraphicExporter::setSourceDocument( const com::sun::star::uno::Reference< lang::XComponent >& xComponent )
 	throw(IllegalArgumentException, RuntimeException)
 {
 	OGuard aGuard( Application::GetSolarMutex() );
@@ -1265,9 +1265,9 @@
 	// any break inside this one loop while will throw a IllegalArgumentException
 	do
 	{
-		mxPage = Reference< XDrawPage >::query( xComponent );
-		mxShapes = Reference< XShapes >::query( xComponent );
-		mxShape = Reference< XShape >::query( xComponent );
+		mxPage = com::sun::star::uno::Reference< XDrawPage >::query( xComponent );
+		mxShapes = com::sun::star::uno::Reference< XShapes >::query( xComponent );
+		mxShape = com::sun::star::uno::Reference< XShape >::query( xComponent );
 
 		// Step 1: try a generic XShapes
 		if( !mxPage.is() && !mxShape.is() && mxShapes.is() )
@@ -1291,17 +1291,17 @@
 				break;
 
 			// get page for this shape
-			Reference< XChild > xChild( mxShape, UNO_QUERY );
+			com::sun::star::uno::Reference< XChild > xChild( mxShape, UNO_QUERY );
 			if( !xChild.is() )
 				break;
 
-			Reference< XInterface > xInt;
+			com::sun::star::uno::Reference< XInterface > xInt;
 			do
 			{
 				xInt = xChild->getParent();
-				mxPage = Reference< XDrawPage >::query( xInt );
+				mxPage = com::sun::star::uno::Reference< XDrawPage >::query( xInt );
 				if( !mxPage.is() )
-					xChild = Reference< XChild >::query( xInt );
+					xChild = com::sun::star::uno::Reference< XChild >::query( xInt );
 			}
 			while( !mxPage.is() && xChild.is() );
 
@@ -1327,7 +1327,7 @@
 		{
 			SdrPage* pPage = mpUnoPage->GetSdrPage();
 			SdrObject* pObj;
-			Reference< XShape > xShape;
+			com::sun::star::uno::Reference< XShape > xShape;
 
 			sal_Bool bOk = sal_True;
 
--- svx/source/unodraw/UnoNamespaceMap.cxx.gcc43~	2006-10-12 15:25:02.000000000 +0200
+++ svx/source/unodraw/UnoNamespaceMap.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -118,12 +118,12 @@
 		virtual Sequence< OUString > SAL_CALL getSupportedServiceNames(  ) throw(RuntimeException);
 	};
 
-	Reference< XInterface > SAL_CALL NamespaceMap_createInstance( sal_uInt16* pWhichIds, SfxItemPool* pPool1, SfxItemPool* )
+	com::sun::star::uno::Reference< XInterface > SAL_CALL NamespaceMap_createInstance( sal_uInt16* pWhichIds, SfxItemPool* pPool1, SfxItemPool* )
 	{
 		return (XWeak*)new NamespaceMap( pWhichIds, pPool1 );
 	}
 
-	Reference< XInterface > SAL_CALL NamespaceMap_createInstance( sal_uInt16* pWhichIds, SfxItemPool* pPool )
+	com::sun::star::uno::Reference< XInterface > SAL_CALL NamespaceMap_createInstance( sal_uInt16* pWhichIds, SfxItemPool* pPool )
 	{
 		return (XWeak*)new NamespaceMap( pWhichIds, pPool );
 	}
--- svx/source/unodraw/unoshcol.cxx.gcc43~	2007-06-27 21:27:22.000000000 +0200
+++ svx/source/unodraw/unoshcol.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -66,10 +66,10 @@
 
 
 //----------------------------------------------------------------------
-Reference< uno::XInterface > SvxShapeCollection_NewInstance() throw()
+com::sun::star::uno::Reference< uno::XInterface > SvxShapeCollection_NewInstance() throw()
 {
-	Reference< drawing::XShapes > xShapes( new SvxShapeCollection() );
-	Reference< uno::XInterface > xRef( xShapes, UNO_QUERY );
+	com::sun::star::uno::Reference< drawing::XShapes > xShapes( new SvxShapeCollection() );
+	com::sun::star::uno::Reference< uno::XInterface > xRef( xShapes, UNO_QUERY );
 	return xRef;
 }
 
@@ -118,7 +118,7 @@
 {
 	// An frequently programming error is to release the last
 	// reference to this object in the disposing message.
-	// Make it rubust, hold a self Reference.
+	// Make it rubust, hold a self com::sun::star::uno::Reference.
 	uno::Reference< lang::XComponent > xSelf( this );
 
 	// Guard dispose against multible threading
@@ -186,7 +186,7 @@
 
 // XShapes
 //----------------------------------------------------------------------
-void SAL_CALL SvxShapeCollection::add( const Reference< drawing::XShape >& xShape ) throw( uno::RuntimeException )
+void SAL_CALL SvxShapeCollection::add( const com::sun::star::uno::Reference< drawing::XShape >& xShape ) throw( uno::RuntimeException )
 {
 	maShapeContainer.addInterface( xShape );
 }
@@ -210,10 +210,10 @@
 	if( Index < 0 || Index >= getCount() )
 		throw lang::IndexOutOfBoundsException();
 
-	uno::Sequence< Reference< uno::XInterface> > xElements( maShapeContainer.getElements() );
+	uno::Sequence< com::sun::star::uno::Reference< uno::XInterface> > xElements( maShapeContainer.getElements() );
 
 
-	return uno::makeAny( Reference< XShape>(static_cast< drawing::XShape* >( xElements.getArray()[Index].get())) );
+	return uno::makeAny( com::sun::star::uno::Reference< XShape>(static_cast< drawing::XShape* >( xElements.getArray()[Index].get())) );
 }
 
 // XElementAccess
@@ -221,7 +221,7 @@
 //----------------------------------------------------------------------
 uno::Type SAL_CALL SvxShapeCollection::getElementType() throw( uno::RuntimeException )
 {
-	return ::getCppuType(( const Reference< drawing::XShape >*)0);
+	return ::getCppuType(( const com::sun::star::uno::Reference< drawing::XShape >*)0);
 }
 
 //----------------------------------------------------------------------
@@ -263,7 +263,7 @@
 	return aSeq;
 }
 
-Reference< XInterface > SAL_CALL SvxShapeCollection_createInstance( const Reference< ::com::sun::star::lang::XMultiServiceFactory >& )
+com::sun::star::uno::Reference< XInterface > SAL_CALL SvxShapeCollection_createInstance( const com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& )
 {
 	return *( new SvxShapeCollection() );
 }
--- svx/source/xml/xmleohlp.cxx.gcc43~	2006-10-12 15:29:01.000000000 +0200
+++ svx/source/xml/xmleohlp.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -126,7 +126,7 @@
 class OutputStorageWrapper_Impl : public ::cppu::WeakImplHelper1<XOutputStream>
 {
 	::osl::Mutex	maMutex;
-	Reference < XOutputStream > xOut;
+	com::sun::star::uno::Reference < XOutputStream > xOut;
 	TempFile aTempFile;
 	sal_Bool bStreamClosed : 1;
     SvStream* pStream;
@@ -660,7 +660,7 @@
 {
 	if( mxTempStorage.is() )
 	{
-		Reference < XComponent > xComp( mxTempStorage, UNO_QUERY );
+		com::sun::star::uno::Reference < XComponent > xComp( mxTempStorage, UNO_QUERY );
 		xComp->dispose();	
 	}
 }
@@ -683,7 +683,7 @@
 	Any aRet;
 	if( EMBEDDEDOBJECTHELPER_MODE_READ == meCreateMode )
 	{
-		Reference < XOutputStream > xStrm;
+		com::sun::star::uno::Reference < XOutputStream > xStrm;
 		if( mpStreamMap )
 		{
 			SvXMLEmbeddedObjectHelper_Impl::iterator aIter =
@@ -707,7 +707,7 @@
 	{
 		sal_Bool bGraphicRepl = sal_False;
 		sal_Bool bOasisFormat = sal_True;
-		Reference < XInputStream > xStrm;
+		com::sun::star::uno::Reference < XInputStream > xStrm;
 		OUString aContainerStorageName, aObjectStorageName;
 		if( ImplGetStorageNames( rURLStr, aContainerStorageName,
 								 aObjectStorageName,
@@ -720,7 +720,7 @@
 				comphelper::EmbeddedObjectContainer& rContainer = 
 						mpDocPersist->GetEmbeddedObjectContainer();
 
-    			Reference < embed::XEmbeddedObject > xObj = rContainer.GetEmbeddedObject( aObjectStorageName );
+    			com::sun::star::uno::Reference < embed::XEmbeddedObject > xObj = rContainer.GetEmbeddedObject( aObjectStorageName );
 				DBG_ASSERT( xObj.is(), "Didn't get object" );
 
 				if( xObj.is() )
@@ -731,7 +731,7 @@
 					}
 					else
 					{
-						Reference < embed::XEmbedPersist > xPersist( xObj, UNO_QUERY );
+						com::sun::star::uno::Reference < embed::XEmbedPersist > xPersist( xObj, UNO_QUERY );
 						if( xPersist.is() )
 						{
 							if( !mxTempStorage.is() )
@@ -754,7 +754,7 @@
 
 							xPersist->storeToEntry( mxTempStorage, aObjectStorageName,
 													aDummy, aEmbDescr );
-							Reference < io::XStream > xStream = 
+							com::sun::star::uno::Reference < io::XStream > xStream = 
 								mxTempStorage->openStreamElement( 
 														aObjectStorageName, 
 														embed::ElementModes::READ);
@@ -810,9 +810,9 @@
 {
 	MutexGuard			aGuard( maMutex );
 	if( EMBEDDEDOBJECTHELPER_MODE_READ == meCreateMode )
-		return ::getCppuType((const Reference<XOutputStream>*)0);
+		return ::getCppuType((const com::sun::star::uno::Reference<XOutputStream>*)0);
 	else
-		return ::getCppuType((const Reference<XInputStream>*)0);
+		return ::getCppuType((const com::sun::star::uno::Reference<XInputStream>*)0);
 }
 
 sal_Bool SAL_CALL SvXMLEmbeddedObjectHelper::hasElements()
--- svx/source/xml/xmlexport.cxx.gcc43~	2007-06-27 21:31:53.000000000 +0200
+++ svx/source/xml/xmlexport.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -113,19 +113,19 @@
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
 
-sal_Bool SvxDrawingLayerExport( SdrModel* pModel, uno::Reference<io::XOutputStream> xOut, Reference< lang::XComponent > xComponent )
+sal_Bool SvxDrawingLayerExport( SdrModel* pModel, uno::Reference<io::XOutputStream> xOut, com::sun::star::uno::Reference< lang::XComponent > xComponent )
 {
 	return SvxDrawingLayerExport( pModel, xOut, xComponent, "com.sun.star.comp.DrawingLayer.XMLExporter" );
 }
 
-sal_Bool SvxDrawingLayerExport( SdrModel* pModel, uno::Reference<io::XOutputStream> xOut, Reference< lang::XComponent > xComponent, const char* pExportService )
+sal_Bool SvxDrawingLayerExport( SdrModel* pModel, uno::Reference<io::XOutputStream> xOut, com::sun::star::uno::Reference< lang::XComponent > xComponent, const char* pExportService )
 {
 	sal_Bool bDocRet = xOut.is();
 
-	Reference< document::XGraphicObjectResolver > xGraphicResolver;
+	com::sun::star::uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
 	SvXMLGraphicHelper *pGraphicHelper = 0;
 
-	Reference< document::XEmbeddedObjectResolver > xObjectResolver;
+	com::sun::star::uno::Reference< document::XEmbeddedObjectResolver > xObjectResolver;
 	SvXMLEmbeddedObjectHelper *pObjectHelper = 0;
 
 	try
@@ -133,7 +133,7 @@
 		if( !xComponent.is() )
 		{
 			xComponent = new SvxUnoDrawingModel( pModel );
-			pModel->setUnoModel( Reference< XInterface >::query( xComponent ) );
+			pModel->setUnoModel( com::sun::star::uno::Reference< XInterface >::query( xComponent ) );
 		}
 
 		uno::Reference< lang::XMultiServiceFactory> xServiceFactory( ::comphelper::getProcessServiceFactory() );
@@ -220,39 +220,39 @@
 
 sal_Bool SvxDrawingLayerExport( SdrModel* pModel, uno::Reference<io::XOutputStream> xOut )
 {
-	Reference< lang::XComponent > xComponent;
+	com::sun::star::uno::Reference< lang::XComponent > xComponent;
 	return SvxDrawingLayerExport( pModel, xOut, xComponent );
 }
 
 //-////////////////////////////////////////////////////////////////////
 
-sal_Bool SvxDrawingLayerImport( SdrModel* pModel, uno::Reference<io::XInputStream> xInputStream, Reference< lang::XComponent > xComponent )
+sal_Bool SvxDrawingLayerImport( SdrModel* pModel, uno::Reference<io::XInputStream> xInputStream, com::sun::star::uno::Reference< lang::XComponent > xComponent )
 {
 	return SvxDrawingLayerImport( pModel, xInputStream, xComponent, "com.sun.star.comp.Draw.XMLOasisImporter" );
 }
 
-sal_Bool SvxDrawingLayerImport( SdrModel* pModel, uno::Reference<io::XInputStream> xInputStream, Reference< lang::XComponent > xComponent, const char* pImportService  )
+sal_Bool SvxDrawingLayerImport( SdrModel* pModel, uno::Reference<io::XInputStream> xInputStream, com::sun::star::uno::Reference< lang::XComponent > xComponent, const char* pImportService  )
 {
 	sal_uInt32	nRet = 0;
 
-	Reference< document::XGraphicObjectResolver > xGraphicResolver;
+	com::sun::star::uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
 	SvXMLGraphicHelper *pGraphicHelper = 0;
 
-	Reference< document::XEmbeddedObjectResolver > xObjectResolver;
+	com::sun::star::uno::Reference< document::XEmbeddedObjectResolver > xObjectResolver;
 	SvXMLEmbeddedObjectHelper *pObjectHelper = 0;
 
 	if( !xComponent.is() )
 	{
 		xComponent = new SvxUnoDrawingModel( pModel );
-		pModel->setUnoModel( Reference< XInterface >::query( xComponent ) );
+		pModel->setUnoModel( com::sun::star::uno::Reference< XInterface >::query( xComponent ) );
 	}
 
-	Reference< frame::XModel > xModel( xComponent, UNO_QUERY );
+	com::sun::star::uno::Reference< frame::XModel > xModel( xComponent, UNO_QUERY );
 
 	try
 	{
 		// Get service factory
-		Reference< lang::XMultiServiceFactory > xServiceFactory = comphelper::getProcessServiceFactory();
+		com::sun::star::uno::Reference< lang::XMultiServiceFactory > xServiceFactory = comphelper::getProcessServiceFactory();
 		DBG_ASSERT( xServiceFactory.is(), "XMLReader::Read: got no service manager" );
 
 		if( !xServiceFactory.is() )
@@ -288,7 +288,7 @@
 			aParserInput.aInputStream = xInputStream;
 
 			// get parser
-			Reference< xml::sax::XParser > xParser( xServiceFactory->createInstance( OUString::createFromAscii("com.sun.star.xml.sax.Parser") ), UNO_QUERY );
+			com::sun::star::uno::Reference< xml::sax::XParser > xParser( xServiceFactory->createInstance( OUString::createFromAscii("com.sun.star.xml.sax.Parser") ), UNO_QUERY );
 			DBG_ASSERT( xParser.is(), "Can't create parser" );
 
 			// prepare filter arguments
@@ -298,7 +298,7 @@
 			*pArgs++ <<= xObjectResolver;
 
 			// get filter
-			Reference< xml::sax::XDocumentHandler > xFilter( xServiceFactory->createInstanceWithArguments( OUString::createFromAscii( pImportService ), aFilterArgs), UNO_QUERY );
+			com::sun::star::uno::Reference< xml::sax::XDocumentHandler > xFilter( xServiceFactory->createInstanceWithArguments( OUString::createFromAscii( pImportService ), aFilterArgs), UNO_QUERY );
 			DBG_ASSERT( xFilter.is(), "Can't instantiate filter component." );
 
 			if( !xParser.is() || !xFilter.is() )
@@ -376,6 +376,6 @@
 
 sal_Bool SvxDrawingLayerImport( SdrModel* pModel, uno::Reference<io::XInputStream> xInputStream )
 {
-	Reference< lang::XComponent > xComponent;
+	com::sun::star::uno::Reference< lang::XComponent > xComponent;
 	return SvxDrawingLayerImport( pModel, xInputStream, xComponent );
 }
--- svx/source/xml/xmlgrhlp.cxx.gcc43~	2007-05-22 17:22:00.000000000 +0200
+++ svx/source/xml/xmlgrhlp.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -122,7 +122,7 @@
 private:
 
     ::utl::TempFile                 maTmp;
-    Reference< XInputStream >       mxStmWrapper;
+    com::sun::star::uno::Reference< XInputStream >       mxStmWrapper;
 
                                     // not available
                                     SvXMLGraphicInputStream();
@@ -271,7 +271,7 @@
 
     ::utl::TempFile*                mpTmp;
     SvStream*                       mpOStm;
-    Reference< XOutputStream >      mxStmWrapper;
+    com::sun::star::uno::Reference< XOutputStream >      mxStmWrapper;
     GraphicObject                   maGrfObj;
     sal_Bool                        mbClosed;
 
@@ -341,7 +341,7 @@
         throw NotConnectedException() ;
 
     mxStmWrapper->closeOutput();
-    mxStmWrapper = Reference< XOutputStream >();
+    mxStmWrapper = com::sun::star::uno::Reference< XOutputStream >();
 
     mbClosed = sal_True;
 }
@@ -858,10 +858,10 @@
 // -----------------------------------------------------------------------------
 
 // XBinaryStreamResolver
-Reference< XInputStream > SAL_CALL SvXMLGraphicHelper::getInputStream( const OUString& rURL )
+com::sun::star::uno::Reference< XInputStream > SAL_CALL SvXMLGraphicHelper::getInputStream( const OUString& rURL )
     throw( RuntimeException )
 {
-    Reference< XInputStream >   xRet;
+    com::sun::star::uno::Reference< XInputStream >   xRet;
     OUString                    aPictureStorageName, aGraphicId;
 
 
@@ -881,10 +881,10 @@
 
 // -----------------------------------------------------------------------------
 
-Reference< XOutputStream > SAL_CALL SvXMLGraphicHelper::createOutputStream()
+com::sun::star::uno::Reference< XOutputStream > SAL_CALL SvXMLGraphicHelper::createOutputStream()
     throw( RuntimeException )
 {
-    Reference< XOutputStream > xRet;
+    com::sun::star::uno::Reference< XOutputStream > xRet;
 
 	if( GRAPHICHELPER_MODE_READ == meCreateMode )
     {
@@ -901,7 +901,7 @@
 
 // -----------------------------------------------------------------------------
 
-OUString SAL_CALL SvXMLGraphicHelper::resolveOutputStream( const Reference< XOutputStream >& rxBinaryStream )
+OUString SAL_CALL SvXMLGraphicHelper::resolveOutputStream( const com::sun::star::uno::Reference< XOutputStream >& rxBinaryStream )
     throw( RuntimeException )
 {
     OUString aRet;
@@ -979,11 +979,11 @@
         throw (RuntimeException);
 
     // ____ XBinaryStreamResolver ____
-    virtual Reference< io::XInputStream > SAL_CALL getInputStream( const ::rtl::OUString& aURL )
+    virtual com::sun::star::uno::Reference< io::XInputStream > SAL_CALL getInputStream( const ::rtl::OUString& aURL )
         throw (RuntimeException);
-    virtual Reference< io::XOutputStream > SAL_CALL createOutputStream()
+    virtual com::sun::star::uno::Reference< io::XOutputStream > SAL_CALL createOutputStream()
         throw (RuntimeException);
-    virtual ::rtl::OUString SAL_CALL resolveOutputStream( const Reference< io::XOutputStream >& aBinaryStream )
+    virtual ::rtl::OUString SAL_CALL resolveOutputStream( const com::sun::star::uno::Reference< io::XOutputStream >& aBinaryStream )
         throw (RuntimeException);
 
     // ____ XServiceInfo ____
@@ -996,8 +996,8 @@
 
 private:
     SvXMLGraphicHelperMode              m_eGraphicHelperMode;
-    Reference< XGraphicObjectResolver > m_xGraphicObjectResolver;
-    Reference< XBinaryStreamResolver >  m_xBinaryStreamResolver;
+    com::sun::star::uno::Reference< XGraphicObjectResolver > m_xGraphicObjectResolver;
+    com::sun::star::uno::Reference< XBinaryStreamResolver >  m_xBinaryStreamResolver;
 };
 
 SvXMLGraphicImportExportHelper::SvXMLGraphicImportExportHelper( SvXMLGraphicHelperMode eMode ) :
@@ -1007,7 +1007,7 @@
 
 void SAL_CALL SvXMLGraphicImportExportHelper::disposing()
 {
-    Reference< XComponent > xComp( m_xGraphicObjectResolver, UNO_QUERY );
+    com::sun::star::uno::Reference< XComponent > xComp( m_xGraphicObjectResolver, UNO_QUERY );
     OSL_ASSERT( xComp.is());
     if( xComp.is())
         xComp->dispose();
@@ -1020,7 +1020,7 @@
     const Sequence< Any >& aArguments )
     throw (Exception, RuntimeException)
 {
-    Reference< embed::XStorage > xStorage;
+    com::sun::star::uno::Reference< embed::XStorage > xStorage;
     if( aArguments.getLength() > 0 )
         aArguments[0] >>= xStorage;
 
@@ -1041,17 +1041,17 @@
 
 
 // ____ XBinaryStreamResolver ____
-Reference< io::XInputStream > SAL_CALL SvXMLGraphicImportExportHelper::getInputStream( const OUString& aURL )
+com::sun::star::uno::Reference< io::XInputStream > SAL_CALL SvXMLGraphicImportExportHelper::getInputStream( const OUString& aURL )
     throw (uno::RuntimeException)
 {
     return m_xBinaryStreamResolver->getInputStream( aURL );
 }
-Reference< io::XOutputStream > SAL_CALL SvXMLGraphicImportExportHelper::createOutputStream()
+com::sun::star::uno::Reference< io::XOutputStream > SAL_CALL SvXMLGraphicImportExportHelper::createOutputStream()
     throw (uno::RuntimeException)
 {
     return m_xBinaryStreamResolver->createOutputStream();
 }
-OUString SAL_CALL SvXMLGraphicImportExportHelper::resolveOutputStream( const Reference< io::XOutputStream >& aBinaryStream )
+OUString SAL_CALL SvXMLGraphicImportExportHelper::resolveOutputStream( const com::sun::star::uno::Reference< io::XOutputStream >& aBinaryStream )
     throw (uno::RuntimeException)
 {
     return m_xBinaryStreamResolver->resolveOutputStream( aBinaryStream );
@@ -1082,7 +1082,7 @@
 }
 
 // import
-Reference< XInterface > SAL_CALL SvXMLGraphicImportHelper_createInstance(const Reference< XMultiServiceFactory > & /* rSMgr */ )
+com::sun::star::uno::Reference< XInterface > SAL_CALL SvXMLGraphicImportHelper_createInstance(const com::sun::star::uno::Reference< XMultiServiceFactory > & /* rSMgr */ )
     throw( Exception )
 {
     return static_cast< XWeak* >( new SvXMLGraphicImportExportHelper( GRAPHICHELPER_MODE_READ ));
@@ -1103,7 +1103,7 @@
 }
 
 // export
-Reference< XInterface > SAL_CALL SvXMLGraphicExportHelper_createInstance(const Reference< XMultiServiceFactory > & /* rSMgr */ )
+com::sun::star::uno::Reference< XInterface > SAL_CALL SvXMLGraphicExportHelper_createInstance(const com::sun::star::uno::Reference< XMultiServiceFactory > & /* rSMgr */ )
     throw( Exception )
 {
     return static_cast< XWeak* >( new SvXMLGraphicImportExportHelper( GRAPHICHELPER_MODE_WRITE ));
--- sw/inc/comcore.hrc.gcc43~	2007-08-03 15:38:53.000000000 +0200
+++ sw/inc/comcore.hrc	2007-11-06 00:27:52.000000000 +0100
@@ -80,12 +80,16 @@
 // -> #115575#
 #define STR_FRAME                           (RC_COMCORE_BEGIN + 34)
 #define STR_OLE                             (RC_COMCORE_BEGIN + 35)
+#ifndef STR_FORMULA
 #define STR_FORMULA                         (RC_COMCORE_BEGIN + 36)
+#endif
 #define STR_CHART                           (RC_COMCORE_BEGIN + 37)
 #define STR_NOTE                            (RC_COMCORE_BEGIN + 38)
 #define STR_REFERENCE                       (RC_COMCORE_BEGIN + 39)
 #define STR_SCRIPT                          (RC_COMCORE_BEGIN + 40)
+#ifndef STR_AUTHORITY
 #define STR_AUTHORITY                       (RC_COMCORE_BEGIN + 41)
+#endif
 #define STR_SPECIALCHAR                     (RC_COMCORE_BEGIN + 42)
 #define STR_FOOTNOTE                        (RC_COMCORE_BEGIN + 43)
 #define STR_GRAPHIC                         (RC_COMCORE_BEGIN + 44)
--- sw/inc/fmtui.hrc.gcc43~	2005-09-09 03:53:34.000000000 +0200
+++ sw/inc/fmtui.hrc	2007-11-06 00:27:52.000000000 +0100
@@ -51,6 +51,8 @@
 
 #define DLG_STD_CHAR				(RC_FMTUI_BEGIN + 15)
 
+#undef MN_FRAME
+
 #define	MN_TEXT						(RC_FMTUI_BEGIN + 20)
 #define MN_GRAFIC                   (RC_FMTUI_BEGIN + 21)
 #define MN_TABLE                    (RC_FMTUI_BEGIN + 22)
--- sw/inc/index.hrc.gcc43~	2005-09-09 03:58:19.000000000 +0200
+++ sw/inc/index.hrc	2007-11-06 00:27:52.000000000 +0100
@@ -42,6 +42,8 @@
 
 #include "rcid.hrc"
 
+#undef STR_LEVEL
+
 #define  DLG_FORMEDT 			(RC_INDEX_BEGIN + 0)
 #define  DLG_IDX	            (RC_INDEX_BEGIN + 1)
 #define  DLG_USRIDX             (RC_INDEX_BEGIN + 2)
--- sw/source/core/view/viewsh.cxx.gcc43~	2007-08-03 15:40:32.000000000 +0200
+++ sw/source/core/view/viewsh.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -172,7 +172,7 @@
 // #i74769#
 #ifndef _SDRPAINTWINDOW_HXX
 #include <svx/sdrpaintwindow.hxx>
-#endif _SDRPAINTWINDOW_HXX
+#endif //_SDRPAINTWINDOW_HXX
 
 BOOL ViewShell::bLstAct = FALSE;
 ShellResource *ViewShell::pShellRes = 0;
--- sw/source/ui/app/docshini.cxx.gcc43~	2007-11-06 00:25:13.000000000 +0100
+++ sw/source/ui/app/docshini.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -236,7 +236,9 @@
 using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star;
 using namespace ::rtl;
+#ifndef C2U
 #define C2U(cChar) OUString::createFromAscii(cChar)
+#endif
 /*-----------------21.09.96 15.29-------------------
 
 --------------------------------------------------*/
--- sw/source/ui/envelp/labelexp.cxx.gcc43~	2006-09-17 00:55:11.000000000 +0200
+++ sw/source/ui/envelp/labelexp.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -80,7 +80,9 @@
 using namespace ::comphelper;
 using namespace ::rtl;
 
+#ifndef C2U
 #define C2U(char) rtl::OUString::createFromAscii(char)
+#endif
 
 #ifdef SW_PROP_NAME_STR
 #undef SW_PROP_NAME_STR
--- tools/source/fsys/urlobj.cxx.gcc43~	2007-11-06 00:25:45.000000000 +0100
+++ tools/source/fsys/urlobj.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -81,6 +81,8 @@
 #define INCLUDED_LIMITS
 #endif
 
+#include <cstring>
+
 namespace unnamed_tools_urlobj {} using namespace unnamed_tools_urlobj;
 	// unnamed namespaces don't work well yet...
 
--- ucb/inc/makefile.mk.gcc43~	2006-10-30 10:16:23.000000000 +0100
+++ ucb/inc/makefile.mk	2007-11-06 00:27:51.000000000 +0100
@@ -53,3 +53,4 @@
 	
 .ENDIF			# "$(ENABLE_PCH)"!=""
 
+ARCH_FLAGS+=-I/usr/include/libxml2
--- unoxml/source/dom/attr.cxx.gcc43~	2005-10-24 09:35:44.000000000 +0200
+++ unoxml/source/dom/attr.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -36,6 +36,7 @@
 #include "attr.hxx"
 #include "element.hxx"
 #include <com/sun/star/xml/dom/DOMException.hdl>
+#include <cstring>
 
 namespace DOM
 {
--- unoxml/source/dom/attributesmap.cxx.gcc43~	2006-06-20 02:43:23.000000000 +0200
+++ unoxml/source/dom/attributesmap.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -34,6 +34,7 @@
  ************************************************************************/
 
 #include "attributesmap.hxx"
+#include <cstring>
 
 namespace DOM
 {
--- unoxml/source/dom/characterdata.cxx.gcc43~	2006-01-27 17:18:07.000000000 +0100
+++ unoxml/source/dom/characterdata.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -36,6 +36,7 @@
 #include <com/sun/star/xml/dom/events/XDocumentEvent.hpp>
 #include "characterdata.hxx"
 #include "../events/mutationevent.hxx"
+#include <cstring>
 
 namespace DOM
 {
--- unoxml/source/dom/document.cxx.gcc43~	2006-06-20 02:44:24.000000000 +0200
+++ unoxml/source/dom/document.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -52,6 +52,8 @@
 #include "../events/uievent.hxx"
 #include "../events/mouseevent.hxx"
 
+#include <cstring>
+
 namespace DOM
 {
     
--- unoxml/source/dom/documenttype.cxx.gcc43~	2006-06-20 02:45:08.000000000 +0200
+++ unoxml/source/dom/documenttype.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -36,6 +36,7 @@
 #include "documenttype.hxx"
 #include "entitiesmap.hxx"
 #include "notationsmap.hxx"
+#include <cstring>
 
 
 namespace DOM
--- unoxml/source/dom/element.cxx.gcc43~	2006-12-20 15:17:50.000000000 +0100
+++ unoxml/source/dom/element.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -39,6 +39,7 @@
 #include "elementlist.hxx"
 #include "attributesmap.hxx"
 #include "../events/mutationevent.hxx"
+#include <cstring>
 
 namespace DOM
 {
--- unoxml/source/dom/elementlist.cxx.gcc43~	2006-06-20 02:46:18.000000000 +0200
+++ unoxml/source/dom/elementlist.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -34,6 +34,7 @@
  ************************************************************************/
 
 #include "elementlist.hxx"
+#include <cstring>
 
 namespace DOM
 {
--- unoxml/source/dom/entity.cxx.gcc43~	2006-06-20 02:46:49.000000000 +0200
+++ unoxml/source/dom/entity.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -34,6 +34,7 @@
  ************************************************************************/
 
 #include "entity.hxx"
+#include <cstring>
 
 namespace DOM
 {
--- unoxml/source/dom/entityreference.cxx.gcc43~	2006-06-20 02:47:11.000000000 +0200
+++ unoxml/source/dom/entityreference.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -34,6 +34,7 @@
  ************************************************************************/
 
 #include "entityreference.hxx"
+#include <cstring>
 namespace DOM
 {
   CEntityReference::CEntityReference(const xmlNodePtr /*aNodePtr*/)
--- unoxml/source/dom/node.cxx.gcc43~	2007-03-01 16:39:37.000000000 +0100
+++ unoxml/source/dom/node.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -34,6 +34,7 @@
  ************************************************************************/
 
 #include <stdio.h>
+#include <cstring>
 #include "node.hxx"
 #include "element.hxx"
 #include "text.hxx"
--- unoxml/source/dom/notation.cxx.gcc43~	2005-09-09 12:03:53.000000000 +0200
+++ unoxml/source/dom/notation.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -34,6 +34,7 @@
  ************************************************************************/
 
 #include "notation.hxx"
+#include <cstring>
 namespace DOM
 {
     CNotation::CNotation(const xmlNotationPtr aNotationPtr)
--- unoxml/source/dom/processinginstruction.cxx.gcc43~	2006-06-20 02:48:10.000000000 +0200
+++ unoxml/source/dom/processinginstruction.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -34,6 +34,7 @@
  ************************************************************************/
 
 #include "processinginstruction.hxx"
+#include <cstring>
 
 namespace DOM 
 {
--- unoxml/source/fastsax/fastparser.cxx.gcc43~	2007-06-05 15:52:30.000000000 +0200
+++ unoxml/source/fastsax/fastparser.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -39,6 +39,7 @@
 #include <stack>
 #include <vector>
 #include <hash_map>
+#include <cstring>
 #include <boost/scoped_ptr.hpp>
 #include <boost/shared_ptr.hpp>
 
--- vcl/unx/source/app/i18n_im.cxx.gcc43~	2006-09-17 14:32:10.000000000 +0200
+++ vcl/unx/source/app/i18n_im.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -37,6 +37,7 @@
 #include "precompiled_vcl.hxx"
 
 #include <stdio.h>
+#include <cstring>
 #ifdef LINUX
 #  ifndef __USE_XOPEN
 #    define __USE_XOPEN
--- writerfilter/source/dmapper/DomainMapper_Impl.hxx.gcc43~	2007-11-06 00:26:22.000000000 +0100
+++ writerfilter/source/dmapper/DomainMapper_Impl.hxx	2007-11-06 00:27:52.000000000 +0100
@@ -46,6 +46,7 @@
 #endif
 #include <vector>
 #include <stack>
+#include <cstring>
 
 #ifndef INCLUDED_RESOURCESIDS
 #include <doctok/resourceids.hxx>
--- writerfilter/source/dmapper/GraphicImport.cxx.gcc43~	2007-11-06 00:26:22.000000000 +0100
+++ writerfilter/source/dmapper/GraphicImport.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -102,6 +102,7 @@
 
 
 #include <iostream>
+#include <cstring>
 
 namespace dmapper
 {
--- writerfilter/source/odiapi/qname/QName.cxx.gcc43~	2006-11-01 10:14:35.000000000 +0100
+++ writerfilter/source/odiapi/qname/QName.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -43,6 +43,7 @@
 #include <assert.h>
 #include <stdexcept>
 #include <string>
+#include <cstring>
 #include <stdio.h>
 
 namespace writerfilter
--- writerfilter/source/ooxml/OOXMLBinaryObjectReference.cxx.gcc43~	2007-11-06 00:26:22.000000000 +0100
+++ writerfilter/source/ooxml/OOXMLBinaryObjectReference.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -33,6 +33,7 @@
  *
  ************************************************************************/
 #include "OOXMLBinaryObjectReference.hxx"
+#include <cstring>
 
 namespace ooxml
 {
--- writerfilter/source/ooxml/OOXMLFastTokens.hxx.gcc43~	2007-11-06 00:26:22.000000000 +0100
+++ writerfilter/source/ooxml/OOXMLFastTokens.hxx	2007-11-06 00:27:52.000000000 +0100
@@ -46,6 +46,7 @@
 #include <vector>
 #include <boost/shared_ptr.hpp>
 #include <string>
+#include <cstring>
 
 #include <doctok/WW8ResourceModel.hxx>
 
--- writerfilter/unocomponent/debugservices/rtfsl/RTFSLParser.cxx.gcc43~	2007-06-19 07:39:12.000000000 +0200
+++ writerfilter/unocomponent/debugservices/rtfsl/RTFSLParser.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -66,6 +66,7 @@
 #include <odiapi/qname/QName.hxx>
 #include <odiapi/props/Properties.hxx>
 #include <stack>
+#include <cstring>
 
 #include <ctype.h>
 
--- writerfilter/unocomponent/debugservices/rtftok/ScannerTestService.cxx.gcc43~	2007-06-19 07:39:13.000000000 +0200
+++ writerfilter/unocomponent/debugservices/rtftok/ScannerTestService.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -65,6 +65,7 @@
 #include <comphelper/seqstream.hxx>
 
 #include <ctype.h>
+#include <cstring>
 
 using namespace ::com::sun::star;
 
--- writerfilter/unocomponent/debugservices/rtftok/XMLScanner.cxx.gcc43~	2007-06-19 07:39:13.000000000 +0200
+++ writerfilter/unocomponent/debugservices/rtftok/XMLScanner.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -67,6 +67,7 @@
 
 #include <ctype.h>
 #include <iostream>
+#include <cstring>
 
 using namespace ::com::sun::star;
 using namespace ::std;
--- writerperfect/source/filter/DocumentCollector.hxx.gcc43~	2007-11-06 00:25:16.000000000 +0100
+++ writerperfect/source/filter/DocumentCollector.hxx	2007-11-06 00:27:52.000000000 +0100
@@ -37,6 +37,7 @@
 #include <vector>
 #include <map>
 #include <stack>
+#include <cstring>
 
 class DocumentElement;
 class DocumentHandler;
--- writerperfect/source/filter/TableStyle.cxx.gcc43~	2007-01-23 13:15:53.000000000 +0100
+++ writerperfect/source/filter/TableStyle.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -30,6 +30,7 @@
 #include "FilterInternal.hxx"
 #include "TableStyle.hxx"
 #include "DocumentElement.hxx"
+#include <cstring>
 
 #ifdef _MSC_VER
 #include <minmax.h>
--- writerperfect/source/filter/TextRunStyle.cxx.gcc43~	2007-11-06 00:25:36.000000000 +0100
+++ writerperfect/source/filter/TextRunStyle.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -31,6 +31,7 @@
 #include "TextRunStyle.hxx"
 #include "WriterProperties.hxx"
 #include "DocumentElement.hxx"
+#include <cstring>
 
 #ifdef _MSC_VER
 #include <minmax.h>
--- xmlhelp/source/com/sun/star/help/HelpCompiler.cxx.gcc43~	2007-06-26 14:37:53.000000000 +0200
+++ xmlhelp/source/com/sun/star/help/HelpCompiler.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -41,6 +41,7 @@
 #include <libxslt/xsltInternals.h>
 #include <libxslt/transform.h>
 #include <libxslt/xsltutils.h>
+#include <cstring>
 
 HelpCompiler::HelpCompiler(StreamTable &in_streamTable, const fs::path &in_inputFile, 
     const fs::path &in_src, const fs::path &in_resEmbStylesheet, 
--- xmlhelp/source/com/sun/star/help/HelpLinker.cxx.gcc43~	2007-11-06 00:25:39.000000000 +0100
+++ xmlhelp/source/com/sun/star/help/HelpLinker.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -53,6 +53,8 @@
 #include <sal/types.h>
 #include <osl/time.h>
 
+#include <cstring>
+
 class JarOutputStream
 {
 private:
--- xmlhelp/source/cxxhelp/provider/databases.cxx.gcc43~	2007-11-06 00:25:43.000000000 +0100
+++ xmlhelp/source/cxxhelp/provider/databases.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -74,6 +74,7 @@
 #endif
 #include "inputstream.hxx"
 #include <algorithm>
+#include <cstring>
 
 using namespace chelp;
 using namespace berkeleydbproxy;
--- xmloff/inc/xmloff/PropertySetInfoHash.hxx.gcc43~	2007-04-11 15:20:51.000000000 +0200
+++ xmloff/inc/xmloff/PropertySetInfoHash.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -40,6 +40,7 @@
 #endif
 
 #include <memory>
+#include <cstring>
 
 struct PropertySetInfoHash
 {
--- xmloff/inc/xmloff/nmspmap.hxx.gcc43~	2007-04-11 15:27:58.000000000 +0200
+++ xmloff/inc/xmloff/nmspmap.hxx	2007-11-06 00:27:51.000000000 +0100
@@ -61,6 +61,8 @@
 #include <cppuhelper/weak.hxx>
 #endif
 
+#include <limits.h>
+
 const sal_uInt16 XML_NAMESPACE_XMLNS  = (USHRT_MAX-2);
 const sal_uInt16 XML_NAMESPACE_NONE  = (USHRT_MAX-1);
 const sal_uInt16 XML_NAMESPACE_UNKNOWN  = (USHRT_MAX);
--- xmloff/source/draw/EnhancedCustomShapeToken.cxx.gcc43~	2006-09-17 12:24:28.000000000 +0200
+++ xmloff/source/draw/EnhancedCustomShapeToken.cxx	2007-11-06 00:27:51.000000000 +0100
@@ -43,6 +43,7 @@
 #include <osl/mutex.hxx>
 #endif
 #include <hash_map>
+#include <cstring>
 
 namespace xmloff { namespace EnhancedCustomShapeToken {
 
--- xmlsecurity/source/helper/xsecparser.cxx.gcc43~	2006-09-16 16:41:05.000000000 +0200
+++ xmlsecurity/source/helper/xsecparser.cxx	2007-11-06 00:27:52.000000000 +0100
@@ -43,6 +43,8 @@
 #endif
 #include "cppuhelper/exc_hlp.hxx"
 
+#include <cstring>
+
 namespace cssu = com::sun::star::uno;
 namespace cssxs = com::sun::star::xml::sax;
 
--- filter/source/xmlfilteradaptor/XmlFilterAdaptor.cxx.ark	2007-11-06 12:28:04.000000000 +0100
+++ filter/source/xmlfilteradaptor/XmlFilterAdaptor.cxx	2007-11-06 12:28:11.000000000 +0100
@@ -35,7 +35,7 @@
 
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_filter.hxx"
-#include <iostream.h>
+#include <iostream>
 #include <stdlib.h>
 #include <ctype.h>
 #include <stdio.h>
--- filter/source/xmlfilterdetect/filterdetect.cxx.ark	2007-11-06 12:56:26.000000000 +0100
+++ filter/source/xmlfilterdetect/filterdetect.cxx	2007-11-06 12:56:30.000000000 +0100
@@ -35,7 +35,7 @@
 
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_filter.hxx"
-#include <iostream.h>
+#include <iostream>
 #include <stdlib.h>
 #include <ctype.h>
 #include <stdio.h>
--- hwpfilter/source/formula.cpp.ark	2007-11-06 03:06:01.000000000 +0100
+++ hwpfilter/source/formula.cpp	2007-11-06 03:06:04.000000000 +0100
@@ -39,7 +39,7 @@
 #include "nodes.h"
 #include "mapping.h"
 #include "hwpeq.h"
-#include <iostream.h>
+#include <iostream>
 
 extern LinkedList<Node> nodelist;
 
--- tools/inc/bootstrp/command.hxx.ark	2007-11-06 03:23:40.000000000 +0100
+++ tools/inc/bootstrp/command.hxx	2007-11-06 03:23:44.000000000 +0100
@@ -36,7 +36,7 @@
 #ifndef COMMAND_HXX
 #define COMMAND_HXX
 
-#include <iostream.h>
+#include <iostream>
 
 #include <tools/stream.hxx>
 #define STRLEN 100
