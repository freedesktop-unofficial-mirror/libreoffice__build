Index: sc/inc/address.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/address.hxx,v
retrieving revision 1.8
retrieving revision 1.7.36.6
diff -u -w -p -r1.8 -r1.7.36.6
--- sc/inc/address.hxx	21 Oct 2005 11:48:10 -0000	1.8
+++ sc/inc/address.hxx	1 Dec 2005 19:52:16 -0000	1.7.36.6
@@ -253,6 +253,34 @@ public:
 
     enum Uninitialized      { UNINITIALIZED };
     enum InitializeInvalid  { INITIALIZE_INVALID };
+    enum Convention	        {
+		CONV_UNSPECIFIED = -1,	/* useful when we want method to chose, must be first */
+
+		/* elements must be sequential and changes should be reflected in ScCompiler::pCharTables */
+		CONV_OOO	 =  0,	/* sheet.A1:sheet2.B2 */
+		CONV_XL_A1,			/* sheet:sheet2!A1:B2 */
+		CONV_XL_R1C1,		/* sheet:sheet2!R1C1:R2C2 */
+
+		CONV_LAST	/* for loops, must always be last */
+	};
+	struct Details {
+		Convention	eConv;
+		SCROW   	nRow;
+		SCCOL   	nCol;
+		inline Details( Convention eConvP, SCROW nRowP, SCCOL nColP )
+			: eConv( eConvP ), nRow( nRowP ), nCol( nColP )
+			{}
+		inline Details( Convention eConvP, ScAddress const & rAddr )
+			: eConv( eConvP ), nRow( rAddr.Row() ), nCol( rAddr.Col() )
+			{}
+		inline Details( Convention eConvP)
+			: eConv( eConvP ), nRow( 0 ), nCol( 0 )
+			{}
+		/* Use the convention associated with rAddr::Tab() */
+		Details( const ScDocument* pDoc, const ScAddress & rAddr );
+		void SetPos( const ScDocument* pDoc, const ScAddress & rAddr );
+	};
+	static const Details detailsOOOa1;
 
     inline ScAddress() : nRow(0), nCol(0), nTab(0) {}
     inline ScAddress( SCCOL nColP, SCROW nRowP, SCTAB nTabP )
@@ -283,8 +311,12 @@ public:
     inline void IncTab( SCsTAB n=1 ) { nTab += n; }
     inline void GetVars( SCCOL& nColP, SCROW& nRowP, SCTAB& nTabP ) const
     { nColP = nCol; nRowP = nRow; nTabP = nTab; }
-    USHORT Parse( const String&, ScDocument* = NULL );
-    void Format( String&, USHORT = 0, ScDocument* = NULL ) const;
+
+    USHORT Parse( const String&, ScDocument* = NULL,
+				  const Details& rDetails = detailsOOOa1);
+    void Format( String&, USHORT = 0, ScDocument* = NULL,
+				 const Details& rDetails = detailsOOOa1) const;
+
     // The document for the maximum defined sheet number
     bool Move( SCsCOL dx, SCsROW dy, SCsTAB dz, ScDocument* =NULL );
     inline bool operator==( const ScAddress& r ) const;
@@ -297,8 +329,9 @@ public:
     // moved from ScTripel
     /// "(1,2,3)"
     String GetText() const;
-    /// "A1" or "$A$1"
-    String GetColRowString( bool bAbsolute = FALSE ) const;
+    /// "A1" or "$A$1" or R1C1 or R[1]C[1]
+    String GetColRowString( bool bAbsolute = FALSE,
+							const Details& rDetails = detailsOOOa1) const;
 };
 
 inline void ScAddress::PutInOrder( ScAddress& r )
@@ -407,11 +440,16 @@ public:
     inline bool IsValid() const { return aStart.IsValid() && aEnd.IsValid(); }
     inline bool In( const ScAddress& ) const;   // is Address& in Range?
     inline bool In( const ScRange& ) const;     // is Range& in Range?
-    USHORT Parse( const String&, ScDocument* = NULL );
-    USHORT ParseAny( const String&, ScDocument* = NULL );
+
+    USHORT Parse( const String&, ScDocument* = NULL,
+				  const ScAddress::Details& rDetails = ScAddress::detailsOOOa1 );
+    USHORT ParseAny( const String&, ScDocument* = NULL,
+					 const ScAddress::Details& rDetails = ScAddress::detailsOOOa1 );
+    void Format( String&, USHORT = 0, ScDocument* = NULL,
+				 const ScAddress::Details& rDetails = ScAddress::detailsOOOa1 ) const;
+
     inline void GetVars( SCCOL& nCol1, SCROW& nRow1, SCTAB& nTab1,
         SCCOL& nCol2, SCROW& nRow2, SCTAB& nTab2 ) const;
-    void Format( String&, USHORT = 0, ScDocument* = NULL ) const;
     // The document for the maximum defined sheet number
     bool Move( SCsCOL dx, SCsROW dy, SCsTAB dz, ScDocument* =NULL );
     void Justify();
@@ -568,7 +606,8 @@ public:
     inline  int     operator != ( const ScRefAddress& r ) const
                     { return !(operator==(r)); }
 
-            String  GetRefString( ScDocument* pDoc, SCTAB nActTab) const;
+            String  GetRefString( ScDocument* pDoc, SCTAB nActTab,
+								  const ScAddress::Details& rDetails = ScAddress::detailsOOOa1) const;
 };
 
 inline ScRefAddress& ScRefAddress::operator=( const ScRefAddress& rRef )
@@ -625,11 +664,13 @@ template< typename T > void PutInOrder( 
 }
 
 bool ConvertSingleRef( ScDocument* pDoc, const String& rRefString,
-        SCTAB nDefTab, ScRefAddress& rRefAddress);
+        SCTAB nDefTab, ScRefAddress& rRefAddress,
+		const ScAddress::Details& rDetails = ScAddress::detailsOOOa1);
 
 bool ConvertDoubleRef(ScDocument* pDoc, const String& rRefString,
         SCTAB nDefTab, ScRefAddress& rStartRefAddress,
-        ScRefAddress& rEndRefAddress);
+        ScRefAddress& rEndRefAddress,
+		const ScAddress::Details& rDetails = ScAddress::detailsOOOa1);
 
 /// append alpha representation of column to buffer
 SC_DLLPUBLIC void ColToAlpha( rtl::OUStringBuffer& rBuffer, SCCOL nCol);
Index: sc/inc/cell.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/cell.hxx,v
retrieving revision 1.19
retrieving revision 1.19.40.3
diff -u -w -p -r1.19 -r1.19.40.3
--- sc/inc/cell.hxx	8 Sep 2005 17:24:26 -0000	1.19
+++ sc/inc/cell.hxx	1 Dec 2005 19:52:16 -0000	1.19.40.3
@@ -247,6 +247,7 @@ class ScFormulaCell : public ScBaseCell,
 private:
 	String			aErgString;
 	double			nErgValue;
+	ScAddress::Convention nErgConv;
 	ScTokenArray*	pCode; 					// das neue Token-Array
 	ScDocument*		pDocument;
 	ScMatrix*		pMatrix;				// Pointer auf Ergebnis-Matrix
@@ -293,8 +294,11 @@ public:
 	// leere Zelle, ggf. mit fertigem TokenArray
 	ScFormulaCell( ScDocument*, const ScAddress&, const ScTokenArray* = NULL, BYTE=0 );
 	// mit Formel
-	ScFormulaCell( ScDocument* pDoc, const ScAddress&,
-				   const String& rFormula, BYTE bMatInd = 0 );
+	ScFormulaCell( ScDocument* pDoc, const ScAddress& aPos,
+				   const String& rFormula,
+				   // Use the conv associated with aPos::nTab by default
+				   ScAddress::Convention eConvP = ScAddress::CONV_UNSPECIFIED,
+				   BYTE bMatInd = 0 );
 	// copy-ctor
     // nCopyFlags:  0 := nothing special
     //              0x0001 := readjust 3D references to point to old position even if relative
@@ -307,9 +311,12 @@ public:
 	ScBaseCell*		Clone(ScDocument* pDoc, const ScAddress&,
 							BOOL bNoListening = FALSE ) const;
 
-	void			GetFormula( String& rFormula ) const;
-	void			GetEnglishFormula( String& rFormula, BOOL bCompileXML = FALSE ) const;
-	void			GetEnglishFormula( rtl::OUStringBuffer& rBuffer, BOOL bCompileXML = FALSE ) const;
+	void			GetFormula( String& rFormula,
+								ScAddress::Convention eConv = ScAddress::CONV_OOO) const;
+	void			GetEnglishFormula( String& rFormula, BOOL bCompileXML = FALSE,
+									   ScAddress::Convention eConv = ScAddress::CONV_OOO) const;
+	void			GetEnglishFormula( rtl::OUStringBuffer& rBuffer, BOOL bCompileXML = FALSE,
+									   ScAddress::Convention eConv = ScAddress::CONV_OOO) const;
 
 	void			Save( SvStream& rStream, ScMultipleWriteHeader& rHdr ) const;
 
@@ -321,7 +328,9 @@ public:
 	BOOL			GetDirty() const { return bDirty; }
     BOOL            NeedsListening() const { return bNeedListening; }
     void            SetNeedsListening( BOOL bVar ) { bNeedListening = bVar; }
-	void			Compile(const String& rFormula, BOOL bNoListening = FALSE );
+	void			Compile(const String& rFormula,
+							BOOL bNoListening = FALSE,
+							ScAddress::Convention eConv = ScAddress::CONV_OOO);
 	void			CompileTokenArray( BOOL bNoListening = FALSE );
 	void			CompileXML( ScProgress& rProgress );		// compile temporary string tokens
 	void			CalcAfterLoad();
@@ -408,7 +417,9 @@ public:
 	// fuer die Importfilter!
 	void 			AddRecalcMode( ScRecalcMode );
 	void			SetDouble( double n )					{ nErgValue = n; bIsValue = TRUE; }
-	void			SetString( const String& r ) 			{ aErgString = r; bIsValue = FALSE; }
+	void			SetString( const String& r,
+							   ScAddress::Convention eConv = ScAddress::CONV_OOO)
+						{ aErgString = r; nErgConv = eConv; bIsValue = FALSE; }
 	void			SetErrCode( USHORT n );
 	inline BOOL		IsHyperLinkCell() const { return pCode && pCode->IsHyperLink(); }
 	EditTextObject*		CreateURLObject() ;
Index: sc/inc/column.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/column.hxx,v
retrieving revision 1.16
retrieving revision 1.16.40.1
diff -u -w -p -r1.16 -r1.16.40.1
--- sc/inc/column.hxx	8 Sep 2005 17:27:42 -0000	1.16
+++ sc/inc/column.hxx	25 Oct 2005 12:31:21 -0000	1.16.40.1
@@ -264,7 +264,8 @@ public:
 	BOOL		HasEditCells(SCROW nStartRow, SCROW nEndRow, SCROW& rFirst) const;
 
 				//	TRUE = Zahlformat gesetzt
-	BOOL		SetString( SCROW nRow, SCTAB nTab, const String& rString );
+	BOOL		SetString( SCROW nRow, SCTAB nTab, const String& rString,
+						   ScAddress::Convention conv = ScAddress::CONV_OOO );
 	void		SetValue( SCROW nRow, const double& rVal);
 	void		SetNote( SCROW nRow, const ScPostIt& rNote );
 	void		SetError( SCROW nRow, const USHORT nError);
Index: sc/inc/compiler.hrc
===================================================================
RCS file: /cvs/sc/sc/inc/compiler.hrc,v
retrieving revision 1.11
retrieving revision 1.10.38.5
diff -u -w -p -r1.11 -r1.10.38.5
--- sc/inc/compiler.hrc	21 Oct 2005 11:51:34 -0000	1.11
+++ sc/inc/compiler.hrc	28 Nov 2005 16:45:45 -0000	1.10.38.5
@@ -361,9 +361,11 @@
 #define	SC_OPCODE_ISPMT				386
 #define	SC_OPCODE_HYPERLINK			387
 #define SC_OPCODE_BAHTTEXT          388
-#define SC_OPCODE_END_2_PAR         389
+#define	SC_OPCODE_INDIRECT_XL		389		/* See also INDIRECT for OOO variant */
+#define	SC_OPCODE_ADRESS_XL		    390		/* See also ADRESS for OOO variant */
+#define	SC_OPCODE_END_2_PAR			391
 
-#define SC_OPCODE_LAST_OPCODE_ID    388      /* letzter OpCode */
+#define SC_OPCODE_LAST_OPCODE_ID    390      /* letzter OpCode */
 
 /*** Interna ***/
 #define	SC_OPCODE_INTERNAL_BEGIN   9995
Index: sc/inc/compiler.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/compiler.hxx,v
retrieving revision 1.25
retrieving revision 1.24.40.7
diff -u -w -p -r1.25 -r1.24.40.7
--- sc/inc/compiler.hxx	7 Nov 2005 14:40:47 -0000	1.25
+++ sc/inc/compiler.hxx	1 Dec 2005 19:52:16 -0000	1.24.40.7
@@ -223,20 +223,42 @@ struct ScStringHashCode
 };
 typedef ::std::hash_map< String, OpCode, ScStringHashCode, ::std::equal_to< String > > ScOpCodeHashMap;
 
+using namespace ::com::sun::star::i18n;
 class ScCompiler
 {
 public:
+	struct Convention
+	{
+		const ScAddress::Convention eConv;
+		const ULONG*   				pCharTable;
+
+
+		Convention( ScAddress::Convention eConvP );
+		~Convention();
+
+		virtual void MakeRefStr( rtl::OUStringBuffer&	rBuffer,
+								 const ScCompiler&		rCompiler,
+								 const ComplRefData&	rRef,
+								 BOOL bSingleRef ) const = 0;
+		virtual ::com::sun::star::i18n::ParseResult
+					parseAnyToken( const String& rFormula,
+								   xub_StrLen nSrcPos,
+								   const CharClass* pCharClass) const = 0;
+	};
+
 	static String*	pSymbolTableNative;				// array of native symbols, offset==OpCode
 	static String*	pSymbolTableEnglish; 			// array of English symbols, offset==OpCode
 	static USHORT	nAnzStrings;					// count of symbols
     static ScOpCodeHashMap* pSymbolHashMapNative;   // hash map of native symbols
     static ScOpCodeHashMap* pSymbolHashMapEnglish;  // hash map of English symbols
     static CharClass* pCharClassEnglish;            // character classification for en_US locale
-private:
-    static ULONG*   pCharTable;						// array of ASCII character flags
+	static const Convention *pConvOOO_A1;           // convenience to pConventions[ CONV_OOO ]
+	static const Convention *pConventions[ ScAddress::CONV_LAST ];
+
 	ScDocument*	pDoc;
 	ScAddress	aPos;
-	String      cFormula;							// String -> TokenArray
+
+private:
 	String		aCorrectedFormula;					// autocorrected Formula
 	String		aCorrectedSymbol;					// autocorrected Symbol
 	sal_Unicode	cSymbol[MAXSTRLEN];					// current Symbol
@@ -263,7 +285,7 @@ private:
 											// will not be resolved
 	BOOL		bIgnoreErrors;				// on AutoCorrect and CompileForFAP
 											// ignore errors and create RPN nevertheless
-	BOOL		bCompileXML;
+	const Convention *pConv;
 	BOOL		bImportXML;
 
 	BOOL   GetToken();
@@ -282,14 +304,6 @@ private:
 	void NotLine();
 	OpCode Expression();
 
-	String MakeColStr( SCCOL nCol );
-	void MakeColStr( rtl::OUStringBuffer& rBuffer, SCCOL nCol );
-	String MakeRowStr( SCROW nRow );
-	void MakeRowStr( rtl::OUStringBuffer& rBuffer, SCROW nRow );
-	String MakeTabStr( SCTAB nTab, String& aDoc );
-	String MakeRefStr( ComplRefData& rRefData, BOOL bSingleRef );
-	void MakeRefStr( rtl::OUStringBuffer& rBuffer, ComplRefData& rRefData, BOOL bSingleRef );
-
 	void SetError(USHORT nError);
 	xub_StrLen NextSymbol();
 	BOOL IsValue( const String& );
@@ -329,13 +343,18 @@ public:
 	void 			SetAutoCorrection( BOOL bVal )
 						{ bAutoCorrect = bVal; bIgnoreErrors = bVal; }
 	void			SetCompileEnglish( BOOL bVal );		// use English SymbolTable
-	void			SetCompileXML( BOOL bVal )
-						{ bCompileXML = bVal; }
+	void			SetRefConvention( const Convention *pConvP );
+	void			SetRefConvention( const ScAddress::Convention eConv );
+
+	void			SetCompileXML( BOOL bVal );	// Deprecate and move to an address conv
 	void			SetImportXML( BOOL bVal )
 						{ bImportXML = bVal; }
 	BOOL			IsCorrected() { return bCorrected; }
 	const String&	GetCorrectedFormula() { return aCorrectedFormula; }
-	ScTokenArray* CompileString( const String& rFormula );
+
+	// Use convention from this->aPos by default
+	ScTokenArray* CompileString( const String& rFormula,
+								 ScAddress::Convention eConv = ScAddress::CONV_UNSPECIFIED );
 	BOOL  CompileTokenArray();
 	short GetNumFormatType() { return nNumFmt; }
 
@@ -374,18 +393,11 @@ public:
 
 	BOOL HasModifiedRange();
 
-	/// Is the CharTable initialized? If not call Init() yourself!
-	static inline BOOL HasCharTable() { return pCharTable != NULL; }
-
-	/// Access the CharTable flags
-	static inline ULONG GetCharTableFlags( sal_Unicode c )
-		{ return c < 128 ? pCharTable[ UINT8(c) ] : 0; }
-
 	/// If the character is allowed as first character in sheet names or references
 	static inline BOOL IsCharWordChar( sal_Unicode c )
 		{
 			return c < 128 ?
-				((pCharTable[ UINT8(c) ] & SC_COMPILER_C_CHAR_WORD) == SC_COMPILER_C_CHAR_WORD) :
+				((pConvOOO_A1->pCharTable[ UINT8(c) ] & SC_COMPILER_C_CHAR_WORD) == SC_COMPILER_C_CHAR_WORD) :
 				ScGlobal::pCharClass->isLetterNumeric( c );
 		}
 
@@ -393,11 +405,15 @@ public:
 	static inline BOOL IsWordChar( sal_Unicode c )
 		{
 			return c < 128 ?
-				((pCharTable[ UINT8(c) ] & SC_COMPILER_C_WORD) == SC_COMPILER_C_WORD) :
+				((pConvOOO_A1->pCharTable[ UINT8(c) ] & SC_COMPILER_C_WORD) == SC_COMPILER_C_WORD) :
 				ScGlobal::pCharClass->isLetterNumeric( c );
 		}
 
 private:
+	/// Access the CharTable flags
+	inline ULONG GetCharTableFlags( sal_Unicode c )
+		{ return c < 128 ? pConv->pCharTable[ UINT8(c) ] : 0; }
+
     static inline void ForceArrayOperator( ScTokenRef& rCurr, const ScTokenRef& rPrev )
         {
             if ( rPrev.Is() && rPrev->HasForceArray() &&
Index: sc/inc/document.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/document.hxx,v
retrieving revision 1.88
retrieving revision 1.88.22.5
diff -u -w -p -r1.88 -r1.88.22.5
--- sc/inc/document.hxx	28 Sep 2005 11:26:15 -0000	1.88
+++ sc/inc/document.hxx	1 Dec 2005 19:52:17 -0000	1.88.22.5
@@ -395,6 +395,7 @@ private:
 
 	BOOL				bInUnoBroadcast;
 	BOOL				bInUnoListenerCall;
+	ScAddress::Convention eAddrConv;
 
     mutable BOOL        bStyleSheetUsageInvalid;
 
@@ -574,6 +575,8 @@ SC_DLLPUBLIC	ScDBCollection*	GetDBCollec
 	void			GetScenarioFlags( SCTAB nTab, USHORT& rFlags ) const;
 	BOOL			IsActiveScenario( SCTAB nTab ) const;
 	void			SetActiveScenario( SCTAB nTab, BOOL bActive );		// nur fuer Undo etc.
+	ScAddress::Convention GetAddressConvention() const;
+	void	 	    SetAddressConvention( ScAddress::Convention eConv );
 	BYTE			GetLinkMode( SCTAB nTab ) const;
 	BOOL			IsLinked( SCTAB nTab ) const;
 	const String&	GetLinkDoc( SCTAB nTab ) const;
Index: sc/inc/globstr.hrc
===================================================================
RCS file: /cvs/sc/sc/inc/globstr.hrc,v
retrieving revision 1.13
retrieving revision 1.13.40.3
diff -u -w -p -r1.13 -r1.13.40.3
--- sc/inc/globstr.hrc	8 Sep 2005 17:42:01 -0000	1.13
+++ sc/inc/globstr.hrc	25 Nov 2005 04:44:29 -0000	1.13.40.3
@@ -550,7 +550,9 @@
 
 #define STR_MANUAL                  416
 
-#define STR_COUNT                   417
+#define STR_UNDO_TAB_R1C1           417
+
+#define STR_COUNT                   418
 
 #endif
 
Index: sc/inc/opcode.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/opcode.hxx,v
retrieving revision 1.13
retrieving revision 1.12.38.4
diff -u -w -p -r1.13 -r1.12.38.4
--- sc/inc/opcode.hxx	21 Oct 2005 11:51:53 -0000	1.13
+++ sc/inc/opcode.hxx	28 Nov 2005 16:01:33 -0000	1.12.38.4
@@ -266,7 +266,9 @@ enum OpCodeEnum
 		ocDBVarP			= SC_OPCODE_DB_VAR_P,
 	// Verwaltungsfunktionen
 		ocIndirect			= SC_OPCODE_INDIRECT,
+		ocIndirectXL		= SC_OPCODE_INDIRECT_XL,
 		ocAdress			= SC_OPCODE_ADRESS,
+		ocAdressXL			= SC_OPCODE_ADRESS_XL,
 		ocMatch				= SC_OPCODE_MATCH,
 		ocCountEmptyCells	= SC_OPCODE_COUNT_EMPTY_CELLS,
 		ocCountIf			= SC_OPCODE_COUNT_IF,
Index: sc/inc/rangelst.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/rangelst.hxx,v
retrieving revision 1.5
retrieving revision 1.5.22.3
diff -u -w -p -r1.5 -r1.5.22.3
--- sc/inc/rangelst.hxx	28 Sep 2005 11:27:12 -0000	1.5
+++ sc/inc/rangelst.hxx	1 Dec 2005 19:52:17 -0000	1.5.22.3
@@ -66,8 +66,10 @@ public:
 						Insert( pR, LIST_APPEND );
 					}
 	USHORT			Parse( const String&, ScDocument* = NULL,
-							USHORT nMask = SCA_VALID );
-	void 			Format( String&, USHORT nFlags = 0, ScDocument* = NULL ) const;
+						   USHORT nMask = SCA_VALID,
+						   ScAddress::Convention eConv = ScAddress::CONV_OOO );
+	void 			Format( String&, USHORT nFlags = 0, ScDocument* = NULL,
+							ScAddress::Convention eConv = ScAddress::CONV_OOO ) const;
 	void			Join( const ScRange&, BOOL bIsInList = FALSE );
 	BOOL 			UpdateReference( UpdateRefMode, ScDocument*,
 									const ScRange& rWhere,
Index: sc/inc/rangeutl.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/rangeutl.hxx,v
retrieving revision 1.6
retrieving revision 1.6.38.2
diff -u -w -p -r1.6 -r1.6.38.2
--- sc/inc/rangeutl.hxx	8 Sep 2005 17:50:35 -0000	1.6
+++ sc/inc/rangeutl.hxx	25 Nov 2005 04:44:30 -0000	1.6.38.2
@@ -71,7 +71,8 @@ public:
 	BOOL	MakeArea			( const String&		rAreaStr,
 								  ScArea&			rArea,
 								  ScDocument*		pDoc,
-								  SCTAB			nTab ) const;
+								  SCTAB			nTab,
+								  ScAddress::Details const & rDetails = ScAddress::detailsOOOa1 ) const;
 
 	void	CutPosString		( const String&		theAreaStr,
 								  String&			thePosStr ) const;
@@ -80,14 +81,16 @@ public:
 								  ScDocument*		pDoc,
 								  ScArea***			pppAreas 	= 0,
 								  USHORT*			pAreaCount	= 0,
-								  BOOL				bAcceptCellRef = FALSE ) const;
+								  BOOL				bAcceptCellRef = FALSE,
+								  ScAddress::Details const & rDetails = ScAddress::detailsOOOa1 ) const;
 
 	BOOL	IsAbsArea			( const String& rAreaStr,
 								  ScDocument*	pDoc,
 								  SCTAB		nTab,
 								  String*		pCompleteStr = 0,
 								  ScRefAddress*	pStartPos	 = 0,
-								  ScRefAddress*	pEndPos		 = 0 ) const;
+								  ScRefAddress*	pEndPos		 = 0,
+								  ScAddress::Details const & rDetails = ScAddress::detailsOOOa1 ) const;
 
 	BOOL	IsRefArea			( const String& rAreaStr,
 								  ScDocument*	pDoc,
@@ -100,14 +103,15 @@ public:
 								  ScDocument*	pDoc,
 								  SCTAB		nTab,
 								  String*		pCompleteStr = 0,
-								  ScRefAddress*	pPosTripel	 = 0 ) const;
+								  ScRefAddress*	pPosTripel	 = 0,
+								  ScAddress::Details const & rDetails = ScAddress::detailsOOOa1 ) const;
 
 	BOOL	MakeRangeFromName	( const String&	rName,
 									ScDocument*		pDoc,
 									SCTAB			nCurTab,
 									ScRange&		rRange,
-									RutlNameScope eScope=RUTL_NAMES
-								  ) const;
+								  RutlNameScope eScope=RUTL_NAMES,
+								  ScAddress::Details const & rDetails = ScAddress::detailsOOOa1 ) const;
 };
 
 //------------------------------------------------------------------------
@@ -128,7 +132,8 @@ public:
 	BOOL	operator==	( const ScArea& r ) const;
 	BOOL	operator!=	( const ScArea& r ) const  { return !( operator==(r) ); }
 	void	GetString	( String& rStr,
-						  BOOL bAbsolute = TRUE, ScDocument* pDoc = NULL ) const;
+						  BOOL bAbsolute = TRUE, ScDocument* pDoc = NULL,
+						  ScAddress::Details const & rDetails = ScAddress::detailsOOOa1 ) const;
 
 public:
 	SCTAB nTab;
Index: sc/inc/reffind.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/reffind.hxx,v
retrieving revision 1.2
retrieving revision 1.2.40.2
diff -u -w -p -r1.2 -r1.2.40.2
--- sc/inc/reffind.hxx	8 Sep 2005 17:51:35 -0000	1.2
+++ sc/inc/reffind.hxx	1 Dec 2005 19:52:18 -0000	1.2.40.2
@@ -39,6 +39,9 @@
 #ifndef _STRING_HXX //autogen
 #include <tools/string.hxx>
 #endif
+#ifndef SC_ADDRESS_HXX
+#include "address.hxx"
+#endif
 
 class ScDocument;
 
@@ -48,6 +51,7 @@ class ScRefFinder
 {
 private:
 	String		aFormula;
+	ScAddress::Convention eConv;
 	ScDocument*	pDoc;
 	xub_StrLen	nFound;
 	xub_StrLen	nSelStart;
@@ -56,7 +60,9 @@ private:
 public:
 	static const sal_Unicode __FAR_DATA pDelimiters[];
 
-	ScRefFinder( const String& rFormula, ScDocument* pDocument = NULL );
+	ScRefFinder( const String& rFormula,
+		     ScDocument* pDocument = NULL,
+		     ScAddress::Convention eConvP = ScAddress::CONV_OOO );
 	~ScRefFinder();
 
 	const String&	GetText() const		{ return aFormula; }
Index: sc/inc/sc.hrc
===================================================================
RCS file: /cvs/sc/sc/inc/sc.hrc,v
retrieving revision 1.49
retrieving revision 1.49.40.3
diff -u -w -p -r1.49 -r1.49.40.3
--- sc/inc/sc.hrc	8 Sep 2005 17:52:24 -0000	1.49
+++ sc/inc/sc.hrc	25 Nov 2005 04:44:30 -0000	1.49.40.3
@@ -800,6 +800,7 @@
 #define FID_TAB_APPEND			(TAB_POPUP_START+5)
 #define FID_TAB_INDEX			(TAB_POPUP_START+6)
 #define FID_TAB_RTL				(TAB_POPUP_START+7)
+#define FID_TAB_USE_R1C1		(TAB_POPUP_START+8)
 
 #define TAB_POPUP_END			(DATA_MENU_END + 20)
 
Index: sc/inc/scfuncs.hrc
===================================================================
RCS file: /cvs/sc/sc/inc/scfuncs.hrc,v
retrieving revision 1.9
retrieving revision 1.8.38.4
diff -u -w -p -r1.9 -r1.8.38.4
--- sc/inc/scfuncs.hrc	21 Oct 2005 11:52:25 -0000	1.9
+++ sc/inc/scfuncs.hrc	28 Nov 2005 16:00:48 -0000	1.8.38.4
@@ -297,6 +297,8 @@
 #define HID_FUNC_TABELLE			(HID_SC_FUNC_DUMMY+(ID_FUNCTION_GRP_TABLE*ID_FUNCTION_OFFSET)+18)
 #define HID_FUNC_TABELLEN			(HID_SC_FUNC_DUMMY+(ID_FUNCTION_GRP_TABLE*ID_FUNCTION_OFFSET)+19)
 #define HID_FUNC_HYPERLINK			(HID_SC_FUNC_DUMMY+(ID_FUNCTION_GRP_TABLE*ID_FUNCTION_OFFSET)+20)
+#define HID_FUNC_INDIREKT_XL		(HID_SC_FUNC_DUMMY+(ID_FUNCTION_GRP_TABLE*ID_FUNCTION_OFFSET)+21)
+#define HID_FUNC_ADRESSE_XL			(HID_SC_FUNC_DUMMY+(ID_FUNCTION_GRP_TABLE*ID_FUNCTION_OFFSET)+22)
 
 #define HID_FUNC_CODE				(HID_SC_FUNC_DUMMY+(ID_FUNCTION_GRP_TEXT*ID_FUNCTION_OFFSET)+1)
 #define HID_FUNC_DM					(HID_SC_FUNC_DUMMY+(ID_FUNCTION_GRP_TEXT*ID_FUNCTION_OFFSET)+2)
Index: sc/inc/table.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/table.hxx,v
retrieving revision 1.28
retrieving revision 1.28.40.2
diff -u -w -p -r1.28 -r1.28.40.2
--- sc/inc/table.hxx	8 Sep 2005 17:59:46 -0000	1.28
+++ sc/inc/table.hxx	1 Dec 2005 19:52:18 -0000	1.28.40.2
Index: sc/sdi/docsh.sdi
===================================================================
RCS file: /cvs/sc/sc/sdi/docsh.sdi,v
retrieving revision 1.8
retrieving revision 1.8.40.1
diff -u -w -p -r1.8 -r1.8.40.1
--- sc/sdi/docsh.sdi	8 Sep 2005 18:10:12 -0000	1.8
+++ sc/sdi/docsh.sdi	18 Nov 2005 15:50:04 -0000	1.8.40.1
@@ -79,6 +79,7 @@ interface TableSelection : Selection
 	FID_DELETE_TABLE	[ ExecMethod = ExecuteTable; StateMethod = GetStateTable; ]
 	FID_TAB_RENAME		[ ExecMethod = ExecuteTable; StateMethod = GetStateTable; ]
 	FID_TAB_RTL			[ ExecMethod = ExecuteTable; StateMethod = GetStateTable; ]
+	FID_TAB_USE_R1C1	[ ExecMethod = ExecuteTable; StateMethod = GetStateTable; ]
 
 	SID_TABLE_ACTIVATE	[ ExecMethod = Execute; ]
 }
Index: sc/sdi/scalc.sdi
===================================================================
RCS file: /cvs/sc/sc/sdi/scalc.sdi,v
retrieving revision 1.31
retrieving revision 1.31.40.1
diff -u -w -p -r1.31 -r1.31.40.1
--- sc/sdi/scalc.sdi	8 Sep 2005 18:14:17 -0000	1.31
+++ sc/sdi/scalc.sdi	18 Nov 2005 15:50:05 -0000	1.31.40.1
@@ -7599,4 +7599,31 @@ SfxBoolItem SheetRightToLeft FID_TAB_RTL
 	GroupId = GID_FORMAT;
 ]
 
+
+//--------------------------------------------------------------------------
+SfxBoolItem SheetUseR1C1	FID_TAB_USE_R1C1
+
+[
+	/* flags */
+	AutoUpdate	= FALSE,
+	Cachable = Cachable,
+	FastCall = FALSE,
+	HasCoreId = FALSE,
+	HasDialog = FALSE,
+	ReadOnlyDoc = TRUE,
+	Toggle = FALSE,
+	Container = FALSE,
+	RecordAbsolute = FALSE,
+	RecordPerSet;
+	Synchron;
+
+	Readonly = FALSE,
+
+	/* config */
+	AccelConfig = TRUE,
+	MenuConfig = TRUE,
+	StatusBarConfig = FALSE,
+	ToolBoxConfig = TRUE,
+	GroupId = GID_FORMAT;
+]
 
Index: sc/source/core/data/attrib.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/attrib.cxx,v
retrieving revision 1.11
retrieving revision 1.11.38.2
diff -u -w -p -r1.11 -r1.11.38.2
--- sc/source/core/data/attrib.cxx	8 Sep 2005 18:15:59 -0000	1.11
+++ sc/source/core/data/attrib.cxx	25 Nov 2005 04:44:31 -0000	1.11.38.2
@@ -523,6 +523,7 @@ SfxItemPresentation ScRangeItem::GetPres
 		case SFX_ITEM_PRESENTATION_NAMELESS:
 		{
 			String aText;
+			/* Always use OOo:A1 format */
 			aRange.Format( aText );
 			rText += aText;
 		}
Index: sc/source/core/data/cell.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/cell.cxx,v
retrieving revision 1.31
retrieving revision 1.30.34.4
diff -u -w -p -r1.31 -r1.30.34.4
--- sc/source/core/data/cell.cxx	21 Oct 2005 11:52:41 -0000	1.31
+++ sc/source/core/data/cell.cxx	1 Dec 2005 19:52:18 -0000	1.30.34.4
@@ -539,7 +539,9 @@ ScFormulaCell::ScFormulaCell() :
 }
 
 ScFormulaCell::ScFormulaCell( ScDocument* pDoc, const ScAddress& rPos,
-							  const String& rFormula, BYTE cMatInd ) :
+							  const String& rFormula,
+							  ScAddress::Convention eConv,
+							  BYTE cMatInd ) :
 	ScBaseCell( CELLTYPE_FORMULA ),
 	nErgValue( 0.0 ),
 	pCode( NULL ),
@@ -567,7 +569,7 @@ ScFormulaCell::ScFormulaCell( ScDocument
 	cMatrixFlag ( cMatInd ),
 	aPos( rPos )
 {
-	Compile( rFormula, TRUE );	// bNoListening, erledigt Insert
+	Compile( rFormula, TRUE, eConv );	// bNoListening, erledigt Insert
 }
 
 // Wird von den Importfiltern verwendet
@@ -622,6 +624,7 @@ ScFormulaCell::ScFormulaCell( ScDocument
 	SvtListener(),
 	aErgString( rScFormulaCell.aErgString ),
 	nErgValue( rScFormulaCell.nErgValue ),
+	nErgConv( rScFormulaCell.nErgConv ),
 	pDocument( pDoc ),
 	pPrevious(0),
 	pNext(0),
@@ -779,6 +782,7 @@ ScFormulaCell::ScFormulaCell( ScDocument
 		if( cFlags & 0x10 )
 		{
 			rStream.ReadByteString( aErgString, rStream.GetStreamCharSet() );
+			nErgConv = ScAddress::CONV_OOO;
 			bIsValue = FALSE;
 		}
 		pCode->Load( rStream, nVer, aPos );
@@ -914,7 +918,7 @@ ScBaseCell* ScFormulaCell::Clone( ScDocu
 	return pCell;
 }
 
-void ScFormulaCell::GetFormula( String& rFormula ) const
+void ScFormulaCell::GetFormula( String& rFormula, ScAddress::Convention eConv ) const
 {
 	if( pCode->GetError() && !pCode->GetLen() )
 	{
@@ -938,7 +942,7 @@ void ScFormulaCell::GetFormula( String& 
 			}
 			if (pCell && pCell->GetCellType() == CELLTYPE_FORMULA)
 			{
-				((ScFormulaCell*)pCell)->GetFormula(rFormula);
+				((ScFormulaCell*)pCell)->GetFormula(rFormula, eConv);
 				return;
 			}
 			else
@@ -980,7 +984,8 @@ void ScFormulaCell::GetResultDimensions(
 	}
 }
 
-void ScFormulaCell::Compile( const String& rFormula, BOOL bNoListening )
+void ScFormulaCell::Compile( const String& rFormula, BOOL bNoListening,
+							 ScAddress::Convention eConv )
 {
 	if ( pDocument->IsClipOrUndo() ) return;
 	BOOL bWasInFormulaTree = pDocument->IsInFormulaTree( this );
@@ -993,7 +998,7 @@ void ScFormulaCell::Compile( const Strin
 	ScCompiler aComp(pDocument, aPos);
 	if ( pDocument->IsImportingXML() )
 		aComp.SetCompileEnglish( TRUE );
-	pCode = aComp.CompileString( rFormula );
+	pCode = aComp.CompileString( rFormula, eConv );
 	if ( pCodeOld )
 		delete pCodeOld;
 	if( !pCode->GetError() )
@@ -1023,7 +1028,7 @@ void ScFormulaCell::CompileTokenArray( B
 {
 	// Noch nicht compiliert?
 	if( !pCode->GetLen() && aErgString.Len() )
-		Compile( aErgString );
+		Compile( aErgString, nErgConv );
 	else if( bCompile && !pDocument->IsClipOrUndo() && !pCode->GetError() )
 	{
 		// RPN-Laenge kann sich aendern
@@ -1118,7 +1123,7 @@ void ScFormulaCell::CalcAfterLoad()
 	// aber kein TokenArray
 	if( !pCode->GetLen() && aErgString.Len() )
 	{
-		Compile( aErgString, TRUE );
+		Compile( aErgString, TRUE, nErgConv );
 		aErgString.Erase();
 		bDirty = TRUE;
 		bNewCompiled = TRUE;
Index: sc/source/core/data/cell2.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/cell2.cxx,v
retrieving revision 1.24
retrieving revision 1.24.40.1
diff -u -w -p -r1.24 -r1.24.40.1
--- sc/source/core/data/cell2.cxx	8 Sep 2005 18:16:49 -0000	1.24
+++ sc/source/core/data/cell2.cxx	9 Nov 2005 04:10:01 -0000	1.24.40.1
@@ -243,7 +243,8 @@ void ScEditCell::SetTextObject( const Ed
 
 //---------------------------------------------------------------------
 
-void ScFormulaCell::GetEnglishFormula( String& rFormula, BOOL bCompileXML ) const
+void ScFormulaCell::GetEnglishFormula( String& rFormula, BOOL bCompileXML,
+									   ScAddress::Convention conv ) const
 {
     //! mit GetFormula zusammenfassen !!!
 
@@ -268,7 +269,7 @@ void ScFormulaCell::GetEnglishFormula( S
                 pCell = NULL;
             if (pCell && pCell->GetCellType() == CELLTYPE_FORMULA)
             {
-                ((ScFormulaCell*)pCell)->GetEnglishFormula(rFormula, bCompileXML);
+                ((ScFormulaCell*)pCell)->GetEnglishFormula(rFormula, bCompileXML, conv);
                 return;
             }
             else
@@ -300,7 +301,8 @@ void ScFormulaCell::GetEnglishFormula( S
     }
 }
 
-void ScFormulaCell::GetEnglishFormula( rtl::OUStringBuffer& rBuffer, BOOL bCompileXML ) const
+void ScFormulaCell::GetEnglishFormula( rtl::OUStringBuffer& rBuffer, BOOL bCompileXML,
+									   ScAddress::Convention conv ) const
 {
     //! mit GetFormula zusammenfassen !!!
 
@@ -325,7 +327,7 @@ void ScFormulaCell::GetEnglishFormula( r
                 pCell = NULL;
             if (pCell && pCell->GetCellType() == CELLTYPE_FORMULA)
             {
-                ((ScFormulaCell*)pCell)->GetEnglishFormula(rBuffer, bCompileXML);
+				((ScFormulaCell*)pCell)->GetEnglishFormula(rBuffer, bCompileXML, conv);
                 return;
             }
             else
@@ -1380,7 +1382,7 @@ void ScFormulaCell::CompileDBFormula( BO
         if ( bRecompile )
         {
             String aFormula;
-            GetFormula( aFormula );
+            GetFormula( aFormula, ScAddress::CONV_OOO);
             if ( GetMatrixFlag() != MM_NONE && aFormula.Len() )
             {
                 if ( aFormula.GetChar( aFormula.Len()-1 ) == '}' )
@@ -1392,6 +1394,7 @@ void ScFormulaCell::CompileDBFormula( BO
             pDocument->RemoveFromFormulaTree( this );
             pCode->Clear();
             aErgString = aFormula;
+			nErgConv = ScAddress::CONV_OOO;
         }
     }
     else if ( !pCode->GetLen() && aErgString.Len() )
@@ -1427,7 +1430,7 @@ void ScFormulaCell::CompileNameFormula( 
         if ( bRecompile )
         {
             String aFormula;
-            GetFormula( aFormula );
+            GetFormula( aFormula, ScAddress::CONV_OOO);
             if ( GetMatrixFlag() != MM_NONE && aFormula.Len() )
             {
                 if ( aFormula.GetChar( aFormula.Len()-1 ) == '}' )
@@ -1439,6 +1442,7 @@ void ScFormulaCell::CompileNameFormula( 
             pDocument->RemoveFromFormulaTree( this );
             pCode->Clear();
             aErgString = aFormula;
+			nErgConv = ScAddress::CONV_OOO;
         }
     }
     else if ( !pCode->GetLen() && aErgString.Len() )
Index: sc/source/core/data/column3.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/column3.cxx,v
retrieving revision 1.18
retrieving revision 1.18.22.1
diff -u -w -p -r1.18 -r1.18.22.1
--- sc/source/core/data/column3.cxx	28 Sep 2005 11:29:59 -0000	1.18
+++ sc/source/core/data/column3.cxx	9 Nov 2005 04:10:02 -0000	1.18.22.1
@@ -1229,7 +1229,8 @@ void ScColumn::StartListeningInArea( SCR
 
 
 //	TRUE = Zahlformat gesetzt
-BOOL ScColumn::SetString( SCROW nRow, SCTAB nTab, const String& rString )
+BOOL ScColumn::SetString( SCROW nRow, SCTAB nTab, const String& rString,
+						  ScAddress::Convention conv )
 {
 	BOOL bNumFmtSet = FALSE;
 	if (VALIDROW(nRow))
@@ -1266,7 +1267,7 @@ BOOL ScColumn::SetString( SCROW nRow, SC
 					pNewCell = new ScStringCell( rString );
 				else											// =Formel
 					pNewCell = new ScFormulaCell( pDocument,
-						ScAddress( nCol, nRow, nTab ), rString, 0 );
+						ScAddress( nCol, nRow, nTab ), rString, conv, 0 );
 			}
 			else if ( cFirstChar == '\'')						// 'Text
 				pNewCell = new ScStringCell( rString.Copy(1) );
Index: sc/source/core/data/conditio.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/conditio.cxx,v
retrieving revision 1.17
retrieving revision 1.17.40.2
diff -u -w -p -r1.17 -r1.17.40.2
--- sc/source/core/data/conditio.cxx	8 Sep 2005 18:18:13 -0000	1.17
+++ sc/source/core/data/conditio.cxx	25 Nov 2005 04:44:32 -0000	1.17.40.2
@@ -537,6 +537,8 @@ void ScConditionEntry::CompileXML()
     if ( aSrcString.Len() )
     {
         ScAddress aNew;
+		/* XML is always in OOo:A1 format, although R1C1 would be more amenable
+		 * to compression */
         if ( aNew.Parse( aSrcString, pDoc ) & SCA_VALID )
             aSrcPos = aNew;
         // if the position is invalid, there isn't much we can do at this time
Index: sc/source/core/data/documen2.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/documen2.cxx,v
retrieving revision 1.52
retrieving revision 1.52.22.1
diff -u -w -p -r1.52 -r1.52.22.1
--- sc/source/core/data/documen2.cxx	28 Sep 2005 11:30:23 -0000	1.52
+++ sc/source/core/data/documen2.cxx	1 Dec 2005 19:52:19 -0000	1.52.22.1
@@ -367,6 +367,7 @@ ScDocument::ScDocument( ScDocumentMode	e
         nInDdeLinkUpdate( 0 ),
         bInUnoBroadcast( FALSE ),
         bInUnoListenerCall( FALSE ),
+        eAddrConv( ScAddress::CONV_OOO ),
         bStyleSheetUsageInvalid( TRUE )
 {
 	eSrcSet = gsl_getSystemTextEncoding();
Index: sc/source/core/data/documen3.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/documen3.cxx,v
retrieving revision 1.29
retrieving revision 1.29.22.3
diff -u -w -p -r1.29 -r1.29.22.3
--- sc/source/core/data/documen3.cxx	28 Sep 2005 11:30:48 -0000	1.29
+++ sc/source/core/data/documen3.cxx	1 Dec 2005 19:52:19 -0000	1.29.22.3
@@ -383,6 +383,16 @@ BOOL ScDocument::IsLinked( SCTAB nTab ) 
 	if (ValidTab(nTab) && pTab[nTab])
 		return pTab[nTab]->IsLinked();
 	return FALSE;
+}
+
+ScAddress::Convention ScDocument::GetAddressConvention() const
+{
+	return eAddrConv;
+}
+
+void ScDocument::SetAddressConvention( ScAddress::Convention eConv )
+{
+	eAddrConv = eConv;
 }
 
 BOOL ScDocument::GetLinkMode( SCTAB nTab ) const
Index: sc/source/core/data/documen4.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/documen4.cxx,v
retrieving revision 1.14
retrieving revision 1.14.40.2
diff -u -w -p -r1.14 -r1.14.40.2
--- sc/source/core/data/documen4.cxx	8 Sep 2005 18:20:09 -0000	1.14
+++ sc/source/core/data/documen4.cxx	25 Nov 2005 04:44:33 -0000	1.14.40.2
@@ -153,7 +153,7 @@ void ScDocument::InsertMatrixFormula(SCC
 	if (pArr)
 		pCell = new ScFormulaCell( this, aPos, pArr, MM_FORMULA );
 	else
-		pCell = new ScFormulaCell( this, aPos, rFormula, MM_FORMULA );
+		pCell = new ScFormulaCell( this, aPos, rFormula, ScAddress::CONV_UNSPECIFIED, MM_FORMULA );
 	pCell->SetMatColsRows( nCol2 - nCol1 + 1, nRow2 - nRow1 + 1 );
 	for (i = 0; i <= MAXTAB; i++)
 	{
@@ -284,7 +284,7 @@ void ScDocument::InsertTableOp(const ScT
 	}
     aForString += ')';
 
-    ScFormulaCell aRefCell( this, ScAddress( nCol1, nRow1, nTab1 ), aForString, 0l );
+    ScFormulaCell aRefCell( this, ScAddress( nCol1, nRow1, nTab1 ), aForString, ScAddress::CONV_OOO, 0l );
     for( j = nCol1; j <= nCol2; j++ )
         for( k = nRow1; k <= nRow2; k++ )
             for (i = 0; i <= MAXTAB; i++)
Index: sc/source/core/data/table1.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/table1.cxx,v
retrieving revision 1.14
retrieving revision 1.14.22.3
diff -u -w -p -r1.14 -r1.14.22.3
--- sc/source/core/data/table1.cxx	28 Sep 2005 11:32:48 -0000	1.14
+++ sc/source/core/data/table1.cxx	1 Dec 2005 19:52:20 -0000	1.14.22.3
Index: sc/source/core/data/table6.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/table6.cxx,v
retrieving revision 1.9
retrieving revision 1.9.40.1
diff -u -w -p -r1.9 -r1.9.40.1
--- sc/source/core/data/table6.cxx	8 Sep 2005 18:31:35 -0000	1.9
+++ sc/source/core/data/table6.cxx	9 Nov 2005 04:10:04 -0000	1.9.40.1
@@ -119,7 +119,7 @@ BOOL ScTable::SearchCell(const SvxSearch
 			case SVX_SEARCHIN_FORMULA:
 			{
 				if ( eCellType == CELLTYPE_FORMULA )
-					((ScFormulaCell*)pCell)->GetFormula( aString );
+					((ScFormulaCell*)pCell)->GetFormula( aString, ScAddress::CONV_OOO );
 				else if ( eCellType == CELLTYPE_EDIT )
 					bMultiLine = lcl_GetTextWithBreaks(
 						*(const ScEditCell*)pCell, pDocument, aString );
@@ -282,7 +282,7 @@ BOOL ScTable::SearchCell(const SvxSearch
 				}
 				ScAddress aAdr( nCol, nRow, nTab );
 				ScFormulaCell* pFCell = new ScFormulaCell( pDocument, aAdr,
-					aString, cMatrixFlag );
+					aString, ScAddress::CONV_OOO, cMatrixFlag );
                 SCCOL nMatCols;
                 SCROW nMatRows;
 				((ScFormulaCell*)pCell)->GetMatColsRows( nMatCols, nMatRows );
Index: sc/source/core/data/validat.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/validat.cxx,v
retrieving revision 1.15
retrieving revision 1.15.22.2
diff -u -w -p -r1.15 -r1.15.22.2
--- sc/source/core/data/validat.cxx	28 Sep 2005 11:34:50 -0000	1.15
+++ sc/source/core/data/validat.cxx	25 Nov 2005 04:44:34 -0000	1.15.22.2
Index: sc/source/core/inc/interpre.hxx
===================================================================
RCS file: /cvs/sc/sc/source/core/inc/interpre.hxx,v
retrieving revision 1.24
retrieving revision 1.23.20.2
diff -u -w -p -r1.24 -r1.23.20.2
--- sc/source/core/inc/interpre.hxx	21 Oct 2005 11:53:21 -0000	1.24
+++ sc/source/core/inc/interpre.hxx	28 Nov 2005 16:13:29 -0000	1.23.20.2
@@ -424,7 +424,9 @@ void ScDBStdDevP();
 void ScDBVar();
 void ScDBVarP();
 void ScIndirect();
+void ScIndirectXL();
 void ScAdress();
+void ScAdressXL();
 void ScOffset();
 void ScIndex();
 void ScMultiArea();
Index: sc/source/core/src/compiler.src
===================================================================
RCS file: /cvs/sc/sc/source/core/src/compiler.src,v
retrieving revision 1.48
retrieving revision 1.47.22.2
diff -u -w -p -r1.48 -r1.47.22.2
--- sc/source/core/src/compiler.src	21 Oct 2005 11:53:37 -0000	1.48
+++ sc/source/core/src/compiler.src	28 Nov 2005 16:14:14 -0000	1.47.22.2
@@ -1092,12 +1092,24 @@ Resource RID_SC_FUNCTION_NAMES
 		Text [ en-US ] = "INDIRECT" ;
 		Text [ x-comment ] = " ";
 	};
+	String SC_OPCODE_INDIRECT_XL
+	{
+		Text [ de ] = "INDIREKT_XL" ;
+		Text [ en-US ] = "INDIRECT_XL" ;
+		Text [ x-comment ] = " ";
+	};
 	String SC_OPCODE_ADRESS
 	{
 		Text [ de ] = "ADRESSE" ;
 		Text [ en-US ] = "ADDRESS" ;
 		Text [ x-comment ] = " ";
 	};
+	String SC_OPCODE_ADRESS_XL
+	{
+		Text [ de ] = "ADRESSE_XL" ;
+		Text [ en-US ] = "ADDRESS_XL" ;
+		Text [ x-comment ] = " ";
+	};
 	String SC_OPCODE_MATCH
 	{
 		Text [ de ] = "VERGLEICH" ;
@@ -1869,7 +1881,9 @@ Resource RID_SC_FUNCTION_NAMES_ENGLISH
 	String SC_OPCODE_DB_VAR { Text = "DVAR" ; };
 	String SC_OPCODE_DB_VAR_P { Text = "DVARP" ; };
 	String SC_OPCODE_INDIRECT { Text = "INDIRECT" ; };
+	String SC_OPCODE_INDIRECT_XL { Text = "INDIRECT_XL" ; };
 	String SC_OPCODE_ADRESS { Text = "ADDRESS" ; };
+	String SC_OPCODE_ADRESS_XL { Text = "ADDRESS_XL" ; };
 	String SC_OPCODE_MATCH { Text = "MATCH" ; };
 	String SC_OPCODE_COUNT_EMPTY_CELLS { Text = "COUNTBLANK" ; };
 	String SC_OPCODE_COUNT_IF { Text = "COUNTIF" ; };
Index: sc/source/core/tool/address.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/address.cxx,v
retrieving revision 1.4
retrieving revision 1.4.40.2
diff -u -w -p -r1.4 -r1.4.40.2
--- sc/source/core/tool/address.cxx	8 Sep 2005 18:38:18 -0000	1.4
+++ sc/source/core/tool/address.cxx	1 Dec 2005 19:52:20 -0000	1.4.40.2
@@ -42,9 +42,234 @@
 
 #include "globstr.hrc"
 
+////////////////////////////////////////////////////////////////////////////
+const ScAddress::Details ScAddress::detailsOOOa1( CONV_OOO, 0, 0 );
 
-USHORT lcl_ConvertSingleRef( BOOL& bExternal, const sal_Unicode* p,
-            ScDocument* pDoc, ScAddress& rAddr )
+ScAddress::Details::Details ( const ScDocument* pDoc,
+							  const ScAddress & rAddr ) :
+	eConv( pDoc->GetAddressConvention() ),
+	nRow( rAddr.Row() ),
+	nCol( rAddr.Col() )
+{
+}
+
+void ScAddress::Details::SetPos ( const ScDocument* pDoc,
+								  const ScAddress & rAddr )
+{
+	nRow  = rAddr.Row();
+	nCol  = rAddr.Col();
+	eConv = pDoc->GetAddressConvention();
+}
+
+////////////////////////////////////////////////////////////////////////////
+
+static long int sal_Unicode_strtol ( const sal_Unicode*  p,
+									 const sal_Unicode** pEnd )
+{
+	long int accum = 0, prev = 0;
+	bool is_neg = false;
+
+	if( *p == '-' )
+	{
+		is_neg = true;
+		p++;
+	}
+	else if( *p == '+' )
+		p++;
+
+	while (CharClass::isAsciiDigit( *p ))
+	{
+		accum = accum * 10 + *p - '0';
+		if (accum < prev)
+		{
+			*pEnd = NULL;
+			return 0;
+		}
+		prev = accum;
+		p++;
+	}
+
+	*pEnd = p;
+	return is_neg ? -accum : accum;
+}
+
+static inline const sal_Unicode*
+r1c1_get_col( const sal_Unicode* p,
+			  const ScAddress::Details& rDetails,
+			  ScAddress* pAddr, USHORT* nFlags )
+{
+	const sal_Unicode *pEnd;
+	long int n;
+	bool isRelative;
+
+	if( p[0] == '\0' )
+		return NULL;
+
+	p++;
+	if( (isRelative = (*p == '[')) )
+		p++;
+	n = sal_Unicode_strtol( p, &pEnd );
+	if( NULL == pEnd )
+		return NULL;
+
+	if( p == pEnd )	// C is a relative ref with offset 0
+	{
+		if( isRelative )
+			return NULL;
+		n = rDetails.nCol;
+	}
+	else if( isRelative )
+	{
+		if( *pEnd != ']' )
+			return NULL;
+		n += rDetails.nCol;
+		pEnd++;
+	}
+	else
+	{
+		*nFlags |= SCA_COL_ABSOLUTE;
+		n--;
+	}
+
+	if( n < 0 || n >= MAXCOLCOUNT )
+		return NULL;
+	pAddr->SetCol( static_cast<SCROW>( n ) );
+	*nFlags |= SCA_VALID_COL;
+
+	return pEnd;
+}
+static inline const sal_Unicode*
+r1c1_get_row( const sal_Unicode* p,
+			  const ScAddress::Details& rDetails,
+			  ScAddress* pAddr, USHORT* nFlags )
+{
+	const sal_Unicode *pEnd;
+	long int n;
+	bool isRelative;
+
+	if( p[0] == '\0' )
+		return NULL;
+
+	p++;
+	if( (isRelative = (*p == '[')) )
+		p++;
+	n = sal_Unicode_strtol( p, &pEnd );
+	if( NULL == pEnd )
+		return NULL;
+
+	if( p == pEnd )	// R is a relative ref with offset 0
+	{
+		if( isRelative )
+			return NULL;
+		n = rDetails.nRow;
+	}
+	else if( isRelative )
+	{
+		if( *pEnd != ']' )
+			return NULL;
+		n += rDetails.nRow;
+		pEnd++;
+	}
+	else
+	{
+		*nFlags |= SCA_ROW_ABSOLUTE;
+		n--;
+	}
+
+	if( n < 0 || n >= MAXROWCOUNT )
+		return NULL;
+	pAddr->SetRow( static_cast<SCROW>( n ) );
+	*nFlags |= SCA_VALID_ROW;
+
+	return pEnd;
+}
+
+#include <iostream>
+
+static USHORT
+lcl_ScRange_ParseR1C1( ScRange& r,
+					   const sal_Unicode* p,
+					   const ScAddress::Details& rDetails,
+					   BOOL bOnlyAcceptSingle )
+{
+	const sal_Unicode* pTmp;
+	USHORT nFlags = SCA_VALID | SCA_VALID_TAB, nFlags2 = SCA_VALID_TAB2;
+
+	{
+		ByteString	aStr(p, RTL_TEXTENCODING_UTF8);
+		aStr.Append(static_cast< char >(0));
+		std::cerr << "parse \'" << aStr.GetBuffer() << '\'' << std::endl;
+	}
+
+	if( *p == 'R' || *p == 'r' )
+	{
+		if( NULL == (p = r1c1_get_row( p, rDetails, &r.aStart, &nFlags )) )
+			goto failed;
+
+		if( *p != 'C' && *p != 'c' )	/* full row R# */
+		{
+			if (p[0] != ':' || (p[1] != 'R' && p[1] != 'r') ||
+				NULL == (pTmp = r1c1_get_row( p+1, rDetails, &r.aEnd, &nFlags2 )))
+			{	/* fallback to just the initial R */
+				nFlags |= (nFlags << 4);
+				r.aEnd.SetRow( r.aStart.Row() );
+			} else
+				nFlags |= (nFlags2 << 4);
+
+			nFlags |= 
+				SCA_VALID_COL | SCA_VALID_COL2 |
+				SCA_COL_ABSOLUTE | SCA_COL2_ABSOLUTE;
+			r.aStart.SetCol( 0 );
+			r.aEnd.SetCol( MAXCOLCOUNT - 1 );
+
+			return bOnlyAcceptSingle ? 0 : nFlags;
+		}
+		else if (NULL == (p = r1c1_get_col( p, rDetails, &r.aStart, &nFlags )))
+			goto failed;
+
+		if (p[0] != ':' ||
+			(p[1] != 'R' && p[1] != 'r') ||
+		    NULL == (pTmp = r1c1_get_row( p+1, rDetails, &r.aEnd, &nFlags2 )) ||
+		    (*pTmp != 'C' && *pTmp != 'c') ||
+		    NULL == (pTmp = r1c1_get_col( pTmp, rDetails, &r.aEnd, &nFlags2 )))
+		{
+			return bOnlyAcceptSingle ? nFlags : 0;
+		}
+
+		nFlags |= (nFlags2 << 4);
+		return bOnlyAcceptSingle ? 0 : nFlags;
+	}
+	else if( *p == 'C' || *p == 'c' )	/* full col C# */
+	{
+		if (NULL == (p = r1c1_get_col( p, rDetails, &r.aStart, &nFlags )))
+			goto failed;
+
+		if (p[0] != ':' || (p[1] != 'C' && p[1] != 'c') ||
+			NULL == (pTmp = r1c1_get_col( p, rDetails, &r.aEnd, &nFlags2 )))
+		{ /* fallback to just the initial C */
+			nFlags |= (nFlags << 4);
+			r.aEnd.SetCol( r.aStart.Col() );
+		}
+		else
+			nFlags |= (nFlags2 << 4);
+
+		nFlags |= 
+			SCA_VALID_ROW | SCA_VALID_ROW2 |
+			SCA_ROW_ABSOLUTE | SCA_ROW2_ABSOLUTE;
+		r.aStart.SetRow( 0 );
+		r.aEnd.SetRow( MAXROWCOUNT - 1 );
+
+		return bOnlyAcceptSingle ? 0 : nFlags;
+	}
+
+failed :
+	return 0;
+}
+
+static USHORT
+lcl_ConvertSingleRef( BOOL& bExternal, const sal_Unicode* p,
+					  ScDocument* pDoc, ScAddress& rAddr,
+					  const ScAddress::Details& rDetails )
 {
     if ( !*p )
         return 0;
@@ -55,6 +280,20 @@ USHORT lcl_ConvertSingleRef( BOOL& bExte
     BOOL    bExtDoc = FALSE;
     BOOL    bNeedExtTab = FALSE;
 
+	switch (rDetails.eConv) {
+	default :
+	case ScAddress::CONV_OOO:
+	case ScAddress::CONV_XL_A1:
+		break;
+	case ScAddress::CONV_XL_R1C1:
+		{
+			ScRange r;
+			USHORT nFlags = lcl_ScRange_ParseR1C1( r, p, rDetails, TRUE );
+			rAddr = r.aStart;
+			return nFlags;
+		}
+	}
+
     if ( *p == '\'' && ScGlobal::UnicodeStrChr( p, SC_COMPILER_FILE_TAB_SEP ) )
     {
         BOOL bQuote = TRUE;         // Dokumentenname ist immer quoted
@@ -217,11 +456,12 @@ USHORT lcl_ConvertSingleRef( BOOL& bExte
 
 
 bool ConvertSingleRef( ScDocument* pDoc, const String& rRefString,
-            SCTAB nDefTab, ScRefAddress& rRefAddress )
+					   SCTAB nDefTab, ScRefAddress& rRefAddress,
+					   const ScAddress::Details& rDetails )
 {
     BOOL bExternal = FALSE;
     ScAddress aAddr( 0, 0, nDefTab );
-    USHORT nRes = lcl_ConvertSingleRef( bExternal, rRefString.GetBuffer(), pDoc, aAddr );
+    USHORT nRes = lcl_ConvertSingleRef( bExternal, rRefString.GetBuffer(), pDoc, aAddr, rDetails );
     if( nRes & SCA_VALID )
     {
         rRefAddress.Set( aAddr,
@@ -236,7 +476,8 @@ bool ConvertSingleRef( ScDocument* pDoc,
 
 
 bool ConvertDoubleRef( ScDocument* pDoc, const String& rRefString, SCTAB nDefTab,
-            ScRefAddress& rStartRefAddress, ScRefAddress& rEndRefAddress )
+					   ScRefAddress& rStartRefAddress, ScRefAddress& rEndRefAddress,
+					   const ScAddress::Details& rDetails )
 {
     BOOL bRet = FALSE;
     xub_StrLen nPos = rRefString.Search(':');
@@ -245,20 +486,21 @@ bool ConvertDoubleRef( ScDocument* pDoc,
         String aTmp( rRefString );
         sal_Unicode* p = aTmp.GetBufferAccess();
         p[ nPos ] = 0;
-        if ( ConvertSingleRef( pDoc, p, nDefTab, rStartRefAddress ) )
+        if ( ConvertSingleRef( pDoc, p, nDefTab, rStartRefAddress, rDetails ) )
         {
             nDefTab = rStartRefAddress.Tab();
-            bRet = ConvertSingleRef( pDoc, p + nPos + 1, nDefTab, rEndRefAddress );
+            bRet = ConvertSingleRef( pDoc, p + nPos + 1, nDefTab, rEndRefAddress, rDetails );
         }
     }
     return bRet;
 }
 
 
-USHORT ScAddress::Parse( const String& r, ScDocument* pDoc )
+USHORT ScAddress::Parse( const String& r, ScDocument* pDoc,
+						 const Details& rDetails)
 {
     BOOL bExternal = FALSE;
-    return lcl_ConvertSingleRef( bExternal, r.GetBuffer(), pDoc, *this );
+    return lcl_ConvertSingleRef( bExternal, r.GetBuffer(), pDoc, *this, rDetails );
 }
 
 
@@ -327,8 +569,21 @@ void ScRange::ExtendTo( const ScRange& r
 }
 
 
-USHORT ScRange::Parse( const String& r, ScDocument* pDoc )
+USHORT ScRange::Parse( const String& r, ScDocument* pDoc,
+					   const ScAddress::Details& rDetails )
 {
+	switch (rDetails.eConv) {
+	default :
+	case ScAddress::CONV_OOO:
+	case ScAddress::CONV_XL_A1:
+		break;
+	case ScAddress::CONV_XL_R1C1:
+		{
+			String aTmp( r );
+			return lcl_ScRange_ParseR1C1( *this, aTmp.GetBufferAccess(), rDetails, FALSE );
+		}
+	}
+
     USHORT nRes1 = 0, nRes2 = 0;
     xub_StrLen nTmp = 0;
     xub_StrLen nPos = STRING_NOTFOUND;
@@ -340,10 +595,10 @@ USHORT ScRange::Parse( const String& r, 
         sal_Unicode* p = aTmp.GetBufferAccess();
         p[ nPos ] = 0;
         BOOL bExternal = FALSE;
-        if( nRes1 = lcl_ConvertSingleRef( bExternal, p, pDoc, aStart ) )
+        if( nRes1 = lcl_ConvertSingleRef( bExternal, p, pDoc, aStart, rDetails ) )
         {
             aEnd = aStart;  // die Tab _muss_ gleich sein, so ist`s weniger Code
-            if ( nRes2 = lcl_ConvertSingleRef( bExternal, p + nPos+ 1, pDoc, aEnd ) )
+            if ( nRes2 = lcl_ConvertSingleRef( bExternal, p + nPos+ 1, pDoc, aEnd, rDetails ) )
             {
                 if ( bExternal && aStart.Tab() != aEnd.Tab() )
                     nRes2 &= ~SCA_VALID_TAB;    // #REF!
@@ -398,23 +653,59 @@ USHORT ScRange::Parse( const String& r, 
 }
 
 
-USHORT ScRange::ParseAny( const String& r, ScDocument* pDoc )
+USHORT ScRange::ParseAny( const String& r, ScDocument* pDoc,
+						  const ScAddress::Details& rDetails )
 {
-    USHORT nRet = Parse( r, pDoc );
+    USHORT nRet = Parse( r, pDoc, rDetails );
     const USHORT nValid = SCA_VALID | SCA_VALID_COL2 | SCA_VALID_ROW2 |
         SCA_VALID_TAB2;
     if ( (nRet & nValid) != nValid )
     {
         ScAddress aAdr;
-        nRet = aAdr.Parse( r, pDoc );
+        nRet = aAdr.Parse( r, pDoc, rDetails );
         if ( nRet & SCA_VALID )
             aStart = aEnd = aAdr;
     }
     return nRet;
 }
 
+static void
+r1c1_append_c ( String &r, int num, bool is_abs,
+				const ScAddress::Details& rDetails )
+{
+	r += 'C';
+	if (is_abs)
+		r += String::CreateFromInt32( num + 1 );
+	else
+	{
+		num -= rDetails.nCol;
+		if (num != 0) {
+			r += '[';
+			r += String::CreateFromInt32( num );
+			r += ']';
+		}
+	}
+}
+static void
+r1c1_append_r ( String &r, int num, bool is_abs,
+				const ScAddress::Details& rDetails )
+{
+	r += 'R';
+	if (is_abs)
+		r += String::CreateFromInt32( num + 1 );
+	else
+	{
+		num -= rDetails.nRow;
+		if (num != 0) {
+			r += '[';
+			r += String::CreateFromInt32( num );
+			r += ']';
+		}
+	}
+}
 
-void ScAddress::Format( String& r, USHORT nFlags, ScDocument* pDoc ) const
+void ScAddress::Format( String& r, USHORT nFlags, ScDocument* pDoc,
+						const Details& rDetails) const
 {
     r.Erase();
     if( nFlags & SCA_VALID )
@@ -447,14 +738,23 @@ void ScAddress::Format( String& r, USHOR
                 }
             }
             r += aDoc;
+            ScCompiler::CheckTabQuotes( aTabName );
 
+			if (rDetails.eConv != CONV_OOO) {
+				r += aTabName;
+				r += '!';
+			} else {
             if( nFlags & SCA_TAB_ABSOLUTE )
                 r += '$';
-            ScCompiler::CheckTabQuotes( aTabName );
             r += aTabName;
             r += '.';
         }
     }
+    }
+	switch (rDetails.eConv) {
+	default :
+	case CONV_OOO:
+	case CONV_XL_A1:
     if( nFlags & SCA_VALID_COL )
     {
         if( nFlags & SCA_COL_ABSOLUTE )
@@ -467,19 +767,34 @@ void ScAddress::Format( String& r, USHOR
             r += '$';
         r += String::CreateFromInt32( Row()+1 );
     }
+		break;
+
+	case CONV_XL_R1C1:
+		if( nFlags & SCA_VALID_ROW )
+			r1c1_append_r ( r, nRow, nFlags & SCA_ROW_ABSOLUTE, rDetails );
+		if( nFlags & SCA_VALID_COL )
+			r1c1_append_c ( r, nCol, nFlags & SCA_COL_ABSOLUTE, rDetails );
+		break;
+	}
 }
 
 
-void ScRange::Format( String& r, USHORT nFlags, ScDocument* pDoc ) const
+void ScRange::Format( String& r, USHORT nFlags, ScDocument* pDoc,
+					  const ScAddress::Details& rDetails) const
 {
     if( !( nFlags & SCA_VALID ) )
-        r = ScGlobal::GetRscString( STR_NOREF_STR );
-    else
     {
+        r = ScGlobal::GetRscString( STR_NOREF_STR );
+		return;
+	}
+
+	switch (rDetails.eConv) {
+	default :
+	case ScAddress::CONV_OOO: {
         BOOL bOneTab = (aStart.Tab() == aEnd.Tab());
         if ( !bOneTab )
             nFlags |= SCA_TAB_3D;
-        aStart.Format( r, nFlags, pDoc );
+		aStart.Format( r, nFlags, pDoc, rDetails );
         if( aStart != aEnd )
         {
             String aName;
@@ -488,13 +803,66 @@ void ScRange::Format( String& r, USHORT 
                 pDoc = NULL;
             else
                 nFlags |= SCA_TAB_3D;
-            aEnd.Format( aName, nFlags, pDoc );
+			aEnd.Format( aName, nFlags, pDoc, rDetails );
             r += ':';
             r += aName;
         }
     }
+	break;
+
+	case ScAddress::CONV_XL_A1: {
+		BOOL bOneTab = (aStart.Tab() == aEnd.Tab());
+
+		pDoc = NULL;
+		aStart.Format( r, nFlags, pDoc, rDetails );
+		if( aStart != aEnd )
+		{
+			String aName;
+			nFlags = ( nFlags & SCA_VALID ) | ( ( nFlags >> 4 ) & 0x070F );
+			aEnd.Format( aName, nFlags, pDoc, rDetails );
+			r += ':';
+			r += aName;
+		}
 }
+	break;
 
+	case ScAddress::CONV_XL_R1C1:
+#define	absrel_differ(nFlags, mask)	(((nFlags) & (mask)) ^ (((nFlags) >> 4) & (mask)))
+		/* be sure to use else if so that a1:iv65535 does not vanish */
+		if( aStart.Col() == 0 && aEnd.Col() >= MAXCOLCOUNT-1 )
+		{
+			r1c1_append_r( r, aStart.Row(), nFlags & SCA_ROW_ABSOLUTE, rDetails );
+			if( aStart.Row() != aEnd.Row() ||
+				absrel_differ( nFlags, SCA_ROW_ABSOLUTE )) {
+				r += ':';
+				r1c1_append_r( r, aEnd.Row(), nFlags & SCA_ROW2_ABSOLUTE, rDetails );
+			}
+		}
+		else if( aStart.Row() == 0 && aEnd.Row() >= MAXROWCOUNT-1 )
+		{
+			r1c1_append_c( r, aStart.Col(), nFlags & SCA_COL_ABSOLUTE, rDetails );
+			if( aStart.Col() != aEnd.Col() ||
+				absrel_differ( nFlags, SCA_COL_ABSOLUTE )) {
+				r += ':';
+				r1c1_append_c( r, aEnd.Col(), nFlags & SCA_COL2_ABSOLUTE, rDetails );
+			}
+		}
+		else
+		{
+			r1c1_append_r( r, aStart.Row(), nFlags & SCA_ROW_ABSOLUTE, rDetails );
+			r1c1_append_c( r, aStart.Col(), nFlags & SCA_COL_ABSOLUTE, rDetails );
+			if( aStart.Col() != aEnd.Col() ||
+				absrel_differ( nFlags, SCA_COL_ABSOLUTE ) ||
+				aStart.Row() != aEnd.Row() ||
+				absrel_differ( nFlags, SCA_ROW_ABSOLUTE )) {
+				r += ':';
+				r1c1_append_r( r, aEnd.Row(), nFlags & SCA_ROW2_ABSOLUTE, rDetails );
+				r1c1_append_c( r, aEnd.Col(), nFlags & SCA_COL2_ABSOLUTE, rDetails );
+			}
+		}
+	}
+#undef	absrel_differ
+}
 
 bool ScAddress::Move( SCsCOL dx, SCsROW dy, SCsTAB dz, ScDocument* pDoc )
 {
@@ -542,7 +910,8 @@ String ScAddress::GetText() const
 }
 
 
-String ScAddress::GetColRowString( bool bAbsolute ) const
+String ScAddress::GetColRowString( bool bAbsolute,
+								   const Details& rDetails ) const
 {
     String aString;
     if (bAbsolute)
@@ -559,7 +928,8 @@ String ScAddress::GetColRowString( bool 
 }
 
 
-String ScRefAddress::GetRefString( ScDocument* pDoc, SCTAB nActTab) const
+String ScRefAddress::GetRefString( ScDocument* pDoc, SCTAB nActTab,
+								   const ScAddress::Details& rDetails ) const
 {
     if ( !pDoc )
         return EMPTY_STRING;
@@ -579,7 +949,7 @@ String ScRefAddress::GetRefString( ScDoc
     if ( !bRelRow )
         nFlags |= SCA_ROW_ABSOLUTE;
 
-    aAdr.Format( aString, nFlags, pDoc );
+    aAdr.Format( aString, nFlags, pDoc, rDetails );
 
     return aString;
 }
Index: sc/source/core/tool/chgtrack.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/chgtrack.cxx,v
retrieving revision 1.23
retrieving revision 1.23.38.1
diff -u -w -p -r1.23 -r1.23.38.1
--- sc/source/core/tool/chgtrack.cxx	8 Sep 2005 18:40:27 -0000	1.23
+++ sc/source/core/tool/chgtrack.cxx	25 Nov 2005 04:44:37 -0000	1.23.38.1
@@ -1934,7 +1934,7 @@ void ScChangeActionContent::SetValueStri
 	{
 		rValue.Erase();
 		pCell = new ScFormulaCell(
-			pDoc, aBigRange.aStart.MakeAddress(), rStr );
+			pDoc, aBigRange.aStart.MakeAddress(), rStr, ScAddress::CONV_OOO );
 		((ScFormulaCell*)pCell)->SetInChangeTrack( TRUE );
 	}
 	else
Index: sc/source/core/tool/compiler.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/compiler.cxx,v
retrieving revision 1.55
retrieving revision 1.54.22.7
diff -u -w -p -r1.55 -r1.54.22.7
--- sc/source/core/tool/compiler.cxx	7 Nov 2005 14:41:17 -0000	1.55
+++ sc/source/core/tool/compiler.cxx	1 Dec 2005 19:52:21 -0000	1.54.22.7
@@ -82,10 +82,10 @@
 String* ScCompiler::pSymbolTableNative = NULL;
 String* ScCompiler::pSymbolTableEnglish = NULL;
 USHORT  ScCompiler::nAnzStrings = 0;
-ULONG* ScCompiler::pCharTable = 0;
 ScOpCodeHashMap* ScCompiler::pSymbolHashMapNative = NULL;
 ScOpCodeHashMap* ScCompiler::pSymbolHashMapEnglish = NULL;
 CharClass* ScCompiler::pCharClassEnglish = NULL;
+const ScCompiler::Convention* ScCompiler::pConventions[ ] = { NULL, NULL, NULL };
 
 enum ScanState
 {
@@ -106,7 +106,7 @@ struct ScArrayStack
 
 static sal_Char* pInternal[ 5 ] = { "GAME", "SPEW", "TTT", "STARCALCTEAM", "ANTWORT" };
 
-
+using namespace ::com::sun::star::i18n;
 /////////////////////////////////////////////////////////////////////////
 
 short lcl_GetRetFormat( OpCode eOpCode )
@@ -218,56 +218,14 @@ public:
 
 void ScCompiler::Init()
 {
+    if (NULL != pSymbolTableNative)
+		return;
+
     pSymbolTableNative = new String[SC_OPCODE_LAST_OPCODE_ID+1];
     pSymbolHashMapNative = new ScOpCodeHashMap( SC_OPCODE_LAST_OPCODE_ID+1 );
     ScOpCodeList aOpCodeListNative( RID_SC_FUNCTION_NAMES, pSymbolTableNative,
             *pSymbolHashMapNative );
     nAnzStrings = SC_OPCODE_LAST_OPCODE_ID+1;
-
-    pCharTable = new ULONG [128];
-    USHORT i;
-    for (i = 0; i < 128; i++)
-        pCharTable[i] = SC_COMPILER_C_ILLEGAL;
-    /*   */     pCharTable[32] = SC_COMPILER_C_CHAR_DONTCARE | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* ! */     pCharTable[33] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* " */     pCharTable[34] = SC_COMPILER_C_CHAR_STRING | SC_COMPILER_C_STRING_SEP;
-    /* # */     pCharTable[35] = SC_COMPILER_C_WORD_SEP;
-    /* $ */     pCharTable[36] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_IDENT | SC_COMPILER_C_IDENT;
-    /* % */     pCharTable[37] = SC_COMPILER_C_VALUE;
-    /* & */     pCharTable[38] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* ' */     pCharTable[39] = SC_COMPILER_C_NAME_SEP;
-    /* ( */     pCharTable[40] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* ) */     pCharTable[41] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* * */     pCharTable[42] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* + */     pCharTable[43] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_EXP | SC_COMPILER_C_VALUE_SIGN;
-    /* , */     pCharTable[44] = SC_COMPILER_C_CHAR_VALUE | SC_COMPILER_C_VALUE;
-    /* - */     pCharTable[45] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_EXP | SC_COMPILER_C_VALUE_SIGN;
-    /* . */     pCharTable[46] = SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_VALUE | SC_COMPILER_C_VALUE | SC_COMPILER_C_IDENT;
-    /* / */     pCharTable[47] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    for (i = 48; i < 58; i++)
-    /* 0-9 */   pCharTable[i] = SC_COMPILER_C_CHAR_VALUE | SC_COMPILER_C_WORD | SC_COMPILER_C_VALUE | SC_COMPILER_C_VALUE_EXP | SC_COMPILER_C_VALUE_VALUE | SC_COMPILER_C_IDENT;
-    /* : */     pCharTable[58] = SC_COMPILER_C_WORD | SC_COMPILER_C_IDENT;
-    /* ; */     pCharTable[59] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* < */     pCharTable[60] = SC_COMPILER_C_CHAR_BOOL | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* = */     pCharTable[61] = SC_COMPILER_C_CHAR | SC_COMPILER_C_BOOL | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* > */     pCharTable[62] = SC_COMPILER_C_CHAR_BOOL | SC_COMPILER_C_BOOL | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* ? */     pCharTable[63] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD;
-    /* @ */     // FREI
-    for (i = 65; i < 91; i++)
-    /* A-Z */   pCharTable[i] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_IDENT | SC_COMPILER_C_IDENT;
-    /* [ */     // FREI
-    /* \ */     // FREI
-    /* ] */     // FREI
-    /* ^ */     pCharTable[94] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
-    /* _ */     pCharTable[95] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_IDENT | SC_COMPILER_C_IDENT;
-    /* ` */     // FREI
-    for (i = 97; i < 123; i++)
-    /* a-z */   pCharTable[i] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_IDENT | SC_COMPILER_C_IDENT;
-    /* { */     // FREI
-    /* | */     // FREI
-    /* } */     // FREI
-    /* ~ */     // FREI
-    /* 127 */   // FREI
 }
 
 void ScCompiler::DeInit()
@@ -299,8 +257,6 @@ void ScCompiler::DeInit()
         delete pCharClassEnglish;
         pCharClassEnglish = NULL;
     }
-    delete [] pCharTable;
-    pCharTable = NULL;
 }
 
 void ScCompiler::SetCompileEnglish( BOOL bCompileEnglish )
@@ -337,54 +293,105 @@ void ScCompiler::SetCompileEnglish( BOOL
 
 //-----------------------------------------------------------------------------
 
-ScCompiler::ScCompiler( ScDocument* pDocument, const ScAddress& rPos,
-                        const ScTokenArray& rArr )
-        :
-        aPos( rPos ),
-        pSymbolTable( pSymbolTableNative ),
-        pSymbolHashMap( pSymbolHashMapNative ),
-        pCharClass( ScGlobal::pCharClass ),
-        nRecursion(0),
-        bAutoCorrect( FALSE ),
-        bCorrected( FALSE ),
-        bCompileForFAP( FALSE ),
-        bIgnoreErrors( FALSE ),
-        bCompileXML( FALSE ),
-        bImportXML ( FALSE )
+ScCompiler::Convention::~Convention()
 {
-    if (!nAnzStrings)
-        Init();
-    pArr = (ScTokenArray*) &rArr;
-    pDoc = pDocument;
-    nMaxTab = pDoc->GetTableCount() - 1;
-    pStack = NULL;
-    nNumFmt = NUMBERFORMAT_UNDEFINED;
+	delete [] pCharTable;
+	pCharTable = NULL;
 }
 
-ScCompiler::ScCompiler(ScDocument* pDocument, const ScAddress& rPos )
+ScCompiler::Convention::Convention( ScAddress::Convention eConvP )
         :
-        aPos( rPos ),
-        pSymbolTable( pSymbolTableNative ),
-        pSymbolHashMap( pSymbolHashMapNative ),
-        pCharClass( ScGlobal::pCharClass ),
-        nRecursion(0),
-        bAutoCorrect( FALSE ),
-        bCorrected( FALSE ),
-        bCompileForFAP( FALSE ),
-        bIgnoreErrors( FALSE ),
-        bCompileXML( FALSE ),
-        bImportXML ( FALSE )
+	eConv( eConvP )
 {
-    if (!nAnzStrings)
-        Init();
-    pDoc = pDocument;
-    nMaxTab = pDoc ? pDoc->GetTableCount() - 1 : 0;
-    pStack = NULL;
-    nNumFmt = NUMBERFORMAT_UNDEFINED;
+    int i;
+	ULONG *t= new ULONG [128];
+
+	ScCompiler::pConventions[ eConv ] = this;
+	pCharTable = t;
+
+	for (i = 0; i < 128; i++)
+		t[i] = SC_COMPILER_C_ILLEGAL;
+
+/*   */     t[32] = SC_COMPILER_C_CHAR_DONTCARE | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* ! */     t[33] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* " */     t[34] = SC_COMPILER_C_CHAR_STRING | SC_COMPILER_C_STRING_SEP;
+/* # */     t[35] = SC_COMPILER_C_WORD_SEP;
+/* $ */     t[36] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_IDENT | SC_COMPILER_C_IDENT;
+/* % */     t[37] = SC_COMPILER_C_VALUE;
+/* & */     t[38] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* ' */     t[39] = SC_COMPILER_C_NAME_SEP;
+/* ( */     t[40] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* ) */     t[41] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* * */     t[42] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* + */     t[43] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_EXP | SC_COMPILER_C_VALUE_SIGN;
+/* , */     t[44] = SC_COMPILER_C_CHAR_VALUE | SC_COMPILER_C_VALUE;
+/* - */     t[45] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_EXP | SC_COMPILER_C_VALUE_SIGN;
+/* . */     t[46] = SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_VALUE | SC_COMPILER_C_VALUE | SC_COMPILER_C_IDENT;
+/* / */     t[47] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+for (i = 48; i < 58; i++)
+/* 0-9 */   t[i] = SC_COMPILER_C_CHAR_VALUE | SC_COMPILER_C_WORD | SC_COMPILER_C_VALUE | SC_COMPILER_C_VALUE_EXP | SC_COMPILER_C_VALUE_VALUE | SC_COMPILER_C_IDENT;
+/* : */     t[58] = SC_COMPILER_C_WORD | SC_COMPILER_C_IDENT;
+/* ; */     t[59] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* < */     t[60] = SC_COMPILER_C_CHAR_BOOL | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* = */     t[61] = SC_COMPILER_C_CHAR | SC_COMPILER_C_BOOL | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* > */     t[62] = SC_COMPILER_C_CHAR_BOOL | SC_COMPILER_C_BOOL | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* ? */     t[63] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD;
+/* @ */     // FREI
+for (i = 65; i < 91; i++)
+/* A-Z */   t[i] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_IDENT | SC_COMPILER_C_IDENT;
+/* [ */     // FREI
+/* \ */     // FREI
+/* ] */     // FREI
+/* ^ */     t[94] = SC_COMPILER_C_CHAR | SC_COMPILER_C_WORD_SEP | SC_COMPILER_C_VALUE_SEP;
+/* _ */     t[95] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_IDENT | SC_COMPILER_C_IDENT;
+/* ` */     // FREI
+for (i = 97; i < 123; i++)
+/* a-z */   t[i] = SC_COMPILER_C_CHAR_WORD | SC_COMPILER_C_WORD | SC_COMPILER_C_CHAR_IDENT | SC_COMPILER_C_IDENT;
+/* { */     // FREI
+/* | */     // FREI
+/* } */     // FREI
+/* ~ */     // FREI
+/* 127 */   // FREI
+	if( ScAddress::CONV_XL_A1 == eConv)
+	{
+/* ! */     t[33] |= SC_COMPILER_C_IDENT;
+	}
+	else if( ScAddress::CONV_XL_R1C1 == eConv)
+	{
+/* ! */     t[33] |= SC_COMPILER_C_IDENT;
+/* - */     t[45] |= SC_COMPILER_C_IDENT;
+/* [ */     t[91]  = SC_COMPILER_C_IDENT;
+/* ] */     t[93]  = SC_COMPILER_C_IDENT;
 }
+}
+
+//-----------------------------------------------------------------------------
 
+struct Convention_A1 : public ScCompiler::Convention
+{
+	Convention_A1( ScAddress::Convention eConv ) : ScCompiler::Convention( eConv ) { }
+	static String MakeTabStr( const ScCompiler& rComp, SCTAB nTab, String& aDoc );
+	static String MakeColStr( SCCOL nCol );
+	static void MakeColStr( rtl::OUStringBuffer& rBuffer, SCCOL nCol );
+	static String MakeRowStr( SCROW nRow );
+	static void MakeRowStr( rtl::OUStringBuffer& rBuffer, SCROW nRow );
+
+	ParseResult parseAnyToken( const String& rFormula,
+							   xub_StrLen nSrcPos,
+							   const CharClass* pCharClass) const
+	{
+        static const sal_Int32 nStartFlags = KParseTokens::ANY_LETTER_OR_NUMBER |
+            KParseTokens::ASC_UNDERSCORE | KParseTokens::ASC_DOLLAR;
+        static const sal_Int32 nContFlags = nStartFlags | KParseTokens::ASC_DOT |
+            KParseTokens::ASC_COLON;
+        // '?' allowed in range names because of Xcl :-/
+        static const String aAddAllowed( '?' );
+		return pCharClass->parseAnyToken( rFormula,
+                nSrcPos, nStartFlags, aAddAllowed, nContFlags, aAddAllowed );
+	}
+};
 
-String ScCompiler::MakeColStr( SCCOL nCol )
+String Convention_A1::MakeColStr( SCCOL nCol )
 {
     if ( !ValidCol( nCol) )
         return ScGlobal::GetRscString(STR_NO_REF_TABLE);
@@ -392,7 +399,7 @@ String ScCompiler::MakeColStr( SCCOL nCo
         return ::ColToAlpha( nCol);
 }
 
-void ScCompiler::MakeColStr( rtl::OUStringBuffer& rBuffer, SCCOL nCol )
+void Convention_A1::MakeColStr( rtl::OUStringBuffer& rBuffer, SCCOL nCol )
 {
     if ( !ValidCol( nCol) )
         rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
@@ -400,7 +407,7 @@ void ScCompiler::MakeColStr( rtl::OUStri
         ::ColToAlpha( rBuffer, nCol);
 }
 
-String ScCompiler::MakeRowStr( SCROW nRow )
+String Convention_A1::MakeRowStr( SCROW nRow )
 {
     if ( !ValidRow(nRow) )
         return ScGlobal::GetRscString(STR_NO_REF_TABLE);
@@ -408,7 +415,7 @@ String ScCompiler::MakeRowStr( SCROW nRo
         return String::CreateFromInt32( nRow + 1 );
 }
 
-void ScCompiler::MakeRowStr( rtl::OUStringBuffer& rBuffer, SCROW nRow )
+void Convention_A1::MakeRowStr( rtl::OUStringBuffer& rBuffer, SCROW nRow )
 {
     if ( !ValidRow(nRow) )
         rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
@@ -416,10 +423,11 @@ void ScCompiler::MakeRowStr( rtl::OUStri
         rBuffer.append(sal_Int32(nRow + 1));
 }
 
-String ScCompiler::MakeTabStr( SCTAB nTab, String& aDoc )
+String Convention_A1::MakeTabStr( const ScCompiler& rComp,
+								  SCTAB nTab, String& aDoc )
 {
     String aString;
-    if (!pDoc->GetName(nTab, aString))
+    if (!rComp.pDoc->GetName( nTab, aString ))
         aString = ScGlobal::GetRscString(STR_NO_REF_TABLE);
     else
     {
@@ -440,43 +448,109 @@ String ScCompiler::MakeTabStr( SCTAB nTa
         }
         else
             aDoc.Erase();
-        CheckTabQuotes( aString );
+		ScCompiler::CheckTabQuotes( aString );
     }
     aString += '.';
     return aString;
 }
 
-void ScCompiler::CheckTabQuotes( String& rString )
+//-----------------------------------------------------------------------------
+
+struct ConventionOOO_A1 : public Convention_A1
 {
-    register const sal_Unicode* p = rString.GetBuffer();
-    register const sal_Unicode* const pEnd = p + rString.Len();
-    while ( p < pEnd )
+	ConventionOOO_A1() : Convention_A1 (ScAddress::CONV_OOO) { }
+	void MakeRefStr( rtl::OUStringBuffer&	rBuffer,
+					 const ScCompiler&		rCompiler,
+					 const ComplRefData& rRef,
+					 BOOL bSingleRef ) const
     {
-        if( !IsWordChar( *p ) )
+		ComplRefData aRef( rRef );
+		// In case absolute/relative positions weren't separately available:
+		// transform relative to absolute!
+	//  AdjustReference( aRef.Ref1 );
+	//  if( !bSingleRef )
+	//      AdjustReference( aRef.Ref2 );
+		aRef.Ref1.CalcAbsIfRel( rCompiler.aPos );
+		if( !bSingleRef )
+			aRef.Ref2.CalcAbsIfRel( rCompiler.aPos );
+		if( aRef.Ref1.IsFlag3D() )
         {
-            rString.Insert( '\'', 0 );
-            rString += '\'';
-            return ;
-        }
-        p++;
+			if (aRef.Ref1.IsTabDeleted())
+			{
+				if (!aRef.Ref1.IsTabRel())
+					rBuffer.append(sal_Unicode('$'));
+				rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+				rBuffer.append(sal_Unicode('.'));
     }
-    if ( CharClass::isAsciiNumeric( rString ) )
+			else
     {
-        rString.Insert( '\'', 0 );
-        rString += '\'';
+				String aDoc;
+				String aRefStr( MakeTabStr( rCompiler, aRef.Ref1.nTab, aDoc ) );
+				rBuffer.append(aDoc);
+				if (!aRef.Ref1.IsTabRel()) rBuffer.append(sal_Unicode('$'));
+				rBuffer.append(aRefStr);
     }
 }
-
-String ScCompiler::MakeRefStr( ComplRefData& rRef, BOOL bSingleRef )
+		if (!aRef.Ref1.IsColRel())
+			rBuffer.append(sal_Unicode('$'));
+		if ( aRef.Ref1.IsColDeleted() )
+			rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+		else
+			MakeColStr(rBuffer, aRef.Ref1.nCol );
+		if (!aRef.Ref1.IsRowRel())
+			rBuffer.append(sal_Unicode('$'));
+		if ( aRef.Ref1.IsRowDeleted() )
+			rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+		else
+			MakeRowStr( rBuffer, aRef.Ref1.nRow );
+		if (!bSingleRef)
 {
-    rtl::OUStringBuffer aBuffer;
-    MakeRefStr( aBuffer, rRef, bSingleRef );
-    return String( aBuffer );
+			rBuffer.append(sal_Unicode(':'));
+			if (aRef.Ref2.IsFlag3D() || aRef.Ref2.nTab != aRef.Ref1.nTab)
+			{
+				if (aRef.Ref2.IsTabDeleted())
+				{
+					if (!aRef.Ref2.IsTabRel())
+						rBuffer.append(sal_Unicode('$'));
+					rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+					rBuffer.append(sal_Unicode('.'));
+				}
+				else
+				{
+					String aDoc;
+					String aRefStr( MakeTabStr( rCompiler, aRef.Ref2.nTab, aDoc ) );
+					rBuffer.append(aDoc);
+					if (!aRef.Ref2.IsTabRel()) rBuffer.append(sal_Unicode('$'));
+					rBuffer.append(aRefStr);
+				}
+			}
+			if (!aRef.Ref2.IsColRel())
+				rBuffer.append(sal_Unicode('$'));
+			if ( aRef.Ref2.IsColDeleted() )
+				rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+			else
+				MakeColStr( rBuffer, aRef.Ref2.nCol );
+			if (!aRef.Ref2.IsRowRel())
+				rBuffer.append(sal_Unicode('$'));
+			if ( aRef.Ref2.IsRowDeleted() )
+				rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+			else
+				MakeRowStr( rBuffer, aRef.Ref2.nRow );
+		}
 }
+};
+static const ConventionOOO_A1 ConvOOO_A1;
+const ScCompiler::Convention *ScCompiler::pConvOOO_A1 = &ConvOOO_A1;
+
+//-----------------------------------------------------------------------------
 
-void ScCompiler::MakeRefStr( rtl::OUStringBuffer& rBuffer, ComplRefData& rRef, BOOL bSingleRef )
+struct ConventionOOO_A1_XML : public ConventionOOO_A1
+{
+	void MakeRefStr( rtl::OUStringBuffer&	rBuffer,
+					 const ScCompiler&		rCompiler,
+					 const ComplRefData& rRef,
+					 BOOL bSingleRef ) const
 {
-    if (bCompileXML)
         rBuffer.append(sal_Unicode('['));
     ComplRefData aRef( rRef );
     // In case absolute/relative positions weren't separately available:
@@ -484,9 +558,9 @@ void ScCompiler::MakeRefStr( rtl::OUStri
 //  AdjustReference( aRef.Ref1 );
 //  if( !bSingleRef )
 //      AdjustReference( aRef.Ref2 );
-    aRef.Ref1.CalcAbsIfRel( aPos );
+		aRef.Ref1.CalcAbsIfRel( rCompiler.aPos );
     if( !bSingleRef )
-        aRef.Ref2.CalcAbsIfRel( aPos );
+			aRef.Ref2.CalcAbsIfRel( rCompiler.aPos );
     if( aRef.Ref1.IsFlag3D() )
     {
         if (aRef.Ref1.IsTabDeleted())
@@ -499,13 +573,13 @@ void ScCompiler::MakeRefStr( rtl::OUStri
         else
         {
             String aDoc;
-            String aRefStr( MakeTabStr( aRef.Ref1.nTab, aDoc ) );
+				String aRefStr( MakeTabStr( rCompiler, aRef.Ref1.nTab, aDoc ) );
             rBuffer.append(aDoc);
             if (!aRef.Ref1.IsTabRel()) rBuffer.append(sal_Unicode('$'));
             rBuffer.append(aRefStr);
         }
     }
-    else if (bCompileXML)
+		else
         rBuffer.append(sal_Unicode('.'));
     if (!aRef.Ref1.IsColRel())
         rBuffer.append(sal_Unicode('$'));
@@ -534,13 +608,13 @@ void ScCompiler::MakeRefStr( rtl::OUStri
             else
             {
                 String aDoc;
-                String aRefStr( MakeTabStr( aRef.Ref2.nTab, aDoc ) );
+					String aRefStr( MakeTabStr( rCompiler, aRef.Ref2.nTab, aDoc ) );
                 rBuffer.append(aDoc);
                 if (!aRef.Ref2.IsTabRel()) rBuffer.append(sal_Unicode('$'));
                 rBuffer.append(aRefStr);
             }
         }
-        else if (bCompileXML)
+			else
             rBuffer.append(sal_Unicode('.'));
         if (!aRef.Ref2.IsColRel())
             rBuffer.append(sal_Unicode('$'));
@@ -555,12 +629,313 @@ void ScCompiler::MakeRefStr( rtl::OUStri
         else
             MakeRowStr( rBuffer, aRef.Ref2.nRow );
     }
-    if (bCompileXML)
         rBuffer.append(sal_Unicode(']'));
 }
+};
+
+static const ConventionOOO_A1_XML ConvOOO_A1_XML;
+static const ScCompiler::Convention *pConvOOO_A1_XML = &ConvOOO_A1_XML;
+
+//-----------------------------------------------------------------------------
+
+struct ConventionXL_A1 : public Convention_A1
+{
+	ConventionXL_A1() : Convention_A1( ScAddress::CONV_XL_A1 ) { }
+	void MakeRefStr( rtl::OUStringBuffer&	rBuffer,
+					 const ScCompiler&		rCompiler,
+					 const ComplRefData& rRef,
+					 BOOL bSingleRef ) const
+	{
+		ComplRefData aRef( rRef );
+
+		aRef.Ref1.CalcAbsIfRel( rCompiler.aPos );
+		if( !bSingleRef )
+			aRef.Ref2.CalcAbsIfRel( rCompiler.aPos );
+
+#if 0
+		if( aRef.Ref1.IsFlag3D() )
+		{
+			if (aRef.Ref1.IsTabDeleted())
+			{
+				rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+				rBuffer.append(sal_Unicode('.'));
+			}
+			else
+			{
+				String aDoc;
+				String aRefStr( MakeTabStr( rCompiler, aRef.Ref1.nTab, aDoc ) );
+				rBuffer.append(aDoc);
+				rBuffer.append(aRefStr);
+			}
+		}
+			if (aRef.Ref2.IsFlag3D() || aRef.Ref2.nTab != aRef.Ref1.nTab)
+			{
+				if (aRef.Ref2.IsTabDeleted())
+				{
+					rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+					rBuffer.append(sal_Unicode('.'));
+				}
+				else
+				{
+					String aDoc;
+					String aRefStr( MakeTabStr( rCompiler, aRef.Ref2.nTab, aDoc ) );
+					rBuffer.append(aDoc);
+					rBuffer.append(aRefStr);
+				}
+			}
+#endif
+
+		if (!aRef.Ref1.IsColRel())
+			rBuffer.append(sal_Unicode('$'));
+		if ( aRef.Ref1.IsColDeleted() )
+			rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+		else
+			MakeColStr(rBuffer, aRef.Ref1.nCol );
+		if (!aRef.Ref1.IsRowRel())
+			rBuffer.append(sal_Unicode('$'));
+		if ( aRef.Ref1.IsRowDeleted() )
+			rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+		else
+			MakeRowStr( rBuffer, aRef.Ref1.nRow );
+		if (!bSingleRef)
+		{
+			rBuffer.append(sal_Unicode(':'));
+			if (!aRef.Ref2.IsColRel())
+				rBuffer.append(sal_Unicode('$'));
+			if ( aRef.Ref2.IsColDeleted() )
+				rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+			else
+				MakeColStr( rBuffer, aRef.Ref2.nCol );
+			if (!aRef.Ref2.IsRowRel())
+				rBuffer.append(sal_Unicode('$'));
+			if ( aRef.Ref2.IsRowDeleted() )
+				rBuffer.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+			else
+				MakeRowStr( rBuffer, aRef.Ref2.nRow );
+		}
+	}
+};
+
+static const ConventionXL_A1 ConvXL_A1;
+static const ScCompiler::Convention *pConvXL_A1 = &ConvXL_A1;
+
+//-----------------------------------------------------------------------------
+
+static void
+r1c1_add_col( rtl::OUStringBuffer &rBuf, const SingleRefData& rRef )
+{
+	rBuf.append( sal_Unicode( 'C' ) );
+	if( rRef.IsColRel() )
+	{
+		if (rRef.nRelCol != 0)
+		{
+			rBuf.append( sal_Unicode( '[' ) );
+			rBuf.append( String::CreateFromInt32( rRef.nRelCol ) );
+			rBuf.append( sal_Unicode( ']' ) );
+		}
+	}
+	else
+		rBuf.append( String::CreateFromInt32( rRef.nCol + 1 ) );
+}
+static void
+r1c1_add_row( rtl::OUStringBuffer &rBuf, const SingleRefData& rRef )
+{
+	rBuf.append( sal_Unicode( 'R' ) );
+	if( rRef.IsRowRel() )
+	{
+		if (rRef.nRelRow != 0)
+		{
+			rBuf.append( sal_Unicode( '[' ) );
+			rBuf.append( String::CreateFromInt32( rRef.nRelRow ) );
+			rBuf.append( sal_Unicode( ']' ) );
+		}
+	}
+	else
+		rBuf.append( String::CreateFromInt32( rRef.nRow + 1 ) );
+}
+
+struct ConventionXL_R1C1 : public ScCompiler::Convention
+{
+	ConventionXL_R1C1() : ScCompiler::Convention( ScAddress::CONV_XL_R1C1 ) { }
+	void MakeRefStr( rtl::OUStringBuffer&	rBuf,
+					 const ScCompiler&		rCompiler,
+					 const ComplRefData& rRef,
+					 BOOL bSingleRef ) const
+	{
+		ComplRefData aRef( rRef );
+
+		aRef.Ref1.CalcAbsIfRel( rCompiler.aPos );
+		if( !bSingleRef )
+			aRef.Ref2.CalcAbsIfRel( rCompiler.aPos );
+
+		if( aRef.Ref1.IsColDeleted() || aRef.Ref1.IsRowDeleted() )
+			rBuf.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+		else if( !bSingleRef &&
+				 ( aRef.Ref2.IsColDeleted() || aRef.Ref2.IsRowDeleted() ) )
+			rBuf.append(ScGlobal::GetRscString(STR_NO_REF_TABLE));
+		else if( bSingleRef )
+		{
+			r1c1_add_row( rBuf, rRef.Ref1 );
+			r1c1_add_col( rBuf, rRef.Ref1 );
+		}
+		else
+		{
+			if( aRef.Ref1.nCol == 0 && aRef.Ref2.nCol >= MAXCOLCOUNT-1 )
+			{
+				r1c1_add_row( rBuf,  rRef.Ref1 );
+				if( rRef.Ref1.nRow != rRef.Ref2.nRow ||
+					rRef.Ref1.IsRowRel() != rRef.Ref2.IsRowRel() ) {
+					rBuf.append (sal_Unicode ( ':' ) );
+					r1c1_add_row( rBuf,  rRef.Ref2 );
+				}
+			}
+			else if( aRef.Ref1.nRow == 0 && aRef.Ref2.nRow >= MAXROWCOUNT-1 )
+			{
+				r1c1_add_col( rBuf, rRef.Ref1 );
+				if( rRef.Ref1.nCol != rRef.Ref2.nCol ||
+					rRef.Ref1.IsColRel() != rRef.Ref2.IsColRel() )
+				{
+					rBuf.append (sal_Unicode ( ':' ) );
+					r1c1_add_col( rBuf,  rRef.Ref2 );
+				}
+			}
+			else
+			{
+				r1c1_add_row( rBuf, rRef.Ref1 );
+				r1c1_add_col( rBuf, rRef.Ref1 );
+				if( rRef.Ref1.nCol != rRef.Ref2.nCol ||
+					rRef.Ref1.IsColRel() != rRef.Ref2.IsColRel() ||
+					rRef.Ref1.nRow != rRef.Ref2.nRow ||
+					rRef.Ref1.IsRowRel() != rRef.Ref2.IsRowRel() )
+				{
+					rBuf.append (sal_Unicode ( ':' ) );
+					r1c1_add_row( rBuf, rRef.Ref2 );
+					r1c1_add_col( rBuf, rRef.Ref2 );
+				}
+			}
+		}
+	}
+
+	ParseResult parseAnyToken( const String& rFormula,
+							   xub_StrLen nSrcPos,
+							   const CharClass* pCharClass) const
+	{
+        static const sal_Int32 nStartFlags = KParseTokens::ANY_LETTER_OR_NUMBER |
+            KParseTokens::ASC_UNDERSCORE ;
+        static const sal_Int32 nContFlags = nStartFlags | KParseTokens::ASC_DOT |
+            KParseTokens::ASC_COLON;
+        // '?' allowed in range names because of Xcl :-/
+		static const String aAddAllowed = String::CreateFromAscii( "?-[]" );
+
+		return pCharClass->parseAnyToken( rFormula,
+                nSrcPos, nStartFlags, aAddAllowed, nContFlags, aAddAllowed );
+	}
+};
+
+static const ConventionXL_R1C1 ConvXL_R1C1;
+static const ScCompiler::Convention *pConvXL_R1C1 = &ConvXL_R1C1;
+
+//-----------------------------------------------------------------------------
+ScCompiler::ScCompiler( ScDocument* pDocument, const ScAddress& rPos,
+                        const ScTokenArray& rArr )
+        :
+        aPos( rPos ),
+        pSymbolTable( pSymbolTableNative ),
+        pSymbolHashMap( pSymbolHashMapNative ),
+        pCharClass( ScGlobal::pCharClass ),
+        nRecursion(0),
+        bAutoCorrect( FALSE ),
+        bCorrected( FALSE ),
+        bCompileForFAP( FALSE ),
+        bIgnoreErrors( FALSE ),
+        bImportXML ( FALSE )
+{
+    if (!nAnzStrings)
+        Init();
+    pArr = (ScTokenArray*) &rArr;
+    pDoc = pDocument;
+
+	if (NULL != pDoc)
+		SetRefConvention( pDoc->GetAddressConvention() );
+	else
+		SetRefConvention( pConvOOO_A1 );
+
+    nMaxTab = pDoc->GetTableCount() - 1;
+    pStack = NULL;
+    nNumFmt = NUMBERFORMAT_UNDEFINED;
+}
+
+ScCompiler::ScCompiler(ScDocument* pDocument, const ScAddress& rPos )
+        :
+        aPos( rPos ),
+        pSymbolTable( pSymbolTableNative ),
+        pSymbolHashMap( pSymbolHashMapNative ),
+        pCharClass( ScGlobal::pCharClass ),
+        nRecursion(0),
+        bAutoCorrect( FALSE ),
+        bCorrected( FALSE ),
+        bCompileForFAP( FALSE ),
+        bIgnoreErrors( FALSE ),
+        bImportXML ( FALSE )
+{
+    if (!nAnzStrings)
+        Init();
+    pDoc = pDocument;
+
+	if (NULL != pDoc)
+		SetRefConvention( pDoc->GetAddressConvention() );
+	else
+		SetRefConvention( pConvOOO_A1 );
+
+    nMaxTab = pDoc ? pDoc->GetTableCount() - 1 : 0;
+    pStack = NULL;
+    nNumFmt = NUMBERFORMAT_UNDEFINED;
+}
+
+void ScCompiler::CheckTabQuotes( String& rString )
+{
+    register const sal_Unicode* p = rString.GetBuffer();
+    register const sal_Unicode* const pEnd = p + rString.Len();
+    while ( p < pEnd )
+    {
+        if( !IsWordChar( *p ) )
+        {
+            rString.Insert( '\'', 0 );
+            rString += '\'';
+            return ;
+        }
+        p++;
+    }
+    if ( CharClass::isAsciiNumeric( rString ) )
+    {
+        rString.Insert( '\'', 0 );
+        rString += '\'';
+    }
+}
 
 //---------------------------------------------------------------------------
 
+void ScCompiler::SetCompileXML( BOOL bVal )
+{
+	SetRefConvention( bVal ? pConvOOO_A1_XML : pConvOOO_A1 );
+}
+void ScCompiler::SetRefConvention( ScAddress::Convention eConv )
+{
+	switch ( eConv ) {
+	case ScAddress::CONV_UNSPECIFIED :
+		break;
+	default :
+	case ScAddress::CONV_OOO :		SetRefConvention( pConvOOO_A1 ); break;
+	case ScAddress::CONV_XL_A1 :	SetRefConvention( pConvXL_A1 );  break;
+	case ScAddress::CONV_XL_R1C1 :	SetRefConvention( pConvXL_R1C1 ); break;
+	}
+}
+
+void ScCompiler::SetRefConvention( const ScCompiler::Convention *pConvP )
+{
+	pConv = pConvP;
+}
+
 void ScCompiler::SetError(USHORT nError)
 {
     if( !pArr->GetError() )
@@ -751,14 +1126,7 @@ xub_StrLen ScCompiler::NextSymbol()
     }
     if ( bi18n )
     {
-        using namespace ::com::sun::star::i18n;
         nSrcPos += nSpaces;
-        sal_Int32 nStartFlags = KParseTokens::ANY_LETTER_OR_NUMBER |
-            KParseTokens::ASC_UNDERSCORE | KParseTokens::ASC_DOLLAR;
-        sal_Int32 nContFlags = nStartFlags | KParseTokens::ASC_DOT |
-            KParseTokens::ASC_COLON;
-        // '?' allowed in range names because of Xcl :-/
-        static const String aAddAllowed( '?' );
         String aSymbol;
         USHORT nErr = 0;
         do
@@ -768,8 +1136,7 @@ xub_StrLen ScCompiler::NextSymbol()
             if ( pStart[nSrcPos] == '$' && pStart[nSrcPos+1] == '\'' )
                 aSymbol += pStart[nSrcPos++];
 
-            ParseResult aRes = pCharClass->parseAnyToken( aFormula,
-                nSrcPos, nStartFlags, aAddAllowed, nContFlags, aAddAllowed );
+            ParseResult aRes = pConv->parseAnyToken( aFormula, nSrcPos, pCharClass );
 
             if ( !aRes.TokenType )
                 SetError( nErr = errIllegalChar );      // parsed chars as string
@@ -976,7 +1343,8 @@ BOOL ScCompiler::IsReference( const Stri
         }
     }
     ScRange aRange( aPos, aPos );
-    USHORT nFlags = aRange.Parse( rName, pDoc );
+	const ScAddress::Details aDetails( pConv->eConv, aPos );
+    USHORT nFlags = aRange.Parse( rName, pDoc, aDetails );
     if( nFlags & SCA_VALID )
     {
         ScRawToken aToken;
@@ -1001,7 +1369,7 @@ BOOL ScCompiler::IsReference( const Stri
     else
     {
         ScAddress aAddr( aPos );
-        nFlags = aAddr.Parse( rName, pDoc );
+        nFlags = aAddr.Parse( rName, pDoc, aDetails );
         // Something must be valid in order to recognize Sheet1.blah or blah.a1
         // as a (wrong) reference.
         if( nFlags & ( SCA_VALID_COL|SCA_VALID_ROW|SCA_VALID_TAB ) )
@@ -1453,6 +1821,7 @@ void ScCompiler::AutoCorrectParsedSymbol
             if ( nRefs && nRefs <= 2 )
             {   // reference twisted? 4A => A4 etc.
                 String aTab[2], aRef[2];
+				const ScAddress::Details aDetails( pConv->eConv, aPos );
                 if ( nRefs == 2 )
                 {
                     aRef[0] = aSymbol.GetToken( 0, ':' );
@@ -1486,7 +1855,7 @@ void ScCompiler::AutoCorrectParsedSymbol
                     {
                         bChanged = TRUE;
                         ScAddress aAdr;
-                        bOk &= ((aAdr.Parse( aRef[j], pDoc ) & nMask) == nMask);
+                        bOk &= ((aAdr.Parse( aRef[j], pDoc, aDetails ) & nMask) == nMask);
                     }
                 }
                 if ( bChanged && bOk )
@@ -1587,11 +1956,15 @@ BOOL ScCompiler::NextNewToken()
         return FALSE;
 }
 
-ScTokenArray* ScCompiler::CompileString( const String& rFormula )
+ScTokenArray* ScCompiler::CompileString( const String& rFormula,
+										 ScAddress::Convention eConv )
 {
     ScTokenArray aArr;
     pArr = &aArr;
     aFormula = rFormula;
+
+	SetRefConvention( eConv );
+
     aFormula.EraseLeadingChars();
     aFormula.EraseTrailingChars();
     nSrcPos = 0;
@@ -2308,9 +2681,11 @@ void ScCompiler::Factor()
             // one parameter:
             case ocFormula:
             // more than one parameters:
-                // ocIndirect otherwise would have to do StopListening and
-                // StartListening on a reference for every interpreted value.
+				// ocIndirect/ocIndirectXL otherwise would have to do
+				// StopListening and StartListening on a reference for every
+				// interpreted value.
             case ocIndirect:
+            case ocIndirectXL:
                 // ocOffset results in indirect references.
             case ocOffset:
                 pArr->SetRecalcModeAlways();
@@ -3721,15 +4096,15 @@ ScToken* ScCompiler::CreateStringFromTok
                 else
                 {
                     rBuffer.append(ScGlobal::GetRscString(STR_NO_NAME_REF));
-                    MakeRefStr( rBuffer, aRef, TRUE );
+					pConv->MakeRefStr (rBuffer, *this, aRef, TRUE );
                 }
             }
             else
-                MakeRefStr( rBuffer, aRef, TRUE );
+				pConv->MakeRefStr( rBuffer, *this, aRef, TRUE );
         }
             break;
         case svDoubleRef:
-            MakeRefStr( rBuffer, t->GetDoubleRef(), FALSE );
+			pConv->MakeRefStr( rBuffer, *this, t->GetDoubleRef(), FALSE );
             break;
         case svIndex:
         {
@@ -3744,7 +4119,7 @@ ScToken* ScCompiler::CreateStringFromTok
                         if (pData->HasType(RT_SHARED))
                             pData->UpdateSymbol( aBuffer, aPos,
                                         pSymbolTable == pSymbolTableEnglish,
-                                        bCompileXML );
+                                        pConv == pConvOOO_A1_XML );
                         else
                             aBuffer.append(pData->GetName());
                     }
Index: sc/source/core/tool/interpr1.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/interpr1.cxx,v
retrieving revision 1.36
retrieving revision 1.36.22.3
diff -u -w -p -r1.36 -r1.36.22.3
--- sc/source/core/tool/interpr1.cxx	28 Sep 2005 11:37:54 -0000	1.36
+++ sc/source/core/tool/interpr1.cxx	1 Dec 2005 19:52:22 -0000	1.36.22.3
@@ -5298,27 +5298,38 @@ void ScInterpreter::ScDBVarP()
 }
 
 
-void ScInterpreter::ScIndirect()
+void ScInterpreter::ScIndirectXL()
 {
 	BYTE nParamCount = GetByte();
-/*
-	if (nParamCount == 2)
-	{
-		double fBool = GetDouble();
-		if (fBool == 0.0)							// nur TRUE erlaubt!!
+	ScAddress::Convention conv = ScAddress::CONV_XL_A1;
+
+	if (nParamCount == 2 && 0. == GetDouble())
+		conv = ScAddress::CONV_XL_R1C1;
+
+	if ( MustHaveParamCount( nParamCount, 1, 2 )  )
 		{
-			SetIllegalParameter();
-			return;
-		}
+		ScAddress::Details const details( conv, aPos );
+		SCTAB nTab = aPos.Tab();
+		String sRefStr( GetString() );
+		ScRefAddress aRefAd, aRefAd2;
+		if ( ConvertDoubleRef( pDok, sRefStr, nTab, aRefAd, aRefAd2, details ) )
+			PushDoubleRef( aRefAd.Col(), aRefAd.Row(), aRefAd.Tab(),
+				aRefAd2.Col(), aRefAd2.Row(), aRefAd2.Tab() );
+		else if ( ConvertSingleRef ( pDok, sRefStr, nTab, aRefAd, details ) )
+			PushSingleRef( aRefAd.Col(), aRefAd.Row(), aRefAd.Tab() );
 		else
-			nParamCount = 1;
+			SetIllegalArgument();
 	}
-*/
+}
+void ScInterpreter::ScIndirect()
+{
+	BYTE nParamCount = GetByte();
 	if ( MustHaveParamCount( nParamCount, 1 )  )
 	{
 		SCTAB nTab = aPos.Tab();
 		String sRefStr( GetString() );
 		ScRefAddress aRefAd, aRefAd2;
+		/* Always OOO format which does not require a position */
 		if ( ConvertDoubleRef( pDok, sRefStr, nTab, aRefAd, aRefAd2 ) )
 			PushDoubleRef( aRefAd.Col(), aRefAd.Row(), aRefAd.Tab(),
 				aRefAd2.Col(), aRefAd2.Row(), aRefAd2.Tab() );
@@ -5372,6 +5383,76 @@ void ScInterpreter::ScAdress()
 		}
 		PushString(aRefStr);
 	}
+}
+
+void ScInterpreter::ScAdressXL()
+{
+	String	sTabStr;
+
+	BYTE	nParamCount = GetByte();
+	if( !MustHaveParamCount( nParamCount, 2, 5 ) )
+		return;
+
+	if( nParamCount >= 5 )
+		sTabStr = GetString();
+
+	ScAddress::Convention eConv = ScAddress::CONV_XL_A1;	// default
+	if( nParamCount >= 4 && (USHORT) ::rtl::math::approxFloor(GetDouble()) == 0 )
+		eConv = ScAddress::CONV_XL_R1C1;
+
+	USHORT	nFlags = SCA_COL_ABSOLUTE | SCA_ROW_ABSOLUTE;	// default
+	if( nParamCount >= 3 )
+	{
+		USHORT n = (USHORT) ::rtl::math::approxFloor(GetDouble());
+		switch ( n )
+		{
+		default :
+			SetNoValue();
+			return;
+
+		case 5:
+		case 1 : break;	// default
+		case 6:
+		case 2 : nFlags = SCA_ROW_ABSOLUTE; break;
+		case 7:
+		case 3 : nFlags = SCA_COL_ABSOLUTE; break;
+		case 8:
+		case 4 : nFlags = 0; break;	// both relative
+		}
+	}
+	nFlags |= SCA_VALID | SCA_VALID_ROW | SCA_VALID_COL;
+
+	SCCOL nCol = (SCCOL) ::rtl::math::approxFloor(GetDouble());
+	SCROW nRow = (SCROW) ::rtl::math::approxFloor(GetDouble());
+	if( eConv == ScAddress::CONV_XL_R1C1 )
+	{
+		// YUCK!  The XL interface actually treats rel R1C1 refs differently
+		// than A1
+		if( !(nFlags & SCA_COL_ABSOLUTE) )
+			nCol += aPos.Col() + 1;
+		if( !(nFlags & SCA_ROW_ABSOLUTE) )
+			nRow += aPos.Row() + 1;
+	}
+
+	if( nCol < 1 || nCol > MAXCOL + 1 || nRow < 1 || nRow > MAXROW + 1 )
+	{
+		SetNoValue();
+		return;
+	}
+
+	String aRefStr;
+	const ScAddress::Details	aDetails( eConv, aPos );
+	const ScAddress aAdr( nCol-1, nRow-1, 0);
+	aAdr.Format( aRefStr, nFlags, pDok, aDetails );
+
+	if( nParamCount >= 5 )
+	{	// TODO Do we need to quote this ?
+		sTabStr += static_cast<sal_Unicode>('!');
+		sTabStr += aRefStr;
+		PushString( sTabStr );
+	}
+	else
+		PushString( aRefStr );
 }
 
 
Index: sc/source/core/tool/interpr4.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/interpr4.cxx,v
retrieving revision 1.39
diff -u -w -p -r1.39 interpr4.cxx
--- sc/source/core/tool/interpr4.cxx	21 Oct 2005 11:54:33 -0000	1.39
+++ sc/source/core/tool/interpr4.cxx	1 Dec 2005 19:53:22 -0000
@@ -3398,7 +3398,9 @@ StackVar ScInterpreter::Interpret()
                 case ocDBVar            : ScDBVar();                    break;
                 case ocDBVarP           : ScDBVarP();                   break;
                 case ocIndirect         : ScIndirect();                 break;
+                case ocIndirectXL       : ScIndirectXL();               break;
                 case ocAdress           : ScAdress();                   break;
+                case ocAdressXL         : ScAdressXL();                 break;
                 case ocMatch            : ScMatch();                    break;
                 case ocCountEmptyCells  : ScCountEmptyCells();          break;
                 case ocCountIf          : ScCountIf();                  break;
Index: sc/source/core/tool/rangelst.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/rangelst.cxx,v
retrieving revision 1.7
retrieving revision 1.7.22.2
diff -u -w -p -r1.7 -r1.7.22.2
--- sc/source/core/tool/rangelst.cxx	28 Sep 2005 11:39:04 -0000	1.7
+++ sc/source/core/tool/rangelst.cxx	1 Dec 2005 19:52:22 -0000	1.7.22.2
@@ -67,7 +67,8 @@ void ScRangeList::RemoveAll()
 	Clear();
 }
 
-USHORT ScRangeList::Parse( const String& rStr, ScDocument* pDoc, USHORT nMask )
+USHORT ScRangeList::Parse( const String& rStr, ScDocument* pDoc, USHORT nMask,
+						   ScAddress::Convention eConv )
 {
 	if ( rStr.Len() )
 	{
@@ -94,7 +95,7 @@ USHORT ScRangeList::Parse( const String&
 				aOne += aStrTmp;
 			}
 			aRange.aStart.SetTab( nTab );	// Default Tab wenn nicht angegeben
-			USHORT nRes = aRange.Parse( aOne, pDoc );
+			USHORT nRes = aRange.Parse( aOne, pDoc, eConv );
 			if ( (nRes & nMask) == nMask )
 				Append( aRange );
 			nResult &= nRes;		// alle gemeinsamen Bits bleiben erhalten
@@ -106,14 +107,15 @@ USHORT ScRangeList::Parse( const String&
 }
 
 
-void ScRangeList::Format( String& rStr, USHORT nFlags, ScDocument* pDoc ) const
+void ScRangeList::Format( String& rStr, USHORT nFlags, ScDocument* pDoc,
+						  ScAddress::Convention eConv ) const
 {
 	rStr.Erase();
 	ULONG nCnt = Count();
 	for ( ULONG nIdx = 0; nIdx < nCnt; nIdx++ )
 	{
 		String aStr;
-		GetObject( nIdx )->Format( aStr, nFlags, pDoc );
+		GetObject( nIdx )->Format( aStr, nFlags, pDoc, eConv );
 		if ( nIdx )
 			rStr += ';';
 		rStr += aStr;
@@ -790,6 +792,7 @@ ScRangePairList::QsortNameCompare( const
 			}
 			return 0;
 	}
+	return 0; // just in case
 }
 
 
Index: sc/source/core/tool/rangenam.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/rangenam.cxx,v
retrieving revision 1.17
retrieving revision 1.17.40.2
diff -u -w -p -r1.17 -r1.17.40.2
--- sc/source/core/tool/rangenam.cxx	8 Sep 2005 18:48:28 -0000	1.17
+++ sc/source/core/tool/rangenam.cxx	1 Dec 2005 19:52:23 -0000	1.17.40.2
@@ -516,7 +516,6 @@ void ScRangeData::UpdateTabRef(SCTAB nOl
 
 void ScRangeData::MakeValidName( String& rName )		// static
 {
-	if (!ScCompiler::HasCharTable())
 		ScCompiler::Init();
 
 	//	ungueltige Zeichen vorne weglassen
@@ -540,27 +539,24 @@ void ScRangeData::MakeValidName( String&
 	}
 
 	// Name darf keine Referenz beinhalten, wie in IsNameValid
-	BOOL bOk;
-	do
-	{
-		bOk = TRUE;
+	ScAddress aAddr;
 		ScRange aRange;
-		if( aRange.Parse( rName, NULL ) )
-			bOk = FALSE;
-		else
+	int nConv = ScAddress::CONV_UNSPECIFIED; // use int so that op++ works
+
+	// Ensure that the proposed name is not an address under any convention
+	while ( ++nConv != ScAddress::CONV_LAST )
 		{
-			ScAddress aAddr;
-			if ( aAddr.Parse( rName, NULL ) )
-				bOk = FALSE;
-		}
-		if ( !bOk )
-		{	//! Range Parse auch bei Bereich mit ungueltigem Tabellennamen gueltig
+		ScAddress::Details details( static_cast<ScAddress::Convention>( nConv ) );
+		while( aRange.Parse( rName, NULL, details )
+			   || aAddr.Parse( rName, NULL, details ) )
+		{
+			//! Range Parse auch bei Bereich mit ungueltigem Tabellennamen gueltig
 			//! Address Parse dito, Name erzeugt deswegen bei Compile ein #REF!
 			if ( rName.SearchAndReplace( ':', '_' ) == STRING_NOTFOUND
 			  && rName.SearchAndReplace( '.', '_' ) == STRING_NOTFOUND )
 				rName.Insert('_',0);
 		}
-	} while ( !bOk );
+	}
 }
 
 BOOL ScRangeData::IsNameValid( const String& rName, ScDocument* pDoc )
@@ -579,12 +575,12 @@ BOOL ScRangeData::IsNameValid( const Str
 	// Parse nicht auf VALID pruefen, es reicht, wenn irgendein Bestandteil
 	// erkannt wurde
 	ScRange aRange;
-	if( aRange.Parse( rName, pDoc ) )
+	if( aRange.Parse( rName, pDoc ) )	// THIS IS WRONG
 		return FALSE;
 	else
 	{
 		ScAddress aAddr;
-		if ( aAddr.Parse( rName, pDoc ) )
+		if ( aAddr.Parse( rName, pDoc ) )	// THIS IS WRONG
 			return FALSE;
 	}
 	return TRUE;
Index: sc/source/core/tool/rangeutl.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/rangeutl.cxx,v
retrieving revision 1.5
retrieving revision 1.5.38.1
diff -u -w -p -r1.5 -r1.5.38.1
--- sc/source/core/tool/rangeutl.cxx	8 Sep 2005 18:48:58 -0000	1.5
+++ sc/source/core/tool/rangeutl.cxx	25 Nov 2005 04:44:40 -0000	1.5.38.1
@@ -57,10 +57,14 @@
 BOOL ScRangeUtil::MakeArea( const String&	rAreaStr,
 							ScArea&			rArea,
 							ScDocument*		pDoc,
-							SCTAB			nTab ) const
+							SCTAB			nTab,
+							ScAddress::Details const & rDetails ) const
 {
 	// Eingabe in rAreaStr: "$Tabelle1.$A1:$D17"
 
+	// BROKEN BROKEN BROKEN
+	// but it is only used in the consolidate dialog.  Ignore for now.
+
 	BOOL		nSuccess	= FALSE;
 	USHORT		nPointPos	= rAreaStr.Search('.');
 	USHORT		nColonPos	= rAreaStr.Search(':');
@@ -75,7 +79,7 @@ BOOL ScRangeUtil::MakeArea( const String
 			aStrArea += rAreaStr.Copy( nPointPos+1 ); // '.' nicht mitkopieren
 		}
 
-	nSuccess = ConvertDoubleRef( pDoc, aStrArea, nTab, startPos, endPos );
+	nSuccess = ConvertDoubleRef( pDoc, aStrArea, nTab, startPos, endPos, rDetails );
 
 	if ( nSuccess )
 		rArea = ScArea( startPos.Tab(),
@@ -91,6 +95,9 @@ void ScRangeUtil::CutPosString( const St
 								String&			thePosStr ) const
 {
 	String	aPosStr;
+	// BROKEN BROKEN BROKEN
+	// but it is only used in the consolidate dialog.  Ignore for now.
+
 	USHORT	nColonPos = theAreaStr.Search(':');
 
 	if ( nColonPos != STRING_NOTFOUND )
@@ -107,12 +114,16 @@ BOOL ScRangeUtil::IsAbsTabArea( const St
 								ScDocument*		pDoc,
 								ScArea***		pppAreas,
 								USHORT*			pAreaCount,
-								BOOL			bAcceptCellRef ) const
+								BOOL			bAcceptCellRef,
+								ScAddress::Details const & rDetails ) const
 {
 	DBG_ASSERT( pDoc, "Kein Dokument uebergeben!" );
 	if ( !pDoc )
 		return FALSE;
 
+	// BROKEN BROKEN BROKEN
+	// but it is only used in the consolidate dialog.  Ignore for now.
+
 	/*
 	 * Erwartet wird ein String der Form
 	 *		"$Tabelle1.$A$1:$Tabelle3.$D$17"
@@ -147,9 +158,9 @@ BOOL ScRangeUtil::IsAbsTabArea( const St
 		aStartPosStr = aTempAreaStr.Copy( 0,		   nColonPos  );
 		aEndPosStr	 = aTempAreaStr.Copy( nColonPos+1, STRING_LEN );
 
-		if ( ConvertSingleRef( pDoc, aStartPosStr, 0, aStartPos ) )
+		if ( ConvertSingleRef( pDoc, aStartPosStr, 0, aStartPos, rDetails ) )
 		{
-			if ( ConvertSingleRef( pDoc, aEndPosStr, aStartPos.Tab(), aEndPos ) )
+			if ( ConvertSingleRef( pDoc, aEndPosStr, aStartPos.Tab(), aEndPos, rDetails ) )
 			{
 				aStartPos.SetRelCol( FALSE );
 				aStartPos.SetRelRow( FALSE );
@@ -195,13 +206,14 @@ BOOL ScRangeUtil::IsAbsArea( const Strin
 							 SCTAB			nTab,
 							 String*		pCompleteStr,
 							 ScRefAddress*	pStartPos,
-							 ScRefAddress*	pEndPos ) const
+							 ScRefAddress*	pEndPos,
+							 ScAddress::Details const & rDetails ) const
 {
 	BOOL		bIsAbsArea = FALSE;
 	ScRefAddress	startPos;
 	ScRefAddress	endPos;
 
-	bIsAbsArea = ConvertDoubleRef( pDoc, rAreaStr, nTab, startPos, endPos );
+	bIsAbsArea = ConvertDoubleRef( pDoc, rAreaStr, nTab, startPos, endPos, rDetails );
 
 	if ( bIsAbsArea )
 	{
@@ -214,9 +226,9 @@ BOOL ScRangeUtil::IsAbsArea( const Strin
 
 		if ( pCompleteStr )
 		{
-			*pCompleteStr  = startPos.GetRefString( pDoc, MAXTAB+1 );
+			*pCompleteStr  = startPos.GetRefString( pDoc, MAXTAB+1, rDetails );
 			*pCompleteStr += ':';
-			*pCompleteStr += endPos  .GetRefString( pDoc, nTab );
+			*pCompleteStr += endPos  .GetRefString( pDoc, nTab, rDetails );
 		}
 
 		if ( pStartPos && pEndPos )
@@ -235,13 +247,13 @@ BOOL ScRangeUtil::IsAbsPos( const String
 							ScDocument*		pDoc,
 							SCTAB			nTab,
 							String*			pCompleteStr,
-							ScRefAddress*	pPosTripel ) const
+							ScRefAddress*	pPosTripel,
+							ScAddress::Details const & rDetails ) const
 {
 	BOOL		bIsAbsPos = FALSE;
 	ScRefAddress	thePos;
 
-	bIsAbsPos = ConvertSingleRef( pDoc, rPosStr, nTab, thePos );
-
+	bIsAbsPos = ConvertSingleRef( pDoc, rPosStr, nTab, thePos, rDetails ); 
 	thePos.SetRelCol( FALSE );
 	thePos.SetRelRow( FALSE );
 	thePos.SetRelTab( FALSE );
@@ -251,7 +263,7 @@ BOOL ScRangeUtil::IsAbsPos( const String
 		if ( pPosTripel )
 			*pPosTripel = thePos;
 		if ( pCompleteStr )
-			*pCompleteStr = thePos.GetRefString( pDoc, MAXTAB+1 );
+			*pCompleteStr = thePos.GetRefString( pDoc, MAXTAB+1, rDetails );
 	}
 
 	return bIsAbsPos;
@@ -264,8 +276,8 @@ BOOL ScRangeUtil::MakeRangeFromName	(
 	ScDocument*		pDoc,
 	SCTAB			nCurTab,
 	ScRange&		rRange,
-	RutlNameScope 	eScope
-								  ) const
+	RutlNameScope 	eScope,
+	ScAddress::Details const & rDetails ) const
 {
 	BOOL bResult=FALSE;
 	ScRangeUtil		aRangeUtil;
@@ -290,7 +302,7 @@ BOOL ScRangeUtil::MakeRangeFromName	(
 			pData->GetSymbol( aStrArea );
 
 			if ( IsAbsArea( aStrArea, pDoc, nCurTab,
-									   NULL, &aStartPos, &aEndPos ) )
+							NULL, &aStartPos, &aEndPos, rDetails ) )
 			{
 				nTab	   = aStartPos.Tab();
 				nColStart  = aStartPos.Col();
@@ -304,7 +316,7 @@ BOOL ScRangeUtil::MakeRangeFromName	(
 				CutPosString( aStrArea, aStrArea );
 
 				if ( IsAbsPos( aStrArea, pDoc, nCurTab,
-										  NULL, &aStartPos ) )
+										  NULL, &aStartPos, rDetails ) )
 				{
 					nTab	   = aStartPos.Tab();
 					nColStart  = nColEnd = aStartPos.Col();
@@ -425,13 +437,14 @@ SvStream& operator<< ( SvStream& rStream
 
 //------------------------------------------------------------------------
 
-void ScArea::GetString( String& rStr, BOOL bAbsolute, ScDocument* pDoc ) const
+void ScArea::GetString( String& rStr, BOOL bAbsolute, ScDocument* pDoc,
+						ScAddress::Details const & rDetails ) const
 {
 	ScRange aRange( ScAddress( nColStart, nRowStart, nTab ),
 					ScAddress( nColEnd,   nRowEnd,   nTab ) );
 	USHORT  nFlags = bAbsolute ? SCA_COL_ABSOLUTE | SCA_ROW_ABSOLUTE : 0;
 
-	aRange.Format( rStr, nFlags, pDoc );
+	aRange.Format( rStr, nFlags, pDoc, rDetails );
 }
 
 //------------------------------------------------------------------------
Index: sc/source/core/tool/reffind.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/reffind.cxx,v
retrieving revision 1.3
retrieving revision 1.3.40.2
diff -u -w -p -r1.3 -r1.3.40.2
--- sc/source/core/tool/reffind.cxx	8 Sep 2005 18:49:48 -0000	1.3
+++ sc/source/core/tool/reffind.cxx	1 Dec 2005 19:52:23 -0000	1.3.40.2
@@ -74,9 +74,11 @@ inline BOOL IsText( BOOL& bQuote, sal_Un
 	return IsText( c );
 }
 
-ScRefFinder::ScRefFinder(const String& rFormula, ScDocument* pDocument) :
+ScRefFinder::ScRefFinder(const String& rFormula, ScDocument* pDocument,
+			 ScAddress::Convention eConvP) :
 	aFormula( rFormula ),
-	pDoc( pDocument )
+	pDoc( pDocument ),
+	eConv( eConvP )
 {
 	nSelStart = nSelEnd = nFound = 0;
 }
Index: sc/source/filter/excel/excdoc.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/excel/excdoc.cxx,v
retrieving revision 1.61
retrieving revision 1.61.22.2
diff -u -w -p -r1.61 -r1.61.22.2
--- sc/source/filter/excel/excdoc.cxx	28 Sep 2005 11:40:47 -0000	1.61
+++ sc/source/filter/excel/excdoc.cxx	1 Dec 2005 19:52:24 -0000	1.61.22.2
@@ -327,7 +327,7 @@ void ExcTable::FillAsTable( size_t nCode
     {
         Add( new ExcBof8 );
         Add( new XclCalccount( rDoc ) );
-        Add( new XclRefmode() );
+        Add( new XclRefmode( rDoc ) );
         Add( new XclIteration( rDoc ) );
         Add( new XclDelta( rDoc ) );
         Add( new ExcDummy8_02 );
Index: sc/source/filter/excel/excform.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/excel/excform.cxx,v
retrieving revision 1.37
retrieving revision 1.36.20.2
diff -u -w -p -r1.37 -r1.36.20.2
--- sc/source/filter/excel/excform.cxx	21 Oct 2005 11:55:38 -0000	1.37
+++ sc/source/filter/excel/excform.cxx	28 Nov 2005 16:21:07 -0000	1.36.20.2
@@ -1366,12 +1366,6 @@ void ExcelToSc::DoMulArgs( DefTokenId eI
 		// Funktionen, bei denen Parameter wegfallen muessen
 		if( eId == ocPercentrank && nAnz == 3 )
 			nSkipEnd = 0;		// letzten Parameter bei Bedarf weglassen
-
-		else if( eId == ocIndirect && nAnz == 2 )
-			nSkipEnd = 0;
-
-		else if( eId == ocAdress && nAnz > 3 )
-			nNull = nAnz - 4;
 
 		// Joost-Spezialfaelle
 		else if( eId == ocIf )
Index: sc/source/filter/excel/excimp8.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/excel/excimp8.cxx,v
retrieving revision 1.108
retrieving revision 1.108.22.2
diff -u -w -p -r1.108 -r1.108.22.2
--- sc/source/filter/excel/excimp8.cxx	28 Sep 2005 11:42:07 -0000	1.108
+++ sc/source/filter/excel/excimp8.cxx	1 Dec 2005 19:52:24 -0000	1.108.22.2
@@ -198,6 +198,12 @@ void ImportExcel8::Iteration( void )
 }
 
 
+void ImportExcel8::RefMode( void )
+{
+	pD->SetAddressConvention( (aIn.ReaduInt16() == 0)
+				  ? ScAddress::CONV_XL_R1C1
+				  : ScAddress::CONV_OOO );
+}
 void ImportExcel8:: WinProtection( void )
 {
     if( aIn.ReaduInt16() != 0 )
Index: sc/source/filter/excel/impop.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/excel/impop.cxx,v
retrieving revision 1.76
retrieving revision 1.76.22.2
diff -u -w -p -r1.76 -r1.76.22.2
--- sc/source/filter/excel/impop.cxx	28 Sep 2005 11:43:13 -0000	1.76
+++ sc/source/filter/excel/impop.cxx	25 Nov 2005 04:44:42 -0000	1.76.22.2
@@ -563,8 +563,8 @@ void ImportExcel::Array25( void )
         aMarkData.SelectOneTable( GetCurrScTab() );
         pD->InsertMatrixFormula( static_cast<SCCOL>(nFirstCol),
                 static_cast<SCROW>(nFirstRow), static_cast<SCCOL>(nLastCol),
-                static_cast<SCROW>(nLastRow), aMarkData, EMPTY_STRING,
-                pErgebnis );
+                static_cast<SCROW>(nLastRow), aMarkData,
+				EMPTY_STRING, pErgebnis );
 	}
 }
 
@@ -1220,8 +1220,8 @@ void ImportExcel::Array34( void )
         aMarkData.SelectOneTable( GetCurrScTab() );
         pD->InsertMatrixFormula( static_cast<SCCOL>(nFirstCol),
                 static_cast<SCROW>(nFirstRow), static_cast<SCCOL>(nLastCol),
-                static_cast<SCROW>(nLastRow), aMarkData, EMPTY_STRING,
-                pErgebnis);
+                static_cast<SCROW>(nLastRow), aMarkData,
+				EMPTY_STRING, pErgebnis);
 	}
 
 	pLastFormCell = NULL;
Index: sc/source/filter/excel/read.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/excel/read.cxx,v
retrieving revision 1.55
retrieving revision 1.55.22.1
diff -u -w -p -r1.55 -r1.55.22.1
--- sc/source/filter/excel/read.cxx	28 Sep 2005 11:44:16 -0000	1.55
+++ sc/source/filter/excel/read.cxx	26 Nov 2005 04:04:15 -0000	1.55.22.1
@@ -1232,6 +1232,7 @@ FltError ImportExcel8::Read( void )
                     switch( nRecId )
 					{
 						case 0x000C:	Calccount();			break;	// CALCCOUNT
+						case 0x000F:	RefMode();				break;	// REFMODE
 						case 0x0010:	Delta();				break;	// DELTA
 						case 0x0011:	Iteration();			break;	// ITERATION
 						case 0x0200:	Dimensions();			break;	// DIMENSIONS	[      8 ]
Index: sc/source/filter/excel/xlformula.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/excel/xlformula.cxx,v
retrieving revision 1.11
retrieving revision 1.10.20.5
diff -u -w -p -r1.11 -r1.10.20.5
--- sc/source/filter/excel/xlformula.cxx	21 Oct 2005 12:01:01 -0000	1.11
+++ sc/source/filter/excel/xlformula.cxx	28 Nov 2005 18:01:08 -0000	1.10.20.5
@@ -177,7 +177,8 @@ static const XclFunctionInfo saFuncTable
     { ocLIA,                142,    3,  3,  V, { V } },
     { ocDIA,                143,    4,  4,  V, { V } },
     { ocGDA,                144,    4,  5,  V, { V } },
-    { ocIndirect,           148,    1,  2,  R, { V }, EXC_FUNCFLAG_VOLATILE },
+    { ocIndirectXL,         148,    1,  2,  R, { V }, EXC_FUNCFLAG_VOLATILE },
+    { ocIndirect,           148,    1,  2,  R, { V }, EXC_FUNCFLAG_VOLATILE | EXC_FUNCFLAG_EXPORTONLY },
     { ocClean,              162,    1,  1,  V, { V } },
     { ocMatDet,             163,    1,  1,  V, { A } },
     { ocMatInv,             164,    1,  1,  A, { A } },
@@ -209,7 +210,8 @@ static const XclFunctionInfo saFuncTable
     { ocRKP,                51,     1,  4,  A, { R, R, V, V } },    // BIFF2: 1-2, BIFF3: 1-4
     { ocGrowth,             52,     1,  4,  A, { R, R, R, V } },    // BIFF2: 1-3, BIFF3: 1-4
     { ocTrunc,              197,    1,  2,  V, { V } },             // BIFF2: 1,   BIFF3: 1-2
-    { ocAdress,             219,    2,  5,  V, { V, V, V, E, V } },
+    { ocAdressXL,           219,    2,  5,  V, { V, V, V, V, V } },
+    { ocAdress,             219,    2,  5,  V, { V, V, V, E, V }, EXC_FUNCFLAG_EXPORTONLY },
     { ocGetDiffDate360,     220,    2,  2,  V, { V, V, C, I } },
     { ocGetActDate,         221,    0,  0,  V, {}, EXC_FUNCFLAG_VOLATILE },
     { ocVBD,                222,    5,  7,  V, { V } },
Index: sc/source/filter/inc/excimp8.hxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/inc/excimp8.hxx,v
retrieving revision 1.62
retrieving revision 1.62.22.1
diff -u -w -p -r1.62 -r1.62.22.1
--- sc/source/filter/inc/excimp8.hxx	28 Sep 2005 11:56:32 -0000	1.62
+++ sc/source/filter/inc/excimp8.hxx	25 Nov 2005 04:44:43 -0000	1.62.22.1
@@ -78,6 +78,7 @@ class ImportExcel8 : public ImportExcel
 		void					RecString( void );				// 0x07
 		void					Calccount( void );				// 0x0C
         void                    Precision( void );              // 0x0E
+		void					RefMode( void );				// 0x0F
 		void					Delta( void );					// 0x10
 		void					Iteration( void );				// 0x11
 		void					Note( void );					// 0x1C
Index: sc/source/filter/inc/xcl97dum.hxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/inc/xcl97dum.hxx,v
retrieving revision 1.8
retrieving revision 1.8.40.1
diff -u -w -p -r1.8 -r1.8.40.1
--- sc/source/filter/inc/xcl97dum.hxx	8 Sep 2005 19:26:42 -0000	1.8
+++ sc/source/filter/inc/xcl97dum.hxx	25 Nov 2005 04:44:43 -0000	1.8.40.1
@@ -94,17 +94,6 @@ private:
 public:
 	virtual	ULONG				GetLen() const;
 	virtual	const BYTE*			GetData() const;
-};
-
-
-class XclRefmode : public ExcDummyRec
-{
-private:
-	static const BYTE		pMyData[];
-	static const ULONG		nMyLen;
-public:
-	virtual ULONG			GetLen( void ) const;
-	virtual	const BYTE*		GetData( void ) const;
 };
 
 
Index: sc/source/filter/inc/xcl97rec.hxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/inc/xcl97rec.hxx,v
retrieving revision 1.44
retrieving revision 1.44.22.2
diff -u -w -p -r1.44 -r1.44.22.2
--- sc/source/filter/inc/xcl97rec.hxx	28 Sep 2005 11:58:16 -0000	1.44
+++ sc/source/filter/inc/xcl97rec.hxx	1 Dec 2005 19:52:25 -0000	1.44.22.2
@@ -505,6 +505,20 @@ public:
 	virtual ULONG				GetLen( void ) const;
 	virtual	const BYTE*			GetData( void ) const;
 };
+
+class XclRefmode : public ExcRecord
+{
+private:
+	UINT16					    eConv;
+protected:
+	virtual void				SaveCont( XclExpStream& rStrm );
+public:
+								XclRefmode( ScDocument& rDoc );
+
+	virtual	UINT16				GetNum() const;
+	virtual	ULONG				GetLen() const;
+};
+
 
 
 // -------------------------------------------------------------------
Index: sc/source/filter/lotus/lotform.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/lotus/lotform.cxx,v
retrieving revision 1.10
retrieving revision 1.10.40.1
diff -u -w -p -r1.10 -r1.10.40.1
--- sc/source/filter/lotus/lotform.cxx	8 Sep 2005 19:41:26 -0000	1.10
+++ sc/source/filter/lotus/lotform.cxx	25 Nov 2005 04:44:44 -0000	1.10.40.1
@@ -1057,7 +1057,7 @@ DefTokenId LotusToSc::IndexToToken( BYTE
 		ocTrue,				//  112 W()
 		ocExact,			//  113 Exact()
 		ocNoName,			//  114 Call()
-		ocIndirect,			//  115 @@()
+		ocIndirectXL,		//  115 @@()
 		ocZins,				//  116 Rate()
 		ocNoName,			//  117 Term()
 		ocNoName,			//  118 Cterm()
@@ -1588,7 +1588,7 @@ DefTokenId LotusToSc::IndexToTokenWK123(
 		ocNoName,			//  112 W()
 		ocExact,			//  113 Exact()
 		ocNoName,			//  114 Call()
-		ocIndirect,			//  115 @@()
+		ocIndirectXL,		//  115 @@()
 		ocZins,				//  116 Rate()
 		ocNoName,			//  117 Term()
 		ocNoName,			//  118 Cterm()
Index: sc/source/filter/xcl97/xcl97dum.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/xcl97/xcl97dum.cxx,v
retrieving revision 1.17
retrieving revision 1.17.22.1
diff -u -w -p -r1.17 -r1.17.22.1
--- sc/source/filter/xcl97/xcl97dum.cxx	28 Sep 2005 12:04:38 -0000	1.17
+++ sc/source/filter/xcl97/xcl97dum.cxx	25 Nov 2005 04:44:44 -0000	1.17.22.1
@@ -105,10 +105,6 @@ const BYTE ExcDummy8_02::pMyData[] = {
 const ULONG ExcDummy8_02::nMyLen = sizeof(ExcDummy8_02::pMyData);
 
 
-const BYTE	XclRefmode::pMyData[] = { 0x0f, 0x00, 0x02, 0x00, 0x01, 0x00 };	// REFMODE
-const ULONG	XclRefmode::nMyLen = sizeof( XclRefmode::pMyData );
-
-
 // --- class ExcDummy8_xx --------------------------------------------
 
 ULONG ExcDummy8_00a::GetLen() const
@@ -173,19 +169,4 @@ const BYTE* ExcDummy8_02::GetData() cons
 {
 	return pMyData;
 }
-
-
-
-ULONG XclRefmode::GetLen( void ) const
-{
-	return nMyLen;
-}
-
-
-const BYTE* XclRefmode::GetData( void ) const
-{
-	return pMyData;
-}
-
-
 
Index: sc/source/filter/xcl97/xcl97rec.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/xcl97/xcl97rec.cxx,v
retrieving revision 1.79
retrieving revision 1.79.16.2
diff -u -w -p -r1.79 -r1.79.16.2
--- sc/source/filter/xcl97/xcl97rec.cxx	6 Oct 2005 11:10:35 -0000	1.79
+++ sc/source/filter/xcl97/xcl97rec.cxx	1 Dec 2005 19:52:25 -0000	1.79.16.2
@@ -1303,6 +1303,28 @@ const BYTE* XclProtection::GetData( void
 
 
 
+void XclRefmode::SaveCont( XclExpStream& rStrm )
+{
+	rStrm << eConv;
+}
+
+
+XclRefmode::XclRefmode( ScDocument& rDoc )
+{
+	eConv = (rDoc.GetAddressConvention() == ScAddress::CONV_XL_R1C1) ? 0 : 1;
+}
+
+
+UINT16 XclRefmode::GetNum() const
+{
+	return 0x000f;
+}
+
+
+ULONG XclRefmode::GetLen() const
+{
+	return 2;
+}
 
 
 
Index: sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx,v
retrieving revision 1.22
retrieving revision 1.22.38.1
diff -u -w -p -r1.22 -r1.22.38.1
--- sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx	8 Sep 2005 19:50:00 -0000	1.22
+++ sc/source/filter/xml/XMLChangeTrackingImportHelper.cxx	25 Nov 2005 04:44:45 -0000	1.22.38.1
@@ -108,7 +108,7 @@ ScBaseCell* ScMyCellInfo::CreateCell(ScD
 			ScAddress aPos;
 			sal_Int32 nOffset(0);
 			ScXMLConverter::GetAddressFromString(aPos, sFormulaAddress, pDoc, nOffset);
-			pCell = new ScFormulaCell(pDoc, aPos, sFormula, nMatrixFlag);
+			pCell = new ScFormulaCell(pDoc, aPos, sFormula, ScAddress::CONV_OOO, nMatrixFlag);
 			static_cast<ScFormulaCell*>(pCell)->SetMatColsRows(static_cast<SCCOL>(nMatrixCols), static_cast<SCROW>(nMatrixRows));
 		}
 
@@ -776,11 +776,11 @@ void ScXMLChangeTrackingImportHelper::Se
 						{
 							sal_uInt8 nMatrixFlag = static_cast<ScFormulaCell*>(pCell)->GetMatrixFlag();
 							String sFormula;
-							static_cast<ScFormulaCell*>(pCell)->GetFormula(sFormula);
+							static_cast<ScFormulaCell*>(pCell)->GetFormula(sFormula, ScAddress::CONV_OOO);
 							rtl::OUString sOUFormula(sFormula);
 							rtl::OUString sOUFormula2(sOUFormula.copy(2, sOUFormula.getLength() - 3));
 							String sFormula2(sOUFormula2);
-							pNewCell = new ScFormulaCell(pDoc, aAddress, sFormula2, nMatrixFlag);
+							pNewCell = new ScFormulaCell(pDoc, aAddress, sFormula2, ScAddress::CONV_OOO, nMatrixFlag);
 							if (pNewCell)
 							{
 								if (nMatrixFlag == MM_FORMULA)
Index: sc/source/filter/xml/XMLConverter.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/xml/XMLConverter.cxx,v
retrieving revision 1.23
retrieving revision 1.23.38.1
diff -u -w -p -r1.23 -r1.23.38.1
--- sc/source/filter/xml/XMLConverter.cxx	8 Sep 2005 19:51:28 -0000	1.23
+++ sc/source/filter/xml/XMLConverter.cxx	25 Nov 2005 04:44:46 -0000	1.23.38.1
@@ -362,8 +362,10 @@ void ScXMLConverter::GetStringFromRange(
 		ScAddress aEndAddress( rRange.aEnd );
 		String sStartAddress;
 		String sEndAddress;
-		aStartAddress.Format( sStartAddress, nFormatFlags, (ScDocument*) pDocument );
-		aEndAddress.Format( sEndAddress, nFormatFlags, (ScDocument*) pDocument );
+		aStartAddress.Format( sStartAddress, nFormatFlags, (ScDocument*) pDocument,
+							  ScAddress::CONV_OOO );
+		aEndAddress.Format( sEndAddress, nFormatFlags, (ScDocument*) pDocument,
+							ScAddress::CONV_OOO );
 		OUString sOUStartAddress( sStartAddress );
 		sOUStartAddress += GetXMLToken( XML__COLON );
 		sOUStartAddress += OUString( sEndAddress );
Index: sc/source/ui/Accessibility/AccessibleCellBase.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/Accessibility/AccessibleCellBase.cxx,v
retrieving revision 1.16
retrieving revision 1.16.40.1
diff -u -w -p -r1.16 -r1.16.40.1
--- sc/source/ui/Accessibility/AccessibleCellBase.cxx	8 Sep 2005 20:16:00 -0000	1.16
+++ sc/source/ui/Accessibility/AccessibleCellBase.cxx	25 Nov 2005 04:44:46 -0000	1.16.40.1
@@ -268,6 +268,7 @@ sal_Int32
 	String sName( ScResId(STR_ACC_CELL_NAME) );
 	String sAddress;
 	// Document not needed, because only the cell address, but not the tablename is needed
+	// always us OOO notation
 	maCellAddress.Format( sAddress, SCA_VALID, NULL );
 	sName.SearchAndReplaceAscii("%1", sAddress);
     return rtl::OUString(sName);
Index: sc/source/ui/app/inputhdl.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/app/inputhdl.cxx,v
retrieving revision 1.60
retrieving revision 1.60.36.3
diff -u -w -p -r1.60 -r1.60.36.3
--- sc/source/ui/app/inputhdl.cxx	8 Sep 2005 20:22:13 -0000	1.60
+++ sc/source/ui/app/inputhdl.cxx	1 Dec 2005 19:52:27 -0000	1.60.36.3
@@ -168,13 +168,27 @@ void ScInputHandler::InitRangeFinder( co
 
 		//	Text zwischen Trennern
 		nStart = nPos;
+handle_r1c1:
 		while ( nPos<nLen && !ScGlobal::UnicodeStrChr( aDelimiters.GetBuffer(), pChar[nPos] ) )
 			++nPos;
 
+		// for R1C1 '-' in R[-]... or C[-]... are not delimiters
+		// Nothing heroic here to ensure that there are '[]' around a negative
+		// integer.  we need to clean up this code.
+		if( nPos < nLen && nPos > 0 &&
+			'-' == pChar[nPos] && '[' == pChar[nPos-1] &&
+			NULL != pDoc &&
+			ScAddress::CONV_XL_R1C1 == pDoc->GetAddressConvention() )
+		{
+			nPos++;
+			goto handle_r1c1;
+		}
+
 		if ( nPos > nStart )
 		{
 			String aTest = rFormula.Copy( nStart, nPos-nStart );
-			USHORT nFlags = aRange.ParseAny( aTest, pDoc );
+			const ScAddress::Details aAddrDetails( pDoc, aCursorPos );
+			USHORT nFlags = aRange.ParseAny( aTest, pDoc, aAddrDetails );
 			if ( nFlags & SCA_VALID )
 			{
 				//	Tabelle setzen, wenn nicht angegeben
@@ -246,7 +260,9 @@ void ScInputHandler::UpdateRange( USHORT
 		ScRange aJustified = rNew;
 		aJustified.Justify();			// Ref in der Formel immer richtigherum anzeigen
 		String aNewStr;
-		aJustified.Format( aNewStr, pData->nFlags, pDocView->GetViewData()->GetDocument() );
+		ScDocument* pDoc = pDocView->GetViewData()->GetDocument();
+		const ScAddress::Details aAddrDetails( pDoc, aCursorPos );
+		aJustified.Format( aNewStr, pData->nFlags, pDoc, aAddrDetails );
 		ESelection aOldSel( 0, nOldStart, 0, nOldEnd );
 
 		DataChanging();
@@ -2435,6 +2451,7 @@ void ScInputHandler::SetReference( const
 	//	String aus Referenz erzeugen
 
 	String aRefStr;
+	const ScAddress::Details aAddrDetails( pDoc, aCursorPos );
 	if (bOtherDoc)
 	{
 		//	Referenz auf anderes Dokument
@@ -2442,7 +2459,7 @@ void ScInputHandler::SetReference( const
 		DBG_ASSERT(rRef.aStart.Tab()==rRef.aEnd.Tab(), "nStartTab!=nEndTab");
 
 		String aTmp;
-		rRef.Format( aTmp, SCA_VALID|SCA_TAB_3D, pDoc );		// immer 3d
+		rRef.Format( aTmp, SCA_VALID|SCA_TAB_3D, pDoc, aAddrDetails );		// immer 3d
 
 		SfxObjectShell* pObjSh = pDoc->GetDocumentShell();
 		String aFileName = pObjSh->GetMedium()->GetName();
@@ -2456,9 +2473,9 @@ void ScInputHandler::SetReference( const
 	{
 		if ( ( rRef.aStart.Tab() != aCursorPos.Tab() ||
 				rRef.aStart.Tab() != rRef.aEnd.Tab() ) && pDoc )
-			rRef.Format( aRefStr, SCA_VALID|SCA_TAB_3D, pDoc );
+			rRef.Format( aRefStr, SCA_VALID|SCA_TAB_3D, pDoc, aAddrDetails );
 		else
-			rRef.Format( aRefStr, SCA_VALID );
+			rRef.Format( aRefStr, SCA_VALID, pDoc, aAddrDetails );
 	}
 
 	if (pTableView || pTopView)
@@ -2951,6 +2968,8 @@ void ScInputHandler::NotifyChange( const
 					const EditTextObject*	pData	= pState->GetEditData();
 					String					aString = pState->GetString();
 					BOOL					bTxtMod = FALSE;
+					ScDocShell* pDocSh = pActiveViewSh->GetViewData()->GetDocShell();
+					ScDocument* pDoc = pDocSh->GetDocument();
 
 					aCursorPos	= pState->GetPos();
 
@@ -2986,6 +3005,7 @@ void ScInputHandler::NotifyChange( const
 					if ( pInputWin )						// Bereichsanzeige
 					{
 						String aPosStr;
+						const ScAddress::Details aAddrDetails( pDoc, aCursorPos );
 
 						//	Ist der Bereich ein Name?
 						//!	per Timer suchen ???
@@ -2998,14 +3018,11 @@ void ScInputHandler::NotifyChange( const
 						{
 							if ( rSPos != rEPos )
 							{
-								String aStr;
-								rSPos.Format( aPosStr, SCA_VALID );
-								aPosStr += ':';
-								rEPos.Format( aStr, SCA_VALID );
-								aPosStr += aStr;
+								ScRange r(rSPos, rEPos);
+								r.Format( aPosStr, SCA_VALID, pDoc, aAddrDetails );
 							}
 							else
-								aCursorPos.Format( aPosStr, SCA_VALID );
+								aCursorPos.Format( aPosStr, SCA_VALID, pDoc, aAddrDetails );
 						}
 
 						pInputWin->SetPosString(aPosStr);
Index: sc/source/ui/attrdlg/condfrmt.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/attrdlg/condfrmt.cxx,v
retrieving revision 1.6
retrieving revision 1.6.40.2
diff -u -w -p -r1.6 -r1.6.40.2
--- sc/source/ui/attrdlg/condfrmt.cxx	8 Sep 2005 20:26:42 -0000	1.6
+++ sc/source/ui/attrdlg/condfrmt.cxx	1 Dec 2005 19:52:27 -0000	1.6.40.2
@@ -346,7 +346,7 @@ void ScConditionalFormatDlg::SetReferenc
 			RefInputStart(pEdActive);
 
 		String aStr;
-		rRef.Format( aStr, SCR_ABS_3D, pDoc );
+		rRef.Format( aStr, SCR_ABS_3D, pDoc, pDoc->GetAddressConvention () );
 		String aVal( pEdActive->GetText() );
 		Selection aSel( pEdActive->GetSelection() );
         aSel.Justify();
Index: sc/source/ui/docshell/docfunc.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/docshell/docfunc.cxx,v
retrieving revision 1.55
retrieving revision 1.55.22.2
diff -u -w -p -r1.55 -r1.55.22.2
--- sc/source/ui/docshell/docfunc.cxx	28 Sep 2005 12:09:11 -0000	1.55
+++ sc/source/ui/docshell/docfunc.cxx	1 Dec 2005 19:52:28 -0000	1.55.22.2
@@ -2210,6 +2210,42 @@ BOOL ScDocFunc::SetLayoutRTL( SCTAB nTab
 	{
 		pBindings->Invalidate( FID_TAB_RTL );
 		pBindings->Invalidate( SID_ATTR_SIZE );
+	}
+
+	return TRUE;
+}
+
+BOOL ScDocFunc::SetAddressConvention( ScAddress::Convention eConv )
+{
+	ScDocument* pDoc = rDocShell.GetDocument();
+
+	if ( pDoc->GetAddressConvention() == eConv )
+		return TRUE;
+
+	BOOL bUndo(pDoc->IsUndoEnabled());
+	ScDocShellModificator aModificator( rDocShell );
+
+	pDoc->SetAddressConvention( eConv );
+
+	if (bUndo)
+	{
+		rDocShell.GetUndoManager()->AddUndoAction( new ScUndoSetAddressConvention( &rDocShell, eConv ) );
+	}
+
+	rDocShell.PostPaint( 0,0,0,MAXCOL,MAXROW,MAXTAB, PAINT_ALL );
+
+	ScTabViewShell* pViewSh = ScTabViewShell::GetActiveViewShell();
+	if (NULL != pViewSh)
+	{
+	    pViewSh->UpdateInputHandler( FALSE, FALSE );
+	}
+
+	aModificator.SetDocumentModified();
+
+	SfxBindings* pBindings = rDocShell.GetViewBindings();
+	if (pBindings)
+	{
+		pBindings->Invalidate( FID_TAB_USE_R1C1 );
 	}
 
 	return TRUE;
Index: sc/source/ui/inc/colrowba.hxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/inc/colrowba.hxx,v
retrieving revision 1.4
retrieving revision 1.4.40.1
diff -u -w -p -r1.4 -r1.4.40.1
--- sc/source/ui/inc/colrowba.hxx	8 Sep 2005 21:15:24 -0000	1.4
+++ sc/source/ui/inc/colrowba.hxx	25 Nov 2005 04:44:50 -0000	1.4.40.1
@@ -79,6 +79,8 @@ public:
 	virtual void		DrawInvert( long nDragPos );
 
 	virtual String		GetDragHelp( long nVal );
+
+			BOOL		UseNumericHeader() const;
 };
 
 
Index: sc/source/ui/inc/docfunc.hxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/inc/docfunc.hxx,v
retrieving revision 1.12
retrieving revision 1.12.40.2
diff -u -w -p -r1.12 -r1.12.40.2
--- sc/source/ui/inc/docfunc.hxx	8 Sep 2005 21:21:03 -0000	1.12
+++ sc/source/ui/inc/docfunc.hxx	1 Dec 2005 19:52:29 -0000	1.12.40.2
@@ -126,6 +126,8 @@ public:
 	BOOL			SetTableVisible( SCTAB nTab, BOOL bVisible, BOOL bApi );
 
 	BOOL			SetLayoutRTL( SCTAB nTab, BOOL bRTL, BOOL bApi );
+
+	BOOL	 	    SetAddressConvention( ScAddress::Convention eConv );
 
 	BOOL			SetWidthOrHeight( BOOL bWidth, SCCOLROW nRangeCnt, SCCOLROW* pRanges,
 									SCTAB nTab, ScSizeMode eMode, USHORT nSizeTwips,
Index: sc/source/ui/inc/transobj.hxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/inc/transobj.hxx,v
retrieving revision 1.14
retrieving revision 1.14.40.2
diff -u -w -p -r1.14 -r1.14.40.2
--- sc/source/ui/inc/transobj.hxx	8 Sep 2005 22:01:04 -0000	1.14
+++ sc/source/ui/inc/transobj.hxx	1 Dec 2005 19:52:29 -0000	1.14.40.2
Index: sc/source/ui/inc/undoblk.hxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/inc/undoblk.hxx,v
retrieving revision 1.13
retrieving revision 1.12.36.3
diff -u -w -p -r1.13 -r1.12.36.3
--- sc/source/ui/inc/undoblk.hxx	21 Oct 2005 12:05:00 -0000	1.13
+++ sc/source/ui/inc/undoblk.hxx	1 Dec 2005 19:52:29 -0000	1.12.36.3
@@ -718,6 +718,7 @@ public:
 private:
 	ScDocument*		pUndoDoc;
 	String			aFormula;
+	ScAddress::Convention eConv;
 	ULONG			nStartChangeAction;
 	ULONG			nEndChangeAction;
 
Index: sc/source/ui/inc/undotab.hxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/inc/undotab.hxx,v
retrieving revision 1.8
retrieving revision 1.8.38.2
diff -u -w -p -r1.8 -r1.8.38.2
--- sc/source/ui/inc/undotab.hxx	8 Sep 2005 22:03:47 -0000	1.8
+++ sc/source/ui/inc/undotab.hxx	1 Dec 2005 19:52:30 -0000	1.8.38.2
@@ -478,6 +478,26 @@ private:
 };
 
 
+class ScUndoSetAddressConvention : public ScSimpleUndo
+{
+public:
+					TYPEINFO();
+					ScUndoSetAddressConvention( ScDocShell* pShell,
+												ScAddress::Convention eConv );
+	virtual			~ScUndoSetAddressConvention();
+
+	virtual void	Undo();
+	virtual void	Redo();
+	virtual void	Repeat(SfxRepeatTarget& rTarget);
+	virtual BOOL	CanRepeat(SfxRepeatTarget& rTarget) const;
+
+	virtual String	GetComment() const;
+
+private:
+	ScAddress::Convention eNewConv, eOldConv;
+
+	void DoChange( ScAddress::Convention eConv );
+};
 
 #endif
 
Index: sc/source/ui/src/globstr.src
===================================================================
RCS file: /cvs/sc/sc/source/ui/src/globstr.src,v
retrieving revision 1.63
retrieving revision 1.63.24.1
diff -u -w -p -r1.63 -r1.63.24.1
--- sc/source/ui/src/globstr.src	23 Sep 2005 15:06:42 -0000	1.63
+++ sc/source/ui/src/globstr.src	18 Nov 2005 15:50:47 -0000	1.63.24.1
@@ -1798,6 +1798,10 @@ Resource RID_GLOBSTR
 	{
 		Text [ de ] = "Tabelle wenden" ;
 		Text [ en-US ] = "Flip sheet" ;
+	};
+	String STR_UNDO_TAB_R1C1
+	{
+		Text [ en-US ] = "Toggle the use of R1C1 notation" ;
 	};
 	String STR_CHART_MAINTITLE
 	{
Index: sc/source/ui/src/menue.src
===================================================================
RCS file: /cvs/sc/sc/source/ui/src/menue.src,v
retrieving revision 1.115
retrieving revision 1.115.24.2
diff -u -w -p -r1.115 -r1.115.24.2
--- sc/source/ui/src/menue.src	23 Sep 2005 15:07:14 -0000	1.115
+++ sc/source/ui/src/menue.src	25 Nov 2005 04:44:54 -0000	1.115.24.2
@@ -409,6 +409,14 @@ Menu RID_OBJECTMENU_CELLS
 						Text [ de ] = "~Rechts-nach-links" ;
 						Text [ en-US ] = "R~ight-To-Left" ;
 					};
+					MenuItem
+					{
+						Identifier = FID_TAB_USE_R1C1 ;
+						HelpId = FID_TAB_USE_R1C1 ;
+						Text [ de ] = "R1C1" ;
+						Text [ en-US ] = "Use R1~C1" ;
+						Text [ x-comment ] = " ";
+					};
 				};
 			};
 			Text [ x-comment ] = " ";
@@ -715,6 +723,14 @@ Menu RID_OBJECTMENU_EDIT
 						HelpId = FID_TAB_RTL ;
 						Text [ de ] = "~Rechts-nach-links" ;
 						Text [ en-US ] = "R~ight-To-Left" ;
+					};
+					MenuItem
+					{
+						Identifier = FID_TAB_USE_R1C1 ;
+						HelpId = FID_TAB_USE_R1C1 ;
+						Text [ de ] = "R1C1" ;
+						Text [ en-US ] = "Use R1~C1" ;
+						Text [ x-comment ] = " ";
 					};
 				};
 			};
Index: sc/source/ui/src/scfuncs.src
===================================================================
RCS file: /cvs/sc/sc/source/ui/src/scfuncs.src,v
retrieving revision 1.85
retrieving revision 1.84.22.2
diff -u -w -p -r1.85 -r1.84.22.2
--- sc/source/ui/src/scfuncs.src	21 Oct 2005 12:08:35 -0000	1.85
+++ sc/source/ui/src/scfuncs.src	28 Nov 2005 16:06:41 -0000	1.84.22.2
@@ -9049,6 +9049,81 @@ Resource RID_SC_FUNCTION_DESCRIPTIONS2
 			Text [ x-comment ] = " ";
 		};
 	};
+	Resource SC_OPCODE_ADRESS_XL
+	{
+		String 1 // Description
+		{
+			Text [ de ] = "Bestimmt den Bezug auf eine Zelle als Text." ;
+			Text [ en-US ] = "Returns the reference to a cell as text." ;
+			Text [ x-comment ] = " ";
+		};
+		ExtraData =
+		{
+			ID_FUNCTION_GRP_TABLE;
+			U2S( HID_FUNC_ADRESSE_XL );
+			5;	0;	0;	1;	1;	1;
+		};
+		String 2 // Name of Parameter 1
+		{
+			Text [ de ] = "Zeile" ;
+			Text [ en-US ] = "row" ;
+			Text [ x-comment ] = " ";
+		};
+		String 3 // Description of Parameter 1
+		{
+			Text [ de ] = "Die Zeilennummer der Zelle." ;
+			Text [ en-US ] = "The row number of the cell." ;
+			Text [ x-comment ] = " ";
+		};
+		String 4 // Name of Parameter 2
+		{
+			Text [ de ] = "Spalte" ;
+			Text [ en-US ] = "column" ;
+			Text [ x-comment ] = " ";
+		};
+		String 5 // Description of Parameter 2
+		{
+			Text [ de ] = "Die Spaltennummer der Zelle." ;
+			Text [ en-US ] = "The column number of the cell." ;
+			Text [ x-comment ] = " ";
+		};
+		String 6 // Name of Parameter 3
+		{
+			Text [ de ] = "ABS" ;
+			Text [ en-US ] = "ABS" ;
+			Text [ x-comment ] = " ";
+		};
+		String 7 // Description of Parameter 3
+		{
+			Text [ de ] = "Gibt an, ob absolute oder relative Referenzierung verwendet wird." ;
+			Text [ en-US ] = "Specifies whether absolute or relative referencing is to be used." ;
+			Text [ x-comment ] = " ";
+		};
+		String 8 // Name of Parameter 4
+		{
+			Text [ de ] = " ";
+			Text [ en-US ] = "A1";
+			Text [ x-comment ] = " ";
+		};
+		String 9 // Description of Parameter 4
+		{
+			Text [ de ] = " ";
+			Text [ en-US ] = "If TRUE (or 1) or omitted generate A1 style address, otherwise produce R1C1 style address.";
+			Text [ x-comment ] = " ";
+		};
+		String 10 // Name of Parameter 5
+		{
+			Text [ de ] = "Tabelle" ;
+			Text [ en-US ] = "sheet" ;
+			Text [ x-comment ] = " ";
+		};
+		String 11 // Description of Parameter 5
+		{
+			Text [ de ] = "Der Tabellenname des Zellbezugs." ;
+			Text [ en-US ] = "The spreadsheet name of the cell reference." ;
+			Text [ x-comment ] = " ";
+		};
+	};
 	 // -=*# Resource for function BEREICHE #*=-
 	Resource SC_OPCODE_AREAS
 	{
@@ -9511,6 +9586,46 @@ Resource RID_SC_FUNCTION_DESCRIPTIONS2
 		{
 			Text [ de ] = "Die Zelle, deren Inhalt ausgewertet werden soll als Bezug in Textform (z.B. \"A1\")." ;
 			Text [ en-US ] = "The cell whose contents are to be evaluated is to be referenced in text form (e.g. \"A1\")." ;
+			Text [ x-comment ] = " ";
+		};
+	};
+	 // -=*# Resource for function INDIREKT_XL #*=-
+	Resource SC_OPCODE_INDIRECT_XL
+	{
+		String 1 // Description
+		{
+			Text [ de ] = "Bestimmt den Inhalt einer als Bezug in MS Excel (tm) Textform angegebenen Zelle." ;
+			Text [ en-US ] = "Returns the contents of a cell that is referenced in MS Excel (tm) text form." ;
+			Text [ x-comment ] = " ";
+		};
+		ExtraData =
+		{
+			ID_FUNCTION_GRP_TABLE;
+			U2S( HID_FUNC_INDIREKT_XL );
+			2;	0;	1;	
+		};
+		String 2 // Name of Parameter 1
+		{
+			Text [ de ] = "Bezug" ;
+			Text [ en-US ] = "ref " ;
+			Text [ x-comment ] = " ";
+		};
+		String 3 // Description of Parameter 1
+		{
+			Text [ de ] = "Die Zelle, deren Inhalt ausgewertet werden soll als Bezug in MS Excel (tm) Textform (z.B. \"Sheet!A1\")." ;
+			Text [ en-US ] = "The cell whose contents are to be evaluated is to be referenced in MS Excel (tm) text form (e.g. \"Sheet!A1\")." ;
+			Text [ x-comment ] = " ";
+		};
+		String 4 // Name of Parameter 2
+		{
+			Text [ de ] = "'Adressformat'" ;
+			Text [ en-US ] = "Format" ;
+			Text [ x-comment ] = " ";
+		};
+		String 5 // Description of Parameter 2
+		{
+			Text [ de ] = "Verwendete Adressierungsart. TRUE für A1, FALSE für R1C1. Der Default ist A1." ;
+			Text [ en-US ] = "What address format to expect.  TRUE for A1, FALSE for R1C1.  Defaults to A1." ;
 			Text [ x-comment ] = " ";
 		};
 	};
Index: sc/source/ui/undo/undotab.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/undo/undotab.cxx,v
retrieving revision 1.12
retrieving revision 1.12.22.2
diff -u -w -p -r1.12 -r1.12.22.2
--- sc/source/ui/undo/undotab.cxx	28 Sep 2005 12:14:14 -0000	1.12
+++ sc/source/ui/undo/undotab.cxx	1 Dec 2005 19:52:30 -0000	1.12.22.2
@@ -96,6 +96,7 @@ TYPEINIT1(ScUndoPrintRange,		SfxUndoActi
 TYPEINIT1(ScUndoScenarioFlags,	SfxUndoAction);
 TYPEINIT1(ScUndoRenameObject,	SfxUndoAction);
 TYPEINIT1(ScUndoLayoutRTL,		SfxUndoAction);
+TYPEINIT1(ScUndoSetAddressConvention,		SfxUndoAction);
 
 
 // -----------------------------------------------------------------------
@@ -1540,6 +1541,62 @@ String __EXPORT ScUndoLayoutRTL::GetComm
 {
 	return ScGlobal::GetRscString( STR_UNDO_TAB_RTL );
 }
+
+
+
+// -----------------------------------------------------------------------
+//
+//		Set the address convention used for the sheet
+//
+
+ScUndoSetAddressConvention::ScUndoSetAddressConvention( ScDocShell* pShell,
+														ScAddress::Convention eConv ) :
+	ScSimpleUndo( pShell ),
+	eNewConv( eConv )
+{
+	eOldConv = pDocShell->GetDocument()->GetAddressConvention();
+}
+
+__EXPORT ScUndoSetAddressConvention::~ScUndoSetAddressConvention()
+{
+}
+
+void ScUndoSetAddressConvention::DoChange( ScAddress::Convention eConv )
+{
+	pDocShell->SetInUndo( TRUE );
+	ScDocument* pDoc = pDocShell->GetDocument();
+	pDoc->SetAddressConvention( eConv );
+	pDocShell->SetDocumentModified();
+	pDocShell->SetInUndo( FALSE );
+}
+
+void __EXPORT ScUndoSetAddressConvention::Undo()
+{
+	DoChange( eOldConv );
+}
+
+void __EXPORT ScUndoSetAddressConvention::Redo()
+{
+	DoChange( eNewConv );
+}
+
+void __EXPORT ScUndoSetAddressConvention::Repeat(SfxRepeatTarget& rTarget)
+{
+	if (rTarget.ISA(ScTabViewTarget))
+		((ScTabViewTarget&)rTarget).GetViewShell()->GetViewData()->GetDispatcher().
+			Execute( FID_TAB_USE_R1C1, SFX_CALLMODE_SLOT | SFX_CALLMODE_RECORD);
+}
+
+BOOL __EXPORT ScUndoSetAddressConvention::CanRepeat(SfxRepeatTarget& rTarget) const
+{
+	return (rTarget.ISA(ScTabViewTarget));
+}
+
+String __EXPORT ScUndoSetAddressConvention::GetComment() const
+{
+	return ScGlobal::GetRscString( STR_UNDO_TAB_R1C1 );
+}
+
 
 
 
Index: sc/source/ui/view/colrowba.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/colrowba.cxx,v
retrieving revision 1.13
retrieving revision 1.13.38.2
diff -u -w -p -r1.13 -r1.13.38.2
--- sc/source/ui/view/colrowba.cxx	8 Sep 2005 22:54:00 -0000	1.13
+++ sc/source/ui/view/colrowba.cxx	1 Dec 2005 19:52:31 -0000	1.13.38.2
@@ -96,6 +96,11 @@ ScColBar::~ScColBar()
 {
 }
 
+inline BOOL ScColBar::UseNumericHeader() const
+{
+    return pViewData->GetDocument()->GetAddressConvention() == ScAddress::CONV_XL_R1C1;
+}
+
 SCCOLROW ScColBar::GetPos()
 {
 	return pViewData->GetPosX(eWhich);
@@ -113,7 +118,9 @@ USHORT ScColBar::GetEntrySize( SCCOLROW 
 
 String ScColBar::GetEntryText( SCCOLROW nEntryNo )
 {
-	return ColToAlpha( static_cast<SCCOL>(nEntryNo) );
+	return UseNumericHeader()
+	    ? String::CreateFromInt32( nEntryNo + 1 )
+	    : ColToAlpha( static_cast<SCCOL>(nEntryNo) );
 }
 
 void ScColBar::SetEntrySize( SCCOLROW nPos, USHORT nNewSize )
Index: sc/source/ui/view/tabvwshf.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/tabvwshf.cxx,v
retrieving revision 1.10
retrieving revision 1.10.38.2
diff -u -w -p -r1.10 -r1.10.38.2
--- sc/source/ui/view/tabvwshf.cxx	8 Sep 2005 23:11:50 -0000	1.10
+++ sc/source/ui/view/tabvwshf.cxx	1 Dec 2005 19:52:31 -0000	1.10.38.2
@@ -688,6 +688,17 @@ void ScTabViewShell::ExecuteTable( SfxRe
 			}
 			break;
 
+		case FID_TAB_USE_R1C1:
+			{
+				ScDocFunc aFunc( *pViewData->GetDocShell() );
+				const ScAddress::Convention eConv =  
+					(pDoc->GetAddressConvention() == ScAddress::CONV_OOO)
+						? ScAddress::CONV_XL_R1C1 : ScAddress::CONV_OOO ;
+
+				aFunc.SetAddressConvention( eConv );
+			}
+			break;
+
 		default:
 			DBG_ERROR("Unbekannte Message bei ViewShell");
 			break;
@@ -805,6 +816,13 @@ void ScTabViewShell::GetStateTable( SfxI
 						rSet.DisableItem( nWhich );
 					else
 						rSet.Put( SfxBoolItem( nWhich, pDoc->IsLayoutRTL( nTab ) ) );
+				}
+				break;
+
+			case FID_TAB_USE_R1C1:
+				{
+					const ScAddress::Convention eConv =  pDoc->GetAddressConvention();
+					rSet.Put( SfxBoolItem( nWhich, eConv == ScAddress::CONV_XL_R1C1 ) );
 				}
 				break;
 		}
Index: sc/source/ui/view/viewfunc.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/viewfunc.cxx,v
retrieving revision 1.30
retrieving revision 1.29.20.2
diff -u -w -p -r1.30 -r1.29.20.2
--- sc/source/ui/view/viewfunc.cxx	21 Oct 2005 12:10:08 -0000	1.30
+++ sc/source/ui/view/viewfunc.cxx	28 Nov 2005 16:09:12 -0000	1.29.20.2
@@ -830,7 +830,7 @@ void ScViewFunc::EnterMatrix( const Stri
 		SCCOL nCol = pData->GetCurX();
 		SCROW nRow = pData->GetCurY();
 		SCTAB nTab = pData->GetTabNo();
-		ScFormulaCell aFormCell( pDoc, ScAddress(nCol,nRow,nTab), rString, MM_FORMULA );
+		ScFormulaCell aFormCell( pDoc, ScAddress(nCol,nRow,nTab), rString, ScAddress::CONV_UNSPECIFIED, MM_FORMULA );
 
         SCSIZE nSizeX;
         SCSIZE nSizeY;
Index: sc/uiconfig/scalc/menubar/menubar.xml
===================================================================
RCS file: /cvs/sc/sc/uiconfig/scalc/menubar/menubar.xml,v
retrieving revision 1.21
retrieving revision 1.20.236.2
diff -u -w -p -r2.21 -r1.20.236.2
--- sc/uiconfig/scalc/menubar/menubar.xml	16 Nov 2005 10:15:26 -0000	1.21
+++ sc/uiconfig/scalc/menubar/menubar.xml	28 Nov 2005 16:03:00 -0000	1.20.236.2
@@ -211,6 +211,7 @@
                     <menu:menuitem menu:id=".uno:Hide" menu:helpid="26289" menu:label="" />
                     <menu:menuitem menu:id=".uno:Show" menu:helpid="26290" menu:label="" />
                     <menu:menuitem menu:id=".uno:SheetRightToLeft" menu:helpid="26352" menu:label="" />
+                    <menu:menuitem menu:id=".uno:SheetUseR1C1"	menu:helpid="26353" menu:label="" />
                 </menu:menupopup>
             </menu:menu>
             <menu:menuitem menu:id=".uno:ToggleMergeCells" menu:helpid="26581" menu:label="" />
Index: officecfg/registry/data/org/openoffice/Office/UI/CalcCommands.xcu
===================================================================
RCS file: /cvs/util/officecfg/registry/data/org/openoffice/Office/UI/CalcCommands.xcu,v
retrieving revision 1.14
diff -u -w -p -r1.14 CalcCommands.xcu
--- officecfg/registry/data/org/openoffice/Office/UI/CalcCommands.xcu	15 Mar 2005 12:42:05 -0000	1.14
+++ officecfg/registry/data/org/openoffice/Office/UI/CalcCommands.xcu	28 Nov 2005 19:35:06 -0000
@@ -1418,6 +1418,11 @@
 					<value xml:lang="en-US">R~ight-To-Left</value>
 				</prop>
 			</node>
+			<node oor:name=".uno:SheetUseR1C1" oor:op="replace">
+				<prop oor:name="Label" oor:type="xs:string">
+					<value xml:lang="en-US">Use R1~C1</value>
+				</prop>
+			</node>
             <node oor:name=".uno:SetAnchorToPage" oor:op="replace">
                 <prop oor:name="Label" oor:type="xs:string">
                     <value xml:lang="de">An der Seite</value>
