--- chart2/source/tools/ErrorBar.cxx.orig	2007-06-27 13:05:20.000000000 +0200
+++ chart2/source/tools/ErrorBar.cxx	2007-06-27 13:05:20.000000000 +0200
@@ -126,24 +126,36 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_STYLE ));
-    rOutMap[ PROP_ERROR_BAR_STYLE ] =
-        uno::makeAny( chart2::ErrorBarStyle_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_POS_ERROR ));
-    rOutMap[ PROP_ERROR_BAR_POS_ERROR ] =
-        uno::makeAny( 0.0 );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_NEG_ERROR ));
-    rOutMap[ PROP_ERROR_BAR_NEG_ERROR ] =
-        uno::makeAny( 0.0 );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_WEIGHT ));
-    rOutMap[ PROP_ERROR_BAR_WEIGHT ] =
-        uno::makeAny( 1.0 );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_SHOW_POS_ERROR ));
-    rOutMap[ PROP_ERROR_BAR_SHOW_POS_ERROR ] =
-        uno::makeAny( sal_True );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_SHOW_NEG_ERROR ));
-    rOutMap[ PROP_ERROR_BAR_SHOW_NEG_ERROR ] =
-        uno::makeAny( sal_True );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_ERROR_BAR_STYLE,
+      uno::makeAny( chart2::ErrorBarStyle_NONE )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_POS_ERROR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_ERROR_BAR_POS_ERROR,
+      uno::makeAny( 0.0 )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_NEG_ERROR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_ERROR_BAR_NEG_ERROR,
+      uno::makeAny( 0.0 )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_WEIGHT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_ERROR_BAR_WEIGHT,
+      uno::makeAny( 1.0 )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_SHOW_POS_ERROR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_ERROR_BAR_SHOW_POS_ERROR,
+      uno::makeAny( sal_True )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_ERROR_BAR_SHOW_NEG_ERROR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_ERROR_BAR_SHOW_NEG_ERROR,
+      uno::makeAny( sal_True )
+	));
 }
 
 const uno::Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/tools/FillProperties.cxx.orig	2007-06-27 13:05:20.000000000 +0200
+++ chart2/source/tools/FillProperties.cxx	2007-06-27 13:05:20.000000000 +0200
@@ -245,21 +245,31 @@
 void lcl_AddDefaultsToMap_without_BitmapProperties(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_STYLE ));
-    rOutMap[ FillProperties::PROP_FILL_STYLE ] =
-        uno::makeAny( drawing::FillStyle_SOLID );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_COLOR ));
-    rOutMap[ FillProperties::PROP_FILL_COLOR ] =
-        uno::makeAny( sal_Int32( 0xd9d9d9 ) ); // gray85
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_TRANSPARENCE ));
-    rOutMap[ FillProperties::PROP_FILL_TRANSPARENCE ] =
-        uno::makeAny( sal_Int16( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_GRADIENT_STEPCOUNT ));
-    rOutMap[ FillProperties::PROP_FILL_GRADIENT_STEPCOUNT ] =
-        uno::makeAny( sal_Int16( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BACKGROUND ));
-    rOutMap[ FillProperties::PROP_FILL_BACKGROUND ] =
-        uno::makeAny( sal_Bool( sal_False ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_STYLE,
+      uno::makeAny( drawing::FillStyle_SOLID )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_COLOR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_COLOR,
+      uno::makeAny( sal_Int32( 0xd9d9d9 ) )
+	)); // gray85
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_TRANSPARENCE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_TRANSPARENCE,
+      uno::makeAny( sal_Int16( 0 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_GRADIENT_STEPCOUNT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_GRADIENT_STEPCOUNT,
+      uno::makeAny( sal_Int16( 0 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BACKGROUND ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BACKGROUND,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
 }
 
 void lcl_AddDefaultsToMap_only_BitmapProperties(
@@ -268,27 +278,39 @@
     uno::Any aSalInt16Zero = uno::makeAny( sal_Int16( 0 ));
     uno::Any aSalInt32SizeDefault = uno::makeAny( sal_Int32( 0 ));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_OFFSETX ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_OFFSETY ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ] =
-        uno::makeAny( drawing::RectanglePoint_MIDDLE_MIDDLE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ] =
-        uno::makeAny( true );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_SIZEX ] = aSalInt32SizeDefault;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_SIZEY ] = aSalInt32SizeDefault;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_MODE ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_MODE ] =
-        uno::makeAny( drawing::BitmapMode_REPEAT );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETX ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_OFFSETX, aSalInt16Zero));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_OFFSETY, aSalInt16Zero));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX, aSalInt16Zero));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY, aSalInt16Zero));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT,
+      uno::makeAny( drawing::RectanglePoint_MIDDLE_MIDDLE )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_LOGICALSIZE,
+      uno::makeAny( true )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEX ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_SIZEX, aSalInt32SizeDefault));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_SIZEY, aSalInt32SizeDefault));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_MODE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_MODE,
+      uno::makeAny( drawing::BitmapMode_REPEAT )
+	));
 }
 
 }//end anonymous namespace
--- chart2/source/tools/LineProperties.cxx.orig	2007-06-27 13:05:20.000000000 +0200
+++ chart2/source/tools/LineProperties.cxx	2007-06-27 13:05:20.000000000 +0200
@@ -118,21 +118,31 @@
 void LineProperties::AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_STYLE ));
-    rOutMap[ PROP_LINE_STYLE ] =
-        uno::makeAny( drawing::LineStyle_SOLID );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_WIDTH ));
-    rOutMap[ PROP_LINE_WIDTH ] =
-        uno::makeAny( sal_Int32( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_COLOR ));
-    rOutMap[ PROP_LINE_COLOR ] =
-        uno::makeAny( sal_Int32( 0x000000 ) );  // black
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_TRANSPARENCE ));
-    rOutMap[ PROP_LINE_TRANSPARENCE ] =
-        uno::makeAny( sal_Int16( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_JOINT ));
-    rOutMap[ PROP_LINE_JOINT ] =
-        uno::makeAny( drawing::LineJoint_NONE );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINE_STYLE,
+      uno::makeAny( drawing::LineStyle_SOLID )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_WIDTH ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINE_WIDTH,
+      uno::makeAny( sal_Int32( 0 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_COLOR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINE_COLOR,
+      uno::makeAny( sal_Int32( 0x000000 ) )
+	));  // black
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_TRANSPARENCE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINE_TRANSPARENCE,
+      uno::makeAny( sal_Int16( 0 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINE_JOINT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINE_JOINT,
+      uno::makeAny( drawing::LineJoint_NONE )
+	));
 }
 
 //static
--- chart2/source/model/main/Axis.cxx.orig	2007-06-27 13:05:20.000000000 +0200
+++ chart2/source/model/main/Axis.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -215,50 +215,76 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_SHOW ));
-    rOutMap[ PROP_AXIS_SHOW ] =
-        uno::makeAny( sal_True );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_POSITION ));
-    rOutMap[ PROP_AXIS_POSITION ] =
-        uno::makeAny( chart2::AxisPosition::MAIN );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_DISPLAY_LABELS ));
-    rOutMap[ PROP_AXIS_DISPLAY_LABELS ] =
-        uno::makeAny( sal_Bool( sal_True ) );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_ROTATION ));
-    rOutMap[ PROP_AXIS_TEXT_ROTATION ] =
-        uno::makeAny( double( 0.0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_BREAK ));
-    rOutMap[ PROP_AXIS_TEXT_BREAK ] =
-        uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_OVERLAP ));
-    rOutMap[ PROP_AXIS_TEXT_OVERLAP ] =
-        uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_STACKED ));
-    rOutMap[ PROP_AXIS_TEXT_STACKED ] =
-        uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_ARRANGE_ORDER ));
-    rOutMap[ PROP_AXIS_TEXT_ARRANGE_ORDER ] =
-        uno::makeAny( ::com::sun::star::chart::ChartAxisArrangeOrderType_AUTO );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_SHOW ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_SHOW,
+      uno::makeAny( sal_True )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_POSITION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_POSITION,
+      uno::makeAny( chart2::AxisPosition::MAIN )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_DISPLAY_LABELS ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_DISPLAY_LABELS,
+      uno::makeAny( sal_Bool( sal_True ) )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_ROTATION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_TEXT_ROTATION,
+      uno::makeAny( double( 0.0 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_BREAK ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_TEXT_BREAK,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_OVERLAP ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_TEXT_OVERLAP,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_STACKED ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_TEXT_STACKED,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_TEXT_ARRANGE_ORDER ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_TEXT_ARRANGE_ORDER,
+      uno::makeAny( ::com::sun::star::chart::ChartAxisArrangeOrderType_AUTO )
+	));
 
     float fDefaultCharHeight = 8.0;
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultCharHeight );
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultCharHeight );
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultCharHeight );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT,
+      uno::makeAny( fDefaultCharHeight )
+	));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT,
+      uno::makeAny( fDefaultCharHeight )
+	));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT,
+      uno::makeAny( fDefaultCharHeight )
+	));
 
     // for Testing only!
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_MAJOR_TICKMARKS ));
-    rOutMap[ PROP_AXIS_MAJOR_TICKMARKS ] =
-        uno::makeAny( sal_Int32( 2 /* CHAXIS_MARK_OUTER */ ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_MAJOR_TICKMARKS ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_MAJOR_TICKMARKS,
+      uno::makeAny( sal_Int32( 2 /* CHAXIS_MARK_OUTER */ ) )
+	));
     // for Testing only!
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_MINOR_TICKMARKS ));
-    rOutMap[ PROP_AXIS_MINOR_TICKMARKS ] =
-        uno::makeAny( sal_Int32( 0 /* CHAXIS_MARK_NONE */ ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AXIS_MINOR_TICKMARKS ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AXIS_MINOR_TICKMARKS,
+      uno::makeAny( sal_Int32( 0 /* CHAXIS_MARK_NONE */ ) )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/main/DataPointProperties.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/DataPointProperties.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -369,98 +369,146 @@
 void DataPointProperties::AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_COLOR ));
-    rOutMap[ PROP_DATAPOINT_COLOR ] =
-        uno::makeAny( sal_Int32( 0x0099ccff ));  // blue 8
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_TRANSPARENCY ));
-    rOutMap[ PROP_DATAPOINT_TRANSPARENCY ] =
-        uno::makeAny( sal_Int16( 0 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_COLOR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_COLOR,
+      uno::makeAny( sal_Int32( 0x0099ccff ))
+	));  // blue 8
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_TRANSPARENCY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_TRANSPARENCY,
+      uno::makeAny( sal_Int16( 0 ) )
+	));
 
     //fill
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_STYLE ));
-    rOutMap[ PROP_DATAPOINT_FILL_STYLE ] =
-        uno::makeAny( drawing::FillStyle_SOLID );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_TRANSPARENCY_GRADIENT_NAME ));
-    rOutMap[ PROP_DATAPOINT_TRANSPARENCY_GRADIENT_NAME ] =
-        uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GRADIENT_NAME ));
-    rOutMap[ PROP_DATAPOINT_GRADIENT_NAME ] =
-        uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GRADIENT_STEPCOUNT ));
-    rOutMap[ PROP_DATAPOINT_GRADIENT_STEPCOUNT ] =
-        uno::makeAny(sal_Int16(0));
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_HATCH_NAME ));
-    rOutMap[ PROP_DATAPOINT_HATCH_NAME ] =
-        uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_BITMAP_NAME ));
-    rOutMap[ PROP_DATAPOINT_FILL_BITMAP_NAME ] =
-        uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_BACKGROUND ));
-    rOutMap[ PROP_DATAPOINT_FILL_BACKGROUND ] =
-        uno::makeAny( false );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_FILL_STYLE,
+      uno::makeAny( drawing::FillStyle_SOLID )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_TRANSPARENCY_GRADIENT_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_TRANSPARENCY_GRADIENT_NAME,
+      uno::Any()
+	));//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GRADIENT_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_GRADIENT_NAME,
+      uno::Any()
+	));//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GRADIENT_STEPCOUNT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_GRADIENT_STEPCOUNT,
+      uno::makeAny(sal_Int16(0))
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_HATCH_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_HATCH_NAME,
+      uno::Any()
+	));//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_BITMAP_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_FILL_BITMAP_NAME,
+      uno::Any()
+	));//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_FILL_BACKGROUND ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_FILL_BACKGROUND,
+      uno::makeAny( false )
+	));
 
     //border
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_COLOR ));
-    rOutMap[ PROP_DATAPOINT_BORDER_COLOR ] =
-        uno::makeAny( sal_Int32( 0x00000000 ));  // black
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_STYLE ));
-    rOutMap[ PROP_DATAPOINT_BORDER_STYLE ] =
-        uno::makeAny( drawing::LineStyle_SOLID );
-//         uno::makeAny( drawing::LineStyle_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_WIDTH ));
-    rOutMap[ PROP_DATAPOINT_BORDER_WIDTH ] =
-        uno::makeAny( sal_Int32( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_DASH_NAME ));
-    rOutMap[ PROP_DATAPOINT_BORDER_DASH_NAME ] =
-        uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_TRANSPARENCY ));
-    rOutMap[ PROP_DATAPOINT_BORDER_TRANSPARENCY ] =
-        uno::makeAny( sal_Int16( 0 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_COLOR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_BORDER_COLOR,
+      uno::makeAny( sal_Int32( 0x00000000 ))
+	));  // black
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_BORDER_STYLE,
+      uno::makeAny( drawing::LineStyle_SOLID )
+	));
+//       uno::makeAny( drawing::LineStyle_NONE )
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_WIDTH ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_BORDER_WIDTH,
+      uno::makeAny( sal_Int32( 0 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_DASH_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_BORDER_DASH_NAME,
+      uno::Any()
+	));//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_BORDER_TRANSPARENCY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_BORDER_TRANSPARENCY,
+      uno::makeAny( sal_Int16( 0 ) )
+	));
 
     //line
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_STYLE ));
-    rOutMap[ LineProperties::PROP_LINE_STYLE ] =
-        uno::makeAny( drawing::LineStyle_SOLID );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_WIDTH ));
-    rOutMap[ LineProperties::PROP_LINE_WIDTH ] =
-        uno::makeAny( sal_Int32( 0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_DASH ));
-    rOutMap[ LineProperties::PROP_LINE_DASH ] =
-        uno::Any( drawing::LineDash() );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_DASH_NAME ));
-    rOutMap[ LineProperties::PROP_LINE_DASH_NAME ] =
-        uno::Any();//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	LineProperties::PROP_LINE_STYLE,
+      uno::makeAny( drawing::LineStyle_SOLID )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_WIDTH ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	LineProperties::PROP_LINE_WIDTH,
+      uno::makeAny( sal_Int32( 0 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_DASH ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	LineProperties::PROP_LINE_DASH,
+      uno::Any( drawing::LineDash() )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( LineProperties::PROP_LINE_DASH_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	LineProperties::PROP_LINE_DASH_NAME,
+      uno::Any()
+	));//need this empty default value otherwise get a costly exception in DataSeries::GetDefaultValue
 
     //fill
     //bitmap
     uno::Any aSalInt16Zero = uno::makeAny( sal_Int16( 0 ));
     uno::Any aSalInt32SizeDefault = uno::makeAny( sal_Int32( 0 ));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_OFFSETX ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_OFFSETY ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ] = aSalInt16Zero;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ] =
-        uno::makeAny( drawing::RectanglePoint_MIDDLE_MIDDLE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ] =
-        uno::makeAny( true );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEX ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_SIZEX ] = aSalInt32SizeDefault;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEY ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_SIZEY ] = aSalInt32SizeDefault;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_MODE ));
-    rOutMap[ FillProperties::PROP_FILL_BITMAP_MODE ] =
-        uno::makeAny( drawing::BitmapMode_REPEAT );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETX ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_OFFSETX, aSalInt16Zero));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_OFFSETY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_OFFSETY, aSalInt16Zero));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETX, aSalInt16Zero));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_POSITION_OFFSETY, aSalInt16Zero));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_RECTANGLEPOINT,
+      uno::makeAny( drawing::RectanglePoint_MIDDLE_MIDDLE )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_LOGICALSIZE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_LOGICALSIZE,
+      uno::makeAny( true )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEX ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_SIZEX, aSalInt32SizeDefault));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_SIZEY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_SIZEY, aSalInt32SizeDefault));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( FillProperties::PROP_FILL_BITMAP_MODE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	FillProperties::PROP_FILL_BITMAP_MODE,
+      uno::makeAny( drawing::BitmapMode_REPEAT )
+	));
 
     //others
     chart2::Symbol aSymbProp;
@@ -469,42 +518,57 @@
     aSymbProp.Size = awt::Size( 250, 250 ); // ca. 7pt x 7pt (7pt=246.94)
     aSymbProp.BorderColor = 0x000000;       // Black
     aSymbProp.FillColor = 0xee4000;         // OrangeRed2
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_SYMBOL_PROP ));
-    rOutMap[ PROP_DATAPOINT_SYMBOL_PROP ] =
-        uno::makeAny( aSymbProp );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_OFFSET ));
-    rOutMap[ PROP_DATAPOINT_OFFSET ] =
-        uno::makeAny( double( 0.0 ) );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GEOMETRY3D ));
-    rOutMap[ PROP_DATAPOINT_GEOMETRY3D ] =
-        uno::makeAny( chart2::DataPointGeometry3D::CUBOID );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_LABEL ));
-    rOutMap[ PROP_DATAPOINT_LABEL ] =
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_SYMBOL_PROP ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_SYMBOL_PROP,
+      uno::makeAny( aSymbProp )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_OFFSET ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_OFFSET,
+      uno::makeAny( double( 0.0 ) )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_GEOMETRY3D ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_GEOMETRY3D,
+      uno::makeAny( chart2::DataPointGeometry3D::CUBOID )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_LABEL ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_LABEL,
         uno::makeAny( chart2::DataPointLabel(
                           sal_False, // ShowNumber
                           sal_False, // ShowNumberInPercent
                           sal_False, // ShowCategoryName
                           sal_False // ShowLegendSymbol
-                          ));
+                          ))));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_NUMBER_FORMAT ));
-    rOutMap[ PROP_DATAPOINT_NUMBER_FORMAT ] =
-        uno::makeAny( sal_Int32(0) ); //todo maybe choose a different one here -> should be dynamically that of the attached axis
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_ERROR_BAR_X ));
-    rOutMap[ PROP_DATAPOINT_ERROR_BAR_X ] =
-        uno::makeAny( uno::Reference< beans::XPropertySet >(0) );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_ERROR_BAR_Y ));
-    rOutMap[ PROP_DATAPOINT_ERROR_BAR_Y ] =
-        uno::makeAny( uno::Reference< beans::XPropertySet >(0) );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_PERCENT_DIAGONAL ));
-    rOutMap[ PROP_DATAPOINT_PERCENT_DIAGONAL ] =
-        uno::makeAny( static_cast< sal_Int16 >(5) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_NUMBER_FORMAT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_NUMBER_FORMAT,
+      uno::makeAny( sal_Int32(0) )
+	)); //todo maybe choose a different one here -> should be dynamically that of the attached axis
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_ERROR_BAR_X ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_ERROR_BAR_X,
+      uno::makeAny( uno::Reference< beans::XPropertySet >(0) )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_ERROR_BAR_Y ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_ERROR_BAR_Y,
+      uno::makeAny( uno::Reference< beans::XPropertySet >(0) )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATAPOINT_PERCENT_DIAGONAL ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATAPOINT_PERCENT_DIAGONAL,
+      uno::makeAny( static_cast< sal_Int16 >(5) )
+	));
 }
 
 } //  namespace chart
--- chart2/source/model/main/DataSeriesProperties.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/DataSeriesProperties.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -100,17 +100,23 @@
 void DataSeriesProperties::AddDefaultsToMap(
     tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_STACKING_DIRECTION ));
-    rOutMap[ PROP_DATASERIES_STACKING_DIRECTION ] =
-        uno::makeAny( chart2::StackingDirection_NO_STACKING );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_STACKING_DIRECTION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATASERIES_STACKING_DIRECTION,
+      uno::makeAny( chart2::StackingDirection_NO_STACKING )
+	));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_VARY_COLORS_BY_POINT ));
-    rOutMap[ PROP_DATASERIES_VARY_COLORS_BY_POINT ] =
-        uno::makeAny( false );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_VARY_COLORS_BY_POINT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATASERIES_VARY_COLORS_BY_POINT,
+      uno::makeAny( false )
+	));
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_ATTACHED_AXIS_INDEX ));
-    rOutMap[ PROP_DATASERIES_ATTACHED_AXIS_INDEX ] =
-        uno::makeAny( sal_Int32(0) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DATASERIES_ATTACHED_AXIS_INDEX ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DATASERIES_ATTACHED_AXIS_INDEX,
+      uno::makeAny( sal_Int32(0) )
+	));
 
     // PROP_DATASERIES_ATTRIBUTED_DATA_POINTS has no default
 
--- chart2/source/model/main/Diagram.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/Diagram.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -126,13 +126,17 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DIAGRAM_SORT_BY_X_VALUES ));
-    rOutMap[ PROP_DIAGRAM_SORT_BY_X_VALUES ] =
-        uno::makeAny( sal_False );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DIAGRAM_CONNECT_BARS ));
-    rOutMap[ PROP_DIAGRAM_CONNECT_BARS ] =
-        uno::makeAny( false );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DIAGRAM_SORT_BY_X_VALUES ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DIAGRAM_SORT_BY_X_VALUES,
+      uno::makeAny( sal_False )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_DIAGRAM_CONNECT_BARS ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_DIAGRAM_CONNECT_BARS,
+      uno::makeAny( false )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/main/Legend.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/Legend.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -132,21 +132,31 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LEGEND_ANCHOR_POSITION ));
-    rOutMap[ PROP_LEGEND_ANCHOR_POSITION ] =
-        uno::makeAny( chart2::LegendPosition_LINE_END );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LEGEND_SHOW ));
-    rOutMap[ PROP_LEGEND_SHOW ] =
-        uno::makeAny( sal_True );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LEGEND_ANCHOR_POSITION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LEGEND_ANCHOR_POSITION,
+      uno::makeAny( chart2::LegendPosition_LINE_END )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LEGEND_SHOW ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LEGEND_SHOW,
+      uno::makeAny( sal_True )
+	));
 
     float fDefaultCharHeight = 8.0;
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultCharHeight );
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultCharHeight );
-    rOutMap[ ::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultCharHeight );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT,
+      uno::makeAny( fDefaultCharHeight )
+	));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT,
+      uno::makeAny( fDefaultCharHeight )
+	));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT,
+      uno::makeAny( fDefaultCharHeight )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/main/PageBackground.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/PageBackground.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -72,12 +72,16 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    rOutMap[ ::chart::FillProperties::PROP_FILL_COLOR ] =
-        uno::makeAny( sal_Int32( 0xffffff ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::FillProperties::PROP_FILL_COLOR,
+      uno::makeAny( sal_Int32( 0xffffff ))
+	));
 
     // override other defaults
-    rOutMap[ ::chart::LineProperties::PROP_LINE_STYLE ] =
-        uno::makeAny( drawing::LineStyle_NONE );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::LineProperties::PROP_LINE_STYLE,
+      uno::makeAny( drawing::LineStyle_NONE )
+	));
 }
 
 const uno::Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/main/Title.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/Title.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -189,41 +189,61 @@
     ::chart::tPropertyValueMap & rOutMap )
 {
     // ParagraphProperties
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_ADJUST ));
-    rOutMap[ PROP_TITLE_PARA_ADJUST ] =
-        uno::makeAny( ::com::sun::star::style::ParagraphAdjust_CENTER );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_ADJUST ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_TITLE_PARA_ADJUST,
+      uno::makeAny( ::com::sun::star::style::ParagraphAdjust_CENTER )
+	));
     // PROP_TITLE_PARA_LAST_LINE_ADJUST
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_LEFT_MARGIN ));
-    rOutMap[ PROP_TITLE_PARA_LEFT_MARGIN ] =
-        uno::makeAny( sal_Int32( 0 ));
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_RIGHT_MARGIN ));
-    rOutMap[ PROP_TITLE_PARA_RIGHT_MARGIN ] =
-        uno::makeAny( sal_Int32( 0 ));
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_TOP_MARGIN ));
-    rOutMap[ PROP_TITLE_PARA_TOP_MARGIN ] =
-        uno::makeAny( sal_Int32( 0 ));
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_BOTTOM_MARGIN ));
-    rOutMap[ PROP_TITLE_PARA_BOTTOM_MARGIN ] =
-        uno::makeAny( sal_Int32( 0 ));
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_IS_HYPHENATION ));
-    rOutMap[ PROP_TITLE_PARA_IS_HYPHENATION ] =
-        uno::makeAny( sal_True );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_LEFT_MARGIN ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_TITLE_PARA_LEFT_MARGIN,
+      uno::makeAny( sal_Int32( 0 ))
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_RIGHT_MARGIN ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_TITLE_PARA_RIGHT_MARGIN,
+      uno::makeAny( sal_Int32( 0 ))
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_TOP_MARGIN ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_TITLE_PARA_TOP_MARGIN,
+      uno::makeAny( sal_Int32( 0 ))
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_BOTTOM_MARGIN ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_TITLE_PARA_BOTTOM_MARGIN,
+      uno::makeAny( sal_Int32( 0 ))
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_PARA_IS_HYPHENATION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_TITLE_PARA_IS_HYPHENATION,
+      uno::makeAny( sal_True )
+	));
 
     // own properties
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_TEXT_ROTATION ));
-    rOutMap[ PROP_TITLE_TEXT_ROTATION ] =
-        uno::makeAny( double( 0.0 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_TEXT_STACKED ));
-    rOutMap[ PROP_TITLE_TEXT_STACKED ] =
-        uno::makeAny( sal_Bool( sal_False ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_TEXT_ROTATION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_TITLE_TEXT_ROTATION,
+      uno::makeAny( double( 0.0 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_TITLE_TEXT_STACKED ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_TITLE_TEXT_STACKED,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
 
     // override other defaults
-    rOutMap[ ::chart::FillProperties::PROP_FILL_STYLE ] =
-        uno::makeAny( drawing::FillStyle_NONE );
-    rOutMap[ ::chart::LineProperties::PROP_LINE_STYLE ] =
-        uno::makeAny( drawing::LineStyle_NONE );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::FillProperties::PROP_FILL_STYLE,
+      uno::makeAny( drawing::FillStyle_NONE )
+	));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::LineProperties::PROP_LINE_STYLE,
+      uno::makeAny( drawing::LineStyle_NONE )
+	));
 }
 
 const uno::Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/main/Wall.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/Wall.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -94,8 +94,10 @@
     ::chart::tPropertyValueMap & rOutMap )
 {
     // override other defaults
-    rOutMap[ ::chart::LineProperties::PROP_LINE_STYLE ] =
-        uno::makeAny( drawing::LineStyle_NONE );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::LineProperties::PROP_LINE_STYLE,
+      uno::makeAny( drawing::LineStyle_NONE )
+	));
 }
 
 const uno::Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/AreaChartTypeTemplate.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/AreaChartTypeTemplate.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -87,9 +87,11 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AREA_TEMPLATE_DIMENSION ));
-    rOutMap[ PROP_AREA_TEMPLATE_DIMENSION ] =
-        uno::makeAny( sal_Int32( 2 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_AREA_TEMPLATE_DIMENSION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_AREA_TEMPLATE_DIMENSION,
+      uno::makeAny( sal_Int32( 2 ) )
+	));
 }
 
 const uno::Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/BarChartTypeTemplate.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/BarChartTypeTemplate.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -97,12 +97,16 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BAR_TEMPLATE_DIMENSION ));
-    rOutMap[ PROP_BAR_TEMPLATE_DIMENSION ] =
-        uno::makeAny( sal_Int32( 2 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BAR_TEMPLATE_GEOMETRY3D ));
-    rOutMap[ PROP_BAR_TEMPLATE_GEOMETRY3D ] =
-        uno::makeAny( chart2::DataPointGeometry3D::CUBOID );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BAR_TEMPLATE_DIMENSION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_BAR_TEMPLATE_DIMENSION,
+      uno::makeAny( sal_Int32( 2 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BAR_TEMPLATE_GEOMETRY3D ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_BAR_TEMPLATE_GEOMETRY3D,
+      uno::makeAny( chart2::DataPointGeometry3D::CUBOID )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/ColumnLineChartTypeTemplate.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/ColumnLineChartTypeTemplate.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -95,9 +95,11 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_COL_LINE_NUMBER_OF_LINES ));
-    rOutMap[ PROP_COL_LINE_NUMBER_OF_LINES ] =
-        uno::makeAny( sal_Int32( 1 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_COL_LINE_NUMBER_OF_LINES ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_COL_LINE_NUMBER_OF_LINES,
+      uno::makeAny( sal_Int32( 1 ) )
+	));
 }
 
 const uno::Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/LineChartType.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/LineChartType.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -94,19 +94,25 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_CURVE_STYLE ));
-    rOutMap[ PROP_LINECHARTTYPE_CURVE_STYLE ] =
-        uno::makeAny( chart2::CurveStyle_LINES );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_CURVE_RESOLUTION ));
-    rOutMap[ PROP_LINECHARTTYPE_CURVE_RESOLUTION ] =
-        uno::makeAny( sal_Int32( 20 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_CURVE_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINECHARTTYPE_CURVE_STYLE,
+      uno::makeAny( chart2::CurveStyle_LINES )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_CURVE_RESOLUTION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINECHARTTYPE_CURVE_RESOLUTION,
+      uno::makeAny( sal_Int32( 20 ) )
+	));
 
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_SPLINE_ORDER ));
-    rOutMap[ PROP_LINECHARTTYPE_SPLINE_ORDER ] =
-        uno::makeAny( sal_Int32( 3 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_SPLINE_ORDER ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINECHARTTYPE_SPLINE_ORDER,
+      uno::makeAny( sal_Int32( 3 ) )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/LineChartTypeTemplate.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/LineChartTypeTemplate.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -111,19 +111,25 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_CURVE_STYLE ));
-    rOutMap[ PROP_LINECHARTTYPE_TEMPLATE_CURVE_STYLE ] =
-        uno::makeAny( chart2::CurveStyle_LINES );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_CURVE_RESOLUTION ));
-    rOutMap[ PROP_LINECHARTTYPE_TEMPLATE_CURVE_RESOLUTION ] =
-        uno::makeAny( sal_Int32( 20 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_CURVE_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINECHARTTYPE_TEMPLATE_CURVE_STYLE,
+      uno::makeAny( chart2::CurveStyle_LINES )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_CURVE_RESOLUTION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINECHARTTYPE_TEMPLATE_CURVE_RESOLUTION,
+      uno::makeAny( sal_Int32( 20 ) )
+	));
 
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_SPLINE_ORDER ));
-    rOutMap[ PROP_LINECHARTTYPE_TEMPLATE_SPLINE_ORDER ] =
-        uno::makeAny( sal_Int32( 3 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_LINECHARTTYPE_TEMPLATE_SPLINE_ORDER ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_LINECHARTTYPE_TEMPLATE_SPLINE_ORDER,
+      uno::makeAny( sal_Int32( 3 ) )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/PieChartType.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/PieChartType.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -84,9 +84,11 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIECHARTTYPE_USE_RINGS ));
-    rOutMap[ PROP_PIECHARTTYPE_USE_RINGS ] =
-        uno::makeAny( sal_False );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIECHARTTYPE_USE_RINGS ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_PIECHARTTYPE_USE_RINGS,
+      uno::makeAny( sal_False )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/PieChartTypeTemplate.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/PieChartTypeTemplate.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -126,18 +126,26 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_OFFSET_MODE ));
-    rOutMap[ PROP_PIE_TEMPLATE_OFFSET_MODE ] =
-        uno::makeAny( chart2::PieChartOffsetMode_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_DEFAULT_OFFSET ));
-    rOutMap[ PROP_PIE_TEMPLATE_DEFAULT_OFFSET ] =
-        uno::makeAny( double( 0.5 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_DIMENSION ));
-    rOutMap[ PROP_PIE_TEMPLATE_DIMENSION ] =
-        uno::makeAny( sal_Int32( 2 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_USE_RINGS ));
-    rOutMap[ PROP_PIE_TEMPLATE_USE_RINGS ] =
-        uno::makeAny( sal_False );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_OFFSET_MODE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_PIE_TEMPLATE_OFFSET_MODE,
+      uno::makeAny( chart2::PieChartOffsetMode_NONE )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_DEFAULT_OFFSET ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_PIE_TEMPLATE_DEFAULT_OFFSET,
+      uno::makeAny( double( 0.5 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_DIMENSION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_PIE_TEMPLATE_DIMENSION,
+      uno::makeAny( sal_Int32( 2 ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_PIE_TEMPLATE_USE_RINGS ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_PIE_TEMPLATE_USE_RINGS,
+      uno::makeAny( sal_False )
+	));
 }
 
 const uno::Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/ScatterChartType.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/ScatterChartType.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -100,19 +100,25 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_CURVE_STYLE ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_CURVE_STYLE ] =
-        uno::makeAny( chart2::CurveStyle_LINES );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_CURVE_RESOLUTION ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_CURVE_RESOLUTION ] =
-        uno::makeAny( sal_Int32( 20 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_CURVE_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCATTERCHARTTYPE_CURVE_STYLE,
+      uno::makeAny( chart2::CurveStyle_LINES )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_CURVE_RESOLUTION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCATTERCHARTTYPE_CURVE_RESOLUTION,
+      uno::makeAny( sal_Int32( 20 ) )
+	));
 
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_SPLINE_ORDER ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_SPLINE_ORDER ] =
-        uno::makeAny( sal_Int32( 3 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_SPLINE_ORDER ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCATTERCHARTTYPE_SPLINE_ORDER,
+      uno::makeAny( sal_Int32( 3 ) )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/ScatterChartTypeTemplate.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/ScatterChartTypeTemplate.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -114,19 +114,25 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_STYLE ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_STYLE ] =
-        uno::makeAny( chart2::CurveStyle_LINES );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_RESOLUTION ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_RESOLUTION ] =
-        uno::makeAny( sal_Int32( 20 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_STYLE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_STYLE,
+      uno::makeAny( chart2::CurveStyle_LINES )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_RESOLUTION ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCATTERCHARTTYPE_TEMPLATE_CURVE_RESOLUTION,
+      uno::makeAny( sal_Int32( 20 ) )
+	));
 
     // todo: check whether order 3 means polygons of order 3 or 2. (see
     // http://www.people.nnov.ru/fractal/Splines/Basis.htm )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_SPLINE_ORDER ));
-    rOutMap[ PROP_SCATTERCHARTTYPE_TEMPLATE_SPLINE_ORDER ] =
-        uno::makeAny( sal_Int32( 3 ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_SCATTERCHARTTYPE_TEMPLATE_SPLINE_ORDER ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCATTERCHARTTYPE_TEMPLATE_SPLINE_ORDER,
+      uno::makeAny( sal_Int32( 3 ) )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/StockChartTypeTemplate.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/StockChartTypeTemplate.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -134,18 +134,26 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_VOLUME ));
-    rOutMap[ PROP_STOCKCHARTTYPE_TEMPLATE_VOLUME ] =
-        uno::makeAny( false );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_OPEN ));
-    rOutMap[ PROP_STOCKCHARTTYPE_TEMPLATE_OPEN ] =
-        uno::makeAny( false );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_LOW_HIGH ));
-    rOutMap[ PROP_STOCKCHARTTYPE_TEMPLATE_LOW_HIGH ] =
-        uno::makeAny( true );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_JAPANESE ));
-    rOutMap[ PROP_STOCKCHARTTYPE_TEMPLATE_JAPANESE ] =
-        uno::makeAny( false );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_VOLUME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_STOCKCHARTTYPE_TEMPLATE_VOLUME,
+      uno::makeAny( false )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_OPEN ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_STOCKCHARTTYPE_TEMPLATE_OPEN,
+      uno::makeAny( false )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_LOW_HIGH ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_STOCKCHARTTYPE_TEMPLATE_LOW_HIGH,
+      uno::makeAny( true )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_STOCKCHARTTYPE_TEMPLATE_JAPANESE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_STOCKCHARTTYPE_TEMPLATE_JAPANESE,
+      uno::makeAny( false )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/tools/CharacterProperties.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/tools/CharacterProperties.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -452,176 +452,271 @@
 {
     const float fDefaultFontHeight = 13.0;
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_NAME ));
-    rOutMap[ PROP_CHAR_FONT_NAME ] =
-        uno::makeAny( C2U( "Albany" ));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_FONT_NAME,
+      uno::makeAny( C2U( "Albany" ))
+	));
     //todo correct font default:
     //see static Font OutputDevice::GetDefaultFont( USHORT nType, LanguageType eLang, ULONG nFlags, const OutputDevice* pOutDev = NULL );
     //or  SvxFontItem ... (old chart source/core/chtmodel.cxx :Font aCJKFont )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_STYLE_NAME ));
-    rOutMap[ PROP_CHAR_FONT_STYLE_NAME ] = uno::Any();
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_FAMILY ));
-    rOutMap[ PROP_CHAR_FONT_FAMILY ] =
-        uno::makeAny( awt::FontFamily::SWISS );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_CHAR_SET ));
-    rOutMap[ PROP_CHAR_FONT_CHAR_SET ] =
-        uno::makeAny( awt::CharSet::DONTKNOW );//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_PITCH ));
-    rOutMap[ PROP_CHAR_FONT_PITCH ] =
-        uno::makeAny( awt::FontPitch::VARIABLE );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COLOR ));
-    rOutMap[ PROP_CHAR_COLOR ] =
-        uno::makeAny( sal_Int32(-1) );//automatic color (COL_AUTO)
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ESCAPEMENT ));
-    rOutMap[ PROP_CHAR_ESCAPEMENT ] =
-        uno::makeAny( sal_Int16(0) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_STYLE_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_FONT_STYLE_NAME, uno::Any()));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_FAMILY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_FONT_FAMILY,
+      uno::makeAny( awt::FontFamily::SWISS )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_CHAR_SET ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_FONT_CHAR_SET,
+      uno::makeAny( awt::CharSet::DONTKNOW )
+	));//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FONT_PITCH ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_FONT_PITCH,
+      uno::makeAny( awt::FontPitch::VARIABLE )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COLOR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COLOR,
+      uno::makeAny( sal_Int32(-1) )
+	));//automatic color (COL_AUTO)
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ESCAPEMENT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ESCAPEMENT,
+      uno::makeAny( sal_Int16(0) )
+	));
     
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CHAR_HEIGHT ));
-    rOutMap[ PROP_CHAR_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultFontHeight );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE ));
-    rOutMap[ PROP_CHAR_UNDERLINE ] =
-        uno::makeAny( awt::FontUnderline::NONE );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE_COLOR ));
-    rOutMap[ PROP_CHAR_UNDERLINE_COLOR ] =
-        uno::makeAny( sal_Int32(-1) );//automatic color (COL_AUTO)
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE_HAS_COLOR ));
-    rOutMap[ PROP_CHAR_UNDERLINE_HAS_COLOR ] =
-        uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_WEIGHT ));
-    rOutMap[ PROP_CHAR_WEIGHT ] =
-        uno::makeAny( awt::FontWeight::NORMAL );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_POSTURE ));
-    rOutMap[ PROP_CHAR_POSTURE ] =
-        uno::makeAny( awt::FontSlant_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_AUTO_KERNING ));
-    rOutMap[ PROP_CHAR_AUTO_KERNING ] =
-        uno::makeAny( sal_True );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_KERNING ));
-    rOutMap[ PROP_CHAR_KERNING ] =
-        uno::makeAny( sal_Int16(0) );//todo correct default
-
-
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CASE_MAPPING ));
-//     rOutMap[ PROP_CHAR_CASE_MAPPING ] =
-//         uno::makeAny( style::CaseMap::NONE );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ROTATION ));
-//     rOutMap[ PROP_CHAR_ROTATION ] =
-//         uno::makeAny( sal_Int16( 0 ) );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_SCALE_WIDTH ));
-//     rOutMap[ PROP_CHAR_SCALE_WIDTH ] =
-//         uno::makeAny( sal_Int16( 71 ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ESCAPEMENT_HEIGHT ));
-    rOutMap[ PROP_CHAR_ESCAPEMENT_HEIGHT ] =
-        uno::makeAny( sal_Int8( 0 ) );
-
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CROSSED_OUT ));
-//     rOutMap[ PROP_CHAR_CROSSED_OUT ] =
-//         uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_STRIKE_OUT ));
-    rOutMap[ PROP_CHAR_STRIKE_OUT ] =
-        uno::makeAny( sal_Int16( awt::FontStrikeout::NONE ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_WORD_MODE ));
-    rOutMap[ PROP_CHAR_WORD_MODE ] =
-        uno::makeAny( sal_Bool( sal_False ) );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FLASH ));
-//     rOutMap[ PROP_CHAR_FLASH ] =
-//         uno::makeAny( sal_Bool( sal_False ) );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_LOCALE ));
-    rOutMap[ PROP_CHAR_LOCALE ] =
-        uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_SHADOWED ));
-    rOutMap[ PROP_CHAR_SHADOWED ] =
-        uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CONTOURED ));
-    rOutMap[ PROP_CHAR_CONTOURED ] =
-        uno::makeAny( sal_Bool( sal_False ) );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RELIEF ));
-    rOutMap[ PROP_CHAR_RELIEF ] =
-        uno::makeAny( text::FontRelief::NONE );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_EMPHASIS ));
-    rOutMap[ PROP_CHAR_EMPHASIS ] =
-        uno::makeAny( text::FontEmphasis::NONE );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_ADJUST ));
-//     rOutMap[ PROP_CHAR_RUBY_ADJUST ] =
-//         uno::makeAny( text::RubyAdjust_INDENT_BLOCK );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_STYLE_NAME ));
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_IS_ABOVE ));
-//     rOutMap[ PROP_CHAR_RUBY_IS_ABOVE ] =
-//         uno::makeAny( sal_Bool( sal_True ) );
-//     OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_INHIBIT_HYPHENATION ));
-//     rOutMap[ PROP_CHAR_INHIBIT_HYPHENATION ] =
-//         uno::makeAny( sal_Bool( sal_False ) );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CHAR_HEIGHT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_CHAR_HEIGHT,
+      uno::makeAny( fDefaultFontHeight )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_UNDERLINE,
+      uno::makeAny( awt::FontUnderline::NONE )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE_COLOR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_UNDERLINE_COLOR,
+      uno::makeAny( sal_Int32(-1) )
+	));//automatic color (COL_AUTO)
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_UNDERLINE_HAS_COLOR ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_UNDERLINE_HAS_COLOR,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_WEIGHT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_WEIGHT,
+      uno::makeAny( awt::FontWeight::NORMAL )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_POSTURE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_POSTURE,
+      uno::makeAny( awt::FontSlant_NONE )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_AUTO_KERNING ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_AUTO_KERNING,
+      uno::makeAny( sal_True )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_KERNING ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_KERNING,
+      uno::makeAny( sal_Int16(0) )
+	));//todo correct default
+
+
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CASE_MAPPING ));
+//     rOutMap.insert(::chart::tPropertyValueMap::value_type(
+//	PROP_CHAR_CASE_MAPPING,
+//       uno::makeAny( style::CaseMap::NONE )
+//	));
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ROTATION ));
+//     rOutMap.insert(::chart::tPropertyValueMap::value_type(
+//	PROP_CHAR_ROTATION,
+//       uno::makeAny( sal_Int16( 0 ) )
+//	));
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_SCALE_WIDTH ));
+//     rOutMap.insert(::chart::tPropertyValueMap::value_type(
+//	PROP_CHAR_SCALE_WIDTH,
+//       uno::makeAny( sal_Int16( 71 ) )
+//	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ESCAPEMENT_HEIGHT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ESCAPEMENT_HEIGHT,
+      uno::makeAny( sal_Int8( 0 ) )
+	));
+
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CROSSED_OUT ));
+//     rOutMap.insert(::chart::tPropertyValueMap::value_type(
+//	PROP_CHAR_CROSSED_OUT,
+//       uno::makeAny( sal_Bool( sal_False ) )
+//	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_STRIKE_OUT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_STRIKE_OUT,
+      uno::makeAny( sal_Int16( awt::FontStrikeout::NONE ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_WORD_MODE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_WORD_MODE,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_FLASH ));
+//     rOutMap.insert(::chart::tPropertyValueMap::value_type(
+//	PROP_CHAR_FLASH,
+//       uno::makeAny( sal_Bool( sal_False ) )
+//	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_LOCALE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_LOCALE,
+      uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) )
+	));//todo correct default
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_SHADOWED ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_SHADOWED,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_CONTOURED ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_CONTOURED,
+      uno::makeAny( sal_Bool( sal_False ) )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RELIEF ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_RELIEF,
+      uno::makeAny( text::FontRelief::NONE )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_EMPHASIS ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_EMPHASIS,
+      uno::makeAny( text::FontEmphasis::NONE )
+	));
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_ADJUST ));
+//     rOutMap.insert(::chart::tPropertyValueMap::value_type(
+//	PROP_CHAR_RUBY_ADJUST,
+//       uno::makeAny( text::RubyAdjust_INDENT_BLOCK )
+//	));
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_STYLE_NAME ));
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_RUBY_IS_ABOVE ));
+//     rOutMap.insert(::chart::tPropertyValueMap::value_type(
+//	PROP_CHAR_RUBY_IS_ABOVE,
+//       uno::makeAny( sal_Bool( sal_True ) )
+//	));
+//     //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_INHIBIT_HYPHENATION ));
+//     rOutMap.insert(::chart::tPropertyValueMap::value_type(
+//	PROP_CHAR_INHIBIT_HYPHENATION,
+//       uno::makeAny( sal_Bool( sal_False ) )
+//	));
 
     // Asian (com.sun.star.style.CharacterPropertiesAsian)
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_CHAR_HEIGHT ));
-    rOutMap[ PROP_CHAR_ASIAN_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultFontHeight );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_WEIGHT ));
-    rOutMap[ PROP_CHAR_ASIAN_WEIGHT ] =
-        uno::makeAny( awt::FontWeight::NORMAL );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_POSTURE ));
-    rOutMap[ PROP_CHAR_ASIAN_POSTURE ] =
-        uno::makeAny( awt::FontSlant_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_LOCALE ));
-    rOutMap[ PROP_CHAR_ASIAN_LOCALE ] =
-        uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_NAME ));
-    rOutMap[ PROP_CHAR_ASIAN_FONT_NAME ] =
-        uno::makeAny( C2U( "Andale Sans UI" ));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_CHAR_HEIGHT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_CHAR_HEIGHT,
+      uno::makeAny( fDefaultFontHeight )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_WEIGHT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_WEIGHT,
+      uno::makeAny( awt::FontWeight::NORMAL )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_POSTURE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_POSTURE,
+      uno::makeAny( awt::FontSlant_NONE )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_LOCALE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_LOCALE,
+      uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) )
+	));//todo correct default
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_FONT_NAME,
+      uno::makeAny( C2U( "Andale Sans UI" ))
+	));
     //todo correct font default:
     //see static Font OutputDevice::GetDefaultFont( USHORT nType, LanguageType eLang, ULONG nFlags, const OutputDevice* pOutDev = NULL );
     //or  SvxFontItem ... (old chart source/core/chtmodel.cxx :Font aCJKFont )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_STYLE_NAME ));
-    rOutMap[ PROP_CHAR_ASIAN_FONT_STYLE_NAME ] = uno::Any();
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_FAMILY ));
-    rOutMap[ PROP_CHAR_ASIAN_FONT_FAMILY ] =
-        uno::makeAny( awt::FontFamily::SWISS );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_CHAR_SET ));
-    rOutMap[ PROP_CHAR_ASIAN_CHAR_SET ] =
-        uno::makeAny( awt::CharSet::DONTKNOW );//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_PITCH ));
-    rOutMap[ PROP_CHAR_ASIAN_FONT_PITCH ] =
-        uno::makeAny( awt::FontPitch::VARIABLE );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_STYLE_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_FONT_STYLE_NAME, uno::Any()));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_FAMILY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_FONT_FAMILY,
+      uno::makeAny( awt::FontFamily::SWISS )
+	));//todo correct default
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_CHAR_SET ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_CHAR_SET,
+      uno::makeAny( awt::CharSet::DONTKNOW )
+	));//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_ASIAN_FONT_PITCH ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_ASIAN_FONT_PITCH,
+      uno::makeAny( awt::FontPitch::VARIABLE )
+	));
 
     // Complex Text Layout (com.sun.star.style.CharacterPropertiesComplex)
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_CHAR_HEIGHT ));
-    rOutMap[ PROP_CHAR_COMPLEX_CHAR_HEIGHT ] =
-        uno::makeAny( fDefaultFontHeight );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_WEIGHT ));
-    rOutMap[ PROP_CHAR_COMPLEX_WEIGHT ] =
-        uno::makeAny( awt::FontWeight::NORMAL );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_POSTURE ));
-    rOutMap[ PROP_CHAR_COMPLEX_POSTURE ] =
-        uno::makeAny( awt::FontSlant_NONE );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_LOCALE ));
-    rOutMap[ PROP_CHAR_COMPLEX_LOCALE ] =
-        uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_NAME ));
-    rOutMap[ PROP_CHAR_COMPLEX_FONT_NAME ] =
-        uno::makeAny( C2U( "Tahoma" ));//todo correct default
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_CHAR_HEIGHT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_CHAR_HEIGHT,
+      uno::makeAny( fDefaultFontHeight )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_WEIGHT ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_WEIGHT,
+      uno::makeAny( awt::FontWeight::NORMAL )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_POSTURE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_POSTURE,
+      uno::makeAny( awt::FontSlant_NONE )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_LOCALE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_LOCALE,
+      uno::makeAny( lang::Locale( C2U( "US" ), C2U( "en" ), OUString()) )
+	));//todo correct default
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_FONT_NAME,
+      uno::makeAny( C2U( "Tahoma" ))
+	));//todo correct default
     //todo correct font default:
     //see static Font OutputDevice::GetDefaultFont( USHORT nType, LanguageType eLang, ULONG nFlags, const OutputDevice* pOutDev = NULL );
     //or  SvxFontItem ... (old chart source/core/chtmodel.cxx :Font aCJKFont )
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_STYLE_NAME ));
-    rOutMap[ PROP_CHAR_COMPLEX_FONT_STYLE_NAME ] = uno::Any();
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_FAMILY ));
-    rOutMap[ PROP_CHAR_COMPLEX_FONT_FAMILY ] =
-        uno::makeAny( awt::FontFamily::SWISS );//todo correct default
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_CHAR_SET ));
-    rOutMap[ PROP_CHAR_COMPLEX_CHAR_SET ] =
-        uno::makeAny( awt::CharSet::DONTKNOW );//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_PITCH ));
-    rOutMap[ PROP_CHAR_COMPLEX_FONT_PITCH ] =
-        uno::makeAny( awt::FontPitch::VARIABLE );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_STYLE_NAME ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_FONT_STYLE_NAME, uno::Any()));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_FAMILY ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_FONT_FAMILY,
+      uno::makeAny( awt::FontFamily::SWISS )
+	));//todo correct default
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_CHAR_SET ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_CHAR_SET,
+      uno::makeAny( awt::CharSet::DONTKNOW )
+	));//use DONTKNOW instead of SYSTEM to avoid assertion issue 50249
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CHAR_COMPLEX_FONT_PITCH ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CHAR_COMPLEX_FONT_PITCH,
+      uno::makeAny( awt::FontPitch::VARIABLE )
+	));
 }
 
 bool CharacterProperties::IsCharacterPropertyHandle( sal_Int32 nHandle )
--- chart2/source/tools/SceneProperties.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/tools/SceneProperties.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -350,64 +350,96 @@
         aMtx.Line3.Column1 = aMtx.Line3.Column2 = aMtx.Line3.Column4 =
         aMtx.Line4.Column1 = aMtx.Line4.Column2 = aMtx.Line4.Column3 = 0.0;
 
-    rOutMap[ PROP_SCENE_TRANSF_MATRIX ] = uno::makeAny( aMtx );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_TRANSF_MATRIX, uno::makeAny( aMtx )));
 
     sal_Int32 nDefaultDistance = 4200;
-    rOutMap[ PROP_SCENE_DISTANCE ] = uno::makeAny( nDefaultDistance );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_DISTANCE, uno::makeAny( nDefaultDistance )));
 
     sal_Int32 nDefaultFocalLength = 8000;
-    rOutMap[ PROP_SCENE_FOCAL_LENGTH ] = uno::makeAny( nDefaultFocalLength );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_FOCAL_LENGTH, uno::makeAny( nDefaultFocalLength )));
 
 //     rOutMap[ PROP_SCENE_SHADOW_SLANT ];
 
-    rOutMap[ PROP_SCENE_SHADE_MODE ] = uno::makeAny( drawing::ShadeMode_SMOOTH );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_SHADE_MODE, uno::makeAny( drawing::ShadeMode_SMOOTH )));
 
     sal_Int32 nDefaultAmbientColor = 0x666666;  // grey80
-    rOutMap[ PROP_SCENE_AMBIENT_COLOR ] = uno::makeAny( nDefaultAmbientColor );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_AMBIENT_COLOR, uno::makeAny( nDefaultAmbientColor )));
 
-    rOutMap[ PROP_SCENE_TWO_SIDED_LIGHTING ] = aTrue;
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_TWO_SIDED_LIGHTING, aTrue));
 
     drawing::Position3D vrp( 0.0, 0.0, 1.0 );
     drawing::Direction3D vpn( 0.0, 0.0, 1.0 );
     drawing::Direction3D vup( 0.0, 1.0, 0.0 );
     drawing::CameraGeometry aDefaultCameraGeometry( vrp, vpn, vup );
-    rOutMap[ PROP_SCENE_CAMERA_GEOMETRY ] = uno::makeAny( aDefaultCameraGeometry );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_CAMERA_GEOMETRY, uno::makeAny( aDefaultCameraGeometry )));
 
-    rOutMap[ PROP_SCENE_PERSPECTIVE ] = uno::makeAny( drawing::ProjectionMode_PERSPECTIVE );
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_PERSPECTIVE, uno::makeAny( drawing::ProjectionMode_PERSPECTIVE )));
 
     // Light Sources
     // -------------
-    rOutMap[ PROP_SCENE_LIGHT_ON_1 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_2 ] = aTrue;
-    rOutMap[ PROP_SCENE_LIGHT_ON_3 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_4 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_5 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_6 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_7 ] = aFalse;
-    rOutMap[ PROP_SCENE_LIGHT_ON_8 ] = aFalse;
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_ON_1, aFalse));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_ON_2, aTrue));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_ON_3, aFalse));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_ON_4, aFalse));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_ON_5, aFalse));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_ON_6, aFalse));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_ON_7, aFalse));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_ON_8, aFalse));
 
     uno::Any aDefaultLightDirection;
     aDefaultLightDirection <<= drawing::Direction3D(0.57735026918963, 0.57735026918963, 0.57735026918963);
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_1 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_2 ] = aDefaultLightDirection;
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_DIRECTION_1, aDefaultLightDirection));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_DIRECTION_2, aDefaultLightDirection));
     aDefaultLightDirection <<= drawing::Direction3D( 0.0, 0.0, 1.0 );
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_3 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_4 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_5 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_6 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_7 ] = aDefaultLightDirection;
-    rOutMap[ PROP_SCENE_LIGHT_DIRECTION_8 ] = aDefaultLightDirection;
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_DIRECTION_3, aDefaultLightDirection));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_DIRECTION_4, aDefaultLightDirection));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_DIRECTION_5, aDefaultLightDirection));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_DIRECTION_6, aDefaultLightDirection));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_DIRECTION_7, aDefaultLightDirection));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_DIRECTION_8, aDefaultLightDirection));
 
     uno::Any aDefaultLightColor;
     aDefaultLightColor <<= static_cast< sal_Int32 >( 0xcccccc ); // grey20
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_1 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_2 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_3 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_4 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_5 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_6 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_7 ] = aDefaultLightColor;
-    rOutMap[ PROP_SCENE_LIGHT_COLOR_8 ] = aDefaultLightColor;
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_COLOR_1, aDefaultLightColor));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_COLOR_2, aDefaultLightColor));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_COLOR_3, aDefaultLightColor));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_COLOR_4, aDefaultLightColor));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_COLOR_5, aDefaultLightColor));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_COLOR_6, aDefaultLightColor));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_COLOR_7, aDefaultLightColor));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_SCENE_LIGHT_COLOR_8, aDefaultLightColor));
 }
 
 } //  namespace chart
--- chart2/source/model/main/GridProperties.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/GridProperties.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -93,12 +93,15 @@
 {
     ::chart::LineProperties::AddDefaultsToMap( rOutMap );
 
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_GRID_SHOW ));
-    rOutMap[ PROP_GRID_SHOW ] = uno::makeAny( sal_False );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_GRID_SHOW ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_GRID_SHOW, uno::makeAny( sal_False )));
 
     // override other defaults
-    rOutMap[ ::chart::LineProperties::PROP_LINE_COLOR ] =
-        uno::makeAny( sal_Int32( 0xb3b3b3) ); // gray30
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::LineProperties::PROP_LINE_COLOR,
+      uno::makeAny( sal_Int32( 0xb3b3b3) )
+	)); // gray30
 }
 
 const Sequence< Property > & lcl_getPropertySequence()
--- chart2/source/model/main/StockBar.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/StockBar.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -103,8 +103,10 @@
     ::chart::tPropertyValueMap & rOutMap )
 {
     // override other defaults
-    rOutMap[ ::chart::FillProperties::PROP_FILL_COLOR ] =
-        uno::makeAny( sal_Int32( 0xffffff) ); // white
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	::chart::FillProperties::PROP_FILL_COLOR,
+      uno::makeAny( sal_Int32( 0xffffff) )
+	)); // white
 }
 
 ::cppu::IPropertyArrayHelper & lcl_getInfoHelper()
--- chart2/source/model/template/CandleStickChartType.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/CandleStickChartType.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -111,16 +111,22 @@
     ::osl::Mutex & rMutex )
 {
     // must match default in CTOR!
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_JAPANESE ));
-    rOutMap[ PROP_CANDLESTICKCHARTTYPE_JAPANESE ] =
-        uno::makeAny( false );
-
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_SHOW_FIRST ));
-    rOutMap[ PROP_CANDLESTICKCHARTTYPE_SHOW_FIRST ] =
-        uno::makeAny( false );
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_SHOW_HIGH_LOW ));
-    rOutMap[ PROP_CANDLESTICKCHARTTYPE_SHOW_HIGH_LOW ] =
-        uno::makeAny( true );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_JAPANESE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CANDLESTICKCHARTTYPE_JAPANESE,
+      uno::makeAny( false )
+	));
+
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_SHOW_FIRST ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CANDLESTICKCHARTTYPE_SHOW_FIRST,
+      uno::makeAny( false )
+	));
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_CANDLESTICKCHARTTYPE_SHOW_HIGH_LOW ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_CANDLESTICKCHARTTYPE_SHOW_HIGH_LOW,
+      uno::makeAny( true )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/template/ColumnChartType.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/template/ColumnChartType.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -84,14 +84,18 @@
     Sequence< sal_Int32 > aSeq(2);
 
     aSeq[0]=aSeq[1]=0;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BARCHARTTYPE_OVERLAP_SEQUENCE ));
-    rOutMap[ PROP_BARCHARTTYPE_OVERLAP_SEQUENCE ] =
-        uno::makeAny( aSeq );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BARCHARTTYPE_OVERLAP_SEQUENCE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_BARCHARTTYPE_OVERLAP_SEQUENCE,
+      uno::makeAny( aSeq )
+	));
 
     aSeq[0]=aSeq[1]=100;
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE ));
-    rOutMap[ PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE ] =
-        uno::makeAny( aSeq );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_BARCHARTTYPE_GAPWIDTH_SEQUENCE,
+      uno::makeAny( aSeq )
+	));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/main/BaseCoordinateSystem.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/BaseCoordinateSystem.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -86,8 +86,9 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_COORDINATESYSTEM_SWAPXANDYAXIS ));
-    rOutMap[ PROP_COORDINATESYSTEM_SWAPXANDYAXIS ] = uno::makeAny( false );
+    //OSL_ASSERT( rOutMap.end() == rOutMap.find( PROP_COORDINATESYSTEM_SWAPXANDYAXIS ));
+    rOutMap.insert(::chart::tPropertyValueMap::value_type(
+	PROP_COORDINATESYSTEM_SWAPXANDYAXIS, uno::makeAny( false )));
 }
 
 const Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/model/main/DataSeries.cxx.orig	2007-06-27 13:05:21.000000000 +0200
+++ chart2/source/model/main/DataSeries.cxx	2007-06-27 13:05:21.000000000 +0200
@@ -252,12 +252,18 @@
         CharacterProperties::AddDefaultsToMap( aStaticDefaults );
 
         float fDefaultCharHeight = 6.0;
-        aStaticDefaults[ ::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT ] =
-            uno::makeAny( fDefaultCharHeight );
-        aStaticDefaults[ ::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT ] =
-            uno::makeAny( fDefaultCharHeight );
-        aStaticDefaults[ ::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT ] =
-            uno::makeAny( fDefaultCharHeight );
+        aStaticDefaults.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_CHAR_HEIGHT,
+            uno::makeAny( fDefaultCharHeight )
+	));
+        aStaticDefaults.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_ASIAN_CHAR_HEIGHT,
+            uno::makeAny( fDefaultCharHeight )
+	));
+        aStaticDefaults.insert(::chart::tPropertyValueMap::value_type(
+	::chart::CharacterProperties::PROP_CHAR_COMPLEX_CHAR_HEIGHT,
+            uno::makeAny( fDefaultCharHeight )
+	));
     }
 
     tPropertyValueMap::const_iterator aFound(
