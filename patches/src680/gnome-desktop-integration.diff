--- config_office/configure.in	2005-06-01 14:33:59.000000000 +0530
+++ config_office/configure.in	2005-06-23 14:17:05.593146173 +0530
@@ -37,6 +37,9 @@ AC_ARG_ENABLE(openldap,
 [  --enable-openldap       Enables the use of the OpenLDAP LDAP SDK instead
                           of the Netscape/Mozilla one
 ],,)
+AC_ARG_ENABLE(lockdown,
+[  --enable-lockdown       Enables the gconf integration work in OOo
+],,)
 AC_ARG_ENABLE(libsn,
 [  --enable-libsn          Enables the use of libstartup-notification
 ],,)
@@ -3784,6 +3787,19 @@ AC_SUBST(KDE_LIBS)
 AC_SUBST(MOC)
 
 dnl ===================================================================
+dnl Test for the enabling the lockdown pieces
+dnl ===================================================================
+AC_MSG_CHECKING([whether to enable the lockdown pieces])
+ENABLE_LOCKDOWN=""
+if test -n "$enable_lockdown" && test "$enable_lockdown" != "no"; then
+  ENABLE_LOCKDOWN=YES
+  AC_MSG_RESULT([yes])
+else
+  AC_MSG_RESULT([no])
+fi
+AC_SUBST(ENABLE_LOCKDOWN)
+
+dnl ===================================================================
 dnl Test for the presence of libstartup-notification
 dnl ===================================================================
 AC_MSG_CHECKING([whether to use libstartup-notification])
--- config_office/set_soenv.in	2005-06-01 14:33:59.000000000 +0530
+++ config_office/set_soenv.in	2005-06-23 14:16:39.292395253 +0530
@@ -1678,6 +1678,7 @@ ToFile( "WITH_LIBART",       "@WITH_LIBA
 ToFile( "LIBART_CFLAGS",     "@LIBART_CFLAGS@",    "e" );
 ToFile( "WITH_MYSPELL_DICTS","@WITH_MYSPELL_DICTS@","e");
 ToFile( "LIBART_LIBS",       "@LIBART_LIBS@",      "e" );
+ToFile( "ENABLE_LOCKDOWN",   "@ENABLE_LOCKDOWN@",  "e" );
 ToFile( "WITH_LIBSN",        "@WITH_LIBSN@",       "e" );
 ToFile( "LIBSN_CFLAGS",      "@LIBSN_CFLAGS@",     "e" );
 ToFile( "LIBSN_LIBS",        "@LIBSN_LIBS@",       "e" );
--- shell/source/backends/gconfbe/gconfbackend.cxx	2005-07-29 14:22:24.000000000 +0530
+++ shell/source/backends/gconfbe/gconfbackend.cxx	2005-08-02 19:11:40.506543209 +0530
@@ -61,17 +61,9 @@
 
 #include "gconfbackend.hxx"
 
-#ifndef GCONFCOMMONLAYER_HXX_
-#include "gconfcommonlayer.hxx"
-#endif 
-
-#ifndef GCONFINETLAYER_HXX_
-#include "gconfinetlayer.hxx"
-#endif 
-
-#ifndef GCONFVCLLAYER_HXX_
-#include "gconfvcllayer.hxx"
-#endif 
+#ifndef GCONFLAYER_HXX_
+#include "gconflayer.hxx"
+#endif // GCONFLAYER_HXX_
 
 #ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_COMPONENTCHANGEEVENT_HPP_
 #include <com/sun/star/configuration/backend/ComponentChangeEvent.hpp>
@@ -99,6 +91,481 @@
 
 #include <stdio.h>
 
+// each entry should have an identifying ConfigurationSetting
+static const ConfigurationValue SetupConfigurationValuesList[] =
+{
+#ifdef ENABLE_LOCKDOWN
+    {
+        SETTING_WRITER_DEFAULT_DOC_FORMAT,
+        "/apps/openoffice/writer_default_document_format",
+        "org.openoffice.Setup/Office/Factories/com.sun.star.text.TextDocument/ooSetupFactoryDefaultFilter",
+        "string",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_IMPRESS_DEFAULT_DOC_FORMAT,
+        "/apps/openoffice/impress_default_document_format",
+        "org.openoffice.Setup/Office/Factories/com.sun.star.presentation.PresentationDocument/ooSetupFactoryDefaultFilter",
+        "string",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_CALC_DEFAULT_DOC_FORMAT,
+        "/apps/openoffice/calc_default_document_format",
+        "org.openoffice.Setup/Office/Factories/com.sun.star.sheet.SpreadsheetDocument/ooSetupFactoryDefaultFilter",
+        "string",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+#endif // ENABLE_LOCKDOWN
+};
+
+// each entry should have an identifying ConfigurationSetting
+static const ConfigurationValue RecoveryConfigurationValuesList[] =
+{
+#ifdef ENABLE_LOCKDOWN
+    {
+        SETTING_AUTO_SAVE,
+        GCONF_AUTO_SAVE_KEY,
+        "org.openoffice.Office.Recovery/AutoSave/Enabled",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_AUTO_SAVE_INTERVAL,
+        "/apps/openoffice/auto_save_interval",
+        "org.openoffice.Office.Recovery/AutoSave/TimeIntervall",
+        "int",
+        sal_False,
+        sal_False,
+        SETTING_AUTO_SAVE
+    },
+#endif // ENABLE_LOCKDOWN
+};
+
+// each entry should have an identifying ConfigurationSetting
+static const ConfigurationValue UserProfileConfigurationValuesList[] =
+{
+    {
+        SETTING_USER_GIVENNAME,
+        "/desktop/gnome/url-handlers/mailto/command", // dummy, needed for getTimestamp
+        "org.openoffice.UserProfile/Data/givenname",
+        "string",
+        sal_False,
+        sal_True,
+        SETTING_USER_GIVENNAME
+    },
+
+    {
+        SETTING_USER_SURNAME,
+        "/desktop/gnome/url-handlers/mailto/command", // dummy, needed for getTimestamp
+        "org.openoffice.UserProfile/Data/sn",
+        "string",
+        sal_False,
+        sal_True,
+        SETTING_USER_SURNAME
+    },
+};
+
+// each entry should have an identifying ConfigurationSetting
+static const ConfigurationValue VCLConfigurationValuesList[] =
+{
+    {
+        SETTING_ENABLE_ACCESSIBILITY,
+        "/desktop/gnome/interface/accessibility",
+        "org.openoffice.VCL/Settings/Accessibility/EnableATToolSupport",
+        "string",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+#ifdef ENABLE_LOCKDOWN
+
+    {
+        SETTING_DISABLE_PRINTING,
+        "/desktop/gnome/lockdown/disable_printing",
+        "org.openoffice.VCL/Settings/DesktopManagement/DisablePrinting",
+        "string",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+#endif // ENABLE_LOCKDOWN
+
+};
+
+// each entry should have an identifying ConfigurationSetting
+static const ConfigurationValue InetConfigurationValuesList[] =
+{
+    {
+        SETTING_PROXY_MODE,
+        GCONF_PROXY_MODE_KEY,
+        "org.openoffice.Inet/Settings/ooInetProxyType",
+        "int",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_PROXY_HTTP_HOST,
+        "/system/http_proxy/host",
+        "org.openoffice.Inet/Settings/ooInetHTTPProxyName",
+        "string",
+        sal_False,
+        sal_False,
+        SETTING_PROXY_MODE
+    },
+
+    {
+        SETTING_PROXY_HTTP_PORT,
+        "/system/http_proxy/port",
+        "org.openoffice.Inet/Settings/ooInetHTTPProxyPort",
+        "int",
+        sal_False,
+        sal_False,
+        SETTING_PROXY_MODE
+    },
+
+    {
+        SETTING_PROXY_FTP_HOST,
+        "/system/proxy/ftp_host",
+        "org.openoffice.Inet/Settings/ooInetFTPProxyName",
+        "string",
+        sal_False,
+        sal_False,
+        SETTING_PROXY_MODE
+    },
+
+    {
+        SETTING_PROXY_FTP_PORT,
+        "/system/proxy/ftp_port",
+        "org.openoffice.Inet/Settings/ooInetFTPProxyPort",
+        "int",
+        sal_False,
+        sal_False,
+        SETTING_PROXY_MODE
+    },
+};
+
+// each entry should have an identifying ConfigurationSetting
+static const ConfigurationValue CommonConfigurationValuesList[] =
+{
+    {
+        SETTING_MAILER_PROGRAM,
+        "/desktop/gnome/url-handlers/mailto/command",
+        "org.openoffice.Office.Common/ExternalMailer/Program",
+        "string",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WORK_DIRECTORY,
+        "/desktop/gnome/url-handlers/mailto/command", // dummy, needed for getTimestamp
+        "org.openoffice.Office.Common/Path/Current/Work",
+        "string",
+        sal_False,
+        sal_True,
+        SETTING_WORK_DIRECTORY, // so that the existence of the dir can be checked
+    },
+
+#ifdef ENABLE_LOCKDOWN
+
+    {
+        SETTING_USE_SYSTEM_FILE_DIALOG,
+        "/apps/openoffice/use_ooo_dialogs",
+        "org.openoffice.Office.Common/Misc/UseSystemFileDialog",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_DISABLE_UI_CUSTOMIZATION,
+        "/apps/openoffice/lockdown/disable_ui_customization",
+        "org.openoffice.Office.Common/Misc/DisableUICustomization",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_PRINTING_MODIFIES_DOCUMENT,
+        "/apps/openoffice/printing_modifies_doc",
+        "org.openoffice.Office.Common/Print/PrintingModifiesDocument",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SHOW_ICONS_IN_MENUS,
+        "/apps/openoffice/show_menu_icons",
+        "org.openoffice.Office.Common/View/Menu/ShowIconsInMenues",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SHOW_INACTIVE_MENUITEMS,
+        "/apps/openoffice/show_menu_inactive_items",
+        "org.openoffice.Office.Common/View/Menu/DontHideDisabledEntry",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SHOW_FONT_HISTORY,
+        "/apps/openoffice/show_font_history",
+        "org.openoffice.Office.Common/Font/View/History",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_ENABLE_OPENGL,
+        "/apps/openoffice/use_opengl",
+        "org.openoffice.Office.Common/_3D_Engine/OpenGL",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_OPTIMIZE_OPENGL,
+        "/apps/openoffice/optimize_opengl",
+        "org.openoffice.Office.Common/_3D_Engine/OpenGL_Faster",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SAVE_DOCUMENT_WINDOWS,
+        "/apps/openoffice/restore_windows",
+        "org.openoffice.Office.Common/Save/Document/DocumentWindows",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SAVE_DOCUMENT_VIEW_INFO,
+        "/apps/openoffice/restore_views",
+        "org.openoffice.Office.Common/Save/Document/ViewInfo",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_USE_SYSTEM_FONT,
+        "/apps/openoffice/use_system_font",
+        "org.openoffice.Office.Common/Accessibility/IsSystemFont",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_USE_FONT_ANTI_ALIASING,
+        "/apps/openoffice/use_anti_aliasing",
+        "org.openoffice.Office.Common/View/FontAntiAliasing/Enabled",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_CREATE_PDF,
+        "/apps/openoffice/lockdown/warn_info_create_pdf",
+        "org.openoffice.Office.Common/Security/Scripting/WarnCreatePDF",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_PRINT_DOC,
+        "/apps/openoffice/lockdown/warn_info_printing",
+        "org.openoffice.Office.Common/Security/Scripting/WarnPrintDoc",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_SAVEORSEND_DOC,
+        "/apps/openoffice/lockdown/warn_info_saving",
+        "org.openoffice.Office.Common/Security/Scripting/WarnSaveOrSendDoc",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_SIGN_DOC,
+        "/apps/openoffice/lockdown/warn_info_signing",
+        "org.openoffice.Office.Common/Security/Scripting/WarnSignDoc",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_REMOVE_PERSONAL_INFO,
+        "/apps/openoffice/lockdown/remove_personal_info_on_save",
+        "org.openoffice.Office.Common/Security/Scripting/RemovePersonalInfoOnSaving",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_RECOMMEND_PASSWORD,
+        "/apps/openoffice/lockdown/recommend_password_on_save",
+        "org.openoffice.Office.Common/Security/Scripting/RecommendPasswordProtection",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_UNDO_STEPS,
+        "/apps/openoffice/undo_steps",
+        "org.openoffice.Office.Common/Undo/Steps",
+        "int",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SYMBOL_SET,
+        "/apps/openoffice/icon_size",
+        "org.openoffice.Office.Common/Misc/SymbolSet",
+        "short",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_MACRO_SECURITY_LEVEL,
+        "/apps/openoffice/lockdown/macro_security_level",
+        "org.openoffice.Office.Common/Security/Scripting/MacroSecurityLevel",
+        "int",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_CREATE_BACKUP,
+        "/apps/openoffice/create_backup",
+        "org.openoffice.Office.Common/Save/Document/CreateBackup",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_ALIEN_FORMAT,
+        "/apps/openoffice/warn_alien_format",
+        "org.openoffice.Office.Common/Save/Document/WarnAlienFormat",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+#endif // ENABLE_LOCKDOWN
+
+};
+
+static const char * SetupPreloadValuesList[] =
+{
+#ifdef ENABLE_LOCKDOWN
+    "/apps/openoffice",
+#endif // ENABLE_LOCKDOWN
+    NULL
+};
+
+static const char * RecoveryPreloadValuesList[] =
+{
+#ifdef ENABLE_LOCKDOWN
+    "/apps/openoffice",
+#endif // ENABLE_LOCKDOWN
+    NULL
+};
+
+static const char * UserProfilePreloadValuesList[] =
+{
+    NULL
+};
+
+static const char * VCLPreloadValuesList[] =
+{
+    "/desktop/gnome/interface",
+#ifdef ENABLE_LOCKDOWN
+    "/desktop/gnome/lockdown",
+#endif // ENABLE_LOCKDOWN
+    NULL
+};
+
+static const char * InetPreloadValuesList[] =
+{
+    "/system/proxy",
+    "/system/http_proxy/host",
+    NULL
+};
+
+static const char * CommonPreloadValuesList[] =
+{
+    "/desktop/gnome/url-handlers/mailto",
+#ifdef ENABLE_LOCKDOWN
+    "/apps/openoffice/lockdown",
+    "/apps/openoffice",
+#endif // ENABLE_LOCKDOWN
+    NULL
+};
+
 //==============================================================================
 
 /*
@@ -193,16 +660,47 @@ uno::Reference<backend::XLayer> SAL_CALL
     
     if( aComponent.equalsAscii("org.openoffice.Office.Common" ) )
     {
-        xLayer = new GconfCommonLayer(m_xContext);
+        xLayer = new GconfLayer( m_xContext,
+                                 CommonConfigurationValuesList,
+                                 G_N_ELEMENTS( CommonConfigurationValuesList ),
+                                 CommonPreloadValuesList );
     }
     else if( aComponent.equalsAscii("org.openoffice.Inet" ) )
     {
-        xLayer = new GconfInetLayer(m_xContext);
+        xLayer = new GconfLayer( m_xContext,
+                                 InetConfigurationValuesList,
+                                 G_N_ELEMENTS( InetConfigurationValuesList ),
+                                 InetPreloadValuesList );
     }
     else if( aComponent.equalsAscii("org.openoffice.VCL" ) )
     {
-        xLayer = new GconfVCLLayer(m_xContext);
+        xLayer = new GconfLayer( m_xContext,
+                                 VCLConfigurationValuesList,
+                                 G_N_ELEMENTS( VCLConfigurationValuesList ),
+                                 VCLPreloadValuesList );
+    }
+    else if( aComponent.equalsAscii("org.openoffice.UserProfile" ) )
+    {
+        xLayer = new GconfLayer( m_xContext,
+                                 UserProfileConfigurationValuesList,
+                                 G_N_ELEMENTS( UserProfileConfigurationValuesList ),
+                                 UserProfilePreloadValuesList );
     }
+    else if( aComponent.equalsAscii("org.openoffice.Office.Recovery" ) )
+    {
+        xLayer = new GconfLayer( m_xContext,
+                                 RecoveryConfigurationValuesList,
+                                 G_N_ELEMENTS( RecoveryConfigurationValuesList ),
+                                 RecoveryPreloadValuesList );
+    }
+    else if( aComponent.equalsAscii("org.openoffice.Setup" ) )
+    {
+        xLayer = new GconfLayer( m_xContext,
+                                 SetupConfigurationValuesList,
+                                 G_N_ELEMENTS( SetupConfigurationValuesList ),
+                                 SetupPreloadValuesList );
+    }
+    
     
     return xLayer;
 }
@@ -460,13 +958,20 @@ uno::Sequence<rtl::OUString> SAL_CALL Gc
 
 uno::Sequence<rtl::OUString> SAL_CALL GconfBackend::getSupportedComponents(void)
 {
-    uno::Sequence<rtl::OUString> aSupportedComponentsList(3) ;
+    uno::Sequence<rtl::OUString> aSupportedComponentsList(6) ;
+
     aSupportedComponentsList[0] = rtl::OUString( 
         RTL_CONSTASCII_USTRINGPARAM("org.openoffice.VCL")) ;
     aSupportedComponentsList[1] = rtl::OUString( 
         RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Inet")) ;
     aSupportedComponentsList[2] = rtl::OUString( 
         RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Office.Common")) ;
+    aSupportedComponentsList[3] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.UserProfile")) ;
+    aSupportedComponentsList[4] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Office.Recovery")) ;
+    aSupportedComponentsList[4] = rtl::OUString( 
+        RTL_CONSTASCII_USTRINGPARAM("org.openoffice.Setup")) ;
             
     return aSupportedComponentsList ;
 }
--- shell/source/backends/gconfbe/gconfbe1-ucd.txt	2005-07-29 14:22:24.000000000 +0530
+++ shell/source/backends/gconfbe/gconfbe1-ucd.txt	2005-08-02 17:46:33.958823361 +0530
@@ -3,7 +3,7 @@ ImplementationName=com.sun.star.comp.con
 ComponentName=gconfbe1.uno.so
 LoaderName=com.sun.star.loader.SharedLibrary
 [Data]
-SupportedComponents=org.openoffice.VCL;org.openoffice.Inet;org.openoffice.Office.Common
+SupportedComponents=org.openoffice.VCL;org.openoffice.Inet;org.openoffice.Office.Common;org.openoffice.UserProfile;org.openoffice.Office.Recovery;org.openoffice.Setup
 [SupportedServices]
 com.sun.star.configuration.backend.GconfBackend
 com.sun.star.configuration.backend.PlatformBackend
--- shell/source/backends/gconfbe/gconfbecdef.cxx	2005-01-31 18:43:19.000000000 +0530
+++ shell/source/backends/gconfbe/gconfbecdef.cxx	2005-08-02 17:45:06.314270259 +0530
@@ -97,18 +97,11 @@ static uno::Reference<uno::XInterface> S
         
         if (xCurrentContext.is())
         {
-            uno::Any aValue = xCurrentContext->getValueByName(
-                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "system.desktop-environment" ) ) );
-        
-            rtl::OUString aDesktopEnvironment;
-            if ( (aValue >>= aDesktopEnvironment) && (aDesktopEnvironment.equalsAscii("GNOME")) )
-            {
                 // ORBit-2 versions < 2.8 cause a deadlock with the gtk+ VCL plugin
                 if ( (orbit_major_version >= 2) && (orbit_minor_version >= 8) )
                 {
                     return * GconfBackend::createInstance(xContext);
                 }
-            }
         }
         
         return uno::Reference<uno::XInterface>(); 
--- shell/source/backends/gconfbe/makefile.mk	2005-07-29 14:22:24.000000000 +0530
+++ shell/source/backends/gconfbe/makefile.mk	2005-07-21 15:03:32.000000000 +0530
@@ -81,6 +81,10 @@ UNIXTEXT=$(MISC)/$(TARGET)1-ucd.txt
 # no "lib" prefix
 DLLPRE =
 
+.IF "$(ENABLE_LOCKDOWN)" == "YES"
+CFLAGS+=-DENABLE_LOCKDOWN
+.ENDIF
+
 .IF "$(ENABLE_GNOMEVFS)"!=""
 COMPILER_WARN_ALL=TRUE
 PKGCONFIG_MODULES=gconf-2.0 gobject-2.0 ORBit-2.0 glib-2.0
@@ -102,9 +106,7 @@ PKGCONFIG_LIBS!:=-Wl,--export-dynamic $(
 SLOFILES=\
 	$(SLO)$/gconfbecdef.obj \
 	$(SLO)$/gconfbackend.obj \
-	$(SLO)$/gconfvcllayer.obj \
-	$(SLO)$/gconfinetlayer.obj \
-	$(SLO)$/gconfcommonlayer.obj
+	$(SLO)$/gconflayer.obj
         
 SHL1NOCHECK=TRUE
 SHL1TARGET=$(TARGET)1.uno   
--- /dev/null	2004-08-25 23:04:59.000000000 +0530
+++ shell/source/backends/gconfbe/gconflayer.hxx	2005-08-02 19:16:03.105492568 +0530
@@ -0,0 +1,140 @@
+#ifndef GCONFLAYER_HXX_
+#define GCONFLAYER_HXX_
+
+#ifndef GCONFBACKEND_HXX_
+#include "gconfbackend.hxx"
+#endif // GCONFBACKEND_HXX_
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYER_HPP_
+#include <com/sun/star/configuration/backend/XLayer.hpp>
+#endif // _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYER_HPP_
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_BACKENDACCESSEXCEPTION_HPP_
+#include <com/sun/star/configuration/backend/BackendAccessException.hpp>
+#endif // _COM_SUN_STAR_CONFIGURATION_BACKEND_BACKENDACCESSEXCEPTION_HPP_
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif // _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+
+#ifndef _COM_SUN_STAR_UTIL_XTIMESTAMPED_HPP_
+#include <com/sun/star/util/XTimeStamped.hpp>
+#endif // _COM_SUN_STAR_UTIL_XTIMESTAMPED_HPP_
+
+#ifndef _CPPUHELPER_IMPLBASE2_HXX_
+#include <cppuhelper/implbase2.hxx>
+#endif // _CPPUHELPER_IMPLBASE2_HXX_
+
+#define GCONF_PROXY_MODE_KEY "/system/proxy/mode"
+#define GCONF_AUTO_SAVE_KEY  "/apps/openoffice/auto_save"
+
+enum ConfigurationSetting
+{
+    SETTING_PROXY_MODE,
+    SETTING_PROXY_HTTP_HOST,
+    SETTING_PROXY_HTTP_PORT,
+    SETTING_PROXY_FTP_HOST,
+    SETTING_PROXY_FTP_PORT,
+    SETTING_ENABLE_ACCESSIBILITY,
+    SETTING_MAILER_PROGRAM,
+    SETTING_WORK_DIRECTORY,
+    SETTING_USER_GIVENNAME,
+    SETTING_USER_SURNAME,
+
+#ifdef ENABLE_LOCKDOWN
+
+    SETTING_DISABLE_PRINTING,
+    SETTING_USE_SYSTEM_FILE_DIALOG,
+    SETTING_DISABLE_UI_CUSTOMIZATION,
+    SETTING_PRINTING_MODIFIES_DOCUMENT,
+    SETTING_SHOW_ICONS_IN_MENUS,
+    SETTING_SHOW_INACTIVE_MENUITEMS,
+    SETTING_SHOW_FONT_HISTORY,
+    SETTING_ENABLE_OPENGL,
+    SETTING_OPTIMIZE_OPENGL,
+    SETTING_SAVE_DOCUMENT_WINDOWS,
+    SETTING_SAVE_DOCUMENT_VIEW_INFO,
+    SETTING_USE_SYSTEM_FONT,
+    SETTING_USE_FONT_ANTI_ALIASING,
+    SETTING_WARN_CREATE_PDF,
+    SETTING_WARN_PRINT_DOC,
+    SETTING_WARN_SAVEORSEND_DOC,
+    SETTING_WARN_SIGN_DOC,
+    SETTING_REMOVE_PERSONAL_INFO,
+    SETTING_RECOMMEND_PASSWORD,
+    SETTING_UNDO_STEPS,
+    SETTING_SYMBOL_SET,
+    SETTING_MACRO_SECURITY_LEVEL,
+    SETTING_CREATE_BACKUP,
+    SETTING_WARN_ALIEN_FORMAT,
+    SETTING_AUTO_SAVE,
+    SETTING_AUTO_SAVE_INTERVAL,
+    SETTING_WRITER_DEFAULT_DOC_FORMAT,
+    SETTING_IMPRESS_DEFAULT_DOC_FORMAT,
+    SETTING_CALC_DEFAULT_DOC_FORMAT,
+
+#endif // ENABLE_LOCKDOWN
+
+    SETTINGS_LAST
+};
+
+struct ConfigurationValue
+{
+    const ConfigurationSetting nSettingId;    
+    const gchar *GconfItem;
+    const char *OOoConfItem;
+    const char *OOoConfValueType;
+    const sal_Bool bLocked;
+    const sal_Bool bNeedsTranslation;
+    const ConfigurationSetting nDependsOn;
+};
+
+namespace css = com::sun::star ;
+namespace uno = css::uno ;
+namespace lang = css::lang ;
+namespace backend = css::configuration::backend ;
+namespace util = css::util ;
+
+/**
+  Implementation of the XLayer interface for the Gconf values mapped into
+  the org.openoffice.* configuration component.
+  */
+class GconfLayer : public cppu::WeakImplHelper2<backend::XLayer, util::XTimeStamped> 
+{
+public :
+    /**
+      Constructor given the component context
+
+      @param xContext       The component context
+    */
+
+    GconfLayer( const uno::Reference<uno::XComponentContext>& xContext,
+                const ConfigurationValue pConfigurationValuesList[],
+                const sal_Int32 nConfigurationValues,
+                const char * pPreloadValuesList[] );
+
+    // XLayer
+    virtual void SAL_CALL readData(
+        const uno::Reference<backend::XLayerHandler>& xHandler) 
+        throw ( backend::MalformedDataException,
+                lang::NullPointerException, 
+                lang::WrappedTargetException, 
+                uno::RuntimeException );
+    
+    // XTimeStamped
+    virtual rtl::OUString SAL_CALL getTimestamp(void) 
+            throw (uno::RuntimeException);
+
+    protected:
+
+    /** Destructor */
+    ~GconfLayer(void) {}
+              
+private :
+    uno::Reference<backend::XLayerContentDescriber> m_xLayerContentDescriber;
+    const ConfigurationValue* m_pConfigurationValuesList;
+    const sal_Int32 m_nConfigurationValues;
+    const char** m_pPreloadValuesList;
+  } ;
+
+#endif // GCONFLAYER
--- /dev/null	2004-08-25 23:04:59.000000000 +0530
+++ shell/source/backends/gconfbe/gconflayer.cxx	2005-08-02 19:12:24.656303889 +0530
@@ -0,0 +1,353 @@
+#ifndef GCONFLAYER_HXX_
+#include "gconflayer.hxx"
+#endif 
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_PROPERTYINFO_HPP_
+#include <com/sun/star/configuration/backend/PropertyInfo.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif
+
+#ifndef _RTL_STRBUF_HXX_
+#include <rtl/strbuf.hxx>
+#endif
+
+#ifndef _OSL_SECURITY_HXX_
+#include <osl/security.hxx>
+#endif
+
+#ifndef _OSL_FILE_HXX_
+#include <osl/file.hxx>
+#endif
+
+#ifndef _OSL_THREAD_H_
+#include <osl/thread.h>
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_SEQUENCE_HXX_
+#include <com/sun/star/uno/Sequence.hxx>
+#endif
+
+//==============================================================================
+
+GconfLayer::GconfLayer( const uno::Reference<uno::XComponentContext>& xContext,
+    const ConfigurationValue pConfigurationValuesList[],
+    const sal_Int32 nConfigurationValues,
+    const char * pPreloadValuesList[] )
+    :m_pConfigurationValuesList( pConfigurationValuesList )
+    ,m_nConfigurationValues( nConfigurationValues )
+    ,m_pPreloadValuesList( pPreloadValuesList )
+{
+    //Create instance of LayerContentDescriber Service
+    rtl::OUString const k_sLayerDescriberService( RTL_CONSTASCII_USTRINGPARAM(
+        "com.sun.star.comp.configuration.backend.LayerDescriber" ) );
+
+    typedef uno::Reference<backend::XLayerContentDescriber> LayerDescriber; 
+    uno::Reference< lang::XMultiComponentFactory > xServiceManager = xContext->getServiceManager();
+    if( xServiceManager.is() )
+    {
+        m_xLayerContentDescriber = LayerDescriber::query(
+            xServiceManager->createInstanceWithContext( k_sLayerDescriberService, xContext ) );
+    }
+    else
+    {
+        OSL_TRACE( "Could not retrieve ServiceManager" );
+    }
+}
+
+//------------------------------------------------------------------------------
+
+uno::Any makeAnyOfGconfValue( GConfValue *aGconfValue )
+{
+    switch( aGconfValue->type )
+    {
+        case GCONF_VALUE_BOOL:
+            return uno::makeAny( (sal_Bool) gconf_value_get_bool( aGconfValue ) );
+
+        case GCONF_VALUE_INT:
+            return uno::makeAny( (sal_Int32) gconf_value_get_int( aGconfValue ) );
+
+        case GCONF_VALUE_STRING:
+            return uno::makeAny( OStringToOUString( rtl::OString(
+                gconf_value_get_string(aGconfValue) ), RTL_TEXTENCODING_UTF8 ) );
+
+        default:
+            fprintf( stderr, "makeAnyOfGconfValue: Type not handled.\n" );
+            break;
+    }
+
+    return uno::Any();
+}
+
+//------------------------------------------------------------------------------
+
+uno::Any translateToOOo( const ConfigurationValue aValue, GConfValue *aGconfValue )
+{
+    switch( aValue.nSettingId )
+    {
+        case SETTING_PROXY_MODE:
+        {
+            rtl::OUString aProxyMode;
+            uno::Any aOriginalValue = makeAnyOfGconfValue( aGconfValue );
+            aOriginalValue >>= aProxyMode;
+
+            if( aProxyMode.equals( rtl::OUString::createFromAscii( "manual" ) ) )
+                return uno::makeAny( (sal_Int32) 1 );
+            else if( aProxyMode.equals( rtl::OUString::createFromAscii( "none" ) ) )
+                return uno::makeAny( (sal_Int32) 0 );
+        }
+            break;
+
+        case SETTING_MAILER_PROGRAM:
+        {
+            rtl::OUString aMailer;
+            uno::Any aOriginalValue = makeAnyOfGconfValue( aGconfValue );
+            aOriginalValue >>= aMailer;
+            sal_Int32 nIndex = 0;
+            return uno::makeAny( aMailer.getToken( 0, ' ', nIndex ) );
+        }
+            break;
+
+#ifdef ENABLE_LOCKDOWN
+        // "short" values need to be returned a sal_Int16
+        case SETTING_SYMBOL_SET:
+        {
+            sal_Int32 nShortValue;
+            uno::Any aOriginalValue = makeAnyOfGconfValue( aGconfValue );
+            aOriginalValue >>= nShortValue;
+            return uno::makeAny( (sal_Int16) nShortValue );
+        }
+            break;
+#endif // ENABLE_LOCKDOWN
+
+        // "boolean" values that need a string to be returned
+        case SETTING_ENABLE_ACCESSIBILITY:
+#ifdef ENABLE_LOCKDOWN
+        case SETTING_DISABLE_PRINTING:
+#endif // ENABLE_LOCKDOWN
+        {
+            sal_Bool bBooleanValue;
+            uno::Any aOriginalValue = makeAnyOfGconfValue( aGconfValue );
+            aOriginalValue >>= bBooleanValue;
+            return uno::makeAny( rtl::OUString::valueOf( (sal_Bool) bBooleanValue ) );
+        }
+            break;
+
+        case SETTING_WORK_DIRECTORY:
+        {
+            return uno::makeAny( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "$(work)/Documents" ) ) );
+        }
+            break;
+
+        case SETTING_USER_GIVENNAME:
+        {
+            rtl::OUString aCompleteName( rtl::OStringToOUString(
+                g_get_real_name(), osl_getThreadTextEncoding() ) );
+            sal_Int32 nIndex = 0;
+            rtl::OUString aGivenName;
+            do
+                aGivenName = aCompleteName.getToken( 0, ' ', nIndex );
+            while ( nIndex == 0 );
+
+            return uno::makeAny( aGivenName );
+
+        }
+            break;
+
+        case SETTING_USER_SURNAME:
+        {
+            rtl::OUString aCompleteName( rtl::OStringToOUString(
+                g_get_real_name(), osl_getThreadTextEncoding() ) );
+            sal_Int32 nIndex = 0;
+            rtl::OUString aSurname;
+            do
+                aSurname = aCompleteName.getToken( 0, ' ', nIndex );
+            while ( nIndex >= 0 );
+
+            return uno::makeAny( aSurname );
+        }
+            break;
+
+        default:
+            fprintf( stderr, "Unhandled setting to translate.\n" );
+            break;
+    }
+
+    return uno::Any();
+}
+
+//------------------------------------------------------------------------------
+
+sal_Bool SAL_CALL isDependencySatisfied( const ConfigurationValue aValue )
+{
+    switch( aValue.nDependsOn )
+    {
+        case SETTING_PROXY_MODE:
+        {
+            GConfClient* aClient = GconfBackend::getGconfClient();
+            GConfValue* aGconfValue = gconf_client_get( aClient, GCONF_PROXY_MODE_KEY, NULL );
+
+            if( ( aGconfValue != NULL ) && ( g_strcasecmp( "manual", gconf_value_get_string( aGconfValue ) ) == 0 ) )
+                return sal_True;
+        }
+            break;
+
+        case SETTING_WORK_DIRECTORY:
+        {
+            osl::Security aSecurity;
+            rtl::OUString aDocumentsDirURL;
+            if ( aSecurity.getHomeDir( aDocumentsDirURL ) )
+            {
+                aDocumentsDirURL += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "/Documents" ) );
+                osl::Directory aDocumentsDir( aDocumentsDirURL );
+
+                if( osl::FileBase::E_None == aDocumentsDir.open() )
+                    return sal_True;
+            }
+        }
+            break;
+
+        case SETTING_USER_GIVENNAME:
+        {
+            rtl::OUString aCompleteName( rtl::OStringToOUString(
+                g_get_real_name(), osl_getThreadTextEncoding() ) );
+            if( !aCompleteName.equalsAscii( "Unknown" ) )
+                return sal_True;
+        }
+            break;
+
+        case SETTING_USER_SURNAME:
+        {
+            rtl::OUString aCompleteName( rtl::OStringToOUString(
+                g_get_real_name(), osl_getThreadTextEncoding() ) );
+            if( !aCompleteName.equalsAscii( "Unknown" ) )
+            {
+                if( aCompleteName.trim().indexOf(rtl::OUString::createFromAscii(" "), 0) != -1 )
+                    return sal_True;
+            }
+        }
+            break;
+
+#ifdef ENABLE_LOCKDOWN
+        case SETTING_AUTO_SAVE:
+        {
+            GConfClient* aClient = GconfBackend::getGconfClient();
+            GConfValue* aGconfValue = gconf_client_get( aClient, GCONF_AUTO_SAVE_KEY, NULL );
+
+            if( ( aGconfValue != NULL ) && gconf_value_get_bool( aGconfValue ) )
+                return sal_True;
+        }
+            break;
+#endif // ENABLE_LOCKDOWN
+
+        default:
+            fprintf( stderr, "Unhandled setting to check dependency.\n" );
+            break;
+    }
+
+    return sal_False;
+}
+
+//------------------------------------------------------------------------------
+
+void SAL_CALL GconfLayer::readData( const uno::Reference<backend::XLayerHandler>& xHandler )
+    throw ( backend::MalformedDataException, lang::NullPointerException, 
+            lang::WrappedTargetException, uno::RuntimeException )
+{
+    if( ! m_xLayerContentDescriber.is() )
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+            "Could not create com.sun.star.configuration.backend.LayerContentDescriber Service"
+        ) ), static_cast < backend::XLayer * > (this) );
+    }
+
+    uno::Sequence<backend::PropertyInfo> aPropInfoList( m_nConfigurationValues );
+    sal_Int32 nProperties = 0;
+
+    GConfClient* aClient = GconfBackend::getGconfClient();
+    GConfValue* aGconfValue;
+    int i = 0;
+
+    while( m_pPreloadValuesList[i] != NULL )
+        gconf_client_preload( aClient, m_pPreloadValuesList[i++], GCONF_CLIENT_PRELOAD_ONELEVEL, NULL );
+
+    for( i = 0; i < m_nConfigurationValues; i++ )
+    {
+        aGconfValue = gconf_client_get( aClient, m_pConfigurationValuesList[i].GconfItem, NULL );
+
+        if( ( m_pConfigurationValuesList[i].nDependsOn != SETTINGS_LAST ) && !isDependencySatisfied( m_pConfigurationValuesList[i] ) )
+            continue;
+
+        if( aGconfValue != NULL )
+        {
+            aPropInfoList[nProperties].Name      = rtl::OUString::createFromAscii( m_pConfigurationValuesList[i].OOoConfItem );
+            aPropInfoList[nProperties].Type      = rtl::OUString::createFromAscii( m_pConfigurationValuesList[i].OOoConfValueType );
+            aPropInfoList[nProperties].Protected = m_pConfigurationValuesList[i].bLocked;
+
+            if( m_pConfigurationValuesList[i].bNeedsTranslation )
+                aPropInfoList[nProperties].Value = translateToOOo( m_pConfigurationValuesList[i], aGconfValue );
+            else
+                aPropInfoList[nProperties].Value = makeAnyOfGconfValue( aGconfValue );
+
+            nProperties++;
+        }
+    }
+
+    if( nProperties > 0 )
+    {
+        aPropInfoList.realloc( nProperties );
+        m_xLayerContentDescriber->describeLayer( xHandler, aPropInfoList );
+    }
+}
+
+//------------------------------------------------------------------------------
+
+rtl::OUString SAL_CALL GconfLayer::getTimestamp( void )
+    throw (uno::RuntimeException)
+{
+    // Return a hash of the values as timestamp to avoid regenerating 
+    // the binary cache on each office launch.
+    rtl::OStringBuffer aTimeStamp;
+
+    // Make sure the timestamp differs from beta
+    sal_Int32 nHashCode = 0;
+    
+    GConfClient* aClient = GconfBackend::getGconfClient();
+    GConfValue* aGconfValue;
+    int i = 0;
+
+    while( m_pPreloadValuesList[i] != NULL )
+        gconf_client_preload( aClient, m_pPreloadValuesList[i++], GCONF_CLIENT_PRELOAD_ONELEVEL, NULL );
+
+    for( i = 0; i < m_nConfigurationValues; i++ )
+    {
+        aGconfValue = gconf_client_get( aClient, m_pConfigurationValuesList[i].GconfItem, NULL );
+
+        if( aGconfValue != NULL )
+        {
+            switch( aGconfValue->type )
+            {
+                case GCONF_VALUE_BOOL:
+                    nHashCode ^= (sal_Int32) !gconf_value_get_bool( aGconfValue );
+                    break;
+
+                case GCONF_VALUE_INT:
+                    nHashCode ^= (sal_Int32) gconf_value_get_int( aGconfValue );
+                    break;
+
+                case GCONF_VALUE_STRING:
+                    nHashCode ^= (sal_Int32) g_str_hash( gconf_value_get_string( aGconfValue ) );
+                    break;
+
+                default:
+                    fprintf( stderr, "getTimestamp: Type not handled.\n" );
+                    break;
+            }
+            nHashCode = (nHashCode << 5) - nHashCode;
+        }
+    }
+
+    return rtl::OUString::valueOf( nHashCode );
+}
