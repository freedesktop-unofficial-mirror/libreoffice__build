--- shell/source/backends/gconfbe/gconfbackend.cxx	2005-01-31 18:42:49.000000000 +0530
+++ shell/source/backends/gconfbe/gconfbackend.cxx	2005-06-04 13:38:03.000000000 +0530
@@ -61,16 +61,8 @@
 
 #include "gconfbackend.hxx"
 
-#ifndef GCONFCOMMONLAYER_HXX_
-#include "gconfcommonlayer.hxx"
-#endif 
-
-#ifndef GCONFINETLAYER_HXX_
-#include "gconfinetlayer.hxx"
-#endif 
-
-#ifndef GCONFVCLLAYER_HXX_
-#include "gconfvcllayer.hxx"
+#ifndef GCONFLOCKDOWNLAYER_HXX_
+#include "gconflockdownlayer.hxx"
 #endif 
 
 #ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_COMPONENTCHANGEEVENT_HPP_
@@ -189,22 +181,7 @@ uno::Reference<backend::XLayer> SAL_CALL
     const rtl::OUString& aComponent, const rtl::OUString& aTimestamp)
     throw (backend::BackendAccessException, lang::IllegalArgumentException)
 {
-    uno::Reference<backend::XLayer> xLayer;
-    
-    if( aComponent.equalsAscii("org.openoffice.Office.Common" ) )
-    {
-        xLayer = new GconfCommonLayer(m_xContext);
-    }
-    else if( aComponent.equalsAscii("org.openoffice.Inet" ) )
-    {
-        xLayer = new GconfInetLayer(m_xContext);
-    }
-    else if( aComponent.equalsAscii("org.openoffice.VCL" ) )
-    {
-        xLayer = new GconfVCLLayer(m_xContext);
-    }
-    
-    return xLayer;
+    return new GconfLockdownLayer( aComponent, m_xContext );
 }
 
 //------------------------------------------------------------------------------
--- shell/source/backends/gconfbe/makefile.mk	2005-06-01 14:33:44.000000000 +0530
+++ shell/source/backends/gconfbe/makefile.mk	2005-06-04 14:37:03.000000000 +0530
@@ -102,9 +102,7 @@ PKGCONFIG_LIBS!:=-Wl,--export-dynamic $(
 SLOFILES=\
 	$(SLO)$/gconfbecdef.obj \
 	$(SLO)$/gconfbackend.obj \
-	$(SLO)$/gconfvcllayer.obj \
-	$(SLO)$/gconfinetlayer.obj \
-	$(SLO)$/gconfcommonlayer.obj
+	$(SLO)$/gconflockdownlayer.obj
         
 SHL1NOCHECK=TRUE
 SHL1TARGET=$(TARGET)1.uno   
--- /dev/null	2004-08-25 23:04:59.000000000 +0530
+++ shell/source/backends/gconfbe/gconflockdownlayer.hxx	2005-06-16 15:34:56.090730321 +0530
@@ -0,0 +1,405 @@
+#ifndef GCONFLOCKDOWNLAYER_HXX_
+#define GCONFLOCKDOWNLAYER_HXX_
+
+#ifndef GCONFBACKEND_HXX_
+#include "gconfbackend.hxx"
+#endif // GCONFBACKEND_HXX_
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYER_HPP_
+#include <com/sun/star/configuration/backend/XLayer.hpp>
+#endif // _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYER_HPP_
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_BACKENDACCESSEXCEPTION_HPP_
+#include <com/sun/star/configuration/backend/BackendAccessException.hpp>
+#endif // _COM_SUN_STAR_CONFIGURATION_BACKEND_BACKENDACCESSEXCEPTION_HPP_
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif // _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+
+#ifndef _COM_SUN_STAR_UTIL_XTIMESTAMPED_HPP_
+#include <com/sun/star/util/XTimeStamped.hpp>
+#endif // _COM_SUN_STAR_UTIL_XTIMESTAMPED_HPP_
+
+#ifndef _CPPUHELPER_IMPLBASE2_HXX_
+#include <cppuhelper/implbase2.hxx>
+#endif // _CPPUHELPER_IMPLBASE2_HXX_
+
+typedef enum
+{
+    SETTING_PROXY_MODE,
+    SETTING_PROXY_HTTP_HOST,
+    SETTING_PROXY_HTTP_PORT,
+    SETTING_PROXY_FTP_HOST,
+    SETTING_PROXY_FTP_PORT,
+    SETTING_ENABLE_ACCESSIBILITY,
+    SETTING_DISABLE_PRINTING,
+    SETTING_MAILER_PROGRAM,
+    SETTING_USE_SYSTEM_FILE_DIALOG,
+    SETTING_PRINTING_MODIFIES_DOCUMENT,
+    SETTING_SHOW_ICONS_IN_MENUS,
+    SETTING_SHOW_INACTIVE_MENUITEMS,
+    SETTING_SHOW_FONT_HISTORY,
+    SETTING_ENABLE_OPENGL,
+    SETTING_OPTIMIZE_OPENGL,
+    SETTING_SAVE_DOCUMENT_WINDOWS,
+    SETTING_SAVE_DOCUMENT_VIEW_INFO,
+    SETTING_USE_SYSTEM_FONT,
+    SETTING_USE_FONT_ANTI_ALIASING,
+    SETTING_WARN_CREATE_PDF,
+    SETTING_WARN_PRINT_DOC,
+    SETTING_WARN_SAVEORSEND_DOC,
+    SETTING_WARN_SIGN_DOC,
+    SETTING_REMOVE_PERSONAL_INFO,
+    SETTING_RECOMMEND_PASSWORD,
+    SETTING_UNDO_STEPS,
+    SETTING_SYMBOL_SET,
+    SETTING_MACRO_SECURITY_LEVEL,
+    SETTINGS_LAST
+} LockdownSetting;
+
+struct LockdownValue
+{
+    const LockdownSetting nSettingId;    
+    const gchar *GconfItem;
+    const char *OOoConfItem;
+    const char *OOoConfValueType;
+    const sal_Bool bLocked;
+    const sal_Bool bNeedsTranslation;
+    const LockdownSetting nDependsOn;
+};
+
+static const LockdownValue LockdownValuesList[] =
+{
+    {
+        SETTING_PROXY_MODE,
+        "/system/proxy/mode",
+        "org.openoffice.Inet/Settings/ooInetProxyType",
+        "int",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_PROXY_HTTP_HOST,
+        "/system/http_proxy/host",
+        "org.openoffice.Inet/Settings/ooInetHTTPProxyName",
+        "string",
+        sal_False,
+        sal_False,
+        SETTING_PROXY_MODE
+    },
+
+    {
+        SETTING_PROXY_HTTP_PORT,
+        "/system/http_proxy/port",
+        "org.openoffice.Inet/Settings/ooInetHTTPProxyPort",
+        "int",
+        sal_False,
+        sal_False,
+        SETTING_PROXY_MODE
+    },
+
+    {
+        SETTING_PROXY_FTP_HOST,
+        "/system/proxy/ftp_host",
+        "org.openoffice.Inet/Settings/ooInetFTPProxyName",
+        "string",
+        sal_False,
+        sal_False,
+        SETTING_PROXY_MODE
+    },
+
+    {
+        SETTING_PROXY_FTP_PORT,
+        "/system/proxy/ftp_port",
+        "org.openoffice.Inet/Settings/ooInetFTPProxyPort",
+        "int",
+        sal_False,
+        sal_False,
+        SETTING_PROXY_MODE
+    },
+
+    {
+        SETTING_ENABLE_ACCESSIBILITY,
+        "/desktop/gnome/interface/accessibility",
+        "org.openoffice.VCL/Settings/Accessibility/EnableATToolSupport",
+        "string",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_DISABLE_PRINTING,
+        "/desktop/gnome/lockdown/disable_printing",
+        "org.openoffice.VCL/Settings/DesktopManagement/DisablePrinting",
+        "string",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_MAILER_PROGRAM,
+        "/desktop/gnome/url-handlers/mailto/command",
+        "org.openoffice.Office.Common/ExternalMailer/Program",
+        "string",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_USE_SYSTEM_FILE_DIALOG,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Misc/UseSystemFileDialog",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_PRINTING_MODIFIES_DOCUMENT,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Print/PrintingModifiesDocument",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SHOW_ICONS_IN_MENUS,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/View/Menu/ShowIconsInMenues",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SHOW_INACTIVE_MENUITEMS,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/View/Menu/DontHideDisabledEntry",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SHOW_FONT_HISTORY,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Font/View/History",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_ENABLE_OPENGL,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/_3D_Engine/OpenGL",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_OPTIMIZE_OPENGL,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/_3D_Engine/OpenGL_Faster",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SAVE_DOCUMENT_WINDOWS,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Save/Document/DocumentWindows",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SAVE_DOCUMENT_VIEW_INFO,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Save/Document/ViewInfo",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_USE_SYSTEM_FONT,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Accessibility/IsSystemFont",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_USE_FONT_ANTI_ALIASING,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/View/FontAntiAliasing/Enabled",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_CREATE_PDF,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Security/Scripting/WarnCreatePDF",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_PRINT_DOC,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Security/Scripting/WarnPrintDoc",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_SAVEORSEND_DOC,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Security/Scripting/WarnSaveOrSendDoc",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_WARN_SIGN_DOC,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Security/Scripting/WarnSignDoc",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_REMOVE_PERSONAL_INFO,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Security/Scripting/RemovePersonalInfoOnSaving",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_RECOMMEND_PASSWORD,
+        "/desktop/gnome/lockdown/disable_printing", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Security/Scripting/RecommendPasswordProtection",
+        "boolean",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_UNDO_STEPS,
+        "/system/proxy/ftp_port", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Undo/Steps",
+        "int",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_SYMBOL_SET,
+        "/system/proxy/secure_port", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Misc/SymbolSet",
+        "short",
+        sal_False,
+        sal_True,
+        SETTINGS_LAST
+    },
+
+    {
+        SETTING_MACRO_SECURITY_LEVEL,
+        "/system/proxy/ftp_port", // FIXME: get a /desktop/gnome/lockdown/ooo/value
+        "org.openoffice.Office.Common/Security/Scripting/MacroSecurityLevel",
+        "int",
+        sal_False,
+        sal_False,
+        SETTINGS_LAST
+    }
+};
+
+static const char * PreloadValuesList[] =
+{
+    "/desktop/gnome/lockdown",
+    "/system/proxy",
+    "/system/http_proxy"
+};
+
+namespace css = com::sun::star ;
+namespace uno = css::uno ;
+namespace lang = css::lang ;
+namespace backend = css::configuration::backend ;
+namespace util = css::util ;
+
+/**
+  Implementation of the XLayer interface for the Gconf values mapped into
+  the org.openoffice.* configuration component.
+  */
+class GconfLockdownLayer : public cppu::WeakImplHelper2<backend::XLayer, util::XTimeStamped> 
+{
+public :
+    /**
+      Constructor given the component context
+
+      @param xContext       The component context
+    */
+
+    GconfLockdownLayer(const rtl::OUString& aComponent, const uno::Reference<uno::XComponentContext>& xContext);
+
+    // XLayer
+    virtual void SAL_CALL readData(
+        const uno::Reference<backend::XLayerHandler>& xHandler) 
+        throw ( backend::MalformedDataException,
+                lang::NullPointerException, 
+                lang::WrappedTargetException, 
+                uno::RuntimeException) ;
+    
+    // XTimeStamped
+    virtual rtl::OUString SAL_CALL getTimestamp(void) 
+            throw (uno::RuntimeException);
+
+    protected:
+
+    /** Destructor */
+    ~GconfLockdownLayer(void) {}
+              
+private :
+    uno::Reference<backend::XLayerContentDescriber> m_xLayerContentDescriber ;
+    rtl::OUString m_aComponent;
+  } ;
+
+#endif // GCONFLOCKDOWNLAYER
--- /dev/null	2004-08-25 23:04:59.000000000 +0530
+++ shell/source/backends/gconfbe/gconflockdownlayer.cxx	2005-06-16 15:31:40.892815756 +0530
@@ -0,0 +1,293 @@
+#ifndef GCONFLOCKDOWNLAYER_HXX_
+#include "gconflockdownlayer.hxx"
+#endif 
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_PROPERTYINFO_HPP_
+#include <com/sun/star/configuration/backend/PropertyInfo.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERCONTENTDESCIBER_HPP_
+#include <com/sun/star/configuration/backend/XLayerContentDescriber.hpp>
+#endif
+
+#ifndef _RTL_STRBUF_HXX_
+#include <rtl/strbuf.hxx>
+#endif
+
+#ifndef _OSL_SECURITY_HXX_
+#include <osl/security.hxx>
+#endif
+
+#ifndef _OSL_FILE_HXX_
+#include <osl/file.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_UNO_SEQUENCE_HXX_
+#include <com/sun/star/uno/Sequence.hxx>
+#endif
+
+//==============================================================================
+
+GconfLockdownLayer::GconfLockdownLayer( const rtl::OUString& aComponent,
+   const uno::Reference<uno::XComponentContext>& xContext )
+   : m_aComponent(aComponent)
+{
+    //Create instance of LayerContentDescriber Service
+    rtl::OUString const k_sLayerDescriberService( RTL_CONSTASCII_USTRINGPARAM(
+        "com.sun.star.comp.configuration.backend.LayerDescriber" ) );
+
+    typedef uno::Reference<backend::XLayerContentDescriber> LayerDescriber; 
+    uno::Reference< lang::XMultiComponentFactory > xServiceManager = xContext->getServiceManager();
+    if( xServiceManager.is() )
+    {
+        m_xLayerContentDescriber = LayerDescriber::query(
+            xServiceManager->createInstanceWithContext( k_sLayerDescriberService, xContext ) );
+    }
+    else
+    {
+        OSL_TRACE( "Could not retrieve ServiceManager" );
+    }
+}
+
+//------------------------------------------------------------------------------
+
+uno::Any makeAnyOfGconfValue( GConfValue *aGconfValue )
+{
+    switch( aGconfValue->type )
+    {
+        case GCONF_VALUE_BOOL:
+            return uno::makeAny( (sal_Bool) gconf_value_get_bool( aGconfValue ) );
+
+        case GCONF_VALUE_INT:
+            return uno::makeAny( (sal_Int32) gconf_value_get_int( aGconfValue ) );
+
+        case GCONF_VALUE_STRING:
+            return uno::makeAny( OStringToOUString( rtl::OString(
+                gconf_value_get_string(aGconfValue) ), RTL_TEXTENCODING_UTF8 ) );
+
+        default:
+            fprintf( stderr, "makeAnyOfGconfValue: Type not handled.\n" );
+            break;
+    }
+
+    return uno::Any();
+}
+
+//------------------------------------------------------------------------------
+
+uno::Any translateToOOo( const LockdownValue aValue, GConfValue *aGconfValue )
+{
+    switch( aValue.nSettingId )
+    {
+        case SETTING_PROXY_MODE:
+        {
+            rtl::OUString aProxyMode;
+            uno::Any aOriginalValue = makeAnyOfGconfValue( aGconfValue );
+            aOriginalValue >>= aProxyMode;
+
+            if( aProxyMode.equals( rtl::OUString::createFromAscii( "manual" ) ) )
+                return uno::makeAny( (sal_Int32) 1 );
+            else if( aProxyMode.equals( rtl::OUString::createFromAscii( "none" ) ) )
+                return uno::makeAny( (sal_Int32) 0 );
+        }
+            break;
+
+        case SETTING_MAILER_PROGRAM:
+        {
+            rtl::OUString aMailer;
+            uno::Any aOriginalValue = makeAnyOfGconfValue( aGconfValue );
+            aOriginalValue >>= aMailer;
+            sal_Int32 nIndex = 0;
+            return uno::makeAny( aMailer.getToken( 0, ' ', nIndex ) );
+        }
+            break;
+
+        // "short" values need to be returned a sal_Int16
+        case SETTING_SYMBOL_SET:
+        {
+            sal_Int32 nShortValue;
+            uno::Any aOriginalValue = makeAnyOfGconfValue( aGconfValue );
+            aOriginalValue >>= nShortValue;
+            return uno::makeAny( (sal_Int16) nShortValue );
+        }
+            break;
+
+        // "boolean" values that need a string to be returned
+        case SETTING_ENABLE_ACCESSIBILITY:
+        case SETTING_DISABLE_PRINTING:
+        {
+            sal_Bool bBooleanValue;
+            uno::Any aOriginalValue = makeAnyOfGconfValue( aGconfValue );
+            aOriginalValue >>= bBooleanValue;
+            return uno::makeAny( rtl::OUString::valueOf( (sal_Bool) bBooleanValue ) );
+        }
+            break;
+
+        default:
+            fprintf( stderr, "Unhandled setting to translate.\n" );
+            break;
+    }
+
+    return uno::Any();
+}
+
+//------------------------------------------------------------------------------
+
+sal_Bool conditionSatisfied( const LockdownValue aValue )
+{
+    switch( aValue.nDependsOn )
+    {
+        case SETTING_PROXY_MODE:
+        {
+            GError* aError = NULL;
+            GConfClient* aClient = GconfBackend::getGconfClient();
+            GConfValue* aGconfValue = gconf_client_get( aClient, LockdownValuesList[aValue.nDependsOn].GconfItem, &aError );
+
+            if( g_strcasecmp( "manual", gconf_value_get_string( aGconfValue ) ) == 0 )
+                return sal_True;
+        }
+            break;
+
+        default:
+            fprintf( stderr, "Unhandled setting to check condition.\n" );
+            break;
+    }
+
+    return sal_False;
+}
+
+//------------------------------------------------------------------------------
+
+void SAL_CALL GconfLockdownLayer::readData( const uno::Reference<backend::XLayerHandler>& xHandler )
+    throw ( backend::MalformedDataException, lang::NullPointerException, 
+            lang::WrappedTargetException, uno::RuntimeException )
+{
+    if( ! m_xLayerContentDescriber.is() )
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+            "Could not create com.sun.star.configuration.backend.LayerContentDescriber Service"
+        ) ), static_cast < backend::XLayer * > (this) );
+    }
+
+    const int nLockdownValues = G_N_ELEMENTS( LockdownValuesList );
+    uno::Sequence<backend::PropertyInfo> aPropInfoList( nLockdownValues );
+    sal_Int32 nProperties = 0;
+    
+    int i = 0;
+    GError* aError;
+    GConfClient* aClient = GconfBackend::getGconfClient();
+    GConfValue* aGconfValue;
+
+    const int nPreloadValues = G_N_ELEMENTS( PreloadValuesList );
+    for( i = 0; i < nPreloadValues; i++ )
+        gconf_client_preload( aClient, PreloadValuesList[i], GCONF_CLIENT_PRELOAD_ONELEVEL, NULL );
+
+    for( i = 0; i < nLockdownValues; i++ )
+    {
+        rtl::OUString aOOoConfItem = rtl::OUString::createFromAscii( LockdownValuesList[i].OOoConfItem );
+        if( aOOoConfItem.match( m_aComponent, 0 ) == sal_True )
+        {
+            aError = NULL;
+            aGconfValue = gconf_client_get(aClient, LockdownValuesList[i].GconfItem, &aError);
+
+            if( ( LockdownValuesList[i].nDependsOn != SETTINGS_LAST ) && !conditionSatisfied( LockdownValuesList[i] ) )
+                continue;
+
+            if( aError == NULL && aGconfValue != NULL )
+            {
+                aPropInfoList[nProperties].Name      = aOOoConfItem;
+                aPropInfoList[nProperties].Type      = rtl::OUString::createFromAscii( LockdownValuesList[i].OOoConfValueType );
+                aPropInfoList[nProperties].Protected = LockdownValuesList[i].bLocked;
+
+                if( LockdownValuesList[i].bNeedsTranslation )
+                    aPropInfoList[nProperties].Value = translateToOOo( LockdownValuesList[i], aGconfValue );
+                else
+                    aPropInfoList[nProperties].Value = makeAnyOfGconfValue( aGconfValue );
+
+                nProperties++;
+            }
+        }
+    }
+
+    osl::Security aSecurity;
+    rtl::OUString aDocumentsDirURL;
+    if ( aSecurity.getHomeDir( aDocumentsDirURL ) )
+    {
+        aDocumentsDirURL += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "/Documents" ) );
+        osl::Directory aDocumentsDir( aDocumentsDirURL );
+
+        if( osl::FileBase::E_None == aDocumentsDir.open() )
+        {
+            aDocumentsDir.close();
+
+            // Set default document directory to ~/Documents
+            aPropInfoList[nProperties].Name = rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.Office.Common/Path/Current/Work") );
+            aPropInfoList[nProperties].Type = rtl::OUString( 
+                RTL_CONSTASCII_USTRINGPARAM( "string" ) );
+            aPropInfoList[nProperties].Protected = sal_False;
+            aPropInfoList[nProperties++].Value = uno::makeAny( rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM( "$(work)/Documents" ) ) );
+        }
+    }
+
+    if( nProperties > 0 )
+    {
+        aPropInfoList.realloc( nProperties );
+        m_xLayerContentDescriber->describeLayer( xHandler, aPropInfoList );
+    }
+}
+
+//------------------------------------------------------------------------------
+
+rtl::OUString SAL_CALL GconfLockdownLayer::getTimestamp( void )
+    throw (uno::RuntimeException)
+{
+    // Return a hash of the values as timestamp to avoid regenerating 
+    // the binary cache on each office launch.
+    rtl::OStringBuffer aTimeStamp;
+
+    // Make sure the timestamp differs from beta
+    sal_Int32 nHashCode = (sal_Int32) g_str_hash( "Documents" );
+    
+    int i = 0;
+    GError* aError;
+    GConfClient* aClient = GconfBackend::getGconfClient();
+    GConfValue* aGconfValue;
+
+    const int nPreloadValues = G_N_ELEMENTS( PreloadValuesList );
+    for( i = 0; i < nPreloadValues; i++ )
+        gconf_client_preload( aClient, PreloadValuesList[i], GCONF_CLIENT_PRELOAD_ONELEVEL, NULL );
+
+    const int nLockdownValues = G_N_ELEMENTS( LockdownValuesList );
+    for( i = 0; i < nLockdownValues; i++ )
+    {
+        aError = NULL;
+        aGconfValue = gconf_client_get( aClient, LockdownValuesList[i].GconfItem, &aError );
+
+        if( aError == NULL && aGconfValue != NULL )
+        {
+            switch( aGconfValue->type )
+            {
+                case GCONF_VALUE_BOOL:
+                    nHashCode ^= (sal_Int32) !gconf_value_get_bool( aGconfValue );
+                    break;
+
+                case GCONF_VALUE_INT:
+                    nHashCode ^= (sal_Int32) gconf_value_get_int( aGconfValue );
+                    break;
+
+                case GCONF_VALUE_STRING:
+                    nHashCode ^= (sal_Int32) g_str_hash( gconf_value_get_string( aGconfValue ) );
+                    break;
+
+                default:
+                    fprintf( stderr, "getTimestamp: Type not handled.\n" );
+                    break;
+            }
+        }
+        nHashCode = (nHashCode << 5) - nHashCode;
+    }
+
+    return rtl::OUString::valueOf( nHashCode );
+}
