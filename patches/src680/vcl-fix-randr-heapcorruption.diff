 vcl/unx/source/app/randrwrapper.cxx |   15 ++++++++++++---
 1 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/vcl/unx/source/app/randrwrapper.cxx b/vcl/unx/source/app/randrwrapper.cxx
index 10ec921..b42b8fe 100644
--- vcl/unx/source/app/randrwrapper.cxx
+++ vcl/unx/source/app/randrwrapper.cxx
@@ -58,7 +58,8 @@ class RandRWrapper
     XRRScreenSize*(*m_pXRRSizes)(Display*,int,int*);
     XRRScreenSize*(*m_pXRRConfigSizes)(XRRScreenConfiguration*,int*);
     SizeID(*m_pXRRConfigCurrentConfiguration)(XRRScreenConfiguration*,Rotation*);
-    
+    int(*m_pXRRRootToScreen)(Display*, XLIB_Window);
+
     bool m_bValid;
     
     void initFromModule();
@@ -110,6 +111,10 @@ public:
     {
         return m_bValid ? m_pXRRConfigCurrentConfiguration( i_pConfig, o_pRot ) : 0;
     }
+    int XRRRootToScreen( Display *dpy, XLIB_Window root )
+    {
+        return m_bValid ? m_pXRRRootToScreen( dpy, root ) : -1;
+    }
 };
 }
 
@@ -124,6 +129,7 @@ void RandRWrapper::initFromModule()
     m_pXRRSizes = (XRRScreenSize*(*)(Display*,int,int*))osl_getAsciiFunctionSymbol( m_pRandRLib, "XRRSizes" );
     m_pXRRConfigSizes = (XRRScreenSize*(*)(XRRScreenConfiguration*,int*))osl_getAsciiFunctionSymbol( m_pRandRLib, "XRRConfigSizes" );
     m_pXRRConfigCurrentConfiguration = (SizeID(*)(XRRScreenConfiguration*,Rotation*))osl_getAsciiFunctionSymbol( m_pRandRLib, "XRRConfigCurrentConfiguration" );
+    m_pXRRRootToScreen = (int(*)(Display*,XLIB_Window))osl_getAsciiFunctionSymbol( m_pRandRLib, "XRRRootToScreen" );
     
     m_bValid = m_pXRRQueryExtension             &&
                m_pXRRQueryVersion               &&
@@ -133,7 +139,8 @@ void RandRWrapper::initFromModule()
                m_pXRRUpdateConfiguration        &&
                m_pXRRSizes                      &&
                m_pXRRConfigSizes                &&
-               m_pXRRConfigCurrentConfiguration
+               m_pXRRConfigCurrentConfiguration &&
+               m_pXRRRootToScreen
                ;
 }
 
@@ -148,6 +155,7 @@ RandRWrapper::RandRWrapper( Display* pDisplay ) :
         m_pXRRSizes( NULL ),
         m_pXRRConfigSizes( NULL ),
         m_pXRRConfigCurrentConfiguration( NULL ),
+        m_pXRRRootToScreen( NULL ),
         m_bValid( false )
 {
     // first try in process space (e.g. gtk links that ?)
@@ -211,7 +219,8 @@ int SalDisplay::processRandREvent( XEvent* pEvent )
 {
     int nRet = 0;
     #ifdef USE_RANDR
-    if( pWrapper )
+    XConfigureEvent* pCnfEvent=(XConfigureEvent*)pEvent;
+    if( pWrapper && pWrapper->XRRRootToScreen(GetDisplay(),pCnfEvent->window) != -1 )
     {
         nRet = pWrapper->XRRUpdateConfiguration( pEvent );
         if( nRet == 1 && pEvent->type != ConfigureNotify) // this should then be a XRRScreenChangeNotifyEvent
