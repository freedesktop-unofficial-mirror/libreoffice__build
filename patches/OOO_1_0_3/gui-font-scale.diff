
	We have to use Xft's hard-coded idea of the dpi first, and use
the builtin toDouble to avoid l10n issues.

--- vcl/unx/source/app/saldisp.cxx	8 Aug 2002 02:49:59 -0000	1.31.2.3
+++ vcl/unx/source/app/saldisp.cxx	14 Jan 2003 20:17:05 -0000
@@ -833,9 +833,20 @@
     pVisual_            = new SalVisual( pXVI );
     aSize_              = Size( DisplayWidth ( pDisp_, nScreen_ ),
                                 DisplayHeight( pDisp_, nScreen_ ) );
-    aResolution_        =
+    {
+      const char *value;
+      long dpi = 0;
+      if ((value = XGetDefault (pDisp_, "Xft", "dpi"))) {
+	::rtl::OString str (value);
+	dpi = (long) str.toDouble();
+      }
+      if (dpi > 0)
+        aResolution_ = Pair( dpi, dpi );
+      else
+	aResolution_ =
         Pair( DPI( aSize_.Width(),  DisplayWidthMM ( pDisp_, nScreen_ ) ),
               DPI( aSize_.Height(), DisplayHeightMM( pDisp_, nScreen_ ) ) );
+    }
 
     nMaxRequestSize_    = XExtendedMaxRequestSize( pDisp_ ) * 4;
     if( !nMaxRequestSize_ )



Index: vcl/unx/source/gdi/salgdi.cxx
===================================================================
RCS file: /cvs/gsl/vcl/unx/source/gdi/salgdi.cxx,v
retrieving revision 1.16
diff -u -p -u -r1.16 salgdi.cxx
--- vcl/unx/source/gdi/salgdi.cxx	18 Jun 2002 11:26:23 -0000	1.16
+++ vcl/unx/source/gdi/salgdi.cxx	14 Jan 2003 20:22:07 -0000
@@ -496,12 +496,7 @@ void SalGraphics::GetResolution( long &r
         
         rDPIX = pDisplay->GetResolution().A();
         rDPIY = pDisplay->GetResolution().B();
-        if ( rDPIY < 96 )
-        {
-            rDPIX = Divide( rDPIX * 96, rDPIY );
-            rDPIY = 96;
-        }
-        
+
 #ifndef _USE_PRINT_EXTENSION_
 	}
 #endif
@@ -518,26 +513,8 @@ void SalGraphics::GetScreenFontResolutio
 #endif
         
         SalDisplay *pDisplay = _GetDisplay();
-        
-        const Size aSize = pDisplay->GetScreenSize(); 
-        int   nThreshold;
-
-        if (aSize.Height() <= 600)
-            nThreshold =  96;
-        else
-            if (aSize.Height() <= 768)
-                nThreshold = 108;
-            else
-                nThreshold = 120; 
-        
         rDPIX = pDisplay->GetResolution().A();
         rDPIY = pDisplay->GetResolution().B();
-        
-        if( rDPIY < nThreshold )
-        {
-            rDPIX = Divide( rDPIX * nThreshold, rDPIY );
-            rDPIY = nThreshold;
-        }
         
 #ifndef _USE_PRINT_EXTENSION_
 	}



Index: vcl/source/window/window.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/window/window.cxx,v
retrieving revision 1.48.2.1
diff -u -p -u -r1.48.2.1 window.cxx
--- vcl/source/window/window.cxx	14 Dec 2001 13:54:14 -0000	1.48.2.1
+++ vcl/source/window/window.cxx	14 Jan 2003 20:23:49 -0000
@@ -1420,6 +1420,7 @@ void Window::ImplInitResolutionSettings(
 }
 
 // -----------------------------------------------------------------------
+#include <stdio.h>
 
 void Window::ImplPointToLogic( Font& rFont ) const
 {
@@ -1428,17 +1429,21 @@ void Window::ImplPointToLogic( Font& rFo
 
     if ( aSize.Width() )
     {
-        aSize.Width() *= mpFrameData->mnFontDPIX;
-        aSize.Width() += 72/2;
-        aSize.Width() /= 72;
-        aSize.Width() *= nScreenFontZoom;
-        aSize.Width() /= 100;
-    }
-    aSize.Height() *= mpFrameData->mnFontDPIY;
-    aSize.Height() += 72/2;
-    aSize.Height() /= 72;
-    aSize.Height() *= nScreenFontZoom;
-    aSize.Height() /= 100;
+	double t = aSize.Width();
+	t *= nScreenFontZoom;
+	t /= 100.0;
+	t *= mpFrameData->mnFontDPIX;
+	t /= 72.0;
+	t += 0.5;
+	aSize.Width() = t;
+    }
+    double t = aSize.Height();
+    t *= nScreenFontZoom;
+    t /= 100.0;
+    t *= mpFrameData->mnFontDPIY;
+    t /= 72.0;
+    t += 0.5;
+    aSize.Height() = t;
 
     if ( IsMapModeEnabled() )
         aSize = PixelToLogic( aSize );
