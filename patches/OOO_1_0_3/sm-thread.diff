--- vcl/unx/inc/sm.hxx	Fri Oct 19 14:19:20 2001
+++ vcl/unx/inc/sm.hxx	Fri Oct 18 14:01:35 2002
@@ -61,26 +61,10 @@
 #ifndef _VCL_SM_HXX
 #define _VCL_SM_HXX
 
+#include <tools/link.hxx>
 #include <salunx.h>
 #include <X11/SM/SMlib.h>
 
-class ICEConnectionObserver
-{
-	static BOOL bIsWatching;
-
-	static void ICEWatchProc( IceConn connection, IcePointer client_data,
-							  Bool opening, IcePointer* watch_data );
-public:
-	
-	// YieldProcs for SalDisplay
-	static int Pending( int fd, void* data );
-	static int Queued( int fd, void* data );
-	static int HandleEvents( int fd, void* data );
-
-	static void activate();
-	static void deactivate();
-};
-
 class SessionManagerClient
 {
 	static SmcConn		aSmcConnection;
@@ -100,6 +84,9 @@
 										SmPointer client_data );
 
 	static const ByteString& getPreviousSessionID();
+
+	DECL_STATIC_LINK( SessionManagerClient, ShutDownHdl, void* );
+
 public:
 	static void open();
 	static void close();
--- vcl/unx/source/app/sm.cxx	Tue Aug 27 15:36:20 2002
+++ vcl/unx/source/app/sm.cxx	Fri Oct 18 14:01:37 2002
@@ -84,12 +84,43 @@
 #ifndef _SV_SALFRAME_HXX
 #include <salframe.hxx>
 #endif
+#ifndef _SV_SVAPP_HXX
+#include <svapp.hxx>
+#endif
 
 #define USE_SM_EXTENSION
 
+extern "C" void SAL_CALL ICEConnectionWorker( void* );
+
+class ICEConnectionObserver
+{
+    friend void SAL_CALL ICEConnectionWorker(void*);
+	static BOOL bIsWatching;
+	static void ICEWatchProc( IceConn connection, IcePointer client_data,
+							  Bool opening, IcePointer* watch_data );
+
+    static struct pollfd* pFilehandles;
+    static IceConn* pConnections;
+    static int nConnections;
+    static oslMutex ICEMutex;
+    static oslThread ICEThread;
+public:
+
+	static void activate();
+	static void deactivate();
+    static void lock();
+    static void unlock();
+};
+
+
 BOOL ICEConnectionObserver::bIsWatching = FALSE;
 SmcConn SessionManagerClient::aSmcConnection = NULL;
 ByteString SessionManagerClient::aClientID;
+struct pollfd* ICEConnectionObserver::pFilehandles = NULL;
+IceConn* ICEConnectionObserver::pConnections = NULL;
+int ICEConnectionObserver::nConnections = 0;
+oslMutex ICEConnectionObserver::ICEMutex = NULL;
+oslThread ICEConnectionObserver::ICEThread = NULL;
 
 static SmProp*	pSmProps = NULL;
 static SmProp**	ppSmProps = NULL;
@@ -176,6 +207,18 @@
 #endif
 }
 
+IMPL_STATIC_LINK( SessionManagerClient, ShutDownHdl, void*, pDummy )
+{
+#ifdef DEBUG
+    fprintf( stderr, GetSalData()->pFirstFrame_ ? "shutdown on first frame\n" : "shutdown event but no frame\n" );
+#endif
+    if( GetSalData()->pFirstFrame_ )
+    {
+        GetSalData()->pFirstFrame_->maFrameData.ShutDown();
+    }
+    return 0;
+}
+
 void SessionManagerClient::DieProc(
 	SmcConn connection,
 	SmPointer client_data
@@ -189,8 +232,7 @@
 #endif
 	if( connection == aSmcConnection )
 		aSmcConnection = NULL;
-    if( GetSalData()->pFirstFrame_ )
-        GetSalData()->pFirstFrame_->maFrameData.ShutDown();
+    Application::PostUserEvent( STATIC_LINK( NULL, SessionManagerClient, ShutDownHdl ) );
 }
 
 void SessionManagerClient::SaveCompleteProc(
@@ -217,13 +259,13 @@
 	static SmcCallbacks aCallbacks;
 
 #ifdef USE_SM_EXTENSION
-	// erst scharf schalten wenn getestet
-
 	// this is the way Xt does it, so we can too
 	if( ! aSmcConnection && getenv( "SESSION_MANAGER" ) )
 	{
 		char aErrBuf[1024];
 		ICEConnectionObserver::activate();
+        ICEConnectionObserver::lock();
+
         char* pClientID = NULL;
         const ByteString& rPrevId( getPreviousSessionID() );
 
@@ -259,6 +301,7 @@
         aClientID = ByteString( pClientID );
         free( pClientID );
         pClientID = NULL;
+        ICEConnectionObserver::unlock();
 	}
 #ifdef DEBUG
     else
@@ -319,10 +362,21 @@
     return aPrevId;
 }
 
+void ICEConnectionObserver::lock()
+{
+    osl_acquireMutex( ICEMutex );
+}
+
+void ICEConnectionObserver::unlock()
+{
+    osl_releaseMutex( ICEMutex );
+}
+
 void ICEConnectionObserver::activate()
 {
 	if( ! bIsWatching )
 	{
+        ICEMutex = osl_createMutex();
 		bIsWatching = TRUE;
 #ifdef USE_SM_EXTENSION
 		IceAddConnectionWatch( ICEWatchProc, NULL );
@@ -338,9 +392,41 @@
 #ifdef USE_SM_EXTENSION
 		IceRemoveConnectionWatch( ICEWatchProc, NULL );
 #endif
+        if( ICEThread )
+        {
+            osl_terminateThread( ICEThread );
+            osl_destroyThread( ICEThread );
+            ICEThread = NULL;
+        }
+        osl_destroyMutex( ICEMutex );
 	}
 }
 
+void ICEConnectionWorker( void* pData )
+{
+#ifdef USE_SM_EXTENSION
+    while( ICEConnectionObserver::nConnections )
+    {
+        osl_acquireMutex( ICEConnectionObserver::ICEMutex );
+        int nRet = poll( ICEConnectionObserver::pFilehandles,
+                         ICEConnectionObserver::nConnections,
+                         400 );
+        if( nRet > 0 )
+        {
+#ifdef DEBUG
+            fprintf( stderr, "IceProcessMessages\n" );
+#endif
+            Bool bReply;
+            for( int i = 0; i < ICEConnectionObserver::nConnections; i++ )
+                if( ICEConnectionObserver::pFilehandles[i].revents & POLLIN )
+                    IceProcessMessages( ICEConnectionObserver::pConnections[i], NULL, &bReply );
+        }
+        osl_releaseMutex( ICEConnectionObserver::ICEMutex );
+        osl_yieldThread();
+    }
+#endif
+}
+
 void ICEConnectionObserver::ICEWatchProc(
 	IceConn connection,
 	IcePointer client_data,
@@ -349,43 +435,51 @@
 	)
 {
 #ifdef USE_SM_EXTENSION
-	if( opening )
-		GetSalData()->GetLib()->Insert( IceConnectionNumber( connection ),
-										connection,
-										(YieldFunc)Pending,
-										(YieldFunc)Queued,
-										(YieldFunc)HandleEvents );
-	else
-		GetSalData()->GetLib()->Remove( IceConnectionNumber( connection ) );
+    if( opening )
+    {
+        osl_acquireMutex( ICEMutex );
+        int fd = IceConnectionNumber( connection );
+        nConnections++;
+        pConnections = (IceConn*)rtl_reallocateMemory( pConnections, sizeof( IceConn )*nConnections );
+        pFilehandles = (struct pollfd*)rtl_reallocateMemory( pFilehandles, sizeof( struct pollfd )*nConnections );
+        pConnections[ nConnections-1 ] = connection;
+        pFilehandles[ nConnections-1 ].fd		= fd;
+        pFilehandles[ nConnections-1 ].events	= POLLIN;
+        osl_releaseMutex( ICEMutex );
+        if( nConnections == 1 )
+            ICEThread = osl_createThread( ICEConnectionWorker, NULL );
+    }
+    else
+    {
+        osl_acquireMutex( ICEMutex );
+        for( int i = 0; i < nConnections; i++ )
+        {
+            if( pConnections[i] == connection )
+            {
+                if( i < nConnections-1 )
+                {
+                    rtl_moveMemory( pConnections+i, pConnections+i+1, sizeof( IceConn )*(nConnections-i-1) );
+                    rtl_moveMemory( pFilehandles+i, pFilehandles+i+1, sizeof( struct pollfd )*(nConnections-i-1) );
+                }
+                nConnections--;
+                pConnections = (IceConn*)rtl_reallocateMemory( pConnections, sizeof( IceConn )*nConnections );
+                pFilehandles = (struct pollfd*)rtl_reallocateMemory( pFilehandles, sizeof( struct pollfd )*nConnections );
+                break;
+            }
+        }
+        osl_releaseMutex( ICEMutex );
+        if( nConnections == 0 )
+        {
+            osl_terminateThread( ICEThread );
+            osl_destroyThread( ICEThread );
+            ICEThread = NULL;
+        }
+    }
 #ifdef DEBUG
     fprintf( stderr, "ICE connection on %d %s\n",
              IceConnectionNumber( connection ),
              opening ? "inserted" : "removed" );
+    fprintf( stderr, "Display connection is %d\n", ConnectionNumber( GetSalData()->GetDefDisp()->GetDisplay() ) );
 #endif
 #endif
 }
-
-int ICEConnectionObserver::Pending( int fd, void* data )
-{
-    struct pollfd aPoll;
-    aPoll.fd = fd;
-    aPoll.events = POLLIN;
-    return ( poll( &aPoll, 1, 0 ) > 0 && aPoll.revents ) ? 1 : 0;
-}
-
-int ICEConnectionObserver::Queued( int fd, void* data )
-{
-	return Pending( fd, data );
-}
-
-int ICEConnectionObserver::HandleEvents( int fd, void* data )
-{
-#ifdef USE_SM_EXTENSION
-#ifdef DEBUG
-    fprintf( stderr, "IceProcessMessages\n" );
-#endif
-    IceProcessMessages( (IceConn)data, NULL, NULL );
-#endif
-	return 0;
-}
-
