Index: config_office/configure.in
===================================================================
--- config_office/configure.in.orig	2004-08-13 16:56:49.584367472 +0200
+++ config_office/configure.in	2004-08-13 17:05:26.550776632 +0200
@@ -116,6 +116,52 @@ AC_ARG_ENABLE(kde,
 
                           Usage: --enable-kde
 ],,)
+AC_ARG_WITH(system-db,
+[  --with-system-db        Use berkeleydb already on system
+],,)
+AC_ARG_WITH(db-version,
+[  --with-db-version=VERSION       Specify db version manually ],
+[	DB_VERSION="$withval"
+	DB_VERSION_MAJOR=$(echo $DB_VERSION | cut -d"." -f1)
+])
+AC_ARG_WITH(db-jar,
+[  --with-db-jar=JARFILE          Specify path to jarfile manually ],
+[ DB_JAR="$withval"
+])
+AC_ARG_WITH(system-sane,
+[  --with-system-sane-headers      Use sane.h already on system
+],,)
+AC_ARG_WITH(system-x11ext,
+[  --with-system-x11-extensions-headers  Use X11 extensions headers on system
+],,)
+AC_ARG_WITH(system-unixodbc,
+[   --with-system-unixodbc-headers  Use unixODBC headers on system
+],,)
+AC_ARG_WITH(system-myspell,
+[  --with-system-myspell      Use myspell already on system
+],,)
+AC_ARG_WITH(system-altlinuxhyph,
+[  --with-system-altlinuxhyph      Use altlinuxhyph already on system
+],,)
+AC_ARG_WITH(system-xrender,
+[  --with-system-xrender           Use system Xrender
+],,)
+AC_ARG_WITH(system-libwpd,
+[  --with-system-libwpd   Use libwpd already on system
+],,)
+AC_ARG_WITH(system-libs,
+[  --with-system-libs      Use libs already on system (enables all
+                           --with-system-* (_not_ -headers)
+],,)
+AC_ARG_WITH(myspell-dicts,
+[  --without-myspell-dicts   Removes myspell dictionaries from openoffice.org
+                         installation set, for people building for specific
+                         distributions where the myspell dictionaries are
+                         installed from other sources
+],,)
+AC_ARG_ENABLE(fontconfig,
+[  --enable-fontconfig     Enables the use of fontconfig
+],,)
 AC_ARG_WITH(stlport4-home,
 [  --with-stlport4-home    The location that STLport4 is installed in. The STL
                           header files are assumed to be in stlport4-home/stlport
@@ -157,6 +200,12 @@ AC_ARG_WITH(perl-home,
  
                           Usage: --with-perl-home=<absolute path to Perl 5 home>
 ],,)
+AC_ARG_WITH(python,
+[  --with-python           If you want to use the Python on your system, instead of
+                          the internal version included in the source, use this flag.
+
+                          Usage: --with-python[=path-to-python]
+],,)
 AC_ARG_WITH(cl-home,
 [  --with-cl-home          For Windows NT users, please supply the path
                           for the Microsoft C/C++ compiler. 
@@ -888,16 +937,11 @@ if test "$_os" != "WINNT" -o "$WITH_MING
 fi
 
 dnl ===================================================================
-dnl Check if pam-appl.h is available on Linux or FreeBSD
+dnl Check if pam_appl.h is available on Linux or FreeBSD
 dnl ===================================================================
 if test "$_os" = "Linux" -o "$_os" = "FreeBSD" -o "$_os" = "GNU"; then
-   AC_MSG_CHECKING([pam_appl.h])
-   if test -f "/usr/include/security/pam_appl.h"; then
-      AC_MSG_RESULT([yes])
-   else
-      AC_MSG_WARN([pam_appl.h could not be found in /usr/include/security])
-      echo "pam_appl.h could not be found in /usr/include/security" >> warn
-   fi
+   AC_CHECK_HEADER(security/pam_appl.h, [],
+   [AC_MSG_ERROR([pam_appl.h could not be found. libpam-dev missing?])], [])
 fi
 
 dnl ===================================================================
@@ -1340,6 +1384,8 @@ dnl Check whether there's a C++ pre-proc
 if test "$_os" = "Linux" -o "$_os" = "FreeBSD" -o "$_os" = "NetBSD" ; then
    AC_PROG_CXXCPP
 fi
+#AC_SUBST(CPP)
+#AC_SUBST(CXXCPP)
 
 dnl ===================================================================
 dnl Check whether xmkmf program can be used, x systems only
@@ -1439,6 +1485,170 @@ fi
 AC_SUBST(SYSTEM_ZLIB)
 
 dnl ===================================================================
+dnl Check for system python
+dnl ===================================================================
+AC_MSG_CHECKING([which python to use])
+if test -n "$with_python"; then
+    AC_MSG_RESULT([external])
+    if test "$with_python" != "yes"; then
+        PYTHON="$with_python"
+    fi
+    AM_PATH_PYTHON([2.2])
+
+    py_prefix=`$PYTHON -c "import sys; print sys.prefix"`
+    py_prefix_uri=`$PYTHON -c "import sys; import urllib; print 'file://' + urllib.pathname2url(sys.prefix + '/lib/python%d.%d' % sys.version_info[[:2]])"`
+    py_exec_prefix=`$PYTHON -c "import sys; print sys.exec_prefix"`
+    pythonhome_uris=`$PYTHON -c "import sys; import urllib; print 'file://' + urllib.pathname2url(sys.prefix)"`
+    PYTHONPATH=`$PYTHON -c "import sys; import os; print os.pathsep.join(sys.path)"`
+
+    PYTHONHOME="$py_prefix"
+    PYTHON_CFLAGS="-I$py_prefix/include/python$PYTHON_VERSION"
+    if test "$py_prefix" != "$py_exec_prefix"; then
+      PYTHONHOME="$PYTHONHOME:$py_exec_prefix"
+      PYTHON_CFLAGS="$PYTHON_CFLAGS -I$py_exec_prefix/include/python$PYTHON_VERSION"
+      pythonhome_uris="$pythonhome_uris "`$PYTHON -c "import sys; import urllib; print 'file://' + urllib.pathname2url(sys.prefix)"`
+    fi
+    save_CPPFLAGS="$CPPFLAGS"
+    CPPFLAGS="$CPPFLAGS $PYTHON_CFLAGS"
+    AC_CHECK_HEADER(Python.h, [],
+        [AC_MSG_ERROR(Python.h not found. Install python headers/development package.)], [])
+    CPPFLAGS="$save_CPPFLAGS"
+
+    PYMAJOR=$($PYTHON -c "import sys; print sys.version_info[[0]]")
+    PYMINOR=$($PYTHON -c "import sys; print sys.version_info[[1]]")
+    PYMICRO=$($PYTHON -c "import sys; print sys.version_info[[2]]")
+    PYVERSION=$($PYTHON -c "import sys; print '%d.%d.%d' % sys.version_info[[:3]]")
+    # SCPDEFS="$SCPDEFS \\'-DPYTHONHOME_URIS=\\\"""$pythonhome_uris""\\\"\\' \\'-DPYTHONPATH_URIS=\\\"""$py_prefix_uri"" \\\$\\\$ORIGIN\\\"\\'"
+else
+    AC_MSG_RESULT([internal])
+    SCPDEFS="$SCPDEFS -DWITH_PYTHON"
+fi
+AC_SUBST(PYTHON)
+AC_SUBST(PYTHONHOME)
+AC_SUBST(PYTHONPATH)
+AC_SUBST(PYTHON_CFLAGS)
+AC_SUBST(PYMAJOR)
+AC_SUBST(PYMINOR)
+AC_SUBST(PYMICRO)
+AC_SUBST(PYVERSION)
+
+dnl ===================================================================
+dnl Check for system db
+dnl ===================================================================
+AC_MSG_CHECKING([which db to use])
+if test -n "$with_system_db" -o -n "$with_system_libs"; then
+    SYSTEM_DB=YES
+    AC_MSG_RESULT([external])
+    if test -z $DB_VERSION && test -z $DB_VERSION_MAJOR; then
+      AC_CHECK_FILE(/usr/lib/libdb.so, [],
+         [AC_MSG_ERROR(no. install db)])
+      # (almost) all db packages (rpm/deb) I saw have this link pointing to
+      # libdb-cxx_X.so where X is the first two digits of the db version ..
+      # and because of that two versions cannot be installed at the same time..
+      DB_VERSION=$(readlink /usr/lib/libdb.so \
+	  | $SED -e s/libdb-// | $SED -e s/\.so//)
+      DB_VERSION_MAJOR=$(echo $DB_VERSION | cut -d"." -f1)
+    fi
+    AC_MSG_CHECKING([which db version to use])
+    AC_MSG_RESULT(db$DB_VERSION_MAJOR version $DB_VERSION)
+    AC_LANG(C++)
+    AC_CHECK_HEADER(db.h, [ DB_INCLUDES=/usr/include ],
+        [
+             CFLAGS=-I/usr/include/db$DB_VERSION_MAJOR
+             AC_CHECK_HEADER(db$DB_VERSION_MAJOR/db.h,
+             [ DB_INCLUDES=/usr/include/db$DB_VERSION_MAJOR ],
+             [ AC_MSG_ERROR(no. install the dbDB_VERSION_MAJOR libraries) ], []
+             )
+        ], []
+    )
+     if test "$enable_java" != "no"; then
+       if test -z $DB_JAR; then
+	  # three different naming methods *grumble* Are there even more?
+         AC_CHECK_FILE(/usr/share/java/db.jar, [ JARVER=0 ],
+           [
+             AC_CHECK_FILE(/usr/share/java/db-$DB_VERSION.jar, [ JARVER=1 ],
+               [ AC_CHECK_FILE(/usr/share/java/libdb$DB_VERSION-java.jar,
+                   [ JARVER_LONGSTYLE=1 ],
+                   [ AC_MSG_ERROR(db$DB_VERSION_MAJOR Java bindings not found)]
+                 )
+               ]
+             )
+           ]
+         )
+         if test "$JARVER" = "1"; then
+           DB_JAR=jar-$DB_VERSION.jar
+         else
+           DB_JAR=db.jar
+         fi
+         if test "$JARVER_LONGSTYLE" = "1"; then
+           DB_JAR=libdb$DB_VERSION-java.jar
+         fi
+       fi
+    fi
+    SCPDEFS="$SCPDEFS -DSYSTEM_DB"
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_DB=NO
+    DB_VERSION=$(ls -1 ../berkeleydb/download/db-4* \
+       | $SED -e s,\.\./berkeleydb/download/db-,, | $SED -e s,\.tar\.gz,, \
+       | cut -d"." -f1,2)
+    DB_VERSION_MAJOR=$(echo $DB_VERSION | cut -d"." -f1)
+    DB_JAR=db.jar
+fi
+SCPDEFS="$SCPDEFS -DDB_VERSION=$DB_VERSION"
+AC_SUBST(SYSTEM_DB)
+AC_SUBST(DB_INCLUDES)
+AC_SUBST(DB_VERSION)
+AC_SUBST(DB_VERSION_MAJOR)
+AC_SUBST(DB_JAR)
+AC_SUBST(SCPDEFS)
+
+dnl ===================================================================
+dnl Check for system sane
+dnl ===================================================================
+AC_MSG_CHECKING([which sane.h to use])
+if test -n "$with_system_sane_headers"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_SANE_H=YES
+    AC_CHECK_HEADER(sane/sane.h, [],
+        [AC_MSG_ERROR(sane.h not found. install the sane headers)], [])
+else
+    AC_MSG_RESULT([internal])
+fi
+AC_SUBST(SYSTEM_SANE_H)
+
+dnl ===================================================================
+dnl Check for system unixODBC
+dnl ===================================================================
+AC_MSG_CHECKING([which unixODBC headers to use])
+if test -n "$with_system_unixodbc_headers"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_UNIXODBC_H=YES
+    AC_CHECK_HEADER(sqlext.h, [],
+        [AC_MSG_ERROR(unixODBC's aqlext.h not found. install the headers)], [])
+else
+    AC_MSG_RESULT([internal])
+fi
+AC_SUBST(SYSTEM_UNIXODBC_H)
+
+dnl ===================================================================
+dnl Check for system libwpd
+dnl ===================================================================
+AC_MSG_CHECKING([which libwpd to use])
+if test -n "$with_system_libwpd" -o -n "$with_system_libs" && \
+        test "$with_system_libwpd" != "no"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_LIBWPD=YES
+    PKG_CHECK_MODULES( LIBWPD, libwpd-0.8 )
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_LIBWPD=NO
+fi
+AC_SUBST(SYSTEM_LIBWPD)
+AC_SUBST(LIBWPD_CFLAGS)
+AC_SUBST(LIBWPD_LIBS)
+
+dnl ===================================================================
 dnl Check whether the gtk 2.0 libraries are available.
 dnl ===================================================================
 if test -n "$ENABLE_CRASHDUMP" ; then
@@ -1517,6 +1704,70 @@ AC_SUBST(NEON_LIBS)
 AC_SUBST(NEON_CFLAGS)
 
 dnl ===================================================================
+dnl Check whether we want to use fontconfig and if the library is
+dnl available.
+dnl ===================================================================
+AC_MSG_CHECKING([whether to use fontconfig])
+if test -n "$enable_fontconfig"; then
+    AC_MSG_RESULT([yes])
+    PKG_CHECK_MODULES( FONTCONFIG, fontconfig >= 1.0.1 )
+    FONTCONFIG_FONTS=YES
+else
+    AC_MSG_RESULT([no])
+    FONTCONFIG_FONTS=NO
+fi
+AC_SUBST(FONTCONFIG_FONTS)
+AC_SUBST(FONTCONFIG_LIBS)
+
+dnl ===================================================================
+dnl Check for system myspell
+dnl ===================================================================
+AC_MSG_CHECKING([which myspell to use])
+if test -n "$with_system_myspell" -o -n "$with_system_libs"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_MYSPELL=YES
+    PKG_CHECK_MODULES( MYSPELL, myspell,
+      [ MYSPELL_PKGCONFIG=YES ],
+      [
+         AC_CHECK_HEADER(myspell/myspell.hxx, [],
+	     [AC_MSG_ERROR(myspell headers not found.)], [])
+         MYSPELL_CFLAGS=-I/usr/include/myspell
+         AC_LANG(C++)
+         AC_CHECK_LIB(myspell, main, [],
+           [ AC_MSG_ERROR(myspell library not found.) ], [])
+         MYSPELL_LIBS=-lmyspell
+      ]
+    )
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_MYSPELL=NO
+    MYSPELL_LIBS=-lmyspell
+fi
+AC_SUBST(SYSTEM_MYSPELL)
+AC_SUBST(MYSPELL_CFLAGS)
+AC_SUBST(MYSPELL_LIBS)
+
+dnl ===================================================================
+dnl Checking for altlinuxhyph
+dnl ===================================================================
+AC_MSG_CHECKING([which altlinuxhyph to use])
+if test -n "$with_system_altlinuxhyph" -o -n "$with_system_libs"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_HYPH=YES
+    AC_CHECK_HEADER(hyphen.h, [],
+       [ AC_MSG_ERROR(altlinuxhyph headers not found.)], [])
+    AC_CHECK_MEMBER(struct _HyphenDict.cset, [],
+       [ AC_MSG_ERROR(no. You are sure you have altlinuyhyph headers?)],
+       [#include <hyphen.h>])
+    AC_CHECK_LIB(hyph, hnj_hyphen_hyphenate, [],
+        [ AC_MSG_ERROR(altlinuxhyph library not found.)], [])
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_HYPH=NO
+fi
+AC_SUBST(SYSTEM_HYPH)
+
+dnl ===================================================================
 dnl Checks for libraries.
 dnl ===================================================================
 dnl Check for Mac OS X native GUI, which may be used instead of X11.
@@ -2133,6 +2384,52 @@ AC_SUBST(USE_XINERAMA)
 AC_SUBST(XINERAMA_LINK)
 
 dnl ===================================================================
+dnl ===================================================================
+dnl Check whether to build with system XRender
+dnl ===================================================================
+AC_MSG_CHECKING([whether to use system XRender])
+if test -n "$with_system_xrender"; then
+  AC_MSG_RESULT([yes])
+  SYSTEM_XRENDER=YES
+  AC_CHECK_LIB(Xrender, XRenderQueryVersion, [],
+     [AC_MSG_ERROR(Xrender not found or functional)], [])
+else
+  AC_MSG_RESULT([no])
+  SYSTEM_XRENDER=NO
+fi
+AC_SUBST(SYSTEM_XRENDER)
+
+dnl Test whether to include MySpell dictionaries
+dnl ===================================================================
+AC_MSG_CHECKING([whether to include MySpell dictionaries])
+if test -z "$with_myspell_dicts"; then
+  AC_MSG_RESULT([yes])
+  WITH_MYSPELL_DICTS=YES
+else
+  AC_MSG_RESULT([no])
+  WITH_MYSPELL_DICTS=NO
+fi
+AC_SUBST(WITH_MYSPELL_DICTS)
+
+dnl ===================================================================
+dnl Check for system X11 extensions
+dnl ===================================================================
+AC_MSG_CHECKING([which X11 extensions headers to use])
+if test -n "$with_system_x11_extensions_headers"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_X11EXT_H=YES
+    AC_CHECK_HEADER(X11/extensions/render.h, [],
+        [AC_MSG_ERROR(X11's render.h not found.)], [])
+    AC_CHECK_HEADER(X11/extensions/renderproto.h, [],
+        [AC_MSG_ERROR(X11's renderproto.h not found.)], [])
+    AC_CHECK_HEADER(X11/extensions/Xrender.h, [],
+        [AC_MSG_ERROR(X11's Xrender.h not found.)], [])
+else
+    AC_MSG_RESULT([internal])
+fi
+AC_SUBST(SYSTEM_X11EXT_H)
+
+dnl ===================================================================
 dnl Test for the presence of Ant and that it works
 dnl ===================================================================
 
Index: config_office/set_soenv.in
===================================================================
--- config_office/set_soenv.in.orig	2004-08-13 16:56:49.587367016 +0200
+++ config_office/set_soenv.in	2004-08-13 17:04:42.202518592 +0200
@@ -1310,7 +1310,16 @@ else
 }
 
-$PYTHONPATH           = '.'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ds.'python'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ds.'python'.$ds.'lib-dynload';
-$PYTHONHOME           = '$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH';
+$PYTHONPATH           = '.'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib';
+if ("@PYTHON@" eq "")
+{
+  $PYTHONHOME           = '$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH';
+  $PYTHONPATH		= $PYTHONPATH.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ds.'python'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ds.'python'.$ds.'lib-dynload';
+}
+else
+{
+  $PYTHONHOME		= '@PYTHONHOME@';
+  $PYTHONPATH		= $PYTHONPATH.$ps.'@PYTHONPATH@';
+}
 
 #
 print "done\n";
@@ -1736,6 +1743,13 @@ ToFile( "WITH_MOZILLA",      "@WITH_MOZI
 ToFile( "WITH_FONTOOO",      "@WITH_FONTOOO@",     "e" );
 ToFile( "SYSTEM_MSPACK",     "@SYSTEM_MSPACK@",    "e" );
 ToFile( "WITH_FONTS",        "@WITH_FONTS@",       "e" );
+ToFile( "WITH_MYSPELL_DICTS","@WITH_MYSPELL_DICTS@","e");
+ToFile( "SYSTEM_PYTHON",     "@PYTHON@",           "e" );
+ToFile( "PYTHON_CFLAGS",     "@PYTHON_CFLAGS@",    "e" );
+ToFile( "PYMAJOR",           "@PYMAJOR@",          "e" );
+ToFile( "PYMINOR",           "@PYMINOR@",          "e" );
+ToFile( "PYMICRO",           "@PYMICRO@",          "e" );
+ToFile( "PYVERSION",         "@PYVERSION@",        "e" );
 if ( '@ENABLE_RPATH@' eq "no" ) {
   ToFile( "LINKFLAGSRUNPATH",'',                   "e" );
 }
@@ -1743,15 +1757,38 @@ ToFile( "SYSTEM_ZLIB",       "@SYSTEM_ZL
 ToFile( "BUILD_DMAKE",       "@BUILD_DMAKE@",      "e" );
 ToFile( "SYSTEM_NAS",        "@SYSTEM_NAS@",       "e" );
 ToFile( "NAS_INCLUDES",      "@NAS_INCLUDES@",     "e" );
+ToFile( "USE_GNOMEVFS",      "YES",                "e" );
+ToFile( "ENABLE_CUPS",       "YES",                "e" );
+ToFile( "FONTCONFIG_FONTS",  "@FONTCONFIG_FONTS@", "e" );
+ToFile( "FONTCONFIG_LIBS",   "@FONTCONFIG_LIBS@",  "e" );
 ToFile( "SYSTEM_FREETYPE",   "@SYSTEM_FREETYPE@",  "e" );
 ToFile( "FREETYPE_LIBS",     "@FREETYPE_LIBS@",    "e" );
 ToFile( "FREETYPE_CFLAGS",   "@FREETYPE_CFLAGS@",  "e" );
+ToFile( "SYSTEM_DB",         "@SYSTEM_DB@",        "e" );
+ToFile( "DB_VERSION",        "@DB_VERSION@",       "e" );
+ToFile( "DB_INCLUDES",       "@DB_INCLUDES@",      "e" );
+ToFile( "DB_JAR",            "@DB_JAR@",           "e" );
 ToFile( "SYSTEM_NEON",       "@SYSTEM_NEON@",      "e" );
 ToFile( "NEON_CFLAGS",       "@NEON_CFLAGS@",      "e" );
 ToFile( "NEON_LIBS",         "@NEON_LIBS@",        "e" );
 ToFile( "SYSTEM_CURL",       "@SYSTEM_CURL@",      "e" );
+ToFile( "SYSTEM_SANE_H",     "@SYSTEM_SANE_H@",    "e" );
+ToFile( "SYSTEM_X11EXT_H",   "@SYSTEM_X11EXT_H@",  "e" );
+ToFile( "SYSTEM_LIBWPD",     "@SYSTEM_LIBWPD@",    "e" );
+ToFile( "LIBWPD_CFLAGS",     "@LIBWPD_CFLAGS@",    "e" );
+ToFile( "LIBWPD_LIBS",       "@LIBWPD_LIBS@",      "e" );
 ToFile( "USE_XINERAMA",      "@USE_XINERAMA@",     "e" );
 ToFile( "XINERAMA_LINK",     "@XINERAMA_LINK@",    "e" );
+ToFile( "GTK_LIBS",          "@GTK_LIBS@",         "e" );
+ToFile( "GTK_CFLAGS",        "@GTK_CFLAGS@",       "e" );
+ToFile( "SYSTEM_MYSPELL",    "@SYSTEM_MYSPELL@",   "e" );
+ToFile( "MYSPELL_CFLAGS",    "@MYSPELL_CFLAGS@",   "e" );
+ToFile( "MYSPELL_LIBS",      "@MYSPELL_LIBS@",     "e" );
+ToFile( "SYSTEM_HYPH",       "@SYSTEM_HYPH@",      "e" );
+ToFile( "SYSTEM_UNIXODBC_H", "@SYSTEM_UNIXODBC_H@","e" );
+ToFile( "SYSTEM_XRENDER",    "@SYSTEM_XRENDER@",   "e" );
+#ToFile( "CPP",               "@CPP@",              "e" );
+#ToFile( "CPPCXX",            "@CPPCXX@",           "e" );
 ToFile( "GXX_INCLUDE_PATH",  "@GXX_INCLUDE_PATH@", "e" );
 ToFile( "COMMON_BUILD_TOOLS",$COMMON_BUILD_TOOLS,  "e" );
 ToFile( "ENABLE_GTK",        "@ENABLE_GTK@",       "e" );
