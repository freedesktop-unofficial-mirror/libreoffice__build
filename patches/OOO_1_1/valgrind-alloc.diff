Index: sal/rtl/source/alloc.c
===================================================================
RCS file: /cvs/porting/sal/rtl/source/alloc.c,v
retrieving revision 1.14
diff -u -3 -p -r1.14 alloc.c
--- sal/rtl/source/alloc.c	17 Dec 2003 17:10:01 -0000	1.14
+++ sal/rtl/source/alloc.c	29 Feb 2004 17:50:41 -0000
@@ -227,6 +227,39 @@ static sal_uInt32 __rtl_memory_vmpagesiz
 
 /*===========================================================================
  *
+ * Determine allocation mode (debug/release) by examining environment
+ * variable "OOO_FORCE_SYSALLOC".
+ *
+ *=========================================================================*/
+
+#include <stdlib.h>   /* getenv */
+#include <stdio.h>    /* stderr */
+
+typedef 
+   enum { AMode_CUSTOM, AMode_SYSTEM, AMode_UNSET } 
+   AllocMode;
+
+static AllocMode alloc_mode = AMode_UNSET;
+
+static void determine_alloc_mode ( void )
+{
+   /* This shouldn't happen, but still ... */
+   if (alloc_mode != AMode_UNSET)
+      return;
+
+   if (getenv("OOO_FORCE_SYSALLOC") != NULL) {
+      alloc_mode = AMode_SYSTEM;
+      fprintf(stderr, "OOo: Using system memory allocator.\n");
+      fprintf(stderr, "OOo: This is for debugging only.  To disable,\n");
+      fprintf(stderr, "OOo: unset the environment variable"
+                      " OOO_FORCE_SYSALLOC.\n");
+   } else {
+      alloc_mode = AMode_CUSTOM;
+   }
+}
+
+/*===========================================================================
+ *
  * rtl_memory (global) internals.
  *
  *=========================================================================*/
@@ -1110,8 +1143,8 @@ static void __rtl_memory_enqueue (memory
 /*
  * rtl_reallocateMemory.
  */
-#ifndef FORCE_SYSALLOC
-void* SAL_CALL rtl_reallocateMemory (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
+static
+void* SAL_CALL rtl_reallocateMemory_CUSTOM (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
 {
 	memory_type * memory;
 	if (!(!p || !n))
@@ -1267,18 +1300,33 @@ void* SAL_CALL rtl_reallocateMemory (voi
 	}
 	return (p);
 }
-#else  /* FORCE_SYSALLOC */
-void* SAL_CALL rtl_reallocateMemory (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
+
+static
+void* SAL_CALL rtl_reallocateMemory_SYSTEM (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
 {
 	return realloc(p, (size_t)(n));
 }
-#endif /* FORCE_SYSALLOC */
+
+void* SAL_CALL rtl_reallocateMemory (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
+{
+   while (1) {
+      if (alloc_mode == AMode_CUSTOM) {
+         return rtl_reallocateMemory_CUSTOM(p,n);
+      }
+      if (alloc_mode == AMode_SYSTEM) {
+         return rtl_reallocateMemory_SYSTEM(p,n);
+      }
+      determine_alloc_mode();
+   }
+}
+
+
 
 /*
  * rtl_allocateMemory.
  */
-#ifndef FORCE_SYSALLOC
-void* SAL_CALL rtl_allocateMemory (sal_uInt32 n) SAL_THROW_EXTERN_C()
+static
+void* SAL_CALL rtl_allocateMemory_CUSTOM (sal_uInt32 n) SAL_THROW_EXTERN_C()
 {
 	void * p = 0;
 	if (n > 0)
@@ -1300,18 +1348,33 @@ void* SAL_CALL rtl_allocateMemory (sal_u
 	}
 	return (p);
 }
-#else  /* FORCE_SYSALLOC */
-void* SAL_CALL rtl_allocateMemory (sal_uInt32 n) SAL_THROW_EXTERN_C()
+
+static
+void* SAL_CALL rtl_allocateMemory_SYSTEM (sal_uInt32 n) SAL_THROW_EXTERN_C()
 {
 	return malloc((size_t)(n));
 }
-#endif /* FORCE_SYSALLOC */
+
+void* SAL_CALL rtl_allocateMemory (sal_uInt32 n) SAL_THROW_EXTERN_C()
+{
+   while (1) {
+      if (alloc_mode == AMode_CUSTOM) {
+         return rtl_allocateMemory_CUSTOM(n);
+      }
+      if (alloc_mode == AMode_SYSTEM) {
+         return rtl_allocateMemory_SYSTEM(n);
+      }
+      determine_alloc_mode();
+   }
+}
+
+
 
 /*
  * rtl_freeMemory.
  */
-#ifndef FORCE_SYSALLOC
-void SAL_CALL rtl_freeMemory (void * p) SAL_THROW_EXTERN_C()
+static
+void SAL_CALL rtl_freeMemory_CUSTOM (void * p) SAL_THROW_EXTERN_C()
 {
 	if (p)
 	{
@@ -1332,18 +1395,34 @@ void SAL_CALL rtl_freeMemory (void * p) 
 		RTL_MEMORY_LEAVE();
 	}
 }
-#else  /* FORCE_SYSALLOC */
-void SAL_CALL rtl_freeMemory (void * p) SAL_THROW_EXTERN_C()
+
+static
+void SAL_CALL rtl_freeMemory_SYSTEM (void * p) SAL_THROW_EXTERN_C()
 {
 	free(p);
 }
-#endif /* FORCE_SYSALLOC */
+
+void SAL_CALL rtl_freeMemory (void * p) SAL_THROW_EXTERN_C()
+{
+   while (1) {
+      if (alloc_mode == AMode_CUSTOM) {
+         rtl_freeMemory_CUSTOM(p);
+	 return;
+      }
+      if (alloc_mode == AMode_SYSTEM) {
+         rtl_freeMemory_SYSTEM(p);
+	 return;
+      }
+      determine_alloc_mode();
+   }
+}
+
 
 /*
  * rtl_allocateZeroMemory.
  */
-#ifndef FORCE_SYSALLOC
-void* SAL_CALL rtl_allocateZeroMemory (sal_uInt32 n) SAL_THROW_EXTERN_C()
+static
+void* SAL_CALL rtl_allocateZeroMemory_CUSTOM (sal_uInt32 n) SAL_THROW_EXTERN_C()
 {
 	void * p = 0;
 	if (n > 0)
@@ -1366,18 +1445,32 @@ void* SAL_CALL rtl_allocateZeroMemory (s
 	}
 	return (p);
 }
-#else  /* FORCE_SYSALLOC */
-void* SAL_CALL rtl_allocateZeroMemory (sal_uInt32 n) SAL_THROW_EXTERN_C()
+
+static
+void* SAL_CALL rtl_allocateZeroMemory_SYSTEM (sal_uInt32 n) SAL_THROW_EXTERN_C()
 {
 	return calloc((size_t)(n), 1);
 }
-#endif /* FORCE_SYSALLOC */
+
+void* SAL_CALL rtl_allocateZeroMemory (sal_uInt32 n) SAL_THROW_EXTERN_C()
+{
+   while (1) {
+      if (alloc_mode == AMode_CUSTOM) {
+         return rtl_allocateZeroMemory_CUSTOM(n);
+      }
+      if (alloc_mode == AMode_SYSTEM) {
+         return rtl_allocateZeroMemory_SYSTEM(n);
+      }
+      determine_alloc_mode();
+   }
+}
+
 
 /*
  * rtl_freeZeroMemory.
  */
-#ifndef FORCE_SYSALLOC
-void SAL_CALL rtl_freeZeroMemory (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
+static
+void SAL_CALL rtl_freeZeroMemory_CUSTOM (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
 {
 	if (p)
 	{
@@ -1399,8 +1492,9 @@ void SAL_CALL rtl_freeZeroMemory (void *
 		RTL_MEMORY_LEAVE();
 	}
 }
-#else  /* FORCE_SYSALLOC */
-void SAL_CALL rtl_freeZeroMemory (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
+
+static
+void SAL_CALL rtl_freeZeroMemory_SYSTEM (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
 {
 	if (p)
 	{
@@ -1408,7 +1502,21 @@ void SAL_CALL rtl_freeZeroMemory (void *
 		free(p);
 	}
 }
-#endif /* FORCE_SYSALLOC */
+
+void SAL_CALL rtl_freeZeroMemory (void * p, sal_uInt32 n) SAL_THROW_EXTERN_C()
+{
+   while (1) {
+      if (alloc_mode == AMode_CUSTOM) {
+         rtl_freeZeroMemory_CUSTOM(p,n);
+	 return;
+      }
+      if (alloc_mode == AMode_SYSTEM) {
+         rtl_freeZeroMemory_SYSTEM(p,n);
+	 return;
+      }
+      determine_alloc_mode();
+   }
+}
 
 /*===========================================================================
  *

