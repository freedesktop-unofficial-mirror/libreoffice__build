Index: vcl/source/gdi/outdev2.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/gdi/outdev2.cxx,v
retrieving revision 1.13
diff -u -p -u -r1.13 outdev2.cxx
--- vcl/source/gdi/outdev2.cxx	24 Apr 2003 14:56:48 -0000	1.13
+++ vcl/source/gdi/outdev2.cxx	29 Aug 2003 13:29:07 -0000
@@ -789,12 +792,14 @@ void OutputDevice::DrawBitmapEx( const P
 // ------------------------------------------------------------------
 
 void OutputDevice::ImplDrawBitmapEx( const Point& rDestPt, const Size& rDestSize,
-									 const Point& rSrcPtPixel, const Size& rSrcSizePixel,
+									 const Point& rSrcPtPixelOld, const Size& rSrcSizePixel,
 									 const BitmapEx& rBitmapEx, const ULONG nAction )
 {
+	Point rSrcPtPixel( rSrcPtPixelOld );
 	DBG_CHKTHIS( OutputDevice, ImplDbgCheckOutputDevice );
 
-	BitmapEx aBmpEx( rBitmapEx );
+	BitmapEx aBmpEx;
+	aBmpEx.SetCrop( rBitmapEx, rSrcPtPixel, rSrcSizePixel );
 
 	if ( mnDrawMode & DRAWMODE_NOBITMAP )
 		return;
Index: vcl/inc/bitmapex.hxx
===================================================================
RCS file: /cvs/gsl/vcl/inc/bitmapex.hxx,v
retrieving revision 1.5
diff -u -p -u -r1.5 bitmapex.hxx
--- vcl/inc/bitmapex.hxx	22 Oct 2002 17:07:54 -0000	1.5
+++ vcl/inc/bitmapex.hxx	12 Sep 2003 14:21:07 -0000
@@ -145,6 +145,10 @@ public:
 	void				SetEmpty();
 	void				Clear();
 
+        void                            SetCrop( const BitmapEx& rBitmapEx,
+						 Point &rCropOffset,
+						 const Size &rCropSize);
+
 	void				Draw( OutputDevice* pOutDev, 
 							  const Point& rDestPt ) const;
 	void				Draw( OutputDevice* pOutDev, 
Index: vcl/source/gdi/bitmapex.cxx
===================================================================
RCS file: /cvs/gsl/vcl/source/gdi/bitmapex.cxx,v
retrieving revision 1.6
diff -u -p -u -r1.6 bitmapex.cxx
--- vcl/source/gdi/bitmapex.cxx	11 Apr 2003 17:28:27 -0000	1.6
+++ vcl/source/gdi/bitmapex.cxx	15 Sep 2003 10:19:39 -0000
@@ -105,6 +105,40 @@ BitmapEx::BitmapEx( const BitmapEx& rBit
 {
 }
 
+void BitmapEx::SetCrop( const BitmapEx& rBitmapEx,
+						Point &rCropOffset,
+						const Size &rCropSize )
+{
+  if (rCropSize.Width () < rBitmapEx.aBitmapSize.Width () / 2 ||
+      rCropSize.Height () < rBitmapEx.aBitmapSize.Height () / 2)
+  {
+    /* FIXME: also check total size ? */
+
+    const Bitmap srcPixels( rBitmapEx.GetBitmap() );
+    const Bitmap srcMask( rBitmapEx.GetMask() );
+    
+    aBitmap = Bitmap( rCropSize, srcPixels.GetBitCount(), NULL ); // FIXME: pallette ?
+    aMask = Bitmap( rCropSize, srcMask.GetBitCount(),
+					srcMask.GetBitCount() > 1 ? &Bitmap::GetGreyPalette( 256 ) : NULL ); 
+
+    aBitmap.CopyPixel (Rectangle (Point (0,0), rCropSize),
+					   Rectangle (rCropOffset, rCropSize),
+					   &srcPixels);
+    aMask.CopyPixel (Rectangle (Point (0,0), rCropSize),
+					 Rectangle (rCropOffset, rCropSize),
+					 &srcMask);
+    rCropOffset = Point (0, 0);
+
+    aBitmapSize = aBitmap.GetSizePixel();
+    aTransparentColor = rBitmapEx.aTransparentColor;
+    eTransparent = rBitmapEx.eTransparent;
+    bAlpha = rBitmapEx.bAlpha;
+
+  }
+  else
+	*this = rBitmapEx;
+}
+
 // ------------------------------------------------------------------
 
 BitmapEx::BitmapEx( const Bitmap& rBmp ) :
@@ -113,6 +147,12 @@ BitmapEx::BitmapEx( const Bitmap& rBmp )
 		eTransparent( TRANSPARENT_NONE ),
 		bAlpha		( FALSE )
 {
+    if (aBitmap.GetBitCount () == 32)
+	{
+        eTransparent = TRANSPARENT_BITMAP;
+		bAlpha = TRUE;
+		aMask = aBitmap.GetAlphaMask();
+	}
 }
 
 // ------------------------------------------------------------------
@@ -124,12 +164,8 @@ BitmapEx::BitmapEx( const Bitmap& rBmp, 
 		eTransparent	( !rMask ? TRANSPARENT_NONE : TRANSPARENT_BITMAP ),
 		bAlpha			( FALSE )
 {
-    // #105489# Ensure a mask is exactly one bit deep
     if( !!aMask && aMask.GetBitCount() != 1 )
-    {
-        OSL_TRACE("BitmapEx: forced mask to monochrome");
-        aMask.ImplMakeMono( 255 );
-    }
+		bAlpha = TRUE;
 }
 
 // ------------------------------------------------------------------
@@ -152,7 +188,13 @@ BitmapEx::BitmapEx( const Bitmap& rBmp, 
 		eTransparent		( TRANSPARENT_BITMAP ),
 		bAlpha				( FALSE )
 {
-	aMask = aBitmap.CreateMask( aTransparentColor );
+    if( rBmp.GetBitCount() > 24 )
+	{
+        aMask = rBmp.GetAlphaMask();
+		bAlpha = TRUE;
+	}
+	else
+	    aMask = aBitmap.CreateMask( aTransparentColor );
 }
 
 // ------------------------------------------------------------------
@@ -287,12 +329,7 @@ BitmapEx BitmapEx::GetColorTransformedBi
 
 Bitmap BitmapEx::GetMask() const
 {
-	Bitmap aRet( aMask );
-
-	if( IsAlpha() )
-		aRet.ImplMakeMono( 255 );
-
-	return aRet;
+	return Bitmap( aMask );
 }
 
 // ------------------------------------------------------------------
@@ -395,7 +433,7 @@ BOOL BitmapEx::Scale( const double& rSca
                bRet = aBitmap.Scale( rScaleX, rScaleY, nScaleFlag );
 
                if( bRet && ( eTransparent == TRANSPARENT_BITMAP ) && !!aMask )
-                       aMask.Scale( rScaleX, rScaleY, BMP_SCALE_FAST );
+                       aMask.Scale( rScaleX, rScaleY, aMask.GetBitCount() == 1 ? BMP_SCALE_FAST : nScaleFlag);
 
                aBitmapSize = aBitmap.GetSizePixel();
        }
