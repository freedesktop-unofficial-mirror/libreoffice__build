
	We have to use Xft's hard-coded idea of the dpi first, and use
the builtin toDouble to avoid l10n issues.

Index: vcl/unx/source/app/saldisp.cxx
===================================================================
--- vcl/unx/source/app/saldisp.cxx.orig	2004-01-06 17:30:08.000000000 +0100
+++ vcl/unx/source/app/saldisp.cxx	2004-01-06 17:32:42.000000000 +0100
@@ -911,9 +911,20 @@ void SalDisplay::Init( Colormap hXColmap
     m_bXinerama			= false;
     aSize_              = Size( DisplayWidth ( pDisp_, nScreen_ ),
                                 DisplayHeight( pDisp_, nScreen_ ) );
-    aResolution_        =
+    {
+      const char *value;
+      long dpi = 0;
+      if ((value = XGetDefault (pDisp_, "Xft", "dpi"))) {
+	::rtl::OString str (value);
+	dpi = (long) str.toDouble();
+      }
+      if (dpi > 0)
+        aResolution_ = Pair( dpi, dpi );
+      else
+	aResolution_ =
         Pair( DPI( aSize_.Width(),  DisplayWidthMM ( pDisp_, nScreen_ ) ),
               DPI( aSize_.Height(), DisplayHeightMM( pDisp_, nScreen_ ) ) );
+    }
 
     nMaxRequestSize_    = XExtendedMaxRequestSize( pDisp_ ) * 4;
     if( !nMaxRequestSize_ )
@@ -3008,11 +3019,13 @@ void SalDisplay::GetScreenFontResolution
     rDPIX = aResolution_.A();
     rDPIY = aResolution_.B();
     
+#if 0    
     if( rDPIY < nThreshold )
     {
         rDPIX = Divide( rDPIX * nThreshold, rDPIY );
         rDPIY = nThreshold;
     }
+#endif
 
     // #i12705# equalize x- and y-resolution if they are close enough
     if( rDPIX != rDPIY )
Index: vcl/source/window/window.cxx
===================================================================
--- vcl/source/window/window.cxx.orig	2004-01-06 17:30:33.000000000 +0100
+++ vcl/source/window/window.cxx	2004-01-06 17:32:42.000000000 +0100
@@ -1659,6 +1659,7 @@ void Window::ImplInitResolutionSettings(
 }
 
 // -----------------------------------------------------------------------
+#include <stdio.h>
 
 void Window::ImplPointToLogic( Font& rFont ) const
 {
@@ -1667,17 +1668,21 @@ void Window::ImplPointToLogic( Font& rFo
 
     if ( aSize.Width() )
     {
-        aSize.Width() *= mpFrameData->mnFontDPIX;
-        aSize.Width() += 72/2;
-        aSize.Width() /= 72;
-        aSize.Width() *= nScreenFontZoom;
-        aSize.Width() /= 100;
-    }
-    aSize.Height() *= mpFrameData->mnFontDPIY;
-    aSize.Height() += 72/2;
-    aSize.Height() /= 72;
-    aSize.Height() *= nScreenFontZoom;
-    aSize.Height() /= 100;
+		double t = aSize.Width();
+		t *= nScreenFontZoom;
+		t /= 100.0;
+		t *= mpFrameData->mnFontDPIX;
+		t /= 72.0;
+		t += 0.5;
+		aSize.Width() = (long) t;
+    }
+    double t = aSize.Height();
+    t *= nScreenFontZoom;
+    t /= 100.0;
+    t *= mpFrameData->mnFontDPIY;
+    t /= 72.0;
+    t += 0.5;
+    aSize.Height() = (long) t;
 
     if ( IsMapModeEnabled() )
         aSize = PixelToLogic( aSize );
@@ -1697,17 +1702,22 @@ void Window::ImplLogicToPoint( Font& rFo
 
     if ( aSize.Width() )
     {
-        aSize.Width() *= 100;
-        aSize.Width() /= nScreenFontZoom;
-        aSize.Width() *= 72;
-        aSize.Width() += mpFrameData->mnFontDPIX/2;
-        aSize.Width() /= mpFrameData->mnFontDPIX;
-    }
-    aSize.Height() *= 100;
-    aSize.Height() /= nScreenFontZoom;
-    aSize.Height() *= 72;
-    aSize.Height() += mpFrameData->mnFontDPIY/2;
-    aSize.Height() /= mpFrameData->mnFontDPIY;
+		double t = aSize.Width();
+		t -= 0.5;
+		t *= 72.0;
+		t /= mpFrameData->mnFontDPIX;
+		t *= 100.0;
+		t /= nScreenFontZoom;
+		aSize.Width() = (long) t;
+	}
+
+    double t = aSize.Height();
+    t -= 0.5;
+    t *= 72.0;
+    t /= mpFrameData->mnFontDPIY;
+    t *= 100.0;
+    t /= nScreenFontZoom;
+    aSize.Height() = (long) t;
 
     rFont.SetSize( aSize );
 }
