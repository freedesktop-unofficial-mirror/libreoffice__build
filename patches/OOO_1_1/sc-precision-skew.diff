--- sc/source/core/tool/interpr3.cxx
+++ sc/source/core/tool/interpr3.cxx
@@ -1855,12 +1855,12 @@
 	BYTE nParamCount = GetByte();
 	if ( !MustHaveParamCountMin( nParamCount, 1 ) )
 		return;
-	USHORT SaveSP = sp;
 	USHORT i;
 	double fSum    = 0.0;
-	double fSumSqr = 0.0;
+	double vSum    = 0.0;
+	std::vector<double> values;
 	double fCount  = 0.0;
-	double fVal;
+	double fVal = 0.0;
 	ScAddress aAdr;
 	ScRange aRange;
 	for (i = 0; i < nParamCount; i++)
@@ -1871,7 +1871,7 @@
 			{
 				fVal = GetDouble();
 				fSum += fVal;
-				fSumSqr += fVal*fVal;
+				values.push_back(fVal);
 				fCount++;
 			}
 				break;
@@ -1883,7 +1883,7 @@
 				{
 					fVal = GetCellValue( aAdr, pCell );
 					fSum += fVal;
-					fSumSqr += fVal*fVal;
+					values.push_back(fVal);
 					fCount++;
 				}
 			}
@@ -1896,13 +1896,13 @@
 				if (aValIter.GetFirst(fVal, nErr))
 				{
 					fSum += fVal;
-					fSumSqr += fVal*fVal;
+					values.push_back(fVal);
 					fCount++;
 					SetError(nErr);
 					while ((nErr == 0) && aValIter.GetNext(fVal, nErr))
 					{
 						fSum += fVal;
-						fSumSqr += fVal*fVal;
+						values.push_back(fVal);
 						fCount++;
 					}
 					SetError(nErr);
@@ -1921,7 +1921,7 @@
                         {
                             fVal = pMat->GetDouble(i);
                             fSum += fVal;
-                            fSumSqr += fVal*fVal;
+			    values.push_back(fVal);
                             fCount++;
                         }
 					}
@@ -1932,7 +1932,7 @@
                             {
                                 fVal = pMat->GetDouble(i);
                                 fSum += fVal;
-                                fSumSqr += fVal*fVal;
+				values.push_back(fVal);
                                 fCount++;
                             }
 					}
@@ -1944,72 +1944,39 @@
 			break;
 		}
 	}
+
 	if (nGlobalError)
 	{
 		PushInt(0);
 		return;
 	}
+
 	double fMean = fSum / fCount;
-	double fSSqr = (fSumSqr - fSum*fSum/fCount)/(fCount-1.0);
-	sp = SaveSP;
-	fSum = 0.0;
-	// #55733# GCC Optimierungsfehler, GPF wenn die 4.0 als Konstante an pow()
-	// uebergeben wird, auch ein "const double fPow = 4.0;" GPF't,
-	double fPow = 4.0;
-	for (i = 0; i < nParamCount; i++)
-	{
-		switch (GetStackType())
-		{
-			case svDouble :
-				fSum += pow(GetDouble()-fMean,fPow);
-				break;
-			case svSingleRef :
-			{
-				PopSingleRef( aAdr );
-				ScBaseCell* pCell = GetCell( aAdr );
-				if (HasCellValueData(pCell))
-					fSum += pow(GetCellValue( aAdr, pCell ) - fMean, fPow);
-			}
-			break;
-			case svDoubleRef :
-			{
-				PopDoubleRef( aRange );
-				USHORT nErr = 0;
-				ScValueIterator aValIter(pDok, aRange);
-				if (aValIter.GetFirst(fVal, nErr))
-				{
-					fSum += pow(fVal - fMean, fPow);
-					while (aValIter.GetNext(fVal, nErr))
-						 fSum += pow(fVal - fMean, fPow);
-				}
-			}
-			break;
-			case svMatrix :
-			{
-				ScMatrix* pMat = PopMatrix();
-				if (pMat)
-				{
-                    ULONG nCount = pMat->GetElementCount();
-					if (pMat->IsNumeric())
-					{
-                        for (ULONG i = 0; i < nCount; i++)
-                            fSum += pow(pMat->GetDouble(i) - fMean, fPow);
-					}
-					else
-					{
-                        for (ULONG i = 0; i < nCount; i++)
-                            if (!pMat->IsString(i))
-                                fSum += pow(pMat->GetDouble(i) - fMean, fPow);
-					}
-				}
-			}
-			break;
-			default : SetError(errIllegalParameter); break;
-		}
-	}
-	PushDouble(fCount*(fCount+1.0)/((fCount-1.0)*(fCount-2.0)*(fCount-3.0))
-			   *fSum/(fSSqr*fSSqr)
-			   - 3.0*(fCount-1.0)*(fCount-1.0)/((fCount-2.0)*(fCount-3.0)));
+	
+	for (i = 0; i < values.size(); i++)
+		vSum += (values[i] - fMean) * (values[i] - fMean);
+
+	double fStdDev = sqrt(vSum / (fCount - 1.0));
+	double dx = 0.0;
+	double xpower4 = 0.0;
+	
+	if (fStdDev == 0)
+	{
+		SetError(errIllegalArgument);
+		return;
+	}
+	
+	for (i = 0; i < values.size(); i++)
+	{
+		dx = (values[i] - fMean) / fStdDev;
+		xpower4 = xpower4 + (dx * dx * dx * dx);
+	}
+	
+	double k_d = (fCount - 2.0) * (fCount - 3.0);
+	double k_l = fCount * (fCount + 1.0) / ((fCount - 1.0) * k_d);
+	double k_t = 3.0 * (fCount - 1.0) * (fCount - 1.0) / k_d;
+	
+	PushDouble(xpower4 * k_l - k_t);
 }
 
 void ScInterpreter::ScHarMean()
@@ -2131,9 +2098,10 @@
 {
 	BYTE nParamCount = GetByte();
 	double nVal = 0.0;
-	ULONG nCount = 0;
+	double nCount = 0.0;
 	ScAddress aAdr;
 	ScRange aRange;
+
 	for (short i = 0; i < nParamCount && (nGlobalError == 0); i++)
 	{
 		switch (GetStackType())
@@ -2202,35 +2170,35 @@
 				ScMatrix* pMat = PopMatrix();
 				if (pMat)
 				{
-                    ULONG nCount = pMat->GetElementCount();
+                    			ULONG uCount = pMat->GetElementCount();
 					if (pMat->IsNumeric())
 					{
-                        for (ULONG i = 0; i < nCount; i++)
-                        {
-                            double x = pMat->GetDouble(i);
-                            if (x > 0.0)
-                            {
-                                nVal += log(x);
-                                nCount++;
-                            }
-                            else
-                                SetIllegalArgument();
-                        }
+                        			for (ULONG ui = 0; ui < uCount; ui++)
+                        			{
+                            				double x = pMat->GetDouble(ui);
+                            				if (x > 0.0)
+                            				{
+                                				nVal += log(x);
+                                				nCount++;
+                            				}
+                            				else
+                                				SetIllegalArgument();
+                        			}
 					}
 					else
 					{
-                        for (ULONG i = 0; i < nCount; i++)
-                            if (!pMat->IsString(i))
-                            {
-                                double x = pMat->GetDouble(i);
-                                if (x > 0.0)
-                                {
-                                    nVal += log(x);
-                                    nCount++;
-                                }
-                                else
-                                    SetIllegalArgument();
-                            }
+                        			for (ULONG ui = 0; ui < uCount; ui++)
+                            				if (!pMat->IsString(ui))
+                            				{
+                                				double x = pMat->GetDouble(ui);
+                                				if (x > 0.0)
+                                				{
+                                    					nVal += log(x);
+                                    					nCount++;
+                                				}
+                                				else
+                                    					SetIllegalArgument();
+                            				}
 					}
 				}
 			}
@@ -2239,7 +2207,7 @@
 		}
 	}
 	if (nGlobalError == 0)
-		PushDouble(exp(nVal/(double)nCount));
+		PushDouble(exp(nVal / nCount));
 }
 
 void ScInterpreter::ScStandard()
@@ -2261,12 +2229,12 @@
 	BYTE nParamCount = GetByte();
 	if ( !MustHaveParamCountMin( nParamCount, 1 )  )
 		return;
-	USHORT SaveSP = sp;
 	USHORT i;
 	double fSum    = 0.0;
-	double fSumSqr = 0.0;
+	double vSum    = 0.0;
+	std::vector<double> values;
 	double fCount  = 0.0;
-	double fVal;
+	double fVal = 0.0;
 	ScAddress aAdr;
 	ScRange aRange;
 	for (i = 0; i < nParamCount; i++)
@@ -2277,7 +2245,7 @@
 			{
 				fVal = GetDouble();
 				fSum += fVal;
-				fSumSqr += fVal*fVal;
+				values.push_back(fVal);
 				fCount++;
 			}
 				break;
@@ -2289,7 +2257,7 @@
 				{
 					fVal = GetCellValue( aAdr, pCell );
 					fSum += fVal;
-					fSumSqr += fVal*fVal;
+					values.push_back(fVal);
 					fCount++;
 				}
 			}
@@ -2302,13 +2270,13 @@
 				if (aValIter.GetFirst(fVal, nErr))
 				{
 					fSum += fVal;
-					fSumSqr += fVal*fVal;
+					values.push_back(fVal);
 					fCount++;
 					SetError(nErr);
 					while ((nErr == 0) && aValIter.GetNext(fVal, nErr))
 					{
 						fSum += fVal;
-						fSumSqr += fVal*fVal;
+						values.push_back(fVal);
 						fCount++;
 					}
 					SetError(nErr);
@@ -2327,7 +2295,7 @@
                         {
                             fVal = pMat->GetDouble(i);
                             fSum += fVal;
-                            fSumSqr += fVal*fVal;
+			    values.push_back(fVal);
                             fCount++;
                         }
 					}
@@ -2338,7 +2306,7 @@
                             {
                                 fVal = pMat->GetDouble(i);
                                 fSum += fVal;
-                                fSumSqr += fVal*fVal;
+				values.push_back(fVal);
                                 fCount++;
                             }
 					}
@@ -2350,68 +2318,35 @@
 			break;
 		}
 	}
+	
 	if (nGlobalError)
 	{
 		PushInt(0);
 		return;
 	}
+	
 	double fMean = fSum / fCount;
-	double fSSqr = (fSumSqr - fSum*fSum/fCount)/(fCount-1.0);
-	sp = SaveSP;
-	fSum = 0.0;
-	double fPow = 3.0;		// vorsichtshalber wg. #55733#, siehe ScKurt()
-	for (i = 0; i < nParamCount; i++)
+	
+	for (i = 0; i < values.size(); i++)
+		vSum += (values[i] - fMean) * (values[i] - fMean);
+
+	double fStdDev = sqrt(vSum / (fCount - 1.0));
+	double dx = 0.0;
+	double xcube = 0.0;
+	
+	if (fStdDev == 0)
 	{
-		switch (GetStackType())
-		{
-			case svDouble :
-				fSum += pow(GetDouble()-fMean,fPow);
-				break;
-			case svSingleRef :
-			{
-				PopSingleRef( aAdr );
-				ScBaseCell* pCell = GetCell( aAdr );
-				if (HasCellValueData(pCell))
-					fSum += pow(GetCellValue( aAdr, pCell ) - fMean, fPow);
-			}
-			break;
-			case svDoubleRef :
-			{
-				PopDoubleRef( aRange );
-				USHORT nErr = 0;
-				ScValueIterator aValIter(pDok, aRange);
-				if (aValIter.GetFirst(fVal, nErr))
-				{
-					fSum += pow(fVal - fMean, fPow);
-					while (aValIter.GetNext(fVal, nErr))
-						 fSum += pow(fVal - fMean, fPow);
-				}
-			}
-			break;
-			case svMatrix :
-			{
-				ScMatrix* pMat = PopMatrix();
-				if (pMat)
-				{
-                    ULONG nCount = pMat->GetElementCount();
-					if (pMat->IsNumeric())
-					{
-                        for (ULONG i = 0; i < nCount; i++)
-                            fSum += pow(pMat->GetDouble(i) - fMean, fPow);
-					}
-					else
-					{
-                        for (ULONG i = 0; i < nCount; i++)
-                            if (!pMat->IsString(i))
-                                fSum += pow(pMat->GetDouble(i) - fMean, fPow);
-					}
-				}
-			}
-			break;
-			default : SetError(errIllegalParameter); break;
-		}
+		SetError(errIllegalArgument);
+		return;
+	}
+	
+	for (i = 0; i < values.size(); i++)
+	{
+		dx = (values[i] - fMean) / fStdDev;
+		xcube = xcube + (dx * dx * dx);
 	}
-	PushDouble(fCount/((fCount-1.0)*(fCount-2.0))*fSum/(fSSqr*sqrt(fSSqr)));
+	
+	PushDouble(((xcube * fCount) / (fCount - 1.0)) / (fCount - 2.0));
 }
 
 void ScInterpreter::ScMedian()
