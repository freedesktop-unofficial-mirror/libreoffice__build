Index: bin/build.pl
===================================================================
RCS file: /cvs/tools/solenv/bin/build.pl,v
retrieving revision 1.86.18.2
diff -u -r1.86.18.2 build.pl
--- solenv/bin/build.pl	5 Apr 2004 14:14:10 -0000	1.86.18.2
+++ solenv/bin/build.pl	8 Jun 2004 22:06:11 -0000
@@ -133,6 +133,7 @@
     $show = 0;
     $deliver = 0;
     %LocalDepsHash = ();
+    %BuildConditionalsHash = ();
     %BuildQueue = ();
     %PathHash = ();
     %PlatformHash = ();
@@ -319,32 +319,40 @@
                 my $module_type = &module_classify($Prj);
 
                 &print_annonce($Prj) if ($module_type eq 'lnk');
-            &print_annonce($Prj . '.incomp') if ($module_type eq 'img');
-            if ($module_type eq 'mod') {
+            	&print_annonce($Prj . '.incomp') if ($module_type eq 'img');
+            	if ($module_type eq 'mod') {
 				if (scalar keys %broken_build) {
 					print $echo.	"Skipping project $Prj because of error(s)\n";
-            		&RemoveFromDependencies($Prj, \%global_deps_hash);
+            			&RemoveFromDependencies($Prj, \%global_deps_hash);
 					next;
 				};
-	            &print_annonce($Prj);
-            	$PrjDir = &CorrectPath($StandDir.$Prj);
+	            		&print_annonce($Prj);
+            			$PrjDir = &CorrectPath($StandDir.$Prj);
 				&mark_force_deliver($Prj, $PrjDir) if (defined $ENV{CWS_WORK_STAMP});
-		 		&get_deps_hash($Prj, \%LocalDepsHash);
-		 		&BuildDependent(\%LocalDepsHash);
-				my $deliver_commando = &get_deliver_commando($Prj);
+				my $Cond = &GetModuleBuildConditional( $PrjDir );
+				if ( &CheckBuildConditional($Cond) eq 1) {
+		 			&get_deps_hash($Prj, \%LocalDepsHash);
+		 			&BuildDependent(\%LocalDepsHash);
+					my $deliver_commando = &get_deliver_commando($Prj);
 		 		if ($cmd_file) {
 		 			print "$deliver_commando\n";
 		 		} else {
 		 			system ("$deliver_commando") if (!$show && ($Prj ne $CurrentPrj) && !$deliver);
 		 	    };
+			} else {
+				print STDERR "!!!! Not building project $Prj due to build conditional $Cond\n";
+			};
 		 	    print $check_error_string;
             };
             &RemoveFromDependencies($Prj, \%global_deps_hash);
         	$no_projects = 0;
 		};
 	} else {
-		&get_deps_hash($CurrentPrj, \%LocalDepsHash);
-		&BuildDependent(\%LocalDepsHash);
+		my $Cond = &GetModuleBuildConditional( '.' );
+		if ( &CheckBuildConditional($Cond) eq 1) {
+			&get_deps_hash($CurrentPrj, \%LocalDepsHash);
+			&BuildDependent(\%LocalDepsHash);
+		};
 	};
 };
 
@@ -481,7 +489,7 @@
 		};
 		s/\r\n//;
 		if ($_ =~ /nmake/o) {
-			my ($Platform, $Dependencies, $Dir, $DirAlias, @Array);
+			my ($Platform, $Dependencies, $Dir, $DirAlias, @Array, $Cond);
 			$Dependencies = $';
 			$dummy = $`;
 			$dummy =~ /(\S+)\s+(\S+)/o;
@@ -503,6 +511,8 @@
             &print_error("$module_to_build/prj/build.lst has wrong written dependencies string:\n$_\n") if (!$Dependencies);
 			@Array = &GetDependenciesArray($Dependencies);
 			$$dependencies_hash{$DirAlias} = [@Array];
+			$Cond = &GetStringBuildConditional($Dependencies);
+			$BuildConditionalsHash{$DirAlias} = &CheckBuildConditional($Cond);
 			$BuildQueue{$DirAlias}++;
             if ($Dir =~ /(\\|\/)/o) {
                 $Dir = $module_to_build . $1 . $';
@@ -633,10 +643,25 @@
 #
 sub PickPrjToBuild {
 	my ($Prj, $DepsHash);
+ 	my $i = 0;
+
 	$DepsHash = shift;
-    &handle_dead_children if ($QuantityToBuild);
-	$Prj = &FindIndepPrj($DepsHash);
-	delete $$DepsHash{$Prj};
+	&handle_dead_children if ($QuantityToBuild);
+
+ 	# Keep getting projects until we find one we are supposed to build
+ 	while ($i < 1) {
+ 		$i = 1;
+		$Prj = &FindIndepPrj($DepsHash);
+		delete $$DepsHash{$Prj};
+ 
+ 		# Only if the project exists in the hash do we check for a conditional
+ 		if (exists $BuildConditionalsHash{$Prj}) {
+ 			$i = $BuildConditionalsHash{$Prj};
+ 			if ( $i < 1 ) {
+ 				print STDERR "!!!! Not building project $Prj due to build conditional\n";
+ 			};
+ 		};
+ 	};
 	return $Prj;
 };
 
@@ -656,6 +681,95 @@
 };
 
 #
+# Check a conditional build variable
+#
+sub CheckBuildConditional {
+	my $conditional_string = shift;
+	my $do_build = 0;
+	my $dont_build = 0;
+	my $Negate = 0;
+	my ($condition,@tokens);
+
+	chomp($conditional_string);
+
+	# return true if empty conditional string
+	if ( $conditional_string eq '' ) {
+		return 1;
+	};
+
+	@tokens = split( ',', $conditional_string );
+	foreach $condition (@tokens) {
+		# Check for negation of the environment variable
+		if (substr($condition, 0, 1) eq '!') {
+			$Negate = 1;
+			$condition = substr($condition, 1, length($condition) - 1);
+		};
+
+		if (($ENV{$condition} ne '') && ($Negate eq 0)) {
+			$do_build += 1;
+		} elsif (($ENV{$condition} ne '') && ($Negate eq 1)) {
+			$dont_build += 1;
+		};
+	};
+
+	# if there is at _least_ one do_build, or there are no conditionals
+	# at all, we build this module
+	if ( $do_build > 0 ) {
+		return 1;
+	} elsif ( $dont_build > 0 ) {
+		return 0;
+	} else {
+		# shouldn't get here, but whatever...
+		return 1;
+	};
+};
+
+#
+# Gets a possible build conditional string from the first line
+# of build.lst
+#
+sub GetModuleBuildConditional {
+	my $PrjToBuild;
+	my $ConditionalString;
+
+	$PrjToBuild = shift;
+	chdir $PrjToBuild;
+	open (BUILD_LST, 'prj/build.lst');
+	while (<BUILD_LST>) {
+		if ($_ =~ /#/) {
+			if ($`) {
+				$_ = $`;
+			} else {
+				next;
+			};
+		};
+		s/\r\n//;
+		if ($_ =~ /:/) {
+			$ConditionalString = $';
+			$ConditionalString =~ /\((\S+)\)/;
+			$ConditionalString = $1;
+			break;
+		};
+	};
+	close BUILD_LST;
+	return $ConditionalString;
+};
+
+#
+# Gets a possible build conditional string
+#
+sub GetStringBuildConditional {
+	my $ConditionalString = shift;
+
+	chomp($ConditionalString);
+	if ( $ConditionalString =~ /\((\S+)\)/ ) {
+		return $1;
+	};
+
+	return '';
+};
+
+#
 # Remove project to build ahead from dependencies and make an array
 # of all from given project dependent projects
 #
