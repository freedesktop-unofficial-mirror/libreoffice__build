--- ../openoffice/build/OOO_1_1_2/framework/source/helper/statusindicatorfactory.cxx	2003-03-25 18:21:40.000000000 +0000
+++ framework/source/helper/statusindicatorfactory.cxx	2004-08-05 21:59:50.880726232 +0100
@@ -462,7 +462,7 @@
             m_bProgressMode = sal_True;
 		}
 
-        m_nStartTime = impl_get10ThSec();
+        m_nLastReschedule = m_nStartTime = impl_get10ThSec();
     }
     catch( css::uno::RuntimeException& )
     {
@@ -682,6 +682,7 @@
 			if ( nNewPercentage != nOldPercentage )
 			{
 				vos::OGuard aGuard( Application::GetSolarMutex() );
+				fprintf(stderr, "Set value %d != %d\n", nNewPercentage, nOldPercentage );
 				m_pStatusBar->SetProgressValue( nNewPercentage );
 			}
         }
@@ -692,8 +693,10 @@
 
 	// We start rescheduling only after 1 second - this code was successfully introduced by the sfx2
 	// implementation of the progress bar.
-    sal_Bool bReschedule = (( impl_get10ThSec() - m_nStartTime ) > TIMEOUT_START_RESCHEDULE );
-
+	long nTime = impl_get10ThSec();
+    sal_Bool bReschedule = ( nTime != m_nLastReschedule &&
+							 (nTime - m_nStartTime ) > TIMEOUT_START_RESCHEDULE );
+	m_nLastReschedule = nTime;
 	aLock.unlock();
 
 	if ( bReschedule )
--- ../openoffice/build/OOO_1_1_2/framework/inc/helper/statusindicatorfactory.hxx	2003-03-25 18:19:43.000000000 +0000
+++ framework/inc/helper/statusindicatorfactory.hxx	2004-08-05 21:36:58.092223568 +0100
@@ -321,7 +321,7 @@
         css::uno::Reference< css::task::XStatusIndicator >      m_xActiveIndicator          ;   /// most active indicator child, which could work with our shared indicator window only
         css::uno::Reference< css::awt::XWindow >                m_xParentWindow             ;   /// we are listener on this window to resize shared statrus indicator
 		long													m_nStartTime				;	/// time where there last start call was made
-
+		long													m_nLastReschedule           ;	/// time of our last reschedule call
 };      //  class StatusIndicatorFactory
 
 }		//	namespace framework
