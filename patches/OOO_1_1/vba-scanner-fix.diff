Index: basic/source/comp/scanner.cxx
===================================================================
RCS file: /cvs/script/basic/source/comp/scanner.cxx,v
retrieving revision 1.8
diff -u -p -u -r1.8 scanner.cxx
--- basic/source/comp/scanner.cxx	23 Apr 2003 16:57:09 -0000	1.8
+++ basic/source/comp/scanner.cxx	11 Mar 2004 15:10:40 -0000
@@ -184,7 +184,7 @@ static SbxDataType GetSuffixType( sal_Un
 BOOL SbiScanner::NextSym()
 {
 	// Fuer den EOLN-Fall merken
-	USHORT nOldLine = nLine;
+	UINT32 nOldLine = nLine;
 	USHORT nOldCol1 = nCol1;
 	USHORT nOldCol2 = nCol2;
 	sal_Unicode buf[ BUF_SIZE ], *p = buf;
@@ -198,8 +198,8 @@ BOOL SbiScanner::NextSym()
 	// Zeile einlesen?
 	if( !pLine )
 	{
-		USHORT n = nBufPos;
-		USHORT nLen = aBuf.getLength();
+		UINT32 n = nBufPos;
+		UINT32 nLen = aBuf.getLength();
 		if( nBufPos >= nLen )
 			return FALSE;
 		const sal_Unicode* p = aBuf.getStr();
Index: basic/source/inc/scanner.hxx
===================================================================
RCS file: /cvs/script/basic/source/inc/scanner.hxx,v
retrieving revision 1.3
diff -u -p -u -r1.3 scanner.hxx
--- basic/source/inc/scanner.hxx	23 Apr 2003 16:57:54 -0000	1.3
+++ basic/source/inc/scanner.hxx	11 Mar 2004 15:10:40 -0000
@@ -94,8 +94,8 @@ protected:
 	short  nCol; 						// aktuelle Spaltennummer
 	short  nErrors;						// Anzahl Fehler
 	short  nColLock;					// Lock-Zaehler fuer Col1
-	USHORT nBufPos;						// aktuelle Buffer-Pos
-	USHORT nLine;						// aktuelle Zeile
+    UINT32 nBufPos;						// buffer position
+    UINT32 nLine;						// line no.
 	USHORT nCol1, nCol2;				// aktuelle 1. und 2. Spalte
 	BOOL   bSymbol;						// TRUE: Symbol gescannt
 	BOOL   bNumber;						// TRUE: Zahl gescannt
