--- rsc/source/parser/rscdb.cxx.english-default	2004-12-08 16:17:45.000000000 -0500
+++ rsc/source/parser/rscdb.cxx	2004-12-08 17:16:49.267795520 -0500
@@ -766,6 +766,177 @@
 }
 IMPL_LINK_INLINE_END( RscEnumerateRef, CallBackWriteRcCtor, RscTop *, pRef )
 
+
+// There's no good place to get this from... transex3/export.hxx isn't yet delivered,
+// and we can't create a ResMgr instance to use ResMgr::GetLang() because we don't
+// have a resource file at all yet.  Seems like this stuff should be in the tools'
+// modules Language->ISO routines, but use of phone code #s is gone with 2.0 anyway, so...
+sal_Char* RscGetLang( LanguageType nType )
+{
+	switch ( nType )
+	{
+	     case LANGUAGE_DANISH:
+	          return "45";
+
+	     case LANGUAGE_DUTCH:
+	     case LANGUAGE_DUTCH_BELGIAN:
+	          return "31";
+
+	     case LANGUAGE_ENGLISH:
+	     case LANGUAGE_ENGLISH_UK:
+	     case LANGUAGE_ENGLISH_EIRE:
+	     case LANGUAGE_ENGLISH_SAFRICA:
+	     case LANGUAGE_ENGLISH_JAMAICA:
+	     case LANGUAGE_ENGLISH_BELIZE:
+	     case LANGUAGE_ENGLISH_TRINIDAD:
+	     case LANGUAGE_ENGLISH_ZIMBABWE:
+	     case LANGUAGE_ENGLISH_PHILIPPINES:
+	          return "44";
+
+	     case LANGUAGE_ENGLISH_US:
+	     case LANGUAGE_ENGLISH_CAN:
+	          return "01";
+
+	     case LANGUAGE_ENGLISH_AUS:
+	     case LANGUAGE_ENGLISH_NZ:
+	          return "61";
+	     case LANGUAGE_ESTONIAN:
+	          return "77";
+
+
+	     case LANGUAGE_FINNISH:
+	          return "35";
+
+	     case LANGUAGE_FRENCH_CANADIAN:
+	          return "02";
+
+	     case LANGUAGE_FRENCH:
+	     case LANGUAGE_FRENCH_BELGIAN:
+	     case LANGUAGE_FRENCH_SWISS:
+	     case LANGUAGE_FRENCH_LUXEMBOURG:
+	     case LANGUAGE_FRENCH_MONACO:
+	          return "33";
+
+	     case LANGUAGE_GERMAN:
+	     case LANGUAGE_GERMAN_SWISS:
+	     case LANGUAGE_GERMAN_AUSTRIAN:
+	     case LANGUAGE_GERMAN_LUXEMBOURG:
+	     case LANGUAGE_GERMAN_LIECHTENSTEIN:
+	          return "49";
+
+	     case LANGUAGE_ITALIAN:
+	     case LANGUAGE_ITALIAN_SWISS:
+	          return "39";
+
+	     case LANGUAGE_NORWEGIAN:
+	     case LANGUAGE_NORWEGIAN_BOKMAL:
+	          return "47";
+
+	     case LANGUAGE_NORWEGIAN_NYNORSK:
+	          return "79";
+
+	     case LANGUAGE_PORTUGUESE:
+	          return "03";
+
+	     case LANGUAGE_PORTUGUESE_BRAZILIAN:
+	          return "55";
+
+	     case LANGUAGE_SPANISH:
+	     case LANGUAGE_SPANISH_MEXICAN:
+	     case LANGUAGE_SPANISH_MODERN:
+	     case LANGUAGE_SPANISH_GUATEMALA:
+	     case LANGUAGE_SPANISH_COSTARICA:
+	     case LANGUAGE_SPANISH_PANAMA:
+	     case LANGUAGE_SPANISH_DOMINICAN_REPUBLIC:
+	     case LANGUAGE_SPANISH_VENEZUELA:
+	     case LANGUAGE_SPANISH_COLOMBIA:
+	     case LANGUAGE_SPANISH_PERU:
+	     case LANGUAGE_SPANISH_ARGENTINA:
+	     case LANGUAGE_SPANISH_ECUADOR:
+	     case LANGUAGE_SPANISH_CHILE:
+	     case LANGUAGE_SPANISH_URUGUAY:
+	     case LANGUAGE_SPANISH_PARAGUAY:
+	     case LANGUAGE_SPANISH_BOLIVIA:
+	          return "34";
+
+	     case LANGUAGE_SWEDISH:
+	          return "46";
+
+	     case LANGUAGE_POLISH:
+	          return "48";
+	     case LANGUAGE_CZECH:
+	          return "42";
+	     case LANGUAGE_SLOVENIAN:
+	          return "50";
+	     case LANGUAGE_WELSH:
+	          return "53";
+	     case LANGUAGE_HUNGARIAN:
+	          return "36";
+	     case LANGUAGE_RUSSIAN:
+	          return "07";
+	     case LANGUAGE_SLOVAK:
+	          return "43";
+	     case LANGUAGE_GREEK:
+	          return "30";
+	     case LANGUAGE_TURKISH:
+	          return "90";
+
+	     case LANGUAGE_CHINESE_SIMPLIFIED:
+	          return "86";
+	     case LANGUAGE_CHINESE_TRADITIONAL:
+	          return "88";
+	     case LANGUAGE_JAPANESE:
+	          return "81";
+	     case LANGUAGE_KOREAN:
+	     case LANGUAGE_KOREAN_JOHAB:
+	          return "82";
+	     case LANGUAGE_THAI:
+			return "66";
+	     case LANGUAGE_HINDI:
+	          return "91";
+	     case LANGUAGE_TAMIL:
+	          return "92";
+	     case LANGUAGE_GUJARATI:
+	          return "94";
+
+	     case LANGUAGE_ARABIC:
+	     case LANGUAGE_ARABIC_IRAQ:
+	     case LANGUAGE_ARABIC_EGYPT:
+	     case LANGUAGE_ARABIC_LIBYA:
+	     case LANGUAGE_ARABIC_ALGERIA:
+	     case LANGUAGE_ARABIC_MOROCCO:
+	     case LANGUAGE_ARABIC_TUNISIA:
+	     case LANGUAGE_ARABIC_OMAN:
+	     case LANGUAGE_ARABIC_YEMEN:
+	     case LANGUAGE_ARABIC_SYRIA:
+	     case LANGUAGE_ARABIC_JORDAN:
+	     case LANGUAGE_ARABIC_LEBANON:
+	     case LANGUAGE_ARABIC_KUWAIT:
+	     case LANGUAGE_ARABIC_UAE:
+	     case LANGUAGE_ARABIC_BAHRAIN:
+	     case LANGUAGE_ARABIC_QATAR:
+	          return "96";
+
+	     case LANGUAGE_HEBREW:
+	          return "97";
+
+	     case LANGUAGE_CATALAN:
+	          return "37";
+
+	     case LANGUAGE_NORTHERNSOTHO:
+	          return "26";
+
+	     case LANGUAGE_AFRIKAANS:
+	          return "27";
+
+	     case LANGUAGE_ZULU:
+	          return "28";
+
+	     default:
+	          return "99";
+	}
+}
+
 /*************************************************************************
 |*
 |*	  RscTypCont :: WriteRc
@@ -795,7 +966,31 @@
 		{
 			UniString aUniFileName( pSysEntry->aFileName, RTL_TEXTENCODING_ASCII_US );
 			DirEntry aFullName( aUniFileName );
-			aFullName.Find( UniString( GetSysSearchPath(), RTL_TEXTENCODING_ASCII_US ) );
+
+			if (!aFullName.Find( UniString( GetSysSearchPath(), RTL_TEXTENCODING_ASCII_US ) )
+				&& (aUniFileName.SearchAscii(".bmp") != STRING_NOTFOUND))
+			{
+				// Ok, if that didn't get found, lets try adding the language # before the file
+				// extension if its a bitmap.  Sometimes the file will be specified as "un_op.bmp"
+				// when what we really want is "un_op01.bmp" or "un_op33.bmp"
+				sal_Char *pLang = RscGetLang (nLangTypeId);
+				if (!pLang)
+					pLang = RscGetLang (nDfltLangTypeId);
+				if (!pLang)
+					pLang = "";
+				ByteString aTmp (pLang);
+				aTmp.Append (".bmp");
+				UniString aNewExt (aTmp, RTL_TEXTENCODING_ASCII_US);
+
+				aUniFileName.SearchAndReplaceAscii (".bmp", aNewExt);
+				aFullName.SetName (aUniFileName);
+				if (!aFullName.Find( UniString( GetSysSearchPath(), RTL_TEXTENCODING_ASCII_US ) ))
+				{
+					aUniFileName.AssignAscii (pSysEntry->aFileName.GetBuffer());
+					aFullName.SetName (aUniFileName);
+				}
+			}
+
 			pSysEntry->aFileName = ByteString( aFullName.GetFull(), RTL_TEXTENCODING_ASCII_US );
 #if OSL_DEBUG_LEVEL > 1
             fprintf( stderr, "found sys dep file %s\n", pSysEntry->aFileName.GetBuffer() );
--- rsc/source/res/rscmgr.cxx.default-english	2004-12-07 21:39:08.071066736 -0500
+++ rsc/source/res/rscmgr.cxx	2004-12-07 21:48:48.271862808 -0500
@@ -303,6 +303,11 @@
     LanguageType aOldDefLanguage = LANGUAGE_DONTKNOW;
     if( pTC && rInst.IsInst() )
     {
+        /* Change default language to English (instead of German) so that 
+         * incomplete translations aren't smattered with German.
+         */
+        pTC->ChangeDefLanguage( LANGUAGE_ENGLISH_US );
+
         /*
          *  if language is different than german and rInst
          *  is of type Accelerator then tweak the default
--- rsc/source/res/rscarray.cxx.default-english	2004-12-07 21:49:22.321686448 -0500
+++ rsc/source/res/rscarray.cxx	2004-12-07 21:51:26.103868696 -0500
@@ -621,7 +621,11 @@
 	{
         pNode = pClassData->pNode->Search( *pWriteTypeValue );
 		if( !pNode && *pWriteTypeValue != *pWriteDfltTypeValue )
+          {
 		    pNode = pClassData->pNode->Search( *pWriteDfltTypeValue );
+              if( !pNode && *pWriteTypeValue != *pWriteDfltTypeValue )
+		        pNode = pClassData->pNode->Search( LANGUAGE_ENGLISH );
+          }
 	}
 
     if( pNode )
--- solenv/inc/postset.mk.english-default	2004-12-08 15:21:33.000000000 -0500
+++ solenv/inc/postset.mk	2004-12-08 15:21:56.000000000 -0500
@@ -73,7 +73,7 @@
 rescharset_49=$(deut$(LANG_GUI))
 RCLANGFLAGS_49+= -d GERMAN
 iso_49=de
-defaultlangext=49
+defaultlangext=01
 #.ENDIF
 
 .IF "$(RES_ENUS)"!="" || "$(give_me_all_languages)"!=""
@@ -88,7 +88,7 @@
 rescharset_01=$(enus$(LANG_GUI))
 RCLANGFLAGS_01+= -d ENGLISH
 iso_01=en-US
-#defaultlangext=01
+defaultlangext=01
 
 .IF "$(RES_ITAL)"!="" || "$(give_me_all_languages)"!=""
 alllangext+=39
