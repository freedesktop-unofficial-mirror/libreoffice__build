Index: ucb/source/inc/regexpmap.hxx
===================================================================
RCS file: /cvs/ucb/ucb/source/inc/regexpmap.hxx,v
retrieving revision 1.1
retrieving revision 1.2
diff -u -p -u -r1.1 -r1.2
--- ucb/source/inc/regexpmap.hxx	16 Oct 2000 14:53:07 -0000	1.1
+++ ucb/source/inc/regexpmap.hxx	1 Dec 2003 15:55:41 -0000	1.2
@@ -102,8 +102,8 @@ template< typename Val > class RegexpMap
 template< typename Val >
 class RegexpMapConstIter
 {
-	friend RegexpMap< Val >; // to access m_pImpl, ctor
-	friend RegexpMapIter< Val >; // to access m_pImpl, ctor
+	friend class RegexpMap< Val >; // to access m_pImpl, ctor
+	friend class RegexpMapIter< Val >; // to access m_pImpl, ctor
 
 public:
 	RegexpMapConstIter();
@@ -135,7 +135,7 @@ private:
 template< typename Val >
 class RegexpMapIter: public RegexpMapConstIter< Val >
 {
-	friend RegexpMap< Val >; // to access ctor
+	friend class RegexpMap< Val >; // to access ctor
 
 public:
 	RegexpMapIter() {}
Index: ucb/source/inc/regexpmap.tpt
===================================================================
RCS file: /cvs/ucb/ucb/source/inc/regexpmap.tpt,v
retrieving revision 1.1
retrieving revision 1.3
diff -u -p -u -r1.1 -r1.3
--- ucb/source/inc/regexpmap.tpt	16 Oct 2000 14:53:07 -0000	1.1
+++ ucb/source/inc/regexpmap.tpt	4 Feb 2004 12:22:44 -0000	1.3
@@ -112,8 +112,9 @@ class RegexpMapIterImpl
 {
 public:
 	typedef RegexpMapImpl< Val > MapImpl;
-	typedef List< Val >::iterator ListIterator;
-		// Solaris needs these for the ctor...
+	typedef typename List< Val >::iterator ListIterator;
+
+	// Solaris needs these for the ctor...
 
 	inline RegexpMapIterImpl();
 
@@ -128,7 +129,7 @@ public:
 
 	int getList() const { return m_nList; }
 
-	List< Val >::iterator const & getIndex() const { return m_aIndex; }
+	typename List< Val >::iterator const & getIndex() const { return m_aIndex; }
 
 	void next();
 
@@ -136,7 +137,7 @@ public:
 
 private:
 	mutable RegexpMapEntry< Val > m_aEntry;
-	List< Val >::iterator m_aIndex;
+	typename List< Val >::iterator m_aIndex;
 	RegexpMapImpl< Val > * m_pMap;
 	int m_nList;
 	mutable bool m_bEntrySet;
@@ -452,8 +453,8 @@ bool RegexpMap< Val >::add(rtl::OUString
 	{
 		List< Val > & rTheList = m_pImpl->m_aList[aRegexp.getKind()];
 
-		List< Val >::iterator aEnd(rTheList.end());
-		for (List< Val >::iterator aIt(rTheList.begin()); aIt != aEnd; ++aIt)
+		typename List< Val >::iterator aEnd(rTheList.end());
+		for (typename List< Val >::iterator aIt(rTheList.begin()); aIt != aEnd; ++aIt)
 			if (aIt->m_aRegexp == aRegexp)
 				if (bOverwrite)
 				{
@@ -474,7 +475,7 @@ bool RegexpMap< Val >::add(rtl::OUString
 
 //============================================================================
 template< typename Val >
-RegexpMap< Val >::iterator RegexpMap< Val >::find(rtl::OUString const & rKey,
+typename RegexpMap< Val >::iterator RegexpMap< Val >::find(rtl::OUString const & rKey,
 												  rtl::OUString * pReverse)
 {
 	Regexp aRegexp(Regexp::parse(rKey));
@@ -492,8 +493,8 @@ RegexpMap< Val >::iterator RegexpMap< Va
 	{
 		List< Val > & rTheList = m_pImpl->m_aList[aRegexp.getKind()];
 
-		List< Val > ::iterator aEnd(rTheList.end());
-		for (List< Val >::iterator aIt(rTheList.begin()); aIt != aEnd; ++aIt)
+		typename List< Val > ::iterator aEnd(rTheList.end());
+		for (typename List< Val >::iterator aIt(rTheList.begin()); aIt != aEnd; ++aIt)
 			if (aIt->m_aRegexp == aRegexp)
 				return RegexpMapIter< Val >(new RegexpMapIterImpl< Val >(
 					                                m_pImpl,
@@ -523,14 +524,14 @@ void RegexpMap< Val >::erase(iterator co
 
 //============================================================================
 template< typename Val >
-RegexpMap< Val >::iterator RegexpMap< Val >::begin()
+typename RegexpMap< Val >::iterator RegexpMap< Val >::begin()
 {
 	return RegexpMapIter< Val >(new RegexpMapIterImpl< Val >(m_pImpl, true));
 }
 
 //============================================================================
 template< typename Val >
-RegexpMap< Val >::const_iterator RegexpMap< Val >::begin() const
+typename RegexpMap< Val >::const_iterator RegexpMap< Val >::begin() const
 {
 	return RegexpMapConstIter< Val >(new RegexpMapIterImpl< Val >(m_pImpl,
 																  true));
@@ -538,14 +539,14 @@ RegexpMap< Val >::const_iterator RegexpM
 
 //============================================================================
 template< typename Val >
-RegexpMap< Val >::iterator RegexpMap< Val >::end()
+typename RegexpMap< Val >::iterator RegexpMap< Val >::end()
 {
 	return RegexpMapIter< Val >(new RegexpMapIterImpl< Val >(m_pImpl, false));
 }
 
 //============================================================================
 template< typename Val >
-RegexpMap< Val >::const_iterator RegexpMap< Val >::end() const
+typename RegexpMap< Val >::const_iterator RegexpMap< Val >::end() const
 {
 	return RegexpMapConstIter< Val >(new RegexpMapIterImpl< Val >(m_pImpl,
 																  false));
@@ -563,7 +564,7 @@ bool RegexpMap< Val >::empty() const
 
 //============================================================================
 template< typename Val >
-RegexpMap< Val >::size_type RegexpMap< Val >::size() const
+typename RegexpMap< Val >::size_type RegexpMap< Val >::size() const
 {
 	return (m_pImpl->m_pDefault ? 1 : 0)
 		       + m_pImpl->m_aList[Regexp::KIND_PREFIX].size()
@@ -581,8 +582,8 @@ Val const * RegexpMap< Val >::map(rtl::O
 	{
 		List< Val > const & rTheList = m_pImpl->m_aList[n];
 
-		List< Val >::const_iterator aEnd(rTheList.end());
-		for (List< Val >::const_iterator aIt(rTheList.begin()); aIt != aEnd;
+		typename List< Val >::const_iterator aEnd(rTheList.end());
+		for (typename List< Val >::const_iterator aIt(rTheList.begin()); aIt != aEnd;
 			 ++aIt)
 			if (aIt->m_aRegexp.matches(rString, pTranslation, pTranslated))
 				return &aIt->m_aValue;
