diff -u -3 -p -r1.4 kdeint.hxx
--- vcl/unx/inc/kdeint.hxx	10 Jun 2002 17:27:27 -0000	1.4
+++ vcl/unx/inc/kdeint.hxx	22 Oct 2003 17:14:11 -0000
@@ -74,6 +74,8 @@ class KDEIntegrator : public DtIntegrato
 private:
 	KDEIntegrator( SalFrame* );
 
+	Font parseKDEFont( const ByteString& rLine );
+
 public:
 	virtual ~KDEIntegrator();

diff -urd vcl/unx/source/gdi.orig/kdeint.cxx vcl/unx/source/gdi/kdeint.cxx
--- vcl/unx/source/gdi.orig/kdeint.cxx	2004-07-05 13:23:52.000000000 +0200
+++ vcl/unx/source/gdi/kdeint.cxx	2004-07-05 11:12:52.000000000 +0200
@@ -82,13 +82,69 @@
 
 static char* pTryFiles[] =
   {
-	"/usr/share/config/kdeglobals",
-	"/opt/kde/share/config/kdeglobals",
-	"~/.kde2/share/config/kdeglobals",
+	"/etc/kde3/system.kdeglobals",
+	"/etc/kde2/system.kdeglobals",
+	"$KDEDIR/share/config/kdeglobals",
 	"~/.kde/share/config/kdeglobals",
-	"~/.kderc"
+	"$KDEHOME/share/config/kdeglobals"
   };
 
+Font KDEIntegrator::parseKDEFont( const ByteString& rLine )
+{
+    rtl_TextEncoding aEncoding = osl_getThreadTextEncoding();
+
+	Font aFont;
+    xub_StrLen nIndex = 0;
+
+    ByteString aToken = rLine.GetToken( 0, ',', nIndex );
+
+    if( aToken.Len() ) {
+    	aFont.SetName( String( aToken, osl_getThreadTextEncoding() ) );
+    }
+
+    aToken = rLine.GetToken( 0, ',', nIndex ); // Point size
+	int aHeight = aToken.ToInt32();
+    if(aHeight < 1) {
+	    aToken = rLine.GetToken( 1, ',', nIndex ); // Pixel size
+		aHeight = aToken.ToInt32();
+		if(aHeight < 1) {
+			aHeight = 12; // Default to 12 pt
+		}
+		else {
+			// Assume a 96 dpi display instead of trying to get display dpi
+			aHeight = aHeight * 96 / 100;
+		}
+	}
+	
+#if OSL_DEBUG_LEVEL > 1
+		fprintf( stderr, "using font %s %d\n", ByteString( aFont.GetName(), aEncoding ).GetBuffer() , aHeight );
+#endif
+    aFont.SetHeight( aHeight );
+
+    aToken = rLine.GetToken( 2, ',', nIndex );
+
+    if( aToken.Len() ) {
+        int nWeight = aToken.ToInt32();
+        if( nWeight < 30) {
+            aFont.SetWeight( WEIGHT_LIGHT );
+        }
+        else if( nWeight > 70) {
+            aFont.SetWeight( WEIGHT_BOLD );
+        }
+    }
+
+    aToken = rLine.GetToken( 0, ',', nIndex );
+    if( aToken.Len() ) {
+        int nItalic = aToken.ToInt32();
+        if( nItalic == 1) {
+            aFont.SetItalic( ITALIC_NORMAL );
+        }
+    }
+
+    return aFont;
+
+}
+
 void KDEIntegrator::GetSystemLook( AllSettings& rSettings )
 {
     rtl_TextEncoding aEncoding = osl_getThreadTextEncoding();
@@ -101,6 +157,16 @@
 			aFile = aHomeDir;
 			aFile += String( pTryFiles[i]+1, aEncoding );
 		  }
+		else if( pTryFiles[i][0] == '$' )
+		{
+			char *p, *q, *r;
+			for ( p = q = &(pTryFiles[i][1]); *q >= 'A' && *q <= 'Z'; q++ );
+			r = getenv( ByteString( p, q - p ).GetBuffer() );
+			if( !r )
+				continue;
+			aFile = String( r, aEncoding );
+			aFile += String( q, aEncoding );
+		}
 		else
 		  aFile = String( ByteString( pTryFiles[i] ), aEncoding );
 
@@ -224,24 +290,39 @@
 										  aLine.GetToken( 1, ',' ).ToInt32(),
 										  aLine.GetToken( 2, ',' ).ToInt32() ) );
 			
-			aLine = aConfig.ReadKey( "font" );
-			if( aLine.Len() )
-			  {
-				Font aFont = aStyleSettings.GetAppFont();
-				aFont.SetName( String( aLine, gsl_getSystemTextEncoding() ) );
-				
-				aStyleSettings.SetAppFont( aFont );
-				aStyleSettings.SetHelpFont( aFont );
-				aStyleSettings.SetMenuFont( aFont );
-				aStyleSettings.SetToolFont( aFont );
-				aStyleSettings.SetLabelFont( aFont );
-				aStyleSettings.SetInfoFont( aFont );
-				aStyleSettings.SetRadioCheckFont( aFont );
-				aStyleSettings.SetPushButtonFont( aFont );
-				aStyleSettings.SetFieldFont( aFont );
-				aStyleSettings.SetIconFont( aFont );
-				aStyleSettings.SetGroupFont( aFont );
-			  }
+			if( aStyleSettings.GetUseSystemUIFonts() )
+			{
+				aLine = aConfig.ReadKey( "font" );
+				if( aLine.Len() )
+				{
+					Font aFont = parseKDEFont(aLine);
+
+					aStyleSettings.SetAppFont( aFont );
+					aStyleSettings.SetHelpFont( aFont );
+					aStyleSettings.SetLabelFont( aFont );
+					aStyleSettings.SetInfoFont( aFont );
+					aStyleSettings.SetRadioCheckFont( aFont );
+					aStyleSettings.SetPushButtonFont( aFont );
+					aStyleSettings.SetFieldFont( aFont );
+					aStyleSettings.SetIconFont( aFont );
+					aStyleSettings.SetGroupFont( aFont );
+					
+					// We want the tool font to be slightly smaller,
+					// otherwise the ruler gets horribly bloated
+					long nHeight = aFont.GetHeight();
+					nHeight = ( nHeight + 8 ) / 2;
+					aFont.SetHeight( nHeight );
+                    aStyleSettings.SetToolFont( aFont );
+				}
+
+				aLine = aConfig.ReadKey( "menuFont" );
+				if( aLine.Len() )
+				{
+					Font aFont = parseKDEFont(aLine);
+
+					aStyleSettings.SetMenuFont( aFont );
+				}
+			}
 		  }
 		
 		rSettings.SetStyleSettings( aStyleSettings );
