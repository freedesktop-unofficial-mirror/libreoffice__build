Index: psprint/source/fontmanager/makefile.mk
===================================================================
RCS file: /cvs/gsl/psprint/source/fontmanager/makefile.mk,v
retrieving revision 1.4
diff -u -p -u -r1.4 makefile.mk
--- psprint/source/fontmanager/makefile.mk	20 Aug 2002 15:00:13 -0000	1.4
+++ psprint/source/fontmanager/makefile.mk	29 May 2003 15:13:30 -0000
@@ -78,6 +78,7 @@ SLOFILES=\
 	$(SLO)$/fontmanager.obj		\
 	$(SLO)$/fontcache.obj		\
 	$(SLO)$/parseAFM.obj
+CFLAGS+=`pkg-config --cflags fontconfig` -Wall
 
 .IF "$(OS)$(CPU)"=="SOLARISI"
 NOOPTFILES=$(SLO)$/fontmanager.obj
Index: psprint/util/makefile.mk
===================================================================
RCS file: /cvs/gsl/psprint/util/makefile.mk,v
retrieving revision 1.9
diff -u -p -u -r1.9 makefile.mk
--- psprint/util/makefile.mk	15 Apr 2003 14:34:44 -0000	1.9
+++ psprint/util/makefile.mk	29 May 2003 15:19:23 -0000
@@ -97,7 +97,7 @@ SHL1STDLIBS=$(UNOTOOLSLIB)		\
 			$(TOOLSLIB) 		\
             $(JVMACCESSLIB)		\
 			$(SALLIB)			\
-			-lX11
+			-lX11 `pkg-config --libs fontconfig`
 
 SHL1DEF=	$(MISC)$/$(SHL1TARGET).def
 
Index: vcl/unx/source/gdi/salgdi3.cxx
===================================================================
RCS file: /cvs/gsl/vcl/unx/source/gdi/salgdi3.cxx,v
retrieving revision 1.105
diff -u -p -u -r1.105 salgdi3.cxx
--- vcl/unx/source/gdi/salgdi3.cxx	30 Jun 2003 14:32:24 -0000	1.105
+++ vcl/unx/source/gdi/salgdi3.cxx	17 Sep 2003 15:15:27 -0000
@@ -1773,6 +1773,7 @@ void SalGraphics::GetDevFontList( ImplDe
     else
 #endif
     {
+#ifdef NASTY_X_FONTS
         XlfdStorage* pFonts = _GetDisplay()->GetXlfdList();
 
         for ( int nIdx = 0; nIdx < pFonts->GetCount(); nIdx++ )
@@ -1785,6 +1786,7 @@ void SalGraphics::GetDevFontList( ImplDe
             pFontData->mbEmbeddable     = FALSE;
             pList->Add( pFontData );
         }
+#endif
 
 #ifdef USE_BUILTIN_RASTERIZER
         aX11GlyphPeer.SetDisplay( maGraphicsData.GetXDisplay(),
@@ -1833,6 +1835,7 @@ void SalGraphics::GetDevFontList( ImplDe
 
 void SalGraphics::GetDevFontSubstList( OutputDevice* pOutDev )
 {
+#ifndef FONTCONFIG_FONTS
 #ifndef _USE_PRINT_EXTENSION_
     if( maGraphicsData.m_pPrinterGfx != NULL )
     {
@@ -1843,6 +1846,7 @@ void SalGraphics::GetDevFontSubstList( O
                 pOutDev->ImplAddDevFontSubstitute( it->first, it->second, FONT_SUBSTITUTE_ALWAYS );
         }
     }
+#endif
 #endif
 }
 
Index: psprint/inc/psprint/fontmanager.hxx
===================================================================
RCS file: /cvs/gsl/psprint/inc/psprint/fontmanager.hxx,v
retrieving revision 1.15
diff -u -p -u -r1.15 fontmanager.hxx
--- psprint/inc/psprint/fontmanager.hxx	30 Jun 2003 14:25:57 -0000	1.15
+++ psprint/inc/psprint/fontmanager.hxx	17 Sep 2003 15:16:06 -0000
@@ -81,6 +81,16 @@
 #define ATOM_FAMILYNAME                     2
 #define ATOM_PSNAME                         3
 
+// To toggle fontconfig usage ...
+#define FONTCONFIG_FONTS
+
+#ifdef FONTCONFIG_FONTS
+extern "C" {
+  struct _FcFontSet;
+  struct _FcPattern;
+};
+#endif
+
 /*
  *  some words on metrics: every length returned by PrintFontManager and
  *  friends are PostScript afm style, that is they are 1/1000 font height
@@ -300,7 +310,9 @@ class PrintFontManager
         int                 m_nDirectory;       // atom containing system dependent path
         rtl::OString      m_aFontFile;        // relative to directory
         rtl::OString      m_aMetricFile;      // dito
+#ifndef FONTCONFIG_FONTS
         rtl::OString      m_aXLFD;            // mainly for administration, contains the XLFD from fonts.dir
+#endif
 
         /* note: m_aFontFile and Metric file are not atoms
            because they should be fairly unique */
@@ -314,7 +326,9 @@ class PrintFontManager
     {
         int					    m_nDirectory;       // atom containing system dependent path
         rtl::OString          m_aFontFile;        // relative to directory
+#ifndef FONTCONFIG_FONTS
         rtl::OString          m_aXLFD;            // mainly for administration, contains the XLFD from fonts.dir
+#endif
         int                     m_nCollectionEntry; // -1 for regular fonts, 0 to ... for fonts stemming from collections
         unsigned int           m_nTypeFlags;		// from TrueType file; only known use is for copyright flags
 
@@ -339,12 +353,16 @@ class PrintFontManager
     std::hash_map< fontID, PrintFont* >       m_aFonts;
     std::hash_map< int, family::type >        m_aFamilyTypes;
     std::list< rtl::OUString >              m_aPrinterDrivers;
+#ifndef FONTCONFIG_FONTS
     std::list< rtl::OString >               m_aFontDirectories;
     std::list< int >							m_aPrivateFontDirectories;
     utl::MultiAtomProvider*                   m_pAtoms;
     // for speeding up findFontFileID
     std::hash_map< rtl::OString, std::set< fontID >, rtl::OStringHash >
-    											m_aFontFileToFontID;
+					      m_aFontFileToFontID;
+#else
+    utl::MultiAtomProvider*                   m_pAtoms;
+#endif
 
     std::hash_map< rtl::OString, int, rtl::OStringHash >
     m_aDirToAtom;
@@ -363,17 +381,39 @@ class PrintFontManager
     rtl::OString getAfmFile( PrintFont* pFont ) const;
     rtl::OString getFontFile( PrintFont* pFont ) const;
 
+#ifndef FONTCONFIG_FONTS
     void getFontAttributesFromXLFD( PrintFont* pFont, const ByteString& rXLFD ) const;
+#endif
 
     bool analyzeFontFile( int nDirID, const rtl::OString& rFileName, bool bReadFile, const std::list< rtl::OString >& rXLFDs, std::list< PrintFont* >& rNewFonts ) const;
     rtl::OUString convertTrueTypeName( void* pNameRecord ) const; // actually a NameRecord* formt font subsetting code
     void analyzeTrueTypeFamilyName( void* pTTFont, std::list< rtl::OUString >& rnames ) const; // actually a TrueTypeFont* from font subsetting code
     bool analyzeTrueTypeFile( PrintFont* pFont ) const;
+
+#ifndef FONTCONFIG_FONTS
     // finds the FIRST id for this font file; there may be more
     // for TrueType collections
     fontID findFontFileID( int nDirID, const rtl::OString& rFile ) const;
+#endif
     fontID findFontBuiltinID( int nPSNameAtom ) const;
 
+#ifdef FONTCONFIG_FONTS
+    void getFontAttributesFromFcPattern( PrintFont* pFont, const struct _FcPattern *fc_font ) const;
+    void addFcSystemFont    (struct _FcPattern *fc_pattern);
+    void addFcSystemFontSet (struct _FcFontSet *fc_set);
+    int  addFontFile( const ::rtl::OString& rFilePath, const struct _FcPattern *fc_font, bool bMergeBuiltin );
+#endif
+    void ensureAnalysed( PrintFont* pFont ) const
+    {
+      if ( pFont && pFont->m_nAscend == 0 && pFont->m_nDescend == 0 )
+	{
+	  if (pFont->m_eType == fonttype::TrueType )
+	    analyzeTrueTypeFile( pFont );
+	  else if (pFont->m_eType == fonttype::Type1 )
+            pFont->readAfmMetrics( getAfmFile( pFont ), m_pAtoms );
+	}
+    }
+
     family::type matchFamilyName( const rtl::OUString& rFamily ) const;
 
     PrintFont* getFont( fontID nID ) const
@@ -382,14 +422,18 @@ class PrintFontManager
         it = m_aFonts.find( nID );
         return it == m_aFonts.end() ? NULL : it->second;
     }
+#ifndef FONTCONFIG_FONTS
     ByteString getXLFD( PrintFont* pFont ) const;
+#endif
     void fillPrintFontInfo( PrintFont* pFont, FastPrintFontInfo& rInfo ) const;
     void fillPrintFontInfo( PrintFont* pFont, PrintFontInfo& rInfo ) const;
 
     const rtl::OString& getDirectory( int nAtom ) const;
     int getDirectoryAtom( const rtl::OString& rDirectory, bool bCreate = false );
 
+#ifndef FONTCONFIG_FONTS
     void getServerDirectories(); // get font server directories on e.g. redhat
+#endif
 
     PrintFontManager();
     ~PrintFontManager();
@@ -512,11 +556,13 @@ public:
     void hasVerticalSubstitutions( fontID nFontID, const sal_Unicode* pCharacters,
         int nCharacters, bool* pHasSubst ) const;
 
+#ifndef FONTCONFIG_FONTS
     // get the XLFD for a font that originated from the X fontpath
     // note: this may not be the original line that was in the fonts.dir
     // returns a string for every font, but only TrueType and Type1
     // fonts originated from the X font path, so check for the font type
     rtl::OUString getFontXLFD( fontID nFontID ) const;
+#endif
 
     // get a specific fonts metrics
 
@@ -582,6 +628,7 @@ public:
 
     // font administration functions
 
+#ifndef FONTCONFIG_FONTS
     // for importFonts to provide the user feedback
     class ImportFontCallback
     {
@@ -614,6 +661,7 @@ public:
     bool removeFonts( const std::list< fontID >& rFonts );
 
     bool isPrivateFontFile( fontID ) const;
+#endif
 
     // returns false if there were not any
     bool getAlternativeFamilyNames( fontID nFont, std::list< rtl::OUString >& rNames ) const;
Index: psprint/source/fontmanager/fontmanager.cxx
===================================================================
RCS file: /cvs/gsl/psprint/source/fontmanager/fontmanager.cxx,v
retrieving revision 1.39
diff -u -p -u -r1.39 fontmanager.cxx
--- psprint/source/fontmanager/fontmanager.cxx	1 Jul 2003 14:52:08 -0000	1.39
+++ psprint/source/fontmanager/fontmanager.cxx	17 Sep 2003 15:16:39 -0000
@@ -140,6 +140,9 @@
 
 #include <adobeenc.tab> // get encoding table for AFM metrics
 
+#include <stdio.h>
+#include <fontconfig/fontconfig.h>
+
 #define PRINTER_METRICDIR "fontmetric"
 
 using namespace utl;
@@ -159,6 +162,7 @@ inline sal_uInt16 getUInt16BE( const sal
     return nRet;
 }
 
+#ifndef FONTCONFIG_FONTS
 static italic::type parseItalic( const ByteString& rItalic )
 {
     italic::type eItalic = italic::Unknown;
@@ -170,6 +174,7 @@ static italic::type parseItalic( const B
         eItalic = italic::Upright;
     return eItalic;
 }
+#endif
 
 // -------------------------------------------------------------------------
 
@@ -210,6 +215,7 @@ static weight::type parseWeight( const B
 
 // -------------------------------------------------------------------------
 
+#ifndef FONTCONFIG_FONTS
 static width::type parseWidth( const ByteString& rWidth )
 {
     width::type eWidth = width::Unknown;
@@ -237,6 +243,7 @@ static width::type parseWidth( const Byt
 
     return eWidth;
 }
+#endif
 
 // -------------------------------------------------------------------------
 
@@ -920,6 +927,138 @@ int PrintFontManager::getDirectoryAtom( 
 }
 
 // -------------------------------------------------------------------------
+#ifdef FONTCONFIG_FONTS
+int PrintFontManager::addFontFile( const OString& rFontPath,
+				   const FcPattern *fc_font,
+				   bool bMergeBuiltin)
+{
+    sal_Int32 idx;
+    ::std::list< PrintFontManager::PrintFont* > aNewFonts;
+
+    idx = rFontPath.lastIndexOf ('/');
+    if (idx < 0)
+      {
+	fprintf (stderr, "Invalid path\n");
+	return;
+      }
+    // Split the directory
+    OString aDir (rFontPath, idx);
+    // And the filename
+    OString aFontFile( rFontPath + idx + 1, rFontPath.getLength() - idx - 1);
+    // And the extension
+    ByteString aExt( aFontFile.copy( aFontFile.lastIndexOf( '.' )+1 ) );
+
+    int nDirID = getDirectoryAtom( aDir, true );
+
+    if( m_pFontCache->getFontCacheFile( nDirID, aDir, aFontFile, aNewFonts ) )
+	{
+#ifdef DEBUG
+		fprintf( stderr, "Hit cache for '%s'", (sal_Char *) rFontPath );
+#endif
+		/* got it from the cache */ ;
+	}
+    else if( aExt.EqualsIgnoreCaseAscii( "pfb" ) || aExt.EqualsIgnoreCaseAscii( "pfa" ) )
+    {
+        // check for corresponding afm metric
+        // first look for an adjacent file
+
+        ByteString aName( aFontFile );
+        aName.Erase( aName.Len()-4 );
+        aName.Append( ".afm" );
+        
+        ByteString aFilePath( aDir );
+        aFilePath.Append( '/' );
+        aFilePath.Append( aName );
+        
+        ByteString aAfmFile;
+        if( access( aFilePath.GetBuffer(), F_OK ) )
+        {
+            // try in subdirectory afm instead
+            aFilePath = aDir;
+            aFilePath.Append( "/afm/" );
+            aFilePath.Append( aName );
+            
+            if( ! access( aFilePath.GetBuffer(), F_OK ) )
+            {
+                aAfmFile = "afm/";
+                aAfmFile += aName;
+            }
+        }
+        else
+            aAfmFile = aName;
+
+        if( aAfmFile.Len() )
+        {
+            Type1FontFile* pFont = new Type1FontFile();
+            pFont->m_nDirectory     = nDirID;
+
+            pFont->m_aFontFile      = aFontFile;
+            pFont->m_aMetricFile    = aAfmFile;
+
+			if (fc_font)
+				getFontAttributesFromFcPattern( pFont, fc_font );
+            else if( ! pFont->readAfmMetrics( getAfmFile( pFont ), m_pAtoms ) )
+            {
+                delete pFont;
+                pFont = NULL;
+            }
+            if( pFont )
+                aNewFonts.push_back( pFont );
+        }
+    }
+    else if( aExt.EqualsIgnoreCaseAscii( "afm" ) )
+    {
+        ByteString aFilePath( aDir );
+        aFilePath.Append( '/' );
+        aFilePath.Append( ByteString( aFontFile ) );
+        BuiltinFont* pFont = new BuiltinFont();
+        pFont->m_nDirectory		= nDirID;
+        pFont->m_aMetricFile	= aFontFile;
+        if( pFont->readAfmMetrics( aFilePath, m_pAtoms ) )
+            aNewFonts.push_back( pFont );
+        else
+            delete pFont;
+    }
+    else if( aExt.EqualsIgnoreCaseAscii( "ttf" ) )
+    {
+        TrueTypeFontFile* pFont     = new TrueTypeFontFile();
+        pFont->m_nDirectory         = nDirID;
+        pFont->m_aFontFile          = aFontFile;
+        pFont->m_nCollectionEntry   = -1;
+
+	getFontAttributesFromFcPattern( pFont, fc_font );
+        // need to read the font anyway to get aliases
+        if( ! analyzeTrueTypeFile( pFont ) )
+        {
+            delete pFont;
+            pFont = NULL;
+        }
+        else
+            aNewFonts.push_back( pFont );
+    }
+#warning Disabled ttc parsing, do we need to use the 'index' property for 'nCollectionEntry' ?
+
+    for( ::std::list< PrintFont* >::iterator it = aNewFonts.begin(); it != aNewFonts.end(); ++it )
+	{
+		if (!bMergeBuiltin ||
+			!findFontBuiltinID( (*it)->m_nPSName ) )
+		{
+			fontID aFont = m_nNextFontID++;
+			m_aFonts[ aFont ] = *it;
+		}
+		else
+			delete (*it);
+	}
+}
+
+int PrintFontManager::addFontFile( const ::rtl::OString& rFileName, int nFaceNum )
+{
+       // fprintf( stderr, "addFontFile ('%s')\n", (const sal_Char *) rFileName );
+	// Purely for salgdi3 usage ...
+	return addFontFile( rFileName, NULL, false );
+}
+
+#else
 
 int PrintFontManager::addFontFile( const ::rtl::OString& rFileName, int nFaceNum )
 {
@@ -1088,6 +1227,7 @@ bool PrintFontManager::analyzeFontFile( 
     }
     return ! rNewFonts.empty();
 }
+#endif
 
 // -------------------------------------------------------------------------
 
@@ -1106,6 +1246,7 @@ fontID PrintFontManager::findFontBuiltin
 
 // -------------------------------------------------------------------------
 
+#ifndef FONTCONFIG_FONTS
 fontID PrintFontManager::findFontFileID( int nDirID, const OString& rFontFile ) const
 {
     fontID nID = 0;
@@ -1292,6 +1433,69 @@ ByteString PrintFontManager::getXLFD( Pr
 
     return aXLFD;
 }
+#else /* FONTCONFIG_FONTS */
+
+void PrintFontManager::getFontAttributesFromFcPattern( PrintFont* pFont, const FcPattern *fc_font ) const
+ {
+    FcChar8 *fc_str;
+    int      fc_int;
+
+    if (!FcPatternGetString (fc_font, FC_FAMILY, 0, &fc_str) && fc_str)
+	pFont->m_nFamilyName =
+	  m_pAtoms->getAtom( ATOM_FAMILYNAME,
+			     String( ByteString((sal_Char *) fc_str ), RTL_TEXTENCODING_UTF8 ),
+			     sal_True );
+
+    if (!FcPatternGetInteger (fc_font, FC_WEIGHT, 0, &fc_int))
+      {
+	if (fc_int < FC_WEIGHT_LIGHT)
+	  pFont->m_eWeight = weight::UltraLight;
+	else if (fc_int == FC_WEIGHT_LIGHT)
+	  pFont->m_eWeight = weight::Light;
+	else if (fc_int < FC_WEIGHT_MEDIUM)
+	  pFont->m_eWeight = weight::SemiLight;
+	else if (fc_int == FC_WEIGHT_MEDIUM)
+	  pFont->m_eWeight = weight::Normal;
+	else if (fc_int < FC_WEIGHT_DEMIBOLD)
+	  pFont->m_eWeight = weight::Medium;
+	else if (fc_int == FC_WEIGHT_DEMIBOLD)
+	  pFont->m_eWeight = weight::SemiBold;
+	else if (fc_int <= FC_WEIGHT_BOLD)
+	  pFont->m_eWeight = weight::Bold;
+	else if (fc_int < FC_WEIGHT_BLACK)
+	  pFont->m_eWeight = weight::UltraBold;
+	else
+	  pFont->m_eWeight = weight::Black;
+      }
+
+    if (!FcPatternGetInteger (fc_font, FC_SLANT, 0, &fc_int))
+      {
+	if (fc_int <= FC_SLANT_ROMAN)
+	  pFont->m_eItalic = italic::Upright;
+	else if (fc_int <= FC_SLANT_ITALIC)
+	  pFont->m_eItalic = italic::Italic;
+	else if (fc_int <= FC_SLANT_ITALIC)
+	  pFont->m_eItalic = italic::Oblique;
+      }
+
+    /* FIXME: this used to be parsed from XLFD (parseWidth) */
+    pFont->m_eWidth = width::Normal;
+
+    if (!FcPatternGetInteger (fc_font, FC_SLANT, 0, &fc_int))
+      {
+	if (fc_int > FC_PROPORTIONAL && (fc_int <= FC_MONO ||
+					      fc_int <= FC_CHARCELL))
+	  pFont->m_ePitch = pitch::Fixed;
+	else
+	  pFont->m_ePitch = pitch::Variable;
+      }
+     else
+         pFont->m_ePitch = pitch::Variable;
+
+#warning Missing encoding fixup ! 
+
+ }
+#endif
 
 // -------------------------------------------------------------------------
 
@@ -1552,6 +1756,7 @@ bool PrintFontManager::analyzeTrueTypeFi
 
 // -------------------------------------------------------------------------
 
+#ifndef FONTCONFIG_FONTS
 static void normPath( ByteString& rPath )
 {
     char buf[PATH_MAX];
@@ -1614,6 +1819,37 @@ void PrintFontManager::getServerDirector
 #endif
 }
 
+#else
+
+void 
+PrintFontManager::addFcSystemFont (struct _FcPattern *fc_pattern)
+ {
+  FcChar8 *fc_str = NULL;
+  if( FcPatternGetString( fc_pattern, FC_FILE, 0, &fc_str ) || !fc_str)
+    return;
+  
+  OString aFileName( (sal_Char *) fc_str );
+
+  addFontFile( aFileName, fc_pattern, false );
+}
+
+void
+PrintFontManager::addFcSystemFontSet( FcFontSet *fc_set )
+{
+  int i;
+  if (!fc_set)
+    return;
+ 
+  for (i = 0; i < fc_set->nfont; i++)
+    {
+      FcPattern *font = fc_set->fonts[i];
+      if (!font)
+         continue;
+      addFcSystemFont( font );
+    }
+}
+#endif
+
 void PrintFontManager::initialize( void* pInitDisplay )
 {
     long aDirEntBuffer[ (sizeof(struct dirent)+_PC_NAME_MAX)+1 ];
@@ -1639,8 +1875,10 @@ void PrintFontManager::initialize( void*
             delete (*it).second;
         m_nNextFontID = 1;
         m_aFonts.clear();
+#ifndef FONTCONFIG_FONTS
         m_aFontDirectories.clear();
         m_aPrivateFontDirectories.clear();
+#endif
     }
 
 #if OSL_DEBUG_LEVEL > 1
@@ -1656,6 +1894,7 @@ void PrintFontManager::initialize( void*
     aStart = times( &tms );
 #endif
 
+#ifndef FONTCONFIG_FONTS
     // part one - look for downloadable fonts
     rtl_TextEncoding aEncoding = osl_getThreadTextEncoding();
     const ::rtl::OUString &rSalPrivatePath = psp::getFontPath();
@@ -1864,6 +2103,15 @@ void PrintFontManager::initialize( void*
                 m_pFontCache->markEmptyDir( nDirID );
         }
     }
+#else /* FONTCONFIG_FONTS */
+
+    FcConfig *config = FcInitLoadConfigAndFonts();
+    if ( !config)
+      fprintf( stderr, "Can't init fontconfig\n" );
+
+    addFcSystemFontSet( FcConfigGetFonts( config, FcSetSystem ) );
+    addFcSystemFontSet( FcConfigGetFonts( config, FcSetApplication ) );
+#endif
 
 #if OSL_DEBUG_LEVEL > 1
     aStep1 = times( &tms );
@@ -1876,8 +2124,9 @@ void PrintFontManager::initialize( void*
     std::list< OString > aEmptyFontsDir;
     for( std::list< OUString >::const_iterator met_dir_it = aMetricDirs.begin(); met_dir_it != aMetricDirs.end(); ++met_dir_it )
     {
-        OString aDir = OUStringToOString( *met_dir_it, aEncoding );
+        OString aDir = OUStringToOString( *met_dir_it, osl_getThreadTextEncoding() );
 
+#ifndef FONTCONFIG_FONTS
         // ask the font cache whether it handles this directory
         std::list< PrintFont* > aCacheFonts;
         
@@ -1907,6 +2156,7 @@ void PrintFontManager::initialize( void*
             }
             continue;
         }
+#endif
 
         DIR* pDIR = opendir( aDir.getStr() );
         if( pDIR )
@@ -1925,10 +2175,13 @@ void PrintFontManager::initialize( void*
                     && S_ISREG( aStat.st_mode )
                     )
                 {
-                    OString aFileName( pDirEntry->d_name, strlen( pDirEntry->d_name ) );
+                    OString aFileName( aFile );
                     OString aExt( aFileName.copy( aFileName.lastIndexOf( '.' )+1 ) );
                     if( aExt.equalsIgnoreAsciiCase( "afm" ) )
                     {
+#ifdef FONTCONFIG_FONTS
+			    addFontFile( aFileName, NULL, true );
+#else
                         ::std::list< PrintFont* > aNewFonts;
 
                         analyzeFontFile( nDirID, aFileName, true, aEmptyFontsDir, aNewFonts );
@@ -1946,6 +2199,7 @@ void PrintFontManager::initialize( void*
                             else
                                 delete *it;
                         }
+#endif
                     }
                 }
             }
@@ -2102,14 +2356,7 @@ void PrintFontManager::fillPrintFontInfo
 
 void PrintFontManager::fillPrintFontInfo( PrintFont* pFont, PrintFontInfo& rInfo ) const
 {
-    if( pFont->m_nAscend == 0 && pFont->m_nDescend == 0 )
-    {
-        // might be a truetype font not analyzed or type1 without metrics read
-        if( pFont->m_eType == fonttype::Type1 )
-            pFont->readAfmMetrics( getAfmFile( pFont ), m_pAtoms );
-        else if( pFont->m_eType == fonttype::TrueType )
-            analyzeTrueTypeFile( pFont );
-    }
+    ensureAnalysed( pFont );
 
     fillPrintFontInfo( pFont, static_cast< FastPrintFontInfo& >( rInfo ) );
 
@@ -2304,6 +2551,7 @@ family::type PrintFontManager::getFontFa
 const ::rtl::OUString& PrintFontManager::getFontFamily( fontID nFontID ) const
 {
     PrintFont* pFont = getFont( nFontID );
+    ensureAnalysed( pFont );
     return m_pAtoms->getString( ATOM_FAMILYNAME, pFont ? pFont->m_nFamilyName : INVALID_ATOM );
 }
 
@@ -2367,11 +2615,8 @@ OString PrintFontManager::getFontFile( P
 const ::rtl::OUString& PrintFontManager::getPSName( fontID nFontID ) const
 {
     PrintFont* pFont = getFont( nFontID );
-    if( pFont && pFont->m_nPSName == 0 )
-    {
-        if( pFont->m_eType == fonttype::TrueType )
-            analyzeTrueTypeFile( pFont );
-    }
+
+    ensureAnalysed( pFont );
 
     return m_pAtoms->getString( ATOM_PSNAME, pFont ? pFont->m_nPSName : INVALID_ATOM );
 }
@@ -2390,12 +2635,7 @@ const CharacterMetric& PrintFontManager:
 int PrintFontManager::getFontAscend( fontID nFontID ) const
 {
     PrintFont* pFont = getFont( nFontID );
-    if( pFont->m_nAscend == 0 && pFont->m_nDescend == 0 )
-    {
-        // might be a truetype font not yet analyzed
-        if( pFont->m_eType == fonttype::TrueType )
-            analyzeTrueTypeFile( pFont );
-    }
+    ensureAnalysed( pFont );
     return pFont->m_nAscend;
 }
 
@@ -2404,12 +2644,7 @@ int PrintFontManager::getFontAscend( fon
 int PrintFontManager::getFontDescend( fontID nFontID ) const
 {
     PrintFont* pFont = getFont( nFontID );
-    if( pFont->m_nAscend == 0 && pFont->m_nDescend == 0 )
-    {
-        // might be a truetype font not yet analyzed
-        if( pFont->m_eType == fonttype::TrueType )
-            analyzeTrueTypeFile( pFont );
-    }
+    ensureAnalysed( pFont );
     return pFont->m_nDescend;
 }
 
@@ -2418,12 +2653,7 @@ int PrintFontManager::getFontDescend( fo
 int PrintFontManager::getFontLeading( fontID nFontID ) const
 {
     PrintFont* pFont = getFont( nFontID );
-    if( pFont->m_nAscend == 0 && pFont->m_nDescend == 0 )
-    {
-        // might be a truetype font not yet analyzed
-        if( pFont->m_eType == fonttype::TrueType )
-            analyzeTrueTypeFile( pFont );
-    }
+    ensureAnalysed( pFont );
     return pFont->m_nLeading;
 }
 
@@ -2432,12 +2662,7 @@ int PrintFontManager::getFontLeading( fo
 bool PrintFontManager::hasVerticalSubstitutions( fontID nFontID ) const
 {
     PrintFont* pFont = getFont( nFontID );
-    if( pFont->m_nAscend == 0 && pFont->m_nDescend == 0 )
-    {
-        // might be a truetype font not yet analyzed
-        if( pFont->m_eType == fonttype::TrueType )
-            analyzeTrueTypeFile( pFont );
-    }
+    ensureAnalysed( pFont );
     return pFont->m_bHaveVerticalSubstitutedGlyphs;
 }
 
@@ -2447,12 +2672,8 @@ void PrintFontManager::hasVerticalSubsti
     const sal_Unicode* pCharacters, int nCharacters, bool* pHasSubst ) const
 {
     PrintFont* pFont = getFont( nFontID );
-    if( pFont->m_nAscend == 0 && pFont->m_nDescend == 0 )
-    {
-        // might be a truetype font not yet analyzed
-        if( pFont->m_eType == fonttype::TrueType )
-            analyzeTrueTypeFile( pFont );
-    }
+
+    ensureAnalysed( pFont );
 
     if( ! pFont->m_bHaveVerticalSubstitutedGlyphs )
         memset( pHasSubst, 0, sizeof(bool)*nCharacters );
@@ -2471,7 +2692,7 @@ void PrintFontManager::hasVerticalSubsti
 }
 
 // -------------------------------------------------------------------------
-
+#ifndef FONTCONFIG_FONTS
 OUString PrintFontManager::getFontXLFD( fontID nFontID ) const
 {
     PrintFont* pFont = getFont( nFontID );
@@ -2484,6 +2705,7 @@ OUString PrintFontManager::getFontXLFD( 
     }
     return aRet;
 }
+#endif
 
 // -------------------------------------------------------------------------
 
@@ -2495,6 +2717,7 @@ const ::std::list< KernPair >& PrintFont
     if( ! pFont )
         return aEmpty;
 
+    ensureAnalysed( pFont );
     if( ! pFont->m_pMetrics || ! pFont->m_pMetrics->m_bKernPairsQueried )
         pFont->queryMetricPage( 0, m_pAtoms );
     if( ! pFont->m_pMetrics || ! pFont->m_pMetrics->m_bKernPairsQueried )
@@ -2548,14 +2771,7 @@ bool PrintFontManager::getMetrics( fontI
     if( ! pFont )
         return false;
 
-    if( pFont->m_nAscend == 0 && pFont->m_nDescend == 0 )
-    {
-        // might be a font not yet analyzed
-        if( pFont->m_eType == fonttype::Type1 )
-            pFont->readAfmMetrics( getAfmFile( pFont ), m_pAtoms );
-        else if( pFont->m_eType == fonttype::TrueType )
-            analyzeTrueTypeFile( pFont );
-    }
+    ensureAnalysed( pFont );
 
     for( int i = 0; i < nLen; i++ )
     {
@@ -2615,7 +2831,7 @@ bool PrintFontManager::getMetrics( fontI
 }
 
 // -------------------------------------------------------------------------
-
+#ifndef FONTCONFIG_FONTS
 static bool createPath( const ByteString& rPath )
 {
     bool bSuccess = false;
@@ -3245,6 +3461,7 @@ bool PrintFontManager::getAlternativeFam
     }
     return rNames.begin() != rNames.end();
 }
+#endif /* FONTCONFIG_FONTS */
 
 // -------------------------------------------------------------------------
 
