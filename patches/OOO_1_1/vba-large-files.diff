Index: msvbasic.cxx
===================================================================
RCS file: /cvs/graphics/svx/source/msfilter/msvbasic.cxx,v
retrieving revision 1.11
diff -u -p -u -r1.11 msvbasic.cxx
--- svx/source/msfilter/msvbasic.cxx	15 Apr 2003 08:47:48 -0000	1.11
+++ svx/source/msfilter/msvbasic.cxx	11 Mar 2004 13:55:16 -0000
@@ -74,6 +74,8 @@
 #include "msvbasic.hxx"
 #endif
 
+using rtl::OUString;
+
 /*
 A few urls which may in the future be of some use
 http://www.virusbtn.com/vb2000/Programme/papers/bontchev.pdf
@@ -171,29 +173,9 @@ sal_uInt8 VBA_Impl::ReadPString(SvStorag
 	return nType;
 }
 
-void VBA_Impl::Output( int nLen, const sal_uInt8*pData )
+void VBA_Impl::Output( int nLen, const sal_Char *pData )
 {
-	/*
-	Each StarBasic module is tragically limited to the maximum len of a 
-	string and WordBasic is not, so each overlarge module must be split
-	*/
-	String sTemp((const sal_Char *)pData, (xub_StrLen)nLen,
-		meCharSet);
-	int nTmp = sTemp.GetTokenCount('\x0D');
-	int nIndex = aVBAStrings.GetSize()-1;
-	if (aVBAStrings.Get(nIndex)->Len() +
-		nLen + ((nLines+nTmp) * sComment.Len()) >= STRING_MAXLEN)
-	{
-		//DBG_ASSERT(0,"New Module String\n");
-		//we are too large for our boots, break out into another
-		//string
-		nLines=0;
-		nIndex++;
-		aVBAStrings.SetSize(nIndex+1);
-		aVBAStrings.Put(nIndex,new String);
-	}
-	*(aVBAStrings.Get(nIndex)) += sTemp;
-	nLines+=nTmp;
+    msVBAString += OUString(pData, nLen, meCharSet);
 }
 
 
@@ -485,12 +467,12 @@ bool VBA_Impl::Open( const String &rTopl
 	return bRet;
 }
 
-const StringArray &VBA_Impl::Decompress(sal_uInt16 nIndex, int *pOverflow)
+const OUString &VBA_Impl::Decompress(sal_uInt16 nIndex, int *pOverflow)
 {
 	DBG_ASSERT( nIndex < nOffsets, "Index out of range" );
 	SvStorageStreamRef xVBAStream;
-	aVBAStrings.SetSize(1);
-	aVBAStrings.Put(0,new String);
+
+	msVBAString = OUString();
 
 	xVBAStream = xVBA->OpenStream( pOffsets[nIndex].sName,
 						STREAM_STD_READ | STREAM_NOCREATE );
@@ -505,29 +487,26 @@ const StringArray &VBA_Impl::Decompress(
 	{
 		xVBAStream->SetNumberFormatInt( NUMBERFORMAT_INT_LITTLEENDIAN );
 		DecompressVBA( nIndex, xVBAStream );
-		/*
-		 * if len was too big for a single string set that variable ?
-		 *	if ((len > XX) && (pOverflow))
-				*pOverflow=1;
-		 */
+
 		if (bCommented)
 		{
-            String sTempStringa;
-            if (mbMac)
-                sTempStringa = String(RTL_CONSTASCII_STRINGPARAM("\x0D"));
-            else
-                sTempStringa = String(RTL_CONSTASCII_STRINGPARAM("\x0D\x0A"));
-            String sTempStringb(sTempStringa);
-			sTempStringb+=sComment;
-			for(ULONG i=0;i<aVBAStrings.GetSize();i++)
-			{
-				aVBAStrings.Get(i)->SearchAndReplaceAll(
-					sTempStringa,sTempStringb);
-				aVBAStrings.Get(i)->Insert(sComment,0);
-			}
+            OUString sTempStringa(OUString::createFromAscii(
+                mbMac ? "\x0D": "\x0D\x0A"));
+            OUString sTempStringb(sTempStringa);
+			sTempStringb += rtl::OUString::createFromAscii("Rem ");
+
+            sal_Int32 nFromIndex = 0;
+            sal_Int32 nToIndex = -1;
+            while ((nToIndex = msVBAString.indexOf(sTempStringa, nFromIndex)) != -1)
+            {
+                msVBAString = msVBAString.replaceAt(nToIndex, 
+                    sTempStringa.getLength(), sTempStringb);
+                nFromIndex = nToIndex += sTempStringb.getLength();
+            }
+            msVBAString = sComment + msVBAString;
 		}
 	}
-	return aVBAStrings;
+	return msVBAString;
 }
 
 
Index: svxmsbas.cxx
===================================================================
RCS file: /cvs/graphics/svx/source/msfilter/svxmsbas.cxx,v
retrieving revision 1.4
diff -u -p -u -r1.4 svxmsbas.cxx
--- svx/source/msfilter/svxmsbas.cxx	15 Apr 2003 08:47:59 -0000	1.4
+++ svx/source/msfilter/svxmsbas.cxx	11 Mar 2004 13:55:16 -0000
@@ -173,75 +173,48 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
 		{
 			for( UINT16 i=0; i<nStreamCount;i++)
 			{
-				StringArray aDecompressed = aVBA.Decompress(i);
-				ByteString sByteBasic(aVBA.GetStreamName(i),
-					RTL_TEXTENCODING_ASCII_US,
-						(RTL_UNICODETOTEXT_FLAGS_UNDEFINED_UNDERLINE|
-						RTL_UNICODETOTEXT_FLAGS_INVALID_UNDERLINE |
-						RTL_UNICODETOTEXT_FLAGS_PRIVATE_MAPTO0 |
-						RTL_UNICODETOTEXT_FLAGS_NOCOMPOSITE)
-				);
+				rtl::OUString sSource = aVBA.Decompress(i);
+				rtl::OUString sModule(aVBA.GetStreamName(i));
 
-				//const String &sBasicModule = aVBA.GetStreamName( i);
-				const String sBasicModule(sByteBasic,
-					RTL_TEXTENCODING_ASCII_US);
-				for(ULONG j=0;j<aDecompressed.GetSize();j++)
-				{
-					String sModule(sBasicModule);
-					if (j>0)
-					{
-						sModule.AppendAscii("_Part");
-						sModule += String::CreateFromInt32(j+1);
-					}
-
-					if (bStripped)
-					{
-                        String *pStr = aDecompressed.Get(j);
-                        bool bMac = true;
-                        xub_StrLen nBegin = pStr->Search('\x0D');
-                        if ((STRING_NOTFOUND != nBegin) && (pStr->Len() > 1) && (pStr->GetChar(nBegin+1) == '\x0A'))
-                            bMac = false;
-
-                        const char cLineEnd = bMac ? '\x0D' : '\x0A';
-                        const String sAttribute(String::CreateFromAscii(
-                            bAsComment ? "Rem Attribute" : "Attribute"));
-						while (STRING_NOTFOUND != (nBegin =	pStr->Search(sAttribute)))
-						{
-                            if ((nBegin) && pStr->GetChar(nBegin-1) != cLineEnd)
-                                continue;
-							xub_StrLen nEnd = pStr->Search(cLineEnd ,nBegin);
-							pStr->Erase(nBegin, (nEnd-nBegin)+1);
-						}
-					}
-
-					if( aDecompressed.Get(j)->Len() )
-					{
-						if (bAsComment)
-						{
-							String sTemp( String::CreateFromAscii(
-									RTL_CONSTASCII_STRINGPARAM( "Sub " )));
-							String sMunge(sModule);
-							//Streams can have spaces in them, but modulenames
-							//cannot !
-							sMunge.SearchAndReplaceAll(' ','_');
-							
-							sTemp += sMunge;
-							sTemp.AppendAscii("\n");
-							aDecompressed.Get(j)->Insert(sTemp,0);
-							aDecompressed.Get(j)->InsertAscii("\nEnd Sub");
-						}
-
-			            ::rtl::OUString aModName( sModule );
-			            ::rtl::OUString aSource( *aDecompressed.Get(j) );
-			            Any aSourceAny;
-			            aSourceAny <<= aSource;
-			            if( xLib->hasByName( aModName ) )
-				            xLib->replaceByName( aModName, aSourceAny );
-			            else
-				            xLib->insertByName( aModName, aSourceAny );
-
-						bRet = true;
-					}
+                if (bStripped)
+                {
+                    const sal_Unicode cLineEnd = aVBA.bIsMac() ? '\x0D' : '\x0A';
+                    const rtl::OUString sAttribute(rtl::OUString::createFromAscii(
+                        bAsComment ? "Rem Attribute" : "Attribute"));
+                    while (sSource.indexOf(sAttribute) == 0)
+                    {
+                        sal_Int32 nEnd = sSource.indexOf(cLineEnd);
+                        if (nEnd == -1)
+                            break;
+                        sSource = sSource.copy(nEnd + 1);
+                    }
+                }
+
+                if (sSource.getLength())
+                {
+                    if (bAsComment)
+                    {
+                        rtl::OUString sTemp(
+                            rtl::OUString::createFromAscii("Sub " ));
+
+                        //Streams can have spaces in them, but modulenames
+                        //cannot !
+                        sTemp += sModule.replace(sal_Unicode(' '),sal_Unicode('_'));
+
+                        sTemp += rtl::OUString::createFromAscii("\n");
+                        sSource = sTemp + sSource;
+                        sSource += rtl::OUString::createFromAscii("\nEnd Sub");
+                    }
+
+                    rtl::OUString aModName(sModule);
+                    Any aSourceAny;
+                    aSourceAny <<= sSource;
+                    if (xLib->hasByName(aModName))
+                        xLib->replaceByName(aModName, aSourceAny);
+                    else
+                        xLib->insertByName(aModName, aSourceAny);
+ 
+                    bRet = true;
 				}
 			}
 		}
Index: svx/source/msfilter/msvbasic.hxx
===================================================================
RCS file: /cvs/graphics/svx/source/msfilter/msvbasic.hxx,v
retrieving revision 1.5.206.1
diff -u -p -u -r1.5.206.1 msvbasic.hxx
--- svx/source/msfilter/msvbasic.hxx	20 Jan 2004 09:54:47 -0000	1.5.206.1
+++ svx/source/msfilter/msvbasic.hxx	11 Mar 2004 15:22:08 -0000
@@ -97,34 +97,29 @@
  * cmc
  * */
 
-DECLARE_DYNARRAY(StringArray,String *);
-
 class VBA_Impl
 {
 public:
     VBA_Impl(SvStorage &rIn, bool bCmmntd = true)
         : xStor(&rIn), pOffsets(0), nOffsets(0), bCommented(bCmmntd),
-        aVBAStrings(0), nLines(0), sComment(String::CreateFromAscii(
-            RTL_CONSTASCII_STRINGPARAM("Rem "))), 
-        meCharSet(RTL_TEXTENCODING_MS_1252), mbMac(false)
+        msVBAString(), meCharSet(RTL_TEXTENCODING_MS_1252), mbMac(false)
         {}
     ~VBA_Impl() 
     {
         if (nOffsets) 
             delete [] pOffsets;
-        for(ULONG i=0;i<aVBAStrings.GetSize();i++)
-            delete aVBAStrings.Get(i);
     }
     //0 for failure, 1 for success
     bool Open( const String &rToplevel, const String &rSublevel);
-    const StringArray & Decompress(sal_uInt16 nIndex, int *pOverflow=0);
+    const rtl::OUString & Decompress(sal_uInt16 nIndex, int *pOverflow=0);
     sal_uInt16 GetNoStreams() const { return nOffsets; }
     const String &GetStreamName(sal_uInt16 nIndex) const
     {
         DBG_ASSERT( nIndex < nOffsets, "Index out of range" );
         return pOffsets[ nIndex ].sName;
     }
-    virtual void Output(int len, const sal_uInt8 *data);
+    virtual void Output(int len, const sal_Char *pData);
+    bool bIsMac() const { return mbMac; }
     std::vector<String> maReferences;
 private:
     struct VBAOffset_Impl
@@ -134,17 +129,16 @@ private:
     };
 
     SvStorageRef xVBA;
-    StringArray aVBAStrings;
+    rtl::OUString msVBAString;
     String sComment;
     SvStorageRef xStor;
     VBAOffset_Impl *pOffsets;
     sal_uInt16 nOffsets;
     enum Limits {nWINDOWLEN = 4096};
-    sal_uInt8 aHistory[nWINDOWLEN];
+    sal_Char aHistory[nWINDOWLEN];
     rtl_TextEncoding meCharSet;
     bool bCommented;
     bool mbMac;
-    int nLines;
 
     //0 for failure, anything else for success
     int ReadVBAProject(const SvStorageRef &rxVBAStorage);
