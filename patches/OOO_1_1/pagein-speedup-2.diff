Index: desktop/source/pagein/file_image.h
===================================================================
RCS file: /cvs/framework/desktop/source/pagein/file_image.h,v
retrieving revision 1.2
diff -u -p -u -r1.2 file_image.h
--- desktop/source/pagein/file_image.h	4 Jun 2003 10:43:03 -0000	1.2
+++ desktop/source/pagein/file_image.h	2 Feb 2004 16:15:44 -0000
@@ -77,6 +77,7 @@ struct file_image_st
 {
     void * m_base;
     size_t m_size;
+	int    fd;
 };
 
 typedef struct file_image_st file_image;
Index: desktop/source/pagein/file_image_unx.c
===================================================================
RCS file: /cvs/framework/desktop/source/pagein/file_image_unx.c,v
retrieving revision 1.3
diff -u -p -u -r1.3 file_image_unx.c
--- desktop/source/pagein/file_image_unx.c	16 Jul 2003 17:41:32 -0000	1.3
+++ desktop/source/pagein/file_image_unx.c	2 Feb 2004 16:15:57 -0000
@@ -81,7 +81,7 @@
 int file_image_open (file_image * image, const char * filename)
 {
     int         result = 0;
-    int         fd;
+	int         fd;
     struct stat st;
     void *      p;
 
@@ -89,13 +89,15 @@ int file_image_open (file_image * image,
         return (EINVAL);
 
     image->m_base = MAP_FAILED, image->m_size = 0;
+	image->fd = -1;
 
     if ((fd = open (filename, O_RDONLY)) == -1)
         return (errno);
 
-    if (fstat (fd, &st) == -1)
+    if (fstat (image->fd, &st) == -1)
     {
         result = errno;
+		close (fd);
         goto cleanup_and_leave;
     }
 
@@ -103,16 +105,22 @@ int file_image_open (file_image * image,
 	if (p == MAP_FAILED)
     {
         result = errno;
+		close (fd);
         goto cleanup_and_leave;
     }
 
     image->m_base = p, image->m_size = st.st_size;
+	image->fd = fd;
 
 cleanup_and_leave:
-	close (fd);
     return (result);
 }
 
+#ifdef LINUX
+#warning LINUX_PATH
+ssize_t readahead (int __fd, __off64_t __offset, size_t __count);
+#endif
+
 /*
  * file_image_pagein.
  */
@@ -131,6 +139,7 @@ int file_image_pagein (file_image * imag
 	if ((w.m_size = image->m_size) == 0)
 		return (0);
 
+#ifndef LINUX
 	if (madvise (w.m_base, w.m_size, MADV_WILLNEED) == -1) 
 	{
 #ifndef MACOSX
@@ -140,7 +149,7 @@ int file_image_pagein (file_image * imag
 		/* but that is fine */
 #endif
 	}
-
+#endif
 
 #ifndef MACOSX	
 	if ((s = sysconf (_SC_PAGESIZE)) == -1)
@@ -149,6 +158,10 @@ int file_image_pagein (file_image * imag
 	s = getpagesize();
 #endif
 
+#ifdef LINUX
+	readahead (image->fd, 0, w.m_size / k);
+#else
+
 	k = (size_t)(s);
 	while (w.m_size > k)
 	{
@@ -162,6 +175,7 @@ int file_image_pagein (file_image * imag
 		w.m_base  = (char*)(w.m_base) + w.m_size;
 		w.m_size -= w.m_size;
 	}
+#endif
 
 	return (0);
 }
@@ -176,6 +190,9 @@ int file_image_close (file_image * image
 
     if (munmap (image->m_base, image->m_size) == -1)
 		return (errno);
+
+	if (image->fd >= 0)
+		close (image->fd);
 
 	image->m_base = 0, image->m_size = 0;
     return (0);
