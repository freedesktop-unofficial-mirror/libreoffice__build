--- vcl/source/gdi/outdev3.cxx.utf8-msfonts	2004-11-02 13:05:07.952153488 -0500
+++ vcl/source/gdi/outdev3.cxx	2004-11-02 13:18:26.199801400 -0500
@@ -404,10 +404,10 @@
 
 // =======================================================================
 
-struct ImplLocaliziedFontName
+struct ImplLocalizedFontName
 {
     const char*         mpEnglishName;
-    const sal_Unicode*  mpLocaliziedNames;
+    const sal_Unicode*  mpLocalizedNames;
 };
 
 static sal_Unicode const aBatang[] = { 0xBC14, 0xD0D5, 0, 0 };
@@ -441,13 +441,19 @@
 static sal_Unicode const aHei[] = { 0x6865, 0, 0 };
 static sal_Unicode const aKai[] = { 0x6B61, 0, 0 };
 static sal_Unicode const aMing[] = { 0x6D69, 0x6E67, 0, 0 };
-static sal_Unicode const aMSGothic[] = { 0xFF2D, 0xFF33, ' ', 0x30B4, 0x30B7, 0x30C3, 0x30AF, 0, 0 };
-static sal_Unicode const aMSPGothic[] = { 0xFF2D, 0xFF33, ' ', 0xFF30, 0x30B4, 0x30B7, 0x30C3, 0x30AF, 0, 0 };
-static sal_Unicode const aMSMincho[] = { 0xFF2D, 0xFF33, ' ', 0x660E, 0x671D, 0, 0 };
-static sal_Unicode const aMSPMincho[] = { 0xFF2D, 0xFF33, ' ', 0xFF30, 0x660E, 0x671D, 0, 0 };
-static sal_Unicode const aHGMinchoL[] = { 'h', 'g', 0x660E, 0x671D, 'l', 0, 0 };
-static sal_Unicode const aHGGothicB[] = { 'h', 'g', 0x30B4, 0x30B7, 0x30C3, 0x30AF, 'b', 0, 0 };
-static sal_Unicode const aHGHeiseiMin[] = { 'h', 'g', 0x5E73, 0x6210, 0x660E, 0x671D, 0x4F53, 0, 'h', 'g', 0x5E73, 0x6210, 0x660E, 0x671D, 0x4F53, 'w', '3', 'x', '1', '2', 0, 0 };
+static sal_Unicode const aMSGothic[] = { 'm','s',       0x30B4, 0x30B7, 0x30C3, 0x30AF, 0, 0 };
+static sal_Unicode const aMSPGothic[] = { 'm','s','p',  0x30B4, 0x30B7, 0x30C3, 0x30AF, 0, 0 };
+static sal_Unicode const aMSMincho[] = { 'm', 's',      0x660E, 0x671D, 0 };
+static sal_Unicode const aMSPMincho[] = { 'm','s','p',  0x660E, 0x671D, 0 };
+static sal_Unicode const aHGMinchoL[] = { 'h','g',      0x660E, 0x671D, 'l', 0, 0 };
+static sal_Unicode const aHGGothicB[] = { 'h','g',      0x30B4, 0x30B7, 0x30C3, 0x30AF, 'b', 0 };
+static sal_Unicode const aHGPMinchoL[] = { 'h','g','p', 0x660E, 0x671D, 'l', 0 };
+static sal_Unicode const aHGPGothicB[] = { 'h','g','p', 0x30B4, 0x30B7, 0x30C3, 0x30AF, 'b', 0 };
+static sal_Unicode const aHGMinchoLSun[] = { 'h','g',   0x660E, 0x671D, 'l', 's', 'u', 'n', 0 };
+static sal_Unicode const aHGPMinchoLSun[] = { 'h','g','p', 0x660E, 0x671D, 'l', 's', 'u', 'n', 0 };
+static sal_Unicode const aHGGothicBSun[] = { 'h','g',   0x30B4, 0x30B7, 0x30C3, 0x30AF, 'b', 's', 'u', 'n', 0 };
+static sal_Unicode const aHGPGothicBSun[] = { 'h','g','p', 0x30B4, 0x30B7, 0x30C3, 0x30AF, 'b', 's', 'u', 'n', 0 };
+static sal_Unicode const aHGHeiseiMin[] = { 'h','g', 0x5E73, 0x6210, 0x660E, 0x671D, 0x4F53, 0, 'h', 'g', 0x5E73, 0x6210, 0x660E, 0x671D, 0x4F53, 'w', '3', 'x', '1', '2', 0, 0 };
 static sal_Unicode const aSunDotum[] = { 0xC36C, 0xB3CB, 0xC6C0, 0, 0 };
 static sal_Unicode const aSunGulim[] = { 0xC36C, 0xAD74, 0xB9BC, 0, 0 };
 static sal_Unicode const aSunBatang[] = { 0xC36C, 0xBC14, 0xD0D5, 0, 0 };
@@ -479,8 +485,6 @@
 static sal_Unicode const aMagicR[]                  = { 0xD734, 0xBA3C, 0xB9E4, 0xC9C1, 0xCCB4, 0, 0 };
 static sal_Unicode const aSunCrystal[]              = { 0xC36C, 0xD06C, 0xB9AC, 0xC2A4, 0xD0C8, 0, 0 };
 static sal_Unicode const aSunSaemmul[]              = { 0xC36C, 0xC0D8, 0xBB3C, 0, 0 };
-static sal_Unicode const aHYShortSamulMedium[]      = { 'h', 'y', 0xC595, 0xC740, 0xC0D8, 0xBB3C, 'm', 0, 0 };
-static sal_Unicode const aHYShortSamul[]            = { 'h', 'y', 0xC595, 0xC740, 0xC0D8, 0xBB3C, 0, 0 };
 static sal_Unicode const aHaansoftBatang[]          = { 0xD55C, 0xCEF4, 0xBC14, 0xD0D5, 0, 0 };
 static sal_Unicode const aHaansoftDotum[]           = { 0xD55C, 0xCEF4, 0xB3CB, 0xC6C0, 0, 0 };
 static sal_Unicode const aHyhaeseo[]                = { 0xD55C, 0xC591, 0xD574, 0xC11C, 0, 0 };
@@ -489,11 +493,49 @@
 static sal_Unicode const aMDArt[]                   = { 'm', 'd', 0xC544, 0xD2B8, 0xCCB4, 0, 0 };
 static sal_Unicode const aMDAlong[]                 = { 'm', 'd', 0xC544, 0xB871, 0xCCB4, 0, 0 };
 static sal_Unicode const aMDEasop[]                 = { 'm', 'd', 0xC774, 0xC19D, 0xCCB4, 0, 0 };
-static sal_Unicode const HYShortSamulMedium[]       = { 'h', 'y', 0xC595, 0xC740, 0xC0D8, 0xBB3C, 'm', 0, 0 };
-static sal_Unicode const HYShortSamul[]             = { 'h', 'y', 0xC595, 0xC740, 0xC0D8, 0xBB3C, 0, 0 };
+static sal_Unicode const aHYShortSamulMedium[]      = { 'h', 'y', 0xC595, 0xC740, 0xC0D8, 0xBB3C, 'm', 0 };
+static sal_Unicode const aHYShortSamul[]            = { 'h', 'y', 0xC595, 0xC740, 0xC0D8, 0xBB3C, 0 };
+static sal_Unicode const aHGGothicE[]               = { 'h','g', 0xFF7A, 0xFF9E, 0xFF7C, 0xFF6F, 0xFF78, 'e', 0 };
+static sal_Unicode const aHGPGothicE[]              = { 'h','g','p', 0xFF7A, 0xFF9E, 0xFF7C, 0xFF6F, 0xFF78, 'e', 0 };
+static sal_Unicode const aHGSGothicE[]              = { 'h','g','s', 0xFF7A, 0xFF9E, 0xFF7C, 0xFF6F, 0xFF78, 'e', 0 };
+static sal_Unicode const aHGGothicM[]               = { 'h','g', 0xFF7A, 0xFF9E, 0xFF7C, 0xFF6F, 0xFF78, 'm', 0 };
+static sal_Unicode const aHGPGothicM[]              = { 'h','g','p', 0xFF7A, 0xFF9E, 0xFF7C, 0xFF6F, 0xFF78, 'm', 0 };
+static sal_Unicode const aHGSGothicM[]              = { 'h','g','s', 0xFF7A, 0xFF9E, 0xFF7C, 0xFF6F, 0xFF78, 'm', 0 };
+static sal_Unicode const aHGGyoshotai[]             = { 'h','g', 0x884C, 0x66F8, 0x4F53, 0 };
+static sal_Unicode const aHGPGyoshotai[]            = { 'h','g','p', 0x884C, 0x66F8, 0x4F53, 0 };
+static sal_Unicode const aHGSGyoshotai[]            = { 'h','g','s', 0x884C, 0x66F8, 0x4F53, 0 };
+static sal_Unicode const aHGKyokashotai[]           = { 'h','g', 0x6559, 0x79D1, 0x66F8, 0x4F53, 0 };
+static sal_Unicode const aHGPKyokashotai[]          = { 'h','g','p', 0x6559, 0x79D1, 0x66F8, 0x4F53, 0 };
+static sal_Unicode const aHGSKyokashotai[]          = { 'h','g','s', 0x6559, 0x79D1, 0x66F8, 0x4F53, 0 };
+static sal_Unicode const aHGMinchoB[]               = { 'h','g', 0x660E, 0x671D, 'b', 0 };
+static sal_Unicode const aHGPMinchoB[]              = { 'h','g','p', 0x660E, 0x671D, 'b', 0 };
+static sal_Unicode const aHGSMinchoB[]              = { 'h','g','s', 0x660E, 0x671D, 'b', 0 };
+static sal_Unicode const aHGMinchoE[]               = { 'h','g', 0x660E, 0x671D, 'e', 0 };
+static sal_Unicode const aHGPMinchoE[]              = { 'h','g','p', 0x660E, 0x671D, 'e', 0 };
+static sal_Unicode const aHGSMinchoE[]              = { 'h','g','s', 0x660E, 0x671D, 'e', 0 };
+static sal_Unicode const aHGSoeiKakupoptai[]        = { 'h','g', 0x5275,0x82F1,0x89D2,0xFF8E, 
+							0xFF9F,0xFF6F,0xFF8C,0xFF9F,0x4F53,0}; 
+static sal_Unicode const aHGPSoeiKakupoptai[]       = { 'h','g', 'p', 0x5275,0x82F1,0x89D2,0xFF8E, 
+							0xFF9F,0xFF6F,0xFF8C,0xFF9F,0x4F53,0}; 
+static sal_Unicode const aHGSSoeiKakupoptai[]       = { 'h','g', 's', 0x5275,0x82F1,0x89D2,0xFF8E, 
+							0xFF9F,0xFF6F,0xFF8C,0xFF9F,0x4F53,0}; 
+static sal_Unicode const aHGSoeiPresenceEB[]        = { 'h','g', 0x5275,0x82F1,0xFF8C,0xFF9F,
+							0xFF9A,0xFF7E,0xFF9E,0xFF9D,0xFF7D, 'e','b',0};
+static sal_Unicode const aHGPSoeiPresenceEB[]       = { 'h','g','p', 0x5275,0x82F1,0xFF8C,0xFF9F,
+							0xFF9A,0xFF7E,0xFF9E,0xFF9D,0xFF7D, 'e','b',0};
+static sal_Unicode const aHGSSoeiPresenceEB[]       = { 'h','g','s', 0x5275,0x82F1,0xFF8C,0xFF9F,
+							0xFF9A,0xFF7E,0xFF9E,0xFF9D,0xFF7D, 'e','b',0};
+static sal_Unicode const aHGSoeiKakugothicUB[]      = { 'h','g', 0x5275,0x82F1,0x89D2,0xFF7A,
+							0xFF9E,0xFF7C,0xFF6F,0xFF78,'u','b',0};
+static sal_Unicode const aHGPSoeiKakugothicUB[]     = { 'h','g','p', 0x5275,0x82F1,0x89D2,0xFF7A,
+							0xFF9E,0xFF7C,0xFF6F,0xFF78,'u','b',0};
+static sal_Unicode const aHGSSoeiKakugothicUB[]     = { 'h','g','s', 0x5275,0x82F1,0x89D2,0xFF7A,
+							0xFF9E,0xFF7C,0xFF6F,0xFF78,'u','b',0};
+static sal_Unicode const aHGSeikaishotaiPRO[]       = { 'h','g', 0x6B63,0x6977,0x66F8,0x4F53, '-','p','r','o',0};
+static sal_Unicode const aHGMaruGothicMPRO[]        = { 'h','g', 0x4E38,0xFF7A,0xFF9E,0xFF7C,0xFF6F,0xFF78, '-','p','r','o',0};
 
 
-static ImplLocaliziedFontName const aImplLocaliziedNamesList[] =
+static ImplLocalizedFontName aImplLocalizedNamesList[] =
 {
 {   "batang",               aBatang },
 {   "batangche",            aBatangChe },
@@ -530,6 +572,12 @@
 {   "mspmincho",            aMSPMincho },
 {   "hgminchol",            aHGMinchoL },
 {   "hggothicb",            aHGGothicB },
+{   "hgpminchol",           aHGPMinchoL },
+{   "hgpgothicb",           aHGPGothicB },
+{   "hgmincholsun",         aHGMinchoLSun },
+{   "hggothicbsun",         aHGGothicBSun },
+{   "hgpmincholsun",        aHGPMinchoLSun },
+{   "hgpgothicbsun",        aHGPGothicBSun },
 {   "hgheiseimin",          aHGHeiseiMin },
 {   "sundotum",             aSunDotum },
 {   "sungulim",             aSunGulim },
@@ -572,8 +620,35 @@
 {   "mdart",                aMDArt },             
 {   "mdalong",              aMDAlong },           
 {   "mdeasop",              aMDEasop },           
-{   "hyshortsamulmedium",   HYShortSamulMedium }, 
-{   "hyshortsamul",         HYShortSamul },       
+{   "hggothice",            aHGGothicE },
+{   "hgpgothice",           aHGPGothicE },
+{   "hgpothice",            aHGSGothicE },
+{   "hggothicm",            aHGGothicM },
+{   "hgpgothicm",           aHGPGothicM },
+{   "hgpgothicm",           aHGSGothicM },
+{   "hggyoshotai",          aHGGyoshotai },
+{   "hgpgyoshotai",         aHGPGyoshotai },
+{   "hgsgyoshotai",         aHGSGyoshotai },
+{   "hgkyokashotai",        aHGKyokashotai },
+{   "hgpkyokashotai",       aHGPKyokashotai },
+{   "hgskyokashotai",       aHGSKyokashotai },
+{   "hgminchob",            aHGMinchoB },
+{   "hgpminchob",           aHGPMinchoB },
+{   "hgsminchob",           aHGSMinchoB },
+{   "hgminchoe",            aHGMinchoE },
+{   "hgpminchoe",           aHGPMinchoE },
+{   "hgsminchoe",           aHGSMinchoE },
+{   "hgsoeikakupoptai",     aHGSoeiKakupoptai },
+{   "hgpsoeikakupopta",     aHGPSoeiKakupoptai },
+{   "hgssoeikakupopta",     aHGSSoeiKakupoptai },
+{   "hgsoeipresenceeb",     aHGSoeiPresenceEB },
+{   "hgpsoeipresenceeb",    aHGPSoeiPresenceEB },
+{   "hgssoeipresenceeb",    aHGSSoeiPresenceEB },
+{   "hgsoeikakugothicub",   aHGSoeiKakugothicUB },
+{   "hgpsoeikakugothicub",  aHGPSoeiKakugothicUB },
+{   "hgssoeikakugothicub",  aHGSSoeiKakugothicUB },
+{   "hgseikaishotaipro",    aHGSeikaishotaiPRO },
+{   "hgmarugothicmpro",     aHGMaruGothicMPRO },
 {   NULL,                   NULL },
 };
 
@@ -665,24 +740,16 @@
         i++;
     }
 
-    // Translate localizied name to English ASCII name
-    const ImplLocaliziedFontName* pTranslateNames = aImplLocaliziedNamesList;
+    // Translate localized name to English ASCII name
+    // TODO: replace the O(n) search!
+    const ImplLocalizedFontName* pTranslateNames = aImplLocalizedNamesList;
     while ( bTranslate && pTranslateNames->mpEnglishName )
     {
-        const sal_Unicode* pLocaliziedName = pTranslateNames->mpLocaliziedNames;
-        while ( *pLocaliziedName )
+        const sal_Unicode* pLocalizedName = pTranslateNames->mpLocalizedNames;
+        if ( rName.Equals( pLocalizedName ) )
         {
-            if ( rName.Equals( pLocaliziedName ) )
-            {
-                rName.AssignAscii( pTranslateNames->mpEnglishName );
-                bTranslate = FALSE;
-                break;
-            }
-
-            // Run to the end of the Token (\0\0 is the end mark)
-            while ( *pLocaliziedName )
-                pLocaliziedName++;
-            pLocaliziedName++;
+            rName.AssignAscii( pTranslateNames->mpEnglishName );
+            break;
         }
 
         pTranslateNames++;
@@ -1216,7 +1283,7 @@
     }
     fprintf( stderr, "   OutputDevice::GetDefaultFont() Type=\"%s\" lang=%d flags=%d FontName=\"%s\"\n",
 	     s, eLang, nFlags,
-	     OUStringToOString( aFont.GetName(), osl_getThreadTextEncoding() ).getStr()
+	     OUStringToOString( aFont.GetName(), RTL_TEXTENCODING_UTF8 ).getStr()
 	     );
 #endif
 
@@ -4927,7 +4994,7 @@
 
 #if OSL_DEBUG_LEVEL > 2
     fprintf( stderr, "   OutputDevice::SetFont() FontName=\"%s\"\n",
-	     OUStringToOString( aFont.GetName(), osl_getThreadTextEncoding() ).getStr() );
+	     OUStringToOString( aFont.GetName(), RTL_TEXTENCODING_UTF8 ).getStr() );
 #endif
 
     if ( !maFont.IsSameInstance( aFont ) )
@@ -5327,7 +5394,7 @@
 
 #if OSL_DEBUG_LEVEL > 2
     fprintf( stderr, "   OutputDevice::DrawText(\"%s\")\n",
-	     OUStringToOString( rStr, osl_getThreadTextEncoding() ).getStr() );
+	     OUStringToOString( rStr, RTL_TEXTENCODING_UTF8 ).getStr() );
 #endif
 
     if ( mpMetaFile )
