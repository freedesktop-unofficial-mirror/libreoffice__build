Index: vcl/unx/source/window/FWS.cxx
===================================================================
RCS file: /cvs/gsl/vcl/unx/source/window/FWS.cxx,v
retrieving revision 1.2
retrieving revision 1.3
diff -u -p -u -r1.2 -r1.3
--- vcl/unx/source/window/FWS.cxx	15 Apr 2003 16:11:53 -0000	1.2
+++ vcl/unx/source/window/FWS.cxx	30 Mar 2004 13:44:17 -0000	1.3
@@ -116,7 +116,7 @@ WMSupportsFWS (Display *display, int scr
 	unsigned long   propItems;
 	unsigned long   propBytesAfter;
 	unsigned char   *propData;
-	char            propName[30];
+	char            propName[64];
 
 	FWS_CLIENT         = XInternAtom(display, "_SUN_FWS_CLIENT",         False);
 	FWS_COMM_WINDOW    = XInternAtom(display, "_SUN_FWS_COMM_WINDOW",    False);
@@ -133,7 +133,7 @@ WMSupportsFWS (Display *display, int scr
 	WM_PROTOCOLS       = XInternAtom(display, "WM_PROTOCOLS",            False);
 	WM_CHANGE_STATE    = XInternAtom(display, "WM_CHANGE_STATE",         False);
 
-	sprintf (propName, "_SUN_FWS_NEXT_ICON_%d", screen);
+	snprintf (propName, sizeof(propName), "_SUN_FWS_NEXT_ICON_%d", screen);
 	fwsIconAtom        = XInternAtom(display, propName, False);
 
 	if (XGetWindowProperty (display, DefaultRootWindow (display),
Index: vcl/unx/source/window/makefile.mk
===================================================================
RCS file: /cvs/gsl/vcl/unx/source/window/makefile.mk,v
retrieving revision 1.2
retrieving revision 1.5
diff -u -p -u -r1.2 -r1.5
--- vcl/unx/source/window/makefile.mk	27 Aug 2002 17:49:59 -0000	1.2
+++ vcl/unx/source/window/makefile.mk	10 May 2004 16:00:26 -0000	1.5
@@ -83,9 +83,11 @@ dummy:
 
 .ELSE		# "$(GUIBASE)"!="unx"
 
-.IF "$(remote)"
 SLOFILES=	\
-		$(SLO)/FWS.obj $(SLO)/salframe.obj $(SLO)/salobj.obj
+		$(SLO)/FWS.obj $(SLO)/salframe.obj $(SLO)/salobj.obj $(SLO)/salmenu.obj
+
+.IF "$(WITH_WIDGETSET)"!=""
+CFLAGS+= $(WIDGETSET_CFLAGS)
 .ENDIF
 
 .ENDIF		# "$(GUIBASE)"!="unx"
Index: vcl/unx/source/window/salframe.cxx
===================================================================
RCS file: /cvs/gsl/vcl/unx/source/window/salframe.cxx,v
retrieving revision 1.163.46.5.22.1
retrieving revision 1.179
diff -u -p -u -r1.163.46.5.22.1 -r1.179
--- vcl/unx/source/window/salframe.cxx	9 May 2004 15:15:35 -0000	1.163.46.5.22.1
+++ vcl/unx/source/window/salframe.cxx	17 Jun 2004 12:29:52 -0000	1.179
@@ -58,9 +59,6 @@
  *
  ************************************************************************/
 
-#define _SV_SALFRAME_CXX
-
-// -=-= #includes =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 #include <string.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -89,11 +87,11 @@
 #ifndef _SV_SALINST_HXX
 #include <salinst.hxx>
 #endif
-#ifndef _SV_SALGDI_HXX
-#include <salgdi.hxx>
+#ifndef _SV_SALGDI_H
+#include <salgdi.h>
 #endif
-#ifndef _SV_SALFRAME_HXX
-#include <salframe.hxx>
+#ifndef _SV_SALFRAME_H
+#include <salframe.h>
 #endif
 #ifndef _SV_KEYCOES_HXX
 #include <keycodes.hxx>
@@ -116,13 +114,11 @@
 #ifndef _VCL_WMADAPTOR_HXX_
 #include <wmadaptor.hxx>
 #endif
-#ifndef _USE_PRINT_EXTENSION_
 #ifndef _PSPRINT_PRINTERINFOMANAGER_HXX_
 #include <psprint/printerinfomanager.hxx>
 #endif
-#ifndef _SV_SALPRN_HXX
-#include <salprn.hxx>
-#endif
+#ifndef _SV_SALPRN_H
+#include <salprn.h>
 #endif
 #ifndef _SV_FLOATWIN_HXX
 #include <floatwin.hxx>
@@ -132,8 +128,8 @@
 #endif
 #include <svapp.hxx>
 
-#ifndef _SV_SALBMP_HXX
-#include <salbmp.hxx>
+#ifndef _SV_SALBMP_H
+#include <salbmp.h>
 #endif
 
 #ifndef _SAL_I18N_INPUTCONTEXT_HXX
@@ -177,24 +173,15 @@ using namespace vcl;
 								| ColormapChangeMask
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-#define _GetDrawable()		maFrameData.GetDrawable()
-#define _GetDisplay()		maFrameData.pDisplay_
-#define _GetXDisplay()		maFrameData.GetXDisplay()
-#define _GetColormap()		maFrameData.GetColormap()
-#define _GetPaintRegion()	maFrameData.GetPaintRegion()
-#define _IsMapped() 		maFrameData.bMapped_
 
 static XLIB_Window	hPresentationWindow = None, hPresFocusWindow = None;
 static ::std::list< XLIB_Window > aPresentationReparentList;
 static int			nVisibleFloats		= 0;
 
-SalFrame* SalFrameData::s_pSaveYourselfFrame = NULL;
+X11SalFrame* X11SalFrame::s_pSaveYourselfFrame = NULL;
 
 // -=-= C++ statics =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-static long sal_CallbackDummy( void*, SalFrame*, USHORT, const void* )
-{ return 0; }
-
 static void doReparentPresentationDialogues( SalDisplay* pDisplay )
 {
     BOOL bIgnore = pDisplay->GetXLib()->GetIgnoreXErrors();
@@ -255,10 +242,10 @@ static char* getFrameResName()
         {
             const char* pEnv = getenv( "RESOURCE_NAME" );
             if( pEnv && *pEnv )
-                strncpy( pResName, pEnv, sizeof(pResName)-1 );
+                snprintf( pResName, sizeof(pResName), "%s", pEnv );
         }
         if( !*pResName )
-            strcpy( pResName, "VCLSalFrame" );
+            snprintf( pResName, sizeof(pResName), "%s", "VCLSalFrame" );
     }
     return pResName;
 }
@@ -277,67 +264,18 @@ static char* getFrameClassName()
 
         if( aProduct.getLength() )
         {
-            strncpy( pClassName, ::rtl::OUStringToOString( aProduct, osl_getThreadTextEncoding() ).getStr(), sizeof( pClassName )-1 );
+            snprintf( pClassName, sizeof(pClassName), "%s", ::rtl::OUStringToOString( aProduct, osl_getThreadTextEncoding() ).getStr() );
         }
         else
-            strcpy( pClassName, "VCLSalFrame" );
+            snprintf( pClassName, sizeof(pClassName), "%s", "VCLSalFrame" );
     }
     return pClassName;
 }
 
-// -=-= SalInstance =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-SalFrame *SalInstance::CreateFrame( SalFrame *pParent,
-										  ULONG nSalFrameStyle )
-{
-	SalFrame *pFrame = new SalFrame;
-
-	pFrame->maFrameData.mpParent = pParent;
-	if( pParent )
-		pParent->maFrameData.maChildren.push_back( pFrame );
-	pFrame->maFrameData.Init( nSalFrameStyle );
-
-    // initialize system settings update
-    DtIntegrator* pIntegrator = DtIntegrator::CreateDtIntegrator( pFrame );
-    pIntegrator->Acquire();
-
-	return pFrame;
-}
-
-SalFrame* SalInstance::CreateChildFrame( SystemParentData* pParentData, ULONG nStyle )
-{
-	SalFrame* pFrame = new SalFrame;
-	pFrame->maFrameData.mpParent = NULL;
-	pFrame->maFrameData.Init( nStyle, pParentData );
-
-	return pFrame;
-}
-
-void SalInstance::DestroyFrame( SalFrame* pFrame )
-{
-	delete pFrame;
-}
-
-// -=-= SalGraphics / SalGraphicsData =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalGraphicsData::Init( SalFrame *pFrame )
-{
-	xColormap_		= &pFrame->_GetColormap();
-	hDrawable_		= pFrame->_GetDrawable();
-
-	bWindow_		= TRUE;
-    m_pFrame		= pFrame;
-    m_pVDev			= NULL;
-
-	nPenPixel_		= GetPixel( nPenColor_ );
-	nTextPixel_ 	= GetPixel( nTextColor_ );
-	nBrushPixel_	= GetPixel( nBrushColor_ );
-}
-
-// -=-= SalFrame / SalFrameData =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
+// -=-= SalFrame / X11SalFrame =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-bool SalFrameData::IsOverrideRedirect() const
+bool X11SalFrame::IsOverrideRedirect() const
 {
     return
         ((nStyle_ & SAL_FRAME_STYLE_INTRO) && !pDisplay_->getWMAdaptor()->supportsSplash())
@@ -346,7 +284,7 @@ bool SalFrameData::IsOverrideRedirect() 
         ;
 }
 
-bool SalFrameData::IsFloatGrabWindow() const
+bool X11SalFrame::IsFloatGrabWindow() const
 {
     static const char* pDisableGrab = getenv( "SAL_DISABLE_FLOATGRAB" );
 
@@ -357,7 +295,7 @@ bool SalFrameData::IsFloatGrabWindow() c
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrameData::Init( ULONG nSalFrameStyle, SystemParentData* pParentData )
+void X11SalFrame::Init( ULONG nSalFrameStyle, SystemParentData* pParentData )
 {
 	nStyle_ 	= nSalFrameStyle;
 	XWMHints Hints;
@@ -394,7 +332,7 @@ void SalFrameData::Init( ULONG nSalFrame
 	{
         // plugin parent may be killed unexpectedly by
         // plugging process; ignore XErrors in that case
-        GetDisplay()->GetXLib()->SetIgnoreXErrors( TRUE );
+        GetDisplay()->setHaveSystemChildFrame();
 
 		nStyle_ |= SAL_FRAME_STYLE_CHILD;
         Attributes.override_redirect = True;
@@ -430,11 +368,12 @@ void SalFrameData::Init( ULONG nSalFrame
 
 		// check if this is really one of our own frames
 		// do not change the input mask in that case
-		SalFrame* pFrame = GetSalData()->pFirstFrame_;
-		while( pFrame && mhForeignParent != pFrame->maFrameData.GetWindow() )
-			pFrame = pFrame->maFrameData.pNextFrame_;
+        const std::list< SalFrame* >& rFrames = GetDisplay()->getFrames();
+        std::list< SalFrame* >::const_iterator it = rFrames.begin();
+		while( it != rFrames.end() && mhForeignParent != static_cast<X11SalFrame*>(*it)->GetWindow() )
+            ++it;
 
-		if( ! pFrame )
+		if( it == rFrames.end() )
 		{
 			XSelectInput( GetDisplay()->GetDisplay(), mhForeignParent, StructureNotifyMask | FocusChangeMask );
 			XSelectInput( GetDisplay()->GetDisplay(), mhShellWindow, StructureNotifyMask | FocusChangeMask );
@@ -464,17 +403,24 @@ void SalFrameData::Init( ULONG nSalFrame
         if( ! mpParent )
         {
             // find the last document window (if any)
-            SalFrame* pFrame = pNextFrame_;
-            while( pFrame &&
-                   ( pFrame->maFrameData.mpParent
-                     || pFrame->maFrameData.mbFullScreen
-                     || ! ( pFrame->maFrameData.nStyle_ & SAL_FRAME_STYLE_SIZEABLE )
-                     || ! pFrame->GetUnmirroredGeometry().nWidth
-                     || ! pFrame->GetUnmirroredGeometry().nHeight
-                     )
-                   )
-                pFrame = pFrame->maFrameData.pNextFrame_;
-            if( pFrame )
+            X11SalFrame* pFrame = NULL;
+            const std::list< SalFrame* >& rFrames = GetDisplay()->getFrames();
+            std::list< SalFrame* >::const_iterator it = rFrames.begin();
+            while( it != rFrames.end() )
+            {
+                pFrame = static_cast< X11SalFrame* >(*it);
+                if( ! ( pFrame->mpParent
+                        || pFrame->mbFullScreen
+                        || ! ( pFrame->nStyle_ & SAL_FRAME_STYLE_SIZEABLE )
+                        || ! pFrame->GetUnmirroredGeometry().nWidth
+                        || ! pFrame->GetUnmirroredGeometry().nHeight
+                        )
+                    )
+                    break;
+                ++it;
+            }
+            
+            if( it != rFrames.end() )
             {
                 // set a document position and size
                 // the first frame gets positioned by the window manager
@@ -472,7 +472,7 @@
         if( IsOverrideRedirect() )
             Attributes.override_redirect = True;
         // default icon
-        if( SelectAppIconPixmap( pDisplay_, mpParent ? mpParent->maFrameData.mnIconID : 1, 32,
+        if( SelectAppIconPixmap( pDisplay_, mpParent ? mpParent->mnIconID : 1, 32,
                                  Hints.icon_pixmap, Hints.icon_mask ))
         {
             Hints.flags		|= IconPixmapHint;
@@ -481,19 +481,19 @@
         }
 
 		// find the top level frame of the transience hierarchy
-        SalFrame* pFrame = pFrame_;
-        while( pFrame->maFrameData.mpParent )
-            pFrame = pFrame->maFrameData.mpParent;
-		if( (pFrame->maFrameData.nStyle_ & SAL_FRAME_STYLE_CHILD ) )
+        X11SalFrame* pFrame = this;
+        while( pFrame->mpParent )
+            pFrame = pFrame->mpParent;
+		if( (pFrame->nStyle_ & SAL_FRAME_STYLE_CHILD ) )
 		{
 			// if the top level window is a plugin window,
 			// then we should place us in the same window group as
 			// the parent application (or none if there is no window group
 			// hint in the parent).
-			if( pFrame->maFrameData.GetShellWindow() )
+			if( pFrame->GetShellWindow() )
 			{
 				XWMHints* pWMHints = XGetWMHints( pDisplay_->GetDisplay(),
-					pFrame->maFrameData.GetShellWindow() );
+					pFrame->GetShellWindow() );
 				if( pWMHints )
 				{
 					if( (pWMHints->flags & WindowGroupHint) )
@@ -508,7 +508,7 @@
 		else
 		{
 			Hints.flags			|= WindowGroupHint;
-			Hints.window_group	= pFrame->maFrameData.GetShellWindow();
+			Hints.window_group	= pFrame->GetShellWindow();
 			// note: for a normal document window this will produce None
 			// as the window is not yet created and the shell window is
 			// initialized to None. This must be corrected after window creation.
@@ -535,10 +535,10 @@
 			Hints.window_group = GetShellWindow();
 	}
 
-    pFrame_->maGeometry.nX		= x;
-    pFrame_->maGeometry.nY		= y;
-    pFrame_->maGeometry.nWidth	= w;
-    pFrame_->maGeometry.nHeight	= h;
+    maGeometry.nX		= x;
+    maGeometry.nY		= y;
+    maGeometry.nWidth	= w;
+    maGeometry.nHeight	= h;
 
     XSync( GetXDisplay(), False );
 
@@ -571,7 +517,7 @@ void SalFrameData::Init( ULONG nSalFrame
         {
             // at all times have only one frame with SaveYourself
             a[n++] = pDisplay_->getWMAdaptor()->getAtom( WMAdaptor::WM_SAVE_YOURSELF );
-            s_pSaveYourselfFrame = pFrame_;
+            s_pSaveYourselfFrame = this;
         }
 		XSetWMProtocols( GetXDisplay(), GetShellWindow(), a, n );
 
@@ -634,34 +580,35 @@ void SalFrameData::Init( ULONG nSalFrame
             eType = WMAdaptor::windowType_Utility;
 
         GetDisplay()->getWMAdaptor()->
-            setFrameTypeAndDecoration( pFrame_,
+            setFrameTypeAndDecoration( this,
                                        eType,
                                        nDecoFlags,
                                        hPresentationWindow ? NULL : mpParent );
 
 	    if( nStyle_ & SAL_FRAME_STYLE_DEFAULT )
-		pDisplay_->getWMAdaptor()->maximizeFrame( pFrame_, true, true );
+		pDisplay_->getWMAdaptor()->maximizeFrame( this, true, true );
 	}
 
 	// Pointer
-	pFrame_->SetPointer( POINTER_ARROW );
+	SetPointer( POINTER_ARROW );
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-inline SalFrameData::SalFrameData( SalFrame *pFrame )
+X11SalFrame::X11SalFrame( SalFrame *pParent, ULONG nSalFrameStyle, SystemParentData* pSystemParent )
 {
 	SalData* pSalData = GetSalData();
 
-	// insert frame in framelist
-	pNextFrame_ 				= pSalData->pFirstFrame_;
-	pSalData->pFirstFrame_		= pFrame;
-	pFrame_ 					= pFrame;
+    // initialize frame geometry
+    memset( &maGeometry, 0, sizeof(maGeometry) );
+
+    mpParent					= static_cast< X11SalFrame* >( pParent );
+
     mbTransientForRoot			= false;
 
-	pProc_						= sal_CallbackDummy;
-	pInst_						= (void*)ILLEGAL_POINTER;
+	pDisplay_					= pSalData->GetDisplay();
+	// insert frame in framelist
+    pDisplay_->registerFrame( this );
 
-	pDisplay_					= pSalData->GetCurDisp();
     mhWindow					= None;
     mhShellWindow				= None;
     mhStackingWindow			= None;
@@ -702,10 +649,10 @@ inline SalFrameData::SalFrameData( SalFr
     mbDeleteInputContext		= false;
 	mbInputFocus				= False;
 
-	maResizeTimer.SetTimeoutHdl( LINK( this, SalFrameData, HandleResizeTimer ) );
+	maResizeTimer.SetTimeoutHdl( LINK( this, X11SalFrame, HandleResizeTimer ) );
 	maResizeTimer.SetTimeout( 50 );
 
-    maAlwaysOnTopRaiseTimer.SetTimeoutHdl( LINK( this, SalFrameData, HandleAlwaysOnTopRaise ) );
+    maAlwaysOnTopRaiseTimer.SetTimeoutHdl( LINK( this, X11SalFrame, HandleAlwaysOnTopRaise ) );
     maAlwaysOnTopRaiseTimer.SetTimeout( 100 );
 
     mpDeleteData                = NULL;
@@ -718,46 +665,72 @@ inline SalFrameData::SalFrameData( SalFr
     mbFullScreen				= false;
     mbMoved						= false;
     mbSized						= false;
-    mbWasGraphicsPaint			= false;
 
     mnIconID					= 0; // ICON_DEFAULT
-}
 
-SalFrame::SalFrame() : maFrameData( this )
-{
-    memset( &maGeometry, 0, sizeof(maGeometry) );
+	if( mpParent )
+		mpParent->maChildren.push_back( this );
+
+	Init( nSalFrameStyle, pSystemParent );
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrameData::passOnSaveYourSelf()
+void X11SalFrame::passOnSaveYourSelf()
 {
-    if( pFrame_ == s_pSaveYourselfFrame )
+    if( this == s_pSaveYourselfFrame )
     {
         SalData* pSalData = GetSalData();
 
         // pass on SaveYourself
-        SalFrame* pFrame = pSalData->pFirstFrame_;
-        while( pFrame && ( ( pFrame->maFrameData.nStyle_ & (SAL_FRAME_STYLE_FLOAT|SAL_FRAME_STYLE_CHILD) ) || pFrame->maFrameData.mpParent  ) )
-            pFrame = pFrame->maFrameData.GetNextFrame();
-        s_pSaveYourselfFrame = pFrame;
-        if( pFrame )
+        X11SalFrame* pFrame = NULL;
+        const std::list< SalFrame* >& rFrames = GetDisplay()->getFrames();
+        std::list< SalFrame* >::const_iterator it = rFrames.begin();
+        while( it != rFrames.end() )
+        {
+            pFrame = static_cast< X11SalFrame* >(*it);
+            if( ! (pFrame->nStyle_ & (SAL_FRAME_STYLE_FLOAT|SAL_FRAME_STYLE_CHILD) || pFrame->mpParent ) )
+                break;
+            ++it;    
+        }
+        
+        s_pSaveYourselfFrame = (it != rFrames.end() ) ? pFrame : NULL;
+        if( s_pSaveYourselfFrame )
         {
             Atom a[4];
             int  n = 0;
             a[n++] = pDisplay_->getWMAdaptor()->getAtom( WMAdaptor::WM_DELETE_WINDOW );
             a[n++] = pDisplay_->getWMAdaptor()->getAtom( WMAdaptor::WM_SAVE_YOURSELF );
-            XSetWMProtocols( GetXDisplay(), pFrame->maFrameData.GetShellWindow(), a, n );
+            XSetWMProtocols( GetXDisplay(), s_pSaveYourselfFrame->GetShellWindow(), a, n );
         }
     }
 }
 
-inline SalFrameData::~SalFrameData()
+X11SalFrame::~X11SalFrame()
 {
+    if( mhStackingWindow )
+        aPresentationReparentList.remove( mhStackingWindow );
+
+	// remove from parent's list
+	if( mpParent )
+		mpParent->maChildren.remove( this );
+
+    // deregister on SalDisplay
+    pDisplay_->deregisterFrame( this );
+
+	// unselect all events, some may be still in the queue anyway
+	XSelectInput( GetXDisplay(), GetShellWindow(), 0 );
+	XSelectInput( GetXDisplay(), GetWindow(), 0 );
+
+	ShowFullScreen( FALSE );
+
+	if( bMapped_ )
+		Show( FALSE );
+
     if( mpInputContext )
     {
-        mpInputContext->UnsetICFocus( pFrame_ );
-        mpInputContext->Unmap( pFrame_ );
+        mpInputContext->UnsetICFocus( this );
+        mpInputContext->Unmap( this );
         if( mbDeleteInputContext )
             delete mpInputContext;
     }
@@ -772,82 +745,53 @@ inline SalFrameData::~SalFrameData()
 
 	if( pGraphics_ )
 	{
-		stderr0( "SalFrameData::~SalFrameData pGraphics_\n" );
-		pGraphics_->maGraphicsData.DeInit();
+		pGraphics_->DeInit();
 		delete pGraphics_;
 	}
 
 	if( pFreeGraphics_ )
 	{
-		pFreeGraphics_->maGraphicsData.DeInit();
+		pFreeGraphics_->DeInit();
 		delete pFreeGraphics_;
 	}
 
-    XDestroyWindow( GetXDisplay(), mhWindow );
-
-	SalData* pSalData = GetSalData();
 
-	if( pFrame_ == pSalData->pFirstFrame_ )
-		pSalData->pFirstFrame_ = GetNextFrame();
-	else
-	{
-		SalFrameData *pTemp = &pSalData->pFirstFrame_->maFrameData;
-		while( pTemp->GetNextFrame() != pFrame_ )
-			pTemp = &pTemp->GetNextFrame()->maFrameData;
+    XDestroyWindow( GetXDisplay(), mhWindow );
 
-		pTemp->pNextFrame_ = GetNextFrame();
-	}
     /*
-     *  check if there is only the status frame is left
+     *  check if there is only the status frame left
      *  if so, free it
      */
     SalFrame* pStatusFrame = I18NStatus::get().getStatusFrame();
+    std::list< SalFrame* >::const_iterator sit = GetDisplay()->getFrames().begin();
     if( pStatusFrame
-        && pSalData->pFirstFrame_ == pStatusFrame
-        && pSalData->pFirstFrame_->maFrameData.GetNextFrame() == NULL )
-        ::vcl::I18NStatus::free();
+        && *sit == pStatusFrame
+        && ++sit == GetDisplay()->getFrames().end() )
+        vcl::I18NStatus::free();
 
     passOnSaveYourSelf();
 }
 
-SalFrame::~SalFrame()
-{
-    if( maFrameData.mhStackingWindow )
-        aPresentationReparentList.remove( maFrameData.mhStackingWindow );
-	// aus papis child liste entfernen
-	if( maFrameData.mpParent )
-		maFrameData.mpParent->maFrameData.maChildren.remove( this );
-	// einige kommen trotzdem immer noch durch
-	XSelectInput( _GetXDisplay(), maFrameData.GetShellWindow(), 0 );
-	XSelectInput( _GetXDisplay(), maFrameData.GetWindow(), 0 );
-
-	ShowFullScreen( FALSE );
-
-	if( _IsMapped() )
-		Show( FALSE );
-}
-
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-// irgendwann auf Liste umstellen
 
-const SystemChildData* SalFrame::GetSystemData() const
+const SystemChildData* X11SalFrame::GetSystemData() const
 {
-	SalFrame *pFrame = const_cast<SalFrame*>(this);
-	pFrame->maFrameData.maSystemChildData.nSize 		= sizeof( SystemChildData );
-	pFrame->maFrameData.maSystemChildData.pDisplay		= _GetXDisplay();
-	pFrame->maFrameData.maSystemChildData.aWindow		= pFrame->maFrameData.GetWindow();
-	pFrame->maFrameData.maSystemChildData.pSalFrame 	= pFrame;
-	pFrame->maFrameData.maSystemChildData.pWidget		= NULL;
-	pFrame->maFrameData.maSystemChildData.pVisual		= _GetDisplay()->GetVisual()->GetVisual();
-	pFrame->maFrameData.maSystemChildData.nDepth		= _GetDisplay()->GetVisual()->GetDepth();
-	pFrame->maFrameData.maSystemChildData.aColormap		= _GetDisplay()->GetColormap().GetXColormap();
-	pFrame->maFrameData.maSystemChildData.pAppContext	= NULL;
-	pFrame->maFrameData.maSystemChildData.aShellWindow	= pFrame->maFrameData.GetShellWindow();
-	pFrame->maFrameData.maSystemChildData.pShellWidget	= NULL;
-	return &maFrameData.maSystemChildData;
+	X11SalFrame *pFrame = const_cast<X11SalFrame*>(this);
+	pFrame->maSystemChildData.nSize 		= sizeof( SystemChildData );
+	pFrame->maSystemChildData.pDisplay		= GetXDisplay();
+	pFrame->maSystemChildData.aWindow		= pFrame->GetWindow();
+	pFrame->maSystemChildData.pSalFrame 	= pFrame;
+	pFrame->maSystemChildData.pWidget		= NULL;
+	pFrame->maSystemChildData.pVisual		= GetDisplay()->GetVisual()->GetVisual();
+	pFrame->maSystemChildData.nDepth		= GetDisplay()->GetVisual()->GetDepth();
+	pFrame->maSystemChildData.aColormap		= GetDisplay()->GetColormap().GetXColormap();
+	pFrame->maSystemChildData.pAppContext	= NULL;
+	pFrame->maSystemChildData.aShellWindow	= pFrame->GetShellWindow();
+	pFrame->maSystemChildData.pShellWidget	= NULL;
+	return &maSystemChildData;
 }
 
-SalGraphics *SalFrameData::GetGraphics()
+SalGraphics *X11SalFrame::GetGraphics()
 {
 	if( pGraphics_ )
 		return NULL;
@@ -859,50 +803,46 @@ SalGraphics *SalFrameData::GetGraphics()
 	}
 	else
 	{
-		pGraphics_ = new SalGraphicsLayout;
-		pGraphics_->maGraphicsData.Init( pFrame_ );
+		pGraphics_ = new X11SalGraphics();
+		pGraphics_->Init( this, GetWindow() );
 	}
 
 	return pGraphics_;
 }
 
-SalGraphics *SalFrame::GetGraphics()
-{ return maFrameData.GetGraphics(); }
-
-void SalFrame::ReleaseGraphics( SalGraphics *pGraphics )
+void X11SalFrame::ReleaseGraphics( SalGraphics *pGraphics )
 {
-	if( pGraphics != maFrameData.pGraphics_ )
-	{
-		stderr0( "SalFrame::ReleaseGraphics pGraphics!=pGraphics_" );
+    DBG_ASSERT( pGraphics == pGraphics_, "SalFrame::ReleaseGraphics pGraphics!=pGraphics_" );
+
+	if( pGraphics != pGraphics_ )
 		return;
-	}
 
-	maFrameData.pFreeGraphics_	= pGraphics;
-	maFrameData.pGraphics_		= NULL;
+	pFreeGraphics_	= pGraphics_;
+	pGraphics_		= NULL;
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrame::Enable( BOOL bEnable )
+void X11SalFrame::Enable( BOOL bEnable )
 {
 	// NYI: enable/disable frame
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrame::SetIcon( USHORT nIcon )
+void X11SalFrame::SetIcon( USHORT nIcon )
 {
-    if ( !( maFrameData.nStyle_ & (SAL_FRAME_STYLE_CHILD|SAL_FRAME_STYLE_FLOAT) ) )
+    if ( !( nStyle_ & (SAL_FRAME_STYLE_CHILD|SAL_FRAME_STYLE_FLOAT) ) )
     {
-        maFrameData.mnIconID = nIcon;
+        mnIconID = nIcon;
 
         XIconSize *pIconSize = NULL;
         int nSizes = 0;
         int iconSize = 32;
-        if ( XGetIconSizes( _GetXDisplay(), _GetDisplay()->GetRootWindow(), &pIconSize, &nSizes ) )
+        if ( XGetIconSizes( GetXDisplay(), GetDisplay()->GetRootWindow(), &pIconSize, &nSizes ) )
         {
 #if OSL_DEBUG_LEVEL > 1
-            fprintf(stderr, "SalFrame::SetIcon(): found %d IconSizes:\n", nSizes);
+            fprintf(stderr, "X11SalFrame::SetIcon(): found %d IconSizes:\n", nSizes);
 #endif
 
             const int ourLargestIconSize = 48;
@@ -941,7 +881,7 @@ void SalFrame::SetIcon( USHORT nIcon )
                // the max icon size from |XGetIconSizes()|.  Provide a
                // better icon size default value, in case our window manager
                // is olwm/olvwm.
-               const String& rWM( maFrameData.pDisplay_->getWMAdaptor()->getWindowManagerName() );
+               const String& rWM( pDisplay_->getWMAdaptor()->getWindowManagerName() );
 
                if ( rWM.EqualsAscii( "Olwm" ) )
                    iconSize = 48;
@@ -951,7 +891,7 @@ void SalFrame::SetIcon( USHORT nIcon )
         }
         else
         {
-            const String& rWM( maFrameData.pDisplay_->getWMAdaptor()->getWindowManagerName() );
+            const String& rWM( pDisplay_->getWMAdaptor()->getWindowManagerName() );
             if( rWM.EqualsAscii( "KWin" ) )			// assume KDE is running
                 iconSize = 16;
             static bool bGnomeIconSize = false;
@@ -960,12 +900,12 @@ void SalFrame::SetIcon( USHORT nIcon )
             {
                 bGnomeChecked=true;
                 int nCount = 0;
-                Atom* pProps = XListProperties( _GetXDisplay(),
-                                                _GetDisplay()->GetRootWindow(),
+                Atom* pProps = XListProperties( GetXDisplay(),
+                                                GetDisplay()->GetRootWindow(),
                                                 &nCount );
                 for( int i = 0; i < nCount && !bGnomeIconSize; i++ )
                  {
-                    char* pName = XGetAtomName( _GetXDisplay(), pProps[i] );
+                    char* pName = XGetAtomName( GetXDisplay(), pProps[i] );
                     if( !strcmp( pName, "GNOME_PANEL_DESKTOP_AREA" ) )
                         bGnomeIconSize = true;
                     if( pName )
@@ -980,7 +920,7 @@ void SalFrame::SetIcon( USHORT nIcon )
 
         XWMHints Hints;
         Hints.flags = 0;
-		XWMHints *pHints = XGetWMHints( _GetXDisplay(), maFrameData.GetShellWindow() );
+		XWMHints *pHints = XGetWMHints( GetXDisplay(), GetShellWindow() );
         if( pHints )
         {
             memcpy(&Hints, pHints, sizeof( XWMHints ));
@@ -988,12 +928,12 @@ void SalFrame::SetIcon( USHORT nIcon )
         }
         pHints = &Hints;
 
-		BOOL bOk = SelectAppIconPixmap( maFrameData.GetDisplay(), nIcon, iconSize,
+		BOOL bOk = SelectAppIconPixmap( GetDisplay(), nIcon, iconSize,
                 pHints->icon_pixmap, pHints->icon_mask );
         if ( !bOk )
         {
             // load default icon (0)
-		    bOk = SelectAppIconPixmap( maFrameData.GetDisplay(), 0, iconSize,
+		    bOk = SelectAppIconPixmap( GetDisplay(), 0, iconSize,
                 pHints->icon_pixmap, pHints->icon_mask );
         }
 		if( bOk )
@@ -1002,29 +942,29 @@ void SalFrame::SetIcon( USHORT nIcon )
 		    if( pHints->icon_mask )
 			    pHints->flags |= IconMaskHint;
 
-		    XSetWMHints( _GetXDisplay(), maFrameData.GetShellWindow(), pHints );
+		    XSetWMHints( GetXDisplay(), GetShellWindow(), pHints );
         }
 	}
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrame::SetMinClientSize( long nWidth, long nHeight )
+void X11SalFrame::SetMinClientSize( long nWidth, long nHeight )
 {
-	if( maFrameData.GetShellWindow() )
+	if( GetShellWindow() )
 	{
         XSizeHints* pHints = XAllocSizeHints();
         long nSupplied = 0;
-        XGetWMNormalHints( _GetXDisplay(),
-                           maFrameData.GetShellWindow(),
+        XGetWMNormalHints( GetXDisplay(),
+                           GetShellWindow(),
                            pHints,
                            &nSupplied
                            );
         pHints->min_width	= nWidth;
         pHints->min_height	= nHeight;
         pHints->flags |= PMinSize;
-        XSetWMNormalHints( _GetXDisplay(),
-                           maFrameData.GetShellWindow(),
+        XSetWMNormalHints( GetXDisplay(),
+                           GetShellWindow(),
                            pHints );
         XFree( pHints );
 	}
@@ -1032,28 +972,29 @@ void SalFrame::SetMinClientSize( long nW
 
 // Show + Pos (x,y,z) + Size (width,height)
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::Show( BOOL bVisible, BOOL /*bNoActivate*/ )
+void X11SalFrame::Show( BOOL bVisible, BOOL /*bNoActivate*/ )
 {
-    if( ( bVisible && maFrameData.bMapped_ )
-        || ( !bVisible && !maFrameData.bMapped_ ) )
+    if( ( bVisible && bMapped_ )
+        || ( !bVisible && !bMapped_ ) )
         return;
 
-	maFrameData.bMapped_   = bVisible;
-	maFrameData.bViewable_ = bVisible;
+	bMapped_   = bVisible;
+	bViewable_ = bVisible;
 	if( bVisible )
 	{
         SessionManagerClient::open(); // will simply return after the first time
 
-        maFrameData.mbInShow = TRUE;
-        if( ! (maFrameData.nStyle_ & SAL_FRAME_STYLE_INTRO) )
+        mbInShow = TRUE;
+        if( ! (nStyle_ & SAL_FRAME_STYLE_INTRO) )
         {
-            SalFrame* pFrame = GetSalData()->pFirstFrame_;
-            while( pFrame )
+            // hide all INTRO frames
+            const std::list< SalFrame* >& rFrames = GetDisplay()->getFrames();
+            for( std::list< SalFrame* >::const_iterator it = rFrames.begin(); it != rFrames.end(); ++it )
             {
+                X11SalFrame* pFrame = static_cast< X11SalFrame* >(*it);
                 // look for intro bit map; if present, hide it
-                if( pFrame->maFrameData.nStyle_ & SAL_FRAME_STYLE_INTRO )
+                if( pFrame->nStyle_ & SAL_FRAME_STYLE_INTRO )
                     pFrame->Show( FALSE );
-                pFrame = pFrame->maFrameData.pNextFrame_;
             }
         }
 
@@ -1067,38 +1008,38 @@ void SalFrame::Show( BOOL bVisible, BOOL
          *  withdraw the frame AND delete the WM_TRANSIENT_FOR property.
          *  In case the frame is shown again, the transient hint must be restored here.
          */
-        if( ! ( maFrameData.nStyle_ & ( SAL_FRAME_STYLE_FLOAT | SAL_FRAME_STYLE_CHILD ) )
-            && ! maFrameData.IsOverrideRedirect()
-            && maFrameData.mpParent
+        if( ! ( nStyle_ & ( SAL_FRAME_STYLE_FLOAT | SAL_FRAME_STYLE_CHILD ) )
+            && ! IsOverrideRedirect()
+            && mpParent
             )
         {
-            _GetDisplay()->getWMAdaptor()->changeReferenceFrame( this, maFrameData.mpParent );
+            GetDisplay()->getWMAdaptor()->changeReferenceFrame( this, mpParent );
         }
 
         // actually map the window
-        if( maFrameData.GetWindow() != maFrameData.GetShellWindow() )
+        if( GetWindow() != GetShellWindow() )
         {
-            XMapWindow( _GetXDisplay(), maFrameData.GetShellWindow() );
-            XSelectInput( _GetXDisplay(), maFrameData.GetShellWindow(), CLIENT_EVENTS );
+            XMapWindow( GetXDisplay(), GetShellWindow() );
+            XSelectInput( GetXDisplay(), GetShellWindow(), CLIENT_EVENTS );
         }
-        if( maFrameData.nStyle_ & SAL_FRAME_STYLE_FLOAT )
-            XMapRaised( _GetXDisplay(), maFrameData.GetWindow() );
+        if( nStyle_ & SAL_FRAME_STYLE_FLOAT )
+            XMapRaised( GetXDisplay(), GetWindow() );
         else
-            XMapWindow( _GetXDisplay(), maFrameData.GetWindow() );
-		XSelectInput( _GetXDisplay(), maFrameData.GetWindow(), CLIENT_EVENTS );
+            XMapWindow( GetXDisplay(), GetWindow() );
+		XSelectInput( GetXDisplay(), GetWindow(), CLIENT_EVENTS );
 
 		if( maGeometry.nWidth > 0
             && maGeometry.nHeight > 0
-			&& (   maFrameData.nWidth_  != (int)maGeometry.nWidth
-				|| maFrameData.nHeight_ != (int)maGeometry.nHeight ) )
+			&& (   nWidth_  != (int)maGeometry.nWidth
+				|| nHeight_ != (int)maGeometry.nHeight ) )
 		{
-			maFrameData.nWidth_  = maGeometry.nWidth;
-			maFrameData.nHeight_ = maGeometry.nHeight;
+			nWidth_  = maGeometry.nWidth;
+			nHeight_ = maGeometry.nHeight;
 		}
 
-		XSync( _GetXDisplay(), False );
+		XSync( GetXDisplay(), False );
 
-        if( maFrameData.IsFloatGrabWindow() )
+        if( IsFloatGrabWindow() )
         {
             /*
              *  #95453#
@@ -1109,21 +1050,21 @@ void SalFrame::Show( BOOL bVisible, BOOL
              *  a menu because it vanishes as soon as he enters it.
              */
             nVisibleFloats++;
-            if( nVisibleFloats == 1 && ! _GetDisplay()->GetCaptureFrame() )
+            if( nVisibleFloats == 1 && ! GetDisplay()->GetCaptureFrame() )
             {
-                XGrabPointer( _GetXDisplay(),
-                              maFrameData.GetWindow(),
+                XGrabPointer( GetXDisplay(),
+                              GetWindow(),
                               True,
                               PointerMotionMask | ButtonPressMask | ButtonReleaseMask,
                               GrabModeAsync,
                               GrabModeAsync,
                               None,
-                              maFrameData.mpParent ? maFrameData.mpParent->maFrameData.GetCursor() : None,
+                              mpParent ? mpParent->GetCursor() : None,
                               CurrentTime
                               );
             }
         }
-		maFrameData.Call( SALEVENT_RESIZE, NULL );
+		CallCallback( SALEVENT_RESIZE, NULL );
 
         /*
          *  sometimes a message box/dialogue is brought up when a frame is not mapped
@@ -1131,22 +1072,22 @@ void SalFrame::Show( BOOL bVisible, BOOL
          *  so that the dialogue shows in all cases. Correct it here if the
          *  frame is shown afterwards.
          */
-        if( ! ( maFrameData.nStyle_ & ( SAL_FRAME_STYLE_FLOAT | SAL_FRAME_STYLE_CHILD ) )
-            && ! maFrameData.IsOverrideRedirect() )
+        if( ! ( nStyle_ & ( SAL_FRAME_STYLE_FLOAT | SAL_FRAME_STYLE_CHILD ) )
+            && ! IsOverrideRedirect() )
         {
-            for( ::std::list< SalFrame* >::const_iterator it = maFrameData.maChildren.begin();
-                 it != maFrameData.maChildren.end(); ++it )
+            for( std::list< X11SalFrame* >::const_iterator it = maChildren.begin();
+                 it != maChildren.end(); ++it )
             {
-                if( (*it)->maFrameData.mbTransientForRoot )
-                    _GetDisplay()->getWMAdaptor()->changeReferenceFrame( *it, this );
+                if( (*it)->mbTransientForRoot )
+                    GetDisplay()->getWMAdaptor()->changeReferenceFrame( *it, this );
             }
         }
         /*
          *  leave SHOWSTATE_UNKNOWN as this indicates first mapping
          *  and is only reset int HandleSizeEvent
          */
-        if( maFrameData.nShowState_ != SHOWSTATE_UNKNOWN )
-            maFrameData.nShowState_ = SHOWSTATE_NORMAL;
+        if( nShowState_ != SHOWSTATE_UNKNOWN )
+            nShowState_ = SHOWSTATE_NORMAL;
 
         /*
          *  #98107# plugged windows don't necessarily get the
@@ -1154,75 +1095,75 @@ void SalFrame::Show( BOOL bVisible, BOOL
          *  and have the focus. So try to set the focus
          *  to the child on Show(TRUE)
          */
-        if( maFrameData.nStyle_ & SAL_FRAME_STYLE_CHILD )
-            XSetInputFocus( _GetXDisplay(),
-                            maFrameData.GetWindow(),
+        if( nStyle_ & SAL_FRAME_STYLE_CHILD )
+            XSetInputFocus( GetXDisplay(),
+                            GetWindow(),
                             RevertToParent,
                             CurrentTime );
 
-        if( maFrameData.mpParent )
+        if( mpParent )
         {
             // push this frame so it will be in front of its siblings
             // only necessary for insane transient behaviour of Dtwm/olwm
-            maFrameData.mpParent->maFrameData.maChildren.remove( this );
-            maFrameData.mpParent->maFrameData.maChildren.push_front(this);
+            mpParent->maChildren.remove( this );
+            mpParent->maChildren.push_front(this);
         }
 	}
 	else
 	{
-        if( maFrameData.getInputContext() )
-            maFrameData.getInputContext()->Unmap( this );
+        if( getInputContext() )
+            getInputContext()->Unmap( this );
 
-        if( maFrameData.mpParent )
-            XDeleteProperty( _GetXDisplay(), maFrameData.GetShellWindow(), _GetDisplay()->getWMAdaptor()->getAtom( WMAdaptor::WM_TRANSIENT_FOR ) );
-        XWithdrawWindow( _GetXDisplay(), maFrameData.GetWindow(), _GetDisplay()->GetScreenNumber() );
-        maFrameData.nShowState_ = SHOWSTATE_HIDDEN;
-        if( maFrameData.IsFloatGrabWindow() && nVisibleFloats )
+        if( mpParent )
+            XDeleteProperty( GetXDisplay(), GetShellWindow(), GetDisplay()->getWMAdaptor()->getAtom( WMAdaptor::WM_TRANSIENT_FOR ) );
+        XWithdrawWindow( GetXDisplay(), GetWindow(), GetDisplay()->GetScreenNumber() );
+        nShowState_ = SHOWSTATE_HIDDEN;
+        if( IsFloatGrabWindow() && nVisibleFloats )
         {
             nVisibleFloats--;
-            if( nVisibleFloats == 0  && ! _GetDisplay()->GetCaptureFrame() )
-                XUngrabPointer( _GetXDisplay(),
+            if( nVisibleFloats == 0  && ! GetDisplay()->GetCaptureFrame() )
+                XUngrabPointer( GetXDisplay(),
                                 CurrentTime );
         }
 	}
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::ToTop( USHORT nFlags )
+void X11SalFrame::ToTop( USHORT nFlags )
 {
 	if( ( nFlags & SAL_FRAME_TOTOP_RESTOREWHENMIN )
-        && ! ( maFrameData.nStyle_ & SAL_FRAME_STYLE_FLOAT )
-        && maFrameData.nShowState_ != SHOWSTATE_HIDDEN
-        && maFrameData.nShowState_ != SHOWSTATE_UNKNOWN
+        && ! ( nStyle_ & SAL_FRAME_STYLE_FLOAT )
+        && nShowState_ != SHOWSTATE_HIDDEN
+        && nShowState_ != SHOWSTATE_UNKNOWN
         )
     {
-        if( maFrameData.GetWindow() != maFrameData.GetShellWindow() )
-            XMapWindow( _GetXDisplay(), maFrameData.GetShellWindow() );
-        XMapWindow( _GetXDisplay(), maFrameData.GetWindow() );
+        if( GetWindow() != GetShellWindow() )
+            XMapWindow( GetXDisplay(), GetShellWindow() );
+        XMapWindow( GetXDisplay(), GetWindow() );
     }
 
     if( ! (nFlags & SAL_FRAME_TOTOP_GRABFOCUS_ONLY) )
     {
-        XRaiseWindow( _GetXDisplay(), maFrameData.GetShellWindow() );
-        if( ! _GetDisplay()->getWMAdaptor()->isTransientBehaviourAsExpected() )
-            for( std::list< SalFrame* >::const_iterator it = maFrameData.maChildren.begin();
-                 it != maFrameData.maChildren.end(); ++it )
+        XRaiseWindow( GetXDisplay(), GetShellWindow() );
+        if( ! GetDisplay()->getWMAdaptor()->isTransientBehaviourAsExpected() )
+            for( std::list< X11SalFrame* >::const_iterator it = maChildren.begin();
+                 it != maChildren.end(); ++it )
                 (*it)->ToTop( nFlags & ~SAL_FRAME_TOTOP_GRABFOCUS );
     }
 
     if( ( ( nFlags & SAL_FRAME_TOTOP_GRABFOCUS ) || ( nFlags & SAL_FRAME_TOTOP_GRABFOCUS_ONLY ) )
-        && maFrameData.bMapped_ )
-	    XSetInputFocus( _GetXDisplay(), maFrameData.GetShellWindow(), RevertToParent, CurrentTime );
+        && bMapped_ )
+	    XSetInputFocus( GetXDisplay(), GetShellWindow(), RevertToParent, CurrentTime );
 }
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::GetWorkArea( Rectangle& rWorkArea )
+void X11SalFrame::GetWorkArea( Rectangle& rWorkArea )
 {
-    rWorkArea = maFrameData.pDisplay_->getWMAdaptor()->getWorkArea( 0 );
+    rWorkArea = pDisplay_->getWMAdaptor()->getWorkArea( 0 );
 }
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::GetClientSize( long &rWidth, long &rHeight )
+void X11SalFrame::GetClientSize( long &rWidth, long &rHeight )
 {
-	if( ! maFrameData.bViewable_  )
+	if( ! bViewable_  )
 	{
 		rWidth = rHeight = 0;
 		return;
@@ -1235,7 +1176,7 @@ void SalFrame::GetClientSize( long &rWid
 	{
 		XWindowAttributes aAttrib;
 
-		XGetWindowAttributes( _GetXDisplay(), maFrameData.GetShellWindow(), &aAttrib );
+		XGetWindowAttributes( GetXDisplay(), GetShellWindow(), &aAttrib );
 
 		rWidth	= aAttrib.width;
 		rHeight = aAttrib.height;
@@ -1244,7 +1185,7 @@ void SalFrame::GetClientSize( long &rWid
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrameData::SetWindowGravity (int nGravity) const
+void X11SalFrame::SetWindowGravity (int nGravity) const
 {
     XSizeHints* pHint = XAllocSizeHints();
     long        nFlag;
@@ -1259,7 +1200,7 @@ void SalFrameData::SetWindowGravity (int
     XFree (pHint);
 }
 
-void SalFrameData::Center( )
+void X11SalFrame::Center( )
 {
 	int 			nX, nY, nScreenWidth, nScreenHeight;
 	int				nRealScreenWidth, nRealScreenHeight;
@@ -1304,25 +1245,25 @@ void SalFrameData::Center( )
 
 	if( mpParent )
 	{
-		SalFrame* pFrame = mpParent;
-		while( pFrame->maFrameData.mpParent )
-			pFrame = pFrame->maFrameData.mpParent;
+		X11SalFrame* pFrame = mpParent;
+		while( pFrame->mpParent )
+			pFrame = pFrame->mpParent;
 		if( pFrame->maGeometry.nWidth < 1  || pFrame->maGeometry.nHeight < 1 )
         {
             Rectangle aRect;
-			pFrame->maFrameData.GetPosSize( aRect );
+			pFrame->GetPosSize( aRect );
             pFrame->maGeometry.nX		= aRect.Left();
             pFrame->maGeometry.nY		= aRect.Top();
             pFrame->maGeometry.nWidth	= aRect.GetWidth();
             pFrame->maGeometry.nHeight	= aRect.GetHeight();
         }
 
-		if( pFrame->maFrameData.nStyle_ & SAL_FRAME_STYLE_CHILD )
+		if( pFrame->nStyle_ & SAL_FRAME_STYLE_CHILD )
 		{
 			XLIB_Window aRoot;
 			unsigned int bw, depth;
 			XGetGeometry( GetXDisplay(),
-						  pFrame->maFrameData.GetShellWindow(),
+						  pFrame->GetShellWindow(),
 						  &aRoot,
 						  &nScreenX, &nScreenY,
 						  (unsigned int*)&nScreenWidth,
@@ -1338,10 +1279,10 @@ void SalFrameData::Center( )
 		}
 	}
 
-	if( mpParent && mpParent->maFrameData.nShowState_ == SHOWSTATE_NORMAL )
+	if( mpParent && mpParent->nShowState_ == SHOWSTATE_NORMAL )
 	{
-		if( pFrame_->maGeometry.nWidth >= mpParent->maGeometry.nWidth &&
-			pFrame_->maGeometry.nHeight >= mpParent->maGeometry.nHeight )
+		if( maGeometry.nWidth >= mpParent->maGeometry.nWidth &&
+			maGeometry.nHeight >= mpParent->maGeometry.nHeight )
 		{
 			nX = nScreenX + 40;
 			nY = nScreenY + 40;
@@ -1349,15 +1290,15 @@ void SalFrameData::Center( )
 		else
 		{
 			// center the window relative to the top level frame
-			nX = (nScreenWidth	- (int)pFrame_->maGeometry.nWidth ) / 2 + nScreenX;
-			nY = (nScreenHeight - (int)pFrame_->maGeometry.nHeight) / 2 + nScreenY;
+			nX = (nScreenWidth	- (int)maGeometry.nWidth ) / 2 + nScreenX;
+			nY = (nScreenHeight - (int)maGeometry.nHeight) / 2 + nScreenY;
 		}
 	}
 	else
 	{
 		// center the window relative to screen
-		nX = (nRealScreenWidth	- (int)pFrame_->maGeometry.nWidth ) / 2 + nScreenX;
-		nY = (nRealScreenHeight - (int)pFrame_->maGeometry.nHeight) / 2 + nScreenY;
+		nX = (nRealScreenWidth	- (int)maGeometry.nWidth ) / 2 + nScreenX;
+		nY = (nRealScreenHeight - (int)maGeometry.nHeight) / 2 + nScreenY;
 	}
     nX = nX < 0 ? 0 : nX;
     nY = nY < 0 ? 0 : nY;
@@ -1370,30 +1311,30 @@ void SalFrameData::Center( )
     }
 
     Point aPoint(nX, nY);
-	SetPosSize( Rectangle( aPoint, Size( pFrame_->maGeometry.nWidth, pFrame_->maGeometry.nHeight ) ) );
+	SetPosSize( Rectangle( aPoint, Size( maGeometry.nWidth, maGeometry.nHeight ) ) );
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::SetPosSize( long nX, long nY, long nWidth, long nHeight, USHORT nFlags )
+void X11SalFrame::SetPosSize( long nX, long nY, long nWidth, long nHeight, USHORT nFlags )
 {
-    if( maFrameData.nStyle_ & SAL_FRAME_STYLE_CHILD )
+    if( nStyle_ & SAL_FRAME_STYLE_CHILD )
         return;
 
-    // relative positioning in SalFrameData::SetPosSize
+    // relative positioning in X11SalFrame::SetPosSize
     Rectangle aPosSize( Point( maGeometry.nX, maGeometry.nY ), Size( maGeometry.nWidth, maGeometry.nHeight ) );
     aPosSize.Justify();
 
     if( ! ( nFlags & SAL_FRAME_POSSIZE_X ) )
     {
         nX = aPosSize.Left();
-        if( maFrameData.mpParent )
-            nX -= maFrameData.mpParent->maFrameData.pFrame_->maGeometry.nX;
+        if( mpParent )
+            nX -= mpParent->maGeometry.nX;
     }
     if( ! ( nFlags & SAL_FRAME_POSSIZE_Y ) )
     {
         nY = aPosSize.Top();
-        if( maFrameData.mpParent )
-            nY -= maFrameData.mpParent->maFrameData.pFrame_->maGeometry.nY;
+        if( mpParent )
+            nY -= mpParent->maGeometry.nY;
     }
     if( ! ( nFlags & SAL_FRAME_POSSIZE_WIDTH ) )
         nWidth = aPosSize.GetWidth();
@@ -1404,27 +1345,27 @@ void SalFrame::SetPosSize( long nX, long
 
     if( ! ( nFlags & ( SAL_FRAME_POSSIZE_X | SAL_FRAME_POSSIZE_Y ) ) )
     {
-        if( maFrameData.bDefaultPosition_ )
+        if( bDefaultPosition_ )
         {
             maGeometry.nWidth = aPosSize.GetWidth();
             maGeometry.nHeight = aPosSize.GetHeight();
-            maFrameData.Center();
+            Center();
         }
         else
-            maFrameData.SetSize( Size( nWidth, nHeight ) );
+            SetSize( Size( nWidth, nHeight ) );
     }
     else
-        maFrameData.SetPosSize( aPosSize );
-    maFrameData.bDefaultPosition_ = False;
+        SetPosSize( aPosSize );
+    bDefaultPosition_ = False;
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::SetAlwaysOnTop( BOOL bOnTop )
+void X11SalFrame::SetAlwaysOnTop( BOOL bOnTop )
 {
-    if( ! maFrameData.IsOverrideRedirect() )
+    if( ! IsOverrideRedirect() )
     {
-        maFrameData.bAlwaysOnTop_ = bOnTop;
-        maFrameData.pDisplay_->getWMAdaptor()->enableAlwaysOnTop( this, bOnTop );
+        bAlwaysOnTop_ = bOnTop;
+        pDisplay_->getWMAdaptor()->enableAlwaysOnTop( this, bOnTop );
     }
 }
 
@@ -1434,8 +1375,7 @@ void SalFrame::SetAlwaysOnTop( BOOL bOnT
      (SAL_FRAMESTATE_MASK_X     | SAL_FRAMESTATE_MASK_Y |   \
       SAL_FRAMESTATE_MASK_WIDTH | SAL_FRAMESTATE_MASK_HEIGHT)
 
-void
-SalFrame::SetWindowState( const SalFrameState *pState )
+void X11SalFrame::SetWindowState( const SalFrameState *pState )
 {
     if (pState == NULL)
         return;
@@ -1447,7 +1387,7 @@ SalFrame::SetWindowState( const SalFrame
 
         // initialize with current geometry
         if ((pState->mnMask & _FRAMESTATE_MASK_GEOMETRY) != _FRAMESTATE_MASK_GEOMETRY)
-            maFrameData.GetPosSize (aPosSize);
+            GetPosSize (aPosSize);
 
         // change requested properties
         if (pState->mnMask & SAL_FRAMESTATE_MASK_X)
@@ -1469,23 +1409,21 @@ SalFrame::SetWindowState( const SalFrame
             aPosSize.setHeight (nHeight);
         }
 
-        const Size& rScreenSize( maFrameData.pDisplay_->GetScreenSize() );
-        const WMAdaptor *pWM = _GetDisplay()->getWMAdaptor();
-        int nGravity = pWM->getPositionWinGravity();
+        const Size& rScreenSize( pDisplay_->GetScreenSize() );
+        const WMAdaptor *pWM = GetDisplay()->getWMAdaptor();
 
-        bool bAdjusted = false;
         if( pState->mnMask & ( SAL_FRAMESTATE_MASK_HEIGHT | SAL_FRAMESTATE_MASK_WIDTH )
             && aPosSize.GetWidth() <= rScreenSize.Width()
             && aPosSize.GetHeight() <= rScreenSize.Height() )
         {
             SalFrameGeometry aGeom = maGeometry;
 
-            if( ! (maFrameData.nStyle_ & ( SAL_FRAME_STYLE_FLOAT | SAL_FRAME_STYLE_CHILD ) ) &&
-               maFrameData.mpParent &&
+            if( ! (nStyle_ & ( SAL_FRAME_STYLE_FLOAT | SAL_FRAME_STYLE_CHILD ) ) &&
+               mpParent &&
                 aGeom.nLeftDecoration == 0 &&
                 aGeom.nTopDecoration == 0 )
             {
-                aGeom = maFrameData.mpParent->maGeometry;
+                aGeom = mpParent->maGeometry;
                 if( aGeom.nLeftDecoration == 0 &&
                     aGeom.nTopDecoration == 0 )
                 {
@@ -1497,46 +1435,24 @@ SalFrame::SetWindowState( const SalFrame
             }
 
             // adjust position so that frame fits onto screen
-            if( aPosSize.Right()+(long)aGeom.nRightDecoration >= rScreenSize.Width() )
-            {
+            if( aPosSize.Right()+(long)aGeom.nRightDecoration > rScreenSize.Width()-1 )
                 aPosSize.Move( (long)rScreenSize.Width() - (long)aPosSize.Right() - (long)aGeom.nRightDecoration, 0 );
-                nGravity = EastGravity;
-                bAdjusted = true;
-            }
-            if( aPosSize.Bottom()+(long)aGeom.nBottomDecoration >= rScreenSize.Height() )
-            {
+            if( aPosSize.Bottom()+(long)aGeom.nBottomDecoration > rScreenSize.Height()-1 )
                 aPosSize.Move( 0, (long)rScreenSize.Height() - (long)aPosSize.Bottom() - (long)aGeom.nBottomDecoration );
-                nGravity = nGravity == EastGravity ? SouthEastGravity : SouthGravity;
-                bAdjusted = true;
-            }
             if( aPosSize.Left() < (long)aGeom.nLeftDecoration )
-            {
                 aPosSize.Move( (long)aGeom.nLeftDecoration - (long)aPosSize.Left(), 0 );
-                nGravity = ( nGravity == SouthGravity || nGravity == SouthEastGravity ) ? SouthWestGravity : WestGravity;
-                bAdjusted = true;
-            }
             if( aPosSize.Top() < (long)aGeom.nTopDecoration )
-            {
                 aPosSize.Move( 0, (long)aGeom.nTopDecoration - (long)aPosSize.Top() );
-                nGravity =
-                    ( nGravity == SouthEastGravity || nGravity == EastGravity ) ? NorthEastGravity :
-                    ( ( nGravity == SouthWestGravity || nGravity == WestGravity ) ? NorthWestGravity : NorthGravity );
-                bAdjusted = true;
-            }
         }
 
-         // demand correct positioning from the WM
-        if( bAdjusted )
-            maFrameData.SetWindowGravity ( nGravity );
-
          // resize with new args
          if (pWM->supportsICCCMPos())
          {
-             if( maFrameData.mpParent && ! bAdjusted )
-                 aPosSize.Move( -maFrameData.mpParent->maGeometry.nX,
-                                -maFrameData.mpParent->maGeometry.nY );
-             maFrameData.SetPosSize( aPosSize );
-             maFrameData.bDefaultPosition_ = False;
+             if( mpParent )
+                 aPosSize.Move( -mpParent->maGeometry.nX,
+                                -mpParent->maGeometry.nY );
+             SetPosSize( aPosSize );
+             bDefaultPosition_ = False;
          }
          else
              SetPosSize( 0, 0, aPosSize.GetWidth(), aPosSize.GetHeight(), SAL_FRAME_POSSIZE_WIDTH | SAL_FRAME_POSSIZE_HEIGHT );
@@ -1547,58 +1463,58 @@ SalFrame::SetWindowState( const SalFrame
     {
 	    if (pState->mnState & SAL_FRAMESTATE_MAXIMIZED)
 	    {
-		    maFrameData.nShowState_ = SHOWSTATE_NORMAL;
-            if( ! (pState->mnMask & (SAL_FRAMESTATE_MAXIMIZED_HORZ|SAL_FRAMESTATE_MAXIMIZED_VERT) ) )
-                maFrameData.Maximize();
+		    nShowState_ = SHOWSTATE_NORMAL;
+            if( ! (pState->mnState & (SAL_FRAMESTATE_MAXIMIZED_HORZ|SAL_FRAMESTATE_MAXIMIZED_VERT) ) )
+                Maximize();
             else
             {
                 bool bHorz = (pState->mnState & SAL_FRAMESTATE_MAXIMIZED_HORZ) ? true : false;
                 bool bVert = (pState->mnState & SAL_FRAMESTATE_MAXIMIZED_VERT) ? true : false;
-                _GetDisplay()->getWMAdaptor()->maximizeFrame( this, bHorz, bVert );
+                GetDisplay()->getWMAdaptor()->maximizeFrame( this, bHorz, bVert );
             }
 	    }
-        else if( maFrameData.mbMaximizedHorz || maFrameData.mbMaximizedVert )
-            _GetDisplay()->getWMAdaptor()->maximizeFrame( this, false, false );
+        else if( mbMaximizedHorz || mbMaximizedVert )
+            GetDisplay()->getWMAdaptor()->maximizeFrame( this, false, false );
 
 	    if (pState->mnState & SAL_FRAMESTATE_MINIMIZED)
 	    {
-		    if (maFrameData.nShowState_ == SHOWSTATE_UNKNOWN)
-			    maFrameData.nShowState_ = SHOWSTATE_NORMAL;
-		    maFrameData.Minimize();
+		    if (nShowState_ == SHOWSTATE_UNKNOWN)
+			    nShowState_ = SHOWSTATE_NORMAL;
+		    Minimize();
         }
         if (pState->mnState & SAL_FRAMESTATE_NORMAL)
         {
-            if (maFrameData.nShowState_ != SHOWSTATE_NORMAL)
-                maFrameData.Restore();
+            if (nShowState_ != SHOWSTATE_NORMAL)
+                Restore();
         }
         if (pState->mnState & SAL_FRAMESTATE_ROLLUP)
-            _GetDisplay()->getWMAdaptor()->shade( this, true );
+            GetDisplay()->getWMAdaptor()->shade( this, true );
 	}
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-BOOL SalFrame::GetWindowState( SalFrameState* pState )
+BOOL X11SalFrame::GetWindowState( SalFrameState* pState )
 {
-	if( SHOWSTATE_MINIMIZED == maFrameData.nShowState_ )
+	if( SHOWSTATE_MINIMIZED == nShowState_ )
 		pState->mnState = SAL_FRAMESTATE_MINIMIZED;
 	else
 		pState->mnState = SAL_FRAMESTATE_NORMAL;
 
 	Rectangle aPosSize;
-	if (! maFrameData.maRestorePosSize.IsEmpty() )
+	if (! maRestorePosSize.IsEmpty() )
 	{
-		aPosSize = maFrameData.maRestorePosSize;
+		aPosSize = maRestorePosSize;
 		pState->mnState |= SAL_FRAMESTATE_MAXIMIZED;
 	}
 	else
     {
-		maFrameData.GetPosSize( aPosSize );
+		GetPosSize( aPosSize );
     }
-    if( maFrameData.mbMaximizedHorz )
+    if( mbMaximizedHorz )
         pState->mnState |= SAL_FRAMESTATE_MAXIMIZED_HORZ;
-    if( maFrameData.mbMaximizedVert )
+    if( mbMaximizedVert )
         pState->mnState |= SAL_FRAMESTATE_MAXIMIZED_VERT;
-    if( maFrameData.mbShaded )
+    if( mbShaded )
         pState->mnState |= SAL_FRAMESTATE_ROLLUP;
 
 	pState->mnX 	 = aPosSize.Left();
@@ -1613,17 +1529,16 @@ BOOL SalFrame::GetWindowState( SalFrameS
 
 // ----------------------------------------------------------------------------
 // get a screenshot of the current frame including window manager decoration
-SalBitmap*
-SalFrame::SnapShot()
+SalBitmap* X11SalFrame::SnapShot()
 {
-    Display* pDisplay = _GetXDisplay();
+    Display* pDisplay = GetXDisplay();
 
     // make sure the frame has been reparented and all paint timer have been
     // expired
-    maFrameData.maResizeTimer.Stop();
-    if ( maFrameData.mbMoved || maFrameData.mbSized )
+    maResizeTimer.Stop();
+    if ( mbMoved || mbSized )
     {
-        maFrameData.HandleResizeTimer (&maFrameData.maResizeTimer);
+        HandleResizeTimer (&maResizeTimer);
     }
 
     do
@@ -1632,7 +1547,10 @@ SalFrame::SnapShot()
         Application::Reschedule ();
     }
     while (XPending(pDisplay));
-    usleep (50000);
+    TimeValue aVal;
+    aVal.Seconds = 0;
+    aVal.Nanosec = 50000000;
+    osl_waitThread( &aVal );
     do
     {
         XSync(pDisplay, False);
@@ -1642,18 +1560,18 @@ SalFrame::SnapShot()
 
     // get the most outer window, usually the window manager decoration
     Drawable hWindow = None;
-    if (maFrameData.IsOverrideRedirect())
-        hWindow = _GetDrawable();
+    if (IsOverrideRedirect())
+        hWindow = GetDrawable();
     else
     if (hPresentationWindow != None)
         hWindow = hPresentationWindow;
     else
-        hWindow = maFrameData.GetStackingWindow();
+        hWindow = GetStackingWindow();
 
     // query the contents of the window
     if (hWindow != None)
     {
-        SalBitmap *pBmp = new SalBitmap;
+        X11SalBitmap *pBmp = new X11SalBitmap;
         if (pBmp->SnapShot (pDisplay, hWindow))
             return pBmp;
         else
@@ -1664,22 +1582,33 @@ SalFrame::SnapShot()
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrameData::GetPosSize( Rectangle &rPosSize )
+
+// native menu implementation - currently empty
+void X11SalFrame::DrawMenuBar()
+{
+}
+
+void X11SalFrame::SetMenu( SalMenu* )
+{
+}
+
+// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
+void X11SalFrame::GetPosSize( Rectangle &rPosSize )
 {
-	if( pFrame_->maGeometry.nWidth < 1 || pFrame_->maGeometry.nHeight < 1 )
+	if( maGeometry.nWidth < 1 || maGeometry.nHeight < 1 )
 	{
-		long w = pDisplay_->GetScreenSize().Width()  - pFrame_->maGeometry.nLeftDecoration - pFrame_->maGeometry.nRightDecoration;
-		long h = pDisplay_->GetScreenSize().Height() - pFrame_->maGeometry.nTopDecoration - pFrame_->maGeometry.nBottomDecoration;
+		long w = pDisplay_->GetScreenSize().Width()  - maGeometry.nLeftDecoration - maGeometry.nRightDecoration;
+		long h = pDisplay_->GetScreenSize().Height() - maGeometry.nTopDecoration - maGeometry.nBottomDecoration;
 
-		rPosSize = Rectangle( Point( pFrame_->maGeometry.nX, pFrame_->maGeometry.nY ), Size( w, h ) );
+		rPosSize = Rectangle( Point( maGeometry.nX, maGeometry.nY ), Size( w, h ) );
 	}
 	else
-		rPosSize = Rectangle( Point( pFrame_->maGeometry.nX, pFrame_->maGeometry.nY ),
-                              Size( pFrame_->maGeometry.nWidth, pFrame_->maGeometry.nHeight ) );
+		rPosSize = Rectangle( Point( maGeometry.nX, maGeometry.nY ),
+                              Size( maGeometry.nWidth, maGeometry.nHeight ) );
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrameData::SetSize( const Size &rSize )
+void X11SalFrame::SetSize( const Size &rSize )
 {
 	if( rSize.Width() > 0 && rSize.Height() > 0 )
 	{
@@ -1708,12 +1637,12 @@ void SalFrameData::SetSize( const Size &
         if( GetWindow() != GetShellWindow() )
             XMoveResizeWindow( GetXDisplay(), GetWindow(), 0, 0, rSize.Width(), rSize.Height() );
 
-        pFrame_->maGeometry.nWidth  = rSize.Width();
-        pFrame_->maGeometry.nHeight = rSize.Height();
+        maGeometry.nWidth  = rSize.Width();
+        maGeometry.nHeight = rSize.Height();
 
 		// allow the external status window to reposition
 		if (mbInputFocus && mpInputContext != NULL)
-			mpInputContext->SetICFocus ( pFrame_ );
+			mpInputContext->SetICFocus ( this );
 	}
 }
 
@@ -1721,7 +1650,7 @@ void SalFrameData::SetSize( const Size &
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrameData::SetPosSize( const Rectangle &rPosSize )
+void X11SalFrame::SetPosSize( const Rectangle &rPosSize )
 {
 	XWindowChanges values;
 	values.x		= rPosSize.Left();
@@ -1741,7 +1670,7 @@ void SalFrameData::SetPosSize( const Rec
  		XLIB_Window aChild;
  		// coordinates are relative to parent, so translate to root coordinates
  		XTranslateCoordinates( GetDisplay()->GetDisplay(),
- 							   mpParent->maFrameData.GetWindow(),
+ 							   mpParent->GetWindow(),
  							   GetDisplay()->GetRootWindow(),
  							   values.x, values.y,
  							   &values.x, &values.y,
@@ -1750,16 +1679,16 @@ void SalFrameData::SetPosSize( const Rec
 
     bool bMoved = false;
     bool bSized = false;
-    if( values.x != pFrame_->maGeometry.nX || values.y != pFrame_->maGeometry.nY )
+    if( values.x != maGeometry.nX || values.y != maGeometry.nY )
         bMoved = true;
-    if( values.width != (int)pFrame_->maGeometry.nWidth || values.height != (int)pFrame_->maGeometry.nHeight )
+    if( values.width != (int)maGeometry.nWidth || values.height != (int)maGeometry.nHeight )
         bSized = true;
 
 	if( ! ( nStyle_ & ( SAL_FRAME_STYLE_CHILD | SAL_FRAME_STYLE_FLOAT ) )
         && !(pDisplay_->GetProperties() & PROPERTY_SUPPORT_WM_ClientPos) )
     {
-        values.x	-= pFrame_->maGeometry.nLeftDecoration;
-        values.y	-= pFrame_->maGeometry.nTopDecoration;
+        values.x	-= maGeometry.nLeftDecoration;
+        values.y	-= maGeometry.nTopDecoration;
     }
 
     if( ( ! ( nStyle_ & SAL_FRAME_STYLE_CHILD )
@@ -1802,28 +1731,28 @@ void SalFrameData::SetPosSize( const Rec
     if( GetShellWindow() != GetWindow() )
         XMoveResizeWindow( GetXDisplay(), GetWindow(), 0, 0, values.width, values.height );
 
-    pFrame_->maGeometry.nX		= values.x;
-    pFrame_->maGeometry.nY		= values.y;
-    pFrame_->maGeometry.nWidth	= values.width;
-    pFrame_->maGeometry.nHeight	= values.height;
+    maGeometry.nX		= values.x;
+    maGeometry.nY		= values.y;
+    maGeometry.nWidth	= values.width;
+    maGeometry.nHeight	= values.height;
     if( bSized && ! bMoved )
-        Call ( SALEVENT_RESIZE, NULL );
+        CallCallback( SALEVENT_RESIZE, NULL );
     else if( bMoved && ! bSized )
-        Call ( SALEVENT_MOVE, NULL );
+        CallCallback( SALEVENT_MOVE, NULL );
     else
-        Call ( SALEVENT_MOVERESIZE, NULL );
+        CallCallback( SALEVENT_MOVERESIZE, NULL );
 
 	// allow the external status window to reposition
 	if (mbInputFocus && mpInputContext != NULL)
-		mpInputContext->SetICFocus ( pFrame_ );
+		mpInputContext->SetICFocus ( this );
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrameData::Minimize()
+void X11SalFrame::Minimize()
 {
 	if( SHOWSTATE_UNKNOWN == nShowState_ || SHOWSTATE_HIDDEN == nShowState_ )
 	{
-		stderr0( "SalFrameData::Minimize on withdrawn window\n" );
+		stderr0( "X11SalFrame::Minimize on withdrawn window\n" );
 		return;
 	}
 
@@ -1834,7 +1763,7 @@ void SalFrameData::Minimize()
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrameData::Maximize()
+void X11SalFrame::Maximize()
 {
 	if( SHOWSTATE_MINIMIZED == nShowState_ )
 	{
@@ -1842,15 +1771,15 @@ void SalFrameData::Maximize()
 		nShowState_ = SHOWSTATE_NORMAL;
 	}
 
-    pDisplay_->getWMAdaptor()->maximizeFrame( pFrame_, true, true );
+    pDisplay_->getWMAdaptor()->maximizeFrame( this, true, true );
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrameData::Restore()
+void X11SalFrame::Restore()
 {
 	if( SHOWSTATE_UNKNOWN == nShowState_ || SHOWSTATE_HIDDEN == nShowState_ )
 	{
-		stderr0( "SalFrameData::Restore on withdrawn window\n" );
+		stderr0( "X11SalFrame::Restore on withdrawn window\n" );
 		return;
 	}
 
@@ -1860,22 +1789,22 @@ void SalFrameData::Restore()
 		nShowState_ = SHOWSTATE_NORMAL;
 	}
 
-    pDisplay_->getWMAdaptor()->maximizeFrame( pFrame_, false, false );
+    pDisplay_->getWMAdaptor()->maximizeFrame( this, false, false );
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrame::ShowFullScreen( BOOL bFullScreen )
+void X11SalFrame::ShowFullScreen( BOOL bFullScreen )
 {
-	if( maFrameData.mbFullScreen == (bool)bFullScreen )
+	if( mbFullScreen == (bool)bFullScreen )
 		return;
 
-    maFrameData.pDisplay_->getWMAdaptor()->showFullScreen( this, bFullScreen );
-    if( maFrameData.IsOverrideRedirect()
-        && WMSupportsFWS( maFrameData.GetXDisplay(), maFrameData.GetDisplay()->GetRootWindow()) )
+    pDisplay_->getWMAdaptor()->showFullScreen( this, bFullScreen );
+    if( IsOverrideRedirect()
+        && WMSupportsFWS( GetXDisplay(), GetDisplay()->GetRootWindow()) )
     {
-        AddFwsProtocols( maFrameData.GetXDisplay(), maFrameData.GetShellWindow() );
-        RegisterFwsWindow( maFrameData.GetXDisplay(), maFrameData.GetShellWindow() );
+        AddFwsProtocols( GetXDisplay(), GetShellWindow() );
+        RegisterFwsWindow( GetXDisplay(), GetShellWindow() );
     }
 }
 
@@ -1949,18 +1878,18 @@ MessageToXAutoLock( Display *p_display, 
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::StartPresentation( BOOL bStart )
+void X11SalFrame::StartPresentation( BOOL bStart )
 {
     I18NStatus::get().show( !bStart, I18NStatus::presentation );
 	if ( bStart )
-		MessageToXAutoLock( _GetXDisplay(), XAUTOLOCK_DISABLE );
+		MessageToXAutoLock( GetXDisplay(), XAUTOLOCK_DISABLE );
 	else
-		MessageToXAutoLock( _GetXDisplay(), XAUTOLOCK_ENABLE );
+		MessageToXAutoLock( GetXDisplay(), XAUTOLOCK_ENABLE );
 
     if( ! bStart && hPresentationWindow != None )
-        doReparentPresentationDialogues( _GetDisplay() );
-    hPresentationWindow = (bStart && maFrameData.IsOverrideRedirect() ) ? maFrameData.GetWindow() : None;
-	if( bStart || maFrameData.nScreenSaversTimeout_ )
+        doReparentPresentationDialogues( GetDisplay() );
+    hPresentationWindow = (bStart && IsOverrideRedirect() ) ? GetWindow() : None;
+	if( bStart || nScreenSaversTimeout_ )
 	{
         if( hPresentationWindow )
         {
@@ -1968,28 +1897,28 @@ void SalFrame::StartPresentation( BOOL b
              *  current focus after presentation window is gone
              */
             int revert_to = 0;
-            XGetInputFocus( _GetXDisplay(), &hPresFocusWindow, &revert_to );
+            XGetInputFocus( GetXDisplay(), &hPresFocusWindow, &revert_to );
         }
 		int timeout, interval, prefer_blanking, allow_exposures;
-		XGetScreenSaver( _GetXDisplay(),
+		XGetScreenSaver( GetXDisplay(),
 						 &timeout,
 						 &interval,
 						 &prefer_blanking,
 						 &allow_exposures );
 		if( !bStart )
 		{
-			XSetScreenSaver( _GetXDisplay(),
-							 maFrameData.nScreenSaversTimeout_,
+			XSetScreenSaver( GetXDisplay(),
+							 nScreenSaversTimeout_,
 							 interval,
 							 prefer_blanking,
 							 allow_exposures );
-			maFrameData.nScreenSaversTimeout_ = 0;
+			nScreenSaversTimeout_ = 0;
 		}
 		else if( timeout )
 		{
-			maFrameData.nScreenSaversTimeout_ = timeout;
-			XResetScreenSaver( _GetXDisplay() );
-			XSetScreenSaver( _GetXDisplay(),
+			nScreenSaversTimeout_ = timeout;
+			XResetScreenSaver( GetXDisplay() );
+			XSetScreenSaver( GetXDisplay(),
 							 0,
 							 interval,
 							 prefer_blanking,
@@ -2000,7 +1929,7 @@ void SalFrame::StartPresentation( BOOL b
 
 // Pointer
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-inline void SalFrameData::SetPointer( PointerStyle ePointerStyle )
+void X11SalFrame::SetPointer( PointerStyle ePointerStyle )
 {
 	hCursor_ = pDisplay_->GetPointer( ePointerStyle );
 	XDefineCursor( GetXDisplay(), GetWindow(), hCursor_ );
@@ -2012,13 +1941,7 @@ inline void SalFrameData::SetPointer( Po
 						CurrentTime );
 }
 
-void SalFrame::SetPointer( PointerStyle ePointerStyle )
-{ maFrameData.SetPointer( ePointerStyle ); }
-
-void SalFrame::CaptureMouse( BOOL bCapture )
-{ maFrameData.CaptureMouse( bCapture ); }
-
-void SalFrame::SetPointerPos(long nX, long nY)
+void X11SalFrame::SetPointerPos(long nX, long nY)
 {
     /* #87921# when the application tries to center the mouse in the dialog the
      * window isn't mapped already. So use coordinates relative to the root window.
@@ -2026,38 +1949,45 @@ void SalFrame::SetPointerPos(long nX, lo
     unsigned int nWindowLeft = maGeometry.nX + nX;
     unsigned int nWindowTop  = maGeometry.nY + nY;
 
-    XWarpPointer( _GetXDisplay(), None, maFrameData.pDisplay_->GetRootWindow(),
+    XWarpPointer( GetXDisplay(), None, pDisplay_->GetRootWindow(),
                   0, 0, 0, 0, nWindowLeft, nWindowTop);
 }
 
 // delay handling of extended text input
 #if !defined(__synchronous_extinput__)
 void
-SalFrameData::PostExtTextEvent (sal_uInt16 nExtTextEventType, void *pExtTextEvent)
+X11SalFrame::PostExtTextEvent (sal_uInt16 nExtTextEventType, void *pExtTextEvent)
 {
 	XLIB_Window nFocusWindow = GetWindow();
 	Atom 		nEventAtom	 = GetDisplay()->getWMAdaptor()->getAtom( WMAdaptor::SAL_EXTTEXTEVENT );
 
-	sal_uInt32 pEventData[5];
-
-#if __SIZEOFLONG > 4
-    pEventData[0] = (sal_uInt32)((long)pExtTextEvent & 0xffffffff);
-    pEventData[1] = (sal_uInt32)((long)pExtTextEvent >> 32);
+    XEvent aEvent;
+    aEvent.xclient.type			= ClientMessage;
+    aEvent.xclient.serial		= 0;
+    aEvent.xclient.send_event	= True;
+    aEvent.xclient.display		= GetXDisplay();
+    aEvent.xclient.window		= nFocusWindow;
+    aEvent.xclient.message_type	= nEventAtom;
+    aEvent.xclient.format		= 32;
+
+#if SAL_TYPES_SIZEOFLONG > 4
+    aEvent.xclient.data.l[0] = (sal_uInt32)((long)pExtTextEvent & 0xffffffff);
+    aEvent.xclient.data.l[1] = (sal_uInt32)((long)pExtTextEvent >> 32);
 #else
-    pEventData[0] = (sal_uInt32)((long)pExtTextEvent);
-    pEventData[1] = NULL;
+    aEvent.xclient.data.l[0] = (sal_uInt32)((long)pExtTextEvent);
+    aEvent.xclient.data.l[1] = NULL;
 #endif
-    pEventData[2] = (sal_uInt32)nExtTextEventType;
-    pEventData[3] = NULL;
-    pEventData[4] = NULL;
+    aEvent.xclient.data.l[2] = (sal_uInt32)nExtTextEventType;
+    aEvent.xclient.data.l[3] = NULL;
+    aEvent.xclient.data.l[4] = NULL;
 
-	GetDisplay()->SendEvent (nEventAtom, pEventData, nFocusWindow);
+    XPutBackEvent( GetXDisplay(), &aEvent );
 }
 
 void
-SalFrameData::HandleExtTextEvent (XClientMessageEvent *pEvent)
+X11SalFrame::HandleExtTextEvent (XClientMessageEvent *pEvent)
 {
-	#if __SIZEOFLONG > 4
+	#if SAL_TYPES_SIZEOFLONG > 4
 	void* pExtTextEvent = (void*)(  (pEvent->data.l[0] & 0xffffffff)
 								  | (pEvent->data.l[1] << 32) );
 	#else
@@ -2065,12 +1995,11 @@ SalFrameData::HandleExtTextEvent (XClien
 	#endif
 	sal_uInt16 nExtTextEventType = sal_uInt16(pEvent->data.l[2]);
 
-	Call(nExtTextEventType, pExtTextEvent);
+	CallCallback(nExtTextEventType, pExtTextEvent);
 
 	switch (nExtTextEventType)
 	{
 		case SALEVENT_ENDEXTTEXTINPUT:
-
 			break;
 
 		case SALEVENT_EXTTEXTINPUT:
@@ -2087,42 +2016,40 @@ SalFrameData::HandleExtTextEvent (XClien
 
 		default:
 
-			fprintf(stderr, "SalFrameData::HandleExtTextEvent: invalid extended input\n");
+			fprintf(stderr, "X11SalFrame::HandleExtTextEvent: invalid extended input\n");
 	}
 }
 #endif /* defined(__synchronous_extinput__) */
 
 // PostEvent
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-BOOL SalFrame::PostEvent( void *pData )
+BOOL X11SalFrame::PostEvent( void *pData )
 {
-	_GetDisplay()->SendEvent( _GetDisplay()->getWMAdaptor()->getAtom( WMAdaptor::SAL_USEREVENT ),
-							  pData,
-							  maFrameData.GetWindow() );
+    GetDisplay()->SendInternalEvent( this, pData );
 	return TRUE;
 }
 
 // Title
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::SetTitle( const XubString& rTitle )
+void X11SalFrame::SetTitle( const XubString& rTitle )
 {
-    if( ! ( (maFrameData.nStyle_ & SAL_FRAME_STYLE_CHILD ) ||
-            (maFrameData.nStyle_ & SAL_FRAME_STYLE_FLOAT ) ) )
-        _GetDisplay()->getWMAdaptor()->setWMName( this, rTitle );
+    if( ! ( (nStyle_ & SAL_FRAME_STYLE_CHILD ) ||
+            (nStyle_ & SAL_FRAME_STYLE_FLOAT ) ) )
+        GetDisplay()->getWMAdaptor()->setWMName( this, rTitle );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::Flush()
+void X11SalFrame::Flush()
 {
-	XFlush( _GetDisplay()->GetDisplay() );
+	XFlush( GetDisplay()->GetDisplay() );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::Sync()
+void X11SalFrame::Sync()
 {
-	XSync( _GetDisplay()->GetDisplay(), False );
+	XSync( GetDisplay()->GetDisplay(), False );
 }
 
 // Keyboard
@@ -2130,7 +2057,7 @@ void SalFrame::Sync()
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetInputContext( SalInputContext* pContext )
+void X11SalFrame::SetInputContext( SalInputContext* pContext )
 {
   	if (pContext == NULL)
 		return;
@@ -2140,54 +2067,54 @@ void SalFrame::SetInputContext( SalInput
 
   	if (!(pContext->mnOptions & SAL_INPUTCONTEXT_TEXT))
     {
-        if( maFrameData.mpInputContext )
-            maFrameData.mpInputContext->Unmap( this );
+        if( mpInputContext )
+            mpInputContext->Unmap( this );
 		return;
     }
 
 	// 2. We should use on-the-spot inputstyle
   	//    only when SAL_INPUTCONTEXT_EXTTEXTINPUT is set.
 
-  	if (maFrameData.mpInputContext == NULL)
+  	if (mpInputContext == NULL)
 	{
         I18NStatus& rStatus( I18NStatus::get() );
         rStatus.setParent( this );
-        maFrameData.mpInputContext = rStatus.getInputContext( maFrameData.mbDeleteInputContext );
-		if (maFrameData.mpInputContext->UseContext())
+        mpInputContext = rStatus.getInputContext( mbDeleteInputContext );
+		if (mpInputContext->UseContext())
 		{
-	  		maFrameData.mpInputContext->ExtendEventMask( maFrameData.GetShellWindow() );
+	  		mpInputContext->ExtendEventMask( GetShellWindow() );
 	  		if (pContext->mnOptions & SAL_INPUTCONTEXT_CHANGELANGUAGE)
-				maFrameData.mpInputContext->SetLanguage(pContext->meLanguage);
-			if (maFrameData.mbInputFocus)
-				maFrameData.mpInputContext->SetICFocus( this );
+				mpInputContext->SetLanguage(pContext->meLanguage);
+			if (mbInputFocus)
+				mpInputContext->SetICFocus( this );
 		}
   	}
     else
-        maFrameData.mpInputContext->Map( this );
+        mpInputContext->Map( this );
   	return;
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::EndExtTextInput( USHORT nFlags )
+void X11SalFrame::EndExtTextInput( USHORT nFlags )
 {
-    if (maFrameData.mpInputContext != NULL)
-  	    maFrameData.mpInputContext->EndExtTextInput( nFlags );
+    if (mpInputContext != NULL)
+  	    mpInputContext->EndExtTextInput( nFlags );
 }
 
 // -----------------------------------------------------------------------
 
-XubString SalFrame::GetKeyName( USHORT nKeyCode )
+XubString X11SalFrame::GetKeyName( USHORT nKeyCode )
 {
-	return _GetDisplay()->GetKeyName( nKeyCode );
+	return GetDisplay()->GetKeyName( nKeyCode );
 }
 
-XubString SalFrame::GetSymbolKeyName( const XubString&, USHORT nKeyCode )
+XubString X11SalFrame::GetSymbolKeyName( const XubString&, USHORT nKeyCode )
 {
   return GetKeyName( nKeyCode );
 }
 
-LanguageType SalFrame::GetInputLanguage()
+LanguageType X11SalFrame::GetInputLanguage()
 {
     // could be improved by checking unicode ranges of the last input
     return LANGUAGE_DONTKNOW;
@@ -2201,10 +2128,10 @@ inline Color getColorFromLong( long nCol
 	return Color( (nColor & 0xff), (nColor & 0xff00)>>8, (nColor & 0xff0000)>>16);
 }
 
-void SalFrame::UpdateSettings( AllSettings& rSettings )
+void X11SalFrame::UpdateSettings( AllSettings& rSettings )
 {
 
-    DtIntegrator* pIntegrator = DtIntegrator::CreateDtIntegrator( this );
+    DtIntegrator* pIntegrator = DtIntegrator::CreateDtIntegrator();
 #if OSL_DEBUG_LEVEL > 1
     fprintf( stderr, "DtIntegrator: %d\n", pIntegrator ? pIntegrator->GetDtType() : -1 );
 #endif
@@ -2212,27 +2139,32 @@ void SalFrame::UpdateSettings( AllSettin
         pIntegrator->GetSystemLook( rSettings );
 }
 
+void X11SalFrame::CaptureMouse( BOOL bCapture )
+{
+    nCaptured_ = pDisplay_->CaptureMouse( bCapture ? this : NULL );
+}
+
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-void SalFrame::SetParent( SalFrame* pNewParent )
+void X11SalFrame::SetParent( SalFrame* pNewParent )
 {
-    if( maFrameData.mpParent != pNewParent )
+    if( mpParent != pNewParent )
     {
-        if( maFrameData.mpParent )
-            maFrameData.mpParent->maFrameData.maChildren.remove( this );
+        if( mpParent )
+            mpParent->maChildren.remove( this );
 
-        maFrameData.mpParent = pNewParent;
-        pNewParent->maFrameData.maChildren.push_back( this );
-        maFrameData.GetDisplay()->getWMAdaptor()->changeReferenceFrame( this, pNewParent );
+        mpParent = static_cast<X11SalFrame*>(pNewParent);
+        mpParent->maChildren.push_back( this );
+        GetDisplay()->getWMAdaptor()->changeReferenceFrame( this, mpParent );
     }
 }
 
-SalFrame* SalFrame::GetParent() const
+SalFrame* X11SalFrame::GetParent() const
 {
-    return maFrameData.mpParent;
+    return mpParent;
 }
 
-bool SalFrameData::SetPluginParent( SystemParentData* pNewParent )
+bool X11SalFrame::SetPluginParent( SystemParentData* pNewParent )
 {
     // plugin parent may be killed unexpectedly by
     // plugging process; ignore XErrors in that case
@@ -2241,8 +2173,8 @@ bool SalFrameData::SetPluginParent( Syst
     // first deinit frame
     if( mpInputContext )
     {
-        mpInputContext->UnsetICFocus( pFrame_ );
-        mpInputContext->Unmap( pFrame_ );
+        mpInputContext->UnsetICFocus( this );
+        mpInputContext->Unmap( this );
     }
     if( GetWindow() == hPresentationWindow )
     {
@@ -2262,28 +2194,24 @@ bool SalFrameData::SetPluginParent( Syst
     else
 	    Init( nStyle_ & ~SAL_FRAME_STYLE_CHILD, pNewParent );
 
-    // update graphics if necessary
-    if( pGraphics_ )
-        pGraphics_->maGraphicsData.SetDrawable( mhWindow );
+	// update graphics if necessary
+	if( pGraphics_ )
+        pGraphics_->SetDrawable( mhWindow );
+    if( pFreeGraphics_ )
+        pFreeGraphics_->SetDrawable( mhWindow );
 
     return true;
 }
 
-bool SalFrame::SetPluginParent( SystemParentData* pNewParent )
-{
-    return maFrameData.SetPluginParent( pNewParent );
-}
-
-
 // Sound
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::Beep( SoundType eSoundType ) // not fully suported
+void X11SalFrame::Beep( SoundType eSoundType ) // not fully suported
 {
     switch( eSoundType )
     {
         case SOUND_DEFAULT:
         case SOUND_ERROR:
-            _GetDisplay()->Beep();
+            GetDisplay()->Beep();
             break;
         default:
             // Excessive beeping averted
@@ -2291,14 +2219,6 @@ void SalFrame::Beep( SoundType eSoundTyp
     }
 }
 
-// Callback
-// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-void SalFrame::SetCallback( void* pInst, SALFRAMEPROC pProc )
-{
-	maFrameData.pInst_ = pInst;
-	maFrameData.pProc_ = pProc ? pProc : sal_CallbackDummy;
-}
-
 // Event Handling
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 static USHORT sal_GetCode( int state )
@@ -2314,11 +2234,7 @@ static USHORT sal_GetCode( int state )
 
 	if( state & ShiftMask )
 		nCode |= KEY_SHIFT;
-#ifdef MACOSX
-	if( ( state & ControlMask ) || ( state & Mod2Mask ) )
-#else
 	if( state & ControlMask )
-#endif
 		nCode |= KEY_MOD1;
 	if( state & Mod1Mask )
 		nCode |= KEY_MOD2;
@@ -2328,13 +2244,13 @@ static USHORT sal_GetCode( int state )
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-ULONG SalFrame::GetCurrentModButtons()
+ULONG X11SalFrame::GetCurrentModButtons()
 {
     XLIB_Window aRoot, aChild;
     int rx, ry, wx, wy;
     unsigned int nMask = 0;
-    XQueryPointer( maFrameData.GetXDisplay(),
-                   maFrameData.GetShellWindow(),
+    XQueryPointer( GetXDisplay(),
+                   GetShellWindow(),
                    &aRoot,
                    &aChild,
                    &rx, &ry,
@@ -2344,7 +2260,7 @@ ULONG SalFrame::GetCurrentModButtons()
     return sal_GetCode( nMask );
 }
 
-long SalFrameData::HandleMouseEvent( XEvent *pEvent )
+long X11SalFrame::HandleMouseEvent( XEvent *pEvent )
 {
 	SalMouseEvent		aMouseEvt;
 	USHORT				nEvent = 0;
@@ -2432,9 +2348,9 @@ long SalFrameData::HandleMouseEvent( XEv
 		nEvent				= SALEVENT_MOUSEMOVE;
         if( nVisibleFloats > 0 && mpParent )
         {
-            XLIB_Cursor aCursor = mpParent->maFrameData.GetCursor();
-            if( pEvent->xmotion.x >= 0 && pEvent->xmotion.x < (int)pFrame_->maGeometry.nWidth &&
-                pEvent->xmotion.y >= 0 && pEvent->xmotion.y < (int)pFrame_->maGeometry.nHeight )
+            XLIB_Cursor aCursor = mpParent->GetCursor();
+            if( pEvent->xmotion.x >= 0 && pEvent->xmotion.x < (int)maGeometry.nWidth &&
+                pEvent->xmotion.y >= 0 && pEvent->xmotion.y < (int)maGeometry.nHeight )
                 aCursor = None;
 
             XChangeActivePointerGrab( GetXDisplay(),
@@ -2453,10 +2369,12 @@ long SalFrameData::HandleMouseEvent( XEv
             // see if the user clicks outside all of the floats
             // if yes release the grab
             bool bInside = false;
- 			for( SalFrame* pFrame = GetSalData()->pFirstFrame_; pFrame; pFrame = pFrame->maFrameData.pNextFrame_ )
+            const std::list< SalFrame* >& rFrames = GetDisplay()->getFrames();
+            for( std::list< SalFrame* >::const_iterator it = rFrames.begin(); it != rFrames.end(); ++it )
             {
-                if( pFrame->maFrameData.IsFloatGrabWindow()										&&
-                    pFrame->maFrameData.bMapped_												&&
+                X11SalFrame* pFrame = static_cast< X11SalFrame* >(*it);
+                if( pFrame->IsFloatGrabWindow()										&&
+                    pFrame->bMapped_												&&
                     pEvent->xbutton.x_root >= pFrame->maGeometry.nX								&&
                     pEvent->xbutton.x_root < pFrame->maGeometry.nX + (int)pFrame->maGeometry.nWidth	&&
                     pEvent->xbutton.y_root >= pFrame->maGeometry.nY								&&
@@ -2473,6 +2391,38 @@ long SalFrameData::HandleMouseEvent( XEv
                 // is not grabbed
                 XUngrabPointer( GetXDisplay(), CurrentTime );
                 bClosePopups = true;
+
+                /*  #i15246# only close popups if pointer is outside all our frames
+                 *  cannot use our own geometry data here because stacking
+                 *  is unknown (the above case implicitly assumes
+                 *  that floats are on top which should be true)
+                 */
+                XLIB_Window aRoot, aChild;
+                int root_x, root_y, win_x, win_y;
+                unsigned int mask_return;
+                if( XQueryPointer( GetXDisplay(), GetDisplay()->GetRootWindow(),
+                                   &aRoot, &aChild,
+                                   &root_x, &root_y,
+                                   &win_x, &win_y,
+                                   &mask_return )
+                    && aChild // pointer may not be in any child
+                    )
+                {
+                    const std::list< SalFrame* >& rFrames = GetDisplay()->getFrames();
+                    for( std::list< SalFrame* >::const_iterator it = rFrames.begin(); it != rFrames.end(); ++it )
+                    {
+                        X11SalFrame* pFrame = static_cast< X11SalFrame* >(*it);
+                        if( ! pFrame->IsFloatGrabWindow()
+                            && ( pFrame->GetWindow() == aChild ||
+                                 pFrame->GetShellWindow() == aChild ||
+                                 pFrame->GetStackingWindow() == aChild )
+                            )
+                        {
+                            bClosePopups = false;
+                            break;
+                        }
+                    }
+                }
             }
         }
 
@@ -2528,7 +2478,7 @@ long SalFrameData::HandleMouseEvent( XEv
             // --- RTL --- (mirror mouse pos)
             if( Application::GetSettings().GetLayoutRTL() )
                 aWheelEvt.mnX = nWidth_-1-aWheelEvt.mnX;
-			return Call( nEvent, &aWheelEvt );
+			return CallCallback( nEvent, &aWheelEvt );
 		}
 	}
 
@@ -2542,7 +2492,7 @@ long SalFrameData::HandleMouseEvent( XEv
         // --- RTL --- (mirror mouse pos)
         if( Application::GetSettings().GetLayoutRTL() )
             aMouseEvt.mnX = nWidth_-1-aMouseEvt.mnX;
-		nRet = Call( nEvent, &aMouseEvt );
+		nRet = CallCallback( nEvent, &aMouseEvt );
     }
 
     if( bClosePopups )
@@ -2568,19 +2518,19 @@ long SalFrameData::HandleMouseEvent( XEv
 // rest of the eventhandler.
 //
 void
-SalFrameData::RegisterDeleteData (SalFrameDelData *pData)
+X11SalFrame::RegisterDeleteData (SalFrameDelData *pData)
 {
     pData->SetNext (mpDeleteData);
     mpDeleteData = pData;
 }
 void
-SalFrameData::NotifyDeleteData ()
+X11SalFrame::NotifyDeleteData ()
 {
     for (SalFrameDelData* pData = mpDeleteData; pData != NULL; pData = pData->GetNext())
         pData->Delete();
 }
 void
-SalFrameData::UnregisterDeleteData (SalFrameDelData *pData)
+X11SalFrame::UnregisterDeleteData (SalFrameDelData *pData)
 {
     if (mpDeleteData == pData)
     {
@@ -2620,7 +2570,7 @@ GetAlternateKeyCode( const USHORT nKeyCo
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-long SalFrameData::HandleKeyEvent( XKeyEvent *pEvent )
+long X11SalFrame::HandleKeyEvent( XKeyEvent *pEvent )
 {
 	KeySym			nKeySym;
 	int 			nLen = 2048;
@@ -2656,11 +2606,7 @@ long SalFrameData::HandleKeyEvent( XKeyE
 
 	if( pEvent->state & ShiftMask )
 		nModCode |= KEY_SHIFT;
-#ifdef MACOSX
-	if ( ( pEvent->state & ControlMask ) || ( pEvent->state & Mod2Mask ) )
-#else
 	if( pEvent->state & ControlMask )
-#endif
 		nModCode |= KEY_MOD1;
 	if( pEvent->state & Mod1Mask )
 	{
@@ -2716,16 +2662,6 @@ long SalFrameData::HandleKeyEvent( XKeyE
                 nExtModMask = MODKEY_RSHIFT;
                 nModMask = KEY_SHIFT;
                 break;
-#ifdef MACOSX
-            case XK_Meta_L:
-                nExtModMask = MODKEY_LMOD1;
-                nModMask = KEY_MOD1;
-                break;
-            case XK_Meta_R:
-                nExtModMask = MODKEY_RMOD1;
-                nModMask = KEY_MOD1;
-                break;
-#endif
         }
         if( pEvent->type == KeyRelease )
         {
@@ -2741,7 +2677,7 @@ long SalFrameData::HandleKeyEvent( XKeyE
 		aModEvt.mnCode = nModCode;
 		aModEvt.mnTime = pEvent->time;
 
-		int nRet = Call( SALEVENT_KEYMODCHANGE, &aModEvt );
+		int nRet = CallCallback( SALEVENT_KEYMODCHANGE, &aModEvt );
 
         // emulate KEY_MENU
         if ( ( (nKeySym == XK_Alt_L) || (nKeySym == XK_Alt_R) ) &&
@@ -2756,8 +2692,8 @@ long SalFrameData::HandleKeyEvent( XKeyE
                 aKeyEvt.mnRepeat   = 0;
                 aKeyEvt.mnTime	   = pEvent->time;
                 aKeyEvt.mnCharCode = 0;
-                nRet = Call( SALEVENT_KEYINPUT, &aKeyEvt );
-                nRet = Call( SALEVENT_KEYUP, &aKeyEvt );
+                nRet = CallCallback( SALEVENT_KEYINPUT, &aKeyEvt );
+                nRet = CallCallback( SALEVENT_KEYUP, &aKeyEvt );
             }
         }
         else
@@ -2852,11 +2788,11 @@ long SalFrameData::HandleKeyEvent( XKeyE
 
 		if( KeyRelease == pEvent->type )
 		{
-			Call( SALEVENT_KEYUP, &aKeyEvt );
+			CallCallback( SALEVENT_KEYUP, &aKeyEvt );
 		}
 		else
 		{
-			if ( ! Call(SALEVENT_KEYINPUT, &aKeyEvt) )
+			if ( ! CallCallback(SALEVENT_KEYINPUT, &aKeyEvt) )
 			{
 				// independent layer doesnt want to handle key-event, so check
 				// whether the keycode may have an alternate meaning
@@ -2866,7 +2802,7 @@ long SalFrameData::HandleKeyEvent( XKeyE
 					aKeyEvt.mnCode = aAlternate.nKeyCode | nModCode;
 					if( aAlternate.nCharCode )
 						aKeyEvt.mnCharCode = aAlternate.nCharCode;
-					Call(SALEVENT_KEYINPUT, &aKeyEvt);
+					CallCallback(SALEVENT_KEYINPUT, &aKeyEvt);
 				}
                 else
                 if (pEvent->keycode != 0)
@@ -2878,7 +2814,7 @@ long SalFrameData::HandleKeyEvent( XKeyE
                     if ((nKeyCode != 0) && ((nKeyCode | nModCode) != aKeyEvt.mnCode))
                     {
                         aKeyEvt.mnCode = nKeyCode | nModCode;
-					    Call(SALEVENT_KEYINPUT, &aKeyEvt);
+					    CallCallback(SALEVENT_KEYINPUT, &aKeyEvt);
                     }
                 }
 			}
@@ -2902,7 +2838,7 @@ long SalFrameData::HandleKeyEvent( XKeyE
 
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-long SalFrameData::HandleFocusEvent( XFocusChangeEvent *pEvent )
+long X11SalFrame::HandleFocusEvent( XFocusChangeEvent *pEvent )
 {
     // #107739# ReflectionX in Windows mode changes focus while mouse is grabbed
 	if( nVisibleFloats > 0 && GetDisplay()->getWMAdaptor()->getWindowManagerName().EqualsAscii( "ReflectionX Windows" ) )
@@ -2921,13 +2857,13 @@ long SalFrameData::HandleFocusEvent( XFo
 	if ( mpInputContext != NULL  )
 	{
 		if( FocusIn == pEvent->type )
-            mpInputContext->SetICFocus( pFrame_ );
+            mpInputContext->SetICFocus( this );
         else
         {
             /*
              *  do not unset the IC focuse here because would kill
              *  a lookup choice windows that might have the focus now
-             *  	mpInputContext->UnsetICFocus( pFrame_ );
+             *  	mpInputContext->UnsetICFocus( this );
              */
             I18NStatus::get().show( false, I18NStatus::focus );
         }
@@ -2944,7 +2880,7 @@ long SalFrameData::HandleFocusEvent( XFo
 		if( FocusIn == pEvent->type )
 		{
 #ifndef _USE_PRINT_EXTENSION_
-            if( GetSalData()->pFirstInstance_->maInstData.mbPrinterInit )
+            if( static_cast< X11SalInstance* >(GetSalData()->pInstance_)->isPrinterInit() )
                 vcl_sal::PrinterUpdate::update();
 #endif
 			mbInputFocus = True;
@@ -2952,7 +2888,7 @@ long SalFrameData::HandleFocusEvent( XFo
 
 
 
-			long nRet = Call( SALEVENT_GETFOCUS,  0 );
+			long nRet = CallCallback( SALEVENT_GETFOCUS,  0 );
             if ((mpParent != NULL && nStyle_ == 0)
                 && pSVData->maWinData.mpFirstFloat )
             {
@@ -2967,7 +2903,7 @@ long SalFrameData::HandleFocusEvent( XFo
 			mbInputFocus = False;
             mbSendExtKeyModChange = mbKeyMenu = false;
             mnExtKeyMod = 0;
-			return Call( SALEVENT_LOSEFOCUS, 0 );
+			return CallCallback( SALEVENT_LOSEFOCUS, 0 );
 		}
 	}
 
@@ -2976,41 +2912,7 @@ long SalFrameData::HandleFocusEvent( XFo
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-extern "C" 
-{
-    static Bool GraphicsExposePredicate( Display* pDisplay, XEvent* pEvent, XPointer pSFrame )
-    {
-        Bool bRet = False;
-        SalFrameData* pFrame = (SalFrameData*)pSFrame;
-        if( (pEvent->type == GraphicsExpose || pEvent->type == NoExpose) &&
-            pEvent->xnoexpose.drawable == pFrame->GetWindow() )
-        {
-            bRet = True;
-        }
-        return bRet;
-    }
-}
-
-void SalFrameData::YieldGraphicsExpose()
-{
-    XEvent aEvent;
-    do
-    {
-        while( XCheckTypedWindowEvent( GetXDisplay(), GetWindow(), Expose, &aEvent ) )
-            HandleExposeEvent( &aEvent );
-
-        XIfEvent( GetXDisplay(), &aEvent, GraphicsExposePredicate, (XPointer)this );
-        if( aEvent.type == NoExpose )
-            return;
-
-        HandleExposeEvent( &aEvent );
-    } while( aEvent.xgraphicsexpose.count != 0 );
-}
-
-
-// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-
-long SalFrameData::HandleExposeEvent( XEvent *pEvent )
+long X11SalFrame::HandleExposeEvent( XEvent *pEvent )
 {
 	XRectangle	aRect;
 	USHORT		nCount = 0;
@@ -3030,7 +2932,6 @@ long SalFrameData::HandleExposeEvent( XE
 		aRect.width 	= pEvent->xgraphicsexpose.width;
 		aRect.height	= pEvent->xgraphicsexpose.height;
 		nCount			= pEvent->xgraphicsexpose.count;
-        mbWasGraphicsPaint = true;
 	}
 
     if( IsOverrideRedirect() && mbFullScreen &&
@@ -3042,7 +2943,7 @@ long SalFrameData::HandleExposeEvent( XE
     // width and height are extents, so they are of by one for rectangle
     maPaintRegion.Union( Rectangle( Point(aRect.x, aRect.y), Size(aRect.width+1, aRect.height+1) ) );
 
-	if( nCount || (maResizeTimer.IsActive() && ! mbWasGraphicsPaint) )
+	if( nCount || maResizeTimer.IsActive() )
         // wait for last expose rectangle, do not wait for resize timer
         // if a completed graphics expose sequence is available
 		return 1;
@@ -3058,14 +2959,13 @@ long SalFrameData::HandleExposeEvent( XE
     if( Application::GetSettings().GetLayoutRTL() )
         aPEvt.mnBoundX = nWidth_-aPEvt.mnBoundWidth-aPEvt.mnBoundX;
 
- 	Call( SALEVENT_PAINT, &aPEvt );
-    mbWasGraphicsPaint = false;
+ 	CallCallback( SALEVENT_PAINT, &aPEvt );
     maPaintRegion = Rectangle();
 
 	return 1;
 }
 
-void SalFrameData::RestackChildren( XLIB_Window* pTopLevelWindows, int nTopLevelWindows )
+void X11SalFrame::RestackChildren( XLIB_Window* pTopLevelWindows, int nTopLevelWindows )
 {
     if( maChildren.begin() != maChildren.end() )
     {
@@ -3076,10 +2976,10 @@ void SalFrameData::RestackChildren( XLIB
         if( nWindow < 0 )
             return;
 
-        ::std::list< SalFrame* >::const_iterator it;
+        std::list< X11SalFrame* >::const_iterator it;
         for( it = maChildren.begin(); it != maChildren.end(); ++it )
         {
-            SalFrameData* pData = &(*it)->maFrameData;
+            X11SalFrame* pData = *it;
             if( pData->bMapped_ )
             {
                 int nChild = nWindow;
@@ -3100,13 +3000,13 @@ void SalFrameData::RestackChildren( XLIB
         }
         for( it = maChildren.begin(); it != maChildren.end(); ++it )
         {
-            SalFrameData* pData = &(*it)->maFrameData;
+            X11SalFrame* pData = *it;
             pData->RestackChildren( pTopLevelWindows, nTopLevelWindows );
         }
     }
 }
 
-void SalFrameData::RestackChildren()
+void X11SalFrame::RestackChildren()
 {
     if( ! GetDisplay()->getWMAdaptor()->isTransientBehaviourAsExpected()
         && maChildren.begin() != maChildren.end() )
@@ -3127,7 +3027,7 @@ void SalFrameData::RestackChildren()
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-long SalFrameData::HandleSizeEvent( XConfigureEvent *pEvent )
+long X11SalFrame::HandleSizeEvent( XConfigureEvent *pEvent )
 {
 	if (   pEvent->window != GetShellWindow()
            && pEvent->window != GetWindow()
@@ -3166,11 +3066,11 @@ long SalFrameData::HandleSizeEvent( XCon
 
     if( pEvent->window == GetStackingWindow() )
     {
-        if( pFrame_->maGeometry.nX != pEvent->x || pFrame_->maGeometry.nY != pEvent->y )
+        if( maGeometry.nX != pEvent->x || maGeometry.nY != pEvent->y )
         {
-            pFrame_->maGeometry.nX = pEvent->x;
-            pFrame_->maGeometry.nY = pEvent->y;
-            Call( SALEVENT_MOVE, NULL );
+            maGeometry.nX = pEvent->x;
+            maGeometry.nY = pEvent->y;
+            CallCallback( SALEVENT_MOVE, NULL );
         }
         return 1;
     }
@@ -3183,38 +3083,38 @@ long SalFrameData::HandleSizeEvent( XCon
     nHeight_	= pEvent->height;
 
     if( !mbMoved )
-        mbMoved = ( pEvent->x != pFrame_->maGeometry.nX || pEvent->y != pFrame_->maGeometry.nY );
+        mbMoved = ( pEvent->x != maGeometry.nX || pEvent->y != maGeometry.nY );
     if( !mbSized )
-        mbSized = ( pEvent->width != pFrame_->maGeometry.nWidth || pEvent->height != pFrame_->maGeometry.nHeight );
+        mbSized = ( pEvent->width != maGeometry.nWidth || pEvent->height != maGeometry.nHeight );
 
     maResizeTimer.Start();
 
-    pFrame_->maGeometry.nX		= pEvent->x;
-    pFrame_->maGeometry.nY		= pEvent->y;
-    pFrame_->maGeometry.nWidth	= pEvent->width;
-    pFrame_->maGeometry.nHeight	= pEvent->height;
+    maGeometry.nX		= pEvent->x;
+    maGeometry.nY		= pEvent->y;
+    maGeometry.nWidth	= pEvent->width;
+    maGeometry.nHeight	= pEvent->height;
 
 	return 1;
 }
 
-IMPL_LINK( SalFrameData, HandleAlwaysOnTopRaise, void*, pDummy )
+IMPL_LINK( X11SalFrame, HandleAlwaysOnTopRaise, void*, pDummy )
 {
     if( bMapped_ )
-        pFrame_->ToTop( 0 );
+        ToTop( 0 );
     return 0;
 }
 
-IMPL_LINK( SalFrameData, HandleResizeTimer, void*, pDummy )
+IMPL_LINK( X11SalFrame, HandleResizeTimer, void*, pDummy )
 {
 	// update children's position
 	RestackChildren();
 
     if( mbSized && ! mbMoved )
-        Call ( SALEVENT_RESIZE, NULL );
+        CallCallback( SALEVENT_RESIZE, NULL );
     else if( mbMoved && ! mbSized )
-        Call ( SALEVENT_MOVE, NULL );
+        CallCallback( SALEVENT_MOVE, NULL );
     else if( mbMoved && mbSized )
-        Call ( SALEVENT_MOVERESIZE, NULL );
+        CallCallback( SALEVENT_MOVERESIZE, NULL );
 
     mbMoved = mbSized = false;
 
@@ -3228,15 +3128,14 @@ IMPL_LINK( SalFrameData, HandleResizeTim
     if( Application::GetSettings().GetLayoutRTL() )
         aPEvt.mnBoundX = nWidth_-aPEvt.mnBoundWidth-aPEvt.mnBoundX;
 
-	Call( SALEVENT_PAINT, &aPEvt );
-    mbWasGraphicsPaint = false;
+	CallCallback( SALEVENT_PAINT, &aPEvt );
     maPaintRegion = Rectangle();
 
 	return 0;
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-long SalFrameData::HandleReparentEvent( XReparentEvent *pEvent )
+long X11SalFrame::HandleReparentEvent( XReparentEvent *pEvent )
 {
 	Display 	   *pDisplay   = pEvent->display;
 	XLIB_Window 	hWM_Parent;
@@ -3274,7 +3173,7 @@ long SalFrameData::HandleReparentEvent( 
             hWM_Parent = GetShellWindow();
             break;
         }
-        /* #107048# this sometimes happens if a Show(TRUE) is
+         /* #107048# this sometimes happens if a Show(TRUE) is
          *  immediately followed by Show(FALSE) (which is braindead anyway)
          */
         if(  hDummy == hWM_Parent )
@@ -3343,20 +3242,6 @@ long SalFrameData::HandleReparentEvent( 
         aPresentationReparentList.push_back( GetStackingWindow() );
     }
 
-#ifdef NC_EVENTS
-	XQueryTree( pDisplay,
-				hWM_Parent,
-				&hRoot,
-				&hDummy,
-				&Children,
-				&nChildren );
-
-	for( n = 0; n < nChildren; n++ )
-		if( Children[n] != hShell_ && Children[n] != pEvent->parent )
-			XSelectInput( pDisplay, Children[n], NC_EVENTS );
-	XFree( Children );
-#endif
-
     int nLeft = 0, nTop = 0;
 	XTranslateCoordinates( GetXDisplay(),
                            GetShellWindow(),
@@ -3365,8 +3250,8 @@ long SalFrameData::HandleReparentEvent( 
                            &nLeft,
                            &nTop,
                            &hDummy );
-    pFrame_->maGeometry.nLeftDecoration	= nLeft > 0 ? nLeft-1 : 0;
-    pFrame_->maGeometry.nTopDecoration	= nTop  > 0 ? nTop-1  : 0;
+    maGeometry.nLeftDecoration	= nLeft > 0 ? nLeft-1 : 0;
+    maGeometry.nTopDecoration	= nTop  > 0 ? nTop-1  : 0;
 
     /*
      *  decorations are not symmetric,
@@ -3386,17 +3271,17 @@ long SalFrameData::HandleReparentEvent( 
     bool bResized = false;
     if( ! GetDisplay()->GetXLib()->WasXError() )
     {
-        pFrame_->maGeometry.nRightDecoration 	= wp - w - pFrame_->maGeometry.nLeftDecoration;
-        pFrame_->maGeometry.nBottomDecoration	= hp - h - pFrame_->maGeometry.nTopDecoration;
+        maGeometry.nRightDecoration 	= wp - w - maGeometry.nLeftDecoration;
+        maGeometry.nBottomDecoration	= hp - h - maGeometry.nTopDecoration;
         /*
          *  note: this works because hWM_Parent is direct child of root,
          *  not necessarily parent of GetShellWindow()
          */
-        pFrame_->maGeometry.nX		= xp + nLeft;
-        pFrame_->maGeometry.nY		= yp + nTop;
-        bResized = w != pFrame_->maGeometry.nWidth || h != pFrame_->maGeometry.nHeight;
-        pFrame_->maGeometry.nWidth	= w;
-        pFrame_->maGeometry.nHeight = h;
+        maGeometry.nX		= xp + nLeft;
+        maGeometry.nY		= yp + nTop;
+        bResized = w != maGeometry.nWidth || h != maGeometry.nHeight;
+        maGeometry.nWidth	= w;
+        maGeometry.nHeight = h;
     }
 
     // limit width and height if we are too large: #47757
@@ -3404,22 +3289,22 @@ long SalFrameData::HandleReparentEvent( 
 
     int nScreenWidth  = pDisplay_->GetScreenSize().Width();
     int nScreenHeight = pDisplay_->GetScreenSize().Height();
-    int nFrameWidth   = pFrame_->maGeometry.nWidth + pFrame_->maGeometry.nLeftDecoration + pFrame_->maGeometry.nRightDecoration;
-    int nFrameHeight  = pFrame_->maGeometry.nHeight + pFrame_->maGeometry.nTopDecoration  + pFrame_->maGeometry.nBottomDecoration;
+    int nFrameWidth   = maGeometry.nWidth + maGeometry.nLeftDecoration + maGeometry.nRightDecoration;
+    int nFrameHeight  = maGeometry.nHeight + maGeometry.nTopDecoration  + maGeometry.nBottomDecoration;
 
     if ((nFrameWidth > nScreenWidth) || (nFrameHeight > nScreenHeight))
     {
-        Size aSize(pFrame_->maGeometry.nWidth, pFrame_->maGeometry.nHeight);
+        Size aSize(maGeometry.nWidth, maGeometry.nHeight);
 
         if (nFrameWidth  > nScreenWidth)
-            aSize.Width()  = nScreenWidth  - pFrame_->maGeometry.nRightDecoration - pFrame_->maGeometry.nLeftDecoration;
+            aSize.Width()  = nScreenWidth  - maGeometry.nRightDecoration - maGeometry.nLeftDecoration;
         if (nFrameHeight > nScreenHeight)
-            aSize.Height() = nScreenHeight - pFrame_->maGeometry.nBottomDecoration - pFrame_->maGeometry.nTopDecoration;
+            aSize.Height() = nScreenHeight - maGeometry.nBottomDecoration - maGeometry.nTopDecoration;
 
         SetSize (aSize);
     }
     else if( bResized )
-        Call( SALEVENT_RESIZE, NULL );
+        CallCallback( SALEVENT_RESIZE, NULL );
 
     GetDisplay()->GetXLib()->SetIgnoreXErrors( bOldIgnore );
 
@@ -3427,13 +3312,13 @@ long SalFrameData::HandleReparentEvent( 
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-long SalFrameData::HandleColormapEvent( XColormapEvent *pEvent )
+long X11SalFrame::HandleColormapEvent( XColormapEvent *pEvent )
 {
 	return 0;
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-long SalFrameData::HandleStateEvent( XPropertyEvent *pEvent )
+long X11SalFrame::HandleStateEvent( XPropertyEvent *pEvent )
 {
 	Atom		  actual_type;
 	int 		  actual_format;
@@ -3471,21 +3356,10 @@ long SalFrameData::HandleStateEvent( XPr
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-long SalFrameData::HandleClientMessage( XClientMessageEvent *pEvent )
+long X11SalFrame::HandleClientMessage( XClientMessageEvent *pEvent )
 {
     const WMAdaptor& rWMAdaptor( *pDisplay_->getWMAdaptor() );
 
-	if( pEvent->message_type == rWMAdaptor.getAtom( WMAdaptor::SAL_USEREVENT ) )
-	{
-#if __SIZEOFLONG > 4
-		void* pData = (void*)
-			( (pEvent->data.l[0] & 0xffffffff) | (pEvent->data.l[1] << 32) );
-#else
-		void* pData = (void*)(pEvent->data.l[0]);
-#endif
-		Call( SALEVENT_USEREVENT, pData );
-		return 1;
-	}
 #if !defined(__synchronous_extinput__)
 	if( pEvent->message_type == rWMAdaptor.getAtom( WMAdaptor::SAL_EXTTEXTEVENT ) )
 	{
@@ -3495,7 +3369,7 @@ long SalFrameData::HandleClientMessage( 
 #endif
 	else if( pEvent->message_type == rWMAdaptor.getAtom( WMAdaptor::SAL_QUITEVENT ) )
 	{
-		stderr0( "SalFrameData::Dispatch Quit\n" );
+		stderr0( "X11SalFrame::Dispatch Quit\n" );
 		Close(); // ???
 		return 1;
 	}
@@ -3515,7 +3389,7 @@ long SalFrameData::HandleClientMessage( 
             
             if( ! bSession )
             {
-                if( pFrame_ == s_pSaveYourselfFrame )
+                if( this == s_pSaveYourselfFrame )
                 {
                     ByteString aExec( SessionManagerClient::getExecName(), osl_getThreadTextEncoding() );
                     const char* argv[2];
@@ -3535,17 +3409,17 @@ long SalFrameData::HandleClientMessage( 
                 // save open documents; would be good for non Dtwm, too,
                 // but there is no real Shutdown message in the ancient
                 // SM protocol; on Dtwm SaveYourself really means Shutdown, too.
-                IceSalSession::handleOldX11SaveYourself( pFrame_ );
+                IceSalSession::handleOldX11SaveYourself( this );
             }
 		}
 	}
 	return 0;
 }
 
-void SalFrameData::SaveYourselfDone( SalFrame* pSaveFrame )
+void X11SalFrame::SaveYourselfDone( SalFrame* pSaveFrame )
 {
     // session save was done, inform dtwm
-    if( s_pSaveYourselfFrame )
+    if( s_pSaveYourselfFrame && pSaveFrame )
     {
         ByteString aExec( SessionManagerClient::getExecName(), osl_getThreadTextEncoding() );
         const char* argv[2];
@@ -3554,32 +3428,39 @@ void SalFrameData::SaveYourselfDone( Sal
 #if OSL_DEBUG_LEVEL > 1
         fprintf( stderr, "SaveYourself request, setting command: %s %s\n", argv[0], argv[1] );
 #endif
-        XSetCommand( s_pSaveYourselfFrame->maFrameData.GetXDisplay(),
-                     s_pSaveYourselfFrame->maFrameData.GetShellWindow(),
+        XSetCommand( s_pSaveYourselfFrame->GetXDisplay(),
+                     s_pSaveYourselfFrame->GetShellWindow(),
                      (char**)argv, 2 );
         if( pSaveFrame != s_pSaveYourselfFrame )
         {
             // check if it still exists
-            SalFrame* pFrame = GetSalData()->pFirstFrame_;
-            while( pFrame && pFrame != pSaveFrame )
-                pFrame = pFrame->maFrameData.pNextFrame_;
-            if( pFrame )
-            {
-                const WMAdaptor& rWMAdaptor( *pFrame->maFrameData.pDisplay_->getWMAdaptor() );
-                XChangeProperty( pFrame->maFrameData.GetXDisplay(),
-                                 pFrame->maFrameData.GetShellWindow(),
+            X11SalFrame* pFrame = NULL;
+            const std::list< SalFrame* >& rFrames = static_cast<X11SalFrame*>(pSaveFrame)->GetDisplay()->getFrames();
+            std::list< SalFrame* >::const_iterator it = rFrames.begin();
+            while( it != rFrames.end() )
+            {
+                pFrame = static_cast< X11SalFrame* >(*it);
+                if( pFrame == pSaveFrame )
+                    break;
+                ++it; 
+            }
+            if( pFrame == pSaveFrame )
+            {
+                const WMAdaptor& rWMAdaptor( *pFrame->pDisplay_->getWMAdaptor() );
+                XChangeProperty( pFrame->GetXDisplay(),
+                                 pFrame->GetShellWindow(),
                                  rWMAdaptor.getAtom( WMAdaptor::WM_COMMAND ), XA_STRING, 8, PropModeReplace, (unsigned char*)"", 0 );
             }
         }
-        s_pSaveYourselfFrame->maFrameData.ShutDown();
+        s_pSaveYourselfFrame->ShutDown();
     }
 }
 
 // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
-Bool SalFrameData::checkKeyReleaseForRepeat( Display* pDisplay, XEvent* pCheck, XPointer pSalFrameData )
+Bool X11SalFrame::checkKeyReleaseForRepeat( Display* pDisplay, XEvent* pCheck, XPointer pX11SalFrame )
 {
-	SalFrameData* pThis = (SalFrameData*)pSalFrameData;
+	X11SalFrame* pThis = (X11SalFrame*)pX11SalFrame;
 	return
 		pCheck->type			== XLIB_KeyPress &&
 		pCheck->xkey.state		== pThis->nKeyState_ &&
@@ -3587,7 +3468,7 @@ Bool SalFrameData::checkKeyReleaseForRep
 		pCheck->xkey.time		== pThis->nReleaseTime_  ? True : False;
 }
 
-long SalFrameData::Dispatch( XEvent *pEvent )
+long X11SalFrame::Dispatch( XEvent *pEvent )
 {
 	long nRet = 0;
 
@@ -3667,8 +3548,8 @@ long SalFrameData::Dispatch( XEvent *pEv
 					bViewable_ = TRUE;
 					nRet = TRUE;
 					if ( mpInputContext != NULL )
-						mpInputContext->Map( pFrame_ );
-                    Call( SALEVENT_RESIZE, NULL );
+						mpInputContext->Map( this );
+                    CallCallback( SALEVENT_RESIZE, NULL );
                     if( pDisplay_->GetServerVendor() == vendor_hummingbird )
                     {
                         /*
@@ -3677,7 +3558,7 @@ long SalFrameData::Dispatch( XEvent *pEv
                          *  so start a paint via the timer here
                          *  to avoid duplicate paints
                          */
-                        maPaintRegion.Union( Rectangle( Point( 0, 0 ), Size( pFrame_->maGeometry.nWidth, pFrame_->maGeometry.nHeight ) ) );
+                        maPaintRegion.Union( Rectangle( Point( 0, 0 ), Size( maGeometry.nWidth, maGeometry.nHeight ) ) );
                         if( ! maResizeTimer.IsActive() )
                         {
                             mbSized = mbMoved = true;
@@ -3693,7 +3574,7 @@ long SalFrameData::Dispatch( XEvent *pEv
                         // #101775# don't set the focus into the IME status window
                         // since this will lead to a parent loose-focus, close status,
                         // reget focus, open status, .... flicker loop
-                        if ( (I18NStatus::get().getStatusFrame() != pFrame_) )
+                        if ( (I18NStatus::get().getStatusFrame() != this) )
                             XSetInputFocus( GetXDisplay(), GetShellWindow(), RevertToParent, CurrentTime );
                     }
 
@@ -3706,11 +3587,11 @@ long SalFrameData::Dispatch( XEvent *pEv
                     if( ! ( nStyle_ & ( SAL_FRAME_STYLE_FLOAT | SAL_FRAME_STYLE_CHILD ) )
                         && ! IsOverrideRedirect() )
                     {
-                        for( ::std::list< SalFrame* >::const_iterator it = maChildren.begin();
+                        for( std::list< X11SalFrame* >::const_iterator it = maChildren.begin();
                              it != maChildren.end(); ++it )
                         {
-                            if( (*it)->maFrameData.mbTransientForRoot )
-                                pDisplay_->getWMAdaptor()->changeReferenceFrame( *it, pFrame_ );
+                            if( (*it)->mbTransientForRoot )
+                                pDisplay_->getWMAdaptor()->changeReferenceFrame( *it, this );
                         }
                     }
 
@@ -3728,8 +3609,8 @@ long SalFrameData::Dispatch( XEvent *pEv
 					bViewable_ = FALSE;
 					nRet = TRUE;
 					if ( mpInputContext != NULL )
-						mpInputContext->Unmap( pFrame_ );
-					Call( SALEVENT_RESIZE, NULL );
+						mpInputContext->Unmap( this );
+					CallCallback( SALEVENT_RESIZE, NULL );
 				}
 				break;
 
@@ -3755,7 +3636,7 @@ long SalFrameData::Dispatch( XEvent *pEv
 
 			case MappingNotify:
 				if( MappingPointer != pEvent->xmapping.request )
-					nRet = Call( SALEVENT_KEYBOARDCHANGED, 0 );
+					nRet = CallCallback( SALEVENT_KEYBOARDCHANGED, 0 );
 				break;
 
 			case ColormapNotify:
@@ -3767,7 +3648,7 @@ long SalFrameData::Dispatch( XEvent *pEv
 				if( pEvent->xproperty.atom == pDisplay_->getWMAdaptor()->getAtom( WMAdaptor::WM_STATE ) )
 					nRet = HandleStateEvent( &pEvent->xproperty );
 				else
-					nRet = pDisplay_->getWMAdaptor()->handlePropertyNotify( pFrame_, &pEvent->xproperty );
+					nRet = pDisplay_->getWMAdaptor()->handlePropertyNotify( this, &pEvent->xproperty );
 				break;
 			}
 
@@ -3780,24 +3661,6 @@ long SalFrameData::Dispatch( XEvent *pEv
 	{
 		switch( pEvent->type )
 		{
-#ifdef NC_EVENTS
-			case XLIB_KeyPress:
-			case KeyRelease:
-				nRet = HandleNCKeyEvent()
-				break;
-
-			case ButtonPress:
-			case ButtonRelease:
-			case MotionNotify:
-			case EnterNotify:
-			case LeaveNotify:
-				nRet = HandleNCMouseEvent( pEvent );
-				break;
-
-			case Expose:
-				nRet = HandleNCExposeEvent( pEvent );
-				break;
-#endif
  			case FocusIn:
  			case FocusOut:
                 if( ( nStyle_ & SAL_FRAME_STYLE_CHILD )
Index: vcl/unx/source/window/salmenu.cxx
===================================================================
RCS file: vcl/unx/source/window/salmenu.cxx
diff -N vcl/unx/source/window/salmenu.cxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ vcl/unx/source/window/salmenu.cxx	6 Jan 2004 14:45:30 -0000	1.5
@@ -0,0 +1,169 @@
+/*************************************************************************
+ *
+ *  
+ *
+ *  
+ *
+ *  
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+
+#ifndef _SV_SALDATA_HXX
+#include <saldata.hxx>
+#endif
+#ifndef _SV_SALINST_H
+#include <salinst.h>
+#endif
+#ifndef _SV_SALMENU_H
+#include <salmenu.h>
+#endif
+
+
+// =======================================================================
+
+// X11SalInst factory methods
+
+SalMenu* X11SalInstance::CreateMenu( BOOL bMenuBar )
+{
+    return NULL;  // no support for native menues
+}
+
+void X11SalInstance::DestroyMenu( SalMenu* pSalMenu )
+{
+    delete pSalMenu;
+}
+
+
+SalMenuItem* X11SalInstance::CreateMenuItem( const SalItemParams* pItemData )
+{
+    return NULL;  // no support for native menues
+}
+
+void X11SalInstance::DestroyMenuItem( SalMenuItem* pSalMenuItem )
+{
+    delete pSalMenuItem;
+}
+
+
+// =======================================================================
+
+
+/*
+ * X11SalMenu
+ */
+
+
+X11SalMenu::~X11SalMenu()
+{
+}
+
+BOOL X11SalMenu::VisibleMenuBar()
+{
+    return FALSE; 
+}
+
+void X11SalMenu::SetFrame( const SalFrame *pFrame )
+{
+}
+
+void X11SalMenu::InsertItem( SalMenuItem* pSalMenuItem, unsigned nPos )
+{
+}
+
+void X11SalMenu::RemoveItem( unsigned nPos )
+{
+}
+
+void X11SalMenu::SetSubMenu( SalMenuItem* pSalMenuItem, SalMenu* pSubMenu, unsigned nPos )
+{
+}
+
+void X11SalMenu::CheckItem( unsigned nPos, BOOL bCheck )
+{
+}
+
+void X11SalMenu::EnableItem( unsigned nPos, BOOL bEnable )
+{
+}
+
+void X11SalMenu::SetItemImage( unsigned nPos, SalMenuItem* pSalMenuItem, const Image& rImage )
+{
+}
+
+void X11SalMenu::SetItemText( unsigned nPos, SalMenuItem* pSalMenuItem, const XubString& rText )
+{
+}
+
+void X11SalMenu::SetAccelerator( unsigned nPos, SalMenuItem* pSalMenuItem, const KeyCode& rKeyCode, const XubString& rKeyName )
+{
+}
+
+void X11SalMenu::GetSystemMenuData( SystemMenuData* pData )
+{
+}
+
+// =======================================================================
+
+/*
+ * SalMenuItem
+ */
+
+
+X11SalMenuItem::~X11SalMenuItem()
+{
+}
+
+// -------------------------------------------------------------------
+
Index: vcl/unx/source/window/salobj.cxx
===================================================================
RCS file: /cvs/gsl/vcl/unx/source/window/salobj.cxx,v
retrieving revision 1.6
retrieving revision 1.10
diff -u -p -u -r1.6 -r1.10
--- vcl/unx/source/window/salobj.cxx	24 Oct 2001 16:32:21 -0000	1.6
+++ vcl/unx/source/window/salobj.cxx	10 May 2004 16:00:55 -0000	1.10
@@ -59,7 +59,6 @@
  *
  ************************************************************************/
 
-#define _SV_SALOBJ_CXX
 #include <prex.h>
 #include <X11/Xlib.h>
 #include <X11/extensions/shape.h>
@@ -72,19 +71,19 @@
 #include <saldata.hxx>
 #endif
 #ifndef _SV_SALINST_HXX
-#include <salinst.hxx>
+#include <salinst.h>
 #endif
 #ifndef _SV_SALDISP_HXX
 #include <saldisp.hxx>
 #endif
 #ifndef _SV_SALFRAME_HXX
-#include <salframe.hxx>
+#include <salframe.h>
 #endif
-#ifndef _SV_SALOBJ_HXX
-#include <salobj.hxx>
+#ifndef _SV_SALOBJ_H
+#include <salobj.h>
 #endif
 
-SalObjectList SalObjectData::aAllObjects;
+SalObjectList X11SalObject::aAllObjects;
 
 // =======================================================================
 
@@ -96,11 +95,11 @@ long ImplSalObjCallbackDummy( void*, Sal
 // =======================================================================
 // SalInstance memberfkts to create and destroy a SalObject
 
-SalObject* SalInstance::CreateObject( SalFrame* pParent )
+SalObject* X11SalInstance::CreateObject( SalFrame* pParent )
 {
 	int error_base, event_base;
-	SalObject*		 pObject  = new SalObject;
-	SystemChildData* pObjData = const_cast<SystemChildData*>(pObject->GetSystemData());
+	X11SalObject*		pObject  = new X11SalObject();
+	SystemChildData*	pObjData = const_cast<SystemChildData*>(pObject->GetSystemData());
 
 	if ( ! XShapeQueryExtension( (Display*)pObjData->pDisplay,
 								  &event_base, &error_base ) )
@@ -109,31 +108,32 @@ SalObject* SalInstance::CreateObject( Sa
 		return NULL;
 	}
 
-	SalDisplay* pSalDisp		= pParent->maFrameData.GetDisplay();
-    Display* pDisp				= pParent->maFrameData.GetXDisplay();
-	XLIB_Window aObjectParent	= pParent->maFrameData.GetWindow();
+	SalDisplay* pSalDisp		= GetSalData()->GetDisplay();
+    const SystemEnvData* pEnv	= pParent->GetSystemData();
+    Display* pDisp				= pSalDisp->GetDisplay();
+	XLIB_Window aObjectParent	= (XLIB_Window)pEnv->aWindow;
 
-	pObject->maObjectData.maPrimary =
+	pObject->maPrimary =
         XCreateSimpleWindow( pDisp,
                              aObjectParent,
                              0, 0,
                              100, 100, 0,
-                             pParent->maFrameData.GetDisplay()->GetColormap().GetBlackPixel(),
-                             pParent->maFrameData.GetDisplay()->GetColormap().GetWhitePixel()
+                             pSalDisp->GetColormap().GetBlackPixel(),
+                             pSalDisp->GetColormap().GetWhitePixel()
                              );
-	pObject->maObjectData.maSecondary =
+	pObject->maSecondary =
         XCreateSimpleWindow( pDisp,
-                             pObject->maObjectData.maPrimary,
+                             pObject->maPrimary,
                              0, 0,
                              100, 100, 0,
-                             pParent->maFrameData.GetDisplay()->GetColormap().GetBlackPixel(),
-                             pParent->maFrameData.GetDisplay()->GetColormap().GetWhitePixel()
+                             pSalDisp->GetColormap().GetBlackPixel(),
+                             pSalDisp->GetColormap().GetWhitePixel()
                              );
-	XMapWindow( pDisp, pObject->maObjectData.maPrimary );
-	XMapWindow( pDisp, pObject->maObjectData.maSecondary );
+	XMapWindow( pDisp, pObject->maPrimary );
+	XMapWindow( pDisp, pObject->maSecondary );
 
 	pObjData->pDisplay		= pDisp;
-	pObjData->aWindow		= pObject->maObjectData.maSecondary;
+	pObjData->aWindow		= pObject->maSecondary;
 	pObjData->pWidget		= NULL;
 	pObjData->pVisual		= pSalDisp->GetVisual()->GetVisual();
 	pObjData->nDepth		= pSalDisp->GetVisual()->GetDepth();
@@ -144,7 +144,7 @@ SalObject* SalInstance::CreateObject( Sa
 }
 
 
-void SalInstance::DestroyObject( SalObject* pObject )
+void X11SalInstance::DestroyObject( SalObject* pObject )
 {
 	delete pObject;
 }
@@ -204,43 +204,43 @@ SalClipRegion::UnionClipRegion( long nX,
 // SalObject Implementation
 
 
-SalObject::SalObject()
+X11SalObject::X11SalObject()
 {
-	maObjectData.maSystemChildData.nSize		= sizeof( SystemChildData );
-	maObjectData.maSystemChildData.pDisplay 	= GetSalData()->GetDefDisp()->GetDisplay();
-	maObjectData.maSystemChildData.aWindow		= None;
-	maObjectData.maSystemChildData.pSalFrame	= 0;
-	maObjectData.maSystemChildData.pWidget		= 0;
-	maObjectData.maSystemChildData.pVisual		= 0;
-	maObjectData.maSystemChildData.nDepth		= 0;
-	maObjectData.maSystemChildData.aColormap	= 0;
-	maObjectData.maSystemChildData.pAppContext	= NULL;
-	maObjectData.maSystemChildData.aShellWindow	= 0;
-	maObjectData.maSystemChildData.pShellWidget	= NULL;
+	maSystemChildData.nSize		= sizeof( SystemChildData );
+	maSystemChildData.pDisplay 	= GetSalData()->GetDisplay()->GetDisplay();
+	maSystemChildData.aWindow		= None;
+	maSystemChildData.pSalFrame	= 0;
+	maSystemChildData.pWidget		= 0;
+	maSystemChildData.pVisual		= 0;
+	maSystemChildData.nDepth		= 0;
+	maSystemChildData.aColormap	= 0;
+	maSystemChildData.pAppContext	= NULL;
+	maSystemChildData.aShellWindow	= 0;
+	maSystemChildData.pShellWidget	= NULL;
 	
-	maObjectData.mpInst							= NULL;
-	maObjectData.mpProc							= ImplSalObjCallbackDummy;
-	maObjectData.maPrimary						= NULL;
-	maObjectData.maSecondary					= NULL;
+	mpInst							= NULL;
+	mpProc							= ImplSalObjCallbackDummy;
+	maPrimary						= 0;
+	maSecondary						= 0;
 
-	SalObjectData::aAllObjects.Insert( this, LIST_APPEND );
+	X11SalObject::aAllObjects.Insert( this, LIST_APPEND );
 }
 
 
-SalObject::~SalObject()
+X11SalObject::~X11SalObject()
 {
-	SalObjectData::aAllObjects.Remove( this );
-	if ( maObjectData.maSecondary ) 
-		XDestroyWindow( (Display*)maObjectData.maSystemChildData.pDisplay, maObjectData.maSecondary );
-	if ( maObjectData.maPrimary )
-		XDestroyWindow( (Display*)maObjectData.maSystemChildData.pDisplay, maObjectData.maPrimary );
+	X11SalObject::aAllObjects.Remove( this );
+	if ( maSecondary ) 
+		XDestroyWindow( (Display*)maSystemChildData.pDisplay, maSecondary );
+	if ( maPrimary )
+		XDestroyWindow( (Display*)maSystemChildData.pDisplay, maPrimary );
 }
 
 
 void
-SalObject::ResetClipRegion()
+X11SalObject::ResetClipRegion()
 {
-	maObjectData.maClipRegion.ResetClipRegion();
+	maClipRegion.ResetClipRegion();
 
 	const int	dest_kind	= ShapeBounding;
 	const int	op			= ShapeSet;
@@ -249,9 +249,9 @@ SalObject::ResetClipRegion()
 	XWindowAttributes win_attrib;
 	XRectangle		  win_size;
 
-	XLIB_Window aShapeWindow = maObjectData.maPrimary;
+	XLIB_Window aShapeWindow = maPrimary;
 
-	XGetWindowAttributes ( (Display*)maObjectData.maSystemChildData.pDisplay,
+	XGetWindowAttributes ( (Display*)maSystemChildData.pDisplay,
 						   aShapeWindow,
 						   &win_attrib );
 
@@ -260,7 +260,7 @@ SalObject::ResetClipRegion()
 	win_size.width	= win_attrib.width;
 	win_size.height = win_attrib.height;
 
-	XShapeCombineRectangles ( (Display*)maObjectData.maSystemChildData.pDisplay,
+	XShapeCombineRectangles ( (Display*)maSystemChildData.pDisplay,
 							  aShapeWindow,
 							  dest_kind,
 							  0, 0, 			// x_off, y_off
@@ -271,25 +271,25 @@ SalObject::ResetClipRegion()
 
 
 void
-SalObject::BeginSetClipRegion( ULONG nRectCount )
+X11SalObject::BeginSetClipRegion( ULONG nRectCount )
 {
-	maObjectData.maClipRegion.BeginSetClipRegion ( nRectCount );
+	maClipRegion.BeginSetClipRegion ( nRectCount );
 }
 
 
 void
-SalObject::UnionClipRegion( long nX, long nY, long nWidth, long nHeight )
+X11SalObject::UnionClipRegion( long nX, long nY, long nWidth, long nHeight )
 {
-	maObjectData.maClipRegion.UnionClipRegion ( nX, nY, nWidth, nHeight );
+	maClipRegion.UnionClipRegion ( nX, nY, nWidth, nHeight );
 }
 
 
 void
-SalObject::EndSetClipRegion()
+X11SalObject::EndSetClipRegion()
 {
-	XRectangle *pRectangles = maObjectData.maClipRegion.EndSetClipRegion ();
-	const int	nType		= maObjectData.maClipRegion.GetClipRegionType();
-	const int	nRectangles = maObjectData.maClipRegion.GetRectangleCount();
+	XRectangle *pRectangles = maClipRegion.EndSetClipRegion ();
+	const int	nType		= maClipRegion.GetClipRegionType();
+	const int	nRectangles = maClipRegion.GetRectangleCount();
 
 	const int	dest_kind	= ShapeBounding;
 	const int	ordering	= YSorted;
@@ -310,9 +310,9 @@ SalObject::EndSetClipRegion()
 			op = ShapeUnion;
 	}
 
-	XLIB_Window aShapeWindow = maObjectData.maPrimary;
+	XLIB_Window aShapeWindow = maPrimary;
 	
-	XShapeCombineRectangles ( (Display*)maObjectData.maSystemChildData.pDisplay,
+	XShapeCombineRectangles ( (Display*)maSystemChildData.pDisplay,
 							  aShapeWindow,
 							  dest_kind,
 							  0, 0, // x_off, y_off
@@ -323,127 +323,104 @@ SalObject::EndSetClipRegion()
 
 
 USHORT
-SalObject::GetClipRegionType()
+X11SalObject::GetClipRegionType()
 {
-	return maObjectData.maClipRegion.GetClipRegionType();
+	return maClipRegion.GetClipRegionType();
 }
 
 // -----------------------------------------------------------------------
 
 void
-SalObject::SetPosSize( long nX, long nY, long nWidth, long nHeight )
+X11SalObject::SetPosSize( long nX, long nY, long nWidth, long nHeight )
 {
-	if ( maObjectData.maPrimary && maObjectData.maSecondary && nWidth && nHeight )
+	if ( maPrimary && maSecondary && nWidth && nHeight )
 	{
-        XMoveResizeWindow( (Display*)maObjectData.maSystemChildData.pDisplay,
-                           maObjectData.maPrimary,
+        XMoveResizeWindow( (Display*)maSystemChildData.pDisplay,
+                           maPrimary,
  						   nX, nY, nWidth, nHeight );
-        XMoveResizeWindow( (Display*)maObjectData.maSystemChildData.pDisplay,
-                           maObjectData.maSecondary,
+        XMoveResizeWindow( (Display*)maSystemChildData.pDisplay,
+                           maSecondary,
  						   0, 0, nWidth, nHeight );
 	}
 }
 
 
 void
-SalObject::Show( BOOL bVisible )
+X11SalObject::Show( BOOL bVisible )
 {
-	if	( ! maObjectData.maSystemChildData.aWindow )
+	if	( ! maSystemChildData.aWindow )
 		return;
 
 	if ( bVisible ) 
-		XMapWindow( (Display*)maObjectData.maSystemChildData.pDisplay,
-                    maObjectData.maPrimary );
+		XMapWindow( (Display*)maSystemChildData.pDisplay,
+                    maPrimary );
 	else
-		XUnmapWindow( (Display*)maObjectData.maSystemChildData.pDisplay,
-                    maObjectData.maPrimary );
+		XUnmapWindow( (Display*)maSystemChildData.pDisplay,
+                    maPrimary );
 
-	maObjectData.mbVisible = bVisible;
+	mbVisible = bVisible;
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::Enable( BOOL bEnable )
+void X11SalObject::Enable( BOOL bEnable )
 {
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::GrabFocus()
+void X11SalObject::GrabFocus()
 {
-	if( maObjectData.mbVisible )
- 		XSetInputFocus( (Display*)maObjectData.maSystemChildData.pDisplay,
- 						maObjectData.maSystemChildData.aWindow,
+	if( mbVisible )
+ 		XSetInputFocus( (Display*)maSystemChildData.pDisplay,
+ 						maSystemChildData.aWindow,
  						RevertToNone,
  						CurrentTime );
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::SetBackground()
+void X11SalObject::SetBackground()
 {
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::SetBackground( SalColor nSalColor )
+void X11SalObject::SetBackground( SalColor nSalColor )
 {
 }
 
 // -----------------------------------------------------------------------
 
-const SystemChildData* SalObject::GetSystemData() const
+const SystemChildData* X11SalObject::GetSystemData() const
 {
-	return &maObjectData.maSystemChildData;
+	return &maSystemChildData;
 }
 
-// -----------------------------------------------------------------------
-
-void SalObject::SetCallback( void* pInst, SALOBJECTPROC pProc )
-{
-	  maObjectData.mpInst = pInst;
-	  if ( pProc )
-		  maObjectData.mpProc = pProc;
-	  else
-		  maObjectData.mpProc = ImplSalObjCallbackDummy;
-}
-
-long SalObjectData::Dispatch( XEvent* pEvent )
+long X11SalObject::Dispatch( XEvent* pEvent )
 {
 	for( int n= 0; n < aAllObjects.Count(); n++ )
 	{
-		SalObject* pObject = aAllObjects.GetObject( n );
-		if( pEvent->xany.window == pObject->maObjectData.maPrimary ||
-			pEvent->xany.window == pObject->maObjectData.maSecondary )
+		X11SalObject* pObject = aAllObjects.GetObject( n );
+		if( pEvent->xany.window == pObject->maPrimary ||
+			pEvent->xany.window == pObject->maSecondary )
 		{
 			switch( pEvent->type )
 			{
 				case UnmapNotify:
-					pObject->maObjectData.mbVisible = FALSE;
+					pObject->mbVisible = FALSE;
 					return 1;
 				case MapNotify:
-					pObject->maObjectData.mbVisible = TRUE;
+					pObject->mbVisible = TRUE;
 					return 1;
 				case ButtonPress:
-					pObject->maObjectData.mpProc(
-						pObject->maObjectData.mpInst,
-						pObject,
-						SALOBJ_EVENT_TOTOP,
-						NULL );
+					pObject->CallCallback( SALOBJ_EVENT_TOTOP, NULL );
 					return 1;
 				case FocusIn:
-					pObject->maObjectData.mpProc(
-						pObject->maObjectData.mpInst,
-						pObject,
-						SALOBJ_EVENT_GETFOCUS,
-						NULL );
+					pObject->CallCallback( SALOBJ_EVENT_GETFOCUS, NULL );
 					return 1;
 				case FocusOut:
-					pObject->maObjectData.mpProc(
-						pObject->maObjectData.mpInst,
-						pObject,
-						SALOBJ_EVENT_LOSEFOCUS,
-						NULL );
+					pObject->CallCallback( SALOBJ_EVENT_LOSEFOCUS, NULL );
 					return 1;
 				default: break;
 			}
