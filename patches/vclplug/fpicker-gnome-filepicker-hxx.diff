--- /dev/null	2004-04-06 14:27:52.000000000 +0100
+++ fpicker/source/unx/gnome/SalGtkFilePicker.hxx	2004-07-09 13:41:46.930412800 +0100
@@ -0,0 +1,409 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): Anil Bhatia
+ *
+ *
+ ************************************************************************/
+
+#ifndef _GNOMEFILEPICKER_HXX_
+#define _GNOMEFILEPICKER_HXX_
+
+//_______________________________________________________________________________________________________________________
+//	includes of other projects
+//_______________________________________________________________________________________________________________________
+
+#ifndef _CPPUHELPER_COMPBASE9_HXX_
+#include <cppuhelper/compbase9.hxx>
+#endif
+
+#ifndef _OSL_MUTEX_HXX_
+#include <osl/mutex.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_LANG_XINITIALIZATION_HPP_
+#include <com/sun/star/lang/XInitialization.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UI_DIALOGS_XFILEPICKERNOTIFIER_HPP_
+#include <com/sun/star/ui/dialogs/XFilePickerNotifier.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UI_DIALOGS_XFILTERMANAGER_HPP_
+#include <com/sun/star/ui/dialogs/XFilterManager.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UI_DIALOGS_XFILTERGROUPMANAGER_HPP_
+#include <com/sun/star/ui/dialogs/XFilterGroupManager.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UI_DIALOGS_XFILEPICKERCONTROLACCESS_HPP_
+#include <com/sun/star/ui/dialogs/XFilePickerControlAccess.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UI_DIALOGS_XFILEPREVIEW_HPP_
+#include <com/sun/star/ui/dialogs/XFilePreview.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_UTIL_XCANCELLABLE_HPP_
+#include <com/sun/star/util/XCancellable.hpp>
+#endif
+
+#ifndef _COM_SUN_STAR_BEANS_STRINGPAIR_HPP_
+#include <com/sun/star/beans/StringPair.hpp>
+#endif
+
+#include <memory>
+
+#include <gtk/gtk.h>
+#include <gdk/gdkkeysyms.h>
+
+#ifndef _RTL_USTRING_H_
+#include <rtl/ustring.hxx>
+#endif
+
+#include <list>
+
+//----------------------------------------------------------
+// Implementation class for the XFilePicker Interface
+//----------------------------------------------------------
+
+//----------------------------------------------------------
+// forward declarations
+//----------------------------------------------------------
+
+//class SalGtkFileDialog;
+//#include "SalGtkFileDialog.hxx"
+using namespace rtl;
+
+struct FilterEntry;
+struct ElementEntry_Impl;
+
+typedef ::std::list < FilterEntry >		FilterList;
+typedef ::std::list < ElementEntry_Impl >	ElementList;
+typedef ::com::sun::star::beans::StringPair	UnoFilterEntry;
+typedef ::com::sun::star::uno::Sequence< UnoFilterEntry >	UnoFilterList;	// can be transported more effectively
+
+
+//----------------------------------------------------------
+// class declaration		
+//----------------------------------------------------------
+
+class SalGtkFilePickerDummy
+{
+	protected:
+		osl::Mutex	m_rbHelperMtx;
+};
+
+class SalGtkFilePicker : 
+        public SalGtkFilePickerDummy,
+	public cppu::WeakComponentImplHelper9<         
+        ::com::sun::star::ui::dialogs::XFilterManager,
+        ::com::sun::star::ui::dialogs::XFilterGroupManager,
+        ::com::sun::star::ui::dialogs::XFilePickerControlAccess,
+        ::com::sun::star::ui::dialogs::XFilePickerNotifier,
+        ::com::sun::star::ui::dialogs::XFilePreview,
+	::com::sun::star::lang::XInitialization,
+        ::com::sun::star::util::XCancellable,
+	::com::sun::star::lang::XEventListener,
+	::com::sun::star::lang::XServiceInfo >		
+{
+	public:
+
+		// constructor
+		SalGtkFilePicker( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xServiceMgr );
+
+		//------------------------------------------------------------------------------------
+		// XFilePickerNotifier
+		//------------------------------------------------------------------------------------
+	
+		virtual void SAL_CALL addFilePickerListener( const ::com::sun::star::uno::Reference< ::com::sun::star::ui::dialogs::XFilePickerListener >& xListener ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+		virtual void SAL_CALL removeFilePickerListener( const ::com::sun::star::uno::Reference< ::com::sun::star::ui::dialogs::XFilePickerListener >& xListener ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		//------------------------------------------------------------------------------------
+		// XExecutableDialog functions
+		//------------------------------------------------------------------------------------
+	
+		virtual void SAL_CALL setTitle( const ::rtl::OUString& aTitle ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		virtual sal_Int16 SAL_CALL execute(  ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		//------------------------------------------------------------------------------------
+		// XFilePicker functions
+		//------------------------------------------------------------------------------------
+
+		virtual void SAL_CALL setMultiSelectionMode( sal_Bool bMode ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		virtual void SAL_CALL setDefaultName( const ::rtl::OUString& aName ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		virtual void SAL_CALL setDisplayDirectory( const ::rtl::OUString& aDirectory ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		virtual ::rtl::OUString SAL_CALL getDisplayDirectory(  ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getFiles(  ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		//------------------------------------------------------------------------------------
+		// XFilterManager functions
+		//------------------------------------------------------------------------------------
+
+		virtual void SAL_CALL appendFilter( const ::rtl::OUString& aTitle, const ::rtl::OUString& aFilter )
+			throw( ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException );
+
+		virtual void SAL_CALL setCurrentFilter( const ::rtl::OUString& aTitle ) 
+			throw( ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException );
+
+		virtual ::rtl::OUString SAL_CALL getCurrentFilter(  ) 
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		//------------------------------------------------------------------------------------
+		// XFilterGroupManager functions
+		//------------------------------------------------------------------------------------
+
+		virtual void SAL_CALL appendFilterGroup( const ::rtl::OUString& sGroupTitle, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::StringPair >& aFilters ) 
+		        throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
+
+		//------------------------------------------------------------------------------------
+		// XFilePickerControlAccess functions
+		//------------------------------------------------------------------------------------
+
+		virtual void SAL_CALL setValue( sal_Int16 nControlId, sal_Int16 nControlAction, const ::com::sun::star::uno::Any& aValue ) 
+		        throw (::com::sun::star::uno::RuntimeException);
+
+		virtual ::com::sun::star::uno::Any SAL_CALL getValue( sal_Int16 aControlId, sal_Int16 aControlAction ) 
+		        throw (::com::sun::star::uno::RuntimeException);
+
+		virtual void SAL_CALL enableControl( sal_Int16 nControlId, sal_Bool bEnable ) 
+			throw(::com::sun::star::uno::RuntimeException );
+
+		virtual void SAL_CALL setLabel( sal_Int16 nControlId, const ::rtl::OUString& aLabel ) 
+			throw (::com::sun::star::uno::RuntimeException);
+
+		virtual ::rtl::OUString SAL_CALL getLabel( sal_Int16 nControlId ) 
+			throw (::com::sun::star::uno::RuntimeException);
+
+		//------------------------------------------------
+		// XFilePreview
+		//------------------------------------------------
+
+		virtual ::com::sun::star::uno::Sequence< sal_Int16 > SAL_CALL getSupportedImageFormats(  )
+			throw (::com::sun::star::uno::RuntimeException);
+
+		virtual sal_Int32 SAL_CALL getTargetColorDepth(  )
+			throw (::com::sun::star::uno::RuntimeException);
+
+		virtual sal_Int32 SAL_CALL getAvailableWidth(  )
+			throw (::com::sun::star::uno::RuntimeException);
+
+		virtual sal_Int32 SAL_CALL getAvailableHeight(  )
+			throw (::com::sun::star::uno::RuntimeException);
+
+		virtual void SAL_CALL setImage( sal_Int16 aImageFormat, const ::com::sun::star::uno::Any& aImage ) 
+			throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException);
+
+		virtual sal_Bool SAL_CALL setShowState( sal_Bool bShowState )
+			throw (::com::sun::star::uno::RuntimeException);
+
+		virtual sal_Bool SAL_CALL getShowState(  )
+			throw (::com::sun::star::uno::RuntimeException);
+
+		//------------------------------------------------
+		// XInitialization
+		//------------------------------------------------
+
+		virtual void SAL_CALL initialize( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aArguments )
+			throw(::com::sun::star::uno::Exception, ::com::sun::star::uno::RuntimeException);
+
+		//------------------------------------------------
+		// XCancellable
+		//------------------------------------------------
+
+		virtual void SAL_CALL cancel( )
+			throw( ::com::sun::star::uno::RuntimeException );
+
+		//------------------------------------------------
+		// XEventListener
+		//------------------------------------------------
+
+		virtual void SAL_CALL disposing( const ::com::sun::star::lang::EventObject& aEvent ) 
+			throw(::com::sun::star::uno::RuntimeException);
+
+		//------------------------------------------------
+		// XServiceInfo
+		//------------------------------------------------ 
+
+		virtual ::rtl::OUString SAL_CALL getImplementationName(	 )
+			throw(::com::sun::star::uno::RuntimeException);
+
+		virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) 
+			throw(::com::sun::star::uno::RuntimeException);
+
+		virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) 
+			throw(::com::sun::star::uno::RuntimeException);
+
+		//------------------------------------------------------------------------------------
+		// FilePicker Event functions
+		//------------------------------------------------------------------------------------
+	
+		void SAL_CALL fileSelectionChanged( ::com::sun::star::ui::dialogs::FilePickerEvent aEvent );
+		void SAL_CALL directoryChanged( ::com::sun::star::ui::dialogs::FilePickerEvent aEvent );
+		rtl::OUString SAL_CALL helpRequested( ::com::sun::star::ui::dialogs::FilePickerEvent aEvent ) const;
+		void SAL_CALL controlStateChanged( ::com::sun::star::ui::dialogs::FilePickerEvent aEvent );
+		void SAL_CALL dialogSizeChanged( );
+
+		bool startupEventNotification(bool bStartupSuspended);
+		void shutdownEventNotification();
+		void suspendEventNotification();
+		void resumeEventNotification();
+    
+	private:
+		// prevent copy and assignment
+		SalGtkFilePicker( const SalGtkFilePicker& );           
+		SalGtkFilePicker& operator=( const SalGtkFilePicker& );
+
+		sal_Bool FilterNameExists( const ::rtl::OUString& rTitle );
+		sal_Bool FilterNameExists( const UnoFilterList& _rGroupedFilters );
+
+		void ensureFilterList( const ::rtl::OUString& _rInitialCurrentFilter );
+
+	private:
+
+		// to instanciate own services		
+		::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > m_xServiceMgr;
+
+		// TODO SalGtkAsyncEventNotifier m_aAsyncEventNotifier;
+		FilterList *m_pFilterList;
+		GtkWidget  *m_pDialog;
+		GtkWidget  *m_pVBox;
+
+		enum { 
+			AUTOEXTENSION,
+			PASSWORD,
+			FILTEROPTIONS,
+			READONLY,
+			LINK,
+			PREVIEW,
+			SELECTION,
+			TOGGLE_LAST
+		      };
+
+		GtkWidget  *m_pToggles[ TOGGLE_LAST ];
+
+		bool mbToggleVisibility[TOGGLE_LAST];
+		bool mbToggleChecked[TOGGLE_LAST];
+
+		static const rtl::OString m_ToggleLabels[TOGGLE_LAST];
+
+		enum {
+			PLAY,
+			BUTTON_LAST };
+
+		GtkWidget  *m_pButtons[ BUTTON_LAST ];
+
+		enum { 
+			VERSION,
+			TEMPLATE,
+			IMAGE_TEMPLATE,
+			VERSION_LABEL,
+			TEMPLATE_LABEL,
+			IMAGE_TEMPLATE_LABEL,
+			LIST_LAST
+		      };
+
+		GtkWidget  *m_pLists[ LIST_LAST ];
+
+		::rtl::OUString	m_aCurrentFilter;
+
+  		GtkWidget  *getWidget( sal_Int16 nControlId, GType *pType = NULL);
+
+		void SetCurFilter( const OUString& rFilter );
+		void SetFilters();
+
+		void implAddFilter( const OUString& rFilter, const OUString& rType);
+		void implAddFilterGroup( const OUString& rFilter, 
+					 const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::StringPair>& _rFilters );
+
+		sal_Bool mbPreviewState;
+		gulong mHID_Preview;
+		GtkWidget* m_pPreview;
+		sal_Int32 m_PreviewImageWidth;
+		sal_Int32 m_PreviewImageHeight;
+
+		static void autoextension_toggled (GtkObject *cb, gpointer data);
+		static void preview_toggled (GtkObject *cb, gpointer data);
+		static void update_preview_cb (GtkFileChooser *file_chooser, gpointer data);
+		static void selection_changed_cb (GtkFileChooser *file_chooser, gpointer data);
+		static gboolean entry_key_pressed (GtkWidget *widget, GdkEventKey *event, gpointer data);
+		static gboolean entry_focus_received (GtkWidget *entry, GdkEventFocus *event, gpointer data);
+
+	public: 
+		 virtual ~SalGtkFilePicker();
+
+}; 
+
+#endif // _GNOMEFILEPICKER_HXX_
