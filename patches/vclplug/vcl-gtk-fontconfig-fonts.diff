--- vcl/unx/gtk/window/gtkframe.cxx 	2004-08-31 04:34:42.997216792 +0530
+++ vcl/unx/gtk/window/gtkframe.cxx	2004-08-31 04:38:24.089605640 +0530
@@ -75,6 +75,14 @@
 #include <dlfcn.h>
 #include <soicon.hxx>
 
+#ifndef _OSL_PROCESS_H_
+#include <osl/process.h>
+#endif
+#ifndef _RTL_LOCALE_HXX_
+#include <rtl/locale.hxx>
+#endif
+#include <fontconfig/fontconfig.h>
+
 #if OSL_DEBUG_LEVEL > 1
 #include <cstdio>
 #endif
@@ -1033,6 +1041,76 @@
 }
 #endif
 
+/*getFontconfigAlias - get the appropriate font the specific locale
+   from font-config
+*/
+void getFontconfigAlias( const OUString &aFont)
+{
+	// Unfortunately, OOo is not smart enough to take font coverages into
+	// account when falling back to get the UI font.  For example, since the
+	// "Sans" font returned by Fontconfig as the system default gets re-mapped
+	// to an actual font from VCL.xcu, but that font may or may not have the
+	// correct coverage for all locales, we run into a situation where the
+	// locale is ja_JP but the font specified by VCL.xcu doesn't have Japanese
+	// coverage, resulting in no text drawn at all.  So, use fontconfig to
+	// return a font that actually can display the current locale's glyphs
+
+	FcPattern *    pFcOldFont;
+	FcPattern *    pFcNewFont;
+	FcResult       result = (FcResult)0;   // Matching fails if result is not initialized to 0
+	ByteString     aFontName;
+	FcChar8 *      pNewFontName = NULL;
+	OLocale        loc( osl_getSystemLocale(rtl_LocaleSystemMessages) );
+	ByteString     aLocale( UniString(loc.getRawName()), osl_getThreadTextEncoding() );
+
+	aFontName = ByteString(OUStringToOString(aFont, osl_getThreadTextEncoding()));
+	
+	pFcOldFont = FcPatternCreate();
+	if ( pFcOldFont )
+	{
+	        FcValue    aFcValLang;
+	        FcValue    aFcValName;
+
+	        // Since we always want to make sure that the font can display
+	        // characters in the current langauge, the font name is added
+	        // as a weak value, so that the locale will override it.
+	        aFcValLang.type = FcTypeString;
+	        aFcValLang.u.s = (FcChar8 *)(aLocale.GetBuffer());
+	        aFcValName.type = FcTypeString;
+	        aFcValName.u.s = (FcChar8 *)(aFontName.GetBuffer());
+
+	        FcPatternAdd( pFcOldFont, FC_LANG, aFcValLang, false );
+	        FcPatternAddWeak( pFcOldFont, FC_FAMILY, aFcValName, true );
+
+	        FcConfigSubstitute( 0, pFcOldFont, FcMatchPattern );
+	        FcDefaultSubstitute( pFcOldFont );
+
+	        // Ask fontconfig to pull together a list of fonts that match
+	        // our criteria, language coverage first, then font name
+	        pFcNewFont = FcFontMatch( NULL, pFcOldFont, &result );
+	        if ( (FcResultMatch == result) && pFcNewFont )
+	        {
+	            // Use the first font that Fontconfig returns
+	            result = FcPatternGetString( pFcNewFont, FC_FAMILY, 0, &pNewFontName );
+	            if ( FcResultMatch == result )
+	            {
+			aFont = rtl::OUString::createFromAscii((sal_Char *)pNewFontName);
+			#ifdef DEBUG
+			fprintf(stderr, "aFont.getStr() = %s\n", 
+				OUStringToOString( aFont, RTL_TEXTENCODING_UTF8 ).getStr());
+			#endif
+	            }
+	        }
+
+	        if ( pFcNewFont )
+	            FcPatternDestroy( pFcNewFont );
+
+	        FcPatternDestroy( pFcOldFont );
+    	}
+
+    	return;
+}
+
 void GtkSalFrame::UpdateSettings( AllSettings& rSettings )
 {
     if( ! m_pWindow )
@@ -1113,7 +1191,14 @@
     PangoStyle	eStyle	= pango_font_description_get_style( pStyle->font_desc );
     PangoWeight	eWeight	= pango_font_description_get_weight( pStyle->font_desc );
 
-    Font aFont( String( aFamily, RTL_TEXTENCODING_UTF8 ), Size( 0, fHeight ) );
+    const OUString& aUIFont = String( aFamily, RTL_TEXTENCODING_UTF8 );
+    getFontconfigAlias(aUIFont);
+    Font aFont( aUIFont, Size( 0, fHeight ) );
+    #ifdef DEBUG
+    fprintf(stderr, "GtkSalFrame::UpdateSettings: setting UI Font to %s\n", 
+		OUStringToOString( aUIFont, osl_getThreadTextEncoding()).getStr());
+    #endif
+	
     if( eWeight >= PANGO_WEIGHT_BOLD )
         aFont.SetWeight( WEIGHT_BOLD );
     else if( PANGO_WEIGHT_LIGHT )
