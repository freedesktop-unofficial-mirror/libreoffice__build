--- vcl/win/source/src/MAKEFILE.MK	20 Nov 2002 12:36:27 -0000	1.4
+++ vcl/win/source/src/MAKEFILE.MK	20 Oct 2003 17:50:28 -0000	1.5
Index: vcl/win/source/window/MAKEFILE.MK
===================================================================
RCS file: /cvs/gsl/vcl/vcl/win/source/window/MAKEFILE.MK,v
retrieving revision 1.2
retrieving revision 1.7
diff -u -p -u -r1.2 -r1.7
--- vcl/win/source/window/MAKEFILE.MK	20 Nov 2002 12:36:25 -0000	1.2
+++ vcl/win/source/window/MAKEFILE.MK	10 May 2004 16:02:37 -0000	1.7
@@ -29,12 +78,9 @@ CFLAGS += -DWINVER=0x0400
 # --- Files --------------------------------------------------------
 
 SLOFILES=	$(SLO)$/salframe.obj	\
+			$(SLO)$/salmenu.obj     \
 			$(SLO)$/salobj.obj
-
-.IF "$(UPDATER)"=="YES"
-OBJFILES=	$(OBJ)$/salframe.obj	\
-			$(OBJ)$/salobj.obj
-.ENDIF
+			
 
 # --- Targets ------------------------------------------------------
 
Index: vcl/win/source/window/salframe.cxx
===================================================================
RCS file: /cvs/gsl/vcl/vcl/win/source/window/salframe.cxx,v
retrieving revision 1.94.112.4
retrieving revision 1.106
diff -u -p -u -r1.94.112.4 -r1.106
--- vcl/win/source/window/salframe.cxx	15 Jan 2004 14:21:12 -0000	1.94.112.4
+++ vcl/win/source/window/salframe.cxx	17 Jun 2004 16:12:04 -0000	1.106
@@ -70,8 +70,6 @@
 #include <tools/svwin.h>
 #endif
 
-#define _SV_SALFRAME_CXX
-
 #ifndef _RTL_STRING_H_
 #include <rtl/string.h>
 #endif
@@ -96,25 +94,30 @@
 #ifndef _SV_SALDATA_HXX
 #include <saldata.hxx>
 #endif
-#ifndef _SV_SALINST_HXX
-#include <salinst.hxx>
+#ifndef _SV_SALINST_H
+#include <salinst.h>
 #endif
-#ifndef _SV_SALBMP_HXX
-#include <salbmp.hxx>
+#ifndef _SV_SALBMP_H
+#include <salbmp.h>
 #endif
-#ifndef _SV_SALGDI_HXX
-#include <salgdi.hxx>
+#ifndef _SV_SALGDI_H
+#include <salgdi.h>
 #endif
 #ifndef _SV_SALSYS_HXX
 #include <salsys.hxx>
 #endif
-#ifndef _SV_SALFRAME_HXX
-#include <salframe.hxx>
+#ifndef _SV_SALFRAME_H
+#include <salframe.h>
 #endif
-#ifndef _SV_SALVD_HXX
-#include <salvd.hxx>
+#ifndef _SV_SALVD_H
+#include <salvd.h>
+#endif
+#ifndef _SV_SALMENU_H
+#include <salmenu.h>
+#endif
+#ifndef _SV_IMPBMP_HXX
+#include <impbmp.hxx>
 #endif
-
 #ifndef _SV_TIMER_HXX
 #include <timer.hxx>
 #endif
@@ -148,17 +151,13 @@ extern "C" {
     typedef BOOL ( WINAPI * SetLayeredWindowAttributes_Proc_T ) (HWND,COLORREF,BYTE,DWORD);
     static SetLayeredWindowAttributes_Proc_T lpfnSetLayeredWindowAttributes;
 };
-#define LWA_COLORKEY            0x00000001
-#define LWA_ALPHA               0x00000002
-#define ULW_COLORKEY            0x00000001
-#define ULW_ALPHA               0x00000002
-#define ULW_OPAQUE              0x00000004
-#define WS_EX_LAYERED           0x00080000
 
 // =======================================================================
 
 const unsigned int WM_USER_SYSTEM_WINDOW_ACTIVATED = RegisterWindowMessageA("SYSTEM_WINDOW_ACTIVATED");
 
+BOOL WinSalFrame::mbInReparent = FALSE;
+
 // =======================================================================
 
 // Wegen Fehler in Windows-Headerfiles
@@ -169,70 +168,62 @@ const unsigned int WM_USER_SYSTEM_WINDOW
 #define IMN_CLOSECANDIDATE              0x0004
 #endif
 
+#ifndef WM_THEMECHANGED
+#define WM_THEMECHANGED                 0x031A
+#endif
+
 // Macros for support of WM_UNICHAR & Keyman 6.0
 #define Uni_UTF32ToSurrogate1(ch)   (((unsigned long) (ch) - 0x10000) / 0x400 + 0xD800)
 #define Uni_UTF32ToSurrogate2(ch)   (((unsigned long) (ch) - 0x10000) % 0x400 + 0xDC00)
 #define Uni_SupplementaryPlanesStart    0x10000
-#ifndef WM_UNICHAR
-#define WM_UNICHAR          0x0109
-#define UNICODE_NOCHAR      0xFFFF
-#endif
-
-#if OSL_DEBUG_LEVEL > 1
-void MyOutputDebugString(const char *buffer)
-{
-    OutputDebugString( buffer );
-}
-#endif
 
 // =======================================================================
-BOOL SalFrame::mbInReparent = FALSE;
 
 static void UpdateFrameGeometry( HWND hWnd, SalFrame* pFrame );
 
-static void ImplSaveFrameState( SalFrame* pFrame )
+static void ImplSaveFrameState( WinSalFrame* pFrame )
 {
     // Position, Groesse und Status fuer GetWindowState() merken
-    if ( !pFrame->maFrameData.mbFullScreen )
+    if ( !pFrame->mbFullScreen )
     {
-        BOOL bVisible = (GetWindowStyle( pFrame->maFrameData.mhWnd ) & WS_VISIBLE) != 0;
-        if ( IsIconic( pFrame->maFrameData.mhWnd ) )
+        BOOL bVisible = (GetWindowStyle( pFrame->mhWnd ) & WS_VISIBLE) != 0;
+        if ( IsIconic( pFrame->mhWnd ) )
         {
-            pFrame->maFrameData.maState.mnState |= SAL_FRAMESTATE_MINIMIZED;
+            pFrame->maState.mnState |= SAL_FRAMESTATE_MINIMIZED;
             if ( bVisible )
-                pFrame->maFrameData.mnShowState = SW_SHOWMAXIMIZED;
+                pFrame->mnShowState = SW_SHOWMAXIMIZED;
         }
-        else if ( IsZoomed( pFrame->maFrameData.mhWnd ) )
+        else if ( IsZoomed( pFrame->mhWnd ) )
         {
-            pFrame->maFrameData.maState.mnState &= ~SAL_FRAMESTATE_MINIMIZED;
-            pFrame->maFrameData.maState.mnState |= SAL_FRAMESTATE_MAXIMIZED;
+            pFrame->maState.mnState &= ~SAL_FRAMESTATE_MINIMIZED;
+            pFrame->maState.mnState |= SAL_FRAMESTATE_MAXIMIZED;
             if ( bVisible )
-                pFrame->maFrameData.mnShowState = SW_SHOWMAXIMIZED;
-            pFrame->maFrameData.mbRestoreMaximize = TRUE;
+                pFrame->mnShowState = SW_SHOWMAXIMIZED;
+            pFrame->mbRestoreMaximize = TRUE;
         }
         else
         {
             RECT aRect;
-            GetWindowRect( pFrame->maFrameData.mhWnd, &aRect );
+            GetWindowRect( pFrame->mhWnd, &aRect );
 
             // to be consistent with Unix, the frame state is without(!) decoration
             RECT aRect2 = aRect;
-		    AdjustWindowRectEx( &aRect2, GetWindowStyle( pFrame->maFrameData.mhWnd ),
-							FALSE,     GetWindowExStyle( pFrame->maFrameData.mhWnd ) );
+		    AdjustWindowRectEx( &aRect2, GetWindowStyle( pFrame->mhWnd ),
+							FALSE,     GetWindowExStyle( pFrame->mhWnd ) );
             long nTopDeco = abs( aRect.top - aRect2.top );
             long nLeftDeco = abs( aRect.left - aRect2.left );
             long nBottomDeco = abs( aRect.bottom - aRect2.bottom );
             long nRightDeco = abs( aRect.right - aRect2.right );
 
-            pFrame->maFrameData.maState.mnState &= ~(SAL_FRAMESTATE_MINIMIZED | SAL_FRAMESTATE_MAXIMIZED);
+            pFrame->maState.mnState &= ~(SAL_FRAMESTATE_MINIMIZED | SAL_FRAMESTATE_MAXIMIZED);
             // subtract decoration
-            pFrame->maFrameData.maState.mnX      = aRect.left+nLeftDeco;
-            pFrame->maFrameData.maState.mnY      = aRect.top+nTopDeco;
-            pFrame->maFrameData.maState.mnWidth  = aRect.right-aRect.left-nLeftDeco-nRightDeco;
-            pFrame->maFrameData.maState.mnHeight = aRect.bottom-aRect.top-nTopDeco-nBottomDeco;
+            pFrame->maState.mnX      = aRect.left+nLeftDeco;
+            pFrame->maState.mnY      = aRect.top+nTopDeco;
+            pFrame->maState.mnWidth  = aRect.right-aRect.left-nLeftDeco-nRightDeco;
+            pFrame->maState.mnHeight = aRect.bottom-aRect.top-nTopDeco-nBottomDeco;
             if ( bVisible )
-                pFrame->maFrameData.mnShowState = SW_SHOWNORMAL;
-            pFrame->maFrameData.mbRestoreMaximize = FALSE;
+                pFrame->mnShowState = SW_SHOWNORMAL;
+            pFrame->mbRestoreMaximize = FALSE;
         }
     }
 }
@@ -240,17 +231,17 @@ static void ImplSaveFrameState( SalFrame
 // -----------------------------------------------------------------------
 
 // if pParentRect is set, the workarea of the monitor that contains pParentRect is returned
-static void ImplSalGetWorkArea( HWND hWnd, RECT *pRect, const RECT *pParentRect )
+void ImplSalGetWorkArea( HWND hWnd, RECT *pRect, const RECT *pParentRect )
 {
 	static int winVerChecked = 0;
 	static int winVerOk = 0;
 
     // check if we or our parent is fullscreen, then the taskbar should be ignored
     bool bIgnoreTaskbar = false;
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
 	if( pFrame )
     {
-	    Window *pWin = ((Window*)pFrame->maFrameData.mpInst);
+	    Window *pWin = ((Window*)pFrame->GetInstance());
         while( pWin )
         {
             WorkWindow *pWorkWin = (pWin->GetType() == WINDOW_WORKWINDOW) ? (WorkWindow *) pWin : NULL;
@@ -364,10 +355,10 @@ static void ImplSalGetWorkArea( HWND hWn
 
 // =======================================================================
 
-SalFrame* ImplSalCreateFrame( SalInstance* pInst,
+SalFrame* ImplSalCreateFrame( WinSalInstance* pInst,
                               HWND hWndParent, ULONG nSalFrameStyle )
 {
-    SalFrame*   pFrame = new SalFrame;
+    WinSalFrame*   pFrame = new WinSalFrame;
     HWND        hWnd;
     DWORD       nSysStyle = 0;
     DWORD       nExSysStyle = 0;
@@ -400,7 +391,7 @@ SalFrame* ImplSalCreateFrame( SalInstanc
         {
             nSysStyle |= WS_POPUP;
             bSubFrame = TRUE;
-            pFrame->maFrameData.mbNoIcon = TRUE;
+            pFrame->mbNoIcon = TRUE;
         }
         else
         {
@@ -418,7 +409,7 @@ SalFrame* ImplSalCreateFrame( SalInstanc
 
         if ( nSalFrameStyle & SAL_FRAME_STYLE_MOVEABLE )
         {
-            pFrame->maFrameData.mbCaption = TRUE;
+            pFrame->mbCaption = TRUE;
             nSysStyle |= WS_SYSMENU | WS_CAPTION;
             if ( !hWndParent )
                 nSysStyle |= WS_SYSMENU | WS_MINIMIZEBOX;
@@ -427,13 +418,13 @@ SalFrame* ImplSalCreateFrame( SalInstanc
 
             if ( nSalFrameStyle & SAL_FRAME_STYLE_SIZEABLE )
             {
-                pFrame->maFrameData.mbSizeBorder = TRUE;
+                pFrame->mbSizeBorder = TRUE;
                 nSysStyle |= WS_THICKFRAME;
                 if ( !hWndParent )
                     nSysStyle |= WS_MAXIMIZEBOX;
             }
             else
-                pFrame->maFrameData.mbFixBorder = TRUE;
+                pFrame->mbFixBorder = TRUE;
 
             if ( nSalFrameStyle & SAL_FRAME_STYLE_DEFAULT )
                 nExSysStyle |= WS_EX_APPWINDOW;
@@ -447,7 +438,7 @@ SalFrame* ImplSalCreateFrame( SalInstanc
             // #103578# looked too bad - above changes reverted
             /* && !(nSalFrameStyle & SAL_FRAME_STYLE_SIZEABLE) */ )
         {
-            pFrame->maFrameData.mbNoIcon = TRUE;
+            pFrame->mbNoIcon = TRUE;
             nExSysStyle |= WS_EX_TOOLWINDOW;
             if ( pEnvTransparentFloats && bLayeredAPI == 1 /*&& !(nSalFrameStyle & SAL_FRAME_STYLE_MOVEABLE) */)
                 nExSysStyle |= WS_EX_LAYERED;
@@ -456,7 +447,7 @@ SalFrame* ImplSalCreateFrame( SalInstanc
     if ( nSalFrameStyle & SAL_FRAME_STYLE_FLOAT )
     {
         nExSysStyle |= WS_EX_TOOLWINDOW;
-        pFrame->maFrameData.mbFloatWin = TRUE;
+        pFrame->mbFloatWin = TRUE;
 
         if ( pEnvTransparentFloats && bLayeredAPI == 1 /*&& !(nSalFrameStyle & SAL_FRAME_STYLE_MOVEABLE) */)
             nExSysStyle |= WS_EX_LAYERED;
@@ -466,31 +457,31 @@ SalFrame* ImplSalCreateFrame( SalInstanc
         nExSysStyle |= WS_EX_TOPMOST;
 
     // init frame data
-    pFrame->maFrameData.mnStyle = nSalFrameStyle;
+    pFrame->mnStyle = nSalFrameStyle;
 
     // determine show style
-    pFrame->maFrameData.mnShowState = SW_SHOWNORMAL;
+    pFrame->mnShowState = SW_SHOWNORMAL;
     if ( (nSysStyle & (WS_POPUP | WS_MAXIMIZEBOX | WS_THICKFRAME)) == (WS_MAXIMIZEBOX | WS_THICKFRAME) )
     {
         if ( GetSystemMetrics( SM_CXSCREEN ) <= 1024 )
-            pFrame->maFrameData.mnShowState = SW_SHOWMAXIMIZED;
+            pFrame->mnShowState = SW_SHOWMAXIMIZED;
         else
         {
             if ( nSalFrameStyle & SAL_FRAME_STYLE_DEFAULT )
             {
                 SalData* pSalData = GetSalData();
-                pFrame->maFrameData.mnShowState = pSalData->mnCmdShow;
-                if ( (pFrame->maFrameData.mnShowState != SW_SHOWMINIMIZED) &&
-                     (pFrame->maFrameData.mnShowState != SW_MINIMIZE) &&
-                     (pFrame->maFrameData.mnShowState != SW_SHOWMINNOACTIVE) )
+                pFrame->mnShowState = pSalData->mnCmdShow;
+                if ( (pFrame->mnShowState != SW_SHOWMINIMIZED) &&
+                     (pFrame->mnShowState != SW_MINIMIZE) &&
+                     (pFrame->mnShowState != SW_SHOWMINNOACTIVE) )
                 {
-                    if ( (pFrame->maFrameData.mnShowState == SW_SHOWMAXIMIZED) ||
-                         (pFrame->maFrameData.mnShowState == SW_MAXIMIZE) )
-                        pFrame->maFrameData.mbOverwriteState = FALSE;
-                    pFrame->maFrameData.mnShowState = SW_SHOWMAXIMIZED;
+                    if ( (pFrame->mnShowState == SW_SHOWMAXIMIZED) ||
+                         (pFrame->mnShowState == SW_MAXIMIZE) )
+                        pFrame->mbOverwriteState = FALSE;
+                    pFrame->mnShowState = SW_SHOWMAXIMIZED;
                 }
                 else
-                    pFrame->maFrameData.mbOverwriteState = FALSE;
+                    pFrame->mbOverwriteState = FALSE;
             }
             else
             {
@@ -498,9 +489,9 @@ SalFrame* ImplSalCreateFrame( SalInstanc
                 // is also maximized
                 HWND hWnd = GetForegroundWindow();
                 if ( hWnd && IsMaximized( hWnd ) &&
-                     (GetWindowInstance( hWnd ) == pInst->maInstData.mhInst) &&
+                     (GetWindowInstance( hWnd ) == pInst->mhInst) &&
                      ((GetWindowStyle( hWnd ) & (WS_POPUP | WS_MAXIMIZEBOX | WS_THICKFRAME)) == (WS_MAXIMIZEBOX | WS_THICKFRAME)) )
-                    pFrame->maFrameData.mnShowState = SW_SHOWMAXIMIZED;
+                    pFrame->mnShowState = SW_SHOWMAXIMIZED;
             }
         }
     }
@@ -525,11 +516,11 @@ SalFrame* ImplSalCreateFrame( SalInstanc
         }
         hWnd = CreateWindowExW( nExSysStyle, pClassName, L"", nSysStyle,
                                 CW_USEDEFAULT, 0, CW_USEDEFAULT, 0,
-                                hWndParent, 0, pInst->maInstData.mhInst, (void*)pFrame );
+                                hWndParent, 0, pInst->mhInst, (void*)pFrame );
 #if OSL_DEBUG_LEVEL > 1
         // set transparency value
         if( bLayeredAPI == 1 && GetWindowExStyle( hWnd ) & WS_EX_LAYERED )
-            lpfnSetLayeredWindowAttributes( hWnd, 0, 230, LWA_ALPHA );
+            lpfnSetLayeredWindowAttributes( hWnd, 0, 230, 0x00000002 /*LWA_ALPHA*/ );
 #endif
     }
     else
@@ -541,7 +532,7 @@ SalFrame* ImplSalCreateFrame( SalInstanc
             pClassName = SAL_FRAME_CLASSNAMEA;
         hWnd = CreateWindowExA( nExSysStyle, pClassName, "", nSysStyle,
                                 CW_USEDEFAULT, 0, CW_USEDEFAULT, 0,
-                                hWndParent, 0, pInst->maInstData.mhInst, (void*)pFrame );
+                                hWndParent, 0, pInst->mhInst, (void*)pFrame );
     }
     if ( !hWnd )
     {
@@ -576,24 +567,24 @@ SalFrame* ImplSalCreateFrame( SalInstanc
     }
 
     // reset input context
-    pFrame->maFrameData.mhDefIMEContext = ImmAssociateContext( hWnd, 0 );
+    pFrame->mhDefIMEContext = ImmAssociateContext( hWnd, 0 );
 
     // determine output size and state
     RECT aRect;
     GetClientRect( hWnd, &aRect );
-    pFrame->maFrameData.mnWidth  = aRect.right;
-    pFrame->maFrameData.mnHeight = aRect.bottom;
+    pFrame->mnWidth  = aRect.right;
+    pFrame->mnHeight = aRect.bottom;
     ImplSaveFrameState( pFrame );
-    pFrame->maFrameData.mbDefPos = TRUE;
+    pFrame->mbDefPos = TRUE;
 
 	UpdateFrameGeometry( hWnd, pFrame );
 
-    if( pFrame->maFrameData.mnShowState == SW_SHOWMAXIMIZED )
+    if( pFrame->mnShowState == SW_SHOWMAXIMIZED )
 	{
 		// #96084 set a useful internal window size because
 		// the window will not be maximized (and the size updated) before show()
 		RECT aRect;
-		ImplSalGetWorkArea( pFrame->maFrameData.mhWnd, &aRect, NULL );
+		ImplSalGetWorkArea( pFrame->mhWnd, &aRect, NULL );
 		AdjustWindowRectEx( &aRect, GetWindowStyle( hWnd ),
 							FALSE,     GetWindowExStyle( hWnd ) );
 		pFrame->maGeometry.nX = aRect.left;
@@ -753,9 +744,9 @@ static USHORT aImplTranslateKeyTab[KEY_T
     KEY_9,                // VK_NUMPAD9                      105
     KEY_MULTIPLY,         // VK_MULTIPLY                     106
     KEY_ADD,              // VK_ADD                          107
-    KEY_COMMA,            // VK_SEPARATOR                    108
+    KEY_DECIMAL,          // VK_SEPARATOR                    108
     KEY_SUBTRACT,         // VK_SUBTRACT                     109
-    KEY_POINT,            // VK_DECIMAL                      110
+    KEY_DECIMAL,          // VK_DECIMAL                      110
     KEY_DIVIDE,           // VK_DIVIDE                       111
     KEY_F1,               // VK_F1                           112
     KEY_F2,               // VK_F2                           113
@@ -795,13 +786,6 @@ static USHORT aImplTranslateKeyTab[KEY_T
 
 // =======================================================================
 
-long ImplSalCallbackDummy( void*, SalFrame*, USHORT, const void* )
-{
-    return 0;
-}
-
-// -----------------------------------------------------------------------
-
 static UINT ImplSalGetWheelScrollLines()
 {
     UINT nScrLines = 0;
@@ -824,7 +808,7 @@ static UINT ImplSalGetWheelScrollLines()
 
 // -----------------------------------------------------------------------
 
-static void ImplSalCalcBorder( const SalFrame* pFrame,
+static void ImplSalCalcBorder( const WinSalFrame* pFrame,
                                int& rLeft, int& rTop, int& rRight, int& rBottom )
 {
     // set window to screen size
@@ -832,17 +816,17 @@ static void ImplSalCalcBorder( const Sal
     int nFrameY;
     int nCaptionY;
 
-    if ( pFrame->maFrameData.mbSizeBorder )
+    if ( pFrame->mbSizeBorder )
     {
         nFrameX = GetSystemMetrics( SM_CXSIZEFRAME );
         nFrameY = GetSystemMetrics( SM_CYSIZEFRAME );
     }
-    else if ( pFrame->maFrameData.mbFixBorder )
+    else if ( pFrame->mbFixBorder )
     {
         nFrameX = GetSystemMetrics( SM_CXFIXEDFRAME );
         nFrameY = GetSystemMetrics( SM_CYFIXEDFRAME );
     }
-    else if ( pFrame->maFrameData.mbBorder )
+    else if ( pFrame->mbBorder )
     {
         nFrameX = GetSystemMetrics( SM_CXBORDER );
         nFrameY = GetSystemMetrics( SM_CYBORDER );
@@ -852,7 +836,7 @@ static void ImplSalCalcBorder( const Sal
         nFrameX = 0;
         nFrameY = 0;
     }
-    if ( pFrame->maFrameData.mbCaption )
+    if ( pFrame->mbCaption )
         nCaptionY = GetSystemMetrics( SM_CYCAPTION );
     else
         nCaptionY = 0;
@@ -865,7 +849,7 @@ static void ImplSalCalcBorder( const Sal
 
 // -----------------------------------------------------------------------
 
-static void ImplSalCalcFullScreenSize( const SalFrame* pFrame,
+static void ImplSalCalcFullScreenSize( const WinSalFrame* pFrame,
                                        int& rX, int& rY, int& rDX, int& rDY )
 {
     // set window to screen size
@@ -875,17 +859,17 @@ static void ImplSalCalcFullScreenSize( c
     int nScreenDX;
     int nScreenDY;
 
-    if ( pFrame->maFrameData.mbSizeBorder )
+    if ( pFrame->mbSizeBorder )
     {
         nFrameX = GetSystemMetrics( SM_CXSIZEFRAME );
         nFrameY = GetSystemMetrics( SM_CYSIZEFRAME );
     }
-    else if ( pFrame->maFrameData.mbFixBorder )
+    else if ( pFrame->mbFixBorder )
     {
         nFrameX = GetSystemMetrics( SM_CXFIXEDFRAME );
         nFrameY = GetSystemMetrics( SM_CYFIXEDFRAME );
     }
-    else if ( pFrame->maFrameData.mbBorder )
+    else if ( pFrame->mbBorder )
     {
         nFrameX = GetSystemMetrics( SM_CXBORDER );
         nFrameY = GetSystemMetrics( SM_CYBORDER );
@@ -895,7 +879,7 @@ static void ImplSalCalcFullScreenSize( c
         nFrameX = 0;
         nFrameY = 0;
     }
-    if ( pFrame->maFrameData.mbCaption )
+    if ( pFrame->mbCaption )
         nCaptionY = GetSystemMetrics( SM_CYCAPTION );
     else
         nCaptionY = 0;
@@ -911,9 +895,9 @@ static void ImplSalCalcFullScreenSize( c
 
 // -----------------------------------------------------------------------
 
-static void ImplSalFrameFullScreenPos( SalFrame* pFrame, BOOL bAlways = FALSE )
+static void ImplSalFrameFullScreenPos( WinSalFrame* pFrame, BOOL bAlways = FALSE )
 {
-    if ( bAlways || !IsIconic( pFrame->maFrameData.mhWnd ) )
+    if ( bAlways || !IsIconic( pFrame->mhWnd ) )
     {
         // set window to screen size
         int nX;
@@ -921,7 +905,7 @@ static void ImplSalFrameFullScreenPos( S
         int nWidth;
         int nHeight;
         ImplSalCalcFullScreenSize( pFrame, nX, nY, nWidth, nHeight );
-        SetWindowPos( pFrame->maFrameData.mhWnd, 0,
+        SetWindowPos( pFrame->mhWnd, 0,
                       nX, nY, nWidth, nHeight,
                       SWP_NOZORDER | SWP_NOACTIVATE );
     }
@@ -929,48 +913,48 @@ static void ImplSalFrameFullScreenPos( S
 
 // -----------------------------------------------------------------------
 
-SalFrame::SalFrame()
+WinSalFrame::WinSalFrame()
 {
     SalData* pSalData = GetSalData();
 
-    maFrameData.mhWnd               = 0;
-    maFrameData.mhCursor            = LoadCursor( 0, IDC_ARROW );
-    maFrameData.mhDefIMEContext     = 0;
-    maFrameData.mpGraphics          = NULL;
-    maFrameData.mpGraphics2         = NULL;
-    maFrameData.mpInst              = NULL;
-    maFrameData.mpProc              = ImplSalCallbackDummy;
-    maFrameData.mnShowState         = SW_SHOWNORMAL;
-    maFrameData.mnWidth             = 0;
-    maFrameData.mnHeight            = 0;
-    maFrameData.mnMinWidth          = 0;
-    maFrameData.mnMinHeight         = 0;
-    maFrameData.mnInputLang         = 0;
-    maFrameData.mnInputCodePage     = 0;
-    maFrameData.mbGraphics          = FALSE;
-    maFrameData.mbCaption           = FALSE;
-    maFrameData.mbBorder            = FALSE;
-    maFrameData.mbFixBorder         = FALSE;
-    maFrameData.mbSizeBorder        = FALSE;
-    maFrameData.mbFullScreen        = FALSE;
-    maFrameData.mbPresentation      = FALSE;
-    maFrameData.mbInShow            = FALSE;
-    maFrameData.mbRestoreMaximize   = FALSE;
-    maFrameData.mbInMoveMsg         = FALSE;
-    maFrameData.mbInSizeMsg         = FALSE;
-    maFrameData.mbFullScreenToolWin = FALSE;
-    maFrameData.mbDefPos            = TRUE;
-    maFrameData.mbOverwriteState    = TRUE;
-    maFrameData.mbIME               = FALSE;
-    maFrameData.mbHandleIME         = FALSE;
-    maFrameData.mbSpezIME           = FALSE;
-    maFrameData.mbAtCursorIME       = FALSE;
-    maFrameData.mbCandidateMode     = FALSE;
-    maFrameData.mbFloatWin          = FALSE;
-    maFrameData.mbNoIcon            = FALSE;
+    mhWnd               = 0;
+    mhCursor            = LoadCursor( 0, IDC_ARROW );
+    mhDefIMEContext     = 0;
+    mpGraphics          = NULL;
+    mpGraphics2         = NULL;
+    mnShowState         = SW_SHOWNORMAL;
+    mnWidth             = 0;
+    mnHeight            = 0;
+    mnMinWidth          = 0;
+    mnMinHeight         = 0;
+    mnInputLang         = 0;
+    mnInputCodePage     = 0;
+    mbGraphics          = FALSE;
+    mbCaption           = FALSE;
+    mbBorder            = FALSE;
+    mbFixBorder         = FALSE;
+    mbSizeBorder        = FALSE;
+    mbFullScreen        = FALSE;
+    mbPresentation      = FALSE;
+    mbInShow            = FALSE;
+    mbRestoreMaximize   = FALSE;
+    mbInMoveMsg         = FALSE;
+    mbInSizeMsg         = FALSE;
+    mbFullScreenToolWin = FALSE;
+    mbDefPos            = TRUE;
+    mbOverwriteState    = TRUE;
+    mbIME               = FALSE;
+    mbHandleIME         = FALSE;
+    mbSpezIME           = FALSE;
+    mbAtCursorIME       = FALSE;
+    mbCandidateMode     = FALSE;
+    mbFloatWin          = FALSE;
+    mbNoIcon            = FALSE;
+    mSelectedhMenu      = 0;
+    mLastActivatedhMenu = 0;
 
-    memset( &maFrameData.maState, 0, sizeof( SalFrameState ) );
-    maFrameData.maSysData.nSize     = sizeof( SystemEnvData );
+    memset( &maState, 0, sizeof( SalFrameState ) );
+    maSysData.nSize     = sizeof( SystemEnvData );
 
     memset( &maGeometry, 0, sizeof( maGeometry ) );
 
@@ -984,35 +968,35 @@ SalFrame::SalFrame()
     }
 
     // insert frame in framelist
-    maFrameData.mpNextFrame = pSalData->mpFirstFrame;
+    mpNextFrame = pSalData->mpFirstFrame;
     pSalData->mpFirstFrame = this;
 }
 
 // -----------------------------------------------------------------------
 
-SalFrame::~SalFrame()
+WinSalFrame::~WinSalFrame()
 {
     SalData* pSalData = GetSalData();
 
     // Release Cache DC
-    if ( maFrameData.mpGraphics2 &&
-         maFrameData.mpGraphics2->maGraphicsData.mhDC )
-        ReleaseGraphics( maFrameData.mpGraphics2 );
+    if ( mpGraphics2 &&
+         mpGraphics2->mhDC )
+        ReleaseGraphics( mpGraphics2 );
 
     // destroy saved DC
-    if ( maFrameData.mpGraphics )
+    if ( mpGraphics )
     {
-        if ( maFrameData.mpGraphics->maGraphicsData.mhDefPal )
-            SelectPalette( maFrameData.mpGraphics->maGraphicsData.mhDC, maFrameData.mpGraphics->maGraphicsData.mhDefPal, TRUE );
-        ImplSalDeInitGraphics( &(maFrameData.mpGraphics->maGraphicsData) );
-        ReleaseDC( maFrameData.mhWnd, maFrameData.mpGraphics->maGraphicsData.mhDC );
-        delete maFrameData.mpGraphics;
+        if ( mpGraphics->mhDefPal )
+            SelectPalette( mpGraphics->mhDC, mpGraphics->mhDefPal, TRUE );
+        ImplSalDeInitGraphics( mpGraphics );
+        ReleaseDC( mhWnd, mpGraphics->mhDC );
+        delete mpGraphics;
     }
 
-    if ( maFrameData.mhWnd )
+    if ( mhWnd )
     {
         // reset mouse leave data
-        if ( pSalData->mhWantLeaveMsg == maFrameData.mhWnd )
+        if ( pSalData->mhWantLeaveMsg == mhWnd )
         {
             pSalData->mhWantLeaveMsg = 0;
             if ( pSalData->mpMouseLeaveTimer )
@@ -1023,28 +1007,28 @@ SalFrame::~SalFrame()
         }
 
         // destroy system frame
-        if ( !DestroyWindow( maFrameData.mhWnd ) )
-            SetWindowPtr( maFrameData.mhWnd, 0 );
+        if ( !DestroyWindow( mhWnd ) )
+            SetWindowPtr( mhWnd, 0 );
 	}
 
     // remove frame from framelist
     if ( this == pSalData->mpFirstFrame )
-        pSalData->mpFirstFrame = maFrameData.mpNextFrame;
+        pSalData->mpFirstFrame = mpNextFrame;
     else
     {
-        SalFrame* pTempFrame = pSalData->mpFirstFrame;
-        while ( pTempFrame->maFrameData.mpNextFrame != this )
-            pTempFrame = pTempFrame->maFrameData.mpNextFrame;
+        WinSalFrame* pTempFrame = pSalData->mpFirstFrame;
+        while ( pTempFrame->mpNextFrame != this )
+            pTempFrame = pTempFrame->mpNextFrame;
 
-        pTempFrame->maFrameData.mpNextFrame = maFrameData.mpNextFrame;
+        pTempFrame->mpNextFrame = mpNextFrame;
     }
 }
 
 // -----------------------------------------------------------------------
 
-SalGraphics* SalFrame::GetGraphics()
+SalGraphics* WinSalFrame::GetGraphics()
 {
-    if ( maFrameData.mbGraphics )
+    if ( mbGraphics )
         return NULL;
 
     // Other threads get an own DC, because Windows modify in the
@@ -1058,116 +1042,116 @@ SalGraphics* SalFrame::GetGraphics()
         if ( pSalData->mnCacheDCInUse >= 3 )
             return NULL;
 
-        if ( !maFrameData.mpGraphics2 )
+        if ( !mpGraphics2 )
         {
-            maFrameData.mpGraphics2 = new SalGraphicsLayout;
-            maFrameData.mpGraphics2->maGraphicsData.mhDC        = 0;
-            maFrameData.mpGraphics2->maGraphicsData.mhWnd       = maFrameData.mhWnd;
-            maFrameData.mpGraphics2->maGraphicsData.mbPrinter   = FALSE;
-            maFrameData.mpGraphics2->maGraphicsData.mbVirDev    = FALSE;
-            maFrameData.mpGraphics2->maGraphicsData.mbWindow    = TRUE;
-            maFrameData.mpGraphics2->maGraphicsData.mbScreen    = TRUE;
+            mpGraphics2 = new WinSalGraphics;
+            mpGraphics2->mhDC        = 0;
+            mpGraphics2->mhWnd       = mhWnd;
+            mpGraphics2->mbPrinter   = FALSE;
+            mpGraphics2->mbVirDev    = FALSE;
+            mpGraphics2->mbWindow    = TRUE;
+            mpGraphics2->mbScreen    = TRUE;
         }
 
-        HDC hDC = (HDC)ImplSendMessage( pSalData->mpFirstInstance->maInstData.mhComWnd,
+        HDC hDC = (HDC)ImplSendMessage( pSalData->mpFirstInstance->mhComWnd,
                                         SAL_MSG_GETDC,
-                                        (WPARAM)maFrameData.mhWnd, 0 );
+                                        (WPARAM)mhWnd, 0 );
         if ( hDC )
         {
-            maFrameData.mpGraphics2->maGraphicsData.mhDC = hDC;
+            mpGraphics2->mhDC = hDC;
             if ( pSalData->mhDitherPal )
             {
-                maFrameData.mpGraphics2->maGraphicsData.mhDefPal = SelectPalette( hDC, pSalData->mhDitherPal, TRUE );
+                mpGraphics2->mhDefPal = SelectPalette( hDC, pSalData->mhDitherPal, TRUE );
                 RealizePalette( hDC );
             }
-            ImplSalInitGraphics( &(maFrameData.mpGraphics2->maGraphicsData) );
-            maFrameData.mbGraphics = TRUE;
+            ImplSalInitGraphics( mpGraphics2 );
+            mbGraphics = TRUE;
             pSalData->mnCacheDCInUse++;
-            return maFrameData.mpGraphics2;
+            return mpGraphics2;
         }
         else
             return NULL;
     }
     else
     {
-        if ( !maFrameData.mpGraphics )
+        if ( !mpGraphics )
         {
-            HDC hDC = GetDC( maFrameData.mhWnd );
+            HDC hDC = GetDC( mhWnd );
             if ( hDC )
             {
-                maFrameData.mpGraphics = new SalGraphicsLayout;
-                maFrameData.mpGraphics->maGraphicsData.mhDC      = hDC;
-                maFrameData.mpGraphics->maGraphicsData.mhWnd     = maFrameData.mhWnd;
-                maFrameData.mpGraphics->maGraphicsData.mbPrinter = FALSE;
-                maFrameData.mpGraphics->maGraphicsData.mbVirDev  = FALSE;
-                maFrameData.mpGraphics->maGraphicsData.mbWindow  = TRUE;
-                maFrameData.mpGraphics->maGraphicsData.mbScreen  = TRUE;
+                mpGraphics = new WinSalGraphics;
+                mpGraphics->mhDC      = hDC;
+                mpGraphics->mhWnd     = mhWnd;
+                mpGraphics->mbPrinter = FALSE;
+                mpGraphics->mbVirDev  = FALSE;
+                mpGraphics->mbWindow  = TRUE;
+                mpGraphics->mbScreen  = TRUE;
                 if ( pSalData->mhDitherPal )
                 {
-                    maFrameData.mpGraphics->maGraphicsData.mhDefPal = SelectPalette( hDC, pSalData->mhDitherPal, TRUE );
+                    mpGraphics->mhDefPal = SelectPalette( hDC, pSalData->mhDitherPal, TRUE );
                     RealizePalette( hDC );
                 }
-                ImplSalInitGraphics( &(maFrameData.mpGraphics->maGraphicsData) );
-                maFrameData.mbGraphics = TRUE;
+                ImplSalInitGraphics( mpGraphics );
+                mbGraphics = TRUE;
             }
         }
         else
-            maFrameData.mbGraphics = TRUE;
+            mbGraphics = TRUE;
 
-        return maFrameData.mpGraphics;
+        return mpGraphics;
     }
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::ReleaseGraphics( SalGraphics* pGraphics )
+void WinSalFrame::ReleaseGraphics( SalGraphics* pGraphics )
 {
-    if ( maFrameData.mpGraphics2 == pGraphics )
+    if ( mpGraphics2 == pGraphics )
     {
-        if ( maFrameData.mpGraphics2->maGraphicsData.mhDC )
+        if ( mpGraphics2->mhDC )
         {
             SalData* pSalData = GetSalData();
-            if ( maFrameData.mpGraphics2->maGraphicsData.mhDefPal )
-                SelectPalette( maFrameData.mpGraphics2->maGraphicsData.mhDC, maFrameData.mpGraphics2->maGraphicsData.mhDefPal, TRUE );
-            ImplSalDeInitGraphics( &(maFrameData.mpGraphics2->maGraphicsData) );
-            ImplSendMessage( pSalData->mpFirstInstance->maInstData.mhComWnd,
+            if ( mpGraphics2->mhDefPal )
+                SelectPalette( mpGraphics2->mhDC, mpGraphics2->mhDefPal, TRUE );
+            ImplSalDeInitGraphics( mpGraphics2 );
+            ImplSendMessage( pSalData->mpFirstInstance->mhComWnd,
                              SAL_MSG_RELEASEDC,
-                             (WPARAM)maFrameData.mhWnd,
-                             (LPARAM)maFrameData.mpGraphics2->maGraphicsData.mhDC );
-            maFrameData.mpGraphics2->maGraphicsData.mhDC = 0;
+                             (WPARAM)mhWnd,
+                             (LPARAM)mpGraphics2->mhDC );
+            mpGraphics2->mhDC = 0;
             pSalData->mnCacheDCInUse--;
         }
     }
 
-    maFrameData.mbGraphics = FALSE;
+    mbGraphics = FALSE;
 }
 
 // -----------------------------------------------------------------------
 
-BOOL SalFrame::PostEvent( void* pData )
+BOOL WinSalFrame::PostEvent( void* pData )
 {
-    return (BOOL)ImplPostMessage( maFrameData.mhWnd, SAL_MSG_USEREVENT, 0, (LPARAM)pData );
+    return (BOOL)ImplPostMessage( mhWnd, SAL_MSG_USEREVENT, 0, (LPARAM)pData );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetTitle( const XubString& rTitle )
+void WinSalFrame::SetTitle( const XubString& rTitle )
 {
-    DBG_ASSERT( sizeof( WCHAR ) == sizeof( xub_Unicode ), "SalFrame::SetTitle(): WCHAR != sal_Unicode" );
+    DBG_ASSERT( sizeof( WCHAR ) == sizeof( xub_Unicode ), "WinSalFrame::SetTitle(): WCHAR != sal_Unicode" );
 
-    if ( !SetWindowTextW( maFrameData.mhWnd, rTitle.GetBuffer() ) )
+    if ( !SetWindowTextW( mhWnd, rTitle.GetBuffer() ) )
     {
         ByteString aAnsiTitle = ImplSalGetWinAnsiString( rTitle );
-        SetWindowTextA( maFrameData.mhWnd, aAnsiTitle.GetBuffer() );
+        SetWindowTextA( mhWnd, aAnsiTitle.GetBuffer() );
     }
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetIcon( USHORT nIcon )
+void WinSalFrame::SetIcon( USHORT nIcon )
 {
     // If we have a window without an Icon (for example a dialog), ignore this call
-    if ( maFrameData.mbNoIcon )
+    if ( mbNoIcon )
         return;
 
     // 0 means default (class) icon
@@ -1177,51 +1161,61 @@ void SalFrame::SetIcon( USHORT nIcon )
 
     ImplLoadSalIcon( nIcon, hIcon, hSmIcon );
 
-    DBG_ASSERT( hIcon ,   "SalFrame::SetIcon(): Could not load large icon !" );
-    DBG_ASSERT( hSmIcon , "SalFrame::SetIcon(): Could not load small icon !" );
+    DBG_ASSERT( hIcon ,   "WinSalFrame::SetIcon(): Could not load large icon !" );
+    DBG_ASSERT( hSmIcon , "WinSalFrame::SetIcon(): Could not load small icon !" );
+
+    ImplSendMessage( mhWnd, WM_SETICON, ICON_BIG, (LPARAM)hIcon );
+    ImplSendMessage( mhWnd, WM_SETICON, ICON_SMALL, (LPARAM)hSmIcon );
+}
+
+// -----------------------------------------------------------------------
+
+void WinSalFrame::SetMenu( SalMenu* pSalMenu )
+{
+    WinSalMenu* pWMenu = static_cast<WinSalMenu*>(pSalMenu);
+    if( pSalMenu && pWMenu->mbMenuBar )
+        ::SetMenu( mhWnd, pWMenu->mhMenu );
+}
 
-    ImplSendMessage( maFrameData.mhWnd, WM_SETICON, ICON_BIG, (LPARAM)hIcon );
-    ImplSendMessage( maFrameData.mhWnd, WM_SETICON, ICON_SMALL, (LPARAM)hSmIcon );
+void WinSalFrame::DrawMenuBar()
+{
+    ::DrawMenuBar( mhWnd );
 }
 
 // -----------------------------------------------------------------------
 HWND ImplGetParentHwnd( HWND hWnd )
 {
-#ifndef REMOTE_APPSERVER
-    SalFrame* pFrame = GetWindowPtr( hWnd );
-	if( !pFrame || !pFrame->maFrameData.mpInst)
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
+	if( !pFrame || !pFrame->GetInstance())
 		return ::GetParent( hWnd );
-	Window *pRealParent = ((Window*)pFrame->maFrameData.mpInst)->mpRealParent;
+	Window *pRealParent = ((Window*)pFrame->GetInstance())->mpRealParent;
 	if( pRealParent )
-		return pRealParent->mpFrame->maFrameData.mhWnd;
+		return static_cast<WinSalFrame*>(pRealParent->mpFrame)->mhWnd;
 	else
 		return ::GetParent( hWnd );
-#else
-	return ::GetParent( hWnd );	// just to get it compiled for remote case, this function is never executed...
-#endif
 
 }
 
 // -----------------------------------------------------------------------
 
-SalFrame* SalFrame::GetParent() const
+SalFrame* WinSalFrame::GetParent() const
 {
-    return GetWindowPtr( ImplGetParentHwnd( maFrameData.mhWnd ) );
+    return GetWindowPtr( ImplGetParentHwnd( mhWnd ) );
 }
 
 // -----------------------------------------------------------------------
 
 static void ImplSalShow( HWND hWnd, BOOL bVisible, BOOL bNoActivate )
 {
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( !pFrame )
         return;
 
     if ( bVisible )
     {
-        pFrame->maFrameData.mbDefPos = FALSE;
-        pFrame->maFrameData.mbOverwriteState = TRUE;
-        pFrame->maFrameData.mbInShow = TRUE;
+        pFrame->mbDefPos = FALSE;
+        pFrame->mbOverwriteState = TRUE;
+        pFrame->mbInShow = TRUE;
 
         // #i4715, save position
         RECT aRectPreMatrox, aRectPostMatrox;
@@ -1230,9 +1224,9 @@ static void ImplSalShow( HWND hWnd, BOOL
         if( bNoActivate )
             ShowWindow( hWnd, SW_SHOWNOACTIVATE );
         else
-            ShowWindow( hWnd, pFrame->maFrameData.mnShowState );
+            ShowWindow( hWnd, pFrame->mnShowState );
 
-        if ( aSalShlData.mbWXP && pFrame->maFrameData.mbFloatWin && !(pFrame->maFrameData.mnStyle & SAL_FRAME_STYLE_NOSHADOW))
+        if ( aSalShlData.mbWXP && pFrame->mbFloatWin && !(pFrame->mnStyle & SAL_FRAME_STYLE_NOSHADOW))
         {
             // erase the window immediately to improve XP shadow effect
             // otherwise the shadow may appears long time before the rest of the window
@@ -1248,17 +1242,17 @@ static void ImplSalShow( HWND hWnd, BOOL
         // reposition popups without caption (menues, dropdowns, tooltips)
         GetWindowRect( hWnd, &aRectPostMatrox );
         if( (GetWindowStyle( hWnd ) & WS_POPUP) &&
-            !pFrame->maFrameData.mbCaption &&
+            !pFrame->mbCaption &&
             (aRectPreMatrox.left != aRectPostMatrox.left || aRectPreMatrox.top != aRectPostMatrox.top) )
             SetWindowPos( hWnd, 0, aRectPreMatrox.left, aRectPreMatrox.top, 0, 0, SWP_NOZORDER | SWP_NOACTIVATE | SWP_NOSIZE  );
 
-		Window *pClientWin = ((Window*)pFrame->maFrameData.mpInst)->ImplGetClientWindow();
-        if ( pFrame->maFrameData.mbFloatWin || ( pClientWin && (pClientWin->GetStyle() & WB_SYSTEMFLOATWIN) ) )
-            pFrame->maFrameData.mnShowState = SW_SHOWNOACTIVATE;
+		Window *pClientWin = ((Window*)pFrame->GetInstance())->ImplGetClientWindow();
+        if ( pFrame->mbFloatWin || ( pClientWin && (pClientWin->GetStyle() & WB_SYSTEMFLOATWIN) ) )
+            pFrame->mnShowState = SW_SHOWNOACTIVATE;
         else
-            pFrame->maFrameData.mnShowState = SW_SHOW;
+            pFrame->mnShowState = SW_SHOW;
         // Damit Taskleiste unter W98 auch gleich ausgeblendet wird
-        if ( pFrame->maFrameData.mbPresentation )
+        if ( pFrame->mbPresentation )
         {
             HWND hWndParent = ::GetParent( hWnd );
             if ( hWndParent )
@@ -1266,7 +1260,7 @@ static void ImplSalShow( HWND hWnd, BOOL
             SetForegroundWindow( hWnd );
         }
 
-        pFrame->maFrameData.mbInShow = FALSE;
+        pFrame->mbInShow = FALSE;
 
 
         // Direct Paint only, if we get the SolarMutx
@@ -1279,8 +1273,8 @@ static void ImplSalShow( HWND hWnd, BOOL
     else
     {
         // See also Bug #91813# and #68467#
-        if ( pFrame->maFrameData.mbFullScreen &&
-             pFrame->maFrameData.mbPresentation &&
+        if ( pFrame->mbFullScreen &&
+             pFrame->mbPresentation &&
              (aSalShlData.mnVersion < 500) &&
              !::GetParent( hWnd ) )
         {
@@ -1299,7 +1293,7 @@ static void ImplSalShow( HWND hWnd, BOOL
                 int nOldAni = aInfo.iMinAnimate;
                 aInfo.iMinAnimate = 0;
                 SystemParametersInfo( SPI_SETANIMATION, 0, &aInfo, 0 );
-                ShowWindow( pFrame->maFrameData.mhWnd, SW_SHOWMINNOACTIVE );
+                ShowWindow( pFrame->mhWnd, SW_SHOWMINNOACTIVE );
                 aInfo.iMinAnimate = nOldAni;
                 SystemParametersInfo( SPI_SETANIMATION, 0, &aInfo, 0 );
             }
@@ -1314,57 +1308,57 @@ static void ImplSalShow( HWND hWnd, BOOL
 
 // -----------------------------------------------------------------------
 
-void SalFrame::Show( BOOL bVisible, BOOL bNoActivate )
+void WinSalFrame::Show( BOOL bVisible, BOOL bNoActivate )
 {
     // Post this Message to the window, because this only works
     // in the thread of the window, which has create this window.
     // We post this message to avoid deadlocks
     if ( GetSalData()->mnAppThreadId != GetCurrentThreadId() )
-        ImplPostMessage( maFrameData.mhWnd, SAL_MSG_SHOW, bVisible, bNoActivate );
+        ImplPostMessage( mhWnd, SAL_MSG_SHOW, bVisible, bNoActivate );
     else
-        ImplSalShow( maFrameData.mhWnd, bVisible, bNoActivate );
+        ImplSalShow( mhWnd, bVisible, bNoActivate );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::Enable( BOOL bEnable )
+void WinSalFrame::Enable( BOOL bEnable )
 {
-    EnableWindow( maFrameData.mhWnd, bEnable );
+    EnableWindow( mhWnd, bEnable );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetMinClientSize( long nWidth, long nHeight )
+void WinSalFrame::SetMinClientSize( long nWidth, long nHeight )
 {
-    maFrameData.mnMinWidth  = nWidth;
-    maFrameData.mnMinHeight = nHeight;
+    mnMinWidth  = nWidth;
+    mnMinHeight = nHeight;
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetPosSize( long nX, long nY, long nWidth, long nHeight,
+void WinSalFrame::SetPosSize( long nX, long nY, long nWidth, long nHeight,
                                                    USHORT nFlags )
 {
-    BOOL bVisible = (GetWindowStyle( maFrameData.mhWnd ) & WS_VISIBLE) != 0;
+    BOOL bVisible = (GetWindowStyle( mhWnd ) & WS_VISIBLE) != 0;
     if ( !bVisible )
     {
-		Window *pClientWin = ((Window*)maFrameData.mpInst)->ImplGetClientWindow();
-        if ( maFrameData.mbFloatWin || ( pClientWin && (pClientWin->GetStyle() & WB_SYSTEMFLOATWIN) ) )
-                maFrameData.mnShowState = SW_SHOWNOACTIVATE;
+		Window *pClientWin = ((Window*)GetInstance())->ImplGetClientWindow();
+        if ( mbFloatWin || ( pClientWin && (pClientWin->GetStyle() & WB_SYSTEMFLOATWIN) ) )
+                mnShowState = SW_SHOWNOACTIVATE;
         else
-                maFrameData.mnShowState = SW_SHOWNORMAL;
+                mnShowState = SW_SHOWNORMAL;
     }
     else
     {
-        if ( IsIconic( maFrameData.mhWnd ) || IsZoomed( maFrameData.mhWnd ) )
-                ShowWindow( maFrameData.mhWnd, SW_RESTORE );
+        if ( IsIconic( mhWnd ) || IsZoomed( mhWnd ) )
+                ShowWindow( mhWnd, SW_RESTORE );
     }
 
     USHORT nEvent = 0;
     UINT    nPosSize = 0;
     RECT    aClientRect, aWindowRect;
-    GetClientRect( maFrameData.mhWnd, &aClientRect );   // x,y always 0,0, but width and height without border
-    GetWindowRect( maFrameData.mhWnd, &aWindowRect );   // x,y in screen coordinates, width and height with border
+    GetClientRect( mhWnd, &aClientRect );   // x,y always 0,0, but width and height without border
+    GetWindowRect( mhWnd, &aWindowRect );   // x,y in screen coordinates, width and height with border
 
     if ( !(nFlags & (SAL_FRAME_POSSIZE_X | SAL_FRAME_POSSIZE_Y)) )
         nPosSize |= SWP_NOMOVE;
@@ -1393,25 +1387,29 @@ void SalFrame::SetPosSize( long nX, long
     aWinRect.right  = (int)nWidth-1;
     aWinRect.top    = 0;
     aWinRect.bottom = (int)nHeight-1;
-    AdjustWindowRectEx( &aWinRect, GetWindowStyle( maFrameData.mhWnd ),
-                        FALSE,     GetWindowExStyle( maFrameData.mhWnd ) );
+    AdjustWindowRectEx( &aWinRect, GetWindowStyle( mhWnd ),
+                        FALSE,     GetWindowExStyle( mhWnd ) );
     nWidth  = aWinRect.right - aWinRect.left + 1;
     nHeight = aWinRect.bottom - aWinRect.top + 1;
 
-    if ( !(nPosSize & SWP_NOMOVE) && ::GetParent( maFrameData.mhWnd ) )
+    if ( !(nPosSize & SWP_NOMOVE) && ::GetParent( mhWnd ) )
     {
             // --- RTL --- (mirror window pos)
             RECT aParentRect;
-            GetClientRect( ImplGetParentHwnd( maFrameData.mhWnd ), &aParentRect );
+            GetClientRect( ImplGetParentHwnd( mhWnd ), &aParentRect );
             if( Application::GetSettings().GetLayoutRTL() )
                 nX = (aParentRect.right - aParentRect.left) - nWidth-1 - nX;
 
-            POINT aPt;
-            aPt.x = nX;
-            aPt.y = nY;
-            ClientToScreen( ImplGetParentHwnd( maFrameData.mhWnd ), &aPt );
-            nX = aPt.x;
-            nY = aPt.y;
+            //#110386#, do not transform coordinates for system child windows
+            if( !(GetWindowStyle( mhWnd ) & WS_CHILD) )
+            {
+                POINT aPt;
+                aPt.x = nX;
+                aPt.y = nY;
+                ClientToScreen( ImplGetParentHwnd( mhWnd ), &aPt );
+                nX = aPt.x;
+                nY = aPt.y;
+            }
     }
 
     // #i3338# to be conformant to UNIX we must position the client window, ie without the decoration
@@ -1425,17 +1423,17 @@ void SalFrame::SetPosSize( long nX, long
 
 
     RECT aRect;
-    ImplSalGetWorkArea( maFrameData.mhWnd, &aRect, NULL );
+    ImplSalGetWorkArea( mhWnd, &aRect, NULL );
     nScreenX        = aRect.left;
     nScreenY        = aRect.top;
     nScreenWidth    = aRect.right-aRect.left;
     nScreenHeight   = aRect.bottom-aRect.top;
 
-    if ( maFrameData.mbDefPos && (nPosSize & SWP_NOMOVE)) // we got no positioning request, so choose default position
+    if ( mbDefPos && (nPosSize & SWP_NOMOVE)) // we got no positioning request, so choose default position
     {
         // center window
 
-        HWND hWndParent = ::GetParent( maFrameData.mhWnd );
+        HWND hWndParent = ::GetParent( mhWnd );
         // Search for TopLevel Frame
         while ( hWndParent && (GetWindowStyle( hWndParent ) & WS_CHILD) )
             hWndParent = ::GetParent( hWndParent );
@@ -1475,7 +1473,7 @@ void SalFrame::SetPosSize( long nX, long
 
             // dualmonitor support:
             // Get screensize of the monitor whith the mouse pointer
-            ImplSalGetWorkArea( maFrameData.mhWnd, &aRect, &aRect );
+            ImplSalGetWorkArea( mhWnd, &aRect, &aRect );
 
             nX = ((aRect.right-aRect.left)-nWidth)/2 + aRect.left;
             nY = ((aRect.bottom-aRect.top)-nHeight)/2 + aRect.top;
@@ -1483,9 +1481,9 @@ void SalFrame::SetPosSize( long nX, long
 
 
         //if ( bVisible )
-        //    maFrameData.mbDefPos = FALSE;
+        //    mbDefPos = FALSE;
 
-        maFrameData.mbDefPos = FALSE;   // center only once
+        mbDefPos = FALSE;   // center only once
         nPosSize &= ~SWP_NOMOVE;        // activate positioning
         nEvent = SALEVENT_MOVERESIZE;
     }
@@ -1503,81 +1501,81 @@ void SalFrame::SetPosSize( long nX, long
 
     UINT nPosFlags = SWP_NOACTIVATE | SWP_NOOWNERZORDER | nPosSize;
     // bring floating windows always to top
-    if( !(maFrameData.mnStyle & SAL_FRAME_STYLE_FLOAT) )
+    if( !(mnStyle & SAL_FRAME_STYLE_FLOAT) )
         nPosFlags |= SWP_NOZORDER; // do not change z-order
 
-    SetWindowPos( maFrameData.mhWnd, HWND_TOP, nX, nY, (int)nWidth, (int)nHeight, nPosFlags  );
+    SetWindowPos( mhWnd, HWND_TOP, nX, nY, (int)nWidth, (int)nHeight, nPosFlags  );
 
-	UpdateFrameGeometry( maFrameData.mhWnd, this );
+	UpdateFrameGeometry( mhWnd, this );
 
     // Notification -- really ???
     if( nEvent )
-        maFrameData.mpProc( maFrameData.mpInst, this, nEvent, NULL );
+        CallCallback( nEvent, NULL );
 }
 
 // -----------------------------------------------------------------------
 
-static void ImplSetParentFrame( SalFrame* pThis, HWND hNewParentWnd, BOOL bAsChild )
+static void ImplSetParentFrame( WinSalFrame* pThis, HWND hNewParentWnd, BOOL bAsChild )
 {
     pThis->mbInReparent = TRUE;
 
     // save hwnd, will be overwritten in WM_CREATE during createwindow
-    HWND hWndOld = pThis->maFrameData.mhWnd;
-    BOOL bNeedGraphics = pThis->maFrameData.mbGraphics;
+    HWND hWndOld = pThis->mhWnd;
+    BOOL bNeedGraphics = pThis->mbGraphics;
     HFONT   hFont   = NULL;
     HPEN    hPen    = NULL;
     HBRUSH  hBrush  = NULL;
 
     // Release Cache DC
-    if ( pThis->maFrameData.mpGraphics2 &&
-         pThis->maFrameData.mpGraphics2->maGraphicsData.mhDC )
+    if ( pThis->mpGraphics2 &&
+         pThis->mpGraphics2->mhDC )
     {
         // save current gdi objects before hdc is gone
-        hFont   = (HFONT)   GetCurrentObject( pThis->maFrameData.mpGraphics2->maGraphicsData.mhDC, OBJ_FONT);
-        hPen    = (HPEN)    GetCurrentObject( pThis->maFrameData.mpGraphics2->maGraphicsData.mhDC, OBJ_PEN);
-        hBrush  = (HBRUSH)  GetCurrentObject( pThis->maFrameData.mpGraphics2->maGraphicsData.mhDC, OBJ_BRUSH);
-        pThis->ReleaseGraphics( pThis->maFrameData.mpGraphics2 );
+        hFont   = (HFONT)   GetCurrentObject( pThis->mpGraphics2->mhDC, OBJ_FONT);
+        hPen    = (HPEN)    GetCurrentObject( pThis->mpGraphics2->mhDC, OBJ_PEN);
+        hBrush  = (HBRUSH)  GetCurrentObject( pThis->mpGraphics2->mhDC, OBJ_BRUSH);
+        pThis->ReleaseGraphics( pThis->mpGraphics2 );
     }
 
     // destroy saved DC
-    if ( pThis->maFrameData.mpGraphics )
+    if ( pThis->mpGraphics )
     {
-        if ( pThis->maFrameData.mpGraphics->maGraphicsData.mhDefPal )
-            SelectPalette( pThis->maFrameData.mpGraphics->maGraphicsData.mhDC, pThis->maFrameData.mpGraphics->maGraphicsData.mhDefPal, TRUE );
-        ImplSalDeInitGraphics( &(pThis->maFrameData.mpGraphics->maGraphicsData) );
-        ReleaseDC( pThis->maFrameData.mhWnd, pThis->maFrameData.mpGraphics->maGraphicsData.mhDC );
+        if ( pThis->mpGraphics->mhDefPal )
+            SelectPalette( pThis->mpGraphics->mhDC, pThis->mpGraphics->mhDefPal, TRUE );
+        ImplSalDeInitGraphics( pThis->mpGraphics );
+        ReleaseDC( pThis->mhWnd, pThis->mpGraphics->mhDC );
     }
 
     // create a new hwnd with the same styles
     HWND hWndParent = hNewParentWnd;
     // forward to main thread
-    HWND hWnd = (HWND) ImplSendMessage( GetSalData()->mpFirstInstance->maInstData.mhComWnd,
+    HWND hWnd = (HWND) ImplSendMessage( GetSalData()->mpFirstInstance->mhComWnd,
                                         bAsChild ? SAL_MSG_RECREATECHILDHWND : SAL_MSG_RECREATEHWND,
-                                        (WPARAM) hWndParent, (LPARAM)pThis->maFrameData.mhWnd );
+                                        (WPARAM) hWndParent, (LPARAM)pThis->mhWnd );
 
     // succeeded ?
     hWndParent = ::GetParent( hWnd );
-    DBG_ASSERT( hWndParent == hNewParentWnd, "SalFrame::SetParent not successful");
+    DBG_ASSERT( hWndParent == hNewParentWnd, "WinSalFrame::SetParent not successful");
 
     // recreate DCs
     if( bNeedGraphics )
     {
-        if( pThis->maFrameData.mpGraphics2 )
+        if( pThis->mpGraphics2 )
         {
             // re-create cached DC
-            HDC hDC = (HDC)ImplSendMessage( GetSalData()->mpFirstInstance->maInstData.mhComWnd,
+            HDC hDC = (HDC)ImplSendMessage( GetSalData()->mpFirstInstance->mhComWnd,
                                             SAL_MSG_GETDC,
                                             (WPARAM) hWnd, 0 );
-            pThis->maFrameData.mpGraphics2->maGraphicsData.mhWnd = hWnd;
+            pThis->mpGraphics2->mhWnd = hWnd;
             if ( hDC )
             {
-                pThis->maFrameData.mpGraphics2->maGraphicsData.mhDC = hDC;
+                pThis->mpGraphics2->mhDC = hDC;
                 if ( GetSalData()->mhDitherPal )
                 {
-                    pThis->maFrameData.mpGraphics2->maGraphicsData.mhDefPal = SelectPalette( hDC, GetSalData()->mhDitherPal, TRUE );
+                    pThis->mpGraphics2->mhDefPal = SelectPalette( hDC, GetSalData()->mhDitherPal, TRUE );
                     RealizePalette( hDC );
                 }
-                ImplSalInitGraphics( &(pThis->maFrameData.mpGraphics2->maGraphicsData) );
+                ImplSalInitGraphics( pThis->mpGraphics2 );
 
                 // re-select saved gdi objects
                 if( hFont )
@@ -1587,23 +1585,23 @@ static void ImplSetParentFrame( SalFrame
                 if( hBrush )
                     SelectObject( hDC, hBrush );
 
-                pThis->maFrameData.mbGraphics = TRUE;
+                pThis->mbGraphics = TRUE;
                 GetSalData()->mnCacheDCInUse++;
             }
         }
 
-        if( pThis->maFrameData.mpGraphics )
+        if( pThis->mpGraphics )
         {
             // re-create DC
-            pThis->maFrameData.mpGraphics->maGraphicsData.mhWnd = hWnd;
-            pThis->maFrameData.mpGraphics->maGraphicsData.mhDC = GetDC( hWnd );
+            pThis->mpGraphics->mhWnd = hWnd;
+            pThis->mpGraphics->mhDC = GetDC( hWnd );
             if ( GetSalData()->mhDitherPal )
             {
-                pThis->maFrameData.mpGraphics->maGraphicsData.mhDefPal = SelectPalette( pThis->maFrameData.mpGraphics->maGraphicsData.mhDC, GetSalData()->mhDitherPal, TRUE );
-                RealizePalette( pThis->maFrameData.mpGraphics->maGraphicsData.mhDC );
+                pThis->mpGraphics->mhDefPal = SelectPalette( pThis->mpGraphics->mhDC, GetSalData()->mhDitherPal, TRUE );
+                RealizePalette( pThis->mpGraphics->mhDC );
             }
-            ImplSalInitGraphics( &(pThis->maFrameData.mpGraphics->maGraphicsData) );
-            pThis->maFrameData.mbGraphics = TRUE;
+            ImplSalInitGraphics( pThis->mpGraphics );
+            pThis->mbGraphics = TRUE;
         }
     }
 
@@ -1615,12 +1613,12 @@ static void ImplSetParentFrame( SalFrame
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetParent( SalFrame* pNewParent )
+void WinSalFrame::SetParent( SalFrame* pNewParent )
 {
-    ImplSetParentFrame( this, pNewParent->maFrameData.mhWnd, FALSE );
+    ImplSetParentFrame( this, static_cast<WinSalFrame*>(pNewParent)->mhWnd, FALSE );
 }
 
-bool SalFrame::SetPluginParent( SystemParentData* pNewParent )
+bool WinSalFrame::SetPluginParent( SystemParentData* pNewParent )
 {
     if ( pNewParent->hWnd == 0 )
     {
@@ -1633,10 +1631,10 @@ bool SalFrame::SetPluginParent( SystemPa
 
 // -----------------------------------------------------------------------
 
-void SalFrame::GetWorkArea( Rectangle &rRect )
+void WinSalFrame::GetWorkArea( Rectangle &rRect )
 {
     RECT aRect;
-	ImplSalGetWorkArea( maFrameData.mhWnd, &aRect, NULL );
+	ImplSalGetWorkArea( mhWnd, &aRect, NULL );
     rRect.nLeft     = aRect.left;
     rRect.nRight    = aRect.right-1;
     rRect.nTop      = aRect.top;
@@ -1645,7 +1643,7 @@ void SalFrame::GetWorkArea( Rectangle &r
 
 // -----------------------------------------------------------------------
 
-void SalFrame::GetClientSize( long& rWidth, long& rHeight )
+void WinSalFrame::GetClientSize( long& rWidth, long& rHeight )
 {
     rWidth  = maGeometry.nWidth;
     rHeight = maGeometry.nHeight;
@@ -1653,7 +1651,7 @@ void SalFrame::GetClientSize( long& rWid
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetWindowState( const SalFrameState* pState )
+void WinSalFrame::SetWindowState( const SalFrameState* pState )
 {
     // Wir testen, ob das Fenster ueberhaupt auf den Bildschirm passt, damit
     // nicht wenn die Bildschirm-Aufloesung geaendert wurde, das Fenster aus
@@ -1668,7 +1666,7 @@ void SalFrame::SetWindowState( const Sal
     int     nScreenHeight;
 
     RECT aRect;
-	ImplSalGetWorkArea( maFrameData.mhWnd, &aRect, NULL );
+	ImplSalGetWorkArea( mhWnd, &aRect, NULL );
     // #102500# allow some overlap, the window could have been made a little larger than the physical screen
     nScreenX        = aRect.left-10;
     nScreenY        = aRect.top-10;
@@ -1677,13 +1675,13 @@ void SalFrame::SetWindowState( const Sal
 
     UINT    nPosSize    = 0;
     RECT    aWinRect;
-    GetWindowRect( maFrameData.mhWnd, &aWinRect );
+    GetWindowRect( mhWnd, &aWinRect );
 
     // to be consistent with Unix, the frame state is without(!) decoration
     // ->add the decoration
     RECT aRect2 = aWinRect;
-	AdjustWindowRectEx( &aRect2, GetWindowStyle( maFrameData.mhWnd ),
-					FALSE,     GetWindowExStyle( maFrameData.mhWnd ) );
+	AdjustWindowRectEx( &aRect2, GetWindowStyle( mhWnd ),
+					FALSE,     GetWindowExStyle( mhWnd ) );
     long nTopDeco = abs( aWinRect.top - aRect2.top );
     long nLeftDeco = abs( aWinRect.left - aRect2.left );
     long nBottomDeco = abs( aWinRect.bottom - aRect2.bottom );
@@ -1730,28 +1728,28 @@ void SalFrame::SetWindowState( const Sal
     // Restore-Position setzen
     WINDOWPLACEMENT aPlacement;
     aPlacement.length = sizeof( aPlacement );
-    GetWindowPlacement( maFrameData.mhWnd, &aPlacement );
+    GetWindowPlacement( mhWnd, &aPlacement );
 
     // Status setzen
-    BOOL bVisible = (GetWindowStyle( maFrameData.mhWnd ) & WS_VISIBLE) != 0;
+    BOOL bVisible = (GetWindowStyle( mhWnd ) & WS_VISIBLE) != 0;
 	BOOL bUpdateHiddenFramePos = FALSE;
     if ( !bVisible )
     {
         aPlacement.showCmd = SW_HIDE;
 
-        if ( maFrameData.mbOverwriteState )
+        if ( mbOverwriteState )
         {
             if ( pState->mnMask & SAL_FRAMESTATE_MASK_STATE )
             {
                 if ( pState->mnState & SAL_FRAMESTATE_MINIMIZED )
-                    maFrameData.mnShowState = SW_SHOWMINIMIZED;
+                    mnShowState = SW_SHOWMINIMIZED;
                 else if ( pState->mnState & SAL_FRAMESTATE_MAXIMIZED )
 				{
-                    maFrameData.mnShowState = SW_SHOWMAXIMIZED;
+                    mnShowState = SW_SHOWMAXIMIZED;
 					bUpdateHiddenFramePos = TRUE;
 				}
                 else if ( pState->mnState & SAL_FRAMESTATE_NORMAL )
-                    maFrameData.mnShowState = SW_SHOWNORMAL;
+                    mnShowState = SW_SHOWNORMAL;
             }
         }
     }
@@ -1775,7 +1773,7 @@ void SalFrame::SetWindowState( const Sal
     // Wenn Fenster nicht minimiert/maximiert ist oder nicht optisch
     // umgesetzt werden muss, dann SetWindowPos() benutzen, da
     // SetWindowPlacement() die TaskBar mit einrechnet
-    if ( !IsIconic( maFrameData.mhWnd ) && !IsZoomed( maFrameData.mhWnd ) &&
+    if ( !IsIconic( mhWnd ) && !IsZoomed( mhWnd ) &&
          (!bVisible || (aPlacement.showCmd == SW_RESTORE)) )
     {
 		if( bUpdateHiddenFramePos )
@@ -1794,16 +1792,16 @@ void SalFrame::SetWindowState( const Sal
             // Get screensize of the monitor whith the mouse pointer
 
 			RECT aRect;
-			ImplSalGetWorkArea( maFrameData.mhWnd, &aRect, &aRectMouse );
-			AdjustWindowRectEx( &aRect, GetWindowStyle( maFrameData.mhWnd ),
-								FALSE,     GetWindowExStyle( maFrameData.mhWnd ) );
+			ImplSalGetWorkArea( mhWnd, &aRect, &aRectMouse );
+			AdjustWindowRectEx( &aRect, GetWindowStyle( mhWnd ),
+								FALSE,     GetWindowExStyle( mhWnd ) );
 			maGeometry.nX = aRect.left;
 			maGeometry.nY = aRect.top;;
 			maGeometry.nWidth = aRect.right - aRect.left + 1;
 			maGeometry.nHeight = aRect.bottom - aRect.top + 1;
 		}
 		else
-			SetWindowPos( maFrameData.mhWnd, 0,
+			SetWindowPos( mhWnd, 0,
                       nX, nY, nWidth, nHeight,
                       SWP_NOZORDER | SWP_NOACTIVATE | nPosSize );
     }
@@ -1816,20 +1814,20 @@ void SalFrame::SetWindowState( const Sal
             aPlacement.rcNormalPosition.right   = nX+nWidth-nScreenX;
             aPlacement.rcNormalPosition.bottom  = nY+nHeight-nScreenY;
         }
-        SetWindowPlacement( maFrameData.mhWnd, &aPlacement );
+        SetWindowPlacement( mhWnd, &aPlacement );
     }
 
     if( !(nPosSize & SWP_NOMOVE) )
-        maFrameData.mbDefPos = FALSE; // window was positioned
+        mbDefPos = FALSE; // window was positioned
 }
 
 // -----------------------------------------------------------------------
 
-BOOL SalFrame::GetWindowState( SalFrameState* pState )
+BOOL WinSalFrame::GetWindowState( SalFrameState* pState )
 {
-    if ( maFrameData.maState.mnWidth && maFrameData.maState.mnHeight )
+    if ( maState.mnWidth && maState.mnHeight )
     {
-        *pState = maFrameData.maState;
+        *pState = maState;
         // #94144# allow Minimize again, should be masked out when read from configuration
         // 91625 - Don't save minimize
         //if ( !(pState->mnState & SAL_FRAMESTATE_MAXIMIZED) )
@@ -1843,32 +1841,29 @@ BOOL SalFrame::GetWindowState( SalFrameS
 
 // -----------------------------------------------------------------------
 
-void SalFrame::ShowFullScreen( BOOL bFullScreen )
+void WinSalFrame::ShowFullScreen( BOOL bFullScreen )
 {
-    if ( maFrameData.mbFullScreen == bFullScreen )
+    if ( mbFullScreen == bFullScreen )
         return;
 
-    maFrameData.mbFullScreen = bFullScreen;
+    mbFullScreen = bFullScreen;
     if ( bFullScreen )
     {
-#if ( WINVER >= 0x0400 )
         // Damit Taskleiste von Windows ausgeblendet wird
-        DWORD nExStyle = GetWindowExStyle( maFrameData.mhWnd );
+        DWORD nExStyle = GetWindowExStyle( mhWnd );
         if ( nExStyle & WS_EX_TOOLWINDOW )
         {
-            maFrameData.mbFullScreenToolWin = TRUE;
+            mbFullScreenToolWin = TRUE;
             nExStyle &= ~WS_EX_TOOLWINDOW;
-            SetWindowExStyle( maFrameData.mhWnd, nExStyle );
+            SetWindowExStyle( mhWnd, nExStyle );
         }
-#endif
-
         // save old position
-        GetWindowRect( maFrameData.mhWnd, &maFrameData.maFullScreenRect );
+        GetWindowRect( mhWnd, &maFullScreenRect );
 
         // save show state
-        maFrameData.mnFullScreenShowState = maFrameData.mnShowState;
-        if ( !(GetWindowStyle( maFrameData.mhWnd ) & WS_VISIBLE) )
-            maFrameData.mnShowState = SW_SHOW;
+        mnFullScreenShowState = mnShowState;
+        if ( !(GetWindowStyle( mhWnd ) & WS_VISIBLE) )
+            mnShowState = SW_SHOW;
 
         // set window to screen size
         ImplSalFrameFullScreenPos( this, TRUE );
@@ -1877,33 +1872,31 @@ void SalFrame::ShowFullScreen( BOOL bFul
     {
         // wenn ShowState wieder hergestellt werden muss, hiden wir zuerst
         // das Fenster, damit es nicht so sehr flackert
-        BOOL bVisible = (GetWindowStyle( maFrameData.mhWnd ) & WS_VISIBLE) != 0;
-        if ( bVisible && (maFrameData.mnShowState != maFrameData.mnFullScreenShowState) )
-            ShowWindow( maFrameData.mhWnd, SW_HIDE );
-
-#if ( WINVER >= 0x0400 )
-        if ( maFrameData.mbFullScreenToolWin )
-            SetWindowExStyle( maFrameData.mhWnd, GetWindowExStyle( maFrameData.mhWnd ) | WS_EX_TOOLWINDOW );
-        maFrameData.mbFullScreenToolWin = FALSE;
-#endif
-
-        SetWindowPos( maFrameData.mhWnd, 0,
-                      maFrameData.maFullScreenRect.left,
-                      maFrameData.maFullScreenRect.top,
-                      maFrameData.maFullScreenRect.right-maFrameData.maFullScreenRect.left,
-                      maFrameData.maFullScreenRect.bottom-maFrameData.maFullScreenRect.top,
+        BOOL bVisible = (GetWindowStyle( mhWnd ) & WS_VISIBLE) != 0;
+        if ( bVisible && (mnShowState != mnFullScreenShowState) )
+            ShowWindow( mhWnd, SW_HIDE );
+
+        if ( mbFullScreenToolWin )
+            SetWindowExStyle( mhWnd, GetWindowExStyle( mhWnd ) | WS_EX_TOOLWINDOW );
+        mbFullScreenToolWin = FALSE;
+
+        SetWindowPos( mhWnd, 0,
+                      maFullScreenRect.left,
+                      maFullScreenRect.top,
+                      maFullScreenRect.right-maFullScreenRect.left,
+                      maFullScreenRect.bottom-maFullScreenRect.top,
                       SWP_NOZORDER | SWP_NOACTIVATE );
 
         // restore show state
-        if ( maFrameData.mnShowState != maFrameData.mnFullScreenShowState )
+        if ( mnShowState != mnFullScreenShowState )
         {
-            maFrameData.mnShowState = maFrameData.mnFullScreenShowState;
+            mnShowState = mnFullScreenShowState;
             if ( bVisible )
             {
-                maFrameData.mbInShow = TRUE;
-                ShowWindow( maFrameData.mhWnd, maFrameData.mnShowState );
-                maFrameData.mbInShow = FALSE;
-                UpdateWindow( maFrameData.mhWnd );
+                mbInShow = TRUE;
+                ShowWindow( mhWnd, mnShowState );
+                mbInShow = FALSE;
+                UpdateWindow( mhWnd );
             }
         }
     }
@@ -1911,17 +1904,16 @@ void SalFrame::ShowFullScreen( BOOL bFul
 
 // -----------------------------------------------------------------------
 
-void SalFrame::StartPresentation( BOOL bStart )
+void WinSalFrame::StartPresentation( BOOL bStart )
 {
-    if ( maFrameData.mbPresentation == bStart )
+    if ( mbPresentation == bStart )
         return;
 
-    maFrameData.mbPresentation = bStart;
+    mbPresentation = bStart;
 
     SalData* pSalData = GetSalData();
     if ( bStart )
     {
-#if ( WINVER >= 0x0400 )
         if ( !pSalData->mpSageEnableProc )
         {
             if ( pSalData->mnSageStatus != DISABLE_AGENT )
@@ -1945,7 +1937,6 @@ void SalFrame::StartPresentation( BOOL b
             if ( pSalData->mnSageStatus == ENABLE_AGENT )
                 pSalData->mpSageEnableProc( DISABLE_AGENT );
         }
-#endif
 
         // Bildschirmschoner ausschalten, wenn Praesentation laueft
         SystemParametersInfo( SPI_GETSCREENSAVEACTIVE, 0,
@@ -1959,24 +1950,22 @@ void SalFrame::StartPresentation( BOOL b
         if ( pSalData->mbScrSvrEnabled )
             SystemParametersInfo( SPI_SETSCREENSAVEACTIVE, pSalData->mbScrSvrEnabled, 0, 0 );
 
-#if ( WINVER >= 0x0400 )
         // Systemagenten wieder aktivieren
         if ( pSalData->mnSageStatus == ENABLE_AGENT )
             pSalData->mpSageEnableProc( pSalData->mnSageStatus );
-#endif
     }
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetAlwaysOnTop( BOOL bOnTop )
+void WinSalFrame::SetAlwaysOnTop( BOOL bOnTop )
 {
     HWND hWnd;
     if ( bOnTop )
         hWnd = HWND_TOPMOST;
     else
         hWnd = HWND_NOTOPMOST;
-    SetWindowPos( maFrameData.mhWnd, hWnd, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE );
+    SetWindowPos( mhWnd, hWnd, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE );
 }
 
 // -----------------------------------------------------------------------
@@ -1993,10 +1982,10 @@ static void ImplSalToTop( HWND hWnd, USH
         {
             if ( IsIconic( hIconicWnd ) )
             {
-                SalFrame* pFrame = GetWindowPtr( hIconicWnd );
+                WinSalFrame* pFrame = GetWindowPtr( hIconicWnd );
                 if ( pFrame )
                 {
-                    if ( GetWindowPtr( hWnd )->maFrameData.mbRestoreMaximize )
+                    if ( GetWindowPtr( hWnd )->mbRestoreMaximize )
                         ShowWindow( hIconicWnd, SW_MAXIMIZE );
                     else
                         ShowWindow( hIconicWnd, SW_RESTORE );
@@ -2023,21 +2012,21 @@ static void ImplSalToTop( HWND hWnd, USH
 
 // -----------------------------------------------------------------------
 
-void SalFrame::ToTop( USHORT nFlags )
+void WinSalFrame::ToTop( USHORT nFlags )
 {
 	nFlags &= ~SAL_FRAME_TOTOP_GRABFOCUS;	// this flag is not needed on win32
     // Post this Message to the window, because this only works
     // in the thread of the window, which has create this window.
     // We post this message to avoid deadlocks
     if ( GetSalData()->mnAppThreadId != GetCurrentThreadId() )
-        ImplPostMessage( maFrameData.mhWnd, SAL_MSG_TOTOP, nFlags, 0 );
+        ImplPostMessage( mhWnd, SAL_MSG_TOTOP, nFlags, 0 );
     else
-        ImplSalToTop( maFrameData.mhWnd, nFlags );
+        ImplSalToTop( mhWnd, nFlags );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetPointer( PointerStyle ePointerStyle )
+void WinSalFrame::SetPointer( PointerStyle ePointerStyle )
 {
     struct ImplPtrData
     {
@@ -2052,11 +2041,7 @@ void SalFrame::SetPointer( PointerStyle 
     { 0, 0, SAL_RESID_POINTER_NULL },               // POINTER_NULL
     { 0, IDC_WAIT, 0 },                             // POINTER_WAIT
     { 0, IDC_IBEAM, 0 },                            // POINTER_TEXT
-#if ( WINVER >= 0x0400 )
     { 0, IDC_HELP, 0 },                             // POINTER_HELP
-#else
-    { 0, 0, SAL_RESID_POINTER_HELP },               // POINTER_HELP
-#endif
     { 0, 0, SAL_RESID_POINTER_CROSS },              // POINTER_CROSS
     { 0, 0, SAL_RESID_POINTER_MOVE },               // POINTER_MOVE
     { 0, IDC_SIZENS, 0 },                           // POINTER_NSIZE
@@ -2156,16 +2141,16 @@ void SalFrame::SetPointer( PointerStyle 
     }
 
     // Unterscheidet sich der Mauspointer, dann den neuen setzen
-    if ( maFrameData.mhCursor != aImplPtrTab[ePointerStyle].mhCursor )
+    if ( mhCursor != aImplPtrTab[ePointerStyle].mhCursor )
     {
-        maFrameData.mhCursor = aImplPtrTab[ePointerStyle].mhCursor;
-        SetCursor( maFrameData.mhCursor );
+        mhCursor = aImplPtrTab[ePointerStyle].mhCursor;
+        SetCursor( mhCursor );
     }
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::CaptureMouse( BOOL bCapture )
+void WinSalFrame::CaptureMouse( BOOL bCapture )
 {
     // Send this Message to the window, because CaptureMouse() only work
     // in the thread of the window, which has create this window
@@ -2174,30 +2159,30 @@ void SalFrame::CaptureMouse( BOOL bCaptu
         nMsg = SAL_MSG_CAPTUREMOUSE;
     else
         nMsg = SAL_MSG_RELEASEMOUSE;
-    ImplSendMessage( maFrameData.mhWnd, nMsg, 0, 0 );
+    ImplSendMessage( mhWnd, nMsg, 0, 0 );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetPointerPos( long nX, long nY )
+void WinSalFrame::SetPointerPos( long nX, long nY )
 {
     POINT aPt;
     aPt.x = (int)nX;
     aPt.y = (int)nY;
-    ClientToScreen( maFrameData.mhWnd, &aPt );
+    ClientToScreen( mhWnd, &aPt );
     SetCursorPos( aPt.x, aPt.y );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::Flush()
+void WinSalFrame::Flush()
 {
     GdiFlush();
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::Sync()
+void WinSalFrame::Sync()
 {
     GdiFlush();
 }
@@ -2206,37 +2191,37 @@ void SalFrame::Sync()
 
 static void ImplSalFrameSetInputContext( HWND hWnd, const SalInputContext* pContext )
 {
-    SalFrame*   pFrame = GetWindowPtr( hWnd );
+    WinSalFrame*   pFrame = GetWindowPtr( hWnd );
     BOOL        bIME = (pContext->mnOptions & SAL_INPUTCONTEXT_TEXT) != 0;
     if ( bIME )
     {
-        if ( !pFrame->maFrameData.mbIME )
+        if ( !pFrame->mbIME )
         {
-            pFrame->maFrameData.mbIME = TRUE;
+            pFrame->mbIME = TRUE;
 
-            if ( pFrame->maFrameData.mhDefIMEContext )
+            if ( pFrame->mhDefIMEContext )
             {
-                ImmAssociateContext( pFrame->maFrameData.mhWnd, pFrame->maFrameData.mhDefIMEContext );
+                ImmAssociateContext( pFrame->mhWnd, pFrame->mhDefIMEContext );
                 UINT nImeProps = ImmGetProperty( GetKeyboardLayout( 0 ), IGP_PROPERTY );
-                pFrame->maFrameData.mbSpezIME = (nImeProps & IME_PROP_SPECIAL_UI) != 0;
-                pFrame->maFrameData.mbAtCursorIME = (nImeProps & IME_PROP_AT_CARET) != 0;
-                pFrame->maFrameData.mbHandleIME = !pFrame->maFrameData.mbSpezIME;
+                pFrame->mbSpezIME = (nImeProps & IME_PROP_SPECIAL_UI) != 0;
+                pFrame->mbAtCursorIME = (nImeProps & IME_PROP_AT_CARET) != 0;
+                pFrame->mbHandleIME = !pFrame->mbSpezIME;
             }
         }
 
         // When the application can't handle IME messages, then the
         // System should handle the IME handling
         if ( !(pContext->mnOptions & SAL_INPUTCONTEXT_EXTTEXTINPUT) )
-            pFrame->maFrameData.mbHandleIME = FALSE;
+            pFrame->mbHandleIME = FALSE;
 
         // Set the Font for IME Handling
         if ( pContext->mpFont )
         {
-            HIMC hIMC = ImmGetContext( pFrame->maFrameData.mhWnd );
+            HIMC hIMC = ImmGetContext( pFrame->mhWnd );
             if ( hIMC )
             {
                 LOGFONTW aLogFont;
-                HDC hDC = GetDC( pFrame->maFrameData.mhWnd );
+                HDC hDC = GetDC( pFrame->mhWnd );
                 // In case of vertical writing, always append a '@' to the
                 // Windows font name, not only if such a Windows font really is
                 // available (bTestVerticalAvail == false in the below call):
@@ -2247,29 +2232,29 @@ static void ImplSalFrameSetInputContext(
                 // '@' in front of this font name.
                 ImplGetLogFontFromFontSelect( hDC, pContext->mpFont, aLogFont,
                                               false );
-                ReleaseDC( pFrame->maFrameData.mhWnd, hDC );
+                ReleaseDC( pFrame->mhWnd, hDC );
                 ImmSetCompositionFontW( hIMC, &aLogFont );
-                ImmReleaseContext( pFrame->maFrameData.mhWnd, hIMC );
+                ImmReleaseContext( pFrame->mhWnd, hIMC );
             }
         }
     }
     else
     {
-        if ( pFrame->maFrameData.mbIME )
+        if ( pFrame->mbIME )
         {
-            pFrame->maFrameData.mbIME = FALSE;
-            pFrame->maFrameData.mbHandleIME = FALSE;
-            ImmAssociateContext( pFrame->maFrameData.mhWnd, 0 );
+            pFrame->mbIME = FALSE;
+            pFrame->mbHandleIME = FALSE;
+            ImmAssociateContext( pFrame->mhWnd, 0 );
         }
     }
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetInputContext( SalInputContext* pContext )
+void WinSalFrame::SetInputContext( SalInputContext* pContext )
 {
     // Must be called in the main thread!
-    ImplSendMessage( maFrameData.mhWnd, SAL_MSG_SETINPUTCONTEXT, 0, (LPARAM)(void*)pContext );
+    ImplSendMessage( mhWnd, SAL_MSG_SETINPUTCONTEXT, 0, (LPARAM)(void*)pContext );
 }
 
 // -----------------------------------------------------------------------
@@ -2292,10 +2277,10 @@ static void ImplSalFrameEndExtTextInput(
 
 // -----------------------------------------------------------------------
 
-void SalFrame::EndExtTextInput( USHORT nFlags )
+void WinSalFrame::EndExtTextInput( USHORT nFlags )
 {
     // Must be called in the main thread!
-    ImplSendMessage( maFrameData.mhWnd, SAL_MSG_ENDEXTTEXTINPUT, (WPARAM)nFlags, 0 );
+    ImplSendMessage( mhWnd, SAL_MSG_ENDEXTTEXTINPUT, (WPARAM)nFlags, 0 );
 }
 
 // -----------------------------------------------------------------------
@@ -2304,7 +2289,7 @@ static void ImplGetKeyNameText( LONG lPa
                                 UINT& rCount, UINT nMaxSize,
                                 const sal_Char* pReplace )
 {
-    DBG_ASSERT( sizeof( WCHAR ) == sizeof( xub_Unicode ), "SalFrame::ImplGetKeyNameTextW(): WCHAR != sal_Unicode" );
+    DBG_ASSERT( sizeof( WCHAR ) == sizeof( xub_Unicode ), "WinSalFrame::ImplGetKeyNameTextW(): WCHAR != sal_Unicode" );
 
     WCHAR aKeyBuf[350];
     int nKeyLen = 0;
@@ -2384,7 +2369,7 @@ static void ImplGetKeyNameText( LONG lPa
 
 // -----------------------------------------------------------------------
 
-XubString SalFrame::GetKeyName( USHORT nKeyCode )
+XubString WinSalFrame::GetKeyName( USHORT nKeyCode )
 {
     XubString   aKeyCode;
     sal_Unicode aKeyBuf[350];
@@ -2593,7 +2578,7 @@ XubString SalFrame::GetKeyName( USHORT n
 
 // -----------------------------------------------------------------------
 
-XubString SalFrame::GetSymbolKeyName( const XubString&, USHORT nKeyCode )
+XubString WinSalFrame::GetSymbolKeyName( const XubString&, USHORT nKeyCode )
 {
     return GetKeyName( nKeyCode );
 }
@@ -2674,7 +2659,7 @@ static long ImplA2I( const BYTE* pStr )
 
 // -----------------------------------------------------------------------
 
-void SalFrame::UpdateSettings( AllSettings& rSettings )
+void WinSalFrame::UpdateSettings( AllSettings& rSettings )
 {
     MouseSettings aMouseSettings = rSettings.GetMouseSettings();
     aMouseSettings.SetDoubleClickTime( GetDoubleClickTime() );
@@ -2706,13 +2691,10 @@ void SalFrame::UpdateSettings( AllSettin
 
     StyleSettings aStyleSettings = rSettings.GetStyleSettings();
     BOOL bCompBorder = (aStyleSettings.GetOptions() & (STYLE_OPTION_MACSTYLE | STYLE_OPTION_UNIXSTYLE)) == 0;
-#if (_MSC_VER < 1300)
-    aStyleSettings.SetScrollBarSize( std::min( GetSystemMetrics( SM_CXVSCROLL ), 20 ) ); // #99956# do not allow huge scrollbars, most of the UI is not scaled anymore
-    aStyleSettings.SetSpinSize( std::min( GetSystemMetrics( SM_CXVSCROLL ), 20 ) );
-#else
-    aStyleSettings.SetScrollBarSize( min( GetSystemMetrics( SM_CXVSCROLL ), 20 ) ); // #99956# do not allow huge scrollbars, most of the UI is not scaled anymore
-    aStyleSettings.SetSpinSize( min( GetSystemMetrics( SM_CXVSCROLL ), 20 ) );
-#endif
+    // TODO: once those options vanish: just set bCompBorder to TRUE
+    // to have the system colors read
+    aStyleSettings.SetScrollBarSize( Min( GetSystemMetrics( SM_CXVSCROLL ), 20 ) ); // #99956# do not allow huge scrollbars, most of the UI is not scaled anymore
+    aStyleSettings.SetSpinSize( Min( GetSystemMetrics( SM_CXVSCROLL ), 20 ) );
     aStyleSettings.SetCursorBlinkTime( GetCaretBlinkTime() );
     if ( bCompBorder )
     {
@@ -2754,6 +2736,7 @@ void SalFrame::UpdateSettings( AllSettin
         aStyleSettings.SetMenuColor( ImplWinColorToSal( GetSysColor( COLOR_MENU ) ) );
         aStyleSettings.SetMenuBarColor( aStyleSettings.GetMenuColor() );
         aStyleSettings.SetMenuBorderColor( aStyleSettings.GetLightBorderColor() ); // overriden below for flat menus
+        aStyleSettings.SetUseFlatBorders( FALSE );
         aStyleSettings.SetUseFlatMenues( FALSE );
         aStyleSettings.SetMenuTextColor( ImplWinColorToSal( GetSysColor( COLOR_MENUTEXT ) ) );
         aStyleSettings.SetActiveColor( ImplWinColorToSal( GetSysColor( COLOR_ACTIVECAPTION ) ) );
@@ -2771,6 +2754,10 @@ void SalFrame::UpdateSettings( AllSettin
                 aStyleSettings.SetMenuBarColor( ImplWinColorToSal( GetSysColor( COLOR_MENUBAR ) ) );
                 aStyleSettings.SetMenuHighlightColor( ImplWinColorToSal( GetSysColor( COLOR_MENUHILIGHT ) ) );
                 aStyleSettings.SetMenuBorderColor( ImplWinColorToSal( GetSysColor( COLOR_3DSHADOW ) ) );
+
+                // flat borders for our controls etc. as well in this mode (ie, no 3d borders)
+                // this is not active in the classic style appearance
+                aStyleSettings.SetUseFlatBorders( TRUE );
             }
         }
     }
@@ -2925,16 +2912,16 @@ void SalFrame::UpdateSettings( AllSettin
 
 // -----------------------------------------------------------------------
 
-SalBitmap* SalFrame::SnapShot()
+SalBitmap* WinSalFrame::SnapShot()
 {
-    SalBitmap* pSalBitmap = NULL;
+    WinSalBitmap* pSalBitmap = NULL;
 
     RECT aRect;
-    GetWindowRect( maFrameData.mhWnd, &aRect );
+    GetWindowRect( mhWnd, &aRect );
 
     int     nDX = aRect.right-aRect.left;
     int     nDY = aRect.bottom-aRect.top;
-    HDC     hDC = GetWindowDC( maFrameData.mhWnd );
+    HDC     hDC = GetWindowDC( mhWnd );
     HBITMAP hBmpBitmap = CreateCompatibleBitmap( hDC, nDX, nDY );
     HDC     hBmpDC = ImplGetCachedDC( CACHED_HDC_1, hBmpBitmap );
     BOOL    bRet;
@@ -2944,7 +2931,7 @@ SalBitmap* SalFrame::SnapShot()
 
     if ( bRet )
     {
-        pSalBitmap = new SalBitmap;
+        pSalBitmap = new WinSalBitmap;
 
         if ( !pSalBitmap->Create( hBmpBitmap, FALSE, FALSE ) )
         {
@@ -2958,14 +2945,14 @@ SalBitmap* SalFrame::SnapShot()
 
 // -----------------------------------------------------------------------
 
-const SystemEnvData* SalFrame::GetSystemData() const
+const SystemEnvData* WinSalFrame::GetSystemData() const
 {
-    return &maFrameData.maSysData;
+    return &maSysData;
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::Beep( SoundType eSoundType )
+void WinSalFrame::Beep( SoundType eSoundType )
 {
     static UINT aImplSoundTab[5] =
     {
@@ -2976,27 +2963,12 @@ void SalFrame::Beep( SoundType eSoundTyp
         MB_ICONQUESTION                 // SOUND_QUERY
     };
 
-#if SOUND_COUNT != 5
-#error New Sound must be defined!
-#endif
-
     MessageBeep( aImplSoundTab[eSoundType] );
 }
 
 // -----------------------------------------------------------------------
 
-void SalFrame::SetCallback( void* pInst, SALFRAMEPROC pProc )
-{
-    maFrameData.mpInst = pInst;
-    if ( pProc )
-        maFrameData.mpProc = pProc;
-    else
-        maFrameData.mpProc = ImplSalCallbackDummy;
-}
-
-// -----------------------------------------------------------------------
-
-ULONG SalFrame::GetCurrentModButtons()
+ULONG WinSalFrame::GetCurrentModButtons()
 {
     ULONG nMod = 0;
 
@@ -3020,7 +2992,7 @@ ULONG SalFrame::GetCurrentModButtons()
 static long ImplHandleMouseMsg( HWND hWnd, UINT nMsg,
                                 WPARAM wParam, LPARAM lParam )
 {
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( !pFrame )
         return 0;
 
@@ -3029,7 +3001,7 @@ static long ImplHandleMouseMsg( HWND hWn
         // #103168# post again if async focus has not arrived yet
         // hopefully we will not receive the corresponding button up before this
         // button down arrives again
-        Window *pWin = (Window*) pFrame->maFrameData.mpInst;
+        Window *pWin = (Window*) pFrame->GetInstance();
         if( pWin && pWin->mpFrameData->mnFocusId )
         {
             ImplPostMessage( hWnd, nMsg, wParam, lParam );
@@ -3173,10 +3145,9 @@ static long ImplHandleMouseMsg( HWND hWn
         if( Application::GetSettings().GetLayoutRTL() )
             aMouseEvt.mnX = pFrame->maGeometry.nWidth-1-aMouseEvt.mnX;
 
-        nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                           nEvent, &aMouseEvt );
+        nRet = pFrame->CallCallback( nEvent, &aMouseEvt );
         if ( nMsg == WM_MOUSEMOVE )
-            SetCursor( pFrame->maFrameData.mhCursor );
+            SetCursor( pFrame->mhCursor );
     }
     else
         nRet = 0;
@@ -3188,11 +3159,11 @@ static long ImplHandleMouseMsg( HWND hWn
 
 static long ImplHandleMouseActivateMsg( HWND hWnd )
 {
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( !pFrame )
         return 0;
 
-    if ( pFrame->maFrameData.mbFloatWin )
+    if ( pFrame->mbFloatWin )
         return TRUE;
 
     SalMouseActivateEvent   aMouseActivateEvt;
@@ -3201,8 +3172,7 @@ static long ImplHandleMouseActivateMsg( 
     ScreenToClient( hWnd, &aPt );
     aMouseActivateEvt.mnX = aPt.x;
     aMouseActivateEvt.mnY = aPt.y;
-    return pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                       SALEVENT_MOUSEACTIVATE, &aMouseActivateEvt );
+    return pFrame->CallCallback( SALEVENT_MOUSEACTIVATE, &aMouseActivateEvt );
 }
 
 // -----------------------------------------------------------------------
@@ -3212,7 +3182,7 @@ static long ImplHandleWheelMsg( HWND hWn
     ImplSalYieldMutexAcquireWithWait();
 
     long        nRet = 0;
-    SalFrame*   pFrame = GetWindowPtr( hWnd );
+    WinSalFrame*   pFrame = GetWindowPtr( hWnd );
     if ( pFrame )
     {
         WORD    nWinModCode = LOWORD( wParam );
@@ -3245,8 +3215,7 @@ static long ImplHandleWheelMsg( HWND hWn
         if( Application::GetSettings().GetLayoutRTL() )
             aWheelEvt.mnX = pFrame->maGeometry.nWidth-1-aWheelEvt.mnX;
 
-        nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                           SALEVENT_WHEELMOUSE, &aWheelEvt );
+        nRet = pFrame->CallCallback( SALEVENT_WHEELMOUSE, &aWheelEvt );
     }
 
     ImplSalYieldMutexRelease();
@@ -3306,36 +3275,27 @@ static UINT ImplStrToNum( const sal_Char
 
 // -----------------------------------------------------------------------
 
-LanguageType SalFrame::GetInputLanguage()
-{
-    if( !maFrameData.mnInputLang )
-        return LANGUAGE_DONTKNOW;
-    else
-        return (LanguageType) maFrameData.mnInputLang;
-}
-
-// -----------------------------------------------------------------------
-
-static sal_Unicode ImplGetCharCode( SalFrame* pFrame, WPARAM nCharCode )
+static void ImplUpdateInputLang( WinSalFrame* pFrame )
 {
     BOOL bLanguageChange = FALSE;
     UINT nLang = LOWORD( GetKeyboardLayout( 0 ) );
-    if ( nLang && nLang != pFrame->maFrameData.mnInputLang )
+    if ( nLang && nLang != pFrame->mnInputLang )
     {
         // keep input lang up-to-date
-        pFrame->maFrameData.mnInputLang = nLang;
+        pFrame->mnInputLang = nLang;
         bLanguageChange = TRUE;
     }
 
     // If we are on Windows NT we use Unicode FrameProcs and so we
     // get Unicode charcodes directly from Windows
+    // no need to set up a code page
     if ( aSalShlData.mbWNT )
-        return (sal_Unicode)nCharCode;
+        return;
 
     if ( !nLang )
     {
-        pFrame->maFrameData.mnInputLang     = 0;
-        pFrame->maFrameData.mnInputCodePage = GetACP();
+        pFrame->mnInputLang     = 0;
+        pFrame->mnInputCodePage = GetACP();
     }
     else if ( bLanguageChange )
     {
@@ -3343,13 +3303,24 @@ static sal_Unicode ImplGetCharCode( SalF
         if ( GetLocaleInfoA( MAKELCID( nLang, SORT_DEFAULT ), LOCALE_IDEFAULTANSICODEPAGE,
                              aBuf, sizeof(aBuf) ) > 0 )
         {
-            pFrame->maFrameData.mnInputCodePage = ImplStrToNum( aBuf );
-            if ( !pFrame->maFrameData.mnInputCodePage )
-                pFrame->maFrameData.mnInputCodePage = GetACP();
+            pFrame->mnInputCodePage = ImplStrToNum( aBuf );
+            if ( !pFrame->mnInputCodePage )
+                pFrame->mnInputCodePage = GetACP();
         }
         else
-            pFrame->maFrameData.mnInputCodePage = GetACP();
+            pFrame->mnInputCodePage = GetACP();
     }
+}
+
+
+static sal_Unicode ImplGetCharCode( WinSalFrame* pFrame, WPARAM nCharCode )
+{
+    ImplUpdateInputLang( pFrame );
+
+    // If we are on Windows NT we use Unicode FrameProcs and so we
+    // get Unicode charcodes directly from Windows
+    if ( aSalShlData.mbWNT )
+        return (sal_Unicode)nCharCode;
 
     sal_Char    aCharBuf[2];
     int         nCharLen;
@@ -3365,7 +3336,7 @@ static sal_Unicode ImplGetCharCode( SalF
         aCharBuf[0] = (sal_Char)nCharCode;
         nCharLen = 1;
     }
-    if ( ::MultiByteToWideChar( pFrame->maFrameData.mnInputCodePage,
+    if ( ::MultiByteToWideChar( pFrame->mnInputCodePage,
                                 MB_PRECOMPOSED,
                                 aCharBuf, nCharLen, &c, 1 ) )
         return (sal_Unicode)c;
@@ -3375,6 +3346,19 @@ static sal_Unicode ImplGetCharCode( SalF
 
 // -----------------------------------------------------------------------
 
+LanguageType WinSalFrame::GetInputLanguage()
+{
+    if( !mnInputLang )
+        ImplUpdateInputLang( this );
+
+    if( !mnInputLang )
+        return LANGUAGE_DONTKNOW;
+    else
+        return (LanguageType) mnInputLang;
+}
+
+// -----------------------------------------------------------------------
+
 static long ImplHandleKeyMsg( HWND hWnd, UINT nMsg,
                               WPARAM wParam, LPARAM lParam, LRESULT& rResult )
 {
@@ -3397,15 +3381,15 @@ static long ImplHandleKeyMsg( HWND hWnd,
         return 0;
     }
 
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( !pFrame )
         return 0;
 
     // Wir restaurieren den Background-Modus bei jeder Texteingabe,
     // da einige Tools wie RichWin uns diesen hin- und wieder umsetzen
-    if ( pFrame->maFrameData.mpGraphics &&
-         pFrame->maFrameData.mpGraphics->maGraphicsData.mhDC )
-        SetBkMode( pFrame->maFrameData.mpGraphics->maGraphicsData.mhDC, TRANSPARENT );
+    if ( pFrame->mpGraphics &&
+         pFrame->mpGraphics->mhDC )
+        SetBkMode( pFrame->mpGraphics->mhDC, TRANSPARENT );
 
     // determine modifiers
     if ( GetKeyState( VK_SHIFT ) & 0x8000 )
@@ -3430,7 +3414,13 @@ static long ImplHandleKeyMsg( HWND hWnd,
             // #101635# if zero is returned here for WM_SYSCHAR (ALT+<key>) Windows will beep
             // becaus this 'hotkey' was not processed -> better return 1
             // except for Alt-SPACE which should always open the sysmenu (#104616#)
-            return ( wParam == 0x20 ) ? 0 : 1;
+
+            // also return zero if a system menubar is available that might process this hotkey
+            // this also applies to the OLE inplace embedding where we are a child window
+            if( (GetWindowStyle( hWnd ) & WS_CHILD) || GetMenu( hWnd ) || (wParam == 0x20) )
+                return 0;
+            else
+                return 1;
         }
 
         // Backspace ignorieren wir als eigenstaendige Taste,
@@ -3466,10 +3456,8 @@ static long ImplHandleKeyMsg( HWND hWnd,
         aKeyEvt.mnRepeat    = nRepeat;
         nLastChar = 0;
         nLastVKChar = 0;
-        long nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                SALEVENT_KEYINPUT, &aKeyEvt );
-        pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                    SALEVENT_KEYUP, &aKeyEvt );
+        long nRet = pFrame->CallCallback( SALEVENT_KEYINPUT, &aKeyEvt );
+        pFrame->CallCallback( SALEVENT_KEYUP, &aKeyEvt );
         return nRet;
     }
  	// #i11583#, MCD, 2003-01-13, Support for WM_UNICHAR & Keyman 6.0; addition begins
@@ -3493,10 +3481,8 @@ static long ImplHandleKeyMsg( HWND hWnd,
 			sal_Unicode ch = (sal_Unicode) Uni_UTF32ToSurrogate1(wParam);
 	 		nLastChar = 0;
  			nLastVKChar = 0;
-	 		long nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                    SALEVENT_KEYINPUT, &aKeyEvt );
- 			pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                        SALEVENT_KEYUP, &aKeyEvt );
+	 		long nRet = pFrame->CallCallback( SALEVENT_KEYINPUT, &aKeyEvt );
+ 			pFrame->CallCallback( SALEVENT_KEYUP, &aKeyEvt );
 			wParam = (sal_Unicode) Uni_UTF32ToSurrogate2( wParam );
  		}
 
@@ -3504,10 +3490,8 @@ static long ImplHandleKeyMsg( HWND hWnd,
 
  		nLastChar = 0;
  		nLastVKChar = 0;
- 		long nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                SALEVENT_KEYINPUT, &aKeyEvt );
- 		pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-					                SALEVENT_KEYUP, &aKeyEvt );
+ 		long nRet = pFrame->CallCallback( SALEVENT_KEYINPUT, &aKeyEvt );
+ 		pFrame->CallCallback( SALEVENT_KEYUP, &aKeyEvt );
 
  		return nRet;
  	}
@@ -3551,8 +3535,7 @@ static long ImplHandleKeyMsg( HWND hWnd,
             if( !tmpCode )
                 bWaitForModKeyRelease = false;
 
-            return pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                               SALEVENT_KEYMODCHANGE, &aModEvt );
+            return pFrame->CallCallback( SALEVENT_KEYMODCHANGE, &aModEvt );
         }
         else
         {
@@ -3626,14 +3609,11 @@ static long ImplHandleKeyMsg( HWND hWnd,
                 aKeyEvt.mnCode     |= nModCode;
                 aKeyEvt.mnRepeat    = nRepeat;
                 bIgnoreCharMsg = bCharPeek;
-                long nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                        nEvent, &aKeyEvt );
-
+                long nRet = pFrame->CallCallback( nEvent, &aKeyEvt );
                 // independent part only reacts on keyup but Windows does not send
                 // keyup for VK_HANJA
                 if( aKeyEvt.mnCode == KEY_HANGUL_HANJA )
-                    nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                        SALEVENT_KEYUP, &aKeyEvt );
+                    nRet = pFrame->CallCallback( SALEVENT_KEYUP, &aKeyEvt );
 
                 bIgnoreCharMsg = FALSE;
 
@@ -3665,7 +3645,7 @@ long ImplHandleSalObjKeyMsg( HWND hWnd, 
 {
     if ( (nMsg == WM_KEYDOWN) || (nMsg == WM_KEYUP) )
     {
-        SalFrame* pFrame = GetWindowPtr( hWnd );
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
         if ( !pFrame )
             return 0;
 
@@ -3704,8 +3684,7 @@ long ImplHandleSalObjKeyMsg( HWND hWnd, 
                 aKeyEvt.mnTime      = GetMessageTime();
                 aKeyEvt.mnCode     |= nModCode;
                 aKeyEvt.mnRepeat    = nRepeat;
-                long nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                        nEvent, &aKeyEvt );
+                long nRet = pFrame->CallCallback( nEvent, &aKeyEvt );
                 return nRet;
             }
             else
@@ -3720,7 +3699,7 @@ long ImplHandleSalObjKeyMsg( HWND hWnd, 
 
 long ImplHandleSalObjSysCharMsg( HWND hWnd, WPARAM wParam, LPARAM lParam )
 {
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( !pFrame )
         return 0;
 
@@ -3751,10 +3730,8 @@ long ImplHandleSalObjSysCharMsg( HWND hW
     aKeyEvt.mnCode     |= nModCode;
     aKeyEvt.mnCharCode  = ImplGetCharCode( pFrame, cKeyCode );
     aKeyEvt.mnRepeat    = nRepeat;
-    long nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                            SALEVENT_KEYINPUT, &aKeyEvt );
-    pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                SALEVENT_KEYUP, &aKeyEvt );
+    long nRet = pFrame->CallCallback( SALEVENT_KEYINPUT, &aKeyEvt );
+    pFrame->CallCallback( SALEVENT_KEYUP, &aKeyEvt );
     return nRet;
 }
 
@@ -3770,13 +3747,13 @@ static void ImplHandlePaintMsg( HWND hWn
     // because other threads doesn't use the mutex from the main
     // thread --> see GetGraphics()
 
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( pFrame )
     {
         // Clip-Region muss zurueckgesetzt werden, da wir sonst kein
         // ordentliches Bounding-Rectangle bekommen
-        if ( pFrame->maFrameData.mpGraphics && pFrame->maFrameData.mpGraphics->maGraphicsData.mhRegion )
-            SelectClipRgn( pFrame->maFrameData.mpGraphics->maGraphicsData.mhDC, 0 );
+        if ( pFrame->mpGraphics && pFrame->mpGraphics->mhRegion )
+            SelectClipRgn( pFrame->mpGraphics->mhDC, 0 );
 
         // Laut Window-Doku soll man erst abfragen, ob ueberhaupt eine
         // Paint-Region anliegt
@@ -3792,10 +3769,10 @@ static void ImplHandlePaintMsg( HWND hWn
 
             // Paint
             // ClipRegion wieder herstellen
-            if ( pFrame->maFrameData.mpGraphics && pFrame->maFrameData.mpGraphics->maGraphicsData.mhRegion )
+            if ( pFrame->mpGraphics && pFrame->mpGraphics->mhRegion )
             {
-                SelectClipRgn( pFrame->maFrameData.mpGraphics->maGraphicsData.mhDC,
-                               pFrame->maFrameData.mpGraphics->maGraphicsData.mhRegion );
+                SelectClipRgn( pFrame->mpGraphics->mhDC,
+                               pFrame->mpGraphics->mhRegion );
             }
 
             if ( bMutex )
@@ -3810,8 +3787,7 @@ static void ImplHandlePaintMsg( HWND hWn
                 if( Application::GetSettings().GetLayoutRTL() )
                     aPEvt.mnBoundX = pFrame->maGeometry.nWidth-aPEvt.mnBoundWidth-aPEvt.mnBoundX;
 
-                pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                            SALEVENT_PAINT, &aPEvt );
+                pFrame->CallCallback( SALEVENT_PAINT, &aPEvt );
             }
             else
             {
@@ -3823,10 +3799,10 @@ static void ImplHandlePaintMsg( HWND hWn
         else
         {
             // ClipRegion wieder herstellen
-            if ( pFrame->maFrameData.mpGraphics && pFrame->maFrameData.mpGraphics->maGraphicsData.mhRegion )
+            if ( pFrame->mpGraphics && pFrame->mpGraphics->mhRegion )
             {
-                SelectClipRgn( pFrame->maFrameData.mpGraphics->maGraphicsData.mhDC,
-                               pFrame->maFrameData.mpGraphics->maGraphicsData.mhRegion );
+                SelectClipRgn( pFrame->mpGraphics->mhDC,
+                               pFrame->mpGraphics->mhRegion );
             }
         }
     }
@@ -3842,7 +3818,7 @@ static void ImplHandlePaintMsg2( HWND hW
     // Paint
     if ( ImplSalYieldMutexTryToAcquire() )
     {
-        SalFrame* pFrame = GetWindowPtr( hWnd );
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
         if ( pFrame )
         {
             SalPaintEvent aPEvt;
@@ -3855,8 +3831,7 @@ static void ImplHandlePaintMsg2( HWND hW
             if( Application::GetSettings().GetLayoutRTL() )
                 aPEvt.mnBoundX = pFrame->maGeometry.nWidth-aPEvt.mnBoundWidth-aPEvt.mnBoundX;
 
-            pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                        SALEVENT_PAINT, &aPEvt );
+            pFrame->CallCallback( SALEVENT_PAINT, &aPEvt );
         }
         ImplSalYieldMutexRelease();
         delete pRect;
@@ -3894,6 +3869,14 @@ static void UpdateFrameGeometry( HWND hW
 
     RECT aInnerRect;
     GetClientRect( hWnd, &aInnerRect );
+    if( aInnerRect.right )
+    {
+        // improve right decoration
+        aPt.x=aInnerRect.right;
+        aPt.y=aInnerRect.top;
+        ClientToScreen(hWnd, &aPt);
+        pFrame->maGeometry.nRightDecoration = aRect.right - aPt.x;
+    }
     if( aInnerRect.bottom ) // may be zero if window was not shown yet
         pFrame->maGeometry.nBottomDecoration += aRect.bottom - aPt.y - aInnerRect.bottom;
     else
@@ -3913,13 +3896,12 @@ static void UpdateFrameGeometry( HWND hW
 
 static void ImplCallMoveHdl( HWND hWnd )
 {
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( pFrame )
     {
-        pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                    SALEVENT_MOVE, 0 );
+        pFrame->CallCallback( SALEVENT_MOVE, 0 );
         // Um doppelte Paints von VCL und SAL zu vermeiden
-        //if ( IsWindowVisible( hWnd ) && !pFrame->maFrameData.mbInShow )
+        //if ( IsWindowVisible( hWnd ) && !pFrame->mbInShow )
         //    UpdateWindow( hWnd );
     }
 }
@@ -3928,11 +3910,10 @@ static void ImplCallMoveHdl( HWND hWnd )
 
 static void ImplCallClosePopupsHdl( HWND hWnd )
 {
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( pFrame )
     {
-        pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                    SALEVENT_CLOSEPOPUPS, 0 );
+        pFrame->CallCallback( SALEVENT_CLOSEPOPUPS, 0 );
     }
 }
 
@@ -3942,22 +3923,22 @@ static void ImplHandleMoveMsg( HWND hWnd
 {
     if ( ImplSalYieldMutexTryToAcquire() )
     {
-        SalFrame* pFrame = GetWindowPtr( hWnd );
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
         if ( pFrame )
         {
             UpdateFrameGeometry( hWnd, pFrame );
 
             if ( GetWindowStyle( hWnd ) & WS_VISIBLE )
-                pFrame->maFrameData.mbDefPos = FALSE;
+                pFrame->mbDefPos = FALSE;
 
             // Gegen moegliche Rekursionen sichern
-            if ( !pFrame->maFrameData.mbInMoveMsg )
+            if ( !pFrame->mbInMoveMsg )
             {
                 // Fenster im FullScreenModus wieder einpassen
-                pFrame->maFrameData.mbInMoveMsg = TRUE;
-                if ( pFrame->maFrameData.mbFullScreen )
+                pFrame->mbInMoveMsg = TRUE;
+                if ( pFrame->mbFullScreen )
                     ImplSalFrameFullScreenPos( pFrame );
-                pFrame->maFrameData.mbInMoveMsg = FALSE;
+                pFrame->mbInMoveMsg = FALSE;
             }
 
             // Status merken
@@ -3983,13 +3964,12 @@ static void ImplCallSizeHdl( HWND hWnd )
     // Solar-Semaphore beruecksichtigt werden
     if ( ImplSalYieldMutexTryToAcquire() )
     {
-        SalFrame* pFrame = GetWindowPtr( hWnd );
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
         if ( pFrame )
         {
-            pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                        SALEVENT_RESIZE, 0 );
+            pFrame->CallCallback( SALEVENT_RESIZE, 0 );
             // Um doppelte Paints von VCL und SAL zu vermeiden
-            if ( IsWindowVisible( hWnd ) && !pFrame->maFrameData.mbInShow )
+            if ( IsWindowVisible( hWnd ) && !pFrame->mbInShow )
                 UpdateWindow( hWnd );
         }
 
@@ -4005,13 +3985,13 @@ static void ImplHandleSizeMsg( HWND hWnd
 {
     if ( (wParam != SIZE_MAXSHOW) && (wParam != SIZE_MAXHIDE) )
     {
-        SalFrame* pFrame = GetWindowPtr( hWnd );
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
         if ( pFrame )
         {
             UpdateFrameGeometry( hWnd, pFrame );
 
-            pFrame->maFrameData.mnWidth  = (int)LOWORD(lParam);
-            pFrame->maFrameData.mnHeight = (int)HIWORD(lParam);
+            pFrame->mnWidth  = (int)LOWORD(lParam);
+            pFrame->mnHeight = (int)HIWORD(lParam);
             // Status merken
             ImplSaveFrameState( pFrame );
             // Call Hdl
@@ -4026,32 +4006,30 @@ static void ImplHandleFocusMsg( HWND hWn
 {
     if ( ImplSalYieldMutexTryToAcquire() )
     {
-        SalFrame* pFrame = GetWindowPtr( hWnd );
-        if ( pFrame && !SalFrame::mbInReparent )
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
+        if ( pFrame && !WinSalFrame::mbInReparent )
         {
             // Query the actual status
             if ( ::GetFocus() == hWnd )
             {
-                if ( IsWindowVisible( hWnd ) && !pFrame->maFrameData.mbInShow )
+                if ( IsWindowVisible( hWnd ) && !pFrame->mbInShow )
                     UpdateWindow( hWnd );
 
                 // Feststellen, ob wir IME unterstuetzen
-                if ( pFrame->maFrameData.mbIME && pFrame->maFrameData.mhDefIMEContext )
+                if ( pFrame->mbIME && pFrame->mhDefIMEContext )
                 {
                     UINT nImeProps = ImmGetProperty( GetKeyboardLayout( 0 ), IGP_PROPERTY );
 
-                    pFrame->maFrameData.mbSpezIME = (nImeProps & IME_PROP_SPECIAL_UI) != 0;
-                    pFrame->maFrameData.mbAtCursorIME = (nImeProps & IME_PROP_AT_CARET) != 0;
-                    pFrame->maFrameData.mbHandleIME = !pFrame->maFrameData.mbSpezIME;
+                    pFrame->mbSpezIME = (nImeProps & IME_PROP_SPECIAL_UI) != 0;
+                    pFrame->mbAtCursorIME = (nImeProps & IME_PROP_AT_CARET) != 0;
+                    pFrame->mbHandleIME = !pFrame->mbSpezIME;
                 }
 
-                pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                            SALEVENT_GETFOCUS, 0 );
+                pFrame->CallCallback( SALEVENT_GETFOCUS, 0 );
             }
             else
             {
-                pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                            SALEVENT_LOSEFOCUS, 0 );
+                pFrame->CallCallback( SALEVENT_LOSEFOCUS, 0 );
             }
         }
 
@@ -4067,11 +4045,10 @@ static void ImplHandleCloseMsg( HWND hWn
 {
     if ( ImplSalYieldMutexTryToAcquire() )
     {
-        SalFrame* pFrame = GetWindowPtr( hWnd );
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
         if ( pFrame )
         {
-            pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                        SALEVENT_CLOSE, 0 );
+            pFrame->CallCallback( SALEVENT_CLOSE, 0 );
         }
 
         ImplSalYieldMutexRelease();
@@ -4086,11 +4063,10 @@ static long ImplHandleShutDownMsg( HWND 
 {
     ImplSalYieldMutexAcquireWithWait();
     long        nRet = 0;
-    SalFrame*   pFrame = GetWindowPtr( hWnd );
+    WinSalFrame*   pFrame = GetWindowPtr( hWnd );
     if ( pFrame )
     {
-        nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                           SALEVENT_SHUTDOWN, 0 );
+        nRet = pFrame->CallCallback( SALEVENT_SHUTDOWN, 0 );
     }
     ImplSalYieldMutexRelease();
     return nRet;
@@ -4105,10 +4081,8 @@ static void ImplHandleSettingsChangeMsg(
 
     if ( nMsg == WM_DEVMODECHANGE )
         nSalEvent = SALEVENT_PRINTERCHANGED;
-#ifdef WM_DISPLAYCHANGE
     else if ( nMsg == WM_DISPLAYCHANGE )
         nSalEvent = SALEVENT_DISPLAYCHANGED;
-#endif
     else if ( nMsg == WM_FONTCHANGE )
         nSalEvent = SALEVENT_FONTCHANGED;
     else if ( nMsg == WM_TIMECHANGE )
@@ -4130,30 +4104,27 @@ static void ImplHandleSettingsChangeMsg(
         }
     }
 
-#ifdef WM_SETTINGCHANGE
     if ( nMsg == WM_SETTINGCHANGE )
     {
         if ( wParam == SPI_SETWHEELSCROLLLINES )
             aSalShlData.mnWheelScrollLines = ImplSalGetWheelScrollLines();
     }
-#endif
 
     if ( WM_SYSCOLORCHANGE == nMsg && GetSalData()->mhDitherPal )
         ImplUpdateSysColorEntries();
 
     ImplSalYieldMutexAcquireWithWait();
 
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( pFrame )
     {
         if ( (nMsg == WM_DISPLAYCHANGE) || (nMsg == WM_WININICHANGE) )
         {
-            if ( pFrame->maFrameData.mbFullScreen )
+            if ( pFrame->mbFullScreen )
                 ImplSalFrameFullScreenPos( pFrame );
         }
 
-        pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                    nSalEvent, 0 );
+        pFrame->CallCallback( nSalEvent, 0 );
     }
 
     ImplSalYieldMutexRelease();
@@ -4164,11 +4135,10 @@ static void ImplHandleSettingsChangeMsg(
 static void ImplHandleUserEvent( HWND hWnd, LPARAM lParam )
 {
     ImplSalYieldMutexAcquireWithWait();
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( pFrame )
     {
-        pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                    SALEVENT_USEREVENT, (void*)lParam );
+        pFrame->CallCallback( SALEVENT_USEREVENT, (void*)lParam );
     }
     ImplSalYieldMutexRelease();
 }
@@ -4187,19 +4157,18 @@ static void ImplHandleForcePalette( HWND
             return;
         }
 
-        SalFrame* pFrame = GetWindowPtr( hWnd );
-        if ( pFrame && pFrame->maFrameData.mpGraphics )
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
+        if ( pFrame && pFrame->mpGraphics )
         {
-            SalGraphics* pGraphics = pFrame->maFrameData.mpGraphics;
-            if ( pGraphics && pGraphics->maGraphicsData.mhDefPal )
+            WinSalGraphics* pGraphics = pFrame->mpGraphics;
+            if ( pGraphics && pGraphics->mhDefPal )
             {
-                SelectPalette( pGraphics->maGraphicsData.mhDC, hPal, FALSE );
-                if ( RealizePalette( pGraphics->maGraphicsData.mhDC ) )
+                SelectPalette( pGraphics->mhDC, hPal, FALSE );
+                if ( RealizePalette( pGraphics->mhDC ) )
                 {
                     InvalidateRect( hWnd, NULL, FALSE );
                     UpdateWindow( hWnd );
-                    pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                SALEVENT_DISPLAYCHANGED, 0 );
+                    pFrame->CallCallback( SALEVENT_DISPLAYCHANGED, 0 );
                 }
             }
         }
@@ -4241,9 +4210,9 @@ static LRESULT ImplHandlePalette( BOOL b
             ImplPostMessage( hWnd, SAL_MSG_POSTPALCHANGED, wParam, lParam );
     }
 
-    SalVirtualDevice*   pTempVD;
-    SalFrame*           pTempFrame;
-    SalGraphics*        pGraphics;
+    WinSalVirtualDevice*pTempVD;
+    WinSalFrame*        pTempFrame;
+    WinSalGraphics*     pGraphics;
     HDC                 hDC;
     HPALETTE            hOldPal;
     UINT                nCols;
@@ -4256,35 +4225,35 @@ static LRESULT ImplHandlePalette( BOOL b
     pTempVD = pSalData->mpFirstVD;
     while ( pTempVD )
     {
-        pGraphics = pTempVD->maVirDevData.mpGraphics;
-        if ( pGraphics->maGraphicsData.mhDefPal )
+        pGraphics = pTempVD->mpGraphics;
+        if ( pGraphics->mhDefPal )
         {
-            SelectPalette( pGraphics->maGraphicsData.mhDC,
-                           pGraphics->maGraphicsData.mhDefPal,
+            SelectPalette( pGraphics->mhDC,
+                           pGraphics->mhDefPal,
                            TRUE );
         }
-        pTempVD = pTempVD->maVirDevData.mpNext;
+        pTempVD = pTempVD->mpNext;
     }
     pTempFrame = pSalData->mpFirstFrame;
     while ( pTempFrame )
     {
-        pGraphics = pTempFrame->maFrameData.mpGraphics;
-        if ( pGraphics && pGraphics->maGraphicsData.mhDefPal )
+        pGraphics = pTempFrame->mpGraphics;
+        if ( pGraphics && pGraphics->mhDefPal )
         {
-            SelectPalette( pGraphics->maGraphicsData.mhDC,
-                           pGraphics->maGraphicsData.mhDefPal,
+            SelectPalette( pGraphics->mhDC,
+                           pGraphics->mhDefPal,
                            TRUE );
         }
-        pTempFrame = pTempFrame->maFrameData.mpNextFrame;
+        pTempFrame = pTempFrame->mpNextFrame;
     }
 
     // Palette neu realizen
-    SalFrame* pFrame = NULL;
+    WinSalFrame* pFrame = NULL;
     if ( bFrame )
         pFrame = GetWindowPtr( hWnd );
-    if ( pFrame && pFrame->maFrameData.mpGraphics )
+    if ( pFrame && pFrame->mpGraphics )
     {
-        hDC = pFrame->maFrameData.mpGraphics->maGraphicsData.mhDC;
+        hDC = pFrame->mpGraphics->mhDC;
         bStdDC = TRUE;
     }
     else
@@ -4306,28 +4275,28 @@ static LRESULT ImplHandlePalette( BOOL b
     pTempVD = pSalData->mpFirstVD;
     while ( pTempVD )
     {
-        pGraphics = pTempVD->maVirDevData.mpGraphics;
-        if ( pGraphics->maGraphicsData.mhDefPal )
+        pGraphics = pTempVD->mpGraphics;
+        if ( pGraphics->mhDefPal )
         {
-            SelectPalette( pGraphics->maGraphicsData.mhDC, hPal, TRUE );
-            RealizePalette( pGraphics->maGraphicsData.mhDC );
+            SelectPalette( pGraphics->mhDC, hPal, TRUE );
+            RealizePalette( pGraphics->mhDC );
         }
-        pTempVD = pTempVD->maVirDevData.mpNext;
+        pTempVD = pTempVD->mpNext;
     }
     pTempFrame = pSalData->mpFirstFrame;
     while ( pTempFrame )
     {
         if ( pTempFrame != pFrame )
         {
-            pGraphics = pTempFrame->maFrameData.mpGraphics;
-            if ( pGraphics && pGraphics->maGraphicsData.mhDefPal )
+            pGraphics = pTempFrame->mpGraphics;
+            if ( pGraphics && pGraphics->mhDefPal )
             {
-                SelectPalette( pGraphics->maGraphicsData.mhDC, hPal, TRUE );
-                if ( RealizePalette( pGraphics->maGraphicsData.mhDC ) )
+                SelectPalette( pGraphics->mhDC, hPal, TRUE );
+                if ( RealizePalette( pGraphics->mhDC ) )
                     bUpdate = TRUE;
             }
         }
-        pTempFrame = pTempFrame->maFrameData.mpNextFrame;
+        pTempFrame = pTempFrame->mpNextFrame;
     }
 
     // Wenn sich Farben geaendert haben, dann die Fenster updaten
@@ -4336,15 +4305,14 @@ static LRESULT ImplHandlePalette( BOOL b
         pTempFrame = pSalData->mpFirstFrame;
         while ( pTempFrame )
         {
-            pGraphics = pTempFrame->maFrameData.mpGraphics;
-            if ( pGraphics && pGraphics->maGraphicsData.mhDefPal )
+            pGraphics = pTempFrame->mpGraphics;
+            if ( pGraphics && pGraphics->mhDefPal )
             {
-                InvalidateRect( pTempFrame->maFrameData.mhWnd, NULL, FALSE );
-                UpdateWindow( pTempFrame->maFrameData.mhWnd );
-                pTempFrame->maFrameData.mpProc( pTempFrame->maFrameData.mpInst, pTempFrame,
-                                                SALEVENT_DISPLAYCHANGED, 0 );
+                InvalidateRect( pTempFrame->mhWnd, NULL, FALSE );
+                UpdateWindow( pTempFrame->mhWnd );
+                pTempFrame->CallCallback( SALEVENT_DISPLAYCHANGED, 0 );
             }
-            pTempFrame = pTempFrame->maFrameData.mpNextFrame;
+            pTempFrame = pTempFrame->mpNextFrame;
         }
     }
 
@@ -4367,12 +4335,12 @@ static int ImplHandleMinMax( HWND hWnd, 
 
     if ( ImplSalYieldMutexTryToAcquire() )
     {
-        SalFrame* pFrame = GetWindowPtr( hWnd );
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
         if ( pFrame )
         {
             MINMAXINFO* pMinMax = (MINMAXINFO*)lParam;
 
-            if ( pFrame->maFrameData.mbFullScreen )
+            if ( pFrame->mbFullScreen )
             {
                 int         nX;
                 int         nY;
@@ -4400,10 +4368,10 @@ static int ImplHandleMinMax( HWND hWnd, 
                 bRet = TRUE;
             }
 
-            if ( pFrame->maFrameData.mnMinWidth || pFrame->maFrameData.mnMinHeight )
+            if ( pFrame->mnMinWidth || pFrame->mnMinHeight )
             {
-                int nMinWidth   = pFrame->maFrameData.mnMinWidth;
-                int nMinHeight  = pFrame->maFrameData.mnMinHeight;
+                int nMinWidth   = pFrame->mnMinWidth;
+                int nMinHeight  = pFrame->mnMinHeight;
                 int nLeft;
                 int nTop;
                 int nRight;
@@ -4426,18 +4394,444 @@ static int ImplHandleMinMax( HWND hWnd, 
 
 // -----------------------------------------------------------------------
 
+// retrieves the SalMenuItem pointer from a hMenu
+// the pointer is stored in every item, so if no position
+// is specified we just use the first item (ie, pos=0)
+// if bByPosition is FALSE then nPos denotes a menu id instead of a position
+static WinSalMenuItem* ImplGetSalMenuItem( HMENU hMenu, UINT nPos, BOOL bByPosition=TRUE )
+{
+    DWORD err=0;
+
+    MENUITEMINFOW mi;
+    memset(&mi, 0, sizeof(mi));
+    mi.cbSize = sizeof( mi );
+    mi.fMask = MIIM_DATA;
+    if( !GetMenuItemInfoW( hMenu, nPos, bByPosition, &mi) )
+        err = GetLastError();
+
+    return (WinSalMenuItem *) mi.dwItemData;
+}
+
+// returns the index of the currently selected item if any or -1
+static int ImplGetSelectedIndex( HMENU hMenu )
+{
+    DWORD err=0;
+
+    MENUITEMINFOW mi;
+    memset(&mi, 0, sizeof(mi));
+    mi.cbSize = sizeof( mi );
+    mi.fMask = MIIM_STATE;
+    int n = GetMenuItemCount( hMenu );
+    if( n != -1 )
+    {
+        for(int i=0; i<n; i++ )
+        {
+            if( !GetMenuItemInfoW( hMenu, i, TRUE, &mi) )
+                err = GetLastError();
+            else
+            {
+                if( mi.fState & MFS_HILITE )
+                    return i;
+            }
+        }
+    }
+    return -1;
+}
+
+static int ImplMenuChar( HWND hWnd, WPARAM wParam, LPARAM lParam )
+{
+    int nRet = MNC_IGNORE;
+    HMENU hMenu = (HMENU) lParam;
+    String aMnemonic;
+    aMnemonic.AssignAscii("&");
+    aMnemonic.Append( (sal_Unicode) LOWORD(wParam) );
+    aMnemonic.ToLowerAscii();   // we only have ascii mnemonics
+
+    // search the mnemonic in the current menu
+    int nItemCount = GetMenuItemCount( hMenu );
+    int nFound = 0;
+    int idxFound = -1;
+    int idxSelected = ImplGetSelectedIndex( hMenu );
+    int idx = idxSelected != -1 ? idxSelected+1 : 0;    // if duplicate mnemonics cycle through menu
+    for( int i=0; i< nItemCount; i++, idx++ )
+    {
+        WinSalMenuItem* pSalMenuItem = ImplGetSalMenuItem( hMenu, idx % nItemCount );
+        if( !pSalMenuItem )
+            continue;
+        String aStr = pSalMenuItem->mText;
+        aStr.ToLowerAscii();
+        if( aStr.Search( aMnemonic ) != STRING_NOTFOUND)
+        {
+            if( idxFound == -1 )
+                idxFound = idx % nItemCount;
+            if( nFound++ )
+                break;  // duplicate found
+        }
+    }
+    if( nFound == 1 )
+        nRet = MAKELRESULT( idxFound, MNC_EXECUTE );
+    else
+        // duplicate mnemonics, just select the next occurence
+        nRet = MAKELRESULT( idxFound, MNC_SELECT );
+
+    return nRet;
+}
+
+static int ImplMeasureItem( HWND hWnd, WPARAM wParam, LPARAM lParam )
+{
+    int nRet = 0;
+    if( !wParam )
+    {
+        // request was sent by a menu
+        nRet = 1;
+        MEASUREITEMSTRUCT *pMI = (LPMEASUREITEMSTRUCT) lParam;
+        if( pMI->CtlType != ODT_MENU )
+            return 0;
+
+        WinSalMenuItem *pSalMenuItem = (WinSalMenuItem *) pMI->itemData;
+        if( !pSalMenuItem )
+            return 0;
+
+        HDC hdc = GetDC( hWnd );
+        SIZE strSize;
+
+        NONCLIENTMETRICS ncm;
+        memset( &ncm, 0, sizeof(ncm) );
+        ncm.cbSize = sizeof( ncm );
+        SystemParametersInfo( SPI_GETNONCLIENTMETRICS, 0, (PVOID) &ncm, 0 );
+
+        // Assume every menu item can be default and printed bold
+        //ncm.lfMenuFont.lfWeight = FW_BOLD;
+
+        HFONT hfntOld = (HFONT) SelectObject(hdc, (HFONT) CreateFontIndirect( &ncm.lfMenuFont ));
+
+        // menu text and accelerator
+        String aStr(pSalMenuItem->mText.GetBuffer() );
+        if( pSalMenuItem->mAccelText.Len() )
+        {
+            aStr.AppendAscii(" ");
+            aStr.Append( pSalMenuItem->mAccelText );
+        }
+        GetTextExtentPoint32W( hdc, (LPWSTR) aStr.GetBuffer(),
+                                aStr.Len(), &strSize );
+
+        // image
+        Size bmpSize( 16, 16 );
+        //if( !!pSalMenuItem->maBitmap )
+        //    bmpSize = pSalMenuItem->maBitmap.GetSizePixel();
+
+        // checkmark
+        Size checkSize( GetSystemMetrics( SM_CXMENUCHECK ), GetSystemMetrics( SM_CYMENUCHECK ) );
+
+        pMI->itemWidth = checkSize.Width() + 3 + bmpSize.Width() + 3 + strSize.cx;
+        pMI->itemHeight = max( max( checkSize.Height(), bmpSize.Height() ), strSize.cy );
+        pMI->itemHeight += 4;
+
+        DeleteObject( SelectObject(hdc, hfntOld) );
+        ReleaseDC( hWnd, hdc );
+    }
+
+    return nRet;
+}
+
+static int ImplDrawItem(HWND hWnd, WPARAM wParam, LPARAM lParam )
+{
+    int nRet = 0;
+    DWORD err = 0;
+    if( !wParam )
+    {
+        // request was sent by a menu
+        nRet = 1;
+        DRAWITEMSTRUCT *pDI = (LPDRAWITEMSTRUCT) lParam;
+        if( pDI->CtlType != ODT_MENU )
+            return 0;
+
+        WinSalMenuItem *pSalMenuItem = (WinSalMenuItem *) pDI->itemData;
+        if( !pSalMenuItem )
+            return 0;
+
+        COLORREF clrPrevText, clrPrevBkgnd;
+        HFONT hfntOld;
+        HBRUSH hbrOld;
+        BOOL	fChecked = pDI->itemState & ODS_CHECKED;
+        BOOL	fSelected = pDI->itemState & ODS_SELECTED;
+        BOOL	fDisabled = pDI->itemState & (ODS_DISABLED | ODS_GRAYED);
+
+        // Set the appropriate foreground and background colors.
+        RECT aRect = pDI->rcItem;
+
+        clrPrevBkgnd = SetBkColor( pDI->hDC, GetSysColor( COLOR_MENU ) );
+
+        if ( fDisabled )
+            clrPrevText = SetTextColor( pDI->hDC, GetSysColor( COLOR_GRAYTEXT ) );
+        else
+            clrPrevText = SetTextColor( pDI->hDC, GetSysColor( fSelected ? COLOR_HIGHLIGHTTEXT : COLOR_MENUTEXT ) );
+
+        DWORD colBackground = GetSysColor( fSelected ? COLOR_HIGHLIGHT : COLOR_MENU );
+        if ( fSelected )
+	        clrPrevBkgnd = SetBkColor( pDI->hDC, colBackground );
+        else
+	        clrPrevBkgnd = SetBkColor( pDI->hDC, colBackground );
+
+        hbrOld = (HBRUSH)SelectObject( pDI->hDC, CreateSolidBrush( GetBkColor( pDI->hDC ) ) );
+
+        // Fill background
+        if(!PatBlt( pDI->hDC, aRect.left, aRect.top, aRect.right-aRect.left, aRect.bottom-aRect.top, PATCOPY ))
+            err = GetLastError();
+
+        int lineHeight = aRect.bottom-aRect.top;
+
+        int x = aRect.left;
+        int y = aRect.top;
+
+        int checkWidth  = GetSystemMetrics( SM_CXMENUCHECK );
+        int checkHeight = GetSystemMetrics( SM_CYMENUCHECK );
+        if( fChecked )
+        {
+            RECT r;
+            r.left = 0;
+            r.top = 0;
+            r.right = checkWidth;
+            r.bottom = checkWidth;
+            HDC memDC = CreateCompatibleDC( pDI->hDC );
+            HBITMAP memBmp = CreateCompatibleBitmap( pDI->hDC, checkWidth, checkHeight );
+            HBITMAP hOldBmp = (HBITMAP) SelectObject( memDC, memBmp );
+            DrawFrameControl( memDC, &r, DFC_MENU, DFCS_MENUCHECK );
+            BitBlt( pDI->hDC, x, y+(lineHeight-checkHeight)/2, checkWidth, checkHeight, memDC, 0, 0, SRCAND );
+            DeleteObject( SelectObject( memDC, hOldBmp ) );
+            DeleteDC( memDC );
+        }
+        x += checkWidth+3;
+
+        //Size bmpSize = aBitmap.GetSizePixel();
+        Size bmpSize(16, 16);
+        if( !!pSalMenuItem->maBitmap )
+        {
+            Bitmap aBitmap( pSalMenuItem->maBitmap );
+
+            // set transparent pixels to background color
+            if( fDisabled )
+                colBackground = RGB(255,255,255);
+            aBitmap.Replace( Color( COL_LIGHTMAGENTA ), 
+                Color( GetRValue(colBackground),GetGValue(colBackground),GetBValue(colBackground) ), 0);
+
+            WinSalBitmap* pSalBmp = static_cast<WinSalBitmap*>(aBitmap.ImplGetImpBitmap()->ImplGetSalBitmap());
+			HGLOBAL hDrawDIB = pSalBmp->ImplGethDIB();
+
+            if( hDrawDIB )
+            {
+                PBITMAPINFO 		pBI = (PBITMAPINFO) GlobalLock( hDrawDIB );
+			    PBITMAPINFOHEADER	pBIH = (PBITMAPINFOHEADER) pBI;
+			    PBYTE				pBits = (PBYTE) pBI + *(DWORD*) pBI +
+										    pSalBmp->ImplGetDIBColorCount( hDrawDIB ) * sizeof( RGBQUAD );
+
+                HBITMAP hBmp = CreateDIBitmap( pDI->hDC, pBIH, CBM_INIT, pBits, pBI, DIB_RGB_COLORS );
+			    GlobalUnlock( hDrawDIB );
+
+                HBRUSH hbrIcon = CreateSolidBrush( GetSysColor( COLOR_GRAYTEXT ) );
+                DrawStateW( pDI->hDC, (HBRUSH)hbrIcon, (DRAWSTATEPROC)NULL, (LPARAM)hBmp, (WPARAM)0, 
+                    x, y+(lineHeight-bmpSize.Height())/2, bmpSize.Width(), bmpSize.Height(), 
+                     DST_BITMAP | (fDisabled ? (fSelected ? DSS_MONO : DSS_DISABLED) : DSS_NORMAL) );
+
+                DeleteObject( hbrIcon );
+                DeleteObject( hBmp );
+            }
+
+        }
+        x += bmpSize.Width() + 3;
+        aRect.left = x;
+
+        NONCLIENTMETRICS ncm;
+        memset( &ncm, 0, sizeof(ncm) );
+        ncm.cbSize = sizeof( ncm );
+        SystemParametersInfo( SPI_GETNONCLIENTMETRICS, 0, (PVOID) &ncm, 0 );
+
+        // Print default menu entry with bold font
+        //if ( pDI->itemState & ODS_DEFAULT )
+	    //    ncm.lfMenuFont.lfWeight = FW_BOLD;
+
+        hfntOld = (HFONT) SelectObject(pDI->hDC, (HFONT) CreateFontIndirect( &ncm.lfMenuFont ));
+
+        SIZE strSize;
+        String aStr( pSalMenuItem->mText.GetBuffer() );
+        GetTextExtentPoint32W( pDI->hDC, (LPWSTR) aStr.GetBuffer(),
+                                aStr.Len(), &strSize );
+
+        if(!DrawStateW( pDI->hDC, (HBRUSH)NULL, (DRAWSTATEPROC)NULL,
+            (LPARAM)(LPWSTR) aStr.GetBuffer(), 
+            (WPARAM)0, aRect.left, aRect.top + (lineHeight - strSize.cy)/2, 0, 0,
+            DST_PREFIXTEXT | (fDisabled && !fSelected ? DSS_DISABLED : DSS_NORMAL) ) )
+            err = GetLastError();
+
+        if( pSalMenuItem->mAccelText.Len() )
+        {
+            SIZE strSizeA;
+            aStr = pSalMenuItem->mAccelText;
+            GetTextExtentPoint32W( pDI->hDC, (LPWSTR) aStr.GetBuffer(),
+                                    aStr.Len(), &strSizeA );
+            TEXTMETRIC tm;
+            GetTextMetrics( pDI->hDC, &tm );
+
+            // position the accelerator string to the right but leave space for the 
+            // (potential) submenu arrow (tm.tmMaxCharWidth)
+            if(!DrawStateW( pDI->hDC, (HBRUSH)NULL, (DRAWSTATEPROC)NULL,
+                (LPARAM)(LPWSTR) aStr.GetBuffer(), 
+                (WPARAM)0, aRect.right-strSizeA.cx-tm.tmMaxCharWidth, aRect.top + (lineHeight - strSizeA.cy)/2, 0, 0,
+                DST_TEXT | (fDisabled && !fSelected ? DSS_DISABLED : DSS_NORMAL) ) )
+                err = GetLastError();
+        }
+
+        // Restore the original font and colors.
+        DeleteObject( SelectObject( pDI->hDC, hbrOld ) );
+        DeleteObject( SelectObject( pDI->hDC, hfntOld) );
+        SetTextColor(pDI->hDC, clrPrevText);
+        SetBkColor(pDI->hDC, clrPrevBkgnd);
+    }
+    return nRet;
+}
+
+static int ImplHandleMenuActivate( HWND hWnd, WPARAM wParam, LPARAM lParam )
+{
+    // Menu activation
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
+    if ( !pFrame )
+        return 0;
+
+    HMENU hMenu = (HMENU) wParam;
+    WORD nPos = LOWORD (lParam);
+    BOOL bWindowMenu = (BOOL) HIWORD(lParam);
+
+    // Send activate and deactivate together, so we have not keep track of opened menues
+    // this will be enough to have the menues updated correctly
+    SalMenuEvent aMenuEvt;
+    WinSalMenuItem *pSalMenuItem = ImplGetSalMenuItem( hMenu, 0 );
+    if( pSalMenuItem )
+        aMenuEvt.mpMenu = pSalMenuItem->mpMenu;
+    else
+        aMenuEvt.mpMenu = NULL;
+
+    long nRet = pFrame->CallCallback( SALEVENT_MENUACTIVATE, &aMenuEvt );
+    if( nRet )
+        nRet = pFrame->CallCallback( SALEVENT_MENUDEACTIVATE, &aMenuEvt );
+    if( nRet )
+        pFrame->mLastActivatedhMenu = hMenu;
+
+    return (nRet!=0);
+}
+
+static int ImplHandleMenuSelect( HWND hWnd, WPARAM wParam, LPARAM lParam )
+{
+    // Menu selection
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
+    if ( !pFrame )
+        return 0;
+
+    WORD nId = LOWORD(wParam);      // menu item or submenu index
+    WORD nFlags = HIWORD(wParam);
+    HMENU hMenu = (HMENU) lParam;
+    BOOL bByPosition = FALSE;
+    if( nFlags & MF_POPUP )
+        bByPosition = TRUE;
+
+    long nRet = 0;
+    if ( hMenu && !pFrame->mLastActivatedhMenu )
+    {
+        // we never activated a menu (ie, no WM_INITMENUPOPUP has occured yet) 
+        // which means this must be the menubar -> send activation/deactivation
+        SalMenuEvent aMenuEvt;
+        WinSalMenuItem *pSalMenuItem = ImplGetSalMenuItem( hMenu, nId, bByPosition );
+        if( pSalMenuItem )
+            aMenuEvt.mpMenu = pSalMenuItem->mpMenu;
+        else
+            aMenuEvt.mpMenu = NULL;
+
+        nRet = pFrame->CallCallback( SALEVENT_MENUACTIVATE, &aMenuEvt );
+        if( nRet )
+            nRet = pFrame->CallCallback( SALEVENT_MENUDEACTIVATE, &aMenuEvt );
+        if( nRet )
+            pFrame->mLastActivatedhMenu = hMenu;
+    }
+
+    if( !hMenu && nFlags == 0xFFFF )
+    {
+        // all menus are closed, reset activation logic
+        pFrame->mLastActivatedhMenu = NULL;
+    }
+
+    if( hMenu )
+    {
+        // hMenu must be saved, as it is not passed in WM_COMMAND which always occurs after a selection
+        // if a menu is closed due to a command selection then hMenu is NULL, but WM_COMMAND comes later
+        // so we must not overwrite it in this case
+        pFrame->mSelectedhMenu = hMenu; 
+
+        // send highlight event
+        if( nFlags & MF_POPUP )
+        {
+            // submenu selected
+            // wParam now carries an index instead of an id -> retrieve id
+            MENUITEMINFOW mi;
+            memset(&mi, 0, sizeof(mi));
+            mi.cbSize = sizeof( mi );
+            mi.fMask = MIIM_ID;
+            if( GetMenuItemInfoW( hMenu, LOWORD(wParam), TRUE, &mi) )
+                nId = mi.wID;
+        }
+
+        SalMenuEvent aMenuEvt;
+        aMenuEvt.mnId   = nId;
+        WinSalMenuItem *pSalMenuItem = ImplGetSalMenuItem( hMenu, nId, FALSE );
+        if( pSalMenuItem )
+            aMenuEvt.mpMenu = pSalMenuItem->mpMenu;
+        else
+            aMenuEvt.mpMenu = NULL;
+
+        nRet = pFrame->CallCallback( SALEVENT_MENUHIGHLIGHT, &aMenuEvt );
+    }
+
+    return (nRet != 0);
+}
+
+static int ImplHandleCommand( HWND hWnd, WPARAM wParam, LPARAM lParam )
+{
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
+    if ( !pFrame )
+        return 0;
+
+    DWORD err=0;
+    long nRet = 0;
+    if( !HIWORD(wParam) )
+    {
+        // Menu command
+        WORD nId = LOWORD(wParam);
+        if( nId )   // zero for separators
+        {
+            SalMenuEvent aMenuEvt;
+            aMenuEvt.mnId   = nId;
+            WinSalMenuItem *pSalMenuItem = ImplGetSalMenuItem( pFrame->mSelectedhMenu, nId, FALSE );
+            if( pSalMenuItem )
+                aMenuEvt.mpMenu = pSalMenuItem->mpMenu;
+            else
+                aMenuEvt.mpMenu = NULL;
+
+            nRet = pFrame->CallCallback( SALEVENT_MENUCOMMAND, &aMenuEvt );
+        }
+    }
+    return (nRet != 0);
+}
+
 static int ImplHandleSysCommand( HWND hWnd, WPARAM wParam, LPARAM lParam )
 {
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( !pFrame )
         return 0;
 
     WPARAM nCommand = wParam & 0xFFF0;
 
-    if ( pFrame->maFrameData.mbFullScreen )
+    if ( pFrame->mbFullScreen )
     {
-        WIN_BOOL    bMaximize = IsZoomed( pFrame->maFrameData.mhWnd );
-        WIN_BOOL    bMinimize = IsIconic( pFrame->maFrameData.mhWnd );
+        WIN_BOOL    bMaximize = IsZoomed( pFrame->mhWnd );
+        WIN_BOOL    bMinimize = IsIconic( pFrame->mhWnd );
         if ( (nCommand == SC_SIZE) ||
              (!bMinimize && (nCommand == SC_MOVE)) ||
              (!bMaximize && (nCommand == SC_MAXIMIZE)) ||
@@ -4450,6 +4844,11 @@ static int ImplHandleSysCommand( HWND hW
 
     if ( nCommand == SC_KEYMENU )
     {
+        // do not process SC_KEYMENU if we have a native menu
+        // Windows should handle this
+        if( GetMenu( hWnd ) )
+            return FALSE;   
+
         // Hier verarbeiten wir nur KeyMenu-Events fuer Alt um
         // den MenuBar zu aktivieren, oder wenn ein SysChild-Fenster
         // den Focus hat, da diese Alt+Tasten-Kombinationen nur
@@ -4477,10 +4876,8 @@ static int ImplHandleSysCommand( HWND hW
             aKeyEvt.mnCode      = KEY_MENU;
             aKeyEvt.mnCharCode  = 0;
             aKeyEvt.mnRepeat    = 0;
-            long nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                    SALEVENT_KEYINPUT, &aKeyEvt );
-            pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                        SALEVENT_KEYUP, &aKeyEvt );
+            long nRet = pFrame->CallCallback( SALEVENT_KEYINPUT, &aKeyEvt );
+            pFrame->CallCallback( SALEVENT_KEYUP, &aKeyEvt );
             return (nRet != 0);
         }
         else
@@ -4516,10 +4913,8 @@ static int ImplHandleSysCommand( HWND hW
                     aKeyEvt.mnCode     |= nModCode;
                     aKeyEvt.mnCharCode  = cKeyCode;
                     aKeyEvt.mnRepeat    = 0;
-                    long nRet = pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                            SALEVENT_KEYINPUT, &aKeyEvt );
-                    pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                SALEVENT_KEYUP, &aKeyEvt );
+                    long nRet = pFrame->CallCallback( SALEVENT_KEYINPUT, &aKeyEvt );
+                    pFrame->CallCallback( SALEVENT_KEYUP, &aKeyEvt );
                     return (nRet != 0);
                 }
             }
@@ -4536,24 +4931,27 @@ static void ImplHandleInputLangChange( H
     ImplSalYieldMutexAcquireWithWait();
 
     // Feststellen, ob wir IME unterstuetzen
-    SalFrame* pFrame = GetWindowPtr( hWnd );
-    if ( pFrame && pFrame->maFrameData.mbIME && pFrame->maFrameData.mhDefIMEContext )
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
+    if ( pFrame && pFrame->mbIME && pFrame->mhDefIMEContext )
     {
-        HWND    hWnd = pFrame->maFrameData.mhWnd;
+        HWND    hWnd = pFrame->mhWnd;
         HKL     hKL = (HKL)lParam;
         UINT    nImeProps = ImmGetProperty( hKL, IGP_PROPERTY );
 
-        pFrame->maFrameData.mbSpezIME = (nImeProps & IME_PROP_SPECIAL_UI) != 0;
-        pFrame->maFrameData.mbAtCursorIME = (nImeProps & IME_PROP_AT_CARET) != 0;
-        pFrame->maFrameData.mbHandleIME = !pFrame->maFrameData.mbSpezIME;
+        pFrame->mbSpezIME = (nImeProps & IME_PROP_SPECIAL_UI) != 0;
+        pFrame->mbAtCursorIME = (nImeProps & IME_PROP_AT_CARET) != 0;
+        pFrame->mbHandleIME = !pFrame->mbSpezIME;
     }
 
+    // trigger input language and codepage update
+    ImplUpdateInputLang( pFrame );
+
     ImplSalYieldMutexRelease();
 }
 
 // -----------------------------------------------------------------------
 
-static void ImplUpdateIMECursorPos( SalFrame* pFrame, HIMC hIMC )
+static void ImplUpdateIMECursorPos( WinSalFrame* pFrame, HIMC hIMC )
 {
     COMPOSITIONFORM aForm;
     memset( &aForm, 0, sizeof( aForm ) );
@@ -4561,8 +4959,7 @@ static void ImplUpdateIMECursorPos( SalF
     // Cursor-Position ermitteln und aus der die Default-Position fuer
     // das Composition-Fenster berechnen
     SalExtTextInputPosEvent aPosEvt;
-    pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                SALEVENT_EXTTEXTINPUTPOS, (void*)&aPosEvt );
+    pFrame->CallCallback( SALEVENT_EXTTEXTINPUTPOS, (void*)&aPosEvt );
     if ( (aPosEvt.mnX == -1) && (aPosEvt.mnY == -1) )
         aForm.dwStyle |= CFS_DEFAULT;
     else
@@ -4575,9 +4972,9 @@ static void ImplUpdateIMECursorPos( SalF
 
     // Because not all IME's use this values, we create
     // a Windows caret to force the Position from the IME
-    if ( GetFocus() == pFrame->maFrameData.mhWnd )
+    if ( GetFocus() == pFrame->mhWnd )
     {
-        CreateCaret( pFrame->maFrameData.mhWnd, 0,
+        CreateCaret( pFrame->mhWnd, 0,
                      aPosEvt.mnWidth, aPosEvt.mnHeight );
         SetCaretPos( aPosEvt.mnX, aPosEvt.mnY );
     }
@@ -4591,7 +4988,7 @@ static BOOL ImplHandleIMEStartCompositio
 
     ImplSalYieldMutexAcquireWithWait();
 
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( pFrame )
     {
         HIMC hIMC = ImmGetContext( hWnd );
@@ -4601,9 +4998,9 @@ static BOOL ImplHandleIMEStartCompositio
             ImmReleaseContext( hWnd, hIMC );
         }
 
-        if ( pFrame->maFrameData.mbHandleIME )
+        if ( pFrame->mbHandleIME )
         {
-            if ( pFrame->maFrameData.mbAtCursorIME )
+            if ( pFrame->mbAtCursorIME )
                 bDef = FALSE;
         }
     }
@@ -4615,7 +5012,7 @@ static BOOL ImplHandleIMEStartCompositio
 
 // -----------------------------------------------------------------------
 
-static BOOL ImplHandleIMECompositionInput( SalFrame* pFrame,
+static BOOL ImplHandleIMECompositionInput( WinSalFrame* pFrame,
                                            HIMC hIMC, LPARAM lParam )
 {
     BOOL bDef = TRUE;
@@ -4644,15 +5041,13 @@ static BOOL ImplHandleIMECompositionInpu
         }
 
         aEvt.mnCursorPos = aEvt.maText.Len();
-        pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                    SALEVENT_EXTTEXTINPUT, (void*)&aEvt );
-        pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                    SALEVENT_ENDEXTTEXTINPUT, (void*)NULL );
+        pFrame->CallCallback( SALEVENT_EXTTEXTINPUT, (void*)&aEvt );
+        pFrame->CallCallback( SALEVENT_ENDEXTTEXTINPUT, (void*)NULL );
         ImplUpdateIMECursorPos( pFrame, hIMC );
     }
 
     // If the IME doesn't support OnSpot input, then there is nothing to do
-    if ( !pFrame->maFrameData.mbAtCursorIME )
+    if ( !pFrame->mbAtCursorIME )
         return !bDef;
 
     // If we get new Composition data, then we handle this new input
@@ -4712,12 +5107,10 @@ static BOOL ImplHandleIMECompositionInpu
         if ( (nTextLen > 0) || !(lParam & GCS_RESULTSTR) )
         {
             // End the mode, if the last character is deleted
-            if ( !nTextLen && !pFrame->maFrameData.mbCandidateMode )
+            if ( !nTextLen && !pFrame->mbCandidateMode )
             {
-                pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                            SALEVENT_EXTTEXTINPUT, (void*)&aEvt );
-                pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                            SALEVENT_ENDEXTTEXTINPUT, (void*)NULL );
+                pFrame->CallCallback( SALEVENT_EXTTEXTINPUT, (void*)&aEvt );
+                pFrame->CallCallback( SALEVENT_ENDEXTTEXTINPUT, (void*)NULL );
             }
             else
             {
@@ -4732,13 +5125,12 @@ static BOOL ImplHandleIMECompositionInpu
                 else
                     aEvt.mnCursorPos = LOWORD( ImmGetCompositionStringW( hIMC, GCS_CURSORPOS, 0, 0 ) );
 
-                if ( pFrame->maFrameData.mbCandidateMode )
+                if ( pFrame->mbCandidateMode )
                     aEvt.mnCursorFlags |= SAL_EXTTEXTINPUT_CURSOR_INVISIBLE;
                 if ( lParam & CS_NOMOVECARET )
                     aEvt.mnCursorFlags |= SAL_EXTTEXTINPUT_CURSOR_OVERWRITE;
 
-                pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                            SALEVENT_EXTTEXTINPUT, (void*)&aEvt );
+                pFrame->CallCallback( SALEVENT_EXTTEXTINPUT, (void*)&aEvt );
             }
             ImplUpdateIMECursorPos( pFrame, hIMC );
         }
@@ -4757,17 +5149,17 @@ static BOOL ImplHandleIMEComposition( HW
     BOOL bDef = TRUE;
     ImplSalYieldMutexAcquireWithWait();
 
-    SalFrame* pFrame = GetWindowPtr( hWnd );
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
     if ( pFrame && (!lParam || (lParam & GCS_RESULTSTR)) )
     {
         // Wir restaurieren den Background-Modus bei jeder Texteingabe,
         // da einige Tools wie RichWin uns diesen hin- und wieder umsetzen
-        if ( pFrame->maFrameData.mpGraphics &&
-             pFrame->maFrameData.mpGraphics->maGraphicsData.mhDC )
-            SetBkMode( pFrame->maFrameData.mpGraphics->maGraphicsData.mhDC, TRANSPARENT );
+        if ( pFrame->mpGraphics &&
+             pFrame->mpGraphics->mhDC )
+            SetBkMode( pFrame->mpGraphics->mhDC, TRANSPARENT );
     }
 
-    if ( pFrame && pFrame->maFrameData.mbHandleIME )
+    if ( pFrame && pFrame->mbHandleIME )
     {
         if ( !lParam )
         {
@@ -4778,10 +5170,8 @@ static BOOL ImplHandleIMEComposition( HW
             aEvt.mnDeltaStart       = 0;
             aEvt.mbOnlyCursor       = FALSE;
             aEvt.mnCursorFlags      = 0;
-            pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                        SALEVENT_EXTTEXTINPUT, (void*)&aEvt );
-            pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                        SALEVENT_ENDEXTTEXTINPUT, (void*)NULL );
+            pFrame->CallCallback( SALEVENT_EXTTEXTINPUT, (void*)&aEvt );
+            pFrame->CallCallback( SALEVENT_ENDEXTTEXTINPUT, (void*)NULL );
         }
         else if ( lParam & (GCS_RESULTSTR | GCS_COMPSTR | GCS_COMPATTR | GCS_CURSORPOS) )
         {
@@ -4808,10 +5198,10 @@ static BOOL ImplHandleIMEEndComposition(
 
     ImplSalYieldMutexAcquireWithWait();
 
-    SalFrame* pFrame = GetWindowPtr( hWnd );
-    if ( pFrame && pFrame->maFrameData.mbHandleIME )
+    WinSalFrame* pFrame = GetWindowPtr( hWnd );
+    if ( pFrame && pFrame->mbHandleIME )
     {
-        if ( pFrame->maFrameData.mbAtCursorIME )
+        if ( pFrame->mbAtCursorIME )
             bDef = FALSE;
     }
 
@@ -4828,15 +5218,15 @@ static void ImplHandleIMENotify( HWND hW
     {
         ImplSalYieldMutexAcquireWithWait();
 
-        SalFrame* pFrame = GetWindowPtr( hWnd );
-        if ( pFrame && pFrame->maFrameData.mbHandleIME &&
-             pFrame->maFrameData.mbAtCursorIME )
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
+        if ( pFrame && pFrame->mbHandleIME &&
+             pFrame->mbAtCursorIME )
         {
             // Wir wollen den Cursor hiden
-            pFrame->maFrameData.mbCandidateMode = TRUE;
+            pFrame->mbCandidateMode = TRUE;
             ImplHandleIMEComposition( hWnd, GCS_CURSORPOS );
 
-            HWND hWnd = pFrame->maFrameData.mhWnd;
+            HWND hWnd = pFrame->mhWnd;
             HIMC hIMC = ImmGetContext( hWnd );
             if ( hIMC )
             {
@@ -4844,8 +5234,7 @@ static void ImplHandleIMENotify( HWND hW
                 if ( nBufLen >= 1 )
                 {
                     SalExtTextInputPosEvent aPosEvt;
-                    pFrame->maFrameData.mpProc( pFrame->maFrameData.mpInst, pFrame,
-                                                SALEVENT_EXTTEXTINPUTPOS, (void*)&aPosEvt );
+                    pFrame->CallCallback( SALEVENT_EXTTEXTINPUTPOS, (void*)&aPosEvt );
 
                     // Vertical !!!
                     CANDIDATEFORM aForm;
@@ -4869,9 +5258,9 @@ static void ImplHandleIMENotify( HWND hW
     else if ( wParam == (WPARAM)IMN_CLOSECANDIDATE )
     {
         ImplSalYieldMutexAcquireWithWait();
-        SalFrame* pFrame = GetWindowPtr( hWnd );
+        WinSalFrame* pFrame = GetWindowPtr( hWnd );
         if ( pFrame )
-            pFrame->maFrameData.mbCandidateMode = FALSE;
+            pFrame->mbCandidateMode = FALSE;
         ImplSalYieldMutexRelease();
     }
 }
@@ -4937,15 +5326,15 @@ LRESULT CALLBACK SalFrameWndProc( HWND h
         // Can also be used for the W-Version, because the struct
         // to access lpCreateParams is the same structure
         CREATESTRUCTA* pStruct = (CREATESTRUCTA*)lParam;
-        SalFrame* pFrame = (SalFrame*)pStruct->lpCreateParams;
+        WinSalFrame* pFrame = (WinSalFrame*)pStruct->lpCreateParams;
 		if ( pFrame != 0 )
 		{
 			SetWindowPtr( hWnd, pFrame );
 			// HWND schon hier setzen, da schon auf den Instanzdaten
 			// gearbeitet werden kann, wenn Messages waehrend
 			// CreateWindow() gesendet werden
-			pFrame->maFrameData.mhWnd = hWnd;
-			pFrame->maFrameData.maSysData.hWnd = hWnd;
+			pFrame->mhWnd = hWnd;
+			pFrame->maSysData.hWnd = hWnd;
 		}
         return 0;
     }
@@ -5026,6 +5415,24 @@ LRESULT CALLBACK SalFrameWndProc( HWND h
             }
             break;
 
+        case WM_COMMAND:
+            ImplSalYieldMutexAcquireWithWait();
+            rDef = !ImplHandleCommand( hWnd, wParam, lParam );
+            ImplSalYieldMutexRelease();
+            break;
+
+        case WM_INITMENUPOPUP:
+            ImplSalYieldMutexAcquireWithWait();
+            rDef = !ImplHandleMenuActivate( hWnd, wParam, lParam );
+            ImplSalYieldMutexRelease();
+            break;
+
+        case WM_MENUSELECT:
+            ImplSalYieldMutexAcquireWithWait();
+            rDef = !ImplHandleMenuSelect( hWnd, wParam, lParam );
+            ImplSalYieldMutexRelease();
+            break;
+
         case WM_SYSCOMMAND:
             ImplSalYieldMutexAcquireWithWait();
             nRet = ImplHandleSysCommand( hWnd, wParam, lParam );
@@ -5034,6 +5441,24 @@ LRESULT CALLBACK SalFrameWndProc( HWND h
                 rDef = FALSE;
             break;
 
+        case WM_MENUCHAR:
+            nRet = ImplMenuChar( hWnd, wParam, lParam );
+            if( nRet )
+                rDef = FALSE;
+            break;
+
+        case WM_MEASUREITEM:
+            nRet = ImplMeasureItem(hWnd, wParam, lParam);
+            if( nRet )
+                rDef = FALSE;
+            break;
+
+        case WM_DRAWITEM:
+            nRet = ImplDrawItem(hWnd, wParam, lParam);
+            if( nRet )
+                rDef = FALSE;
+            break;
+
         case WM_MOVE:
         case SAL_MSG_POSTMOVE:
             ImplHandleMoveMsg( hWnd );
@@ -5090,10 +5515,10 @@ LRESULT CALLBACK SalFrameWndProc( HWND h
         case WM_ENABLE:
             // #95133# a system dialog is opened/closed, using our app window as parent
             {
-                SalFrame* pFrame = GetWindowPtr( hWnd );
+                WinSalFrame* pFrame = GetWindowPtr( hWnd );
                 Window *pWin = NULL;
 	            if( pFrame )
-	                pWin = ((Window*)pFrame->maFrameData.mpInst);
+	                pWin = ((Window*)pFrame->GetInstance());
 
                 if( !wParam )
                 {
@@ -5174,14 +5599,8 @@ LRESULT CALLBACK SalFrameWndProc( HWND h
 			rDef = FALSE;
 			break;
 
-#ifdef WM_DISPLAYCHANGE
         case WM_DISPLAYCHANGE:
-#endif
-#ifdef WM_SETTINGCHANGE
         case WM_SETTINGCHANGE:
-#else
-        case WM_WININICHANGE:
-#endif
         case WM_DEVMODECHANGE:
         case WM_FONTCHANGE:
         case WM_SYSCOLORCHANGE:
@@ -5189,6 +5608,10 @@ LRESULT CALLBACK SalFrameWndProc( HWND h
             ImplHandleSettingsChangeMsg( hWnd, nMsg, wParam, lParam );
             break;
 
+        case WM_THEMECHANGED:
+            GetSalData()->mbThemeChanged = TRUE;
+            break;
+
         case SAL_MSG_USEREVENT:
             ImplHandleUserEvent( hWnd, lParam );
             rDef = FALSE;
@@ -5334,70 +5757,6 @@ BOOL ImplHandleGlobalMsg( HWND hWnd, UIN
     }
     else
         return FALSE;
-}
-
-// -----------------------------------------------------------------------
-
-bool GetSalSystemDisplayInfo( System::DisplayInfo& rInfo )
-{
-    RECT aRect;
-    ImplSalGetWorkArea( NULL, &aRect, NULL );
-
-    HDC hDC;
-    if( hDC = GetDC( NULL ) )
-    {
-        rInfo.nWidth    = aRect.right - aRect.left;
-        rInfo.nHeight   = aRect.bottom - aRect.top;
-        rInfo.nDepth    = GetDeviceCaps( hDC, BITSPIXEL );
-        ReleaseDC( NULL, hDC );
-        return true;
-    }
-    else
-        return false;
-}
-
-// -----------------------------------------------------------------------
-/* We have to map the button identifier to the identifier used by the Win32
-   Platform SDK to specify the default button for the MessageBox API.
-   The first dimension is the button combination, the second dimension
-   is the button identifier.
-*/
-static int DEFAULT_BTN_MAPPING_TABLE[][8] =
-{
-    //  Undefined        OK             CANCEL         ABORT          RETRY          IGNORE         YES             NO
-    { MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1 }, //OK
-    { MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON2, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1 }, //OK_CANCEL
-    { MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON2, MB_DEFBUTTON3, MB_DEFBUTTON1, MB_DEFBUTTON1 }, //ABORT_RETRY_IGNO
-    { MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON3, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON2 }, //YES_NO_CANCEL
-    { MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON2 }, //YES_NO
-    { MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON2, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1, MB_DEFBUTTON1 }  //RETRY_CANCEL
-};
-
-int ImplShowNativeMessageBox(const String& rTitle, const String& rMessage, int nButtonCombination, int nDefaultButton)
-{
-    DBG_ASSERT( nButtonCombination >= SALSYSTEM_SHOWNATIVEMSGBOX_BTNCOMBI_OK &&
-                nButtonCombination <= SALSYSTEM_SHOWNATIVEMSGBOX_BTNCOMBI_RETRY_CANCEL &&
-                nDefaultButton >= SALSYSTEM_SHOWNATIVEMSGBOX_BTN_OK &&
-                nDefaultButton <= SALSYSTEM_SHOWNATIVEMSGBOX_BTN_NO, "Invalid arguments!" );
-
-    int nFlags = MB_TASKMODAL | MB_SETFOREGROUND | MB_ICONWARNING | nButtonCombination;
-
-    if (nButtonCombination >= SALSYSTEM_SHOWNATIVEMSGBOX_BTNCOMBI_OK &&
-        nButtonCombination <= SALSYSTEM_SHOWNATIVEMSGBOX_BTNCOMBI_RETRY_CANCEL &&
-        nDefaultButton >= SALSYSTEM_SHOWNATIVEMSGBOX_BTN_OK &&
-        nDefaultButton <= SALSYSTEM_SHOWNATIVEMSGBOX_BTN_NO)
-        nFlags |= DEFAULT_BTN_MAPPING_TABLE[nButtonCombination][nDefaultButton];
-
-    //#107209 hide the splash screen if active
-    ImplSVData* pSVData = ImplGetSVData();
-    if (pSVData->mpIntroWindow)
-        pSVData->mpIntroWindow->Hide();
-
-    return MessageBoxW(
-        0,
-        rMessage.GetBuffer(),
-        rTitle.GetBuffer(),
-        nFlags);
 }
 
 // -----------------------------------------------------------------------
Index: vcl/win/source/window/salmenu.cxx
===================================================================
RCS file: vcl/win/source/window/salmenu.cxx
diff -N vcl/win/source/window/salmenu.cxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ vcl/win/source/window/salmenu.cxx	21 May 2004 16:29:40 -0000	1.7
@@ -0,0 +1,458 @@
+/*************************************************************************
+ *
+ *  
+ *
+ *  
+ *
+ *  
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef _SVWIN_H
+#include <tools/svwin.h>
+#endif
+
+#ifndef _SV_WINCOMP_HXX
+#include <wincomp.hxx>
+#endif
+#ifndef _SV_SALDATA_HXX
+#include <saldata.hxx>
+#endif
+#ifndef _SV_SALINST_H
+#include <salinst.h>
+#endif
+#ifndef _SV_SALGDI_HXX
+#include <salgdi.hxx>
+#endif
+#ifndef _SV_SALMENU_H
+#include <salmenu.h>
+#endif
+#ifndef _SV_MENU_HXX
+#include <menu.hxx>
+#endif
+#ifndef _SV_SYSDATA_HXX
+#include <sysdata.hxx>
+#endif
+#ifndef _SV_SALFRAME_H
+#include <salframe.h>
+#endif
+#ifndef _SV_IMPBMP_HXX
+#include <impbmp.hxx>
+#endif
+
+// uncomment the following line to have ownerdrawn menues, ie, with bitmaps
+// however, this is incompatible with OLE inplace editing
+// so it is not activated by default
+//#define OWNERDRAW
+
+static DWORD myerr=0;
+
+// =======================================================================
+
+// WinSalInst factory methods
+
+SalMenu* WinSalInstance::CreateMenu( BOOL bMenuBar )
+{
+    WinSalMenu *pSalMenu = new WinSalMenu();
+
+    pSalMenu->mbMenuBar = bMenuBar;
+    pSalMenu->mhWnd     = NULL;
+    if( bMenuBar )
+        pSalMenu->mhMenu = ::CreateMenu();
+    else
+        pSalMenu->mhMenu = ::CreatePopupMenu();
+
+    return pSalMenu;
+}
+
+void WinSalInstance::DestroyMenu( SalMenu* pSalMenu )
+{
+    delete pSalMenu;
+}
+
+
+SalMenuItem* WinSalInstance::CreateMenuItem( const SalItemParams* pItemData )
+{
+    if( !pItemData )
+        return NULL;
+
+    WinSalMenuItem *pSalMenuItem = new WinSalMenuItem();
+    memset( &pSalMenuItem->mInfo, 0, sizeof( MENUITEMINFOW ) );
+    pSalMenuItem->mInfo.cbSize = sizeof( MENUITEMINFOW );
+
+    if( pItemData->eType == MENUITEM_SEPARATOR )
+    {
+        // separator
+        pSalMenuItem->mInfo.fMask = MIIM_TYPE;
+        pSalMenuItem->mInfo.fType = MFT_SEPARATOR;
+    }
+    else
+    {
+        // item
+        pSalMenuItem->mText   = pItemData->aText;
+        pSalMenuItem->mpMenu  = pItemData->pMenu;
+        pSalMenuItem->maBitmap= !!pItemData->aImage ? pItemData->aImage.GetBitmap() : Bitmap();
+        pSalMenuItem->mnId    = pItemData->nId;
+
+        // 'translate' mnemonics
+        pSalMenuItem->mText.SearchAndReplace( '~', '&' );
+        
+        pSalMenuItem->mInfo.fMask = MIIM_TYPE | MIIM_STATE | MIIM_ID | MIIM_DATA;
+        pSalMenuItem->mInfo.fType = MFT_STRING; 
+#ifdef OWNERDRAW
+        if( pItemData->pMenu && !pItemData->pMenu->IsMenuBar() )
+            pSalMenuItem->mInfo.fType |= MFT_OWNERDRAW;
+        pSalMenuItem->mInfo.fState = MFS_ENABLED;
+#endif
+        pSalMenuItem->mInfo.dwTypeData = (LPWSTR) pSalMenuItem->mText.GetBuffer();
+        pSalMenuItem->mInfo.cch = pSalMenuItem->mText.Len();
+        
+        pSalMenuItem->mInfo.wID = pItemData->nId;
+        pSalMenuItem->mInfo.dwItemData = (ULONG_PTR) pSalMenuItem; // user data
+    }
+
+    return pSalMenuItem;
+}
+
+void WinSalInstance::DestroyMenuItem( SalMenuItem* pSalMenuItem )
+{
+    delete pSalMenuItem;
+}
+
+
+// =======================================================================
+
+static SalMenu* ImplFindMenuBar( SalMenu *pMenu )
+{
+    WinSalMenu *pMenuBar = static_cast<WinSalMenu*>(pMenu);
+    while( pMenuBar->mpParentMenu )
+        pMenuBar = pMenuBar->mpParentMenu;
+    if( pMenuBar->mbMenuBar )
+        return pMenuBar;
+    else
+        return NULL;
+}
+
+static void ImplDrawMenuBar( SalMenu *pMenu )
+{
+    if( pMenu->VisibleMenuBar() )
+    {
+        // redrawing the menubar all the time actually seems to be unnecessary (it just flickers)
+        /*
+        WinSalMenu *pMenuBar = ImplFindMenuBar( pMenu );
+        if( pMenuBar && pMenuBar->mhWnd )
+            ::DrawMenuBar( pMenuBar->mhWnd );
+            */
+    }
+}
+
+// =======================================================================
+
+
+/*
+ * WinSalMenu
+ */
+
+WinSalMenu::WinSalMenu()
+{
+    mhMenu       = NULL;
+    mbMenuBar    = FALSE;
+    mhWnd        = NULL;
+    mpParentMenu = NULL;
+}
+
+WinSalMenu::~WinSalMenu()
+{
+    // only required if not associated to a window...
+    ::DestroyMenu( mhMenu );
+}
+
+BOOL WinSalMenu::VisibleMenuBar()
+{
+    // The Win32 implementation never shows a native
+    // menubar. Thus, native menues are only visible
+    // when the menu is merged with an OLE container.
+    // The reason are missing tooltips, ownerdraw
+    // issues and accessibility which are better supported
+    // by VCL menues.
+    // Nevertheless, the native menues are always created
+    // and the application will properly react to all native
+    // menu messages.
+
+    return FALSE;
+}
+
+void WinSalMenu::SetFrame( const SalFrame *pFrame )
+{
+    if( pFrame )
+        mhWnd = static_cast<const WinSalFrame*>(pFrame)->mhWnd;
+    else
+        mhWnd = NULL;
+}
+
+void WinSalMenu::InsertItem( SalMenuItem* pSalMenuItem, unsigned nPos )
+{
+    if( pSalMenuItem )
+    {
+	WinSalMenuItem* pWItem = static_cast<WinSalMenuItem*>(pSalMenuItem);
+        if( nPos == MENU_APPEND )
+        {
+            nPos = ::GetMenuItemCount( mhMenu );
+            if( nPos == -1 )
+                return;
+        }
+
+        if(!::InsertMenuItemW( mhMenu, nPos, TRUE, &pWItem->mInfo ))
+            myerr = GetLastError();
+        else
+        {
+            pWItem->mpSalMenu = this;
+            ImplDrawMenuBar( this );
+        }
+    }
+}
+
+void WinSalMenu::RemoveItem( unsigned nPos )
+{
+    int num = ::GetMenuItemCount( mhMenu );
+    if( num != -1 && nPos < (unsigned)num )
+    {
+        WinSalMenuItem *pSalMenuItem = NULL;
+
+        MENUITEMINFOW mi;
+        memset( &mi, 0, sizeof(mi) );
+        mi.cbSize = sizeof( mi );
+        mi.fMask = MIIM_DATA;
+        if( !GetMenuItemInfoW( mhMenu, nPos, TRUE, &mi) )
+            myerr = GetLastError();
+        else
+            pSalMenuItem = (WinSalMenuItem *) mi.dwItemData;
+
+        if( !::RemoveMenu( mhMenu, nPos, MF_BYPOSITION ) )
+            myerr = GetLastError();
+        else
+        {
+            if( pSalMenuItem )
+                pSalMenuItem->mpSalMenu = NULL;
+            ImplDrawMenuBar( this );
+        }
+    }
+}
+
+void ImplRemoveItemById( WinSalMenu *pSalMenu, unsigned nItemId )
+{
+    if( !pSalMenu )
+        return;
+
+    WinSalMenuItem *pSalMenuItem = NULL;
+
+    MENUITEMINFOW mi;
+    memset( &mi, 0, sizeof(mi) );
+    mi.cbSize = sizeof( mi );
+    mi.fMask = MIIM_DATA;
+    if( !GetMenuItemInfoW( pSalMenu->mhMenu, nItemId, FALSE, &mi) )
+        myerr = GetLastError();
+    else
+        pSalMenuItem = (WinSalMenuItem *) mi.dwItemData;
+
+    if( !::RemoveMenu( pSalMenu->mhMenu, nItemId, MF_BYCOMMAND ) )
+        myerr = GetLastError();
+    else
+    {
+        if( pSalMenuItem )
+            pSalMenuItem->mpSalMenu = NULL;
+        ImplDrawMenuBar( pSalMenu );
+    }
+}
+
+void WinSalMenu::SetSubMenu( SalMenuItem* pSalMenuItem, SalMenu* pSubMenu, unsigned nPos )
+{
+    if( pSalMenuItem )
+    {
+	WinSalMenuItem* pWMenuItem = static_cast<WinSalMenuItem*>(pSalMenuItem);
+	WinSalMenu* pWSubMenu = static_cast<WinSalMenu*>(pSubMenu);
+        if( pWMenuItem->mInfo.hSubMenu )
+            ::DestroyMenu( pWMenuItem->mInfo.hSubMenu );
+
+        pWMenuItem->mInfo.fMask |= MIIM_SUBMENU;
+        if( !pSubMenu )
+            pWMenuItem->mInfo.hSubMenu = NULL;
+        else
+        {
+            pWMenuItem->mInfo.hSubMenu = pWSubMenu->mhMenu;
+            pWSubMenu->mpParentMenu = this;
+        }
+
+        int num = ::GetMenuItemCount( mhMenu );
+        if(!::SetMenuItemInfoW( mhMenu, nPos, TRUE, &pWMenuItem->mInfo ) )
+            myerr = GetLastError();
+        else
+            ImplDrawMenuBar( this );
+    }
+}
+
+void WinSalMenu::CheckItem( unsigned nPos, BOOL bCheck )
+{
+    if( -1 != ::CheckMenuItem( mhMenu, nPos, MF_BYPOSITION|(bCheck ? MF_CHECKED : MF_UNCHECKED) ) )
+        ImplDrawMenuBar( this );
+}
+
+void WinSalMenu::EnableItem( unsigned nPos, BOOL bEnable )
+{
+    if( -1 != ::EnableMenuItem( mhMenu, nPos, MF_BYPOSITION|(bEnable ? MF_ENABLED : (MF_DISABLED|MF_GRAYED) ) ) )
+        ImplDrawMenuBar( this );
+}
+
+void WinSalMenu::SetItemImage( unsigned nPos, SalMenuItem* pSalMenuItem, const Image& rImage )
+{
+    if( pSalMenuItem )
+    {
+	WinSalMenuItem* pWItem = static_cast<WinSalMenuItem*>(pSalMenuItem);
+        if( !!rImage )
+            pWItem->maBitmap = rImage.GetBitmap();
+        else
+            pWItem->maBitmap = Bitmap();
+    }
+}
+
+void WinSalMenu::SetItemText( unsigned nPos, SalMenuItem* pSalMenuItem, const XubString& rText )
+{
+    if( pSalMenuItem )
+    {
+	WinSalMenuItem* pWItem = static_cast<WinSalMenuItem*>(pSalMenuItem);
+        pWItem->mText = rText;
+        // 'translate' mnemonics
+        pWItem->mText.SearchAndReplace( '~', '&' );
+        pWItem->mInfo.fMask = MIIM_TYPE | MIIM_DATA;
+        pWItem->mInfo.fType = MFT_STRING;
+#ifdef OWNERDRAW
+        if( pWItem->mpMenu && !((Menu*) pWItem->mpMenu)->IsMenuBar() )
+            pWItem->mInfo.fType |= MFT_OWNERDRAW;
+#endif
+
+        // combine text and accelerator text
+        XubString aStr( pWItem->mText );
+        if( pWItem->mAccelText.Len() )
+        {
+            aStr.AppendAscii("\t");
+            aStr.Append( pWItem->mAccelText );
+        }
+        pWItem->mInfo.dwTypeData = (LPWSTR) aStr.GetBuffer();
+        pWItem->mInfo.cch = aStr.Len();
+
+        if(!::SetMenuItemInfoW( mhMenu, nPos, TRUE, &pWItem->mInfo ))
+            myerr = GetLastError();
+        else
+            ImplDrawMenuBar( this );
+    }
+}
+
+void WinSalMenu::SetAccelerator( unsigned nPos, SalMenuItem* pSalMenuItem, const KeyCode& rKeyCode, const XubString& rKeyName )
+{
+    if( pSalMenuItem )
+    {
+	WinSalMenuItem* pWItem = static_cast<WinSalMenuItem*>(pSalMenuItem);
+        pWItem->mAccelText = rKeyName;
+        pWItem->mInfo.fMask = MIIM_TYPE | MIIM_DATA;
+        pWItem->mInfo.fType = MFT_STRING;
+#ifdef OWNERDRAW
+        if( pWItem->mpMenu && !((Menu*)pWItem->mpMenu)->IsMenuBar() )
+            pWItem->mInfo.fType |= MFT_OWNERDRAW;
+#endif
+        // combine text and accelerator text
+        XubString aStr( pWItem->mText );
+        if( pWItem->mAccelText.Len() )
+        {
+            aStr.AppendAscii("\t");
+            aStr.Append( pWItem->mAccelText );
+        }
+        pWItem->mInfo.dwTypeData = (LPWSTR) aStr.GetBuffer();
+        pWItem->mInfo.cch = aStr.Len();
+
+        if(!::SetMenuItemInfoW( mhMenu, nPos, TRUE, &pWItem->mInfo ))
+            myerr = GetLastError();
+        else
+            ImplDrawMenuBar( this );
+    }
+}
+
+void WinSalMenu::GetSystemMenuData( SystemMenuData* pData )
+{
+    if( pData )
+        pData->hMenu = mhMenu;
+}
+
+// =======================================================================
+
+/*
+ * SalMenuItem
+ */
+
+
+WinSalMenuItem::WinSalMenuItem()
+{
+    memset( &mInfo, 0, sizeof( MENUITEMINFOW ) );
+    mpMenu = NULL;
+    mnId  = 0xFFFF;
+    mpSalMenu = NULL;
+}
+
+WinSalMenuItem::~WinSalMenuItem()
+{
+    if( mpSalMenu )
+        ImplRemoveItemById( mpSalMenu, mnId );
+}
+
+// -------------------------------------------------------------------
+
Index: vcl/win/source/window/salobj.cxx
===================================================================
RCS file: /cvs/gsl/vcl/vcl/win/source/window/salobj.cxx,v
retrieving revision 1.2
retrieving revision 1.4
diff -u -p -u -r1.2 -r1.4
--- vcl/win/source/window/salobj.cxx	7 Dec 2001 11:33:35 -0000	1.2
+++ vcl/win/source/window/salobj.cxx	6 Jan 2004 14:58:37 -0000	1.4
@@ -65,22 +65,20 @@
 #include <tools/svwin.h>
 #endif
 
-#define _SV_SALOBJ_CXX
-
 #ifndef _SV_WINCOMP_HXX
 #include <wincomp.hxx>
 #endif
 #ifndef _SV_SALDATA_HXX
 #include <saldata.hxx>
 #endif
-#ifndef _SV_SALINST_HXX
-#include <salinst.hxx>
+#ifndef _SV_SALINST_H
+#include <salinst.h>
 #endif
-#ifndef _SV_SALFRAME_HXX
-#include <salframe.hxx>
+#ifndef _SV_SALFRAME_H
+#include <salframe.h>
 #endif
-#ifndef _SV_SALOBJ_HXX
-#include <salobj.hxx>
+#ifndef _SV_SALOBJ_H
+#include <salobj.h>
 #endif
 
 #ifndef _DEBUG_HXX
@@ -110,16 +108,16 @@ static BOOL ImplIsSysWindowOrChild( HWND
 
 // -----------------------------------------------------------------------
 
-SalObject* ImplFindSalObject( HWND hWndChild )
+WinSalObject* ImplFindSalObject( HWND hWndChild )
 {
-	SalData*	pSalData = GetSalData();
-	SalObject*	pObject = pSalData->mpFirstObject;
+	SalData*        pSalData = GetSalData();
+	WinSalObject*	pObject = pSalData->mpFirstObject;
 	while ( pObject )
 	{
-		if ( ImplIsSysWindowOrChild( pObject->maObjectData.mhWndChild, hWndChild ) )
+		if ( ImplIsSysWindowOrChild( pObject->mhWndChild, hWndChild ) )
 			return pObject;
 
-		pObject = pObject->maObjectData.mpNextObject;
+		pObject = pObject->mpNextObject;
 	}
 
 	return NULL;
@@ -127,21 +125,21 @@ SalObject* ImplFindSalObject( HWND hWndC
 
 // -----------------------------------------------------------------------
 
-SalFrame* ImplFindSalObjectFrame( HWND hWnd )
+WinSalFrame* ImplFindSalObjectFrame( HWND hWnd )
 {
-	SalFrame* pFrame = NULL;
-	SalObject* pObject = ImplFindSalObject( hWnd );
+	WinSalFrame* pFrame = NULL;
+	WinSalObject* pObject = ImplFindSalObject( hWnd );
 	if ( pObject )
 	{
 		// Dazugehoerenden Frame suchen
-		HWND hWnd = ::GetParent( pObject->maObjectData.mhWnd );
+		HWND hWnd = ::GetParent( pObject->mhWnd );
 		pFrame = GetSalData()->mpFirstFrame;
 		while ( pFrame )
 		{
-			if ( pFrame->maFrameData.mhWnd == hWnd )
+			if ( pFrame->mhWnd == hWnd )
 				break;
 
-			pFrame = pFrame->maFrameData.mpNextFrame;
+			pFrame = pFrame->mpNextFrame;
 		}
 	}
 
@@ -164,21 +162,20 @@ LRESULT CALLBACK SalSysMsgProc( int nCod
 
 		// Testen, ob wir Daten fuer ein SalObject-Fenster behandeln
 		// muessen
-		SalObject* pObject;
+		WinSalObject* pObject;
 		if ( pData->message == WM_SETFOCUS )
 		{
 			pObject = ImplFindSalObject( pData->hwnd );
 			if ( pObject )
 			{
-				pObject->maObjectData.mhLastFocusWnd = pData->hwnd;
+				pObject->mhLastFocusWnd = pData->hwnd;
 				if ( ImplSalYieldMutexTryToAcquire() )
 				{
-					pObject->maObjectData.mpProc( pObject->maObjectData.mpInst, pObject,
-												  SALOBJ_EVENT_GETFOCUS, 0 );
+					pObject->CallCallback( SALOBJ_EVENT_GETFOCUS, 0 );
 					ImplSalYieldMutexRelease();
 				}
 				else
-					ImplPostMessage( pObject->maObjectData.mhWnd, SALOBJ_MSG_POSTFOCUS, 0, 0 );
+					ImplPostMessage( pObject->mhWnd, SALOBJ_MSG_POSTFOCUS, 0, 0 );
 			}
 		}
 		else if ( pData->message == WM_KILLFOCUS )
@@ -192,15 +189,14 @@ LRESULT CALLBACK SalSysMsgProc( int nCod
 				{
 					if ( ImplSalYieldMutexTryToAcquire() )
 					{
-						pObject->maObjectData.mpProc( pObject->maObjectData.mpInst, pObject,
-													  SALOBJ_EVENT_LOSEFOCUS, 0 );
+						pObject->CallCallback( SALOBJ_EVENT_LOSEFOCUS, 0 );
 						ImplSalYieldMutexRelease();
 					}
 					else
-						ImplPostMessage( pObject->maObjectData.mhWnd, SALOBJ_MSG_POSTFOCUS, 0, 0 );
+						ImplPostMessage( pObject->mhWnd, SALOBJ_MSG_POSTFOCUS, 0, 0 );
 				}
 				else
-					pObject->maObjectData.mhLastFocusWnd = (HWND)pData->wParam;
+					pObject->mhLastFocusWnd = (HWND)pData->wParam;
 			}
 		}
 	}
@@ -213,8 +209,8 @@ LRESULT CALLBACK SalSysMsgProc( int nCod
 BOOL ImplSalPreDispatchMsg( MSG* pMsg )
 {
 	// Used for Unicode and none Unicode
-	SalData*	pSalData = GetSalData();
-	SalObject*	pObject;
+	SalData*	    pSalData = GetSalData();
+	WinSalObject*	pObject;
 
 	if ( (pMsg->message == WM_LBUTTONDOWN) ||
 		 (pMsg->message == WM_RBUTTONDOWN) ||
@@ -223,7 +219,7 @@ BOOL ImplSalPreDispatchMsg( MSG* pMsg )
 		ImplSalYieldMutexAcquireWithWait();
 		pObject = ImplFindSalObject( pMsg->hwnd );
 		if ( pObject )
-			ImplPostMessage( pObject->maObjectData.mhWnd, SALOBJ_MSG_TOTOP, 0, 0 );
+			ImplPostMessage( pObject->mhWnd, SALOBJ_MSG_TOTOP, 0, 0 );
 		ImplSalYieldMutexRelease();
 	}
 
@@ -276,10 +272,10 @@ BOOL ImplSalPreDispatchMsg( MSG* pMsg )
 			{
 				if ( pMsg->hwnd == ::GetFocus() )
 				{
-					SalFrame* pFrame = ImplFindSalObjectFrame( pMsg->hwnd );
+					WinSalFrame* pFrame = ImplFindSalObjectFrame( pMsg->hwnd );
 					if ( pFrame )
 					{
-						if ( ImplHandleSalObjSysCharMsg( pFrame->maFrameData.mhWnd, pMsg->wParam, pMsg->lParam ) )
+						if ( ImplHandleSalObjSysCharMsg( pFrame->mhWnd, pMsg->wParam, pMsg->lParam ) )
 							bRet = TRUE;
 					}
 				}
@@ -300,8 +296,8 @@ BOOL ImplSalPreDispatchMsg( MSG* pMsg )
 void ImplSalPostDispatchMsg( MSG* pMsg, LRESULT /* nDispatchResult */ )
 {
 	// Used for Unicode and none Unicode
-	SalData*	pSalData = GetSalData();
-	SalFrame*	pFrame;
+	SalData*	    pSalData = GetSalData();
+	WinSalFrame*	pFrame;
 
 	if ( (pMsg->message == WM_KEYDOWN) || (pMsg->message == WM_KEYUP) )
 	{
@@ -313,7 +309,7 @@ void ImplSalPostDispatchMsg( MSG* pMsg, 
 				ImplSalYieldMutexAcquireWithWait();
 				pFrame = ImplFindSalObjectFrame( pMsg->hwnd );
 				if ( pFrame )
-					ImplHandleSalObjKeyMsg( pFrame->maFrameData.mhWnd, pMsg->message, pMsg->wParam, pMsg->lParam );
+					ImplHandleSalObjKeyMsg( pFrame->mhWnd, pMsg->message, pMsg->wParam, pMsg->lParam );
 				ImplSalYieldMutexRelease();
 			}
 		}
@@ -326,8 +322,8 @@ void ImplSalPostDispatchMsg( MSG* pMsg, 
 
 LRESULT CALLBACK SalSysObjWndProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam, int& rDef )
 {
-	SalObject*	pSysObj;
-	LRESULT 	nRet = 0;
+	WinSalObject*	pSysObj;
+	LRESULT      	nRet = 0;
 
 	switch( nMsg )
 	{
@@ -354,7 +350,7 @@ LRESULT CALLBACK SalSysObjWndProc( HWND 
 				ImplSalYieldMutexAcquireWithWait();
 				pSysObj = GetSalObjWindowPtr( hWnd );
 				if ( pSysObj )
-					pSysObj->maObjectData.mpProc( pSysObj->maObjectData.mpInst, pSysObj, SALOBJ_EVENT_TOTOP, 0 );
+					pSysObj->CallCallback( SALOBJ_EVENT_TOTOP, 0 );
 				ImplSalYieldMutexRelease();
 			}
 			}
@@ -368,8 +364,7 @@ LRESULT CALLBACK SalSysObjWndProc( HWND 
 			if ( ImplSalYieldMutexTryToAcquire() )
 			{
 				pSysObj = GetSalObjWindowPtr( hWnd );
-				pSysObj->maObjectData.mpProc( pSysObj->maObjectData.mpInst, pSysObj,
-											  SALOBJ_EVENT_TOTOP, 0 );
+				pSysObj->CallCallback( SALOBJ_EVENT_TOTOP, 0 );
 				ImplSalYieldMutexRelease();
 				rDef = FALSE;
 			}
@@ -387,8 +382,7 @@ LRESULT CALLBACK SalSysObjWndProc( HWND 
 					nEvent = SALOBJ_EVENT_GETFOCUS;
 				else
 					nEvent = SALOBJ_EVENT_LOSEFOCUS;
-				pSysObj->maObjectData.mpProc( pSysObj->maObjectData.mpInst, pSysObj,
-											  nEvent, 0 );
+				pSysObj->CallCallback( nEvent, 0 );
 				ImplSalYieldMutexRelease();
 			}
 			else
@@ -415,12 +409,12 @@ LRESULT CALLBACK SalSysObjWndProc( HWND 
 			// Can also be used for the W-Version, because the struct
 			// to access lpCreateParams is the same structure
 			CREATESTRUCTA* pStruct = (CREATESTRUCTA*)lParam;
-			pSysObj = (SalObject*)pStruct->lpCreateParams;
+			pSysObj = (WinSalObject*)pStruct->lpCreateParams;
 			SetSalObjWindowPtr( hWnd, pSysObj );
 			// HWND schon hier setzen, da schon auf den Instanzdaten
 			// gearbeitet werden kann, wenn Messages waehrend
 			// CreateWindow() gesendet werden
-			pSysObj->maObjectData.mhWnd = hWnd;
+			pSysObj->mhWnd = hWnd;
 			rDef = FALSE;
 			}
 			break;
@@ -495,7 +489,7 @@ LRESULT CALLBACK SalSysObjChildWndProcW(
 
 // =======================================================================
 
-SalObject* ImplSalCreateObject( SalInstance* pInst, SalFrame* pParent )
+SalObject* ImplSalCreateObject( WinSalInstance* pInst, WinSalFrame* pParent )
 {
 	SalData* pSalData = GetSalData();
 
@@ -577,7 +571,7 @@ SalObject* ImplSalCreateObject( SalInsta
 
 	if ( pSalData->mbObjClassInit )
 	{
-		SalObject* pObject = new SalObject;
+		WinSalObject* pObject = new WinSalObject;
 		HWND		hWnd;
 		HWND		hWndChild = 0;
         // #95301# shockwave plugin has bug; expects ASCII functions to be used
@@ -585,30 +579,30 @@ SalObject* ImplSalCreateObject( SalInsta
 		{
 			hWnd = CreateWindowExW( 0, SAL_OBJECT_CLASSNAMEW, L"",
 									WS_CHILD, 0, 0, 0, 0,
-									pParent->maFrameData.mhWnd, 0,
-									pInst->maInstData.mhInst, (void*)pObject );
+									pParent->mhWnd, 0,
+									pInst->mhInst, (void*)pObject );
 			if ( hWnd )
 			{
 				hWndChild = CreateWindowExW( 0, SAL_OBJECT_CHILDCLASSNAMEW, L"",
 											 WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE,
 											 0, 0, 0, 0,
 											 hWnd, 0,
-											 pInst->maInstData.mhInst, NULL );
+											 pInst->mhInst, NULL );
 			}
 		}
 		else
 		{
 			hWnd = CreateWindowExA( 0, SAL_OBJECT_CLASSNAMEA, "",
 									WS_CHILD, 0, 0, 0, 0,
-									pParent->maFrameData.mhWnd, 0,
-									pInst->maInstData.mhInst, (void*)pObject );
+									pParent->mhWnd, 0,
+									pInst->mhInst, (void*)pObject );
 			if ( hWnd )
 			{
 				hWndChild = CreateWindowExA( 0, SAL_OBJECT_CHILDCLASSNAMEA, "",
 											 WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE,
 											 0, 0, 0, 0,
 											 hWnd, 0,
-											 pInst->maInstData.mhInst, NULL );
+											 pInst->mhInst, NULL );
 			}
 		}
 		if ( !hWndChild )
@@ -619,9 +613,9 @@ SalObject* ImplSalCreateObject( SalInsta
 
 		if ( hWnd )
 		{
-			pObject->maObjectData.mhWnd 			= hWnd;
-			pObject->maObjectData.mhWndChild		= hWndChild;
-			pObject->maObjectData.maSysData.hWnd	= hWndChild;
+			pObject->mhWnd 			= hWnd;
+			pObject->mhWndChild		= hWndChild;
+			pObject->maSysData.hWnd	= hWndChild;
 			return pObject;
 		}
 	}
@@ -631,40 +625,31 @@ SalObject* ImplSalCreateObject( SalInsta
 
 // =======================================================================
 
-long ImplSalObjCallbackDummy( void*, SalObject*, USHORT, const void* )
-{
-	return 0;
-}
-
-// =======================================================================
-
-SalObject::SalObject()
+WinSalObject::WinSalObject()
 {
 	SalData* pSalData = GetSalData();
 
-	maObjectData.mhWnd				= 0;
-	maObjectData.mhWndChild 		= 0;
-	maObjectData.mhLastFocusWnd 	= 0;
-	maObjectData.maSysData.nSize	= sizeof( SystemEnvData );
-	maObjectData.mpInst 			= NULL;
-	maObjectData.mpProc 			= ImplSalObjCallbackDummy;
-	maObjectData.mpStdClipRgnData	= NULL;
+	mhWnd			= 0;
+	mhWndChild 		= 0;
+	mhLastFocusWnd 	= 0;
+	maSysData.nSize	= sizeof( SystemEnvData );
+	mpStdClipRgnData	= NULL;
 
 	// Insert object in objectlist
-	maObjectData.mpNextObject = pSalData->mpFirstObject;
+	mpNextObject = pSalData->mpFirstObject;
 	pSalData->mpFirstObject = this;
 }
 
 // -----------------------------------------------------------------------
 
-SalObject::~SalObject()
+WinSalObject::~WinSalObject()
 {
 	SalData* pSalData = GetSalData();
 
 	// remove frame from framelist
 	if ( this == pSalData->mpFirstObject )
 	{
-		pSalData->mpFirstObject = maObjectData.mpNextObject;
+		pSalData->mpFirstObject = mpNextObject;
 
 		// Wenn letztes SalObject, dann Hook wieder entfernen
 		if ( !pSalData->mpFirstObject )
@@ -672,23 +657,23 @@ SalObject::~SalObject()
 	}
 	else
 	{
-		SalObject* pTempObject = pSalData->mpFirstObject;
-		while ( pTempObject->maObjectData.mpNextObject != this )
-			pTempObject = pTempObject->maObjectData.mpNextObject;
+		WinSalObject* pTempObject = pSalData->mpFirstObject;
+		while ( pTempObject->mpNextObject != this )
+			pTempObject = pTempObject->mpNextObject;
 
-		pTempObject->maObjectData.mpNextObject = maObjectData.mpNextObject;
+		pTempObject->mpNextObject = mpNextObject;
 	}
 
 	// Cache-Daten zerstoeren
-	if ( maObjectData.mpStdClipRgnData )
-		delete maObjectData.mpStdClipRgnData;
+	if ( mpStdClipRgnData )
+		delete mpStdClipRgnData;
 
-	HWND hWndParent = ::GetParent( maObjectData.mhWnd );
+	HWND hWndParent = ::GetParent( mhWnd );
 
-	if ( maObjectData.mhWndChild )
-		DestroyWindow( maObjectData.mhWndChild );
-	if ( maObjectData.mhWnd )
-		DestroyWindow( maObjectData.mhWnd );
+	if ( mhWndChild )
+		DestroyWindow( mhWndChild );
+	if ( mhWnd )
+		DestroyWindow( mhWnd );
 
 	// Palette wieder zuruecksetzen, wenn kein externes Child-Fenster
 	// mehr vorhanden ist, da diese unsere Palette ueberschrieben haben
@@ -701,56 +686,56 @@ SalObject::~SalObject()
 
 // -----------------------------------------------------------------------
 
-void SalObject::ResetClipRegion()
+void WinSalObject::ResetClipRegion()
 {
-	SetWindowRgn( maObjectData.mhWnd, 0, TRUE );
+	SetWindowRgn( mhWnd, 0, TRUE );
 }
 
 // -----------------------------------------------------------------------
 
-USHORT SalObject::GetClipRegionType()
+USHORT WinSalObject::GetClipRegionType()
 {
 	return SAL_OBJECT_CLIP_INCLUDERECTS;
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::BeginSetClipRegion( ULONG nRectCount )
+void WinSalObject::BeginSetClipRegion( ULONG nRectCount )
 {
 	ULONG nRectBufSize = sizeof(RECT)*nRectCount;
 	if ( nRectCount < SAL_CLIPRECT_COUNT )
 	{
-		if ( !maObjectData.mpStdClipRgnData )
-			maObjectData.mpStdClipRgnData = (RGNDATA*)new BYTE[sizeof(RGNDATA)-1+(SAL_CLIPRECT_COUNT*sizeof(RECT))];
-		maObjectData.mpClipRgnData = maObjectData.mpStdClipRgnData;
+		if ( !mpStdClipRgnData )
+			mpStdClipRgnData = (RGNDATA*)new BYTE[sizeof(RGNDATA)-1+(SAL_CLIPRECT_COUNT*sizeof(RECT))];
+		mpClipRgnData = mpStdClipRgnData;
 	}
 	else
-		maObjectData.mpClipRgnData = (RGNDATA*)new BYTE[sizeof(RGNDATA)-1+nRectBufSize];
-	maObjectData.mpClipRgnData->rdh.dwSize	  = sizeof( RGNDATAHEADER );
-	maObjectData.mpClipRgnData->rdh.iType	  = RDH_RECTANGLES;
-	maObjectData.mpClipRgnData->rdh.nCount	  = nRectCount;
-	maObjectData.mpClipRgnData->rdh.nRgnSize  = nRectBufSize;
-	SetRectEmpty( &(maObjectData.mpClipRgnData->rdh.rcBound) );
-	maObjectData.mpNextClipRect 		  = (RECT*)(&(maObjectData.mpClipRgnData->Buffer));
-	maObjectData.mbFirstClipRect		  = TRUE;
+		mpClipRgnData = (RGNDATA*)new BYTE[sizeof(RGNDATA)-1+nRectBufSize];
+	mpClipRgnData->rdh.dwSize	  = sizeof( RGNDATAHEADER );
+	mpClipRgnData->rdh.iType	  = RDH_RECTANGLES;
+	mpClipRgnData->rdh.nCount	  = nRectCount;
+	mpClipRgnData->rdh.nRgnSize  = nRectBufSize;
+	SetRectEmpty( &(mpClipRgnData->rdh.rcBound) );
+	mpNextClipRect 		  = (RECT*)(&(mpClipRgnData->Buffer));
+	mbFirstClipRect		  = TRUE;
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::UnionClipRegion( long nX, long nY, long nWidth, long nHeight )
+void WinSalObject::UnionClipRegion( long nX, long nY, long nWidth, long nHeight )
 {
-	RECT*		pRect = maObjectData.mpNextClipRect;
-	RECT*		pBoundRect = &(maObjectData.mpClipRgnData->rdh.rcBound);
+	RECT*		pRect = mpNextClipRect;
+	RECT*		pBoundRect = &(mpClipRgnData->rdh.rcBound);
 	long		nRight = nX + nWidth;
 	long		nBottom = nY + nHeight;
 
-	if ( maObjectData.mbFirstClipRect )
+	if ( mbFirstClipRect )
 	{
 		pBoundRect->left	= nX;
 		pBoundRect->top 	= nY;
 		pBoundRect->right	= nRight;
 		pBoundRect->bottom	= nBottom;
-		maObjectData.mbFirstClipRect = FALSE;
+		mbFirstClipRect = FALSE;
 	}
 	else
 	{
@@ -771,105 +756,94 @@ void SalObject::UnionClipRegion( long nX
 	pRect->top		= (int)nY;
 	pRect->right	= (int)nRight;
 	pRect->bottom	= (int)nBottom;
-	maObjectData.mpNextClipRect++;
+	mpNextClipRect++;
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::EndSetClipRegion()
+void WinSalObject::EndSetClipRegion()
 {
 	HRGN hRegion;
 
 	// Aus den Region-Daten muessen wir jetzt eine ClipRegion erzeugen
-	if ( maObjectData.mpClipRgnData->rdh.nCount == 1 )
+	if ( mpClipRgnData->rdh.nCount == 1 )
 	{
-		RECT* pRect = &(maObjectData.mpClipRgnData->rdh.rcBound);
+		RECT* pRect = &(mpClipRgnData->rdh.rcBound);
 		hRegion = CreateRectRgn( pRect->left, pRect->top,
 								 pRect->right, pRect->bottom );
 	}
 	else
 	{
-		ULONG nSize = maObjectData.mpClipRgnData->rdh.nRgnSize+sizeof(RGNDATAHEADER);
-		hRegion = ExtCreateRegion( NULL, nSize, maObjectData.mpClipRgnData );
-		if ( maObjectData.mpClipRgnData != maObjectData.mpStdClipRgnData )
-			delete maObjectData.mpClipRgnData;
+		ULONG nSize = mpClipRgnData->rdh.nRgnSize+sizeof(RGNDATAHEADER);
+		hRegion = ExtCreateRegion( NULL, nSize, mpClipRgnData );
+		if ( mpClipRgnData != mpStdClipRgnData )
+			delete mpClipRgnData;
 	}
 
 	DBG_ASSERT( hRegion, "SalObject::EndSetClipRegion() - Can't create ClipRegion" );
-	SetWindowRgn( maObjectData.mhWnd, hRegion, TRUE );
+	SetWindowRgn( mhWnd, hRegion, TRUE );
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::SetPosSize( long nX, long nY, long nWidth, long nHeight )
+void WinSalObject::SetPosSize( long nX, long nY, long nWidth, long nHeight )
 {
 	ULONG nStyle = 0;
-	BOOL bVisible = (GetWindowStyle( maObjectData.mhWnd ) & WS_VISIBLE) != 0;
+	BOOL bVisible = (GetWindowStyle( mhWnd ) & WS_VISIBLE) != 0;
 	if ( bVisible )
 	{
-		ShowWindow( maObjectData.mhWnd, SW_HIDE );
+		ShowWindow( mhWnd, SW_HIDE );
 		nStyle |= SWP_SHOWWINDOW;
 	}
-	SetWindowPos( maObjectData.mhWnd, 0,
+	SetWindowPos( mhWnd, 0,
 				  (int)nX, (int)nY, (int)nWidth, (int)nHeight,
 				  SWP_NOZORDER | SWP_NOACTIVATE | nStyle );
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::Show( BOOL bVisible )
+void WinSalObject::Show( BOOL bVisible )
 {
 	if ( bVisible )
-		ShowWindow( maObjectData.mhWnd, SW_SHOWNORMAL );
+		ShowWindow( mhWnd, SW_SHOWNORMAL );
 	else
-		ShowWindow( maObjectData.mhWnd, SW_HIDE );
+		ShowWindow( mhWnd, SW_HIDE );
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::Enable( BOOL bEnable )
+void WinSalObject::Enable( BOOL bEnable )
 {
-	EnableWindow( maObjectData.mhWnd, bEnable );
+	EnableWindow( mhWnd, bEnable );
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::GrabFocus()
+void WinSalObject::GrabFocus()
 {
-	if ( maObjectData.mhLastFocusWnd &&
-		 IsWindow( maObjectData.mhLastFocusWnd ) &&
-		 ImplIsSysWindowOrChild( maObjectData.mhWndChild, maObjectData.mhLastFocusWnd ) )
-		::SetFocus( maObjectData.mhLastFocusWnd );
+	if ( mhLastFocusWnd &&
+		 IsWindow( mhLastFocusWnd ) &&
+		 ImplIsSysWindowOrChild( mhWndChild, mhLastFocusWnd ) )
+		::SetFocus( mhLastFocusWnd );
 	else
-		::SetFocus( maObjectData.mhWndChild );
+		::SetFocus( mhWndChild );
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::SetBackground()
+void WinSalObject::SetBackground()
 {
 }
 
 // -----------------------------------------------------------------------
 
-void SalObject::SetBackground( SalColor nSalColor )
+void WinSalObject::SetBackground( SalColor nSalColor )
 {
 }
 
 // -----------------------------------------------------------------------
 
-const SystemEnvData* SalObject::GetSystemData() const
+const SystemEnvData* WinSalObject::GetSystemData() const
 {
-	return &maObjectData.maSysData;
-}
-
-// -----------------------------------------------------------------------
-
-void SalObject::SetCallback( void* pInst, SALOBJECTPROC pProc )
-{
-	maObjectData.mpInst = pInst;
-	if ( pProc )
-		maObjectData.mpProc = pProc;
-	else
-		maObjectData.mpProc = ImplSalObjCallbackDummy;
+	return &maSysData;
 }
