--- vcl/source/gdi/fontcvt.cxx	2005-08-27 21:50:54.000000000 +0530
+++ vcl/source/gdi/fontcvt.cxx	2005-09-01 19:14:15.000000000 +0530
@@ -1150,7 +1150,7 @@ ExtraTable aSymbolExtraTab2[] =
     {0x221A, 0xD6}, {0x22C5, 0xD7}, {0x00AC, 0xD8}, {0x2227, 0xD9},
     {0x2228, 0xDA}, {0x21D4, 0xDB}, {0x21D0, 0xDC}, {0x21D2, 0xDE},
     {0x2329, 0xE1}, {0x2211, 0xE5}, {0x232A, 0xF1}, {0x222B, 0xF2},
-    {0x2320, 0xF3}, {0x2321, 0xF5}
+    {0x2320, 0xF3}, {0x2321, 0xF5}, {0x2013, 0x2D}
 };
 
 ExtraTable aSymbolExtraTab[] =
--- sd/source/filter/eppt/epptso.cxx	2005-07-14 16:14:37.000000000 +0530
+++ sd/source/filter/eppt/epptso.cxx	2005-09-01 19:53:17.000000000 +0530
@@ -2546,6 +2546,60 @@ void ParagraphObj::CalculateGraphicBulle
     }
 }
 
+// from sw/source/filter/ww8/wrtw8num.cxx for default bullets to export to MS intact
+static void lcl_SubstituteBullet(String& rNumStr, 
+    rtl_TextEncoding& rChrSet, String& rFontName)
+{
+    StarSymbolToMSMultiFont *pConvert = 0;
+    FontFamily eFamily = FAMILY_DECORATIVE;
+    
+    if (!pConvert)
+    {
+        pConvert = CreateStarSymbolToMSMultiFont();
+#ifdef DUMPSYMBOLS
+        ::std::ofstream output("fontdebug");
+        for (sal_Unicode i=0xE000;i<0xF8FF;i++)
+        {
+            String sFont = pConvert->ConvertChar(i);
+            if (sFont.Len())
+                 output << ::std::hex << i << std::endl;
+        }
+#endif
+    }    
+    sal_Unicode cChar = rNumStr.GetChar(0);
+    String sFont = pConvert->ConvertChar(cChar);
+
+    if (sFont.Len())
+    {
+        rNumStr = static_cast< sal_Unicode >(cChar | 0xF000);
+        rFontName = sFont;
+        rChrSet = RTL_TEXTENCODING_SYMBOL;
+    }
+    else if ( (rNumStr.GetChar(0) < 0xE000 || rNumStr.GetChar(0) > 0xF8FF) )
+    {
+        /*
+        Ok we can't fit into a known windows unicode font, but
+        we are not in the private area, so we are a
+        standardized symbol, so turn off the symbol bit and
+        let words own font substitution kick in
+        */
+        rChrSet = RTL_TEXTENCODING_UNICODE;
+        eFamily = FAMILY_SWISS;
+        rFontName = ::GetFontToken(rFontName, 0);
+     }
+     else
+     {
+        /*
+        Well we don't have an available substition, and we're
+        in our private area, so give up and show a standard
+        bullet symbol
+        */
+        rFontName.AssignAscii(RTL_CONSTASCII_STRINGPARAM("Wingdings"));
+        rNumStr = static_cast< sal_Unicode >(0x6C);
+     }      
+     delete pConvert;
+}
+
 void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider& rBuProv, sal_Int16 nDepth, sal_Bool bGetPropStateValue )
 {
     ::com::sun::star::uno::Reference< ::com::sun::star::container::XIndexReplace > aXIndexReplace;
@@ -2665,6 +2719,20 @@ void ParagraphObj::ImplGetNumberingLevel
 
                     case SVX_NUM_CHAR_SPECIAL :                           // Bullet
                     {
+                        if ( aFontDesc.Name.equalsIgnoreAsciiCaseAscii("starsymbol") ||
+                             aFontDesc.Name.equalsIgnoreAsciiCaseAscii("opensymbol") ) 
+                        {
+                            String sFontName = aFontDesc.Name;
+                            String sNumStr = cBulletId;
+                            rtl_TextEncoding eChrSet = aFontDesc.CharSet;
+
+                            lcl_SubstituteBullet(sNumStr,eChrSet,sFontName);
+
+                            aFontDesc.Name = sFontName;
+                            cBulletId = sNumStr.GetChar( 0 );
+                            aFontDesc.CharSet = eChrSet;
+                        }
+
                         if ( aFontDesc.Name.getLength() )
                         {
 /*
