Index: sw/inc/dbgoutsw.hxx
===================================================================
RCS file: /cvs/sw/sw/inc/dbgoutsw.hxx,v
retrieving revision 1.9
retrieving revision 1.9.14.1
diff -u -p -u -p -r1.9 -r1.9.14.1
--- sw/inc/dbgoutsw.hxx	5 Jan 2005 11:45:44 -0000	1.9
+++ sw/inc/dbgoutsw.hxx	14 Jan 2005 16:26:05 -0000	1.9.14.1
@@ -104,6 +104,7 @@
 const char * dbg_out(const SfxPoolItem * pItem);
 const char * dbg_out(const SfxItemSet & rSet);
 const char * dbg_out(SwNodes & rNodes);
+const char * dbg_out(SwOutlineNodes & rNodes);
 const char * dbg_out(const SwPosition & rPos);
 const char * dbg_out(const SwPaM & rPam);
 const char * dbg_out(const SwNodeNum & rNum);
Index: sw/inc/doc.hxx
===================================================================
RCS file: /cvs/sw/sw/inc/doc.hxx,v
retrieving revision 1.98
retrieving revision 1.97.12.3
diff -u -p -u -p -r1.98 -r1.97.12.3
--- sw/inc/doc.hxx	21 Jan 2005 10:27:28 -0000	1.98
+++ sw/inc/doc.hxx	26 Jan 2005 15:21:01 -0000	1.97.12.3
@@ -1602,15 +1602,9 @@ public:
 
 		// setzt, wenn noch keine Numerierung, sonst wird geaendert
 		// arbeitet mit alten und neuen Regeln, nur Differenzen aktualisieren
-    /** #109308# new parameter
-        @param bCalledFromShell
-        - sal_True called from shel
-        - sal_False else
-    */
-	void SetNumRule( const SwPaM&, const SwNumRule&,
-                     sal_Bool bSetAbsLSpace = sal_True,
-                     sal_Bool bCalledFromShell = sal_False );
-		// ab hier neu starten lassen oder den Start wieder aufheben
+    void SetNumRule( const SwPaM&, const SwNumRule&,
+                     sal_Bool bSetAbsLSpace = sal_True );
+        // ab hier neu starten lassen oder den Start wieder aufheben
 
     /**
        Replace numbering rules in a PaM by another numbering rule.

Index: sw/inc/ndarr.hxx
===================================================================
RCS file: /cvs/sw/sw/inc/ndarr.hxx,v
retrieving revision 1.8
retrieving revision 1.8.214.1
diff -u -p -u -p -r1.8 -r1.8.214.1
--- sw/inc/ndarr.hxx	4 Oct 2004 18:58:57 -0000	1.8
+++ sw/inc/ndarr.hxx	14 Jan 2005 16:27:53 -0000	1.8.214.1
@@ -146,7 +146,7 @@ class SwNodes: private BigPtrArray
 		   *pEndOfAutotext, *pEndOfRedlines,
 		   *pEndOfContent;
 
-	SwOutlineNodes* pOutlineNds;		// Array aller GliederiungsNodes
+	mutable SwOutlineNodes* pOutlineNds;		// Array aller GliederiungsNodes
 
 	BOOL bInNodesDel : 1;				// falls rekursiv aufgerufen wird
 										// Num/Outline nicht aktualisierem
@@ -286,8 +286,9 @@ public:
 							SwGrfFmtColl *pColl,
 							SwAttrSet* pAutoAttr = 0 );	// in ndole.cxx
 
+    void UpdateOutlineNodeList() const;
 		// Array aller GliederiungsNodes;
-	const SwOutlineNodes& GetOutLineNds() const { return *pOutlineNds; }
+	const SwOutlineNodes& GetOutLineNds() const;
 		// ab einem bestimmten TextNode alle Updaten
 	void UpdateOutlineNode( const SwNode&, BYTE nOldLevel, BYTE nNewLevel );
 		// alle Nodes Updaten - Rule/Format-Aenderung
Index: sw/inc/node.hxx
===================================================================
RCS file: /cvs/sw/sw/inc/node.hxx,v
retrieving revision 1.10
retrieving revision 1.10.234.2
diff -u -p -u -p -r1.10 -r1.10.234.2
--- sw/inc/node.hxx	23 Aug 2004 08:37:03 -0000	1.10
+++ sw/inc/node.hxx	9 Feb 2005 17:27:43 -0000	1.10.234.2
@@ -124,6 +124,11 @@ class SW_DLLPUBLIC SwNode : private /* p
 {
 	friend class SwNodes;
 
+#ifndef PRODUCT
+    static long nSerial;
+    long nMySerial;
+#endif
+
 	BYTE nNodeType;
 	BOOL bWrongDirty : 1; 		// Ist das Wrong-Feld auf invalid? (nur TxtNodes)
 	BOOL bACmplWrdDirty : 1;	// die ACompl-Liste muss angepasst werden (erstmal nur TxtNodes)
Index: sw/inc/numrule.hxx
===================================================================
RCS file: /cvs/sw/sw/inc/numrule.hxx,v
retrieving revision 1.21
retrieving revision 1.21.82.2
diff -u -p -u -p -r1.21 -r1.21.82.2
--- sw/inc/numrule.hxx	27 Nov 2004 11:39:41 -0000	1.21
+++ sw/inc/numrule.hxx	9 Feb 2005 17:27:43 -0000	1.21.82.2
@@ -347,6 +347,11 @@ public:
 
 class SW_DLLPUBLIC SwNodeNum
 {
+#ifndef PRODUCT
+    static long nSerial;
+    long nMySerial;
+#endif
+
 	USHORT nLevelVal[ MAXLEVEL ];		// Nummern aller Levels
 	USHORT nSetValue;					// vorgegeben Nummer
 	BYTE nMyLevel;						// akt. Level
Index: sw/source/core/doc/dbgoutsw.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/doc/dbgoutsw.cxx,v
retrieving revision 1.11
retrieving revision 1.11.14.1
diff -u -p -u -p -r1.11 -r1.11.14.1
--- sw/source/core/doc/dbgoutsw.cxx	5 Jan 2005 11:46:48 -0000	1.11
+++ sw/source/core/doc/dbgoutsw.cxx	14 Jan 2005 16:28:14 -0000	1.11.14.1
@@ -78,6 +78,7 @@
 #include <frmfmt.hxx>
 #include <fmtanchr.hxx>
 #include <swrect.hxx>
+#include <ndarr.hxx>
 #include <dbgoutsw.hxx>
 
 using namespace std;
@@ -714,6 +715,26 @@ const char * dbg_out(SwNodes & rNodes)
     return dbg_out(lcl_dbg_out(rNodes));
 }
 
+static String lcl_dbg_out(SwOutlineNodes & rNodes)
+{
+    String aStr("[\n", RTL_TEXTENCODING_ASCII_US);
+
+    for (ULONG i = 0; i < rNodes.Count(); i++)
+    {
+        aStr += lcl_dbg_out(*rNodes[i]);
+        aStr += String("\n", RTL_TEXTENCODING_ASCII_US);
+    }
+
+    aStr += String("]\n", RTL_TEXTENCODING_ASCII_US);
+
+    return aStr;
+}
+
+const char * dbg_out(SwOutlineNodes & rNodes)
+{
+    return dbg_out(lcl_dbg_out(rNodes));
+}
+
 static String lcl_dbg_out(const SwUndo & rUndo)
 {
     String aStr("[ ", RTL_TEXTENCODING_ASCII_US);

Index: sw/source/core/doc/docdesc.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/doc/docdesc.cxx,v
retrieving revision 1.24
retrieving revision 1.23.80.2
diff -u -p -u -p -r1.24 -r1.23.80.2
--- sw/source/core/doc/docdesc.cxx	11 Jan 2005 12:18:01 -0000	1.24
+++ sw/source/core/doc/docdesc.cxx	26 Jan 2005 15:23:59 -0000	1.23.80.2
@@ -679,9 +679,9 @@ void SwDoc::BroadcastStyleOperation(Stri
         {
             pPool->SetSearchMask(eFamily, SFXSTYLEBIT_ALL );
             SfxStyleSheetBase * pBase = pPool->Find(rName);
-
-            pPool->Broadcast
-                (SfxStyleSheetHint( nOp, *pBase ));
+            
+            if (pBase != NULL)
+                pPool->Broadcast(SfxStyleSheetHint( nOp, *pBase ));
         }
     }
 }
Index: sw/source/core/doc/docnum.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/doc/docnum.cxx,v
retrieving revision 1.42
retrieving revision 1.42.68.3
diff -u -p -u -p -r1.42 -r1.42.68.3
--- sw/source/core/doc/docnum.cxx	8 Dec 2004 17:41:03 -0000	1.42
+++ sw/source/core/doc/docnum.cxx	21 Jan 2005 11:46:00 -0000	1.42.68.3
@@ -184,30 +188,11 @@ SwNumRule * SwDoc::GetOutlineNumRule() c
 void SwDoc::SetOutlineNumRule( const SwNumRule& rRule )
 {
 	USHORT nChkLevel = 0, nChgFmtLevel = 0;
+
 	if( pOutlineRule )
-	{
-		USHORT nMask = 1;
-		for( BYTE n = 0; n < MAXLEVEL; ++n, nMask <<= 1 )
-		{
-			const SwNumFmt& rOld = pOutlineRule->Get( n ),
-						  & rNew = rRule.Get( n );
-			if( rOld != rNew )
-			{
-				nChgFmtLevel |= nMask;
-				if( rOld.GetAbsLSpace() != rNew.GetAbsLSpace() ||
-					rOld.GetFirstLineOffset() != rNew.GetFirstLineOffset() )
-					nChkLevel |= nMask;
-			}
-			else if( SVX_NUM_NUMBER_NONE > rNew.GetNumberingType() && 1 < rNew.GetIncludeUpperLevels() &&
-					0 != (nChgFmtLevel & GetUpperLvlChg( n,
-											rNew.GetIncludeUpperLevels(), nMask )) )
-				nChgFmtLevel |= nMask;
-		}
 		(*pOutlineRule) = rRule;
-	}
 	else
 	{
-		nChgFmtLevel = nChkLevel = 0xffff;
 		pOutlineRule = new SwNumRule( rRule );
 
         AddNumRule(pOutlineRule); // #i36749#
@@ -221,91 +206,8 @@ void SwDoc::SetOutlineNumRule( const SwN
 	// definiert sind
 	pOutlineRule->CheckCharFmts( this );
 
-	// losche aus dem Array alle Nodes, die ohne Outline Nummerierung sind
-	SwOutlineNodes& rArr = (SwOutlineNodes&)GetNodes().GetOutLineNds();
-	{
-		SwNodeNum aNoNum( NO_NUMBERING );
-		for( USHORT n = 0; n < rArr.Count(); ++n )
-		{
-			SwTxtNode* pTxtNd = rArr[n]->GetTxtNode();
-            if (pTxtNd)
-            {
-                if( NO_NUMBERING == pTxtNd->GetTxtColl()->GetOutlineLevel() )
-                {
-                    pTxtNd->UpdateNum( aNoNum );
-                    rArr.Remove( n-- );
-                }
-                else
-                {
-                    SwPaM aPam(*pTxtNd);
-                    SwNumRuleItem aItem(pOutlineRule->GetName());
-
-                    Insert(aPam, aItem);
-                }
-            }
-		}
-	}
-
-	// suche alle Nodes, die neu aufgenommen werden muessen !!
-	// (eigentlich koennte das auch per Modify am die Nodes propagiert
-	// werden !! )
-	ULONG nStt = GetNodes().GetEndOfContent().StartOfSectionIndex();
-	USHORT n;
-
-	for( n = 0; n < pTxtFmtCollTbl->Count(); ++n )
-	{
-		SwTxtFmtColl* pColl = (*pTxtFmtCollTbl)[ n ];
-		BYTE nLevel = pColl->GetOutlineLevel();
-		if( NO_NUMBERING != nLevel )
-		{
-#ifndef NUM_RELSPACE
-			// JP 08.07.98: Einzuege aus der Outline uebernehmen.
-			// 				??Aber nur wenn sie veraendert wurden??
-			if( ( nLevel = GetRealLevel( nLevel )) < MAXLEVEL
-				/*&& 0 != (nChkLevel & (1 << nLevel ))*/ )
-			{
-				SvxLRSpaceItem aLR( (SvxLRSpaceItem&)pColl->GetAttr( RES_LR_SPACE ) );
-				const SwNumFmt& rNFmt = pOutlineRule->Get( nLevel );
-
-				// ohne Nummer immer ohne FirstLineOffset!!!!
-				short nFOfst;
-				if( ! IsNum(pColl->GetOutlineLevel()) )
-					nFOfst = 0;
-				else
-					nFOfst = rNFmt.GetFirstLineOffset();
-
-				if( aLR.GetTxtLeft() != rNFmt.GetAbsLSpace() ||
-					aLR.GetTxtFirstLineOfst() != nFOfst )
-				{
-					aLR.SetTxtFirstLineOfstValue( nFOfst );
-					aLR.SetTxtLeft( rNFmt.GetAbsLSpace() );
-
-					pColl->SetAttr( aLR );
-				}
-			}
-#endif
-			SwClientIter aIter( *pColl );
-			for( SwTxtNode* pNd = (SwTxtNode*)aIter.First( TYPE( SwTxtNode ));
-					pNd; pNd = (SwTxtNode*)aIter.Next() )
-				if( pNd->GetNodes().IsDocNodes() && nStt < pNd->GetIndex() )
-					rArr.Insert( pNd );
-		}
-	}
-
-	for( n = 0; n < rArr.Count(); ++n )
-	{
-		SwTxtNode* pNd = rArr[ n ]->GetTxtNode();
-		ASSERT( pNd, "was ist das fuer ein Node?" );
-		if( ( 1 << (GetRealLevel(pNd->GetTxtColl()->GetOutlineLevel()))
-			& nChgFmtLevel ))
-			pNd->NumRuleChgd();
-	}
-	GetNodes().UpdateOutlineNodes();        // update der Nummern
-
-	// gibt es Fussnoten && gilt Kapitelweises Nummerieren, dann updaten
-	if( GetFtnIdxs().Count() && FTNNUM_CHAPTER == GetFtnInfo().eNum )
-		GetFtnIdxs().UpdateAllFtn();
-
+    PropagateOutlineRule();
+    UpdateNumRule();
 	UpdateExpFlds();
 
 	SetModified();
@@ -325,14 +227,14 @@ void SwDoc::PropagateOutlineRule()
             while (pClient)
             {
                 SwTxtNode * pTxtNode = ((SwTxtNode *) pClient);
-                
+
                 const SwPaM aPam(*pTxtNode);
                 SetNumRule(aPam, *GetOutlineNumRule());
 
                 pTxtNode->SetLevel(pColl->GetOutlineLevel());
 
                 pClient = aIter.Next();
-            }            
+            }
         }
     }
 }
@@ -1001,7 +903,7 @@ void lcl_ChgNumRule( SwDoc& rDoc, const 
 }
 
 void SwDoc::SetNumRule( const SwPaM& rPam, const SwNumRule& rRule,
-						sal_Bool bSetAbsLSpace, sal_Bool bCalledFromShell )
+                        sal_Bool bSetAbsLSpace )
 {
 	SwUndoInsNum* pUndo;
 	if( DoesUndo() )
@@ -1020,63 +922,6 @@ void SwDoc::SetNumRule( const SwPaM& rPa
 	if( !pNew )
     {
 		pNew = (*pNumRuleTbl)[ MakeNumRule( rRule.GetName(), &rRule ) ];
-
-        /* #109308# ATTENTION THIS IS NOW PARTLY WRONG! SEE #111078#.
-
-            If called from a shell propagate an existing
-            adjust item at the beginning am rPam into the new
-            numbering rule. */
-        if (bCalledFromShell)
-        {
-            SwCntntNode * pCntntNode = rPam.GetCntntNode();
-
-            if (pCntntNode)
-            {
-                SwAttrSet & rAttrSet = pCntntNode->GetSwAttrSet();
-
-                /* #111078# Do not propagate the adjustment but set
-                    the adjustment according to the text direction of
-                    the paragraph. */
-
-                SvxFrameDirection aDir = (SvxFrameDirection)
-                    rAttrSet.GetFrmDir().GetValue();
-
-                switch (aDir)
-                {
-                case FRMDIR_HORI_LEFT_TOP:
-                    pNew->SetNumAdjust(SVX_ADJUST_LEFT);
-
-                    break;
-
-                case FRMDIR_HORI_RIGHT_TOP:
-                    pNew->SetNumAdjust(SVX_ADJUST_RIGHT);
-
-                    break;
-
-                case FRMDIR_ENVIRONMENT :
-                    // --> FME 2004-08-06 #i32203# If the direction attribute
-                    // has not been set directly, we have to get it from the
-                    // layout:
-                    {
-                        SwClientIter aClientIter( *pCntntNode );
-                        SwClient* pLast = aClientIter.GoStart();
-                        if ( pLast && pLast->ISA( SwTxtFrm ) )
-                        {
-                            if ( static_cast<const SwTxtFrm*>(pLast)->IsRightToLeft() )
-                                pNew->SetNumAdjust(SVX_ADJUST_RIGHT);
-                            else
-                                pNew->SetNumAdjust(SVX_ADJUST_LEFT);
-                        }
-                    }
-
-                    break;
-
-                default:
-                    break;
-                }
-            }
-        }
-
     }
 	else if( rRule.IsAutoRule() && !(*pNew == rRule) )
 	{
@@ -2406,7 +2304,7 @@ SwNumRule* SwDoc::FindNumRulePtr( const 
 // #i36749#
 void SwDoc::AddNumRule(SwNumRule * pRule)
 {
-    pNumRuleTbl->Insert(pRule, pNumRuleTbl->Count());    
+    pNumRuleTbl->Insert(pRule, pNumRuleTbl->Count());
     aNumRuleMap[pRule->GetName()] = pRule;
     pRule->SetNumRuleMap(&aNumRuleMap);
 }
@@ -2806,7 +2704,7 @@ void lcl_UpdateNumRuleRange( SwNumRule &
     @param rRule        the SwNumRule we wish to update
     @param rNumRuleInfo contains the list of nodes using rRule to be updated
     @param rNode        SwNode whose section will be updated
-                        Note: the entire section from rNode.FindStartNode() 
+                        Note: the entire section from rNode.FindStartNode()
                         will be updated (see also nUpdatePos)
     @param nUpdatePos   update nodes >= rNumRuleInfo.GetList()[nUpdatePos]
 */
@@ -2831,7 +2729,7 @@ void lcl_UpdateNumRuleSection( SwNumRule
         // restart numbering unless nUpdatePos forces an update into the
         // middle of a section
         BOOL bInit = ( nUpdatePos <= nStartPos );
-        lcl_UpdateNumRuleRange( rRule, rNumRuleInfo, 
+        lcl_UpdateNumRuleRange( rRule, rNumRuleInfo,
                                 nStartPos, nEndPos, bInit );
     }
 }
@@ -2910,17 +2808,17 @@ void SwDoc::UpdateNumRule( SwNumRule & r
     }
 
     /* number each range (frames, redlines, footnotes, etc.) seperately */
-    lcl_UpdateNumRuleSectionOfSections( 
+    lcl_UpdateNumRuleSectionOfSections(
         rRule, aNumRuleInfo, aNodes.GetEndOfPostIts(), nUpdatePos );
-    lcl_UpdateNumRuleSectionOfSections( 
+    lcl_UpdateNumRuleSectionOfSections(
         rRule, aNumRuleInfo, aNodes.GetEndOfInserts(), nUpdatePos );
-    lcl_UpdateNumRuleSectionOfSections( 
+    lcl_UpdateNumRuleSectionOfSections(
         rRule, aNumRuleInfo, aNodes.GetEndOfAutotext(), nUpdatePos );
-    lcl_UpdateNumRuleSectionOfSections( 
+    lcl_UpdateNumRuleSectionOfSections(
         rRule, aNumRuleInfo, aNodes.GetEndOfRedlines(), nUpdatePos );
-    lcl_UpdateNumRuleSectionOfSections( 
+    lcl_UpdateNumRuleSectionOfSections(
         rRule, aNumRuleInfo, aNodes.GetEndOfExtras(), nUpdatePos );
-    lcl_UpdateNumRuleSection( 
+    lcl_UpdateNumRuleSection(
         rRule, aNumRuleInfo, aNodes.GetEndOfContent(), nUpdatePos );
 }
 
@@ -3023,7 +2921,7 @@ void SwDoc::UpdateNumRuleOld( SwNumRule 
 				{
 					aNum.SetStart( TRUE );
                     // OD 10.12.2002 #106111# - correct reset of level numbers
-                    for ( int nSubLvl = GetRealLevel(nLevel); 
+                    for ( int nSubLvl = GetRealLevel(nLevel);
                           nSubLvl < MAXLEVEL; ++nSubLvl)
                         aNum.GetLevelVal()[ nSubLvl ] = 0;
 					if( pRule->IsContinusNum() )
@@ -3093,7 +2991,7 @@ void SwDoc::UpdateNumRuleOld( SwNumRule 
                             if( !(nInitLevels & ( 1 << nPrevLvl )) )
                                 ++nPrevLvl;
 
-                            for( int ii = nPrevLvl; ii < GetRealLevel(nLevel); 
+                            for( int ii = nPrevLvl; ii < GetRealLevel(nLevel);
                                  ++ii )
                             {
                                 nInitLevels &= ~( 1 << ii );
@@ -3106,14 +3004,14 @@ void SwDoc::UpdateNumRuleOld( SwNumRule 
 								: aNum.GetSetValue();
                         }
                         else if( USHRT_MAX != aNum.GetSetValue() )
-                            aNum.GetLevelVal()[ GetRealLevel(nLevel) ] = 
+                            aNum.GetLevelVal()[ GetRealLevel(nLevel) ] =
                                 aNum.GetSetValue();
                         else if( nInitLevels & ( 1 << GetRealLevel(nLevel) ))
                             aNum.GetLevelVal()[ GetRealLevel(nLevel) ] =
                                 pRule->Get( GetRealLevel(nLevel) ).GetStart();
                         else
                         {
-                            const SwNumFmt * pTmpNumFmt = 
+                            const SwNumFmt * pTmpNumFmt =
                                 pRule->GetNumFmt(GetRealLevel(nLevel));
 
                             if (pTmpNumFmt &&
@@ -3128,7 +3026,7 @@ void SwDoc::UpdateNumRuleOld( SwNumRule 
                     // OD 10.12.2002 #106111# - reset numbers of all sublevels and
                     // note in <nInitLevels> that numbering of all sublevels have
                     // to be restarted.
-                    for ( int nSubLvl = GetRealLevel(nLevel)+1; 
+                    for ( int nSubLvl = GetRealLevel(nLevel)+1;
                           nSubLvl < MAXLEVEL; ++nSubLvl)
                     {
                         aNum.GetLevelVal()[ nSubLvl ] = 0;
Index: sw/source/core/doc/number.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/doc/number.cxx,v
retrieving revision 1.26
retrieving revision 1.26.68.2
diff -u -p -u -p -r1.26 -r1.26.68.2
--- sw/source/core/doc/number.cxx	8 Dec 2004 17:41:17 -0000	1.26
+++ sw/source/core/doc/number.cxx	9 Feb 2005 17:27:44 -0000	1.26.68.2
@@ -231,11 +231,20 @@ USHORT SwNumRule::GetBullIndent( BYTE nL
 	return aDefNumIndents[ nLvl ];
 }
 
+#ifndef PRODUCT
+long SwNodeNum::nSerial = 0;
+#endif
+
 SwNodeNum::SwNodeNum( BYTE nLevel, USHORT nSetVal )
 	: nSetValue( nSetVal ), nMyLevel( nLevel ), bStartNum( FALSE ),
       bContNum(FALSE)
 {
 	memset( nLevelVal, 0, sizeof( nLevelVal ) );
+
+#ifndef PRODUCT
+    nMySerial = nSerial;
+    nSerial++;
+#endif
 }
 
 SwNodeNum& SwNodeNum::operator=( const SwNodeNum& rCpy )
Index: sw/source/core/doc/poolfmt.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/doc/poolfmt.cxx,v
retrieving revision 1.35
retrieving revision 1.35.22.1
diff -u -p -u -p -r1.35 -r1.35.22.1
--- sw/source/core/doc/poolfmt.cxx	3 Jan 2005 17:18:48 -0000	1.35
+++ sw/source/core/doc/poolfmt.cxx	25 Jan 2005 10:25:24 -0000	1.35.22.1
@@ -1686,7 +1686,12 @@ SwPageDesc* SwDoc::GetPageDescFromPool( 
 	else
 	{
 		BOOL bIsModified = IsModified();
+        
+        BOOL bDoesUndo = DoesUndo();
+        DoUndo(FALSE);
 		n = MakePageDesc( aNm, 0, bRegardLanguage );
+        DoUndo(bDoesUndo);
+
 		pNewPgDsc = aPageDescs[ n ];
 		pNewPgDsc->SetPoolFmtId( nId );
 		if( !bIsModified )
Index: sw/source/core/docnode/ndnum.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/docnode/ndnum.cxx,v
retrieving revision 1.11
retrieving revision 1.11.82.1
diff -u -p -u -p -r1.11 -r1.11.82.1
--- sw/source/core/docnode/ndnum.cxx	26 Nov 2004 13:25:03 -0000	1.11
+++ sw/source/core/docnode/ndnum.cxx	14 Jan 2005 16:32:50 -0000	1.11.82.1
@@ -80,7 +80,9 @@
 #ifndef _FLDBAS_HXX
 #include <fldbas.hxx>			// UpdateFlds der KapitelNummerierung
 #endif
-
+#ifndef _DOCARY_HXX
+#include <docary.hxx>
+#endif
 
 _SV_IMPL_SORTAR_ALG( SwOutlineNodes, SwNodePtr )
 BOOL SwOutlineNodes::Seek_Entry( const SwNodePtr rSrch, USHORT* pFndPos ) const
@@ -223,3 +225,35 @@ void SwNodes::UpdateOutlineNodes()
 	if( pOutlineNds->Count() )		// OutlineNodes vorhanden ?
 		UpdateOutlineNode( *(*pOutlineNds)[ 0 ], 0, 0 );
 }
+
+void SwNodes::UpdateOutlineNodeList() const
+{
+    if (pOutlineNds->Count() > 0)
+        pOutlineNds->Remove((*pOutlineNds)[0], pOutlineNds->Count());
+
+    const SwNumRuleTbl & rNumRuleTbl = GetDoc()->GetNumRuleTbl();
+
+    for (int i = 0; i < rNumRuleTbl.Count(); i++)
+    {
+        SwNumRule * pRule = rNumRuleTbl[i];
+
+        if (pRule->IsOutlineRule())
+        {
+            SwNumRuleInfo aInfo(pRule->GetName());
+
+            aInfo.MakeList(*const_cast<SwDoc *>(GetDoc()));
+
+            for (int j = 0; j < aInfo.GetList().Count(); j++)
+            {
+                pOutlineNds->Insert(aInfo.GetList().GetObject(j));
+            }
+        }
+    }
+}
+
+const SwOutlineNodes & SwNodes::GetOutLineNds() const
+{
+    UpdateOutlineNodeList();
+
+    return *pOutlineNds;
+}
Index: sw/source/core/docnode/node.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/docnode/node.cxx,v
retrieving revision 1.18
retrieving revision 1.18.236.2
diff -u -p -u -p -r1.18 -r1.18.236.2
--- sw/source/core/docnode/node.cxx	12 Aug 2004 12:20:46 -0000	1.18
+++ sw/source/core/docnode/node.cxx	9 Feb 2005 17:27:44 -0000	1.18.236.2
@@ -264,6 +264,9 @@ USHORT SwNode::GetSectionLevel() const
 |*
 *******************************************************************/
 
+#ifndef PRODUCT
+long SwNode::nSerial = 0;
+#endif
 
 SwNode::SwNode( const SwNodeIndex &rWhere, const BYTE nNdType )
 	: pStartOfSection( 0 ), nNodeType( nNdType )
@@ -293,6 +296,11 @@ SwNode::SwNode( const SwNodeIndex &rWher
 		rNodes.Insert( pInsNd, rWhere );
 		pStartOfSection = (SwStartNode*)this;
 	}
+
+#ifndef PRODUCT
+    nMySerial = nSerial;
+    nSerial++;
+#endif
 }
 
 SwNode::SwNode( SwNodes& rNodes, ULONG nPos, const BYTE nNdType )
@@ -322,6 +330,11 @@ SwNode::SwNode( SwNodes& rNodes, ULONG n
 		rNodes.Insert( pInsNd, nPos );
 		pStartOfSection = (SwStartNode*)this;
 	}
+
+#ifndef PRODUCT
+    nMySerial = nSerial;
+    nSerial++;
+#endif
 }
 
 SwNode::~SwNode()

Index: sw/source/core/edit/ednumber.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/edit/ednumber.cxx,v
retrieving revision 1.11
retrieving revision 1.11.236.1
diff -u -p -u -p -r1.11 -r1.11.236.1
--- sw/source/core/edit/ednumber.cxx	12 Aug 2004 12:23:18 -0000	1.11
+++ sw/source/core/edit/ednumber.cxx	21 Jan 2005 11:46:03 -0000	1.11.236.1
@@ -231,9 +231,9 @@ BOOL SwEditShell::HasNumber() const
 {
     BOOL bResult = FALSE;
 
-    const SwTxtNode * pTxtNd = 
+    const SwTxtNode * pTxtNd =
         GetCrsr()->GetPoint()->nNode.GetNode().GetTxtNode();
-    
+
     if (pTxtNd)
     {
         bResult = pTxtNd->HasNumber();
@@ -246,9 +246,9 @@ BOOL SwEditShell::HasBullet() const
 {
     BOOL bResult = FALSE;
 
-    const SwTxtNode * pTxtNd = 
+    const SwTxtNode * pTxtNd =
         GetCrsr()->GetPoint()->nNode.GetNode().GetTxtNode();
-    
+
     if (pTxtNd)
     {
         bResult = pTxtNd->HasBullet();
@@ -318,7 +318,7 @@ BOOL SwEditShell::IsFirstOfNumRule() con
     if (pCrsr->GetNext() == pCrsr)
     {
         bResult = IsFirstOfNumRule(*pCrsr);
-    }    
+    }
 
     return bResult;
 }
@@ -353,7 +353,7 @@ void SwEditShell::NumIndent(short nInden
     StartAllAction();
 
     SwNumRule *pCurNumRule = GetDoc()->GetCurrNumRule(rPos);
-    
+
     if (pCurNumRule)
     {
         SwPaM aPaM(rPos);
@@ -361,14 +361,14 @@ void SwEditShell::NumIndent(short nInden
 
         int nLevel = -1;
         int nReferenceLevel = pTxtNode->GetNum()->GetLevel();
-        
+
         if (! IsFirstOfNumRule(aPaM) && pTxtNode->GetNum())
             nLevel = nReferenceLevel;
-                
+
         SwNumRule aRule(*pCurNumRule);
         aRule.Indent(nIndent, nLevel, nReferenceLevel, FALSE);
-        
-        GetDoc()->SetNumRule(aPaM, aRule, sal_False, sal_True);
+
+        GetDoc()->SetNumRule(aPaM, aRule, sal_False );
     }
 
     EndAllAction();
@@ -586,7 +586,7 @@ BOOL SwEditShell::IsProtectedOutlinePara
 	return bRet;
 }
 
-/** Test whether outline may be moved (bCopy == false) 
+/** Test whether outline may be moved (bCopy == false)
  *                           or copied (bCopy == true)
  * Verify these conditions:
  * 1) outline must be within main body (and not in redline)
@@ -750,13 +750,13 @@ void SwEditShell::SetCurNumRule( const S
 		SwPaM aPam( *pCrsr->GetPoint() );
 		for( USHORT n = 0; n < aRangeArr.Count(); ++n )
             /* #109308# adapt to new signature of SetNumRule */
-			GetDoc()->SetNumRule( aRangeArr.SetPam( n, aPam ), rRule, 
-                                  sal_False, sal_True );
+			GetDoc()->SetNumRule( aRangeArr.SetPam( n, aPam ), rRule,
+                                  sal_False );
 		GetDoc()->EndUndo( UNDO_END );
 	}
 	else
         /* #109308# adapt to new signature of SetNumRule */
-		GetDoc()->SetNumRule( *pCrsr, rRule, sal_False, sal_True );
+        GetDoc()->SetNumRule( *pCrsr, rRule, sal_False );
 
 	EndAllAction();
 }
Index: sw/source/core/frmedt/fecopy.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/frmedt/fecopy.cxx,v
retrieving revision 1.29
retrieving revision 1.29.116.2
diff -u -p -u -p -r1.29 -r1.29.116.2
--- sw/source/core/frmedt/fecopy.cxx	3 Nov 2004 09:51:59 -0000	1.29
+++ sw/source/core/frmedt/fecopy.cxx	14 Feb 2005 14:14:23 -0000	1.29.116.2
@@ -1094,7 +1094,21 @@ BOOL SwFEShell::Paste( SwDoc* pClpDoc, B
             //find out if the clipboard document starts with a table
             bool bStartWithTable = 0 != aCpyPam.Start()->nNode.GetNode().FindTableNode();
             SwPosition aInsertPosition( rInsPos );
-            pClpDoc->Copy( aCpyPam, rInsPos );
+            
+            {
+                SwNodeIndex aIndexBefore(rInsPos.nNode);
+                aIndexBefore--;
+                
+                pClpDoc->Copy( aCpyPam, rInsPos );
+                
+                {
+                    aIndexBefore++;
+                    SwPaM aPaM(SwPosition(aIndexBefore, 0), rInsPos);
+                    
+                    GetDoc()->MakeUniqueNumRules(aPaM);
+                }
+            }
+
 			SaveTblBoxCntnt( &rInsPos );
             if(bIncludingPageFrames && bStartWithTable)
             {
Index: sw/source/core/txtnode/ndtxt.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/txtnode/ndtxt.cxx,v
retrieving revision 1.43
retrieving revision 1.43.14.1
diff -u -p -u -p -r1.43 -r1.43.14.1
--- sw/source/core/txtnode/ndtxt.cxx	5 Jan 2005 11:47:24 -0000	1.43
+++ sw/source/core/txtnode/ndtxt.cxx	13 Jan 2005 16:16:26 -0000	1.43.14.1
@@ -2519,7 +2519,9 @@ BOOL SwTxtNode::HasNumber() const
         {
             SwNumFmt aFmt(pRule->Get(pNum->GetRealLevel()));
 
-            bResult = aFmt.IsEnumeration();
+            // #i40041#
+            bResult = aFmt.IsEnumeration() && 
+                SVX_NUM_NUMBER_NONE != aFmt.GetNumberingType();
         }
     }
 
Index: sw/source/core/undo/docundo.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/undo/docundo.cxx,v
retrieving revision 1.14
retrieving revision 1.14.14.3
diff -u -p -u -p -r1.14 -r1.14.14.3
--- sw/source/core/undo/docundo.cxx	5 Jan 2005 16:09:05 -0000	1.14
+++ sw/source/core/undo/docundo.cxx	28 Jan 2005 17:03:00 -0000	1.14.14.3
@@ -1011,8 +1002,20 @@ BOOL SwDoc::Repeat( SwUndoIter& rUndoIte
 	BOOL bOneUndo = nSize + 1 == nUndoPos;
 
 	SwPaM* pTmpCrsr = rUndoIter.pAktPam;
+    USHORT nId = 0;
+
 	if( pTmpCrsr != pTmpCrsr->GetNext() || !bOneUndo )	// Undo-Klammerung aufbauen
-		StartUndo( 0 );
+    {
+        if (pUndo->GetId() == UNDO_END)
+        {
+            SwUndoStart * pStartUndo = 
+                (SwUndoStart *) (*pUndos)[nSize];
+
+            nId = pStartUndo->GetUserId();
+        }
+
+		StartUndo( nId );
+    }
 	do {		// dann durchlaufe mal den gesamten Ring
 		for( USHORT nRptCnt = nRepeatCnt; nRptCnt > 0; --nRptCnt )
 		{
@@ -1023,7 +1026,7 @@ BOOL SwDoc::Repeat( SwUndoIter& rUndoIte
 	} while( pTmpCrsr !=
 		( rUndoIter.pAktPam = (SwPaM*)rUndoIter.pAktPam->GetNext() ));
 	if( pTmpCrsr != pTmpCrsr->GetNext() || !bOneUndo )
-		EndUndo( 0 );
+		EndUndo( nId );
 
 	return TRUE;
 }

Index: sw/source/core/undo/unnum.cxx
===================================================================
RCS file: /cvs/sw/sw/source/core/undo/unnum.cxx,v
retrieving revision 1.6
retrieving revision 1.6.220.1
diff -u -p -u -p -r1.6 -r1.6.220.1
--- sw/source/core/undo/unnum.cxx	8 Sep 2004 15:00:34 -0000	1.6
+++ sw/source/core/undo/unnum.cxx	14 Jan 2005 08:55:38 -0000	1.6.220.1
@@ -410,24 +410,38 @@ SwUndoNumOrNoNum::SwUndoNumOrNoNum( cons
 {
 }
 
-// #115901#
+// #115901#, #i40034#
 void SwUndoNumOrNoNum::Undo( SwUndoIter& rUndoIter )
 {
 	SwNodeIndex aIdx( rUndoIter.GetDoc().GetNodes(), nIdx );
     SwTxtNode * pTxtNd = aIdx.GetNode().GetTxtNode();
 
     if (NULL != pTxtNd)
+    {
         pTxtNd->UpdateNum(mOldNum);
+        
+        SwNumRule * pRule = pTxtNd->GetNumRule();
+        
+        if (pRule != NULL)
+            pRule->SetInvalidRule(TRUE);
+    }
 }
 
-// #115901#
+// #115901#, #i40034#
 void SwUndoNumOrNoNum::Redo( SwUndoIter& rUndoIter )
 {
 	SwNodeIndex aIdx( rUndoIter.GetDoc().GetNodes(), nIdx );
     SwTxtNode * pTxtNd = aIdx.GetNode().GetTxtNode();
 
     if (NULL != pTxtNd)
+    {
         pTxtNd->UpdateNum(mNewNum);
+        
+        SwNumRule * pRule = pTxtNd->GetNumRule();
+        
+        if (pRule != NULL)
+            pRule->SetInvalidRule(TRUE);
+    }
 }
 
 // #115901#
Index: sw/source/filter/ww8/ww8par3.cxx
===================================================================
RCS file: /cvs/sw/sw/source/filter/ww8/ww8par3.cxx,v
retrieving revision 1.64
retrieving revision 1.64.82.1
diff -u -p -u -p -r1.64 -r1.64.82.1
--- sw/source/filter/ww8/ww8par3.cxx	26 Nov 2004 13:29:23 -0000	1.64
+++ sw/source/filter/ww8/ww8par3.cxx	20 Jan 2005 16:20:56 -0000	1.64.82.1
@@ -1727,8 +1727,13 @@ void SwWW8ImplReader::RegisterNumFmtOnTx
                             SwNumRuleItem(pRule->GetName()));
                     }
                 }
-                pTxtNd->UpdateNum(aNum);
+
             }
+            
+            if (pTxtNd->IsOutline() && pTxtNd->Len() == 0)
+                aNum.SetNoNum(TRUE);
+            
+            pTxtNd->UpdateNum(aNum);
 
             SfxItemSet aListIndent(rDoc.GetAttrPool(), RES_LR_SPACE,
                     RES_LR_SPACE);
@@ -1869,8 +1874,9 @@ void SwWW8ImplReader::Read_LFOPosition(s
                 {
                     pTxtNode->SwCntntNode::SetAttr(
                         *GetDfltAttr(RES_PARATR_NUMRULE));
-                    pTxtNode->UpdateNum(SwNodeNum(NO_NUMBERING));
+                    pTxtNode->UpdateNum(SwNodeNum(NO_NUMLEVEL));
                 }
+
                 /*
                 #i24553#
                 Hmm, I can't remove outline numbering on a per txtnode basis,
@@ -1888,10 +1894,10 @@ void SwWW8ImplReader::Read_LFOPosition(s
                     {
                         pTxtNode->SwCntntNode::SetAttr(
                             SwNumRuleItem(mpChosenOutlineNumRule->GetName()));
-                        pTxtNode->UpdateNum(SwNodeNum());
+                        pTxtNode->UpdateNum(SwNodeNum(NO_NUMLEVEL));
                     }
                     else
-                        pTxtNode->UpdateNum(SwNodeNum());
+                        pTxtNode->UpdateNum(SwNodeNum(NO_NUMLEVEL));
                 }
 
                 //#94672#
Index: sw/source/ui/shells/txtnum.cxx
===================================================================
RCS file: /cvs/sw/sw/source/ui/shells/txtnum.cxx,v
retrieving revision 1.9
retrieving revision 1.9.340.1
diff -u -p -u -p -r1.9 -r1.9.340.1
--- sw/source/ui/shells/txtnum.cxx	11 Jun 2004 15:23:37 -0000	1.9
+++ sw/source/ui/shells/txtnum.cxx	21 Jan 2005 11:46:06 -0000	1.9.340.1
@@ -89,9 +89,9 @@
 #include "textsh.hxx"
 #include "uiitems.hxx"
 //CHINA001 #include "num.hxx"
-#include "swabstdlg.hxx" //CHINA001 
-#include <globals.hrc> //CHINA001 
-#include <sfx2/tabdlg.hxx> //CHINA001 
+#include "swabstdlg.hxx" //CHINA001
+#include <globals.hrc> //CHINA001
+#include <sfx2/tabdlg.hxx> //CHINA001
 
 void SwTextShell::ExecEnterNum(SfxRequest &rReq)
 {
@@ -181,15 +181,27 @@ void SwTextShell::ExecEnterNum(SfxReques
 		{
 			SwNumRule aRule( GetShell().GetUniqueNumRuleName() );
 			SvxNumRule aSvxRule = aRule.MakeSvxNumRule();
-			if(bHtml)
+            const bool bRightToLeft = GetShell().IsInRightToLeftText( 0 );
+
+            if( bHtml || bRightToLeft )
 			{
-				for( BYTE n = 1; n < MAXLEVEL; ++n )
+                for( BYTE n = 0; n < MAXLEVEL; ++n )
 				{
 					SvxNumberFormat aFmt( aSvxRule.GetLevel( n ) );
-					// 1/2" fuer HTML
-					aFmt.SetLSpace(720);
-					aFmt.SetAbsLSpace(n * 720);
-					aSvxRule.SetLevel( n, aFmt, FALSE );
+                    if ( n && bHtml )
+                    {
+                        // 1/2" fuer HTML
+                        aFmt.SetLSpace(720);
+                        aFmt.SetAbsLSpace(n * 720);
+                    }
+                    // --> FME 2005-01-21 #i38904#  Default alignment for
+                    // numbering/bullet should be rtl in rtl paragraph:
+                    if ( bRightToLeft )
+                    {
+                        aFmt.SetNumAdjust( SVX_ADJUST_RIGHT );
+                    }
+                    // <--
+                    aSvxRule.SetLevel( n, aFmt, FALSE );
 				}
 				aSvxRule.SetFeatureFlag(NUM_ENABLE_EMBEDDED_BMP, FALSE);
 			}
Index: sw/source/ui/wrtsh/wrtsh1.cxx
===================================================================
RCS file: /cvs/sw/sw/source/ui/wrtsh/wrtsh1.cxx,v
retrieving revision 1.42
retrieving revision 1.40.82.4
diff -u -p -u -p -r1.42 -r1.40.82.4
--- sw/source/ui/wrtsh/wrtsh1.cxx	21 Jan 2005 16:43:27 -0000	1.42
+++ sw/source/ui/wrtsh/wrtsh1.cxx	28 Jan 2005 12:33:57 -0000	1.40.82.4
@@ -240,6 +240,11 @@
 #ifndef _SFXREQUEST_HXX //autogen
 #include <sfx2/request.hxx>
 #endif
+
+#ifndef _PARATR_HXX
+#include <paratr.hxx>
+#endif
+
 #include <ndtxt.hxx>
 #include <svx/acorrcfg.hxx>
 
@@ -1132,76 +1137,34 @@ void SwWrtShell::SplitNode( BOOL bAutoFm
 // zum Testen der CharFormate an der Numerierung
 // extern void SetNumChrFmt( SwWrtShell*, SwNumRules& );
 
-// -> #i29560#
+// -> #i40041#
 void SwWrtShell::NumOrBulletOn(BOOL bNum)
 {
     const SwNumRule* pCurRule = GetCurNumRule();
 
     StartUndo(UNDO_NUMORNONUM);
 
-    if( !pCurRule || !pCurRule->IsOutlineRule())
-    {
-        const SwNumRule * pNumRule =
-            GetDoc()->SearchNumRule(*GetCrsr()->GetPoint(), FALSE, bNum, FALSE,
-                                    0);
-
-        if (pNumRule)
-            SetCurNumRule(*pNumRule);
-        else
-        {
-            SwNumRule aNumRule(GetUniqueNumRuleName());
-            // Zeichenvorlage an die Numerierung haengen
-            SwCharFmt* pChrFmt;
-            SwDocShell* pDocSh = GetView().GetDocShell();
-            const Font* pFnt = &SwNumRule::GetDefBulletFont();
-
-            if (bNum)
-            {
-                pChrFmt = GetCharFmtFromPool( RES_POOLCHR_NUM_LEVEL );
-            }
-            else
-            {
-                pChrFmt = GetCharFmtFromPool( RES_POOLCHR_BUL_LEVEL );
-            }
+    const SwNumRule * pNumRule = pCurRule;
 
-            SwTxtNode * pTxtNode =
-                GetCrsr()->GetPoint()->nNode.GetNode().GetTxtNode();
-            USHORT nWidthOfTabs = pTxtNode->GetWidthOfLeadingTabs();
-            GetDoc()->RemoveLeadingWhiteSpace( *GetCrsr()->GetPoint() );
+    SwTxtFmtColl * pColl = GetCurTxtFmtColl();
+    SwNumRule * pCollRule = NULL;
 
-            BOOL bHtml = 0 != PTR_CAST(SwWebDocShell, pDocSh);
-            for( BYTE nLvl = 0; nLvl < MAXLEVEL; ++nLvl )
-            {
-                SwNumFmt aFmt( aNumRule.Get( nLvl ) );
-                aFmt.SetCharFmt( pChrFmt );
+    if (pColl)
+    {
+        pCollRule = pDoc->FindNumRulePtr(pColl->GetNumRule().GetValue());
+        pNumRule = pCollRule;
 
-                if (! bNum)
-                {
-                    aFmt.SetBulletFont( pFnt );
-                    aFmt.SetBulletChar( cBulletChar );
-                    aFmt.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
-                }
+        if (pNumRule == NULL && NO_NUMBERING != pColl->GetOutlineLevel())
+            pNumRule = GetDoc()->GetOutlineNumRule();
+    }
 
-                if(bHtml && nLvl)
-                {
-                    // 1/2" fuer HTML
-                    aFmt.SetLSpace(720);
-                    aFmt.SetAbsLSpace(nLvl * 720);
-                }
-                else if ( nWidthOfTabs > 0 )
-                {
-                    aFmt.SetAbsLSpace(nWidthOfTabs + nLvl * 720);
-                }
+    if (!pNumRule )
+        pNumRule = GetDoc()->SearchNumRule(*GetCrsr()->GetPoint(),
+                                           FALSE, bNum, FALSE, 0);
 
-                aNumRule.Set( nLvl, aFmt );
-            }
-            SetCurNumRule( aNumRule );
-        }
-    }
-    else if (pCurRule && pCurRule->IsOutlineRule())
+    if (pNumRule)
     {
-        SwNumRule aNumRule(*pCurRule);
-
+        SwNumRule aNumRule(*pNumRule);
         SwTxtNode * pTxtNode =
             GetCrsr()->GetPoint()->nNode.GetNode().GetTxtNode();
 
@@ -1223,18 +1186,79 @@ void SwWrtShell::NumOrBulletOn(BOOL bNum
                 {
                     const Font* pFnt = &SwNumRule::GetDefBulletFont();
                     aFmt.SetBulletFont( pFnt );
-                    aFmt.SetBulletChar( cBulletChar );
+                    aFmt.SetBulletChar( GetBulletChar(pNum->GetRealLevel() ));
                     aFmt.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
                 }
                 aNumRule.Set(pNum->GetRealLevel(), aFmt);
+            }
+        }
+
+        SetCurNumRule(aNumRule);
+    }
+    else
+    {
+        SwNumRule aNumRule(GetUniqueNumRuleName());
+        // Zeichenvorlage an die Numerierung haengen
+        SwCharFmt* pChrFmt;
+        SwDocShell* pDocSh = GetView().GetDocShell();
+        const Font* pFnt = &SwNumRule::GetDefBulletFont();
+
+        if (bNum)
+        {
+            pChrFmt = GetCharFmtFromPool( RES_POOLCHR_NUM_LEVEL );
+        }
+        else
+        {
+            pChrFmt = GetCharFmtFromPool( RES_POOLCHR_BUL_LEVEL );
+        }
 
-                SetCurNumRule(aNumRule);
+        SwTxtNode * pTxtNode =
+            GetCrsr()->GetPoint()->nNode.GetNode().GetTxtNode();
+        USHORT nWidthOfTabs = pTxtNode->GetWidthOfLeadingTabs();
+        GetDoc()->RemoveLeadingWhiteSpace( *GetCrsr()->GetPoint() );
+        
+        const bool bHtml = 0 != PTR_CAST(SwWebDocShell, pDocSh);
+        const bool bRightToLeft = IsInRightToLeftText();
+        for( BYTE nLvl = 0; nLvl < MAXLEVEL; ++nLvl )
+        {
+            SwNumFmt aFmt( aNumRule.Get( nLvl ) );
+            aFmt.SetCharFmt( pChrFmt );
+
+            if (! bNum)
+            {
+                aFmt.SetBulletFont( pFnt );
+                aFmt.SetBulletChar( GetBulletChar(nLvl) );
+                aFmt.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
             }
+
+            if(bHtml && nLvl)
+            {
+                // 1/2" fuer HTML
+                aFmt.SetLSpace(720);
+                aFmt.SetAbsLSpace(nLvl * 720);
+            }
+            else if ( nWidthOfTabs > 0 )
+            {
+                aFmt.SetAbsLSpace(nWidthOfTabs + nLvl * 720);
+            }
+
+            // --> FME 2005-01-21 #i38904#  Default alignment for
+            // numbering/bullet should be rtl in rtl paragraph:
+            if ( bRightToLeft )
+            {
+                aFmt.SetNumAdjust( SVX_ADJUST_RIGHT );
+            }
+            // <--
+
+            aNumRule.Set( nLvl, aFmt );
         }
+
+        SetCurNumRule( aNumRule );
     }
 
     EndUndo(UNDO_NUMORNONUM);
 }
+// <- #i40041#
 
 void SwWrtShell::NumOn()
 {

