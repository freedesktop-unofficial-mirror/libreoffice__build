Index: sd/inc/Outliner.hxx
===================================================================
RCS file: /cvs/graphics/sd/inc/Outliner.hxx,v
retrieving revision 1.8
retrieving revision 1.8.160.1
diff -u -p -u -p -r1.8 -r1.8.160.1
--- sd/inc/Outliner.hxx	17 Sep 2004 13:45:03 -0000	1.8
+++ sd/inc/Outliner.hxx	2 Feb 2005 10:25:10 -0000	1.8.160.1
@@ -527,7 +527,7 @@ private:
 
     /** Switch on edit mode for the currently selected text object.
     */
-    void EnterEditMode (void);
+    void EnterEditMode (BOOL bGrabFocus=TRUE);
 
     /** Return the position at which a new search is started with respect to
         the search direction as specified by the argument.
Index: sd/inc/app.hrc
===================================================================
RCS file: /cvs/graphics/sd/inc/app.hrc,v
retrieving revision 1.15
retrieving revision 1.15.2.1
diff -u -p -u -p -r1.15 -r1.15.2.1
--- sd/inc/app.hrc	25 Jan 2005 15:12:28 -0000	1.15
+++ sd/inc/app.hrc	4 Feb 2005 15:48:15 -0000	1.15.2.1
@@ -488,5 +488,7 @@
 #define SID_CLOSE_MASTER_VIEW               (SID_SD_START+434)
 
 #define SID_ASSIGN_LAYOUT                   (SID_SD_START+435)
+#define SID_DISPLAY_MASTER_BACKGROUND       (SID_SD_START+436)
+#define SID_DISPLAY_MASTER_OBJECTS          (SID_SD_START+437)
 
 #endif
Index: sd/sdi/_drvwsh.sdi
===================================================================
RCS file: /cvs/graphics/sd/sdi/_drvwsh.sdi,v
retrieving revision 1.31
retrieving revision 1.31.2.1
diff -u -p -u -p -r1.31 -r1.31.2.1
--- sd/sdi/_drvwsh.sdi	27 Jan 2005 14:10:39 -0000	1.31
+++ sd/sdi/_drvwsh.sdi	4 Feb 2005 15:48:50 -0000	1.31.2.1
@@ -2453,4 +2453,14 @@ interface DrawView : Object
         ExecMethod = FuSupport ;
         StateMethod = GetMenuState ;
     ]
+    SID_DISPLAY_MASTER_BACKGROUND
+    [
+        ExecMethod = FuTemporary ;
+        StateMethod = GetMenuState ;
+    ]
+    SID_DISPLAY_MASTER_OBJECTS
+    [
+        ExecMethod = FuTemporary ;
+        StateMethod = GetMenuState ;
+    ]
 }
Index: sd/sdi/sdraw.sdi
===================================================================
RCS file: /cvs/graphics/sd/sdi/sdraw.sdi,v
retrieving revision 1.23
retrieving revision 1.23.2.1
diff -u -p -u -p -r1.23 -r1.23.2.1
--- sd/sdi/sdraw.sdi	27 Jan 2005 14:11:34 -0000	1.23
+++ sd/sdi/sdraw.sdi	4 Feb 2005 15:49:14 -0000	1.23.2.1
@@ -6762,3 +6762,51 @@ SfxVoidItem CloseMasterView SID_CLOSE_MA
 	ToolBoxConfig = TRUE, 
 	GroupId = GID_FORMAT;
 ]
+SfxBoolItem DisplayMasterBackground SID_DISPLAY_MASTER_BACKGROUND
+[
+	/* flags: */  
+	AutoUpdate = FALSE, 
+	Cachable = Cachable, 
+	FastCall = FALSE, 
+	HasCoreId = FALSE, 
+	HasDialog = FALSE, 
+	ReadOnlyDoc = FALSE, 
+	Toggle = FALSE, 
+	Container = FALSE, 
+	RecordAbsolute = FALSE, 
+	RecordPerSet;
+	Synchron;
+
+	Readonly = FALSE, 
+
+	/* config: */ 
+	AccelConfig = TRUE, 
+	MenuConfig = TRUE, 
+	StatusBarConfig = FALSE, 
+	ToolBoxConfig = TRUE, 
+	GroupId = GID_VIEW;
+]
+SfxBoolItem DisplayMasterObjects SID_DISPLAY_MASTER_OBJECTS
+[
+	/* flags: */  
+	AutoUpdate = FALSE, 
+	Cachable = Cachable, 
+	FastCall = FALSE, 
+	HasCoreId = FALSE, 
+	HasDialog = FALSE, 
+	ReadOnlyDoc = FALSE, 
+	Toggle = FALSE, 
+	Container = FALSE, 
+	RecordAbsolute = FALSE, 
+	RecordPerSet;
+	Synchron;
+
+	Readonly = FALSE, 
+
+	/* config: */ 
+	AccelConfig = TRUE, 
+	MenuConfig = TRUE, 
+	StatusBarConfig = FALSE, 
+	ToolBoxConfig = TRUE, 
+	GroupId = GID_VIEW;
+]
Index: sd/source/ui/app/menuids_tmpl.src
===================================================================
RCS file: /cvs/graphics/sd/source/ui/app/menuids_tmpl.src,v
retrieving revision 1.3
retrieving revision 1.3.102.1
diff -u -p -u -p -r1.3 -r1.3.102.1
--- sd/source/ui/app/menuids_tmpl.src	4 Nov 2004 16:04:05 -0000	1.3
+++ sd/source/ui/app/menuids_tmpl.src	4 Feb 2005 15:50:35 -0000	1.3.102.1
@@ -209,6 +209,22 @@
         Text [ en-US ] = "~New Page" ; \
         Text [ x-comment ] = " ";\
     };
+#define MN_DISPLAY_MASTER_BACKGROUND \
+    MenuItem\
+    {\
+        Identifier = SID_DISPLAY_MASTER_BACKGROUND ; \
+        HelpID = SID_DISPLAY_MASTER_BACKGROUND ; \
+        Text [ de ] = "Hintergrund des Masters anzeigen" ; \
+        Text [ en-US ] = "Display Background of Master" ; \
+    };
+#define MN_DISPLAY_MASTER_OBJECTS \
+    MenuItem\
+    {\
+        Identifier = SID_DISPLAY_MASTER_OBJECTS ; \
+        HelpID = SID_DISPLAY_MASTER_OBJECTS ; \
+        Text [ de ] = "Objekte des Masters anzeigen" ; \
+        Text [ en-US ] = "Display Objects from Master" ; \
+    };
                                                     
 
 #define MN_PAGE_MENU \
@@ -226,6 +242,9 @@
                 MN_MODIFY_PAGE\
 				MN_RENAME_PAGE\
                 SEPARATOR\
+                MN_DISPLAY_MASTER_BACKGROUND\
+                MN_DISPLAY_MASTER_OBJECTS\
+                SEPARATOR\
                 MN_INSERT_PAGE\
                 MN_DELETE_PAGE\
             };\
Index: sd/source/ui/app/popup.src
===================================================================
RCS file: /cvs/graphics/sd/source/ui/app/popup.src,v
retrieving revision 1.33
retrieving revision 1.33.80.1
diff -u -p -u -p -r1.33 -r1.33.80.1
--- sd/source/ui/app/popup.src	26 Nov 2004 19:58:35 -0000	1.33
+++ sd/source/ui/app/popup.src	4 Feb 2005 17:04:55 -0000	1.33.80.1
@@ -177,7 +177,7 @@ Menu RID_SLIDE_SORTER_IMPRESS_SEL_POPUP
         MN_PRESENTATION_LAYOUT
 		MN_MODIFY_PAGE
 		SEPARATOR
-		/*MN_DIA*/
+		MN_DIA
 		MN_HIDE_SLIDE
 	};
 };
Index: sd/source/ui/inc/View.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/inc/View.hxx,v
retrieving revision 1.8
retrieving revision 1.8.78.1
diff -u -p -u -p -r1.8 -r1.8.78.1
--- sd/source/ui/inc/View.hxx	26 Nov 2004 20:15:00 -0000	1.8
+++ sd/source/ui/inc/View.hxx	2 Feb 2005 10:25:46 -0000	1.8.78.1
@@ -175,7 +175,7 @@ public:
 
 	BOOL                    BegTextEdit( SdrObject* pObj, SdrPageView* pPV=NULL, Window* pWin=NULL, BOOL bIsNewObj=FALSE,
 					                     SdrOutliner* pGivenOutliner=NULL, OutlinerView* pGivenOutlinerView=NULL,
-					                     BOOL bDontDeleteOutliner=FALSE, BOOL bOnlyOneView=FALSE );
+					                     BOOL bDontDeleteOutliner=FALSE, BOOL bOnlyOneView=FALSE, BOOL bGrabFocus=TRUE );
 	virtual SdrEndTextEditKind EndTextEdit(BOOL bDontDeleteReally=FALSE);
 
 	SdrEndTextEditKind			EndTextEdit(BOOL bDontDeleteReally, FuPoor* pFunc);
Index: sd/source/ui/slideshow/slideshowimpl.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/slideshow/slideshowimpl.cxx,v
retrieving revision 1.8
retrieving revision 1.8.2.1
diff -u -p -u -p -r1.8 -r1.8.2.1
--- sd/source/ui/slideshow/slideshowimpl.cxx	27 Jan 2005 15:26:06 -0000	1.8
+++ sd/source/ui/slideshow/slideshowimpl.cxx	3 Feb 2005 22:31:49 -0000	1.8.2.1
@@ -177,6 +177,8 @@ using namespace ::drafts::com::sun::star
 using namespace ::com::sun::star::presentation;
 using namespace ::com::sun::star::drawing;
 
+
+extern String getUiNameFromPageApiNameImpl( const ::rtl::OUString& rApiName );
 namespace sd
 {
 ///////////////////////////////////////////////////////////////////////
@@ -1089,9 +1091,11 @@ void SlideshowImpl::registerShapeEvents(
 						xSet->getPropertyValue( msBookmark ) >>= pEvent->maStrBookmark;
 					if( getPageNumberForBookmark( pEvent->maStrBookmark ) == -1 )
 						continue;
+					break;
 				case ClickAction_DOCUMENT:
 				case ClickAction_SOUND:
 				case ClickAction_PROGRAM:
+				case ClickAction_MACRO:
 					if( xSetInfo->hasPropertyByName( msBookmark ) )
 						xSet->getPropertyValue( msBookmark ) >>= pEvent->maStrBookmark;
 					break;
@@ -1298,7 +1302,18 @@ void SAL_CALL SlideshowImpl::click( cons
 
 	case ClickAction_DOCUMENT:
     {
-		mpDocSh->OpenBookmark( pEvent->maStrBookmark );
+		OUString aBookmark( pEvent->maStrBookmark );
+
+		sal_Int32 nPos = aBookmark.lastIndexOf( sal_Unicode('#') );
+		if( nPos >= 0 )
+		{
+			OUString aURL( aBookmark.copy( 0, nPos+1 ) );
+			OUString aName( aBookmark.copy( nPos+1 ) );
+			aURL += getUiNameFromPageApiNameImpl( aName );
+			aBookmark = aURL;
+		}
+
+		mpDocSh->OpenBookmark( aBookmark );
     }
     break;
 
@@ -1369,13 +1384,15 @@ void SAL_CALL SlideshowImpl::click( cons
 sal_Int32 SlideshowImpl::getPageNumberForBookmark( const OUString& rStrBookmark )
 {
 	BOOL bIsMasterPage;
-	USHORT nPgNum = mpDoc->GetPageByName( rStrBookmark, bIsMasterPage );
+	OUString aBookmark( rStrBookmark );
+	aBookmark = getUiNameFromPageApiNameImpl( aBookmark );
+	USHORT nPgNum = mpDoc->GetPageByName( aBookmark, bIsMasterPage );
 	SdrObject* pObj = NULL;
 
 	if( nPgNum == SDRPAGE_NOTFOUND )
 	{
 		// Ist das Bookmark ein Objekt?
-		SdrObject* pObj = mpDoc->GetObj( rStrBookmark );
+		SdrObject* pObj = mpDoc->GetObj( aBookmark );
 
 		if( pObj )
 		{
Index: sd/source/ui/slidesorter/controller/SlsPageSelector.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/slidesorter/controller/SlsPageSelector.cxx,v
retrieving revision 1.3
retrieving revision 1.3.120.1
diff -u -p -u -p -r1.3 -r1.3.120.1
--- sd/source/ui/slidesorter/controller/SlsPageSelector.cxx	28 Oct 2004 13:29:43 -0000	1.3
+++ sd/source/ui/slidesorter/controller/SlsPageSelector.cxx	3 Feb 2005 16:22:32 -0000	1.3.120.1
@@ -95,7 +95,8 @@ PageSelector::PageSelector (
       mnSelectedPageCount(0),
       mnBroadcastDisableLevel(0),
       mbSelectionChangeBroadcastPending(false),
-      mpMostRecentlySelectedPage(NULL)
+      mpMostRecentlySelectedPage(NULL),
+      mpSelectionAnchor(NULL)
 {
     CountSelectedPages ();
 }
@@ -122,6 +123,7 @@ void PageSelector::DeselectAllPages (voi
         "PageSelector::DeselectAllPages: the selected pages counter is not 0");
     mnSelectedPageCount = 0;
     mpMostRecentlySelectedPage = NULL;
+    mpSelectionAnchor = NULL;
 }
 
 
@@ -179,7 +181,11 @@ void PageSelector::SelectPage (PageDescr
     {
         mnSelectedPageCount ++;
         mrController.GetView().RequestRepaint (rDescriptor);
+
         mpMostRecentlySelectedPage = &rDescriptor;
+        if (mpSelectionAnchor == NULL)
+            mpSelectionAnchor = &rDescriptor;
+
         if (mnBroadcastDisableLevel > 0)
             mbSelectionChangeBroadcastPending = true;
         else
@@ -324,6 +330,14 @@ PageDescriptor* PageSelector::GetMostRec
 
 
 
+PageDescriptor* PageSelector::GetSelectionAnchor (void) const
+{
+    return mpSelectionAnchor;
+}
+
+
+
+
 void PageSelector::CountSelectedPages (void)
 {
     mnSelectedPageCount = 0;
Index: sd/source/ui/slidesorter/controller/SlsSelectionFunction.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/slidesorter/controller/SlsSelectionFunction.cxx,v
retrieving revision 1.13
retrieving revision 1.13.2.1
diff -u -p -u -p -r1.13 -r1.13.2.1
--- sd/source/ui/slidesorter/controller/SlsSelectionFunction.cxx	25 Jan 2005 15:17:50 -0000	1.13
+++ sd/source/ui/slidesorter/controller/SlsSelectionFunction.cxx	3 Feb 2005 16:25:16 -0000	1.13.2.1
@@ -172,7 +172,6 @@ SelectionFunction::SelectionFunction (
       mrController (rController),
       mbPageHit(false),
       mbRectangleSelection(false),
-      mpRangeSelectionAnchor(NULL),
       mbDragSelection(false),
       maInsertionMarkerBox(),
       mpSound(new Sound),
@@ -396,7 +395,7 @@ BOOL SelectionFunction::KeyInput (const 
 
         case KEY_DELETE:
         {
-            bool bHasObjects = false;;
+            bool bHasObjects = false;
             int	nSelectedPagesCount = 0;
             int nPageCount = mrController.GetModel().GetPageCount();
 
@@ -858,7 +857,6 @@ void SelectionFunction::ProcessMouseEven
         // Range selection with the shift modifier.
         case BUTTON_DOWN | LEFT_BUTTON | SINGLE_CLICK | OVER_SELECTED_PAGE | SHIFT_MODIFIER:
         case BUTTON_DOWN | LEFT_BUTTON | SINGLE_CLICK | OVER_UNSELECTED_PAGE | SHIFT_MODIFIER:
-            DeselectAllPages();
             RangeSelect(*pHitDescriptor);
             break;
 
@@ -942,7 +940,6 @@ void SelectionFunction::ProcessMouseEven
 void SelectionFunction::SelectHitPage (model::PageDescriptor& rDescriptor)
 {
     mrController.GetPageSelector().SelectPage(rDescriptor);
-    mpRangeSelectionAnchor = &rDescriptor;
 }
 
 
@@ -1012,14 +1009,6 @@ void SelectionFunction::ProcessRectangle
                 view::SlideSorterView::BBT_SHAPE));
             if (rSelectionRectangle.IsInside (aPageBox))
             {
-                // The first page in the selection rectangle becomes the new
-                // selection anchor.
-                if (bFirstPage)
-                {
-                    mpRangeSelectionAnchor = &rDescriptor;
-                    bFirstPage = false;
-                }
-                    
                 // When we are extending the selection (shift key is
                 // pressed) then toggle the selection state of the page.
                 // Otherwise select it: this results in the previously
@@ -1061,18 +1050,29 @@ void SelectionFunction::RangeSelect (mod
 {
     PageSelector& rSelector (mrController.GetPageSelector());
 
-    if (mpRangeSelectionAnchor!=NULL)
+    model::PageDescriptor* pAnchor = rSelector.GetSelectionAnchor();
+    DeselectAllPages();
+
+    if (pAnchor != NULL)
     {
         // Select all pages between the anchor and the given one, including
         // the two.
-        USHORT nAnchorIndex (
-            (mpRangeSelectionAnchor->GetPage()->GetPageNum()-1) / 2);
-        USHORT nOtherIndex (
-            (rDescriptor.GetPage()->GetPageNum()-1) / 2);
-        USHORT nMinIndex (::std::min(nAnchorIndex, nOtherIndex));
-        USHORT nMaxIndex (::std::max(nAnchorIndex, nOtherIndex));
-        for (USHORT nIndex=nMinIndex; nIndex<=nMaxIndex; nIndex++)
-            rSelector.SelectPage (nIndex);
+        USHORT nAnchorIndex ((pAnchor->GetPage()->GetPageNum()-1) / 2);
+        USHORT nOtherIndex ((rDescriptor.GetPage()->GetPageNum()-1) / 2);
+
+        // Iterate over all pages in the range.  Start with the anchor
+        // page.  This way the PageSelector will recognize it again as
+        // anchor (the first selected page after a DeselectAllPages()
+        // becomes the anchor.)
+        int nStep = (nAnchorIndex < nOtherIndex) ? +1 : -1;
+        USHORT nIndex = nAnchorIndex;
+        while (true)
+        {
+            rSelector.SelectPage(nIndex);
+            if (nIndex == nOtherIndex)
+                break;
+            nIndex += nStep;
+        }
     }
 }
 
@@ -1115,7 +1115,7 @@ void SelectionFunction::MoveSubstitution
         }
         
         // The selection anchor may have become invalid.
-        mpRangeSelectionAnchor = NULL;
+        //        mpRangeSelectionAnchor = NULL;
     }
     
     pViewShell->GetViewFrame()->GetBindings().Invalidate(SID_STATUS_PAGE);
Index: sd/source/ui/slidesorter/inc/controller/SlsPageSelector.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/slidesorter/inc/controller/SlsPageSelector.hxx,v
retrieving revision 1.3
retrieving revision 1.3.120.1
diff -u -p -u -p -r1.3 -r1.3.120.1
--- sd/source/ui/slidesorter/inc/controller/SlsPageSelector.hxx	28 Oct 2004 13:30:58 -0000	1.3
+++ sd/source/ui/slidesorter/inc/controller/SlsPageSelector.hxx	3 Feb 2005 16:22:44 -0000	1.3.120.1
@@ -166,6 +166,13 @@ public:
     */
     model::PageDescriptor* GetMostRecentlySelectedPage (void) const;
 
+    /** Return the anchor for a range selection.  This usually is the first
+        selected page after all pages have been deselected.
+        @return
+            The returned anchor may be NULL.
+    */
+    model::PageDescriptor* GetSelectionAnchor (void) const;
+
 
     typedef ::std::set<int> PageSelection;
 
@@ -195,6 +202,8 @@ private:
     int mnBroadcastDisableLevel;
     bool mbSelectionChangeBroadcastPending;
     model::PageDescriptor* mpMostRecentlySelectedPage;
+    /// Anchor for a range selection.
+    model::PageDescriptor* mpSelectionAnchor;
     
     void CountSelectedPages (void);
 };
Index: sd/source/ui/slidesorter/inc/controller/SlsSelectionFunction.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/slidesorter/inc/controller/SlsSelectionFunction.hxx,v
retrieving revision 1.5
retrieving revision 1.5.80.1
diff -u -p -u -p -r1.5 -r1.5.80.1
--- sd/source/ui/slidesorter/inc/controller/SlsSelectionFunction.hxx	26 Nov 2004 15:18:40 -0000	1.5
+++ sd/source/ui/slidesorter/inc/controller/SlsSelectionFunction.hxx	3 Feb 2005 16:24:19 -0000	1.5.80.1
@@ -145,8 +145,6 @@ private:
 	class ShowingEffectInfo;
     ShowingEffectInfo* mpShowingEffectInfo;
     
-    model::PageDescriptor* mpRangeSelectionAnchor;
-
 
     /** Show the effect of the specified page.
     */
Index: sd/source/ui/toolpanel/controls/AllMasterPagesSelector.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/AllMasterPagesSelector.cxx,v
retrieving revision 1.2
retrieving revision 1.2.220.2
diff -u -p -u -p -r1.2 -r1.2.220.2
--- sd/source/ui/toolpanel/controls/AllMasterPagesSelector.cxx	13 Jul 2004 14:42:31 -0000	1.2
+++ sd/source/ui/toolpanel/controls/AllMasterPagesSelector.cxx	4 Feb 2005 18:08:08 -0000	1.2.220.2
@@ -80,7 +80,7 @@ AllMasterPagesSelector::AllMasterPagesSe
     SdDrawDocument& rDocument,
     ViewShellBase& rBase,
     DrawViewShell& rViewShell)
-    : MasterPagesSelector (pParent, rDocument, rBase),
+    : MasterPagesContainerSelector (pParent, rDocument, rBase),
       mrViewShell(rViewShell)
 {
 	SetName (String(RTL_CONSTASCII_USTRINGPARAM("AllMasterPagesSelector")));
@@ -107,8 +107,7 @@ void AllMasterPagesSelector::Fill (void)
     for (int i=0; i<nTokenCount; i++)
     {
         MasterPageContainer::Token aToken (rContainer.GetTokenForIndex(i));
-        if (rContainer.GetURLForToken(aToken).Len() > 0)
-            AddItemForToken (aToken, true);
+		AddItemForToken (aToken, true);
     }
     mpPageSet->Rearrange ();
 }
Index: sd/source/ui/toolpanel/controls/AllMasterPagesSelector.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/AllMasterPagesSelector.hxx,v
retrieving revision 1.2
retrieving revision 1.2.220.1
diff -u -p -u -p -r1.2 -r1.2.220.1
--- sd/source/ui/toolpanel/controls/AllMasterPagesSelector.hxx	13 Jul 2004 14:42:50 -0000	1.2
+++ sd/source/ui/toolpanel/controls/AllMasterPagesSelector.hxx	3 Feb 2005 14:10:38 -0000	1.2.220.1
@@ -62,13 +62,7 @@
 #ifndef SD_TOOLPANEL_CONTROLS_ALL_MASTER_PAGES_SELECTOR_HXX
 #define SD_TOOLPANEL_CONTROLS_ALL_MASTER_PAGES_SELECTOR_HXX
 
-#include "MasterPagesSelector.hxx"
-
-#ifndef _SV_TIMER_HXX
-#include <vcl/timer.hxx>
-#endif
-
-class SdDrawDocument;
+#include "MasterPagesContainerSelector.hxx"
 
 namespace sd { namespace toolpanel { namespace controls {
 
@@ -77,7 +71,7 @@ namespace sd { namespace toolpanel { nam
     to the document.
 */
 class AllMasterPagesSelector
-    : public MasterPagesSelector
+    : public MasterPagesContainerSelector
 {
 public:
     AllMasterPagesSelector (
Index: sd/source/ui/toolpanel/controls/CurrentMasterPagesSelector.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/CurrentMasterPagesSelector.cxx,v
retrieving revision 1.3
retrieving revision 1.3.220.2
diff -u -p -u -p -r1.3 -r1.3.220.2
--- sd/source/ui/toolpanel/controls/CurrentMasterPagesSelector.cxx	15 Jul 2004 08:59:41 -0000	1.3
+++ sd/source/ui/toolpanel/controls/CurrentMasterPagesSelector.cxx	3 Feb 2005 14:12:01 -0000	1.3.220.2
@@ -64,9 +64,12 @@
 #include "PreviewValueSet.hxx"
 #include "drawdoc.hxx"
 #include "sdpage.hxx"
-#include <vcl/image.hxx>
 #include "MasterPageContainer.hxx"
+#include "app.hrc"
+
+#include <vcl/image.hxx>
 #include <svx/svdmodel.hxx>
+
 #include <set>
 
 
@@ -84,6 +87,10 @@ CurrentMasterPagesSelector::CurrentMaste
       mxListener(NULL)
 {
 	SetName(String(RTL_CONSTASCII_USTRINGPARAM("CurrentMasterPagesSelector")));
+
+    // For this master page selector only we change the default action for
+    // left clicks.
+    mnDefaultClickAction = SID_TP_APPLY_TO_SELECTED_SLIDES;
 }
 
 
@@ -119,6 +126,7 @@ void CurrentMasterPagesSelector::LateIni
 void CurrentMasterPagesSelector::Fill (void)
 {
     Clear();
+
 	USHORT nPageCount = mrDocument.GetMasterSdPageCount(PK_STANDARD);
     SdPage* pMasterPage;
     // Remember the names of the master pages that have been inserted to
@@ -133,7 +141,19 @@ void CurrentMasterPagesSelector::Fill (v
             if (aMasterPageNames.find(sName)==aMasterPageNames.end())
             {
                 aMasterPageNames.insert (sName);
-                AddItemForPage (String(),sName,pMasterPage,Image());
+
+                int nIndex = mpPageSet->GetItemCount() + 1;
+
+                Image aPreview = MasterPageContainer::Instance().GetPreviewForPage (
+                    pMasterPage,
+                    mnPreviewWidth);
+                mpPageSet->InsertItem (
+                    nIndex,
+                    aPreview,
+                    pMasterPage->GetName());
+                mpPageSet->SetItemData (
+                    nIndex, 
+                    pMasterPage);
             }
         }
     }
@@ -143,6 +163,71 @@ void CurrentMasterPagesSelector::Fill (v
 
 
 
+void CurrentMasterPagesSelector::Clear (void)
+{
+    mpPageSet->Clear ();
+}
+
+
+
+
+void CurrentMasterPagesSelector::UpdateAllPreviews (void)
+{
+    SdPage* pMasterPage;
+    for (USHORT nIndex=1; nIndex<=mpPageSet->GetItemCount(); nIndex++)
+    {
+        pMasterPage = reinterpret_cast<SdPage*>(mpPageSet->GetItemData(nIndex));
+        if (pMasterPage != NULL)
+            mpPageSet->SetItemImage (nIndex,
+                MasterPageContainer::Instance().GetPreviewForPage (
+                    pMasterPage,
+                    mnPreviewWidth));
+    }
+    GetParentNode()->RequestResize();
+}
+
+
+
+
+void CurrentMasterPagesSelector::UpdatePreview (USHORT nIndex)
+{
+    SdPage* pMasterPage = reinterpret_cast<SdPage*>(mpPageSet->GetItemData(nIndex));
+    if (pMasterPage != NULL)
+        mpPageSet->SetItemImage (nIndex,
+            MasterPageContainer::Instance().GetPreviewForPage (
+                pMasterPage,
+                mnPreviewWidth));
+    GetParentNode()->RequestResize();
+}
+
+
+
+
+void CurrentMasterPagesSelector::InvalidatePreview (const SdPage* pPage)
+{
+    for (USHORT nIndex=1; nIndex<=mpPageSet->GetItemCount(); nIndex++)
+    {
+        if (pPage == reinterpret_cast<SdPage*>(mpPageSet->GetItemData(nIndex)))
+        {
+            MasterPagesSelector::InvalidatePreview(nIndex);
+            break;
+        }
+    }
+}
+
+
+
+
+SdPage* CurrentMasterPagesSelector::GetSelectedMasterPage (void)
+{
+    USHORT nIndex = mpPageSet->GetSelectItemId();
+    SdPage* pMasterPage = reinterpret_cast<SdPage*>(mpPageSet->GetItemData (nIndex));
+    return pMasterPage;
+}
+
+
+
+
 void CurrentMasterPagesSelector::UpdateSelection (void)
 {
     // Iterate over all pages and for the selected ones put the name of
@@ -156,14 +241,10 @@ void CurrentMasterPagesSelector::UpdateS
         pPage = mrDocument.GetSdPage (nIndex, PK_STANDARD);
         if (pPage != NULL && pPage->IsSelected())
         {
-	  //USHORT nMasterPageCount (pPage->GetMasterPageCount());
-	  //            for (USHORT nIndex=0; nIndex<nMasterPageCount; nIndex++)
-	  //            {
-	  SdrPage& rMasterPage (pPage->TRG_GetMasterPage());
-	  SdPage* pMasterPage = static_cast<SdPage*>(&rMasterPage);
-                if (pMasterPage != NULL)
-                    aNames.insert (pMasterPage->GetName());
-		//            }
+            SdrPage& rMasterPage (pPage->TRG_GetMasterPage());
+            SdPage* pMasterPage = static_cast<SdPage*>(&rMasterPage);
+            if (pMasterPage != NULL)
+                aNames.insert (pMasterPage->GetName());
         }
     }
 
Index: sd/source/ui/toolpanel/controls/CurrentMasterPagesSelector.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/CurrentMasterPagesSelector.hxx,v
retrieving revision 1.2
retrieving revision 1.2.220.2
diff -u -p -u -p -r1.2 -r1.2.220.2
--- sd/source/ui/toolpanel/controls/CurrentMasterPagesSelector.hxx	13 Jul 2004 14:43:25 -0000	1.2
+++ sd/source/ui/toolpanel/controls/CurrentMasterPagesSelector.hxx	3 Feb 2005 14:11:55 -0000	1.2.220.2
@@ -70,6 +70,15 @@
 namespace sd { namespace toolpanel { namespace controls {
 
 
+/** Adaption of a value set control that shows previews of master pages that
+    are currently used by the document of the application.
+
+    It does not use the approach of the base class of storing tokens as item
+    data in the value set that identify entries in the MasterPageContainer.
+    Instead it stores pointers directly to master pages in the document.
+    The base class is used to have access to the code that assigns master
+    pages to the document.
+*/
 class CurrentMasterPagesSelector
     : public MasterPagesSelector
 {
@@ -93,6 +102,24 @@ public:
         with anew.
     */
     virtual void Fill (void);
+    virtual void Clear (void);
+
+    virtual void InvalidatePreview (const SdPage* pPage);
+
+protected:
+    /** Return the master page whose preview is currently selected in the
+        value set control.
+        @return
+            The returned page belongs to the main document, not to the local
+            document of the MasterPageContainer.
+    */
+    virtual SdPage* GetSelectedMasterPage (void);
+
+    /** For all currently used master pages a new preview is rendered and
+        put into the value set control.
+    */
+    virtual void UpdateAllPreviews (void);
+    virtual void UpdatePreview (USHORT nIndex);
 
 private:
     ::com::sun::star::uno::Reference< ::com::sun::star::lang::XComponent>
Index: sd/source/ui/toolpanel/controls/MasterPageContainer.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/MasterPageContainer.cxx,v
retrieving revision 1.8
retrieving revision 1.8.8.3
diff -u -p -u -p -r1.8 -r1.8.8.3
--- sd/source/ui/toolpanel/controls/MasterPageContainer.cxx	21 Jan 2005 16:36:17 -0000	1.8
+++ sd/source/ui/toolpanel/controls/MasterPageContainer.cxx	4 Feb 2005 18:07:35 -0000	1.8.8.3
@@ -161,6 +161,7 @@ public:
     MasterPageDescriptor (
         const String& rURL,
         const String& rPageName,
+        const String& rStyleName,
         SdPage* pMasterPage,
         SdPage* pSlide,
         const Image& rPreview,
@@ -168,6 +169,7 @@ public:
         )
         : msURL(rURL),
           msPageName(rPageName),
+          msStyleName(rStyleName),
           mpMasterPage(pMasterPage),
           mpSlide(pSlide),
           maPreview(rPreview),
@@ -176,6 +178,7 @@ public:
     MasterPageDescriptor (const MasterPageDescriptor& rDescriptor)
         : msURL(rDescriptor.msURL),
           msPageName(rDescriptor.msPageName),
+          msStyleName(rDescriptor.msStyleName),
           mpMasterPage(rDescriptor.mpMasterPage),
           mpSlide(rDescriptor.mpSlide),
           maPreview(rDescriptor.maPreview),
@@ -185,7 +188,10 @@ public:
     {}
 
     String msURL;
+    /// Taken from the title of the template file.
     String msPageName;
+    /// Taken from the master page object.
+    String msStyleName;
     /// The actual master page.
     SdPage* mpMasterPage;
     /// A slide that uses the master page.
@@ -209,6 +215,12 @@ class PageNameComparator { public:
     bool operator() (const MasterPageContainerType::value_type& rDescriptor)
     { return rDescriptor.msPageName.CompareTo(msPageName)==0; }
 };
+class StyleNameComparator { public:
+    String msStyleName;
+    StyleNameComparator (const String& sStyleName) : msStyleName(sStyleName) {};
+    bool operator() (const MasterPageContainerType::value_type& rDescriptor)
+    { return rDescriptor.msStyleName.CompareTo(msStyleName)==0; }
+};
 class PageObjectComparator { public:
     const SdPage* mpMasterPage;
     PageObjectComparator (const SdPage* pPageObject) 
@@ -219,13 +231,16 @@ class PageObjectComparator { public:
 class AllComparator { public:
     String msURL;
     String msPageName;
+    String msStyleName;
     const SdPage* mpMasterPage;
     AllComparator (
         const String& sURL,
         const String& sPageName,
+        const String& sStyleName,
         const SdPage* pPageObject)
         : msURL(sURL),
           msPageName(sPageName),
+          msStyleName(sStyleName),
           mpMasterPage(pPageObject)
     {}
     bool operator() (const MasterPageContainerType::value_type& rDescriptor)
@@ -235,6 +250,8 @@ class AllComparator { public:
                 &&rDescriptor.msURL.CompareTo(msURL)==0)
             || (msPageName.Len()>0
                 && rDescriptor.msPageName.CompareTo(msPageName)==0)
+            || (msStyleName.Len()>0
+                && rDescriptor.msStyleName.CompareTo(msStyleName)==0)
             || (mpMasterPage!=NULL
                 && rDescriptor.mpMasterPage==mpMasterPage); 
     }
@@ -279,6 +296,7 @@ public:
     Token PutMasterPage (
         const String& sURL,
         const String& sPageName,
+        const String& sStyleName,
         SdPage* pMasterPage,
         Image aPreview);
     Image GetPreviewForToken (
@@ -290,6 +308,9 @@ public:
         const Link& rCallback, 
         void* pUserData);
     void RemoveCallback (const Link& rCallback);
+    Image GetPreviewForPage (
+        SdPage* pPage,
+        int nWidth);
 
 private:
     Timer maDelayedPreviewCreationTimer;
@@ -406,12 +427,14 @@ MasterPageContainer::~MasterPageContaine
 MasterPageContainer::Token MasterPageContainer::PutMasterPage (
     const String& sURL,
     const String& sPageName,
+    const String& sStyleName,
     SdPage* pMasterPage,
     Image aPreview)
 {
     return mpImpl->PutMasterPage (
         sURL,
         sPageName,
+        sStyleName,
         pMasterPage,
         aPreview);
 }
@@ -478,6 +501,25 @@ MasterPageContainer::Token MasterPageCon
 
 
 
+MasterPageContainer::Token MasterPageContainer::GetTokenForStyleName (const String& sStyleName)
+{
+    Token aResult (NIL_TOKEN);
+    if (sStyleName.Len() > 0)
+    {
+        MasterPageContainerType::iterator aEntry (
+            ::std::find_if (
+                mpImpl->maContainer.begin(),
+                mpImpl->maContainer.end(),
+                StyleNameComparator(sStyleName)));
+        if (aEntry != mpImpl->maContainer.end())
+            return aEntry->maToken;
+    }
+    return aResult;
+}
+
+
+
+
 MasterPageContainer::Token MasterPageContainer::GetTokenForPageObject (
     const SdPage* pPage)
 {
@@ -522,6 +564,18 @@ String MasterPageContainer::GetPageNameF
 
 
 
+String MasterPageContainer::GetStyleNameForToken (
+    MasterPageContainer::Token aToken)
+{
+    if (aToken>=0 && (unsigned)aToken<mpImpl->maContainer.size())
+        return mpImpl->maContainer[aToken].msStyleName;
+    else
+        return String();
+}
+
+
+
+
 SdPage* MasterPageContainer::GetPageObjectForToken (
     MasterPageContainer::Token aToken,
     bool bLoad)
@@ -568,6 +622,16 @@ Image MasterPageContainer::GetPreviewFor
 
 
 
+Image MasterPageContainer::GetPreviewForPage (
+    SdPage* pPage,
+    int nWidth)
+{
+    return mpImpl->GetPreviewForPage(pPage, nWidth);
+}
+
+
+
+
 void MasterPageContainer::RemoveCallback (const Link& rCallback)
 {
     mpImpl->RemoveCallback (rCallback);
@@ -719,6 +783,7 @@ IMPL_LINK(MasterPageContainer::Implement
 MasterPageContainer::Token MasterPageContainer::Implementation::PutMasterPage (
     const String& sURL,
     const String& sPageName,
+    const String& sStyleName,
     SdPage* pMasterPage,
     Image aPreview)
 {
@@ -728,7 +793,7 @@ MasterPageContainer::Token MasterPageCon
         ::std::find_if (
             maContainer.begin(),
             maContainer.end(),
-            AllComparator(sURL,sPageName,pMasterPage)));
+            AllComparator(sURL,sPageName,sStyleName,pMasterPage)));
     if (aEntry == maContainer.end())
     {
         bool bIgnore = false;
@@ -752,6 +817,7 @@ MasterPageContainer::Token MasterPageCon
             maContainer.push_back (MasterPageDescriptor (
                 sURL,
                 sPageName,
+                sStyleName,
                 pLocalMasterPage,
                 pLocalSlide,
                 aPreview,
@@ -765,6 +831,8 @@ MasterPageContainer::Token MasterPageCon
             aEntry->msURL = sURL;
         if (aEntry->msPageName.Len() == 0)
             aEntry->msPageName = sPageName;
+        if (aEntry->msStyleName.Len() == 0)
+            aEntry->msStyleName = sStyleName;
         if (aEntry->mpMasterPage == NULL)
             aEntry->mpMasterPage = pMasterPage;
         Size aImageSize (aEntry->maPreview.GetSizePixel());
@@ -805,7 +873,7 @@ SdPage* MasterPageContainer::Implementat
                     maContainer[aToken].mpMasterPage = pPageObject;
                     maContainer[aToken].mpSlide 
                         = GetSlideForMasterPage(pPageObject);
-                    maContainer[aToken].msPageName = pPageObject->GetName();
+                    maContainer[aToken].msStyleName = pPageObject->GetName();
                     // Delete an existing substitution. The next request for
                     // a preview will create the real one.
                     maContainer[aToken].maPreview = Image();
@@ -1140,28 +1208,42 @@ Image MasterPageContainer::Implementatio
     }
 
     bool bShowSubstitution = false;
-    if (aPreview.GetSizePixel().Width() != nWidth)
-        if (pPage != NULL)
-        {
-            // The page object exists so we can create the preview right now.
-            aPreview = maPreviewRenderer.RenderPage(
+    Size aSize (aPreview.GetSizePixel());
+    if (aPreview.GetSizePixel().Width() == nWidth)
+    {
+        // The existing preview already has the right size so use that.
+        bShowSubstitution = false;
+    }
+    else if (pPage != NULL)
+    {
+        // We have the page in memory so we can render it in the desired
+        // size.
+        aPreview = maPreviewRenderer.RenderPage(
                 maContainer[aToken].mpMasterPage,
                 nWidth,
                 String::CreateFromAscii(""));
-            maContainer[aToken].maPreview = aPreview;
-            bShowSubstitution = false;
-        }
-        else
-        {
-            // The page object has to be loaded.  That takes so long that we
-            // do it asynchronously.
-            AddPreviewCreationRequest(
-                aToken,
-                nWidth,
-                rCallback,
-                pUserData);
-            bShowSubstitution = true;
-        }
+        maContainer[aToken].maPreview = aPreview;
+        bShowSubstitution = false;
+    }
+    else if (nWidth>0 && aPreview.GetSizePixel().Width()>0)
+    {
+        // We already have a preview so we scale that to the desired size.
+        aPreview = maPreviewRenderer.ScaleBitmap (
+            aPreview.GetBitmapEx(),
+            nWidth);
+        bShowSubstitution = false;
+    }
+    else
+    {
+        // The page object has to be loaded.  That takes so long that we
+        // do it asynchronously.
+        AddPreviewCreationRequest(
+            aToken,
+            nWidth,
+            rCallback,
+            pUserData);
+        bShowSubstitution = true;
+    }
 
     if (bShowSubstitution)
     {
@@ -1177,6 +1259,19 @@ Image MasterPageContainer::Implementatio
 
 
 
+Image MasterPageContainer::Implementation::GetPreviewForPage (
+    SdPage* pPage,
+    int nWidth)
+{
+    return maPreviewRenderer.RenderPage(
+        pPage,
+        nWidth,
+        String::CreateFromAscii(""));
+}
+
+
+
+
 void MasterPageContainer::Implementation::RemoveCallback (
     const Link& rCallback)
 {
@@ -1373,6 +1468,29 @@ BitmapEx MasterPageContainer::Implementa
 
 void MasterPageContainer::Implementation::FillContainer (void)
 {
+	//add a default master page
+	if(mpDocument)
+	{
+		Image aPreview;
+		String aEmpty;
+		Token aResult = maContainer.size();
+		USHORT nDefaultMasterIndex = 0;
+		SdPage* pLocalMasterPage = mpDocument->GetMasterSdPage(
+												nDefaultMasterIndex, PK_STANDARD);
+		if(pLocalMasterPage)
+		{
+			maContainer.push_back (MasterPageDescriptor (
+				aEmpty/*sURL*/,
+				pLocalMasterPage->GetName()/*sPageName*/,
+				pLocalMasterPage->GetName()/*rStyleName*/,
+				pLocalMasterPage,
+				GetSlideForMasterPage(pLocalMasterPage)/*pLocalSlide*/,
+				aPreview,
+				aResult));
+		}
+	}
+
+	//add all master pages from the template directories
     TemplateScanner aScanner;
     aScanner.Scan ();
 
@@ -1405,6 +1523,7 @@ void MasterPageContainer::Implementation
     PutMasterPage (
         rsPath,
         rsTitle,
+        String(),
         NULL,
         Image());
 }
Index: sd/source/ui/toolpanel/controls/MasterPageContainer.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/MasterPageContainer.hxx,v
retrieving revision 1.3
retrieving revision 1.3.186.2
diff -u -p -u -p -r1.3 -r1.3.186.2
--- sd/source/ui/toolpanel/controls/MasterPageContainer.hxx	4 Aug 2004 08:59:23 -0000	1.3
+++ sd/source/ui/toolpanel/controls/MasterPageContainer.hxx	3 Feb 2005 14:14:40 -0000	1.3.186.2
@@ -112,6 +112,7 @@ public:
     Token PutMasterPage (
         const String& sURL,
         const String& sPageName,
+        const String& sStyleName,
         SdPage* pMasterPage,
         Image aPreview);
 
@@ -123,10 +124,12 @@ public:
 
     Token GetTokenForURL (const String& sURL);
     Token GetTokenForPageName (const String& sPageName);
+    Token GetTokenForStyleName (const String& sStyleName);
     Token GetTokenForPageObject (const SdPage* pPage);
 
     String GetURLForToken (Token aToken);
     String GetPageNameForToken (Token aToken);
+    String GetStyleNameForToken (Token aToken);
     SdPage* GetSlideForToken (Token aToken, bool bLoad=true);
     SdPage* GetPageObjectForToken (Token aToken, bool bLoad=true);
 
@@ -174,6 +177,22 @@ public:
         const Link& rCallback, 
         void* pUserData);
 
+    /** Create a preview of the given page with the requested width.  This
+        method exists to give the CurrentMasterPagesSelector the oportunity
+        to render previews for pages without either enforcing it to use the
+        actual master page container nor having to expose the preview
+        renderer.
+        @param pPage
+            Page for which to render a preview.  It may or may not be a
+            member of the master page container.
+        @param nWidth
+            With of the preview.  The height is calculated from the aspect
+            ratio of the page.
+    */
+    Image GetPreviewForPage (
+        SdPage* pPage,
+        int nWidth);
+
     /** The specified listener is not available anymore and must not
         be called back. All requests for preview creation for this
         callback are removed.
Index: sd/source/ui/toolpanel/controls/MasterPagesContainerSelector.cxx
===================================================================
RCS file: sd/source/ui/toolpanel/controls/MasterPagesContainerSelector.cxx
diff -N sd/source/ui/toolpanel/controls/MasterPagesContainerSelector.cxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sd/source/ui/toolpanel/controls/MasterPagesContainerSelector.cxx	3 Feb 2005 14:07:19 -0000	1.1.2.1
@@ -0,0 +1,332 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#include "MasterPagesContainerSelector.hxx"
+
+#include "MasterPageContainer.hxx"
+#include "PreviewValueSet.hxx"
+/*
+#include "pres.hxx"
+#include "drawdoc.hxx"
+#include "DrawDocShell.hxx"
+#include "sdpage.hxx"
+#include "glob.hxx"
+#include "glob.hrc"
+#include "app.hrc"
+#include "res_bmp.hrc"
+#include "strings.hrc"
+#include "showview.hxx"
+#include "DrawViewShell.hxx"
+#include "SlideSorterViewShell.hxx"
+#include "ViewShellBase.hxx"
+#include "PaneManager.hxx"
+#include "../TaskPaneShellManager.hxx"
+#include "../TitledControl.hxx"
+#include "../ControlContainer.hxx"
+#include "controller/SlideSorterController.hxx"
+#include "controller/SlsPageSelector.hxx"
+
+#ifndef	_SFXOBJFACE_HXX
+#include <sfx2/objface.hxx>
+#endif
+#ifndef _SDRESID_HXX
+#include "sdresid.hxx"
+#endif
+#ifndef _TEMPLATE_SCANNER_HXX
+#include "TemplateScanner.hxx"
+#endif
+#ifndef _SD_DRAWVIEW_HXX
+#include "drawview.hxx"
+#endif
+#ifndef _SV_IMAGE_HXX
+#include <vcl/image.hxx>
+#endif
+#ifndef _SVTOOLS_LANGUAGEOPTIONS_HXX
+#include <svtools/languageoptions.hxx>
+#endif
+#ifndef _SFXAPP_HXX
+#include <sfx2/app.hxx>
+#endif
+#include <sfx2/dispatch.hxx>
+#include <sfx2/mnumgr.hxx>
+#ifndef _SFXITEMSET_HXX
+#include <svtools/itemset.hxx>
+#endif
+#ifndef _SFXENUMITEM_HXX
+#include <svtools/eitem.hxx>
+#endif
+#ifndef _SVX_DLGUTIL_HXX
+#include <svx/dlgutil.hxx>
+#endif
+#ifndef _SVDPAGV_HXX
+#include <svx/svdpagv.hxx>
+#endif
+#include <svx/svxids.hrc>
+#include "FrameView.hxx"
+#include "sdpage.hxx"
+#include "stlpool.hxx"
+#include "unmovss.hxx"
+#include <sfx2/request.hxx>
+#ifndef _SFXITEMPOOL_HXX //autogen
+#include <svtools/itempool.hxx>
+#endif
+
+using namespace ::sd::toolpanel::controls;
+#define MasterPagesSelector
+#include "sdslots.hxx"
+
+using namespace ::com::sun::star::text;
+*/
+
+namespace {
+
+typedef ::std::pair<int, ::sd::toolpanel::controls::MasterPageContainer::Token> UserData;
+
+} //end of anonymous namespace
+
+
+
+namespace sd { namespace toolpanel { namespace controls {
+
+TYPEINIT1(MasterPagesContainerSelector, MasterPagesSelector);
+
+
+
+MasterPagesContainerSelector::MasterPagesContainerSelector (
+    TreeNode* pParent,
+    SdDrawDocument& rDocument,
+    ViewShellBase& rBase)
+    : MasterPagesSelector(pParent,rDocument,rBase)
+{
+}
+
+
+
+
+MasterPagesContainerSelector::~MasterPagesContainerSelector (void)
+{
+    MasterPageContainer::Instance().RemoveCallback (
+        LINK(this,MasterPagesContainerSelector,PreviewAvailableCallback));
+}
+
+
+
+
+SdPage* MasterPagesContainerSelector::GetSelectedMasterPage (void)
+{
+    SdPage* pMasterPage = NULL;
+    //    USHORT nIndex = maPageSet.GetItemId (pEvent->GetPosPixel());
+    USHORT nIndex = mpPageSet->GetSelectItemId();
+    MasterPageContainer::Token* pToken 
+        = reinterpret_cast<MasterPageContainer::Token*>(
+            mpPageSet->GetItemData (nIndex));
+    if (pToken != NULL)
+    {
+        pMasterPage 
+            = MasterPageContainer::Instance().GetPageObjectForToken(*pToken);
+        if (pMasterPage != NULL)
+        {
+            // Just in case there is no proper preview in the value set copy
+            // the preview from the MasterPageContainer to the ValueSet.
+            mpPageSet->SetItemImage (nIndex, 
+                MasterPageContainer::Instance().GetPreviewForToken(
+                    *pToken,
+                    mnPreviewWidth));
+        }
+    }
+    return pMasterPage;
+}
+
+
+
+
+IMPL_LINK(MasterPagesContainerSelector,PreviewAvailableCallback,void*,pUserData)
+{
+    UserData* pData = reinterpret_cast<UserData*>(pUserData);
+    mpPageSet->SetItemImage (
+        pData->first, 
+        MasterPageContainer::Instance().GetPreviewForToken (
+            pData->second,
+            mnPreviewWidth));
+    delete pUserData;
+    return 0;
+}
+
+
+
+
+void MasterPagesContainerSelector::AddItemForPage (
+    const String& sURL,
+    const String& sPageName,
+    SdPage* pMasterPage,
+    Image aPreview,
+    bool bCreatePreview)
+{
+    AddItemForToken (
+        MasterPageContainer::Instance().PutMasterPage (
+            sURL,
+            sPageName,
+            String(),
+            pMasterPage,
+            aPreview));
+}
+
+
+
+
+void MasterPagesContainerSelector::AddItemForToken (
+    MasterPageContainer::Token aToken,
+    bool bCreatePreview)
+{
+    if (aToken != MasterPageContainer::NIL_TOKEN)
+    {
+        int nIndex = mpPageSet->GetItemCount() + 1;
+        Image aPreview;
+        if (bCreatePreview)
+            aPreview = MasterPageContainer::Instance().GetPreviewForToken(
+                aToken,
+                mnPreviewWidth,
+                LINK(this,MasterPagesContainerSelector,PreviewAvailableCallback),
+                new UserData(nIndex, aToken));
+        else
+            aPreview = MasterPageContainer::Instance().GetPreviewForToken(
+                aToken,
+                mnPreviewWidth);
+        mpPageSet->InsertItem (
+            nIndex,
+            aPreview,
+            MasterPageContainer::Instance().GetPageNameForToken (aToken));
+        mpPageSet->SetItemData (
+            nIndex, 
+            new MasterPageContainer::Token(aToken));
+    }
+}
+
+
+
+
+void MasterPagesContainerSelector::UpdateAllPreviews (void)
+{
+    MasterPageContainer::Token* pToken;
+    for (USHORT nIndex=1; nIndex<=mpPageSet->GetItemCount(); nIndex++)
+    {
+        pToken = reinterpret_cast<MasterPageContainer::Token*>(
+            mpPageSet->GetItemData (nIndex));
+        if (pToken != NULL)
+            mpPageSet->SetItemImage (nIndex,
+                MasterPageContainer::Instance().GetPreviewForToken (
+                    *pToken,
+                    mnPreviewWidth));
+    }
+    GetParentNode()->RequestResize();
+}
+
+
+
+
+void MasterPagesContainerSelector::UpdatePreview (USHORT nIndex)
+{
+    MasterPageContainer::Token* pToken (
+        reinterpret_cast<MasterPageContainer::Token*>(
+            mpPageSet->GetItemData (nIndex)));
+    if (pToken != NULL)
+    {
+        mpPageSet->SetItemImage (nIndex,
+            MasterPageContainer::Instance().GetPreviewForToken (
+                *pToken,
+                mnPreviewWidth));
+        GetParentNode()->RequestResize();
+    }
+}
+
+
+
+
+void MasterPagesContainerSelector::InvalidatePreview (const SdPage* pPage)
+{
+    MasterPageContainer::Token* pToken;
+    for (USHORT nIndex=1; nIndex<=mpPageSet->GetItemCount(); nIndex++)
+    {
+        pToken = reinterpret_cast<MasterPageContainer::Token*>(
+            mpPageSet->GetItemData (nIndex));
+        if (pToken != NULL)
+            if (MasterPageContainer::Instance().GetPageObjectForToken(*pToken, false) == pPage)
+            {
+                MasterPagesSelector::InvalidatePreview(nIndex);
+                break;
+            }
+    }
+}
+
+
+
+
+void MasterPagesContainerSelector::Clear (void)
+{
+    for (USHORT nIndex=1; nIndex<=mpPageSet->GetItemCount(); nIndex++)
+    {
+        delete reinterpret_cast<MasterPageContainer::Token*>(
+            mpPageSet->GetItemData (nIndex));
+    }
+    MasterPagesSelector::Clear();
+}
+
+} } } // end of namespace ::sd::toolpanel::controls
Index: sd/source/ui/toolpanel/controls/MasterPagesContainerSelector.hxx
===================================================================
RCS file: sd/source/ui/toolpanel/controls/MasterPagesContainerSelector.hxx
diff -N sd/source/ui/toolpanel/controls/MasterPagesContainerSelector.hxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sd/source/ui/toolpanel/controls/MasterPagesContainerSelector.hxx	3 Feb 2005 14:07:34 -0000	1.1.2.1
@@ -0,0 +1,149 @@
+/*************************************************************************
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to the terms of
+ *  either of the following licenses
+ *
+ *         - GNU Lesser General Public License Version 2.1
+ *         - Sun Industry Standards Source License Version 1.1
+ *
+ *  Sun Microsystems Inc., October, 2000
+ *
+ *  GNU Lesser General Public License Version 2.1
+ *  =============================================
+ *  Copyright 2000 by Sun Microsystems, Inc.
+ *  901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License version 2.1, as published by the Free Software Foundation.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public
+ *  License along with this library; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ *
+ *
+ *  Sun Industry Standards Source License Version 1.1
+ *  =================================================
+ *  The contents of this file are subject to the Sun Industry Standards
+ *  Source License Version 1.1 (the "License"); You may not use this file
+ *  except in compliance with the License. You may obtain a copy of the
+ *  License at http://www.openoffice.org/license.html.
+ *
+ *  Software provided under this License is provided on an "AS IS" basis,
+ *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
+ *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
+ *  See the License for the specific provisions governing your rights and
+ *  obligations concerning the Software.
+ *
+ *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
+ *
+ *  Copyright: 2000 by Sun Microsystems, Inc.
+ *
+ *  All Rights Reserved.
+ *
+ *  Contributor(s): _______________________________________
+ *
+ *
+ ************************************************************************/
+
+#ifndef SD_TOOLPANEL_CONTROLS_MASTER_PAGES_CONTAINER_SELECTOR_HXX
+#define SD_TOOLPANEL_CONTROLS_MASTER_PAGES_CONTAINER_SELECTOR_HXX
+
+#include "MasterPagesSelector.hxx"
+
+#ifndef _PRESENTATION_HXX
+#include "pres.hxx"
+#endif
+#include <sfx2/shell.hxx>
+#include <vcl/image.hxx>
+#include "glob.hxx"
+
+#include <queue>
+
+class MouseEvent;
+class SdDrawDocument;
+class SdPage;
+class SfxModule;
+
+namespace sd { 
+class DrawViewShell;
+class TemplateEntry;
+class TemplateDir;
+class ViewShellBase;
+}
+
+namespace sd { namespace toolpanel { namespace controls {
+
+class PreviewValueSet;
+
+/** This intermediate class adds the knowledge about how to access the
+    MasterPageContainer to the MasterPagesSelector class.  This is used by
+    the derived classes RecentMasterPagesSelector and
+    AllMasterPagesSelector.  In contrast the CurrentMasterPagesSelector
+    class is not derived.  It takes its master pages directly from the
+    current document.
+*/
+class MasterPagesContainerSelector
+    : public MasterPagesSelector
+{
+public:
+    TYPEINFO();
+
+    MasterPagesContainerSelector (
+        TreeNode* pParent,
+        SdDrawDocument& rDocument,
+        ViewShellBase& rBase);
+    virtual ~MasterPagesContainerSelector (void);
+
+    virtual SdPage* GetSelectedMasterPage (void);
+
+    virtual void Clear (void);
+
+protected:
+    void AddItemForPage (
+        const String& sURL,
+        const String& sPageName,
+        SdPage* pMasterPage,
+        Image aPreview,
+        bool bCreatePreview = true);
+    void AddItemForToken (
+        MasterPageContainer::Token aToken,
+        bool bCreatePreview = true);
+
+    /** Ask the master page container for the previews of all items and set
+        them to the value set.  Call this function when the size of the
+        previews has changed.
+    */
+    virtual void UpdateAllPreviews (void);
+    virtual void UpdatePreview (USHORT nIndex);
+
+    /** Call this method to tell a selector object that the preview that
+        belongs to the given page does not reflect the pages content
+        anymore.  This method forwards the call to the variant that takes a
+        value set index as argument so call that variant directly when the
+        index is already present.
+        @param pPage
+            When NULL or a pointer to page is given that does not belong to
+            the selector then the call is ignored.
+    */
+    virtual void InvalidatePreview (const SdPage* pPage);
+
+    DECL_LINK(PreviewAvailableCallback, void*);
+};
+
+} } } // end of namespace ::sd::toolpanel::controls
+
+#endif
Index: sd/source/ui/toolpanel/controls/MasterPagesSelector.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/MasterPagesSelector.cxx,v
retrieving revision 1.5
retrieving revision 1.5.80.2
diff -u -p -u -p -r1.5 -r1.5.80.2
--- sd/source/ui/toolpanel/controls/MasterPagesSelector.cxx	26 Nov 2004 15:09:04 -0000	1.5
+++ sd/source/ui/toolpanel/controls/MasterPagesSelector.cxx	3 Feb 2005 14:13:18 -0000	1.5.80.2
@@ -134,12 +134,6 @@ using namespace ::sd::toolpanel::control
 
 using namespace ::com::sun::star::text;
 
-namespace {
-
-typedef ::std::pair<int, ::sd::toolpanel::controls::MasterPageContainer::Token> UserData;
-
-} //end of anonymous namespace
-
 
 
 namespace sd { namespace toolpanel { namespace controls {
@@ -168,7 +162,10 @@ MasterPagesSelector::MasterPagesSelector
       mrDocument(rDocument),
       mpPageSet (new PreviewValueSet(pParent)),
       mnPreviewWidth (snSmallPreviewWidth),
-      mrBase(rBase)
+      mrBase(rBase),
+      mnDefaultClickAction(SID_TP_APPLY_TO_ALL_SLIDES),
+      maPreviewUpdateTimer(),
+      maPreviewUpdateQueue()
 {
 	mpPageSet->SetSelectHdl (LINK(this, MasterPagesSelector, ClickHandler));
 	mpPageSet->SetRightMouseClickHandler (
@@ -177,6 +174,9 @@ MasterPagesSelector::MasterPagesSelector
 
 	SetPool (&rDocument.GetPool());
 
+    maPreviewUpdateTimer.SetTimeoutHdl (LINK(this,MasterPagesSelector,ProcessPreviewUpdateRequest));
+    maPreviewUpdateTimer.SetTimeout(100/*ms*/);
+
     mpPageSet->Show();
 }
 
@@ -185,8 +185,6 @@ MasterPagesSelector::MasterPagesSelector
 
 MasterPagesSelector::~MasterPagesSelector (void)
 {
-    MasterPageContainer::Instance().RemoveCallback (
-	LINK(this,MasterPagesSelector,PreviewAvailableCallback));
     Clear();
     mpPageSet.reset();
     if (GetShellManager() != NULL)
@@ -240,7 +238,7 @@ IMPL_LINK(MasterPagesSelector, ClickHand
     // have the option to call the assignment method directly.)
     if (GetShellManager() != NULL)
         GetShellManager()->MoveToTop (this);
-    GetDispatcher()->Execute (SID_TP_APPLY_TO_ALL_SLIDES);
+    GetDispatcher()->Execute(mnDefaultClickAction);
 
     return 0;
 }
@@ -270,38 +268,36 @@ IMPL_LINK(MasterPagesSelector, RightClic
 
 
 
-SdPage* MasterPagesSelector::GetSelectedMasterPage (void)
+IMPL_LINK(MasterPagesSelector, ProcessPreviewUpdateRequest, Timer*, pTimer)
 {
-    SdPage* pMasterPage = NULL;
-    //    USHORT nIndex = maPageSet.GetItemId (pEvent->GetPosPixel());
-    USHORT nIndex = mpPageSet->GetSelectItemId();
-    MasterPageContainer::Token* pToken 
-        = reinterpret_cast<MasterPageContainer::Token*>(
-            mpPageSet->GetItemData (nIndex));
-    if (pToken != NULL)
-    {
-        pMasterPage 
-            = MasterPageContainer::Instance().GetPageObjectForToken(*pToken);
-        if (pMasterPage != NULL)
-        {
-            OSL_TRACE ("assigning master page %s",
-                ::rtl::OUStringToOString(pMasterPage->GetName(),
-                    RTL_TEXTENCODING_UTF8).getStr());
-
-            // Just in case there is no proper preview in the value set copy
-            // the preview from the MasterPageContainer to the ValueSet.
-            mpPageSet->SetItemImage (nIndex, 
-                MasterPageContainer::Instance().GetPreviewForToken(
-                    *pToken,
-                    mnPreviewWidth));
-        }
+    while ( ! (maPreviewUpdateQueue.empty() || GetpApp()->AnyInput()))
+    {
+        USHORT nIndex = maPreviewUpdateQueue.front();
+        maPreviewUpdateQueue.pop();
+        UpdatePreview(nIndex);
     }
-    return pMasterPage;
+
+    // Restart the timer for processing the remaining queue entries.
+    if ( ! maPreviewUpdateQueue.empty())
+        maPreviewUpdateTimer.Start();
+
+    return 1;
+}
+
+
+
+
+SdPage* MasterPagesSelector::GetSelectedMasterPage (void)
+{
+    return NULL;
 }
 
 
 
 
+/** Assemble a list of all slides of the document and pass it to
+    AssignMasterPageToPageList().
+*/
 void MasterPagesSelector::AssignMasterPageToAllSlides (SdPage* pMasterPage)
 {
     do
@@ -313,7 +309,9 @@ void MasterPagesSelector::AssignMasterPa
         if (nPageCount == 0)
             break;
 
-        // Get a list of selected pages.
+        // Get a list of all pages.  As a little optimization we only
+        // include pages that do not already have the given master page
+        // assigned.
         String sFullLayoutName (pMasterPage->GetLayoutName());
         ::std::vector<SdPage*> aPageList;
         for (USHORT nPageIndex=0; nPageIndex<nPageCount; nPageIndex++)
@@ -334,6 +332,9 @@ void MasterPagesSelector::AssignMasterPa
 
 
 
+/** Assemble a list of the currently selected slides (selected in a visible
+    slide sorter) and pass it to AssignMasterPageToPageList().
+*/
 void MasterPagesSelector::AssignMasterPageToSelectedSlides (
     SdPage* pMasterPage)
 {
@@ -392,9 +393,7 @@ void MasterPagesSelector::AssignMasterPa
 {
     do
     {
-        if (pMasterPage == NULL)
-            break;
-        if (rPageList.size() == 0)
+        if (pMasterPage == NULL && pMasterPage->IsMasterPage())
             break;
 
         // Make the layout name by stripping ouf the layout postfix from the
@@ -403,10 +402,13 @@ void MasterPagesSelector::AssignMasterPa
         String sBaseLayoutName (sFullLayoutName);
         sBaseLayoutName.Erase (sBaseLayoutName.SearchAscii (SD_LT_SEPARATOR));
 
-        // Test whether there are pages that are not already associated with
-        // the master page.
-        bool bAssignmentNecessary (false);
+        if (rPageList.size() == 0)
+            break;
+
+        // Create a second list that contains only the valid pointers to
+        // pages for which an assignment is necessary.
         ::std::vector<SdPage*>::const_iterator iPage;
+        ::std::vector<SdPage*> aCleanedList;
         for (iPage=rPageList.begin(); 
              iPage!=rPageList.end(); 
              ++iPage)
@@ -414,21 +416,49 @@ void MasterPagesSelector::AssignMasterPa
             if (*iPage != NULL
                 && (*iPage)->GetLayoutName().CompareTo(sFullLayoutName)!=0)
             {
-                bAssignmentNecessary = true;
-                break;
+                aCleanedList.push_back(*iPage);
             }
         }
-        if ( ! bAssignmentNecessary)
+        if (aCleanedList.size() == 0)
             break;
 
-        // Get notes master page.
-        SdDrawDocument* pSourceDocument
-            = static_cast<SdDrawDocument*>(pMasterPage->GetModel());
-        SdPage* pNotesMasterPage = static_cast<SdPage*>(
-            pSourceDocument->GetMasterPage (pMasterPage->GetPageNum()+1));
-        if (pNotesMasterPage == NULL)
+        SdPage* pMasterPageInDocument = ProvideMasterPage(pMasterPage,rPageList);
+        if (pMasterPageInDocument == NULL)
             break;
 
+        // Assign the master pages to the given list of pages.
+        for (iPage=aCleanedList.begin(); 
+             iPage!=aCleanedList.end(); 
+             ++iPage)
+        {
+            AssignMasterPageToPage (
+                pMasterPageInDocument,
+                sBaseLayoutName,
+                *iPage);
+        }
+    }
+    while (false);
+}
+
+
+
+
+SdPage* MasterPagesSelector::ProvideMasterPage (
+    SdPage* pMasterPage,
+    const ::std::vector<SdPage*>& rPageList)
+{
+    SdPage* pMasterPageInDocument = NULL;
+
+    // Get notes master page.
+    SdDrawDocument* pSourceDocument = static_cast<SdDrawDocument*>(pMasterPage->GetModel());
+    SdPage* pNotesMasterPage = static_cast<SdPage*>(
+        pSourceDocument->GetMasterPage (pMasterPage->GetPageNum()+1));
+    if (pNotesMasterPage != NULL)
+    {
+        // When the given master page or its associated notes master page do
+        // not already belong to the document we have to create copies of
+        // them and insert them into the document. 
+
         // Determine the position where the new master pages are inserted.
         // By default they are inserted at the end.  When we assign to a
         // master page then insert after the last of the (selected) pages.
@@ -438,22 +468,14 @@ void MasterPagesSelector::AssignMasterPa
             nInsertionIndex = rPageList.back()->GetPageNum();
         }
 
-        // Add copies of the master pages.
-        SdPage* pClonedMasterPage = AddMasterPage (&mrDocument, pMasterPage, nInsertionIndex);
-        AddMasterPage (&mrDocument, pNotesMasterPage, nInsertionIndex+1);
-
-        // Assign the master pages to the selected pages.
-        for (iPage=rPageList.begin(); 
-             iPage!=rPageList.end(); 
-             ++iPage)
-        {
-            AssignMasterPageToPage (
-                pClonedMasterPage, 
-                sBaseLayoutName,
-                *iPage);
-        }
+        if (pMasterPage->GetModel() != &mrDocument)
+            pMasterPageInDocument = AddMasterPage (&mrDocument, pMasterPage, nInsertionIndex);
+        else
+            pMasterPageInDocument = pMasterPage;
+        if (pNotesMasterPage->GetModel() != &mrDocument)
+            AddMasterPage (&mrDocument, pNotesMasterPage, nInsertionIndex+1);
     }
-    while (false);
+    return pMasterPageInDocument;
 }
 
 
@@ -641,94 +663,20 @@ void MasterPagesSelector::ProvideStyles 
 
 
 
-IMPL_LINK(MasterPagesSelector,PreviewAvailableCallback,void*,pUserData)
-{
-    UserData* pData = reinterpret_cast<UserData*>(pUserData);
-    mpPageSet->SetItemImage (
-        pData->first, 
-        MasterPageContainer::Instance().GetPreviewForToken (
-            pData->second,
-            mnPreviewWidth));
-    delete pUserData;
-    return 0;
-}
-
-
-
-
-void MasterPagesSelector::AddItemForPage (
-    const String& sURL,
-    const String& sPageName,
-    SdPage* pMasterPage,
-    Image aPreview,
-    bool bCreatePreview)
-{
-    AddItemForToken (
-        MasterPageContainer::Instance().PutMasterPage (
-            sURL,
-            sPageName,
-            pMasterPage,
-            aPreview));
-}
-
-
-
-
-void MasterPagesSelector::AddItemForToken (
-    MasterPageContainer::Token aToken,
-    bool bCreatePreview)
+void MasterPagesSelector::SetPreviewWidth (int nPreviewWidth)
 {
-    if (aToken != MasterPageContainer::NIL_TOKEN)
-    {
-        int nIndex = mpPageSet->GetItemCount() + 1;
-        Image aPreview;
-        if (bCreatePreview)
-            aPreview = MasterPageContainer::Instance().GetPreviewForToken(
-                aToken,
-                mnPreviewWidth,
-                LINK(this,MasterPagesSelector,PreviewAvailableCallback),
-                new UserData(nIndex, aToken));
-        else
-            aPreview = MasterPageContainer::Instance().GetPreviewForToken(
-                aToken,
-                mnPreviewWidth);
-        mpPageSet->InsertItem (
-            nIndex,
-            aPreview,
-            MasterPageContainer::Instance().GetPageNameForToken (aToken));
-        mpPageSet->SetItemData (
-            nIndex, 
-            new MasterPageContainer::Token(aToken));
-    }
-}
-
-
-
+    mpPageSet->SetPreviewWidth (nPreviewWidth);
+    mnPreviewWidth = nPreviewWidth;
 
-void MasterPagesSelector::FillPreviews (void)
-{
-    MasterPageContainer::Token* pToken;
-    for (USHORT nIndex=1; nIndex<=mpPageSet->GetItemCount(); nIndex++)
-    {
-        pToken = reinterpret_cast<MasterPageContainer::Token*>(
-            mpPageSet->GetItemData (nIndex));
-        if (pToken != NULL)
-            mpPageSet->SetItemImage (nIndex,
-                MasterPageContainer::Instance().GetPreviewForToken (
-                    *pToken,
-                    mnPreviewWidth));
-    }
-    GetParentNode()->RequestResize();
+    //    UpdateAllPreviews();
+    InvalidateAllPreviews();
 }
 
 
 
 
-void MasterPagesSelector::SetPreviewWidth (int nPreviewWidth)
+void MasterPagesSelector::UpdateSelection (void)
 {
-    mpPageSet->SetPreviewWidth (nPreviewWidth);
-    mnPreviewWidth = nPreviewWidth;
-    FillPreviews();
 }
 
 
@@ -818,26 +766,29 @@ void MasterPagesSelector::GetState (SfxI
 
 
 
-void MasterPagesSelector::UpdateSelection (void)
+void MasterPagesSelector::InvalidatePreview (USHORT nIndex)
 {
+    maPreviewUpdateQueue.push(nIndex);
+    maPreviewUpdateTimer.Start();
 }
 
 
 
 
-void MasterPagesSelector::Fill (void)
+void MasterPagesSelector::InvalidateAllPreviews (void)
 {
+    while ( ! maPreviewUpdateQueue.empty())
+        maPreviewUpdateQueue.pop();
+    for (USHORT nIndex=1; nIndex<=mpPageSet->GetItemCount(); nIndex++)
+        maPreviewUpdateQueue.push(nIndex);
+    maPreviewUpdateTimer.Start();
 }
+        
 
 
 
 void MasterPagesSelector::Clear (void)
 {
-    for (USHORT nIndex=1; nIndex<=mpPageSet->GetItemCount(); nIndex++)
-    {
-        delete reinterpret_cast<MasterPageContainer::Token*>(
-            mpPageSet->GetItemData (nIndex));
-    }
     mpPageSet->Clear ();
 }
 
Index: sd/source/ui/toolpanel/controls/MasterPagesSelector.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/MasterPagesSelector.hxx,v
retrieving revision 1.3
retrieving revision 1.3.120.2
diff -u -p -u -p -r1.3 -r1.3.120.2
--- sd/source/ui/toolpanel/controls/MasterPagesSelector.hxx	28 Oct 2004 13:32:24 -0000	1.3
+++ sd/source/ui/toolpanel/controls/MasterPagesSelector.hxx	3 Feb 2005 14:13:10 -0000	1.3.120.2
@@ -72,6 +72,8 @@
 #include <vcl/image.hxx>
 #include "glob.hxx"
 
+#include <queue>
+
 class MouseEvent;
 class SdDrawDocument;
 class SdPage;
@@ -141,19 +143,57 @@ public:
         this method at the CurrentMasterPagesSelector to select the
         previews of the master pages that are assigned to the new
         current page.
+
+        The default implementation of this method ignores the call. This is
+        used by e.g. the RecentMasterPagesSelector because it does not show
+        the currently used master pages by default and thus is not
+        influenced by its changes.
     */
     virtual void UpdateSelection (void);
 
-    virtual void Fill (void);
+    virtual void Fill (void) = 0;
+
+    /** Make the selector empty.  This method clear the value set from any
+        entries. Overload this method to add functionality, especially to
+        destroy objects set as data items at the value set.
+    */
     virtual void Clear (void);
 
+    /** Call this method to tell a selector object that the preview that
+        belongs to the given page does not reflect the pages content
+        anymore.  This method forwards the call to the variant that takes a
+        value set index as argument so call that variant directly when the
+        index is already present.
+        @param pPage
+            When NULL or a pointer to page is given that does not belong to
+            the selector then the call is ignored.
+    */
+    virtual void InvalidatePreview (const SdPage* pPage) = 0;
+    /** Invalidate the preview that is specified via an index into the value
+        set.
+    */
+    void InvalidatePreview (USHORT nIndex);
+    void InvalidateAllPreviews (void);
+
 protected:
     SdDrawDocument& mrDocument;
     ::std::auto_ptr<PreviewValueSet> mpPageSet;
     int mnPreviewWidth;
     ViewShellBase& mrBase;
+    /** Slot that is executed as default action when the left mouse button is
+        clicked over a master page.
+    */
+	sal_uInt16 mnDefaultClickAction;
+    /** Timer for scheduling updates of master page previews.
+    */
+    Timer maPreviewUpdateTimer;
+    /** Pages with pointers in this queue have their previews updated
+        eventually.  Filled by InvalidatePreview() and operated upon by
+        UpdatePreviews(). 
+    */
+    ::std::queue<USHORT> maPreviewUpdateQueue;
 
-    SdPage* GetSelectedMasterPage (void);
+    virtual SdPage* GetSelectedMasterPage (void);
 
     /** Assign the given master page to all slides of the document.
         @param pMasterPage
@@ -182,9 +222,10 @@ protected:
         them to the value set.  Call this function when the size of the
         previews has changed.
     */
-    void FillPreviews (void);
+    virtual void UpdateAllPreviews (void) = 0;
+    virtual void UpdatePreview (USHORT nIndex) = 0;
 
-    DECL_LINK(PreviewAvailableCallback, void*);
+    DECL_LINK(ProcessPreviewUpdateRequest, Timer*);
 
 private:
     DECL_LINK(ClickHandler, PreviewValueSet*);
@@ -225,6 +266,10 @@ private:
         SdPage* pMasterPage,
         const String& rsBaseLayoutName,
         SdPage* pPage);
+
+    SdPage* ProvideMasterPage (
+        SdPage* pMasterPage,
+        const ::std::vector<SdPage*>& rPageList);
 };
 
 } } } // end of namespace ::sd::toolpanel::controls
Index: sd/source/ui/toolpanel/controls/MasterPagesSelectorListener.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/MasterPagesSelectorListener.cxx,v
retrieving revision 1.5
retrieving revision 1.5.80.1
diff -u -p -u -p -r1.5 -r1.5.80.1
--- sd/source/ui/toolpanel/controls/MasterPagesSelectorListener.cxx	26 Nov 2004 15:02:01 -0000	1.5
+++ sd/source/ui/toolpanel/controls/MasterPagesSelectorListener.cxx	3 Feb 2005 14:15:37 -0000	1.5.80.1
@@ -344,6 +344,12 @@ void MasterPagesSelectorListener::Notify
             case HINT_SWITCHTOPAGE:
                 mrSelector.UpdateSelection();
                 break;
+
+            case HINT_OBJCHG:
+            case HINT_OBJINSERTED:
+            case HINT_OBJREMOVED:
+                mrSelector.InvalidatePreview(static_cast<const SdPage*>(rSdrHint.GetPage()));
+                break;
         }
     }
 }
Index: sd/source/ui/toolpanel/controls/RecentMasterPagesSelector.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/RecentMasterPagesSelector.cxx,v
retrieving revision 1.3
retrieving revision 1.3.80.1
diff -u -p -u -p -r1.3 -r1.3.80.1
--- sd/source/ui/toolpanel/controls/RecentMasterPagesSelector.cxx	26 Nov 2004 15:09:22 -0000	1.3
+++ sd/source/ui/toolpanel/controls/RecentMasterPagesSelector.cxx	3 Feb 2005 14:17:03 -0000	1.3.80.1
@@ -76,7 +76,7 @@ RecentMasterPagesSelector::RecentMasterP
     TreeNode* pParent,
     SdDrawDocument& rDocument,
     ViewShellBase& rBase)
-    : MasterPagesSelector (pParent, rDocument, rBase)
+    : MasterPagesContainerSelector (pParent, rDocument, rBase)
 {
 	SetName (String(RTL_CONSTASCII_USTRINGPARAM("RecentMasterPagesSelector")));
 }
@@ -117,8 +117,9 @@ IMPL_LINK(RecentMasterPagesSelector,Mast
 void RecentMasterPagesSelector::Fill (void)
 {
     Clear ();
-    MasterPageObserver::MasterPageNameSet aCurrentNames;
+
     // Create a set of names of the master pages used by the given document.
+    MasterPageObserver::MasterPageNameSet aCurrentNames;
     USHORT nMasterPageCount = mrDocument.GetMasterSdPageCount(PK_STANDARD);
     USHORT nIndex;
     for (nIndex=0; nIndex<nMasterPageCount; nIndex++)
@@ -129,11 +130,17 @@ void RecentMasterPagesSelector::Fill (vo
     }
     MasterPageObserver::MasterPageNameSet::iterator aI;
 
+    // Insert the recently used master pages that are not currently used.
     int nPageCount = RecentlyUsedMasterPages::Instance().GetMasterPageCount();
     for (nIndex=0; nIndex<nPageCount; nIndex++)
     {
+        // Add the page when a) the style name is empty, i.e. it has not yet
+        // been loaded (and thus can not be in use) or otherwise b) the
+        // style name is not currently in use.
+        String sStyleName (RecentlyUsedMasterPages::Instance().GetMasterPageStyleName(nIndex));
         String sPageName (RecentlyUsedMasterPages::Instance().GetMasterPageName(nIndex));
-        if (aCurrentNames.find(sPageName) == aCurrentNames.end())
+        if (sStyleName.Len()==0 
+            || aCurrentNames.find(sStyleName) == aCurrentNames.end())
         {
             AddItemForPage (
                 String(),
Index: sd/source/ui/toolpanel/controls/RecentMasterPagesSelector.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/RecentMasterPagesSelector.hxx,v
retrieving revision 1.2
retrieving revision 1.2.220.1
diff -u -p -u -p -r1.2 -r1.2.220.1
--- sd/source/ui/toolpanel/controls/RecentMasterPagesSelector.hxx	13 Jul 2004 14:47:21 -0000	1.2
+++ sd/source/ui/toolpanel/controls/RecentMasterPagesSelector.hxx	3 Feb 2005 14:16:56 -0000	1.2.220.1
@@ -62,13 +62,13 @@
 #ifndef SD_TOOLPANEL_CONTROLS_RECENT_MASTER_PAGES_SELECTOR_HXX
 #define SD_TOOLPANEL_CONTROLS_RECENT_MASTER_PAGES_SELECTOR_HXX
 
-#include "MasterPagesSelector.hxx"
+#include "MasterPagesContainerSelector.hxx"
 
 namespace sd { namespace toolpanel { namespace controls {
 
 
 class RecentMasterPagesSelector
-    : public MasterPagesSelector
+    : public MasterPagesContainerSelector
 {
 public:
     RecentMasterPagesSelector (
Index: sd/source/ui/toolpanel/controls/RecentlyUsedMasterPages.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/RecentlyUsedMasterPages.cxx,v
retrieving revision 1.4
retrieving revision 1.4.80.1
diff -u -p -u -p -r1.4 -r1.4.80.1
--- sd/source/ui/toolpanel/controls/RecentlyUsedMasterPages.cxx	26 Nov 2004 15:09:40 -0000	1.4
+++ sd/source/ui/toolpanel/controls/RecentlyUsedMasterPages.cxx	3 Feb 2005 14:17:41 -0000	1.4.80.1
@@ -176,6 +176,15 @@ RecentlyUsedMasterPages::RecentlyUsedMas
 
 
 
+RecentlyUsedMasterPages::~RecentlyUsedMasterPages (void)
+{
+    MasterPageObserver::Instance().RemoveEventListener(
+        LINK(this,RecentlyUsedMasterPages,MasterPageChangeListener));
+}
+
+
+
+
 void RecentlyUsedMasterPages::LateInit (void)
 {
     LoadPersistentValues ();
@@ -319,6 +328,7 @@ void RecentlyUsedMasterPages::LoadPersis
                 MasterPageContainer::Token aToken (
                     MasterPageContainer::Instance().PutMasterPage(
                         aMasterPages[j].first,
+                        OUString(),
                         aMasterPages[j].second,
                         NULL,
                         Image()));
@@ -381,7 +391,7 @@ void RecentlyUsedMasterPages::SavePersis
                     aValue <<= OUString(GetURL(i));
                     xChild->replaceByName (sURLMemberName, aValue);
 
-                    aValue <<= OUString(GetMasterPageName(i));
+                    aValue <<= OUString(GetMasterPageStyleName(i));
                     xChild->replaceByName (sNameMemberName, aValue);
                 }
             }
@@ -400,15 +410,6 @@ void RecentlyUsedMasterPages::SavePersis
 
 
 
-RecentlyUsedMasterPages::~RecentlyUsedMasterPages (void)
-{
-    MasterPageObserver::Instance().RemoveEventListener(
-        LINK(this,RecentlyUsedMasterPages,MasterPageChangeListener));
-}
-
-
-
-
 void RecentlyUsedMasterPages::AddEventListener (const Link& rEventListener)
 {
     if (::std::find (
@@ -461,6 +462,15 @@ String RecentlyUsedMasterPages::GetMaste
 
 
 
+String RecentlyUsedMasterPages::GetMasterPageStyleName (int nIndex) const
+{
+    MasterPageContainer::Token aToken (maMasterPages[nIndex]);
+    return MasterPageContainer::Instance().GetStyleNameForToken (aToken);
+}
+
+
+
+
 SdPage* RecentlyUsedMasterPages::GetSlide (int nIndex) const
 {
     MasterPageContainer::Token aToken (maMasterPages[nIndex]);
@@ -511,15 +521,14 @@ IMPL_LINK(RecentlyUsedMasterPages, Maste
         case MasterPageObserverEvent::ET_MASTER_PAGE_ADDED:
         case MasterPageObserverEvent::ET_MASTER_PAGE_EXISTS:
             AddMasterPage(
-                MasterPageContainer::Instance().GetTokenForPageName(
+                MasterPageContainer::Instance().GetTokenForStyleName(
                     pEvent->mrMasterPageName));
             break;
 
         case MasterPageObserverEvent::ET_MASTER_PAGE_REMOVED:
             // Do not change the list of recently master pages (the deleted
-            // page was recently used) but tell the listeners how may want
-            // to update their lists of recently used master pages that are
-            // not currently in used.
+            // page was recently used) but tell the listeners.  They may want
+            // to update their lists.
             SendEvent();
             break;
     }
Index: sd/source/ui/toolpanel/controls/RecentlyUsedMasterPages.hxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/RecentlyUsedMasterPages.hxx,v
retrieving revision 1.4
retrieving revision 1.4.80.1
diff -u -p -u -p -r1.4 -r1.4.80.1
--- sd/source/ui/toolpanel/controls/RecentlyUsedMasterPages.hxx	26 Nov 2004 15:10:00 -0000	1.4
+++ sd/source/ui/toolpanel/controls/RecentlyUsedMasterPages.hxx	3 Feb 2005 14:17:48 -0000	1.4.80.1
@@ -101,6 +101,7 @@ public:
     int GetMasterPageCount (void) const;
     String GetURL (int nIndex) const;
     String GetMasterPageName (int nIndex) const;
+    String GetMasterPageStyleName (int nIndex) const;
     SdPage* GetSlide (int nIndex) const;
     SdPage* GetMasterPage (int nIndex) const;
     Image GetMasterPagePreview (int nIndex, int nWidth) const;
Index: sd/source/ui/toolpanel/controls/makefile.mk
===================================================================
RCS file: /cvs/graphics/sd/source/ui/toolpanel/controls/makefile.mk,v
retrieving revision 1.4
retrieving revision 1.4.80.1
diff -u -p -u -p -r1.4 -r1.4.80.1
--- sd/source/ui/toolpanel/controls/makefile.mk	26 Nov 2004 20:26:52 -0000	1.4
+++ sd/source/ui/toolpanel/controls/makefile.mk	3 Feb 2005 14:08:16 -0000	1.4.80.1
@@ -85,6 +85,7 @@ SLOFILES =      							\
 	$(SLO)$/MasterPageObserver.obj			\
 	$(SLO)$/MasterPagesPanel.obj			\
 	$(SLO)$/MasterPagesSelector.obj			\
+	$(SLO)$/MasterPagesContainerSelector.obj\
 	$(SLO)$/MasterPagesSelectorListener.obj	\
 	$(SLO)$/MasterPageContainer.obj			\
 	$(SLO)$/PreviewValueSet.obj				\
Index: sd/source/ui/unoidl/unoobj.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/unoidl/unoobj.cxx,v
retrieving revision 1.43
retrieving revision 1.43.28.1
diff -u -p -u -p -r1.43 -r1.43.28.1
--- sd/source/ui/unoidl/unoobj.cxx	13 Jan 2005 17:29:01 -0000	1.43
+++ sd/source/ui/unoidl/unoobj.cxx	3 Feb 2005 22:38:09 -0000	1.43.28.1
@@ -207,6 +207,9 @@ using ::com::sun::star::uno::Any;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::drawing::XShape;
 
+extern OUString getPageApiNameFromUiNameImpl( const String& rUIName );
+extern String getUiNameFromPageApiNameImpl( const ::rtl::OUString& rApiName );
+
 ///////////////////////////////////////////////////////////////////////
 
 DECLARE_STL_STDKEY_MAP(sal_uInt32, SfxExtItemPropertySetInfo*, SdExtPropertySetInfoCache);
@@ -780,6 +783,17 @@ void SAL_CALL SdXShape::setPropertyValue
 				else
 				{
 					aString = pInfo->aBookmark ;
+					sal_Int32 nPos = aString.lastIndexOf( sal_Unicode('#') );
+					if( nPos >= 0 )
+					{
+						OUString aURL( aString.copy( 0, nPos+1 ) );
+						OUString aName( aString.copy( nPos+1 ) );
+						if(pDoc->GetPageByName( aName, bIsMasterPage ) != SDRPAGE_NOTFOUND)
+						{
+							aURL += SdDrawPage::getPageApiNameFromUiName( aName );
+							aString = aURL;
+						}
+					}
 				}
 			}
 
@@ -1550,20 +1564,16 @@ void SAL_CALL SdUnoEventsAccess::replace
 				{
 					if( eClickAction == presentation::ClickAction_BOOKMARK )
 					{
-						const OUString aApiPageName( RTL_CONSTASCII_USTRINGPARAM("page") );
-
-						if( aStrBookmark.indexOf( aApiPageName ) == 0 )
+						aStrBookmark = getUiNameFromPageApiNameImpl( aStrBookmark );
+					}
+					else if( eClickAction == presentation::ClickAction_DOCUMENT )
+					{
+						sal_Int32 nPos = aStrBookmark.lastIndexOf( sal_Unicode('#') );
+						if( nPos >= 0 )
 						{
-							if( aStrBookmark.indexOf( aApiPageName ) == 0 )
-							{
-								sal_Int32 nPageNumber = aStrBookmark.copy( aApiPageName.getLength() ).toInt32();
-								OUStringBuffer sBuffer;
-								String aPageName( SdResId(STR_PAGE) );
-								sBuffer.append( aPageName );
-								sBuffer.append( sal_Unicode( ' ' ) );
-								sBuffer.append( nPageNumber );
-								aStrBookmark = sBuffer.makeStringAndClear();
-							}
+							OUString aURL( aStrBookmark.copy( 0, nPos+1 ) );
+							aURL += getUiNameFromPageApiNameImpl( aStrBookmark.copy( nPos+1 ) );
+							aStrBookmark = aURL;
 						}
 					}
 
@@ -1798,37 +1808,30 @@ uno::Any SAL_CALL SdUnoEventsAccess::get
 			break;
 		case presentation::ClickAction_BOOKMARK:
 			{
-				String aPageName( SdResId(STR_PAGE) );
-				aPageName += sal_Unicode( ' ' );
-
-				const OUString aStrBookmark( pInfo->aBookmark );
-				if( aStrBookmark.indexOf( aPageName ) == 0 )
-				{
-					sal_Int32 nPageNumber = aStrBookmark.copy( aPageName.Len() ).toInt32();
-					OUStringBuffer sBuffer;
-					sBuffer.appendAscii( RTL_CONSTASCII_STRINGPARAM( "page" ) );
-					sBuffer.append( nPageNumber );
-					aAny <<= sBuffer.makeStringAndClear();
-				}
-				else
-				{
-					aAny <<= aStrBookmark;
-				}
-
+				const OUString aStrBookmark( getPageApiNameFromUiNameImpl( pInfo->aBookmark ) );
 				pProperties->Name = maStrBookmark;
 				pProperties->Handle = -1;
-				pProperties->Value = aAny;
+				pProperties->Value <<= aStrBookmark;
 				pProperties->State = beans::PropertyState_DIRECT_VALUE;
 			}
 			break;
 
 		case presentation::ClickAction_DOCUMENT:
 		case presentation::ClickAction_PROGRAM:
-			aAny <<= OUString( pInfo->aBookmark );
-			pProperties->Name = maStrBookmark;
-			pProperties->Handle = -1;
-			pProperties->Value = aAny;
-			pProperties->State = beans::PropertyState_DIRECT_VALUE;
+			{
+				OUString aString( pInfo->aBookmark );
+				sal_Int32 nPos = aString.lastIndexOf( sal_Unicode('#') );
+				if( nPos >= 0 )
+				{
+					OUString aURL( aString.copy( 0, nPos+1 ) );
+					aURL += getPageApiNameFromUiNameImpl( aString.copy( nPos+1 ) );
+					aString = aURL;
+				}
+				pProperties->Name = maStrBookmark;
+				pProperties->Handle = -1;
+				pProperties->Value <<= aString;
+				pProperties->State = beans::PropertyState_DIRECT_VALUE;
+			}
 			break;
 
 		case presentation::ClickAction_VANISH:
Index: sd/source/ui/unoidl/unopage.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/unoidl/unopage.cxx,v
retrieving revision 1.68
retrieving revision 1.68.8.1
diff -u -p -u -p -r1.68 -r1.68.8.1
--- sd/source/ui/unoidl/unopage.cxx	21 Jan 2005 18:20:10 -0000	1.68
+++ sd/source/ui/unoidl/unopage.cxx	3 Feb 2005 22:38:54 -0000	1.68.8.1
@@ -854,6 +854,8 @@ void SAL_CALL SdGenericDrawPage::setProp
 
 			if( !(aHeaderFooterSettings == GetPage()->getHeaderFooterSettings()) )
 				GetPage()->setHeaderFooterSettings( aHeaderFooterSettings );
+
+			break;
 		}
 
 		case WID_PAGE_LDBITMAP:
@@ -1985,7 +1987,7 @@ OUString SdDrawPage::getPageApiName( SdP
 	return aPageName;
 }
 
-OUString SdDrawPage::getPageApiNameFromUiName( const String& rUIName )
+OUString getPageApiNameFromUiNameImpl( const String& rUIName )
 {
 	OUString aApiName;
 
@@ -2005,7 +2007,12 @@ OUString SdDrawPage::getPageApiNameFromU
 	return aApiName;
 }
 
-String SdDrawPage::getUiNameFromPageApiName( const ::rtl::OUString& rApiName )
+OUString SdDrawPage::getPageApiNameFromUiName( const String& rUIName )
+{
+	return getPageApiNameFromUiNameImpl( rUIName );
+}
+
+String getUiNameFromPageApiNameImpl( const ::rtl::OUString& rApiName )
 {
 	const String aDefPageName(RTL_CONSTASCII_USTRINGPARAM( sEmptyPageName ));
 	if( rApiName.compareTo( aDefPageName, aDefPageName.Len() ) == 0 )
@@ -2043,6 +2050,11 @@ String SdDrawPage::getUiNameFromPageApiN
 	return rApiName;
 }
 
+String SdDrawPage::getUiNameFromPageApiName( const ::rtl::OUString& rApiName )
+{
+	return getUiNameFromPageApiNameImpl( rApiName );
+}
+
 // XServiceInfo
 OUString SAL_CALL SdDrawPage::getImplementationName() throw(uno::RuntimeException)
 {
Index: sd/source/ui/unoidl/unopres.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/unoidl/unopres.cxx,v
retrieving revision 1.13
retrieving revision 1.13.2.1
diff -u -p -u -p -r1.13 -r1.13.2.1
--- sd/source/ui/unoidl/unopres.cxx	25 Jan 2005 15:19:23 -0000	1.13
+++ sd/source/ui/unoidl/unopres.cxx	3 Feb 2005 15:00:34 -0000	1.13.2.1
@@ -523,19 +523,24 @@ void SAL_CALL SdXPresentation::start(  )
 {
 	OGuard aGuard( Application::GetSolarMutex() );
 
-	if( mpModel == NULL )
+	if( (mpModel == 0) || (mpModel->GetDocShell() == 0) )
 		throw lang::DisposedException();
 
 	::sd::DrawDocShell* pDocSh = mpModel->GetDocShell();
-	::sd::ViewShell* pViewSh = pDocSh?pDocSh->GetViewShell():NULL;
-	::sd::Slideshow* pSlideShow = pViewSh?pViewSh->GetSlideShow():NULL;
+	SfxDispatcher* pDispatcher = pDocSh->GetDispatcher();
 
-	// nur starten wenn die Presentation noch nicht laeuft
-	if(pSlideShow == NULL)
+	if(!pDispatcher)
 	{
-		( pViewSh ? pViewSh->GetViewFrame() : SfxViewFrame::Current() )->GetDispatcher()->Execute( 
-			SID_PRESENTATION, SFX_CALLMODE_SYNCHRON | SFX_CALLMODE_RECORD );
+		// current view shell seems to be disconnected, so search it
+		SfxViewFrame* pViewFrame = SfxViewFrame::GetFirst( pDocSh );
+
+		if( pViewFrame )
+			pDispatcher = pViewFrame->GetDispatcher();
+
 	}
+
+	if( pDispatcher )
+		pDispatcher->Execute( SID_PRESENTATION, SFX_CALLMODE_SYNCHRON | SFX_CALLMODE_RECORD );
 }
 
 void SAL_CALL SdXPresentation::end(  )
Index: sd/source/ui/view/Outliner.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/view/Outliner.cxx,v
retrieving revision 1.16
retrieving revision 1.16.2.1
diff -u -p -u -p -r1.16 -r1.16.2.1
--- sd/source/ui/view/Outliner.cxx	27 Jan 2005 14:18:59 -0000	1.16
+++ sd/source/ui/view/Outliner.cxx	2 Feb 2005 10:26:58 -0000	1.16.2.1
@@ -1259,7 +1259,7 @@ void Outliner::PrepareSpellCheck (void)
             }
 
 
-        EnterEditMode ();
+        EnterEditMode( FALSE );
     }
 }
 
@@ -1354,7 +1354,7 @@ void Outliner::SetPage (EditMode eEditMo
 
 
 
-void Outliner::EnterEditMode (void)
+void Outliner::EnterEditMode (BOOL bGrabFocus)
 {
     if (mbViewShellValid && mpOutlineView != NULL)
     {
@@ -1379,7 +1379,7 @@ void Outliner::EnterEditMode (void)
 
         // Turn on the edit mode for the text object.
         mpView->BegTextEdit(mpTextObj, pPV, mpWindow, bIsNewObj, this,
-            mpOutlineView, TRUE, TRUE);
+            mpOutlineView, TRUE, TRUE, bGrabFocus);
 
 
         SetUpdateMode(TRUE);
Index: sd/source/ui/view/drviews6.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/view/drviews6.cxx,v
retrieving revision 1.17
retrieving revision 1.17.2.1
diff -u -p -u -p -r1.17 -r1.17.2.1
--- sd/source/ui/view/drviews6.cxx	27 Jan 2005 14:20:57 -0000	1.17
+++ sd/source/ui/view/drviews6.cxx	4 Feb 2005 15:52:33 -0000	1.17.2.1
@@ -122,6 +122,7 @@
 
 #include "app.hrc"
 #include "strings.hrc"
+#include "glob.hrc"
 
 #include "app.hxx"
 #include "animobjs.hxx"
@@ -862,6 +863,30 @@ void DrawViewShell::FuTemp04(SfxRequest&
 		}
 		break;
 
+        case SID_DISPLAY_MASTER_BACKGROUND:
+        case SID_DISPLAY_MASTER_OBJECTS:
+        {
+            // Determine current page and toggle visibility of layers
+            // associated with master page background or master page shapes.
+            SdPage* pPage = GetActualPage();
+            if (pPage != NULL
+                && GetDoc() != NULL)
+            {
+                SetOfByte aVisibleLayers = pPage->TRG_GetMasterPageVisibleLayers();
+                SdrLayerAdmin& rLayerAdmin = GetDoc()->GetLayerAdmin();
+                BYTE aLayerId;
+                if (nSId == SID_DISPLAY_MASTER_BACKGROUND)
+                    aLayerId = rLayerAdmin.GetLayerID(String(SdResId(STR_LAYER_BCKGRND)), FALSE);
+                else
+                    aLayerId = rLayerAdmin.GetLayerID(String(SdResId(STR_LAYER_BCKGRNDOBJ)), FALSE);
+                aVisibleLayers.Set(aLayerId, !aVisibleLayers.IsSet(aLayerId));
+                pPage->TRG_SetMasterPageVisibleLayers(aVisibleLayers);
+            }
+            Cancel();
+            rReq.Ignore ();
+        }
+        break;
+
 		default:
 		{
 			DBG_ASSERT( 0, "Slot ohne Funktion" );
Index: sd/source/ui/view/drviews7.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/view/drviews7.cxx,v
retrieving revision 1.55
retrieving revision 1.55.2.1
diff -u -p -u -p -r1.55 -r1.55.2.1
--- sd/source/ui/view/drviews7.cxx	27 Jan 2005 14:21:15 -0000	1.55
+++ sd/source/ui/view/drviews7.cxx	4 Feb 2005 15:54:12 -0000	1.55.2.1
@@ -1621,6 +1621,27 @@ void DrawViewShell::GetMenuState( SfxIte
 	rSet.DisableItem( SID_INSERT_APPLET );
 #endif
 
+    // Set the state of two entries in the 'Slide' context sub-menu
+    // concerning the visibility of master page background and master page
+    // shapes.
+    if (rSet.GetItemState(SID_DISPLAY_MASTER_BACKGROUND) == SFX_ITEM_AVAILABLE
+        || rSet.GetItemState(SID_DISPLAY_MASTER_OBJECTS) == SFX_ITEM_AVAILABLE)
+    {
+        SdPage* pPage = GetActualPage();
+        if (pPage != NULL
+            && GetDoc() != NULL)
+        {
+            SetOfByte aVisibleLayers = pPage->TRG_GetMasterPageVisibleLayers();
+            SdrLayerAdmin& rLayerAdmin = GetDoc()->GetLayerAdmin();
+            BYTE aBackgroundId = rLayerAdmin.GetLayerID(String(SdResId(STR_LAYER_BCKGRND)), FALSE);
+            BYTE aObjectId = rLayerAdmin.GetLayerID(String(SdResId(STR_LAYER_BCKGRNDOBJ)), FALSE);
+            rSet.Put(SfxBoolItem(SID_DISPLAY_MASTER_BACKGROUND, 
+                    aVisibleLayers.IsSet(aBackgroundId)));
+            rSet.Put(SfxBoolItem(SID_DISPLAY_MASTER_OBJECTS,
+                    aVisibleLayers.IsSet(aObjectId)));
+        }
+    }
+
     GetModeSwitchingMenuState (rSet);
 }
 
Index: sd/source/ui/view/sdview.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/view/sdview.cxx,v
retrieving revision 1.36
retrieving revision 1.36.2.1
diff -u -p -u -p -r1.36 -r1.36.2.1
--- sd/source/ui/view/sdview.cxx	25 Jan 2005 15:20:12 -0000	1.36
+++ sd/source/ui/view/sdview.cxx	2 Feb 2005 10:27:24 -0000	1.36.2.1
@@ -702,13 +702,13 @@ BOOL View::SetStyleSheet(SfxStyleSheet* 
 BOOL View::BegTextEdit(SdrObject* pObj, SdrPageView* pPV, Window* pWin,
 						 BOOL bIsNewObj, SdrOutliner* pGivenOutliner,
 						 OutlinerView* pGivenOutlinerView, BOOL bDontDeleteOutliner,
-						 BOOL bOnlyOneView)
+						 BOOL bOnlyOneView, BOOL bGrabFocus)
 {
 	GetViewShell()->GetViewShellBase().GetEventMultiplexer().MultiplexEvent( sd::tools::EventMultiplexerEvent::EID_BEGIN_TEXT_EDIT, (void*)pObj );
 
 	BOOL bReturn = FmFormView::BegTextEdit(pObj, pPV, pWin, bIsNewObj, pGivenOutliner,
 										pGivenOutlinerView, bDontDeleteOutliner,
-										bOnlyOneView);
+										bOnlyOneView, bGrabFocus);
 
 	if (bReturn)
 	{
Index: sd/source/ui/view/viewshe2.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/view/viewshe2.cxx,v
retrieving revision 1.35
retrieving revision 1.35.78.1
diff -u -p -u -p -r1.35 -r1.35.78.1
--- sd/source/ui/view/viewshe2.cxx	26 Nov 2004 20:35:40 -0000	1.35
+++ sd/source/ui/view/viewshe2.cxx	2 Feb 2005 10:08:45 -0000	1.35.78.1
@@ -989,7 +989,7 @@ BOOL ViewShell::ActivateObject(SdrOle2Ob
             aSz.Height = aRect.GetHeight();
             xObj->setVisualAreaSize( pObj->GetAspect(), aSz );
 
-            SetVerbs( xObj->getSupportedVerbs() );
+            GetViewShellBase().SetVerbs( xObj->getSupportedVerbs() );
 
 			if( aName.EqualsAscii( "StarChart" ))
 			{
Index: sd/source/ui/view/viewshe3.cxx
===================================================================
RCS file: /cvs/graphics/sd/source/ui/view/viewshe3.cxx,v
retrieving revision 1.42
retrieving revision 1.42.2.1
diff -u -p -u -p -r1.42 -r1.42.2.1
--- sd/source/ui/view/viewshe3.cxx	27 Jan 2005 14:23:57 -0000	1.42
+++ sd/source/ui/view/viewshe3.cxx	31 Jan 2005 18:18:12 -0000	1.42.2.1
@@ -1203,34 +1203,13 @@ SdPage* ViewShell::CreateOrDuplicatePage
     String aNotesPageName;
     AutoLayout eStandardLayout;
     AutoLayout eNotesLayout;
-    BOOL bIsPageBack;
-    BOOL bIsPageObj;
+    BOOL bIsPageBack = aVisibleLayers.IsSet(aBckgrnd);
+    BOOL bIsPageObj = aVisibleLayers.IsSet(aBckgrndObj);
 
     // 1. Process the arguments.
     const SfxItemSet* pArgs = rRequest.GetArgs();
     if (! pArgs)
     {
-        SfxItemSet aAttrSet( GetPool(), ATTR_PAGE_START, ATTR_PAGE_END );
-        String aStr;
-        aAttrSet.Put( SfxStringItem( ATTR_PAGE_NAME, aStr ) );
-        aAttrSet.Put( SfxBoolItem( ATTR_PAGE_BACKGROUND,
-                aVisibleLayers.IsSet(aBckgrnd) ) );
-        aAttrSet.Put( SfxBoolItem( ATTR_PAGE_OBJECTS,
-                aVisibleLayers.IsSet(aBckgrndObj) ) );
-
-        AutoLayout eAutoLayout = AUTOLAYOUT_NONE;
-        if (pTemplatePage != NULL)
-            eAutoLayout = pTemplatePage->GetAutoLayout();
-
-        if (eAutoLayout == AUTOLAYOUT_TITLE && pPage->GetPageNum() == 1)
-        {
-            // 1.Seite ist TitelDia
-            eAutoLayout = AUTOLAYOUT_ENUM;
-        }
-
-        aAttrSet.Put( SfxAllEnumItem( ATTR_PAGE_LAYOUT,
-                eAutoLayout ) );
-
         // Make the layout menu visible in the tool pane.
         SfxBoolItem aMakeToolPaneVisible (ID_VAL_ISVISIBLE, TRUE);
         SfxUInt32Item aPanelId (ID_VAL_PANEL_INDEX,
Index: svx/source/svdraw/svdoole2.cxx
===================================================================
RCS file: /cvs/graphics/svx/source/svdraw/svdoole2.cxx,v
retrieving revision 1.49
retrieving revision 1.49.46.1
diff -u -p -u -p -r1.49 -r1.49.46.1
--- svx/source/svdraw/svdoole2.cxx	18 Jan 2005 15:01:22 -0000	1.49
+++ svx/source/svdraw/svdoole2.cxx	2 Feb 2005 10:04:05 -0000	1.49.46.1
@@ -465,6 +465,9 @@ FASTBOOL SdrOle2Obj::IsEmpty() const
 
 void SdrOle2Obj::Connect()
 {
+	if( IsEmptyPresObj() )
+		return;
+
     if( mpImpl->mbConnected )
     {
         DBG_ERROR("Connect() called on connected object!");
@@ -700,9 +703,12 @@ void SdrOle2Obj::AddListeners_Impl()
 
 void SdrOle2Obj::Disconnect()
 {
+	if( IsEmptyPresObj() )
+		return;
+
 	if( !mpImpl->mbConnected )
     {
-        DBG_ERROR("Connect() called on disconnected object!");
+        DBG_ERROR("Disconnect() called on disconnected object!");
 		return;
     }
 
@@ -795,7 +801,7 @@ void SdrOle2Obj::SetModel(SdrModel* pNew
     DBG_ASSERT( pSrcPers || !mpImpl->mbConnected, "Connected object without a model?!" );
     RemoveListeners_Impl();
 
-    if( pDestPers && pSrcPers )
+    if( pDestPers && pSrcPers && !IsEmptyPresObj() )
     {
         // move the objects' storage; ObjectRef remains the same, but PersistName may change
         ::rtl::OUString aTmp;
@@ -820,7 +826,7 @@ void SdrOle2Obj::SetModel(SdrModel* pNew
 
 	SdrRectObj::SetModel( pNewModel );
 
-    if( pDestPers )
+    if( pDestPers && !IsEmptyPresObj() )
     {
         if ( !pSrcPers )
             // object wasn't connected, now it should
