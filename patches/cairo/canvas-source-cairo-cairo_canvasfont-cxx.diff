--- /dev/null	
+++ canvas/source/cairo/cairo_canvasfont.cxx	
@@ -0,0 +1,173 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#include <canvas/debug.hxx>
+
+#include <rtl/math.hxx>
+#include <basegfx/numeric/ftools.hxx>
+
+#include <vcl/metric.hxx>
+
+#include "cairo_canvasfont.hxx"
+#include "cairo_textlayout.hxx"
+
+using namespace ::com::sun::star;
+
+
+namespace cairocanvas
+{
+    CanvasFont::CanvasFont( const rendering::FontRequest& 					rFontRequest,
+                            const uno::Sequence< beans::PropertyValue >&	rExtraFontProperties, 
+                            const geometry::Matrix2D& 						rFontMatrix,
+                            const DeviceRef&								rDevice ) :
+        CanvasFont_Base( m_aMutex ),
+        maFont( Font( rFontRequest.FontDescription.FamilyName,
+                      rFontRequest.FontDescription.StyleName,
+                      Size( 0, ::basegfx::fround(rFontRequest.CellSize) ) ) ),
+        maFontRequest( rFontRequest ),
+        mpRefDevice( rDevice )
+    {
+        maFont->SetAlign( ALIGN_BASELINE );
+        maFont->SetCharSet( (rFontRequest.FontDescription.IsSymbolFont==com::sun::star::util::TriState_YES) ? RTL_TEXTENCODING_SYMBOL : RTL_TEXTENCODING_UNICODE );
+        maFont->SetVertical( (rFontRequest.FontDescription.IsVertical==com::sun::star::util::TriState_YES) ? TRUE : FALSE );
+
+        // TODO(F2): improve panose->vclenum conversion
+        maFont->SetWeight( static_cast<FontWeight>(rFontRequest.FontDescription.FontDescription.Weight) );
+        maFont->SetItalic( (rFontRequest.FontDescription.FontDescription.Letterform<=8) ? ITALIC_NONE : ITALIC_NORMAL );
+
+        // adjust to stretched/shrinked font
+        if( !::rtl::math::approxEqual( rFontMatrix.m00, rFontMatrix.m11) )
+        {
+            OutputDevice* pOutDev( mpRefDevice->getOutputWindow() );
+
+            if( pOutDev )
+            {
+                const bool bOldMapState( pOutDev->IsMapModeEnabled() );
+                pOutDev->EnableMapMode(FALSE);
+
+                const Size aSize = pOutDev->GetFontMetric( *maFont ).GetSize();
+
+                const double fDividend( rFontMatrix.m10 + rFontMatrix.m11 );
+                double fStretch = (rFontMatrix.m00 + rFontMatrix.m01);            
+
+                if( !::basegfx::fTools::equalZero( fDividend) )
+                    fStretch /= fDividend;
+
+                const long nNewWidth = ::basegfx::fround( aSize.Width() * fStretch );
+
+                maFont->SetWidth( nNewWidth );
+
+                pOutDev->EnableMapMode(bOldMapState);
+            }
+        }
+    }
+
+    void SAL_CALL CanvasFont::disposing()
+    {
+        tools::LocalGuard aGuard;
+
+        mpRefDevice.clear();
+    }
+
+    uno::Reference< rendering::XTextLayout > SAL_CALL  CanvasFont::createTextLayout( const rendering::StringContext& aText, sal_Int8 nDirection, sal_Int64 nRandomSeed ) throw (uno::RuntimeException)
+    {
+        tools::LocalGuard aGuard;
+
+        if( !mpRefDevice.is() )
+            return uno::Reference< rendering::XTextLayout >(); // we're disposed
+
+        return new TextLayout( aText, 
+                               nDirection, 
+                               nRandomSeed, 
+                               Reference( this ) );
+    }
+
+    rendering::FontRequest SAL_CALL  CanvasFont::getFontRequest(  ) throw (uno::RuntimeException)
+    {
+        tools::LocalGuard aGuard;
+
+        return maFontRequest;
+    }
+
+    rendering::FontMetrics SAL_CALL  CanvasFont::getFontMetrics(  ) throw (uno::RuntimeException)
+    {
+        tools::LocalGuard aGuard;
+
+        // TODO(F1)
+        return rendering::FontMetrics();
+    }
+
+    uno::Sequence< double > SAL_CALL  CanvasFont::getAvailableSizes(  ) throw (uno::RuntimeException)
+    {
+        tools::LocalGuard aGuard;
+
+        // TODO(F1)
+        return uno::Sequence< double >();
+    }
+
+    uno::Sequence< beans::PropertyValue > SAL_CALL  CanvasFont::getExtraFontProperties(  ) throw (uno::RuntimeException)
+    {
+        tools::LocalGuard aGuard;
+
+        // TODO(F1)
+        return uno::Sequence< beans::PropertyValue >();
+    }
+
+#define IMPLEMENTATION_NAME "CairoCanvas::CanvasFont"
+#define SERVICE_NAME "com.sun.star.rendering.CanvasFont"
+
+    ::rtl::OUString SAL_CALL CanvasFont::getImplementationName() throw( uno::RuntimeException )
+    {
+        return ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( IMPLEMENTATION_NAME ) );
+    }
+
+    sal_Bool SAL_CALL CanvasFont::supportsService( const ::rtl::OUString& ServiceName ) throw( uno::RuntimeException )
+    {
+        return ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME ) );
+    }
+
+    uno::Sequence< ::rtl::OUString > SAL_CALL CanvasFont::getSupportedServiceNames()  throw( uno::RuntimeException )
+    {
+        uno::Sequence< ::rtl::OUString > aRet(1);
+        aRet[0] = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME ) );
+
+        return aRet;
+    }
+
+    ::Font CanvasFont::getVCLFont() const
+    {
+        return *maFont;
+    }
+}
