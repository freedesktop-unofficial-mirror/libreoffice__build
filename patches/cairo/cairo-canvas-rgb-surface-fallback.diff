Index: canvas/source/cairo/cairo_canvasbitmap.cxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_canvasbitmap.cxx,v
retrieving revision 1.1.2.4
diff -u -p -r1.1.2.4 cairo_canvasbitmap.cxx
--- canvas/source/cairo/cairo_canvasbitmap.cxx	14 Dec 2005 15:38:04 -0000	1.1.2.4
+++ canvas/source/cairo/cairo_canvasbitmap.cxx	3 Jan 2006 16:59:30 -0000
@@ -57,10 +57,8 @@ namespace cairocanvas
 		mpBufferSurface = mpDevice->getSurface( rSize, bHasAlpha ? CAIRO_CONTENT_COLOR_ALPHA : CAIRO_CONTENT_COLOR );
 		mpBufferCairo = mpBufferSurface->getCairo();
 
-        maCanvasHelper.init( rSize,
-                             *mpDevice.get(),
-                             bHasAlpha );
-		maCanvasHelper.setSurface( mpBufferSurface );
+        maCanvasHelper.init( rSize, *mpDevice.get() );
+		maCanvasHelper.setSurface( mpBufferSurface, bHasAlpha );
 
 		mbHasAlpha = bHasAlpha;
     }
Index: canvas/source/cairo/cairo_canvascustomsprite.cxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_canvascustomsprite.cxx,v
retrieving revision 1.1.2.5
diff -u -p -r1.1.2.5 cairo_canvascustomsprite.cxx
--- canvas/source/cairo/cairo_canvascustomsprite.cxx	14 Dec 2005 15:38:04 -0000	1.1.2.5
+++ canvas/source/cairo/cairo_canvascustomsprite.cxx	3 Jan 2006 16:59:30 -0000
@@ -55,43 +55,53 @@ namespace cairocanvas
 {
     CanvasCustomSprite::CanvasCustomSprite( const ::com::sun::star::geometry::RealSize2D& 	rSpriteSize,
                                             const SpriteCanvasRef&                          rRefDevice ) :
-        mpSpriteCanvas( rRefDevice )
+        mpSpriteCanvas( rRefDevice ),
+		maSize( ::canvas::tools::roundUp( rSpriteSize.Width ),
+				::canvas::tools::roundUp( rSpriteSize.Height ) )
     {
         ENSURE_AND_THROW( rRefDevice.get(),
                           "CanvasCustomSprite::CanvasCustomSprite(): Invalid sprite canvas" );
 
-		::basegfx::B2ISize aSize( ::canvas::tools::roundUp( rSpriteSize.Width ),
-								  ::canvas::tools::roundUp( rSpriteSize.Height ) );
-
 		//mpBufferSurface = mpSpriteCanvas->getSurface( aSize, CAIRO_CONTENT_COLOR );
-		mpBufferSurface = mpSpriteCanvas->getSurface( aSize );
-		mpCairo = mpBufferSurface->getCairo();
+		mpBufferSurface = mpSpriteCanvas->getSurface( maSize );
 
-        maCanvasHelper.init( aSize,
-                             *rRefDevice.get(),
-                             true );
-		maCanvasHelper.setSurface( mpBufferSurface );
+        maCanvasHelper.init( maSize, *rRefDevice.get() );
+		maCanvasHelper.setSurface( mpBufferSurface, true, this );
 
         maSpriteHelper.init( rSpriteSize,
-                             rRefDevice,
-							 mpBufferSurface );
+                             rRefDevice );
+		maSpriteHelper.setSurface( mpBufferSurface );
     }
     
+	::cairo::Surface* CanvasCustomSprite::changeSurface( bool bHasAlpha, bool bCopyContent )
+	{
+		if( !bHasAlpha && !bCopyContent )
+		{
+			OSL_TRACE("replacing sprite background surface");
+
+			if( mpBufferSurface )
+				mpBufferSurface->Unref();
+			mpBufferSurface = mpSpriteCanvas->getSurface( maSize, CAIRO_CONTENT_COLOR );
+
+			maSpriteHelper.setSurface( mpBufferSurface );
+
+			return mpBufferSurface;
+		}
+
+		return NULL;
+	}
+
     void SAL_CALL CanvasCustomSprite::disposing()
     {
         ::osl::MutexGuard aGuard( m_aMutex );
 
         mpSpriteCanvas.clear();
 
-	if( mpCairo ) {
-	    cairo_destroy( mpCairo );
-	    mpCairo = NULL;
-	}
-
-	if( mpBufferSurface ) {
-	    mpBufferSurface->Unref();
-	    mpBufferSurface = NULL;
-	}
+		if( mpBufferSurface )
+		{
+			mpBufferSurface->Unref();
+			mpBufferSurface = NULL;
+		}
 
         // forward to parent
         CanvasCustomSpriteBaseT::disposing();
Index: canvas/source/cairo/cairo_canvascustomsprite.hxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_canvascustomsprite.hxx,v
retrieving revision 1.1.2.4
diff -u -p -r1.1.2.4 cairo_canvascustomsprite.hxx
--- canvas/source/cairo/cairo_canvascustomsprite.hxx	11 Nov 2005 15:14:00 -0000	1.1.2.4
+++ canvas/source/cairo/cairo_canvascustomsprite.hxx	3 Jan 2006 16:59:30 -0000
@@ -97,7 +97,8 @@ namespace cairocanvas
 	/* Definition of CanvasCustomSprite class */
 
     class CanvasCustomSprite : public CanvasCustomSpriteBaseT,
-			       public RepaintTarget
+							   public RepaintTarget,
+							   public SurfaceProvider
     {
     public:
         /** Create a custom sprite
@@ -142,13 +143,17 @@ namespace cairocanvas
         virtual bool repaint( ::cairo::Surface* pSurface,
 			      const ::com::sun::star::rendering::ViewState&	viewState,
 			      const ::com::sun::star::rendering::RenderState&	renderState );
+
+		// SurfaceProvider
+		virtual ::cairo::Surface* changeSurface( bool bHasAlpha, bool bCopyContent );
+
     private:
         /** MUST hold here, too, since CanvasHelper only contains a
             raw pointer (without refcounting) 
         */
         SpriteCanvasRef mpSpriteCanvas;
-	::cairo::Surface*       mpBufferSurface;
-	::cairo::Cairo*         mpCairo;
+		::cairo::Surface*       mpBufferSurface;
+		::basegfx::B2ISize      maSize;
     };
 }
 
Index: canvas/source/cairo/cairo_canvashelper.cxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_canvashelper.cxx,v
retrieving revision 1.1.2.5
diff -u -p -r1.1.2.5 cairo_canvashelper.cxx
--- canvas/source/cairo/cairo_canvashelper.cxx	14 Dec 2005 15:38:05 -0000	1.1.2.5
+++ canvas/source/cairo/cairo_canvashelper.cxx	3 Jan 2006 16:59:30 -0000
@@ -107,15 +107,16 @@ namespace cairocanvas
     }
 
     void CanvasHelper::init( const ::basegfx::B2ISize& rSize,
-                             SpriteCanvas&             rDevice,
-                             bool                      bHasAlpha )
+                             SpriteCanvas&             rDevice )
     {
         mpDevice = &rDevice;
-        mbHaveAlpha = bHasAlpha;
     }
 
-    void CanvasHelper::setSurface( Surface* pSurface )
+    void CanvasHelper::setSurface( Surface* pSurface, bool bHasAlpha, SurfaceProvider* pSurfaceProvider )
     {
+        mbHaveAlpha = bHasAlpha;
+		mpSurfaceProvider = pSurfaceProvider;
+
 		if( mpSurface ) {
 			mpSurface->Unref();
 		}
@@ -1065,6 +1066,7 @@ namespace cairocanvas
 					Cairo* pCairo = pScaledSurface->getCairo();
 
 					cairo_set_source_surface( pCairo, pSurface->mpSurface, 0, 0 );
+// 					cairo_set_operator( pCairo, CAIRO_OPERATOR_SOURCE );
 					cairo_scale( pCairo, dWidth/rSize.Width, dHeight/rSize.Height );
 					cairo_paint( pCairo );
 
@@ -1080,7 +1082,39 @@ namespace cairocanvas
 					pSurface->Unref();
 				}
 
+			if( !bHasAlpha && mbHaveAlpha /* && mpSurfaceProvider */ )
+            {
+				double x, y, width, height;
+
+				x = y = 0;
+				width = rSize.Width;
+				height = rSize.Height;
+				cairo_matrix_transform_point( &aMatrix, &x, &y );
+				cairo_matrix_transform_distance( &aMatrix, &width, &height );
+
+				// in case the bitmap doesn't have alpha and covers whole area
+				// we try to change surface to plain rgb
+				OSL_TRACE ("chance to change surface to rgb, %f, %f, %f x %f (%d x %d)", x, y, width, height, aSize.getX(), aSize.getY() );
+				if( x <= 0 && y <= 0 && x + width >= aSize.getX() && y + height >= aSize.getY() )
+				{
+					OSL_TRACE ("trying to change surface to rgb");
+					if( mpSurfaceProvider ) {
+						Surface* pNewSurface = mpSurfaceProvider->changeSurface( false, false );
+
+						if( pNewSurface )
+							setSurface( pNewSurface, false, mpSurfaceProvider );
+
+						// set state to new mpCairo
+						useStates( viewState, renderState, true );
+						// use the possibly modified matrix
+						cairo_set_matrix( mpCairo, &aMatrix );
+					}
+				}
+			}
+
 			cairo_set_source_surface( mpCairo, pSurface->mpSurface, 0, 0 );
+// 			if( !bHasAlpha )
+// 				cairo_set_operator( mpCairo, CAIRO_OPERATOR_SOURCE );
 			cairo_paint( mpCairo );
 			cairo_restore( mpCairo );
 		} else
Index: canvas/source/cairo/cairo_canvashelper.hxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_canvashelper.hxx,v
retrieving revision 1.1.2.4
diff -u -p -r1.1.2.4 cairo_canvashelper.hxx
--- canvas/source/cairo/cairo_canvashelper.hxx	14 Dec 2005 15:38:05 -0000	1.1.2.4
+++ canvas/source/cairo/cairo_canvashelper.hxx	3 Jan 2006 16:59:31 -0000
@@ -66,6 +66,11 @@ namespace cairocanvas
         optional backbuffer painting, when providing it with a second
         HDC to render into.
      */
+	class SurfaceProvider {
+	public:
+		virtual ::cairo::Surface* changeSurface( bool bHasAlpha, bool bCopyContent ) = 0;
+	};
+
     class CanvasHelper : private ::boost::noncopyable
     {
     public:
@@ -92,10 +97,9 @@ namespace cairocanvas
 
          */
         void init( const ::basegfx::B2ISize& rSizePixel,
-                   SpriteCanvas&             rDevice,
-                   bool                      bHasAlpha );
+                   SpriteCanvas&             rDevice );
 
-	void setSurface( ::cairo::Surface* pSurface );
+	void setSurface( ::cairo::Surface* pSurface, bool bHasAlpha, SurfaceProvider* pSurfaceProvider = NULL );
 
         // CanvasHelper functionality
         // ==========================
@@ -317,6 +321,7 @@ namespace cairocanvas
 
 		::cairo::Cairo* mpCairo;
 		::cairo::Surface* mpSurface;
+		SurfaceProvider* mpSurfaceProvider;
     };
 
     void drawPolyPolygonImplementation( ::basegfx::B2DPolyPolygon aPolyPolygon,
Index: canvas/source/cairo/cairo_spritecanvas.cxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_spritecanvas.cxx,v
retrieving revision 1.1.2.5
diff -u -p -r1.1.2.5 cairo_spritecanvas.cxx
--- canvas/source/cairo/cairo_spritecanvas.cxx	14 Dec 2005 15:38:06 -0000	1.1.2.5
+++ canvas/source/cairo/cairo_spritecanvas.cxx	3 Jan 2006 16:59:31 -0000
@@ -81,10 +81,10 @@ namespace cairocanvas
 {
     SpriteCanvas::SpriteCanvas( const uno::Reference< uno::XComponentContext >& rxContext ) :
         mxComponentContext( rxContext ),
-	mpBackgroundCairo( NULL ),
-	mpBackgroundSurface( NULL )
+		mpBackgroundCairo( NULL ),
+		mpBackgroundSurface( NULL )
     {
-	OSL_TRACE("SpriteCanvas created %p\n", this);
+		OSL_TRACE("SpriteCanvas created %p\n", this);
     }
 
     void SAL_CALL SpriteCanvas::disposing()
@@ -93,15 +93,15 @@ namespace cairocanvas
 
         mxComponentContext.clear();
 
-	if( mpBackgroundCairo ) {
-	    cairo_destroy( mpBackgroundCairo );
-	    mpBackgroundCairo = NULL;
-	}
+		if( mpBackgroundCairo ) {
+			cairo_destroy( mpBackgroundCairo );
+			mpBackgroundCairo = NULL;
+		}
 
-	if( mpBackgroundSurface ) {
-	    mpBackgroundSurface->Unref();
-	    mpBackgroundSurface = NULL;
-	}
+		if( mpBackgroundSurface ) {
+			mpBackgroundSurface->Unref();
+			mpBackgroundSurface = NULL;
+		}
 
         // forward to parent
         SpriteCanvasBaseT::disposing();
@@ -186,8 +186,7 @@ namespace cairocanvas
 
         maCanvasHelper.init( maRedrawManager,
                              *this,
-                             aSize,
-                             false );
+                             aSize );
     }
 
     ::rtl::OUString SAL_CALL SpriteCanvas::getImplementationName() throw( uno::RuntimeException )
@@ -265,7 +264,7 @@ namespace cairocanvas
 		{
 			mpBackgroundSurface->Unref();
 		}
-		mpBackgroundSurface = maDeviceHelper.getSurface();
+		mpBackgroundSurface = maDeviceHelper.getSurface( CAIRO_CONTENT_COLOR );
 
 		if( mpBackgroundCairo )
 		{
@@ -273,7 +272,7 @@ namespace cairocanvas
 		}
 		mpBackgroundCairo = mpBackgroundSurface->getCairo();
 
-		maCanvasHelper.setSurface( mpBackgroundSurface );
+		maCanvasHelper.setSurface( mpBackgroundSurface, false );
     }
 
     void SpriteCanvas::flush()
Index: canvas/source/cairo/cairo_spritecanvas.hxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_spritecanvas.hxx,v
retrieving revision 1.1.2.4
diff -u -p -r1.1.2.4 cairo_spritecanvas.hxx
--- canvas/source/cairo/cairo_spritecanvas.hxx	14 Dec 2005 15:38:06 -0000	1.1.2.4
+++ canvas/source/cairo/cairo_spritecanvas.hxx	3 Jan 2006 16:59:31 -0000
@@ -119,7 +119,7 @@ namespace cairocanvas
 		references, this is implemented as one single object.
      */
     class SpriteCanvas : public SpriteCanvasBaseT,
-			 public RepaintTarget
+						 public RepaintTarget
     {
     public:
         SpriteCanvas( const ::com::sun::star::uno::Reference< 
@@ -156,15 +156,15 @@ namespace cairocanvas
         // component factory
         static ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > SAL_CALL createInstance( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >& xContext ) throw ( ::com::sun::star::uno::Exception );
 
-	::cairo::Surface* getSurface( const ::basegfx::B2ISize& rSize, ::cairo::Content aContent = ::cairo::CAIRO_CONTENT_COLOR_ALPHA );
-	::cairo::Surface* getSurface( ::cairo::Content aContent = ::cairo::CAIRO_CONTENT_COLOR_ALPHA );
-	::cairo::Surface* getSurface( Bitmap& rBitmap );
-	::cairo::Surface* getBufferSurface();
-	::cairo::Surface* getWindowSurface();
-	::cairo::Surface* getBackgroundSurface();
-	const ::basegfx::B2ISize& getSizePixel();
-	void setSizePixel( const ::basegfx::B2ISize& rSize );
-	void flush();
+		::cairo::Surface* getSurface( const ::basegfx::B2ISize& rSize, ::cairo::Content aContent = ::cairo::CAIRO_CONTENT_COLOR_ALPHA );
+		::cairo::Surface* getSurface( ::cairo::Content aContent = ::cairo::CAIRO_CONTENT_COLOR_ALPHA );
+		::cairo::Surface* getSurface( Bitmap& rBitmap );
+		::cairo::Surface* getBufferSurface();
+		::cairo::Surface* getWindowSurface();
+		::cairo::Surface* getBackgroundSurface();
+		const ::basegfx::B2ISize& getSizePixel();
+		void setSizePixel( const ::basegfx::B2ISize& rSize );
+		void flush();
 
 		Window* getOutputWindow()
 		{
Index: canvas/source/cairo/cairo_spritecanvashelper.cxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_spritecanvashelper.cxx,v
retrieving revision 1.1.2.3
diff -u -p -r1.1.2.3 cairo_spritecanvashelper.cxx
--- canvas/source/cairo/cairo_spritecanvashelper.cxx	14 Dec 2005 15:38:06 -0000	1.1.2.3
+++ canvas/source/cairo/cairo_spritecanvashelper.cxx	3 Jan 2006 16:59:31 -0000
@@ -150,12 +150,11 @@ namespace cairocanvas
 
     void SpriteCanvasHelper::init( ::canvas::SpriteRedrawManager& rManager,
                                    SpriteCanvas&                  rDevice,
-                                   const ::basegfx::B2ISize&      rSize,
-                                   bool                           bHasAlpha )
+                                   const ::basegfx::B2ISize&      rSize )
     {
         mpRedrawManager = &rManager;
 
-        CanvasHelper::init( rSize, rDevice, bHasAlpha );
+        CanvasHelper::init( rSize, rDevice );
     }
     
     void SpriteCanvasHelper::disposing()
Index: canvas/source/cairo/cairo_spritecanvashelper.hxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_spritecanvashelper.hxx,v
retrieving revision 1.1.2.1
diff -u -p -r1.1.2.1 cairo_spritecanvashelper.hxx
--- canvas/source/cairo/cairo_spritecanvashelper.hxx	8 Nov 2005 21:24:26 -0000	1.1.2.1
+++ canvas/source/cairo/cairo_spritecanvashelper.hxx	3 Jan 2006 16:59:31 -0000
@@ -60,8 +60,7 @@ namespace cairocanvas
 
         void init( ::canvas::SpriteRedrawManager& rManager,
                    SpriteCanvas&                  rDevice,
-                   const ::basegfx::B2ISize&      rSize,
-                   bool                           bHasAlpha );
+                   const ::basegfx::B2ISize&      rSize );
     
         /// Dispose all internal references
         void disposing();
Index: canvas/source/cairo/cairo_spritehelper.cxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_spritehelper.cxx,v
retrieving revision 1.1.2.2
diff -u -p -r1.1.2.2 cairo_spritehelper.cxx
--- canvas/source/cairo/cairo_spritehelper.cxx	14 Dec 2005 15:38:07 -0000	1.1.2.2
+++ canvas/source/cairo/cairo_spritehelper.cxx	3 Jan 2006 16:59:31 -0000
@@ -70,8 +70,7 @@ namespace cairocanvas
     }
     
     void SpriteHelper::init( const geometry::RealSize2D&	rSpriteSize,
-                             const SpriteCanvasRef&			rSpriteCanvas,
-							 Surface* pBufferSurface )
+                             const SpriteCanvasRef&			rSpriteCanvas)
     {
         ENSURE_AND_THROW( rSpriteCanvas.get(),
                           "SpriteHelper::init(): Invalid device, sprite canvas or surface" );
@@ -82,12 +81,16 @@ namespace cairocanvas
         // also init base class
         CanvasCustomSpriteHelper::init( rSpriteSize,
                                         rSpriteCanvas.get() );
+    }
 
+	void SpriteHelper::setSurface( Surface* pBufferSurface )
+	{
 		if( mpBufferSurface )
 			mpBufferSurface->Unref();
+
 		mpBufferSurface = pBufferSurface;
 		mpBufferSurface->Ref();
-    }
+	}
 
     void SpriteHelper::disposing()
     {
Index: canvas/source/cairo/cairo_spritehelper.hxx
===================================================================
RCS file: /cvs/gsl/canvas/source/cairo/Attic/cairo_spritehelper.hxx,v
retrieving revision 1.1.2.1
diff -u -p -r1.1.2.1 cairo_spritehelper.hxx
--- canvas/source/cairo/cairo_spritehelper.hxx	8 Nov 2005 21:24:27 -0000	1.1.2.1
+++ canvas/source/cairo/cairo_spritehelper.hxx	3 Jan 2006 16:59:31 -0000
@@ -84,10 +84,11 @@ namespace cairocanvas
             When true, little debug bound rects for sprites are shown
          */
         void init( const ::com::sun::star::geometry::RealSize2D&	rSpriteSize,
-                   const SpriteCanvasRef&							rSpriteCanvas,
-		   ::cairo::Surface* pBufferSurface);
+                   const SpriteCanvasRef&							rSpriteCanvas );
 
         void disposing();
+
+		void setSurface( ::cairo::Surface* pBufferSurface );
 
         /** Repaint sprite content to associated sprite canvas
 
