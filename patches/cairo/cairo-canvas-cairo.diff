--- canvas/prj/build.lst	2006-11-02 13:13:45.000000000 +0100
+++ canvas/prj/build.lst	2006-11-02 13:14:17.000000000 +0100
@@ -1,10 +1,10 @@
-cv	canvas	:	javaunohelper comphelper cppuhelper offuh unoil tools goodies vcl AGG:agg basegfx NULL
+cv	canvas	:	javaunohelper comphelper cppuhelper offuh unoil tools goodies vcl AGG:agg basegfx CAIRO:cairo NULL
 cv	canvas											 usr1	-	all	cv_mkout NULL
 cv	canvas\inc										 nmake	-	all	cv_inc NULL
 cv	canvas\source\tools								 nmake	-	all cv_tools cv_inc NULL
 cv	canvas\source\vcl								 nmake	-	all	cv_vcl cv_tools cv_inc NULL
 cv      canvas\source\simplecanvas						  nmake  -       all     cv_simplecanvas cv_tools cv_inc NULL
-cv	canvas\source\cairo								 nmake	-	u	cv_cairo cv_tools cv_inc NULL
+cv	canvas\source\cairo								 nmake	-	all	cv_cairo cv_tools cv_inc NULL
 cv     canvas\source\directx                                                   	 nmake   -       w       cv_directx cv_tools cv_inc NULL
 cv	canvas\source\null								 nmake	-	all	cv_null cv_tools cv_inc NULL
 cv	canvas\source\java								 nmake	-	all cv_java cv_inc NULL
--- canvas/source/cairo/makefile.mk	2007-10-24 09:40:38.000000000 +0200
+++ canvas/source/cairo/makefile.mk	2007-10-24 13:46:33.000000000 +0200
@@ -52,7 +52,6 @@
 
 # --- Common ----------------------------------------------------------
 
-.IF "$(GUI)"=="UNX"
 
 .IF "$(SYSTEM_CAIRO)" == "YES"
 CFLAGS+=$(CAIRO_CFLAGS)
@@ -82,10 +81,23 @@
 
 SHL1STDLIBS= $(CPPULIB) $(TKLIB) $(SALLIB) $(VCLLIB) $(COMPHELPERLIB) $(CPPUHELPERLIB) $(BASEGFXLIB) $(CANVASTOOLSLIB) $(TOOLSLIB)
 
+.IF "$(GUI)"=="UNX"
 .IF "$(SYSTEM_CAIRO)" == "YES"
 SHL1STDLIBS+= $(CAIRO_LIBS) -lX11 -lXrender
 .ELSE
-SHL1STDLIBS+= -lcairo -lX11 -lXrender
+SHL1STDLIBS+= -lcairo -lX11 -lXrender -lfontconfig $(FREETYPELIB)
+.ENDIF
+.ELSE
+.IF "$(GUI)"=="WNT"
+.IF "$(COM)"=="GCC"
+SHL1STDLIBS+= -lcairo -lgdi32 -lmsimg32
+.ELSE
+#We build cairo and pixman as separate (static) libs as I couldn't be
+#bothered to dig into the obscure makefile.mk stuff enough to combine
+#them into one as is normally done.
+SHL1STDLIBS+= cairo.lib pixman.lib gdi32.lib
+.ENDIF
+.ENDIF
 .ENDIF
 
 SHL1IMPLIB=i$(TARGET)
@@ -97,7 +109,6 @@
 DEF1NAME=$(SHL1TARGET)
 DEF1EXPORTFILE=exports.dxp
 
-.ENDIF
 
 # ==========================================================================
 
dummy line to avoid confusing diff-mode
--- canvas/source/cairo/cairo_canvashelper.cxx
+++ canvas/source/cairo/cairo_canvashelper.cxx
@@ -167,14 +167,14 @@
         if( viewState.Clip.is() ) {
 	    OSL_TRACE ("view clip\n");
 
-	    aViewMatrix.x0 = round( aViewMatrix.x0 );
-	    aViewMatrix.y0 = round( aViewMatrix.y0 );
+	    aViewMatrix.x0 = ::rtl::math::round( aViewMatrix.x0 );
+	    aViewMatrix.y0 = ::rtl::math::round( aViewMatrix.y0 );
 	    cairo_set_matrix( mpCairo, &aViewMatrix );
 	    doPolyPolygonPath( viewState.Clip, Clip );
 	}
 
-	aCombinedMatrix.x0 = round( aCombinedMatrix.x0 );
-	aCombinedMatrix.y0 = round( aCombinedMatrix.y0 );
+	aCombinedMatrix.x0 = ::rtl::math::round( aCombinedMatrix.x0 );
+	aCombinedMatrix.y0 = ::rtl::math::round( aCombinedMatrix.y0 );
 	cairo_set_matrix( mpCairo, &aCombinedMatrix );
 
         if( renderState.Clip.is() ) {
@@ -809,8 +809,8 @@
  			if( aTexture.RepeatModeX == rendering::TexturingMode::REPEAT &&
 			    aTexture.RepeatModeY == rendering::TexturingMode::REPEAT )
 			    cairo_pattern_set_extend( pPattern, CAIRO_EXTEND_REPEAT );
-			aScaledTextureMatrix.x0 = round( aScaledTextureMatrix.x0 );
-			aScaledTextureMatrix.y0 = round( aScaledTextureMatrix.y0 );
+			aScaledTextureMatrix.x0 = ::rtl::math::round( aScaledTextureMatrix.x0 );
+			aScaledTextureMatrix.y0 = ::rtl::math::round( aScaledTextureMatrix.y0 );
 			cairo_pattern_set_matrix( pPattern, &aScaledTextureMatrix );
 
 			cairo_set_source( pCairo, pPattern );
@@ -939,8 +939,8 @@
 		cairo_matrix_transform_point( &aOrigMatrix, &nX, &nY );
 
 		if( ! bIsBezier ) {
-		    nX = round( nX );
-		    nY = round( nY );
+		    nX = ::rtl::math::round( nX );
+		    nY = ::rtl::math::round( nY );
 		}
 
 		if( aOperation == Stroke ) {
@@ -964,8 +964,8 @@
 		    cairo_matrix_transform_point( &aOrigMatrix, &nX, &nY );
 
 		    if( ! bIsBezier ) {
-			nX = round( nX );
-			nY = round( nY );
+			nX = ::rtl::math::round( nX );
+			nY = ::rtl::math::round( nY );
 		    }
 
 		    if( aOperation == Stroke ) {
@@ -1257,13 +1257,13 @@
 				! ::rtl::math::approxEqual( aMatrix.yy, 1 ) &&
 				::rtl::math::approxEqual( aMatrix.x0, 0 ) &&
 				::rtl::math::approxEqual( aMatrix.y0, 0 ) &&
-				round( rSize.Width * aMatrix.xx ) > 8 &&
-				round( rSize.Height* aMatrix.yy ) > 8 )
+				::rtl::math::round( rSize.Width * aMatrix.xx ) > 8 &&
+				::rtl::math::round( rSize.Height* aMatrix.yy ) > 8 )
 				{
 					double dWidth, dHeight;
 
-					dWidth = round( rSize.Width * aMatrix.xx );
-					dHeight = round( rSize.Height* aMatrix.yy );
+					dWidth = ::rtl::math::round( rSize.Width * aMatrix.xx );
+					dHeight = ::rtl::math::round( rSize.Height* aMatrix.yy );
                                         aBitmapSize.Width = static_cast<sal_Int32>( dWidth );
                                         aBitmapSize.Height = static_cast<sal_Int32>( dHeight );
 
dummy line to avoid confusing diff-mode
--- canvas/source/cairo/cairo_spritehelper.cxx
+++ canvas/source/cairo/cairo_spritehelper.cxx
@@ -135,8 +135,8 @@
  				       aTransform.get( 0, 0 ), aTransform.get( 1, 0 ), aTransform.get( 0, 1 ),
  				       aTransform.get( 1, 1 ), aTransform.get( 0, 2 ), aTransform.get( 1, 2 ) );
 
- 		    aMatrix.x0 = round( aMatrix.x0 );
- 		    aMatrix.y0 = round( aMatrix.y0 );
+ 		    aMatrix.x0 = ::rtl::math::round( aMatrix.x0 );
+ 		    aMatrix.y0 = ::rtl::math::round( aMatrix.y0 );
 
 		    cairo_matrix_init( &aInverseMatrix, aMatrix.xx, aMatrix.yx, aMatrix.xy, aMatrix.yy, aMatrix.x0, aMatrix.y0 );
 		    cairo_matrix_invert( &aInverseMatrix );
@@ -145,8 +145,8 @@
  		    cairo_set_matrix( pCairo, &aMatrix );
  		}
 
- 		fX = round( fX );
- 		fY = round( fY );
+ 		fX = ::rtl::math::round( fX );
+ 		fY = ::rtl::math::round( fY );
 
 		cairo_matrix_t aOrigMatrix;
 		cairo_get_matrix( pCairo, &aOrigMatrix );
