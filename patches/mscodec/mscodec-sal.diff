Index: sal/inc/rtl/cipher.h
===================================================================
RCS file: /cvs/porting/sal/inc/rtl/cipher.h,v
retrieving revision 1.4
retrieving revision 1.4.242.1
diff -u -r1.4 -r1.4.242.1
--- sal/inc/rtl/cipher.h	29 Nov 2001 19:12:42 -0000	1.4
+++ sal/inc/rtl/cipher.h	15 Mar 2004 19:14:54 -0000	1.4.242.1
@@ -86,6 +86,7 @@
 enum __rtl_CipherAlgorithm
 {
 	rtl_Cipher_AlgorithmBF,
+	rtl_Cipher_AlgorithmARCFOUR,
 	rtl_Cipher_AlgorithmInvalid,
 	rtl_Cipher_Algorithm_FORCE_EQUAL_SIZE = SAL_MAX_ENUM
 };
@@ -177,8 +178,8 @@
 rtlCipherError SAL_CALL rtl_cipher_init (
 	rtlCipher           Cipher,
 	rtlCipherDirection  Direction,
-	const sal_uInt8    *pKeyData, sal_uInt32 nKeyLen,
-	const sal_uInt8    *pArgData, sal_uInt32 nArgLen
+	const sal_uInt8    *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8    *pArgData, sal_Size nArgLen
 ) SAL_THROW_EXTERN_C();
 
 
@@ -195,8 +196,8 @@
  */
 rtlCipherError SAL_CALL rtl_cipher_encode (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen
 ) SAL_THROW_EXTERN_C();
 
 
@@ -213,8 +214,8 @@
  */
 rtlCipherError SAL_CALL rtl_cipher_decode (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen
 ) SAL_THROW_EXTERN_C();
 
 
@@ -249,8 +250,8 @@
 rtlCipherError SAL_CALL rtl_cipher_initBF (
 	rtlCipher          Cipher,
 	rtlCipherDirection Direction,
-	const sal_uInt8 *pKeyData, sal_uInt32 nKeyLen,
-	const sal_uInt8 *pArgData, sal_uInt32 nArgLen
+	const sal_uInt8 *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8 *pArgData, sal_Size nArgLen
 ) SAL_THROW_EXTERN_C();
 
 
@@ -259,8 +260,8 @@
  */
 rtlCipherError SAL_CALL rtl_cipher_encodeBF (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen
 ) SAL_THROW_EXTERN_C();
 
 
@@ -269,8 +270,8 @@
  */
 rtlCipherError SAL_CALL rtl_cipher_decodeBF (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen
 ) SAL_THROW_EXTERN_C();
 
 
@@ -278,6 +279,64 @@
 	@see rtl_cipher_destroy()
  */
 void SAL_CALL rtl_cipher_destroyBF (
+	rtlCipher Cipher
+) SAL_THROW_EXTERN_C();
+
+
+/*========================================================================
+ *
+ * rtl_cipherARCFOUR (RC4) interface.
+ *
+ *======================================================================*/
+/** Create a RC4 cipher handle for the given mode.
+    @descr The RC4 symmetric stream cipher algorithm is specified in
+	Bruce Schneier: Applied Cryptography, 2nd edition, ch. 17.1
+
+	@see rtl_cipher_create()
+
+	@param  Mode [in] cipher mode. Must be rtl_Cipher_ModeStream.
+	@return Cipher handle, or 0 upon failure.
+ */
+rtlCipher SAL_CALL rtl_cipher_createARCFOUR (
+	rtlCipherMode Mode
+) SAL_THROW_EXTERN_C();
+
+
+/** Inititialize a RC4 cipher for the given direction.
+	@see rtl_cipher_init()
+ */
+rtlCipherError SAL_CALL rtl_cipher_initARCFOUR (
+	rtlCipher          Cipher,
+	rtlCipherDirection Direction,
+	const sal_uInt8 *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8 *pArgData, sal_Size nArgLen
+) SAL_THROW_EXTERN_C();
+
+
+/** Encode a buffer under the RC4 cipher algorithm.
+	@see rtl_cipher_encode()
+ */
+rtlCipherError SAL_CALL rtl_cipher_encodeARCFOUR (
+	rtlCipher   Cipher,
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen
+) SAL_THROW_EXTERN_C();
+
+
+/** Decode a buffer under the RC4 cipher algorithm.
+	@see rtl_cipher_decode()
+ */
+rtlCipherError SAL_CALL rtl_cipher_decodeARCFOUR (
+	rtlCipher   Cipher,
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen
+) SAL_THROW_EXTERN_C();
+
+
+/** Destroy a RC4 cipher handle.
+	@see rtl_cipher_destroy()
+ */
+void SAL_CALL rtl_cipher_destroyARCFOUR (
 	rtlCipher Cipher
 ) SAL_THROW_EXTERN_C();
 
Index: sal/inc/rtl/digest.h
===================================================================
RCS file: /cvs/porting/sal/inc/rtl/digest.h,v
retrieving revision 1.5
retrieving revision 1.5.242.1
diff -u -r1.5 -r1.5.242.1
--- sal/inc/rtl/digest.h	29 Nov 2001 19:12:42 -0000	1.5
+++ sal/inc/rtl/digest.h	15 Mar 2004 19:14:55 -0000	1.5.242.1
@@ -304,6 +304,19 @@
     @see rtl_digest_get()
  */
 rtlDigestError SAL_CALL rtl_digest_getMD5 (
+	rtlDigest Digest,
+	sal_uInt8 *pBuffer, sal_uInt32 nBufLen
+) SAL_THROW_EXTERN_C();
+
+
+/** Retrieve the raw (not finalized) MD5 digest value.
+	@descr This function is a non-standard replacement for
+	rtl_digest_getMD5() and must be used with caution.
+
+	@postcond Digest initialized to accept another update sequence.
+    @see      rtl_digest_get()
+ */
+rtlDigestError SAL_CALL rtl_digest_rawMD5 (
 	rtlDigest Digest,
 	sal_uInt8 *pBuffer, sal_uInt32 nBufLen
 ) SAL_THROW_EXTERN_C();
Index: sal/rtl/source/cipher.c
===================================================================
RCS file: /cvs/porting/sal/rtl/source/cipher.c,v
retrieving revision 1.1.1.1
retrieving revision 1.1.1.1.268.1
diff -u -r1.1.1.1 -r1.1.1.1.268.1
--- sal/rtl/source/cipher.c	18 Sep 2000 15:17:24 -0000	1.1.1.1
+++ sal/rtl/source/cipher.c	15 Mar 2004 19:14:55 -0000	1.1.1.1.268.1
@@ -129,13 +129,13 @@
 typedef rtlCipherError (SAL_CALL cipher_init_t) (
 	rtlCipher          Cipher,
 	rtlCipherDirection Direction,
-	const sal_uInt8 *pKeyData, sal_uInt32 nKeyLen,
-	const sal_uInt8 *pArgData, sal_uInt32 nArgLen);
+	const sal_uInt8 *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8 *pArgData, sal_Size nArgLen);
 
 typedef rtlCipherError (SAL_CALL cipher_update_t) (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen);
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen);
 
 typedef void (SAL_CALL cipher_delete_t) (rtlCipher Cipher);
 
@@ -172,6 +172,10 @@
 			Cipher = rtl_cipher_createBF (Mode);
 			break;
 
+		case rtl_Cipher_AlgorithmARCFOUR:
+			Cipher = rtl_cipher_createARCFOUR (Mode);
+			break;
+
 		default: /* rtl_Cipher_AlgorithmInvalid */
 			break;
 	}
@@ -184,8 +188,8 @@
 rtlCipherError SAL_CALL rtl_cipher_init (
 	rtlCipher          Cipher,
 	rtlCipherDirection Direction,
-	const sal_uInt8 *pKeyData, sal_uInt32 nKeyLen,
-	const sal_uInt8 *pArgData, sal_uInt32 nArgLen)
+	const sal_uInt8 *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8 *pArgData, sal_Size nArgLen)
 {
 	Cipher_Impl *pImpl = (Cipher_Impl*)Cipher;
 	if (pImpl == NULL)
@@ -202,8 +206,8 @@
  */
 rtlCipherError SAL_CALL rtl_cipher_encode (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen)
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen)
 {
 	Cipher_Impl *pImpl = (Cipher_Impl*)Cipher;
 	if (pImpl == NULL)
@@ -219,8 +223,8 @@
  */
 rtlCipherError SAL_CALL rtl_cipher_decode (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen)
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen)
 {
 	Cipher_Impl *pImpl = (Cipher_Impl*)Cipher;
 	if (pImpl == NULL)
@@ -276,8 +280,8 @@
 static rtlCipherError __rtl_cipherBF_init (
 	CipherContextBF *ctx,
 	rtlCipherMode    eMode,
-	const sal_uInt8 *pKeyData, sal_uInt32 nKeyLen,
-	const sal_uInt8 *pArgData, sal_uInt32 nArgLen);
+	const sal_uInt8 *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8 *pArgData, sal_Size nArgLen);
 
 /** __rtl_cipherBF_update.
  */
@@ -285,8 +289,8 @@
 	CipherContextBF    *ctx,
 	rtlCipherMode       eMode,
 	rtlCipherDirection  eDirection,
-	const sal_uInt8    *pData,   sal_uInt32 nDatLen,
-	sal_uInt8          *pBuffer, sal_uInt32 nBufLen);
+	const sal_uInt8    *pData,   sal_Size nDatLen,
+	sal_uInt8          *pBuffer, sal_Size nBufLen);
 
 /** __rtl_cipherBF_updateECB.
  */
@@ -295,7 +299,7 @@
 	rtlCipherDirection  direction,
 	const sal_uInt8    *pData,
 	sal_uInt8          *pBuffer,
-	sal_uInt32          nLength);
+	sal_Size            nLength);
 
 /** __rtl_cipherBF_updateCBC.
  */
@@ -304,7 +308,7 @@
 	rtlCipherDirection  direction,
 	const sal_uInt8    *pData,
 	sal_uInt8          *pBuffer,
-	sal_uInt32          nLength);
+	sal_Size          nLength);
 
 /** __rtl_cipherBF_updateCFB.
  */
@@ -313,7 +317,7 @@
 	rtlCipherDirection  direction,
 	const sal_uInt8    *pData,
 	sal_uInt8          *pBuffer,
-	sal_uInt32          nLength);
+	sal_Size            nLength);
 
 /** __rtl_cipher_encode.
  */
@@ -701,8 +705,8 @@
 static rtlCipherError __rtl_cipherBF_init (
 	CipherContextBF *ctx,
 	rtlCipherMode    eMode,
-	const sal_uInt8 *pKeyData, sal_uInt32 nKeyLen,
-	const sal_uInt8 *pArgData, sal_uInt32 nArgLen)
+	const sal_uInt8 *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8 *pArgData, sal_Size nArgLen)
 {
 	CipherKeyBF *key;
 	sal_uInt32   D, DL, DR;
@@ -773,8 +777,8 @@
 	CipherContextBF    *ctx,
 	rtlCipherMode       eMode,
 	rtlCipherDirection  eDirection,
-	const sal_uInt8    *pData,   sal_uInt32 nDatLen,
-	sal_uInt8          *pBuffer, sal_uInt32 nBufLen)
+	const sal_uInt8    *pData,   sal_Size nDatLen,
+	sal_uInt8          *pBuffer, sal_Size nBufLen)
 {
 	/* Check arguments. */
 	if ((pData == NULL) || (pBuffer == NULL))
@@ -830,7 +834,7 @@
 	rtlCipherDirection  direction,
 	const sal_uInt8    *pData,
 	sal_uInt8          *pBuffer,
-	sal_uInt32          nLength)
+	sal_Size            nLength)
 {
 	CipherKeyBF *key;
 	sal_uInt32   DL, DR;
@@ -865,7 +869,7 @@
 	rtlCipherDirection  direction,
 	const sal_uInt8    *pData,
 	sal_uInt8          *pBuffer,
-	sal_uInt32          nLength)
+	sal_Size            nLength)
 {
 	CipherKeyBF *key;
 	sal_uInt32   DL, DR;
@@ -918,7 +922,7 @@
 	rtlCipherDirection  direction,
 	const sal_uInt8    *pData,
 	sal_uInt8          *pBuffer,
-	sal_uInt32          nLength)
+	sal_Size            nLength)
 {
 	sal_uInt8  *iv;
 	sal_uInt32  k;
@@ -1087,8 +1091,8 @@
 rtlCipherError SAL_CALL rtl_cipher_initBF (
 	rtlCipher          Cipher,
 	rtlCipherDirection Direction,
-	const sal_uInt8 *pKeyData, sal_uInt32 nKeyLen,
-	const sal_uInt8 *pArgData, sal_uInt32 nArgLen)
+	const sal_uInt8 *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8 *pArgData, sal_Size nArgLen)
 {
 	CipherBF_Impl *pImpl = (CipherBF_Impl*)Cipher;
 
@@ -1113,8 +1117,8 @@
  */
 rtlCipherError SAL_CALL rtl_cipher_encodeBF (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen)
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen)
 {
 	CipherBF_Impl *pImpl = (CipherBF_Impl*)Cipher;
 	if (pImpl == NULL)
@@ -1139,8 +1143,8 @@
  */
 rtlCipherError SAL_CALL rtl_cipher_decodeBF (
 	rtlCipher   Cipher,
-	const void *pData,   sal_uInt32 nDatLen,
-	sal_uInt8  *pBuffer, sal_uInt32 nBufLen)
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen)
 {
 	CipherBF_Impl *pImpl = (CipherBF_Impl*)Cipher;
 	if (pImpl == NULL)
@@ -1175,3 +1179,239 @@
 	}
 }
 
+/*========================================================================
+ *
+ * rtl_cipher_ARCFOUR (RC4) internals.
+ *
+ *======================================================================*/
+#define CIPHER_CBLOCK_ARCFOUR 256
+
+typedef struct cipherARCFOUR_context_st
+{
+	unsigned int m_S[CIPHER_CBLOCK_ARCFOUR];
+	unsigned int m_X, m_Y;
+} ContextARCFOUR_Impl;
+
+typedef struct cipherARCFOUR_impl_st
+{
+	Cipher_Impl         m_cipher;
+	ContextARCFOUR_Impl m_context;
+} CipherARCFOUR_Impl;
+
+/** rtl_cipherARCFOUR_init_Impl.
+ */
+static rtlCipherError rtl_cipherARCFOUR_init_Impl (
+	ContextARCFOUR_Impl *ctx,
+	const sal_uInt8     *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8     *pArgData, sal_Size nArgLen);
+
+/** rtl_cipherARCFOUR_update_Impl.
+ */
+static rtlCipherError rtl_cipherARCFOUR_update_Impl (
+	ContextARCFOUR_Impl *ctx,
+	const sal_uInt8     *pData,   sal_Size nDatLen,
+	sal_uInt8           *pBuffer, sal_Size nBufLen);
+
+/*
+ * rtl_cipherARCFOUR_init_Impl.
+ */
+static rtlCipherError rtl_cipherARCFOUR_init_Impl (
+	ContextARCFOUR_Impl *ctx,
+	const sal_uInt8     *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8     *pArgData, sal_Size nArgLen)
+{
+	unsigned int  K[CIPHER_CBLOCK_ARCFOUR];
+	unsigned int *L, *S;
+	unsigned int  x, y, t;
+	sal_Size      n, k;
+
+	S = &(ctx->m_S[0]);
+
+	/* Initialize S linearly. */
+	for (x = 0; x < CIPHER_CBLOCK_ARCFOUR; x++)
+		S[x] = x;
+
+	/* Initialize K with key, repeat key as necessary. */
+	for (L = K, n = CIPHER_CBLOCK_ARCFOUR; n > nKeyLen; n -= nKeyLen)
+	{
+		for (k = 0; k < nKeyLen; k++) L[k] = pKeyData[k];
+		L += nKeyLen;
+	}
+	for (k = 0; k < n; k++) L[k] = pKeyData[k];
+
+	/* Initialize S with K. */
+	for (x = 0, y = 0; x < CIPHER_CBLOCK_ARCFOUR; x++)
+	{
+		y = (y + S[x] + K[x]) % CIPHER_CBLOCK_ARCFOUR;
+		t = S[x], S[x] = S[y], S[y] = t; /* swap S[x] and S[y] */
+	}
+
+	/* Initialize counters X and Y. */
+	ctx->m_X = 0;
+	ctx->m_Y = 0;
+
+	return rtl_Cipher_E_None;
+}
+
+/*
+ * rtl_cipherARCFOUR_update_Impl.
+ */
+static rtlCipherError rtl_cipherARCFOUR_update_Impl (
+	ContextARCFOUR_Impl *ctx,
+	const sal_uInt8     *pData,   sal_Size nDatLen,
+	sal_uInt8           *pBuffer, sal_Size nBufLen)
+{
+	register unsigned int *S;
+	register unsigned int  x, y, t;
+	sal_Size               k;
+
+	/* Check arguments. */
+	if ((pData == NULL) || (pBuffer == NULL))
+		return rtl_Cipher_E_Argument;
+
+	if (!((0 < nDatLen) && (nDatLen <= nBufLen)))
+		return rtl_Cipher_E_BufferSize;
+
+	/* Update. */
+	S = &(ctx->m_S[0]);
+	for (k = 0; k < nDatLen; k++)
+	{
+		/* Update counters X and Y. */
+		x = ctx->m_X;
+		y = ctx->m_Y;
+		x = (x + 1   ) % CIPHER_CBLOCK_ARCFOUR;
+		y = (y + S[x]) % CIPHER_CBLOCK_ARCFOUR;
+		ctx->m_X = x;
+		ctx->m_Y = y;
+
+		/* Swap S[x] and S[y]. */
+		t = S[x], S[x] = S[y], S[y] = t;
+
+		/* Evaluate next key byte S[t]. */
+		t = (S[x] + S[y]) % CIPHER_CBLOCK_ARCFOUR;
+		pBuffer[k] = pData[k] ^ ((sal_uInt8)(S[t] & 0xff));
+	}
+	
+	return rtl_Cipher_E_None;
+}
+
+/*========================================================================
+ *
+ * rtl_cipher_ARCFOUR (RC4) implementation.
+ *
+ * Reference:
+ *   Bruce Schneier: Applied Cryptography, 2nd edition, ch. 17.1
+ *
+ *======================================================================*/
+/*
+ * rtl_cipher_createARCFOUR.
+ */
+rtlCipher SAL_CALL rtl_cipher_createARCFOUR (rtlCipherMode Mode)
+{
+	CipherARCFOUR_Impl *pImpl = (CipherARCFOUR_Impl*)NULL;
+
+	if (!(Mode == rtl_Cipher_ModeStream))
+		return ((rtlCipher)NULL);
+
+	pImpl = ((CipherARCFOUR_Impl*)rtl_allocateZeroMemory (sizeof (CipherARCFOUR_Impl)));
+	if (pImpl)
+	{
+		pImpl->m_cipher.m_algorithm = rtl_Cipher_AlgorithmARCFOUR;
+		pImpl->m_cipher.m_direction = rtl_Cipher_DirectionInvalid;
+		pImpl->m_cipher.m_mode      = rtl_Cipher_ModeStream;
+
+		pImpl->m_cipher.m_init      = rtl_cipher_initARCFOUR;
+		pImpl->m_cipher.m_encode    = rtl_cipher_encodeARCFOUR;
+		pImpl->m_cipher.m_decode    = rtl_cipher_decodeARCFOUR;
+		pImpl->m_cipher.m_delete    = rtl_cipher_destroyARCFOUR;
+	}
+	return ((rtlCipher)pImpl);
+}
+
+/*
+ * rtl_cipher_initARCFOUR.
+ */
+rtlCipherError SAL_CALL rtl_cipher_initARCFOUR (
+	rtlCipher          Cipher,
+	rtlCipherDirection Direction,
+	const sal_uInt8 *pKeyData, sal_Size nKeyLen,
+	const sal_uInt8 *pArgData, sal_Size nArgLen)
+{
+	CipherARCFOUR_Impl *pImpl = (CipherARCFOUR_Impl*)Cipher;
+
+	if ((pImpl == NULL) || (pKeyData == NULL))
+		return rtl_Cipher_E_Argument;
+
+	if (!(pImpl->m_cipher.m_algorithm == rtl_Cipher_AlgorithmARCFOUR))
+		return rtl_Cipher_E_Algorithm;
+
+	if (!(Direction == rtl_Cipher_DirectionInvalid))
+		pImpl->m_cipher.m_direction = Direction;
+	else
+		return rtl_Cipher_E_Direction;
+
+	return rtl_cipherARCFOUR_init_Impl (
+		&(pImpl->m_context),
+		pKeyData, nKeyLen, pArgData, nArgLen);
+}
+
+/*
+ * rtl_cipher_encodeARCFOUR.
+ */
+rtlCipherError SAL_CALL rtl_cipher_encodeARCFOUR (
+	rtlCipher   Cipher,
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen)
+{
+	CipherARCFOUR_Impl *pImpl = (CipherARCFOUR_Impl*)Cipher;
+	if (pImpl == NULL)
+		return rtl_Cipher_E_Argument;
+
+	if (!(pImpl->m_cipher.m_algorithm == rtl_Cipher_AlgorithmARCFOUR))
+		return rtl_Cipher_E_Algorithm;
+
+	if (pImpl->m_cipher.m_direction == rtl_Cipher_DirectionInvalid)
+		return rtl_Cipher_E_Direction;
+
+	return rtl_cipherARCFOUR_update_Impl (
+		&(pImpl->m_context),
+		(const sal_uInt8*)pData, nDatLen, pBuffer, nBufLen);
+}
+
+/*
+ * rtl_cipher_decodeARCFOUR.
+ */
+rtlCipherError SAL_CALL rtl_cipher_decodeARCFOUR (
+	rtlCipher   Cipher,
+	const void *pData,   sal_Size nDatLen,
+	sal_uInt8  *pBuffer, sal_Size nBufLen)
+{
+	CipherARCFOUR_Impl *pImpl = (CipherARCFOUR_Impl*)Cipher;
+	if (pImpl == NULL)
+		return rtl_Cipher_E_Argument;
+
+	if (!(pImpl->m_cipher.m_algorithm == rtl_Cipher_AlgorithmARCFOUR))
+		return rtl_Cipher_E_Algorithm;
+
+	if (pImpl->m_cipher.m_direction == rtl_Cipher_DirectionInvalid)
+		return rtl_Cipher_E_Direction;
+
+	return rtl_cipherARCFOUR_update_Impl (
+		&(pImpl->m_context),
+		(const sal_uInt8*)pData, nDatLen, pBuffer, nBufLen);
+}
+
+/*
+ * rtl_cipher_destroyARCFOUR.
+ */
+void SAL_CALL rtl_cipher_destroyARCFOUR (rtlCipher Cipher)
+{
+	CipherARCFOUR_Impl *pImpl = (CipherARCFOUR_Impl*)Cipher;
+	if (pImpl)
+	{
+		if (pImpl->m_cipher.m_algorithm == rtl_Cipher_AlgorithmARCFOUR)
+			rtl_freeZeroMemory (pImpl, sizeof (CipherARCFOUR_Impl));
+		else
+			rtl_freeMemory (pImpl);
+	}
+}
Index: sal/rtl/source/digest.c
===================================================================
RCS file: /cvs/porting/sal/rtl/source/digest.c,v
retrieving revision 1.6
retrieving revision 1.6.256.1
diff -u -r1.6 -r1.6.256.1
--- sal/rtl/source/digest.c	6 May 2001 15:15:50 -0000	1.6
+++ sal/rtl/source/digest.c	15 Mar 2004 19:14:55 -0000	1.6.256.1
@@ -913,6 +913,38 @@
 	ctx = &(pImpl->m_context);
 
 	__rtl_digest_endMD5 (ctx);
+	RTL_DIGEST_LTOC (ctx->m_nA, p);
+	RTL_DIGEST_LTOC (ctx->m_nB, p);
+	RTL_DIGEST_LTOC (ctx->m_nC, p);
+	RTL_DIGEST_LTOC (ctx->m_nD, p);
+	__rtl_digest_initMD5 (ctx);
+
+	return rtl_Digest_E_None;
+}
+
+/*
+ * rtl_digest_rawMD5.
+ */
+rtlDigestError SAL_CALL rtl_digest_rawMD5 (
+	rtlDigest Digest, sal_uInt8 *pBuffer, sal_uInt32 nBufLen)
+{
+	DigestMD5_Impl   *pImpl = (DigestMD5_Impl *)Digest;
+	sal_uInt8        *p     = pBuffer;
+
+	DigestContextMD5 *ctx;
+
+	if ((pImpl == NULL) || (pBuffer == NULL))
+		return rtl_Digest_E_Argument;
+
+	if (!(pImpl->m_digest.m_algorithm == rtl_Digest_AlgorithmMD5))
+		return rtl_Digest_E_Algorithm;
+
+	if (!(pImpl->m_digest.m_length <= nBufLen))
+		return rtl_Digest_E_BufferSize;
+
+	ctx = &(pImpl->m_context);
+
+	/* __rtl_digest_endMD5 (ctx); *//* not finalized */
 	RTL_DIGEST_LTOC (ctx->m_nA, p);
 	RTL_DIGEST_LTOC (ctx->m_nB, p);
 	RTL_DIGEST_LTOC (ctx->m_nC, p);
Index: sal/workben/t_cipher.c
===================================================================
RCS file: /cvs/porting/sal/workben/t_cipher.c,v
retrieving revision 1.1.1.1
retrieving revision 1.1.1.1.268.1
diff -u -r1.1.1.1 -r1.1.1.1.268.1
--- sal/workben/t_cipher.c	18 Sep 2000 15:17:30 -0000	1.1.1.1
+++ sal/workben/t_cipher.c	15 Mar 2004 19:14:56 -0000	1.1.1.1.268.1
@@ -206,13 +206,58 @@
 	0x51, 0x9D, 0x57, 0xA6, 0xC3
 };
 
+static sal_uInt8 arcfour_key[6][30] =
+{
+	{ 8, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef },
+	{ 8, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef },
+	{ 8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
+	{ 4, 0xef, 0x01, 0x23, 0x45 },
+	{ 8, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef },
+	{ 4, 0xef, 0x01, 0x23, 0x45 }
+};
+static sal_uInt8 arcfour_data_len[6] =
+{
+	8, 8, 8, 20, 28, 10
+};
+static sal_uInt8 arcfour_data[6][30] =
+{
+	{ 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xff },
+	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff },
+	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff },
+	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	  0x00, 0x00, 0x00, 0x00, 0xff },
+	{ 0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0,
+	  0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0,
+	  0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0,
+	  0x12, 0x34, 0x56, 0x78, 0xff },
+	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	  0x00, 0x00, 0xff }
+};
+static sal_uInt8 arcfour_ok[6][30] =
+{
+	{ 0x75, 0xb7, 0x87, 0x80, 0x99, 0xe0, 0xc5, 0x96, 0x00},
+	{ 0x74, 0x94, 0xc2, 0xe7, 0x10, 0x4b, 0x08, 0x79, 0x00},
+	{ 0xde, 0x18, 0x89, 0x41, 0xa3, 0x37, 0x5d, 0x3a, 0x00},
+	{ 0xd6, 0xa1, 0x41, 0xa7, 0xec, 0x3c, 0x38, 0xdf,
+	  0xbd, 0x61, 0x5a, 0x11, 0x62, 0xe1, 0xc7, 0xba,
+	  0x36, 0xb6, 0x78, 0x58, 0x00 },
+	{ 0x66, 0xa0, 0x94, 0x9f, 0x8a, 0xf7, 0xd6, 0x89,
+	  0x1f, 0x7f, 0x83, 0x2b, 0xa8, 0x33, 0xc0, 0x0c,
+	  0x89, 0x2e, 0xbe, 0x30, 0x14, 0x3c, 0xe2, 0x87,
+	  0x40, 0x01, 0x1e, 0xcf, 0x00 },
+	{ 0xd6, 0xa1, 0x41, 0xa7, 0xec, 0x3c, 0x38, 0xdf,
+	  0xbd, 0x61, 0x00}
+};
+
 int SAL_CALL main (int argc, char *argv)
 {
 	rtlCipher cipher;
 
 	/* ECB */
 	cipher = rtl_cipher_create (rtl_Cipher_AlgorithmBF, rtl_Cipher_ModeECB);
-	if (cipher)
+	OSL_ASSERT(cipher != 0);
+	if (cipher != 0)
 	{
 		rtlCipherError result;
 		sal_uInt8      ecb_in[40], ecb_out[40];
@@ -240,7 +285,8 @@
 
 	/* CBC */
 	cipher = rtl_cipher_create (rtl_Cipher_AlgorithmBF, rtl_Cipher_ModeCBC);
-	if (cipher)
+	OSL_ASSERT(cipher != 0);
+	if (cipher != 0)
 	{
 		rtlCipherError result;
 		sal_uInt8      cbc_in[40], cbc_out[40];
@@ -273,7 +319,8 @@
 
 	/* CFB */
 	cipher = rtl_cipher_create (rtl_Cipher_AlgorithmBF, rtl_Cipher_ModeStream);
-	if (cipher)
+	OSL_ASSERT(cipher != 0);
+	if (cipher != 0)
 	{
 		rtlCipherError result;
 		sal_uInt8      cfb_in[40], cfb_out[40];
@@ -300,7 +347,81 @@
 			cipher, cfb_out, length, cfb_in, sizeof(cfb_in));
 		OSL_ASSERT(result == rtl_Cipher_E_None);
 		OSL_ASSERT(memcmp (cfb_in, cbc_data, length) == 0);
+
+		rtl_cipher_destroy (cipher);
+	}
+
+	/* ARCFOUR */
+	cipher = rtl_cipher_create (rtl_Cipher_AlgorithmARCFOUR, rtl_Cipher_ModeStream);
+	OSL_ASSERT(cipher != 0);
+	if (cipher != 0)
+	{
+		rtlCipherError result;
+		sal_uInt8      arcfour_out[40];
+		sal_Size       length;
+		int            i, n;
+
+		n = sizeof(arcfour_data_len) / sizeof(arcfour_data_len[0]);
+		for (i = 0; i < n; i++)
+		{
+			length = arcfour_data_len[i];
+
+			result = rtl_cipher_init (
+				cipher, rtl_Cipher_DirectionBoth,
+				&(arcfour_key[i][1]), arcfour_key[i][0], 0, 0);
+			OSL_ASSERT(result == rtl_Cipher_E_None);
+
+			memset (arcfour_out, 0, sizeof(arcfour_out));
+			result = rtl_cipher_encode (
+				cipher, &(arcfour_data[i][0]), length,
+				arcfour_out, sizeof(arcfour_out));
+			OSL_ASSERT(result == rtl_Cipher_E_None);
+			OSL_ASSERT(memcmp (arcfour_out, arcfour_ok[i], length) == 0);
+		}
+
+		n = arcfour_data_len[3];
+		for (i = 1; i < n; i++)
+		{
+			length = i;
+
+			result = rtl_cipher_init (
+				cipher, rtl_Cipher_DirectionBoth,
+				&(arcfour_key[3][1]), arcfour_key[3][0], 0, 0);
+			OSL_ASSERT(result == rtl_Cipher_E_None);
+
+			memset (arcfour_out, 0, sizeof(arcfour_out));
+			result = rtl_cipher_encode (
+				cipher, &(arcfour_data[3][0]), length,
+				arcfour_out, sizeof(arcfour_out));
+			OSL_ASSERT(result == rtl_Cipher_E_None);
+			OSL_ASSERT(memcmp (arcfour_out, arcfour_ok[3], length) == 0);
+			OSL_ASSERT(arcfour_out[length] == 0);
+		}
+
+		n = arcfour_data_len[3];
+		for (i = 1; i < n; i++)
+		{
+			length = i;
+
+			result = rtl_cipher_init (
+				cipher, rtl_Cipher_DirectionBoth,
+				&(arcfour_key[3][1]), arcfour_key[3][0], 0, 0);
+			OSL_ASSERT(result == rtl_Cipher_E_None);
+
+			memset (arcfour_out, 0, sizeof(arcfour_out));
+			result = rtl_cipher_encode (
+				cipher, &(arcfour_data[3][0]), length,
+				&(arcfour_out[0]), sizeof(arcfour_out));
+			OSL_ASSERT(result == rtl_Cipher_E_None);
+
+			result = rtl_cipher_encode (
+				cipher, &(arcfour_data[3][length]), n - length,
+				&(arcfour_out[length]), sizeof(arcfour_out) - length);
+			OSL_ASSERT(result == rtl_Cipher_E_None);
+
+			OSL_ASSERT(memcmp (arcfour_out, arcfour_ok[3], length) == 0);
+		}
 
 		rtl_cipher_destroy (cipher);
 	}


--- sal/util/sal.map	2004-09-02 12:52:58.255859848 +0100
+++ sal/util/sal.map	2004-09-02 13:11:57.326694760 +0100
@@ -169,6 +169,12 @@
         osl_unloadUserProfile;
         osl_sendResourcePipe;
         osl_receiveResourcePipe;
+        rtl_cipher_createARCFOUR;
+        rtl_cipher_initARCFOUR;
+        rtl_cipher_decodeARCFOUR;
+        rtl_cipher_encodeARCFOUR;
+        rtl_cipher_destroyARCFOUR;
+        rtl_digest_rawMD5;
         rtl_allocateMemory;
         rtl_compareMemory;
         rtl_copyMemory;
