Index: vcl/unx/source/app/saldata.cxx
===================================================================
RCS file: /cvs/gsl/vcl/unx/source/app/saldata.cxx,v
retrieving revision 1.25.50.1
diff -u -p -u -r1.25.50.1 saldata.cxx
--- vcl/unx/source/app/saldata.cxx	21 Jul 2003 14:48:43 -0000	1.25.50.1
+++ vcl/unx/source/app/saldata.cxx	21 Aug 2003 13:57:18 -0000
@@ -98,6 +98,11 @@
 
 #include <prex.h>
 
+#ifndef DISABLE_GTK_INTEGRATION
+#  include <gtk/gtk.h>
+#  include <gdk/gdkx.h>
+#endif
+
 // [ed] 6/15/02 There's a conflicting definition of INT8 within the Xmd.h header
 // and the solar.h OOo header.  So, wrap the X11 header with a bogus #define
 // to use the OOo definition of the symbol for INT8.
@@ -459,6 +464,7 @@ SalXLib::SalXLib()
 	Timeout_.tv_usec		= 0;
 	nTimeoutMS_ 			= 0;
 
+#ifdef DISABLE_GTK_INTEGRATION
 	nFDs_					= 0;
 	FD_ZERO( &aReadFDS_ );
 	FD_ZERO( &aExceptionFDS_ );
@@ -497,6 +503,9 @@ SalXLib::SalXLib()
 		FD_SET( pTimeoutFDS_[0], &aReadFDS_ );
 		nFDs_ = pTimeoutFDS_[0] + 1;
 	}
+#else
+	pSources = NULL;
+#endif
 
 	bWasXError_ 			= FALSE;
 	bIgnoreXErrors_ 		= !!getenv( "SAL_IGNOREXERRORS" );
@@ -506,9 +515,11 @@ SalXLib::SalXLib()
 
 SalXLib::~SalXLib()
 {
+#ifdef DISABLE_GTK_INTEGRATION
 	// close 'wakeup' pipe.
 	close (pTimeoutFDS_[0]);
 	close (pTimeoutFDS_[1]);
+#endif
 
 // completetly disabled Bug Nr. #47319 -> segv while using xsuntransport=shmem
 // #ifdef SAL_XT
@@ -533,6 +544,14 @@ void SalXLib::Init( int *pArgc, char *pp
 	 */
 	
 	Display *pDisp = NULL;
+	struct _GdkDisplay *pGdkDisp = NULL;
+	
+#ifndef DISABLE_GTK_INTEGRATION
+	if( !g_thread_supported() )
+		g_thread_init( NULL );
+	gdk_threads_init();
+	gtk_init_check( NULL, NULL );
+#endif
 
 	// is there a -display command line parameter?
 	vos::OExtCommandLine aCommandLine;
@@ -547,7 +566,11 @@ void SalXLib::Init( int *pArgc, char *pp
 			aCommandLine.getCommandArg(i+1, aParam);
 			aDisplay = rtl::OUStringToOString(
 				   aParam, osl_getThreadTextEncoding());
+#ifndef DISABLE_GTK_INTEGRATION
+			if ((pGdkDisp = gdk_display_open( aDisplay.getStr() )) != NULL)
+#else
 			if ((pDisp = XOpenDisplay(aDisplay.getStr()))!=NULL)
+#endif
 			{
 				/*
 			 	* if a -display switch was used, we need
@@ -564,15 +587,30 @@ void SalXLib::Init( int *pArgc, char *pp
 		}
 	}
 
-	if (!pDisp && !aDisplay.getLength()) 
+	if (!pDisp && !pGdkDisp && !aDisplay.getLength()) 
 	{
 		// Open $DISPLAY or default...
 		char *pDisplay = getenv("DISPLAY");
 		if (pDisplay != NULL)
 			aDisplay = rtl::OString(pDisplay);
-		pDisp  = XOpenDisplay(pDisplay);
+#ifndef DISABLE_GTK_INTEGRATION
+		pGdkDisp = gdk_display_open(pDisplay);
+#else
+		pDisp = XOpenDisplay(pDisplay);
+#endif
 	}
 
+#ifndef DISABLE_GTK_INTEGRATION
+	pDisp = gdk_x11_display_get_xdisplay(pGdkDisp);
+
+//	fprintf( stderr, "Open display %p (%p): '%s'\n", this, pGdkDisp,
+//		 DisplayString( pDisp ) );
+
+	GtkWidget *a = gtk_window_new (GTK_WINDOW_TOPLEVEL);
+	gtk_container_add (GTK_CONTAINER (a), gtk_button_new_with_label ("Foo"));
+	gtk_widget_show_all (a);
+#endif
+
 	if ( !pDisp )
 	{
 	    rtl::OUString aProgramFileURL = pSalData->GetCommandLineParam(0);
@@ -721,6 +759,7 @@ void SalXLib::XError( Display *pDisplay,
 	bWasXError_ = TRUE;
 }
 
+#ifdef DISABLE_GTK_INTEGRATION
 struct YieldEntry
 {
 	YieldEntry* next;		// pointer to next entry
@@ -776,6 +815,7 @@ void SalXLib::Remove( int nFD )
 		nFDs_ = nFD + 1;
 	}
 }
+#endif
 
 bool SalXLib::CheckTimeout( bool bExecuteTimers )
 {
@@ -806,6 +846,8 @@ bool SalXLib::CheckTimeout( bool bExecut
     return bRet;
 }
 
+#ifdef DISABLE_GTK_INTEGRATION
+
 void SalXLib::Yield( BOOL bWait )
 {
     // check for timeouts here if you want to make screenshots
@@ -952,3 +994,5 @@ void SalXLib::Wakeup()
 {
 	write (pTimeoutFDS_[1], "", 1);
 }
+
+#endif // DISABLE_GTK_INTEGRATION
