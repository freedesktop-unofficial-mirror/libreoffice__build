--- /dev/null	2002-08-31 00:31:37.000000000 +0100
+++ vcl/inc/layout.hxx	2003-08-26 17:26:23.000000000 +0100
@@ -0,0 +1,100 @@
+#ifndef _SV_LAYOUT_HXX
+#define _SV_LAYOUT_HXX
+
+#include <list>
+
+#include <gen.hxx>
+#include <resmgr.hxx>
+#include <window.hxx>
+
+class Layout;
+//
+//      The connector exists to connect widgets as they are
+// instantiated later, to the pre-existing layout peers.
+//
+class LayoutConnector {
+	struct Connection {
+		USHORT  nId;
+		Layout *pLayout;
+		Window *pWindow;
+	};
+	std::list<Connection> m_aMap;
+	ResMgr *m_pResMgr;
+	Window *m_pTopWindow;
+	Layout *m_pTopLayout;
+    private:
+	void    reconcile( Connection &pCnx );
+    public:
+	LayoutConnector( Window *pWindow, ResMgr *pMgr, USHORT nId );
+
+	// Construction time bits
+	ResMgr *getSetupMgr();
+	void    addMap( USHORT nId, Layout *pLayout );
+	Layout *loadLayout();
+
+	// later association bits
+	void    reconcileMap( USHORT nId, Window *pWindow );
+};
+
+class Layout {
+public: // sucking child properties ...
+	Window *m_pPeer;
+	Size    m_aRequisition;
+	int     m_nBorderWidth;
+	bool    m_bHomogeneous;
+// Unsatisfactory child properties ...
+	int     m_nPadding;
+	bool    m_bExpand;
+	bool    m_bFill;
+	bool    m_bPackStart;
+    public:
+	Layout();
+	~Layout();
+	virtual void readRes( LayoutConnector &rCnx, ResMgr *pResMgr );
+	virtual void requestSize( Size &rSize );
+	virtual void allocateSize( const Point &rPoint,
+				   const Size  &rSize );
+	virtual void addChild( Layout *pLayout );
+	const Size  &getRequisition()        { return m_aRequisition; }
+	void         setPeer( Window *pPeer) { m_pPeer = pPeer; }
+	Window      *getPeer()               { return  m_pPeer; }
+	bool         visible() { return m_pPeer ? m_pPeer->IsVisible() : TRUE; }
+};
+
+class LayoutBin : public Layout {
+    protected:
+	Layout *m_pChild;
+    public:
+	LayoutBin();
+	~LayoutBin();
+	virtual void requestSize( Size &rSize );
+	virtual void allocateSize( const Point &rPoint, const Size &rSize );
+};
+
+class LayoutBox : public Layout {
+    protected:
+//	bool    m_bHomogeneous;
+	struct BoxChild {
+		Layout *pLayout;
+		int     nPadding;
+		bool    bExpand;
+		bool    bFill;
+		bool    bPackStart;
+	};
+	int m_nSpacing;
+	std::list<BoxChild> m_aChildren;
+    public:
+	LayoutBox();
+	~LayoutBox();
+	virtual void addChild( Layout *pLayout );
+};
+
+class LayoutHBox : public LayoutBox {
+    public:
+	LayoutHBox();
+	virtual void  requestSize( Size &rSize );
+	virtual void  allocateSize( const Point &rPoint,
+				    const Size  &rSize );
+};
+
+#endif // _SV_LAYOUT_HXX
--- /dev/null	2002-08-31 00:31:37.000000000 +0100
+++ vcl/source/window/layout.cxx	2003-08-26 17:36:06.000000000 +0100
@@ -0,0 +1,353 @@
+#include <sal/macros.h>
+#include <tools/rcid.h>
+#include <tools/rc.h>
+#include "layout.hxx"
+
+// --- LayoutConnector ---
+
+Layout *LayoutConnector::loadLayout()
+{
+	RSHEADER_TYPE *pHdr = (RSHEADER_TYPE *)m_pResMgr->GetClass();
+	m_pResMgr->Increment( sizeof( RSHEADER_TYPE ) );
+
+	fprintf( stderr, "Header: Id 0x%x type: %d, Glob: 0x%x, Local: 0x%x\n",
+		 pHdr->GetId(), pHdr->GetRT(), pHdr->GetGlobOff(), pHdr->GetLocalOff() );
+
+	Layout *pLayout = NULL;
+
+	switch( pHdr->GetRT() ) {
+	case RSC_LAYOUT_BIN:
+	case RSC_LAYOUT_BOX:
+		fprintf( stderr, "Layout 0x%x is not instantiable\n", pHdr->GetRT() );
+		break;
+	case RSC_LAYOUT_HBOX:
+		fprintf( stderr, "HBox Layout\n", pHdr->GetRT() );
+		pLayout = new LayoutHBox();
+		break;
+	case RSC_LAYOUT_WINDOW:
+	case RSC_LAYOUT_ALIGNMENT:
+	case RSC_LAYOUT_VBOX:
+	case RSC_LAYOUT_TABLE:
+		fprintf( stderr, "Layout 0x%x not yet implemented\n", pHdr->GetRT() );
+		break;
+	case RSC_LAYOUT:
+		fprintf( stderr, "Base Layout\n", pHdr->GetRT() );
+		pLayout = new Layout();
+		break;
+	default:
+		fprintf( stderr, "Layout 0x%x is unknown\n", pHdr->GetRT() );
+		break;
+	}
+
+	if( pLayout )
+		pLayout->readRes( *this, m_pResMgr );
+
+	return pLayout;
+}
+LayoutConnector::LayoutConnector( Window *pWindow, ResMgr *pMgr, 
+				  USHORT nId) :
+	m_pTopWindow( pWindow )
+{
+	fprintf( stderr, "Window with a layout ! (0x%x)\n", nId );
+
+	ResId aLayout( nId, pMgr );
+	aLayout.SetRT( RSC_LAYOUT_HBOX );
+
+	m_pResMgr = pMgr;
+
+	// Do the setup ...
+	if( pMgr->GetResource( aLayout ) ) {
+		m_pTopLayout = loadLayout();
+		pMgr->PopContext();
+	} else
+		fprintf( stderr, "No such resource 0x%x\n", nId );
+
+	m_pResMgr = NULL;
+}
+void LayoutConnector::reconcile( Connection &pCnx)
+{
+	fprintf( stderr, "Reconcile mapping 0x%x\n", pCnx );
+	pCnx.pLayout->setPeer( pCnx.pWindow );
+	fprintf( stderr, "FIXME: trigger re-layout\n" );
+}
+void LayoutConnector::addMap( USHORT nId, Layout *pLayout )
+{
+	std::list<Connection>::iterator aIter;
+	for (aIter = m_aMap.begin(); aIter != m_aMap.end(); aIter++) {
+		if( aIter->nId == nId ) {
+			aIter->pLayout = pLayout;
+			reconcile( *aIter );
+			return;
+		}
+	}
+	Connection aCnx = { nId, pLayout, NULL };
+	m_aMap.push_back( aCnx );
+}
+void LayoutConnector::reconcileMap( USHORT nId, Window *pWindow )
+{
+	std::list<Connection>::iterator aIter;
+	for (aIter = m_aMap.begin(); aIter != m_aMap.end(); aIter++) {
+		if( aIter->nId == nId ) {
+			aIter->pWindow = pWindow;
+			reconcile( *aIter );
+			return;
+		}
+	}
+}
+
+// --- Layout ---
+
+Layout::Layout() :
+	m_pPeer( NULL ), m_nBorderWidth( 0 ),
+	m_bHomogeneous( FALSE ),
+	m_nPadding( 0 ),
+	m_bExpand( 0 ),
+	m_bFill( 0 ),
+	m_bPackStart( TRUE )
+{
+}
+Layout::~Layout()
+{
+}
+void Layout::addChild( Layout *pLayout )
+{
+	fprintf( stderr, "Meaningless to add a child to base Layout\n");
+}
+void Layout::readRes( LayoutConnector &rCnx, ResMgr *pResMgr )
+{
+	USHORT nFlags;
+	nFlags = pResMgr->ReadShort();
+
+	fprintf( stderr, "Flags: 0x%x\n", nFlags );
+
+	if( nFlags & RSC_LAYOUT_PEER ) {
+		USHORT nPeer = pResMgr->ReadShort();
+		fprintf( stderr, "Peer: 0x%x\n", nPeer );
+		rCnx.addMap( nPeer, this );
+	}
+	if( nFlags & RSC_LAYOUT_BORDER)
+		m_nBorderWidth = pResMgr->ReadShort();
+	if( nFlags & RSC_LAYOUT_HOMOGENEOUS )
+		m_bHomogeneous = TRUE;
+	else
+		m_bHomogeneous = FALSE;
+
+	if( nFlags & RSC_LAYOUT_CHILD_EXPAND )
+		m_bExpand = TRUE;
+	if( nFlags & RSC_LAYOUT_CHILD_FILL )
+		m_bFill = TRUE;
+	if( nFlags & RSC_LAYOUT_CHILD_PADDING )
+		m_nPadding = pResMgr->ReadShort();
+	if( nFlags & RSC_LAYOUT_CHILD_PACK_END )
+		m_bPackStart = FALSE;
+	
+	USHORT nMarker;
+	while (( nMarker = pResMgr->ReadShort() ) != 0x3c3e )
+		fprintf( stderr, " Skip strangeness 0x%x\n", nMarker); // FIXME: strange.
+
+	int nChildren = pResMgr->ReadShort();
+	fprintf( stderr, "Layout has %d children\n", nChildren );
+
+	for( int i = 0; i < nChildren; i++ ){
+		fprintf( stderr, "Load child %d\n", i);
+		Layout *pChild;
+
+		if( ( pChild = rCnx.loadLayout() ) )
+			addChild( pChild );
+	}
+}
+void Layout::requestSize( Size &rSize )
+{
+	if( m_pPeer )
+		m_pPeer->VtkRequestSize( rSize );
+	else
+		rSize = Size();
+}
+void Layout::allocateSize( const Point &rPoint,
+			   const Size  &rSize )
+{
+	if( m_pPeer )
+		m_pPeer->SetPosSizePixel( rPoint, rSize );
+}
+
+// --- LayoutBin ---
+
+LayoutBin::LayoutBin() : Layout()
+{
+}
+LayoutBin::~LayoutBin()
+{
+	if (m_pChild)
+		delete m_pChild;
+}
+void LayoutBin::requestSize( Size &rSize )
+{
+	if( m_pChild )
+		m_pChild->requestSize( rSize );
+	else
+		rSize = Size();
+}
+void LayoutBin::allocateSize( const Point &rPoint, const Size &rSize )
+{
+	if( m_pChild )
+		m_pChild->allocateSize( rPoint, rSize );
+}
+
+// --- LayoutBox ---
+
+LayoutBox::LayoutBox() : Layout()
+{
+}
+LayoutBox::~LayoutBox()
+{
+	std::list<BoxChild>::const_iterator aIter;
+	for (aIter = m_aChildren.begin(); aIter != m_aChildren.end(); aIter++)
+		delete aIter->pLayout;
+}
+void LayoutBox::addChild( Layout *pLayout ) 
+{
+	BoxChild aChild;
+
+	// this sucks ...
+	aChild.pLayout = pLayout;
+	aChild.nPadding = aChild.pLayout->m_nPadding;
+	aChild.bExpand = aChild.pLayout->m_bExpand;
+	aChild.bFill = aChild.pLayout->m_bFill;
+	aChild.bPackStart = aChild.pLayout->m_bPackStart;
+
+	m_aChildren.push_back( aChild );
+}
+
+// --- LayoutHBox ---
+
+LayoutHBox::LayoutHBox() : LayoutBox( )
+{
+}
+void LayoutHBox::requestSize( Size &rSize )
+{
+	int nVisibleChildren = 0;
+
+	rSize.Width() = 0;
+	rSize.Height() = 0;
+	
+	std::list<BoxChild>::const_iterator aIter;
+	for (aIter = m_aChildren.begin(); aIter != m_aChildren.end(); aIter++) {
+		if( !aIter->pLayout->visible() )
+			continue;
+
+		Size aChildSize;
+		
+		aIter->pLayout->requestSize( aChildSize );
+
+		int nThisWidth = aChildSize.Width() + aIter->nPadding * 2;
+
+		if( m_bHomogeneous )
+			rSize.Width() = SAL_MAX( rSize.Width(), nThisWidth );
+		else
+			rSize.Width() = nThisWidth;
+
+		rSize.Height() = SAL_MAX( rSize.Height(), aChildSize.Height() );
+
+		nVisibleChildren++;
+	}
+
+	if (nVisibleChildren) {
+		if( m_bHomogeneous )
+			rSize.Width() *= nVisibleChildren;
+		rSize.Width() += (nVisibleChildren - 1) * m_nSpacing;
+	}
+
+	rSize.Width() += m_nBorderWidth * 2;
+	rSize.Height() += m_nBorderWidth * 2;
+
+	m_aRequisition = rSize;
+}
+#define FIXED_PT 16
+void LayoutHBox::allocateSize( const Point &rPoint, const Size &rSize )
+{
+	int nVisibleChildren = 0;
+	int nExpandChildren = 0;
+	int fExtraSpace;
+	Point fEndPos;
+	Point fStartPos;
+	Size  aChildSize;
+
+	LayoutBox::allocateSize( rPoint, rSize );
+	
+	std::list<BoxChild>::const_iterator aIter;
+	for (aIter = m_aChildren.begin(); aIter != m_aChildren.end(); aIter++) {
+		if( aIter->pLayout->visible() )
+			nVisibleChildren++;
+		if( aIter->bExpand )
+			nExpandChildren++;
+	}
+
+	if( !nVisibleChildren )
+		return;
+
+	if( m_bHomogeneous )
+		fExtraSpace = ( ( rSize.Width() - m_nBorderWidth * 2 -
+				  ( nVisibleChildren - 1 ) * m_nSpacing ) * FIXED_PT ) / nVisibleChildren;
+
+	else if( nExpandChildren )
+		fExtraSpace = ( rSize.Width() - m_aRequisition.Width() ) * FIXED_PT;
+
+	else
+		fExtraSpace = 0;
+
+	fStartPos = rPoint;
+	fStartPos.Move( m_nBorderWidth, m_nBorderWidth );
+	fStartPos.X() *= FIXED_PT;
+	fEndPos = rPoint;
+	fEndPos.Move(rSize.Width(), 0);
+	fEndPos.Move( -m_nBorderWidth, m_nBorderWidth );
+	fEndPos.X() *= FIXED_PT;
+	aChildSize.Height() = SAL_MAX( 1, rSize.Height() - m_nBorderWidth * 2 );
+
+	for (aIter = m_aChildren.begin(); aIter != m_aChildren.end(); aIter++) {
+		if( !aIter->pLayout->visible() )
+			continue;
+
+		Point aChildPos;
+		int   fBoxWidth; // of the available box space
+
+		if( m_bHomogeneous )
+			fBoxWidth = fExtraSpace;
+		else {
+			fBoxWidth = ( aIter->pLayout->getRequisition().Width() + aIter->nPadding * 2 ) * FIXED_PT;
+
+			if( aIter->bExpand )
+				fBoxWidth += fExtraSpace;
+		}
+
+		int nSlackSpace;
+		if( aIter->bFill ) {
+			aChildSize.Width() = SAL_MAX( 1, fBoxWidth / FIXED_PT - aIter->nPadding * 2 );
+			nSlackSpace = aIter->nPadding;
+		} else {
+			aChildSize.Width() = aIter->pLayout->getRequisition().Width();
+			nSlackSpace = (fBoxWidth / FIXED_PT - aChildSize.Width()) / 2;
+		}
+
+		Point aPlace;
+		if( aIter->bPackStart ) {
+
+			aPlace = fStartPos;
+			aPlace.X() /= FIXED_PT;
+			aPlace.Move( nSlackSpace, 0 );
+			
+			fStartPos.Move( fBoxWidth + m_nSpacing * FIXED_PT, 0 );
+		} else {
+
+			fEndPos.Move( -fBoxWidth - m_nSpacing * FIXED_PT, 0 );
+
+			aPlace = fEndPos;
+			aPlace.X() /= FIXED_PT;
+			aPlace.Move( nSlackSpace, 0 );
+		}
+
+		aIter->pLayout->allocateSize( aPlace, aChildSize );
+	}
+}
+
+
