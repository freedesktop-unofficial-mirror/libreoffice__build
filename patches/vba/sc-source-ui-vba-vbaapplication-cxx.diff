--- /dev/null	2004-07-26 17:21:14.000000000 +0530
+++ sc/source/ui/vba/vbaapplication.cxx	2005-08-17 11:11:28.533217112 +0530
@@ -0,0 +1,93 @@
+#include <sfx2/objsh.hxx>
+
+#include<com/sun/star/sheet/XSpreadsheetView.hpp>
+#include<com/sun/star/view/XSelectionSupplier.hpp>
+
+#include "vbaapplication.hxx"
+#include "vbaworkbooks.hxx"
+#include "vbaworkbook.hxx"
+#include "vbaworksheets.hxx"
+#include "vbarange.hxx"
+
+#include "tabvwsh.hxx"
+
+using namespace ::org::openoffice;
+using namespace ::com::sun::star;
+
+ScVbaApplication::ScVbaApplication( uno::Reference<uno::XComponentContext >& xContext ): m_xContext( xContext )
+{
+	uno::Reference< lang::XMultiComponentFactory > xSMgr( m_xContext->getServiceManager(), uno::UNO_QUERY );
+	if ( !xSMgr.is() )
+	{
+		throw uno::RuntimeException(
+                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ": Couldn't instantiate MultiComponent factory" ) ),
+                    uno::Reference< XInterface >() );
+
+	}
+	m_xDesktop.set( 
+		xSMgr->createInstanceWithContext( rtl::OUString::createFromAscii(
+			"com.sun.star.frame.Desktop"), xContext ) , uno::UNO_QUERY );
+
+	if ( !m_xDesktop.is() )
+	{
+		throw uno::RuntimeException(
+                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ": Couldn't create Desktop component" ) ),
+                    uno::Reference< XInterface >() );
+	}
+}
+
+ScVbaApplication::~ScVbaApplication()
+{
+}
+
+
+uno::Reference< vba::XWorkbook >
+ScVbaApplication::getActiveWorkbook() throw (uno::RuntimeException)
+{
+	uno::Reference< frame::XModel > xModel( m_xDesktop->getCurrentComponent(), uno::UNO_QUERY );
+
+	if( xModel.is() )
+	{
+		uno::Reference< vba::XWorkbook > xWrkBk( new ScVbaWorkbook( m_xContext,
+			xModel )); 
+		return xWrkBk; 
+	}
+	else
+		return uno::Reference< vba::XWorkbook >( NULL );
+}
+
+uno::Reference< vba::XRange >
+ScVbaApplication::getSelection() throw (uno::RuntimeException)
+{
+	uno::Reference< frame::XModel > xModel( m_xDesktop->getCurrentComponent(), uno::UNO_QUERY );
+	uno::Reference< table::XCellRange > xRange( xModel->getCurrentSelection(), ::uno::UNO_QUERY);
+	return uno::Reference< vba::XRange >( new ScVbaRange( m_xContext, xRange ) );
+}
+
+uno::Reference< vba::XRange >
+ScVbaApplication::getActiveCell() throw (uno::RuntimeException )
+{
+	uno::Reference< frame::XModel > xModel( m_xDesktop->getCurrentComponent(), uno::UNO_QUERY_THROW );
+	uno::Reference< sheet::XSpreadsheetView > xView( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+	uno::Reference< table::XCellRange > xRange( xView->getActiveSheet(), ::uno::UNO_QUERY_THROW);
+                                                                                                                             
+	ScTabViewShell* pViewShell = ScTabViewShell::GetActiveViewShell();
+	sal_Int32 nCursorX, nCursorY;
+	nCursorX = sal_Int32(pViewShell->GetViewData()->GetCurX()), nCursorY = sal_Int32(pViewShell->GetViewData()->GetCurY());
+	return uno::Reference< vba::XRange >( new ScVbaRange( m_xContext, xRange->getCellRangeByPosition( nCursorX, nCursorY, 
+										nCursorX, nCursorY ) ) ); 
+}
+
+uno::Any SAL_CALL
+ScVbaApplication::Workbooks( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+	uno::Reference< vba::XWorkbooks > xWorkBooks( new ScVbaWorkbooks( m_xContext ) );
+	if (  aIndex.getValueTypeClass() == uno::TypeClass_VOID )
+	{
+		// void then somebody did Workbooks.something in vba
+	    return uno::Any( xWorkBooks );
+	}
+
+	return uno::Any ( xWorkBooks->Item( aIndex ) );
+}
+
