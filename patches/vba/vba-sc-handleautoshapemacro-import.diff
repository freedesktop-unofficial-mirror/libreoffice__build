Index: sc/inc/userdat.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/userdat.hxx,v
retrieving revision 1.5
diff -u -p -r1.5 userdat.hxx
--- sc/inc/userdat.hxx	8 Sep 2005 18:02:42 -0000	1.5
+++ sc/inc/userdat.hxx	6 Dec 2005 17:32:23 -0000
@@ -79,6 +79,7 @@ class ScDrawObjData : public SdrObjUserD
 //BFS01	virtual void WriteData(SvStream& rOut);
 //BFS01	virtual void ReadData(SvStream& rIn);
 public:
+	rtl::OUString sMacro;
 	ScAddress aStt, aEnd;
 	BOOL bValidStart, bValidEnd;
 	ScDrawObjData();
Index: sc/source/ui/drawfunc/fusel.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/drawfunc/fusel.cxx,v
retrieving revision 1.11
diff -u -p -r1.11 fusel.cxx
--- sc/source/ui/drawfunc/fusel.cxx	8 Sep 2005 20:58:07 -0000	1.11
+++ sc/source/ui/drawfunc/fusel.cxx	6 Dec 2005 17:32:52 -0000
@@ -70,6 +70,7 @@
 #include "drawpage.hxx"
 #include "globstr.hrc"
 #include "drwlayer.hxx"
+#include "userdat.hxx"
 
 // -----------------------------------------------------------------------
 
@@ -125,7 +126,7 @@ BOOL __EXPORT FuSelection::MouseButtonDo
 {
 	// #95491# remember button state for creation of own MouseEvents
 	SetMouseButtonCode(rMEvt.GetButtons());
-
+	const bool bSelectionOnly = rMEvt.IsRight();
 	if ( pView->IsAction() )
 	{
 		if ( rMEvt.IsRight() )
@@ -189,6 +190,33 @@ BOOL __EXPORT FuSelection::MouseButtonDo
 			}
 			else
 			{
+
+				if ( !bAlt && pView->PickObj(aMDPos, pObj, pPV, SDRSEARCH_ALSOONMASTER))
+				{
+					if ( ! bSelectionOnly)
+					{
+						ScDrawObjData* pInfo = ScDrawLayer::GetObjData( pObj );
+						if ( pInfo && pInfo->sMacro.getLength() )
+						{
+							SfxObjectShell* pObjSh = SfxObjectShell::Current();
+							if ( pObjSh && SfxApplication::IsXScriptURL( pInfo->sMacro ) )
+							{
+								uno::Any aRet;
+								uno::Sequence< sal_Int16 > aOutArgsIndex;
+								uno::Sequence< uno::Any > aOutArgs;
+								uno::Sequence< uno::Any >* pInArgs =
+									new uno::Sequence< uno::Any >(0);
+ 								pObjSh->CallXScript( pInfo->sMacro,
+									*pInArgs, aRet, aOutArgsIndex, aOutArgs);
+								pViewShell->FakeButtonUp( pViewShell->GetViewData()->GetActivePart() );
+								return TRUE;		// kein CaptureMouse etc.
+	 
+							}
+						} 	
+					}
+				}
+
+
 				//	URL / ImageMap
 
 				SdrViewEvent aVEvt;
@@ -217,7 +245,6 @@ BOOL __EXPORT FuSelection::MouseButtonDo
 						return TRUE;		// kein CaptureMouse etc.
 					}
 				}
-
 				//	Is another object being edited in this view?
 				//	(Editing is ended in MarkListHasChanged - test before UnmarkAll)
 				SfxInPlaceClient* pClient = pViewShell->GetIPClient();
Index: sc/source/ui/drawfunc/fudraw.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/drawfunc/fudraw.cxx,v
retrieving revision 1.16
diff -u -p -r1.16 fudraw.cxx
--- sc/source/ui/drawfunc/fudraw.cxx	28 Sep 2005 12:10:36 -0000	1.16
+++ sc/source/ui/drawfunc/fudraw.cxx	6 Dec 2005 17:33:02 -0000
@@ -866,6 +866,9 @@ void FuDraw::ForcePointer(const MouseEve
 		SdrObject* pObj;
 		SdrPageView* pPV;
 
+		ScDrawObjData* pInfo = NULL;
+		if ( pView->PickObj(aPnt, pObj, pPV, SDRSEARCH_ALSOONMASTER) )
+			pInfo = ScDrawLayer::GetObjData( pObj );
 		if ( pView->IsTextEdit() )
 		{
 			pViewShell->SetActivePointer(Pointer(POINTER_TEXT));		// kann nicht sein ?
@@ -891,6 +894,10 @@ void FuDraw::ForcePointer(const MouseEve
 			SdrObjMacroHitRec aHitRec;	//! muss da noch irgendwas gesetzt werden ????
 			pViewShell->SetActivePointer( pObj->GetMacroPointer(aHitRec) );
 		}
+		else  if ( !bAlt && pInfo && pInfo->sMacro.getLength() )
+		{
+			pWindow->SetPointer( Pointer( POINTER_REFHAND ) );
+		}	
 		else if ( IsDetectiveHit( aPnt ) )
 			pViewShell->SetActivePointer( Pointer( POINTER_DETECTIVE ) );
 		else
Index: sc/source/filter/inc/xiescher.hxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/inc/xiescher.hxx,v
retrieving revision 1.19
diff -u -p -r1.19 xiescher.hxx
--- sc/source/filter/inc/xiescher.hxx	28 Sep 2005 12:00:09 -0000	1.19
+++ sc/source/filter/inc/xiescher.hxx	6 Dec 2005 17:33:26 -0000
@@ -148,6 +148,7 @@ public:
     sal_uInt32          GetProgressSize() const;
     /** Additional processing for the passed SdrObject (calls virtual DoProcessSdrObj() function). */
     void                ProcessSdrObject( SdrObject& rSdrObj ) const;
+    String              maMacroName;    /// Name of an attached macro.
 
 protected:
     /** Derived classes may return a progress bar size different from 1. */
@@ -158,6 +159,9 @@ protected:
     /** Creates an Escher anchor from the passed position (used for sheet charts). */
     void                CreateEscherAnchor( const Rectangle& rAnchorRect );
 
+    /** Reads the contents of the ftMacro sub structure in an OBJ record. */
+    void                ReadMacro( XclImpStream& rStrm );
+
 private:
     typedef ScfRef< XclEscherAnchor > XclEscherAnchorRef;
 
@@ -278,12 +282,10 @@ private:
     void                ReadSbs( XclImpStream& rStrm );
     /** Reads the contents of the ftGboData sub structure in an OBJ record. */
     void                ReadGboData( XclImpStream& rStrm );
-    /** Reads the contents of the ftMacro sub structure in an OBJ record. */
-    void                ReadMacro( XclImpStream& rStrm );
+
 
 private:
     ScfInt16Vec         maMultiSel;     /// Indexes of all selected entries in a multi selection.
-    String              maMacroName;    /// Name of an attached macro.
     sal_uInt16          mnState;        /// Checked/unchecked state.
     sal_Int16           mnSelEntry;     /// Index of selected entry (1-based).
     sal_Int16           mnSelType;      /// Selection type.
Index: sc/source/filter/excel/xiescher.cxx
===================================================================
RCS file: /cvs/sc/sc/source/filter/excel/xiescher.cxx,v
retrieving revision 1.38
diff -u -p -r1.38 xiescher.cxx
--- sc/source/filter/excel/xiescher.cxx	28 Sep 2005 11:48:05 -0000	1.38
+++ sc/source/filter/excel/xiescher.cxx	6 Dec 2005 17:33:39 -0000
@@ -189,6 +189,7 @@
 #endif
 
 #include "excform.hxx"
+#include<userdat.hxx>
 
 using ::rtl::OUString;
 using ::rtl::OUStringBuffer;
@@ -413,6 +414,15 @@ XclImpDrawObjRef XclImpDrawObjBase::Read
 
 void XclImpDrawObjBase::ReadSubRecord( XclImpStream& rStrm, sal_uInt16 nSubRecId, sal_uInt16 nSubRecSize )
 {
+    switch( nSubRecId )
+    {
+        case EXC_ID_OBJ_FTMACRO:
+            ReadMacro( rStrm );
+        break;
+        default:
+		;// perhaps an assert here
+    }
+
 }
 
 Rectangle XclImpDrawObjBase::ReadClientAnchor( SvStream& rEscherStrm, const DffRecordHeader& rHeader )
@@ -494,6 +504,38 @@ void XclImpDrawObjBase::DoProcessSdrObj(
     if( !IsPrintable() )
         GetTracer().TraceObjectNotPrintable();
 }
+void XclImpDrawObjBase::ReadMacro( XclImpStream& rStrm )
+{
+    maMacroName.Erase();
+    if( rStrm.GetRecLeft() > 6 )
+    {
+        // macro is stored in a tNameXR token containing a link to a defined name
+        sal_uInt16 nFmlaSize;
+        rStrm >> nFmlaSize;
+        rStrm.Ignore( 4 );
+        DBG_ASSERT( nFmlaSize == 7, "XclImpDrawObjBase::ReadMacro - unexpected formula size" );
+        if( nFmlaSize == 7 )
+        {
+            sal_uInt8 nTokenId;
+            sal_uInt16 nExtSheet, nExtName;
+            rStrm >> nTokenId >> nExtSheet >> nExtName;
+            DBG_ASSERT( nTokenId == XclTokenArrayHelper::GetTokenId( EXC_TOKID_NAMEX, EXC_TOKCLASS_REF ),
+                "XclImpDrawObjBase::ReadMacro - tNameXR token expected" );
+            if( nTokenId == XclTokenArrayHelper::GetTokenId( EXC_TOKID_NAMEX, EXC_TOKCLASS_REF ) )
+            {
+                maMacroName = GetLinkManager().GetMacroName( nExtSheet, nExtName );
+                // #i38718# missing module name - try to find the macro in the imported modules
+                if( maMacroName.Len() && (maMacroName.Search( '.' ) == STRING_NOTFOUND) )
+                    if( SfxObjectShell* pDocShell = GetDocShell() )
+                        if( StarBASIC* pBasic = pDocShell->GetBasic() )
+                            if( SbMethod* pMethod = dynamic_cast< SbMethod* >( pBasic->Find( maMacroName, SbxCLASS_METHOD ) ) )
+                                if( SbModule* pModule = pMethod->GetModule() )
+                                    maMacroName.Insert( '.', 0 ).Insert( pModule->GetName(), 0 );
+            }
+        }
+    }
+}
+
 
 // ----------------------------------------------------------------------------
 
@@ -654,9 +696,7 @@ void XclImpTbxControlObj::ReadSubRecord(
         case EXC_ID_OBJ_FTGBODATA:
             ReadGboData( rStrm );
         break;
-        case EXC_ID_OBJ_FTMACRO:
-            ReadMacro( rStrm );
-        break;
+//        break;
         default:
             XclImpDrawObjBase::ReadSubRecord( rStrm, nSubRecId, nSubRecSize );
     }
@@ -924,38 +964,6 @@ void XclImpTbxControlObj::ReadGboData( X
     mbFlatBorder = ::get_flag( nStyle, EXC_OBJ_GBO_FLAT );
 }
 
-void XclImpTbxControlObj::ReadMacro( XclImpStream& rStrm )
-{
-    maMacroName.Erase();
-    if( rStrm.GetRecLeft() > 6 )
-    {
-        // macro is stored in a tNameXR token containing a link to a defined name
-        sal_uInt16 nFmlaSize;
-        rStrm >> nFmlaSize;
-        rStrm.Ignore( 4 );
-        DBG_ASSERT( nFmlaSize == 7, "XclImpTbxControlObj::ReadMacro - unexpected formula size" );
-        if( nFmlaSize == 7 )
-        {
-            sal_uInt8 nTokenId;
-            sal_uInt16 nExtSheet, nExtName;
-            rStrm >> nTokenId >> nExtSheet >> nExtName;
-            DBG_ASSERT( nTokenId == XclTokenArrayHelper::GetTokenId( EXC_TOKID_NAMEX, EXC_TOKCLASS_REF ),
-                "XclImpTbxControlObj::ReadMacro - tNameXR token expected" );
-            if( nTokenId == XclTokenArrayHelper::GetTokenId( EXC_TOKID_NAMEX, EXC_TOKCLASS_REF ) )
-            {
-                maMacroName = GetLinkManager().GetMacroName( nExtSheet, nExtName );
-                // #i38718# missing module name - try to find the macro in the imported modules
-                if( maMacroName.Len() && (maMacroName.Search( '.' ) == STRING_NOTFOUND) )
-                    if( SfxObjectShell* pDocShell = GetDocShell() )
-                        if( StarBASIC* pBasic = pDocShell->GetBasic() )
-                            if( SbMethod* pMethod = dynamic_cast< SbMethod* >( pBasic->Find( maMacroName, SbxCLASS_METHOD ) ) )
-                                if( SbModule* pModule = pMethod->GetModule() )
-                                    maMacroName.Insert( '.', 0 ).Insert( pModule->GetName(), 0 );
-            }
-        }
-    }
-}
-
 // ----------------------------------------------------------------------------
 
 XclImpOleObj::XclImpOleObj( const XclImpRoot& rRoot ) :
@@ -1386,7 +1394,9 @@ SdrObject* XclImpDffManager::ProcessObj(
 
     /*  Connect textbox data (string, alignment, text orientation) to object.
         #98132# don't ask for a text-ID, Escher export doesn't set one. */
-    if( XclImpDrawingObj* pDrawingObj = dynamic_cast< XclImpDrawingObj* >( xDrawObj.get() ) )
+    //if( XclImpDrawingObj* pDrawingObj = dynamic_cast< XclImpDrawingObj* >( xDrawObj.get() ) )
+    XclImpDrawingObj* pDrawingObj = dynamic_cast< XclImpDrawingObj* >( xDrawObj.get() );
+    if( pDrawingObj )
         pDrawingObj->SetTxoData( mrObjManager.FindTxoData( rObjData.rSpHd ) );
 
     // #118052# import internal name of a control
@@ -1396,6 +1406,17 @@ SdrObject* XclImpDffManager::ProcessObj(
         if( aName.Len() )
             pOleObj->SetControlName( aName );
     }
+    else
+    {
+        // its a drawing object or form control
+	if ( pDrawingObj && xSdrObj.get() )
+        {
+             ScDrawObjData* pInfo = ScDrawLayer::GetObjData( xSdrObj.get(), TRUE );
+             if ( pInfo && pDrawingObj->maMacroName.Len() )
+                 pInfo->sMacro = XclTbxControlHelper::GetScMacroName(pDrawingObj->maMacroName);
+
+        }
+    }
 
     // try to create a custom SdrObject that overwrites the passed object
     SdrObjectPtr xNewSdrObj( CreateCustomSdrObject( *xDrawObj, rAnchorRect ) );
