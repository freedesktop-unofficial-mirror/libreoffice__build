--- basic/source/runtime/methods.cxx.orig	2008-01-23 17:25:09.000000000 +0800
+++ basic/source/runtime/methods.cxx	2008-01-23 17:50:48.000000000 +0800
@@ -1826,19 +1826,94 @@ INT16 implGetDateYear( double aDate )
     return nRet;
 }
 
+static USHORT aDaysInMonth[12] = { 31, 28, 31, 30, 31, 30,
+								   31, 31, 30, 31, 30, 31 };
+
+
+BOOL ImpIsLeapYear( USHORT nYear )
+{
+	return (((nYear % 4) == 0) && ((nYear % 100) != 0) || ((nYear % 400) == 0));
+}
+
+USHORT ImpDaysInMonth( USHORT nMonth, USHORT nYear )
+{
+	if ( nMonth != 2 )
+		return aDaysInMonth[nMonth-1];
+	else
+	{
+		if ( ((nYear % 4) == 0) && ((nYear % 100) != 0) ||
+			 ((nYear % 400) == 0) )
+			return aDaysInMonth[nMonth-1] + 1;
+		else
+			return aDaysInMonth[nMonth-1];
+	}
+}
+
 BOOL implDateSerial( INT16 nYear, INT16 nMonth, INT16 nDay, double& rdRet )
 {
 	if ( nYear < 100 )
 		nYear += 1900;
-	if ((nYear < 100 || nYear > 9999)   ||
-		(nMonth < 1 || nMonth > 12 )	||
-		(nDay < 1 || nDay > 31 ))
+	if (nYear < 100 || nYear > 9999)
 	{
 		StarBASIC::Error( SbERR_BAD_ARGUMENT );
 		return FALSE;
 	}
 
-	Date aCurDate( nDay, nMonth, nYear );
+	// The value of nDay outside the range (1-31) are accepted in Visual Basic;
+	// Also the value of nMonth outside the range(1-12) are accepted.
+
+	// If Day is 0, the result is the last day of the previous month.
+	// If Day is -1, the result is the penultimate day of the previous month.
+
+	Date aCurDate( 0, 1, nYear );
+
+	long nDays = nDay;
+
+	// If Month is 0, the result is December of the previous year.
+	// If Month is -1, the result is November of the previous year.
+	// If Month is 13, the result is January of the following year.
+	if( nMonth > 0 )
+	{
+		USHORT nTemp = (nMonth-1)/12;
+		for( USHORT i=0; i < nTemp; i++ )
+		{
+			nDays += 365;
+			if( ImpIsLeapYear(nYear+i))
+				nDays++;
+		}
+
+		nMonth -= nTemp*12;
+		nYear += nTemp;
+		for( USHORT j=1; j< nMonth; j++ )
+		{
+			nDays += ImpDaysInMonth(j,nYear);
+		}
+	}
+
+	if( nMonth <= 0 )
+	{
+		nYear--;
+		nMonth *= -1;
+		nMonth++;
+		USHORT nTemp = nMonth/12;
+
+		for( USHORT i=0; i < nTemp; i++ )
+		{
+			nDays -= 365;
+			if( ImpIsLeapYear(nYear-i))
+				nDays--;
+		}
+
+		nMonth -= nTemp * 12;
+		nYear -= nTemp;
+		for( USHORT j=12; j > 12-nMonth; j--)
+		{
+			nDays -= ImpDaysInMonth(j, nYear);
+		}
+	}
+	
+	aCurDate += nDays;
+
 	long nDiffDays = GetDayDiff( aCurDate );
     rdRet = (double)nDiffDays;
     return TRUE;
