--- /data4/sles/CWS/npower6/src680-m201/sc/source/ui/vba/vbarange.cxx	2007-03-01 15:21:04.000000000 +0000
+++ sc/source/ui/vba/vbarange.cxx	2007-03-01 15:51:22.000000000 +0000
@@ -192,15 +192,12 @@ uno::Any lcl_makeRange( uno::Reference< 
 SfxItemSet*  ScVbaRange::getCurrentDataSet( ) throw ( uno::RuntimeException )
 {
 	uno::Reference< uno::XInterface > xIf( mxRange, uno::UNO_QUERY_THROW );
-	//ScCellRangeObj* pUnoCellRange = dynamic_cast< ScCellRangeObj* >( xIf.get() );
-	// FOR_UPSTREAM_BUILD
-	/*SfxItemSet* pDataSet = 	pUnoCellRange->GetCurrentDataSet( true );
+	ScCellRangeObj* pUnoCellRange = dynamic_cast< ScCellRangeObj* >( xIf.get() );
+	SfxItemSet* pDataSet = 	pUnoCellRange->GetCurrentDataSet( true );
 	
 	if ( !pDataSet )
 		throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Can't access Itemset for range" ) ), uno::Reference< uno::XInterface >() );
 	return pDataSet;	
-	*/
-	return NULL;
 }
 
 class SingleRangeEnumeration : public EnumerationHelper_BASE
@@ -353,15 +350,13 @@ public:
 		ScCellRangeObj* pUnoCellRange = dynamic_cast<  ScCellRangeObj* >( xIf.get() );
 		if ( pUnoCellRange )
 		{
-			// FOR_UPSTREAM_BUILD
-			/*
+			
 			SfxItemSet* pDataSet = 	pUnoCellRange->GetCurrentDataSet( true );
 			SfxItemState eState = pDataSet->GetItemState( ATTR_VALUE_FORMAT, TRUE, NULL);
 			// one of the cells in the range is not like the other ;-)
 			// so return a zero length format to indicate that
 			if ( eState == SFX_ITEM_DONTCARE )
 				return rtl::OUString();
-			*/
 		}
 		
 	
@@ -2155,8 +2150,7 @@ getPasteFlags (sal_Int32 Paste)
 		nFlags = IDF_FORMULA;break;
         case excel::XlPasteType::xlPasteFormulasAndNumberFormats : 
         case excel::XlPasteType::xlPasteValues: 
-		// FOR_UPSTREAM_BUILD
-		//nFlags = ( IDF_VALUE | IDF_DATETIME | IDF_STRING | IDF_SPECIAL_BOOLEAN ); break;
+		nFlags = ( IDF_VALUE | IDF_DATETIME | IDF_STRING | IDF_SPECIAL_BOOLEAN ); break;
 		nFlags = ( IDF_VALUE | IDF_DATETIME | IDF_STRING ); break;
         case excel::XlPasteType::xlPasteValuesAndNumberFormats:
 		nFlags = IDF_VALUE | IDF_ATTRIB; break;
@@ -2536,11 +2530,10 @@ ScVbaRange::Sort( const uno::Any& Key1, 
 
 	RangeHelper thisRange( mxRange );
 	table::CellRangeAddress thisRangeAddress = thisRange.getCellRangeAddressable()->getRangeAddress();
-	//SCTAB nTab = thisRangeAddress.Sheet;
+	SCTAB nTab = thisRangeAddress.Sheet;
 
 	ScSortParam aSortParam;
-	// FOR_UPSTREAM_BUILD
-	//pDoc->GetSortParam( aSortParam, nTab );
+	pDoc->GetSortParam( aSortParam, nTab );
 
 	if ( DataOption1.hasValue() )
 		DataOption1 >>= nDataOption1;
@@ -2594,16 +2587,13 @@ ScVbaRange::Sort( const uno::Any& Key1, 
 	if ( nOrientation == excel::XlSortOrientation::xlSortRows )
 		bIsSortColumns = sal_True;
 
-	// FOR_UPSTREAM_BUILD
-	//sal_Int16 nHeader = aSortParam.nCompatHeader;
-	sal_Int16 nHeader = 0;
+	sal_Int16 nHeader = aSortParam.nCompatHeader;
 	sal_Bool bContainsHeader = sal_False;
 
 	if ( Header.hasValue() )
 	{
 		nHeader = ::comphelper::getINT16( Header );
-		// FOR_UPSTREAM_BUILD
-		//aSortParam.nCompatHeader = nHeader;
+		aSortParam.nCompatHeader = nHeader;
 	}			
 
 	if ( nHeader == excel::XlYesNoGuess::xlGuess )
@@ -2615,8 +2605,7 @@ ScVbaRange::Sort( const uno::Any& Key1, 
 		else
 			nHeader =  excel::XlYesNoGuess::xlNo; 
 		// save set param as default
-		// FOR_UPSTREAM_BUILD
-		//aSortParam.nCompatHeader = nHeader;
+		aSortParam.nCompatHeader = nHeader;
 	}
 
 	if ( nHeader == excel::XlYesNoGuess::xlYes )
@@ -2705,8 +2694,7 @@ ScVbaRange::Sort( const uno::Any& Key1, 
 	nIndex = 	findSortPropertyIndex( sortDescriptor, CONTS_HEADER );
 	sortDescriptor[ nIndex ].Value <<= bContainsHeader;
 
-	// FOR_UPSTREAM_BUILD
-	//pDoc->SetSortParam( aSortParam, nTab );
+	pDoc->SetSortParam( aSortParam, nTab );
 	xSort->sort( sortDescriptor );
 
 	// #FIXME #TODO
@@ -3768,7 +3756,7 @@ ScVbaRange::AutoFill(  const uno::Refere
 	FillCmd eCmd = FILL_AUTO;
 	FillDateCmd eDateCmd = FILL_DAY;	
 
-	//double fEndValue =  MAXDOUBLE;
+	double fEndValue =  MAXDOUBLE;
 
 	if ( Type.hasValue() )
 	{
@@ -3813,8 +3801,6 @@ ScVbaRange::AutoFill(  const uno::Refere
 		}	
 	}
 	ScDocFunc aFunc(*pDocSh);
-	// FOR_UPSTREAM_BUILD
-	/*aFunc.FillAuto( aSourceRange, NULL, eDir, eCmd, eDateCmd,
-								nCount, fStep, fEndValue, TRUE, TRUE );
-	*/
+		aFunc.FillAuto( aSourceRange, NULL, eDir, eCmd, eDateCmd,
+									nCount, fStep, fEndValue, TRUE, TRUE );
 }
