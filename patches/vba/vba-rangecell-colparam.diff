diff --git sc/source/ui/vba/vbarange.cxx sc/source/ui/vba/vbarange.cxx
index e67766e..aa7e0bc 100755
--- sc/source/ui/vba/vbarange.cxx
+++ sc/source/ui/vba/vbarange.cxx
@@ -2185,7 +2185,7 @@ ScVbaRange::Cells( const uno::Any &nRowIndex, const uno::Any &nColumnIndex ) thr
 		}
 		catch( uno::Exception& ) {}
 	}
-	if ( aRowIndexAny.hasValue() && !( aRowIndexAny >>= nRow ) )
+	else if ( aRowIndexAny.hasValue() && !( aRowIndexAny >>= nRow ) )
     {
         uno::Reference< script::XTypeConverter > xConverter = getTypeConverter( mxContext );
         uno::Any aConverted;
@@ -2196,27 +2196,45 @@ ScVbaRange::Cells( const uno::Any &nRowIndex, const uno::Any &nColumnIndex ) thr
         }
         catch( uno::Exception& ) {} // silence any errors
     }
+
 	uno::Any aColumnAny = nColumnIndex;
-	if ( aColumnAny.getValueTypeClass() == uno::TypeClass_INTERFACE )
-	{
-		try
-		{
-			aColumnAny = getDefaultPropByIntrospection( aColumnAny );
-		}
-		catch( uno::Exception& ) {}
-	}
-	if ( bIsColumnIndex && !( aColumnAny >>= nColumn ) )
+
+    if ( bIsColumnIndex )
     {
-        uno::Reference< script::XTypeConverter > xConverter = getTypeConverter( mxContext );
-        uno::Any aConverted;
-        try
+         // Column index can be a col address e.g Cells( 1, "B" ) etc.
+        rtl::OUString sCol;
+        if ( nColumnIndex >>= sCol )
         {
-			aConverted = xConverter->convertTo( aColumnAny, getCppuType((sal_Int32*)0) );
-            bIsColumnIndex = ( aConverted >>= nColumn );
+            ScAddress::Details dDetails( formula::FormulaGrammar::CONV_XL_A1, 0, 0 );
+            ScRange tmpRange;
+            USHORT flags = tmpRange.ParseCols( sCol, excel::GetDocumentFromRange( mxRange ), dDetails );
+            if ( ( flags & 0x200 ) != 0x200 )
+               throw uno::RuntimeException(); 
+            nColumn = tmpRange.aStart.Col() + 1;
         }
-        catch( uno::Exception& ) {} // silence any errors
+	    else 
+	    { 
+            if ( aColumnAny.getValueTypeClass() == uno::TypeClass_INTERFACE )
+            {
+	    	    try
+        		{
+        			aColumnAny = getDefaultPropByIntrospection( aColumnAny );
+        		}
+        		catch( uno::Exception& ) {}
+        	}
+        	if ( !( aColumnAny >>= nColumn ) )
+            {
+                uno::Reference< script::XTypeConverter > xConverter = getTypeConverter( mxContext );
+                uno::Any aConverted;
+                try
+                {
+        			aConverted = xConverter->convertTo( aColumnAny, getCppuType((sal_Int32*)0) );
+                    bIsColumnIndex = ( aConverted >>= nColumn );
+                }
+                catch( uno::Exception& ) {} // silence any errors
+            }
+       }                                                                                                                       
     }
-                                                                                                                       
     RangeHelper thisRange( mxRange );
     table::CellRangeAddress thisRangeAddress =  thisRange.getCellRangeAddressable()->getRangeAddress();
     uno::Reference< table::XCellRange > xSheetRange = thisRange.getCellRangeFromSheet();
