--- /dev/null	2004-07-26 17:21:14.000000000 +0530
+++ sc/source/ui/vba/vbarange.hxx	2005-08-01 14:57:25.000000000 +0530
@@ -0,0 +1,76 @@
+#ifndef SC_VBA_RANGE_HXX
+#define SC_VBA_RANGE_HXX
+
+#include <cppuhelper/implbase1.hxx>
+
+#include <org/openoffice/vba/XRange.hpp>
+#include <com/sun/star/table/XCellRange.hpp>
+#include <org/openoffice/vba/XFont.hpp>
+#include "vbahelper.hxx"
+
+class ScTableSheetsObj;
+
+typedef ::cppu::WeakImplHelper1< org::openoffice::vba::XRange > ScVbaRange_BASE;
+
+class ScVbaRange : public ScVbaRange_BASE
+{
+	uno::Reference< table::XCellRange > mxRange;
+	uno::Reference< ::com::sun::star::uno::XComponentContext > m_xContext;
+
+public:
+	ScVbaRange( uno::Reference< ::com::sun::star::uno::XComponentContext >& xContext, uno::Reference< table::XCellRange > xRange ) : mxRange( xRange ),
+		m_xContext(xContext) {}
+	virtual ~ScVbaRange() {}
+
+    // Attributes
+	virtual uno::Any SAL_CALL getValue() throw (::com::sun::star::uno::RuntimeException);
+	virtual void   SAL_CALL setValue( const uno::Any& aValue ) throw ( uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL getFormula() throw (uno::RuntimeException);
+	virtual void   SAL_CALL setFormula( const ::rtl::OUString &rFormula ) throw (uno::RuntimeException);
+	virtual double SAL_CALL getCount() throw (uno::RuntimeException);
+	virtual long   SAL_CALL getRow() throw (uno::RuntimeException);
+	virtual long   SAL_CALL getColumn() throw (uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL getText() throw (uno::RuntimeException);
+	virtual void   SAL_CALL setText( const ::rtl::OUString &rString ) throw (uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL getFormulaArray() throw (uno::RuntimeException);
+	virtual void   SAL_CALL setFormulaArray(const ::rtl::OUString &rFormula) throw (uno::RuntimeException);
+	//virtual ::rtl::OUString SAL_CALL getNumberFormat() throw (uno::RuntimeException);
+	//virtual void   SAL_CALL setNumberFormat( const sal_Char* aFormat ) throw (uno::RuntimeException);
+	virtual void SAL_CALL setNumberFormat( const ::rtl::OUString &rNumberFormat ) throw (uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL getNumberFormat() throw (uno::RuntimeException);
+	virtual void SAL_CALL setMergeCells( sal_Bool bMerge ) throw (uno::RuntimeException);
+	virtual sal_Bool SAL_CALL getMergeCells() throw (uno::RuntimeException);
+	virtual void SAL_CALL setWrapText( sal_Bool bIsWrapped ) throw (uno::RuntimeException);
+	virtual sal_Bool SAL_CALL getWrapText() throw (uno::RuntimeException);
+
+	// Methods
+	virtual void SAL_CALL Clear() throw (uno::RuntimeException);
+	virtual void SAL_CALL ClearComments() throw (uno::RuntimeException);
+	virtual void SAL_CALL ClearContents() throw (uno::RuntimeException);
+	virtual void SAL_CALL ClearFormats() throw (uno::RuntimeException);
+	virtual sal_Bool SAL_CALL HasFormula() throw (uno::RuntimeException);
+	virtual void SAL_CALL FillLeft() throw (uno::RuntimeException);
+	virtual void SAL_CALL FillRight() throw (uno::RuntimeException);
+	virtual void SAL_CALL FillUp() throw (uno::RuntimeException);
+	virtual void SAL_CALL FillDown() throw (uno::RuntimeException);
+	virtual	uno::Reference< vba::XRange > SAL_CALL Offset( const ::uno::Any &nRowOffset, const ::uno::Any &nColOffset )
+														   throw (uno::RuntimeException);
+	virtual uno::Reference< vba::XRange > SAL_CALL CurrentRegion() throw (uno::RuntimeException);
+	virtual uno::Reference< vba::XRange > SAL_CALL CurrentArray() throw (uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL Characters( const ::uno::Any& nIndex, const ::uno::Any& nCount ) 
+												 throw (uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL Address() throw (uno::RuntimeException);
+	virtual uno::Reference< vba::XRange > SAL_CALL Cells( const ::uno::Any &nRow, const ::uno::Any &nCol ) 
+														  throw (uno::RuntimeException);
+	virtual void SAL_CALL Select() throw (uno::RuntimeException);
+	virtual uno::Reference< vba::XRows > SAL_CALL Rows() throw (uno::RuntimeException);
+	virtual uno::Reference< vba::XColumns > SAL_CALL Columns() throw (uno::RuntimeException);
+	virtual void SAL_CALL Copy( const ::uno::Any& Destination ) throw (uno::RuntimeException);
+	virtual void SAL_CALL Cut( const ::uno::Any& Destination ) throw (uno::RuntimeException);
+	virtual uno::Reference< vba::XRange > SAL_CALL Resize( const ::uno::Any& RowSize, const ::uno::Any& ColumnSize ) 
+														   throw (uno::RuntimeException);
+
+};
+
+#endif /* SC_VBA_RANGE_HXX */
+
