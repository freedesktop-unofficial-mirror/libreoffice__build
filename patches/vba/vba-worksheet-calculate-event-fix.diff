--- backup/sc/inc/document.hxx	2008-08-27 16:40:13.000000000 +0800
+++ sc/inc/document.hxx	2008-08-27 16:44:15.000000000 +0800
@@ -419,6 +419,9 @@ private:
 
     sal_Int16           mnNamedRangesLockCount;
 
+	// for worksheet calculate event
+	::std::vector< SCTAB > maTabs;
+
 	inline BOOL 		RowHidden( SCROW nRow, SCTAB nTab );		// FillInfo
 
 public:
@@ -879,6 +882,10 @@ SC_DLLPUBLIC	ScDBCollection*	GetDBCollec
 	BOOL			IsForcedFormulaPending() const { return bForcedFormulaPending; }
 					// if CalcFormulaTree() is currently running
 	BOOL			IsCalculatingFormulaTree() { return bCalculatingFormulaTree; }
+	
+					// for worksheet calculate event
+	BOOL			FireCalculateEvent( SCTAB nTab );
+	void			AddCalculateTable( SCTAB nTab );
 
 	void			GetErrCode( SCCOL nCol, SCROW nRow, SCTAB nTab, USHORT& rErrCode );
 	USHORT			GetErrCode( const ScAddress& ) const;
--- backup/sc/source/core/data/documen7.cxx	2008-08-27 16:40:23.000000000 +0800
+++ sc/source/core/data/documen7.cxx	2008-08-27 21:43:54.000000000 +0800
@@ -59,7 +59,15 @@
 
 
 #include "globstr.hrc"
+#include <algorithm>
+#include <vector>
 
+
+#include <com/sun/star/document/XVbaEventsHelper.hpp>
+#include <com/sun/star/document/VbaEventId.hpp>
+
+using namespace com::sun::star;
+using namespace com::sun::star::document::VbaEventId;
 extern const ScFormulaCell* pLastFormulaTreeTop;	// cellform.cxx Err527 WorkAround
 
 // STATIC DATA -----------------------------------------------------------
@@ -544,5 +525,35 @@ void ScDocument::SetAutoCalc( BOOL bNewA
 	}
 }
 
+BOOL ScDocument::FireCalculateEvent( SCTAB nTab )
+{
+	BOOL bSuccess = FALSE;
+	::std::vector<SCTAB>::iterator iter;
+	iter = ::std::find( maTabs.begin(), maTabs.end(), nTab );
+	if( iter != maTabs.end() )
+	{
+		// make sure fire worksheet calculate event only once for each sheet 
+		// regardless of how many formula cells are calculated.
+		maTabs.erase(iter);
 
+		uno::Reference< document::XVbaEventsHelper > xVbaEventsHelper ( GetVbaEventsHelper(), uno::UNO_QUERY );
+		if( xVbaEventsHelper.is() )
+		{
+			uno::Sequence< uno::Any > aArgs(1);
+			aArgs[0] <<= nTab;
+			bSuccess = xVbaEventsHelper->ProcessCompatibleVbaEvent( VBAEVENT_WORKSHEET_CALCULATE, aArgs );
+		}
+	}	
+	return bSuccess;
+}
+
+void ScDocument::AddCalculateTable( SCTAB nTab )
+{
+	::std::vector<SCTAB>::iterator iter;
+	iter = ::std::find( maTabs.begin(), maTabs.end(), nTab );
+	if( iter == maTabs.end() )
+	{
+		maTabs.push_back( nTab );
+	}
+}
 
--- backup/sc/inc/cell.hxx	2008-08-27 16:40:13.000000000 +0800
+++ sc/inc/cell.hxx	2008-08-27 21:29:02.000000000 +0800
@@ -356,7 +356,7 @@ public:
 								const ScGrammar::Grammar = ScGrammar::GRAM_DEFAULT ) const;
 
 	void			SetDirty();
-	inline void		SetDirtyVar() { bDirty = TRUE; }
+	void			SetDirtyVar();
     // If setting entire document dirty after load, no broadcasts but still append to FormulaTree.
     void            SetDirtyAfterLoad();
 	inline void		ResetTableOpDirtyVar() { bTableOpDirty = FALSE; }
--- backup/sc/source/core/data/cell.cxx	2008-08-27 16:40:25.000000000 +0800
+++ sc/source/core/data/cell.cxx	2008-08-28 10:12:15.000000000 +0800
@@ -1379,6 +1379,9 @@ void ScFormulaCell::Interpret()
             }
         } while (bIterationFromRecursion || bResumeIteration);
     }
+
+	// Fire worksheet calculate event
+	pDocument->FireCalculateEvent( aPos.Tab() );
 }
 
 void ScFormulaCell::InterpretTail( ScInterpretTailParameter eTailParam )
@@ -1663,7 +1666,7 @@ void __EXPORT ScFormulaCell::Notify( Svt
 			else
             {
                 bForceTrack = !bDirty;
-				bDirty = TRUE;
+				SetDirtyVar();
             }
             // #35962# Don't remove from FormulaTree to put in FormulaTrack to
             // put in FormulaTree again and again, only if necessary.
@@ -1686,7 +1689,7 @@ void ScFormulaCell::SetDirty()
 	if ( !IsInChangeTrack() )
 	{
 		if ( pDocument->GetHardRecalcState() )
-			bDirty = TRUE;
+			SetDirtyVar();
 		else
 		{
 			// Mehrfach-FormulaTracking in Load und in CompileAll
@@ -1695,7 +1698,7 @@ void ScFormulaCell::SetDirty()
 			// setzen, z.B. in CompileTokenArray
 			if ( !bDirty || !pDocument->IsInFormulaTree( this ) )
 			{
-				bDirty = TRUE;
+				SetDirtyVar();
 				pDocument->AppendToFormulaTrack( this );
 				pDocument->TrackFormulas();
 			}
@@ -1703,6 +1706,13 @@ void ScFormulaCell::SetDirty()
 	}
 }
 
+void ScFormulaCell::SetDirtyVar()
+{
+	bDirty = TRUE;
+	// mark the sheet of this cell to be calculated
+	pDocument->AddCalculateTable( aPos.Tab() );
+}
+
 void ScFormulaCell::SetDirtyAfterLoad()
 {
     bDirty = TRUE;
