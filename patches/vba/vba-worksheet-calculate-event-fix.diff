--- sc/inc/document.hxx.old	2009-04-06 16:42:00.000000000 +0000
+++ sc/inc/document.hxx	2009-04-06 16:42:00.000000000 +0000
@@ -423,6 +423,9 @@ private:
 
     sal_Int16           mnNamedRangesLockCount;
 
+    // for worksheet calculate event
+    ::std::vector< SCTAB > maTabs;
+
 public:
     SC_DLLPUBLIC ULONG			GetCellCount() const;		// alle Zellen
     ULONG			GetWeightedCount() const;	// Formeln und Edit staerker gewichtet
@@ -865,6 +868,10 @@ public:
 	BOOL			IsForcedFormulaPending() const { return bForcedFormulaPending; }
 					// if CalcFormulaTree() is currently running
 	BOOL			IsCalculatingFormulaTree() { return bCalculatingFormulaTree; }
+    
+                    // for worksheet calculate event
+    BOOL			FireCalculateEvent( SCTAB nTab );
+    void			AddCalculateTable( SCTAB nTab );
 
 	USHORT			GetErrCode( const ScAddress& ) const;
 
--- sc/source/core/data/documen7.cxx.old	2009-04-02 10:45:01.000000000 +0000
+++ sc/source/core/data/documen7.cxx	2009-04-06 16:42:00.000000000 +0000
@@ -59,7 +59,15 @@
 
 
 #include "globstr.hrc"
+#include <algorithm>
+#include <vector>
 
+
+#include <com/sun/star/document/XVbaEventsHelper.hpp>
+#include <com/sun/star/document/VbaEventId.hpp>
+
+using namespace com::sun::star;
+using namespace com::sun::star::document::VbaEventId;
 extern const ScFormulaCell* pLastFormulaTreeTop;	// cellform.cxx Err527 WorkAround
 
 // STATIC DATA -----------------------------------------------------------
@@ -520,5 +528,35 @@ void ScDocument::SetAutoCalc( BOOL bNewA
 	}
 }
 
+BOOL ScDocument::FireCalculateEvent( SCTAB nTab )
+{
+    BOOL bSuccess = FALSE;
+    ::std::vector<SCTAB>::iterator iter;
+    iter = ::std::find( maTabs.begin(), maTabs.end(), nTab );
+    if( iter != maTabs.end() )
+    {
+        // make sure fire worksheet calculate event only once for each sheet 
+        // regardless of how many formula cells are calculated.
+        maTabs.erase(iter);
+
+        uno::Reference< document::XVbaEventsHelper > xVbaEventsHelper ( GetVbaEventsHelper(), uno::UNO_QUERY );
+        if( xVbaEventsHelper.is() )
+        {
+            uno::Sequence< uno::Any > aArgs(1);
+            aArgs[0] <<= nTab;
+            bSuccess = xVbaEventsHelper->ProcessCompatibleVbaEvent( VBAEVENT_WORKSHEET_CALCULATE, aArgs );
+        }
+    }	
+    return bSuccess;
+}
 
+void ScDocument::AddCalculateTable( SCTAB nTab )
+{
+    ::std::vector<SCTAB>::iterator iter;
+    iter = ::std::find( maTabs.begin(), maTabs.end(), nTab );
+    if( iter == maTabs.end() )
+    {
+        maTabs.push_back( nTab );
+    }
+}
 
--- sc/inc/cell.hxx.old	2009-04-06 16:41:50.000000000 +0000
+++ sc/inc/cell.hxx	2009-04-06 16:42:00.000000000 +0000
@@ -418,7 +418,7 @@ public:
 								const formula::FormulaGrammar::Grammar = formula::FormulaGrammar::GRAM_DEFAULT ) const;
 
 	void			SetDirty();
-	inline void		SetDirtyVar() { bDirty = TRUE; }
+    void			SetDirtyVar();
     // If setting entire document dirty after load, no broadcasts but still append to FormulaTree.
     void            SetDirtyAfterLoad();
 	inline void		ResetTableOpDirtyVar() { bTableOpDirty = FALSE; }
--- sc/source/core/data/cell.cxx.old	2009-04-06 16:41:50.000000000 +0000
+++ sc/source/core/data/cell.cxx	2009-04-06 16:42:00.000000000 +0000
@@ -1486,6 +1486,9 @@ void ScFormulaCell::Interpret()
             }
         } while (bIterationFromRecursion || bResumeIteration);
     }
+
+    // Fire worksheet calculate event
+    pDocument->FireCalculateEvent( aPos.Tab() );
 }
 
 void ScFormulaCell::InterpretTail( ScInterpretTailParameter eTailParam )
@@ -1769,7 +1772,7 @@ void __EXPORT ScFormulaCell::Notify( Svt
 			else
             {
                 bForceTrack = !bDirty;
-				bDirty = TRUE;
+                SetDirtyVar();
             }
             // #35962# Don't remove from FormulaTree to put in FormulaTrack to
             // put in FormulaTree again and again, only if necessary.
@@ -1792,7 +1795,7 @@ void ScFormulaCell::SetDirty()
 	if ( !IsInChangeTrack() )
 	{
 		if ( pDocument->GetHardRecalcState() )
-			bDirty = TRUE;
+            SetDirtyVar();
 		else
 		{
 			// Mehrfach-FormulaTracking in Load und in CompileAll
@@ -1801,7 +1804,7 @@ void ScFormulaCell::SetDirty()
 			// setzen, z.B. in CompileTokenArray
 			if ( !bDirty || !pDocument->IsInFormulaTree( this ) )
 			{
-				bDirty = TRUE;
+                SetDirtyVar();
 				pDocument->AppendToFormulaTrack( this );
 				pDocument->TrackFormulas();
 			}
@@ -1809,6 +1812,13 @@ void ScFormulaCell::SetDirty()
 	}
 }
 
+void ScFormulaCell::SetDirtyVar()
+{
+    bDirty = TRUE;
+    // mark the sheet of this cell to be calculated
+    pDocument->AddCalculateTable( aPos.Tab() );
+}
+
 void ScFormulaCell::SetDirtyAfterLoad()
 {
     bDirty = TRUE;
