diff -urp /data4/sles/ooo-build-NEWEST-Latest/ooo-build/build/ooe680-m2/basic/source/runtime/runtime.cxx basic/source/runtime/runtime.cxx
--- /data4/sles/ooo-build-NEWEST-Latest/ooo-build/build/ooe680-m2/basic/source/runtime/runtime.cxx	2006-11-21 18:09:03.000000000 +0000
+++ basic/source/runtime/runtime.cxx	2006-11-27 14:41:30.000000000 +0000
@@ -64,6 +64,7 @@
 #include <com/sun/star/container/XEnumerationAccess.hpp>
 #endif
 #include "sbunoobj.hxx"
+#include "errobject.hxx"
 
 bool SbiRuntime::isVBAEnabled()
 {
@@ -799,7 +800,22 @@ BOOL SbiRuntime::Step()
 void SbiRuntime::Error( SbError n )
 {
 	if( n )
+	{
 		nError = n;
+		if ( isVBAEnabled() )
+		{
+			String aMsg = pInst->GetErrorMsg();
+			// If a message is defined use that ( in preference to
+			// the defined one for the error )
+			if ( !aMsg.Len() )
+			{
+				StarBASIC::MakeErrorText( n, aMsg );	
+				aMsg =  StarBASIC::GetErrorText();
+			}
+			SbxErrObject::getUnoErrObject()->setNumber( StarBASIC::GetVBErrorCode( n ) );
+			SbxErrObject::getUnoErrObject()->setDescription( aMsg );
+		}
+	}
 }
 
 void SbiRuntime::FatalError( SbError n )
diff -urp /data4/sles/ooo-build-NEWEST-Latest/ooo-build/build/ooe680-m2/basic/source/runtime/stdobj.cxx basic/source/runtime/stdobj.cxx
--- /data4/sles/ooo-build-NEWEST-Latest/ooo-build/build/ooe680-m2/basic/source/runtime/stdobj.cxx	2006-11-21 18:09:02.000000000 +0000
+++ basic/source/runtime/stdobj.cxx	2006-11-23 17:09:46.000000000 +0000
@@ -41,6 +41,7 @@
 #include "stdobj1.hxx"
 #include "rtlproto.hxx"
 #include "sbintern.hxx"
+#include "errobject.hxx"
 
 // Das nArgs-Feld eines Tabelleneintrags ist wie folgt verschluesselt:
 // Zur Zeit wird davon ausgegangen, dass Properties keine Parameter
@@ -644,6 +645,11 @@ SbiStdObject::~SbiStdObject()
 
 SbxVariable* SbiStdObject::Find( const String& rName, SbxClassType t )
 {
+	// #TODO #FIXME hack for substituting ooo-basic Err with vba-ish
+	// ErrObject object
+	static String sErr( RTL_CONSTASCII_USTRINGPARAM("Err") );
+	if (  rName.EqualsIgnoreCaseAscii( sErr ) ) 
+		return SbxErrObject::getErrObject();
 	// Bereits eingetragen?
 	SbxVariable* pVar = SbxObject::Find( rName, t );
 	if( !pVar )
diff -urp /data4/sles/ooo-build-NEWEST-Latest/ooo-build/build/ooe680-m2/basic/source/runtime/step0.cxx basic/source/runtime/step0.cxx
--- /data4/sles/ooo-build-NEWEST-Latest/ooo-build/build/ooe680-m2/basic/source/runtime/step0.cxx	2006-11-21 18:09:02.000000000 +0000
+++ basic/source/runtime/step0.cxx	2006-11-27 13:06:41.000000000 +0000
@@ -49,6 +49,7 @@
 #include <sb.hrc>
 #include <basrid.hxx>
 #include "sbunoobj.hxx"
+#include "errobject.hxx"
 #include <com/sun/star/uno/Any.hxx>
 
 #include <algorithm>
@@ -984,6 +985,7 @@ void SbiRuntime::StepNOERROR()
 	pInst->nErl = 0;
 	nError = 0L;
 	bError = FALSE;
+	SbxErrObject::getUnoErrObject()->Clear();
 }
 
 // UP verlassen
Only in basic/source/classes/: errobject.cxx
Only in basic/source/classes/: .errobject.cxx.swp
diff -urp /data4/sles/ooo-build-NEWEST-Latest/ooo-build/build/ooe680-m2/basic/source/classes/makefile.mk basic/source/classes/makefile.mk
--- /data4/sles/ooo-build-NEWEST-Latest/ooo-build/build/ooe680-m2/basic/source/classes/makefile.mk	2006-11-21 18:09:02.000000000 +0000
+++ basic/source/classes/makefile.mk	2006-11-22 19:50:56.000000000 +0000
@@ -59,7 +59,8 @@ COMMON_SLOFILES=	\
 	$(SLO)$/sbintern.obj	\
 	$(SLO)$/sbunoobj.obj	\
 	$(SLO)$/propacc.obj	\
-	$(SLO)$/disas.obj
+	$(SLO)$/disas.obj \
+	$(SLO)$/errobject.obj \
 
 SLOFILES=	$(COMMON_SLOFILES)	\
 	$(SLO)$/eventatt.obj
--- /dev/null	2006-06-16 14:07:58.000000000 +0100
+++ basic/source/inc/errobject.hxx	2006-11-27 10:34:35.000000000 +0000
@@ -0,0 +1,16 @@
+#ifndef ERROBJECT_HXX
+#define ERROBJECT_HXX
+#include "sbunoobj.hxx"
+#include <org/openoffice/vba/XErrObject.hpp>
+
+
+class SbxErrObject : public SbUnoObject
+{
+	com::sun::star::uno::Reference< org::openoffice::vba::XErrObject > m_xErr;
+	SbxErrObject( const String& aName_, const Any& aUnoObj_ );
+	~SbxErrObject();
+public:
+	static SbxVariableRef getErrObject();
+	static com::sun::star::uno::Reference< org::openoffice::vba::XErrObject > getUnoErrObject();
+};
+#endif 
--- /dev/null	2006-06-16 14:07:58.000000000 +0100
+++ basic/source/classes/errobject.cxx	2006-11-27 13:07:40.000000000 +0000
@@ -0,0 +1,178 @@
+#include "errobject.hxx"
+
+#include <cppuhelper/implbase2.hxx>
+#include <com/sun/star/script/XDefaultProperty.hpp>
+#include "sbintern.hxx"
+#include "runtime.hxx"
+
+using namespace ::com::sun::star;
+using namespace ::org::openoffice;
+
+typedef ::cppu::WeakImplHelper2< vba::XErrObject, script::XDefaultProperty > ErrObjectImpl_BASE;
+
+class ErrObject : public ErrObjectImpl_BASE
+{	
+	rtl::OUString m_sHelpFile;
+	rtl::OUString m_sSource;
+        rtl::OUString m_sDescription; 
+	sal_Int32 m_nNumber;
+	sal_Int32 m_nHelpContext;
+	
+public:
+	ErrObject();
+	~ErrObject();
+	// Attributes
+	virtual ::sal_Int32 SAL_CALL getNumber() throw (uno::RuntimeException);
+	virtual void SAL_CALL setNumber( ::sal_Int32 _number ) throw (uno::RuntimeException);
+	virtual ::sal_Int32 SAL_CALL getHelpContext() throw (uno::RuntimeException);
+	virtual void SAL_CALL setHelpContext( ::sal_Int32 _helpcontext ) throw (uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL getHelpFile() throw (uno::RuntimeException);
+	virtual void SAL_CALL setHelpFile( const ::rtl::OUString& _helpfile ) throw (uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL getDescription() throw (uno::RuntimeException);
+	virtual void SAL_CALL setDescription( const ::rtl::OUString& _description ) throw (uno::RuntimeException);
+	virtual ::rtl::OUString SAL_CALL getSource() throw (uno::RuntimeException);
+	virtual void SAL_CALL setSource( const ::rtl::OUString& _source ) throw (uno::RuntimeException);
+	
+	// Methods
+	virtual void SAL_CALL Clear(  ) throw (uno::RuntimeException);
+	virtual void SAL_CALL Raise( const uno::Any& Number, const uno::Any& Source, const uno::Any& Description, const uno::Any& HelpFile, const uno::Any& HelpContext ) throw (uno::RuntimeException);
+	// XDefaultProperty	
+	virtual ::rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (uno::RuntimeException);
+};
+
+
+ErrObject::~ErrObject()
+{
+	OSL_TRACE("ErrObject::ErrObject dtor");
+}
+
+ErrObject::ErrObject() : m_nNumber(0), m_nHelpContext(0)
+{
+	OSL_TRACE("ErrObject::ErrObject ctor");
+}
+
+sal_Int32 SAL_CALL
+ErrObject::getNumber() throw (uno::RuntimeException)
+{
+	return m_nNumber;
+}
+
+void SAL_CALL 
+ErrObject::setNumber( ::sal_Int32 _number ) throw (uno::RuntimeException)
+{
+	m_nNumber = _number;
+
+	
+}
+
+::sal_Int32 SAL_CALL 
+ErrObject::getHelpContext() throw (uno::RuntimeException)
+{
+	return m_nHelpContext;
+}
+void SAL_CALL 
+ErrObject::setHelpContext( ::sal_Int32 _helpcontext ) throw (uno::RuntimeException)
+{
+	m_nHelpContext = _helpcontext;
+}
+
+::rtl::OUString SAL_CALL 
+ErrObject::getHelpFile() throw (uno::RuntimeException)
+{
+	return m_sHelpFile;
+}
+
+void SAL_CALL 
+ErrObject::setHelpFile( const ::rtl::OUString& _helpfile ) throw (uno::RuntimeException)
+{
+	m_sHelpFile = _helpfile;
+}
+
+::rtl::OUString SAL_CALL 
+ErrObject::getDescription() throw (uno::RuntimeException)
+{
+	OSL_TRACE("returning desc %s", rtl::OUStringToOString( m_sDescription, RTL_TEXTENCODING_UTF8 ).getStr() );
+	return m_sDescription;
+}
+
+void SAL_CALL 
+ErrObject::setDescription( const ::rtl::OUString& _description ) throw (uno::RuntimeException)
+{
+	OSL_TRACE("setting desc %s", rtl::OUStringToOString( _description, RTL_TEXTENCODING_UTF8 ).getStr() );
+	m_sDescription = _description;
+}
+
+::rtl::OUString SAL_CALL 
+ErrObject::getSource() throw (uno::RuntimeException)
+{
+	return m_sSource;
+}
+
+void SAL_CALL 
+ErrObject::setSource( const ::rtl::OUString& _source ) throw (uno::RuntimeException)
+{
+	m_sSource = _source;
+}
+	
+// Methods
+void SAL_CALL 
+ErrObject::Clear(  ) throw (uno::RuntimeException)
+{
+	m_sHelpFile = rtl::OUString();
+	m_sSource = m_sHelpFile;
+	m_sDescription = m_sSource;
+	m_nNumber = 0;	
+	m_nHelpContext = 0;	
+}
+
+void SAL_CALL 
+ErrObject::Raise( const uno::Any& Number, const uno::Any& Source, const uno::Any& Description, const uno::Any& HelpFile, const uno::Any& HelpContext ) throw (uno::RuntimeException)
+{
+	if ( !Number.hasValue() )
+		throw uno::RuntimeException( rtl::OUString::createFromAscii("Missing Required Paramater"), uno::Reference< uno::XInterface >() );
+	Description >>= m_sDescription;
+	Source >>= m_sSource;
+	HelpFile >>= m_sHelpFile;
+	HelpContext >>= m_nHelpContext;
+	Number >>= m_nNumber;
+	if ( m_nNumber )
+		pINST->Error( StarBASIC::GetSfxFromVBError( m_nNumber ), m_sDescription );
+}
+
+// XDefaultProperty	
+::rtl::OUString SAL_CALL 
+ErrObject::getDefaultPropertyName(  ) throw (uno::RuntimeException)
+{
+	static rtl::OUString sDfltPropName( RTL_CONSTASCII_USTRINGPARAM("Number") );
+	return sDfltPropName;
+}
+
+// SbxErrObject
+SbxErrObject::SbxErrObject( const String& rName, const Any& rUnoObj ): SbUnoObject( rName, rUnoObj )
+{
+	OSL_TRACE("SbxErrObject::SbxErrObject ctor");
+	rUnoObj >>= m_xErr;
+	if ( m_xErr.is() )
+		SetDfltProperty( uno::Reference< script::XDefaultProperty >( m_xErr, uno::UNO_QUERY_THROW )->getDefaultPropertyName() ) ;
+}
+
+SbxErrObject::~SbxErrObject()
+{
+	OSL_TRACE("SbxErrObject::~SbxErrObject dtor");
+}
+
+uno::Reference< vba::XErrObject > 
+SbxErrObject::getUnoErrObject()
+{
+	SbxVariable* pVar = getErrObject();
+	SbxErrObject* pGlobErr = static_cast< SbxErrObject* >(  pVar );
+	return pGlobErr->m_xErr;	
+}
+
+SbxVariableRef
+SbxErrObject::getErrObject()
+{
+	static SbxVariableRef pGlobErr = new SbxErrObject( String(  RTL_CONSTASCII_USTRINGPARAM("Err")), uno::makeAny( uno::Reference< vba::XErrObject >( new ErrObject() ) ) );
+	return pGlobErr;
+}
+
