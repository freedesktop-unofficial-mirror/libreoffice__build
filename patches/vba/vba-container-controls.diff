diff --git extensions/source/propctrlr/formcomponenthandler.cxx extensions/source/propctrlr/formcomponenthandler.cxx
index b12854b..b34807f 100644
--- extensions/source/propctrlr/formcomponenthandler.cxx
+++ extensions/source/propctrlr/formcomponenthandler.cxx
@@ -2765,7 +2765,7 @@ namespace pcr
         aFileDlg.SetTitle(aStrTrans);
         // non-linked images ( e.g. those located in the document 
         // stream ) cannot *currently* be handled by openoffice basic dialogs. 
-        bool bHandleNonLink = ( m_eComponentClass == eFormControl );
+        bool bHandleNonLink = true;
         
         Reference< XFilePickerControlAccess > xController(aFileDlg.GetFilePicker(), UNO_QUERY);
         DBG_ASSERT(xController.is(), "FormComponentPropertyHandler::impl_browseForImage_nothrow: missing the controller interface on the file picker!");
diff --git svx/inc/svx/msocximex.hxx svx/inc/svx/msocximex.hxx
index 2bc6f51..36e9165 100644
--- svx/inc/svx/msocximex.hxx
+++ svx/inc/svx/msocximex.hxx
@@ -296,6 +296,8 @@ public:
     rtl::OUString msCtrlSource;
     rtl::OUString msRowSource;
         SfxObjectShell *pDocSh;
+        ::rtl::OUString sImageUrl;
+	com::sun::star::uno::Reference< com::sun::star::graphic::XGraphicObject> mxGrfObj;
 protected:
 
     sal_uInt32 ImportColor(sal_uInt32 nColorCode) const;
@@ -418,22 +420,21 @@ public:
 
     sal_uInt8 pPictureHeader[20];
     sal_uInt32 nPictureLen;
-    ::rtl::OUString sImageUrl;
-	com::sun::star::uno::Reference< com::sun::star::graphic::XGraphicObject> mxGrfObj;
-
 };
 
 class OCX_TabStrip : public OCX_Control
 {
 public:
-    OCX_TabStrip() : OCX_Control( rtl::OUString::createFromAscii("TabStrip")) {}
+	OCX_TabStrip() : OCX_Control( rtl::OUString::createFromAscii("TabStrip")), nIdentifier(0), nFixedAreaLen(0), nNumTabs(0), bHasTabs(true) {}
         virtual sal_Bool ReadFontData(SotStorageStream *pS);
         virtual sal_Bool Read(SotStorageStream *pS);
 
+        std::vector< rtl::OUString > msItems;
     sal_uInt16	nIdentifier;
     sal_uInt16	nFixedAreaLen;
     sal_uInt8	pBlockFlags[4];
-    sal_uInt16	nNumTabs;
+	sal_Int32	nNumTabs;
+	bool	        bHasTabs;
 };
 
 class OCX_Image : public OCX_Control
@@ -467,8 +468,6 @@ public:
     sal_uInt8	nSpecialEffect;
 
         bool bAutoSize;
-        ::rtl::OUString sImageUrl;
-		com::sun::star::uno::Reference< com::sun::star::graphic::XGraphicObject> mxGrfObj;
         sal_Bool Read(SotStorageStream *pS);
 
     using OCX_Control::Import; // to not hide the other two import methods
@@ -489,7 +488,7 @@ public:
 };
 struct ContainerRecord
 {
-    ContainerRecord():nTop(0), nLeft(0), nSubStorageId(0), nSubStreamLen(0), nTabPos(0), nTypeIdent(0), bVisible( true ) {}
+   ContainerRecord():nTop(0), nLeft(0), nSubStorageId(0), nSubStreamLen(0), nTabPos(0), nTypeIdent(0), bVisible( true ), bTabStop( true ) {}
 
     ::rtl::OUString cName;
     ::rtl::OUString controlTip;
@@ -503,6 +502,7 @@ struct ContainerRecord
     sal_uInt16  nTabPos;
     sal_uInt16 nTypeIdent;
     bool bVisible;
+    bool bTabStop;
 };
 
 typedef std::vector<OCX_Control*>::iterator CtrlIterator;
@@ -511,130 +511,84 @@ typedef std::vector<OCX_Control*>  CtrlList;
 
 class OCX_OptionButton;
 
-class OCX_ContainerControl : public OCX_Control
+class OCX_ParentControl : public OCX_Control
 {
 public:
-    virtual ~OCX_ContainerControl();
-        // sub class will process the control specific information
-        // e.g frame or userform ( maybe tab, mulipage in the future )
-        // Base (this) class will process the container specific information
-        // e.g. the controls contained by this container
-        // will
-        // a) create the controls
-        // b) read the controls
-        // c) store these controls in a list for post processing
-        //     e.g. import
-        //
     virtual sal_Bool Read(SvStorageStream *pS);
-        // No Font record
-    virtual sal_Bool ReadFontData(SvStorageStream* /*pS*/) { return sal_True; }
 
     using OCX_Control::Import; // to not hide the other two import methods
+
     virtual sal_Bool Import(com::sun::star::uno::Reference<
         com::sun::star::beans::XPropertySet> &rPropSet);
-
         SotStorageStreamRef getContainerStream() { return mContainerStream; }
-
+        SotStorageStreamRef getOStream() { return mContainedControlsStream; }
         virtual void ProcessControl( OCX_Control* pControl, SvStorageStream* pS, ContainerRecord& rec );
-        bool createFromContainerRecord( ContainerRecord& record,
+        bool createFromContainerRecord( const ContainerRecord& record,
             OCX_Control*& );
-        SotStorageStreamRef getContainedControlsStream(){ return mContainedControlsStream; }
 protected:
-        // This class not meant to be instantiated
-        // needs to be subclassed
-    OCX_ContainerControl( SotStorageRef& parent,
+	OCX_ParentControl( SotStorageRef& parent,
             const ::rtl::OUString& storageName,
             const ::rtl::OUString& sN,
             const com::sun::star::uno::Reference<
-                com::sun::star::container::XNameContainer >  &rParent,
+                com::sun::star::container::XNameContainer >  &rDialog,
             OCX_Control* pParent = NULL );
-        rtl::OUString createSubStreamName( const sal_uInt32& subStorageID );
+	~OCX_ParentControl();
 
-        com::sun::star::uno::Reference<
-                com::sun::star::container::XNameContainer > mxParent;
+        com::sun::star::uno::Reference< com::sun::star::container::XNameContainer > mxParent;
     std::vector<OCX_Control*> mpControls;
-        std::hash_map<sal_uInt16, sal_uInt16> mActiveXIDMap;
         SotStorageRef mContainerStorage;
         SotStorageStreamRef mContainerStream;
         SotStorageStreamRef mContainedControlsStream;
-    sal_uInt32 nNoRecords;
-    sal_uInt32 nTotalLen;
-        sal_uInt32 containerType;
-
-private:
-        OCX_ContainerControl(); // not implemented
-        OCX_ContainerControl(const OCX_ContainerControl&); // not implemented
-};
-
-
-class OCX_MultiPage : public OCX_ContainerControl
-{
-public:
-    OCX_MultiPage( SotStorageRef& parent,
-            const ::rtl::OUString& storageName,
-            const ::rtl::OUString& sN,
-            const com::sun::star::uno::Reference<
-                com::sun::star::container::XNameContainer >  &rDialog, OCX_Control* pParent = NULL);
-    virtual ~OCX_MultiPage()
-    {
-        delete[] pCaption;
-        delete[] pIcon;
-        delete[] pPicture;
-    }
-    virtual sal_Bool Read(SvStorageStream *pS);
-
-    using OCX_ContainerControl::Import; // to not hide the other two import methods
-    virtual sal_Bool Import(com::sun::star::uno::Reference<
-        com::sun::star::beans::XPropertySet> &rPropSet);
-    virtual sal_Bool Import(com::sun::star::uno::Reference<
-        com::sun::star::container::XNameContainer>
-        &rDialog);
-        virtual void ProcessControl( OCX_Control* pControl, SvStorageStream* pS, ContainerRecord& rec );
-    /*sal_uInt8 for sal_uInt8 Word Struct*/
-    sal_uInt16 nIdentifier;
-    sal_uInt16 nFixedAreaLen;
-    sal_uInt8	pBlockFlags[4];
+ 	sal_uInt16 nIdentifier;
+ 	sal_uInt16 nFixedAreaLen;
+ 	sal_uInt8	pBlockFlags[4];
 
-    sal_uInt32  fUnknown1;
+	sal_uInt32  nNextAvailableID;
+	sal_uInt32  nBooleanProperties;
+	sal_uInt32  nGroupCnt;
+	sal_uInt32  nZoom;
 
-    sal_uInt8	fUnknown2:1;
+    sal_uInt8	fUnknown1:1;
     sal_uInt8	fEnabled:1;
     sal_uInt8	fLocked:1;
     sal_uInt8	fBackStyle:1;
-    sal_uInt8	fUnknown3:4;
+    sal_uInt8	fUnknown2:4;
 
-    sal_uInt8	fUnknown4:8;
+    sal_uInt8	fUnknown3:8;
 
-    sal_uInt8	fUnknown5:7;
+    sal_uInt8	fUnknown4:7;
     sal_uInt8	fWordWrap:1;
 
-    sal_uInt8	fUnknown6:4;
+    sal_uInt8	fUnknown5:4;
     sal_uInt8	fAutoSize:1;
-    sal_uInt8	fUnknown7:3;
+    sal_uInt8	fUnknown6:3;
 
     sal_uInt32	nCaptionLen;
     sal_uInt16  nVertPos;
     sal_uInt16  nHorzPos;
-    sal_uInt8 	nMousePointer;
     sal_uInt32	nBorderColor;
-    sal_uInt32  fUnknown8;
-    sal_uInt32  fUnknown9;
+    sal_uInt32  nDrawBuffer;
+    sal_uInt32  nShapeCookie;
     sal_uInt8   nKeepScrollBarsVisible;
     sal_uInt8   nCycle;
-    sal_uInt16	nBorderStyle;
-    sal_uInt16	nSpecialEffect;
+    sal_uInt8	nBorderStyle;
+    sal_uInt8 	nMousePointer;
+
+    sal_uInt8	nSpecialEffect;
     sal_uInt16	nPicture;
     sal_uInt8   nPictureAlignment;
     sal_uInt8   nPictureSizeMode;
     bool        bPictureTiling;
     sal_uInt16	nAccelerator;
     sal_uInt16	nIcon;
+    sal_uInt16	fUnknown7;
 
     char *pCaption;
 
     sal_uInt32 	nScrollWidth;
     sal_uInt32 	nScrollHeight;
-
+    sal_uInt32 	nScrollLeft;
+    sal_uInt32 	nScrollTop;
 
     sal_uInt8 pIconHeader[20];
     sal_uInt32  nIconLen;
@@ -642,257 +596,92 @@ public:
 
     sal_uInt8 pPictureHeader[20];
     sal_uInt32  nPictureLen;
-    sal_uInt8 *pPicture;
 private:
-        sal_Int32 mnCurrentPageStep;
-};
-
+        OCX_ParentControl(); // not implemented
+        OCX_ParentControl(const OCX_ParentControl&); // not implemented
 
+};
 
-class OCX_Page : public OCX_ContainerControl
+class OCX_Page; 
+class OCX_MultiPage : public OCX_ParentControl
 {
 public:
-    OCX_Page( SotStorageRef& parentStorage,
+	OCX_MultiPage( SotStorageRef& parent,
             const ::rtl::OUString& storageName,
             const ::rtl::OUString& sN,
             const com::sun::star::uno::Reference<
-                com::sun::star::container::XNameContainer >  &rDialog, OCX_Control* parent = NULL);
-    virtual ~OCX_Page()
-    {
-        delete[] pCaption;
-        delete[] pIcon;
-        delete[] pPicture;
-    }
-    virtual sal_Bool Read(SvStorageStream *pS);
-
-    using OCX_ContainerControl::Import; // to not hide the other two import methods
-    virtual sal_Bool Import(com::sun::star::uno::Reference<
-        com::sun::star::container::XNameContainer>
-        &rDialog);
-/*	virtual sal_Bool Import(com::sun::star::uno::Reference<
-        com::sun::star::beans::XPropertySet> &rPropSet);
-*/
-    /*sal_uInt8 for sal_uInt8 Word Struct*/
-    sal_uInt16 nIdentifier;
-    sal_uInt16 nFixedAreaLen;
-    sal_uInt8	pBlockFlags[4];
-
-    sal_uInt32  fUnknown1;
-
-    sal_uInt8	fUnknown2:1;
-    sal_uInt8	fEnabled:1;
-    sal_uInt8	fLocked:1;
-    sal_uInt8	fBackStyle:1;
-    sal_uInt8	fUnknown3:4;
-
-    sal_uInt8	fUnknown4:8;
-
-    sal_uInt8	fUnknown5:7;
-    sal_uInt8	fWordWrap:1;
-
-    sal_uInt8	fUnknown6:4;
-    sal_uInt8	fAutoSize:1;
-    sal_uInt8	fUnknown7:3;
-
-    sal_uInt32	nCaptionLen;
-    sal_uInt16  nVertPos;
-    sal_uInt16  nHorzPos;
-    sal_uInt8 	nMousePointer;
-    sal_uInt32	nBorderColor;
-    sal_uInt32  fUnknown8;
-    sal_uInt32  fUnknown9;
-    sal_uInt8   nKeepScrollBarsVisible;
-    sal_uInt8   nCycle;
-    sal_uInt16	nBorderStyle;
-    sal_uInt16	nSpecialEffect;
-    sal_uInt16	nPicture;
-    sal_uInt8   nPictureAlignment;
-    sal_uInt8   nPictureSizeMode;
-    bool        bPictureTiling;
-    sal_uInt16	nAccelerator;
-    sal_uInt16	nIcon;
+                com::sun::star::container::XNameContainer >  &rDialog, OCX_Control* pParent = NULL);
 
-    char *pCaption;
+	virtual sal_Bool Read(SvStorageStream *pS);
 
-    sal_uInt32 	nScrollWidth;
-    sal_uInt32 	nScrollHeight;
+	using OCX_ParentControl::Import; // to not hide the other two import methods
+	virtual sal_Bool Import(com::sun::star::uno::Reference<
+		com::sun::star::beans::XPropertySet> &rPropSet);
+        virtual void ProcessControl( OCX_Control* pControl, SvStorageStream* pS, ContainerRecord& rec );
+private:
+        sal_Int32 nActiveTab;
+        SotStorageStreamRef mXStream;
+        bool bHasTabs;
+        std::vector< rtl::OUString > sCaptions;
+        // order of Ids corrosponds to the order of captions above
+        std::vector< sal_Int32 > mPageIds;
+        std::hash_map< sal_Int32, OCX_Page* > idToPage;
+};
 
 
-    sal_uInt8 pIconHeader[20];
-    sal_uInt32  nIconLen;
-    sal_uInt8 *pIcon;
+class OCX_Page : public OCX_ParentControl
+{
+public:
+	OCX_Page( SotStorageRef& parentStorage,
+            sal_Int32 nID,
+            const ::rtl::OUString& sN,
+            const com::sun::star::uno::Reference<
+                com::sun::star::container::XNameContainer >  &rDialog, OCX_Control* parent = NULL);
+	virtual sal_Bool Read(SvStorageStream *pS);
 
-    sal_uInt8 pPictureHeader[20];
-    sal_uInt32  nPictureLen;
-    sal_uInt8 *pPicture;
+	using OCX_ParentControl::Import; // to not hide the other two import methods
+	virtual sal_Bool Import(com::sun::star::uno::Reference<
+		com::sun::star::beans::XPropertySet> &rPropSet);
+        rtl::OUString msTitle; // #FIXME we should use the existing caption
+        sal_Int32 mnID;
 private:
 };
 
 
-class OCX_Frame : public OCX_ContainerControl
+class OCX_Frame : public OCX_ParentControl
 {
 public:
-    OCX_Frame( SotStorageRef& parent,
+	OCX_Frame( SotStorageRef& parent,
             const ::rtl::OUString& storageName,
             const ::rtl::OUString& sN,
             const com::sun::star::uno::Reference<
                 com::sun::star::container::XNameContainer >  &rDialog, OCX_Control* pParent = NULL);
-    virtual ~OCX_Frame()
-    {
-        delete[] pCaption;
-        delete[] pIcon;
-        delete[] pPicture;
-    }
-    virtual sal_Bool Read(SvStorageStream *pS);
-
-    using OCX_ContainerControl::Import; // to not hide the other two import methods
-    virtual sal_Bool Import(com::sun::star::uno::Reference<
-        com::sun::star::beans::XPropertySet> &rPropSet);
-
-    /*sal_uInt8 for sal_uInt8 Word Struct*/
-    sal_uInt16 nIdentifier;
-    sal_uInt16 nFixedAreaLen;
-    sal_uInt8	pBlockFlags[4];
-
-    sal_uInt32  fUnknown1;
-
-    sal_uInt8	fUnknown2:1;
-    sal_uInt8	fEnabled:1;
-    sal_uInt8	fLocked:1;
-    sal_uInt8	fBackStyle:1;
-    sal_uInt8	fUnknown3:4;
+	virtual sal_Bool Read(SvStorageStream *pS);
 
-    sal_uInt8	fUnknown4:8;
-
-    sal_uInt8	fUnknown5:7;
-    sal_uInt8	fWordWrap:1;
-
-    sal_uInt8	fUnknown6:4;
-    sal_uInt8	fAutoSize:1;
-    sal_uInt8	fUnknown7:3;
-
-    sal_uInt32	nCaptionLen;
-    sal_uInt16  nVertPos;
-    sal_uInt16  nHorzPos;
-    sal_uInt8 	nMousePointer;
-    sal_uInt32	nBorderColor;
-    sal_uInt32  fUnknown8;
-    sal_uInt32  fUnknown9;
-    sal_uInt8   nKeepScrollBarsVisible;
-    sal_uInt8   nCycle;
-    sal_uInt16	nBorderStyle;
-    sal_uInt16	nSpecialEffect;
-    sal_uInt16	nPicture;
-    sal_uInt8   nPictureAlignment;
-    sal_uInt8   nPictureSizeMode;
-    bool        bPictureTiling;
-    sal_uInt16	nAccelerator;
-    sal_uInt16	nIcon;
-
-    char *pCaption;
-
-    sal_uInt32 	nScrollWidth;
-    sal_uInt32 	nScrollHeight;
-    sal_uInt32 	nScrollLeft;
-    sal_uInt32 	nScrollTop;
-
-
-    sal_uInt8 pIconHeader[20];
-    sal_uInt32  nIconLen;
-    sal_uInt8 *pIcon;
-
-    sal_uInt8 pPictureHeader[20];
-    sal_uInt32  nPictureLen;
-    sal_uInt8 *pPicture;
-private:
+	using OCX_ParentControl::Import; // to not hide the other two import methods
+	virtual sal_Bool Import(com::sun::star::uno::Reference<
+		com::sun::star::beans::XPropertySet> &rPropSet);
 };
 
-class OCX_UserForm : public OCX_ContainerControl
+
+class OCX_UserForm : public OCX_ParentControl
 {
 public:
-    OCX_UserForm( SotStorageRef& parent,
+        OCX_UserForm( SotStorageRef& parent,
             const ::rtl::OUString& storageName,
             const ::rtl::OUString& sN,
             const com::sun::star::uno::Reference<
                 com::sun::star::container::XNameContainer >  &rDialog,
             const com::sun::star::uno::Reference<
                 com::sun::star::lang::XMultiServiceFactory >& rMsf);
-    ~OCX_UserForm()
-    {
-        delete[] pCaption;
-        delete[] pIcon;
-    }
-
-    virtual sal_Bool Read(SvStorageStream *pS);
-
-    using OCX_ContainerControl::Import; // to not hide the other two import methods
-    virtual sal_Bool Import( com::sun::star::uno::Reference<
-        com::sun::star::container::XNameContainer>
-        &rDialog);
-
-    /*sal_uInt8 for sal_uInt8 Word Struct*/
-    sal_uInt16 nIdentifier;
-    sal_uInt16 nFixedAreaLen;
-    sal_uInt8	pBlockFlags[4];
-
-    sal_uInt32  nChildrenA;
-
-    sal_uInt8	fUnknown1:1;
-    sal_uInt8	fEnabled:1;
-    sal_uInt8	fLocked:1;
-    sal_uInt8	fBackStyle:1;
-    sal_uInt8	fUnknown2:4;
-
-    sal_uInt8	fUnknown3:8;
-
-    sal_uInt8	fUnknown4:7;
-    sal_uInt8	fWordWrap:1;
-
-    sal_uInt8	fUnknown5:4;
-    sal_uInt8	fAutoSize:1;
-    sal_uInt8	fUnknown6:3;
-
-    sal_uInt32	nCaptionLen;
-    sal_uInt16  nVertPos;
-    sal_uInt16  nHorzPos;
-    sal_uInt8 	nMousePointer;
-    sal_uInt32	nBorderColor;
-    sal_uInt32  nDrawBuffer;
-    sal_uInt32  nChildrenB;
-    sal_uInt8   nKeepScrollBarsVisible;
-    sal_uInt8   nCycle;
-    sal_uInt16	nBorderStyle;
-    sal_uInt8	nSpecialEffect;
-    sal_uInt16	nPicture;
-    sal_uInt8   nPictureAlignment;
-    sal_uInt8   nPictureSizeMode;
-    bool        bPictureTiling;
-    sal_uInt16	nAccelerator;
-    sal_uInt16	nIcon;
-    sal_uInt16	fUnknown7;
-
-    char *pCaption;
-
-    sal_uInt32 	nScrollWidth;
-    sal_uInt32 	nScrollHeight;
-    sal_uInt32 	nScrollLeft;
-    sal_uInt32 	nScrollTop;
-
-    sal_uInt8 pIconHeader[20];
-    sal_uInt32  nIconLen;
-    sal_uInt8 *pIcon;
-
-    sal_uInt8 pPictureHeader[20];
-    sal_uInt32  nPictureLen;
-    ::rtl::OUString sImageUrl;
-	com::sun::star::uno::Reference< com::sun::star::graphic::XGraphicObject> mxGrfObj;
+	virtual sal_Bool Import( com::sun::star::uno::Reference<
+		com::sun::star::container::XNameContainer>
+		&rDialog);
 private:
         com::sun::star::uno::Reference<
                 com::sun::star::uno::XComponentContext> mxCtx;
 };
 
-
-
 class OCX_CheckBox : public OCX_ModernControl
 {
 public:
@@ -1133,8 +922,6 @@ public:
 
     sal_uInt8 pPictureHeader[20];
     sal_uInt32  nPictureLen;
-    ::rtl::OUString sImageUrl;
-	com::sun::star::uno::Reference< com::sun::star::graphic::XGraphicObject> mxGrfObj;
 
     bool        mbTakeFocus;
 
@@ -1196,7 +983,7 @@ public:
     fAutoSize(0),nCaptionLen(0),nVertPos(1),nHorzPos(7),nMousePointer(0),
     nBorderColor(0x80000006),nBorderStyle(0),nSpecialEffect(0),
     nPicture(0),nAccelerator(0),nIcon(0),pCaption(0),nIconLen(0),pIcon(0),
-    nPictureLen(0),pPicture(0)
+    nPictureLen(0)
     {
         msFormType = rtl::OUString::createFromAscii("com.sun.star.form.component.FixedText");
         msDialogType = rtl::OUString::createFromAscii("com.sun.star.awt.UnoControlFixedTextModel");
@@ -1208,7 +995,6 @@ public:
     ~OCX_Label() {
         if (pCaption) delete[] pCaption;
         if (pIcon) delete[] pIcon;
-        if (pPicture) delete[] pPicture;
     }
     sal_Bool Read(SotStorageStream *pS);
 
@@ -1252,7 +1038,6 @@ public:
 
     sal_uInt8 pPictureHeader[20];
     sal_uInt32  nPictureLen;
- 	sal_uInt8 *pPicture;
 
     static OCX_Control *Create() { return new OCX_Label;}
 
diff --git svx/source/msfilter/msocximex.cxx svx/source/msfilter/msocximex.cxx
index 12f5456..1b99695 100644
--- svx/source/msfilter/msocximex.cxx
+++ svx/source/msfilter/msocximex.cxx
@@ -362,6 +362,39 @@ OUString lclCreateOUString( const char* pcCharArr, sal_uInt32 nLenFld )
     return svt::BinFilterUtils::CreateOUStringFromUniStringArray( pcCharArr, nBufSize );
 }
 
+void readArrayString( SotStorageStream *pS, std::vector< rtl::OUString >& sStringsOut, sal_Int32 nSize, long nStart )
+{
+    unsigned long nFinish = pS->Tell() + nSize;
+    while ( pS->Tell() < nFinish )
+    {
+        sal_Int32 nStringLen = 0;
+        *pS >> nStringLen;
+        sal_uInt32 nStringSize = lclGetBufferSize( nStringLen ); 
+        sal_Char* pString = new sal_Char[ nStringSize ];
+        pS->Read( pString, nStringSize );
+        rtl::OUString sString = lclCreateOUString( pString, nStringLen ); 
+        delete[] pString;
+        sStringsOut.push_back( sString ); 
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+    }
+}
+
+OUString createSubStreamName( const sal_uInt32& subStorageId )
+{
+    static OUString sI = OUString::createFromAscii("i");
+    static OUString sZero = OUString::createFromAscii( "0" );
+    OUStringBuffer buf( 6 );
+    buf.append( sI );
+    // for subStorage id < 10 stream name has leading '0'
+    // eg "i07"
+    if ( subStorageId < 10 )
+    {
+        buf.append( sZero );
+    }
+    buf.append( OUString::valueOf( (sal_Int32)subStorageId ) );
+    return buf.makeStringAndClear();
+}
+
 // export ---------------------------------------------------------------------
 
 /** This class implements writing a character array from a Unicode string.
@@ -454,6 +487,44 @@ void SvxOcxString::WriteCharArray( SvStorageStream& rStrm ) const
     }
 }
 
+class MultiPageProps
+{
+public:
+    sal_uInt16	nIdentifier; // major & minor version
+    sal_uInt16	nFixedAreaLen; // size of record
+    sal_uInt8	pBlockFlags[4]; // size of record
+    sal_Int32   mnPageCount;
+    sal_Int32   mnID;
+    bool        mbEnabled;
+    std::vector< sal_Int32 > mnIDs;
+
+    MultiPageProps();
+    bool Read(SotStorageStream *pS);
+};
+
+MultiPageProps::MultiPageProps() : nIdentifier(0), nFixedAreaLen(0), mnPageCount(0), mnID(0), mbEnabled( true )
+{
+}
+
+bool MultiPageProps::Read(SotStorageStream *pS)
+{
+    *pS >> nIdentifier >> nFixedAreaLen;
+    pS->Read( pBlockFlags, sizeof( pBlockFlags ) );
+    if ( pBlockFlags[ 0 ] & 0x02 )
+        *pS >> mnPageCount; 
+    if ( pBlockFlags[ 0 ] & 0x04 )
+        *pS >> mnID; 
+    if ( pBlockFlags[ 0 ] & 0x08 )
+        mbEnabled = false;
+    for ( sal_Int32 i=0; i<mnPageCount; ++i )
+    {
+        sal_Int32 nID(0);
+        *pS >> nID;
+        mnIDs.push_back( nID );
+    } 
+    return true;
+}
+
 const sal_uInt16 USERFORM = (sal_uInt16)0xFF;
 const sal_uInt16 STDCONTAINER = (sal_uInt16)0xFE;
 
@@ -479,48 +550,42 @@ const sal_uInt16 TOGGLEBUTTON = (sal_uInt16)0x1C;
 const sal_uInt16 SCROLLBAR = (sal_uInt16)0x2F;
 
 const sal_uInt16 MULTIPAGE = (sal_uInt16)0x39;
-// The IDs with bit 0x8000 set appear to be generated.
-// It looks like these ID's are used with the non-toolbox [1]
-// ActiveX controls that can be present in a Userform
-// ( note: RefEdit seems to be an exception )
-// In UserForm::Read just before the Container record starts
-// you will notice there can be sometimes trailing records, 
-// it seems that these records have a 1:1 relationship with the non-toolbox
-// controls present in the Userform. An id in the trailing record
-// seems to identify the specific ActiveX control and an artificial nTypeIdent
-// e.g. 0x8000, 0x8001 etc. is created so as to be able to associate
-// the ActiveX control when referenced later 
-// [1] Such ActiveX controls are added via Tools/AddionalControls
-// menu
-
-// create a fixed set of those special id(s)
-// ahem, we can only read one Progress bars at the moment so....
+
+const sal_uInt16 UNKNOWNCTRL = (sal_uInt16)0x7FFF;
 const sal_uInt16 PROGRESSBAR = (sal_uInt16)0x8000;
 
-// A set of IDs from the trailing records mentioned above that seem to
-// identify the following ActiveX controls 
+// following ActiveX controls are just for reference ( are NOT supported )
+const sal_uInt16 REFEDIT = (sal_uInt16)0x8001;
+const sal_uInt16 CALENDAR = (sal_uInt16)0x8002;
+const sal_uInt16 IMAGECOMBO = (sal_uInt16)0x8003;
+const sal_uInt16 IMAGELIST = (sal_uInt16)0x8004;
+const sal_uInt16 SLIDER = (sal_uInt16)0x8005;
+const sal_uInt16 STATUSBAR = (sal_uInt16)0x8006;
+const sal_uInt16 CHARTSPACE = (sal_uInt16)0x8007;
+
+// A set of common CLSIDs 
+// there are to identify the following ActiveX controls ( that appear in the ClassTable records )
 // Currently we only can process ( in a limited way ) the ProgressBar
 // the other ID's are for reference ( & future )
 
-// RefEdit control {00024512-0000-0000-c000-000000000046}
-const sal_uInt8 aRefEditID[] =
-{
-0x12, 0x45, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
-};
-
 // Microsoft ProgressBar Control, version 6.0 {35053A22-8589-11D1-B16A-00C0F0283628}
 const sal_uInt8 aProgressID[] =
 {
 0x22, 0x3a, 0x05, 0x35, 0x89, 0x85, 0xd1, 0x11,  0xb1, 0x6a, 0x00, 0xc0, 0xf0, 0x28, 0x36, 0x28,
 };
 
+// RefEdit control {00024512-0000-0000-c000-000000000046}
+const sal_uInt8 aRefEditID[] =
+{
+0x12, 0x45, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
+};
+
 // Calendar Control 10.0 
 const sal_uInt8 aCalendarID[] =
 {
 0x2b, 0xc9, 0x27, 0x8e, 0x64, 0x12, 0x1c, 0x10, 0x8a, 0x2f, 0x04, 0x02, 0x24, 0x00, 0x9c, 0x02,
 };
 
-
 // Microsoft ImageComboxBox Control, version 6.0 {DD9DA666-8594-11D1-B16A-00C0F0283628}
 const sal_uInt8 aImageComboID[] =
 {
@@ -551,232 +616,356 @@ const sal_uInt8 aChartSpaceID[] =
 0x46, 0xe5, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
 };
 
-const sal_Int16 ActiveXIDLen = 0x10; // CLSID len
-const sal_Int16 ActiveXIDBlockLen = 0x30; // the block len that contains the CLSID
+const sal_uInt8 nSizeOfClsid = sizeof( aProgressID );
 
-bool lcl_handleActiveXControl(  SvStorageStream *pS, sal_uInt16& nTypeID )
+struct ClsIdTypeIDPair
 {
-    nTypeID = 0; // Illegal ActiveX ID 
-    bool bRes = false;
-    sal_uInt16 nIdentifier, nFixedAreaLen;
-    *pS >> nIdentifier;    
-    *pS >> nFixedAreaLen;    
-    pS->SeekRel( ( nFixedAreaLen - ActiveXIDBlockLen ) );
-    sal_uInt8 aID[ ActiveXIDLen ];
-    if ( !pS->IsEof() )
-    {
-        pS->Read( aID, ActiveXIDLen );
-        pS->SeekRel( ActiveXIDBlockLen - ActiveXIDLen ); // read remainer of record
-        if ( memcmp( aID, aProgressID, ActiveXIDLen ) == 0 )
-        {
-            nTypeID = PROGRESSBAR;
-            OSL_TRACE("Found supported ***PROGRESSBAR*** ActiveX control");
-            bRes = true;
-        }
-#if (OSL_DEBUG_LEVEL > 0)
-        // If we really want to process these more controls we should put them in 
-        // a list or array and have a single loop testing each id. For the moment 
-        // as we only can process PROGRESSBAR, not much point doing that until 
-        // we add support for at least another activex control
-
-        else if ( memcmp( aID, aCalendarID, ActiveXIDLen ) == 0 )
-            OSL_TRACE("Found unsupported ***CALENDAR*** ActiveX control");
-        else if ( memcmp( aID, aRefEditID, ActiveXIDLen ) == 0 )
-            OSL_TRACE("Found unsupported ***REFEDIT*** ActiveX control");
-        else if ( memcmp( aID, aImageComboID, ActiveXIDLen ) == 0 )
-            OSL_TRACE("Found unsupported ***IMAGECOMBO*** ActiveX control");
-        else if ( memcmp( aID, aImageListID, ActiveXIDLen ) == 0 )
-            OSL_TRACE("Found unsupported ***IMAGELIST*** ActiveX control");
-        else if ( memcmp( aID, aChartSpaceID, ActiveXIDLen ) == 0 )
-            OSL_TRACE("Found unsupported ***CHARTSPACE*** ActiveX control");
-        else if ( memcmp( aID, aSliderID, ActiveXIDLen ) == 0 )
-            OSL_TRACE("Found unsupported ***SLIDER*** ActiveX control");
-        else if ( memcmp( aID, aStatusBarID, ActiveXIDLen ) == 0 )
-            OSL_TRACE("Found unsupported ***STATUSBAR*** ActiveX control");
+//    ClsIdTypeIDPair() : pClsID( NULL ), nTypeID( UNKNOWNCTRL ) {}
+    const sal_uInt8* pClsID;
+    const sal_uInt16 nTypeID;
+};
+
+ClsIdTypeIDPair ClsidList[] = { { aProgressID, PROGRESSBAR }, 
+// unsupported common activex controls
+#ifdef DEBUG
+                                 { aRefEditID, REFEDIT },
+                                 { aCalendarID, CALENDAR },
+                                 { aImageComboID, IMAGECOMBO },
+                                 { aImageListID, IMAGELIST },
+                                 { aSliderID, SLIDER },
+                                 { aStatusBarID, STATUSBAR }, 
+                                 { aChartSpaceID, CHARTSPACE }, 
 #endif
-        else
-        {
-            OSL_TRACE("Unknown activeX ID !");
-        }
-    }
-    return bRes;
-}
+};
+
 
 typedef std::vector< ContainerRecord > ContainerRecordList;
 
-class ContainerRecReader
+class FormObjectDepthTypeCount
 {
     public:
+    sal_uInt8 depth;
+    sal_uInt8 TypeOrCount;
+    std::auto_ptr< sal_uInt8 > OptionalType;
+    FormObjectDepthTypeCount() : depth(0), TypeOrCount(0) {}
+    bool Read( SvStorageStream* pS ) 
+    {
+        *pS >> depth >> TypeOrCount;
+        if ( TypeOrCount &  0x80 ) 
+        {
+            OptionalType.reset( new sal_uInt8 );
+            *pS >> *OptionalType;
+        }
+        TypeOrCount = ( TypeOrCount >> 1 );
+        return true;
+    }
+};
 
-    virtual ~ContainerRecReader() {}
+class ClassTable
+{
+    sal_uInt16 nIdentifier;
+    sal_uInt16 nFixedAreaLen;
+    sal_uInt32 nContentFlags;
+    sal_uInt16 nClassTableFlags;
+    sal_uInt16 nVarFlags;
+    sal_Int32 nCountOfMethods;
+    sal_Int32 nDispidBind;
+    sal_uInt16 nGetBindIndex;
+    sal_uInt16 nPutBindIndex;
+    sal_uInt16 nBindType;
+    sal_uInt16 nGetValueIndex;
+    sal_uInt16 nPutValueIndex;
+    sal_uInt16 nValueType;
+    sal_uInt32 nDisidRowset;
+    sal_uInt16 nSetRowset;
+    sal_uInt8 pClsId[16];
+    sal_uInt8 pDispEvent[16];
+    sal_uInt8 pDefaultProg[16];
+    sal_uInt16 nTypeId;
+public:
+    ClassTable() :  nIdentifier( 0 )
+                   ,nFixedAreaLen( 0 )
+                   ,nContentFlags(0)
+                   ,nClassTableFlags(0)
+                   ,nVarFlags(0) 
+                   ,nCountOfMethods(0) 
+                   ,nDispidBind(0) 
+                   ,nGetBindIndex(0)
+                   ,nPutBindIndex(0)
+                   ,nBindType(0)
+                   ,nGetValueIndex(0)
+                   ,nPutValueIndex(0)
+                   ,nValueType(0)
+                   ,nDisidRowset(0)
+                   ,nSetRowset(0)
+                   ,nTypeId(UNKNOWNCTRL)
+
+    {
+        memset( pClsId, 0, sizeof( pClsId ) );
+        memset( pDispEvent, 0, sizeof( pDispEvent ) );
+        memset( pDefaultProg, 0, sizeof( pDefaultProg ) );
+    }   
+    bool Read(  SvStorageStream* pS ) 
+    {
+        long nStartPos = pS->Tell();        
+        *pS >> nIdentifier >> nFixedAreaLen >> nContentFlags;
+        bool bClsID( false );
+        bool bDispEvent( false );
+        bool bDefaultProg( false );
+        if (  nContentFlags & 0x00000001 )
+            bClsID = true; 
+        if (  nContentFlags & 0x00000002 )
+            bDispEvent = true;
+//        if (  nContentFlags & 0x00000004 ) ' not set should be 0
+        if (  nContentFlags & 0x00000008 )
+            bDefaultProg = true;
+        if (  nContentFlags & 0x00000010 )
+            *pS >> nClassTableFlags >> nVarFlags;
+        if (  nContentFlags & 0x00000020 )
+            *pS >> nCountOfMethods;
+        if (  nContentFlags & 0x00000040 )
+            *pS >> nDispidBind;
+        if (  nContentFlags & 0x00000080 )
+            *pS >> nGetBindIndex;
+        if (  nContentFlags & 0x00000100 )
+            *pS >> nPutBindIndex;
+        if (  nContentFlags & 0x00000200 )
+            *pS >> nBindType;
+        if (  nContentFlags & 0x00000400 )
+            *pS >> nGetValueIndex;
+        if (  nContentFlags & 0x00000800 )
+            *pS >> nPutValueIndex;
+        if (  nContentFlags & 0x00001000 )
+            *pS >> nValueType;
+        if (  nContentFlags & 0x00002000 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            *pS >> nDisidRowset;
+        }
+        if (  nContentFlags & 0x00004000 )
+            *pS >> nSetRowset;
+        ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+        // Extra Block
+        if ( bClsID )
+            pS->Read( pClsId, sizeof( pClsId ) );
+        if ( bDispEvent )
+            pS->Read( pDispEvent, sizeof( pDispEvent ) );
+        if ( bDefaultProg )
+            pS->Read( pDefaultProg, sizeof( pDefaultProg ) );
+
+        sal_Int32 nNumIds =  sizeof( ClsidList ) / sizeof( ClsidList[0] );
+
+        if ( bClsID )
+        {
+            for ( sal_Int32 index = 0; index < nNumIds; ++index )
+            {
+                if ( memcmp( pClsId, ClsidList[ index ].pClsID, nSizeOfClsid ) == 0 )    
+                {
+                    nTypeId = ClsidList[ index ].nTypeID;
+                    OSL_TRACE( "... found activex control ClsidList[ %d ] and have given it TypeIdent 0x%x", index, nTypeId );
+                }
+            } 
+        }
+        ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+        return true;
+    }
+
+    sal_uInt16 getTypeId() { return nTypeId; }
+};
 
-    virtual bool Read( OCX_ContainerControl* pContainerControl, SvStorageStream *pS)
+class OleSiteConcreteControl
+{
+    sal_uInt16 nIdentifier;
+    sal_uInt16 nFixedAreaLen;
+    sal_uInt32 nContentFlags;
+public:
+    OleSiteConcreteControl() :  nIdentifier( 0 ), nFixedAreaLen( 0 ), nContentFlags(0) {}   
+    bool Read( ContainerRecord& rec, SvStorageStream* pS ) 
     {
-        *pS >> nNoRecords;
-        *pS >> nTotalLen;
+        long nStartPos = pS->Tell();
+        *pS >> nIdentifier >> nFixedAreaLen >> nContentFlags; 
 
-        if ( isMultiPage )
+        bool bPosition( false );
+         
+        sal_uInt32 nNameLen = 0;
+        // length of control name
+        if ( nContentFlags & 0x00000001 )
+            *pS >> nNameLen;
+        // length of control tag
+        sal_uInt32 nTagLen = 0;
+        if( nContentFlags & 0x00000002 )
+            *pS >> nTagLen;
+        // substorage id for frames
+        if( nContentFlags & 0x00000004 )
+            *pS >> rec.nSubStorageId;
+        // help-context id
+        if( nContentFlags & 0x00000008 )
+            pS->SeekRel( 4 );
+        // option flags
+        if( nContentFlags & 0x00000010 )
         {
-            if ( !handleMultiPageHdr( pS ) )
-            {
-                return false;
-            }
+            sal_uInt32 nBitFlags = 0;
+            *pS >> nBitFlags;
+            rec.bVisible = ( nBitFlags & 0x02 );
+            rec.bTabStop = ( nBitFlags & 0x01 );
         }
-        else
+        // substream size
+        if( nContentFlags & 0x00000020 )
+            *pS >> rec.nSubStreamLen;
+        // tabstop position
+        if( nContentFlags & 0x00000040 )
         {
-            if ( !handleStandardHdr( pS ) )
-            {
-                return false;
-            }
+            ReadAlign( pS, pS->Tell() - nStartPos, 2 );
+            *pS >> rec.nTabPos;
+        }
+        // control type
+        if( nContentFlags & 0x00000080 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 2 );
+            *pS >> rec.nTypeIdent;
+        }
+        if( nContentFlags & 0x00000100 )
+            bPosition = true;
+        sal_Int16 nGroupId = 0;
+        if( nContentFlags & 0x00000200 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 2 );
+            *pS >> nGroupId;
         }
 
-        records.clear();
-        for (sal_uInt32 nRecord = 0; nRecord < nNoRecords; ++nRecord)
+        // length of infotip
+        sal_uInt32 nTipLen = 0;
+        if( nContentFlags & 0x00000800 )
         {
-            // DR #134146# redo loading of FrameChild data
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            *pS >> nTipLen;
+        }
+        sal_uInt32 nCntrlIdLen = 0;
+        if( nContentFlags & 0x00001000 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            *pS >> nCntrlIdLen;
+        }
 
-            ContainerRecord rec;
+        // length of control source name
+        sal_uInt32 nCtrlSrcLen = 0;
+        if( nContentFlags & 0x00002000 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            *pS >> nCtrlSrcLen;
+        }
 
-            // record header
-            sal_uInt16 nId, nSize;
-            *pS >> nId >> nSize;
-            sal_Size nStartPos = pS->Tell();
-
-            // content flags
-            sal_uInt32 nContentFlags;
-            *pS >> nContentFlags;
-
-            // length of control name
-            sal_uInt32 nNameLen = 0;
-            if( nContentFlags & 0x00000001 )
-                *pS >> nNameLen;
-            // length of control tag
-            sal_uInt32 nTagLen = 0;
-            if( nContentFlags & 0x00000002 )
-                *pS >> nTagLen;
-            // substorage id for frames
-            if( nContentFlags & 0x00000004 )
-                *pS >> rec.nSubStorageId;
-            // help-context id
-            if( nContentFlags & 0x00000008 )
-                pS->SeekRel( 4 );
-            // option flags
-            if( nContentFlags & 0x00000010 )
-            {
-                sal_uInt32 nBitFlags = 0;
-                *pS >> nBitFlags;
-                rec.bVisible = ( ( nBitFlags & 0x02 ) == 0x02 );
-            }
-            // substream size
-            if( nContentFlags & 0x00000020 )
-                *pS >> rec.nSubStreamLen;
-            // tabstop position
-            if( nContentFlags & 0x00000040 )
-                *pS >> rec.nTabPos;
-            // control type
-            if( nContentFlags & 0x00000080 )
-                *pS >> rec.nTypeIdent;
-            if( nContentFlags & 0x00000200 )
-                pS->SeekRel( 4 ); // Grouping?
-            // length of infotip
-            sal_uInt32 nTipLen = 0;
-            if( nContentFlags & 0x00000800 )
-            {
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                *pS >> nTipLen;
-            }
+        // length of row source name
+        sal_uInt32 nRowSrcLen = 0;
+        if( nContentFlags & 0x00004000 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            *pS >> nRowSrcLen;
+        }
 
-            sal_uInt32 nCntrlIdLen = 0;
-            if( nContentFlags & 0x00001000 )
-                *pS >> nCntrlIdLen;
+        ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+        // control name
+        sal_Char* pName = 0;
+        sal_uInt32 nNameBufSize = lclGetBufferSize( nNameLen );
+        if( nNameBufSize > 0 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            pName = new char[ nNameBufSize ];
+            pS->Read( pName, nNameBufSize );
+        }
+        // control tag
+        sal_uInt32 nTagBufSize = lclGetBufferSize( nTagLen );
+        if( nTagBufSize > 0 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            pS->SeekRel( nTagBufSize );
+        }
 
-            // length of control source name
-            sal_uInt32 nCtrlSrcLen = 0;
-            if( nContentFlags & 0x00002000 )
-            {
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                *pS >> nCtrlSrcLen;
-            }
+        // control position
+        if( bPosition )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            *pS >> rec.nLeft >> rec.nTop;
+        }
+   
+        // control infotip
+        sal_uInt32 nTipBufSize = lclGetBufferSize( nTipLen );
+        if( nTipBufSize > 0 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            std::auto_ptr< sal_Char > pTipName;
+            pTipName.reset( new sal_Char[ nTipBufSize ] );
+            pS->Read( pTipName.get(), nTipBufSize );
+            rec.controlTip = lclCreateOUString( pTipName.get(), nTipLen );
+        }
+        // control id
+        sal_uInt32 nCntrlIdSize = lclGetBufferSize( nCntrlIdLen );
+        if( nCntrlIdSize > 0 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            pS->SeekRel( nCntrlIdSize );
+        }
+        // control source name
+        sal_uInt32 nCtrlSrcBufSize = lclGetBufferSize( nCtrlSrcLen );
+        if( nCtrlSrcBufSize > 0 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            std::vector< sal_Char > pCtrlSrcName( nCtrlSrcBufSize );
+            pS->Read( &pCtrlSrcName[0], nCtrlSrcBufSize );
+            rec.sCtrlSource = lclCreateOUString( &pCtrlSrcName[0], nCtrlSrcLen );
+            OSL_TRACE("*** *** *** ControlSourceName -> %s ", rtl::OUStringToOString( rec.sCtrlSource, RTL_TEXTENCODING_UTF8 ).getStr() );
+        }
+        // row source name
+        sal_uInt32 nRowSrcBufSize = lclGetBufferSize( nRowSrcLen );
+        if( nRowSrcBufSize > 0 )
+        {
+            ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+            std::vector< sal_Char > pRowSrcName( nRowSrcBufSize );
+            pS->Read( &pRowSrcName[0], nRowSrcBufSize );
+            rec.sRowSource =  lclCreateOUString( &pRowSrcName[0], nRowSrcLen );
+            OSL_TRACE("*** *** *** RowSourceName -> %s ", rtl::OUStringToOString( rec.sRowSource, RTL_TEXTENCODING_UTF8 ).getStr() );
+        }
 
-            // length of row source name
-            sal_uInt32 nRowSrcLen = 0;
-            if( nContentFlags & 0x00004000 )
-            {
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                *pS >> nRowSrcLen;
-            }
+        ReadAlign( pS, pS->Tell() - nStartPos, 4 );
+        rec.cName = lclCreateOUString(pName, nNameLen);
+        delete[] pName;
+        return true;
+    }
+};
 
-            // control name
-            sal_Char* pName = 0;
-            sal_uInt32 nNameBufSize = lclGetBufferSize( nNameLen );
-            if( nNameBufSize > 0 )
-            {
-                pName = new char[ nNameBufSize ];
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                pS->Read( pName, nNameBufSize );
-            }
-            // control tag
-            sal_uInt32 nTagBufSize = lclGetBufferSize( nTagLen );
-            if( nTagBufSize > 0 )
-            {
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                pS->SeekRel( nTagBufSize );
-            }
+class ContainerRecReader
+{
+    public:
 
-            // control position
-            if( nContentFlags & 0x00000100 )
-            {
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                *pS >> rec.nLeft >> rec.nTop;
-            }
-   
-            // control infotip
-            sal_uInt32 nTipBufSize = lclGetBufferSize( nTipLen );
-            if( nTipBufSize > 0 )
-            {
-                std::auto_ptr< sal_Char > pTipName;
-                pTipName.reset( new sal_Char[ nTipBufSize ] );
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                pS->Read( pTipName.get(), nTipBufSize );
-                rec.controlTip = lclCreateOUString( pTipName.get(), nTipLen );
-            }
-            // control id
-            sal_uInt32 nCntrlIdSize = lclGetBufferSize( nCntrlIdLen );
-            if( nCntrlIdSize > 0 )
-            {
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                pS->SeekRel( nCntrlIdSize );
-            }
-            // control source name
-            sal_uInt32 nCtrlSrcBufSize = lclGetBufferSize( nCtrlSrcLen );
-            if( nCtrlSrcBufSize > 0 )
-            {
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                std::auto_ptr< sal_Char > pCtrlSrcName;
-                pCtrlSrcName.reset( new sal_Char[ nCtrlSrcBufSize ] );
-                pS->Read( pCtrlSrcName.get(), nCtrlSrcBufSize );
-                rec.sCtrlSource = lclCreateOUString( pCtrlSrcName.get(), nCtrlSrcLen );
-                OSL_TRACE("*** *** *** ControlSourceName -> %s ", rtl::OUStringToOString( rec.sCtrlSource, RTL_TEXTENCODING_UTF8 ).getStr() );
-            }
-            // row source name
-            sal_uInt32 nRowSrcBufSize = lclGetBufferSize( nRowSrcLen );
-            if( nRowSrcBufSize > 0 )
-            {
-                ReadAlign( pS, pS->Tell() - nStartPos, 4 );
-                std::auto_ptr< sal_Char > pRowSrcName;
-                pRowSrcName.reset( new sal_Char[ nRowSrcBufSize ] );
-                pS->Read( pRowSrcName.get(), nRowSrcBufSize );
-                rec.sRowSource =  lclCreateOUString( pRowSrcName.get(), nRowSrcLen );
-                OSL_TRACE("*** *** *** RowSourceName -> %s ", rtl::OUStringToOString( rec.sRowSource, RTL_TEXTENCODING_UTF8 ).getStr() );
-            }
+    virtual ~ContainerRecReader() {}
 
-            // seek to end of data
-            pS->Seek( nStartPos + nSize );
+    virtual bool Read( OCX_ParentControl* pContainerControl, SvStorageStream *pS, std::vector< ClassTable >& rSiteClassInfo )
+    {
+        *pS >> nNoRecords;
+        *pS >> nTotalLen;
+        long nStart = pS->Tell();
+        for ( sal_uInt32 nSite = 0; nSite < nNoRecords; )
+        {
+            FormObjectDepthTypeCount siteAndDepth;
+            siteAndDepth.Read( pS );
+            nSite += ( siteAndDepth.OptionalType.get() ? siteAndDepth.TypeOrCount : 1 );
+        }
+        ReadAlign(pS, pS->Tell() - nStart, 4);
 
-            rec.cName = lclCreateOUString(pName, nNameLen);
-            delete[] pName;
+        for (sal_uInt32 nRecord = 0; nRecord < nNoRecords; ++nRecord)
+        {
 
+            ContainerRecord rec;
+            OleSiteConcreteControl site;
+            site.Read( rec, pS );
+            if ( rec.nTypeIdent >= ( UNKNOWNCTRL + 1 ) )
+            {
+                sal_uInt16 nIndex = rec.nTypeIdent - ( UNKNOWNCTRL + 1 );
+                if ( nIndex <  rSiteClassInfo.size() )
+                    rec.nTypeIdent = rSiteClassInfo[ nIndex ].getTypeId();
+            }
             OCX_Control* pControl = NULL;
+           OSL_TRACE("** About to create control of type 0x%x with name %s from rec", rec.nTypeIdent, rtl::OUStringToOString( rec.cName, RTL_TEXTENCODING_UTF8 ).getStr() );
             if( pContainerControl->createFromContainerRecord( rec, pControl ) &&
                 pControl )
             {
@@ -787,7 +976,7 @@ class ContainerRecReader
             else if ( rec.nTypeIdent & 0x8000 )
             {
                 // Skip ActiveX Controls we can't import
-                SotStorageStreamRef oStream = pContainerControl->getContainedControlsStream(); 
+                SotStorageStreamRef oStream = pContainerControl->getOStream(); 
                 ULONG nStrmPos = oStream->Tell();
                 oStream->Seek( nStrmPos + rec.nSubStreamLen );
             }  
@@ -800,91 +989,14 @@ class ContainerRecReader
         return true;
     }
 
+    ContainerRecReader():nNoRecords(0), nTotalLen(0){}
     protected:
-    ContainerRecReader() : isMultiPage(false){}
-    bool isMultiPage;
     sal_uInt32 nNoRecords;
     sal_uInt32 nTotalLen;
 
     private:
-    bool handleStandardHdr( SvStorageStream* pS )
-    {
-        sal_uInt8 aUnknown11[4];
-        pS->Read(aUnknown11, sizeof(aUnknown11));
-        // discovered a dialog with value of 0xFF for aUnknown11 
-        // needed an extra 4 bytes to offset correctly  into the control
-        // records. Valid test or coincidence ?
-        if ( aUnknown11[1] == 0xFF )
-           pS->Read( aUnknown11, sizeof(aUnknown11));
-        return true;
-    }
-
-    bool handleMultiPageHdr( SvStorageStream* pS )
-    {
-        sal_uInt32 nUnknown_32b; // unknown 32 bit structure, flags ?
-        sal_uInt16 nUnknown_16b; // unknown 16 bit structure
-        sal_uInt16 nMysteryLen; // lenght of unknown sub record
-
-        *pS >> nUnknown_32b;
-        *pS >> nUnknown_16b;
-        *pS >> nMysteryLen;
-
-        pS->SeekRel( nMysteryLen );
-        return true;
-    }
-    ContainerRecordList records;
-};
-
-class StdContainerRecReader : public ContainerRecReader
-{
-    public:
-    StdContainerRecReader(){}
-};
-
-class MultiPageContainerRecReader : public ContainerRecReader
-{
-    public:
-    MultiPageContainerRecReader()
-    {
-        // NP ( 27-01-05 )
-        // Strictly speaking this approach shouldn't be necessary.
-        // It should be possible to have a common routine read the
-        // container record array and by examining the flags present in
-        // the record to determine we expect to read or not.
-        // In this case for a MultPage control there is no Top or Left
-        // values in the control record array, however time contraints
-        // and associated risk prevent further investigation of this
-        // at the moment.
-        // similar situation exists for the start of the container record
-        // which in the case of the MultiPage is different from
-        // UserForm & Frame ( the other containers )
-
-        isMultiPage = true; // tell the base class skip
-    }
 };
 
-class ContainerRecordReaderFac
-{
-    public:
-    static ContainerRecReader* instance( sal_uInt32 containerType )
-    {
-        switch( containerType )
-        {
-            case PAGE:
-            case FRAME:
-            case USERFORM:
-            case STDCONTAINER:
-                return new StdContainerRecReader();
-            case MULTIPAGE:
-                return new MultiPageContainerRecReader();
-            default:
-                DBG_ERROR("Illegal container type for factory");
-                return NULL;
-        }
-    }
-    private:
-    ContainerRecordReaderFac();
-};
 
 } // namespace
 
@@ -1097,7 +1209,6 @@ sal_Bool OCX_Control::Import(uno::Reference<container::XNameContainer> &rDialog
         return sal_False;
     
     uno::Any aTmp;
-    sal_Int32 nFactor = 3528; 
 
     if ( !bVBA  )
     {
@@ -3475,8 +3586,15 @@ sal_Bool OCX_Label::Read(SvStorageStream *pS)
     {
         pS->Read(pPictureHeader,20);
         *pS >> nPictureLen;
-        pPicture = new sal_uInt8[nPictureLen];
-        pS->Read(pPicture,nPictureLen);
+        long imagePos = pS->Tell();
+        mxGrfObj = lcl_readGraphicObject( pS );
+        if( mxGrfObj.is() )
+        {
+            sImageUrl = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( GRAPHOBJ_URLPREFIX ) );
+            sImageUrl = sImageUrl + mxGrfObj->getUniqueID();
+        }
+        // make sure the stream position should be pointing after the image
+        pS->Seek( imagePos + nPictureLen );
     }
     if (nIcon)
     {
@@ -3496,165 +3614,6 @@ TypeName::TypeName(sal_Char *pName, sal_uInt32 nStoreId, sal_uInt32 nLen, sal_uI
 {
 }
 
-OCX_ContainerControl::OCX_ContainerControl( SotStorageRef& parent,
-            const ::rtl::OUString& storageName,
-            const ::rtl::OUString& sN,
-            const uno::Reference< container::XNameContainer >  &rParent,
-            OCX_Control* pParent ) :
-                OCX_Control(sN, pParent), mxParent(rParent), nNoRecords(0), nTotalLen(0), containerType( STDCONTAINER )
-{
-
-    mContainerStorage = parent->OpenSotStorage(storageName,
-        STREAM_READWRITE |
-        STREAM_NOCREATE |
-        STREAM_SHARE_DENYALL);
-    mContainerStream = mContainerStorage->OpenSotStream(
-        String(RTL_CONSTASCII_STRINGPARAM("f"),
-        RTL_TEXTENCODING_MS_1252),
-        STREAM_STD_READ | STREAM_NOCREATE);
-    mContainedControlsStream = mContainerStorage->OpenSotStream( String(RTL_CONSTASCII_STRINGPARAM("o"),
-        RTL_TEXTENCODING_MS_1252),
-        STREAM_STD_READ | STREAM_NOCREATE);
-}
-OCX_ContainerControl::~OCX_ContainerControl()
-{
-    CtrlIterator aEnd = mpControls.end();
-    for (CtrlIterator aIter = mpControls.begin(); aIter != aEnd; ++ aIter )
-    {
-        delete *aIter;
-    }
-}
-
-// Really import should receive the parent e.g. a Userform, Frame or Multi Page
-// and call import on its containees with itself  ( up-called from
-// the base class ) but... the reality is we have no containment model
-// so we make sure rPropSet is always the parent Dialog
-
-sal_Bool OCX_ContainerControl::Import(uno::Reference<beans::XPropertySet>& /* rProps */ )
-{
-    if ( !mxParent.is() )
-    {
-        return sal_False;
-    }
-    CtrlIterator aEnd = mpControls.end();
-//    int count = 0;
-    for (CtrlIterator aIter = mpControls.begin(); aIter != aEnd; ++ aIter )
-    {
-        if ( !(*aIter)->Import( mxParent ) )
-        {
-            return sal_False;
-        }
-    }
-    return sal_True;
-}
-
-OUString OCX_ContainerControl::createSubStreamName( const sal_uInt32& subStorageId )
-{
-    static OUString sI = OUString::createFromAscii("i");
-    static OUString sZero = OUString::createFromAscii( "0" );
-    OUStringBuffer buf( 6 );
-    buf.append( sI );
-    // for subStorage id < 10 stream name has leading '0'
-    // eg "i07"
-    if ( subStorageId < 10 )
-    {
-        buf.append( sZero );
-    }
-    buf.append( OUString::valueOf( (sal_Int32)subStorageId ) );
-    return buf.makeStringAndClear();
-}
-
-
-bool OCX_ContainerControl::createFromContainerRecord( ContainerRecord& record, OCX_Control*& pControl )
-{
-    pControl = NULL;
-    if (  record.nTypeIdent & 0x8000 )
-    {
-        std::hash_map<sal_uInt16, sal_uInt16>::iterator it = mActiveXIDMap.find( record.nTypeIdent );
-        if ( it == mActiveXIDMap.end() )
-            return false;
-        // replace the generated id with our hardcoded one
-        record.nTypeIdent = it->second; 
-    }
-    switch ( record.nTypeIdent)
-        {
-            case CMDBUTTON:
-                pControl = new OCX_CommandButton;
-                break;
-            case LABEL:
-                pControl = new OCX_UserFormLabel(this);
-                break;
-            case TEXTBOX:
-                pControl = new OCX_TextBox;
-                break;
-            case LISTBOX:
-                pControl = new OCX_ListBox;
-                break;
-            case COMBOBOX:
-                pControl = new OCX_ComboBox;
-                break;
-            case CHECKBOX:
-                pControl =  new OCX_CheckBox;
-                break;
-            case OPTIONBUTTON:
-                pControl = new OCX_OptionButton;
-                break;
-            case TOGGLEBUTTON:
-                pControl = new OCX_ToggleButton;
-                break;
-            case IMAGE: //Image
-            {
-                pControl = new OCX_Image;
-                break;
-            }
-            case PAGE: // Page
-            {
-                OUString sMSStore = createSubStreamName( record.nSubStorageId );
-                pControl = new OCX_Page(mContainerStorage, sMSStore,
-                    record.cName, mxParent, this);
-                break;
-            }
-            case MULTIPAGE: // MultiPage
-            {
-                OUString sMSStore = createSubStreamName( record.nSubStorageId );
-                pControl = new OCX_MultiPage( mContainerStorage, sMSStore,
-                    record.cName, mxParent, this);
-                break;
-            }
-            case FRAME:  //Frame
-            {
-                OUString sFrameStore = createSubStreamName( record.nSubStorageId );
-                pControl = new OCX_Frame(mContainerStorage, sFrameStore,
-                    record.cName, mxParent, this);
-
-                break;
-            }
-            case SPINBUTTON: //SpinButton
-            {
-                pControl = new OCX_SpinButton;
-                break;
-            }
-            case TABSTRIP: //TabStrip
-            {
-                pControl = new OCX_TabStrip;
-                break;
-            }
-            case SCROLLBAR: //ScrollBar
-                pControl = new OCX_ScrollBar;
-                break;
-            case PROGRESSBAR: //ProgressBar Active X control
-                pControl = new OCX_ProgressBar;
-                break;
-            default:
-                OSL_TRACE( "**** Unknown control 0x%x", record.nTypeIdent );
-                DBG_ERROR( "Unknown control");
-                return false;
-        }
-        pControl->sName = record.cName;
-        return true;
-}
-
-
 void addSeperator( std::vector< OCX_Control* >& dest )
 {
     OCX_Control* seperator = new OCX_CommandButton;
@@ -3678,143 +3637,59 @@ void addRButtons( std::vector< OCX_Control* >& src,
     }
 }
 
-void OCX_ContainerControl::ProcessControl(OCX_Control* pControl,SvStorageStream* /* pS */,  ContainerRecord& rec )
-{
-    SotStorageStreamRef oStream = mContainedControlsStream;
-
-    // can insert into OO Dialog (e.g is this a supported dialog control)??
-    if ( rec.nTypeIdent == TABSTRIP )
-    {
-        // skip the record in the stream, discard the control
-        oStream->SeekRel( rec.nSubStreamLen );
-        delete pControl;
-    }
-    else
-    {
-        // A container control needs to read the f stream in
-        // the folder ( substorage ) associated with this control
-        switch ( rec.nTypeIdent )
-        {
-            case FRAME:
-            case MULTIPAGE:
-            case PAGE:
-                {
-                    OCX_ContainerControl* pContainer =
-                        static_cast< OCX_ContainerControl* >( pControl );
-                    oStream = pContainer->getContainerStream();
-                    break;
-                }
-            case LISTBOX:
-            case OPTIONBUTTON:
-            case COMBOBOX:
-			case SPINBUTTON:
-			case SCROLLBAR:
-                {
-                    pControl->msCtrlSource = rec.sCtrlSource;
-                    pControl->msRowSource = rec.sRowSource;
-                }
-        }
-        pControl->sName = rec.cName;
-        pControl->msToolTip = rec.controlTip;
-        // Position of controls is relative to the container
-        pControl->mnTop = rec.nTop + mnTop;
-        pControl->mnLeft = rec.nLeft + mnLeft;
-        // MS tabIndex, pretty useless in OpenOffice land
-        // as tab indexes in MS are relative to parent container.
-        // However we need this value in order to set
-        // OpenOffice tab indices in a sensible way to
-        // reflect the ms tabbing from orig MS UserForm, see below
-        pControl->mnTabPos = rec.nTabPos;
-        pControl->SetInDialog(true);
-        pControl->mbVisible = rec.bVisible;
-        if ( mnStep )
-        {
-            // If the container has a step then it should be
-            // applied to all containees
-            pControl->mnStep = mnStep;
-        }
-        pControl->msParentName = sName;
-
-        // #117490# DR: container records provide size of substream, use it here...
-
-        // remember initial position to set correct stream position
-        ULONG nStrmPos = oStream->Tell();
-        // import control, may return with invalid stream position
-        pControl->FullRead(oStream);
-        // set stream to position behind substream of this control
-        oStream->Seek( nStrmPos + rec.nSubStreamLen );
-
-        mpControls.push_back( pControl );
-    }
-}
-
-sal_Bool OCX_ContainerControl::Read(SvStorageStream *pS)
-{
-
-    if ( mpParent )
-    {
-        mnBackColor = mpParent->mnBackColor;
-    }
-
-    std::auto_ptr< ContainerRecReader > reader (
-        ContainerRecordReaderFac::instance( containerType ) );
-
-    reader->Read( this, pS );
-    // Need to honour the MS Tab Indexes. However MS tab indexes are
-    // relative to parent, this hack sorts the controls in each container
-    // based on the ms tab indexes. When import is called we create the
-    // controls in Open/Star office based on the order of the tab indexes,
-    // this ensures that the default tab index created by Star/Open office
-    // reflects the "flattened" ms tab order.
-    ::std::sort( mpControls.begin(), mpControls.end(), SortOrderByTabPos() );
-    return true;
-}
-
 OCX_MultiPage::OCX_MultiPage( SotStorageRef& parent,
             const ::rtl::OUString& storageName,
             const ::rtl::OUString& sN,
             const uno::Reference< container::XNameContainer >  &rDialog,
             OCX_Control* pParent):
-        OCX_ContainerControl(parent, storageName, sN, rDialog, pParent ), fUnknown1(0), fEnabled(1),
-        fLocked(0), fBackStyle(1), fWordWrap(1), fAutoSize(0), nCaptionLen(0),
-        nVertPos(1), nHorzPos(7), nMousePointer(0), nBorderColor(0x80000012),
-        nKeepScrollBarsVisible(3), nCycle(0), nBorderStyle(0), nSpecialEffect(0),
-        nPicture(0), nPictureAlignment(2), nPictureSizeMode(0),
-        bPictureTiling(FALSE), nAccelerator(0), nIcon(0), pCaption(0),
-        nScrollWidth(0), nScrollHeight(0), nIconLen(0), pIcon(0), nPictureLen(0),
-        pPicture(0)
-{
-    //msDialogType = C2U("NotSupported");
+		OCX_ParentControl(parent, storageName, sN, rDialog, pParent ), bHasTabs( true )
+{
     msDialogType = C2U("com.sun.star.awt.UnoMultiPageModel");
     mnForeColor = 0x80000012L,
     mnBackColor = 0x8000000FL;
     bSetInDialog = true;// UserForm control only
     aFontData.SetHasAlign(TRUE);
-    containerType = MULTIPAGE;
-    mnCurrentPageStep = 0;
+    nActiveTab = 0;
+    // open up the 'x' stream
+    mXStream = mContainerStorage->OpenSotStream(
+        String(RTL_CONSTASCII_STRINGPARAM("x"),
+        RTL_TEXTENCODING_MS_1252),
+        STREAM_STD_READ | STREAM_NOCREATE);
 }
 
 void OCX_MultiPage::ProcessControl(OCX_Control* pControl, SvStorageStream* /* pS */,  ContainerRecord& rec )
 {
     SotStorageStreamRef oStream = mContainedControlsStream;
 
-    OCX_Page *pPage = NULL;
-    if ( rec.nTypeIdent == PAGE )
-        pPage = static_cast< OCX_Page* >( pControl );
-    if ( pPage != NULL )
+    if ( rec.nTypeIdent == TABSTRIP )
     {
-        pPage->mnStep = ++mnCurrentPageStep;
-
-        pPage->mnTop =  mnTop;// move these to Page::import ?
-        pPage->mnLeft = mnLeft;
-        pPage->mnBackColor = mnBackColor;
-
-        oStream = pPage->getContainerStream();;
-        // Position of controls is relative to pos of this MuliPage
-        // Control
-        pPage->FullRead( oStream );
-
-        mpControls.push_back( pPage );
+        // TabStrip reads the 'o' stream
+        OCX_TabStrip oTabStrip;
+        oTabStrip.sName = C2S("FromMultiPage-o");
+        oTabStrip.Read( mContainedControlsStream );
+        sCaptions = oTabStrip.msItems;
+        bHasTabs = oTabStrip.bHasTabs;
+        nHeight = oTabStrip.nHeight; 
+        nWidth = oTabStrip.nWidth; 
+    }
+    else if ( rec.nTypeIdent == PAGE )
+    {
+        OCX_Page *pPage = NULL;
+        pPage = static_cast< OCX_Page* >( pControl );
+        if ( pPage != NULL )
+        {
+            oStream = pPage->getContainerStream();;
+            // Position of controls is relative to pos of this MuliPage
+            // Control
+            pPage->FullRead( oStream );
+            // nWidth & nHeight seem to screw up multipage control
+            pPage->nWidth = 0;
+            pPage->nHeight = 0;
+            pPage->mnBackColor = mnBackColor;
+    
+            mpControls.push_back( pPage );
+            idToPage[ pPage->mnID ] = pPage;
+        }
     }
     else
     {
@@ -3828,110 +3703,79 @@ sal_Bool OCX_MultiPage::Read(SvStorageStream *pS)
 {
     // Unlike the other containers e.g. UserForm & Frame
     // the o stream is does not contain info for the contained controls
-    // ( e.g. the pages themselves ) but seems to be for the MultiPage
-    // itself - need to check this in more detail
-
-    // For the moment skip read of the MultiPage specific properties
-    // not much point reading these as we can't display the multi page
-    // control or in fact any sort of tabbed layout, best we can do is
-    // import just the contained controls of the individual pages
-    // Note: the record skipped below ( does not contain the expected
-    // info on this control, that seems to be contained in the o stream,
-    // see comment above)
+    // 'o' stream contains a tabstrip control
+    // 'f' stream as usual ( info about the containees )
+    // '01..09' ( etc. ) these streams contain the page controls
+    // 'x' stream, this contains an array of properties for each page followed
+    //    by a set of properties for the multipage control itself
+
+    // read the 'f' stream
+    OCX_ParentControl::Read(pS);
+
+    // Read the 'x' stream
+    // consists of 
+    //   a) nTabs + 1 PageProperties ( which are little use to us ) 
+    //      => skip
+    //   b) a MutliPageProperty ( which contains at least the page count and 
+    //       IDs of the pages ( and order ) - useful for associating correct page
+    //       with correct tab
+
     OCX_Control skip(C2S("Dummy"));
-    skip.Read( pS );
-    mnCurrentPageStep = mnStep; //( set step of of pages relative to step
-                                //of this MultiPage ( e.g. emulate containment )
-    return OCX_ContainerControl::Read(pS);
+    sal_Int32 nPagePropsToRead = sCaptions.size() + 1;
+    for ( sal_Int32 page = 0; page < nPagePropsToRead; ++page )
+        skip.Read( mXStream ); 
+    MultiPageProps multiPage;
+    multiPage.Read( mXStream );
+    mPageIds = multiPage.mnIDs;
+    return true;
 }
 
 
 sal_Bool OCX_MultiPage::Import(com::sun::star::uno::Reference<
     com::sun::star::beans::XPropertySet> &rPropSet)
 {
-    OCX_ContainerControl::Import( rPropSet );
-    return sal_True;
-}
-
-sal_Bool OCX_MultiPage::Import(com::sun::star::uno::Reference<
-        com::sun::star::container::XNameContainer>
-        &rDialog)
-{
-    uno::Reference<beans::XPropertySet> xPropSet( rDialog, uno::UNO_QUERY );
-
-    // Although MultiPage is not represeted by a "real" control we still
-    // need to propagate the backcolor of this logical parent
-    // ( the dialog or Frame or whatever ) to the children of this control.
-    // For example the controls contained in the Page of a
-    // MultiPage control use the parents backcolor ( e,g,
-    // Pages backcolor ) when trying to fake transparency
-    mnBackColor = mpParent->mnBackColor;
-
-    if ( xPropSet.is() )
-    {
-        uno::Reference<lang::XMultiServiceFactory>
-            xFactory(rDialog, uno::UNO_QUERY);
-	OSL_TRACE("** MultiPage creating control %s", rtl::OUStringToOString( msDialogType, RTL_TEXTENCODING_UTF8 ).getStr() );
-	uno::Reference<uno::XInterface> xCreate = xFactory->createInstance(msDialogType);
-	if (!xCreate.is())
-		return sal_False;
-
-	uno::Reference<awt::XControlModel> xModel(xCreate, uno::UNO_QUERY);
-	if (!xModel.is())
-		return sal_False;
-
-        try
-        {
-		// we should just call MultiPage::Import( XPropertySet )
-    		OSL_TRACE("********* MULTIPAGE cName %s", rtl::OUStringToOString( sName, RTL_TEXTENCODING_UTF8 ).getStr() );
-		uno::Any aTmp(&sName,getCppuType((OUString *)0));
-		uno::Reference<beans::XPropertySet> xPrps(xModel, uno::UNO_QUERY);
-		xPrps->setPropertyValue( WW8_ASCII2STR("Name"), aTmp );
-		aTmp = uno::makeAny( mnCurrentPageStep );
-		xPrps->setPropertyValue( WW8_ASCII2STR("ProgressValueMax"), aTmp );
-		// default current page to 0 ( #FIXME, we need to read this value )
-		aTmp = uno::makeAny( sal_Int32(0) );
-		xPrps->setPropertyValue( WW8_ASCII2STR("ProgressValue"), aTmp );
-    		OSL_TRACE("********* MULTIPAGE vomitted out properties");
-
+    uno::Any aTmp(&sName,getCppuType((OUString *)0));    
+    rPropSet->setPropertyValue(
+        OUString(RTL_CONSTASCII_USTRINGPARAM("Name")), aTmp);
+    if ( !bHasTabs )
+        rPropSet->setPropertyValue(
+            OUString(RTL_CONSTASCII_USTRINGPARAM("Decoration")), uno::makeAny( sal_False ) );
+    aTmp <<= ImportColor(mnBackColor);
+	rPropSet->setPropertyValue( WW8_ASCII2STR("BackgroundColor"), aTmp);
+    // apply caption/titles to pages
+ 
     // Calls import on contained controls
-            rDialog->insertByName(sName, uno::makeAny(xModel));
-            OSL_TRACE("*** inserted ***");
-        }
-        catch( uno::Exception& )
+    std::vector<sal_Int32>::iterator itCtrlId = mPageIds.begin();
+    std::vector<sal_Int32>::iterator itCtrlId_end = mPageIds.end();
+    std::vector< rtl::OUString >::iterator  itCaption = sCaptions.begin();
+    mpControls.clear();
+    // need to sort the controls according to the order of the ids
+    for ( sal_Int32 index = 1 ; ( sCaptions.size() == idToPage.size() ) && itCtrlId != itCtrlId_end; ++itCtrlId, ++itCaption, ++index )
+    {
+        std::hash_map< sal_Int32, OCX_Page* >::iterator it = idToPage.find( *itCtrlId );
+        if ( it != idToPage.end() )
         {
-            DBG_ERRORFILE(
-                ByteString( "OCX_Control::Import - cannot insert control \"" ).
-                Append( ByteString( sName, RTL_TEXTENCODING_UTF8 ) ).
-                Append( '"' ).GetBuffer() );
+            it->second->msTitle = *itCaption;
+            if ( it->second->mbVisible )
+                nActiveTab = index; 
+            mpControls.push_back( it->second );
+            
         }
-
-        // Calls import on contained pages
-        return OCX_ContainerControl::Import( xPropSet );
     }
-    OSL_TRACE("*** Major problem, no dialog to add controls to ");
-    DBG_ERROR(" Major problem, no dialog to add controls to ");
-    return false;
-}
-
 
+    OCX_ParentControl::Import( rPropSet );
+    rPropSet->setPropertyValue( WW8_ASCII2STR("MultiPageValue"), uno::makeAny( nActiveTab ));
+    return sal_True;
+}
 
 OCX_Page::OCX_Page( SotStorageRef& parent,
-            const ::rtl::OUString& storageName,
+            sal_Int32 nId,
             const ::rtl::OUString& sN,
             const uno::Reference< container::XNameContainer >  &rDialog,
             OCX_Control* pParent):
-        OCX_ContainerControl(parent, storageName, sN, rDialog, pParent ),
-        fUnknown1(0), fEnabled(1), fLocked(0),
-        fBackStyle(1), fWordWrap(1), fAutoSize(0), nCaptionLen(0), nVertPos(1),
-        nHorzPos(7), nMousePointer(0), nBorderColor(0x80000012),
-        nKeepScrollBarsVisible(3), nCycle(0), nBorderStyle(0), nSpecialEffect(0),
-        nPicture(0), nPictureAlignment(2), nPictureSizeMode(0),
-        bPictureTiling(FALSE), nAccelerator(0), nIcon(0), pCaption(0),
-        nScrollWidth(0), nScrollHeight(0), nIconLen(0), pIcon(0), nPictureLen(0),
-        pPicture(0)
-{
-    msDialogType = C2U("NotSupported");
+		OCX_ParentControl(parent, createSubStreamName( nId ), sN, rDialog, pParent ), mnID( nId )
+{
+    msDialogType = C2U("com.sun.star.awt.UnoPageModel");
     mnForeColor = 0x80000012,
     mnBackColor = 0x8000000F,
     bSetInDialog = true;// UserForm control only
@@ -3941,65 +3785,34 @@ OCX_Page::OCX_Page( SotStorageRef& parent,
 
 sal_Bool OCX_Page::Read(SvStorageStream *pS)
 {
-    long nStart = pS->Tell();
-    *pS >> nIdentifier;
-    DBG_ASSERT(0x400==nIdentifier,
-            "A control that has a different identifier");
-    *pS >> nFixedAreaLen;
-    pS->Read(pBlockFlags,4);
-
-    pS->SeekRel( nFixedAreaLen - sizeof( pBlockFlags ) );
-
-    ReadAlign( pS, pS->Tell() - nStart, 4);
-
-    if (pBlockFlags[2] & 0x10)
-    {
-        //Font Stuff..
-        pS->SeekRel(0x1a);
-        sal_uInt8 nFontLen;
-        *pS >> nFontLen;
-        pS->SeekRel(nFontLen);
-    }
-    return OCX_ContainerControl::Read(pS);
-
+    return OCX_ParentControl::Read(pS);
 }
 
 sal_Bool OCX_Page::Import(com::sun::star::uno::Reference<
-        com::sun::star::container::XNameContainer>
-        &rDialog)
+		com::sun::star::beans::XPropertySet>
+		&rPropSet)
 {
+    uno::Any aTmp(&sName,getCppuType((OUString *)0));
+    rPropSet->setPropertyValue(
+        OUString(RTL_CONSTASCII_USTRINGPARAM("Name")), aTmp);
 
-    uno::Reference<beans::XPropertySet> xPropSet( rDialog, uno::UNO_QUERY );
-    if ( xPropSet.is() )
-    {
-        // apply Step to contained controls
-        CtrlIterator aEnd = mpControls.end();
-        for (CtrlIterator aIter = mpControls.begin(); aIter != aEnd; ++ aIter )
-        {
-            (*aIter)->mnStep = mnStep;
-        }
-        // Calls import on contained pages
-        return OCX_ContainerControl::Import( xPropSet );
-    }
-    OSL_TRACE("*** Major problem, no dialog to add controls to ");
-    DBG_ERROR("*** Major problem, no dialog to add controls to ");
-    return sal_False;
+    if (msTitle.getLength())
+        rPropSet->setPropertyValue( WW8_ASCII2STR("Title"), uno::makeAny( msTitle ) );
+
+    aTmp <<= ImportColor(mnBackColor);
+    rPropSet->setPropertyValue( WW8_ASCII2STR("BackgroundColor"), aTmp);
+
+    // Calls import on contained controls
+    OCX_ParentControl::Import( rPropSet );
+    return sal_True;
 }
 
 OCX_Frame::OCX_Frame( SotStorageRef& parent,
             const ::rtl::OUString& storageName,
             const ::rtl::OUString& sN,
-            const uno::Reference< container::XNameContainer >  &rDialog, OCX_Control* pParent):
-        OCX_ContainerControl(parent, storageName, sN, rDialog, pParent ),fUnknown1(0),fEnabled(1), fLocked(0),
-        fBackStyle(1), fWordWrap(1), fAutoSize(0), nCaptionLen(0), nVertPos(1),
-        nHorzPos(7), nMousePointer(0), nBorderColor(0x80000012),
-        nKeepScrollBarsVisible(3), nCycle(0), nBorderStyle(0), nSpecialEffect(0),
-        nPicture(0), nPictureAlignment(2), nPictureSizeMode(0),
-        bPictureTiling(FALSE), nAccelerator(0), nIcon(0), pCaption(0),
-        nScrollWidth(0), nScrollHeight(0), nScrollLeft(0), nScrollTop(0), nIconLen(0), pIcon(0), nPictureLen(0),
-        pPicture(0)
-{
-    msDialogType = C2U("com.sun.star.awt.UnoControlGroupBoxModel");
+            const uno::Reference< container::XNameContainer >  &rDialog, OCX_Control* pParent): OCX_ParentControl(parent, storageName, sN, rDialog, pParent )
+{
+    msDialogType = C2U("com.sun.star.awt.UnoFrameModel");
     mnForeColor = 0x80000012;
     mnBackColor = 0x8000000F;
     bSetInDialog = true;// UserForm control only
@@ -4009,159 +3822,7 @@ OCX_Frame::OCX_Frame( SotStorageRef& parent,
 
 sal_Bool OCX_Frame::Read(SvStorageStream *pS)
 {
-    long nStart = pS->Tell();
-    *pS >> nIdentifier;
-    DBG_ASSERT(0x400==nIdentifier,
-            "A control that has a different identifier");
-    *pS >> nFixedAreaLen;
-    pS->Read(pBlockFlags,4);
-
-    if (pBlockFlags[0] & 0x01)
-    {
-            DBG_ASSERT(!this, "ARSE");
-    }
-    if (pBlockFlags[0] & 0x02)
-            *pS >> mnBackColor;
-    if (pBlockFlags[0] & 0x04)
-            *pS >> mnForeColor;
-    if (pBlockFlags[0] & 0x08)
-        *pS >> fUnknown1;
-    if (pBlockFlags[0] & 0x40)
-    {
-        sal_uInt8 nTemp;
-        *pS >> nTemp;
-        fEnabled = (nTemp&0x04)>>2;
-        fBackStyle = (nTemp&0x08)>>3;
-        *pS >> nTemp;
-        *pS >> nTemp;
-        fWordWrap = (nTemp&0x80)>>7;
-        *pS >> nTemp;
-        fAutoSize = (nTemp&0x10)>>4;
-    }
-    if (pBlockFlags[0] & 0x80)
-    {
-        *pS >> nBorderStyle;
-    }
-
-    ReadAlign(pS, pS->Tell() - nStart, 4);
-
-    if (pBlockFlags[1] & 0x01)
-        *pS >> nMousePointer;
-    if (pBlockFlags[1] & 0x02)
-        *pS >> nKeepScrollBarsVisible;
-    if (pBlockFlags[1] & 0x20)
-        *pS >> fUnknown1; // another unknown 32 bit ( or is 8 or 16 bit with padding ? )
-
-    if (pBlockFlags[1] & 0x80)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 2);
-        *pS >> nIcon;
-        DBG_ASSERT(nIcon == 0xFFFF, "Unexpected nIcon");
-    }
-
-    bool bCaption = false;
-
-    if (pBlockFlags[2] & 0x01)
-        *pS >> nCycle;
-    if (pBlockFlags[2] & 0x02)
-        *pS >> nSpecialEffect;
-
-    if (pBlockFlags[2] & 0x04)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 4);
-        *pS >> nBorderColor;
-    }
-
-    if (pBlockFlags[2] & 0x08)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 4);
-        *pS >> nCaptionLen;
-        bCaption = true;
-    }
-
-    if (pBlockFlags[2] & 0x10)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 2);
-        sal_uInt16 nNoIdea;
-        *pS >> nNoIdea;
-        DBG_ASSERT(nNoIdea == 0xFFFF, "Expected 0xFFFF, (related to font ?)");
-    }
-
-    if (pBlockFlags[2] & 0x20)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 2);
-        *pS >> nPicture;
-        DBG_ASSERT(nPicture == 0xFFFF, "Unexpected nIcon");
-    }
-
-    if (pBlockFlags[2] & 0x80)
-        *pS >> nPictureAlignment;
-
-    if (pBlockFlags[3] & 0x01)
-        bPictureTiling = true;
-
-    if (pBlockFlags[3] & 0x02)
-        *pS >> nPictureSizeMode;
-
-    if (pBlockFlags[3] & 0x04)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 4);
-        *pS >> fUnknown8;
-    }
-
-    if (pBlockFlags[3] & 0x08)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 4);
-        *pS >> fUnknown9;
-    }
-
-    ReadAlign(pS, pS->Tell() - nStart, 4);
-    *pS >> nWidth;
-    *pS >> nHeight;
-    *pS >> nScrollWidth;
-    *pS >> nScrollHeight;
-
-    if (pBlockFlags[1] & 0x10)
-    {
-        *pS >> nScrollLeft;
-        *pS >> nScrollTop;
-    }
-
-    if ( bCaption )
-    {
-        lclReadCharArray( *pS, pCaption, nCaptionLen, pS->Tell() - nStart);
-    }
-
-    OUString tempCaption =  lclCreateOUString( pCaption, nCaptionLen );
-
-    if (nIcon)
-    {
-        pS->Read(pIconHeader,20);
-        *pS >> nIconLen;
-        pIcon = new sal_uInt8[nIconLen];
-        pS->Read(pIcon,nIconLen);
-    }
-
-    if (nPicture)
-    {
-        pS->Read(pPictureHeader,20);
-        *pS >> nPictureLen;
-        pPicture = new sal_uInt8[nPictureLen];
-        pS->Read(pPicture,nPictureLen);
-    }
-
-    ReadAlign( pS, pS->Tell() - nStart, 4);
-
-    if (pBlockFlags[2] & 0x10)
-    {
-        //Font Stuff..
-        pS->SeekRel(0x1a);
-        sal_uInt8 nFontLen;
-        *pS >> nFontLen;
-        pS->SeekRel(nFontLen);
-    }
-
-    return OCX_ContainerControl::Read( pS );
+    return OCX_ParentControl::Read( pS );
 }
 
 sal_Bool OCX_Frame::Import(com::sun::star::uno::Reference<
@@ -4175,196 +3836,28 @@ sal_Bool OCX_Frame::Import(com::sun::star::uno::Reference<
         aTmp <<= lclCreateOUString( pCaption, nCaptionLen );
         rPropSet->setPropertyValue( WW8_ASCII2STR("Label"), aTmp);
     }
++/*
++    aTmp <<= ImportColor(mnBackColor);
++    rPropSet->setPropertyValue( WW8_ASCII2STR("BackgroundColor"), aTmp);
++*/
 
     // Calls import on contained controls
-    OCX_ContainerControl::Import( rPropSet );
+    OCX_ParentControl::Import( rPropSet );
     return sal_True;
 }
+
 OCX_UserForm::OCX_UserForm( SotStorageRef& parent,
             const OUString& storageName,
             const OUString& sN,
             const ::uno::Reference< container::XNameContainer >  &rDialog,
             const ::uno::Reference< lang::XMultiServiceFactory >& rMsf):
-        OCX_ContainerControl(parent, storageName, sN, rDialog),
-        nChildrenA(0), fEnabled(1), fLocked(0),
-        fBackStyle(1), fWordWrap(1), fAutoSize(0), nCaptionLen(0), nVertPos(1),
-        nHorzPos(7), nMousePointer(0), nBorderColor(0x80000012), nChildrenB(0),
-        nKeepScrollBarsVisible(3), nCycle(0), nBorderStyle(0), nSpecialEffect(0),
-        nPicture(0), nPictureAlignment(2), nPictureSizeMode(0),
-        bPictureTiling(FALSE), nAccelerator(0), nIcon(0), pCaption(0),
-		nScrollWidth(0), nScrollHeight(0), nScrollLeft(0), nScrollTop(0), nIconLen(0), pIcon(0), nPictureLen(0)
-    {
-            mnForeColor = 0x80000012;
-            mnBackColor = 0x8000000F;
-            uno::Reference< beans::XPropertySet> xProps( rMsf, uno::UNO_QUERY);
-            if ( xProps.is() )
-            {
-                xProps->getPropertyValue(C2S("DefaultContext"))  >>= mxCtx;
-            }
-            aFontData.SetHasAlign(TRUE);
-        }
-sal_Bool OCX_UserForm::Read(SvStorageStream *pS)
+		OCX_ParentControl(parent, storageName, sN, rDialog )
 {
-    long nStart = pS->Tell();
-    *pS >> nIdentifier;
-    DBG_ASSERT(0x400==nIdentifier,
-            "A control that has a different identifier");
-    *pS >> nFixedAreaLen;
-    pS->Read(pBlockFlags,4);
-
-    if (pBlockFlags[0] & 0x01)
-    {
-            DBG_ASSERT(!this, "ARSE");
-    }
-    if (pBlockFlags[0] & 0x02)
-        *pS >> mnBackColor;
-    if (pBlockFlags[0] & 0x04)
-        *pS >> mnForeColor;
-    if (pBlockFlags[0] & 0x08)
-        *pS >> nChildrenA;
-    if (pBlockFlags[0] & 0x40)
-    {
-        sal_uInt8 nTemp;
-        *pS >> nTemp;
-        fEnabled = (nTemp&0x04)>>2;
-        fBackStyle = (nTemp&0x08)>>3;
-        *pS >> nTemp;
-        *pS >> nTemp;
-        fWordWrap = (nTemp&0x80)>>7;
-        *pS >> nTemp;
-        fAutoSize = (nTemp&0x10)>>4;
-    }
-    if (pBlockFlags[0] & 0x80)
+    uno::Reference< beans::XPropertySet> xProps( rMsf, uno::UNO_QUERY);
+    if ( xProps.is() )
     {
-        ReadAlign(pS, pS->Tell() - nStart, 4);
-        *pS >> nBorderStyle;
+        xProps->getPropertyValue(C2S("DefaultContext"))  >>= mxCtx;
     }
-#if 0
-        sal_uInt16 nFixedOrAlign;
-        *pS >> nFixedOrAlign;
-#endif
-    if (pBlockFlags[1] & 0x01)
-        *pS >> nMousePointer;
-    if (pBlockFlags[1] & 0x02)
-        *pS >> nKeepScrollBarsVisible;
-    if (pBlockFlags[1] & 0x20)
-    {
-        sal_uInt32 nUnknown32;
-        *pS >> nUnknown32;
-    }
-    if (pBlockFlags[1] & 0x80)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 2);
-        *pS >> nIcon;
-        DBG_ASSERT(nIcon == 0xFFFF, "Unexpected nIcon");
-    }
-    if (pBlockFlags[2] & 0x01)
-        *pS >> nCycle;
-    if (pBlockFlags[2] & 0x02)
-        *pS >> nSpecialEffect;
-
-    if (pBlockFlags[2] & 0x04)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 4);
-        *pS >> nBorderColor;
-    }
-
-    if (pBlockFlags[2] & 0x10)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 2);
-        sal_uInt16 nNoIdea;
-        *pS >> nNoIdea;
-        DBG_ASSERT(nNoIdea == 0xFFFF, "Expected 0xFFFF, (related to font ?)");
-    }
-
-    if (pBlockFlags[2] & 0x20)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 2);
-        *pS >> nPicture;
-        DBG_ASSERT(nPicture == 0xFFFF, "Unexpected nIcon");
-    }
-
-    if (pBlockFlags[2] & 0x80)
-        *pS >> nPictureAlignment;
-
-    if (pBlockFlags[3] & 0x01)
-        bPictureTiling = true;
-
-    if (pBlockFlags[3] & 0x02)
-        *pS >> nPictureSizeMode;
-
-    if (pBlockFlags[3] & 0x04)
-    {
-        ReadAlign(pS, pS->Tell() - nStart, 4);
-        *pS >> nChildrenB;
-    }
-
-    ReadAlign(pS, pS->Tell() - nStart, 4);
-    *pS >> nDrawBuffer;
-
-    ReadAlign(pS, pS->Tell() - nStart, 4);
-    *pS >> nWidth;
-    *pS >> nHeight;
-    *pS >> nScrollWidth;
-    *pS >> nScrollHeight;
-
-    if (pBlockFlags[1] & 0x10)
-    {
-        *pS >> nScrollLeft;
-        *pS >> nScrollTop;
-    }
-
-    if (nIcon)
-    {
-        pS->Read(pIconHeader,20);
-        *pS >> nIconLen;
-        pIcon = new sal_uInt8[nIconLen];
-        pS->Read(pIcon,nIconLen);
-    }
-
-	ReadAlign( pS, pS->Tell() - nStart, 4);
-	if (pBlockFlags[2] & 0x10)
-	{
-		//Font Stuff..
-		pS->SeekRel(0x1a);
-		sal_uInt8 nFontLen;
-		*pS >> nFontLen;
-		pS->SeekRel(nFontLen);
-	}
-    if (nPicture)
-    {
-        pS->Read(pPictureHeader,20);
-        *pS >> nPictureLen;
-		long imagePos = pS->Tell();
-		// great embedded object
-		mxGrfObj = lcl_readGraphicObject( pS );
-		if( mxGrfObj.is() )
-		{
-			sImageUrl = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( GRAPHOBJ_URLPREFIX ) );
-			sImageUrl = sImageUrl + mxGrfObj->getUniqueID();
-		}
-		// make sure the stream position should be pointing after the image.
-		pS->Seek( imagePos + nPictureLen );
-	}
-
-    sal_Int16 numTrailingRecs = 0;
-    *pS >> numTrailingRecs;
-    // seems to be no. of trailing records,
-    // before container record starts proper
-    // ( unknown what these trailing records are for)
-    if ( numTrailingRecs )
-    {
-        for ( sal_Int16 i = 0 ; numTrailingRecs ; --numTrailingRecs, ++i )
-        {
-            sal_uInt16 nTypeID = 0;
-            if ( lcl_handleActiveXControl( pS, nTypeID ) )
-            {
-                if ( nTypeID & 0x8000 ) // valid ActiveXID
-                    mActiveXIDMap[ ( i | 0x8000 ) ] = nTypeID;
-            }
-        }
-    }
-    return OCX_ContainerControl::Read( pS );
 }
 
 sal_Bool OCX_UserForm::Import(
@@ -4391,7 +3884,7 @@ sal_Bool OCX_UserForm::Import(
     catch( uno::Exception& e )
     {
     }
-    sal_Int32 nFactor( 3528 );
+
     if ( !bVBA )
     {
         aTmp <<= sal_Int32((nWidth * 2) / 100); 
@@ -4407,30 +3900,23 @@ sal_Bool OCX_UserForm::Import(
         xDialogPropSet->setPropertyValue(WW8_ASCII2STR("Height"), aTmp);
     }
 
+    if ( sImageUrl.getLength() )
+    {
+        aTmp <<= sImageUrl;
+        xDialogPropSet->setPropertyValue( WW8_ASCII2STR("ImageURL"), aTmp);
+    }
 
     uno::Reference<beans::XPropertySet> xPropSet( mxParent, uno::UNO_QUERY );
-    OCX_ContainerControl::Import( xPropSet );
-
-    uno::Reference<io::XInputStreamProvider> xSource =
-        xmlscript::exportDialogModel(mxParent, mxCtx, pDocSh->GetModel() );
+    OCX_ParentControl::Import( xPropSet );
+    uno::Reference< frame::XModel > xModel(  pDocSh ? pDocSh->GetModel() : NULL );
+   uno::Reference<io::XInputStreamProvider> xSource =
+        xmlscript::exportDialogModel(mxParent, mxCtx, xModel );
     uno::Any aSourceAny(uno::makeAny(xSource));
     if (rLib->hasByName(sName))
         rLib->replaceByName(sName, aSourceAny);
     else
         rLib->insertByName(sName, aSourceAny);
 
-    if ( sImageUrl.getLength() )
-    {
-        aTmp <<= sImageUrl;
-		try
-		{
-        	xDialogPropSet->setPropertyValue( WW8_ASCII2STR("ImageURL"), aTmp);
-		}
-		catch( uno::Exception& )
-		{
-			OSL_TRACE("OCX_UserForm::Import, Image fails to import");
-		}
-    }
     return sal_True;
 }
 
@@ -4978,6 +4464,11 @@ sal_Bool OCX_CheckBox::Import(com::sun::star::uno::Reference<
     rPropSet->setPropertyValue( WW8_ASCII2STR("VerticalAlign"), aTmp );
 
     aFontData.Import(rPropSet);
+    if ( sImageUrl.getLength() )
+    {
+        aTmp <<= sImageUrl;
+        rPropSet->setPropertyValue( WW8_ASCII2STR("ImageURL"), aTmp);
+    }
     return(sal_True);
 }
 
@@ -5345,33 +4836,238 @@ sal_Bool OCX_FontData::Export(SvStorageStreamRef &rContent,
 // record.
 sal_Bool OCX_TabStrip::Read(SotStorageStream *pS)
 {
-    const long skipLen = 0x18;
+    long nStart = pS->Tell();
     *pS >> nIdentifier;
     DBG_ASSERT(nStandardId==nIdentifier,
         "A control that has a different identifier");
     *pS >> nFixedAreaLen;
 
     pS->Read(pBlockFlags, sizeof(pBlockFlags));
-    pS->SeekRel(skipLen);
-    *pS >> nNumTabs;
-    // skip to end of control
-    pS->SeekRel(nFixedAreaLen - sizeof(pBlockFlags) - sizeof(nNumTabs) - skipLen );
-    return sal_True;
-}
 
-sal_Bool OCX_TabStrip::ReadFontData(SotStorageStream *pS)
-{
-    // Seems like there is a real font record followed by
-    // a number of blank records ( e.g. nFixedAreaLen = 0 )
-    // The number of trailing blank records is equal to the number of tabs
-    OCX_Control::ReadFontData(pS);
-    for ( sal_uInt16 index = 0; index < nNumTabs; index++ )
+    bool bSize = false;
+    bool bMultiRow = false;
+    bool bTooltips = true;
+    bool hasEmbeddedImage = false;
+    sal_Int32 nameSize = 0;
+    sal_Int32 tipStringSize = 0;
+    sal_Int32 nAcceleratorSize = 0;
+    sal_Int32 nItemSize = 0;
+    sal_Int32 nTagSize = 0;
+    if ( pBlockFlags[ 0 ] & 0x01 )
+    {
+        //List index
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        sal_Int32 nOptional32 = 0; // 
+        *pS >> nOptional32;
+    } 
+    if (pBlockFlags[0] & 0x02)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> mnBackColor;
+    }
+    if (pBlockFlags[0] & 0x04)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> mnForeColor;
+    }
+    if (pBlockFlags[0] & 0x10)
+         bSize = true;
+    if (pBlockFlags[0] & 0x20)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nItemSize;
+    }
+    if (pBlockFlags[0] & 0x40)
+    {
+        sal_Int8 nOptional8 = 0; // mouse pointer
+        *pS >> nOptional8;
+    }
+    if (pBlockFlags[1] & 0x01)
+    { 
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        sal_Int32 nOptional32 = 0; // taborientation
+        *pS >> nOptional32;
+    }
+    if (pBlockFlags[1] & 0x02)
+    { 
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        sal_Int32 nOptional32 = 0; // tabstyle
+        *pS >> nOptional32;
+        if ( nOptional32 == 2 )
+            bHasTabs =false;
+    }
+    if (pBlockFlags[1] & 0x04)
+        bMultiRow = true; 
+    if (pBlockFlags[1] & 0x08)
+    { 
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        sal_Int32 nOptional32 = 0; // tabfixedwidth
+        *pS >> nOptional32;
+    }
+    if (pBlockFlags[1] & 0x10)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        sal_Int32 nOptional32 = 0; // tabfixedheight
+        *pS >> nOptional32;
+    }
+    if (pBlockFlags[1] & 0x20)
+        bTooltips = false;
+
+    if (pBlockFlags[1] & 0x80)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> tipStringSize;
+    }
+    
+    if (pBlockFlags[2] & 0x02)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nameSize;
+    }
+
+    if (pBlockFlags[2] & 0x04)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        sal_Int32 nOptional32 = 0; // variouspropertybits
+        *pS >> nOptional32;
+    }
+    
+    if (pBlockFlags[2] & 0x10)
+    { 
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        sal_Int32 nOptional32 = 0; // tabsallocated
+        *pS >> nOptional32;
+    }
+
+    if (pBlockFlags[2] & 0x20)
+    { 
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nTagSize;
+    }
+
+    if (pBlockFlags[2] & 0x40)
+    { 
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nNumTabs;
+    }
+
+    if (pBlockFlags[2] & 0x80)
     {
-        OCX_Control::Read(pS); // read trailing records
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nAcceleratorSize;
+    } 
+
+    if (pBlockFlags[3] & 0x01)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 2);
+        sal_Int16 nOptional16 = 0; //  Mouse Icon
+        *pS >> nOptional16;
+        hasEmbeddedImage = true;
+    }
+
+    // Extra block 
+    if ( bSize )
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nWidth; 
+        *pS >> nHeight; 
+    }
+    if ( nItemSize )
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        // read the caption for each tab
+        readArrayString( pS, msItems, nItemSize, nStart );
+        std::vector< rtl::OUString >::iterator it = msItems.begin(); 
+        std::vector< rtl::OUString >::iterator it_end = msItems.end(); 
+        for ( sal_Int32 i=0; it != it_end; ++i, ++it )
+            OSL_TRACE(" Caption [ %d ] is %s", i, rtl::OUStringToOString( *it, RTL_TEXTENCODING_UTF8 ).getStr() );
+    }
+    
+    if ( tipStringSize )
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        // read the tip for each tab
+        std::vector< rtl::OUString > sTips;
+        readArrayString( pS, sTips, tipStringSize, nStart );
+        std::vector< rtl::OUString >::iterator it = sTips.begin(); 
+        std::vector< rtl::OUString >::iterator it_end = sTips.end(); 
+        for ( sal_Int32 i=0; it != it_end; ++i, ++it )
+            OSL_TRACE(" Tip [ %d ] is %s", i, rtl::OUStringToOString( *it, RTL_TEXTENCODING_UTF8 ).getStr() );
+    }
+
+    if ( nameSize )
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        // read the name for each tab
+        std::vector< rtl::OUString > sNames;
+        readArrayString( pS, sNames, nameSize, nStart );
+        std::vector< rtl::OUString >::iterator it = sNames.begin(); 
+        std::vector< rtl::OUString >::iterator it_end = sNames.end(); 
+        for ( sal_Int32 i=0; it != it_end; ++i, ++it )
+            OSL_TRACE(" Name [ %d ] is %s", i, rtl::OUStringToOString( *it, RTL_TEXTENCODING_UTF8 ).getStr() );
+    }
+
+    if ( nTagSize )
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        // read the name for each tab
+        std::vector< rtl::OUString > sTags;
+        readArrayString( pS, sTags, nTagSize, nStart );
+        std::vector< rtl::OUString >::iterator it = sTags.begin(); 
+        std::vector< rtl::OUString >::iterator it_end = sTags.end(); 
+        for ( sal_Int32 i=0; it != it_end; ++i, ++it )
+            OSL_TRACE(" Tag [ %d ] is %s", i, rtl::OUStringToOString( *it, RTL_TEXTENCODING_UTF8 ).getStr() );
+    }
+
+    if ( nAcceleratorSize )
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        // read the name for each tab
+        std::vector< rtl::OUString > sAccelerators;
+        readArrayString( pS, sAccelerators, nAcceleratorSize, nStart );
+        std::vector< rtl::OUString >::iterator it = sAccelerators.begin(); 
+        std::vector< rtl::OUString >::iterator it_end = sAccelerators.end(); 
+        for ( sal_Int32 i=0; it != it_end; ++i, ++it )
+            OSL_TRACE(" Accelerator [ %d ] is %s", i, rtl::OUStringToOString( *it, RTL_TEXTENCODING_UTF8 ).getStr() );
+    }
+
+    // Stream data
+    if ( hasEmbeddedImage )
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        sal_uInt8 pPictureHeader[20];
+        sal_uInt32 nPictureLen(0);
+        pS->Read(pPictureHeader,20);
+        *pS >> nPictureLen;
+        long imagePos = pS->Tell();
+        // great embedded object
+        mxGrfObj = lcl_readGraphicObject( pS );
+        if( mxGrfObj.is() )
+        {
+            sImageUrl = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( GRAPHOBJ_URLPREFIX ) );
+            sImageUrl = sImageUrl + mxGrfObj->getUniqueID();
+        }
+        // make sure the stream position should be pointing after the image.
+        pS->Seek( imagePos + nPictureLen );
+    }
+
+    ReadAlign(pS, pS->Tell() - nStart, 4);
+    OCX_Control::ReadFontData(pS); // read textprops
+    ReadAlign(pS, pS->Tell() - nStart, 4);
+    for ( sal_Int32 i = 0; i < nNumTabs; ++i )
+    {
+        sal_uInt32 TabStripTabFlags(0);
+        *pS >> TabStripTabFlags;
     }
     return sal_True;
 }
 
+sal_Bool OCX_TabStrip::ReadFontData(SotStorageStream* /* pS */)
+{
+    // OCX_TabStrip::Read includes the text props
+    return true;
+}
+
 sal_Bool OCX_Image::Read(SotStorageStream *pS)
 {
     ULONG nStart = pS->Tell();
@@ -5455,12 +5151,10 @@ sal_Bool OCX_Image::Read(SotStorageStream *pS)
 
     if ( hasEmbeddedImage )
     {
-        //image follows this block
-        //len of image is 0x14 relative to end of this block
-        pS->Seek( pS->Tell() + 0x14 );
-
-        sal_uInt32 nImageLen = 0;
-        *pS >> nImageLen;
+        sal_uInt8 pPictureHeader[20];
+        sal_uInt32 nPictureLen(0);
+        pS->Read(pPictureHeader,20);
+        *pS >> nPictureLen;
 
         long imagePos = pS->Tell();
 
@@ -5471,7 +5165,7 @@ sal_Bool OCX_Image::Read(SotStorageStream *pS)
 			sImageUrl = sImageUrl + mxGrfObj->getUniqueID();
 		}
 		// make sure the stream position should be pointing after the image
-		pS->Seek( imagePos + nImageLen );
+		pS->Seek( imagePos + nPictureLen );
     }
     return sal_True;
 }
@@ -6149,8 +5843,383 @@ sal_Bool OCX_ProgressBar::Import(uno::Reference< beans::XPropertySet > &rPropSet
     return sal_True;
 }
 // ============================================================================
+OCX_ParentControl::OCX_ParentControl( SotStorageRef& parent, const OUString& storageName, const OUString& sN, const ::uno::Reference< container::XNameContainer >  &rParent, OCX_Control* pParent ) : OCX_Control(sN, pParent), mxParent(rParent), nNextAvailableID(0), nBooleanProperties(0), nGroupCnt(0), nZoom(0), fEnabled(1), fLocked(0), fBackStyle(1), fWordWrap(1), fAutoSize(0), nCaptionLen(0), nVertPos(1), nHorzPos(7), nBorderColor(0x80000012), nShapeCookie(0), nKeepScrollBarsVisible(3), nCycle(0), nBorderStyle(0), nMousePointer(0), nSpecialEffect(0), nPicture(0), nPictureAlignment(2), nPictureSizeMode(0), bPictureTiling(FALSE), nAccelerator(0), nIcon(0), pCaption(0), nScrollWidth(0), nScrollHeight(0), nScrollLeft(0), nScrollTop(0), nIconLen(0), pIcon(0), nPictureLen(0)
+{
+    mnForeColor = 0x80000012;
+    mnBackColor = 0x8000000F;
+    aFontData.SetHasAlign(TRUE);
+    mContainerStorage = parent->OpenSotStorage(storageName,
+        STREAM_READWRITE |
+        STREAM_NOCREATE |
+        STREAM_SHARE_DENYALL);
+    mContainerStream = mContainerStorage->OpenSotStream(
+        String(RTL_CONSTASCII_STRINGPARAM("f"),
+        RTL_TEXTENCODING_MS_1252),
+        STREAM_STD_READ | STREAM_NOCREATE);
+    mContainedControlsStream = mContainerStorage->OpenSotStream( String(RTL_CONSTASCII_STRINGPARAM("o"),
+        RTL_TEXTENCODING_MS_1252),
+        STREAM_STD_READ | STREAM_NOCREATE);
+}
 
+OCX_ParentControl::~OCX_ParentControl()
+{
+    CtrlIterator aEnd = mpControls.end();
+    for (CtrlIterator aIter = mpControls.begin(); aIter != aEnd; ++ aIter )
+    {
+        delete *aIter;
+    }
+}
 
+sal_Bool OCX_ParentControl::Import(uno::Reference<beans::XPropertySet>&  rProps  )
+{
+    // #FIXME we probably don't need this (fake) parent (mxParen) which is the dialog iirc
+    if ( !mxParent.is() )
+    {
+        return sal_False;
+    }
+    CtrlIterator aEnd = mpControls.end();
+//    int count = 0;
+    for (CtrlIterator aIter = mpControls.begin(); aIter != aEnd; ++ aIter )
+    {
+        uno::Reference< container::XNameContainer > xNameContainer( rProps, uno::UNO_QUERY ); 
+        if ( !(*aIter)->Import( xNameContainer ) )
+        {
+            return sal_False;
+        }
+    }
+    return sal_True;
+}
+
+bool OCX_ParentControl::createFromContainerRecord( const ContainerRecord& record, OCX_Control*& pControl )
+{
+    pControl = NULL;
+    switch ( record.nTypeIdent)
+        {
+            case CMDBUTTON:
+                pControl = new OCX_CommandButton;
+                break;
+            case LABEL:
+                pControl = new OCX_UserFormLabel(this);
+                break;
+            case TEXTBOX:
+                pControl = new OCX_TextBox;
+                break;
+            case LISTBOX:
+                pControl = new OCX_ListBox;
+                break;
+            case COMBOBOX:
+                pControl = new OCX_ComboBox;
+                break;
+            case CHECKBOX:
+                pControl =  new OCX_CheckBox;
+                break;
+            case OPTIONBUTTON:
+                pControl = new OCX_OptionButton;
+                break;
+            case TOGGLEBUTTON:
+                pControl = new OCX_ToggleButton;
+                break;
+            case IMAGE: //Image
+            {
+                pControl = new OCX_Image;
+                break;
+            }
+            case PAGE: // Page
+            {
+                pControl = new OCX_Page(mContainerStorage, record.nSubStorageId,
+                    record.cName, mxParent, this);
+                break;
+            }
+            case MULTIPAGE: // MultiPage
+            {
+                OUString sMSStore = createSubStreamName( record.nSubStorageId );
+                pControl = new OCX_MultiPage( mContainerStorage, sMSStore,
+                    record.cName, mxParent, this);
+                break;
+            }
+            case FRAME:  //Frame
+            {
+                OUString sFrameStore = createSubStreamName( record.nSubStorageId );
+                pControl = new OCX_Frame(mContainerStorage, sFrameStore,
+                    record.cName, mxParent, this);
+
+                break;
+            }
+            case SPINBUTTON: //SpinButton
+            {
+                pControl = new OCX_SpinButton;
+                break;
+            }
+            case TABSTRIP: //TabStrip
+            {
+                pControl = new OCX_TabStrip;
+                break;
+            }
+            case SCROLLBAR: //ScrollBar
+                pControl = new OCX_ScrollBar;
+                break;
+            case PROGRESSBAR: //ProgressBar Active X control
+                pControl = new OCX_ProgressBar;
+                break;
+            default:
+                OSL_TRACE( "**** Unknown control 0x%x", record.nTypeIdent );
+                DBG_ERROR( "Unknown control");
+                return false;
+        }
+        pControl->sName = record.cName;
+
+        pControl->msToolTip = record.controlTip;
+        pControl->mnTop = record.nTop;
+        pControl->mnLeft = record.nLeft;
+        // MS tabIndex, pretty useless in OpenOffice land
+        // as tab indexes in MS are relative to parent container.
+        // However we need this value in order to set
+        // OpenOffice tab indices in a sensible way to
+        // reflect the ms tabbing from orig MS UserForm, see below
+        pControl->mnTabPos = record.nTabPos;
+        pControl->SetInDialog(true);
+        pControl->mbVisible = record.bVisible;
+    
+        return true;
+}
+
+void OCX_ParentControl::ProcessControl(OCX_Control* pControl,SvStorageStream* /* pS */,  ContainerRecord& rec )
+{
+    SotStorageStreamRef oStream = mContainedControlsStream;
+
+    // can insert into OO Dialog (e.g is this a supported dialog control)??
+    if ( rec.nTypeIdent == TABSTRIP )
+    {
+        // skip the record in the stream, discard the control
+        oStream->SeekRel( rec.nSubStreamLen );
+        delete pControl;
+    }
+    else
+    {
+        // A container control needs to read the f stream in
+        // the folder ( substorage ) associated with this control
+        if (  rec.nTypeIdent ==  FRAME ||
+            rec.nTypeIdent ==  MULTIPAGE||
+            rec.nTypeIdent ==  PAGE )
+        {
+            OCX_ParentControl* pContainer =
+               static_cast< OCX_ParentControl* >( pControl );
+            oStream = pContainer->getContainerStream();
+        }
+        // #117490# DR: container records provide size of substream, use it here...
+
+        // remember initial position to set correct stream position
+        ULONG nStrmPos = oStream->Tell();
+        // import control, may return with invalid stream position
+        pControl->FullRead(oStream);
+        // set stream to position behind substream of this control
+        oStream->Seek( nStrmPos + rec.nSubStreamLen );
+
+        mpControls.push_back( pControl );
+    }
+}
+
+sal_Bool OCX_ParentControl::Read(SvStorageStream *pS)
+{
+    long nStart = pS->Tell();
+
+    *pS >> nIdentifier;
+    DBG_ASSERT(0x400==nIdentifier,
+        "A control that has a different identifier");
+    *pS >> nFixedAreaLen;
+    pS->Read(pBlockFlags,4);
+
+    bool bExtraSize = false;
+    bool bLogicalSize = false;
+    bool bScrollPosition = false;
+    bool bFont = false;
+    if (pBlockFlags[0] & 0x01)
+    {
+        DBG_ASSERT(!this, "ARSE");
+    }
+    if (pBlockFlags[0] & 0x02)
+        *pS >> mnBackColor;
+    if (pBlockFlags[0] & 0x04)
+        *pS >> mnForeColor;
+    if (pBlockFlags[0] & 0x08)
+        *pS >> nNextAvailableID;
+    if (pBlockFlags[0] & 0x40)
+        *pS >> nBooleanProperties;
+    ReadAlign(pS, pS->Tell() - nStart, 4);
+    if (pBlockFlags[0] & 0x80)
+    {
+        *pS >> nBorderStyle;
+    }
+    if (pBlockFlags[1] & 0x01)
+        *pS >> nMousePointer;
+    if (pBlockFlags[1] & 0x02)
+        *pS >> nKeepScrollBarsVisible;
+    if (pBlockFlags[1] & 0x04)
+        bExtraSize = true;
+    if (pBlockFlags[1] & 0x08)
+        bLogicalSize = true;
+    if (pBlockFlags[1] & 0x10)
+        bScrollPosition = true;
+    if (pBlockFlags[1] & 0x20)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nGroupCnt;
+    }
+
+    if (pBlockFlags[1] & 0x80)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 2);
+        *pS >> nIcon;
+        DBG_ASSERT(nIcon == 0xFFFF, "Unexpected nIcon");
+    }
+    if (pBlockFlags[2] & 0x01)
+        *pS >> nCycle;
+    if (pBlockFlags[2] & 0x02)
+        *pS >> nSpecialEffect;
+    if (pBlockFlags[2] & 0x04)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nBorderColor;
+    }
+    if (pBlockFlags[2] & 0x08)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nCaptionLen;
+    }
+
+    if (pBlockFlags[2] & 0x10)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 2);
+        sal_uInt16 nNoIdea;
+        *pS >> nNoIdea;
+        DBG_ASSERT(nNoIdea == 0xFFFF, "Expected 0xFFFF, (related to font ?)");
+        bFont = true;
+    }
+    if (pBlockFlags[2] & 0x20)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 2);
+        *pS >> nPicture;
+        DBG_ASSERT(nPicture == 0xFFFF, "Unexpected nIcon");
+    }
+
+    if (pBlockFlags[2] & 0x40)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nZoom; 
+    }
+    if (pBlockFlags[2] & 0x80)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nPictureAlignment;
+    }
+
+    if (pBlockFlags[3] & 0x01)
+        bPictureTiling = true;
+
+    if (pBlockFlags[3] & 0x02)
+        *pS >> nPictureSizeMode;
+    
+    if (pBlockFlags[3] & 0x04)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nShapeCookie;
+    }
+    if (pBlockFlags[3] & 0x08)
+    {
+        ReadAlign(pS, pS->Tell() - nStart, 4);
+        *pS >> nDrawBuffer;
+    }
+
+    ReadAlign(pS, pS->Tell() - nStart, 4);
+    // Extra
+    if ( bExtraSize )
+    {
+        *pS >> nWidth;
+        *pS >> nHeight;
+    }
+    if ( bLogicalSize )
+    {
+        *pS >> nScrollWidth;
+        *pS >> nScrollHeight;
+    }
+    if ( bScrollPosition )
+    {
+        *pS >> nScrollLeft;
+        *pS >> nScrollTop;
+    }
+    if  ( nCaptionLen )
+    {
+        sal_uInt32 nCaptionSize = lclGetBufferSize( nCaptionLen );
+        if ( nCaptionSize ) 
+        {
+            pCaption = new sal_Char[ nCaptionSize ];
+            pS->Read( pCaption, nCaptionSize ); 
+        }
+    }
+
+    ReadAlign(pS, pS->Tell() - nStart, 4);
+
+    // StreamData
+    if (nIcon)
+    {
+        pS->Read(pIconHeader,20);
+        *pS >> nIconLen;
+        pIcon = new sal_uInt8[nIconLen];
+        pS->Read(pIcon,nIconLen);
+    }
+    if ( bFont )
+    {
+        //Font Stuff..
+        pS->SeekRel(0x1a);
+        sal_uInt8 nFontLen;
+        *pS >> nFontLen;
+        pS->SeekRel(nFontLen);
+    }
+    if (nPicture)
+    {
+        pS->Read(pPictureHeader,20);
+        *pS >> nPictureLen;
+        long imagePos = pS->Tell();
+        // great embedded object
+        mxGrfObj = lcl_readGraphicObject( pS );
+        if( mxGrfObj.is() )
+        {
+            sImageUrl = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( GRAPHOBJ_URLPREFIX ) );
+            sImageUrl = sImageUrl + mxGrfObj->getUniqueID();
+        }
+        // make sure the stream position should be pointing after the image.
+        pS->Seek( imagePos + nPictureLen );
+    }
+    // FormSiteData
+    std::vector< ClassTable > siteClassInfo;
+    if ( ( nBooleanProperties & 0x00008000 ) == 0x0)
+    {
+        sal_Int16 numTrailingRecs = 0;
+        *pS >> numTrailingRecs;
+        if ( numTrailingRecs )
+        {
+            for ( ; numTrailingRecs ; --numTrailingRecs )
+            {
+                ClassTable cacheClass;
+                cacheClass.Read( pS );
+                siteClassInfo.push_back( cacheClass );
+            }
+        }
+    }
+    // Sites
+    ContainerRecReader reader;
+    reader.Read( this, pS, siteClassInfo );
+
+    // Need to honour the MS Tab Indexes. However MS tab indexes are
+    // relative to parent, this hack sorts the controls in each container
+    // based on the ms tab indexes. When import is called we create the
+    // controls in Open/Star office based on the order of the tab indexes,
+    // this ensures that the default tab index created by Star/Open office
+    // reflects the "flattened" ms tab order.
+// #FIXME we probably need to remove this
+    ::std::sort( mpControls.begin(), mpControls.end(), SortOrderByTabPos() );
+	return true;
+}
 
 
 sal_Bool HTML_TextBox::Import(com::sun::star::uno::Reference<
@@ -6238,12 +6307,12 @@ sal_Bool HTML_TextBox::Import(com::sun::star::uno::Reference<
 	return sal_True;
 }
 
-sal_Bool HTML_TextBox::Read(SotStorageStream *pS)
+sal_Bool HTML_TextBox::Read(SotStorageStream * /*pS*/)
 {
   return sal_True;
 }
 
-sal_Bool HTML_TextBox::ReadFontData(SotStorageStream *pS) 
+sal_Bool HTML_TextBox::ReadFontData(SotStorageStream * /*pS*/) 
 {
   return sal_True;
 }
@@ -6380,7 +6449,7 @@ sal_Bool HTML_Select::Read(SotStorageStream *pS)
     return sal_True;
 }
 
-sal_Bool HTML_Select::ReadFontData(SotStorageStream *pS) 
+sal_Bool HTML_Select::ReadFontData(SotStorageStream * /*pS*/) 
 {
     return sal_True;
 }
diff --git toolkit/inc/toolkit/awt/vclxwindows.hxx toolkit/inc/toolkit/awt/vclxwindows.hxx
index df266de..8135d28 100644
--- toolkit/inc/toolkit/awt/vclxwindows.hxx
+++ toolkit/inc/toolkit/awt/vclxwindows.hxx
@@ -85,6 +85,7 @@
 #include <com/sun/star/awt/XComboBox.hpp>
 #include <com/sun/star/awt/XCheckBox.hpp>
 #include <com/sun/star/awt/XImageConsumer.hpp>
+#include <com/sun/star/awt/XSimpleTabController.hpp>
 #include <cppuhelper/weak.hxx>
 #include <cppuhelper/implbase2.hxx>
 
@@ -95,6 +96,7 @@
 #include <vcl/pointr.hxx>
 #include <vcl/imgcons.hxx>
 #include <vcl/image.hxx>
+#include <vcl/tabctrl.hxx>
 
 #include <com/sun/star/document/XVbaMethodParameter.hpp>  //liuchen 2009-6-22, add the support of input/output parameters to VBA Dialog_QueryClose event
 class Button;
@@ -386,6 +388,37 @@ public:
     virtual void    GetPropertyIds( std::list< sal_uInt16 > &aIds ) { return ImplGetPropertyIds( aIds ); }
 };
 
+//	----------------------------------------------------
+//	class VCLXFrame
+//	----------------------------------------------------
+class VCLXFrame :	public VCLXContainer
+{
+public:
+						VCLXFrame();
+						~VCLXFrame();
+
+	// ::com::sun::star::uno::XInterface
+    ::com::sun::star::uno::Any					SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+	void										SAL_CALL acquire() throw()	{ OWeakObject::acquire(); }
+	void										SAL_CALL release() throw()	{ OWeakObject::release(); }
+
+    // ::com::sun::star::lang::XTypeProvider
+	::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type >	SAL_CALL getTypes() throw(::com::sun::star::uno::RuntimeException);
+	::com::sun::star::uno::Sequence< sal_Int8 >						SAL_CALL getImplementationId() throw(::com::sun::star::uno::RuntimeException);
+
+	// ::com::sun::star::awt::XView
+    void SAL_CALL draw( sal_Int32 nX, sal_Int32 nY ) throw(::com::sun::star::uno::RuntimeException);
+
+	// ::com::sun::star::awt::XDevice,
+	::com::sun::star::awt::DeviceInfo SAL_CALL getInfo() throw(::com::sun::star::uno::RuntimeException);
+
+	// ::com::sun::star::awt::XVclWindowPeer
+    void SAL_CALL setProperty( const ::rtl::OUString& PropertyName, const ::com::sun::star::uno::Any& Value ) throw(::com::sun::star::uno::RuntimeException);
+
+    static void     ImplGetPropertyIds( std::list< sal_uInt16 > &aIds );
+    virtual void    GetPropertyIds( std::list< sal_uInt16 > &aIds ) { return ImplGetPropertyIds( aIds ); }
+};
+
 
 
 //	----------------------------------------------------
@@ -459,8 +492,59 @@ public:
     // ::com::sun::star::awt::XVclWindowPeer
     void SAL_CALL setProperty( const ::rtl::OUString& PropertyName, const ::com::sun::star::uno::Any& Value ) throw(::com::sun::star::uno::RuntimeException);
 
+    TabPage*  getTabPage() const throw ( ::com::sun::star::uno::RuntimeException);
+    static void     ImplGetPropertyIds( std::list< sal_uInt16 > &aIds );
+    virtual void    GetPropertyIds( std::list< sal_uInt16 > &aIds ) { return ImplGetPropertyIds( aIds ); }
 };
 
+class VCLXMultiPage : public ::com::sun::star::awt::XSimpleTabController, public VCLXContainer
+{
+    // FIXME: we might want to use a Multiplexer
+    std::list< ::com::sun::star::uno::Reference
+               < ::com::sun::star::awt::XTabListener > > mxTabListeners;
+    sal_Int32 mTabId;
+  
+public:
+    VCLXMultiPage();
+    ~VCLXMultiPage();
+
+    // ::com::sun::star::uno::XInterface
+    ::com::sun::star::uno::Any SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL acquire() throw()	{ OWeakObject::acquire(); }
+    void SAL_CALL release() throw()	{ OWeakObject::release(); }
+
+    // ::com::sun::star::lang::XTypeProvider
+    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type > SAL_CALL getTypes() throw(::com::sun::star::uno::RuntimeException);
+    ::com::sun::star::uno::Sequence< sal_Int8 > SAL_CALL getImplementationId() throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::awt::XView
+    void SAL_CALL draw( sal_Int32 nX, sal_Int32 nY ) throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::awt::XDevice,
+    ::com::sun::star::awt::DeviceInfo SAL_CALL getInfo() throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::awt::XVclWindowPeer
+    void SAL_CALL setProperty( const ::rtl::OUString& PropertyName, const ::com::sun::star::uno::Any& Value ) throw(::com::sun::star::uno::RuntimeException);
+    ::com::sun::star::uno::Any SAL_CALL getProperty( const ::rtl::OUString& PropertyName ) throw(::com::sun::star::uno::RuntimeException);
+    // XSimpleTabController
+    virtual ::sal_Int32 SAL_CALL insertTab() throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL removeTab( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL setTabProps( ::sal_Int32 ID, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue >& Properties ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue > SAL_CALL getTabProps( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL activateTab( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getActiveTabID() throw (::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL addTabListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabListener >& Listener ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL removeTabListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabListener >& Listener ) throw (::com::sun::star::uno::RuntimeException);
+    // C++
+    TabControl*  getTabControl() const throw ( ::com::sun::star::uno::RuntimeException);
+    USHORT insertTab( TabPage*, rtl::OUString& sTitle ); 
+    static void     ImplGetPropertyIds( std::list< sal_uInt16 > &aIds );
+    virtual void    GetPropertyIds( std::list< sal_uInt16 > &aIds ) { return ImplGetPropertyIds( aIds ); }
+}; 
+	
 //  ----------------------------------------------------
 //  class VCLXFixedHyperlink
 //  ----------------------------------------------------
diff --git toolkit/inc/toolkit/controls/dialogcontrol.hxx toolkit/inc/toolkit/controls/dialogcontrol.hxx
index b031e13..9324df2 100644
--- toolkit/inc/toolkit/controls/dialogcontrol.hxx
+++ toolkit/inc/toolkit/controls/dialogcontrol.hxx
@@ -41,8 +41,10 @@
 #include <com/sun/star/beans/XPropertyChangeListener.hpp>
 #include <com/sun/star/awt/XDialog.hpp>
 #include <com/sun/star/resource/XStringResourceResolver.hpp>
+#include <com/sun/star/graphic/XGraphicObject.hpp>
 #include <cppuhelper/implbase6.hxx>
 #include <cppuhelper/implbase5.hxx>
+#include <cppuhelper/implbase2.hxx>
 #include <toolkit/helper/listenermultiplexer.hxx>
 #include <toolkit/controls/unocontrolmodel.hxx>
 #include "toolkit/helper/servicenames.hxx"
@@ -74,7 +76,7 @@ public:
     // problems with this .....
     typedef ::std::pair< ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >, ::rtl::OUString >
                                                         UnoControlModelHolder;
-private:
+protected:
     typedef ::std::list< UnoControlModelHolder >		UnoControlModelHolderList;
 
     // for grouping control models (XTabControllerModel::getGroupXXX)
@@ -86,7 +88,7 @@ private:
     friend struct FindControlModel;
     friend struct CompareControlModel;
 
-private:
+protected:
     ContainerListenerMultiplexer		maContainerListeners;
     ::cppu::OInterfaceContainerHelper	maChangeListeners;
     UnoControlModelHolderList			maModels;
@@ -97,13 +99,13 @@ private:
 	::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject > mxGrfObj;
 	bool mbAdjustingGraphic;
 protected:	
-    ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
+    virtual ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
     ::cppu::IPropertyArrayHelper&		SAL_CALL getInfoHelper();
 
     UnoControlModelHolderList::iterator			ImplFindElement( const ::rtl::OUString& rName );
 
 public:
-                        UnoControlDialogModel();
+                        UnoControlDialogModel( bool bRegProps = true );
                         UnoControlDialogModel( const UnoControlDialogModel& rModel );
                         ~UnoControlDialogModel();
                         
@@ -126,13 +128,6 @@ public:
     ::com::sun::star::uno::Type SAL_CALL getElementType(  ) throw(::com::sun::star::uno::RuntimeException);
     sal_Bool SAL_CALL hasElements(  ) throw(::com::sun::star::uno::RuntimeException);
     
-    // ::com::sun::star::container::XIndexContainer, XIndexReplace, XIndexAcces
-    // void SAL_CALL replaceByIndex( sal_Int32 Index, const ::com::sun::star::uno::Any& Element ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
-    // sal_Int32 SAL_CALL getCount(  ) throw(::com::sun::star::uno::RuntimeException) = 0;
-    // ::com::sun::star::uno::Any SAL_CALL getByIndex( sal_Int32 Index ) throw(::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
-    // void SAL_CALL insertByIndex( sal_Int32 Index, const ::com::sun::star::uno::Any& Element ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
-    // void SAL_CALL removeByIndex( sal_Int32 Index ) throw(::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
-    
     // ::com::sun::star::container::XNameContainer, XNameReplace, XNameAccess
     void SAL_CALL replaceByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException);
     ::com::sun::star::uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw(::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException);
@@ -182,12 +177,12 @@ public:
 protected:
     void startControlListening( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& _rxChildModel );
     void stopControlListening( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& _rxChildModel );
-    // ::cppu::OPropertySetHelper
-	void SAL_CALL setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception);
 
     void implNotifyTabModelChange( const ::rtl::OUString& _rAccessor );
 
     void implUpdateGroupStructure();
+    // ::cppu::OPropertySetHelper
+	void SAL_CALL setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception);
 private:
     void AddRadioButtonToGroup (
             const ::com::sun::star::uno::Reference< XControlModel >& rControlModel,
@@ -198,16 +193,6 @@ private:
             ::std::map< ::rtl::OUString, ModelGroup >& pNamedGroups );
 };
 
-//	----------------------------------------------------
-//	class UnoDialogControl
-//	----------------------------------------------------
-typedef ::cppu::ImplHelper6	<	::com::sun::star::container::XContainerListener
-                            ,	::com::sun::star::awt::XTopWindow
-                            ,	::com::sun::star::awt::XDialog
-                            ,	::com::sun::star::util::XChangesListener
-                            ,   ::com::sun::star::util::XModifyListener
-                            ,   ::com::sun::star::awt::XWindowListener
-                            >	UnoDialogControl_IBase;
 
 class ResourceListener  :public ::com::sun::star::util::XModifyListener,
                          public ::cppu::OWeakObject,
@@ -237,29 +222,77 @@ class ResourceListener  :public ::com::sun::star::util::XModifyListener,
         bool                                                                                    m_bListening;
 };
 
-class UnoDialogControl	:public UnoControlContainer
-                        ,public UnoDialogControl_IBase
+typedef ::cppu::ImplHelper2	< ::com::sun::star::container::XContainerListener
+							,	::com::sun::star::util::XChangesListener
+							>	UnoDialogContainerControl_IBase;
+
+class UnoDialogContainerControl : public UnoControlContainer, public UnoDialogContainerControl_IBase
+{
+protected:
+    ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabController >	mxTabController;
+    void		ImplInsertControl( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxModel, const ::rtl::OUString& rName );
+    void		ImplRemoveControl( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxModel );
+    virtual void		ImplSetPosSize( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& rxCtrl );
+public:
+	UnoDialogContainerControl();
+	~UnoDialogContainerControl();
+
+	DECLIMPL_SERVICEINFO_DERIVED( UnoDialogContainerControl, UnoControlBase, "com.sun.star.awt.UnoDialogContainerControl" )
+    ::com::sun::star::uno::Any	SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException) { return UnoControlContainer::queryInterface(rType); }
+    ::com::sun::star::uno::Any	SAL_CALL queryAggregation( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL acquire() throw()	{ OWeakAggObject::acquire(); }
+    void SAL_CALL release() throw()	{ OWeakAggObject::release(); }
+
+    void SAL_CALL disposing( const ::com::sun::star::lang::EventObject& Source ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL dispose() throw(::com::sun::star::uno::RuntimeException);
+
+    void SAL_CALL createPeer( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XToolkit >& Toolkit, const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindowPeer >& Parent ) throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::container::XContainerListener
+    void SAL_CALL elementInserted( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL elementRemoved( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL elementReplaced( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::lang::XTypeProvider
+    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type >	SAL_CALL getTypes() throw(::com::sun::star::uno::RuntimeException);
+    ::com::sun::star::uno::Sequence< sal_Int8 >						SAL_CALL getImplementationId() throw(::com::sun::star::uno::RuntimeException);
+
+    // XChangesListener
+    virtual void SAL_CALL changesOccurred( const ::com::sun::star::util::ChangesEvent& Event ) throw (::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::awt::XControl
+    sal_Bool SAL_CALL setModel( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& Model ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL setDesignMode( sal_Bool bOn ) throw(::com::sun::star::uno::RuntimeException);
+protected:
+    virtual void ImplModelPropertiesChanged( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyChangeEvent >& rEvents ) throw(::com::sun::star::uno::RuntimeException);
+	virtual void removingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
+	virtual void addingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
+};
+
+
+
+class UnoDialogControl :public UnoDialogContainerControl
+						,public ::com::sun::star::awt::XTopWindow, public ::com::sun::star::awt::XDialog , public ::com::sun::star::awt::XWindowListener 
 {
 private:
     ::com::sun::star::uno::Reference< ::com::sun::star::awt::XMenuBar >			mxMenuBar;
-    ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabController >	mxTabController;
-    ::com::sun::star::uno::Reference< ::com::sun::star::util::XModifyListener > mxListener;                
     TopWindowListenerMultiplexer	                                            maTopWindowListeners;
     bool                                                                        mbWindowListener;
     bool                                                                        mbSizeModified;
     bool                                                                        mbPosModified;
-
+    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject > mxGrfObj;
+    ::com::sun::star::uno::Reference< ::com::sun::star::util::XModifyListener > mxListener;
+ 
 protected:
     
     void		ImplInsertControl( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxModel, const ::rtl::OUString& rName );
-    void		ImplRemoveControl( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxModel );
-    void		ImplSetPosSize( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& rxCtrl );
     void        ImplUpdateResourceResolver();
     void        ImplStartListingForResourceEvents();
 
 public:
 
                                 UnoDialogControl();
+								~UnoDialogControl();
     ::rtl::OUString				GetComponentServiceName();
 
     ::com::sun::star::uno::Any	SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException) { return UnoControlContainer::queryInterface(rType); }
@@ -284,11 +317,6 @@ public:
     virtual void SAL_CALL windowShown( const ::com::sun::star::lang::EventObject& e ) throw (::com::sun::star::uno::RuntimeException);
     virtual void SAL_CALL windowHidden( const ::com::sun::star::lang::EventObject& e ) throw (::com::sun::star::uno::RuntimeException);
     
-    // ::com::sun::star::container::XContainerListener
-    void SAL_CALL elementInserted( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
-    void SAL_CALL elementRemoved( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
-    void SAL_CALL elementReplaced( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
-    
     // ::com::sun::star::awt::XDialog
     void SAL_CALL setTitle( const ::rtl::OUString& Title ) throw(::com::sun::star::uno::RuntimeException);
     ::rtl::OUString SAL_CALL getTitle() throw(::com::sun::star::uno::RuntimeException);
@@ -301,10 +329,6 @@ public:
 
     // ::com::sun::star::awt::XControl
     sal_Bool SAL_CALL setModel( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& Model ) throw(::com::sun::star::uno::RuntimeException);
-    void SAL_CALL setDesignMode( sal_Bool bOn ) throw(::com::sun::star::uno::RuntimeException);
-
-    // XChangesListener
-    virtual void SAL_CALL changesOccurred( const ::com::sun::star::util::ChangesEvent& Event ) throw (::com::sun::star::uno::RuntimeException);
 
     // XModifyListener
     virtual void SAL_CALL modified( const ::com::sun::star::lang::EventObject& aEvent ) throw (::com::sun::star::uno::RuntimeException);
@@ -315,11 +339,121 @@ public:
 protected:
     virtual void ImplModelPropertiesChanged( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyChangeEvent >& rEvents ) throw(::com::sun::star::uno::RuntimeException);
     virtual void PrepareWindowDescriptor( ::com::sun::star::awt::WindowDescriptor& rDesc );
+protected:
+};
+
+class UnoMultiPageModel : public UnoControlDialogModel
+{
+public:
+						UnoMultiPageModel();
+						~UnoMultiPageModel();
+						UnoMultiPageModel( const UnoMultiPageModel& rModel );
+
+	UnoControlModel*	Clone() const; 
+
+	DECLIMPL_SERVICEINFO_DERIVED( UnoMultiPageModel, UnoControlDialogModel, szServiceName_UnoMultiPageModel )
+
+	virtual ::rtl::OUString SAL_CALL getServiceName() throw(::com::sun::star::uno::RuntimeException);
+	virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw( ::com::sun::star::uno::RuntimeException);
+    // XNamedContainer
+    void SAL_CALL insertByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException);
+
+    // Override the method of parent Class
+    virtual sal_Bool SAL_CALL getGroupControl(  ) throw (::com::sun::star::uno::RuntimeException);
+protected:	
+    virtual ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
+    ::cppu::IPropertyArrayHelper&		SAL_CALL getInfoHelper();
+
+};
+
+
+
+class UnoMultiPageControl :  public UnoDialogContainerControl
+{
+    void bindPage( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
+public:
+	UnoMultiPageControl();
+	~UnoMultiPageControl();
+	::rtl::OUString		GetComponentServiceName();
+
+	// ::com::sun::star::lang::XServiceInfo
+	DECLIMPL_SERVICEINFO_DERIVED( UnoMultiPageControl, UnoDialogContainerControl, szServiceName_UnoMultiPageControl )
+
+    void SAL_CALL createPeer( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XToolkit >& Toolkit, const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindowPeer >& Parent ) throw(::com::sun::star::uno::RuntimeException);
 
 protected:
-    virtual void removingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
-    virtual void addingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
+    virtual void    impl_createControlPeerIfNecessary(
+        const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl
+    );
+
+};
+
+
+class UnoPageModel : public UnoControlDialogModel
+{
+public:
+						UnoPageModel();
+						~UnoPageModel();
+						UnoPageModel( const UnoPageModel& rModel );
+
+	UnoControlModel*	Clone() const; 
+
+	DECLIMPL_SERVICEINFO_DERIVED( UnoPageModel, UnoControlDialogModel, szServiceName_UnoPageModel )
+
+	virtual ::rtl::OUString SAL_CALL getServiceName() throw(::com::sun::star::uno::RuntimeException);
+	virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw( ::com::sun::star::uno::RuntimeException);
+
+    // Override the method of parent Class
+    virtual sal_Bool SAL_CALL getGroupControl(  ) throw (::com::sun::star::uno::RuntimeException);
+protected:	
+    virtual ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
+    ::cppu::IPropertyArrayHelper&		SAL_CALL getInfoHelper();
+
+};
+
+
+class UnoPageControl :  public UnoDialogContainerControl
+{
+public:
+	UnoPageControl();
+	~UnoPageControl();
+	::rtl::OUString		GetComponentServiceName();
+
+
+	// ::com::sun::star::lang::XServiceInfo
+	DECLIMPL_SERVICEINFO_DERIVED( UnoPageControl, UnoDialogContainerControl, szServiceName_UnoPageControl )
 };
 
+class UnoFrameModel : public UnoControlDialogModel
+{
+public:
+						UnoFrameModel();
+						~UnoFrameModel();
+						UnoFrameModel( const UnoFrameModel& rModel );
+
+	UnoControlModel*	Clone() const; 
+
+	DECLIMPL_SERVICEINFO_DERIVED( UnoFrameModel, UnoControlDialogModel, szServiceName_UnoFrameModel )
+
+	virtual ::rtl::OUString SAL_CALL getServiceName() throw(::com::sun::star::uno::RuntimeException);
+	virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw( ::com::sun::star::uno::RuntimeException);
+
+protected:	
+    virtual ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
+    ::cppu::IPropertyArrayHelper&		SAL_CALL getInfoHelper();
+};
+
+class UnoFrameControl :  public UnoDialogContainerControl
+{
+protected:
+        virtual void		ImplSetPosSize( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& rxCtrl );
+public:
+	UnoFrameControl();
+	~UnoFrameControl();
+	::rtl::OUString		GetComponentServiceName();
+
+	// ::com::sun::star::lang::XServiceInfo
+	DECLIMPL_SERVICEINFO_DERIVED( UnoFrameControl, UnoDialogContainerControl, szServiceName_UnoPageControl )
+};
 
 #endif // TOOLKIT_DIALOG_CONTROL_HXX
diff --git toolkit/inc/toolkit/controls/unocontrolcontainer.hxx toolkit/inc/toolkit/controls/unocontrolcontainer.hxx
index e45f9f1..6f519f8 100644
--- toolkit/inc/toolkit/controls/unocontrolcontainer.hxx
+++ toolkit/inc/toolkit/controls/unocontrolcontainer.hxx
@@ -122,6 +122,15 @@ protected:
     virtual void removingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
     virtual void addingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
 
+    /** ensures that the given control has a peer, if necessary and possible
+        @param _rxControl
+            an ->XControl which has just been inserted into the container. Must not be <NULL/>.
+        @precond
+            our mutex is locked
+    */
+    virtual void    impl_createControlPeerIfNecessary(
+        const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl
+    );
 private:
     /** adds the control to the container, does necessary notifications, and the like
         @param _rxControl
@@ -152,15 +161,6 @@ private:
         const ::rtl::OUString* _pNameAccessor
     );
 
-    /** ensures that the given control has a peer, if necessary and possible
-        @param _rxControl
-            an ->XControl which has just been inserted into the container. Must not be <NULL/>.
-        @precond
-            our mutex is locked
-    */
-    void    impl_createControlPeerIfNecessary(
-        const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl
-    );
 };
 
 
diff --git toolkit/inc/toolkit/controls/unocontrols.hxx toolkit/inc/toolkit/controls/unocontrols.hxx
index 55c70b2..852f1ea 100644
--- toolkit/inc/toolkit/controls/unocontrols.hxx
+++ toolkit/inc/toolkit/controls/unocontrols.hxx
@@ -71,6 +71,16 @@
 #define UNO_NAME_GRAPHOBJ_URLPREFIX                             "vnd.sun.star.GraphicObject:"
 #define UNO_NAME_GRAPHOBJ_URLPKGPREFIX                  "vnd.sun.star.Package:"
  
+class ImageHelper
+{
+public:
+    // The routine will always attempt to return a valid XGraphic for the passed _rURL
+    // additionallly xOutGraphicObject will container the associated XGraphicObject ( if url 
+    // is valid for that )
+    // and is set appropriately ( e.g. NULL if non GraphicObject scheme ) or valid object
+    // if the rURL points to a valid object
+    static ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > getGraphicAndGraphicObjectFromURL_nothrow( ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject >& xOutGraphicObject, const ::rtl::OUString& _rURL );
+};
 
 //	----------------------------------------------------
 //	class UnoControlEditModel
@@ -225,6 +235,7 @@ private:
     bool                                                                                    mbAdjustingGraphic;
     
     ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject > mxGrfObj;
+    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL );
 protected:
     ImageProducerControlModel() : mbAdjustingImagePosition( false ), mbAdjustingGraphic( false ) { }
     ImageProducerControlModel( const ImageProducerControlModel& _rSource ) : com::sun::star::awt::XImageProducer(), UnoControlModel( _rSource ), mbAdjustingImagePosition( false ), mbAdjustingGraphic( false ) { }
@@ -669,44 +680,6 @@ public:
 
 };
 
-class UnoMultiPageModel : public UnoControlModel
-{
-protected:
-	::com::sun::star::uno::Any 		ImplGetDefaultValue( sal_uInt16 nPropId ) const;
-	::cppu::IPropertyArrayHelper& 	SAL_CALL getInfoHelper();
-
-public:
-						UnoMultiPageModel();
-						UnoMultiPageModel( const UnoMultiPageModel& rModel ) : UnoControlModel( rModel ) {;}
-
-	UnoControlModel*	Clone() const { return new UnoMultiPageModel( *this ); }
-
-	// ::com::sun::star::io::XPersistObject
-    ::rtl::OUString SAL_CALL getServiceName() throw(::com::sun::star::uno::RuntimeException);
-
-	// ::com::sun::star::beans::XMultiPropertySet
-    ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw(::com::sun::star::uno::RuntimeException);
-
-	// ::com::sun::star::lang::XServiceInfo
-	DECLIMPL_SERVICEINFO_DERIVED( UnoMultiPageModel, UnoControlModel, szServiceName_UnoMultiPageModel )
-
-};
-//	----------------------------------------------------
-//	class UnoGroupBoxControl
-//	----------------------------------------------------
-class UnoMultiPageControl :	public UnoControlBase
-{
-public:
-						UnoMultiPageControl();
-	::rtl::OUString		GetComponentServiceName();
-
-    sal_Bool SAL_CALL isTransparent(  ) throw(::com::sun::star::uno::RuntimeException);
-
-	// ::com::sun::star::lang::XServiceInfo
-	DECLIMPL_SERVICEINFO_DERIVED( UnoMultiPageControl, UnoControlBase, szServiceName_UnoMultiPageControl )
-
-};
-
 //  ----------------------------------------------------
 //  class UnoFixedTextControl
 //  ----------------------------------------------------
diff --git toolkit/inc/toolkit/helper/property.hxx toolkit/inc/toolkit/helper/property.hxx
index 4aee234..90604f0 100644
--- toolkit/inc/toolkit/helper/property.hxx
+++ toolkit/inc/toolkit/helper/property.hxx
@@ -199,6 +199,8 @@ namespace rtl {
 #define BASEPROPERTY_ENABLEVISIBLE                  145  // sal_Bool
 #define BASEPROPERTY_GROUPNAME                      146  // ::rtl::OUString
 #define BASEPROPERTY_VBAFORM                        147  // sal_Boo
+#define BASEPROPERTY_MULTIPAGEVALUE                 148  // sal_Int32
+
 
 
 // Keine gebundenen Properties, werden immer aus der Property BASEPROPERTY_FONTDESCRIPTOR entnommen.
diff --git toolkit/inc/toolkit/helper/servicenames.hxx toolkit/inc/toolkit/helper/servicenames.hxx
index 8ba2af3..1d09d14 100644
--- toolkit/inc/toolkit/helper/servicenames.hxx
+++ toolkit/inc/toolkit/helper/servicenames.hxx
@@ -43,6 +43,12 @@ extern const sal_Char __FAR_DATA szServiceName_UnoControlContainer[], szServiceN
 extern const sal_Char __FAR_DATA szServiceName_UnoMultiPageControl[], szServiceName2_UnoMultiPageControl[];
 extern const sal_Char __FAR_DATA szServiceName_UnoMultiPageModel[], szServiceName2_UnoMultiPageModel[];
 extern const sal_Char __FAR_DATA szServiceName_UnoControlContainerModel[], szServiceName2_UnoControlContainerModel[];
+extern const sal_Char __FAR_DATA szServiceName_UnoMultiPageControl[], szServiceName2_UnoMultiPageControl[];
+extern const sal_Char __FAR_DATA szServiceName_UnoMultiPageModel[], szServiceName2_UnoMultiPageModel[];
+extern const sal_Char __FAR_DATA szServiceName_UnoPageControl[], szServiceName2_UnoPageControl[];
+extern const sal_Char __FAR_DATA szServiceName_UnoPageModel[], szServiceName2_UnoPageModel[];
+extern const sal_Char __FAR_DATA szServiceName_UnoFrameControl[], szServiceName2_UnoFrameControl[];
+extern const sal_Char __FAR_DATA szServiceName_UnoFrameModel[], szServiceName2_UnoFrameModel[];
 extern const sal_Char __FAR_DATA szServiceName_TabController[], szServiceName2_TabController[];
 extern const sal_Char __FAR_DATA szServiceName_TabControllerModel[], szServiceName2_TabControllerModel[];
 extern const sal_Char __FAR_DATA szServiceName_UnoControlDialog[], szServiceName2_UnoControlDialog[];
diff --git toolkit/source/awt/vclxtabcontrol.cxx toolkit/source/awt/vclxtabcontrol.cxx
index 908554c..73856f9 100644
--- toolkit/source/awt/vclxtabcontrol.cxx
+++ toolkit/source/awt/vclxtabcontrol.cxx
@@ -29,7 +29,7 @@
  *
  ************************************************************************/
 
-#include "vclxtabcontrol.hxx"
+#include <vclxtabcontrol.hxx>
 
 #include <com/sun/star/awt/PosSize.hpp>
 #include <sal/macros.h>
diff --git toolkit/source/awt/vclxtabcontrol.hxx toolkit/source/awt/vclxtabcontrol.hxx
index 85c964b..2d3ae74 100644
--- toolkit/source/awt/vclxtabcontrol.hxx
+++ toolkit/source/awt/vclxtabcontrol.hxx
@@ -126,6 +126,8 @@ public:
         ChildProps( VCLXTabControl::ChildData *pData );
     };
 
+    inline TabControl *getTabControl() const throw (::com::sun::star::uno::RuntimeException);
+
 protected:
     ChildData *createChild( css::uno::Reference< css::awt::XLayoutConstrains > const& xChild );
     ChildProps *createChildProps( Box_Base::ChildData* pData );
@@ -136,7 +138,6 @@ protected:
     std::list< ::com::sun::star::uno::Reference
                < ::com::sun::star::awt::XTabListener > > mxTabListeners;
 
-    inline TabControl *getTabControl() const throw (::com::sun::star::uno::RuntimeException);
 
 private:
     VCLXTabControl( const VCLXTabControl& );            // never implemented
diff --git toolkit/source/awt/vclxtabpage.cxx toolkit/source/awt/vclxtabpage.cxx
index 6d71427..0fc7b67 100644
--- toolkit/source/awt/vclxtabpage.cxx
+++ toolkit/source/awt/vclxtabpage.cxx
@@ -33,7 +33,8 @@
  *
  ************************************************************************/
 
-#include "vclxtabpage.hxx"
+#include <vclxtabpage.hxx>
+
 #include "forward.hxx"
 
 #include <com/sun/star/awt/PosSize.hpp>
diff --git toolkit/source/awt/vclxtoolkit.cxx toolkit/source/awt/vclxtoolkit.cxx
index d5b70de..de0d916 100644
--- toolkit/source/awt/vclxtoolkit.cxx
+++ toolkit/source/awt/vclxtoolkit.cxx
@@ -122,6 +122,7 @@
 
 #include <tools/debug.hxx>
 #include <comphelper/processfactory.hxx>
+#include "awt/vclxtabcontrol.hxx"
 
 namespace css = ::com::sun::star;
 
@@ -289,6 +290,7 @@ static ComponentInfo __FAR_DATA aComponentInfos [] =
     { "floatingwindow",		WINDOW_FLOATINGWINDOW },
     { "framewindow",		VCLWINDOW_FRAMEWINDOW },
     { "groupbox",			WINDOW_GROUPBOX },
+	{ "frame",			WINDOW_GROUPBOX },
     { "helpbutton",			WINDOW_HELPBUTTON },
     { "imagebutton",		WINDOW_IMAGEBUTTON },
     { "imageradiobutton",	WINDOW_IMAGERADIOBUTTON },
@@ -629,7 +631,14 @@ Window*	VCLXToolkit::ImplCreateWindow( VCLXWindow** ppNewComp,
 
     Window* pNewWindow = NULL;
     sal_uInt16 nType = ImplGetComponentType( aServiceName );
-
+    bool bFrameControl = false;
+    if ( aServiceName == String( RTL_CONSTASCII_USTRINGPARAM("frame") ) )
+        bFrameControl = true;
+    if ( aServiceName == String( RTL_CONSTASCII_USTRINGPARAM("tabcontrolnotabs") ) )
+    {
+        nWinBits |= WB_NOBORDER;
+        nType = ImplGetComponentType( String( RTL_CONSTASCII_USTRINGPARAM("tabcontrol") ) );
+    }
     if ( !pParent )
     {
         // Wenn die Component einen Parent braucht, dann NULL zurueckgeben,
@@ -718,7 +727,15 @@ Window*	VCLXToolkit::ImplCreateWindow( VCLXWindow** ppNewComp,
                 pNewWindow = new FloatingWindow( pParent, nWinBits );
             break;
             case WINDOW_GROUPBOX:
-                pNewWindow = new GroupBox( pParent, nWinBits );
+                        {
+                                if ( bFrameControl )
+                                {
+                                    *ppNewComp = new VCLXFrame;
+				    pNewWindow = new GroupBox( pParent, nWinBits | TEXT_DRAW_TOP);
+                                }
+                                else 
+				    pNewWindow = new GroupBox( pParent, nWinBits );
+                        }
             break;
             case WINDOW_HELPBUTTON:
                 pNewWindow = new HelpButton( pParent, nWinBits );
@@ -858,6 +875,7 @@ Window*	VCLXToolkit::ImplCreateWindow( VCLXWindow** ppNewComp,
             break;
             case WINDOW_TABCONTROL:
                 pNewWindow = new TabControl( pParent, nWinBits );
+                *ppNewComp = new VCLXMultiPage;
             break;
             case WINDOW_TABDIALOG:
                 pNewWindow = new TabDialog( pParent, nWinBits );
diff --git toolkit/source/awt/vclxwindows.cxx toolkit/source/awt/vclxwindows.cxx
index 7b2f801..6ae4b6c 100644
--- toolkit/source/awt/vclxwindows.cxx
+++ toolkit/source/awt/vclxwindows.cxx
@@ -2195,6 +2195,7 @@ void VCLXDialog::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds )
 
 VCLXDialog::VCLXDialog()
 {
+    OSL_TRACE("XDialog created");
 }
 
 VCLXDialog::~VCLXDialog()
@@ -2384,6 +2385,274 @@ throw(::com::sun::star::uno::RuntimeException)
     }
 }
 
+
+//	----------------------------------------------------
+//	class VCLXTabPage
+//	----------------------------------------------------
+VCLXMultiPage::VCLXMultiPage() : mTabId( 1 )
+{
+    OSL_TRACE("VCLXMultiPage::VCLXMultiPage()" );
+}
+
+void VCLXMultiPage::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds )
+{
+    PushPropertyIds( rIds,
+                     BASEPROPERTY_BACKGROUNDCOLOR,
+                     BASEPROPERTY_DEFAULTCONTROL,
+                     BASEPROPERTY_ENABLED,
+                     BASEPROPERTY_MULTIPAGEVALUE,
+                     BASEPROPERTY_ENABLEVISIBLE,
+                     BASEPROPERTY_FONTDESCRIPTOR,
+                     BASEPROPERTY_GRAPHIC,
+                     BASEPROPERTY_HELPTEXT,
+                     BASEPROPERTY_HELPURL,
+                     BASEPROPERTY_IMAGEALIGN,
+                     BASEPROPERTY_IMAGEPOSITION,
+                     BASEPROPERTY_IMAGEURL,
+                     BASEPROPERTY_PRINTABLE,
+                     BASEPROPERTY_TABSTOP,
+                     BASEPROPERTY_FOCUSONCLICK,
+                     0);
+    VCLXContainer::ImplGetPropertyIds( rIds );
+}
+
+VCLXMultiPage::~VCLXMultiPage()
+{
+}
+
+::com::sun::star::uno::Any SAL_CALL VCLXMultiPage::queryInterface(const ::com::sun::star::uno::Type & rType )
+throw(::com::sun::star::uno::RuntimeException)
+{
+    uno::Any aRet = ::cppu::queryInterface( rType, static_cast< awt::XSimpleTabController*>( this ) );
+
+    return ( aRet.hasValue() ? aRet : VCLXContainer::queryInterface( rType ) );
+}
+
+// ::com::sun::star::lang::XTypeProvider
+IMPL_XTYPEPROVIDER_START( VCLXMultiPage )
+    VCLXContainer::getTypes()
+IMPL_XTYPEPROVIDER_END
+
+// ::com::sun::star::awt::XView
+void SAL_CALL VCLXMultiPage::draw( sal_Int32 nX, sal_Int32 nY )
+throw(::com::sun::star::uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    Window* pWindow = GetWindow();
+
+    if ( pWindow )
+    {
+        OutputDevice* pDev = VCLUnoHelper::GetOutputDevice( getGraphics() );
+        if ( !pDev )
+            pDev = pWindow->GetParent();
+
+        Size aSize = pDev->PixelToLogic( pWindow->GetSizePixel() );
+        Point aPos = pDev->PixelToLogic( Point( nX, nY ) );
+
+        pWindow->Draw( pDev, aPos, aSize, WINDOW_DRAW_NOCONTROLS );
+    }
+}
+
+// ::com::sun::star::awt::XDevice,
+::com::sun::star::awt::DeviceInfo SAL_CALL VCLXMultiPage::getInfo()
+throw(::com::sun::star::uno::RuntimeException)
+{
+    ::com::sun::star::awt::DeviceInfo aInfo = VCLXDevice::getInfo();
+    return aInfo;
+}
+
+uno::Any SAL_CALL VCLXMultiPage::getProperty( const ::rtl::OUString& PropertyName ) throw(::com::sun::star::uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    OSL_TRACE(" **** VCLXMultiPage::getProperty( %s )", 
+        rtl::OUStringToOString( PropertyName,
+        RTL_TEXTENCODING_UTF8 ).getStr() );
+    ::com::sun::star::uno::Any aProp;
+    sal_uInt16 nPropType = GetPropertyId( PropertyName );
+    switch ( nPropType )
+    {
+
+        case BASEPROPERTY_MULTIPAGEVALUE:
+        {
+            aProp <<= getActiveTabID();
+        }
+        break;
+        default:    
+            aProp <<= VCLXContainer::getProperty( PropertyName );
+    }
+    return aProp;
+}
+
+void SAL_CALL VCLXMultiPage::setProperty(
+    const ::rtl::OUString& PropertyName,
+    const ::com::sun::star::uno::Any& Value )
+throw(::com::sun::star::uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    OSL_TRACE(" **** VCLXMultiPage::setProperty( %s )", rtl::OUStringToOString( PropertyName, RTL_TEXTENCODING_UTF8 ).getStr() );
+
+    TabControl* pTabControl = (TabControl*)GetWindow();
+    if ( pTabControl )
+    {
+        sal_Bool bVoid = Value.getValueType().getTypeClass() == ::com::sun::star::uno::TypeClass_VOID;
+
+        sal_uInt16 nPropType = GetPropertyId( PropertyName );
+        switch ( nPropType )
+        {
+            case BASEPROPERTY_MULTIPAGEVALUE:
+            {
+                OSL_TRACE("***MULTIPAGE VALUE");
+                sal_Int32 nId(0);
+                Value >>= nId;
+                // when the multipage is created we attempt to set the activepage
+                // but no pages created
+                if ( nId && nId <= getWindows().getLength() )
+                    activateTab( nId );
+            }
+            case BASEPROPERTY_GRAPHIC:
+            {
+                Reference< XGraphic > xGraphic;
+                if (( Value >>= xGraphic ) && xGraphic.is() )
+                {
+                    Image aImage( xGraphic );
+
+                    Wallpaper aWallpaper( aImage.GetBitmapEx());
+                    aWallpaper.SetStyle( WALLPAPER_SCALE );
+                    pTabControl->SetBackground( aWallpaper );
+                }
+                else if ( bVoid || !xGraphic.is() )
+                {
+                    Color aColor = pTabControl->GetControlBackground().GetColor();
+                    if ( aColor == COL_AUTO )
+                        aColor = pTabControl->GetSettings().GetStyleSettings().GetDialogColor();
+
+                    Wallpaper aWallpaper( aColor );
+                    pTabControl->SetBackground( aWallpaper );
+                }
+            }
+            break;
+
+            default:
+            {
+                VCLXContainer::setProperty( PropertyName, Value );
+            }
+        }
+    }
+}
+
+TabControl *VCLXMultiPage::getTabControl() const throw (uno::RuntimeException)
+{
+    TabControl *pTabControl = dynamic_cast< TabControl* >( GetWindow() );
+    if ( pTabControl )
+        return pTabControl;
+    throw uno::RuntimeException();
+}
+sal_Int32 SAL_CALL VCLXMultiPage::insertTab() throw (uno::RuntimeException)
+{
+    TabControl *pTabControl = getTabControl();
+    TabPage* pTab = new TabPage( pTabControl );
+    rtl::OUString title (RTL_CONSTASCII_USTRINGPARAM( "" ) );
+    return static_cast< sal_Int32 >( insertTab( pTab, title ) );
+}
+
+USHORT VCLXMultiPage::insertTab( TabPage* pPage, rtl::OUString& sTitle )
+{
+    TabControl *pTabControl = getTabControl();
+    USHORT id = sal::static_int_cast< USHORT >( mTabId++ );
+    pTabControl->InsertPage( id, sTitle.getStr(), TAB_APPEND );
+    pTabControl->SetTabPage( id, pPage );
+    return id;
+}
+
+void SAL_CALL VCLXMultiPage::removeTab( sal_Int32 ID ) throw (uno::RuntimeException, lang::IndexOutOfBoundsException)
+{
+    TabControl *pTabControl = getTabControl();
+    if ( pTabControl->GetTabPage( sal::static_int_cast< USHORT >( ID ) ) == NULL )
+        throw lang::IndexOutOfBoundsException();
+    pTabControl->RemovePage( sal::static_int_cast< USHORT >( ID ) );
+}
+
+void SAL_CALL VCLXMultiPage::activateTab( sal_Int32 ID ) throw (uno::RuntimeException, lang::IndexOutOfBoundsException)
+{
+    TabControl *pTabControl = getTabControl();
+    OSL_TRACE("Attempting to activate tab %d, active tab is %d, numtabs is %d", ID, getActiveTabID(), getWindows().getLength() );
+    if ( pTabControl->GetTabPage( sal::static_int_cast< USHORT >( ID ) ) == NULL )
+        throw lang::IndexOutOfBoundsException();
+    pTabControl->SelectTabPage( sal::static_int_cast< USHORT >( ID ) );
+}
+
+sal_Int32 SAL_CALL VCLXMultiPage::getActiveTabID() throw (uno::RuntimeException)
+{
+    return getTabControl()->GetCurPageId( );
+}
+
+void SAL_CALL VCLXMultiPage::addTabListener( const uno::Reference< awt::XTabListener >& xListener ) throw (uno::RuntimeException)
+{
+    for ( std::list< uno::Reference
+              < awt::XTabListener > >::const_iterator it
+              = mxTabListeners.begin(); it != mxTabListeners.end(); it++ )
+    {
+        if ( *it == xListener )
+            // already added
+            return;
+    }
+    mxTabListeners.push_back( xListener );
+}
+
+void SAL_CALL VCLXMultiPage::removeTabListener( const uno::Reference< awt::XTabListener >& xListener ) throw (uno::RuntimeException)
+{
+    for ( std::list< uno::Reference
+              < awt::XTabListener > >::iterator it
+              = mxTabListeners.begin(); it != mxTabListeners.end(); it++ )
+    {
+        if ( *it == xListener )
+        {
+            mxTabListeners.erase( it );
+            break;
+        }
+    }
+}
+
+void SAL_CALL VCLXMultiPage::setTabProps( sal_Int32 ID, const uno::Sequence< beans::NamedValue >& Properties ) throw (uno::RuntimeException, lang::IndexOutOfBoundsException)
+{
+    TabControl *pTabControl = getTabControl();
+    if ( pTabControl->GetTabPage( sal::static_int_cast< USHORT >( ID ) ) == NULL )
+        throw lang::IndexOutOfBoundsException();
+
+    for ( int i = 0; i < Properties.getLength(); i++ )
+    {
+        const rtl::OUString &name = Properties[i].Name;
+        const uno::Any &value = Properties[i].Value;
+
+        if ( name  == rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Title" ) ) )
+        {
+            rtl::OUString title = value.get<rtl::OUString>();
+            pTabControl->SetPageText( sal::static_int_cast< USHORT >( ID ), title.getStr() );
+        }
+    }
+}
+
+uno::Sequence< beans::NamedValue > SAL_CALL VCLXMultiPage::getTabProps( sal_Int32 ID )
+    throw (lang::IndexOutOfBoundsException, uno::RuntimeException)
+{
+    TabControl *pTabControl = getTabControl();
+    if ( pTabControl->GetTabPage( sal::static_int_cast< USHORT >( ID ) ) == NULL )
+        throw lang::IndexOutOfBoundsException();
+
+#define ADD_PROP( seq, i, name, val ) {                                \
+        beans::NamedValue value;                                                  \
+        value.Name = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( name ) ); \
+        value.Value = uno::makeAny( val );                                      \
+        seq[i] = value;                                                    \
+    }
+
+    uno::Sequence< beans::NamedValue > props( 2 );
+    ADD_PROP( props, 0, "Title", rtl::OUString( pTabControl->GetPageText( sal::static_int_cast< USHORT >( ID ) ) ) );
+    ADD_PROP( props, 1, "Position", pTabControl->GetPagePos( sal::static_int_cast< USHORT >( ID ) ) );
+#undef ADD_PROP
+    return props;
+}
+
 //	----------------------------------------------------
 //	class VCLXTabPage
 //	----------------------------------------------------
@@ -2391,6 +2660,27 @@ VCLXTabPage::VCLXTabPage()
 {
 }
 
+void VCLXTabPage::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds )
+{
+    PushPropertyIds( rIds,
+                     BASEPROPERTY_BACKGROUNDCOLOR,
+                     BASEPROPERTY_DEFAULTCONTROL,
+                     BASEPROPERTY_ENABLED,
+                     BASEPROPERTY_ENABLEVISIBLE,
+                     BASEPROPERTY_FONTDESCRIPTOR,
+                     BASEPROPERTY_GRAPHIC,
+                     BASEPROPERTY_HELPTEXT,
+                     BASEPROPERTY_HELPURL,
+                     BASEPROPERTY_IMAGEALIGN,
+                     BASEPROPERTY_IMAGEPOSITION,
+                     BASEPROPERTY_IMAGEURL,
+                     BASEPROPERTY_PRINTABLE,
+                     BASEPROPERTY_TABSTOP,
+                     BASEPROPERTY_FOCUSONCLICK,
+                     0);
+    VCLXContainer::ImplGetPropertyIds( rIds );
+}
+
 VCLXTabPage::~VCLXTabPage()
 {
 }
@@ -2480,6 +2770,14 @@ throw(::com::sun::star::uno::RuntimeException)
     }
 }
 
+TabPage *VCLXTabPage::getTabPage() const throw (uno::RuntimeException)
+{
+    TabPage *pTabPage = dynamic_cast< TabPage* >( GetWindow() );
+    if ( pTabPage )
+        return pTabPage;
+    throw uno::RuntimeException();
+}
+
 //	----------------------------------------------------
 //  class VCLXFixedHyperlink
 //	----------------------------------------------------
@@ -6064,4 +6362,91 @@ VCLXToolBox::~VCLXToolBox()
 {
     return getAccessibleFactory().createAccessibleContext( this );
 }
+//	----------------------------------------------------
+//	class VCLXFrame
+//	----------------------------------------------------
+VCLXFrame::VCLXFrame()
+{
+}
 
+void VCLXFrame::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds )
+{
+    PushPropertyIds( rIds,
+                     BASEPROPERTY_BACKGROUNDCOLOR,
+                     BASEPROPERTY_DEFAULTCONTROL,
+                     BASEPROPERTY_ENABLED,
+                     BASEPROPERTY_ENABLEVISIBLE,
+                     BASEPROPERTY_FONTDESCRIPTOR,
+                     BASEPROPERTY_GRAPHIC,
+                     BASEPROPERTY_HELPTEXT,
+                     BASEPROPERTY_HELPURL,
+                     BASEPROPERTY_PRINTABLE,
+                     BASEPROPERTY_LABEL,
+                     0);
+    VCLXContainer::ImplGetPropertyIds( rIds );
+}
+
+VCLXFrame::~VCLXFrame()
+{
+}
+
+::com::sun::star::uno::Any SAL_CALL VCLXFrame::queryInterface(const ::com::sun::star::uno::Type & rType )
+throw(::com::sun::star::uno::RuntimeException)
+{
+	return VCLXContainer::queryInterface( rType );
+}
+
+// ::com::sun::star::lang::XTypeProvider
+IMPL_XTYPEPROVIDER_START( VCLXFrame )
+	VCLXContainer::getTypes()
+IMPL_XTYPEPROVIDER_END
+
+// ::com::sun::star::awt::XView
+void SAL_CALL VCLXFrame::draw( sal_Int32 nX, sal_Int32 nY )
+throw(::com::sun::star::uno::RuntimeException)
+{
+	::vos::OGuard aGuard( GetMutex() );
+	Window* pWindow = GetWindow();
+
+	if ( pWindow )
+	{
+		OutputDevice* pDev = VCLUnoHelper::GetOutputDevice( getGraphics() );
+		if ( !pDev )
+			pDev = pWindow->GetParent();
+
+		Size aSize = pDev->PixelToLogic( pWindow->GetSizePixel() );
+		Point aPos = pDev->PixelToLogic( Point( nX, nY ) );
+
+		pWindow->Draw( pDev, aPos, aSize, WINDOW_DRAW_NOCONTROLS );
+    }
+}
+
+// ::com::sun::star::awt::XDevice,
+::com::sun::star::awt::DeviceInfo SAL_CALL VCLXFrame::getInfo()
+throw(::com::sun::star::uno::RuntimeException)
+{
+	::com::sun::star::awt::DeviceInfo aInfo = VCLXDevice::getInfo();
+	return aInfo;
+}
+
+void SAL_CALL VCLXFrame::setProperty(
+    const ::rtl::OUString& PropertyName,
+    const ::com::sun::star::uno::Any& Value )
+throw(::com::sun::star::uno::RuntimeException)
+{
+	::vos::OGuard aGuard( GetMutex() );
+
+#if OSL_DEBUG_LEVEL > 0
+	sal_Bool bVoid = Value.getValueType().getTypeClass() == ::com::sun::star::uno::TypeClass_VOID;
+    (void)bVoid;
+#endif
+
+	sal_uInt16 nPropType = GetPropertyId( PropertyName );
+	switch ( nPropType )
+	{
+            default:
+			{
+				VCLXContainer::setProperty( PropertyName, Value );
+			}
+        }
+}
diff --git toolkit/source/controls/dialogcontrol.cxx toolkit/source/controls/dialogcontrol.cxx
index b977909..7da2092 100644
--- toolkit/source/controls/dialogcontrol.cxx
+++ toolkit/source/controls/dialogcontrol.cxx
@@ -73,6 +73,11 @@
 #include <functional>
 #include "tools/urlobj.hxx"
 #include "osl/file.hxx"
+#include <com/sun/star/awt/XSimpleTabController.hpp>
+#include <vcl/tabctrl.hxx>
+#include <vcl/tabpage.hxx>
+#include <vcl/button.hxx>
+#include <toolkit/awt/vclxwindows.hxx>
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
@@ -92,8 +97,6 @@ using namespace toolkit;
 //HELPER
 ::rtl::OUString getPhysicalLocation( const ::com::sun::star::uno::Any& rbase, const ::com::sun::star::uno::Any& rUrl );
 
-uno::Reference< graphic::XGraphic > getGraphicFromURL_nothrow( uno::Reference< graphic::XGraphicObject >& rxGrfObj, const ::rtl::OUString& _rURL );
-
 struct LanguageDependentProp
 {
     const char* pPropName;
@@ -120,32 +123,6 @@ namespace
         return s_aLanguageDependentProperties;
     }
  
-    static uno::Reference< graphic::XGraphic > lcl_getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL )
-    {
-        uno::Reference< graphic::XGraphic > xGraphic;
-        if ( !_rURL.getLength() )
-            return xGraphic;
-
-        try
-        {
-            ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
-            uno::Reference< graphic::XGraphicProvider > xProvider;
-            if ( aContext.createComponent( "com.sun.star.graphic.GraphicProvider", xProvider ) )
-            {
-                uno::Sequence< beans::PropertyValue > aMediaProperties(1);
-                aMediaProperties[0].Name = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "URL" ) );
-                aMediaProperties[0].Value <<= _rURL;
-                xGraphic = xProvider->queryGraphic( aMediaProperties );
-            }
-        }
-        catch( const Exception& )
-        {
-            DBG_UNHANDLED_EXCEPTION();
-        }
-
-        return xGraphic;
-    }
-
     static ::rtl::OUString lcl_GetStringProperty( const ::rtl::OUString& sProperty, const Reference< XPropertySet >& xSet )
     {
         ::rtl::OUString sValue;
@@ -266,33 +243,37 @@ static const ::rtl::OUString& getStepPropertyName( )
 //	----------------------------------------------------
 //	class UnoControlDialogModel
 //	----------------------------------------------------
-UnoControlDialogModel::UnoControlDialogModel()
+UnoControlDialogModel::UnoControlDialogModel( bool regProps )
     :maContainerListeners( *this )
     ,maChangeListeners ( GetMutex() )
-	,mbGroupsUpToDate( sal_False ), mbAdjustingGraphic( false )
+    ,mbGroupsUpToDate( sal_False )
+    ,mbAdjustingGraphic( false )
 {
-    ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
-//	ImplRegisterProperty( BASEPROPERTY_BORDER );
-    ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
-    ImplRegisterProperty( BASEPROPERTY_ENABLED );
-    ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
-//	ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
-    ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
-    ImplRegisterProperty( BASEPROPERTY_HELPURL );
-    ImplRegisterProperty( BASEPROPERTY_TITLE );
-    ImplRegisterProperty( BASEPROPERTY_SIZEABLE );
-    ImplRegisterProperty( BASEPROPERTY_DESKTOP_AS_PARENT );
-    ImplRegisterProperty( BASEPROPERTY_DECORATION );
-    ImplRegisterProperty( BASEPROPERTY_DIALOGSOURCEURL );
-    ImplRegisterProperty( BASEPROPERTY_GRAPHIC );
-    ImplRegisterProperty( BASEPROPERTY_IMAGEURL );
-
-    Any aBool;
-    aBool <<= (sal_Bool) sal_True;
-    ImplRegisterProperty( BASEPROPERTY_MOVEABLE, aBool );
-    ImplRegisterProperty( BASEPROPERTY_CLOSEABLE, aBool );
-	aBool <<= (sal_Bool) sal_False;
-	ImplRegisterProperty( BASEPROPERTY_VBAFORM, aBool );
+    if ( regProps )
+    {
+        ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
+    //	ImplRegisterProperty( BASEPROPERTY_BORDER );
+        ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
+        ImplRegisterProperty( BASEPROPERTY_ENABLED );
+        ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
+    //	ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
+        ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
+        ImplRegisterProperty( BASEPROPERTY_HELPURL );
+        ImplRegisterProperty( BASEPROPERTY_TITLE );
+        ImplRegisterProperty( BASEPROPERTY_SIZEABLE );
+        ImplRegisterProperty( BASEPROPERTY_DESKTOP_AS_PARENT );
+        ImplRegisterProperty( BASEPROPERTY_DECORATION );
+        ImplRegisterProperty( BASEPROPERTY_DIALOGSOURCEURL );
+        ImplRegisterProperty( BASEPROPERTY_GRAPHIC );
+        ImplRegisterProperty( BASEPROPERTY_IMAGEURL );
+    
+        Any aBool;
+        aBool <<= (sal_Bool) sal_True;
+        ImplRegisterProperty( BASEPROPERTY_MOVEABLE, aBool );
+        ImplRegisterProperty( BASEPROPERTY_CLOSEABLE, aBool );
+    	aBool <<= (sal_Bool) sal_False;
+    	ImplRegisterProperty( BASEPROPERTY_VBAFORM, aBool );
+    }
 }
 
 UnoControlDialogModel::UnoControlDialogModel( const UnoControlDialogModel& rModel )
@@ -300,7 +281,9 @@ UnoControlDialogModel::UnoControlDialogModel( const UnoControlDialogModel& rMode
     , UnoControlDialogModel_Base( rModel )
     , maContainerListeners( *this )
     , maChangeListeners ( GetMutex() )
-	, mbGroupsUpToDate( sal_False ), mbAdjustingGraphic( false )
+    , mbGroupsUpToDate( sal_False )
+    , mxGrfObj( rModel.mxGrfObj )
+    , mbAdjustingGraphic( false )
 {
 }
 
@@ -333,7 +316,7 @@ Sequence< Type > UnoControlDialogModel::getTypes() throw(RuntimeException)
 
 void SAL_CALL UnoControlDialogModel::setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception)
 {
-    UnoControlModel::setFastPropertyValue_NoBroadcast( nHandle, rValue );
+    UnoControlDialogModel_Base::setFastPropertyValue_NoBroadcast( nHandle, rValue );
     try
     {
         switch ( nHandle )
@@ -344,7 +327,7 @@ void SAL_CALL UnoControlDialogModel::setFastPropertyValue_NoBroadcast( sal_Int32
                 mbAdjustingGraphic = true;
                 ::rtl::OUString sImageURL;
                 OSL_VERIFY( rValue >>= sImageURL );
-                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( getGraphicFromURL_nothrow( mxGrfObj, sImageURL ) ) );
+                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( ImageHelper::getGraphicAndGraphicObjectFromURL_nothrow( mxGrfObj, sImageURL ) ) );
                 mbAdjustingGraphic = false;
             }
             break;
@@ -507,6 +490,10 @@ Reference< XInterface > UnoControlDialogModel::createInstance( const ::rtl::OUSt
         pNewModel = new OGeometryControlModel< UnoTreeModel >;
     else if ( aServiceSpecifier.compareToAscii( szServiceName_GridControlModel ) == 0 )
         pNewModel = new OGeometryControlModel< UnoGridModel >;
+    else if ( aServiceSpecifier.compareToAscii( szServiceName_UnoMultiPageModel ) == 0 )
+        pNewModel = new OGeometryControlModel< UnoMultiPageModel >;
+    else if ( aServiceSpecifier.compareToAscii( szServiceName_UnoFrameModel ) == 0 )
+        pNewModel = new OGeometryControlModel< UnoFrameModel >;
 
     if ( !pNewModel )
     {
@@ -546,7 +533,7 @@ Sequence< ::rtl::OUString > UnoControlDialogModel::getAvailableServiceNames() th
     static Sequence< ::rtl::OUString >* pNamesSeq = NULL;
     if ( !pNamesSeq )
     {
-        pNamesSeq = new Sequence< ::rtl::OUString >( 21 );
+        pNamesSeq = new Sequence< ::rtl::OUString >( 22 );
         ::rtl::OUString* pNames = pNamesSeq->getArray();
         pNames[0] = ::rtl::OUString::createFromAscii( szServiceName2_UnoControlEditModel );
         pNames[1] = ::rtl::OUString::createFromAscii( szServiceName2_UnoControlFormattedFieldModel );
@@ -570,6 +557,7 @@ Sequence< ::rtl::OUString > UnoControlDialogModel::getAvailableServiceNames() th
         pNames[19] = ::rtl::OUString::createFromAscii( szServiceName2_UnoControlRoadmapModel );
         pNames[20] = ::rtl::OUString::createFromAscii( szServiceName_TreeControlModel );
         pNames[20] = ::rtl::OUString::createFromAscii( szServiceName_GridControlModel );
+        pNames[21] = ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageModel );
 
     }
     return *pNamesSeq;
@@ -678,8 +666,14 @@ void UnoControlDialogModel::insertByName( const ::rtl::OUString& aName, const An
                 if ( xPropInfo.get()->hasPropertyByName(  sImageSourceProperty ))
                 {
                     Any aUrl = xProps.get()->getPropertyValue(  sImageSourceProperty );
-
-                    ::rtl::OUString absoluteUrl =
+                     
+                    ::rtl::OUString absoluteUrl;
+                    aUrl >>= absoluteUrl;
+                    if ( absoluteUrl.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) == 0 )
+					xProps.get()->setPropertyValue(  sImageSourceProperty , aUrl );
+                    // Now we inherit from this class, no all containers have
+                    // DialogSourceURL
+                    else if ( getPropertySetInfo()->hasPropertyByName( GetPropertyName( BASEPROPERTY_DIALOGSOURCEURL ) ) )
                         getPhysicalLocation( getPropertyValue( GetPropertyName( BASEPROPERTY_DIALOGSOURCEURL ) ), aUrl );
 
                     aUrl <<= absoluteUrl;
@@ -1387,67 +1381,535 @@ throw ( RuntimeException )
     }
 }
 
-// ============================================================================
-// = class UnoDialogControl
-// ============================================================================
+static ::Size ImplMapPixelToAppFont( OutputDevice* pOutDev, const ::Size& aSize )
+{
+    ::Size aTmp = pOutDev->PixelToLogic( aSize, MAP_APPFONT );
+    return aTmp;
+}
 
-UnoDialogControl::UnoDialogControl() :
-    maTopWindowListeners( *this ),
-    mbWindowListener(false),
-    mbSizeModified(false),
-    mbPosModified(false)
+//	----------------------------------------------------
+//	Helper Method to convert relative url to physical location
+//	----------------------------------------------------
+
+::rtl::OUString getPhysicalLocation( const ::com::sun::star::uno::Any& rbase, const ::com::sun::star::uno::Any& rUrl )
 {
-    maComponentInfos.nWidth = 300;
-    maComponentInfos.nHeight = 450;
-    mxListener = new ResourceListener( Reference< util::XModifyListener >(
-                        static_cast< OWeakObject* >( this ), UNO_QUERY ));
+	
+	
+	::rtl::OUString ret;
+
+	::rtl::OUString baseLocation;
+	::rtl::OUString url;
+
+	rbase  >>= baseLocation;
+	rUrl  >>= url;
+
+	if ( url.getLength() )
+	{
+		INetURLObject urlObj(baseLocation);
+		urlObj.removeSegment();
+		baseLocation = urlObj.GetMainURL( INetURLObject::NO_DECODE );
+		::osl::FileBase::getAbsoluteFileURL( baseLocation, url, ret );
+	}
+
+	return ret;
 }
 
-::rtl::OUString UnoDialogControl::GetComponentServiceName()
+
+//	----------------------------------------------------
+//	class MultiPageControl
+//	----------------------------------------------------
+UnoMultiPageControl::UnoMultiPageControl()
 {
+	maComponentInfos.nWidth = 280;
+	maComponentInfos.nHeight = 400;
+}
 
-    sal_Bool bDecoration( sal_True );
-    ImplGetPropertyValue( GetPropertyName( BASEPROPERTY_DECORATION )) >>= bDecoration;
-    if ( bDecoration )
-        return ::rtl::OUString::createFromAscii( "Dialog" );
-    else
-        return ::rtl::OUString::createFromAscii( "TabPage" );
+UnoMultiPageControl::~UnoMultiPageControl()
+{
+}
+
+::rtl::OUString UnoMultiPageControl::GetComponentServiceName()
+{
+        sal_Bool bDecoration( sal_True );
+        ImplGetPropertyValue( GetPropertyName( BASEPROPERTY_DECORATION )) >>= bDecoration;
+        if ( bDecoration )
+	    return ::rtl::OUString::createFromAscii( "tabcontrol" );
+        // Hopefully we can tweak the tabcontrol to display without tabs
+	return ::rtl::OUString::createFromAscii( "tabcontrolnotabs" );
+}
+
+void UnoMultiPageControl::bindPage( const uno::Reference< awt::XControl >& _rxControl )
+{
+    uno::Reference< awt::XWindowPeer > xPage( _rxControl->getPeer() );
+    uno::Reference< awt::XSimpleTabController > xTabCntrl( getPeer(), uno::UNO_QUERY );        
+    uno::Reference< beans::XPropertySet > xProps( _rxControl->getModel(), uno::UNO_QUERY ); 
+    
+   VCLXTabPage* pXPage = dynamic_cast< VCLXTabPage* >( xPage.get() );
+   TabPage* pPage = pXPage ? pXPage->getTabPage() : NULL;
+    if ( xTabCntrl.is() && pPage )
+    {
+        VCLXMultiPage* pXTab = dynamic_cast< VCLXMultiPage* >( xTabCntrl.get() );
+        if ( pXTab )
+        {
+            rtl::OUString sTitle;
+            xProps->getPropertyValue( GetPropertyName( BASEPROPERTY_TITLE ) ) >>= sTitle;
+            pXTab->insertTab( pPage, sTitle); 
+        }
+/*
+        // some timing problem here, we get a crash with a single page multipage :-/ not sure if setting the active tab here makes sense at all ( anyway need to think about how is the best way to set the active page )
+        if ( pXTab->getWindows().getLength() == 1 ) // set the active tab to 1
+        {
+            Reference< XPropertySet > xMultiProps( getModel(), UNO_QUERY );
+            if ( xMultiProps.is() )
+                xMultiProps->setPropertyValue( GetPropertyName( BASEPROPERTY_MULTIPAGEVALUE ), uno::makeAny( xTabCntrl->getActiveTabID() ) );
+        }
+*/
+    }
+        
+}
+
+void UnoMultiPageControl::createPeer( const Reference< XToolkit > & rxToolkit, const Reference< XWindowPeer >  & rParentPeer ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    UnoControlContainer::createPeer( rxToolkit, rParentPeer );
+    uno::Sequence< uno::Reference< awt::XControl > > aCtrls = getControls();
+    sal_uInt32 nCtrls = aCtrls.getLength();
+    for( sal_uInt32 n = 0; n < nCtrls; n++ )
+       bindPage( aCtrls[ n ] ); 
+    sal_Int32 nActiveTab(0);
+    Reference< XPropertySet > xMultiProps( getModel(), UNO_QUERY );
+    xMultiProps->getPropertyValue( GetPropertyName( BASEPROPERTY_MULTIPAGEVALUE ) ) >>= nActiveTab;
+    if ( nActiveTab && nCtrls ) // Ensure peer is initialise with correct activated tab
+    {
+        uno::Reference< awt::XSimpleTabController > xTabCntrl( getPeer(), uno::UNO_QUERY );     
+        xTabCntrl->activateTab( nActiveTab );
+    }
+}
+   
+void    UnoMultiPageControl::impl_createControlPeerIfNecessary( const uno::Reference< awt::XControl >& _rxControl)
+{
+    OSL_PRECOND( _rxControl.is(), "UnoMultiPageControl::impl_createControlPeerIfNecessary: invalid control, this will crash!" );
+
+    // if the container already has a peer, then also create a peer for the control
+    uno::Reference< awt::XWindowPeer > xMyPeer( getPeer() );
+    
+    if( xMyPeer.is() )
+    {
+        _rxControl->createPeer( NULL, xMyPeer );
+        bindPage( _rxControl ); 
+        ImplActivateTabControllers();
+    }
+   
+}
+
+// ------------- UnoMultiPageModel -----------------
+
+UnoMultiPageModel::UnoMultiPageModel() : UnoControlDialogModel( false )
+{
+    ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
+    ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
+    ImplRegisterProperty( BASEPROPERTY_ENABLEVISIBLE );
+    ImplRegisterProperty( BASEPROPERTY_ENABLED );
+
+    ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
+    ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
+    ImplRegisterProperty( BASEPROPERTY_HELPURL );
+    ImplRegisterProperty( BASEPROPERTY_SIZEABLE );
+    //ImplRegisterProperty( BASEPROPERTY_DIALOGSOURCEURL );
+    ImplRegisterProperty( BASEPROPERTY_MULTIPAGEVALUE );
+    ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
+
+    Any aBool;
+    aBool <<= (sal_Bool) sal_True;
+    ImplRegisterProperty( BASEPROPERTY_MOVEABLE, aBool );
+    ImplRegisterProperty( BASEPROPERTY_CLOSEABLE, aBool );
+    ImplRegisterProperty( BASEPROPERTY_DECORATION, aBool );
+    // MultiPage Control has the tab stop property. And the default value is True.
+    ImplRegisterProperty( BASEPROPERTY_TABSTOP, aBool );
+}
+
+UnoMultiPageModel::UnoMultiPageModel( const UnoMultiPageModel& rModel )
+    : UnoControlDialogModel( rModel )
+{
+}
+
+UnoMultiPageModel::~UnoMultiPageModel() 
+{
+}
+
+UnoControlModel*
+UnoMultiPageModel::Clone() const 
+{
+    // clone the container itself
+    UnoMultiPageModel* pClone = new UnoMultiPageModel( *this );
+
+    // clone all children
+    ::std::for_each(
+        maModels.begin(), maModels.end(),
+        CloneControlModel( pClone->maModels )
+    );
+
+    return pClone;
+}
+
+::rtl::OUString UnoMultiPageModel::getServiceName() throw(::com::sun::star::uno::RuntimeException)
+{
+	return ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageModel );
+}
+
+uno::Any UnoMultiPageModel::ImplGetDefaultValue( sal_uInt16 nPropId ) const
+{
+	if ( nPropId == BASEPROPERTY_DEFAULTCONTROL )
+	{
+		uno::Any aAny;
+		aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageControl );
+		return aAny;
+	}
+	return UnoControlDialogModel::ImplGetDefaultValue( nPropId );
+}
+
+::cppu::IPropertyArrayHelper& UnoMultiPageModel::getInfoHelper()
+{
+	static UnoPropertyArrayHelper* pHelper = NULL;
+	if ( !pHelper )
+	{
+		uno::Sequence<sal_Int32>	aIDs = ImplGetPropertyIds();
+		pHelper = new UnoPropertyArrayHelper( aIDs );
+	}
+	return *pHelper;
+}
+
+// beans::XMultiPropertySet
+uno::Reference< beans::XPropertySetInfo > UnoMultiPageModel::getPropertySetInfo(  ) throw(uno::RuntimeException)
+{
+	static uno::Reference< beans::XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+	return xInfo;
+}
+
+void UnoMultiPageModel::insertByName( const ::rtl::OUString& aName, const Any& aElement ) throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
+{
+    Reference< XServiceInfo > xInfo;
+    aElement >>= xInfo;
+
+    if ( !xInfo.is() )
+        throw IllegalArgumentException();
+
+    // Only a Page model can be inserted into the multipage
+    if ( !xInfo->supportsService( rtl::OUString::createFromAscii( szServiceName_UnoPageModel ) ) )
+        throw IllegalArgumentException();
+
+    return UnoControlDialogModel::insertByName( aName, aElement );
+}
+
+// ----------------------------------------------------------------------------
+sal_Bool SAL_CALL UnoMultiPageModel::getGroupControl(  ) throw (RuntimeException)
+{
+    return sal_True;
+}
+
+//	----------------------------------------------------
+//	class UnoPageControl
+//	----------------------------------------------------
+UnoPageControl::UnoPageControl()
+{
+	maComponentInfos.nWidth = 280;
+	maComponentInfos.nHeight = 400;
+}
+
+UnoPageControl::~UnoPageControl()
+{
+}
+
+::rtl::OUString UnoPageControl::GetComponentServiceName()
+{
+	return ::rtl::OUString::createFromAscii( "tabpage" );
+}
+
+
+// ------------- UnoPageModel -----------------
+
+UnoPageModel::UnoPageModel() : UnoControlDialogModel( false )
+{
+    ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
+    ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
+    ImplRegisterProperty( BASEPROPERTY_ENABLED );
+    ImplRegisterProperty( BASEPROPERTY_ENABLEVISIBLE );
+
+    ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
+    ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
+    ImplRegisterProperty( BASEPROPERTY_HELPURL );
+    ImplRegisterProperty( BASEPROPERTY_TITLE );
+    ImplRegisterProperty( BASEPROPERTY_SIZEABLE );
+    ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
+//    ImplRegisterProperty( BASEPROPERTY_DIALOGSOURCEURL );
+
+    Any aBool;
+    aBool <<= (sal_Bool) sal_True;
+    ImplRegisterProperty( BASEPROPERTY_MOVEABLE, aBool );
+    ImplRegisterProperty( BASEPROPERTY_CLOSEABLE, aBool );
+    //ImplRegisterProperty( BASEPROPERTY_TABSTOP, aBool );
+}
+
+UnoPageModel::UnoPageModel( const UnoPageModel& rModel )
+    : UnoControlDialogModel( rModel )
+{
+}
+
+UnoPageModel::~UnoPageModel() 
+{
+}
+
+UnoControlModel*
+UnoPageModel::Clone() const 
+{
+    // clone the container itself
+    UnoPageModel* pClone = new UnoPageModel( *this );
+
+    // clone all children
+    ::std::for_each(
+        maModels.begin(), maModels.end(),
+        CloneControlModel( pClone->maModels )
+    );
+
+    return pClone;
+}
+
+::rtl::OUString UnoPageModel::getServiceName() throw(::com::sun::star::uno::RuntimeException)
+{
+	return ::rtl::OUString::createFromAscii( szServiceName_UnoPageModel );
+}
+
+uno::Any UnoPageModel::ImplGetDefaultValue( sal_uInt16 nPropId ) const
+{
+	if ( nPropId == BASEPROPERTY_DEFAULTCONTROL )
+	{
+		uno::Any aAny;
+		aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoPageControl );
+		return aAny;
+	}
+	return UnoControlDialogModel::ImplGetDefaultValue( nPropId );
+}
+
+::cppu::IPropertyArrayHelper& UnoPageModel::getInfoHelper()
+{
+	static UnoPropertyArrayHelper* pHelper = NULL;
+	if ( !pHelper )
+	{
+		uno::Sequence<sal_Int32>	aIDs = ImplGetPropertyIds();
+		pHelper = new UnoPropertyArrayHelper( aIDs );
+	}
+	return *pHelper;
+}
+
+// beans::XMultiPropertySet
+uno::Reference< beans::XPropertySetInfo > UnoPageModel::getPropertySetInfo(  ) throw(uno::RuntimeException)
+{
+	static uno::Reference< beans::XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+	return xInfo;
+}
+
+// ----------------------------------------------------------------------------
+sal_Bool SAL_CALL UnoPageModel::getGroupControl(  ) throw (RuntimeException)
+{
+    return sal_False;
+}
+
+// Frame control
+
+//	----------------------------------------------------
+//	class UnoFrameControl
+//	----------------------------------------------------
+UnoFrameControl::UnoFrameControl()
+{
+	maComponentInfos.nWidth = 280;
+	maComponentInfos.nHeight = 400;
+}
+
+UnoFrameControl::~UnoFrameControl()
+{
+}
+
+::rtl::OUString UnoFrameControl::GetComponentServiceName()
+{
+	return ::rtl::OUString::createFromAscii( "frame" );
+}
+
+void UnoFrameControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
+{
+    bool bOwnCtrl = false;
+    rtl::OUString sTitle;
+    if ( rxCtrl.get() == Reference<XControl>( this ).get() )
+        bOwnCtrl = true; 
+    Reference< XPropertySet > xProps( getModel(), UNO_QUERY );
+    //xProps->getPropertyValue( GetPropertyName( BASEPROPERTY_TITLE ) ) >>= sTitle;
+    xProps->getPropertyValue( GetPropertyName( BASEPROPERTY_LABEL ) ) >>= sTitle;
+
+    UnoDialogContainerControl::ImplSetPosSize( rxCtrl );
+    Reference < XWindow > xW( rxCtrl, UNO_QUERY );
+    if ( !bOwnCtrl && xW.is() && sTitle.getLength() ) 
+    {
+        awt::Rectangle aSizePos = xW->getPosSize();
+ 
+        sal_Int32 nX = aSizePos.X, nY = aSizePos.Y, nWidth = aSizePos.Width, nHeight = aSizePos.Height;        
+        // Retrieve the values set by the base class
+        OutputDevice*pOutDev = Application::GetDefaultDevice();
+        if ( pOutDev )
+        {
+            if ( !bOwnCtrl && sTitle.getLength() )
+            {
+                // Adjust Y based on height of Title
+                ::Rectangle aRect = pOutDev->GetTextRect( aRect, sTitle );
+                nY = nY + ( aRect.GetHeight() / 2 ); 
+            }
+        }
+        else
+        {
+            Reference< XWindowPeer > xPeer = ImplGetCompatiblePeer( sal_True );
+            Reference< XDevice > xD( xPeer, UNO_QUERY );
+
+            SimpleFontMetric aFM;
+            FontDescriptor aFD;
+            Any aVal = ImplGetPropertyValue( GetPropertyName( BASEPROPERTY_FONTDESCRIPTOR ) );
+            aVal >>= aFD;
+            if ( aFD.StyleName.getLength() )
+            {
+                Reference< XFont > xFont = xD->getFont( aFD );
+                aFM = xFont->getFontMetric();
+            }
+            else
+            {
+                Reference< XGraphics > xG = xD->createGraphics();
+                aFM = xG->getFontMetric();
+            }
+
+            sal_Int16 nH = aFM.Ascent + aFM.Descent;
+            if ( !bOwnCtrl && sTitle.getLength() )
+                // offset y based on height of font ( not sure if my guess at the correct calculation is correct here )
+                nY = nY + ( nH / 8); // how do I test this
+        }
+        xW->setPosSize( nX, nY, nWidth, nHeight, PosSize::POSSIZE );
+    }
+}
+
+// ------------- UnoFrameModel -----------------
+
+UnoFrameModel::UnoFrameModel() : UnoControlDialogModel( false )
+{
+    ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
+    ImplRegisterProperty( BASEPROPERTY_ENABLED );
+    ImplRegisterProperty( BASEPROPERTY_ENABLEVISIBLE );
+    ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
+    ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
+    ImplRegisterProperty( BASEPROPERTY_HELPURL );
+    ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
+    ImplRegisterProperty( BASEPROPERTY_LABEL );
+    ImplRegisterProperty( BASEPROPERTY_WRITING_MODE );
+    ImplRegisterProperty( BASEPROPERTY_CONTEXT_WRITING_MODE );
+}
+
+UnoFrameModel::UnoFrameModel( const UnoFrameModel& rModel )
+    : UnoControlDialogModel( rModel )
+{
+}
+
+UnoFrameModel::~UnoFrameModel() 
+{
+}
+
+UnoControlModel*
+UnoFrameModel::Clone() const 
+{
+    // clone the container itself
+    UnoFrameModel* pClone = new UnoFrameModel( *this );
+
+    // clone all children
+    ::std::for_each(
+        maModels.begin(), maModels.end(),
+        CloneControlModel( pClone->maModels )
+    );
+
+    return pClone;
+}
+
+::rtl::OUString UnoFrameModel::getServiceName() throw(::com::sun::star::uno::RuntimeException)
+{
+	return ::rtl::OUString::createFromAscii( szServiceName_UnoFrameModel );
+}
+
+uno::Any UnoFrameModel::ImplGetDefaultValue( sal_uInt16 nPropId ) const
+{
+	if ( nPropId == BASEPROPERTY_DEFAULTCONTROL )
+	{
+		uno::Any aAny;
+		aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoFrameControl );
+		return aAny;
+	}
+	return UnoControlDialogModel::ImplGetDefaultValue( nPropId );
+}
+
+::cppu::IPropertyArrayHelper& UnoFrameModel::getInfoHelper()
+{
+	static UnoPropertyArrayHelper* pHelper = NULL;
+	if ( !pHelper )
+	{
+		uno::Sequence<sal_Int32>	aIDs = ImplGetPropertyIds();
+		pHelper = new UnoPropertyArrayHelper( aIDs );
+	}
+	return *pHelper;
+}
+
+// beans::XMultiPropertySet
+uno::Reference< beans::XPropertySetInfo > UnoFrameModel::getPropertySetInfo(  ) throw(uno::RuntimeException)
+{
+	static uno::Reference< beans::XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+	return xInfo;
+}
+
+
+//===============================================================
+//	----------------------------------------------------
+//	class DialogContainerControl
+//	----------------------------------------------------
+UnoDialogContainerControl::UnoDialogContainerControl()
+{
+	maComponentInfos.nWidth = 280;
+	maComponentInfos.nHeight = 400;
+}
+
+UnoDialogContainerControl::~UnoDialogContainerControl()
+{
 }
 
 // XInterface
-Any UnoDialogControl::queryAggregation( const Type & rType ) throw(RuntimeException)
+Any UnoDialogContainerControl::queryAggregation( const Type & rType ) throw(RuntimeException)
 {
-    Any aRet( UnoDialogControl_IBase::queryInterface( rType ) );
+    Any aRet( UnoDialogContainerControl_IBase::queryInterface( rType ) );
     return (aRet.hasValue() ? aRet : UnoControlContainer::queryAggregation( rType ));
 }
 
 // XTypeProvider
-IMPL_IMPLEMENTATION_ID( UnoDialogControl )
-Sequence< Type > UnoDialogControl::getTypes() throw(RuntimeException)
+IMPL_IMPLEMENTATION_ID( UnoDialogContainerControl )
+Sequence< Type > 
+UnoDialogContainerControl::getTypes() throw(RuntimeException)
 {
     return ::comphelper::concatSequences(
-        UnoDialogControl_IBase::getTypes(),
+        UnoDialogContainerControl_IBase::getTypes(),
         UnoControlContainer::getTypes()
     );
 }
 
-void UnoDialogControl::ImplInsertControl( Reference< XControlModel >& rxModel, const ::rtl::OUString& rName )
+void UnoDialogContainerControl::createPeer( const Reference< XToolkit > & rxToolkit, const Reference< XWindowPeer >  & rParentPeer ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    UnoControlContainer::createPeer( rxToolkit, rParentPeer );
+}
+   
+void UnoDialogContainerControl::ImplInsertControl( Reference< XControlModel >& rxModel, const ::rtl::OUString& rName )
 {
     Reference< XPropertySet > xP( rxModel, UNO_QUERY );
 
     ::rtl::OUString aDefCtrl;
     xP->getPropertyValue( GetPropertyName( BASEPROPERTY_DEFAULTCONTROL ) ) >>= aDefCtrl;
-
-    // Add our own resource resolver to a newly created control
-    Reference< resource::XStringResourceResolver > xStringResourceResolver;
-    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
-
-    Any aAny;
-    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
-
-    aAny <<= xStringResourceResolver;
-    xP->setPropertyValue( aPropName, aAny );
-
     Reference< XMultiServiceFactory > xMSF = ::comphelper::getProcessServiceFactory();
     Reference < XControl > xCtrl( xMSF->createInstance( aDefCtrl ), UNO_QUERY );
 
@@ -1464,7 +1926,7 @@ void UnoDialogControl::ImplInsertControl( Reference< XControlModel >& rxModel, c
     }
 }
 
-void UnoDialogControl::ImplRemoveControl( Reference< XControlModel >& rxModel )
+void UnoDialogContainerControl::ImplRemoveControl( Reference< XControlModel >& rxModel )
 {
     Sequence< Reference< XControl > > aControls = getControls();
     Reference< XControl > xCtrl = StdTabController::FindControl( aControls, rxModel );
@@ -1472,7 +1934,7 @@ void UnoDialogControl::ImplRemoveControl( Reference< XControlModel >& rxModel )
         removeControl( xCtrl );
 }
 
-void UnoDialogControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
+void UnoDialogContainerControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
 {
     Reference< XPropertySet > xP( rxCtrl->getModel(), UNO_QUERY );
 
@@ -1482,8 +1944,6 @@ void UnoDialogControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
     xP->getPropertyValue( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Width" ) ) ) >>= nWidth;
     xP->getPropertyValue( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Height" ) ) ) >>= nHeight;
 
-	// Currentley we are simply using MAP_APPFONT ( for normal Dialogs )
-	// and MAP_100TH_MM for imported Userforms
 	MapMode aMode( MAP_APPFONT );
 	sal_Bool bVBAForm = sal_False;
 	Reference< XPropertySet > xDlgModelProps( getModel(), UNO_QUERY );
@@ -1499,6 +1959,7 @@ void UnoDialogControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
 	} 
 	if ( bVBAForm )
 		aMode = MapMode( MAP_100TH_MM );
+
     OutputDevice*pOutDev = Application::GetDefaultDevice();
     if ( pOutDev )
     {
@@ -1547,53 +2008,19 @@ void UnoDialogControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
     xW->setPosSize( nX, nY, nWidth, nHeight, PosSize::POSSIZE );
 }
 
-void UnoDialogControl::dispose() throw(RuntimeException)
+void UnoDialogContainerControl::dispose() throw(RuntimeException)
 {
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-
-    EventObject aEvt;
-    aEvt.Source = static_cast< ::cppu::OWeakObject* >( this );
-    maTopWindowListeners.disposeAndClear( aEvt );
-
-    // Notify our listener helper about dispose
-    // --- SAFE ---
-    ::osl::ResettableGuard< ::osl::Mutex > aGuard( GetMutex() );
-    Reference< XEventListener > xListener( mxListener, UNO_QUERY );
-    mxListener.clear();
-    aGuard.clear();
-    // --- SAFE ---
-
-    if ( xListener.is() )
-        xListener->disposing( aEvt );
-
     UnoControlContainer::dispose();
 }
 
-void SAL_CALL UnoDialogControl::disposing(
+void SAL_CALL UnoDialogContainerControl::disposing(
     const EventObject& Source )
 throw(RuntimeException)
 {
-    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
-    Reference< resource::XStringResourceResolver > xStringResourceResolver;
-
-    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
-    Reference< XInterface > xIfac( xStringResourceResolver, UNO_QUERY );
-
-    if ( Source.Source == xIfac )
-    {
-        Any aAny;
-
-        // Reset resource resolver reference
-        ImplSetPropertyValue( aPropName, aAny, sal_True );
-        ImplUpdateResourceResolver();
-    }
-    else
-    {
-        UnoControlContainer::disposing( Source );
-    }
+    UnoControlContainer::disposing( Source );
 }
 
-sal_Bool UnoDialogControl::setModel( const Reference< XControlModel >& rxModel ) throw(RuntimeException)
+sal_Bool UnoDialogContainerControl::setModel( const Reference< XControlModel >& rxModel ) throw(RuntimeException)
 {
     vos::OGuard aSolarGuard( Application::GetSolarMutex() );
 
@@ -1662,12 +2089,11 @@ sal_Bool UnoDialogControl::setModel( const Reference< XControlModel >& rxModel )
         mxTabController->setModel( xTabbing );
         addTabController( mxTabController );
     }
-    ImplStartListingForResourceEvents();
+//    ImplStartListingForResourceEvents();
 
     return bRet;
 }
-
-void UnoDialogControl::setDesignMode( sal_Bool bOn ) throw(RuntimeException)
+void UnoDialogContainerControl::setDesignMode( sal_Bool bOn ) throw(RuntimeException)
 {
     vos::OGuard aSolarGuard( Application::GetSolarMutex() );
     ::osl::Guard< ::osl::Mutex > aGuard( GetMutex() );
@@ -1687,6 +2113,252 @@ void UnoDialogControl::setDesignMode( sal_Bool bOn ) throw(RuntimeException)
         mxTabController->activateTabOrder();
 }
 
+void UnoDialogContainerControl::elementInserted( const ContainerEvent& Event ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+
+    Reference< XControlModel > xModel;
+    ::rtl::OUString aName;
+
+    Event.Accessor >>= aName;
+    Event.Element >>= xModel;
+    ImplInsertControl( xModel, aName );
+}
+
+void UnoDialogContainerControl::elementRemoved( const ContainerEvent& Event ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+
+    Reference< XControlModel > xModel;
+    Event.Element >>= xModel;
+    if ( xModel.is() )
+        ImplRemoveControl( xModel );
+}
+
+void UnoDialogContainerControl::elementReplaced( const ContainerEvent& Event ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+
+    Reference< XControlModel > xModel;
+    Event.ReplacedElement >>= xModel;
+    if ( xModel.is() )
+        ImplRemoveControl( xModel );
+
+    ::rtl::OUString aName;
+    Event.Accessor >>= aName;
+    Event.Element >>= xModel;
+    ImplInsertControl( xModel, aName );
+}
+
+// XPropertiesChangeListener
+void UnoDialogContainerControl::ImplModelPropertiesChanged( const Sequence< PropertyChangeEvent >& rEvents ) throw(RuntimeException)
+{
+    if( !isDesignMode() && !mbCreatingCompatiblePeer )
+    {
+        ::rtl::OUString s1( RTL_CONSTASCII_USTRINGPARAM( "PositionX" ) );
+        ::rtl::OUString s2( RTL_CONSTASCII_USTRINGPARAM( "PositionY" ) );
+        ::rtl::OUString s3( RTL_CONSTASCII_USTRINGPARAM( "Width" ) );
+        ::rtl::OUString s4( RTL_CONSTASCII_USTRINGPARAM( "Height" ) );
+
+        sal_Int32 nLen = rEvents.getLength();
+        for( sal_Int32 i = 0; i < nLen; i++ )
+        {
+            const PropertyChangeEvent& rEvt = rEvents.getConstArray()[i];
+            Reference< XControlModel > xModel( rEvt.Source, UNO_QUERY );
+            sal_Bool bOwnModel = (XControlModel*)xModel.get() == (XControlModel*)getModel().get();
+            if ( ( rEvt.PropertyName == s1 ) ||
+                 ( rEvt.PropertyName == s2 ) ||
+                 ( rEvt.PropertyName == s3 ) ||
+                 ( rEvt.PropertyName == s4 ) )
+            {
+                if ( bOwnModel )
+                {
+                        // Don't set new pos/size if we get new values from window listener
+                        Reference< XControl > xThis( (XAggregation*)(::cppu::OWeakAggObject*)this, UNO_QUERY );
+                        ImplSetPosSize( xThis );
+                }
+                else
+                {
+                    Sequence<Reference<XControl> > aControlSequence(getControls());
+                    Reference<XControl> aControlRef( StdTabController::FindControl( aControlSequence, xModel ) );
+                    ImplSetPosSize( aControlRef );
+                }
+                break;
+            }
+        }
+    }
+    UnoControlContainer::ImplModelPropertiesChanged( rEvents );
+}
+
+void UnoDialogContainerControl::addingControl( const Reference< XControl >& _rxControl )
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    UnoControlContainer::addingControl( _rxControl );
+
+    if ( _rxControl.is() )
+    {
+        Reference< XMultiPropertySet > xProps( _rxControl->getModel(), UNO_QUERY );
+        if ( xProps.is() )
+        {
+            Sequence< ::rtl::OUString > aNames( 4 );
+            ::rtl::OUString* pNames = aNames.getArray();
+            *pNames++ = ::rtl::OUString::createFromAscii( "PositionX" );
+            *pNames++ = ::rtl::OUString::createFromAscii( "PositionY" );
+            *pNames++ = ::rtl::OUString::createFromAscii( "Width" );
+            *pNames++ = ::rtl::OUString::createFromAscii( "Height" );
+
+            xProps->addPropertiesChangeListener( aNames, this );
+        }
+    }
+}
+
+void UnoDialogContainerControl::removingControl( const Reference< XControl >& _rxControl )
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    UnoControlContainer::removingControl( _rxControl );
+
+    if ( _rxControl.is() )
+    {
+        Reference< XMultiPropertySet > xProps( _rxControl->getModel(), UNO_QUERY );
+        if ( xProps.is() )
+            xProps->removePropertiesChangeListener( this );
+    }
+
+}
+
+void SAL_CALL UnoDialogContainerControl::changesOccurred( const ChangesEvent& ) throw (RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    // a tab controller model may have changed
+
+    // #109067# in design mode don't notify the tab controller
+    // about tab index changes
+    if ( mxTabController.is() && !mbDesignMode )
+        mxTabController->activateTabOrder();
+}
+
+// ============================================================================
+// = class UnoDialogControl
+// ============================================================================
+
+UnoDialogControl::UnoDialogControl() :
+    maTopWindowListeners( *this ),
+    mbWindowListener(false),
+    mbSizeModified(false),
+    mbPosModified(false)
+{
+    maComponentInfos.nWidth = 300;
+    maComponentInfos.nHeight = 450;
+    mxListener = new ResourceListener( Reference< util::XModifyListener >(
+                        static_cast< OWeakObject* >( this ), UNO_QUERY ));
+}
+
+UnoDialogControl::~UnoDialogControl()
+{
+}
+
+::rtl::OUString UnoDialogControl::GetComponentServiceName()
+{
+
+    sal_Bool bDecoration( sal_True );
+    ImplGetPropertyValue( GetPropertyName( BASEPROPERTY_DECORATION )) >>= bDecoration;
+    if ( bDecoration )
+        return ::rtl::OUString::createFromAscii( "Dialog" );
+    else
+        return ::rtl::OUString::createFromAscii( "TabPage" );
+}
+
+// XInterface
+Any UnoDialogControl::queryAggregation( const Type & rType ) throw(RuntimeException)
+{
+        uno::Any aRet = ::cppu::queryInterface( rType, SAL_STATIC_CAST( awt::XTopWindow*, this ) );
+        if ( !aRet.hasValue() )
+            aRet = ::cppu::queryInterface( rType, SAL_STATIC_CAST( awt::XDialog*, this ) );
+        else if ( !aRet.hasValue() )
+            aRet = ::cppu::queryInterface( rType, SAL_STATIC_CAST( awt::XWindowListener*, this ) );
+	return (aRet.hasValue() ? aRet : UnoDialogContainerControl::queryAggregation( rType ));
+}
+//lang::XTypeProvider
+IMPL_XTYPEPROVIDER_START( UnoDialogControl)
+    getCppuType( ( uno::Reference< awt::XTopWindow>* ) NULL ),
+    getCppuType( ( uno::Reference< awt::XDialog>* ) NULL ),
+    getCppuType( ( uno::Reference< awt::XWindowListener>* ) NULL ),
+    UnoDialogContainerControl::getTypes()
+IMPL_XTYPEPROVIDER_END
+
+void UnoDialogControl::ImplInsertControl( Reference< XControlModel >& rxModel, const ::rtl::OUString& rName )
+{
+   // maybe this should be in the UnoDialogContainerControl, lets see
+    Reference< XPropertySet > xP( rxModel, UNO_QUERY );
+
+    // Add our own resource resolver to a newly created control
+    Reference< resource::XStringResourceResolver > xStringResourceResolver;
+    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
+
+    Any aAny;
+    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
+
+    aAny <<= xStringResourceResolver;
+    xP->setPropertyValue( aPropName, aAny );
+
+    UnoDialogContainerControl::ImplInsertControl( rxModel, rName );
+
+}
+
+void UnoDialogControl::dispose() throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+
+    EventObject aEvt;
+    aEvt.Source = static_cast< ::cppu::OWeakObject* >( this );
+    maTopWindowListeners.disposeAndClear( aEvt );
+    // Notify our listener helper about dispose
+    // --- SAFE ---
+    ::osl::ResettableGuard< ::osl::Mutex > aGuard( GetMutex() );
+    Reference< XEventListener > xListener( mxListener, UNO_QUERY );
+    mxListener.clear();
+    aGuard.clear();
+    // --- SAFE ---
+
+    if ( xListener.is() )
+        xListener->disposing( aEvt );
+    UnoDialogContainerControl::dispose();
+}
+
+void SAL_CALL UnoDialogControl::disposing(
+    const EventObject& Source )
+throw(RuntimeException)
+{
+    // #FIXME see what can be moved to  UnoDialogControlContainer
+    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
+    Reference< resource::XStringResourceResolver > xStringResourceResolver;
+
+    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
+    Reference< XInterface > xIfac( xStringResourceResolver, UNO_QUERY );
+
+    if ( Source.Source == xIfac )
+    {
+        Any aAny;
+
+        // Reset resource resolver reference
+        ImplSetPropertyValue( aPropName, aAny, sal_True );
+        ImplUpdateResourceResolver();
+    }
+    else
+    {
+        UnoDialogContainerControl::disposing( Source );
+    }
+}
+
+sal_Bool UnoDialogControl::setModel( const Reference< XControlModel >& rxModel ) throw(RuntimeException)
+{
+        // #Can we move all the Resource stuff to the UnoDialogContainerControl ?
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+        sal_Bool bRet = UnoDialogContainerControl::setModel( rxModel );
+    ImplStartListingForResourceEvents();
+    return bRet;
+}
+
 void UnoDialogControl::createPeer( const Reference< XToolkit > & rxToolkit, const Reference< XWindowPeer >  & rParentPeer ) throw(RuntimeException)
 {
     vos::OGuard aSolarGuard( Application::GetSolarMutex() );
@@ -1726,53 +2398,21 @@ void UnoDialogControl::PrepareWindowDescriptor( ::com::sun::star::awt::WindowDes
     // can lead to overwrites we have to set the graphic property
     // before the propertiesChangeEvents are sent!
     ::rtl::OUString aImageURL;
+    Reference< graphic::XGraphic > xGraphic;
     if (( ImplGetPropertyValue( PROPERTY_IMAGEURL ) >>= aImageURL ) &&
         ( aImageURL.getLength() > 0 ))
     {
-        aImageURL = 
-            getPhysicalLocation( ImplGetPropertyValue( PROPERTY_DIALOGSOURCEURL ),
+        ::rtl::OUString absoluteUrl = aImageURL;
+        if ( aImageURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) != 0 )
+        {
+            absoluteUrl = getPhysicalLocation( ImplGetPropertyValue( PROPERTY_DIALOGSOURCEURL ),
                                  ImplGetPropertyValue( PROPERTY_IMAGEURL ));
+        }
+        // npower, not understanding the comment above, but it surely setting the URL is just as 
+        // effective ( and prevents ambiguity with embedded images )
+        ImplSetPropertyValue( PROPERTY_IMAGEURL, uno::makeAny( absoluteUrl ), sal_True );
 
     }
-    if ( aImageURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) != 0 )
-        ImplSetPropertyValue( PROPERTY_IMAGEURL, uno::makeAny( aImageURL ), sal_True );
-}
-
-void UnoDialogControl::elementInserted( const ContainerEvent& Event ) throw(RuntimeException)
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-
-    Reference< XControlModel > xModel;
-    ::rtl::OUString aName;
-
-    Event.Accessor >>= aName;
-    Event.Element >>= xModel;
-    ImplInsertControl( xModel, aName );
-}
-
-void UnoDialogControl::elementRemoved( const ContainerEvent& Event ) throw(RuntimeException)
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-
-    Reference< XControlModel > xModel;
-    Event.Element >>= xModel;
-    if ( xModel.is() )
-        ImplRemoveControl( xModel );
-}
-
-void UnoDialogControl::elementReplaced( const ContainerEvent& Event ) throw(RuntimeException)
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-
-    Reference< XControlModel > xModel;
-    Event.ReplacedElement >>= xModel;
-    if ( xModel.is() )
-        ImplRemoveControl( xModel );
-
-    ::rtl::OUString aName;
-    Event.Accessor >>= aName;
-    Event.Element >>= xModel;
-    ImplInsertControl( xModel, aName );
 }
 
 void UnoDialogControl::addTopWindowListener( const Reference< XTopWindowListener >& rxListener ) throw (RuntimeException)
@@ -1829,12 +2469,6 @@ void UnoDialogControl::setMenuBar( const Reference< XMenuBar >& rxMenuBar ) thro
     }
 }
 
-static ::Size ImplMapPixelToAppFont( OutputDevice* pOutDev, const ::Size& aSize )
-{
-    ::Size aTmp = pOutDev->PixelToLogic( aSize, MAP_APPFONT );
-    return aTmp;
-}
-
 // ::com::sun::star::awt::XWindowListener
 void SAL_CALL UnoDialogControl::windowResized( const ::com::sun::star::awt::WindowEvent& e )
 throw (::com::sun::star::uno::RuntimeException)
@@ -1916,72 +2550,38 @@ throw (::com::sun::star::uno::RuntimeException)
 // XPropertiesChangeListener
 void UnoDialogControl::ImplModelPropertiesChanged( const Sequence< PropertyChangeEvent >& rEvents ) throw(RuntimeException)
 {
-    if( !isDesignMode() && !mbCreatingCompatiblePeer )
-    {
-        ::rtl::OUString s1( RTL_CONSTASCII_USTRINGPARAM( "PositionX" ) );
-        ::rtl::OUString s2( RTL_CONSTASCII_USTRINGPARAM( "PositionY" ) );
-        ::rtl::OUString s3( RTL_CONSTASCII_USTRINGPARAM( "Width" ) );
-        ::rtl::OUString s4( RTL_CONSTASCII_USTRINGPARAM( "Height" ) );
-
-        sal_Int32 nLen = rEvents.getLength();
-        for( sal_Int32 i = 0; i < nLen; i++ )
-        {
-            const PropertyChangeEvent& rEvt = rEvents.getConstArray()[i];
-            Reference< XControlModel > xModel( rEvt.Source, UNO_QUERY );
-            sal_Bool bOwnModel = (XControlModel*)xModel.get() == (XControlModel*)getModel().get();
-            if ( ( rEvt.PropertyName == s1 ) ||
-                 ( rEvt.PropertyName == s2 ) ||
-                 ( rEvt.PropertyName == s3 ) ||
-                 ( rEvt.PropertyName == s4 ) )
-            {
-                if ( bOwnModel )
-                {
-                    if ( !mbPosModified && !mbSizeModified )
-                    {
-                        // Don't set new pos/size if we get new values from window listener
-                        Reference< XControl > xThis( (XAggregation*)(::cppu::OWeakAggObject*)this, UNO_QUERY );
-                        ImplSetPosSize( xThis );
-                    }
-                }
-                else
-                {
-                    Sequence<Reference<XControl> > aControlSequence(getControls());
-                    Reference<XControl> aControlRef( StdTabController::FindControl( aControlSequence, xModel ) );
-                    ImplSetPosSize( aControlRef );
-                }
-                break;
-            }
-            else if ( bOwnModel && rEvt.PropertyName.equalsAsciiL( "ResourceResolver", 16 ))
-            {
-                ImplStartListingForResourceEvents();
-            }
-        }
-    }
-
     sal_Int32 nLen = rEvents.getLength();
     for( sal_Int32 i = 0; i < nLen; i++ )
     {
         const PropertyChangeEvent& rEvt = rEvents.getConstArray()[i];
         Reference< XControlModel > xModel( rEvt.Source, UNO_QUERY );
         sal_Bool bOwnModel = (XControlModel*)xModel.get() == (XControlModel*)getModel().get();
-        if ( bOwnModel && rEvt.PropertyName.equalsAsciiL( "ImageURL", 8 ))
+        if( !isDesignMode() && !mbCreatingCompatiblePeer && bOwnModel )
+        {
+            if ( rEvt.PropertyName.equalsAsciiL( "ResourceResolver", 16 ) )
+                    ImplStartListingForResourceEvents();
+        }
+
+        else if ( bOwnModel && rEvt.PropertyName.equalsAsciiL( "ImageURL", 8 ))
         {
             ::rtl::OUString aImageURL;
+             Reference< graphic::XGraphic > xGraphic;
+            // Ignore GraphicObject urls
             if (( ImplGetPropertyValue( PROPERTY_IMAGEURL ) >>= aImageURL ) &&
                 ( aImageURL.getLength() > 0 ))
             {
-                aImageURL =
-                    getPhysicalLocation( ImplGetPropertyValue( PROPERTY_DIALOGSOURCEURL ),
-                                         ImplGetPropertyValue( PROPERTY_IMAGEURL ));
-
+                ::rtl::OUString absoluteUrl = aImageURL;
+                if ( aImageURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) != 0 )
+                {
+                    absoluteUrl = getPhysicalLocation( ImplGetPropertyValue( PROPERTY_DIALOGSOURCEURL ),
+                    ImplGetPropertyValue( PROPERTY_IMAGEURL ));
+                }
+                ImplSetPropertyValue( PROPERTY_IMAGEURL, uno::makeAny( absoluteUrl ), sal_True );
             }
-
-            ImplSetPropertyValue( PROPERTY_IMAGEURL, uno::makeAny( aImageURL ), sal_True );
-            break;
         }
     }
 
-    UnoControlContainer::ImplModelPropertiesChanged( rEvents );
+    UnoDialogContainerControl::ImplModelPropertiesChanged( rEvents );
 }
 
 void UnoDialogControl::ImplStartListingForResourceEvents()
@@ -2000,21 +2600,16 @@ void UnoDialogControl::ImplStartListingForResourceEvents()
     ImplUpdateResourceResolver();
 }
 
-void UnoDialogControl::ImplUpdateResourceResolver()
+void lcl_ApplyResolverToNestedContainees(  const Reference< resource::XStringResourceResolver >& xStringResourceResolver, const Reference< XControlContainer >& xContainer )
 {
     rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
-    Reference< resource::XStringResourceResolver > xStringResourceResolver;
-
-    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
-    if ( !xStringResourceResolver.is() )
-        return;
 
     Any xNewStringResourceResolver; xNewStringResourceResolver <<= xStringResourceResolver;
 
     Sequence< rtl::OUString > aPropNames(1);
     aPropNames[0] = aPropName;
 
-    const Sequence< Reference< awt::XControl > > aSeq = getControls();
+    const Sequence< Reference< awt::XControl > > aSeq = xContainer->getControls();
     for ( sal_Int32 i = 0; i < aSeq.getLength(); i++ )
     {
         Reference< XControl > xControl( aSeq[i] );
@@ -2045,8 +2640,26 @@ void UnoDialogControl::ImplUpdateResourceResolver()
         catch ( const Exception& )
         {
         }
+
+        uno::Reference< XControlContainer > xNestedContainer( xControl, uno::UNO_QUERY );
+        if ( xNestedContainer.is() )
+            lcl_ApplyResolverToNestedContainees(  xStringResourceResolver, xNestedContainer );
+
     }
+    
+}
 
+void UnoDialogControl::ImplUpdateResourceResolver()
+{
+    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
+    Reference< resource::XStringResourceResolver > xStringResourceResolver;
+
+    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
+    if ( !xStringResourceResolver.is() )
+        return;
+
+    lcl_ApplyResolverToNestedContainees(  xStringResourceResolver, this );
+    
     // propagate resource resolver changes to language dependent props of the dialog
     Reference< XPropertySet > xPropertySet( getModel(), UNO_QUERY );
     if ( xPropertySet.is() )
@@ -2102,53 +2715,6 @@ void UnoDialogControl::endExecute() throw(RuntimeException)
     }
 }
 
-void UnoDialogControl::addingControl( const Reference< XControl >& _rxControl )
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-    UnoControlContainer::addingControl( _rxControl );
-
-    if ( _rxControl.is() )
-    {
-        Reference< XMultiPropertySet > xProps( _rxControl->getModel(), UNO_QUERY );
-        if ( xProps.is() )
-        {
-            Sequence< ::rtl::OUString > aNames( 4 );
-            ::rtl::OUString* pNames = aNames.getArray();
-            *pNames++ = ::rtl::OUString::createFromAscii( "PositionX" );
-            *pNames++ = ::rtl::OUString::createFromAscii( "PositionY" );
-            *pNames++ = ::rtl::OUString::createFromAscii( "Width" );
-            *pNames++ = ::rtl::OUString::createFromAscii( "Height" );
-
-            xProps->addPropertiesChangeListener( aNames, this );
-        }
-    }
-}
-
-void UnoDialogControl::removingControl( const Reference< XControl >& _rxControl )
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-    UnoControlContainer::removingControl( _rxControl );
-
-    if ( _rxControl.is() )
-    {
-        Reference< XMultiPropertySet > xProps( _rxControl->getModel(), UNO_QUERY );
-        if ( xProps.is() )
-            xProps->removePropertiesChangeListener( this );
-    }
-
-}
-
-void SAL_CALL UnoDialogControl::changesOccurred( const ChangesEvent& ) throw (RuntimeException)
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-    // a tab controller model may have changed
-
-    // #109067# in design mode don't notify the tab controller
-    // about tab index changes
-    if ( mxTabController.is() && !mbDesignMode )
-        mxTabController->activateTabOrder();
-}
-
 // XModifyListener
 void SAL_CALL UnoDialogControl::modified(
     const lang::EventObject& /*rEvent*/ )
@@ -2157,37 +2723,3 @@ throw (RuntimeException)
     ImplUpdateResourceResolver();
 }
 
-//	----------------------------------------------------
-//	Helper Method to convert relative url to physical location
-//	----------------------------------------------------
-
-::rtl::OUString getPhysicalLocation( const ::com::sun::star::uno::Any& rbase, const ::com::sun::star::uno::Any& rUrl )
-{
-    
-    
-    ::rtl::OUString ret;
-
-    ::rtl::OUString baseLocation;
-    ::rtl::OUString url;
-
-    rbase  >>= baseLocation;
-    rUrl  >>= url;
-
-    if ( url.getLength() > 0 )
-    {
-		// Don't adjust GraphicObject url(s)
-		if ( url.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) != 0 )
-		{
-			INetURLObject urlObj(baseLocation);
-			urlObj.removeSegment();
-			baseLocation = urlObj.GetMainURL( INetURLObject::NO_DECODE );
-			::osl::FileBase::getAbsoluteFileURL( baseLocation, url, ret );
-		}
-		else
-			ret = url;
-
-    }
-
-    return ret;
-}
-
diff --git toolkit/source/controls/unocontrolcontainer.cxx toolkit/source/controls/unocontrolcontainer.cxx
index 188e99e..e8c2267 100644
--- toolkit/source/controls/unocontrolcontainer.cxx
+++ toolkit/source/controls/unocontrolcontainer.cxx
@@ -811,8 +811,8 @@ void UnoControlContainer::createPeer( const uno::Reference< awt::XToolkit >& rxT
                 aCtrls.getArray()[n]->createPeer( rxToolkit, getPeer() );
 
             uno::Reference< awt::XVclContainerPeer >  xC( getPeer(), uno::UNO_QUERY );
-
-            xC->enableDialogControl( sal_True );
+            if ( xC.is() )
+                xC->enableDialogControl( sal_True );
             ImplActivateTabControllers();
         }
 
diff --git toolkit/source/controls/unocontrols.cxx toolkit/source/controls/unocontrols.cxx
index 87981f9..8c2cca0 100644
--- toolkit/source/controls/unocontrols.cxx
+++ toolkit/source/controls/unocontrols.cxx
@@ -571,7 +571,7 @@ uno::Any ImageProducerControlModel::ImplGetDefaultValue( sal_uInt16 nPropId ) co
 
     return UnoControlModel::ImplGetDefaultValue( nPropId );
 }
-    uno::Reference< graphic::XGraphic > getGraphicFromURL_nothrow( uno::Reference< graphic::XGraphicObject >& rxGrfObj, const ::rtl::OUString& _rURL )
+    uno::Reference< graphic::XGraphic > ImageHelper::getGraphicAndGraphicObjectFromURL_nothrow( uno::Reference< graphic::XGraphicObject >& xOutGraphicObj, const ::rtl::OUString& _rURL )
     {
         uno::Reference< graphic::XGraphic > xGraphic;
 
@@ -581,10 +581,10 @@ uno::Any ImageProducerControlModel::ImplGetDefaultValue( sal_uInt16 nPropId ) co
             rtl::OUString sID = _rURL.copy( sizeof( UNO_NAME_GRAPHOBJ_URLPREFIX ) - 1 );
             // get the DefaultContext
             ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
-            rxGrfObj = graphic::GraphicObject::createWithId( aContext.getUNOContext(), sID );
+            xOutGraphicObj = graphic::GraphicObject::createWithId( aContext.getUNOContext(), sID );
         }
         else // linked
-            rxGrfObj = NULL; // release the GraphicObject
+            xOutGraphicObj = NULL; // release the GraphicObject
 
         if ( !_rURL.getLength() )
             return xGraphic;
@@ -609,6 +609,11 @@ uno::Any ImageProducerControlModel::ImplGetDefaultValue( sal_uInt16 nPropId ) co
         return xGraphic;
     }
 
+    uno::Reference< graphic::XGraphic > ImageProducerControlModel::getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL )
+    {
+        return ImageHelper::getGraphicAndGraphicObjectFromURL_nothrow( mxGrfObj, _rURL );
+    }
+
 void SAL_CALL ImageProducerControlModel::setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception)
 {
     UnoControlModel::setFastPropertyValue_NoBroadcast( nHandle, rValue );
@@ -625,7 +630,7 @@ void SAL_CALL ImageProducerControlModel::setFastPropertyValue_NoBroadcast( sal_I
                 mbAdjustingGraphic = true;
                 ::rtl::OUString sImageURL;
                 OSL_VERIFY( rValue >>= sImageURL );
-                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( getGraphicFromURL_nothrow( mxGrfObj, sImageURL ) ) );
+                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( getGraphicFromURL_nothrow( sImageURL ) ) );
                 mbAdjustingGraphic = false;
             }
             break;
@@ -1842,77 +1847,6 @@ sal_Bool UnoGroupBoxControl::isTransparent() throw(uno::RuntimeException)
     return sal_True;
 }
 
-// MultiPage
-
-UnoMultiPageModel::UnoMultiPageModel()
-{
-	ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
-	ImplRegisterProperty( BASEPROPERTY_ENABLED );
-	ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
-	ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
-	ImplRegisterProperty( BASEPROPERTY_HELPURL );
-	ImplRegisterProperty( BASEPROPERTY_LABEL );
-	ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
-	ImplRegisterProperty( BASEPROPERTY_PROGRESSVALUE );
-	ImplRegisterProperty( BASEPROPERTY_PROGRESSVALUE_MAX );
-}
-
-::rtl::OUString UnoMultiPageModel::getServiceName() throw(::com::sun::star::uno::RuntimeException)
-{
-	return ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageModel );
-}
-
-uno::Any UnoMultiPageModel::ImplGetDefaultValue( sal_uInt16 nPropId ) const
-{
-	if ( nPropId == BASEPROPERTY_DEFAULTCONTROL )
-	{
-		uno::Any aAny;
-		aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoControlGroupBox );
-		//aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageControl );
-		return aAny;
-	}
-	return UnoControlModel::ImplGetDefaultValue( nPropId );
-}
-
-::cppu::IPropertyArrayHelper& UnoMultiPageModel::getInfoHelper()
-{
-	static UnoPropertyArrayHelper* pHelper = NULL;
-	if ( !pHelper )
-	{
-		uno::Sequence<sal_Int32>	aIDs = ImplGetPropertyIds();
-		pHelper = new UnoPropertyArrayHelper( aIDs );
-	}
-	return *pHelper;
-}
-
-// beans::XMultiPropertySet
-uno::Reference< beans::XPropertySetInfo > UnoMultiPageModel::getPropertySetInfo(  ) throw(uno::RuntimeException)
-{
-	static uno::Reference< beans::XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
-	return xInfo;
-}
-
-//	----------------------------------------------------
-//	class MultiPageControl
-//	----------------------------------------------------
-UnoMultiPageControl::UnoMultiPageControl()
-{
-	maComponentInfos.nWidth = 100;
-	maComponentInfos.nHeight = 100;
-}
-
-::rtl::OUString UnoMultiPageControl::GetComponentServiceName()
-{
-	return ::rtl::OUString::createFromAscii( "multipage" );
-}
-
-sal_Bool UnoMultiPageControl::isTransparent() throw(uno::RuntimeException)
-{
-	return sal_True;
-}
-
-
-
 //	----------------------------------------------------
 //	class UnoControlListBoxModel
 //	----------------------------------------------------
diff --git toolkit/source/helper/property.cxx toolkit/source/helper/property.cxx
index a01046f..c53c187 100644
--- toolkit/source/helper/property.cxx
+++ toolkit/source/helper/property.cxx
@@ -282,6 +282,7 @@ ImplPropertyInfo* ImplGetPropertyInfos( sal_uInt16& rElementCount )
             DECL_PROP_3     ( "ColumnModel",		GRID_COLUMNMODEL,   Reference< ::com::sun::star::awt::grid::XGridColumnModel >,          BOUND, MAYBEDEFAULT, MAYBEVOID ),
             DECL_PROP_3     ( "SelectionModel",		GRID_SELECTIONMODE,   ::com::sun::star::view::SelectionType,          BOUND, MAYBEDEFAULT, MAYBEVOID ),
             DECL_PROP_2     ( "EnableVisible",          ENABLEVISIBLE,          sal_Bool,           BOUND, MAYBEDEFAULT ),
+           DECL_DEP_PROP_3 ( "MultiPageValue",          MULTIPAGEVALUE,      sal_Int32,          BOUND, MAYBEDEFAULT, MAYBEVOID ),
             DECL_PROP_2     ( "VBAForm",                VBAFORM,                sal_Bool,           BOUND, MAYBEDEFAULT )
             };
             pPropertyInfos = aImplPropertyInfos;
diff --git toolkit/source/helper/registerservices.cxx toolkit/source/helper/registerservices.cxx
index d59200f..dc4d962 100644
--- toolkit/source/helper/registerservices.cxx
+++ toolkit/source/helper/registerservices.cxx
@@ -169,6 +169,8 @@ IMPL_CREATEINSTANCE( UnoControlProgressBarModel )
 IMPL_CREATEINSTANCE( UnoControlScrollBarModel )
 IMPL_CREATEINSTANCE( UnoSpinButtonModel )
 IMPL_CREATEINSTANCE( UnoMultiPageModel )
+IMPL_CREATEINSTANCE( UnoPageModel )
+IMPL_CREATEINSTANCE( UnoFrameModel )
 IMPL_CREATEINSTANCE( UnoControlFixedLineModel )
 IMPL_CREATEINSTANCE( UnoCurrencyFieldControl )
 IMPL_CREATEINSTANCE( UnoDateFieldControl )
@@ -189,6 +191,8 @@ IMPL_CREATEINSTANCE( UnoProgressBarControl )
 IMPL_CREATEINSTANCE( UnoScrollBarControl )
 IMPL_CREATEINSTANCE( UnoSpinButtonControl )
 IMPL_CREATEINSTANCE( UnoMultiPageControl )
+IMPL_CREATEINSTANCE( UnoPageControl )
+IMPL_CREATEINSTANCE( UnoFrameControl )
 IMPL_CREATEINSTANCE( UnoFixedLineControl )
 IMPL_CREATEINSTANCE( VCLXMenuBar )
 IMPL_CREATEINSTANCE( VCLXPointer )
@@ -283,6 +287,10 @@ TOOLKIT_DLLPUBLIC sal_Bool SAL_CALL component_writeInfo( void* _pServiceManager,
         registerServices( xRegistryKey, "UnoSpinButtonControl", szServiceName_UnoSpinButtonControl );
         registerServices( xRegistryKey, "UnoMultiPageModel", szServiceName_UnoMultiPageModel );
         registerServices( xRegistryKey, "UnoMultiPageControl", szServiceName_UnoMultiPageControl );
+        registerServices( xRegistryKey, "UnoPageModel", szServiceName_UnoPageModel );
+        registerServices( xRegistryKey, "UnoPageControl", szServiceName_UnoPageControl );
+        registerServices( xRegistryKey, "UnoFrameModel", szServiceName_UnoFrameModel );
+        registerServices( xRegistryKey, "UnoFrameControl", szServiceName_UnoFrameControl );
         registerServices( xRegistryKey, "UnoFixedLineControl", szServiceName_UnoControlFixedLine, szServiceName2_UnoControlFixedLine );
         registerServices( xRegistryKey, "UnoControlFixedLineModel", szServiceName_UnoControlFixedLineModel, szServiceName2_UnoControlFixedLineModel );
         registerServices( xRegistryKey, "VCLXPrinterServer", szServiceName_PrinterServer, szServiceName2_PrinterServer );
@@ -319,7 +327,6 @@ TOOLKIT_DLLPUBLIC void* SAL_CALL component_getFactory( const sal_Char* sImplemen
     {
         ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > xServiceFactory =
             static_cast< ::com::sun::star::lang::XMultiServiceFactory* >( _pServiceManager );
-
         CHECKANDCREATEFACTORY( VCLXToolkit, szServiceName_Toolkit, szServiceName2_Toolkit )
         CHECKANDCREATEFACTORY( VCLXPopupMenu, szServiceName_PopupMenu, szServiceName2_PopupMenu )
         CHECKANDCREATEFACTORY( VCLXMenuBar, szServiceName_MenuBar, szServiceName2_MenuBar )
@@ -375,6 +382,10 @@ TOOLKIT_DLLPUBLIC void* SAL_CALL component_getFactory( const sal_Char* sImplemen
         CHECKANDCREATEFACTORY( UnoControlRoadmapModel, szServiceName_UnoControlRoadmapModel, szServiceName2_UnoControlRoadmapModel )
         CHECKANDCREATEFACTORY( UnoMultiPageModel, szServiceName_UnoMultiPageModel, NULL )
         CHECKANDCREATEFACTORY( UnoMultiPageControl, szServiceName_UnoMultiPageControl, NULL )
+        CHECKANDCREATEFACTORY( UnoPageModel, szServiceName_UnoPageModel, NULL )
+        CHECKANDCREATEFACTORY( UnoPageControl, szServiceName_UnoPageControl, NULL )
+        CHECKANDCREATEFACTORY( UnoFrameModel, szServiceName_UnoFrameModel, NULL )
+        CHECKANDCREATEFACTORY( UnoFrameControl, szServiceName_UnoFrameControl, NULL )
         CHECKANDCREATEFACTORY( UnoSpinButtonModel, szServiceName_UnoSpinButtonModel, NULL )
         CHECKANDCREATEFACTORY( UnoSpinButtonControl, szServiceName_UnoSpinButtonControl, NULL )
         CHECKANDCREATEFACTORY( TreeControl, szServiceName_TreeControl, NULL )
diff --git toolkit/source/helper/servicenames.cxx toolkit/source/helper/servicenames.cxx
index 3d531f8..d82a834 100644
--- toolkit/source/helper/servicenames.cxx
+++ toolkit/source/helper/servicenames.cxx
@@ -96,6 +96,10 @@ const sal_Char __FAR_DATA szServiceName_UnoSpinButtonControl[] = "com.sun.star.a
 const sal_Char __FAR_DATA szServiceName_UnoSpinButtonModel[] = "com.sun.star.awt.UnoControlSpinButtonModel";
 const sal_Char __FAR_DATA szServiceName_UnoMultiPageControl[] = "com.sun.star.awt.UnoControlMultiPage";
 const sal_Char __FAR_DATA szServiceName_UnoMultiPageModel[] = "com.sun.star.awt.UnoMultiPageModel";
+const sal_Char __FAR_DATA szServiceName_UnoPageControl[] = "com.sun.star.awt.UnoControlPage";
+const sal_Char __FAR_DATA szServiceName_UnoPageModel[] = "com.sun.star.awt.UnoPageModel";
+const sal_Char __FAR_DATA szServiceName_UnoFrameControl[] = "com.sun.star.awt.UnoControlFrame";
+const sal_Char __FAR_DATA szServiceName_UnoFrameModel[] = "com.sun.star.awt.UnoFrameModel";
 const sal_Char __FAR_DATA szServiceName_TreeControl[] = "com.sun.star.awt.tree.TreeControl";
 const sal_Char __FAR_DATA szServiceName_TreeControlModel[] = "com.sun.star.awt.tree.TreeControlModel";
 const sal_Char __FAR_DATA szServiceName_MutableTreeDataModel[] = "com.sun.star.awt.tree.MutableTreeDataModel";
diff --git toolkit/source/helper/unowrapper.cxx toolkit/source/helper/unowrapper.cxx
index a2dabac..8dda5b7 100644
--- toolkit/source/helper/unowrapper.cxx
+++ toolkit/source/helper/unowrapper.cxx
@@ -41,6 +41,7 @@
 #include <toolkit/awt/vclxcontainer.hxx>
 #include <toolkit/awt/vclxtopwindow.hxx>
 #include <toolkit/awt/vclxgraphics.hxx>
+#include <awt/vclxtabcontrol.hxx>
 
 #include "toolkit/dllapi.h"
 #include <vcl/svapp.hxx>
@@ -110,6 +111,9 @@ using namespace ::com::sun::star;
         case WINDOW_TABPAGE:        return new VCLXContainer;
 
         case WINDOW_TOOLBOX:		return new VCLXToolBox;
+		return new VCLXMultiPage;
+        case WINDOW_TABCONTROL: 
+		return new VCLXMultiPage;
 
         // case WINDOW_FIXEDLINE:
         // case WINDOW_FIXEDBITMAP:
diff --git vcl/inc/vcl/tabctrl.hxx vcl/inc/vcl/tabctrl.hxx
index 388edf4..1cd16bb 100644
--- vcl/inc/vcl/tabctrl.hxx
+++ vcl/inc/vcl/tabctrl.hxx
@@ -98,6 +98,7 @@ private:
 protected:
     using Window::ImplInit;
     SAL_DLLPRIVATE void         ImplInit( Window* pParent, WinBits nStyle );
+    SAL_DLLPRIVATE WinBits      ImplInitStyle( WinBits nStyle );
     SAL_DLLPRIVATE void         ImplLoadRes( const ResId& rResId );
 
     virtual void		        FillLayoutData() const;
diff --git vcl/source/control/group.cxx vcl/source/control/group.cxx
index 2498929..f19f549 100644
--- vcl/source/control/group.cxx
+++ vcl/source/control/group.cxx
@@ -145,6 +145,7 @@ GroupBox::GroupBox( Window* pParent, const ResId& rResId ) :
 void GroupBox::ImplDraw( OutputDevice* pDev, ULONG nDrawFlags,
                          const Point& rPos, const Size& rSize, bool bLayout )
 {
+        OSL_TRACE("GroupBox::ImplDraw Y %d, X %d", rPos.Y(), rPos.X() );
     long					nTop;
     long					nTextOff;
     const StyleSettings&	rStyleSettings = GetSettings().GetStyleSettings();
diff --git vcl/source/control/tabctrl.cxx vcl/source/control/tabctrl.cxx
index 05e8b1b..c355a05 100644
--- vcl/source/control/tabctrl.cxx
+++ vcl/source/control/tabctrl.cxx
@@ -171,6 +171,18 @@ void TabControl::ImplInit( Window* pParent, WinBits nStyle )
 
 // -----------------------------------------------------------------------
 
+WinBits TabControl::ImplInitStyle( WinBits nStyle )
+{
+    if ( !(nStyle & WB_NOTABSTOP) )
+        nStyle |= WB_TABSTOP;
+    if ( !(nStyle & WB_NOGROUP) )
+        nStyle |= WB_GROUP;
+
+    return nStyle;
+}
+
+// -----------------------------------------------------------------------
+
 void TabControl::ImplInitSettings( BOOL bFont,
                                    BOOL bForeground, BOOL bBackground )
 {
@@ -246,6 +258,7 @@ TabControl::TabControl( Window* pParent, WinBits nStyle ) :
     Control( WINDOW_TABCONTROL )
 {
     ImplInit( pParent, nStyle );
+    OSL_TRACE("*** TABCONTROL no notabs? %s", ( GetStyle() & WB_NOBORDER ) ? "true" : "false" );
 }
 
 // -----------------------------------------------------------------------
@@ -704,7 +717,13 @@ void TabControl::ImplChangeTabPage( USHORT nId, USHORT nOldId )
 
     if ( pPage )
     {
-        pPage->SetPosSizePixel( aRect.TopLeft(), aRect.GetSize() );
+        if (  ( GetStyle() & WB_NOBORDER ) )
+        {
+            Rectangle aRectNoTab( (const Point&)Point( 0, 0 ), GetSizePixel() );
+            pPage->SetPosSizePixel( aRectNoTab.TopLeft(), aRectNoTab.GetSize() );
+        }
+        else
+            pPage->SetPosSizePixel( aRect.TopLeft(), aRect.GetSize() );
 
         // Hier Page aktivieren, damit die Controls entsprechend umgeschaltet
         // werden koennen und HilfeId gegebenenfalls beim Parent umsetzen
@@ -759,6 +778,12 @@ BOOL TabControl::ImplPosCurTabPage()
     ImplTabItem* pItem = ImplGetItem( GetCurPageId() );
     if ( pItem && pItem->mpTabPage )
     {
+        if (  ( GetStyle() & WB_NOBORDER ) )
+        {
+            Rectangle aRectNoTab( (const Point&)Point( 0, 0 ), GetSizePixel() );
+            pItem->mpTabPage->SetPosSizePixel( aRectNoTab.TopLeft(), aRectNoTab.GetSize() );
+            return TRUE;
+        }
         Rectangle aRect = ImplGetTabRect( TAB_PAGERECT );
         pItem->mpTabPage->SetPosSizePixel( aRect.TopLeft(), aRect.GetSize() );
         return TRUE;
@@ -1104,7 +1129,8 @@ void TabControl::KeyInput( const KeyEvent& rKEvt )
 
 void TabControl::Paint( const Rectangle& rRect )
 {
-    ImplPaint( rRect, false );
+    if (  !( GetStyle() & WB_NOBORDER ) )
+        ImplPaint( rRect, false );
 }
 
 // -----------------------------------------------------------------------
@@ -1518,6 +1544,10 @@ void TabControl::StateChanged( StateChangedType nType )
         ImplInitSettings( FALSE, FALSE, TRUE );
         Invalidate();
     }
+    else if ( nType == STATE_CHANGE_STYLE )
+    {
+        SetStyle( ImplInitStyle( GetStyle() ) );
+    }
 }
 
 // -----------------------------------------------------------------------
diff --git xmlscript/inc/xmlscript/xmldlg_imexp.hxx xmlscript/inc/xmlscript/xmldlg_imexp.hxx
index 341134c..22da027 100644
--- xmlscript/inc/xmlscript/xmldlg_imexp.hxx
+++ xmlscript/inc/xmlscript/xmldlg_imexp.hxx
@@ -44,6 +44,7 @@
 #ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HXX_
 #include <com/sun/star/uno/XComponentContext.hpp>
 #endif
+#include <com/sun/star/frame/XModel.hpp>
 
 #include "xmlscript/xmlns.h"
 
diff --git xmlscript/source/xmldlg_imexp/common.hxx xmlscript/source/xmldlg_imexp/common.hxx
index 4cf3b2f..95c4ac8 100644
--- xmlscript/source/xmldlg_imexp/common.hxx
+++ xmlscript/source/xmldlg_imexp/common.hxx
@@ -42,4 +42,5 @@ const sal_Int16 BORDER_SIMPLE_COLOR = 3;
 
 }
 
+#define XMLSCRIPT_GRAPHOBJ_URLPREFIX "vnd.sun.star.GraphicObject:"
 #endif
diff --git xmlscript/source/xmldlg_imexp/exp_share.hxx xmlscript/source/xmldlg_imexp/exp_share.hxx
index c8e8d94..8a0ddb4 100644
--- xmlscript/source/xmldlg_imexp/exp_share.hxx
+++ xmlscript/source/xmldlg_imexp/exp_share.hxx
@@ -93,16 +93,18 @@ class ElementDescriptor
 {
     css::uno::Reference< css::beans::XPropertySet > _xProps;
     css::uno::Reference< css::beans::XPropertyState > _xPropState;
+    css::uno::Reference< css::frame::XModel > _xDocument;
     
 public:
     inline ElementDescriptor(
         css::uno::Reference< css::beans::XPropertySet > const & xProps,
         css::uno::Reference< css::beans::XPropertyState > const & xPropState,
-        ::rtl::OUString const & name )
+        ::rtl::OUString const & name, css::uno::Reference< css::frame::XModel > const & xDocument )
         SAL_THROW( () )
         : XMLElement( name )
         , _xProps( xProps )
         , _xPropState( xPropState )
+ 	, _xDocument( xDocument ) 
         {}
     inline ElementDescriptor(
         ::rtl::OUString const & name )
@@ -144,6 +146,8 @@ public:
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
     void readVerticalAlignAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
+    void readImageURLAttr(
+        ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
     void readImageAlignAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
     void readImagePositionAttr(
@@ -174,17 +178,23 @@ public:
     //
     void readDialogModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
+    void readBullitinBoard( StyleBag * all_styles )
+        SAL_THROW( (css::uno::Exception) );
     void readMultiPageModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
+    void readFrameModel( StyleBag * all_styles )
+        SAL_THROW( (css::uno::Exception) );
+    void readPageModel( StyleBag * all_styles )
+        SAL_THROW( (css::uno::Exception) );
     void readButtonModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readEditModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readCheckBoxModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readRadioButtonModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readRadioButtonModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readComboBoxModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readComboBoxModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readCurrencyFieldModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
@@ -198,9 +208,9 @@ public:
         SAL_THROW( (css::uno::Exception) );
     void readGroupBoxModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readImageControlModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument  )
+    void readImageControlModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readListBoxModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readListBoxModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readNumericFieldModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
@@ -214,10 +224,10 @@ public:
         SAL_THROW( (css::uno::Exception) );
     void readProgressBarModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readScrollBarModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
-        SAL_THROW( (css::uno::Exception) );
-    void readSpinButtonModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readScrollBarModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
+    void readSpinButtonModel( StyleBag * all_styles )
+         SAL_THROW( (css::uno::Exception) );
     void readFixedHyperLinkModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
 };
diff --git xmlscript/source/xmldlg_imexp/imp_share.hxx xmlscript/source/xmldlg_imexp/imp_share.hxx
index ca0c179..d5be221 100644
--- xmlscript/source/xmldlg_imexp/imp_share.hxx
+++ xmlscript/source/xmldlg_imexp/imp_share.hxx
@@ -47,7 +47,7 @@
 #include <com/sun/star/xml/input/XRoot.hpp>
 #include <com/sun/star/script/XLibraryContainer.hpp>
 #include <vector>
-
+#include <boost/shared_ptr.hpp>
 
 namespace css = ::com::sun::star;
 
@@ -127,8 +127,10 @@ struct DialogImport
     css::uno::Reference< css::uno::XComponentContext > _xContext;
     css::uno::Reference< css::util::XNumberFormatsSupplier > _xSupplier;
     
-    ::std::vector< ::rtl::OUString > _styleNames;
-    ::std::vector< css::uno::Reference< css::xml::input::XElement > > _styles;
+    ::boost::shared_ptr< ::std::vector< ::rtl::OUString > > _pStyleNames;
+    ::boost::shared_ptr< ::std::vector< css::uno::Reference< css::xml::input::XElement > > > _pStyles;
+    ::std::vector< ::rtl::OUString >& _styleNames;
+    ::std::vector< css::uno::Reference< css::xml::input::XElement > >& _styles;
     
     css::uno::Reference< css::container::XNameContainer > _xDialogModel;
     css::uno::Reference< css::lang::XMultiServiceFactory > _xDialogModelFactory;
@@ -168,13 +170,33 @@ public:
         css::uno::Reference<css::uno::XComponentContext> const & xContext,
         css::uno::Reference<css::container::XNameContainer>
         const & xDialogModel,
+        ::boost::shared_ptr< ::std::vector< ::rtl::OUString > >& pStyleNames,
+        ::boost::shared_ptr< ::std::vector< css::uno::Reference< css::xml::input::XElement > > >& pStyles,
         css::uno::Reference<css::frame::XModel> const & xDoc )
         SAL_THROW( () )
         : _xContext( xContext )
+        , _pStyleNames( pStyleNames )
+        , _pStyles( pStyles )
+        , _styleNames( *_pStyleNames )
+        , _styles( *_pStyles )
         , _xDialogModel( xDialogModel )
-        , _xDialogModelFactory( xDialogModel, css::uno::UNO_QUERY_THROW ), _xDoc( xDoc )
+        , _xDialogModelFactory( xDialogModel, css::uno::UNO_QUERY_THROW )
+        , _xDoc( xDoc )
         { OSL_ASSERT( _xDialogModel.is() && _xDialogModelFactory.is() &&
                       _xContext.is() ); }
+ 
+    inline DialogImport( const DialogImport& rOther ) : _xContext( rOther._xContext )
+        , _xSupplier( rOther._xSupplier )
+        , _pStyleNames( rOther._pStyleNames )
+        , _pStyles( rOther._pStyles )
+        , _styleNames( *_pStyleNames )
+        , _styles( *_pStyles )
+        , _xDialogModel( rOther._xDialogModel )
+        , _xDialogModelFactory( rOther._xDialogModelFactory )
+        , _xDoc( rOther._xDoc ) 
+        , _xScriptLibraryContainer( rOther._xScriptLibraryContainer )
+        , XMLNS_DIALOGS_UID( rOther.XMLNS_DIALOGS_UID )
+        , XMLNS_SCRIPT_UID( rOther.XMLNS_SCRIPT_UID ) {}
     virtual ~DialogImport()
         SAL_THROW( () );
     
@@ -437,6 +459,8 @@ public:
     bool importVerticalAlignProperty(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName,
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
+    bool importImageURLProperty( rtl::OUString const & rPropName, rtl::OUString const & rAttrName, 
+        css::uno::Reference< css::xml::input::XAttributes > const & xAttributes );
     bool importImageAlignProperty(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName, 
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
@@ -476,6 +500,14 @@ public:
                 pImport->_xDialogModelFactory->createInstance( rControlName ),
                 css::uno::UNO_QUERY_THROW ), rId )
         {}
+    inline ControlImportContext(
+        DialogImport * pImport,
+        const css::uno::Reference< css::beans::XPropertySet >& xProps, ::rtl::OUString const & rControlName )
+        : ImportContext(
+            pImport,
+                xProps,
+                rControlName )
+        {}
     inline ~ControlImportContext()
     {
         _pImport->_xDialogModel->insertByName(
@@ -1046,7 +1078,62 @@ public:
         ElementBase * pParent, DialogImport * pImport )
         SAL_THROW( () )
         : ControlElement( rLocalName, xAttributes, pParent, pImport )
+        {
+            m_xContainer.set( _pImport->_xDialogModelFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) ), css::uno::UNO_QUERY );
+        }
+private:
+	css::uno::Reference< css::container::XNameContainer > m_xContainer;
+};
+
+//==============================================================================
+class Frame
+    : public ControlElement
+{
+    ::rtl::OUString _label;
+public:
+    virtual css::uno::Reference< css::xml::input::XElement >
+    SAL_CALL startChildElement(
+        sal_Int32 nUid, ::rtl::OUString const & rLocalName,
+        css::uno::Reference<css::xml::input::XAttributes> const & xAttributes )
+        throw (css::xml::sax::SAXException, css::uno::RuntimeException);
+    virtual void SAL_CALL endElement()
+        throw (css::xml::sax::SAXException, css::uno::RuntimeException);
+    
+    inline Frame(
+        ::rtl::OUString const & rLocalName,
+        css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
+        ElementBase * pParent, DialogImport * pImport )
+        SAL_THROW( () )
+        : ControlElement( rLocalName, xAttributes, pParent, pImport )
         {}
+private:
+	css::uno::Reference< css::container::XNameContainer > m_xContainer;
+};
+
+//==============================================================================
+class Page
+    : public ControlElement
+{
+public:
+    virtual css::uno::Reference< css::xml::input::XElement >
+    SAL_CALL startChildElement(
+        sal_Int32 nUid, ::rtl::OUString const & rLocalName,
+        css::uno::Reference<css::xml::input::XAttributes> const & xAttributes )
+        throw (css::xml::sax::SAXException, css::uno::RuntimeException);
+    virtual void SAL_CALL endElement()
+        throw (css::xml::sax::SAXException, css::uno::RuntimeException);
+    
+    inline Page(
+        ::rtl::OUString const & rLocalName,
+        css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
+        ElementBase * pParent, DialogImport * pImport )
+        SAL_THROW( () )
+        : ControlElement( rLocalName, xAttributes, pParent, pImport )
+        {
+            m_xContainer.set( _pImport->_xDialogModelFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoPageModel") ) ), css::uno::UNO_QUERY );
+        }
+private:
+	css::uno::Reference< css::container::XNameContainer > m_xContainer;
 };
 
 class ProgressBarElement
diff --git xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
index ba28702..a3eb6f2 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
@@ -38,11 +38,7 @@
 #include <com/sun/star/table/CellAddress.hpp>
 #include <com/sun/star/table/CellRangeAddress.hpp>
 #include <com/sun/star/util/XNumberFormatsSupplier.hpp>
-#include <com/sun/star/document/XStorageBasedDocument.hpp>
-#include <com/sun/star/document/XGraphicObjectResolver.hpp>
-#include <comphelper/componentcontext.hxx>
-#include <comphelper/processfactory.hxx>
-
+#include <com/sun/star/lang/XServiceInfo.hpp>
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
@@ -140,7 +136,9 @@ static inline bool readFontProps( ElementDescriptor * element, Style & style )
 void ElementDescriptor::readMultiPageModel( StyleBag * all_styles )
 {
     // collect styles
-    Style aStyle( 0x2 | 0x8 | 0x20 );
+    Style aStyle( 0x1 | 0x2 | 0x8 | 0x20 );
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("BackgroundColor") ) ) >>= aStyle._backgroundColor)
+        aStyle._set |= 0x1;
     if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextColor") ) ) >>= aStyle._textColor)
         aStyle._set |= 0x2;
     if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextLineColor") ) ) >>= aStyle._textLineColor)
@@ -155,24 +153,101 @@ void ElementDescriptor::readMultiPageModel( StyleBag * all_styles )
 
     // collect elements
     readDefaults();
-    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") ),
+    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiPageValue") ),
                   OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ) );
-    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ProgressValueMax") ),
-                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value-max") ) );
+    Any aDecorationAny( _xProps->getPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("Decoration") ) ) );
+    bool bDecoration = sal_True;
+    if ( (aDecorationAny >>= bDecoration) && !bDecoration )
+		addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":withtabs") ), OUString( RTL_CONSTASCII_USTRINGPARAM("false") ) );
 
+    readEvents();
+    uno::Reference< container::XNameContainer > xPagesContainer( _xProps, uno::UNO_QUERY );
+    if ( xPagesContainer.is() && xPagesContainer->getElementNames().getLength() )
+    {
+        ElementDescriptor * pElem = new ElementDescriptor( _xProps, _xPropState, OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") ), _xDocument );
+        pElem->readBullitinBoard( all_styles );
+        addSubElement( pElem );
+    }
+}
+//__________________________________________________________________________________________________
+void ElementDescriptor::readFrameModel( StyleBag * all_styles )
+{
+    // collect styles
+    Style aStyle( 0x1 | 0x2 | 0x8 | 0x20 );
+/*
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("BackgroundColor") ) ) >>= aStyle._backgroundColor)
+        aStyle._set |= 0x1;
+*/
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextColor") ) ) >>= aStyle._textColor)
+        aStyle._set |= 0x2;
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextLineColor") ) ) >>= aStyle._textLineColor)
+        aStyle._set |= 0x20;
+    if (readFontProps( this, aStyle ))
+        aStyle._set |= 0x8;
+    if (aStyle._set)
+    {
+        addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":style-id") ),
+                      all_styles->getStyleId( aStyle ) );
+    }
+
+    // collect elements
+    readDefaults();
     OUString aTitle;
-    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("Label") ) ) >>= aTitle)
+   
+    if ( readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("Label") ) ) >>= aTitle)
     {
         ElementDescriptor * title = new ElementDescriptor(
             _xProps, _xPropState,
-            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ) );
+            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ), _xDocument );
         title->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ),
                              aTitle );
         addSubElement( title );
     }
 
+    uno::Reference< container::XNameContainer > xControlContainer( _xProps, uno::UNO_QUERY );
+    if ( xControlContainer.is() && xControlContainer->getElementNames().getLength() )
+    {
+        ElementDescriptor * pElem = new ElementDescriptor( _xProps, _xPropState, OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") ), _xDocument );
+        pElem->readBullitinBoard( all_styles );
+        addSubElement( pElem );
+    }
     readEvents();
 }
+//__________________________________________________________________________________________________
+void ElementDescriptor::readPageModel( StyleBag * all_styles )
+{
+    // collect styles
+    Style aStyle( 0x1 | 0x2 | 0x8 | 0x20 );
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("BackgroundColor") ) ) >>= aStyle._backgroundColor)
+        aStyle._set |= 0x1;
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextColor") ) ) >>= aStyle._textColor)
+        aStyle._set |= 0x2;
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextLineColor") ) ) >>= aStyle._textLineColor)
+        aStyle._set |= 0x20;
+    if (readFontProps( this, aStyle ))
+        aStyle._set |= 0x8;
+    if (aStyle._set)
+    {
+        addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":style-id") ),
+                      all_styles->getStyleId( aStyle ) );
+    }
+
+    // collect elements
+    readDefaults();
+    rtl::OUString aTitle;
+    readStringAttr(
+        OUString( RTL_CONSTASCII_USTRINGPARAM("Title") ),
+        OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ) );
+    uno::Reference< container::XNameContainer > xControlContainer( _xProps, uno::UNO_QUERY );
+    if ( xControlContainer.is() && xControlContainer->getElementNames().getLength() )
+    {
+        ElementDescriptor * pElem = new ElementDescriptor( _xProps, _xPropState, OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") ), _xDocument );
+        pElem->readBullitinBoard( all_styles );
+        addSubElement( pElem );
+    }
+    readEvents();
+}
+
 void ElementDescriptor::readButtonModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
@@ -206,8 +281,10 @@ void ElementDescriptor::readButtonModel( StyleBag * all_styles )
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":valign") ) );
     readButtonTypeAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("PushButtonType") ),
                         OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":button-type") ) );
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+                           OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
+
+
     readImagePositionAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-position") ) );
     readImageAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageAlign") ),
@@ -277,8 +354,8 @@ void ElementDescriptor::readCheckBoxModel( StyleBag * all_styles )
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );
     readVerticalAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":valign") ) );
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+                           OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
     readImagePositionAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-position") ) );
     readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiLine") ),
@@ -314,7 +391,7 @@ void ElementDescriptor::readCheckBoxModel( StyleBag * all_styles )
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readComboBoxModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument )
+void ElementDescriptor::readComboBoxModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -356,7 +433,7 @@ void ElementDescriptor::readComboBoxModel( StyleBag * all_styles, Reference< fra
     readShortAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("LineCount") ),
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linecount") ) );
     // Cell Range, Ref Cell etc.
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+    lclExportBindableAndListSourceBits( _xDocument, _xProps, *this );
     // string item list
     Sequence< OUString > itemValues;
     if ((readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ) ) >>= itemValues) &&
@@ -364,14 +441,14 @@ void ElementDescriptor::readComboBoxModel( StyleBag * all_styles, Reference< fra
     {
         ElementDescriptor * popup = new ElementDescriptor(
             _xProps, _xPropState,
-            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menupopup") ) );
+            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menupopup") ), _xDocument );
 
         OUString const * pItemValues = itemValues.getConstArray();
         for ( sal_Int32 nPos = 0; nPos < itemValues.getLength(); ++nPos )
         {
             ElementDescriptor * item = new ElementDescriptor(
                 _xProps, _xPropState,
-                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menuitem") ) );
+                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menuitem") ), _xDocument );
             item->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ),
                                 pItemValues[ nPos ] );
             popup->addSubElement( item );
@@ -382,7 +459,7 @@ void ElementDescriptor::readComboBoxModel( StyleBag * all_styles, Reference< fra
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
+void ElementDescriptor::readListBoxModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -417,7 +494,7 @@ void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< fram
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linecount") ) );
     readAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Align") ),
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+    lclExportBindableAndListSourceBits( _xDocument, _xProps, *this );
     // string item list
     Sequence< OUString > itemValues;
     if ((readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ) ) >>= itemValues) &&
@@ -425,7 +502,7 @@ void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< fram
     {
         ElementDescriptor * popup = new ElementDescriptor(
             _xProps, _xPropState,
-            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menupopup") ) );
+            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menupopup") ), _xDocument );
 
         OUString const * pItemValues = itemValues.getConstArray();
         sal_Int32 nPos;
@@ -433,7 +510,7 @@ void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< fram
         {
             ElementDescriptor * item = new ElementDescriptor(
                 _xProps, _xPropState,
-                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menuitem") ) );
+                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menuitem") ), _xDocument );
             item->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ),
                                 pItemValues[ nPos ] );
             popup->addSubElement( item );
@@ -457,7 +534,7 @@ void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< fram
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readRadioButtonModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
+void ElementDescriptor::readRadioButtonModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -488,8 +565,8 @@ void ElementDescriptor::readRadioButtonModel( StyleBag * all_styles, Reference<
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );
     readVerticalAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":valign") ) );
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+                           OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
     readImagePositionAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-position") ) );
     readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiLine") ),
@@ -515,7 +592,7 @@ void ElementDescriptor::readRadioButtonModel( StyleBag * all_styles, Reference<
             break;
         }
     }
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+    lclExportBindableAndListSourceBits( _xDocument, _xProps, *this );
     readEvents();
 }
 //__________________________________________________________________________________________________
@@ -540,11 +617,11 @@ void ElementDescriptor::readGroupBoxModel( StyleBag * all_styles )
     readDefaults();
 
     OUString aTitle;
-    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("Label") ) ) >>= aTitle)
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("Label") ) ) >>= aTitle )
     {
         ElementDescriptor * title = new ElementDescriptor(
             _xProps, _xPropState,
-            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ) );
+            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ), _xDocument );
         title->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ),
                              aTitle );
         addSubElement( title );
@@ -688,7 +765,7 @@ void ElementDescriptor::readEditModel( StyleBag * all_styles )
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readImageControlModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+void ElementDescriptor::readImageControlModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -707,33 +784,10 @@ void ElementDescriptor::readImageControlModel( StyleBag * all_styles, com::sun::
     readDefaults();
     readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ScaleImage") ),
                   OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":scale-image") ) );
-    rtl::OUString sURL;
-    _xProps->getPropertyValue( OUSTR("ImageURL") ) >>= sURL;
-    
-    if ( sURL.indexOf( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.GraphicObject:"  ) ) ) == 0 )
-    {
-        Reference< document::XStorageBasedDocument > xDocStorage( xDocument, UNO_QUERY );
-
-        if ( xDocStorage.is() )
-        {
-            uno::Sequence< Any > aArgs( 1 );
-            aArgs[ 0 ] <<= xDocStorage->getDocumentStorage();
-
-            ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
-            uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
-            aContext.createComponentWithArguments( OUSTR( "com.sun.star.comp.Svx.GraphicExportHelper" ), aArgs, xGraphicResolver );
-            if ( xGraphicResolver.is() )
-            {
-                sURL = xGraphicResolver->resolveGraphicObjectURL( sURL );
-            }
-        }     
-    }
-    if ( sURL.getLength() > 0 )
-    {
-        addAttribute( OUSTR(XMLNS_DIALOGS_PREFIX ":src"), sURL );
-    }
     readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Tabstop") ),
                   OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":tabstop") ) );
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+                      OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":src") ) );
     readEvents();
 }
 //__________________________________________________________________________________________________
@@ -1151,6 +1205,7 @@ void ElementDescriptor::readFormattedFieldModel( StyleBag * all_styles )
     
     readEvents();
 }
+
 //__________________________________________________________________________________________________
 void ElementDescriptor::readFixedLineModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
@@ -1206,7 +1261,7 @@ void ElementDescriptor::readProgressBarModel( StyleBag * all_styles )
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readScrollBarModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
+void ElementDescriptor::readScrollBarModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -1245,11 +1300,11 @@ void ElementDescriptor::readScrollBarModel( StyleBag * all_styles, Reference< fr
     readHexLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SymbolColor") ),
                      OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":symbol-color") ) );
     // Cell Range, Ref Cell etc.
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+    lclExportBindableAndListSourceBits( _xDocument, _xProps, *this );
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readSpinButtonModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
+void ElementDescriptor::readSpinButtonModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -1284,7 +1339,7 @@ void ElementDescriptor::readSpinButtonModel( StyleBag * all_styles, Reference< f
     readHexLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SymbolColor") ),
                      OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":symbol-color") ) );
     // Cell Range, Ref Cell etc.
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+    lclExportBindableAndListSourceBits( _xDocument, _xProps, *this );
     readEvents();
 }
 //__________________________________________________________________________________________________
@@ -1334,10 +1389,254 @@ void ElementDescriptor::readDialogModel( StyleBag * all_styles )
         addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":withtitlebar") ),
                       OUString( RTL_CONSTASCII_USTRINGPARAM("false") ) ); 
 
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) ); 
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+                           OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
 
     readEvents();
 }
 
+void ElementDescriptor::readBullitinBoard( StyleBag * all_styles )
+    SAL_THROW( (Exception) )
+{
+    // collect elements
+    ::std::vector< ElementDescriptor* > all_elements;
+    // read out all props
+    Reference<  container::XNameContainer > xDialogModel( _xProps, UNO_QUERY );
+    if ( !xDialogModel.is() )
+        return; // #TODO throw??? 
+    Sequence< OUString > aElements( xDialogModel->getElementNames() );
+    OUString const * pElements = aElements.getConstArray();
+    
+    ElementDescriptor * pRadioGroup = 0;
+    
+    sal_Int32 nPos;
+    for ( nPos = 0; nPos < aElements.getLength(); ++nPos )
+    {
+        Any aControlModel( xDialogModel->getByName( pElements[ nPos ] ) );
+        Reference< beans::XPropertySet > xProps;
+        OSL_VERIFY( aControlModel >>= xProps );
+        if (! xProps.is())
+            continue;
+        Reference< beans::XPropertyState > xPropState( xProps, UNO_QUERY );
+        OSL_ENSURE( xPropState.is(), "no XPropertyState!" );
+        if (! xPropState.is())
+            continue;
+        Reference< lang::XServiceInfo > xServiceInfo( xProps, UNO_QUERY );
+        OSL_ENSURE( xServiceInfo.is(), "no XServiceInfo!" );
+        if (! xServiceInfo.is())
+            continue;
+
+        ElementDescriptor * pElem = 0;
+        
+        // group up radio buttons
+        if ( xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlRadioButtonModel") ) ) )
+        {
+            if (! pRadioGroup) // open radiogroup
+            {
+                pRadioGroup = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":radiogroup") ), _xDocument );
+                all_elements.push_back( pRadioGroup );
+            }
+            
+            pElem = new ElementDescriptor(
+                xProps, xPropState,
+                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":radio") ), _xDocument );
+            pElem->readRadioButtonModel( all_styles );
+            pRadioGroup->addSubElement( pElem );
+        }
+        else // no radio
+        {
+            pRadioGroup = 0; // close radiogroup
+            
+            if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlButtonModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":button") ), _xDocument );
+                pElem->readButtonModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCheckBoxModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":checkbox") ), _xDocument );
+                pElem->readCheckBoxModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlComboBoxModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":combobox") ), _xDocument );
+                pElem->readComboBoxModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menulist") ), _xDocument );
+                pElem->readListBoxModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":titledbox") ), _xDocument );
+                pElem->readGroupBoxModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":multipage") ), _xDocument );
+                pElem->readMultiPageModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoFrameModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":frame") ), _xDocument );
+                pElem->readFrameModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoPageModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":page") ), _xDocument );
+                pElem->readPageModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedTextModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":text") ), _xDocument );
+                pElem->readFixedTextModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlEditModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":textfield") ), _xDocument );
+                pElem->readEditModel( all_styles );
+            }
+			// FixedHyperLink
+			else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedHyperlinkModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linklabel") ), _xDocument );
+                pElem->readFixedHyperLinkModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlImageControlModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":img") ), _xDocument );
+                pElem->readImageControlModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFileControlModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":filecontrol") ), _xDocument );
+                pElem->readFileControlModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.tree.TreeControlModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":treecontrol") ), _xDocument );
+                pElem->readTreeControlModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCurrencyFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":currencyfield") ), _xDocument );
+                pElem->readCurrencyFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlDateFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":datefield") ), _xDocument );
+                pElem->readDateFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlNumericFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":numericfield") ), _xDocument );
+                pElem->readNumericFieldModel( all_styles );
+            }           
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlTimeFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":timefield") ) , _xDocument);
+                pElem->readTimeFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlPatternFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":patternfield") ), _xDocument );
+                pElem->readPatternFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFormattedFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":formattedfield") ), _xDocument );
+                pElem->readFormattedFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedLineModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":fixedline") ), _xDocument );
+                pElem->readFixedLineModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlScrollBarModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":scrollbar") ), _xDocument );
+                pElem->readScrollBarModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlSpinButtonModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":spinbutton") ), _xDocument );
+                pElem->readSpinButtonModel( all_styles );
+             }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlProgressBarModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":progressmeter") ), _xDocument );
+                pElem->readProgressBarModel( all_styles );
+            }
+            //
+            
+            if (pElem)
+            {
+                all_elements.push_back( pElem );
+            }
+            else
+            {
+                OSL_ENSURE( sal_False, "unknown control type!" );
+                continue;
+            }
+        }
+    }
+    if (! all_elements.empty())
+    {
+        for ( std::size_t n = 0; n < all_elements.size(); ++n )
+        {
+            addSubElement( all_elements[ n ] );
+        }
+    }
+}
 }
diff --git xmlscript/source/xmldlg_imexp/xmldlg_export.cxx xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
index 656ead7..54c0298 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
@@ -60,6 +60,12 @@
 
 #include <com/sun/star/view/SelectionType.hpp>
 
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/document/XStorageBasedDocument.hpp>
+#include <com/sun/star/document/XGraphicObjectResolver.hpp>
+
+#include <comphelper/componentcontext.hxx>
+#include <comphelper/processfactory.hxx>
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
@@ -779,6 +785,33 @@ void ElementDescriptor::readVerticalAlignAttr( OUString const & rPropName, OUStr
     }
 }
 //__________________________________________________________________________________________________
+void ElementDescriptor::readImageURLAttr( OUString const & rPropName, OUString const & rAttrName )
+{
+    if (beans::PropertyState_DEFAULT_VALUE != _xPropState->getPropertyState( rPropName ))
+    {
+        rtl::OUString sURL;
+        _xProps->getPropertyValue( rPropName ) >>= sURL;
+    
+        if ( sURL.getLength() && sURL.compareToAscii( XMLSCRIPT_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( XMLSCRIPT_GRAPHOBJ_URLPREFIX ) ) == 0 )
+        {
+            Reference< document::XStorageBasedDocument > xDocStorage( _xDocument, UNO_QUERY );
+            if ( xDocStorage.is() )
+            {
+                uno::Sequence< Any > aArgs( 1 );
+                aArgs[ 0 ] <<= xDocStorage->getDocumentStorage();
+            
+                ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
+                uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
+                aContext.createComponentWithArguments( OUSTR( "com.sun.star.comp.Svx.GraphicExportHelper" ), aArgs, xGraphicResolver );
+                if ( xGraphicResolver.is() )
+                    sURL = xGraphicResolver->resolveGraphicObjectURL( sURL );
+            }     
+        }
+        if ( sURL.getLength() )
+                addAttribute( rAttrName, sURL );
+    }
+}
+//__________________________________________________________________________________________________
 void ElementDescriptor::readImageAlignAttr( OUString const & rPropName, OUString const & rAttrName )
 {
     if (beans::PropertyState_DEFAULT_VALUE != _xPropState->getPropertyState( rPropName ))
@@ -1333,249 +1366,18 @@ void SAL_CALL exportDialogModel(
     SAL_THROW( (Exception) )
 {
     StyleBag all_styles;
-    ::std::vector< Reference< xml::sax::XAttributeList > > all_elements;
-    
-    // read out all props
-
-    Sequence< OUString > aElements( xDialogModel->getElementNames() );
-    OUString const * pElements = aElements.getConstArray();
-    
-    ElementDescriptor * pRadioGroup = 0;
-    
-    sal_Int32 nPos;
-    for ( nPos = 0; nPos < aElements.getLength(); ++nPos )
-    {
-        Any aControlModel( xDialogModel->getByName( pElements[ nPos ] ) );
-        Reference< beans::XPropertySet > xProps;
-        OSL_VERIFY( aControlModel >>= xProps );
-        if (! xProps.is())
-            continue;
-        Reference< beans::XPropertyState > xPropState( xProps, UNO_QUERY );
-        OSL_ENSURE( xPropState.is(), "no XPropertyState!" );
-        if (! xPropState.is())
-            continue;
-        Reference< lang::XServiceInfo > xServiceInfo( xProps, UNO_QUERY );
-        OSL_ENSURE( xServiceInfo.is(), "no XServiceInfo!" );
-        if (! xServiceInfo.is())
-            continue;
+    // window
+    Reference< beans::XPropertySet > xProps( xDialogModel, UNO_QUERY );
+    OSL_ASSERT( xProps.is() );
+    Reference< beans::XPropertyState > xPropState( xProps, UNO_QUERY );
+    OSL_ASSERT( xPropState.is() );
 
-        ElementDescriptor * pElem = 0;
-        Reference< xml::sax::XAttributeList > xElem;
-        
-        // group up radio buttons
-        if ( xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlRadioButtonModel") ) ) )
-        {
-            if (! pRadioGroup) // open radiogroup
-            {
-                pRadioGroup = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":radiogroup") ) );
-                all_elements.push_back( pRadioGroup );
-            }
-            
-            pElem = new ElementDescriptor(
-                xProps, xPropState,
-                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":radio") ) );
-            xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-            pElem->readRadioButtonModel( &all_styles, xDocument  );
-            pRadioGroup->addSubElement( xElem );
-        }
-        else // no radio
-        {
-            pRadioGroup = 0; // close radiogroup
-            
-            if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlButtonModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":button") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readButtonModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCheckBoxModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":checkbox") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readCheckBoxModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlComboBoxModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":combobox") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readComboBoxModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menulist") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readListBoxModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":titledbox") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readGroupBoxModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":multipage") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readMultiPageModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedTextModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":text") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFixedTextModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlEditModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":textfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readEditModel( &all_styles );
-            }
-            // FixedHyperLink
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedHyperlinkModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
+    ElementDescriptor * pElem = new ElementDescriptor(
                     xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linklabel") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFixedHyperLinkModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlImageControlModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":img") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readImageControlModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFileControlModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":filecontrol") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFileControlModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.tree.TreeControlModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":treecontrol") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readTreeControlModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCurrencyFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":currencyfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readCurrencyFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlDateFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":datefield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readDateFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlNumericFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":numericfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readNumericFieldModel( &all_styles );
-            }           
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlTimeFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":timefield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readTimeFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlPatternFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":patternfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readPatternFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFormattedFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":formattedfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFormattedFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedLineModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":fixedline") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFixedLineModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlScrollBarModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":scrollbar") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readScrollBarModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlSpinButtonModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":spinbutton") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readSpinButtonModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlProgressBarModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":progressmeter") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readProgressBarModel( &all_styles );
-            }
-            //
-            
-            OSL_ASSERT( xElem.is() );
-            if (xElem.is())
-            {
-                all_elements.push_back( xElem );
-            }
-            else
-            {
-                OSL_ENSURE( sal_False, "unknown control type!" );
-                continue;
-            }
-        }
-    }
-    
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") ), xDocument );
+    Reference< xml::sax::XAttributeList > xElem( pElem ); 
+    pElem->readBullitinBoard( &all_styles );
+
     xOut->startDocument();
     
     OUString aDocTypeStr( RTL_CONSTASCII_USTRINGPARAM(
@@ -1584,14 +1386,9 @@ void SAL_CALL exportDialogModel(
     xOut->unknown( aDocTypeStr );
     xOut->ignorableWhitespace( OUString() );
     
-    // window
-    Reference< beans::XPropertySet > xProps( xDialogModel, UNO_QUERY );
-    OSL_ASSERT( xProps.is() );
-    Reference< beans::XPropertyState > xPropState( xProps, UNO_QUERY );
-    OSL_ASSERT( xPropState.is() );
     
     OUString aWindowName( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":window") );
-    ElementDescriptor * pWindow = new ElementDescriptor( xProps, xPropState, aWindowName );
+    ElementDescriptor * pWindow = new ElementDescriptor( xProps, xPropState, aWindowName, xDocument );
     Reference< xml::sax::XAttributeList > xWindow( pWindow );
     pWindow->readDialogModel( &all_styles );
     xOut->ignorableWhitespace( OUString() );
@@ -1601,20 +1398,14 @@ void SAL_CALL exportDialogModel(
     // dump out stylebag
     all_styles.dump( xOut );
     
-    if (! all_elements.empty())
+    if ( xDialogModel->getElementNames().getLength() )
     {   
         // open up bulletinboard
         OUString aBBoardName( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") );
         xOut->ignorableWhitespace( OUString() );
-        xOut->startElement( aBBoardName, Reference< xml::sax::XAttributeList >() );
-        
-        // export control elements
-        for ( std::size_t n = 0; n < all_elements.size(); ++n )
-        {
-            ElementDescriptor * pElem = static_cast< ElementDescriptor * >( all_elements[ n ].get() );
-            pElem->dump( xOut.get() );
-        }
+        xOut->startElement( aBBoardName, xElem );
         
+        pElem->dumpSubElements( xOut.get() );
         // end bulletinboard
         xOut->ignorableWhitespace( OUString() );
         xOut->endElement( aBBoardName );
diff --git xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
index 956ec15..9c032b5 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
@@ -40,30 +40,36 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/beans/XPropertyState.hpp>
 #include <com/sun/star/document/XStorageBasedDocument.hpp>
-#include <com/sun/star/document/XGraphicObjectResolver.hpp>
 #include <com/sun/star/script/XVBACompat.hpp>
 
-#include <comphelper/componentcontext.hxx>
-#include <comphelper/processfactory.hxx>
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
 using ::rtl::OUString;
 
 namespace xmlscript
 {
-Reference< xml::input::XElement > MultiPage::startChildElement(
+
+Reference< xml::input::XElement > Frame::startChildElement(
 	sal_Int32 nUid, OUString const & rLocalName,
 	Reference< xml::input::XAttributes > const & xAttributes )
 	throw (xml::sax::SAXException, RuntimeException)
 {
+    if ( !m_xContainer.is() )
+        m_xContainer.set( _pImport->_xDialogModelFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoFrameModel") ) ), UNO_QUERY );
 	// event
-rtl::OUString _label = rtl::OUString::createFromAscii("foo");
     if (_pImport->isEventElement( nUid, rLocalName ))
 	{
 		return new EventElement(
             nUid, rLocalName, xAttributes, this, _pImport );
 	}
-	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("title") ))
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("bulletinboard") ))
+	{
+		// Create new DialogImport for this container
+		DialogImport* pFrameImport = new DialogImport( *_pImport );
+                pFrameImport->_xDialogModel = m_xContainer;
+		return new BulletinBoardElement( rLocalName, xAttributes, this,  pFrameImport );
+	}
+        else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("title") ))
 	{
 		getStringAttr( &_label,
                        OUString( RTL_CONSTASCII_USTRINGPARAM("value") ),
@@ -76,6 +82,69 @@ rtl::OUString _label = rtl::OUString::createFromAscii("foo");
 	}
 	else
 	{
+                OSL_TRACE("****** ARGGGGG!!!! **********");
+		throw xml::sax::SAXException(
+			OUString( RTL_CONSTASCII_USTRINGPARAM("expected event element!") ),
+			Reference< XInterface >(), Any() );
+	}
+}
+//__________________________________________________________________________________________________
+
+void Frame::endElement()
+	throw (xml::sax::SAXException, RuntimeException)
+{
+        if ( !m_xContainer.is() )
+            m_xContainer.set( _pImport->_xDialogModelFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoFrameModel") ) ), UNO_QUERY );
+        Reference< beans::XPropertySet > xProps( m_xContainer, UNO_QUERY_THROW );
+        // _pImport is what we need to add to ( e.g. the dialog in this case )
+	ControlImportContext ctx( _pImport, xProps,   getControlId( _xAttributes ) );
+
+	Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
+	
+	Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
+	if (xStyle.is())
+	{
+		StyleElement * pStyle = static_cast< StyleElement * >( xStyle.get () );
+		pStyle->importTextColorStyle( xControlModel );
+		pStyle->importTextLineColorStyle( xControlModel );
+		pStyle->importFontStyle( xControlModel );
+	}
+	
+	ctx.importDefaults( 0, 0, _xAttributes ); // inherited from BulletinBoardElement
+	if (_label.getLength())
+	{
+		xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("Label") ),
+										 makeAny( _label ) );
+	}
+	ctx.importEvents( _events );
+    // avoid ring-reference:
+    // vector< event elements > holding event elements holding this (via _pParent)
+    _events.clear();
+}
+
+//===
+Reference< xml::input::XElement > MultiPage::startChildElement(
+	sal_Int32 nUid, OUString const & rLocalName,
+	Reference< xml::input::XAttributes > const & xAttributes )
+	throw (xml::sax::SAXException, RuntimeException)
+{
+	// event
+rtl::OUString _label = rtl::OUString::createFromAscii("foo");
+    if (_pImport->isEventElement( nUid, rLocalName ))
+	{
+		return new EventElement(
+            nUid, rLocalName, xAttributes, this, _pImport );
+	}
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("bulletinboard") ))
+	{
+		// Create new DialogImport for this container
+
+		DialogImport* pMultiPageImport = new DialogImport( *_pImport );
+                pMultiPageImport->_xDialogModel = m_xContainer;
+		return new BulletinBoardElement( rLocalName, xAttributes, this,  pMultiPageImport );
+	}
+	else
+	{
 		
 		throw xml::sax::SAXException(
 			OUString( RTL_CONSTASCII_USTRINGPARAM("expected event element!") ),
@@ -87,10 +156,10 @@ rtl::OUString _label = rtl::OUString::createFromAscii("foo");
 void MultiPage::endElement()
 	throw (xml::sax::SAXException, RuntimeException)
 {
-	ControlImportContext ctx(
-		_pImport, getControlId( _xAttributes ),
-		OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) );
-//		OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) );
+        Reference< beans::XPropertySet > xProps( m_xContainer, UNO_QUERY_THROW );
+        // _pImport is what we need to add to ( e.g. the dialog in this case )
+	ControlImportContext ctx( _pImport, xProps, getControlId( _xAttributes ));
+
 	Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
 	
 	Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
@@ -100,64 +169,78 @@ void MultiPage::endElement()
 		pStyle->importTextColorStyle( xControlModel );
 		pStyle->importTextLineColorStyle( xControlModel );
 		pStyle->importFontStyle( xControlModel );
+		pStyle->importBackgroundColorStyle( xControlModel );
 	}
 	
 	ctx.importDefaults( 0, 0, _xAttributes ); // inherited from BulletinBoardElement
-	ctx.importLongProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") ),
+	ctx.importLongProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiPageValue") ),
                             OUString( RTL_CONSTASCII_USTRINGPARAM("value") ),
                             _xAttributes );
-	ctx.importLongProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ProgressValueMax") ),
-                            OUString( RTL_CONSTASCII_USTRINGPARAM("value-max") ),
-                            _xAttributes );
+        ctx.importBooleanProperty(
+            OUString( RTL_CONSTASCII_USTRINGPARAM("Decoration") ),
+            OUString( RTL_CONSTASCII_USTRINGPARAM("withtabs") ),
+        _xAttributes );
 	ctx.importEvents( _events );
     // avoid ring-reference:
     // vector< event elements > holding event elements holding this (via _pParent)
     _events.clear();
 }
 
-// #FIXME cut'n'pasted from xmloff/source/core/xmlimp.cxx:1251 
-// of course we need to find a common home for this helper
-
-bool IsPackageURL( const ::rtl::OUString& rURL )
+Reference< xml::input::XElement > Page::startChildElement(
+	sal_Int32 nUid, OUString const & rLocalName,
+	Reference< xml::input::XAttributes > const & xAttributes )
+	throw (xml::sax::SAXException, RuntimeException)
 {
-    // Some quick tests: Some may rely on the package structure!
-    sal_Int32 nLen = rURL.getLength();
-    if( (nLen > 0 && '/' == rURL[0]) )
-        // RFC2396 net_path or abs_path
-        return false;
-    else if( nLen > 1 && '.' == rURL[0] )
-    {
-        if( '.' == rURL[1] )
-            // ../: We are never going up one level, so we know
-            // it's not an external URI
-            return false;
-        else if( '/' == rURL[1] )
-            // we are remaining on a level, so it's an package URI
-            return true;
-    }
-
-    // Now check for a RFC2396 schema
-    sal_Int32 nPos = 1;
-    while( nPos < nLen )
-    {
-        switch( rURL[nPos] )
-        {
-            case '/':
-                // a relative path segement
-                return true;
-            case ':':
-                // a schema
-                return false;
-            default:
-                break;
-                // we don't care about any other characters
-        }
-        ++nPos;
-    }
+	// event
+    if (_pImport->isEventElement( nUid, rLocalName ))
+	{
+		return new EventElement(
+            nUid, rLocalName, xAttributes, this, _pImport );
+	}
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("bulletinboard") ))
+	{
 
-    return true;
+		DialogImport* pPageImport = new DialogImport( *_pImport );
+                pPageImport->_xDialogModel = m_xContainer;
+		return new BulletinBoardElement( rLocalName, xAttributes, this,  pPageImport );
+	}
+	else
+	{
+		
+		throw xml::sax::SAXException(
+			OUString( RTL_CONSTASCII_USTRINGPARAM("expected event element!") ),
+			Reference< XInterface >(), Any() );
+	}
 }
+//__________________________________________________________________________________________________
+
+void Page::endElement()
+	throw (xml::sax::SAXException, RuntimeException)
+{
+        Reference< beans::XPropertySet > xProps( m_xContainer, UNO_QUERY_THROW );
+       
+	ControlImportContext ctx( _pImport, xProps, getControlId( _xAttributes ));
 
+	Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
+	
+	Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
+	if (xStyle.is())
+	{
+		StyleElement * pStyle = static_cast< StyleElement * >( xStyle.get () );
+		pStyle->importTextColorStyle( xControlModel );
+		pStyle->importTextLineColorStyle( xControlModel );
+		pStyle->importFontStyle( xControlModel );
+		pStyle->importBackgroundColorStyle( xControlModel );
+	}
+	
+	ctx.importDefaults( 0, 0, _xAttributes ); // inherited from BulletinBoardElement
+	ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("Title") ), OUString( RTL_CONSTASCII_USTRINGPARAM("title") ), _xAttributes );
+	ctx.importEvents( _events );
+    // avoid ring-reference:
+    // vector< event elements > holding event elements holding this (via _pParent)
+    _events.clear();
+}
+ 
 void importBindableAndListRangeBits( DialogImport* _pImport, const rtl::OUString sLinkedCell, const rtl::OUString & sCellRange, ControlImportContext& ctx )
 {
     Reference< lang::XMultiServiceFactory > xFac( _pImport->getDocOwner(), UNO_QUERY );
@@ -453,7 +536,6 @@ void SpinButtonElement::endElement()
 }
 
 //##################################################################################################
-
 // fixedline
 //__________________________________________________________________________________________________
 Reference< xml::input::XElement > FixedLineElement::startChildElement(
@@ -1281,37 +1363,7 @@ void ImageControlElement::endElement()
     ctx.importBooleanProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ScaleImage") ),
                                OUString( RTL_CONSTASCII_USTRINGPARAM("scale-image") ),
                                _xAttributes );
-    rtl::OUString sURL = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "src" ) );
-    Reference< document::XStorageBasedDocument > xDocStorage( _pImport->getDocOwner(), UNO_QUERY );
-
-    if ( xDocStorage.is() && IsPackageURL( sURL ) )
-    {
-        uno::Sequence< Any > aArgs( 1 );
-        aArgs[ 0 ] <<= xDocStorage->getDocumentStorage();
-
-        ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
-        uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
-        aContext.createComponentWithArguments( OUSTR( "com.sun.star.comp.Svx.GraphicImportHelper" ), aArgs, xGraphicResolver );
-
-        if ( xGraphicResolver.is() )
-        {
-            rtl::OUString aTmp( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.Package:" ) );
-            aTmp += sURL;
-            sURL = xGraphicResolver->resolveGraphicObjectURL( aTmp );
-            Reference< beans::XPropertySet > xProps( ctx.getControlModel(), UNO_QUERY );
-            // we must set the url while the graphic object ( held by the resolver is in scope )
-            if ( xProps.is() )
-                xProps->setPropertyValue( OUSTR("ImageURL"), makeAny( sURL ) );
-        }
-    }
-    
-    else if ( sURL.getLength() > 0 )
-    {
-        Reference< beans::XPropertySet > xProps( ctx.getControlModel(), UNO_QUERY );
-        if ( xProps.is() )
-            xProps->setPropertyValue( OUSTR("ImageURL"), makeAny( sURL ) );
-    }
-
+    ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "src" ), _xAttributes );
     ctx.importBooleanProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("Tabstop") ),
                                OUString( RTL_CONSTASCII_USTRINGPARAM("tabstop") ),
                                _xAttributes );
@@ -1688,9 +1740,7 @@ void TitledBoxElement::endElement()
         ctx.importVerticalAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                                          OUString( RTL_CONSTASCII_USTRINGPARAM("valign") ),
                                          xAttributes );
-        ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                                  OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-                                  xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), _xAttributes );
         ctx.importImagePositionProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                                          OUString( RTL_CONSTASCII_USTRINGPARAM("image-position") ),
                                          xAttributes );
@@ -1832,9 +1882,7 @@ void RadioGroupElement::endElement()
         ctx.importVerticalAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                                          OUString( RTL_CONSTASCII_USTRINGPARAM("valign") ),
                                          xAttributes );
-        ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                                  OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-                                  xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), xAttributes );
         ctx.importImagePositionProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                                          OUString( RTL_CONSTASCII_USTRINGPARAM("image-position") ),
                                          xAttributes );
@@ -2216,9 +2264,7 @@ void CheckBoxElement::endElement()
     ctx.importVerticalAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                                      OUString( RTL_CONSTASCII_USTRINGPARAM("valign") ),
                                      _xAttributes );
-    ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                              OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-                              _xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), _xAttributes );
     ctx.importImagePositionProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                                      OUString( RTL_CONSTASCII_USTRINGPARAM("image-position") ),
                                      _xAttributes );
@@ -2319,9 +2365,7 @@ void ButtonElement::endElement()
     ctx.importButtonTypeProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("PushButtonType") ),
                                   OUString( RTL_CONSTASCII_USTRINGPARAM("button-type") ),
                                   _xAttributes );
-    ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                              OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-                              _xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), _xAttributes );
     ctx.importImagePositionProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                                      OUString( RTL_CONSTASCII_USTRINGPARAM("image-position") ),
                                      _xAttributes );
@@ -2489,6 +2533,14 @@ Reference< xml::input::XElement > BulletinBoardElement::startChildElement(
 	{
 		return new MultiPage( rLocalName, xAttributes, this, _pImport );
     }
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("frame") ))
+	{
+		return new Frame( rLocalName, xAttributes, this, _pImport );
+	}
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("page") ))
+	{
+		return new Page( rLocalName, xAttributes, this, _pImport );
+	}
     // bulletinboard
     else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("bulletinboard") ))
     {
@@ -2664,10 +2716,7 @@ void WindowElement::endElement()
         OUString( RTL_CONSTASCII_USTRINGPARAM("Decoration") ),
         OUString( RTL_CONSTASCII_USTRINGPARAM("withtitlebar") ),
         _xAttributes );
-    ctx.importStringProperty( 
-        OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-        OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-        _xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), _xAttributes );
     ctx.importEvents( _events );	
     // avoid ring-reference:
     // vector< event elements > holding event elements holding this (via _pParent)
diff --git xmlscript/source/xmldlg_imexp/xmldlg_import.cxx xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
index f895d66..bd6789e 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
@@ -60,10 +60,15 @@
 #include <com/sun/star/script/ScriptEventDescriptor.hpp>
 
 #include <com/sun/star/view/SelectionType.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+
+#include <com/sun/star/document/XGraphicObjectResolver.hpp>
 #include <com/sun/star/document/XStorageBasedDocument.hpp>
 #include <com/sun/star/script/DocumentScriptLibraryContainer.hpp>
 #include <com/sun/star/script/XVBACompat.hpp>
 
+#include <comphelper/componentcontext.hxx>
+
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
 using namespace ::com::sun::star::frame;
@@ -822,6 +827,7 @@ bool ImportContext::importDoubleProperty(
     }
     return false;
 }
+
 //__________________________________________________________________________________________________
 bool ImportContext::importBooleanProperty(
     OUString const & rPropName, OUString const & rAttrName,
@@ -973,6 +979,45 @@ bool ImportContext::importVerticalAlignProperty(
     return false;
 }
 //__________________________________________________________________________________________________
+bool ImportContext::importImageURLProperty(
+    OUString const & rPropName, OUString const & rAttrName,
+    Reference< xml::input::XAttributes > const & xAttributes )
+{
+    rtl::OUString sURL = xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, rAttrName );
+    if ( sURL.getLength() )
+    {
+        Reference< document::XStorageBasedDocument > xDocStorage( _pImport->getDocOwner(), UNO_QUERY );
+    
+        uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
+        if ( xDocStorage.is() )
+        {
+            uno::Sequence< Any > aArgs( 1 );
+            aArgs[ 0 ] <<= xDocStorage->getDocumentStorage();
+            ::comphelper::ComponentContext aContext( _pImport->getComponentContext() );
+            aContext.createComponentWithArguments( OUSTR( "com.sun.star.comp.Svx.GraphicImportHelper" ), aArgs, xGraphicResolver );
+            if ( xGraphicResolver.is() )
+            {
+                rtl::OUString aTmp( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.Package:" ) );
+                aTmp += sURL;
+                aTmp = xGraphicResolver->resolveGraphicObjectURL( aTmp );
+                if ( aTmp.getLength() )
+                    sURL = aTmp;
+    
+            }
+        }
+        if ( sURL.getLength() > 0 )
+        {
+            Reference< beans::XPropertySet > xProps( getControlModel(), UNO_QUERY );
+            if ( xProps.is() )
+            {
+                xProps->setPropertyValue( rPropName, makeAny( sURL ) );
+                return true;
+            }
+        }
+    }
+    return false;
+}
+//__________________________________________________________________________________________________
 bool ImportContext::importImageAlignProperty(
     OUString const & rPropName, OUString const & rAttrName,
     Reference< xml::input::XAttributes > const & xAttributes )
@@ -1925,7 +1970,11 @@ Reference< xml::sax::XDocumentHandler > SAL_CALL importDialogModel(
     Reference< XModel > const & xDocument )
     SAL_THROW( (Exception) )
 {
-    DialogImport* pImport = new DialogImport( xContext, xDialogModel, xDocument );
+    // single set of styles and stylenames apply to all containees
+    :: boost::shared_ptr< ::std::vector< ::rtl::OUString > > pStyleNames( new ::std::vector< ::rtl::OUString > );
+    :: boost::shared_ptr< ::std::vector< css::uno::Reference< css::xml::input::XElement > > > pStyles( new ::std::vector< css::uno::Reference< css::xml::input::XElement > > );  
+    DialogImport* pImport = new DialogImport( xContext, xDialogModel,pStyleNames, pStyles, xDocument ); 
+
     uno::Reference< script::XVBACompat > xVBAModeSource( pImport->getScriptLibraryContainer(), uno::UNO_QUERY );
     
     uno::Reference< beans::XPropertySet > xDlgProps( xDialogModel, uno::UNO_QUERY );
diff --git xmlscript/util/makefile.mk xmlscript/util/makefile.mk
index a0b300e..1e67680 100644
--- xmlscript/util/makefile.mk
+++ xmlscript/util/makefile.mk
@@ -58,8 +58,8 @@ SHL1LIBS= \
         $(LIB1TARGET)
 
 SHL1STDLIBS= \
-		$(COMPHELPERLIB)                \
         $(CPPUHELPERLIB)		\
+		$(COMPHELPERLIB)		\
         $(CPPULIB) 			\
         $(SALLIB)
 
