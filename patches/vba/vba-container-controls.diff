diff --git basctl/source/basicide/baside3.cxx basctl/source/basicide/baside3.cxx
index fbd83c8..8d6c3d8 100644
--- basctl/source/basicide/baside3.cxx
+++ basctl/source/basicide/baside3.cxx
@@ -82,7 +82,6 @@
 #include <com/sun/star/resource/XStringResourceResolver.hpp>
 #include <com/sun/star/resource/StringResourceWithLocation.hpp>
 #include <com/sun/star/task/XInteractionHandler.hpp>
-#include <com/sun/star/script/XVBACompat.hpp>
 
 using namespace comphelper;
 using namespace	::com::sun::star;
@@ -115,14 +114,6 @@ DialogWindow::DialogWindow( Window* pParent, const ScriptDocument& rDocument, St
 
 	pEditor = new DlgEditor( rDocument.isDocument() ? rDocument.getDocument() : Reference< frame::XModel >() );
     pEditor->SetWindow( this );
-	// set vba mode on DialogModel ( allows it to work in 100thmm instead of MAP_APPFONT )
-	if ( rDocument.isDocument() && rDocument.getDocument().is() )
-	{
-		uno::Reference< script::XVBACompat > xDocVBAMode( rDocument.getLibraryContainer( E_SCRIPTS ), uno::UNO_QUERY );
-		uno::Reference< script::XVBACompat > xDialogModelVBAMode( xDialogModel, uno::UNO_QUERY );
-		if ( xDocVBAMode.is()  &&  xDialogModelVBAMode.is() )
-			xDialogModelVBAMode->setVBACompatModeOn( xDocVBAMode->getVBACompatModeOn() );
-	}
     pEditor->SetDialog( xDialogModel );
 
     // Undo einrichten
diff --git basic/source/classes/sbxmod.cxx basic/source/classes/sbxmod.cxx
index df3838b..35d08bc 100644
--- basic/source/classes/sbxmod.cxx
+++ basic/source/classes/sbxmod.cxx
@@ -2399,8 +2399,15 @@ void SbUserFormModule::InitObject()
             aArgs[ 0 ] <<= m_xModel;
             rtl::OUString sDialogUrl( RTL_CONSTASCII_USTRINGPARAM("vnd.sun.star.script:" ) );
             rtl::OUString sProjectName( RTL_CONSTASCII_USTRINGPARAM("Standard") );
-            if ( this->GetParent()->GetName().Len() )
-                sProjectName = this->GetParent()->GetName(); 
+
+            try
+            {
+                Reference< beans::XPropertySet > xProps( m_xModel, UNO_QUERY_THROW );
+                uno::Reference< script::XVBACompat > xVBAMode( xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BasicLibraries") ) ), uno::UNO_QUERY_THROW );
+                sProjectName = xVBAMode->getProjectName();
+            }
+            catch( Exception& /*e*/) {}
+
             sDialogUrl = sDialogUrl.concat( sProjectName ).concat( rtl::OUString( '.') ).concat( GetName() ).concat( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("?location=document") ) ); 
 
             uno::Reference< awt::XDialogProvider > xProvider( xFactory->createInstanceWithArguments( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.DialogProvider")), aArgs  ), uno::UNO_QUERY_THROW );
diff --git basic/source/inc/namecont.hxx basic/source/inc/namecont.hxx
index 4cd5ce1..f0c3734 100644
--- basic/source/inc/namecont.hxx
+++ basic/source/inc/namecont.hxx
@@ -223,6 +223,7 @@ class SfxLibraryContainer   :public LibraryContainerHelper
                             ,public ::utl::OEventListenerAdapter
 {
     sal_Bool mbVBACompat;
+    rtl::OUString msProjectName;
 protected:
     ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >   mxMSF;
     ::com::sun::star::uno::Reference< ::com::sun::star::ucb::XSimpleFileAccess >       mxSFI;
@@ -503,6 +504,9 @@ public:
     // Methods XVBACompat
     virtual ::sal_Bool SAL_CALL getVBACompatModeOn() throw (::com::sun::star::uno::RuntimeException);
     virtual void SAL_CALL setVBACompatModeOn( ::sal_Bool _vbacompatmodeon ) throw (::com::sun::star::uno::RuntimeException);
+        virtual ::rtl::OUString SAL_CALL getProjectName() throw (::com::sun::star::uno::RuntimeException) { return msProjectName; }
+        virtual void SAL_CALL setProjectName( const ::rtl::OUString& _projectname ) throw (::com::sun::star::uno::RuntimeException);
+        
 };
 
 class LibraryContainerMethodGuard
diff --git basic/source/uno/dlgcont.cxx basic/source/uno/dlgcont.cxx
index 4985e35..b644f61 100644
--- basic/source/uno/dlgcont.cxx
+++ basic/source/uno/dlgcont.cxx
@@ -40,6 +40,7 @@
 #include <com/sun/star/xml/sax/XExtendedDocumentHandler.hpp>
 #include "com/sun/star/resource/XStringResourceWithStorage.hpp"
 #include "com/sun/star/resource/XStringResourceWithLocation.hpp"
+#include "com/sun/star/document/XGraphicObjectResolver.hpp"
 #include "dlgcont.hxx"
 #include "sbmodule.hxx"
 #include <comphelper/processfactory.hxx>
@@ -73,6 +74,8 @@ using namespace osl;
 
 using com::sun::star::uno::Reference;
 
+#define GRAPHOBJ_URLPREFIX "vnd.sun.star.GraphicObject:"
+
 //============================================================================
 // Implementation class SfxDialogLibraryContainer
 
@@ -223,6 +226,35 @@ void SAL_CALL SfxDialogLibraryContainer::writeLibraryElement
     xInput->closeInput();
 }
 
+void lcl_deepInspectForEmbeddedImages( const Reference< XInterface >& xIf,  std::vector< rtl::OUString >& rvEmbedImgUrls )
+{
+    static rtl::OUString sImageURL= OUString(RTL_CONSTASCII_USTRINGPARAM( "ImageURL" ) );
+    Reference< beans::XPropertySet > xProps( xIf, UNO_QUERY );
+    if ( xProps.is() )
+    {
+
+        if ( xProps->getPropertySetInfo()->hasPropertyByName( sImageURL ) )
+        {
+            rtl::OUString sURL;
+            xProps->getPropertyValue( sImageURL ) >>= sURL;
+            if ( sURL.getLength() && sURL.compareToAscii( GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( GRAPHOBJ_URLPREFIX ) ) == 0 )
+                rvEmbedImgUrls.push_back( sURL ); 
+        }
+    }
+    Reference< XNameContainer > xContainer( xIf, UNO_QUERY );
+    if ( xContainer.is() )
+    {
+        Sequence< rtl::OUString > sNames = xContainer->getElementNames();
+        sal_Int32 nContainees = sNames.getLength();
+        for ( sal_Int32 index = 0; index < nContainees; ++index )
+        {
+            Reference< XInterface > xCtrl;
+            xContainer->getByName( sNames[ index ] ) >>= xCtrl;
+            lcl_deepInspectForEmbeddedImages( xCtrl, rvEmbedImgUrls );
+        }
+    }
+}
+
 void SfxDialogLibraryContainer::storeLibrariesToStorage( const uno::Reference< embed::XStorage >& xStorage ) throw ( RuntimeException )
 {
     LibraryContainerMethodGuard aGuard( *this );
@@ -251,6 +283,54 @@ void SfxDialogLibraryContainer::storeLibrariesToStorage( const uno::Reference< e
 
     SfxLibraryContainer::storeLibrariesToStorage( xStorage );
 
+    // we need to export out any embedded image object(s)
+    // associated with any Dialogs. First, we need to actually gather any such urls 
+    // for each dialog in this container
+    Sequence< OUString > sLibraries = getElementNames();
+    for ( sal_Int32 i=0; i < sLibraries.getLength(); ++i )
+    {
+        // libraries will already be loaded from above
+        Reference< XNameContainer > xLib;
+        getByName( sLibraries[ i ] ) >>= xLib;
+        if ( xLib.is() )
+        {
+            Sequence< OUString > sDialogs = xLib->getElementNames();
+            sal_Int32 nDialogs( sDialogs.getLength() );
+            for ( sal_Int32 j=0; j < nDialogs; ++j )
+            { 
+                // Each Dialog has an associated xISP
+                Reference< io::XInputStreamProvider > xISP;
+                xLib->getByName( sDialogs[ j ] ) >>= xISP;
+                if ( xISP.is() )
+                {
+                    Reference< io::XInputStream > xInput( xISP->createInputStream() );
+                    Reference< XNameContainer > xDialogModel( mxMSF->createInstance
+                        ( OUString(RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.awt.UnoControlDialogModel" ) ) ), UNO_QUERY );
+                    Reference< XComponentContext > xContext;
+                    Reference< beans::XPropertySet > xProps( mxMSF, UNO_QUERY );
+                    OSL_ASSERT( xProps.is() );
+                    OSL_VERIFY( xProps->getPropertyValue( OUString(RTL_CONSTASCII_USTRINGPARAM("DefaultContext")) ) >>= xContext );
+                    ::xmlscript::importDialogModel( xInput, xDialogModel, xContext, mxOwnerDocument );
+                    std::vector< rtl::OUString > vEmbeddedImageURLs;
+                    lcl_deepInspectForEmbeddedImages( Reference< XInterface >( xDialogModel, UNO_QUERY ),  vEmbeddedImageURLs );
+                    if ( vEmbeddedImageURLs.size() )
+                    {
+                        // Export the images to the storage
+                        Sequence< Any > aArgs( 1 );
+                        aArgs[ 0 ] <<= xStorage;
+                        Reference< document::XGraphicObjectResolver > xGraphicResolver( mxMSF->createInstanceWithArguments(  OUString(RTL_CONSTASCII_USTRINGPARAM("com.sun.star.comp.Svx.GraphicExportHelper" ) ), aArgs ), UNO_QUERY );
+                        std::vector< rtl::OUString >::iterator it = vEmbeddedImageURLs.begin();
+                        std::vector< rtl::OUString >::iterator it_end = vEmbeddedImageURLs.end();
+                        if ( xGraphicResolver.is() )
+                        {
+                            for ( sal_Int32 count = 0; it != it_end; ++it, ++count )
+                                xGraphicResolver->resolveGraphicObjectURL( *it );
+                        }
+                    }
+                }
+            }
+        }
+    }
     mbOasis2OOoFormat = sal_False;
 }
 
diff --git basic/source/uno/namecont.cxx basic/source/uno/namecont.cxx
index 06f4ecf..0705fee 100644
--- basic/source/uno/namecont.cxx
+++ basic/source/uno/namecont.cxx
@@ -2807,6 +2807,18 @@ void SAL_CALL SfxLibraryContainer::setVBACompatModeOn( ::sal_Bool _vbacompatmode
         mbVBACompat = _vbacompatmodeon;
 }
 
+void SAL_CALL SfxLibraryContainer::setProjectName( const ::rtl::OUString& _projectname ) throw (RuntimeException) 
+{ 
+	msProjectName = _projectname;
+	BasicManager* pBasMgr = getBasicManager();
+	// Temporary HACK
+	// Some parts of the VBA handling ( e.g. in core basic )
+	// code expect the name of the VBA project to be set as the name of 
+	// the basic manager. Provide fail back here.
+	if( pBasMgr )
+		pBasMgr->SetName( msProjectName );	
+}
+
 // Methods XServiceInfo
 ::sal_Bool SAL_CALL SfxLibraryContainer::supportsService( const ::rtl::OUString& _rServiceName )
     throw (RuntimeException)
diff --git extensions/source/propctrlr/formcomponenthandler.cxx extensions/source/propctrlr/formcomponenthandler.cxx
index 97d72da..f813bc6 100644
--- extensions/source/propctrlr/formcomponenthandler.cxx
+++ extensions/source/propctrlr/formcomponenthandler.cxx
@@ -2783,8 +2783,9 @@ namespace pcr
 
         aFileDlg.SetTitle(aStrTrans);
         // non-linked images ( e.g. those located in the document
-        // stream ) cannot *currently* be handled by openoffice basic dialogs.
-        bool bHandleNonLink = ( m_eComponentClass == eFormControl );
+        // stream ) only if document is available
+        Reference< XModel > xModel( impl_getContextDocument_nothrow() );
+        bool bHandleNonLink = xModel.is();
 
         Reference< XFilePickerControlAccess > xController(aFileDlg.GetFilePicker(), UNO_QUERY);
         DBG_ASSERT(xController.is(), "FormComponentPropertyHandler::impl_browseForImage_nothrow: missing the controller interface on the file picker!");
diff --git filter/source/msfilter/msvbahelper.cxx filter/source/msfilter/msvbahelper.cxx
index ddd3528..ef8a242 100644
--- filter/source/msfilter/msvbahelper.cxx
+++ filter/source/msfilter/msvbahelper.cxx
@@ -36,6 +36,7 @@
 #include <com/sun/star/document/XDocumentPropertiesSupplier.hpp>
 #include <com/sun/star/document/XDocumentProperties.hpp>
 #include <com/sun/star/document/XDocumentInfoSupplier.hpp>
+#include <com/sun/star/script/XVBACompat.hpp>
 #include <tools/urlobj.hxx>
 #include <osl/file.hxx>
 #include <unotools/pathoptions.hxx>
@@ -269,15 +270,15 @@ VBAMacroResolvedInfo resolveVBAMacro( SfxObjectShell* pShell, const rtl::OUStrin
         {
             // Ok, if we have no Container specified then we need to search them in order, this document, template this document created from, global templates, 
             // get the name of Project/Library for 'this' document
-            rtl::OUString sThisProject;
-            BasicManager* pBasicMgr = pShell-> GetBasicManager();
-            if ( pBasicMgr )
+            rtl::OUString sThisProject = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Standard") );
+            try
             {
-                if ( pBasicMgr->GetName().Len() )
-                   sThisProject = pBasicMgr->GetName();
-                else // cater for the case where VBA is not enabled
-                   sThisProject = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Standard") );
+                uno::Reference< beans::XPropertySet > xProps( pShell->GetModel(), uno::UNO_QUERY_THROW );
+                uno::Reference< script::XVBACompat > xVBAMode( xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BasicLibraries") ) ), uno::UNO_QUERY_THROW );
+                sThisProject = xVBAMode->getProjectName();
             }
+            catch( uno::Exception& /*e*/) {}
+
             sSearchList.push_back( sThisProject ); // First Lib to search
             if ( xPrjNameCache.is() )
             {
diff --git offapi/com/sun/star/script/XVBACompat.idl offapi/com/sun/star/script/XVBACompat.idl
index e1b2d28..34ebb7e 100644
--- offapi/com/sun/star/script/XVBACompat.idl
+++ offapi/com/sun/star/script/XVBACompat.idl
@@ -43,6 +43,7 @@ interface XVBACompat: com::sun::star::uno::XInterface
 
 //============================================================================= 
     [attribute ] boolean VBACompatModeOn;
+    [attribute ] string  ProjectName;
  
 }; }; }; };  
 }; 
diff --git oox/inc/oox/helper/graphichelper.hxx oox/inc/oox/helper/graphichelper.hxx
index 07385f8..743c53e 100644
--- oox/inc/oox/helper/graphichelper.hxx
+++ oox/inc/oox/helper/graphichelper.hxx
@@ -34,6 +34,7 @@
 #include <com/sun/star/uno/Reference.hxx>
 #include "oox/helper/binarystreambase.hxx"
 #include "oox/helper/storagebase.hxx"
+#include "oox/dllapi.h"
 
 namespace com { namespace sun { namespace star {
     namespace awt { struct Point; }
@@ -63,7 +64,7 @@ namespace oox {
     resolves the graphic object from the passed URL and thus prevents it from
     being destroyed.
  */
-class GraphicHelper
+class OOX_DLLPUBLIC GraphicHelper
 {
 public:
     explicit            GraphicHelper(
diff --git oox/inc/oox/helper/propertyset.hxx oox/inc/oox/helper/propertyset.hxx
index e4cb5a1..d8d51ca 100644
--- oox/inc/oox/helper/propertyset.hxx
+++ oox/inc/oox/helper/propertyset.hxx
@@ -30,6 +30,7 @@
 
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/beans/XMultiPropertySet.hpp>
+#include <com/sun/star/frame/XModel.hpp>
 
 namespace oox {
 
@@ -162,6 +163,20 @@ inline void PropertySet::setProperty( sal_Int32 nPropId, const Type& rValue )
     setAnyProperty( nPropId, ::com::sun::star::uno::Any( rValue ) );
 }
 
+class FormPropertySet : public PropertySet
+{
+public:
+    inline explicit     FormPropertySet() : PropertySet() {}
+
+    /** Constructs a property set wrapper with the passed UNO property set. */
+    inline explicit     FormPropertySet(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& rxPropSet ) : PropertySet( rxPropSet ) {}
+
+    /** Constructs a property set wrapper after querying the XPropertySet interface. */
+    template< typename Type >
+    inline explicit     FormPropertySet( const Type& rObject ) : PropertySet( rObject ) {}
+    void setDataAwareProperties(  const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& rxDocModel, const PropertyMap& );
+};
 // ============================================================================
 
 } // namespace oox
diff --git oox/inc/oox/ole/vbacontrol.hxx oox/inc/oox/ole/vbacontrol.hxx
index 085a2f5..ddfabbf 100755
--- oox/inc/oox/ole/vbacontrol.hxx
+++ oox/inc/oox/ole/vbacontrol.hxx
@@ -56,17 +54,13 @@ public:
     void                importProperty( sal_Int32 nPropId, const ::rtl::OUString& rValue );
     /** Imports the site model data from the passed input stream. */
     bool                importBinaryModel( BinaryInputStream& rInStrm );
-    /** Moves the control relative to its current position by the passed distance. */
-    void                moveRelative( const AxPairData& rDistance );
 
     /** Returns the programmatical name of the control. */
     inline const ::rtl::OUString& getName() const { return maName; }
-    /** Returns the position of the control in its parent. */
-    inline const AxPairData& getPosition() const { return maPos; }
     /** Returns the unique identifier of this control. */
     inline sal_Int32    getId() const { return mnId; }
     /** Returns true, if the control is visible. */
     bool                isVisible() const;
     /** Returns true, if this control is a container control. */
     bool                isContainer() const;
     /** Returns the length of the stream data for stream based controls. */
@@ -81,12 +79,14 @@ public:
                             ApiControlType eCtrlType,
                             sal_Int32 nCtrlIndex ) const;
 
+    void                convertDataAwareProperties( PropertyMap& rPropMap );
+
 protected:
     ::rtl::OUString     maName;             /// Name of the control.
     ::rtl::OUString     maTag;              /// User defined tag.
     ::rtl::OUString     maToolTip;          /// Tool tip for the control.
-    ::rtl::OUString     maLinkedCell;       /// Linked cell for the control value in a spreadsheet.
-    ::rtl::OUString     maSourceRange;      /// Source data for the control in a spreadsheet.
+    ::rtl::OUString     maControlSource;    /// Linked cell for the control value in a spreadsheet.
+    ::rtl::OUString     maRowSource;        /// Source data for the control in a spreadsheet.
     AxPairData          maPos;              /// Position in parent container.
     sal_Int32           mnId;               /// Control identifier.
     sal_Int32           mnHelpContextId;    /// Help context identifier.
@@ -140,6 +143,7 @@ protected:
 
     /** Converts all control properties, and inserts and converts embedded controls. */
     bool                convertProperties(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& rxDocModel,
                             const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxCtrlModel,
                             const ControlConverter& rConv,
                             sal_Int32 nCtrlIndex ) const;
@@ -156,13 +160,7 @@ private:
     /** Imports the site models of all embedded controls from the 'f' stream. */
     bool                importEmbeddedSiteModels( BinaryInputStream& rInStrm );
     /*  Final processing of all embedded controls after import. */
-    void                finalizeEmbeddedControls();
-
-    /** Moves the control relative to its current position by the passed distance. */
-    void                moveRelative( const AxPairData& rDistance );
-    /** Moves all embedded controls from their relative position in this
-        control to an absolute position in the parent of this control. */
-    void                moveEmbeddedToAbsoluteParent();
+    void                finalizeEmbeddedControls( StorageBase& rStrg );
 
     /** Functor for comparing controls by their tab index. */
     static bool         compareByTabIndex( const VbaFormControlRef& rxLeft, const VbaFormControlRef& rxRight );
diff --git oox/inc/oox/ole/vbahelper.hxx oox/inc/oox/ole/vbahelper.hxx
index bc32c7a..8959a57 100755
--- oox/inc/oox/ole/vbahelper.hxx
+++ oox/inc/oox/ole/vbahelper.hxx
@@ -57,6 +57,7 @@ const sal_uInt16 VBA_ID_MODULESTREAMNAMEUNICODE = 0x0032;
 const sal_uInt16 VBA_ID_MODULETYPEDOCUMENT      = 0x0022;
 const sal_uInt16 VBA_ID_MODULETYPEPROCEDURAL    = 0x0021;
 const sal_uInt16 VBA_ID_PROJECTCODEPAGE         = 0x0003;
+const sal_uInt16 VBA_ID_PROJECTNAME             = 0x0004;
 const sal_uInt16 VBA_ID_PROJECTEND              = 0x0010;
 const sal_uInt16 VBA_ID_PROJECTMODULES          = 0x000F;
 const sal_uInt16 VBA_ID_PROJECTVERSION          = 0x0009;
diff --git oox/inc/oox/ole/vbaproject.hxx oox/inc/oox/ole/vbaproject.hxx
index e9c4bd3..6087942 100755
--- oox/inc/oox/ole/vbaproject.hxx
+++ oox/inc/oox/ole/vbaproject.hxx
@@ -278,7 +278,7 @@ private:
                         mxBasicLib;         /// The Basic library of the document used for import.
     ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameContainer >
                         mxDialogLib;        /// The dialog library of the document used for import.
-    const ::rtl::OUString maLibName;        /// Name for Basic and dialog library used for import.
+    ::rtl::OUString     maPrjName;        /// Name of VBA project being imported
 };
 
 // ============================================================================
diff --git oox/inc/oox/xls/excelfilter.hxx oox/inc/oox/xls/excelfilter.hxx
index 1409740..72ed636 100644
--- oox/inc/oox/xls/excelfilter.hxx
+++ oox/inc/oox/xls/excelfilter.hxx
@@ -30,6 +30,8 @@
 
 #include "oox/core/xmlfilterbase.hxx"
 #include "oox/core/binaryfilterbase.hxx"
+#include "oox/xls/excelvbaproject.hxx"
+#include "oox/ole/simplevbaprojectfilter.hxx"
 
 namespace oox {
 namespace xls {
@@ -92,6 +94,18 @@ private:
     virtual ::rtl::OUString implGetImplementationName() const;
 };
 
+class SimpleExcelVBAProjFilter : public ExcelBiffFilter
+{
+public:
+    explicit            SimpleExcelVBAProjFilter(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& rxGlobalFactory );
+    virtual bool        importDocument() throw();
+
+private:
+    virtual GraphicHelper* implCreateGraphicHelper() const;
+    virtual ::rtl::OUString implGetImplementationName() const;
+};
+
 // ============================================================================
 
 } // namespace xls
diff --git oox/prj/d.lst oox/prj/d.lst
index 482a270..82dc662 100644
--- oox/prj/d.lst
+++ oox/prj/d.lst
@@ -25,6 +25,7 @@ mkdir: %_DEST%\inc%_EXT%\oox\xls
 ..\inc\oox\helper\binarystreambase.hxx %_DEST%\inc%_EXT%\oox\helper\binarystreambase.hxx
 ..\inc\oox\helper\helper.hxx %_DEST%\inc%_EXT%\oox\helper\helper.hxx
 ..\inc\oox\helper\containerhelper.hxx %_DEST%\inc%_EXT%\oox\helper\containerhelper.hxx
+..\inc\oox\helper\graphichelper.hxx %_DEST%\inc%_EXT%\oox\helper\graphichelper.hxx
 ..\inc\oox\helper\storagebase.hxx %_DEST%\inc%_EXT%\oox\helper\storagebase.hxx
 ..\inc\oox\helper\zipstorage.hxx %_DEST%\inc%_EXT%\oox\helper\zipstorage.hxx
 ..\inc\oox\core\filterbase.hxx %_DEST%\inc%_EXT%\oox\core\filterbase.hxx
diff --git oox/source/core/facreg.cxx oox/source/core/facreg.cxx
index 50a2a54..7be7c3c 100644
--- oox/source/core/facreg.cxx
+++ oox/source/core/facreg.cxx
@@ -60,6 +60,8 @@ namespace oox {
     namespace xls { SERVICE( BiffDetector ); }
     namespace xls { SERVICE( ExcelFilter ); }
     namespace xls { SERVICE( ExcelBiffFilter ); }
+    namespace xls { SERVICE( SimpleExcelVBAProjFilter ); }
+    namespace ole { SERVICE( SimpleWordVBAProjFilter ); }
     namespace shape { SERVICE( ShapeContextHandler ); }
     namespace shape { SERVICE( FastTokenHandlerService ); }
     namespace docprop { SERVICE2( OOXMLDocPropImportImpl ); }
@@ -103,6 +105,8 @@ OOX_DLLPUBLIC sal_Bool SAL_CALL component_writeInfo( void * , void * pRegistryKe
             WRITEINFO( ::oox::xls::BiffDetector );
             WRITEINFO( ::oox::xls::ExcelFilter );
             WRITEINFO( ::oox::xls::ExcelBiffFilter );
+            WRITEINFO( ::oox::xls::SimpleExcelVBAProjFilter );
+            WRITEINFO( ::oox::ole::SimpleWordVBAProjFilter );
             WRITEINFO( ::oox::shape::ShapeContextHandler );
             WRITEINFO( ::oox::shape::FastTokenHandlerService );
             WRITEINFO( ::oox::docprop::OOXMLDocPropImportImpl );
@@ -151,6 +155,8 @@ OOX_DLLPUBLIC void * SAL_CALL component_getFactory( const sal_Char * pImplName,
         else SINGLEFACTORY( ::oox::xls::BiffDetector )
         else SINGLEFACTORY( ::oox::xls::ExcelFilter )
         else SINGLEFACTORY( ::oox::xls::ExcelBiffFilter )
+        else SINGLEFACTORY( ::oox::xls::SimpleExcelVBAProjFilter )
+        else SINGLEFACTORY( ::oox::ole::SimpleWordVBAProjFilter )
         else SINGLEFACTORY( ::oox::shape::ShapeContextHandler)
         else SINGLEFACTORY( ::oox::shape::FastTokenHandlerService)
         else SINGLEFACTORY2( ::oox::docprop::OOXMLDocPropImportImpl )
diff --git oox/source/helper/propertyset.cxx oox/source/helper/propertyset.cxx
index b43ea12..1f1403e 100644
--- oox/source/helper/propertyset.cxx
+++ oox/source/helper/propertyset.cxx
@@ -30,6 +30,21 @@
 #include <osl/diagnose.h>
 #include "oox/helper/propertymap.hxx"
 
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#include <com/sun/star/beans/NamedValue.hpp>
+#include <com/sun/star/form/binding/XBindableValue.hpp>
+#include <com/sun/star/form/binding/XListEntrySink.hpp>
+#include <com/sun/star/form/binding/XListEntrySource.hpp>
+#include <com/sun/star/form/binding/XValueBinding.hpp>
+#include <com/sun/star/table/CellRangeAddress.hpp>
+#include <com/sun/star/table/CellAddress.hpp>
+#include <com/sun/star/sheet/XCellRangeReferrer.hpp>
+#include <com/sun/star/sheet/XCellRangeAddressable.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <oox/helper/helper.hxx>
+
+#include "properties.hxx"
+
 using ::rtl::OUString;
 using ::rtl::OStringBuffer;
 using ::rtl::OUStringToOString;
@@ -37,8 +52,22 @@ using ::com::sun::star::uno::Any;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::Sequence;
 using ::com::sun::star::uno::Exception;
+using ::com::sun::star::uno::makeAny;
 using ::com::sun::star::uno::UNO_QUERY;
+using ::com::sun::star::uno::UNO_QUERY_THROW;
+using ::com::sun::star::lang::XMultiServiceFactory;
 using ::com::sun::star::beans::XPropertySet;
+using ::com::sun::star::beans::NamedValue;
+using ::com::sun::star::frame::XModel;
+using ::com::sun::star::container::XNameAccess;
+using ::com::sun::star::form::binding::XBindableValue;
+using ::com::sun::star::form::binding::XListEntrySink;
+using ::com::sun::star::form::binding::XListEntrySource;
+using ::com::sun::star::form::binding::XValueBinding;
+using ::com::sun::star::table::CellRangeAddress;
+using ::com::sun::star::table::CellAddress;
+using ::com::sun::star::sheet::XCellRangeReferrer;
+using ::com::sun::star::sheet::XCellRangeAddressable;
 
 namespace oox {
 
@@ -178,6 +207,109 @@ void PropertySet::dump()
     PropertyMap::dump( Reference< XPropertySet >( getXPropertySet(), UNO_QUERY ) );
 }
 #endif
+bool lcl_isNamedRange( const rtl::OUString& sAddress, const Reference< XModel >& xModel, CellRangeAddress& aAddress )
+{
+    bool bRes = false;
+    const static OUString sNamedRanges( RTL_CONSTASCII_USTRINGPARAM("NamedRanges"));
+    Reference< XCellRangeReferrer > xReferrer;
+    try
+    {
+        Reference< XPropertySet > xPropSet( xModel, UNO_QUERY_THROW );
+        Reference< XNameAccess > xNamed( xPropSet->getPropertyValue( sNamedRanges ), UNO_QUERY_THROW );
+        xReferrer.set ( xNamed->getByName( sAddress ), UNO_QUERY );
+    }
+    catch( Exception& /*e*/ )
+    {
+        // do nothing
+    }
+    if ( xReferrer.is() )
+    {
+        Reference< XCellRangeAddressable > xRangeAddressable( xReferrer->getReferredCells(), UNO_QUERY );
+        if ( xRangeAddressable.is() )
+        {
+            aAddress = xRangeAddressable->getRangeAddress();
+            bRes = true;
+        }
+    }
+    return bRes;
+}
+
+void lcl_ApplyListSourceAndBindableStuff( const Reference< XModel >& xModel, const Reference< XPropertySet >& rPropSet, const OUString& rsCtrlSource, const OUString& rsRowSource )
+{
+// XBindable etc.
+    Reference< XMultiServiceFactory > xFac;
+    if ( xModel.is() )
+        xFac.set( xModel, UNO_QUERY );
+    Reference< XBindableValue > xBindable( rPropSet, UNO_QUERY );
+    if (  xFac.is() && rsCtrlSource.getLength() && xBindable.is() )
+    {
+         
+         // OOo address structures
+         // RefCell - convert from XL
+         // pretend we converted the imported string address into the
+         // appropriate address structure
+         Reference< XPropertySet > xConvertor( xFac->createInstance( CREATE_OUSTRING( "com.sun.star.table.CellAddressConversion" )), UNO_QUERY );
+         CellAddress aAddress;
+         if ( xConvertor.is() )
+         {
+             // we need this service to properly convert XL notation also
+             // Should be easy to extend
+             xConvertor->setPropertyValue( CREATE_OUSTRING( "XL_A1_Representation" ), makeAny( rsCtrlSource ) );
+             xConvertor->getPropertyValue( CREATE_OUSTRING( "Address" ) ) >>= aAddress;    
+         }
+        
+         NamedValue aArg1;
+         aArg1.Name = CREATE_OUSTRING("BoundCell");
+         aArg1.Value <<= aAddress;
+
+         Sequence< Any > aArgs(1);
+         aArgs[ 0 ]  <<= aArg1;
+
+         Reference< XValueBinding > xBinding( xFac->createInstanceWithArguments( CREATE_OUSTRING("com.sun.star.table.CellValueBinding" ), aArgs ), UNO_QUERY );
+         xBindable->setValueBinding( xBinding );
+    }
+    Reference< XListEntrySink > xListEntrySink( rPropSet, UNO_QUERY );
+    if (  xFac.is() && rsRowSource.getLength() && xListEntrySink.is() )
+    {
+         
+         // OOo address structures
+         // RefCell - convert from XL
+         // pretend we converted the imported string address into the
+         // appropriate address structure
+         Reference< XPropertySet > xConvertor( xFac->createInstance( CREATE_OUSTRING( "com.sun.star.table.CellRangeAddressConversion" )), UNO_QUERY );
+         CellRangeAddress aAddress;
+         if ( xConvertor.is() )
+         {
+             if ( !lcl_isNamedRange( rsRowSource, xModel, aAddress ) )
+             {
+                 // we need this service to properly convert XL notation also
+                 // Should be easy to extend
+                 xConvertor->setPropertyValue( CREATE_OUSTRING( "XL_A1_Representation" ), makeAny( rsRowSource ) );
+                 xConvertor->getPropertyValue( CREATE_OUSTRING( "Address" ) ) >>= aAddress;
+             }
+         }
+        
+         NamedValue aArg1;
+         aArg1.Name = CREATE_OUSTRING("CellRange");
+         aArg1.Value <<= aAddress;
+
+         Sequence< Any > aArgs(1);
+         aArgs[ 0 ]  <<= aArg1;
+
+         Reference< XListEntrySource > xSource( xFac->createInstanceWithArguments( CREATE_OUSTRING("com.sun.star.table.CellRangeListSource" ), aArgs ), UNO_QUERY );
+         xListEntrySink->setListEntrySource( xSource );
+    }
+}
+void FormPropertySet::setDataAwareProperties( const Reference< XModel >& rxDocModel, const PropertyMap& rMap )
+{
+    OUString sRowSource;
+    OUString sControlSource;
+    if ( rMap.hasProperty( PROP_ControlSource ) )
+        *(rMap.getProperty( PROP_ControlSource )) >>= sControlSource;
+    if ( rMap.hasProperty( PROP_RowSource ) )
+        *(rMap.getProperty( PROP_RowSource )) >>= sRowSource;
+    lcl_ApplyListSourceAndBindableStuff( rxDocModel, getXPropertySet(), sControlSource, sRowSource );
+}
 
 // ============================================================================
 
diff --git oox/source/ole/axcontrol.cxx oox/source/ole/axcontrol.cxx
index 7f75218..b5d86e3 100644
--- oox/source/ole/axcontrol.cxx
+++ oox/source/ole/axcontrol.cxx
@@ -426,14 +431,16 @@ OUString ControlModelBase::getServiceName() const
         case API_CONTROL_FIXEDTEXT:     return CREATE_OUSTRING( "com.sun.star.awt.UnoControlFixedTextModel" );
         case API_CONTROL_IMAGE:         return CREATE_OUSTRING( "com.sun.star.awt.UnoControlImageControlModel" );
         case API_CONTROL_CHECKBOX:      return CREATE_OUSTRING( "com.sun.star.awt.UnoControlCheckBoxModel" );
-        case API_CONTROL_RADIOBUTTON:   return CREATE_OUSTRING( "com.sun.star.awt.UnoControlRadioButtonModel" );
+        case API_CONTROL_RADIOBUTTON:   return CREATE_OUSTRING( "com.sun.star.form.component.RadioButton" );
         case API_CONTROL_EDIT:          return CREATE_OUSTRING( "com.sun.star.awt.UnoControlEditModel" );
-        case API_CONTROL_LISTBOX:       return CREATE_OUSTRING( "com.sun.star.awt.UnoControlListBoxModel" );
-        case API_CONTROL_COMBOBOX:      return CREATE_OUSTRING( "com.sun.star.awt.UnoControlComboBoxModel" );
-        case API_CONTROL_SPINBUTTON:    return CREATE_OUSTRING( "com.sun.star.awt.UnoControlSpinButtonModel" );
-        case API_CONTROL_SCROLLBAR:     return CREATE_OUSTRING( "com.sun.star.awt.UnoControlScrollBarModel" );
+        case API_CONTROL_LISTBOX:       return CREATE_OUSTRING( "com.sun.star.form.component.ListBox" );
+        case API_CONTROL_COMBOBOX:      return CREATE_OUSTRING( "com.sun.star.form.component.ComboBox" );
+        case API_CONTROL_SPINBUTTON:    return CREATE_OUSTRING( "com.sun.star.form.component.SpinButton" );
+        case API_CONTROL_SCROLLBAR:     return CREATE_OUSTRING( "com.sun.star.form.component.ScrollBar" );
         case API_CONTROL_PROGRESSBAR:   return CREATE_OUSTRING( "com.sun.star.awt.UnoControlProgressBarModel" );
-        case API_CONTROL_GROUPBOX:      return CREATE_OUSTRING( "com.sun.star.awt.UnoControlGroupBoxModel" );
+        case API_CONTROL_FRAME:         return CREATE_OUSTRING( "com.sun.star.awt.UnoFrameModel" );
+        case API_CONTROL_PAGE:          return CREATE_OUSTRING( "com.sun.star.awt.UnoPageModel" );
+        case API_CONTROL_MULTIPAGE:     return CREATE_OUSTRING( "com.sun.star.awt.UnoMultiPageModel" );
         case API_CONTROL_DIALOG:        return CREATE_OUSTRING( "com.sun.star.awt.UnoControlDialogModel" );
         default:    OSL_ENSURE( false, "ControlModelBase::getServiceName - no AWT model service supported" );
     }
@@ -1362,7 +1369,8 @@ void AxTabStripModel::convertProperties( PropertyMap& rPropMap, const ControlConverter& rConv ) const
 void AxTabStripModel::convertProperties( PropertyMap& rPropMap, const ControlConverter& rConv ) const
 {
     rPropMap.setProperty( PROP_Decoration, mnTabStyle != AX_TABSTRIP_NONE );
-    rPropMap.setProperty( PROP_MultiPageValue, mnSelectedTab );
+    // adjust for openoffice
+    rPropMap.setProperty( PROP_MultiPageValue, mnSelectedTab + 1 );
     rConv.convertColor( rPropMap, PROP_BackgroundColor, mnBackColor );
     AxFontDataModel::convertProperties( rPropMap, rConv );
 }
@@ -1457,14 +1536,14 @@ bool AxContainerModelBase::importClassTable( BinaryInputStream& rInStrm, AxClass
 
 // ============================================================================
 
 AxFrameModel::AxFrameModel() :
     AxContainerModelBase( true )
 {
 }
 
 ApiControlType AxFrameModel::getControlType() const
 {
-    return API_CONTROL_GROUPBOX;
+    return mbAwtModel ? API_CONTROL_FRAME : API_CONTROL_GROUPBOX;
 }
 
 void AxFrameModel::convertProperties( PropertyMap& rPropMap, const ControlConverter& rConv ) const
diff --git oox/source/ole/makefile.mk oox/source/ole/makefile.mk
index 4e01392..e94ab3e 100644
--- oox/source/ole/makefile.mk
+++ oox/source/ole/makefile.mk
@@ -51,7 +51,8 @@ SLOFILES =	\
         $(SLO)$/vbahelper.obj           \
         $(SLO)$/vbainputstream.obj      \
         $(SLO)$/vbamodule.obj           \
-        $(SLO)$/vbaproject.obj
+		$(SLO)$/vbaproject.obj          \
+		$(SLO)$/simplevbaprojectfilter.obj \
 
 # --- Targets -------------------------------------------------------
 
diff --git oox/source/ole/vbacontrol.cxx oox/source/ole/vbacontrol.cxx
index 17cacce..a10485c 100755
--- oox/source/ole/vbacontrol.cxx
+++ oox/source/ole/vbacontrol.cxx
@@ -49,6 +49,7 @@ using ::rtl::OUString;
 using ::rtl::OUStringBuffer;
 using ::com::sun::star::awt::XControlModel;
 using ::com::sun::star::container::XNameContainer;
+using ::com::sun::star::frame::XModel;
 using ::com::sun::star::io::XInputStreamProvider;
 using ::com::sun::star::lang::XMultiServiceFactory;
 using ::com::sun::star::uno::Any;
@@ -221,15 +222,14 @@ bool VbaSiteModel::importBinaryModel( BinaryInputStream& rInStrm )
     aReader.skipUndefinedProperty();
     aReader.readStringProperty( maToolTip );
     aReader.skipStringProperty();   // license key
-    aReader.readStringProperty( maLinkedCell );
-    aReader.readStringProperty( maSourceRange );
+    aReader.readStringProperty( maControlSource );
+    aReader.readStringProperty( maRowSource );
     return aReader.finalizeImport();
 }
 
-void VbaSiteModel::moveRelative( const AxPairData& rDistance )
+bool VbaSiteModel::isVisible() const
 {
-    maPos.first += rDistance.first;
-    maPos.second += rDistance.second;
+    return getFlag( mnFlags, VBA_SITE_VISIBLE );
 }
 
 bool VbaSiteModel::isVisible() const
@@ -274,12 +274,12 @@ ControlModelRef VbaSiteModel::createControlModel( const AxClassTable& rClassTabl
             case VBA_SITE_TEXTBOX:          xCtrlModel.reset( new AxTextBoxModel );         break;
             case VBA_SITE_LISTBOX:          xCtrlModel.reset( new AxListBoxModel );         break;
             case VBA_SITE_COMBOBOX:         xCtrlModel.reset( new AxComboBoxModel );        break;
-            case VBA_SITE_SPINBUTTON:       /*xCtrlModel.reset( new AxSpinButtonModel );*/  break;  // not supported (?)
+            case VBA_SITE_SPINBUTTON:       xCtrlModel.reset( new AxSpinButtonModel );  break;
             case VBA_SITE_SCROLLBAR:        xCtrlModel.reset( new AxScrollBarModel );       break;
-            case VBA_SITE_TABSTRIP:                                                         break;  // not supported
+            case VBA_SITE_TABSTRIP:         xCtrlModel.reset( new AxTabStripModel );        break;
             case VBA_SITE_FRAME:            xCtrlModel.reset( new AxFrameModel );           break;
-            case VBA_SITE_MULTIPAGE:                                                        break;  // not supported
-            case VBA_SITE_FORM:                                                             break;  // not supported
+            case VBA_SITE_MULTIPAGE:        xCtrlModel.reset( new AxMultiPageModel );       break; 
+            case VBA_SITE_FORM:             xCtrlModel.reset( new AxFormPageModel );        break;
             default:    OSL_ENSURE( false, "VbaSiteModel::createControlModel - unknown type index" );
         }
     }
@@ -313,6 +313,12 @@ ControlModelRef VbaSiteModel::createControlModel( const AxClassTable& rClassTabl
     return xCtrlModel;
 }
 
+void VbaSiteModel::convertDataAwareProperties( PropertyMap& rPropMap )
+{
+    rPropMap.setProperty( PROP_ControlSource, maControlSource );
+    rPropMap.setProperty( PROP_RowSource, maRowSource );
+}
+
 void VbaSiteModel::convertProperties( PropertyMap& rPropMap,
         const ControlConverter& rConv, ApiControlType eCtrlType, sal_Int32 nCtrlIndex ) const
 {
@@ -368,12 +374,13 @@ OUString VbaFormControl::getControlName() const
     return mxSiteModel.get() ? mxSiteModel->getName() : OUString();
 }
 
 sal_Int32 VbaFormControl::getControlId() const
 {
     return mxSiteModel.get() ? mxSiteModel->getId() : -1;
 }
 
 void VbaFormControl::createAndConvert( sal_Int32 nCtrlIndex,
+         const Reference< XModel >& rxDocModel,
         const Reference< XNameContainer >& rxParentNC, const ControlConverter& rConv ) const
 {
     if( rxParentNC.is() && mxSiteModel.get() && mxCtrlModel.get() ) try
@@ -379,7 +391,7 @@ void VbaFormControl::createAndConvert( sal_Int32 nCtrlIndex,
         Reference< XControlModel > xCtrlModel( xModelFactory->createInstance( aServiceName ), UNO_QUERY_THROW );
 
         // convert all properties and embedded controls
-        if( convertProperties( xCtrlModel, rConv, nCtrlIndex ) )
+        if( convertProperties( rxDocModel, xCtrlModel, rConv, nCtrlIndex ) )
         {
             // insert into parent container
             const OUString& rCtrlName = mxSiteModel->getName();
@@ -434,16 +446,14 @@ void VbaFormControl::importStorage( StorageBase& rStrg, const AxClassTable& rCla
             maControls.forEachMem( &VbaFormControl::importModelOrStorage,
                 ::boost::ref( aOStrm ), ::boost::ref( rStrg ), ::boost::cref( maClassTable ) );
                 
-            /*  Reorder the controls (sorts all option buttons of an option
-                group together), and move all children of all embedded frames
-                (group boxes) to this control (UNO group boxes cannot contain
-                other controls). */
-            finalizeEmbeddedControls();
+            /** Final processing on the control and all embedded controls,
+                depending on the type of this control. */
+            finalizeEmbeddedControls( rStrg );
         }
     }
 }
 
-bool VbaFormControl::convertProperties( const Reference< XControlModel >& rxCtrlModel,
+bool VbaFormControl::convertProperties( const Reference< XModel >& rxDocModel, const Reference< XControlModel >& rxCtrlModel,
         const ControlConverter& rConv, sal_Int32 nCtrlIndex ) const
 {
     if( rxCtrlModel.is() && mxSiteModel.get() && mxCtrlModel.get() )
@@ -455,10 +465,13 @@ bool VbaFormControl::convertProperties( const Reference< XControlModel >& rxCtrl
             // convert all properties
             PropertyMap aPropMap;
             mxSiteModel->convertProperties( aPropMap, rConv, mxCtrlModel->getControlType(), nCtrlIndex );
+            PropertyMap aDataPropMap;
+            mxSiteModel->convertDataAwareProperties( aDataPropMap );
             mxCtrlModel->convertProperties( aPropMap, rConv );
             mxCtrlModel->convertSize( aPropMap, rConv );
-            PropertySet aPropSet( rxCtrlModel );
+            FormPropertySet aPropSet( rxCtrlModel );
             aPropSet.setProperties( aPropMap );
+            aPropSet.setDataAwareProperties( rxDocModel, aDataPropMap );
 
             // create and convert all embedded controls
             if( !maControls.empty() ) try
@@ -467,7 +480,7 @@ bool VbaFormControl::convertProperties( const Reference< XControlModel >& rxCtrl
                 /*  Call conversion for all controls. Pass vector index as new
                     tab order to make option button groups work correctly. */
                 maControls.forEachMemWithIndex( &VbaFormControl::createAndConvert,
-                    ::boost::cref( xCtrlModelNC ), ::boost::cref( rConv ) );
+                    ::boost::cref( rxDocModel ), ::boost::cref( xCtrlModelNC ), ::boost::cref( rConv ) );
             }
             catch( Exception& )
             {
@@ -542,30 +555,110 @@ bool VbaFormControl::importEmbeddedSiteModels( BinaryInputStream& rInStrm )
     return bValid;
 }
 
-void VbaFormControl::finalizeEmbeddedControls()
+void VbaFormControl::finalizeEmbeddedControls( StorageBase& rStrg )
 {
-    /*  This function performs two tasks:
+    /*  Store all embedded controls in a temporary vector, so "exit on error"
+        will leave this control empty. */
+    VbaFormControlVector aControls;
+    aControls.swap( maControls );
 
-        1)  Reorder the controls appropriately (sort all option buttons of an
-            option group together to make grouping work).
-        2)  Move all children of all embedded frames (group boxes) to this
-            control (UNO group boxes cannot contain other controls).
-     */
+    /*  If this is a multipage control, it stores additional data in the 'x'
+        stream of its storage. It contains the control identifiers of the form
+        page controls that contain the embedded controls of each page.
+        Additionally, the order of these pages is stored there (they are not
+        nessecarily in the order they are persisted in). */
+    if( AxMultiPageModel* pMultiPageModel = dynamic_cast< AxMultiPageModel* >( mxCtrlModel.get() ) )
+    {
+        // read additional attributes from the 'x' stream
+        BinaryXInputStream aXStrm( rStrg.openInputStream( CREATE_OUSTRING( "x" ) ), true );
+        OSL_ENSURE( !aXStrm.isEof(), "VbaFormControl::finalizeEmbeddedControls - missing 'x' stream" );
+        if( aXStrm.isEof() ) return;
+        
+        // skip the page property structures related to all controls
+        for( size_t nSiteIdx = 0, nSiteCount = aControls.size(); nSiteIdx < nSiteCount; ++nSiteIdx )
+        {
+            AxBinaryPropertyReader aReader( aXStrm );
+            aReader.skipUndefinedProperty();
+            aReader.skipIntProperty< sal_uInt32 >(); // transition effect
+            aReader.skipIntProperty< sal_uInt32 >(); // transition period
+            if( !aReader.finalizeImport() ) return;
+        }
+
+        // read the multipage property structure containing a list of page IDs
+        sal_Int32 nPageCount = 0;
+        sal_Int32 nTabStripId = 0;
+        AxBinaryPropertyReader aReader( aXStrm );
+        aReader.skipUndefinedProperty();
+        aReader.readIntProperty< sal_Int32 >( nPageCount );
+        aReader.readIntProperty< sal_Int32 >( nTabStripId );
+        if( !aReader.finalizeImport() ) return;
+        // read the array containing all page identifiers in current order
+        typedef ::std::vector< sal_Int32 > AxPageIdVector;
+        AxPageIdVector aPageIds;
+        for( sal_Int32 nPage = 0; !aXStrm.isEof() && (nPage < nPageCount); ++nPage )
+            aPageIds.push_back( aXStrm.readInt32() );
+        if( aXStrm.isEof() ) return;
+
+        // check the page count value
+        bool bValidPageCount = (0 < nPageCount) && (static_cast< size_t >( nPageCount + 1 ) == aControls.size());
+        OSL_ENSURE( bValidPageCount, "VbaFormControl::finalizeEmbeddedControls - invalid number of pages" );
+        if( !bValidPageCount ) return;
+
+        /*  Check that this multipage contains the expected controls:
+            - a tabstrip control, specified by nTabStripId,
+            - form page controls (containing the embedded controls of each page). */
+
+        // the controls may be in arbitrary order, first map them by ID
+        RefMap< sal_Int32, VbaFormControl > aControlsById;
+        for( VbaFormControlVector::iterator aIt = aControls.begin(), aEnd = aControls.end(); aIt != aEnd; ++aIt )
+        {
+            VbaFormControlRef xControl = *aIt;
+            sal_Int32 nId = xControl->getControlId();
+            OSL_ENSURE( (nId > 0) && !aControlsById.has( nId ), "VbaFormControl::finalizeEmbeddedControls - invalid control ID" );
+            aControlsById[ nId ] = xControl;
+        }
+        // store tabstrip in the multipage, it will care about property conversion
+        AxTabStripModelRef xTabStripModel;
+        VbaFormControlRef xControl = aControlsById.get( nTabStripId );
+        if( xControl.get() )
+            xTabStripModel = ::boost::dynamic_pointer_cast< AxTabStripModel >( xControl->mxCtrlModel );
+        OSL_ENSURE( xTabStripModel.get(), "VbaFormControl::finalizeEmbeddedControls - missing tabstrip control" );
+        if( !xTabStripModel ) return;
+        pMultiPageModel->setTabStripModel( xTabStripModel );
+        aControlsById.erase( nTabStripId );
+        // store all pages in maControls in the correct order specified by aPageIds
+        sal_Int32 nTabIndex = 0;
+        for( AxPageIdVector::iterator aIt = aPageIds.begin(), aEnd = aPageIds.end(); aIt != aEnd; ++aIt, ++nTabIndex )
+        {
+            VbaFormControlRef xControl = aControlsById.get( *aIt );
+            AxFormPageModel* pFormPageModel = xControl.get() ? dynamic_cast< AxFormPageModel* >( xControl->mxCtrlModel.get() ) : 0;
+            OSL_ENSURE( pFormPageModel, "VbaFormControl::finalizeEmbeddedControls - missing formpage control" );
+            // do not exit on error but try to collect as much pages as possible
+            if( pFormPageModel )
+            {
+                // get the tab caption from tabstrip control and set it at the formpage
+                OUString aCaption = xTabStripModel->getCaption( nTabIndex );
+                pFormPageModel->importProperty( XML_Caption, aCaption );
+                // store the control in maControls
+                maControls.push_back( xControl );
+                aControlsById.erase( *aIt );
+            }
+        }
+    }
+    else
+    {
+        /*  Reorder the controls appropriately (sort all option buttons of an
+            option group together to make grouping work), and erase all plain
+            tabstrip controls (currently not supported in UNO dialogs). */
                 
     // first, sort all controls by original tab index
-    ::std::sort( maControls.begin(), maControls.end(), &compareByTabIndex );
+        ::std::sort( aControls.begin(), aControls.end(), &compareByTabIndex );
 
     /*  Collect the programmatical names of all embedded controls (needed to be
-        able to set unused names to new dummy controls created below). Also
-        collect the names of all children of embedded frames (group boxes).
-        Luckily, names of controls must be unique in the entire form, not just
-        in the current container. */
+            able to set unused names to new dummy controls created below). */
     VbaControlNamesSet aControlNames;
     VbaControlNameInserter aInserter( aControlNames );
-    maControls.forEach( aInserter );
-    for( VbaFormControlVector::iterator aIt = maControls.begin(), aEnd = maControls.end(); aIt != aEnd; ++aIt )
-        if( (*aIt)->mxCtrlModel.get() && ((*aIt)->mxCtrlModel->getControlType() == API_CONTROL_GROUPBOX) )
-            (*aIt)->maControls.forEach( aInserter );
+        aControls.forEach( aInserter );
 
     /*  Reprocess the sorted list and collect all option button controls that
         are part of the same option group (determined by group name). All
@@ -582,11 +675,12 @@ void VbaFormControl::finalizeEmbeddedControls()
 
     typedef VbaFormControlVectorMap::mapped_type VbaFormControlVectorRef;
     bool bLastWasOptionButton = false;
-    for( VbaFormControlVector::iterator aIt = maControls.begin(), aEnd = maControls.end(); aIt != aEnd; ++aIt )
+        for( VbaFormControlVector::iterator aIt = aControls.begin(), aEnd = aControls.end(); aIt != aEnd; ++aIt )
     {
         VbaFormControlRef xControl = *aIt;
         const ControlModelBase* pCtrlModel = xControl->mxCtrlModel.get();
-
+            if ( !pCtrlModel ) // skip unsupported controls
+                continue;
         if( const AxOptionButtonModel* pOptButtonModel = dynamic_cast< const AxOptionButtonModel* >( pCtrlModel ) )
         {
             // check if a new option group needs to be created
@@ -616,6 +710,10 @@ void VbaFormControl::finalizeEmbeddedControls()
         }
         else
         {
+                // skip unsupported controls (tabstrips and page controls)
+                ApiControlType eCtrlType = pCtrlModel->getControlType();
+                if( (eCtrlType != API_CONTROL_TABSTRIP) && (eCtrlType != API_CONTROL_PAGE) )
+                {
             // open a new control group, if the last group is an option group
             if( bLastWasOptionButton || aControlGroups.empty() )
             {
@@ -626,55 +724,14 @@ void VbaFormControl::finalizeEmbeddedControls()
             VbaFormControlVector& rLastGroup = *aControlGroups.back();
             rLastGroup.push_back( xControl );
             bLastWasOptionButton = false;
-
-            // if control is a group box, move all its children to this control
-            if( pCtrlModel && (pCtrlModel->getControlType() == API_CONTROL_GROUPBOX) )
-            {
-                /*  Move all embedded controls of the group box relative to the
-                    position of the group box. */
-                xControl->moveEmbeddedToAbsoluteParent();
-                /*  Insert all children of the group box into the last control
-                    group (following the group box). */
-                rLastGroup.insert( rLastGroup.end(), xControl->maControls.begin(), xControl->maControls.end() );
-                xControl->maControls.clear();
-                // check if last control of the group box is an option button
-                bLastWasOptionButton = dynamic_cast< const AxOptionButtonModel* >( rLastGroup.back()->mxCtrlModel.get() ) != 0;
             }
         }
     }
 
     // flatten the vector of vectors of form controls to a single vector
-    maControls.clear();
     for( VbaFormControlVectorVector::iterator aIt = aControlGroups.begin(), aEnd = aControlGroups.end(); aIt != aEnd; ++aIt )
         maControls.insert( maControls.end(), (*aIt)->begin(), (*aIt)->end() );
 }
-
-void VbaFormControl::moveRelative( const AxPairData& rDistance )
-{
-    if( mxSiteModel.get() )
-        mxSiteModel->moveRelative( rDistance );
-}
-
-void VbaFormControl::moveEmbeddedToAbsoluteParent()
-{
-    if( mxSiteModel.get() && !maControls.empty() )
-    {
-        // distance to move is equal to position of this control in its parent
-        AxPairData aDistance = mxSiteModel->getPosition();
-
-        /*  For group boxes: add half of the font height to Y position (VBA
-            positions relative to frame border line, not to 'top' of frame). */
-        const AxFontDataModel* pFontModel = dynamic_cast< const AxFontDataModel* >( mxCtrlModel.get() );
-        if( pFontModel && (pFontModel->getControlType() == API_CONTROL_GROUPBOX) )
-        {
-            // convert points to 1/100 mm (1 pt = 1/72 inch = 2.54/72 cm = 2540/72 1/100 mm)
-            sal_Int32 nFontHeight = static_cast< sal_Int32 >( pFontModel->getFontHeight() * 2540 / 72 );
-            aDistance.second += nFontHeight / 2;
-        }
-
-        // move the embedded controls
-        maControls.forEachMem( &VbaFormControl::moveRelative, ::boost::cref( aDistance ) );
-    }
 }
 
 /*static*/ bool VbaFormControl::compareByTabIndex( const VbaFormControlRef& rxLeft, const VbaFormControlRef& rxRight )
@@ -791,7 +848,7 @@ void VbaUserForm::importForm( const Reference< XModel >& rxDocModel, const Refer
         Reference< XNameContainer > xDialogNC( xDialogModel, UNO_QUERY_THROW );
 
         // convert properties and embedded controls
-        if( convertProperties( xDialogModel, *this, 0 ) )
+        if( convertProperties( rxDocModel, xDialogModel, *this, 0 ) )
         {
             // export the dialog to XML and insert it into the dialog library
             PropertySet aFactoryProps( mxGlobalFactory );
diff --git oox/source/ole/vbaproject.cxx oox/source/ole/vbaproject.cxx
index 04d37b8..10a7dc6 100755
--- oox/source/ole/vbaproject.cxx
+++ oox/source/ole/vbaproject.cxx
@@ -140,11 +140,9 @@ VbaProject::VbaProject( const Reference< XMultiServiceFactory >& rxGlobalFactory
     VbaFilterConfig( rxGlobalFactory, rConfigCompName ),
     mxGlobalFactory( rxGlobalFactory ),
     mxDocModel( rxDocModel ),
-    maLibName( CREATE_OUSTRING( "Standard" ) )
+    maPrjName( CREATE_OUSTRING( "Standard" ) )
 {
     OSL_ENSURE( mxDocModel.is(), "VbaProject::VbaProject - missing document model" );
-    mxBasicLib = openLibrary( PROP_BasicLibraries, false );
-    mxDialogLib = openLibrary( PROP_DialogLibraries, false );
 }
 
 VbaProject::~VbaProject()
@@ -208,7 +206,7 @@ bool VbaProject::attachMacroToEvent( const Reference< XEventsSupplier >& rxEvent
         // check that the specified macro exists in the module
         VbaHelper::hasMacro( mxBasicLib, rModuleName, rMacroName ) &&
         // attach the macro to the events supplier
-        VbaHelper::attachMacroToEvent( rxEventsSupp, rEventName, maLibName, rModuleName, rMacroName );
+        VbaHelper::attachMacroToEvent( rxEventsSupp, rEventName, maPrjName, rModuleName, rMacroName );
 }
 
 bool VbaProject::attachMacroToDocumentEvent( const OUString& rEventName,
@@ -235,7 +233,7 @@ bool VbaProject::attachMacroToEvent( const Reference< XEventsSupplier >& rxEvent
         // insert the new macro into the code module and attach it to the event
         return
             VbaHelper::insertMacro( mxBasicLib, rModuleName, aProxyName, rProxyArgs, rProxyType, aProxyCode ) &&
-            VbaHelper::attachMacroToEvent( rxEventsSupp, rEventName, maLibName, rModuleName, aProxyName );
+            VbaHelper::attachMacroToEvent( rxEventsSupp, rEventName, maPrjName, rModuleName, aProxyName );
     }
     return false;
 }
@@ -263,9 +261,9 @@ Reference< XNameContainer > VbaProject::openLibrary( sal_Int32 nPropId, bool bCr
     try
     {
         Reference< XLibraryContainer > xLibContainer( getLibraryContainer( nPropId ), UNO_SET_THROW );
-        if( bCreateMissing && !xLibContainer->hasByName( maLibName ) )
-            xLibContainer->createLibrary( maLibName );
-        xLibrary.set( xLibContainer->getByName( maLibName ), UNO_QUERY_THROW );
+        if( bCreateMissing && !xLibContainer->hasByName( maPrjName ) )
+            xLibContainer->createLibrary( maPrjName );
+        xLibrary.set( xLibContainer->getByName( maPrjName ), UNO_QUERY_THROW );
     }
     catch( Exception& )
     {
@@ -352,6 +350,12 @@ void VbaProject::importVba( StorageBase& rVbaPrjStrg, const GraphicHelper& rGrap
                 aModulesByStrm[ rxModule->getStreamName() ] = rxModule;
             }
             break;
+            case VBA_ID_PROJECTNAME:
+            {
+                maPrjName = aRecStrm.readCharArrayUC( nRecSize, eTextEnc );
+                OSL_ENSURE( maPrjName.getLength() > 0, "VbaProject::importVba - invalid project name" );
+            }
+            break;
 #undef OOX_ENSURE_RECORDSIZE
         }
     }
@@ -421,7 +425,7 @@ void VbaProject::importVba( StorageBase& rVbaPrjStrg, const GraphicHelper& rGrap
     }
 
     /*  Now it is time to load the source code. All modules will be inserted
-        into the Basic library of the document specified by the 'maLibName'
+        into the Basic library of the document specified by the 'maPrjName'
         member. Do not create the Basic library, if there are no modules
         specified. */
     if( !aModules.empty() ) try
@@ -432,7 +436,9 @@ void VbaProject::importVba( StorageBase& rVbaPrjStrg, const GraphicHelper& rGrap
         // set library container to VBA compatibility mode
         try
         {
-            Reference< XVBACompat >( getLibraryContainer( PROP_BasicLibraries ), UNO_QUERY_THROW )->setVBACompatModeOn( sal_True );
+            Reference< XVBACompat > xVBACompat( getLibraryContainer( PROP_BasicLibraries ), UNO_QUERY_THROW );
+            xVBACompat->setVBACompatModeOn( sal_True );
+            xVBACompat->setProjectName( maPrjName );
         }
         catch( Exception& )
         {
diff --git oox/source/token/properties.txt oox/source/token/properties.txt
index 2b32b0a..7dbc10b 100644
--- oox/source/token/properties.txt
+++ oox/source/token/properties.txt
@@ -84,6 +84,7 @@ CompileEnglish
 ConditionalFormat
 ConnectBars
 ContainsHeader
+ControlSource
 Coordinates
 CopyBack
 CopyFormulas
@@ -343,6 +346,7 @@ RotationHorizontal
 RotationVertical
 RowGrand
 RowLabelRanges
+RowSource
 ScaleMode
 ScaleToPages
 ScaleToPagesX
diff --git oox/source/token/tokenmap.cxx oox/source/token/tokenmap.cxx
index a3dac5c..a27d741 100644
--- oox/source/token/tokenmap.cxx
+++ oox/source/token/tokenmap.cxx
@@ -33,8 +33,6 @@
 #include "tokens.hxx"
 #include "oox/helper/containerhelper.hxx"
 
-#include <string.h>
-
 using ::rtl::OString;
 using ::rtl::OUString;
 using ::com::sun::star::uno::Sequence;
diff --git oox/source/xls/excelfilter.cxx oox/source/xls/excelfilter.cxx
index 1b60aec..ffed051 100644
--- oox/source/xls/excelfilter.cxx
+++ oox/source/xls/excelfilter.cxx
@@ -242,6 +242,63 @@ OUString ExcelBiffFilter::implGetImplementationName() const
 
 // ============================================================================
 
+OUString SAL_CALL SimpleExcelVBAProjFilter_getImplementationName() throw()
+{
+    return CREATE_OUSTRING( "com.sun.star.comp.xls.SimpleExcelVBAProjFilter" );
+}
+
+Sequence< OUString > SAL_CALL SimpleExcelVBAProjFilter_getSupportedServiceNames() throw()
+{
+    OUString aServiceName = CREATE_OUSTRING( "com.sun.star.comp.ole.SimpleExcelVBAProjFilter" );
+    Sequence< OUString > aSeq( &aServiceName, 1 );
+    return aSeq;
+}
+
+Reference< XInterface > SAL_CALL SimpleExcelVBAProjFilter_createInstance(
+        const Reference< XMultiServiceFactory >& rxGlobalFactory ) throw( Exception )
+{
+    return static_cast< ::cppu::OWeakObject* >( new SimpleExcelVBAProjFilter( rxGlobalFactory ) );
+}
+
+SimpleExcelVBAProjFilter::SimpleExcelVBAProjFilter( const Reference< XMultiServiceFactory >& rxGlobalFactory ) :
+    ExcelBiffFilter( rxGlobalFactory )
+//, oox::ole::SimpleVBAProjFilter( rxGlobalFactory, CREATE_OUSTRING( "Calc" ), CREATE_OUSTRING( "_VBA_PROJECT_CUR" ) )
+{
+}
+
+bool SimpleExcelVBAProjFilter::importDocument() throw()
+{
+    bool bRet = false;
+
+    // detect BIFF version and workbook stream name
+    OUString aWorkbookName;
+    BiffType eBiff = BiffDetector::detectStorageBiffVersion( aWorkbookName, getStorage() );
+    OSL_ENSURE( eBiff != BIFF_UNKNOWN, "ExcelBiffFilter::ExcelBiffFilter - invalid file format" );
+    if( eBiff != BIFF_UNKNOWN )
+    {
+        WorkbookHelperRoot aHelper( *this, eBiff );
+        StorageRef xVbaPrjStrg = openSubStorage( CREATE_OUSTRING( "_VBA_PROJECT_CUR" ), false )    ;
+        if( xVbaPrjStrg.get() && xVbaPrjStrg->isStorage() )
+        {
+            VbaProject aVbaProject( getGlobalFactory(), aHelper.getDocument() );
+            aVbaProject.importVbaProject( *xVbaPrjStrg, getGraphicHelper() );
+            bRet = true;
+        }
+    }
+    return bRet;
+}
+
+OUString SimpleExcelVBAProjFilter::implGetImplementationName() const
+{
+    return SimpleExcelVBAProjFilter_getImplementationName();
+}
+
+GraphicHelper* SimpleExcelVBAProjFilter::implCreateGraphicHelper() const
+{
+    return new ExcelGraphicHelper( getWorkbookData() );
+}
+
+// ============================================================================
+
 } // namespace xls
 } // namespace oox
-
diff --git sc/source/filter/excel/excimp8.cxx sc/source/filter/excel/excimp8.cxx
index a0e75b1..7e1a181 100644
--- sc/source/filter/excel/excimp8.cxx
+++ sc/source/filter/excel/excimp8.cxx
@@ -105,9 +105,14 @@
 #include <com/sun/star/script/ModuleInfo.hpp>
 #include <cppuhelper/component_context.hxx>
 #include <sfx2/app.hxx>
+#include <com/sun/star/document/XFilter.hpp>
+#include <com/sun/star/document/XImporter.hpp>
+#include <comphelper/mediadescriptor.hxx>
+
 #include "xltoolbar.hxx"
 
 using namespace com::sun::star;
+using namespace ::comphelper;
 using ::rtl::OUString;
 
 // defined in docfunc.cxx ( really this needs a new name )
@@ -268,9 +272,10 @@ void ImportExcel8::ReadBasic( void )
         bool bLoadCode = pFilterOpt->IsLoadExcelBasicCode();
         bool bLoadExecutable = pFilterOpt->IsLoadExcelBasicExecutable();
         bool bLoadStrg = pFilterOpt->IsLoadExcelBasicStorage();
+        // #FIXME need to get rid of this, we can also do this from within oox
+        // via the "ooo.vba.VBAGlobals" service
         if( bLoadCode || bLoadStrg )
         {
-            SvxImportMSVBasic aBasicImport( *pShell, *xRootStrg, bLoadCode, bLoadStrg );
             bool bAsComment = !bLoadExecutable;
             if ( !bAsComment )
             {
@@ -283,6 +288,33 @@ void ImportExcel8::ReadBasic( void )
                 if ( pAppMgr )
                     pAppMgr->SetGlobalUNOConstant( "ThisExcelDoc", aArgs[ 0 ] );
             }
+            try
+            {
+                uno::Reference< lang::XComponent > xComponent( pShell->GetModel(), uno::UNO_QUERY_THROW );
+                
+                uno::Reference< document::XImporter > xImporter( ScfApiHelper::CreateInstance( CREATE_OUSTRING( "com.sun.star.comp.xls.SimpleExcelVBAProjFilter" ) ), uno::UNO_QUERY_THROW );
+                xImporter->setTargetDocument( xComponent );
+    
+                MediaDescriptor aMediaDesc;
+                SfxMedium& rMedium = GetMedium();
+                SfxItemSet* pItemSet = rMedium.GetItemSet();
+                if( pItemSet )
+                {
+                    if( const SfxStringItem* pItem = static_cast< const SfxStringItem* >( pItemSet->GetItem( SID_FILE_NAME ) ) )
+                        aMediaDesc[ MediaDescriptor::PROP_URL() ] <<= ::rtl::OUString( pItem->GetValue() );
+                    if( const SfxStringItem* pItem = static_cast< const SfxStringItem* >( pItemSet->GetItem( SID_PASSWORD ) ) )
+                        aMediaDesc[ MediaDescriptor::PROP_PASSWORD() ] <<= ::rtl::OUString( pItem->GetValue() );
+                }
+                aMediaDesc[ MediaDescriptor::PROP_INPUTSTREAM() ] <<= rMedium.GetInputStream();
+                aMediaDesc[ MediaDescriptor::PROP_INTERACTIONHANDLER() ] <<= rMedium.GetInteractionHandler();
+    
+                // call the filter
+                uno::Reference< document::XFilter > xFilter( xImporter, uno::UNO_QUERY_THROW );
+                xFilter->filter( aMediaDesc.getAsConstPropertyValueList() );
+            }
+            catch( uno::Exception& )
+            {
+            }
 
             if ( !bAsComment )
             {
@@ -304,9 +336,11 @@ void ImportExcel8::ReadBasic( void )
 #endif
 
             }
-            aBasicImport.Import( EXC_STORAGE_VBA_PROJECT, EXC_STORAGE_VBA, bAsComment );
+            // #FIXME how to get this info from oox
+            #if FIXME
             if ( !bAsComment )
                 GetObjectManager().SetOleNameOverrideInfo( aBasicImport.ControlNameForObjectId() );
+            #endif
         }
     }
 }
diff --git sc/source/ui/docshell/docsh5.cxx sc/source/ui/docshell/docsh5.cxx
index 82e797e..54c116e 100644
--- sc/source/ui/docshell/docsh5.cxx
+++ sc/source/ui/docshell/docsh5.cxx
@@ -42,6 +42,7 @@
 #include <svl/smplhint.hxx>
 
 #include <com/sun/star/sdbc/XResultSet.hpp>
+#include <com/sun/star/script/XVBACompat.hpp>
 
 // INCLUDE ---------------------------------------------------------------
 
@@ -71,6 +72,12 @@
 // defined in docfunc.cxx
 void VBA_InsertModule( ScDocument& rDoc, SCTAB nTab, String& sModuleName, String& sModuleSource );
 
+using com::sun::star::script::XLibraryContainer;
+using com::sun::star::script::XVBACompat;
+using com::sun::star::container::XNameContainer;
+using com::sun::star::uno::Reference;
+using com::sun::star::uno::UNO_QUERY;
+
 // ---------------------------------------------------------------------------
 
 //
@@ -943,18 +950,21 @@ BOOL ScDocShell::MoveTable( SCTAB nSrcTab, SCTAB nDestTab, BOOL bCopy, BOOL bRec
                         {
                 StarBASIC* pStarBASIC = GetBasic();
                             String aLibName( RTL_CONSTASCII_USTRINGPARAM( "Standard" ) );
-                            if ( GetBasicManager()->GetName().Len() > 0 )
+                            Reference< XLibraryContainer > xLibContainer = GetBasicContainer();
+                            Reference< XVBACompat > xVBACompat( xLibContainer, UNO_QUERY );
+
+                            if ( xVBACompat.is() )
                             {
-                                aLibName = GetBasicManager()->GetName();
+                                aLibName = xVBACompat->getProjectName();
                                 pStarBASIC = GetBasicManager()->GetLib( aLibName );
                             }
+
                             SCTAB nTabToUse = nDestTab; 
                             if ( nDestTab == SC_TAB_APPEND )
                                 nTabToUse = aDocument.GetMaxTableNumber() - 1;
                             String sCodeName;
                             String sSource;
-                            com::sun::star::uno::Reference< com::sun::star::script::XLibraryContainer > xLibContainer = GetBasicContainer();
-                            com::sun::star::uno::Reference< com::sun::star::container::XNameContainer > xLib;
+                            Reference< XNameContainer > xLib;
                             if( xLibContainer.is() )
                             {
                                 com::sun::star::uno::Any aLibAny = xLibContainer->getByName( aLibName );
@@ -1021,7 +1031,7 @@ IMPL_LINK( ScDocShell, RefreshDBDataHdl, ScRefreshTimer*, pRefreshTimer )
     {
         ScRange aRange;
         pDBData->GetArea( aRange );
-        ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XResultSet> xResultSet;
+                Reference< ::com::sun::star::sdbc::XResultSet> xResultSet;
         bContinue = aFunc.DoImport( aRange.aStart.Tab(), aImportParam, xResultSet, NULL, TRUE, FALSE );	//! Api-Flag as parameter
         // internal operations (sort, query, subtotal) only if no error
         if (bContinue)
diff --git scripting/prj/build.lst scripting/prj/build.lst
index 7d51621..28fcdbc 100755
--- scripting/prj/build.lst
+++ scripting/prj/build.lst
@@ -1,4 +1,4 @@
-tc	scripting	:	oovbaapi vbahelper bridges rdbmaker vcl xmlscript basic sfx2 rhino BSH:beanshell javaunohelper NULL
+tc	scripting	:	filter oovbaapi vbahelper bridges rdbmaker vcl xmlscript basic sfx2 rhino BSH:beanshell javaunohelper NULL
 tc	scripting									usr1	-	all	tc1_mkout NULL
 tc	scripting\inc								nmake	-	all	tc1_inc NULL
 tc	scripting\source\provider				nmake	-	all	tc1_scriptingprovider tc1_inc NULL
diff --git scripting/source/dlgprov/dlgevtatt.cxx scripting/source/dlgprov/dlgevtatt.cxx
index 2d8c853..bcc19f8 100644
--- scripting/source/dlgprov/dlgevtatt.cxx
+++ scripting/source/dlgprov/dlgevtatt.cxx
@@ -37,6 +37,7 @@
 #include <tools/diagnose_ex.h>
 
 #include <com/sun/star/awt/XControl.hpp>
+#include <com/sun/star/awt/XControlContainer.hpp>
 #include <com/sun/star/awt/XDialogEventHandler.hpp>
 #include <com/sun/star/awt/XContainerWindowEventHandler.hpp>
 #include <com/sun/star/beans/XPropertySet.hpp>
@@ -231,6 +232,9 @@ namespace dlgprov
             Reference< container::XNameContainer > xEventCont = xEventsSupplier->getEvents();
 
             Reference< XControlModel > xControlModel = xControl->getModel();
+            Reference< XPropertySet > xProps( xControlModel, uno::UNO_QUERY );
+            rtl::OUString sName;
+            xProps->getPropertyValue( rtl::OUString::createFromAscii("Name") ) >>= sName;
             if ( xEventCont.is() )
             {
                 Sequence< ::rtl::OUString > aNames = xEventCont->getElementNames();
@@ -287,6 +291,51 @@ namespace dlgprov
         }
     }
 
+
+    void DialogEventsAttacherImpl::nestedAttachEvents( const Sequence< Reference< XInterface > >& Objects, const Any& Helper, rtl::OUString& sDialogCodeName )
+    {
+        const Reference< XInterface >* pObjects = Objects.getConstArray();
+        sal_Int32 nObjCount = Objects.getLength();
+		
+        for ( sal_Int32 i = 0; i < nObjCount; ++i )
+        {
+            // We know that we have to do with instances of XControl.
+            // Otherwise this is not the right implementation for
+            // XScriptEventsAttacher and we have to give up.
+            Reference< XControl > xControl( pObjects[ i ], UNO_QUERY );
+            Reference< XControlContainer > xControlContainer( xControl, UNO_QUERY );
+            Reference< XDialog > xDialog( xControl, UNO_QUERY );
+            if ( !xControl.is() )
+                throw IllegalArgumentException();
+
+            // get XEventsSupplier from control model
+            Reference< XControlModel > xControlModel = xControl->getModel();
+            Reference< XScriptEventsSupplier > xEventsSupplier( xControlModel, UNO_QUERY );
+            attachEventsToControl( xControl, xEventsSupplier, Helper );
+            if ( mbUseFakeVBAEvents )
+            {
+                xEventsSupplier.set( getFakeVbaEventsSupplier( xControl, sDialogCodeName ) );
+                Any newHelper(xControl );
+                attachEventsToControl( xControl, xEventsSupplier, newHelper );
+            }
+            if ( xControlContainer.is() && !xDialog.is() )
+            {
+                Sequence< Reference< XControl > > aControls = xControlContainer->getControls();
+                sal_Int32 nControlCount = aControls.getLength();
+
+                Sequence< Reference< XInterface > > aObjects( nControlCount );
+                Reference< XInterface >* pObjectsModify = aObjects.getArray();
+                const Reference< XControl >* pControls = aControls.getConstArray();
+
+                for ( sal_Int32 j = 0; j < nControlCount; ++j )
+                {
+                    pObjectsModify[j] = Reference< XInterface >( pControls[j], UNO_QUERY );
+                }
+                nestedAttachEvents( aObjects, Helper, sDialogCodeName );
+            }
+        }
+    }
+
     // -----------------------------------------------------------------------------
     // XScriptEventsAttacher
     // -----------------------------------------------------------------------------
@@ -319,12 +368,9 @@ namespace dlgprov
 
             }
         }
-
-        // go over all objects
-        const Reference< XInterface >* pObjects = Objects.getConstArray();
+        rtl::OUString sDialogCodeName;
         sal_Int32 nObjCount = Objects.getLength();
         Reference< awt::XControl > xDlgControl( Objects[ nObjCount - 1 ], uno::UNO_QUERY ); // last object is the dialog	
-        rtl::OUString sDialogCodeName;
         if ( xDlgControl.is() )
         {
             Reference< XPropertySet > xProps( xDlgControl->getModel(), UNO_QUERY );
@@ -334,26 +380,8 @@ namespace dlgprov
             }
             catch( Exception& ){}
         }
-    
-        for ( sal_Int32 i = 0; i < nObjCount; ++i )
-        {
-            // We know that we have to do with instances of XControl.
-            // Otherwise this is not the right implementation for
-            // XScriptEventsAttacher and we have to give up.
-            Reference< XControl > xControl( pObjects[ i ], UNO_QUERY );
-            if ( !xControl.is() )
-                throw IllegalArgumentException();
-
-            // get XEventsSupplier from control model
-            Reference< XControlModel > xControlModel = xControl->getModel();
-            Reference< XScriptEventsSupplier > xEventsSupplier( xControlModel, UNO_QUERY );
-            attachEventsToControl( xControl, xEventsSupplier, Helper );
-            if ( mbUseFakeVBAEvents )
-            {
-                xEventsSupplier.set( getFakeVbaEventsSupplier( xControl, sDialogCodeName ) );
-                attachEventsToControl( xControl, xEventsSupplier, Helper );
-            }
-        }
+        // go over all objects
+        nestedAttachEvents( Objects, Helper, sDialogCodeName );
     }
 
 
diff --git scripting/source/dlgprov/dlgevtatt.hxx scripting/source/dlgprov/dlgevtatt.hxx
index 0df79b2..f64190a 100644
--- scripting/source/dlgprov/dlgevtatt.hxx
+++ scripting/source/dlgprov/dlgevtatt.hxx
@@ -70,6 +70,7 @@ namespace dlgprov
         ::com::sun::star::uno::Reference< ::com::sun::star::script::XEventAttacher > m_xEventAttacher;
         ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptListener > getScriptListenerForKey( const rtl::OUString& sScriptName ) throw ( ::com::sun::star::uno::RuntimeException );
         ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptEventsSupplier > getFakeVbaEventsSupplier( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl>& xControl, rtl::OUString& sCodeName );
+        void nestedAttachEvents( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& Objects, const ::com::sun::star::uno::Any& Helper, rtl::OUString& sDialogCodeName );
         void  SAL_CALL attachEventsToControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl>& xControl, const ::com::sun::star::uno::Reference< ::com::sun::star::script::XScriptEventsSupplier >& events, const ::com::sun::star::uno::Any& Helper  );
     public:
         DialogEventsAttacherImpl( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XComponentContext >& rxContext, 
diff --git scripting/source/vbaevents/eventhelper.cxx scripting/source/vbaevents/eventhelper.cxx
index 703357d..8411b09 100644
--- scripting/source/vbaevents/eventhelper.cxx
+++ scripting/source/vbaevents/eventhelper.cxx
@@ -54,6 +54,7 @@
 #include <com/sun/star/script/XLibraryContainer.hpp>
 #include <com/sun/star/script/ScriptEventDescriptor.hpp>
 #include <com/sun/star/script/provider/XScriptProviderSupplier.hpp>
+#include <com/sun/star/script/XVBACompat.hpp>
 
 #include <com/sun/star/container/XNamed.hpp>
 
@@ -763,7 +764,7 @@ private:
     Reference< frame::XModel > m_xModel;
     SfxObjectShell* mpShell;
     sal_Bool m_bDocClosed;
-    
+    rtl::OUString msProject; 
 };
 
 EventListener::EventListener( const Reference< XComponentContext >& rxContext ) :
@@ -771,7 +772,7 @@ OPropertyContainer(GetBroadcastHelper()), m_xContext( rxContext ), m_bDocClosed(
 {
     registerProperty( EVENTLSTNR_PROPERTY_MODEL, EVENTLSTNR_PROPERTY_ID_MODEL,
         beans::PropertyAttribute::TRANSIENT, &m_xModel, ::getCppuType( &m_xModel ) );
-
+    msProject = rtl::OUString::createFromAscii("Standard");
 }
 
 void
@@ -789,6 +790,14 @@ EventListener::setShellFromModel()
         }
         pShell = SfxObjectShell::GetNext( *pShell );
     }    
+	// set ProjectName from model
+	try
+	{
+		Reference< beans::XPropertySet > xProps( m_xModel, UNO_QUERY_THROW );
+		uno::Reference< script::XVBACompat > xVBAMode( xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BasicLibraries") ) ), uno::UNO_QUERY_THROW );
+		msProject = xVBAMode->getProjectName();
+	}
+	catch ( uno::Exception& ) {}    
 }
 
 //XEventListener
@@ -1059,19 +1068,10 @@ EventListener::firing_Impl(const ScriptEvent& evt, Any* pRet ) throw(RuntimeExce
        
         StarBASIC* pBasic = mpShell->GetBasic();
         BasicManager* pBasicManager = mpShell->GetBasicManager();
-        rtl::OUString sProject;
+        rtl::OUString sProject( msProject );
         rtl::OUString sScriptCode( evt.ScriptCode );
 	// dialogs pass their own library, presence of Dot determines that
-	if ( sScriptCode.indexOf( '.' ) == -1 )
-	{
-        	//'Project' is a better default but I want to force failures
-	        //rtl::OUString sMacroLoc = rtl::OUString::createFromAscii("Project");
-        	sProject = rtl::OUString::createFromAscii("Standard");
-
-        	if ( pBasicManager->GetName().Len() > 0 )
-            		sProject =  pBasicManager->GetName();
-	}
-	else
+	if ( sScriptCode.indexOf( '.' ) != -1 )
 	{
 		sal_Int32 nIndex = sScriptCode.indexOf( '.' );
 		sProject = sScriptCode.copy( 0, nIndex );
diff --git toolkit/inc/toolkit/awt/vclxwindows.hxx toolkit/inc/toolkit/awt/vclxwindows.hxx
index d595981..42139bc 100644
--- toolkit/inc/toolkit/awt/vclxwindows.hxx
+++ toolkit/inc/toolkit/awt/vclxwindows.hxx
@@ -83,6 +83,7 @@
 #include <com/sun/star/awt/XDateField.hpp>
 #include <com/sun/star/awt/XComboBox.hpp>
 #include <com/sun/star/awt/XCheckBox.hpp>
+#include <com/sun/star/awt/XSimpleTabController.hpp>
 #include <com/sun/star/awt/XItemListListener.hpp>
 #include <cppuhelper/weak.hxx>
 #include <cppuhelper/implbase3.hxx>
@@ -95,6 +96,7 @@
 
 #include <vcl/pointr.hxx>
 #include <vcl/image.hxx>
+#include <vcl/tabctrl.hxx>
 
 #include <com/sun/star/document/XVbaMethodParameter.hpp>  //liuchen 2009-6-22, add the support of input/output parameters to VBA Dialog_QueryClose event
 class Button;
@@ -386,6 +388,40 @@ public:
     virtual void    GetPropertyIds( std::list< sal_uInt16 > &aIds ) { return ImplGetPropertyIds( aIds ); }
 };
 
+//	----------------------------------------------------
+//	class VCLXFrame
+//	----------------------------------------------------
+class VCLXFrame :	public VCLXContainer
+{
+protected:
+    void                        ProcessWindowEvent( const VclWindowEvent& rVclWindowEvent );
+
+public:
+						VCLXFrame();
+						~VCLXFrame();
+
+	// ::com::sun::star::uno::XInterface
+    ::com::sun::star::uno::Any					SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+	void										SAL_CALL acquire() throw()	{ OWeakObject::acquire(); }
+	void										SAL_CALL release() throw()	{ OWeakObject::release(); }
+
+    // ::com::sun::star::lang::XTypeProvider
+	::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type >	SAL_CALL getTypes() throw(::com::sun::star::uno::RuntimeException);
+	::com::sun::star::uno::Sequence< sal_Int8 >						SAL_CALL getImplementationId() throw(::com::sun::star::uno::RuntimeException);
+
+	// ::com::sun::star::awt::XView
+    void SAL_CALL draw( sal_Int32 nX, sal_Int32 nY ) throw(::com::sun::star::uno::RuntimeException);
+
+	// ::com::sun::star::awt::XDevice,
+	::com::sun::star::awt::DeviceInfo SAL_CALL getInfo() throw(::com::sun::star::uno::RuntimeException);
+
+	// ::com::sun::star::awt::XVclWindowPeer
+    void SAL_CALL setProperty( const ::rtl::OUString& PropertyName, const ::com::sun::star::uno::Any& Value ) throw(::com::sun::star::uno::RuntimeException);
+
+    static void     ImplGetPropertyIds( std::list< sal_uInt16 > &aIds );
+    virtual void    GetPropertyIds( std::list< sal_uInt16 > &aIds ) { return ImplGetPropertyIds( aIds ); }
+};
+
 
 
 //	----------------------------------------------------
@@ -463,6 +499,59 @@ public:
     // ::com::sun::star::awt::XVclWindowPeer
     void SAL_CALL setProperty( const ::rtl::OUString& PropertyName, const ::com::sun::star::uno::Any& Value ) throw(::com::sun::star::uno::RuntimeException);
 
+    TabPage*  getTabPage() const throw ( ::com::sun::star::uno::RuntimeException);
+    static void     ImplGetPropertyIds( std::list< sal_uInt16 > &aIds );
+    virtual void    GetPropertyIds( std::list< sal_uInt16 > &aIds ) { return ImplGetPropertyIds( aIds ); }
+};
+
+class VCLXMultiPage : public ::com::sun::star::awt::XSimpleTabController, public VCLXContainer
+{
+    TabListenerMultiplexer maTabListeners;
+    sal_Int32 mTabId;
+protected:
+    void ProcessWindowEvent( const VclWindowEvent& rVclWindowEvent );
+public:
+    VCLXMultiPage();
+    ~VCLXMultiPage();
+
+    // ::com::sun::star::uno::XInterface
+    ::com::sun::star::uno::Any SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL acquire() throw()	{ OWeakObject::acquire(); }
+    void SAL_CALL release() throw()	{ OWeakObject::release(); }
+
+    // ::com::sun::star::lang::XTypeProvider
+    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type > SAL_CALL getTypes() throw(::com::sun::star::uno::RuntimeException);
+    ::com::sun::star::uno::Sequence< sal_Int8 > SAL_CALL getImplementationId() throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::lang::XComponent
+    void SAL_CALL dispose(  ) throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::awt::XView
+    void SAL_CALL draw( sal_Int32 nX, sal_Int32 nY ) throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::awt::XDevice,
+    ::com::sun::star::awt::DeviceInfo SAL_CALL getInfo() throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::awt::XVclWindowPeer
+    void SAL_CALL setProperty( const ::rtl::OUString& PropertyName, const ::com::sun::star::uno::Any& Value ) throw(::com::sun::star::uno::RuntimeException);
+    ::com::sun::star::uno::Any SAL_CALL getProperty( const ::rtl::OUString& PropertyName ) throw(::com::sun::star::uno::RuntimeException);
+    // XSimpleTabController
+    virtual ::sal_Int32 SAL_CALL insertTab() throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL removeTab( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL setTabProps( ::sal_Int32 ID, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue >& Properties ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue > SAL_CALL getTabProps( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL activateTab( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getActiveTabID() throw (::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL addTabListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabListener >& Listener ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL removeTabListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabListener >& Listener ) throw (::com::sun::star::uno::RuntimeException);
+    // C++
+    TabControl*  getTabControl() const throw ( ::com::sun::star::uno::RuntimeException);
+    USHORT insertTab( TabPage*, rtl::OUString& sTitle ); 
+    static void     ImplGetPropertyIds( std::list< sal_uInt16 > &aIds );
+    virtual void    GetPropertyIds( std::list< sal_uInt16 > &aIds ) { return ImplGetPropertyIds( aIds ); }
 };
 
 //  ----------------------------------------------------
diff --git toolkit/inc/toolkit/controls/dialogcontrol.hxx toolkit/inc/toolkit/controls/dialogcontrol.hxx
index a1725f2..f13a018 100644
--- toolkit/inc/toolkit/controls/dialogcontrol.hxx
+++ toolkit/inc/toolkit/controls/dialogcontrol.hxx
@@ -34,12 +34,16 @@
 #include <com/sun/star/awt/XTopWindow.hpp>
 #include <com/sun/star/util/XChangesNotifier.hpp>
 #include <com/sun/star/util/XChangesListener.hpp>
+#include <com/sun/star/awt/XTabListener.hpp>
+#include <com/sun/star/awt/XSimpleTabController.hpp>
 #include <com/sun/star/util/XModifyListener.hpp>
 #include <com/sun/star/beans/XPropertyChangeListener.hpp>
 #include <com/sun/star/awt/XDialog2.hpp>
 #include <com/sun/star/resource/XStringResourceResolver.hpp>
+#include <com/sun/star/graphic/XGraphicObject.hpp>
 #include <cppuhelper/implbase6.hxx>
 #include <cppuhelper/implbase5.hxx>
+#include <cppuhelper/implbase2.hxx>
 #include <toolkit/helper/listenermultiplexer.hxx>
 #include <toolkit/controls/unocontrolmodel.hxx>
 #include "toolkit/helper/servicenames.hxx"
@@ -67,11 +71,12 @@ class UnoControlDialogModel :	public UnoControlDialogModel_IBase
                             ,	public UnoControlDialogModel_Base
 {
 public:
+    enum ChildOperation { Insert = 0, Remove };
     // would like to make this typedef private, too, but the Forte 7 compiler does have
     // problems with this .....
     typedef ::std::pair< ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >, ::rtl::OUString >
                                                         UnoControlModelHolder;
-private:
+protected:
     typedef ::std::list< UnoControlModelHolder >		UnoControlModelHolderList;
 
     // for grouping control models (XTabControllerModel::getGroupXXX)
@@ -83,7 +88,7 @@ private:
     friend struct FindControlModel;
     friend struct CompareControlModel;
 
-private:
+protected:
     ContainerListenerMultiplexer		maContainerListeners;
     ::cppu::OInterfaceContainerHelper	maChangeListeners;
     UnoControlModelHolderList			maModels;
@@ -94,13 +99,14 @@ private:
 	::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject > mxGrfObj;
 	bool mbAdjustingGraphic;
 protected:	
-    ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
+    virtual ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
     ::cppu::IPropertyArrayHelper&		SAL_CALL getInfoHelper();
 
     UnoControlModelHolderList::iterator			ImplFindElement( const ::rtl::OUString& rName );
+    void updateUserFormChildren(  const ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameContainer >& xAllChildren, const rtl::OUString& aName, ChildOperation Operation,  const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& xTarget ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) ;
 
 public:
-                        UnoControlDialogModel();
+                        UnoControlDialogModel( bool bRegProps = true );
                         UnoControlDialogModel( const UnoControlDialogModel& rModel );
                         ~UnoControlDialogModel();
                         
@@ -123,13 +129,6 @@ public:
     ::com::sun::star::uno::Type SAL_CALL getElementType(  ) throw(::com::sun::star::uno::RuntimeException);
     sal_Bool SAL_CALL hasElements(  ) throw(::com::sun::star::uno::RuntimeException);
     
-    // ::com::sun::star::container::XIndexContainer, XIndexReplace, XIndexAcces
-    // void SAL_CALL replaceByIndex( sal_Int32 Index, const ::com::sun::star::uno::Any& Element ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
-    // sal_Int32 SAL_CALL getCount(  ) throw(::com::sun::star::uno::RuntimeException) = 0;
-    // ::com::sun::star::uno::Any SAL_CALL getByIndex( sal_Int32 Index ) throw(::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
-    // void SAL_CALL insertByIndex( sal_Int32 Index, const ::com::sun::star::uno::Any& Element ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
-    // void SAL_CALL removeByIndex( sal_Int32 Index ) throw(::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
-    
     // ::com::sun::star::container::XNameContainer, XNameReplace, XNameAccess
     void SAL_CALL replaceByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException);
     ::com::sun::star::uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw(::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException);
@@ -179,12 +178,12 @@ public:
 protected:
     void startControlListening( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& _rxChildModel );
     void stopControlListening( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& _rxChildModel );
-    // ::cppu::OPropertySetHelper
-	void SAL_CALL setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception);
 
     void implNotifyTabModelChange( const ::rtl::OUString& _rAccessor );
 
     void implUpdateGroupStructure();
+    // ::cppu::OPropertySetHelper
+	void SAL_CALL setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception);
 private:
     void AddRadioButtonToGroup (
             const ::com::sun::star::uno::Reference< XControlModel >& rControlModel,
@@ -195,17 +194,6 @@ private:
             ::std::map< ::rtl::OUString, ModelGroup >& pNamedGroups );
 };
 
-//	----------------------------------------------------
-//	class UnoDialogControl
-//	----------------------------------------------------
-typedef ::cppu::ImplHelper6	<	::com::sun::star::container::XContainerListener
-                            ,	::com::sun::star::awt::XTopWindow
-                            ,	::com::sun::star::awt::XDialog2
-                            ,	::com::sun::star::util::XChangesListener
-                            ,   ::com::sun::star::util::XModifyListener
-                            ,   ::com::sun::star::awt::XWindowListener
-                            >	UnoDialogControl_IBase;
-
 class ResourceListener  :public ::com::sun::star::util::XModifyListener,
                          public ::cppu::OWeakObject,
                          public ::cppu::BaseMutex
@@ -234,29 +222,78 @@ class ResourceListener  :public ::com::sun::star::util::XModifyListener,
         bool                                                                                    m_bListening;
 };
 
-class UnoDialogControl	:public UnoControlContainer
-                        ,public UnoDialogControl_IBase
+typedef ::cppu::ImplHelper2	< ::com::sun::star::container::XContainerListener
+							,	::com::sun::star::util::XChangesListener
+							>	UnoDialogContainerControl_IBase;
+
+class UnoDialogContainerControl : public UnoControlContainer, public UnoDialogContainerControl_IBase
+{
+protected:
+    bool                                                                        mbSizeModified;
+    bool                                                                        mbPosModified;
+    ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabController >	mxTabController;
+    void		ImplInsertControl( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxModel, const ::rtl::OUString& rName );
+    void		ImplRemoveControl( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxModel );
+    virtual void		ImplSetPosSize( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& rxCtrl );
+
+public:
+	UnoDialogContainerControl();
+	~UnoDialogContainerControl();
+
+	DECLIMPL_SERVICEINFO_DERIVED( UnoDialogContainerControl, UnoControlBase, "com.sun.star.awt.UnoDialogContainerControl" )
+    ::com::sun::star::uno::Any	SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException) { return UnoControlContainer::queryInterface(rType); }
+    ::com::sun::star::uno::Any	SAL_CALL queryAggregation( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL acquire() throw()	{ OWeakAggObject::acquire(); }
+    void SAL_CALL release() throw()	{ OWeakAggObject::release(); }
+
+    void SAL_CALL disposing( const ::com::sun::star::lang::EventObject& Source ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL dispose() throw(::com::sun::star::uno::RuntimeException);
+
+    void SAL_CALL createPeer( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XToolkit >& Toolkit, const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindowPeer >& Parent ) throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::container::XContainerListener
+    void SAL_CALL elementInserted( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL elementRemoved( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL elementReplaced( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::lang::XTypeProvider
+    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type >	SAL_CALL getTypes() throw(::com::sun::star::uno::RuntimeException);
+    ::com::sun::star::uno::Sequence< sal_Int8 >						SAL_CALL getImplementationId() throw(::com::sun::star::uno::RuntimeException);
+
+    // XChangesListener
+    virtual void SAL_CALL changesOccurred( const ::com::sun::star::util::ChangesEvent& Event ) throw (::com::sun::star::uno::RuntimeException);
+
+    // ::com::sun::star::awt::XControl
+    sal_Bool SAL_CALL setModel( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& Model ) throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL setDesignMode( sal_Bool bOn ) throw(::com::sun::star::uno::RuntimeException);
+protected:
+    virtual void ImplModelPropertiesChanged( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyChangeEvent >& rEvents ) throw(::com::sun::star::uno::RuntimeException);
+	virtual void removingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
+	virtual void addingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
+};
+
+
+
+class UnoDialogControl :public UnoDialogContainerControl
+						,public ::com::sun::star::awt::XTopWindow, public ::com::sun::star::awt::XDialog2, public ::com::sun::star::awt::XWindowListener 
 {
 private:
     ::com::sun::star::uno::Reference< ::com::sun::star::awt::XMenuBar >			mxMenuBar;
-    ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabController >	mxTabController;
-    ::com::sun::star::uno::Reference< ::com::sun::star::util::XModifyListener > mxListener;                
     TopWindowListenerMultiplexer	                                            maTopWindowListeners;
     bool                                                                        mbWindowListener;
-    bool                                                                        mbSizeModified;
-    bool                                                                        mbPosModified;
+    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject > mxGrfObj;
+    ::com::sun::star::uno::Reference< ::com::sun::star::util::XModifyListener > mxListener;
 
 protected:
     
     void		ImplInsertControl( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxModel, const ::rtl::OUString& rName );
-    void		ImplRemoveControl( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& rxModel );
-    void		ImplSetPosSize( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& rxCtrl );
     void        ImplUpdateResourceResolver();
     void        ImplStartListingForResourceEvents();
 
 public:
 
                                 UnoDialogControl();
+								~UnoDialogControl();
     ::rtl::OUString				GetComponentServiceName();
 
     ::com::sun::star::uno::Any	SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException) { return UnoControlContainer::queryInterface(rType); }
@@ -281,11 +318,6 @@ public:
     virtual void SAL_CALL windowShown( const ::com::sun::star::lang::EventObject& e ) throw (::com::sun::star::uno::RuntimeException);
     virtual void SAL_CALL windowHidden( const ::com::sun::star::lang::EventObject& e ) throw (::com::sun::star::uno::RuntimeException);
     
-    // ::com::sun::star::container::XContainerListener
-    void SAL_CALL elementInserted( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
-    void SAL_CALL elementRemoved( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
-    void SAL_CALL elementReplaced( const ::com::sun::star::container::ContainerEvent& Event ) throw(::com::sun::star::uno::RuntimeException);
-    
     // ::com::sun::star::awt::XDialog2
     virtual void SAL_CALL endDialog( ::sal_Int32 Result ) throw (::com::sun::star::uno::RuntimeException);
     virtual void SAL_CALL setHelpId( ::sal_Int32 Id ) throw (::com::sun::star::uno::RuntimeException);
@@ -302,10 +334,6 @@ public:
 
     // ::com::sun::star::awt::XControl
     sal_Bool SAL_CALL setModel( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& Model ) throw(::com::sun::star::uno::RuntimeException);
-    void SAL_CALL setDesignMode( sal_Bool bOn ) throw(::com::sun::star::uno::RuntimeException);
-
-    // XChangesListener
-    virtual void SAL_CALL changesOccurred( const ::com::sun::star::util::ChangesEvent& Event ) throw (::com::sun::star::uno::RuntimeException);
 
     // XModifyListener
     virtual void SAL_CALL modified( const ::com::sun::star::lang::EventObject& aEvent ) throw (::com::sun::star::uno::RuntimeException);
@@ -316,11 +344,151 @@ public:
 protected:
     virtual void ImplModelPropertiesChanged( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyChangeEvent >& rEvents ) throw(::com::sun::star::uno::RuntimeException);
     virtual void PrepareWindowDescriptor( ::com::sun::star::awt::WindowDescriptor& rDesc );
+protected:
+};
 
+class UnoMultiPageModel : public UnoControlDialogModel
+{
+public:
+						UnoMultiPageModel();
+						~UnoMultiPageModel();
+						UnoMultiPageModel( const UnoMultiPageModel& rModel );
+
+	UnoControlModel*	Clone() const; 
+
+	DECLIMPL_SERVICEINFO_DERIVED( UnoMultiPageModel, UnoControlDialogModel, szServiceName_UnoMultiPageModel )
+
+	virtual ::rtl::OUString SAL_CALL getServiceName() throw(::com::sun::star::uno::RuntimeException);
+	virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw( ::com::sun::star::uno::RuntimeException);
+    // XNamedContainer
+    void SAL_CALL insertByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement ) throw(::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException);
+
+    // Override the method of parent Class
+    virtual sal_Bool SAL_CALL getGroupControl(  ) throw (::com::sun::star::uno::RuntimeException);
 protected:
-    virtual void removingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
-    virtual void addingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
+    virtual ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
+    ::cppu::IPropertyArrayHelper&		SAL_CALL getInfoHelper();
+
+};
+
+
+
+class UnoMultiPageControl :  public UnoDialogContainerControl
+                            ,public ::com::sun::star::awt::XSimpleTabController
+                            ,public ::com::sun::star::awt::XTabListener
+{
+    TabListenerMultiplexer maTabListeners;
+    void bindPage( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
+public:
+	UnoMultiPageControl();
+	~UnoMultiPageControl();
+	::rtl::OUString		GetComponentServiceName();
+
+	// ::com::sun::star::lang::XServiceInfo
+	DECLIMPL_SERVICEINFO_DERIVED( UnoMultiPageControl, UnoDialogContainerControl, szServiceName_UnoMultiPageControl )
+        ::com::sun::star::uno::Any	SAL_CALL queryInterface( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException) { return UnoDialogContainerControl::queryInterface(rType); }
+        ::com::sun::star::uno::Any	SAL_CALL queryAggregation( const ::com::sun::star::uno::Type & rType ) throw(::com::sun::star::uno::RuntimeException);
+    void						SAL_CALL acquire() throw()	{ OWeakAggObject::acquire(); }
+    void						SAL_CALL release() throw()	{ OWeakAggObject::release(); }
+    // ::com::sun::star::lang::XTypeProvider
+    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type >	SAL_CALL getTypes() throw(::com::sun::star::uno::RuntimeException);
+    ::com::sun::star::uno::Sequence< sal_Int8 >						SAL_CALL getImplementationId() throw(::com::sun::star::uno::RuntimeException);
+    void SAL_CALL createPeer( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XToolkit >& Toolkit, const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindowPeer >& Parent ) throw(::com::sun::star::uno::RuntimeException);
+    // com::sun::star::awt::XSimpleTabController
+    virtual ::sal_Int32 SAL_CALL insertTab() throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL removeTab( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL setTabProps( ::sal_Int32 ID, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue >& Properties ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue > SAL_CALL getTabProps( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL activateTab( ::sal_Int32 ID ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getActiveTabID() throw (::com::sun::star::uno::RuntimeException);
+
+    virtual void SAL_CALL addTabListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabListener >& Listener ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL removeTabListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabListener >& Listener ) throw (::com::sun::star::uno::RuntimeException);
+    // XTabListener
+    virtual void SAL_CALL inserted( ::sal_Int32 ID ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL removed( ::sal_Int32 ID ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL changed( ::sal_Int32 ID, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue >& Properties ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL activated( ::sal_Int32 ID ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL deactivated( ::sal_Int32 ID ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL disposing( const ::com::sun::star::lang::EventObject& evt ) throw (::com::sun::star::uno::RuntimeException);
+    // XComponent
+    void SAL_CALL dispose(  ) throw(::com::sun::star::uno::RuntimeException);
+
+protected:
+    virtual void    impl_createControlPeerIfNecessary(
+        const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl
+    );
+
+};
+
+
+class UnoPageModel : public UnoControlDialogModel
+{
+public:
+						UnoPageModel();
+						~UnoPageModel();
+						UnoPageModel( const UnoPageModel& rModel );
+
+	UnoControlModel*	Clone() const; 
+
+	DECLIMPL_SERVICEINFO_DERIVED( UnoPageModel, UnoControlDialogModel, szServiceName_UnoPageModel )
+
+	virtual ::rtl::OUString SAL_CALL getServiceName() throw(::com::sun::star::uno::RuntimeException);
+	virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw( ::com::sun::star::uno::RuntimeException);
+
+    // Override the method of parent Class
+    virtual sal_Bool SAL_CALL getGroupControl(  ) throw (::com::sun::star::uno::RuntimeException);
+protected:	
+    virtual ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
+    ::cppu::IPropertyArrayHelper&		SAL_CALL getInfoHelper();
+
+};
+
+
+class UnoPageControl :  public UnoDialogContainerControl
+{
+public:
+	UnoPageControl();
+	~UnoPageControl();
+	::rtl::OUString		GetComponentServiceName();
+
+
+	// ::com::sun::star::lang::XServiceInfo
+	DECLIMPL_SERVICEINFO_DERIVED( UnoPageControl, UnoDialogContainerControl, szServiceName_UnoPageControl )
 };
 
+class UnoFrameModel : public UnoControlDialogModel
+{
+public:
+						UnoFrameModel();
+						~UnoFrameModel();
+						UnoFrameModel( const UnoFrameModel& rModel );
+
+	UnoControlModel*	Clone() const; 
+
+	DECLIMPL_SERVICEINFO_DERIVED( UnoFrameModel, UnoControlDialogModel, szServiceName_UnoFrameModel )
+
+	virtual ::rtl::OUString SAL_CALL getServiceName() throw(::com::sun::star::uno::RuntimeException);
+	virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw( ::com::sun::star::uno::RuntimeException);
+
+protected:	
+    virtual ::com::sun::star::uno::Any			ImplGetDefaultValue( sal_uInt16 nPropId ) const;
+    ::cppu::IPropertyArrayHelper&		SAL_CALL getInfoHelper();
+};
+
+class UnoFrameControl :  public UnoDialogContainerControl
+{
+protected:
+        virtual void		ImplSetPosSize( ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& rxCtrl );
+public:
+	UnoFrameControl();
+	~UnoFrameControl();
+	::rtl::OUString		GetComponentServiceName();
+
+	// ::com::sun::star::lang::XServiceInfo
+	DECLIMPL_SERVICEINFO_DERIVED( UnoFrameControl, UnoDialogContainerControl, szServiceName_UnoPageControl )
+};
 
 #endif // TOOLKIT_DIALOG_CONTROL_HXX
diff --git toolkit/inc/toolkit/controls/unocontrolcontainer.hxx toolkit/inc/toolkit/controls/unocontrolcontainer.hxx
index d85d3f0..d59825e 100644
--- toolkit/inc/toolkit/controls/unocontrolcontainer.hxx
+++ toolkit/inc/toolkit/controls/unocontrolcontainer.hxx
@@ -119,6 +119,15 @@ protected:
     virtual void removingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
     virtual void addingControl( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl );
 
+    /** ensures that the given control has a peer, if necessary and possible
+        @param _rxControl
+            an ->XControl which has just been inserted into the container. Must not be <NULL/>.
+        @precond
+            our mutex is locked
+    */
+    virtual void    impl_createControlPeerIfNecessary(
+        const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl
+    );
 private:
     /** adds the control to the container, does necessary notifications, and the like
         @param _rxControl
@@ -149,15 +158,6 @@ private:
         const ::rtl::OUString* _pNameAccessor
     );
 
-    /** ensures that the given control has a peer, if necessary and possible
-        @param _rxControl
-            an ->XControl which has just been inserted into the container. Must not be <NULL/>.
-        @precond
-            our mutex is locked
-    */
-    void    impl_createControlPeerIfNecessary(
-        const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl >& _rxControl
-    );
 };
 
 
diff --git toolkit/inc/toolkit/controls/unocontrols.hxx toolkit/inc/toolkit/controls/unocontrols.hxx
index d6d63f0..73d58ed 100644
--- toolkit/inc/toolkit/controls/unocontrols.hxx
+++ toolkit/inc/toolkit/controls/unocontrols.hxx
@@ -74,6 +74,16 @@
 #define UNO_NAME_GRAPHOBJ_URLPREFIX                             "vnd.sun.star.GraphicObject:"
 #define UNO_NAME_GRAPHOBJ_URLPKGPREFIX                  "vnd.sun.star.Package:"
  
+class ImageHelper
+{
+public:
+    // The routine will always attempt to return a valid XGraphic for the passed _rURL
+    // additionallly xOutGraphicObject will container the associated XGraphicObject ( if url 
+    // is valid for that )
+    // and is set appropriately ( e.g. NULL if non GraphicObject scheme ) or valid object
+    // if the rURL points to a valid object
+    static ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > getGraphicAndGraphicObjectFromURL_nothrow( ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject >& xOutGraphicObject, const ::rtl::OUString& _rURL );
+};
 
 //	----------------------------------------------------
 //	class UnoControlEditModel
@@ -228,6 +238,7 @@ private:
     bool                                                                                    mbAdjustingGraphic;
     
     ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphicObject > mxGrfObj;
+    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL );
 
 protected:
     GraphicControlModel() : mbAdjustingImagePosition( false ), mbAdjustingGraphic( false ) { }
@@ -672,44 +683,6 @@ public:
 
 };
 
-class UnoMultiPageModel : public UnoControlModel
-{
-protected:
-	::com::sun::star::uno::Any 		ImplGetDefaultValue( sal_uInt16 nPropId ) const;
-	::cppu::IPropertyArrayHelper& 	SAL_CALL getInfoHelper();
-
-public:
-						UnoMultiPageModel();
-						UnoMultiPageModel( const UnoMultiPageModel& rModel ) : UnoControlModel( rModel ) {;}
-
-	UnoControlModel*	Clone() const { return new UnoMultiPageModel( *this ); }
-
-	// ::com::sun::star::io::XPersistObject
-    ::rtl::OUString SAL_CALL getServiceName() throw(::com::sun::star::uno::RuntimeException);
-
-	// ::com::sun::star::beans::XMultiPropertySet
-    ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo > SAL_CALL getPropertySetInfo(  ) throw(::com::sun::star::uno::RuntimeException);
-
-	// ::com::sun::star::lang::XServiceInfo
-	DECLIMPL_SERVICEINFO_DERIVED( UnoMultiPageModel, UnoControlModel, szServiceName_UnoMultiPageModel )
-
-};
-//	----------------------------------------------------
-//	class UnoGroupBoxControl
-//	----------------------------------------------------
-class UnoMultiPageControl :	public UnoControlBase
-{
-public:
-						UnoMultiPageControl();
-	::rtl::OUString		GetComponentServiceName();
-
-    sal_Bool SAL_CALL isTransparent(  ) throw(::com::sun::star::uno::RuntimeException);
-
-	// ::com::sun::star::lang::XServiceInfo
-	DECLIMPL_SERVICEINFO_DERIVED( UnoMultiPageControl, UnoControlBase, szServiceName_UnoMultiPageControl )
-
-};
-
 //  ----------------------------------------------------
 //  class UnoFixedTextControl
 //  ----------------------------------------------------
diff --git toolkit/inc/toolkit/helper/listenermultiplexer.hxx toolkit/inc/toolkit/helper/listenermultiplexer.hxx
index eae4c52..75bbad5 100644
--- toolkit/inc/toolkit/helper/listenermultiplexer.hxx
+++ toolkit/inc/toolkit/helper/listenermultiplexer.hxx
@@ -41,6 +41,7 @@
 #include <com/sun/star/awt/XTextListener.hpp>
 #include <com/sun/star/awt/XActionListener.hpp>
 #include <com/sun/star/awt/XItemListener.hpp>
+#include <com/sun/star/awt/XTabListener.hpp>
 #include <com/sun/star/container/XContainerListener.hpp>
 #include <com/sun/star/awt/XSpinListener.hpp>
 #include <com/sun/star/awt/XAdjustmentListener.hpp>
@@ -183,6 +184,17 @@ DECL_LISTENERMULTIPLEXER_START_DLLPUB( ItemListenerMultiplexer, ::com::sun::star
 DECL_LISTENERMULTIPLEXER_END
 
 //	----------------------------------------------------
+//	class TabListenerMultiplexer
+//	----------------------------------------------------
+DECL_LISTENERMULTIPLEXER_START_DLLPUB( TabListenerMultiplexer, ::com::sun::star::awt::XTabListener )
+    void SAL_CALL inserted( ::sal_Int32 ID ) throw (::com::sun::star::uno::RuntimeException);
+    void SAL_CALL removed( ::sal_Int32 ID ) throw (::com::sun::star::uno::RuntimeException);
+    void SAL_CALL changed( ::sal_Int32 ID, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue >& Properties ) throw (::com::sun::star::uno::RuntimeException);
+    void SAL_CALL activated( ::sal_Int32 ID ) throw (::com::sun::star::uno::RuntimeException);
+    void SAL_CALL deactivated( ::sal_Int32 ID ) throw (::com::sun::star::uno::RuntimeException);
+DECL_LISTENERMULTIPLEXER_END
+
+//	----------------------------------------------------
 //	class ContainerListenerMultiplexer
 //	----------------------------------------------------
 DECL_LISTENERMULTIPLEXER_START( ContainerListenerMultiplexer, ::com::sun::star::container::XContainerListener )
diff --git toolkit/inc/toolkit/helper/macros.hxx toolkit/inc/toolkit/helper/macros.hxx
index 6ad74d0..f2a1503 100644
--- toolkit/inc/toolkit/helper/macros.hxx
+++ toolkit/inc/toolkit/helper/macros.hxx
@@ -189,6 +189,57 @@ void ClassName::disposing( const ::com::sun::star::lang::EventObject& ) throw(::
     #define DISPLAY_EXCEPTION( ClassName, MethodName, e )
 #endif
 
+#define IMPL_TABLISTENERMULTIPLEXER_LISTENERMETHOD_BODY_2PARAM( ClassName, InterfaceName, MethodName, ParamType1, ParamType2 ) \
+{ \
+    ParamType1 aMulti( evt ); \
+    ParamType2 aMulti2( evt2 ); \
+    ::cppu::OInterfaceIteratorHelper aIt( *this ); \
+    while( aIt.hasMoreElements() ) \
+    { \
+        ::com::sun::star::uno::Reference< InterfaceName > xListener( \
+            static_cast< InterfaceName* >( aIt.next() ) ); \
+        try \
+        { \
+            xListener->MethodName( aMulti, aMulti2 ); \
+        } \
+        catch( ::com::sun::star::lang::DisposedException e ) \
+        { \
+            OSL_ENSURE( e.Context.is(), "caught DisposedException with empty Context field" ); \
+            if ( e.Context == xListener || !e.Context.is() ) \
+                aIt.remove(); \
+        } \
+        catch( ::com::sun::star::uno::RuntimeException e ) \
+        { \
+            DISPLAY_EXCEPTION( ClassName, MethodName, e ) \
+        } \
+    } \
+}
+
+#define IMPL_TABLISTENERMULTIPLEXER_LISTENERMETHOD_BODY_1PARAM( ClassName, InterfaceName, MethodName, ParamType1 ) \
+{ \
+    ParamType1 aMulti( evt ); \
+    ::cppu::OInterfaceIteratorHelper aIt( *this ); \
+    while( aIt.hasMoreElements() ) \
+    { \
+        ::com::sun::star::uno::Reference< InterfaceName > xListener( \
+            static_cast< InterfaceName* >( aIt.next() ) ); \
+        try \
+        { \
+            xListener->MethodName( aMulti ); \
+        } \
+        catch( ::com::sun::star::lang::DisposedException e ) \
+        { \
+            OSL_ENSURE( e.Context.is(), "caught DisposedException with empty Context field" ); \
+            if ( e.Context == xListener || !e.Context.is() ) \
+                aIt.remove(); \
+        } \
+        catch( ::com::sun::star::uno::RuntimeException e ) \
+        { \
+            DISPLAY_EXCEPTION( ClassName, MethodName, e ) \
+        } \
+    } \
+}
+
 #define IMPL_LISTENERMULTIPLEXER_LISTENERMETHOD_BODY( ClassName, InterfaceName, MethodName, EventType ) \
 { \
     EventType aMulti( evt ); \
diff --git toolkit/inc/toolkit/helper/property.hxx toolkit/inc/toolkit/helper/property.hxx
index a7c129d..3d787ff 100644
--- toolkit/inc/toolkit/helper/property.hxx
+++ toolkit/inc/toolkit/helper/property.hxx
@@ -204,8 +204,8 @@ namespace rtl {
 #define BASEPROPERTY_MULTISELECTION_SIMPLEMODE      152
 #define BASEPROPERTY_ITEM_SEPARATOR_POS             153
 #define BASEPROPERTY_GROUPNAME                      154  // ::rtl::OUString
-#define BASEPROPERTY_VBAFORM                        155  // sal_Bool
-
+#define BASEPROPERTY_MULTIPAGEVALUE                 155  // sal_Int32
+#define BASEPROPERTY_USERFORMCONTAINEES             156  // css::container::XNameContainer
 
 // Keine gebundenen Properties, werden immer aus der Property BASEPROPERTY_FONTDESCRIPTOR entnommen.
 #define BASEPROPERTY_FONTDESCRIPTORPART_START			1000
diff --git toolkit/inc/toolkit/helper/servicenames.hxx toolkit/inc/toolkit/helper/servicenames.hxx
index b0abd38..c48a160 100644
--- toolkit/inc/toolkit/helper/servicenames.hxx
+++ toolkit/inc/toolkit/helper/servicenames.hxx
@@ -40,6 +40,12 @@ extern const sal_Char __FAR_DATA szServiceName_UnoControlContainer[], szServiceN
 extern const sal_Char __FAR_DATA szServiceName_UnoMultiPageControl[], szServiceName2_UnoMultiPageControl[];
 extern const sal_Char __FAR_DATA szServiceName_UnoMultiPageModel[], szServiceName2_UnoMultiPageModel[];
 extern const sal_Char __FAR_DATA szServiceName_UnoControlContainerModel[], szServiceName2_UnoControlContainerModel[];
+extern const sal_Char __FAR_DATA szServiceName_UnoMultiPageControl[], szServiceName2_UnoMultiPageControl[];
+extern const sal_Char __FAR_DATA szServiceName_UnoMultiPageModel[], szServiceName2_UnoMultiPageModel[];
+extern const sal_Char __FAR_DATA szServiceName_UnoPageControl[], szServiceName2_UnoPageControl[];
+extern const sal_Char __FAR_DATA szServiceName_UnoPageModel[], szServiceName2_UnoPageModel[];
+extern const sal_Char __FAR_DATA szServiceName_UnoFrameControl[], szServiceName2_UnoFrameControl[];
+extern const sal_Char __FAR_DATA szServiceName_UnoFrameModel[], szServiceName2_UnoFrameModel[];
 extern const sal_Char __FAR_DATA szServiceName_TabController[], szServiceName2_TabController[];
 extern const sal_Char __FAR_DATA szServiceName_TabControllerModel[], szServiceName2_TabControllerModel[];
 extern const sal_Char __FAR_DATA szServiceName_UnoControlDialog[], szServiceName2_UnoControlDialog[];
diff --git toolkit/source/awt/vclxtabcontrol.cxx toolkit/source/awt/vclxtabcontrol.cxx
index 1aceb60..d163b4f 100644
--- toolkit/source/awt/vclxtabcontrol.cxx
+++ toolkit/source/awt/vclxtabcontrol.cxx
@@ -25,7 +25,7 @@
  *
  ************************************************************************/
 
-#include "vclxtabcontrol.hxx"
+#include <vclxtabcontrol.hxx>
 
 #include <com/sun/star/awt/PosSize.hpp>
 #include <sal/macros.h>
diff --git toolkit/source/awt/vclxtabcontrol.hxx toolkit/source/awt/vclxtabcontrol.hxx
index 36e0d9f..34fc10c 100644
--- toolkit/source/awt/vclxtabcontrol.hxx
+++ toolkit/source/awt/vclxtabcontrol.hxx
@@ -122,6 +122,8 @@ public:
         ChildProps( VCLXTabControl::ChildData *pData );
     };
 
+    inline TabControl *getTabControl() const throw (::com::sun::star::uno::RuntimeException);
+
 protected:
     ChildData *createChild( css::uno::Reference< css::awt::XLayoutConstrains > const& xChild );
     ChildProps *createChildProps( Box_Base::ChildData* pData );
@@ -132,7 +134,6 @@ protected:
     std::list< ::com::sun::star::uno::Reference
                < ::com::sun::star::awt::XTabListener > > mxTabListeners;
 
-    inline TabControl *getTabControl() const throw (::com::sun::star::uno::RuntimeException);
 
 private:
     VCLXTabControl( const VCLXTabControl& );            // never implemented
diff --git toolkit/source/awt/vclxtabpage.cxx toolkit/source/awt/vclxtabpage.cxx
index fae1c35..ec95176 100644
--- toolkit/source/awt/vclxtabpage.cxx
+++ toolkit/source/awt/vclxtabpage.cxx
@@ -25,7 +25,8 @@
  *
  ************************************************************************/
 
-#include "vclxtabpage.hxx"
+#include <vclxtabpage.hxx>
+
 #include "forward.hxx"
 
 #include <com/sun/star/awt/PosSize.hpp>
diff --git toolkit/source/awt/vclxtoolkit.cxx toolkit/source/awt/vclxtoolkit.cxx
index c8ee016..73471b4 100644
--- toolkit/source/awt/vclxtoolkit.cxx
+++ toolkit/source/awt/vclxtoolkit.cxx
@@ -119,6 +119,7 @@
 
 #include <tools/debug.hxx>
 #include <comphelper/processfactory.hxx>
+#include "awt/vclxtabcontrol.hxx"
 
 namespace css = ::com::sun::star;
 
@@ -286,6 +287,7 @@ static ComponentInfo __FAR_DATA aComponentInfos [] =
     { "floatingwindow",		WINDOW_FLOATINGWINDOW },
     { "framewindow",		VCLWINDOW_FRAMEWINDOW },
     { "groupbox",			WINDOW_GROUPBOX },
+	{ "frame",			WINDOW_GROUPBOX },
     { "helpbutton",			WINDOW_HELPBUTTON },
     { "imagebutton",		WINDOW_IMAGEBUTTON },
     { "imageradiobutton",	WINDOW_IMAGERADIOBUTTON },
@@ -626,7 +628,14 @@ Window*	VCLXToolkit::ImplCreateWindow( VCLXWindow** ppNewComp,
 
     Window* pNewWindow = NULL;
     sal_uInt16 nType = ImplGetComponentType( aServiceName );
-
+    bool bFrameControl = false;
+    if ( aServiceName == String( RTL_CONSTASCII_USTRINGPARAM("frame") ) )
+        bFrameControl = true;
+    if ( aServiceName == String( RTL_CONSTASCII_USTRINGPARAM("tabcontrolnotabs") ) )
+    {
+        nWinBits |= WB_NOBORDER;
+        nType = ImplGetComponentType( String( RTL_CONSTASCII_USTRINGPARAM("tabcontrol") ) );
+    }
     if ( !pParent )
     {
         // Wenn die Component einen Parent braucht, dann NULL zurueckgeben,
@@ -723,7 +732,17 @@ Window*	VCLXToolkit::ImplCreateWindow( VCLXWindow** ppNewComp,
                 pNewWindow = new FloatingWindow( pParent, nWinBits );
             break;
             case WINDOW_GROUPBOX:
+                        {
                 pNewWindow = new GroupBox( pParent, nWinBits );
+                                if ( bFrameControl )
+                                {
+                                    GroupBox* pGroupBox =  static_cast< GroupBox* >( pNewWindow );
+                                    *ppNewComp = new VCLXFrame;
+                                    // Frame control needs to recieve
+                                    // Mouse events
+                                    pGroupBox->SetMouseTransparent( FALSE ); 
+                                }
+                        }
             break;
             case WINDOW_HELPBUTTON:
                 pNewWindow = new HelpButton( pParent, nWinBits );
@@ -863,6 +882,7 @@ Window*	VCLXToolkit::ImplCreateWindow( VCLXWindow** ppNewComp,
             break;
             case WINDOW_TABCONTROL:
                 pNewWindow = new TabControl( pParent, nWinBits );
+                *ppNewComp = new VCLXMultiPage;
             break;
             case WINDOW_TABDIALOG:
                 pNewWindow = new TabDialog( pParent, nWinBits );
diff --git toolkit/source/awt/vclxwindows.cxx toolkit/source/awt/vclxwindows.cxx
index 7a5b26b..7ffc6cc 100644
--- toolkit/source/awt/vclxwindows.cxx
+++ toolkit/source/awt/vclxwindows.cxx
@@ -2322,6 +2322,7 @@ void VCLXDialog::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds )
 
 VCLXDialog::VCLXDialog()
 {
+    OSL_TRACE("XDialog created");
 }
 
 VCLXDialog::~VCLXDialog()
@@ -2527,6 +2528,292 @@ throw(::com::sun::star::uno::RuntimeException)
     }
 }
 
+
+//	----------------------------------------------------
+//	class VCLXTabPage
+//	----------------------------------------------------
+VCLXMultiPage::VCLXMultiPage() : maTabListeners( *this ), mTabId( 1 )
+{
+    OSL_TRACE("VCLXMultiPage::VCLXMultiPage()" );
+}
+
+void VCLXMultiPage::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds )
+{
+    PushPropertyIds( rIds,
+                     BASEPROPERTY_BACKGROUNDCOLOR,
+                     BASEPROPERTY_DEFAULTCONTROL,
+                     BASEPROPERTY_ENABLED,
+                     BASEPROPERTY_MULTIPAGEVALUE,
+                     BASEPROPERTY_ENABLEVISIBLE,
+                     BASEPROPERTY_FONTDESCRIPTOR,
+                     BASEPROPERTY_GRAPHIC,
+                     BASEPROPERTY_HELPTEXT,
+                     BASEPROPERTY_HELPURL,
+                     BASEPROPERTY_IMAGEALIGN,
+                     BASEPROPERTY_IMAGEPOSITION,
+                     BASEPROPERTY_IMAGEURL,
+                     BASEPROPERTY_PRINTABLE,
+                     BASEPROPERTY_TABSTOP,
+                     BASEPROPERTY_FOCUSONCLICK,
+                     0);
+    VCLXContainer::ImplGetPropertyIds( rIds );
+}
+
+VCLXMultiPage::~VCLXMultiPage()
+{
+}
+void SAL_CALL VCLXMultiPage::dispose() throw(::com::sun::star::uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+
+    ::com::sun::star::lang::EventObject aObj;
+    aObj.Source = (::cppu::OWeakObject*)this;
+    maTabListeners.disposeAndClear( aObj );
+    VCLXContainer::dispose();
+}
+::com::sun::star::uno::Any SAL_CALL VCLXMultiPage::queryInterface(const ::com::sun::star::uno::Type & rType )
+throw(::com::sun::star::uno::RuntimeException)
+{
+    uno::Any aRet = ::cppu::queryInterface( rType, static_cast< awt::XSimpleTabController*>( this ) );
+
+    return ( aRet.hasValue() ? aRet : VCLXContainer::queryInterface( rType ) );
+}
+
+// ::com::sun::star::lang::XTypeProvider
+IMPL_XTYPEPROVIDER_START( VCLXMultiPage )
+    VCLXContainer::getTypes()
+IMPL_XTYPEPROVIDER_END
+
+// ::com::sun::star::awt::XView
+void SAL_CALL VCLXMultiPage::draw( sal_Int32 nX, sal_Int32 nY )
+throw(::com::sun::star::uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    Window* pWindow = GetWindow();
+
+    if ( pWindow )
+    {
+        OutputDevice* pDev = VCLUnoHelper::GetOutputDevice( getGraphics() );
+        if ( !pDev )
+            pDev = pWindow->GetParent();
+
+        Size aSize = pDev->PixelToLogic( pWindow->GetSizePixel() );
+        Point aPos = pDev->PixelToLogic( Point( nX, nY ) );
+
+        pWindow->Draw( pDev, aPos, aSize, WINDOW_DRAW_NOCONTROLS );
+    }
+}
+
+// ::com::sun::star::awt::XDevice,
+::com::sun::star::awt::DeviceInfo SAL_CALL VCLXMultiPage::getInfo()
+throw(::com::sun::star::uno::RuntimeException)
+{
+    ::com::sun::star::awt::DeviceInfo aInfo = VCLXDevice::getInfo();
+    return aInfo;
+}
+
+uno::Any SAL_CALL VCLXMultiPage::getProperty( const ::rtl::OUString& PropertyName ) throw(::com::sun::star::uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    OSL_TRACE(" **** VCLXMultiPage::getProperty( %s )", 
+        rtl::OUStringToOString( PropertyName,
+        RTL_TEXTENCODING_UTF8 ).getStr() );
+    ::com::sun::star::uno::Any aProp;
+    sal_uInt16 nPropType = GetPropertyId( PropertyName );
+    switch ( nPropType )
+    {
+
+        case BASEPROPERTY_MULTIPAGEVALUE:
+        {
+            aProp <<= getActiveTabID();
+        }
+        break;
+        default:    
+            aProp <<= VCLXContainer::getProperty( PropertyName );
+    }
+    return aProp;
+}
+
+void SAL_CALL VCLXMultiPage::setProperty(
+    const ::rtl::OUString& PropertyName,
+    const ::com::sun::star::uno::Any& Value )
+throw(::com::sun::star::uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    OSL_TRACE(" **** VCLXMultiPage::setProperty( %s )", rtl::OUStringToOString( PropertyName, RTL_TEXTENCODING_UTF8 ).getStr() );
+
+    TabControl* pTabControl = (TabControl*)GetWindow();
+    if ( pTabControl )
+    {
+        sal_Bool bVoid = Value.getValueType().getTypeClass() == ::com::sun::star::uno::TypeClass_VOID;
+
+        sal_uInt16 nPropType = GetPropertyId( PropertyName );
+        switch ( nPropType )
+        {
+            case BASEPROPERTY_MULTIPAGEVALUE:
+            {
+                OSL_TRACE("***MULTIPAGE VALUE");
+                sal_Int32 nId(0);
+                Value >>= nId;
+                // when the multipage is created we attempt to set the activepage
+                // but no pages created
+                if ( nId && nId <= getWindows().getLength() )
+                    activateTab( nId );
+            }
+            case BASEPROPERTY_GRAPHIC:
+            {
+                Reference< XGraphic > xGraphic;
+                if (( Value >>= xGraphic ) && xGraphic.is() )
+                {
+                    Image aImage( xGraphic );
+
+                    Wallpaper aWallpaper( aImage.GetBitmapEx());
+                    aWallpaper.SetStyle( WALLPAPER_SCALE );
+                    pTabControl->SetBackground( aWallpaper );
+                }
+                else if ( bVoid || !xGraphic.is() )
+                {
+                    Color aColor = pTabControl->GetControlBackground().GetColor();
+                    if ( aColor == COL_AUTO )
+                        aColor = pTabControl->GetSettings().GetStyleSettings().GetDialogColor();
+
+                    Wallpaper aWallpaper( aColor );
+                    pTabControl->SetBackground( aWallpaper );
+                }
+            }
+            break;
+
+            default:
+            {
+                VCLXContainer::setProperty( PropertyName, Value );
+            }
+        }
+    }
+}
+
+TabControl *VCLXMultiPage::getTabControl() const throw (uno::RuntimeException)
+{
+    TabControl *pTabControl = dynamic_cast< TabControl* >( GetWindow() );
+    if ( pTabControl )
+        return pTabControl;
+    throw uno::RuntimeException();
+}
+sal_Int32 SAL_CALL VCLXMultiPage::insertTab() throw (uno::RuntimeException)
+{
+    TabControl *pTabControl = getTabControl();
+    TabPage* pTab = new TabPage( pTabControl );
+    rtl::OUString title (RTL_CONSTASCII_USTRINGPARAM( "" ) );
+    return static_cast< sal_Int32 >( insertTab( pTab, title ) );
+}
+
+USHORT VCLXMultiPage::insertTab( TabPage* pPage, rtl::OUString& sTitle )
+{
+    TabControl *pTabControl = getTabControl();
+    USHORT id = sal::static_int_cast< USHORT >( mTabId++ );
+    pTabControl->InsertPage( id, sTitle.getStr(), TAB_APPEND );
+    pTabControl->SetTabPage( id, pPage );
+    return id;
+}
+
+void SAL_CALL VCLXMultiPage::removeTab( sal_Int32 ID ) throw (uno::RuntimeException, lang::IndexOutOfBoundsException)
+{
+    TabControl *pTabControl = getTabControl();
+    if ( pTabControl->GetTabPage( sal::static_int_cast< USHORT >( ID ) ) == NULL )
+        throw lang::IndexOutOfBoundsException();
+    pTabControl->RemovePage( sal::static_int_cast< USHORT >( ID ) );
+}
+
+void SAL_CALL VCLXMultiPage::activateTab( sal_Int32 ID ) throw (uno::RuntimeException, lang::IndexOutOfBoundsException)
+{
+    TabControl *pTabControl = getTabControl();
+    OSL_TRACE("Attempting to activate tab %d, active tab is %d, numtabs is %d", ID, getActiveTabID(), getWindows().getLength() );
+    if ( pTabControl->GetTabPage( sal::static_int_cast< USHORT >( ID ) ) == NULL )
+        throw lang::IndexOutOfBoundsException();
+    pTabControl->SelectTabPage( sal::static_int_cast< USHORT >( ID ) );
+}
+
+sal_Int32 SAL_CALL VCLXMultiPage::getActiveTabID() throw (uno::RuntimeException)
+{
+    return getTabControl()->GetCurPageId( );
+}
+
+void SAL_CALL VCLXMultiPage::addTabListener( const uno::Reference< awt::XTabListener >& xListener ) throw (uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    maTabListeners.addInterface( xListener );
+}
+
+void SAL_CALL VCLXMultiPage::removeTabListener( const uno::Reference< awt::XTabListener >& xListener ) throw (uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    maTabListeners.addInterface( xListener );
+}
+
+void SAL_CALL VCLXMultiPage::setTabProps( sal_Int32 ID, const uno::Sequence< beans::NamedValue >& Properties ) throw (uno::RuntimeException, lang::IndexOutOfBoundsException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    TabControl *pTabControl = getTabControl();
+    if ( pTabControl->GetTabPage( sal::static_int_cast< USHORT >( ID ) ) == NULL )
+        throw lang::IndexOutOfBoundsException();
+
+    for ( int i = 0; i < Properties.getLength(); i++ )
+    {
+        const rtl::OUString &name = Properties[i].Name;
+        const uno::Any &value = Properties[i].Value;
+
+        if ( name  == rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Title" ) ) )
+        {
+            rtl::OUString title = value.get<rtl::OUString>();
+            pTabControl->SetPageText( sal::static_int_cast< USHORT >( ID ), title.getStr() );
+        }
+    }
+}
+
+uno::Sequence< beans::NamedValue > SAL_CALL VCLXMultiPage::getTabProps( sal_Int32 ID )
+    throw (lang::IndexOutOfBoundsException, uno::RuntimeException)
+{
+    ::vos::OGuard aGuard( GetMutex() );
+    TabControl *pTabControl = getTabControl();
+    if ( pTabControl->GetTabPage( sal::static_int_cast< USHORT >( ID ) ) == NULL )
+        throw lang::IndexOutOfBoundsException();
+
+#define ADD_PROP( seq, i, name, val ) {                                \
+        beans::NamedValue value;                                                  \
+        value.Name = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( name ) ); \
+        value.Value = uno::makeAny( val );                                      \
+        seq[i] = value;                                                    \
+    }
+
+    uno::Sequence< beans::NamedValue > props( 2 );
+    ADD_PROP( props, 0, "Title", rtl::OUString( pTabControl->GetPageText( sal::static_int_cast< USHORT >( ID ) ) ) );
+    ADD_PROP( props, 1, "Position", pTabControl->GetPagePos( sal::static_int_cast< USHORT >( ID ) ) );
+#undef ADD_PROP
+    return props;
+}
+void VCLXMultiPage::ProcessWindowEvent( const VclWindowEvent& rVclWindowEvent )
+{
+    ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow > xKeepAlive( this );
+    switch ( rVclWindowEvent.GetId() )
+    {
+        case VCLEVENT_TABPAGE_DEACTIVATE:
+        {
+            ULONG nPageID = (ULONG)( rVclWindowEvent.GetData() );
+            maTabListeners.deactivated( nPageID );
+            break;
+            
+        }
+        case VCLEVENT_TABPAGE_ACTIVATE:
+        {
+            ULONG nPageID = (ULONG)( rVclWindowEvent.GetData() );
+            maTabListeners.activated( nPageID );
+            break;
+        }
+        default: 
+            VCLXContainer::ProcessWindowEvent( rVclWindowEvent );
+            break;
+    };    
+}
+
 //	----------------------------------------------------
 //	class VCLXTabPage
 //	----------------------------------------------------
@@ -2534,6 +2821,27 @@ VCLXTabPage::VCLXTabPage()
 {
 }
 
+void VCLXTabPage::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds )
+{
+    PushPropertyIds( rIds,
+                     BASEPROPERTY_BACKGROUNDCOLOR,
+                     BASEPROPERTY_DEFAULTCONTROL,
+                     BASEPROPERTY_ENABLED,
+                     BASEPROPERTY_ENABLEVISIBLE,
+                     BASEPROPERTY_FONTDESCRIPTOR,
+                     BASEPROPERTY_GRAPHIC,
+                     BASEPROPERTY_HELPTEXT,
+                     BASEPROPERTY_HELPURL,
+                     BASEPROPERTY_IMAGEALIGN,
+                     BASEPROPERTY_IMAGEPOSITION,
+                     BASEPROPERTY_IMAGEURL,
+                     BASEPROPERTY_PRINTABLE,
+                     BASEPROPERTY_TABSTOP,
+                     BASEPROPERTY_FOCUSONCLICK,
+                     0);
+    VCLXContainer::ImplGetPropertyIds( rIds );
+}
+
 VCLXTabPage::~VCLXTabPage()
 {
 }
@@ -2623,6 +2931,14 @@ throw(::com::sun::star::uno::RuntimeException)
     }
 }
 
+TabPage *VCLXTabPage::getTabPage() const throw (uno::RuntimeException)
+{
+    TabPage *pTabPage = dynamic_cast< TabPage* >( GetWindow() );
+    if ( pTabPage )
+        return pTabPage;
+    throw uno::RuntimeException();
+}
+
 //	----------------------------------------------------
 //  class VCLXFixedHyperlink
 //	----------------------------------------------------
@@ -6215,4 +6531,98 @@ VCLXToolBox::~VCLXToolBox()
 {
     return getAccessibleFactory().createAccessibleContext( this );
 }
+//	----------------------------------------------------
+//	class VCLXFrame
+//	----------------------------------------------------
+VCLXFrame::VCLXFrame()
+{
+}
+
+void VCLXFrame::ImplGetPropertyIds( std::list< sal_uInt16 > &rIds )
+{
+    PushPropertyIds( rIds,
+                     BASEPROPERTY_BACKGROUNDCOLOR,
+                     BASEPROPERTY_DEFAULTCONTROL,
+                     BASEPROPERTY_ENABLED,
+                     BASEPROPERTY_ENABLEVISIBLE,
+                     BASEPROPERTY_FONTDESCRIPTOR,
+                     BASEPROPERTY_GRAPHIC,
+                     BASEPROPERTY_HELPTEXT,
+                     BASEPROPERTY_HELPURL,
+                     BASEPROPERTY_PRINTABLE,
+                     BASEPROPERTY_LABEL,
+                     0);
+    VCLXContainer::ImplGetPropertyIds( rIds );
+}
+
+VCLXFrame::~VCLXFrame()
+{
+}
+
+::com::sun::star::uno::Any SAL_CALL VCLXFrame::queryInterface(const ::com::sun::star::uno::Type & rType )
+throw(::com::sun::star::uno::RuntimeException)
+{
+	return VCLXContainer::queryInterface( rType );
+}
+
+// ::com::sun::star::lang::XTypeProvider
+IMPL_XTYPEPROVIDER_START( VCLXFrame )
+	VCLXContainer::getTypes()
+IMPL_XTYPEPROVIDER_END
+
+// ::com::sun::star::awt::XView
+void SAL_CALL VCLXFrame::draw( sal_Int32 nX, sal_Int32 nY )
+throw(::com::sun::star::uno::RuntimeException)
+{
+	::vos::OGuard aGuard( GetMutex() );
+	Window* pWindow = GetWindow();
+
+	if ( pWindow )
+	{
+		OutputDevice* pDev = VCLUnoHelper::GetOutputDevice( getGraphics() );
+		if ( !pDev )
+			pDev = pWindow->GetParent();
+
+		Size aSize = pDev->PixelToLogic( pWindow->GetSizePixel() );
+		Point aPos = pDev->PixelToLogic( Point( nX, nY ) );
+
+		pWindow->Draw( pDev, aPos, aSize, WINDOW_DRAW_NOCONTROLS );
+    }
+}
+
+// ::com::sun::star::awt::XDevice,
+::com::sun::star::awt::DeviceInfo SAL_CALL VCLXFrame::getInfo()
+throw(::com::sun::star::uno::RuntimeException)
+{
+	::com::sun::star::awt::DeviceInfo aInfo = VCLXDevice::getInfo();
+	return aInfo;
+}
+
+void SAL_CALL VCLXFrame::setProperty(
+    const ::rtl::OUString& PropertyName,
+    const ::com::sun::star::uno::Any& Value )
+throw(::com::sun::star::uno::RuntimeException)
+{
+	::vos::OGuard aGuard( GetMutex() );
+
+#if OSL_DEBUG_LEVEL > 0
+	sal_Bool bVoid = Value.getValueType().getTypeClass() == ::com::sun::star::uno::TypeClass_VOID;
+    (void)bVoid;
+#endif
+
+	sal_uInt16 nPropType = GetPropertyId( PropertyName );
+	switch ( nPropType )
+	{
+            default:
+			{
+				VCLXContainer::setProperty( PropertyName, Value );
+			}
+        }
+}
+
+void VCLXFrame::ProcessWindowEvent( const VclWindowEvent& rVclWindowEvent )
+{
+    ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindow > xKeepAlive( this );
+    VCLXContainer::ProcessWindowEvent( rVclWindowEvent );
+}
 
diff --git toolkit/source/controls/dialogcontrol.cxx toolkit/source/controls/dialogcontrol.cxx
index df3214d..10823ad 100644
--- toolkit/source/controls/dialogcontrol.cxx
+++ toolkit/source/controls/dialogcontrol.cxx
@@ -69,10 +69,16 @@
 #include "grid/gridcontrol.hxx"
 
 #include <map>
+#include <hash_map>
 #include <algorithm>
 #include <functional>
 #include "tools/urlobj.hxx"
 #include "osl/file.hxx"
+#include <com/sun/star/awt/XSimpleTabController.hpp>
+#include <vcl/tabctrl.hxx>
+#include <vcl/tabpage.hxx>
+#include <vcl/button.hxx>
+#include <toolkit/awt/vclxwindows.hxx>
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
@@ -92,8 +98,6 @@ using namespace toolkit;
 //HELPER
 ::rtl::OUString getPhysicalLocation( const ::com::sun::star::uno::Any& rbase, const ::com::sun::star::uno::Any& rUrl );
 
-uno::Reference< graphic::XGraphic > getGraphicFromURL_nothrow( uno::Reference< graphic::XGraphicObject >& rxGrfObj, const ::rtl::OUString& _rURL );
-
 struct LanguageDependentProp
 {
     const char* pPropName;
@@ -120,32 +124,6 @@ namespace
         return s_aLanguageDependentProperties;
     }
  
-    static uno::Reference< graphic::XGraphic > lcl_getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL )
-    {
-        uno::Reference< graphic::XGraphic > xGraphic;
-        if ( !_rURL.getLength() )
-            return xGraphic;
-
-        try
-        {
-            ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
-            uno::Reference< graphic::XGraphicProvider > xProvider;
-            if ( aContext.createComponent( "com.sun.star.graphic.GraphicProvider", xProvider ) )
-            {
-                uno::Sequence< beans::PropertyValue > aMediaProperties(1);
-                aMediaProperties[0].Name = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "URL" ) );
-                aMediaProperties[0].Value <<= _rURL;
-                xGraphic = xProvider->queryGraphic( aMediaProperties );
-            }
-        }
-        catch( const Exception& )
-        {
-            DBG_UNHANDLED_EXCEPTION();
-        }
-
-        return xGraphic;
-    }
-
     static ::rtl::OUString lcl_GetStringProperty( const ::rtl::OUString& sProperty, const Reference< XPropertySet >& xSet )
     {
         ::rtl::OUString sValue;
@@ -263,14 +241,91 @@ static const ::rtl::OUString& getStepPropertyName( )
     return s_sStepProperty;
 }
 
+// we probably will need both a hash of control models and hash of controls
+// => use some template magic 
+
+typedef ::cppu::WeakImplHelper1< container::XNameContainer > SimpleNameContainer_BASE;
+
+template< typename T > 
+class SimpleNamedThingContainer : public SimpleNameContainer_BASE
+{
+    typedef std::hash_map< rtl::OUString, Reference< T >, ::rtl::OUStringHash,
+       ::std::equal_to< ::rtl::OUString > > NamedThingsHash;
+    NamedThingsHash things;
+    ::osl::Mutex m_aMutex;
+public:
+    // ::com::sun::star::container::XNameContainer, XNameReplace, XNameAccess
+    virtual void SAL_CALL replaceByName( const ::rtl::OUString& aName, const Any& aElement ) throw(IllegalArgumentException, NoSuchElementException, WrappedTargetException, RuntimeException)
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        if ( !hasByName( aName ) )
+            throw NoSuchElementException(); 
+        Reference< T > xElement;
+        if ( ! ( aElement >>= xElement ) )
+            throw IllegalArgumentException(); 
+        things[ aName ] = xElement;
+    }
+    virtual Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw(NoSuchElementException, WrappedTargetException, RuntimeException)
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        if ( !hasByName( aName ) )
+            throw NoSuchElementException(); 
+        return uno::makeAny( things[ aName ] );
+    }
+    virtual Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw(RuntimeException)
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        Sequence< ::rtl::OUString > aResult( things.size() );
+        typename NamedThingsHash::iterator it = things.begin();
+        typename NamedThingsHash::iterator it_end = things.end();
+        rtl::OUString* pName = aResult.getArray();
+        for (; it != it_end; ++it, ++pName )
+            *pName = it->first; 
+        return aResult; 
+    }
+    virtual sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw(RuntimeException)
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        return ( things.find( aName ) != things.end() );
+    }
+    virtual void SAL_CALL insertByName( const ::rtl::OUString& aName, const Any& aElement ) throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        if ( hasByName( aName ) )
+            throw ElementExistException();
+        Reference< T > xElement;
+        if ( ! ( aElement >>= xElement ) )
+            throw IllegalArgumentException(); 
+        things[ aName ] = xElement;
+    }
+    virtual void SAL_CALL removeByName( const ::rtl::OUString& aName ) throw(NoSuchElementException, WrappedTargetException, RuntimeException)
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        if ( !hasByName( aName ) )
+            throw NoSuchElementException(); 
+        things.erase( things.find( aName ) );
+    }
+    virtual Type SAL_CALL getElementType(  ) throw (RuntimeException)
+    {
+        return T::static_type( NULL );
+    }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (RuntimeException)
+    {
+        ::osl::MutexGuard aGuard( m_aMutex );
+        return ( things.size() > 0 );
+    }
+};
+
 //	----------------------------------------------------
 //	class UnoControlDialogModel
 //	----------------------------------------------------
-UnoControlDialogModel::UnoControlDialogModel()
+UnoControlDialogModel::UnoControlDialogModel( bool regProps )
     :maContainerListeners( *this )
     ,maChangeListeners ( GetMutex() )
 	,mbGroupsUpToDate( sal_False ), mbAdjustingGraphic( false )
 {
+    if ( regProps )
+    {
     ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
 //	ImplRegisterProperty( BASEPROPERTY_BORDER );
     ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
@@ -291,8 +346,9 @@ UnoControlDialogModel::UnoControlDialogModel()
     aBool <<= (sal_Bool) sal_True;
     ImplRegisterProperty( BASEPROPERTY_MOVEABLE, aBool );
     ImplRegisterProperty( BASEPROPERTY_CLOSEABLE, aBool );
-	aBool <<= (sal_Bool) sal_False;
-	ImplRegisterProperty( BASEPROPERTY_VBAFORM, aBool );
+    uno::Reference< XNameContainer > xNameCont = new SimpleNamedThingContainer< XControlModel >();
+    ImplRegisterProperty( BASEPROPERTY_USERFORMCONTAINEES, uno::makeAny( xNameCont ) );
+    }
 }
 
 UnoControlDialogModel::UnoControlDialogModel( const UnoControlDialogModel& rModel )
@@ -300,7 +356,7 @@ UnoControlDialogModel::UnoControlDialogModel( const UnoControlDialogModel& rMode
     , UnoControlDialogModel_Base( rModel )
     , maContainerListeners( *this )
     , maChangeListeners ( GetMutex() )
-	, mbGroupsUpToDate( sal_False ), mbAdjustingGraphic( false )
+	, mbGroupsUpToDate( sal_False ), mxGrfObj( rModel.mxGrfObj ), mbAdjustingGraphic( false )
 {
 }
 
@@ -333,7 +389,8 @@ Sequence< Type > UnoControlDialogModel::getTypes() throw(RuntimeException)
 
 void SAL_CALL UnoControlDialogModel::setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception)
 {
-    UnoControlModel::setFastPropertyValue_NoBroadcast( nHandle, rValue );
+    UnoControlDialogModel_Base::setFastPropertyValue_NoBroadcast( nHandle, rValue );
+
     try
     {
         switch ( nHandle )
@@ -344,7 +401,7 @@ void SAL_CALL UnoControlDialogModel::setFastPropertyValue_NoBroadcast( sal_Int32
                 mbAdjustingGraphic = true;
                 ::rtl::OUString sImageURL;
                 OSL_VERIFY( rValue >>= sImageURL );
-                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( getGraphicFromURL_nothrow( mxGrfObj, sImageURL ) ) );
+                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( ImageHelper::getGraphicAndGraphicObjectFromURL_nothrow( mxGrfObj, sImageURL ) ) );
                 mbAdjustingGraphic = false;
             }
             break;
@@ -507,6 +564,10 @@ Reference< XInterface > UnoControlDialogModel::createInstance( const ::rtl::OUSt
         pNewModel = new OGeometryControlModel< UnoTreeModel >;
     else if ( aServiceSpecifier.compareToAscii( szServiceName_GridControlModel ) == 0 )
         pNewModel = new OGeometryControlModel< UnoGridModel >;
+    else if ( aServiceSpecifier.compareToAscii( szServiceName_UnoMultiPageModel ) == 0 )
+        pNewModel = new OGeometryControlModel< UnoMultiPageModel >;
+    else if ( aServiceSpecifier.compareToAscii( szServiceName_UnoFrameModel ) == 0 )
+        pNewModel = new OGeometryControlModel< UnoFrameModel >;
     else if ( aServiceSpecifier.compareToAscii( szServiceName2_UnoSimpleAnimationControlModel ) == 0 )
         pNewModel = new OGeometryControlModel< UnoSimpleAnimationControlModel >;
     else if ( aServiceSpecifier.compareToAscii( szServiceName2_UnoThrobberControlModel ) == 0 )
@@ -550,7 +611,7 @@ Sequence< ::rtl::OUString > UnoControlDialogModel::getAvailableServiceNames() th
     static Sequence< ::rtl::OUString >* pNamesSeq = NULL;
     if ( !pNamesSeq )
     {
-        pNamesSeq = new Sequence< ::rtl::OUString >( 24 );
+        pNamesSeq = new Sequence< ::rtl::OUString >( 25 );
         ::rtl::OUString* pNames = pNamesSeq->getArray();
         pNames[0] = ::rtl::OUString::createFromAscii( szServiceName2_UnoControlEditModel );
         pNames[1] = ::rtl::OUString::createFromAscii( szServiceName2_UnoControlFormattedFieldModel );
@@ -573,9 +634,11 @@ Sequence< ::rtl::OUString > UnoControlDialogModel::getAvailableServiceNames() th
         pNames[18] = ::rtl::OUString::createFromAscii( szServiceName2_UnoControlFixedLineModel );
         pNames[19] = ::rtl::OUString::createFromAscii( szServiceName2_UnoControlRoadmapModel );
         pNames[20] = ::rtl::OUString::createFromAscii( szServiceName_TreeControlModel );
+
         pNames[21] = ::rtl::OUString::createFromAscii( szServiceName_GridControlModel );
         pNames[22] = ::rtl::OUString::createFromAscii( szServiceName2_UnoSimpleAnimationControlModel );
         pNames[23] = ::rtl::OUString::createFromAscii( szServiceName2_UnoThrobberControlModel );
+        pNames[24] = ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageModel );
     }
     return *pNamesSeq;
 }
@@ -598,6 +661,55 @@ Type UnoControlDialogModel::getElementType() throw(RuntimeException)
     return aType;
 }
 
+void UnoControlDialogModel::updateUserFormChildren( const Reference< XNameContainer >& xAllChildren, const rtl::OUString& aName, ChildOperation Operation, const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlModel >& xTarget ) throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
+{
+    if ( Operation < Insert || Operation > Remove )
+        throw IllegalArgumentException();
+
+    if ( xAllChildren.is() )
+    {
+        if ( Operation == Remove )
+        {  
+            Reference< XControlModel > xOldModel( xAllChildren->getByName( aName ), UNO_QUERY );
+            xAllChildren->removeByName( aName );
+
+            Reference< XNameContainer > xChildContainer( xOldModel, UNO_QUERY );
+            if ( xChildContainer.is() )
+            { 
+                Reference< XPropertySet > xProps( xChildContainer, UNO_QUERY );
+                // container control is being removed from this container, reset the 
+                // global list of containees
+                if ( xProps.is() )
+                    xProps->setPropertyValue(  GetPropertyName( BASEPROPERTY_USERFORMCONTAINEES ), uno::makeAny( uno::Reference< XNameContainer >() ) );   
+                Sequence< rtl::OUString > aChildNames = xChildContainer->getElementNames();
+                for ( sal_Int32 index=0; index< aChildNames.getLength(); ++index )
+                    updateUserFormChildren( xAllChildren, aChildNames[ index ], Operation,  Reference< XControlModel > () );
+            }
+        }
+        else if ( Operation == Insert )
+        {
+            xAllChildren->insertByName( aName, uno::makeAny( xTarget ) );
+            Reference< XNameContainer > xChildContainer( xTarget, UNO_QUERY );
+            if ( xChildContainer.is() )
+            {
+                // container control is being added from this container, reset the 
+                // global list of containees to point to the correct global list
+                Reference< XPropertySet > xProps( xChildContainer, UNO_QUERY );
+                if ( xProps.is() )
+                    xProps->setPropertyValue(  GetPropertyName( BASEPROPERTY_USERFORMCONTAINEES ), uno::makeAny( xAllChildren ) );   
+                Sequence< rtl::OUString > aChildNames = xChildContainer->getElementNames();
+                for ( sal_Int32 index=0; index< aChildNames.getLength(); ++index )
+                {
+                    Reference< XControlModel > xChildTarget( xChildContainer->getByName( aChildNames[ index ] ), UNO_QUERY );
+                    updateUserFormChildren( xAllChildren, aChildNames[ index ], Operation, xChildTarget );
+                }
+            }
+        }
+    }
+    else
+        throw IllegalArgumentException();
+}
+
 sal_Bool UnoControlDialogModel::hasElements() throw(RuntimeException)
 {
     return !maModels.empty();
@@ -617,6 +729,20 @@ void UnoControlDialogModel::replaceByName( const ::rtl::OUString& aName, const A
     if ( maModels.end() == aElementPos )
         lcl_throwNoSuchElementException();
 
+    // Dialog behaviour is to have all containee names unique ( MSO Userform is the same )
+    // With container controls you could have constructed an existing hierachy and are now
+    // add this to an existing container, in this case a name nested in the containment 
+    // hierachy of the added control could contain a name clash, if we have access to the
+    // list of global names then recursively check for previously existing names ( we need 
+    // to do this obviously before the 'this' objects container is updated 
+    Reference< XNameContainer > xAllChildren( getPropertyValue( GetPropertyName( BASEPROPERTY_USERFORMCONTAINEES ) ), UNO_QUERY );
+    if ( xAllChildren.is() )
+    {
+        // remove old control ( and children ) from global list of containees
+        updateUserFormChildren( xAllChildren, aName, Remove, uno::Reference< XControlModel >() );
+        // Add new control ( and containees if they exist )
+        updateUserFormChildren( xAllChildren, aName, Insert, xNewModel );
+    }
     // stop listening at the old model
     stopControlListening( aElementPos->first );
     Reference< XControlModel > xReplaced( aElementPos->first );
@@ -624,6 +750,7 @@ void UnoControlDialogModel::replaceByName( const ::rtl::OUString& aName, const A
     aElementPos->first = xNewModel;
     startControlListening( xNewModel );
 
+
     ContainerEvent aEvent;
     aEvent.Source = *this;
     aEvent.Element = aElement;
@@ -684,7 +811,13 @@ void UnoControlDialogModel::insertByName( const ::rtl::OUString& aName, const An
                 {
                     Any aUrl = xProps.get()->getPropertyValue(  sImageSourceProperty );
 
-                    ::rtl::OUString absoluteUrl =
+                    ::rtl::OUString absoluteUrl;
+                    aUrl >>= absoluteUrl;
+                    if ( absoluteUrl.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) == 0 )
+					xProps.get()->setPropertyValue(  sImageSourceProperty , aUrl );
+                    // Now we inherit from this class, no all containers have
+                    // DialogSourceURL
+                    else if ( getPropertySetInfo()->hasPropertyByName( GetPropertyName( BASEPROPERTY_DIALOGSOURCEURL ) ) )
                         getPhysicalLocation( getPropertyValue( GetPropertyName( BASEPROPERTY_DIALOGSOURCEURL ) ), aUrl );
 
                     aUrl <<= absoluteUrl;
@@ -700,10 +833,25 @@ void UnoControlDialogModel::insertByName( const ::rtl::OUString& aName, const An
         lcl_throwIllegalArgumentException();
 
     UnoControlModelHolderList::iterator aElementPos = ImplFindElement( aName );
+
     if ( maModels.end() != aElementPos )
         lcl_throwElementExistException();
 
+    // Dialog behaviour is to have all containee names unique ( MSO Userform is the same )
+    // With container controls you could have constructed an existing hierachy and are now
+    // add this to an existing container, in this case a name nested in the containment 
+    // hierachy of the added control could contain a name clash, if we have access to the
+    // list of global names then we need to recursively check for previously existing 
+    // names ( we need to do this obviously before the 'this' objects container is updated 
+    // remove old control ( and children ) from global list of containees
+    Reference< XNameContainer > xAllChildren( getPropertyValue( GetPropertyName( BASEPROPERTY_USERFORMCONTAINEES ) ), UNO_QUERY );
+
+    if ( xAllChildren.is() )
+        updateUserFormChildren( xAllChildren, aName, Insert, xM );
+
     maModels.push_back( UnoControlModelHolder( xM, aName ) );
+
+
     mbGroupsUpToDate = sal_False;
     startControlListening( xM );
 
@@ -725,6 +873,15 @@ void UnoControlDialogModel::removeByName( const ::rtl::OUString& aName ) throw(N
     if ( maModels.end() == aElementPos )
         lcl_throwNoSuchElementException();
 
+    // Dialog behaviour is to have all containee names unique ( MSO Userform is the same )
+    // With container controls you could have constructed an existing hierachy and are now
+    // removing this control from an existing container, in this case all nested names in 
+    // the containment hierachy of the control to be removed need to be removed from the global 
+    // names cache ( we need to do this obviously before the 'this' objects container is updated ) 
+    Reference< XNameContainer > xAllChildren( getPropertyValue( GetPropertyName( BASEPROPERTY_USERFORMCONTAINEES ) ), UNO_QUERY );
+    if ( xAllChildren.is() )
+        updateUserFormChildren( xAllChildren, aName, Remove, uno::Reference< XControlModel >() );
+
     ContainerEvent aEvent;
     aEvent.Source = *this;
     aEvent.Element <<= aElementPos->first;
@@ -734,6 +891,7 @@ void UnoControlDialogModel::removeByName( const ::rtl::OUString& aName ) throw(N
     stopControlListening( aElementPos->first );
     Reference< XPropertySet > xPS( aElementPos->first, UNO_QUERY );
     maModels.erase( aElementPos );
+
     mbGroupsUpToDate = sal_False;
 
     if ( xPS.is() )
@@ -1392,67 +1550,624 @@ throw ( RuntimeException )
     }
 }
 
-// ============================================================================
-// = class UnoDialogControl
-// ============================================================================
+static ::Size ImplMapPixelToAppFont( OutputDevice* pOutDev, const ::Size& aSize )
+{
+    ::Size aTmp = pOutDev->PixelToLogic( aSize, MAP_APPFONT );
+    return aTmp;
+}
 
-UnoDialogControl::UnoDialogControl() :
-    maTopWindowListeners( *this ),
-    mbWindowListener(false),
-    mbSizeModified(false),
-    mbPosModified(false)
+//	----------------------------------------------------
+//	class MultiPageControl
+//	----------------------------------------------------
+UnoMultiPageControl::UnoMultiPageControl() : maTabListeners( *this )
 {
-    maComponentInfos.nWidth = 300;
-    maComponentInfos.nHeight = 450;
-    mxListener = new ResourceListener( Reference< util::XModifyListener >(
-                        static_cast< OWeakObject* >( this ), UNO_QUERY ));
+	maComponentInfos.nWidth = 280;
+	maComponentInfos.nHeight = 400;
 }
 
-::rtl::OUString UnoDialogControl::GetComponentServiceName()
+UnoMultiPageControl::~UnoMultiPageControl()
 {
+}
+// XTabListener
 
+void SAL_CALL UnoMultiPageControl::inserted( ::sal_Int32 /*ID*/ ) throw (RuntimeException)
+{
+}
+void SAL_CALL UnoMultiPageControl::removed( ::sal_Int32 /*ID*/ ) throw (RuntimeException)
+{
+}
+void SAL_CALL UnoMultiPageControl::changed( ::sal_Int32 /*ID*/, const Sequence< NamedValue >& /*Properties*/ ) throw (RuntimeException)
+{
+}
+void SAL_CALL UnoMultiPageControl::activated( ::sal_Int32 ID ) throw (RuntimeException)
+{
+    ImplSetPropertyValue( GetPropertyName( BASEPROPERTY_MULTIPAGEVALUE ), uno::makeAny( ID ), sal_False );
+
+}
+void SAL_CALL UnoMultiPageControl::deactivated( ::sal_Int32 /*ID*/ ) throw (RuntimeException)
+{
+}
+void SAL_CALL UnoMultiPageControl::disposing(const EventObject&) throw (RuntimeException)
+{
+}
+
+void SAL_CALL UnoMultiPageControl::dispose() throw (RuntimeException)
+{
+    lang::EventObject aEvt;
+    aEvt.Source = (::cppu::OWeakObject*)this;
+    maTabListeners.disposeAndClear( aEvt );
+    UnoDialogContainerControl::dispose(); 
+}
+
+// com::sun::star::awt::XSimpleTabController
+::sal_Int32 SAL_CALL UnoMultiPageControl::insertTab() throw (RuntimeException)
+{
+    Reference< XSimpleTabController > xMultiPage( getPeer(), UNO_QUERY );
+    if ( !xMultiPage.is() )
+        throw RuntimeException();
+    return xMultiPage->insertTab();
+}
+
+void SAL_CALL UnoMultiPageControl::removeTab( ::sal_Int32 ID ) throw (IndexOutOfBoundsException, RuntimeException)
+{
+    Reference< XSimpleTabController > xMultiPage( getPeer(), UNO_QUERY );
+    if ( !xMultiPage.is() )
+        throw RuntimeException();
+    xMultiPage->removeTab( ID );
+}
+
+void SAL_CALL UnoMultiPageControl::setTabProps( ::sal_Int32 ID, const Sequence< NamedValue >& Properties ) throw (IndexOutOfBoundsException, RuntimeException)
+{
+    Reference< XSimpleTabController > xMultiPage( getPeer(), UNO_QUERY );
+    if ( !xMultiPage.is() )
+        throw RuntimeException();
+    xMultiPage->setTabProps( ID, Properties );
+}
+
+Sequence< NamedValue > SAL_CALL UnoMultiPageControl::getTabProps( ::sal_Int32 ID ) throw (IndexOutOfBoundsException, RuntimeException)
+{
+    Reference< XSimpleTabController > xMultiPage( getPeer(), UNO_QUERY );
+    if ( !xMultiPage.is() )
+        throw RuntimeException();
+    return xMultiPage->getTabProps( ID );
+}
+
+void SAL_CALL UnoMultiPageControl::activateTab( ::sal_Int32 ID ) throw (IndexOutOfBoundsException, RuntimeException)
+{
+    Reference< XSimpleTabController > xMultiPage( getPeer(), UNO_QUERY );
+    if ( !xMultiPage.is() )
+        throw RuntimeException();
+    xMultiPage->activateTab( ID );
+    ImplSetPropertyValue( GetPropertyName( BASEPROPERTY_MULTIPAGEVALUE ), uno::makeAny( ID ), sal_True );
+    
+}
+
+::sal_Int32 SAL_CALL UnoMultiPageControl::getActiveTabID() throw (RuntimeException)
+{
+    Reference< XSimpleTabController > xMultiPage( getPeer(), UNO_QUERY );
+    if ( !xMultiPage.is() )
+        throw RuntimeException();
+    return xMultiPage->getActiveTabID();
+}
+
+void SAL_CALL UnoMultiPageControl::addTabListener( const Reference< XTabListener >& Listener ) throw (RuntimeException)
+{
+    maTabListeners.addInterface( Listener );
+    Reference< XSimpleTabController > xMultiPage( getPeer(), UNO_QUERY );
+    if ( xMultiPage.is()  && maTabListeners.getLength() == 1 )
+        xMultiPage->addTabListener( &maTabListeners );
+}
+
+void SAL_CALL UnoMultiPageControl::removeTabListener( const Reference< XTabListener >& Listener ) throw (RuntimeException)
+{
+    Reference< XSimpleTabController > xMultiPage( getPeer(), UNO_QUERY );
+    if ( xMultiPage.is()  && maTabListeners.getLength() == 1 )
+        xMultiPage->removeTabListener( &maTabListeners );
+    maTabListeners.removeInterface( Listener );
+}
+
+
+// lang::XTypeProvider
+IMPL_XTYPEPROVIDER_START( UnoMultiPageControl )
+    getCppuType( ( uno::Reference< awt::XSimpleTabController>* ) NULL ),
+    getCppuType( ( uno::Reference< awt::XTabListener>* ) NULL ),
+    UnoDialogContainerControl::getTypes()
+IMPL_XTYPEPROVIDER_END
+
+// uno::XInterface
+uno::Any UnoMultiPageControl::queryAggregation( const uno::Type & rType ) throw(uno::RuntimeException)
+{
+    uno::Any aRet = ::cppu::queryInterface( rType,
+                                        SAL_STATIC_CAST( awt::XTabListener*, this ), SAL_STATIC_CAST( awt::XSimpleTabController*, this ) );
+    return (aRet.hasValue() ? aRet : UnoDialogContainerControl::queryAggregation( rType ));
+}
+
+::rtl::OUString UnoMultiPageControl::GetComponentServiceName()
+{
     sal_Bool bDecoration( sal_True );
     ImplGetPropertyValue( GetPropertyName( BASEPROPERTY_DECORATION )) >>= bDecoration;
     if ( bDecoration )
-        return ::rtl::OUString::createFromAscii( "Dialog" );
+	    return ::rtl::OUString::createFromAscii( "tabcontrol" );
+        // Hopefully we can tweak the tabcontrol to display without tabs
+	return ::rtl::OUString::createFromAscii( "tabcontrolnotabs" );
+}
+
+void UnoMultiPageControl::bindPage( const uno::Reference< awt::XControl >& _rxControl )
+{
+    uno::Reference< awt::XWindowPeer > xPage( _rxControl->getPeer() );
+    uno::Reference< awt::XSimpleTabController > xTabCntrl( getPeer(), uno::UNO_QUERY );        
+    uno::Reference< beans::XPropertySet > xProps( _rxControl->getModel(), uno::UNO_QUERY ); 
+    
+   VCLXTabPage* pXPage = dynamic_cast< VCLXTabPage* >( xPage.get() );
+   TabPage* pPage = pXPage ? pXPage->getTabPage() : NULL;
+    if ( xTabCntrl.is() && pPage )
+    {
+        VCLXMultiPage* pXTab = dynamic_cast< VCLXMultiPage* >( xTabCntrl.get() );
+        if ( pXTab )
+        {
+            rtl::OUString sTitle;
+            xProps->getPropertyValue( GetPropertyName( BASEPROPERTY_TITLE ) ) >>= sTitle;
+            pXTab->insertTab( pPage, sTitle); 
+        }
+    }
+        
+}
+
+void UnoMultiPageControl::createPeer( const Reference< XToolkit > & rxToolkit, const Reference< XWindowPeer >  & rParentPeer ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    UnoControlContainer::createPeer( rxToolkit, rParentPeer );
+    
+    uno::Sequence< uno::Reference< awt::XControl > > aCtrls = getControls();
+    sal_uInt32 nCtrls = aCtrls.getLength();
+    for( sal_uInt32 n = 0; n < nCtrls; n++ )
+       bindPage( aCtrls[ n ] ); 
+    sal_Int32 nActiveTab(0);
+    Reference< XPropertySet > xMultiProps( getModel(), UNO_QUERY );
+    xMultiProps->getPropertyValue( GetPropertyName( BASEPROPERTY_MULTIPAGEVALUE ) ) >>= nActiveTab;
+
+    uno::Reference< awt::XSimpleTabController > xTabCntrl( getPeer(), uno::UNO_QUERY );     
+    if ( xTabCntrl.is() )
+    {
+        xTabCntrl->addTabListener( this );
+        if ( nActiveTab && nCtrls ) // Ensure peer is initialise with correct activated tab
+        {
+            xTabCntrl->activateTab( nActiveTab );
+            ImplSetPropertyValue( GetPropertyName( BASEPROPERTY_MULTIPAGEVALUE ), uno::makeAny( nActiveTab ), sal_True );
+        }
+    }
+}
+   
+void    UnoMultiPageControl::impl_createControlPeerIfNecessary( const uno::Reference< awt::XControl >& _rxControl)
+{
+    OSL_PRECOND( _rxControl.is(), "UnoMultiPageControl::impl_createControlPeerIfNecessary: invalid control, this will crash!" );
+
+    // if the container already has a peer, then also create a peer for the control
+    uno::Reference< awt::XWindowPeer > xMyPeer( getPeer() );
+    
+    if( xMyPeer.is() )
+    {
+        _rxControl->createPeer( NULL, xMyPeer );
+        bindPage( _rxControl ); 
+        ImplActivateTabControllers();
+    }
+   
+}
+
+// ------------- UnoMultiPageModel -----------------
+
+UnoMultiPageModel::UnoMultiPageModel() : UnoControlDialogModel( false )
+{
+    ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
+    ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
+    ImplRegisterProperty( BASEPROPERTY_ENABLEVISIBLE );
+    ImplRegisterProperty( BASEPROPERTY_ENABLED );
+
+    ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
+    ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
+    ImplRegisterProperty( BASEPROPERTY_HELPURL );
+    ImplRegisterProperty( BASEPROPERTY_SIZEABLE );
+    //ImplRegisterProperty( BASEPROPERTY_DIALOGSOURCEURL );
+    ImplRegisterProperty( BASEPROPERTY_MULTIPAGEVALUE );
+    ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
+    ImplRegisterProperty( BASEPROPERTY_USERFORMCONTAINEES ); 
+
+    Any aBool;
+    aBool <<= (sal_Bool) sal_True;
+    ImplRegisterProperty( BASEPROPERTY_MOVEABLE, aBool );
+    ImplRegisterProperty( BASEPROPERTY_CLOSEABLE, aBool );
+    ImplRegisterProperty( BASEPROPERTY_DECORATION, aBool );
+    // MultiPage Control has the tab stop property. And the default value is True.
+    ImplRegisterProperty( BASEPROPERTY_TABSTOP, aBool );
+}
+
+UnoMultiPageModel::UnoMultiPageModel( const UnoMultiPageModel& rModel )
+    : UnoControlDialogModel( rModel )
+{
+}
+
+UnoMultiPageModel::~UnoMultiPageModel() 
+{
+}
+
+UnoControlModel*
+UnoMultiPageModel::Clone() const 
+{
+    // clone the container itself
+    UnoMultiPageModel* pClone = new UnoMultiPageModel( *this );
+
+    // clone all children
+    ::std::for_each(
+        maModels.begin(), maModels.end(),
+        CloneControlModel( pClone->maModels )
+    );
+
+    return pClone;
+}
+
+::rtl::OUString UnoMultiPageModel::getServiceName() throw(::com::sun::star::uno::RuntimeException)
+{
+	return ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageModel );
+}
+
+uno::Any UnoMultiPageModel::ImplGetDefaultValue( sal_uInt16 nPropId ) const
+{
+	if ( nPropId == BASEPROPERTY_DEFAULTCONTROL )
+	{
+		uno::Any aAny;
+		aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageControl );
+		return aAny;
+	}
+	return UnoControlDialogModel::ImplGetDefaultValue( nPropId );
+}
+
+::cppu::IPropertyArrayHelper& UnoMultiPageModel::getInfoHelper()
+{
+	static UnoPropertyArrayHelper* pHelper = NULL;
+	if ( !pHelper )
+	{
+		uno::Sequence<sal_Int32>	aIDs = ImplGetPropertyIds();
+		pHelper = new UnoPropertyArrayHelper( aIDs );
+	}
+	return *pHelper;
+}
+
+// beans::XMultiPropertySet
+uno::Reference< beans::XPropertySetInfo > UnoMultiPageModel::getPropertySetInfo(  ) throw(uno::RuntimeException)
+{
+	static uno::Reference< beans::XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+	return xInfo;
+}
+
+void UnoMultiPageModel::insertByName( const ::rtl::OUString& aName, const Any& aElement ) throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
+{
+    Reference< XServiceInfo > xInfo;
+    aElement >>= xInfo;
+
+    if ( !xInfo.is() )
+        throw IllegalArgumentException();
+
+    // Only a Page model can be inserted into the multipage
+    if ( !xInfo->supportsService( rtl::OUString::createFromAscii( szServiceName_UnoPageModel ) ) )
+        throw IllegalArgumentException();
+
+    return UnoControlDialogModel::insertByName( aName, aElement );
+}
+
+// ----------------------------------------------------------------------------
+sal_Bool SAL_CALL UnoMultiPageModel::getGroupControl(  ) throw (RuntimeException)
+{
+    return sal_True;
+}
+
+//	----------------------------------------------------
+//	class UnoPageControl
+//	----------------------------------------------------
+UnoPageControl::UnoPageControl()
+{
+	maComponentInfos.nWidth = 280;
+	maComponentInfos.nHeight = 400;
+}
+
+UnoPageControl::~UnoPageControl()
+{
+}
+
+::rtl::OUString UnoPageControl::GetComponentServiceName()
+{
+	return ::rtl::OUString::createFromAscii( "tabpage" );
+}
+
+
+// ------------- UnoPageModel -----------------
+
+UnoPageModel::UnoPageModel() : UnoControlDialogModel( false )
+{
+    ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
+    ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
+    ImplRegisterProperty( BASEPROPERTY_ENABLED );
+    ImplRegisterProperty( BASEPROPERTY_ENABLEVISIBLE );
+
+    ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
+    ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
+    ImplRegisterProperty( BASEPROPERTY_HELPURL );
+    ImplRegisterProperty( BASEPROPERTY_TITLE );
+    ImplRegisterProperty( BASEPROPERTY_SIZEABLE );
+    ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
+    ImplRegisterProperty( BASEPROPERTY_USERFORMCONTAINEES ); 
+//    ImplRegisterProperty( BASEPROPERTY_DIALOGSOURCEURL );
+
+    Any aBool;
+    aBool <<= (sal_Bool) sal_True;
+    ImplRegisterProperty( BASEPROPERTY_MOVEABLE, aBool );
+    ImplRegisterProperty( BASEPROPERTY_CLOSEABLE, aBool );
+    //ImplRegisterProperty( BASEPROPERTY_TABSTOP, aBool );
+}
+
+UnoPageModel::UnoPageModel( const UnoPageModel& rModel )
+    : UnoControlDialogModel( rModel )
+{
+}
+
+UnoPageModel::~UnoPageModel() 
+{
+}
+
+UnoControlModel*
+UnoPageModel::Clone() const 
+{
+    // clone the container itself
+    UnoPageModel* pClone = new UnoPageModel( *this );
+
+    // clone all children
+    ::std::for_each(
+        maModels.begin(), maModels.end(),
+        CloneControlModel( pClone->maModels )
+    );
+
+    return pClone;
+}
+
+::rtl::OUString UnoPageModel::getServiceName() throw(::com::sun::star::uno::RuntimeException)
+{
+	return ::rtl::OUString::createFromAscii( szServiceName_UnoPageModel );
+}
+
+uno::Any UnoPageModel::ImplGetDefaultValue( sal_uInt16 nPropId ) const
+{
+	if ( nPropId == BASEPROPERTY_DEFAULTCONTROL )
+	{
+		uno::Any aAny;
+		aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoPageControl );
+		return aAny;
+	}
+	return UnoControlDialogModel::ImplGetDefaultValue( nPropId );
+}
+
+::cppu::IPropertyArrayHelper& UnoPageModel::getInfoHelper()
+{
+	static UnoPropertyArrayHelper* pHelper = NULL;
+	if ( !pHelper )
+	{
+		uno::Sequence<sal_Int32>	aIDs = ImplGetPropertyIds();
+		pHelper = new UnoPropertyArrayHelper( aIDs );
+	}
+	return *pHelper;
+}
+
+// beans::XMultiPropertySet
+uno::Reference< beans::XPropertySetInfo > UnoPageModel::getPropertySetInfo(  ) throw(uno::RuntimeException)
+{
+	static uno::Reference< beans::XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+	return xInfo;
+}
+
+// ----------------------------------------------------------------------------
+sal_Bool SAL_CALL UnoPageModel::getGroupControl(  ) throw (RuntimeException)
+{
+    return sal_False;
+}
+
+// Frame control
+
+//	----------------------------------------------------
+//	class UnoFrameControl
+//	----------------------------------------------------
+UnoFrameControl::UnoFrameControl()
+{
+	maComponentInfos.nWidth = 280;
+	maComponentInfos.nHeight = 400;
+}
+
+UnoFrameControl::~UnoFrameControl()
+{
+}
+
+::rtl::OUString UnoFrameControl::GetComponentServiceName()
+{
+	return ::rtl::OUString::createFromAscii( "frame" );
+}
+
+void UnoFrameControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
+{
+    bool bOwnCtrl = false;
+    rtl::OUString sTitle;
+    if ( rxCtrl.get() == Reference<XControl>( this ).get() )
+        bOwnCtrl = true; 
+    Reference< XPropertySet > xProps( getModel(), UNO_QUERY );
+    //xProps->getPropertyValue( GetPropertyName( BASEPROPERTY_TITLE ) ) >>= sTitle;
+    xProps->getPropertyValue( GetPropertyName( BASEPROPERTY_LABEL ) ) >>= sTitle;
+
+    UnoDialogContainerControl::ImplSetPosSize( rxCtrl );
+    Reference < XWindow > xW( rxCtrl, UNO_QUERY );
+    if ( !bOwnCtrl && xW.is() && sTitle.getLength() ) 
+    {
+        awt::Rectangle aSizePos = xW->getPosSize();
+ 
+        sal_Int32 nX = aSizePos.X, nY = aSizePos.Y, nWidth = aSizePos.Width, nHeight = aSizePos.Height;        
+        // Retrieve the values set by the base class
+        OutputDevice*pOutDev = Application::GetDefaultDevice();
+        if ( pOutDev )
+        {
+            if ( !bOwnCtrl && sTitle.getLength() )
+            {
+                // Adjust Y based on height of Title
+                ::Rectangle aRect = pOutDev->GetTextRect( aRect, sTitle );
+                nY = nY + ( aRect.GetHeight() / 2 ); 
+            }
+        }
     else
-        return ::rtl::OUString::createFromAscii( "TabPage" );
+        {
+            Reference< XWindowPeer > xPeer = ImplGetCompatiblePeer( sal_True );
+            Reference< XDevice > xD( xPeer, UNO_QUERY );
+
+            SimpleFontMetric aFM;
+            FontDescriptor aFD;
+            Any aVal = ImplGetPropertyValue( GetPropertyName( BASEPROPERTY_FONTDESCRIPTOR ) );
+            aVal >>= aFD;
+            if ( aFD.StyleName.getLength() )
+            {
+                Reference< XFont > xFont = xD->getFont( aFD );
+                aFM = xFont->getFontMetric();
+            }
+            else
+            {
+                Reference< XGraphics > xG = xD->createGraphics();
+                aFM = xG->getFontMetric();
+            }
+
+            sal_Int16 nH = aFM.Ascent + aFM.Descent;
+            if ( !bOwnCtrl && sTitle.getLength() )
+                // offset y based on height of font ( not sure if my guess at the correct calculation is correct here )
+                nY = nY + ( nH / 8); // how do I test this
+        }
+        xW->setPosSize( nX, nY, nWidth, nHeight, PosSize::POSSIZE );
+    }
+}
+
+// ------------- UnoFrameModel -----------------
+
+UnoFrameModel::UnoFrameModel() : UnoControlDialogModel( false )
+{
+    ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
+    ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
+    ImplRegisterProperty( BASEPROPERTY_ENABLED );
+    ImplRegisterProperty( BASEPROPERTY_ENABLEVISIBLE );
+    ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
+    ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
+    ImplRegisterProperty( BASEPROPERTY_HELPURL );
+    ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
+    ImplRegisterProperty( BASEPROPERTY_LABEL );
+    ImplRegisterProperty( BASEPROPERTY_WRITING_MODE );
+    ImplRegisterProperty( BASEPROPERTY_CONTEXT_WRITING_MODE );
+    ImplRegisterProperty( BASEPROPERTY_USERFORMCONTAINEES ); 
+}
+
+UnoFrameModel::UnoFrameModel( const UnoFrameModel& rModel )
+    : UnoControlDialogModel( rModel )
+{
+}
+
+UnoFrameModel::~UnoFrameModel() 
+{
+}
+
+UnoControlModel*
+UnoFrameModel::Clone() const 
+{
+    // clone the container itself
+    UnoFrameModel* pClone = new UnoFrameModel( *this );
+
+    // clone all children
+    ::std::for_each(
+        maModels.begin(), maModels.end(),
+        CloneControlModel( pClone->maModels )
+    );
+
+    return pClone;
+}
+
+::rtl::OUString UnoFrameModel::getServiceName() throw(::com::sun::star::uno::RuntimeException)
+{
+	return ::rtl::OUString::createFromAscii( szServiceName_UnoFrameModel );
+}
+
+uno::Any UnoFrameModel::ImplGetDefaultValue( sal_uInt16 nPropId ) const
+{
+	if ( nPropId == BASEPROPERTY_DEFAULTCONTROL )
+	{
+		uno::Any aAny;
+		aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoFrameControl );
+		return aAny;
+	}
+	return UnoControlDialogModel::ImplGetDefaultValue( nPropId );
+}
+
+::cppu::IPropertyArrayHelper& UnoFrameModel::getInfoHelper()
+{
+	static UnoPropertyArrayHelper* pHelper = NULL;
+	if ( !pHelper )
+	{
+		uno::Sequence<sal_Int32>	aIDs = ImplGetPropertyIds();
+		pHelper = new UnoPropertyArrayHelper( aIDs );
+	}
+	return *pHelper;
+}
+
+// beans::XMultiPropertySet
+uno::Reference< beans::XPropertySetInfo > UnoFrameModel::getPropertySetInfo(  ) throw(uno::RuntimeException)
+{
+	static uno::Reference< beans::XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
+	return xInfo;
+}
+
+
+//===============================================================
+//	----------------------------------------------------
+//	class DialogContainerControl
+//	----------------------------------------------------
+UnoDialogContainerControl::UnoDialogContainerControl() :
+    mbSizeModified(false),
+    mbPosModified(false)
+{
+	maComponentInfos.nWidth = 280;
+	maComponentInfos.nHeight = 400;
+}
+
+UnoDialogContainerControl::~UnoDialogContainerControl()
+{
 }
 
 // XInterface
-Any UnoDialogControl::queryAggregation( const Type & rType ) throw(RuntimeException)
+Any UnoDialogContainerControl::queryAggregation( const Type & rType ) throw(RuntimeException)
 {
-    Any aRet( UnoDialogControl_IBase::queryInterface( rType ) );
+    Any aRet( UnoDialogContainerControl_IBase::queryInterface( rType ) );
     return (aRet.hasValue() ? aRet : UnoControlContainer::queryAggregation( rType ));
 }
 
 // XTypeProvider
-IMPL_IMPLEMENTATION_ID( UnoDialogControl )
-Sequence< Type > UnoDialogControl::getTypes() throw(RuntimeException)
+IMPL_IMPLEMENTATION_ID( UnoDialogContainerControl )
+Sequence< Type > 
+UnoDialogContainerControl::getTypes() throw(RuntimeException)
 {
     return ::comphelper::concatSequences(
-        UnoDialogControl_IBase::getTypes(),
+        UnoDialogContainerControl_IBase::getTypes(),
         UnoControlContainer::getTypes()
     );
 }
 
-void UnoDialogControl::ImplInsertControl( Reference< XControlModel >& rxModel, const ::rtl::OUString& rName )
+void UnoDialogContainerControl::createPeer( const Reference< XToolkit > & rxToolkit, const Reference< XWindowPeer >  & rParentPeer ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    UnoControlContainer::createPeer( rxToolkit, rParentPeer );
+}
+
+void UnoDialogContainerControl::ImplInsertControl( Reference< XControlModel >& rxModel, const ::rtl::OUString& rName )
 {
     Reference< XPropertySet > xP( rxModel, UNO_QUERY );
 
     ::rtl::OUString aDefCtrl;
     xP->getPropertyValue( GetPropertyName( BASEPROPERTY_DEFAULTCONTROL ) ) >>= aDefCtrl;
-
-    // Add our own resource resolver to a newly created control
-    Reference< resource::XStringResourceResolver > xStringResourceResolver;
-    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
-
-    Any aAny;
-    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
-
-    aAny <<= xStringResourceResolver;
-    xP->setPropertyValue( aPropName, aAny );
-
     Reference< XMultiServiceFactory > xMSF = ::comphelper::getProcessServiceFactory();
     Reference < XControl > xCtrl( xMSF->createInstance( aDefCtrl ), UNO_QUERY );
 
@@ -1469,7 +2184,7 @@ void UnoDialogControl::ImplInsertControl( Reference< XControlModel >& rxModel, c
     }
 }
 
-void UnoDialogControl::ImplRemoveControl( Reference< XControlModel >& rxModel )
+void UnoDialogContainerControl::ImplRemoveControl( Reference< XControlModel >& rxModel )
 {
     Sequence< Reference< XControl > > aControls = getControls();
     Reference< XControl > xCtrl = StdTabController::FindControl( aControls, rxModel );
@@ -1477,7 +2192,7 @@ void UnoDialogControl::ImplRemoveControl( Reference< XControlModel >& rxModel )
         removeControl( xCtrl );
 }
 
-void UnoDialogControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
+void UnoDialogContainerControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
 {
     Reference< XPropertySet > xP( rxCtrl->getModel(), UNO_QUERY );
 
@@ -1486,24 +2201,7 @@ void UnoDialogControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
     xP->getPropertyValue( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "PositionY" ) ) ) >>= nY;
     xP->getPropertyValue( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Width" ) ) ) >>= nWidth;
     xP->getPropertyValue( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Height" ) ) ) >>= nHeight;
-
-	// Currentley we are simply using MAP_APPFONT ( for normal Dialogs )
-	// and MAP_100TH_MM for imported Userforms
 	MapMode aMode( MAP_APPFONT );
-	sal_Bool bVBAForm = sal_False;
-	Reference< XPropertySet > xDlgModelProps( getModel(), UNO_QUERY );
-	if ( xDlgModelProps.is() )
-	{
-		try
-		{
-			xDlgModelProps->getPropertyValue( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "VBAForm" ) ) ) >>= bVBAForm;
-		}
-		catch( Exception& )
-		{
-		}
-	} 
-	if ( bVBAForm )
-		aMode = MapMode( MAP_100TH_MM );
     OutputDevice*pOutDev = Application::GetDefaultDevice();
     if ( pOutDev )
     {
@@ -1552,53 +2250,19 @@ void UnoDialogControl::ImplSetPosSize( Reference< XControl >& rxCtrl )
     xW->setPosSize( nX, nY, nWidth, nHeight, PosSize::POSSIZE );
 }
 
-void UnoDialogControl::dispose() throw(RuntimeException)
+void UnoDialogContainerControl::dispose() throw(RuntimeException)
 {
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-
-    EventObject aEvt;
-    aEvt.Source = static_cast< ::cppu::OWeakObject* >( this );
-    maTopWindowListeners.disposeAndClear( aEvt );
-
-    // Notify our listener helper about dispose
-    // --- SAFE ---
-    ::osl::ResettableGuard< ::osl::Mutex > aGuard( GetMutex() );
-    Reference< XEventListener > xListener( mxListener, UNO_QUERY );
-    mxListener.clear();
-    aGuard.clear();
-    // --- SAFE ---
-
-    if ( xListener.is() )
-        xListener->disposing( aEvt );
-
     UnoControlContainer::dispose();
 }
 
-void SAL_CALL UnoDialogControl::disposing(
+void SAL_CALL UnoDialogContainerControl::disposing(
     const EventObject& Source )
 throw(RuntimeException)
 {
-    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
-    Reference< resource::XStringResourceResolver > xStringResourceResolver;
-
-    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
-    Reference< XInterface > xIfac( xStringResourceResolver, UNO_QUERY );
-
-    if ( Source.Source == xIfac )
-    {
-        Any aAny;
-
-        // Reset resource resolver reference
-        ImplSetPropertyValue( aPropName, aAny, sal_True );
-        ImplUpdateResourceResolver();
-    }
-    else
-    {
         UnoControlContainer::disposing( Source );
     }
-}
 
-sal_Bool UnoDialogControl::setModel( const Reference< XControlModel >& rxModel ) throw(RuntimeException)
+sal_Bool UnoDialogContainerControl::setModel( const Reference< XControlModel >& rxModel ) throw(RuntimeException)
 {
     vos::OGuard aSolarGuard( Application::GetSolarMutex() );
 
@@ -1667,12 +2331,11 @@ sal_Bool UnoDialogControl::setModel( const Reference< XControlModel >& rxModel )
         mxTabController->setModel( xTabbing );
         addTabController( mxTabController );
     }
-    ImplStartListingForResourceEvents();
+//    ImplStartListingForResourceEvents();
 
     return bRet;
 }
-
-void UnoDialogControl::setDesignMode( sal_Bool bOn ) throw(RuntimeException)
+void UnoDialogContainerControl::setDesignMode( sal_Bool bOn ) throw(RuntimeException)
 {
     vos::OGuard aSolarGuard( Application::GetSolarMutex() );
     ::osl::Guard< ::osl::Mutex > aGuard( GetMutex() );
@@ -1692,6 +2355,251 @@ void UnoDialogControl::setDesignMode( sal_Bool bOn ) throw(RuntimeException)
         mxTabController->activateTabOrder();
 }
 
+void UnoDialogContainerControl::elementInserted( const ContainerEvent& Event ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+
+    Reference< XControlModel > xModel;
+    ::rtl::OUString aName;
+
+    Event.Accessor >>= aName;
+    Event.Element >>= xModel;
+    ImplInsertControl( xModel, aName );
+}
+
+void UnoDialogContainerControl::elementRemoved( const ContainerEvent& Event ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+
+    Reference< XControlModel > xModel;
+    Event.Element >>= xModel;
+    if ( xModel.is() )
+        ImplRemoveControl( xModel );
+}
+
+void UnoDialogContainerControl::elementReplaced( const ContainerEvent& Event ) throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+
+    Reference< XControlModel > xModel;
+    Event.ReplacedElement >>= xModel;
+    if ( xModel.is() )
+        ImplRemoveControl( xModel );
+
+    ::rtl::OUString aName;
+    Event.Accessor >>= aName;
+    Event.Element >>= xModel;
+    ImplInsertControl( xModel, aName );
+}
+
+// XPropertiesChangeListener
+void UnoDialogContainerControl::ImplModelPropertiesChanged( const Sequence< PropertyChangeEvent >& rEvents ) throw(RuntimeException)
+{
+    if( !isDesignMode() && !mbCreatingCompatiblePeer )
+    {
+        ::rtl::OUString s1( RTL_CONSTASCII_USTRINGPARAM( "PositionX" ) );
+        ::rtl::OUString s2( RTL_CONSTASCII_USTRINGPARAM( "PositionY" ) );
+        ::rtl::OUString s3( RTL_CONSTASCII_USTRINGPARAM( "Width" ) );
+        ::rtl::OUString s4( RTL_CONSTASCII_USTRINGPARAM( "Height" ) );
+
+        sal_Int32 nLen = rEvents.getLength();
+        for( sal_Int32 i = 0; i < nLen; i++ )
+        {
+            const PropertyChangeEvent& rEvt = rEvents.getConstArray()[i];
+            Reference< XControlModel > xModel( rEvt.Source, UNO_QUERY );
+            sal_Bool bOwnModel = (XControlModel*)xModel.get() == (XControlModel*)getModel().get();
+            if ( ( rEvt.PropertyName == s1 ) ||
+                 ( rEvt.PropertyName == s2 ) ||
+                 ( rEvt.PropertyName == s3 ) ||
+                 ( rEvt.PropertyName == s4 ) )
+            {
+                if ( bOwnModel )
+                {
+                    if ( !mbPosModified && !mbSizeModified )
+                    {
+                        // Don't set new pos/size if we get new values from window listener
+                        Reference< XControl > xThis( (XAggregation*)(::cppu::OWeakAggObject*)this, UNO_QUERY );
+                        ImplSetPosSize( xThis );
+                    }
+                }
+                else
+                {
+                    Sequence<Reference<XControl> > aControlSequence(getControls());
+                    Reference<XControl> aControlRef( StdTabController::FindControl( aControlSequence, xModel ) );
+                    ImplSetPosSize( aControlRef );
+                }
+                break;
+            }
+        }
+    }
+    UnoControlContainer::ImplModelPropertiesChanged( rEvents );
+}
+
+void UnoDialogContainerControl::addingControl( const Reference< XControl >& _rxControl )
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    UnoControlContainer::addingControl( _rxControl );
+
+    if ( _rxControl.is() )
+    {
+        Reference< XMultiPropertySet > xProps( _rxControl->getModel(), UNO_QUERY );
+        if ( xProps.is() )
+        {
+            Sequence< ::rtl::OUString > aNames( 4 );
+            ::rtl::OUString* pNames = aNames.getArray();
+            *pNames++ = ::rtl::OUString::createFromAscii( "PositionX" );
+            *pNames++ = ::rtl::OUString::createFromAscii( "PositionY" );
+            *pNames++ = ::rtl::OUString::createFromAscii( "Width" );
+            *pNames++ = ::rtl::OUString::createFromAscii( "Height" );
+
+            xProps->addPropertiesChangeListener( aNames, this );
+        }
+    }
+}
+
+void UnoDialogContainerControl::removingControl( const Reference< XControl >& _rxControl )
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    UnoControlContainer::removingControl( _rxControl );
+
+    if ( _rxControl.is() )
+    {
+        Reference< XMultiPropertySet > xProps( _rxControl->getModel(), UNO_QUERY );
+        if ( xProps.is() )
+            xProps->removePropertiesChangeListener( this );
+    }
+
+}
+
+void SAL_CALL UnoDialogContainerControl::changesOccurred( const ChangesEvent& ) throw (RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+    // a tab controller model may have changed
+
+    // #109067# in design mode don't notify the tab controller
+    // about tab index changes
+    if ( mxTabController.is() && !mbDesignMode )
+        mxTabController->activateTabOrder();
+}
+
+// ============================================================================
+// = class UnoDialogControl
+// ============================================================================
+
+UnoDialogControl::UnoDialogControl() :
+    maTopWindowListeners( *this ),
+    mbWindowListener(false)
+{
+    maComponentInfos.nWidth = 300;
+    maComponentInfos.nHeight = 450;
+    mxListener = new ResourceListener( Reference< util::XModifyListener >(
+                        static_cast< OWeakObject* >( this ), UNO_QUERY ));
+}
+
+UnoDialogControl::~UnoDialogControl()
+{
+}
+
+::rtl::OUString UnoDialogControl::GetComponentServiceName()
+{
+
+    sal_Bool bDecoration( sal_True );
+    ImplGetPropertyValue( GetPropertyName( BASEPROPERTY_DECORATION )) >>= bDecoration;
+    if ( bDecoration )
+        return ::rtl::OUString::createFromAscii( "Dialog" );
+    else
+        return ::rtl::OUString::createFromAscii( "TabPage" );
+}
+
+// XInterface
+Any UnoDialogControl::queryAggregation( const Type & rType ) throw(RuntimeException)
+{
+        uno::Any aRet = ::cppu::queryInterface( rType, SAL_STATIC_CAST( awt::XTopWindow*, this ) );
+        if ( !aRet.hasValue() )
+            aRet = ::cppu::queryInterface( rType, SAL_STATIC_CAST( awt::XDialog*, this ) );
+        if ( !aRet.hasValue() )
+            aRet = ::cppu::queryInterface( rType, SAL_STATIC_CAST( awt::XWindowListener*, this ) );
+	return (aRet.hasValue() ? aRet : UnoDialogContainerControl::queryAggregation( rType ));
+}
+//lang::XTypeProvider
+IMPL_XTYPEPROVIDER_START( UnoDialogControl)
+    getCppuType( ( uno::Reference< awt::XTopWindow>* ) NULL ),
+    getCppuType( ( uno::Reference< awt::XDialog>* ) NULL ),
+    getCppuType( ( uno::Reference< awt::XWindowListener>* ) NULL ),
+    UnoDialogContainerControl::getTypes()
+IMPL_XTYPEPROVIDER_END
+
+void UnoDialogControl::ImplInsertControl( Reference< XControlModel >& rxModel, const ::rtl::OUString& rName )
+{
+   // maybe this should be in the UnoDialogContainerControl, lets see
+    Reference< XPropertySet > xP( rxModel, UNO_QUERY );
+
+    // Add our own resource resolver to a newly created control
+    Reference< resource::XStringResourceResolver > xStringResourceResolver;
+    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
+
+    Any aAny;
+    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
+
+    aAny <<= xStringResourceResolver;
+    xP->setPropertyValue( aPropName, aAny );
+    UnoDialogContainerControl::ImplInsertControl( rxModel, rName );
+}
+
+void UnoDialogControl::dispose() throw(RuntimeException)
+{
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+
+    EventObject aEvt;
+    aEvt.Source = static_cast< ::cppu::OWeakObject* >( this );
+    maTopWindowListeners.disposeAndClear( aEvt );
+    // Notify our listener helper about dispose
+    // --- SAFE ---
+    ::osl::ResettableGuard< ::osl::Mutex > aGuard( GetMutex() );
+    Reference< XEventListener > xListener( mxListener, UNO_QUERY );
+    mxListener.clear();
+    aGuard.clear();
+    // --- SAFE ---
+
+    if ( xListener.is() )
+        xListener->disposing( aEvt );
+    UnoDialogContainerControl::dispose();
+}
+
+void SAL_CALL UnoDialogControl::disposing(
+    const EventObject& Source )
+throw(RuntimeException)
+{
+    // #FIXME see what can be moved to  UnoDialogControlContainer
+    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
+    Reference< resource::XStringResourceResolver > xStringResourceResolver;
+
+    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
+    Reference< XInterface > xIfac( xStringResourceResolver, UNO_QUERY );
+
+    if ( Source.Source == xIfac )
+    {
+        Any aAny;
+
+        // Reset resource resolver reference
+        ImplSetPropertyValue( aPropName, aAny, sal_True );
+        ImplUpdateResourceResolver();
+    }
+    else
+    {
+        UnoDialogContainerControl::disposing( Source );
+    }
+}
+
+sal_Bool UnoDialogControl::setModel( const Reference< XControlModel >& rxModel ) throw(RuntimeException)
+{
+        // #Can we move all the Resource stuff to the UnoDialogContainerControl ?
+    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
+        sal_Bool bRet = UnoDialogContainerControl::setModel( rxModel );
+    ImplStartListingForResourceEvents();
+    return bRet;
+}
+
 void UnoDialogControl::createPeer( const Reference< XToolkit > & rxToolkit, const Reference< XWindowPeer >  & rParentPeer ) throw(RuntimeException)
 {
     vos::OGuard aSolarGuard( Application::GetSolarMutex() );
@@ -1731,53 +2639,21 @@ void UnoDialogControl::PrepareWindowDescriptor( ::com::sun::star::awt::WindowDes
     // can lead to overwrites we have to set the graphic property
     // before the propertiesChangeEvents are sent!
     ::rtl::OUString aImageURL;
+    Reference< graphic::XGraphic > xGraphic;
     if (( ImplGetPropertyValue( PROPERTY_IMAGEURL ) >>= aImageURL ) &&
         ( aImageURL.getLength() > 0 ))
     {
-        aImageURL = 
-            getPhysicalLocation( ImplGetPropertyValue( PROPERTY_DIALOGSOURCEURL ),
-                                 ImplGetPropertyValue( PROPERTY_IMAGEURL ));
-
-    }
+        ::rtl::OUString absoluteUrl = aImageURL;
     if ( aImageURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) != 0 )
-        ImplSetPropertyValue( PROPERTY_IMAGEURL, uno::makeAny( aImageURL ), sal_True );
-}
-
-void UnoDialogControl::elementInserted( const ContainerEvent& Event ) throw(RuntimeException)
 {
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-
-    Reference< XControlModel > xModel;
-    ::rtl::OUString aName;
-
-    Event.Accessor >>= aName;
-    Event.Element >>= xModel;
-    ImplInsertControl( xModel, aName );
+            absoluteUrl = getPhysicalLocation( ImplGetPropertyValue( PROPERTY_DIALOGSOURCEURL ),
+                                 ImplGetPropertyValue( PROPERTY_IMAGEURL ));
 }
+        // npower, not understanding the comment above, but it surely setting the URL is just as 
+        // effective ( and prevents ambiguity with embedded images )
+        ImplSetPropertyValue( PROPERTY_IMAGEURL, uno::makeAny( absoluteUrl ), sal_True );
 
-void UnoDialogControl::elementRemoved( const ContainerEvent& Event ) throw(RuntimeException)
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-
-    Reference< XControlModel > xModel;
-    Event.Element >>= xModel;
-    if ( xModel.is() )
-        ImplRemoveControl( xModel );
 }
-
-void UnoDialogControl::elementReplaced( const ContainerEvent& Event ) throw(RuntimeException)
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-
-    Reference< XControlModel > xModel;
-    Event.ReplacedElement >>= xModel;
-    if ( xModel.is() )
-        ImplRemoveControl( xModel );
-
-    ::rtl::OUString aName;
-    Event.Accessor >>= aName;
-    Event.Element >>= xModel;
-    ImplInsertControl( xModel, aName );
 }
 
 void UnoDialogControl::addTopWindowListener( const Reference< XTopWindowListener >& rxListener ) throw (RuntimeException)
@@ -1834,12 +2710,6 @@ void UnoDialogControl::setMenuBar( const Reference< XMenuBar >& rxMenuBar ) thro
     }
 }
 
-static ::Size ImplMapPixelToAppFont( OutputDevice* pOutDev, const ::Size& aSize )
-{
-    ::Size aTmp = pOutDev->PixelToLogic( aSize, MAP_APPFONT );
-    return aTmp;
-}
-
 // ::com::sun::star::awt::XWindowListener
 void SAL_CALL UnoDialogControl::windowResized( const ::com::sun::star::awt::WindowEvent& e )
 throw (::com::sun::star::uno::RuntimeException)
@@ -1921,76 +2791,40 @@ throw (::com::sun::star::uno::RuntimeException)
 // XPropertiesChangeListener
 void UnoDialogControl::ImplModelPropertiesChanged( const Sequence< PropertyChangeEvent >& rEvents ) throw(RuntimeException)
 {
-    if( !isDesignMode() && !mbCreatingCompatiblePeer )
-    {
-        ::rtl::OUString s1( RTL_CONSTASCII_USTRINGPARAM( "PositionX" ) );
-        ::rtl::OUString s2( RTL_CONSTASCII_USTRINGPARAM( "PositionY" ) );
-        ::rtl::OUString s3( RTL_CONSTASCII_USTRINGPARAM( "Width" ) );
-        ::rtl::OUString s4( RTL_CONSTASCII_USTRINGPARAM( "Height" ) );
-
         sal_Int32 nLen = rEvents.getLength();
         for( sal_Int32 i = 0; i < nLen; i++ )
         {
             const PropertyChangeEvent& rEvt = rEvents.getConstArray()[i];
             Reference< XControlModel > xModel( rEvt.Source, UNO_QUERY );
             sal_Bool bOwnModel = (XControlModel*)xModel.get() == (XControlModel*)getModel().get();
-            if ( ( rEvt.PropertyName == s1 ) ||
-                 ( rEvt.PropertyName == s2 ) ||
-                 ( rEvt.PropertyName == s3 ) ||
-                 ( rEvt.PropertyName == s4 ) )
-            {
-                if ( bOwnModel )
-                {
-                    if ( !mbPosModified && !mbSizeModified )
-                    {
-                        // Don't set new pos/size if we get new values from window listener
-                        Reference< XControl > xThis( (XAggregation*)(::cppu::OWeakAggObject*)this, UNO_QUERY );
-                        ImplSetPosSize( xThis );
-                    }
-                }
-                else
-                {
-                    Sequence<Reference<XControl> > aControlSequence(getControls());
-                    Reference<XControl> aControlRef( StdTabController::FindControl( aControlSequence, xModel ) );
-                    ImplSetPosSize( aControlRef );
-                }
-                break;
-            }
-            else if ( bOwnModel && rEvt.PropertyName.equalsAsciiL( "ResourceResolver", 16 ))
+        if( !isDesignMode() && !mbCreatingCompatiblePeer && bOwnModel )
             {
+            if ( rEvt.PropertyName.equalsAsciiL( "ResourceResolver", 16 ) )
                 ImplStartListingForResourceEvents();
             }
-        }
-    }
-
-    sal_Int32 nLen = rEvents.getLength();
-    for( sal_Int32 i = 0; i < nLen; i++ )
-    {
-        const PropertyChangeEvent& rEvt = rEvents.getConstArray()[i];
-        Reference< XControlModel > xModel( rEvt.Source, UNO_QUERY );
-        sal_Bool bOwnModel = (XControlModel*)xModel.get() == (XControlModel*)getModel().get();
-        if ( bOwnModel && rEvt.PropertyName.equalsAsciiL( "ImageURL", 8 ))
+        else if ( bOwnModel && rEvt.PropertyName.equalsAsciiL( "ImageURL", 8 ))
         {
             ::rtl::OUString aImageURL;
+            // Ignore GraphicObject urls
             if (( ImplGetPropertyValue( PROPERTY_IMAGEURL ) >>= aImageURL ) &&
                 ( aImageURL.getLength() > 0 ))
             {
-                aImageURL =
-                    getPhysicalLocation( ImplGetPropertyValue( PROPERTY_DIALOGSOURCEURL ),
+                ::rtl::OUString absoluteUrl = aImageURL;
+                if ( aImageURL.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) != 0 )
+                {
+                    absoluteUrl = getPhysicalLocation( ImplGetPropertyValue( PROPERTY_DIALOGSOURCEURL ),
                                          ImplGetPropertyValue( PROPERTY_IMAGEURL ));
-
             }
-
-            ImplSetPropertyValue( PROPERTY_IMAGEURL, uno::makeAny( aImageURL ), sal_True );
-            break;
+                ImplSetPropertyValue( PROPERTY_IMAGEURL, uno::makeAny( absoluteUrl ), sal_True );
         }
     }
-
-    UnoControlContainer::ImplModelPropertiesChanged( rEvents );
+    }
+    UnoDialogContainerControl::ImplModelPropertiesChanged( rEvents );
 }
 
 void UnoDialogControl::ImplStartListingForResourceEvents()
 {
+    // #FIXME can we move this to base class
     Reference< resource::XStringResourceResolver > xStringResourceResolver;
 
     ImplGetPropertyValue( PROPERTY_RESOURCERESOLVER ) >>= xStringResourceResolver;
@@ -2005,21 +2839,16 @@ void UnoDialogControl::ImplStartListingForResourceEvents()
     ImplUpdateResourceResolver();
 }
 
-void UnoDialogControl::ImplUpdateResourceResolver()
+void lcl_ApplyResolverToNestedContainees(  const Reference< resource::XStringResourceResolver >& xStringResourceResolver, const Reference< XControlContainer >& xContainer )
 {
     rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
-    Reference< resource::XStringResourceResolver > xStringResourceResolver;
-
-    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
-    if ( !xStringResourceResolver.is() )
-        return;
 
     Any xNewStringResourceResolver; xNewStringResourceResolver <<= xStringResourceResolver;
 
     Sequence< rtl::OUString > aPropNames(1);
     aPropNames[0] = aPropName;
 
-    const Sequence< Reference< awt::XControl > > aSeq = getControls();
+    const Sequence< Reference< awt::XControl > > aSeq = xContainer->getControls();
     for ( sal_Int32 i = 0; i < aSeq.getLength(); i++ )
     {
         Reference< XControl > xControl( aSeq[i] );
@@ -2050,8 +2879,26 @@ void UnoDialogControl::ImplUpdateResourceResolver()
         catch ( const Exception& )
         {
         }
+
+        uno::Reference< XControlContainer > xNestedContainer( xControl, uno::UNO_QUERY );
+        if ( xNestedContainer.is() )
+            lcl_ApplyResolverToNestedContainees(  xStringResourceResolver, xNestedContainer );
+
     }
 
+}
+
+void UnoDialogControl::ImplUpdateResourceResolver()
+{
+    rtl::OUString aPropName( PROPERTY_RESOURCERESOLVER );
+    Reference< resource::XStringResourceResolver > xStringResourceResolver;
+
+    ImplGetPropertyValue( aPropName ) >>= xStringResourceResolver;
+    if ( !xStringResourceResolver.is() )
+        return;
+
+    lcl_ApplyResolverToNestedContainees(  xStringResourceResolver, this );
+    
     // propagate resource resolver changes to language dependent props of the dialog
     Reference< XPropertySet > xPropertySet( getModel(), UNO_QUERY );
     if ( xPropertySet.is() )
@@ -2121,53 +2968,6 @@ void UnoDialogControl::endExecute() throw(RuntimeException)
     }
 }
 
-void UnoDialogControl::addingControl( const Reference< XControl >& _rxControl )
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-    UnoControlContainer::addingControl( _rxControl );
-
-    if ( _rxControl.is() )
-    {
-        Reference< XMultiPropertySet > xProps( _rxControl->getModel(), UNO_QUERY );
-        if ( xProps.is() )
-        {
-            Sequence< ::rtl::OUString > aNames( 4 );
-            ::rtl::OUString* pNames = aNames.getArray();
-            *pNames++ = ::rtl::OUString::createFromAscii( "PositionX" );
-            *pNames++ = ::rtl::OUString::createFromAscii( "PositionY" );
-            *pNames++ = ::rtl::OUString::createFromAscii( "Width" );
-            *pNames++ = ::rtl::OUString::createFromAscii( "Height" );
-
-            xProps->addPropertiesChangeListener( aNames, this );
-        }
-    }
-}
-
-void UnoDialogControl::removingControl( const Reference< XControl >& _rxControl )
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-    UnoControlContainer::removingControl( _rxControl );
-
-    if ( _rxControl.is() )
-    {
-        Reference< XMultiPropertySet > xProps( _rxControl->getModel(), UNO_QUERY );
-        if ( xProps.is() )
-            xProps->removePropertiesChangeListener( this );
-    }
-
-}
-
-void SAL_CALL UnoDialogControl::changesOccurred( const ChangesEvent& ) throw (RuntimeException)
-{
-    vos::OGuard aSolarGuard( Application::GetSolarMutex() );
-    // a tab controller model may have changed
-
-    // #109067# in design mode don't notify the tab controller
-    // about tab index changes
-    if ( mxTabController.is() && !mbDesignMode )
-        mxTabController->activateTabOrder();
-}
-
 // XModifyListener
 void SAL_CALL UnoDialogControl::modified(
     const lang::EventObject& /*rEvent*/ )
@@ -2183,8 +2983,6 @@ throw (RuntimeException)
 ::rtl::OUString getPhysicalLocation( const ::com::sun::star::uno::Any& rbase, const ::com::sun::star::uno::Any& rUrl )
 {
 
-        ::rtl::OUString ret;
-
     ::rtl::OUString baseLocation;
     ::rtl::OUString url;
 
@@ -2194,16 +2194,9 @@ throw (RuntimeException)
     ::rtl::OUString absoluteURL( url );
     if ( url.getLength() > 0 )
     {
-		// Don't adjust GraphicObject url(s)
-		if ( url.compareToAscii( UNO_NAME_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( UNO_NAME_GRAPHOBJ_URLPREFIX ) ) != 0 )
-		{
 			INetURLObject urlObj(baseLocation);
 			urlObj.removeSegment();
 			baseLocation = urlObj.GetMainURL( INetURLObject::NO_DECODE );
-			::osl::FileBase::getAbsoluteFileURL( baseLocation, url, ret );
-		}
-		else
-			ret = url;
 
         const INetURLObject protocolCheck( url );
         const INetProtocol protocol = protocolCheck.GetProtocol();
diff --git toolkit/source/controls/unocontrolcontainer.cxx toolkit/source/controls/unocontrolcontainer.cxx
index 0fa370e..501aa09 100644
--- toolkit/source/controls/unocontrolcontainer.cxx
+++ toolkit/source/controls/unocontrolcontainer.cxx
@@ -808,7 +808,7 @@ void UnoControlContainer::createPeer( const uno::Reference< awt::XToolkit >& rxT
                 aCtrls.getArray()[n]->createPeer( rxToolkit, getPeer() );
 
             uno::Reference< awt::XVclContainerPeer >  xC( getPeer(), uno::UNO_QUERY );
-
+            if ( xC.is() )
             xC->enableDialogControl( sal_True );
             ImplActivateTabControllers();
         }
diff --git toolkit/source/controls/unocontrols.cxx toolkit/source/controls/unocontrols.cxx
index 30246ae..71fcd3a 100644
--- toolkit/source/controls/unocontrols.cxx
+++ toolkit/source/controls/unocontrols.cxx
@@ -573,7 +573,7 @@ uno::Any ImageProducerControlModel::ImplGetDefaultValue( sal_uInt16 nPropId ) co
 
     return UnoControlModel::ImplGetDefaultValue( nPropId );
 }
-    uno::Reference< graphic::XGraphic > getGraphicFromURL_nothrow( uno::Reference< graphic::XGraphicObject >& rxGrfObj, const ::rtl::OUString& _rURL )
+    uno::Reference< graphic::XGraphic > ImageHelper::getGraphicAndGraphicObjectFromURL_nothrow( uno::Reference< graphic::XGraphicObject >& xOutGraphicObj, const ::rtl::OUString& _rURL )
     {
         uno::Reference< graphic::XGraphic > xGraphic;
 
@@ -583,10 +583,10 @@ uno::Any ImageProducerControlModel::ImplGetDefaultValue( sal_uInt16 nPropId ) co
             rtl::OUString sID = _rURL.copy( sizeof( UNO_NAME_GRAPHOBJ_URLPREFIX ) - 1 );
             // get the DefaultContext
             ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
-            rxGrfObj = graphic::GraphicObject::createWithId( aContext.getUNOContext(), sID );
+            xOutGraphicObj = graphic::GraphicObject::createWithId( aContext.getUNOContext(), sID );
         }
         else // linked
-            rxGrfObj = NULL; // release the GraphicObject
+            xOutGraphicObj = NULL; // release the GraphicObject
 
         if ( !_rURL.getLength() )
             return xGraphic;
@@ -611,6 +611,11 @@ uno::Any ImageProducerControlModel::ImplGetDefaultValue( sal_uInt16 nPropId ) co
         return xGraphic;
     }
 
+    uno::Reference< graphic::XGraphic > GraphicControlModel::getGraphicFromURL_nothrow( const ::rtl::OUString& _rURL )
+    {
+        return ImageHelper::getGraphicAndGraphicObjectFromURL_nothrow( mxGrfObj, _rURL );
+    }
+
 void SAL_CALL GraphicControlModel::setFastPropertyValue_NoBroadcast( sal_Int32 nHandle, const ::com::sun::star::uno::Any& rValue ) throw (::com::sun::star::uno::Exception)
 {
     UnoControlModel::setFastPropertyValue_NoBroadcast( nHandle, rValue );
@@ -627,7 +632,7 @@ void SAL_CALL ImageProducerControlModel::setFastPropertyValue_NoBroadcast( sal_I
                 mbAdjustingGraphic = true;
                 ::rtl::OUString sImageURL;
                 OSL_VERIFY( rValue >>= sImageURL );
-                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( getGraphicFromURL_nothrow( mxGrfObj, sImageURL ) ) );
+                setPropertyValue( GetPropertyName( BASEPROPERTY_GRAPHIC ), uno::makeAny( getGraphicFromURL_nothrow( sImageURL ) ) );
                 mbAdjustingGraphic = false;
             }
             break;
@@ -1844,75 +1849,6 @@ sal_Bool UnoGroupBoxControl::isTransparent() throw(uno::RuntimeException)
     return sal_True;
 }
 
-// MultiPage
-
-UnoMultiPageModel::UnoMultiPageModel()
-{
-	ImplRegisterProperty( BASEPROPERTY_DEFAULTCONTROL );
-	ImplRegisterProperty( BASEPROPERTY_ENABLED );
-	ImplRegisterProperty( BASEPROPERTY_FONTDESCRIPTOR );
-	ImplRegisterProperty( BASEPROPERTY_HELPTEXT );
-	ImplRegisterProperty( BASEPROPERTY_HELPURL );
-	ImplRegisterProperty( BASEPROPERTY_LABEL );
-	ImplRegisterProperty( BASEPROPERTY_PRINTABLE );
-	ImplRegisterProperty( BASEPROPERTY_PROGRESSVALUE );
-	ImplRegisterProperty( BASEPROPERTY_PROGRESSVALUE_MAX );
-}
-
-::rtl::OUString UnoMultiPageModel::getServiceName() throw(::com::sun::star::uno::RuntimeException)
-{
-	return ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageModel );
-}
-
-uno::Any UnoMultiPageModel::ImplGetDefaultValue( sal_uInt16 nPropId ) const
-{
-	if ( nPropId == BASEPROPERTY_DEFAULTCONTROL )
-	{
-		uno::Any aAny;
-		aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoControlGroupBox );
-		//aAny <<= ::rtl::OUString::createFromAscii( szServiceName_UnoMultiPageControl );
-		return aAny;
-	}
-	return UnoControlModel::ImplGetDefaultValue( nPropId );
-}
-
-::cppu::IPropertyArrayHelper& UnoMultiPageModel::getInfoHelper()
-{
-	static UnoPropertyArrayHelper* pHelper = NULL;
-	if ( !pHelper )
-	{
-		uno::Sequence<sal_Int32>	aIDs = ImplGetPropertyIds();
-		pHelper = new UnoPropertyArrayHelper( aIDs );
-	}
-	return *pHelper;
-}
-
-// beans::XMultiPropertySet
-uno::Reference< beans::XPropertySetInfo > UnoMultiPageModel::getPropertySetInfo(  ) throw(uno::RuntimeException)
-{
-	static uno::Reference< beans::XPropertySetInfo > xInfo( createPropertySetInfo( getInfoHelper() ) );
-	return xInfo;
-}
-
-//	----------------------------------------------------
-//	class MultiPageControl
-//	----------------------------------------------------
-UnoMultiPageControl::UnoMultiPageControl()
-{
-	maComponentInfos.nWidth = 100;
-	maComponentInfos.nHeight = 100;
-}
-
-::rtl::OUString UnoMultiPageControl::GetComponentServiceName()
-{
-	return ::rtl::OUString::createFromAscii( "multipage" );
-}
-
-sal_Bool UnoMultiPageControl::isTransparent() throw(uno::RuntimeException)
-{
-	return sal_True;
-}
-
 // =====================================================================================================================
 // = UnoControlListBoxModel_Data
 // =====================================================================================================================
diff --git toolkit/source/helper/listenermultiplexer.cxx toolkit/source/helper/listenermultiplexer.cxx
index 541150e..1394535 100644
--- toolkit/source/helper/listenermultiplexer.cxx
+++ toolkit/source/helper/listenermultiplexer.cxx
@@ -154,6 +154,21 @@ IMPL_LISTENERMULTIPLEXER_BASEMETHODS( ItemListenerMultiplexer, ::com::sun::star:
 IMPL_LISTENERMULTIPLEXER_LISTENERMETHOD( ItemListenerMultiplexer, ::com::sun::star::awt::XItemListener, itemStateChanged, ::com::sun::star::awt::ItemEvent )
 
 //	----------------------------------------------------
+//	class TabListenerMultiplexer
+//	----------------------------------------------------
+IMPL_LISTENERMULTIPLEXER_BASEMETHODS( TabListenerMultiplexer, ::com::sun::star::awt::XTabListener )
+void TabListenerMultiplexer::inserted( sal_Int32 evt ) throw(::com::sun::star::uno::RuntimeException)
+IMPL_TABLISTENERMULTIPLEXER_LISTENERMETHOD_BODY_1PARAM( TabListenerMultiplexer, ::com::sun::star::awt::XTabListener, inserted, ::sal_Int32 )
+void TabListenerMultiplexer::removed( sal_Int32 evt ) throw(::com::sun::star::uno::RuntimeException)
+IMPL_TABLISTENERMULTIPLEXER_LISTENERMETHOD_BODY_1PARAM( TabListenerMultiplexer, ::com::sun::star::awt::XTabListener, removed, ::sal_Int32 )
+void TabListenerMultiplexer::changed( sal_Int32 evt, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue >& evt2 ) throw(::com::sun::star::uno::RuntimeException)
+IMPL_TABLISTENERMULTIPLEXER_LISTENERMETHOD_BODY_2PARAM( TabListenerMultiplexer, ::com::sun::star::awt::XTabListener, changed, ::sal_Int32, ::com::sun::star::uno::Sequence< ::com::sun::star::beans::NamedValue > )
+void TabListenerMultiplexer::activated( sal_Int32 evt ) throw(::com::sun::star::uno::RuntimeException)
+IMPL_TABLISTENERMULTIPLEXER_LISTENERMETHOD_BODY_1PARAM( TabListenerMultiplexer, ::com::sun::star::awt::XTabListener, activated, ::sal_Int32 )
+void TabListenerMultiplexer::deactivated( sal_Int32 evt ) throw(::com::sun::star::uno::RuntimeException)
+IMPL_TABLISTENERMULTIPLEXER_LISTENERMETHOD_BODY_1PARAM( TabListenerMultiplexer, ::com::sun::star::awt::XTabListener, deactivated, ::sal_Int32 )
+
+//	----------------------------------------------------
 //	class ContainerListenerMultiplexer
 //	----------------------------------------------------
 IMPL_LISTENERMULTIPLEXER_BASEMETHODS( ContainerListenerMultiplexer, ::com::sun::star::container::XContainerListener )
diff --git toolkit/source/helper/property.cxx toolkit/source/helper/property.cxx
index 0c0edea..eb3f294 100644
--- toolkit/source/helper/property.cxx
+++ toolkit/source/helper/property.cxx
@@ -55,6 +55,7 @@
 #include <com/sun/star/beans/PropertyAttribute.hpp>
 #include <com/sun/star/graphic/XGraphic.hpp>
 #include <com/sun/star/resource/XStringResourceResolver.hpp>
+#include <com/sun/star/container/XNameContainer.hpp>
 #include <comphelper/types.hxx>
 #include <functional>
 #include <algorithm>
@@ -285,11 +286,14 @@ ImplPropertyInfo* ImplGetPropertyInfos( sal_uInt16& rElementCount )
             DECL_PROP_3     ( "SelectionModel",		    GRID_SELECTIONMODE,     ::com::sun::star::view::SelectionType,          BOUND, MAYBEDEFAULT, MAYBEVOID ),
             DECL_PROP_2     ( "EnableVisible",          ENABLEVISIBLE,          sal_Bool,           BOUND, MAYBEDEFAULT ),
             DECL_PROP_3     ( "ReferenceDevice",        REFERENCE_DEVICE,       Reference< XDevice >,BOUND, MAYBEDEFAULT, TRANSIENT ),
-            DECL_PROP_2     ( "VBAForm",                VBAFORM,                sal_Bool,           BOUND, MAYBEDEFAULT ),
             DECL_PROP_3     ( "EvenRowBackgroundColor", GRID_EVEN_ROW_BACKGROUND, sal_Int32,      BOUND, MAYBEDEFAULT, MAYBEVOID ),
             DECL_PROP_3     ( "HeaderBackgroundColor",  GRID_HEADER_BACKGROUND,  sal_Int32,      BOUND, MAYBEDEFAULT, MAYBEVOID ),
             DECL_PROP_3     ( "GridLineColor",          GRID_LINE_COLOR,         sal_Int32,      BOUND, MAYBEDEFAULT, MAYBEVOID ),
-            DECL_PROP_3     ( "RowBackgroundColor",     GRID_ROW_BACKGROUND,     sal_Int32,      BOUND, MAYBEDEFAULT, MAYBEVOID )		
+            DECL_PROP_3     ( "RowBackgroundColor",     GRID_ROW_BACKGROUND,     sal_Int32,      BOUND, MAYBEDEFAULT, MAYBEVOID ),
+            DECL_DEP_PROP_3 ( "MultiPageValue",          MULTIPAGEVALUE,      sal_Int32,          BOUND, MAYBEDEFAULT, MAYBEVOID ),
+
+            DECL_PROP_3     ( "AllDialogChildren",                USERFORMCONTAINEES,                Reference< ::com::sun::star::container::XNameContainer >,           BOUND, MAYBEDEFAULT, MAYBEVOID ),
+		
     };
             pPropertyInfos = aImplPropertyInfos;
             nElements = sizeof( aImplPropertyInfos ) / sizeof( ImplPropertyInfo );
diff --git toolkit/source/helper/registerservices.cxx toolkit/source/helper/registerservices.cxx
index bcaa925..804b335 100644
--- toolkit/source/helper/registerservices.cxx
+++ toolkit/source/helper/registerservices.cxx
@@ -166,6 +166,8 @@ IMPL_CREATEINSTANCE( UnoControlProgressBarModel )
 IMPL_CREATEINSTANCE( UnoControlScrollBarModel )
 IMPL_CREATEINSTANCE( UnoSpinButtonModel )
 IMPL_CREATEINSTANCE( UnoMultiPageModel )
+IMPL_CREATEINSTANCE( UnoPageModel )
+IMPL_CREATEINSTANCE( UnoFrameModel )
 IMPL_CREATEINSTANCE( UnoControlFixedLineModel )
 IMPL_CREATEINSTANCE( UnoCurrencyFieldControl )
 IMPL_CREATEINSTANCE( UnoDateFieldControl )
@@ -186,6 +188,8 @@ IMPL_CREATEINSTANCE( UnoProgressBarControl )
 IMPL_CREATEINSTANCE( UnoScrollBarControl )
 IMPL_CREATEINSTANCE( UnoSpinButtonControl )
 IMPL_CREATEINSTANCE( UnoMultiPageControl )
+IMPL_CREATEINSTANCE( UnoPageControl )
+IMPL_CREATEINSTANCE( UnoFrameControl )
 IMPL_CREATEINSTANCE( UnoFixedLineControl )
 IMPL_CREATEINSTANCE( VCLXMenuBar )
 IMPL_CREATEINSTANCE( VCLXPointer )
@@ -280,6 +284,10 @@ TOOLKIT_DLLPUBLIC sal_Bool SAL_CALL component_writeInfo( void* _pServiceManager,
         registerServices( xRegistryKey, "UnoSpinButtonControl", szServiceName_UnoSpinButtonControl );
         registerServices( xRegistryKey, "UnoMultiPageModel", szServiceName_UnoMultiPageModel );
         registerServices( xRegistryKey, "UnoMultiPageControl", szServiceName_UnoMultiPageControl );
+        registerServices( xRegistryKey, "UnoPageModel", szServiceName_UnoPageModel );
+        registerServices( xRegistryKey, "UnoPageControl", szServiceName_UnoPageControl );
+        registerServices( xRegistryKey, "UnoFrameModel", szServiceName_UnoFrameModel );
+        registerServices( xRegistryKey, "UnoFrameControl", szServiceName_UnoFrameControl );
         registerServices( xRegistryKey, "UnoFixedLineControl", szServiceName_UnoControlFixedLine, szServiceName2_UnoControlFixedLine );
         registerServices( xRegistryKey, "UnoControlFixedLineModel", szServiceName_UnoControlFixedLineModel, szServiceName2_UnoControlFixedLineModel );
         registerServices( xRegistryKey, "VCLXPrinterServer", szServiceName_PrinterServer, szServiceName2_PrinterServer );
@@ -316,7 +324,6 @@ TOOLKIT_DLLPUBLIC void* SAL_CALL component_getFactory( const sal_Char* sImplemen
     {
         ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory > xServiceFactory =
             static_cast< ::com::sun::star::lang::XMultiServiceFactory* >( _pServiceManager );
-
         CHECKANDCREATEFACTORY( VCLXToolkit, szServiceName_Toolkit, szServiceName2_Toolkit )
         CHECKANDCREATEFACTORY( VCLXPopupMenu, szServiceName_PopupMenu, szServiceName2_PopupMenu )
         CHECKANDCREATEFACTORY( VCLXMenuBar, szServiceName_MenuBar, szServiceName2_MenuBar )
@@ -372,6 +379,10 @@ TOOLKIT_DLLPUBLIC void* SAL_CALL component_getFactory( const sal_Char* sImplemen
         CHECKANDCREATEFACTORY( UnoControlRoadmapModel, szServiceName_UnoControlRoadmapModel, szServiceName2_UnoControlRoadmapModel )
         CHECKANDCREATEFACTORY( UnoMultiPageModel, szServiceName_UnoMultiPageModel, NULL )
         CHECKANDCREATEFACTORY( UnoMultiPageControl, szServiceName_UnoMultiPageControl, NULL )
+        CHECKANDCREATEFACTORY( UnoPageModel, szServiceName_UnoPageModel, NULL )
+        CHECKANDCREATEFACTORY( UnoPageControl, szServiceName_UnoPageControl, NULL )
+        CHECKANDCREATEFACTORY( UnoFrameModel, szServiceName_UnoFrameModel, NULL )
+        CHECKANDCREATEFACTORY( UnoFrameControl, szServiceName_UnoFrameControl, NULL )
         CHECKANDCREATEFACTORY( UnoSpinButtonModel, szServiceName_UnoSpinButtonModel, NULL )
         CHECKANDCREATEFACTORY( UnoSpinButtonControl, szServiceName_UnoSpinButtonControl, NULL )
         CHECKANDCREATEFACTORY( TreeControl, szServiceName_TreeControl, NULL )
diff --git toolkit/source/helper/servicenames.cxx toolkit/source/helper/servicenames.cxx
index 557389a..b79c625 100644
--- toolkit/source/helper/servicenames.cxx
+++ toolkit/source/helper/servicenames.cxx
@@ -93,6 +93,10 @@ const sal_Char __FAR_DATA szServiceName_UnoSpinButtonControl[] = "com.sun.star.a
 const sal_Char __FAR_DATA szServiceName_UnoSpinButtonModel[] = "com.sun.star.awt.UnoControlSpinButtonModel";
 const sal_Char __FAR_DATA szServiceName_UnoMultiPageControl[] = "com.sun.star.awt.UnoControlMultiPage";
 const sal_Char __FAR_DATA szServiceName_UnoMultiPageModel[] = "com.sun.star.awt.UnoMultiPageModel";
+const sal_Char __FAR_DATA szServiceName_UnoPageControl[] = "com.sun.star.awt.UnoControlPage";
+const sal_Char __FAR_DATA szServiceName_UnoPageModel[] = "com.sun.star.awt.UnoPageModel";
+const sal_Char __FAR_DATA szServiceName_UnoFrameControl[] = "com.sun.star.awt.UnoControlFrame";
+const sal_Char __FAR_DATA szServiceName_UnoFrameModel[] = "com.sun.star.awt.UnoFrameModel";
 const sal_Char __FAR_DATA szServiceName_TreeControl[] = "com.sun.star.awt.tree.TreeControl";
 const sal_Char __FAR_DATA szServiceName_TreeControlModel[] = "com.sun.star.awt.tree.TreeControlModel";
 const sal_Char __FAR_DATA szServiceName_MutableTreeDataModel[] = "com.sun.star.awt.tree.MutableTreeDataModel";
diff --git toolkit/source/helper/unowrapper.cxx toolkit/source/helper/unowrapper.cxx
index 93e3bee..de7f33c 100644
--- toolkit/source/helper/unowrapper.cxx
+++ toolkit/source/helper/unowrapper.cxx
@@ -38,6 +38,7 @@
 #include <toolkit/awt/vclxcontainer.hxx>
 #include <toolkit/awt/vclxtopwindow.hxx>
 #include <toolkit/awt/vclxgraphics.hxx>
+#include <awt/vclxtabcontrol.hxx>
 
 #include "toolkit/dllapi.h"
 #include <vcl/svapp.hxx>
@@ -107,6 +108,7 @@ using namespace ::com::sun::star;
         case WINDOW_TABPAGE:        return new VCLXContainer;
 
         case WINDOW_TOOLBOX:		return new VCLXToolBox;
+        case WINDOW_TABCONTROL:		return new VCLXMultiPage;
 
         // case WINDOW_FIXEDLINE:
         // case WINDOW_FIXEDBITMAP:
diff --git vbahelper/inc/vbahelper/vbahelper.hxx vbahelper/inc/vbahelper/vbahelper.hxx
index 35ecda7..4cc1082 100644
--- vbahelper/inc/vbahelper/vbahelper.hxx
+++ vbahelper/inc/vbahelper/vbahelper.hxx
@@ -48,6 +48,7 @@
 #include <sfx2/docfilt.hxx>
 #include <sfx2/docfile.hxx>
 #include <vcl/pointr.hxx>
+#include <oox/helper/graphichelper.hxx>
 #include <memory>
 #include "vbaaccesshelper.hxx"
 
@@ -190,6 +191,7 @@ class VBAHELPER_DLLPUBLIC UserFormGeometryHelper : public AbstractGeometryAttrib
 {
     css::uno::Reference< css::awt::XUnitConversion > mxControlUnits;
     css::uno::Reference< css::beans::XPropertySet > mxModel;
+    std::auto_ptr< oox::GraphicHelper > mpGraphicHelper;
 
     sal_Int32 ConvertLogicToPixel( sal_Int32 nValue, sal_Bool bIsPoint, sal_Bool bIsX, sal_Int16 nSourceUnit );
     sal_Int32 ConvertPixelToLogic( sal_Int32 nValue, sal_Bool bIsPoint, sal_Bool bIsX, sal_Int16 nTargetUnit );
diff --git vbahelper/prj/build.lst vbahelper/prj/build.lst
index 20001db..ded9ee2 100644
--- vbahelper/prj/build.lst
+++ vbahelper/prj/build.lst
@@ -1,4 +1,4 @@
-vba     vbahelper       :       oovbaapi basic sfx2 svx filter cppuhelper vcl comphelper svtools tools sal NULL
+vba     vbahelper       :       oovbaapi oox basic sfx2 svx filter cppuhelper vcl comphelper svtools tools sal NULL
 vba	vbahelper									usr1	-	all	  vba_mkout NULL
 #vba	vbahelper\inc								nmake	-	all	vba_inc NULL
 vba	vbahelper\source\vbahelper                        nmake	-	all	vba_vbahelper NULL
diff --git vbahelper/source/msforms/vbacontrol.cxx vbahelper/source/msforms/vbacontrol.cxx
index 994da25..12ea0b5 100644
--- vbahelper/source/msforms/vbacontrol.cxx
+++ vbahelper/source/msforms/vbacontrol.cxx
@@ -559,6 +559,11 @@ ScVbaControl* ScVbaControlFactory::createControl( const uno::Reference< awt::XCo
     pControl = new ScVbaSpinButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
     else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.custom.awt.UnoControlSystemAXContainerModel") ) ) )
     pControl = new VbaSystemAXControl( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    // #FIXME implement a page control
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoPageModel") ) ) )
+	pControl = new ScVbaControl( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoFrameModel") ) ) )
+	pControl = new ScVbaFrame( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
     else
         throw uno::RuntimeException( rtl::OUString::createFromAscii("Unsupported control " ), uno::Reference< uno::XInterface >() );
     return pControl;
diff --git vbahelper/source/msforms/vbacontrols.cxx vbahelper/source/msforms/vbacontrols.cxx
index a82c9a4..73d67cc 100644
--- vbahelper/source/msforms/vbacontrols.cxx
+++ vbahelper/source/msforms/vbacontrols.cxx
@@ -66,20 +66,33 @@ private:
                 msNames.realloc( nIndex );
 
             msNames[ nIndex ] = getControlName( xCtrl );
-            mControls.push_back( xCtrl );
             mIndices[ msNames[ nIndex ] ] = nIndex;
         } 
     }
 
+    void getNestedControls( ControlVec& vControls, uno::Reference< awt::XControlContainer >& xContainer )
+    {
+        uno::Sequence< uno::Reference< awt::XControl > > aControls = xContainer->getControls();
+        const uno::Reference< awt::XControl >* pCtrl = aControls.getConstArray();
+        const uno::Reference< awt::XControl >* pCtrlsEnd = pCtrl + aControls.getLength();
+        for ( ; pCtrl < pCtrlsEnd; ++pCtrl )
+        {
+            uno::Reference< awt::XControlContainer > xC( *pCtrl, uno::UNO_QUERY );
+            vControls.push_back( *pCtrl );
+            if ( xC.is() )
+                getNestedControls( vControls, xC );
+        }
+    }
+
 public:
     ControlArrayWrapper( const uno::Reference< awt::XControl >& xDialog )
     {
         mxDialog.set( xDialog, uno::UNO_QUERY_THROW );
-        uno::Sequence< uno::Reference< awt::XControl > > sXControls = mxDialog->getControls();
-    
-        msNames.realloc( sXControls.getLength() );
-        for ( sal_Int32 i = 0; i < sXControls.getLength(); ++i )
-            SetArrayElementTo( sXControls[ i ], i );
+//        uno::Sequence< uno::Reference< awt::XControl > > sXControls = mxDialog->getControls();
+        getNestedControls( mControls, mxDialog );
+        msNames.realloc( mControls.size() );
+        for ( sal_uInt32 i = 0; i < mControls.size(); ++i )
+            SetArrayElementTo( mControls[ i ], i );
     }
  
     static rtl::OUString getControlName( const uno::Reference< awt::XControl >& xCtrl )
diff --git vbahelper/source/msforms/vbamultipage.cxx vbahelper/source/msforms/vbamultipage.cxx
index 8b3592c..e42d49d 100644
--- vbahelper/source/msforms/vbamultipage.cxx
+++ vbahelper/source/msforms/vbamultipage.cxx
@@ -28,14 +28,12 @@
 #include <ooo/vba/XCollection.hpp>
 #include "vbapages.hxx"
 #include <vector>
+#include <com/sun/star/container/XNameContainer.hpp>
 
 using namespace com::sun::star;
 using namespace ooo::vba;
 
-// uno servicename com.sun.star.awt.UnoControlProgressBarMode
-const rtl::OUString SVALUE( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") );
-const rtl::OUString SVALUEMAX( RTL_CONSTASCII_USTRINGPARAM("ProgressValueMax") );
-const rtl::OUString SSTEP( RTL_CONSTASCII_USTRINGPARAM("Step") );
+const rtl::OUString SVALUE( RTL_CONSTASCII_USTRINGPARAM("MultiPageValue") );
 
 typedef cppu::WeakImplHelper1< container::XIndexAccess > PagesImpl_Base;
 class PagesImpl : public PagesImpl_Base
@@ -71,8 +69,6 @@ ScVbaMultiPage::getPages( sal_Int32 nPages )
 ScVbaMultiPage::ScVbaMultiPage( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper, const uno::Reference< uno::XInterface >& xDialog ) : MultiPageImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
 {
     mxDialogProps.set( xDialog, uno::UNO_QUERY_THROW );
-    // set dialog step to value of multipage pseudo model
-    setValue(getValue());
 }
 
 // Attributes
@@ -81,17 +77,17 @@ ScVbaMultiPage::getValue() throw (css::uno::RuntimeException)
 {
     sal_Int32 nValue = 0;
     m_xProps->getPropertyValue( SVALUE ) >>= nValue;
-    return nValue;
+    // VBA 0 based tab index
+    return nValue - 1;
 }
 
 void SAL_CALL 
 ScVbaMultiPage::setValue( const sal_Int32 _value ) throw (::com::sun::star::uno::RuntimeException)
 {
-    // track change in dialog ( dialog value is 1 based, 0 is a special value )
-    sal_Int32 nVal = _value; // will be _value + 1 when cws container_controls is integrated
+    // Openoffice 1 based tab index
+    sal_Int32 nVal = _value + 1;
     sal_Int32 nOldVal = getValue();
-    m_xProps->setPropertyValue( SVALUE, uno::makeAny( _value ) );
-    mxDialogProps->setPropertyValue( SSTEP, uno::makeAny( _value + 1) );
+    m_xProps->setPropertyValue( SVALUE, uno::makeAny( nVal ) );
     if ( nVal != nOldVal )
         fireChangeEvent();
 }
@@ -107,9 +103,9 @@ ScVbaMultiPage::getServiceImplName()
 uno::Any SAL_CALL 
 ScVbaMultiPage::Pages( const uno::Any& index ) throw (uno::RuntimeException)
 {
-    sal_Int32 nValue = 0;
-    m_xProps->getPropertyValue( SVALUEMAX ) >>= nValue;
-    uno::Reference< XCollection > xColl( new ScVbaPages( this, mxContext, getPages( nValue ) ) );
+        // get the container model
+        uno::Reference< container::XNameContainer > xContainer( m_xProps, uno::UNO_QUERY_THROW );
+	uno::Reference< XCollection > xColl( new ScVbaPages( this, mxContext, getPages( xContainer->getElementNames().getLength() ) ) );
     if ( !index.hasValue() )
         return uno::makeAny( xColl );
     return xColl->Item( uno::makeAny( index ), uno::Any() );
diff --git vbahelper/source/msforms/vbauserform.cxx vbahelper/source/msforms/vbauserform.cxx
index eab951c..90170da 100644
--- vbahelper/source/msforms/vbauserform.cxx
+++ vbahelper/source/msforms/vbauserform.cxx
@@ -27,8 +27,8 @@
 #include <vbahelper/helperdecl.hxx>
 #include "vbauserform.hxx"
 #include <com/sun/star/awt/XControl.hpp>
-#include <com/sun/star/awt/XControlContainer.hpp>
 #include <com/sun/star/beans/PropertyConcept.hpp>
+#include <com/sun/star/container/XNameContainer.hpp>
 #include <basic/sbx.hxx>
 #include <basic/sbstar.hxx>
 #include <basic/sbmeth.hxx>
@@ -166,12 +166,38 @@ ScVbaUserForm::setValue( const ::rtl::OUString& aPropertyName, const uno::Any& a
     xPropSet->setPropertyValue( aDfltPropName, aValue );
 }
 
+uno::Reference< awt::XControl > 
+ScVbaUserForm::nestedSearch( const rtl::OUString& aPropertyName, uno::Reference< awt::XControlContainer >& xContainer )
+{
+    uno::Reference< awt::XControl > xControl = xContainer->getControl( aPropertyName );
+    if ( !xControl.is() )
+    {
+        uno::Sequence< uno::Reference< awt::XControl > > aControls = xContainer->getControls();
+        const uno::Reference< awt::XControl >* pCtrl = aControls.getConstArray();
+        const uno::Reference< awt::XControl >* pCtrlsEnd = pCtrl + aControls.getLength();
+
+        for ( ; pCtrl < pCtrlsEnd; ++pCtrl )
+        {
+            uno::Reference< awt::XControlContainer > xC( *pCtrl, uno::UNO_QUERY );
+            if ( xC.is() )
+            {
+                xControl.set( nestedSearch( aPropertyName, xC ) );
+                if ( xControl.is() )
+                    break;
+            } 
+        }
+    }
+    return xControl;
+}
+
 uno::Any SAL_CALL 
 ScVbaUserForm::getValue( const ::rtl::OUString& aPropertyName ) throw (beans::UnknownPropertyException, uno::RuntimeException)
 {
     uno::Reference< awt::XControl > xDialogControl( m_xDialog, uno::UNO_QUERY_THROW );
     uno::Reference< awt::XControlContainer > xContainer( m_xDialog, uno::UNO_QUERY_THROW );
-    uno::Reference< awt::XControl > xControl = xContainer->getControl( aPropertyName );
+        
+	uno::Reference< awt::XControl > xControl = nestedSearch( aPropertyName, xContainer );
+xContainer->getControl( aPropertyName );
     ScVbaControlFactory aFac( mxContext, xControl, m_xModel );
         uno::Reference< msforms::XControl > xVBAControl( aFac.createControl( xDialogControl->getModel() ) );
         ScVbaControl* pControl  = dynamic_cast< ScVbaControl* >( xVBAControl.get() );
@@ -200,14 +226,19 @@ ScVbaUserForm::Controls( const uno::Any& index ) throw (uno::RuntimeException)
 ScVbaUserForm::hasProperty( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
 {
     uno::Reference< awt::XControl > xControl( m_xDialog, uno::UNO_QUERY );
+        
     OSL_TRACE("ScVbaUserForm::hasProperty(%s) %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), xControl.is() );
     if ( xControl.is() )
     {
-        uno::Reference< container::XNameAccess > xNameAccess( xControl->getModel(), uno::UNO_QUERY_THROW );	
-        sal_Bool bRes =  xNameAccess->hasByName( aName );
-    OSL_TRACE("ScVbaUserForm::hasProperty(%s) %d ---> %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), xControl.is(), bRes );
+	        uno::Reference< beans::XPropertySet > xDlgProps( xControl->getModel(), uno::UNO_QUERY );
+                if ( xDlgProps.is() )
+                {
+                    uno::Reference< container::XNameContainer > xAllChildren( xDlgProps->getPropertyValue( rtl::OUString::createFromAscii("AllDialogChildren" ) ), uno::UNO_QUERY_THROW );
+		    sal_Bool bRes =  xAllChildren->hasByName( aName );
+                    OSL_TRACE("ScVbaUserForm::hasProperty(%s) %d ---> %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), xAllChildren.is(), bRes );
         return bRes;
     }
+    }
     return sal_False;
 }
 
diff --git vbahelper/source/msforms/vbauserform.hxx vbahelper/source/msforms/vbauserform.hxx
index fc55bb3..ccc853e 100644
--- vbahelper/source/msforms/vbauserform.hxx
+++ vbahelper/source/msforms/vbauserform.hxx
@@ -30,6 +30,7 @@
 #include <cppuhelper/implbase1.hxx>
 #include <ooo/vba/msforms/XUserForm.hpp>
 #include <com/sun/star/awt/XDialog.hpp>
+#include <com/sun/star/awt/XControlContainer.hpp>
 #include <com/sun/star/frame/XModel.hpp>
 
 #include <vbahelper/vbahelperinterface.hxx>
@@ -48,6 +49,7 @@ protected:
 public:
     ScVbaUserForm( css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext >const& xContext ) throw ( css::lang::IllegalArgumentException );
     virtual ~ScVbaUserForm();
+    static css::uno::Reference< css::awt::XControl > nestedSearch( const rtl::OUString& aPropertyName, css::uno::Reference< css::awt::XControlContainer >& xContainer );
     // XUserForm
     virtual void SAL_CALL RePaint(  ) throw (css::uno::RuntimeException);
     virtual void SAL_CALL Show(  ) throw (css::uno::RuntimeException);
diff --git vbahelper/source/vbahelper/vbahelper.cxx vbahelper/source/vbahelper/vbahelper.cxx
index 89892d7..c02569d 100644
--- vbahelper/source/vbahelper/vbahelper.cxx
+++ vbahelper/source/vbahelper/vbahelper.cxx
# FIXME ooo330m2: upstream added another conversion related hack; it might obsolete this changes
#                 the only still needed think might be the oox::GraphicHelper.reset => created new hunk just for this change
#@@ -987,49 +987,95 @@ void setOrAppendPropertyValue( uno::Sequence< beans::PropertyValue >& aProp, con
# 
# #define VBA_LEFT "PositionX"
# #define VBA_TOP "PositionY"
#-UserFormGeometryHelper::UserFormGeometryHelper( const uno::Reference< uno::XComponentContext >& /*xContext*/, const uno::Reference< awt::XControl >& xControl )
#+UserFormGeometryHelper::UserFormGeometryHelper( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< awt::XControl >& xControl )
# {
#     mxModel.set( xControl->getModel(), uno::UNO_QUERY_THROW );
#+    uno::Reference< lang::XMultiServiceFactory > xFac( ( xContext.is() ? xContext->getServiceManager() : NULL ), uno::UNO_QUERY_THROW );
#+    // TODO We need access to a document GraphicHelper (  shared with oox ? )
#+    // maybe wrap this in an uno service? It's purty naff creating these
#+    // per control object
#+    mpGraphicHelper.reset( new oox::GraphicHelper( xFac, NULL ) );
# }
#     double UserFormGeometryHelper::getLeft()
#     {
#     sal_Int32 nLeft = 0;
#     mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_LEFT ) ) ) >>= nLeft;	
#-    return Millimeter::getInPoints( nLeft );
#+        //control units are in appfont
#+        awt::Point aPoint( nLeft, nLeft );
#+        //covert appfont to hmm
#+        aPoint = mpGraphicHelper->convertAppFontToHmm( aPoint );
#+        //convert hmm to Points
#+        return Millimeter::getInPoints( aPoint.X );
#     }
#     void UserFormGeometryHelper::setLeft( double nLeft )
#     {
#-        mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_LEFT ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nLeft ) ) );
#+        //covert Points to hmm
#+        awt::Point aPoint( Millimeter::getInHundredthsOfOneMillimeter( nLeft ), 
#+          Millimeter::getInHundredthsOfOneMillimeter( nLeft ) );
#+        //convert hmm to appfont
#+        aPoint = mpGraphicHelper->convertHmmToAppFont( aPoint );
#+        mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_LEFT ) ), uno::makeAny( aPoint.X ) );
#     }
#     double UserFormGeometryHelper::getTop()
#     {
#     sal_Int32 nTop = 0;
#     mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_TOP ) ) ) >>= nTop;	
#-    return Millimeter::getInPoints( nTop );
#+        //control units are in appfont
#+        awt::Point aPoint( nTop, nTop );
#+        //covert appfont to hmm
#+        aPoint = mpGraphicHelper->convertAppFontToHmm( aPoint );
#+        //convert hmm to Points
#+	return Millimeter::getInPoints( aPoint.X );
#     }
#     void UserFormGeometryHelper::setTop( double nTop )
#     {
#-    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	VBA_TOP ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nTop ) ) );
#+        //covert Points to hmm
#+        awt::Point aPoint( Millimeter::getInHundredthsOfOneMillimeter( nTop ), 
#+          Millimeter::getInHundredthsOfOneMillimeter( nTop ) );
#+        //convert hmm to appfont
#+        aPoint = mpGraphicHelper->convertHmmToAppFont( aPoint );
#+        mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_TOP ) ), uno::makeAny( aPoint.X ) );
#     }
#     double UserFormGeometryHelper::getHeight()
#     {
#     sal_Int32 nHeight = 0;
#     mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( NAME_HEIGHT ) ) ) >>= nHeight;	
#-    return Millimeter::getInPoints( nHeight );
#+        //control units are in appfont
#+        awt::Point aPoint( nHeight, nHeight );
#+        //covert appfont to hmm
#+        aPoint = mpGraphicHelper->convertAppFontToHmm( aPoint );
#+        //convert hmm to Points
#+	return Millimeter::getInPoints( aPoint.X );
#     }
#+
#     void UserFormGeometryHelper::setHeight( double nHeight )
#     {
#-    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	NAME_HEIGHT ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nHeight ) ) );
#+        //covert Points to hmm
#+        awt::Point aPoint( Millimeter::getInHundredthsOfOneMillimeter( nHeight ), 
#+          Millimeter::getInHundredthsOfOneMillimeter( nHeight ) );
#+        //convert hmm to appfont
#+        aPoint = mpGraphicHelper->convertHmmToAppFont( aPoint );
#+        mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( NAME_HEIGHT ) ), uno::makeAny( aPoint.X ) );
#     }
#     double UserFormGeometryHelper::getWidth()
#     {
#     sal_Int32 nWidth = 0;
#     mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	NAME_WIDTH ) ) ) >>= nWidth;	
#-    return Millimeter::getInPoints( nWidth );
#+        //control units are in appfont
#+        awt::Point aPoint( nWidth, nWidth );
#+        //covert appfont to hmm
#+        aPoint = mpGraphicHelper->convertAppFontToHmm( aPoint );
#+        //convert hmm to Points
#+	return Millimeter::getInPoints( aPoint.X );
#     }
#     void UserFormGeometryHelper::setWidth( double nWidth)
#     {
#-    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	NAME_WIDTH ) ), uno::makeAny(  Millimeter::getInHundredthsOfOneMillimeter( nWidth ) ) );
#+        //covert Points to hmm
#+        awt::Point aPoint( Millimeter::getInHundredthsOfOneMillimeter( nWidth ), 
#+          Millimeter::getInHundredthsOfOneMillimeter( nWidth ) );
#+        //convert hmm to appfont
#+        aPoint = mpGraphicHelper->convertHmmToAppFont( aPoint );
#+	mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	NAME_WIDTH ) ), uno::makeAny(  aPoint.X ) );
#     }
# 
#     double ConcreteXShapeGeometryAttributes::getLeft()
@@ -987,11 +987,17 @@ void setOrAppendPropertyValue( uno::Sequ
 
 // ====UserFormGeomentryHelper====
 //---------------------------------------------
-UserFormGeometryHelper::UserFormGeometryHelper( const uno::Reference< uno::XComponentContext >& /*xContext*/, const uno::Reference< awt::XControl >& xControl )
+UserFormGeometryHelper::UserFormGeometryHelper( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< awt::XControl >& xControl )
 {
     if ( !xControl.is() )
         throw uno::RuntimeException();
 
+    uno::Reference< lang::XMultiServiceFactory > xFac( ( xContext.is() ? xContext->getServiceManager() : NULL ), uno::UNO_QUERY_THROW );
+    // TODO We need access to a document GraphicHelper (  shared with oox ? )
+    // maybe wrap this in an uno service? It's purty naff creating these
+    // per control object
+    mpGraphicHelper.reset( new oox::GraphicHelper( xFac, NULL ) );
+
     mxControlUnits.set( xControl->getPeer(), uno::UNO_QUERY_THROW );
     mxModel.set( xControl->getModel(), uno::UNO_QUERY_THROW );
 }
diff --git vbahelper/util/makefile.mk vbahelper/util/makefile.mk
index 33c4900..4b08391 100644
--- vbahelper/util/makefile.mk
+++ vbahelper/util/makefile.mk
@@ -61,6 +61,7 @@ SHL1STDLIBS=       \
         $(VCLLIB) \
         $(SVTOOLLIB)    \
         $(MSFILTERLIB)    \
+		$(OOXLIB)    \
         $(TKLIB)
 
 SHL1DEPN=
diff --git vcl/inc/vcl/tabctrl.hxx vcl/inc/vcl/tabctrl.hxx
index da4014b..ff50ee6 100644
--- vcl/inc/vcl/tabctrl.hxx
+++ vcl/inc/vcl/tabctrl.hxx
@@ -102,6 +102,7 @@ private:
 protected:
     using Window::ImplInit;
     SAL_DLLPRIVATE void         ImplInit( Window* pParent, WinBits nStyle );
+    SAL_DLLPRIVATE WinBits      ImplInitStyle( WinBits nStyle );
     SAL_DLLPRIVATE void         ImplLoadRes( const ResId& rResId );
 
     virtual void		        FillLayoutData() const;
diff --git vcl/source/control/group.cxx vcl/source/control/group.cxx
index 9b42370..f66ced1 100644
--- vcl/source/control/group.cxx
+++ vcl/source/control/group.cxx
@@ -136,6 +136,7 @@ GroupBox::GroupBox( Window* pParent, const ResId& rResId ) :
 void GroupBox::ImplDraw( OutputDevice* pDev, ULONG nDrawFlags,
                          const Point& rPos, const Size& rSize, bool bLayout )
 {
+        OSL_TRACE("GroupBox::ImplDraw Y %d, X %d", rPos.Y(), rPos.X() );
     long					nTop;
     long					nTextOff;
     const StyleSettings&	rStyleSettings = GetSettings().GetStyleSettings();
diff --git vcl/source/control/tabctrl.cxx vcl/source/control/tabctrl.cxx
index 0df0604..39dec76 100644
--- vcl/source/control/tabctrl.cxx
+++ vcl/source/control/tabctrl.cxx
@@ -206,6 +206,18 @@ WinBits TabControl::ImplInitStyle( WinBits nStyle )
 
 // -----------------------------------------------------------------------
 
+WinBits TabControl::ImplInitStyle( WinBits nStyle )
+{
+    if ( !(nStyle & WB_NOTABSTOP) )
+        nStyle |= WB_TABSTOP;
+    if ( !(nStyle & WB_NOGROUP) )
+        nStyle |= WB_GROUP;
+
+    return nStyle;
+}
+
+// -----------------------------------------------------------------------
+
 void TabControl::ImplInitSettings( BOOL bFont,
                                    BOOL bForeground, BOOL bBackground )
 {
@@ -262,6 +274,7 @@ TabControl::TabControl( Window* pParent, WinBits nStyle ) :
     Control( WINDOW_TABCONTROL )
 {
     ImplInit( pParent, nStyle );
+    OSL_TRACE("*** TABCONTROL no notabs? %s", ( GetStyle() & WB_NOBORDER ) ? "true" : "false" );
 }
 
 // -----------------------------------------------------------------------
@@ -728,6 +741,12 @@ void TabControl::ImplChangeTabPage( USHORT nId, USHORT nOldId )
 
     if ( pPage )
     {
+        if (  ( GetStyle() & WB_NOBORDER ) )
+        {
+            Rectangle aRectNoTab( (const Point&)Point( 0, 0 ), GetSizePixel() );
+            pPage->SetPosSizePixel( aRectNoTab.TopLeft(), aRectNoTab.GetSize() );
+        }
+        else
         pPage->SetPosSizePixel( aRect.TopLeft(), aRect.GetSize() );
 
         // activate page here so the conbtrols can be switched
@@ -788,6 +807,12 @@ BOOL TabControl::ImplPosCurTabPage()
     ImplTabItem* pItem = ImplGetItem( GetCurPageId() );
     if ( pItem && pItem->mpTabPage )
     {
+        if (  ( GetStyle() & WB_NOBORDER ) )
+        {
+            Rectangle aRectNoTab( (const Point&)Point( 0, 0 ), GetSizePixel() );
+            pItem->mpTabPage->SetPosSizePixel( aRectNoTab.TopLeft(), aRectNoTab.GetSize() );
+            return TRUE;
+        }
         Rectangle aRect = ImplGetTabRect( TAB_PAGERECT );
         pItem->mpTabPage->SetPosSizePixel( aRect.TopLeft(), aRect.GetSize() );
         return TRUE;
@@ -1198,6 +1223,7 @@ void TabControl::KeyInput( const KeyEvent& rKEvt )
 
 void TabControl::Paint( const Rectangle& rRect )
 {
+    if (  !( GetStyle() & WB_NOBORDER ) )
     ImplPaint( rRect, false );
 }
 
@@ -1643,6 +1669,10 @@ void TabControl::StateChanged( StateChangedType nType )
         ImplInitSettings( FALSE, FALSE, TRUE );
         Invalidate();
     }
+    else if ( nType == STATE_CHANGE_STYLE )
+    {
+        SetStyle( ImplInitStyle( GetStyle() ) );
+    }
 }
 
 // -----------------------------------------------------------------------
diff --git xmlscript/inc/xmlscript/xmldlg_imexp.hxx xmlscript/inc/xmlscript/xmldlg_imexp.hxx
index 987a8c3..9a91e24 100644
--- xmlscript/inc/xmlscript/xmldlg_imexp.hxx
+++ xmlscript/inc/xmlscript/xmldlg_imexp.hxx
@@ -27,8 +27,6 @@
 #ifndef _XMLSCRIPT_XMLDLG_IMEXP_HXX_
 #define _XMLSCRIPT_XMLDLG_IMEXP_HXX_
 
-#include <com/sun/star/frame/XModel.hpp>
-
 #ifndef _COM_SUN_STAR_CONTAINER_XNAMECONTAINER_HXX_
 #include <com/sun/star/container/XNameContainer.hpp>
 #endif
@@ -41,6 +39,7 @@
 #ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HXX_
 #include <com/sun/star/uno/XComponentContext.hpp>
 #endif
+#include <com/sun/star/frame/XModel.hpp>
 
 #include "xmlscript/xmlns.h"
 
@@ -93,7 +92,6 @@ void SAL_CALL importDialogModel(
     ::com::sun::star::uno::Reference<
     ::com::sun::star::frame::XModel > const & xDocument )
     SAL_THROW( (::com::sun::star::uno::Exception) );
-
 }
 
 #endif
diff --git xmlscript/source/xmldlg_imexp/common.hxx xmlscript/source/xmldlg_imexp/common.hxx
index 5a41608..68ef4fb 100644
--- xmlscript/source/xmldlg_imexp/common.hxx
+++ xmlscript/source/xmldlg_imexp/common.hxx
@@ -39,4 +39,5 @@ const sal_Int16 BORDER_SIMPLE_COLOR = 3;
 
 }
 
+#define XMLSCRIPT_GRAPHOBJ_URLPREFIX "vnd.sun.star.GraphicObject:"
 #endif
diff --git xmlscript/source/xmldlg_imexp/exp_share.hxx xmlscript/source/xmldlg_imexp/exp_share.hxx
index d06ffee..46088bf 100644
--- xmlscript/source/xmldlg_imexp/exp_share.hxx
+++ xmlscript/source/xmldlg_imexp/exp_share.hxx
@@ -90,16 +90,18 @@ class ElementDescriptor
 {
     css::uno::Reference< css::beans::XPropertySet > _xProps;
     css::uno::Reference< css::beans::XPropertyState > _xPropState;
+    css::uno::Reference< css::frame::XModel > _xDocument;
     
 public:
     inline ElementDescriptor(
         css::uno::Reference< css::beans::XPropertySet > const & xProps,
         css::uno::Reference< css::beans::XPropertyState > const & xPropState,
-        ::rtl::OUString const & name )
+        ::rtl::OUString const & name, css::uno::Reference< css::frame::XModel > const & xDocument )
         SAL_THROW( () )
         : XMLElement( name )
         , _xProps( xProps )
         , _xPropState( xPropState )
+ 	, _xDocument( xDocument ) 
         {}
     inline ElementDescriptor(
         ::rtl::OUString const & name )
@@ -141,6 +143,8 @@ public:
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
     void readVerticalAlignAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
+    void readImageURLAttr(
+        ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
     void readImageAlignAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
     void readImagePositionAttr(
@@ -158,6 +162,8 @@ public:
     void readSelectionTypeAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
     //
+    void readDataAwareAttr(
+        ::rtl::OUString const & rAttrName );
     inline void addBoolAttr(
         ::rtl::OUString const & rAttrName, sal_Bool bValue )
         { addAttribute( rAttrName, ::rtl::OUString::valueOf(bValue) ); }
@@ -171,17 +177,23 @@ public:
     //
     void readDialogModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
+    void readBullitinBoard( StyleBag * all_styles )
+        SAL_THROW( (css::uno::Exception) );
     void readMultiPageModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
+    void readFrameModel( StyleBag * all_styles )
+        SAL_THROW( (css::uno::Exception) );
+    void readPageModel( StyleBag * all_styles )
+        SAL_THROW( (css::uno::Exception) );
     void readButtonModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readEditModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readCheckBoxModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readRadioButtonModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readRadioButtonModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readComboBoxModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readComboBoxModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readCurrencyFieldModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
@@ -195,9 +207,9 @@ public:
         SAL_THROW( (css::uno::Exception) );
     void readGroupBoxModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readImageControlModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument  )
+    void readImageControlModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readListBoxModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readListBoxModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readNumericFieldModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
@@ -211,9 +223,9 @@ public:
         SAL_THROW( (css::uno::Exception) );
     void readProgressBarModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readScrollBarModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readScrollBarModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
-    void readSpinButtonModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+    void readSpinButtonModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
     void readFixedHyperLinkModel( StyleBag * all_styles )
         SAL_THROW( (css::uno::Exception) );
diff --git xmlscript/source/xmldlg_imexp/imp_share.hxx xmlscript/source/xmldlg_imexp/imp_share.hxx
index 0bc9756..82c3b0d 100644
--- xmlscript/source/xmldlg_imexp/imp_share.hxx
+++ xmlscript/source/xmldlg_imexp/imp_share.hxx
@@ -42,9 +42,8 @@
 #include <com/sun/star/awt/FontEmphasisMark.hpp>
 #include <com/sun/star/awt/FontRelief.hpp>
 #include <com/sun/star/xml/input/XRoot.hpp>
-#include <com/sun/star/script/XLibraryContainer.hpp>
 #include <vector>
-
+#include <boost/shared_ptr.hpp>
 
 namespace css = ::com::sun::star;
 
@@ -116,21 +115,25 @@ inline bool getLongAttr(
 class ImportContext;
 
 //==============================================================================
+typedef ::cppu::WeakImplHelper1< css::xml::input::XRoot >   DialogImport_Base;
 struct DialogImport
-    : public ::cppu::WeakImplHelper1< css::xml::input::XRoot >
+    : DialogImport_Base
 {
     friend class ImportContext;
     
     css::uno::Reference< css::uno::XComponentContext > _xContext;
     css::uno::Reference< css::util::XNumberFormatsSupplier > _xSupplier;
     
-    ::std::vector< ::rtl::OUString > _styleNames;
-    ::std::vector< css::uno::Reference< css::xml::input::XElement > > _styles;
+    ::boost::shared_ptr< ::std::vector< ::rtl::OUString > > _pStyleNames;
+    ::boost::shared_ptr< ::std::vector< css::uno::Reference< css::xml::input::XElement > > > _pStyles;
+    ::std::vector< ::rtl::OUString >& _styleNames;
+    ::std::vector< css::uno::Reference< css::xml::input::XElement > >& _styles;
+
     
     css::uno::Reference< css::container::XNameContainer > _xDialogModel;
     css::uno::Reference< css::lang::XMultiServiceFactory > _xDialogModelFactory;
     css::uno::Reference< css::frame::XModel > _xDoc;
-    css::uno::Reference< css::script::XLibraryContainer > _xScriptLibraryContainer;
+
 
     sal_Int32 XMLNS_DIALOGS_UID, XMLNS_SCRIPT_UID;
     
@@ -165,19 +168,36 @@ public:
         css::uno::Reference<css::uno::XComponentContext> const & xContext,
         css::uno::Reference<css::container::XNameContainer>
         const & xDialogModel,
+        ::boost::shared_ptr< ::std::vector< ::rtl::OUString > >& pStyleNames,
+        ::boost::shared_ptr< ::std::vector< css::uno::Reference< css::xml::input::XElement > > >& pStyles,
         css::uno::Reference<css::frame::XModel> const & xDoc )
         SAL_THROW( () )
         : _xContext( xContext )
+        , _pStyleNames( pStyleNames )
+        , _pStyles( pStyles )
+        , _styleNames( *_pStyleNames )
+        , _styles( *_pStyles )
         , _xDialogModel( xDialogModel )
-        , _xDialogModelFactory( xDialogModel, css::uno::UNO_QUERY_THROW ), _xDoc( xDoc )
+        , _xDialogModelFactory( xDialogModel, css::uno::UNO_QUERY_THROW )
+        , _xDoc( xDoc ) 
         { OSL_ASSERT( _xDialogModel.is() && _xDialogModelFactory.is() &&
                       _xContext.is() ); }
+ 
+    inline DialogImport( const DialogImport& rOther ) : DialogImport_Base()
+        , _xContext( rOther._xContext )
+        , _xSupplier( rOther._xSupplier )
+        , _pStyleNames( rOther._pStyleNames )
+        , _pStyles( rOther._pStyles )
+        , _styleNames( *_pStyleNames )
+        , _styles( *_pStyles )
+        , _xDialogModel( rOther._xDialogModel )
+        , _xDialogModelFactory( rOther._xDialogModelFactory )
+        , _xDoc( rOther._xDoc ) 
+        , XMLNS_DIALOGS_UID( rOther.XMLNS_DIALOGS_UID )
+        , XMLNS_SCRIPT_UID( rOther.XMLNS_SCRIPT_UID ) {} 
     virtual ~DialogImport()
         SAL_THROW( () );
-    
     inline css::uno::Reference< css::frame::XModel > getDocOwner() { return _xDoc; }
-
-	css::uno::Reference< css::script::XLibraryContainer > getScriptLibraryContainer();
     // XRoot
     virtual void SAL_CALL startDocument(
         css::uno::Reference< css::xml::input::XNamespaceMapping >
@@ -364,6 +384,9 @@ protected:
     
     ::rtl::OUString getControlId(
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
+    ::rtl::OUString getControlModelName(
+        rtl::OUString const& rDefaultModel,
+        css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
     css::uno::Reference< css::xml::input::XElement > getStyle(
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
 public:
@@ -434,6 +457,8 @@ public:
     bool importVerticalAlignProperty(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName,
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
+    bool importImageURLProperty( rtl::OUString const & rPropName, rtl::OUString const & rAttrName, 
+        css::uno::Reference< css::xml::input::XAttributes > const & xAttributes );
     bool importImageAlignProperty(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName, 
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
@@ -458,6 +483,9 @@ public:
     bool importSelectionTypeProperty(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName,
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
+    bool importDataAwareProperty( 
+        ::rtl::OUString const & rPropName,
+        css::uno::Reference<css::xml::input::XAttributes> const & xAttributes );
 };
 
 //==============================================================================
@@ -473,6 +501,14 @@ public:
                 pImport->_xDialogModelFactory->createInstance( rControlName ),
                 css::uno::UNO_QUERY_THROW ), rId )
         {}
+    inline ControlImportContext(
+        DialogImport * pImport,
+        const css::uno::Reference< css::beans::XPropertySet >& xProps, ::rtl::OUString const & rControlName )
+        : ImportContext(
+            pImport,
+                xProps,
+                rControlName )
+        {}
     inline ~ControlImportContext()
     {
         _pImport->_xDialogModel->insertByName(
@@ -1003,6 +1039,7 @@ public:
 };
 
 //==============================================================================
+
 class SpinButtonElement
     : public ControlElement
 {
@@ -1043,7 +1080,62 @@ public:
         ElementBase * pParent, DialogImport * pImport )
         SAL_THROW( () )
         : ControlElement( rLocalName, xAttributes, pParent, pImport )
+        {
+            m_xContainer.set( _pImport->_xDialogModelFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) ), css::uno::UNO_QUERY );
+        }
+private:
+	css::uno::Reference< css::container::XNameContainer > m_xContainer;
+};
+
+//==============================================================================
+class Frame
+    : public ControlElement
+{
+    ::rtl::OUString _label;
+public:
+    virtual css::uno::Reference< css::xml::input::XElement >
+    SAL_CALL startChildElement(
+        sal_Int32 nUid, ::rtl::OUString const & rLocalName,
+        css::uno::Reference<css::xml::input::XAttributes> const & xAttributes )
+        throw (css::xml::sax::SAXException, css::uno::RuntimeException);
+    virtual void SAL_CALL endElement()
+        throw (css::xml::sax::SAXException, css::uno::RuntimeException);
+    
+    inline Frame(
+        ::rtl::OUString const & rLocalName,
+        css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
+        ElementBase * pParent, DialogImport * pImport )
+        SAL_THROW( () )
+        : ControlElement( rLocalName, xAttributes, pParent, pImport )
         {}
+private:
+	css::uno::Reference< css::container::XNameContainer > m_xContainer;
+};
+
+//==============================================================================
+class Page
+    : public ControlElement
+{
+public:
+    virtual css::uno::Reference< css::xml::input::XElement >
+    SAL_CALL startChildElement(
+        sal_Int32 nUid, ::rtl::OUString const & rLocalName,
+        css::uno::Reference<css::xml::input::XAttributes> const & xAttributes )
+        throw (css::xml::sax::SAXException, css::uno::RuntimeException);
+    virtual void SAL_CALL endElement()
+        throw (css::xml::sax::SAXException, css::uno::RuntimeException);
+    
+    inline Page(
+        ::rtl::OUString const & rLocalName,
+        css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
+        ElementBase * pParent, DialogImport * pImport )
+        SAL_THROW( () )
+        : ControlElement( rLocalName, xAttributes, pParent, pImport )
+        {
+            m_xContainer.set( _pImport->_xDialogModelFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoPageModel") ) ), css::uno::UNO_QUERY );
+        }
+private:
+	css::uno::Reference< css::container::XNameContainer > m_xContainer;
 };
 
 class ProgressBarElement
diff --git xmlscript/source/xmldlg_imexp/xmldlg_addfunc.cxx xmlscript/source/xmldlg_imexp/xmldlg_addfunc.cxx
index abfa771..641efc5 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_addfunc.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_addfunc.cxx
@@ -71,8 +71,7 @@ Reference< io::XInputStream > InputStreamProvider::createInputStream()
 //==================================================================================================
 Reference< io::XInputStreamProvider > SAL_CALL exportDialogModel(
     Reference< container::XNameContainer > const & xDialogModel,
-    Reference< XComponentContext > const & xContext,
-    Reference< XModel > const & xDocument )
+    Reference< XComponentContext > const & xContext, Reference< XModel > const & xDocument )
     SAL_THROW( (Exception) )
 {
     Reference< lang::XMultiComponentFactory > xSMgr( xContext->getServiceManager() );
@@ -106,8 +105,7 @@ Reference< io::XInputStreamProvider > SAL_CALL exportDialogModel(
 void SAL_CALL importDialogModel(
     Reference< io::XInputStream > xInput,
     Reference< container::XNameContainer > const & xDialogModel,
-    Reference< XComponentContext > const & xContext,
-    Reference< XModel > const & xDocument )
+    Reference< XComponentContext > const & xContext, Reference< XModel > const & xDocument )
     SAL_THROW( (Exception) )
 {
     Reference< lang::XMultiComponentFactory > xSMgr( xContext->getServiceManager() );
diff --git xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
index 1c67f19..89eb46b 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_expmodels.cxx
@@ -29,16 +29,8 @@
 #include "precompiled_xmlscript.hxx"
 #include "exp_share.hxx"
 
-#include <com/sun/star/form/binding/XListEntrySink.hpp>
-#include <com/sun/star/form/binding/XBindableValue.hpp>
-#include <com/sun/star/form/binding/XValueBinding.hpp>
-#include <com/sun/star/table/CellAddress.hpp>
-#include <com/sun/star/table/CellRangeAddress.hpp>
 #include <com/sun/star/util/XNumberFormatsSupplier.hpp>
-#include <com/sun/star/document/XStorageBasedDocument.hpp>
-#include <com/sun/star/document/XGraphicObjectResolver.hpp>
-#include <comphelper/componentcontext.hxx>
-#include <comphelper/processfactory.hxx>
+#include <com/sun/star/lang/XServiceInfo.hpp>
 
 
 using namespace ::com::sun::star;
@@ -48,66 +40,6 @@ using ::rtl::OUString;
 namespace xmlscript
 {
 
-void lclExportBindableAndListSourceBits( Reference< frame::XModel > const & xDocument, const Reference< beans::XPropertySet >& _xProps, ElementDescriptor& rModel )
-{
-    Reference< lang::XMultiServiceFactory > xFac;
-    if ( xDocument.is() )
-        xFac.set( xDocument, uno::UNO_QUERY );
-
-    Reference< form::binding::XBindableValue > xBinding( _xProps, UNO_QUERY );
-
-    if ( xFac.is() && xBinding.is() )
-    {
-        try
-        {
-            Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellAddressConversion" )), uno::UNO_QUERY );  
-        Reference< beans::XPropertySet > xBindable( xBinding->getValueBinding(), UNO_QUERY );
-            if ( xBindable.is() )
-            {
-                table::CellAddress aAddress; 
-                xBindable->getPropertyValue( OUSTR("BoundCell") ) >>= aAddress; 
-                xConvertor->setPropertyValue( OUSTR("Address"), makeAny( aAddress ) );
-                rtl::OUString sAddress;
-                xConvertor->getPropertyValue( OUSTR("PersistentRepresentation") ) >>= sAddress;
-                if ( sAddress.getLength() > 0 )
-                    rModel.addAttribute( OUSTR(XMLNS_DIALOGS_PREFIX ":linked-cell"), sAddress );
-                
-                OSL_TRACE( "*** Bindable value %s", rtl::OUStringToOString( sAddress, RTL_TEXTENCODING_UTF8 ).getStr() ); 
-               
-            }
-        }
-        catch( uno::Exception& )
-        {
-        }
-    }
-    Reference< form::binding::XListEntrySink > xEntrySink( _xProps, UNO_QUERY );
-    if ( xEntrySink.is() )
-    {
-        Reference< beans::XPropertySet > xListSource( xEntrySink->getListEntrySource(), UNO_QUERY );
-        if ( xListSource.is() )
-        {
-            try
-            {
-                Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellRangeAddressConversion" )), uno::UNO_QUERY );  
-
-                table::CellRangeAddress aAddress; 
-                xListSource->getPropertyValue( OUSTR( "CellRange" ) ) >>= aAddress;
-
-                rtl::OUString sAddress;
-                xConvertor->setPropertyValue( OUSTR("Address"), makeAny( aAddress ) );
-                xConvertor->getPropertyValue( OUSTR("PersistentRepresentation") ) >>= sAddress;
-                OSL_TRACE("**** cell range source list %s",
-                    rtl::OUStringToOString( sAddress, RTL_TEXTENCODING_UTF8 ).getStr() ); 
-                if ( sAddress.getLength() > 0 );
-                    rModel.addAttribute( OUSTR(XMLNS_DIALOGS_PREFIX ":source-cell-range"), sAddress );
-            }
-            catch( uno::Exception& )
-            {
-            }
-        }
-    }
-
-}
 static inline bool readBorderProps(
     ElementDescriptor * element, Style & style )
 {
@@ -137,7 +69,9 @@ static inline bool readFontProps( ElementDescriptor * element, Style & style )
 void ElementDescriptor::readMultiPageModel( StyleBag * all_styles )
 {
     // collect styles
-    Style aStyle( 0x2 | 0x8 | 0x20 );
+    Style aStyle( 0x1 | 0x2 | 0x8 | 0x20 );
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("BackgroundColor") ) ) >>= aStyle._backgroundColor)
+        aStyle._set |= 0x1;
     if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextColor") ) ) >>= aStyle._textColor)
         aStyle._set |= 0x2;
     if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextLineColor") ) ) >>= aStyle._textLineColor)
@@ -152,24 +86,101 @@ void ElementDescriptor::readMultiPageModel( StyleBag * all_styles )
 
     // collect elements
     readDefaults();
-    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") ),
+    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiPageValue") ),
                   OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ) );
-    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ProgressValueMax") ),
-                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value-max") ) );
+    Any aDecorationAny( _xProps->getPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("Decoration") ) ) );
+    bool bDecoration = sal_True;
+    if ( (aDecorationAny >>= bDecoration) && !bDecoration )
+		addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":withtabs") ), OUString( RTL_CONSTASCII_USTRINGPARAM("false") ) );
+
+    readEvents();
+    uno::Reference< container::XNameContainer > xPagesContainer( _xProps, uno::UNO_QUERY );
+    if ( xPagesContainer.is() && xPagesContainer->getElementNames().getLength() )
+    {
+        ElementDescriptor * pElem = new ElementDescriptor( _xProps, _xPropState, OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") ), _xDocument );
+        pElem->readBullitinBoard( all_styles );
+        addSubElement( pElem );
+    }
+}
+//__________________________________________________________________________________________________
+void ElementDescriptor::readFrameModel( StyleBag * all_styles )
+{
+    // collect styles
+    Style aStyle( 0x1 | 0x2 | 0x8 | 0x20 );
+/*
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("BackgroundColor") ) ) >>= aStyle._backgroundColor)
+        aStyle._set |= 0x1;
+*/
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextColor") ) ) >>= aStyle._textColor)
+        aStyle._set |= 0x2;
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextLineColor") ) ) >>= aStyle._textLineColor)
+        aStyle._set |= 0x20;
+    if (readFontProps( this, aStyle ))
+        aStyle._set |= 0x8;
+    if (aStyle._set)
+    {
+        addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":style-id") ),
+                      all_styles->getStyleId( aStyle ) );
+    }
 
+    // collect elements
+    readDefaults();
     OUString aTitle;
+   
     if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("Label") ) ) >>= aTitle)
     {
         ElementDescriptor * title = new ElementDescriptor(
             _xProps, _xPropState,
-            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ) );
+            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ), _xDocument );
         title->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ),
                              aTitle );
         addSubElement( title );
     }
 
+    uno::Reference< container::XNameContainer > xControlContainer( _xProps, uno::UNO_QUERY );
+    if ( xControlContainer.is() && xControlContainer->getElementNames().getLength() )
+    {
+        ElementDescriptor * pElem = new ElementDescriptor( _xProps, _xPropState, OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") ), _xDocument );
+        pElem->readBullitinBoard( all_styles );
+        addSubElement( pElem );
+    }
     readEvents();
 }
+//__________________________________________________________________________________________________
+void ElementDescriptor::readPageModel( StyleBag * all_styles )
+{
+    // collect styles
+    Style aStyle( 0x1 | 0x2 | 0x8 | 0x20 );
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("BackgroundColor") ) ) >>= aStyle._backgroundColor)
+        aStyle._set |= 0x1;
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextColor") ) ) >>= aStyle._textColor)
+        aStyle._set |= 0x2;
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("TextLineColor") ) ) >>= aStyle._textLineColor)
+        aStyle._set |= 0x20;
+    if (readFontProps( this, aStyle ))
+        aStyle._set |= 0x8;
+    if (aStyle._set)
+    {
+        addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":style-id") ),
+                      all_styles->getStyleId( aStyle ) );
+    }
+
+    // collect elements
+    readDefaults();
+    rtl::OUString aTitle;
+    readStringAttr(
+        OUString( RTL_CONSTASCII_USTRINGPARAM("Title") ),
+        OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ) );
+    uno::Reference< container::XNameContainer > xControlContainer( _xProps, uno::UNO_QUERY );
+    if ( xControlContainer.is() && xControlContainer->getElementNames().getLength() )
+    {
+        ElementDescriptor * pElem = new ElementDescriptor( _xProps, _xPropState, OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") ), _xDocument );
+        pElem->readBullitinBoard( all_styles );
+        addSubElement( pElem );
+    }
+    readEvents();
+}
+
 void ElementDescriptor::readButtonModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
@@ -203,8 +214,10 @@ void ElementDescriptor::readButtonModel( StyleBag * all_styles )
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":valign") ) );
     readButtonTypeAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("PushButtonType") ),
                         OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":button-type") ) );
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
                     OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
+
+
     readImagePositionAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-position") ) );
     readImageAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageAlign") ),
@@ -274,7 +287,7 @@ void ElementDescriptor::readCheckBoxModel( StyleBag * all_styles )
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );
     readVerticalAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":valign") ) );
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
                     OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
     readImagePositionAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-position") ) );
@@ -311,7 +324,7 @@ void ElementDescriptor::readCheckBoxModel( StyleBag * all_styles )
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readComboBoxModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument )
+void ElementDescriptor::readComboBoxModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -352,8 +365,10 @@ void ElementDescriptor::readComboBoxModel( StyleBag * all_styles, Reference< fra
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":maxlength") ) );
     readShortAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("LineCount") ),
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linecount") ) );
-    // Cell Range, Ref Cell etc.
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+
+    readDataAwareAttr( OUSTR(XMLNS_DIALOGS_PREFIX ":linked-cell") );
+    readDataAwareAttr( OUSTR( XMLNS_DIALOGS_PREFIX ":source-cell-range") );
+
     // string item list
     Sequence< OUString > itemValues;
     if ((readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ) ) >>= itemValues) &&
@@ -361,14 +376,14 @@ void ElementDescriptor::readComboBoxModel( StyleBag * all_styles, Reference< fra
     {
         ElementDescriptor * popup = new ElementDescriptor(
             _xProps, _xPropState,
-            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menupopup") ) );
+            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menupopup") ), _xDocument );
 
         OUString const * pItemValues = itemValues.getConstArray();
         for ( sal_Int32 nPos = 0; nPos < itemValues.getLength(); ++nPos )
         {
             ElementDescriptor * item = new ElementDescriptor(
                 _xProps, _xPropState,
-                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menuitem") ) );
+                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menuitem") ), _xDocument );
             item->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ),
                                 pItemValues[ nPos ] );
             popup->addSubElement( item );
@@ -379,7 +394,7 @@ void ElementDescriptor::readComboBoxModel( StyleBag * all_styles, Reference< fra
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
+void ElementDescriptor::readListBoxModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -414,7 +429,8 @@ void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< fram
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linecount") ) );
     readAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Align") ),
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+    readDataAwareAttr( OUSTR(XMLNS_DIALOGS_PREFIX ":linked-cell") );
+    readDataAwareAttr( OUSTR( XMLNS_DIALOGS_PREFIX ":source-cell-range") );
     // string item list
     Sequence< OUString > itemValues;
     if ((readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ) ) >>= itemValues) &&
@@ -422,7 +438,7 @@ void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< fram
     {
         ElementDescriptor * popup = new ElementDescriptor(
             _xProps, _xPropState,
-            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menupopup") ) );
+            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menupopup") ), _xDocument );
 
         OUString const * pItemValues = itemValues.getConstArray();
         sal_Int32 nPos;
@@ -430,7 +446,7 @@ void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< fram
         {
             ElementDescriptor * item = new ElementDescriptor(
                 _xProps, _xPropState,
-                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menuitem") ) );
+                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menuitem") ), _xDocument );
             item->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ),
                                 pItemValues[ nPos ] );
             popup->addSubElement( item );
@@ -454,7 +470,7 @@ void ElementDescriptor::readListBoxModel( StyleBag * all_styles, Reference< fram
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readRadioButtonModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
+void ElementDescriptor::readRadioButtonModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -485,14 +501,12 @@ void ElementDescriptor::readRadioButtonModel( StyleBag * all_styles, Reference<
                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );
     readVerticalAlignAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":valign") ) );
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
                     OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) );
     readImagePositionAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-position") ) );
     readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiLine") ),
                   OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":multiline") ) );
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("GroupName") ),
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":group-name") ) );
 
     sal_Int16 nState = 0;
     if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("State") ) ) >>= nState)
@@ -512,7 +526,7 @@ void ElementDescriptor::readRadioButtonModel( StyleBag * all_styles, Reference<
             break;
         }
     }
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+    readDataAwareAttr( OUSTR(XMLNS_DIALOGS_PREFIX ":linked-cell") );
     readEvents();
 }
 //__________________________________________________________________________________________________
@@ -541,7 +555,7 @@ void ElementDescriptor::readGroupBoxModel( StyleBag * all_styles )
     {
         ElementDescriptor * title = new ElementDescriptor(
             _xProps, _xPropState,
-            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ) );
+            OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":title") ), _xDocument );
         title->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":value") ),
                              aTitle );
         addSubElement( title );
@@ -685,7 +699,7 @@ void ElementDescriptor::readEditModel( StyleBag * all_styles )
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readImageControlModel( StyleBag * all_styles, com::sun::star::uno::Reference< com::sun::star::frame::XModel > const & xDocument )
+void ElementDescriptor::readImageControlModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -704,33 +718,11 @@ void ElementDescriptor::readImageControlModel( StyleBag * all_styles, com::sun::
     readDefaults();
     readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ScaleImage") ),
                   OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":scale-image") ) );
-    rtl::OUString sURL;
-    _xProps->getPropertyValue( OUSTR("ImageURL") ) >>= sURL;
     
-    if ( sURL.indexOf( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.GraphicObject:"  ) ) ) == 0 )
-    {
-        Reference< document::XStorageBasedDocument > xDocStorage( xDocument, UNO_QUERY );
-
-        if ( xDocStorage.is() )
-        {
-            uno::Sequence< Any > aArgs( 1 );
-            aArgs[ 0 ] <<= xDocStorage->getDocumentStorage();
-
-            ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
-            uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
-            aContext.createComponentWithArguments( OUSTR( "com.sun.star.comp.Svx.GraphicExportHelper" ), aArgs, xGraphicResolver );
-            if ( xGraphicResolver.is() )
-            {
-                sURL = xGraphicResolver->resolveGraphicObjectURL( sURL );
-            }
-        }     
-    }
-    if ( sURL.getLength() > 0 )
-    {
-        addAttribute( OUSTR(XMLNS_DIALOGS_PREFIX ":src"), sURL );
-    }
     readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Tabstop") ),
                   OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":tabstop") ) );
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+                           OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":src") ) );
     readEvents();
 }
 //__________________________________________________________________________________________________
@@ -1150,6 +1142,45 @@ void ElementDescriptor::readFormattedFieldModel( StyleBag * all_styles )
     
     readEvents();
 }
+
+void ElementDescriptor::readSpinButtonModel( StyleBag * all_styles )
+    SAL_THROW( (Exception) )
+{
+    // collect styles
+    Style aStyle( 0x1 | 0x4 );
+    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("BackgroundColor") ) ) >>= aStyle._backgroundColor)
+        aStyle._set |= 0x1;
+    if (readBorderProps( this, aStyle ))
+        aStyle._set |= 0x4;
+    if (aStyle._set)
+    {
+        addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":style-id") ),
+                      all_styles->getStyleId( aStyle ) );
+    }
+    
+    // collect elements
+    readDefaults();
+    readOrientationAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Orientation") ),
+                         OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );  
+    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SpinIncrement") ),
+                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":increment") ) );
+    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SpinValue") ),
+                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":curval") ) );
+    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SpinValueMax") ),
+                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":maxval") ) );
+    readLongAttr( OUSTR("SpinValueMin"),
+                  OUSTR(XMLNS_DIALOGS_PREFIX ":minval") );
+    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Repeat") ),
+                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":repeat") ) );
+    readLongAttr( OUSTR("RepeatDelay"), OUSTR(XMLNS_DIALOGS_PREFIX ":repeat-delay") );
+    readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Tabstop") ),
+                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":tabstop") ) );
+    readHexLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SymbolColor") ),
+                     OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":symbol-color") ) );
+    readDataAwareAttr( OUSTR(XMLNS_DIALOGS_PREFIX ":linked-cell") );
+    readEvents();
+}
+
 //__________________________________________________________________________________________________
 void ElementDescriptor::readFixedLineModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
@@ -1205,7 +1236,7 @@ void ElementDescriptor::readProgressBarModel( StyleBag * all_styles )
     readEvents();
 }
 //__________________________________________________________________________________________________
-void ElementDescriptor::readScrollBarModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
+void ElementDescriptor::readScrollBarModel( StyleBag * all_styles )
     SAL_THROW( (Exception) )
 {
     // collect styles
@@ -1243,47 +1274,7 @@ void ElementDescriptor::readScrollBarModel( StyleBag * all_styles, Reference< fr
                   OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":live-scroll") ) );
     readHexLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SymbolColor") ),
                      OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":symbol-color") ) );
-    // Cell Range, Ref Cell etc.
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
-    readEvents();
-}
-//__________________________________________________________________________________________________
-void ElementDescriptor::readSpinButtonModel( StyleBag * all_styles, Reference< frame::XModel > const & xDocument  )
-    SAL_THROW( (Exception) )
-{
-    // collect styles
-    Style aStyle( 0x1 | 0x4 );
-    if (readProp( OUString( RTL_CONSTASCII_USTRINGPARAM("BackgroundColor") ) ) >>= aStyle._backgroundColor)
-        aStyle._set |= 0x1;
-    if (readBorderProps( this, aStyle ))
-        aStyle._set |= 0x4;
-    if (aStyle._set)
-    {
-        addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":style-id") ),
-                      all_styles->getStyleId( aStyle ) );
-    }
-    
-    // collect elements
-    readDefaults();
-    readOrientationAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Orientation") ),
-                         OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":align") ) );  
-    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SpinIncrement") ),
-                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":increment") ) );
-    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SpinValue") ),
-                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":curval") ) );
-    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SpinValueMax") ),
-                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":maxval") ) );
-    readLongAttr( OUSTR("SpinValueMin"),
-                  OUSTR(XMLNS_DIALOGS_PREFIX ":minval") );
-    readLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Repeat") ),
-                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":repeat") ) );
-    readLongAttr( OUSTR("RepeatDelay"), OUSTR(XMLNS_DIALOGS_PREFIX ":repeat-delay") );
-    readBoolAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("Tabstop") ),
-                  OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":tabstop") ) );
-    readHexLongAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("SymbolColor") ),
-                     OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":symbol-color") ) );
-    // Cell Range, Ref Cell etc.
-    lclExportBindableAndListSourceBits( xDocument, _xProps, *this );
+    readDataAwareAttr( OUSTR(XMLNS_DIALOGS_PREFIX ":linked-cell") );
     readEvents();
 }
 //__________________________________________________________________________________________________
@@ -1333,10 +1324,254 @@ void ElementDescriptor::readDialogModel( StyleBag * all_styles )
         addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":withtitlebar") ),
                       OUString( RTL_CONSTASCII_USTRINGPARAM("false") ) ); 
 
-    readStringAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
+    readImageURLAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
                     OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":image-src") ) ); 
 
     readEvents();
 }
 
+void ElementDescriptor::readBullitinBoard( StyleBag * all_styles )
+    SAL_THROW( (Exception) )
+{
+    // collect elements
+    ::std::vector< ElementDescriptor* > all_elements;
+    // read out all props
+    Reference<  container::XNameContainer > xDialogModel( _xProps, UNO_QUERY );
+    if ( !xDialogModel.is() )
+        return; // #TODO throw??? 
+    Sequence< OUString > aElements( xDialogModel->getElementNames() );
+    OUString const * pElements = aElements.getConstArray();
+    
+    ElementDescriptor * pRadioGroup = 0;
+    
+    sal_Int32 nPos;
+    for ( nPos = 0; nPos < aElements.getLength(); ++nPos )
+    {
+        Any aControlModel( xDialogModel->getByName( pElements[ nPos ] ) );
+        Reference< beans::XPropertySet > xProps;
+        OSL_VERIFY( aControlModel >>= xProps );
+        if (! xProps.is())
+            continue;
+        Reference< beans::XPropertyState > xPropState( xProps, UNO_QUERY );
+        OSL_ENSURE( xPropState.is(), "no XPropertyState!" );
+        if (! xPropState.is())
+            continue;
+        Reference< lang::XServiceInfo > xServiceInfo( xProps, UNO_QUERY );
+        OSL_ENSURE( xServiceInfo.is(), "no XServiceInfo!" );
+        if (! xServiceInfo.is())
+            continue;
+
+        ElementDescriptor * pElem = 0;
+        
+        // group up radio buttons
+        if ( xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlRadioButtonModel") ) ) )
+        {
+            if (! pRadioGroup) // open radiogroup
+            {
+                pRadioGroup = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":radiogroup") ), _xDocument );
+                all_elements.push_back( pRadioGroup );
+            }
+            
+            pElem = new ElementDescriptor(
+                xProps, xPropState,
+                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":radio") ), _xDocument );
+            pElem->readRadioButtonModel( all_styles );
+            pRadioGroup->addSubElement( pElem );
+        }
+        else // no radio
+        {
+            pRadioGroup = 0; // close radiogroup
+            
+            if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlButtonModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":button") ), _xDocument );
+                pElem->readButtonModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCheckBoxModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":checkbox") ), _xDocument );
+                pElem->readCheckBoxModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlComboBoxModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":combobox") ), _xDocument );
+                pElem->readComboBoxModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menulist") ), _xDocument );
+                pElem->readListBoxModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":titledbox") ), _xDocument );
+                pElem->readGroupBoxModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":multipage") ), _xDocument );
+                pElem->readMultiPageModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoFrameModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":frame") ), _xDocument );
+                pElem->readFrameModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoPageModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":page") ), _xDocument );
+                pElem->readPageModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedTextModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":text") ), _xDocument );
+                pElem->readFixedTextModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlEditModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":textfield") ), _xDocument );
+                pElem->readEditModel( all_styles );
+            }
+			// FixedHyperLink
+			else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedHyperlinkModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linklabel") ), _xDocument );
+                pElem->readFixedHyperLinkModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlImageControlModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":img") ), _xDocument );
+                pElem->readImageControlModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFileControlModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":filecontrol") ), _xDocument );
+                pElem->readFileControlModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.tree.TreeControlModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":treecontrol") ), _xDocument );
+                pElem->readTreeControlModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCurrencyFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":currencyfield") ), _xDocument );
+                pElem->readCurrencyFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlDateFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":datefield") ), _xDocument );
+                pElem->readDateFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlNumericFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":numericfield") ), _xDocument );
+                pElem->readNumericFieldModel( all_styles );
+            }           
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlTimeFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":timefield") ) , _xDocument);
+                pElem->readTimeFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlPatternFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":patternfield") ), _xDocument );
+                pElem->readPatternFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFormattedFieldModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":formattedfield") ), _xDocument );
+                pElem->readFormattedFieldModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedLineModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":fixedline") ), _xDocument );
+                pElem->readFixedLineModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlScrollBarModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":scrollbar") ), _xDocument );
+                pElem->readScrollBarModel( all_styles );
+            }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlSpinButtonModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":spinbutton") ), _xDocument );
+                pElem->readSpinButtonModel( all_styles );
+             }
+            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlProgressBarModel") ) ) )
+            {
+                pElem = new ElementDescriptor(
+                    xProps, xPropState,
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":progressmeter") ), _xDocument );
+                pElem->readProgressBarModel( all_styles );
+            }
+            //
+            
+            if (pElem)
+            {
+                all_elements.push_back( pElem );
+            }
+            else
+            {
+                OSL_ENSURE( sal_False, "unknown control type!" );
+                continue;
+            }
+        }
+    }
+    if (! all_elements.empty())
+    {
+        for ( std::size_t n = 0; n < all_elements.size(); ++n )
+        {
+            addSubElement( all_elements[ n ] );
+        }
+    }
+}
 }
diff --git xmlscript/source/xmldlg_imexp/xmldlg_export.cxx xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
index 47b1d2f..1b12100 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_export.cxx
@@ -46,6 +46,8 @@
 #include <com/sun/star/awt/PushButtonType.hpp>
 #include <com/sun/star/awt/VisualEffect.hpp>
 
+#include <com/sun/star/io/XPersistObject.hpp>
+
 #include <com/sun/star/script/XScriptEventsSupplier.hpp>
 #include <com/sun/star/script/ScriptEventDescriptor.hpp>
 
@@ -57,6 +59,17 @@
 
 #include <com/sun/star/view/SelectionType.hpp>
 
+#include <com/sun/star/form/binding/XListEntrySink.hpp>
+#include <com/sun/star/form/binding/XBindableValue.hpp>
+#include <com/sun/star/form/binding/XValueBinding.hpp>
+#include <com/sun/star/table/CellAddress.hpp>
+#include <com/sun/star/table/CellRangeAddress.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/document/XStorageBasedDocument.hpp>
+#include <com/sun/star/document/XGraphicObjectResolver.hpp>
+
+#include <comphelper/componentcontext.hxx>
+#include <comphelper/processfactory.hxx>
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
@@ -776,6 +789,33 @@ void ElementDescriptor::readVerticalAlignAttr( OUString const & rPropName, OUStr
     }
 }
 //__________________________________________________________________________________________________
+void ElementDescriptor::readImageURLAttr( OUString const & rPropName, OUString const & rAttrName )
+{
+    if (beans::PropertyState_DEFAULT_VALUE != _xPropState->getPropertyState( rPropName ))
+    {
+        rtl::OUString sURL;
+        _xProps->getPropertyValue( rPropName ) >>= sURL;
+    
+        if ( sURL.getLength() && sURL.compareToAscii( XMLSCRIPT_GRAPHOBJ_URLPREFIX, RTL_CONSTASCII_LENGTH( XMLSCRIPT_GRAPHOBJ_URLPREFIX ) ) == 0 )
+        {
+            Reference< document::XStorageBasedDocument > xDocStorage( _xDocument, UNO_QUERY );
+            if ( xDocStorage.is() )
+            {
+                uno::Sequence< Any > aArgs( 1 );
+                aArgs[ 0 ] <<= xDocStorage->getDocumentStorage();
+            
+                ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
+                uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
+                aContext.createComponentWithArguments( OUSTR( "com.sun.star.comp.Svx.GraphicExportHelper" ), aArgs, xGraphicResolver );
+                if ( xGraphicResolver.is() )
+                    sURL = xGraphicResolver->resolveGraphicObjectURL( sURL );
+            }     
+        }
+        if ( sURL.getLength() )
+                addAttribute( rAttrName, sURL );
+    }
+}
+//__________________________________________________________________________________________________
 void ElementDescriptor::readImageAlignAttr( OUString const & rPropName, OUString const & rAttrName )
 {
     if (beans::PropertyState_DEFAULT_VALUE != _xPropState->getPropertyState( rPropName ))
@@ -939,6 +979,66 @@ void ElementDescriptor::readLineEndFormatAttr( OUString const & rPropName, OUStr
     }
 }
 //__________________________________________________________________________________________________
+void ElementDescriptor::readDataAwareAttr( OUString const & rAttrName )
+{
+    Reference< lang::XMultiServiceFactory > xFac;
+    if ( _xDocument.is() )
+        xFac.set( _xDocument, uno::UNO_QUERY );
+
+    Reference< form::binding::XBindableValue > xBinding( _xProps, UNO_QUERY );
+
+    if ( xFac.is() && xBinding.is() && rAttrName.equals( OUSTR(XMLNS_DIALOGS_PREFIX ":linked-cell") ) )
+    {
+        try
+        {
+            Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellAddressConversion" )), uno::UNO_QUERY );  
+        Reference< beans::XPropertySet > xBindable( xBinding->getValueBinding(), UNO_QUERY );
+            if ( xBindable.is() )
+            {
+                table::CellAddress aAddress; 
+                xBindable->getPropertyValue( OUSTR("BoundCell") ) >>= aAddress; 
+                xConvertor->setPropertyValue( OUSTR("Address"), makeAny( aAddress ) );
+                rtl::OUString sAddress;
+                xConvertor->getPropertyValue( OUSTR("PersistentRepresentation") ) >>= sAddress;
+                if ( sAddress.getLength() > 0 )
+                    addAttribute( rAttrName, sAddress );
+                
+                OSL_TRACE( "*** Bindable value %s", rtl::OUStringToOString( sAddress, RTL_TEXTENCODING_UTF8 ).getStr() ); 
+               
+            }
+        }
+        catch( uno::Exception& )
+        {
+        }
+    }
+    Reference< form::binding::XListEntrySink > xEntrySink( _xProps, UNO_QUERY );
+    if ( xEntrySink.is() && rAttrName.equals( OUSTR( XMLNS_DIALOGS_PREFIX ":source-cell-range") ) )
+    {
+        Reference< beans::XPropertySet > xListSource( xEntrySink->getListEntrySource(), UNO_QUERY );
+        if ( xListSource.is() )
+        {
+            try
+            {
+                Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellRangeAddressConversion" )), uno::UNO_QUERY );  
+
+                table::CellRangeAddress aAddress; 
+                xListSource->getPropertyValue( OUSTR( "CellRange" ) ) >>= aAddress;
+
+                rtl::OUString sAddress;
+                xConvertor->setPropertyValue( OUSTR("Address"), makeAny( aAddress ) );
+                xConvertor->getPropertyValue( OUSTR("PersistentRepresentation") ) >>= sAddress;
+                OSL_TRACE("**** cell range source list %s",
+                    rtl::OUStringToOString( sAddress, RTL_TEXTENCODING_UTF8 ).getStr() ); 
+                if ( sAddress.getLength() > 0 )
+                    addAttribute( rAttrName, sAddress );
+            }
+            catch( uno::Exception& )
+            {
+            }
+        }
+    }
+}
+//__________________________________________________________________________________________________
 void ElementDescriptor::readSelectionTypeAttr( OUString const & rPropName, OUString const & rAttrName )
 {
     if (beans::PropertyState_DEFAULT_VALUE != _xPropState->getPropertyState( rPropName ))
@@ -975,6 +1075,28 @@ void ElementDescriptor::readSelectionTypeAttr( OUString const & rPropName, OUStr
 void ElementDescriptor::readDefaults( bool supportPrintable, bool supportVisible )
 {
     Any a( _xProps->getPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("Name") ) ) );
+
+    // The following is a hack to allow 'form' controls to override the default
+    // control supported by dialogs. This should work well for both vba support and 
+    // normal openoffice ( when normal 'Dialogs' decide to support form control models )
+    // In the future VBA support might require custom models ( and not the just the form
+    // variant of a control that we currently use ) In this case the door is still open,
+    // we just need to define a new way for the 'ServiceName' to be extracted from the
+    // incomming model. E.g. the use of supporting service 
+    // "com.sun.star.form.FormComponent", 'ServiceName' and XPersistObject 
+    // is only an implementation detail here, in the future some other 
+    // method ( perhaps a custom prop ) could be used instead.
+    Reference< lang::XServiceInfo > xSrvInfo( _xProps, UNO_QUERY );
+    if ( xSrvInfo.is() && xSrvInfo->supportsService( OUSTR("com.sun.star.form.FormComponent" ) ) )
+    {
+        Reference< io::XPersistObject > xPersist( _xProps, UNO_QUERY );
+        if ( xPersist.is() )
+        {
+            OUString sCtrlName = xPersist->getServiceName();
+            if ( sCtrlName.getLength() )
+                    addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":control-implementation") ), sCtrlName ); 
+        }
+    }
     addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":id") ),
              * reinterpret_cast< const OUString * >( a.getValue() ) );
     readShortAttr( OUString( RTL_CONSTASCII_USTRINGPARAM("TabIndex") ),
@@ -1325,253 +1447,21 @@ void StyleBag::dump( Reference< xml::sax::XExtendedDocumentHandler > const & xOu
 //==================================================================================================
 void SAL_CALL exportDialogModel(
     Reference< xml::sax::XExtendedDocumentHandler > const & xOut,
-    Reference< container::XNameContainer > const & xDialogModel,
-    Reference< frame::XModel > const & xDocument )
+    Reference< container::XNameContainer > const & xDialogModel, Reference< frame::XModel > const & xDocument )
     SAL_THROW( (Exception) )
 {
     StyleBag all_styles;
-    ::std::vector< Reference< xml::sax::XAttributeList > > all_elements;
-    
-    // read out all props
-
-    Sequence< OUString > aElements( xDialogModel->getElementNames() );
-    OUString const * pElements = aElements.getConstArray();
-    
-    ElementDescriptor * pRadioGroup = 0;
-    
-    sal_Int32 nPos;
-    for ( nPos = 0; nPos < aElements.getLength(); ++nPos )
-    {
-        Any aControlModel( xDialogModel->getByName( pElements[ nPos ] ) );
-        Reference< beans::XPropertySet > xProps;
-        OSL_VERIFY( aControlModel >>= xProps );
-        if (! xProps.is())
-            continue;
+    // window
+    Reference< beans::XPropertySet > xProps( xDialogModel, UNO_QUERY );
+    OSL_ASSERT( xProps.is() );
         Reference< beans::XPropertyState > xPropState( xProps, UNO_QUERY );
-        OSL_ENSURE( xPropState.is(), "no XPropertyState!" );
-        if (! xPropState.is())
-            continue;
-        Reference< lang::XServiceInfo > xServiceInfo( xProps, UNO_QUERY );
-        OSL_ENSURE( xServiceInfo.is(), "no XServiceInfo!" );
-        if (! xServiceInfo.is())
-            continue;
-
-        ElementDescriptor * pElem = 0;
-        Reference< xml::sax::XAttributeList > xElem;
+    OSL_ASSERT( xPropState.is() );
         
-        // group up radio buttons
-        if ( xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlRadioButtonModel") ) ) )
-        {
-            if (! pRadioGroup) // open radiogroup
-            {
-                pRadioGroup = new ElementDescriptor(
+    ElementDescriptor * pElem = new ElementDescriptor(
                     xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":radiogroup") ) );
-                all_elements.push_back( pRadioGroup );
-            }
-            
-            pElem = new ElementDescriptor(
-                xProps, xPropState,
-                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":radio") ) );
-            xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-            pElem->readRadioButtonModel( &all_styles, xDocument  );
-            pRadioGroup->addSubElement( xElem );
-        }
-        else // no radio
-        {
-            pRadioGroup = 0; // close radiogroup
-            
-            if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlButtonModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":button") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readButtonModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCheckBoxModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":checkbox") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readCheckBoxModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlComboBoxModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":combobox") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readComboBoxModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":menulist") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readListBoxModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":titledbox") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readGroupBoxModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":multipage") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readMultiPageModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedTextModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":text") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFixedTextModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlEditModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":textfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readEditModel( &all_styles );
-            }
-            // FixedHyperLink
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedHyperlinkModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":linklabel") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFixedHyperLinkModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlImageControlModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":img") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readImageControlModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFileControlModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":filecontrol") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFileControlModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.tree.TreeControlModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":treecontrol") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readTreeControlModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCurrencyFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":currencyfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readCurrencyFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlDateFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":datefield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readDateFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlNumericFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":numericfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readNumericFieldModel( &all_styles );
-            }           
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlTimeFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":timefield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readTimeFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlPatternFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":patternfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readPatternFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFormattedFieldModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":formattedfield") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFormattedFieldModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedLineModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":fixedline") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readFixedLineModel( &all_styles );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlScrollBarModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":scrollbar") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readScrollBarModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlSpinButtonModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":spinbutton") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readSpinButtonModel( &all_styles, xDocument );
-            }
-            else if (xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlProgressBarModel") ) ) )
-            {
-                pElem = new ElementDescriptor(
-                    xProps, xPropState,
-                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":progressmeter") ) );
-                xElem = static_cast< xml::sax::XAttributeList * >( pElem );
-                pElem->readProgressBarModel( &all_styles );
-            }
-            //
-            
-            OSL_ASSERT( xElem.is() );
-            if (xElem.is())
-            {
-                all_elements.push_back( xElem );
-            }
-            else
-            {
-                OSL_ENSURE( sal_False, "unknown control type!" );
-                continue;
-            }
-        }
-    }
+                    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") ), xDocument );
+    Reference< xml::sax::XAttributeList > xElem( pElem ); 
+    pElem->readBullitinBoard( &all_styles );
     
     xOut->startDocument();
     
@@ -1581,14 +1471,9 @@ void SAL_CALL exportDialogModel(
     xOut->unknown( aDocTypeStr );
     xOut->ignorableWhitespace( OUString() );
     
-    // window
-    Reference< beans::XPropertySet > xProps( xDialogModel, UNO_QUERY );
-    OSL_ASSERT( xProps.is() );
-    Reference< beans::XPropertyState > xPropState( xProps, UNO_QUERY );
-    OSL_ASSERT( xPropState.is() );
     
     OUString aWindowName( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":window") );
-    ElementDescriptor * pWindow = new ElementDescriptor( xProps, xPropState, aWindowName );
+    ElementDescriptor * pWindow = new ElementDescriptor( xProps, xPropState, aWindowName, xDocument );
     Reference< xml::sax::XAttributeList > xWindow( pWindow );
     pWindow->readDialogModel( &all_styles );
     xOut->ignorableWhitespace( OUString() );
@@ -1598,20 +1483,14 @@ void SAL_CALL exportDialogModel(
     // dump out stylebag
     all_styles.dump( xOut );
     
-    if (! all_elements.empty())
+    if ( xDialogModel->getElementNames().getLength() )
     {   
         // open up bulletinboard
         OUString aBBoardName( RTL_CONSTASCII_USTRINGPARAM(XMLNS_DIALOGS_PREFIX ":bulletinboard") );
         xOut->ignorableWhitespace( OUString() );
-        xOut->startElement( aBBoardName, Reference< xml::sax::XAttributeList >() );
-        
-        // export control elements
-        for ( std::size_t n = 0; n < all_elements.size(); ++n )
-        {
-            ElementDescriptor * pElem = static_cast< ElementDescriptor * >( all_elements[ n ].get() );
-            pElem->dump( xOut.get() );
-        }
+        xOut->startElement( aBBoardName, xElem );
         
+        pElem->dumpSubElements( xOut.get() );
         // end bulletinboard
         xOut->ignorableWhitespace( OUString() );
         xOut->endElement( aBBoardName );
diff --git xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
index 37a561f..a5aee90 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
@@ -28,38 +28,37 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_xmlscript.hxx"
 #include "imp_share.hxx"
-#include <com/sun/star/form/binding/XBindableValue.hpp>
-#include <com/sun/star/form/binding/XValueBinding.hpp>
-#include <com/sun/star/form/binding/XListEntrySink.hpp>
-#include <com/sun/star/beans/NamedValue.hpp>
-#include <com/sun/star/table/CellAddress.hpp>
-#include <com/sun/star/table/CellRangeAddress.hpp>
+
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/beans/XPropertyState.hpp>
 #include <com/sun/star/document/XStorageBasedDocument.hpp>
-#include <com/sun/star/document/XGraphicObjectResolver.hpp>
-#include <com/sun/star/script/XVBACompat.hpp>
-
-#include <comphelper/componentcontext.hxx>
-#include <comphelper/processfactory.hxx>
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
 using ::rtl::OUString;
 
 namespace xmlscript
 {
-Reference< xml::input::XElement > MultiPage::startChildElement(
+
+Reference< xml::input::XElement > Frame::startChildElement(
 	sal_Int32 nUid, OUString const & rLocalName,
 	Reference< xml::input::XAttributes > const & xAttributes )
 	throw (xml::sax::SAXException, RuntimeException)
 {
+    if ( !m_xContainer.is() )
+        m_xContainer.set( _pImport->_xDialogModelFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoFrameModel") ) ), UNO_QUERY );
 	// event
-rtl::OUString _label = rtl::OUString::createFromAscii("foo");
     if (_pImport->isEventElement( nUid, rLocalName ))
 	{
 		return new EventElement(
             nUid, rLocalName, xAttributes, this, _pImport );
 	}
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("bulletinboard") ))
+	{
+		// Create new DialogImport for this container
+		DialogImport* pFrameImport = new DialogImport( *_pImport );
+                pFrameImport->_xDialogModel = m_xContainer;
+		return new BulletinBoardElement( rLocalName, xAttributes, this,  pFrameImport );
+	}
 	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("title") ))
 	{
 		getStringAttr( &_label,
@@ -73,7 +72,7 @@ rtl::OUString _label = rtl::OUString::createFromAscii("foo");
 	}
 	else
 	{
-		
+                OSL_TRACE("****** ARGGGGG!!!! **********");
 		throw xml::sax::SAXException(
 			OUString( RTL_CONSTASCII_USTRINGPARAM("expected event element!") ),
 			Reference< XInterface >(), Any() );
@@ -81,13 +80,15 @@ rtl::OUString _label = rtl::OUString::createFromAscii("foo");
 }
 //__________________________________________________________________________________________________
 
-void MultiPage::endElement()
+void Frame::endElement()
 	throw (xml::sax::SAXException, RuntimeException)
 {
-	ControlImportContext ctx(
-		_pImport, getControlId( _xAttributes ),
-		OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) );
-//		OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) );
+        if ( !m_xContainer.is() )
+            m_xContainer.set( _pImport->_xDialogModelFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoFrameModel") ) ), UNO_QUERY );
+        Reference< beans::XPropertySet > xProps( m_xContainer, UNO_QUERY_THROW );
+        // _pImport is what we need to add to ( e.g. the dialog in this case )
+	ControlImportContext ctx( _pImport, xProps,   getControlId( _xAttributes ) );
+
 	Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
 	
 	Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
@@ -100,122 +101,134 @@ void MultiPage::endElement()
 	}
 	
 	ctx.importDefaults( 0, 0, _xAttributes ); // inherited from BulletinBoardElement
-	ctx.importLongProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") ),
-                            OUString( RTL_CONSTASCII_USTRINGPARAM("value") ),
-                            _xAttributes );
-	ctx.importLongProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ProgressValueMax") ),
-                            OUString( RTL_CONSTASCII_USTRINGPARAM("value-max") ),
-                            _xAttributes );
+	if (_label.getLength())
+	{
+		xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("Label") ),
+										 makeAny( _label ) );
+	}
 	ctx.importEvents( _events );
     // avoid ring-reference:
     // vector< event elements > holding event elements holding this (via _pParent)
     _events.clear();
 }
 
-// #FIXME cut'n'pasted from xmloff/source/core/xmlimp.cxx:1251 
-// of course we need to find a common home for this helper
-
-bool IsPackageURL( const ::rtl::OUString& rURL )
+//===
+Reference< xml::input::XElement > MultiPage::startChildElement(
+	sal_Int32 nUid, OUString const & rLocalName,
+	Reference< xml::input::XAttributes > const & xAttributes )
+	throw (xml::sax::SAXException, RuntimeException)
 {
-    // Some quick tests: Some may rely on the package structure!
-    sal_Int32 nLen = rURL.getLength();
-    if( (nLen > 0 && '/' == rURL[0]) )
-        // RFC2396 net_path or abs_path
-        return false;
-    else if( nLen > 1 && '.' == rURL[0] )
+	// event
+rtl::OUString _label = rtl::OUString::createFromAscii("foo");
+    if (_pImport->isEventElement( nUid, rLocalName ))
     {
-        if( '.' == rURL[1] )
-            // ../: We are never going up one level, so we know
-            // it's not an external URI
-            return false;
-        else if( '/' == rURL[1] )
-            // we are remaining on a level, so it's an package URI
-            return true;
+		return new EventElement(
+            nUid, rLocalName, xAttributes, this, _pImport );
     }
-
-    // Now check for a RFC2396 schema
-    sal_Int32 nPos = 1;
-    while( nPos < nLen )
-    {
-        switch( rURL[nPos] )
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("bulletinboard") ))
         {
-            case '/':
-                // a relative path segement
-                return true;
-            case ':':
-                // a schema
-                return false;
-            default:
-                break;
-                // we don't care about any other characters
-        }
-        ++nPos;
+		// Create new DialogImport for this container
+
+		DialogImport* pMultiPageImport = new DialogImport( *_pImport );
+                pMultiPageImport->_xDialogModel = m_xContainer;
+		return new BulletinBoardElement( rLocalName, xAttributes, this,  pMultiPageImport );
     }
+	else
+	{
 
-    return true;
+		throw xml::sax::SAXException(
+			OUString( RTL_CONSTASCII_USTRINGPARAM("expected event element!") ),
+			Reference< XInterface >(), Any() );
 }
+}
+//__________________________________________________________________________________________________
 
-void importBindableAndListRangeBits( DialogImport* _pImport, const rtl::OUString sLinkedCell, const rtl::OUString & sCellRange, ControlImportContext& ctx )
-{
-    Reference< lang::XMultiServiceFactory > xFac( _pImport->getDocOwner(), UNO_QUERY );
-    if ( xFac.is() && ( sLinkedCell.getLength() ||  sCellRange.getLength() ) )
-    {
-        // Set up Celllink
-        if ( sLinkedCell.getLength() )
-        {
-            Reference< form::binding::XBindableValue > xBindable( ctx.getControlModel(), uno::UNO_QUERY );
-            Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellAddressConversion" )), uno::UNO_QUERY );
-            if ( xBindable.is() && xConvertor.is() )
+void MultiPage::endElement()
+	throw (xml::sax::SAXException, RuntimeException)
             {
-                table::CellAddress aAddress;
-                xConvertor->setPropertyValue( OUSTR( "PersistentRepresentation" ), uno::makeAny( sLinkedCell ) );
-                xConvertor->getPropertyValue( OUSTR( "Address" ) ) >>= aAddress;     
-                beans::NamedValue aArg1;
-                aArg1.Name = OUSTR("BoundCell");
-                aArg1.Value <<= aAddress;
-           
-                uno::Sequence< uno::Any > aArgs(1);
-                aArgs[ 0 ]  <<= aArg1;
+        Reference< beans::XPropertySet > xProps( m_xContainer, UNO_QUERY_THROW );
+        // _pImport is what we need to add to ( e.g. the dialog in this case )
+	ControlImportContext ctx( _pImport, xProps, getControlId( _xAttributes ));
            
-                uno::Reference< form::binding::XValueBinding > xBinding( xFac->createInstanceWithArguments( OUSTR("com.sun.star.table.CellValueBinding" ), aArgs ), uno::UNO_QUERY );
-                xBindable->setValueBinding( xBinding );
+	Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
  
+	Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
+	if (xStyle.is())
+	{
+		StyleElement * pStyle = static_cast< StyleElement * >( xStyle.get () );
+		pStyle->importTextColorStyle( xControlModel );
+		pStyle->importTextLineColorStyle( xControlModel );
+		pStyle->importFontStyle( xControlModel );
+		pStyle->importBackgroundColorStyle( xControlModel );
             }
+	
+	ctx.importDefaults( 0, 0, _xAttributes ); // inherited from BulletinBoardElement
+	ctx.importLongProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiPageValue") ),
+                            OUString( RTL_CONSTASCII_USTRINGPARAM("value") ),
+                            _xAttributes );
+        ctx.importBooleanProperty(
+            OUString( RTL_CONSTASCII_USTRINGPARAM("Decoration") ),
+            OUString( RTL_CONSTASCII_USTRINGPARAM("withtabs") ),
+        _xAttributes );
+	ctx.importEvents( _events );
+    // avoid ring-reference:
+    // vector< event elements > holding event elements holding this (via _pParent)
+    _events.clear();
         }
-        // Set up CelllRange
-        if ( sCellRange.getLength() )
+
+Reference< xml::input::XElement > Page::startChildElement(
+	sal_Int32 nUid, OUString const & rLocalName,
+	Reference< xml::input::XAttributes > const & xAttributes )
+	throw (xml::sax::SAXException, RuntimeException)
         {
-           Reference< form::binding::XListEntrySink  > xListEntrySink( ctx.getControlModel(), uno::UNO_QUERY );
-           Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellRangeAddressConversion" )), uno::UNO_QUERY );
-           if ( xListEntrySink.is() && xConvertor.is() )
+	// event
+    if (_pImport->isEventElement( nUid, rLocalName ))
            {
-               table::CellRangeAddress aAddress;
-               xConvertor->setPropertyValue( OUSTR( "PersistentRepresentation" ), uno::makeAny( sCellRange ) );
-               xConvertor->getPropertyValue( OUSTR( "Address" ) ) >>= aAddress;     
-               beans::NamedValue aArg1;
-               aArg1.Name = OUSTR("CellRange");
-               aArg1.Value <<= aAddress;
-           
-               uno::Sequence< uno::Any > aArgs(1);
-               aArgs[ 0 ]  <<= aArg1;
-           
-               uno::Reference< form::binding::XListEntrySource > xSource( xFac->createInstanceWithArguments( OUSTR("com.sun.star.table.CellRangeListSource" ), aArgs ), uno::UNO_QUERY );
-               xListEntrySink->setListEntrySource( xSource );
- 
+		return new EventElement(
+            nUid, rLocalName, xAttributes, this, _pImport );
            }
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("bulletinboard") ))
+	{
+
+		DialogImport* pPageImport = new DialogImport( *_pImport );
+                pPageImport->_xDialogModel = m_xContainer;
+		return new BulletinBoardElement( rLocalName, xAttributes, this,  pPageImport );
        }
+	else
+	{
+		
+		throw xml::sax::SAXException(
+			OUString( RTL_CONSTASCII_USTRINGPARAM("expected event element!") ),
+			Reference< XInterface >(), Any() );
    }
 }
+//__________________________________________________________________________________________________
 
-sal_Bool isVBACompatModeOn( DialogImport* _pImport )
+void Page::endElement()
+	throw (xml::sax::SAXException, RuntimeException)
 {
-	sal_Bool bVBAMode = sal_False;
-	Reference< script::XVBACompat > xVBACompat( _pImport->getScriptLibraryContainer(), UNO_QUERY );
-	if( xVBACompat.is() )
+        Reference< beans::XPropertySet > xProps( m_xContainer, UNO_QUERY_THROW );
+       
+	ControlImportContext ctx( _pImport, xProps, getControlId( _xAttributes ));
+
+	Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
+	
+	Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
+	if (xStyle.is())
 	{
-		bVBAMode = xVBACompat->getVBACompatModeOn();
+		StyleElement * pStyle = static_cast< StyleElement * >( xStyle.get () );
+		pStyle->importTextColorStyle( xControlModel );
+		pStyle->importTextLineColorStyle( xControlModel );
+		pStyle->importFontStyle( xControlModel );
+		pStyle->importBackgroundColorStyle( xControlModel );
 	}
-	return bVBAMode;
+	
+	ctx.importDefaults( 0, 0, _xAttributes ); // inherited from BulletinBoardElement
+	ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("Title") ), OUString( RTL_CONSTASCII_USTRINGPARAM("title") ), _xAttributes );
+	ctx.importEvents( _events );
+    // avoid ring-reference:
+    // vector< event elements > holding event elements holding this (via _pParent)
+    _events.clear();
 }
 
 // progessmeter
@@ -297,23 +310,9 @@ Reference< xml::input::XElement > ScrollBarElement::startChildElement(
 void ScrollBarElement::endElement()
     throw (xml::sax::SAXException, RuntimeException)
 {
-	OUString sService( OUSTR("com.sun.star.awt.UnoControlScrollBarModel") );
-	// we should probably limit this to vba mode also ( leave for now )
-	if ( isVBACompatModeOn( _pImport ) )
-		sService = OUSTR("com.sun.star.form.component.ScrollBar");
-
-    OUString sLinkedCell;
-    try
-    {
-        sLinkedCell = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "linked-cell" ) );
-    }
-    catch( Exception& /*e*/ )
-    {
-    }
-
     ControlImportContext ctx(
         _pImport, getControlId( _xAttributes ),
-		sService );	
+		getControlModelName( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlScrollBarModel") ), _xAttributes ) );
 
     Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
     if (xStyle.is())
@@ -357,10 +356,7 @@ void ScrollBarElement::endElement()
                                OUString( RTL_CONSTASCII_USTRINGPARAM("symbol-color") ),
                                _xAttributes );
     
-    // import cell-link
-	OUString sCellRange;
-	importBindableAndListRangeBits( _pImport, sLinkedCell, sCellRange, ctx );
-
+    ctx.importDataAwareProperty( OUSTR("linked-cell" ), _xAttributes );
 	ctx.importEvents( _events );
     // avoid ring-reference:
     // vector< event elements > holding event elements holding this (via _pParent)
@@ -392,18 +388,9 @@ Reference< xml::input::XElement > SpinButtonElement::startChildElement(
 void SpinButtonElement::endElement()
 	throw (xml::sax::SAXException, RuntimeException)
 {
-    OUString sLinkedCell;
-    try
-    {
-        sLinkedCell = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "linked-cell" ) );
-    }
-    catch( Exception& /*e*/ )
-    {
-    }
-
 	ControlImportContext ctx(
 		_pImport, getControlId( _xAttributes ),
-		OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.form.component.SpinButton") ) );
+		getControlModelName( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlSpinButtonModel") ), _xAttributes ) );
 	
 	Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
 	if (xStyle.is())
@@ -439,10 +426,7 @@ void SpinButtonElement::endElement()
     ctx.importHexLongProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("SymbolColor") ),
                                OUString( RTL_CONSTASCII_USTRINGPARAM("symbol-color") ),
                                _xAttributes );
-    // import cell-link
-	OUString sCellRange;
-	importBindableAndListRangeBits( _pImport, sLinkedCell, sCellRange, ctx );
-    
+    ctx.importDataAwareProperty( OUSTR("linked-cell" ), _xAttributes );
     ctx.importEvents( _events );
     // avoid ring-reference:
     // vector< event elements > holding event elements holding this (via _pParent)
@@ -450,7 +434,6 @@ void SpinButtonElement::endElement()
 }
 
 //##################################################################################################
-
 // fixedline
 //__________________________________________________________________________________________________
 Reference< xml::input::XElement > FixedLineElement::startChildElement(
@@ -1281,37 +1264,7 @@ void ImageControlElement::endElement()
     ctx.importBooleanProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ScaleImage") ),
                                OUString( RTL_CONSTASCII_USTRINGPARAM("scale-image") ),
                                _xAttributes );
-    rtl::OUString sURL = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "src" ) );
-    Reference< document::XStorageBasedDocument > xDocStorage( _pImport->getDocOwner(), UNO_QUERY );
-
-    if ( xDocStorage.is() && IsPackageURL( sURL ) )
-    {
-        uno::Sequence< Any > aArgs( 1 );
-        aArgs[ 0 ] <<= xDocStorage->getDocumentStorage();
-
-        ::comphelper::ComponentContext aContext( ::comphelper::getProcessServiceFactory() );
-        uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
-        aContext.createComponentWithArguments( OUSTR( "com.sun.star.comp.Svx.GraphicImportHelper" ), aArgs, xGraphicResolver );
-
-        if ( xGraphicResolver.is() )
-        {
-            rtl::OUString aTmp( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.Package:" ) );
-            aTmp += sURL;
-            sURL = xGraphicResolver->resolveGraphicObjectURL( aTmp );
-            Reference< beans::XPropertySet > xProps( ctx.getControlModel(), UNO_QUERY );
-            // we must set the url while the graphic object ( held by the resolver is in scope )
-            if ( xProps.is() )
-                xProps->setPropertyValue( OUSTR("ImageURL"), makeAny( sURL ) );
-        }
-    }
-    
-    else if ( sURL.getLength() > 0 )
-    {
-        Reference< beans::XPropertySet > xProps( ctx.getControlModel(), UNO_QUERY );
-        if ( xProps.is() )
-            xProps->setPropertyValue( OUSTR("ImageURL"), makeAny( sURL ) );
-    }
-
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "src" ), _xAttributes );
     ctx.importBooleanProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("Tabstop") ),
                                OUString( RTL_CONSTASCII_USTRINGPARAM("tabstop") ),
                                _xAttributes );
@@ -1644,24 +1597,10 @@ void TitledBoxElement::endElement()
         Reference< xml::input::XElement > xRadio( _radios[ nPos ] );
         Reference< xml::input::XAttributes > xAttributes(
             xRadio->getAttributes() );
-		OUString sLinkedCell;
-		OUString sCellRange;
-		OUString sService( OUSTR("com.sun.star.awt.UnoControlRadioButtonModel") );
-		try
-		{
-			sLinkedCell = xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "linked-cell" ) );
-			// we should probably limit this to vba mode also ( leave for now )
-			if ( isVBACompatModeOn( _pImport ) )
-				sService = OUSTR("com.sun.star.form.component.RadioButton");
-		}
-		catch( Exception& /*e*/ )
-		{
-		}
-
         
         ControlImportContext ctx(
             _pImport, getControlId( xAttributes ),
-			sService );
+			getControlModelName( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlRadioButtonModel") ), xAttributes ) );
         Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
         
         Reference< xml::input::XElement > xStyle( getStyle( xAttributes ) );
@@ -1688,19 +1627,13 @@ void TitledBoxElement::endElement()
         ctx.importVerticalAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                                          OUString( RTL_CONSTASCII_USTRINGPARAM("valign") ),
                                          xAttributes );
-        ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                                  OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-                                  xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), _xAttributes );
         ctx.importImagePositionProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                                          OUString( RTL_CONSTASCII_USTRINGPARAM("image-position") ),
                                          xAttributes );
         ctx.importBooleanProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiLine") ),
                                    OUString( RTL_CONSTASCII_USTRINGPARAM("multiline") ),
                                    xAttributes );
-        ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("GroupName") ),
-                                  OUString( RTL_CONSTASCII_USTRINGPARAM("group-name") ),
-                                  xAttributes );
-        
         sal_Int16 nVal = 0;
         sal_Bool bChecked = sal_False;
         if (getBoolAttr( &bChecked,
@@ -1713,7 +1646,9 @@ void TitledBoxElement::endElement()
         }
         xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("State") ),
                                          makeAny( nVal ) );
-	importBindableAndListRangeBits( _pImport, sLinkedCell, sCellRange, ctx );
+        
+	ctx.importDataAwareProperty( OUSTR("linked-cell" ), xAttributes );	
+
         ::std::vector< Reference< xml::input::XElement > > * radioEvents =
             static_cast< RadioElement * >( xRadio.get() )->getEvents();
         ctx.importEvents( *radioEvents );
@@ -1789,23 +1724,10 @@ void RadioGroupElement::endElement()
         Reference< xml::input::XElement > xRadio( _radios[ nPos ] );
         Reference< xml::input::XAttributes > xAttributes(
             xRadio->getAttributes() );
-		OUString sLinkedCell;
-		OUString sCellRange;
-		OUString sService( OUSTR("com.sun.star.awt.UnoControlRadioButtonModel") );
-		try
-		{
-			sLinkedCell = xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "linked-cell" ) );
-			// we should probably limit this to vba mode also ( leave for now )
-			if ( isVBACompatModeOn( _pImport ) )
-				sService = OUSTR("com.sun.star.form.component.RadioButton");
-		}
-		catch( Exception& /*e*/ )
-		{
-		}
         
         ControlImportContext ctx(
             _pImport, getControlId( xAttributes ),
-			sService );
+			getControlModelName( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlRadioButtonModel") ), xAttributes ) );
         Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
         
         Reference< xml::input::XElement > xStyle( getStyle( xAttributes ) );
@@ -1832,18 +1754,13 @@ void RadioGroupElement::endElement()
         ctx.importVerticalAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                                          OUString( RTL_CONSTASCII_USTRINGPARAM("valign") ),
                                          xAttributes );
-        ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                                  OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-                                  xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), xAttributes );
         ctx.importImagePositionProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                                          OUString( RTL_CONSTASCII_USTRINGPARAM("image-position") ),
                                          xAttributes );
         ctx.importBooleanProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("MultiLine") ),
                                    OUString( RTL_CONSTASCII_USTRINGPARAM("multiline") ),
                                    xAttributes );
-        ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("GroupName") ),
-                                  OUString( RTL_CONSTASCII_USTRINGPARAM("group-name") ),
-                                  xAttributes );
         sal_Int16 nVal = 0;
         sal_Bool bChecked = sal_False;
         if (getBoolAttr( &bChecked,
@@ -1857,7 +1774,8 @@ void RadioGroupElement::endElement()
         xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("State") ),
                                          makeAny( nVal ) );
         
-	importBindableAndListRangeBits( _pImport, sLinkedCell, sCellRange, ctx );
+	ctx.importDataAwareProperty( OUSTR("linked-cell" ), xAttributes );	
+		
         ::std::vector< Reference< xml::input::XElement > > * radioEvents =
             static_cast< RadioElement * >( xRadio.get() )->getEvents();
         ctx.importEvents( *radioEvents );
@@ -1978,26 +1896,10 @@ Reference< xml::input::XElement > MenuListElement::startChildElement(
 void MenuListElement::endElement()
     throw (xml::sax::SAXException, RuntimeException)
 {
-        OUString sLinkedCell;
-        OUString sCellRange;
-        OUString sListBoxService( OUSTR("com.sun.star.awt.UnoControlListBoxModel") );
-
-        // we should probably limit this to vba mode also ( leave for now )
-        if ( isVBACompatModeOn( _pImport ) )
-            sListBoxService = OUSTR("com.sun.star.form.component.ListBox");
-
-        try
-        {
-            sLinkedCell = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "linked-cell" ) );
-            sCellRange = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "source-cell-range" ) );
-        }
-        catch( Exception& /*e*/ )
-        {
-        }
     ControlImportContext ctx(
         _pImport, getControlId( _xAttributes ),
-		//OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) );
-		sListBoxService );
+		getControlModelName( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ), _xAttributes  ) );
+
     Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
     
     Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
@@ -2030,15 +1932,17 @@ void MenuListElement::endElement()
     ctx.importAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("Align") ),
                              OUString( RTL_CONSTASCII_USTRINGPARAM("align") ),
                              _xAttributes );
-        // import cell-link and cell source range
-	importBindableAndListRangeBits( _pImport, sLinkedCell, sCellRange, ctx );
+        
+        bool bHasLinkedCell = ctx.importDataAwareProperty( OUSTR("linked-cell" ), _xAttributes );
+        bool bHasSrcRange = ctx.importDataAwareProperty( OUSTR("source-cell-range" ), _xAttributes );
+	
     if (_popup.is())
     {
         MenuPopupElement * p = static_cast< MenuPopupElement * >( _popup.get() );
-        if (  !sCellRange.getLength() )
+                if ( !bHasSrcRange )
 		    xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ),
                                          makeAny( p->getItemValues() ) );
-        if (  !sLinkedCell.getLength() )
+                if ( !bHasLinkedCell )
 		    xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("SelectedItems") ),
                                          makeAny( p->getSelectedItems() ) );
     }
@@ -2085,26 +1989,9 @@ Reference< xml::input::XElement > ComboBoxElement::startChildElement(
 void ComboBoxElement::endElement()
     throw (xml::sax::SAXException, RuntimeException)
 {
-        OUString sService( OUSTR("com.sun.star.awt.UnoControlComboBoxModel") );
-
-        // we should probably limit this to vba mode also ( leave for now )
-        if ( isVBACompatModeOn( _pImport ) )
-            sService = OUSTR("com.sun.star.form.component.ComboBox");
-
-        OUString sLinkedCell;
-        OUString sCellRange;
-        try
-        {
-            sLinkedCell = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "linked-cell" ) );
-            sCellRange = _xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, OUSTR( "source-cell-range" ) );
-        }
-        catch( Exception& /*e*/ )
-        {
-        }
-
     ControlImportContext ctx(
         _pImport, getControlId( _xAttributes ),
-		sService );
+		getControlModelName( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlComboBoxModel") ), _xAttributes ) );
     Reference< beans::XPropertySet > xControlModel( ctx.getControlModel() );
     
     Reference< xml::input::XElement > xStyle( getStyle( _xAttributes ) );
@@ -2146,10 +2033,10 @@ void ComboBoxElement::endElement()
     ctx.importAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("Align") ),
                              OUString( RTL_CONSTASCII_USTRINGPARAM("align") ),
                              _xAttributes );
-	// import cell-link and cell source range
-	importBindableAndListRangeBits( _pImport, sLinkedCell, sCellRange, ctx );
+	ctx.importDataAwareProperty( OUSTR("linked-cell" ), _xAttributes );
+        bool bHasSrcRange = ctx.importDataAwareProperty( OUSTR("source-cell-range" ), _xAttributes );
     
-	if (_popup.is() && !sCellRange.getLength() )
+	if (_popup.is() && !bHasSrcRange )
     {
         MenuPopupElement * p = static_cast< MenuPopupElement * >( _popup.get() );
         xControlModel->setPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM("StringItemList") ),
@@ -2216,9 +2103,7 @@ void CheckBoxElement::endElement()
     ctx.importVerticalAlignProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("VerticalAlign") ),
                                      OUString( RTL_CONSTASCII_USTRINGPARAM("valign") ),
                                      _xAttributes );
-    ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                              OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-                              _xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), _xAttributes );
     ctx.importImagePositionProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                                      OUString( RTL_CONSTASCII_USTRINGPARAM("image-position") ),
                                      _xAttributes );
@@ -2319,9 +2204,7 @@ void ButtonElement::endElement()
     ctx.importButtonTypeProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("PushButtonType") ),
                                   OUString( RTL_CONSTASCII_USTRINGPARAM("button-type") ),
                                   _xAttributes );
-    ctx.importStringProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-                              OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-                              _xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), _xAttributes );
     ctx.importImagePositionProperty( OUString( RTL_CONSTASCII_USTRINGPARAM("ImagePosition") ),
                                      OUString( RTL_CONSTASCII_USTRINGPARAM("image-position") ),
                                      _xAttributes );
@@ -2475,8 +2358,7 @@ Reference< xml::input::XElement > BulletinBoardElement::startChildElement(
     {
         return new ScrollBarElement( rLocalName, xAttributes, this, _pImport );
     }
-	// spinbutton
-	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("spinbutton") ) && isVBACompatModeOn( _pImport ) )
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("spinbutton") ))
 	{
 		return new SpinButtonElement( rLocalName, xAttributes, this, _pImport );
 	}
@@ -2489,9 +2371,18 @@ Reference< xml::input::XElement > BulletinBoardElement::startChildElement(
 	{
 		return new MultiPage( rLocalName, xAttributes, this, _pImport );
     }
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("frame") ))
+	{
+		return new Frame( rLocalName, xAttributes, this, _pImport );
+	}
+	else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("page") ))
+	{
+		return new Page( rLocalName, xAttributes, this, _pImport );
+	}
     // bulletinboard
     else if (rLocalName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("bulletinboard") ))
     {
+                OSL_TRACE("*** BulletinBoard createing BulletinBoardElement with %d styles", _pImport->_styles.size() );
         return new BulletinBoardElement( rLocalName, xAttributes, this, _pImport );
     }
     else
@@ -2664,10 +2555,7 @@ void WindowElement::endElement()
         OUString( RTL_CONSTASCII_USTRINGPARAM("Decoration") ),
         OUString( RTL_CONSTASCII_USTRINGPARAM("withtitlebar") ),
         _xAttributes );
-    ctx.importStringProperty( 
-        OUString( RTL_CONSTASCII_USTRINGPARAM("ImageURL") ),
-        OUString( RTL_CONSTASCII_USTRINGPARAM("image-src") ),
-        _xAttributes );
+        ctx.importImageURLProperty( OUSTR( "ImageURL" ), OUSTR( "image-src" ), _xAttributes );
     ctx.importEvents( _events );	
     // avoid ring-reference:
     // vector< event elements > holding event elements holding this (via _pParent)
diff --git xmlscript/source/xmldlg_imexp/xmldlg_import.cxx xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
index 0f03070..a66c4a0 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
@@ -57,13 +57,20 @@
 #include <com/sun/star/script/ScriptEventDescriptor.hpp>
 
 #include <com/sun/star/view/SelectionType.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/form/binding/XBindableValue.hpp>
+#include <com/sun/star/form/binding/XValueBinding.hpp>
+#include <com/sun/star/form/binding/XListEntrySink.hpp>
+#include <com/sun/star/beans/NamedValue.hpp>
+#include <com/sun/star/table/CellAddress.hpp>
+#include <com/sun/star/table/CellRangeAddress.hpp>
+#include <com/sun/star/document/XGraphicObjectResolver.hpp>
 #include <com/sun/star/document/XStorageBasedDocument.hpp>
-#include <com/sun/star/script/DocumentScriptLibraryContainer.hpp>
-#include <com/sun/star/script/XVBACompat.hpp>
+
+#include <comphelper/componentcontext.hxx>
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
-using namespace ::com::sun::star::frame;
 using ::rtl::OUString;
 
 namespace xmlscript
@@ -128,6 +135,20 @@ OUString ControlElement::getControlId(
     return aId;
 }
 
+OUString ControlElement::getControlModelName(
+    OUString const& rDefaultModel,
+    Reference< xml::input::XAttributes > const & xAttributes )
+{
+    OUString aModel;
+    aModel = xAttributes->getValueByUidName(
+        _pImport->XMLNS_DIALOGS_UID,
+        OUString( RTL_CONSTASCII_USTRINGPARAM("control-implementation") ) );
+    if (! aModel.getLength())
+        aModel = rDefaultModel;
+    return aModel;
+}
+
+
 //##################################################################################################
 
 //__________________________________________________________________________________________________
@@ -819,6 +840,7 @@ bool ImportContext::importDoubleProperty(
     }
     return false;
 }
+
 //__________________________________________________________________________________________________
 bool ImportContext::importBooleanProperty(
     OUString const & rPropName, OUString const & rAttrName,
@@ -970,6 +992,115 @@ bool ImportContext::importVerticalAlignProperty(
     return false;
 }
 //__________________________________________________________________________________________________
+bool ImportContext::importImageURLProperty(
+    OUString const & rPropName, OUString const & rAttrName,
+    Reference< xml::input::XAttributes > const & xAttributes )
+{
+    rtl::OUString sURL = xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, rAttrName );
+    if ( sURL.getLength() )
+    {
+        Reference< document::XStorageBasedDocument > xDocStorage( _pImport->getDocOwner(), UNO_QUERY );
+    
+        uno::Reference< document::XGraphicObjectResolver > xGraphicResolver;
+        if ( xDocStorage.is() )
+        {
+            uno::Sequence< Any > aArgs( 1 );
+            aArgs[ 0 ] <<= xDocStorage->getDocumentStorage();
+            ::comphelper::ComponentContext aContext( _pImport->getComponentContext() );
+            aContext.createComponentWithArguments( OUSTR( "com.sun.star.comp.Svx.GraphicImportHelper" ), aArgs, xGraphicResolver );
+            if ( xGraphicResolver.is() )
+            {
+                rtl::OUString aTmp( RTL_CONSTASCII_USTRINGPARAM( "vnd.sun.star.Package:" ) );
+                aTmp += sURL;
+                try
+                {
+                    aTmp = xGraphicResolver->resolveGraphicObjectURL( aTmp );
+                    if ( aTmp.getLength() )
+                        sURL = aTmp;
+                }
+                catch( uno::Exception& e )
+                {
+					(void)e;
+                    return false;
+                }
+    
+            }
+        }
+        if ( sURL.getLength() > 0 )
+        {
+            Reference< beans::XPropertySet > xProps( getControlModel(), UNO_QUERY );
+            if ( xProps.is() )
+            {
+                xProps->setPropertyValue( rPropName, makeAny( sURL ) );
+                return true;
+            }
+        }
+    }
+    return false;
+}
+//__________________________________________________________________________________________________
+ bool ImportContext::importDataAwareProperty( 
+        ::rtl::OUString const & rPropName,
+        Reference<xml::input::XAttributes> const & xAttributes )
+{
+    OUString sLinkedCell;
+    OUString sCellRange;
+    if ( rPropName.equals( OUSTR("linked-cell" ) ) )
+       sLinkedCell = xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, rPropName );
+    if ( rPropName.equals( OUSTR(  "source-cell-range" ) ) )
+    	sCellRange = xAttributes->getValueByUidName( _pImport->XMLNS_DIALOGS_UID, rPropName );    
+    bool bRes = false;
+    Reference< lang::XMultiServiceFactory > xFac( _pImport->getDocOwner(), UNO_QUERY );
+    if ( xFac.is() && ( sLinkedCell.getLength() ||  sCellRange.getLength() ) )
+    {
+        // Set up Celllink
+        if ( sLinkedCell.getLength() )
+        {
+            Reference< form::binding::XBindableValue > xBindable( getControlModel(), uno::UNO_QUERY );
+            Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellAddressConversion" )), uno::UNO_QUERY );
+            if ( xBindable.is() && xConvertor.is() )
+            {
+                table::CellAddress aAddress;
+                xConvertor->setPropertyValue( OUSTR( "PersistentRepresentation" ), uno::makeAny( sLinkedCell ) );
+                xConvertor->getPropertyValue( OUSTR( "Address" ) ) >>= aAddress;     
+                beans::NamedValue aArg1;
+                aArg1.Name = OUSTR("BoundCell");
+                aArg1.Value <<= aAddress;
+                
+                uno::Sequence< uno::Any > aArgs(1);
+                aArgs[ 0 ]  <<= aArg1;
+            
+                uno::Reference< form::binding::XValueBinding > xBinding( xFac->createInstanceWithArguments( OUSTR("com.sun.star.table.CellValueBinding" ), aArgs ), uno::UNO_QUERY );
+                xBindable->setValueBinding( xBinding );
+                bRes = true; 
+            }
+        }
+        // Set up CelllRange
+        if ( sCellRange.getLength() )
+        {
+            Reference< form::binding::XListEntrySink  > xListEntrySink( getControlModel(), uno::UNO_QUERY );
+            Reference< beans::XPropertySet > xConvertor( xFac->createInstance( OUSTR( "com.sun.star.table.CellRangeAddressConversion" )), uno::UNO_QUERY );
+            if ( xListEntrySink.is() && xConvertor.is() )
+            {
+                table::CellRangeAddress aAddress;
+                xConvertor->setPropertyValue( OUSTR( "PersistentRepresentation" ), uno::makeAny( sCellRange ) );
+                xConvertor->getPropertyValue( OUSTR( "Address" ) ) >>= aAddress;     
+                beans::NamedValue aArg1;
+                aArg1.Name = OUSTR("CellRange");
+                aArg1.Value <<= aAddress;
+        
+                uno::Sequence< uno::Any > aArgs(1);
+                aArgs[ 0 ]  <<= aArg1;
+    
+                uno::Reference< form::binding::XListEntrySource > xSource( xFac->createInstanceWithArguments( OUSTR("com.sun.star.table.CellRangeListSource" ), aArgs ), uno::UNO_QUERY );
+                xListEntrySink->setListEntrySource( xSource );
+                bRes = true; 
+            }
+        }
+    }
+    return bRes;
+}
+//__________________________________________________________________________________________________
 bool ImportContext::importImageAlignProperty(
     OUString const & rPropName, OUString const & rAttrName,
     Reference< xml::input::XAttributes > const & xAttributes )
@@ -1892,42 +2023,20 @@ Reference< xml::input::XElement > DialogImport::getStyle(
     }
     return 0;
 }
-//__________________________________________________________________________________________________
-Reference< script::XLibraryContainer > DialogImport::getScriptLibraryContainer()
-{
-	if( !_xScriptLibraryContainer.is() )
-	{
-		try
-		{
-			Reference< beans::XPropertySet > xProps( _xDoc, UNO_QUERY );
-			if( xProps.is() )
-				_xScriptLibraryContainer.set( xProps->getPropertyValue( OUSTR("BasicLibraries") ), UNO_QUERY );
-		}
-		catch( const Exception& )
-		{
-		}
-	}
-
-	return _xScriptLibraryContainer;
-}
 
 //##################################################################################################
 
 //==================================================================================================
 Reference< xml::sax::XDocumentHandler > SAL_CALL importDialogModel(
     Reference< container::XNameContainer > const & xDialogModel,
-    Reference< XComponentContext > const & xContext,
-    Reference< XModel > const & xDocument )
+    Reference< XComponentContext > const & xContext, Reference< frame::XModel > const & xDocument )
     SAL_THROW( (Exception) )
 {
-    DialogImport* pImport = new DialogImport( xContext, xDialogModel, xDocument );
-    uno::Reference< script::XVBACompat > xVBAModeSource( pImport->getScriptLibraryContainer(), uno::UNO_QUERY );
-    
-    uno::Reference< beans::XPropertySet > xDlgProps( xDialogModel, uno::UNO_QUERY );
-    if ( xVBAModeSource.is() && xDlgProps.is() && xVBAModeSource->getVBACompatModeOn() )
-        xDlgProps->setPropertyValue( OUSTR("VBAForm"), uno::makeAny( sal_True ) );
+    // single set of styles and stylenames apply to all containees
+    :: boost::shared_ptr< ::std::vector< ::rtl::OUString > > pStyleNames( new ::std::vector< ::rtl::OUString > );
+    :: boost::shared_ptr< ::std::vector< css::uno::Reference< css::xml::input::XElement > > > pStyles( new ::std::vector< css::uno::Reference< css::xml::input::XElement > > );    
     return ::xmlscript::createDocumentHandler(
-        static_cast< xml::input::XRoot * >( pImport ) );
+        static_cast< xml::input::XRoot * >(
+            new DialogImport( xContext, xDialogModel, pStyleNames, pStyles, xDocument ) ) );
 }
-
 }
diff --git xmlscript/util/makefile.mk xmlscript/util/makefile.mk
index 7a391cd..ef5e0b0 100644
--- xmlscript/util/makefile.mk
+++ xmlscript/util/makefile.mk
@@ -54,8 +54,8 @@ SHL1LIBS= \
         $(LIB1TARGET)
 
 SHL1STDLIBS= \
-		$(COMPHELPERLIB)                \
         $(CPPUHELPERLIB)		\
+		$(COMPHELPERLIB)		\
         $(CPPULIB) 			\
         $(SALLIB)
 
diff -r 23debe0bf2cd oox/source/ole/simplevbaprojectfilter.cxx
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ oox/source/ole/simplevbaprojectfilter.cxx	Fri Jul 02 10:23:21 2010 +0100
@@ -0,0 +1,75 @@
+#include "oox/ole/simplevbaprojectfilter.hxx"
+#include "oox/ole/vbaproject.hxx"
+#include "oox/helper/binaryinputstream.hxx"
+
+using ::rtl::OUString;
+using ::com::sun::star::uno::Any;
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::uno::Sequence;
+using ::com::sun::star::uno::Exception;
+using ::com::sun::star::uno::XInterface;
+using ::com::sun::star::lang::XMultiServiceFactory;
+using ::com::sun::star::xml::sax::XFastDocumentHandler;
+using ::oox::core::BinaryFilterBase;
+//using ::oox::core::FragmentHandlerRef;
+using ::oox::core::Relation;
+using ::oox::core::Relations;
+using ::oox::core::XmlFilterBase;
+
+namespace oox {
+namespace ole {
+
+OUString SAL_CALL SimpleWordVBAProjFilter_getImplementationName() throw()
+{
+    return CREATE_OUSTRING( "com.sun.star.comp.ole.SimpleWordVBAProjFilter" );
+}
+
+Sequence< OUString > SAL_CALL SimpleWordVBAProjFilter_getSupportedServiceNames() throw()
+{
+    OUString aServiceName = CREATE_OUSTRING( "com.sun.star.comp.ole.SimpleWordVBAProjFilter" );
+    Sequence< OUString > aSeq( &aServiceName, 1 );
+    return aSeq;
+}
+
+Reference< XInterface > SAL_CALL SimpleWordVBAProjFilter_createInstance(
+        const Reference< XMultiServiceFactory >& rxGlobalFactory ) throw( Exception )
+{
+    return static_cast< ::cppu::OWeakObject* >( new SimpleWordVBAProjFilter( rxGlobalFactory ) );
+}
+
+SimpleVBAProjFilter::SimpleVBAProjFilter( const Reference< XMultiServiceFactory >& rxGlobalFactory, const rtl::OUString& rsAppName, const rtl::OUString& rsVBAStorageName ) :
+    BinaryFilterBase( rxGlobalFactory ), msAppName( rsAppName ), msVBAStorageName( rsVBAStorageName )
+{
+}
+
+SimpleVBAProjFilter::~SimpleVBAProjFilter()
+{
+}
+
+bool SimpleVBAProjFilter::importDocument() throw()
+{
+    StorageRef xVbaPrjStrg = openSubStorage( msVBAStorageName, false )    ;
+    if( xVbaPrjStrg.get() && xVbaPrjStrg->isStorage() )
+    {
+        VbaProject aVbaProject( getGlobalFactory(), getModel(), msAppName );
+        aVbaProject.importVbaProject( *xVbaPrjStrg, getGraphicHelper() );
+        return true;
+    }
+    return false;
+}
+
+bool SimpleVBAProjFilter::exportDocument() throw()
+{
+    return false;
+}
+
+SimpleWordVBAProjFilter::SimpleWordVBAProjFilter( const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& rxGlobalFactory ) : SimpleVBAProjFilter( rxGlobalFactory, CREATE_OUSTRING( "Writer" ), CREATE_OUSTRING( "Macros" ) )
+{
+}
+
+OUString SimpleWordVBAProjFilter::implGetImplementationName() const
+{
+    return SimpleWordVBAProjFilter_getImplementationName();
+}
+
+} /*namespace ole*/ } /*namespace oox*/
diff -r 23debe0bf2cd oox/inc/oox/ole/simplevbaprojectfilter.hxx
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ oox/inc/oox/ole/simplevbaprojectfilter.hxx	Fri Jul 02 10:23:21 2010 +0100
@@ -0,0 +1,34 @@
+#ifndef OOX_OLE_SIMPLEVBAPROJFILTER_HXX
+#define OOX_XLS_SIMPLEVBAPROJFILTER_HXX
+
+#include "oox/core/xmlfilterbase.hxx"
+#include "oox/core/binaryfilterbase.hxx"
+namespace oox {
+namespace ole {
+
+class SimpleVBAProjFilter : public ::oox::core::BinaryFilterBase
+{
+    rtl::OUString       msAppName;
+    rtl::OUString       msVBAStorageName;
+public:
+    explicit            SimpleVBAProjFilter(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& rxGlobalFactory,
+                            const rtl::OUString& rsAppName,
+                            const rtl::OUString& rsVBAStorageName );
+    virtual             ~SimpleVBAProjFilter();
+
+    virtual bool        importDocument() throw();
+    virtual bool        exportDocument() throw();
+};
+
+class SimpleWordVBAProjFilter : public SimpleVBAProjFilter
+{
+public:
+    explicit            SimpleWordVBAProjFilter(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& rxGlobalFactory );
+private:
+    virtual ::rtl::OUString implGetImplementationName() const;
+};
+}
+}
+#endif
