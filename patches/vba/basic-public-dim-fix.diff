diff --git basic/inc/basic/sbmod.hxx basic/inc/basic/sbmod.hxx
index ab496bc..d92bb84 100644
--- basic/inc/basic/sbmod.hxx
+++ basic/inc/basic/sbmod.hxx
@@ -38,6 +38,7 @@
 #include <rtl/ustring.hxx>
 #endif
 #include <com/sun/star/script/ModuleType.hpp>
+#include <vector>
 class SbMethod;
 class SbProperty;
 class SbiRuntime;
@@ -59,6 +60,7 @@ class SbModule : public SbxObject
 	friend class	SbClassModuleObject;
 
 	SbModuleImpl*	mpSbModuleImpl;		// Impl data
+	std::vector< String > mModuleVariableNames;
 	SbModule();
 	SbModule(const SbModule&);
 
@@ -138,6 +140,8 @@ public:
         INT32 GetModuleType() { return mnType; }
         void SetModuleType( INT32 nType ) { mnType = nType; }
 	bool GetIsProxyModule() { return bIsProxyModule; }
+        void AddVarName( const String& aName );
+        void RemoveVars();
 };
 
 #ifndef __SB_SBMODULEREF_HXX
diff --git basic/source/classes/sbxmod.cxx basic/source/classes/sbxmod.cxx
index cf5b5a5..36eb266 100644
--- basic/source/classes/sbxmod.cxx
+++ basic/source/classes/sbxmod.cxx
@@ -822,6 +822,33 @@ void SbModule::RunInit()
 }
 
 // Mit private/dim deklarierte Variablen loeschen
+
+void SbModule::AddVarName( const String& aName ) 
+{ 
+	// see if the name is added allready
+	std::vector< String >::iterator it_end = mModuleVariableNames.end();
+	for ( std::vector< String >::iterator it = mModuleVariableNames.begin(); it != it_end; ++it )
+	{
+		if ( aName == *it )
+			return;	
+	}
+	mModuleVariableNames.push_back( aName ); 
+}
+
+void SbModule::RemoveVars()
+{
+    std::vector< String >::iterator it_end = mModuleVariableNames.end();
+    for ( std::vector< String >::iterator it = mModuleVariableNames.begin(); it != it_end; ++it )
+    {
+	// We don't want a Find being called in a derived class ( e.g. 
+	// SbUserform because it could trigger say and initialise event 
+	// which would cause basic to be re-run in the middle of the init
+	SbxVariableRef p = SbModule::Find( *it, SbxCLASS_PROPERTY );
+	if( p.Is() )
+		Remove (p);
+    }
+}
+
 void SbModule::ClearPrivateVars()
 {
 	for( USHORT i = 0 ; i < pProps->Count() ; i++ )
diff --git basic/source/comp/sbcomp.cxx basic/source/comp/sbcomp.cxx
index 8af8285..047f30e 100644
--- basic/source/comp/sbcomp.cxx
+++ basic/source/comp/sbcomp.cxx
@@ -134,6 +134,7 @@ BOOL SbModule::Compile()
 	if( bRet )
 	{
 		pBasic->ClearAllModuleVars();
+		RemoveVars(); // remove 'this' Modules variables
 		// clear all method statics
 		for( USHORT i = 0; i < pMethods->Count(); i++ )
 		{
diff --git basic/source/runtime/step2.cxx basic/source/runtime/step2.cxx
index 38e794d..644ecdb 100644
--- basic/source/runtime/step2.cxx
+++ basic/source/runtime/step2.cxx
@@ -1131,16 +1131,26 @@ void SbiRuntime::StepGLOBAL( UINT32 nOp1, UINT32 nOp2 )
 	if( pImg->GetFlag( SBIMG_CLASSMODULE ) )
 		StepPUBLIC_Impl( nOp1, nOp2, true );
 
+        SbxObject* pStorage = &rBasic;
 	String aName( pImg->GetString( static_cast<short>( nOp1 ) ) );
+	// Store module scope variables at module scope ( what about global )
+	// in mso global is about visibility not scope, scope is always
+	// determined by the placement of the variables
+	if ( SbiRuntime::isVBAEnabled() ) 
+        {
+            pStorage = pMod;
+            pMod->AddVarName( aName );
+        }
+
 	SbxDataType t = (SbxDataType) nOp2;
-	BOOL bFlag = rBasic.IsSet( SBX_NO_MODIFY );
+	BOOL bFlag = pStorage->IsSet( SBX_NO_MODIFY );
 	rBasic.SetFlag( SBX_NO_MODIFY );
-	SbxVariableRef p = rBasic.Find( aName, SbxCLASS_PROPERTY );
+	SbxVariableRef p = pStorage->Find( aName, SbxCLASS_PROPERTY );
 	if( p.Is() )
-		rBasic.Remove (p);
-	p = rBasic.Make( aName, SbxCLASS_PROPERTY, t );
+		pStorage->Remove (p);
+	p = pStorage->Make( aName, SbxCLASS_PROPERTY, t );
 	if( !bFlag )
-		rBasic.ResetFlag( SBX_NO_MODIFY );
+		pStorage->ResetFlag( SBX_NO_MODIFY );
 	if( p )
 	{
 		p->SetFlag( SBX_DONTSTORE );
