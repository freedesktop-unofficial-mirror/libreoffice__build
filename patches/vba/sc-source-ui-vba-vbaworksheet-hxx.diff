--- /dev/null	
+++ sc/source/ui/vba/vbaworksheet.hxx	
@@ -0,0 +1,69 @@
+#ifndef SC_VBA_WORKSHEET_HXX
+#define SC_VBA_WORKSHEET_HXX
+
+#include <com/sun/star/sheet/XSpreadsheet.hpp>
+#include <org/openoffice/vba/XWorksheet.hpp>
+#include "vbahelper.hxx"
+
+class ScModelObj;
+
+class ScVbaWorksheet : public org::openoffice::vba::XWorksheet
+{
+	SC_VBA_UNO_HELPER_MEMBERS;
+	uno::Reference< sheet::XSpreadsheet > mxSheet;
+
+public:
+	ScVbaWorksheet( uno::Reference< sheet::XSpreadsheet > xSheet ) :
+ 			mxSheet( xSheet ), mnRefCount( 1 ) {}
+	virtual ~ScVbaWorksheet() {}
+
+	SC_VBA_UNO_HELPER_XINTERFACE;
+
+    // Attributes
+    virtual ::rtl::OUString SAL_CALL getName() throw (::com::sun::star::uno::RuntimeException) 
+    			{return rtl::OUString::createFromAscii( "VBA Worksheet Name" ); }
+    virtual ::sal_Bool SAL_CALL getProtectContents() throw (uno::RuntimeException)
+			{ return sal_True; }
+    virtual void SAL_CALL setProtectContents( ::sal_Bool _protectcontents ) throw (uno::RuntimeException)
+			{ }
+    virtual ::sal_Bool SAL_CALL getProtectDrawingObjects() throw (uno::RuntimeException)
+			{ return sal_True; }
+    virtual ::sal_Bool SAL_CALL getProtectionMode() throw (uno::RuntimeException)
+			{ return sal_True; }
+    virtual ::sal_Bool SAL_CALL getProtectScenarios() throw (uno::RuntimeException)
+			{ return sal_True; }
+    virtual ::sal_Int32 SAL_CALL getStandardHeight() throw (uno::RuntimeException)
+			{ return 1; }		
+    virtual ::sal_Int32 SAL_CALL getStandardWidth() throw (uno::RuntimeException)
+			{ return 1; }				
+    virtual ::sal_Bool SAL_CALL getVisible() throw (uno::RuntimeException)
+			{ return sal_True; }
+	
+    // Methods
+    virtual void SAL_CALL activate(  ) throw (uno::RuntimeException)
+			{}
+    virtual void SAL_CALL calculate(  ) throw (uno::RuntimeException)
+			{}
+    virtual void SAL_CALL checkspelling( const ::rtl::OUString& aCustomDictionary, ::sal_Bool bIgnoreUpperCase, ::sal_Bool bAlwaysSuggest, const ::rtl::OUString& aSpellLang ) throw (uno::RuntimeException)
+			{}
+    virtual void SAL_CALL copy(  ) throw (uno::RuntimeException)
+			{}
+    virtual void SAL_CALL move(  ) throw (uno::RuntimeException)
+			{}
+	
+	/*deleteSheet named to avoid conflict with keyword; vba method is Delete*/
+    virtual void SAL_CALL deleteSheet(  ) throw (uno::RuntimeException)
+			{}
+    virtual void SAL_CALL protect( const ::rtl::OUString& aPassword, ::sal_Bool bDrawingObjects, ::sal_Bool bContents, ::sal_Bool bScenarios, ::sal_Bool bUserInterfaceOnly ) throw (uno::RuntimeException)
+			{}
+    virtual void SAL_CALL select(  ) throw (uno::RuntimeException)
+			{}
+    virtual void SAL_CALL setBackgroundPicture( const ::rtl::OUString& aFileName ) throw (uno::RuntimeException)
+			{}
+    virtual void SAL_CALL unprotect( const ::rtl::OUString& aPassword ) throw (uno::RuntimeException)
+			{}
+
+};
+
+#endif /* SC_VBA_WORKSHEET_HXX */
+
