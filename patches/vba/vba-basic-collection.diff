Index: basic/source/runtime/step2.cxx
===================================================================
RCS file: /cvs/script/basic/source/runtime/step2.cxx,v
retrieving revision 1.17
diff -u -r1.17 step2.cxx
--- basic/source/runtime/step2.cxx	13 Apr 2005 09:18:08 -0000	1.17
+++ basic/source/runtime/step2.cxx	9 Aug 2005 15:45:25 -0000
@@ -72,11 +72,13 @@
 #include "opcodes.hxx"
 
 #include <com/sun/star/container/XIndexAccess.hpp>
+#include <org/openoffice/vba/XCollection.hpp>
 #include <com/sun/star/uno/Any.hxx>
 
 using namespace com::sun::star::container;
 using namespace com::sun::star::lang;
 
+Any sbxToUnoValue( SbxVariable* pVar ); 
 
 // Suchen eines Elements
 // Die Bits im String-ID:
@@ -475,40 +477,63 @@
 				{
 					Reference< XInterface > x = *(Reference< XInterface >*)aAny.getValue();
 					Reference< XIndexAccess > xIndexAccess( x, UNO_QUERY );
-
-					// Haben wir Index-Access?
-					if( xIndexAccess.is() )
+					Reference< org::openoffice::vba::XCollection > xColl( x, UNO_QUERY );
+					UINT32 nParamCount = (UINT32)pPar->Count() - 1;
+					if( nParamCount != 1 )
+					{
+						StarBASIC::Error( SbERR_BAD_ARGUMENT );
+						return pElem;
+					}
+					if ( xColl.is() || xIndexAccess.is() )
 					{
-						UINT32 nParamCount = (UINT32)pPar->Count() - 1;
-						if( nParamCount != 1 )
-						{
-							StarBASIC::Error( SbERR_BAD_ARGUMENT );
-							return pElem;
-						}
-
-						// Index holen
-						INT32 nIndex = pPar->Get( 1 )->GetLong();
 						Reference< XInterface > xRet;
-						try
-						{
-							Any aAny = xIndexAccess->getByIndex( nIndex );
-							TypeClass eType = aAny.getValueType().getTypeClass();
-							if( eType == TypeClass_INTERFACE )
-								xRet = *(Reference< XInterface >*)aAny.getValue();
+						if ( xColl.is() )
+						{	
+							Any param = sbxToUnoValue( 
+								pPar->Get( 1  ) );
+							try
+							{
+								Any aAny = xColl->Item( param );
+								TypeClass eType = aAny.getValueType().getTypeClass();
+								if( eType == TypeClass_INTERFACE )
+								{
+									xRet = *(Reference< XInterface >*)aAny.getValue();
+								}
+	
+							}
+							catch( Exception& e )
+							{
+								StarBASIC::Error( SbERR_OUT_OF_RANGE );
+							}
 						}
-						catch (IndexOutOfBoundsException& e1)
+	
+						// Haben wir Index-Access?
+						else if( xIndexAccess.is() )
 						{
-							// Bei Exception erstmal immer von Konvertierungs-Problem ausgehen
-							StarBASIC::Error( SbERR_OUT_OF_RANGE );
-						}
+	
+							// Index holen
+							INT32 nIndex = pPar->Get( 1 )->GetLong();
+							try
+							{
+								Any aAny = xIndexAccess->getByIndex( nIndex );
+								TypeClass eType = aAny.getValueType().getTypeClass();
+								if( eType == TypeClass_INTERFACE )
+									xRet = *(Reference< XInterface >*)aAny.getValue();
+							}
+							catch (IndexOutOfBoundsException& e1)
+							{
+								// Bei Exception erstmal immer von Konvertierungs-Problem ausgehen
+								StarBASIC::Error( SbERR_OUT_OF_RANGE );
+							}
 
+						}
 						// #57847 Immer neue Variable anlegen, sonst Fehler
 						// durch PutObject(NULL) bei ReadOnly-Properties.
 						pElem = new SbxVariable( SbxVARIANT );
 						if( xRet.is() )
 						{
 							aAny <<= xRet;
-
+	
 							// #67173 Kein Namen angeben, damit echter Klassen-Namen eintragen wird
 							String aName;
 							SbxObjectRef xWrapper = (SbxObject*)new SbUnoObject( aName, aAny );
