--- sc/source/ui/vba/vbaworksheets.cxx	
+++ sc/source/ui/vba/vbaworksheets.cxx
@@ -55,6 +55,7 @@
 
 #include <org/openoffice/excel/XApplication.hpp>
 #include <tools/string.hxx>
+#include "tabvwsh.hxx"
 
 #include "vbaglobals.hxx"
 #include "vbaworksheet.hxx"
@@ -64,6 +65,91 @@ using namespace ::org::openoffice;
 using namespace ::com::sun::star;
 
 
+typedef ::cppu::WeakImplHelper1< container::XEnumeration > SheetEnumeration_BASE;
+typedef ::cppu::WeakImplHelper3< container::XNameAccess, container::XIndexAccess, container::XEnumerationAccess > SheetCollectionHelper_BASE;
+// a map ( or hashmap ) wont do as we need also to preserve the order 
+// (as added ) of the items
+typedef std::vector< uno::Reference< sheet::XSpreadsheet > >  SheetMap;
+
+class WorkSheetsEnumeration : public SheetEnumeration_BASE
+{
+	SheetMap mSheetMap;
+	SheetMap::iterator mIt;
+public:
+	WorkSheetsEnumeration( const SheetMap& sMap ) : mSheetMap( sMap ), mIt( mSheetMap.begin() ) {}
+	virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+	{
+		return ( mIt != mSheetMap.end() );
+	}
+	virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+	{
+		if ( !hasMoreElements() )
+			throw container::NoSuchElementException();
+		uno::Reference< sheet::XSpreadsheet > xSheet( *mIt++ );
+		return uno::makeAny( xSheet ) ;
+	}
+};
+
+class SheetCollectionHelper : public SheetCollectionHelper_BASE
+{
+	SheetMap mSheetMap;
+	SheetMap::iterator cachePos;
+public:
+	SheetCollectionHelper( const SheetMap& sMap ) : mSheetMap( sMap ), cachePos(0) {}
+	// XElementAccess
+	virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException) { return  sheet::XSpreadsheet::static_type(0); }
+	virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException) { return ( mSheetMap.size() > 0 ); }
+	// XNameAcess 
+	virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+	{
+		if ( !hasByName(aName) )
+			throw container::NoSuchElementException();
+		return uno::makeAny( *cachePos );
+	}
+	virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+	{
+		uno::Sequence< rtl::OUString > sNames( mSheetMap.size() );
+		rtl::OUString* pString = sNames.getArray();
+		SheetMap::iterator it = mSheetMap.begin();
+		SheetMap::iterator it_end = mSheetMap.end();
+
+		for ( ; it != it_end; ++it, ++pString )
+		{
+			uno::Reference< container::XNamed > xName( *it, uno::UNO_QUERY_THROW );	
+			*pString = xName->getName();
+		}
+		return sNames;
+	}
+	virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+	{
+		cachePos = mSheetMap.begin();
+		SheetMap::iterator it_end = mSheetMap.end();
+		for ( ; cachePos != it_end; ++cachePos )
+		{
+			uno::Reference< container::XNamed > xName( *cachePos, uno::UNO_QUERY_THROW );	
+			if ( aName.equals( xName->getName() ) )
+				break;
+		}
+		return ( cachePos != it_end );
+	}
+
+	// XElementAccess
+	virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException) { return mSheetMap.size(); }	
+	virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException )
+	{
+		if ( Index < 0 || Index >= getCount() )
+			throw lang::IndexOutOfBoundsException();
+	
+		return uno::makeAny( mSheetMap[ Index ] );
+
+	}
+	// XEnumerationAccess
+	virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+	{
+		return new WorkSheetsEnumeration( mSheetMap );
+	}
+};
+
 class SheetsEnumeration : public EnumerationHelperImpl
 {
 	uno::Reference< frame::XModel > m_xModel;
@@ -79,7 +165,7 @@ public:
 
 };
 
-ScVbaWorksheets::ScVbaWorksheets( const uno::Reference< vba::XHelperInterface >& xParent, const uno::Reference< ::com::sun::star::uno::XComponentContext > & xContext, const uno::Reference< sheet::XSpreadsheets >& xSheets, const uno::Reference< frame::XModel >& xModel ): ScVbaWorksheets_BASE( xParent, xContext, uno::Reference< container::XIndexAccess >( xSheets, uno::UNO_QUERY ) ), mxModel( xModel ), m_xSheets( xSheets ) 
+ScVbaWorksheets::ScVbaWorksheets( const uno::Reference< vba::XHelperInterface >& xParent, const uno::Reference< ::com::sun::star::uno::XComponentContext > & xContext, const uno::Reference< container::XIndexAccess >& xSheets, const uno::Reference< frame::XModel >& xModel ): ScVbaWorksheets_BASE( xParent, xContext,  xSheets ), mxModel( xModel ), m_xSheets( uno::Reference< sheet::XSpreadsheets >( xSheets, uno::UNO_QUERY ) ) 
 {
 }
 
@@ -178,7 +264,16 @@ ScVbaWorksheets::Add( const uno::Any& Be
 void
 ScVbaWorksheets::Delete() throw (uno::RuntimeException)
 {
-	//SC_VBA_STUB();
+	// #TODO #INVESTIGATE
+	// mmm this method could be trouble if the underlying
+	// uno objects ( the m_xIndexAccess etc ) aren't aware of the
+	// contents that are deleted
+	sal_Int32 nElems = getCount();
+	for ( sal_Int32 nItem = 1; nItem <= nElems; ++nItem )
+	{
+		uno::Reference< excel::XWorksheet > xSheet( Item( uno::makeAny( nItem ), uno::Any() ), uno::UNO_QUERY_THROW );
+		xSheet->Delete();
+	}
 }
 
 bool
@@ -242,7 +337,73 @@ ScVbaWorksheets::setVisible( const uno::
 		throw uno::RuntimeException( rtl::OUString( 
 			RTL_CONSTASCII_USTRINGPARAM( "Visible property doesn't support non boolean #FIXME" ) ), uno::Reference< uno::XInterface >() );
 }
+
+void SAL_CALL 
+ScVbaWorksheets::Select( const uno::Any& Replace ) throw (uno::RuntimeException)
+{
+	ScTabViewShell* pViewShell = getBestViewShell( mxModel );
+	if ( !pViewShell )
+		throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Cannot obtain view shell" ) ), uno::Reference< uno::XInterface >() );
+			
+	ScMarkData& rMarkData = pViewShell->GetViewData()->GetMarkData();
+	sal_Bool bReplace = sal_True;
+	Replace >>= bReplace;
+	// Replace is defaulted to True, meanining this current collection 
+	// becomes the Selection, if it were false then the current selection would
+	// be extended
+	bool bSelectSingle = bReplace; 
+	sal_Int32 nElems = getCount();
+	for ( sal_Int32 nItem = 1; nItem <= nElems; ++nItem )
+	{
+		uno::Reference< excel::XWorksheet > xSheet( Item( uno::makeAny( nItem ), uno::Any() ), uno::UNO_QUERY_THROW );
+		ScVbaWorksheet* pSheet = dynamic_cast< ScVbaWorksheet* >( xSheet.get() );
+		if ( pSheet )
+		{
+			if ( bSelectSingle )
+			{
+				rMarkData.SelectOneTable( static_cast< SCTAB >( pSheet->getSheetID() ) );
+				bSelectSingle = false;
+			}
+			else
+				rMarkData.SelectTable( static_cast< SCTAB >( pSheet->getSheetID() ), TRUE );
+			
+		}
+	}
+	
+
+}
+
 //ScVbaCollectionBaseImpl
+uno::Any SAL_CALL 
+ScVbaWorksheets::Item( const uno::Any& Index, const uno::Any& Index2  ) throw (uno::RuntimeException)
+{
+	if ( Index.getValueTypeClass() == uno::TypeClass_SEQUENCE )
+	{
+		uno::Reference< script::XTypeConverter > xConverter = getTypeConverter(mxContext);
+		uno::Any aConverted;
+		aConverted = xConverter->convertTo( Index, getCppuType((uno::Sequence< uno::Any >*)0) );
+		SheetMap mSheets;
+		uno::Sequence< uno::Any > sIndices;
+		aConverted >>= sIndices;
+		sal_Int32 nElems = sIndices.getLength();
+		for( sal_Int32 index = 0; index < nElems; ++index )
+		{
+			uno::Reference< excel::XWorksheet > xWorkSheet( ScVbaWorksheets_BASE::Item( sIndices[ index ], Index2 ), uno::UNO_QUERY_THROW );
+			ScVbaWorksheet* pWorkSheet = dynamic_cast< ScVbaWorksheet* >( xWorkSheet.get() );
+			if ( pWorkSheet )
+			{
+				uno::Reference< sheet::XSpreadsheet > xSheet( pWorkSheet->getSheet() , uno::UNO_QUERY_THROW );
+				uno::Reference< container::XNamed > xName( xSheet, uno::UNO_QUERY_THROW );
+				mSheets.push_back( xSheet );
+			}
+		}  
+		uno::Reference< container::XIndexAccess > xIndexAccess = new SheetCollectionHelper( mSheets );
+		uno::Reference< vba::XCollection > xSelectedSheets(  new ScVbaWorksheets( this->getParent(), mxContext, xIndexAccess, mxModel ) );
+		return uno::makeAny( xSelectedSheets );
+	}
+	return 	ScVbaWorksheets_BASE::Item( Index, Index2 );
+}
+
 uno::Any 
 ScVbaWorksheets::getItemByStringIndex( const rtl::OUString& sIndex ) throw (uno::RuntimeException)
 {
